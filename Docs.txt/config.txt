---------------------------------------------------
W A R N I N G      W A R N I N G      W A R N I N G
---------------------------------------------------
The following text file was automatically generated
from a document that you really should read in HTML
format.  This text document is only a poor fallback
if you cannot read HTML, but it is NOT RECOMMENDED.

To read this document in the recommended way, point
your favorite web browser at one of these 3 places:
(1) The SPEC site http://www.spec.org/cpu2006/Docs/
(2) The Docs directory from your CPU2006 DVD, e.g.:
    /dvdrom/Docs/ for Unix or E:\Docs\ for Windows.
(3) The Docs directory on the system where you have
    installed your SPEC CPU2006 tree - for example:
    /spec/Docs/ (Unix) or D:\myspec\Docs\ (Windows)
---------------------------------------------------
W A R N I N G      W A R N I N G      W A R N I N G
---------------------------------------------------

                           SPEC CPU2006 Config Files

   Last updated: 31-Jul-2006 jlh

   (To check for possible updates to this document, please see
   http://www.spec.org/cpu2006/Docs/ )

   Overview

   Click one of the following to go to the detailed contents about that item:

   I. Introduction

   II. Config file options for runspec

   III. Config file options for specmake

   IV. Config file options for the shell

   V. Config file options for readers

   VI. Using Feedback Directed Optimization (FDO)

   VII. The config file preprocessor

   VIII. Output files - and how they relate to your config file

   IX. Troubleshooting

   Contents

   I. Introduction

   A. What is a config file? (Background: benchmark philosophy.)

   B. What does a config file affect?

   1. runspec

   2. specmake

   3. The shell

   4. Readers of the results

   5. The config file preprocessor

   6. Warning: unknown options can trigger rebuilds

   C. Config file structure

   1. Comments and whitespace

   2. Header section

   3. Named sections

   a. Precedence for the benchmark specifier

   Default benchmark

   Named suite

   Named benchmark

   Order of differing sections does not matter

   Order of the same section does matter

   b. Precedence for the tuning specifier

   c. Precedence for the extension specifier

   Extension found in config file

   Extension not found in config file

   Extension override

   d. Combining specifier types

   e. Precedence among section types

   4. MD5 section

   5. Shell-like "here documents" and continued lines

   6. Included files

   D. Variable substitution

   1. By runspec

   a. At startup: $[variable]

   b. During a run: $variable and ${variable}

   c. Example: cleaning files before a training run

   d. Example: submit to multiple nodes, Tru64 Unix

   e. Example: bind to processors, SPEC TurboBlaster9000

   2. By the shell \$VARIABLE

   a. Protecting shell variables

   b. Example: submitting to multiple nodes, SGI Origin 2000

   3. By specmake $(VARIABLE)

   4. Limitations on variable substitution

   5. Unsetting a variable with "%undef%"

   II. Config file options for runspec

   A. Options that can also be used on the runspec command line

   action check_version copies delay deletework ext feedback flagsurl
   http_proxy http_timeout ignore_errors info_wrap_columns iterations mach
   make_no_clobber max_active_compares nobuild notes_wrap_columns
   output_format reportable rate rebuild runlist setprocgroup size table tune
   verbose

   B. Options for runspec that can only be used in a config file

   allow_extension_override backup_config basepeak bind check_md5
   command_add_redirect difflines env_vars expand_notes expid fail fail_build
   fail_run ignore_sigint inherit_from line_width locking log_line_width
   mailcompress mailmethod mailport mailserver mailto mail_reports make
   makeflags mean_anyway minimize_rundirs minimize_builddirs no_monitor
   no_input_handler notes_wrap_indent output_root plain_train
   section_specifier_fatal sendmail srcalt strict_rundir_verify
   sysinfo_program teeout use_submit_for_speed version_url

   III. Config file options for specmake

   CC, CXX, FC
   CLD, CXXLD, FLD
   ONESTEP
   OPTIMIZE, COPTIMIZE, CXXOPTIMIZE, FOPTIMIZE
   PORTABILITY, CPORTABILITY, CXXPORTABILITY, FPORTABILITY...
   RM_SOURCES
   PASSn_CFLAGS, PASSn_CXXFLAGS, PASSn_FFLAGS

   IV. Config file options for the shell

   fdo_pre0 fdo_preN fdo_make_cleanN fdo_pre_makeN fdo_make_passN
   fdo_post_makeN fdo_runN fdo_postN submit

   V. Config file options for readers

   A. Descriptive fields

   company_name hw_avail hw_cpu_name hw_cpu_char hw_cpu_mhz hw_disk hw_fpu
   hw_memory hw_model hw_nchips hw_ncores hw_ncoresperchip hw_ncpuorder
   hw_nthreadspercore hw_ocache hw_other hw_pcache hw_scache hw_tcache
   hw_vendor license_num machine_name prepared_by sw_auto_parallel sw_avail
   sw_base_ptrsize sw_compiler sw_file sw_os sw_state sw_other
   sw_peak_ptrsize tester tester_name test_date test_sponsor VENDOR

   B. Field scoping and continuation

   C. Additional notes for the reader

   notes_compNNN notes_portNNN notes_baseNNN notes_peakNNN notes_osNNN
   notes_platNNN notes_portNNN notesNNN

   VI. Using Feedback Directed Optimization (FDO)

   A. The minimum requirement: PASSn* or fdo*n

   B. Combining PASS*n and fdo*n; fake is your friend

   C. Interaction with the config file feedback option

   D. If the config file feedback option is used at multiple levels

   E. Interaction with runspec --feedback

   F. More examples

   VII. The config file preprocessor

   A. Defining macros

   B. Un-doing macro definition

   C. Using macros

   D. Conditionals

   1. %ifdef .. %endif

   2. %ifndef .. %endif

   3. %if .. %endif

   4. %else

   5. %elif

   E. Informational directives

   1. %warning

   2. %error

   VIII. Output files - and how they relate to your config file

   A. Automatic backup of config files

   B. The log file and verbosity levels

   C. Log file example: Feedback-directed optimization.

   D. Help, I've got too many logs

   E. Finding the build directory

   F. Files in the build directory

   G. For more information

   IX. Troubleshooting

I. Introduction

                                                     q. This document looks   
   SPEC CPU2006 config files provide very detailed   big and intimidating.    
   control of testing. Before learning about these   Where do I start?        
   details, most users will find it helpful to begin                          
   with:                                             a. Don't start here.     
                                                     Start with runspec.html. 
     * readme1st.html and                            But, once you do read    
     * runspec.html, such as the section About       this document, please be 
       config files.                                 sure to notice:          
                                                                              
   Note: links to SPEC CPU2006 documents on this web   * Section I.B, which   
   page assume that you are reading the page from a      explains that a      
   directory that also contains the other SPEC           config file contains 
   CPU2006 documents. If by some chance you are          options that are     
   reading this web page from a location where the       used by five (5)     
   links do not work, try accessing the referenced       different consumers. 
   documents at one of the following locations:        * The table of         
                                                         contents, which      
     * www.spec.org/cpu2006/Docs/                        lists the options    
     * The $SPEC/Docs/ (Unix) or %SPEC%\Docs\            accepted by each of  
       (Windows) directory on a system where SPEC        those consumers. For 
       CPU2006 has been installed.                       example, the shell   
     * The Docs/ directory on your SPEC CPU2006          options are listed   
       distribution DVD.                                 here.                
                                                                              
   The runspec document discusses the primary user   If you keep track of     
   interface for running SPEC CPU2006; with this     which options are        
   document, attention turns more toward how things  addressed to which       
   work inside.                                      consumer, you will       
                                                     considerably ease your   
                                                     learning curve.          

  I.A. What is a config file? (Background: benchmark philosophy.)

   A config file contains:

     * The instructions for building the benchmarks.
     * The instructions for running the benchmarks.
     * The description of the system under test.
     * The key to result reproducibility.
     * The guts, the real controls, the Good Stuff.
     * The place where the benchmark philosophy hits the road.

   A key decision that must be made by designers of a benchmark suite is
   whether to allow the benchmark source code to be changed when the suite is
   used.

   If source code changes are allowed:

    +  The benchmark can be adapted to the system under test.                 
    +  Portability may be easier.                                             
    -  But it may be hard to compare results between systems, unless some     
       formal audit is done to ensure that comparable work is done.           

   If source code changes are not allowed:

    +  Results may be easier to compare.                                      
    -  It may take more time and effort to develop the benchmark, because     
       portability will have to be built in ahead of time.                    
       Portability may be hard to achieve, at least for real applications.    
    -  Simple loops of 15 lines can port with little effort, and such         
       benchmarks have their uses. But real applications are more complex.    

   SPEC has chosen not to allow source code changes for the CPU2006 suite,
   except under very limited circumstances.

   By restricting source code changes, SPEC separates the activity of porting
   benchmarks, which has a goal of being performance neutral, from the
   activity of using the benchmarks, where the goal is getting the best score
   possible. Prior to the first production use of CPU2006, SPEC invested
   substantial effort to port the suite to as many platforms as practical,
   including 32 and 64-bit systems; little-endian and big-endian hardware;
   Unix, Linux, Mac OS X, and Microsoft Windows systems.

   Are source code changes ever allowed? Normally, no. But if you discover a
   reason why you believe such a change is essential, SPEC wants to hear
   about it, and will consider such requests for a future revision of the
   suite. SPEC will normally not publish CPU2006 results using modified
   source code, unless such modifications are unavoidable for the target
   environment, are submitted to SPEC, are made available to all users of the
   suite, and are formally approved by a vote.

   So, if source code changes are not allowed, but the benchmarks must be
   compiled in a wide variety of environments, can the users at least write
   their own makefiles, and select -D options to select different
   environments? The answer to these two questions are "no", and "yes",
   respectively:

     * No, you can't write your own makefiles.
     * But yes, you can select portability options (such as -D).

   You do this in the config file, which contains a centralized collection of
   all the portability options and optimization options for all the
   benchmarks in the CPU2006 suite. The SPEC tools then automatically
   generate the makefiles for you.

   The config file contains places where you can specify the characteristics
   of both your compile time and run time environments. It allows the
   advanced user to perform detailed manipulation of makefile options, but
   retains all the changes in one place so that they can be examined and
   reproduced.

   The config file is one of the key ingredients in making results
   reproducible. For example, if a customer would like to run the CPU2006
   suite on her own SuperHero Model 4 and discover how close results are in
   her environment to the environment used when the vendor published a
   CPU2006 result, she should be able to do that using only 3 ingredients:

    1. The SPEC CPU2006 media, ordered from SPEC.
    2. The software and hardware as specified in the full disclosure when the
       vendor published the original results.
    3. The config file from the vendor's submission.

  I.B. What does a config file affect?

   A config file contains options targetting five distinct consumers:

    1. The runspec tool, which provides overall control of the test,
    2. The tool that compiles benchmarks: specmake,
    3. Your shell, which is used for certain operations such as submiting to
       specific processors,
    4. Readers of the results, and
    5. The config file preprocessor.

   To understand how to write a config file effectively, you need to
   understand which consumer you are addressing at any given point.

   The above point seems worth emphasizing:

   To understand how to write a config file effectively, you need to
   understand which consumer you are addressing at any given point.

   This section gives you an overview of the consumers; more detail is
   included in later sections.

    I.B.1. runspec

   Various aspects of the operation of runspec can be affected by setting
   options within a config file. You'll find a list of these options in the
   table of contents for section II - including some that are available both
   on the runspec command line and some that can only be set within a config
   file.

   For example, if michael.cfg includes the lines:

    output_format = asc,ps
    tune          = base
    reportable    = 1
    runlist       = fp

   then the defaults for the runspec command would change as specified. A
   user who types either of the following two commands would get precisely
   the same effect:

    runspec --config=michael
    runspec --config=michael --output=asc,ps --tune=base --reportable fp

    I.B.2. specmake

   The tool specmake is simply GNU make renamed to avoid any possible
   conflicts with other versions of make that may be on your system. The
   options commonly used for specmake are listed in the table of contents for
   section III.

   For example, these config file lines:

    CC           = cc
    CPORTABILITY = -DSPEC_CPU_LP64
    OPTIMIZE     = -O4

   are written to the makefile set that is ultimately used to build the
   benchmark, and are interpreted by specmake.

    I.B.3. The shell

   Some config file lines define commands that are handed off to the shell
   or, on Windows, the command interpreter. The list of these is in the table
   of contents for section IV.

   For example, consider a config file that contains:

    fdo_pre0     = mkdir /tmp/joydeep/feedback; rm -f /tmp/joydeep/feedback/*

   When using this config file, runspec will pass the above command to the
   shell prior to running a training run for feedback directed optimization.
   It is the shell that actually carries out the requested commands, not
   runspec, so the syntax of the command depends on whether you are using the
   Unix shell (/bin/sh) or the Windows command interpreter (cmd.exe).

   Because runspec can cause arbitrary commands to be executed, it is
   therefore important to read a config file you are given before using it.

    I.B.4. Readers of the results

   If a SPEC CPU2006 result is published (for example, at
   http://www.spec.org/), it is expected to contain all the information
   needed for a reader to understand exactly what was tested. Fields that are
   informative for readers are listed in the table of contents for section V.

   For example, config file lines such as these are addressed to the human
   reader:

    test_date = Nov-2008
    hw_avail  = Apr-2008
    sw_avail  = May-2008
    notes_base_015  = Note: Feedback directed optimization was not used

   In addition, for results published by SPEC, the config file itself is
   available to readers at http://www.spec.org/cpu2006/. The config file is
   presented as you wrote it, with three exceptions (protected comments, the
   MD5 section, and rawfile corrections for reader fields). The config file
   is made available because it is so important to reproducing results, as
   described in the Introduction. The config file is saved on every run, as a
   compressed portion of the rawfile, and can be accessed with runspec
   --rawformat --output_format=config <rawfile>.

    I.B.5. The config file preprocessor

   There is also a config file preprocessor, which is addressed via lines
   that begin with % in the first column. (The config file preprocessor is
   new with CPU2006.)

    I.B.6 Warning: unknown options can trigger rebuilds

   What if you accidentally enter an option that                              
   isn't absorbed by any of the above five                                    
   consumers? For example, perhaps you might use                              
   incorrect spelling and set CXXOPTIMZIE = -O4 or                            
   perhaps you might use older CPU2000 spelling                               
   such as tester_name = Willi Computers; but                                 
   tester_name is not a field for CPU2006.                                    
                                                    q. Why are my binaries    
   Unknown options cause two things to happen:      being rebuilt?            
   first, the tools will typically pass your                                  
   setting along to specmake, which will proceed to a. If you have changed    
   silently ignore items such as CXXOPTIMZIE = -O4. your compile options,     
                                                    then the binaries should  
   More importantly, the tools will add your new    be rebuilt, so that the   
   option, and its value, into the "MD5 hash" that  binaries will match the   
   describes your binaries. From the tools' point   config file.              
   of view, an unknown setting is something that                              
   you must have done for a reason; the tools do    If not, maybe you have    
   not attempt to guess that you just made a        changed some other
   spelling mistake. Therefore, when you add the    options.
   item with the spelling error, you will probably  
   trigger a rebuild. Furthermore, when you later   Maybe you have
   correct the spelling error, you will probably    mis-spelled some options.
   trigger another rebuild. You should still        
   correct the error; but if you wonder why the     See details at left.
   correction caused a rebuild, it's because the    
   tools cannot tell a minor spelling fix from an   
   important setting. They assume that most         
   everything is important.                         
                                                    
   The MD5 hash is discussed below, as is an option 
   that controls checking of it.                    

  I.C. Config file structure

   A config file contains:

     * A header section.
     * An arbitrary number of user-defined named sections, delimited by
       section markers.
     * An automatically-generated MD5 section.

   About "scope": Every line of the config file is considered to be within
   the scope of one of the above three. Lines prior to the first section
   marker are in the scope of the header section. All other lines are either
   in the scope of the most recently preceding user-defined section marker,
   or else in the MD5 section.

   A line within the scope of a named section may be overridden by a line
   within the scope of a different named section, according to rules that are
   described below.

    I.C.1. Comments and whitespace

   Comment lines begin with a #, and can be placed anywhere in a config file.
   When the config file is saved as an encoded portion of the rawfile, the
   comments are included. But if a comment line begins with #>, it is a
   "protected comment" that will not be saved in the rawfile. Thus you could
   use # for most of your comments, and use #> for proprietary information,
   such as:

    #> I didn't use the C++ beta version because of Bob's big back-end bug.

   Blank lines can be placed anywhere in a config file.

   Spaces within a line are usually ignored. Of course, you wouldn't want to
   spell OPTIMIZE as OPT I MIZE, but you are perfectly welcome to do either
   of the following:

    OPTIMIZE=-O2
    OPTIMIZE   =  -02

   One place where spaces are considered significant is in notes, where the
   tools assume you are trying to line up your comments in the full
   disclosure reports. (Notes are printed in a fixed-width font.)

   Spaces at the beginning of lines are ignored, except when attempting to
   address the preprocessor. Preprocessor directives always begin with a
   percent sign (%) in the first column. You can put spaces after the percent
   sign, if you wish, as shown by the examples below.

   Debug alert: Trailing spaces - that is, spaces at the end of lines - may
   sometimes cause unexpected results. For example, you should say
   "teeout = yes"
   not
   "teeout = yes  "
   If you find yourself scratching your head and wondering why an option is
   not working as described in this document, try checking for trailing
   spaces.

    I.C.2. Header section

   The header section is simply the first section, prior to the first
   occurence of a named section.

   Most attempts to address runspec itself must be done in the header
   section. For example, if you want to set reportable=1, you must do so
   before any occurrences of section markers.

    I.C.3. Named Sections

   A named section is a portion of the config file that begins with a section
   marker and continues until the next section marker or the MD5 section is
   reached. The contents of the named section are applied based upon the
   precedence rules described in the following sections.

   A "section marker" is a four-part string of the form:

    benchmark[,benchmark,...]=tuning=extension=machine:

   These are referred to below as the 4 "section specifiers". The allowed
   values for the section specifiers are:

              default                                                         
              cpu2006                                                         
              int                                                             
   benchmark: fp                                                              
              Any individual benchmark, such as 465.tonto                     
              Any list of benchmarks, such as 450.soplex,403.gcc (The ability 
              to specify more than one benchmark is new with CPU2006.)        
              default                                                         
   tuning:    base                                                            
              peak                                                            
   extension: default                                                         
              An arbitrary string, such as "cloyce-naturalblonde"             
   machine:   default                                                         
              An arbitrary string [*]                                         

   [*] The "machine" specifier works similarly to the extension specifier,
   but it does not affect the name of the executable produced, which, in many
   environments, makes it less useful than the extension specifier. This
   document does not describe the usage of the "machine" specifier, other
   than to note that it exists; if you feel particularly courageous, you can
   experiment with it.

   But please be aware that if you use a single config file to build with two
   different machine settings, you will likely overwrite the original
   binaries on the second build, since the machine specifier does not affect
   the name of the generated executable.

   An example of the usage of the machine specifier may be found in your
   config directory, in solaris-sparc-sunstudio.cfg. That config file applies
   -DSPEC_CPU_LP64 when the machine native64 is selected; it also takes steps
   to work around the limitation mentioned in the previous paragraph.

   Trailing default section specifiers may be omitted from a section marker.
   Thus all three of these section markers are equivalent:

    465.tonto=base=default=default:
    465.tonto=base=default:
    465.tonto=base:

   Section markers can be entered in any order. Section markers can be
   repeated; material from identical section markers will automatically be
   consolidated. That is, you are welcome to start one section, start a
   different one, then go back and add more material to the first section.
   But please note that since there is no marker for the header section, you
   cannot go back to it.

   By constructing section markers, you specify how you would like your
   options applied, with powerful defaulting and overriding capabilities. The
   next several sections walk through examples to demonstrate precedence,
   including how sections interact with each other.

      I.C.3.a. Precedence for the benchmark specifier

   For the benchmark specifier, the precedence is:

   highest   named benchmark
             suite name
   lowest    default

   Using default as the benchmark specifier

   For example, consider this config file that only mentions default for the
   benchmark specifier:

    $ cat tmp.cfg
    runlist       = sjeng
    size          = test
    iterations    = 1
    tune          = base
    output_format = text
    teeout        = 1

    default=default=default=default:
    OPTIMIZE = -xO1 -w

    $ runspec --config=tmp | grep sjeng.c
    cc -c -o sjeng.o -DSPEC_CPU -DNDEBUG   -xO1 -w    sjeng.c
    $

   The config file above is designed for quick, simple testing: it runs only
   one benchmark, namely 458.sjeng, using the smallest (test) workload, runs
   it only once, uses only base tuning, outputs only the text-format (ASCII)
   report, and displays the build commands to the screen (teeout). To use it,
   we issue a runspec command, and pipe the output to grep to search for the
   actual generated compile command. (Alternatively, on Windows, we could use
   findstr on the generated log file).

   The careful reader may ask, "Why does the runlist reference sjeng rather
   than 458.sjeng?" The answer is that the runlist can use benchmark numbers
   or any abbreviation that is sufficient for uniqueness; any of the
   following would have the same effect: "458.sjeng", "458", "sjeng", "sj",
   "458.sj". This is the same rule as for the corresponding option on the
   command line.

   The results show that the tuning applied was the expected -xO1 -w (which
   mean optimization level 1 and suppress warnings, for the Sun Studio
   Compilers). The tools have automatically added -c -o sjeng.o to specify
   where the object file is to be written. The switches -DSPEC_CPU -DNDEBUG
   were also added automatically. The former may enable benchmark code
   changes from SPEC's porting process (if any), and the latter turns off C
   language "assert" statements (if any).

   Using a named suite as the benchmark specifier

   The next example differs from the previous one by adding a section marker
   with int, for the integer suite, as the first section specifier:

    $  cat tmp.cfg
    runlist       = sjeng
    size          = test
    iterations    = 1
    tune          = base
    output_format = text
    teeout        = 1

    default=default=default=default:
    OPTIMIZE = -xO2 -w

    int=default=default=default:
    OPTIMIZE = -xO3 -w

    $ runspec --config=tmp | grep sjeng.c
    cc -c -o sjeng.o -DSPEC_CPU -DNDEBUG   -xO3 -w     sjeng.c
    $

   The second OPTIMIZE line is used above because the reference to the
   integer suite is considered to be more specific than the overall default.

   Using a named benchmark as the benchmark specifier

   Furthermore, we can add a specifier that mentions sjeng by name:

    $  cat tmp.cfg
    runlist       = sjeng
    size          = test
    iterations    = 1
    tune          = base
    output_format = text
    teeout        = 1

    default=default=default=default:
    OPTIMIZE = -xO2 -w

    int=default=default=default:
    OPTIMIZE = -xO3 -w

    458.sjeng=default=default=default:
    OPTIMIZE = -xO4 -w

    $ runspec --config=tmp | grep sjeng.c
    cc -c -o sjeng.o -DSPEC_CPU -DNDEBUG   -xO4 -w      sjeng.c
    $

   The third OPTIMIZE line wins above, because it is included in the section
   that is considered to be the most specific.

   Order of differing sections does not matter:

   But what if we had said these in a different order?

    $ cat tmp.cfg
    runlist       = sjeng
    size          = test
    iterations    = 1
    tune          = base
    output_format = text
    teeout        = 1

    458.sjeng=default=default=default:
    OPTIMIZE = -xO4 -w

    default=default=default=default:
    OPTIMIZE = -xO2 -w

    int=default=default=default:
    OPTIMIZE = -xO3 -w

    $ runspec --config=tmp | grep sjeng.c
    cc -c -o sjeng.o -DSPEC_CPU -DNDEBUG   -xO4 -w      sjeng.c

   Notice above that the order of entry is not significant; it's the order of
   precedence from least specific to most specific.

   Order of the same section does matter:

   When a specifier is listed more than once at the same descriptive level,
   the last instance of the specifier is used. Consider this case:

    458.sjeng=default=default=default:
    OPTIMIZE = -xO4

    400.perlbench=default:
    OPTIMIZE = -fast

    458.sjeng=default=default=default:
    OPTIMIZE = -xO3

   The ending value of OPTIMIZE for 458.sjeng is -xO3, not -xO4.

      I.C.3.b. Precedence for the tuning specifier

   For the tuning specifier, either base or peak has higher precedence than
   default.

   Here is an example of its use:

    $ cat tmp.cfg
    runlist       = sjeng
    size          = test
    iterations    = 1
    tune          = base,peak
    output_format = text
    teeout        = 1

    default=default=default=default:
    CC       = /opt/SUNWspro/bin/cc -w

    default=base=default=default:
    CC       = /update1/bin/cc -w

    default=peak=default=default:
    CC       = /update2/bin/cc -w

    $ runspec --config=tmp | grep sjeng.c
    /update1/bin/cc -w -c -o sjeng.o -DSPEC_CPU -DNDEBUG    sjeng.c
    /update2/bin/cc -w -c -o sjeng.o -DSPEC_CPU -DNDEBUG    sjeng.c
    $

   In the above example, we compile sjeng twice: once for base tuning, and
   once for peak. Notice that in both cases the compilers defined by the more
   specific section markers have been used, namely /update1/bin/cc and
   /update2/bin/cc, rather than /opt/SUNWspro/bin/cc from
   default=default=default=default.

      I.C.3.c. Precedence for the extension specifier

   For the extension specifier, any named extension is at a higher precedence
   level than the default.

   Using an extension found in the config file

   The next example, builds with either the library for the "bsdmalloc"
   memory allocation routines, or the multi-threaded "mtmalloc" routines.
   (Note: the SPEC CPU2006 benchmarks do not require multi-threading, and do
   not contain threading directives; but a compiler is allowed to choose to
   try to automatically decompose threads, and there's nothing in the run
   rules to prohibit you from linking with your preferred version of a
   supported malloc library.)

    $ cat tmp.cfg
    runlist       = sjeng
    size          = test
    iterations    = 1
    tune          = base
    output_format = text
    teeout        = 1

    default=default=default:
    LIBS = -lslowmalloc

    default=default=myke:
    LIBS = -lbsdmalloc

    default=default=yusuf:
    LIBS = -lthread -lmtmalloc
    $
    $ runspec --config=tmp --extension=myke | grep sjeng.o
    cc -c -o sjeng.o -DSPEC_CPU -DNDEBUG                    sjeng.c
    cc  attacks.o book.o crazy.o draw.o ecache.o epd.o eval.o leval.o moves.o
    neval.o partner.o proof.o rcfile.o search.o see.o seval.o sjeng.o ttable.o
    utils.o     -lbsdmalloc          -o sjeng
    $
    $ runspec --config=tmp --extension=yusuf | grep sjeng.o
    cc -c -o sjeng.o -DSPEC_CPU -DNDEBUG                    sjeng.c
    cc  attacks.o book.o crazy.o draw.o ecache.o epd.o eval.o leval.o moves.o
    neval.o partner.o proof.o rcfile.o search.o see.o seval.o sjeng.o ttable.o
    utils.o     -lthread -lmtmalloc          -o sjeng
    $
    $ cd $SPEC/benchspec/CPU2006/458.sjeng/exe
    $ ls -lt | head -3
    total 5888
    -rwxrwxr-x   1 alan  staff      244688 May 11 16:32 sjeng_base.yusuf
    -rwxrwxr-x   1 alan  staff      244628 May 11 16:31 sjeng_base.myke
    $


   Notice above that two different versions of sjeng were built from the same
   config file, and neither one used slowmalloc, since the named extension is
   higher priority than the default. Both executables are present in the exe
   directory for 458.sjeng.

   Using an extension that is not found in the config file

   The previous section demonstrated use of the runspec switch --extension to
   select among extensions defined in the config file. But what if the
   extension on the command line is not mentioned in the config file? The
   example below continues immediately from the example just above:

    $ runspec --config=tmp --extension=yusoff
    runspec v4200 - Copyright 1999-2006 Standard Performance Evaluation Corporation
    ...
    ERROR: The extension 'yusoff' defines no settings in the config file!
           If this is okay and you'd like to use the extension to just change
           the extension applied to executables, please put
        allow_extension_override = yes
           into the header section of your config file.

   By default, if you mention an extension on the runspec command line that
   does not exist in the config file, the tools refuse to build.

   Extension override

   But if you add allow_extension_override=yes to the top of the config file,
   then the tools will build or run with the extension you specified, using
   the same settings as they would have used if no extension had been entered
   on the runspec command line.

   The next example continues with a config file that adds
   allow_extension_override to the previous example config file:

    $ diff tmp.cfg tmp2.cfg
    0a1
    > allow_extension_override=yes
    $
    $ runspec --config=tmp2 --extension=yusoff | grep sjeng.o
    cc -c -o sjeng.o -DSPEC_CPU -DNDEBUG                    sjeng.c
    cc attacks.o book.o crazy.o draw.o ecache.o epd.o eval.o leval.o moves.o
    neval.o partner.o proof.o rcfile.o search.o see.o seval.o sjeng.o ttable.o
    utils.o           -lslowmalloc          -o sjeng
    $
    $ cd $SPEC/benchspec/CPU2006/458.sjeng/exe
    $ ls -lt | head -2
    total 6384
    -rwxrwxr-x   1   alan   staff        244628 May 11 16:39 sjeng_base.yusoff

   Notice above that although the tools now consent to build with the
   requested extension, the library settings now falls back to the default,
   since "yusoff" does not match any section markers.

   (For CPU2000, the tools silently accepted any extension, including typos,
   which sometimes led to surprising results. CPU2006 tries to reduce
   surprises by rejecting your typos, unless you set
   allow_extension_override.)

      I.C.3.d. Combining specifier types

   If more than one section applies to a particular benchmark without
   disagreement among them, then all are applied.

   Consider this example:

    $ cat tmp.cfg
    runlist       = sjeng
    size          = test
    iterations    = 1
    tune          = base
    output_format = text
    teeout        = 1

    default=default=default=default:
    OPTIMIZE = -xO2 -w
    CC       = /opt/SUNWspro/bin/cc
    LIBS     = -lbsdmalloc

    458.sjeng=default=default=default:
    OPTIMIZE = -xO4 -w

    default=peak=default=default:
    CC       = /update1/bin/cc

    default=default=mt=default:
    LIBS     = -lthread -lmtmalloc

    $ runspec --config=tmp --tune=peak --ext=mt | grep sjeng.o
    /update1/bin/cc  -c -o sjeng.o -DSPEC_CPU -DNDEBUG   -xO4 -w  sjeng.c
    /update1/bin/cc   -xO4 -w attacks.o book.o crazy.o draw.o ecache.o epd.o
    eval.o leval.o moves.o neval.o partner.o proof.o rcfile.o search.o see.o
    seval.o sjeng.o ttable.o utils.o    -lthread -lmtmalloc         -o sjeng
    $

   Notice above that all three sections applied: the section specifier for
   458.sjeng, the specifier for peak tuning, and the specifier for extension
   mt.

      I.C.3.e. Precedence among section types

   If sections conflict with each other, the order of precedence is:

      highest     benchmark
                  suite
                  tuning
      lowest      extension

   And this order can be demonstrated as follows:

     $  cat tmp.cfg
      runlist       = sjeng
      size          = test
      iterations    = 1
      tune          = base
      output_format = text
      teeout        = 1
      makeflags     = -j30
  
      default=default=default=default:
      OPTIMIZE = -xO1 -w
  
      int=default=default=default:
      OPTIMIZE = -xO2 -w
  
      458.sjeng=default=default=default:
      OPTIMIZE = -xO3 -w
  
      default=peak=default=default:
      OPTIMIZE = -xO4 -w
  
      default=default=mt=default:
      OPTIMIZE = -xO5 -w
      $
      $ runspec --config=tmp sjeng | grep sjeng.c 
 [1]  cc -c -o sjeng.o -DSPEC_CPU -DNDEBUG   -xO3 -w        sjeng.c
      $ runspec --config=tmp --tune=peak sjeng | grep sjeng.c
 [2]  cc -c -o sjeng.o -DSPEC_CPU -DNDEBUG   -xO3 -w        sjeng.c
      $ runspec --config=tmp --extension=mt sjeng | grep sjeng.c
 [3]  cc -c -o sjeng.o -DSPEC_CPU -DNDEBUG   -xO3 -w        sjeng.c
      $
      $ runspec --config=tmp --tune=base bzip | grep bzip2.c
 [4]  cc -c -o bzip2.o -DSPEC_CPU -DNDEBUG   -xO2 -w        bzip2.c
      $ runspec --config=tmp --tune=peak bzip | grep bzip2.c
 [5]  cc -c -o bzip2.o -DSPEC_CPU -DNDEBUG   -xO2 -w        bzip2.c
      $ runspec --config=tmp --extension=mt bzip | grep bzip2.c
 [6]  cc -c -o bzip2.o -DSPEC_CPU -DNDEBUG   -xO2 -w        bzip2.c
      $
      $ runspec --config=tmp --tune=base sphinx3 | grep utt.c
 [7]  cc -c -o utt.o -DSPEC_CPU -DNDEBUG -I. -DSPEC_CPU -DHAVE_CONFIG_H
      -I. -Ilibutil   -xO1 -w   utt.c
      $ runspec --config=tmp --tune=peak sphinx3 | grep utt.c
 [8]  cc -c -o utt.o -DSPEC_CPU -DNDEBUG -I. -DSPEC_CPU -DHAVE_CONFIG_H
      -I. -Ilibutil   -xO4 -w   utt.c
      $ runspec --config=tmp --extension=mt sphinx3 | grep utt.c
 [9]  cc -c -o utt.o -DSPEC_CPU -DNDEBUG -I. -DSPEC_CPU -DHAVE_CONFIG_H
      -I. -Ilibutil   -xO5 -w   utt.c
      $ runspec --config=tmp --tune=peak --extension=mt sphinx3 | grep utt.c
 [10] cc -c -o utt.o -DSPEC_CPU -DNDEBUG -I. -DSPEC_CPU -DHAVE_CONFIG_H
      -I. -Ilibutil   -xO4 -w   utt.c
      $

   Notice above that the named benchmark always wins: lines [1], [2], and
   [3]. If there is no section specifier that names a benchmark, but there is
   a section specifier that names a suite, then the suite wins: lines [4],
   [5], and [6]. If there are no applicable benchmark or suite specifiers,
   then tuning or extension can be applied: lines [8] and [9]. But if both
   tuning and extension are applied, tuning wins [10].

    I.C.4. MD5 Section

   The final section of your config file is generated automatically by the
   tools when the benchmarks are compiled, and looks something like this:

    __MD5__
    458.sjeng=base=none=default:
    # Last updated Thu May 11 08:53:12 2006
    optmd5=a0104c0975ee3b341e73437843df57a9
    baggage=
    compile_options=\
    @eNpz9vcNsFJITlbQBaJ8hfyCksz8vGK9fAVdl+AAV+d454BQINPPxdUp1F1BQUG3wt9YQbdcAR3Y\
    FOeXFiWn2nE5Wyk4O9sqJScrgZn+Tl7+ASG2SiimK3EBrQQa7Obj6B4MlMO0SYnL30oBqNHT1zPK\
    FagCYqsSl4+nnzfYtVgcYpOflJWaXFJshySGsBPkGh8XiMOwmw1W4B8KciySSwGYpEmr
    exemd5=9b42a21f12b1fbb4e87cd9bacd781c43


   The "MD5" is a checksum that ensures that the binaries referenced in the
   config file are in fact built using the options described therein. For
   example, if you edit the config file to change the optimization level for
   458.sjeng, the next time the file is used for sjeng, the tools will notice
   the change and will recompile it.

   You can optionally disable this behavior, but doing so is strongly
   discouraged. See the acerbic remarks in the description of check_md5,
   below.

   If you would like to see what portions of your config file are used in
   computing the MD5 hash, runspec with --debug=30 or higher, and examine the
   log file.

   For published results, the published config file (from rawformat
   --output_format=config) does not include the MD5 section.

    I.C.5. Shell-like "here documents" and continued lines

   Shell-style "here documents" are supported for setting variables to
   multi-line values. Continued lines (with \) are also supported:

    $ cat tmp2.cfg
    expand_notes  = 1
    size          = test
    runlist       = sjeng
    iterations    = 1
    output_format = text

    foo =<<EOT

    This +
    is a +
    test +
    EOT

    bar = \
          and +\
          so  +\
          is  +\
          this+

    notes01 = $foo
    notes02 = $bar

    $ runspec --config=tmp2 | grep txt
            format: ASCII -> /ailuropoda/raj/spec/result/CINT2006.159.test.txt
    $ grep + ../result/*159*txt
        This +
        is a +
        test +
              and +
              so  +
              is  +
              this+
    $

   Note: although continued lines are supported, they are rarely used. The
   more common method of continuation is by appending a number to a field, as
   described in the section "Field scoping and continuation".

    I.C.6. Included files

   It is possible to include another file in your config file. A typical use
   for this feature might be to keep all the software information in the main
   config file, but to include the hardware information about the current
   System Under Test (SUT) in another file. For example:

    $ cat tmp.cfg
    output_format = text
    iterations    = 1
    size          = test
    sw_compiler   = myC V1.0
    sw_avail      = Mar-2007
    runlist       = sjeng
    include: SUT.inc

    default=base:
    OPTIMIZE = -O
    $ cat SUT.inc
    hw_model = SuperHero IV
    hw_avail = Feb-2008

    $ runspec --config tmp | grep txt
            format: ASCII -> /manas/spec/result/CINT2006.160.test.txt
    $ grep avail ../result/*160.test.txt
     [...]       Hardware availability: Feb-2008
     [...]       Software availability: Mar-2007
    $

   Notice above that the report mentions both the hardware and software
   dates.

  I.D. Variable Substitution

   You can do variable substitution using your                                
   config file. But, as described in the                                      
   Introduction, the contents of a config are                                 
   directed to various consumers. Therefore,                                  
   effective use of variable substitution requires                            
   you to be aware of which software is doing the                             
   substitution. Differing syntax is used for                                 
   each.                                                                      
                                                                              
                 The config file preprocessor does                            
                 macro substitution. Macros to be                             
                 substituted always use a percent                             
   %{macro_name} sign and curly brackets:          q. Wait a minute... all    
                 %{macro_name} See the             these choices for          
                 preprocessor section for more     substitution? Which one do 
                 information.                      I want?                    
                 A dollar sign and square brackets                            
                 cause runspec to do substitution  a. You probably want the   
                 immediately after reading the     preprocessor.              
    $[variable]  config file. This is useful for   
                 variables that don't change       Have a look at the example
                 during a run, for example $[top]  at the top of Section VII.
                 to refer to the directory where   If that looks like what
                 SPEC CPU2006 has been installed.  you want, you're all set;
                 A dollar sign and the name of a   otherwise, you'll have to
                 variable cause Perl variable      think through which
     $variable   interpolation to be used, for     consumer you are
    ${variable}  example $hw_avail. Curly brackets addressing (runspec,
                 can be used to help the parser    specmake, or the shell)
                 avoid confusion with contiguous   and pick your syntax
                 other content: ${hw_avail}ish.    accordingly.
                 If runspec generates an external  
                 command which is handed off to    
                 your shell (or command            
    \$VARIABLE   interpreter), the variable will   
                 be interpreted according to the   
                 rules of your shell. Such a       
                 variable might look like this:    
                 \$SPEC.                           
                 If the variable is handed off to  
                 specmake, it is interpreted by    
    $(VARIABLE)  the usual rules of GNU make. Such 
                 variables might look like this:   
                 $(FOPTIMIZE).                     

    I.D.1. By runspec

   Substitution by runspec itself uses two different methods: the first is
   immediately after the config file is read, and the second is via Perl
   variable interpolation.

      I.D.1.a At startup: $[variable]

   Substitution for variables of the form $[variable] happens immediately
   after the config file is read. Any value that's set in the config file and
   is visible in the scope where the variable is used can be substituted.
   Because of the named section scoping restriction, if you want to use
   variable substitution to note your optimization flags, the notes for the
   individual benchmarks must be in those benchmarks' sections:

 400.perlbench=peak=default=default:
 PEAKFLAG=-gofast
 # The following will turn into what you expect
 notes_peak_400_1=I use $[PEAKFLAG]

 400.perlbench=base=default=default:
 BASEFLAG=-besafe
 # The following will turn into what you expect:
 notes_base_400_1=I use $[BASEFLAG]
 # The following will NOT WORK:
 notes_base_400_2=My brother likes $[PEAKFLAG]

   You can't substitute variables that don't exist or whose values aren't
   known when the config file is read.

   Wrong:

 ext = foo

 default:
 OPTIMIZE = -xO2
 notes01 = my ext is $[ext]

 default=default=bar:
 OPTIMIZE = -xO1
 notes02 = my ext is $[ext]

   This doesn't work because the sorting of which extensions to use doesn't
   happen until after the config file is processed. In this particular
   example, it's obvious (to you) what the value should be, but the tools
   aren't as clever as you are.

   Perhaps the most useful variable is the one for the top of the SPEC
   CPU2006 tree, $[top], often found in contexts such as:

     flagsurl = $[top]/myflagsdir/myflagsfile.xml

   Variables of possible interest might include:

    configpath   The location of your config file                             
      dirprot    protection that is applied to directories created by runspec 
      endian     4321 for big endian, 1234 for little                         
   flag_url_base directory where flags files are looked up                    
        OS       unix or windows                                              
    os_exe_ext   exe for windows, nil elsewhere                               
     realuser    the user name according to the OS                            
        top      the top directory of your installed SPEC CPU2006 tree        
     username    the username for purposes of tagging run directories         
        uid      the numeric user id                                          

   You can substitute for most options that you enter into the config file,
   including: action, allow_extension_override, backup_config, basepeak,
   check_md5, check_version, command_add_redirect, config, copies, delay,
   deletework, difflines, env_vars, expand_notes, expid, ext, fake, feedback,
   flagsurl, http_proxy, http_timeout, ignore_errors, ignore_sigint,
   info_wrap_columns, iterations, line_width, locking, log_line_width, mach,
   mail_reports, mailcompress, mailmethod, mailport, mailserver, mailto,
   make, make_no_clobber, makeflags, max_active_compares, mean_anyway,
   minimize_builddirs, minimize_rundirs, no_input_handler, no_monitor,
   notes_wrap_columns, notes_wrap_indent, output_format, output_root,
   plain_train, rate, rawformat, rebuild, reportable, runlist,
   section_specifier_fatal, sendmail, setprocgroup, size,
   strict_rundir_verify, sysinfo_program, table, teeout, tune,
   use_submit_for_speed, username, verbose, version_url.

   You can also print out the value of additional variables that you may have
   created.

   Here is a sample config file that illustrates square bracket variable
   substitution:

 $ cat x.cfg
 expand_notes = 1
 runlist      = fp
 action       = validate
 myfriend     = jamiemeow
 output_root  = /tmp
 flagsurl     = $[top]/Docs/flags/flags-advanced.xml

 notes01      = Today, I am running $[runlist] in $[top] on a $[OS] system
 notes02      = Today the flags file is $[flagsurl]
 notes03      = Today, my favorite friend is $[myfriend]

 $ runspec --config=x  --fakereportable | grep txt
         format: ASCII -> /tmp/result/CFP2006.002.txt
 $ grep Today /tmp/result/CFP2006.002.txt
      Today, I am running fp in /spec/cpu2006 on a unix system
      Today the flags file is /spec/cpu2006/Docs/flags/flags-advanced.xml
      Today, my favorite friend is jamiemeow

   You can't use square brackets to substitute variables whose value changes
   during a run or build.

   Wrong:

 default=default=default=default:
 #        I executed ''
 notes0 = I executed '$[command]'

   What did you expect?

   Don't worry -- you'll receive a warning if you use a variable that the
   tools don't know about. It's up to you to heed them.

      I.D.1.b During a run: $variable, ${variable}

   The second round uses Perl variable interpolation. Only Perl scalars
   (denoted by a leading $) can be interpolated. For example, notes001 below
   uses the log file number (generated by the tools) and the hardware
   availability date (which was set directly):

 $ cat tmp.cfg
 runlist       = mcf
 tune          = base
 size          = test

 iterations    = 1
 output_format = asc

 expand_notes  = 1
 hw_avail      = May-2006
 notes001      = This run is from log.$lognum with hw_avail $hw_avail

 $ runspec -c tmp | grep txt
         format: ASCII -> /spec/david/result/CINT2006.029.test.txt
 $ grep with ../result/*029*txt
      This run is from log.029 with hw_avail May-2006
 $

   In this case, $hw_avail could also have been substituted in the first
   round by writing it as $[hw_avail]. In general, for variable
   interpolation, the earlier the better.

   To put text immediately after a variable, you need to make it possible for
   the parser to see the variable that you want, by using braces:

    % tail -2 tmp.cfg
    notes001 =You have done ${lognum}x runs tonight, go to bed.

    % runspec -c tmp | grep txt
       format: ASCII -> /john/result/CINT2006.103.test.txt
    % grep done /john/result/CINT2006.103.test.txt
       You have done 103x runs tonight, go to bed.

   Interpolation won't always do what you wish it might do: for example, some
   variables are only defined at certain times, and your submit or notes line
   might be interpolated at a different time. When debugging a config files
   that uses variable interpolation, you will probably find --size test
   useful.

   Some things that you might choose to interpolate include:

               The first part of the executable name, which is                
     baseexe   <baseexe>_<tune>.<ext>. For example, in "libquantum_base.foo", 
               baseexe is "libquantum".                                       
    benchmark  The number and name of the benchmark currently being run, for  
               example 462.libquantum                                         
    benchname  The name of the benchmark currently being run, for example     
               libquantum                                                     
    benchnum   The number of the benchmark currently being run, for example   
               462                                                            
    benchtop   The top directory for the benchmark currently being run, for   
               example /spec/cpu2006/benchspec/CPU2006/462.libquantum         
               A value from your bind list. This variable is actually         
      BIND     interpreted by specinvoke, and cannot be spelled with braces.  
               Say $BIND, do not say ${BIND}.                                 
               The current command, for example                               
     command   ../run_peak_test_foo.0001/bzip2_peak.foo dryer.jpg 2 >         
               dryer.jpg.out 2>> dryer.jpg.err                                
   commandexe  The executable for the current command, for example            
               ../run_peak_test_foo.0001/bzip2_peak.foo                       
       ext     The extension for the benchmark being run                      
      iter     The current iteration number                                   
     logname   The complete log file name, for example                        
               /spec/cpu2006/result/CPU2006.168.log                           
     lognum    The log file number, for example 168                           
               The current copy number, when running a rate run. This         
   SPECCOPYNUM variable is actually interpreted by specinvoke, and cannot be  
               spelled with braces. Say $SPECCOPYNUM, do not say              
               ${SPECCOPYNUM}.                                                
               Do not use. This is the older, obsolete, CPU2000 spelling for  
   SPECUSERNUM what is now called SPECCOPYNUM. This spelling will be removed  
               in the first update of CPU2006.                                
      tune     The tuning for the benchmark being run (base or peak)          

   For example, let's say you want to go for minimal performance. You might
   want to do this with the nice command. You can say:

    submit=nice 20 '$command'

   and the $command gets expanded to whatever would normally be executed but
   with nice 20 stuck in front of it.

   If you'd like a complete list of the variables that you can use in your
   commands (relative to the config file you're using), set runspec's
   verbosity to 35 or higher (-v 35) and do a run that causes a command
   substitution to happen, with expand_notes=1.

      I.D.1.c Example: cleaning files before a training run

   Perhaps a more useful example is this one, which directs the shell to
   clean files related to the current executable in the temporary directory,
   before a training run for feedback directed optimization:

    fdo_pre0     = mkdir /tmp/pb; rm -f /tmp/pb/${baseexe}*

   NOTICE in this example that although the commands are carried out by the
   shell, the variable substitution is done by runspec.

      I.D.1.d Example: submit to multiple nodes, Tru64 Unix

   The following lines submit to multiple nodes on a Compaq AlphaServer SC
   Series Supercomputer running Tru64 Unix:

    submit= echo "$command" > dobmk; prun -n 1 sh dobmk
    command_add_redirect=1

   In this example, the command that actually runs the benchmark is written
   to a small file, dobmk, which is then submitted to a remote node selected
   by prun. The parallel run command, prun, can execute multiple copies of a
   process, but in this case we have requested just one copy by saying -n 1.
   The SPEC tools will create as many copies as required.

   The command_add_redirect is crucial. What happens without it?

 $ head prun1.cfg
 submit= echo "$command" > dobmk; prun -n 1 sh dobmk

 ext            = prun
 action         = validate
 runlist        = libquantum
 size           = test
 use_submit_for_speed = 1
 iterations     = 1       
 ignore_errors  = 1
 output_format  = text
 $ runspec -c prun1.cfg
 ...
 $ cd $SPEC/benchspec/CPU2006/462.libquantum/run/run_base_test_prun.0000/
 $ cat dobmk
 ../run_base_test_prun.0000/libquantum_base.prun 33 5
 $

   Now let's use command_add_redirect, and see how dobmk changes:

 $ diff prun1.cfg prun2.cfg
 1a2
 > command_add_redirect=1
 $
 $ runspec -c prun1.cfg
 ...
 $ cd $SPEC/benchspec/CPU2006/462.libquantum/run/run_base_test_prun.0000/
 $ cat dobmk
 ../run_base_test_prun.0000/libquantum_base.prun 33 5 > test.out 2>> test.err
 $

   Notice that with command_add_redirect=1, the substitution for $command
   includes both the name of the executable and the file assignments for
   standard in, standard out, and standard error. This is needed because
   otherwise the files would not be connected to libquantum on the remote
   node. That is, the former generates [*]:

 echo "libquantum_base.prun 33 5" > dobmk;
 prun -n 1 sh dobmk > test.out 2>> test.err

   And the latter generates [*]:

 echo "libquantum_base.prun 33 5 > test.out 2>> test.err" > dobmk;
 prun -n 1 sh dobmk

   [*] The picky reader may wish to know that the examples were editted for
   readability: a line wrap was added, and the directory string
   .../run_base_test_prun.0000/ was omitted. The advanced reader may wonder
   how the above lines were discovered: for the former, we found out what
   runspec would generate by going to the run directory and typing specinvoke
   -n, where -n means dry run; in the latter, we typed specinvoke -nr, where
   -r means that $command already has device redirection. For more
   information on specinvoke, see utility.html.

      I.D.1.e Example: bind to processors, SPEC TurboBlaster9000

   The following lines bind copies to individual processors on a SPEC
   TurboBlaster 9000 running *nix:

    bind= 0, 4, 8, 12, 16, 20
    submit= procbind -p $BIND $command

   In this example, the list of processors to bind is set using the bind
   facility, which is then used as an argument to the procbind command. With
   these settings, the first copy will be bound to processor 0, the second to
   processor 4, the third to processor 8, and so on. If more than six copies
   are run, the list is re-used starting from the beginning; that is, copy
   seven would also be bound to processor 0 and so on.

   An equivalent way to say the same as the above would be

    bind0= procbind -p 0
    bind1= procbind -p 4
    bind2= procbind -p 8
    bind3= procbind -p 12
    bind4= procbind -p 16
    bind5= procbind -p 20
    submit= $BIND $command

   The content of each of the bind settings need not be the same, or even
   similar.

   Two important notes about the above submit commands:

    1. $BIND must be spelled exactly as it is in the examples above. It is a
       limitation of the tools that saying things like ${BIND} just won't
       work.
    2. For bind settings that contain whitespace or commas, the second form
       (multiple assignments) must be used.

    I.D.2. By the shell \$VARIABLE

   Substitution by the shell - or by the windows command interpreter - uses
   backslash dollar sign. The next two sections explain why both punctuation
   marks are required, and then provide an example.

      I.D.2.a Protecting shell variables

   Because Perl variables look a lot like shell variables, you need to
   specially protect shell variables if you want to prevent Perl from trying
   to interpret them. Notice what happens with the protected and unprotected
   versions:

 $ cat tmp.cfg
 runlist              = mcf
 size                 = test
 tune                 = base,peak
 iterations           = 1

 output_format        = asc
 teeout               = 1
 expand_notes         = 1
 use_submit_for_speed = 1

 default=peak=default=default:
 submit = echo "home=$HOME; spec=$SPEC;" > /tmp/chan; $command

 default=base=default=default:
 submit = echo "home=\$HOME; spec=\$SPEC;" > /tmp/nui; $command
 $ runspec --config=tmp > /dev/null
 $ cat /tmp/chan
 home=; spec=;
 $ cat /tmp/nui
 home=/home/chris; spec=/spec/cpu2006;
 $

   In the first submit command, $HOME and $SPEC were gobbled up by runspec.
   But since those are not the names of variables that can be interpolated,
   empty strings were the result. In the second command, the backslashes
   prevented runspec from interpreting the variables, so they were seen by
   the shell instead.

   By default, submit is only applied to rate runs. In this example, we used
   it for a speed run as well, by setting

 use_submit_for_speed = 1

   in the configuration file.

      I.D.2.b Example: submitting to multiple nodes, SGI Origin 2000

   Here is a more complex example which uses substitution by both runspec and
   by the shell (line wraps added for readability):

    submit=
       let "NODE=$SPECCOPYNUM/2";
       export NODE=/hw/nodenum/\$NODE;
       let "CPU=2*(($SPECCOPYNUM+1)/2)-$SPECCOPYNUM ";
       export CPU;
       /usr/sbin/dplace -place \$SPEC/submit.pf -mustrun $command

   First, runspec substitutes the current copy number for $SPECCOPYNUM, and
   then passes the above command to the shell which does the substitutions
   for CPU and NODE. This example originated on an SGI Origin 2000 system,
   where there are two CPUs per node. Suppose that runspec is about to submit
   the copy for copy number 17. In that case:

    submit=
       let "NODE=$SPECCOPYNUM/2";             # i.e. 17, so NODE=8
       export NODE=/hw/nodenum/\$NODE;        # Now NODE=/hw/nodenum/8
       let "CPU=2*(($SPECCOPYNUM+1)/2)-$SPECCOPYNUM ";  # and CPU=1
       export CPU;
       /usr/sbin/dplace                       # So we execute dplace
         -place \$SPEC/submit.pf              # using $SPEC/submit.pf
         -mustrun $command                    # and the expected command

   The desired $command is run under the control of submit.pf, with
   $NODE=/hw/nodenum/8 and $CPU=1. Here are the contents of the placement
   file, submit.pf:

    memories 1 in topology physical near $NODE
    threads 1
    run thread 0 on memory 0 using cpu $CPU

   An important note about the above submit command:

     * $SPECCOPYNUM must be spelled exactly as it is in the examples above.
       It is a limitation of the tools that saying things like ${SPECCOPYNUM}
       just won't work.

    I.D.3. By specmake: $(VARIABLE)

   Variables with a dollar sign and parentheses, aka "round brackets", are
   substituted by specmake. For example:

     COMPILER_DIR=/usr/local/bin/
     CC=$(COMPILER_DIR)cc

   For a more extensive example of variable substitution handled by specmake,
   see the SPEC CPU2000 example at
   www.spec.org/cpu2000/docs/example-advanced.cfg. Search that file for LIBS,
   and note the long comment which provides a walk-through of a complex
   substitution handled by specmake. Note: a CPU2006 version of that example
   will be provided at a later date; but the concepts, from the CPU2000
   example, are expected to work in a similar fashion for CPU2006.

   Deprecated feature alert: Although it is also possible to pass information
   to specmake using curly brackets: ${SPECMAKE}, this is not recommended.
   Instead, you should consistently use curly brackets to address runspec and
   round brackets to address specmake. It is possible that a future version
   of runspec may insist on interpolating curly brackets itself, rather than
   allowing specmake to do so.

    I.D.4. Limitations on variable substitution

   Once runspec hands control over to specmake or to the shell, the results
   of further substitution are invisible to runspec. For this reason, you
   can't say:

   Wrong:

 MYDIR         = /usr/gretchen/compilers
 FC            = $(MYDIR)/f90
 notes_comp001 = compiler: $(FC)

   However, there are a couple of ways to get around this restriction. The
   best way for global settings is to use the preprocessor:

 %define MYDIR /usr/gretchen/compilers
 FC            = %{MYDIR}/f90
 notes_comp001 = compiler: %{MYDIR}/f90

   That leaves a little to be desired, though, doesn't it? If your Fortran
   compiler is changed to 'f2001', you still need to remember to change it in
   two places. You could of course define a whole macro for this:

 %define MYFC /usr/gretchen/compilers/f90
 FC            = %{MYFC}
 notes_comp001 = compiler: %{MYFC}

   But what if you have a config file where FC might be set in multiple
   places, and you really want to know how it was set right here? In that
   case, use a combination of the preprocessor and variable substitution:

 $ cat right_here.cfg
 %define MYDIR /usr/gretchen/compilers

 default=base:
 FC            = %{MYDIR}/f2001
 notes_comp001  = For base, we used this Fortran: $[FC]

 410.bwaves=peak:
 FC            = %{MYDIR}/f77
 notes_comp002 = For 410.bwaves peak, we used this Fortran: $[FC]

 $ runspec -c right_here.cfg --fakereportable fp | grep txt      
         format: ASCII -> /usr/gretchen/spec/result/CFP2006.179.txt
 $ tail -15 ../result/*179.txt

                           Compiler Invocation Notes
                           -------------------------
      For base, we used this Fortran: /usr/gretchen/compilers/f2001
      For 410.bwaves peak, we used this Fortran: /usr/gretchen/compilers/f77

     SPEC and SPECfp are registered trademarks of the Standard Performance
     Evaluation Corporation.  All other brand and product names appearing
     in this result are trademarks or registered trademarks of their
     respective holders.
 -----------------------------------------------------------------------------
 For questions about this result, please contact the tester.
 For other inquiries, please contact webmaster@spec.org.
 Copyright 2006 Standard Performance Evaluation Corporation
 Generated on Wed Aug  2 09:39:53 2006 by SPEC CPU2006 ASCII formatter v4626
 $

    I.D.5. Unsetting a variable with "%undef%"

   It is sometimes useful to be able to undo the setting of a variable that
   is defined in a lower-precedence section. This is easily accomplished
   using the special value '%undef%':

   $ cat gnana.cfg
    teeout = yes
    action = build
    runlist = bzip2

    default=default:
    OPTIMIZE = -O
    COPTIMIZE = -fast

    401.bzip2=peak:
    COPTIMIZE = %undef%

    $ runspec --config=gnana --tune=base | grep bzip2.c
    cc -c -o bzip2.o -DSPEC_CPU -DNDEBUG   -O -fast                bzip2.c
    $ runspec --config=gnana --tune=peak | grep bzip2.c
    cc -c -o bzip2.o -DSPEC_CPU -DNDEBUG   -O                 bzip2.c
    $ go bzip
    /spec/gnana/kit91/benchspec/CPU2006/401.bzip2
    $ cd run/build_peak_none.0000/
    $ grep OPT Make*
    Makefile.spec:COPTIMIZE        =
    Makefile.spec:OPTIMIZE         = -O


   As you can see in the peak compilation, the '-fast' flag was not present
   because the setting for COPTIMIZE had been deleted.

II. Config file options for runspec

   This section documents options that control the operation of runspec
   itself.

  II.A. Options that can also be used on the runspec command line

   The following items can be specified in a config file, and have the same
   meaning as if they are specified on the runspec command line. Please see
   runspec.html for details.

   In general, if options can be specified on both the runspec command line
   and in a config file, the command line will win vs. items specified in the
   header section, but will not win over items specified in named sections.
   Effectively, the order of precedence is:

    named sections (highest)
    command line
    header section (lowest)

   For an example of these precedence rules in action, see section VI.E. on
   --feedback

   In the table that follows, the "Use In" column indicates where the option
   can be used:

   H   use only in header section                                             
   N   use in a named section.                                                
       can be used in both the header section and in named sections. The item 
   H,N can therefore be applied on a global basis, and/or can be applied to   
       individual benchmarks.                                                 

Option                Use In Default    Meaning                                                          
action                H      validate   What to do.                                                      
                                        When set, before doing a reportable run, runspec will download a 
                                        small file (~15 bytes) from www.spec.org containing the current  
                                        version of the suite and the date it was released, and check     
                                        your copy vs. that file. In this way, you can be notified if the 
                                        version of the suite that you're using is out-of-date.           
                                                                                                         
                             0 (1 for   Setting this variable to 0 will disable this check.              
check_version         H      reportable                                                                  
                             runs)      If you'd like to check a local file instead, you can modify      
                                        version_url to point to your internal copy.                      
                                                                                                         
                                        If you would like to check your version for a NON-reportable     
                                        run, you will need to add --check_version to your command line.  
                                        Setting check_version=1 in the config file only causes the check 
                                        for reportable runs. The check_version feature is new with       
                                        CPU2006.                                                         
                                        Number of copies. For base, the number of copies must be the     
copies                H,N    1          same for all benchmarks, but for peak it is allowed to vary: for 
                                        example, you could decide to run 64 copies of all benchmarks     
                                        except 458.sjeng, which would run only 63.                       
                                        Insert a delay of the specified number of seconds before and     
                                        after benchmark execution. This delay does not contribute to the 
delay                 H,N    0          measured runtime of the benchmark. This delay is also not        
                                        available in a reportable run. (The delay feature is new with    
                                        CPU2006.)                                                        
                                        If set to 1, always delete existing benchmark working            
deletework            H,N    0          directories. An extra-careful person might want to set this to   
                                        ensure no unwanted leftovers from previous benchmark runs, but   
                                        the tools are already trying to enforce that property.           
                                        Extension for executables created. This may not be set to any    
ext                   H      none       value that contains characters other than alphanumerics,         
                                        underscores, hyphens, or periods.                                
                                        The feedback option applies an on/off switch for the use of      
                                        feedback directed optimization (FDO), without specifying how the 
                                        feedback will be done.                                           
                                                                                                         
                                          * If set to 0, then feedback will not be used, even if other   
feedback              H,N    1              options would normally cause it to occur.                    
                                          * If set to 1, then feedback is allowed to be used, provided   
                                            that additional options are also set to describe how the FDO 
                                            build should be carried out.                                 
                                                                                                         
                                        The interaction between feedback and these other options is      
                                        described in section VI, below.                                  
                                        If set, retrieve the named URL or filename and use that as the   
                                        "user" flags file. If the special value "noflags" is used,       
flagsurl              H      none       runspec will not use any file and (if formatting previously run  
                                        results) will remove any stored file. Automated prcoessing of    
                                        flags is new with CPU2006, and is explained in                   
                                        flag-description.html.                                           
                                        In some cases, such as when doing version checks and loading     
                                        flag description files, runspec will use HTTP or FTP to fetch a  
                                        file. If you need to specify the URL of a proxy server, this is  
                                        the variable to use. By default, no proxy is used. Note that     
                                        this setting will override the value of the http_proxy           
                                        environment variable. For example, one might set:                
                                                                                                         
http_proxy            H                    http_proxy     = http://webcache.tom.spokewrenchdad.com:8080  
                                                                                                         
                                        Note: if an FTP proxy is needed, it must be set in the ftp_proxy 
                                        environment variable; there is no corresponding config file      
                                        setting.                                                         
                                                                                                         
                                        Config files as posted at www.spec.org/cpu2006 will not include  
                                        whatever you put on this line. Support for http proxies is new   
                                        with CPU2006.                                                    
                                        This is the amount of time (in seconds) to wait while attempting 
http_timeout          H      30         to fetch a file via HTTP or FTP. If the connection cannot be     
                                        established in this amount of time, the attempt will be aborted. 
                                        Support for http timeout is new with CPU2006.                    
                                        Ignore certain errors which would otherwise cause the run to     
                                        stop. Very useful when debugging a new compiler and new set of   
ignore_errors         H      0          options: with this option set, you'll find out about all the     
                                        benchmarks that have problems, instead of only finding out about 
                                        the first one.                                                   
                                        When set to a value greater than 0, attempts to split non-notes  
                                        informational lines such that they are no longer than            
                                        info_wrap_columns columns wide. Lines are split on whitespace,   
info_wrap_columns     H      50         and newly created lines are guaranteed to have at least the same 
                                        indentation as the original line. If a line contains an item     
                                        that is longer than info_wrap_columns, a warning is logged and   
                                        the original line is left unchanged. Automatic line wrapping is  
                                        a new feature of CPU2006.                                        
iterations            H      3          Number of iterations to run.                                     
                                        Default machine ID. This may not be set to any value that        
mach                  H      default    contains characters other than alphanumerics, underscores,       
                                        hyphens, or periods.                                             
                                        Don't delete directories when building executables. This option  
                                        should only be used for troubleshooting a problematic compile.   
                                        The tools will not allow you to use this option when building    
                                        binaries for a reportable result. Note that you could issue      
make_no_clobber       H,N    0          multiple successive runspec commands with this option set        
                                        (either in the config file, or with the --make_no_clobber        
                                        switch), and the build directories will be preserved. But once   
                                        you remove make_no_clobber (allowing it to default back to 0),   
                                        then the tools will attempt a normal build with a fresh build    
                                        directory.                                                       
max_active_compares   H,N    # copies   Max number of parallel compares. Useful when doing large         
                                        SPECrate runs on a system with lots of CPUs.                     
                                        Do not attempt to build benchmarks. Useful to prevent attempts   
nobuild               H      0          to rebuild benchmarks that cannot be built. The --nobuild        
                                        feature is new with CPU2006.                                     
                                        When set to a value greater than 0, attempts to split notes      
                                        lines such that they are no longer than notes_wrap_columns       
                                        columns wide. Lines are split on whitespace, and newly created   
notes_wrap_columns    H      0          lines are guaranteed to have at least the same indentation as    
                                        the original line. If a line contains an item that is longer     
                                        than notes_wrap_columns, a warning is logged and the original    
                                        line is left unchanged. Automatic line wrapping is a new feature 
                                        of CPU2006.                                                      
                                        Format for reports. Valid options are listed at runspec.html     
                                        under --output_format; major options include txt (ASCII text),   
output_format         H      all        html, pdf, and ps. You might prefer to set this to txt if you're 
                                        going to be doing lots of runs, and only create the pretty       
                                        reports at the end of the series. See also the information in    
                                        runspec.html about --rawformat.                                  
                                        Strictly follow reporting rules. You must set reportable to      
reportable            H      0          generate a valid run suitable for publication and/or submission  
                                        to SPEC.                                                         
rate                  H      0          Rate vs Speed. Specify 1 for rate, 0 for speed.                  
rebuild               H      0          Rebuild binaries even if they exist.                             
runlist               H      none       What benchmarks to run. Names can be abbreviated, just as on the 
                                        command line.                                                    
                                        Set the process group. On Unix-like systems, improves the        
setprocgroup          H      1          chances that ^C gets the whole run, not just one of the          
                                        children.                                                        
                                        Size of input set. If you are in the early stages of testing a   
size                  H      ref        new compiler or new set of options, you might set this to test   
                                        or train.                                                        
table                 H      1          In ASCII reports, include information about each execution of    
                                        the benchmark.                                                   
tune                  H      base       default tuning level. In a reportable run, must be either all or 
                                        base.                                                            
                                        Verbosity level. Select level 1 through 99 to control how much   
verbose               H      5          debugging info runspec prints out. For more information, see the 
                                        section on the log file, below.                                  

  II.B. Options for runspec that can only be used in a config file

   The following options control the operation of runspec, but can not be
   specified on the command line. Instead, they must be specified in the
   config file.

   In the table that follows, the "Use In" column indicates where the option
   can be used:

   H   use only in header section                                             
   N   use in a named section.                                                
       can be used in both the header section and in named sections. The item 
   H,N can therefore be applied on a global basis, and/or can be applied to   
       individual benchmarks.                                                 

Option                   Use In Default    Meaning                                                                
                                           The runspec command can use --extension to select among different      
                                           options in a config file, as mentioned above. But what if the          
                                           extension mentioned on the runspec command does not occur in any       
                                           section marker? What should be done then?                              
                                                                                                                  
                                             * If allow_extension_override is 0 (or no or false), the tools will  
allow_extension_override H      0              print an error message and exit.                                   
                                             * If allow_extension_override is 1 (or yes or true), then the tools  
                                               will attempt to build (or run) the same binary they would have     
                                               built by default, but will name the binary with specified          
                                               extension. See the example above.                                  
                                                                                                                  
                                           The allow_extension_override feature is new with CPU2006.              
                                           When updating the MD5 hashes in the config file, make a backup copy    
backup_config            H      1          first. Highly recommended to defend against full-file-system errors,   
                                           system crashes, or other unfortunate events.                           
                                           Use base binary and/or base result for peak. If applied to the whole   
                                           suite (in the header section), then only base is run, and its results  
basepeak                 H,N    0          are reported for both the base and peak metrics. If applied to a       
                                           single benchmark, the same binary will be used for both base and peak  
                                           runs, and the median of the base run will be reported for both.        
                                           List of values with which $BIND should be replaced in a submit         
                                           command. If set, should either be set to a list of comma- or           
                                           whitespace-separated values or, if more complex settings are desired,  
                                           multiple settings can be used. For example, both                       
                                                                                                                  
                                           bind = 0, 4, 8, 16                                                     
                                                                                                                  
                                           and                                                                    
                                                                                                                  
                                           bind0 = 0                                                              
                                           bind1 = 4                                                              
                                           bind2 = 8                                                              
bind                     H      ''         bind3 = 16                                                             
                                                                                                                  
                                           are equivalent. Like notes, the indices are not important and are used 
                                           for ordering only. The latter form is required when substituting       
                                           values that must contain whitespace or commas:                         
                                                                                                                  
                                           bind0 = procbind -p 0                                                  
                                           bind1 = procbind -p 1                                                  
                                           bind2 = procbind -p 2                                                  
                                                                                                                  
                                           If there are more copies than bind values, they will be re-used in a   
                                           circular fashion. If there are more bind values specified than copies, 
                                           then only as many as needed will be used. The bind feature is new with 
                                           CPU2006.                                                               
                                           Runspec uses MD5 hashes to verify that executables match the config    
                                           file that invokes them, and if they do not, runspec forces a           
                                           recompile. You can turn that feature off by setting check_md5=0.       
                                           WARNING: If you turn this feature off, you effectively say that you    
check_md5                H      1          are willing to run a benchmark even if you don't know what you did or  
                                           how you did it -- that is, you lack information as to how it was       
                                           built! Since SPEC requires that you disclose how you built it, such a  
                                           run could not be published. Therefore, asking for a reportable run via 
                                           the command-line switch --reportable or setting reportable=1 in your   
                                           config file will cause this option to be automatically enabled.        
                                           If set, let the shell do I/O redirection. Otherwise, specinvoke will   
command_add_redirect     H      0          do it itself. This option is commonly used when using the submit       
                                           command; please see the example in section I.D.1.d.                    
difflines                H,N    10         Number of lines of differences to print when comparing results.        
                                           If this variable is set to 1, then environment settings can be changed 
                                           for benchmarks using ENV_* options in the config file. For example,    
                                           consider the following executable, which fails because the library     
                                           directory has been removed:                                            
                                                                                                                  
                                              $ ls -l bwaves_base.tmp3                                            
                                              -rwxrwxr-x   1 david ptg       304964 May 16 10:16 bwaves_base.tmp3 
                                              $ ldd bwaves_base.tmp3 | head -3                                    
                                                      libmvec.so.1 =>  /lib/libmvec.so.1                          
                                                      libfui.so.2 =>   (file not found)                           
                                                      libfai.so.3 =>   (file not found)                           
                                              $                                                                   
                                                                                                                  
                                           But if we add the following to the config file:                        
                                                                                                                  
                                              >check_md5=0                                                        
                                              >env_vars=1                                                         
                                              >410.bwaves:                                                        
                                              >ENV_LD_LIBRARY_PATH=/spec/david/lovecraft/lib                      
env_vars                 H,N    0                                                                                 
                                           then bwaves gets an LD_LIBRARY_PATH which points to the new library    
                                           directory, and the benchmark runs successfully.                        
                                                                                                                  
                                           Note that env_vars is not legal for a reportable run. The run rules    
                                           require that the environment be set prior to the start of runspec.     
                                           Nevertheless, the feature is available, since it might be useful       
                                           during debugging, or for instrumentation purposes when doing           
                                           performance analysis.                                                  
                                                                                                                  
                                           Which environment? If you are attempting to communicate settings from  
                                           your shell environment into runspec, this is not the feature that you  
                                           are looking for. Try the config file preprocessor instead. The         
                                           env_vars option and ENV* are about communication from config file to   
                                           environment of the invoked benchmark.                                  
                                                                                                                  
                                           When developing a config file that uses env_vars, you may find it      
                                           useful to set the verbosity level to 35 (or higher), which will cause  
                                           the tools to log environment settings. CPU2006 newly provides logging  
                                           of env_vars settings.                                                  
                                           If set, will expand variables in notes. This capability is limited     
expand_notes             H      0          because notes are NOT processed by specmake, so you cannot do repeated 
                                           substitutions. You'll find some suggestions above.                     
                                           If set to a non-empty value, will cause executables, run directories,  
                                           results, and log files to be put in a subdirectory (with the same name 
expid                    H                 as the value set) in their normal directories. For example, setting    
                                           expid = CDS will cause benchmark binaries to end up in exe/CDS, run    
                                           directories to end up in run/CDS, and results and logs in              
                                           $SPEC/result/CDS. The expid feature is new with CPU2006.               
fail                     H,N    0          If set, will cause a build or run to fail. The ability to force a run  
                                           to fail is new with CPU2006                                            
                                           If set, will cause a build to fail. For example, you could say         
                                           something like this:                                                   
                                                                                                                  
                                           400.perlbench=default:                                                 
                                           #> I am posting this config file for use by others in the              
                                           #> company, but am forcing it to fail here because                     
                                           #> I want to force users to review this section.                       
                                           #>                                                                     
                                           #> Once you find your way here, you should test whether                
                                           #> bug report 234567 has been fixed, by using the first                
                                           #> line below.  If it has not been fixed, then use the                 
                                           #> second.  In either case, you'll need to remove the                  
                                           #> fail_build.                                                         
fail_build               H,N    0          #>                                                                     
                                           #>   - Pney Guvaxre                                                    
                                           #>     Boomtime, the 66th day of Confusion in the YOLD 3172            
                                                                                                                  
                                           # OPTIMIZE = -Osuperduper                                              
                                           # OPTIMIZE = -Omiddling                                                
                                           fail_build = 1                                                         
                                                                                                                  
                                           In the example above, the build is forced to fail until the user       
                                           examines and modifies that section of the config file. Notice that     
                                           Pney has used protected comments to cause the comments about the       
                                           internal bug report to disappear if the config file were to be         
                                           published as part of a reportable run.                                 
                                                                                                                  
                                           The ability to force a build to fail is new with CPU2006               
fail_run                 H,N    0          If set, will cause a run to fail. The ability to force a run to fail   
                                           is new with CPU2006                                                    
                                           Ignore SIGINT. If this is set, runspec will attempt to continue        
ignore_sigint            H      0          running when you interrupt one of its child processes by pressing ^C   
                                           (assuming that you have ^C mapped in the common way). Note that this   
                                           does NOT cause runspec itself to ignore SIGINT.                        
                                           If set within a benchmark section, allows explicit inheritance of      
                                           settings from another benchmark's section. The section to be inherited 
                                           from is referenced using colons between the four section specifiers.   
                                           Other inheritance mechanisms continue to work. Effectively, the        
                                           referenced benchmark is the second highest priority -- second only to  
                                           items specifically mentioned in the referring section. An example may  
                                           help to clarify these points:                                          
                                                                                                                  
                                              $ cat -n tmp8.cfg                                                   
                                                   1  iterations = 1                                              
                                                   2  size       = test                                           
                                                   3  teeout     = yes                                            
                                                   4                                                              
                                                   5  default=default:                                            
                                                   6  OPTIMIZE = -xO1                                             
                                                   7                                                              
                                                   8  int=default:                                                
                                                   9  OPTIMIZE = -xO2                                             
                                                  10  LIBS     = -lbsdmalloc                                      
                                                  11                                                              
                                                  12  401.bzip2=default:                                          
                                                  13  OPTIMIZE = -xO3                                             
                                                  14  CC = /update1/bin/cc                                        
                                                  15                                                              
                                                  16  458.sjeng=peak:                                             
inherit_from             N      ''                17  inherit_from = 401.bzip2:default:default:default            
                                                  18  CC = /update2/bin/cc                                        
                                              $ runspec --config tmp8 --tune base sjeng | grep sjeng.o            
                                              cc -c -o sjeng.o -DSPEC_CPU -DNDEBUG   -xO2               sjeng.c   
                                              cc  -xO2           attacks.o book.o ...  -lbsdmalloc     -o sjeng   
                                              $ runspec --config tmp8 --tune peak sjeng | grep sjeng.o            
                                              /update2/bin/cc -c -o sjeng.o -DSPEC_CPU -DNDEBUG   -xO3  sjeng.c   
                                              /update2/bin/cc  -xO3  attacks.o book.o ...  -lbsdmalloc  -o sjeng  
                                                                                                                  
                                                                                                                  
                                           In the above example,                                                  
                                                                                                                  
                                             * The first runspec command uses the tuning for integer benchmarks,  
                                               from the config file lines 8-10.                                   
                                             * The second runspec command:                                        
                                                  * Still applies the integer tuning at line 10 (-lbsdmalloc).    
                                                  * Does not apply the optimization level on line 9, because it   
                                                    is overridden by other options. Line 17 says that we are to   
                                                    inherit from the bzip2 section, so the optimization level at  
                                                    line 13 (-xO3) is used instead.                               
                                                  * But the compiler path at line 14 (/update1) is not used: line 
                                                    18 (/update2) is highest priority.                            
                                                                                                                  
                                           Line 17 above could have been simplified. Just as trailing default     
                                           section specifiers can be omitted at the original definition points,   
                                           as explained above, they can also be omitted on an inherit_from        
                                           option. The inherit_from feature is new with SPEC CPU2006.             
line_width               H      0          Line wrap width for screen. If left at the default, 0, then lines will 
                                           not be wrapped and may be arbitrarily long.                            
locking                  H      1          Try to lock files.                                                     
                                           Line wrap width for logfiles. If your editor complains about lines     
log_line_width           H      0          being too long when you look at logfiles, try setting this to some     
                                           reasonable value, such as 80 or 132. If left at the default, 0, then   
                                           lines will not be wrapped and may be arbitrarily long.                 
                                           When using the 'mail' output format, turning this on will cause the    
mailcompress             H      0          various report attachments to be compressed with gzip. Report mailing  
                                           is a new feature of CPU2006.                                           
                                           When using the 'mail' output format, this specifies the method that    
                                           should be used to send the mail. On UNIX and UNIX-like systems, there  
                                           are three choices: 'smtp' (communicate directly with an SMTP server    
mailmethod               H      smtp       over the network), 'mail' (try using mail(1) if available), and        
                                           'sendmail' (try invoking sendmail directly). On Windows systems, only  
                                           'smtp' is available. SMTP is the recommended setting. Report mailing   
                                           is a new feature of CPU2006.                                           
                                           When using the 'mail' output format, and when the mailmethod is        
mailport                 H      25         'smtp', this specifies the port to use on the mail server. The default 
                                           is the standard SMTP port and should not be changed. Report mailing is 
                                           a new feature of CPU2006.                                              
                                           When using the 'mail' output format, and when the mailmethod is        
mailserver               H      127.0.0.1  'smtp', this specifies the IP address or hostname of the mailserver    
                                           through which to send the results. Report mailing is a new feature of  
                                           CPU2006.                                                               
                                           The address or addresses to which results should be sent when using    
                                           the 'mail' output format. If multiple addresses are specified, they    
                                           should be separated by commas or whitespace. Each address should       
                                           consist only of the name@domain part (i.e. no "full name" type info).  
                                           The addresses are not checked for correct formatting; if a mistake is  
                                           made, the results may be sent to an unknown location. Think:           
                                           comp.arch. OK, probably not there, but seriously be careful about      
                                           security on this one.                                                  
                                                                                                                  
                                           Config files as posted at www.spec.org/cpu2006 will not include        
mailto                   H      ''         whatever you put on this line (thus, spambots will not see the         
                                           contents of this field).                                               
                                                                                                                  
                                           Note that to get your reports mailed to you, you need to specify both  
                                           mail as an output_format and an address to which they should be        
                                           mailed. For example:                                                   
                                                                                                                  
                                              mailto=fast.guy@welovebenchmarks.org                                
                                              output_format=text,mail                                             
                                                                                                                  
                                           If no addresses are specified, no mail will be sent. Report mailing is 
                                           a new feature of CPU2006.                                              
                                           The list of report types to mail. The format and possible values are   
                                           the same as for output_format, with the addition of log, which will    
                                           cause the current log file to be sent. The default is for all files    
                                           associated with the run to be mailed (so, this will include what you   
                                           listed as your desired output_format plus log (the log file) and rsf   
                                           (the rawfile). You can cut your email down to the bare essentials with 
mail_reports             H      all        something like this:                                                   
                                                                                                                  
                                              mailto=fast.guy@welovebenchmarks.org                                
                                              output_format=text,mail                                             
                                              mail_reports=text                                                   
                                                                                                                  
                                           If none of the requested report types were generated, no mail will be  
                                           sent. Report mailing is a new feature of CPU2006.                      
make                     H,N    specmake   Name of make executable. Note that the tools will enforce use of       
                                           specmake for reportable results.                                       
                                           Extra flags for make (such as -j). Set this to -j n where n is the     
                                           number of concurrent processes to run during a build. Omitting n or    
                                           setting it to zero unlimits the number of jobs that will be run in     
makeflags                H,N    ''         parallel. (Use of -j in conjunction with ONESTEP will still result in  
                                           successful builds, but they will be necessarily serialized unless your 
                                           compiler implements the parallelism itself.) Use with care! Other      
                                           flags should be used here only if you are familiar with GNU make.      
                                           Calculate mean even if invalid. DANGER: this will write a mean to all  
mean_anyway              H      0          reports even if no valid mean can be computed (e.g. half the           
                                           benchmarks failed). A mean from an invalid run is not "reportable"     
                                           (that is, it cannot be represented in public as the SPEC metric).      
minimize_rundirs         H      0          Try to keep working disk size down. Cannot be used in a reportable     
                                           run.                                                                   
minimize_builddirs       H      0          Try to keep working disk size down during builds.                      
no_monitor               H,N    ''         Exclude the listed workloads from monitoring via the various monitor_* 
                                           hooks. The no_monitor feature is new with CPU2006.                     
                                           Method to use to simulate an empty input. Choices are:                 
                                                                                                                  
                                             * close - Just close stdin before executing the benchmark (this is   
                                               the default).                                                      
                                             * zero - Create a zero-length file and attach it to stdin.           
                                             * file - Synonym for zero.                                           
no_input_handler         H,N    close        * null - Open the null device (/dev/null or NUL:) and attach it to   
                                               stdin.                                                             
                                                                                                                  
                                           Normally, this option should be left at the default; it was actually   
                                           added to the tools for the benefit of a different SPEC suite that      
                                           needed the feature. If a reportable run for CPU2006 uses this feature, 
                                           an explanation should be provided as to why it was used. The           
                                           no_input_handler feature is new in CPU2006.                            
                                           When line wrapping is enabled (see notes_wrap_columns), this is the    
                                           string that will be prepended to newly created lines after the         
notes_wrap_indent        H      ' '        indentation from the original line is applied. The default is four     
                                           spaces, but it can be set to any arbitrary string. Automatic wrapping  
                                           is a new feature of CPU2006.                                           
                                           When set to a non-empty value, causes all files written (other than    
                                           config files) to be rooted in the directory named by the value,        
                                           instead of being rooted in $SPEC. For example, setting output_root =   
                                           /tmp/foo will cause results and logs to be deposited in                
                                           /tmp/foo/result. This also applies to benchmark binaries and run       
                                           directories.                                                           
                                                                                                                  
                                           This feature can be used to easily allow multiple people to access a   
output_root              H                 single benchmark installation to which (with one exception) they do    
                                           not need write access. The exception is $SPEC/config. Because the      
                                           setting for the location comes from the config file, the config files  
                                           still live under $SPEC. On Unix systems, you might choose to set the   
                                           permissions on the config subdirectory to 1777 (which is the same as   
                                           /tmp on many systems).                                                 
                                                                                                                  
                                           For an example of the use of output_root, see the section on it in     
                                           runspec.html. The output_root feature is new in CPU2006.               
                                           When true (set to 1, 'yes', or 'true'), does not apply any submit      
plain_train              H,N    1          commands to the feedback training run. It also causes the monitor_*    
                                           hooks to be ignored for the feedback training run. The plain_train     
                                           feature is new with CPU2006.                                           
                                           While parsing the config file, if a section specifier is found that    
                                           refers to an unknown benchmark or benchset, an error is output and the 
section_specifier_fatal  H      1          run stops. Set section_specifier_fatal=0 in the header section of your 
                                           config file to convert this error into a warning and allow the run to  
                                           continue. Prior to CPU2006, section specifier errors were always       
                                           fatal.                                                                 
                                /usr/sbin/ When using the mail output format, and when the mailmethod is          
sendmail                 H      sendmail   sendmail, this specifies the location of the sendmail binary. The      
                                           ability to mail reports is new with CPU2006.                           
                                           Name of subdirectory under <benchmark>/src/src.alt/ from which to draw 
                                           approved source code modifications. This should be set only where      
                                           required, on a per-benchmark basis. Multiple src.alts may be           
srcalt                   N      ''         specified; the names should be separated by commas. If the specified   
                                           alternate sources are not for the version of the suite in use, or if   
                                           they are corrupt, the build will fail. Any use of this feature is      
                                           automatically noted in reports. Automatic reporting of src.alts is new 
                                           with CPU2006.                                                          
                                           When set, run directory setup will verify that the file contents in    
                                           existing run directories match both the cached MD5 (from the MANIFEST  
                                           or one of the SUMS files) as well as the MD5 of the source file in the 
                                           benchmark data directory. Normally, this should always be on, and      
strict_rundir_verify     H      1          reportable runs will force it to be on. A benchmark developer could    
                                           turn it off, for example, while developing change proposals for the    
                                           benchmarks or workloads. But in that case, a different, unmodified,    
                                           copy of the installation tree should be used for any reportable runs.  
                                           CPU2000 provided fewer controls over the degree of verification.       
                                           Specifies the name of an executable program or script that delivers    
                                           system configuration information about the system under test for use   
                                           in the reports. Please see the comments in sample-sysinfo-program.pl   
sysinfo_program          H      ''         for complete details. (Note: some combinations of servers/browsers     
                                           will refuse to open files of type .pl; if the link does not work for   
                                           you, try looking on your SPEC distribution media, or you might be able 
                                           to right-click and save the copy posted at www.spec.org/cpu2006/Docs.) 
                                           The sysinfo_program feature is new with CPU2006.                       
                                           Run output through tee so you can see it on the screen. Primarily      
teeout                   H      0          affects builds, but also provides some information about progress of   
                                           runtime, by showing you the specinvoke commands.                       
use_submit_for_speed     H,N    0          If set, use submit commands for speed runs as well as rate runs.       
                                http://                                                                           
                                www.                                                                              
use_version_url          H      spec.org/  If version checking is enabled, this specifies the location from which
                                cpu2006/   the version information should be fetched.
                                current_   
                                version    

III. Config file options for specmake

   For a complete list of options that are used by specmake, please see
   makevars.html and notice which variables are documented as OK to mention
   in a config file.

   Here are the commonly used variables:

   CC             How to invoke your C compiler.                              
   CXX            How to invoke your C++ compiler.                            
                  How to invoke your Fortran compiler.                        
                  Note that for CPU2006, there are no longer separate options 
   FC             for Fortran 77. If you wish to use a Fortran 77 compiler    
                  for a benchmark in peak, set FC for that benchmark, not     
                  F77.                                                        
                                                                              
   CLD            How to invoke the linker when compiling C programs.         
   CXXLD          How to invoke the linker when compiling C++ programs.       
   FLD            How to invoke the linker when compiling Fortran programs.   
                                                                              
   ONESTEP        If set, build from sources directly to final binary. See    
                  the discussion in rule 2.2.10 of runrules.html.             
                                                                              
   OPTIMIZE       Optimization flags to be applied for all compilers.         
   COPTIMIZE      Optimization flags to be applied when using your C          
                  compiler.                                                   
   CXXOPTIMIZE    Optimization flags to be applied when using your C++        
                  compiler.                                                   
   FOPTIMIZE      Optimization flags to be applied when using your Fortran    
                  compiler.                                                   
                                                                              
   PORTABILITY    Portability flags to be applied no matter what the          
                  compiler.                                                   
   CPORTABILITY   Portability flags to be applied when using your C compiler. 
   CXXPORTABILITY Portability flags to be applied when using your C++         
                  compiler.                                                   
   FPORTABILITY   Portability flags to be applied when using your Fortran     
                  compiler.                                                   
                  Portability flags to be applied when pre-processing Fortran 
                  sources. Note that since preprocessing is not a part of     
                  standard Fortran, SPEC supplies a copy of the freely        
                  available filepp, with minor modifications, as specpp.      
   FPPPORTABILITY Using specpp ensures that the preprocessing is done         
                  consistently across platforms. If you need to define        
                  Fortran preprocessor variables, do not put them in          
                  FPORTABILITY. Instead, put them in FPPPORTABILITY or        
                  PORTABILITY.                                                
                                                                              
   RM_SOURCES     Remove a source file. Should only be used for library       
                  substitutions that comply with run rule 2.1.2.              
                                                                              
                  Flags for pass "n" C compilation when using                 
                  feedback-directed optimization (FDO). Typically n is either 
   PASSn_CFLAGS   1 or 2, for the compile done before the training run and    
                  the compile done after the training run. See the chapter on 
                  Using Feedback Directed Optimization for more information.  
   PASSn_CXXFLAGS Flags for pass "n" C++ compilation when using FDO.          
   PASSn_FFLAGS   Flags for pass "n" Fortran compilation when using FDO.      
   PASSn_LDFLAGS  Flags to use with the linker in pass "n" when using FDO.    

   Note that you can also make up your own variable names, which specmake
   will use (and perform substitution on). For an example of this feature,
   see the SPEC CPU2000 example at
   www.spec.org/cpu2000/docs/example-advanced.cfg. Search that file for LIBS,
   and note the long comment which provides a walk-through of a complex
   substitution handled by specmake. Note: a CPU2006 version of that example
   will be provided at a later date; but the concepts, from the CPU2000
   example, are expected to work in a similar fashion for CPU2006.

IV. Config file options for the shell

   Some options in your config file cause commands to be executed by your
   shell (/bin/sh) or by the Windows command interpreter (cmd.exe).

   Because runspec can cause arbitrary commands to be executed, it is
   therefore important to read a config file you are given before using it.

   These are the options that cause commands to be executed:

   fdo_pre0        Commands to be executed before starting a feedback         
                   directed compilation series.                               
   fdo_preN        Commands to be executed before pass N.                     
   fdo_make_cleanN Commands to be executed for cleanup at pass N.             
   fdo_pre_makeN   Commands to be done prior to Nth compile.                  
   fdo_make_passN  Commands to actually do the Nth compile.                   
   fdo_post_makeN  Commands to be done after the Nth compile.                 
   fdo_runN        Commands to be used for Nth training run.                  
   fdo_postN       Commands to be done at the end of pass N.                  
                   Commands to be used for distributing jobs across a         
   submit          multiprocessor system. See the several   detailed          
                   examples in the section on Variable Substitution, above.   

   For examples of the fdo_ options, see the chapter on Using Feedback
   Directed Optimization.

V. Config file options for readers

   Whether or not you submit your result to SPEC, you should fully disclose
   how you achieved the result. If it requires the installation of the
   GoFastLinker, you should say so. By setting the appropriate fields in the
   config file, you can cause information about the GoFastLinker to appear in
   the reports that are intended for humans.

  V.A. Descriptive fields

   Here are the fields that you can set to describe your testbed to readers:

                      Do not use. This field is obsolete. You are probably    
                      looking for hw_vendor, tester, or test_sponsor. See the 
      company_name    example under test_sponsor. If you do use company_name, 
                      the effect will be mostly harmless, except when it      
                      surprises you or your users by causing unexpected       
                      rebuilds.                                               
   hw_avail           Date hardware first shipped. If more than one date      
                      applies, use the LATEST one.                            
   hw_cpu_name        Manufacturer-determined formal processor name.          
                      Technical characteristics to help identify the          
   hw_cpu_char        processor. (You'll find more information about the      
                      intended use of hw_cpu_name vs. hw_cpu_char in the run  
                      rules.)                                                 
   hw_cpu_mhz         Speed of the CPUs, in MHz.                              
                      Disk subsystem for the SPEC run directories. Three      
                      important Notes:                                        
                                                                              
                       1. Only a single file system may be used for the run   
                          directories, as described in the run rules at Rule  
                          3.1.1.                                              
   hw_disk             2. If the output_root feature is used, its disk        
                          subsystem should be the one described here.         
                       3. Disks used for other purposes - such as the system  
                          disk - are usually not a performance-relevant       
                          variable, so need not be described. But if you wish 
                          to do so, you can extend this field using the same  
                          continuation rules as other fields (so, you could   
                          use hw_disk01, hw_disk02, etc).                     
   hw_fpu             Floating point unit.                                    
                      Size of main memory (and other performance-relevant     
   hw_memory          information about memory, as discussed in the run       
                      rules.)                                                 
   hw_model           Model name.                                             
   hw_nchips          Number of CPU chips configured. See the discussion of   
                      CPU counting in the run rules.                          
   hw_ncores          Number of CPU cores configured. See the discussion of   
                      CPU counting in the run rules.                          
   hw_ncoresperchip   Number of CPU cores per chip. See the discussion of CPU 
                      counting in the run rules.                              
   hw_ncpuorder       Valid number of processors orderable for this model,    
                      including a unit. For example, "2, 4, 6, or 8 chips".   
   hw_nthreadspercore Number of hardware threads per core. See the discussion 
                      of CPU counting in the run rules.                       
   hw_other           Any other performance-relevant hardware.                
   hw_pcache          1st level (primary) cache.                              
   hw_scache          2nd level cache.                                        
   hw_tcache          3rd level cache.                                        
   hw_ocache          4th level or other form of cache.                       
   hw_vendor          The hardware vendor. An example of usage of this and    
                      related fields is given in the test_sponsor section.    
   license_num        The SPEC license number for either the tester or the    
                      test_sponsor.                                           
                      Do not use. This field is obsolete (and has been since  
      machine_name    SPEC CPU95 was retired). If you do use it, the effect   
                      will be mostly harmless, except when it surprises you   
                      or your users by causing unexpected rebuilds.           
                      Is never output. If you wish, you could set this to     
   prepared_by        your own name, so that the rawfile will be tagged with  
                      your name but not the formal reports.                   
                      Were multiple cores employed by a parallelizing         
                      compiler? Note that a speed run that uses a             
   sw_auto_parallel   parallelizing compiler causes a single instance of a    
                      benchmark to run using multiple CPUs; this is different 
                      from a rate run, which typically distributes N          
                      instances over N CPUs.                                  
   sw_avail           Availability date for the software used. If more than   
                      one date, use the LATEST one.                           
                      Size of pointers in base. Report:                       
                        * "32-bit" if all benchmarks in base are compiled     
                          with switches that request only 32-bit pointers.    
                        * "64-bit" if all benchmarks in base are compiled     
   sw_base_ptrsize        with switches that request only 64-bit pointers.    
                        * "32/64-bit" if there is a mix of 32-bit and 64-bit. 
                          For example, if the C++ benchmarks use 32-bit       
                          pointers, while the Fortran and C benchmarks use    
                          64-bit, then you would report "32/64-bit" here.     
                      Name and version of compiler. Note that if more than    
                      one compiler is used, you can employ continuation       
                      lines. (This applies to most of the fields discussed    
   sw_compiler        here, but is emphasized for sw_compiler because it is   
                      common that testers first find themselves wanting to    
                      use continuation lines when documenting their compiler  
                      set.)                                                   
                      File system (ntfs, ufs, nfs, etc) for the SPEC run      
                      directories. Three important Notes:                     
                                                                              
                       1. Only a single file system may be used for the run   
                          directories, as described in the run rules at Rule  
                          3.1.1.                                              
                       2. If the output_root feature is used, its file system 
   sw_file                should be the one described here.                   
                       3. File systems used for other purposes - such as for  
                          the operating system - are usually not a            
                          performance-relevant variable, so need not be       
                          described. But if you wish to do so, you can extend 
                          this field using the same continuation rules as     
                          other fields (so, you could use sw_file01,          
                          sw_file02, etc).                                    
   sw_os              Operating system name and version.                      
   sw_state           Multi-user, single-user, default, etc.                  
                      Any other performance-relevant non-compiler software    
   sw_other           used, including third-party libraries, accelerators,    
                      etc.                                                    
                      Size of pointers in peak. Report:                       
                        * "32-bit" if all benchmarks in peak are compiled     
   sw_peak_ptrsize        with switches that request only 32-bit pointers.    
                        * "64-bit" if all benchmarks in peak are compiled     
                          with switches that request only 64-bit pointers.    
                        * "32/64-bit" if there is a mix of 32-bit and 64-bit. 
                      The entity actually carrying out the tests. An optional 
   tester             field; if not specified, defaults to test_sponsor. An   
                      example is given in the test_sponsor section.           
                      Do not use. This field is obsolete. You are probably    
                      looking for hw_vendor, tester, or test_sponsor. See the 
      tester_name     example under test_sponsor. If you do use tester_name,  
                      the effect will be mostly harmless, except when it      
                      surprises you or your users by causing unexpected       
                      rebuilds.                                               
   test_date          When the tests were run.                                
                      The entity sponsoring this test. An optional field; if  
                      not specified, defaults to hw_vendor.                   
                                                                              
                      For example, suppose that the Genius Compiler Company   
                      wants to show off their new compiler on the             
                      TurboBlaster 9000 computer, but does not happen to own  
                      a maxed-out system with eight thousand processors.      
   test_sponsor       Meanwhile, the Pawtuckaway State College Engineering    
                      department has just taken delivery of such a system. In 
                      this case, the compiler company could contract with the 
                      college to test their compiler on the big machine. The  
                      fields could be set as:                                 
                                                                              
                            test_sponsor = Genius Compilers                   
                            tester       = Pawtuckaway State College          
                            hw_vendor    = TurboBlaster                       
                      Do not use. This field is obsolete, and has been since  
                      SPEC CPU92 was retired. It is ancient, useless,         
                      vestigial, degenerate, deprecated, and leftover.        
         VENDOR       Repetition is a form of emphasis. If you do use it, the 
                      effect will be mostly harmless, except when it          
                      surprises you or your users by causing unexpected       
                      rebuilds.                                               

  V.B. Field scoping and continuation

   Note that these fields are scoped by section markers - that is, you can
   vary them according to the type of run that you are doing. You can also
   continue most (*) of the above fields to another line by appending a
   numeral to it. Here is an example of both these features:

    default=default=default=default:
    sw_compiler  = Compaq C X6.2-259-449AT
    CC           = cc -v     

    int=default=default=default: 
    sw_compiler2 = DIGITAL C++ V6.1-029-408B6
    CXX          = cxx -v

    fp=default=default=default:
    sw_compiler2 = Compaq Fortran V5.3
    sw_compiler3 = KAP Fortran V4.2
    FC           = kf90 -v

   In the above example, the information about the C compiler will be printed
   for both integer and floating point runs. The information about the C++
   compiler will be printed only for integer runs; the information about
   Fortran compilers will be printed only for floating point runs.

   Note that the numerals above will be converted to a more formal style of
   three-digit numbers with leading zeros in the raw file; as discussed in
   utility.html, if you edit a rawfile you must use the more formal style of
   000, 001, etc.

   (*) The fields which cannot be continued are the ones that are expecting a
   simple integer: hw_nchip, hw_ncores, hw_ncoresperchip, hw_nthreadspercore,
   license_num; and the ones that are expecting a date: hw_avail, sw_avail,
   and test_date.

  V.C. Additional notes for the reader

   In addition to the pre-defined fields, you can write as many notes as you
   wish. These notes are printed in the report, using a fixed-width font.

   New with CPU2006, there are 8 different notes sections. If there are no
   notes in a particular section, it is not output, so you don't need to
   worry about making sure you have something in each section.

   The sections, in order of appearance, are as follows:

    1. notes_comp_NNN -- Notes about compiler invocation.
    2. notes_port_NNN -- Notes about portability options.
    3. notes_base_NNN -- Notes about base optimization options.
    4. notes_peak_NNN -- Notes about peak optimziation options.
    5. notes_os_NNN -- Notes about operating system tuning and changes.
    6. notes_plat_NNN -- Notes about platform tuning and changes.
    7. notes_part_NNN -- Notes about component parts (for kit-built systems).
    8. notes_NNN -- General notes.

   Start your notes with the name of the notes section where you want the
   note to appear, and then add numbers to define the order of the lines.
   Within a section, notes are sorted by line number. The NNN above is not
   intended to indicate that you are restricted to 3 digits; you can use a
   smaller or larger number of digits as you wish, and you can skip around as
   you like: for example, ex-BASIC programmers might naturally use line
   numbers 100, 110, 120... But note that if you say
   notes_plat782348320742972403 you just might encounter the dreaded (and
   highly unusual) "out of memory" error, so don't do that.

   You can optionally include an underscore just before the number, but
   beware: if you say both notes_plat_105 and notes_plat105, both are
   considered to be the same line. The last one mentioned will replace the
   first, and it will be the only one output.

   For all sections EXCEPT the general notes, you can add an optional
   additional tag of your choosing before the numbers. For example:

    $ cat tmp.cfg
    size                 = test
    iterations           = 1
    output_format        = text
    teeout               = 1
    runlist              = sjeng
    tune                 = base

    notes_part_greeting_011  = ++ how
    notes_part_greeting_20   = ++ you?
    notes_part_greeting_012  = ++ are
    notes_part_aname_1       = ++ Alex,
    notes_part080            = ++ hi

    $ runspec --config tmp > /nev/dull
    $ cd ../result
    $ ls -t *test.txt | head -1
    CINT2006.101.test.txt
    $ grep ++ *101*txt
         ++ hi
         ++ Alex,
         ++ how
         ++ are
         ++ you?
    $

   You can also use notes to describe software or hardware information with
   more detail beyond the predefined fields. For an example of where this
   might be useful, see example-medium.cfg and search for "patch". Note: some
   combinations of servers/browsers will refuse to open files of type .cfg;
   if the link does not work for you, you might be able to right-click and
   save the file. If the file is not found, you might try using a terminal
   window (aka command window, terminal emulator) to look in your installed
   SPEC tree, or on your SPEC distribution media in the config directory.

VI. Using Feedback Directed Optimization (FDO)

   Feedback Directed Optimization (FDO) is an application build method that
   involves:

     * Building the program,
     * Running a sample "training" workload,
     * Collecting a profile during the training run, and
     * Applying the profile to produce a modified program.

   The modified program is expected to run faster than if FDO had not been
   used. FDO is also sometimes known as PBO, for Profile-Based Optimization.

   This section explains how various controls interact when using feedback.
   Those controls are:

    1. The specmake options PASS*n.
    2. The shell options fdo*n.
    3. The config file feedback option.
    4. The runspec switch --feedback.

  VI.A. The minimum requirement: PASSn* or fdo*n

   The default is to build without feedback. To use FDO, you must add either
   the PASSn* or fdo*n options. The PASSn options let you specify additional
   flags for the pre-defined sequence of steps within each build pass, where
   "n" indicates the build pass number. The fdo*n options let you add entire
   commands to build passes, including setup and cleanup commands.

     * PASSn*: The most common way of using FDO is to add
       PASS1_<language>FLAGS and PASS2_<language>FLAGS options, which specify
       flags to be added to each of multiple compiler and/or link steps.
       These options, which are summarized in the section on specmake, cause
       multiple compiles. The first compile creates an executable image with
       instrumentation. That image is run with the SPEC-provided training
       workload, and the instrumentation collects data about the run (a
       profile). Finally, the program is recompiled, and the compiler uses
       the profile to improve its optimizations.

       Use this method if your desired build sequence is compile - train -
       recompile.

       For example, if you set

     FC           = tbf90
     OPTIMIZE     = --fast
     PASS1_FFLAGS = --CollectFeedback
     PASS2_FFLAGS = --ApplyFeedback

       then the tools will use tb90 --fast --CollectFeedback to create an
       instrumented binary; will run it with the SPEC-provided training
       workload; and then will recompile with tbf90 --fast --ApplyFeedback to
       create a new binary.

     * fdo*n: Although the compile - train - recompile method is common, many
       other FDO models are also possible, such as compile - train -
       othertool, where othertool uses the profile to improve the executable
       image without requiring a recompile. The shell options fdo*n can be
       used to construct more flexible FDO methods. Unlike PASSn*, which is
       limited to just adding flags to the commands issued by specmake, the
       fdo*n options let you add entirely different commands.

       For example, if you set

     FC        = tbf90
     OPTIMIZE  = -fast -profile:fbdir
     fdo_post1 = /usr/bin/postoptimizer --profile:fbdir

       then the SPEC tools will use tbf90 -fast -profile:fbdir to create a
       binary; will run the binary with the SPEC-provided training workload;
       and then will run the postoptimizer. The compiler is not re-run after
       the training run. Instead, the postoptimizer consumes a profile from
       the feedback directory fbdir, and uses this profile to modify the
       binary.

  VI.B. Combining PASS*n and fdo*n; fake is your friend

   The PASSn* and fdo*n options can be freely used together. For example,
   here's a config file that builds 459.GemsFDTD peak (as specified on the
   first three lines), with both PASSn and fdo options:

 $ cat tmp.cfg
 action       = build
 runlist      = GemsFDTD
 tune         = peak

 PASS1_FFLAGS = --CollectFeedback
 PASS2_FFLAGS = --ApplyFeedback
 fdo_run2     = $command
 fdo_post2    = /usr/bin/postoptimizer

 $ runspec --config tmp --fake | \
    grep -e excite.f90 -e train.err -e postopt | grep -v %%
 f90 -c -o excite.o    --CollectFeedback                     excite.f90
 ../build_peak_none.0000/GemsFDTD > train.log 2>> train.err
 f90 -c -o excite.o    --ApplyFeedback                     excite.f90
 ../build_peak_none.0000/GemsFDTD > train.log 2>> train.err
 /usr/bin/postoptimizer
 $

   In the runspec command, we use the --fake option to quickly examine how
   the build will work. Using --fake is highly recommended when you are
   trying to debug your feedback commands, because it is much quicker than
   actually doing the builds. The fake output is searched with the Unix grep
   command; on Windows you would construct a findstr command. The example
   picks out lines of interest:

     * "-e excite.f90" matches a sample line from the compile commands,
     * "-e train.err" matches the line that runs the benchmark with the
       training workload,
     * "-e postopt" matches the postoptimizer line, and
     * "-v %%" excludes some commentary lines that aren't needed for this
       example.

   Having done all this, we can confirm that the above config file causes the
   build sequence to be compile - train - compile - train - othertool.

   The sharp-eyed reader may wonder "What is this 'fdo_run2 = $command' line
   in the config file?" In the second pass, actually running the benchmark is
   optional, because it is possible that your pass 2 tools might not need
   another run of the benchmark. One could imagine a build system that
   notices everything interesting during the pass 1 run, and which causes
   that interesting information to be carried around by the binary itself, so
   that it never needs to be regenerated. To say "Yes, please do run it
   again", you add the above fdo_run2 line.

   More complex examples can be constructed. If you mention PASS1, fdo_pre2,
   fdo_post2, PASS3, and fdo_post4, then you will end up with four passes.
   The numbers serve to order the passes, but if you skip numbers then the
   tools will not attempt to invent things to do in the "missing" passes.

  VI.C. Interaction with the config file feedback option

   If you use either PASSn* or fdo*n (or both), then, by default, feedback
   will happen. The config file option feedback provides an additional
   control, an "on/off" switch which allows, or disallows, the options
   selected with PASSn* and fdo*n.

   A common usage model is to use PASSn* or fdo*n to turn on feedback for a
   whole set of benchmarks, and then use the option feedback=0 to turn it off
   for individual benchmarks. For example:

 $ cat miriam1.cfg
 action    = build
 tune      = peak
 runlist   = bzip2,mcf,libquantum

 fdo_post1 = /usr/bin/merge_feedback fbdir

 401.bzip2:
 feedback=0

 462.libquantum:
 feedback=1

 $ runspec --fake --config miriam1 | grep -e Building -e merge_feedback \
   | grep -v %%
   Building 401.bzip2 ref peak none default: (build_peak_none.0003)
   Building 429.mcf ref peak none default: (build_peak_none.0001)
 /usr/bin/merge_feedback fbdir
   Building 462.libquantum ref peak none default: (build_peak_none.0000)
 /usr/bin/merge_feedback fbdir
 $

   In this example, we build peak bzip2, mcf, and libquantum (notice the
   first three lines of the config file) and once again use --fake and grep
   in a fashion similar to the previous example. In this case, we can see
   that the fdo_post1 command was used for two of the three benchmarks from
   the runlist, since by default feedback=1.

  VI.D. If the config file feedback option is used at multiple levels

   If the feedback option is used at more than one level within a config
   file, the usual precedence rules apply. For example, the next config file
   specifies the feedback option both for a set of benchmarks and for some
   individual benchmarks:

 $ cat miriam2.cfg
 action    = build
 tune      = peak
 runlist   = bzip2,mcf,libquantum

 fdo_post1 = /usr/bin/merge_feedback fbdir

 default=peak:
 feedback=0

 401.bzip2:
 feedback=0

 462.libquantum:
 feedback=1

 $ runspec --fake --config miriam2 | grep -e Building -e merge_feedback \
    | grep -v %%
   Building 401.bzip2 ref peak none default: (build_peak_none.0003)
   Building 429.mcf ref peak none default: (build_peak_none.0001)
   Building 462.libquantum ref peak none default: (build_peak_none.0000)
 /usr/bin/merge_feedback fbdir
 $

   In the above example, 429.mcf was built without feedback because of the
   feedback=0 line in the section named "default=peak:". But 462.libquantum
   was built with feedback (from fdo_post1) because it had a higher priority
   setting of feedback=1 in the section named "462.libquantum:".

  VI.E. Interaction with runspec --feedback

   As explained in section II.A, if an option is mentioned on both the
   command line and in a config file, the command line does not win over
   named sections, but it does win over the header section. Examples of both
   follow.

     * Here, the config file feedback option is used in a named section, and
       the runspec option --feedback is also used. This is the same config
       file as in the previous example, with the added switch on runspec.

 $ cat miriam2.cfg
 action    = build
 tune      = peak
 runlist   = bzip2,mcf,libquantum

 fdo_post1 = /usr/bin/merge_feedback fbdir

 default=peak:
 feedback=0

 401.bzip2:
 feedback=0

 462.libquantum:
 feedback=1

 $ runspec --fake --config miriam2 --feedback | \
   grep -e Building -e merge_feedback | grep -v %%
   Building 401.bzip2 ref peak none default: (build_peak_none.0003)
   Building 429.mcf ref peak none default: (build_peak_none.0001)
   Building 462.libquantum ref peak none default: (build_peak_none.0000)
 /usr/bin/merge_feedback fbdir

       You can see above that the command line option had no effect: it
       cannot win over an option set in a named section (default=peak:).

     * But if the runspec option is used with a config file that adjusts
       feedback in the header section, then the --feedback switch does have
       an effect:

 $ cat miriam3.cfg
 action    = build
 tune      = peak
 runlist   = bzip2,mcf,libquantum

 fdo_post1 = /usr/bin/merge_feedback fbdir

 feedback=0

 401.bzip2:
 feedback=0

 462.libquantum:
 feedback=1

 $ runspec --fake --config miriam3 --feedback | \
   grep -e Building -e merge_feedback | grep -v %%
   Building 401.bzip2 ref peak none default: (build_peak_none.0003)
   Building 429.mcf ref peak none default: (build_peak_none.0001)
 /usr/bin/merge_feedback fbdir
   Building 462.libquantum ref peak none default: (build_peak_none.0000)
 /usr/bin/merge_feedback fbdir
 $

       In the above example, 429.mcf does get the fdo_post1 command.

  VI.F. More examples

   For more examples of feedback, see the annotated example of a log file
   that uses FDO in section VIII.C. and the example-medium.cfg config file in
   your config directory.

VII. The config file preprocessor

   New with CPU2006, the tools implement a configuration file macro
   preprocessor. The preprocessor can be used in a variety of ways; for
   example to communicate settings from your shell environment into runspec:

 $ cat > jan.cfg
 notes01 = Today, I am happily running in directory %{MYDIR} on system %{HOST}
 $ runspec --config jan --define MYDIR=$PWD --define HOST=`hostname` \
   --fakereportable fp --output_format text | grep txt
         format: ASCII -> /jan/cpu2006/result/CFP2006.090.txt
 $ grep Today /jan/cpu2006/result/CFP2006.090.txt
      Today, I am happily running in directory /jan/cpu2006/config on system civilized-03
 $

   The config file preprocessor is called a macro processor because it allows
   you to define macros, which are brief abbreviations for longer constructs.
   If you've ever used the C preprocessor, the concepts will be familiar,
   though the syntax is slightly different.

   The preprocessor is automatically run whenever you use runspec. Or, you
   can run it separately, as configpp, which is documented in utility.html.

   Preprocessor directives begin with the percent (%) character. This
   character must be the first character on the line. Any amount of spaces or
   tabs may separate the percent from the directive.

   The following are okay:

 %define foo
 %    define bar
 %               undef hello!

   The following are not okay:

 # Space in the first column
  %define foo

 # Tab in the first column
         %define foo

 # This isn't CPP!
 #define foo

  VII.A Defining macros

   The preprocessor is all about macros. There are no macros defined by
   default, so unless you define some macros, the preprocessor can't do much
   for you.

   Macros can be defined in two ways:

    1. On the command line, using the --define switch, or
    2. In the configuration file, using the '%define' preprocessor directive:

 # Define a simple macro
 %define foo bar
 # Now the macro called 'foo' has the value 'bar'

 # It's not necessary for a macro to have a value to be useful
 %define baz
 # Now the macro called 'baz' is defined, but it has no value.

       Note that no quoting is necessary when specifying the names of macros
       or their values.

   Macros defined in both ways are entirely equivalent. Because ones set on
   the command-line are defined first, it's not possible to use the command
   line to override a macro definition that occurs in the config file itself.
   It may help to think of a series of '%define' directives, one per
   --define, as being prepended to the config file.

   The values assigned to macros do NOT follow the same quoting rules as
   variables in the config file. In particular, you may NOT use line
   continuation, line appending, or block quotes. You may have a value of
   arbitrary length, but in the interests of config file readability and
   maintainability, please keep them relatively short.

   You will receive a warning if a previously defined macro is re-defined.

   Macro names ARE case-sensitive.

  VII.B Un-doing macro definition

   Sometimes you want to make the preprocessor forget about a macro that you
   taught it. This is easily accomplished.

   Macros can be undefined in two ways:

    1. On the command line, using the --undef switch, or
    2. In the configuration file, using the '%undef' preprocessor directive.

 %define foo bar
 # Now the macro called 'foo' has the value 'bar'

 %undef foo
 # Now it doesn't

       Note that no quoting is necessary when specifying the names of macros.

   Like macro definition, the undefinition requests can't affect macros set
   in the config file because those definitions effectively happen after the
   un-definition. For this reason, command-line undefinition is basically
   useless; it can only undo macros also set on the command line.
   So why was such a useless ability added to the tools? The writer likes
   orthogonality.

  VII.C Using macros

   By now you're probably over that initial euphoric rush that comes from
   wantonly defining and undefining macros, and you're looking for something
   more. This is it!

   When you want to use the value of a macro, you refer to it by name.
   Unfortunately, the syntax for this is not as simple as you might hope.
   It's not too complicated, though; to have the preprocessor expand the
   macro 'foo', just write

   %{foo}

   in the place where you'd like it to appear. Given the following config
   file snippet:

 %define foo Hello!
 %define bar baz
 %define foobar Huh?
 %define foobaz What?
 %define Hello!baz Please don't do this

   Here's a handy table to see the various ways you can reference these
   values:

   Macro reference        Value         
   %{foo}          Hello!               
   %{bar}          baz                  
   %{foobar}       Huh?                 
   %{foobaz}       What?                
   %{Hello!baz}    Please don't do this 

   Easy, right? The following is also possible:

   %{foo%{bar}}    What?                
   %{%{foo}%{bar}} Please don't do this 

   Because macro values can only be one line long, it's not possible to use
   the preprocessor to macro-ize large chunks of your config file at once, as
   may be common practice for advanced users of CPP.

  VII.D Conditionals

   Defining, undefining, and expanding macros is quite an enjoyable activity
   in and of itself, and can even be useful on occasion. However,
   conditionals add an entirely new dimension to config file processing: the
   ability to include and exclude entire sections of text based on macros and
   their values.

    VII.D.1. %ifdef .. %endif

   The %ifdef conditional provides a way to determine whether or not a
   particular macro has been defined. If the named macro has been defined,
   the conditional is true, and the text to the matching %endif is included
   in the text of the config file as evaluated by runspec. Note that the
   matching %endif may not necessarily be the next %endif; conditionals may
   be nested.

   For example, given the following section of a config file:

 %define foo
 %ifdef %{foo}
 This text will be included
 %endif

 %ifdef %{bar}
 This text will not be included
 %endif

   The preprocessor would produce the following output:

 This text will be included

   Note especially the quoting used for the macro names in the conditional;
   the only time macro name quoting may be omitted is when defining or
   undefining it.

    VII.D.2. %ifndef .. %endif

   The %ifndef conditional is the converse of %ifdef; If the named macro has
   not been defined, the conditional is true, and the text to the matching
   %endif is included in the text of the config file as evaluated by runspec.
   Note that the matching %endif may not necessarily be the next %endif;
   conditionals may be nested.

   Given a slightly modified version of the example from earlier:

 %define foo
 %ifndef %{foo}
 Now THIS text will not be included
 %endif

 %ifndef %{bar}
 This text WILL be included
 %endif

   The preprocessor would produce the following output:

 This text WILL be included

    VII.D.3. %if .. %endif

   Checking whether or not a macro is defined is quite useful, but it's just
   a subset of the more general conditional facility available. This general
   form is

 %if expression
 ...
 %endif

   The expression is evaluated using a subset of the Perl interpreter, so the
   possibilities for testing values are fairly broad. For example,

 %ifdef %{foo}
 ...
 %endif

   is exactly equivalent to

 %if defined(%{foo})
 ...
 %endif

   Likewise,

 %ifndef %{foo}
 ...
 %endif

   is exactly equivalent to

 %if !defined(%{foo})
 ...
 %endif

   Using the general form, it's possible to string conditionals together:

 %if defined(%{foo}) && !defined(%{bar}) || %{baz} == 0
 ...
 %endif

   If a macro contains a string value, you must supply quotes:

 %if '%{foo}' eq 'Hello, Dave.'
 ...
 %endif

   You may also perform basic math on macro values:

 %if %{foo} * 2004 > 3737
 ...
 %endif

   More precisely, the Perl operations allowed are the :base_core and
   :base_math bundles, with the ability to dereference and modify variables
   disallowed. For more details, see the source code for config.pl (the
   eval_pp_conditional subroutine) and Perl's own Opcode documentation.

    VII.D.4. %else

   It's possible to get by without the "else" part of the classic "if .. then
   .. else" trio, but it's not any fun. It works as you'd expect:

 %define foo
 %ifndef %{foo}
 This text will not be included
 %else
 This text WILL be included (from the else clause)
 %endif

   The preprocessor would produce the following output:

 This text WILL be included (from the else clause)

   Only one %else per conditional is allowed.

    VII.D.5. %elif

   %elif is another convenience that's been added. For those not familiar
   with CPP, it's an "else if" construct. You may have as many of these as
   you'd like. Given:

 %define foo Hello!

 %if !defined(%{foo})
 This text will not be included
 %elif defined(%{bar})
 This text won't be included either
 %elif '%{foo}' eq 'Hello!'
 This text WILL be included (from the second elif clause)
 %else
 Alas, the else here is left out as well.
 %endif

   The preprocessor would produce the following output:

 This text WILL be included (from the second elif clause)

  VII.E Informational Directives

   It's often helpful to be able to warn or abort on certain conditions.
   Perhaps there's a macro that must be set to a particular value, or maybe
   it's just very highly recommended.

    VII.E.1. %warning

   %warning does just what you'd expect; when the preprocessor encounters
   this directive, it prints the text following to stderr, along with its
   location within the file being read, and continues on.

   Consider:

 %if !defined(%{somewhat_important_macro})
 % warning
 % warning You have not defined somewhat_important_macro!
 % warning
 %endif

   When run through the preprocessor, this yields the following output:

   $ configpp -c warning.cfg
   runspec v2.20 - Copyright 1999-2003 Standard Performance Evaluation Corporation
   Loading standard modules.................
   Loading runspec modules..............
   Locating benchmarks...found 32 benchmarks in 1 benchset.
   Locating output formats: asc...config...html...mail...pdf...ps...raw...screen...
   WARNING:
   WARNING: You have not defined somewhat_important_macro!
   WARNING:
   Pre-processed configuration file dump follows:
   --------------------------------------------------------------------
   # Invocation command line:
   # /Users/cloyce/SPEC/cpu2006/bin/configpp --configpp -c warning.cfg
   ############################################################################

   --------------------------------------------------------------------

   The log for this run is in result/CPU2006.013.log

   runspec finished at Tue Apr  1 08:55:36 2003; 5 total seconds elapsed

   The blank warning lines were added to make the warning stand out a little;
   as you can see, it's easy for it to be lost in the rest of the output.

    VII.E.2. %error

   Like %warning, %error logs an error to stderr and the log file. Unlike
   %warning, though, it then aborts the run.

   Consider a slightly modified version of the previous example:

 %if !defined(%{REALLY_important_macro})
 % error You have not defined REALLY_important_macro!
 %endif

   When run through the preprocessor, this yields the following output:

   $ configpp -c error.cfg
   runspec v2.20 - Copyright 1999-2003 Standard Performance Evaluation Corporation
   Loading standard modules.................
   Loading runspec modules..............
   Locating benchmarks...found 32 benchmarks in 1 benchset.
   Locating output formats: asc...config...html...mail...pdf...ps...raw...screen...
   ERROR: You have not defined somewhat_important_macro!

   The log for this run is in result/CPU2006.014.log

   runspec finished at Tue Apr  1 09:00:06 2003; 4 total seconds elapsed

   $ echo $?
   1

   The ERROR line also tends to get a little lost in the visual clutter, but
   unlike a warning, it will be close to the last thing output. As you can
   see from the output of 'echo $?', runspec has exited with an error code 1.

VIII. Output files - and how they relate to your config file

   This section describes how the location and contents of several kinds of
   output files are influenced by your config file.

  VIII.A. Automatic backup of config files

   It was mentioned above that the MD5 section of the config file is written
   automatically by the tools. Each time your config file is updated, a
   backup copy is made. Thus your config directory may soon come to look like
   this:

    $ cd $SPEC/config
    $ ls tmp.cfg*
    tmp.cfg                   tmp.cfg.2006-05-11_0842   tmp.cfg.2006-05-11_1631
    tmp.cfg.2006-05-10_2007   tmp.cfg.2006-05-11_0847   tmp.cfg.2006-05-11_1632
    tmp.cfg.2006-05-10_2010   tmp.cfg.2006-05-11_0853   tmp.cfg.2006-05-11_1731
    tmp.cfg.2006-05-10_2048   tmp.cfg.2006-05-11_0854   tmp.cfg.2006-05-11_1731a
    tmp.cfg.2006-05-10_2051   tmp.cfg.2006-05-11_0855   tmp.cfg.2006-05-12_0921
    tmp.cfg.2006-05-10_2054   tmp.cfg.2006-05-11_0856   tmp.cfg.2006-05-13_0846
    tmp.cfg.2006-05-10_2058   tmp.cfg.2006-05-11_0857   tmp.cfg.2006-05-13_0846a
    tmp.cfg.2006-05-10_2105   tmp.cfg.2006-05-11_0858   tmp.cfg.2006-05-13_0849
    tmp.cfg.2006-05-10_2105a  tmp.cfg.2006-05-11_0903   tmp.cfg.2006-05-13_0850
    tmp.cfg.2006-05-10_2106   tmp.cfg.2006-05-11_0904   tmp.cfg.2006-05-16_0957
    tmp.cfg.2006-05-10_2125   tmp.cfg.2006-05-11_0905   tmp.cfg.2006-05-18_1133
    tmp.cfg.2006-05-10_2125a  tmp.cfg.2006-05-11_0906   tmp.cfg.2006-05-19_1626
    tmp.cfg.2006-05-10_2126   tmp.cfg.2006-05-11_1348   tmp.cfg.2006-05-19_1627
    tmp.cfg.2006-05-10_2127   tmp.cfg.2006-05-11_1349   tmp.cfg.2006-05-19_1634
    tmp.cfg.2006-05-11_0811   tmp.cfg.2006-05-11_1349a  tmp.cfg.2006-05-19_1638
    tmp.cfg.2006-05-11_0823   tmp.cfg.2006-05-11_1349b  tmp.cfg.2006-05-19_1718
    tmp.cfg.2006-05-11_0835   tmp.cfg.2006-05-11_1553   tmp.cfg.2006-05-19_1720
    tmp.cfg.2006-05-11_0836   tmp.cfg.2006-05-11_1556   tmp.cfg.2006-05-19_1731
    tmp.cfg.2006-05-11_0838   tmp.cfg.2006-05-11_1557   tmp.cfg.2006-05-21_0611
    tmp.cfg.2006-05-11_0839   tmp.cfg.2006-05-11_1627   tmp.cfg.2006-05-21_0622
    tmp.cfg.2006-05-11_0840   tmp.cfg.2006-05-11_1629   tmp.cfg.2006-05-21_0652
    $

   If this feels like too much clutter, you can disable the backup mechanism,
   as described under backup_config. Note that doing so may leave you with a
   risk of losing the config file in case of a filesystem overflow or system
   crash. A better idea may be to periodically remove just portions of the
   clutter, for example by typing:

    $ rm tmp.cfg.2006-05-1*
    $ ls tmp.cfg*
    tmp.cfg                  tmp.cfg.2006-05-21_0622
    tmp.cfg.2006-05-21_0611  tmp.cfg.2006-05-21_0652
    $

  VIII.B. The log file and verbosity levels

   $SPEC/result (Unix) or %SPEC%\result (Windows) contains reports and log
   files. When you are doing a build, you will probably find that you want to
   pay close attention to the log file. Depending on the verbosity level that
   you have selected, it will contain enormous amounts of information about
   how your build went.

   The CPU2006 tool suite provides for varying amounts of output about its
   actions during a run. These levels range from the bare minimum of output
   (level 0) to copious streams of information almost certainly worthless to
   anyone not developing the tools themselves (level 99). Note: selecting one
   output level gives you the output from all lower levels, which may cause
   you to wade through more output than you might like.

   The 'level' referred to in the table below is selected either in the
   config file verbose option or in the runspec command as in 'runspec
   --verbose n'.

   Levels higher than 99 are special; they are always output to your log
   file. You can also see them on the screen if you set verbosity to the
   specified level minus 100. For example, the default log level is 5. This
   means that on your screen you will get messages at levels 0 through 3, and
   100 through 105. In your log file, you'll find find the same messages,
   plus the messages at levels 106 through 199.

   Level          What you get                                                
   0              Basic status information, and most errors. These messages   
                  can not be turned off.                                      
   1              List of the benchmarks which will be acted upon.            
                  A list of possible output formats, as well as notification  
   2              when beginning and ending each phase of operation (build,   
                  setup, run, reporting).                                     
                  A list of each action performed during each phase of        
   3              operation (e.g. "Building 176.gcc", "Setting up             
                  253.perlbmk")                                               
   4              Notification of benchmarks excluded                         
   5 (default)    Notification if a benchmark somehow was built but           
                  nevertheless is not executable.                             
   6              Time spent doing automatic flag reporting.                  
   7              Actions to update SPEC-supplied flags files.                
   10             Information on basepeak operation.                          
   12             Errors during discovery of benchmarks and output formats.   
   15             Information about certain updates to stored config files    
   24             Notification of additions to and replacements in the list   
                  of benchmarks.                                              
                  A list of options which are included in the MD5 hash of     
   30             options used to determine whether or not a given binary     
                  needs to be recompiled.                                     
   35             A list of key=value pairs that can be used in command and   
                  notes substitutions, and results of env_var settings.       
   40             A list of 'submit' commands for each benchmark.             
   70             Information on selection of median results.                 
   89             Progress comparing run directory MD5s for executables.      
   90             Time required for various internal functions in the tools.  
   95, 96, 97, 98 Flag parsing progress during flag reporting (progressively  
                  more detail)                                                
   99             Gruesome detail of comparing MD5 hashes of files being      
                  copied during run directory setup.                          
   --- Messages at the following levels will always appear in your log files
   ---            
                  Various config file errors, such as bad preprocessor        
   100            directives, bad placement of certain options, illegal       
                  characters...                                               
   102            Information about output formats that could not be loaded.  
   103            A tally of successes and failures during the run broken     
                  down by benchmark.                                          
   106            A list of runtime and calculated ratio for each benchmark   
                  run.                                                        
   107            Dividers to visually block each phase of the run.           
   110            Elapsed time for each portion of a workload (if an          
                  executable is invoked more than once).                      
   120            Messages about which commands are being issued for which    
                  benchmarks.                                                 
   125            A listing of each individual child processes' start, end,   
                  and elapsed times.                                          
                  A nice header with the time of the runspec invocation and   
   130            the command line used. Information about what happened with 
                  your sysinfo program                                        
   140            General information about the settings for the current run. 
   145            Messages about file comparisons.                            
                  List of commands that will be run, and details about the    
   150            settings used for comparing output files. Also the contents 
                  of the makefile written.                                    
   155            Start, end, and elapsed times for benchmark run.            
   160            Start, end, and elapsed times for benchmark compilation.    
   180            stdout and stderr from commands run                         
   190            Start and stop of delays                                    
   191            Notification of command line used to run specinvoke.        

  VIII.C. Log file example: Feedback-directed optimization.

   In this section, two things are attempted: a guided tour of how to find
   some of the interesting parts in a log file, and an explanation of how the
   SPEC toolset implements feedback-directed optimization, which is commonly
   abbreviated FDO. The technique is also known as Profile-Based
   Optimization, or PBO.

   To use FDO, you typically compile a program twice. The first compile
   creates an image with instrumentation. Then, you run the program, with a
   "training" workload, and the instrumentation collects data about the run:
   a profile. Finally, you re-compile the program, and the compiler uses the
   profile to improve its optimizations.

   SPEC CPU2006 makes all of this relatively easy. Here's a config file that
   builds 401.bzip2 with FDO:

    $ cat mat.cfg
    ext                  = blue271
    iterations           = 1
    output_format        = text
    teeout               = 1
    runlist              = bzip2
    tune                 = peak

    int=peak:
    OPTIMIZE       = -O
    PASS1_CFLAGS   = -xprofile=collect:./fb
    PASS1_LDFLAGS  = -xprofile=collect:./fb
    PASS2_CFLAGS   = -xprofile=use:./fb
    PASS2_LDFLAGS  = -xprofile=use:./fb
    $

   The PASSxx lines above cause FDO to happen. Each of the profiling switches
   is specified twice because we need them to be applied both for compiles
   and for the link. Let's invoke runspec with the above config file,
   searching the output for lines that contain either "Training" or
   "bzip2.o", which is a handy string to pick out both a sample compile line
   and the link line:

    $ runspec --config mat --size test | grep -e Training -e bzip2.o
    cc -c -o bzip2.o -DSPEC_CPU -DNDEBUG    -xprofile=collect:./fb
       -O bzip2.c
    cc -O -xprofile=collect:./fb  spec.o blocksort.o bzip2.o bzlib.o
       compress.o crctable.o decompress.o huffman.o randtable.o
       -o bzip2
    Training 401.bzip2
    cc -c -o bzip2.o -DSPEC_CPU -DNDEBUG    -xprofile=use:./fb   
       -O bzip2.c
    cc -O -xprofile=use:./fb  spec.o blocksort.o bzip2.o bzlib.o
       compress.o crctable.o decompress.o huffman.o randtable.o
       -o bzip2
    $

   Above, you can see the basic flow: compile using the switch
   -xprofile=collect for both the compile and link lines; run the training
   workload; then recompile with -xprofile=use.

   Let's go a little deeper by taking apart the log file. This section uses
   the actual log file from the above runspec command, but white space has
   been adjusted.

   The first thing to look for when you're trying to make sure you've found
   the right log file is the line that contains the string runspec:

    $ grep runspec: *079.log
    runspec: runspec --config mat --size test
    $

   Yes, this looks like the right log. To find the section where the
   benchmark is built, search for "Building", which is soon followed by
   information about what was written to the makefile:

 ------------------------------------------------------------------------
 When checking options for /vampir/benchspec/CPU2006/401.bzip2/exe/bzip2_peak.blue271,
   no MD5 sums were
   found in the config file.  They will be installed after build.
   Building 401.bzip2 test peak blue271 default: (build_peak_blue271.0000)
 Wrote to makefile
 '/vampir/benchspec/CPU2006/401.bzip2/run/build_peak_blue271.0000/Makefile.deps':

 # These are the build dependencies

 # End dependencies
 Wrote to makefile
 '/vampir/benchspec/CPU2006/401.bzip2/run/build_peak_blue271.0000/Makefile.spec':
 TUNE=peak
 EXT=blue271
 NUMBER=401
 NAME=bzip2
 SOURCES= spec.c blocksort.c bzip2.c bzlib.c compress.c crctable.c \
          decompress.c huffman.c randtable.c
 EXEBASE=bzip2
 NEED_MATH=
 BENCHLANG=C
 ONESTEP=
 CONESTEP=

 OPTIMIZE         = -O
 OS               = unix
 PASS1_CFLAGS     = -xprofile=collect:./fb
 PASS1_LDFLAGS    = -xprofile=collect:./fb
 PASS2_CFLAGS     = -xprofile=use:./fb
 PASS2_LDFLAGS    = -xprofile=use:./fb
 abstol           =

   To tell the tools that we want to use FDO, we set PASS1_<language>FLAGS
   and PASS2_<language>FLAGS. If the tools see any use of these flags, they
   will perform two compiles. The particular compiler used in this example
   expects to be invoked twice: once with -xprofile=collect:./fb and then
   again with -xprofile=use:./fb.

   A useful search string to find the first build in the log is "specmake
   build":

 worklist         = list
   Compile for '401.bzip2' started at: Mon May 22 21:31:38 2006 (1148347898)
 Issuing make.clean command 'specmake clean'
 Start make.clean command: Mon May 22 21:31:38 2006 (1148347898)
 rm -rf bzip2 bzip2.exe *.o  *.fppized.f*
 find . \( -name \*.o -o -name '*.fppized.f*' \) -print | xargs rm -rf
 rm -rf core
 Stop make.clean command: Mon May 22 21:31:41 2006 (1148347901)
 Elapsed time for make.clean command: 00:00:03 (3)
 Issuing fdo_make_pass1 command 'specmake build FDO=PASS1'
 Start fdo_make_pass1 command: Mon May 22 21:31:45 2006 (1148347905)
 cc -c -o spec.o -DSPEC_CPU -DNDEBUG  -xprofile=collect:./fb    -O  spec.c
 cc -c -o blocksort.o -DSPEC_CPU -DNDEBUG  -xprofile=collect:./fb    -O  blocksort.c
 cc -c -o bzip2.o -DSPEC_CPU -DNDEBUG  -xprofile=collect:./fb    -O  bzip2.c
 cc -c -o bzlib.o -DSPEC_CPU -DNDEBUG  -xprofile=collect:./fb    -O  bzlib.c
 "bzlib.c", line 911: warning: statement not reached
 "bzlib.c", line 1288: warning: statement not reached
 cc -c -o compress.o -DSPEC_CPU -DNDEBUG  -xprofile=collect:./fb    -O  compress.c
 cc -c -o crctable.o -DSPEC_CPU -DNDEBUG  -xprofile=collect:./fb    -O  crctable.c
 cc -c -o decompress.o -DSPEC_CPU -DNDEBUG  -xprofile=collect:./fb    -O  decompress.c
 cc -c -o huffman.o -DSPEC_CPU -DNDEBUG  -xprofile=collect:./fb    -O  huffman.c
 cc -c -o randtable.o -DSPEC_CPU -DNDEBUG  -xprofile=collect:./fb    -O  randtable.c
 cc  -O         -xprofile=collect:./fb  spec.o blocksort.o bzip2.o bzlib.o compress.o
    crctable.o decompress.o huffman.o randtable.o                     -o bzip2

   You can see above that specmake is invoked with FDO=PASS1, which causes
   the switches from PASS1_CFLAGS to be used. If you want to understand
   exactly how this affects the build, read
   $SPEC/benchspec/Makefile.defaults, along with the document
   $SPEC/Docs/makevars.

   To find the training run, search forward for Training

 O: OPTIMIZE="-O"
 O: PASS1_LDFLAGS="-xprofile=collect:./fb"
 C: LDOUT="-o options"
 Stop options1 command: Mon May 22 21:31:57 2006 (1148347917)
 Elapsed time for options1 command: 00:00:02 (2)
 Training 401.bzip2
 Commands to run:
   -C /vampir/benchspec/CPU2006/401.bzip2/run/build_peak_blue271.0000
   -o input.program.out -e input.program.err ../build_peak_blue271.0000/bzip2 input.program 10
   -o byoudoin.jpg.out -e byoudoin.jpg.err ../build_peak_blue271.0000/bzip2 byoudoin.jpg 5
   -o input.combined.out -e input.combined.err ../build_peak_blue271.0000/bzip2 input.combined 80
 Specinvoke: /vampir/kit91/bin/specinvoke
     -d /vampir/benchspec/CPU2006/401.bzip2/run/build_peak_blue271.0000
     -e speccmds.err -o speccmds.stdout -f speccmds.cmd -C
 Issuing command '/spec/jhenning/kit91/bin/specinvoke
     -d /vampir/benchspec/CPU2006/401.bzip2/run/build_peak_blue271.0000
     -e speccmds.err -o speccmds.stdout -f speccmds.cmd -C'
 Start command: Mon May 22 21:31:58 2006 (1148347918)
 Stop command: Mon May 22 21:39:57 2006 (1148348397)
 Elapsed time for command: 00:07:59 (479)
 Workload elapsed time (0:1) = 52.091489 seconds
 Workload elapsed time (0:2) = 73.627057 seconds
 Workload elapsed time (0:3) = 345.535733 seconds
 copy 0 finished @ Mon May 22 21:39:49 2006.  Total elapsed time: 471.254279
 comparing files in '/vampir/benchspec/CPU2006/401.bzip2/run/build_peak_blue271.0000'
 comparing 'byoudoin.jpg.out' with abstol=, binary=, calctol=0, cw=, floatcompare=,
    ignorecase=, obiwan=, reltol=, skipabstol=, skipobiwan=, skipreltol=, skiptol=

   The key lines to notice above are the ones just after "Commands to run:",
   which begin with -o. These lines cause specinvoke to run the freshly-built
   bzip2 three times. The -o and -e parameters to specinvoke indicate where
   it is to send standard output and standard error. Thus, for example

   -o byoudoin.jpg.out -e byoudoin.jpg.err ../build_peak_blue271.0000/bzip2
   byoudoin.jpg 5

   will cause this command to actually be run:

   ../build_peak_blue271.0000/bzip2 byoudoin.jpg 5 > byoudoin.jpg.out 2>
   byoudoin.jpg.err

   For more information on specinvoke, see utility.html.

   For this particular benchmark, SPEC has supplied three workloads that are
   used to train bzip2. Why three workloads? Because a training set should
   provide the compiler with information about usage of the program which is,
   in the opinion of the developer, representative of real-world use. Of
   course, if the developer has actual evidence, instead of merely an
   opinion, so much the better! In this instance, the developer of the
   training workload has chosen to train bzip with:

    1. The file input.program, which is a program binary;
    2. An input in .jpg format, which is inherently already compressed and
       therefore not a particularly useful application of bzip2 -- but real
       users do this; and
    3. An input that contains a mixture of highly compressible and
       not-very-compressible data: input.combined.

   You can see the inputs that SPEC has provided for training purposes in the
   directories nnn.benchmark/data/train/input and
   nnn.benchmark/data/all/input. In some cases, the training workloads
   required significant development effort, but as a user of the suite you
   don't have to worry about that; you can simply apply them. SPEC is aware
   that there is some variation in the fidelity between the training
   workloads vs. the timed "ref" workloads. In the real world, also, training
   workloads used by program developers do not correspond perfectly to how
   end users apply the programs.

   In any case, the tester who employs the SPEC CPU2006 suite does not have
   to come up with his or her own training workloads, and, indeed, is not
   allowed to do so under the run rules.

   Notice that the log file tells us both the time for the individual
   invocations of bzip2: 52.09, 73.63, and 345.54 seconds; and the total
   time: 471.25 seconds.

   Finally, the compiler is run a second time, to use the profile feedback
   and build a new executable, at the second specmake build:

 Start fdo_make_clean_pass2 command: Mon May 22 21:40:02 2006 (1148348402)
 rm -rf bzip2 bzip2.exe *.o  *.fppized.f*
 find . \( -name \*.o -o -name '*.fppized.f*' \) -print | xargs rm -rf
 Stop fdo_make_clean_pass2 command: Mon May 22 21:40:05 2006 (1148348405)
 Elapsed time for fdo_make_clean_pass2 command: 00:00:03 (3)
 Issuing fdo_make_pass2 command 'specmake build FDO=PASS2'
 Start fdo_make_pass2 command: Mon May 22 21:40:05 2006 (1148348405)
 cc -c -o spec.o -DSPEC_CPU -DNDEBUG    -xprofile=use:./fb    -O   spec.c
 cc -c -o blocksort.o -DSPEC_CPU -DNDEBUG    -xprofile=use:./fb    -O   blocksort.c
 cc -c -o bzip2.o -DSPEC_CPU -DNDEBUG    -xprofile=use:./fb    -O   bzip2.c
 cc -c -o bzlib.o -DSPEC_CPU -DNDEBUG    -xprofile=use:./fb    -O   bzlib.c
 "bzlib.c", line 911: warning: statement not reached
 "bzlib.c", line 1288: warning: statement not reached
 cc -c -o compress.o -DSPEC_CPU -DNDEBUG    -xprofile=use:./fb    -O   compress.c
 cc -c -o crctable.o -DSPEC_CPU -DNDEBUG    -xprofile=use:./fb    -O   crctable.c
 cc -c -o decompress.o -DSPEC_CPU -DNDEBUG    -xprofile=use:./fb    -O   decompress.c
 cc -c -o huffman.o -DSPEC_CPU -DNDEBUG    -xprofile=use:./fb    -O   huffman.c
 cc -c -o randtable.o -DSPEC_CPU -DNDEBUG    -xprofile=use:./fb    -O   randtable.c
 cc  -O         -xprofile=use:./fb  spec.o blocksort.o bzip2.o bzlib.o compress.o
    crctable.o decompress.o huffman.o randtable.o                     -o bzip2
 Stop fdo_make_pass2 command: Mon May 22 21:40:15 2006 (1148348415)
 Elapsed time for fdo_make_pass2 command: 00:00:10 (10)
 Issuing options2 command 'specmake options FDO=PASS2'
 Start options2 command: Mon May 22 21:40:15 2006 (1148348415)

   This time, specmake is invoked with FDO=PASS2, which is why the compile
   picks up the PASS2_CFLAGS.

   And that's it. The tools did most of the work; the user simply set the
   PASSn flags in the config file.

  VIII.D. Help, I've got too many logs!

   If you do a very large number of builds and runs, you may find that your
   result directory gets far too cluttered. If it does, you should feel free
   to issue commands such as these on Unix systems:

    cd $SPEC
    mv result result_old
    mkdir result

   On Windows, you could say:

    cd %SPEC%
    rename result result_old
    mkdir result

  VIII.E. Finding the build directory

   As described under "About Disk Usage" in runspec.html, the CPU2006 tools
   do the actual builds and runs in the run directories. The benchmark
   sources are never modified in the src directory.

   New with CPU2006, the build directories have logical names, typically of
   the form build_<tune>_<extension>.0000. For example, after the command
   runspec --config jun09a --action build --tune base libquantum, the
   following directory was created:

 $ cd $SPEC/benchspec/CPU2006/462.libquantum/run
 $ pwd
 /spec/joelw/benchspec/CPU2006/462.libquantum/run
 $ ls -ld build*jun*
 drwxrwxr-x   2 joelw ptg    1536 Jun 10 14:49 build_base_jun09a.0000
 $

   On Windows, you would say cd %SPEC%\benchspec\CPU2006\462.libquantum\run
   followed by dir build*.

   If the directory build_<tune>_<extension>.0000 already exists when a new
   build is attempted for the same tuning and extension, the directory will
   be re-used, unless:

     * You have set the environment variable SPEC_CPU2006_NO_RUNDIR_DEL, or
     * The directory has been left in a "locked" state by an aborted previous
       build.

   In such cases, the 0000 will be incremented until a name is generated that
   is available. You can find locked directories by searching for lock=1 in
   the file $SPEC/benchspec/CPU2006/<nnn.benchmark>/run/list (Unix) or
   %SPEC%\benchspec\CPU2006\<nnn.benchmark>\run\list (Windows).

   When more than one build directory has been created for a given tuning and
   extension, you may need to trace the directory back to the specific build
   attempt that created it. You can do so by searching for the directory name
   in the log files:

 $ grep Building *log | grep build_base_jun09a.0001
 CPU2006.380.log:  Building 462.libquantum ref base jun09a default: (build_base_jun09a.0001)
 $

   In the above example, the grep command locates log #380 as the log that
   corresponds to this run directory. On Windows, of course, you would use
   findstr instead of grep.

  VIII.F. Files in the build directory

   A variety of files are output to the build directory. Here are some of the
   key files which can usefully be examined:

                      The components for make that were generated for the     
   Makefile.spec      current config file with the current set of runspec     
                      options.                                                
   options.out        For 1 pass compile: build options summary.              
   options1.out       For N pass compile: summary of first pass.              
   options2.out       For N pass compile: summary of second pass.             
   make.out           For 1 pass compile: detailed commands generated.        
   fdo_make_pass1.out For N pass compile: detailed commands generated for 1st 
                      pass.                                                   
   fdo_make_pass2.out For N pass compile: detailed commands generated for 2nd 
                      pass.                                                   
   *.err              The output from standard error corresponding to the     
                      above files.                                            

  VIII.G. For more information

   For more information about how the run directories work, see the
   descriptions of specinvoke, specmake, and specdiff in utility.html.

IX. Troubleshooting

   When something goes wrong with a build, here are some things to check:

    1. Are there any obvious clues in the log file? Search for the word
       "Building". Keep searching until you hit the next benchmark AFTER the
       one that you are interested in. Now scroll backward one screen's worth
       of text.

    2. Did your desired switches get applied? Go to the build directory, and
       look at options*out.

    3. Did the tools or your compilers report any errors? Look in the build
       directory at *err.

    4. What happens if you try the build by hand? See the section on specmake
       in utility.html.

    5. If an actual run fails, what happens if you invoke the run by hand?
       See the information about "specinvoke -n" in utility.html

     ----------------------------------------------------------------------

   Copyright (C) 1999-2006 Standard Performance Evaluation Corporation
   All Rights Reserved
