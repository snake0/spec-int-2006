.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTML::HeadParser 3"
.TH HTML::HeadParser 3 "2014-04-08" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
HTML::HeadParser \- Parse <HEAD> section of a HTML document
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& require HTML::HeadParser;
\& $p = HTML::HeadParser->new;
\& $p->parse($text) and  print "not finished";
.Ve
.PP
.Vb 3
\& $p->header('Title')          # to access <title>....</title>
\& $p->header('Content-Base')   # to access <base href="http://...">
\& $p->header('Foo')            # to access <meta http-equiv="Foo" content="...">
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`HTML::HeadParser\*(C'\fR is a specialized (and lightweight)
\&\f(CW\*(C`HTML::Parser\*(C'\fR that will only parse the <\s-1HEAD\s0>...</HEAD>
section of an \s-1HTML\s0 document.  The \fIparse()\fR method
will return a \s-1FALSE\s0 value as soon as some <\s-1BODY\s0> element or body
text are found, and should not be called again after this.
.PP
Note that the \f(CW\*(C`HTML::HeadParser\*(C'\fR might get confused if raw undecoded
\&\s-1UTF\-8\s0 is passed to the \fIparse()\fR method.  Make sure the strings are
properly decoded before passing them on.
.PP
The \f(CW\*(C`HTML::HeadParser\*(C'\fR keeps a reference to a header object, and the
parser will update this header object as the various elements of the
<\s-1HEAD\s0> section of the \s-1HTML\s0 document are recognized.  The following
header fields are affected:
.IP "Content\-Base:" 4
.IX Item "Content-Base:"
The \fIContent-Base\fR header is initialized from the <base
href=\*(L"...\*(R"> element.
.IP "Title:" 4
.IX Item "Title:"
The \fITitle\fR header is initialized from the <title>...</title>
element.
.IP "Isindex:" 4
.IX Item "Isindex:"
The \fIIsindex\fR header will be added if there is a <isindex>
element in the <head>.  The header value is initialized from the
\&\fIprompt\fR attribute if it is present.  If no \fIprompt\fR attribute is
given it will have '?' as the value.
.IP "X\-Meta\-Foo:" 4
.IX Item "X-Meta-Foo:"
All <meta> elements will initialize headers with the prefix
"\f(CW\*(C`X\-Meta\-\*(C'\fR" on the name.  If the <meta> element contains a
\&\f(CW\*(C`http\-equiv\*(C'\fR attribute, then it will be honored as the header name.
.SH "METHODS"
.IX Header "METHODS"
The following methods (in addition to those provided by the
superclass) are available:
.IP "$hp = HTML::HeadParser\->new" 4
.IX Item "$hp = HTML::HeadParser->new"
.PD 0
.ie n .IP "$hp = HTML::HeadParser\->new( $header )" 4
.el .IP "$hp = HTML::HeadParser\->new( \f(CW$header\fR )" 4
.IX Item "$hp = HTML::HeadParser->new( $header )"
.PD
The object constructor.  The optional \f(CW$header\fR argument should be a
reference to an object that implement the \fIheader()\fR and \fIpush_header()\fR
methods as defined by the \f(CW\*(C`HTTP::Headers\*(C'\fR class.  Normally it will be
of some class that isa or delegates to the \f(CW\*(C`HTTP::Headers\*(C'\fR class.
.Sp
If no \f(CW$header\fR is given \f(CW\*(C`HTML::HeadParser\*(C'\fR will create an
\&\f(CW\*(C`HTTP::Header\*(C'\fR object by itself (initially empty).
.IP "$hp\->header;" 4
.IX Item "$hp->header;"
Returns a reference to the header object.
.ie n .IP "$hp\->header( $key )" 4
.el .IP "$hp\->header( \f(CW$key\fR )" 4
.IX Item "$hp->header( $key )"
Returns a header value.  It is just a shorter way to write
\&\f(CW\*(C`$hp\->header\->header($key)\*(C'\fR.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 9
\& $h = HTTP::Headers->new;
\& $p = HTML::HeadParser->new($h);
\& $p->parse(<<EOT);
\& <title>Stupid example</title>
\& <base href="http://www.linpro.no/lwp/">
\& Normal text starts here.
\& EOT
\& undef $p;
\& print $h->title;   # should print "Stupid example"
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
HTML::Parser, HTTP::Headers
.Sp
The \f(CW\*(C`HTTP::Headers\*(C'\fR class is distributed as part of the
\&\fIlibwww-perl\fR package.  If you don't have that distribution installed
you need to provide the \f(CW$header\fR argument to the \f(CW\*(C`HTML::HeadParser\*(C'\fR
constructor with your own object that implements the documented
protocol.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1996\-2001 Gisle Aas. All rights reserved.
.Sp
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
