.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MIME::Tools 3"
.TH MIME::Tools 3 "2014-04-08" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
MIME\-tools \- modules for parsing (and creating!) MIME entities
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Here's some pretty basic code for \fBparsing a \s-1MIME\s0 message,\fR and outputting
its decoded components to a given directory:
.PP
.Vb 1
\&    use MIME::Parser;
.Ve
.PP
.Vb 3
\&    ### Create parser, and set some parsing options:
\&    my $parser = new MIME::Parser;
\&    $parser->output_under("$ENV{HOME}/mimemail");
.Ve
.PP
.Vb 2
\&    ### Parse input:
\&    $entity = $parser->parse(\e*STDIN) or die "parse failed\en";
.Ve
.PP
.Vb 2
\&    ### Take a look at the top-level entity (and any parts it has):
\&    $entity->dump_skeleton;
.Ve
.PP
Here's some code which \fBcomposes and sends a \s-1MIME\s0 message\fR containing
three parts: a text file, an attached \s-1GIF\s0, and some more text:
.PP
.Vb 1
\&    use MIME::Entity;
.Ve
.PP
.Vb 5
\&    ### Create the top-level, and set up the mail headers:
\&    $top = MIME::Entity->build(Type    =>"multipart/mixed",
\&                               From    => "me\e@myhost.com",
\&                               To      => "you\e@yourhost.com",
\&                               Subject => "Hello, nurse!");
.Ve
.PP
.Vb 2
\&    ### Part #1: a simple text document:
\&    $top->attach(Path=>"./testin/short.txt");
.Ve
.PP
.Vb 4
\&    ### Part #2: a GIF file:
\&    $top->attach(Path        => "./docs/mime-sm.gif",
\&                 Type        => "image/gif",
\&                 Encoding    => "base64");
.Ve
.PP
.Vb 2
\&    ### Part #3: some literal text:
\&    $top->attach(Data=>$message);
.Ve
.PP
.Vb 4
\&    ### Send it:
\&    open MAIL, "| /usr/lib/sendmail -t -oi -oem" or die "open: $!";
\&    $top->print(\e*MAIL);
\&    close MAIL;
.Ve
.PP
For more examples, look at the scripts in the \fBexamples\fR directory
of the MIME-tools distribution.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
MIME-tools is a collection of Perl5 \s-1MIME::\s0 modules for parsing, decoding,
\&\fIand generating\fR single\- or multipart (even nested multipart) \s-1MIME\s0
messages.  (Yes, kids, that means you can send messages with attached
\&\s-1GIF\s0 files).
.SH "REQUIREMENTS"
.IX Header "REQUIREMENTS"
You will need the following installed on your system:
.PP
.Vb 8
\&        File::Path
\&        File::Spec
\&        IPC::Open2              (optional)
\&        IO::Scalar, ...         from the IO-stringy distribution
\&        MIME::Base64
\&        MIME::QuotedPrint
\&        Net::SMTP
\&        Mail::Internet, ...     from the MailTools distribution.
.Ve
.PP
See the Makefile.PL in your distribution for the most-comprehensive
list of prerequisite modules and their version numbers.
.SH "A QUICK TOUR"
.IX Header "A QUICK TOUR"
.Sh "Overview of the classes"
.IX Subsection "Overview of the classes"
Here are the classes you'll generally be dealing with directly:
.PP
.Vb 28
\&    (START HERE)            results() .-----------------.
\&          \e                 .-------->| MIME::          |
\&           .-----------.   /          | Parser::Results |
\&           | MIME::    |--'           `-----------------'
\&           | Parser    |--.           .-----------------.
\&           `-----------'   \e filer()  | MIME::          |
\&              | parse()     `-------->| Parser::Filer   |
\&              | gives you             `-----------------'
\&              | a...                                  | output_path() 
\&              |                                       | determines
\&              |                                       | path() of...
\&              |    head()       .--------.            |
\&              |    returns...   | MIME:: | get()      |
\&              V       .-------->| Head   | etc...     |
\&           .--------./          `--------'            |
\&     .---> | MIME:: |                                 |
\&     `-----| Entity |           .--------.            |
\&   parts() `--------'\e          | MIME:: |           /
\&   returns            `-------->| Body   |<---------'
\&   sub-entities    bodyhandle() `--------'
\&   (if any)        returns...       | open()
\&                                    | returns...
\&                                    |
\&                                    V
\&                                .--------. read()
\&                                | IO::   | getline()
\&                                | Handle | print()
\&                                `--------' etc...
.Ve
.PP
To illustrate, parsing works this way:
.IP "\(bu" 4
\&\fBThe \*(L"parser\*(R" parses the \s-1MIME\s0 stream.\fR
A parser is an instance of \f(CW\*(C`MIME::Parser\*(C'\fR.
You hand it an input stream (like a filehandle) to parse a message from:
if the parse is successful, the result is an \*(L"entity\*(R".
.IP "\(bu" 4
\&\fBA parsed message is represented by an \*(L"entity\*(R".\fR
An entity is an instance of \f(CW\*(C`MIME::Entity\*(C'\fR (a subclass of \f(CW\*(C`Mail::Internet\*(C'\fR).
If the message had \*(L"parts\*(R" (e.g., attachments), then those parts
are \*(L"entities\*(R" as well, contained inside the top-level entity.
Each entity has a \*(L"head\*(R" and a \*(L"body\*(R".
.IP "\(bu" 4
\&\fBThe entity's \*(L"head\*(R" contains information about the message.\fR
A \*(L"head\*(R" is an instance of \f(CW\*(C`MIME::Head\*(C'\fR (a subclass of \f(CW\*(C`Mail::Header\*(C'\fR).
It contains information from the message header: content type,
sender, subject line, etc.
.IP "\(bu" 4
\&\fBThe entity's \*(L"body\*(R" knows where the message data is.\fR
You can ask to \*(L"open\*(R" this data source for \fIreading\fR or \fIwriting\fR,
and you will get back an \*(L"I/O handle\*(R".
.IP "\(bu" 4
\&\fBYou can \f(BIopen()\fB a \*(L"body\*(R" and get an \*(L"I/O handle\*(R" to read/write message data.\fR
This handle is an object that is basically like an IO::Handle or
a FileHandle... it can be any class, so long as it supports a small,
standard set of methods for reading from or writing to the underlying
data source.
.PP
A typical multipart message containing two parts \*(-- a textual greeting
and an \*(L"attached\*(R" \s-1GIF\s0 file \*(-- would be a tree of MIME::Entity objects,
each of which would have its own MIME::Head.  Like this:
.PP
.Vb 16
\&    .--------.
\&    | MIME:: | Content-type: multipart/mixed
\&    | Entity | Subject: Happy Samhaine!
\&    `--------'
\&         |
\&         `----.
\&        parts |
\&              |   .--------.
\&              |---| MIME:: | Content-type: text/plain; charset=us-ascii
\&              |   | Entity | Content-transfer-encoding: 7bit
\&              |   `--------'
\&              |   .--------.
\&              |---| MIME:: | Content-type: image/gif
\&                  | Entity | Content-transfer-encoding: base64
\&                  `--------' Content-disposition: inline;
\&                               filename="hs.gif"
.Ve
.Sh "Parsing messages"
.IX Subsection "Parsing messages"
You usually start by creating an instance of \fBMIME::Parser\fR
and setting up certain parsing parameters: what directory to save
extracted files to, how to name the files, etc.
.PP
You then give that instance a readable filehandle on which waits a
\&\s-1MIME\s0 message.  If all goes well, you will get back a \fBMIME::Entity\fR
object (a subclass of \fBMail::Internet\fR), which consists of...
.IP "\(bu" 4
A \fBMIME::Head\fR (a subclass of \fBMail::Header\fR) which holds the \s-1MIME\s0
header data.
.IP "\(bu" 4
A \fBMIME::Body\fR, which is a object that knows where the body data is.
You ask this object to \*(L"open\*(R" itself for reading, and it
will hand you back an \*(L"I/O handle\*(R" for reading the data: this is
a FileHandle-like object, and could be of any class, so long as it
conforms to a subset of the \fBIO::Handle\fR interface.
.PP
If the original message was a multipart document, the MIME::Entity
object will have a non-empty list of \*(L"parts\*(R", each of which is in
turn a MIME::Entity (which might also be a multipart entity, etc,
etc...).
.PP
Internally, the parser (in MIME::Parser) asks for instances
of \fBMIME::Decoder\fR whenever it needs to decode an encoded file.
MIME::Decoder has a mapping from supported encodings (e.g., 'base64')
to classes whose instances can decode them.  You can add to this mapping
to try out new/experiment encodings.  You can also use
MIME::Decoder by itself.
.Sh "Composing messages"
.IX Subsection "Composing messages"
All message composition is done via the \fBMIME::Entity\fR class.
For single-part messages, you can use the \fBMIME::Entity/build\fR
constructor to create \s-1MIME\s0 entities very easily.
.PP
For multipart messages, you can start by creating a top-level
\&\f(CW\*(C`multipart\*(C'\fR entity with \fB\f(BIMIME::Entity::build()\fB\fR, and then use
the similar \fB\f(BIMIME::Entity::attach()\fB\fR method to attach parts to
that message.  \fIPlease note:\fR what most people think of as
\&\*(L"a text message with an attached \s-1GIF\s0 file\*(R" is \fIreally\fR a multipart
message with 2 parts: the first being the text message, and the
second being the \s-1GIF\s0 file.
.PP
When building \s-1MIME\s0 a entity, you'll have to provide two very important
pieces of information: the \fIcontent type\fR and the
\&\fIcontent transfer encoding\fR.  The type is usually easy, as it is directly
determined by the file format; e.g., an \s-1HTML\s0 file is \f(CW\*(C`text/html\*(C'\fR.
The encoding, however, is trickier... for example, some \s-1HTML\s0 files are
\&\f(CW\*(C`7bit\*(C'\fR\-compliant, but others might have very long lines and would need to be
sent \f(CW\*(C`quoted\-printable\*(C'\fR for reliability.
.PP
See the section on encoding/decoding for more details, as well as
\&\*(L"A \s-1MIME\s0 \s-1PRIMER\s0\*(R".
.Sh "Sending email"
.IX Subsection "Sending email"
Since MIME::Entity inherits directly from Mail::Internet,
you can use the normal Mail::Internet mechanisms to send
email.  For example,
.PP
.Vb 1
\&    $entity->smtpsend;
.Ve
.Sh "Encoding/decoding support"
.IX Subsection "Encoding/decoding support"
The \fBMIME::Decoder\fR class can be used to \fIencode\fR as well; this is done
when printing \s-1MIME\s0 entities.  All the standard encodings are supported
(see \*(L"A \s-1MIME\s0 \s-1PRIMER\s0\*(R" for details):
.PP
.Vb 7
\&    Encoding:        | Normally used when message contents are:
\&    -------------------------------------------------------------------
\&    7bit             | 7-bit data with under 1000 chars/line, or multipart.
\&    8bit             | 8-bit data with under 1000 chars/line.
\&    binary           | 8-bit data with some long lines (or no line breaks).
\&    quoted-printable | Text files with some 8-bit chars (e.g., Latin-1 text).
\&    base64           | Binary files.
.Ve
.PP
Which encoding you choose for a given document depends largely on
(1) what you know about the document's contents (text vs binary), and
(2) whether you need the resulting message to have a reliable encoding
for 7\-bit Internet email transport.
.PP
In general, only \f(CW\*(C`quoted\-printable\*(C'\fR and \f(CW\*(C`base64\*(C'\fR guarantee reliable
transport of all data; the other three \*(L"no\-encoding\*(R" encodings simply
pass the data through, and are only reliable if that data is 7bit \s-1ASCII\s0
with under 1000 characters per line, and has no conflicts with the
multipart boundaries.
.PP
I've considered making it so that the content-type and encoding
can be automatically inferred from the file's path, but that seems
to be asking for trouble... or at least, for Mail::Cap...
.Sh "Message-logging"
.IX Subsection "Message-logging"
MIME-tools is a large and complex toolkit which tries to deal with 
a wide variety of external input.  It's sometimes helpful to see
what's really going on behind the scenes.
There are several kinds of messages logged by the toolkit itself:
.IP "Debug messages" 4
.IX Item "Debug messages"
These are printed directly to the \s-1STDERR\s0, with a prefix of
\&\f(CW"MIME\-tools: debug"\fR.  
.Sp
Debug message are only logged if you have turned
\&\*(L"debugging\*(R" on in the MIME::Tools configuration.
.IP "Warning messages" 4
.IX Item "Warning messages"
These are logged by the standard Perl \fIwarn()\fR mechanism
to indicate an unusual situation.  
They all have a prefix of \f(CW"MIME\-tools: warning"\fR.
.Sp
Warning messages are only logged if \f(CW$^W\fR is set true 
and MIME::Tools is not configured to be \*(L"quiet\*(R".
.IP "Error messages" 4
.IX Item "Error messages"
These are logged by the standard Perl \fIwarn()\fR mechanism
to indicate that something actually failed.
They all have a prefix of \f(CW"MIME\-tools: error"\fR.
.Sp
Error messages are only logged if \f(CW$^W\fR is set true 
and MIME::Tools is not configured to be \*(L"quiet\*(R".
.IP "Usage messages" 4
.IX Item "Usage messages"
Unlike \*(L"typical\*(R" warnings above, which warn about problems processing
data, usage-warnings are for alerting developers of deprecated methods 
and suspicious invocations.  
.Sp
Usage messages are currently only logged if \f(CW$^W\fR is set true 
and MIME::Tools is not configured to be \*(L"quiet\*(R".
.PP
When a MIME::Parser (or one of its internal helper classes)
wants to report a message, it generally does so by recording 
the message to the \fBMIME::Parser::Results\fR object
immediately before invoking the appropriate function above.
That means each parsing run has its own trace-log which 
can be examined for problems.
.Sh "Configuring the toolkit"
.IX Subsection "Configuring the toolkit"
If you want to tweak the way this toolkit works (for example, to
turn on debugging), use the routines in the \fBMIME::Tools\fR module.
.IP "debugging" 4
.IX Item "debugging"
Turn debugging on or off.  
Default is false (off).
.Sp
.Vb 1
\&     MIME::Tools->debugging(1);
.Ve
.IP "quiet" 4
.IX Item "quiet"
Turn the reporting of warning/error messages on or off.  
Default is true, meaning that these message are silenced.
.Sp
.Vb 1
\&     MIME::Tools->quiet(1);
.Ve
.IP "version" 4
.IX Item "version"
Return the toolkit version.
.Sp
.Vb 1
\&     print MIME::Tools->version, "\en";
.Ve
.SH "THINGS YOU SHOULD DO"
.IX Header "THINGS YOU SHOULD DO"
.Sh "Take a look at the examples"
.IX Subsection "Take a look at the examples"
The MIME-Tools distribution comes with an \*(L"examples\*(R" directory.
The scripts in there are basically just tossed\-together, but
they'll give you some ideas of how to use the parser.
.Sh "Run with warnings enabled"
.IX Subsection "Run with warnings enabled"
\&\fIAlways\fR run your Perl script with \f(CW\*(C`\-w\*(C'\fR.
If you see a warning about a deprecated method, change your 
code \s-1ASAP\s0.  This will ease upgrades tremendously.
.Sh "Avoid non-standard encodings"
.IX Subsection "Avoid non-standard encodings"
Don't try to MIME-encode using the non-standard \s-1MIME\s0 encodings.
It's just not a good practice if you want people to be able to
read your messages.
.Sh "Plan for thrown exceptions"
.IX Subsection "Plan for thrown exceptions"
For example, if your mail-handling code absolutely must not die,
then perform mail parsing like this:
.PP
.Vb 1
\&    $entity = eval { $parser->parse(\e*INPUT) };
.Ve
.PP
Parsing is a complex process, and some components may throw exceptions
if seriously-bad things happen.  Since \*(L"seriously\-bad\*(R" is in the
eye of the beholder, you're better off \fIcatching\fR possible exceptions
instead of asking me to propagate \f(CW\*(C`undef\*(C'\fR up the stack.  Use of exceptions in
reusable modules is one of those religious issues we're never all
going to agree upon; thankfully, that's what \f(CW\*(C`eval{}\*(C'\fR is good for.
.Sh "Check the parser results for warnings/errors"
.IX Subsection "Check the parser results for warnings/errors"
As of 5.3xx, the parser tries extremely hard to give you a
MIME::Entity.  If there were any problems, it logs warnings/errors
to the underlying \*(L"results\*(R" object (see MIME::Parser::Results).
Look at that object after each parse.
Print out the warnings and errors, \fIespecially\fR if messages don't
parse the way you thought they would.
.Sh "Don't plan on printing exactly what you parsed!"
.IX Subsection "Don't plan on printing exactly what you parsed!"
\&\fIParsing is a (slightly) lossy operation.\fR
Because of things like ambiguities in base64\-encoding, the following 
is \fInot\fR going to spit out its input unchanged in all cases:
.PP
.Vb 2
\&    $entity = $parser->parse(\e*STDIN);
\&    $entity->print(\e*STDOUT);
.Ve
.PP
If you're using MIME::Tools to process email, remember to save
the data you parse if you want to send it on unchanged.  
This is vital for things like PGP-signed email.
.Sh "Understand how international characters are represented"
.IX Subsection "Understand how international characters are represented"
The \s-1MIME\s0 standard allows for text strings in headers to contain 
characters from any character set, by using special sequences
which look like this:
.PP
.Vb 1
\&    =?ISO-8859-1?Q?Keld_J=F8rn_Simonsen?=
.Ve
.PP
To be consistent with the existing Mail::Field classes, MIME::Tools
does \fInot\fR automatically unencode these strings, since doing so would
lose the character-set information and interfere with the parsing 
of fields (see \*(L"decode_headers\*(R" in MIME::Parser for a full explanation).
That means you should be prepared to deal with these encoded strings.
.PP
The most common question then is, \fBhow do I decode these encoded strings?\fR
The answer depends on what you want to decode them \fIto\fR:
\&\s-1ASCII\s0, Latin1, \s-1UTF\-8\s0, etc.  Be aware that your \*(L"target\*(R" representation
may not support all possible character sets you might encounter; 
for example, Latin1 (\s-1ISO\-8859\-1\s0) has no way of representing Big5 
(Chinese) characters.  A common practice is to represent \*(L"untranslateable\*(R"
characters as \*(L"?\*(R"s, or to ignore them completely.
.PP
To unencode the strings into some of the more-popular Western byte 
representations (e.g., Latin1, Latin2, etc.), you can use the decoders 
in MIME::WordDecoder (see MIME::WordDecoder).  
The simplest way is by using \f(CW\*(C`unmime()\*(C'\fR, a function wrapped
around your \*(L"default\*(R" decoder, as follows:
.PP
.Vb 3
\&    use MIME::WordDecoder;    
\&    ...
\&    $subject = unmime $entity->head->get('subject');
.Ve
.PP
One place this \fIis\fR done automatically is in extracting the recommended
filename for a part while parsing.  That's why you should start by
setting up the best \*(L"default\*(R" decoder if the default target of Latin1
isn't to your liking.
.SH "THINGS I DO THAT YOU SHOULD KNOW ABOUT"
.IX Header "THINGS I DO THAT YOU SHOULD KNOW ABOUT"
.Sh "Fuzzing of \s-1CRLF\s0 and newline on input"
.IX Subsection "Fuzzing of CRLF and newline on input"
\&\s-1RFC\-1521\s0 dictates that \s-1MIME\s0 streams have lines terminated by \s-1CRLF\s0
(\f(CW"\er\en"\fR).  However, it is extremely likely that folks will want to
parse \s-1MIME\s0 streams where each line ends in the local newline
character \f(CW"\en"\fR instead.
.PP
An attempt has been made to allow the parser to handle both \s-1CRLF\s0
and newline-terminated input.
.Sh "Fuzzing of \s-1CRLF\s0 and newline when decoding"
.IX Subsection "Fuzzing of CRLF and newline when decoding"
The \f(CW"7bit"\fR and \f(CW"8bit"\fR decoders will decode both
a \f(CW"\en"\fR and a \f(CW"\er\en"\fR end-of-line sequence into a \f(CW"\en"\fR.
.PP
The \f(CW"binary"\fR decoder (default if no encoding specified)
still outputs stuff verbatim... so a \s-1MIME\s0 message with CRLFs
and no explicit encoding will be output as a text file
that, on many systems, will have an annoying ^M at the end of
each line... \fIbut this is as it should be\fR.
.Sh "Fuzzing of \s-1CRLF\s0 and newline when encoding/composing"
.IX Subsection "Fuzzing of CRLF and newline when encoding/composing"
All encoders currently output the end-of-line sequence as a \f(CW"\en"\fR,
with the assumption that the local mail agent will perform
the conversion from newline to \s-1CRLF\s0 when sending the mail.
However, there probably should be an option to output \s-1CRLF\s0 as per \s-1RFC\-1521\s0.
.Sh "Inability to handle multipart boundaries with embedded newlines"
.IX Subsection "Inability to handle multipart boundaries with embedded newlines"
Let's get something straight: this is an evil, \s-1EVIL\s0 practice.
If your mailer creates multipart boundary strings that contain
newlines, give it two weeks notice and find another one.  If your
mail robot receives \s-1MIME\s0 mail like this, regard it as syntactically
incorrect, which it is.
.Sh "Ignoring non-header headers"
.IX Subsection "Ignoring non-header headers"
People like to hand the parser raw messages straight from 
\&\s-1POP3\s0 or from a mailbox.  There is often predictable non-header
information in front of the real headers; e.g., the initial
\&\*(L"From\*(R" line in the following message:
.PP
.Vb 3
\&    From - Wed Mar 22 02:13:18 2000
\&    Return-Path: <eryq@zeegee.com>
\&    Subject: Hello
.Ve
.PP
The parser simply ignores such stuff quietly.  Perhaps it
shouldn't, but most people seem to want that behavior.
.Sh "Fuzzing of empty multipart preambles"
.IX Subsection "Fuzzing of empty multipart preambles"
Please note that there is currently an ambiguity in the way
preambles are parsed in.  The following message fragments \fIboth\fR
are regarded as having an empty preamble (where \f(CW\*(C`\en\*(C'\fR indicates a 
newline character):
.PP
.Vb 5
\&     Content-type: multipart/mixed; boundary="xyz"\en
\&     Subject: This message (#1) has an empty preamble\en
\&     \en      
\&     --xyz\en
\&     ...
.Ve
.PP
.Vb 6
\&     Content-type: multipart/mixed; boundary="xyz"\en
\&     Subject: This message (#2) also has an empty preamble\en
\&     \en      
\&     \en
\&     --xyz\en
\&     ...
.Ve
.PP
In both cases, the \fIfirst\fR completely-empty line (after the \*(L"Subject\*(R")
marks the end of the header.  
.PP
But we should clearly ignore the \fIsecond\fR empty line in message #2,
since it fills the role of \fI\*(L"the newline which is only there to make
sure that the boundary is at the beginning of a line\*(R"\fR.  
Such newlines are \fInever\fR part of the content preceding the boundary; 
thus, there is no preamble \*(L"content\*(R" in message #2.
.PP
However, it seems clear that message #1 \fIalso\fR has no preamble
\&\*(L"content\*(R", and is in fact merely a compact representation of an
empty preamble.
.Sh "Use of a temp file during parsing"
.IX Subsection "Use of a temp file during parsing"
\&\fIWhy not do everything in core?\fR
Although the amount of core available on even a modest home
system continues to grow, the size of attachments continues
to grow with it.  I wanted to make sure that even users with small
systems could deal with decoding multi-megabyte sounds and movie files.
That means not being core\-bound.
.PP
As of the released 5.3xx, MIME::Parser gets by with only
one temp file open per parser.  This temp file provides
a sort of infinite scratch space for dealing with the current
message part.  It's fast and lightweight, but you should know
about it anyway.
.Sh "Why do I assume that \s-1MIME\s0 objects are email objects?"
.IX Subsection "Why do I assume that MIME objects are email objects?"
Achim Bohnet once pointed out that \s-1MIME\s0 headers do nothing more than
store a collection of attributes, and thus could be represented as
objects which don't inherit from Mail::Header.
.PP
I agree in principle, but \s-1RFC\-1521\s0 says otherwise.
\&\s-1RFC\-1521\s0 [\s-1MIME\s0] headers are a syntactic subset of \s-1RFC\-822\s0 [email] headers.
Perhaps a better name for these modules would have been \s-1RFC1521::\s0
instead of \s-1MIME::\s0, but we're a little beyond that stage now.
.PP
When I originally wrote these modules for the \s-1CPAN\s0, I agonized for a long
time about whether or not they really should subclass from \fBMail::Internet\fR
(then at version 1.17).  Thanks to Graham Barr, who graciously evolved
MailTools 1.06 to be more MIME\-friendly, unification was achieved
at MIME-tools release 2.0.
The benefits in reuse alone have been substantial.
.SH "A MIME PRIMER"
.IX Header "A MIME PRIMER"
So you need to parse (or create) \s-1MIME\s0, but you're not quite up on
the specifics?  No problem...
.Sh "Glossary"
.IX Subsection "Glossary"
Here are some definitions adapted from \s-1RFC\-1521\s0 explaining the terminology
we use; each is accompanied by the equivalent in \s-1MIME::\s0 module terms...
.IP "attachment" 4
.IX Item "attachment"
An \*(L"attachment\*(R" is common slang for any part of a multipart message \*(--
except, perhaps, for the first part, which normally carries a user
message describing the attachments that follow (e.g.: \*(L"Hey dude, here's
that \s-1GIF\s0 file I promised you.\*(R").
.Sp
In our system, an attachment is just a \fBMIME::Entity\fR under the
top-level entity, probably one of its parts.
.IP "body" 4
.IX Item "body"
The \*(L"body\*(R" of an entity is that portion of the entity
which follows the header and which contains the real message
content.  For example, if your \s-1MIME\s0 message has a \s-1GIF\s0 file attachment,
then the body of that attachment is the base64\-encoded \s-1GIF\s0 file itself.
.Sp
A body is represented by an instance of \fBMIME::Body\fR.  You get the
body of an entity by sending it a \fIbodyhandle()\fR
message.
.IP "body part" 4
.IX Item "body part"
One of the parts of the body of a multipart \fB/entity\fR.
A body part has a \fB/header\fR and a \fB/body\fR, so it makes sense to
speak about the body of a body part.
.Sp
Since a body part is just a kind of entity, it's represented by
an instance of \fBMIME::Entity\fR.
.IP "entity" 4
.IX Item "entity"
An \*(L"entity\*(R" means either a \fB/message\fR or a \fB/body part\fR.
All entities have a \fB/header\fR and a \fB/body\fR.
.Sp
An entity is represented by an instance of \fBMIME::Entity\fR.
There are instance methods for recovering the
header (a \fBMIME::Head\fR) and the
body (a \fBMIME::Body\fR).
.IP "header" 4
.IX Item "header"
This is the top portion of the \s-1MIME\s0 message, which contains the
\&\*(L"Content\-type\*(R", \*(L"Content\-transfer\-encoding\*(R", etc.  Every \s-1MIME\s0 entity has
a header, represented by an instance of \fBMIME::Head\fR.  You get the
header of an entity by sending it a \fIhead()\fR message.
.IP "message" 4
.IX Item "message"
A \*(L"message\*(R" generally means the complete (or \*(L"top\-level\*(R") message being
transferred on a network.
.Sp
There currently is no explicit package for \*(L"messages\*(R"; under \s-1MIME::\s0,
messages are streams of data which may be read in from files or
filehandles.  You can think of the \fBMIME::Entity\fR returned by the
\&\fBMIME::Parser\fR as representing the full message.
.Sh "Content types"
.IX Subsection "Content types"
This indicates what kind of data is in the \s-1MIME\s0 message, usually
as \fImajortype/minortype\fR.  The standard major types are shown below.
A more-comprehensive listing may be found in \s-1RFC\-2046\s0.
.IP "application" 4
.IX Item "application"
Data which does not fit in any of the other categories, particularly
data to be processed by some type of application program.
\&\f(CW\*(C`application/octet\-stream\*(C'\fR, \f(CW\*(C`application/gzip\*(C'\fR, \f(CW\*(C`application/postscript\*(C'\fR...
.IP "audio" 4
.IX Item "audio"
Audio data.
\&\f(CW\*(C`audio/basic\*(C'\fR...
.IP "image" 4
.IX Item "image"
Graphics data.
\&\f(CW\*(C`image/gif\*(C'\fR, \f(CW\*(C`image/jpeg\*(C'\fR...
.IP "message" 4
.IX Item "message"
A message, usually another mail or \s-1MIME\s0 message.
\&\f(CW\*(C`message/rfc822\*(C'\fR...
.IP "multipart" 4
.IX Item "multipart"
A message containing other messages.
\&\f(CW\*(C`multipart/mixed\*(C'\fR, \f(CW\*(C`multipart/alternative\*(C'\fR...
.IP "text" 4
.IX Item "text"
Textual data, meant for humans to read.
\&\f(CW\*(C`text/plain\*(C'\fR, \f(CW\*(C`text/html\*(C'\fR...
.IP "video" 4
.IX Item "video"
Video or video+audio data.
\&\f(CW\*(C`video/mpeg\*(C'\fR...
.Sh "Content transfer encodings"
.IX Subsection "Content transfer encodings"
This is how the message body is packaged up for safe transit.
There are the 5 major \s-1MIME\s0 encodings.
A more-comprehensive listing may be found in \s-1RFC\-2045\s0.
.IP "7bit" 4
.IX Item "7bit"
No encoding is done at all.  This label simply asserts that no
8\-bit characters are present, and that lines do not exceed 1000 characters
in length (including the \s-1CRLF\s0).
.IP "8bit" 4
.IX Item "8bit"
No encoding is done at all.  This label simply asserts that the message
might contain 8\-bit characters, and that lines do not exceed 1000 characters
in length (including the \s-1CRLF\s0).
.IP "binary" 4
.IX Item "binary"
No encoding is done at all.  This label simply asserts that the message
might contain 8\-bit characters, and that lines may exceed 1000 characters
in length.  Such messages are the \fIleast\fR likely to get through mail
gateways.
.IP "base64" 4
.IX Item "base64"
A standard encoding, which maps arbitrary binary data to the 7bit domain.
Like \*(L"uuencode\*(R", but very well\-defined.  This is how you should send
essentially binary information (tar files, GIFs, JPEGs, etc.).
.IP "quoted-printable" 4
.IX Item "quoted-printable"
A standard encoding, which maps arbitrary line-oriented data to the
7bit domain.  Useful for encoding messages which are textual in
nature, yet which contain non-ASCII characters (e.g., Latin\-1,
Latin\-2, or any other 8\-bit alphabet).
.SH "TERMS AND CONDITIONS"
.IX Header "TERMS AND CONDITIONS"
Eryq (\fIeryq@zeegee.com\fR), ZeeGee Software Inc (\fIhttp://www.zeegee.com\fR).
David F. Skoll (dfs@roaringpenguin.com) http://www.roaringpenguin.com
.PP
Copyright (c) 1998, 1999 by ZeeGee Software Inc (www.zeegee.com).
Copyright (c) 2004 by Roaring Penguin Software Inc (www.roaringpenguin.com)
.PP
All rights reserved.  This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
See the \s-1COPYING\s0 file in the distribution for details.
.SH "SUPPORT"
.IX Header "SUPPORT"
Please email me directly with questions/problems (see \s-1AUTHOR\s0 below).
.PP
If you want to be placed on an email distribution list (not a mailing list!)
for MIME\-tools, and receive bug reports, patches, and updates as to when new
MIME-tools releases are planned, just email me and say so.  If your project
is using MIME\-tools, it might not be a bad idea to find out about those
bugs \fIbefore\fR they become problems...
.SH "VERSION"
.IX Header "VERSION"
$Revision: 1.11 $
.SH "CHANGE LOG"
.IX Header "CHANGE LOG"
.IP "Version 5.411" 4
.IX Item "Version 5.411"
\&\fBRegenerated docs.\fR
Bug in \s-1HTML\s0 docs, now all fixed.
.IP "Version 5.410   (2000/11/23)" 4
.IX Item "Version 5.410   (2000/11/23)"
\&\fBBetter detection of evil filenames.\fR
Now we check for filenames which are suspiciously long,
and a new \fIMIME::Filer::exorcise_filename()\fR method is used
to try and remove the evil.
\&\fIThanks to Jason Haar for the suggestion.\fR
.IP "Version 5.409   (2000/11/12)" 4
.IX Item "Version 5.409   (2000/11/12)"
\&\fBAdded functionality to MIME::WordDecoder,\fR 
including support for plain \s-1US\-ASCII\s0. 
.Sp
\&\fB\f(BIMIME::Tools::tmpopen()\fB\fR made more flexible.
You can now override the tmpfile-opening behavior.
.IP "Version 5.408   (2000/11/10)" 4
.IX Item "Version 5.408   (2000/11/10)"
\&\fBAdded new Beta \f(BIunmime()\fB mechanism.\fR
See MIME::WordDecoder for full details.
Also see \*(L"Understand how international characters are represented\*(R".
.IP "Version 5.405   (2000/11/05)" 4
.IX Item "Version 5.405   (2000/11/05)"
\&\fBAdded a \f(BIpurge()\fB that does what people want it to.\fR
Now, when a parse finishes and you want to delete everything that
was created by it, you can invoke \f(CW\*(C`purge()\*(C'\fR on the parser's filer.
All files/directories created during the last parse should vanish.
\&\fIThanks to everyone who complained about MIME::Entity::purge.\fR
.IP "Version 5.404   (2000/11/04)" 4
.IX Item "Version 5.404   (2000/11/04)"
\&\fBAdded new automatic MIME-decoding of attachment filenames with
encoded (non\-ASCII) characters.\fR
Hopefully this will do more good than harm.  
The use of \fIMIME::Parser::decode_headers()\fR and \fIMIME::Head::decode()\fR 
has been deprecated in favor of the new MIME::Words \*(L"unmime\*(R" mechanism.  
Please see \*(L"unmime\*(R" in MIME::Words.
.Sp
\&\fBAdded tolerance for unquoted =?...?= in param values.\fR
This is in violation of the RFCs, but then, so are some MUAs.
\&\fIThanks to desti for bringing this to my attention.\fR
.Sp
\&\fBFixed supposedly-bad B\-encoding.\fR
\&\fIThanks to Otto Frost for bringing this to my attention.\fR
.IP "Version 5.316   (2000/09/21)" 4
.IX Item "Version 5.316   (2000/09/21)"
\&\fBIncreased tolerance in MIME::Parser.\fR
Now will ignore bogus \s-1POP3\s0 \*(L"+OK\*(R" line before header, as well as bogus
mailbox \*(L"From \*(R" line (both with warnings). 
\&\fIThanks to Antony OSullivan (ajos1) for suggesting this feature.\fR
.Sp
\&\fBFixed small epilogue-related bug in \f(BIMIME::Entity::print_body()\fB.\fR
Now it only outputs a final newline if the epilogue does not end
in one already.  Support for checking the preamble/epilogue in 
regression tests was also added.
\&\fIThanks to Lars Hecking for bringing this issue up.\fR
.Sp
\&\fBUpdated documentation.\fR
All module manual pages should now direct readers to the main 
MIME-tools manual page.
.IP "Version 5.314   (2000/09/06)" 4
.IX Item "Version 5.314   (2000/09/06)"
Fixed Makefile.PL to have less-restrictive requirement
for File::Spec (0.6).
.IP "Version 5.313   (2000/09/05)" 4
.IX Item "Version 5.313   (2000/09/05)"
\&\fBFixed nasty bug with evil filenames.\fR
Certain evil filenames were getting replaced by internally-generated
filenames which were just as evil... ouch!  If your parser occasionally
throws a fatal exception with a \*(L"write\-open\*(R" error message, then
you have this bug.
\&\fIThanks to Julian Field and Antony OSullivan (ajos1)
for delivering the evidence!\fR 
.Sp
.Vb 3
\&       Beware the doctor
\&          who cures seasonal head cold
\&       by killing patient
.Ve
.Sp
\&\fBImproved naming of extracted files.\fR
If a filename is regarded as evil, we guess that it might just
be because of part information, and attempt to find and use the
final path element.  
.Sp
\&\fBSimplified message logging and made it more consistent.\fR
For details, see \*(L"Message\-logging\*(R".
.IP "Version 5.312   (2000/09/03)" 4
.IX Item "Version 5.312   (2000/09/03)"
\&\fBFixed a Perl 5.7 \f(BIselect()\fB incompatibility\fR 
which caused \*(L"make test\*(R" to fail.  
\&\fIThanks to Nick Ing-Simmons for the patch.\fR
.IP "Version 5.311   (2000/08/16)" 4
.IX Item "Version 5.311   (2000/08/16)"
\&\fBBlind fix for Win32 uudecoding bug.\fR
A missing binmode seems to be the culprit here; let's see if this fixes it.
\&\fIThanks to ajos1 for finding the culprit!\fR
.Sp
.Vb 3
\&       The carriage return
\&          thumbs its nose at me, laughing:
\&       DOS I/O *still* sucks
.Ve
.IP "Version 5.310   (2000/08/15)" 4
.IX Item "Version 5.310   (2000/08/15)"
\&\fBFixed a bug in the back-compat \f(BIoutput_prefix()\fB method of MIME::Parser.\fR
Basically, output prefixes were not being set through this mechanism.
\&\fIThanks to ajos1 for the alert.\fR
.Sp
.Vb 3
\&        shift @_,                               ### "shift at-underscore"
\&           or @_ will have
\&        bogus "self" object
.Ve
.Sp
\&\fBAdded some backcompat methods,\fR like \fIparse_FH()\fR.
\&\fIThanks (and apologies) to Alain Kotoujansky.\fR
.Sp
\&\fBAdded filenames-with-spaces support to MIME::Decoder::UU.\fR
\&\fIThanks to Richard Pun for the suggestion.\fR
.IP "Version 5.305   (2000/07/20)" 4
.IX Item "Version 5.305   (2000/07/20)"
\&\fBAdded MIME::Entity::parts_DFS\fR as convenient way to \*(L"get all parts\*(R".
\&\fIThanks to Xavier Armengou for suggesting this method.\fR
.Sp
Removed the Alpha notice.
Still a few features to tweak, but those will be minor.
.IP "Version 5.303   (2000/07/07)" 4
.IX Item "Version 5.303   (2000/07/07)"
\&\fBFixed output bugs in new Filers\fR.
Scads of them: bad handling of filename collisions, bad implementation
of \fIoutput_under()\fR, bad linking to results, \s-1POD\s0 errors, you name it.
If this had gone to \s-1CPAN\s0, I'd have issued a factory recall. \f(CW\*(C`:\-(\*(C'\fR
.Sp
.Vb 3
\&       Errors, like beetles,
\&          Multiply ferociously
\&       In the small hours
.Ve
.IP "Version 5.301   (2000/07/06)" 4
.IX Item "Version 5.301   (2000/07/06)"
\&\fB\s-1READ\s0 \s-1ME\s0 \s-1BEFORE\s0 \s-1UPGRADING\s0 \s-1PAST\s0 \s-1THIS\s0 \s-1POINT\s0!\fR
\&\fBNew MIME::Parser::Filer class \*(-- not fully backwards\-compatible.\fR
In response to demand for more-comprehensive file-output strategies,
I have decided that the best thing to do is to split all the
file-output logic (\fIoutput_path()\fR, \fIevil_filename()\fR, etc.)
into its own separate class, inheriting from the new
MIME::Parser::Filer class.
If you \fIoverride\fR any of the following in a MIME::Parser subclass,
you will need to change your code accordingly:
.Sp
.Vb 6
\&        evil_filename
\&        output_dir
\&        output_filename
\&        output_path
\&        output_prefix
\&        output_under
.Ve
.Sp
My sincere apologies for any inconvenience this will cause, but
it's ultimately for the best, and is quite likely the last structural
change to 5.x.
\&\fIThanks to Tyson Ackland for all the ideas.\fR
Incidentally, the new code also fixes a bug where identically-named
files in the same message could clobber each other.
.Sp
.Vb 3
\&       A message arrives:
\&           "Here are three files, all named 'Foo'"
\&       Only one survives.  :-(
.Ve
.Sp
\&\fBFixed bug in MIME::Words header decoding.\fR
Underscores were not being handled properly.
\&\fIThanks to Dominique Unruh and Doru Petrescu,\fR who independently
submitted the same fix within 2 hours of each other, after this
bug has lain dormant for months:
.Sp
.Vb 3
\&       Two users, same bug,
\&          same patch -- mere hours apart:
\&       Truly, life is odd.
.Ve
.Sp
\&\fBRemoved escaping of underscore in regexps.\fR
Escaping the underscore (\e_) in regexps was sloppy and wrong
(escaped metacharacters may include anything in \ew), and the newest
Perls warn about it.
\&\fIThanks to David Dyck for bringing this to my attention.\fR
.Sp
.Vb 3
\&       What, then, is a word?
\&          Some letters, digits, and, yes:
\&       Underscores as well
.Ve
.Sp
\&\fBAdded Force option to MIME::Entity's make_multipart\fR.
\&\fIThanks to Bob Glickstein for suggesting this.\fR
.Sp
\&\fBNumerous fixlets to example code.\fR
\&\fIThanks to Doru Petrescu for these.\fR
.Sp
\&\fBAdded \s-1REQUIREMENTS\s0 section in docs.\fR
Long\-overdue.  \fIThanks to Ingo Schmiegel for motivating this.\fR
.IP "Version 5.211   (2000/06/24)" 4
.IX Item "Version 5.211   (2000/06/24)"
\&\fBFixed auto-uudecode bug.\fR
Parser was failing with \*(L"part did not end with expected boundary\*(R" error
when uuencoded entity was a \fIsinglepart\fR message (ironically,
uuencoded parts of multiparts worked fine).
\&\fIThanks to Michael Mohlere for testing uudecode and finding this.\fR
.Sp
.Vb 3
\&       The hurrying bee
\&          Flies far for nectar, missing
\&       The nearest flowers
.Ve
.Sp
.Vb 3
\&       Say ten thousand times:
\&          Complex cases may succeed
\&       Where simple ones fail
.Ve
.Sp
\&\fBParse errors now generate warnings.\fR
Parser errors now cause \fIwarn()\fRs to be generated if they are
not turned into fatal exceptions.  This might be a little redundant,
seeing as they are available in the \*(L"results\*(R", but parser-warnings
already cause \fIwarn()\fRs.  I can always put in a \*(L"quiet\*(R" switch if
people complain.
.Sp
\&\fBMiscellaneous cleanup.\fR
Documentation of MIME::Parser improved slightly, and a redundant
warning was removed.
.IP "Version 5.210   (2000/06/20)" 4
.IX Item "Version 5.210   (2000/06/20)"
\&\fBChange in \*(L"evil\*(R" filename.\fR
Made MIME::Parser's evil_filename stricter by having it reject
\&\*(L"path\*(R" characters: any of '/' '\e' ':' '[' ']'.
.Sp
.Vb 3
\&       Just as with beauty
\&          The eye of the beholder
\&       Is where "evil" lives.
.Ve
.Sp
\&\fBDocumentation fixes.\fR
Corrected a number of docs in MIME::Entity which were obsoleted
in the transition from 4.x to 5.x.
\&\fIThanks to Michael Fischer for pointing these out.\fR
For this one, a special 5\-5\-5\-5 Haiku of anagrams:
.Sp
.Vb 4
\&       Documentation
\&          in mutant code, O!
\&       Edit -- no, CUT! [moan]
\&          I meant to un-doc...
.Ve
.Sp
\&\fBIO::Lines usage bug fixed.\fR
MIME::Entity was missing a \*(L"use IO::Lines\*(R", which caused an
exception when you tried to use the \fIbody()\fR method of MIME::Entity.
\&\fIThanks to Hideyo Imazu and Michael Fischer for pointing this out.\fR
.Sp
.Vb 3
\&       Bareword looks fine, but
\&          Perl cries: "Whoa there... IO::Lines?
\&       Never heard of it."
.Ve
.IP "Version 5.209   (2000/06/10)" 4
.IX Item "Version 5.209   (2000/06/10)"
\&\fBAutodetection of uuencode.\fR
You can now tell the parser to hunt for uuencode inside what should
be text parts.
See \fIextract_uuencode()\fR for full details.
\&\fBBeware:\fR this is largely untested at the moment.
\&\fISpecial thanks to Michael Mohlere at \s-1ADJE\s0 Webmail, who was the
  first \*(-- and most-insistent \*(-- user to request this feature.\fR
.Sp
\&\fBFaster parsing.\fR
Sped up the MIME::Decoder::NBit decoder quite a bit by using a variant
of the chunking trick I used for MIME::Decoder::Base64.  I suspect
that the same trick (reading a big chunk plus the next line to get a
big block of lines) would work with MIME::Decoder::QuotedPrint, but I
don't have the time or resources to check that right now (tested
contributions would be welcome).  NBit encoding is more-conveniently
done line-by-line for now, because individual line lengths must be
checked.
.Sp
\&\fBBetter use of core.\fR
MIME::Body::InCore is now used when you \fIbuild()\fR an entity with
the Data parameter, instead of MIME::Body::Scalar.
.Sp
\&\fBMore documentation\fR on toolkit configuration.
.IP "Version 5.207   (2000/06/09)" 4
.IX Item "Version 5.207   (2000/06/09)"
\&\fBFixed \f(BIwhine()\fB bug in MIME::Parser\fR where the \*(L"warning\*(R" method
\&\fIwhine()\fR was called as a static function instead of invoked as an
instance method.
\&\fIThanks to Todd A. Bradfute for reporting this.\fR
.Sp
.Vb 3
\&       A simple warning
\&          Invokes method as function:
\&       "Warning" makes us die
.Ve
.IP "Version 5.206   (2000/06/08)" 4
.IX Item "Version 5.206   (2000/06/08)"
Ahem.  Cough cough:
.Sp
.Vb 3
\&       Way too many bugs
\&          Thus, a self-imposed penance:
\&       Write haiku for each
.Ve
.Sp
\&\fBFixed bug in MIME::Parser:\fR the reader was not handling the odd
(but legal) case where a multipart boundary is followed by linear
whitespace.
\&\fIThanks to Jon Agnew for reporting this with the \s-1RFC\s0 citation.\fR
.Sp
.Vb 3
\&       Legal message fails
\&          And 'round the globe, thousands cry:
\&       READ THE RFC
.Ve
.Sp
Empty preambles are now handled properly by MIME::Entity when
printing: there is now no space between the header-terminator
and the initial boundary.
\&\fIThanks to \*(L"sen_ml\*(R" for suggesting this.\fR
.Sp
.Vb 3
\&       Nature hates vacuum
\&          But please refrain from tossing
\&       Newlines in the void
.Ve
.Sp
Started using Benchmark for benchmarking.
.IP "Version 5.205   (2000/06/06)" 4
.IX Item "Version 5.205   (2000/06/06)"
Added terminating newline to all parser messages, and fixed
small parser bug that was dropping parts when errors occurred
in certain places.
.IP "Version 5.203   (2000/06/05)" 4
.IX Item "Version 5.203   (2000/06/05)"
Brand new parser based on new (private) MIME::Parser::Reader and
(public) MIME::Parser::Results.  Fast and yet simple and very tolerant
of bad \s-1MIME\s0 when desired.  Message reporting needs some muzzling.
.Sp
MIME::Parser now has \fIignore_errors()\fR set true by default.
.IP "Version 5.116   (2000/05/26)" 4
.IX Item "Version 5.116   (2000/05/26)"
Removed Tmpfile.t test, which was causing a bogus failure in
\&\*(L"make test\*(R".  Now we require 5.004 for MIME::Parser anyway,
so we don't need it.  \fIThanks to Jonathan Cohn for reporting this.\fR
.IP "Version 5.115   (2000/05/24)" 4
.IX Item "Version 5.115   (2000/05/24)"
Fixed Ref.t bug, and documented how to remove parts from a MIME::Entity.
.IP "Version 5.114   (2000/05/23)" 4
.IX Item "Version 5.114   (2000/05/23)"
Entity now uses MIME::Lite\-style default suggested encoding.
.Sp
More regression test have been added, and the \*(L"Size\*(R" tests in
Ref.t are skipped for text document (due to \s-1CRLF\s0 differences
between platforms).
.IP "Version 5.113   (2000/05/21)" 4
.IX Item "Version 5.113   (2000/05/21)"
\&\fBMajor speed and structural improvements to the parser.\fR
    \fIMajor, \s-1MAJOR\s0 thanks to Noel Burton\-Krahn, Jeremy Gilbert,
      and Doru Petrescu for all the patches, benchmarking,
      and Beta\-testing!\fR
.Sp
\&\fBConvenient new one-directory-per-message parsing mechanism.\fR
    Now through \f(CW\*(C`MIME::Parser\*(C'\fR method \f(CW\*(C`output_under()\*(C'\fR,
    you can tell the parser that you want it to create
    a unique directory for each message parsed, to hold the
    resulting parts.
.Sp
\&\fBElimination of $', $` and $&.\fR
    Wow... I still can't believe I missed this.  D'\s-1OH\s0!
    \fIThanks to Noel Burton-Krahn for all his patches.\fR
.Sp
\&\fBParser is more tolerant of weird \s-1EOL\s0 termination.\fR
    Some mailagents are can terminate lines with \*(L"\er\er\en\*(R".
    We're okay with that now when we extract the header.
    \fIThanks to Joao Fonseca for pointing this out.\fR
.Sp
\&\fBParser is tolerant of \*(L"From \*(R" lines in headers.\fR
    \fIThanks to Joachim Wieland, Anthony Hinsinger, Marius Stan,
      and numerous others.\fR
.Sp
\&\fBParser catches syntax errors in headers.\fR
    \fIThanks to Russell P. Sutherland for catching this.\fR
.Sp
\&\fBParser no longer warns when subtype is undefined.\fR
    \fIThanks to Eric-Olivier Le Bigot for his fix.\fR
.Sp
\&\fBBetter integration with Mail::Internet.\fR
    For example, \fIsmtpsend()\fR should work fine.
    \fIThanks to Michael Fischer and others for the patch.\fR
.Sp
\&\fBMiscellaneous cleanup.\fR
    \fIThanks to Marcus Brinkmann for additional helpful input.\fR
    \fIThanks to Klaus Seidenfaden for good feedback on 5.x Alpha!\fR
.IP "Version 4.123   (1999/05/12)" 4
.IX Item "Version 4.123   (1999/05/12)"
Cleaned up some of the tests for non-Unix \s-1OS\s0'es.
Will require a few iterations, no doubt.
.IP "Version 4.122   (1999/02/09)" 4
.IX Item "Version 4.122   (1999/02/09)"
\&\fBResolved CORE::open warnings for 5.005.\fR
        \fIThanks to several folks for this bug report.\fR
.IP "Version 4.121   (1998/06/03)" 4
.IX Item "Version 4.121   (1998/06/03)"
\&\fBFixed MIME::Words infinite recursion.\fR
        \fIThanks to several folks for this bug report.\fR
.IP "Version 4.117   (1998/05/01)" 4
.IX Item "Version 4.117   (1998/05/01)"
\&\fBNicer MIME::Entity::build.\fR
        No longer outputs warnings with undefined Filename, and now
        accepts Charset as well.
	\fIThanks to Jason Tibbits \s-1III\s0 for the inspirational patch.\fR
.Sp
\&\fBDocumentation fixes.\fR
        Hopefully we've seen the last of the pod2man warnings...
.Sp
\&\fBBetter test logging.\fR
        Now uses ExtUtils::TBone.
.IP "Version 4.116   (1998/02/14)" 4
.IX Item "Version 4.116   (1998/02/14)"
\&\fBBug fix:\fR
        MIME::Head and MIME::Entity were not downcasing the
        content-type as they claimed.  This has now been fixed.
	\fIThanks to Rodrigo de Almeida Siqueira for finding this.\fR
.IP "Version 4.114   (1998/02/12)" 4
.IX Item "Version 4.114   (1998/02/12)"
\&\fBGzip64\-encoding has been improved, and turned off as a default,\fR
	since it depends on having gzip installed.
        See MIME::Decoder::Gzip64 if you want to activate it in your app.
	You can	now set up the gzip/gunzip commands to use, as well.
	\fIThanks to Paul J. Schinder for finding this bug.\fR
.IP "Version 4.113   (1998/01/20)" 4
.IX Item "Version 4.113   (1998/01/20)"
\&\fBBug fix:\fR
        MIME::ParserBase was accidentally folding newlines in header fields.
	\fIThanks to Jason L. Tibbitts \s-1III\s0 for spotting this.\fR
.IP "Version 4.112   (1998/01/17)" 4
.IX Item "Version 4.112   (1998/01/17)"
\&\fBMIME::Entity::print_body now recurses\fR when printing multipart
	entities, and prints \*(L"everything following the header.\*(R"  This is more
	likely what people expect to happen.  \s-1PLEASE\s0 read the
        \*(L"two body problem\*(R" section of MIME::Entity's docs.
.IP "Version 4.111   (1998/01/14)" 4
.IX Item "Version 4.111   (1998/01/14)"
Clean build/test on Win95 using 5.004.  Whew.
.IP "Version 4.110   (1998/01/11)" 4
.IX Item "Version 4.110   (1998/01/11)"
\&\fBAdded\fR \fImake_multipart()\fR and \fImake_singlepart()\fR in MIME::Entity.
.Sp
\&\fBImproved\fR handling/saving of preamble/epilogue.
.IP "Version 4.109   (1998/01/10)" 4
.IX Item "Version 4.109   (1998/01/10)"
.RS 4
.PD 0
.IP "Overall" 4
.IX Item "Overall"
.PD
\&\fBMajor version shift to 4.x\fR
	accompanies numerous structural changes, and
	the deletion of some long-deprecated code.  Many apologies to those
	who are inconvenienced by the upgrade.
.Sp
\&\fB\s-1MIME::IO\s0 deprecated.\fR
	You'll see IO::Scalar, IO::ScalarArray, and IO::Wrap
	to make this toolkit work.
.Sp
\&\fBMIME::Entity deep code.\fR
	You can now deep-copy \s-1MIME\s0 entities (except for on-disk data files).
.IP "Encoding/decoding" 4
.IX Item "Encoding/decoding"
\&\fBMIME::Latin1 deprecated, and 8\-to\-7 mapping removed.\fR
	Really, MIME::Latin1 was one of my more dumber ideas.
	It's still there, but if you want to map 8\-bit characters to
	Latin1 \s-1ASCII\s0 approximations when 7bit encoding, you'll have to
	request it explicitly.	\fIBut use quoted-printable for your 8\-bit
	documents; that's what it's there for!\fR
.Sp
\&\fB7bit and 8bit \*(L"encoders\*(R" no longer encode.\fR
	As per \s-1RFC\-2045\s0, these just do a pass-through of the data,
	but they'll warn you if you send bad data through.
.Sp
\&\fBMIME::Entity suggests encoding.\fR
	Now you can ask MIME::Entity's \fIbuild()\fR method to \*(L"suggest\*(R"
	a legal encoding based on the body and the content\-type.
	No more guesswork!  See the \*(L"mimesend\*(R" example.
.Sp
\&\fBNew module structure for MIME::Decoder classes.\fR
	It should be easier for you to see what's happening.
.Sp
\&\fBNew \s-1MIME\s0 decoders!\fR
	Support added for decoding \f(CW\*(C`x\-uuencode\*(C'\fR, and for
	decoding/encoding \f(CW\*(C`x\-gzip64\*(C'\fR.  You'll need \*(L"gzip\*(R" to make
	the latter work.
.Sp
\&\fBQuoted-printable back on track... and then some.\fR
	The 'quoted\-printable' decoder now uses the newest MIME::QuotedPrint,
	and amends its output with guideline #8 from \s-1RFC2049\s0 (From/.).
	\fIThanks to Denis N. Antonioli for suggesting this.\fR
.IP "Parsing" 4
.IX Item "Parsing"
\&\fBPreamble and epilogue are now saved.\fR
	These are saved in the parsed entities as simple
	string\-arrays, and are output by \fIprint()\fR if there.
	\fIThanks to Jason L. Tibbitts for suggesting this.\fR
.Sp
\&\fBThe \*(L"multipart/digest\*(R" semantics are now preserved.\fR
	Parts of digest messages have their \fImime_type()\fR defaulted
	to \*(L"message/rfc822\*(R" instead of \*(L"text/plain\*(R", as per the \s-1RFC\s0.
	\fIThanks to Carsten Heyl for suggesting this.\fR
.IP "Output" 4
.IX Item "Output"
\&\fBWell\-defined, more-complete \f(BIprint()\fB output.\fR
	When printing an entity, the output is now well-defined if the
	entity came from a MIME::Parser, even if using parse_nested_messages.
	See MIME::Entity for details.
.Sp
\&\fBYou can prevent recommended filenames from being output.\fR
	This possible security hole has been plugged; when building \s-1MIME\s0
	entities, you can specify a body path but suppress the filename
	in the header.
	\fIThanks to Jason L. Tibbitts for suggesting this.\fR
.IP "Bug fixes" 4
.IX Item "Bug fixes"
\&\fBWin32 installations should work.\fR
	The \fIbinmode()\fR calls should work fine on Win32 now.
	\fIThanks to numerous folks for their patches.\fR
.Sp
\&\fB\f(BIMIME::Head::add()\fB\fR now no longer downcases its argument.
	\fIThanks to Brandon Browning & Jason L. Tibbitts for finding this bug.\fR
.RE
.RS 4
.RE
.IP "Version 3.204" 4
.IX Item "Version 3.204"
\&\fBBug in MIME::Head::original_text fixed.\fR
	Well, it took a while, but another bug surfaced from my transition
	from 1.x to 2.x.  This method was, quite idiotically, sorting the
	header fields.
	\fIThanks, as usual, to Andreas Koenig for spotting this one.\fR
.Sp
\&\fBMIME::ParserBase no longer defaults to RFC\-1522\-decoding headers.\fR
	The documentation correctly stated that the default setting was
	to \fInot\fR RFC\-1522\-decode the headers.  The code, on the other hand,
	was init'ing this parser option in the \*(L"on\*(R" position.
	This has been fixed.
.Sp
\&\fBMIME::ParserBase::parse_nested_messages reexamined.\fR
	If you use this feature, please re-read the documentation.
	It explains a little more precisely what the ramifications are.
.Sp
\&\fBMIME::Entity tries harder to ensure \s-1MIME\s0 compliance.\fR
	It is now a fatal error to use certain bad combinations of content
	type and encoding when \*(L"building\*(R", or to attempt to \*(L"attach\*(R" to
	anything that is not a multipart document.  My apologies if this
	inconveniences anyone, but it was just too darn easy before for folks
	to create bad \s-1MIME\s0, and gosh darn it, good libraries should at least
	\fItry\fR to protect you from mistakes.
.Sp
\&\fBThe \*(L"make\*(R" now halts if you don't have the right stuff,\fR
	provided your MakeMaker supports \s-1PREREQ_PM\s0.  See \*(L"\s-1REQUIREMENTS\s0\*(R"
	for what you need to install this package.  I still provide
	old courtesy copies of the \s-1MIME::\s0 decoding modules.
\&\fIThanks to Hugo van der Sanden for suggesting this.\fR
.Sp
\&\fBThe \*(L"make test\*(R" is far less chatty.\fR
	Okay, okay, \s-1STDERR\s0 is evil.  Now a \f(CW"make test"\fR will just give you
	the important stuff: do a \f(CW"make test TEST_VERBOSE=1"\fR if you want
	the gory details (advisable if sending me a bug report).
\&\fIThanks to Andreas Koenig for suggesting this.\fR
.IP "Version 3.203" 4
.IX Item "Version 3.203"
\&\fBNo, there haven't been any major changes between 2.x and 3.x.\fR
	The major-version increase was from a few more tweaks to get \f(CW$VERSION\fR
	to be calculated better and more efficiently (I had been using \s-1RCS\s0
	version numbers in a way which created problems for users of \s-1CPAN::\s0).
	After a couple of false starts, all modules have been upgraded to \s-1RCS\s0
	3.201 or higher.
.Sp
\&\fBYou can now parse a \s-1MIME\s0 message from a scalar,\fR
	an array\-of\-scalars, or any MIME::IO\-compliant object (including \s-1IO::\s0
	objects.)  Take a look at \fIparse_data()\fR in MIME::ParserBase.  The
	parser code has been modified to support the \s-1MIME::IO\s0 interface.
	\fIThanks to fellow Chicagoan Tim Pierce (and countless others)
	for asking.\fR
.Sp
\&\fBMore sensible toolkit configuration.\fR
	A new \fIconfig()\fR method in MIME::ToolUtils makes a lot of toolkit-wide
	configuration cleaner.  Your old calls will still work, but with
	deprecation warnings.
.Sp
\&\fBYou can now sign messages\fR just like in Mail::Internet.
	See MIME::Entity for the interface.
.Sp
\&\fBYou can now remove signatures from messages\fR just like in Mail::Internet.
	See MIME::Entity for the interface.
.Sp
\&\fBYou can now compute/strip content lengths\fR
	and other non-standard \s-1MIME\s0 fields.
	See \fIsync_headers()\fR in MIME::Entity.
	\fIThanks to Tim Pierce for bringing the basic problem to my attention.\fR
.Sp
\&\fBMany warnings are now silent unless $^W is true.\fR
	That means unless you run your Perl with \f(CW\*(C`\-w\*(C'\fR, you won't see
        deprecation warnings, non-fatal-error messages, etc.
        But of course you run with \f(CW\*(C`\-w\*(C'\fR, so this doesn't affect you.  \f(CW\*(C`:\-)\*(C'\fR
.Sp
\&\fBCompleted the 7\-bit encodings in MIME::Latin1.\fR
	We hadn't had complete coverage in the conversion from 8\- to 7\-bit;
	now we do. \fIThanks to Rolf Nelson for bringing this to my attention.\fR
.Sp
\&\fBFixed broken \f(BIparse_two()\fB in MIME::ParserBase.\fR
	\s-1BTW\s0, if your code worked with the \*(L"broken\*(R" code, it should \fIstill\fR
	work.
	\fIThanks again to Tim Pierce for bringing this to my attention.\fR
.IP "Version 2.14" 4
.IX Item "Version 2.14"
Just a few bug fixes to improve compatibility with Mail-Tools 1.08,
and with the upcoming Perl 5.004 release.
\&\fIThanks to Jason L. Tibbitts \s-1III\s0 for reporting the problems so quickly.\fR
.IP "Version 2.13" 4
.IX Item "Version 2.13"
.RS 4
.PD 0
.IP "New features" 4
.IX Item "New features"
.PD
\&\fBAdded RFC\-1522\-style decoding of encoded header fields.\fR
	Header decoding can now be done automatically during parsing via the
	new \f(CW\*(C`decode()\*(C'\fR method in MIME::Head... just tell your parser
	object that you want to \f(CW\*(C`decode_headers()\*(C'\fR.
	\fIThanks to Kent Boortz for providing the idea, and the baseline
	RFC\-1522\-decoding code!\fR
.Sp
\&\fBBuilding \s-1MIME\s0 messages is even easier.\fR
	Now, when you use MIME::Entity's \f(CW\*(C`build()\*(C'\fR or \f(CW\*(C`attach()\*(C'\fR,
	you can also supply individual
	mail headers to set (e.g., \f(CW\*(C`\-Subject\*(C'\fR, \f(CW\*(C`\-From\*(C'\fR, \f(CW\*(C`\-To\*(C'\fR).
.Sp
Added \f(CW\*(C`Disposition\*(C'\fR to MIME::Entity's \f(CW\*(C`build()\*(C'\fR method.
	\fIThanks to Kurt Freytag for suggesting this feature.\fR
.Sp
An \f(CW\*(C`X\-Mailer\*(C'\fR header is now output
	by default in all MIME-Entity-prepared messages,
	so any bad \s-1MIME\s0 we generate can be traced back to this toolkit.
.Sp
Added \f(CW\*(C`purge()\*(C'\fR method to MIME::Entity for deleteing leftover files.
	\fIThanks to Jason L. Tibbitts \s-1III\s0 for suggesting this feature.\fR
.Sp
Added \f(CW\*(C`seek()\*(C'\fR and \f(CW\*(C`tell()\*(C'\fR methods to built-in \s-1MIME::IO\s0 classes.
	Only guaranteed to work when reading!
	\fIThanks to Jason L. Tibbitts \s-1III\s0 for suggesting this feature.\fR
.Sp
When parsing a multipart message with apparently no boundaries,
	the error message you get has been improved.
	\fIThanks to Andreas Koenig for suggesting this.\fR
.IP "Bug fixes" 4
.IX Item "Bug fixes"
\&\fBPatched over a Perl 5.002 (and maybe earlier and later) bug involving
FileHandle::new_tmpfile.\fR  It seems that the underlying filehandles
were not being closed when the FileHandle objects went out of scope!
There is now an internal routine that creates true FileHandle
objects for anonymous temp files.
\&\fIThanks to Dragomir R. Radev and Zyx for reporting the weird behavior
that led to the discovery of this bug.\fR
.Sp
MIME::Entity's \f(CW\*(C`build()\*(C'\fR method now warns you if you give it an illegal
boundary string, and substitutes one of its own.
.Sp
MIME::Entity's \f(CW\*(C`build()\*(C'\fR method now generates safer, fully\-RFC\-1521\-compliant
boundary strings.
.Sp
Bug in MIME::Decoder's \f(CW\*(C`install()\*(C'\fR method was fixed.
\&\fIThanks to Rolf Nelson and Nickolay Saukh for finding this.\fR
.Sp
Changed FileHandle::new_tmpfile to FileHandle\->new_tmpfile, so some
Perl installations will be happier.
\&\fIThanks to Larry W. Virden for finding this bug.\fR
.Sp
Gave \f(CW\*(C`=over\*(C'\fR an arg of 4 in all PODs.
\&\fIThanks to Larry W. Virden for pointing out the problems of bare =over's\fR
.RE
.RS 4
.RE
.IP "Version 2.04" 4
.IX Item "Version 2.04"
\&\fBA bug in MIME::Entity's output method was corrected.\fR
MIME::Entity::print now outputs everything to the desired filehandle
explicitly.
\&\fIThanks to Jake Morrison for pointing out the incompatibility
with Mail::Header.\fR
.IP "Version 2.03" 4
.IX Item "Version 2.03"
\&\fBFixed bug in autogenerated filenames\fR resulting from transposed \*(L"if\*(R"
statement in MIME::Parser, removing spurious printing of header as well.
(Annoyingly, this bug is invisible if debugging is turned on!)
\&\fIThanks to Andreas Koenig for bringing this to my attention.\fR
.Sp
Fixed bug in \fIMIME::Entity::body()\fR where it was using the bodyhandle
completely incorrectly.
\&\fIThanks to Joel Noble for bringing this to my attention.\fR
.Sp
Fixed MIME::Head::VERSION so \s-1CPAN::\s0 is happier.
\&\fIThanks to Larry Virden for bringing this to my attention.\fR
.Sp
Fixed undefined-variable warnings when dumping skeleton
(happened when there was no Subject: line)
\&\fIThanks to Joel Noble for bringing this to my attention.\fR
.IP "Version 2.02" 4
.IX Item "Version 2.02"
\&\fBStupid, stupid bugs in both \s-1BASE64\s0 encoding and decoding were fixed.\fR
\&\fIThanks to Phil Abercrombie for locating them.\fR
.IP "Version 2.01" 4
.IX Item "Version 2.01"
\&\fBModules now inherit from the new Mail:: modules!\fR
This means big changes in behavior.
.Sp
\&\fBMIME::Parser can now store message data in\-core.\fR
There were a \fIlot\fR of requests for this feature.
.Sp
\&\fBMIME::Entity can now compose messages.\fR
There were a \fIlot\fR of requests for this feature.
.Sp
Added option to parse \f(CW"message/rfc822"\fR as a pseduo-multipart document.
\&\fIThanks to Andreas Koenig for suggesting this.\fR
.IP "Version 1.13" 4
.IX Item "Version 1.13"
MIME::Head now no longer requires space after \*(L":\*(R", although
either a space or a tab after the \*(L":\*(R" will be swallowed
if there.
\&\fIThanks to Igor Starovoitov for pointing out this shortcoming.\fR
.IP "Version 1.12" 4
.IX Item "Version 1.12"
Fixed bugs in parser where CRLF-terminated lines were
blowing out the handling of preambles/epilogues.
\&\fIThanks to Russell Sutherland for reporting this bug.\fR
.Sp
Fixed idiotic \fIis_multipart()\fR bug.
\&\fIThanks to Andreas Koenig for noticing it.\fR
.Sp
Added untested \fIbinmode()\fR calls to parser for \s-1DOS\s0, etc.
systems.  No idea if this will work...
.Sp
Reorganized the \fIoutput_path()\fR methods to allow easy use
of inheritance, as per Achim Bohnet's suggestion.
.Sp
Changed MIME::Head to report mime_type more accurately.
.Sp
\&\s-1POSIX\s0 module no longer loaded by Parser if perl >= 5.002.
Hey, 5.001'ers: let me know if this breaks stuff, okay?
.Sp
Added unsupported ./examples directory.
.IP "Version 1.11" 4
.IX Item "Version 1.11"
Converted over to using Makefile.PL.
\&\fIThanks to Andreas Koenig for the much-needed kick in the pants...\fR
.Sp
Added t/*.t files for testing.  Eeeeeeeeeeeh...it's a start.
.Sp
Fixed bug in default parsing routine for generating
output paths; it was warning about evil filenames if
there simply \fIwere\fR no recommended filenames.  D'oh!
.Sp
Fixed redefined \fIparts()\fR method in Entity.
.Sp
Fixed bugs in Head where field name wasn't being case folded.
.IP "Version 1.10" 4
.IX Item "Version 1.10"
A typo was causing the epilogue of an inner multipart
message to be swallowed to the end of the \s-1OUTER\s0 multipart
message; this has now been fixed.
\&\fIThanks to Igor Starovoitov for reporting this bug.\fR
.Sp
A bad regexp for parameter names was causing
some parameters to be parsed incorrectly; this has also
been fixed.
\&\fIThanks again to Igor Starovoitov for reporting this bug.\fR
.Sp
It is now possible to get full control of the filenaming
algorithm before output files are generated, and the default
algorithm is safer.
\&\fIThanks to Laurent Amon for pointing out the problems, and suggesting
some solutions.\fR
.Sp
Fixed illegal \*(L"simple\*(R" multipart test file.  D'\s-1OH\s0!
.IP "Version 1.9" 4
.IX Item "Version 1.9"
No changes: 1.8 failed \s-1CPAN\s0 registration
.IP "Version 1.8" 4
.IX Item "Version 1.8"
Fixed incompatibility with 5.001 and FileHandle::new_tmpfile
Added \s-1COPYING\s0 file, and improved \s-1README\s0.
.SH "AUTHOR"
.IX Header "AUTHOR"
MIME-tools was created by:
.PP
.Vb 5
\&    ___  _ _ _   _  ___ _
\&   / _ \e| '_| | | |/ _ ' /    Eryq, (eryq@zeegee.com)
\&  |  __/| | | |_| | |_| |     President, ZeeGee Software Inc.
\&   \e___||_|  \e__, |\e__, |__   http://www.zeegee.com/
\&             |___/    |___/
.Ve
.PP
Released as MIME-parser (1.0): 28 April 1996.
Released as MIME-tools (2.0): Halloween 1996.
Released as MIME-tools (4.0): Christmas 1997.
Released as MIME-tools (5.0): Mother's Day 2000.
.SH "ACKNOWLEDGMENTS"
.IX Header "ACKNOWLEDGMENTS"
\&\fBThis kit would not have been possible\fR but for the direct
contributions of the following:
.PP
.Vb 9
\&    Gisle Aas             The MIME encoding/decoding modules.
\&    Laurent Amon          Bug reports and suggestions.
\&    Graham Barr           The new MailTools.
\&    Achim Bohnet          Numerous good suggestions, including the I/O model.
\&    Kent Boortz           Initial code for RFC-1522-decoding of MIME headers.
\&    Andreas Koenig        Numerous good ideas, tons of beta testing,
\&                            and help with CPAN-friendly packaging.
\&    Igor Starovoitov      Bug reports and suggestions.
\&    Jason L Tibbitts III  Bug reports, suggestions, patches.
.Ve
.PP
Not to mention the Accidental Beta Test Team, whose bug reports (and
comments) have been invaluable in improving the whole:
.PP
.Vb 16
\&    Phil Abercrombie
\&    Mike Blazer
\&    Brandon Browning
\&    Kurt Freytag
\&    Steve Kilbane
\&    Jake Morrison
\&    Rolf Nelson
\&    Joel Noble
\&    Michael W. Normandin
\&    Tim Pierce
\&    Andrew Pimlott
\&    Dragomir R. Radev
\&    Nickolay Saukh
\&    Russell Sutherland
\&    Larry Virden
\&    Zyx
.Ve
.PP
Please forgive me if I've accidentally left you out.
Better yet, email me, and I'll put you in.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
At the time of this writing ($Date: 2005/01/13 19:23:15 $), the
MIME-tools homepage was
\&\fIhttp://www.mimedefang.org/static/mime\-tools.php\fR.  Check there for
updates and support.
.PP
Users of this toolkit may wish to read the documentation of Mail::Header
and Mail::Internet.
.PP
The \s-1MIME\s0 format is documented in RFCs 1521\-1522, and more recently
in RFCs 2045\-2049.
.PP
The \s-1MIME\s0 header format is an outgrowth of the mail header format
documented in \s-1RFC\s0 822.
