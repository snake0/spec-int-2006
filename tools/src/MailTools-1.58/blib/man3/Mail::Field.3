.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Field 3"
.TH Mail::Field 3 "2014-04-08" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
Mail::Field \- Base class for manipulation of mail header fields
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Mail::Field;
.Ve
.PP
.Vb 2
\&    $field = Mail::Field->new('Subject', 'some subject text');
\&    print $field->tag,": ",$field->stringify,"\en";
.Ve
.PP
.Vb 1
\&    $field = Mail::Field->subject('some subject text');
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Mail::Field\*(C'\fR is a base class for packages that create and manipulate
fields from Email (and \s-1MIME\s0) headers. Each different field will have its
own sub\-class, defining its own interface.
.PP
This document describes the minimum interface that each sub-class should
provide, and also guidlines on how the field specific interface should be
defined. 
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
Mail::Field, and it's sub-classes define several methods which return
new objects. These can all be termed to be constructors.
.IP "new ( \s-1TAG\s0 [, \s-1STRING\s0 | \s-1OPTIONS\s0 ] )" 4
.IX Item "new ( TAG [, STRING | OPTIONS ] )"
The new constructor will create an object in the class which defines
the field specified by the tag argument.
.Sp
After creation of the object :\-
.Sp
If the tag argument is followed by a single string then the \f(CW\*(C`parse\*(C'\fR method
will be called with this string.
.Sp
If the tag argument is followed by more than one arguments then the \f(CW\*(C`create\*(C'\fR
method will be called with these arguments.
.IP "extract ( \s-1TAG\s0, \s-1HEAD\s0 [, \s-1INDEX\s0 ] )" 4
.IX Item "extract ( TAG, HEAD [, INDEX ] )"
This constuctor takes as arguments the tag name, a \f(CW\*(C`Mail::Head\*(C'\fR object
and optionally an index.
.Sp
If the index argument is given then \f(CW\*(C`extract\*(C'\fR will retrieve the given tag
from the \f(CW\*(C`Mail::Head\*(C'\fR object and create a new \f(CW\*(C`Mail::Field\*(C'\fR based object.
\&\fIundef\fR will be returned in the field does not exist.
.Sp
If the index argument is not given the the result depends on the context
in which \f(CW\*(C`extract\*(C'\fR is called. If called in a scalar context the result
will be as if \f(CW\*(C`extract\*(C'\fR was called with an index value of zero. If called
in an array context then all tags will be retrieved and a list of
\&\f(CW\*(C`Mail::Field\*(C'\fR objects will be returned.
.IP "combine ( \s-1FIELD_LIST\s0 )" 4
.IX Item "combine ( FIELD_LIST )"
This constructor takes as arguments a list of \f(CW\*(C`Mail::Field\*(C'\fR objects, which
should all be of the same sub\-class, and creates a new object in that same
class.
.Sp
This constructor is nor defined in \f(CW\*(C`Mail::Field\*(C'\fR as there is no generic
way to combine the various field types. Each sub-class should define
its own combine constructor, if combining is possible/allowed.
.SH "METHODS"
.IX Header "METHODS"
.IP "parse" 4
.IX Item "parse"
.PD 0
.IP "set" 4
.IX Item "set"
.IP "tag" 4
.IX Item "tag"
.IP "stringify" 4
.IX Item "stringify"
.PD
.SH "SUB-CLASS PACKAGE NAMES"
.IX Header "SUB-CLASS PACKAGE NAMES"
All sub-classes should be called Mail::Field::\fIname\fR where \fIname\fR is
derived from the tag using these rules.
.IP "\(bu" 4
Consider a tag as being made up of elements separated by '\-'
.IP "\(bu" 4
Convert all characters to lowercase except the first in each element, which
should be uppercase.
.IP "\(bu" 4
\&\fIname\fR is then created from these elements by using the first
N characters from each element.
.IP "\(bu" 4
N is calculated by using the formula :\-
.Sp
.Vb 1
\&    int((7 + #elements) / #elements)
.Ve
.IP "\(bu" 4
\&\fIname\fR is then limited to a maximum of 8 characters, keeping the first 8
characters
.PP
For an example of this take a look at the definition of the 
\&\f(CW\*(C`_header_pkg_name\*(C'\fR subroutine in \f(CW\*(C`Mail::Field\*(C'\fR
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr.
.PP
Maintained by Mark Overmeer <mailtools@overmeer.net>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MIME::*s
.SH "CREDITS"
.IX Header "CREDITS"
Eryq <eryq@rhine.gsfc.nasa.gov> \- for all the help in defining this package
so that \f(CW\*(C`Mail::*\*(C'\fR and \f(CW\*(C`MIME::*\*(C'\fR can be integrated together.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002\-2003 Mark Overmeer, 1995\-2001 Graham Barr. All rights
reserved. This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
