.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTTP::Status 3"
.TH HTTP::Status 3 "2014-04-08" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
HTTP::Status \- HTTP Status code processing
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use HTTP::Status;
.Ve
.PP
.Vb 3
\& if ($rc != RC_OK) {
\&     print status_message($rc), "\en";
\& }
.Ve
.PP
.Vb 3
\& if (is_success($rc)) { ... }
\& if (is_error($rc)) { ... }
\& if (is_redirect($rc)) { ... }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIHTTP::Status\fR is a library of routines for defining and
classifying \s-1HTTP\s0 status codes for libwww\-perl.  Status codes are
used to encode the overall outcome of a \s-1HTTP\s0 response message.  Codes
correspond to those defined in \s-1RFC\s0 2616 and \s-1RFC\s0 2518.
.SH "CONSTANTS"
.IX Header "CONSTANTS"
The following constant functions can be used as mnemonic status code
names:
.PP
.Vb 3
\&   RC_CONTINUE                          (100)
\&   RC_SWITCHING_PROTOCOLS               (101)
\&   RC_PROCESSING                        (102)
.Ve
.PP
.Vb 8
\&   RC_OK                                (200)
\&   RC_CREATED                           (201)
\&   RC_ACCEPTED                          (202)
\&   RC_NON_AUTHORITATIVE_INFORMATION     (203)
\&   RC_NO_CONTENT                        (204)
\&   RC_RESET_CONTENT                     (205)
\&   RC_PARTIAL_CONTENT                   (206)
\&   RC_MULTI_STATUS                      (207)
.Ve
.PP
.Vb 7
\&   RC_MULTIPLE_CHOICES                  (300)
\&   RC_MOVED_PERMANENTLY                 (301)
\&   RC_FOUND                             (302)
\&   RC_SEE_OTHER                         (303)
\&   RC_NOT_MODIFIED                      (304)
\&   RC_USE_PROXY                         (305)
\&   RC_TEMPORARY_REDIRECT                (307)
.Ve
.PP
.Vb 21
\&   RC_BAD_REQUEST                       (400)
\&   RC_UNAUTHORIZED                      (401)
\&   RC_PAYMENT_REQUIRED                  (402)
\&   RC_FORBIDDEN                         (403)
\&   RC_NOT_FOUND                         (404)
\&   RC_METHOD_NOT_ALLOWED                (405)
\&   RC_NOT_ACCEPTABLE                    (406)
\&   RC_PROXY_AUTHENTICATION_REQUIRED     (407)
\&   RC_REQUEST_TIMEOUT                   (408)
\&   RC_CONFLICT                          (409)
\&   RC_GONE                              (410)
\&   RC_LENGTH_REQUIRED                   (411)
\&   RC_PRECONDITION_FAILED               (412)
\&   RC_REQUEST_ENTITY_TOO_LARGE          (413)
\&   RC_REQUEST_URI_TOO_LARGE             (414)
\&   RC_UNSUPPORTED_MEDIA_TYPE            (415)
\&   RC_REQUEST_RANGE_NOT_SATISFIABLE     (416)
\&   RC_EXPECTATION_FAILED                (417)
\&   RC_UNPROCESSABLE_ENTITY              (422)
\&   RC_LOCKED                            (423)
\&   RC_FAILED_DEPENDENCY                 (424)
.Ve
.PP
.Vb 7
\&   RC_INTERNAL_SERVER_ERROR             (500)
\&   RC_NOT_IMPLEMENTED                   (501)
\&   RC_BAD_GATEWAY                       (502)
\&   RC_SERVICE_UNAVAILABLE               (503)
\&   RC_GATEWAY_TIMEOUT                   (504)
\&   RC_HTTP_VERSION_NOT_SUPPORTED        (505)
\&   RC_INSUFFICIENT_STORAGE              (507)
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
The following additional functions are provided.  Most of them are
exported by default.
.ie n .IP "status_message( $code )" 4
.el .IP "status_message( \f(CW$code\fR )" 4
.IX Item "status_message( $code )"
The \fIstatus_message()\fR function will translate status codes to human
readable strings. The string is the same as found in the constant
names above.  If the \f(CW$code\fR is unknown, then \f(CW\*(C`undef\*(C'\fR is returned.
.ie n .IP "is_info( $code )" 4
.el .IP "is_info( \f(CW$code\fR )" 4
.IX Item "is_info( $code )"
Return \s-1TRUE\s0 if \f(CW$code\fR is an \fIInformational\fR status code.  This
class of status code indicates a provisional response which can't have
any content.
.ie n .IP "is_success( $code )" 4
.el .IP "is_success( \f(CW$code\fR )" 4
.IX Item "is_success( $code )"
Return \s-1TRUE\s0 if \f(CW$code\fR is a \fISuccessful\fR status code.
.ie n .IP "is_redirect( $code )" 4
.el .IP "is_redirect( \f(CW$code\fR )" 4
.IX Item "is_redirect( $code )"
Return \s-1TRUE\s0 if \f(CW$code\fR is a \fIRedirection\fR status code. This class of
status code indicates that further action needs to be taken by the
user agent in order to fulfill the request.
.ie n .IP "is_error( $code )" 4
.el .IP "is_error( \f(CW$code\fR )" 4
.IX Item "is_error( $code )"
Return \s-1TRUE\s0 if \f(CW$code\fR is an \fIError\fR status code.  The function
return \s-1TRUE\s0 for both client error or a server error status codes.
.ie n .IP "is_client_error( $code )" 4
.el .IP "is_client_error( \f(CW$code\fR )" 4
.IX Item "is_client_error( $code )"
Return \s-1TRUE\s0 if \f(CW$code\fR is an \fIClient Error\fR status code. This class
of status code is intended for cases in which the client seems to have
erred.
.Sp
This function is \fBnot\fR exported by default.
.ie n .IP "is_server_error( $code )" 4
.el .IP "is_server_error( \f(CW$code\fR )" 4
.IX Item "is_server_error( $code )"
Return \s-1TRUE\s0 if \f(CW$code\fR is an \fIServer Error\fR status code. This class
of status codes is intended for cases in which the server is aware
that it has erred or is incapable of performing the request.
.Sp
This function is \fBnot\fR exported by default.
.SH "BUGS"
.IX Header "BUGS"
Wished \f(CW@EXPORT_OK\fR had been used instead of \f(CW@EXPORT\fR in the beginning.
Now too much is exported by default.
