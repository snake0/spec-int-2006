.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LWP::DebugFile 3"
.TH LWP::DebugFile 3 "2014-04-08" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
LWP::DebugFile \- routines for tracing/debugging LWP
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
If you want to see just what \s-1LWP\s0 is doing when your program calls it,
add this to the beginning of your program's source:
.PP
.Vb 1
\&  use LWP::DebugFile;
.Ve
.PP
For even more verbose debug output, do this instead:
.PP
.Vb 1
\&  use LWP::DebugFile ('+');
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is like LWP::Debug in that it allows you to see what your
calls to \s-1LWP\s0 are doing behind the scenes.  But it is unlike
LWP::Debug in that it sends the output to a file, instead
of to \s-1STDERR\s0 (as LWP::Debug does).
.SH "OPTIONS"
.IX Header "OPTIONS"
The options you can use in \f(CW\*(C`use LWP::DebugFile (\f(CIoptions\f(CW)\*(C'\fR are the
same as the \fBnon-exporting\fR options available from \f(CW\*(C`use LWP::Debug
(\f(CIoptions\f(CW)\*(C'\fR.  That is, you can do things like this:
.PP
.Vb 3
\&  use LWP::DebugFile qw(+);
\&  use LWP::Debug qw(+ -conns);
\&  use LWP::Debug qw(trace);
.Ve
.PP
The meanings of these are explained in the
documentation for LWP::Debug.
The only differences are that by default, LWP::DebugFile has \f(CW\*(C`cons\*(C'\fR
debugging on, ad that (as mentioned earlier), only \f(CW\*(C`non\-exporting\*(C'\fR
options are available.  That is, you \fBcan't\fR do this:
.PP
.Vb 1
\&  use LWP::DebugFile qw(trace); # wrong
.Ve
.PP
You might expect that to export LWP::Debug's \f(CW\*(C`trace()\*(C'\fR function,
but it doesn't work \*(-- it's a compile-time error.
.SH "OUTPUT FILE NAMING"
.IX Header "OUTPUT FILE NAMING"
If you don't do anything, the output file (where all the \s-1LWP\s0 debug/trace
output goes) will be in the current directory, and will be named like
\&\fIlwp_3db7aede_b93.log\fR, where \fI3db7aede\fR is \f(CW$^T\fR expressed in hex,
and \f(CW\*(C`b93\*(C'\fR is \f(CW$$\fR expressed in hex.  Presumably this is a
unique-for-all-time filename!
.PP
If you don't want the files to go in the current directory, you
can set \f(CW$LWP::DebugFile::outpath\fR before you load the LWP::DebugFile
module:
.PP
.Vb 2
\&  BEGIN { $LWP::DebugFile::outpath = '/tmp/crunk/' }
\&  use LWP::DebugFile;
.Ve
.PP
Note that you must end the value with a path separator (\*(L"/\*(R" in this
case \*(-- under MacPerl it would be \*(L":\*(R").  With that set, you will
have output files named like \fI/tmp/crunk/lwp_3db7aede_b93.log\fR.
.PP
If you want the LWP::DebugFile output to go a specific filespec (instead
of just a uniquely named file, in whatever directory), instead set the
variable \f(CW$LWP::DebugFile::outname\fR, like so:
.PP
.Vb 2
\&  BEGIN { $LWP::DebugFile::outname = '/home/mojojojo/lwp.log' }
\&  use LWP::DebugFile;
.Ve
.PP
In that case, \f(CW$LWP::DebugFile::outpath\fR isn't consulted at all, and
output is always written to the file \fI/home/mojojojo/lwp.log\fR.
.PP
Note that the value of \f(CW$LWP::DebugFile::outname\fR doesn't need to
be an absolute filespec.  You can do this:
.PP
.Vb 2
\&  BEGIN { $LWP::DebugFile::outname = 'lwp.log' }
\&  use LWP::DebugFile;
.Ve
.PP
In that case, output goes to a file named \fIlwp.log\fR in the current
directory \*(-- specifically, whatever directory is current when
LWP::DebugFile is first loaded. \f(CW$LWP::DebugFile::outpath\fR is still not
consulted \*(-- its value is used only if \f(CW$LWP::DebugFile::outname\fR
isn't set.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
If you set the environment variables \f(CW\*(C`LWPDEBUGPATH\*(C'\fR or 
\&\f(CW\*(C`LWPDEBUGFILE\*(C'\fR, their values will be used in initializing the
values of \f(CW$LWP::DebugFile::outpath\fR
and \f(CW$LWP::DebugFile::outname\fR.
.PP
That is, if you have \f(CW\*(C`LWPDEBUGFILE\*(C'\fR set to \fI/home/mojojojo/lwp.log\fR,
then you can just start out your program with:
.PP
.Vb 1
\&  use LWP::DebugFile;
.Ve
.PP
and it will act as if you had started it like this:
.PP
.Vb 2
\&  BEGIN { $LWP::DebugFile::outname = '/home/mojojojo/lwp.log' }
\&  use LWP::DebugFile;
.Ve
.SH "IMPLEMENTATION NOTES"
.IX Header "IMPLEMENTATION NOTES"
This module works by subclassing \f(CW\*(C`LWP::Debug\*(C'\fR, (notably inheriting its
\&\f(CW\*(C`import\*(C'\fR). It also redefines \f(CW&LWP::Debug::conns\fR and
\&\f(CW&LWP::Debug::_log\fR to make for output that is a little more verbose,
and friendlier for when you're looking at it later in a log file.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
LWP::Debug
.SH "COPYRIGHT AND DISCLAIMERS"
.IX Header "COPYRIGHT AND DISCLAIMERS"
Copyright (c) 2002 Sean M. Burke.
.PP
This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.
.SH "AUTHOR"
.IX Header "AUTHOR"
Sean M. Burke \f(CW\*(C`sburke@cpan.org\*(C'\fR
