.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PDF::API2::Basic::TTF::Segarr 3"
.TH PDF::API2::Basic::TTF::Segarr 3 "2014-04-08" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
PDF::API2::Basic::TTF::Segarr \- Segmented array
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Holds data either directly or indirectly as a series of arrays. This class
looks after the set of arrays and masks the individual sub\-arrays, thus saving
a class, we hope.
.SH "INSTANCE VARIABLES"
.IX Header "INSTANCE VARIABLES"
All instance variables do not start with a space.
.PP
The segmented array is simply an array of segments
.PP
Each segment is a more complex affair:
.IP "\s-1START\s0" 4
.IX Item "START"
In terms of the array, the address for the 0th element in this segment.
.IP "\s-1LEN\s0" 4
.IX Item "LEN"
Number of elements in this segment
.IP "\s-1VAL\s0" 4
.IX Item "VAL"
The array which contains the elements
.SH "METHODS"
.IX Header "METHODS"
.Sh "PDF::API2::Basic::TTF::Segarr\->new($size)"
.IX Subsection "PDF::API2::Basic::TTF::Segarr->new($size)"
Creates a new segmented array with a given data size
.ie n .Sh "$s\->fastadd_segment($start, $is_sparse\fP, \f(CW@dat)"
.el .Sh "$s\->fastadd_segment($start, \f(CW$is_sparse\fP, \f(CW@dat\fP)"
.IX Subsection "$s->fastadd_segment($start, $is_sparse, @dat)"
Creates a new segment and adds it to the array assuming no overlap between
the new segment and any others in the array. \f(CW$is_sparse\fR indicates whether the
passed in array contains \f(CW\*(C`undef\*(C'\fRs or not. If false no checking is done (which
is faster, but riskier). If equal to 2 then 0 is considered undef as well.
.PP
Returns the number of segments inserted.
.ie n .Sh "$s\->add_segment($start, $overwrite\fP, \f(CW@dat)"
.el .Sh "$s\->add_segment($start, \f(CW$overwrite\fP, \f(CW@dat\fP)"
.IX Subsection "$s->add_segment($start, $overwrite, @dat)"
Creates a new segment and adds it to the array allowing for possible overlaps
between the new segment and the existing ones. In the case of overlaps, elements
from the new segment are deleted unless \f(CW$overwrite\fR is set in which case the
elements already there are over\-written.
.PP
This method also checks the data coming in to see if it is sparse (i.e. contains
undef values). Gaps cause new segments to be created or not to over-write existing
values.
.Sh "$s\->tidy"
.IX Subsection "$s->tidy"
Merges any immediately adjacent segments
.Sh "$s\->at($addr, [$len])"
.IX Subsection "$s->at($addr, [$len])"
Looks up the data held at the given address by locating the appropriate segment
etc. If \f(CW$len\fR > 1 then returns an array of values, spaces being filled with undef.
.Sh "$s\->remove($addr, [$len])"
.IX Subsection "$s->remove($addr, [$len])"
Removes the item or items from addr returning them as an array or the first
value in a scalar context. This is very like \f(CW\*(C`at\*(C'\fR, including padding with
undef, but it deletes stuff as it goes.
.Sh "$s\->copy"
.IX Subsection "$s->copy"
Deep copies this array
.Sh "$s\->copy_seg($seg)"
.IX Subsection "$s->copy_seg($seg)"
Creates a deep copy of a segment
.SH "BUGS"
.IX Header "BUGS"
No known bugs.
.SH "AUTHOR"
.IX Header "AUTHOR"
Martin Hosken Martin_Hosken@sil.org. See PDF::API2::Basic::TTF::Font for copyright and
licensing.
