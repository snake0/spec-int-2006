.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PDF::API2::Page 3"
.TH PDF::API2::Page 3 "2014-04-08" "perl v5.8.7" "User Contributed Perl Documentation"
.ie n .SH "$page = PDF::API2::Page\->new $pdf\fP, \f(CW$parent\fP, \f(CW$index"
.el .SH "$page = PDF::API2::Page\->new \f(CW$pdf\fP, \f(CW$parent\fP, \f(CW$index\fP"
.IX Header "$page = PDF::API2::Page->new $pdf, $parent, $index"
Returns a page object (called from \f(CW$pdf\fR\->page).
.RE
.ie n .IP "$page = PDF::API2::Page\->coerce $pdf\fR, \f(CW$pdfpage"
.el .IP "$page = PDF::API2::Page\->coerce \f(CW$pdf\fR, \f(CW$pdfpage\fR"
.IX Item "$page = PDF::API2::Page->coerce $pdf, $pdfpage"
Returns a page object converted from \f(CW$pdfpage\fR (called from \f(CW$pdf\fR\->openpage).
.RE
.IP "$page\->update"
.IX Item "$page->update"
Marks a page to be updated (by \f(CW$pdf\fR\->update).
.RE
.ie n .IP "$page\->mediabox $w\fR, \f(CW$h"
.el .IP "$page\->mediabox \f(CW$w\fR, \f(CW$h\fR"
.IX Item "$page->mediabox $w, $h"
.RE
.PD 0
.ie n .IP "$page\->mediabox $llx\fR, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury"
.el .IP "$page\->mediabox \f(CW$llx\fR, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury\fR"
.IX Item "$page->mediabox $llx, $lly, $urx, $ury"
.RE
.ie n .IP "$page\->mediabox $alias"
.el .IP "$page\->mediabox \f(CW$alias\fR"
.IX Item "$page->mediabox $alias"
.PD
Sets the mediabox.  This method supports the following aliases:
\&'4A', '2A', 'A0', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6',
\&'4B', '2B', 'B0', 'B1', 'B2', 'B3', 'B4', 'B5', 'B6',
\&'\s-1LETTER\s0', '\s-1BROADSHEET\s0', '\s-1LEDGER\s0', '\s-1TABLOID\s0', '\s-1LEGAL\s0',
\&'\s-1EXECUTIVE\s0', and '36X36'.
.RE
.ie n .IP "($llx, $lly\fR, \f(CW$urx\fR, \f(CW$ury\fR) = \f(CW$page\->get_mediabox"
.el .IP "($llx, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury\fR) = \f(CW$page\fR\->get_mediabox"
.IX Item "($llx, $lly, $urx, $ury) = $page->get_mediabox"
Gets the mediabox based one best estimates or the default.
.RE
.ie n .IP "$page\->cropbox $w\fR, \f(CW$h"
.el .IP "$page\->cropbox \f(CW$w\fR, \f(CW$h\fR"
.IX Item "$page->cropbox $w, $h"
.RE
.PD 0
.ie n .IP "$page\->cropbox $llx\fR, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury"
.el .IP "$page\->cropbox \f(CW$llx\fR, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury\fR"
.IX Item "$page->cropbox $llx, $lly, $urx, $ury"
.RE
.ie n .IP "$page\->cropbox $alias"
.el .IP "$page\->cropbox \f(CW$alias\fR"
.IX Item "$page->cropbox $alias"
.PD
Sets the cropbox.  This method supports the same aliases as mediabox.
.RE
.ie n .IP "$page\->bleedbox $w\fR, \f(CW$h"
.el .IP "$page\->bleedbox \f(CW$w\fR, \f(CW$h\fR"
.IX Item "$page->bleedbox $w, $h"
.RE
.PD 0
.ie n .IP "$page\->bleedbox $llx\fR, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury"
.el .IP "$page\->bleedbox \f(CW$llx\fR, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury\fR"
.IX Item "$page->bleedbox $llx, $lly, $urx, $ury"
.RE
.ie n .IP "$page\->bleedbox $alias"
.el .IP "$page\->bleedbox \f(CW$alias\fR"
.IX Item "$page->bleedbox $alias"
.PD
Sets the bleedbox.  This method supports the same aliases as mediabox.
.RE
.ie n .IP "$page\->trimbox $w\fR, \f(CW$h"
.el .IP "$page\->trimbox \f(CW$w\fR, \f(CW$h\fR"
.IX Item "$page->trimbox $w, $h"
.RE
.PD 0
.ie n .IP "$page\->trimbox $llx\fR, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury"
.el .IP "$page\->trimbox \f(CW$llx\fR, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury\fR"
.IX Item "$page->trimbox $llx, $lly, $urx, $ury"
.PD
Sets the trimbox.  This method supports the same aliases as mediabox.
.RE
.ie n .IP "$page\->artbox $w\fR, \f(CW$h"
.el .IP "$page\->artbox \f(CW$w\fR, \f(CW$h\fR"
.IX Item "$page->artbox $w, $h"
.RE
.PD 0
.ie n .IP "$page\->artbox $llx\fR, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury"
.el .IP "$page\->artbox \f(CW$llx\fR, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury\fR"
.IX Item "$page->artbox $llx, $lly, $urx, $ury"
.RE
.ie n .IP "$page\->artbox $alias"
.el .IP "$page\->artbox \f(CW$alias\fR"
.IX Item "$page->artbox $alias"
.PD
Sets the artbox.  This method supports the same aliases as mediabox.
.RE
.ie n .IP "$page\->rotate $deg"
.el .IP "$page\->rotate \f(CW$deg\fR"
.IX Item "$page->rotate $deg"
Rotates the page by the given degrees, which must be a multiple of 90.
.PP
(This allows you to auto-rotate to landscape without changing the mediabox!)
.RE
.ie n .IP "$gfx = $page\fR\->gfx \f(CW$prepend"
.el .IP "$gfx = \f(CW$page\fR\->gfx \f(CW$prepend\fR"
.IX Item "$gfx = $page->gfx $prepend"
Returns a graphics content object. If \f(CW$prepend\fR is true the content
will be prepended to the page description.
.RE
.ie n .IP "$txt = $page\fR\->text \f(CW$prepend"
.el .IP "$txt = \f(CW$page\fR\->text \f(CW$prepend\fR"
.IX Item "$txt = $page->text $prepend"
Returns a text content object. If \f(CW$prepend\fR is true the content
will be prepended to the page description.
.RE
.ie n .IP "$ant = $page\->annotation"
.el .IP "$ant = \f(CW$page\fR\->annotation"
.IX Item "$ant = $page->annotation"
Returns a new annotation object.
.RE
.ie n .IP "$page\->resource $type\fR, \f(CW$key\fR, \f(CW$obj"
.el .IP "$page\->resource \f(CW$type\fR, \f(CW$key\fR, \f(CW$obj\fR"
.IX Item "$page->resource $type, $key, $obj"
Adds a resource to the page-inheritance tree.
.PP
\&\fBExample:\fR
.PP
.Vb 4
\&    $co->resource('Font',$fontkey,$fontobj);
\&    $co->resource('XObject',$imagekey,$imageobj);
\&    $co->resource('Shading',$shadekey,$shadeobj);
\&    $co->resource('ColorSpace',$spacekey,$speceobj);
.Ve
.PP
\&\fBNote:\fR You only have to add the required resources, if
they are \s-1NOT\s0 handled by the *font*, *image*, *shade* or *space*
methods.
.SH "AUTHOR"
.IX Header "AUTHOR"
alfred reibenschuh
.SH "HISTORY"
.IX Header "HISTORY"
.Vb 3
\&    $Log: Page.pm,v $
\&    Revision 1.10  2005/03/14 22:01:05  fredo
\&    upd 2005
.Ve
.PP
.Vb 2
\&    Revision 1.9  2004/12/16 00:30:52  fredo
\&    added no warn for recursion
.Ve
.PP
.Vb 2
\&    Revision 1.8  2004/09/13 15:27:59  fredo
\&    added rotate for acrobat-wise pdf-creators
.Ve
.PP
.Vb 2
\&    Revision 1.7  2004/06/15 09:11:38  fredo
\&    removed cr+lf
.Ve
.PP
.Vb 2
\&    Revision 1.6  2004/06/09 16:29:12  fredo
\&    fixed named page size handling for *box methods
.Ve
.PP
.Vb 2
\&    Revision 1.5  2004/06/07 19:44:12  fredo
\&    cleaned out cr+lf for lf
.Ve
.PP
.Vb 2
\&    Revision 1.4  2003/12/08 13:05:19  Administrator
\&    corrected to proper licencing statement
.Ve
.PP
.Vb 2
\&    Revision 1.3  2003/11/30 17:17:37  Administrator
\&    merged into default
.Ve
.PP
.Vb 2
\&    Revision 1.2.2.1  2003/11/30 16:56:22  Administrator
\&    merged into default
.Ve
.PP
.Vb 2
\&    Revision 1.2  2003/11/30 11:32:33  Administrator
\&    added CVS id/log
.Ve
