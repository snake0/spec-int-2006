.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PDF::API2 3"
.TH PDF::API2 3 "2014-04-08" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
PDF::API2 \- A Perl Module Chain to faciliate the Creation and Modification of High\-Quality "Portable Document Format (aka. PDF)" Files.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\&    use PDF::API2;
\&    #
\&    $pdf = PDF::API2->new;
\&    $pdf = PDF::API2->open('some.pdf');
\&    $page = $pdf->page;
\&    $page = $pdf->openpage($pagenum);
\&    $img = $pdf->image('some.jpg');
\&    $font = $pdf->corefont('Times-Roman');
\&    $font = $pdf->ttfont('TimesNewRoman.ttf');
.Ve
.SH "GENERIC METHODS"
.IX Header "GENERIC METHODS"
.ie n .IP "$pdf = \s-1PDF::API\-\s0>new %opts" 4
.el .IP "$pdf = \s-1PDF::API\-\s0>new \f(CW%opts\fR" 4
.IX Item "$pdf = PDF::API->new %opts"
Creates a new pdf-file object. If you know beforehand
to save the pdf to file you can give the '\-file' option,
to minimize possible memory requirements later\-on.
.Sp
\&\fBExample:\fR
.Sp
.Vb 1
\&    $pdf = PDF::API2->new();
.Ve
.Sp
.Vb 1
\&    $pdf = PDF::API2->new(-file => 'our/new.pdf');
.Ve
.ie n .IP "$pdf = \s-1PDF::API\-\s0>open $pdffile" 4
.el .IP "$pdf = \s-1PDF::API\-\s0>open \f(CW$pdffile\fR" 4
.IX Item "$pdf = PDF::API->open $pdffile"
Opens an existing \s-1PDF\s0 for modification.
.ie n .IP "$pdf = \s-1PDF::API\-\s0>openScalar $pdfstream" 4
.el .IP "$pdf = \s-1PDF::API\-\s0>openScalar \f(CW$pdfstream\fR" 4
.IX Item "$pdf = PDF::API->openScalar $pdfstream"
Opens an existing PDF-stream for modification.
.ie n .IP "$pdf\->preferences %opts" 4
.el .IP "$pdf\->preferences \f(CW%opts\fR" 4
.IX Item "$pdf->preferences %opts"
Controls viewing-preferences for the pdf.
.Sp
\&\fBPage Mode Options:\fR
.Sp
\&\fI\-fullscreen\fR
\&... Full-screen mode, with no menu bar, window controls, or any other window visible.
.Sp
\&\fI\-thumbs\fR
\&... Thumbnail images visible.
.Sp
\&\fI\-outlines\fR
\&... Document outline visible.
.Sp
\&\fBPage Layout Options:\fR
.Sp
\&\fI\-singlepage\fR
\&... Display one page at a time.
.Sp
\&\fI\-onecolumn\fR
\&... Display the pages in one column.
.Sp
\&\fI\-twocolumnleft\fR
\&... Display the pages in two columns, with oddnumbered pages on the left.
.Sp
\&\fI\-twocolumnrigth\fR
\&... Display the pages in two columns, with oddnumbered pages on the right.
.Sp
\&\fBViewer Options:\fR
.Sp
\&\fI\-hidetoolbar\fR
        ... Specifying whether to hide tool bars.
.Sp
\&\fI\-hidemenubar\fR
        ... Specifying whether to hide menu bars.
.Sp
\&\fI\-hidewindowui\fR
        ... Specifying whether to hide user interface elements.
.Sp
\&\fI\-fitwindow\fR
        ... Specifying whether to resize the document’s window to the size of the displayed page.
.Sp
\&\fI\-centerwindow\fR
        ... Specifying whether to position the document’s window in the center of the screen.
.Sp
\&\fI\-displaytitle\fR
        ... Specifying whether the window’s title bar should display the document title
        taken from the Title entry of the document information dictionary.
.Sp
\&\fI\-afterfullscreenthumbs\fR
        ... Thumbnail images visible after Full-screen mode.
.Sp
\&\fI\-afterfullscreenoutlines\fR
        ... Document outline visible after Full-screen mode.
.Sp
\&\fBInitial Page Option:\fR
.Sp
\&\fI\-firstpage\fR => [ \f(CW$pageobj\fR, \f(CW%opts\fR]
        ... Specifying the page to be displayed, plus one of the following options:
.Sp
\&\fBInitial Page Options:\fR
.Sp
\&\fI\-fit\fR => 1
            ... Display the page designated by page, with its contents magnified just enough to
            fit the entire page within the window both horizontally and vertically. If the
            required horizontal and vertical magnification factors are different, use the
            smaller of the two, centering the page within the window in the other dimension.
.Sp
\&\fI\-fith\fR => \f(CW$top\fR
            ... Display the page designated by page, with the vertical coordinate top positioned
            at the top edge of the window and the contents of the page magnified just enough
            to fit the entire width of the page within the window.
.Sp
\&\fI\-fitv\fR => \f(CW$left\fR
            ... Display the page designated by page, with the horizontal coordinate left positioned
            at the left edge of the window and the contents of the page magnified just enough
            to fit the entire height of the page within the window.
.Sp
\&\fI\-fitr\fR => [ \f(CW$left\fR, \f(CW$bottom\fR, \f(CW$right\fR, \f(CW$top\fR ]
            ... Display the page designated by page, with its contents magnified just enough to
            fit the rectangle specified by the coordinates left, bottom, right, and top
            entirely within the window both horizontally and vertically. If the required
            horizontal and vertical magnification factors are different, use the smaller of
            the two, centering the rectangle within the window in the other dimension.
.Sp
\&\fI\-fitb\fR => 1
            ... Display the page designated by page, with its contents magnified just enough
            to fit its bounding box entirely within the window both horizontally and
            vertically. If the required horizontal and vertical magnification factors are
            different, use the smaller of the two, centering the bounding box within the
            window in the other dimension.
.Sp
\&\fI\-fitbh\fR => \f(CW$top\fR
            ... Display the page designated by page, with the vertical coordinate top
            positioned at the top edge of the window and the contents of the page
            magnified just enough to fit the entire width of its bounding box
            within the window.
.Sp
\&\fI\-fitbv\fR => \f(CW$left\fR
            ... Display the page designated by page, with the horizontal coordinate
            left positioned at the left edge of the window and the contents of the page
            magnified just enough to fit the entire height of its bounding box within the
            window.
.Sp
\&\fI\-xyz\fR => [ \f(CW$left\fR, \f(CW$top\fR, \f(CW$zoom\fR ]
            ... Display the page designated by page, with the coordinates (left, top) positioned
            at the top-left corner of the window and the contents of the page magnified by
            the factor zoom. A zero (0) value for any of the parameters left, top, or zoom
            specifies that the current value of that parameter is to be retained unchanged.
.Sp
\&\fBExample:\fR
.Sp
.Vb 6
\&    $pdf->preferences(
\&        -fullscreen => 1,
\&        -onecolumn => 1,
\&        -afterfullscreenoutlines => 1,
\&        -firstpage => [ $pageobj , -fit => 1],
\&    );
.Ve
.ie n .IP "$val = $pdf\fR\->default \f(CW$parameter" 4
.el .IP "$val = \f(CW$pdf\fR\->default \f(CW$parameter\fR" 4
.IX Item "$val = $pdf->default $parameter"
.PD 0
.ie n .IP "$pdf\->default $parameter\fR, \f(CW$val" 4
.el .IP "$pdf\->default \f(CW$parameter\fR, \f(CW$val\fR" 4
.IX Item "$pdf->default $parameter, $val"
.PD
Gets/Sets default values for the behaviour of ::API2.
.Sp
\&\fBSupported Parameters:\fR
.Sp
\&\fInounrotate\fR ... prohibits \s-1API2\s0 from rotating imported/opened page to re-create a default pdf\-context.
.Sp
\&\fIpageencaps\fR ... enables than \s-1API2\s0 will add save/restore commands upon imported/opened pages to preserve graphics-state for modification.
.Sp
\&\fIcopyannots\fR ... enables importing of annotations (\fB*EXPERIMENTAL*\fR).
.ie n .IP "$bool = $pdf\->isEncrypted" 4
.el .IP "$bool = \f(CW$pdf\fR\->isEncrypted" 4
.IX Item "$bool = $pdf->isEncrypted"
Checks if the previously opened pdf is encrypted.
.ie n .IP "%infohash $pdf\fR\->info \f(CW%infohash" 4
.el .IP "%infohash \f(CW$pdf\fR\->info \f(CW%infohash\fR" 4
.IX Item "%infohash $pdf->info %infohash"
Sets/Gets the info structure of the document.
.Sp
\&\fBExample:\fR
.Sp
.Vb 10
\&    $pdf->info(
\&        'Author'       => " Alfred Reibenschuh ",
\&        'CreationDate' => "D:20020911000000+01'00'",
\&        'ModDate'      => "D:YYYYMMDDhhmmssOHH'mm'",
\&        'Creator'      => "fredos-script.pl",
\&        'Producer'     => "PDF::API2",
\&        'Title'        => "some Publication",
\&        'Subject'      => "perl ?",
\&        'Keywords'     => "all good things are pdf"
\&    );
.Ve
.ie n .IP "@meta_data_attribs = $pdf\fR\->infoMetaAttributes \f(CW@meta_data_attribs" 4
.el .IP "@meta_data_attribs = \f(CW$pdf\fR\->infoMetaAttributes \f(CW@meta_data_attribs\fR" 4
.IX Item "@meta_data_attribs = $pdf->infoMetaAttributes @meta_data_attribs"
Sets/Gets the supported info-structure tags.
.ie n .IP "$xml = $pdf\fR\->xmpMetadata \f(CW$xml" 4
.el .IP "$xml = \f(CW$pdf\fR\->xmpMetadata \f(CW$xml\fR" 4
.IX Item "$xml = $pdf->xmpMetadata $xml"
Sets/Gets the \s-1XMP\s0 \s-1XML\s0 data\-stream.
.ie n .IP "$pdf\->finishobjects @objects" 4
.el .IP "$pdf\->finishobjects \f(CW@objects\fR" 4
.IX Item "$pdf->finishobjects @objects"
Force objects to be written to file.
.IP "$pdf\->update" 4
.IX Item "$pdf->update"
Updates a previously \*(L"opened\*(R" document after all changes have been applied.
.ie n .IP "$pdf\->saveas $file" 4
.el .IP "$pdf\->saveas \f(CW$file\fR" 4
.IX Item "$pdf->saveas $file"
Saves the document to file.
.ie n .IP "$string = $pdf\->stringify" 4
.el .IP "$string = \f(CW$pdf\fR\->stringify" 4
.IX Item "$string = $pdf->stringify"
Returns the document in a string.
.IP "$pdf\->end" 4
.IX Item "$pdf->end"
Destroys the document.
.SH "PAGE METHODS"
.IX Header "PAGE METHODS"
.ie n .IP "$page = $pdf\->page" 4
.el .IP "$page = \f(CW$pdf\fR\->page" 4
.IX Item "$page = $pdf->page"
.PD 0
.ie n .IP "$page = $pdf\fR\->page \f(CW$index" 4
.el .IP "$page = \f(CW$pdf\fR\->page \f(CW$index\fR" 4
.IX Item "$page = $pdf->page $index"
.PD
Returns a new page object or inserts-and-returns a new page at \f(CW$index\fR.
.Sp
\&\fBNote:\fR on \f(CW$index\fR
.Sp
.Vb 3
\&    -1 ... is inserted before the last page
\&    1 ... is inserted before page number 1 (the first page)
\&    0 ... is simply appended
.Ve
.ie n .IP "$pageobj = $pdf\fR\->openpage \f(CW$index" 4
.el .IP "$pageobj = \f(CW$pdf\fR\->openpage \f(CW$index\fR" 4
.IX Item "$pageobj = $pdf->openpage $index"
Returns the pageobject of page \f(CW$index\fR.
.Sp
\&\fBNote:\fR on \f(CW$index\fR
.Sp
.Vb 2
\&    -1,0 ... returns the last page
\&    1 ... returns page number 1
.Ve
.ie n .IP "$xoform = $pdf\fR\->importPageIntoForm \f(CW$sourcepdf\fR, \f(CW$sourceindex" 4
.el .IP "$xoform = \f(CW$pdf\fR\->importPageIntoForm \f(CW$sourcepdf\fR, \f(CW$sourceindex\fR" 4
.IX Item "$xoform = $pdf->importPageIntoForm $sourcepdf, $sourceindex"
Returns a form-xobject created from \f(CW$sourcepdf\fR,$sourceindex.
This is useful if you want to transpose the imported page-description
somewhat differently onto a page (ie. two\-up, four\-up, duplex, etc.).
.Sp
\&\fBNote:\fR on \f(CW$index\fR
.Sp
.Vb 2
\&    -1,0 ... returns the last page
\&    1 ... returns page number 1
.Ve
.ie n .IP "$pageobj = $pdf\fR\->importpage \f(CW$sourcepdf\fR, \f(CW$sourceindex\fR, \f(CW$targetindex" 4
.el .IP "$pageobj = \f(CW$pdf\fR\->importpage \f(CW$sourcepdf\fR, \f(CW$sourceindex\fR, \f(CW$targetindex\fR" 4
.IX Item "$pageobj = $pdf->importpage $sourcepdf, $sourceindex, $targetindex"
Returns the pageobject of page \f(CW$targetindex\fR, imported from \f(CW$sourcepdf\fR,$sourceindex.
.Sp
\&\fBNote:\fR on \f(CW$index\fR
.Sp
.Vb 2
\&    -1,0 ... returns the last page
\&    1 ... returns page number 1
.Ve
.Sp
\&\fBNote:\fR you can specify a page object instead as \f(CW$targetindex\fR
so that the contents of the sourcepage will be 'merged into'.
.ie n .IP "$pagenumber = $pdf\->pages" 4
.el .IP "$pagenumber = \f(CW$pdf\fR\->pages" 4
.IX Item "$pagenumber = $pdf->pages"
Returns the number of pages in the document.
.ie n .IP "$pdf\->mediabox $name" 4
.el .IP "$pdf\->mediabox \f(CW$name\fR" 4
.IX Item "$pdf->mediabox $name"
.PD 0
.ie n .IP "$pdf\->mediabox $w\fR, \f(CW$h" 4
.el .IP "$pdf\->mediabox \f(CW$w\fR, \f(CW$h\fR" 4
.IX Item "$pdf->mediabox $w, $h"
.ie n .IP "$pdf\->mediabox $llx\fR, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury" 4
.el .IP "$pdf\->mediabox \f(CW$llx\fR, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury\fR" 4
.IX Item "$pdf->mediabox $llx, $lly, $urx, $ury"
.PD
Sets the global mediabox. Other methods: cropbox, bleedbox, trimbox and artbox.
.ie n .IP "$pdf\->cropbox $name" 4
.el .IP "$pdf\->cropbox \f(CW$name\fR" 4
.IX Item "$pdf->cropbox $name"
.PD 0
.ie n .IP "$pdf\->cropbox $w\fR, \f(CW$h" 4
.el .IP "$pdf\->cropbox \f(CW$w\fR, \f(CW$h\fR" 4
.IX Item "$pdf->cropbox $w, $h"
.ie n .IP "$pdf\->cropbox $llx\fR, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury" 4
.el .IP "$pdf\->cropbox \f(CW$llx\fR, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury\fR" 4
.IX Item "$pdf->cropbox $llx, $lly, $urx, $ury"
.PD
Sets the global cropbox.
.ie n .IP "$pdf\->bleedbox $name" 4
.el .IP "$pdf\->bleedbox \f(CW$name\fR" 4
.IX Item "$pdf->bleedbox $name"
.PD 0
.ie n .IP "$pdf\->bleedbox $w\fR, \f(CW$h" 4
.el .IP "$pdf\->bleedbox \f(CW$w\fR, \f(CW$h\fR" 4
.IX Item "$pdf->bleedbox $w, $h"
.ie n .IP "$pdf\->bleedbox $llx\fR, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury" 4
.el .IP "$pdf\->bleedbox \f(CW$llx\fR, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury\fR" 4
.IX Item "$pdf->bleedbox $llx, $lly, $urx, $ury"
.PD
Sets the global bleedbox.
.ie n .IP "$pdf\->trimbox $name" 4
.el .IP "$pdf\->trimbox \f(CW$name\fR" 4
.IX Item "$pdf->trimbox $name"
.PD 0
.ie n .IP "$pdf\->trimbox $w\fR, \f(CW$h" 4
.el .IP "$pdf\->trimbox \f(CW$w\fR, \f(CW$h\fR" 4
.IX Item "$pdf->trimbox $w, $h"
.ie n .IP "$pdf\->trimbox $llx\fR, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury" 4
.el .IP "$pdf\->trimbox \f(CW$llx\fR, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury\fR" 4
.IX Item "$pdf->trimbox $llx, $lly, $urx, $ury"
.PD
Sets the global trimbox.
.ie n .IP "$pdf\->artbox $name" 4
.el .IP "$pdf\->artbox \f(CW$name\fR" 4
.IX Item "$pdf->artbox $name"
.PD 0
.ie n .IP "$pdf\->artbox $w\fR, \f(CW$h" 4
.el .IP "$pdf\->artbox \f(CW$w\fR, \f(CW$h\fR" 4
.IX Item "$pdf->artbox $w, $h"
.ie n .IP "$pdf\->artbox $llx\fR, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury" 4
.el .IP "$pdf\->artbox \f(CW$llx\fR, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury\fR" 4
.IX Item "$pdf->artbox $llx, $lly, $urx, $ury"
.PD
Sets the global artbox.
.SH "FONT METHODS"
.IX Header "FONT METHODS"
.ie n .IP "@allFontDirs = PDF::API2::addFontDirs $dir1\fR, ..., \f(CW$dirN" 4
.el .IP "@allFontDirs = PDF::API2::addFontDirs \f(CW$dir1\fR, ..., \f(CW$dirN\fR" 4
.IX Item "@allFontDirs = PDF::API2::addFontDirs $dir1, ..., $dirN"
Adds one or more directories to the search-path for finding font files.
Returns the list of searched directories.
.ie n .IP "$font = $pdf\fR\->corefont \f(CW$fontname\fR [, \f(CW%options]" 4
.el .IP "$font = \f(CW$pdf\fR\->corefont \f(CW$fontname\fR [, \f(CW%options\fR]" 4
.IX Item "$font = $pdf->corefont $fontname [, %options]"
Returns a new adobe core font object.
.Sp
See PDF::API2::Resource::Font::CoreFont for an explanation.
.Sp
\&\fBExamples:\fR
.Sp
.Vb 4
\&    $font = $pdf->corefont('Times-Roman');
\&    $font = $pdf->corefont('Times-Bold');
\&    $font = $pdf->corefont('Helvetica');
\&    $font = $pdf->corefont('ZapfDingbats');
.Ve
.Sp
Valid \f(CW%options\fR are:
.Sp
.Vb 1
\&  '-encode' ... changes the encoding of the font from its default.
.Ve
.ie n .IP "$font = $pdf\fR\->psfont \f(CW$psfile\fR  [, \f(CW%options]" 4
.el .IP "$font = \f(CW$pdf\fR\->psfont \f(CW$psfile\fR  [, \f(CW%options\fR]" 4
.IX Item "$font = $pdf->psfont $psfile  [, %options]"
Returns a new adobe type1 font object.
.Sp
See PDF::API2::Resource::Font::Postscript for an explanation.
.Sp
\&\fBExamples:\fR
.Sp
.Vb 2
\&    $font = $pdf->psfont( 'Times-Book.pfa', -afmfile => 'Times-Book.afm' );
\&    $font = $pdf->psfont( '/fonts/Synest-FB.pfb', -pfmfile => '/fonts/Synest-FB.pfm' );
.Ve
.Sp
Valid \f(CW%options\fR are:
.Sp
.Vb 1
\&  '-encode' ... changes the encoding of the font from its default.
.Ve
.Sp
.Vb 2
\&  '-afmfile' ... specifies that font metrics to be read from the
\&                adobe font metrics file (AFM).
.Ve
.Sp
.Vb 3
\&  '-pfmfile' ... specifies that font metrics to be read from the
\&                windows printer font metrics file (PFM).
\&                (this option overrides the -encode option)
.Ve
.ie n .IP "$font = $pdf\fR\->ttfont \f(CW$ttfile\fR  [, \f(CW%options]" 4
.el .IP "$font = \f(CW$pdf\fR\->ttfont \f(CW$ttfile\fR  [, \f(CW%options\fR]" 4
.IX Item "$font = $pdf->ttfont $ttfile  [, %options]"
Returns a new truetype or opentype font object.
.Sp
See PDF::API2::Resource::CIDFont::TrueType for an explanation.
.Sp
\&\fBExamples:\fR
.Sp
.Vb 2
\&    $font = $pdf->ttfont('Times.ttf');
\&    $font = $pdf->ttfont('Georgia.otf');
.Ve
.Sp
Valid \f(CW%options\fR are:
.Sp
.Vb 1
\&  '-encode' ... changes the encoding of the font from its default.
.Ve
.ie n .IP "$font = $pdf\fR\->synfont \f(CW$basefont\fR  [, \f(CW%options]" 4
.el .IP "$font = \f(CW$pdf\fR\->synfont \f(CW$basefont\fR  [, \f(CW%options\fR]" 4
.IX Item "$font = $pdf->synfont $basefont  [, %options]"
Returns a new synthetic font object.
.Sp
See PDF::API2::Resource::Font::SynFont for an explanation.
.Sp
\&\fBExamples:\fR
.Sp
.Vb 4
\&    $cf = $pdf->corefont('Times-Roman',-encode=>'latin1');
\&    $sf = $pdf->synfont($cf,-slant=>0.85);  # compressed 85%
\&    $sfb= $pdf->synfont($cf,-bold=>1);      # embolden by 10em
\&    $sfi= $pdf->synfont($cf,-oblique=>-12); # italic at -12 degrees
.Ve
.Sp
Valid \f(CW%options\fR are:
.Sp
\&\fI\-slant\fR
\&... slant/expansion factor (0.1\-0.9 = slant, 1.1+ = expansion).
.Sp
\&\fI\-oblique\fR
\&... italic angle (+/\-)
.Sp
\&\fI\-bold\fR
\&... embolding factor (0.1+, bold=1, heavy=2, ...)
.Sp
\&\fI\-space\fR
\&... additional charspacing in em (0\-1000)
.ie n .IP "$font = $pdf\fR\->bdfont \f(CW$bdffile" 4
.el .IP "$font = \f(CW$pdf\fR\->bdfont \f(CW$bdffile\fR" 4
.IX Item "$font = $pdf->bdfont $bdffile"
Returns a new \s-1BDF\s0 font object, based on the specified adobe-bdf file.
.Sp
See PDF::API2::Resource::Font::BdFont for an explanation.
.ie n .IP "$font = $pdf\fR\->unifont \f(CW@fontspecs\fR, \f(CW%options" 4
.el .IP "$font = \f(CW$pdf\fR\->unifont \f(CW@fontspecs\fR, \f(CW%options\fR" 4
.IX Item "$font = $pdf->unifont @fontspecs, %options"
Returns a new uni-font object, based on the specified fonts and options.
.Sp
\&\fB\s-1BEWARE:\s0\fR This is not a true pdf\-object, but a virtual/abstract font-definition !
.Sp
See PDF::API2::Resource::UniFont for an explanation.
.Sp
Valid \f(CW%options\fR are:
.Sp
.Vb 1
\&  '-encode' ... changes the encoding of the font from its default.
.Ve
.SH "IMAGE METHODS"
.IX Header "IMAGE METHODS"
.ie n .IP "$jpeg = $pdf\fR\->image_jpeg \f(CW$file" 4
.el .IP "$jpeg = \f(CW$pdf\fR\->image_jpeg \f(CW$file\fR" 4
.IX Item "$jpeg = $pdf->image_jpeg $file"
Returns a new jpeg image object.
.ie n .IP "$tiff = $pdf\fR\->image_tiff \f(CW$file" 4
.el .IP "$tiff = \f(CW$pdf\fR\->image_tiff \f(CW$file\fR" 4
.IX Item "$tiff = $pdf->image_tiff $file"
Returns a new tiff image object.
.ie n .IP "$pnm = $pdf\fR\->image_pnm \f(CW$file" 4
.el .IP "$pnm = \f(CW$pdf\fR\->image_pnm \f(CW$file\fR" 4
.IX Item "$pnm = $pdf->image_pnm $file"
Returns a new pnm image object.
.ie n .IP "$png = $pdf\fR\->image_png \f(CW$file" 4
.el .IP "$png = \f(CW$pdf\fR\->image_png \f(CW$file\fR" 4
.IX Item "$png = $pdf->image_png $file"
Returns a new png image object.
.ie n .IP "$gif = $pdf\fR\->image_gif \f(CW$file" 4
.el .IP "$gif = \f(CW$pdf\fR\->image_gif \f(CW$file\fR" 4
.IX Item "$gif = $pdf->image_gif $file"
Returns a new gif image object.
.ie n .IP "$gdf = $pdf\fR\->image_gd \f(CW$gdobj\fR, \f(CW%options" 4
.el .IP "$gdf = \f(CW$pdf\fR\->image_gd \f(CW$gdobj\fR, \f(CW%options\fR" 4
.IX Item "$gdf = $pdf->image_gd $gdobj, %options"
Returns a new image object from GD::Image.
.Sp
\&\fBOptions:\fR The only option currently supported is \f(CW\*(C`\-lossless => 1\*(C'\fR.
.Sp
\&\fBExamples:\fR
.Sp
.Vb 6
\&    $jpeg = $pdf->image_jpeg('../some/nice/picture.jpeg');
\&    $tiff = $pdf->image_tiff('../some/nice/picture.tiff');
\&    $pnm = $pdf->image_pnm('../some/nice/picture.pnm');
\&    $png = $pdf->image_png('../some/nice/picture.png');
\&    $gif = $pdf->image_gif('../some/nice/picture.gif');
\&    $gdf = $pdf->image_gd($gdobj);
.Ve
.SH "COLORSPACE METHODS"
.IX Header "COLORSPACE METHODS"
.ie n .IP "$cs = $pdf\fR\->colorspace_act \f(CW$file" 4
.el .IP "$cs = \f(CW$pdf\fR\->colorspace_act \f(CW$file\fR" 4
.IX Item "$cs = $pdf->colorspace_act $file"
Returns a new colorspace-object based on a adobe-color-table file.
.Sp
See PDF::API2::Resource::ColorSpace::Indexed::ACTFile for an explanation of the file format.
.ie n .IP "$cs = $pdf\->colorspace_web" 4
.el .IP "$cs = \f(CW$pdf\fR\->colorspace_web" 4
.IX Item "$cs = $pdf->colorspace_web"
Returns a new colorspace-object based on the web color palette.
.Sp
See PDF::API2::Resource::ColorSpace::Indexed::WebColor for an explanation.
.ie n .IP "$cs = $pdf\->colorspace_hue" 4
.el .IP "$cs = \f(CW$pdf\fR\->colorspace_hue" 4
.IX Item "$cs = $pdf->colorspace_hue"
Returns a new colorspace-object based on the hue color palette.
.Sp
See PDF::API2::Resource::ColorSpace::Indexed::Hue for an explanation.
.ie n .IP "$cs = $pdf\fR\->colorspace_separation \f(CW$tint\fR, \f(CW$color" 4
.el .IP "$cs = \f(CW$pdf\fR\->colorspace_separation \f(CW$tint\fR, \f(CW$color\fR" 4
.IX Item "$cs = $pdf->colorspace_separation $tint, $color"
Returns a new separation colorspace-object based on the parameters.
.Sp
\&\fI$tint\fR can be any valid ink\-identifier, including but not limited to:
\&'Cyan', 'Magenta', 'Yellow', 'Black', 'Red', 'Green', 'Blue' or 'Orange'.
.Sp
\&\fI$color\fR must be a valid color-specification limited to:
\&'#rrggbb', '!hhssvv', '%ccmmyykk' or a \*(L"named color\*(R" (rgb).
.Sp
The colorspace model for will be automatically chosen based on the specified color.
.ie n .IP "$cs = $pdf\fR\->colorspace_devicen \e@tintCSx [, \f(CW$samples]" 4
.el .IP "$cs = \f(CW$pdf\fR\->colorspace_devicen \e@tintCSx [, \f(CW$samples\fR]" 4
.IX Item "$cs = $pdf->colorspace_devicen @tintCSx [, $samples]"
Returns a new DeviceN colorspace-object based on the parameters.
.Sp
\&\fBExample:\fR 
.Sp
.Vb 5
\&    $cy = $pdf->colorspace_separation('Cyan',    '%f000');
\&    $ma = $pdf->colorspace_separation('Magenta', '%0f00');
\&    $ye = $pdf->colorspace_separation('Yellow',  '%00f0');
\&    $bk = $pdf->colorspace_separation('Black',   '%000f');
\&    $pms023 = $pdf->colorspace_separation('PANTONE 032CV', '%0ff0');
.Ve
.Sp
.Vb 1
\&    $dncs = $pdf->colorspace_devicen( [ $cy,$ma,$ye,$bk,$pms023 ] );
.Ve
.Sp
The colorspace model for will be automatically chosen based on the first colorspace specified.
.SH "BARCODE METHODS"
.IX Header "BARCODE METHODS"
.ie n .IP "$bc = $pdf\fR\->xo_codabar \f(CW%opts" 4
.el .IP "$bc = \f(CW$pdf\fR\->xo_codabar \f(CW%opts\fR" 4
.IX Item "$bc = $pdf->xo_codabar %opts"
.PD 0
.ie n .IP "$bc = $pdf\fR\->xo_code128 \f(CW%opts" 4
.el .IP "$bc = \f(CW$pdf\fR\->xo_code128 \f(CW%opts\fR" 4
.IX Item "$bc = $pdf->xo_code128 %opts"
.ie n .IP "$bc = $pdf\fR\->xo_2of5int \f(CW%opts" 4
.el .IP "$bc = \f(CW$pdf\fR\->xo_2of5int \f(CW%opts\fR" 4
.IX Item "$bc = $pdf->xo_2of5int %opts"
.ie n .IP "$bc = $pdf\fR\->xo_3of9 \f(CW%opts" 4
.el .IP "$bc = \f(CW$pdf\fR\->xo_3of9 \f(CW%opts\fR" 4
.IX Item "$bc = $pdf->xo_3of9 %opts"
.ie n .IP "$bc = $pdf\fR\->xo_ean13 \f(CW%opts" 4
.el .IP "$bc = \f(CW$pdf\fR\->xo_ean13 \f(CW%opts\fR" 4
.IX Item "$bc = $pdf->xo_ean13 %opts"
.PD
creates the specified barcode object as a form\-xo.
.SH "OTHER METHODS"
.IX Header "OTHER METHODS"
.ie n .IP "$xo = $pdf\->xo_form" 4
.el .IP "$xo = \f(CW$pdf\fR\->xo_form" 4
.IX Item "$xo = $pdf->xo_form"
Returns a new form\-xobject.
.Sp
\&\fBExamples:\fR
.Sp
.Vb 1
\&    $xo = $pdf->xo_form;
.Ve
.ie n .IP "$egs = $pdf\->egstate" 4
.el .IP "$egs = \f(CW$pdf\fR\->egstate" 4
.IX Item "$egs = $pdf->egstate"
Returns a new extended graphics state object.
.Sp
\&\fBExamples:\fR
.Sp
.Vb 1
\&    $egs = $pdf->egstate;
.Ve
.ie n .IP "$obj = $pdf\->pattern" 4
.el .IP "$obj = \f(CW$pdf\fR\->pattern" 4
.IX Item "$obj = $pdf->pattern"
Returns a new pattern\-object.
.ie n .IP "$obj = $pdf\->shading" 4
.el .IP "$obj = \f(CW$pdf\fR\->shading" 4
.IX Item "$obj = $pdf->shading"
Returns a new shading\-object.
.ie n .IP "$otls = $pdf\->outlines" 4
.el .IP "$otls = \f(CW$pdf\fR\->outlines" 4
.IX Item "$otls = $pdf->outlines"
Returns a new or existing outlines object.
.SH "RESOURCE METHODS"
.IX Header "RESOURCE METHODS"
.ie n .IP "$pdf\->resource $type\fR, \f(CW$key\fR, \f(CW$obj\fR, \f(CW$force" 4
.el .IP "$pdf\->resource \f(CW$type\fR, \f(CW$key\fR, \f(CW$obj\fR, \f(CW$force\fR" 4
.IX Item "$pdf->resource $type, $key, $obj, $force"
Adds a resource to the global pdf tree.
.Sp
\&\fBExample:\fR
.Sp
.Vb 4
\&    $pdf->resource('Font',$fontkey,$fontobj);
\&    $pdf->resource('XObject',$imagekey,$imageobj);
\&    $pdf->resource('Shading',$shadekey,$shadeobj);
\&    $pdf->resource('ColorSpace',$spacekey,$speceobj);
.Ve
.Sp
\&\fBNote:\fR You only have to add the required resources, if
they are \s-1NOT\s0 handled by the *font*, *image*, *shade* or *space*
methods.
.SH "AUTHOR"
.IX Header "AUTHOR"
alfred reibenschuh
.SH "HISTORY"
.IX Header "HISTORY"
.Vb 3
\&    $Log: API2.pm,v $
\&    Revision 1.79  2005/03/23 16:42:06  fredo
\&    fixed typo in infoMetaAttributes
.Ve
.PP
.Vb 2
\&    Revision 1.78  2005/03/21 22:36:36  fredo
\&    fix for landscape imports
.Ve
.PP
.Vb 2
\&    Revision 1.77  2005/03/15 17:31:06  fredo
\&    corrected utf8 handling in info tags
.Ve
.PP
.Vb 2
\&    Revision 1.76  2005/03/14 23:53:51  fredo
\&    added xmpMetadata method to get/set XMP document data
.Ve
.PP
.Vb 2
\&    Revision 1.75  2005/03/14 22:01:05  fredo
\&    upd 2005
.Ve
.PP
.Vb 2
\&    Revision 1.74  2005/02/25 18:07:48  fredo
\&    no message
.Ve
.PP
.Vb 2
\&    Revision 1.73  2005/02/17 07:03:14  fredo
\&    added 'pageencaps' default option to fix unusual styled content streams
.Ve
.PP
.Vb 2
\&    Revision 1.72  2005/02/14 20:09:48  fredo
\&    fixed an openpage recompression bug / thanks to steve_wu@iinet.net.au
.Ve
.PP
.Vb 2
\&    Revision 1.71  2005/01/03 03:47:52  fredo
\&    fixed use named destination
.Ve
.PP
.Vb 2
\&    Revision 1.70  2005/01/03 03:46:25  fredo
\&    added named destination support
.Ve
.PP
.Vb 2
\&    Revision 1.69  2004/12/31 03:12:09  fredo
\&    no message
.Ve
.PP
.Vb 2
\&    Revision 1.68  2004/12/16 00:30:51  fredo
\&    added no warn for recursion
.Ve
.PP
.Vb 2
\&    Revision 1.67  2004/11/29 15:19:23  fredo
\&    added docs for bdfont, synfont and unifont
.Ve
.PP
.Vb 2
\&    Revision 1.66  2004/11/24 20:09:57  fredo
\&    added unifont
.Ve
.PP
.Vb 2
\&    Revision 1.65  2004/10/17 03:57:21  fredo
\&    added ToUnicode call for supported fonts
.Ve
.PP
.Vb 2
\&    Revision 1.64  2004/10/01 01:39:24  fredo
\&    reverted annotations import fix
.Ve
.PP
.Vb 2
\&    Revision 1.63  2004/09/30 23:57:26  fredo
\&    versioning beautify
.Ve
.PP
.Vb 2
\&    Revision 1.62  2004/09/30 22:40:41  fredo
\&    fixed pdf-producer to include OS
.Ve
.PP
.Vb 2
\&    Revision 1.61  2004/09/30 21:18:21  fredo
\&    changed file version back to cvs
.Ve
.PP
.Vb 3
\&    Revision 1.60  2004/09/20 11:22:18  fredo
\&    added default param to fix import-rotation
\&    added default param to fix annotation-import
.Ve
.PP
.Vb 2
\&    Revision 1.59  2004/09/03 12:35:09  fredo
\&    pop'd to new version
.Ve
.PP
.Vb 2
\&    Revision 1.58  2004/08/25 02:59:25  fredo
\&    disabled memoize since long-running scripts bug from reused adresses
.Ve
.PP
.Vb 2
\&    Revision 1.57  2004/07/24 23:10:55  fredo
\&    fixed memoize bug for bdf fonts
.Ve
.PP
.Vb 2
\&    Revision 1.56  2004/07/24 23:09:26  fredo
\&    added bdf fonts
.Ve
.PP
.Vb 2
\&    Revision 1.55  2004/07/23 13:41:11  fredo
\&    fixed in decoding info dictionary
.Ve
.PP
.Vb 2
\&    Revision 1.54  2004/07/21 08:07:17  fredo
\&    added devicen colorspace
.Ve
.PP
.Vb 2
\&    Revision 1.53  2004/07/15 14:28:21  fredo
\&    added devicen colorspace
.Ve
.PP
.Vb 2
\&    Revision 1.52  2004/06/22 01:33:43  fredo
\&    corrected spelling
.Ve
.PP
.Vb 2
\&    Revision 1.51  2004/06/21 22:33:10  fredo
\&    added basic pattern/shading handling
.Ve
.PP
.Vb 2
\&    Revision 1.50  2004/06/15 09:06:26  fredo
\&    forced version to 1.50 for beta state
.Ve
.PP
.Vb 2
\&    Revision 1.30  2004/06/15 08:09:07  fredo
\&    fixed memoized bug
.Ve
.PP
.Vb 2
\&    Revision 1.29  2004/06/01 00:09:57  fredo
\&    memoized *font methods for braindead invokers
.Ve
.PP
.Vb 2
\&    Revision 1.28  2004/05/28 11:29:01  fredo
\&    added -lossless param to gd images
.Ve
.PP
.Vb 2
\&    Revision 1.27  2004/05/21 10:12:29  fredo
\&    fixed slight importpage quirk
.Ve
.PP
.Vb 2
\&    Revision 1.26  2004/04/18 18:07:19  fredo
\&    fixed _findFont method
.Ve
.PP
.Vb 2
\&    Revision 1.25  2004/04/07 17:38:00  fredo
\&    added infoMetaAttributes and support code
.Ve
.PP
.Vb 2
\&    Revision 1.24  2004/04/07 10:48:53  fredo
\&    fixed handling of ColorSpace/Separation
.Ve
.PP
.Vb 2
\&    Revision 1.23  2004/04/06 21:00:52  fredo
\&    separation colorspace now a full resource
.Ve
.PP
.Vb 2
\&    Revision 1.22  2004/04/04 23:42:10  fredo
\&    fixed 270 degree rotation in openpage
.Ve
.PP
.Vb 2
\&    Revision 1.21  2004/04/04 23:36:33  fredo
\&    added simple separation colorspace
.Ve
.PP
.Vb 2
\&    Revision 1.20  2004/03/20 09:11:45  fredo
\&    modified font search path methodname
.Ve
.PP
.Vb 2
\&    Revision 1.19  2004/03/20 08:38:38  fredo
\&    added isEncrypted determinator
.Ve
.PP
.Vb 2
\&    Revision 1.18  2004/03/18 09:43:32  fredo
\&    added font search path handling
.Ve
.PP
.Vb 2
\&    Revision 1.17  2004/02/12 14:38:33  fredo
\&    added openScalar method
.Ve
.PP
.Vb 2
\&    Revision 1.16  2004/02/05 13:18:39  fredo
\&    corrected info hash utf8 usage
.Ve
.PP
.Vb 2
\&    Revision 1.15  2004/02/04 23:43:53  fredo
\&    pdf info method now properly recognized utf8 parameters
.Ve
.PP
.Vb 2
\&    Revision 1.14  2004/01/21 12:29:06  fredo
\&    moved release versioning to PDF::API2::Version
.Ve
.PP
.Vb 2
\&    Revision 1.13  2004/01/19 14:16:32  fredo
\&    update for 0.40_16
.Ve
.PP
.Vb 2
\&    Revision 1.12  2004/01/15 21:26:04  fredo
\&    docbug: fixed inconsistent links
.Ve
.PP
.Vb 2
\&    Revision 1.11  2004/01/14 18:25:41  fredo
\&    release update 0.40_15
.Ve
.PP
.Vb 2
\&    Revision 1.10  2004/01/12 13:52:41  fredo
\&    update for 0.40_14
.Ve
.PP
.Vb 2
\&    Revision 1.9  2004/01/08 23:56:20  fredo
\&    corrected producer tag versioning, updated to release 0.40_13
.Ve
.PP
.Vb 2
\&    Revision 1.8  2003/12/08 13:05:18  Administrator
\&    corrected to proper licencing statement
.Ve
.PP
.Vb 2
\&    Revision 1.7  2003/12/08 11:47:38  Administrator
\&    change step 3 for proper module versioning
.Ve
.PP
.Vb 2
\&    Revision 1.6  2003/12/08 11:46:25  Administrator
\&    change step 2 for proper module versioning
.Ve
.PP
.Vb 2
\&    Revision 1.5  2003/12/08 11:43:10  Administrator
\&    change step 1 for proper module versioning
.Ve
.PP
.Vb 2
\&    Revision 1.4  2003/11/30 19:00:43  Administrator
\&    added Code128/EAN128
.Ve
.PP
.Vb 2
\&    Revision 1.3  2003/11/30 17:07:11  Administrator
\&    merged into default
.Ve
