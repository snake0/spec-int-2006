.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PDF::API2::Basic::TTF::GSUB 3"
.TH PDF::API2::Basic::TTF::GSUB 3 "2014-04-08" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
PDF::API2::Basic::TTF::GSUB \- Module support for the GSUB table in conjunction with TTOpen
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Handles the \s-1GSUB\s0 subtables in relation to Ttopen tables. Due to the variety of
different lookup types, the data structures are not all that straightforward,
although I have tried to make life easy for myself when using this!
.SH "INSTANCE VARIABLES"
.IX Header "INSTANCE VARIABLES"
The structure of a \s-1GSUB\s0 table is the same as that given in PDF::API2::Basic::TTF::Ttopen.
Here we give some of the semantics specific to \s-1GSUB\s0 lookups.
.IP "\s-1ACTION_TYPE\s0" 4
.IX Item "ACTION_TYPE"
This is a string taking one of 4 values indicating the nature of the information
in the \s-1ACTION\s0 array of the rule:
.RS 4
.IP "g" 8
.IX Item "g"
The action contains a string of glyphs to replace the match string by
.IP "l" 8
.IX Item "l"
The action array contains a list of lookups and offsets to run, in order, on
the matched string
.IP "a" 8
.IX Item "a"
The action array is an unordered set of optional replacements for the matched
glyph. The application should make the selection somehow.
.IP "o" 8
The action array is empty (in fact there is no rule array for this type of
rule) and the \s-1ADJUST\s0 value should be added to the glyph id to find the replacement
glyph id value
.RE
.RS 4
.RE
.IP "\s-1MATCH_TYPE\s0" 4
.IX Item "MATCH_TYPE"
This indicates which type of information the various \s-1MATCH\s0 arrays (\s-1MATCH\s0, \s-1PRE\s0,
\&\s-1POST\s0) hold in the rule:
.RS 4
.IP "g" 8
.IX Item "g"
The array holds a string of glyph ids which should match exactly
.IP "c" 8
.IX Item "c"
The array holds a sequence of class definitions which each glyph should
correspondingly match to
.IP "o" 8
The array holds offsets to coverage tables
.RE
.RS 4
.RE
.SH "CORRESPONDANCE TO LAYOUT TYPES"
.IX Header "CORRESPONDANCE TO LAYOUT TYPES"
The following table gives the values for \s-1ACTION_TYPE\s0 and \s-1MATCH_TYPE\s0 for each
of the 11 different lookup types found in the \s-1GSUB\s0 table definition I have:
.PP
.Vb 3
\&                1.1 1.2 2   3   4   5.1 5.2 5.3 6.1 6.2 6.3
\&  ACTION_TYPE    o   g  g   a   g    l   l   l   l   l   l
\&  MATCH_TYPE                    g    g   c   o   g   c   o
.Ve
.PP
Hopefully, the rest of the uses of the variables should make sense from this
table.
.SH "METHODS"
.IX Header "METHODS"
.ie n .Sh "$t\->read_sub($fh, $lookup\fP, \f(CW$index)"
.el .Sh "$t\->read_sub($fh, \f(CW$lookup\fP, \f(CW$index\fP)"
.IX Subsection "$t->read_sub($fh, $lookup, $index)"
Asked by the superclass to read in from the given file the indexth subtable from
lookup number lookup. The file is positioned ready for the read.
.Sh "$t\->extension"
.IX Subsection "$t->extension"
Returns the table type number for the extension table
.ie n .Sh "$t\->out_sub($fh, $lookup\fP, \f(CW$index)"
.el .Sh "$t\->out_sub($fh, \f(CW$lookup\fP, \f(CW$index\fP)"
.IX Subsection "$t->out_sub($fh, $lookup, $index)"
Passed the filehandle to output to, suitably positioned, the lookup and subtable
index, this function outputs the subtable to \f(CW$fh\fR at that point.
.SH "AUTHOR"
.IX Header "AUTHOR"
Martin Hosken Martin_Hosken@sil.org. See PDF::API2::Basic::TTF::Font for copyright and
licensing.
