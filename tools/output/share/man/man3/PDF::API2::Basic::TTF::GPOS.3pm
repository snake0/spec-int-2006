.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PDF::API2::Basic::TTF::GPOS 3"
.TH PDF::API2::Basic::TTF::GPOS 3 "2014-04-08" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "TITLE"
.IX Header "TITLE"
PDF::API2::Basic::TTF::GPOS \- Support for Opentype \s-1GPOS\s0 tables in conjunction with TTOpen
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1GPOS\s0 table is one of the most complicated tables in the \s-1TTF\s0 spec and the
corresponding data structure abstraction is also not trivial. While much of the
structure of a \s-1GPOS\s0 is shared with a \s-1GSUB\s0 table via the PDF::API2::Basic::TTF::Ttopen
.SH "INSTANCE VARIABLES"
.IX Header "INSTANCE VARIABLES"
Here we describe the additions and lookup specific information for \s-1GPOS\s0 tables.
Unfortunately there is no one abstraction which seems to work comfortable for
all \s-1GPOS\s0 tables, so we will also examine how the variables are used for different
lookup types.
.PP
The following are the values allowed in the \s-1ACTION_TYPE\s0 and \s-1MATCH_TYPE\s0 variables:
.IP "\s-1ACTION_TYPE\s0" 4
.IX Item "ACTION_TYPE"
This can take any of the following values
.RS 4
.IP "a" 8
.IX Item "a"
The \s-1ACTION\s0 is an array of anchor tables
.IP "o" 8
Offset. There is no \s-1RULE\s0 array. The \s-1ADJUST\s0 variable contains a value record (see
later in this description)
.IP "v" 8
.IX Item "v"
The \s-1ACTION\s0 is a value record.
.IP "p" 8
.IX Item "p"
Pair adjustment. The \s-1ACTION\s0 contains an array of two value records for the matched
two glyphs.
.IP "e" 8
.IX Item "e"
Exit and Entry records. The \s-1ACTION\s0 contains an array of two anchors corresponding
to the exit and entry anchors for the glyph.
.IP "l" 8
.IX Item "l"
Indicates a lookup based contextual rule as per the \s-1GSUB\s0 table.
.RE
.RS 4
.RE
.IP "\s-1MATCH_TYPE\s0" 4
.IX Item "MATCH_TYPE"
This can take any of the following values
.RS 4
.IP "g" 8
.IX Item "g"
A glyph array
.IP "c" 8
.IX Item "c"
An array of class values
.IP "o" 8
An array of coverage tables
.RE
.RS 4
.RE
.PP
The following variables are added for Attachment Positioning Subtables:
.IP "\s-1MATCH\s0" 4
.IX Item "MATCH"
This contains an array of glyphs to match against for all \s-1RULES\s0. It is much like
having the same \s-1MATCH\s0 string in all \s-1RULES\s0. In the cases it is used so far, it only
ever contains one element.
.IP "\s-1MARKS\s0" 4
.IX Item "MARKS"
This contains a Mark array consisting of each element being a subarray of two
elements:
.RS 4
.IP "\s-1CLASS\s0" 8
.IX Item "CLASS"
The class that this mark uses on its base
.IP "\s-1ANCHOR\s0" 8
.IX Item "ANCHOR"
The anchor with which to attach this mark glyph
.RE
.RS 4
.Sp
The base table for mark to base, ligature or mark attachment positioning is
structured with the \s-1ACTION\s0 containing an array of anchors corresponding to each
attachment class. For ligatures, there is more than one \s-1RULE\s0 in the \s-1RULE\s0 array
corresponding to each glyph in the coverage table.
.RE
.PP
Other variables which are provided for informational purposes are:
.IP "\s-1VFMT\s0" 4
.IX Item "VFMT"
Value format for the adjustment of the glyph matched by the coverage table.
.IP "\s-1VFMT2\s0" 4
.IX Item "VFMT2"
Value format used in pair adjustment for the second glyph in the pair
.Sh "Value Records"
.IX Subsection "Value Records"
There is a subtype used in \s-1GPOS\s0 tables called a value record. It is used to adjust
the position of a glyph from its default position. The value record is variable
length with a bitfield at the beginning to indicate which of the following
entries are included. The bitfield is not stored since it is recalculated at
write time.
.IP "XPlacement" 4
.IX Item "XPlacement"
Horizontal adjustment for placement (not affecting other unattached glyphs)
.IP "YPlacement" 4
.IX Item "YPlacement"
Vertical adjustment for placement (not affecting other unattached glyphs)
.IP "XAdvance" 4
.IX Item "XAdvance"
Adjust the advance width glyph (used only in horizontal writing systems)
.IP "YAdvance" 4
.IX Item "YAdvance"
Adjust the vertical advance (used only in vertical writing systems)
.IP "XPlaDevice" 4
.IX Item "XPlaDevice"
Device table for device specific adjustment of horizontal placement
.IP "YPlaDevice" 4
.IX Item "YPlaDevice"
Device table for device specific adjustment of vertical placement
.IP "XAdvDevice" 4
.IX Item "XAdvDevice"
Device table for device specific adjustment of horizontal advance
.IP "YAdDevice" 4
.IX Item "YAdDevice"
Device table for device specific adjustment of vertical advance
.IP "XIdPlacement" 4
.IX Item "XIdPlacement"
Horizontal placement metric id (for Multiple Master fonts \- but that's all I know!)
.IP "YIdPlacement" 4
.IX Item "YIdPlacement"
Vertical placement metric id
.IP "XIdAdvance" 4
.IX Item "XIdAdvance"
Horizontal advance metric id
.IP "YIdAdvance" 4
.IX Item "YIdAdvance"
Vertical advance metric id
.SH "CORRESPONDANCE TO LAYOUT TYPES"
.IX Header "CORRESPONDANCE TO LAYOUT TYPES"
Here is what is stored in the \s-1ACTION_TYPE\s0 and \s-1MATCH_TYPE\s0 for each of the known
\&\s-1GPOS\s0 subtable types:
.PP
.Vb 3
\&                1.1 1.2 2.1 2.2 3   4   5   6   7.1 7.2 7.3 8.1 8.2 8.3
\&  ACTION_TYPE    o   v   p   p  e   a   a   a    l   l   l   l   l   l
\&  MATCH_TYPE             g   c                   g   c   o   g   c   o
.Ve
.SH "METHODS"
.IX Header "METHODS"
.Sh "read_sub"
.IX Subsection "read_sub"
Reads the subtable into the data structures
.Sh "$t\->extension"
.IX Subsection "$t->extension"
Returns the table type number for the extension table
.Sh "$t\->out_sub"
.IX Subsection "$t->out_sub"
Outputs the subtable to the given filehandle
.ie n .Sh "$t\->read_value($format, $base\fP, \f(CW$lookup\fP, \f(CW$fh)"
.el .Sh "$t\->read_value($format, \f(CW$base\fP, \f(CW$lookup\fP, \f(CW$fh\fP)"
.IX Subsection "$t->read_value($format, $base, $lookup, $fh)"
Reads a value record from the current location in the file, according to the
format given.
.ie n .Sh "$t\->read_delta($offset, $base\fP, \f(CW$lookup\fP, \f(CW$fh)"
.el .Sh "$t\->read_delta($offset, \f(CW$base\fP, \f(CW$lookup\fP, \f(CW$fh\fP)"
.IX Subsection "$t->read_delta($offset, $base, $lookup, $fh)"
Reads a delta (device table) at the given offset if it hasn't already been read.
Store the offset and item in the lookup cache ($lookup\->{' \s-1CACHE\s0'})
.ie n .Sh "$t\->read_anchor($offset, $base\fP, \f(CW$lookup\fP, \f(CW$fh)"
.el .Sh "$t\->read_anchor($offset, \f(CW$base\fP, \f(CW$lookup\fP, \f(CW$fh\fP)"
.IX Subsection "$t->read_anchor($offset, $base, $lookup, $fh)"
Reads an Anchor table at the given offset if it hasn't already been read.
.Sh "$t\->fmt_value"
.IX Subsection "$t->fmt_value"
Returns the value format for a given value record
.Sh "$t\->out_value"
.IX Subsection "$t->out_value"
Returns the output string for the outputting of the value for a given format. Also
updates the offset cache for any device tables referenced.
.SH "AUTHOR"
.IX Header "AUTHOR"
Martin Hosken Martin_Hosken@sil.org. See PDF::API2::Basic::TTF::Font for copyright and
licensing.
