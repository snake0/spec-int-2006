.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PDF::API2::Lite 3"
.TH PDF::API2::Lite 3 "2014-04-08" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
PDF::API2::Lite \- lite pdf creation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    $pdf = PDF::API2::Lite->new;
\&    $pdf->page(595,842);
\&    $img = $pdf->image('some.jpg');
\&    $font = $pdf->corefont('Times-Roman');
\&    $font = $pdf->ttfont('TimesNewRoman.ttf');
.Ve
.SH "METHODS"
.IX Header "METHODS"
.Sh "PDF::API2::Lite"
.IX Subsection "PDF::API2::Lite"
.RE
.IP "$pdf = PDF::API::Lite\->new"
.IX Item "$pdf = PDF::API::Lite->new"
.RE
.PD 0
.IP "$pdf\->page"
.IX Item "$pdf->page"
.RE
.ie n .IP "$pdf\->page $width,$height"
.el .IP "$pdf\->page \f(CW$width\fR,$height"
.IX Item "$pdf->page $width,$height"
.RE
.ie n .IP "$pdf\->page $llx\fR, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury"
.el .IP "$pdf\->page \f(CW$llx\fR, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury\fR"
.IX Item "$pdf->page $llx, $lly, $urx, $ury"
.PD
Opens a new page.
.RE
.ie n .IP "$pdf\->mediabox $w\fR, \f(CW$h"
.el .IP "$pdf\->mediabox \f(CW$w\fR, \f(CW$h\fR"
.IX Item "$pdf->mediabox $w, $h"
.RE
.PD 0
.ie n .IP "$pdf\->mediabox $llx\fR, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury"
.el .IP "$pdf\->mediabox \f(CW$llx\fR, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury\fR"
.IX Item "$pdf->mediabox $llx, $lly, $urx, $ury"
.PD
Sets the global mediabox.
.RE
.ie n .IP "$pdf\->saveas $file"
.el .IP "$pdf\->saveas \f(CW$file\fR"
.IX Item "$pdf->saveas $file"
Saves the document (may not be modified later) and
deallocates the pdf\-structures.
.RE
.ie n .IP "$font = $pdf\fR\->corefont \f(CW$fontname"
.el .IP "$font = \f(CW$pdf\fR\->corefont \f(CW$fontname\fR"
.IX Item "$font = $pdf->corefont $fontname"
Returns a new or existing adobe core font object.
.PP
\&\fBExamples:\fR
.PP
.Vb 4
\&    $font = $pdf->corefont('Times-Roman');
\&    $font = $pdf->corefont('Times-Bold');
\&    $font = $pdf->corefont('Helvetica');
\&    $font = $pdf->corefont('ZapfDingbats');
.Ve
.RE
.ie n .IP "$font = $pdf\fR\->ttfont \f(CW$ttfile"
.el .IP "$font = \f(CW$pdf\fR\->ttfont \f(CW$ttfile\fR"
.IX Item "$font = $pdf->ttfont $ttfile"
Returns a new or existing truetype font object.
.PP
\&\fBExamples:\fR
.PP
.Vb 3
\&    $font = $pdf->ttfont('TimesNewRoman.ttf');
\&    $font = $pdf->ttfont('/fonts/Univers-Bold.ttf');
\&    $font = $pdf->ttfont('../Democratica-SmallCaps.ttf');
.Ve
.RE
.ie n .IP "$font = $pdf\fR\->psfont \f(CW$pfb\fR, \f(CW$afm\fR, \f(CW$encoding"
.el .IP "$font = \f(CW$pdf\fR\->psfont \f(CW$pfb\fR, \f(CW$afm\fR, \f(CW$encoding\fR"
.IX Item "$font = $pdf->psfont $pfb, $afm, $encoding"
Returns a new type1 font object.
.PP
\&\fBExamples:\fR
.PP
.Vb 2
\&    $font = $pdf->psfont('TimesRoman.pfb','TimesRoman.afm','latin1');
\&    $font = $pdf->psfont('/fonts/Univers.pfb','/fonts/Univers.afm','latin2');
.Ve
.RE
.ie n .IP "$egs = $pdf\->create_egs"
.el .IP "$egs = \f(CW$pdf\fR\->create_egs"
.IX Item "$egs = $pdf->create_egs"
Returns a new extended-graphics-state object.
.PP
\&\fBExamples:\fR
.PP
.Vb 1
\&    $egs = $pdf->create_egs;
.Ve
.RE
.ie n .IP "$img = $pdf\fR\->image_jpeg \f(CW$file"
.el .IP "$img = \f(CW$pdf\fR\->image_jpeg \f(CW$file\fR"
.IX Item "$img = $pdf->image_jpeg $file"
Returns a new jpeg-image object.
.RE
.ie n .IP "$img = $pdf\fR\->image_png \f(CW$file"
.el .IP "$img = \f(CW$pdf\fR\->image_png \f(CW$file\fR"
.IX Item "$img = $pdf->image_png $file"
Returns a new png-image object.
.RE
.ie n .IP "$img = $pdf\fR\->image_tiff \f(CW$file"
.el .IP "$img = \f(CW$pdf\fR\->image_tiff \f(CW$file\fR"
.IX Item "$img = $pdf->image_tiff $file"
Returns a new tiff-image object.
.RE
.ie n .IP "$img = $pdf\fR\->image_pnm \f(CW$file"
.el .IP "$img = \f(CW$pdf\fR\->image_pnm \f(CW$file\fR"
.IX Item "$img = $pdf->image_pnm $file"
Returns a new pnm-image object.
.RE
.IP "$pdf\->savestate"
.IX Item "$pdf->savestate"
Saves the state of the page.
.RE
.IP "$pdf\->restorestate"
.IX Item "$pdf->restorestate"
Restores the state of the page.
.RE
.ie n .IP "$pdf\->egstate $egs"
.el .IP "$pdf\->egstate \f(CW$egs\fR"
.IX Item "$pdf->egstate $egs"
Sets extended\-graphics\-state.
.RE
.ie n .IP "$pdf\->fillcolor $color"
.el .IP "$pdf\->fillcolor \f(CW$color\fR"
.IX Item "$pdf->fillcolor $color"
Sets fillcolor.
.RE
.ie n .IP "$pdf\->strokecolor $color"
.el .IP "$pdf\->strokecolor \f(CW$color\fR"
.IX Item "$pdf->strokecolor $color"
Sets strokecolor.
.PP
\&\fBDefined color-names are:\fR
.PP
.Vb 18
\&    aliceblue, antiquewhite, aqua, aquamarine, azure, beige, bisque, black, blanchedalmond,
\&    blue, blueviolet, brown, burlywood, cadetblue, chartreuse, chocolate, coral, cornflowerblue,
\&    cornsilk, crimson, cyan, darkblue, darkcyan, darkgoldenrod, darkgray, darkgreen, darkgrey,
\&    darkkhaki, darkmagenta, darkolivegreen, darkorange, darkorchid, darkred, darksalmon,
\&    darkseagreen, darkslateblue, darkslategray, darkslategrey, darkturquoise, darkviolet,
\&    deeppink, deepskyblue, dimgray, dimgrey, dodgerblue, firebrick, floralwhite, forestgreen,
\&    fuchsia, gainsboro, ghostwhite, gold, goldenrod, gray, grey, green, greenyellow, honeydew,
\&    hotpink, indianred, indigo, ivory, khaki, lavender, lavenderblush, lawngreen, lemonchiffon,
\&    lightblue, lightcoral, lightcyan, lightgoldenrodyellow, lightgray, lightgreen, lightgrey,
\&    lightpink, lightsalmon, lightseagreen, lightskyblue, lightslategray, lightslategrey,
\&    lightsteelblue, lightyellow, lime, limegreen, linen, magenta, maroon, mediumaquamarine,
\&    mediumblue, mediumorchid, mediumpurple, mediumseagreen, mediumslateblue, mediumspringgreen,
\&    mediumturquoise, mediumvioletred, midnightblue, mintcream, mistyrose, moccasin, navajowhite,
\&    navy, oldlace, olive, olivedrab, orange, orangered, orchid, palegoldenrod, palegreen,
\&    paleturquoise, palevioletred, papayawhip, peachpuff, peru, pink, plum, powderblue, purple,
\&    red, rosybrown, royalblue, saddlebrown, salmon, sandybrown, seagreen, seashell, sienna,
\&    silver, skyblue, slateblue, slategray, slategrey, snow, springgreen, steelblue, tan, teal,
\&    thistle, tomato, turquoise, violet, wheat, white, whitesmoke, yellow, yellowgreen
.Ve
.PP
or the rgb\-hex\-notation:
.PP
.Vb 1
\&    #rgb, #rrggbb, #rrrgggbbb and #rrrrggggbbbb
.Ve
.PP
or the cmyk\-hex\-notation:
.PP
.Vb 1
\&    %cmyk, %ccmmyykk, %cccmmmyyykkk and %ccccmmmmyyyykkkk
.Ve
.PP
or the hsl\-hex\-notation:
.PP
.Vb 1
\&    &hsl, &hhssll, &hhhssslll and &hhhhssssllll
.Ve
.PP
and additionally the hsv\-hex\-notation:
.PP
.Vb 1
\&    !hsv, !hhssvv, !hhhsssvvv and !hhhhssssvvvv
.Ve
.RE
.ie n .IP "$pdf\->linedash @dash"
.el .IP "$pdf\->linedash \f(CW@dash\fR"
.IX Item "$pdf->linedash @dash"
Sets linedash.
.RE
.ie n .IP "$pdf\->linewidth $width"
.el .IP "$pdf\->linewidth \f(CW$width\fR"
.IX Item "$pdf->linewidth $width"
Sets linewidth.
.RE
.ie n .IP "$pdf\->transform %opts"
.el .IP "$pdf\->transform \f(CW%opts\fR"
.IX Item "$pdf->transform %opts"
Sets transformations (eg. translate, rotate, scale, skew) in pdf-canonical order.
.PP
\&\fBExample:\fR
.PP
.Vb 6
\&    $pdf->transform(
\&        -translate => [$x,$y],
\&        -rotate    => $rot,
\&        -scale     => [$sx,$sy],
\&        -skew      => [$sa,$sb],
\&    )
.Ve
.RE
.ie n .IP "$pdf\->move $x\fR, \f(CW$y"
.el .IP "$pdf\->move \f(CW$x\fR, \f(CW$y\fR"
.IX Item "$pdf->move $x, $y"
.RE
.PD 0
.ie n .IP "$pdf\->line $x\fR, \f(CW$y"
.el .IP "$pdf\->line \f(CW$x\fR, \f(CW$y\fR"
.IX Item "$pdf->line $x, $y"
.RE
.ie n .IP "$pdf\->curve $x1\fR, \f(CW$y1\fR, \f(CW$x2\fR, \f(CW$y2\fR, \f(CW$x3\fR, \f(CW$y3"
.el .IP "$pdf\->curve \f(CW$x1\fR, \f(CW$y1\fR, \f(CW$x2\fR, \f(CW$y2\fR, \f(CW$x3\fR, \f(CW$y3\fR"
.IX Item "$pdf->curve $x1, $y1, $x2, $y2, $x3, $y3"
.RE
.ie n .IP "$pdf\->arc $x\fR, \f(CW$y\fR, \f(CW$a\fR, \f(CW$b\fR, \f(CW$alfa\fR, \f(CW$beta\fR, \f(CW$move"
.el .IP "$pdf\->arc \f(CW$x\fR, \f(CW$y\fR, \f(CW$a\fR, \f(CW$b\fR, \f(CW$alfa\fR, \f(CW$beta\fR, \f(CW$move\fR"
.IX Item "$pdf->arc $x, $y, $a, $b, $alfa, $beta, $move"
.RE
.ie n .IP "$pdf\->ellipse $x\fR, \f(CW$y\fR, \f(CW$a\fR, \f(CW$b"
.el .IP "$pdf\->ellipse \f(CW$x\fR, \f(CW$y\fR, \f(CW$a\fR, \f(CW$b\fR"
.IX Item "$pdf->ellipse $x, $y, $a, $b"
.RE
.ie n .IP "$pdf\->circle $x\fR, \f(CW$y\fR, \f(CW$r"
.el .IP "$pdf\->circle \f(CW$x\fR, \f(CW$y\fR, \f(CW$r\fR"
.IX Item "$pdf->circle $x, $y, $r"
.RE
.ie n .IP "$pdf\->rect $x\fR,$y, \f(CW$w,$h"
.el .IP "$pdf\->rect \f(CW$x\fR,$y, \f(CW$w\fR,$h"
.IX Item "$pdf->rect $x,$y, $w,$h"
.RE
.ie n .IP "$pdf\->rectxy $x1\fR,$y1, \f(CW$x2,$y2"
.el .IP "$pdf\->rectxy \f(CW$x1\fR,$y1, \f(CW$x2\fR,$y2"
.IX Item "$pdf->rectxy $x1,$y1, $x2,$y2"
.RE
.ie n .IP "$pdf\->poly $x1\fR,$y1, ..., \f(CW$xn,$yn"
.el .IP "$pdf\->poly \f(CW$x1\fR,$y1, ..., \f(CW$xn\fR,$yn"
.IX Item "$pdf->poly $x1,$y1, ..., $xn,$yn"
.RE
.IP "$pdf\->close"
.IX Item "$pdf->close"
.RE
.IP "$pdf\->stroke"
.IX Item "$pdf->stroke"
.RE
.IP "$pdf\->fill"
.IX Item "$pdf->fill"
.RE
.IP "$pdf\->fillstroke"
.IX Item "$pdf->fillstroke"
.RE
.ie n .IP "$pdf\->image $imgobj\fR, \f(CW$x\fR,$y, \f(CW$w,$h"
.el .IP "$pdf\->image \f(CW$imgobj\fR, \f(CW$x\fR,$y, \f(CW$w\fR,$h"
.IX Item "$pdf->image $imgobj, $x,$y, $w,$h"
.RE
.ie n .IP "$pdf\->image $imgobj\fR, \f(CW$x\fR,$y, \f(CW$scale"
.el .IP "$pdf\->image \f(CW$imgobj\fR, \f(CW$x\fR,$y, \f(CW$scale\fR"
.IX Item "$pdf->image $imgobj, $x,$y, $scale"
.RE
.ie n .IP "$pdf\->image $imgobj\fR, \f(CW$x,$y"
.el .IP "$pdf\->image \f(CW$imgobj\fR, \f(CW$x\fR,$y"
.IX Item "$pdf->image $imgobj, $x,$y"
.PD
\&\fBPlease Note:\fR The width/height or scale given
is in user-space coordinates which is subject to
transformations which may have been specified beforehand.
.PP
Per default this has a 72dpi resolution, so if you want an
image to have a 150 or 300dpi resolution, you should specify
a scale of 72/150 (or 72/300) or adjust width/height accordingly.
.RE
.IP "$pdf\->textstart"
.IX Item "$pdf->textstart"
.RE
.PD 0
.ie n .IP "$pdf\->textfont $fontobj,$size"
.el .IP "$pdf\->textfont \f(CW$fontobj\fR,$size"
.IX Item "$pdf->textfont $fontobj,$size"
.RE
.ie n .IP "$txt\->textlead $leading"
.el .IP "$txt\->textlead \f(CW$leading\fR"
.IX Item "$txt->textlead $leading"
.RE
.ie n .IP "$pdf\->text $string"
.el .IP "$pdf\->text \f(CW$string\fR"
.IX Item "$pdf->text $string"
.PD
Applys the given text.
.RE
.IP "$pdf\->nl"
.IX Item "$pdf->nl"
.RE
.PD 0
.IP "$pdf\->textend"
.IX Item "$pdf->textend"
.RE
.ie n .IP "$pdf\->print $font\fR, \f(CW$size\fR, \f(CW$x\fR, \f(CW$y\fR, \f(CW$rot\fR, \f(CW$just\fR, \f(CW$text"
.el .IP "$pdf\->print \f(CW$font\fR, \f(CW$size\fR, \f(CW$x\fR, \f(CW$y\fR, \f(CW$rot\fR, \f(CW$just\fR, \f(CW$text\fR"
.IX Item "$pdf->print $font, $size, $x, $y, $rot, $just, $text"
.PD
Convenience wrapper for shortening the textstart..textend sequence.
.SH "AUTHOR"
.IX Header "AUTHOR"
alfred reibenschuh
.SH "HISTORY"
.IX Header "HISTORY"
.Vb 3
\&    $Log: Lite.pm,v $
\&    Revision 1.10  2005/03/14 22:01:05  fredo
\&    upd 2005
.Ve
.PP
.Vb 2
\&    Revision 1.9  2005/02/28 18:00:06  fredo
\&    removed color method since businesscolor is not available anymore in PDF::API2
.Ve
.PP
.Vb 2
\&    Revision 1.8  2004/12/16 00:30:51  fredo
\&    added no warn for recursion
.Ve
.PP
.Vb 2
\&    Revision 1.7  2004/06/15 09:11:38  fredo
\&    removed cr+lf
.Ve
.PP
.Vb 2
\&    Revision 1.6  2004/06/07 19:44:12  fredo
\&    cleaned out cr+lf for lf
.Ve
.PP
.Vb 2
\&    Revision 1.5  2004/05/21 15:04:43  fredo
\&    fixed NAME pod bug for cpan indexer
.Ve
.PP
.Vb 2
\&    Revision 1.4  2003/12/08 13:05:19  Administrator
\&    corrected to proper licencing statement
.Ve
.PP
.Vb 2
\&    Revision 1.3  2003/11/30 17:11:55  Administrator
\&    merged into default
.Ve
.PP
.Vb 2
\&    Revision 1.2.2.1  2003/11/30 16:56:21  Administrator
\&    merged into default
.Ve
.PP
.Vb 2
\&    Revision 1.2  2003/11/30 11:32:56  Administrator
\&    added CVS id/log
.Ve
