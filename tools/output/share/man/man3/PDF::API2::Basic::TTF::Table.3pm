.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PDF::API2::Basic::TTF::Table 3"
.TH PDF::API2::Basic::TTF::Table 3 "2014-04-08" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
PDF::API2::Basic::TTF::Table \- Superclass for tables and used for tables we don't have a class for
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Looks after the purely table aspects of a \s-1TTF\s0 table, such as whether the table
has been read before, locating the file pointer, etc. Also copies tables from
input to output.
.SH "INSTANCE VARIABLES"
.IX Header "INSTANCE VARIABLES"
Instance variables start with a space
.IP "read" 4
.IX Item "read"
Flag which indicates that the table has already been read from file.
.IP "dat" 4
.IX Item "dat"
Allows the creation of unspecific tables. Data is simply output to any font
file being created.
.IP "\s-1INFILE\s0" 4
.IX Item "INFILE"
The read file handle
.IP "\s-1OFFSET\s0" 4
.IX Item "OFFSET"
Location of the file in the input file
.IP "\s-1LENGTH\s0" 4
.IX Item "LENGTH"
Length in the input directory
.IP "\s-1CSUM\s0" 4
.IX Item "CSUM"
Checksum read from the input file's directory
.IP "\s-1PARENT\s0" 4
.IX Item "PARENT"
The PDF::API2::Basic::TTF::Font that table is part of
.SH "METHODS"
.IX Header "METHODS"
.Sh "PDF::API2::Basic::TTF::Table\->new(%parms)"
.IX Subsection "PDF::API2::Basic::TTF::Table->new(%parms)"
Creates a new table or subclass. Table instance variables are passed in
at this point as an associative array.
.Sh "$t\->read"
.IX Subsection "$t->read"
Reads the table from the input file. Acts as a superclass to all true tables.
This method marks the table as read and then just sets the input file pointer
but does not read any data. If the table has already been read, then returns
\&\f(CW\*(C`undef\*(C'\fR else returns \f(CW$self\fR
.Sh "$t\->read_dat"
.IX Subsection "$t->read_dat"
Reads the table into the \f(CW\*(C`dat\*(C'\fR instance variable for those tables which don't
know any better
.Sh "$t\->out($fh)"
.IX Subsection "$t->out($fh)"
Writes out the table to the font file. If there is anything in the
\&\f(CW\*(C`data\*(C'\fR instance variable then this is output, otherwise the data is copied
from the input file to the output
.Sh "$t\->out_xml($context)"
.IX Subsection "$t->out_xml($context)"
Outputs this table in \s-1XML\s0 format. The table is first read (if not already read) and then if
there is no subclass, then the data is dumped as hex data
.Sh "$t\->XML_element"
.IX Subsection "$t->XML_element"
Output a particular element based on its contents.
.ie n .Sh "$t\->XML_end($context, $tag\fP, \f(CW%attrs)"
.el .Sh "$t\->XML_end($context, \f(CW$tag\fP, \f(CW%attrs\fP)"
.IX Subsection "$t->XML_end($context, $tag, %attrs)"
Handles the default type of <data> for those tables which aren't subclassed
.Sh "$t\->dirty($val)"
.IX Subsection "$t->dirty($val)"
This sets the dirty flag to the given value or 1 if no given value. It returns the
value of the flag
.Sh "$t\->update"
.IX Subsection "$t->update"
Each table knows how to update itself. This consists of doing whatever work
is required to ensure that the memory version of the table is consistent
and that other parameters in other tables have been updated accordingly.
I.e. by the end of sending \f(CW\*(C`update\*(C'\fR to all the tables, the memory version
of the font should be entirely consistent.
.PP
Some tables which do no work indicate to themselves the need to update
themselves by setting isDirty above 1. This method resets that accordingly.
.Sh "$t\->empty"
.IX Subsection "$t->empty"
Clears a table of all data to the level of not having been read
.Sh "$t\->release"
.IX Subsection "$t->release"
Releases \s-1ALL\s0 of the memory used by this table, and all of its component/child
objects.  This method is called automatically by
\&'\f(CW\*(C`PDF::API2::Basic::TTF::Font\-E<GT>release\*(C'\fR' (so you don't have to call it yourself).
.PP
\&\fB\s-1NOTE\s0\fR, that it is important that this method get called at some point prior
to the actual destruction of the object.  Internally, we track things in a
structure that can result in circular references, and without calling
\&'\f(CW\*(C`release()\*(C'\fR' these will not properly get cleaned up by Perl.  Once this
method has been called, though, don't expect to be able to do anything with the
\&\f(CW\*(C`PDF::API2::Basic::TTF::Table\*(C'\fR object; it'll have \fBno\fR internal state whatsoever.
.PP
\&\fBDeveloper note:\fR  As part of the brute-force cleanup done here, this method
will throw a warning message whenever unexpected key values are found within
the \f(CW\*(C`PDF::API2::Basic::TTF::Table\*(C'\fR object.  This is done to help ensure that any
unexpected and unfreed values are brought to your attention so that you can bug
us to keep the module updated properly; otherwise the potential for memory
leaks due to dangling circular references will exist.
.SH "BUGS"
.IX Header "BUGS"
No known bugs
.SH "AUTHOR"
.IX Header "AUTHOR"
Martin Hosken Martin_Hosken@sil.org. See PDF::API2::Basic::TTF::Font for copyright and
licensing.
