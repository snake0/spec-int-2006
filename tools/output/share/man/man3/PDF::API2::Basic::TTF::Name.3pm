.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PDF::API2::Basic::TTF::Name 3"
.TH PDF::API2::Basic::TTF::Name 3 "2014-04-08" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
PDF::API2::Basic::TTF::Name \- String table for a TTF font
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Strings are held by number, platform, encoding and language. Strings are
accessed as:
.PP
.Vb 1
\&    $f->{'name'}{'strings'}[$number][$platform_id][$encoding_id]{$language_id}
.Ve
.PP
Notice that the language is held in an associative array due to its sparse
nature on some platforms such as Microsoft ($pid = 3). Notice also that the
array order is different from the stored array order (platform, encoding,
language, number) to allow for easy manipulation of strings by number (which is
what I guess most people will want to do).
.PP
By default, \f(CW$PDF::API2::Basic::TTF::Name::utf8\fR is set to 1, and strings will be stored as \s-1UTF8\s0 wherever
possible. The method \f(CW\*(C`is_utf8\*(C'\fR can be used to find out if a string in a particular
platform and encoding will be returned as \s-1UTF8\s0. Unicode strings are always
converted if utf8 is requested. Otherwise, strings are stored according to platform:
.PP
.Vb 1
\&    ***WARNING NON-UTF8 is deprecated and utf8 strings has become the default***
.Ve
.PP
You now have to set <$PDF::API2::Basic::TTF::Name::utf8> to 0 to get the old behaviour.
.IP "Apple Unicode (platform id = 0)" 4
.IX Item "Apple Unicode (platform id = 0)"
Data is stored as network ordered \s-1UCS2\s0. There is no encoding id for this platform
but there are language ids as per Mac language ids.
.IP "Mac (platform id = 1)" 4
.IX Item "Mac (platform id = 1)"
Data is stored as 8\-bit binary data, leaving the interpretation to the user
according to encoding id.
.IP "Unicode (platform id = 2)" 4
.IX Item "Unicode (platform id = 2)"
Currently stored as 16\-bit network ordered \s-1UCS2\s0. Upon release of Perl 5.005 this
will change to utf8 assuming current \s-1UCS2\s0 semantics for all encoding ids.
.IP "Windows (platform id = 3)" 4
.IX Item "Windows (platform id = 3)"
As per Unicode, the data is currently stored as 16\-bit network ordered \s-1UCS2\s0. Upon
release of Perl 5.005 this will change to utf8 assuming current \s-1UCS2\s0 semantics for
all encoding ids.
.SH "INSTANCE VARIABLES"
.IX Header "INSTANCE VARIABLES"
.IP "strings" 4
.IX Item "strings"
An array of arrays, etc.
.SH "METHODS"
.IX Header "METHODS"
.Sh "$t\->read"
.IX Subsection "$t->read"
Reads all the names into memory
.Sh "$t\->out($fh)"
.IX Subsection "$t->out($fh)"
Writes out all the strings
.ie n .Sh "$t\->XML_element($context, $depth\fP, \f(CW$key\fP, \f(CW$value)"
.el .Sh "$t\->XML_element($context, \f(CW$depth\fP, \f(CW$key\fP, \f(CW$value\fP)"
.IX Subsection "$t->XML_element($context, $depth, $key, $value)"
Outputs the string element in nice \s-1XML\s0 (which is all the table really!)
.ie n .Sh "$t\->XML_end($context, $tag\fP, \f(CW%attrs)"
.el .Sh "$t\->XML_end($context, \f(CW$tag\fP, \f(CW%attrs\fP)"
.IX Subsection "$t->XML_end($context, $tag, %attrs)"
Store strings in the right place
.ie n .Sh "is_utf8($pid, $eid)"
.el .Sh "is_utf8($pid, \f(CW$eid\fP)"
.IX Subsection "is_utf8($pid, $eid)"
Returns whether a string of a given platform and encoding is going to be in \s-1UTF8\s0
.Sh "find_name($nid)"
.IX Subsection "find_name($nid)"
Hunts down a name in all the standard places and returns the string and for an
array context the pid, eid & lid as well
.SH "BUGS"
.IX Header "BUGS"
.IP "\(bu" 4
Unicode type strings will be stored in utf8 for all known platforms,
once Perl 5.6 has been released and I can find all the mapping tables, etc.
.SH "AUTHOR"
.IX Header "AUTHOR"
Martin Hosken Martin_Hosken@sil.org. See PDF::API2::Basic::TTF::Font for copyright and
licensing.
