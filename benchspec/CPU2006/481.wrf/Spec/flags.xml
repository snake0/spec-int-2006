<?xml version="1.0"?>
<!DOCTYPE flagsdescription SYSTEM
       "http://www.spec.org/dtd/cpuflags1.dtd">

<!-- This file defines flags that appear in the sources for 481.wrf.

  Copyright (C) 2006 Standard Performance Evaluation Corporation

  $Revision: 4550 $
  $Date: 2006-07-10 22:56:40 -0400 (Mon, 10 Jul 2006) $
-->
<flagsdescription>

<!-- Normal flags file should suggest a name for themselves -->
<filename>481.wrf.flags</filename>

<title>481.wrf Flags</title>

<header>
<![CDATA[
<p>These are flags that appear in the benchmark sources, categorized as to
whether they are portability candidates, mandatory, or forbidden.
</p>
]]>
</header>

<header class="forbidden">
<![CDATA[
<p>Using any of the flags below for a publishable run is not permitted.</p>
<p>Note that many of the flags classified as "forbidden" are classified as
such only because they were not needed when doing the initial porting work
for CPU2006, and because the impact of their use was not evaluated.</p>
<p>If you find that you need any of the flags below, please notify
<a href="mailto:cpu2006support@spec.org">cpu2006support@spec.org</a>.</p>
]]>
</header>

<!-- Mandatory flags begin here -->

<flag name="specpp_boundary" class="mandatory" regexp="-w\b" compilers="specpp">
<example>
-w
</example>
This flag enables word-boundaries in the specpp source preprocessor.
</flag>

<flag name="specpp_modules" class="mandatory" regexp="-m literal\.pm\b" compilers="specpp">
<example>
-m literal.pm
</example>
This flag selects the "literal" preprocessor modules for the specpp source
preprocessor.  This module allows literal strings to pass through the
preprocessor without any macros in the string being replaced.
</flag>

<flag name="currdir_inc" class="mandatory" regexp="-I\.(?:/netcdf/include)?(?:\s+|$)">
<example>-I., -I./netcdf/include</example>
This flag is included automatically by Spec/object.pm.
</flag>

<flag name="wordsizes" class="mandatory" regexp="-D[IDRL]WORDSIZE=\d+\b">
<!-- This flag 'DWORDSIZE' is not used in the source and should be removed
     from this file and from object.pm.
-->
This flag sets the default sizes (in byte) for various data types.  It is
defined in object.pm and cannot be changed.
</flag>

<flag name="DTRIEDNTRUE" class="mandatory">
<!-- This flag is not used in the source and should be removed from this
     file and from object.pm.
-->
Default flag defined in object.pm and cannot be changed.
</flag>

<flag name="DLIMIT_ARGS" class="mandatory">
<!-- This flag is not used in the source and should be removed from this
     file and from object.pm.
-->
Default flag defined in object.pm and cannot be changed.
</flag>

<flag name="DNMM_MAX_DIM" class="mandatory">
<!-- This flag is not used in the source and should be removed from this
     file and from object.pm.
-->
Default flag defined in object.pm and cannot be changed.
</flag>

<flag name="DCONFIG_BUF_LEN" class="mandatory">
This macro defines the size of the unused configuration buffer in words.
It is set in object.pm and cannot be changed.
</flag>

<flag name="DMAX_DOMAINS_F" class="mandatory">
This macro sets the maximum number of domains (number of grids the model
will be running).  It is set in object.pm and cannot be changed.
</flag>

<flag name="core_names" class="mandatory" regexp="[-/]D(?:NMM|COAMPS|EM|EXP)_CORE=\d+">
<example>
-DEM_CORE=1,
-DNMM_CORE=0,
-DCOAMPS_CORE=0,
-DEXP_CORE=0
</example>
These macros determine whether or not the named model core is built.  The
default values set in object.pm may not be changed.
</flag>

<flag name="DF90_STANDALONE" class="mandatory">
For standalone code. The default value set in object.pm may not be changed.
</flag>

<flag name="DINTIO" class="mandatory">
This flag specifies that the ext_internal I/O module should be used.
The default value set in object.pm may not be changed.
</flag>

<flag name="DNETCDF" class="mandatory">
The flag specifies the use of NetCDF for I/O.
The default value set in object.pm may not be changed.
</flag>

<flag name="DNO_NAMELIST_PRINT" class="mandatory">
Does not output the namelist input if set.
The default value set in object.pm may not be changed.
</flag>

<!-- End of mandatory flags -->

<!-- Begin portability flags -->

<flag name="DALLOCA_ARG_T" class="portability">
This macro defines the type of argument that the alloca() function takes.  It
defaults to 'int'.
</flag>

<flag name="Dalloca" class="other">
This allows alloca to be set to the compiler's preferred alloca by SPEC rules.
</flag>

<flag name="DNOUNDERSCORE" class="portability">
This macro indicates that C functions called from Fortran should not have
an underscore added to their names.
</flag>

<flag name="DF2CSTYLE" class="portability">
This flag should be used if C function names need to have two underscores
appended in order for them to be callable by Fortran functions.
</flag>

<flag name="DSPEC_CPU_P64" class="portability">
This macro indicates that the benchmark is being compiled on a system where
integers and longs are 32 bits wide, and pointers are 64 bits wide.
</flag>

<flag name="DSPEC_CPU_LP64" class="portability">
This macro indicates that the benchmark is being compiled on a system where
integers are 32 bits wide, and longs and pointers are 64 bits wide.
</flag>

<flag name="DSPEC_CPU_ILP64" class="portability">
This macro indicates that the benchmark is being compiled on a system where
integers, pointers, and longs are all 64 bits wide.
</flag>

<flag name="DSPEC_CPU_LINUX" class="portability">
This macro indicates that the benchmark is being compiled on a Linux system.
</flag>

<flag name="DSPEC_CPU_CASE_FLAG" class="portability">
This macro indicates that Fortran functions called from C should have their
names lower-cased.
</flag>

<flag name="DSPEC_CPU_LINUX64_IPF" class="portability">
This macro indicates that the benchmark is being compiled on an Itanium
Processor Family-based Linux system.
</flag>

<flag name="DSPEC_CPU_LINUX_PPC" class="portability">
This macro indicates that the benchmark is being compiled on a PowerPC-based
Linux system.
</flag>

<flag name="DSPEC_CPU_LINUX_SPARC" class="portability">
This macro indicates that the benchmark is being compiled on a SPARC-based
Linux system.
</flag>

<flag name="DSPEC_CPU_MACOSX_INTEL" class="portability">
This macro indicates that the benchmark is being compiled on an
Intel-architecture MacOS X system.
</flag>

<flag name="DSPEC_CPU_MACOSX" class="portability">
This macro indicates that the benchmark is being compiled on a MacOS X system.
</flag>

<flag name="DSPEC_CPU_AIX" class="portability">
This macro indicates that the benchmark is being compiled on a PowerPC-based
AIX system.
</flag>

<flag name="DSPEC_CPU_SOLARIS" class="portability">
This macro indicates that the benchmark is being compiled on a SPARC-based
Solaris system.
</flag>

<flag name="DSPEC_CPU_SOLARIS_X86" class="portability">
This macro indicates that the benchmark is being compiled on an x64- or
x86-based Solaris system.
</flag>

<flag name="DSPEC_CPU_WINDOWS_ICL" class="portability">
This macro indicates that the benchmark is being built on a Windows system
using the Intel C++ compiler.
</flag>

<flag name="DSPEC_CPU_NO_HAVE_ALLOCA" class="portability">
This macro indicates that alloca is not available as a macro or function.
</flag>

<flag name="DSPEC_CPU_NO_HAVE_ALLOCA_H" class="portability">
This macro indicates that the alloca.h header file is not present and should
not be included.
</flag>

<flag name="DSPEC_CPU_NO_NCCONFIG_SOLARIS" class="portability">
When set, this macro will inhibit inclusion of the Solaris-specific ncconfig
header file.
</flag>

<flag name="DSPEC_CPU_NO_FILE_OFFSET_BITS" class="portability">
If the _FILE_OFFSET_BITS macro is not set, this flag indicates that a
default value of "64" should not be provided.
</flag>

<flag name="DSPEC_CPU_NO_HAVE_FTRUNCATE" class="portability">
When set, this macro indicates that the ftruncate function is not available.
</flag>

<flag name="DSPEC_CPU_NO_STDC_HEADERS" class="portability">
This flag may be used to keep the macro STDC_HEADERS from being defined by
default.
</flag>

<flag name="DSPEC_CPU_NO_ST_BLKSIZE" class="portability">
This macro indicates that "struct stat" does not contain a member called
st_blksize.
</flag>

<flag name="DSPEC_CPU_WORDS_LITTLEENDIAN" class="portability">
This macro indicates that the system building the benchmark is a little-endian
system.
</flag>

<flag name="DSPEC_CPU_UCHAR_DEFINED" class="portability">
If set, this macro indicates that a symbol named "uchar" is already defined
to be "unsigned char".
</flag>

<flag name="logical_strict" class="portability" regexp="[-/]D(?:SPEC_CPU_)?LOGICAL_STRICT\b">
<example>
-DLOGICAL_STRICT,
-DSPEC_CPU_LOGICAL_STRICT
</example>
LOGICAL_STRICT is a NetCDF macro that should be defined for Fortran compilers
that treat .eqv./.neqv. as .eq./.ne..
</flag>

<!-- End of portability flags -->

<!-- Begin forbidden flags -->

<flag name="DALWAYS_NC_SHARE" class="forbidden">
This flag causes NetCDF to attempt to set NC_SHARE on files it opens.  It is
used for debugging, and changing its value from the default is forbidden.
</flag>

<flag name="DANSI_C_preprocessor" class="forbidden">
This flag is used by cfortran.h to determine whether it can use preprocessor
features defined by the ANSI C standard.
Changing its default value is forbidden.
</flag>

<flag name="old_sun_stuff" class="forbidden" regexp="[-/]D(?:FLOATFUNCTIONTYPE|ASSIGNFLOAT|RETURNFLOAT)(?:=\S*)?\b">
<example>
-DFLOATFUNCTIONTYPE=XXX,
-DASSIGNFLOAT=XXX,
-DRETURNFLOAT=XXX
</example>
This flag (if necessary) is defined by the compilation system.
Changing its default value is forbidden.
</flag>

<flag name="DAUTODOC_BUILD" class="forbidden">
This flag causes WRF to not exit immediately after writing its inital restart
file.
Changing its default value is forbidden.
</flag>

<flag name="DHAVE_ALLOCA" class="forbidden">
This macro indicates that alloca is available as a macro or function.  It is
set by default; if you need for it to be un-set, use -DSPEC_CPU_NO_HAVE_ALLOCA.
</flag>

<flag name="DHAVE_ALLOCA_H" class="forbidden">
This macro indicates that the alloca.h header file is available.  It is
set by default; if you need for it to be un-set, use -DSPEC_CPU_NO_HAVE_ALLOCA_H.
</flag>

<flag name="DHAVE_ST_BLKSIZE" class="forbidden">
This macro indicates that "struct stat" has a member named "st_blksize".
It is set by default; if you need for it to be un-set, use -DSPEC_CPU_NO_HAVE_ST_BLKSIZE.
</flag>

<flag name="DCDEBUG" class="forbidden">
This flag enables coordinate check debug output in NetCDF.  It may not be used
for a CPU2006 run.
</flag>

<flag name="DCDF_ROUTINE_NAME" class="forbidden">
This flag causes the variable cdf_routine_name to be set to the current
function name in the NetCDF-2 bindings.  This flag may not be used for
CPU2006.
</flag>

<flag name="DCFSUBASFUN" class="forbidden">
This flag causes cfortran.h to replace subroutines with function calls.  It
may not be used for CPU2006.
</flag>

<flag name="DCOMMON_BLOCK" class="forbidden">
This macro defines a method to refer to Fortran common blocks from C functions.
Its default value may not be changed.
</flag>

<flag name="DCOPY_OUT" class="forbidden">
This macro causes variables to be copied out of the grid data structure at
various places in the WRF source code.
It is used internally by WRF and may not be set explicitly.
</flag>

<flag name="DCRAYFLOAT" class="forbidden">
This macro indicates that CRAY floating point (real*16) should be used.  This
may not be set for CPU2006.
</flag>

<flag name="DD3VAR_IRY_KLUDGE" class="forbidden">
This macro changes the order of some variables used for WRF I/O.  It may not
be set for CPU2006.
</flag>

<flag name="DDEREF_KLUDGE" class="forbidden">
<![CDATA[
<p>This macro enables a potentially dangerous workaround to keep certain Fortran
90 compilers from performing a copy-in/copy-out conversion on the grid
data structure in some cases.  See <a href="http://www.mmm.ucar.edu/wrf/WG2/topics/deref_kludge.htm">this page</a> for more information.</p>
<p>This flag may not be used for CPU2006.</p>
]]>
</flag>

<flag name="src_dest_record" class="forbidden" regexp="[-/]D(?:(?:DEST|SOURCE)_RECORD|SOURCE_REC_DEX)(?:=\S*)?\b">
<example>
-DDEST_RECORD=XXX,
-DSOURCE_RECORD=XXX,
-DSOURCE_REC_DEX=XXX
</example>
These macros are used to set the names of data structures used for assignment.
They are used internally by WRF and may not be set explicitly.
</flag>

<flag name="dll_stuff" class="forbidden" regexp="[-/]DDLL_(?:EXPORT|NETCDF)\b">
<example>
-DDLL_EXPORT,
-DDLL_NETCDF
</example>
These macros are used when building parts of the WRF library as a DLL.  They
are not used for CPU2006 and may not be set.
</flag>

<flag name="DDM_PARALLEL" class="forbidden">
This macro indicates that WRF should be built for parallel operation.  This
mode is not supported for CPU2006, and this macro may not be set.
</flag>

<flag name="DDOUBLE_PRECISION" class="forbidden">
This macro contains the name of the C type which can hold a double precision
Fortran number.  Its default value may not be changed.
</flag>

<flag name="DDUMBCOPY" class="forbidden">
If defined, causes slow copy routines to be used in interp_fcn.  This may
not be set for CPU2006.
</flag>

<flag name="posix_stuff" class="forbidden" regexp="[-/]D(?:ENOERR|FLT_MAX_EXP|(?:INT|FLT|LONG|SHORT)_MAX|O_BINARY|SEEK_SET)(?:=\S*)\b">
These macros should all be defined by the compilation system.  Setting them
explicitly is forbidden.
<example>
-DENOERR=XXX,
-DFLT_MAX=XXX,
-DFLT_MAX_EXP=XXX,
-DINT_MAX=XXX,
-DLONG_MAX=XXX,
-DO_BINARY=XXX,
-DSEEK_SET=XXX,
-DSHORT_MAX=XXX
</example>
</flag>

<flag name="ix_rep" class="forbidden" regexp="[-/]D(?:IX_(?:INT|SHORT)_MAX|SIZEOF_IX_(?:INT|SHORT))(?:=\S*)?\b">
These macros define sizes and ranges of the variable types used to hold XDR
data.  They are not used for CPU2006 and may not be changed.
<example>
-DIX_INT_MAX=XXX,
-DIX_SHORT_MAX=XXX,
-DSIZEOF_IX_INT=XXX,
-DSIZEOF_IX_SHORT=XXX
</example>
</flag>

<flag name="DFCALLSC_QUALIFIER" class="forbidden">
This macro holds the qualifier (if any) needed for C functions called from
Fortran.  The default value may not be changed.
</flag>

<flag name="DFORTRAN_REAL" class="forbidden">
This macro contains the name of the C type which can hold a Fortran REAL
number.  Its default value may not be changed.
</flag>

<flag name="DINL" class="forbidden">
This is an internal WRF macro which indicates that inlining of some functions
should take place.  It may not be set or unset explicitly.
</flag>

<flag name="netcdf_debug" class="forbidden" regexp="[-/]D(?:LN_TEST|INSTRUMENT|ODEBUG)\b">
<example>
-DLN_TEST,
-DINSTRUMENT,
-DODEBUG
</example>
These flags enable some NetCDF debugging output.  They may not be used for
CPU2006.
</flag>

<flag name="DINTERNAL_IO" class="forbidden">
This macro indicates that WRF's internal I/O routines should be used.
Its default value may not be changed.
</flag>

<flag name="DINTIO_NOTYET" class="forbidden">
This macro indicates that WRF's internal I/O routines should be stubbed out.
It may not be set for CPU2006.
</flag>

<flag name="DLOCKNUMREC" class="forbidden">
This flag enables locking for NC.numrecs.  It may not be used for CPU2006.
</flag>

<flag name="DMAKE_PROGRAM" class="forbidden">
Creates a test program for testing function nc_inq_libvers().  This may not
be used for CPU2006.
</flag>

<flag name="DMAX_NC_OPEN" class="forbidden">
This macro defines the maximum number of files a process can have open.
Its default value may not be changed.
</flag>

<flag name="DMAX_PREPRO_ARGS" class="forbidden">
This macro defines the maximum number of arguments that the C preprocessor can
accept for macro definitions.  Its default value may not be changed.
</flag>

<flag name="DMM5_SINT" class="forbidden">
This macro is set unconditionally in the WRF source code and may not be
set or unset explicitly.
</flag>

<flag name="namelist_read_stuff" class="forbidden" regexp="[-/]DNAMELIST_READ_(?:UNIT|ERROR_LABEL)(?:=\S*)?\b">
<example>
-DNAMELIST_READ_UNIT=XXX,
-DNAMELIST_READ_ERROR_LABEL=XXX
</example>
These macros define constants used when reading the namelist.  Their default
values may not be changed.
</flag>

<flag name="DNAN_VALUE" class="forbidden">
This macro indicates that a value for NaN is available.  Its default value
may not be changed.
</flag>

<flag name="DNC_ARRAY_GROWBY" class="forbidden">
This macro holds the size (in elements) that arrays in NetCDF should be grown
at one time.  Its default value may not be changed.
</flag>

<flag name="nc_retcodes" class="forbidden" regexp="[-/]DNC_(?:ENOMEM|ERANGE)(?:=\S*)?\b">
<example>
-DNC_ENOMEM=XXX,
-DNC_ERANGE=XXX
</example>
These macros contain the values of return codes used internally by NetCDF.
Their default values may not be changed.
</flag>

<flag name="netcdf_type_flags" class="forbidden" regexp="[-/]DNF_(?:NF_DOUBLEPRECISION_IS_C_FLOAT|NF_INT1_IS_C_SIGNED_CHAR|NF_INT2_IS_C_SHORT|NF_INT_IS_C_INT|NF_REAL_IS_C_DOUBLE|NF_REAL_IS_C_FLOAT)(?:=\S*)\b">
<example>
-DNF_DOUBLEPRECISION_IS_C_FLOAT=XXX,
-DNF_INT1_IS_C_SIGNED_CHAR=XXX,
-DNF_INT2_IS_C_SHORT=XXX,
-DNF_INT_IS_C_INT=XXX,
-DNF_REAL_IS_C_DOUBLE=XXX,
-DNF_REAL_IS_C_FLOAT=XXX
</example>
These macros are used by NetCDF to determine which native C types fit which
native Fortran types.  Their default values may not be changed directly.
</flag>

<flag name="DNO_IEEE_FLOAT" class="forbidden">
This macro should be set if the system does not use IEEE floating point
representation.  It may not be set for CPU2006.
</flag>

<flag name="DNO_NETCDF_2" class="forbidden">
This flag turns off backward compatibility definitions in NetCDF.  Its
default value may not be changed.
</flag>

<flag name="DNO_STRERROR" class="forbidden">
This macro indicates that the strerror function is not available.  Its
default value may not be changed.
</flag>

<flag name="DOLDWAY" class="forbidden">
This flag enables the use of some older code in interp_fcn in WRF.  It may
not be set for CPU2006.
</flag>

<flag name="DONEWAYBIT4BIT" class="forbidden">
This flag enables buggy bit-for-bit copy.  It may not be set for CPU2006.
</flag>

<flag name="DPOSIXIO_DEFAULT_PAGESIZE" class="forbidden">
This macro holds the default page size that pagesize() will return when
neither sysconf() nor POSIX getpagesize() is not available.  Its default
value may not be changed for CPU2006.
</flag>

<flag name="DREGISTER_I1" class="forbidden">
This flag enables some extra INTEGER*1 copies for parallel WRF code.  It is
not used and may not be set for CPU2006.
</flag>

<flag name="DRSL" class="forbidden">
This macro indicates that the RSL communications package is being used for
communication in a parallelized WRF run.  It is not used and may not be set
for CPU2006.
</flag>

<flag name="cf_bytes" class="forbidden" regexp="[-/]D(?:UN)?SIGNED_BYTE\b">
<example>
-DSIGNED_BYTE,
-DUNSIGNED_BYTE
</example>
These macros are used internally by cfortran.h to determine what native C types
to use to hold various types and sizes of data.  Their default values may not
be changed.
</flag>

<flag name="sizeof" class="forbidden" regexp="[-/]DSIZEOF_(?:DOUBLE|FLOAT|INT|LONG|OFF_T|SHORT|SIZE_T)(?:=\S*)?\b">
These macros define the size (in bytes) of various native data types.  Their
default values may not be changed.
<example>
-DSIZEOF_DOUBLE=XXX,
-DSIZEOF_FLOAT=XXX,
-DSIZEOF_INT=XXX,
-DSIZEOF_LONG=XXX,
-DSIZEOF_OFF_T=XXX,
-DSIZEOF_SHORT=XXX,
-DSIZEOF_SIZE_T=XXX
</example>
</flag>

<flag name="DSTUBMPI" class="forbidden">
This macro enables stubbing out of MPI functionality in WRF.  It is not used
and may not be set for CPU2006.
</flag>

<flag name="DSTUB_FOR_NOW" class="forbidden">
This macro enables stubbing out of the nests_to_open function in WRF.  It
may not be set for CPU2006.
</flag>

<flag name="DTOUCH_LAST" class="forbidden">
This flag enables a touch of the last page allocated when growing a file with
NetCDF.  Its default value may not be changed.
</flag>

<flag name="DUSE_NEW_DELETE" class="forbidden">
This macro indicates that new and delete should be used instead of malloc()
and free() in C++ codes that use cfortran.h.  It is not used and may not be
set for CPU2006.
</flag>

<flag name="DWORDS_BIGENDIAN" class="forbidden">
This flag indicates that the benchmark is being built on a big-endian system.
It is on by default; for little-endian systems, use -DSPEC_CPU_LITTLE_ENDIAN.
</flag>

<flag name="xdr_var_stuff" class="forbidden" regexp="[-/]DX_(?:ALIGN|(?:INT|SHORT)_MAX|SIZEOF_(?:DOUBLE|FLOAT|INT|SHORT|SIZE_T))(?:=\S*)?\b">
<example>
-DX_ALIGN=XXX,
-DX_INT_MAX=XXX,
-DX_SHORT_MAX=XXX,
-DX_SIZEOF_DOUBLE=XXX,
-DX_SIZEOF_FLOAT=XXX,
-DX_SIZEOF_INT=XXX,
-DX_SIZEOF_SHORT=XXX,
-DX_SIZEOF_SIZE_T=XXX
</example>
These macros set the sizes, ranges, or other attributes of various data types
used in NetCDF's XDR implementation.  They are not relevant to CPU2006 and
may not be changed from their default values.
</flag>

<flag name="DZTRINGV_ARGS_allows_Pvariables" class="forbidden">
This macro is used to indicate to cfortran.h that ARGS can hold Pvariables.
It may not be set for CPU2006.
</flag>

<flag name="D_FILE_OFFSET_BITS" class="forbidden">
<![CDATA[
<p>This macro can be used to set the number of bits in an off_t.  Its value
is usually supplied by the compilation system.</p>
<p>If you need to set this flag in order to build and run 481.wrf, please
notify <a href="mailto:cpu2006support@spec.org">cpu2006support@spec.org</a>.</p>
]]>
</flag>

<flag name="D_RNDUP" class="forbidden">
This macro defines a method of rounding up to the nearest whole number.
Changing its default value is forbidden.
</flag>

<flag name="D__CHAR_UNSIGNED__" class="forbidden">
<![CDATA[
<p>This macro is used to tell NetCDF that the compilation system's "char" type
is unsigned by default.</p>
<p>If you need to set this flag in order to build and run 481.wrf, please
notify <a href="mailto:cpu2006support@spec.org">cpu2006support@spec.org</a>.</p>
]]>
</flag>

<flag name="Dncvarcpy" class="forbidden">
This defines a compatibilty name for the ncvarcopy() function.  Its default
value may not be changed.
</flag>

<!-- non-autodetected compiler flags for cfortran -->

<flag name="DAbsoftProFortran" class="forbidden">
In theory, this flag supplies information to NetCDF's cfortran.h about use of
the Absoft Pro Fortran compiler.  In practice, it shouldn't be necessary, and
setting it explicitly is not allowed.
</flag>

<flag name="DAbsoftUNIXFortran" class="forbidden">
In theory, this flag supplies information to NetCDF's cfortran.h about use of
the Absoft UNIX F77 compiler.  In practice, it shouldn't be necessary, and
setting it explicitly is not allowed.
</flag>

<flag name="DpgiFortran" class="forbidden">
In theory, this flag supplies information to NetCDF's cfortran.h about use of
the Portland Group Fortran compiler.  In practice, it shouldn't be necessary,
and setting it explicitly is not allowed.
</flag>

<flag name="DPATHSCALE_COMPILER" class="forbidden">
In theory, this flag supplies information to NetCDF's cfortran.h about use of
the Pathscale Fortran compiler.  In practice, it shouldn't be necessary,
and setting it explicitly is not allowed.
</flag>

<flag name="DNAGf90Fortran" class="forbidden">
In theory, this flag supplies information to NetCDF's cfortran.h about use of
the NAG Fortran-90 compiler.  In practice, it shouldn't be necessary,
and setting it explicitly is not allowed.
</flag>

<flag name="Df2cFortran" class="forbidden">
In theory, this flag supplies information to NetCDF's cfortran.h about use of
the f2c.  In practice, 481.wrf can't be built with f2c, so setting it
explicitly is not allowed.
</flag>

<!-- Macros used internally by cfortran.h -->

<flag name="cfortran_internals" class="forbidden" regexp="[-/]D(?:OLD_VAXC|__CF_(?:_?KnR|_APOLLO67))(?:=\S*)?\b">
<example>
-D__CF_KnR=XXX,
-D__CF__APOLLO67=XXX,
-D__CF__KnR=XXX,
-DOLD_VAXC=XXX
</example>
These macros are used internally by cfortran.h and may not be set explicitly.
</flag>

<flag name="header_guards" class="forbidden" regexp="[-/]D(?:UD_(?:FORT_LIB_H|NCFORTRAN_H|NETCDF_CPP_INC)|_NETCDF_|_FBITS_H_|__CFORTRAN_LOADED|_ONSTACK_H_|_NCCONFIG_(?:AIX|GENERIC|IRIX|LINUX|MACOSX|SOLARIS|WINDOWS)_H_|_NCCONFIG_H_|_NCIO_H_|_NCX_H_|_NC_H_|ESMF_(?:MACROS|TimeMgr)_INC)\b">
<example>
-DUD_FORT_LIB_H,
-DUD_NCFORTRAN_H,
-DUD_NETCDF_CPP_INC,
-D_NETCDF_,
-D_FBITS_H_,
-D__CFORTRAN_LOADED,
-D_ONSTACK_H_,
-D_NCCONFIG_AIX_H_,
-D_NCCONFIG_GENERIC_H_,
-D_NCCONFIG_H_,
-D_NCCONFIG_IRIX_H_,
-D_NCCONFIG_LINUX_H_,
-D_NCCONFIG_MACOSX_H_,
-D_NCCONFIG_SOLARIS_H_,
-D_NCCONFIG_WINDOWS_H_,
-D_NCIO_H_,
-D_NCX_H_,
-D_NC_H_,
-DESMF_MACROS_INC,
-DESMF_TimeMgr_INC
</example>
These macros are used to prevent multiple header inclusion; setting them
explicitly is forbidden.
</flag>

<flag name="comp_implicit" class="forbidden" regexp="[-/]D(?:extname|sun|sunFortran|unix|vax|vms|vmsFortran|hpuxFortran|hpuxFortran800|lynx|mips|mipsFortran|apollo|apolloFortran|__CYGWIN32__|__GNUC__|__PATHCC__|__STDCPP__|__STDC__|__VAXC|__alpha|__convex__|__cplusplus|__hpux|__mips|__sgi|__sun|__ultrix__|__unix__|__vax__|__vms|_SC_PAGESIZE|_SC_PAGE_SIZE|_SX|_OPENMP|__64BIT__|_MSC_VER|_IBMR2|_CRAY|_CRAYC|_CRAYIEEE|_CRAYMPP|_CRAYT3E|_INT64|VAXC|VAXUltrix|VISUAL_CPLUSPLUS|WIN32|S_IRUSR|SXFortran|CLIPPERFortran|CONVEXFortran|CRAY|CRAYFortran|DECFortran|IBMR2Fortran|PowerStationFortran)(?:=\S*)?\b">
These flags are set implicitly by the compilation system and may not be
set explicitly.
<example>
-Dextname=XXX,
-Dsun=XXX,
-DsunFortran=XXX,
-Dunix=XXX,
-Dvax=XXX,
-Dvms=XXX,
-DvmsFortran=XXX,
-DhpuxFortran=XXX,
-DhpuxFortran800=XXX,
-Dlynx=XXX,
-Dmips=XXX,
-DmipsFortran=XXX,
-Dapollo=XXX,
-DapolloFortran=XXX,
-D__CYGWIN32__=XXX,
-D__GNUC__=XXX,
-D__PATHCC__=XXX,
-D__STDCPP__=XXX,
-D__STDC__=XXX,
-D__VAXC=XXX,
-D__alpha=XXX,
-D__convex__=XXX,
-D__cplusplus=XXX,
-D__hpux=XXX,
-D__mips=XXX,
-D__sgi=XXX,
-D__sun=XXX,
-D__ultrix__=XXX,
-D__unix__=XXX,
-D__vax__=XXX,
-D__vms=XXX,
-D_SC_PAGESIZE=XXX,
-D_SC_PAGE_SIZE=XXX,
-D_SX=XXX,
-D_OPENMP=XXX,
-D__64BIT__=XXX,
-D_MSC_VER=XXX,
-D_IBMR2=XXX,
-D_CRAY=XXX,
-D_CRAYC=XXX,
-D_CRAYIEEE=XXX,
-D_CRAYMPP=XXX,
-D_CRAYT3E=XXX,
-D_INT64=XXX,
-DVAXC=XXX,
-DVAXUltrix=XXX,
-DVISUAL_CPLUSPLUS=XXX,
-DWIN32=XXX,
-DS_IRUSR=XXX,
-DSXFortran=XXX,
-DCLIPPERFortran=XXX,
-DCONVEXFortran=XXX,
-DCRAY=XXX,
-DCRAYFortran=XXX,
-DDECFortran=XXX,
-DIBMR2Fortran=XXX,
-DPowerStationFortran=XXX
</example>
</flag>

<flag name="wrf_io_mod" class="forbidden" regexp="[-/]D(?:XXX|YYY|ZZZ|PHDF5|MCELIO|HDF)\b">
<example>
-DXXX,
-DYYY,
-DZZZ,
-DHDF,
-DPHDF5,
-DMCELIO,
</example>
These flags are used to enable I/O modules in WRF.  They may not be set.
</flag>

<!-- End of forbidden flags -->

</flagsdescription>
