	.file	"c-typeck.i"
	.section	.rodata.str1.32,"aMS",@progbits,1
	.align 32
.LC18:
	.string	"comparison between signed and unsigned"
	.align 32
.LC19:
	.string	"comparison of promoted ~unsigned with constant"
	.align 32
.LC20:
	.string	"comparison of promoted ~unsigned with unsigned"
	.align 32
.LC10:
	.string	"function types not truly compatible in ISO C"
	.align 32
.LC1:
	.string	"types are not quite compatible"
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC2:
	.string	"division by zero"
	.section	.rodata.str1.32
	.align 32
.LC14:
	.string	"ISO C forbids ordered comparisons of pointers to functions"
	.align 32
.LC12:
	.string	"comparison of distinct pointer types lacks a cast"
	.section	.rodata.str1.1
.LC5:
	.string	"left shift count is negative"
	.section	.rodata.str1.32
	.align 32
.LC6:
	.string	"left shift count >= width of type"
	.section	.rodata.str1.1
.LC3:
	.string	"right shift count is negative"
	.section	.rodata.str1.32
	.align 32
.LC4:
	.string	"right shift count >= width of type"
	.section	.rodata.str1.1
.LC7:
	.string	"shift count is negative"
.LC8:
	.string	"shift count >= width of type"
	.section	.rodata.str1.32
	.align 32
.LC13:
	.string	"comparison between pointer and integer"
	.align 32
.LC16:
	.string	"ordered comparison of pointer with integer zero"
	.align 32
.LC15:
	.string	"comparison of complete and incomplete pointers"
	.align 32
.LC11:
	.string	"ISO C forbids comparison of `void *' with function pointer"
	.align 32
.LC9:
	.string	"comparing floating point with == or != is unsafe"
	.align 32
.LC17:
	.string	"unordered comparison on non-floating point argument"
	.align 32
.LC0:
	.string	"void value not ignored as it ought to be"
	.text
	.align 2
	.p2align 4,,15
.globl build_binary_op
	.type	build_binary_op,@function
build_binary_op:
.LFB1:
	pushq	%r15
.LCFI0:
	xorl	%r15d, %r15d
	pushq	%r14
.LCFI1:
	pushq	%r13
.LCFI2:
	pushq	%r12
.LCFI3:
	pushq	%rbp
.LCFI4:
	pushq	%rbx
.LCFI5:
	subq	$664, %rsp
.LCFI6:
	testl	%ecx, %ecx
	movl	%edi, 608(%rsp)
	movq	%rsi, 600(%rsp)
	movq	%rdx, 592(%rsp)
	movl	%edi, 16(%rsp)
	movl	$0, 20(%rsp)
	movq	$0, (%rsp)
	movq	$0, 24(%rsp)
	movl	$0, 180(%rsp)
	movl	$0, 184(%rsp)
	movl	$0, 188(%rsp)
	movl	$0, 192(%rsp)
	je	.L2
	movq	8(%rsi), %r12
	movq	%rsi, %rbx
	movzbl	16(%r12), %r13d
	cmpl	$23, %r13d
	je	.L4
	cmpl	$18, %r13d
	je	.L4
	movq	600(%rsp), %rsi
	movzbl	16(%rsi), %eax
	cmpb	$32, %al
	je	.L3530
	movl	optimize(%rip), %esi
	testl	%esi, %esi
	je	.L31
	cmpb	$34, %al
	je	.L3531
.L31:
	movzbl	16(%rbx), %ecx
	movq	%rbx, %rdx
	cmpb	$116, %cl
	je	.L3313
	cmpb	$115, %cl
	je	.L3532
.L40:
	movzbl	%cl, %ebp 
	movzbl	tree_code_type(%rbp), %eax
	cmpb	$60, %al
	je	.L45
	cmpb	$49, %al
	je	.L45
	cmpb	$50, %al
	je	.L45
	cmpb	$101, %al
	je	.L45
.L44:
	cmpl	$10, %r13d
	je	.L3533
	cmpb	$39, %cl
	je	.L3534
.L53:
	movq	%r12, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L58
	testb	$32, 17(%r12)
	je	.L59
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L60
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r12), %r13d
	movzwl	60(%rdx), %r12d
	andl	$511, %r13d
	andl	$511, %r12d
	cmpl	%r12d, %r13d
	je	.L60
.L59:
	movq	integer_types+40(%rip), %rdi
.L3342:
	movq	%rbx, %rsi
.L3343:
	call	convert
.L3344:
	movq	%rax, 8(%rsp)
.L29:
	movq	592(%rsp), %rbx
	movq	8(%rbx), %r12
	movzbl	16(%r12), %r13d
	cmpl	$23, %r13d
	je	.L64
	cmpl	$18, %r13d
	je	.L64
	movq	592(%rsp), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$32, %al
	je	.L3535
	movl	optimize(%rip), %edi
	testl	%edi, %edi
	je	.L91
	cmpb	$34, %al
	je	.L3536
.L91:
	movzbl	16(%rbx), %ecx
	movq	%rbx, %rdx
	cmpb	$116, %cl
	je	.L3318
	cmpb	$115, %cl
	je	.L3537
.L100:
	movzbl	%cl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L105
	cmpb	$49, %al
	je	.L105
	cmpb	$50, %al
	je	.L105
	cmpb	$101, %al
	je	.L105
.L104:
	cmpl	$10, %r13d
	je	.L3538
	cmpb	$39, %cl
	je	.L3539
.L113:
	movq	%r12, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L118
	testb	$32, 17(%r12)
	je	.L119
	movl	flag_traditional(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L120
	movq	integer_types+40(%rip), %rsi
	movzwl	60(%r12), %edi
	movzwl	60(%rsi), %r12d
	andl	$511, %edi
	andl	$511, %r12d
	cmpl	%r12d, %edi
	je	.L120
.L119:
	movq	integer_types+40(%rip), %rdi
.L3345:
	movq	%rbx, %rsi
.L3346:
	call	convert
.L3348:
	movq	%rax, %r14
.L123:
	movq	8(%rsp), %rdx
	movq	8(%rdx), %rbx
	movq	8(%rsp), %rdx
	movq	%rbx, 96(%rsp)
	movq	8(%r14), %rbp
	movq	%rbp, 168(%rsp)
	movzbl	16(%rbx), %r11d
	movl	%r11d, 588(%rsp)
	movzbl	16(%rbp), %ecx
	movl	%ecx, 584(%rsp)
	movzbl	16(%rdx), %r8d
	subb	$114, %r8b
	cmpb	$2, %r8b
	ja	.L125
	movq	32(%rdx), %rax
	movq	global_trees(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L125
	cmpq	8(%rax), %rbx
	je	.L128
.L125:
	movzbl	16(%r14), %edx
	leal	-114(%rdx), %edi
	cmpb	$2, %dil
	ja	.L130
	movq	32(%r14), %rax
	movq	global_trees(%rip), %rcx
	cmpq	%rcx, %rax
	je	.L130
	movq	168(%rsp), %r9
	cmpq	8(%rax), %r9
	je	.L133
.L130:
	movl	588(%rsp), %eax
	testl	%eax, %eax
	je	.L3439
	movl	584(%rsp), %ebx
	testl	%ebx, %ebx
	je	.L3439
	movl	608(%rsp), %eax
	subl	$59, %eax
	cmpl	$50, %eax
	ja	.L136
	mov	%eax, %r8d
	jmp	*.L2117(,%r8,8)
	.section	.rodata
	.align 8
	.align 4
.L2117:
	.quad	.L137
	.quad	.L142
	.quad	.L2114
	.quad	.L313
	.quad	.L313
	.quad	.L313
	.quad	.L313
	.quad	.L327
	.quad	.L136
	.quad	.L327
	.quad	.L136
	.quad	.L136
	.quad	.L313
	.quad	.L136
	.quad	.L136
	.quad	.L136
	.quad	.L136
	.quad	.L136
	.quad	.L136
	.quad	.L955
	.quad	.L955
	.quad	.L136
	.quad	.L136
	.quad	.L349
	.quad	.L340
	.quad	.L358
	.quad	.L358
	.quad	.L324
	.quad	.L324
	.quad	.L324
	.quad	.L324
	.quad	.L136
	.quad	.L336
	.quad	.L336
	.quad	.L336
	.quad	.L336
	.quad	.L336
	.quad	.L136
	.quad	.L1525
	.quad	.L1525
	.quad	.L1525
	.quad	.L1525
	.quad	.L367
	.quad	.L367
	.quad	.L2113
	.quad	.L2113
	.quad	.L2113
	.quad	.L2113
	.quad	.L2113
	.quad	.L2113
	.quad	.L2113
	.text
.L137:
	cmpl	$13, 588(%rsp)
	je	.L3540
.L138:
	cmpl	$13, 584(%rsp)
	je	.L3541
.L2114:
	movl	$1, 192(%rsp)
.L136:
	movl	588(%rsp), %eax
	subl	$6, %eax
	cmpl	$2, %eax
	ja	.L2118
	movl	584(%rsp), %eax
	subl	$6, %eax
	cmpl	$2, %eax
	ja	.L2118
	cmpl	$8, 588(%rsp)
	movl	$0, 176(%rsp)
	je	.L2119
	cmpl	$8, 584(%rsp)
	movl	$1, %eax
	cmove	176(%rsp), %eax
	movl	%eax, 176(%rsp)
.L2119:
	movl	180(%rsp), %eax
	testl	%eax, %eax
	jne	.L2121
	movl	192(%rsp), %r8d
	testl	%r8d, %r8d
	jne	.L2121
	movl	184(%rsp), %r9d
	testl	%r9d, %r9d
	je	.L2120
.L2121:
	movq	168(%rsp), %r15
	cmpq	%r15, 96(%rsp)
	je	.L2123
	movq	global_trees(%rip), %rax
	cmpq	%rax, 96(%rsp)
	je	.L3542
	cmpq	%rax, 168(%rsp)
	je	.L2123
	movq	96(%rsp), %rdi
	movq	168(%rsp), %rsi
	call	*targetm+248(%rip)
	movq	96(%rsp), %rcx
	movq	%rax, 456(%rsp)
	cmpb	$10, 16(%rcx)
	je	.L3543
.L2126:
	movq	168(%rsp), %rbx
	movzbl	16(%rbx), %eax
	cmpb	$10, %al
	je	.L3544
.L2127:
	movq	96(%rsp), %rsi
	movzbl	%al, %ebp
	movzbl	16(%rsi), %ebx
	cmpl	$8, %ebx
	je	.L3260
	cmpl	$8, %ebp
	je	.L3307
	leal	-6(%rbx), %eax
	cmpl	$17, %eax
	ja	.L2519
	mov	%eax, %r12d
	jmp	*.L2520(,%r12,8)
	.section	.rodata
	.align 8
	.align 4
.L2520:
	.quad	.L2140
	.quad	.L2140
	.quad	.L2519
	.quad	.L2519
	.quad	.L2519
	.quad	.L2519
	.quad	.L2519
	.quad	.L2157
	.quad	.L2519
	.quad	.L2519
	.quad	.L2519
	.quad	.L2519
	.quad	.L2162
	.quad	.L2519
	.quad	.L2519
	.quad	.L2519
	.quad	.L2519
	.quad	.L2169
	.text
.L2140:
	cmpl	$7, %ebx
	je	.L3546
	cmpl	$7, %ebp
	je	.L3261
.L2142:
	movq	96(%rsp), %rsi
	movq	168(%rsp), %r11
	movzwl	60(%rsi), %edx
	movzwl	60(%r11), %eax
	movq	%rsi, %rdi
	andl	$511, %edx
	andl	$511, %eax
	cmpl	%eax, %edx
	jg	.L3412
	cmpl	%edx, %eax
	jg	.L2155
	movq	96(%rsp), %rbx
	movq	integer_types+64(%rip), %rcx
	movq	128(%rbx), %rdx
	cmpq	%rcx, %rdx
	je	.L3416
	movq	168(%rsp), %r8
	movq	128(%r8), %rax
	cmpq	%rcx, %rax
	je	.L3416
	movq	integer_types+56(%rip), %rdi
	cmpq	%rdi, %rdx
	je	.L2149
	cmpq	%rdi, %rax
	je	.L2149
	movq	global_trees+208(%rip), %rdi
	cmpq	%rdi, %rdx
	je	.L3412
	cmpq	%rdi, %rax
	je	.L3412
	movq	96(%rsp), %rax
	testb	$32, 17(%rax)
	jne	.L3421
.L2155:
	movq	168(%rsp), %rdi
.L3412:
	movq	456(%rsp), %rsi
	call	build_type_attribute_variant
	movq	%rax, 96(%rsp)
.L2123:
	movq	96(%rsp), %r15
.L2120:
	movl	180(%rsp), %r13d
	testl	%r13d, %r13d
	je	.L2521
	movl	176(%rsp), %eax
	testl	%eax, %eax
	jne	.L3547
.L2521:
	movl	188(%rsp), %ecx
	testl	%ecx, %ecx
	jne	.L3548
.L2928:
	movl	184(%rsp), %ebx
	testl	%ebx, %ebx
	jne	.L3549
.L2118:
	testq	%r15, %r15
	je	.L3550
	movl	20(%rsp), %eax
	testl	%eax, %eax
	jne	.L2972
	movq	8(%rsp), %rax
	cmpq	%r15, 8(%rax)
	je	.L2973
	movq	%r15, %rdi
	movq	%rax, %rsi
	call	convert
	movq	%rax, 8(%rsp)
.L2973:
	cmpq	%r15, 8(%r14)
	je	.L2972
	movq	%r14, %rsi
	movq	%r15, %rdi
	call	convert
	movq	%rax, %r14
.L2972:
	cmpq	$0, (%rsp)
	movl	16(%rsp), %edi
	movq	%r14, %rcx
	cmovne	(%rsp), %r15
	movq	8(%rsp), %rdx
	xorl	%eax, %eax
	movq	%r15, %rsi
	movq	%r15, (%rsp)
	call	build
	movq	%rax, %rdi
	movq	%rax, %r15
	call	fold
	cmpq	%r15, %rax
	movq	%rax, %r8
	je	.L3551
.L2976:
	cmpq	$0, 24(%rsp)
	jne	.L3552
	movq	%r8, %rax
	.p2align 4,,7
.L1:
	addq	$664, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L3552:
	movq	24(%rsp), %rdi
	movq	%r8, %rsi
	call	convert
	jmp	.L1
.L3551:
	movq	8(%rsp), %r12
	movzbl	17(%r14), %ebx
	movzbl	17(%r8), %r14d
	movzbl	17(%r12), %eax
	shrb	$1, %bl
	andb	$-3, %r14b
	shrb	$1, %al
	andl	%eax, %ebx
	movl	%ebx, %r13d
	andb	$1, %r13b
	addb	%r13b, %r13b
	orb	%r13b, %r14b
	movb	%r14b, 17(%r8)
	jmp	.L2976
.L3550:
	movl	608(%rsp), %edi
	call	binary_op_error
.L3439:
	movq	global_trees(%rip), %rax
	jmp	.L1
.L3549:
	movq	8(%rsp), %r11
	movq	%r14, 632(%rsp)
	leaq	640(%rsp), %rdi
	movl	16(%rsp), %r14d
	leaq	632(%rsp), %rsi
	leaq	624(%rsp), %rdx
	leaq	620(%rsp), %rcx
	movq	%r15, 624(%rsp)
	movq	%r11, 640(%rsp)
	movl	%r14d, 620(%rsp)
	call	shorten_compare
	testq	%rax, %rax
	jne	.L1
	movl	warn_sign_compare(%rip), %eax
	movq	640(%rsp), %r9
	movl	$1, 20(%rsp)
	movl	620(%rsp), %r12d
	movq	632(%rsp), %r14
	testl	%eax, %eax
	movq	%r9, 8(%rsp)
	movl	%r12d, 16(%rsp)
	js	.L2936
	testl	%eax, %eax
.L3437:
	je	.L2118
	movl	skip_evaluation(%rip), %eax
	testl	%eax, %eax
	jne	.L2118
	movq	600(%rsp), %rsi
	movq	592(%rsp), %rdi
	xorl	%ebx, %ebx
	movq	8(%rsi), %rdx
	movq	8(%rdi), %rcx
	leaq	616(%rsp), %rsi
	movq	8(%rsp), %rdi
	testb	$32, 17(%rdx)
	sete	%bl
	testb	$32, 17(%rcx)
	sete	%bpl
	call	get_narrower
	leaq	612(%rsp), %rsi
	movq	%r14, %rdi
	movzbl	%bpl, %r13d
	movq	%rax, %rbp
	call	get_narrower
	movq	600(%rsp), %r10
	movq	592(%rsp), %r8
	movq	%rax, %r12
	movq	global_trees(%rip), %rdi
	movq	%r10, %rdx
	movq	%r10, 640(%rsp)
	movq	%r8, 632(%rsp)
.L2938:
	movzbl	16(%rdx), %r11d
	movq	%rdx, %rcx
	subb	$114, %r11b
	cmpb	$2, %r11b
	ja	.L3341
	movq	32(%rdx), %rax
	cmpq	%rdi, %rax
	je	.L3341
	movq	8(%rax), %r9
	cmpq	%r9, 8(%rdx)
	jne	.L3341
	movq	%rax, %rdx
	jmp	.L2938
.L3341:
	movq	%rdx, 640(%rsp)
	movq	global_trees(%rip), %rsi
	movq	632(%rsp), %rdx
.L2943:
	movzbl	16(%rdx), %r10d
	movq	%rdx, %rdi
	subb	$114, %r10b
	cmpb	$2, %r10b
	ja	.L3340
	movq	32(%rdx), %rax
	cmpq	%rsi, %rax
	je	.L3340
	movq	8(%rax), %r11
	cmpq	%r11, 8(%rdx)
	jne	.L3340
	movq	%rax, %rdx
	jmp	.L2943
.L3340:
	movq	%rdx, 632(%rsp)
	testb	$32, 17(%r15)
	je	.L2949
	cmpl	%r13d, %ebx
	je	.L2949
	testl	%ebx, %ebx
	je	.L2952
	movq	%rcx, %rax
	movq	%rdi, %rbx
.L2953:
	movq	%rax, %rdi
	call	tree_expr_nonnegative_p
	testl	%eax, %eax
	jne	.L2949
	movzbl	16(%rbx), %edx
	cmpb	$25, %dl
	je	.L3553
.L2958:
	movl	$.LC18, %edi
	xorl	%eax, %eax
	call	warning
.L2949:
	movzbl	16(%rbp), %ecx
	cmpb	$90, %cl
	sete	%al
	cmpb	$90, 16(%r12)
	sete	%bl
	xorl	%eax, %ebx
	andl	$1, %ebx
	je	.L2118
	cmpb	$90, %cl
	je	.L3554
	movq	32(%r12), %rdi
	leaq	612(%rsp), %rsi
	call	get_narrower
	movq	%rax, %r12
.L2962:
	xorl	%esi, %esi
	movq	%rbp, %rdi
	call	host_integerp
	testl	%eax, %eax
	jne	.L2964
	xorl	%esi, %esi
	movq	%r12, %rdi
	call	host_integerp
	testl	%eax, %eax
	je	.L2963
.L2964:
	xorl	%esi, %esi
	movq	%rbp, %rdi
	call	host_integerp
	testl	%eax, %eax
	je	.L2965
	movq	%rbp, %rdi
	movl	612(%rsp), %ebx
	xorl	%esi, %esi
	call	tree_low_cst
	movq	%r12, %rbp
	movq	%rax, %rdx
.L2966:
	movq	8(%rbp), %rdi
	movzwl	60(%r15), %r12d
	movzwl	60(%rdi), %ecx
	andl	$511, %r12d
	andl	$511, %ecx
	cmpl	%r12d, %ecx
	jge	.L2118
	cmpl	$63, %ecx
	jg	.L2118
	testl	%ebx, %ebx
	je	.L2118
	movq	$-1, %rbp
	movl	$.LC19, %edi
	salq	%cl, %rbp
	andq	%rbp, %rdx
	cmpq	%rbp, %rdx
	je	.L2118
.L3438:
	xorl	%eax, %eax
	call	warning
	jmp	.L2118
.L2965:
	movq	%r12, %rdi
	xorl	%esi, %esi
	movl	616(%rsp), %ebx
	call	tree_low_cst
	movq	%rax, %rdx
	jmp	.L2966
.L2963:
	movl	616(%rsp), %edx
	testl	%edx, %edx
	je	.L2118
	movl	612(%rsp), %ecx
	testl	%ecx, %ecx
	je	.L2118
	movq	8(%rbp), %r9
	movzwl	60(%r15), %edx
	movzwl	60(%r9), %esi
	andl	$511, %edx
	andl	$511, %esi
	cmpl	%edx, %esi
	jge	.L2118
	movq	8(%r12), %r11
	movzwl	60(%r11), %r10d
	andl	$511, %r10d
	cmpl	%edx, %r10d
	jge	.L2118
	movl	$.LC20, %edi
	jmp	.L3438
.L3554:
	movq	32(%rbp), %rdi
	leaq	616(%rsp), %rsi
	call	get_narrower
	movq	%rax, %rbp
	jmp	.L2962
.L3553:
	movl	16(%rsp), %eax
	subl	$101, %eax
	cmpl	$1, %eax
	jbe	.L3556
.L2956:
	cmpb	$25, %dl
	jne	.L2958
	movq	8(%rbx), %r13
	cmpb	$10, 16(%r13)
	jne	.L2958
	movq	%r15, %rdi
	call	signed_type
	movq	8(%rbx), %r8
	movq	%rax, %rsi
	movq	112(%r8), %rdi
	call	int_fits_type_p
	testl	%eax, %eax
	jne	.L2949
	jmp	.L2958
.L3556:
	movq	%r15, %rdi
	call	signed_type
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	int_fits_type_p
	testl	%eax, %eax
	jne	.L2949
	movzbl	16(%rbx), %edx
	jmp	.L2956
.L2952:
	movq	%rdi, %rax
	movq	%rcx, %rbx
	jmp	.L2953
	.p2align 6,,7
.L2936:
	movl	extra_warnings(%rip), %r13d
	testl	%r13d, %r13d
	jmp	.L3437
.L3548:
	movq	8(%rsp), %rdi
	leaq	652(%rsp), %rsi
	call	get_narrower
	movq	%r15, 24(%rsp)
	cmpq	8(%rsp), %rax
	movq	%rax, %rbx
	je	.L3557
.L2929:
	movq	8(%rbx), %rsi
	movzwl	60(%r15), %edi
	movzwl	60(%rsi), %edx
	andl	$511, %edi
	andl	$511, %edx
	cmpl	%edi, %edx
	jge	.L2928
	mov	%edx, %esi
	movq	%r14, %rdi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L2928
	testb	$32, 17(%r15)
	je	.L3339
	movl	652(%rsp), %edi
	testl	%edi, %edi
	je	.L2928
.L2931:
	movq	8(%rbx), %rsi
	call	signed_or_unsigned_type
	movq	%rax, %r15
	movq	8(%rsp), %rax
	cmpq	%r15, 8(%rax)
	je	.L2932
	movq	%r15, %rdi
	movq	%rax, %rsi
	call	convert
	movq	%rax, 8(%rsp)
.L2932:
	movl	$1, 20(%rsp)
	jmp	.L2928
.L3339:
	movl	652(%rsp), %edi
	jmp	.L2931
.L3557:
	movq	8(%rsp), %r10
	cmpq	8(%r10), %r15
	jne	.L2929
	movzbl	17(%r15), %edx
	movl	$1, %r8d
	shrb	$5, %dl
	andl	%edx, %r8d
	movl	%r8d, 652(%rsp)
	jmp	.L2929
.L3547:
	movq	8(%rsp), %rdi
	leaq	660(%rsp), %rsi
	movl	$1, %r13d
	call	get_narrower
	leaq	656(%rsp), %rsi
	movq	%r14, %rdi
	movq	%rax, %rbp
	call	get_narrower
	movq	8(%rsp), %rsi
	movzbl	17(%r15), %ecx
	movq	%r15, 24(%rsp)
	movq	%rax, %r12
	movq	8(%rbp), %r10
	shrb	$5, %cl
	movzwl	60(%r10), %r8d
	andl	%ecx, %r13d
	movq	8(%rsi), %rcx
	movzwl	60(%rcx), %r9d
	andl	$511, %r8d
	andl	$511, %r9d
	cmpl	%r8d, %r9d
	je	.L3558
.L2522:
	movq	8(%r14), %rcx
	movq	8(%r12), %r8
	movzwl	60(%rcx), %r11d
	movzwl	60(%r8), %edi
	andl	$511, %r11d
	andl	$511, %edi
	cmpl	%edi, %r11d
	je	.L3559
.L2523:
	cmpl	$-1, 180(%rsp)
	je	.L3560
.L2524:
	movq	8(%rbp), %r8
	movzwl	60(%r15), %edx
	movzwl	60(%r8), %ecx
	movl	%edx, %r10d
	andl	$511, %r10d
	andl	$511, %ecx
	cmpl	%r10d, %ecx
	jge	.L2525
	movq	8(%r12), %rsi
	movzwl	60(%rsi), %ebx
	andl	$511, %ebx
	cmpl	%ecx, %ebx
	je	.L3561
.L2525:
	cmpb	$25, 16(%rbp)
	je	.L3562
.L2923:
	cmpb	$25, 16(%r12)
	jne	.L2521
	movl	660(%rsp), %edi
	testl	%edi, %edi
	jne	.L2927
	testl	%r13d, %r13d
	jne	.L2521
.L2927:
	movq	8(%rbp), %rsi
	movzwl	60(%r15), %r13d
	movzwl	60(%rsi), %eax
	andl	$511, %r13d
	andl	$511, %eax
	cmpl	%r13d, %eax
	jge	.L2521
	call	signed_or_unsigned_type
	movq	%r12, %rdi
	movq	%rax, %rsi
	movq	%rax, %rbp
	call	int_fits_type_p
	testl	%eax, %eax
	cmovne	%rbp, %r15
	jmp	.L2521
.L3562:
	movl	656(%rsp), %edi
	testl	%edi, %edi
	jne	.L2924
	testl	%r13d, %r13d
	jne	.L2923
.L2924:
	movq	8(%r12), %rsi
	andl	$511, %edx
	movzwl	60(%rsi), %r9d
	andl	$511, %r9d
	cmpl	%edx, %r9d
	jge	.L2923
	call	signed_or_unsigned_type
	movq	%rbp, %rdi
	movq	%rax, %rsi
	movq	%rax, %rbx
	call	int_fits_type_p
	testl	%eax, %eax
	je	.L2923
	movq	%rbx, %r15
	jmp	.L2521
	.p2align 6,,7
.L3561:
	movl	660(%rsp), %edi
	cmpl	656(%rsp), %edi
	jne	.L2525
	testl	%edi, %edi
	jne	.L2526
	testl	%r13d, %r13d
	jne	.L2525
.L2526:
	cmpq	%rsi, %r8
	movq	%r8, %rbx
	movq	%rsi, %rbp
	je	.L2528
	movq	global_trees(%rip), %rax
	cmpq	%rax, %r8
	je	.L3563
	cmpq	%rax, %rsi
	je	.L2528
	movq	%r8, %rdi
	call	*targetm+248(%rip)
	movq	%rax, 432(%rsp)
	cmpb	$10, 16(%rbx)
	je	.L3564
.L2531:
	cmpb	$10, 16(%rbp)
	je	.L3565
.L2532:
	movzbl	16(%rbx), %r12d
	movzbl	16(%rbp), %r13d
	cmpl	$8, %r12d
	je	.L3282
	cmpl	$8, %r13d
	je	.L3308
	leal	-6(%r12), %eax
	cmpl	$17, %eax
	ja	.L2920
	mov	%eax, %r15d
	jmp	*.L2921(,%r15,8)
	.section	.rodata
	.align 8
	.align 4
.L2921:
	.quad	.L2545
	.quad	.L2545
	.quad	.L2920
	.quad	.L2920
	.quad	.L2920
	.quad	.L2920
	.quad	.L2920
	.quad	.L2562
	.quad	.L2920
	.quad	.L2920
	.quad	.L2920
	.quad	.L2920
	.quad	.L2565
	.quad	.L2920
	.quad	.L2920
	.quad	.L2920
	.quad	.L2920
	.quad	.L2570
	.text
.L2545:
	cmpl	$7, %r12d
	je	.L3567
	cmpl	$7, %r13d
	je	.L3283
.L2547:
	movzwl	60(%rbx), %edx
	movzwl	60(%rbp), %eax
	andl	$511, %edx
	andl	$511, %eax
	cmpl	%eax, %edx
	jg	.L2920
	cmpl	%edx, %eax
	jg	.L3434
	movq	128(%rbx), %rdx
	movq	integer_types+64(%rip), %rcx
	cmpq	%rcx, %rdx
	je	.L2556
	movq	128(%rbp), %rax
	cmpq	%rcx, %rax
	je	.L2556
	movq	integer_types+56(%rip), %rdi
	cmpq	%rdi, %rdx
	je	.L2554
	cmpq	%rdi, %rax
	je	.L2554
	movq	global_trees+208(%rip), %rdi
	cmpq	%rdi, %rdx
	je	.L3428
	cmpq	%rdi, %rax
	je	.L3428
	testb	$32, 17(%rbx)
	jne	.L2920
.L3434:
	movq	%rbp, %rdi
.L3428:
	movq	432(%rsp), %rsi
	call	build_type_attribute_variant
	movl	660(%rsp), %edi
	movq	%rax, %rbx
.L2528:
	movq	%rbx, %rsi
	call	signed_or_unsigned_type
	movq	%rax, %r15
	jmp	.L2521
.L2920:
	movq	%rbx, %rdi
	jmp	.L3428
.L2554:
	testb	$32, 17(%rbx)
	jne	.L2556
	testb	$32, 17(%rbp)
	je	.L3428
.L2556:
	movq	%rcx, %rdi
	jmp	.L3428
.L3283:
	cmpl	$7, %r12d
	jne	.L3434
	jmp	.L2547
.L3567:
	cmpl	$7, %r13d
	je	.L3283
	jmp	.L2920
.L2562:
	movq	8(%rbx), %rbx
	movq	8(%rbp), %rbp
	movq	128(%rbx), %rdi
	movq	128(%rbp), %rsi
	call	common_type
	xorl	%ecx, %ecx
	movzbl	62(%rbx), %r12d
	movzbl	17(%rbx), %r13d
	movq	%rax, %rdi
	shrb	$5, %r12b
	movl	%r13d, %edx
	andl	$1, %r12d
	shrb	$3, %r13b
	shrb	$4, %dl
	andl	$1, %r13d
	sall	$2, %r12d
	andl	$1, %edx
	addl	%r13d, %r13d
	orl	%r13d, %edx
	orl	%r12d, %edx
	cmpb	$20, 16(%rbx)
	je	.L3568
.L2563:
	movzbl	17(%rbp), %r11d
	leal	0(,%rcx,8), %esi
	movzbl	62(%rbp), %ecx
	orl	%edx, %esi
	movl	%r11d, %edx
	shrb	$5, %cl
	shrb	$3, %r11b
	shrb	$4, %dl
	andl	$1, %r11d
	andl	$1, %ecx
	andl	$1, %edx
	addl	%r11d, %r11d
	sall	$2, %ecx
	orl	%r11d, %edx
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	cmpb	$20, 16(%rbp)
	je	.L3569
.L2564:
	leal	0(,%rcx,8), %ebp
	orl	%ebp, %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movq	%rax, %rdi
	call	build_pointer_type
.L3436:
	movq	%rax, %rdi
	jmp	.L3428
.L3569:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L2564
.L3568:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L2563
.L2565:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	call	common_type
	cmpq	8(%rbx), %rax
	movq	%rax, %rdi
	je	.L3570
.L2566:
	cmpq	8(%rbp), %rdi
	je	.L3571
.L2567:
	cmpq	$0, 24(%rbx)
	cmove	%rbp, %rbx
	movq	24(%rbx), %rsi
	call	build_array_type
	jmp	.L3436
.L3571:
	cmpq	$0, 24(%rbp)
	je	.L2567
	jmp	.L3434
.L3570:
	cmpq	$0, 24(%rbx)
	je	.L2566
	jmp	.L2920
.L2570:
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	call	common_type
	movq	%rax, 424(%rsp)
	movq	424(%rsp), %rax
	movq	24(%rbx), %rsi
	movq	%rsi, 64(%rsp)
	movq	24(%rbp), %rdx
	movq	%rdx, 72(%rsp)
	cmpq	8(%rbx), %rax
	je	.L3572
.L2571:
	movq	424(%rsp), %rdx
	cmpq	8(%rbp), %rdx
	je	.L3573
	cmpq	$0, 64(%rsp)
	je	.L3574
.L2573:
	cmpq	$0, 72(%rsp)
	jne	.L2574
	movq	424(%rsp), %rdi
	movq	64(%rsp), %rsi
.L3510:
	call	build_function_type
	jmp	.L3436
.L2574:
	xorl	%edi, %edi
	call	pushlevel
	movl	$1, %edi
	call	declare_parm_level
	movq	64(%rsp), %rdi
	call	list_length
	movq	$0, 88(%rsp)
	testl	%eax, %eax
	jle	.L3081
	movl	%eax, %ebx
.L2579:
	movq	88(%rsp), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	call	tree_cons
	decl	%ebx
	movq	%rax, 88(%rsp)
	jne	.L2579
.L3081:
	cmpq	$0, 64(%rsp)
	movq	88(%rsp), %rdi
	movq	%rdi, 80(%rsp)
	je	.L3083
.L2919:
	movq	64(%rsp), %r9
	movq	32(%r9), %rdx
	testq	%rdx, %rdx
	jne	.L2584
	movq	72(%rsp), %rbx
	movq	80(%rsp), %r8
	movq	32(%rbx), %r10
	movq	%r10, 32(%r8)
.L2585:
.L2582:
	movq	64(%rsp), %r12
	movq	72(%rsp), %r11
	movq	80(%rsp), %rbp
	movq	(%r12), %rdx
	movq	%rdx, 64(%rsp)
	testq	%rdx, %rdx
	movq	(%r11), %rsi
	movq	%rsi, 72(%rsp)
	movq	(%rbp), %rdi
	movq	%rdi, 80(%rsp)
	jne	.L2919
.L3083:
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	call	poplevel
	movq	88(%rsp), %rsi
	movq	424(%rsp), %rdi
	call	build_function_type
	movq	%rax, %rbx
	jmp	.L2920
.L2584:
	movq	72(%rsp), %r15
	movq	32(%r15), %rax
	testq	%rax, %rax
	jne	.L2586
	movq	80(%rsp), %r12
	movq	%rdx, 32(%r12)
	jmp	.L2582
.L2586:
	cmpb	$21, 16(%rdx)
	je	.L3575
.L2587:
	cmpb	$21, 16(%rax)
	je	.L3576
.L2753:
	movq	64(%rsp), %r8
	movq	72(%rsp), %r10
	movq	32(%r8), %rdi
	movq	32(%r10), %rsi
	call	common_type
	movq	80(%rsp), %rbx
	movq	%rax, 32(%rbx)
	jmp	.L2582
.L3576:
	movq	64(%rsp), %rdx
	movq	32(%rdx), %rcx
	cmpq	%rcx, %rax
	je	.L2753
	movq	24(%rax), %rbx
	testq	%rbx, %rbx
	movq	%rbx, 40(%rsp)
	je	.L2753
.L2918:
	movq	40(%rsp), %r11
	movq	%rcx, %rbp
	movq	8(%r11), %rbx
	cmpq	%rcx, %rbx
	je	.L3426
	testq	%rbx, %rbx
	je	.L3426
	testq	%rcx, %rcx
	je	.L3426
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L3426
	movzbl	16(%rcx), %eax
	testb	%al, %al
	je	.L3426
	cmpb	$6, %dl
	je	.L3577
.L2762:
	cmpb	$6, %al
	je	.L3578
.L2763:
	cmpb	$10, %dl
	je	.L3579
.L2764:
	cmpb	$10, 16(%rbp)
	je	.L3580
.L2765:
	cmpq	%rbp, %rbx
	movl	$1, %r15d
	je	.L2761
	movzbl	16(%rbx), %esi
	cmpb	16(%rbp), %sil
	je	.L2767
	xorl	%r15d, %r15d
.L2761:
	testl	%r15d, %r15d
	jne	.L3581
.L2756:
	movq	40(%rsp), %rcx
	movq	(%rcx), %r9
	testq	%r9, %r9
	movq	%r9, 40(%rsp)
	je	.L2753
	movq	64(%rsp), %rax
	movq	32(%rax), %rcx
	jmp	.L2918
.L3581:
	movq	64(%rsp), %rax
	movq	80(%rsp), %r12
	movq	32(%rax), %r13
	movq	%r13, 32(%r12)
.L3519:
	movl	pedantic(%rip), %r15d
	testl	%r15d, %r15d
	je	.L2582
	movl	$.LC10, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L2582
.L2767:
	movzbl	17(%rbx), %r12d
	movzbl	62(%rbx), %ecx
	movl	%r12d, %edx
	shrb	$5, %cl
	shrb	$3, %r12b
	shrb	$4, %dl
	andl	$1, %r12d
	andl	$1, %ecx
	andl	$1, %edx
	addl	%r12d, %r12d
	sall	$2, %ecx
	orl	%r12d, %edx
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	cmpb	$20, %sil
	je	.L3582
.L2769:
	movzbl	17(%rbp), %r8d
	movzbl	62(%rbp), %r13d
	leal	0(,%rcx,8), %edi
	orl	%edx, %edi
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	shrb	$5, %r13b
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	$1, %r8d
	andl	$1, %r13d
	andl	$1, %edx
	addl	%r8d, %r8d
	sall	$2, %r13d
	orl	%r8d, %edx
	orl	%r13d, %edx
	cmpb	$20, %sil
	je	.L3583
.L2770:
	leal	0(,%rcx,8), %r15d
	orl	%r15d, %edx
	xorl	%r15d, %r15d
	cmpl	%edx, %edi
	jne	.L2761
	movq	128(%rbp), %rsi
	cmpq	%rsi, 128(%rbx)
	je	.L3426
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	xorl	%r15d, %r15d
	call	*targetm+264(%rip)
	testl	%eax, %eax
	movl	%eax, 416(%rsp)
	je	.L2761
	movzbl	16(%rbx), %eax
	xorl	%r15d, %r15d
	cmpl	$18, %eax
	je	.L2896
	cmpl	$18, %eax
	ja	.L2913
	cmpl	$13, %eax
	je	.L2774
.L2773:
	cmpl	$2, 416(%rsp)
	jne	.L2761
	cmpl	$1, %r15d
	cmove	416(%rsp), %r15d
	jmp	.L2761
.L2774:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L2775
	call	comptypes
	movl	%eax, %r15d
	jmp	.L2773
.L2775:
	movl	$1, %r15d
	jmp	.L2773
.L2913:
	cmpl	$20, %eax
	je	.L2909
	cmpl	$23, %eax
	jne	.L2773
	movl	$1, 36(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L2778
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 36(%rsp)
	je	.L2773
.L2778:
	movq	24(%rbx), %r13
	movq	24(%rbp), %r12
	testq	%r13, %r13
	je	.L3584
	testq	%r12, %r12
	je	.L3585
	movl	$1, %r15d
	xorl	%ebp, %ebp
.L2893:
	testq	%r13, %r13
	je	.L3586
	testq	%r12, %r12
	je	.L2882
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3587
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L2868
.L3518:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L2882
.L2867:
	movq	(%r13), %r13
	movq	(%r12), %r12
	cmpl	%r15d, %ebp
	cmovg	%ebp, %r15d
	jmp	.L2893
.L2882:
	xorl	%r15d, %r15d
.L2862:
	cmpl	$1, %r15d
	cmove	36(%rsp), %r15d
	jmp	.L2773
.L2868:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %ebp
	jne	.L2867
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3589
.L2872:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L2882
	cmpq	$0, 96(%rax)
	je	.L2883
	testb	$8, 62(%rax)
	je	.L2882
.L2883:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2882
	movq	32(%r13), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2882
	movq	32(%r12), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L2882
.L2889:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2885
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2889
	jmp	.L2882
.L2885:
	testq	%rbx, %rbx
	jne	.L2867
	jmp	.L2882
.L3589:
	cmpq	$0, 96(%rax)
	je	.L2873
	testb	$8, 62(%rax)
	je	.L2872
.L2873:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2872
	movq	32(%r12), %r10
	movq	32(%r10), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2872
	movq	32(%r13), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L2882
.L2879:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2885
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2879
	jmp	.L2882
.L3587:
	movq	32(%r12), %rdi
	jmp	.L3518
.L3586:
	testq	%r12, %r12
	je	.L2862
	jmp	.L2882
.L3585:
	movq	%r13, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L2773
	movq	136(%rbp), %rax
	testq	%rax, %rax
	je	.L3153
	movq	%rax, %rbp
	movl	$1, %r12d
	xorl	%r15d, %r15d
.L2857:
	testq	%r13, %r13
	je	.L3590
	testq	%rbp, %rbp
	je	.L2846
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3591
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L2832
.L3516:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L2846
.L2831:
	movq	(%r13), %r13
	movq	(%rbp), %rbp
	cmpl	%r12d, %r15d
	cmovg	%r15d, %r12d
	jmp	.L2857
.L2846:
	xorl	%r12d, %r12d
.L2826:
	movl	$2, %r15d
	decl	%r12d
.L3517:
	jne	.L2773
.L3153:
	movl	36(%rsp), %r15d
	jmp	.L2773
.L2832:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L2831
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3593
.L2836:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L2846
	cmpq	$0, 96(%rax)
	je	.L2847
	testb	$8, 62(%rax)
	je	.L2846
.L2847:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2846
	movq	32(%r13), %rcx
	movq	32(%rcx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2846
	movq	32(%rbp), %r8
	movq	24(%r8), %rbx
	testq	%rbx, %rbx
	je	.L2846
.L2853:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2849
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2853
	jmp	.L2846
.L2849:
	testq	%rbx, %rbx
	jne	.L2831
	jmp	.L2846
.L3593:
	cmpq	$0, 96(%rax)
	je	.L2837
	testb	$8, 62(%rax)
	je	.L2836
.L2837:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2836
	movq	32(%rbp), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2836
	movq	32(%r13), %r9
	movq	24(%r9), %rbx
	testq	%rbx, %rbx
	je	.L2846
.L2843:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2849
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2843
	jmp	.L2846
.L3591:
	movq	32(%rbp), %rdi
	jmp	.L3516
.L3590:
	testq	%rbp, %rbp
	je	.L2826
	jmp	.L2846
.L3584:
	movq	%r12, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L2773
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L3153
	movq	%rax, %rbp
	movl	$1, %r13d
	xorl	%r15d, %r15d
.L2818:
	testq	%r12, %r12
	je	.L3594
	testq	%rbp, %rbp
	je	.L2807
	movq	32(%r12), %rdi
	testq	%rdi, %rdi
	je	.L3595
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L2793
.L3515:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L2807
.L2792:
	movq	(%r12), %r12
	movq	(%rbp), %rbp
	cmpl	%r13d, %r15d
	cmovg	%r15d, %r13d
	jmp	.L2818
.L2807:
	xorl	%r13d, %r13d
.L2787:
	movl	$2, %r15d
	decl	%r13d
	jmp	.L3517
.L2793:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L2792
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	je	.L3597
.L2797:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L2807
	cmpq	$0, 96(%rax)
	je	.L2808
	testb	$8, 62(%rax)
	je	.L2807
.L2808:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2807
	movq	32(%r12), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2807
	movq	32(%rbp), %r11
	movq	24(%r11), %rbx
	testq	%rbx, %rbx
	je	.L2807
.L2814:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2810
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2814
	jmp	.L2807
.L2810:
	testq	%rbx, %rbx
	jne	.L2792
	jmp	.L2807
.L3597:
	cmpq	$0, 96(%rax)
	je	.L2798
	testb	$8, 62(%rax)
	je	.L2797
.L2798:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2797
	movq	32(%rbp), %r10
	movq	32(%r10), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2797
	movq	32(%r12), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L2807
.L2804:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2810
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2804
	jmp	.L2807
.L3595:
	movq	32(%rbp), %rdi
	jmp	.L3515
.L3594:
	testq	%rbp, %rbp
	je	.L2787
	jmp	.L2807
.L2909:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmove	%eax, %r15d
	jmp	.L2773
.L2896:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	movl	$1, %r15d
	movq	24(%rbx), %r12
	movq	24(%rbp), %r13
	cmpq	%rsi, %rdi
	je	.L2897
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	je	.L2756
.L2897:
	testq	%r12, %r12
	je	.L2773
	testq	%r13, %r13
	je	.L2773
	cmpq	%r13, %r12
	je	.L2773
	movq	112(%r12), %rcx
	movq	112(%r13), %rsi
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L2900
	movq	104(%r12), %rbp
	cmpb	$25, 16(%rbp)
	je	.L3598
.L2901:
	movl	$1, %r8d
.L2900:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L2902
	movq	104(%r13), %r11
	cmpb	$25, 16(%r11)
	je	.L3599
.L2903:
	movl	$1, %ecx
.L2902:
	testb	%r8b, %r8b
	jne	.L2773
	testb	%cl, %cl
	jne	.L2773
	testb	%dil, %dil
	je	.L3303
	testb	%dl, %dl
.L3425:
	jne	.L2773
.L2908:
	xorl	%r15d, %r15d
	jmp	.L2773
.L3303:
	testb	%dl, %dl
	jne	.L2908
	movq	104(%r12), %rdi
	movq	104(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2908
	movq	112(%r12), %rdi
	movq	112(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L3425
.L3599:
	cmpb	$25, 16(%rsi)
	jne	.L2903
	jmp	.L2902
.L3598:
	cmpb	$25, 16(%rcx)
	jne	.L2901
	jmp	.L2900
.L3426:
	movl	$1, %r15d
	jmp	.L2761
.L3583:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L2770
.L3582:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L2769
.L3580:
	movzbl	17(%rbp), %esi
	movzwl	60(%rbp), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L2765
.L3579:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L2764
.L3578:
	testb	$2, 62(%rcx)
	je	.L2763
	movq	24(%rcx), %r9
	testq	%r9, %r9
	cmovne	%r9, %rbp
	jmp	.L2763
.L3577:
	testb	$2, 62(%rbx)
	je	.L2762
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L2762
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L2762
.L3575:
	cmpq	%rax, %rdx
	je	.L2587
	movq	24(%rdx), %r13
	testq	%r13, %r13
	movq	%r13, 56(%rsp)
	je	.L2587
.L2752:
	movq	56(%rsp), %rcx
	movq	%rax, %rbp
	movq	8(%rcx), %rbx
	cmpq	%rax, %rbx
	je	.L2594
	testq	%rbx, %rbx
	je	.L2594
	testq	%rax, %rax
	je	.L2594
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L2594
	movzbl	16(%rax), %ecx
	testb	%cl, %cl
	jne	.L2593
.L2594:
	movl	$1, %r15d
.L2595:
	testl	%r15d, %r15d
	jne	.L3600
.L2590:
	movq	56(%rsp), %rdi
	movq	(%rdi), %r10
	testq	%r10, %r10
	movq	%r10, 56(%rsp)
	jne	.L2752
	jmp	.L2587
.L3600:
	movq	80(%rsp), %r15
	movq	%rax, 32(%r15)
	jmp	.L3519
.L2593:
	cmpb	$6, %dl
	je	.L3601
.L2596:
	cmpb	$6, %cl
	je	.L3602
.L2597:
	cmpb	$10, %dl
	je	.L3603
.L2598:
	cmpb	$10, 16(%rbp)
	je	.L3604
.L2599:
	cmpq	%rbp, %rbx
	movl	$1, %r15d
	je	.L3424
	movzbl	16(%rbx), %edi
	cmpb	16(%rbp), %dil
	je	.L2601
	xorl	%r15d, %r15d
.L3423:
	movq	72(%rsp), %r12
	movq	32(%r12), %rax
	jmp	.L2595
.L2601:
	movzbl	17(%rbx), %r9d
	movzbl	62(%rbx), %esi
	xorl	%ecx, %ecx
	movl	%r9d, %edx
	shrb	$5, %sil
	shrb	$3, %r9b
	shrb	$4, %dl
	andl	$1, %r9d
	andl	$1, %esi
	andl	$1, %edx
	addl	%r9d, %r9d
	sall	$2, %esi
	orl	%r9d, %edx
	orl	%esi, %edx
	cmpb	$20, %dil
	je	.L3605
.L2603:
	movzbl	17(%rbp), %r10d
	movzbl	62(%rbp), %r8d
	leal	0(,%rcx,8), %esi
	orl	%edx, %esi
	xorl	%ecx, %ecx
	movl	%r10d, %edx
	shrb	$5, %r8b
	shrb	$3, %r10b
	shrb	$4, %dl
	andl	$1, %r10d
	andl	$1, %r8d
	andl	$1, %edx
	addl	%r10d, %r10d
	sall	$2, %r8d
	orl	%r10d, %edx
	orl	%r8d, %edx
	cmpb	$20, %dil
	je	.L3606
.L2604:
	leal	0(,%rcx,8), %edi
	orl	%edi, %edx
	cmpl	%edx, %esi
	je	.L2602
	xorl	%r15d, %r15d
.L3336:
	movq	72(%rsp), %r13
	movq	32(%r13), %rax
	jmp	.L2595
.L2602:
	movq	128(%rbp), %rax
	cmpq	%rax, 128(%rbx)
	je	.L3607
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	*targetm+264(%rip)
	testl	%eax, %eax
	movl	%eax, 420(%rsp)
	jne	.L2606
	xorl	%r15d, %r15d
.L3424:
	movq	72(%rsp), %rbx
	movq	32(%rbx), %rax
	jmp	.L2595
.L2606:
	movzbl	16(%rbx), %eax
	xorl	%r15d, %r15d
	cmpl	$18, %eax
	je	.L2730
	cmpl	$18, %eax
	ja	.L2747
	cmpl	$13, %eax
	je	.L2608
.L2607:
	cmpl	$2, 420(%rsp)
	jne	.L3336
	cmpl	$1, %r15d
	je	.L3608
	movq	72(%rsp), %r8
	movq	32(%r8), %rax
	jmp	.L2595
.L3608:
	movl	$2, %r15d
	jmp	.L3423
.L2608:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L2609
	call	comptypes
	movl	%eax, %r15d
	jmp	.L2607
.L2609:
	movl	$1, %r15d
	jmp	.L2607
.L2747:
	cmpl	$20, %eax
	je	.L2743
	cmpl	$23, %eax
	jne	.L2607
	movl	$1, 52(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L2612
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 52(%rsp)
	je	.L2607
.L2612:
	movq	24(%rbx), %r13
	movq	24(%rbp), %r12
	testq	%r13, %r13
	je	.L3609
	testq	%r12, %r12
	je	.L3610
	movl	$1, %r15d
	xorl	%ebp, %ebp
.L2727:
	testq	%r13, %r13
	je	.L3611
	testq	%r12, %r12
	je	.L2716
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3612
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L2702
.L3514:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L2716
.L2701:
	movq	(%r13), %r13
	movq	(%r12), %r12
	cmpl	%r15d, %ebp
	cmovg	%ebp, %r15d
	jmp	.L2727
.L2716:
	xorl	%r15d, %r15d
.L2696:
	cmpl	$1, %r15d
	cmove	52(%rsp), %r15d
	jmp	.L2607
.L2702:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %ebp
	jne	.L2701
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3614
.L2706:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L2716
	cmpq	$0, 96(%rax)
	je	.L2717
	testb	$8, 62(%rax)
	je	.L2716
.L2717:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2716
	movq	32(%r13), %rcx
	movq	32(%rcx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2716
	movq	32(%r12), %r11
	movq	24(%r11), %rbx
	testq	%rbx, %rbx
	je	.L2716
.L2723:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2719
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2723
	jmp	.L2716
.L2719:
	testq	%rbx, %rbx
	jne	.L2701
	jmp	.L2716
.L3614:
	cmpq	$0, 96(%rax)
	je	.L2707
	testb	$8, 62(%rax)
	je	.L2706
.L2707:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2706
	movq	32(%r12), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2706
	movq	32(%r13), %rdx
	movq	24(%rdx), %rbx
	testq	%rbx, %rbx
	je	.L2716
.L2713:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2719
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2713
	jmp	.L2716
.L3612:
	movq	32(%r12), %rdi
	jmp	.L3514
.L3611:
	testq	%r12, %r12
	je	.L2696
	jmp	.L2716
.L3610:
	movq	%r13, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L2607
	movq	136(%rbp), %rax
	testq	%rax, %rax
	je	.L3149
	movq	%rax, %rbp
	movl	$1, %r12d
	xorl	%r15d, %r15d
.L2691:
	testq	%r13, %r13
	je	.L3615
	testq	%rbp, %rbp
	je	.L2680
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3616
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L2666
.L3512:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L2680
.L2665:
	movq	(%r13), %r13
	movq	(%rbp), %rbp
	cmpl	%r12d, %r15d
	cmovg	%r15d, %r12d
	jmp	.L2691
.L2680:
	xorl	%r12d, %r12d
.L2660:
	movl	$2, %r15d
	decl	%r12d
.L3513:
	jne	.L2607
.L3149:
	movl	52(%rsp), %r15d
	jmp	.L2607
.L2666:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L2665
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3618
.L2670:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L2680
	cmpq	$0, 96(%rax)
	je	.L2681
	testb	$8, 62(%rax)
	je	.L2680
.L2681:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2680
	movq	32(%r13), %r10
	movq	32(%r10), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2680
	movq	32(%rbp), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L2680
.L2687:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2683
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2687
	jmp	.L2680
.L2683:
	testq	%rbx, %rbx
	jne	.L2665
	jmp	.L2680
.L3618:
	cmpq	$0, 96(%rax)
	je	.L2671
	testb	$8, 62(%rax)
	je	.L2670
.L2671:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2670
	movq	32(%rbp), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2670
	movq	32(%r13), %r8
	movq	24(%r8), %rbx
	testq	%rbx, %rbx
	je	.L2680
.L2677:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2683
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2677
	jmp	.L2680
.L3616:
	movq	32(%rbp), %rdi
	jmp	.L3512
.L3615:
	testq	%rbp, %rbp
	je	.L2660
	jmp	.L2680
.L3609:
	movq	%r12, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L2607
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L3149
	movq	%rax, %rbp
	movl	$1, %r13d
	xorl	%r15d, %r15d
.L2652:
	testq	%r12, %r12
	je	.L3619
	testq	%rbp, %rbp
	je	.L2641
	movq	32(%r12), %rdi
	testq	%rdi, %rdi
	je	.L3620
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L2627
.L3511:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L2641
.L2626:
	movq	(%r12), %r12
	movq	(%rbp), %rbp
	cmpl	%r13d, %r15d
	cmovg	%r15d, %r13d
	jmp	.L2652
.L2641:
	xorl	%r13d, %r13d
.L2621:
	movl	$2, %r15d
	decl	%r13d
	jmp	.L3513
.L2627:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L2626
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	je	.L3622
.L2631:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L2641
	cmpq	$0, 96(%rax)
	je	.L2642
	testb	$8, 62(%rax)
	je	.L2641
.L2642:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2641
	movq	32(%r12), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2641
	movq	32(%rbp), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L2641
.L2648:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2644
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2648
	jmp	.L2641
.L2644:
	testq	%rbx, %rbx
	jne	.L2626
	jmp	.L2641
.L3622:
	cmpq	$0, 96(%rax)
	je	.L2632
	testb	$8, 62(%rax)
	je	.L2631
.L2632:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2631
	movq	32(%rbp), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2631
	movq	32(%r12), %rcx
	movq	24(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L2641
.L2638:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2644
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2638
	jmp	.L2641
.L3620:
	movq	32(%rbp), %rdi
	jmp	.L3511
.L3619:
	testq	%rbp, %rbp
	je	.L2621
	jmp	.L2641
.L2743:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmove	%eax, %r15d
	jmp	.L2607
.L2730:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	movl	$1, %r15d
	movq	24(%rbx), %r12
	movq	24(%rbp), %r13
	cmpq	%rsi, %rdi
	je	.L2731
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	je	.L3335
.L2731:
	testq	%r12, %r12
	je	.L2607
	testq	%r13, %r13
	je	.L2607
	cmpq	%r13, %r12
	je	.L2607
	movq	112(%r12), %rcx
	movq	112(%r13), %rsi
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L2734
	movq	104(%r12), %rbp
	cmpb	$25, 16(%rbp)
	je	.L3623
.L2735:
	movl	$1, %r8d
.L2734:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L2736
	movq	104(%r13), %r9
	cmpb	$25, 16(%r9)
	je	.L3624
.L2737:
	movl	$1, %ecx
.L2736:
	testb	%r8b, %r8b
	jne	.L2607
	testb	%cl, %cl
	jne	.L2607
	testb	%dil, %dil
	je	.L3293
	testb	%dl, %dl
.L3422:
	jne	.L2607
.L2742:
	xorl	%r15d, %r15d
	jmp	.L2607
.L3293:
	testb	%dl, %dl
	jne	.L2742
	movq	104(%r12), %rdi
	movq	104(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2742
	movq	112(%r12), %rdi
	movq	112(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L3422
.L3624:
	cmpb	$25, 16(%rsi)
	jne	.L2737
	jmp	.L2736
.L3623:
	cmpb	$25, 16(%rcx)
	jne	.L2735
	jmp	.L2734
.L3335:
	movq	72(%rsp), %rsi
	movq	32(%rsi), %rax
	jmp	.L2590
.L3607:
	movq	72(%rsp), %rbp
	movl	$1, %r15d
	movq	32(%rbp), %rax
	jmp	.L2595
.L3606:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L2604
.L3605:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L2603
.L3604:
	movzbl	17(%rbp), %esi
	movzwl	60(%rbp), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L2599
.L3603:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L2598
.L3602:
	testb	$2, 62(%rax)
	je	.L2597
	movq	24(%rax), %r11
	testq	%r11, %r11
	cmovne	%r11, %rbp
	jmp	.L2597
.L3601:
	testb	$2, 62(%rbx)
	je	.L2596
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L2596
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L2596
.L3574:
	movq	424(%rsp), %rdi
	movq	24(%rbp), %rsi
	jmp	.L3510
.L3573:
	cmpq	$0, 64(%rsp)
	jne	.L2573
	jmp	.L3434
.L3572:
	testq	%rdx, %rdx
	jne	.L2571
	jmp	.L2920
.L3308:
	movq	%rbx, %rdi
.L2536:
	cmpl	$8, %r13d
	movq	%rbp, %rsi
	je	.L3625
.L2538:
	call	common_type
	cmpl	$8, %r12d
	movq	%rax, %rdi
	je	.L3626
.L2539:
	cmpl	$8, %r13d
	je	.L3627
.L2541:
	call	build_complex_type
	jmp	.L3436
.L3627:
	cmpq	%rdi, 8(%rbp)
	jne	.L2541
	jmp	.L3434
.L3626:
	cmpq	%rax, 8(%rbx)
	jne	.L2539
	jmp	.L2920
.L3625:
	movq	8(%rbp), %rsi
	jmp	.L2538
.L3282:
	movq	8(%rbx), %rdi
	jmp	.L2536
.L3565:
	movzwl	60(%rbp), %edi
	movl	$1, %esi
	andl	$511, %edi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L2532
.L3564:
	movzwl	60(%rbx), %edi
	movl	$1, %esi
	andl	$511, %edi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L2531
.L3563:
	movq	%rsi, %rbx
	jmp	.L2528
	.p2align 6,,7
.L3560:
	movl	660(%rsp), %r13d
	jmp	.L2524
.L3559:
	cmpq	%r15, %rcx
	je	.L2523
	movzbl	17(%rcx), %r9d
	shrb	$5, %r9b
	andl	$1, %r9d
	movl	%r9d, 656(%rsp)
	jmp	.L2523
.L3558:
	cmpq	%r15, %rcx
	je	.L2522
	movzbl	17(%rcx), %ebx
	movl	$1, %edx
	shrb	$5, %bl
	andl	%ebx, %edx
	movl	%edx, 660(%rsp)
	jmp	.L2522
.L3421:
	movq	%rax, %rdi
	jmp	.L3412
.L2149:
	movq	96(%rsp), %rdx
	testb	$32, 17(%rdx)
	jne	.L3416
	movq	168(%rsp), %rax
	testb	$32, 17(%rax)
	je	.L3412
.L3416:
	movq	%rcx, %rdi
	jmp	.L3412
.L3261:
	cmpl	$7, %ebx
	jne	.L2155
	jmp	.L2142
.L3546:
	cmpl	$7, %ebp
	je	.L3261
.L2519:
	movq	96(%rsp), %rdi
	jmp	.L3412
.L2157:
	movq	96(%rsp), %rdi
	movq	168(%rsp), %r15
	movq	8(%rdi), %rbx
	movq	8(%r15), %rbp
	movq	128(%rbx), %rdi
	movq	128(%rbp), %rsi
	call	common_type
	movzbl	62(%rbx), %ecx
	movzbl	17(%rbx), %r9d
	movq	%rax, %rdi
	movl	%r9d, %edx
	shrb	$5, %cl
	shrb	$3, %r9b
	shrb	$4, %dl
	andl	$1, %r9d
	andl	$1, %ecx
	andl	$1, %edx
	addl	%r9d, %r9d
	sall	$2, %ecx
	orl	%r9d, %edx
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	cmpb	$20, 16(%rbx)
	je	.L3628
.L2160:
	movzbl	17(%rbp), %r13d
	movzbl	62(%rbp), %r10d
	leal	0(,%rcx,8), %esi
	orl	%edx, %esi
	xorl	%ecx, %ecx
	movl	%r13d, %edx
	shrb	$5, %r10b
	shrb	$3, %r13b
	shrb	$4, %dl
	andl	$1, %r13d
	andl	$1, %r10d
	andl	$1, %edx
	addl	%r13d, %r13d
	sall	$2, %r10d
	orl	%r13d, %edx
	orl	%r10d, %edx
	cmpb	$20, 16(%rbp)
	je	.L3629
.L2161:
	leal	0(,%rcx,8), %ebp
	orl	%ebp, %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movq	%rax, %rdi
	call	build_pointer_type
	jmp	.L3421
.L3629:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L2161
.L3628:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L2160
	.p2align 6,,7
.L2162:
	movq	96(%rsp), %rbx
	movq	168(%rsp), %r12
	movq	8(%rbx), %rdi
	movq	8(%r12), %rsi
	call	common_type
	cmpq	8(%rbx), %rax
	movq	%rax, %rdi
	je	.L3630
.L2163:
	movq	168(%rsp), %rax
	cmpq	8(%rax), %rdi
	je	.L3631
.L2164:
	movq	96(%rsp), %r11
	cmpq	$0, 24(%r11)
	cmove	168(%rsp), %r11
	movq	24(%r11), %rsi
	call	build_array_type
	jmp	.L3421
.L3631:
	cmpq	$0, 24(%rax)
	je	.L2164
	jmp	.L3421
.L3630:
	cmpq	$0, 24(%rbx)
	je	.L2163
.L3413:
	movq	%rbx, %rdi
	jmp	.L3412
	.p2align 6,,7
.L2169:
	movq	96(%rsp), %rsi
	movq	168(%rsp), %r15
	movq	8(%rsi), %rdi
	movq	8(%r15), %rsi
	call	common_type
	movq	96(%rsp), %rdx
	movq	96(%rsp), %r8
	movq	%rax, 448(%rsp)
	movq	24(%r8), %rbx
	movq	%rbx, 136(%rsp)
	movq	24(%r15), %r8
	movq	%r8, 144(%rsp)
	cmpq	8(%rdx), %rax
	je	.L3632
.L2170:
	movq	168(%rsp), %rcx
	movq	448(%rsp), %rdx
	cmpq	8(%rcx), %rdx
	je	.L3633
	cmpq	$0, 136(%rsp)
	je	.L3634
.L2172:
	cmpq	$0, 144(%rsp)
	jne	.L2173
	movq	448(%rsp), %rdi
	movq	136(%rsp), %rsi
.L3500:
	call	build_function_type
	jmp	.L3421
.L2173:
	xorl	%edi, %edi
	call	pushlevel
	movl	$1, %edi
	call	declare_parm_level
	movq	136(%rsp), %rdi
	call	list_length
	movq	$0, 160(%rsp)
	testl	%eax, %eax
	jle	.L3063
	movl	%eax, %ebx
.L2178:
	movq	160(%rsp), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	call	tree_cons
	decl	%ebx
	movq	%rax, 160(%rsp)
	jne	.L2178
.L3063:
	cmpq	$0, 136(%rsp)
	movq	160(%rsp), %rcx
	movq	%rcx, 152(%rsp)
	je	.L3065
.L2518:
	movq	136(%rsp), %r9
	movq	32(%r9), %rdx
	testq	%rdx, %rdx
	jne	.L2183
	movq	144(%rsp), %r13
	movq	152(%rsp), %rdi
	movq	32(%r13), %r10
	movq	%r10, 32(%rdi)
.L2184:
.L2181:
	movq	136(%rsp), %r12
	movq	144(%rsp), %r11
	movq	152(%rsp), %rdi
	movq	(%r12), %rdx
	movq	%rdx, 136(%rsp)
	testq	%rdx, %rdx
	movq	(%r11), %rbp
	movq	%rbp, 144(%rsp)
	movq	(%rdi), %rbx
	movq	%rbx, 152(%rsp)
	jne	.L2518
.L3065:
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	call	poplevel
	movq	160(%rsp), %rsi
	movq	448(%rsp), %rdi
	call	build_function_type
	movq	%rax, 96(%rsp)
	jmp	.L2519
	.p2align 6,,7
.L2183:
	movq	144(%rsp), %rbp
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L2185
	movq	152(%rsp), %r12
	movq	%rdx, 32(%r12)
	jmp	.L2181
.L2185:
	cmpb	$21, 16(%rdx)
	je	.L3635
.L2186:
	cmpb	$21, 16(%rax)
	je	.L3636
.L2352:
	movq	136(%rsp), %rsi
	movq	144(%rsp), %r10
	movq	32(%rsi), %rdi
	movq	32(%r10), %rsi
	call	common_type
	movq	152(%rsp), %rcx
	movq	%rax, 32(%rcx)
	jmp	.L2181
.L3636:
	movq	136(%rsp), %rbx
	movq	32(%rbx), %rcx
	cmpq	%rcx, %rax
	je	.L2352
	movq	24(%rax), %r11
	testq	%r11, %r11
	movq	%r11, 112(%rsp)
	je	.L2352
.L2517:
	movq	112(%rsp), %r8
	movq	%rcx, %rbp
	movq	8(%r8), %rbx
	cmpq	%rcx, %rbx
	je	.L3410
	testq	%rbx, %rbx
	je	.L3410
	testq	%rcx, %rcx
	je	.L3410
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L3410
	movzbl	16(%rcx), %eax
	testb	%al, %al
	je	.L3410
	cmpb	$6, %dl
	je	.L3637
.L2361:
	cmpb	$6, %al
	je	.L3638
.L2362:
	cmpb	$10, %dl
	je	.L3639
.L2363:
	cmpb	$10, 16(%rbp)
	je	.L3640
.L2364:
	cmpq	%rbp, %rbx
	movl	$1, %r15d
	je	.L2360
	movzbl	16(%rbx), %esi
	cmpb	16(%rbp), %sil
	je	.L2366
	xorl	%r15d, %r15d
.L2360:
	testl	%r15d, %r15d
	jne	.L3641
.L2355:
	movq	112(%rsp), %r9
	movq	(%r9), %r8
	testq	%r8, %r8
	movq	%r8, 112(%rsp)
	je	.L2352
	movq	136(%rsp), %rax
	movq	32(%rax), %rcx
	jmp	.L2517
.L3641:
	movq	136(%rsp), %rax
	movq	152(%rsp), %r12
	movq	32(%rax), %r13
	movq	%r13, 32(%r12)
.L3509:
	movl	pedantic(%rip), %r15d
	testl	%r15d, %r15d
	je	.L2181
	movl	$.LC10, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L2181
.L2366:
	movzbl	17(%rbx), %r12d
	movzbl	62(%rbx), %ecx
	movl	%r12d, %edx
	shrb	$5, %cl
	shrb	$3, %r12b
	shrb	$4, %dl
	andl	$1, %r12d
	andl	$1, %ecx
	andl	$1, %edx
	addl	%r12d, %r12d
	sall	$2, %ecx
	orl	%r12d, %edx
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	cmpb	$20, %sil
	je	.L3642
.L2368:
	movzbl	17(%rbp), %r15d
	movzbl	62(%rbp), %r13d
	leal	0(,%rcx,8), %edi
	orl	%edx, %edi
	xorl	%ecx, %ecx
	movl	%r15d, %edx
	shrb	$5, %r13b
	shrb	$3, %r15b
	shrb	$4, %dl
	andl	$1, %r15d
	andl	$1, %r13d
	andl	$1, %edx
	addl	%r15d, %r15d
	sall	$2, %r13d
	orl	%r15d, %edx
	orl	%r13d, %edx
	cmpb	$20, %sil
	je	.L3643
.L2369:
	leal	0(,%rcx,8), %esi
	xorl	%r15d, %r15d
	orl	%esi, %edx
	cmpl	%edx, %edi
	jne	.L2360
	movq	128(%rbp), %r10
	cmpq	%r10, 128(%rbx)
	je	.L3410
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	xorl	%r15d, %r15d
	call	*targetm+264(%rip)
	testl	%eax, %eax
	movl	%eax, 440(%rsp)
	je	.L2360
	movzbl	16(%rbx), %eax
	xorl	%r15d, %r15d
	cmpl	$18, %eax
	je	.L2495
	cmpl	$18, %eax
	ja	.L2512
	cmpl	$13, %eax
	je	.L2373
.L2372:
	cmpl	$2, 440(%rsp)
	jne	.L2360
	cmpl	$1, %r15d
	cmove	440(%rsp), %r15d
	jmp	.L2360
.L2373:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L2374
	call	comptypes
	movl	%eax, %r15d
	jmp	.L2372
.L2374:
	movl	$1, %r15d
	jmp	.L2372
.L2512:
	cmpl	$20, %eax
	je	.L2508
	cmpl	$23, %eax
	jne	.L2372
	movl	$1, 108(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L2377
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 108(%rsp)
	je	.L2372
.L2377:
	movq	24(%rbx), %r13
	movq	24(%rbp), %r12
	testq	%r13, %r13
	je	.L3644
	testq	%r12, %r12
	je	.L3645
	movl	$1, %r15d
	xorl	%ebp, %ebp
.L2492:
	testq	%r13, %r13
	je	.L3646
	testq	%r12, %r12
	je	.L2481
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3647
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L2467
.L3508:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L2481
.L2466:
	movq	(%r13), %r13
	movq	(%r12), %r12
	cmpl	%r15d, %ebp
	cmovg	%ebp, %r15d
	jmp	.L2492
.L2481:
	xorl	%r15d, %r15d
.L2461:
	cmpl	$1, %r15d
	cmove	108(%rsp), %r15d
	jmp	.L2372
.L2467:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %ebp
	jne	.L2466
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3649
.L2471:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L2481
	cmpq	$0, 96(%rax)
	je	.L2482
	testb	$8, 62(%rax)
	je	.L2481
.L2482:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2481
	movq	32(%r13), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2481
	movq	32(%r12), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L2481
.L2488:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2484
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2488
	jmp	.L2481
.L2484:
	testq	%rbx, %rbx
	jne	.L2466
	jmp	.L2481
.L3649:
	cmpq	$0, 96(%rax)
	je	.L2472
	testb	$8, 62(%rax)
	je	.L2471
.L2472:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2471
	movq	32(%r12), %r10
	movq	32(%r10), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2471
	movq	32(%r13), %rdx
	movq	24(%rdx), %rbx
	testq	%rbx, %rbx
	je	.L2481
.L2478:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2484
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2478
	jmp	.L2481
.L3647:
	movq	32(%r12), %rdi
	jmp	.L3508
.L3646:
	testq	%r12, %r12
	je	.L2461
	jmp	.L2481
.L3645:
	movq	%r13, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L2372
	movq	136(%rbp), %rax
	testq	%rax, %rax
	je	.L3145
	movq	%rax, %rbp
	movl	$1, %r12d
	xorl	%r15d, %r15d
.L2456:
	testq	%r13, %r13
	je	.L3650
	testq	%rbp, %rbp
	je	.L2445
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3651
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L2431
.L3506:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L2445
.L2430:
	movq	(%r13), %r13
	movq	(%rbp), %rbp
	cmpl	%r12d, %r15d
	cmovg	%r15d, %r12d
	jmp	.L2456
.L2445:
	xorl	%r12d, %r12d
.L2425:
	movl	$2, %r15d
	decl	%r12d
.L3507:
	jne	.L2372
.L3145:
	movl	108(%rsp), %r15d
	jmp	.L2372
.L2431:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L2430
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3653
.L2435:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L2445
	cmpq	$0, 96(%rax)
	je	.L2446
	testb	$8, 62(%rax)
	je	.L2445
.L2446:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2445
	movq	32(%r13), %rcx
	movq	32(%rcx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2445
	movq	32(%rbp), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L2445
.L2452:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2448
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2452
	jmp	.L2445
.L2448:
	testq	%rbx, %rbx
	jne	.L2430
	jmp	.L2445
.L3653:
	cmpq	$0, 96(%rax)
	je	.L2436
	testb	$8, 62(%rax)
	je	.L2435
.L2436:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2435
	movq	32(%rbp), %r8
	movq	32(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2435
	movq	32(%r13), %r9
	movq	24(%r9), %rbx
	testq	%rbx, %rbx
	je	.L2445
.L2442:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2448
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2442
	jmp	.L2445
.L3651:
	movq	32(%rbp), %rdi
	jmp	.L3506
.L3650:
	testq	%rbp, %rbp
	je	.L2425
	jmp	.L2445
.L3644:
	movq	%r12, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L2372
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L3145
	movq	%rax, %rbp
	movl	$1, %r13d
	xorl	%r15d, %r15d
.L2417:
	testq	%r12, %r12
	je	.L3654
	testq	%rbp, %rbp
	je	.L2406
	movq	32(%r12), %rdi
	testq	%rdi, %rdi
	je	.L3655
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L2392
.L3505:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L2406
.L2391:
	movq	(%r12), %r12
	movq	(%rbp), %rbp
	cmpl	%r13d, %r15d
	cmovg	%r15d, %r13d
	jmp	.L2417
.L2406:
	xorl	%r13d, %r13d
.L2386:
	movl	$2, %r15d
	decl	%r13d
	jmp	.L3507
.L2392:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L2391
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	je	.L3657
.L2396:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L2406
	cmpq	$0, 96(%rax)
	je	.L2407
	testb	$8, 62(%rax)
	je	.L2406
.L2407:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2406
	movq	32(%r12), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2406
	movq	32(%rbp), %r11
	movq	24(%r11), %rbx
	testq	%rbx, %rbx
	je	.L2406
.L2413:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2409
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2413
	jmp	.L2406
.L2409:
	testq	%rbx, %rbx
	jne	.L2391
	jmp	.L2406
.L3657:
	cmpq	$0, 96(%rax)
	je	.L2397
	testb	$8, 62(%rax)
	je	.L2396
.L2397:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2396
	movq	32(%rbp), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2396
	movq	32(%r12), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L2406
.L2403:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2409
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2403
	jmp	.L2406
.L3655:
	movq	32(%rbp), %rdi
	jmp	.L3505
.L3654:
	testq	%rbp, %rbp
	je	.L2386
	jmp	.L2406
.L2508:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmove	%eax, %r15d
	jmp	.L2372
.L2495:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	movl	$1, %r15d
	movq	24(%rbx), %r12
	movq	24(%rbp), %r13
	cmpq	%rsi, %rdi
	je	.L2496
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	je	.L2355
.L2496:
	testq	%r12, %r12
	je	.L2372
	testq	%r13, %r13
	je	.L2372
	cmpq	%r13, %r12
	je	.L2372
	movq	112(%r12), %rcx
	movq	112(%r13), %rsi
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L2499
	movq	104(%r12), %rbp
	cmpb	$25, 16(%rbp)
	je	.L3658
.L2500:
	movl	$1, %r8d
.L2499:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L2501
	movq	104(%r13), %r11
	cmpb	$25, 16(%r11)
	je	.L3659
.L2502:
	movl	$1, %ecx
.L2501:
	testb	%r8b, %r8b
	jne	.L2372
	testb	%cl, %cl
	jne	.L2372
	testb	%dil, %dil
	je	.L3281
	testb	%dl, %dl
.L3409:
	jne	.L2372
.L2507:
	xorl	%r15d, %r15d
	jmp	.L2372
.L3281:
	testb	%dl, %dl
	jne	.L2507
	movq	104(%r12), %rdi
	movq	104(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2507
	movq	112(%r12), %rdi
	movq	112(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L3409
.L3659:
	cmpb	$25, 16(%rsi)
	jne	.L2502
	jmp	.L2501
.L3658:
	cmpb	$25, 16(%rcx)
	jne	.L2500
	jmp	.L2499
	.p2align 6,,7
.L3410:
	movl	$1, %r15d
	jmp	.L2360
.L3643:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L2369
.L3642:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L2368
.L3640:
	movzbl	17(%rbp), %esi
	movzwl	60(%rbp), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L2364
.L3639:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L2363
.L3638:
	testb	$2, 62(%rcx)
	je	.L2362
	movq	24(%rcx), %r9
	testq	%r9, %r9
	cmovne	%r9, %rbp
	jmp	.L2362
.L3637:
	testb	$2, 62(%rbx)
	je	.L2361
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L2361
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L2361
.L3635:
	cmpq	%rax, %rdx
	je	.L2186
	movq	24(%rdx), %r11
	testq	%r11, %r11
	movq	%r11, 128(%rsp)
	je	.L2186
.L2351:
	movq	128(%rsp), %r15
	movq	%rax, %rbp
	movq	8(%r15), %rbx
	cmpq	%rax, %rbx
	je	.L2193
	testq	%rbx, %rbx
	je	.L2193
	testq	%rax, %rax
	je	.L2193
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L2193
	movzbl	16(%rax), %ecx
	testb	%cl, %cl
	jne	.L2192
.L2193:
	movl	$1, %r15d
.L2194:
	testl	%r15d, %r15d
	jne	.L3660
.L2189:
	movq	128(%rsp), %rdi
	movq	(%rdi), %rdx
	testq	%rdx, %rdx
	movq	%rdx, 128(%rsp)
	jne	.L2351
	jmp	.L2186
.L3660:
	movq	152(%rsp), %r15
	movq	%rax, 32(%r15)
	jmp	.L3509
.L2192:
	cmpb	$6, %dl
	je	.L3661
.L2195:
	cmpb	$6, %cl
	je	.L3662
.L2196:
	cmpb	$10, %dl
	je	.L3663
.L2197:
	cmpb	$10, 16(%rbp)
	je	.L3664
.L2198:
	cmpq	%rbp, %rbx
	movl	$1, %r15d
	je	.L3408
	movzbl	16(%rbx), %edi
	cmpb	16(%rbp), %dil
	je	.L2200
	xorl	%r15d, %r15d
.L3407:
	movq	144(%rsp), %r12
	movq	32(%r12), %rax
	jmp	.L2194
.L2200:
	movzbl	17(%rbx), %ecx
	movzbl	62(%rbx), %esi
	movl	%ecx, %edx
	shrb	$5, %sil
	shrb	$3, %cl
	shrb	$4, %dl
	andl	$1, %ecx
	andl	$1, %esi
	addl	%ecx, %ecx
	andl	$1, %edx
	sall	$2, %esi
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	orl	%esi, %edx
	cmpb	$20, %dil
	je	.L3665
.L2202:
	movzbl	17(%rbp), %r10d
	movzbl	62(%rbp), %r9d
	leal	0(,%rcx,8), %esi
	orl	%edx, %esi
	xorl	%ecx, %ecx
	movl	%r10d, %edx
	shrb	$5, %r9b
	shrb	$3, %r10b
	shrb	$4, %dl
	andl	$1, %r10d
	andl	$1, %r9d
	andl	$1, %edx
	addl	%r10d, %r10d
	sall	$2, %r9d
	orl	%r10d, %edx
	orl	%r9d, %edx
	cmpb	$20, %dil
	je	.L3666
.L2203:
	leal	0(,%rcx,8), %edi
	orl	%edi, %edx
	cmpl	%edx, %esi
	je	.L2201
	xorl	%r15d, %r15d
.L3332:
	movq	144(%rsp), %r13
	movq	32(%r13), %rax
	jmp	.L2194
.L2201:
	movq	128(%rbp), %rdx
	cmpq	%rdx, 128(%rbx)
	je	.L3667
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	*targetm+264(%rip)
	testl	%eax, %eax
	movl	%eax, 444(%rsp)
	jne	.L2205
	xorl	%r15d, %r15d
.L3408:
	movq	144(%rsp), %r13
	movq	32(%r13), %rax
	jmp	.L2194
.L2205:
	movzbl	16(%rbx), %eax
	xorl	%r15d, %r15d
	cmpl	$18, %eax
	je	.L2329
	cmpl	$18, %eax
	ja	.L2346
	cmpl	$13, %eax
	je	.L2207
.L2206:
	cmpl	$2, 444(%rsp)
	jne	.L3332
	cmpl	$1, %r15d
	je	.L3668
	movq	144(%rsp), %rsi
	movq	32(%rsi), %rax
	jmp	.L2194
.L3668:
	movl	$2, %r15d
	jmp	.L3407
.L2207:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L2208
	call	comptypes
	movl	%eax, %r15d
	jmp	.L2206
.L2208:
	movl	$1, %r15d
	jmp	.L2206
.L2346:
	cmpl	$20, %eax
	je	.L2342
	cmpl	$23, %eax
	jne	.L2206
	movl	$1, 124(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L2211
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 124(%rsp)
	je	.L2206
.L2211:
	movq	24(%rbx), %r13
	movq	24(%rbp), %r12
	testq	%r13, %r13
	je	.L3669
	testq	%r12, %r12
	je	.L3670
	movl	$1, %r15d
	xorl	%ebp, %ebp
.L2326:
	testq	%r13, %r13
	je	.L3671
	testq	%r12, %r12
	je	.L2315
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3672
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L2301
.L3504:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L2315
.L2300:
	movq	(%r13), %r13
	movq	(%r12), %r12
	cmpl	%r15d, %ebp
	cmovg	%ebp, %r15d
	jmp	.L2326
.L2315:
	xorl	%r15d, %r15d
.L2295:
	cmpl	$1, %r15d
	cmove	124(%rsp), %r15d
	jmp	.L2206
.L2301:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %ebp
	jne	.L2300
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3674
.L2305:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L2315
	cmpq	$0, 96(%rax)
	je	.L2316
	testb	$8, 62(%rax)
	je	.L2315
.L2316:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2315
	movq	32(%r13), %r8
	movq	32(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2315
	movq	32(%r12), %rcx
	movq	24(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L2315
.L2322:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2318
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2322
	jmp	.L2315
.L2318:
	testq	%rbx, %rbx
	jne	.L2300
	jmp	.L2315
.L3674:
	cmpq	$0, 96(%rax)
	je	.L2306
	testb	$8, 62(%rax)
	je	.L2305
.L2306:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2305
	movq	32(%r12), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2305
	movq	32(%r13), %r11
	movq	24(%r11), %rbx
	testq	%rbx, %rbx
	je	.L2315
.L2312:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2318
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2312
	jmp	.L2315
.L3672:
	movq	32(%r12), %rdi
	jmp	.L3504
.L3671:
	testq	%r12, %r12
	je	.L2295
	jmp	.L2315
.L3670:
	movq	%r13, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L2206
	movq	136(%rbp), %rax
	testq	%rax, %rax
	je	.L3141
	movq	%rax, %rbp
	movl	$1, %r12d
	xorl	%r15d, %r15d
.L2290:
	testq	%r13, %r13
	je	.L3675
	testq	%rbp, %rbp
	je	.L2279
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3676
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L2265
.L3502:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L2279
.L2264:
	movq	(%r13), %r13
	movq	(%rbp), %rbp
	cmpl	%r12d, %r15d
	cmovg	%r15d, %r12d
	jmp	.L2290
.L2279:
	xorl	%r12d, %r12d
.L2259:
	movl	$2, %r15d
	decl	%r12d
.L3503:
	jne	.L2206
.L3141:
	movl	124(%rsp), %r15d
	jmp	.L2206
.L2265:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L2264
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3678
.L2269:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L2279
	cmpq	$0, 96(%rax)
	je	.L2280
	testb	$8, 62(%rax)
	je	.L2279
.L2280:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2279
	movq	32(%r13), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2279
	movq	32(%rbp), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L2279
.L2286:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2282
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2286
	jmp	.L2279
.L2282:
	testq	%rbx, %rbx
	jne	.L2264
	jmp	.L2279
.L3678:
	cmpq	$0, 96(%rax)
	je	.L2270
	testb	$8, 62(%rax)
	je	.L2269
.L2270:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2269
	movq	32(%rbp), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2269
	movq	32(%r13), %r10
	movq	24(%r10), %rbx
	testq	%rbx, %rbx
	je	.L2279
.L2276:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2282
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2276
	jmp	.L2279
.L3676:
	movq	32(%rbp), %rdi
	jmp	.L3502
.L3675:
	testq	%rbp, %rbp
	je	.L2259
	jmp	.L2279
.L3669:
	movq	%r12, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L2206
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L3141
	movq	%rax, %rbp
	movl	$1, %r13d
	xorl	%r15d, %r15d
.L2251:
	testq	%r12, %r12
	je	.L3679
	testq	%rbp, %rbp
	je	.L2240
	movq	32(%r12), %rdi
	testq	%rdi, %rdi
	je	.L3680
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L2226
.L3501:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L2240
.L2225:
	movq	(%r12), %r12
	movq	(%rbp), %rbp
	cmpl	%r13d, %r15d
	cmovg	%r15d, %r13d
	jmp	.L2251
.L2240:
	xorl	%r13d, %r13d
.L2220:
	movl	$2, %r15d
	decl	%r13d
	jmp	.L3503
.L2226:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L2225
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	je	.L3682
.L2230:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L2240
	cmpq	$0, 96(%rax)
	je	.L2241
	testb	$8, 62(%rax)
	je	.L2240
.L2241:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2240
	movq	32(%r12), %rcx
	movq	32(%rcx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2240
	movq	32(%rbp), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L2240
.L2247:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2243
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2247
	jmp	.L2240
.L2243:
	testq	%rbx, %rbx
	jne	.L2225
	jmp	.L2240
.L3682:
	cmpq	$0, 96(%rax)
	je	.L2231
	testb	$8, 62(%rax)
	je	.L2230
.L2231:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2230
	movq	32(%rbp), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2230
	movq	32(%r12), %r8
	movq	24(%r8), %rbx
	testq	%rbx, %rbx
	je	.L2240
.L2237:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2243
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2237
	jmp	.L2240
.L3680:
	movq	32(%rbp), %rdi
	jmp	.L3501
.L3679:
	testq	%rbp, %rbp
	je	.L2220
	jmp	.L2240
.L2342:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmove	%eax, %r15d
	jmp	.L2206
.L2329:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	movl	$1, %r15d
	movq	24(%rbx), %r12
	movq	24(%rbp), %r13
	cmpq	%rsi, %rdi
	je	.L2330
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	je	.L3331
.L2330:
	testq	%r12, %r12
	je	.L2206
	testq	%r13, %r13
	je	.L2206
	cmpq	%r13, %r12
	je	.L2206
	movq	112(%r12), %rcx
	movq	112(%r13), %rsi
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L2333
	movq	104(%r12), %rbp
	cmpb	$25, 16(%rbp)
	je	.L3683
.L2334:
	movl	$1, %r8d
.L2333:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L2335
	movq	104(%r13), %r9
	cmpb	$25, 16(%r9)
	je	.L3684
.L2336:
	movl	$1, %ecx
.L2335:
	testb	%r8b, %r8b
	jne	.L2206
	testb	%cl, %cl
	jne	.L2206
	testb	%dil, %dil
	je	.L3271
	testb	%dl, %dl
.L3406:
	jne	.L2206
.L2341:
	xorl	%r15d, %r15d
	jmp	.L2206
.L3271:
	testb	%dl, %dl
	jne	.L2341
	movq	104(%r12), %rdi
	movq	104(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2341
	movq	112(%r12), %rdi
	movq	112(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L3406
.L3684:
	cmpb	$25, 16(%rsi)
	jne	.L2336
	jmp	.L2335
.L3683:
	cmpb	$25, 16(%rcx)
	jne	.L2334
	jmp	.L2333
.L3331:
	movq	144(%rsp), %r10
	movq	32(%r10), %rax
	jmp	.L2189
.L3667:
	movq	144(%rsp), %rbx
	movl	$1, %r15d
	movq	32(%rbx), %rax
	jmp	.L2194
.L3666:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L2203
.L3665:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L2202
.L3664:
	movzbl	17(%rbp), %esi
	movzwl	60(%rbp), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L2198
.L3663:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L2197
.L3662:
	testb	$2, 62(%rax)
	je	.L2196
	movq	24(%rax), %r8
	testq	%r8, %r8
	cmovne	%r8, %rbp
	jmp	.L2196
.L3661:
	testb	$2, 62(%rbx)
	je	.L2195
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L2195
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L2195
.L3634:
	movq	168(%rsp), %rax
	movq	448(%rsp), %rdi
	movq	24(%rax), %rsi
	jmp	.L3500
.L3633:
	cmpq	$0, 136(%rsp)
	jne	.L2172
	jmp	.L3416
.L3632:
	testq	%r8, %r8
	movq	%rdx, %rdi
	jne	.L2170
	jmp	.L3412
	.p2align 6,,7
.L3307:
	movq	96(%rsp), %rdi
.L2131:
	cmpl	$8, %ebp
	movq	168(%rsp), %rsi
	je	.L3685
.L2133:
	call	common_type
	cmpl	$8, %ebx
	movq	%rax, %rdi
	je	.L3686
.L2134:
	cmpl	$8, %ebp
	je	.L3687
.L2136:
	call	build_complex_type
	jmp	.L3421
.L3687:
	movq	168(%rsp), %rbx
	cmpq	%rdi, 8(%rbx)
	jne	.L2136
	jmp	.L3413
	.p2align 6,,7
.L3686:
	movq	96(%rsp), %rcx
	cmpq	%rax, 8(%rcx)
	jne	.L2134
	jmp	.L3416
	.p2align 6,,7
.L3685:
	movq	8(%rsi), %rsi
	jmp	.L2133
.L3260:
	movq	96(%rsp), %r10
	movq	8(%r10), %rdi
	jmp	.L2131
.L3544:
	movzwl	60(%rbx), %edi
	movl	$1, %esi
	andl	$511, %edi
	call	type_for_size
	movq	%rax, 168(%rsp)
	movzbl	16(%rax), %eax
	jmp	.L2127
.L3543:
	movzwl	60(%rcx), %edi
	movl	$1, %esi
	andl	$511, %edi
	call	type_for_size
	movq	%rax, 96(%rsp)
	jmp	.L2126
.L3542:
	movq	168(%rsp), %rdi
	movq	%rdi, 96(%rsp)
	jmp	.L2123
.L3541:
	cmpl	$6, 588(%rsp)
	jne	.L2114
	movq	8(%rsp), %rdx
	movl	$59, %edi
	movq	%r14, %rsi
.L3440:
	call	pointer_int_sum
	jmp	.L1
	.p2align 6,,7
.L3540:
	cmpl	$6, 584(%rsp)
	jne	.L138
	movl	$59, %edi
.L3444:
	movq	8(%rsp), %rsi
	movq	%r14, %rdx
	jmp	.L3440
	.p2align 6,,7
.L142:
	cmpl	$13, 588(%rsp)
	jne	.L2114
	cmpl	$13, 584(%rsp)
	je	.L3688
.L143:
	cmpl	$13, 588(%rsp)
	jne	.L2114
	cmpl	$6, 584(%rsp)
	jne	.L2114
	movl	$60, %edi
	jmp	.L3444
.L3688:
	movq	96(%rsp), %rdi
	movq	168(%rsp), %rsi
	movl	$1, %edx
	call	maybe_objc_comptypes
	testl	%eax, %eax
	js	.L3689
.L145:
	testl	%eax, %eax
	je	.L143
	movq	8(%rsp), %rdi
	movq	%r14, %rsi
	call	pointer_diff
	jmp	.L1
.L3689:
	movq	168(%rsp), %rbp
	movq	96(%rsp), %r13
	movq	8(%rbp), %r11
	movq	8(%r13), %rcx
	movq	128(%r11), %rbp
	movq	128(%rcx), %rbx
	cmpq	%rbp, %rbx
	je	.L3351
	testq	%rbx, %rbx
	je	.L3351
	testq	%rbp, %rbp
	je	.L3351
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L3351
	movzbl	16(%rbp), %eax
	testb	%al, %al
	je	.L3351
	cmpb	$6, %dl
	je	.L3690
.L149:
	cmpb	$6, %al
	je	.L3691
.L150:
	cmpb	$10, %dl
	je	.L3692
.L151:
	cmpb	$10, 16(%rbp)
	je	.L3693
.L152:
	cmpq	%rbp, %rbx
	movl	$1, 400(%rsp)
	je	.L148
	movzbl	16(%rbx), %esi
	cmpb	16(%rbp), %sil
	je	.L154
	movl	$0, 400(%rsp)
.L148:
	cmpl	$2, 400(%rsp)
	je	.L3694
.L304:
	movl	400(%rsp), %eax
	jmp	.L145
.L3694:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	je	.L304
	movl	$.LC1, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L304
.L154:
	movzbl	17(%rbx), %r9d
	movzbl	62(%rbx), %edi
	xorl	%ecx, %ecx
	movl	%r9d, %edx
	shrb	$5, %dil
	shrb	$3, %r9b
	shrb	$4, %dl
	andl	$1, %r9d
	andl	$1, %edi
	andl	$1, %edx
	addl	%r9d, %r9d
	sall	$2, %edi
	orl	%r9d, %edx
	orl	%edi, %edx
	cmpb	$20, %sil
	je	.L3695
.L156:
	movzbl	17(%rbp), %r8d
	movzbl	62(%rbp), %r10d
	leal	0(,%rcx,8), %edi
	orl	%edx, %edi
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	shrb	$5, %r10b
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	$1, %r8d
	andl	$1, %r10d
	andl	$1, %edx
	addl	%r8d, %r8d
	sall	$2, %r10d
	orl	%r8d, %edx
	orl	%r10d, %edx
	cmpb	$20, %sil
	je	.L3696
.L157:
	leal	0(,%rcx,8), %esi
	movl	$0, 400(%rsp)
	orl	%esi, %edx
	cmpl	%edx, %edi
	jne	.L148
	movq	128(%rbp), %rdx
	cmpq	%rdx, 128(%rbx)
	je	.L3351
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	*targetm+264(%rip)
	movl	$0, 400(%rsp)
	testl	%eax, %eax
	movl	%eax, 580(%rsp)
	je	.L148
	movl	$0, 400(%rsp)
	movzbl	16(%rbx), %eax
	cmpl	$18, %eax
	je	.L283
	cmpl	$18, %eax
	ja	.L300
	cmpl	$13, %eax
	je	.L161
.L160:
	cmpl	$2, 580(%rsp)
	jne	.L148
	cmpl	$1, 400(%rsp)
	movl	580(%rsp), %eax
	cmovne	400(%rsp), %eax
	movl	%eax, 400(%rsp)
	jmp	.L148
.L161:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L162
	call	comptypes
.L3350:
	movl	%eax, 400(%rsp)
	jmp	.L160
.L162:
	movl	$1, 400(%rsp)
	jmp	.L160
.L300:
	cmpl	$20, %eax
	je	.L296
	cmpl	$23, %eax
	jne	.L160
	movl	$1, 412(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L165
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 412(%rsp)
	je	.L160
.L165:
	movq	24(%rbx), %r13
	movq	24(%rbp), %r12
	testq	%r13, %r13
	je	.L3697
	testq	%r12, %r12
	je	.L3698
	movl	$1, 400(%rsp)
	xorl	%ebp, %ebp
.L280:
	testq	%r13, %r13
	je	.L3699
	testq	%r12, %r12
	je	.L269
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3700
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L255
.L3443:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L269
.L254:
	cmpl	400(%rsp), %ebp
	movl	400(%rsp), %edi
	cmovg	%ebp, %edi
	movl	%edi, 400(%rsp)
	movq	(%r12), %r12
	movq	(%r13), %r13
	jmp	.L280
.L269:
	movl	$0, 400(%rsp)
.L249:
	cmpl	$1, 400(%rsp)
	movl	400(%rsp), %r12d
	cmove	412(%rsp), %r12d
	movl	%r12d, 400(%rsp)
	jmp	.L160
.L255:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %ebp
	jne	.L254
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3702
.L259:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L269
	cmpq	$0, 96(%rax)
	je	.L270
	testb	$8, 62(%rax)
	je	.L269
.L270:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L269
	movq	32(%r13), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L269
	movq	32(%r12), %rcx
	movq	24(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L269
.L276:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L272
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L276
	jmp	.L269
.L272:
	testq	%rbx, %rbx
	jne	.L254
	jmp	.L269
.L3702:
	cmpq	$0, 96(%rax)
	je	.L260
	testb	$8, 62(%rax)
	je	.L259
.L260:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L259
	movq	32(%r12), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L259
	movq	32(%r13), %r11
	movq	24(%r11), %rbx
	testq	%rbx, %rbx
	je	.L269
.L266:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L272
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L266
	jmp	.L269
.L3700:
	movq	32(%r12), %rdi
	jmp	.L3443
.L3699:
	testq	%r12, %r12
	je	.L249
	jmp	.L269
.L3698:
	movq	%r13, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L160
	movq	136(%rbp), %rax
	testq	%rax, %rax
	je	.L3100
	movq	%rax, %rbp
	movl	$1, %r12d
	movl	$0, 404(%rsp)
.L244:
	testq	%r13, %r13
	je	.L3703
	testq	%rbp, %rbp
	je	.L233
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3704
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L219
.L3442:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L233
.L218:
	cmpl	%r12d, 404(%rsp)
	movq	(%r13), %r13
	cmovg	404(%rsp), %r12d
	movq	(%rbp), %rbp
	jmp	.L244
.L233:
	xorl	%r12d, %r12d
.L213:
	decl	%r12d
	movl	$2, 400(%rsp)
	jne	.L160
	movl	412(%rsp), %r13d
	movl	%r13d, 400(%rsp)
	jmp	.L160
.L219:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 404(%rsp)
	jne	.L218
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3706
.L223:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L233
	cmpq	$0, 96(%rax)
	je	.L234
	testb	$8, 62(%rax)
	je	.L233
.L234:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L233
	movq	32(%r13), %r8
	movq	32(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L233
	movq	32(%rbp), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L233
.L240:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L236
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L240
	jmp	.L233
.L236:
	testq	%rbx, %rbx
	jne	.L218
	jmp	.L233
.L3706:
	cmpq	$0, 96(%rax)
	je	.L224
	testb	$8, 62(%rax)
	je	.L223
.L224:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L223
	movq	32(%rbp), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L223
	movq	32(%r13), %r10
	movq	24(%r10), %rbx
	testq	%rbx, %rbx
	je	.L233
.L230:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L236
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L230
	jmp	.L233
.L3704:
	movq	32(%rbp), %rdi
	jmp	.L3442
.L3703:
	testq	%rbp, %rbp
	je	.L213
	jmp	.L233
.L3100:
	movl	412(%rsp), %ebp
	movl	%ebp, 400(%rsp)
	jmp	.L160
.L3697:
	movq	%r12, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L160
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L3098
	movq	%rax, %rbp
	movl	$1, %r13d
	movl	$0, 408(%rsp)
.L205:
	testq	%r12, %r12
	je	.L3707
	testq	%rbp, %rbp
	je	.L194
	movq	32(%r12), %rdi
	testq	%rdi, %rdi
	je	.L3708
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L180
.L3441:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L194
.L179:
	cmpl	%r13d, 408(%rsp)
	movq	(%r12), %r12
	cmovg	408(%rsp), %r13d
	movq	(%rbp), %rbp
	jmp	.L205
.L194:
	xorl	%r13d, %r13d
.L174:
	decl	%r13d
	movl	$2, 400(%rsp)
	jne	.L160
	movl	412(%rsp), %eax
	jmp	.L3350
.L180:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 408(%rsp)
	jne	.L179
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	je	.L3710
.L184:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L194
	cmpq	$0, 96(%rax)
	je	.L195
	testb	$8, 62(%rax)
	je	.L194
.L195:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L194
	movq	32(%r12), %rcx
	movq	32(%rcx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L194
	movq	32(%rbp), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L194
.L201:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L197
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L201
	jmp	.L194
.L197:
	testq	%rbx, %rbx
	jne	.L179
	jmp	.L194
.L3710:
	cmpq	$0, 96(%rax)
	je	.L185
	testb	$8, 62(%rax)
	je	.L184
.L185:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L184
	movq	32(%rbp), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L184
	movq	32(%r12), %r11
	movq	24(%r11), %rbx
	testq	%rbx, %rbx
	je	.L194
.L191:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L197
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L191
	jmp	.L194
.L3708:
	movq	32(%rbp), %rdi
	jmp	.L3441
.L3707:
	testq	%rbp, %rbp
	je	.L174
	jmp	.L194
.L3098:
	movl	412(%rsp), %eax
	movl	%eax, 400(%rsp)
	jmp	.L160
.L296:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmovne	400(%rsp), %eax
	jmp	.L3350
.L283:
	movq	24(%rbx), %r12
	movq	24(%rbp), %r13
	movl	$1, 400(%rsp)
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L284
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 400(%rsp)
	je	.L148
.L284:
	testq	%r12, %r12
	je	.L160
	testq	%r13, %r13
	je	.L160
	cmpq	%r13, %r12
	je	.L160
	movq	112(%r12), %rcx
	movq	112(%r13), %rsi
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L287
	movq	104(%r12), %r9
	cmpb	$25, 16(%r9)
	je	.L3711
.L288:
	movl	$1, %r8d
.L287:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L289
	movq	104(%r13), %r10
	cmpb	$25, 16(%r10)
	je	.L3712
.L290:
	movl	$1, %ecx
.L289:
	testb	%r8b, %r8b
	jne	.L160
	testb	%cl, %cl
	jne	.L160
	testb	%dil, %dil
	je	.L3163
	testb	%dl, %dl
.L3349:
	jne	.L160
.L295:
	movl	$0, 400(%rsp)
	jmp	.L160
.L3163:
	testb	%dl, %dl
	jne	.L295
	movq	104(%r12), %rdi
	movq	104(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L295
	movq	112(%r12), %rdi
	movq	112(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L3349
.L3712:
	cmpb	$25, 16(%rsi)
	jne	.L290
	jmp	.L289
.L3711:
	cmpb	$25, 16(%rcx)
	jne	.L288
	jmp	.L287
.L3351:
	movl	$1, 400(%rsp)
	jmp	.L148
.L3696:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L157
.L3695:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L156
.L3693:
	movzbl	17(%rbp), %esi
	movzwl	60(%rbp), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L152
.L3692:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L151
.L3691:
	testb	$2, 62(%rbp)
	je	.L150
	movq	24(%rbp), %r12
	testq	%r12, %r12
	cmovne	%r12, %rbp
	jmp	.L150
.L3690:
	testb	$2, 62(%rbx)
	je	.L149
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L149
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L149
	.p2align 6,,7
.L327:
	movl	warn_div_by_zero(%rip), %eax
	testl	%eax, %eax
	je	.L328
	movl	skip_evaluation(%rip), %eax
	testl	%eax, %eax
	je	.L3713
.L328:
	cmpl	$6, 588(%rsp)
	jne	.L136
	cmpl	$6, 584(%rsp)
	jne	.L136
	movq	600(%rsp), %rsi
	movl	$0, 180(%rsp)
	movq	8(%rsi), %rax
.L3525:
	testb	$32, 17(%rax)
	jne	.L331
	cmpb	$25, 16(%r14)
	jne	.L2114
	movq	%r14, %rdi
	call	integer_all_onesp
	testl	%eax, %eax
	jne	.L2114
.L331:
	movl	$1, 180(%rsp)
	jmp	.L2114
	.p2align 6,,7
.L3713:
	movq	%r14, %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L328
	movl	$.LC2, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L328
	.p2align 6,,7
.L313:
	movl	warn_div_by_zero(%rip), %eax
	testl	%eax, %eax
	je	.L314
	movl	skip_evaluation(%rip), %eax
	testl	%eax, %eax
	je	.L3714
.L314:
	movl	588(%rsp), %eax
	subl	$6, %eax
	cmpl	$2, %eax
	ja	.L136
	movl	584(%rsp), %eax
	subl	$6, %eax
	cmpl	$2, %eax
	ja	.L136
	cmpl	$6, 588(%rsp)
	je	.L3715
.L317:
	movl	$70, 16(%rsp)
	jmp	.L2114
.L3715:
	cmpl	$6, 584(%rsp)
	jne	.L317
	movq	600(%rsp), %r8
	movl	$0, 180(%rsp)
	movq	8(%r8), %rax
	jmp	.L3525
	.p2align 6,,7
.L3714:
	movq	%r14, %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L314
	movl	$.LC2, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L314
	.p2align 6,,7
.L955:
	movl	588(%rsp), %eax
	subl	$6, %eax
	cmpl	$1, %eax
	ja	.L956
	movl	584(%rsp), %eax
	subl	$6, %eax
	cmpl	$1, %eax
	ja	.L956
	movl	$1, 180(%rsp)
	jmp	.L136
.L956:
	cmpl	$13, 588(%rsp)
	jne	.L136
	cmpl	$13, 584(%rsp)
	jne	.L136
	movq	96(%rsp), %rdi
	movq	168(%rsp), %rsi
	movl	$1, %edx
	call	maybe_objc_comptypes
	testl	%eax, %eax
	js	.L3716
.L961:
	testl	%eax, %eax
	je	.L1529
	movq	96(%rsp), %r15
	movq	168(%rsp), %rbx
	cmpq	%rbx, %r15
	je	.L1122
	movq	global_trees(%rip), %rax
	cmpq	%rax, %r15
	je	.L3717
	cmpq	%rax, 168(%rsp)
	je	.L1122
	movq	%r15, %rdi
	movq	168(%rsp), %rsi
	call	*targetm+248(%rip)
	movq	%rax, 512(%rsp)
	cmpb	$10, 16(%r15)
	je	.L3718
.L1125:
	movq	168(%rsp), %rsi
	cmpb	$10, 16(%rsi)
	je	.L3719
.L1126:
	movzbl	16(%r15), %ebp
	movzbl	16(%rbx), %r12d
	cmpl	$8, %ebp
	je	.L3206
	cmpl	$8, %r12d
	je	.L3305
	leal	-6(%rbp), %eax
	cmpl	$17, %eax
	ja	.L1518
	mov	%eax, %edi
	jmp	*.L1519(,%rdi,8)
	.section	.rodata
	.align 8
	.align 4
.L1519:
	.quad	.L1139
	.quad	.L1139
	.quad	.L1518
	.quad	.L1518
	.quad	.L1518
	.quad	.L1518
	.quad	.L1518
	.quad	.L1156
	.quad	.L1518
	.quad	.L1518
	.quad	.L1518
	.quad	.L1518
	.quad	.L1161
	.quad	.L1518
	.quad	.L1518
	.quad	.L1518
	.quad	.L1518
	.quad	.L1168
	.text
.L1139:
	cmpl	$7, %ebp
	je	.L3721
	cmpl	$7, %r12d
	je	.L3207
.L1141:
	movzwl	60(%r15), %edx
	movzwl	60(%rbx), %eax
	andl	$511, %edx
	andl	$511, %eax
	cmpl	%eax, %edx
	jg	.L1518
	cmpl	%edx, %eax
	jg	.L3383
	movq	128(%r15), %rdx
	movq	integer_types+64(%rip), %rcx
	cmpq	%rcx, %rdx
	je	.L1150
	movq	128(%rbx), %rax
	cmpq	%rcx, %rax
	je	.L1150
	movq	integer_types+56(%rip), %rdi
	cmpq	%rdi, %rdx
	je	.L1148
	cmpq	%rdi, %rax
	je	.L1148
	movq	global_trees+208(%rip), %rdi
	cmpq	%rdi, %rdx
	je	.L3377
	cmpq	%rdi, %rax
	je	.L3377
	testb	$32, 17(%r15)
	jne	.L1518
.L3383:
	movq	%rbx, %rdi
.L3377:
	movq	512(%rsp), %rsi
	call	build_type_attribute_variant
	movq	%rax, %r15
.L1122:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	je	.L136
	movq	96(%rsp), %rax
	movq	8(%rax), %rdi
	cmpb	$23, 16(%rdi)
.L3523:
	jne	.L136
	movl	$.LC14, %edi
.L3404:
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L136
.L1518:
	movq	%r15, %rdi
	jmp	.L3377
.L1148:
	testb	$32, 17(%r15)
	jne	.L1150
	testb	$32, 17(%rbx)
	je	.L3377
.L1150:
	movq	%rcx, %rdi
	jmp	.L3377
.L3207:
	cmpl	$7, %ebp
	jne	.L3383
	jmp	.L1141
.L3721:
	cmpl	$7, %r12d
	je	.L3207
	jmp	.L1518
.L1156:
	movq	8(%r15), %rbp
	movq	8(%rbx), %rbx
	movq	128(%rbp), %rdi
	movq	128(%rbx), %rsi
	call	common_type
	xorl	%ecx, %ecx
	movzbl	62(%rbp), %r15d
	movzbl	17(%rbp), %r12d
	movq	%rax, %rdi
	shrb	$5, %r15b
	movl	%r12d, %edx
	andl	$1, %r15d
	shrb	$3, %r12b
	shrb	$4, %dl
	andl	$1, %r12d
	sall	$2, %r15d
	andl	$1, %edx
	addl	%r12d, %r12d
	orl	%r12d, %edx
	orl	%r15d, %edx
	cmpb	$20, 16(%rbp)
	je	.L3722
.L1159:
	movzbl	17(%rbx), %r8d
	movzbl	62(%rbx), %r10d
	leal	0(,%rcx,8), %esi
	orl	%edx, %esi
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	shrb	$5, %r10b
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	$1, %r8d
	andl	$1, %r10d
	andl	$1, %edx
	addl	%r8d, %r8d
	sall	$2, %r10d
	orl	%r8d, %edx
	orl	%r10d, %edx
	cmpb	$20, 16(%rbx)
	je	.L3723
.L1160:
	leal	0(,%rcx,8), %r11d
	orl	%r11d, %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movq	%rax, %rdi
	call	build_pointer_type
.L3385:
	movq	%rax, %rdi
	jmp	.L3377
.L3723:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L1160
.L3722:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L1159
.L1161:
	movq	8(%r15), %rdi
	movq	8(%rbx), %rsi
	call	common_type
	cmpq	8(%r15), %rax
	movq	%rax, %rdi
	je	.L3724
.L1162:
	cmpq	8(%rbx), %rdi
	je	.L3725
.L1163:
	cmpq	$0, 24(%r15)
	cmove	%rbx, %r15
	movq	24(%r15), %rsi
	call	build_array_type
	jmp	.L3385
.L3725:
	cmpq	$0, 24(%rbx)
	je	.L1163
	jmp	.L3383
.L3724:
	cmpq	$0, 24(%r15)
	je	.L1162
	jmp	.L1518
.L1168:
	movq	8(%rbx), %rsi
	movq	8(%r15), %rdi
	call	common_type
	movq	%rax, 504(%rsp)
	movq	504(%rsp), %rsi
	movq	24(%r15), %rax
	movq	%rax, 288(%rsp)
	movq	24(%rbx), %rax
	movq	%rax, 296(%rsp)
	cmpq	8(%r15), %rsi
	je	.L3726
.L1169:
	movq	504(%rsp), %r9
	cmpq	8(%rbx), %r9
	je	.L3727
	cmpq	$0, 288(%rsp)
	je	.L3728
.L1171:
	cmpq	$0, 296(%rsp)
	jne	.L1172
	movq	504(%rsp), %rdi
	movq	288(%rsp), %rsi
.L3473:
	call	build_function_type
	jmp	.L3385
.L1172:
	xorl	%edi, %edi
	call	pushlevel
	movl	$1, %edi
	call	declare_parm_level
	movq	288(%rsp), %rdi
	call	list_length
	movq	$0, 312(%rsp)
	testl	%eax, %eax
	jle	.L3021
	movl	%eax, %ebx
.L1177:
	movq	312(%rsp), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	call	tree_cons
	decl	%ebx
	movq	%rax, 312(%rsp)
	jne	.L1177
.L3021:
	cmpq	$0, 288(%rsp)
	movq	312(%rsp), %rcx
	movq	%rcx, 304(%rsp)
	je	.L3023
.L1517:
	movq	288(%rsp), %rbp
	movq	32(%rbp), %rdx
	testq	%rdx, %rdx
	jne	.L1182
	movq	296(%rsp), %rdx
	movq	32(%rdx), %rax
.L3376:
	movq	304(%rsp), %r11
	movq	%rax, 32(%r11)
.L1183:
.L1180:
	movq	288(%rsp), %rbx
	movq	296(%rsp), %r12
	movq	304(%rsp), %rbp
	movq	(%rbx), %r9
	movq	%r9, 288(%rsp)
	testq	%r9, %r9
	movq	(%r12), %rsi
	movq	%rsi, 296(%rsp)
	movq	(%rbp), %rdx
	movq	%rdx, 304(%rsp)
	jne	.L1517
.L3023:
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	call	poplevel
	movq	312(%rsp), %rsi
	movq	504(%rsp), %rdi
	call	build_function_type
	movq	%rax, %r15
	jmp	.L1518
.L1182:
	movq	296(%rsp), %rbx
	movq	32(%rbx), %rax
	testq	%rax, %rax
	jne	.L1184
	movq	304(%rsp), %r13
	movq	%rdx, 32(%r13)
	jmp	.L1180
.L1184:
	cmpb	$21, 16(%rdx)
	je	.L3729
.L1185:
	cmpb	$21, 16(%rax)
	je	.L3730
.L1351:
	movq	288(%rsp), %r8
	movq	296(%rsp), %rcx
	movq	32(%r8), %rdi
	movq	32(%rcx), %rsi
	call	common_type
	jmp	.L3376
.L3730:
	movq	288(%rsp), %rdx
	movq	32(%rdx), %rcx
	cmpq	%rcx, %rax
	je	.L1351
	movq	24(%rax), %rbx
	testq	%rbx, %rbx
	movq	%rbx, 264(%rsp)
	je	.L1351
.L1516:
	movq	264(%rsp), %rdi
	movq	%rcx, %rbp
	movq	8(%rdi), %rbx
	cmpq	%rcx, %rbx
	je	.L3374
	testq	%rbx, %rbx
	je	.L3374
	testq	%rcx, %rcx
	je	.L3374
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L3374
	movzbl	16(%rcx), %eax
	testb	%al, %al
	je	.L3374
	cmpb	$6, %dl
	je	.L3731
.L1360:
	cmpb	$6, %al
	je	.L3732
.L1361:
	cmpb	$10, %dl
	je	.L3733
.L1362:
	cmpb	$10, 16(%rbp)
	je	.L3734
.L1363:
	cmpq	%rbp, %rbx
	movl	$1, %r15d
	je	.L1359
	movzbl	16(%rbx), %esi
	cmpb	16(%rbp), %sil
	je	.L1365
	xorl	%r15d, %r15d
.L1359:
	testl	%r15d, %r15d
	jne	.L3735
.L1354:
	movq	264(%rsp), %r10
	movq	(%r10), %rdi
	testq	%rdi, %rdi
	movq	%rdi, 264(%rsp)
	je	.L1351
	movq	288(%rsp), %rax
	movq	32(%rax), %rcx
	jmp	.L1516
.L3735:
	movq	288(%rsp), %rax
	movq	304(%rsp), %r12
	movq	32(%rax), %r13
	movq	%r13, 32(%r12)
.L3482:
	movl	pedantic(%rip), %r15d
	testl	%r15d, %r15d
	je	.L1180
	movl	$.LC10, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L1180
.L1365:
	movzbl	17(%rbx), %r12d
	movzbl	62(%rbx), %ecx
	movl	%r12d, %edx
	shrb	$5, %cl
	shrb	$3, %r12b
	shrb	$4, %dl
	andl	$1, %r12d
	andl	$1, %ecx
	andl	$1, %edx
	addl	%r12d, %r12d
	sall	$2, %ecx
	orl	%r12d, %edx
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	cmpb	$20, %sil
	je	.L3736
.L1367:
	movzbl	17(%rbp), %r8d
	movzbl	62(%rbp), %r13d
	leal	0(,%rcx,8), %edi
	orl	%edx, %edi
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	shrb	$5, %r13b
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	$1, %r8d
	andl	$1, %r13d
	andl	$1, %edx
	addl	%r8d, %r8d
	sall	$2, %r13d
	orl	%r8d, %edx
	orl	%r13d, %edx
	cmpb	$20, %sil
	je	.L3737
.L1368:
	leal	0(,%rcx,8), %r15d
	orl	%r15d, %edx
	xorl	%r15d, %r15d
	cmpl	%edx, %edi
	jne	.L1359
	movq	128(%rbp), %r11
	cmpq	%r11, 128(%rbx)
	je	.L3374
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	xorl	%r15d, %r15d
	call	*targetm+264(%rip)
	testl	%eax, %eax
	movl	%eax, 496(%rsp)
	je	.L1359
	movzbl	16(%rbx), %eax
	xorl	%r15d, %r15d
	cmpl	$18, %eax
	je	.L1494
	cmpl	$18, %eax
	ja	.L1511
	cmpl	$13, %eax
	je	.L1372
.L1371:
	cmpl	$2, 496(%rsp)
	jne	.L1359
	cmpl	$1, %r15d
	cmove	496(%rsp), %r15d
	jmp	.L1359
.L1372:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L1373
	call	comptypes
	movl	%eax, %r15d
	jmp	.L1371
.L1373:
	movl	$1, %r15d
	jmp	.L1371
.L1511:
	cmpl	$20, %eax
	je	.L1507
	cmpl	$23, %eax
	jne	.L1371
	movl	$1, 260(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L1376
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 260(%rsp)
	je	.L1371
.L1376:
	movq	24(%rbx), %r13
	movq	24(%rbp), %r12
	testq	%r13, %r13
	je	.L3738
	testq	%r12, %r12
	je	.L3739
	movl	$1, %r15d
	xorl	%ebp, %ebp
.L1491:
	testq	%r13, %r13
	je	.L3740
	testq	%r12, %r12
	je	.L1480
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3741
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L1466
.L3481:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L1480
.L1465:
	movq	(%r13), %r13
	movq	(%r12), %r12
	cmpl	%r15d, %ebp
	cmovg	%ebp, %r15d
	jmp	.L1491
.L1480:
	xorl	%r15d, %r15d
.L1460:
	cmpl	$1, %r15d
	cmove	260(%rsp), %r15d
	jmp	.L1371
.L1466:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %ebp
	jne	.L1465
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3743
.L1470:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L1480
	cmpq	$0, 96(%rax)
	je	.L1481
	testb	$8, 62(%rax)
	je	.L1480
.L1481:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1480
	movq	32(%r13), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1480
	movq	32(%r12), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L1480
.L1487:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1483
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1487
	jmp	.L1480
.L1483:
	testq	%rbx, %rbx
	jne	.L1465
	jmp	.L1480
.L3743:
	cmpq	$0, 96(%rax)
	je	.L1471
	testb	$8, 62(%rax)
	je	.L1470
.L1471:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1470
	movq	32(%r12), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1470
	movq	32(%r13), %r9
	movq	24(%r9), %rbx
	testq	%rbx, %rbx
	je	.L1480
.L1477:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1483
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1477
	jmp	.L1480
.L3741:
	movq	32(%r12), %rdi
	jmp	.L3481
.L3740:
	testq	%r12, %r12
	je	.L1460
	jmp	.L1480
.L3739:
	movq	%r13, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L1371
	movq	136(%rbp), %rax
	testq	%rax, %rax
	je	.L3125
	movq	%rax, %rbp
	movl	$1, %r12d
	xorl	%r15d, %r15d
.L1455:
	testq	%r13, %r13
	je	.L3744
	testq	%rbp, %rbp
	je	.L1444
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3745
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L1430
.L3479:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L1444
.L1429:
	movq	(%r13), %r13
	movq	(%rbp), %rbp
	cmpl	%r12d, %r15d
	cmovg	%r15d, %r12d
	jmp	.L1455
.L1444:
	xorl	%r12d, %r12d
.L1424:
	movl	$2, %r15d
	decl	%r12d
.L3480:
	jne	.L1371
.L3125:
	movl	260(%rsp), %r15d
	jmp	.L1371
.L1430:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L1429
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3747
.L1434:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L1444
	cmpq	$0, 96(%rax)
	je	.L1445
	testb	$8, 62(%rax)
	je	.L1444
.L1445:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1444
	movq	32(%r13), %rcx
	movq	32(%rcx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1444
	movq	32(%rbp), %r8
	movq	24(%r8), %rbx
	testq	%rbx, %rbx
	je	.L1444
.L1451:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1447
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1451
	jmp	.L1444
.L1447:
	testq	%rbx, %rbx
	jne	.L1429
	jmp	.L1444
.L3747:
	cmpq	$0, 96(%rax)
	je	.L1435
	testb	$8, 62(%rax)
	je	.L1434
.L1435:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1434
	movq	32(%rbp), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1434
	movq	32(%r13), %r10
	movq	24(%r10), %rbx
	testq	%rbx, %rbx
	je	.L1444
.L1441:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1447
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1441
	jmp	.L1444
.L3745:
	movq	32(%rbp), %rdi
	jmp	.L3479
.L3744:
	testq	%rbp, %rbp
	je	.L1424
	jmp	.L1444
.L3738:
	movq	%r12, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L1371
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L3125
	movq	%rax, %rbp
	movl	$1, %r13d
	xorl	%r15d, %r15d
.L1416:
	testq	%r12, %r12
	je	.L3748
	testq	%rbp, %rbp
	je	.L1405
	movq	32(%r12), %rdi
	testq	%rdi, %rdi
	je	.L3749
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L1391
.L3478:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L1405
.L1390:
	movq	(%r12), %r12
	movq	(%rbp), %rbp
	cmpl	%r13d, %r15d
	cmovg	%r15d, %r13d
	jmp	.L1416
.L1405:
	xorl	%r13d, %r13d
.L1385:
	movl	$2, %r15d
	decl	%r13d
	jmp	.L3480
.L1391:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L1390
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	je	.L3751
.L1395:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L1405
	cmpq	$0, 96(%rax)
	je	.L1406
	testb	$8, 62(%rax)
	je	.L1405
.L1406:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1405
	movq	32(%r12), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1405
	movq	32(%rbp), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L1405
.L1412:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1408
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1412
	jmp	.L1405
.L1408:
	testq	%rbx, %rbx
	jne	.L1390
	jmp	.L1405
.L3751:
	cmpq	$0, 96(%rax)
	je	.L1396
	testb	$8, 62(%rax)
	je	.L1395
.L1396:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1395
	movq	32(%rbp), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1395
	movq	32(%r12), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L1405
.L1402:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1408
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1402
	jmp	.L1405
.L3749:
	movq	32(%rbp), %rdi
	jmp	.L3478
.L3748:
	testq	%rbp, %rbp
	je	.L1385
	jmp	.L1405
.L1507:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmove	%eax, %r15d
	jmp	.L1371
.L1494:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	movl	$1, %r15d
	movq	24(%rbx), %r12
	movq	24(%rbp), %r13
	cmpq	%rsi, %rdi
	je	.L1495
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	je	.L1354
.L1495:
	testq	%r12, %r12
	je	.L1371
	testq	%r13, %r13
	je	.L1371
	cmpq	%r13, %r12
	je	.L1371
	movq	112(%r12), %rcx
	movq	112(%r13), %rsi
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L1498
	movq	104(%r12), %rbp
	cmpb	$25, 16(%rbp)
	je	.L3752
.L1499:
	movl	$1, %r8d
.L1498:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L1500
	movq	104(%r13), %rbx
	cmpb	$25, 16(%rbx)
	je	.L3753
.L1501:
	movl	$1, %ecx
.L1500:
	testb	%r8b, %r8b
	jne	.L1371
	testb	%cl, %cl
	jne	.L1371
	testb	%dil, %dil
	je	.L3227
	testb	%dl, %dl
.L3373:
	jne	.L1371
.L1506:
	xorl	%r15d, %r15d
	jmp	.L1371
.L3227:
	testb	%dl, %dl
	jne	.L1506
	movq	104(%r12), %rdi
	movq	104(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1506
	movq	112(%r12), %rdi
	movq	112(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L3373
.L3753:
	cmpb	$25, 16(%rsi)
	jne	.L1501
	jmp	.L1500
.L3752:
	cmpb	$25, 16(%rcx)
	jne	.L1499
	jmp	.L1498
.L3374:
	movl	$1, %r15d
	jmp	.L1359
.L3737:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L1368
.L3736:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L1367
.L3734:
	movzbl	17(%rbp), %esi
	movzwl	60(%rbp), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L1363
.L3733:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L1362
.L3732:
	testb	$2, 62(%rcx)
	je	.L1361
	movq	24(%rcx), %r10
	testq	%r10, %r10
	cmovne	%r10, %rbp
	jmp	.L1361
.L3731:
	testb	$2, 62(%rbx)
	je	.L1360
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L1360
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L1360
.L3729:
	cmpq	%rax, %rdx
	je	.L1185
	movq	24(%rdx), %rdi
	testq	%rdi, %rdi
	movq	%rdi, 280(%rsp)
	je	.L1185
.L1350:
	movq	280(%rsp), %r15
	movq	%rax, %rbp
	movq	8(%r15), %rbx
	cmpq	%rax, %rbx
	je	.L1192
	testq	%rbx, %rbx
	je	.L1192
	testq	%rax, %rax
	je	.L1192
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L1192
	movzbl	16(%rax), %ecx
	testb	%cl, %cl
	jne	.L1191
.L1192:
	movl	$1, %r15d
.L1193:
	testl	%r15d, %r15d
	jne	.L3754
.L1188:
	movq	280(%rsp), %rsi
	movq	(%rsi), %r9
	testq	%r9, %r9
	movq	%r9, 280(%rsp)
	jne	.L1350
	jmp	.L1185
.L3754:
	movq	304(%rsp), %r15
	movq	%rax, 32(%r15)
	jmp	.L3482
.L1191:
	cmpb	$6, %dl
	je	.L3755
.L1194:
	cmpb	$6, %cl
	je	.L3756
.L1195:
	cmpb	$10, %dl
	je	.L3757
.L1196:
	cmpb	$10, 16(%rbp)
	je	.L3758
.L1197:
	cmpq	%rbp, %rbx
	je	.L3372
	movzbl	16(%rbx), %edi
	cmpb	16(%rbp), %dil
	je	.L3759
.L3371:
	movq	296(%rsp), %rcx
	xorl	%r15d, %r15d
	movq	32(%rcx), %rax
	jmp	.L1193
.L3759:
	movzbl	17(%rbx), %r8d
	movzbl	62(%rbx), %r10d
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	shrb	$5, %r10b
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	$1, %r8d
	andl	$1, %r10d
	andl	$1, %edx
	addl	%r8d, %r8d
	sall	$2, %r10d
	orl	%r8d, %edx
	orl	%r10d, %edx
	cmpb	$20, %dil
	je	.L3760
.L1201:
	movzbl	17(%rbp), %r9d
	movzbl	62(%rbp), %r11d
	leal	0(,%rcx,8), %esi
	orl	%edx, %esi
	xorl	%ecx, %ecx
	movl	%r9d, %edx
	shrb	$5, %r11b
	shrb	$3, %r9b
	shrb	$4, %dl
	andl	$1, %r9d
	andl	$1, %r11d
	andl	$1, %edx
	addl	%r9d, %r9d
	sall	$2, %r11d
	orl	%r9d, %edx
	orl	%r11d, %edx
	cmpb	$20, %dil
	je	.L3761
.L1202:
	leal	0(,%rcx,8), %r13d
	orl	%r13d, %edx
	cmpl	%edx, %esi
	je	.L1200
	xorl	%r15d, %r15d
.L3370:
	movq	296(%rsp), %r12
	movq	32(%r12), %rax
	jmp	.L1193
.L1200:
	movq	128(%rbp), %rax
	cmpq	%rax, 128(%rbx)
	je	.L3372
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	*targetm+264(%rip)
	testl	%eax, %eax
	movl	%eax, 500(%rsp)
	je	.L3371
	movzbl	16(%rbx), %eax
	xorl	%r15d, %r15d
	cmpl	$18, %eax
	je	.L1328
	cmpl	$18, %eax
	ja	.L1345
	cmpl	$13, %eax
	je	.L1206
.L1205:
	cmpl	$2, 500(%rsp)
	je	.L3762
	movq	296(%rsp), %r13
	movq	32(%r13), %rax
	jmp	.L1193
.L3762:
	cmpl	$1, %r15d
	je	.L3763
	movq	296(%rsp), %r8
	movq	32(%r8), %rax
	jmp	.L1193
.L3763:
	movl	$2, %r15d
	jmp	.L3370
.L1206:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L1207
	call	comptypes
	movl	%eax, %r15d
	jmp	.L1205
.L1207:
	movl	$1, %r15d
	jmp	.L1205
.L1345:
	cmpl	$20, %eax
	je	.L1341
	cmpl	$23, %eax
	jne	.L1205
	movl	$1, 276(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L1210
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 276(%rsp)
	je	.L1205
.L1210:
	movq	24(%rbx), %r13
	movq	24(%rbp), %r12
	testq	%r13, %r13
	je	.L3764
	testq	%r12, %r12
	je	.L3765
	movl	$1, %r15d
	xorl	%ebp, %ebp
.L1325:
	testq	%r13, %r13
	je	.L3766
	testq	%r12, %r12
	je	.L1314
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3767
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L1300
.L3477:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L1314
.L1299:
	movq	(%r13), %r13
	movq	(%r12), %r12
	cmpl	%r15d, %ebp
	cmovg	%ebp, %r15d
	jmp	.L1325
.L1314:
	xorl	%r15d, %r15d
.L1294:
	cmpl	$1, %r15d
	cmove	276(%rsp), %r15d
	jmp	.L1205
.L1300:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %ebp
	jne	.L1299
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3769
.L1304:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L1314
	cmpq	$0, 96(%rax)
	je	.L1315
	testb	$8, 62(%rax)
	je	.L1314
.L1315:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1314
	movq	32(%r13), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1314
	movq	32(%r12), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L1314
.L1321:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1317
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1321
	jmp	.L1314
.L1317:
	testq	%rbx, %rbx
	jne	.L1299
	jmp	.L1314
.L3769:
	cmpq	$0, 96(%rax)
	je	.L1305
	testb	$8, 62(%rax)
	je	.L1304
.L1305:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1304
	movq	32(%r12), %rcx
	movq	32(%rcx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1304
	movq	32(%r13), %rdx
	movq	24(%rdx), %rbx
	testq	%rbx, %rbx
	je	.L1314
.L1311:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1317
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1311
	jmp	.L1314
.L3767:
	movq	32(%r12), %rdi
	jmp	.L3477
.L3766:
	testq	%r12, %r12
	je	.L1294
	jmp	.L1314
.L3765:
	movq	%r13, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L1205
	movq	136(%rbp), %rax
	testq	%rax, %rax
	je	.L3121
	movq	%rax, %rbp
	movl	$1, %r12d
	xorl	%r15d, %r15d
.L1289:
	testq	%r13, %r13
	je	.L3770
	testq	%rbp, %rbp
	je	.L1278
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3771
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L1264
.L3475:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L1278
.L1263:
	movq	(%r13), %r13
	movq	(%rbp), %rbp
	cmpl	%r12d, %r15d
	cmovg	%r15d, %r12d
	jmp	.L1289
.L1278:
	xorl	%r12d, %r12d
.L1258:
	movl	$2, %r15d
	decl	%r12d
.L3476:
	jne	.L1205
.L3121:
	movl	276(%rsp), %r15d
	jmp	.L1205
.L1264:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L1263
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3773
.L1268:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L1278
	cmpq	$0, 96(%rax)
	je	.L1279
	testb	$8, 62(%rax)
	je	.L1278
.L1279:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1278
	movq	32(%r13), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1278
	movq	32(%rbp), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L1278
.L1285:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1281
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1285
	jmp	.L1278
.L1281:
	testq	%rbx, %rbx
	jne	.L1263
	jmp	.L1278
.L3773:
	cmpq	$0, 96(%rax)
	je	.L1269
	testb	$8, 62(%rax)
	je	.L1268
.L1269:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1268
	movq	32(%rbp), %r8
	movq	32(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1268
	movq	32(%r13), %r11
	movq	24(%r11), %rbx
	testq	%rbx, %rbx
	je	.L1278
.L1275:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1281
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1275
	jmp	.L1278
.L3771:
	movq	32(%rbp), %rdi
	jmp	.L3475
.L3770:
	testq	%rbp, %rbp
	je	.L1258
	jmp	.L1278
.L3764:
	movq	%r12, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L1205
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L3121
	movq	%rax, %rbp
	movl	$1, %r13d
	xorl	%r15d, %r15d
.L1250:
	testq	%r12, %r12
	je	.L3774
	testq	%rbp, %rbp
	je	.L1239
	movq	32(%r12), %rdi
	testq	%rdi, %rdi
	je	.L3775
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L1225
.L3474:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L1239
.L1224:
	movq	(%r12), %r12
	movq	(%rbp), %rbp
	cmpl	%r13d, %r15d
	cmovg	%r15d, %r13d
	jmp	.L1250
.L1239:
	xorl	%r13d, %r13d
.L1219:
	movl	$2, %r15d
	decl	%r13d
	jmp	.L3476
.L1225:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L1224
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	je	.L3777
.L1229:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L1239
	cmpq	$0, 96(%rax)
	je	.L1240
	testb	$8, 62(%rax)
	je	.L1239
.L1240:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1239
	movq	32(%r12), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1239
	movq	32(%rbp), %r10
	movq	24(%r10), %rbx
	testq	%rbx, %rbx
	je	.L1239
.L1246:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1242
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1246
	jmp	.L1239
.L1242:
	testq	%rbx, %rbx
	jne	.L1224
	jmp	.L1239
.L3777:
	cmpq	$0, 96(%rax)
	je	.L1230
	testb	$8, 62(%rax)
	je	.L1229
.L1230:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1229
	movq	32(%rbp), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1229
	movq	32(%r12), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L1239
.L1236:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1242
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1236
	jmp	.L1239
.L3775:
	movq	32(%rbp), %rdi
	jmp	.L3474
.L3774:
	testq	%rbp, %rbp
	je	.L1219
	jmp	.L1239
.L1341:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmove	%eax, %r15d
	jmp	.L1205
.L1328:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	movl	$1, %r15d
	movq	24(%rbx), %r12
	movq	24(%rbp), %r13
	cmpq	%rsi, %rdi
	je	.L1329
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	je	.L3323
.L1329:
	testq	%r12, %r12
	je	.L1205
	testq	%r13, %r13
	je	.L1205
	cmpq	%r13, %r12
	je	.L1205
	movq	112(%r12), %rcx
	movq	112(%r13), %rsi
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L1332
	movq	104(%r12), %rbp
	cmpb	$25, 16(%rbp)
	je	.L3778
.L1333:
	movl	$1, %r8d
.L1332:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L1334
	movq	104(%r13), %r10
	cmpb	$25, 16(%r10)
	je	.L3779
.L1335:
	movl	$1, %ecx
.L1334:
	testb	%r8b, %r8b
	jne	.L1205
	testb	%cl, %cl
	jne	.L1205
	testb	%dil, %dil
	je	.L3217
	testb	%dl, %dl
.L3369:
	jne	.L1205
.L1340:
	xorl	%r15d, %r15d
	jmp	.L1205
.L3217:
	testb	%dl, %dl
	jne	.L1340
	movq	104(%r12), %rdi
	movq	104(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1340
	movq	112(%r12), %rdi
	movq	112(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L3369
.L3779:
	cmpb	$25, 16(%rsi)
	jne	.L1335
	jmp	.L1334
.L3778:
	cmpb	$25, 16(%rcx)
	jne	.L1333
	jmp	.L1332
.L3323:
	movq	296(%rsp), %r11
	movq	32(%r11), %rax
	jmp	.L1188
.L3372:
	movq	296(%rsp), %rsi
	movl	$1, %r15d
	movq	32(%rsi), %rax
	jmp	.L1193
.L3761:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L1202
.L3760:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L1201
.L3758:
	movzbl	17(%rbp), %esi
	movzwl	60(%rbp), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L1197
.L3757:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L1196
.L3756:
	testb	$2, 62(%rax)
	je	.L1195
	movq	24(%rax), %r12
	testq	%r12, %r12
	cmovne	%r12, %rbp
	jmp	.L1195
.L3755:
	testb	$2, 62(%rbx)
	je	.L1194
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L1194
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L1194
.L3728:
	movq	504(%rsp), %rdi
	movq	24(%rbx), %rsi
	jmp	.L3473
.L3727:
	cmpq	$0, 288(%rsp)
	jne	.L1171
	jmp	.L3383
.L3726:
	testq	%rax, %rax
	jne	.L1169
	jmp	.L1518
.L3305:
	movq	%r15, %rdi
.L1130:
	cmpl	$8, %r12d
	movq	%rbx, %rsi
	je	.L3780
.L1132:
	call	common_type
	cmpl	$8, %ebp
	movq	%rax, %rdi
	je	.L3781
.L1133:
	cmpl	$8, %r12d
	je	.L3782
.L1135:
	call	build_complex_type
	jmp	.L3385
.L3782:
	cmpq	%rdi, 8(%rbx)
	jne	.L1135
	jmp	.L3383
.L3781:
	cmpq	%rax, 8(%r15)
	jne	.L1133
	jmp	.L1518
.L3780:
	movq	8(%rbx), %rsi
	jmp	.L1132
.L3206:
	movq	8(%r15), %rdi
	jmp	.L1130
.L3719:
	movzwl	60(%rsi), %edi
	movl	$1, %esi
	andl	$511, %edi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L1126
.L3718:
	movzwl	60(%r15), %edi
	movl	$1, %esi
	andl	$511, %edi
	call	type_for_size
	movq	%rax, %r15
	jmp	.L1125
.L3717:
	movq	%rbx, %r15
	jmp	.L1122
.L1529:
	movq	global_trees+224(%rip), %r15
	movl	$.LC12, %edi
	jmp	.L3404
.L3716:
	movq	96(%rsp), %rbx
	movq	168(%rsp), %rdi
	movq	8(%rbx), %rbp
	movq	8(%rdi), %r15
	movq	128(%rbp), %rbx
	movq	128(%r15), %rbp
	cmpq	%rbp, %rbx
	je	.L3368
	testq	%rbx, %rbx
	je	.L3368
	testq	%rbp, %rbp
	je	.L3368
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L3368
	movzbl	16(%rbp), %eax
	testb	%al, %al
	je	.L3368
	cmpb	$6, %dl
	je	.L3783
.L965:
	cmpb	$6, %al
	je	.L3784
.L966:
	cmpb	$10, %dl
	je	.L3785
.L967:
	cmpb	$10, 16(%rbp)
	je	.L3786
.L968:
	cmpq	%rbp, %rbx
	movl	$1, %r15d
	je	.L964
	movzbl	16(%rbx), %esi
	cmpb	16(%rbp), %sil
	je	.L970
	xorl	%r15d, %r15d
.L964:
	cmpl	$2, %r15d
	je	.L3787
.L1120:
	movl	%r15d, %eax
	jmp	.L961
.L3787:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	je	.L1120
	movl	$.LC1, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L1120
.L970:
	movzbl	17(%rbx), %r13d
	movzbl	62(%rbx), %r10d
	xorl	%ecx, %ecx
	movl	%r13d, %edx
	shrb	$5, %r10b
	shrb	$3, %r13b
	shrb	$4, %dl
	andl	$1, %r13d
	andl	$1, %r10d
	andl	$1, %edx
	addl	%r13d, %r13d
	sall	$2, %r10d
	orl	%r13d, %edx
	orl	%r10d, %edx
	cmpb	$20, %sil
	je	.L3788
.L972:
	movzbl	17(%rbp), %r8d
	movzbl	62(%rbp), %r12d
	leal	0(,%rcx,8), %edi
	orl	%edx, %edi
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	shrb	$5, %r12b
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	$1, %r8d
	andl	$1, %r12d
	andl	$1, %edx
	addl	%r8d, %r8d
	sall	$2, %r12d
	orl	%r8d, %edx
	orl	%r12d, %edx
	cmpb	$20, %sil
	je	.L3789
.L973:
	leal	0(,%rcx,8), %r11d
	xorl	%r15d, %r15d
	orl	%r11d, %edx
	cmpl	%edx, %edi
	jne	.L964
	movq	128(%rbp), %rax
	cmpq	%rax, 128(%rbx)
	je	.L3368
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	xorl	%r15d, %r15d
	call	*targetm+264(%rip)
	testl	%eax, %eax
	movl	%eax, 524(%rsp)
	je	.L964
	movzbl	16(%rbx), %eax
	xorl	%r15d, %r15d
	cmpl	$18, %eax
	je	.L1099
	cmpl	$18, %eax
	ja	.L1116
	cmpl	$13, %eax
	je	.L977
.L976:
	cmpl	$2, 524(%rsp)
	jne	.L964
	cmpl	$1, %r15d
	cmove	524(%rsp), %r15d
	jmp	.L964
.L977:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L978
	call	comptypes
	movl	%eax, %r15d
	jmp	.L976
.L978:
	movl	$1, %r15d
	jmp	.L976
.L1116:
	cmpl	$20, %eax
	je	.L1112
	cmpl	$23, %eax
	jne	.L976
	movl	$1, 320(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L981
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 320(%rsp)
	je	.L976
.L981:
	movq	24(%rbx), %r13
	movq	24(%rbp), %r12
	testq	%r13, %r13
	je	.L3790
	testq	%r12, %r12
	je	.L3791
	movl	$1, %r15d
	xorl	%ebp, %ebp
.L1096:
	testq	%r13, %r13
	je	.L3792
	testq	%r12, %r12
	je	.L1085
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3793
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L1071
.L3472:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L1085
.L1070:
	movq	(%r13), %r13
	movq	(%r12), %r12
	cmpl	%r15d, %ebp
	cmovg	%ebp, %r15d
	jmp	.L1096
.L1085:
	xorl	%r15d, %r15d
.L1065:
	cmpl	$1, %r15d
	cmove	320(%rsp), %r15d
	jmp	.L976
.L1071:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %ebp
	jne	.L1070
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3795
.L1075:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L1085
	cmpq	$0, 96(%rax)
	je	.L1086
	testb	$8, 62(%rax)
	je	.L1085
.L1086:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1085
	movq	32(%r13), %rcx
	movq	32(%rcx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1085
	movq	32(%r12), %rdx
	movq	24(%rdx), %rbx
	testq	%rbx, %rbx
	je	.L1085
.L1092:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1088
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1092
	jmp	.L1085
.L1088:
	testq	%rbx, %rbx
	jne	.L1070
	jmp	.L1085
.L3795:
	cmpq	$0, 96(%rax)
	je	.L1076
	testb	$8, 62(%rax)
	je	.L1075
.L1076:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1075
	movq	32(%r12), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1075
	movq	32(%r13), %r9
	movq	24(%r9), %rbx
	testq	%rbx, %rbx
	je	.L1085
.L1082:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1088
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1082
	jmp	.L1085
.L3793:
	movq	32(%r12), %rdi
	jmp	.L3472
.L3792:
	testq	%r12, %r12
	je	.L1065
	jmp	.L1085
.L3791:
	movq	%r13, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L976
	movq	136(%rbp), %rax
	testq	%rax, %rax
	je	.L3117
	movq	%rax, %rbp
	movl	$1, %r12d
	xorl	%r15d, %r15d
.L1060:
	testq	%r13, %r13
	je	.L3796
	testq	%rbp, %rbp
	je	.L1049
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3797
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L1035
.L3470:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L1049
.L1034:
	movq	(%r13), %r13
	movq	(%rbp), %rbp
	cmpl	%r12d, %r15d
	cmovg	%r15d, %r12d
	jmp	.L1060
.L1049:
	xorl	%r12d, %r12d
.L1029:
	movl	$2, %r15d
	decl	%r12d
.L3471:
	jne	.L976
.L3117:
	movl	320(%rsp), %r15d
	jmp	.L976
.L1035:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L1034
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3799
.L1039:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L1049
	cmpq	$0, 96(%rax)
	je	.L1050
	testb	$8, 62(%rax)
	je	.L1049
.L1050:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1049
	movq	32(%r13), %r10
	movq	32(%r10), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1049
	movq	32(%rbp), %r8
	movq	24(%r8), %rbx
	testq	%rbx, %rbx
	je	.L1049
.L1056:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1052
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1056
	jmp	.L1049
.L1052:
	testq	%rbx, %rbx
	jne	.L1034
	jmp	.L1049
.L3799:
	cmpq	$0, 96(%rax)
	je	.L1040
	testb	$8, 62(%rax)
	je	.L1039
.L1040:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1039
	movq	32(%rbp), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1039
	movq	32(%r13), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L1049
.L1046:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1052
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1046
	jmp	.L1049
.L3797:
	movq	32(%rbp), %rdi
	jmp	.L3470
.L3796:
	testq	%rbp, %rbp
	je	.L1029
	jmp	.L1049
.L3790:
	movq	%r12, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L976
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L3117
	movq	%rax, %rbp
	movl	$1, %r13d
	xorl	%r15d, %r15d
.L1021:
	testq	%r12, %r12
	je	.L3800
	testq	%rbp, %rbp
	je	.L1010
	movq	32(%r12), %rdi
	testq	%rdi, %rdi
	je	.L3801
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L996
.L3469:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L1010
.L995:
	movq	(%r12), %r12
	movq	(%rbp), %rbp
	cmpl	%r13d, %r15d
	cmovg	%r15d, %r13d
	jmp	.L1021
.L1010:
	xorl	%r13d, %r13d
.L990:
	movl	$2, %r15d
	decl	%r13d
	jmp	.L3471
.L996:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L995
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	je	.L3803
.L1000:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L1010
	cmpq	$0, 96(%rax)
	je	.L1011
	testb	$8, 62(%rax)
	je	.L1010
.L1011:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1010
	movq	32(%r12), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1010
	movq	32(%rbp), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L1010
.L1017:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1013
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1017
	jmp	.L1010
.L1013:
	testq	%rbx, %rbx
	jne	.L995
	jmp	.L1010
.L3803:
	cmpq	$0, 96(%rax)
	je	.L1001
	testb	$8, 62(%rax)
	je	.L1000
.L1001:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1000
	movq	32(%rbp), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1000
	movq	32(%r12), %rcx
	movq	24(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L1010
.L1007:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1013
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1007
	jmp	.L1010
.L3801:
	movq	32(%rbp), %rdi
	jmp	.L3469
.L3800:
	testq	%rbp, %rbp
	je	.L990
	jmp	.L1010
.L1112:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmove	%eax, %r15d
	jmp	.L976
.L1099:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	movl	$1, %r15d
	movq	24(%rbx), %r12
	movq	24(%rbp), %r13
	cmpq	%rsi, %rdi
	je	.L1100
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	je	.L964
.L1100:
	testq	%r12, %r12
	je	.L976
	testq	%r13, %r13
	je	.L976
	cmpq	%r13, %r12
	je	.L976
	movq	112(%r12), %rcx
	movq	112(%r13), %rsi
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L1103
	movq	104(%r12), %rbp
	cmpb	$25, 16(%rbp)
	je	.L3804
.L1104:
	movl	$1, %r8d
.L1103:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L1105
	movq	104(%r13), %rbx
	cmpb	$25, 16(%rbx)
	je	.L3805
.L1106:
	movl	$1, %ecx
.L1105:
	testb	%r8b, %r8b
	jne	.L976
	testb	%cl, %cl
	jne	.L976
	testb	%dil, %dil
	je	.L3205
	testb	%dl, %dl
.L3367:
	jne	.L976
.L1111:
	xorl	%r15d, %r15d
	jmp	.L976
.L3205:
	testb	%dl, %dl
	jne	.L1111
	movq	104(%r12), %rdi
	movq	104(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1111
	movq	112(%r12), %rdi
	movq	112(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L3367
.L3805:
	cmpb	$25, 16(%rsi)
	jne	.L1106
	jmp	.L1105
.L3804:
	cmpb	$25, 16(%rcx)
	jne	.L1104
	jmp	.L1103
.L3368:
	movl	$1, %r15d
	jmp	.L964
.L3789:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L973
.L3788:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L972
.L3786:
	movzbl	17(%rbp), %esi
	movzwl	60(%rbp), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L968
.L3785:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L967
.L3784:
	testb	$2, 62(%rbp)
	je	.L966
	movq	24(%rbp), %rsi
	testq	%rsi, %rsi
	cmovne	%rsi, %rbp
	jmp	.L966
.L3783:
	testb	$2, 62(%rbx)
	je	.L965
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L965
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L965
	.p2align 6,,7
.L349:
	cmpl	$6, 588(%rsp)
	jne	.L136
	cmpl	$6, 584(%rsp)
	jne	.L136
	cmpb	$25, %dl
	je	.L3806
.L360:
	movl	flag_traditional(%rip), %ebx
	movq	96(%rsp), %r15
	testl	%ebx, %ebx
	jne	.L136
	movq	8(%r14), %rcx
	movq	integer_types+40(%rip), %rdi
	cmpq	%rdi, 128(%rcx)
	je	.L365
	movq	%r14, %rsi
	call	convert
.L3446:
	movq	%rax, %r14
.L365:
	movl	$1, 20(%rsp)
	jmp	.L136
.L3806:
	movl	skip_evaluation(%rip), %ebp
	testl	%ebp, %ebp
	jne	.L360
	movq	%r14, %rdi
	call	tree_int_cst_sgn
	movl	$.LC5, %edi
	testl	%eax, %eax
	js	.L3354
	movq	96(%rsp), %r13
	movq	%r14, %rdi
	movzwl	60(%r13), %esi
	andl	$511, %esi
	call	compare_tree_int
	movl	$.LC6, %edi
	testl	%eax, %eax
	js	.L360
.L3354:
	xorl	%eax, %eax
	call	warning
	jmp	.L360
	.p2align 6,,7
.L340:
	cmpl	$6, 588(%rsp)
	jne	.L136
	cmpl	$6, 584(%rsp)
	jne	.L136
	cmpb	$25, %dl
	jne	.L360
	movl	skip_evaluation(%rip), %eax
	testl	%eax, %eax
	jne	.L360
	movq	%r14, %rdi
	call	tree_int_cst_sgn
	movl	$.LC3, %edi
	testl	%eax, %eax
	js	.L3354
	movq	%r14, %rdi
	call	integer_zerop
	movq	%r14, %rdi
	movq	96(%rsp), %r15
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	188(%rsp), %eax
	movzwl	60(%r15), %esi
	movl	%eax, 188(%rsp)
	andl	$511, %esi
	call	compare_tree_int
	movl	$.LC4, %edi
	testl	%eax, %eax
	jns	.L3354
	jmp	.L360
	.p2align 6,,7
.L358:
	cmpl	$6, 588(%rsp)
	jne	.L136
	cmpl	$6, 584(%rsp)
	jne	.L136
	cmpb	$25, %dl
	jne	.L360
	movl	skip_evaluation(%rip), %edx
	testl	%edx, %edx
	jne	.L360
	movq	%r14, %rdi
	call	tree_int_cst_sgn
	movl	$.LC7, %edi
	testl	%eax, %eax
	js	.L3354
	movq	96(%rsp), %r11
	movq	%r14, %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	js	.L360
	movl	$.LC8, %edi
	jmp	.L3354
	.p2align 6,,7
.L324:
	cmpl	$6, 588(%rsp)
	jne	.L136
	cmpl	$6, 584(%rsp)
	jne	.L136
	movl	$-1, 180(%rsp)
	jmp	.L136
.L336:
	cmpl	$6, 588(%rsp)
	je	.L338
	cmpl	$13, 588(%rsp)
	je	.L338
	cmpl	$7, 588(%rsp)
	je	.L338
	cmpl	$8, 588(%rsp)
	jne	.L136
.L338:
	cmpl	$6, 584(%rsp)
	je	.L339
	cmpl	$13, 584(%rsp)
	je	.L339
	cmpl	$7, 584(%rsp)
	je	.L339
	cmpl	$8, 584(%rsp)
	jne	.L136
.L339:
	movq	8(%rsp), %rdi
	movq	integer_types+40(%rip), %r15
	call	truthvalue_conversion
	movq	%r14, %rdi
	movq	%rax, 8(%rsp)
	call	truthvalue_conversion
	jmp	.L3446
.L1525:
	movl	588(%rsp), %eax
	movq	integer_types+40(%rip), %r10
	subl	$6, %eax
	movq	%r10, (%rsp)
	cmpl	$1, %eax
	ja	.L1526
	movl	584(%rsp), %eax
	subl	$6, %eax
	cmpl	$1, %eax
	ja	.L1526
.L3405:
	movl	$1, 184(%rsp)
	jmp	.L136
.L1526:
	cmpl	$13, 588(%rsp)
	je	.L3808
.L2095:
	cmpl	$13, 584(%rsp)
	je	.L3809
.L2099:
	cmpl	$13, 588(%rsp)
	je	.L3810
.L2102:
	cmpl	$6, 588(%rsp)
	jne	.L136
	cmpl	$13, 584(%rsp)
	jne	.L136
	movq	168(%rsp), %r15
.L3497:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L136
	movl	$.LC13, %edi
	jmp	.L3404
	.p2align 6,,7
.L3810:
	cmpl	$6, 584(%rsp)
	jne	.L2102
	movq	96(%rsp), %r15
	jmp	.L3497
.L3809:
	movq	8(%rsp), %rsi
	cmpb	$25, 16(%rsi)
	jne	.L2099
	movq	%rsi, %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L2099
	movl	pedantic(%rip), %eax
	movq	168(%rsp), %r15
	testl	%eax, %eax
.L3524:
	je	.L136
.L3499:
	movl	$.LC16, %edi
	jmp	.L3404
	.p2align 6,,7
.L3808:
	cmpl	$13, 584(%rsp)
	je	.L3811
	cmpb	$25, %dl
	jne	.L2095
	movq	%r14, %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L2095
	movl	pedantic(%rip), %eax
	movq	96(%rsp), %r15
	testl	%eax, %eax
	jne	.L3499
	movl	extra_warnings(%rip), %eax
	testl	%eax, %eax
	jmp	.L3524
.L3811:
	movq	96(%rsp), %rdi
	movq	168(%rsp), %rsi
	movl	$1, %edx
	call	maybe_objc_comptypes
	testl	%eax, %eax
	js	.L3812
.L1531:
	testl	%eax, %eax
	je	.L1529
	movq	96(%rsp), %r15
	movq	168(%rsp), %rbx
	cmpq	%rbx, %r15
	je	.L1692
	movq	global_trees(%rip), %rax
	cmpq	%rax, %r15
	je	.L3813
	cmpq	%rax, 168(%rsp)
	je	.L1692
	movq	%r15, %rdi
	movq	168(%rsp), %rsi
	call	*targetm+248(%rip)
	movq	%rax, 480(%rsp)
	cmpb	$10, 16(%r15)
	je	.L3814
.L1695:
	movq	168(%rsp), %r8
	cmpb	$10, 16(%r8)
	je	.L3815
.L1696:
	movzbl	16(%r15), %ebp
	movzbl	16(%rbx), %r12d
	cmpl	$8, %ebp
	je	.L3238
	cmpl	$8, %r12d
	je	.L3306
	leal	-6(%rbp), %eax
	cmpl	$17, %eax
	ja	.L2088
	mov	%eax, %r13d
	jmp	*.L2089(,%r13,8)
	.section	.rodata
	.align 8
	.align 4
.L2089:
	.quad	.L1709
	.quad	.L1709
	.quad	.L2088
	.quad	.L2088
	.quad	.L2088
	.quad	.L2088
	.quad	.L2088
	.quad	.L1726
	.quad	.L2088
	.quad	.L2088
	.quad	.L2088
	.quad	.L2088
	.quad	.L1731
	.quad	.L2088
	.quad	.L2088
	.quad	.L2088
	.quad	.L2088
	.quad	.L1738
	.text
.L1709:
	cmpl	$7, %ebp
	je	.L3817
	cmpl	$7, %r12d
	je	.L3239
.L1711:
	movzwl	60(%r15), %edx
	movzwl	60(%rbx), %eax
	andl	$511, %edx
	andl	$511, %eax
	cmpl	%eax, %edx
	jg	.L2088
	cmpl	%edx, %eax
	jg	.L3400
	movq	128(%r15), %rdx
	movq	integer_types+64(%rip), %rcx
	cmpq	%rcx, %rdx
	je	.L1720
	movq	128(%rbx), %rax
	cmpq	%rcx, %rax
	je	.L1720
	movq	integer_types+56(%rip), %rdi
	cmpq	%rdi, %rdx
	je	.L1718
	cmpq	%rdi, %rax
	je	.L1718
	movq	global_trees+208(%rip), %rdi
	cmpq	%rdi, %rdx
	je	.L3394
	cmpq	%rdi, %rax
	je	.L3394
	testb	$32, 17(%r15)
	jne	.L2088
.L3400:
	movq	%rbx, %rdi
.L3394:
	movq	480(%rsp), %rsi
	call	build_type_attribute_variant
	movq	%rax, %r15
.L1692:
	movq	96(%rsp), %rbx
	movq	168(%rsp), %rax
	movq	8(%rbx), %rcx
	movq	8(%rax), %rdx
	cmpq	$0, 32(%rcx)
	sete	%r11b
	cmpq	$0, 32(%rdx)
	sete	%r12b
	xorl	%r11d, %r12d
	andl	$1, %r12d
	jne	.L3818
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	je	.L136
	cmpb	$23, 16(%rcx)
	jmp	.L3523
.L3818:
	movl	$.LC15, %edi
	jmp	.L3404
.L2088:
	movq	%r15, %rdi
	jmp	.L3394
.L1718:
	testb	$32, 17(%r15)
	jne	.L1720
	testb	$32, 17(%rbx)
	je	.L3394
.L1720:
	movq	%rcx, %rdi
	jmp	.L3394
.L3239:
	cmpl	$7, %ebp
	jne	.L3400
	jmp	.L1711
.L3817:
	cmpl	$7, %r12d
	je	.L3239
	jmp	.L2088
.L1726:
	movq	8(%r15), %rbp
	movq	8(%rbx), %rbx
	movq	128(%rbp), %rdi
	movq	128(%rbx), %rsi
	call	common_type
	xorl	%ecx, %ecx
	movzbl	62(%rbp), %r12d
	movzbl	17(%rbp), %r15d
	movq	%rax, %rdi
	shrb	$5, %r12b
	movl	%r15d, %edx
	andl	$1, %r12d
	shrb	$3, %r15b
	shrb	$4, %dl
	andl	$1, %r15d
	sall	$2, %r12d
	andl	$1, %edx
	addl	%r15d, %r15d
	orl	%r15d, %edx
	orl	%r12d, %edx
	cmpb	$20, 16(%rbp)
	je	.L3819
.L1729:
	movzbl	17(%rbx), %r9d
	leal	0(,%rcx,8), %esi
	movzbl	62(%rbx), %ecx
	orl	%edx, %esi
	movl	%r9d, %edx
	shrb	$5, %cl
	shrb	$3, %r9b
	shrb	$4, %dl
	andl	$1, %r9d
	andl	$1, %ecx
	andl	$1, %edx
	addl	%r9d, %r9d
	sall	$2, %ecx
	orl	%r9d, %edx
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	cmpb	$20, 16(%rbx)
	je	.L3820
.L1730:
	leal	0(,%rcx,8), %r10d
	orl	%r10d, %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movq	%rax, %rdi
	call	build_pointer_type
.L3402:
	movq	%rax, %rdi
	jmp	.L3394
.L3820:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L1730
.L3819:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L1729
.L1731:
	movq	8(%r15), %rdi
	movq	8(%rbx), %rsi
	call	common_type
	cmpq	8(%r15), %rax
	movq	%rax, %rdi
	je	.L3821
.L1732:
	cmpq	8(%rbx), %rdi
	je	.L3822
.L1733:
	cmpq	$0, 24(%r15)
	cmove	%rbx, %r15
	movq	24(%r15), %rsi
	call	build_array_type
	jmp	.L3402
.L3822:
	cmpq	$0, 24(%rbx)
	je	.L1733
	jmp	.L3400
.L3821:
	cmpq	$0, 24(%r15)
	je	.L1732
	jmp	.L2088
.L1738:
	movq	8(%rbx), %rsi
	movq	8(%r15), %rdi
	call	common_type
	movq	%rax, 472(%rsp)
	movq	472(%rsp), %rsi
	movq	24(%r15), %rdx
	movq	%rdx, 224(%rsp)
	movq	24(%rbx), %rdx
	movq	%rdx, 232(%rsp)
	cmpq	8(%r15), %rsi
	je	.L3823
.L1739:
	movq	472(%rsp), %rdi
	cmpq	8(%rbx), %rdi
	je	.L3824
	cmpq	$0, 224(%rsp)
	je	.L3825
.L1741:
	cmpq	$0, 232(%rsp)
	jne	.L1742
	movq	472(%rsp), %rdi
	movq	224(%rsp), %rsi
.L3487:
	call	build_function_type
	jmp	.L3402
.L1742:
	xorl	%edi, %edi
	call	pushlevel
	movl	$1, %edi
	call	declare_parm_level
	movq	224(%rsp), %rdi
	call	list_length
	movq	$0, 248(%rsp)
	testl	%eax, %eax
	jle	.L3045
	movl	%eax, %ebx
.L1747:
	movq	248(%rsp), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	call	tree_cons
	decl	%ebx
	movq	%rax, 248(%rsp)
	jne	.L1747
.L3045:
	cmpq	$0, 224(%rsp)
	movq	248(%rsp), %rbx
	movq	%rbx, 240(%rsp)
	je	.L3047
.L2087:
	movq	224(%rsp), %r8
	movq	32(%r8), %rdx
	testq	%rdx, %rdx
	jne	.L1752
	movq	232(%rsp), %rax
	movq	240(%rsp), %rbp
	movq	32(%rax), %r11
	movq	%r11, 32(%rbp)
.L1753:
.L1750:
	movq	224(%rsp), %r13
	movq	232(%rsp), %r10
	movq	240(%rsp), %rbp
	movq	(%r13), %r9
	movq	%r9, 224(%rsp)
	testq	%r9, %r9
	movq	(%r10), %rsi
	movq	%rsi, 232(%rsp)
	movq	(%rbp), %rdi
	movq	%rdi, 240(%rsp)
	jne	.L2087
.L3047:
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	call	poplevel
	movq	248(%rsp), %rsi
	movq	472(%rsp), %rdi
	call	build_function_type
	movq	%rax, %r15
	jmp	.L2088
.L1752:
	movq	232(%rsp), %r13
	movq	32(%r13), %rax
	testq	%rax, %rax
	jne	.L1754
	movq	240(%rsp), %r12
	movq	%rdx, 32(%r12)
	jmp	.L1750
.L1754:
	cmpb	$21, 16(%rdx)
	je	.L3826
.L1755:
	cmpb	$21, 16(%rax)
	je	.L3827
.L1921:
	movq	224(%rsp), %r8
	movq	232(%rsp), %rdx
	movq	32(%r8), %rdi
	movq	32(%rdx), %rsi
	call	common_type
	movq	240(%rsp), %rbx
	movq	%rax, 32(%rbx)
	jmp	.L1750
.L3827:
	movq	224(%rsp), %r9
	movq	32(%r9), %rcx
	cmpq	%rcx, %rax
	je	.L1921
	movq	24(%rax), %rbx
	testq	%rbx, %rbx
	movq	%rbx, 200(%rsp)
	je	.L1921
.L2086:
	movq	200(%rsp), %r10
	movq	%rcx, %rbp
	movq	8(%r10), %rbx
	cmpq	%rcx, %rbx
	je	.L3392
	testq	%rbx, %rbx
	je	.L3392
	testq	%rcx, %rcx
	je	.L3392
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L3392
	movzbl	16(%rcx), %eax
	testb	%al, %al
	je	.L3392
	cmpb	$6, %dl
	je	.L3828
.L1930:
	cmpb	$6, %al
	je	.L3829
.L1931:
	cmpb	$10, %dl
	je	.L3830
.L1932:
	cmpb	$10, 16(%rbp)
	je	.L3831
.L1933:
	cmpq	%rbp, %rbx
	movl	$1, %r15d
	je	.L1929
	movzbl	16(%rbx), %esi
	cmpb	16(%rbp), %sil
	je	.L1935
	xorl	%r15d, %r15d
.L1929:
	testl	%r15d, %r15d
	jne	.L3832
.L1924:
	movq	200(%rsp), %rcx
	movq	(%rcx), %r11
	testq	%r11, %r11
	movq	%r11, 200(%rsp)
	je	.L1921
	movq	224(%rsp), %rax
	movq	32(%rax), %rcx
	jmp	.L2086
.L3832:
	movq	224(%rsp), %rax
	movq	240(%rsp), %r13
	movq	32(%rax), %r12
	movq	%r12, 32(%r13)
.L3496:
	movl	pedantic(%rip), %r15d
	testl	%r15d, %r15d
	je	.L1750
	movl	$.LC10, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L1750
.L1935:
	movzbl	17(%rbx), %r13d
	movzbl	62(%rbx), %ecx
	movl	%r13d, %edx
	shrb	$5, %cl
	shrb	$3, %r13b
	shrb	$4, %dl
	andl	$1, %r13d
	andl	$1, %ecx
	andl	$1, %edx
	addl	%r13d, %r13d
	sall	$2, %ecx
	orl	%r13d, %edx
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	cmpb	$20, %sil
	je	.L3833
.L1937:
	movzbl	17(%rbp), %r8d
	movzbl	62(%rbp), %r12d
	leal	0(,%rcx,8), %edi
	orl	%edx, %edi
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	shrb	$5, %r12b
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	$1, %r8d
	andl	$1, %r12d
	andl	$1, %edx
	addl	%r8d, %r8d
	sall	$2, %r12d
	orl	%r8d, %edx
	orl	%r12d, %edx
	cmpb	$20, %sil
	je	.L3834
.L1938:
	leal	0(,%rcx,8), %r15d
	orl	%r15d, %edx
	xorl	%r15d, %r15d
	cmpl	%edx, %edi
	jne	.L1929
	movq	128(%rbp), %rsi
	cmpq	%rsi, 128(%rbx)
	je	.L3392
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	xorl	%r15d, %r15d
	call	*targetm+264(%rip)
	testl	%eax, %eax
	movl	%eax, 464(%rsp)
	je	.L1929
	movzbl	16(%rbx), %eax
	xorl	%r15d, %r15d
	cmpl	$18, %eax
	je	.L2064
	cmpl	$18, %eax
	ja	.L2081
	cmpl	$13, %eax
	je	.L1942
.L1941:
	cmpl	$2, 464(%rsp)
	jne	.L1929
	cmpl	$1, %r15d
	cmove	464(%rsp), %r15d
	jmp	.L1929
.L1942:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L1943
	call	comptypes
	movl	%eax, %r15d
	jmp	.L1941
.L1943:
	movl	$1, %r15d
	jmp	.L1941
.L2081:
	cmpl	$20, %eax
	je	.L2077
	cmpl	$23, %eax
	jne	.L1941
	movl	$1, 196(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L1946
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 196(%rsp)
	je	.L1941
.L1946:
	movq	24(%rbx), %r13
	movq	24(%rbp), %r12
	testq	%r13, %r13
	je	.L3835
	testq	%r12, %r12
	je	.L3836
	movl	$1, %r15d
	xorl	%ebp, %ebp
.L2061:
	testq	%r13, %r13
	je	.L3837
	testq	%r12, %r12
	je	.L2050
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3838
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L2036
.L3495:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L2050
.L2035:
	movq	(%r13), %r13
	movq	(%r12), %r12
	cmpl	%r15d, %ebp
	cmovg	%ebp, %r15d
	jmp	.L2061
.L2050:
	xorl	%r15d, %r15d
.L2030:
	cmpl	$1, %r15d
	cmove	196(%rsp), %r15d
	jmp	.L1941
.L2036:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %ebp
	jne	.L2035
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3840
.L2040:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L2050
	cmpq	$0, 96(%rax)
	je	.L2051
	testb	$8, 62(%rax)
	je	.L2050
.L2051:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2050
	movq	32(%r13), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2050
	movq	32(%r12), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L2050
.L2057:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2053
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2057
	jmp	.L2050
.L2053:
	testq	%rbx, %rbx
	jne	.L2035
	jmp	.L2050
.L3840:
	cmpq	$0, 96(%rax)
	je	.L2041
	testb	$8, 62(%rax)
	je	.L2040
.L2041:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2040
	movq	32(%r12), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2040
	movq	32(%r13), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L2050
.L2047:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2053
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2047
	jmp	.L2050
.L3838:
	movq	32(%r12), %rdi
	jmp	.L3495
.L3837:
	testq	%r12, %r12
	je	.L2030
	jmp	.L2050
.L3836:
	movq	%r13, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L1941
	movq	136(%rbp), %rax
	testq	%rax, %rax
	je	.L3137
	movq	%rax, %rbp
	movl	$1, %r12d
	xorl	%r15d, %r15d
.L2025:
	testq	%r13, %r13
	je	.L3841
	testq	%rbp, %rbp
	je	.L2014
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3842
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L2000
.L3493:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L2014
.L1999:
	movq	(%r13), %r13
	movq	(%rbp), %rbp
	cmpl	%r12d, %r15d
	cmovg	%r15d, %r12d
	jmp	.L2025
.L2014:
	xorl	%r12d, %r12d
.L1994:
	movl	$2, %r15d
	decl	%r12d
.L3494:
	jne	.L1941
.L3137:
	movl	196(%rsp), %r15d
	jmp	.L1941
.L2000:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L1999
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3844
.L2004:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L2014
	cmpq	$0, 96(%rax)
	je	.L2015
	testb	$8, 62(%rax)
	je	.L2014
.L2015:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2014
	movq	32(%r13), %rcx
	movq	32(%rcx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2014
	movq	32(%rbp), %r8
	movq	24(%r8), %rbx
	testq	%rbx, %rbx
	je	.L2014
.L2021:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2017
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2021
	jmp	.L2014
.L2017:
	testq	%rbx, %rbx
	jne	.L1999
	jmp	.L2014
.L3844:
	cmpq	$0, 96(%rax)
	je	.L2005
	testb	$8, 62(%rax)
	je	.L2004
.L2005:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L2004
	movq	32(%rbp), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2004
	movq	32(%r13), %r11
	movq	24(%r11), %rbx
	testq	%rbx, %rbx
	je	.L2014
.L2011:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L2017
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2011
	jmp	.L2014
.L3842:
	movq	32(%rbp), %rdi
	jmp	.L3493
.L3841:
	testq	%rbp, %rbp
	je	.L1994
	jmp	.L2014
.L3835:
	movq	%r12, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L1941
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L3137
	movq	%rax, %rbp
	movl	$1, %r13d
	xorl	%r15d, %r15d
.L1986:
	testq	%r12, %r12
	je	.L3845
	testq	%rbp, %rbp
	je	.L1975
	movq	32(%r12), %rdi
	testq	%rdi, %rdi
	je	.L3846
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L1961
.L3492:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L1975
.L1960:
	movq	(%r12), %r12
	movq	(%rbp), %rbp
	cmpl	%r13d, %r15d
	cmovg	%r15d, %r13d
	jmp	.L1986
.L1975:
	xorl	%r13d, %r13d
.L1955:
	movl	$2, %r15d
	decl	%r13d
	jmp	.L3494
.L1961:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L1960
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	je	.L3848
.L1965:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L1975
	cmpq	$0, 96(%rax)
	je	.L1976
	testb	$8, 62(%rax)
	je	.L1975
.L1976:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1975
	movq	32(%r12), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1975
	movq	32(%rbp), %r10
	movq	24(%r10), %rbx
	testq	%rbx, %rbx
	je	.L1975
.L1982:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1978
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1982
	jmp	.L1975
.L1978:
	testq	%rbx, %rbx
	jne	.L1960
	jmp	.L1975
.L3848:
	cmpq	$0, 96(%rax)
	je	.L1966
	testb	$8, 62(%rax)
	je	.L1965
.L1966:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1965
	movq	32(%rbp), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1965
	movq	32(%r12), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L1975
.L1972:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1978
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1972
	jmp	.L1975
.L3846:
	movq	32(%rbp), %rdi
	jmp	.L3492
.L3845:
	testq	%rbp, %rbp
	je	.L1955
	jmp	.L1975
.L2077:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmove	%eax, %r15d
	jmp	.L1941
.L2064:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	movl	$1, %r15d
	movq	24(%rbx), %r12
	movq	24(%rbp), %r13
	cmpq	%rsi, %rdi
	je	.L2065
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	je	.L1924
.L2065:
	testq	%r12, %r12
	je	.L1941
	testq	%r13, %r13
	je	.L1941
	cmpq	%r13, %r12
	je	.L1941
	movq	112(%r12), %rcx
	movq	112(%r13), %rsi
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L2068
	movq	104(%r12), %rbp
	cmpb	$25, 16(%rbp)
	je	.L3849
.L2069:
	movl	$1, %r8d
.L2068:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L2070
	movq	104(%r13), %r10
	cmpb	$25, 16(%r10)
	je	.L3850
.L2071:
	movl	$1, %ecx
.L2070:
	testb	%r8b, %r8b
	jne	.L1941
	testb	%cl, %cl
	jne	.L1941
	testb	%dil, %dil
	je	.L3259
	testb	%dl, %dl
.L3391:
	jne	.L1941
.L2076:
	xorl	%r15d, %r15d
	jmp	.L1941
.L3259:
	testb	%dl, %dl
	jne	.L2076
	movq	104(%r12), %rdi
	movq	104(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L2076
	movq	112(%r12), %rdi
	movq	112(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L3391
.L3850:
	cmpb	$25, 16(%rsi)
	jne	.L2071
	jmp	.L2070
.L3849:
	cmpb	$25, 16(%rcx)
	jne	.L2069
	jmp	.L2068
.L3392:
	movl	$1, %r15d
	jmp	.L1929
.L3834:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L1938
.L3833:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L1937
.L3831:
	movzbl	17(%rbp), %esi
	movzwl	60(%rbp), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L1933
.L3830:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L1932
.L3829:
	testb	$2, 62(%rcx)
	je	.L1931
	movq	24(%rcx), %r11
	testq	%r11, %r11
	cmovne	%r11, %rbp
	jmp	.L1931
.L3828:
	testb	$2, 62(%rbx)
	je	.L1930
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L1930
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L1930
.L3826:
	cmpq	%rax, %rdx
	je	.L1755
	movq	24(%rdx), %r15
	testq	%r15, %r15
	movq	%r15, 216(%rsp)
	je	.L1755
.L1920:
	movq	216(%rsp), %rcx
	movq	%rax, %rbp
	movq	8(%rcx), %rbx
	cmpq	%rax, %rbx
	je	.L1762
	testq	%rbx, %rbx
	je	.L1762
	testq	%rax, %rax
	je	.L1762
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L1762
	movzbl	16(%rax), %ecx
	testb	%cl, %cl
	jne	.L1761
.L1762:
	movl	$1, %r15d
.L1763:
	testl	%r15d, %r15d
	jne	.L3851
.L1758:
	movq	216(%rsp), %rdi
	movq	(%rdi), %rdx
	testq	%rdx, %rdx
	movq	%rdx, 216(%rsp)
	jne	.L1920
	jmp	.L1755
.L3851:
	movq	240(%rsp), %r15
	movq	%rax, 32(%r15)
	jmp	.L3496
.L1761:
	cmpb	$6, %dl
	je	.L3852
.L1764:
	cmpb	$6, %cl
	je	.L3853
.L1765:
	cmpb	$10, %dl
	je	.L3854
.L1766:
	cmpb	$10, 16(%rbp)
	je	.L3855
.L1767:
	cmpq	%rbp, %rbx
	movl	$1, %r15d
	je	.L3390
	movzbl	16(%rbx), %edi
	cmpb	16(%rbp), %dil
	je	.L1769
	xorl	%r15d, %r15d
.L3389:
	movq	232(%rsp), %r13
	movq	32(%r13), %rax
	jmp	.L1763
.L1769:
	movzbl	17(%rbx), %esi
	movzbl	62(%rbx), %r10d
	xorl	%ecx, %ecx
	movl	%esi, %edx
	shrb	$5, %r10b
	shrb	$3, %sil
	shrb	$4, %dl
	andl	$1, %esi
	andl	$1, %r10d
	andl	$1, %edx
	addl	%esi, %esi
	sall	$2, %r10d
	orl	%esi, %edx
	orl	%r10d, %edx
	cmpb	$20, %dil
	je	.L3856
.L1771:
	movzbl	17(%rbp), %r11d
	movzbl	62(%rbp), %r8d
	leal	0(,%rcx,8), %esi
	orl	%edx, %esi
	xorl	%ecx, %ecx
	movl	%r11d, %edx
	shrb	$5, %r8b
	shrb	$3, %r11b
	shrb	$4, %dl
	andl	$1, %r11d
	andl	$1, %r8d
	andl	$1, %edx
	addl	%r11d, %r11d
	sall	$2, %r8d
	orl	%r11d, %edx
	orl	%r8d, %edx
	cmpb	$20, %dil
	je	.L3857
.L1772:
	leal	0(,%rcx,8), %edi
	orl	%edi, %edx
	cmpl	%edx, %esi
	je	.L1770
	xorl	%r15d, %r15d
.L3328:
	movq	232(%rsp), %r12
	movq	32(%r12), %rax
	jmp	.L1763
.L1770:
	movq	128(%rbp), %rdx
	cmpq	%rdx, 128(%rbx)
	je	.L3858
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	*targetm+264(%rip)
	testl	%eax, %eax
	movl	%eax, 468(%rsp)
	jne	.L1774
	xorl	%r15d, %r15d
.L3390:
	movq	232(%rsp), %rbp
	movq	32(%rbp), %rax
	jmp	.L1763
.L1774:
	movzbl	16(%rbx), %eax
	xorl	%r15d, %r15d
	cmpl	$18, %eax
	je	.L1898
	cmpl	$18, %eax
	ja	.L1915
	cmpl	$13, %eax
	je	.L1776
.L1775:
	cmpl	$2, 468(%rsp)
	jne	.L3328
	cmpl	$1, %r15d
	je	.L3859
	movq	232(%rsp), %r8
	movq	32(%r8), %rax
	jmp	.L1763
.L3859:
	movl	$2, %r15d
	jmp	.L3389
.L1776:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L1777
	call	comptypes
	movl	%eax, %r15d
	jmp	.L1775
.L1777:
	movl	$1, %r15d
	jmp	.L1775
.L1915:
	cmpl	$20, %eax
	je	.L1911
	cmpl	$23, %eax
	jne	.L1775
	movl	$1, 212(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L1780
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 212(%rsp)
	je	.L1775
.L1780:
	movq	24(%rbx), %r13
	movq	24(%rbp), %r12
	testq	%r13, %r13
	je	.L3860
	testq	%r12, %r12
	je	.L3861
	movl	$1, %r15d
	xorl	%ebp, %ebp
.L1895:
	testq	%r13, %r13
	je	.L3862
	testq	%r12, %r12
	je	.L1884
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3863
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L1870
.L3491:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L1884
.L1869:
	movq	(%r13), %r13
	movq	(%r12), %r12
	cmpl	%r15d, %ebp
	cmovg	%ebp, %r15d
	jmp	.L1895
.L1884:
	xorl	%r15d, %r15d
.L1864:
	cmpl	$1, %r15d
	cmove	212(%rsp), %r15d
	jmp	.L1775
.L1870:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %ebp
	jne	.L1869
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3865
.L1874:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L1884
	cmpq	$0, 96(%rax)
	je	.L1885
	testb	$8, 62(%rax)
	je	.L1884
.L1885:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1884
	movq	32(%r13), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1884
	movq	32(%r12), %r10
	movq	24(%r10), %rbx
	testq	%rbx, %rbx
	je	.L1884
.L1891:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1887
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1891
	jmp	.L1884
.L1887:
	testq	%rbx, %rbx
	jne	.L1869
	jmp	.L1884
.L3865:
	cmpq	$0, 96(%rax)
	je	.L1875
	testb	$8, 62(%rax)
	je	.L1874
.L1875:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1874
	movq	32(%r12), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1874
	movq	32(%r13), %rcx
	movq	24(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L1884
.L1881:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1887
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1881
	jmp	.L1884
.L3863:
	movq	32(%r12), %rdi
	jmp	.L3491
.L3862:
	testq	%r12, %r12
	je	.L1864
	jmp	.L1884
.L3861:
	movq	%r13, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L1775
	movq	136(%rbp), %rax
	testq	%rax, %rax
	je	.L3133
	movq	%rax, %rbp
	movl	$1, %r12d
	xorl	%r15d, %r15d
.L1859:
	testq	%r13, %r13
	je	.L3866
	testq	%rbp, %rbp
	je	.L1848
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3867
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L1834
.L3489:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L1848
.L1833:
	movq	(%r13), %r13
	movq	(%rbp), %rbp
	cmpl	%r12d, %r15d
	cmovg	%r15d, %r12d
	jmp	.L1859
.L1848:
	xorl	%r12d, %r12d
.L1828:
	movl	$2, %r15d
	decl	%r12d
.L3490:
	jne	.L1775
.L3133:
	movl	212(%rsp), %r15d
	jmp	.L1775
.L1834:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L1833
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3869
.L1838:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L1848
	cmpq	$0, 96(%rax)
	je	.L1849
	testb	$8, 62(%rax)
	je	.L1848
.L1849:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1848
	movq	32(%r13), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1848
	movq	32(%rbp), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L1848
.L1855:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1851
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1855
	jmp	.L1848
.L1851:
	testq	%rbx, %rbx
	jne	.L1833
	jmp	.L1848
.L3869:
	cmpq	$0, 96(%rax)
	je	.L1839
	testb	$8, 62(%rax)
	je	.L1838
.L1839:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1838
	movq	32(%rbp), %r8
	movq	32(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1838
	movq	32(%r13), %r11
	movq	24(%r11), %rbx
	testq	%rbx, %rbx
	je	.L1848
.L1845:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1851
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1845
	jmp	.L1848
.L3867:
	movq	32(%rbp), %rdi
	jmp	.L3489
.L3866:
	testq	%rbp, %rbp
	je	.L1828
	jmp	.L1848
.L3860:
	movq	%r12, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L1775
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L3133
	movq	%rax, %rbp
	movl	$1, %r13d
	xorl	%r15d, %r15d
.L1820:
	testq	%r12, %r12
	je	.L3870
	testq	%rbp, %rbp
	je	.L1809
	movq	32(%r12), %rdi
	testq	%rdi, %rdi
	je	.L3871
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L1795
.L3488:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L1809
.L1794:
	movq	(%r12), %r12
	movq	(%rbp), %rbp
	cmpl	%r13d, %r15d
	cmovg	%r15d, %r13d
	jmp	.L1820
.L1809:
	xorl	%r13d, %r13d
.L1789:
	movl	$2, %r15d
	decl	%r13d
	jmp	.L3490
.L1795:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L1794
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	je	.L3873
.L1799:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L1809
	cmpq	$0, 96(%rax)
	je	.L1810
	testb	$8, 62(%rax)
	je	.L1809
.L1810:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1809
	movq	32(%r12), %r10
	movq	32(%r10), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1809
	movq	32(%rbp), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L1809
.L1816:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1812
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1816
	jmp	.L1809
.L1812:
	testq	%rbx, %rbx
	jne	.L1794
	jmp	.L1809
.L3873:
	cmpq	$0, 96(%rax)
	je	.L1800
	testb	$8, 62(%rax)
	je	.L1799
.L1800:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1799
	movq	32(%rbp), %rcx
	movq	32(%rcx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1799
	movq	32(%r12), %r9
	movq	24(%r9), %rbx
	testq	%rbx, %rbx
	je	.L1809
.L1806:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1812
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1806
	jmp	.L1809
.L3871:
	movq	32(%rbp), %rdi
	jmp	.L3488
.L3870:
	testq	%rbp, %rbp
	je	.L1789
	jmp	.L1809
.L1911:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmove	%eax, %r15d
	jmp	.L1775
.L1898:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	movl	$1, %r15d
	movq	24(%rbx), %r12
	movq	24(%rbp), %r13
	cmpq	%rsi, %rdi
	je	.L1899
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	je	.L3327
.L1899:
	testq	%r12, %r12
	je	.L1775
	testq	%r13, %r13
	je	.L1775
	cmpq	%r13, %r12
	je	.L1775
	movq	112(%r12), %rcx
	movq	112(%r13), %rsi
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L1902
	movq	104(%r12), %rbp
	cmpb	$25, 16(%rbp)
	je	.L3874
.L1903:
	movl	$1, %r8d
.L1902:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L1904
	movq	104(%r13), %r11
	cmpb	$25, 16(%r11)
	je	.L3875
.L1905:
	movl	$1, %ecx
.L1904:
	testb	%r8b, %r8b
	jne	.L1775
	testb	%cl, %cl
	jne	.L1775
	testb	%dil, %dil
	je	.L3249
	testb	%dl, %dl
.L3388:
	jne	.L1775
.L1910:
	xorl	%r15d, %r15d
	jmp	.L1775
.L3249:
	testb	%dl, %dl
	jne	.L1910
	movq	104(%r12), %rdi
	movq	104(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1910
	movq	112(%r12), %rdi
	movq	112(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L3388
.L3875:
	cmpb	$25, 16(%rsi)
	jne	.L1905
	jmp	.L1904
.L3874:
	cmpb	$25, 16(%rcx)
	jne	.L1903
	jmp	.L1902
.L3327:
	movq	232(%rsp), %rsi
	movq	32(%rsi), %rax
	jmp	.L1758
.L3858:
	movq	232(%rsp), %rbx
	movl	$1, %r15d
	movq	32(%rbx), %rax
	jmp	.L1763
.L3857:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L1772
.L3856:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L1771
.L3855:
	movzbl	17(%rbp), %esi
	movzwl	60(%rbp), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L1767
.L3854:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L1766
.L3853:
	testb	$2, 62(%rax)
	je	.L1765
	movq	24(%rax), %r9
	testq	%r9, %r9
	cmovne	%r9, %rbp
	jmp	.L1765
.L3852:
	testb	$2, 62(%rbx)
	je	.L1764
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L1764
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L1764
.L3825:
	movq	472(%rsp), %rdi
	movq	24(%rbx), %rsi
	jmp	.L3487
.L3824:
	cmpq	$0, 224(%rsp)
	jne	.L1741
	jmp	.L3400
.L3823:
	testq	%rdx, %rdx
	jne	.L1739
	jmp	.L2088
.L3306:
	movq	%r15, %rdi
.L1700:
	cmpl	$8, %r12d
	movq	%rbx, %rsi
	je	.L3876
.L1702:
	call	common_type
	cmpl	$8, %ebp
	movq	%rax, %rdi
	je	.L3877
.L1703:
	cmpl	$8, %r12d
	je	.L3878
.L1705:
	call	build_complex_type
	jmp	.L3402
.L3878:
	cmpq	%rdi, 8(%rbx)
	jne	.L1705
	jmp	.L3400
.L3877:
	cmpq	%rax, 8(%r15)
	jne	.L1703
	jmp	.L2088
.L3876:
	movq	8(%rbx), %rsi
	jmp	.L1702
.L3238:
	movq	8(%r15), %rdi
	jmp	.L1700
.L3815:
	movzwl	60(%r8), %edi
	movl	$1, %esi
	andl	$511, %edi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L1696
.L3814:
	movzwl	60(%r15), %edi
	movl	$1, %esi
	andl	$511, %edi
	call	type_for_size
	movq	%rax, %r15
	jmp	.L1695
.L3813:
	movq	%rbx, %r15
	jmp	.L1692
.L3812:
	movq	96(%rsp), %r11
	movq	168(%rsp), %r8
	movq	8(%r11), %rcx
	movq	8(%r8), %r15
	movq	128(%rcx), %rbx
	movq	128(%r15), %rbp
	cmpq	%rbp, %rbx
	je	.L3387
	testq	%rbx, %rbx
	je	.L3387
	testq	%rbp, %rbp
	je	.L3387
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L3387
	movzbl	16(%rbp), %eax
	testb	%al, %al
	je	.L3387
	cmpb	$6, %dl
	je	.L3879
.L1535:
	cmpb	$6, %al
	je	.L3880
.L1536:
	cmpb	$10, %dl
	je	.L3881
.L1537:
	cmpb	$10, 16(%rbp)
	je	.L3882
.L1538:
	cmpq	%rbp, %rbx
	movl	$1, %r15d
	je	.L1534
	movzbl	16(%rbx), %esi
	cmpb	16(%rbp), %sil
	je	.L1540
	xorl	%r15d, %r15d
.L1534:
	cmpl	$2, %r15d
	je	.L3883
.L1690:
	movl	%r15d, %eax
	jmp	.L1531
.L3883:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	je	.L1690
	movl	$.LC1, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L1690
.L1540:
	movzbl	17(%rbx), %r13d
	movzbl	62(%rbx), %r12d
	xorl	%ecx, %ecx
	movl	%r13d, %edx
	shrb	$5, %r12b
	shrb	$3, %r13b
	shrb	$4, %dl
	andl	$1, %r13d
	andl	$1, %r12d
	andl	$1, %edx
	addl	%r13d, %r13d
	sall	$2, %r12d
	orl	%r13d, %edx
	orl	%r12d, %edx
	cmpb	$20, %sil
	je	.L3884
.L1542:
	movzbl	17(%rbp), %r15d
	movzbl	62(%rbp), %r10d
	leal	0(,%rcx,8), %edi
	orl	%edx, %edi
	xorl	%ecx, %ecx
	movl	%r15d, %edx
	shrb	$5, %r10b
	shrb	$3, %r15b
	shrb	$4, %dl
	andl	$1, %r15d
	andl	$1, %r10d
	andl	$1, %edx
	addl	%r15d, %r15d
	sall	$2, %r10d
	orl	%r15d, %edx
	orl	%r10d, %edx
	cmpb	$20, %sil
	je	.L3885
.L1543:
	leal	0(,%rcx,8), %esi
	xorl	%r15d, %r15d
	orl	%esi, %edx
	cmpl	%edx, %edi
	jne	.L1534
	movq	128(%rbp), %rdx
	cmpq	%rdx, 128(%rbx)
	je	.L3387
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	xorl	%r15d, %r15d
	call	*targetm+264(%rip)
	testl	%eax, %eax
	movl	%eax, 492(%rsp)
	je	.L1534
	movzbl	16(%rbx), %eax
	xorl	%r15d, %r15d
	cmpl	$18, %eax
	je	.L1669
	cmpl	$18, %eax
	ja	.L1686
	cmpl	$13, %eax
	je	.L1547
.L1546:
	cmpl	$2, 492(%rsp)
	jne	.L1534
	cmpl	$1, %r15d
	cmove	492(%rsp), %r15d
	jmp	.L1534
.L1547:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L1548
	call	comptypes
	movl	%eax, %r15d
	jmp	.L1546
.L1548:
	movl	$1, %r15d
	jmp	.L1546
.L1686:
	cmpl	$20, %eax
	je	.L1682
	cmpl	$23, %eax
	jne	.L1546
	movl	$1, 256(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L1551
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 256(%rsp)
	je	.L1546
.L1551:
	movq	24(%rbx), %r13
	movq	24(%rbp), %r12
	testq	%r13, %r13
	je	.L3886
	testq	%r12, %r12
	je	.L3887
	movl	$1, %r15d
	xorl	%ebp, %ebp
.L1666:
	testq	%r13, %r13
	je	.L3888
	testq	%r12, %r12
	je	.L1655
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3889
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L1641
.L3486:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L1655
.L1640:
	movq	(%r13), %r13
	movq	(%r12), %r12
	cmpl	%r15d, %ebp
	cmovg	%ebp, %r15d
	jmp	.L1666
.L1655:
	xorl	%r15d, %r15d
.L1635:
	cmpl	$1, %r15d
	cmove	256(%rsp), %r15d
	jmp	.L1546
.L1641:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %ebp
	jne	.L1640
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3891
.L1645:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L1655
	cmpq	$0, 96(%rax)
	je	.L1656
	testb	$8, 62(%rax)
	je	.L1655
.L1656:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1655
	movq	32(%r13), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1655
	movq	32(%r12), %r8
	movq	24(%r8), %rbx
	testq	%rbx, %rbx
	je	.L1655
.L1662:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1658
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1662
	jmp	.L1655
.L1658:
	testq	%rbx, %rbx
	jne	.L1640
	jmp	.L1655
.L3891:
	cmpq	$0, 96(%rax)
	je	.L1646
	testb	$8, 62(%rax)
	je	.L1645
.L1646:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1645
	movq	32(%r12), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1645
	movq	32(%r13), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L1655
.L1652:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1658
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1652
	jmp	.L1655
.L3889:
	movq	32(%r12), %rdi
	jmp	.L3486
.L3888:
	testq	%r12, %r12
	je	.L1635
	jmp	.L1655
.L3887:
	movq	%r13, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L1546
	movq	136(%rbp), %rax
	testq	%rax, %rax
	je	.L3129
	movq	%rax, %rbp
	movl	$1, %r12d
	xorl	%r15d, %r15d
.L1630:
	testq	%r13, %r13
	je	.L3892
	testq	%rbp, %rbp
	je	.L1619
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3893
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L1605
.L3484:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L1619
.L1604:
	movq	(%r13), %r13
	movq	(%rbp), %rbp
	cmpl	%r12d, %r15d
	cmovg	%r15d, %r12d
	jmp	.L1630
.L1619:
	xorl	%r12d, %r12d
.L1599:
	movl	$2, %r15d
	decl	%r12d
.L3485:
	jne	.L1546
.L3129:
	movl	256(%rsp), %r15d
	jmp	.L1546
.L1605:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L1604
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3895
.L1609:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L1619
	cmpq	$0, 96(%rax)
	je	.L1620
	testb	$8, 62(%rax)
	je	.L1619
.L1620:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1619
	movq	32(%r13), %r10
	movq	32(%r10), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1619
	movq	32(%rbp), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L1619
.L1626:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1622
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1626
	jmp	.L1619
.L1622:
	testq	%rbx, %rbx
	jne	.L1604
	jmp	.L1619
.L3895:
	cmpq	$0, 96(%rax)
	je	.L1610
	testb	$8, 62(%rax)
	je	.L1609
.L1610:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1609
	movq	32(%rbp), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1609
	movq	32(%r13), %r9
	movq	24(%r9), %rbx
	testq	%rbx, %rbx
	je	.L1619
.L1616:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1622
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1616
	jmp	.L1619
.L3893:
	movq	32(%rbp), %rdi
	jmp	.L3484
.L3892:
	testq	%rbp, %rbp
	je	.L1599
	jmp	.L1619
.L3886:
	movq	%r12, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L1546
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L3129
	movq	%rax, %rbp
	movl	$1, %r13d
	xorl	%r15d, %r15d
.L1591:
	testq	%r12, %r12
	je	.L3896
	testq	%rbp, %rbp
	je	.L1580
	movq	32(%r12), %rdi
	testq	%rdi, %rdi
	je	.L3897
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L1566
.L3483:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L1580
.L1565:
	movq	(%r12), %r12
	movq	(%rbp), %rbp
	cmpl	%r13d, %r15d
	cmovg	%r15d, %r13d
	jmp	.L1591
.L1580:
	xorl	%r13d, %r13d
.L1560:
	movl	$2, %r15d
	decl	%r13d
	jmp	.L3485
.L1566:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L1565
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	je	.L3899
.L1570:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L1580
	cmpq	$0, 96(%rax)
	je	.L1581
	testb	$8, 62(%rax)
	je	.L1580
.L1581:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1580
	movq	32(%r12), %r8
	movq	32(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1580
	movq	32(%rbp), %rcx
	movq	24(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L1580
.L1587:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1583
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1587
	jmp	.L1580
.L1583:
	testq	%rbx, %rbx
	jne	.L1565
	jmp	.L1580
.L3899:
	cmpq	$0, 96(%rax)
	je	.L1571
	testb	$8, 62(%rax)
	je	.L1570
.L1571:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L1570
	movq	32(%rbp), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1570
	movq	32(%r12), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L1580
.L1577:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L1583
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1577
	jmp	.L1580
.L3897:
	movq	32(%rbp), %rdi
	jmp	.L3483
.L3896:
	testq	%rbp, %rbp
	je	.L1560
	jmp	.L1580
.L1682:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmove	%eax, %r15d
	jmp	.L1546
.L1669:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	movl	$1, %r15d
	movq	24(%rbx), %r12
	movq	24(%rbp), %r13
	cmpq	%rsi, %rdi
	je	.L1670
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	je	.L1534
.L1670:
	testq	%r12, %r12
	je	.L1546
	testq	%r13, %r13
	je	.L1546
	cmpq	%r13, %r12
	je	.L1546
	movq	112(%r12), %rcx
	movq	112(%r13), %rsi
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L1673
	movq	104(%r12), %rbp
	cmpb	$25, 16(%rbp)
	je	.L3900
.L1674:
	movl	$1, %r8d
.L1673:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L1675
	movq	104(%r13), %r11
	cmpb	$25, 16(%r11)
	je	.L3901
.L1676:
	movl	$1, %ecx
.L1675:
	testb	%r8b, %r8b
	jne	.L1546
	testb	%cl, %cl
	jne	.L1546
	testb	%dil, %dil
	je	.L3237
	testb	%dl, %dl
.L3386:
	jne	.L1546
.L1681:
	xorl	%r15d, %r15d
	jmp	.L1546
.L3237:
	testb	%dl, %dl
	jne	.L1681
	movq	104(%r12), %rdi
	movq	104(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L1681
	movq	112(%r12), %rdi
	movq	112(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L3386
.L3901:
	cmpb	$25, 16(%rsi)
	jne	.L1676
	jmp	.L1675
.L3900:
	cmpb	$25, 16(%rcx)
	jne	.L1674
	jmp	.L1673
.L3387:
	movl	$1, %r15d
	jmp	.L1534
.L3885:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L1543
.L3884:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L1542
.L3882:
	movzbl	17(%rbp), %esi
	movzwl	60(%rbp), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L1538
.L3881:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L1537
.L3880:
	testb	$2, 62(%rbp)
	je	.L1536
	movq	24(%rbp), %r9
	testq	%r9, %r9
	cmovne	%r9, %rbp
	jmp	.L1536
.L3879:
	testb	$2, 62(%rbx)
	je	.L1535
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L1535
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L1535
	.p2align 6,,7
.L367:
	movl	warn_float_equal(%rip), %edi
	testl	%edi, %edi
	je	.L368
	cmpl	$7, 588(%rsp)
	je	.L369
	cmpl	$7, 584(%rsp)
	je	.L369
.L368:
	movl	588(%rsp), %eax
	movq	integer_types+40(%rip), %r12
	subl	$6, %eax
	movq	%r12, (%rsp)
	cmpl	$2, %eax
	ja	.L370
	movl	584(%rsp), %eax
	subl	$6, %eax
	cmpl	$2, %eax
	jbe	.L3405
.L370:
	cmpl	$13, 588(%rsp)
	je	.L3902
.L945:
	cmpl	$13, 584(%rsp)
	jne	.L2099
	movq	8(%rsp), %rsi
	cmpb	$25, 16(%rsi)
	jne	.L2099
	movq	%rsi, %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L2099
	movq	168(%rsp), %r15
	jmp	.L136
	.p2align 6,,7
.L3902:
	cmpl	$13, 584(%rsp)
	je	.L3903
	cmpb	$25, 16(%r14)
	jne	.L945
	movq	%r14, %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L945
	movq	96(%rsp), %r15
	jmp	.L136
.L3903:
	movq	96(%rsp), %r8
	movq	168(%rsp), %r10
	movl	$1, %edx
	movq	96(%rsp), %rdi
	movq	168(%rsp), %rsi
	movq	8(%r8), %rax
	movq	%rax, 568(%rsp)
	movq	8(%r10), %r9
	movq	%r9, 560(%rsp)
	call	maybe_objc_comptypes
	testl	%eax, %eax
	js	.L3904
.L375:
	testl	%eax, %eax
	je	.L373
	movq	96(%rsp), %r15
	movq	168(%rsp), %rbx
	cmpq	%rbx, %r15
	je	.L934
	movq	global_trees(%rip), %rax
	cmpq	%rax, %r15
	je	.L3905
	cmpq	%rax, 168(%rsp)
	je	.L934
	movq	%r15, %rdi
	movq	168(%rsp), %rsi
	call	*targetm+248(%rip)
	movq	%rax, 544(%rsp)
	cmpb	$10, 16(%r15)
	je	.L3906
.L539:
	movq	168(%rsp), %rcx
	cmpb	$10, 16(%rcx)
	je	.L3907
.L540:
	movzbl	16(%r15), %ebp
	movzbl	16(%rbx), %r12d
	cmpl	$8, %ebp
	je	.L3174
	cmpl	$8, %r12d
	je	.L3304
	leal	-6(%rbp), %eax
	cmpl	$17, %eax
	ja	.L932
	mov	%eax, %edi
	jmp	*.L933(,%rdi,8)
	.section	.rodata
	.align 8
	.align 4
.L933:
	.quad	.L553
	.quad	.L553
	.quad	.L932
	.quad	.L932
	.quad	.L932
	.quad	.L932
	.quad	.L932
	.quad	.L570
	.quad	.L932
	.quad	.L932
	.quad	.L932
	.quad	.L932
	.quad	.L575
	.quad	.L932
	.quad	.L932
	.quad	.L932
	.quad	.L932
	.quad	.L582
	.text
.L553:
	cmpl	$7, %ebp
	je	.L3909
	cmpl	$7, %r12d
	je	.L3175
.L555:
	movzwl	60(%r15), %edx
	movzwl	60(%rbx), %eax
	andl	$511, %edx
	andl	$511, %eax
	cmpl	%eax, %edx
	jg	.L932
	cmpl	%edx, %eax
	jg	.L3465
	movq	128(%r15), %rdx
	movq	integer_types+64(%rip), %rcx
	cmpq	%rcx, %rdx
	je	.L564
	movq	128(%rbx), %rax
	cmpq	%rcx, %rax
	je	.L564
	movq	integer_types+56(%rip), %rdi
	cmpq	%rdi, %rdx
	je	.L562
	cmpq	%rdi, %rax
	je	.L562
	movq	global_trees+208(%rip), %rdi
	cmpq	%rdi, %rdx
	je	.L3365
	cmpq	%rdi, %rax
	je	.L3365
	testb	$32, 17(%r15)
	jne	.L932
.L3465:
	movq	%rbx, %rdi
.L3365:
	movq	544(%rsp), %rsi
	call	build_type_attribute_variant
	movq	%rax, %r15
.L934:
	testq	%r15, %r15
	jne	.L136
	movq	global_trees+224(%rip), %r15
	jmp	.L136
.L932:
	movq	%r15, %rdi
	jmp	.L3365
.L562:
	testb	$32, 17(%r15)
	jne	.L564
	testb	$32, 17(%rbx)
	je	.L3365
.L564:
	movq	%rcx, %rdi
	jmp	.L3365
.L3175:
	cmpl	$7, %ebp
	jne	.L3465
	jmp	.L555
.L3909:
	cmpl	$7, %r12d
	je	.L3175
	jmp	.L932
.L570:
	movq	8(%r15), %rbp
	movq	8(%rbx), %rbx
	movq	128(%rbp), %rdi
	movq	128(%rbx), %rsi
	call	common_type
	xorl	%ecx, %ecx
	movzbl	62(%rbp), %r15d
	movzbl	17(%rbp), %r10d
	movq	%rax, %rdi
	shrb	$5, %r15b
	movl	%r10d, %edx
	andl	$1, %r15d
	shrb	$3, %r10b
	shrb	$4, %dl
	andl	$1, %r10d
	sall	$2, %r15d
	andl	$1, %edx
	addl	%r10d, %r10d
	orl	%r10d, %edx
	orl	%r15d, %edx
	cmpb	$20, 16(%rbp)
	je	.L3910
.L573:
	movzbl	17(%rbx), %r12d
	movzbl	62(%rbx), %r13d
	leal	0(,%rcx,8), %esi
	orl	%edx, %esi
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	shrb	$5, %r13b
	shrb	$3, %r12b
	shrb	$4, %dl
	andl	$1, %r12d
	andl	$1, %r13d
	andl	$1, %edx
	addl	%r12d, %r12d
	sall	$2, %r13d
	orl	%r12d, %edx
	orl	%r13d, %edx
	cmpb	$20, 16(%rbx)
	je	.L3911
.L574:
	leal	0(,%rcx,8), %r8d
	orl	%r8d, %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movq	%rax, %rdi
	call	build_pointer_type
.L3467:
	movq	%rax, %rdi
	jmp	.L3365
.L3911:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L574
.L3910:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L573
.L575:
	movq	8(%r15), %rdi
	movq	8(%rbx), %rsi
	call	common_type
	cmpq	8(%r15), %rax
	movq	%rax, %rdi
	je	.L3912
.L576:
	cmpq	8(%rbx), %rdi
	je	.L3913
.L577:
	cmpq	$0, 24(%r15)
	cmove	%rbx, %r15
	movq	24(%r15), %rsi
	call	build_array_type
	jmp	.L3467
.L3913:
	cmpq	$0, 24(%rbx)
	je	.L577
	jmp	.L3465
.L3912:
	cmpq	$0, 24(%r15)
	je	.L576
	jmp	.L932
.L582:
	movq	8(%r15), %rdi
	movq	8(%rbx), %rsi
	call	common_type
	movq	%rax, 536(%rsp)
	movq	24(%r15), %rdx
	movq	%rdx, 352(%rsp)
	movq	24(%rbx), %r8
	movq	%r8, 360(%rsp)
	cmpq	8(%r15), %rax
	je	.L3914
.L583:
	movq	536(%rsp), %rsi
	cmpq	8(%rbx), %rsi
	je	.L3915
	cmpq	$0, 352(%rsp)
	je	.L3916
.L585:
	cmpq	$0, 360(%rsp)
	jne	.L586
	movq	536(%rsp), %rdi
	movq	352(%rsp), %rsi
.L3522:
	call	build_function_type
	jmp	.L3467
.L586:
	xorl	%edi, %edi
	call	pushlevel
	movl	$1, %edi
	call	declare_parm_level
	movq	352(%rsp), %rdi
	call	list_length
	movq	$0, 376(%rsp)
	testl	%eax, %eax
	jle	.L2997
	movl	%eax, %ebx
.L591:
	movq	376(%rsp), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	call	tree_cons
	decl	%ebx
	movq	%rax, 376(%rsp)
	jne	.L591
.L2997:
	cmpq	$0, 352(%rsp)
	movq	376(%rsp), %rbx
	movq	%rbx, 368(%rsp)
	je	.L2999
.L931:
	movq	352(%rsp), %r11
	movq	32(%r11), %rdx
	testq	%rdx, %rdx
	jne	.L596
	movq	360(%rsp), %rax
	movq	368(%rsp), %rbp
	movq	32(%rax), %r9
	movq	%r9, 32(%rbp)
.L597:
.L594:
	movq	352(%rsp), %r13
	movq	360(%rsp), %r10
	movq	368(%rsp), %rbp
	movq	(%r13), %rdi
	movq	%rdi, 352(%rsp)
	testq	%rdi, %rdi
	movq	(%r10), %rsi
	movq	%rsi, 360(%rsp)
	movq	(%rbp), %rbx
	movq	%rbx, 368(%rsp)
	jne	.L931
.L2999:
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	call	poplevel
	movq	376(%rsp), %rsi
	movq	536(%rsp), %rdi
	call	build_function_type
	movq	%rax, %r15
	jmp	.L932
.L596:
	movq	360(%rsp), %rcx
	movq	32(%rcx), %rax
	testq	%rax, %rax
	jne	.L598
	movq	368(%rsp), %rdi
	movq	%rdx, 32(%rdi)
	jmp	.L594
.L598:
	cmpb	$21, 16(%rdx)
	je	.L3917
.L599:
	cmpb	$21, 16(%rax)
	je	.L3918
.L765:
	movq	352(%rsp), %rdx
	movq	360(%rsp), %r9
	movq	32(%rdx), %rdi
	movq	32(%r9), %rsi
	call	common_type
	movq	368(%rsp), %rcx
	movq	%rax, 32(%rcx)
	jmp	.L594
.L3918:
	movq	352(%rsp), %rbx
	movq	32(%rbx), %rcx
	cmpq	%rcx, %rax
	je	.L765
	movq	24(%rax), %r10
	testq	%r10, %r10
	movq	%r10, 328(%rsp)
	je	.L765
.L930:
	movq	328(%rsp), %r8
	movq	%rcx, %rbp
	movq	8(%r8), %rbx
	cmpq	%rcx, %rbx
	je	.L3362
	testq	%rbx, %rbx
	je	.L3362
	testq	%rcx, %rcx
	je	.L3362
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L3362
	movzbl	16(%rcx), %eax
	testb	%al, %al
	je	.L3362
	cmpb	$6, %dl
	je	.L3919
.L774:
	cmpb	$6, %al
	je	.L3920
.L775:
	cmpb	$10, %dl
	je	.L3921
.L776:
	cmpb	$10, 16(%rbp)
	je	.L3922
.L777:
	cmpq	%rbp, %rbx
	movl	$1, %r15d
	je	.L773
	movzbl	16(%rbx), %esi
	cmpb	16(%rbp), %sil
	je	.L779
	xorl	%r15d, %r15d
.L773:
	testl	%r15d, %r15d
	jne	.L3923
.L768:
	movq	328(%rsp), %r11
	movq	(%r11), %r8
	testq	%r8, %r8
	movq	%r8, 328(%rsp)
	je	.L765
	movq	352(%rsp), %rax
	movq	32(%rax), %rcx
	jmp	.L930
.L3923:
	movq	352(%rsp), %rax
	movq	368(%rsp), %r13
	movq	32(%rax), %r12
	movq	%r12, 32(%r13)
.L3459:
	movl	pedantic(%rip), %r15d
	testl	%r15d, %r15d
	je	.L594
	movl	$.LC10, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L594
.L779:
	movzbl	17(%rbx), %r13d
	movzbl	62(%rbx), %ecx
	movl	%r13d, %edx
	shrb	$5, %cl
	shrb	$3, %r13b
	shrb	$4, %dl
	andl	$1, %r13d
	andl	$1, %ecx
	andl	$1, %edx
	addl	%r13d, %r13d
	sall	$2, %ecx
	orl	%r13d, %edx
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	cmpb	$20, %sil
	je	.L3924
.L781:
	movzbl	17(%rbp), %r9d
	movzbl	62(%rbp), %r12d
	leal	0(,%rcx,8), %edi
	orl	%edx, %edi
	xorl	%ecx, %ecx
	movl	%r9d, %edx
	shrb	$5, %r12b
	shrb	$3, %r9b
	shrb	$4, %dl
	andl	$1, %r9d
	andl	$1, %r12d
	andl	$1, %edx
	addl	%r9d, %r9d
	sall	$2, %r12d
	orl	%r9d, %edx
	orl	%r12d, %edx
	cmpb	$20, %sil
	je	.L3925
.L782:
	leal	0(,%rcx,8), %r15d
	orl	%r15d, %edx
	xorl	%r15d, %r15d
	cmpl	%edx, %edi
	jne	.L773
	movq	128(%rbp), %rdi
	cmpq	%rdi, 128(%rbx)
	je	.L3362
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	xorl	%r15d, %r15d
	call	*targetm+264(%rip)
	testl	%eax, %eax
	movl	%eax, 528(%rsp)
	je	.L773
	movzbl	16(%rbx), %eax
	xorl	%r15d, %r15d
	cmpl	$18, %eax
	je	.L908
	cmpl	$18, %eax
	ja	.L925
	cmpl	$13, %eax
	je	.L786
.L785:
	cmpl	$2, 528(%rsp)
	jne	.L773
	cmpl	$1, %r15d
	cmove	528(%rsp), %r15d
	jmp	.L773
.L786:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L787
	call	comptypes
	movl	%eax, %r15d
	jmp	.L785
.L787:
	movl	$1, %r15d
	jmp	.L785
.L925:
	cmpl	$20, %eax
	je	.L921
	cmpl	$23, %eax
	jne	.L785
	movl	$1, 324(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L790
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 324(%rsp)
	je	.L785
.L790:
	movq	24(%rbx), %r13
	movq	24(%rbp), %r12
	testq	%r13, %r13
	je	.L3926
	testq	%r12, %r12
	je	.L3927
	movl	$1, %r15d
	xorl	%ebp, %ebp
.L905:
	testq	%r13, %r13
	je	.L3928
	testq	%r12, %r12
	je	.L894
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3929
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L880
.L3458:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L894
.L879:
	movq	(%r13), %r13
	movq	(%r12), %r12
	cmpl	%r15d, %ebp
	cmovg	%ebp, %r15d
	jmp	.L905
.L894:
	xorl	%r15d, %r15d
.L874:
	cmpl	$1, %r15d
	cmove	324(%rsp), %r15d
	jmp	.L785
.L880:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %ebp
	jne	.L879
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3931
.L884:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L894
	cmpq	$0, 96(%rax)
	je	.L895
	testb	$8, 62(%rax)
	je	.L894
.L895:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L894
	movq	32(%r13), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L894
	movq	32(%r12), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L894
.L901:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L897
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L901
	jmp	.L894
.L897:
	testq	%rbx, %rbx
	jne	.L879
	jmp	.L894
.L3931:
	cmpq	$0, 96(%rax)
	je	.L885
	testb	$8, 62(%rax)
	je	.L884
.L885:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L884
	movq	32(%r12), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L884
	movq	32(%r13), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L894
.L891:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L897
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L891
	jmp	.L894
.L3929:
	movq	32(%r12), %rdi
	jmp	.L3458
.L3928:
	testq	%r12, %r12
	je	.L874
	jmp	.L894
.L3927:
	movq	%r13, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L785
	movq	136(%rbp), %rax
	testq	%rax, %rax
	je	.L3113
	movq	%rax, %rbp
	movl	$1, %r12d
	xorl	%r15d, %r15d
.L869:
	testq	%r13, %r13
	je	.L3932
	testq	%rbp, %rbp
	je	.L858
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3933
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L844
.L3456:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L858
.L843:
	movq	(%r13), %r13
	movq	(%rbp), %rbp
	cmpl	%r12d, %r15d
	cmovg	%r15d, %r12d
	jmp	.L869
.L858:
	xorl	%r12d, %r12d
.L838:
	movl	$2, %r15d
	decl	%r12d
.L3457:
	jne	.L785
.L3113:
	movl	324(%rsp), %r15d
	jmp	.L785
.L844:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L843
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3935
.L848:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L858
	cmpq	$0, 96(%rax)
	je	.L859
	testb	$8, 62(%rax)
	je	.L858
.L859:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L858
	movq	32(%r13), %rcx
	movq	32(%rcx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L858
	movq	32(%rbp), %r9
	movq	24(%r9), %rbx
	testq	%rbx, %rbx
	je	.L858
.L865:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L861
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L865
	jmp	.L858
.L861:
	testq	%rbx, %rbx
	jne	.L843
	jmp	.L858
.L3935:
	cmpq	$0, 96(%rax)
	je	.L849
	testb	$8, 62(%rax)
	je	.L848
.L849:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L848
	movq	32(%rbp), %r8
	movq	32(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L848
	movq	32(%r13), %r11
	movq	24(%r11), %rbx
	testq	%rbx, %rbx
	je	.L858
.L855:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L861
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L855
	jmp	.L858
.L3933:
	movq	32(%rbp), %rdi
	jmp	.L3456
.L3932:
	testq	%rbp, %rbp
	je	.L838
	jmp	.L858
.L3926:
	movq	%r12, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L785
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L3113
	movq	%rax, %rbp
	movl	$1, %r13d
	xorl	%r15d, %r15d
.L830:
	testq	%r12, %r12
	je	.L3936
	testq	%rbp, %rbp
	je	.L819
	movq	32(%r12), %rdi
	testq	%rdi, %rdi
	je	.L3937
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L805
.L3455:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L819
.L804:
	movq	(%r12), %r12
	movq	(%rbp), %rbp
	cmpl	%r13d, %r15d
	cmovg	%r15d, %r13d
	jmp	.L830
.L819:
	xorl	%r13d, %r13d
.L799:
	movl	$2, %r15d
	decl	%r13d
	jmp	.L3457
.L805:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L804
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	je	.L3939
.L809:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L819
	cmpq	$0, 96(%rax)
	je	.L820
	testb	$8, 62(%rax)
	je	.L819
.L820:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L819
	movq	32(%r12), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L819
	movq	32(%rbp), %r10
	movq	24(%r10), %rbx
	testq	%rbx, %rbx
	je	.L819
.L826:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L822
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L826
	jmp	.L819
.L822:
	testq	%rbx, %rbx
	jne	.L804
	jmp	.L819
.L3939:
	cmpq	$0, 96(%rax)
	je	.L810
	testb	$8, 62(%rax)
	je	.L809
.L810:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L809
	movq	32(%rbp), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L809
	movq	32(%r12), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L819
.L816:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L822
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L816
	jmp	.L819
.L3937:
	movq	32(%rbp), %rdi
	jmp	.L3455
.L3936:
	testq	%rbp, %rbp
	je	.L799
	jmp	.L819
.L921:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmove	%eax, %r15d
	jmp	.L785
.L908:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	movl	$1, %r15d
	movq	24(%rbx), %r12
	movq	24(%rbp), %r13
	cmpq	%rsi, %rdi
	je	.L909
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	je	.L768
.L909:
	testq	%r12, %r12
	je	.L785
	testq	%r13, %r13
	je	.L785
	cmpq	%r13, %r12
	je	.L785
	movq	112(%r12), %rcx
	movq	112(%r13), %rsi
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L912
	movq	104(%r12), %rbp
	cmpb	$25, 16(%rbp)
	je	.L3940
.L913:
	movl	$1, %r8d
.L912:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L914
	movq	104(%r13), %r10
	cmpb	$25, 16(%r10)
	je	.L3941
.L915:
	movl	$1, %ecx
.L914:
	testb	%r8b, %r8b
	jne	.L785
	testb	%cl, %cl
	jne	.L785
	testb	%dil, %dil
	je	.L3195
	testb	%dl, %dl
.L3361:
	jne	.L785
.L920:
	xorl	%r15d, %r15d
	jmp	.L785
.L3195:
	testb	%dl, %dl
	jne	.L920
	movq	104(%r12), %rdi
	movq	104(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L920
	movq	112(%r12), %rdi
	movq	112(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L3361
.L3941:
	cmpb	$25, 16(%rsi)
	jne	.L915
	jmp	.L914
.L3940:
	cmpb	$25, 16(%rcx)
	jne	.L913
	jmp	.L912
.L3362:
	movl	$1, %r15d
	jmp	.L773
.L3925:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L782
.L3924:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L781
.L3922:
	movzbl	17(%rbp), %esi
	movzwl	60(%rbp), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L777
.L3921:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L776
.L3920:
	testb	$2, 62(%rcx)
	je	.L775
	movq	24(%rcx), %r11
	testq	%r11, %r11
	cmovne	%r11, %rbp
	jmp	.L775
.L3919:
	testb	$2, 62(%rbx)
	je	.L774
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L774
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L774
.L3917:
	cmpq	%rax, %rdx
	je	.L599
	movq	24(%rdx), %r15
	testq	%r15, %r15
	movq	%r15, 344(%rsp)
	je	.L599
.L764:
	movq	344(%rsp), %r10
	movq	%rax, %rbp
	movq	8(%r10), %rbx
	cmpq	%rax, %rbx
	je	.L606
	testq	%rbx, %rbx
	je	.L606
	testq	%rax, %rax
	je	.L606
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L606
	movzbl	16(%rax), %ecx
	testb	%cl, %cl
	jne	.L605
.L606:
	movl	$1, %r15d
.L607:
	testl	%r15d, %r15d
	jne	.L3942
.L602:
	movq	344(%rsp), %rsi
	movq	(%rsi), %rdx
	testq	%rdx, %rdx
	movq	%rdx, 344(%rsp)
	jne	.L764
	jmp	.L599
.L3942:
	movq	368(%rsp), %r15
	movq	%rax, 32(%r15)
	jmp	.L3459
.L605:
	cmpb	$6, %dl
	je	.L3943
.L608:
	cmpb	$6, %cl
	je	.L3944
.L609:
	cmpb	$10, %dl
	je	.L3945
.L610:
	cmpb	$10, 16(%rbp)
	je	.L3946
.L611:
	cmpq	%rbp, %rbx
	movl	$1, %r15d
	je	.L3360
	movzbl	16(%rbx), %edi
	cmpb	16(%rbp), %dil
	je	.L613
	xorl	%r15d, %r15d
.L3359:
	movq	360(%rsp), %r13
	movq	32(%r13), %rax
	jmp	.L607
.L613:
	movzbl	17(%rbx), %r8d
	movzbl	62(%rbx), %r12d
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	shrb	$5, %r12b
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	$1, %r8d
	andl	$1, %r12d
	andl	$1, %edx
	addl	%r8d, %r8d
	sall	$2, %r12d
	orl	%r8d, %edx
	orl	%r12d, %edx
	cmpb	$20, %dil
	je	.L3947
.L615:
	movzbl	17(%rbp), %r9d
	movzbl	62(%rbp), %r11d
	leal	0(,%rcx,8), %esi
	orl	%edx, %esi
	xorl	%ecx, %ecx
	movl	%r9d, %edx
	shrb	$5, %r11b
	shrb	$3, %r9b
	shrb	$4, %dl
	andl	$1, %r9d
	andl	$1, %r11d
	andl	$1, %edx
	addl	%r9d, %r9d
	sall	$2, %r11d
	orl	%r9d, %edx
	orl	%r11d, %edx
	cmpb	$20, %dil
	je	.L3948
.L616:
	leal	0(,%rcx,8), %edi
	orl	%edi, %edx
	cmpl	%edx, %esi
	je	.L614
	xorl	%r15d, %r15d
.L3320:
	movq	360(%rsp), %r12
	movq	32(%r12), %rax
	jmp	.L607
.L614:
	movq	128(%rbp), %rdx
	cmpq	%rdx, 128(%rbx)
	je	.L3949
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	*targetm+264(%rip)
	testl	%eax, %eax
	movl	%eax, 532(%rsp)
	jne	.L618
	xorl	%r15d, %r15d
.L3360:
	movq	360(%rsp), %rbx
	movq	32(%rbx), %rax
	jmp	.L607
.L618:
	movzbl	16(%rbx), %eax
	xorl	%r15d, %r15d
	cmpl	$18, %eax
	je	.L742
	cmpl	$18, %eax
	ja	.L759
	cmpl	$13, %eax
	je	.L620
.L619:
	cmpl	$2, 532(%rsp)
	jne	.L3320
	cmpl	$1, %r15d
	je	.L3950
	movq	360(%rsp), %r9
	movq	32(%r9), %rax
	jmp	.L607
.L3950:
	movl	$2, %r15d
	jmp	.L3359
.L620:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L621
	call	comptypes
	movl	%eax, %r15d
	jmp	.L619
.L621:
	movl	$1, %r15d
	jmp	.L619
.L759:
	cmpl	$20, %eax
	je	.L755
	cmpl	$23, %eax
	jne	.L619
	movl	$1, 340(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L624
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 340(%rsp)
	je	.L619
.L624:
	movq	24(%rbx), %r13
	movq	24(%rbp), %r12
	testq	%r13, %r13
	je	.L3951
	testq	%r12, %r12
	je	.L3952
	movl	$1, %r15d
	xorl	%ebp, %ebp
.L739:
	testq	%r13, %r13
	je	.L3953
	testq	%r12, %r12
	je	.L728
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3954
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L714
.L3454:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L728
.L713:
	movq	(%r13), %r13
	movq	(%r12), %r12
	cmpl	%r15d, %ebp
	cmovg	%ebp, %r15d
	jmp	.L739
.L728:
	xorl	%r15d, %r15d
.L708:
	cmpl	$1, %r15d
	cmove	340(%rsp), %r15d
	jmp	.L619
.L714:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %ebp
	jne	.L713
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3956
.L718:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L728
	cmpq	$0, 96(%rax)
	je	.L729
	testb	$8, 62(%rax)
	je	.L728
.L729:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L728
	movq	32(%r13), %r10
	movq	32(%r10), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L728
	movq	32(%r12), %r8
	movq	24(%r8), %rbx
	testq	%rbx, %rbx
	je	.L728
.L735:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L731
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L735
	jmp	.L728
.L731:
	testq	%rbx, %rbx
	jne	.L713
	jmp	.L728
.L3956:
	cmpq	$0, 96(%rax)
	je	.L719
	testb	$8, 62(%rax)
	je	.L718
.L719:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L718
	movq	32(%r12), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L718
	movq	32(%r13), %rcx
	movq	24(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L728
.L725:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L731
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L725
	jmp	.L728
.L3954:
	movq	32(%r12), %rdi
	jmp	.L3454
.L3953:
	testq	%r12, %r12
	je	.L708
	jmp	.L728
.L3952:
	movq	%r13, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L619
	movq	136(%rbp), %rax
	testq	%rax, %rax
	je	.L3109
	movq	%rax, %rbp
	movl	$1, %r12d
	xorl	%r15d, %r15d
.L703:
	testq	%r13, %r13
	je	.L3957
	testq	%rbp, %rbp
	je	.L692
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3958
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L678
.L3452:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L692
.L677:
	movq	(%r13), %r13
	movq	(%rbp), %rbp
	cmpl	%r12d, %r15d
	cmovg	%r15d, %r12d
	jmp	.L703
.L692:
	xorl	%r12d, %r12d
.L672:
	movl	$2, %r15d
	decl	%r12d
.L3453:
	jne	.L619
.L3109:
	movl	340(%rsp), %r15d
	jmp	.L619
.L678:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L677
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3960
.L682:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L692
	cmpq	$0, 96(%rax)
	je	.L693
	testb	$8, 62(%rax)
	je	.L692
.L693:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L692
	movq	32(%r13), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L692
	movq	32(%rbp), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L692
.L699:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L695
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L699
	jmp	.L692
.L695:
	testq	%rbx, %rbx
	jne	.L677
	jmp	.L692
.L3960:
	cmpq	$0, 96(%rax)
	je	.L683
	testb	$8, 62(%rax)
	je	.L682
.L683:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L682
	movq	32(%rbp), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L682
	movq	32(%r13), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L692
.L689:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L695
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L689
	jmp	.L692
.L3958:
	movq	32(%rbp), %rdi
	jmp	.L3452
.L3957:
	testq	%rbp, %rbp
	je	.L672
	jmp	.L692
.L3951:
	movq	%r12, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L619
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L3109
	movq	%rax, %rbp
	movl	$1, %r13d
	xorl	%r15d, %r15d
.L664:
	testq	%r12, %r12
	je	.L3961
	testq	%rbp, %rbp
	je	.L653
	movq	32(%r12), %rdi
	testq	%rdi, %rdi
	je	.L3962
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L639
.L3451:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L653
.L638:
	movq	(%r12), %r12
	movq	(%rbp), %rbp
	cmpl	%r13d, %r15d
	cmovg	%r15d, %r13d
	jmp	.L664
.L653:
	xorl	%r13d, %r13d
.L633:
	movl	$2, %r15d
	decl	%r13d
	jmp	.L3453
.L639:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L638
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	je	.L3964
.L643:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L653
	cmpq	$0, 96(%rax)
	je	.L654
	testb	$8, 62(%rax)
	je	.L653
.L654:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L653
	movq	32(%r12), %r8
	movq	32(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L653
	movq	32(%rbp), %r11
	movq	24(%r11), %rbx
	testq	%rbx, %rbx
	je	.L653
.L660:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L656
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L660
	jmp	.L653
.L656:
	testq	%rbx, %rbx
	jne	.L638
	jmp	.L653
.L3964:
	cmpq	$0, 96(%rax)
	je	.L644
	testb	$8, 62(%rax)
	je	.L643
.L644:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L643
	movq	32(%rbp), %rcx
	movq	32(%rcx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L643
	movq	32(%r12), %r10
	movq	24(%r10), %rbx
	testq	%rbx, %rbx
	je	.L653
.L650:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L656
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L650
	jmp	.L653
.L3962:
	movq	32(%rbp), %rdi
	jmp	.L3451
.L3961:
	testq	%rbp, %rbp
	je	.L633
	jmp	.L653
.L755:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmove	%eax, %r15d
	jmp	.L619
.L742:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	movl	$1, %r15d
	movq	24(%rbx), %r12
	movq	24(%rbp), %r13
	cmpq	%rsi, %rdi
	je	.L743
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	je	.L3319
.L743:
	testq	%r12, %r12
	je	.L619
	testq	%r13, %r13
	je	.L619
	cmpq	%r13, %r12
	je	.L619
	movq	112(%r12), %rcx
	movq	112(%r13), %rsi
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L746
	movq	104(%r12), %rbp
	cmpb	$25, 16(%rbp)
	je	.L3965
.L747:
	movl	$1, %r8d
.L746:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L748
	movq	104(%r13), %r11
	cmpb	$25, 16(%r11)
	je	.L3966
.L749:
	movl	$1, %ecx
.L748:
	testb	%r8b, %r8b
	jne	.L619
	testb	%cl, %cl
	jne	.L619
	testb	%dil, %dil
	je	.L3185
	testb	%dl, %dl
.L3358:
	jne	.L619
.L754:
	xorl	%r15d, %r15d
	jmp	.L619
.L3185:
	testb	%dl, %dl
	jne	.L754
	movq	104(%r12), %rdi
	movq	104(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L754
	movq	112(%r12), %rdi
	movq	112(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L3358
.L3966:
	cmpb	$25, 16(%rsi)
	jne	.L749
	jmp	.L748
.L3965:
	cmpb	$25, 16(%rcx)
	jne	.L747
	jmp	.L746
.L3319:
	movq	360(%rsp), %rdi
	movq	32(%rdi), %rax
	jmp	.L602
.L3949:
	movq	360(%rsp), %rsi
	movl	$1, %r15d
	movq	32(%rsi), %rax
	jmp	.L607
.L3948:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L616
.L3947:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L615
.L3946:
	movzbl	17(%rbp), %esi
	movzwl	60(%rbp), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L611
.L3945:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L610
.L3944:
	testb	$2, 62(%rax)
	je	.L609
	movq	24(%rax), %r13
	testq	%r13, %r13
	cmovne	%r13, %rbp
	jmp	.L609
.L3943:
	testb	$2, 62(%rbx)
	je	.L608
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L608
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L608
.L3916:
	movq	536(%rsp), %rdi
	movq	24(%rbx), %rsi
	jmp	.L3522
.L3915:
	cmpq	$0, 352(%rsp)
	jne	.L585
	jmp	.L3465
.L3914:
	testq	%r8, %r8
	jne	.L583
	jmp	.L932
.L3304:
	movq	%r15, %rdi
.L544:
	cmpl	$8, %r12d
	movq	%rbx, %rsi
	je	.L3967
.L546:
	call	common_type
	cmpl	$8, %ebp
	movq	%rax, %rdi
	je	.L3968
.L547:
	cmpl	$8, %r12d
	je	.L3969
.L549:
	call	build_complex_type
	jmp	.L3467
.L3969:
	cmpq	%rdi, 8(%rbx)
	jne	.L549
	jmp	.L3465
.L3968:
	cmpq	%rax, 8(%r15)
	jne	.L547
	jmp	.L932
.L3967:
	movq	8(%rbx), %rsi
	jmp	.L546
.L3174:
	movq	8(%r15), %rdi
	jmp	.L544
.L3907:
	movzwl	60(%rcx), %edi
	movl	$1, %esi
	andl	$511, %edi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L540
.L3906:
	movzwl	60(%r15), %edi
	movl	$1, %esi
	andl	$511, %edi
	call	type_for_size
	movq	%rax, %r15
	jmp	.L539
.L3905:
	movq	%rbx, %r15
	jmp	.L934
.L373:
	movq	568(%rsp), %r12
	cmpb	$5, 16(%r12)
	je	.L3970
	movq	560(%rsp), %r9
	cmpb	$5, 16(%r9)
	je	.L3971
	movl	$.LC12, %edi
.L3364:
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L934
.L3971:
	movl	pedantic(%rip), %ecx
	testl	%ecx, %ecx
	je	.L934
	movq	%r14, %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L941
	cmpq	592(%rsp), %r14
	je	.L934
.L941:
	movq	568(%rsp), %rdx
	cmpb	$23, 16(%rdx)
.L3468:
	jne	.L934
	movl	$.LC11, %edi
	jmp	.L3364
.L3970:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	je	.L934
	movq	8(%rsp), %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L937
	movq	600(%rsp), %r8
	cmpq	%r8, 8(%rsp)
	je	.L934
.L937:
	movq	560(%rsp), %r11
	cmpb	$23, 16(%r11)
	jmp	.L3468
.L3904:
	movq	168(%rsp), %rbp
	movq	96(%rsp), %rdx
	movq	8(%rbp), %rsi
	movq	8(%rdx), %r13
	movq	128(%rsi), %rbp
	movq	128(%r13), %rbx
	cmpq	%rbp, %rbx
	je	.L3357
	testq	%rbx, %rbx
	je	.L3357
	testq	%rbp, %rbp
	je	.L3357
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L3357
	movzbl	16(%rbp), %eax
	testb	%al, %al
	je	.L3357
	cmpb	$6, %dl
	je	.L3972
.L379:
	cmpb	$6, %al
	je	.L3973
.L380:
	cmpb	$10, %dl
	je	.L3974
.L381:
	cmpb	$10, 16(%rbp)
	je	.L3975
.L382:
	cmpq	%rbp, %rbx
	movl	$1, 384(%rsp)
	je	.L378
	movzbl	16(%rbx), %esi
	cmpb	16(%rbp), %sil
	je	.L384
	movl	$0, 384(%rsp)
.L378:
	cmpl	$2, 384(%rsp)
	je	.L3976
.L534:
	movl	384(%rsp), %eax
	jmp	.L375
.L3976:
	movl	pedantic(%rip), %ecx
	testl	%ecx, %ecx
	je	.L534
	movl	$.LC1, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L534
.L384:
	movzbl	17(%rbx), %edi
	movzbl	62(%rbx), %ecx
	movl	%edi, %edx
	shrb	$5, %cl
	shrb	$3, %dil
	shrb	$4, %dl
	andl	$1, %edi
	andl	$1, %ecx
	andl	$1, %edx
	addl	%edi, %edi
	sall	$2, %ecx
	orl	%edi, %edx
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	cmpb	$20, %sil
	je	.L3977
.L386:
	movzbl	17(%rbp), %r9d
	movzbl	62(%rbp), %r12d
	leal	0(,%rcx,8), %edi
	orl	%edx, %edi
	xorl	%ecx, %ecx
	movl	%r9d, %edx
	shrb	$5, %r12b
	shrb	$3, %r9b
	shrb	$4, %dl
	andl	$1, %r9d
	andl	$1, %r12d
	andl	$1, %edx
	addl	%r9d, %r9d
	sall	$2, %r12d
	orl	%r9d, %edx
	orl	%r12d, %edx
	cmpb	$20, %sil
	je	.L3978
.L387:
	leal	0(,%rcx,8), %r10d
	movl	$0, 384(%rsp)
	orl	%r10d, %edx
	cmpl	%edx, %edi
	jne	.L378
	movq	128(%rbp), %r8
	cmpq	%r8, 128(%rbx)
	je	.L3357
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	*targetm+264(%rip)
	movl	$0, 384(%rsp)
	testl	%eax, %eax
	movl	%eax, 556(%rsp)
	je	.L378
	movl	$0, 384(%rsp)
	movzbl	16(%rbx), %eax
	cmpl	$18, %eax
	je	.L513
	cmpl	$18, %eax
	ja	.L530
	cmpl	$13, %eax
	je	.L391
.L390:
	cmpl	$2, 556(%rsp)
	jne	.L378
	cmpl	$1, 384(%rsp)
	movl	556(%rsp), %eax
	cmovne	384(%rsp), %eax
	movl	%eax, 384(%rsp)
	jmp	.L378
.L391:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L392
	call	comptypes
.L3356:
	movl	%eax, 384(%rsp)
	jmp	.L390
.L392:
	movl	$1, 384(%rsp)
	jmp	.L390
.L530:
	cmpl	$20, %eax
	je	.L526
	cmpl	$23, %eax
	jne	.L390
	movl	$1, 396(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L395
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 396(%rsp)
	je	.L390
.L395:
	movq	24(%rbx), %r13
	movq	24(%rbp), %r12
	testq	%r13, %r13
	je	.L3979
	testq	%r12, %r12
	je	.L3980
	movl	$1, 384(%rsp)
	xorl	%ebp, %ebp
.L510:
	testq	%r13, %r13
	je	.L3981
	testq	%r12, %r12
	je	.L499
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3982
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L485
.L3450:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L499
.L484:
	cmpl	384(%rsp), %ebp
	movl	384(%rsp), %r11d
	cmovg	%ebp, %r11d
	movl	%r11d, 384(%rsp)
	movq	(%r12), %r12
	movq	(%r13), %r13
	jmp	.L510
.L499:
	movl	$0, 384(%rsp)
.L479:
	cmpl	$1, 384(%rsp)
	movl	384(%rsp), %eax
	cmove	396(%rsp), %eax
	jmp	.L3356
.L485:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %ebp
	jne	.L484
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3984
.L489:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L499
	cmpq	$0, 96(%rax)
	je	.L500
	testb	$8, 62(%rax)
	je	.L499
.L500:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L499
	movq	32(%r13), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L499
	movq	32(%r12), %rdx
	movq	24(%rdx), %rbx
	testq	%rbx, %rbx
	je	.L499
.L506:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L502
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L506
	jmp	.L499
.L502:
	testq	%rbx, %rbx
	jne	.L484
	jmp	.L499
.L3984:
	cmpq	$0, 96(%rax)
	je	.L490
	testb	$8, 62(%rax)
	je	.L489
.L490:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L489
	movq	32(%r12), %r8
	movq	32(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L489
	movq	32(%r13), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L499
.L496:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L502
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L496
	jmp	.L499
.L3982:
	movq	32(%r12), %rdi
	jmp	.L3450
.L3981:
	testq	%r12, %r12
	je	.L479
	jmp	.L499
.L3980:
	movq	%r13, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L390
	movq	136(%rbp), %rax
	testq	%rax, %rax
	je	.L3104
	movq	%rax, %rbp
	movl	$1, %r12d
	movl	$0, 388(%rsp)
.L474:
	testq	%r13, %r13
	je	.L3985
	testq	%rbp, %rbp
	je	.L463
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L3986
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L449
.L3449:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L463
.L448:
	cmpl	%r12d, 388(%rsp)
	movq	(%r13), %r13
	cmovg	388(%rsp), %r12d
	movq	(%rbp), %rbp
	jmp	.L474
.L463:
	xorl	%r12d, %r12d
.L443:
	decl	%r12d
	movl	$2, 384(%rsp)
	jne	.L390
	movl	396(%rsp), %r12d
	movl	%r12d, 384(%rsp)
	jmp	.L390
.L449:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 388(%rsp)
	jne	.L448
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L3988
.L453:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L463
	cmpq	$0, 96(%rax)
	je	.L464
	testb	$8, 62(%rax)
	je	.L463
.L464:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L463
	movq	32(%r13), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L463
	movq	32(%rbp), %r10
	movq	24(%r10), %rbx
	testq	%rbx, %rbx
	je	.L463
.L470:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L466
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L470
	jmp	.L463
.L466:
	testq	%rbx, %rbx
	jne	.L448
	jmp	.L463
.L3988:
	cmpq	$0, 96(%rax)
	je	.L454
	testb	$8, 62(%rax)
	je	.L453
.L454:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L453
	movq	32(%rbp), %rcx
	movq	32(%rcx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L453
	movq	32(%r13), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L463
.L460:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L466
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L460
	jmp	.L463
.L3986:
	movq	32(%rbp), %rdi
	jmp	.L3449
.L3985:
	testq	%rbp, %rbp
	je	.L443
	jmp	.L463
.L3104:
	movl	396(%rsp), %r13d
	movl	%r13d, 384(%rsp)
	jmp	.L390
.L3979:
	movq	%r12, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L390
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L3102
	movq	%rax, %rbp
	movl	$1, %r13d
	movl	$0, 392(%rsp)
.L435:
	testq	%r12, %r12
	je	.L3989
	testq	%rbp, %rbp
	je	.L424
	movq	32(%r12), %rdi
	testq	%rdi, %rdi
	je	.L3990
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L410
.L3448:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L424
.L409:
	cmpl	%r13d, 392(%rsp)
	movq	(%r12), %r12
	cmovg	392(%rsp), %r13d
	movq	(%rbp), %rbp
	jmp	.L435
.L424:
	xorl	%r13d, %r13d
.L404:
	decl	%r13d
	movl	$2, 384(%rsp)
	jne	.L390
	movl	396(%rsp), %ebp
	movl	%ebp, 384(%rsp)
	jmp	.L390
.L410:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 392(%rsp)
	jne	.L409
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	je	.L3992
.L414:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L424
	cmpq	$0, 96(%rax)
	je	.L425
	testb	$8, 62(%rax)
	je	.L424
.L425:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L424
	movq	32(%r12), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L424
	movq	32(%rbp), %r11
	movq	24(%r11), %rbx
	testq	%rbx, %rbx
	je	.L424
.L431:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L427
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L431
	jmp	.L424
.L427:
	testq	%rbx, %rbx
	jne	.L409
	jmp	.L424
.L3992:
	cmpq	$0, 96(%rax)
	je	.L415
	testb	$8, 62(%rax)
	je	.L414
.L415:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L414
	movq	32(%rbp), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L414
	movq	32(%r12), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L424
.L421:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L427
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L421
	jmp	.L424
.L3990:
	movq	32(%rbp), %rdi
	jmp	.L3448
.L3989:
	testq	%rbp, %rbp
	je	.L404
	jmp	.L424
.L3102:
	movl	396(%rsp), %eax
	movl	%eax, 384(%rsp)
	jmp	.L390
.L526:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmovne	384(%rsp), %eax
	jmp	.L3356
.L513:
	movq	24(%rbx), %r12
	movq	24(%rbp), %r13
	movl	$1, 384(%rsp)
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L514
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 384(%rsp)
	je	.L378
.L514:
	testq	%r12, %r12
	je	.L390
	testq	%r13, %r13
	je	.L390
	cmpq	%r13, %r12
	je	.L390
	movq	112(%r12), %rcx
	movq	112(%r13), %rsi
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L517
	movq	104(%r12), %rbp
	cmpb	$25, 16(%rbp)
	je	.L3993
.L518:
	movl	$1, %r8d
.L517:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L519
	movq	104(%r13), %r9
	cmpb	$25, 16(%r9)
	je	.L3994
.L520:
	movl	$1, %ecx
.L519:
	testb	%r8b, %r8b
	jne	.L390
	testb	%cl, %cl
	jne	.L390
	testb	%dil, %dil
	je	.L3173
	testb	%dl, %dl
.L3355:
	jne	.L390
.L525:
	movl	$0, 384(%rsp)
	jmp	.L390
.L3173:
	testb	%dl, %dl
	jne	.L525
	movq	104(%r12), %rdi
	movq	104(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L525
	movq	112(%r12), %rdi
	movq	112(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L3355
.L3994:
	cmpb	$25, 16(%rsi)
	jne	.L520
	jmp	.L519
.L3993:
	cmpb	$25, 16(%rcx)
	jne	.L518
	jmp	.L517
.L3357:
	movl	$1, 384(%rsp)
	jmp	.L378
.L3978:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L387
.L3977:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L386
.L3975:
	movzbl	17(%rbp), %esi
	movzwl	60(%rbp), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L382
.L3974:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L381
.L3973:
	testb	$2, 62(%rbp)
	je	.L380
	movq	24(%rbp), %r11
	testq	%r11, %r11
	cmovne	%r11, %rbp
	jmp	.L380
.L3972:
	testb	$2, 62(%rbx)
	je	.L379
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L379
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L379
	.p2align 6,,7
.L369:
	movl	$.LC9, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L368
.L2113:
	cmpl	$7, 588(%rsp)
	movq	integer_types+40(%rip), %rcx
	movq	%rcx, (%rsp)
	je	.L3995
.L2115:
	movl	$.LC17, %edi
	xorl	%eax, %eax
	call	error
	jmp	.L3439
.L3995:
	cmpl	$7, 584(%rsp)
	jne	.L2115
	jmp	.L2114
	.p2align 6,,7
.L133:
	movzbl	16(%rax), %edx
	movq	%rax, %r14
	leal	-114(%rdx), %esi
	cmpb	$2, %sil
	ja	.L130
	movq	32(%rax), %rax
	cmpq	%rcx, %rax
	je	.L130
	movq	8(%rax), %r10
	cmpq	%r10, 8(%r14)
	je	.L133
	jmp	.L130
	.p2align 6,,7
.L128:
	movq	%rax, 8(%rsp)
	movq	%rax, %rcx
	movzbl	16(%rax), %r13d
	subb	$114, %r13b
	cmpb	$2, %r13b
	ja	.L125
	movq	32(%rax), %rax
	cmpq	%rdx, %rax
	je	.L125
	movq	8(%rax), %r12
	cmpq	%r12, 8(%rcx)
	je	.L128
	jmp	.L125
.L120:
	movq	integer_types+48(%rip), %rdi
	jmp	.L3345
.L118:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L121
	movl	flag_allow_single_precision(%rip), %r9d
	testl	%r9d, %r9d
	jne	.L121
	movq	global_trees+192(%rip), %r10
	cmpq	%r10, 128(%r12)
	je	.L3996
.L121:
	cmpl	$5, %r13d
	je	.L3997
.L122:
	movq	%rbx, %r14
	jmp	.L123
.L3997:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L3347:
	movq	global_trees(%rip), %r14
	jmp	.L123
.L3996:
	movq	global_trees+200(%rip), %rdi
	jmp	.L3345
	.p2align 6,,7
.L3539:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L113
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L113
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	je	.L119
	testb	$32, 17(%r12)
	jne	.L120
	jmp	.L119
	.p2align 6,,7
.L3538:
	movq	integer_types+40(%rip), %rbp
	movzwl	60(%r12), %edx
	movl	flag_traditional(%rip), %ecx
	movzwl	60(%rbp), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%ecx, %ecx
	jne	.L112
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L111
.L112:
	testb	$32, 17(%r12)
	movl	$1, %eax
	cmovne	%eax, %esi
.L111:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L3345
.L105:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L104
.L3537:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%rsi)
	jne	.L100
	.p2align 4,,7
.L103:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %rbx
	cmpb	$116, %cl
	jne	.L3998
.L3318:
	movq	32(%rbx), %rsi
	jmp	.L103
.L3998:
	cmpb	$115, %cl
	jne	.L100
	movq	32(%rsi), %r14
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%r14)
	movq	%r14, %rsi
	je	.L103
	jmp	.L100
.L3536:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	jne	.L94
	movq	592(%rsp), %rsi
	cmpb	$51, 48(%rsi)
	je	.L94
	cmpq	$0, current_function_decl(%rip)
	je	.L97
	movq	592(%rsp), %rsi
	movzbl	17(%rsi), %ebx
	andb	$24, %bl
	cmpb	$16, %bl
	je	.L3999
.L97:
	movq	592(%rsp), %rsi
.L98:
	movq	%rsi, %rbx
.L95:
	movq	8(%rbx), %r12
	jmp	.L91
.L3999:
	movq	104(%rsi), %rax
	testq	%rax, %rax
	je	.L97
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L97
	testb	$2, 17(%rax)
	je	.L97
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L98
	jmp	.L97
	.p2align 6,,7
.L94:
	movq	592(%rsp), %rbx
	jmp	.L95
.L3535:
	movq	104(%rcx), %rbx
	jmp	.L91
.L64:
	movq	592(%rsp), %rbx
	xorl	%ebp, %ebp
	movzbl	16(%rbx), %edx
	cmpb	$116, %dl
	je	.L2980
	cmpb	$115, %dl
	je	.L4000
	movq	592(%rsp), %r10
	movzbl	16(%r10), %ecx
.L66:
	movzbl	%cl, %r14d 
	movzbl	tree_code_type(%r14), %eax
	cmpb	$60, %al
	je	.L72
	cmpb	$49, %al
	je	.L72
	cmpb	$50, %al
	je	.L72
	cmpb	$101, %al
	je	.L72
.L71:
	cmpl	$23, %r13d
	je	.L4001
	cmpl	$18, %r13d
	jne	.L122
	movzbl	%cl, %edi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rdi), %eax
	movq	8(%r12), %r13
	cmpb	$114, %al
	je	.L77
	cmpb	$100, %al
	je	.L77
.L76:
	movzbl	17(%r12), %r8d
	movl	$1, %esi
	movzbl	16(%r12), %edi
	movl	%r8d, %r9d
	movl	%r8d, %r14d
	shrb	$3, %r9b
	shrb	$4, %r14b
	andl	$1, %r9d
	andl	%r14d, %esi
	addl	%r9d, %r9d
	orl	%r9d, %esi
	movzbl	62(%r12), %r9d
	movl	%r9d, %r10d
	shrb	$5, %r10b
	andl	$1, %r10d
	sall	$2, %r10d
	orl	%r10d, %esi
	xorl	%r10d, %r10d
	cmpb	$20, %dil
	je	.L4002
.L80:
	leal	0(,%r10,8), %r12d
	orl	%r12d, %esi
	jne	.L79
	testl	%edx, %edx
	jne	.L79
	testl	%r11d, %r11d
	je	.L78
.L79:
	movl	%r8d, %r14d
	shrb	$5, %r9b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r14b
	movl	%r9d, %ecx
	movl	%r8d, %r10d
	andl	%r14d, %esi
	andl	$1, %ecx
	andl	$1, %r10d
	sall	$2, %ecx
	addl	%r10d, %r10d
	orl	%r10d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L4003
.L82:
	leal	0(,%rcx,8), %r8d
	movq	%r13, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%rbx), %ecx
	movq	%rax, %r13
.L78:
	cmpb	$41, %cl
	je	.L4004
	cmpb	$47, %cl
	je	.L4005
	xorl	%r12d, %r12d
	testl	%ebp, %ebp
	je	.L4006
.L85:
	movl	flag_isoc99(%rip), %ebp
	testl	%ebp, %ebp
	jne	.L86
	testl	%r12d, %r12d
	movq	%rbx, %r14
	je	.L123
.L86:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %rbp
	je	.L4007
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbp, %rdi
	movq	%rax, %rsi
	jmp	.L3346
.L4007:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, %r14
	call	mark_addressable
	testl	%eax, %eax
	je	.L3347
	movq	%rbx, %rdi
	call	staticp
	movzbl	17(%r14), %r11d
	movl	%eax, %r13d
	andb	$1, %r13b
	addb	%r13b, %r13b
	andb	$-4, %r11b
	orb	%r13b, %r11b
	movb	%r11b, 17(%r14)
	jmp	.L123
.L4006:
	movq	%rbx, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r12d
	jmp	.L85
.L4005:
	movq	40(%rbx), %rdi
	call	default_conversion
	movq	32(%rbx), %rdx
	movl	$47, %edi
	movq	8(%rax), %rsi
	movq	%rax, %rcx
	xorl	%eax, %eax
	call	build
	jmp	.L3348
.L4004:
	movq	72(%r13), %rdi
	movq	32(%rbx), %rsi
	jmp	.L3346
.L4003:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L82
.L4002:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %r10d
	jmp	.L80
.L77:
	movzbl	17(%rbx), %esi
	movl	$1, %r11d
	movl	%esi, %edx
	shrb	$3, %sil
	shrb	$4, %dl
	andl	%esi, %r11d
	andl	$1, %edx
	jmp	.L76
.L4001:
	movl	$121, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L3348
.L72:
	movq	592(%rsp), %r8
	movl	24(%r8), %eax
	movl	%eax, 24(%rbx)
	jmp	.L71
.L4000:
	movq	32(%rbx), %r9
	cmpq	%r12, 8(%r9)
	je	.L2980
	movl	$115, %ecx
	jmp	.L66
.L2980:
	movl	%edx, %ecx
	movq	592(%rsp), %rbx
	.p2align 4,,7
.L3316:
	movq	32(%rbx), %rsi
.L70:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %rbx
	movzbl	16(%rsi), %ecx
	cmove	%eax, %ebp
	cmpb	$116, %cl
	je	.L3316
	cmpb	$115, %cl
	jne	.L66
	movq	32(%rsi), %rsi
	movq	8(%rbx), %rax
	cmpq	%rax, 8(%rsi)
	je	.L70
	jmp	.L66
.L60:
	movq	integer_types+48(%rip), %rdi
	jmp	.L3342
.L58:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L61
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L61
	movq	global_trees+192(%rip), %rsi
	cmpq	%rsi, 128(%r12)
	je	.L4008
.L61:
	cmpl	$5, %r13d
	je	.L4009
.L62:
	movq	%rbx, 8(%rsp)
	jmp	.L29
.L4009:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
	movq	global_trees(%rip), %rbx
	movq	%rbx, 8(%rsp)
	jmp	.L29
.L4008:
	movq	global_trees+200(%rip), %rdi
	jmp	.L3342
	.p2align 6,,7
.L3534:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L53
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%rdi), %esi
	movq	40(%rdx), %rdi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L53
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L59
	testb	$32, 17(%r12)
	jne	.L60
	jmp	.L59
	.p2align 6,,7
.L3533:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r12), %edx
	movl	flag_traditional(%rip), %r11d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r11d, %r11d
	jne	.L52
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L51
.L52:
	testb	$32, 17(%r12)
	movl	$1, %eax
	cmovne	%eax, %esi
.L51:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L3342
.L45:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L44
.L3532:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L40
	.p2align 4,,7
.L43:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %rbx
	cmpb	$116, %cl
	jne	.L4010
.L3313:
	movq	32(%rbx), %rsi
	jmp	.L43
.L4010:
	cmpb	$115, %cl
	jne	.L40
	movq	32(%rsi), %r8
	movq	8(%rbx), %r14
	cmpq	%r14, 8(%r8)
	movq	%r8, %rsi
	je	.L43
	jmp	.L40
.L3531:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	jne	.L34
	movq	600(%rsp), %rdi
	cmpb	$51, 48(%rdi)
	je	.L34
	cmpq	$0, current_function_decl(%rip)
	je	.L37
	movq	600(%rsp), %rdx
	movzbl	17(%rdx), %r9d
	andb	$24, %r9b
	cmpb	$16, %r9b
	je	.L4011
.L37:
	movq	600(%rsp), %rsi
.L38:
	movq	%rsi, %rbx
.L35:
	movq	8(%rbx), %r12
	jmp	.L31
.L4011:
	movq	104(%rdx), %rax
	testq	%rax, %rax
	je	.L37
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L37
	testb	$2, 17(%rax)
	je	.L37
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L38
	jmp	.L37
	.p2align 6,,7
.L34:
	movq	600(%rsp), %rbx
	jmp	.L35
.L3530:
	movq	104(%rsi), %rbx
	jmp	.L31
.L4:
	movq	600(%rsp), %rbx
	xorl	%ebp, %ebp
	movzbl	16(%rbx), %edx
	cmpb	$116, %dl
	je	.L2978
	cmpb	$115, %dl
	je	.L4012
	movq	600(%rsp), %rdi
	movzbl	16(%rdi), %ecx
.L6:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L12
	cmpb	$49, %al
	je	.L12
	cmpb	$50, %al
	je	.L12
	cmpb	$101, %al
	je	.L12
.L11:
	cmpl	$23, %r13d
	je	.L4013
	cmpl	$18, %r13d
	jne	.L62
	movzbl	%cl, %r8d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r8), %eax
	movq	8(%r12), %r13
	cmpb	$114, %al
	je	.L17
	cmpb	$100, %al
	je	.L17
.L16:
	movzbl	17(%r12), %r8d
	movl	$1, %esi
	xorl	%r10d, %r10d
	movl	%r8d, %r9d
	movl	%r8d, %edi
	shrb	$4, %r9b
	shrb	$3, %dil
	andl	%r9d, %esi
	andl	$1, %edi
	movzbl	62(%r12), %r9d
	addl	%edi, %edi
	orl	%edi, %esi
	movzbl	16(%r12), %edi
	movl	%r9d, %r14d
	shrb	$5, %r14b
	andl	$1, %r14d
	sall	$2, %r14d
	orl	%r14d, %esi
	cmpb	$20, %dil
	je	.L4014
.L20:
	leal	0(,%r10,8), %r12d
	orl	%r12d, %esi
	jne	.L19
	testl	%edx, %edx
	jne	.L19
	testl	%r11d, %r11d
	je	.L18
.L19:
	movl	%r8d, %r14d
	shrb	$5, %r9b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r14b
	movl	%r9d, %ecx
	movl	%r8d, %r10d
	andl	%r14d, %esi
	andl	$1, %ecx
	andl	$1, %r10d
	sall	$2, %ecx
	addl	%r10d, %r10d
	orl	%r10d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L4015
.L22:
	leal	0(,%rcx,8), %r8d
	movq	%r13, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%rbx), %ecx
	movq	%rax, %r13
.L18:
	cmpb	$41, %cl
	je	.L4016
	cmpb	$47, %cl
	je	.L4017
	xorl	%r12d, %r12d
	testl	%ebp, %ebp
	je	.L4018
.L25:
	movl	flag_isoc99(%rip), %ebp
	testl	%ebp, %ebp
	jne	.L26
	testl	%r12d, %r12d
	movq	%rbx, 8(%rsp)
	je	.L29
.L26:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %rbp
	je	.L4019
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbp, %rdi
	movq	%rax, %rsi
	jmp	.L3343
.L4019:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, 8(%rsp)
	call	mark_addressable
	testl	%eax, %eax
	jne	.L28
	movq	global_trees(%rip), %rax
	jmp	.L3344
.L28:
	movq	%rbx, %rdi
	call	staticp
	movq	8(%rsp), %rbx
	movl	%eax, %r13d
	andb	$1, %r13b
	movzbl	17(%rbx), %r11d
	addb	%r13b, %r13b
	andb	$-4, %r11b
	orb	%r13b, %r11b
	movb	%r11b, 17(%rbx)
	jmp	.L29
.L4018:
	movq	%rbx, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r12d
	jmp	.L25
.L4017:
	movq	40(%rbx), %rdi
	call	default_conversion
	movq	32(%rbx), %rdx
	movl	$47, %edi
	movq	8(%rax), %rsi
	movq	%rax, %rcx
	xorl	%eax, %eax
	call	build
	jmp	.L3344
.L4016:
	movq	72(%r13), %rdi
	movq	32(%rbx), %rsi
	jmp	.L3343
.L4015:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L22
.L4014:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %r10d
	jmp	.L20
.L17:
	movzbl	17(%rbx), %r10d
	movl	$1, %r11d
	movl	%r10d, %edx
	shrb	$3, %r10b
	shrb	$4, %dl
	andl	%r10d, %r11d
	andl	$1, %edx
	jmp	.L16
.L4013:
	movl	$121, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L3344
.L12:
	movq	600(%rsp), %r9
	movl	24(%r9), %eax
	movl	%eax, 24(%rbx)
	jmp	.L11
.L4012:
	movq	32(%rbx), %rcx
	cmpq	%r12, 8(%rcx)
	je	.L2978
	movl	$115, %ecx
	jmp	.L6
.L2978:
	movl	%edx, %ecx
	movq	600(%rsp), %rdx
	movq	32(%rdx), %rsi
	.p2align 4,,7
.L10:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %rbx
	movzbl	16(%rsi), %ecx
	cmove	%eax, %ebp
	cmpb	$116, %cl
	jne	.L4020
	movq	32(%rbx), %rsi
	jmp	.L10
.L4020:
	cmpb	$115, %cl
	jne	.L6
	movq	32(%rsi), %rsi
	movq	8(%rbx), %rax
	cmpq	%rax, 8(%rsi)
	je	.L10
	jmp	.L6
.L2:
	movq	600(%rsp), %rbx
	movq	592(%rsp), %r14
	movq	%rbx, 8(%rsp)
	jmp	.L123
.LFE1:
.Lfe1:
	.size	build_binary_op,.Lfe1-build_binary_op
	.section	.rodata.str1.32
	.align 32
.LC23:
	.string	"arithmetic on pointer to an incomplete type"
	.align 32
.LC22:
	.string	"pointer to a function used in subtraction"
	.align 32
.LC21:
	.string	"pointer of type `void *' used in subtraction"
	.text
	.align 2
	.p2align 4,,15
	.type	pointer_diff,@function
pointer_diff:
.LFB2:
	pushq	%r15
.LCFI7:
	pushq	%r14
.LCFI8:
	pushq	%r13
.LCFI9:
	pushq	%r12
.LCFI10:
	movq	%rdi, %r12
	pushq	%rbp
.LCFI11:
	movq	%rsi, %rbp
	pushq	%rbx
.LCFI12:
	subq	$8, %rsp
.LCFI13:
	movl	pedantic(%rip), %eax
	movq	8(%rdi), %rdx
	movq	global_trees+240(%rip), %r14
	testl	%eax, %eax
	movq	8(%rdx), %r15
	movq	%rsi, (%rsp)
	jne	.L4023
	movl	warn_pointer_arith(%rip), %eax
	testl	%eax, %eax
	je	.L4022
.L4023:
	movzbl	16(%r15), %eax
	cmpb	$5, %al
	je	.L4045
.L4024:
	cmpb	$23, %al
	je	.L4046
.L4022:
	cmpb	$115, 16(%r12)
	je	.L4047
	movq	%r12, %rdi
.L4027:
	cmpb	$115, 16(%rbp)
	je	.L4048
	movq	%rbp, %rsi
.L4029:
	cmpb	$59, 16(%rdi)
	je	.L4049
	movq	global_trees+88(%rip), %rbx
.L4031:
	cmpb	$59, 16(%rsi)
	je	.L4050
	movq	global_trees+88(%rip), %r13
.L4033:
	xorl	%edx, %edx
	call	operand_equal_p
	testl	%eax, %eax
	je	.L4043
	movq	%r13, %rbp
.L4034:
	movq	%rbx, %rsi
	movq	%r14, %rdi
	call	convert
	movq	%rbp, %rsi
	movq	%r14, %rdi
	movq	%rax, %r12
	call	convert
	xorl	%ecx, %ecx
	movq	%r12, %rsi
	movl	$60, %edi
	movq	%rax, %rdx
	call	build_binary_op
	movq	(%rsp), %rbx
	movq	%rax, %r12
	movq	8(%rbx), %rcx
	movq	8(%rcx), %rax
	cmpq	$0, 32(%rax)
	jne	.L4035
	cmpb	$5, 16(%rax)
	je	.L4035
	movl	$.LC23, %edi
	xorl	%eax, %eax
	call	error
.L4035:
	movzbl	16(%r15), %edx
	movzbl	%dl, %eax
	cmpl	$23, %eax
	je	.L4044
	cmpl	$5, %eax
	je	.L4044
	testl	%eax, %eax
	je	.L4044
	cmpq	$0, 32(%r15)
	jne	.L4039
	cmpb	$5, %dl
	je	.L4039
	movl	$.LC23, %edi
	xorl	%eax, %eax
	call	error
	.p2align 4,,7
.L4044:
	movq	global_trees+128(%rip), %rbp
.L4038:
	movq	%r14, %rdi
	movq	%rbp, %rsi
	call	convert
	movq	%r12, %rdx
	movq	%r14, %rsi
	movq	%rax, %rcx
	movl	$71, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	movq	%rax, %r13
	call	fold
	cmpq	%r13, %rax
	movq	%rax, %rcx
	je	.L4051
.L4042:
	addq	$8, %rsp
	movq	%rcx, %rax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
	.p2align 6,,7
.L4051:
	movzbl	17(%rbp), %r8d
	movzbl	17(%r12), %r9d
	movzbl	17(%rax), %edi
	shrb	$1, %r9b
	shrb	$1, %r8b
	andl	%r9d, %r8d
	andb	$-3, %dil
	movl	%r8d, %ebp
	andb	$1, %bpl
	addb	%bpl, %bpl
	orb	%bpl, %dil
	movb	%dil, 17(%rax)
	jmp	.L4042
	.p2align 6,,7
.L4039:
	movq	integer_types(%rip), %rsi
	movzwl	60(%rsi), %edi
	xorl	%esi, %esi
	shrq	$3, %rdi
	andl	$63, %edi
	call	size_int_wide
	movq	40(%r15), %rsi
	movl	$63, %edi
	movq	%rax, %rdx
	call	size_binop
	movq	%rax, %rbp
	jmp	.L4038
	.p2align 6,,7
.L4043:
	movq	%r12, %rbx
	jmp	.L4034
	.p2align 6,,7
.L4050:
	movq	40(%rsi), %r13
	movq	32(%rsi), %rsi
	jmp	.L4033
	.p2align 6,,7
.L4049:
	movq	40(%rdi), %rbx
	movq	32(%rdi), %rdi
	jmp	.L4031
	.p2align 6,,7
.L4048:
	movq	32(%rbp), %rsi
	jmp	.L4029
	.p2align 6,,7
.L4047:
	movq	32(%r12), %rdi
	jmp	.L4027
	.p2align 6,,7
.L4046:
	movl	$.LC22, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L4022
	.p2align 6,,7
.L4045:
	xorl	%eax, %eax
	movl	$.LC21, %edi
	call	pedwarn
	movzbl	16(%r15), %eax
	jmp	.L4024
.LFE2:
.Lfe2:
	.size	pointer_diff,.Lfe2-pointer_diff
	.section	.rodata.str1.32
	.align 32
.LC24:
	.string	"wrong type argument to unary plus"
	.align 32
.LC25:
	.string	"wrong type argument to unary minus"
	.section	.rodata.str1.1
.LC28:
	.string	"wrong type argument to abs"
	.section	.rodata.str1.32
	.align 32
.LC27:
	.string	"wrong type argument to bit-complement"
	.align 32
.LC26:
	.string	"ISO C does not support `~' for complex conjugation"
	.align 32
.LC30:
	.string	"wrong type argument to unary exclamation mark"
	.align 32
.LC41:
	.string	"attempt to take address of bit-field structure member `%s'"
	.section	.rodata.str1.1
.LC40:
	.string	"invalid lvalue in unary `&'"
	.section	.rodata.str1.32
	.align 32
.LC29:
	.string	"wrong type argument to conjugation"
	.align 32
.LC33:
	.string	"wrong type argument to decrement"
	.align 32
.LC32:
	.string	"wrong type argument to increment"
	.section	.rodata.str1.1
.LC37:
	.string	"invalid lvalue in decrement"
.LC39:
	.string	"decrement"
.LC38:
	.string	"increment"
.LC36:
	.string	"invalid lvalue in increment"
	.section	.rodata.str1.32
	.align 32
.LC35:
	.string	"decrement of pointer to unknown structure"
	.align 32
.LC34:
	.string	"increment of pointer to unknown structure"
	.align 32
.LC31:
	.string	"ISO C does not support `++' and `--' on complex types"
	.text
	.align 2
	.p2align 4,,15
.globl build_unary_op
	.type	build_unary_op,@function
build_unary_op:
.LFB3:
	pushq	%r15
.LCFI14:
	movl	%edi, %r15d
	pushq	%r14
.LCFI15:
	pushq	%r13
.LCFI16:
	movl	%edx, %r13d
	pushq	%r12
.LCFI17:
	pushq	%rbp
.LCFI18:
	movq	%rsi, %rbp
	pushq	%rbx
.LCFI19:
	subq	$8, %rsp
.LCFI20:
	movq	$0, (%rsp)
	movq	8(%rsi), %rcx
	movzbl	16(%rcx), %ebx
	movq	%rcx, %r14
	testl	%ebx, %ebx
	je	.L4608
	leal	-10(%rbx), %edx
	movl	$6, %eax
	movq	%rsi, %r12
	cmpl	$1, %edx
	cmovbe	%eax, %ebx
	leal	-77(%r15), %eax
	cmpl	$55, %eax
	ja	.L4055
	mov	%eax, %edx
	jmp	*.L4546(,%rdx,8)
	.section	.rodata
	.align 8
	.align 4
.L4546:
	.quad	.L4121
	.quad	.L4567
	.quad	.L4567
	.quad	.L4313
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4185
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4441
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4056
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4528
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4567
	.quad	.L4377
	.quad	.L4444
	.quad	.L4449
	.quad	.L4457
	.quad	.L4457
	.quad	.L4457
	.quad	.L4457
	.text
.L4056:
	leal	-6(%rbx), %esi
	movl	$.LC24, %edi
	cmpl	$2, %esi
	ja	.L4597
	testl	%r13d, %r13d
	jne	.L4567
	movzbl	16(%rcx), %r12d
	cmpl	$23, %r12d
	je	.L4061
	cmpl	$18, %r12d
	je	.L4061
	movzbl	16(%rbp), %ebx
	cmpb	$32, %bl
	je	.L4661
	movl	optimize(%rip), %eax
	testl	%eax, %eax
	je	.L4089
	cmpb	$34, %bl
	je	.L4662
.L4089:
	cmpb	$116, %bl
	movq	%rbp, %rdx
	je	.L4571
	cmpb	$115, %bl
	je	.L4663
.L4418:
	movzbl	%bl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L4423
	cmpb	$49, %al
	je	.L4423
	cmpb	$50, %al
	je	.L4423
	cmpb	$101, %al
	je	.L4423
.L4422:
	cmpl	$10, %r12d
	je	.L4664
	cmpb	$39, %bl
	je	.L4665
.L4431:
	movq	%r14, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L4436
	testb	$32, 17(%r14)
	je	.L4437
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L4438
	movzwl	60(%r14), %edx
.L4635:
	movq	integer_types+40(%rip), %r13
	andl	$511, %edx
	movzwl	60(%r13), %r14d
	andl	$511, %r14d
	cmpl	%r14d, %edx
	je	.L4438
.L4437:
	movq	integer_types+40(%rip), %rdi
.L4604:
	movq	%rbp, %rsi
.L4605:
	call	convert
.L4607:
	movq	%rax, %r12
	.p2align 4,,7
.L4055:
	cmpq	$0, (%rsp)
	jne	.L4547
	movq	8(%r12), %rdx
	movq	%rdx, (%rsp)
.L4547:
	movl	%r15d, %edi
	movq	(%rsp), %rsi
	movq	%r12, %rdx
.L4609:
	call	build1
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	movq	%rax, %rdi
	jmp	fold
.L4438:
	movq	integer_types+48(%rip), %rdi
	jmp	.L4604
.L4436:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L4439
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L4439
	movq	global_trees+192(%rip), %rdx
	cmpq	%rdx, 128(%r14)
.L4639:
	je	.L4666
.L4439:
	cmpl	$5, %r12d
	je	.L4667
.L4567:
	movq	%rbp, %r12
	jmp	.L4055
.L4667:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L4606:
	movq	global_trees(%rip), %r12
	jmp	.L4055
.L4666:
	movq	global_trees+200(%rip), %rdi
	jmp	.L4604
	.p2align 6,,7
.L4665:
	movq	40(%rbp), %rdx
	testb	$2, 53(%rdx)
	je	.L4431
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L4431
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L4437
	testb	$32, 17(%r14)
.L4636:
	jne	.L4438
	jmp	.L4437
	.p2align 6,,7
.L4664:
	movq	integer_types+40(%rip), %rbx
	movzwl	60(%r14), %edx
	movl	flag_traditional(%rip), %r12d
	movzwl	60(%rbx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r12d, %r12d
	jne	.L4430
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L4429
.L4430:
	testb	$32, 17(%r14)
.L4632:
	movl	$1, %eax
	cmovne	%eax, %esi
.L4429:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L4604
.L4423:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbp)
	jmp	.L4422
.L4663:
	movq	32(%rbp), %rsi
	movq	8(%rbp), %rdi
	cmpq	%rdi, 8(%rsi)
	jne	.L4418
	.p2align 4,,7
.L4101:
	movzbl	16(%rsi), %ebx
	movq	%rsi, %rbp
	cmpb	$116, %bl
	jne	.L4668
.L4571:
	movq	32(%rbp), %rsi
	jmp	.L4101
.L4668:
	cmpb	$115, %bl
	jne	.L4418
	movq	32(%rsi), %rsi
	movq	8(%rbp), %r9
	cmpq	%r9, 8(%rsi)
	je	.L4101
	jmp	.L4418
.L4662:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	jne	.L4089
	cmpb	$51, 48(%rbp)
	je	.L4089
	cmpq	$0, current_function_decl(%rip)
	je	.L4095
	movzbl	17(%rbp), %ecx
	andb	$24, %cl
	cmpb	$16, %cl
	je	.L4669
.L4095:
	movq	%rbp, %rsi
.L4096:
	movq	%rsi, %rbp
	movq	8(%rsi), %r14
.L4592:
	movzbl	16(%rbp), %ebx
	jmp	.L4089
.L4669:
	movq	104(%rbp), %rax
	testq	%rax, %rax
	je	.L4095
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L4095
	testb	$2, 17(%rax)
	je	.L4095
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L4096
	jmp	.L4095
	.p2align 6,,7
.L4661:
	movq	104(%rbp), %rbp
	jmp	.L4592
.L4061:
	movzbl	16(%rbp), %ebx
	movl	%r12d, %edx
	movq	%rbp, %rdi
	xorl	%r12d, %r12d
	cmpb	$116, %bl
	je	.L4569
	cmpb	$115, %bl
	je	.L4670
.L4384:
	movzbl	%bl, %r9d 
	movzbl	tree_code_type(%r9), %eax
	cmpb	$60, %al
	je	.L4390
	cmpb	$49, %al
	je	.L4390
	cmpb	$50, %al
	je	.L4390
	cmpb	$101, %al
	je	.L4390
.L4389:
	cmpl	$23, %edx
	je	.L4619
	cmpl	$18, %edx
	jne	.L4567
	movzbl	%bl, %edi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rdi), %eax
	movq	8(%rcx), %r13
	cmpb	$114, %al
	je	.L4395
	cmpb	$100, %al
	je	.L4395
.L4394:
	movzbl	17(%rcx), %r8d
	movl	$1, %r9d
	xorl	%esi, %esi
	movl	%r8d, %r10d
	movl	%r8d, %edi
	shrb	$3, %r10b
	shrb	$4, %dil
	andl	$1, %r10d
	andl	%edi, %r9d
	movzbl	16(%rcx), %edi
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rcx), %r10d
	movl	%r10d, %r14d
	shrb	$5, %r14b
	andl	$1, %r14d
	sall	$2, %r14d
	orl	%r14d, %r9d
	cmpb	$20, %dil
	je	.L4671
.L4398:
	leal	0(,%rsi,8), %ecx
	orl	%ecx, %r9d
	jne	.L4397
	testl	%edx, %edx
	jne	.L4397
	testl	%r11d, %r11d
	je	.L4396
.L4397:
	movl	%r8d, %r14d
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r14b
	movl	%r10d, %ebx
	movl	%r8d, %r9d
	andl	%r14d, %esi
	andl	$1, %ebx
	andl	$1, %r9d
	sall	$2, %ebx
	xorl	%ecx, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ebx, %esi
	cmpb	$20, %dil
	je	.L4672
.L4400:
	leal	0(,%rcx,8), %r8d
	movq	%r13, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%rbp), %ebx
	movq	%rax, %r13
.L4396:
	cmpb	$41, %bl
	je	.L4673
	cmpb	$47, %bl
	je	.L4620
	xorl	%ebx, %ebx
	testl	%r12d, %r12d
	je	.L4674
.L4403:
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L4404
	testl	%ebx, %ebx
	movq	%rbp, %r12
	je	.L4055
.L4404:
	movq	%r13, %rdi
.L4631:
	call	build_pointer_type
	cmpb	$34, 16(%rbp)
	movq	%rax, %rbx
	je	.L4675
	movl	$121, %edi
	movq	%rbp, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L4605
.L4675:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbp, %rdx
	call	build1
	movq	%rbp, %rdi
	movq	%rax, %r12
	call	mark_addressable
	testl	%eax, %eax
	je	.L4606
	movq	%rbp, %rdi
	call	staticp
	movzbl	17(%r12), %ebp
	movl	%eax, %r11d
	andb	$1, %r11b
	addb	%r11b, %r11b
	andb	$-4, %bpl
	orb	%r11b, %bpl
	movb	%bpl, 17(%r12)
	jmp	.L4055
	.p2align 6,,7
.L4674:
	movq	%rbp, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L4403
.L4620:
	movq	40(%rbp), %rdi
	call	default_conversion
	movq	32(%rbp), %rdx
	movl	$47, %edi
	movq	8(%rax), %rsi
	movq	%rax, %rcx
	xorl	%eax, %eax
	call	build
	jmp	.L4607
.L4673:
	movq	72(%r13), %rdi
.L4629:
	movq	32(%rbp), %rsi
	jmp	.L4605
.L4672:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L4400
.L4671:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L4398
.L4395:
	movzbl	17(%rbp), %esi
	movl	$1, %r11d
	movl	%esi, %edx
	shrb	$3, %sil
	shrb	$4, %dl
	andl	%esi, %r11d
	andl	$1, %edx
	jmp	.L4394
.L4619:
	movl	$121, %edi
	movq	%rbp, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L4607
.L4390:
	movl	24(%rdi), %eax
	movl	%eax, 24(%rbp)
	jmp	.L4389
.L4670:
	movq	32(%rbp), %rsi
	cmpq	%rcx, 8(%rsi)
	jne	.L4384
	.p2align 4,,7
.L4067:
	cmpb	$116, %bl
	movl	$1, %eax
	movq	%rsi, %rbp
	movzbl	16(%rsi), %ebx
	cmove	%eax, %r12d
	cmpb	$116, %bl
	jne	.L4676
.L4569:
	movq	32(%rbp), %rsi
	jmp	.L4067
.L4676:
	cmpb	$115, %bl
	jne	.L4384
	movq	32(%rsi), %rsi
	movq	8(%rbp), %r8
	cmpq	%r8, 8(%rsi)
	je	.L4067
	jmp	.L4384
	.p2align 6,,7
.L4597:
	xorl	%eax, %eax
	call	error
	.p2align 4,,7
.L4608:
	movq	global_trees(%rip), %r12
.L4052:
	addq	$8, %rsp
	movq	%r12, %rax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L4121:
	leal	-6(%rbx), %r10d
	movl	$.LC25, %edi
	cmpl	$2, %r10d
	ja	.L4597
	testl	%r13d, %r13d
	jne	.L4567
	movzbl	16(%rcx), %r12d
	cmpl	$23, %r12d
	je	.L4126
	cmpl	$18, %r12d
	je	.L4126
	movzbl	16(%rsi), %ebx
	cmpb	$32, %bl
	je	.L4677
	movl	optimize(%rip), %r13d
	testl	%r13d, %r13d
	je	.L4153
	cmpb	$34, %bl
	je	.L4678
.L4153:
	cmpb	$116, %bl
	movq	%rbp, %rdx
	je	.L4575
	cmpb	$115, %bl
	jne	.L4418
	movq	32(%rbp), %rsi
	movq	8(%rbp), %r8
	cmpq	%r8, 8(%rsi)
	jne	.L4418
	.p2align 4,,7
.L4165:
	movzbl	16(%rsi), %ebx
	movq	%rsi, %rbp
	cmpb	$116, %bl
	jne	.L4679
.L4575:
	movq	32(%rbp), %rsi
	jmp	.L4165
.L4679:
	cmpb	$115, %bl
	jne	.L4418
	movq	32(%rsi), %rsi
	movq	8(%rbp), %rcx
	cmpq	%rcx, 8(%rsi)
	je	.L4165
	jmp	.L4418
.L4678:
	movl	pedantic(%rip), %edx
	testl	%edx, %edx
	jne	.L4153
	cmpb	$51, 48(%rsi)
	je	.L4153
	cmpq	$0, current_function_decl(%rip)
	je	.L4159
	movzbl	17(%rsi), %ebx
	andb	$24, %bl
	cmpb	$16, %bl
	je	.L4680
.L4159:
	movq	%rbp, %rsi
.L4160:
	movq	%rsi, %rbp
	movq	8(%rsi), %r14
.L4593:
	movzbl	16(%rbp), %ebx
	jmp	.L4153
.L4680:
	movq	104(%rsi), %rax
	testq	%rax, %rax
	je	.L4159
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L4159
	testb	$2, 17(%rax)
	je	.L4159
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L4160
	jmp	.L4159
	.p2align 6,,7
.L4677:
	movq	104(%rsi), %rbp
	jmp	.L4593
.L4126:
	movzbl	16(%rbp), %ebx
	movl	%r12d, %edx
	movq	%rbp, %rdi
	xorl	%r12d, %r12d
	cmpb	$116, %bl
	je	.L4573
	cmpb	$115, %bl
	jne	.L4384
	movq	32(%rbp), %rsi
	cmpq	%rcx, 8(%rsi)
	jne	.L4384
	.p2align 4,,7
.L4132:
	cmpb	$116, %bl
	movl	$1, %eax
	movq	%rsi, %rbp
	movzbl	16(%rsi), %ebx
	cmove	%eax, %r12d
	cmpb	$116, %bl
	jne	.L4681
.L4573:
	movq	32(%rbp), %rsi
	jmp	.L4132
.L4681:
	cmpb	$115, %bl
	jne	.L4384
	movq	32(%rsi), %rsi
	movq	8(%rbp), %r11
	cmpq	%r11, 8(%rsi)
	je	.L4132
	jmp	.L4384
	.p2align 6,,7
.L4313:
	leal	-6(%rbx), %esi
	movl	$.LC28, %edi
	cmpl	$2, %esi
	ja	.L4597
	testl	%r13d, %r13d
	jne	.L4567
	movzbl	16(%rcx), %r12d
	cmpl	$23, %r12d
	je	.L4318
	cmpl	$18, %r12d
	je	.L4318
	movzbl	16(%rbp), %ebx
	cmpb	$32, %bl
	je	.L4682
	movl	optimize(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4345
	cmpb	$34, %bl
	je	.L4683
.L4345:
	cmpb	$116, %bl
	movq	%rbp, %rdx
	je	.L4587
	cmpb	$115, %bl
	jne	.L4418
	movq	32(%rbp), %rsi
	movq	8(%rbp), %r8
	cmpq	%r8, 8(%rsi)
	jne	.L4418
	.p2align 4,,7
.L4357:
	movzbl	16(%rsi), %ebx
	movq	%rsi, %rbp
	cmpb	$116, %bl
	jne	.L4684
.L4587:
	movq	32(%rbp), %rsi
	jmp	.L4357
.L4684:
	cmpb	$115, %bl
	jne	.L4418
	movq	32(%rsi), %rsi
	movq	8(%rbp), %r13
	cmpq	%r13, 8(%rsi)
	je	.L4357
	jmp	.L4418
.L4683:
	movl	pedantic(%rip), %edx
	testl	%edx, %edx
	jne	.L4345
	cmpb	$51, 48(%rbp)
	je	.L4345
	cmpq	$0, current_function_decl(%rip)
	je	.L4351
	movzbl	17(%rbp), %ebx
	andb	$24, %bl
	cmpb	$16, %bl
	je	.L4685
.L4351:
	movq	%rbp, %rsi
.L4352:
	movq	%rsi, %rbp
	movq	8(%rsi), %r14
.L4595:
	movzbl	16(%rbp), %ebx
	jmp	.L4345
.L4685:
	movq	104(%rbp), %rax
	testq	%rax, %rax
	je	.L4351
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L4351
	testb	$2, 17(%rax)
	je	.L4351
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L4352
	jmp	.L4351
	.p2align 6,,7
.L4682:
	movq	104(%rbp), %rbp
	jmp	.L4595
.L4318:
	movzbl	16(%rbp), %ebx
	movl	%r12d, %edx
	movq	%rbp, %rdi
	xorl	%r12d, %r12d
	cmpb	$116, %bl
	je	.L4585
	cmpb	$115, %bl
	jne	.L4384
	movq	32(%rbp), %rsi
	cmpq	%rcx, 8(%rsi)
	jne	.L4384
	.p2align 4,,7
.L4324:
	cmpb	$116, %bl
	movl	$1, %eax
	movq	%rsi, %rbp
	movzbl	16(%rsi), %ebx
	cmove	%eax, %r12d
	cmpb	$116, %bl
	jne	.L4686
.L4585:
	movq	32(%rbp), %rsi
	jmp	.L4324
.L4686:
	cmpb	$115, %bl
	jne	.L4384
	movq	32(%rsi), %rsi
	movq	8(%rbp), %r14
	cmpq	%r14, 8(%rsi)
	je	.L4324
	jmp	.L4384
	.p2align 6,,7
.L4185:
	cmpl	$8, %ebx
	je	.L4687
	cmpl	$6, %ebx
	movl	$.LC27, %edi
	jne	.L4597
	testl	%r13d, %r13d
	jne	.L4567
	movzbl	16(%rcx), %r12d
	cmpl	$23, %r12d
	je	.L4254
	cmpl	$18, %r12d
	je	.L4254
	movzbl	16(%rsi), %ebx
	cmpb	$32, %bl
	je	.L4688
	movl	optimize(%rip), %eax
	testl	%eax, %eax
	je	.L4281
	cmpb	$34, %bl
	je	.L4689
.L4281:
	cmpb	$116, %bl
	movq	%rbp, %rdx
	je	.L4583
	cmpb	$115, %bl
	jne	.L4418
	movq	32(%rbp), %rsi
	movq	8(%rbp), %rdi
	cmpq	%rdi, 8(%rsi)
	jne	.L4418
.L4293:
	movzbl	16(%rsi), %ebx
	movq	%rsi, %rbp
	cmpb	$116, %bl
	jne	.L4690
.L4583:
	movq	32(%rbp), %rsi
	jmp	.L4293
.L4690:
	cmpb	$115, %bl
	jne	.L4418
	movq	32(%rsi), %rsi
	movq	8(%rbp), %r11
	cmpq	%r11, 8(%rsi)
	je	.L4293
	jmp	.L4418
.L4689:
	movl	pedantic(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L4281
	cmpb	$51, 48(%rsi)
	je	.L4281
	cmpq	$0, current_function_decl(%rip)
	je	.L4287
	movzbl	17(%rsi), %r9d
	andb	$24, %r9b
	cmpb	$16, %r9b
	je	.L4691
.L4287:
	movq	%rbp, %rsi
.L4288:
	movq	%rsi, %rbp
	movq	8(%rsi), %r14
.L4594:
	movzbl	16(%rbp), %ebx
	jmp	.L4281
.L4691:
	movq	104(%rsi), %rax
	testq	%rax, %rax
	je	.L4287
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L4287
	testb	$2, 17(%rax)
	je	.L4287
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L4288
	jmp	.L4287
	.p2align 6,,7
.L4688:
	movq	104(%rsi), %rbp
	jmp	.L4594
.L4254:
	movzbl	16(%rbp), %ebx
	movl	%r12d, %edx
	movq	%rbp, %rdi
	xorl	%r12d, %r12d
	cmpb	$116, %bl
	je	.L4581
	cmpb	$115, %bl
	jne	.L4384
	movq	32(%rbp), %rsi
	cmpq	%rcx, 8(%rsi)
	jne	.L4384
.L4260:
	cmpb	$116, %bl
	movl	$1, %eax
	movq	%rsi, %rbp
	movzbl	16(%rsi), %ebx
	cmove	%eax, %r12d
	cmpb	$116, %bl
	jne	.L4692
.L4581:
	movq	32(%rbp), %rsi
	jmp	.L4260
.L4692:
	cmpb	$115, %bl
	jne	.L4384
	movq	32(%rsi), %rsi
	movq	8(%rbp), %r13
	cmpq	%r13, 8(%rsi)
	je	.L4260
	jmp	.L4384
.L4687:
	movl	pedantic(%rip), %r12d
	movl	$126, %r15d
	testl	%r12d, %r12d
	jne	.L4693
.L4187:
	testl	%r13d, %r13d
	jne	.L4567
	movq	8(%rbp), %r14
	movzbl	16(%r14), %r12d
	movq	%r14, %r13
	cmpl	$23, %r12d
	je	.L4190
	cmpl	$18, %r12d
	je	.L4190
	movzbl	16(%rbp), %ebx
	cmpb	$32, %bl
	je	.L4694
	movl	optimize(%rip), %r10d
	testl	%r10d, %r10d
	je	.L4217
	cmpb	$34, %bl
	je	.L4695
.L4217:
	cmpb	$116, %bl
	movq	%rbp, %rdx
	je	.L4579
	cmpb	$115, %bl
	je	.L4696
.L4226:
	movzbl	%bl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L4231
	cmpb	$49, %al
	je	.L4231
	cmpb	$50, %al
	je	.L4231
	cmpb	$101, %al
	je	.L4231
.L4230:
	cmpl	$10, %r12d
	je	.L4697
	cmpb	$39, %bl
	je	.L4698
.L4239:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L4244
	testb	$32, 17(%r13)
	je	.L4437
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L4438
	movzwl	60(%r13), %edx
	jmp	.L4635
.L4244:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L4439
	movl	flag_allow_single_precision(%rip), %edx
	testl	%edx, %edx
	jne	.L4439
	movq	global_trees+192(%rip), %r8
	cmpq	%r8, 128(%r13)
	jmp	.L4639
.L4698:
	movq	40(%rbp), %rdx
	testb	$2, 53(%rdx)
	je	.L4239
	movq	integer_types+40(%rip), %rcx
	movq	40(%rdx), %rdi
	movzwl	60(%rcx), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L4239
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L4437
	testb	$32, 17(%r13)
	jmp	.L4636
	.p2align 6,,7
.L4697:
	movq	integer_types+40(%rip), %rbx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r12d
	movzwl	60(%rbx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r12d, %r12d
	jne	.L4238
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L4429
.L4238:
	testb	$32, 17(%r13)
	jmp	.L4632
.L4231:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbp)
	jmp	.L4230
.L4696:
	movq	32(%rbp), %rsi
	movq	8(%rbp), %rdi
	cmpq	%rdi, 8(%rsi)
	jne	.L4226
.L4229:
	movzbl	16(%rsi), %ebx
	movq	%rsi, %rbp
	cmpb	$116, %bl
	jne	.L4699
.L4579:
	movq	32(%rbp), %rsi
	jmp	.L4229
.L4699:
	cmpb	$115, %bl
	jne	.L4226
	movq	32(%rsi), %rsi
	movq	8(%rbp), %r11
	cmpq	%r11, 8(%rsi)
	je	.L4229
	jmp	.L4226
.L4695:
	movl	pedantic(%rip), %r9d
	testl	%r9d, %r9d
	jne	.L4221
	cmpb	$51, 48(%rbp)
	je	.L4221
	cmpq	$0, current_function_decl(%rip)
	je	.L4223
	movzbl	17(%rbp), %r14d
	andb	$24, %r14b
	cmpb	$16, %r14b
	je	.L4700
.L4223:
	movq	%rbp, %rsi
.L4224:
	movq	%rsi, %rbp
	movq	8(%rsi), %r14
	movzbl	16(%rsi), %ebx
.L4221:
	movq	%r14, %r13
	jmp	.L4217
.L4700:
	movq	104(%rbp), %rax
	testq	%rax, %rax
	je	.L4223
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L4223
	testb	$2, 17(%rax)
	je	.L4223
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L4224
	jmp	.L4223
	.p2align 6,,7
.L4694:
	movq	104(%rbp), %rbp
	movzbl	16(%rbp), %ebx
	jmp	.L4217
.L4190:
	movzbl	16(%rbp), %ebx
	movl	%r12d, %ecx
	movq	%rbp, %rdx
	xorl	%r12d, %r12d
	cmpb	$116, %bl
	je	.L4577
	cmpb	$115, %bl
	je	.L4701
.L4192:
	movzbl	%bl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L4198
	cmpb	$49, %al
	je	.L4198
	cmpb	$50, %al
	je	.L4198
	cmpb	$101, %al
	je	.L4198
.L4197:
	cmpl	$23, %ecx
	je	.L4619
	cmpl	$18, %ecx
	jne	.L4567
	movzbl	%bl, %edi 
	xorl	%edx, %edx
	xorl	%r10d, %r10d
	movzbl	tree_code_type(%rdi), %eax
	movq	8(%r13), %r14
	cmpb	$114, %al
	je	.L4203
	cmpb	$100, %al
	je	.L4203
.L4202:
	movzbl	17(%r13), %r8d
	movzbl	62(%r13), %r9d
	movl	$1, %esi
	movl	%r8d, %edi
	movl	%r8d, %ecx
	movl	%r9d, %r11d
	shrb	$4, %dil
	shrb	$3, %cl
	shrb	$5, %r11b
	andl	%edi, %esi
	andl	$1, %ecx
	andl	$1, %r11d
	movzbl	16(%r13), %edi
	addl	%ecx, %ecx
	sall	$2, %r11d
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	orl	%r11d, %esi
	cmpb	$20, %dil
	je	.L4702
.L4206:
	leal	0(,%rcx,8), %r13d
	orl	%r13d, %esi
	jne	.L4205
	testl	%edx, %edx
	jne	.L4205
	testl	%r10d, %r10d
	je	.L4204
.L4205:
	movl	%r8d, %ecx
	shrb	$5, %r9b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %cl
	movl	%r9d, %ebx
	movl	%r8d, %r11d
	andl	%ecx, %esi
	andl	$1, %ebx
	andl	$1, %r11d
	sall	$2, %ebx
	xorl	%ecx, %ecx
	addl	%r11d, %r11d
	orl	%r11d, %esi
	orl	%ebx, %esi
	cmpb	$20, %dil
	je	.L4703
.L4208:
	leal	0(,%rcx,8), %r8d
	movq	%r14, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r10,%r10), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%rbp), %ebx
	movq	%rax, %r14
.L4204:
	cmpb	$41, %bl
	je	.L4704
	cmpb	$47, %bl
	je	.L4620
	xorl	%ebx, %ebx
	testl	%r12d, %r12d
	je	.L4705
.L4211:
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L4212
	testl	%ebx, %ebx
	movq	%rbp, %r12
	je	.L4055
.L4212:
	movq	%r14, %rdi
	jmp	.L4631
.L4705:
	movq	%rbp, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L4211
.L4704:
	movq	72(%r14), %rdi
	jmp	.L4629
.L4703:
	testq	%r14, %r14
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L4208
.L4702:
	testq	%r14, %r14
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L4206
.L4203:
	movzbl	17(%rbp), %r9d
	movl	$1, %r10d
	movl	%r9d, %edx
	shrb	$3, %r9b
	shrb	$4, %dl
	andl	%r9d, %r10d
	andl	$1, %edx
	jmp	.L4202
.L4198:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbp)
	jmp	.L4197
.L4701:
	movq	32(%rbp), %rsi
	cmpq	%r14, 8(%rsi)
	jne	.L4192
.L4196:
	cmpb	$116, %bl
	movl	$1, %eax
	movq	%rsi, %rbp
	movzbl	16(%rsi), %ebx
	cmove	%eax, %r12d
	cmpb	$116, %bl
	jne	.L4706
.L4577:
	movq	32(%rbp), %rsi
	jmp	.L4196
.L4706:
	cmpb	$115, %bl
	jne	.L4192
	movq	32(%rsi), %rsi
	movq	8(%rbp), %r14
	cmpq	%r14, 8(%rsi)
	je	.L4196
	jmp	.L4192
.L4693:
	movl	$.LC26, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L4187
	.p2align 6,,7
.L4441:
	leal	-6(%rbx), %r15d
	cmpl	$1, %r15d
	jbe	.L4442
	cmpl	$13, %ebx
	je	.L4442
	cmpl	$8, %ebx
	je	.L4442
	cmpl	$18, %ebx
	je	.L4442
	cmpl	$23, %ebx
	movl	$.LC30, %edi
	jne	.L4597
.L4442:
	movq	%rbp, %rdi
	call	truthvalue_conversion
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	movq	%rax, %rdi
	jmp	invert_truthvalue
.L4528:
	movzbl	16(%rsi), %eax
	cmpb	$41, %al
	je	.L4707
	cmpb	$43, %al
	je	.L4708
	movl	%r13d, %edx
	call	unary_complex_lvalue
	testq	%rax, %rax
	movq	%rax, %r12
	jne	.L4052
	cmpl	$23, %ebx
	je	.L4534
	testl	%r13d, %r13d
	je	.L4709
.L4534:
	movzbq	16(%rbp), %r12
	movq	8(%rbp), %rdi
	movzbl	tree_code_type(%r12), %eax
	cmpb	$100, %al
	je	.L4537
	cmpb	$114, %al
	je	.L4537
.L4536:
	call	build_pointer_type
	movq	%rbp, %rdi
	movq	%rax, %r12
	call	mark_addressable
	testl	%eax, %eax
	je	.L4608
	cmpb	$39, 16(%rbp)
	je	.L4710
	movl	%r15d, %edi
	movq	%r12, %rsi
	movq	%rbp, %rdx
	call	build1
.L4603:
	movq	%rbp, %rdi
	movq	%rax, %r12
	call	staticp
	testl	%eax, %eax
	je	.L4052
	cmpb	$30, 16(%rbp)
	je	.L4711
.L4544:
	orb	$2, 17(%r12)
	jmp	.L4052
.L4711:
	cmpq	$0, 80(%rbp)
	je	.L4544
	jmp	.L4052
.L4710:
	movq	40(%rbp), %r14
	movq	32(%rbp), %rsi
	movl	$121, %edi
	movl	%r13d, %edx
	call	build_unary_op
	testb	$2, 53(%r14)
	movq	%rax, %rsi
	jne	.L4712
	movq	%r12, %rdi
	call	convert
	movq	%r14, %rdi
	movq	%rax, %r15
	call	byte_position
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	convert
	movq	%r15, %rdx
	movq	%r12, %rsi
	movq	%rax, %rcx
	movl	$59, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	jmp	.L4603
.L4712:
	movq	72(%r14), %r13
	movl	$.LC41, %edi
	xorl	%eax, %eax
	movq	32(%r13), %rsi
	call	error
	jmp	.L4608
	.p2align 6,,7
.L4537:
	movzbl	17(%rbp), %edx
	testb	$24, %dl
	je	.L4536
	testb	$16, %dl
	setne	%bl
	movzbl	%bl, %esi
	movl	%esi, %r14d
	orl	$2, %r14d
	andb	$8, %dl
	cmovne	%r14d, %esi
	call	c_build_qualified_type
	movq	%rax, %rdi
	jmp	.L4536
.L4709:
	movq	%rbp, %rdi
	movl	$.LC40, %esi
	call	lvalue_or_else
	testl	%eax, %eax
	je	.L4608
	jmp	.L4534
.L4708:
	movq	32(%rsi), %rdi
	call	mark_addressable
	testl	%eax, %eax
	je	.L4608
	movq	32(%rbp), %rsi
	movq	40(%rbp), %rdx
	movl	$59, %edi
	addq	$8, %rsp
	movl	$1, %ecx
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	build_binary_op
.L4707:
	movq	32(%rsi), %rdi
	call	lvalue_p
	testl	%eax, %eax
	jne	.L4713
.L4530:
	movq	32(%rbp), %r12
	jmp	.L4052
.L4713:
	movq	32(%rbp), %rdi
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	non_lvalue
	.p2align 6,,7
.L4377:
	leal	-6(%rbx), %r12d
	movl	$.LC29, %edi
	cmpl	$2, %r12d
	ja	.L4597
	testl	%r13d, %r13d
	jne	.L4567
	movzbl	16(%rcx), %r12d
	cmpl	$23, %r12d
	je	.L4382
	cmpl	$18, %r12d
	je	.L4382
	movzbl	16(%rsi), %ebx
	cmpb	$32, %bl
	je	.L4714
	movl	optimize(%rip), %r13d
	testl	%r13d, %r13d
	je	.L4409
	cmpb	$34, %bl
	je	.L4715
.L4409:
	cmpb	$116, %bl
	movq	%rbp, %rdx
	je	.L4591
	cmpb	$115, %bl
	jne	.L4418
	movq	32(%rbp), %rsi
	movq	8(%rbp), %rdi
	cmpq	%rdi, 8(%rsi)
	jne	.L4418
	.p2align 4,,7
.L4421:
	movzbl	16(%rsi), %ebx
	movq	%rsi, %rbp
	cmpb	$116, %bl
	jne	.L4716
.L4591:
	movq	32(%rbp), %rsi
	jmp	.L4421
.L4716:
	cmpb	$115, %bl
	jne	.L4418
	movq	32(%rsi), %r9
	movq	8(%rbp), %rcx
	cmpq	%rcx, 8(%r9)
	movq	%r9, %rsi
	je	.L4421
	jmp	.L4418
.L4715:
	movl	pedantic(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L4409
	cmpb	$51, 48(%rsi)
	je	.L4409
	cmpq	$0, current_function_decl(%rip)
	je	.L4415
	movzbl	17(%rsi), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L4717
.L4415:
	movq	%rbp, %rsi
.L4416:
	movq	%rsi, %rbp
	movq	8(%rsi), %r14
.L4596:
	movzbl	16(%rbp), %ebx
	jmp	.L4409
.L4717:
	movq	104(%rbp), %rax
	testq	%rax, %rax
	je	.L4415
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L4415
	testb	$2, 17(%rax)
	je	.L4415
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L4416
	jmp	.L4415
	.p2align 6,,7
.L4714:
	movq	104(%rsi), %rbp
	jmp	.L4596
.L4382:
	movzbl	16(%rbp), %ebx
	movl	%r12d, %edx
	movq	%rbp, %rdi
	xorl	%r12d, %r12d
	cmpb	$116, %bl
	je	.L4589
	cmpb	$115, %bl
	jne	.L4384
	movq	32(%rbp), %rsi
	cmpq	%rcx, 8(%rsi)
	jne	.L4384
	.p2align 4,,7
.L4388:
	cmpb	$116, %bl
	movl	$1, %eax
	movq	%rsi, %rbp
	movzbl	16(%rsi), %ebx
	cmove	%eax, %r12d
	cmpb	$116, %bl
	jne	.L4718
.L4589:
	movq	32(%rbp), %rsi
	jmp	.L4388
.L4718:
	cmpb	$115, %bl
	jne	.L4384
	movq	32(%rsi), %rsi
	movq	8(%rbp), %r10
	cmpq	%r10, 8(%rsi)
	je	.L4388
	jmp	.L4384
	.p2align 6,,7
.L4444:
	cmpb	$27, 16(%rsi)
	je	.L4530
	cmpb	$8, 16(%rcx)
	je	.L4719
	movq	%rsi, %r12
	jmp	.L4052
.L4719:
	movl	$127, %edi
.L4627:
	movq	8(%rcx), %rsi
	movq	%rbp, %rdx
	jmp	.L4609
.L4449:
	cmpb	$27, 16(%rsi)
	je	.L4720
	cmpb	$8, 16(%rcx)
	je	.L4721
	movq	global_trees+88(%rip), %rsi
	movq	%rcx, %rdi
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	convert
.L4721:
	movl	$128, %edi
	jmp	.L4627
.L4720:
	movq	40(%rsi), %r12
	jmp	.L4052
.L4457:
	xorl	%edx, %edx
	call	unary_complex_lvalue
	testq	%rax, %rax
	movq	%rax, %r12
	jne	.L4052
	cmpl	$8, %ebx
	je	.L4722
	cmpl	$13, %ebx
	je	.L4461
	cmpl	$6, %ebx
	je	.L4461
	cmpl	$7, %ebx
	je	.L4461
	cmpl	$130, %r15d
	je	.L4463
	cmpl	$132, %r15d
	movl	$.LC33, %edi
	jne	.L4597
.L4463:
	movl	$.LC32, %edi
	jmp	.L4597
.L4461:
	movq	%rbp, %rdi
	xorl	%esi, %esi
	movq	8(%rbp), %r12
	call	get_unwidened
	cmpl	$13, %ebx
	movq	%rax, %rbp
	movq	8(%rax), %r13
	je	.L4723
	movq	global_trees+96(%rip), %rsi
.L4483:
	movq	%r13, %rdi
	call	convert
	movq	%rax, %r14
.L4510:
	movzbl	16(%rbp), %eax
	cmpl	$72, %eax
	jb	.L4508
	cmpl	$76, %eax
	jbe	.L4494
	subl	$114, %eax
	cmpl	$1, %eax
	ja	.L4508
.L4494:
	movl	$114, %edi
	call	pedantic_lvalue_warning
	movq	32(%rbp), %rdi
	movq	8(%rbp), %rcx
	movq	8(%rdi), %rsi
	movzbl	16(%rsi), %r9d
	cmpb	%r9b, 16(%rcx)
	jne	.L4495
	movzbl	61(%rcx), %eax
	movzbl	61(%rsi), %r8d
	andb	$-2, %al
	andb	$-2, %r8b
	cmpb	%r8b, %al
	jne	.L4495
	movq	%rdi, %rbp
	jmp	.L4510
.L4495:
	cmpb	$11, 16(%rcx)
	je	.L4724
	movq	%rbp, %rdi
	call	stabilize_reference
	leal	-129(%r15), %edi
	cmpl	$1, %edi
	movq	%rax, %rbx
	movq	%rax, %rbp
	ja	.L4725
.L4500:
	cmpl	$130, %r15d
	je	.L4506
	cmpl	$132, %r15d
	movl	$60, %edi
	je	.L4506
.L4505:
	movq	%r14, %rcx
	movq	%r13, %rsi
	movq	%rbp, %rdx
	xorl	%eax, %eax
	call	build
	movl	$115, %esi
	movq	%rbx, %rdi
	orb	$1, 17(%rax)
	movq	%rax, %rdx
	call	build_modify_expr
	movq	%rbp, %rcx
	movq	8(%rbx), %rsi
	movq	%rax, %rdx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
.L4602:
	orb	$1, 18(%rax)
	movq	%rax, %r12
	jmp	.L4052
.L4506:
	movl	$59, %edi
	jmp	.L4505
.L4725:
	movq	%rax, %rdi
	call	save_expr
	movq	%rax, %rbp
	jmp	.L4500
.L4724:
	movl	%r15d, %edi
	movq	%rbp, %rsi
	call	boolean_increment
	jmp	.L4602
.L4508:
	cmpl	$130, %r15d
	je	.L4517
	cmpl	$132, %r15d
	movl	$.LC37, %esi
	je	.L4517
.L4516:
	movq	%rbp, %rdi
	call	lvalue_or_else
	testl	%eax, %eax
	je	.L4608
	testb	$16, 17(%rbp)
	je	.L4518
	cmpl	$130, %r15d
	je	.L4524
	cmpl	$132, %r15d
	movl	$.LC39, %esi
	je	.L4524
.L4523:
	movq	%rbp, %rdi
	call	readonly_warning
.L4518:
	movq	8(%rbp), %rsi
	cmpb	$11, 16(%rsi)
	je	.L4726
	movl	%r15d, %edi
	movq	%rbp, %rdx
	movq	%r14, %rcx
	xorl	%eax, %eax
	call	build
.L4526:
	orb	$1, 17(%rax)
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	convert
	movzbl	16(%rax), %r11d
	movq	%rax, %r12
	cmpl	%r15d, %r11d
	je	.L4052
	orb	$4, 18(%rax)
	jmp	.L4052
.L4726:
	movl	%r15d, %edi
	movq	%rbp, %rsi
	call	boolean_increment
	jmp	.L4526
.L4524:
	movl	$.LC38, %esi
	jmp	.L4523
.L4517:
	movl	$.LC36, %esi
	jmp	.L4516
.L4723:
	movq	8(%r12), %rbx
	cmpq	$0, 32(%rbx)
	movq	%rbx, %rax
	jne	.L4466
	cmpb	$5, 16(%rbx)
	je	.L4466
	cmpl	$130, %r15d
	je	.L4468
	cmpl	$132, %r15d
	movl	$.LC35, %edi
	je	.L4468
.L4600:
	xorl	%eax, %eax
	call	error
.L4599:
	movq	8(%r12), %rbx
.L4470:
	movzbl	16(%rbx), %edx
	movzbl	%dl, %eax
	cmpl	$23, %eax
	je	.L4601
	cmpl	$5, %eax
	je	.L4601
	testl	%eax, %eax
	je	.L4601
	cmpq	$0, 32(%rbx)
	jne	.L4480
	cmpb	$5, %dl
	je	.L4480
	movl	$.LC23, %edi
	xorl	%eax, %eax
	call	error
.L4601:
	movq	global_trees+128(%rip), %rsi
	jmp	.L4483
.L4480:
	movq	integer_types(%rip), %rcx
	xorl	%esi, %esi
	movzwl	60(%rcx), %edi
	shrq	$3, %rdi
	andl	$63, %edi
	call	size_int_wide
	movq	40(%rbx), %rsi
	movl	$63, %edi
	movq	%rax, %rdx
	call	size_binop
	movq	%rax, %rsi
	jmp	.L4483
.L4468:
	movl	$.LC34, %edi
	jmp	.L4600
.L4466:
	movl	pedantic(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L4472
	movl	warn_pointer_arith(%rip), %esi
	testl	%esi, %esi
	je	.L4470
.L4472:
	movzbl	16(%rax), %eax
	cmpb	$23, %al
	je	.L4473
	cmpb	$5, %al
	jne	.L4470
.L4473:
	cmpl	$130, %r15d
	je	.L4475
	cmpl	$132, %r15d
	movl	$.LC33, %edi
	je	.L4475
.L4598:
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L4599
.L4475:
	movl	$.LC32, %edi
	jmp	.L4598
	.p2align 6,,7
.L4722:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	jne	.L4727
.L4460:
	movq	%rbp, %rdi
	call	stabilize_reference
	movl	$1, %edx
	movl	$127, %edi
	movq	%rax, %rsi
	movq	%rax, %r14
	call	build_unary_op
	movl	$1, %edx
	movq	%r14, %rsi
	movq	%rax, %rbx
	movl	$128, %edi
	call	build_unary_op
	movl	$1, %edx
	movq	%rbx, %rsi
	movl	%r15d, %edi
	movq	%rax, %rbp
	call	build_unary_op
	movq	%rbp, %rcx
	movq	8(%r14), %rsi
	addq	$8, %rsp
	movq	%rax, %rdx
	movl	$125, %edi
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	xorl	%eax, %eax
	jmp	build
.L4727:
	movl	$.LC31, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L4460
.LFE3:
.Lfe3:
	.size	build_unary_op,.Lfe3-build_unary_op
	.align 2
	.p2align 4,,15
.globl lvalue_p
	.type	lvalue_p,@function
lvalue_p:
.LFB4:
	.p2align 4,,7
.L4733:
	movzbl	16(%rdi), %eax
	cmpl	$41, %eax
	je	.L4741
	cmpl	$41, %eax
	ja	.L4747
	cmpl	$36, %eax
	jbe	.L4751
	cmpl	$39, %eax
	jne	.L4745
.L4732:
	movq	32(%rdi), %rdi
	jmp	.L4733
.L4745:
	xorl	%edx, %edx
.L4728:
	movl	%edx, %eax
	ret
.L4751:
	cmpl	$34, %eax
	jae	.L4741
	testl	%eax, %eax
	je	.L4741
	cmpl	$29, %eax
.L4750:
	jne	.L4745
	movl	$1, %edx
	jmp	.L4728
.L4741:
	movq	8(%rdi), %rcx
	xorl	%edx, %edx
	movzbl	16(%rcx), %eax
	cmpb	$23, %al
	je	.L4728
	cmpb	$16, %al
	movl	$1, %eax
	cmovne	%eax, %edx
	jmp	.L4728
	.p2align 6,,7
.L4747:
	cmpl	$120, %eax
	je	.L4744
	cmpl	$120, %eax
	jbe	.L4753
	cmpl	$127, %eax
	jb	.L4745
	cmpl	$128, %eax
	jbe	.L4732
	cmpl	$170, %eax
	jmp	.L4750
.L4753:
	cmpl	$43, %eax
	je	.L4741
	cmpl	$52, %eax
	jne	.L4745
.L4744:
	movq	8(%rdi), %rcx
	xorl	%edx, %edx
	cmpb	$18, 16(%rcx)
	sete	%dl
	jmp	.L4728
.LFE4:
.Lfe4:
	.size	lvalue_p,.Lfe4-lvalue_p
	.section	.rodata.str1.1
.LC42:
	.string	"%s"
	.text
	.align 2
	.p2align 4,,15
.globl lvalue_or_else
	.type	lvalue_or_else,@function
lvalue_or_else:
.LFB5:
	subq	$24, %rsp
.LCFI21:
	movq	%rbx, 8(%rsp)
.LCFI22:
	movq	%rbp, 16(%rsp)
.LCFI23:
	movq	%rsi, %rbp
	call	lvalue_p
	testl	%eax, %eax
	movl	%eax, %ebx
	je	.L4756
.L4755:
	movl	%ebx, %eax
	movq	16(%rsp), %rbp
	movq	8(%rsp), %rbx
	addq	$24, %rsp
	ret
	.p2align 6,,7
.L4756:
	movl	$.LC42, %edi
	movq	%rbp, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L4755
.LFE5:
.Lfe5:
	.size	lvalue_or_else,.Lfe5-lvalue_or_else
	.align 2
	.p2align 4,,15
	.type	unary_complex_lvalue,@function
unary_complex_lvalue:
.LFB6:
	subq	$40, %rsp
.LCFI24:
	movq	%rbp, 16(%rsp)
.LCFI25:
	movq	%r12, 24(%rsp)
.LCFI26:
	movq	%r13, 32(%rsp)
.LCFI27:
	movq	%rbx, 8(%rsp)
.LCFI28:
	movl	%edi, %r12d
	movq	%rsi, %rbp
	movzbl	16(%rsi), %eax
	movl	%edx, %r13d
	cmpb	$47, %al
	je	.L4763
	cmpb	$51, %al
	je	.L4764
	movq	8(%rsp), %rbx
	movq	16(%rsp), %rbp
	xorl	%eax, %eax
	movq	24(%rsp), %r12
	movq	32(%rsp), %r13
	addq	$40, %rsp
	ret
	.p2align 6,,7
.L4764:
	testl	%edx, %edx
	je	.L4765
.L4761:
	movq	8(%rbp), %rdx
	cmpb	$23, 16(%rdx)
	je	.L4762
	testl	%r13d, %r13d
	je	.L4766
.L4762:
	movq	40(%rbp), %rsi
	movl	%r12d, %edi
	movl	%r13d, %edx
	call	build_unary_op
	movl	%r13d, %edx
	movq	48(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, %rbx
	call	build_unary_op
	movq	32(%rsp), %r13
	movq	24(%rsp), %r12
	movq	32(%rbp), %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movq	8(%rsp), %rbx
	movq	16(%rsp), %rbp
	addq	$40, %rsp
	jmp	build_conditional_expr
.L4766:
	movl	$47, %edi
	call	pedantic_lvalue_warning
	jmp	.L4762
.L4765:
	movl	$51, %edi
	call	pedantic_lvalue_warning
	jmp	.L4761
	.p2align 6,,7
.L4763:
	movq	40(%rsi), %rsi
	xorl	%edx, %edx
	call	build_unary_op
	movq	8(%rbp), %rdx
	movq	%rax, %rbx
	cmpb	$23, 16(%rdx)
	je	.L4759
	testl	%r13d, %r13d
	je	.L4767
.L4759:
	movq	8(%rbx), %rsi
	movq	32(%rbp), %rdx
	movq	%rbx, %rcx
	movq	16(%rsp), %rbp
	movq	24(%rsp), %r12
	movl	$47, %edi
	movq	8(%rsp), %rbx
	movq	32(%rsp), %r13
	xorl	%eax, %eax
	addq	$40, %rsp
	jmp	build
.L4767:
	movl	$47, %edi
	call	pedantic_lvalue_warning
	jmp	.L4759
.LFE6:
.Lfe6:
	.size	unary_complex_lvalue,.Lfe6-unary_complex_lvalue
	.section	.rodata.str1.32
	.align 32
.LC45:
	.string	"ISO C forbids use of cast expressions as lvalues"
	.align 32
.LC43:
	.string	"ISO C forbids use of conditional expressions as lvalues"
	.align 32
.LC44:
	.string	"ISO C forbids use of compound expressions as lvalues"
	.text
	.align 2
	.p2align 4,,15
	.type	pedantic_lvalue_warning,@function
pedantic_lvalue_warning:
.LFB7:
	subq	$8, %rsp
.LCFI29:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	je	.L4768
	cmpl	$47, %edi
	je	.L4772
	cmpl	$51, %edi
	je	.L4776
	movl	$.LC45, %edi
	xorl	%eax, %eax
	call	pedwarn
.L4768:
	addq	$8, %rsp
	ret
	.p2align 6,,7
.L4776:
	movl	$.LC43, %edi
.L4775:
	xorl	%eax, %eax
	addq	$8, %rsp
	jmp	pedwarn
.L4772:
	movl	$.LC44, %edi
	jmp	.L4775
.LFE7:
.Lfe7:
	.size	pedantic_lvalue_warning,.Lfe7-pedantic_lvalue_warning
	.section	.rodata.str1.1
.LC46:
	.string	"%s of read-only member `%s'"
.LC48:
	.string	"%s of read-only location"
.LC47:
	.string	"%s of read-only variable `%s'"
	.text
	.align 2
	.p2align 4,,15
.globl readonly_warning
	.type	readonly_warning,@function
readonly_warning:
.LFB8:
	.p2align 4,,7
.L4785:
	movzbl	16(%rdi), %eax
	movq	%rdi, %rdx
	cmpb	$39, %al
	jne	.L4778
	movq	32(%rdi), %rdi
	movq	8(%rdi), %rcx
	testb	$16, 17(%rcx)
	jne	.L4785
	movq	40(%rdx), %rcx
	movl	$.LC46, %edi
	movq	72(%rcx), %rax
.L4786:
	movq	32(%rax), %rdx
	xorl	%eax, %eax
	jmp	pedwarn
.L4778:
	cmpb	$34, %al
	je	.L4787
	movl	$.LC48, %edi
	xorl	%eax, %eax
	jmp	pedwarn
.L4787:
	movq	72(%rdi), %rax
	movl	$.LC47, %edi
	jmp	.L4786
.LFE8:
.Lfe8:
	.size	readonly_warning,.Lfe8-readonly_warning
	.section	.rodata.str1.32
	.align 32
.LC49:
	.string	"cannot take address of bit-field `%s'"
	.align 32
.LC50:
	.string	"global register variable `%s' used in nested function"
	.align 32
.LC51:
	.string	"register variable `%s' used in nested function"
	.align 32
.LC53:
	.string	"cannot put object with volatile field into register"
	.align 32
.LC54:
	.string	"address of register variable `%s' requested"
	.align 32
.LC52:
	.string	"address of global register variable `%s' requested"
	.text
	.align 2
	.p2align 4,,15
.globl mark_addressable
	.type	mark_addressable,@function
mark_addressable:
.LFB9:
	pushq	%rbx
.LCFI30:
	movq	%rdi, %rbx
	.p2align 4,,7
.L4818:
	movzbl	16(%rbx), %eax
	cmpl	$43, %eax
	je	.L4798
	cmpl	$43, %eax
	ja	.L4815
	cmpl	$36, %eax
	jbe	.L4823
	cmpl	$39, %eax
	jne	.L4813
	movq	40(%rbx), %rax
	testb	$2, 53(%rax)
	jne	.L4825
.L4798:
	movq	32(%rbx), %rbx
	jmp	.L4818
.L4825:
	movq	72(%rax), %rax
	movl	$.LC49, %edi
.L4822:
	movq	32(%rax), %rsi
	xorl	%eax, %eax
	call	error
.L4820:
	xorl	%eax, %eax
.L4788:
	popq	%rbx
	ret
.L4813:
	movl	$1, %eax
	jmp	.L4788
.L4823:
	cmpl	$34, %eax
	jae	.L4804
	cmpl	$30, %eax
	je	.L4812
	cmpl	$32, %eax
	jne	.L4813
.L4804:
	movzbl	49(%rbx), %eax
	testb	$4, %al
	je	.L4805
	testb	$4, 17(%rbx)
	jne	.L4805
	testb	$2, %al
	je	.L4805
	testb	$8, 18(%rbx)
	je	.L4806
	movq	72(%rbx), %rax
	movl	$.LC50, %edi
	jmp	.L4822
.L4806:
	movq	72(%rbx), %rax
	movl	$.LC51, %edi
.L4819:
	movq	32(%rax), %rsi
	xorl	%eax, %eax
	call	pedwarn
.L4807:
	movq	%rbx, %rdi
	call	put_var_into_stack
.L4812:
	orb	$4, 17(%rbx)
	jmp	.L4813
.L4805:
	testb	$4, %al
	je	.L4807
	testb	$4, 17(%rbx)
	jne	.L4807
	testb	$8, 18(%rbx)
	jne	.L4826
	movq	8(%rbx), %rdx
	testb	$4, 19(%rdx)
	je	.L4810
	movl	$.LC53, %edi
	xorl	%eax, %eax
	call	error
	jmp	.L4820
.L4810:
	movq	72(%rbx), %rax
	movl	$.LC54, %edi
	jmp	.L4819
.L4826:
	movq	72(%rbx), %rax
	movl	$.LC52, %edi
	jmp	.L4822
	.p2align 6,,7
.L4815:
	cmpl	$128, %eax
	ja	.L4817
	cmpl	$127, %eax
	jae	.L4798
	cmpl	$46, %eax
	je	.L4812
	cmpl	$121, %eax
	je	.L4798
	jmp	.L4813
.L4817:
	cmpl	$170, %eax
	je	.L4812
	jmp	.L4813
.LFE9:
.Lfe9:
	.size	mark_addressable,.Lfe9-mark_addressable
	.section	.rodata.str1.32
	.align 32
.LC55:
	.string	"signed and unsigned type in conditional expression"
	.align 32
.LC60:
	.string	"type mismatch in conditional expression"
	.align 32
.LC59:
	.string	"pointer/integer type mismatch in conditional expression"
	.align 32
.LC58:
	.string	"pointer type mismatch in conditional expression"
	.align 32
.LC57:
	.string	"ISO C forbids conditional expr between `void *' and function pointer"
	.align 32
.LC56:
	.string	"ISO C forbids conditional expr with only one void side"
	.text
	.align 2
	.p2align 4,,15
.globl build_conditional_expr
	.type	build_conditional_expr,@function
build_conditional_expr:
.LFB10:
	pushq	%r15
.LCFI31:
	pushq	%r14
.LCFI32:
	movq	%rdx, %r14
	pushq	%r13
.LCFI33:
	movq	%rsi, %r13
	pushq	%r12
.LCFI34:
	pushq	%rbp
.LCFI35:
	pushq	%rbx
.LCFI36:
	movq	%rdi, %rbx
	subq	$328, %rsp
.LCFI37:
	movq	$0, 8(%rsp)
	movq	%rsi, 320(%rsp)
	movq	%rdx, 312(%rsp)
	movq	8(%rdi), %r12
	movzbl	16(%r12), %ebp
	movq	%r12, %rax
	cmpl	$23, %ebp
	je	.L4829
	cmpl	$18, %ebp
	je	.L4829
	movzbl	16(%rdi), %ecx
	cmpb	$32, %cl
	je	.L6278
	movl	optimize(%rip), %r15d
	testl	%r15d, %r15d
	je	.L4855
	cmpb	$34, %cl
	je	.L6279
.L4855:
	cmpb	$116, %cl
	movq	%rbx, %rdx
	je	.L6164
	cmpb	$115, %cl
	je	.L6280
.L4864:
	movzbl	%cl, %edi 
	movzbl	tree_code_type(%rdi), %eax
	cmpb	$60, %al
	je	.L4869
	cmpb	$49, %al
	je	.L4869
	cmpb	$50, %al
	je	.L4869
	cmpb	$101, %al
	je	.L4869
.L4868:
	cmpl	$10, %ebp
	je	.L6281
	cmpb	$39, %cl
	je	.L6282
.L4874:
	movq	%r12, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L4877
	testb	$32, 17(%r12)
	je	.L4878
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L4879
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r12), %r9d
	movzwl	60(%rdx), %r12d
	andl	$511, %r9d
	andl	$511, %r12d
	cmpl	%r12d, %r9d
	je	.L4879
.L4878:
	movq	integer_types+40(%rip), %rdi
.L6182:
	movq	%rbx, %rsi
.L6183:
	call	convert
.L6185:
	movq	%rax, %rbp
.L4853:
	movq	%rbp, %rdi
	call	truthvalue_conversion
	movq	%rax, 232(%rsp)
	movq	8(%r13), %rbp
	movzbl	16(%rbp), %eax
	movq	%rbp, %rdi
	cmpb	$5, %al
	je	.L4882
	movzbl	%al, %ebx
	cmpl	$23, %ebx
	je	.L4884
	cmpl	$18, %ebx
	je	.L4884
	movzbl	16(%r13), %ecx
	cmpb	$32, %cl
	je	.L6283
	movl	optimize(%rip), %eax
	testl	%eax, %eax
	je	.L4911
	cmpb	$34, %cl
	je	.L6284
.L4911:
	cmpb	$116, %cl
	movq	%r13, %rdx
	je	.L6168
	cmpb	$115, %cl
	je	.L6285
.L4920:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L4925
	cmpb	$49, %al
	je	.L4925
	cmpb	$50, %al
	je	.L4925
	cmpb	$101, %al
	je	.L4925
.L4924:
	cmpl	$10, %ebx
	je	.L6286
	cmpb	$39, %cl
	je	.L6287
.L4933:
	movq	%rbp, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L4938
	testb	$32, 17(%rbp)
	je	.L4939
	movl	flag_traditional(%rip), %r8d
	testl	%r8d, %r8d
	jne	.L4940
	movq	integer_types+40(%rip), %r12
	movzwl	60(%rbp), %r11d
	movzwl	60(%r12), %ebp
	andl	$511, %r11d
	andl	$511, %ebp
	cmpl	%ebp, %r11d
	je	.L4940
.L4939:
	movq	integer_types+40(%rip), %rdi
.L6187:
	movq	%r13, %rsi
.L6188:
	call	convert
.L6190:
	movq	%rax, %rbx
.L4909:
	movq	%rbx, %r13
.L4882:
	movq	8(%r14), %rbp
	movzbl	16(%rbp), %eax
	movq	%rbp, %rsi
	cmpb	$5, %al
	je	.L4943
	movzbl	%al, %ebx
	cmpl	$23, %ebx
	je	.L4945
	cmpl	$18, %ebx
	je	.L4945
	movzbl	16(%r14), %ecx
	cmpb	$32, %cl
	je	.L6288
	movl	optimize(%rip), %eax
	testl	%eax, %eax
	je	.L4972
	cmpb	$34, %cl
	je	.L6289
.L4972:
	cmpb	$116, %cl
	movq	%r14, %rsi
	je	.L6172
	cmpb	$115, %cl
	je	.L6290
.L4981:
	movzbl	%cl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L4986
	cmpb	$49, %al
	je	.L4986
	cmpb	$50, %al
	je	.L4986
	cmpb	$101, %al
	je	.L4986
.L4985:
	cmpl	$10, %ebx
	je	.L6291
	cmpb	$39, %cl
	je	.L6292
.L4994:
	movq	%rbp, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L4999
	testb	$32, 17(%rbp)
	je	.L5000
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L5001
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%rbp), %r12d
	movzwl	60(%rdx), %edi
	andl	$511, %r12d
	andl	$511, %edi
	cmpl	%edi, %r12d
	je	.L5001
.L5000:
	movq	integer_types+40(%rip), %rdi
.L6192:
	movq	%r14, %rsi
.L6193:
	call	convert
.L6195:
	movq	%rax, %rbx
.L4970:
	movq	%rbx, %r14
.L4943:
	movq	232(%rsp), %r11
	cmpb	$0, 16(%r11)
	je	.L6232
	movq	8(%r13), %r12
	movzbl	16(%r12), %eax
	testb	%al, %al
	je	.L6232
	movq	8(%r14), %r15
	movzbl	16(%r15), %edx
	testb	%dl, %dl
	je	.L6232
	movq	%r15, 96(%rsp)
	movzbl	%al, %esi
	movzbl	%dl, %edx
	movq	128(%r12), %rax
	cmpq	128(%r15), %rax
	je	.L6293
	leal	-6(%rsi), %ebp
	cmpl	$2, %ebp
	ja	.L5010
	leal	-6(%rdx), %r9d
	cmpl	$2, %r9d
	ja	.L5010
	cmpq	%r15, %r12
	movq	%r12, 8(%rsp)
	je	.L5012
	movq	global_trees(%rip), %rax
	cmpq	%rax, %r12
	je	.L6294
	cmpq	%rax, %r15
	je	.L5012
	movq	8(%rsp), %rdi
	movq	%r15, %rsi
	call	*targetm+248(%rip)
	movq	8(%rsp), %rbx
	movq	%rax, 304(%rsp)
	cmpb	$10, 16(%rbx)
	je	.L6295
.L5015:
	cmpb	$10, 16(%r15)
	je	.L6296
.L5016:
	movq	8(%rsp), %r10
	movq	96(%rsp), %r15
	movzbl	16(%r10), %ebx
	movzbl	16(%r15), %ebp
	cmpl	$8, %ebx
	je	.L6105
	cmpl	$8, %ebp
	je	.L6159
	leal	-6(%rbx), %eax
	cmpl	$17, %eax
	ja	.L5408
	mov	%eax, %esi
	jmp	*.L5409(,%rsi,8)
	.section	.rodata
	.align 8
	.align 4
.L5409:
	.quad	.L5029
	.quad	.L5029
	.quad	.L5408
	.quad	.L5408
	.quad	.L5408
	.quad	.L5408
	.quad	.L5408
	.quad	.L5046
	.quad	.L5408
	.quad	.L5408
	.quad	.L5408
	.quad	.L5408
	.quad	.L5051
	.quad	.L5408
	.quad	.L5408
	.quad	.L5408
	.quad	.L5408
	.quad	.L5058
	.text
.L5029:
	cmpl	$7, %ebx
	je	.L6298
	cmpl	$7, %ebp
	je	.L6106
.L5031:
	movq	8(%rsp), %rbx
	movq	96(%rsp), %rdi
	movzwl	60(%rbx), %edx
	movzwl	60(%rdi), %eax
	andl	$511, %edx
	andl	$511, %eax
	cmpl	%eax, %edx
	jg	.L6209
	cmpl	%edx, %eax
	jg	.L5044
	movq	8(%rsp), %r12
	movq	integer_types+64(%rip), %rcx
	movq	128(%r12), %rdx
	cmpq	%rcx, %rdx
	je	.L6211
	movq	96(%rsp), %r11
	movq	128(%r11), %rax
	cmpq	%rcx, %rax
	je	.L6211
	movq	integer_types+56(%rip), %rdi
	cmpq	%rdi, %rdx
	je	.L5038
	cmpq	%rdi, %rax
	je	.L5038
	movq	global_trees+208(%rip), %rdi
	cmpq	%rdi, %rdx
	je	.L6205
	cmpq	%rdi, %rax
	je	.L6205
	movq	8(%rsp), %rcx
	testb	$32, 17(%rcx)
	jne	.L6211
.L5044:
	movq	96(%rsp), %rdi
.L6205:
	movq	304(%rsp), %rsi
	call	build_type_attribute_variant
	movq	%rax, 8(%rsp)
.L5012:
	movl	warn_sign_compare(%rip), %eax
	testl	%eax, %eax
	js	.L5411
	testl	%eax, %eax
.L6216:
	je	.L5009
	movl	skip_evaluation(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L5009
	movq	320(%rsp), %rdx
	movq	312(%rsp), %r11
	movq	8(%rdx), %r9
	movq	8(%r11), %rcx
	movzbl	17(%r9), %esi
	movzbl	17(%rcx), %eax
	shrb	$5, %sil
	shrb	$5, %al
	movl	%esi, %ebx
	andl	$1, %eax
	andl	$1, %ebx
	cmpl	%eax, %ebx
	je	.L5009
	movq	8(%rsp), %r10
	testb	$32, 17(%r10)
	je	.L5009
	testl	%eax, %eax
	jne	.L6299
.L5418:
	testl	%ebx, %ebx
	je	.L5416
	movq	%r14, %rdi
	call	tree_expr_nonnegative_p
	testl	%eax, %eax
	jne	.L5009
.L5416:
	movl	$.LC55, %edi
	xorl	%eax, %eax
	call	warning
.L5009:
	cmpq	$0, 8(%rsp)
	jne	.L6023
	movl	flag_cond_mismatch(%rip), %eax
	testl	%eax, %eax
	je	.L6024
	movq	global_trees+216(%rip), %rdx
	movq	%rdx, 8(%rsp)
.L6023:
	movzbl	17(%r13), %eax
	xorl	%esi, %esi
	testb	$16, %al
	jne	.L6027
	testb	$16, 17(%r14)
	je	.L6026
.L6027:
	movl	$1, %esi
.L6026:
	testb	$8, %al
	jne	.L6029
	testb	$8, 17(%r14)
	je	.L6028
.L6029:
	orl	$2, %esi
.L6028:
	movq	8(%rsp), %rdi
	call	build_qualified_type
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L6030
	movq	%r13, %rsi
	movq	%rax, %rdi
	call	convert_and_check
	movq	%rax, %r13
.L6030:
	cmpq	8(%r14), %rbx
	je	.L6031
	movq	%r14, %rsi
	movq	%rbx, %rdi
	call	convert_and_check
	movq	%rax, %r14
.L6031:
	movq	232(%rsp), %rdx
	cmpb	$25, 16(%rdx)
	je	.L6300
	movq	232(%rsp), %rdx
	movl	$51, %edi
	movq	%rbx, %rsi
	movq	%r13, %rcx
	movq	%r14, %r8
	xorl	%eax, %eax
	call	build
	addq	$328, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	movq	%rax, %rdi
	jmp	fold
.L6300:
	movq	%rdx, %rdi
	call	integer_zerop
	testl	%eax, %eax
	cmove	%r13, %r14
	addq	$328, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	movq	%r14, %rdi
	popq	%r14
	popq	%r15
	jmp	pedantic_non_lvalue
.L6024:
	movl	$.LC60, %edi
	xorl	%eax, %eax
	call	error
.L6232:
	movq	global_trees(%rip), %rax
	addq	$328, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L6299:
	movq	%r13, %rdi
	call	tree_expr_nonnegative_p
	testl	%eax, %eax
	jne	.L5009
	jmp	.L5418
	.p2align 6,,7
.L5411:
	movl	extra_warnings(%rip), %r8d
	testl	%r8d, %r8d
	jmp	.L6216
.L6211:
	movq	%rcx, %rdi
	jmp	.L6205
.L5038:
	movq	8(%rsp), %rbx
	testb	$32, 17(%rbx)
	jne	.L6211
	movq	96(%rsp), %rax
	testb	$32, 17(%rax)
	je	.L6205
	jmp	.L6211
.L6209:
	movq	%rbx, %rdi
	jmp	.L6205
.L6106:
	cmpl	$7, %ebx
	jne	.L5044
	jmp	.L5031
.L6298:
	cmpl	$7, %ebp
	je	.L6106
.L5408:
	movq	8(%rsp), %rdi
	jmp	.L6205
.L5046:
	movq	8(%rsp), %rdx
	movq	96(%rsp), %r10
	movq	8(%rdx), %rbx
	movq	8(%r10), %rbp
	movq	128(%rbx), %rdi
	movq	128(%rbp), %rsi
	call	common_type
	xorl	%ecx, %ecx
	movzbl	62(%rbx), %r9d
	movzbl	17(%rbx), %r15d
	movq	%rax, %rdi
	shrb	$5, %r9b
	movl	%r15d, %edx
	andl	$1, %r9d
	shrb	$3, %r15b
	shrb	$4, %dl
	andl	$1, %r15d
	sall	$2, %r9d
	andl	$1, %edx
	addl	%r15d, %r15d
	orl	%r15d, %edx
	orl	%r9d, %edx
	cmpb	$20, 16(%rbx)
	je	.L6301
.L5049:
	leal	0(,%rcx,8), %esi
	movzbl	62(%rbp), %r8d
	movzbl	17(%rbp), %ecx
	orl	%edx, %esi
	movl	%ecx, %edx
	shrb	$5, %r8b
	shrb	$3, %cl
	shrb	$4, %dl
	andl	$1, %ecx
	andl	$1, %r8d
	addl	%ecx, %ecx
	andl	$1, %edx
	sall	$2, %r8d
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	orl	%r8d, %edx
	cmpb	$20, 16(%rbp)
	je	.L6302
.L5050:
	leal	0(,%rcx,8), %ebp
	orl	%ebp, %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movq	%rax, %rdi
	call	build_pointer_type
.L6215:
	movq	%rax, %rdi
	jmp	.L6205
.L6302:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L5050
.L6301:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L5049
.L5051:
	movq	8(%rsp), %rsi
	movq	96(%rsp), %r12
	movq	8(%rsi), %rdi
	movq	8(%r12), %rsi
	call	common_type
	movq	%rax, %rdi
	movq	8(%rsp), %rax
	cmpq	8(%rax), %rdi
	je	.L6303
.L5052:
	movq	96(%rsp), %rdx
	cmpq	8(%rdx), %rdi
	je	.L6304
.L5053:
	movq	8(%rsp), %r11
	cmpq	$0, 24(%r11)
	cmove	96(%rsp), %r11
	movq	24(%r11), %rsi
	call	build_array_type
	jmp	.L6215
.L6304:
	cmpq	$0, 24(%rdx)
	je	.L5053
.L6206:
	movq	%rdx, %rdi
	jmp	.L6205
.L6303:
	cmpq	$0, 24(%rax)
	je	.L5052
	jmp	.L6215
.L5058:
	movq	8(%rsp), %rbx
	movq	96(%rsp), %r15
	movq	8(%rbx), %rdi
	movq	8(%r15), %rsi
	call	common_type
	movq	96(%rsp), %r9
	movq	%rax, 296(%rsp)
	movq	296(%rsp), %rdi
	movq	24(%rbx), %rax
	movq	%rax, 200(%rsp)
	movq	24(%r9), %rax
	movq	%rax, 208(%rsp)
	cmpq	8(%rbx), %rdi
	je	.L6305
.L5059:
	movq	96(%rsp), %rcx
	movq	296(%rsp), %r10
	cmpq	8(%rcx), %r10
	je	.L6306
	cmpq	$0, 200(%rsp)
	je	.L6307
.L5061:
	cmpq	$0, 208(%rsp)
	jne	.L5062
	movq	296(%rsp), %rdi
	movq	200(%rsp), %rsi
.L6233:
	call	build_function_type
	jmp	.L6215
.L5062:
	xorl	%edi, %edi
	call	pushlevel
	movl	$1, %edi
	call	declare_parm_level
	movq	200(%rsp), %rdi
	call	list_length
	movq	$0, 224(%rsp)
	testl	%eax, %eax
	jle	.L6044
	movl	%eax, %ebx
.L5067:
	movq	224(%rsp), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	call	tree_cons
	decl	%ebx
	movq	%rax, 224(%rsp)
	jne	.L5067
.L6044:
	cmpq	$0, 200(%rsp)
	movq	224(%rsp), %r8
	movq	%r8, 216(%rsp)
	je	.L6046
.L5407:
	movq	200(%rsp), %rbp
	movq	32(%rbp), %rdx
	testq	%rdx, %rdx
	jne	.L5072
	movq	208(%rsp), %r12
	movq	216(%rsp), %rcx
	movq	32(%r12), %rdx
	movq	%rdx, 32(%rcx)
.L5073:
.L5070:
	movq	200(%rsp), %rax
	movq	208(%rsp), %rdi
	movq	216(%rsp), %r15
	movq	(%rax), %r10
	movq	%r10, 200(%rsp)
	testq	%r10, %r10
	movq	(%rdi), %r12
	movq	%r12, 208(%rsp)
	movq	(%r15), %rbp
	movq	%rbp, 216(%rsp)
	jne	.L5407
.L6046:
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	call	poplevel
	movq	224(%rsp), %rsi
	movq	296(%rsp), %rdi
	call	build_function_type
	movq	%rax, 8(%rsp)
	jmp	.L5408
.L5072:
	movq	208(%rsp), %rsi
	movq	32(%rsi), %rax
	testq	%rax, %rax
	jne	.L5074
	movq	216(%rsp), %r11
	movq	%rdx, 32(%r11)
	jmp	.L5070
.L5074:
	cmpb	$21, 16(%rdx)
	je	.L6308
.L5075:
	cmpb	$21, 16(%rax)
	je	.L6309
.L5241:
	movq	200(%rsp), %rdx
	movq	208(%rsp), %r9
	movq	32(%rdx), %rdi
	movq	32(%r9), %rsi
	call	common_type
	movq	216(%rsp), %rsi
	movq	%rax, 32(%rsi)
	jmp	.L5070
.L6309:
	movq	200(%rsp), %rbx
	movq	32(%rbx), %rcx
	cmpq	%rcx, %rax
	je	.L5241
	movq	24(%rax), %r9
	testq	%r9, %r9
	movq	%r9, 168(%rsp)
	je	.L5241
.L5406:
	movq	168(%rsp), %rbp
	movq	8(%rbp), %rbx
	movq	%rcx, %rbp
	cmpq	%rcx, %rbx
	je	.L6203
	testq	%rbx, %rbx
	je	.L6203
	testq	%rcx, %rcx
	je	.L6203
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L6203
	movzbl	16(%rcx), %eax
	testb	%al, %al
	je	.L6203
	cmpb	$6, %dl
	je	.L6310
.L5250:
	cmpb	$6, %al
	je	.L6311
.L5251:
	cmpb	$10, %dl
	je	.L6312
.L5252:
	cmpb	$10, 16(%rbp)
	je	.L6313
.L5253:
	cmpq	%rbp, %rbx
	movl	$1, 152(%rsp)
	je	.L5249
	movzbl	16(%rbx), %esi
	cmpb	16(%rbp), %sil
	je	.L5255
	movl	$0, 152(%rsp)
.L5249:
	movl	152(%rsp), %r15d
	testl	%r15d, %r15d
	jne	.L6314
.L5244:
	movq	168(%rsp), %r11
	movq	(%r11), %rcx
	testq	%rcx, %rcx
	movq	%rcx, 168(%rsp)
	je	.L5241
	movq	200(%rsp), %rax
	movq	32(%rax), %rcx
	jmp	.L5406
.L6314:
	movq	200(%rsp), %rax
	movq	216(%rsp), %r12
	movq	32(%rax), %rdi
	movq	%rdi, 32(%r12)
.L6241:
	movl	pedantic(%rip), %r8d
	testl	%r8d, %r8d
	je	.L5070
	movl	$.LC10, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L5070
.L5255:
	movzbl	17(%rbx), %edi
	movzbl	62(%rbx), %r12d
	xorl	%ecx, %ecx
	movl	%edi, %edx
	shrb	$5, %r12b
	shrb	$3, %dil
	shrb	$4, %dl
	andl	$1, %edi
	andl	$1, %r12d
	andl	$1, %edx
	addl	%edi, %edi
	sall	$2, %r12d
	orl	%edi, %edx
	orl	%r12d, %edx
	cmpb	$20, %sil
	je	.L6315
.L5257:
	leal	0(,%rcx,8), %edi
	movzbl	62(%rbp), %r8d
	movzbl	17(%rbp), %ecx
	orl	%edx, %edi
	movl	%ecx, %edx
	shrb	$5, %r8b
	shrb	$3, %cl
	shrb	$4, %dl
	andl	$1, %ecx
	andl	$1, %r8d
	addl	%ecx, %ecx
	andl	$1, %edx
	sall	$2, %r8d
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	orl	%r8d, %edx
	cmpb	$20, %sil
	je	.L6316
.L5258:
	leal	0(,%rcx,8), %esi
	movl	$0, 152(%rsp)
	orl	%esi, %edx
	cmpl	%edx, %edi
	jne	.L5249
	movq	128(%rbp), %r15
	cmpq	%r15, 128(%rbx)
	je	.L6203
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	*targetm+264(%rip)
	movl	$0, 152(%rsp)
	testl	%eax, %eax
	movl	%eax, 288(%rsp)
	je	.L5249
	movl	$0, 152(%rsp)
	movzbl	16(%rbx), %eax
	cmpl	$18, %eax
	je	.L5384
	cmpl	$18, %eax
	ja	.L5401
	cmpl	$13, %eax
	je	.L5262
.L5261:
	cmpl	$2, 288(%rsp)
	jne	.L5249
	cmpl	$1, 152(%rsp)
	movl	288(%rsp), %eax
	cmovne	152(%rsp), %eax
	movl	%eax, 152(%rsp)
	jmp	.L5249
.L5262:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L5263
	call	comptypes
.L6201:
	movl	%eax, 152(%rsp)
	jmp	.L5261
.L5263:
	movl	$1, 152(%rsp)
	jmp	.L5261
.L5401:
	cmpl	$20, %eax
	je	.L5397
	cmpl	$23, %eax
	jne	.L5261
	movl	$1, 164(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L5266
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 164(%rsp)
	je	.L5261
.L5266:
	movq	24(%rbx), %r15
	movq	24(%rbp), %r12
	testq	%r15, %r15
	je	.L6317
	testq	%r12, %r12
	je	.L6318
	movl	$1, 152(%rsp)
	xorl	%ebp, %ebp
.L5381:
	testq	%r15, %r15
	je	.L6319
	testq	%r12, %r12
	je	.L5370
	movq	32(%r15), %rdi
	testq	%rdi, %rdi
	je	.L6320
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L5356
.L6240:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L5370
.L5355:
	cmpl	152(%rsp), %ebp
	movl	152(%rsp), %ebx
	cmovg	%ebp, %ebx
	movl	%ebx, 152(%rsp)
	movq	(%r12), %r12
	movq	(%r15), %r15
	jmp	.L5381
.L5370:
	movl	$0, 152(%rsp)
.L5350:
	cmpl	$1, 152(%rsp)
	movl	152(%rsp), %ebx
	cmove	164(%rsp), %ebx
.L6202:
	movl	%ebx, 152(%rsp)
	jmp	.L5261
.L5356:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %ebp
	jne	.L5355
	movq	32(%r15), %rax
	cmpb	$21, 16(%rax)
	je	.L6322
.L5360:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L5370
	cmpq	$0, 96(%rax)
	je	.L5371
	testb	$8, 62(%rax)
	je	.L5370
.L5371:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5370
	movq	32(%r15), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5370
	movq	32(%r12), %r9
	movq	24(%r9), %rbx
	testq	%rbx, %rbx
	je	.L5370
.L5377:
	movq	8(%rbx), %rdi
	movq	32(%r15), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5373
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5377
	jmp	.L5370
.L5373:
	testq	%rbx, %rbx
	jne	.L5355
	jmp	.L5370
.L6322:
	cmpq	$0, 96(%rax)
	je	.L5361
	testb	$8, 62(%rax)
	je	.L5360
.L5361:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5360
	movq	32(%r12), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5360
	movq	32(%r15), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L5370
.L5367:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5373
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5367
	jmp	.L5370
.L6320:
	movq	32(%r12), %rdi
	jmp	.L6240
.L6319:
	testq	%r12, %r12
	je	.L5350
	jmp	.L5370
.L6318:
	movq	%r15, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L5261
	movq	136(%rbp), %rax
	testq	%rax, %rax
	je	.L6091
	movq	%rax, %rbp
	movl	$1, %r12d
	movl	$0, 156(%rsp)
.L5345:
	testq	%r15, %r15
	je	.L6323
	testq	%rbp, %rbp
	je	.L5334
	movq	32(%r15), %rdi
	testq	%rdi, %rdi
	je	.L6324
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L5320
.L6239:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L5334
.L5319:
	cmpl	%r12d, 156(%rsp)
	movq	(%r15), %r15
	cmovg	156(%rsp), %r12d
	movq	(%rbp), %rbp
	jmp	.L5345
.L5334:
	xorl	%r12d, %r12d
.L5314:
	decl	%r12d
	movl	$2, 152(%rsp)
	jne	.L5261
	movl	164(%rsp), %ebp
	movl	%ebp, 152(%rsp)
	jmp	.L5261
.L5320:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 156(%rsp)
	jne	.L5319
	movq	32(%r15), %rax
	cmpb	$21, 16(%rax)
	je	.L6326
.L5324:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L5334
	cmpq	$0, 96(%rax)
	je	.L5335
	testb	$8, 62(%rax)
	je	.L5334
.L5335:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5334
	movq	32(%r15), %r8
	movq	32(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5334
	movq	32(%rbp), %rcx
	movq	24(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L5334
.L5341:
	movq	8(%rbx), %rdi
	movq	32(%r15), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5337
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5341
	jmp	.L5334
.L5337:
	testq	%rbx, %rbx
	jne	.L5319
	jmp	.L5334
.L6326:
	cmpq	$0, 96(%rax)
	je	.L5325
	testb	$8, 62(%rax)
	je	.L5324
.L5325:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5324
	movq	32(%rbp), %r10
	movq	32(%r10), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5324
	movq	32(%r15), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L5334
.L5331:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5337
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5331
	jmp	.L5334
.L6324:
	movq	32(%rbp), %rdi
	jmp	.L6239
.L6323:
	testq	%rbp, %rbp
	je	.L5314
	jmp	.L5334
.L6091:
	movl	164(%rsp), %eax
	jmp	.L6201
.L6317:
	movq	%r12, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L5261
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L6089
	movq	%rax, %rbp
	movl	$1, %r15d
	movl	$0, 160(%rsp)
.L5306:
	testq	%r12, %r12
	je	.L6327
	testq	%rbp, %rbp
	je	.L5295
	movq	32(%r12), %rdi
	testq	%rdi, %rdi
	je	.L6328
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L5281
.L6238:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L5295
.L5280:
	cmpl	%r15d, 160(%rsp)
	movq	(%r12), %r12
	cmovg	160(%rsp), %r15d
	movq	(%rbp), %rbp
	jmp	.L5306
.L5295:
	xorl	%r15d, %r15d
.L5275:
	decl	%r15d
	movl	$2, 152(%rsp)
	jne	.L5261
	movl	164(%rsp), %ebx
	jmp	.L6202
.L5281:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 160(%rsp)
	jne	.L5280
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	je	.L6330
.L5285:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L5295
	cmpq	$0, 96(%rax)
	je	.L5296
	testb	$8, 62(%rax)
	je	.L5295
.L5296:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5295
	movq	32(%r12), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5295
	movq	32(%rbp), %r9
	movq	24(%r9), %rbx
	testq	%rbx, %rbx
	je	.L5295
.L5302:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5298
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5302
	jmp	.L5295
.L5298:
	testq	%rbx, %rbx
	jne	.L5280
	jmp	.L5295
.L6330:
	cmpq	$0, 96(%rax)
	je	.L5286
	testb	$8, 62(%rax)
	je	.L5285
.L5286:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5285
	movq	32(%rbp), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5285
	movq	32(%r12), %rdx
	movq	24(%rdx), %rbx
	testq	%rbx, %rbx
	je	.L5295
.L5292:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5298
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5292
	jmp	.L5295
.L6328:
	movq	32(%rbp), %rdi
	jmp	.L6238
.L6327:
	testq	%rbp, %rbp
	je	.L5275
	jmp	.L5295
.L6089:
	movl	164(%rsp), %eax
	movl	%eax, 152(%rsp)
	jmp	.L5261
.L5397:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmovne	152(%rsp), %eax
	jmp	.L6201
.L5384:
	movq	24(%rbx), %r12
	movq	24(%rbp), %r15
	movl	$1, 152(%rsp)
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L5385
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 152(%rsp)
	je	.L5244
.L5385:
	testq	%r12, %r12
	je	.L5261
	testq	%r15, %r15
	je	.L5261
	cmpq	%r15, %r12
	je	.L5261
	movq	112(%r12), %rcx
	movq	112(%r15), %rsi
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L5388
	movq	104(%r12), %r10
	cmpb	$25, 16(%r10)
	je	.L6331
.L5389:
	movl	$1, %r8d
.L5388:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L5390
	movq	104(%r15), %rbp
	cmpb	$25, 16(%rbp)
	je	.L6332
.L5391:
	movl	$1, %ecx
.L5390:
	testb	%r8b, %r8b
	jne	.L5261
	testb	%cl, %cl
	jne	.L5261
	testb	%dil, %dil
	je	.L6126
	testb	%dl, %dl
.L6200:
	jne	.L5261
.L5396:
	movl	$0, 152(%rsp)
	jmp	.L5261
.L6126:
	testb	%dl, %dl
	jne	.L5396
	movq	104(%r12), %rdi
	movq	104(%r15), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5396
	movq	112(%r12), %rdi
	movq	112(%r15), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L6200
.L6332:
	cmpb	$25, 16(%rsi)
	jne	.L5391
	jmp	.L5390
.L6331:
	cmpb	$25, 16(%rcx)
	jne	.L5389
	jmp	.L5388
.L6203:
	movl	$1, 152(%rsp)
	jmp	.L5249
.L6316:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L5258
.L6315:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L5257
.L6313:
	movzbl	17(%rbp), %esi
	movzwl	60(%rbp), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L5253
.L6312:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L5252
.L6311:
	testb	$2, 62(%rcx)
	je	.L5251
	movq	24(%rcx), %r10
	testq	%r10, %r10
	cmovne	%r10, %rbp
	jmp	.L5251
.L6310:
	testb	$2, 62(%rbx)
	je	.L5250
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L5250
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L5250
.L6308:
	cmpq	%rax, %rdx
	je	.L5075
	movq	24(%rdx), %rdi
	testq	%rdi, %rdi
	movq	%rdi, 192(%rsp)
	je	.L5075
.L5240:
	movq	192(%rsp), %r9
	movq	%rax, %rbp
	movq	8(%r9), %rbx
	cmpq	%rax, %rbx
	je	.L5082
	testq	%rbx, %rbx
	je	.L5082
	testq	%rax, %rax
	je	.L5082
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L5082
	movzbl	16(%rax), %ecx
	testb	%cl, %cl
	jne	.L5081
.L5082:
	movl	$1, 176(%rsp)
.L5083:
	movl	176(%rsp), %r8d
	testl	%r8d, %r8d
	jne	.L6333
.L5078:
	movq	192(%rsp), %rdx
	movq	(%rdx), %r11
	testq	%r11, %r11
	movq	%r11, 192(%rsp)
	jne	.L5240
	jmp	.L5075
.L6333:
	movq	216(%rsp), %rcx
	movq	%rax, 32(%rcx)
	jmp	.L6241
.L5081:
	cmpb	$6, %dl
	je	.L6334
.L5084:
	cmpb	$6, %cl
	je	.L6335
.L5085:
	cmpb	$10, %dl
	je	.L6336
.L5086:
	cmpb	$10, 16(%rbp)
	je	.L6337
.L5087:
	cmpq	%rbp, %rbx
	je	.L6338
	movzbl	16(%rbx), %edi
	cmpb	16(%rbp), %dil
	je	.L5089
	movl	$0, 176(%rsp)
.L6175:
	movq	208(%rsp), %rdi
	movq	32(%rdi), %rax
	jmp	.L5083
.L5089:
	movzbl	17(%rbx), %r8d
	movzbl	62(%rbx), %r10d
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	shrb	$5, %r10b
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	$1, %r8d
	andl	$1, %r10d
	andl	$1, %edx
	addl	%r8d, %r8d
	sall	$2, %r10d
	orl	%r8d, %edx
	orl	%r10d, %edx
	cmpb	$20, %dil
	je	.L6339
.L5091:
	movzbl	17(%rbp), %r12d
	leal	0(,%rcx,8), %esi
	movzbl	62(%rbp), %ecx
	orl	%edx, %esi
	movl	%r12d, %edx
	shrb	$5, %cl
	shrb	$3, %r12b
	shrb	$4, %dl
	andl	$1, %r12d
	andl	$1, %ecx
	andl	$1, %edx
	addl	%r12d, %r12d
	sall	$2, %ecx
	orl	%r12d, %edx
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L6340
.L5092:
	leal	0(,%rcx,8), %r11d
	orl	%r11d, %edx
	cmpl	%edx, %esi
	je	.L6341
.L6237:
	movl	$0, 176(%rsp)
.L6199:
	movq	208(%rsp), %r12
	movq	32(%r12), %rax
	jmp	.L5083
.L6341:
	movq	128(%rbp), %rax
	cmpq	%rax, 128(%rbx)
	je	.L6342
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	*targetm+264(%rip)
	testl	%eax, %eax
	movl	%eax, 292(%rsp)
	je	.L6237
	movl	$0, 176(%rsp)
	movzbl	16(%rbx), %eax
	cmpl	$18, %eax
	je	.L5218
	cmpl	$18, %eax
	ja	.L5235
	cmpl	$13, %eax
	je	.L5096
.L5095:
	cmpl	$2, 292(%rsp)
	je	.L6343
.L6174:
	movq	208(%rsp), %rsi
	movq	32(%rsi), %rax
	jmp	.L5083
.L6343:
	cmpl	$1, 176(%rsp)
	jne	.L6175
	movl	$2, 176(%rsp)
	jmp	.L6199
.L5096:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L5097
	call	comptypes
.L6197:
	movl	%eax, 176(%rsp)
	jmp	.L5095
.L5097:
	movl	$1, 176(%rsp)
	jmp	.L5095
.L5235:
	cmpl	$20, %eax
	je	.L5231
	cmpl	$23, %eax
	jne	.L5095
	movl	$1, 188(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L5100
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 188(%rsp)
	je	.L5095
.L5100:
	movq	24(%rbx), %r15
	movq	24(%rbp), %r12
	testq	%r15, %r15
	je	.L6344
	testq	%r12, %r12
	je	.L6345
	movl	$1, 176(%rsp)
	xorl	%ebp, %ebp
.L5215:
	testq	%r15, %r15
	je	.L6346
	testq	%r12, %r12
	je	.L5204
	movq	32(%r15), %rdi
	testq	%rdi, %rdi
	je	.L6347
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L5190
.L6236:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L5204
.L5189:
	cmpl	176(%rsp), %ebp
	movl	176(%rsp), %eax
	cmovg	%ebp, %eax
	movl	%eax, 176(%rsp)
	movq	(%r12), %r12
	movq	(%r15), %r15
	jmp	.L5215
.L5204:
	movl	$0, 176(%rsp)
.L5184:
	cmpl	$1, 176(%rsp)
	movl	176(%rsp), %ebx
	cmove	188(%rsp), %ebx
.L6198:
	movl	%ebx, 176(%rsp)
	jmp	.L5095
.L5190:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %ebp
	jne	.L5189
	movq	32(%r15), %rax
	cmpb	$21, 16(%rax)
	je	.L6349
.L5194:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L5204
	cmpq	$0, 96(%rax)
	je	.L5205
	testb	$8, 62(%rax)
	je	.L5204
.L5205:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5204
	movq	32(%r15), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5204
	movq	32(%r12), %r9
	movq	24(%r9), %rbx
	testq	%rbx, %rbx
	je	.L5204
.L5211:
	movq	8(%rbx), %rdi
	movq	32(%r15), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5207
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5211
	jmp	.L5204
.L5207:
	testq	%rbx, %rbx
	jne	.L5189
	jmp	.L5204
.L6349:
	cmpq	$0, 96(%rax)
	je	.L5195
	testb	$8, 62(%rax)
	je	.L5194
.L5195:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5194
	movq	32(%r12), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5194
	movq	32(%r15), %rdx
	movq	24(%rdx), %rbx
	testq	%rbx, %rbx
	je	.L5204
.L5201:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5207
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5201
	jmp	.L5204
.L6347:
	movq	32(%r12), %rdi
	jmp	.L6236
.L6346:
	testq	%r12, %r12
	je	.L5184
	jmp	.L5204
.L6345:
	movq	%r15, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L5095
	movq	136(%rbp), %rax
	testq	%rax, %rax
	je	.L6087
	movq	%rax, %rbp
	movl	$1, %r12d
	movl	$0, 180(%rsp)
.L5179:
	testq	%r15, %r15
	je	.L6350
	testq	%rbp, %rbp
	je	.L5168
	movq	32(%r15), %rdi
	testq	%rdi, %rdi
	je	.L6351
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L5154
.L6235:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L5168
.L5153:
	cmpl	%r12d, 180(%rsp)
	movq	(%r15), %r15
	cmovg	180(%rsp), %r12d
	movq	(%rbp), %rbp
	jmp	.L5179
.L5168:
	xorl	%r12d, %r12d
.L5148:
	decl	%r12d
	movl	$2, 176(%rsp)
	jne	.L5095
	movl	188(%rsp), %r15d
	movl	%r15d, 176(%rsp)
	jmp	.L5095
.L5154:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 180(%rsp)
	jne	.L5153
	movq	32(%r15), %rax
	cmpb	$21, 16(%rax)
	je	.L6353
.L5158:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L5168
	cmpq	$0, 96(%rax)
	je	.L5169
	testb	$8, 62(%rax)
	je	.L5168
.L5169:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5168
	movq	32(%r15), %r8
	movq	32(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5168
	movq	32(%rbp), %rcx
	movq	24(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L5168
.L5175:
	movq	8(%rbx), %rdi
	movq	32(%r15), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5171
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5175
	jmp	.L5168
.L5171:
	testq	%rbx, %rbx
	jne	.L5153
	jmp	.L5168
.L6353:
	cmpq	$0, 96(%rax)
	je	.L5159
	testb	$8, 62(%rax)
	je	.L5158
.L5159:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5158
	movq	32(%rbp), %r10
	movq	32(%r10), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5158
	movq	32(%r15), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L5168
.L5165:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5171
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5165
	jmp	.L5168
.L6351:
	movq	32(%rbp), %rdi
	jmp	.L6235
.L6350:
	testq	%rbp, %rbp
	je	.L5148
	jmp	.L5168
.L6087:
	movl	188(%rsp), %eax
	jmp	.L6197
.L6344:
	movq	%r12, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L5095
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L6085
	movq	%rax, %rbp
	movl	$1, %r15d
	movl	$0, 184(%rsp)
.L5140:
	testq	%r12, %r12
	je	.L6354
	testq	%rbp, %rbp
	je	.L5129
	movq	32(%r12), %rdi
	testq	%rdi, %rdi
	je	.L6355
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L5115
.L6234:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L5129
.L5114:
	cmpl	%r15d, 184(%rsp)
	movq	(%r12), %r12
	cmovg	184(%rsp), %r15d
	movq	(%rbp), %rbp
	jmp	.L5140
.L5129:
	xorl	%r15d, %r15d
.L5109:
	decl	%r15d
	movl	$2, 176(%rsp)
	jne	.L5095
	movl	188(%rsp), %ebx
	jmp	.L6198
.L5115:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 184(%rsp)
	jne	.L5114
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	je	.L6357
.L5119:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L5129
	cmpq	$0, 96(%rax)
	je	.L5130
	testb	$8, 62(%rax)
	je	.L5129
.L5130:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5129
	movq	32(%r12), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5129
	movq	32(%rbp), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L5129
.L5136:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5132
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5136
	jmp	.L5129
.L5132:
	testq	%rbx, %rbx
	jne	.L5114
	jmp	.L5129
.L6357:
	cmpq	$0, 96(%rax)
	je	.L5120
	testb	$8, 62(%rax)
	je	.L5119
.L5120:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5119
	movq	32(%rbp), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5119
	movq	32(%r12), %rdx
	movq	24(%rdx), %rbx
	testq	%rbx, %rbx
	je	.L5129
.L5126:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5132
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5126
	jmp	.L5129
.L6355:
	movq	32(%rbp), %rdi
	jmp	.L6234
.L6354:
	testq	%rbp, %rbp
	je	.L5109
	jmp	.L5129
.L6085:
	movl	188(%rsp), %ebp
	movl	%ebp, 176(%rsp)
	jmp	.L5095
.L5231:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmovne	176(%rsp), %eax
	jmp	.L6197
.L5218:
	movq	24(%rbx), %r12
	movq	24(%rbp), %r15
	movl	$1, 176(%rsp)
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L5219
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 176(%rsp)
	je	.L6173
.L5219:
	testq	%r12, %r12
	je	.L5095
	testq	%r15, %r15
	je	.L5095
	cmpq	%r15, %r12
	je	.L5095
	movq	112(%r12), %rcx
	movq	112(%r15), %rsi
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L5222
	movq	104(%r12), %rbp
	cmpb	$25, 16(%rbp)
	je	.L6358
.L5223:
	movl	$1, %r8d
.L5222:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L5224
	movq	104(%r15), %r10
	cmpb	$25, 16(%r10)
	je	.L6359
.L5225:
	movl	$1, %ecx
.L5224:
	testb	%r8b, %r8b
	jne	.L5095
	testb	%cl, %cl
	jne	.L5095
	testb	%dil, %dil
	je	.L6116
	testb	%dl, %dl
.L6196:
	jne	.L5095
.L5230:
	movl	$0, 176(%rsp)
	jmp	.L5095
.L6116:
	testb	%dl, %dl
	jne	.L5230
	movq	104(%r12), %rdi
	movq	104(%r15), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5230
	movq	112(%r12), %rdi
	movq	112(%r15), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L6196
.L6359:
	cmpb	$25, 16(%rsi)
	jne	.L5225
	jmp	.L5224
.L6358:
	cmpb	$25, 16(%rcx)
	jne	.L5223
	jmp	.L5222
.L6173:
	movq	208(%rsp), %r15
	movq	32(%r15), %rax
	jmp	.L5078
.L6342:
	movl	$1, 176(%rsp)
	jmp	.L6175
.L6340:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L5092
.L6339:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L5091
.L6338:
	movl	$1, 176(%rsp)
	jmp	.L6174
.L6337:
	movzbl	17(%rbp), %esi
	movzwl	60(%rbp), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L5087
.L6336:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L5086
.L6335:
	testb	$2, 62(%rax)
	je	.L5085
	movq	24(%rax), %r15
	testq	%r15, %r15
	cmovne	%r15, %rbp
	jmp	.L5085
.L6334:
	testb	$2, 62(%rbx)
	je	.L5084
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L5084
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L5084
.L6307:
	movq	96(%rsp), %rbx
	movq	296(%rsp), %rdi
	movq	24(%rbx), %rsi
	jmp	.L6233
.L6306:
	cmpq	$0, 200(%rsp)
	jne	.L5061
	jmp	.L6211
.L6305:
	testq	%rax, %rax
	jne	.L5059
	jmp	.L6209
	.p2align 6,,7
.L6159:
	movq	8(%rsp), %rdi
.L5020:
	cmpl	$8, %ebp
	movq	96(%rsp), %rsi
	je	.L6360
.L5022:
	call	common_type
	cmpl	$8, %ebx
	movq	%rax, %rdi
	je	.L6361
.L5023:
	cmpl	$8, %ebp
	je	.L6362
.L5025:
	call	build_complex_type
	jmp	.L6215
.L6362:
	movq	96(%rsp), %rcx
	cmpq	%rdi, 8(%rcx)
	jne	.L5025
	jmp	.L6211
	.p2align 6,,7
.L6361:
	movq	8(%rsp), %rdx
	cmpq	%rax, 8(%rdx)
	jne	.L5023
	jmp	.L6206
	.p2align 6,,7
.L6360:
	movq	8(%rsi), %rsi
	jmp	.L5022
.L6105:
	movq	8(%rsp), %r8
	movq	8(%r8), %rdi
	jmp	.L5020
.L6296:
	movzwl	60(%r15), %edi
	movl	$1, %esi
	andl	$511, %edi
	call	type_for_size
	movq	%rax, 96(%rsp)
	jmp	.L5016
.L6295:
	movzwl	60(%rbx), %edi
	movl	$1, %esi
	andl	$511, %edi
	call	type_for_size
	movq	%rax, 8(%rsp)
	jmp	.L5015
.L6294:
	movq	%r15, 8(%rsp)
	jmp	.L5012
	.p2align 6,,7
.L5010:
	cmpl	$5, %esi
	je	.L5422
	cmpl	$5, %edx
	je	.L5422
	cmpl	$13, %esi
	je	.L6363
.L6016:
	cmpl	$13, %edx
	jne	.L5009
	cmpl	$6, %esi
	jne	.L5009
	movq	%r13, %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L6364
	movq	global_trees+112(%rip), %r13
.L6022:
	movq	%r15, 8(%rsp)
	jmp	.L5009
.L6364:
	movl	$.LC59, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L6022
	.p2align 6,,7
.L6363:
	cmpl	$13, %edx
	je	.L6365
	cmpl	$6, %edx
	jne	.L6016
	movq	%r14, %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L6366
	movq	global_trees+112(%rip), %r14
.L6018:
	movq	%r12, 8(%rsp)
	jmp	.L5009
.L6366:
	movl	$.LC59, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L6018
	.p2align 6,,7
.L6365:
	movq	%r12, %rdi
	movq	%r15, %rsi
	movl	$1, %edx
	call	maybe_objc_comptypes
	testl	%eax, %eax
	js	.L6367
.L5429:
	testl	%eax, %eax
	je	.L5427
	cmpq	%r15, %r12
	movq	%r12, 8(%rsp)
	je	.L5009
	movq	global_trees(%rip), %rax
	cmpq	%rax, %r12
	je	.L6022
	cmpq	%rax, %r15
	je	.L5009
	movq	8(%rsp), %rdi
	movq	%r15, %rsi
	call	*targetm+248(%rip)
	movq	8(%rsp), %rdx
	movq	%rax, 256(%rsp)
	cmpb	$10, 16(%rdx)
	je	.L6368
.L5593:
	cmpb	$10, 16(%r15)
	je	.L6369
.L5594:
	movq	8(%rsp), %r15
	movq	96(%rsp), %r12
	movzbl	16(%r15), %ebx
	movzbl	16(%r12), %ebp
	cmpl	$8, %ebx
	je	.L6137
	cmpl	$8, %ebp
	je	.L6160
	leal	-6(%rbx), %eax
	cmpl	$17, %eax
	ja	.L5986
	mov	%eax, %r9d
	jmp	*.L5987(,%r9,8)
	.section	.rodata
	.align 8
	.align 4
.L5987:
	.quad	.L5607
	.quad	.L5607
	.quad	.L5986
	.quad	.L5986
	.quad	.L5986
	.quad	.L5986
	.quad	.L5986
	.quad	.L5624
	.quad	.L5986
	.quad	.L5986
	.quad	.L5986
	.quad	.L5986
	.quad	.L5629
	.quad	.L5986
	.quad	.L5986
	.quad	.L5986
	.quad	.L5986
	.quad	.L5636
	.text
.L5607:
	cmpl	$7, %ebx
	je	.L6371
	cmpl	$7, %ebp
	je	.L6138
.L5609:
	movq	8(%rsp), %rcx
	movq	96(%rsp), %rbp
	movzwl	60(%rcx), %edx
	movzwl	60(%rbp), %eax
	andl	$511, %edx
	andl	$511, %eax
	cmpl	%eax, %edx
	jg	.L6277
	cmpl	%edx, %eax
	jg	.L5622
	movq	8(%rsp), %r10
	movq	integer_types+64(%rip), %rcx
	movq	128(%r10), %rdx
	cmpq	%rcx, %rdx
	je	.L6277
	movq	96(%rsp), %r8
	movq	128(%r8), %rax
	cmpq	%rcx, %rax
	je	.L6277
	movq	integer_types+56(%rip), %rdi
	cmpq	%rdi, %rdx
	je	.L5616
	cmpq	%rdi, %rax
	je	.L5616
	movq	global_trees+208(%rip), %rdi
	cmpq	%rdi, %rdx
	je	.L6272
	cmpq	%rdi, %rax
	je	.L6272
	movq	8(%rsp), %rcx
	testb	$32, 17(%rcx)
	je	.L5622
.L6277:
	movq	%rcx, %rdi
.L6272:
	movq	256(%rsp), %rsi
	call	build_type_attribute_variant
.L6231:
	movq	%rax, 8(%rsp)
	jmp	.L5009
.L5622:
	movq	96(%rsp), %rdi
	jmp	.L6272
.L5616:
	movq	8(%rsp), %rbx
	testb	$32, 17(%rbx)
	jne	.L6277
	movq	96(%rsp), %rax
	testb	$32, 17(%rax)
	je	.L6272
	jmp	.L6277
.L6138:
	cmpl	$7, %ebx
	jne	.L5622
	jmp	.L5609
.L6371:
	cmpl	$7, %ebp
	je	.L6138
.L5986:
	movq	8(%rsp), %rdi
	jmp	.L6272
.L5624:
	movq	8(%rsp), %rdx
	movq	96(%rsp), %rdi
	movq	8(%rdx), %rbx
	movq	8(%rdi), %rbp
	movq	128(%rbx), %rdi
	movq	128(%rbp), %rsi
	call	common_type
	movzbl	62(%rbx), %ecx
	movzbl	17(%rbx), %r12d
	movq	%rax, %rdi
	movl	%r12d, %edx
	shrb	$5, %cl
	shrb	$3, %r12b
	shrb	$4, %dl
	andl	$1, %r12d
	andl	$1, %ecx
	andl	$1, %edx
	addl	%r12d, %r12d
	sall	$2, %ecx
	orl	%r12d, %edx
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	cmpb	$20, 16(%rbx)
	je	.L6372
.L5627:
	movzbl	17(%rbp), %r11d
	movzbl	62(%rbp), %r15d
	leal	0(,%rcx,8), %esi
	orl	%edx, %esi
	xorl	%ecx, %ecx
	movl	%r11d, %edx
	shrb	$5, %r15b
	shrb	$3, %r11b
	shrb	$4, %dl
	andl	$1, %r11d
	andl	$1, %r15d
	andl	$1, %edx
	addl	%r11d, %r11d
	sall	$2, %r15d
	orl	%r11d, %edx
	orl	%r15d, %edx
	cmpb	$20, 16(%rbp)
	je	.L6373
.L5628:
	leal	0(,%rcx,8), %r9d
	orl	%r9d, %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movq	%rax, %rdi
	call	build_pointer_type
.L6276:
	movq	%rax, %rdi
	jmp	.L6272
.L6373:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L5628
.L6372:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L5627
.L5629:
	movq	8(%rsp), %rsi
	movq	96(%rsp), %rbp
	movq	8(%rsi), %rdi
	movq	8(%rbp), %rsi
	call	common_type
	movq	%rax, %rdi
	movq	8(%rsp), %rax
	cmpq	8(%rax), %rdi
	je	.L6374
.L5630:
	movq	96(%rsp), %rdx
	cmpq	8(%rdx), %rdi
	je	.L6375
.L5631:
	movq	8(%rsp), %r10
	cmpq	$0, 24(%r10)
	cmove	96(%rsp), %r10
	movq	24(%r10), %rsi
	call	build_array_type
	jmp	.L6276
.L6375:
	cmpq	$0, 24(%rdx)
	je	.L5631
	movq	%rdx, %rdi
	jmp	.L6272
.L6374:
	cmpq	$0, 24(%rax)
	je	.L5630
	jmp	.L6276
.L5636:
	movq	8(%rsp), %rbx
	movq	96(%rsp), %r12
	movq	8(%rbx), %rdi
	movq	8(%r12), %rsi
	call	common_type
	movq	96(%rsp), %r8
	movq	%rax, 248(%rsp)
	movq	24(%rbx), %rcx
	movq	%rcx, 64(%rsp)
	movq	24(%r8), %rcx
	movq	%rcx, 72(%rsp)
	cmpq	8(%rbx), %rax
	je	.L6376
.L5637:
	movq	96(%rsp), %rbx
	movq	248(%rsp), %rdi
	cmpq	8(%rbx), %rdi
	je	.L6377
	cmpq	$0, 64(%rsp)
	je	.L6378
.L5639:
	cmpq	$0, 72(%rsp)
	jne	.L5640
	movq	248(%rsp), %rdi
	movq	64(%rsp), %rsi
.L6274:
	call	build_function_type
	jmp	.L6276
.L5640:
	xorl	%edi, %edi
	call	pushlevel
	movl	$1, %edi
	call	declare_parm_level
	movq	64(%rsp), %rdi
	call	list_length
	movq	$0, 88(%rsp)
	testl	%eax, %eax
	jle	.L6068
	movl	%eax, %ebx
.L5645:
	movq	88(%rsp), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	call	tree_cons
	decl	%ebx
	movq	%rax, 88(%rsp)
	jne	.L5645
.L6068:
	cmpq	$0, 64(%rsp)
	movq	88(%rsp), %rax
	movq	%rax, 80(%rsp)
	je	.L6070
.L5985:
	movq	64(%rsp), %r15
	movq	32(%r15), %rdx
	testq	%rdx, %rdx
	jne	.L5650
	movq	72(%rsp), %r11
	movq	32(%r11), %rax
.L6229:
	movq	80(%rsp), %rdi
	movq	%rax, 32(%rdi)
.L5651:
.L5648:
	movq	64(%rsp), %r8
	movq	72(%rsp), %r15
	movq	80(%rsp), %r9
	movq	(%r8), %r11
	movq	%r11, 64(%rsp)
	testq	%r11, %r11
	movq	(%r15), %r12
	movq	%r12, 72(%rsp)
	movq	(%r9), %rbp
	movq	%rbp, 80(%rsp)
	jne	.L5985
.L6070:
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	call	poplevel
	movq	88(%rsp), %rsi
	movq	248(%rsp), %rdi
	call	build_function_type
	movq	%rax, 8(%rsp)
	jmp	.L5986
.L5650:
	movq	72(%rsp), %r9
	movq	32(%r9), %rax
	testq	%rax, %rax
	jne	.L5652
	movq	80(%rsp), %rbp
	movq	%rdx, 32(%rbp)
	jmp	.L5648
.L5652:
	cmpb	$21, 16(%rdx)
	je	.L6379
.L5653:
	cmpb	$21, 16(%rax)
	je	.L6380
.L5819:
	movq	64(%rsp), %rsi
	movq	72(%rsp), %rbx
	movq	32(%rsi), %rdi
	movq	32(%rbx), %rsi
	call	common_type
	jmp	.L6229
.L6380:
	movq	64(%rsp), %rbx
	movq	32(%rbx), %rcx
	cmpq	%rcx, %rax
	je	.L5819
	movq	24(%rax), %rsi
	testq	%rsi, %rsi
	movq	%rsi, 32(%rsp)
	je	.L5819
.L5984:
	movq	32(%rsp), %r11
	movq	%rcx, %rbp
	movq	8(%r11), %rbx
	cmpq	%rcx, %rbx
	je	.L6227
	testq	%rbx, %rbx
	je	.L6227
	testq	%rcx, %rcx
	je	.L6227
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L6227
	movzbl	16(%rcx), %eax
	testb	%al, %al
	je	.L6227
	cmpb	$6, %dl
	je	.L6381
.L5828:
	cmpb	$6, %al
	je	.L6382
.L5829:
	cmpb	$10, %dl
	je	.L6383
.L5830:
	cmpb	$10, 16(%rbp)
	je	.L6384
.L5831:
	cmpq	%rbp, %rbx
	movl	$1, 16(%rsp)
	je	.L5827
	movzbl	16(%rbx), %esi
	cmpb	16(%rbp), %sil
	je	.L5833
	movl	$0, 16(%rsp)
.L5827:
	movl	16(%rsp), %r12d
	testl	%r12d, %r12d
	jne	.L6385
.L5822:
	movq	32(%rsp), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	movq	%rax, 32(%rsp)
	je	.L5819
	movq	64(%rsp), %rax
	movq	32(%rax), %rcx
	jmp	.L5984
.L6385:
	movq	64(%rsp), %rcx
	movq	80(%rsp), %r15
	movq	32(%rcx), %r8
	movq	%r8, 32(%r15)
.L6253:
	movl	pedantic(%rip), %r10d
	testl	%r10d, %r10d
	je	.L5648
	movl	$.LC10, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L5648
.L5833:
	movzbl	17(%rbx), %r8d
	movzbl	62(%rbx), %r15d
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	shrb	$5, %r15b
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	$1, %r8d
	andl	$1, %r15d
	andl	$1, %edx
	addl	%r8d, %r8d
	sall	$2, %r15d
	orl	%r8d, %edx
	orl	%r15d, %edx
	cmpb	$20, %sil
	je	.L6386
.L5835:
	movzbl	17(%rbp), %r9d
	leal	0(,%rcx,8), %edi
	movzbl	62(%rbp), %ecx
	orl	%edx, %edi
	movl	%r9d, %edx
	shrb	$5, %cl
	shrb	$3, %r9b
	shrb	$4, %dl
	andl	$1, %r9d
	andl	$1, %ecx
	andl	$1, %edx
	addl	%r9d, %r9d
	sall	$2, %ecx
	orl	%r9d, %edx
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	cmpb	$20, %sil
	je	.L6387
.L5836:
	leal	0(,%rcx,8), %r10d
	movl	$0, 16(%rsp)
	orl	%r10d, %edx
	cmpl	%edx, %edi
	jne	.L5827
	movq	128(%rbp), %rdi
	cmpq	%rdi, 128(%rbx)
	je	.L6227
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	*targetm+264(%rip)
	movl	$0, 16(%rsp)
	testl	%eax, %eax
	movl	%eax, 240(%rsp)
	je	.L5827
	movl	$0, 16(%rsp)
	movzbl	16(%rbx), %eax
	cmpl	$18, %eax
	je	.L5962
	cmpl	$18, %eax
	ja	.L5979
	cmpl	$13, %eax
	je	.L5840
.L5839:
	cmpl	$2, 240(%rsp)
	jne	.L5827
	cmpl	$1, 16(%rsp)
	movl	240(%rsp), %eax
	cmovne	16(%rsp), %eax
	movl	%eax, 16(%rsp)
	jmp	.L5827
.L5840:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L5841
	call	comptypes
.L6225:
	movl	%eax, 16(%rsp)
	jmp	.L5839
.L5841:
	movl	$1, 16(%rsp)
	jmp	.L5839
.L5979:
	cmpl	$20, %eax
	je	.L5975
	cmpl	$23, %eax
	jne	.L5839
	movl	$1, 28(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L5844
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 28(%rsp)
	je	.L5839
.L5844:
	movq	24(%rbx), %r15
	movq	24(%rbp), %r12
	testq	%r15, %r15
	je	.L6388
	testq	%r12, %r12
	je	.L6389
	movl	$1, 16(%rsp)
	xorl	%ebp, %ebp
.L5959:
	testq	%r15, %r15
	je	.L6390
	testq	%r12, %r12
	je	.L5948
	movq	32(%r15), %rdi
	testq	%rdi, %rdi
	je	.L6391
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L5934
.L6252:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L5948
.L5933:
	cmpl	16(%rsp), %ebp
	movl	16(%rsp), %r11d
	cmovg	%ebp, %r11d
	movl	%r11d, 16(%rsp)
	movq	(%r12), %r12
	movq	(%r15), %r15
	jmp	.L5959
.L5948:
	movl	$0, 16(%rsp)
.L5928:
	cmpl	$1, 16(%rsp)
	movl	16(%rsp), %ebx
	cmove	28(%rsp), %ebx
.L6226:
	movl	%ebx, 16(%rsp)
	jmp	.L5839
.L5934:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %ebp
	jne	.L5933
	movq	32(%r15), %rax
	cmpb	$21, 16(%rax)
	je	.L6393
.L5938:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L5948
	cmpq	$0, 96(%rax)
	je	.L5949
	testb	$8, 62(%rax)
	je	.L5948
.L5949:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5948
	movq	32(%r15), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5948
	movq	32(%r12), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L5948
.L5955:
	movq	8(%rbx), %rdi
	movq	32(%r15), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5951
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5955
	jmp	.L5948
.L5951:
	testq	%rbx, %rbx
	jne	.L5933
	jmp	.L5948
.L6393:
	cmpq	$0, 96(%rax)
	je	.L5939
	testb	$8, 62(%rax)
	je	.L5938
.L5939:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5938
	movq	32(%r12), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5938
	movq	32(%r15), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L5948
.L5945:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5951
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5945
	jmp	.L5948
.L6391:
	movq	32(%r12), %rdi
	jmp	.L6252
.L6390:
	testq	%r12, %r12
	je	.L5928
	jmp	.L5948
.L6389:
	movq	%r15, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L5839
	movq	136(%rbp), %rax
	testq	%rax, %rax
	je	.L6103
	movq	%rax, %rbp
	movl	$1, %r12d
	movl	$0, 20(%rsp)
.L5923:
	testq	%r15, %r15
	je	.L6394
	testq	%rbp, %rbp
	je	.L5912
	movq	32(%r15), %rdi
	testq	%rdi, %rdi
	je	.L6395
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L5898
.L6251:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L5912
.L5897:
	cmpl	%r12d, 20(%rsp)
	movq	(%r15), %r15
	cmovg	20(%rsp), %r12d
	movq	(%rbp), %rbp
	jmp	.L5923
.L5912:
	xorl	%r12d, %r12d
.L5892:
	decl	%r12d
	movl	$2, 16(%rsp)
	jne	.L5839
	movl	28(%rsp), %eax
	movl	%eax, 16(%rsp)
	jmp	.L5839
.L5898:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 20(%rsp)
	jne	.L5897
	movq	32(%r15), %rax
	cmpb	$21, 16(%rax)
	je	.L6397
.L5902:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L5912
	cmpq	$0, 96(%rax)
	je	.L5913
	testb	$8, 62(%rax)
	je	.L5912
.L5913:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5912
	movq	32(%r15), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5912
	movq	32(%rbp), %r10
	movq	24(%r10), %rbx
	testq	%rbx, %rbx
	je	.L5912
.L5919:
	movq	8(%rbx), %rdi
	movq	32(%r15), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5915
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5919
	jmp	.L5912
.L5915:
	testq	%rbx, %rbx
	jne	.L5897
	jmp	.L5912
.L6397:
	cmpq	$0, 96(%rax)
	je	.L5903
	testb	$8, 62(%rax)
	je	.L5902
.L5903:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5902
	movq	32(%rbp), %r8
	movq	32(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5902
	movq	32(%r15), %rcx
	movq	24(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L5912
.L5909:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5915
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5909
	jmp	.L5912
.L6395:
	movq	32(%rbp), %rdi
	jmp	.L6251
.L6394:
	testq	%rbp, %rbp
	je	.L5892
	jmp	.L5912
.L6103:
	movl	28(%rsp), %eax
	jmp	.L6225
.L6388:
	movq	%r12, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L5839
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L6101
	movq	%rax, %rbp
	movl	$1, %r15d
	movl	$0, 24(%rsp)
.L5884:
	testq	%r12, %r12
	je	.L6398
	testq	%rbp, %rbp
	je	.L5873
	movq	32(%r12), %rdi
	testq	%rdi, %rdi
	je	.L6399
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L5859
.L6250:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L5873
.L5858:
	cmpl	%r15d, 24(%rsp)
	movq	(%r12), %r12
	cmovg	24(%rsp), %r15d
	movq	(%rbp), %rbp
	jmp	.L5884
.L5873:
	xorl	%r15d, %r15d
.L5853:
	decl	%r15d
	movl	$2, 16(%rsp)
	jne	.L5839
	movl	28(%rsp), %ebx
	jmp	.L6226
.L5859:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 24(%rsp)
	jne	.L5858
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	je	.L6401
.L5863:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L5873
	cmpq	$0, 96(%rax)
	je	.L5874
	testb	$8, 62(%rax)
	je	.L5873
.L5874:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5873
	movq	32(%r12), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5873
	movq	32(%rbp), %r11
	movq	24(%r11), %rbx
	testq	%rbx, %rbx
	je	.L5873
.L5880:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5876
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5880
	jmp	.L5873
.L5876:
	testq	%rbx, %rbx
	jne	.L5858
	jmp	.L5873
.L6401:
	cmpq	$0, 96(%rax)
	je	.L5864
	testb	$8, 62(%rax)
	je	.L5863
.L5864:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5863
	movq	32(%rbp), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5863
	movq	32(%r12), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L5873
.L5870:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5876
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5870
	jmp	.L5873
.L6399:
	movq	32(%rbp), %rdi
	jmp	.L6250
.L6398:
	testq	%rbp, %rbp
	je	.L5853
	jmp	.L5873
.L6101:
	movl	28(%rsp), %ebp
	movl	%ebp, 16(%rsp)
	jmp	.L5839
.L5975:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmovne	16(%rsp), %eax
	jmp	.L6225
.L5962:
	movq	24(%rbx), %r12
	movq	24(%rbp), %r15
	movl	$1, 16(%rsp)
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L5963
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 16(%rsp)
	je	.L5822
.L5963:
	testq	%r12, %r12
	je	.L5839
	testq	%r15, %r15
	je	.L5839
	cmpq	%r15, %r12
	je	.L5839
	movq	112(%r12), %rcx
	movq	112(%r15), %rsi
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L5966
	movq	104(%r12), %rbp
	cmpb	$25, 16(%rbp)
	je	.L6402
.L5967:
	movl	$1, %r8d
.L5966:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L5968
	movq	104(%r15), %r9
	cmpb	$25, 16(%r9)
	je	.L6403
.L5969:
	movl	$1, %ecx
.L5968:
	testb	%r8b, %r8b
	jne	.L5839
	testb	%cl, %cl
	jne	.L5839
	testb	%dil, %dil
	je	.L6158
	testb	%dl, %dl
.L6224:
	jne	.L5839
.L5974:
	movl	$0, 16(%rsp)
	jmp	.L5839
.L6158:
	testb	%dl, %dl
	jne	.L5974
	movq	104(%r12), %rdi
	movq	104(%r15), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5974
	movq	112(%r12), %rdi
	movq	112(%r15), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L6224
.L6403:
	cmpb	$25, 16(%rsi)
	jne	.L5969
	jmp	.L5968
.L6402:
	cmpb	$25, 16(%rcx)
	jne	.L5967
	jmp	.L5966
.L6227:
	movl	$1, 16(%rsp)
	jmp	.L5827
.L6387:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L5836
.L6386:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L5835
.L6384:
	movzbl	17(%rbp), %esi
	movzwl	60(%rbp), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L5831
.L6383:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L5830
.L6382:
	testb	$2, 62(%rcx)
	je	.L5829
	movq	24(%rcx), %r12
	testq	%r12, %r12
	cmovne	%r12, %rbp
	jmp	.L5829
.L6381:
	testb	$2, 62(%rbx)
	je	.L5828
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L5828
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L5828
.L6379:
	cmpq	%rax, %rdx
	je	.L5653
	movq	24(%rdx), %rsi
	testq	%rsi, %rsi
	movq	%rsi, 56(%rsp)
	je	.L5653
.L5818:
	movq	56(%rsp), %r10
	movq	%rax, %rbp
	movq	8(%r10), %rbx
	cmpq	%rax, %rbx
	je	.L5660
	testq	%rbx, %rbx
	je	.L5660
	testq	%rax, %rax
	je	.L5660
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L5660
	movzbl	16(%rax), %ecx
	testb	%cl, %cl
	jne	.L5659
.L5660:
	movl	$1, 40(%rsp)
.L5661:
	movl	40(%rsp), %ecx
	testl	%ecx, %ecx
	jne	.L6404
.L5656:
	movq	56(%rsp), %r10
	movq	(%r10), %r9
	testq	%r9, %r9
	movq	%r9, 56(%rsp)
	jne	.L5818
	jmp	.L5653
.L6404:
	movq	80(%rsp), %rdi
	movq	%rax, 32(%rdi)
	jmp	.L6253
.L5659:
	cmpb	$6, %dl
	je	.L6405
.L5662:
	cmpb	$6, %cl
	je	.L6406
.L5663:
	cmpb	$10, %dl
	je	.L6407
.L5664:
	cmpb	$10, 16(%rbp)
	je	.L6408
.L5665:
	cmpq	%rbp, %rbx
	je	.L6409
	movzbl	16(%rbx), %edi
	cmpb	16(%rbp), %dil
	je	.L5667
	movl	$0, 40(%rsp)
.L6179:
	movq	72(%rsp), %r8
	movq	32(%r8), %rax
	jmp	.L5661
.L5667:
	movzbl	17(%rbx), %r12d
	movzbl	62(%rbx), %ecx
	movl	%r12d, %edx
	shrb	$5, %cl
	shrb	$3, %r12b
	shrb	$4, %dl
	andl	$1, %r12d
	andl	$1, %ecx
	andl	$1, %edx
	addl	%r12d, %r12d
	sall	$2, %ecx
	orl	%r12d, %edx
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L6410
.L5669:
	movzbl	17(%rbp), %r11d
	movzbl	62(%rbp), %r15d
	leal	0(,%rcx,8), %esi
	orl	%edx, %esi
	xorl	%ecx, %ecx
	movl	%r11d, %edx
	shrb	$5, %r15b
	shrb	$3, %r11b
	shrb	$4, %dl
	andl	$1, %r11d
	andl	$1, %r15d
	andl	$1, %edx
	addl	%r11d, %r11d
	sall	$2, %r15d
	orl	%r11d, %edx
	orl	%r15d, %edx
	cmpb	$20, %dil
	je	.L6411
.L5670:
	leal	0(,%rcx,8), %edi
	orl	%edi, %edx
	cmpl	%edx, %esi
	je	.L6412
.L6249:
	movl	$0, 40(%rsp)
.L6223:
	movq	72(%rsp), %r12
	movq	32(%r12), %rax
	jmp	.L5661
.L6412:
	movq	128(%rbp), %rdx
	cmpq	%rdx, 128(%rbx)
	je	.L6413
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	*targetm+264(%rip)
	testl	%eax, %eax
	movl	%eax, 244(%rsp)
	je	.L6249
	movl	$0, 40(%rsp)
	movzbl	16(%rbx), %eax
	cmpl	$18, %eax
	je	.L5796
	cmpl	$18, %eax
	ja	.L5813
	cmpl	$13, %eax
	je	.L5674
.L5673:
	cmpl	$2, 244(%rsp)
	je	.L6414
.L6178:
	movq	72(%rsp), %r15
	movq	32(%r15), %rax
	jmp	.L5661
.L6414:
	cmpl	$1, 40(%rsp)
	jne	.L6179
	movl	$2, 40(%rsp)
	jmp	.L6223
.L5674:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L5675
	call	comptypes
.L6221:
	movl	%eax, 40(%rsp)
	jmp	.L5673
.L5675:
	movl	$1, 40(%rsp)
	jmp	.L5673
.L5813:
	cmpl	$20, %eax
	je	.L5809
	cmpl	$23, %eax
	jne	.L5673
	movl	$1, 52(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L5678
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 52(%rsp)
	je	.L5673
.L5678:
	movq	24(%rbx), %r15
	movq	24(%rbp), %r12
	testq	%r15, %r15
	je	.L6415
	testq	%r12, %r12
	je	.L6416
	movl	$1, 40(%rsp)
	xorl	%ebp, %ebp
.L5793:
	testq	%r15, %r15
	je	.L6417
	testq	%r12, %r12
	je	.L5782
	movq	32(%r15), %rdi
	testq	%rdi, %rdi
	je	.L6418
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L5768
.L6248:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L5782
.L5767:
	cmpl	40(%rsp), %ebp
	movl	40(%rsp), %esi
	cmovg	%ebp, %esi
	movl	%esi, 40(%rsp)
	movq	(%r12), %r12
	movq	(%r15), %r15
	jmp	.L5793
.L5782:
	movl	$0, 40(%rsp)
.L5762:
	cmpl	$1, 40(%rsp)
	movl	40(%rsp), %ebx
	cmove	52(%rsp), %ebx
.L6222:
	movl	%ebx, 40(%rsp)
	jmp	.L5673
.L5768:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %ebp
	jne	.L5767
	movq	32(%r15), %rax
	cmpb	$21, 16(%rax)
	je	.L6420
.L5772:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L5782
	cmpq	$0, 96(%rax)
	je	.L5783
	testb	$8, 62(%rax)
	je	.L5782
.L5783:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5782
	movq	32(%r15), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5782
	movq	32(%r12), %r10
	movq	24(%r10), %rbx
	testq	%rbx, %rbx
	je	.L5782
.L5789:
	movq	8(%rbx), %rdi
	movq	32(%r15), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5785
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5789
	jmp	.L5782
.L5785:
	testq	%rbx, %rbx
	jne	.L5767
	jmp	.L5782
.L6420:
	cmpq	$0, 96(%rax)
	je	.L5773
	testb	$8, 62(%rax)
	je	.L5772
.L5773:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5772
	movq	32(%r12), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5772
	movq	32(%r15), %r9
	movq	24(%r9), %rbx
	testq	%rbx, %rbx
	je	.L5782
.L5779:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5785
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5779
	jmp	.L5782
.L6418:
	movq	32(%r12), %rdi
	jmp	.L6248
.L6417:
	testq	%r12, %r12
	je	.L5762
	jmp	.L5782
.L6416:
	movq	%r15, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L5673
	movq	136(%rbp), %rax
	testq	%rax, %rax
	je	.L6099
	movq	%rax, %rbp
	movl	$1, %r12d
	movl	$0, 44(%rsp)
.L5757:
	testq	%r15, %r15
	je	.L6421
	testq	%rbp, %rbp
	je	.L5746
	movq	32(%r15), %rdi
	testq	%rdi, %rdi
	je	.L6422
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L5732
.L6247:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L5746
.L5731:
	cmpl	%r12d, 44(%rsp)
	movq	(%r15), %r15
	cmovg	44(%rsp), %r12d
	movq	(%rbp), %rbp
	jmp	.L5757
.L5746:
	xorl	%r12d, %r12d
.L5726:
	decl	%r12d
	movl	$2, 40(%rsp)
	jne	.L5673
	movl	52(%rsp), %ebp
	movl	%ebp, 40(%rsp)
	jmp	.L5673
.L5732:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 44(%rsp)
	jne	.L5731
	movq	32(%r15), %rax
	cmpb	$21, 16(%rax)
	je	.L6424
.L5736:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L5746
	cmpq	$0, 96(%rax)
	je	.L5747
	testb	$8, 62(%rax)
	je	.L5746
.L5747:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5746
	movq	32(%r15), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5746
	movq	32(%rbp), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L5746
.L5753:
	movq	8(%rbx), %rdi
	movq	32(%r15), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5749
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5753
	jmp	.L5746
.L5749:
	testq	%rbx, %rbx
	jne	.L5731
	jmp	.L5746
.L6424:
	cmpq	$0, 96(%rax)
	je	.L5737
	testb	$8, 62(%rax)
	je	.L5736
.L5737:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5736
	movq	32(%rbp), %r8
	movq	32(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5736
	movq	32(%r15), %rcx
	movq	24(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L5746
.L5743:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5749
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5743
	jmp	.L5746
.L6422:
	movq	32(%rbp), %rdi
	jmp	.L6247
.L6421:
	testq	%rbp, %rbp
	je	.L5726
	jmp	.L5746
.L6099:
	movl	52(%rsp), %eax
	jmp	.L6221
.L6415:
	movq	%r12, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L5673
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L6097
	movq	%rax, %rbp
	movl	$1, %r15d
	movl	$0, 48(%rsp)
.L5718:
	testq	%r12, %r12
	je	.L6425
	testq	%rbp, %rbp
	je	.L5707
	movq	32(%r12), %rdi
	testq	%rdi, %rdi
	je	.L6426
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L5693
.L6246:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L5707
.L5692:
	cmpl	%r15d, 48(%rsp)
	movq	(%r12), %r12
	cmovg	48(%rsp), %r15d
	movq	(%rbp), %rbp
	jmp	.L5718
.L5707:
	xorl	%r15d, %r15d
.L5687:
	decl	%r15d
	movl	$2, 40(%rsp)
	jne	.L5673
	movl	52(%rsp), %ebx
	jmp	.L6222
.L5693:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 48(%rsp)
	jne	.L5692
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	je	.L6428
.L5697:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L5707
	cmpq	$0, 96(%rax)
	je	.L5708
	testb	$8, 62(%rax)
	je	.L5707
.L5708:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5707
	movq	32(%r12), %r10
	movq	32(%r10), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5707
	movq	32(%rbp), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L5707
.L5714:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5710
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5714
	jmp	.L5707
.L5710:
	testq	%rbx, %rbx
	jne	.L5692
	jmp	.L5707
.L6428:
	cmpq	$0, 96(%rax)
	je	.L5698
	testb	$8, 62(%rax)
	je	.L5697
.L5698:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5697
	movq	32(%rbp), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5697
	movq	32(%r12), %r9
	movq	24(%r9), %rbx
	testq	%rbx, %rbx
	je	.L5707
.L5704:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5710
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5704
	jmp	.L5707
.L6426:
	movq	32(%rbp), %rdi
	jmp	.L6246
.L6425:
	testq	%rbp, %rbp
	je	.L5687
	jmp	.L5707
.L6097:
	movl	52(%rsp), %eax
	movl	%eax, 40(%rsp)
	jmp	.L5673
.L5809:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmovne	40(%rsp), %eax
	jmp	.L6221
.L5796:
	movq	24(%rbx), %r12
	movq	24(%rbp), %r15
	movl	$1, 40(%rsp)
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L5797
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 40(%rsp)
	je	.L6177
.L5797:
	testq	%r12, %r12
	je	.L5673
	testq	%r15, %r15
	je	.L5673
	cmpq	%r15, %r12
	je	.L5673
	movq	112(%r12), %rcx
	movq	112(%r15), %rsi
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L5800
	movq	104(%r12), %r11
	cmpb	$25, 16(%r11)
	je	.L6429
.L5801:
	movl	$1, %r8d
.L5800:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L5802
	movq	104(%r15), %rbp
	cmpb	$25, 16(%rbp)
	je	.L6430
.L5803:
	movl	$1, %ecx
.L5802:
	testb	%r8b, %r8b
	jne	.L5673
	testb	%cl, %cl
	jne	.L5673
	testb	%dil, %dil
	je	.L6148
	testb	%dl, %dl
.L6220:
	jne	.L5673
.L5808:
	movl	$0, 40(%rsp)
	jmp	.L5673
.L6148:
	testb	%dl, %dl
	jne	.L5808
	movq	104(%r12), %rdi
	movq	104(%r15), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5808
	movq	112(%r12), %rdi
	movq	112(%r15), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L6220
.L6430:
	cmpb	$25, 16(%rsi)
	jne	.L5803
	jmp	.L5802
.L6429:
	cmpb	$25, 16(%rcx)
	jne	.L5801
	jmp	.L5800
.L6177:
	movq	72(%rsp), %rdx
	movq	32(%rdx), %rax
	jmp	.L5656
.L6413:
	movl	$1, 40(%rsp)
	jmp	.L6179
.L6411:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L5670
.L6410:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L5669
.L6409:
	movl	$1, 40(%rsp)
	jmp	.L6178
.L6408:
	movzbl	17(%rbp), %esi
	movzwl	60(%rbp), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L5665
.L6407:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L5664
.L6406:
	testb	$2, 62(%rax)
	je	.L5663
	movq	24(%rax), %r8
	testq	%r8, %r8
	cmovne	%r8, %rbp
	jmp	.L5663
.L6405:
	testb	$2, 62(%rbx)
	je	.L5662
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L5662
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L5662
.L6378:
	movq	96(%rsp), %rbx
	movq	248(%rsp), %rdi
	movq	24(%rbx), %rsi
	jmp	.L6274
.L6377:
	cmpq	$0, 64(%rsp)
	jne	.L5639
.L6275:
	movq	%rbx, %rdi
	jmp	.L6272
.L6376:
	testq	%rcx, %rcx
	jne	.L5637
	jmp	.L6275
.L6160:
	movq	8(%rsp), %rdi
.L5598:
	cmpl	$8, %ebp
	movq	96(%rsp), %rsi
	je	.L6431
.L5600:
	call	common_type
	cmpl	$8, %ebx
	movq	%rax, %rdi
	je	.L6432
.L5601:
	cmpl	$8, %ebp
	je	.L6433
.L5603:
	call	build_complex_type
	jmp	.L6276
.L6433:
	movq	96(%rsp), %rax
	cmpq	%rdi, 8(%rax)
	jne	.L5603
	jmp	.L6276
.L6432:
	movq	8(%rsp), %rbx
	cmpq	%rax, 8(%rbx)
	jne	.L5601
	jmp	.L6275
.L6431:
	movq	8(%rsi), %rsi
	jmp	.L5600
.L6137:
	movq	8(%rsp), %rsi
	movq	8(%rsi), %rdi
	jmp	.L5598
.L6369:
	movzwl	60(%r15), %edi
	movl	$1, %esi
	andl	$511, %edi
	call	type_for_size
	movq	%rax, 96(%rsp)
	jmp	.L5594
.L6368:
	movzwl	60(%rdx), %edi
	movl	$1, %esi
	andl	$511, %edi
	call	type_for_size
	movq	%rax, 8(%rsp)
	jmp	.L5593
.L5427:
	movq	%r13, %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L5989
	movq	8(%r12), %rdi
	cmpq	global_trees+216(%rip), %rdi
	je	.L6434
.L5989:
	movq	%r14, %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L6181
	movq	8(%r15), %r8
	cmpq	global_trees+216(%rip), %r8
	je	.L6435
.L5996:
	movq	8(%r12), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$5, %al
	je	.L6436
	cmpb	$5, 16(%r8)
	je	.L6437
	movl	$.LC58, %edi
	xorl	%eax, %eax
	call	pedwarn
	movq	global_trees+216(%rip), %rdi
.L6230:
	call	build_pointer_type
	jmp	.L6231
.L6437:
	movl	pedantic(%rip), %esi
	testl	%esi, %esi
	je	.L6010
	cmpb	$23, %al
	je	.L6438
.L6010:
	movzbl	17(%r8), %r10d
	movzbl	62(%r8), %r9d
	xorl	%ecx, %ecx
	movl	%r10d, %edx
	shrb	$5, %r9b
	shrb	$3, %r10b
	shrb	$4, %dl
	andl	$1, %r10d
	andl	$1, %r9d
	andl	$1, %edx
	addl	%r10d, %r10d
	sall	$2, %r9d
	orl	%r10d, %edx
	orl	%r9d, %edx
	cmpb	$20, 16(%r8)
	je	.L6439
.L6011:
	movzbl	17(%rdi), %r15d
	leal	0(,%rcx,8), %esi
	movzbl	62(%rdi), %ecx
	orl	%edx, %esi
	movl	%r15d, %edx
	shrb	$5, %cl
	shrb	$3, %r15b
	shrb	$4, %dl
	andl	$1, %r15d
	andl	$1, %ecx
	andl	$1, %edx
	addl	%r15d, %r15d
	sall	$2, %ecx
	orl	%r15d, %edx
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	cmpb	$20, 16(%rdi)
	je	.L6440
.L6012:
	leal	0(,%rcx,8), %edi
	orl	%edi, %edx
	movq	%r8, %rdi
	orl	%edx, %esi
.L6254:
	call	c_build_qualified_type
	movq	%rax, %rdi
	jmp	.L6230
.L6440:
	cmpq	$0, 8(%rdi)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L6012
.L6439:
	cmpq	$0, 8(%r8)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L6011
.L6438:
	movl	$.LC57, %edi
	xorl	%eax, %eax
	call	pedwarn
	movq	8(%r12), %rdi
	movq	8(%r15), %r8
	jmp	.L6010
.L6436:
	movl	pedantic(%rip), %edx
	testl	%edx, %edx
	je	.L6004
	cmpb	$23, 16(%r8)
	je	.L6441
.L6004:
	movzbl	17(%rdi), %ebx
	movzbl	62(%rdi), %r12d
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	shrb	$5, %r12b
	shrb	$3, %bl
	shrb	$4, %dl
	andl	$1, %ebx
	andl	$1, %r12d
	andl	$1, %edx
	addl	%ebx, %ebx
	sall	$2, %r12d
	orl	%ebx, %edx
	orl	%r12d, %edx
	cmpb	$20, 16(%rdi)
	je	.L6442
.L6005:
	movzbl	17(%r8), %ebp
	movzbl	62(%r8), %r11d
	leal	0(,%rcx,8), %esi
	orl	%edx, %esi
	xorl	%ecx, %ecx
	movl	%ebp, %edx
	shrb	$5, %r11b
	shrb	$3, %bpl
	shrb	$4, %dl
	andl	$1, %ebp
	andl	$1, %r11d
	andl	$1, %edx
	addl	%ebp, %ebp
	sall	$2, %r11d
	orl	%ebp, %edx
	orl	%r11d, %edx
	cmpb	$20, 16(%r8)
	je	.L6443
.L6006:
	leal	0(,%rcx,8), %r8d
	orl	%r8d, %edx
	orl	%edx, %esi
	jmp	.L6254
.L6443:
	cmpq	$0, 8(%r8)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L6006
.L6442:
	cmpq	$0, 8(%rdi)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L6005
.L6441:
	movl	$.LC57, %edi
	xorl	%eax, %eax
	call	pedwarn
	movq	8(%r12), %rdi
	movq	8(%r15), %r8
	jmp	.L6004
.L6435:
	movq	312(%rsp), %rax
	cmpb	$115, 16(%rax)
	je	.L5996
	movzbl	17(%r12), %r9d
	movzbl	62(%r12), %esi
	xorl	%ecx, %ecx
	movl	%r9d, %edx
	shrb	$5, %sil
	shrb	$3, %r9b
	shrb	$4, %dl
	andl	$1, %r9d
	andl	$1, %esi
	andl	$1, %edx
	addl	%r9d, %r9d
	sall	$2, %esi
	orl	%r9d, %edx
	orl	%esi, %edx
	cmpb	$20, 16(%r12)
	je	.L6444
.L5999:
	leal	0(,%rcx,8), %esi
	movzbl	62(%r15), %r10d
	movzbl	17(%r15), %ecx
	orl	%edx, %esi
	movl	%ecx, %edx
	shrb	$5, %r10b
	shrb	$3, %cl
	shrb	$4, %dl
	andl	$1, %ecx
	andl	$1, %r10d
	addl	%ecx, %ecx
	andl	$1, %edx
	sall	$2, %r10d
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	orl	%r10d, %edx
	cmpb	$20, 16(%r15)
	je	.L6445
.L6000:
	leal	0(,%rcx,8), %r15d
	movq	%r12, %rdi
	orl	%r15d, %edx
	orl	%edx, %esi
.L6273:
	call	c_build_qualified_type
	jmp	.L6231
.L6445:
	testq	%r8, %r8
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L6000
.L6444:
	cmpq	$0, 8(%r12)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L5999
.L6181:
	movq	8(%r15), %r8
	jmp	.L5996
.L6434:
	movq	320(%rsp), %r10
	cmpb	$115, 16(%r10)
	je	.L5989
	movzbl	17(%r15), %ebx
	movzbl	62(%r15), %ecx
	movl	%ebx, %edx
	shrb	$5, %cl
	shrb	$3, %bl
	shrb	$4, %dl
	andl	$1, %ebx
	andl	$1, %ecx
	andl	$1, %edx
	addl	%ebx, %ebx
	sall	$2, %ecx
	orl	%ebx, %edx
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	cmpb	$20, 16(%r15)
	je	.L6446
.L5992:
	movzbl	17(%r12), %ebp
	movzbl	62(%r12), %r11d
	leal	0(,%rcx,8), %esi
	orl	%edx, %esi
	xorl	%ecx, %ecx
	movl	%ebp, %edx
	shrb	$5, %r11b
	shrb	$3, %bpl
	shrb	$4, %dl
	andl	$1, %ebp
	andl	$1, %r11d
	andl	$1, %edx
	addl	%ebp, %ebp
	sall	$2, %r11d
	orl	%ebp, %edx
	orl	%r11d, %edx
	cmpb	$20, 16(%r12)
	je	.L6447
.L5993:
	leal	0(,%rcx,8), %edi
	orl	%edi, %edx
	movq	%r15, %rdi
	orl	%edx, %esi
	jmp	.L6273
.L6447:
	testq	%rdi, %rdi
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L5993
.L6446:
	cmpq	$0, 8(%r15)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L5992
.L6367:
	movq	8(%r12), %r8
	movq	8(%r15), %rdi
	movq	128(%r8), %rbx
	movq	128(%rdi), %rbp
	cmpq	%rbp, %rbx
	je	.L6219
	testq	%rbx, %rbx
	je	.L6219
	testq	%rbp, %rbp
	je	.L6219
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L6219
	movzbl	16(%rbp), %eax
	testb	%al, %al
	je	.L6219
	cmpb	$6, %dl
	je	.L6448
.L5433:
	cmpb	$6, %al
	je	.L6449
.L5434:
	cmpb	$10, %dl
	je	.L6450
.L5435:
	cmpb	$10, 16(%rbp)
	je	.L6451
.L5436:
	cmpq	%rbp, %rbx
	movl	$1, 108(%rsp)
	je	.L5432
	movzbl	16(%rbx), %esi
	cmpb	16(%rbp), %sil
	je	.L5438
	movl	$0, 108(%rsp)
.L5432:
	cmpl	$2, 108(%rsp)
	je	.L6452
.L5588:
	movl	108(%rsp), %eax
	jmp	.L5429
.L6452:
	movl	pedantic(%rip), %edi
	testl	%edi, %edi
	je	.L5588
	movl	$.LC1, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L5588
.L5438:
	movzbl	17(%rbx), %r9d
	movzbl	62(%rbx), %r11d
	xorl	%ecx, %ecx
	movl	%r9d, %edx
	shrb	$5, %r11b
	shrb	$3, %r9b
	shrb	$4, %dl
	andl	$1, %r9d
	andl	$1, %r11d
	andl	$1, %edx
	addl	%r9d, %r9d
	sall	$2, %r11d
	orl	%r9d, %edx
	orl	%r11d, %edx
	cmpb	$20, %sil
	je	.L6453
.L5440:
	movzbl	17(%rbp), %r8d
	movzbl	62(%rbp), %r10d
	leal	0(,%rcx,8), %edi
	orl	%edx, %edi
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	shrb	$5, %r10b
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	$1, %r8d
	andl	$1, %r10d
	andl	$1, %edx
	addl	%r8d, %r8d
	sall	$2, %r10d
	orl	%r8d, %edx
	orl	%r10d, %edx
	cmpb	$20, %sil
	je	.L6454
.L5441:
	leal	0(,%rcx,8), %esi
	movl	$0, 108(%rsp)
	orl	%esi, %edx
	cmpl	%edx, %edi
	jne	.L5432
	movq	128(%rbp), %rdx
	cmpq	%rdx, 128(%rbx)
	je	.L6219
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	*targetm+264(%rip)
	movl	$0, 108(%rsp)
	testl	%eax, %eax
	movl	%eax, 284(%rsp)
	je	.L5432
	movl	$0, 108(%rsp)
	movzbl	16(%rbx), %eax
	cmpl	$18, %eax
	je	.L5567
	cmpl	$18, %eax
	ja	.L5584
	cmpl	$13, %eax
	je	.L5445
.L5444:
	cmpl	$2, 284(%rsp)
	jne	.L5432
	cmpl	$1, 108(%rsp)
	movl	284(%rsp), %eax
	cmovne	108(%rsp), %eax
	movl	%eax, 108(%rsp)
	jmp	.L5432
.L5445:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L5446
	call	comptypes
.L6218:
	movl	%eax, 108(%rsp)
	jmp	.L5444
.L5446:
	movl	$1, 108(%rsp)
	jmp	.L5444
.L5584:
	cmpl	$20, %eax
	je	.L5580
	cmpl	$23, %eax
	jne	.L5444
	movl	$1, 148(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L5449
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 148(%rsp)
	je	.L5444
.L5449:
	movq	24(%rbx), %rax
	movq	%rax, 112(%rsp)
	testq	%rax, %rax
	movq	24(%rbp), %rcx
	movq	%rcx, 120(%rsp)
	je	.L6455
	cmpq	$0, 120(%rsp)
	je	.L6456
	movl	$1, 108(%rsp)
	xorl	%ebp, %ebp
.L5564:
	cmpq	$0, 112(%rsp)
	je	.L6457
	cmpq	$0, 120(%rsp)
	je	.L5553
	movq	112(%rsp), %r8
	movq	32(%r8), %rdi
	testq	%rdi, %rdi
	je	.L6458
	movq	120(%rsp), %rcx
	movq	32(%rcx), %rax
	testq	%rax, %rax
	jne	.L5539
.L6245:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L5553
.L5538:
	cmpl	108(%rsp), %ebp
	movl	108(%rsp), %r8d
	movq	112(%rsp), %r10
	movq	120(%rsp), %r9
	cmovg	%ebp, %r8d
	movl	%r8d, 108(%rsp)
	movq	(%r10), %rdi
	movq	%rdi, 112(%rsp)
	movq	(%r9), %rax
	movq	%rax, 120(%rsp)
	jmp	.L5564
.L5553:
	movl	$0, 108(%rsp)
.L5533:
	cmpl	$1, 108(%rsp)
	movl	108(%rsp), %eax
	cmove	148(%rsp), %eax
	jmp	.L6218
.L5539:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %ebp
	jne	.L5538
	movq	112(%rsp), %rdx
	movq	32(%rdx), %rax
	cmpb	$21, 16(%rax)
	je	.L6460
.L5543:
	movq	120(%rsp), %r8
	movq	32(%r8), %rax
	cmpb	$21, 16(%rax)
	jne	.L5553
	cmpq	$0, 96(%rax)
	je	.L5554
	testb	$8, 62(%rax)
	je	.L5553
.L5554:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5553
	movq	112(%rsp), %rsi
	movq	32(%rsi), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5553
	movq	120(%rsp), %r11
	movq	32(%r11), %rdx
	movq	24(%rdx), %rbx
	testq	%rbx, %rbx
	je	.L5553
.L5560:
	movq	112(%rsp), %rcx
	movq	8(%rbx), %rdi
	movq	32(%rcx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5556
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5560
	jmp	.L5553
.L5556:
	testq	%rbx, %rbx
	jne	.L5538
	jmp	.L5553
.L6460:
	cmpq	$0, 96(%rax)
	je	.L5544
	testb	$8, 62(%rax)
	je	.L5543
.L5544:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5543
	movq	120(%rsp), %rax
	movq	32(%rax), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5543
	movq	112(%rsp), %rdi
	movq	32(%rdi), %r9
	movq	24(%r9), %rbx
	testq	%rbx, %rbx
	je	.L5553
.L5550:
	movq	120(%rsp), %r10
	movq	8(%rbx), %rdi
	movq	32(%r10), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5556
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5550
	jmp	.L5553
.L6458:
	movq	120(%rsp), %rsi
	movq	32(%rsi), %rdi
	jmp	.L6245
.L6457:
	cmpq	$0, 120(%rsp)
	je	.L5533
	jmp	.L5553
.L6456:
	movq	112(%rsp), %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L5444
	movq	136(%rbp), %rax
	testq	%rax, %rax
	je	.L6095
	movq	%rax, %rbp
	movl	$1, 132(%rsp)
	movl	$0, 136(%rsp)
.L5528:
	cmpq	$0, 112(%rsp)
	je	.L6461
	testq	%rbp, %rbp
	je	.L5517
	movq	112(%rsp), %r9
	movq	32(%r9), %rdi
	testq	%rdi, %rdi
	je	.L6462
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L5503
.L6243:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L5517
.L5502:
	movl	132(%rsp), %r10d
	movl	136(%rsp), %ebx
	cmpl	%r10d, 136(%rsp)
	movq	112(%rsp), %rdi
	cmovle	%r10d, %ebx
	movl	%ebx, 132(%rsp)
	movq	(%rdi), %r9
	movq	%r9, 112(%rsp)
	movq	(%rbp), %rbp
	jmp	.L5528
.L5517:
	movl	$0, 132(%rsp)
.L5497:
	movl	$2, 108(%rsp)
	cmpl	$1, 132(%rsp)
.L6244:
	jne	.L5444
	movl	148(%rsp), %ebp
	movl	%ebp, 108(%rsp)
	jmp	.L5444
.L5503:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 136(%rsp)
	jne	.L5502
	movq	112(%rsp), %rdi
	movq	32(%rdi), %rax
	cmpb	$21, 16(%rax)
	je	.L6464
.L5507:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L5517
	cmpq	$0, 96(%rax)
	je	.L5518
	testb	$8, 62(%rax)
	je	.L5517
.L5518:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5517
	movq	112(%rsp), %rax
	movq	32(%rax), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5517
	movq	32(%rbp), %rcx
	movq	24(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L5517
.L5524:
	movq	112(%rsp), %r11
	movq	8(%rbx), %rdi
	movq	32(%r11), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5520
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5524
	jmp	.L5517
.L5520:
	testq	%rbx, %rbx
	jne	.L5502
	jmp	.L5517
.L6464:
	cmpq	$0, 96(%rax)
	je	.L5508
	testb	$8, 62(%rax)
	je	.L5507
.L5508:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5507
	movq	32(%rbp), %r10
	movq	32(%r10), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5507
	movq	112(%rsp), %rsi
	movq	32(%rsi), %r8
	movq	24(%r8), %rbx
	testq	%rbx, %rbx
	je	.L5517
.L5514:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5520
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5514
	jmp	.L5517
.L6462:
	movq	32(%rbp), %rdi
	jmp	.L6243
.L6461:
	testq	%rbp, %rbp
	je	.L5497
	jmp	.L5517
.L6095:
	movl	148(%rsp), %eax
	jmp	.L6218
.L6455:
	movq	%rcx, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L5444
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L6095
	movq	%rax, %rbp
	movl	$1, 140(%rsp)
	movl	$0, 144(%rsp)
.L5489:
	cmpq	$0, 120(%rsp)
	je	.L6465
	testq	%rbp, %rbp
	je	.L5478
	movq	120(%rsp), %rcx
	movq	32(%rcx), %rdi
	testq	%rdi, %rdi
	je	.L6466
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L5464
.L6242:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L5478
.L5463:
	movl	140(%rsp), %r11d
	movl	144(%rsp), %ebx
	cmpl	%r11d, 144(%rsp)
	movq	120(%rsp), %rcx
	cmovle	%r11d, %ebx
	movl	%ebx, 140(%rsp)
	movq	(%rcx), %rax
	movq	%rax, 120(%rsp)
	movq	(%rbp), %rbp
	jmp	.L5489
.L5478:
	movl	$0, 140(%rsp)
.L5458:
	cmpl	$1, 140(%rsp)
	movl	$2, 108(%rsp)
	jmp	.L6244
.L5464:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 144(%rsp)
	jne	.L5463
	movq	120(%rsp), %rbx
	movq	32(%rbx), %rax
	cmpb	$21, 16(%rax)
	je	.L6468
.L5468:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L5478
	cmpq	$0, 96(%rax)
	je	.L5479
	testb	$8, 62(%rax)
	je	.L5478
.L5479:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5478
	movq	120(%rsp), %r8
	movq	32(%r8), %r10
	movq	32(%r10), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5478
	movq	32(%rbp), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L5478
.L5485:
	movq	120(%rsp), %rdx
	movq	8(%rbx), %rdi
	movq	32(%rdx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5481
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5485
	jmp	.L5478
.L5481:
	testq	%rbx, %rbx
	jne	.L5463
	jmp	.L5478
.L6468:
	cmpq	$0, 96(%rax)
	je	.L5469
	testb	$8, 62(%rax)
	je	.L5468
.L5469:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L5468
	movq	32(%rbp), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5468
	movq	120(%rsp), %r9
	movq	32(%r9), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L5478
.L5475:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L5481
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L5475
	jmp	.L5478
.L6466:
	movq	32(%rbp), %rdi
	jmp	.L6242
.L6465:
	testq	%rbp, %rbp
	je	.L5458
	jmp	.L5478
.L5580:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmovne	108(%rsp), %eax
	jmp	.L6218
.L5567:
	movq	24(%rbx), %r11
	movq	%r11, 272(%rsp)
	movq	24(%rbp), %rsi
	movl	$1, 108(%rsp)
	movq	%rsi, 264(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L5568
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 108(%rsp)
	je	.L5432
.L5568:
	cmpq	$0, 272(%rsp)
	je	.L5444
	cmpq	$0, 264(%rsp)
	je	.L5444
	movq	264(%rsp), %rbx
	cmpq	%rbx, 272(%rsp)
	je	.L5444
	movq	272(%rsp), %rax
	movq	112(%rbx), %rsi
	movq	112(%rax), %rcx
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L5571
	movq	104(%rax), %rbp
	cmpb	$25, 16(%rbp)
	je	.L6469
.L5572:
	movl	$1, %r8d
.L5571:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L5573
	movq	264(%rsp), %rax
	movq	104(%rax), %r10
	cmpb	$25, 16(%r10)
	je	.L6470
.L5574:
	movl	$1, %ecx
.L5573:
	testb	%r8b, %r8b
	jne	.L5444
	testb	%cl, %cl
	jne	.L5444
	testb	%dil, %dil
	je	.L6136
	testb	%dl, %dl
.L6217:
	jne	.L5444
.L5579:
	movl	$0, 108(%rsp)
	jmp	.L5444
.L6136:
	testb	%dl, %dl
	jne	.L5579
	movq	272(%rsp), %rdx
	movq	264(%rsp), %rbx
	movq	104(%rdx), %rdi
	movq	104(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L5579
	movq	272(%rsp), %r8
	movq	264(%rsp), %rcx
	movq	112(%r8), %rdi
	movq	112(%rcx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L6217
.L6470:
	cmpb	$25, 16(%rsi)
	jne	.L5574
	jmp	.L5573
.L6469:
	cmpb	$25, 16(%rcx)
	jne	.L5572
	jmp	.L5571
.L6219:
	movl	$1, 108(%rsp)
	jmp	.L5432
.L6454:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L5441
.L6453:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L5440
.L6451:
	movzbl	17(%rbp), %esi
	movzwl	60(%rbp), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L5436
.L6450:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L5435
.L6449:
	testb	$2, 62(%rbp)
	je	.L5434
	movq	24(%rbp), %rcx
	testq	%rcx, %rcx
	cmovne	%rcx, %rbp
	jmp	.L5434
.L6448:
	testb	$2, 62(%rbx)
	je	.L5433
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L5433
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L5433
	.p2align 6,,7
.L5422:
	movl	pedantic(%rip), %ebp
	testl	%ebp, %ebp
	je	.L5423
	cmpl	$5, %esi
	je	.L6471
.L5424:
	movl	$.LC56, %edi
	xorl	%eax, %eax
	call	pedwarn
.L5423:
	movq	global_trees+216(%rip), %r15
	movq	%r15, 8(%rsp)
	jmp	.L5009
.L6471:
	cmpl	$5, %edx
	jne	.L5424
	jmp	.L5423
	.p2align 6,,7
.L6293:
	cmpq	%r15, %r12
	cmovne	%rax, %r15
	jmp	.L6022
.L5001:
	movq	integer_types+48(%rip), %rdi
	jmp	.L6192
.L4999:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L5002
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L5002
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%rbp)
	je	.L6472
.L5002:
	cmpl	$5, %ebx
	je	.L6473
.L5003:
	movq	%r14, %rbx
	jmp	.L4970
.L6473:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L6194:
	movq	global_trees(%rip), %rbx
	jmp	.L4970
.L6472:
	movq	global_trees+200(%rip), %rdi
	jmp	.L6192
	.p2align 6,,7
.L6292:
	movq	40(%r14), %rdx
	testb	$2, 53(%rdx)
	je	.L4994
	movq	integer_types+40(%rip), %rcx
	movq	40(%rdx), %rdi
	movzwl	60(%rcx), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L4994
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L5000
	testb	$32, 17(%rbp)
	jne	.L5001
	jmp	.L5000
	.p2align 6,,7
.L6291:
	movq	integer_types+40(%rip), %rsi
	movzwl	60(%rbp), %edx
	movl	flag_traditional(%rip), %ebx
	movzwl	60(%rsi), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%ebx, %ebx
	jne	.L4993
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L4992
.L4993:
	testb	$32, 17(%rbp)
	movl	$1, %eax
	cmovne	%eax, %esi
.L4992:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L6192
.L4986:
	movl	24(%rsi), %eax
	movl	%eax, 24(%r14)
	jmp	.L4985
.L6290:
	movq	32(%r14), %rdx
	movq	8(%r14), %r15
	cmpq	%r15, 8(%rdx)
	jne	.L4981
	.p2align 4,,7
.L4984:
	movzbl	16(%rdx), %ecx
	movq	%rdx, %r14
	cmpb	$116, %cl
	jne	.L6474
.L6172:
	movq	32(%r14), %rdx
	jmp	.L4984
.L6474:
	cmpb	$115, %cl
	jne	.L4981
	movq	32(%rdx), %r10
	movq	8(%r14), %r9
	cmpq	%r9, 8(%r10)
	movq	%r10, %rdx
	je	.L4984
	jmp	.L4981
.L6289:
	movl	pedantic(%rip), %r11d
	testl	%r11d, %r11d
	jne	.L4972
	cmpb	$51, 48(%r14)
	je	.L4972
	cmpq	$0, current_function_decl(%rip)
	je	.L4978
	movzbl	17(%r14), %ebp
	andb	$24, %bpl
	cmpb	$16, %bpl
	je	.L6475
.L4978:
	movq	%r14, %rdx
.L4979:
	movq	%rdx, %r14
	movq	8(%rdx), %rbp
.L6191:
	movzbl	16(%r14), %ecx
	jmp	.L4972
.L6475:
	movq	104(%r14), %rax
	testq	%rax, %rax
	je	.L4978
	movzbl	16(%rax), %ecx
	testb	%cl, %cl
	je	.L4978
	testb	$2, 17(%rax)
	je	.L4978
	cmpb	$46, %cl
	movq	%rax, %rdx
	jne	.L4979
	jmp	.L4978
	.p2align 6,,7
.L6288:
	movq	104(%r14), %r14
	jmp	.L6191
.L4945:
	movzbl	16(%r14), %ecx
	movl	%ebx, %edi
	movq	%r14, %r8
	xorl	%ebx, %ebx
	cmpb	$116, %cl
	je	.L6170
	cmpb	$115, %cl
	je	.L6476
.L4947:
	movzbl	%cl, %ebp 
	movzbl	tree_code_type(%rbp), %eax
	cmpb	$60, %al
	je	.L4953
	cmpb	$49, %al
	je	.L4953
	cmpb	$50, %al
	je	.L4953
	cmpb	$101, %al
	je	.L4953
.L4952:
	cmpl	$23, %edi
	je	.L6477
	cmpl	$18, %edi
	jne	.L5003
	movzbl	%cl, %edi 
	xorl	%edx, %edx
	xorl	%ebp, %ebp
	movzbl	tree_code_type(%rdi), %eax
	movq	8(%rsi), %r12
	cmpb	$114, %al
	je	.L4958
	cmpb	$100, %al
	je	.L4958
.L4957:
	movzbl	17(%rsi), %edi
	movl	$1, %r8d
	xorl	%r10d, %r10d
	movl	%edi, %r9d
	movl	%edi, %r15d
	shrb	$4, %r9b
	shrb	$3, %r15b
	andl	%r9d, %r8d
	andl	$1, %r15d
	movzbl	62(%rsi), %r9d
	addl	%r15d, %r15d
	orl	%r15d, %r8d
	movl	%r9d, %r11d
	shrb	$5, %r11b
	andl	$1, %r11d
	sall	$2, %r11d
	orl	%r11d, %r8d
	movzbl	16(%rsi), %r11d
	cmpb	$20, %r11b
	je	.L6478
.L4961:
	leal	0(,%r10,8), %esi
	orl	%esi, %r8d
	jne	.L4960
	testl	%edx, %edx
	jne	.L4960
	testl	%ebp, %ebp
	je	.L4959
.L4960:
	movl	%edi, %r8d
	shrb	$5, %r9b
	movl	$1, %esi
	shrb	$3, %dil
	shrb	$4, %r8b
	movl	%r9d, %ecx
	movl	%edi, %r10d
	andl	%r8d, %esi
	andl	$1, %ecx
	andl	$1, %r10d
	sall	$2, %ecx
	addl	%r10d, %r10d
	orl	%r10d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %r11b
	je	.L6479
.L4963:
	leal	0(,%rcx,8), %edi
	orl	%edi, %esi
	movq	%r12, %rdi
	orl	%edx, %esi
	leal	(%rbp,%rbp), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%r14), %ecx
	movq	%rax, %r12
.L4959:
	cmpb	$41, %cl
	je	.L6480
	cmpb	$47, %cl
	je	.L6481
	xorl	%ebp, %ebp
	testl	%ebx, %ebx
	je	.L6482
.L4966:
	movl	flag_isoc99(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L4967
	testl	%ebp, %ebp
	movq	%r14, %rbx
	je	.L4970
.L4967:
	movq	%r12, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r14)
	movq	%rax, %rbx
	je	.L6483
	movl	$121, %edi
	movq	%r14, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L6193
.L6483:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r14, %rdx
	call	build1
	movq	%r14, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L6194
	movq	%r14, %rdi
	call	staticp
	movzbl	17(%rbx), %r14d
	movl	%eax, %r12d
	andb	$1, %r12b
	addb	%r12b, %r12b
	andb	$-4, %r14b
	orb	%r12b, %r14b
	movb	%r14b, 17(%rbx)
	jmp	.L4970
.L6482:
	movq	%r14, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebp
	jmp	.L4966
.L6481:
	movq	40(%r14), %rdi
	call	default_conversion
	movq	32(%r14), %rdx
	movl	$47, %edi
	movq	8(%rax), %rsi
	movq	%rax, %rcx
	xorl	%eax, %eax
	call	build
	jmp	.L6195
.L6480:
	movq	72(%r12), %rdi
	movq	32(%r14), %rsi
	jmp	.L6193
.L6479:
	testq	%r12, %r12
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L4963
.L6478:
	testq	%r12, %r12
	movl	$1, %eax
	cmovne	%eax, %r10d
	jmp	.L4961
.L4958:
	movzbl	17(%r14), %r8d
	movl	$1, %ebp
	movl	%r8d, %edx
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	%r8d, %ebp
	andl	$1, %edx
	jmp	.L4957
.L6477:
	movl	$121, %edi
	movq	%r14, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L6195
.L4953:
	movl	24(%r8), %eax
	movl	%eax, 24(%r14)
	jmp	.L4952
.L6476:
	movq	32(%r14), %rdx
	cmpq	%rbp, 8(%rdx)
	jne	.L4947
	.p2align 4,,7
.L4951:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rdx, %r14
	movzbl	16(%rdx), %ecx
	cmove	%eax, %ebx
	cmpb	$116, %cl
	jne	.L6484
.L6170:
	movq	32(%r14), %rdx
	jmp	.L4951
.L6484:
	cmpb	$115, %cl
	jne	.L4947
	movq	32(%rdx), %rdx
	movq	8(%r14), %r10
	cmpq	%r10, 8(%rdx)
	je	.L4951
	jmp	.L4947
.L4940:
	movq	integer_types+48(%rip), %rdi
	jmp	.L6187
.L4938:
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	je	.L4941
	movl	flag_allow_single_precision(%rip), %r15d
	testl	%r15d, %r15d
	jne	.L4941
	movq	global_trees+192(%rip), %r9
	cmpq	%r9, 128(%rbp)
	je	.L6485
.L4941:
	cmpl	$5, %ebx
	je	.L6486
.L4942:
	movq	%r13, %rbx
	jmp	.L4909
.L6486:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L6189:
	movq	global_trees(%rip), %rbx
	jmp	.L4909
.L6485:
	movq	global_trees+200(%rip), %rdi
	jmp	.L6187
	.p2align 6,,7
.L6287:
	movq	40(%r13), %rdx
	testb	$2, 53(%rdx)
	je	.L4933
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%rdi), %esi
	movq	40(%rdx), %rdi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L4933
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L4939
	testb	$32, 17(%rbp)
	jne	.L4940
	jmp	.L4939
	.p2align 6,,7
.L6286:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%rbp), %edx
	movl	flag_traditional(%rip), %ebx
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%ebx, %ebx
	jne	.L4932
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L4931
.L4932:
	testb	$32, 17(%rbp)
	movl	$1, %eax
	cmovne	%eax, %esi
.L4931:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L6187
.L4925:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r13)
	jmp	.L4924
.L6285:
	movq	32(%r13), %rsi
	movq	8(%r13), %r9
	cmpq	%r9, 8(%rsi)
	jne	.L4920
	.p2align 4,,7
.L4923:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r13
	cmpb	$116, %cl
	jne	.L6487
.L6168:
	movq	32(%r13), %rsi
	jmp	.L4923
.L6487:
	cmpb	$115, %cl
	jne	.L4920
	movq	32(%rsi), %r10
	movq	8(%r13), %r15
	cmpq	%r15, 8(%r10)
	movq	%r10, %rsi
	je	.L4923
	jmp	.L4920
.L6284:
	movl	pedantic(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L4911
	cmpb	$51, 48(%r13)
	je	.L4911
	cmpq	$0, current_function_decl(%rip)
	je	.L4917
	movzbl	17(%r13), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L6488
.L4917:
	movq	%r13, %rsi
.L4918:
	movq	%rsi, %r13
	movq	8(%rsi), %rbp
.L6186:
	movzbl	16(%r13), %ecx
	jmp	.L4911
.L6488:
	movq	104(%r13), %rax
	testq	%rax, %rax
	je	.L4917
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L4917
	testb	$2, 17(%rax)
	je	.L4917
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L4918
	jmp	.L4917
	.p2align 6,,7
.L6283:
	movq	104(%r13), %r13
	jmp	.L6186
.L4884:
	movzbl	16(%r13), %ecx
	movl	%ebx, %edx
	movq	%r13, %r8
	xorl	%ebx, %ebx
	cmpb	$116, %cl
	je	.L6166
	cmpb	$115, %cl
	je	.L6489
.L4886:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L4892
	cmpb	$49, %al
	je	.L4892
	cmpb	$50, %al
	je	.L4892
	cmpb	$101, %al
	je	.L4892
.L4891:
	cmpl	$23, %edx
	je	.L6490
	cmpl	$18, %edx
	jne	.L4942
	movzbl	%cl, %r8d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r8), %eax
	movq	8(%rdi), %r12
	cmpb	$114, %al
	je	.L4897
	cmpb	$100, %al
	je	.L4897
.L4896:
	movzbl	17(%rdi), %r8d
	movl	$1, %esi
	movl	%r8d, %r9d
	movl	%r8d, %r10d
	shrb	$3, %r9b
	shrb	$4, %r10b
	andl	$1, %r9d
	andl	%r10d, %esi
	xorl	%r10d, %r10d
	addl	%r9d, %r9d
	orl	%r9d, %esi
	movzbl	62(%rdi), %r9d
	movzbl	16(%rdi), %edi
	movl	%r9d, %r15d
	shrb	$5, %r15b
	andl	$1, %r15d
	sall	$2, %r15d
	orl	%r15d, %esi
	cmpb	$20, %dil
	je	.L6491
.L4900:
	leal	0(,%r10,8), %ebp
	orl	%ebp, %esi
	jne	.L4899
	testl	%edx, %edx
	jne	.L4899
	testl	%r11d, %r11d
	je	.L4898
.L4899:
	movl	%r8d, %r10d
	shrb	$5, %r9b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r10b
	movl	%r9d, %ecx
	movl	%r8d, %r15d
	andl	%r10d, %esi
	andl	$1, %ecx
	andl	$1, %r15d
	sall	$2, %ecx
	addl	%r15d, %r15d
	orl	%r15d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L6492
.L4902:
	leal	0(,%rcx,8), %r8d
	leal	(%r11,%r11), %edi
	orl	%r8d, %esi
	orl	%edx, %esi
	orl	%edi, %esi
	movq	%r12, %rdi
	call	c_build_qualified_type
	movzbl	16(%r13), %ecx
	movq	%rax, %r12
.L4898:
	cmpb	$41, %cl
	je	.L6493
	cmpb	$47, %cl
	je	.L6494
	xorl	%ebp, %ebp
	testl	%ebx, %ebx
	je	.L6495
.L4905:
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L4906
	testl	%ebp, %ebp
	movq	%r13, %rbx
	je	.L4909
.L4906:
	movq	%r12, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r13)
	movq	%rax, %rbx
	je	.L6496
	movl	$121, %edi
	movq	%r13, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L6188
.L6496:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r13, %rdx
	call	build1
	movq	%r13, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L6189
	movq	%r13, %rdi
	call	staticp
	movzbl	17(%rbx), %r13d
	movl	%eax, %r11d
	andb	$1, %r11b
	addb	%r11b, %r11b
	andb	$-4, %r13b
	orb	%r11b, %r13b
	movb	%r13b, 17(%rbx)
	jmp	.L4909
.L6495:
	movq	%r13, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebp
	jmp	.L4905
.L6494:
	movq	40(%r13), %rdi
	call	default_conversion
	movq	32(%r13), %rdx
	movl	$47, %edi
	movq	8(%rax), %rsi
	movq	%rax, %rcx
	xorl	%eax, %eax
	call	build
	jmp	.L6190
.L6493:
	movq	72(%r12), %rdi
	movq	32(%r13), %rsi
	jmp	.L6188
.L6492:
	testq	%r12, %r12
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L4902
.L6491:
	testq	%r12, %r12
	movl	$1, %eax
	cmovne	%eax, %r10d
	jmp	.L4900
.L4897:
	movzbl	17(%r13), %ebp
	movl	$1, %r11d
	movl	%ebp, %edx
	shrb	$3, %bpl
	shrb	$4, %dl
	andl	%ebp, %r11d
	andl	$1, %edx
	jmp	.L4896
.L6490:
	movl	$121, %edi
	movq	%r13, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L6190
.L4892:
	movl	24(%r8), %eax
	movl	%eax, 24(%r13)
	jmp	.L4891
.L6489:
	movq	32(%r13), %rsi
	cmpq	%rbp, 8(%rsi)
	jne	.L4886
	.p2align 4,,7
.L4890:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r13
	movzbl	16(%rsi), %ecx
	cmove	%eax, %ebx
	cmpb	$116, %cl
	jne	.L6497
.L6166:
	movq	32(%r13), %rsi
	jmp	.L4890
.L6497:
	cmpb	$115, %cl
	jne	.L4886
	movq	32(%rsi), %rsi
	movq	8(%r13), %r10
	cmpq	%r10, 8(%rsi)
	je	.L4890
	jmp	.L4886
.L4879:
	movq	integer_types+48(%rip), %rdi
	jmp	.L6182
.L4877:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L4880
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L4880
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%r12)
	je	.L6498
.L4880:
	cmpl	$5, %ebp
	je	.L6499
.L4881:
	movq	%rbx, %rbp
	jmp	.L4853
.L6499:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L6184:
	movq	global_trees(%rip), %rbp
	jmp	.L4853
.L6498:
	movq	global_trees+200(%rip), %rdi
	jmp	.L6182
	.p2align 6,,7
.L6282:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L4874
	movq	integer_types+40(%rip), %r15
	movq	40(%rdx), %rdi
	movzwl	60(%r15), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L4874
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L4878
	testb	$32, 17(%r12)
	jne	.L4879
	jmp	.L4878
	.p2align 6,,7
.L6281:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r12), %edx
	movl	flag_traditional(%rip), %ebp
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%ebp, %ebp
	jne	.L4873
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L4872
.L4873:
	testb	$32, 17(%r12)
	movl	$1, %eax
	cmovne	%eax, %esi
.L4872:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L6182
.L4869:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L4868
.L6280:
	movq	32(%rbx), %rdi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rdi)
	jne	.L4864
	.p2align 4,,7
.L4867:
	movzbl	16(%rdi), %ecx
	movq	%rdi, %rbx
	cmpb	$116, %cl
	jne	.L6500
.L6164:
	movq	32(%rbx), %rdi
	jmp	.L4867
.L6500:
	cmpb	$115, %cl
	jne	.L4864
	movq	32(%rdi), %r11
	movq	8(%rbx), %r8
	cmpq	%r8, 8(%r11)
	movq	%r11, %rdi
	je	.L4867
	jmp	.L4864
.L6279:
	movl	pedantic(%rip), %r9d
	testl	%r9d, %r9d
	jne	.L4859
	cmpb	$51, 48(%rdi)
	je	.L4859
	cmpq	$0, current_function_decl(%rip)
	je	.L4861
	movzbl	17(%rdi), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L6501
.L4861:
	movq	%rbx, %rdi
.L4862:
	movq	%rdi, %rbx
	movq	8(%rdi), %rax
	movzbl	16(%rdi), %ecx
.L4859:
	movq	%rax, %r12
	jmp	.L4855
.L6501:
	movq	104(%rdi), %rax
	testq	%rax, %rax
	je	.L4861
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L4861
	testb	$2, 17(%rax)
	je	.L4861
	cmpb	$46, %dl
	movq	%rax, %rdi
	jne	.L4862
	jmp	.L4861
	.p2align 6,,7
.L6278:
	movq	104(%rdi), %rbx
	movzbl	16(%rbx), %ecx
	jmp	.L4855
.L4829:
	movzbl	16(%rbx), %ecx
	movl	%ebp, %edx
	movq	%rbx, %rsi
	xorl	%ebp, %ebp
	cmpb	$116, %cl
	je	.L6162
	cmpb	$115, %cl
	je	.L6502
.L4831:
	movzbl	%cl, %edi 
	movzbl	tree_code_type(%rdi), %eax
	cmpb	$60, %al
	je	.L4837
	cmpb	$49, %al
	je	.L4837
	cmpb	$50, %al
	je	.L4837
	cmpb	$101, %al
	je	.L4837
.L4836:
	cmpl	$23, %edx
	je	.L6503
	cmpl	$18, %edx
	jne	.L4881
	movzbl	%cl, %esi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rsi), %eax
	movq	8(%r12), %r15
	cmpb	$114, %al
	je	.L4842
	cmpb	$100, %al
	je	.L4842
.L4841:
	movzbl	17(%r12), %r8d
	movl	$1, %esi
	movl	%r8d, %r9d
	movl	%r8d, %edi
	shrb	$3, %r9b
	shrb	$4, %dil
	andl	$1, %r9d
	andl	%edi, %esi
	movzbl	16(%r12), %edi
	addl	%r9d, %r9d
	orl	%r9d, %esi
	movzbl	62(%r12), %r9d
	movl	%r9d, %r10d
	shrb	$5, %r10b
	andl	$1, %r10d
	sall	$2, %r10d
	orl	%r10d, %esi
	xorl	%r10d, %r10d
	cmpb	$20, %dil
	je	.L6504
.L4845:
	leal	0(,%r10,8), %r12d
	orl	%r12d, %esi
	jne	.L4844
	testl	%edx, %edx
	jne	.L4844
	testl	%r11d, %r11d
	je	.L4843
.L4844:
	movl	%r8d, %r12d
	shrb	$5, %r9b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r12b
	movl	%r9d, %ecx
	movl	%r8d, %r10d
	andl	%r12d, %esi
	andl	$1, %ecx
	andl	$1, %r10d
	sall	$2, %ecx
	addl	%r10d, %r10d
	orl	%r10d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L6505
.L4846:
	leal	0(,%rcx,8), %r8d
	movq	%r15, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%rbx), %ecx
	movq	%rax, %r15
.L4843:
	cmpb	$41, %cl
	je	.L6506
	cmpb	$47, %cl
	je	.L6507
	xorl	%r12d, %r12d
	testl	%ebp, %ebp
	je	.L6508
.L4849:
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L4850
	testl	%r12d, %r12d
	movq	%rbx, %rbp
	je	.L4853
.L4850:
	movq	%r15, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %rbp
	je	.L6509
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbp, %rdi
	movq	%rax, %rsi
	jmp	.L6183
.L6509:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, %rbp
	call	mark_addressable
	testl	%eax, %eax
	je	.L6184
	movq	%rbx, %rdi
	call	staticp
	movzbl	17(%rbp), %ebx
	movl	%eax, %r11d
	andb	$1, %r11b
	addb	%r11b, %r11b
	andb	$-4, %bl
	orb	%r11b, %bl
	movb	%bl, 17(%rbp)
	jmp	.L4853
.L6508:
	movq	%rbx, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r12d
	jmp	.L4849
.L6507:
	movq	40(%rbx), %rdi
	call	default_conversion
	movq	32(%rbx), %rdx
	movl	$47, %edi
	movq	8(%rax), %rsi
	movq	%rax, %rcx
	xorl	%eax, %eax
	call	build
	jmp	.L6185
.L6506:
	movq	72(%r15), %rdi
	movq	32(%rbx), %rsi
	jmp	.L6183
.L6505:
	testq	%r15, %r15
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L4846
.L6504:
	testq	%r15, %r15
	movl	$1, %eax
	cmovne	%eax, %r10d
	jmp	.L4845
.L4842:
	movzbl	17(%rbx), %r8d
	movl	$1, %r11d
	movl	%r8d, %edx
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	%r8d, %r11d
	andl	$1, %edx
	jmp	.L4841
.L6503:
	movl	$121, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L6185
.L4837:
	movl	24(%rsi), %eax
	movl	%eax, 24(%rbx)
	jmp	.L4836
.L6502:
	movq	32(%rbx), %rdi
	cmpq	%r12, 8(%rdi)
	jne	.L4831
	.p2align 4,,7
.L4835:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rdi, %rbx
	movzbl	16(%rdi), %ecx
	cmove	%eax, %ebp
	cmpb	$116, %cl
	jne	.L6510
.L6162:
	movq	32(%rbx), %rdi
	jmp	.L4835
.L6510:
	cmpb	$115, %cl
	jne	.L4831
	movq	32(%rdi), %rdi
	movq	8(%rbx), %r8
	cmpq	%r8, 8(%rdi)
	je	.L4835
	jmp	.L4831
.LFE10:
.Lfe10:
	.size	build_conditional_expr,.Lfe10-build_conditional_expr
	.section	.rodata.str1.1
.LC62:
	.string	"struct"
	.section	.rodata.str1.32
	.align 32
.LC71:
	.string	"invalid use of incomplete typedef `%s'"
	.section	.rodata.str1.1
.LC72:
	.string	"invalid lvalue in assignment"
.LC73:
	.string	"assignment"
	.section	.rodata.str1.32
	.align 32
.LC70:
	.string	"invalid use of undefined type `%s %s'"
	.align 32
.LC65:
	.string	"invalid use of void expression"
	.section	.rodata.str1.1
.LC64:
	.string	"enum"
	.section	.rodata.str1.32
	.align 32
.LC66:
	.string	"invalid use of flexible array member"
	.align 32
.LC67:
	.string	"invalid use of array with unspecified bounds"
	.section	.rodata.str1.1
.LC63:
	.string	"union"
.LC61:
	.string	"`%s' has an incomplete type"
.LC68:
	.string	"c-typeck.c"
.LC69:
	.string	"incomplete_type_error"
	.text
	.align 2
	.p2align 4,,15
.globl build_modify_expr
	.type	build_modify_expr,@function
build_modify_expr:
.LFB11:
	pushq	%r15
.LCFI38:
	pushq	%r14
.LCFI39:
	movl	%esi, %r14d
	pushq	%r13
.LCFI40:
	pushq	%r12
.LCFI41:
	movq	%rdi, %r12
	pushq	%rbp
.LCFI42:
	movq	%rdx, %rbp
	pushq	%rbx
.LCFI43:
	subq	$8, %rsp
.LCFI44:
	movq	global_trees(%rip), %rax
	movq	8(%rdi), %r13
	cmpq	%rax, %rdi
	movq	%r13, %r15
	movq	%r13, %rcx
	je	.L6517
	cmpq	%rax, %r13
	je	.L6517
	cmpq	$0, 32(%r13)
	jne	.L6514
	movzbl	16(%r13), %edx
	testb	%dl, %dl
	je	.L6517
	testq	%rdi, %rdi
	je	.L6520
	movzbl	16(%rdi), %ebx
	subb	$34, %bl
	cmpb	$1, %bl
	jbe	.L6639
.L6520:
	movzbl	%dl, %eax
	subl	$5, %eax
	cmpl	$16, %eax
	ja	.L6529
	mov	%eax, %edx
	jmp	*.L6530(,%rdx,8)
	.section	.rodata
	.align 8
	.align 4
.L6530:
	.quad	.L6525
	.quad	.L6529
	.quad	.L6529
	.quad	.L6529
	.quad	.L6529
	.quad	.L6524
	.quad	.L6529
	.quad	.L6529
	.quad	.L6529
	.quad	.L6529
	.quad	.L6529
	.quad	.L6529
	.quad	.L6529
	.quad	.L6526
	.quad	.L6529
	.quad	.L6522
	.quad	.L6523
	.text
.L6522:
	movl	$.LC62, %esi
.L6521:
	movq	96(%rcx), %rax
	cmpb	$1, 16(%rax)
	je	.L6640
	movq	72(%rax), %rax
	movl	$.LC71, %edi
.L6631:
	movq	32(%rax), %rsi
	xorl	%eax, %eax
	call	error
.L6630:
	movq	global_trees(%rip), %rax
.L6517:
	movq	%rax, %r12
.L6514:
	movzbl	16(%r12), %ecx
	testb	%cl, %cl
	je	.L6534
	movzbl	16(%rbp), %edx
	testb	%dl, %dl
	jne	.L6533
.L6534:
	movq	%rax, %rbx
.L6511:
	addq	$8, %rsp
	movq	%rbx, %rax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L6533:
	cmpb	$116, %dl
	je	.L6641
.L6535:
	movzbl	%cl, %eax
	movq	%rbp, %rbx
	cmpl	$47, %eax
	je	.L6537
	cmpl	$51, %eax
	je	.L6540
	cmpl	$115, %r14d
	je	.L6544
	movq	%r12, %rdi
	call	stabilize_reference
	movl	$1, %ecx
	movq	%rbp, %rdx
	movl	%r14d, %edi
	movq	%rax, %rsi
	movq	%rax, %r12
	call	build_binary_op
	movzbl	16(%r12), %ecx
	movq	%rax, %rbx
.L6544:
	movzbl	%cl, %eax
	cmpl	$72, %eax
	jb	.L6545
	cmpl	$76, %eax
	jbe	.L6552
	subl	$114, %eax
	cmpl	$1, %eax
	ja	.L6545
.L6552:
	movzbl	16(%rbx), %ecx
	movq	8(%rbx), %r8
	xorl	%ebp, %ebp
	movq	%rbx, %rdi
	movzbl	16(%r8), %esi
	cmpb	$116, %cl
	je	.L6627
	cmpb	$115, %cl
	je	.L6642
.L6554:
	movzbl	%cl, %r11d 
	movzbl	tree_code_type(%r11), %eax
	cmpb	$60, %al
	je	.L6560
	cmpb	$49, %al
	je	.L6560
	cmpb	$50, %al
	je	.L6560
	cmpb	$101, %al
	je	.L6560
.L6559:
	cmpl	$23, %esi
	je	.L6643
	cmpl	$18, %esi
	je	.L6644
	movq	%rbx, %rbp
.L6562:
	movq	32(%r12), %r15
	movq	%r13, %rdi
	movq	%rbp, %rsi
	call	convert
	movq	%rax, %rsi
	movq	8(%r15), %rdi
	call	convert
	movl	$115, %esi
	movq	%r15, %rdi
	movq	%rax, %rdx
	call	build_modify_expr
	cmpb	$0, 16(%rax)
	movq	%rax, %rbx
	je	.L6511
	movl	$114, %edi
	call	pedantic_lvalue_warning
	movq	8(%r12), %rdi
	movq	%rbx, %rsi
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	convert
.L6644:
	movzbl	%cl, %esi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rsi), %eax
	movq	8(%r8), %r15
	cmpb	$114, %al
	je	.L6565
	cmpb	$100, %al
	je	.L6565
.L6564:
	movzbl	17(%r8), %edi
	movl	$1, %esi
	movl	%edi, %r10d
	movl	%edi, %r9d
	shrb	$4, %r10b
	shrb	$3, %r9b
	andl	%r10d, %esi
	andl	$1, %r9d
	movzbl	62(%r8), %r10d
	movzbl	16(%r8), %r8d
	addl	%r9d, %r9d
	orl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r10d, %r14d
	shrb	$5, %r14b
	andl	$1, %r14d
	sall	$2, %r14d
	orl	%r14d, %esi
	cmpb	$20, %r8b
	je	.L6645
.L6568:
	leal	0(,%r9,8), %r14d
	orl	%r14d, %esi
	jne	.L6567
	testl	%edx, %edx
	jne	.L6567
	testl	%r11d, %r11d
	je	.L6566
.L6567:
	movl	%edi, %r14d
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %dil
	shrb	$4, %r14b
	movl	%r10d, %ecx
	movl	%edi, %r9d
	andl	%r14d, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %r8b
	je	.L6646
.L6570:
	leal	0(,%rcx,8), %edi
	leal	(%r11,%r11), %r8d
	orl	%edi, %esi
	movq	%r15, %rdi
	orl	%edx, %esi
	orl	%r8d, %esi
	call	c_build_qualified_type
	movzbl	16(%rbx), %ecx
	movq	%rax, %r15
.L6566:
	cmpb	$41, %cl
	je	.L6647
	cmpb	$47, %cl
	je	.L6648
	xorl	%r14d, %r14d
	testl	%ebp, %ebp
	je	.L6649
.L6609:
	movl	flag_isoc99(%rip), %ebp
	testl	%ebp, %ebp
	jne	.L6610
	testl	%r14d, %r14d
	movq	%rbx, %rbp
	je	.L6562
.L6610:
	movq	%r15, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %rbp
	je	.L6650
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbp, %rdi
	movq	%rax, %rsi
.L6638:
	call	convert
.L6635:
	movq	%rax, %rbp
	jmp	.L6562
.L6650:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, %rbp
	call	mark_addressable
	testl	%eax, %eax
	jne	.L6612
	movq	global_trees(%rip), %rbp
	jmp	.L6562
.L6612:
	movq	%rbx, %rdi
	call	staticp
	movzbl	17(%rbp), %ebx
	movl	%eax, %esi
	andb	$1, %sil
	addb	%sil, %sil
	andb	$-4, %bl
	orb	%sil, %bl
	movb	%bl, 17(%rbp)
	jmp	.L6562
.L6649:
	movq	%rbx, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r14d
	jmp	.L6609
.L6648:
	movq	40(%rbx), %rbp
	movq	8(%rbp), %r14
	movzbl	16(%r14), %r15d
	movq	%r14, %rax
	cmpl	$23, %r15d
	je	.L6574
	cmpl	$18, %r15d
	je	.L6574
	movzbl	16(%rbp), %edx
	cmpb	$32, %dl
	je	.L6651
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L6577
	cmpb	$34, %dl
	je	.L6652
.L6577:
	cmpb	$116, %dl
	movq	%rbp, %rcx
	je	.L6629
	cmpb	$115, %dl
	je	.L6653
.L6586:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L6591
	cmpb	$49, %al
	je	.L6591
	cmpb	$50, %al
	je	.L6591
	cmpb	$101, %al
	je	.L6591
.L6590:
	cmpl	$10, %r15d
	je	.L6654
	cmpb	$39, %dl
	je	.L6655
.L6599:
	movq	%r14, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L6604
	testb	$32, 17(%r14)
	je	.L6605
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L6606
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r14), %r10d
	movzwl	60(%rdx), %r14d
	andl	$511, %r10d
	andl	$511, %r14d
	cmpl	%r14d, %r10d
	je	.L6606
.L6605:
	movq	integer_types+40(%rip), %rdi
.L6634:
	movq	%rbp, %rsi
	call	convert
.L6575:
	movq	8(%rax), %rsi
	movq	32(%rbx), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L6635
.L6606:
	movq	integer_types+48(%rip), %rdi
	jmp	.L6634
.L6604:
	movl	flag_traditional(%rip), %r9d
	testl	%r9d, %r9d
	je	.L6607
	movl	flag_allow_single_precision(%rip), %r8d
	testl	%r8d, %r8d
	jne	.L6607
	movq	global_trees+192(%rip), %rdi
	cmpq	%rdi, 128(%r14)
	je	.L6656
.L6607:
	cmpl	$5, %r15d
	je	.L6657
	movq	%rbp, %rax
	jmp	.L6575
.L6657:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L6575
.L6656:
	movq	global_trees+200(%rip), %rdi
	jmp	.L6634
	.p2align 6,,7
.L6655:
	movq	40(%rbp), %rdx
	testb	$2, 53(%rdx)
	je	.L6599
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L6599
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L6605
	testb	$32, 17(%r14)
	jne	.L6606
	jmp	.L6605
	.p2align 6,,7
.L6654:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r14), %edx
	movl	flag_traditional(%rip), %r15d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r15d, %r15d
	jne	.L6598
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L6597
.L6598:
	testb	$32, 17(%r14)
	movl	$1, %eax
	cmovne	%eax, %esi
.L6597:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L6634
.L6591:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbp)
	jmp	.L6590
.L6653:
	movq	32(%rbp), %rsi
	movq	8(%rbp), %r9
	cmpq	%r9, 8(%rsi)
	jne	.L6586
.L6589:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbp
	cmpb	$116, %dl
	jne	.L6658
.L6629:
	movq	32(%rbp), %rsi
	jmp	.L6589
.L6658:
	cmpb	$115, %dl
	jne	.L6586
	movq	32(%rsi), %rdi
	movq	8(%rbp), %r8
	cmpq	%r8, 8(%rdi)
	movq	%rdi, %rsi
	je	.L6589
	jmp	.L6586
.L6652:
	movl	pedantic(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L6581
	cmpb	$51, 48(%rbp)
	je	.L6581
	cmpq	$0, current_function_decl(%rip)
	je	.L6583
	movzbl	17(%rbp), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L6659
.L6583:
	movq	%rbp, %rsi
.L6584:
	movq	%rsi, %rbp
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L6581:
	movq	%rax, %r14
	jmp	.L6577
.L6659:
	movq	104(%rbp), %rax
	testq	%rax, %rax
	je	.L6583
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L6583
	testb	$2, 17(%rax)
	je	.L6583
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L6584
	jmp	.L6583
	.p2align 6,,7
.L6651:
	movq	104(%rbp), %rbp
	movzbl	16(%rbp), %edx
	jmp	.L6577
.L6574:
	movq	%rbp, %rdi
	call	default_function_array_conversion
	jmp	.L6575
.L6647:
	movq	72(%r15), %rdi
	movq	32(%rbx), %rsi
	jmp	.L6638
.L6646:
	testq	%r15, %r15
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L6570
.L6645:
	testq	%r15, %r15
	movl	$1, %eax
	cmovne	%eax, %r9d
	jmp	.L6568
.L6565:
	movzbl	17(%rbx), %edi
	movl	$1, %r11d
	movl	%edi, %edx
	shrb	$3, %dil
	shrb	$4, %dl
	andl	%edi, %r11d
	andl	$1, %edx
	jmp	.L6564
.L6643:
	movl	$121, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L6635
.L6560:
	movl	24(%rdi), %eax
	movl	%eax, 24(%rbx)
	jmp	.L6559
.L6642:
	movq	32(%rbx), %rdx
	cmpq	%r8, 8(%rdx)
	jne	.L6554
	.p2align 4,,7
.L6558:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rdx, %rbx
	movzbl	16(%rdx), %ecx
	cmove	%eax, %ebp
	cmpb	$116, %cl
	jne	.L6660
.L6627:
	movq	32(%rbx), %rdx
	jmp	.L6558
.L6660:
	cmpb	$115, %cl
	jne	.L6554
	movq	32(%rdx), %r10
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%r10)
	movq	%r10, %rdx
	je	.L6558
	jmp	.L6554
.L6545:
	movq	%r12, %rdi
	movl	$.LC72, %esi
	call	lvalue_or_else
	testl	%eax, %eax
	je	.L6636
	testb	$16, 17(%r12)
	jne	.L6618
	testb	$16, 17(%r13)
	jne	.L6618
	movzbl	16(%r13), %ecx
	subb	$20, %cl
	cmpb	$1, %cl
	ja	.L6617
	testb	$2, 19(%r13)
	je	.L6617
.L6618:
	movq	%r12, %rdi
	movl	$.LC73, %esi
	call	readonly_warning
.L6617:
	cmpb	$39, 16(%r12)
	je	.L6661
.L6619:
	cmpq	8(%r12), %r15
	je	.L6621
	movq	%r12, %rdi
	call	copy_node
	movq	%rax, %r12
	movq	%r15, 8(%rax)
.L6621:
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movl	$.LC73, %edx
	call	convert_for_assignment
	cmpb	$0, 16(%rax)
	jne	.L6622
.L6636:
	movq	global_trees(%rip), %rbx
	jmp	.L6511
.L6622:
	movq	%rax, %rcx
	movl	$48, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	movq	%r12, %rdx
	call	build
	orb	$1, 17(%rax)
	movq	%rax, %rbx
	cmpq	8(%rax), %r13
	je	.L6511
	addq	$8, %rsp
	movq	%r13, %rdi
	movq	%rax, %rsi
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	movl	$.LC73, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	jmp	convert_for_assignment
.L6661:
	movzbl	16(%r13), %eax
	cmpb	$6, %al
	je	.L6620
	cmpb	$11, %al
	je	.L6620
	cmpb	$7, %al
	je	.L6620
	cmpb	$10, %al
	jne	.L6619
.L6620:
	movq	%r12, %rdi
	xorl	%esi, %esi
	call	get_unwidened
	movq	8(%rax), %r15
	jmp	.L6619
.L6540:
	movl	$51, %edi
	call	pedantic_lvalue_warning
	movq	%rbp, %rdi
	call	save_expr
	movl	%r14d, %esi
	movq	40(%r12), %rdi
	movq	%rax, %rdx
	movq	%rax, %rbp
	call	build_modify_expr
	movq	%rbp, %rdx
	movl	%r14d, %esi
	movq	48(%r12), %rdi
	movq	%rax, %r13
	call	build_modify_expr
	movq	%r13, %rsi
	movq	32(%r12), %rdi
	movq	%rax, %rdx
	call	build_conditional_expr
	cmpb	$0, 16(%rax)
	movq	%rax, %rbx
	je	.L6511
	movq	global_trees+216(%rip), %rdi
	movq	%rbp, %rsi
	call	convert
	movq	%rbx, %rcx
	movq	8(%r12), %rsi
	movl	$47, %edi
	movq	%rax, %rdx
.L6637:
	addq	$8, %rsp
	xorl	%eax, %eax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	build
.L6537:
	movl	$47, %edi
	call	pedantic_lvalue_warning
	movq	40(%r12), %rdi
	movl	%r14d, %esi
	movq	%rbp, %rdx
	call	build_modify_expr
	cmpb	$0, 16(%rax)
	je	.L6636
	movq	32(%r12), %rdx
	movl	$47, %edi
	movq	%r13, %rsi
	movq	%rax, %rcx
	jmp	.L6637
.L6641:
	movq	32(%rbp), %rbp
	jmp	.L6535
.L6640:
	movq	32(%rax), %rdx
	movl	$.LC70, %edi
	xorl	%eax, %eax
	call	error
	jmp	.L6630
.L6525:
	movl	$.LC65, %edi
.L6633:
	xorl	%eax, %eax
	call	error
	jmp	.L6630
.L6524:
	movl	$.LC64, %esi
	jmp	.L6521
.L6526:
	movq	24(%rcx), %rax
	testq	%rax, %rax
	je	.L6527
	cmpq	$0, 112(%rax)
	je	.L6662
	movq	8(%rcx), %rcx
	movzbl	16(%rcx), %edx
	jmp	.L6520
.L6662:
	movl	$.LC66, %edi
	jmp	.L6633
.L6527:
	movl	$.LC67, %edi
	jmp	.L6633
	.p2align 6,,7
.L6523:
	movl	$.LC63, %esi
	jmp	.L6521
.L6639:
	movq	72(%rdi), %rax
	movl	$.LC61, %edi
	jmp	.L6631
.L6529:
	movl	$.LC68, %edi
	movl	$163, %esi
	movl	$.LC69, %edx
	call	fancy_abort
.LFE11:
.Lfe11:
	.size	build_modify_expr,.Lfe11-build_modify_expr
	.section	.rodata.str1.1
.LC84:
	.string	"incompatible types in %s"
	.section	.rodata.str1.32
	.align 32
.LC82:
	.string	"incompatible type for argument %d of `%s'"
	.align 32
.LC83:
	.string	"incompatible type for argument %d of indirect function call"
	.align 32
.LC81:
	.string	"%s makes integer from pointer without a cast"
	.align 32
.LC80:
	.string	"%s makes pointer from integer without a cast"
	.align 32
.LC75:
	.string	"%s discards qualifiers from pointer target type"
	.align 32
.LC78:
	.string	"pointer targets in %s differ in signedness"
	.align 32
.LC74:
	.string	"%s makes qualified function pointer from unqualified"
	.align 32
.LC77:
	.string	"ISO C forbids %s between function pointer and `void *'"
	.align 32
.LC79:
	.string	"%s from incompatible pointer type"
	.align 32
.LC76:
	.string	"ISO C prohibits argument conversion to union type"
	.text
	.align 2
	.p2align 4,,15
	.type	convert_for_assignment,@function
convert_for_assignment:
.LFB12:
	pushq	%r15
.LCFI45:
	pushq	%r14
.LCFI46:
	pushq	%r13
.LCFI47:
	movq	%rsi, %r13
	pushq	%r12
.LCFI48:
	pushq	%rbp
.LCFI49:
	pushq	%rbx
.LCFI50:
	subq	$296, %rsp
.LCFI51:
	movq	%rdi, 288(%rsp)
	movq	%rdx, 280(%rsp)
	movq	%rcx, 272(%rsp)
	movq	%r8, 264(%rsp)
	movl	%r9d, 260(%rsp)
	cmpb	$116, 16(%rsi)
	movzbl	16(%rdi), %r15d
	je	.L7794
.L6664:
	movq	8(%r13), %r14
	movzbl	16(%r14), %eax
	movq	%r14, %rdi
	cmpb	$18, %al
	je	.L6666
	cmpb	$23, %al
	je	.L6666
	movl	optimize(%rip), %eax
	testl	%eax, %eax
	je	.L6727
	cmpb	$34, 16(%r13)
	je	.L7795
.L6727:
	movzbl	16(%r14), %eax
	movzbl	%al, %r12d
	testl	%r12d, %r12d
	je	.L7623
	movq	288(%rsp), %rsi
	movq	128(%r14), %rdx
	cmpq	%rdx, 128(%rsi)
	je	.L7796
	cmpl	$5, %r12d
	je	.L7797
	cmpl	$15, %r15d
	je	.L7798
.L6738:
	leal	-6(%r15), %edi
	cmpl	$1, %edi
	jbe	.L6901
	cmpl	$10, %r15d
	je	.L6901
	cmpl	$8, %r15d
	je	.L6901
	cmpl	$11, %r15d
	je	.L6901
.L6900:
	cmpl	$21, %r15d
	je	.L7799
.L6904:
	cmpl	$13, %r15d
	je	.L7263
	cmpl	$15, %r15d
	je	.L7263
.L7262:
	cmpl	$13, %r15d
	je	.L7800
.L7610:
	cmpl	$6, %r15d
	je	.L7801
.L7615:
	cmpl	$11, %r15d
	je	.L7802
.L6899:
	cmpq	$0, 280(%rsp)
	je	.L7803
	movq	280(%rsp), %rsi
	movl	$.LC84, %edi
	xorl	%eax, %eax
	call	error
.L7623:
	movq	global_trees(%rip), %r13
.L6663:
	addq	$296, %rsp
	movq	%r13, %rax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L7803:
	cmpq	$0, 264(%rsp)
	je	.L7619
	call	maybe_building_objc_message_expr
	testq	%rax, %rax
	je	.L7620
	cmpl	$2, 260(%rsp)
	jg	.L7804
.L7620:
	movl	$.LC82, %edi
	movl	260(%rsp), %esi
	movq	264(%rsp), %rax
.L7770:
	movq	32(%rax), %rdx
	xorl	%eax, %eax
	call	error
	jmp	.L7623
.L7804:
	movl	260(%rsp), %esi
	movl	$.LC82, %edi
	subl	$2, %esi
	jmp	.L7770
.L7619:
	movl	260(%rsp), %esi
	movl	$.LC83, %edi
	xorl	%eax, %eax
	call	error
	jmp	.L7623
.L7802:
	cmpl	$13, %r12d
	jne	.L6899
.L7771:
	movq	288(%rsp), %rdi
	movq	%r13, %rsi
	addq	$296, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	convert
.L7801:
	cmpl	$13, %r12d
	jne	.L7615
	movl	$.LC81, %edi
.L7793:
	movq	280(%rsp), %rsi
	movq	264(%rsp), %rdx
	movl	260(%rsp), %ecx
	call	warn_for_assignment
	jmp	.L7771
.L7800:
	cmpl	$6, %r12d
	jne	.L7610
	movzbl	16(%r13), %eax
	cmpb	$25, %al
	je	.L7805
.L7612:
	cmpb	$115, %al
	jne	.L7613
	movq	8(%r13), %rcx
	cmpb	$6, 16(%rcx)
	je	.L7806
.L7613:
	movl	$.LC80, %edi
	jmp	.L7793
.L7806:
	movq	32(%r13), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L7613
	call	integer_zerop
	testl	%eax, %eax
	je	.L7613
.L7611:
	movq	global_trees+112(%rip), %r13
	jmp	.L6663
.L7805:
	movq	%r13, %rdi
	call	integer_zerop
	testl	%eax, %eax
	jne	.L7611
	movzbl	16(%r13), %eax
	jmp	.L7612
	.p2align 6,,7
.L7263:
	cmpl	$13, %r12d
	je	.L7264
	cmpl	$15, %r12d
	jne	.L7262
.L7264:
	movq	288(%rsp), %r10
	movq	8(%r10), %r12
	movq	%r12, 176(%rsp)
	movq	8(%r14), %rcx
	movq	%rcx, 168(%rsp)
	movzbl	16(%r12), %esi
	cmpb	$5, %sil
	je	.L7736
	movzbl	16(%rcx), %ecx
	cmpb	$5, %cl
	je	.L7266
	movq	288(%rsp), %rdi
	movq	%r14, %rsi
	movl	$1, %edx
	call	maybe_objc_comptypes
	testl	%eax, %eax
	js	.L7807
.L7268:
	testl	%eax, %eax
	je	.L7808
.L7737:
	movq	176(%rsp), %rdi
	movq	168(%rsp), %rax
	movzbl	16(%rdi), %esi
	movzbl	16(%rax), %ecx
.L7266:
	movl	pedantic(%rip), %ebx
	testl	%ebx, %ebx
	je	.L7428
	cmpb	$5, %sil
	je	.L7809
.L7430:
	cmpb	$5, %cl
	je	.L7810
.L7428:
	cmpb	$23, %cl
	je	.L7433
	cmpb	$23, %sil
	je	.L7740
	movq	168(%rsp), %r15
	movq	168(%rsp), %rbx
	xorl	%edi, %edi
	movzbl	17(%r15), %r8d
	movzbl	62(%rbx), %r12d
	movl	%r8d, %edx
	shrb	$5, %r12b
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	$1, %r8d
	andl	$1, %r12d
	andl	$1, %edx
	addl	%r8d, %r8d
	sall	$2, %r12d
	orl	%r8d, %edx
	orl	%r12d, %edx
	cmpb	$20, %cl
	je	.L7811
.L7435:
	movq	176(%rsp), %rax
	leal	0(,%rdi,8), %r8d
	orl	%edx, %r8d
	movzbl	17(%rax), %ebx
	movl	%ebx, %edx
	shrb	$3, %bl
	shrb	$4, %dl
	andl	$1, %ebx
	addl	%ebx, %ebx
	andl	$1, %edx
	orl	%ebx, %edx
	movq	176(%rsp), %rbx
	movzbl	62(%rbx), %edi
	shrb	$5, %dil
	andl	$1, %edi
	sall	$2, %edi
	orl	%edi, %edx
	xorl	%edi, %edi
	cmpb	$20, %sil
	je	.L7812
.L7436:
	leal	0(,%rdi,8), %r9d
	movl	$.LC75, %edi
	orl	%r9d, %edx
	notl	%edx
	testl	%edx, %r8d
	jne	.L7793
	cmpb	$5, %sil
	je	.L7771
	cmpb	$5, %cl
	je	.L7771
	movq	288(%rsp), %rdi
	movq	%r14, %rsi
	movl	$1, %edx
	call	maybe_objc_comptypes
	testl	%eax, %eax
	js	.L7813
.L7441:
	testl	%eax, %eax
	jne	.L7771
	movl	pedantic(%rip), %r14d
	testl	%r14d, %r14d
	je	.L7771
	movl	$.LC78, %edi
	jmp	.L7793
.L7813:
	movq	288(%rsp), %r11
	movq	8(%r14), %rcx
	movq	8(%r11), %rsi
	movq	128(%rcx), %rbp
	movq	128(%rsi), %rbx
	cmpq	%rbp, %rbx
	je	.L7768
	testq	%rbx, %rbx
	je	.L7768
	testq	%rbp, %rbp
	je	.L7768
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L7768
	movzbl	16(%rbp), %eax
	testb	%al, %al
	je	.L7768
	cmpb	$6, %dl
	je	.L7814
.L7445:
	cmpb	$6, %al
	je	.L7815
.L7446:
	cmpb	$10, %dl
	je	.L7816
.L7447:
	cmpb	$10, 16(%rbp)
	je	.L7817
.L7448:
	cmpq	%rbp, %rbx
	movl	$1, %r15d
	je	.L7444
	movzbl	16(%rbx), %esi
	cmpb	16(%rbp), %sil
	je	.L7450
	xorl	%r15d, %r15d
.L7444:
	cmpl	$2, %r15d
	je	.L7818
.L7600:
	movl	%r15d, %eax
	jmp	.L7441
.L7818:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	je	.L7600
	movl	$.LC1, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L7600
.L7450:
	movzbl	17(%rbx), %r12d
	movzbl	62(%rbx), %r10d
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	shrb	$5, %r10b
	shrb	$3, %r12b
	shrb	$4, %dl
	andl	$1, %r12d
	andl	$1, %r10d
	andl	$1, %edx
	addl	%r12d, %r12d
	sall	$2, %r10d
	orl	%r12d, %edx
	orl	%r10d, %edx
	cmpb	$20, %sil
	je	.L7819
.L7452:
	movzbl	17(%rbp), %r15d
	movzbl	62(%rbp), %r8d
	leal	0(,%rcx,8), %edi
	orl	%edx, %edi
	xorl	%ecx, %ecx
	movl	%r15d, %edx
	shrb	$5, %r8b
	shrb	$3, %r15b
	shrb	$4, %dl
	andl	$1, %r15d
	andl	$1, %r8d
	andl	$1, %edx
	addl	%r15d, %r15d
	sall	$2, %r8d
	orl	%r15d, %edx
	orl	%r8d, %edx
	cmpb	$20, %sil
	je	.L7820
.L7453:
	leal	0(,%rcx,8), %r9d
	xorl	%r15d, %r15d
	orl	%r9d, %edx
	cmpl	%edx, %edi
	jne	.L7444
	movq	128(%rbp), %rdx
	cmpq	%rdx, 128(%rbx)
	je	.L7768
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	xorl	%r15d, %r15d
	call	*targetm+264(%rip)
	testl	%eax, %eax
	movl	%eax, 160(%rsp)
	je	.L7444
	movzbl	16(%rbx), %eax
	xorl	%r15d, %r15d
	cmpl	$18, %eax
	je	.L7579
	cmpl	$18, %eax
	ja	.L7596
	cmpl	$13, %eax
	je	.L7457
.L7456:
	cmpl	$2, 160(%rsp)
	jne	.L7444
	cmpl	$1, %r15d
	cmove	160(%rsp), %r15d
	jmp	.L7444
.L7457:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L7458
	call	comptypes
	movl	%eax, %r15d
	jmp	.L7456
.L7458:
	movl	$1, %r15d
	jmp	.L7456
.L7596:
	cmpl	$20, %eax
	je	.L7592
	cmpl	$23, %eax
	jne	.L7456
	movl	$1, 12(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L7461
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 12(%rsp)
	je	.L7456
.L7461:
	movq	24(%rbx), %r14
	movq	24(%rbp), %r12
	testq	%r14, %r14
	je	.L7821
	testq	%r12, %r12
	je	.L7822
	movl	$1, %r15d
	xorl	%ebp, %ebp
.L7576:
	testq	%r14, %r14
	je	.L7823
	testq	%r12, %r12
	je	.L7565
	movq	32(%r14), %rdi
	testq	%rdi, %rdi
	je	.L7824
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L7551
.L7791:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L7565
.L7550:
	movq	(%r14), %r14
	movq	(%r12), %r12
	cmpl	%r15d, %ebp
	cmovg	%ebp, %r15d
	jmp	.L7576
.L7565:
	xorl	%r15d, %r15d
.L7545:
	cmpl	$1, %r15d
	cmove	12(%rsp), %r15d
	jmp	.L7456
.L7551:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %ebp
	jne	.L7550
	movq	32(%r14), %rax
	cmpb	$21, 16(%rax)
	je	.L7826
.L7555:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L7565
	cmpq	$0, 96(%rax)
	je	.L7566
	testb	$8, 62(%rax)
	je	.L7565
.L7566:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L7565
	movq	32(%r14), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L7565
	movq	32(%r12), %rcx
	movq	24(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L7565
.L7572:
	movq	8(%rbx), %rdi
	movq	32(%r14), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L7568
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L7572
	jmp	.L7565
.L7568:
	testq	%rbx, %rbx
	jne	.L7550
	jmp	.L7565
.L7826:
	cmpq	$0, 96(%rax)
	je	.L7556
	testb	$8, 62(%rax)
	je	.L7555
.L7556:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L7555
	movq	32(%r12), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L7555
	movq	32(%r14), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L7565
.L7562:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L7568
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L7562
	jmp	.L7565
.L7824:
	movq	32(%r12), %rdi
	jmp	.L7791
.L7823:
	testq	%r12, %r12
	je	.L7545
	jmp	.L7565
.L7822:
	movq	%r14, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L7456
	movq	136(%rbp), %rax
	testq	%rax, %rax
	je	.L7676
	movq	%rax, %rbp
	movl	$1, %r12d
	xorl	%r15d, %r15d
.L7540:
	testq	%r14, %r14
	je	.L7827
	testq	%rbp, %rbp
	je	.L7529
	movq	32(%r14), %rdi
	testq	%rdi, %rdi
	je	.L7828
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L7515
.L7789:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L7529
.L7514:
	movq	(%r14), %r14
	movq	(%rbp), %rbp
	cmpl	%r12d, %r15d
	cmovg	%r15d, %r12d
	jmp	.L7540
.L7529:
	xorl	%r12d, %r12d
.L7509:
	movl	$2, %r15d
	decl	%r12d
.L7790:
	jne	.L7456
.L7676:
	movl	12(%rsp), %r15d
	jmp	.L7456
.L7515:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L7514
	movq	32(%r14), %rax
	cmpb	$21, 16(%rax)
	je	.L7830
.L7519:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L7529
	cmpq	$0, 96(%rax)
	je	.L7530
	testb	$8, 62(%rax)
	je	.L7529
.L7530:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L7529
	movq	32(%r14), %r8
	movq	32(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L7529
	movq	32(%rbp), %r9
	movq	24(%r9), %rbx
	testq	%rbx, %rbx
	je	.L7529
.L7536:
	movq	8(%rbx), %rdi
	movq	32(%r14), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L7532
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L7536
	jmp	.L7529
.L7532:
	testq	%rbx, %rbx
	jne	.L7514
	jmp	.L7529
.L7830:
	cmpq	$0, 96(%rax)
	je	.L7520
	testb	$8, 62(%rax)
	je	.L7519
.L7520:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L7519
	movq	32(%rbp), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L7519
	movq	32(%r14), %r10
	movq	24(%r10), %rbx
	testq	%rbx, %rbx
	je	.L7529
.L7526:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L7532
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L7526
	jmp	.L7529
.L7828:
	movq	32(%rbp), %rdi
	jmp	.L7789
.L7827:
	testq	%rbp, %rbp
	je	.L7509
	jmp	.L7529
.L7821:
	movq	%r12, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L7456
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L7676
	movq	%rax, %rbp
	movl	$1, %r14d
	xorl	%r15d, %r15d
.L7501:
	testq	%r12, %r12
	je	.L7831
	testq	%rbp, %rbp
	je	.L7490
	movq	32(%r12), %rdi
	testq	%rdi, %rdi
	je	.L7832
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L7476
.L7788:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L7490
.L7475:
	movq	(%r12), %r12
	movq	(%rbp), %rbp
	cmpl	%r14d, %r15d
	cmovg	%r15d, %r14d
	jmp	.L7501
.L7490:
	xorl	%r14d, %r14d
.L7470:
	movl	$2, %r15d
	decl	%r14d
	jmp	.L7790
.L7476:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L7475
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	je	.L7834
.L7480:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L7490
	cmpq	$0, 96(%rax)
	je	.L7491
	testb	$8, 62(%rax)
	je	.L7490
.L7491:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L7490
	movq	32(%r12), %rcx
	movq	32(%rcx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L7490
	movq	32(%rbp), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L7490
.L7497:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L7493
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L7497
	jmp	.L7490
.L7493:
	testq	%rbx, %rbx
	jne	.L7475
	jmp	.L7490
.L7834:
	cmpq	$0, 96(%rax)
	je	.L7481
	testb	$8, 62(%rax)
	je	.L7480
.L7481:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L7480
	movq	32(%rbp), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L7480
	movq	32(%r12), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L7490
.L7487:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L7493
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L7487
	jmp	.L7490
.L7832:
	movq	32(%rbp), %rdi
	jmp	.L7788
.L7831:
	testq	%rbp, %rbp
	je	.L7470
	jmp	.L7490
.L7592:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmove	%eax, %r15d
	jmp	.L7456
.L7579:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	movl	$1, %r15d
	movq	24(%rbx), %r12
	movq	24(%rbp), %r14
	cmpq	%rsi, %rdi
	je	.L7580
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	je	.L7444
.L7580:
	testq	%r12, %r12
	je	.L7456
	testq	%r14, %r14
	je	.L7456
	cmpq	%r14, %r12
	je	.L7456
	movq	112(%r12), %rcx
	movq	112(%r14), %rsi
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L7583
	movq	104(%r12), %rbp
	cmpb	$25, 16(%rbp)
	je	.L7835
.L7584:
	movl	$1, %r8d
.L7583:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L7585
	movq	104(%r14), %r11
	cmpb	$25, 16(%r11)
	je	.L7836
.L7586:
	movl	$1, %ecx
.L7585:
	testb	%r8b, %r8b
	jne	.L7456
	testb	%cl, %cl
	jne	.L7456
	testb	%dil, %dil
	je	.L7727
	testb	%dl, %dl
.L7767:
	jne	.L7456
.L7591:
	xorl	%r15d, %r15d
	jmp	.L7456
.L7727:
	testb	%dl, %dl
	jne	.L7591
	movq	104(%r12), %rdi
	movq	104(%r14), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L7591
	movq	112(%r12), %rdi
	movq	112(%r14), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L7767
.L7836:
	cmpb	$25, 16(%rsi)
	jne	.L7586
	jmp	.L7585
.L7835:
	cmpb	$25, 16(%rcx)
	jne	.L7584
	jmp	.L7583
	.p2align 6,,7
.L7768:
	movl	$1, %r15d
	jmp	.L7444
.L7820:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L7453
.L7819:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L7452
.L7817:
	movzbl	17(%rbp), %esi
	movzwl	60(%rbp), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L7448
.L7816:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L7447
.L7815:
	testb	$2, 62(%rbp)
	je	.L7446
	movq	24(%rbp), %r14
	testq	%r14, %r14
	cmovne	%r14, %rbp
	jmp	.L7446
.L7814:
	testb	$2, 62(%rbx)
	je	.L7445
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L7445
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L7445
	.p2align 6,,7
.L7812:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %edi
	jmp	.L7436
.L7811:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %edi
	jmp	.L7435
.L7740:
	cmpb	$23, %cl
	jne	.L7771
	movq	168(%rsp), %r9
	movq	176(%rsp), %rdi
	movq	168(%rsp), %r10
	movzbl	17(%r9), %r8d
	movzbl	17(%rdi), %ebx
	movzbl	62(%r10), %esi
	movzbl	62(%rdi), %edx
	movl	$.LC74, %edi
	movl	%r8d, %r12d
	movl	%ebx, %r15d
	shrb	$3, %r8b
	shrb	$3, %bl
	shrb	$4, %r12b
	andl	$1, %r8d
	shrb	$5, %sil
	shrb	$4, %r15b
	andl	$1, %ebx
	shrb	$5, %dl
	andl	$1, %r12d
	addl	%r8d, %r8d
	andl	$1, %esi
	andl	$1, %r15d
	addl	%ebx, %ebx
	andl	$1, %edx
	orl	%r8d, %r12d
	sall	$2, %esi
	orl	%ebx, %r15d
	sall	$2, %edx
	orl	%esi, %r12d
	orl	%edx, %r15d
	notl	%r12d
	testl	%r12d, %r15d
	jne	.L7793
	jmp	.L7771
.L7433:
	cmpb	$23, %sil
	jne	.L7771
	jmp	.L7740
.L7810:
	movq	%r13, %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L7431
	cmpb	$115, 16(%r13)
	je	.L7431
	movq	176(%rsp), %rbp
	movq	168(%rsp), %r11
	movzbl	16(%rbp), %esi
	movzbl	16(%r11), %ecx
	jmp	.L7428
.L7431:
	movq	176(%rsp), %r9
	movzbl	16(%r9), %esi
	cmpb	$23, %sil
	je	.L7429
	movq	168(%rsp), %r10
	movzbl	16(%r10), %ecx
	jmp	.L7428
.L7429:
	movl	$.LC77, %edi
	jmp	.L7793
.L7809:
	cmpb	$23, %cl
	jne	.L7430
	jmp	.L7429
.L7808:
	movq	176(%rsp), %rsi
	movq	128(%rsi), %rdi
	call	unsigned_type
	movq	168(%rsp), %rcx
	movq	%rax, %r15
	movq	128(%rcx), %rdi
	call	unsigned_type
	movl	$.LC79, %edi
	cmpq	%rax, %r15
	jne	.L7793
	jmp	.L7737
.L7807:
	movq	288(%rsp), %r15
	movq	8(%r14), %rcx
	movq	8(%r15), %r9
	movq	128(%rcx), %rbp
	movq	128(%r9), %rbx
	cmpq	%rbp, %rbx
	je	.L7766
	testq	%rbx, %rbx
	je	.L7766
	testq	%rbp, %rbp
	je	.L7766
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L7766
	movzbl	16(%rbp), %eax
	testb	%al, %al
	je	.L7766
	cmpb	$6, %dl
	je	.L7837
.L7272:
	cmpb	$6, %al
	je	.L7838
.L7273:
	cmpb	$10, %dl
	je	.L7839
.L7274:
	cmpb	$10, 16(%rbp)
	je	.L7840
.L7275:
	cmpq	%rbp, %rbx
	movl	$1, 16(%rsp)
	je	.L7271
	movzbl	16(%rbx), %esi
	cmpb	16(%rbp), %sil
	je	.L7277
	movl	$0, 16(%rsp)
.L7271:
	cmpl	$2, 16(%rsp)
	je	.L7841
.L7427:
	movl	16(%rsp), %eax
	jmp	.L7268
.L7841:
	movl	pedantic(%rip), %r8d
	testl	%r8d, %r8d
	je	.L7427
	movl	$.LC1, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L7427
.L7277:
	movzbl	17(%rbx), %r12d
	movzbl	62(%rbx), %r8d
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	shrb	$5, %r8b
	shrb	$3, %r12b
	shrb	$4, %dl
	andl	$1, %r12d
	andl	$1, %r8d
	andl	$1, %edx
	addl	%r12d, %r12d
	sall	$2, %r8d
	orl	%r12d, %edx
	orl	%r8d, %edx
	cmpb	$20, %sil
	je	.L7842
.L7279:
	leal	0(,%rcx,8), %edi
	movzbl	62(%rbp), %r10d
	movzbl	17(%rbp), %ecx
	orl	%edx, %edi
	movl	%ecx, %edx
	shrb	$5, %r10b
	shrb	$3, %cl
	shrb	$4, %dl
	andl	$1, %ecx
	andl	$1, %r10d
	addl	%ecx, %ecx
	andl	$1, %edx
	sall	$2, %r10d
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	orl	%r10d, %edx
	cmpb	$20, %sil
	je	.L7843
.L7280:
	leal	0(,%rcx,8), %esi
	movl	$0, 16(%rsp)
	orl	%esi, %edx
	cmpl	%edx, %edi
	jne	.L7271
	movq	128(%rbp), %rdx
	cmpq	%rdx, 128(%rbx)
	je	.L7766
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	*targetm+264(%rip)
	movl	$0, 16(%rsp)
	testl	%eax, %eax
	movl	%eax, 164(%rsp)
	je	.L7271
	movl	$0, 16(%rsp)
	movzbl	16(%rbx), %eax
	cmpl	$18, %eax
	je	.L7406
	cmpl	$18, %eax
	ja	.L7423
	cmpl	$13, %eax
	je	.L7284
.L7283:
	cmpl	$2, 164(%rsp)
	jne	.L7271
	cmpl	$1, 16(%rsp)
	movl	164(%rsp), %r12d
	cmovne	16(%rsp), %r12d
	movl	%r12d, 16(%rsp)
	jmp	.L7271
.L7284:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L7285
	call	comptypes
.L7765:
	movl	%eax, 16(%rsp)
	jmp	.L7283
.L7285:
	movl	$1, 16(%rsp)
	jmp	.L7283
.L7423:
	cmpl	$20, %eax
	je	.L7419
	cmpl	$23, %eax
	jne	.L7283
	movl	$1, 28(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L7288
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 28(%rsp)
	je	.L7283
.L7288:
	movq	24(%rbx), %r15
	movq	24(%rbp), %r12
	testq	%r15, %r15
	je	.L7844
	testq	%r12, %r12
	je	.L7845
	movl	$1, 16(%rsp)
	xorl	%ebp, %ebp
.L7403:
	testq	%r15, %r15
	je	.L7846
	testq	%r12, %r12
	je	.L7392
	movq	32(%r15), %rdi
	testq	%rdi, %rdi
	je	.L7847
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L7378
.L7787:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L7392
.L7377:
	cmpl	16(%rsp), %ebp
	movl	16(%rsp), %r11d
	cmovg	%ebp, %r11d
	movl	%r11d, 16(%rsp)
	movq	(%r12), %r12
	movq	(%r15), %r15
	jmp	.L7403
.L7392:
	movl	$0, 16(%rsp)
.L7372:
	cmpl	$1, 16(%rsp)
	movl	16(%rsp), %eax
	cmove	28(%rsp), %eax
	jmp	.L7765
.L7378:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %ebp
	jne	.L7377
	movq	32(%r15), %rax
	cmpb	$21, 16(%rax)
	je	.L7849
.L7382:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L7392
	cmpq	$0, 96(%rax)
	je	.L7393
	testb	$8, 62(%rax)
	je	.L7392
.L7393:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L7392
	movq	32(%r15), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L7392
	movq	32(%r12), %r9
	movq	24(%r9), %rbx
	testq	%rbx, %rbx
	je	.L7392
.L7399:
	movq	8(%rbx), %rdi
	movq	32(%r15), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L7395
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L7399
	jmp	.L7392
.L7395:
	testq	%rbx, %rbx
	jne	.L7377
	jmp	.L7392
.L7849:
	cmpq	$0, 96(%rax)
	je	.L7383
	testb	$8, 62(%rax)
	je	.L7382
.L7383:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L7382
	movq	32(%r12), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L7382
	movq	32(%r15), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L7392
.L7389:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L7395
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L7389
	jmp	.L7392
.L7847:
	movq	32(%r12), %rdi
	jmp	.L7787
.L7846:
	testq	%r12, %r12
	je	.L7372
	jmp	.L7392
.L7845:
	movq	%r15, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L7283
	movq	136(%rbp), %rax
	testq	%rax, %rax
	je	.L7671
	movq	%rax, %rbp
	movl	$1, %r12d
	movl	$0, 20(%rsp)
.L7367:
	testq	%r15, %r15
	je	.L7850
	testq	%rbp, %rbp
	je	.L7356
	movq	32(%r15), %rdi
	testq	%rdi, %rdi
	je	.L7851
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L7342
.L7786:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L7356
.L7341:
	cmpl	%r12d, 20(%rsp)
	movq	(%r15), %r15
	cmovg	20(%rsp), %r12d
	movq	(%rbp), %rbp
	jmp	.L7367
.L7356:
	xorl	%r12d, %r12d
.L7336:
	decl	%r12d
	movl	$2, 16(%rsp)
	jne	.L7283
	movl	28(%rsp), %r15d
	movl	%r15d, 16(%rsp)
	jmp	.L7283
.L7342:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 20(%rsp)
	jne	.L7341
	movq	32(%r15), %rax
	cmpb	$21, 16(%rax)
	je	.L7853
.L7346:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L7356
	cmpq	$0, 96(%rax)
	je	.L7357
	testb	$8, 62(%rax)
	je	.L7356
.L7357:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L7356
	movq	32(%r15), %rcx
	movq	32(%rcx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L7356
	movq	32(%rbp), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L7356
.L7363:
	movq	8(%rbx), %rdi
	movq	32(%r15), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L7359
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L7363
	jmp	.L7356
.L7359:
	testq	%rbx, %rbx
	jne	.L7341
	jmp	.L7356
.L7853:
	cmpq	$0, 96(%rax)
	je	.L7347
	testb	$8, 62(%rax)
	je	.L7346
.L7347:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L7346
	movq	32(%rbp), %r8
	movq	32(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L7346
	movq	32(%r15), %r10
	movq	24(%r10), %rbx
	testq	%rbx, %rbx
	je	.L7356
.L7353:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L7359
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L7353
	jmp	.L7356
.L7851:
	movq	32(%rbp), %rdi
	jmp	.L7786
.L7850:
	testq	%rbp, %rbp
	je	.L7336
	jmp	.L7356
.L7671:
	movl	28(%rsp), %eax
	movl	%eax, 16(%rsp)
	jmp	.L7283
.L7844:
	movq	%r12, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L7283
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L7669
	movq	%rax, %rbp
	movl	$1, %r15d
	movl	$0, 24(%rsp)
.L7328:
	testq	%r12, %r12
	je	.L7854
	testq	%rbp, %rbp
	je	.L7317
	movq	32(%r12), %rdi
	testq	%rdi, %rdi
	je	.L7855
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L7303
.L7785:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L7317
.L7302:
	cmpl	%r15d, 24(%rsp)
	movq	(%r12), %r12
	cmovg	24(%rsp), %r15d
	movq	(%rbp), %rbp
	jmp	.L7328
.L7317:
	xorl	%r15d, %r15d
.L7297:
	decl	%r15d
	movl	$2, 16(%rsp)
	jne	.L7283
	movl	28(%rsp), %eax
	jmp	.L7765
.L7303:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 24(%rsp)
	jne	.L7302
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	je	.L7857
.L7307:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L7317
	cmpq	$0, 96(%rax)
	je	.L7318
	testb	$8, 62(%rax)
	je	.L7317
.L7318:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L7317
	movq	32(%r12), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L7317
	movq	32(%rbp), %r11
	movq	24(%r11), %rbx
	testq	%rbx, %rbx
	je	.L7317
.L7324:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L7320
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L7324
	jmp	.L7317
.L7320:
	testq	%rbx, %rbx
	jne	.L7302
	jmp	.L7317
.L7857:
	cmpq	$0, 96(%rax)
	je	.L7308
	testb	$8, 62(%rax)
	je	.L7307
.L7308:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L7307
	movq	32(%rbp), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L7307
	movq	32(%r12), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L7317
.L7314:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L7320
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L7314
	jmp	.L7317
.L7855:
	movq	32(%rbp), %rdi
	jmp	.L7785
.L7854:
	testq	%rbp, %rbp
	je	.L7297
	jmp	.L7317
.L7669:
	movl	28(%rsp), %ebp
	movl	%ebp, 16(%rsp)
	jmp	.L7283
.L7419:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmovne	16(%rsp), %eax
	jmp	.L7765
.L7406:
	movq	24(%rbx), %r12
	movq	24(%rbp), %r15
	movl	$1, 16(%rsp)
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L7407
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 16(%rsp)
	je	.L7271
.L7407:
	testq	%r12, %r12
	je	.L7283
	testq	%r15, %r15
	je	.L7283
	cmpq	%r15, %r12
	je	.L7283
	movq	112(%r12), %rcx
	movq	112(%r15), %rsi
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L7410
	movq	104(%r12), %rbp
	cmpb	$25, 16(%rbp)
	je	.L7858
.L7411:
	movl	$1, %r8d
.L7410:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L7412
	movq	104(%r15), %r10
	cmpb	$25, 16(%r10)
	je	.L7859
.L7413:
	movl	$1, %ecx
.L7412:
	testb	%r8b, %r8b
	jne	.L7283
	testb	%cl, %cl
	jne	.L7283
	testb	%dil, %dil
	je	.L7717
	testb	%dl, %dl
.L7764:
	jne	.L7283
.L7418:
	movl	$0, 16(%rsp)
	jmp	.L7283
.L7717:
	testb	%dl, %dl
	jne	.L7418
	movq	104(%r12), %rdi
	movq	104(%r15), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L7418
	movq	112(%r12), %rdi
	movq	112(%r15), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L7764
.L7859:
	cmpb	$25, 16(%rsi)
	jne	.L7413
	jmp	.L7412
.L7858:
	cmpb	$25, 16(%rcx)
	jne	.L7411
	jmp	.L7410
	.p2align 6,,7
.L7766:
	movl	$1, 16(%rsp)
	jmp	.L7271
.L7843:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L7280
.L7842:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L7279
.L7840:
	movzbl	17(%rbp), %esi
	movzwl	60(%rbp), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L7275
.L7839:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L7274
.L7838:
	testb	$2, 62(%rbp)
	je	.L7273
	movq	24(%rbp), %r11
	testq	%r11, %r11
	cmovne	%r11, %rbp
	jmp	.L7273
.L7837:
	testb	$2, 62(%rbx)
	je	.L7272
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L7272
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L7272
	.p2align 6,,7
.L7736:
	movq	168(%rsp), %rdx
	movzbl	16(%rdx), %ecx
	jmp	.L7266
.L7799:
	movq	288(%rsp), %rcx
	testb	$8, 62(%rcx)
	je	.L6904
	cmpq	$0, 280(%rsp)
	jne	.L6904
	movq	$0, 40(%rsp)
	movq	24(%rcx), %r10
	testq	%r10, %r10
	movq	%r10, 32(%rsp)
	je	.L7687
.L7248:
	movq	32(%rsp), %r11
	movq	8(%r11), %rbp
	movq	%rbp, 232(%rsp)
	movq	128(%rbp), %rbx
	movq	128(%r14), %rbp
	cmpq	%rbp, %rbx
	je	.L7757
	testq	%rbx, %rbx
	je	.L7757
	testq	%rbp, %rbp
	je	.L7757
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L7757
	movzbl	16(%rbp), %eax
	testb	%al, %al
	je	.L7757
	cmpb	$6, %dl
	je	.L7860
.L6913:
	cmpb	$6, %al
	je	.L7861
.L6914:
	cmpb	$10, %dl
	je	.L7862
.L6915:
	cmpb	$10, 16(%rbp)
	je	.L7863
.L6916:
	cmpq	%rbp, %rbx
	movl	$1, 84(%rsp)
	je	.L6912
	movzbl	16(%rbx), %esi
	cmpb	16(%rbp), %sil
	je	.L6918
	movl	$0, 84(%rsp)
.L6912:
	movl	84(%rsp), %ecx
	testl	%ecx, %ecx
	jne	.L6906
.L7728:
	movq	232(%rsp), %rbx
	cmpb	$13, 16(%rbx)
	je	.L7864
.L6907:
	movq	32(%rsp), %r8
	movq	(%r8), %r11
	testq	%r11, %r11
	movq	%r11, 32(%rsp)
	jne	.L7248
.L7687:
	cmpq	$0, 40(%rsp)
	je	.L6899
	cmpq	$0, 32(%rsp)
	jne	.L7251
	movq	8(%r14), %rsi
	movq	40(%rsp), %r12
	movzbl	16(%rsi), %r9d
	movq	8(%r12), %rdi
	cmpb	$23, %r9b
	je	.L7865
	movzbl	16(%rdi), %r8d
.L7252:
	movzbl	17(%rsi), %ebx
	movzbl	62(%rsi), %r15d
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	shrb	$5, %r15b
	shrb	$3, %bl
	shrb	$4, %dl
	andl	$1, %ebx
	andl	$1, %r15d
	andl	$1, %edx
	addl	%ebx, %ebx
	sall	$2, %r15d
	orl	%ebx, %edx
	orl	%r15d, %edx
	cmpb	$20, %r9b
	je	.L7866
.L7258:
	movzbl	17(%rdi), %r11d
	movzbl	62(%rdi), %ebp
	leal	0(,%rcx,8), %esi
	orl	%edx, %esi
	xorl	%ecx, %ecx
	movl	%r11d, %edx
	shrb	$5, %bpl
	shrb	$3, %r11b
	shrb	$4, %dl
	andl	$1, %r11d
	andl	$1, %ebp
	andl	$1, %edx
	addl	%r11d, %r11d
	sall	$2, %ebp
	orl	%r11d, %edx
	orl	%ebp, %edx
	cmpb	$20, %r8b
	je	.L7867
.L7259:
	leal	0(,%rcx,8), %r8d
	orl	%r8d, %edx
	notl	%edx
	testl	%edx, %esi
	jne	.L7868
.L7251:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	je	.L7260
	movq	272(%rsp), %rsi
	testb	$1, 50(%rsi)
	je	.L7869
.L7260:
	movl	$115, %edi
	movq	288(%rsp), %rsi
	movq	%r13, %rdx
.L7772:
	addq	$296, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	build1
.L7869:
	movl	$.LC76, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L7260
.L7868:
	movl	$.LC75, %edi
.L7763:
	movq	280(%rsp), %rsi
	movq	264(%rsp), %rdx
	movl	260(%rsp), %ecx
	call	warn_for_assignment
	jmp	.L7251
.L7867:
	cmpq	$0, 8(%rdi)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L7259
.L7866:
	cmpq	$0, 8(%rsi)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L7258
.L7865:
	movzbl	16(%rdi), %r8d
	cmpb	$23, %r8b
	jne	.L7252
	movzbl	17(%rsi), %ecx
	movzbl	17(%rdi), %edx
	movzbl	62(%rdi), %r9d
	movzbl	62(%rsi), %edi
	movl	%ecx, %r14d
	movl	%edx, %r10d
	shrb	$3, %cl
	shrb	$3, %dl
	shrb	$4, %r14b
	andl	$1, %ecx
	shrb	$5, %dil
	shrb	$4, %r10b
	andl	$1, %edx
	shrb	$5, %r9b
	andl	$1, %r14d
	addl	%ecx, %ecx
	andl	$1, %edi
	andl	$1, %r10d
	addl	%edx, %edx
	sall	$2, %edi
	andl	$1, %r9d
	orl	%ecx, %r14d
	orl	%edi, %r14d
	orl	%edx, %r10d
	sall	$2, %r9d
	orl	%r9d, %r10d
	notl	%r14d
	movl	$.LC74, %edi
	testl	%r14d, %r10d
	jne	.L7763
	jmp	.L7251
	.p2align 6,,7
.L7864:
	cmpl	$13, %r12d
	je	.L7870
.L7069:
	movq	%r13, %rdi
	call	integer_zerop
	testl	%eax, %eax
	jne	.L7247
	cmpb	$115, 16(%r13)
	jne	.L6907
	movq	32(%r13), %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L6907
.L7247:
	movq	global_trees+112(%rip), %r13
.L6906:
	cmpq	$0, 32(%rsp)
	jne	.L7251
	jmp	.L7687
	.p2align 6,,7
.L7870:
	movq	8(%rbx), %r10
	movq	%r10, 208(%rsp)
	movq	8(%r14), %rdx
	movq	%rdx, 200(%rsp)
	movzbl	16(%r10), %ebp
	cmpb	$5, %bpl
	je	.L7734
	movzbl	16(%rdx), %ebx
	cmpb	$5, %bl
	je	.L7071
	movq	232(%rsp), %rdi
	movq	%r14, %rsi
	movl	$1, %edx
	call	maybe_objc_comptypes
	testl	%eax, %eax
	js	.L7871
.L7073:
	testl	%eax, %eax
	je	.L7069
	movq	208(%rsp), %rcx
	movq	200(%rsp), %rdi
	movzbl	16(%rcx), %ebp
	movzbl	16(%rdi), %ebx
.L7071:
	movq	208(%rsp), %rcx
	movl	$1, %esi
	movzbl	17(%rcx), %r8d
	movzbl	62(%rcx), %r10d
	movl	%r8d, %r9d
	movl	%r8d, %r15d
	movl	%r10d, %edx
	shrb	$3, %r9b
	shrb	$4, %r15b
	shrb	$5, %dl
	andl	$1, %r9d
	andl	%r15d, %esi
	andl	$1, %edx
	addl	%r9d, %r9d
	sall	$2, %edx
	orl	%r9d, %esi
	orl	%edx, %esi
	xorl	%edx, %edx
	cmpb	$20, %bpl
	je	.L7872
.L7235:
	leal	0(,%rdx,8), %edi
	movq	200(%rsp), %rax
	movq	200(%rsp), %rdx
	orl	%esi, %edi
	movzbl	17(%rdx), %r9d
	movl	%r9d, %r15d
	movl	%r9d, %r11d
	shrb	$4, %r15b
	shrb	$3, %r11b
	andl	$1, %r11d
	movl	%r15d, %edx
	addl	%r11d, %r11d
	andl	$1, %edx
	orl	%r11d, %edx
	movzbl	62(%rax), %r11d
	movl	%r11d, %ecx
	shrb	$5, %cl
	andl	$1, %ecx
	sall	$2, %ecx
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	cmpb	$20, %bl
	je	.L7873
.L7236:
	leal	0(,%rcx,8), %r15d
	orl	%edx, %r15d
	cmpl	%r15d, %edi
	je	.L6906
	cmpb	$23, %bl
	je	.L7874
.L7237:
	movl	%r8d, %ecx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %cl
	xorl	%edx, %edx
	movl	%r8d, %edi
	andl	%ecx, %esi
	movl	%r10d, %r8d
	andl	$1, %edi
	andl	$1, %r8d
	addl	%edi, %edi
	sall	$2, %r8d
	orl	%edi, %esi
	orl	%r8d, %esi
	cmpb	$20, %bpl
	je	.L7875
.L7242:
	movl	%r9d, %r15d
	leal	0(,%rdx,8), %edi
	shrb	$5, %r11b
	shrb	$3, %r9b
	shrb	$4, %r15b
	orl	%esi, %edi
	movl	%r9d, %edx
	movl	%r15d, %ecx
	movl	%r11d, %r9d
	andl	$1, %edx
	andl	$1, %ecx
	andl	$1, %r9d
	addl	%edx, %edx
	sall	$2, %r9d
	orl	%edx, %ecx
	xorl	%edx, %edx
	orl	%r9d, %ecx
	cmpb	$20, %bl
	je	.L7876
.L7243:
	sall	$3, %edx
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	orl	%edi, %edx
	cmpb	$20, %bpl
	je	.L7877
.L7244:
	leal	0(,%rcx,8), %ebp
	orl	%ebp, %esi
	cmpl	%esi, %edx
.L7762:
	je	.L6906
	cmpq	$0, 40(%rsp)
	movq	232(%rsp), %rsi
	cmovne	40(%rsp), %rsi
	movq	%rsi, 40(%rsp)
	jmp	.L7069
.L7877:
	movq	208(%rsp), %rbx
	movl	$1, %eax
	cmpq	$0, 8(%rbx)
	cmovne	%eax, %ecx
	jmp	.L7244
.L7876:
	movq	200(%rsp), %rax
	cmpq	$0, 8(%rax)
	movl	$1, %eax
	cmovne	%eax, %edx
	jmp	.L7243
.L7875:
	movq	208(%rsp), %r10
	movl	$1, %eax
	cmpq	$0, 8(%r10)
	cmovne	%eax, %edx
	jmp	.L7242
.L7874:
	cmpb	$23, %bpl
	jne	.L7237
	orl	%edx, %esi
	cmpl	%edx, %esi
	jmp	.L7762
	.p2align 6,,7
.L7873:
	movq	200(%rsp), %r15
	movl	$1, %eax
	cmpq	$0, 8(%r15)
	cmovne	%eax, %ecx
	jmp	.L7236
.L7872:
	cmpq	$0, 8(%rcx)
	movl	$1, %eax
	cmovne	%eax, %edx
	jmp	.L7235
.L7871:
	movq	232(%rsp), %rbx
	movq	8(%r14), %rsi
	movq	8(%rbx), %rdx
	movq	128(%rsi), %rbp
	movq	128(%rdx), %rbx
	cmpq	%rbp, %rbx
	je	.L7761
	testq	%rbx, %rbx
	je	.L7761
	testq	%rbp, %rbp
	je	.L7761
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L7761
	movzbl	16(%rbp), %eax
	testb	%al, %al
	je	.L7761
	cmpb	$6, %dl
	je	.L7878
.L7077:
	cmpb	$6, %al
	je	.L7879
.L7078:
	cmpb	$10, %dl
	je	.L7880
.L7079:
	cmpb	$10, 16(%rbp)
	je	.L7881
.L7080:
	cmpq	%rbp, %rbx
	movl	$1, 52(%rsp)
	je	.L7076
	movzbl	16(%rbx), %esi
	cmpb	16(%rbp), %sil
	je	.L7082
	movl	$0, 52(%rsp)
.L7076:
	cmpl	$2, 52(%rsp)
	je	.L7882
.L7232:
	movl	52(%rsp), %eax
	jmp	.L7073
.L7882:
	movl	pedantic(%rip), %r10d
	testl	%r10d, %r10d
	je	.L7232
	movl	$.LC1, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L7232
.L7082:
	movzbl	17(%rbx), %r8d
	movzbl	62(%rbx), %r9d
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	shrb	$5, %r9b
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	$1, %r8d
	andl	$1, %r9d
	andl	$1, %edx
	addl	%r8d, %r8d
	sall	$2, %r9d
	orl	%r8d, %edx
	orl	%r9d, %edx
	cmpb	$20, %sil
	je	.L7883
.L7084:
	leal	0(,%rcx,8), %edi
	movzbl	62(%rbp), %r15d
	movzbl	17(%rbp), %ecx
	orl	%edx, %edi
	movl	%ecx, %edx
	shrb	$5, %r15b
	shrb	$3, %cl
	shrb	$4, %dl
	andl	$1, %ecx
	andl	$1, %r15d
	addl	%ecx, %ecx
	andl	$1, %edx
	sall	$2, %r15d
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	orl	%r15d, %edx
	cmpb	$20, %sil
	je	.L7884
.L7085:
	leal	0(,%rcx,8), %r10d
	movl	$0, 52(%rsp)
	orl	%r10d, %edx
	cmpl	%edx, %edi
	jne	.L7076
	movq	128(%rbp), %rdi
	cmpq	%rdi, 128(%rbx)
	je	.L7761
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	*targetm+264(%rip)
	movl	$0, 52(%rsp)
	testl	%eax, %eax
	movl	%eax, 196(%rsp)
	je	.L7076
	movl	$0, 52(%rsp)
	movzbl	16(%rbx), %eax
	cmpl	$18, %eax
	je	.L7211
	cmpl	$18, %eax
	ja	.L7228
	cmpl	$13, %eax
	je	.L7089
.L7088:
	cmpl	$2, 196(%rsp)
	jne	.L7076
	cmpl	$1, 52(%rsp)
	movl	196(%rsp), %esi
	cmovne	52(%rsp), %esi
	movl	%esi, 52(%rsp)
	jmp	.L7076
.L7089:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L7090
	call	comptypes
.L7760:
	movl	%eax, 52(%rsp)
	jmp	.L7088
.L7090:
	movl	$1, 52(%rsp)
	jmp	.L7088
.L7228:
	cmpl	$20, %eax
	je	.L7224
	cmpl	$23, %eax
	jne	.L7088
	movl	$1, 80(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L7093
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 80(%rsp)
	je	.L7088
.L7093:
	movq	24(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, 56(%rsp)
	movq	24(%rbp), %r15
	je	.L7885
	testq	%r15, %r15
	je	.L7886
	movl	$1, 52(%rsp)
	xorl	%ebp, %ebp
.L7208:
	cmpq	$0, 56(%rsp)
	je	.L7887
	testq	%r15, %r15
	je	.L7197
	movq	56(%rsp), %rcx
	movq	32(%rcx), %rdi
	testq	%rdi, %rdi
	je	.L7888
	movq	32(%r15), %rax
	testq	%rax, %rax
	jne	.L7183
.L7784:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L7197
.L7182:
	cmpl	52(%rsp), %ebp
	movl	52(%rsp), %ecx
	movq	56(%rsp), %rdi
	cmovg	%ebp, %ecx
	movl	%ecx, 52(%rsp)
	movq	(%rdi), %rbx
	movq	%rbx, 56(%rsp)
	movq	(%r15), %r15
	jmp	.L7208
.L7197:
	movl	$0, 52(%rsp)
.L7177:
	cmpl	$1, 52(%rsp)
	movl	52(%rsp), %ebx
	cmove	80(%rsp), %ebx
.L7759:
	movl	%ebx, 52(%rsp)
	jmp	.L7088
.L7183:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %ebp
	jne	.L7182
	movq	56(%rsp), %rdi
	movq	32(%rdi), %rax
	cmpb	$21, 16(%rax)
	je	.L7890
.L7187:
	movq	32(%r15), %rax
	cmpb	$21, 16(%rax)
	jne	.L7197
	cmpq	$0, 96(%rax)
	je	.L7198
	testb	$8, 62(%rax)
	je	.L7197
.L7198:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L7197
	movq	56(%rsp), %r9
	movq	32(%r9), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L7197
	movq	32(%r15), %r8
	movq	24(%r8), %rbx
	testq	%rbx, %rbx
	je	.L7197
.L7204:
	movq	56(%rsp), %r10
	movq	8(%rbx), %rdi
	movq	32(%r10), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L7200
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L7204
	jmp	.L7197
.L7200:
	testq	%rbx, %rbx
	jne	.L7182
	jmp	.L7197
.L7890:
	cmpq	$0, 96(%rax)
	je	.L7188
	testb	$8, 62(%rax)
	je	.L7187
.L7188:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L7187
	movq	32(%r15), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L7187
	movq	56(%rsp), %rax
	movq	32(%rax), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L7197
.L7194:
	movq	8(%rbx), %rdi
	movq	32(%r15), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L7200
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L7194
	jmp	.L7197
.L7888:
	movq	32(%r15), %rdi
	jmp	.L7784
.L7887:
	testq	%r15, %r15
	je	.L7177
	jmp	.L7197
.L7886:
	movq	56(%rsp), %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L7088
	movq	136(%rbp), %rax
	testq	%rax, %rax
	je	.L7667
	movq	%rax, %rbp
	movl	$1, %r15d
	movl	$0, 68(%rsp)
.L7172:
	cmpq	$0, 56(%rsp)
	je	.L7891
	testq	%rbp, %rbp
	je	.L7161
	movq	56(%rsp), %r10
	movq	32(%r10), %rdi
	testq	%rdi, %rdi
	je	.L7892
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L7147
.L7783:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L7161
.L7146:
	movq	56(%rsp), %r10
	cmpl	%r15d, 68(%rsp)
	cmovg	68(%rsp), %r15d
	movq	(%r10), %r8
	movq	%r8, 56(%rsp)
	movq	(%rbp), %rbp
	jmp	.L7172
.L7161:
	xorl	%r15d, %r15d
.L7141:
	decl	%r15d
	movl	$2, 52(%rsp)
	jne	.L7088
	movl	80(%rsp), %ebx
	jmp	.L7759
.L7147:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 68(%rsp)
	jne	.L7146
	movq	56(%rsp), %rcx
	movq	32(%rcx), %rax
	cmpb	$21, 16(%rax)
	je	.L7894
.L7151:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L7161
	cmpq	$0, 96(%rax)
	je	.L7162
	testb	$8, 62(%rax)
	je	.L7161
.L7162:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L7161
	movq	56(%rsp), %rsi
	movq	32(%rsi), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L7161
	movq	32(%rbp), %r11
	movq	24(%r11), %rbx
	testq	%rbx, %rbx
	je	.L7161
.L7168:
	movq	56(%rsp), %r9
	movq	8(%rbx), %rdi
	movq	32(%r9), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L7164
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L7168
	jmp	.L7161
.L7164:
	testq	%rbx, %rbx
	jne	.L7146
	jmp	.L7161
.L7894:
	cmpq	$0, 96(%rax)
	je	.L7152
	testb	$8, 62(%rax)
	je	.L7151
.L7152:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L7151
	movq	32(%rbp), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L7151
	movq	56(%rsp), %rax
	movq	32(%rax), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L7161
.L7158:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L7164
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L7158
	jmp	.L7161
.L7892:
	movq	32(%rbp), %rdi
	jmp	.L7783
.L7891:
	testq	%rbp, %rbp
	je	.L7141
	jmp	.L7161
.L7667:
	movl	80(%rsp), %r15d
	movl	%r15d, 52(%rsp)
	jmp	.L7088
.L7885:
	movq	%r15, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L7088
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L7665
	movq	%rax, %rbp
	movl	$1, 72(%rsp)
	movl	$0, 76(%rsp)
.L7133:
	testq	%r15, %r15
	je	.L7895
	testq	%rbp, %rbp
	je	.L7122
	movq	32(%r15), %rdi
	testq	%rdi, %rdi
	je	.L7896
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L7108
.L7782:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L7122
.L7107:
	movl	72(%rsp), %r8d
	movl	76(%rsp), %r9d
	cmpl	%r8d, 76(%rsp)
	cmovle	%r8d, %r9d
	movl	%r9d, 72(%rsp)
	movq	(%rbp), %rbp
	movq	(%r15), %r15
	jmp	.L7133
.L7122:
	movl	$0, 72(%rsp)
.L7102:
	cmpl	$1, 72(%rsp)
	movl	$2, 52(%rsp)
	jne	.L7088
	movl	80(%rsp), %ebp
	movl	%ebp, 52(%rsp)
	jmp	.L7088
.L7108:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 76(%rsp)
	jne	.L7107
	movq	32(%r15), %rax
	cmpb	$21, 16(%rax)
	je	.L7898
.L7112:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L7122
	cmpq	$0, 96(%rax)
	je	.L7123
	testb	$8, 62(%rax)
	je	.L7122
.L7123:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L7122
	movq	32(%r15), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L7122
	movq	32(%rbp), %r11
	movq	24(%r11), %rbx
	testq	%rbx, %rbx
	je	.L7122
.L7129:
	movq	8(%rbx), %rdi
	movq	32(%r15), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L7125
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L7129
	jmp	.L7122
.L7125:
	testq	%rbx, %rbx
	jne	.L7107
	jmp	.L7122
.L7898:
	cmpq	$0, 96(%rax)
	je	.L7113
	testb	$8, 62(%rax)
	je	.L7112
.L7113:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L7112
	movq	32(%rbp), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L7112
	movq	32(%r15), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L7122
.L7119:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L7125
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L7119
	jmp	.L7122
.L7896:
	movq	32(%rbp), %rdi
	jmp	.L7782
.L7895:
	testq	%rbp, %rbp
	je	.L7102
	jmp	.L7122
.L7665:
	movl	80(%rsp), %eax
	jmp	.L7760
.L7224:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmovne	52(%rsp), %eax
	jmp	.L7760
.L7211:
	movq	24(%rbp), %rdx
	movq	24(%rbx), %r15
	movl	$1, 52(%rsp)
	movq	%rdx, 184(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L7212
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 52(%rsp)
	je	.L7076
.L7212:
	testq	%r15, %r15
	je	.L7088
	cmpq	$0, 184(%rsp)
	je	.L7088
	cmpq	184(%rsp), %r15
	je	.L7088
	movq	112(%r15), %rcx
	movq	184(%rsp), %rbp
	testq	%rcx, %rcx
	movq	112(%rbp), %rsi
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L7215
	movq	104(%r15), %r11
	cmpb	$25, 16(%r11)
	je	.L7899
.L7216:
	movl	$1, %r8d
.L7215:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L7217
	movq	184(%rsp), %rax
	movq	104(%rax), %r9
	cmpb	$25, 16(%r9)
	je	.L7900
.L7218:
	movl	$1, %ecx
.L7217:
	testb	%r8b, %r8b
	jne	.L7088
	testb	%cl, %cl
	jne	.L7088
	testb	%dil, %dil
	je	.L7707
	testb	%dl, %dl
.L7758:
	jne	.L7088
.L7223:
	movl	$0, 52(%rsp)
	jmp	.L7088
.L7707:
	testb	%dl, %dl
	jne	.L7223
	movq	184(%rsp), %r8
	movq	104(%r15), %rdi
	movq	104(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L7223
	movq	112(%r15), %rdi
	movq	184(%rsp), %r15
	movq	112(%r15), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L7758
.L7900:
	cmpb	$25, 16(%rsi)
	jne	.L7218
	jmp	.L7217
.L7899:
	cmpb	$25, 16(%rcx)
	jne	.L7216
	jmp	.L7215
.L7761:
	movl	$1, 52(%rsp)
	jmp	.L7076
.L7884:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L7085
.L7883:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L7084
.L7881:
	movzbl	17(%rbp), %esi
	movzwl	60(%rbp), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L7080
.L7880:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L7079
.L7879:
	testb	$2, 62(%rbp)
	je	.L7078
	movq	24(%rbp), %r11
	testq	%r11, %r11
	cmovne	%r11, %rbp
	jmp	.L7078
.L7878:
	testb	$2, 62(%rbx)
	je	.L7077
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L7077
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L7077
	.p2align 6,,7
.L7734:
	movq	200(%rsp), %r11
	movzbl	16(%r11), %ebx
	jmp	.L7071
.L6918:
	movzbl	17(%rbx), %r15d
	movzbl	62(%rbx), %r8d
	xorl	%ecx, %ecx
	movl	%r15d, %edx
	shrb	$5, %r8b
	shrb	$3, %r15b
	shrb	$4, %dl
	andl	$1, %r15d
	andl	$1, %r8d
	andl	$1, %edx
	addl	%r15d, %r15d
	sall	$2, %r8d
	orl	%r15d, %edx
	orl	%r8d, %edx
	cmpb	$20, %sil
	je	.L7901
.L6920:
	movzbl	17(%rbp), %r10d
	leal	0(,%rcx,8), %edi
	movzbl	62(%rbp), %ecx
	orl	%edx, %edi
	movl	%r10d, %edx
	shrb	$5, %cl
	shrb	$3, %r10b
	shrb	$4, %dl
	andl	$1, %r10d
	andl	$1, %ecx
	andl	$1, %edx
	addl	%r10d, %r10d
	sall	$2, %ecx
	orl	%r10d, %edx
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	cmpb	$20, %sil
	je	.L7902
.L6921:
	leal	0(,%rcx,8), %esi
	movl	$0, 84(%rsp)
	orl	%esi, %edx
	cmpl	%edx, %edi
	jne	.L6912
	movq	128(%rbp), %rax
	cmpq	%rax, 128(%rbx)
	je	.L7757
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	*targetm+264(%rip)
	movl	$0, 84(%rsp)
	testl	%eax, %eax
	movl	%eax, 228(%rsp)
	je	.L6912
	movl	$0, 84(%rsp)
	movzbl	16(%rbx), %eax
	cmpl	$18, %eax
	je	.L7047
	cmpl	$18, %eax
	ja	.L7064
	cmpl	$13, %eax
	je	.L6925
.L6924:
	cmpl	$2, 228(%rsp)
	jne	.L6912
	cmpl	$1, 84(%rsp)
	movl	228(%rsp), %edi
	cmovne	84(%rsp), %edi
	movl	%edi, 84(%rsp)
	jmp	.L6912
.L6925:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L6926
	call	comptypes
.L7756:
	movl	%eax, 84(%rsp)
	jmp	.L6924
.L6926:
	movl	$1, 84(%rsp)
	jmp	.L6924
.L7064:
	cmpl	$20, %eax
	je	.L7060
	cmpl	$23, %eax
	jne	.L6924
	movl	$1, 112(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L6929
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 112(%rsp)
	je	.L6924
.L6929:
	movq	24(%rbx), %rdx
	testq	%rdx, %rdx
	movq	%rdx, 88(%rsp)
	movq	24(%rbp), %r15
	je	.L7903
	testq	%r15, %r15
	je	.L7904
	movl	$1, 84(%rsp)
	xorl	%ebp, %ebp
.L7044:
	cmpq	$0, 88(%rsp)
	je	.L7905
	testq	%r15, %r15
	je	.L7033
	movq	88(%rsp), %r10
	movq	32(%r10), %rdi
	testq	%rdi, %rdi
	je	.L7906
	movq	32(%r15), %rax
	testq	%rax, %rax
	jne	.L7019
.L7781:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L7033
.L7018:
	cmpl	84(%rsp), %ebp
	movl	84(%rsp), %esi
	movq	88(%rsp), %r10
	cmovg	%ebp, %esi
	movl	%esi, 84(%rsp)
	movq	(%r10), %rbx
	movq	%rbx, 88(%rsp)
	movq	(%r15), %r15
	jmp	.L7044
.L7033:
	movl	$0, 84(%rsp)
.L7013:
	cmpl	$1, 84(%rsp)
	movl	84(%rsp), %ebx
	cmove	112(%rsp), %ebx
.L7755:
	movl	%ebx, 84(%rsp)
	jmp	.L6924
.L7019:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %ebp
	jne	.L7018
	movq	88(%rsp), %rsi
	movq	32(%rsi), %rax
	cmpb	$21, 16(%rax)
	je	.L7908
.L7023:
	movq	32(%r15), %rax
	cmpb	$21, 16(%rax)
	jne	.L7033
	cmpq	$0, 96(%rax)
	je	.L7034
	testb	$8, 62(%rax)
	je	.L7033
.L7034:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L7033
	movq	88(%rsp), %r8
	movq	32(%r8), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L7033
	movq	32(%r15), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L7033
.L7040:
	movq	88(%rsp), %rcx
	movq	8(%rbx), %rdi
	movq	32(%rcx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L7036
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L7040
	jmp	.L7033
.L7036:
	testq	%rbx, %rbx
	jne	.L7018
	jmp	.L7033
.L7908:
	cmpq	$0, 96(%rax)
	je	.L7024
	testb	$8, 62(%rax)
	je	.L7023
.L7024:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L7023
	movq	32(%r15), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L7023
	movq	88(%rsp), %rax
	movq	32(%rax), %r11
	movq	24(%r11), %rbx
	testq	%rbx, %rbx
	je	.L7033
.L7030:
	movq	8(%rbx), %rdi
	movq	32(%r15), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L7036
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L7030
	jmp	.L7033
.L7906:
	movq	32(%r15), %rdi
	jmp	.L7781
.L7905:
	testq	%r15, %r15
	je	.L7013
	jmp	.L7033
.L7904:
	movq	88(%rsp), %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L6924
	movq	136(%rbp), %rax
	testq	%rax, %rax
	je	.L7663
	movq	%rax, %rbp
	movl	$1, %r15d
	movl	$0, 100(%rsp)
.L7008:
	cmpq	$0, 88(%rsp)
	je	.L7909
	testq	%rbp, %rbp
	je	.L6997
	movq	88(%rsp), %rcx
	movq	32(%rcx), %rdi
	testq	%rdi, %rdi
	je	.L7910
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L6983
.L7780:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L6997
.L6982:
	movq	88(%rsp), %rcx
	cmpl	%r15d, 100(%rsp)
	cmovg	100(%rsp), %r15d
	movq	(%rcx), %rbx
	movq	%rbx, 88(%rsp)
	movq	(%rbp), %rbp
	jmp	.L7008
.L6997:
	xorl	%r15d, %r15d
.L6977:
	decl	%r15d
	movl	$2, 84(%rsp)
	jne	.L6924
	movl	112(%rsp), %ebx
	jmp	.L7755
.L6983:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 100(%rsp)
	jne	.L6982
	movq	88(%rsp), %r10
	movq	32(%r10), %rax
	cmpb	$21, 16(%rax)
	je	.L7912
.L6987:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L6997
	cmpq	$0, 96(%rax)
	je	.L6998
	testb	$8, 62(%rax)
	je	.L6997
.L6998:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L6997
	movq	88(%rsp), %r9
	movq	32(%r9), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L6997
	movq	32(%rbp), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L6997
.L7004:
	movq	88(%rsp), %r8
	movq	8(%rbx), %rdi
	movq	32(%r8), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L7000
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L7004
	jmp	.L6997
.L7000:
	testq	%rbx, %rbx
	jne	.L6982
	jmp	.L6997
.L7912:
	cmpq	$0, 96(%rax)
	je	.L6988
	testb	$8, 62(%rax)
	je	.L6987
.L6988:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L6987
	movq	32(%rbp), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L6987
	movq	88(%rsp), %rax
	movq	32(%rax), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L6997
.L6994:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L7000
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L6994
	jmp	.L6997
.L7910:
	movq	32(%rbp), %rdi
	jmp	.L7780
.L7909:
	testq	%rbp, %rbp
	je	.L6977
	jmp	.L6997
.L7663:
	movl	112(%rsp), %r15d
	movl	%r15d, 84(%rsp)
	jmp	.L6924
.L7903:
	movq	%r15, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L6924
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L7661
	movq	%rax, %rbp
	movl	$1, 104(%rsp)
	movl	$0, 108(%rsp)
.L6969:
	testq	%r15, %r15
	je	.L7913
	testq	%rbp, %rbp
	je	.L6958
	movq	32(%r15), %rdi
	testq	%rdi, %rdi
	je	.L7914
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L6944
.L7779:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L6958
.L6943:
	movl	104(%rsp), %r8d
	movl	108(%rsp), %eax
	cmpl	%r8d, 108(%rsp)
	cmovle	%r8d, %eax
	movl	%eax, 104(%rsp)
	movq	(%rbp), %rbp
	movq	(%r15), %r15
	jmp	.L6969
.L6958:
	movl	$0, 104(%rsp)
.L6938:
	cmpl	$1, 104(%rsp)
	movl	$2, 84(%rsp)
	jne	.L6924
	jmp	.L7663
.L6944:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 108(%rsp)
	jne	.L6943
	movq	32(%r15), %rax
	cmpb	$21, 16(%rax)
	je	.L7916
.L6948:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L6958
	cmpq	$0, 96(%rax)
	je	.L6959
	testb	$8, 62(%rax)
	je	.L6958
.L6959:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L6958
	movq	32(%r15), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L6958
	movq	32(%rbp), %r9
	movq	24(%r9), %rbx
	testq	%rbx, %rbx
	je	.L6958
.L6965:
	movq	8(%rbx), %rdi
	movq	32(%r15), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L6961
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L6965
	jmp	.L6958
.L6961:
	testq	%rbx, %rbx
	jne	.L6943
	jmp	.L6958
.L7916:
	cmpq	$0, 96(%rax)
	je	.L6949
	testb	$8, 62(%rax)
	je	.L6948
.L6949:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L6948
	movq	32(%rbp), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L6948
	movq	32(%r15), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L6958
.L6955:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L6961
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L6955
	jmp	.L6958
.L7914:
	movq	32(%rbp), %rdi
	jmp	.L7779
.L7913:
	testq	%rbp, %rbp
	je	.L6938
	jmp	.L6958
.L7661:
	movl	112(%rsp), %ebp
	movl	%ebp, 84(%rsp)
	jmp	.L6924
.L7060:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmovne	84(%rsp), %eax
	jmp	.L7756
.L7047:
	movq	24(%rbp), %rdx
	movq	24(%rbx), %r15
	movl	$1, 84(%rsp)
	movq	%rdx, 216(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L7048
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 84(%rsp)
	je	.L7728
.L7048:
	testq	%r15, %r15
	je	.L6924
	cmpq	$0, 216(%rsp)
	je	.L6924
	cmpq	216(%rsp), %r15
	je	.L6924
	movq	112(%r15), %rcx
	movq	216(%rsp), %rbp
	testq	%rcx, %rcx
	movq	112(%rbp), %rsi
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L7051
	movq	104(%r15), %r11
	cmpb	$25, 16(%r11)
	je	.L7917
.L7052:
	movl	$1, %r8d
.L7051:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L7053
	movq	216(%rsp), %rax
	movq	104(%rax), %r9
	cmpb	$25, 16(%r9)
	je	.L7918
.L7054:
	movl	$1, %ecx
.L7053:
	testb	%r8b, %r8b
	jne	.L6924
	testb	%cl, %cl
	jne	.L6924
	testb	%dil, %dil
	je	.L7697
	testb	%dl, %dl
.L7754:
	jne	.L6924
.L7059:
	movl	$0, 84(%rsp)
	jmp	.L6924
.L7697:
	testb	%dl, %dl
	jne	.L7059
	movq	216(%rsp), %r8
	movq	104(%r15), %rdi
	movq	104(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L7059
	movq	112(%r15), %rdi
	movq	216(%rsp), %r15
	movq	112(%r15), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L7754
.L7918:
	cmpb	$25, 16(%rsi)
	jne	.L7054
	jmp	.L7053
.L7917:
	cmpb	$25, 16(%rcx)
	jne	.L7052
	jmp	.L7051
	.p2align 6,,7
.L7757:
	movl	$1, 84(%rsp)
	jmp	.L6912
.L7902:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L6921
.L7901:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L6920
.L7863:
	movzbl	17(%rbp), %esi
	movzwl	60(%rbp), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L6916
.L7862:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L6915
.L7861:
	testb	$2, 62(%rbp)
	je	.L6914
	movq	24(%rbp), %r9
	testq	%r9, %r9
	cmovne	%r9, %rbp
	jmp	.L6914
.L7860:
	testb	$2, 62(%rbx)
	je	.L6913
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L6913
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L6913
	.p2align 6,,7
.L6901:
	leal	-6(%r12), %ecx
	cmpl	$1, %ecx
	jbe	.L6902
	cmpl	$10, %r12d
	je	.L6902
	cmpl	$8, %r12d
	je	.L6902
	cmpl	$11, %r12d
	jne	.L6900
.L6902:
	movq	288(%rsp), %rdi
	movq	%r13, %rsi
	addq	$296, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	convert_and_check
.L7798:
	movq	288(%rsp), %r9
	movq	%r14, %rbp
	movq	8(%r9), %rbx
	cmpq	%r14, %rbx
	je	.L7753
	testq	%rbx, %rbx
	je	.L7753
	testq	%r14, %r14
	je	.L7753
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L7753
	testb	%al, %al
	je	.L7753
	cmpb	$6, %dl
	je	.L7919
.L6742:
	cmpb	$6, %al
	je	.L7920
.L6743:
	cmpb	$10, %dl
	je	.L7921
.L6744:
	cmpb	$10, 16(%rbp)
	je	.L7922
.L6745:
	cmpq	%rbp, %rbx
	movl	$1, 116(%rsp)
	je	.L6741
	movzbl	16(%rbx), %esi
	cmpb	16(%rbp), %sil
	je	.L6747
	movl	$0, 116(%rsp)
.L6741:
	cmpl	$1, 116(%rsp)
	jne	.L6738
	movq	%r13, %rdi
	call	mark_addressable
	testl	%eax, %eax
	je	.L7623
	movq	8(%r13), %rdi
	call	build_pointer_type
	movq	%r13, %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	movq	288(%rsp), %r13
	movq	8(%rax), %r15
	movq	%rax, %rbx
	movq	8(%r13), %rdi
	cmpq	%rdi, 8(%r15)
	je	.L6898
	call	build_pointer_type
	movq	%rbx, %rdx
	movl	$115, %edi
	movq	%rax, %rsi
	call	build1
	movq	%rax, %rbx
.L6898:
	movq	288(%rsp), %rsi
	movl	$115, %edi
	movq	%rbx, %rdx
	jmp	.L7772
.L6747:
	movzbl	17(%rbx), %edi
	movzbl	62(%rbx), %ecx
	movl	%edi, %edx
	shrb	$5, %cl
	shrb	$3, %dil
	shrb	$4, %dl
	andl	$1, %edi
	andl	$1, %ecx
	andl	$1, %edx
	addl	%edi, %edi
	sall	$2, %ecx
	orl	%edi, %edx
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	cmpb	$20, %sil
	je	.L7923
.L6749:
	movzbl	17(%rbp), %r11d
	movzbl	62(%rbp), %r8d
	leal	0(,%rcx,8), %edi
	orl	%edx, %edi
	xorl	%ecx, %ecx
	movl	%r11d, %edx
	shrb	$5, %r8b
	shrb	$3, %r11b
	shrb	$4, %dl
	andl	$1, %r11d
	andl	$1, %r8d
	andl	$1, %edx
	addl	%r11d, %r11d
	sall	$2, %r8d
	orl	%r11d, %edx
	orl	%r8d, %edx
	cmpb	$20, %sil
	je	.L7924
.L6750:
	leal	0(,%rcx,8), %esi
	movl	$0, 116(%rsp)
	orl	%esi, %edx
	cmpl	%edx, %edi
	jne	.L6741
	movq	128(%rbp), %rax
	cmpq	%rax, 128(%rbx)
	je	.L7753
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	*targetm+264(%rip)
	movl	$0, 116(%rsp)
	testl	%eax, %eax
	movl	%eax, 256(%rsp)
	je	.L6741
	movl	$0, 116(%rsp)
	movzbl	16(%rbx), %eax
	cmpl	$18, %eax
	je	.L6876
	cmpl	$18, %eax
	ja	.L6893
	cmpl	$13, %eax
	je	.L6754
.L6753:
	cmpl	$2, 256(%rsp)
	jne	.L6741
	cmpl	$1, 116(%rsp)
	jne	.L6738
	movl	$2, 116(%rsp)
	jmp	.L6741
.L6754:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L6755
	call	comptypes
.L7752:
	movl	%eax, 116(%rsp)
	jmp	.L6753
.L6755:
	movl	$1, 116(%rsp)
	jmp	.L6753
.L6893:
	cmpl	$20, %eax
	je	.L6889
	cmpl	$23, %eax
	jne	.L6753
	movl	$1, 156(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L6758
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 156(%rsp)
	je	.L6753
.L6758:
	movq	24(%rbx), %r9
	movq	%r9, 120(%rsp)
	testq	%r9, %r9
	movq	24(%rbp), %rdx
	movq	%rdx, 128(%rsp)
	je	.L7925
	cmpq	$0, 128(%rsp)
	je	.L7926
	movl	$1, 116(%rsp)
	xorl	%ebp, %ebp
.L6873:
	cmpq	$0, 120(%rsp)
	je	.L7927
	cmpq	$0, 128(%rsp)
	je	.L6862
	movq	120(%rsp), %rsi
	movq	32(%rsi), %rdi
	testq	%rdi, %rdi
	je	.L7928
	movq	128(%rsp), %r10
	movq	32(%r10), %rax
	testq	%rax, %rax
	jne	.L6848
.L7778:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L6862
.L6847:
	cmpl	116(%rsp), %ebp
	movl	116(%rsp), %ecx
	movq	120(%rsp), %rsi
	movq	128(%rsp), %r8
	cmovg	%ebp, %ecx
	movl	%ecx, 116(%rsp)
	movq	(%rsi), %r11
	movq	%r11, 120(%rsp)
	movq	(%r8), %rax
	movq	%rax, 128(%rsp)
	jmp	.L6873
.L6862:
	movl	$0, 116(%rsp)
.L6842:
	cmpl	$1, 116(%rsp)
	movl	116(%rsp), %eax
	cmove	156(%rsp), %eax
	jmp	.L7752
.L6848:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %ebp
	jne	.L6847
	movq	120(%rsp), %rdi
	movq	32(%rdi), %rax
	cmpb	$21, 16(%rax)
	je	.L7930
.L6852:
	movq	128(%rsp), %rsi
	movq	32(%rsi), %rax
	cmpb	$21, 16(%rax)
	jne	.L6862
	cmpq	$0, 96(%rax)
	je	.L6863
	testb	$8, 62(%rax)
	je	.L6862
.L6863:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L6862
	movq	120(%rsp), %r9
	movq	32(%r9), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L6862
	movq	128(%rsp), %rdi
	movq	32(%rdi), %r10
	movq	24(%r10), %rbx
	testq	%rbx, %rbx
	je	.L6862
.L6869:
	movq	120(%rsp), %rdx
	movq	8(%rbx), %rdi
	movq	32(%rdx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L6865
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L6869
	jmp	.L6862
.L6865:
	testq	%rbx, %rbx
	jne	.L6847
	jmp	.L6862
.L7930:
	cmpq	$0, 96(%rax)
	je	.L6853
	testb	$8, 62(%rax)
	je	.L6852
.L6853:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L6852
	movq	128(%rsp), %rax
	movq	32(%rax), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L6852
	movq	120(%rsp), %rcx
	movq	32(%rcx), %r8
	movq	24(%r8), %rbx
	testq	%rbx, %rbx
	je	.L6862
.L6859:
	movq	128(%rsp), %r11
	movq	8(%rbx), %rdi
	movq	32(%r11), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L6865
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L6859
	jmp	.L6862
.L7928:
	movq	128(%rsp), %r9
	movq	32(%r9), %rdi
	jmp	.L7778
.L7927:
	cmpq	$0, 128(%rsp)
	je	.L6842
	jmp	.L6862
.L7926:
	movq	120(%rsp), %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L6753
	movq	136(%rbp), %rax
	testq	%rax, %rax
	je	.L7659
	movq	%rax, %rbp
	movl	$1, 140(%rsp)
	movl	$0, 144(%rsp)
.L6837:
	cmpq	$0, 120(%rsp)
	je	.L7931
	testq	%rbp, %rbp
	je	.L6826
	movq	120(%rsp), %r8
	movq	32(%r8), %rdi
	testq	%rdi, %rdi
	je	.L7932
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L6812
.L7776:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L6826
.L6811:
	movl	140(%rsp), %r11d
	movl	144(%rsp), %ebx
	cmpl	%r11d, 144(%rsp)
	movq	120(%rsp), %rcx
	cmovle	%r11d, %ebx
	movl	%ebx, 140(%rsp)
	movq	(%rcx), %r8
	movq	%r8, 120(%rsp)
	movq	(%rbp), %rbp
	jmp	.L6837
.L6826:
	movl	$0, 140(%rsp)
.L6806:
	movl	$2, 116(%rsp)
	cmpl	$1, 140(%rsp)
.L7777:
	jne	.L6753
	movl	156(%rsp), %ebp
	movl	%ebp, 116(%rsp)
	jmp	.L6753
.L6812:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 144(%rsp)
	jne	.L6811
	movq	120(%rsp), %rcx
	movq	32(%rcx), %rax
	cmpb	$21, 16(%rax)
	je	.L7934
.L6816:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L6826
	cmpq	$0, 96(%rax)
	je	.L6827
	testb	$8, 62(%rax)
	je	.L6826
.L6827:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L6826
	movq	120(%rsp), %rax
	movq	32(%rax), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L6826
	movq	32(%rbp), %rdx
	movq	24(%rdx), %rbx
	testq	%rbx, %rbx
	je	.L6826
.L6833:
	movq	120(%rsp), %r10
	movq	8(%rbx), %rdi
	movq	32(%r10), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L6829
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L6833
	jmp	.L6826
.L6829:
	testq	%rbx, %rbx
	jne	.L6811
	jmp	.L6826
.L7934:
	cmpq	$0, 96(%rax)
	je	.L6817
	testb	$8, 62(%rax)
	je	.L6816
.L6817:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L6816
	movq	32(%rbp), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L6816
	movq	120(%rsp), %rsi
	movq	32(%rsi), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L6826
.L6823:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L6829
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L6823
	jmp	.L6826
.L7932:
	movq	32(%rbp), %rdi
	jmp	.L7776
.L7931:
	testq	%rbp, %rbp
	je	.L6806
	jmp	.L6826
.L7659:
	movl	156(%rsp), %eax
	jmp	.L7752
.L7925:
	movq	%rdx, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L6753
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L7659
	movq	%rax, %rbp
	movl	$1, 148(%rsp)
	movl	$0, 152(%rsp)
.L6798:
	cmpq	$0, 128(%rsp)
	je	.L7935
	testq	%rbp, %rbp
	je	.L6787
	movq	128(%rsp), %rbx
	movq	32(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L7936
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L6773
.L7775:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L6787
.L6772:
	movl	148(%rsp), %r10d
	movl	152(%rsp), %ebx
	cmpl	%r10d, 152(%rsp)
	movq	128(%rsp), %rdx
	cmovle	%r10d, %ebx
	movl	%ebx, 148(%rsp)
	movq	(%rdx), %rax
	movq	%rax, 128(%rsp)
	movq	(%rbp), %rbp
	jmp	.L6798
.L6787:
	movl	$0, 148(%rsp)
.L6767:
	cmpl	$1, 148(%rsp)
	movl	$2, 116(%rsp)
	jmp	.L7777
.L6773:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 152(%rsp)
	jne	.L6772
	movq	128(%rsp), %rdx
	movq	32(%rdx), %rax
	cmpb	$21, 16(%rax)
	je	.L7938
.L6777:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L6787
	cmpq	$0, 96(%rax)
	je	.L6788
	testb	$8, 62(%rax)
	je	.L6787
.L6788:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L6787
	movq	128(%rsp), %r11
	movq	32(%r11), %r8
	movq	32(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L6787
	movq	32(%rbp), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L6787
.L6794:
	movq	128(%rsp), %r9
	movq	8(%rbx), %rdi
	movq	32(%r9), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L6790
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L6794
	jmp	.L6787
.L6790:
	testq	%rbx, %rbx
	jne	.L6772
	jmp	.L6787
.L7938:
	cmpq	$0, 96(%rax)
	je	.L6778
	testb	$8, 62(%rax)
	je	.L6777
.L6778:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L6777
	movq	32(%rbp), %r10
	movq	32(%r10), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L6777
	movq	128(%rsp), %rdi
	movq	32(%rdi), %rcx
	movq	24(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L6787
.L6784:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L6790
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L6784
	jmp	.L6787
.L7936:
	movq	32(%rbp), %rdi
	jmp	.L7775
.L7935:
	testq	%rbp, %rbp
	je	.L6767
	jmp	.L6787
.L6889:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmovne	116(%rsp), %eax
	jmp	.L7752
.L6876:
	movq	24(%rbx), %r10
	movq	%r10, 248(%rsp)
	movq	24(%rbp), %r9
	movl	$1, 116(%rsp)
	movq	%r9, 240(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L6877
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 116(%rsp)
	je	.L6741
.L6877:
	cmpq	$0, 248(%rsp)
	je	.L6753
	cmpq	$0, 240(%rsp)
	je	.L6753
	movq	240(%rsp), %rbx
	cmpq	%rbx, 248(%rsp)
	je	.L6753
	movq	248(%rsp), %rax
	movq	112(%rbx), %rsi
	movq	112(%rax), %rcx
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L6880
	movq	104(%rax), %rbp
	cmpb	$25, 16(%rbp)
	je	.L7939
.L6881:
	movl	$1, %r8d
.L6880:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L6882
	movq	240(%rsp), %rax
	movq	104(%rax), %r9
	cmpb	$25, 16(%r9)
	je	.L7940
.L6883:
	movl	$1, %ecx
.L6882:
	testb	%r8b, %r8b
	jne	.L6753
	testb	%cl, %cl
	jne	.L6753
	testb	%dil, %dil
	je	.L7686
	testb	%dl, %dl
.L7751:
	jne	.L6753
.L6888:
	movl	$0, 116(%rsp)
	jmp	.L6753
.L7686:
	testb	%dl, %dl
	jne	.L6888
	movq	248(%rsp), %rdx
	movq	240(%rsp), %rbx
	movq	104(%rdx), %rdi
	movq	104(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L6888
	movq	248(%rsp), %rsi
	movq	240(%rsp), %r8
	movq	112(%rsi), %rdi
	movq	112(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L7751
.L7940:
	cmpb	$25, 16(%rsi)
	jne	.L6883
	jmp	.L6882
.L7939:
	cmpb	$25, 16(%rcx)
	jne	.L6881
	jmp	.L6880
	.p2align 6,,7
.L7753:
	movl	$1, 116(%rsp)
	jmp	.L6741
.L7924:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L6750
.L7923:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L6749
.L7922:
	movzbl	17(%rbp), %esi
	movzwl	60(%rbp), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L6745
.L7921:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L6744
.L7920:
	testb	$2, 62(%r14)
	je	.L6743
	movq	24(%r14), %r10
	testq	%r10, %r10
	cmovne	%r10, %rbp
	jmp	.L6743
.L7919:
	testb	$2, 62(%rbx)
	je	.L6742
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L6742
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L6742
	.p2align 6,,7
.L7797:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
	jmp	.L7623
.L7796:
	movq	%r13, %rdi
	call	overflow_warning
	movq	288(%rsp), %rdi
	movq	%r14, %rsi
	xorl	%edx, %edx
	call	maybe_objc_comptypes
	jmp	.L6663
.L7795:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	jne	.L6727
	cmpb	$51, 48(%r13)
	je	.L6727
	cmpq	$0, current_function_decl(%rip)
	je	.L6733
	movzbl	17(%r13), %ebx
	andb	$24, %bl
	cmpb	$16, %bl
	je	.L7941
.L6733:
	movq	%r13, %rsi
.L6734:
	movq	%rsi, %r13
.L7741:
	movq	8(%r13), %r14
	jmp	.L6727
.L7941:
	movq	104(%r13), %rax
	testq	%rax, %rax
	je	.L6733
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L6733
	testb	$2, 17(%rax)
	je	.L6733
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L6734
	jmp	.L6733
	.p2align 6,,7
.L6666:
	movzbl	%al, %r12d
	movq	%r13, %rbx
	movq	%r14, %rbp
	cmpl	$23, %r12d
	je	.L6668
	cmpl	$18, %r12d
	je	.L6668
	movzbl	16(%r13), %eax
	cmpb	$32, %al
	je	.L7942
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L6695
	cmpb	$34, %al
	je	.L7943
.L6695:
	movzbl	16(%rbx), %ecx
	movq	%rbx, %rdx
	cmpb	$116, %cl
	je	.L7733
	cmpb	$115, %cl
	je	.L7944
.L6704:
	movzbl	%cl, %r14d 
	movzbl	tree_code_type(%r14), %eax
	cmpb	$60, %al
	je	.L6709
	cmpb	$49, %al
	je	.L6709
	cmpb	$50, %al
	je	.L6709
	cmpb	$101, %al
	je	.L6709
.L6708:
	cmpl	$10, %r12d
	je	.L7945
	cmpb	$39, %cl
	je	.L7946
.L6717:
	movq	%rbp, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L6722
	testb	$32, 17(%rbp)
	je	.L6723
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L6724
	movzwl	60(%rbp), %r11d
	movq	integer_types+40(%rip), %rbp
	movzwl	60(%rbp), %r8d
	andl	$511, %r11d
	andl	$511, %r8d
	cmpl	%r8d, %r11d
	je	.L6724
.L6723:
	movq	integer_types+40(%rip), %rdi
.L7773:
	movq	%rbx, %rsi
.L7774:
	call	convert
.L7750:
	movq	%rax, %r13
	jmp	.L7741
.L6724:
	movq	integer_types+48(%rip), %rdi
	jmp	.L7773
.L6722:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L6725
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L6725
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%rbp)
	je	.L7947
.L6725:
	cmpl	$5, %r12d
	je	.L7948
.L6726:
	movq	%rbx, %r13
	jmp	.L7741
.L7948:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L7745:
	movq	global_trees(%rip), %r13
	jmp	.L7741
.L7947:
	movq	global_trees+200(%rip), %rdi
	jmp	.L7773
	.p2align 6,,7
.L7946:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L6717
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%rdi), %esi
	movq	40(%rdx), %rdi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L6717
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L6723
	testb	$32, 17(%rbp)
	jne	.L6724
	jmp	.L6723
	.p2align 6,,7
.L7945:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%rbp), %edx
	movl	flag_traditional(%rip), %r12d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r12d, %r12d
	jne	.L6716
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L6715
.L6716:
	testb	$32, 17(%rbp)
	movl	$1, %eax
	cmovne	%eax, %esi
.L6715:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L7773
.L6709:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L6708
.L7944:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r13
	cmpq	%r13, 8(%rsi)
	jne	.L6704
	.p2align 4,,7
.L6707:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %rbx
	cmpb	$116, %cl
	jne	.L7949
.L7733:
	movq	32(%rbx), %rsi
	jmp	.L6707
.L7949:
	cmpb	$115, %cl
	jne	.L6704
	movq	32(%rsi), %r10
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%r10)
	movq	%r10, %rsi
	je	.L6707
	jmp	.L6704
.L7943:
	movl	pedantic(%rip), %edx
	testl	%edx, %edx
	jne	.L6698
	cmpb	$51, 48(%r13)
	je	.L6698
	cmpq	$0, current_function_decl(%rip)
	je	.L6701
	movzbl	17(%r13), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L7950
.L6701:
	movq	%r13, %rsi
.L6702:
	movq	%rsi, %rbx
.L6699:
	movq	8(%rbx), %rbp
	jmp	.L6695
.L7950:
	movq	104(%r13), %rax
	testq	%rax, %rax
	je	.L6701
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L6701
	testb	$2, 17(%rax)
	je	.L6701
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L6702
	jmp	.L6701
	.p2align 6,,7
.L6698:
	movq	%r13, %rbx
	jmp	.L6699
.L7942:
	movq	104(%r13), %rbx
	jmp	.L6695
.L6668:
	movzbl	16(%r13), %edx
	xorl	%ebp, %ebp
	movq	%r13, %rbx
	cmpb	$116, %dl
	je	.L7624
	cmpb	$115, %dl
	je	.L7951
	movzbl	16(%r13), %ecx
.L6670:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L6676
	cmpb	$49, %al
	je	.L6676
	cmpb	$50, %al
	je	.L6676
	cmpb	$101, %al
	je	.L6676
.L6675:
	cmpl	$23, %r12d
	je	.L7952
	cmpl	$18, %r12d
	jne	.L6726
	movzbl	%cl, %r8d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r8), %eax
	movq	8(%rdi), %r13
	cmpb	$114, %al
	je	.L6681
	cmpb	$100, %al
	je	.L6681
.L6680:
	movzbl	17(%rdi), %r8d
	movzbl	62(%rdi), %r9d
	movl	$1, %esi
	movzbl	16(%rdi), %edi
	movl	%r8d, %r12d
	movl	%r8d, %r14d
	movl	%r9d, %r10d
	shrb	$3, %r12b
	shrb	$4, %r14b
	shrb	$5, %r10b
	andl	$1, %r12d
	andl	%r14d, %esi
	andl	$1, %r10d
	addl	%r12d, %r12d
	sall	$2, %r10d
	orl	%r12d, %esi
	orl	%r10d, %esi
	xorl	%r10d, %r10d
	cmpb	$20, %dil
	je	.L7953
.L6684:
	leal	0(,%r10,8), %r12d
	orl	%r12d, %esi
	jne	.L6683
	testl	%edx, %edx
	jne	.L6683
	testl	%r11d, %r11d
	je	.L6682
.L6683:
	movl	%r8d, %r14d
	shrb	$5, %r9b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r14b
	movl	%r9d, %ecx
	movl	%r8d, %r10d
	andl	%r14d, %esi
	andl	$1, %ecx
	andl	$1, %r10d
	sall	$2, %ecx
	addl	%r10d, %r10d
	orl	%r10d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L7954
.L6686:
	leal	0(,%rcx,8), %r8d
	leal	(%r11,%r11), %edi
	orl	%r8d, %esi
	orl	%edx, %esi
	orl	%edi, %esi
	movq	%r13, %rdi
	call	c_build_qualified_type
	movzbl	16(%rbx), %ecx
	movq	%rax, %r13
.L6682:
	cmpb	$41, %cl
	je	.L7955
	cmpb	$47, %cl
	je	.L7956
	xorl	%r12d, %r12d
	testl	%ebp, %ebp
	je	.L7957
.L6689:
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L6690
	testl	%r12d, %r12d
	je	.L6726
.L6690:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %rbp
	je	.L7958
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbp, %rdi
	movq	%rax, %rsi
	jmp	.L7774
.L7958:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, %r13
	call	mark_addressable
	testl	%eax, %eax
	je	.L7745
	movq	%rbx, %rdi
	call	staticp
	movzbl	17(%r13), %ebx
	movl	%eax, %ebp
	andb	$1, %bpl
	addb	%bpl, %bpl
	andb	$-4, %bl
	orb	%bpl, %bl
	movb	%bl, 17(%r13)
	jmp	.L7741
.L7957:
	movq	%rbx, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r12d
	jmp	.L6689
.L7956:
	movq	40(%rbx), %rdi
	call	default_conversion
	movq	32(%rbx), %rdx
	movl	$47, %edi
	movq	8(%rax), %rsi
	movq	%rax, %rcx
	xorl	%eax, %eax
	call	build
	jmp	.L7750
.L7955:
	movq	72(%r13), %rdi
	movq	32(%rbx), %rsi
	jmp	.L7774
.L7954:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L6686
.L7953:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %r10d
	jmp	.L6684
.L6681:
	movzbl	17(%rbx), %r9d
	movl	$1, %r11d
	movl	%r9d, %edx
	shrb	$3, %r9b
	shrb	$4, %dl
	andl	%r9d, %r11d
	andl	$1, %edx
	jmp	.L6680
.L7952:
	movl	$121, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L7750
.L6676:
	movl	24(%r13), %eax
	movl	%eax, 24(%rbx)
	jmp	.L6675
.L7951:
	movq	32(%r13), %rcx
	cmpq	%r14, 8(%rcx)
	je	.L7624
	movl	$115, %ecx
	jmp	.L6670
.L7624:
	movq	32(%r13), %rsi
	movl	%edx, %ecx
	.p2align 4,,7
.L6674:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %rbx
	movzbl	16(%rsi), %ecx
	cmove	%eax, %ebp
	cmpb	$116, %cl
	jne	.L7959
	movq	32(%rbx), %rsi
	jmp	.L6674
.L7959:
	cmpb	$115, %cl
	jne	.L6670
	movq	32(%rsi), %rsi
	movq	8(%rbx), %rdx
	cmpq	%rdx, 8(%rsi)
	je	.L6674
	jmp	.L6670
.L7794:
	movq	32(%rsi), %r13
	jmp	.L6664
.LFE12:
.Lfe12:
	.size	convert_for_assignment,.Lfe12-convert_for_assignment
	.section	.rodata.str1.1
.LC85:
	.string	"passing arg %d of `%s'"
	.section	.rodata.str1.32
	.align 32
.LC86:
	.string	"passing arg %d of pointer to function"
	.text
	.align 2
	.p2align 4,,15
	.type	warn_for_assignment,@function
warn_for_assignment:
.LFB13:
	pushq	%rbp
.LCFI52:
	movq	%rsp, %rbp
.LCFI53:
	subq	$32, %rsp
.LCFI54:
	testq	%rsi, %rsi
	movq	%rbx, -24(%rbp)
.LCFI55:
	movq	%r12, -16(%rbp)
.LCFI56:
	movq	%r13, -8(%rbp)
.LCFI57:
	movq	%rdx, %r12
	movl	%ecx, %ebx
	movq	%rdi, %r13
	je	.L7967
.L7961:
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	pedwarn
	movq	-24(%rbp), %rbx
	movq	-16(%rbp), %r12
	movq	-8(%rbp), %r13
	leave
	ret
	.p2align 6,,7
.L7967:
	call	maybe_building_objc_message_expr
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L7966
	cmpl	$2, %ebx
	jle	.L7966
	subl	$2, %ebx
.L7962:
	testq	%rcx, %rcx
	je	.L7963
	mov	24(%rcx), %edx
	movl	$.LC85, %esi
	xorl	%eax, %eax
	movq	32(%rcx), %rcx
	addq	$64, %rdx
	shrq	$4, %rdx
	salq	$4, %rdx
	subq	%rdx, %rsp
	movl	%ebx, %edx
	movq	%rsp, %rdi
	movq	%rsp, %r12
	call	sprintf
.L7964:
	movq	%r12, %rsi
	jmp	.L7961
.L7963:
	subq	$64, %rsp
	movl	$.LC86, %esi
	movl	%ebx, %edx
	movq	%rsp, %rdi
	xorl	%eax, %eax
	movq	%rsp, %r12
	call	sprintf
	jmp	.L7964
	.p2align 6,,7
.L7966:
	movq	%r12, %rcx
	jmp	.L7962
.LFE13:
.Lfe13:
	.size	warn_for_assignment,.Lfe13-warn_for_assignment
.globl constructor_no_implicit
	.data
	.align 4
	.type	constructor_no_implicit,@object
	.size	constructor_no_implicit,4
constructor_no_implicit:
	.long	0
	.text
	.align 2
	.p2align 4,,15
.globl require_complete_type
	.type	require_complete_type,@function
require_complete_type:
.LFB14:
	subq	$8, %rsp
.LCFI58:
	movq	global_trees(%rip), %rax
	movq	8(%rdi), %rdx
	cmpq	%rax, %rdi
	je	.L7983
	cmpq	%rax, %rdx
	je	.L7983
	cmpq	$0, 32(%rdx)
	jne	.L7978
	movzbl	16(%rdx), %ecx
	testb	%cl, %cl
	je	.L7983
	testq	%rdi, %rdi
	je	.L7986
	movzbl	16(%rdi), %esi
	subb	$34, %sil
	cmpb	$1, %sil
	jbe	.L8003
.L7986:
	movzbl	%cl, %eax
	subl	$5, %eax
	cmpl	$16, %eax
	ja	.L7995
	mov	%eax, %ecx
	jmp	*.L7996(,%rcx,8)
	.section	.rodata
	.align 8
	.align 4
.L7996:
	.quad	.L7991
	.quad	.L7995
	.quad	.L7995
	.quad	.L7995
	.quad	.L7995
	.quad	.L7990
	.quad	.L7995
	.quad	.L7995
	.quad	.L7995
	.quad	.L7995
	.quad	.L7995
	.quad	.L7995
	.quad	.L7995
	.quad	.L7992
	.quad	.L7995
	.quad	.L7988
	.quad	.L7989
	.text
.L7988:
	movl	$.LC62, %esi
.L7987:
	movq	96(%rdx), %rax
	cmpb	$1, 16(%rax)
	je	.L8004
	movq	72(%rax), %rax
	movl	$.LC71, %edi
.L8000:
	movq	32(%rax), %rsi
	xorl	%eax, %eax
	call	error
.L7999:
	movq	global_trees(%rip), %rax
.L7983:
	movq	%rax, %rdi
.L7978:
	movq	%rdi, %rax
	addq	$8, %rsp
	ret
.L8004:
	movq	32(%rax), %rdx
	movl	$.LC70, %edi
	xorl	%eax, %eax
	call	error
	jmp	.L7999
.L7991:
	movl	$.LC65, %edi
.L8002:
	xorl	%eax, %eax
	call	error
	jmp	.L7999
.L7990:
	movl	$.LC64, %esi
	jmp	.L7987
.L7992:
	movq	24(%rdx), %rax
	testq	%rax, %rax
	je	.L7993
	cmpq	$0, 112(%rax)
	je	.L8005
	movq	8(%rdx), %rdx
	movzbl	16(%rdx), %ecx
	jmp	.L7986
.L8005:
	movl	$.LC66, %edi
	jmp	.L8002
.L7993:
	movl	$.LC67, %edi
	jmp	.L8002
	.p2align 6,,7
.L7989:
	movl	$.LC63, %esi
	jmp	.L7987
.L8003:
	movq	72(%rdi), %rax
	movl	$.LC61, %edi
	jmp	.L8000
.L7995:
	movl	$.LC68, %edi
	movl	$163, %esi
	movl	$.LC69, %edx
	call	fancy_abort
.LFE14:
.Lfe14:
	.size	require_complete_type,.Lfe14-require_complete_type
	.align 2
	.p2align 4,,15
.globl incomplete_type_error
	.type	incomplete_type_error,@function
incomplete_type_error:
.LFB15:
	subq	$8, %rsp
.LCFI59:
	movzbl	16(%rsi), %edx
	testb	%dl, %dl
	je	.L8006
	testq	%rdi, %rdi
	je	.L8010
	movzbl	16(%rdi), %ecx
	subb	$34, %cl
	cmpb	$1, %cl
	jbe	.L8025
.L8010:
	movzbl	%dl, %eax
	subl	$5, %eax
	cmpl	$16, %eax
	ja	.L8019
	mov	%eax, %edx
	jmp	*.L8020(,%rdx,8)
	.section	.rodata
	.align 8
	.align 4
.L8020:
	.quad	.L8015
	.quad	.L8019
	.quad	.L8019
	.quad	.L8019
	.quad	.L8019
	.quad	.L8014
	.quad	.L8019
	.quad	.L8019
	.quad	.L8019
	.quad	.L8019
	.quad	.L8019
	.quad	.L8019
	.quad	.L8019
	.quad	.L8016
	.quad	.L8019
	.quad	.L8012
	.quad	.L8013
	.text
.L8012:
	movl	$.LC62, %edx
.L8011:
	movq	96(%rsi), %rax
	cmpb	$1, 16(%rax)
	je	.L8026
	movq	72(%rax), %rax
	movl	$.LC71, %edi
.L8024:
	movq	32(%rax), %rsi
	addq	$8, %rsp
	xorl	%eax, %eax
	jmp	error
.L8026:
	movq	%rdx, %rsi
	movl	$.LC70, %edi
	movq	32(%rax), %rdx
	xorl	%eax, %eax
	addq	$8, %rsp
	jmp	error
.L8015:
	movl	$.LC65, %edi
.L8023:
	xorl	%eax, %eax
	addq	$8, %rsp
	jmp	error
.L8014:
	movl	$.LC64, %edx
	jmp	.L8011
.L8016:
	movq	24(%rsi), %rax
	testq	%rax, %rax
	je	.L8017
	cmpq	$0, 112(%rax)
	je	.L8027
	movq	8(%rsi), %rsi
	movzbl	16(%rsi), %edx
	jmp	.L8010
.L8027:
	movl	$.LC66, %edi
	jmp	.L8023
.L8017:
	movl	$.LC67, %edi
	jmp	.L8023
	.p2align 6,,7
.L8013:
	movl	$.LC63, %edx
	jmp	.L8011
	.p2align 6,,7
.L8025:
	movq	72(%rdi), %rax
	movl	$.LC61, %edi
	jmp	.L8024
	.p2align 6,,7
.L8006:
	addq	$8, %rsp
	ret
.L8019:
	movl	$.LC68, %edi
	movl	$163, %esi
	movl	$.LC69, %edx
	call	fancy_abort
.LFE15:
.Lfe15:
	.size	incomplete_type_error,.Lfe15-incomplete_type_error
	.align 2
	.p2align 4,,15
.globl common_type
	.type	common_type,@function
common_type:
.LFB16:
	subq	$184, %rsp
.LCFI60:
	cmpq	%rsi, %rdi
	movq	%rbx, 136(%rsp)
.LCFI61:
	movq	%rbp, 144(%rsp)
.LCFI62:
	movq	%r12, 152(%rsp)
.LCFI63:
	movq	%r13, 160(%rsp)
.LCFI64:
	movq	%r14, 168(%rsp)
.LCFI65:
	movq	%r15, 176(%rsp)
.LCFI66:
	movq	%rdi, %rbx
	movq	%rsi, %rbp
	je	.L8033
	movq	global_trees(%rip), %rax
	cmpq	%rax, %rdi
	je	.L8513
	cmpq	%rax, %rsi
	je	.L8033
	call	*targetm+248(%rip)
	cmpb	$10, 16(%rbx)
	movq	%rax, %r14
	je	.L8514
.L8037:
	movzbl	16(%rbp), %eax
	cmpb	$10, %al
	je	.L8515
.L8038:
	movzbl	16(%rbx), %r12d
	movzbl	%al, %r13d
	cmpl	$8, %r12d
	je	.L8459
	cmpl	$8, %r13d
	je	.L8481
	leal	-6(%r12), %eax
	cmpl	$17, %eax
	ja	.L8431
	mov	%eax, %edx
	jmp	*.L8432(,%rdx,8)
	.section	.rodata
	.align 8
	.align 4
.L8432:
	.quad	.L8052
	.quad	.L8052
	.quad	.L8431
	.quad	.L8431
	.quad	.L8431
	.quad	.L8431
	.quad	.L8431
	.quad	.L8069
	.quad	.L8431
	.quad	.L8431
	.quad	.L8431
	.quad	.L8431
	.quad	.L8074
	.quad	.L8431
	.quad	.L8431
	.quad	.L8431
	.quad	.L8431
	.quad	.L8081
	.text
.L8052:
	cmpl	$7, %r12d
	je	.L8517
	cmpl	$7, %r13d
	je	.L8460
.L8054:
	movzwl	60(%rbx), %edx
	movzwl	60(%rbp), %eax
	andl	$511, %edx
	andl	$511, %eax
	cmpl	%eax, %edx
	jg	.L8431
	cmpl	%edx, %eax
	jg	.L8509
	movq	128(%rbx), %rax
	movq	integer_types+64(%rip), %rdi
	cmpq	%rdi, %rax
	je	.L8493
	movq	128(%rbp), %rdx
	cmpq	%rdi, %rdx
	je	.L8493
	movq	integer_types+56(%rip), %rcx
	cmpq	%rcx, %rax
	je	.L8061
	cmpq	%rcx, %rdx
	je	.L8061
	movq	global_trees+208(%rip), %rdi
	cmpq	%rdi, %rax
	je	.L8493
	cmpq	%rdi, %rdx
	je	.L8493
	testb	$32, 17(%rbx)
	jne	.L8431
.L8509:
	movq	%rbp, %rdi
	.p2align 4,,7
.L8493:
	movq	%r14, %rsi
	movq	136(%rsp), %rbx
	movq	144(%rsp), %rbp
	movq	152(%rsp), %r12
	movq	160(%rsp), %r13
	movq	168(%rsp), %r14
	movq	176(%rsp), %r15
	addq	$184, %rsp
	jmp	build_type_attribute_variant
.L8431:
	movq	%rbx, %rdi
	jmp	.L8493
.L8061:
	testb	$32, 17(%rbx)
	jne	.L8493
	testb	$32, 17(%rbp)
	jne	.L8493
	movq	%rcx, %rdi
	jmp	.L8493
	.p2align 6,,7
.L8460:
	cmpl	$7, %r12d
	je	.L8054
	jmp	.L8509
.L8517:
	cmpl	$7, %r13d
	je	.L8460
	jmp	.L8431
.L8069:
	movq	8(%rbx), %rbx
	movq	8(%rbp), %rbp
	movq	128(%rbx), %rdi
	movq	128(%rbp), %rsi
	call	common_type
	movzbl	62(%rbx), %ecx
	movzbl	17(%rbx), %esi
	movq	%rax, %rdi
	movl	%esi, %edx
	shrb	$5, %cl
	shrb	$3, %sil
	shrb	$4, %dl
	andl	$1, %esi
	andl	$1, %ecx
	andl	$1, %edx
	addl	%esi, %esi
	sall	$2, %ecx
	orl	%esi, %edx
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	cmpb	$20, 16(%rbx)
	je	.L8518
.L8072:
	movzbl	17(%rbp), %r8d
	movzbl	62(%rbp), %ebx
	leal	0(,%rcx,8), %esi
	orl	%edx, %esi
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	shrb	$5, %bl
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	$1, %r8d
	andl	$1, %ebx
	andl	$1, %edx
	addl	%r8d, %r8d
	sall	$2, %ebx
	orl	%r8d, %edx
	orl	%ebx, %edx
	cmpb	$20, 16(%rbp)
	je	.L8519
.L8073:
	leal	0(,%rcx,8), %ebp
	orl	%ebp, %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movq	%rax, %rdi
	call	build_pointer_type
	.p2align 4,,7
.L8511:
	movq	%rax, %rdi
	jmp	.L8493
.L8519:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L8073
.L8518:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L8072
.L8074:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	call	common_type
	cmpq	8(%rbx), %rax
	je	.L8520
.L8075:
	cmpq	8(%rbp), %rax
	je	.L8521
.L8076:
	cmpq	$0, 24(%rbx)
	movq	%rax, %rdi
	cmove	%rbp, %rbx
	movq	24(%rbx), %rsi
	call	build_array_type
	jmp	.L8511
.L8521:
	cmpq	$0, 24(%rbp)
	je	.L8076
	jmp	.L8509
.L8520:
	cmpq	$0, 24(%rbx)
	je	.L8075
	jmp	.L8431
	.p2align 6,,7
.L8081:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	call	common_type
	movq	%rax, 128(%rsp)
	cmpq	8(%rbx), %rax
	movq	24(%rbp), %r13
	movq	24(%rbx), %r12
	je	.L8522
.L8082:
	movq	128(%rsp), %rdx
	cmpq	8(%rbp), %rdx
	je	.L8523
	testq	%r12, %r12
	je	.L8524
.L8084:
	testq	%r13, %r13
	je	.L8525
	xorl	%edi, %edi
	call	pushlevel
	movl	$1, %edi
	call	declare_parm_level
	movq	%r12, %rdi
	call	list_length
	movq	$0, 88(%rsp)
	testl	%eax, %eax
	jle	.L8434
	movl	%eax, %ebx
.L8090:
	movq	88(%rsp), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	call	tree_cons
	decl	%ebx
	movq	%rax, 88(%rsp)
	jne	.L8090
.L8434:
	movq	88(%rsp), %rax
	testq	%r12, %r12
	movq	%rax, 80(%rsp)
	je	.L8436
.L8430:
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L8095
	movq	32(%r13), %r9
	movq	80(%rsp), %rdi
	movq	%r9, 32(%rdi)
.L8096:
.L8093:
	movq	80(%rsp), %rax
	movq	(%r12), %r12
	movq	(%r13), %r13
	movq	(%rax), %r9
	testq	%r12, %r12
	movq	%r9, 80(%rsp)
	jne	.L8430
.L8436:
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	call	poplevel
	movq	88(%rsp), %rsi
	movq	128(%rsp), %rdi
	call	build_function_type
	movq	%rax, %rbx
	jmp	.L8431
.L8095:
	movq	32(%r13), %rdx
	testq	%rdx, %rdx
	je	.L8492
	cmpb	$21, 16(%rax)
	je	.L8526
.L8098:
	cmpb	$21, 16(%rdx)
	je	.L8527
.L8264:
	movq	32(%r12), %rdi
	movq	32(%r13), %rsi
	call	common_type
.L8492:
	movq	80(%rsp), %r11
	movq	%rax, 32(%r11)
	jmp	.L8093
.L8527:
	movq	32(%r12), %rax
	cmpq	%rax, %rdx
	je	.L8264
	movq	24(%rdx), %rbx
	testq	%rbx, %rbx
	movq	%rbx, 32(%rsp)
	je	.L8264
.L8429:
	movq	32(%rsp), %r11
	movq	%rax, %rbp
	movq	8(%r11), %rbx
	cmpq	%rax, %rbx
	je	.L8490
	testq	%rbx, %rbx
	je	.L8490
	testq	%rax, %rax
	je	.L8490
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L8490
	movzbl	16(%rax), %ecx
	testb	%cl, %cl
	je	.L8490
	cmpb	$6, %dl
	je	.L8528
.L8273:
	cmpb	$6, %cl
	je	.L8529
.L8274:
	cmpb	$10, %dl
	je	.L8530
.L8275:
	cmpb	$10, 16(%rbp)
	je	.L8531
.L8276:
	cmpq	%rbp, %rbx
	movl	$1, 4(%rsp)
	je	.L8272
	movzbl	16(%rbx), %esi
	cmpb	16(%rbp), %sil
	je	.L8278
	movl	$0, 4(%rsp)
.L8272:
	movl	4(%rsp), %ecx
	testl	%ecx, %ecx
	jne	.L8532
.L8267:
	movq	32(%rsp), %rbp
	movq	(%rbp), %rsi
	testq	%rsi, %rsi
	movq	%rsi, 32(%rsp)
	je	.L8264
	movq	32(%r12), %rax
	jmp	.L8429
.L8532:
	movq	32(%r12), %r8
	movq	80(%rsp), %r10
	movq	%r8, 32(%r10)
.L8503:
	movl	pedantic(%rip), %ebx
	testl	%ebx, %ebx
	je	.L8093
	movl	$.LC10, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L8093
.L8278:
	movzbl	17(%rbx), %r15d
	movzbl	62(%rbx), %r10d
	xorl	%ecx, %ecx
	movl	%r15d, %edx
	shrb	$5, %r10b
	shrb	$3, %r15b
	shrb	$4, %dl
	andl	$1, %r15d
	andl	$1, %r10d
	andl	$1, %edx
	addl	%r15d, %r15d
	sall	$2, %r10d
	orl	%r15d, %edx
	orl	%r10d, %edx
	cmpb	$20, %sil
	je	.L8533
.L8280:
	movzbl	17(%rbp), %r8d
	leal	0(,%rcx,8), %edi
	movzbl	62(%rbp), %ecx
	orl	%edx, %edi
	movl	%r8d, %edx
	shrb	$5, %cl
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	$1, %r8d
	andl	$1, %ecx
	andl	$1, %edx
	addl	%r8d, %r8d
	sall	$2, %ecx
	orl	%r8d, %edx
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	cmpb	$20, %sil
	je	.L8534
.L8281:
	leal	0(,%rcx,8), %esi
	movl	$0, 4(%rsp)
	orl	%esi, %edx
	cmpl	%edx, %edi
	jne	.L8272
	movq	128(%rbp), %rdx
	cmpq	%rdx, 128(%rbx)
	je	.L8490
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	*targetm+264(%rip)
	movl	$0, 4(%rsp)
	testl	%eax, %eax
	movl	%eax, 108(%rsp)
	je	.L8272
	movl	$0, 4(%rsp)
	movzbl	16(%rbx), %eax
	cmpl	$18, %eax
	je	.L8407
	cmpl	$18, %eax
	ja	.L8424
	cmpl	$13, %eax
	je	.L8285
.L8284:
	cmpl	$2, 108(%rsp)
	jne	.L8272
	cmpl	$1, 4(%rsp)
	movl	108(%rsp), %edi
	cmovne	4(%rsp), %edi
	movl	%edi, 4(%rsp)
	jmp	.L8272
.L8285:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L8286
	call	comptypes
.L8489:
	movl	%eax, 4(%rsp)
	jmp	.L8284
.L8286:
	movl	$1, 4(%rsp)
	jmp	.L8284
.L8424:
	cmpl	$20, %eax
	je	.L8420
	cmpl	$23, %eax
	jne	.L8284
	movl	$1, 28(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L8289
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 28(%rsp)
	je	.L8284
.L8289:
	movq	24(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, 8(%rsp)
	movq	24(%rbp), %r15
	je	.L8535
	testq	%r15, %r15
	je	.L8536
	movl	$1, 4(%rsp)
	xorl	%ebp, %ebp
.L8404:
	cmpq	$0, 8(%rsp)
	je	.L8537
	testq	%r15, %r15
	je	.L8393
	movq	8(%rsp), %r8
	movq	32(%r8), %rdi
	testq	%rdi, %rdi
	je	.L8538
	movq	32(%r15), %rax
	testq	%rax, %rax
	jne	.L8379
.L8502:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L8393
.L8378:
	cmpl	4(%rsp), %ebp
	movl	4(%rsp), %ebx
	movq	8(%rsp), %r8
	cmovg	%ebp, %ebx
	movl	%ebx, 4(%rsp)
	movq	(%r8), %rcx
	movq	%rcx, 8(%rsp)
	movq	(%r15), %r15
	jmp	.L8404
.L8393:
	movl	$0, 4(%rsp)
.L8373:
	cmpl	$1, 4(%rsp)
	movl	4(%rsp), %eax
	cmove	28(%rsp), %eax
	jmp	.L8489
.L8379:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %ebp
	jne	.L8378
	movq	8(%rsp), %rdx
	movq	32(%rdx), %rax
	cmpb	$21, 16(%rax)
	je	.L8540
.L8383:
	movq	32(%r15), %rax
	cmpb	$21, 16(%rax)
	jne	.L8393
	cmpq	$0, 96(%rax)
	je	.L8394
	testb	$8, 62(%rax)
	je	.L8393
.L8394:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L8393
	movq	8(%rsp), %r9
	movq	32(%r9), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L8393
	movq	32(%r15), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L8393
.L8400:
	movq	8(%rsp), %r10
	movq	8(%rbx), %rdi
	movq	32(%r10), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L8396
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L8400
	jmp	.L8393
.L8396:
	testq	%rbx, %rbx
	jne	.L8378
	jmp	.L8393
.L8540:
	cmpq	$0, 96(%rax)
	je	.L8384
	testb	$8, 62(%rax)
	je	.L8383
.L8384:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L8383
	movq	32(%r15), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L8383
	movq	8(%rsp), %rax
	movq	32(%rax), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L8393
.L8390:
	movq	8(%rbx), %rdi
	movq	32(%r15), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L8396
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L8390
	jmp	.L8393
.L8538:
	movq	32(%r15), %rdi
	jmp	.L8502
.L8537:
	testq	%r15, %r15
	je	.L8373
	jmp	.L8393
.L8536:
	movq	8(%rsp), %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L8284
	movq	136(%rbp), %rax
	testq	%rax, %rax
	je	.L8457
	movq	%rax, %rbp
	movl	$1, %r15d
	movl	$0, 16(%rsp)
.L8368:
	cmpq	$0, 8(%rsp)
	je	.L8541
	testq	%rbp, %rbp
	je	.L8357
	movq	8(%rsp), %rcx
	movq	32(%rcx), %rdi
	testq	%rdi, %rdi
	je	.L8542
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L8343
.L8501:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L8357
.L8342:
	movq	8(%rsp), %rcx
	cmpl	%r15d, 16(%rsp)
	cmovg	16(%rsp), %r15d
	movq	(%rcx), %r10
	movq	%r10, 8(%rsp)
	movq	(%rbp), %rbp
	jmp	.L8368
.L8357:
	xorl	%r15d, %r15d
.L8337:
	decl	%r15d
	movl	$2, 4(%rsp)
	jne	.L8284
	movl	28(%rsp), %eax
	jmp	.L8489
.L8343:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 16(%rsp)
	jne	.L8342
	movq	8(%rsp), %r8
	movq	32(%r8), %rax
	cmpb	$21, 16(%rax)
	je	.L8544
.L8347:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L8357
	cmpq	$0, 96(%rax)
	je	.L8358
	testb	$8, 62(%rax)
	je	.L8357
.L8358:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L8357
	movq	8(%rsp), %r11
	movq	32(%r11), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L8357
	movq	32(%rbp), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L8357
.L8364:
	movq	8(%rsp), %r9
	movq	8(%rbx), %rdi
	movq	32(%r9), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L8360
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L8364
	jmp	.L8357
.L8360:
	testq	%rbx, %rbx
	jne	.L8342
	jmp	.L8357
.L8544:
	cmpq	$0, 96(%rax)
	je	.L8348
	testb	$8, 62(%rax)
	je	.L8347
.L8348:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L8347
	movq	32(%rbp), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L8347
	movq	8(%rsp), %rax
	movq	32(%rax), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L8357
.L8354:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L8360
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L8354
	jmp	.L8357
.L8542:
	movq	32(%rbp), %rdi
	jmp	.L8501
.L8541:
	testq	%rbp, %rbp
	je	.L8337
	jmp	.L8357
.L8457:
	movl	28(%rsp), %r15d
	movl	%r15d, 4(%rsp)
	jmp	.L8284
.L8535:
	movq	%r15, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L8284
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L8455
	movq	%rax, %rbp
	movl	$1, 20(%rsp)
	movl	$0, 24(%rsp)
.L8329:
	testq	%r15, %r15
	je	.L8545
	testq	%rbp, %rbp
	je	.L8318
	movq	32(%r15), %rdi
	testq	%rdi, %rdi
	je	.L8546
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L8304
.L8500:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L8318
.L8303:
	movl	20(%rsp), %r10d
	movl	24(%rsp), %eax
	cmpl	%r10d, 24(%rsp)
	cmovle	%r10d, %eax
	movl	%eax, 20(%rsp)
	movq	(%rbp), %rbp
	movq	(%r15), %r15
	jmp	.L8329
.L8318:
	movl	$0, 20(%rsp)
.L8298:
	cmpl	$1, 20(%rsp)
	movl	$2, 4(%rsp)
	jne	.L8284
	jmp	.L8457
.L8304:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 24(%rsp)
	jne	.L8303
	movq	32(%r15), %rax
	cmpb	$21, 16(%rax)
	je	.L8548
.L8308:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L8318
	cmpq	$0, 96(%rax)
	je	.L8319
	testb	$8, 62(%rax)
	je	.L8318
.L8319:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L8318
	movq	32(%r15), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L8318
	movq	32(%rbp), %r9
	movq	24(%r9), %rbx
	testq	%rbx, %rbx
	je	.L8318
.L8325:
	movq	8(%rbx), %rdi
	movq	32(%r15), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L8321
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L8325
	jmp	.L8318
.L8321:
	testq	%rbx, %rbx
	jne	.L8303
	jmp	.L8318
.L8548:
	cmpq	$0, 96(%rax)
	je	.L8309
	testb	$8, 62(%rax)
	je	.L8308
.L8309:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L8308
	movq	32(%rbp), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L8308
	movq	32(%r15), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L8318
.L8315:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L8321
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L8315
	jmp	.L8318
.L8546:
	movq	32(%rbp), %rdi
	jmp	.L8500
.L8545:
	testq	%rbp, %rbp
	je	.L8298
	jmp	.L8318
.L8455:
	movl	28(%rsp), %ebp
	movl	%ebp, 4(%rsp)
	jmp	.L8284
.L8420:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmovne	4(%rsp), %eax
	jmp	.L8489
.L8407:
	movq	24(%rbp), %rsi
	movq	24(%rbx), %r15
	movl	$1, 4(%rsp)
	movq	%rsi, 96(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L8408
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 4(%rsp)
	je	.L8267
.L8408:
	testq	%r15, %r15
	je	.L8284
	cmpq	$0, 96(%rsp)
	je	.L8284
	cmpq	96(%rsp), %r15
	je	.L8284
	movq	112(%r15), %rcx
	movq	96(%rsp), %rbp
	testq	%rcx, %rcx
	movq	112(%rbp), %rsi
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L8411
	movq	104(%r15), %r11
	cmpb	$25, 16(%r11)
	je	.L8549
.L8412:
	movl	$1, %r8d
.L8411:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L8413
	movq	96(%rsp), %rax
	movq	104(%rax), %r9
	cmpb	$25, 16(%r9)
	je	.L8550
.L8414:
	movl	$1, %ecx
.L8413:
	testb	%r8b, %r8b
	jne	.L8284
	testb	%cl, %cl
	jne	.L8284
	testb	%dil, %dil
	je	.L8480
	testb	%dl, %dl
.L8488:
	jne	.L8284
.L8419:
	movl	$0, 4(%rsp)
	jmp	.L8284
.L8480:
	testb	%dl, %dl
	jne	.L8419
	movq	96(%rsp), %rdx
	movq	104(%r15), %rdi
	movq	104(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L8419
	movq	112(%r15), %rdi
	movq	96(%rsp), %r15
	movq	112(%r15), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L8488
.L8550:
	cmpb	$25, 16(%rsi)
	jne	.L8414
	jmp	.L8413
.L8549:
	cmpb	$25, 16(%rcx)
	jne	.L8412
	jmp	.L8411
	.p2align 6,,7
.L8490:
	movl	$1, 4(%rsp)
	jmp	.L8272
.L8534:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L8281
.L8533:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L8280
.L8531:
	movzbl	17(%rbp), %esi
	movzwl	60(%rbp), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L8276
.L8530:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L8275
.L8529:
	testb	$2, 62(%rax)
	je	.L8274
	movq	24(%rax), %r9
	testq	%r9, %r9
	cmovne	%r9, %rbp
	jmp	.L8274
.L8528:
	testb	$2, 62(%rbx)
	je	.L8273
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L8273
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L8273
	.p2align 6,,7
.L8526:
	cmpq	%rdx, %rax
	je	.L8098
	movq	24(%rax), %r10
	testq	%r10, %r10
	movq	%r10, 72(%rsp)
	je	.L8098
.L8263:
	movq	72(%rsp), %r11
	movq	%rdx, %rbp
	movq	8(%r11), %rbx
	cmpq	%rdx, %rbx
	je	.L8105
	testq	%rbx, %rbx
	je	.L8105
	testq	%rdx, %rdx
	je	.L8105
	movzbl	16(%rbx), %ecx
	testb	%cl, %cl
	je	.L8105
	movzbl	16(%rdx), %eax
	testb	%al, %al
	jne	.L8104
.L8105:
	movl	$1, 44(%rsp)
.L8106:
	movl	44(%rsp), %ecx
	testl	%ecx, %ecx
	jne	.L8551
.L8101:
	movq	72(%rsp), %rdi
	movq	(%rdi), %rsi
	testq	%rsi, %rsi
	movq	%rsi, 72(%rsp)
	jne	.L8263
	jmp	.L8098
.L8551:
	movq	80(%rsp), %r8
	movq	%rdx, 32(%r8)
	jmp	.L8503
.L8104:
	cmpb	$6, %cl
	je	.L8552
.L8107:
	cmpb	$6, %al
	je	.L8553
.L8108:
	cmpb	$10, %cl
	je	.L8554
.L8109:
	cmpb	$10, 16(%rbp)
	je	.L8555
.L8110:
	cmpq	%rbp, %rbx
	je	.L8497
	movzbl	16(%rbx), %edi
	cmpb	16(%rbp), %dil
	je	.L8556
.L8499:
	movl	$0, 44(%rsp)
.L8484:
	movq	32(%r13), %rdx
	jmp	.L8106
.L8556:
	movzbl	17(%rbx), %esi
	movzbl	62(%rbx), %ecx
	movl	%esi, %edx
	shrb	$5, %cl
	shrb	$3, %sil
	shrb	$4, %dl
	andl	$1, %esi
	andl	$1, %ecx
	andl	$1, %edx
	addl	%esi, %esi
	sall	$2, %ecx
	orl	%esi, %edx
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L8557
.L8114:
	movzbl	17(%rbp), %r9d
	movzbl	62(%rbp), %r8d
	leal	0(,%rcx,8), %esi
	orl	%edx, %esi
	xorl	%ecx, %ecx
	movl	%r9d, %edx
	shrb	$5, %r8b
	shrb	$3, %r9b
	shrb	$4, %dl
	andl	$1, %r9d
	andl	$1, %r8d
	andl	$1, %edx
	addl	%r9d, %r9d
	sall	$2, %r8d
	orl	%r9d, %edx
	orl	%r8d, %edx
	cmpb	$20, %dil
	je	.L8558
.L8115:
	leal	0(,%rcx,8), %edi
	orl	%edi, %edx
	cmpl	%edx, %esi
	jne	.L8499
	movq	128(%rbp), %rax
	cmpq	%rax, 128(%rbx)
	je	.L8497
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	*targetm+264(%rip)
	testl	%eax, %eax
	movl	%eax, 124(%rsp)
	je	.L8499
	movl	$0, 44(%rsp)
	movzbl	16(%rbx), %eax
	cmpl	$18, %eax
	je	.L8241
	cmpl	$18, %eax
	ja	.L8258
	cmpl	$13, %eax
	je	.L8119
.L8118:
	cmpl	$2, 124(%rsp)
	jne	.L8484
	cmpl	$1, 44(%rsp)
	jne	.L8484
	movl	$2, 44(%rsp)
	jmp	.L8484
.L8119:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L8120
	call	comptypes
.L8487:
	movl	%eax, 44(%rsp)
	jmp	.L8118
.L8120:
	movl	$1, 44(%rsp)
	jmp	.L8118
.L8258:
	cmpl	$20, %eax
	je	.L8254
	cmpl	$23, %eax
	jne	.L8118
	movl	$1, 68(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L8123
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 68(%rsp)
	je	.L8118
.L8123:
	movq	24(%rbx), %rdx
	testq	%rdx, %rdx
	movq	%rdx, 48(%rsp)
	movq	24(%rbp), %r15
	je	.L8559
	testq	%r15, %r15
	je	.L8560
	movl	$1, 44(%rsp)
	xorl	%ebp, %ebp
.L8238:
	cmpq	$0, 48(%rsp)
	je	.L8561
	testq	%r15, %r15
	je	.L8227
	movq	48(%rsp), %r10
	movq	32(%r10), %rdi
	testq	%rdi, %rdi
	je	.L8562
	movq	32(%r15), %rax
	testq	%rax, %rax
	jne	.L8213
.L8496:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L8227
.L8212:
	cmpl	44(%rsp), %ebp
	movl	44(%rsp), %ebx
	movq	48(%rsp), %rdi
	cmovg	%ebp, %ebx
	movl	%ebx, 44(%rsp)
	movq	(%rdi), %r10
	movq	%r10, 48(%rsp)
	movq	(%r15), %r15
	jmp	.L8238
.L8227:
	movl	$0, 44(%rsp)
.L8207:
	cmpl	$1, 44(%rsp)
	movl	44(%rsp), %eax
	cmove	68(%rsp), %eax
	jmp	.L8487
.L8213:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %ebp
	jne	.L8212
	movq	48(%rsp), %rdi
	movq	32(%rdi), %rax
	cmpb	$21, 16(%rax)
	je	.L8564
.L8217:
	movq	32(%r15), %rax
	cmpb	$21, 16(%rax)
	jne	.L8227
	cmpq	$0, 96(%rax)
	je	.L8228
	testb	$8, 62(%rax)
	je	.L8227
.L8228:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L8227
	movq	48(%rsp), %r8
	movq	32(%r8), %rcx
	movq	32(%rcx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L8227
	movq	32(%r15), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L8227
.L8234:
	movq	48(%rsp), %r9
	movq	8(%rbx), %rdi
	movq	32(%r9), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L8230
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L8234
	jmp	.L8227
.L8230:
	testq	%rbx, %rbx
	jne	.L8212
	jmp	.L8227
.L8564:
	cmpq	$0, 96(%rax)
	je	.L8218
	testb	$8, 62(%rax)
	je	.L8217
.L8218:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L8217
	movq	32(%r15), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L8217
	movq	48(%rsp), %rax
	movq	32(%rax), %r11
	movq	24(%r11), %rbx
	testq	%rbx, %rbx
	je	.L8227
.L8224:
	movq	8(%rbx), %rdi
	movq	32(%r15), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L8230
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L8224
	jmp	.L8227
.L8562:
	movq	32(%r15), %rdi
	jmp	.L8496
.L8561:
	testq	%r15, %r15
	je	.L8207
	jmp	.L8227
.L8560:
	movq	48(%rsp), %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L8118
	movq	136(%rbp), %rax
	testq	%rax, %rax
	je	.L8453
	movq	%rax, %rbp
	movl	$1, %r15d
	movl	$0, 56(%rsp)
.L8202:
	cmpq	$0, 48(%rsp)
	je	.L8565
	testq	%rbp, %rbp
	je	.L8191
	movq	48(%rsp), %r9
	movq	32(%r9), %rdi
	testq	%rdi, %rdi
	je	.L8566
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L8177
.L8495:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L8191
.L8176:
	movq	48(%rsp), %r9
	cmpl	%r15d, 56(%rsp)
	cmovg	56(%rsp), %r15d
	movq	(%r9), %rsi
	movq	%rsi, 48(%rsp)
	movq	(%rbp), %rbp
	jmp	.L8202
.L8191:
	xorl	%r15d, %r15d
.L8171:
	decl	%r15d
	movl	$2, 44(%rsp)
	jne	.L8118
.L8454:
	movl	68(%rsp), %eax
	jmp	.L8487
.L8177:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 56(%rsp)
	jne	.L8176
	movq	48(%rsp), %rdi
	movq	32(%rdi), %rax
	cmpb	$21, 16(%rax)
	je	.L8568
.L8181:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L8191
	cmpq	$0, 96(%rax)
	je	.L8192
	testb	$8, 62(%rax)
	je	.L8191
.L8192:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L8191
	movq	48(%rsp), %r11
	movq	32(%r11), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L8191
	movq	32(%rbp), %rcx
	movq	24(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L8191
.L8198:
	movq	48(%rsp), %r8
	movq	8(%rbx), %rdi
	movq	32(%r8), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L8194
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L8198
	jmp	.L8191
.L8194:
	testq	%rbx, %rbx
	jne	.L8176
	jmp	.L8191
.L8568:
	cmpq	$0, 96(%rax)
	je	.L8182
	testb	$8, 62(%rax)
	je	.L8181
.L8182:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L8181
	movq	32(%rbp), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L8181
	movq	48(%rsp), %rax
	movq	32(%rax), %r10
	movq	24(%r10), %rbx
	testq	%rbx, %rbx
	je	.L8191
.L8188:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L8194
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L8188
	jmp	.L8191
.L8566:
	movq	32(%rbp), %rdi
	jmp	.L8495
.L8565:
	testq	%rbp, %rbp
	je	.L8171
	jmp	.L8191
.L8453:
	movl	68(%rsp), %r15d
	movl	%r15d, 44(%rsp)
	jmp	.L8118
.L8559:
	movq	%r15, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L8118
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L8454
	movq	%rax, %rbp
	movl	$1, 60(%rsp)
	movl	$0, 64(%rsp)
.L8163:
	testq	%r15, %r15
	je	.L8569
	testq	%rbp, %rbp
	je	.L8152
	movq	32(%r15), %rdi
	testq	%rdi, %rdi
	je	.L8570
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L8138
.L8494:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L8152
.L8137:
	movl	60(%rsp), %r8d
	movl	64(%rsp), %esi
	cmpl	%r8d, 64(%rsp)
	cmovle	%r8d, %esi
	movl	%esi, 60(%rsp)
	movq	(%rbp), %rbp
	movq	(%r15), %r15
	jmp	.L8163
.L8152:
	movl	$0, 60(%rsp)
.L8132:
	cmpl	$1, 60(%rsp)
	movl	$2, 44(%rsp)
	jne	.L8118
	movl	68(%rsp), %ebp
	movl	%ebp, 44(%rsp)
	jmp	.L8118
.L8138:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 64(%rsp)
	jne	.L8137
	movq	32(%r15), %rax
	cmpb	$21, 16(%rax)
	je	.L8572
.L8142:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L8152
	cmpq	$0, 96(%rax)
	je	.L8153
	testb	$8, 62(%rax)
	je	.L8152
.L8153:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L8152
	movq	32(%r15), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L8152
	movq	32(%rbp), %rcx
	movq	24(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L8152
.L8159:
	movq	8(%rbx), %rdi
	movq	32(%r15), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L8155
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L8159
	jmp	.L8152
.L8155:
	testq	%rbx, %rbx
	jne	.L8137
	jmp	.L8152
.L8572:
	cmpq	$0, 96(%rax)
	je	.L8143
	testb	$8, 62(%rax)
	je	.L8142
.L8143:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L8142
	movq	32(%rbp), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L8142
	movq	32(%r15), %r10
	movq	24(%r10), %rbx
	testq	%rbx, %rbx
	je	.L8152
.L8149:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L8155
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L8149
	jmp	.L8152
.L8570:
	movq	32(%rbp), %rdi
	jmp	.L8494
.L8569:
	testq	%rbp, %rbp
	je	.L8132
	jmp	.L8152
.L8254:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmovne	44(%rsp), %eax
	jmp	.L8487
.L8241:
	movq	24(%rbp), %r11
	movq	24(%rbx), %r15
	movl	$1, 44(%rsp)
	movq	%r11, 112(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L8242
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 44(%rsp)
	je	.L8482
.L8242:
	testq	%r15, %r15
	je	.L8118
	cmpq	$0, 112(%rsp)
	je	.L8118
	cmpq	112(%rsp), %r15
	je	.L8118
	movq	112(%r15), %rcx
	movq	112(%rsp), %rbp
	testq	%rcx, %rcx
	movq	112(%rbp), %rsi
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L8245
	movq	104(%r15), %r9
	cmpb	$25, 16(%r9)
	je	.L8573
.L8246:
	movl	$1, %r8d
.L8245:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L8247
	movq	112(%rsp), %rax
	movq	104(%rax), %r10
	cmpb	$25, 16(%r10)
	je	.L8574
.L8248:
	movl	$1, %ecx
.L8247:
	testb	%r8b, %r8b
	jne	.L8118
	testb	%cl, %cl
	jne	.L8118
	testb	%dil, %dil
	je	.L8470
	testb	%dl, %dl
.L8486:
	jne	.L8118
.L8253:
	movl	$0, 44(%rsp)
	jmp	.L8118
.L8470:
	testb	%dl, %dl
	jne	.L8253
	movq	112(%rsp), %rdx
	movq	104(%r15), %rdi
	movq	104(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L8253
	movq	112(%r15), %rdi
	movq	112(%rsp), %r15
	movq	112(%r15), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L8486
.L8574:
	cmpb	$25, 16(%rsi)
	jne	.L8248
	jmp	.L8247
.L8573:
	cmpb	$25, 16(%rcx)
	jne	.L8246
	jmp	.L8245
.L8482:
	movq	32(%r13), %rdx
	jmp	.L8101
	.p2align 6,,7
.L8497:
	movl	$1, 44(%rsp)
	jmp	.L8484
.L8558:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L8115
.L8557:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L8114
	.p2align 6,,7
.L8555:
	movzbl	17(%rbp), %esi
	movzwl	60(%rbp), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L8110
.L8554:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L8109
.L8553:
	testb	$2, 62(%rdx)
	je	.L8108
	movq	24(%rdx), %r15
	testq	%r15, %r15
	cmovne	%r15, %rbp
	jmp	.L8108
.L8552:
	testb	$2, 62(%rbx)
	je	.L8107
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L8107
	movq	%rdi, %rbx
	movzbl	16(%rdi), %ecx
	jmp	.L8107
	.p2align 6,,7
.L8525:
	movq	128(%rsp), %rdi
	movq	%r12, %rsi
.L8512:
	call	build_function_type
	jmp	.L8511
.L8524:
	movq	128(%rsp), %rdi
	movq	24(%rbp), %rsi
	jmp	.L8512
.L8523:
	testq	%r12, %r12
	jne	.L8084
	jmp	.L8509
.L8522:
	testq	%r13, %r13
	jne	.L8082
	jmp	.L8431
	.p2align 6,,7
.L8481:
	movq	%rbx, %rdi
.L8042:
	cmpl	$8, %r13d
	movq	%rbp, %rsi
	je	.L8575
.L8044:
	call	common_type
	cmpl	$8, %r12d
	je	.L8576
.L8046:
	cmpl	$8, %r13d
	jne	.L8048
	cmpq	%rax, 8(%rbp)
	je	.L8509
.L8048:
	movq	%rax, %rdi
	call	build_complex_type
	jmp	.L8511
.L8576:
	cmpq	%rax, 8(%rbx)
	jne	.L8046
	jmp	.L8431
	.p2align 6,,7
.L8575:
	movq	8(%rbp), %rsi
	jmp	.L8044
.L8459:
	movq	8(%rbx), %rdi
	jmp	.L8042
.L8515:
	movzwl	60(%rbp), %edi
	movl	$1, %esi
	andl	$511, %edi
	call	type_for_size
	movq	%rax, %rbp
	movzbl	16(%rax), %eax
	jmp	.L8038
.L8514:
	movzwl	60(%rbx), %edi
	movl	$1, %esi
	andl	$511, %edi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L8037
	.p2align 6,,7
.L8033:
	movq	%rbx, %rax
	movq	144(%rsp), %rbp
	movq	152(%rsp), %r12
	movq	136(%rsp), %rbx
	movq	160(%rsp), %r13
	movq	168(%rsp), %r14
	movq	176(%rsp), %r15
	addq	$184, %rsp
	ret
	.p2align 6,,7
.L8513:
	movq	%rsi, %rbx
	jmp	.L8033
.LFE16:
.Lfe16:
	.size	common_type,.Lfe16-common_type
	.align 2
	.p2align 4,,15
.globl comptypes
	.type	comptypes,@function
comptypes:
.LFB17:
	subq	$56, %rsp
.LCFI67:
	cmpq	%rsi, %rdi
	movq	%rbx, 8(%rsp)
.LCFI68:
	movq	%rbp, 16(%rsp)
.LCFI69:
	movq	%r12, 24(%rsp)
.LCFI70:
	movq	%r13, 32(%rsp)
.LCFI71:
	movq	%r14, 40(%rsp)
.LCFI72:
	movq	%r15, 48(%rsp)
.LCFI73:
	movq	%rdi, %rbx
	movq	%rsi, %rbp
	je	.L8757
	testq	%rdi, %rdi
	je	.L8757
	testq	%rsi, %rsi
	je	.L8757
	movzbl	16(%rdi), %edx
	testb	%dl, %dl
	je	.L8757
	movzbl	16(%rsi), %eax
	testb	%al, %al
	je	.L8757
	cmpb	$6, %dl
	je	.L8762
.L8580:
	cmpb	$6, %al
	je	.L8763
.L8581:
	cmpb	$10, %dl
	je	.L8764
.L8582:
	cmpb	$10, 16(%rbp)
	je	.L8765
.L8583:
	cmpq	%rbp, %rbx
	movl	$1, %eax
	je	.L8577
	movzbl	16(%rbx), %ecx
	cmpb	16(%rbp), %cl
	je	.L8585
	xorl	%eax, %eax
	.p2align 4,,7
.L8577:
	movq	8(%rsp), %rbx
	movq	16(%rsp), %rbp
	movq	24(%rsp), %r12
	movq	32(%rsp), %r13
	movq	40(%rsp), %r14
	movq	48(%rsp), %r15
	addq	$56, %rsp
	ret
.L8585:
	movzbl	17(%rbx), %edi
	movzbl	62(%rbx), %esi
	movl	%edi, %edx
	shrb	$5, %sil
	shrb	$3, %dil
	shrb	$4, %dl
	andl	$1, %edi
	andl	$1, %esi
	andl	$1, %edx
	addl	%edi, %edi
	sall	$2, %esi
	orl	%edi, %edx
	orl	%esi, %edx
	xorl	%esi, %esi
	cmpb	$20, %cl
	je	.L8766
.L8587:
	movzbl	17(%rbp), %r9d
	movzbl	62(%rbp), %r8d
	leal	0(,%rsi,8), %edi
	orl	%edx, %edi
	xorl	%esi, %esi
	movl	%r9d, %edx
	shrb	$5, %r8b
	shrb	$3, %r9b
	shrb	$4, %dl
	andl	$1, %r9d
	andl	$1, %r8d
	andl	$1, %edx
	addl	%r9d, %r9d
	sall	$2, %r8d
	orl	%r9d, %edx
	orl	%r8d, %edx
	cmpb	$20, %cl
	je	.L8767
.L8588:
	leal	0(,%rsi,8), %ecx
	xorl	%eax, %eax
	orl	%ecx, %edx
	cmpl	%edx, %edi
	jne	.L8577
	movq	128(%rbp), %rdx
	cmpq	%rdx, 128(%rbx)
	je	.L8757
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	*targetm+264(%rip)
	movl	%eax, %r15d
	xorl	%eax, %eax
	testl	%r15d, %r15d
	je	.L8577
	movzbl	16(%rbx), %eax
	xorl	%r14d, %r14d
	cmpl	$18, %eax
	je	.L8715
	cmpl	$18, %eax
	ja	.L8732
	cmpl	$13, %eax
	je	.L8592
.L8591:
	cmpl	$2, %r15d
	je	.L8768
.L8734:
	movl	%r14d, %eax
	jmp	.L8577
.L8768:
	cmpl	$1, %r14d
	cmove	%r15d, %r14d
	jmp	.L8734
.L8592:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	cmpq	%rsi, %rdi
	je	.L8593
	call	comptypes
	movl	%eax, %r14d
	jmp	.L8591
.L8593:
	movl	$1, %r14d
	jmp	.L8591
	.p2align 6,,7
.L8732:
	cmpl	$20, %eax
	je	.L8728
	cmpl	$23, %eax
	jne	.L8591
	movl	$1, 4(%rsp)
	movq	8(%rbp), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L8597
	call	comptypes
	testl	%eax, %eax
	movl	%eax, 4(%rsp)
	je	.L8591
.L8597:
	movq	24(%rbx), %r13
	movq	24(%rbp), %r12
	testq	%r13, %r13
	je	.L8769
	testq	%r12, %r12
	je	.L8770
	movl	$1, %r14d
	xorl	%ebp, %ebp
.L8712:
	testq	%r13, %r13
	je	.L8771
	testq	%r12, %r12
	je	.L8701
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L8772
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L8687
.L8761:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L8701
.L8686:
	movq	(%r13), %r13
	movq	(%r12), %r12
	cmpl	%r14d, %ebp
	cmovg	%ebp, %r14d
	jmp	.L8712
.L8701:
	xorl	%r14d, %r14d
.L8681:
	cmpl	$1, %r14d
	cmove	4(%rsp), %r14d
	jmp	.L8591
	.p2align 6,,7
.L8687:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %ebp
	jne	.L8686
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L8774
.L8691:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L8701
	cmpq	$0, 96(%rax)
	je	.L8702
	testb	$8, 62(%rax)
	je	.L8701
.L8702:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L8701
	movq	32(%r13), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L8701
	movq	32(%r12), %r11
	movq	24(%r11), %rbx
	testq	%rbx, %rbx
	je	.L8701
.L8708:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L8704
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L8708
	jmp	.L8701
.L8704:
	testq	%rbx, %rbx
	jne	.L8686
	jmp	.L8701
.L8774:
	cmpq	$0, 96(%rax)
	je	.L8692
	testb	$8, 62(%rax)
	je	.L8691
.L8692:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L8691
	movq	32(%r12), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L8691
	movq	32(%r13), %r10
	movq	24(%r10), %rbx
	testq	%rbx, %rbx
	je	.L8701
.L8698:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L8704
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L8698
	jmp	.L8701
.L8772:
	movq	32(%r12), %rdi
	jmp	.L8761
.L8771:
	testq	%r12, %r12
	je	.L8681
	jmp	.L8701
.L8770:
	movq	%r13, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L8591
	movq	136(%rbp), %rax
	testq	%rax, %rax
	je	.L8745
	movq	%rax, %rbp
	movl	$1, %r12d
	xorl	%r14d, %r14d
.L8676:
	testq	%r13, %r13
	je	.L8775
	testq	%rbp, %rbp
	je	.L8665
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	je	.L8776
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L8651
.L8759:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L8665
.L8650:
	movq	(%r13), %r13
	movq	(%rbp), %rbp
	cmpl	%r12d, %r14d
	cmovg	%r14d, %r12d
	jmp	.L8676
.L8665:
	xorl	%r12d, %r12d
.L8645:
	movl	$2, %r14d
	decl	%r12d
.L8760:
	jne	.L8591
.L8745:
	movl	4(%rsp), %r14d
	jmp	.L8591
.L8651:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r14d
	jne	.L8650
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	je	.L8778
.L8655:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L8665
	cmpq	$0, 96(%rax)
	je	.L8666
	testb	$8, 62(%rax)
	je	.L8665
.L8666:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L8665
	movq	32(%r13), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L8665
	movq	32(%rbp), %rcx
	movq	24(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L8665
.L8672:
	movq	8(%rbx), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L8668
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L8672
	jmp	.L8665
.L8668:
	testq	%rbx, %rbx
	jne	.L8650
	jmp	.L8665
.L8778:
	cmpq	$0, 96(%rax)
	je	.L8656
	testb	$8, 62(%rax)
	je	.L8655
.L8656:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L8655
	movq	32(%rbp), %r8
	movq	32(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L8655
	movq	32(%r13), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L8665
.L8662:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L8668
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L8662
	jmp	.L8665
.L8776:
	movq	32(%rbp), %rdi
	jmp	.L8759
.L8775:
	testq	%rbp, %rbp
	je	.L8645
	jmp	.L8665
.L8769:
	movq	%r12, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L8591
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L8745
	movq	%rax, %rbp
	movl	$1, %r13d
	xorl	%r14d, %r14d
.L8637:
	testq	%r12, %r12
	je	.L8779
	testq	%rbp, %rbp
	je	.L8626
	movq	32(%r12), %rdi
	testq	%rdi, %rdi
	je	.L8780
	movq	32(%rbp), %rax
	testq	%rax, %rax
	jne	.L8612
.L8758:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L8626
.L8611:
	movq	(%r12), %r12
	movq	(%rbp), %rbp
	cmpl	%r13d, %r14d
	cmovg	%r14d, %r13d
	jmp	.L8637
.L8626:
	xorl	%r13d, %r13d
.L8606:
	movl	$2, %r14d
	decl	%r13d
	jmp	.L8760
.L8612:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r14d
	jne	.L8611
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	je	.L8782
.L8616:
	movq	32(%rbp), %rax
	cmpb	$21, 16(%rax)
	jne	.L8626
	cmpq	$0, 96(%rax)
	je	.L8627
	testb	$8, 62(%rax)
	je	.L8626
.L8627:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L8626
	movq	32(%r12), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L8626
	movq	32(%rbp), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L8626
.L8633:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L8629
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L8633
	jmp	.L8626
.L8629:
	testq	%rbx, %rbx
	jne	.L8611
	jmp	.L8626
.L8782:
	cmpq	$0, 96(%rax)
	je	.L8617
	testb	$8, 62(%rax)
	je	.L8616
.L8617:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L8616
	movq	32(%rbp), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L8616
	movq	32(%r12), %r10
	movq	24(%r10), %rbx
	testq	%rbx, %rbx
	je	.L8626
.L8623:
	movq	8(%rbx), %rdi
	movq	32(%rbp), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L8629
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L8623
	jmp	.L8626
.L8780:
	movq	32(%rbp), %rdi
	jmp	.L8758
.L8779:
	testq	%rbp, %rbp
	je	.L8606
	jmp	.L8626
.L8728:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmove	%eax, %r14d
	jmp	.L8591
	.p2align 6,,7
.L8715:
	movq	8(%rbx), %rdi
	movq	8(%rbp), %rsi
	movl	$1, %r14d
	movq	24(%rbx), %r12
	movq	24(%rbp), %r13
	cmpq	%rsi, %rdi
	je	.L8716
	call	comptypes
	movl	%eax, %r14d
	xorl	%eax, %eax
	testl	%r14d, %r14d
	je	.L8577
.L8716:
	testq	%r12, %r12
	je	.L8591
	testq	%r13, %r13
	je	.L8591
	cmpq	%r13, %r12
	je	.L8591
	movq	112(%r12), %rcx
	movq	112(%r13), %rsi
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L8719
	movq	104(%r12), %rbp
	cmpb	$25, 16(%rbp)
	je	.L8783
.L8720:
	movl	$1, %r8d
.L8719:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L8721
	movq	104(%r13), %r9
	cmpb	$25, 16(%r9)
	je	.L8784
.L8722:
	movl	$1, %ecx
.L8721:
	testb	%r8b, %r8b
	jne	.L8591
	testb	%cl, %cl
	jne	.L8591
	testb	%dil, %dil
	je	.L8755
	testb	%dl, %dl
.L8756:
	jne	.L8591
.L8727:
	xorl	%r14d, %r14d
	jmp	.L8591
.L8755:
	testb	%dl, %dl
	jne	.L8727
	movq	104(%r12), %rdi
	movq	104(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L8727
	movq	112(%r12), %rdi
	movq	112(%r13), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L8756
.L8784:
	cmpb	$25, 16(%rsi)
	jne	.L8722
	jmp	.L8721
.L8783:
	cmpb	$25, 16(%rcx)
	jne	.L8720
	jmp	.L8719
	.p2align 6,,7
.L8757:
	movl	$1, %eax
	jmp	.L8577
.L8767:
	cmpq	$0, 8(%rbp)
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L8588
.L8766:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L8587
.L8765:
	movzbl	17(%rbp), %esi
	movzwl	60(%rbp), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbp
	jmp	.L8583
.L8764:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L8582
.L8763:
	testb	$2, 62(%rbp)
	je	.L8581
	movq	24(%rbp), %rcx
	testq	%rcx, %rcx
	cmovne	%rcx, %rbp
	jmp	.L8581
.L8762:
	testb	$2, 62(%rdi)
	je	.L8580
	movq	24(%rdi), %rdi
	testq	%rdi, %rdi
	je	.L8580
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L8580
.LFE17:
.Lfe17:
	.size	comptypes,.Lfe17-comptypes
	.section	.rodata.str1.32
	.align 32
.LC89:
	.string	"sizeof applied to an incomplete type"
	.section	.rodata.str1.1
.LC88:
	.string	"sizeof applied to a void type"
	.section	.rodata.str1.32
	.align 32
.LC87:
	.string	"sizeof applied to a function type"
	.text
	.align 2
	.p2align 4,,15
.globl c_sizeof
	.type	c_sizeof,@function
c_sizeof:
.LFB18:
	pushq	%rbx
.LCFI74:
	movzbl	16(%rdi), %eax
	movq	%rdi, %rbx
	cmpl	$23, %eax
	je	.L9117
	cmpl	$5, %eax
	je	.L9118
	testl	%eax, %eax
	jne	.L9109
.L9115:
	movq	global_trees+128(%rip), %rdx
.L9104:
	movq	c_global_trees+32(%rip), %rsi
	movl	$115, %edi
	call	build1
	popq	%rbx
	movq	%rax, %rdi
	jmp	fold
	.p2align 6,,7
.L9109:
	cmpq	$0, 32(%rdi)
	jne	.L9111
	movl	$.LC89, %edi
	xorl	%eax, %eax
	call	error
	movq	global_trees+120(%rip), %rdx
	jmp	.L9104
	.p2align 6,,7
.L9111:
	movq	integer_types(%rip), %rdx
	xorl	%esi, %esi
	movzwl	60(%rdx), %edi
	shrq	$3, %rdi
	andl	$63, %edi
	call	size_int_wide
	movq	40(%rbx), %rsi
	movl	$63, %edi
	movq	%rax, %rdx
	call	size_binop
	movq	%rax, %rdx
	jmp	.L9104
	.p2align 6,,7
.L9118:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	jne	.L9107
	movl	warn_pointer_arith(%rip), %eax
	testl	%eax, %eax
	je	.L9115
.L9107:
	movl	$.LC88, %edi
.L9116:
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L9115
	.p2align 6,,7
.L9117:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	jne	.L9103
	movl	warn_pointer_arith(%rip), %eax
	testl	%eax, %eax
	je	.L9115
.L9103:
	movl	$.LC87, %edi
	jmp	.L9116
.LFE18:
.Lfe18:
	.size	c_sizeof,.Lfe18-c_sizeof
	.align 2
	.p2align 4,,15
.globl c_sizeof_nowarn
	.type	c_sizeof_nowarn,@function
c_sizeof_nowarn:
.LFB19:
	pushq	%rbx
.LCFI75:
	movzbl	16(%rdi), %eax
	movq	%rdi, %rbx
	cmpl	$23, %eax
	je	.L9121
	cmpl	$5, %eax
	je	.L9121
	testl	%eax, %eax
	jne	.L9120
.L9121:
	movq	global_trees+128(%rip), %rdx
.L9122:
	movq	c_global_trees+32(%rip), %rsi
	movl	$115, %edi
	call	build1
	popq	%rbx
	movq	%rax, %rdi
	jmp	fold
	.p2align 6,,7
.L9120:
	cmpq	$0, 32(%rdi)
	jne	.L9123
	movq	global_trees+120(%rip), %rdx
	jmp	.L9122
.L9123:
	movq	integer_types(%rip), %rdx
	xorl	%esi, %esi
	movzwl	60(%rdx), %edi
	shrq	$3, %rdi
	andl	$63, %edi
	call	size_int_wide
	movq	40(%rbx), %rsi
	movl	$63, %edi
	movq	%rax, %rdx
	call	size_binop
	movq	%rax, %rdx
	jmp	.L9122
.LFE19:
.Lfe19:
	.size	c_sizeof_nowarn,.Lfe19-c_sizeof_nowarn
	.align 2
	.p2align 4,,15
.globl c_size_in_bytes
	.type	c_size_in_bytes,@function
c_size_in_bytes:
.LFB20:
	pushq	%rbx
.LCFI76:
	movzbl	16(%rdi), %edx
	movq	%rdi, %rbx
	movzbl	%dl, %eax
	cmpl	$23, %eax
	je	.L9133
	cmpl	$5, %eax
	je	.L9133
	testl	%eax, %eax
	je	.L9133
	cmpq	$0, 32(%rdi)
	jne	.L9130
	cmpb	$5, %dl
	je	.L9130
	movl	$.LC23, %edi
	xorl	%eax, %eax
	call	error
	.p2align 4,,7
.L9133:
	popq	%rbx
	movq	global_trees+128(%rip), %rax
	ret
	.p2align 6,,7
.L9130:
	movq	integer_types(%rip), %rdx
	xorl	%esi, %esi
	movzwl	60(%rdx), %edi
	shrq	$3, %rdi
	andl	$63, %edi
	call	size_int_wide
	movq	40(%rbx), %rsi
	movl	$63, %edi
	popq	%rbx
	movq	%rax, %rdx
	jmp	size_binop
.LFE20:
.Lfe20:
	.size	c_size_in_bytes,.Lfe20-c_size_in_bytes
	.align 2
	.p2align 4,,15
.globl decl_constant_value
	.type	decl_constant_value,@function
decl_constant_value:
.LFB21:
	cmpq	$0, current_function_decl(%rip)
	je	.L9135
	movzbl	17(%rdi), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L9136
.L9135:
	movq	%rdi, %rax
.L9134:
	ret
	.p2align 6,,7
.L9136:
	movq	104(%rdi), %rax
	testq	%rax, %rax
	je	.L9135
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L9135
	testb	$2, 17(%rax)
	je	.L9135
	cmpb	$46, %dl
	jne	.L9134
	jmp	.L9135
.LFE21:
.Lfe21:
	.size	decl_constant_value,.Lfe21-decl_constant_value
	.align 2
	.p2align 4,,15
.globl default_conversion
	.type	default_conversion,@function
default_conversion:
.LFB22:
	pushq	%r12
.LCFI77:
	pushq	%rbp
.LCFI78:
	pushq	%rbx
.LCFI79:
	movq	8(%rdi), %rbp
	movq	%rdi, %rbx
	movzbl	16(%rbp), %r12d
	movq	%rbp, %rax
	cmpl	$23, %r12d
	je	.L9206
	cmpl	$18, %r12d
	je	.L9206
	movzbl	16(%rdi), %edx
	cmpb	$32, %dl
	je	.L9244
	movl	optimize(%rip), %ecx
	testl	%ecx, %ecx
	je	.L9208
	cmpb	$34, %dl
	je	.L9245
.L9208:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L9242
	cmpb	$115, %dl
	je	.L9246
.L9217:
	movzbl	%dl, %edi 
	movzbl	tree_code_type(%rdi), %eax
	cmpb	$60, %al
	je	.L9222
	cmpb	$49, %al
	je	.L9222
	cmpb	$50, %al
	je	.L9222
	cmpb	$101, %al
	je	.L9222
.L9221:
	cmpl	$10, %r12d
	je	.L9247
	cmpb	$39, %dl
	je	.L9248
.L9230:
	movq	%rbp, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L9235
	testb	$32, 17(%rbp)
	je	.L9236
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L9237
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%rbp), %r12d
	movzwl	60(%rdx), %ebp
	andl	$511, %r12d
	andl	$511, %ebp
	cmpl	%ebp, %r12d
	je	.L9237
.L9236:
	movq	integer_types+40(%rip), %rdi
.L9243:
	movq	%rbx, %rsi
	popq	%rbx
	popq	%rbp
	popq	%r12
	jmp	convert
.L9237:
	movq	integer_types+48(%rip), %rdi
	jmp	.L9243
.L9235:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L9238
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L9238
	movq	global_trees+192(%rip), %rsi
	cmpq	%rsi, 128(%rbp)
	je	.L9249
.L9238:
	cmpl	$5, %r12d
	je	.L9250
	movq	%rbx, %rax
.L9204:
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret
.L9250:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L9204
.L9249:
	movq	global_trees+200(%rip), %rdi
	jmp	.L9243
	.p2align 6,,7
.L9248:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L9230
	movq	integer_types+40(%rip), %rcx
	movq	40(%rdx), %rdi
	movzwl	60(%rcx), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L9230
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L9236
	testb	$32, 17(%rbp)
	jne	.L9237
	jmp	.L9236
	.p2align 6,,7
.L9247:
	movq	integer_types+40(%rip), %r11
	movzwl	60(%rbp), %edx
	movl	flag_traditional(%rip), %r10d
	movzwl	60(%r11), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r10d, %r10d
	jne	.L9229
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L9228
.L9229:
	testb	$32, 17(%rbp)
	movl	$1, %eax
	cmovne	%eax, %esi
.L9228:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L9243
.L9222:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L9221
.L9246:
	movq	32(%rbx), %rdi
	movq	8(%rbx), %rsi
	cmpq	%rsi, 8(%rdi)
	jne	.L9217
	.p2align 4,,7
.L9220:
	movzbl	16(%rdi), %edx
	movq	%rdi, %rbx
	cmpb	$116, %dl
	jne	.L9251
.L9242:
	movq	32(%rbx), %rdi
	jmp	.L9220
.L9251:
	cmpb	$115, %dl
	jne	.L9217
	movq	32(%rdi), %r9
	movq	8(%rbx), %r8
	cmpq	%r8, 8(%r9)
	movq	%r9, %rdi
	je	.L9220
	jmp	.L9217
.L9245:
	movl	pedantic(%rip), %ecx
	testl	%ecx, %ecx
	jne	.L9212
	cmpb	$51, 48(%rdi)
	je	.L9212
	cmpq	$0, current_function_decl(%rip)
	je	.L9214
	movzbl	17(%rdi), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L9252
.L9214:
	movq	%rbx, %rdi
.L9215:
	movq	%rdi, %rbx
	movq	8(%rdi), %rax
	movzbl	16(%rdi), %edx
.L9212:
	movq	%rax, %rbp
	jmp	.L9208
.L9252:
	movq	104(%rdi), %rax
	testq	%rax, %rax
	je	.L9214
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L9214
	testb	$2, 17(%rax)
	je	.L9214
	cmpb	$46, %dl
	movq	%rax, %rdi
	jne	.L9215
	jmp	.L9214
	.p2align 6,,7
.L9244:
	movq	104(%rdi), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L9208
.L9206:
	movq	%rbx, %rdi
	popq	%rbx
	popq	%rbp
	popq	%r12
	jmp	default_function_array_conversion
.LFE22:
.Lfe22:
	.size	default_conversion,.Lfe22-default_conversion
	.section	.rodata.str1.1
.LC91:
	.string	"structure"
.LC90:
	.string	"%s has no member named `%s'"
	.section	.rodata.str1.32
	.align 32
.LC92:
	.string	"request for member `%s' in something not a structure or union"
	.text
	.align 2
	.p2align 4,,15
.globl build_component_ref
	.type	build_component_ref,@function
build_component_ref:
.LFB23:
	pushq	%r15
.LCFI80:
	pushq	%r14
.LCFI81:
	movq	%rsi, %r14
	pushq	%r13
.LCFI82:
	pushq	%r12
.LCFI83:
	movq	%rdi, %r12
	pushq	%rbp
.LCFI84:
	pushq	%rbx
.LCFI85:
	subq	$24, %rsp
.LCFI86:
	movq	8(%rdi), %rcx
	movzbl	16(%rcx), %edx
	movzbl	%dl, %ebx
	movl	%ebx, 20(%rsp)
	cmpb	$47, 16(%rdi)
	je	.L9372
	movl	20(%rsp), %eax
	subl	$20, %eax
	cmpl	$1, %eax
	ja	.L9290
	cmpq	$0, 32(%rcx)
	jne	.L9291
	testb	%dl, %dl
	je	.L9355
.L9296:
	movzbl	%dl, %eax
	subl	$5, %eax
	cmpl	$16, %eax
	ja	.L9305
	mov	%eax, %edx
	jmp	*.L9306(,%rdx,8)
	.section	.rodata
	.align 8
	.align 4
.L9306:
	.quad	.L9301
	.quad	.L9305
	.quad	.L9305
	.quad	.L9305
	.quad	.L9305
	.quad	.L9300
	.quad	.L9305
	.quad	.L9305
	.quad	.L9305
	.quad	.L9305
	.quad	.L9305
	.quad	.L9305
	.quad	.L9305
	.quad	.L9302
	.quad	.L9305
	.quad	.L9298
	.quad	.L9299
	.text
.L9298:
	movl	$.LC62, %esi
.L9297:
	movq	96(%rcx), %rax
	cmpb	$1, 16(%rax)
	je	.L9373
	movq	72(%rax), %rcx
	movl	$.LC71, %edi
	movq	32(%rcx), %rsi
.L9371:
	xorl	%eax, %eax
	call	error
.L9355:
	movq	global_trees(%rip), %rbx
.L9284:
	addq	$24, %rsp
	movq	%rbx, %rax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L9373:
	movq	32(%rax), %rdx
	movl	$.LC70, %edi
.L9370:
	xorl	%eax, %eax
	call	error
	jmp	.L9355
.L9301:
	movl	$.LC65, %edi
.L9368:
	xorl	%eax, %eax
	call	error
	jmp	.L9355
.L9300:
	movl	$.LC64, %esi
	jmp	.L9297
.L9302:
	movq	24(%rcx), %rax
	testq	%rax, %rax
	je	.L9303
	cmpq	$0, 112(%rax)
	je	.L9374
	movq	8(%rcx), %rcx
	movzbl	16(%rcx), %edx
	jmp	.L9296
.L9374:
	movl	$.LC66, %edi
	jmp	.L9368
.L9303:
	movl	$.LC67, %edi
	jmp	.L9368
	.p2align 6,,7
.L9299:
	movl	$.LC63, %esi
	jmp	.L9297
	.p2align 6,,7
.L9291:
	movq	160(%rcx), %rax
	testq	%rax, %rax
	je	.L9309
	movl	(%rax), %r15d
	xorl	%ebp, %ebp
	leaq	8(%rax), %r13
	movq	24(%rcx), %rbx
	cmpl	$1, %r15d
	jle	.L9311
	.p2align 4,,7
.L9325:
	movl	%r15d, %ebx
	subl	%ebp, %ebx
	incl	%ebx
	sarl	$1, %ebx
	leal	(%rbx,%rbp), %edx
	movslq	%edx,%rsi
	movq	(%r13,%rsi,8), %rbx
	movq	72(%rbx), %rax
	testq	%rax, %rax
	jne	.L9313
	movslq	%ebp,%r8
	leaq	(%r13,%r8,8), %rdx
	movq	(%rdx), %rdi
	cmpq	$0, 72(%rdi)
	jne	.L9359
	.p2align 4,,7
.L9320:
	movq	(%rdx), %rbx
	incl	%ebp
	movq	8(%rbx), %r10
	movzbl	16(%r10), %r9d
	subb	$20, %r9b
	cmpb	$1, %r9b
	jbe	.L9375
.L9314:
	movslq	%ebp,%rcx
	leaq	(%r13,%rcx,8), %rdx
	movq	(%rdx), %r11
	cmpq	$0, 72(%r11)
	je	.L9320
.L9359:
	xorl	%r8d, %r8d
	cmpl	%r15d, %ebp
	jg	.L9319
.L9310:
	movl	%r15d, %edx
	subl	%ebp, %edx
	decl	%edx
	jg	.L9325
.L9311:
	movslq	%ebp,%r15
	movq	(%r13,%r15,8), %rsi
	cmpq	%r14, 72(%rsi)
	je	.L9376
	cmpq	%r14, 72(%rbx)
	je	.L9329
.L9363:
	xorl	%r8d, %r8d
.L9319:
	testq	%r8, %r8
	je	.L9377
	.p2align 4,,7
.L9354:
	movq	32(%r8), %rbp
	movq	8(%rbp), %rsi
	cmpq	global_trees(%rip), %rsi
	je	.L9367
	xorl	%eax, %eax
	movl	$39, %edi
	movq	%r12, %rdx
	movq	%rbp, %rcx
	movq	%r8, 8(%rsp)
	call	build
	movq	8(%rsp), %r8
	movq	%rax, %rbx
	movzbl	17(%r12), %eax
	testb	$16, %al
	jne	.L9350
	testb	$16, 17(%rbp)
	je	.L9349
.L9350:
	orb	$16, 17(%rbx)
	movzbl	17(%r12), %eax
.L9349:
	testb	$8, %al
	jne	.L9352
	testb	$8, 17(%rbp)
	je	.L9351
.L9352:
	orb	$8, 17(%rbx)
.L9351:
	testb	$-128, 18(%rbp)
	jne	.L9378
.L9353:
	movq	(%r8), %r8
	movq	%rbx, %r12
	testq	%r8, %r8
	jne	.L9354
	jmp	.L9284
	.p2align 6,,7
.L9378:
	movq	%rbp, %rdi
	movq	%r8, 8(%rsp)
	call	warn_deprecated_use
	movq	8(%rsp), %r8
	jmp	.L9353
.L9367:
	movq	%rsi, %rbx
	jmp	.L9284
.L9377:
	cmpl	$20, 20(%rsp)
	movl	$.LC91, %esi
	movl	$.LC63, %r12d
	movl	$.LC90, %edi
	movq	32(%r14), %rdx
	cmovne	%r12, %rsi
	jmp	.L9370
.L9329:
	xorl	%edi, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
.L9369:
	call	tree_cons
	movq	%rax, %r8
	jmp	.L9319
.L9376:
	movq	%rsi, %rbx
	jmp	.L9329
	.p2align 6,,7
.L9375:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	lookup_field
	testq	%rax, %rax
	je	.L9314
.L9366:
	xorl	%edi, %edi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	jmp	.L9369
	.p2align 6,,7
.L9313:
	cmpq	%r14, %rax
	je	.L9311
	cmpq	%r14, %rax
	jae	.L9323
	movl	%edx, %ebp
	jmp	.L9310
.L9323:
	movl	%edx, %r15d
	jmp	.L9310
.L9309:
	movq	24(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L9363
	.p2align 4,,7
.L9337:
	movq	72(%rbx), %rdx
	testq	%rdx, %rdx
	jne	.L9334
	movq	8(%rbx), %rbp
	movzbl	16(%rbp), %r13d
	subb	$20, %r13b
	cmpb	$1, %r13b
	jbe	.L9379
.L9334:
	cmpq	%r14, %rdx
	je	.L9331
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L9337
	jmp	.L9363
.L9331:
	testq	%rbx, %rbx
	jne	.L9329
	jmp	.L9363
.L9379:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	lookup_field
	testq	%rax, %rax
	jne	.L9366
	movq	72(%rbx), %rdx
	jmp	.L9334
	.p2align 6,,7
.L9290:
	movl	20(%rsp), %eax
	testl	%eax, %eax
	je	.L9355
	movl	$.LC92, %edi
	movq	32(%rsi), %rsi
	jmp	.L9371
	.p2align 6,,7
.L9372:
	movq	40(%rdi), %rdi
	call	build_component_ref
	movq	%rax, %rbp
	movq	%rax, %rdi
	call	pedantic_non_lvalue
	movq	32(%r12), %rdx
	movq	8(%rbp), %rsi
	addq	$24, %rsp
	movq	%rax, %rcx
	movl	$47, %edi
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	xorl	%eax, %eax
	jmp	build
.L9305:
	movl	$.LC68, %edi
	movl	$163, %esi
	movl	$.LC69, %edx
	call	fancy_abort
.LFE23:
.Lfe23:
	.size	build_component_ref,.Lfe23-build_component_ref
	.section	.rodata.str1.1
.LC95:
	.string	"invalid type argument of `%s'"
	.section	.rodata.str1.32
	.align 32
.LC93:
	.string	"dereferencing pointer to incomplete type"
	.align 32
.LC94:
	.string	"dereferencing `void *' pointer"
	.text
	.align 2
	.p2align 4,,15
.globl build_indirect_ref
	.type	build_indirect_ref,@function
build_indirect_ref:
.LFB24:
	pushq	%r14
.LCFI87:
	movq	%rsi, %r14
	pushq	%r13
.LCFI88:
	pushq	%r12
.LCFI89:
	pushq	%rbp
.LCFI90:
	pushq	%rbx
.LCFI91:
	movq	8(%rdi), %r12
	movq	%rdi, %rbx
	movzbl	16(%r12), %ebp
	movq	%r12, %rax
	cmpl	$23, %ebp
	je	.L9382
	cmpl	$18, %ebp
	je	.L9382
	movzbl	16(%rdi), %ecx
	cmpb	$32, %cl
	je	.L9504
	movl	optimize(%rip), %r9d
	testl	%r9d, %r9d
	je	.L9445
	cmpb	$34, %cl
	je	.L9505
.L9445:
	cmpb	$116, %cl
	movq	%rbx, %rdx
	je	.L9494
	cmpb	$115, %cl
	je	.L9506
.L9454:
	movzbl	%cl, %edi 
	movzbl	tree_code_type(%rdi), %eax
	cmpb	$60, %al
	je	.L9459
	cmpb	$49, %al
	je	.L9459
	cmpb	$50, %al
	je	.L9459
	cmpb	$101, %al
	je	.L9459
.L9458:
	cmpl	$10, %ebp
	je	.L9507
	cmpb	$39, %cl
	je	.L9508
.L9467:
	movq	%r12, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L9472
	testb	$32, 17(%r12)
	je	.L9473
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L9474
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r12), %r9d
	movzwl	60(%rdx), %r12d
	andl	$511, %r9d
	andl	$511, %r12d
	cmpl	%r12d, %r9d
	je	.L9474
.L9473:
	movq	integer_types+40(%rip), %rdi
.L9500:
	movq	%rbx, %rsi
.L9501:
	call	convert
.L9503:
	movq	%rax, %rbp
.L9443:
	movq	8(%rbp), %rdx
	cmpb	$13, 16(%rdx)
	je	.L9509
	cmpb	$0, 16(%rbp)
	jne	.L9510
.L9484:
	movq	global_trees(%rip), %rbx
.L9380:
	movq	%rbx, %rax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	ret
.L9510:
	movl	$.LC95, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L9484
.L9509:
	cmpb	$121, 16(%rbp)
	je	.L9511
.L9496:
	movq	8(%rdx), %r12
.L9478:
	movq	128(%r12), %rsi
	movl	$41, %edi
	movq	%rbp, %rdx
	call	build1
	cmpq	$0, 32(%r12)
	movq	%rax, %rbx
	jne	.L9497
	movzbl	16(%r12), %eax
	cmpb	$5, %al
	je	.L9498
	cmpb	$18, %al
	je	.L9480
	movl	$.LC93, %edi
	xorl	%eax, %eax
	call	error
	jmp	.L9484
.L9480:
	cmpb	$5, %al
	je	.L9498
.L9481:
	movzbl	17(%r12), %r10d
	movzbl	17(%rbx), %r8d
	xorl	%edx, %edx
	andb	$16, %r10b
	andb	$-17, %r8b
	orb	%r10b, %r8b
	movb	%r8b, 17(%rbx)
	testb	$8, 17(%r12)
	jne	.L9483
	testb	$1, 17(%rbp)
	jne	.L9483
	movl	flag_volatile(%rip), %edi
	testl	%edi, %edi
	je	.L9482
.L9483:
	movl	$1, %edx
.L9482:
	movzbl	17(%rbx), %r11d
	andb	$-2, %r11b
	orb	%dl, %r11b
	movb	%r11b, 17(%rbx)
	andb	$-9, %r11b
	movzbl	17(%r12), %ebp
	andb	$8, %bpl
	orb	%bpl, %r11b
	movb	%r11b, 17(%rbx)
	jmp	.L9380
.L9498:
	movl	skip_evaluation(%rip), %esi
	testl	%esi, %esi
	jne	.L9481
	movl	$.LC94, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L9481
.L9497:
	movzbl	16(%r12), %eax
	jmp	.L9480
.L9511:
	movl	flag_volatile(%rip), %r14d
	testl	%r14d, %r14d
	jne	.L9496
	movq	32(%rbp), %rax
	movq	8(%rdx), %r12
	cmpq	%r12, 8(%rax)
	jne	.L9478
	movq	%rax, %rbx
	jmp	.L9380
.L9474:
	movq	integer_types+48(%rip), %rdi
	jmp	.L9500
.L9472:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L9475
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L9475
	movq	global_trees+192(%rip), %rcx
	cmpq	%rcx, 128(%r12)
	je	.L9512
.L9475:
	cmpl	$5, %ebp
	je	.L9513
.L9476:
	movq	%rbx, %rbp
	jmp	.L9443
.L9513:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L9502:
	movq	global_trees(%rip), %rbp
	jmp	.L9443
.L9512:
	movq	global_trees+200(%rip), %rdi
	jmp	.L9500
	.p2align 6,,7
.L9508:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L9467
	movq	integer_types+40(%rip), %r13
	movq	40(%rdx), %rdi
	movzwl	60(%r13), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L9467
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L9473
	testb	$32, 17(%r12)
	jne	.L9474
	jmp	.L9473
	.p2align 6,,7
.L9507:
	movq	integer_types+40(%rip), %rbp
	movzwl	60(%r12), %edx
	movl	flag_traditional(%rip), %r11d
	movzwl	60(%rbp), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r11d, %r11d
	jne	.L9466
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L9465
.L9466:
	testb	$32, 17(%r12)
	movl	$1, %eax
	cmovne	%eax, %esi
.L9465:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L9500
.L9459:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L9458
.L9506:
	movq	32(%rbx), %rdi
	movq	8(%rbx), %rsi
	cmpq	%rsi, 8(%rdi)
	jne	.L9454
	.p2align 4,,7
.L9457:
	movzbl	16(%rdi), %ecx
	movq	%rdi, %rbx
	cmpb	$116, %cl
	jne	.L9514
.L9494:
	movq	32(%rbx), %rdi
	jmp	.L9457
.L9514:
	cmpb	$115, %cl
	jne	.L9454
	movq	32(%rdi), %r10
	movq	8(%rbx), %r8
	cmpq	%r8, 8(%r10)
	movq	%r10, %rdi
	je	.L9457
	jmp	.L9454
.L9505:
	movl	pedantic(%rip), %edx
	testl	%edx, %edx
	jne	.L9449
	cmpb	$51, 48(%rdi)
	je	.L9449
	cmpq	$0, current_function_decl(%rip)
	je	.L9451
	movzbl	17(%rdi), %ecx
	andb	$24, %cl
	cmpb	$16, %cl
	je	.L9515
.L9451:
	movq	%rbx, %rdi
.L9452:
	movq	%rdi, %rbx
	movq	8(%rdi), %rax
	movzbl	16(%rdi), %ecx
.L9449:
	movq	%rax, %r12
	jmp	.L9445
.L9515:
	movq	104(%rdi), %rax
	testq	%rax, %rax
	je	.L9451
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L9451
	testb	$2, 17(%rax)
	je	.L9451
	cmpb	$46, %dl
	movq	%rax, %rdi
	jne	.L9452
	jmp	.L9451
	.p2align 6,,7
.L9504:
	movq	104(%rdi), %rbx
	movzbl	16(%rbx), %ecx
	jmp	.L9445
.L9382:
	movzbl	16(%rbx), %ecx
	movl	%ebp, %edx
	movq	%rbx, %rsi
	xorl	%ebp, %ebp
	cmpb	$116, %cl
	je	.L9490
	cmpb	$115, %cl
	je	.L9516
.L9384:
	movzbl	%cl, %edi 
	movzbl	tree_code_type(%rdi), %eax
	cmpb	$60, %al
	je	.L9390
	cmpb	$49, %al
	je	.L9390
	cmpb	$50, %al
	je	.L9390
	cmpb	$101, %al
	je	.L9390
.L9389:
	cmpl	$23, %edx
	je	.L9517
	cmpl	$18, %edx
	jne	.L9476
	movzbl	%cl, %esi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rsi), %eax
	movq	8(%r12), %r13
	cmpb	$114, %al
	je	.L9395
	cmpb	$100, %al
	je	.L9395
.L9394:
	movzbl	17(%r12), %r8d
	movl	$1, %esi
	movl	%r8d, %r9d
	movl	%r8d, %edi
	shrb	$3, %r9b
	shrb	$4, %dil
	andl	$1, %r9d
	andl	%edi, %esi
	movzbl	16(%r12), %edi
	addl	%r9d, %r9d
	orl	%r9d, %esi
	movzbl	62(%r12), %r9d
	movl	%r9d, %r10d
	shrb	$5, %r10b
	andl	$1, %r10d
	sall	$2, %r10d
	orl	%r10d, %esi
	xorl	%r10d, %r10d
	cmpb	$20, %dil
	je	.L9518
.L9398:
	leal	0(,%r10,8), %r12d
	orl	%r12d, %esi
	jne	.L9397
	testl	%edx, %edx
	jne	.L9397
	testl	%r11d, %r11d
	je	.L9396
.L9397:
	movl	%r8d, %r12d
	shrb	$5, %r9b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r12b
	movl	%r9d, %ecx
	movl	%r8d, %r10d
	andl	%r12d, %esi
	andl	$1, %ecx
	andl	$1, %r10d
	sall	$2, %ecx
	addl	%r10d, %r10d
	orl	%r10d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L9519
.L9400:
	leal	0(,%rcx,8), %r8d
	movq	%r13, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%rbx), %ecx
	movq	%rax, %r13
.L9396:
	cmpb	$41, %cl
	je	.L9520
	cmpb	$47, %cl
	je	.L9521
	xorl	%r12d, %r12d
	testl	%ebp, %ebp
	je	.L9522
.L9439:
	movl	flag_isoc99(%rip), %ebp
	testl	%ebp, %ebp
	jne	.L9440
	testl	%r12d, %r12d
	movq	%rbx, %rbp
	je	.L9443
.L9440:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %rbp
	je	.L9523
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbp, %rdi
	movq	%rax, %rsi
	jmp	.L9501
.L9523:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, %rbp
	call	mark_addressable
	testl	%eax, %eax
	je	.L9502
	movq	%rbx, %rdi
	call	staticp
	movzbl	17(%rbp), %ebx
	movl	%eax, %r13d
	andb	$1, %r13b
	addb	%r13b, %r13b
	andb	$-4, %bl
	orb	%r13b, %bl
	movb	%bl, 17(%rbp)
	jmp	.L9443
.L9522:
	movq	%rbx, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r12d
	jmp	.L9439
.L9521:
	movq	40(%rbx), %rbp
	movq	8(%rbp), %r12
	movzbl	16(%r12), %r13d
	movq	%r12, %rax
	cmpl	$23, %r13d
	je	.L9404
	cmpl	$18, %r13d
	je	.L9404
	movzbl	16(%rbp), %edx
	cmpb	$32, %dl
	je	.L9524
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L9407
	cmpb	$34, %dl
	je	.L9525
.L9407:
	cmpb	$116, %dl
	movq	%rbp, %rcx
	je	.L9492
	cmpb	$115, %dl
	je	.L9526
.L9416:
	movzbl	%dl, %r11d 
	movzbl	tree_code_type(%r11), %eax
	cmpb	$60, %al
	je	.L9421
	cmpb	$49, %al
	je	.L9421
	cmpb	$50, %al
	je	.L9421
	cmpb	$101, %al
	je	.L9421
.L9420:
	cmpl	$10, %r13d
	je	.L9527
	cmpb	$39, %dl
	je	.L9528
.L9429:
	movq	%r12, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L9434
	testb	$32, 17(%r12)
	je	.L9435
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L9436
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%r12), %esi
	movzwl	60(%rdi), %r12d
	andl	$511, %esi
	andl	$511, %r12d
	cmpl	%r12d, %esi
	je	.L9436
.L9435:
	movq	integer_types+40(%rip), %rdi
.L9499:
	movq	%rbp, %rsi
	call	convert
.L9405:
	movq	8(%rax), %rsi
	movq	32(%rbx), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L9503
.L9436:
	movq	integer_types+48(%rip), %rdi
	jmp	.L9499
.L9434:
	movl	flag_traditional(%rip), %r8d
	testl	%r8d, %r8d
	je	.L9437
	movl	flag_allow_single_precision(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L9437
	movq	global_trees+192(%rip), %r11
	cmpq	%r11, 128(%r12)
	je	.L9529
.L9437:
	cmpl	$5, %r13d
	je	.L9530
	movq	%rbp, %rax
	jmp	.L9405
.L9530:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L9405
.L9529:
	movq	global_trees+200(%rip), %rdi
	jmp	.L9499
	.p2align 6,,7
.L9528:
	movq	40(%rbp), %rdx
	testb	$2, 53(%rdx)
	je	.L9429
	movq	integer_types+40(%rip), %r9
	movq	40(%rdx), %rdi
	movzwl	60(%r9), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L9429
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L9435
	testb	$32, 17(%r12)
	jne	.L9436
	jmp	.L9435
	.p2align 6,,7
.L9527:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r12), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L9428
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L9427
.L9428:
	testb	$32, 17(%r12)
	movl	$1, %eax
	cmovne	%eax, %esi
.L9427:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L9499
.L9421:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbp)
	jmp	.L9420
.L9526:
	movq	32(%rbp), %rsi
	movq	8(%rbp), %rdi
	cmpq	%rdi, 8(%rsi)
	jne	.L9416
.L9419:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbp
	cmpb	$116, %dl
	jne	.L9531
.L9492:
	movq	32(%rbp), %rsi
	jmp	.L9419
.L9531:
	cmpb	$115, %dl
	jne	.L9416
	movq	32(%rsi), %r8
	movq	8(%rbp), %r10
	cmpq	%r10, 8(%r8)
	movq	%r8, %rsi
	je	.L9419
	jmp	.L9416
.L9525:
	movl	pedantic(%rip), %r9d
	testl	%r9d, %r9d
	jne	.L9411
	cmpb	$51, 48(%rbp)
	je	.L9411
	cmpq	$0, current_function_decl(%rip)
	je	.L9413
	movzbl	17(%rbp), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L9532
.L9413:
	movq	%rbp, %rsi
.L9414:
	movq	%rsi, %rbp
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L9411:
	movq	%rax, %r12
	jmp	.L9407
.L9532:
	movq	104(%rbp), %rax
	testq	%rax, %rax
	je	.L9413
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L9413
	testb	$2, 17(%rax)
	je	.L9413
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L9414
	jmp	.L9413
	.p2align 6,,7
.L9524:
	movq	104(%rbp), %rbp
	movzbl	16(%rbp), %edx
	jmp	.L9407
.L9404:
	movq	%rbp, %rdi
	call	default_function_array_conversion
	jmp	.L9405
.L9520:
	movq	72(%r13), %rdi
	movq	32(%rbx), %rsi
	jmp	.L9501
.L9519:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L9400
.L9518:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %r10d
	jmp	.L9398
.L9395:
	movzbl	17(%rbx), %r8d
	movl	$1, %r11d
	movl	%r8d, %edx
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	%r8d, %r11d
	andl	$1, %edx
	jmp	.L9394
.L9517:
	movl	$121, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L9503
.L9390:
	movl	24(%rsi), %eax
	movl	%eax, 24(%rbx)
	jmp	.L9389
.L9516:
	movq	32(%rbx), %rdi
	cmpq	%r12, 8(%rdi)
	jne	.L9384
	.p2align 4,,7
.L9388:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rdi, %rbx
	movzbl	16(%rdi), %ecx
	cmove	%eax, %ebp
	cmpb	$116, %cl
	jne	.L9533
.L9490:
	movq	32(%rbx), %rdi
	jmp	.L9388
.L9533:
	cmpb	$115, %cl
	jne	.L9384
	movq	32(%rdi), %rdi
	movq	8(%rbx), %r8
	cmpq	%r8, 8(%rdi)
	je	.L9388
	jmp	.L9384
.LFE24:
.Lfe24:
	.size	build_indirect_ref,.Lfe24-build_indirect_ref
	.section	.rodata.str1.32
	.align 32
.LC102:
	.string	"subscripted value is neither array nor pointer"
	.align 32
.LC98:
	.string	"array subscript is not an integer"
	.section	.rodata.str1.1
.LC103:
	.string	"array indexing"
.LC101:
	.string	"subscript has type `char'"
	.section	.rodata.str1.32
	.align 32
.LC100:
	.string	"ISO C89 forbids subscripting non-lvalue array"
	.align 32
.LC99:
	.string	"ISO C forbids subscripting `register' array"
	.align 32
.LC97:
	.string	"array subscript has type `char'"
	.align 32
.LC96:
	.string	"subscript missing in array reference"
	.text
	.align 2
	.p2align 4,,15
.globl build_array_ref
	.type	build_array_ref,@function
build_array_ref:
.LFB25:
	pushq	%r15
.LCFI92:
	pushq	%r14
.LCFI93:
	pushq	%r13
.LCFI94:
	pushq	%r12
.LCFI95:
	movq	%rsi, %r12
	pushq	%rbp
.LCFI96:
	pushq	%rbx
.LCFI97:
	movq	%rdi, %rbx
	subq	$8, %rsp
.LCFI98:
	testq	%rsi, %rsi
	je	.L10122
	movq	8(%rdi), %rbp
	movq	global_trees(%rip), %rax
	cmpq	%rax, %rbp
	movq	%rbp, %rsi
	je	.L9655
	movq	8(%r12), %r13
	cmpq	%rax, %r13
	je	.L9655
	cmpb	$18, 16(%rbp)
	je	.L10123
	movzbl	16(%rdi), %ecx
.L9538:
	movzbl	16(%rsi), %r13d
	movq	%rsi, %rax
	cmpl	$23, %r13d
	je	.L9672
	cmpl	$18, %r13d
	je	.L9672
	cmpb	$32, %cl
	je	.L10124
	movl	optimize(%rip), %r10d
	testl	%r10d, %r10d
	je	.L9735
	cmpb	$34, %cl
	je	.L10125
.L9735:
	cmpb	$116, %cl
	movq	%rbx, %rdx
	je	.L10066
	cmpb	$115, %cl
	je	.L10126
.L9744:
	movzbl	%cl, %r9d 
	movzbl	tree_code_type(%r9), %eax
	cmpb	$60, %al
	je	.L9749
	cmpb	$49, %al
	je	.L9749
	cmpb	$50, %al
	je	.L9749
	cmpb	$101, %al
	je	.L9749
.L9748:
	cmpl	$10, %r13d
	je	.L10127
	cmpb	$39, %cl
	je	.L10128
.L9757:
	movq	%rbp, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L9762
	testb	$32, 17(%rbp)
	je	.L9763
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L9764
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%rbp), %r10d
	movzwl	60(%rdi), %ebp
	andl	$511, %r10d
	andl	$511, %ebp
	cmpl	%ebp, %r10d
	je	.L9764
.L9763:
	movq	integer_types+40(%rip), %rdi
.L10101:
	movq	%rbx, %rsi
.L10102:
	call	convert
.L10104:
	movq	%rax, %r15
.L9733:
	movq	8(%r12), %r13
	movq	%r12, %rbx
	movzbl	16(%r13), %r14d
	cmpl	$23, %r14d
	je	.L9768
	cmpl	$18, %r14d
	je	.L9768
	movzbl	16(%r12), %eax
	cmpb	$32, %al
	je	.L10129
	movl	optimize(%rip), %ecx
	testl	%ecx, %ecx
	je	.L9831
	cmpb	$34, %al
	je	.L10130
.L9831:
	movzbl	16(%rbx), %ecx
	movq	%rbx, %rdx
	cmpb	$116, %cl
	je	.L10073
	cmpb	$115, %cl
	je	.L10131
.L9840:
	movzbl	%cl, %r10d 
	movzbl	tree_code_type(%r10), %eax
	cmpb	$60, %al
	je	.L9845
	cmpb	$49, %al
	je	.L9845
	cmpb	$50, %al
	je	.L9845
	cmpb	$101, %al
	je	.L9845
.L9844:
	cmpl	$10, %r14d
	je	.L10132
	cmpb	$39, %cl
	je	.L10133
.L9853:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L9858
	testb	$32, 17(%r13)
	je	.L9859
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L9860
	movq	integer_types+40(%rip), %r11
	movzwl	60(%r13), %r14d
	movzwl	60(%r11), %r13d
	andl	$511, %r14d
	andl	$511, %r13d
	cmpl	%r13d, %r14d
	je	.L9860
.L9859:
	movq	integer_types+40(%rip), %rdi
.L10106:
	movq	%rbx, %rsi
.L10107:
	call	convert
.L10109:
	movq	%rax, %rbp
.L9829:
	movl	warn_char_subscripts(%rip), %eax
	testl	%eax, %eax
	je	.L9863
	movq	8(%r12), %rax
	cmpb	$6, 16(%rax)
	je	.L10134
.L9863:
	movq	8(%r15), %rbx
	cmpb	$6, 16(%rbx)
	je	.L10135
	movq	%rbp, %rdx
	movq	%r15, %rbp
.L9864:
	cmpq	global_trees(%rip), %rbp
	je	.L9534
	movq	8(%rbp), %rax
	cmpb	$13, 16(%rax)
	je	.L10136
.L9867:
	movl	$.LC102, %edi
.L10119:
	xorl	%eax, %eax
	call	error
.L10120:
	movq	global_trees(%rip), %rbp
.L9534:
	addq	$8, %rsp
	movq	%rbp, %rax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L10136:
	movq	8(%rax), %r15
	cmpb	$23, 16(%r15)
	je	.L9867
	movq	8(%rdx), %r9
	cmpb	$6, 16(%r9)
	je	.L9868
.L10121:
	movl	$.LC98, %edi
	jmp	.L10119
.L9868:
	movq	%rbp, %rsi
	xorl	%ecx, %ecx
	movl	$59, %edi
	call	build_binary_op
	movq	8(%rax), %r12
	movq	%rax, %rbx
	movzbl	16(%r12), %ebp
	movq	%r12, %rax
	cmpl	$23, %ebp
	je	.L9870
	cmpl	$18, %ebp
	je	.L9870
	movzbl	16(%rbx), %ecx
	cmpb	$32, %cl
	je	.L10137
	movl	optimize(%rip), %esi
	testl	%esi, %esi
	je	.L9993
	cmpb	$34, %cl
	je	.L10138
.L9993:
	cmpb	$116, %cl
	movq	%rbx, %rdx
	je	.L10083
	cmpb	$115, %cl
	je	.L10139
.L10002:
	movzbl	%cl, %r15d 
	movzbl	tree_code_type(%r15), %eax
	cmpb	$60, %al
	je	.L10007
	cmpb	$49, %al
	je	.L10007
	cmpb	$50, %al
	je	.L10007
	cmpb	$101, %al
	je	.L10007
.L10006:
	cmpl	$10, %ebp
	je	.L10140
	cmpb	$39, %cl
	je	.L10141
.L10015:
	movq	%r12, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L10020
	testb	$32, 17(%r12)
	je	.L10021
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L10022
	movzwl	60(%r12), %esi
	movq	integer_types+40(%rip), %r12
	movzwl	60(%r12), %edi
	andl	$511, %esi
	andl	$511, %edi
	cmpl	%edi, %esi
	je	.L10022
.L10021:
	movq	integer_types+40(%rip), %rdi
.L10115:
	movq	%rbx, %rsi
.L10116:
	call	convert
.L10118:
	movq	%rax, %rbp
.L9991:
	movq	8(%rbp), %rdx
	cmpb	$13, 16(%rdx)
	je	.L10142
	cmpb	$0, 16(%rbp)
	jne	.L10143
.L10033:
	movq	global_trees(%rip), %rbx
.L10027:
	movq	%rbx, %rbp
	jmp	.L9534
.L10143:
	movl	$.LC95, %edi
	movl	$.LC103, %esi
	xorl	%eax, %eax
	call	error
	jmp	.L10033
.L10142:
	cmpb	$121, 16(%rbp)
	je	.L10144
.L10085:
	movq	8(%rdx), %r12
.L10026:
	movq	128(%r12), %rsi
	movl	$41, %edi
	movq	%rbp, %rdx
	call	build1
	cmpq	$0, 32(%r12)
	movq	%rax, %rbx
	jne	.L10086
	movzbl	16(%r12), %eax
	cmpb	$5, %al
	je	.L10087
	cmpb	$18, %al
	je	.L10029
	movl	$.LC93, %edi
	xorl	%eax, %eax
	call	error
	jmp	.L10033
.L10029:
	cmpb	$5, %al
	je	.L10087
.L10030:
	movzbl	17(%r12), %r15d
	movzbl	17(%rbx), %r11d
	xorl	%edx, %edx
	andb	$16, %r15b
	andb	$-17, %r11b
	orb	%r15b, %r11b
	movb	%r11b, 17(%rbx)
	testb	$8, 17(%r12)
	jne	.L10032
	testb	$1, 17(%rbp)
	jne	.L10032
	movl	flag_volatile(%rip), %ebp
	testl	%ebp, %ebp
	je	.L10031
.L10032:
	movl	$1, %edx
.L10031:
	movzbl	17(%rbx), %ecx
	andb	$-2, %cl
	orb	%dl, %cl
	movb	%cl, 17(%rbx)
	andb	$-9, %cl
	movzbl	17(%r12), %r10d
	andb	$8, %r10b
	orb	%r10b, %cl
	movb	%cl, 17(%rbx)
	jmp	.L10027
.L10087:
	movl	skip_evaluation(%rip), %r14d
	testl	%r14d, %r14d
	jne	.L10030
	movl	$.LC94, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L10030
.L10086:
	movzbl	16(%r12), %eax
	jmp	.L10029
.L10144:
	movl	flag_volatile(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L10085
	movq	32(%rbp), %rax
	movq	8(%rdx), %r12
	cmpq	%r12, 8(%rax)
	jne	.L10026
	movq	%rax, %rbx
	jmp	.L10027
	.p2align 6,,7
.L10022:
	movq	integer_types+48(%rip), %rdi
	jmp	.L10115
.L10020:
	movl	flag_traditional(%rip), %r9d
	testl	%r9d, %r9d
	je	.L10023
	movl	flag_allow_single_precision(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L10023
	movq	global_trees+192(%rip), %r8
	cmpq	%r8, 128(%r12)
	je	.L10145
.L10023:
	cmpl	$5, %ebp
	je	.L10146
.L10024:
	movq	%rbx, %rbp
	jmp	.L9991
.L10146:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L10117:
	movq	global_trees(%rip), %rbp
	jmp	.L9991
.L10145:
	movq	global_trees+200(%rip), %rdi
	jmp	.L10115
	.p2align 6,,7
.L10141:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L10015
	movq	integer_types+40(%rip), %r10
	movq	40(%rdx), %rdi
	movzwl	60(%r10), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L10015
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L10021
	testb	$32, 17(%r12)
	jne	.L10022
	jmp	.L10021
	.p2align 6,,7
.L10140:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r12), %edx
	movl	flag_traditional(%rip), %ebp
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%ebp, %ebp
	jne	.L10014
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L10013
.L10014:
	testb	$32, 17(%r12)
	movl	$1, %eax
	cmovne	%eax, %esi
.L10013:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L10115
.L10007:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L10006
.L10139:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r8
	cmpq	%r8, 8(%rsi)
	jne	.L10002
.L10005:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %rbx
	cmpb	$116, %cl
	jne	.L10147
.L10083:
	movq	32(%rbx), %rsi
	jmp	.L10005
.L10147:
	cmpb	$115, %cl
	jne	.L10002
	movq	32(%rsi), %r11
	movq	8(%rbx), %r14
	cmpq	%r14, 8(%r11)
	movq	%r11, %rsi
	je	.L10005
	jmp	.L10002
.L10138:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L9997
	cmpb	$51, 48(%rbx)
	je	.L9997
	cmpq	$0, current_function_decl(%rip)
	je	.L9999
	movzbl	17(%rbx), %r9d
	andb	$24, %r9b
	cmpb	$16, %r9b
	je	.L10148
.L9999:
	movq	%rbx, %rsi
.L10000:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %ecx
.L9997:
	movq	%rax, %r12
	jmp	.L9993
.L10148:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L9999
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L9999
	testb	$2, 17(%rax)
	je	.L9999
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L10000
	jmp	.L9999
	.p2align 6,,7
.L10137:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %ecx
	jmp	.L9993
.L9870:
	movzbl	16(%rbx), %ecx
	movl	%ebp, %edi
	movq	%rbx, %rdx
	xorl	%ebp, %ebp
	cmpb	$116, %cl
	je	.L10075
	cmpb	$115, %cl
	je	.L10149
.L9872:
	movzbl	%cl, %r10d 
	movzbl	tree_code_type(%r10), %eax
	cmpb	$60, %al
	je	.L9878
	cmpb	$49, %al
	je	.L9878
	cmpb	$50, %al
	je	.L9878
	cmpb	$101, %al
	je	.L9878
.L9877:
	cmpl	$23, %edi
	je	.L10150
	cmpl	$18, %edi
	jne	.L10024
	movzbl	%cl, %edi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rdi), %eax
	movq	8(%r12), %r13
	cmpb	$114, %al
	je	.L9883
	cmpb	$100, %al
	je	.L9883
.L9882:
	movzbl	17(%r12), %r8d
	movl	$1, %r9d
	movzbl	16(%r12), %edi
	xorl	%esi, %esi
	movl	%r8d, %r10d
	movl	%r8d, %r15d
	shrb	$4, %r10b
	shrb	$3, %r15b
	andl	%r10d, %r9d
	andl	$1, %r15d
	movzbl	62(%r12), %r10d
	addl	%r15d, %r15d
	orl	%r15d, %r9d
	movl	%r10d, %r14d
	shrb	$5, %r14b
	andl	$1, %r14d
	sall	$2, %r14d
	orl	%r14d, %r9d
	cmpb	$20, %dil
	je	.L10151
.L9886:
	leal	0(,%rsi,8), %r12d
	orl	%r12d, %r9d
	jne	.L9885
	testl	%edx, %edx
	jne	.L9885
	testl	%r11d, %r11d
	je	.L9884
.L9885:
	movl	%r8d, %r14d
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r14b
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%r14d, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L10152
.L9888:
	leal	0(,%rcx,8), %r8d
	movq	%r13, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%rbx), %ecx
	movq	%rax, %r13
.L9884:
	cmpb	$41, %cl
	je	.L10153
	cmpb	$47, %cl
	je	.L10154
	xorl	%r12d, %r12d
	testl	%ebp, %ebp
	je	.L10155
.L9987:
	movl	flag_isoc99(%rip), %edi
	testl	%edi, %edi
	jne	.L9988
	testl	%r12d, %r12d
	movq	%rbx, %rbp
	je	.L9991
.L9988:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %rbp
	je	.L10156
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbp, %rdi
	movq	%rax, %rsi
	jmp	.L10116
.L10156:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, %rbp
	call	mark_addressable
	testl	%eax, %eax
	je	.L10117
	movq	%rbx, %rdi
	call	staticp
	movzbl	17(%rbp), %ebx
	movl	%eax, %r12d
	andb	$1, %r12b
	addb	%r12b, %r12b
	andb	$-4, %bl
	orb	%r12b, %bl
	movb	%bl, 17(%rbp)
	jmp	.L9991
	.p2align 6,,7
.L10155:
	movq	%rbx, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r12d
	jmp	.L9987
.L10154:
	movq	40(%rbx), %r12
	movq	8(%r12), %rbp
	movzbl	16(%rbp), %r13d
	movq	%rbp, %rax
	cmpl	$23, %r13d
	je	.L9892
	cmpl	$18, %r13d
	je	.L9892
	movzbl	16(%r12), %ecx
	cmpb	$32, %cl
	je	.L10157
	movl	optimize(%rip), %r14d
	testl	%r14d, %r14d
	je	.L9955
	cmpb	$34, %cl
	je	.L10158
.L9955:
	cmpb	$116, %cl
	movq	%r12, %rdx
	je	.L10081
	cmpb	$115, %cl
	je	.L10159
.L9964:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L9969
	cmpb	$49, %al
	je	.L9969
	cmpb	$50, %al
	je	.L9969
	cmpb	$101, %al
	je	.L9969
.L9968:
	cmpl	$10, %r13d
	je	.L10160
	cmpb	$39, %cl
	je	.L10161
.L9977:
	movq	%rbp, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L9982
	testb	$32, 17(%rbp)
	je	.L9983
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L9984
	movq	integer_types+40(%rip), %r11
	movzwl	60(%rbp), %r14d
	movzwl	60(%r11), %ebp
	andl	$511, %r14d
	andl	$511, %ebp
	cmpl	%ebp, %r14d
	je	.L9984
.L9983:
	movq	integer_types+40(%rip), %rdi
.L10111:
	movq	%r12, %rsi
.L10112:
	call	convert
.L10114:
	movq	%rax, %rbp
.L9953:
	movq	8(%rbp), %rsi
	movq	32(%rbx), %rdx
	movl	$47, %edi
	movq	%rbp, %rcx
	xorl	%eax, %eax
	call	build
	jmp	.L10118
.L9984:
	movq	integer_types+48(%rip), %rdi
	jmp	.L10111
.L9982:
	movl	flag_traditional(%rip), %ecx
	testl	%ecx, %ecx
	je	.L9985
	movl	flag_allow_single_precision(%rip), %r15d
	testl	%r15d, %r15d
	jne	.L9985
	movq	global_trees+192(%rip), %r10
	cmpq	%r10, 128(%rbp)
	je	.L10162
.L9985:
	cmpl	$5, %r13d
	je	.L10163
.L9986:
	movq	%r12, %rbp
	jmp	.L9953
.L10163:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L10113:
	movq	global_trees(%rip), %rbp
	jmp	.L9953
.L10162:
	movq	global_trees+200(%rip), %rdi
	jmp	.L10111
.L10161:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L9977
	movq	integer_types+40(%rip), %r8
	movq	40(%rdx), %rdi
	movzwl	60(%r8), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L9977
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L9983
	testb	$32, 17(%rbp)
	jne	.L9984
	jmp	.L9983
.L10160:
	movq	integer_types+40(%rip), %r9
	movzwl	60(%rbp), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%r9), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L9976
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L9975
.L9976:
	testb	$32, 17(%rbp)
	movl	$1, %eax
	cmovne	%eax, %esi
.L9975:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L10111
.L9969:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L9968
.L10159:
	movq	32(%r12), %rsi
	movq	8(%r12), %r15
	cmpq	%r15, 8(%rsi)
	jne	.L9964
.L9967:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L10164
.L10081:
	movq	32(%r12), %rsi
	jmp	.L9967
.L10164:
	cmpb	$115, %cl
	jne	.L9964
	movq	32(%rsi), %rdi
	movq	8(%r12), %r10
	cmpq	%r10, 8(%rdi)
	movq	%rdi, %rsi
	je	.L9967
	jmp	.L9964
.L10158:
	movl	pedantic(%rip), %r11d
	testl	%r11d, %r11d
	jne	.L9959
	cmpb	$51, 48(%r12)
	je	.L9959
	cmpq	$0, current_function_decl(%rip)
	je	.L9961
	movzbl	17(%r12), %ecx
	andb	$24, %cl
	cmpb	$16, %cl
	je	.L10165
.L9961:
	movq	%r12, %rsi
.L9962:
	movq	%rsi, %r12
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %ecx
.L9959:
	movq	%rax, %rbp
	jmp	.L9955
.L10165:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L9961
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L9961
	testb	$2, 17(%rax)
	je	.L9961
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L9962
	jmp	.L9961
.L10157:
	movq	104(%r12), %r12
	movzbl	16(%r12), %ecx
	jmp	.L9955
	.p2align 6,,7
.L9892:
	movzbl	16(%r12), %ecx
	xorl	%r15d, %r15d
	movl	%r13d, %edi
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L10077
	cmpb	$115, %cl
	je	.L10166
.L9894:
	movzbl	%cl, %r11d 
	movzbl	tree_code_type(%r11), %eax
	cmpb	$60, %al
	je	.L9900
	cmpb	$49, %al
	je	.L9900
	cmpb	$50, %al
	je	.L9900
	cmpb	$101, %al
	je	.L9900
.L9899:
	cmpl	$23, %edi
	je	.L10167
	cmpl	$18, %edi
	jne	.L9986
	movzbl	%cl, %edi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rdi), %eax
	movq	8(%rbp), %r14
	cmpb	$114, %al
	je	.L9905
	cmpb	$100, %al
	je	.L9905
.L9904:
	movzbl	17(%rbp), %r8d
	movl	$1, %r9d
	xorl	%esi, %esi
	movl	%r8d, %r10d
	movl	%r8d, %edi
	shrb	$3, %r10b
	shrb	$4, %dil
	andl	$1, %r10d
	andl	%edi, %r9d
	movzbl	16(%rbp), %edi
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rbp), %r10d
	movl	%r10d, %r13d
	shrb	$5, %r13b
	andl	$1, %r13d
	sall	$2, %r13d
	orl	%r13d, %r9d
	cmpb	$20, %dil
	je	.L10168
.L9908:
	leal	0(,%rsi,8), %ebp
	orl	%ebp, %r9d
	jne	.L9907
	testl	%edx, %edx
	jne	.L9907
	testl	%r11d, %r11d
	je	.L9906
.L9907:
	movl	%r8d, %r13d
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r13b
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%r13d, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L10169
.L9910:
	leal	0(,%rcx,8), %r8d
	movq	%r14, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r14
.L9906:
	cmpb	$41, %cl
	je	.L10170
	cmpb	$47, %cl
	je	.L10171
	xorl	%r13d, %r13d
	testl	%r15d, %r15d
	je	.L10172
.L9949:
	movl	flag_isoc99(%rip), %ebp
	testl	%ebp, %ebp
	jne	.L9950
	testl	%r13d, %r13d
	movq	%r12, %rbp
	je	.L9953
.L9950:
	movq	%r14, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbp
	je	.L10173
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbp, %rdi
	movq	%rax, %rsi
	jmp	.L10112
.L10173:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbp
	call	mark_addressable
	testl	%eax, %eax
	je	.L10113
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbp), %r12d
	movl	%eax, %r8d
	andb	$1, %r8b
	addb	%r8b, %r8b
	andb	$-4, %r12b
	orb	%r8b, %r12b
	movb	%r12b, 17(%rbp)
	jmp	.L9953
.L10172:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r13d
	jmp	.L9949
.L10171:
	movq	40(%r12), %rbp
	movq	8(%rbp), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L9914
	cmpl	$18, %r14d
	je	.L9914
	movzbl	16(%rbp), %edx
	cmpb	$32, %dl
	je	.L10174
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L9917
	cmpb	$34, %dl
	je	.L10175
.L9917:
	cmpb	$116, %dl
	movq	%rbp, %rcx
	je	.L10079
	cmpb	$115, %dl
	je	.L10176
.L9926:
	movzbl	%dl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L9931
	cmpb	$49, %al
	je	.L9931
	cmpb	$50, %al
	je	.L9931
	cmpb	$101, %al
	je	.L9931
.L9930:
	cmpl	$10, %r14d
	je	.L10177
	cmpb	$39, %dl
	je	.L10178
.L9939:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L9944
	testb	$32, 17(%r13)
	je	.L9945
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L9946
	movq	integer_types+40(%rip), %rsi
	movzwl	60(%r13), %r15d
	movzwl	60(%rsi), %r13d
	andl	$511, %r15d
	andl	$511, %r13d
	cmpl	%r13d, %r15d
	je	.L9946
.L9945:
	movq	integer_types+40(%rip), %rdi
.L10110:
	movq	%rbp, %rsi
	call	convert
.L9915:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L10114
.L9946:
	movq	integer_types+48(%rip), %rdi
	jmp	.L10110
.L9944:
	movl	flag_traditional(%rip), %r10d
	testl	%r10d, %r10d
	je	.L9947
	movl	flag_allow_single_precision(%rip), %edi
	testl	%edi, %edi
	jne	.L9947
	movq	global_trees+192(%rip), %r9
	cmpq	%r9, 128(%r13)
	je	.L10179
.L9947:
	cmpl	$5, %r14d
	je	.L10180
	movq	%rbp, %rax
	jmp	.L9915
.L10180:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L9915
.L10179:
	movq	global_trees+200(%rip), %rdi
	jmp	.L10110
.L10178:
	movq	40(%rbp), %rdx
	testb	$2, 53(%rdx)
	je	.L9939
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L9939
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L9945
	testb	$32, 17(%r13)
	jne	.L9946
	jmp	.L9945
.L10177:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L9938
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L9937
.L9938:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L9937:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L10110
.L9931:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbp)
	jmp	.L9930
.L10176:
	movq	32(%rbp), %rsi
	movq	8(%rbp), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L9926
.L9929:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbp
	cmpb	$116, %dl
	jne	.L10181
.L10079:
	movq	32(%rbp), %rsi
	jmp	.L9929
.L10181:
	cmpb	$115, %dl
	jne	.L9926
	movq	32(%rsi), %r9
	movq	8(%rbp), %rdi
	cmpq	%rdi, 8(%r9)
	movq	%r9, %rsi
	je	.L9929
	jmp	.L9926
.L10175:
	movl	pedantic(%rip), %r15d
	testl	%r15d, %r15d
	jne	.L9921
	cmpb	$51, 48(%rbp)
	je	.L9921
	cmpq	$0, current_function_decl(%rip)
	je	.L9923
	movzbl	17(%rbp), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L10182
.L9923:
	movq	%rbp, %rsi
.L9924:
	movq	%rsi, %rbp
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L9921:
	movq	%rax, %r13
	jmp	.L9917
.L10182:
	movq	104(%rbp), %rax
	testq	%rax, %rax
	je	.L9923
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L9923
	testb	$2, 17(%rax)
	je	.L9923
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L9924
	jmp	.L9923
.L10174:
	movq	104(%rbp), %rbp
	movzbl	16(%rbp), %edx
	jmp	.L9917
.L9914:
	movq	%rbp, %rdi
	call	default_function_array_conversion
	jmp	.L9915
.L10170:
	movq	72(%r14), %rdi
	movq	32(%r12), %rsi
	jmp	.L10112
.L10169:
	testq	%r14, %r14
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L9910
.L10168:
	testq	%r14, %r14
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L9908
.L9905:
	movzbl	17(%r12), %esi
	movl	$1, %r11d
	movl	%esi, %edx
	shrb	$3, %sil
	shrb	$4, %dl
	andl	%esi, %r11d
	andl	$1, %edx
	jmp	.L9904
.L10167:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L10114
.L9900:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L9899
.L10166:
	movq	32(%r12), %rsi
	cmpq	%rbp, 8(%rsi)
	jne	.L9894
.L9898:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r15d
	cmpb	$116, %cl
	jne	.L10183
.L10077:
	movq	32(%r12), %rsi
	jmp	.L9898
.L10183:
	cmpb	$115, %cl
	jne	.L9894
	movq	32(%rsi), %rsi
	movq	8(%r12), %r13
	cmpq	%r13, 8(%rsi)
	je	.L9898
	jmp	.L9894
	.p2align 6,,7
.L10153:
	movq	72(%r13), %rdi
	movq	32(%rbx), %rsi
	jmp	.L10116
.L10152:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L9888
.L10151:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L9886
.L9883:
	movzbl	17(%rbx), %esi
	movl	$1, %r11d
	movl	%esi, %edx
	shrb	$3, %sil
	shrb	$4, %dl
	andl	%esi, %r11d
	andl	$1, %edx
	jmp	.L9882
.L10150:
	movl	$121, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L10118
.L9878:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L9877
.L10149:
	movq	32(%rbx), %rsi
	cmpq	%r12, 8(%rsi)
	jne	.L9872
.L9876:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %rbx
	movzbl	16(%rsi), %ecx
	cmove	%eax, %ebp
	cmpb	$116, %cl
	jne	.L10184
.L10075:
	movq	32(%rbx), %rsi
	jmp	.L9876
.L10184:
	cmpb	$115, %cl
	jne	.L9872
	movq	32(%rsi), %rsi
	movq	8(%rbx), %r8
	cmpq	%r8, 8(%rsi)
	je	.L9876
	jmp	.L9872
	.p2align 6,,7
.L10135:
	movq	%r15, %rdx
	jmp	.L9864
.L10134:
	movq	integer_types(%rip), %r12
	cmpq	%r12, 128(%rax)
	jne	.L9863
	movl	$.LC101, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L9863
.L9860:
	movq	integer_types+48(%rip), %rdi
	jmp	.L10106
.L9858:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L9861
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L9861
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%r13)
	je	.L10185
.L9861:
	cmpl	$5, %r14d
	je	.L10186
.L9862:
	movq	%rbx, %rbp
	jmp	.L9829
.L10186:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L10108:
	movq	global_trees(%rip), %rbp
	jmp	.L9829
.L10185:
	movq	global_trees+200(%rip), %rdi
	jmp	.L10106
	.p2align 6,,7
.L10133:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L9853
	movq	integer_types+40(%rip), %rcx
	movq	40(%rdx), %rdi
	movzwl	60(%rcx), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L9853
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L9859
	testb	$32, 17(%r13)
	jne	.L9860
	jmp	.L9859
	.p2align 6,,7
.L10132:
	movq	integer_types+40(%rip), %rsi
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %ebp
	movzwl	60(%rsi), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%ebp, %ebp
	jne	.L9852
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L9851
.L9852:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L9851:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L10106
.L9845:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L9844
.L10131:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%rsi)
	jne	.L9840
	.p2align 4,,7
.L9843:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %rbx
	cmpb	$116, %cl
	jne	.L10187
.L10073:
	movq	32(%rbx), %rsi
	jmp	.L9843
.L10187:
	cmpb	$115, %cl
	jne	.L9840
	movq	32(%rsi), %r8
	movq	8(%rbx), %rdi
	cmpq	%rdi, 8(%r8)
	movq	%r8, %rsi
	je	.L9843
	jmp	.L9840
.L10130:
	movl	pedantic(%rip), %r11d
	testl	%r11d, %r11d
	jne	.L9834
	cmpb	$51, 48(%r12)
	je	.L9834
	cmpq	$0, current_function_decl(%rip)
	je	.L9837
	movzbl	17(%r12), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L10188
.L9837:
	movq	%r12, %rsi
.L9838:
	movq	%rsi, %rbx
.L9835:
	movq	8(%rbx), %r13
	jmp	.L9831
.L10188:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L9837
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L9837
	testb	$2, 17(%rax)
	je	.L9837
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L9838
	jmp	.L9837
	.p2align 6,,7
.L9834:
	movq	%r12, %rbx
	jmp	.L9835
.L10129:
	movq	104(%r12), %rbx
	jmp	.L9831
.L9768:
	movzbl	16(%r12), %edx
	xorl	%ebp, %ebp
	movq	%r12, %rbx
	cmpb	$116, %dl
	je	.L10043
	cmpb	$115, %dl
	je	.L10189
	movzbl	16(%r12), %ecx
.L9770:
	movzbl	%cl, %r11d 
	movzbl	tree_code_type(%r11), %eax
	cmpb	$60, %al
	je	.L9776
	cmpb	$49, %al
	je	.L9776
	cmpb	$50, %al
	je	.L9776
	cmpb	$101, %al
	je	.L9776
.L9775:
	cmpl	$23, %r14d
	je	.L10190
	cmpl	$18, %r14d
	jne	.L9862
	movzbl	%cl, %r10d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r10), %eax
	movq	8(%r13), %r14
	cmpb	$114, %al
	je	.L9781
	cmpb	$100, %al
	je	.L9781
.L9780:
	movzbl	17(%r13), %r8d
	movl	$1, %esi
	movl	%r8d, %r9d
	movl	%r8d, %edi
	shrb	$3, %r9b
	shrb	$4, %dil
	andl	$1, %r9d
	andl	%edi, %esi
	movzbl	16(%r13), %edi
	addl	%r9d, %r9d
	orl	%r9d, %esi
	movzbl	62(%r13), %r9d
	movl	%r9d, %r10d
	shrb	$5, %r10b
	andl	$1, %r10d
	sall	$2, %r10d
	orl	%r10d, %esi
	xorl	%r10d, %r10d
	cmpb	$20, %dil
	je	.L10191
.L9784:
	leal	0(,%r10,8), %r13d
	orl	%r13d, %esi
	jne	.L9783
	testl	%edx, %edx
	jne	.L9783
	testl	%r11d, %r11d
	je	.L9782
.L9783:
	movl	%r8d, %r13d
	shrb	$5, %r9b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r13b
	movl	%r9d, %ecx
	movl	%r8d, %r10d
	andl	%r13d, %esi
	andl	$1, %ecx
	andl	$1, %r10d
	sall	$2, %ecx
	addl	%r10d, %r10d
	orl	%r10d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L10192
.L9786:
	leal	0(,%rcx,8), %r8d
	movq	%r14, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%rbx), %ecx
	movq	%rax, %r14
.L9782:
	cmpb	$41, %cl
	je	.L10193
	cmpb	$47, %cl
	je	.L10194
	xorl	%r13d, %r13d
	testl	%ebp, %ebp
	je	.L10195
.L9825:
	movl	flag_isoc99(%rip), %ebp
	testl	%ebp, %ebp
	jne	.L9826
	testl	%r13d, %r13d
	movq	%rbx, %rbp
	je	.L9829
.L9826:
	movq	%r14, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %rbp
	je	.L10196
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbp, %rdi
	movq	%rax, %rsi
	jmp	.L10107
.L10196:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, %rbp
	call	mark_addressable
	testl	%eax, %eax
	je	.L10108
	movq	%rbx, %rdi
	call	staticp
	movzbl	17(%rbp), %ebx
	movl	%eax, %r14d
	andb	$1, %r14b
	addb	%r14b, %r14b
	andb	$-4, %bl
	orb	%r14b, %bl
	movb	%bl, 17(%rbp)
	jmp	.L9829
.L10195:
	movq	%rbx, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r13d
	jmp	.L9825
.L10194:
	movq	40(%rbx), %rbp
	movq	8(%rbp), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L9790
	cmpl	$18, %r14d
	je	.L9790
	movzbl	16(%rbp), %edx
	cmpb	$32, %dl
	je	.L10197
	movl	optimize(%rip), %esi
	testl	%esi, %esi
	je	.L9793
	cmpb	$34, %dl
	je	.L10198
.L9793:
	cmpb	$116, %dl
	movq	%rbp, %rcx
	je	.L10071
	cmpb	$115, %dl
	je	.L10199
.L9802:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L9807
	cmpb	$49, %al
	je	.L9807
	cmpb	$50, %al
	je	.L9807
	cmpb	$101, %al
	je	.L9807
.L9806:
	cmpl	$10, %r14d
	je	.L10200
	cmpb	$39, %dl
	je	.L10201
.L9815:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L9820
	testb	$32, 17(%r13)
	je	.L9821
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L9822
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%r13), %r9d
	movzwl	60(%rdi), %r13d
	andl	$511, %r9d
	andl	$511, %r13d
	cmpl	%r13d, %r9d
	je	.L9822
.L9821:
	movq	integer_types+40(%rip), %rdi
.L10105:
	movq	%rbp, %rsi
	call	convert
.L9791:
	movq	8(%rax), %rsi
	movq	32(%rbx), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L10109
.L9822:
	movq	integer_types+48(%rip), %rdi
	jmp	.L10105
.L9820:
	movl	flag_traditional(%rip), %r8d
	testl	%r8d, %r8d
	je	.L9823
	movl	flag_allow_single_precision(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L9823
	movq	global_trees+192(%rip), %rsi
	cmpq	%rsi, 128(%r13)
	je	.L10202
.L9823:
	cmpl	$5, %r14d
	je	.L10203
	movq	%rbp, %rax
	jmp	.L9791
.L10203:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L9791
.L10202:
	movq	global_trees+200(%rip), %rdi
	jmp	.L10105
	.p2align 6,,7
.L10201:
	movq	40(%rbp), %rdx
	testb	$2, 53(%rdx)
	je	.L9815
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L9815
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L9821
	testb	$32, 17(%r13)
	jne	.L9822
	jmp	.L9821
	.p2align 6,,7
.L10200:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L9814
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L9813
.L9814:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L9813:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L10105
.L9807:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbp)
	jmp	.L9806
.L10199:
	movq	32(%rbp), %rsi
	movq	8(%rbp), %rdi
	cmpq	%rdi, 8(%rsi)
	jne	.L9802
.L9805:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbp
	cmpb	$116, %dl
	jne	.L10204
.L10071:
	movq	32(%rbp), %rsi
	jmp	.L9805
.L10204:
	cmpb	$115, %dl
	jne	.L9802
	movq	32(%rsi), %r8
	movq	8(%rbp), %r10
	cmpq	%r10, 8(%r8)
	movq	%r8, %rsi
	je	.L9805
	jmp	.L9802
.L10198:
	movl	pedantic(%rip), %r11d
	testl	%r11d, %r11d
	jne	.L9797
	cmpb	$51, 48(%rbp)
	je	.L9797
	cmpq	$0, current_function_decl(%rip)
	je	.L9799
	movzbl	17(%rbp), %r9d
	andb	$24, %r9b
	cmpb	$16, %r9b
	je	.L10205
.L9799:
	movq	%rbp, %rsi
.L9800:
	movq	%rsi, %rbp
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L9797:
	movq	%rax, %r13
	jmp	.L9793
.L10205:
	movq	104(%rbp), %rax
	testq	%rax, %rax
	je	.L9799
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L9799
	testb	$2, 17(%rax)
	je	.L9799
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L9800
	jmp	.L9799
	.p2align 6,,7
.L10197:
	movq	104(%rbp), %rbp
	movzbl	16(%rbp), %edx
	jmp	.L9793
.L9790:
	movq	%rbp, %rdi
	call	default_function_array_conversion
	jmp	.L9791
.L10193:
	movq	72(%r14), %rdi
	movq	32(%rbx), %rsi
	jmp	.L10107
.L10192:
	testq	%r14, %r14
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L9786
.L10191:
	testq	%r14, %r14
	movl	$1, %eax
	cmovne	%eax, %r10d
	jmp	.L9784
.L9781:
	movzbl	17(%rbx), %edi
	movl	$1, %r11d
	movl	%edi, %edx
	shrb	$3, %dil
	shrb	$4, %dl
	andl	%edi, %r11d
	andl	$1, %edx
	jmp	.L9780
.L10190:
	movl	$121, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L10109
.L9776:
	movl	24(%r12), %eax
	movl	%eax, 24(%rbx)
	jmp	.L9775
.L10189:
	movq	32(%r12), %r8
	cmpq	%r13, 8(%r8)
	je	.L10043
	movl	$115, %ecx
	jmp	.L9770
.L10043:
	movq	32(%r12), %rsi
	movl	%edx, %ecx
	.p2align 4,,7
.L9774:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %rbx
	movzbl	16(%rsi), %ecx
	cmove	%eax, %ebp
	cmpb	$116, %cl
	jne	.L10206
	movq	32(%rbx), %rsi
	jmp	.L9774
.L10206:
	cmpb	$115, %cl
	jne	.L9770
	movq	32(%rsi), %rsi
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%rsi)
	je	.L9774
	jmp	.L9770
.L9764:
	movq	integer_types+48(%rip), %rdi
	jmp	.L10101
.L9762:
	movl	flag_traditional(%rip), %r15d
	testl	%r15d, %r15d
	je	.L9765
	movl	flag_allow_single_precision(%rip), %esi
	testl	%esi, %esi
	jne	.L9765
	movq	global_trees+192(%rip), %r14
	cmpq	%r14, 128(%rbp)
	je	.L10207
.L9765:
	cmpl	$5, %r13d
	je	.L10208
.L9766:
	movq	%rbx, %r15
	jmp	.L9733
.L10208:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L10103:
	movq	global_trees(%rip), %r15
	jmp	.L9733
.L10207:
	movq	global_trees+200(%rip), %rdi
	jmp	.L10101
	.p2align 6,,7
.L10128:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L9757
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L9757
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	je	.L9763
	testb	$32, 17(%rbp)
	jne	.L9764
	jmp	.L9763
	.p2align 6,,7
.L10127:
	movq	integer_types+40(%rip), %r13
	movzwl	60(%rbp), %edx
	movl	flag_traditional(%rip), %ecx
	movzwl	60(%r13), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%ecx, %ecx
	jne	.L9756
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L9755
.L9756:
	testb	$32, 17(%rbp)
	movl	$1, %eax
	cmovne	%eax, %esi
.L9755:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L10101
.L9749:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L9748
.L10126:
	movq	32(%rbx), %rdi
	movq	8(%rbx), %rsi
	cmpq	%rsi, 8(%rdi)
	jne	.L9744
	.p2align 4,,7
.L9747:
	movzbl	16(%rdi), %ecx
	movq	%rdi, %rbx
	cmpb	$116, %cl
	jne	.L10209
.L10066:
	movq	32(%rbx), %rdi
	jmp	.L9747
.L10209:
	cmpb	$115, %cl
	jne	.L9744
	movq	32(%rdi), %r8
	movq	8(%rbx), %r14
	cmpq	%r14, 8(%r8)
	movq	%r8, %rdi
	je	.L9747
	jmp	.L9744
.L10125:
	movl	pedantic(%rip), %edi
	testl	%edi, %edi
	jne	.L9735
	cmpb	$51, 48(%rbx)
	je	.L9735
	cmpq	$0, current_function_decl(%rip)
	je	.L9741
	movzbl	17(%rbx), %r15d
	andb	$24, %r15b
	cmpb	$16, %r15b
	je	.L10210
.L9741:
	movq	%rbx, %rdi
.L9742:
	movq	%rdi, %rbx
	movq	8(%rdi), %rbp
.L10100:
	movzbl	16(%rbx), %ecx
	jmp	.L9735
.L10210:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L9741
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L9741
	testb	$2, 17(%rax)
	je	.L9741
	cmpb	$46, %dl
	movq	%rax, %rdi
	jne	.L9742
	jmp	.L9741
	.p2align 6,,7
.L10124:
	movq	104(%rbx), %rbx
	jmp	.L10100
.L9672:
	xorl	%ebp, %ebp
	movl	%r13d, %edx
	movq	%rbx, %r8
	cmpb	$116, %cl
	je	.L10062
	cmpb	$115, %cl
	je	.L10211
.L9674:
	movzbl	%cl, %r11d 
	movzbl	tree_code_type(%r11), %eax
	cmpb	$60, %al
	je	.L9680
	cmpb	$49, %al
	je	.L9680
	cmpb	$50, %al
	je	.L9680
	cmpb	$101, %al
	je	.L9680
.L9679:
	cmpl	$23, %edx
	je	.L10212
	cmpl	$18, %edx
	jne	.L9766
	movzbl	%cl, %r10d 
	xorl	%edx, %edx
	xorl	%r13d, %r13d
	movzbl	tree_code_type(%r10), %eax
	movq	8(%rsi), %r14
	cmpb	$114, %al
	je	.L9685
	cmpb	$100, %al
	je	.L9685
.L9684:
	movzbl	17(%rsi), %r8d
	movzbl	62(%rsi), %r9d
	movl	$1, %edi
	movl	%r8d, %r11d
	movl	%r8d, %r10d
	movl	%r9d, %r15d
	shrb	$3, %r11b
	shrb	$4, %r10b
	shrb	$5, %r15b
	andl	$1, %r11d
	andl	%r10d, %edi
	andl	$1, %r15d
	addl	%r11d, %r11d
	sall	$2, %r15d
	xorl	%r10d, %r10d
	orl	%r11d, %edi
	movzbl	16(%rsi), %r11d
	orl	%r15d, %edi
	cmpb	$20, %r11b
	je	.L10213
.L9688:
	leal	0(,%r10,8), %esi
	orl	%esi, %edi
	jne	.L9687
	testl	%edx, %edx
	jne	.L9687
	testl	%r13d, %r13d
	je	.L9686
.L9687:
	movl	%r8d, %r15d
	shrb	$5, %r9b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r15b
	movl	%r9d, %ecx
	movl	%r8d, %edi
	andl	%r15d, %esi
	andl	$1, %ecx
	andl	$1, %edi
	sall	$2, %ecx
	addl	%edi, %edi
	orl	%edi, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %r11b
	je	.L10214
.L9690:
	leal	0(,%rcx,8), %r8d
	movq	%r14, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r13,%r13), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%rbx), %ecx
	movq	%rax, %r14
.L9686:
	cmpb	$41, %cl
	je	.L10215
	cmpb	$47, %cl
	je	.L10216
	xorl	%r13d, %r13d
	testl	%ebp, %ebp
	je	.L10217
.L9729:
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L9730
	testl	%r13d, %r13d
	movq	%rbx, %r15
	je	.L9733
.L9730:
	movq	%r14, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %rbp
	je	.L10218
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbp, %rdi
	movq	%rax, %rsi
	jmp	.L10102
.L10218:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, %r15
	call	mark_addressable
	testl	%eax, %eax
	je	.L10103
	movq	%rbx, %rdi
	call	staticp
	movzbl	17(%r15), %ebx
	movl	%eax, %ebp
	andb	$1, %bpl
	addb	%bpl, %bpl
	andb	$-4, %bl
	orb	%bpl, %bl
	movb	%bl, 17(%r15)
	jmp	.L9733
.L10217:
	movq	%rbx, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r13d
	jmp	.L9729
.L10216:
	movq	40(%rbx), %rbp
	movq	8(%rbp), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L9694
	cmpl	$18, %r14d
	je	.L9694
	movzbl	16(%rbp), %edx
	cmpb	$32, %dl
	je	.L10219
	movl	optimize(%rip), %r9d
	testl	%r9d, %r9d
	je	.L9697
	cmpb	$34, %dl
	je	.L10220
.L9697:
	cmpb	$116, %dl
	movq	%rbp, %rcx
	je	.L10064
	cmpb	$115, %dl
	je	.L10221
.L9706:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L9711
	cmpb	$49, %al
	je	.L9711
	cmpb	$50, %al
	je	.L9711
	cmpb	$101, %al
	je	.L9711
.L9710:
	cmpl	$10, %r14d
	je	.L10222
	cmpb	$39, %dl
	je	.L10223
.L9719:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L9724
	testb	$32, 17(%r13)
	je	.L9725
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L9726
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r13), %r11d
	movzwl	60(%rdx), %r9d
	andl	$511, %r11d
	andl	$511, %r9d
	cmpl	%r9d, %r11d
	je	.L9726
.L9725:
	movq	integer_types+40(%rip), %rdi
.L10099:
	movq	%rbp, %rsi
	call	convert
.L9695:
	movq	8(%rax), %rsi
	movq	32(%rbx), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L10104
.L9726:
	movq	integer_types+48(%rip), %rdi
	jmp	.L10099
.L9724:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L9727
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L9727
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%r13)
	je	.L10224
.L9727:
	cmpl	$5, %r14d
	je	.L10225
	movq	%rbp, %rax
	jmp	.L9695
.L10225:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L9695
.L10224:
	movq	global_trees+200(%rip), %rdi
	jmp	.L10099
	.p2align 6,,7
.L10223:
	movq	40(%rbp), %rdx
	testb	$2, 53(%rdx)
	je	.L9719
	movq	integer_types+40(%rip), %r8
	movq	40(%rdx), %rdi
	movzwl	60(%r8), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L9719
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L9725
	testb	$32, 17(%r13)
	jne	.L9726
	jmp	.L9725
	.p2align 6,,7
.L10222:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L9718
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L9717
.L9718:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L9717:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L10099
.L9711:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbp)
	jmp	.L9710
.L10221:
	movq	32(%rbp), %rsi
	movq	8(%rbp), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L9706
.L9709:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbp
	cmpb	$116, %dl
	jne	.L10226
.L10064:
	movq	32(%rbp), %rsi
	jmp	.L9709
.L10226:
	cmpb	$115, %dl
	jne	.L9706
	movq	32(%rsi), %r15
	movq	8(%rbp), %rdi
	cmpq	%rdi, 8(%r15)
	movq	%r15, %rsi
	je	.L9709
	jmp	.L9706
.L10220:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L9701
	cmpb	$51, 48(%rbp)
	je	.L9701
	cmpq	$0, current_function_decl(%rip)
	je	.L9703
	movzbl	17(%rbp), %r11d
	andb	$24, %r11b
	cmpb	$16, %r11b
	je	.L10227
.L9703:
	movq	%rbp, %rsi
.L9704:
	movq	%rsi, %rbp
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L9701:
	movq	%rax, %r13
	jmp	.L9697
.L10227:
	movq	104(%rbp), %rax
	testq	%rax, %rax
	je	.L9703
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L9703
	testb	$2, 17(%rax)
	je	.L9703
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L9704
	jmp	.L9703
	.p2align 6,,7
.L10219:
	movq	104(%rbp), %rbp
	movzbl	16(%rbp), %edx
	jmp	.L9697
.L9694:
	movq	%rbp, %rdi
	call	default_function_array_conversion
	jmp	.L9695
.L10215:
	movq	72(%r14), %rdi
	movq	32(%rbx), %rsi
	jmp	.L10102
.L10214:
	testq	%r14, %r14
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L9690
.L10213:
	testq	%r14, %r14
	movl	$1, %eax
	cmovne	%eax, %r10d
	jmp	.L9688
.L9685:
	movzbl	17(%rbx), %r9d
	movl	$1, %r13d
	movl	%r9d, %edx
	shrb	$3, %r9b
	shrb	$4, %dl
	andl	%r9d, %r13d
	andl	$1, %edx
	jmp	.L9684
.L10212:
	movl	$121, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L10104
.L9680:
	movl	24(%r8), %eax
	movl	%eax, 24(%rbx)
	jmp	.L9679
.L10211:
	movq	32(%rbx), %rdi
	cmpq	%rax, 8(%rdi)
	jne	.L9674
	.p2align 4,,7
.L9678:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rdi, %rbx
	movzbl	16(%rdi), %ecx
	cmove	%eax, %ebp
	cmpb	$116, %cl
	jne	.L10228
.L10062:
	movq	32(%rbx), %rdi
	jmp	.L9678
.L10228:
	cmpb	$115, %cl
	jne	.L9674
	movq	32(%rdi), %rdi
	movq	8(%rbx), %r14
	cmpq	%r14, 8(%rdi)
	je	.L9678
	jmp	.L9674
.L10123:
	movzbl	16(%rdi), %ecx
	cmpb	$41, %cl
	je	.L9538
	movl	warn_char_subscripts(%rip), %eax
	testl	%eax, %eax
	je	.L9539
	movq	integer_types(%rip), %rdx
	cmpq	%rdx, 128(%r13)
	je	.L10229
.L9539:
	movzbl	16(%r13), %ebp
	cmpl	$23, %ebp
	je	.L9541
	cmpl	$18, %ebp
	je	.L9541
	movzbl	16(%r12), %ecx
	cmpb	$32, %cl
	je	.L10230
	movl	optimize(%rip), %eax
	testl	%eax, %eax
	je	.L9604
	cmpb	$34, %cl
	je	.L10231
.L9604:
	cmpb	$116, %cl
	movq	%r12, %rdx
	je	.L10058
	cmpb	$115, %cl
	je	.L10232
.L9613:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L9618
	cmpb	$49, %al
	je	.L9618
	cmpb	$50, %al
	je	.L9618
	cmpb	$101, %al
	je	.L9618
.L9617:
	cmpl	$10, %ebp
	je	.L10233
	cmpb	$39, %cl
	je	.L10234
.L9626:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L9631
	testb	$32, 17(%r13)
	je	.L9632
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L9633
	movq	integer_types+40(%rip), %r9
	movzwl	60(%r13), %r10d
	movzwl	60(%r9), %r13d
	andl	$511, %r10d
	andl	$511, %r13d
	cmpl	%r13d, %r10d
	je	.L9633
.L9632:
	movq	integer_types+40(%rip), %rdi
.L10090:
	movq	%r12, %rsi
.L10091:
	call	convert
.L10093:
	movq	%rax, %rbp
.L9602:
	movq	8(%rbp), %r12
	cmpb	$6, 16(%r12)
	jne	.L10121
	movzbl	16(%rbp), %edx
	cmpb	$25, %dl
	je	.L10235
.L9638:
	movq	%rbx, %rdi
	call	mark_addressable
	testl	%eax, %eax
	je	.L10120
	movzbl	16(%rbp), %edx
.L9637:
	cmpb	$25, %dl
	je	.L10236
.L9640:
	movl	pedantic(%rip), %edi
	testl	%edi, %edi
	je	.L9642
	cmpb	$39, 16(%rbx)
	movq	%rbx, %rdi
	je	.L9646
	movzbl	16(%rbx), %eax
.L10039:
	cmpb	$34, %al
	je	.L10237
.L9647:
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	je	.L10238
.L9642:
	movq	8(%rbx), %r8
	movq	%rbp, %rcx
	movq	%rbx, %rdx
	xorl	%eax, %eax
	movq	8(%r8), %rdi
	movq	128(%rdi), %rsi
	movl	$43, %edi
	call	build
	movzbl	17(%rbx), %ecx
	movq	8(%rbx), %rdx
	movzbl	17(%rax), %ebp
	movq	%rax, %rdi
	movq	8(%rdx), %r9
	shrb	$4, %cl
	movl	%ebp, %r15d
	andb	$-17, %bpl
	movzbl	17(%r9), %r10d
	shrb	$4, %r15b
	movl	%r15d, %r13d
	shrb	$4, %r10b
	orl	%r10d, %ecx
	orl	%r13d, %ecx
	andb	$1, %cl
	salb	$4, %cl
	orb	%cl, %bpl
	movb	%bpl, 17(%rax)
	movzbl	17(%rbx), %r14d
	movq	8(%rbx), %rsi
	movq	8(%rsi), %r11
	movzbl	17(%r11), %r12d
	shrb	$3, %r12b
	orl	%r12d, %r14d
	orl	%ebp, %r14d
	andb	$-2, %bpl
	andb	$1, %r14b
	orb	%r14b, %bpl
	movb	%bpl, 17(%rax)
	movl	%ebp, %r8d
	movzbl	17(%rbx), %r13d
	movq	8(%rbx), %r15
	shrb	$3, %r8b
	andb	$-9, %bpl
	movl	%r8d, %r10d
	movq	8(%r15), %rdx
	shrb	$3, %r13b
	movzbl	17(%rdx), %r9d
	shrb	$3, %r9b
	orl	%r9d, %r13d
	orl	%r10d, %r13d
	andb	$1, %r13b
	salb	$3, %r13b
	orb	%r13b, %bpl
	movb	%bpl, 17(%rax)
	call	fold
	movq	%rax, %rbp
	movq	8(%rax), %rdx
	movq	global_trees(%rip), %rax
	cmpq	%rax, %rbp
	je	.L9655
	cmpq	%rax, %rdx
	je	.L9655
	cmpq	$0, 32(%rdx)
	jne	.L9534
	movzbl	16(%rdx), %ecx
	testb	%cl, %cl
	je	.L9655
	testq	%rbp, %rbp
	je	.L9658
	movzbl	16(%rbp), %ebx
	subb	$34, %bl
	cmpb	$1, %bl
	jbe	.L10239
.L9658:
	movzbl	%cl, %eax
	subl	$5, %eax
	cmpl	$16, %eax
	ja	.L9667
	mov	%eax, %ebp
	jmp	*.L9668(,%rbp,8)
	.section	.rodata
	.align 8
	.align 4
.L9668:
	.quad	.L9663
	.quad	.L9667
	.quad	.L9667
	.quad	.L9667
	.quad	.L9667
	.quad	.L9662
	.quad	.L9667
	.quad	.L9667
	.quad	.L9667
	.quad	.L9667
	.quad	.L9667
	.quad	.L9667
	.quad	.L9667
	.quad	.L9664
	.quad	.L9667
	.quad	.L9660
	.quad	.L9661
	.text
.L9660:
	movl	$.LC62, %esi
.L9659:
	movq	96(%rdx), %rax
	cmpb	$1, 16(%rax)
	je	.L10240
	movq	72(%rax), %rax
	movl	$.LC71, %edi
.L10096:
	movq	32(%rax), %rsi
	xorl	%eax, %eax
	call	error
.L10095:
	movq	global_trees(%rip), %rax
.L9655:
	movq	%rax, %rbp
	jmp	.L9534
.L10240:
	movq	32(%rax), %rdx
	movl	$.LC70, %edi
	xorl	%eax, %eax
	call	error
	jmp	.L10095
.L9663:
	movl	$.LC65, %edi
.L10098:
	xorl	%eax, %eax
	call	error
	jmp	.L10095
.L9662:
	movl	$.LC64, %esi
	jmp	.L9659
.L9664:
	movq	24(%rdx), %rax
	testq	%rax, %rax
	je	.L9665
	cmpq	$0, 112(%rax)
	je	.L10241
	movq	8(%rdx), %rdx
	movzbl	16(%rdx), %ecx
	jmp	.L9658
.L10241:
	movl	$.LC66, %edi
	jmp	.L10098
.L9665:
	movl	$.LC67, %edi
	jmp	.L10098
	.p2align 6,,7
.L9661:
	movl	$.LC63, %esi
	jmp	.L9659
.L10239:
	movq	72(%rbp), %rax
	movl	$.LC61, %edi
	jmp	.L10096
.L10238:
	call	lvalue_p
	testl	%eax, %eax
	jne	.L9642
	movl	$.LC100, %edi
.L10094:
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L9642
.L10237:
	testb	$4, 49(%rdi)
	je	.L9647
	movl	$.LC99, %edi
	jmp	.L10094
	.p2align 6,,7
.L9646:
	movq	32(%rdi), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$39, %al
	je	.L9646
	jmp	.L10039
.L10236:
	movq	8(%rbx), %rcx
	movq	24(%rcx), %rsi
	testq	%rsi, %rsi
	je	.L9640
	movq	%rbp, %rdi
	call	int_fits_type_p
	testl	%eax, %eax
	jne	.L9640
	movq	%rbx, %rdi
	call	mark_addressable
	testl	%eax, %eax
	je	.L10120
	jmp	.L9640
	.p2align 6,,7
.L10235:
	movq	8(%rbx), %rsi
	movq	8(%rsi), %r11
	movq	32(%r11), %rax
	testq	%rax, %rax
	je	.L9637
	cmpb	$25, 16(%rax)
	jne	.L9638
	jmp	.L9637
.L9633:
	movq	integer_types+48(%rip), %rdi
	jmp	.L10090
.L9631:
	movl	flag_traditional(%rip), %r15d
	testl	%r15d, %r15d
	je	.L9634
	movl	flag_allow_single_precision(%rip), %r8d
	testl	%r8d, %r8d
	jne	.L9634
	movq	global_trees+192(%rip), %r14
	cmpq	%r14, 128(%r13)
	je	.L10242
.L9634:
	cmpl	$5, %ebp
	je	.L10243
.L9635:
	movq	%r12, %rbp
	jmp	.L9602
.L10243:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L10092:
	movq	global_trees(%rip), %rbp
	jmp	.L9602
.L10242:
	movq	global_trees+200(%rip), %rdi
	jmp	.L10090
	.p2align 6,,7
.L10234:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L9626
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%rdi), %esi
	movq	40(%rdx), %rdi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L9626
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L9632
	testb	$32, 17(%r13)
	jne	.L9633
	jmp	.L9632
	.p2align 6,,7
.L10233:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %ebp
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%ebp, %ebp
	jne	.L9625
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L9624
.L9625:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L9624:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L10090
.L9618:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L9617
.L10232:
	movq	32(%r12), %rsi
	movq	8(%r12), %r8
	cmpq	%r8, 8(%rsi)
	jne	.L9613
	.p2align 4,,7
.L9616:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L10244
.L10058:
	movq	32(%r12), %rsi
	jmp	.L9616
.L10244:
	cmpb	$115, %cl
	jne	.L9613
	movq	32(%rsi), %r11
	movq	8(%r12), %r14
	cmpq	%r14, 8(%r11)
	movq	%r11, %rsi
	je	.L9616
	jmp	.L9613
.L10231:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	jne	.L9604
	cmpb	$51, 48(%r12)
	je	.L9604
	cmpq	$0, current_function_decl(%rip)
	je	.L9610
	movzbl	17(%r12), %r15d
	andb	$24, %r15b
	cmpb	$16, %r15b
	je	.L10245
.L9610:
	movq	%r12, %rsi
.L9611:
	movq	%rsi, %r12
	movq	8(%rsi), %r13
.L10089:
	movzbl	16(%r12), %ecx
	jmp	.L9604
.L10245:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L9610
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L9610
	testb	$2, 17(%rax)
	je	.L9610
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L9611
	jmp	.L9610
	.p2align 6,,7
.L10230:
	movq	104(%r12), %r12
	jmp	.L10089
.L9541:
	movzbl	16(%r12), %ecx
	movl	%ebp, %edx
	movq	%r12, %rdi
	xorl	%ebp, %ebp
	cmpb	$116, %cl
	je	.L10054
	cmpb	$115, %cl
	je	.L10246
.L9543:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L9549
	cmpb	$49, %al
	je	.L9549
	cmpb	$50, %al
	je	.L9549
	cmpb	$101, %al
	je	.L9549
.L9548:
	cmpl	$23, %edx
	je	.L10247
	cmpl	$18, %edx
	jne	.L9635
	movzbl	%cl, %edi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rdi), %eax
	movq	8(%r13), %r14
	cmpb	$114, %al
	je	.L9554
	cmpb	$100, %al
	je	.L9554
.L9553:
	movzbl	17(%r13), %r8d
	movl	$1, %r9d
	movzbl	16(%r13), %edi
	movl	%r8d, %r10d
	movl	%r8d, %esi
	shrb	$3, %r10b
	shrb	$4, %sil
	andl	$1, %r10d
	andl	%esi, %r9d
	xorl	%esi, %esi
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%r13), %r10d
	movl	%r10d, %r15d
	shrb	$5, %r15b
	andl	$1, %r15d
	sall	$2, %r15d
	orl	%r15d, %r9d
	cmpb	$20, %dil
	je	.L10248
.L9557:
	leal	0(,%rsi,8), %r13d
	orl	%r13d, %r9d
	jne	.L9556
	testl	%edx, %edx
	jne	.L9556
	testl	%r11d, %r11d
	je	.L9555
.L9556:
	movl	%r8d, %r15d
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r15b
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%r15d, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L10249
.L9559:
	leal	0(,%rcx,8), %r8d
	movq	%r14, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r14
.L9555:
	cmpb	$41, %cl
	je	.L10250
	cmpb	$47, %cl
	je	.L10251
	xorl	%r13d, %r13d
	testl	%ebp, %ebp
	je	.L10252
.L9598:
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L9599
	testl	%r13d, %r13d
	movq	%r12, %rbp
	je	.L9602
.L9599:
	movq	%r14, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbp
	je	.L10253
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbp, %rdi
	movq	%rax, %rsi
	jmp	.L10091
.L10253:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbp
	call	mark_addressable
	testl	%eax, %eax
	je	.L10092
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbp), %r12d
	movl	%eax, %r9d
	andb	$1, %r9b
	addb	%r9b, %r9b
	andb	$-4, %r12b
	orb	%r9b, %r12b
	movb	%r12b, 17(%rbp)
	jmp	.L9602
.L10252:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r13d
	jmp	.L9598
.L10251:
	movq	40(%r12), %rbp
	movq	8(%rbp), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L9563
	cmpl	$18, %r14d
	je	.L9563
	movzbl	16(%rbp), %edx
	cmpb	$32, %dl
	je	.L10254
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L9566
	cmpb	$34, %dl
	je	.L10255
.L9566:
	cmpb	$116, %dl
	movq	%rbp, %rcx
	je	.L10056
	cmpb	$115, %dl
	je	.L10256
.L9575:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L9580
	cmpb	$49, %al
	je	.L9580
	cmpb	$50, %al
	je	.L9580
	cmpb	$101, %al
	je	.L9580
.L9579:
	cmpl	$10, %r14d
	je	.L10257
	cmpb	$39, %dl
	je	.L10258
.L9588:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L9593
	testb	$32, 17(%r13)
	je	.L9594
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L9595
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r13), %edi
	movzwl	60(%rdx), %r13d
	andl	$511, %edi
	andl	$511, %r13d
	cmpl	%r13d, %edi
	je	.L9595
.L9594:
	movq	integer_types+40(%rip), %rdi
.L10088:
	movq	%rbp, %rsi
	call	convert
.L9564:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L10093
.L9595:
	movq	integer_types+48(%rip), %rdi
	jmp	.L10088
	.p2align 6,,7
.L9593:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L9596
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L9596
	movq	global_trees+192(%rip), %r10
	cmpq	%r10, 128(%r13)
	je	.L10259
.L9596:
	cmpl	$5, %r14d
	je	.L10260
	movq	%rbp, %rax
	jmp	.L9564
.L10260:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L9564
.L10259:
	movq	global_trees+200(%rip), %rdi
	jmp	.L10088
	.p2align 6,,7
.L10258:
	movq	40(%rbp), %rdx
	testb	$2, 53(%rdx)
	je	.L9588
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L9588
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L9594
	testb	$32, 17(%r13)
	jne	.L9595
	jmp	.L9594
	.p2align 6,,7
.L10257:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L9587
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L9586
.L9587:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L9586:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L10088
.L9580:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbp)
	jmp	.L9579
.L10256:
	movq	32(%rbp), %rsi
	movq	8(%rbp), %r9
	cmpq	%r9, 8(%rsi)
	jne	.L9575
.L9578:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbp
	cmpb	$116, %dl
	jne	.L10261
.L10056:
	movq	32(%rbp), %rsi
	jmp	.L9578
.L10261:
	cmpb	$115, %dl
	jne	.L9575
	movq	32(%rsi), %r8
	movq	8(%rbp), %r15
	cmpq	%r15, 8(%r8)
	movq	%r8, %rsi
	je	.L9578
	jmp	.L9575
.L10255:
	movl	pedantic(%rip), %edi
	testl	%edi, %edi
	jne	.L9570
	cmpb	$51, 48(%rbp)
	je	.L9570
	cmpq	$0, current_function_decl(%rip)
	je	.L9572
	movzbl	17(%rbp), %r10d
	andb	$24, %r10b
	cmpb	$16, %r10b
	je	.L10262
.L9572:
	movq	%rbp, %rsi
.L9573:
	movq	%rsi, %rbp
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L9570:
	movq	%rax, %r13
	jmp	.L9566
.L10262:
	movq	104(%rbp), %rax
	testq	%rax, %rax
	je	.L9572
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L9572
	testb	$2, 17(%rax)
	je	.L9572
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L9573
	jmp	.L9572
	.p2align 6,,7
.L10254:
	movq	104(%rbp), %rbp
	movzbl	16(%rbp), %edx
	jmp	.L9566
.L9563:
	movq	%rbp, %rdi
	call	default_function_array_conversion
	jmp	.L9564
.L10250:
	movq	72(%r14), %rdi
	movq	32(%r12), %rsi
	jmp	.L10091
.L10249:
	testq	%r14, %r14
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L9559
.L10248:
	testq	%r14, %r14
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L9557
.L9554:
	movzbl	17(%r12), %r9d
	movl	$1, %r11d
	movl	%r9d, %edx
	shrb	$3, %r9b
	shrb	$4, %dl
	andl	%r9d, %r11d
	andl	$1, %edx
	jmp	.L9553
.L10247:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L10093
.L9549:
	movl	24(%rdi), %eax
	movl	%eax, 24(%r12)
	jmp	.L9548
.L10246:
	movq	32(%r12), %rsi
	cmpq	%r13, 8(%rsi)
	jne	.L9543
	.p2align 4,,7
.L9547:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %ebp
	cmpb	$116, %cl
	jne	.L10263
.L10054:
	movq	32(%r12), %rsi
	jmp	.L9547
.L10263:
	cmpb	$115, %cl
	jne	.L9543
	movq	32(%rsi), %rsi
	movq	8(%r12), %r8
	cmpq	%r8, 8(%rsi)
	je	.L9547
	jmp	.L9543
.L10229:
	movl	$.LC97, %edi
	xorl	%eax, %eax
	call	warning
	movq	8(%r12), %r13
	jmp	.L9539
	.p2align 6,,7
.L10122:
	movl	$.LC96, %edi
	jmp	.L10119
.L9667:
	movl	$.LC68, %edi
	movl	$163, %esi
	movl	$.LC69, %edx
	call	fancy_abort
.LFE25:
.Lfe25:
	.size	build_array_ref,.Lfe25-build_array_ref
	.section	.rodata.str1.32
	.align 32
.LC105:
	.string	"`%s' undeclared (first use in this function)"
	.align 32
.LC106:
	.string	"(Each undeclared identifier is reported only once"
	.align 32
.LC107:
	.string	"for each function it appears in.)"
	.align 32
.LC104:
	.string	"`%s' undeclared here (not in a function)"
	.align 32
.LC108:
	.string	"local declaration of `%s' hides instance variable"
	.text
	.align 2
	.p2align 4,,15
.globl build_external_ref
	.type	build_external_ref,@function
build_external_ref:
.LFB26:
	subq	$40, %rsp
.LCFI99:
	movq	%rbx, 8(%rsp)
.LCFI100:
	movq	%rbp, 16(%rsp)
.LCFI101:
	movq	%r12, 24(%rsp)
.LCFI102:
	movq	%r13, 32(%rsp)
.LCFI103:
	movq	%rdi, %r12
	movl	%esi, %r13d
	call	lookup_name
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	lookup_objc_ivar
	testq	%rbx, %rbx
	movq	%rax, %rbp
	je	.L10267
	testb	$-128, 18(%rbx)
	jne	.L10289
.L10265:
	movq	global_trees(%rip), %rdx
	cmpq	%rdx, %rbx
	je	.L10267
	testb	$1, 53(%rbx)
	je	.L10266
.L10267:
	testq	%rbp, %rbp
	je	.L10268
	movq	%rbp, %rbx
.L10288:
	movq	global_trees(%rip), %rdx
.L10280:
	movq	8(%rbx), %rax
	cmpq	%rdx, %rax
	je	.L10264
	movq	%rbx, %rdi
	call	assemble_external
	orb	$1, 18(%rbx)
	cmpb	$32, 16(%rbx)
	je	.L10290
.L10286:
	movq	%rbx, %rax
.L10264:
	movq	8(%rsp), %rbx
	movq	16(%rsp), %rbp
	movq	24(%rsp), %r12
	movq	32(%rsp), %r13
	addq	$40, %rsp
	ret
	.p2align 6,,7
.L10290:
	movq	104(%rbx), %rbx
	orb	$2, 17(%rbx)
	jmp	.L10286
	.p2align 6,,7
.L10268:
	testl	%r13d, %r13d
	je	.L10270
	testq	%rbx, %rbx
	je	.L10272
	cmpq	global_trees(%rip), %rbx
	je	.L10272
	movq	%r12, %rdi
	call	implicit_decl_warning
	andb	$-2, 53(%rbx)
	jmp	.L10288
.L10272:
	movq	%r12, %rdi
	call	implicitly_declare
	movq	%rax, %rbx
	jmp	.L10288
.L10270:
	movq	current_function_decl(%rip), %rax
	testq	%rax, %rax
	je	.L10291
	movq	global_trees(%rip), %rdx
	cmpq	%rdx, 56(%r12)
	je	.L10292
.L10278:
	movq	32(%r12), %rsi
	xorl	%eax, %eax
	movl	$.LC105, %edi
	call	error
	movl	undeclared_variable_notice(%rip), %eax
	testl	%eax, %eax
	je	.L10293
.L10287:
	movq	global_trees(%rip), %rdx
.L10277:
	movq	%rdx, 56(%r12)
	movq	current_function_decl(%rip), %rdx
	movq	%rdx, 88(%r12)
.L10276:
	movq	global_trees(%rip), %rax
	jmp	.L10264
.L10293:
	movl	$.LC106, %edi
	xorl	%eax, %eax
	call	error
	movl	$.LC107, %edi
	xorl	%eax, %eax
	call	error
	movl	$1, undeclared_variable_notice(%rip)
	jmp	.L10287
.L10292:
	cmpq	%rax, 88(%r12)
	jne	.L10278
	jmp	.L10277
.L10291:
	movq	32(%r12), %rsi
	movl	$.LC104, %edi
	xorl	%eax, %eax
	call	error
	jmp	.L10276
	.p2align 6,,7
.L10266:
	testq	%rbp, %rbp
	je	.L10280
	cmpq	%rbp, %rbx
	je	.L10283
	cmpq	$0, 64(%r12)
	jne	.L10294
.L10283:
	movq	%rbp, %rbx
	jmp	.L10280
.L10294:
	movq	32(%r12), %rsi
	movl	$.LC108, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L10288
	.p2align 6,,7
.L10289:
	movq	%rbx, %rdi
	call	warn_deprecated_use
	jmp	.L10265
.LFE26:
.Lfe26:
	.size	build_external_ref,.Lfe26-build_external_ref
	.section	.rodata.str1.32
	.align 32
.LC109:
	.string	"called object is not a function"
	.align 32
.LC123:
	.string	"too few arguments to function `%s'"
	.section	.rodata.str1.1
.LC124:
	.string	"too few arguments to function"
	.section	.rodata.str1.32
	.align 32
.LC120:
	.string	"%s with different width due to prototype"
	.align 32
.LC121:
	.string	"%s as unsigned due to prototype"
	.section	.rodata.str1.1
.LC122:
	.string	"%s as signed due to prototype"
	.section	.rodata.str1.32
	.align 32
.LC119:
	.string	"%s as `float' rather than `double' due to prototype"
	.align 32
.LC118:
	.string	"%s as floating rather than complex due to prototype"
	.align 32
.LC117:
	.string	"%s as complex rather than integer due to prototype"
	.align 32
.LC116:
	.string	"%s as floating rather than integer due to prototype"
	.align 32
.LC115:
	.string	"%s as complex rather than floating due to prototype"
	.align 32
.LC114:
	.string	"%s as integer rather than complex due to prototype"
	.align 32
.LC113:
	.string	"%s as integer rather than floating due to prototype"
	.align 32
.LC112:
	.string	"type of formal parameter %d is incomplete"
	.align 32
.LC111:
	.string	"too many arguments to function"
	.align 32
.LC110:
	.string	"too many arguments to function `%s'"
	.text
	.align 2
	.p2align 4,,15
.globl build_function_call
	.type	build_function_call,@function
build_function_call:
.LFB27:
	pushq	%r15
.LCFI104:
	pushq	%r14
.LCFI105:
	pushq	%r13
.LCFI106:
	pushq	%r12
.LCFI107:
	pushq	%rbp
.LCFI108:
	pushq	%rbx
.LCFI109:
	movq	%rdi, %rbx
	subq	$88, %rsp
.LCFI110:
	movq	%rsi, 80(%rsp)
	movq	$0, 56(%rsp)
	movq	$0, 64(%rsp)
	movzbl	16(%rdi), %ecx
	leal	-114(%rcx), %edx
	cmpb	$2, %dl
	ja	.L10297
	movq	32(%rdi), %rdi
	movq	global_trees(%rip), %rbp
	cmpq	%rbp, %rdi
	movq	%rdi, %rax
	movq	%rbp, %rdx
	je	.L10297
	movq	8(%rdi), %r8
	cmpq	%r8, 8(%rbx)
	je	.L10300
.L10297:
	cmpb	$30, %cl
	je	.L10936
	movq	8(%rbx), %r12
	movzbl	16(%r12), %ebp
	movq	%r12, %rax
	cmpl	$23, %ebp
	je	.L10307
	cmpl	$18, %ebp
	je	.L10307
	cmpb	$32, %cl
	je	.L10937
	movl	optimize(%rip), %r9d
	testl	%r9d, %r9d
	je	.L10370
	cmpb	$34, %cl
	je	.L10938
.L10370:
	cmpb	$116, %cl
	movq	%rbx, %rdx
	je	.L10873
	cmpb	$115, %cl
	je	.L10939
.L10379:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L10384
	cmpb	$49, %al
	je	.L10384
	cmpb	$50, %al
	je	.L10384
	cmpb	$101, %al
	je	.L10384
.L10383:
	cmpl	$10, %ebp
	je	.L10940
	cmpb	$39, %cl
	je	.L10941
.L10392:
	movq	%r12, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L10397
	testb	$32, 17(%r12)
	je	.L10398
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L10399
	movq	integer_types+40(%rip), %r9
	movzwl	60(%r12), %ebp
	movzwl	60(%r9), %r12d
	andl	$511, %ebp
	andl	$511, %r12d
	cmpl	%r12d, %ebp
	je	.L10399
.L10398:
	movq	integer_types+40(%rip), %rdi
.L10899:
	movq	%rbx, %rsi
.L10900:
	call	convert
.L10902:
	movq	%rax, %rbp
.L10368:
	movq	%rbp, 48(%rsp)
.L10305:
	movq	48(%rsp), %rbx
	movq	8(%rbx), %rdx
	movzbl	16(%rdx), %eax
	testb	%al, %al
	je	.L10934
	cmpb	$13, %al
	je	.L10942
.L10404:
	movl	$.LC109, %edi
	xorl	%eax, %eax
	call	error
.L10934:
	movq	global_trees(%rip), %rdx
.L10295:
	addq	$88, %rsp
	movq	%rdx, %rax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L10942:
	movq	8(%rdx), %r13
	movq	%r13, 8(%rsp)
	cmpb	$23, 16(%r13)
	jne	.L10404
	cmpq	$0, 56(%rsp)
	je	.L10405
	movq	56(%rsp), %rsi
	testb	$8, 17(%rsi)
	je	.L10405
	movl	$1, current_function_returns_abnormally(%rip)
.L10405:
	movq	8(%rsp), %rdi
	movq	80(%rsp), %rcx
	movq	24(%rdi), %r11
	testq	%rcx, %rcx
	movl	$0, 44(%rsp)
	movq	$0, 24(%rsp)
	movq	%rcx, 32(%rsp)
	movq	%r11, 16(%rsp)
	je	.L10407
.L10822:
	xorl	%r15d, %r15d
	cmpq	$0, 16(%rsp)
	je	.L10411
	movq	16(%rsp), %rax
	movq	32(%rax), %r15
.L10411:
	cmpq	global_trees+216(%rip), %r15
	movq	32(%rsp), %rdx
	movq	32(%rdx), %rbx
	je	.L10943
	movzbl	16(%rbx), %ecx
	cmpb	$116, %cl
	je	.L10944
.L10415:
	movq	8(%rbx), %rdi
	xorl	%ebp, %ebp
	movq	%rbx, %r8
	cmpb	$116, %cl
	movzbl	16(%rdi), %edx
	je	.L10875
	cmpb	$115, %cl
	je	.L10945
.L10417:
	movzbl	%cl, %r10d 
	movzbl	tree_code_type(%r10), %eax
	cmpb	$60, %al
	je	.L10423
	cmpb	$49, %al
	je	.L10423
	cmpb	$50, %al
	je	.L10423
	cmpb	$101, %al
	je	.L10423
.L10422:
	cmpl	$23, %edx
	je	.L10946
	cmpl	$18, %edx
	je	.L10947
.L10426:
	movq	%rbx, %rbp
.L10904:
	movq	global_trees(%rip), %rsi
.L10425:
	cmpq	%rsi, %rbp
	movq	8(%rbp), %rdx
	je	.L10481
	cmpq	%rsi, %rdx
	je	.L10481
	cmpq	$0, 32(%rdx)
	jne	.L10478
	movzbl	16(%rdx), %ecx
	testb	%cl, %cl
	je	.L10481
	testq	%rbp, %rbp
	je	.L10484
	movzbl	16(%rbp), %r13d
	subb	$34, %r13b
	cmpb	$1, %r13b
	jbe	.L10948
.L10484:
	movzbl	%cl, %eax
	subl	$5, %eax
	cmpl	$16, %eax
	ja	.L10848
	mov	%eax, %ecx
	jmp	*.L10494(,%rcx,8)
	.section	.rodata
	.align 8
	.align 4
.L10494:
	.quad	.L10489
	.quad	.L10848
	.quad	.L10848
	.quad	.L10848
	.quad	.L10848
	.quad	.L10488
	.quad	.L10848
	.quad	.L10848
	.quad	.L10848
	.quad	.L10848
	.quad	.L10848
	.quad	.L10848
	.quad	.L10848
	.quad	.L10490
	.quad	.L10848
	.quad	.L10486
	.quad	.L10487
	.text
.L10486:
	movl	$.LC62, %esi
.L10485:
	movq	96(%rdx), %rax
	cmpb	$1, 16(%rax)
	je	.L10949
	movq	72(%rax), %rax
	movl	$.LC71, %edi
.L10909:
	movq	32(%rax), %rsi
	xorl	%eax, %eax
	call	error
.L10908:
	movq	global_trees(%rip), %rsi
.L10481:
	movq	%rsi, %rbp
.L10478:
	testq	%r15, %r15
	je	.L10497
	cmpq	$0, 32(%r15)
	je	.L10950
	movl	warn_conversion(%rip), %eax
	testl	%eax, %eax
	jne	.L10501
	movl	warn_traditional(%rip), %r8d
	testl	%r8d, %r8d
	je	.L10500
.L10501:
	movzwl	60(%r15), %r12d
	andl	$511, %r12d
	movl	%r12d, 76(%rsp)
	movzbl	16(%r15), %edx
	cmpb	$6, %dl
	je	.L10503
	cmpb	$10, %dl
	je	.L10503
	cmpb	$11, %dl
	je	.L10503
	cmpb	$12, %dl
	je	.L10503
.L10502:
	cmpb	$6, %dl
	je	.L10505
	cmpb	$10, %dl
	je	.L10505
	cmpb	$11, %dl
	je	.L10505
	cmpb	$12, %dl
	je	.L10505
.L10504:
	cmpb	$8, %dl
	je	.L10951
.L10507:
	cmpb	$7, %dl
	je	.L10952
.L10509:
	cmpb	$8, %dl
	je	.L10953
.L10512:
	cmpb	$7, %dl
	je	.L10954
.L10517:
	movl	warn_conversion(%rip), %ecx
	testl	%ecx, %ecx
	je	.L10500
	cmpb	$6, %dl
	je	.L10521
	cmpb	$10, %dl
	je	.L10521
	cmpb	$11, %dl
	je	.L10521
	cmpb	$12, %dl
	je	.L10521
.L10500:
	movl	44(%rsp), %r9d
	movq	56(%rsp), %rcx
	movq	%rbp, %rsi
	movq	64(%rsp), %r8
	xorl	%edx, %edx
	movq	%r15, %rdi
	incl	%r9d
	call	convert_for_assignment
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rbp
	jne	.L10499
	movzbl	16(%r15), %eax
	cmpb	$6, %al
	je	.L10636
	cmpb	$10, %al
	je	.L10636
	cmpb	$11, %al
	je	.L10636
	cmpb	$12, %al
	je	.L10636
.L10499:
	xorl	%edi, %edi
	movq	%rbp, %rsi
.L10929:
	movq	24(%rsp), %rdx
	call	tree_cons
	cmpq	$0, 16(%rsp)
	movq	%rax, 24(%rsp)
	je	.L10408
	movq	16(%rsp), %rdi
	movq	(%rdi), %rbp
	movq	%rbp, 16(%rsp)
.L10408:
	movq	32(%rsp), %rsi
	movq	(%rsi), %r11
	incl	44(%rsp)
	testq	%r11, %r11
	movq	%r11, 32(%rsp)
	jne	.L10822
.L10407:
	cmpq	$0, 16(%rsp)
	je	.L10823
	movq	16(%rsp), %r15
	movq	global_trees+216(%rip), %r12
	cmpq	%r12, 32(%r15)
	je	.L10823
	cmpq	$0, 64(%rsp)
	je	.L10824
	movq	64(%rsp), %r10
	movl	$.LC123, %edi
	xorl	%eax, %eax
	movq	32(%r10), %rsi
	call	error
.L10823:
	movq	24(%rsp), %rdi
	call	nreverse
	movq	%rax, %rbx
	movl	warn_format(%rip), %eax
	testl	%eax, %eax
	jne	.L10955
.L10827:
	movq	48(%rsp), %rsi
	cmpb	$121, 16(%rsi)
	je	.L10956
.L10828:
	movq	8(%rsp), %rdx
	movq	%rbx, %rcx
	xorl	%r8d, %r8d
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%rdx), %rsi
	movq	48(%rsp), %rdx
	call	build
	orb	$1, 17(%rax)
	movq	%rax, %rdi
	call	fold
	movq	8(%rax), %rcx
	movq	%rax, %rdx
	movzbl	16(%rcx), %eax
	cmpb	$5, %al
	je	.L10295
	movq	global_trees(%rip), %rsi
	cmpq	%rsi, %rdx
	je	.L10836
	cmpq	%rsi, %rcx
	je	.L10836
	cmpq	$0, 32(%rcx)
	jne	.L10295
	testb	%al, %al
	movl	%eax, %edi
	je	.L10836
	testq	%rdx, %rdx
	je	.L10839
	movzbl	16(%rdx), %ebx
	subb	$34, %bl
	cmpb	$1, %bl
	jbe	.L10957
.L10839:
	movzbl	%dil, %eax
	subl	$5, %eax
	cmpl	$16, %eax
	ja	.L10848
	mov	%eax, %r9d
	jmp	*.L10849(,%r9,8)
	.section	.rodata
	.align 8
	.align 4
.L10849:
	.quad	.L10844
	.quad	.L10848
	.quad	.L10848
	.quad	.L10848
	.quad	.L10848
	.quad	.L10843
	.quad	.L10848
	.quad	.L10848
	.quad	.L10848
	.quad	.L10848
	.quad	.L10848
	.quad	.L10848
	.quad	.L10848
	.quad	.L10845
	.quad	.L10848
	.quad	.L10841
	.quad	.L10842
	.text
.L10841:
	movl	$.LC62, %esi
.L10840:
	movq	96(%rcx), %rax
	cmpb	$1, 16(%rax)
	je	.L10958
	movq	72(%rax), %rax
	movl	$.LC71, %edi
.L10931:
	movq	32(%rax), %rsi
	xorl	%eax, %eax
	call	error
.L10930:
	movq	global_trees(%rip), %rsi
.L10836:
	movq	%rsi, %rdx
	jmp	.L10295
.L10958:
	movq	32(%rax), %rdx
	movl	$.LC70, %edi
	xorl	%eax, %eax
	call	error
	jmp	.L10930
.L10844:
	movl	$.LC65, %edi
.L10933:
	xorl	%eax, %eax
	call	error
	jmp	.L10930
.L10843:
	movl	$.LC64, %esi
	jmp	.L10840
.L10845:
	movq	24(%rcx), %rax
	testq	%rax, %rax
	je	.L10846
	cmpq	$0, 112(%rax)
	je	.L10959
	movq	8(%rcx), %rcx
	movzbl	16(%rcx), %edi
	jmp	.L10839
.L10959:
	movl	$.LC66, %edi
	jmp	.L10933
.L10846:
	movl	$.LC67, %edi
	jmp	.L10933
	.p2align 6,,7
.L10842:
	movl	$.LC63, %esi
	jmp	.L10840
.L10957:
	movq	72(%rdx), %rax
	movl	$.LC61, %edi
	jmp	.L10931
	.p2align 6,,7
.L10956:
	movq	32(%rsi), %rdi
	cmpb	$30, 16(%rdi)
	jne	.L10828
	testb	$96, 51(%rdi)
	je	.L10828
	movq	80(%rsp), %rsi
	movq	%rbx, %rdx
	call	expand_tree_builtin
	testq	%rax, %rax
	movq	%rax, %rdx
	jne	.L10295
	jmp	.L10828
	.p2align 6,,7
.L10955:
	movq	8(%rsp), %r14
	xorl	%edi, %edi
	movq	%rbx, %rdx
	movq	48(%r14), %rsi
	call	check_function_format
	jmp	.L10827
.L10824:
	movl	$.LC124, %edi
	xorl	%eax, %eax
	call	error
	jmp	.L10823
.L10636:
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r15), %ecx
	movzwl	60(%rdx), %r15d
	andl	$511, %ecx
	andl	$511, %r15d
	cmpl	%r15d, %ecx
	jge	.L10499
	movq	8(%rbp), %rbx
	movzbl	16(%rbx), %r12d
	movq	%rbx, %r13
	cmpl	$23, %r12d
	je	.L10638
	cmpl	$18, %r12d
	je	.L10638
	movzbl	16(%rbp), %ecx
	cmpb	$32, %cl
	je	.L10960
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L10701
	cmpb	$34, %cl
	je	.L10961
.L10701:
	cmpb	$116, %cl
	movq	%rbp, %rdx
	je	.L10890
	cmpb	$115, %cl
	je	.L10962
.L10710:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L10715
	cmpb	$49, %al
	je	.L10715
	cmpb	$50, %al
	je	.L10715
	cmpb	$101, %al
	je	.L10715
.L10714:
	cmpl	$10, %r12d
	je	.L10963
	cmpb	$39, %cl
	je	.L10964
.L10723:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L10728
	testb	$32, 17(%r13)
	je	.L10729
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L10730
	movq	integer_types+40(%rip), %r12
	movzwl	60(%r13), %ebx
	movzwl	60(%r12), %r13d
	andl	$511, %ebx
	andl	$511, %r13d
	cmpl	%r13d, %ebx
	je	.L10730
.L10729:
	movq	integer_types+40(%rip), %rdi
.L10919:
	movq	%rbp, %rsi
.L10920:
	call	convert
.L10922:
	movq	%rax, %rbx
.L10699:
	movq	%rbx, %rbp
	jmp	.L10499
.L10730:
	movq	integer_types+48(%rip), %rdi
	jmp	.L10919
.L10728:
	movl	flag_traditional(%rip), %r11d
	testl	%r11d, %r11d
	je	.L10731
	movl	flag_allow_single_precision(%rip), %edi
	testl	%edi, %edi
	jne	.L10731
	movq	global_trees+192(%rip), %r15
	cmpq	%r15, 128(%r13)
	je	.L10965
.L10731:
	cmpl	$5, %r12d
	je	.L10966
.L10732:
	movq	%rbp, %rbx
	jmp	.L10699
.L10966:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L10921:
	movq	global_trees(%rip), %rbx
	jmp	.L10699
.L10965:
	movq	global_trees+200(%rip), %rdi
	jmp	.L10919
	.p2align 6,,7
.L10964:
	movq	40(%rbp), %rdx
	testb	$2, 53(%rdx)
	je	.L10723
	movq	integer_types+40(%rip), %r14
	movq	40(%rdx), %rdi
	movzwl	60(%r14), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L10723
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	je	.L10729
	testb	$32, 17(%r13)
	jne	.L10730
	jmp	.L10729
	.p2align 6,,7
.L10963:
	movq	integer_types+40(%rip), %r10
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %ecx
	movzwl	60(%r10), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%ecx, %ecx
	jne	.L10722
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L10721
.L10722:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L10721:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L10919
.L10715:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbp)
	jmp	.L10714
.L10962:
	movq	32(%rbp), %rsi
	movq	8(%rbp), %r8
	cmpq	%r8, 8(%rsi)
	jne	.L10710
.L10713:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %rbp
	cmpb	$116, %cl
	jne	.L10967
.L10890:
	movq	32(%rbp), %rsi
	jmp	.L10713
.L10967:
	cmpb	$115, %cl
	jne	.L10710
	movq	32(%rsi), %rsi
	movq	8(%rbp), %r9
	cmpq	%r9, 8(%rsi)
	je	.L10713
	jmp	.L10710
.L10961:
	movl	pedantic(%rip), %edi
	testl	%edi, %edi
	jne	.L10705
	cmpb	$51, 48(%rbp)
	je	.L10705
	cmpq	$0, current_function_decl(%rip)
	je	.L10707
	movzbl	17(%rbp), %r15d
	andb	$24, %r15b
	cmpb	$16, %r15b
	je	.L10968
.L10707:
	movq	%rbp, %rsi
.L10708:
	movq	%rsi, %rbp
	movq	8(%rsi), %rbx
	movzbl	16(%rsi), %ecx
.L10705:
	movq	%rbx, %r13
	jmp	.L10701
.L10968:
	movq	104(%rbp), %rax
	testq	%rax, %rax
	je	.L10707
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L10707
	testb	$2, 17(%rax)
	je	.L10707
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L10708
	jmp	.L10707
	.p2align 6,,7
.L10960:
	movq	104(%rbp), %rbp
	movzbl	16(%rbp), %ecx
	jmp	.L10701
.L10638:
	movzbl	16(%rbp), %ecx
	movl	%r12d, %edi
	movq	%rbp, %rdx
	xorl	%r12d, %r12d
	cmpb	$116, %cl
	je	.L10886
	cmpb	$115, %cl
	je	.L10969
.L10640:
	movzbl	%cl, %r10d 
	movzbl	tree_code_type(%r10), %eax
	cmpb	$60, %al
	je	.L10646
	cmpb	$49, %al
	je	.L10646
	cmpb	$50, %al
	je	.L10646
	cmpb	$101, %al
	je	.L10646
.L10645:
	cmpl	$23, %edi
	je	.L10970
	cmpl	$18, %edi
	jne	.L10732
	movzbl	%cl, %r9d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r9), %eax
	movq	8(%r13), %r14
	cmpb	$114, %al
	je	.L10651
	cmpb	$100, %al
	je	.L10651
.L10650:
	movzbl	17(%r13), %r8d
	movzbl	62(%r13), %r10d
	movl	$1, %r9d
	movzbl	16(%r13), %edi
	movl	%r8d, %esi
	movl	%r8d, %r15d
	movl	%r10d, %ebx
	shrb	$3, %sil
	shrb	$4, %r15b
	shrb	$5, %bl
	andl	$1, %esi
	andl	%r15d, %r9d
	andl	$1, %ebx
	addl	%esi, %esi
	sall	$2, %ebx
	orl	%esi, %r9d
	xorl	%esi, %esi
	orl	%ebx, %r9d
	cmpb	$20, %dil
	je	.L10971
.L10654:
	leal	0(,%rsi,8), %r13d
	orl	%r13d, %r9d
	jne	.L10653
	testl	%edx, %edx
	jne	.L10653
	testl	%r11d, %r11d
	je	.L10652
.L10653:
	movl	%r8d, %r9d
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r9b
	movl	%r8d, %ecx
	andl	%r9d, %esi
	movl	%r10d, %r8d
	andl	$1, %ecx
	andl	$1, %r8d
	addl	%ecx, %ecx
	sall	$2, %r8d
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	orl	%r8d, %esi
	cmpb	$20, %dil
	je	.L10972
.L10656:
	leal	0(,%rcx,8), %r10d
	movq	%r14, %rdi
	orl	%r10d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%rbp), %ecx
	movq	%rax, %r14
.L10652:
	cmpb	$41, %cl
	je	.L10973
	cmpb	$47, %cl
	je	.L10974
	xorl	%r13d, %r13d
	testl	%r12d, %r12d
	je	.L10975
.L10695:
	movl	flag_isoc99(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L10696
	testl	%r13d, %r13d
	movq	%rbp, %rbx
	je	.L10699
.L10696:
	movq	%r14, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbp)
	movq	%rax, %rbx
	je	.L10976
	movl	$121, %edi
	movq	%rbp, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L10920
.L10976:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbp, %rdx
	call	build1
	movq	%rbp, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L10921
	movq	%rbp, %rdi
	call	staticp
	movzbl	17(%rbx), %ebp
	movl	%eax, %r12d
	andb	$1, %r12b
	addb	%r12b, %r12b
	andb	$-4, %bpl
	orb	%r12b, %bpl
	movb	%bpl, 17(%rbx)
	jmp	.L10699
.L10975:
	movq	%rbp, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r13d
	jmp	.L10695
	.p2align 6,,7
.L10974:
	movq	40(%rbp), %rbx
	movq	8(%rbx), %r12
	movzbl	16(%r12), %r13d
	movq	%r12, %rax
	cmpl	$23, %r13d
	je	.L10660
	cmpl	$18, %r13d
	je	.L10660
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L10977
	movl	optimize(%rip), %r14d
	testl	%r14d, %r14d
	je	.L10663
	cmpb	$34, %dl
	je	.L10978
.L10663:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L10888
	cmpb	$115, %dl
	je	.L10979
.L10672:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L10677
	cmpb	$49, %al
	je	.L10677
	cmpb	$50, %al
	je	.L10677
	cmpb	$101, %al
	je	.L10677
.L10676:
	cmpl	$10, %r13d
	je	.L10980
	cmpb	$39, %dl
	je	.L10981
.L10685:
	movq	%r12, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L10690
	testb	$32, 17(%r12)
	je	.L10691
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L10692
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r12), %r14d
	movzwl	60(%rdx), %r10d
	andl	$511, %r14d
	andl	$511, %r10d
	cmpl	%r10d, %r14d
	je	.L10692
.L10691:
	movq	integer_types+40(%rip), %rdi
.L10918:
	movq	%rbx, %rsi
	call	convert
.L10661:
	movq	8(%rax), %rsi
	movq	32(%rbp), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L10922
.L10692:
	movq	integer_types+48(%rip), %rdi
	jmp	.L10918
.L10690:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L10693
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L10693
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%r12)
	je	.L10982
.L10693:
	cmpl	$5, %r13d
	je	.L10983
	movq	%rbx, %rax
	jmp	.L10661
.L10983:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L10661
.L10982:
	movq	global_trees+200(%rip), %rdi
	jmp	.L10918
.L10981:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L10685
	movq	integer_types+40(%rip), %r9
	movq	40(%rdx), %rdi
	movzwl	60(%r9), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L10685
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L10691
	testb	$32, 17(%r12)
	jne	.L10692
	jmp	.L10691
.L10980:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r12), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L10684
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L10683
.L10684:
	testb	$32, 17(%r12)
	movl	$1, %eax
	cmovne	%eax, %esi
.L10683:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L10918
.L10677:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L10676
.L10979:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rdi, 8(%rsi)
	jne	.L10672
.L10675:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L10984
.L10888:
	movq	32(%rbx), %rsi
	jmp	.L10675
.L10984:
	cmpb	$115, %dl
	jne	.L10672
	movq	32(%rsi), %r8
	movq	8(%rbx), %r15
	cmpq	%r15, 8(%r8)
	movq	%r8, %rsi
	je	.L10675
	jmp	.L10672
.L10978:
	movl	pedantic(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L10667
	cmpb	$51, 48(%rbx)
	je	.L10667
	cmpq	$0, current_function_decl(%rip)
	je	.L10669
	movzbl	17(%rbx), %r11d
	andb	$24, %r11b
	cmpb	$16, %r11b
	je	.L10985
.L10669:
	movq	%rbx, %rsi
.L10670:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L10667:
	movq	%rax, %r12
	jmp	.L10663
.L10985:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L10669
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L10669
	testb	$2, 17(%rax)
	je	.L10669
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L10670
	jmp	.L10669
.L10977:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L10663
.L10660:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L10661
.L10973:
	movq	72(%r14), %rdi
	movq	32(%rbp), %rsi
	jmp	.L10920
	.p2align 6,,7
.L10972:
	testq	%r14, %r14
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L10656
.L10971:
	testq	%r14, %r14
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L10654
.L10651:
	movzbl	17(%rbp), %edi
	movl	$1, %r11d
	movl	%edi, %edx
	shrb	$3, %dil
	shrb	$4, %dl
	andl	%edi, %r11d
	andl	$1, %edx
	jmp	.L10650
.L10970:
	movl	$121, %edi
	movq	%rbp, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L10922
.L10646:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbp)
	jmp	.L10645
.L10969:
	movq	32(%rbp), %rsi
	cmpq	%rbx, 8(%rsi)
	jne	.L10640
.L10644:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %rbp
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r12d
	cmpb	$116, %cl
	jne	.L10986
.L10886:
	movq	32(%rbp), %rsi
	jmp	.L10644
.L10986:
	cmpb	$115, %cl
	jne	.L10640
	movq	32(%rsi), %rsi
	movq	8(%rbp), %r11
	cmpq	%r11, 8(%rsi)
	je	.L10644
	jmp	.L10640
.L10521:
	movq	8(%rbp), %rax
	movq	%rax, %rdi
	movzbl	16(%rax), %eax
	cmpb	$6, %al
	je	.L10522
	cmpb	$10, %al
	je	.L10522
	cmpb	$11, %al
	je	.L10522
	cmpb	$12, %al
	jne	.L10500
.L10522:
	movzbl	16(%rdi), %r14d
	movq	%rbp, %r12
	movq	%rdi, %rbx
	cmpl	$23, %r14d
	je	.L10524
	cmpl	$18, %r14d
	je	.L10524
	movzbl	16(%rbp), %eax
	cmpb	$32, %al
	je	.L10987
	movl	optimize(%rip), %r8d
	testl	%r8d, %r8d
	je	.L10587
	cmpb	$34, %al
	je	.L10988
.L10587:
	movzbl	16(%r12), %ecx
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L10884
	cmpb	$115, %cl
	je	.L10989
.L10596:
	movzbl	%cl, %edi 
	movzbl	tree_code_type(%rdi), %eax
	cmpb	$60, %al
	je	.L10601
	cmpb	$49, %al
	je	.L10601
	cmpb	$50, %al
	je	.L10601
	cmpb	$101, %al
	je	.L10601
.L10600:
	cmpl	$10, %r14d
	je	.L10990
	cmpb	$39, %cl
	je	.L10991
.L10609:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L10614
	testb	$32, 17(%rbx)
	je	.L10615
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L10616
	movq	integer_types+40(%rip), %r11
	movzwl	60(%rbx), %r8d
	movzwl	60(%r11), %ebx
	andl	$511, %r8d
	andl	$511, %ebx
	cmpl	%ebx, %r8d
	je	.L10616
.L10615:
	movq	integer_types+40(%rip), %rdi
.L10913:
	movq	%r12, %rsi
.L10914:
	call	convert
.L10916:
	movq	%rax, %rbx
.L10585:
	movzbl	16(%r15), %esi
	movq	8(%rbx), %rcx
	cmpb	$10, %sil
	je	.L10992
.L10619:
	movzwl	60(%rcx), %r14d
	andl	$511, %r14d
	cmpl	%r14d, 76(%rsp)
	je	.L10621
	movl	44(%rsp), %ecx
	movl	$.LC120, %edi
	incl	%ecx
.L10917:
	movq	64(%rsp), %rdx
	xorl	%esi, %esi
	call	warn_for_assignment
	jmp	.L10500
.L10621:
	movzbl	17(%r15), %eax
	movzbl	17(%rcx), %ebx
	shrb	$5, %al
	shrb	$5, %bl
	andl	$1, %eax
	andl	$1, %ebx
	cmpl	%ebx, %eax
	je	.L10500
	cmpb	$10, %sil
	je	.L10500
	movzbl	16(%rbp), %ecx
	cmpb	$25, %cl
	je	.L10993
.L10627:
	cmpb	$115, %cl
	je	.L10994
.L10629:
	movq	8(%rbp), %rcx
	movzwl	60(%r15), %esi
	movzwl	60(%rcx), %r8d
	andl	$511, %esi
	andl	$511, %r8d
	cmpl	%esi, %r8d
	jge	.L10631
	testb	$32, 17(%rcx)
	jne	.L10500
.L10631:
	testb	$32, 17(%r15)
	je	.L10633
	movl	44(%rsp), %ecx
	movl	$.LC121, %edi
	incl	%ecx
	jmp	.L10917
.L10633:
	movl	44(%rsp), %ecx
	movl	$.LC122, %edi
	incl	%ecx
	jmp	.L10917
.L10994:
	movq	32(%rbp), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L10629
	movq	%r15, %rsi
	call	int_fits_type_p
	testl	%eax, %eax
	jne	.L10500
	jmp	.L10629
.L10993:
	movq	%rbp, %rdi
	movq	%r15, %rsi
	call	int_fits_type_p
	testl	%eax, %eax
	jne	.L10500
	movzbl	16(%rbp), %ecx
	jmp	.L10627
	.p2align 6,,7
.L10992:
	movq	8(%rbp), %rdi
	movq	128(%rdi), %r12
	cmpq	%r12, 128(%r15)
	jne	.L10619
	jmp	.L10500
.L10616:
	movq	integer_types+48(%rip), %rdi
	jmp	.L10913
.L10614:
	movl	flag_traditional(%rip), %r13d
	testl	%r13d, %r13d
	je	.L10617
	movl	flag_allow_single_precision(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L10617
	movq	global_trees+192(%rip), %r9
	cmpq	%r9, 128(%rbx)
	je	.L10995
.L10617:
	cmpl	$5, %r14d
	je	.L10996
.L10618:
	movq	%r12, %rbx
	jmp	.L10585
.L10996:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L10915:
	movq	global_trees(%rip), %rbx
	jmp	.L10585
.L10995:
	movq	global_trees+200(%rip), %rdi
	jmp	.L10913
	.p2align 6,,7
.L10991:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L10609
	movq	integer_types+40(%rip), %rcx
	movq	40(%rdx), %rdi
	movzwl	60(%rcx), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L10609
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L10615
	testb	$32, 17(%rbx)
	jne	.L10616
	jmp	.L10615
	.p2align 6,,7
.L10990:
	movq	integer_types+40(%rip), %rsi
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rsi), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L10608
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L10607
.L10608:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L10607:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L10913
.L10601:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L10600
.L10989:
	movq	32(%r12), %rsi
	movq	8(%r12), %r13
	cmpq	%r13, 8(%rsi)
	jne	.L10596
.L10599:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L10997
.L10884:
	movq	32(%r12), %rsi
	jmp	.L10599
.L10997:
	cmpb	$115, %cl
	jne	.L10596
	movq	32(%rsi), %r9
	movq	8(%r12), %r10
	cmpq	%r10, 8(%r9)
	movq	%r9, %rsi
	je	.L10599
	jmp	.L10596
.L10988:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	jne	.L10590
	cmpb	$51, 48(%rbp)
	je	.L10590
	cmpq	$0, current_function_decl(%rip)
	je	.L10593
	movzbl	17(%rbp), %r11d
	andb	$24, %r11b
	cmpb	$16, %r11b
	je	.L10998
.L10593:
	movq	%rbp, %rsi
.L10594:
	movq	%rsi, %r12
.L10591:
	movq	8(%r12), %rbx
	jmp	.L10587
.L10998:
	movq	104(%rbp), %rax
	testq	%rax, %rax
	je	.L10593
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L10593
	testb	$2, 17(%rax)
	je	.L10593
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L10594
	jmp	.L10593
.L10590:
	movq	%rbp, %r12
	jmp	.L10591
	.p2align 6,,7
.L10987:
	movq	104(%rbp), %r12
	jmp	.L10587
.L10524:
	movzbl	16(%rbp), %edx
	xorl	%r13d, %r13d
	movq	%rbp, %r12
	cmpb	$116, %dl
	je	.L10859
	cmpb	$115, %dl
	je	.L10999
	movzbl	16(%rbp), %ecx
.L10526:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L10532
	cmpb	$49, %al
	je	.L10532
	cmpb	$50, %al
	je	.L10532
	cmpb	$101, %al
	je	.L10532
.L10531:
	cmpl	$23, %r14d
	je	.L11000
	cmpl	$18, %r14d
	jne	.L10618
	movzbl	%cl, %r10d 
	xorl	%edx, %edx
	xorl	%ebx, %ebx
	movzbl	tree_code_type(%r10), %eax
	movq	8(%rdi), %r11
	cmpb	$114, %al
	je	.L10537
	cmpb	$100, %al
	je	.L10537
.L10536:
	movzbl	17(%rdi), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %r14d
	shrb	$3, %r10b
	shrb	$4, %r14b
	andl	$1, %r10d
	andl	%r14d, %r9d
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rdi), %r10d
	movzbl	16(%rdi), %edi
	movl	%r10d, %esi
	shrb	$5, %sil
	andl	$1, %esi
	sall	$2, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	cmpb	$20, %dil
	je	.L11001
.L10540:
	leal	0(,%rsi,8), %r14d
	orl	%r14d, %r9d
	jne	.L10539
	testl	%edx, %edx
	jne	.L10539
	testl	%ebx, %ebx
	je	.L10538
.L10539:
	movl	%r8d, %r14d
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r14b
	movl	%r10d, %r9d
	movl	%r8d, %ecx
	andl	%r14d, %esi
	andl	$1, %r9d
	andl	$1, %ecx
	sall	$2, %r9d
	addl	%ecx, %ecx
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	orl	%r9d, %esi
	cmpb	$20, %dil
	je	.L11002
.L10542:
	leal	0(,%rcx,8), %r8d
	leal	(%rbx,%rbx), %edi
	orl	%r8d, %esi
	orl	%edx, %esi
	orl	%edi, %esi
	movq	%r11, %rdi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r11
.L10538:
	cmpb	$41, %cl
	je	.L11003
	cmpb	$47, %cl
	je	.L11004
	xorl	%r14d, %r14d
	testl	%r13d, %r13d
	je	.L11005
.L10581:
	movl	flag_isoc99(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L10582
	testl	%r14d, %r14d
	movq	%r12, %rbx
	je	.L10585
.L10582:
	movq	%r11, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L11006
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L10914
.L11006:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L10915
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %ecx
	andb	$1, %cl
	addb	%cl, %cl
	andb	$-4, %r12b
	orb	%cl, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L10585
.L11005:
	movq	%r12, %rdi
	movq	%r11, (%rsp)
	call	lvalue_p
	movq	(%rsp), %r11
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r14d
	jmp	.L10581
.L11004:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L10546
	cmpl	$18, %r14d
	je	.L10546
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L11007
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L10549
	cmpb	$34, %dl
	je	.L11008
.L10549:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L10882
	cmpb	$115, %dl
	je	.L11009
.L10558:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L10563
	cmpb	$49, %al
	je	.L10563
	cmpb	$50, %al
	je	.L10563
	cmpb	$101, %al
	je	.L10563
.L10562:
	cmpl	$10, %r14d
	je	.L11010
	cmpb	$39, %dl
	je	.L11011
.L10571:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L10576
	testb	$32, 17(%r13)
	je	.L10577
	movl	flag_traditional(%rip), %r11d
	testl	%r11d, %r11d
	jne	.L10578
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r13), %r10d
	movzwl	60(%rdx), %r13d
	andl	$511, %r10d
	andl	$511, %r13d
	cmpl	%r13d, %r10d
	je	.L10578
.L10577:
	movq	integer_types+40(%rip), %rdi
.L10912:
	movq	%rbx, %rsi
	call	convert
.L10547:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L10916
.L10578:
	movq	integer_types+48(%rip), %rdi
	jmp	.L10912
.L10576:
	movl	flag_traditional(%rip), %r9d
	testl	%r9d, %r9d
	je	.L10579
	movl	flag_allow_single_precision(%rip), %edi
	testl	%edi, %edi
	jne	.L10579
	movq	global_trees+192(%rip), %rsi
	cmpq	%rsi, 128(%r13)
	je	.L11012
.L10579:
	cmpl	$5, %r14d
	je	.L11013
	movq	%rbx, %rax
	jmp	.L10547
.L11013:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L10547
.L11012:
	movq	global_trees+200(%rip), %rdi
	jmp	.L10912
.L11011:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L10571
	movq	integer_types+40(%rip), %r8
	movq	40(%rdx), %rdi
	movzwl	60(%r8), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L10571
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L10577
	testb	$32, 17(%r13)
	jne	.L10578
	jmp	.L10577
.L11010:
	movq	integer_types+40(%rip), %r14
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %ecx
	movzwl	60(%r14), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%ecx, %ecx
	jne	.L10570
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L10569
.L10570:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L10569:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L10912
.L10563:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L10562
.L11009:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L10558
.L10561:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L11014
.L10882:
	movq	32(%rbx), %rsi
	jmp	.L10561
.L11014:
	cmpb	$115, %dl
	jne	.L10558
	movq	32(%rsi), %rdi
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%rdi)
	movq	%rdi, %rsi
	je	.L10561
	jmp	.L10558
.L11008:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L10553
	cmpb	$51, 48(%rbx)
	je	.L10553
	cmpq	$0, current_function_decl(%rip)
	je	.L10555
	movzbl	17(%rbx), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L11015
.L10555:
	movq	%rbx, %rsi
.L10556:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L10553:
	movq	%rax, %r13
	jmp	.L10549
.L11015:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L10555
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L10555
	testb	$2, 17(%rax)
	je	.L10555
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L10556
	jmp	.L10555
.L11007:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L10549
.L10546:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L10547
.L11003:
	movq	72(%r11), %rdi
	movq	32(%r12), %rsi
	jmp	.L10914
.L11002:
	testq	%r11, %r11
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L10542
.L11001:
	testq	%r11, %r11
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L10540
	.p2align 6,,7
.L10537:
	movzbl	17(%r12), %r14d
	movl	%r14d, %edx
	shrb	$3, %r14b
	shrb	$4, %dl
	movl	%r14d, %ebx
	andl	$1, %edx
	andl	$1, %ebx
	jmp	.L10536
.L11000:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L10916
.L10532:
	movl	24(%rbp), %eax
	movl	%eax, 24(%r12)
	jmp	.L10531
.L10999:
	movq	32(%rbp), %r8
	cmpq	%rbx, 8(%r8)
	je	.L10859
	movl	$115, %ecx
	jmp	.L10526
.L10859:
	movq	32(%rbp), %rsi
	movl	%edx, %ecx
.L10530:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r13d
	cmpb	$116, %cl
	jne	.L11016
	movq	32(%r12), %rsi
	jmp	.L10530
.L11016:
	cmpb	$115, %cl
	jne	.L10526
	movq	32(%rsi), %rsi
	movq	8(%r12), %r11
	cmpq	%r11, 8(%rsi)
	je	.L10530
	jmp	.L10526
.L10954:
	movq	8(%rbp), %rbx
	cmpb	$8, 16(%rbx)
	je	.L11017
	cmpb	$7, %dl
	jne	.L10517
	movq	8(%rbp), %rdi
	cmpb	$7, 16(%rdi)
	jne	.L10517
	movq	global_trees+192(%rip), %r13
	movzwl	60(%r13), %edx
	andl	$511, %edx
	cmpl	%edx, 76(%rsp)
	jne	.L10500
	movl	44(%rsp), %ecx
	movl	$.LC119, %edi
	incl	%ecx
	jmp	.L10917
	.p2align 6,,7
.L11017:
	movl	44(%rsp), %ecx
	movl	$.LC118, %edi
	incl	%ecx
	jmp	.L10917
.L10953:
	movq	8(%rbp), %r9
	movzbl	16(%r9), %eax
	cmpb	$6, %al
	je	.L10513
	cmpb	$10, %al
	je	.L10513
	cmpb	$11, %al
	je	.L10513
	cmpb	$12, %al
	jne	.L10512
.L10513:
	movl	44(%rsp), %ecx
	movl	$.LC117, %edi
	incl	%ecx
	jmp	.L10917
.L10952:
	movq	8(%rbp), %r14
	movzbl	16(%r14), %eax
	cmpb	$6, %al
	je	.L10510
	cmpb	$10, %al
	je	.L10510
	cmpb	$11, %al
	je	.L10510
	cmpb	$12, %al
	jne	.L10509
.L10510:
	movl	44(%rsp), %ecx
	movl	$.LC116, %edi
	incl	%ecx
	jmp	.L10917
.L10951:
	movq	8(%rbp), %r10
	cmpb	$7, 16(%r10)
	jne	.L10507
	movl	44(%rsp), %ecx
	movl	$.LC115, %edi
	incl	%ecx
	jmp	.L10917
	.p2align 6,,7
.L10505:
	movq	8(%rbp), %r11
	cmpb	$8, 16(%r11)
	jne	.L10504
	movl	44(%rsp), %ecx
	movl	$.LC114, %edi
	incl	%ecx
	jmp	.L10917
.L10503:
	movq	8(%rbp), %rsi
	cmpb	$7, 16(%rsi)
	jne	.L10502
	movl	44(%rsp), %ecx
	movq	64(%rsp), %rdx
	movl	$.LC113, %edi
	xorl	%esi, %esi
	incl	%ecx
	call	warn_for_assignment
	movzbl	16(%r15), %edx
	jmp	.L10502
.L10950:
	movl	44(%rsp), %esi
	movl	$.LC112, %edi
	xorl	%eax, %eax
	incl	%esi
	call	error
	jmp	.L10499
.L10497:
	movq	8(%rbp), %rbx
	cmpb	$7, 16(%rbx)
	movq	%rbx, %r8
	je	.L11018
.L10734:
	movzbl	16(%r8), %r12d
	movq	%r8, %rax
	cmpl	$23, %r12d
	je	.L10737
	cmpl	$18, %r12d
	je	.L10737
	movzbl	16(%rbp), %ecx
	cmpb	$32, %cl
	je	.L11019
	movl	optimize(%rip), %r9d
	testl	%r9d, %r9d
	je	.L10794
	cmpb	$34, %cl
	je	.L11020
.L10794:
	cmpb	$116, %cl
	movq	%rbp, %rdx
	je	.L10896
	cmpb	$115, %cl
	je	.L11021
.L10803:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L10808
	cmpb	$49, %al
	je	.L10808
	cmpb	$50, %al
	je	.L10808
	cmpb	$101, %al
	je	.L10808
.L10807:
	cmpl	$10, %r12d
	je	.L11022
	cmpb	$39, %cl
	je	.L11023
.L10813:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L10816
	testb	$32, 17(%rbx)
	je	.L10817
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L10818
	movq	integer_types+40(%rip), %r9
	movzwl	60(%rbx), %r14d
	movzwl	60(%r9), %ebx
	andl	$511, %r14d
	andl	$511, %ebx
	cmpl	%ebx, %r14d
	je	.L10818
.L10817:
	movq	integer_types+40(%rip), %rdi
.L10925:
	movq	%rbp, %rsi
.L10926:
	call	convert
.L10928:
	movq	%rax, %rbx
.L10792:
	xorl	%edi, %edi
	movq	%rbx, %rsi
	jmp	.L10929
.L10818:
	movq	integer_types+48(%rip), %rdi
	jmp	.L10925
.L10816:
	movl	flag_traditional(%rip), %ecx
	testl	%ecx, %ecx
	je	.L10819
	movl	flag_allow_single_precision(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L10819
	movq	global_trees+192(%rip), %r8
	cmpq	%r8, 128(%rbx)
	je	.L11024
.L10819:
	cmpl	$5, %r12d
	je	.L11025
.L10820:
	movq	%rbp, %rbx
	jmp	.L10792
.L11025:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L10927:
	movq	global_trees(%rip), %rbx
	jmp	.L10792
.L11024:
	movq	global_trees+200(%rip), %rdi
	jmp	.L10925
	.p2align 6,,7
.L11023:
	movq	40(%rbp), %rdx
	testb	$2, 53(%rdx)
	je	.L10813
	movq	integer_types+40(%rip), %r10
	movq	40(%rdx), %rdi
	movzwl	60(%r10), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L10813
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L10817
	testb	$32, 17(%rbx)
	jne	.L10818
	jmp	.L10817
	.p2align 6,,7
.L11022:
	movq	integer_types+40(%rip), %r15
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %r12d
	movzwl	60(%r15), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r12d, %r12d
	jne	.L10812
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L10811
.L10812:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L10811:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L10925
.L10808:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbp)
	jmp	.L10807
.L11021:
	movq	32(%rbp), %rsi
	movq	8(%rbp), %r8
	cmpq	%r8, 8(%rsi)
	jne	.L10803
	.p2align 4,,7
.L10806:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %rbp
	cmpb	$116, %cl
	jne	.L11026
.L10896:
	movq	32(%rbp), %rsi
	jmp	.L10806
.L11026:
	cmpb	$115, %cl
	jne	.L10803
	movq	32(%rsi), %r11
	movq	8(%rbp), %rdi
	cmpq	%rdi, 8(%r11)
	movq	%r11, %rsi
	je	.L10806
	jmp	.L10803
.L11020:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L10794
	cmpb	$51, 48(%rbp)
	je	.L10794
	cmpq	$0, current_function_decl(%rip)
	je	.L10800
	movzbl	17(%rbp), %ecx
	andb	$24, %cl
	cmpb	$16, %cl
	je	.L11027
.L10800:
	movq	%rbp, %rsi
.L10801:
	movq	%rsi, %rbp
	movq	8(%rsi), %rbx
.L10924:
	movzbl	16(%rbp), %ecx
	jmp	.L10794
.L11027:
	movq	104(%rbp), %rax
	testq	%rax, %rax
	je	.L10800
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L10800
	testb	$2, 17(%rax)
	je	.L10800
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L10801
	jmp	.L10800
	.p2align 6,,7
.L11019:
	movq	104(%rbp), %rbp
	jmp	.L10924
.L10737:
	movzbl	16(%rbp), %ecx
	xorl	%ebx, %ebx
	movl	%r12d, %edx
	movq	%rbp, %rdi
	cmpb	$116, %cl
	je	.L10892
	cmpb	$115, %cl
	je	.L11028
.L10739:
	movzbl	%cl, %r14d 
	movzbl	tree_code_type(%r14), %eax
	cmpb	$60, %al
	je	.L10745
	cmpb	$49, %al
	je	.L10745
	cmpb	$50, %al
	je	.L10745
	cmpb	$101, %al
	je	.L10745
.L10744:
	cmpl	$23, %edx
	je	.L11029
	cmpl	$18, %edx
	jne	.L10820
	movzbl	%cl, %r12d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r12), %eax
	movq	8(%r8), %r13
	cmpb	$114, %al
	je	.L10750
	cmpb	$100, %al
	je	.L10750
.L10749:
	movzbl	17(%r8), %edi
	movl	$1, %r9d
	movl	%edi, %r10d
	movl	%edi, %esi
	shrb	$4, %r10b
	shrb	$3, %sil
	andl	%r10d, %r9d
	andl	$1, %esi
	movzbl	62(%r8), %r10d
	movzbl	16(%r8), %r8d
	addl	%esi, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	movl	%r10d, %r15d
	shrb	$5, %r15b
	andl	$1, %r15d
	sall	$2, %r15d
	orl	%r15d, %r9d
	cmpb	$20, %r8b
	je	.L11030
.L10753:
	leal	0(,%rsi,8), %r14d
	orl	%r14d, %r9d
	jne	.L10752
	testl	%edx, %edx
	jne	.L10752
	testl	%r11d, %r11d
	je	.L10751
.L10752:
	movl	%edi, %r12d
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %dil
	shrb	$4, %r12b
	movl	%r10d, %ecx
	movl	%edi, %r9d
	andl	%r12d, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %r8b
	je	.L11031
.L10754:
	leal	0(,%rcx,8), %edi
	leal	(%r11,%r11), %r8d
	orl	%edi, %esi
	movq	%r13, %rdi
	orl	%edx, %esi
	orl	%r8d, %esi
	call	c_build_qualified_type
	movzbl	16(%rbp), %ecx
	movq	%rax, %r13
.L10751:
	cmpb	$41, %cl
	je	.L11032
	cmpb	$47, %cl
	je	.L11033
	xorl	%r12d, %r12d
	testl	%ebx, %ebx
	je	.L11034
.L10788:
	movl	flag_isoc99(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L10789
	testl	%r12d, %r12d
	movq	%rbp, %rbx
	je	.L10792
.L10789:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbp)
	movq	%rax, %rbx
	je	.L11035
	movl	$121, %edi
	movq	%rbp, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L10926
.L11035:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbp, %rdx
	call	build1
	movq	%rbp, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L10927
	movq	%rbp, %rdi
	call	staticp
	movzbl	17(%rbx), %ebp
	movl	%eax, %r14d
	andb	$1, %r14b
	addb	%r14b, %r14b
	andb	$-4, %bpl
	orb	%r14b, %bpl
	movb	%bpl, 17(%rbx)
	jmp	.L10792
.L11034:
	movq	%rbp, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r12d
	jmp	.L10788
.L11033:
	movq	40(%rbp), %rbx
	movq	8(%rbx), %r12
	movzbl	16(%r12), %r13d
	movq	%r12, %rax
	cmpl	$23, %r13d
	je	.L10758
	cmpl	$18, %r13d
	je	.L10758
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L11036
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L10761
	cmpb	$34, %dl
	je	.L11037
.L10761:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L10894
	cmpb	$115, %dl
	je	.L11038
.L10770:
	movzbl	%dl, %r9d 
	movzbl	tree_code_type(%r9), %eax
	cmpb	$60, %al
	je	.L10775
	cmpb	$49, %al
	je	.L10775
	cmpb	$50, %al
	je	.L10775
	cmpb	$101, %al
	je	.L10775
.L10774:
	cmpl	$10, %r13d
	je	.L11039
	cmpb	$39, %dl
	je	.L11040
.L10780:
	movq	%r12, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L10783
	testb	$32, 17(%r12)
	je	.L10784
	movl	flag_traditional(%rip), %edi
	testl	%edi, %edi
	jne	.L10785
	movq	integer_types+40(%rip), %rsi
	movzwl	60(%r12), %r11d
	movzwl	60(%rsi), %r12d
	andl	$511, %r11d
	andl	$511, %r12d
	cmpl	%r12d, %r11d
	je	.L10785
.L10784:
	movq	integer_types+40(%rip), %rdi
.L10923:
	movq	%rbx, %rsi
	call	convert
.L10759:
	movq	8(%rax), %rsi
	movq	32(%rbp), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L10928
.L10785:
	movq	integer_types+48(%rip), %rdi
	jmp	.L10923
	.p2align 6,,7
.L10783:
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	je	.L10786
	movl	flag_allow_single_precision(%rip), %r15d
	testl	%r15d, %r15d
	jne	.L10786
	movq	global_trees+192(%rip), %r10
	cmpq	%r10, 128(%r12)
	je	.L11041
.L10786:
	cmpl	$5, %r13d
	je	.L11042
	movq	%rbx, %rax
	jmp	.L10759
.L11042:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L10759
.L11041:
	movq	global_trees+200(%rip), %rdi
	jmp	.L10923
	.p2align 6,,7
.L11040:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L10780
	movq	integer_types+40(%rip), %r8
	movq	40(%rdx), %rdi
	movzwl	60(%r8), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L10780
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L10784
	testb	$32, 17(%r12)
	jne	.L10785
	jmp	.L10784
	.p2align 6,,7
.L11039:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r12), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L10779
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L10778
.L10779:
	testb	$32, 17(%r12)
	movl	$1, %eax
	cmovne	%eax, %esi
.L10778:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L10923
.L10775:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L10774
.L11038:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r15
	cmpq	%r15, 8(%rsi)
	jne	.L10770
.L10773:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L11043
.L10894:
	movq	32(%rbx), %rsi
	jmp	.L10773
.L11043:
	cmpb	$115, %dl
	jne	.L10770
	movq	32(%rsi), %r14
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%r14)
	movq	%r14, %rsi
	je	.L10773
	jmp	.L10770
.L11037:
	movl	pedantic(%rip), %esi
	testl	%esi, %esi
	jne	.L10765
	cmpb	$51, 48(%rbx)
	je	.L10765
	cmpq	$0, current_function_decl(%rip)
	je	.L10767
	movzbl	17(%rbx), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L11044
.L10767:
	movq	%rbx, %rsi
.L10768:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L10765:
	movq	%rax, %r12
	jmp	.L10761
.L11044:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L10767
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L10767
	testb	$2, 17(%rax)
	je	.L10767
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L10768
	jmp	.L10767
	.p2align 6,,7
.L11036:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L10761
.L10758:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L10759
.L11032:
	movq	72(%r13), %rdi
	movq	32(%rbp), %rsi
	jmp	.L10926
.L11031:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L10754
.L11030:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L10753
.L10750:
	movzbl	17(%rbp), %edi
	movl	$1, %r11d
	movl	%edi, %edx
	shrb	$3, %dil
	shrb	$4, %dl
	andl	%edi, %r11d
	andl	$1, %edx
	jmp	.L10749
.L11029:
	movl	$121, %edi
	movq	%rbp, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L10928
.L10745:
	movl	24(%rdi), %eax
	movl	%eax, 24(%rbp)
	jmp	.L10744
.L11028:
	movq	32(%rbp), %rsi
	cmpq	%rax, 8(%rsi)
	jne	.L10739
	.p2align 4,,7
.L10743:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %rbp
	movzbl	16(%rsi), %ecx
	cmove	%eax, %ebx
	cmpb	$116, %cl
	jne	.L11045
.L10892:
	movq	32(%rbp), %rsi
	jmp	.L10743
.L11045:
	cmpb	$115, %cl
	jne	.L10739
	movq	32(%rsi), %rsi
	movq	8(%rbp), %r10
	cmpq	%r10, 8(%rsi)
	je	.L10743
	jmp	.L10739
.L11018:
	movq	global_trees+200(%rip), %rdi
	movzwl	60(%rbx), %esi
	movzwl	60(%rdi), %r9d
	andl	$511, %esi
	andl	$511, %r9d
	cmpl	%r9d, %esi
	jge	.L10734
	movq	%rbp, %rsi
	call	convert
	xorl	%edi, %edi
	movq	%rax, %rsi
	jmp	.L10929
.L10949:
	movq	32(%rax), %rdx
	movl	$.LC70, %edi
	xorl	%eax, %eax
	call	error
	jmp	.L10908
.L10489:
	movl	$.LC65, %edi
.L10911:
	xorl	%eax, %eax
	call	error
	jmp	.L10908
.L10488:
	movl	$.LC64, %esi
	jmp	.L10485
.L10490:
	movq	24(%rdx), %rax
	testq	%rax, %rax
	je	.L10491
	cmpq	$0, 112(%rax)
	je	.L11046
	movq	8(%rdx), %rdx
	movzbl	16(%rdx), %ecx
	jmp	.L10484
.L11046:
	movl	$.LC66, %edi
	jmp	.L10911
.L10491:
	movl	$.LC67, %edi
	jmp	.L10911
	.p2align 6,,7
.L10487:
	movl	$.LC63, %esi
	jmp	.L10485
.L10948:
	movq	72(%rbp), %rax
	movl	$.LC61, %edi
	jmp	.L10909
	.p2align 6,,7
.L10947:
	movzbl	%cl, %r14d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r14), %eax
	movq	8(%rdi), %r13
	cmpb	$114, %al
	je	.L10428
	cmpb	$100, %al
	je	.L10428
.L10427:
	movzbl	17(%rdi), %r8d
	movl	$1, %esi
	movl	%r8d, %r10d
	movl	%r8d, %r9d
	shrb	$4, %r10b
	shrb	$3, %r9b
	andl	%r10d, %esi
	andl	$1, %r9d
	movzbl	62(%rdi), %r10d
	movzbl	16(%rdi), %edi
	addl	%r9d, %r9d
	orl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r10d, %r12d
	shrb	$5, %r12b
	andl	$1, %r12d
	sall	$2, %r12d
	orl	%r12d, %esi
	cmpb	$20, %dil
	je	.L11047
.L10431:
	leal	0(,%r9,8), %r14d
	orl	%r14d, %esi
	jne	.L10430
	testl	%edx, %edx
	jne	.L10430
	testl	%r11d, %r11d
	je	.L10429
.L10430:
	movl	%r8d, %r9d
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r9b
	movl	%r10d, %ecx
	movl	%r8d, %r12d
	andl	%r9d, %esi
	andl	$1, %ecx
	andl	$1, %r12d
	sall	$2, %ecx
	addl	%r12d, %r12d
	orl	%r12d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L11048
.L10433:
	leal	0(,%rcx,8), %r8d
	leal	(%r11,%r11), %edi
	orl	%r8d, %esi
	orl	%edx, %esi
	orl	%edi, %esi
	movq	%r13, %rdi
	call	c_build_qualified_type
	movzbl	16(%rbx), %ecx
	movq	%rax, %r13
.L10429:
	cmpb	$41, %cl
	je	.L11049
	cmpb	$47, %cl
	je	.L11050
	xorl	%r12d, %r12d
	testl	%ebp, %ebp
	je	.L11051
.L10472:
	movl	flag_isoc99(%rip), %ebp
	testl	%ebp, %ebp
	jne	.L10473
	testl	%r12d, %r12d
	je	.L10426
.L10473:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %rbp
	je	.L11052
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbp, %rdi
	movq	%rax, %rsi
.L10935:
	call	convert
.L10907:
	movq	%rax, %rbp
	jmp	.L10904
.L11052:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, %rbp
	call	mark_addressable
	testl	%eax, %eax
	jne	.L10475
	movq	global_trees(%rip), %rsi
	movq	%rsi, %rbp
	jmp	.L10425
.L10475:
	movq	%rbx, %rdi
	call	staticp
	movzbl	17(%rbp), %ebx
	movl	%eax, %edi
	andb	$1, %dil
	addb	%dil, %dil
	andb	$-4, %bl
	orb	%dil, %bl
	movb	%bl, 17(%rbp)
	jmp	.L10904
.L11051:
	movq	%rbx, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r12d
	jmp	.L10472
.L11050:
	movq	40(%rbx), %rbp
	movq	8(%rbp), %r12
	movzbl	16(%r12), %r13d
	movq	%r12, %rax
	cmpl	$23, %r13d
	je	.L10437
	cmpl	$18, %r13d
	je	.L10437
	movzbl	16(%rbp), %edx
	cmpb	$32, %dl
	je	.L11053
	movl	optimize(%rip), %esi
	testl	%esi, %esi
	je	.L10440
	cmpb	$34, %dl
	je	.L11054
.L10440:
	cmpb	$116, %dl
	movq	%rbp, %rcx
	je	.L10877
	cmpb	$115, %dl
	je	.L11055
.L10449:
	movzbl	%dl, %edi 
	movzbl	tree_code_type(%rdi), %eax
	cmpb	$60, %al
	je	.L10454
	cmpb	$49, %al
	je	.L10454
	cmpb	$50, %al
	je	.L10454
	cmpb	$101, %al
	je	.L10454
.L10453:
	cmpl	$10, %r13d
	je	.L11056
	cmpb	$39, %dl
	je	.L11057
.L10462:
	movq	%r12, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L10467
	testb	$32, 17(%r12)
	je	.L10468
	movl	flag_traditional(%rip), %esi
	testl	%esi, %esi
	jne	.L10469
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r12), %r11d
	movzwl	60(%rdx), %r12d
	andl	$511, %r11d
	andl	$511, %r12d
	cmpl	%r12d, %r11d
	je	.L10469
.L10468:
	movq	integer_types+40(%rip), %rdi
.L10903:
	movq	%rbp, %rsi
	call	convert
.L10438:
	movq	8(%rax), %rsi
	movq	32(%rbx), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L10907
.L10469:
	movq	integer_types+48(%rip), %rdi
	jmp	.L10903
.L10467:
	movl	flag_traditional(%rip), %r10d
	testl	%r10d, %r10d
	je	.L10470
	movl	flag_allow_single_precision(%rip), %r14d
	testl	%r14d, %r14d
	jne	.L10470
	movq	global_trees+192(%rip), %r9
	cmpq	%r9, 128(%r12)
	je	.L11058
.L10470:
	cmpl	$5, %r13d
	je	.L11059
	movq	%rbp, %rax
	jmp	.L10438
.L11059:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L10438
.L11058:
	movq	global_trees+200(%rip), %rdi
	jmp	.L10903
	.p2align 6,,7
.L11057:
	movq	40(%rbp), %rdx
	testb	$2, 53(%rdx)
	je	.L10462
	movq	integer_types+40(%rip), %r8
	movq	40(%rdx), %rdi
	movzwl	60(%r8), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L10462
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L10468
	testb	$32, 17(%r12)
	jne	.L10469
	jmp	.L10468
	.p2align 6,,7
.L11056:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r12), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L10461
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L10460
.L10461:
	testb	$32, 17(%r12)
	movl	$1, %eax
	cmovne	%eax, %esi
.L10460:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L10903
.L10454:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbp)
	jmp	.L10453
.L11055:
	movq	32(%rbp), %rsi
	movq	8(%rbp), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L10449
.L10452:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbp
	cmpb	$116, %dl
	jne	.L11060
.L10877:
	movq	32(%rbp), %rsi
	jmp	.L10452
.L11060:
	cmpb	$115, %dl
	jne	.L10449
	movq	32(%rsi), %r9
	movq	8(%rbp), %r14
	cmpq	%r14, 8(%r9)
	movq	%r9, %rsi
	je	.L10452
	jmp	.L10449
.L11054:
	movl	pedantic(%rip), %r11d
	testl	%r11d, %r11d
	jne	.L10444
	cmpb	$51, 48(%rbp)
	je	.L10444
	cmpq	$0, current_function_decl(%rip)
	je	.L10446
	movzbl	17(%rbp), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L11061
.L10446:
	movq	%rbp, %rsi
.L10447:
	movq	%rsi, %rbp
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L10444:
	movq	%rax, %r12
	jmp	.L10440
.L11061:
	movq	104(%rbp), %rax
	testq	%rax, %rax
	je	.L10446
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L10446
	testb	$2, 17(%rax)
	je	.L10446
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L10447
	jmp	.L10446
	.p2align 6,,7
.L11053:
	movq	104(%rbp), %rbp
	movzbl	16(%rbp), %edx
	jmp	.L10440
.L10437:
	movq	%rbp, %rdi
	call	default_function_array_conversion
	jmp	.L10438
.L11049:
	movq	72(%r13), %rdi
	movq	32(%rbx), %rsi
	jmp	.L10935
.L11048:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L10433
.L11047:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %r9d
	jmp	.L10431
.L10428:
	movzbl	17(%rbx), %r8d
	movl	$1, %r11d
	movl	%r8d, %edx
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	%r8d, %r11d
	andl	$1, %edx
	jmp	.L10427
.L10946:
	movl	$121, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L10907
.L10423:
	movl	24(%r8), %eax
	movl	%eax, 24(%rbx)
	jmp	.L10422
.L10945:
	movq	32(%rbx), %rsi
	cmpq	%rdi, 8(%rsi)
	jne	.L10417
	.p2align 4,,7
.L10421:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %rbx
	movzbl	16(%rsi), %ecx
	cmove	%eax, %ebp
	cmpb	$116, %cl
	jne	.L11062
.L10875:
	movq	32(%rbx), %rsi
	jmp	.L10421
.L11062:
	cmpb	$115, %cl
	jne	.L10417
	movq	32(%rsi), %r9
	movq	8(%rbx), %r12
	cmpq	%r12, 8(%r9)
	movq	%r9, %rsi
	je	.L10421
	jmp	.L10417
.L10944:
	movq	32(%rbx), %rbx
	movzbl	16(%rbx), %ecx
	jmp	.L10415
.L10943:
	cmpq	$0, 64(%rsp)
	jne	.L10897
	movl	$.LC111, %edi
	xorl	%eax, %eax
	call	error
	jmp	.L10407
.L10897:
	movq	64(%rsp), %r15
	movl	$.LC110, %edi
	xorl	%eax, %eax
	movq	32(%r15), %rsi
	call	error
	jmp	.L10407
.L10399:
	movq	integer_types+48(%rip), %rdi
	jmp	.L10899
.L10397:
	movl	flag_traditional(%rip), %r10d
	testl	%r10d, %r10d
	je	.L10400
	movl	flag_allow_single_precision(%rip), %r14d
	testl	%r14d, %r14d
	jne	.L10400
	movq	global_trees+192(%rip), %r8
	cmpq	%r8, 128(%r12)
	je	.L11063
.L10400:
	cmpl	$5, %ebp
	je	.L11064
.L10401:
	movq	%rbx, %rbp
	jmp	.L10368
.L11064:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L10901:
	movq	global_trees(%rip), %rbp
	jmp	.L10368
.L11063:
	movq	global_trees+200(%rip), %rdi
	jmp	.L10899
	.p2align 6,,7
.L10941:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L10392
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%rdi), %esi
	movq	40(%rdx), %rdi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L10392
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	je	.L10398
	testb	$32, 17(%r12)
	jne	.L10399
	jmp	.L10398
	.p2align 6,,7
.L10940:
	movq	integer_types+40(%rip), %r11
	movzwl	60(%r12), %edx
	movl	flag_traditional(%rip), %ecx
	movzwl	60(%r11), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%ecx, %ecx
	jne	.L10391
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L10390
.L10391:
	testb	$32, 17(%r12)
	movl	$1, %eax
	cmovne	%eax, %esi
.L10390:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L10899
.L10384:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L10383
.L10939:
	movq	32(%rbx), %rdi
	movq	8(%rbx), %r14
	cmpq	%r14, 8(%rdi)
	jne	.L10379
	.p2align 4,,7
.L10382:
	movzbl	16(%rdi), %ecx
	movq	%rdi, %rbx
	cmpb	$116, %cl
	jne	.L11065
.L10873:
	movq	32(%rbx), %rdi
	jmp	.L10382
.L11065:
	cmpb	$115, %cl
	jne	.L10379
	movq	32(%rdi), %r15
	movq	8(%rbx), %r13
	cmpq	%r13, 8(%r15)
	movq	%r15, %rdi
	je	.L10382
	jmp	.L10379
.L10938:
	movl	pedantic(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L10374
	cmpb	$51, 48(%rbx)
	je	.L10374
	cmpq	$0, current_function_decl(%rip)
	je	.L10376
	movzbl	17(%rbx), %r8d
	andb	$24, %r8b
	cmpb	$16, %r8b
	je	.L11066
.L10376:
	movq	%rbx, %rdi
.L10377:
	movq	%rdi, %rbx
	movzbl	16(%rdi), %ecx
	movq	8(%rdi), %rax
.L10374:
	movq	%rax, %r12
	jmp	.L10370
.L11066:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L10376
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L10376
	testb	$2, 17(%rax)
	je	.L10376
	cmpb	$46, %dl
	movq	%rax, %rdi
	jne	.L10377
	jmp	.L10376
	.p2align 6,,7
.L10937:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %ecx
	jmp	.L10370
.L10307:
	movl	%ebp, %edx
	movq	%rbx, %rsi
	xorl	%ebp, %ebp
	cmpb	$116, %cl
	je	.L10869
	cmpb	$115, %cl
	je	.L11067
.L10309:
	movzbl	%cl, %r11d 
	movzbl	tree_code_type(%r11), %eax
	cmpb	$60, %al
	je	.L10315
	cmpb	$49, %al
	je	.L10315
	cmpb	$50, %al
	je	.L10315
	cmpb	$101, %al
	je	.L10315
.L10314:
	cmpl	$23, %edx
	je	.L11068
	cmpl	$18, %edx
	jne	.L10401
	movzbl	%cl, %r14d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r14), %eax
	movq	8(%r12), %r13
	cmpb	$114, %al
	je	.L10320
	cmpb	$100, %al
	je	.L10320
.L10319:
	movzbl	17(%r12), %r8d
	movl	$1, %esi
	movl	%r8d, %r9d
	movl	%r8d, %r10d
	shrb	$3, %r9b
	shrb	$4, %r10b
	andl	$1, %r9d
	andl	%r10d, %esi
	xorl	%r10d, %r10d
	addl	%r9d, %r9d
	orl	%r9d, %esi
	movzbl	62(%r12), %r9d
	movl	%r9d, %edi
	shrb	$5, %dil
	andl	$1, %edi
	sall	$2, %edi
	orl	%edi, %esi
	movzbl	16(%r12), %edi
	cmpb	$20, %dil
	je	.L11069
.L10323:
	leal	0(,%r10,8), %r12d
	orl	%r12d, %esi
	jne	.L10322
	testl	%edx, %edx
	jne	.L10322
	testl	%r11d, %r11d
	je	.L10321
.L10322:
	movl	%r8d, %r14d
	shrb	$5, %r9b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r14b
	movl	%r8d, %ecx
	andl	%r14d, %esi
	movl	%r9d, %r8d
	andl	$1, %ecx
	andl	$1, %r8d
	addl	%ecx, %ecx
	sall	$2, %r8d
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	orl	%r8d, %esi
	cmpb	$20, %dil
	je	.L11070
.L10325:
	leal	0(,%rcx,8), %r15d
	movq	%r13, %rdi
	orl	%r15d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%rbx), %ecx
	movq	%rax, %r13
.L10321:
	cmpb	$41, %cl
	je	.L11071
	cmpb	$47, %cl
	je	.L11072
	xorl	%r12d, %r12d
	testl	%ebp, %ebp
	je	.L11073
.L10364:
	movl	flag_isoc99(%rip), %ebp
	testl	%ebp, %ebp
	jne	.L10365
	testl	%r12d, %r12d
	movq	%rbx, %rbp
	je	.L10368
.L10365:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %rbp
	je	.L11074
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbp, %rdi
	movq	%rax, %rsi
	jmp	.L10900
.L11074:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, %rbp
	call	mark_addressable
	testl	%eax, %eax
	je	.L10901
	movq	%rbx, %rdi
	call	staticp
	movzbl	17(%rbp), %ebx
	movl	%eax, %edi
	andb	$1, %dil
	addb	%dil, %dil
	andb	$-4, %bl
	orb	%dil, %bl
	movb	%bl, 17(%rbp)
	jmp	.L10368
.L11073:
	movq	%rbx, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r12d
	jmp	.L10364
.L11072:
	movq	40(%rbx), %rbp
	movq	8(%rbp), %r12
	movzbl	16(%r12), %r13d
	movq	%r12, %rax
	cmpl	$23, %r13d
	je	.L10329
	cmpl	$18, %r13d
	je	.L10329
	movzbl	16(%rbp), %edx
	cmpb	$32, %dl
	je	.L11075
	movl	optimize(%rip), %esi
	testl	%esi, %esi
	je	.L10332
	cmpb	$34, %dl
	je	.L11076
.L10332:
	cmpb	$116, %dl
	movq	%rbp, %rcx
	je	.L10871
	cmpb	$115, %dl
	je	.L11077
.L10341:
	movzbl	%dl, %r14d 
	movzbl	tree_code_type(%r14), %eax
	cmpb	$60, %al
	je	.L10346
	cmpb	$49, %al
	je	.L10346
	cmpb	$50, %al
	je	.L10346
	cmpb	$101, %al
	je	.L10346
.L10345:
	cmpl	$10, %r13d
	je	.L11078
	cmpb	$39, %dl
	je	.L11079
.L10354:
	movq	%r12, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L10359
	testb	$32, 17(%r12)
	je	.L10360
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L10361
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r12), %esi
	movzwl	60(%rdx), %r12d
	andl	$511, %esi
	andl	$511, %r12d
	cmpl	%r12d, %esi
	je	.L10361
.L10360:
	movq	integer_types+40(%rip), %rdi
.L10898:
	movq	%rbp, %rsi
	call	convert
.L10330:
	movq	8(%rax), %rsi
	movq	32(%rbx), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L10902
.L10361:
	movq	integer_types+48(%rip), %rdi
	jmp	.L10898
.L10359:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L10362
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L10362
	movq	global_trees+192(%rip), %r11
	cmpq	%r11, 128(%r12)
	je	.L11080
.L10362:
	cmpl	$5, %r13d
	je	.L11081
	movq	%rbp, %rax
	jmp	.L10330
.L11081:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L10330
.L11080:
	movq	global_trees+200(%rip), %rdi
	jmp	.L10898
	.p2align 6,,7
.L11079:
	movq	40(%rbp), %rdx
	testb	$2, 53(%rdx)
	je	.L10354
	movq	integer_types+40(%rip), %r15
	movq	40(%rdx), %rdi
	movzwl	60(%r15), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L10354
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L10360
	testb	$32, 17(%r12)
	jne	.L10361
	jmp	.L10360
	.p2align 6,,7
.L11078:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r12), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L10353
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L10352
.L10353:
	testb	$32, 17(%r12)
	movl	$1, %eax
	cmovne	%eax, %esi
.L10352:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L10898
.L10346:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbp)
	jmp	.L10345
.L11077:
	movq	32(%rbp), %rsi
	movq	8(%rbp), %r9
	cmpq	%r9, 8(%rsi)
	jne	.L10341
.L10344:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbp
	cmpb	$116, %dl
	jne	.L11082
.L10871:
	movq	32(%rbp), %rsi
	jmp	.L10344
.L11082:
	cmpb	$115, %dl
	jne	.L10341
	movq	32(%rsi), %r8
	movq	8(%rbp), %r10
	cmpq	%r10, 8(%r8)
	movq	%r8, %rsi
	je	.L10344
	jmp	.L10341
.L11076:
	movl	pedantic(%rip), %r11d
	testl	%r11d, %r11d
	jne	.L10336
	cmpb	$51, 48(%rbp)
	je	.L10336
	cmpq	$0, current_function_decl(%rip)
	je	.L10338
	movzbl	17(%rbp), %edi
	andb	$24, %dil
	cmpb	$16, %dil
	je	.L11083
.L10338:
	movq	%rbp, %rsi
.L10339:
	movq	%rsi, %rbp
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L10336:
	movq	%rax, %r12
	jmp	.L10332
.L11083:
	movq	104(%rbp), %rax
	testq	%rax, %rax
	je	.L10338
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L10338
	testb	$2, 17(%rax)
	je	.L10338
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L10339
	jmp	.L10338
	.p2align 6,,7
.L11075:
	movq	104(%rbp), %rbp
	movzbl	16(%rbp), %edx
	jmp	.L10332
.L10329:
	movq	%rbp, %rdi
	call	default_function_array_conversion
	jmp	.L10330
.L11071:
	movq	72(%r13), %rdi
	movq	32(%rbx), %rsi
	jmp	.L10900
.L11070:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L10325
.L11069:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %r10d
	jmp	.L10323
.L10320:
	movzbl	17(%rbx), %r15d
	movl	$1, %r11d
	movl	%r15d, %edx
	shrb	$3, %r15b
	shrb	$4, %dl
	andl	%r15d, %r11d
	andl	$1, %edx
	jmp	.L10319
.L11068:
	movl	$121, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L10902
.L10315:
	movl	24(%rsi), %eax
	movl	%eax, 24(%rbx)
	jmp	.L10314
.L11067:
	movq	32(%rbx), %rdi
	cmpq	%r12, 8(%rdi)
	jne	.L10309
	.p2align 4,,7
.L10313:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rdi, %rbx
	movzbl	16(%rdi), %ecx
	cmove	%eax, %ebp
	cmpb	$116, %cl
	jne	.L11084
.L10869:
	movq	32(%rbx), %rdi
	jmp	.L10313
.L11084:
	cmpb	$115, %cl
	jne	.L10309
	movq	32(%rdi), %rdi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rdi)
	je	.L10313
	jmp	.L10309
.L10936:
	movq	72(%rbx), %rdx
	movq	%rdx, 64(%rsp)
	cmpq	$0, 120(%rbx)
	je	.L11085
.L10303:
	movzbl	17(%rbx), %eax
	movq	8(%rbx), %rdi
	testb	$16, %al
	setne	%r9b
	movzbl	%r9b, %esi
	movl	%esi, %ecx
	orl	$2, %ecx
	andb	$8, %al
	cmovne	%ecx, %esi
	call	build_qualified_type
	movq	%rbx, 56(%rsp)
	movq	%rax, %rdi
	call	build_pointer_type
	movq	56(%rsp), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	movq	%rax, 48(%rsp)
	jmp	.L10305
.L11085:
	movq	%rbx, %rdi
	call	*lang_set_decl_assembler_name(%rip)
	jmp	.L10303
	.p2align 6,,7
.L10300:
	movzbl	16(%rax), %ecx
	movq	%rax, %rbx
	leal	-114(%rcx), %esi
	cmpb	$2, %sil
	ja	.L10297
	movq	32(%rax), %rax
	cmpq	%rdx, %rax
	je	.L10297
	movq	8(%rax), %rdi
	cmpq	%rdi, 8(%rbx)
	je	.L10300
	jmp	.L10297
.L10848:
	movl	$.LC68, %edi
	movl	$163, %esi
	movl	$.LC69, %edx
	call	fancy_abort
.LFE27:
.Lfe27:
	.size	build_function_call,.Lfe27-build_function_call
	.section	.rodata.str1.32
	.align 32
.LC133:
	.string	"comparisons like X<=Y<=Z do not have their mathematical meaning"
	.align 32
.LC132:
	.string	"suggest parentheses around comparison in operand of &"
	.align 32
.LC131:
	.string	"suggest parentheses around + or - in operand of &"
	.align 32
.LC130:
	.string	"suggest parentheses around comparison in operand of ^"
	.align 32
.LC129:
	.string	"suggest parentheses around arithmetic in operand of ^"
	.align 32
.LC128:
	.string	"suggest parentheses around comparison in operand of |"
	.align 32
.LC127:
	.string	"suggest parentheses around arithmetic in operand of |"
	.align 32
.LC126:
	.string	"suggest parentheses around && within ||"
	.align 32
.LC125:
	.string	"suggest parentheses around + or - inside shift"
	.text
	.align 2
	.p2align 4,,15
.globl parser_build_binary_op
	.type	parser_build_binary_op,@function
parser_build_binary_op:
.LFB28:
	pushq	%r15
.LCFI111:
	movl	$1, %ecx
	xorl	%r15d, %r15d
	pushq	%r14
.LCFI112:
	xorl	%r14d, %r14d
	pushq	%r13
.LCFI113:
	movq	%rdx, %r13
	pushq	%r12
.LCFI114:
	movl	%edi, %r12d
	pushq	%rbp
.LCFI115:
	pushq	%rbx
.LCFI116:
	movq	%rsi, %rbx
	subq	$8, %rsp
.LCFI117:
	call	build_binary_op
	movzbq	16(%rbx), %rcx
	movq	%rax, %rbp
	cmpb	$0, 16(%rbp)
	movzbl	tree_code_type(%rcx), %edx
	movzbq	16(%r13), %rcx
	movzbl	tree_code_type(%rcx), %eax
	jne	.L11508
	movq	global_trees(%rip), %rax
.L11507:
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
	.p2align 6,,7
.L11508:
	cmpb	$60, %dl
	je	.L11510
	cmpb	$49, %dl
	je	.L11510
	cmpb	$50, %dl
	je	.L11510
	cmpb	$101, %dl
	je	.L11510
.L11509:
	cmpb	$60, %al
	je	.L11512
	cmpb	$49, %al
	je	.L11512
	cmpb	$50, %al
	je	.L11512
	cmpb	$101, %al
	je	.L11512
.L11511:
	movl	warn_parentheses(%rip), %eax
	testl	%eax, %eax
	je	.L11513
	leal	-82(%r12), %edx
	cmpl	$1, %edx
	ja	.L11514
	leal	-59(%r15), %esi
	cmpl	$1, %esi
	jbe	.L11516
	cmpl	$59, %r14d
	je	.L11516
	cmpl	$60, %r14d
	je	.L11516
.L11514:
	cmpl	$92, %r12d
	je	.L11540
.L11517:
	cmpl	$86, %r12d
	je	.L11541
.L11520:
	cmpl	$87, %r12d
	je	.L11542
.L11525:
	cmpl	$88, %r12d
	je	.L11543
.L11513:
	movslq	%r12d,%rdi
	cmpb	$60, tree_code_type(%rdi)
	je	.L11544
.L11535:
	movq	%rbx, %rsi
	movq	%rbp, %rdi
	call	unsigned_conversion_warning
	movq	%rbp, %rdi
	movq	%r13, %rsi
	call	unsigned_conversion_warning
	movq	%rbp, %rdi
	call	overflow_warning
	movzbq	16(%rbp), %rbx
	movzbl	tree_code_type(%rbx), %eax
	cmpb	$60, %al
	je	.L11538
	cmpb	$49, %al
	je	.L11538
	cmpb	$50, %al
	je	.L11538
	cmpb	$101, %al
	je	.L11538
	movq	8(%rbp), %rsi
	movzbl	17(%rbp), %r14d
	movq	%rbp, %rdx
	movl	$116, %edi
	call	build1
	movl	%r12d, 24(%rax)
	shrb	$1, %r14b
	movq	%rax, %rbp
	movzbl	17(%rax), %r12d
	andl	$1, %r14d
	leal	(%r14,%r14), %r13d
	andb	$-3, %r12b
	orb	%r13b, %r12b
	movb	%r12b, 17(%rax)
.L11539:
	movq	%rbp, %rax
	jmp	.L11507
	.p2align 6,,7
.L11538:
	movl	%r12d, 24(%rbp)
	jmp	.L11539
	.p2align 6,,7
.L11544:
	movl	extra_warnings(%rip), %eax
	testl	%eax, %eax
	je	.L11535
	movslq	%r15d,%r8
	cmpb	$60, tree_code_type(%r8)
	je	.L11536
	movslq	%r14d,%r15
	cmpb	$60, tree_code_type(%r15)
	jne	.L11535
.L11536:
	movl	$.LC133, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L11535
.L11543:
	leal	-59(%r15), %ecx
	cmpl	$1, %ecx
	jbe	.L11532
	cmpl	$59, %r14d
	je	.L11532
	cmpl	$60, %r14d
	je	.L11532
.L11531:
	movslq	%r15d,%rdx
	cmpb	$60, tree_code_type(%rdx)
	je	.L11534
	movslq	%r14d,%rsi
	cmpb	$60, tree_code_type(%rsi)
	jne	.L11513
.L11534:
	movl	$.LC132, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L11513
.L11532:
	movl	$.LC131, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L11531
.L11542:
	cmpl	$88, %r15d
	je	.L11527
	cmpl	$59, %r15d
	je	.L11527
	cmpl	$60, %r15d
	je	.L11527
	cmpl	$88, %r14d
	je	.L11527
	cmpl	$59, %r14d
	je	.L11527
	cmpl	$60, %r14d
	je	.L11527
.L11526:
	movslq	%r15d,%r10
	cmpb	$60, tree_code_type(%r10)
	je	.L11529
	movslq	%r14d,%r11
	cmpb	$60, tree_code_type(%r11)
	jne	.L11525
.L11529:
	movl	$.LC130, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L11525
.L11527:
	movl	$.LC129, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L11526
.L11541:
	leal	-87(%r15), %edi
	cmpl	$1, %edi
	jbe	.L11522
	cmpl	$59, %r15d
	je	.L11522
	cmpl	$60, %r15d
	je	.L11522
	cmpl	$88, %r14d
	je	.L11522
	cmpl	$87, %r14d
	je	.L11522
	cmpl	$59, %r14d
	je	.L11522
	cmpl	$60, %r14d
	je	.L11522
.L11521:
	movslq	%r15d,%r8
	cmpb	$60, tree_code_type(%r8)
	je	.L11524
	movslq	%r14d,%r9
	cmpb	$60, tree_code_type(%r9)
	jne	.L11520
.L11524:
	movl	$.LC128, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L11520
.L11522:
	movl	$.LC127, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L11521
.L11540:
	cmpl	$91, %r15d
	je	.L11519
	cmpl	$91, %r14d
	jne	.L11517
.L11519:
	movl	$.LC126, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L11517
.L11516:
	movl	$.LC125, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L11514
	.p2align 6,,7
.L11512:
	movl	24(%r13), %r14d
	jmp	.L11511
	.p2align 6,,7
.L11510:
	movl	24(%rbx), %r15d
	jmp	.L11509
.LFE28:
.Lfe28:
	.size	parser_build_binary_op,.Lfe28-parser_build_binary_op
	.section	.rodata.str1.32
	.align 32
.LC134:
	.string	"left-hand operand of comma expression has no effect"
	.text
	.align 2
	.p2align 4,,15
.globl build_compound_expr
	.type	build_compound_expr,@function
build_compound_expr:
.LFB29:
	subq	$24, %rsp
.LCFI118:
	movq	%rbx, 8(%rsp)
.LCFI119:
	movq	%rbp, 16(%rsp)
.LCFI120:
	movq	%rdi, %rbx
	movq	(%rdi), %rdi
	testq	%rdi, %rdi
	jne	.L11546
	movq	32(%rbx), %rbp
.L11609:
	movq	%rbp, %rax
	movq	8(%rsp), %rbx
	movq	16(%rsp), %rbp
	addq	$24, %rsp
	ret
	.p2align 6,,7
.L11546:
	xorl	%esi, %esi
	call	internal_build_compound_expr
	movq	32(%rbx), %rdi
	movq	%rax, %rbp
	testb	$1, 17(%rdi)
	jne	.L11610
	movl	extra_warnings(%rip), %eax
	testl	%eax, %eax
	jne	.L11612
	movl	warn_unused_value(%rip), %eax
	testl	%eax, %eax
	je	.L11611
.L11612:
	cmpb	$114, 16(%rdi)
	je	.L11619
.L11613:
	movl	$.LC134, %edi
	xorl	%eax, %eax
	call	warning
.L11611:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	je	.L11609
.L11615:
	movq	8(%rbp), %rsi
	movq	32(%rbx), %rdx
	movq	%rbp, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rbp
	jmp	.L11609
.L11619:
	movq	8(%rdi), %rdx
	cmpb	$5, 16(%rdx)
	jne	.L11613
	jmp	.L11611
	.p2align 6,,7
.L11610:
	movl	warn_unused_value(%rip), %edx
	testl	%edx, %edx
	je	.L11615
	call	warn_if_unused_value
	jmp	.L11615
.LFE29:
.Lfe29:
	.size	build_compound_expr,.Lfe29-build_compound_expr
	.section	.rodata.str1.1
.LC135:
	.string	"cast specifies array type"
.LC136:
	.string	"cast specifies function type"
	.section	.rodata.str1.32
	.align 32
.LC157:
	.string	"cast to pointer from integer of different size"
	.align 32
.LC156:
	.string	"cast does not match function type"
	.align 32
.LC155:
	.string	"cast from pointer to integer of different size"
	.align 32
.LC153:
	.string	"cast discards qualifiers from pointer target type"
	.align 32
.LC152:
	.string	"cast adds new qualifiers to function type"
	.align 32
.LC151:
	.string	"cast to union type from type not present in union"
	.align 32
.LC149:
	.string	"variable-sized object may not be initialized"
	.align 32
.LC142:
	.string	"(near initialization for `%s')"
	.section	.rodata.str1.1
.LC141:
	.string	"[%d]"
.LC150:
	.string	"invalid initializer"
.LC147:
	.string	"initialization"
	.section	.rodata.str1.32
	.align 32
.LC146:
	.string	"initializer element is not constant"
	.align 32
.LC148:
	.string	"initializer element is not computable at load time"
	.align 32
.LC145:
	.string	"array initialized from non-constant array expression"
	.align 32
.LC144:
	.string	"initializer-string for array of chars is too long"
	.align 32
.LC143:
	.string	"int-array initialized from non-wide string"
	.align 32
.LC140:
	.string	"char-array initialized from wide string"
	.align 32
.LC138:
	.string	"ISO C forbids casts to union type"
	.align 32
.LC137:
	.string	"ISO C forbids casting nonscalar to the same type"
	.text
	.align 2
	.p2align 4,,15
.globl build_c_cast
	.type	build_c_cast,@function
build_c_cast:
.LFB30:
	pushq	%rbp
.LCFI121:
	movq	%rsp, %rbp
.LCFI122:
	pushq	%r15
.LCFI123:
	pushq	%r14
.LCFI124:
	pushq	%r13
.LCFI125:
	movq	%rsi, %r13
	pushq	%r12
.LCFI126:
	pushq	%rbx
.LCFI127:
	movq	%rsi, %rbx
	subq	$152, %rsp
.LCFI128:
	movq	global_trees(%rip), %rax
	cmpq	%rax, %rdi
	je	.L12720
	cmpq	%rax, %rsi
	je	.L12720
	movq	128(%rdi), %r14
	movl	$.LC135, %edi
	movzbl	16(%r14), %ecx
	cmpb	$18, %cl
	je	.L12721
	cmpb	$23, %cl
	movl	$.LC136, %edi
	je	.L12721
	movq	8(%rsi), %rdi
	cmpq	128(%rdi), %r14
	je	.L12733
	cmpb	$21, %cl
	je	.L12734
	cmpq	global_trees+216(%rip), %r14
	je	.L12735
	movzbl	16(%rsi), %ecx
	xorl	%r12d, %r12d
	movzbl	16(%rdi), %edx
	movq	%rsi, %r8
	cmpb	$116, %cl
	je	.L12701
	cmpb	$115, %cl
	je	.L12736
.L12502:
	movzbl	%cl, %r10d 
	movzbl	tree_code_type(%r10), %eax
	cmpb	$60, %al
	je	.L12508
	cmpb	$49, %al
	je	.L12508
	cmpb	$50, %al
	je	.L12508
	cmpb	$101, %al
	je	.L12508
.L12507:
	cmpl	$23, %edx
	je	.L12737
	cmpl	$18, %edx
	je	.L12738
	movq	%rbx, %r12
.L12510:
	movl	warn_cast_qual(%rip), %eax
	movq	8(%r12), %rbx
	testl	%eax, %eax
	je	.L12706
	movzbl	16(%r14), %ecx
	cmpb	$13, %cl
	je	.L12739
.L12575:
	cmpb	$6, %cl
	je	.L12740
.L12576:
	movl	warn_bad_function_cast(%rip), %eax
	testl	%eax, %eax
	je	.L12577
	cmpb	$53, 16(%r12)
	je	.L12741
.L12577:
	cmpb	$13, %cl
	je	.L12742
.L12578:
	movq	%r14, %rdi
	movq	%r12, %rsi
	call	convert
	cmpb	$25, 16(%rax)
	movq	%rax, %rbx
	je	.L12743
.L12707:
	movl	pedantic(%rip), %edx
.L11700:
	testl	%edx, %edx
	je	.L12580
	cmpb	$25, 16(%rbx)
	je	.L12744
.L12580:
	cmpq	%r13, %rbx
	je	.L12745
.L11692:
	leaq	-40(%rbp), %rsp
	movq	%rbx, %rax
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
.L12745:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	je	.L11692
	movq	%rbx, %rdi
	call	non_lvalue
.L12720:
	movq	%rax, %rbx
	jmp	.L11692
.L12744:
	cmpb	$25, 16(%r13)
	jne	.L12580
	movq	8(%r13), %r12
	cmpb	$6, 16(%r12)
	je	.L12580
	movq	%rbx, %rdi
	call	non_lvalue
	movq	%rax, %rbx
	jmp	.L12580
	.p2align 6,,7
.L12743:
	movzbl	18(%r12), %edi
	movzbl	18(%rax), %r14d
	andb	$8, %dil
	andb	$-9, %r14b
	orb	%dil, %r14b
	movb	%r14b, 18(%rax)
	andb	$-5, %r14b
	movzbl	18(%r12), %esi
	andb	$4, %sil
	orb	%sil, %r14b
	movb	%r14b, 18(%rax)
	jmp	.L12707
.L12742:
	cmpb	$6, 16(%rbx)
	jne	.L12578
	movzwl	60(%r14), %r9d
	movzwl	60(%rbx), %r10d
	andl	$511, %r9d
	andl	$511, %r10d
	cmpl	%r10d, %r9d
	je	.L12578
	testb	$2, 17(%r12)
	jne	.L12578
	movl	$.LC157, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L12578
.L12741:
	cmpb	16(%rbx), %cl
	je	.L12577
	movl	$.LC156, %edi
	xorl	%eax, %eax
	call	warning
	movzbl	16(%r14), %ecx
	jmp	.L12577
.L12740:
	cmpb	$13, 16(%rbx)
	jne	.L12576
	movzwl	60(%r14), %r15d
	movzwl	60(%rbx), %r8d
	andl	$511, %r15d
	andl	$511, %r8d
	cmpl	%r8d, %r15d
	je	.L12576
	testb	$2, 17(%r12)
	jne	.L12576
	movl	$.LC155, %edi
	xorl	%eax, %eax
	call	warning
	movzbl	16(%r14), %ecx
	jmp	.L12576
.L12739:
	cmpb	$13, 16(%rbx)
	jne	.L12575
	movq	%r14, %rdi
	movq	%rbx, %rsi
	xorl	%r10d, %r10d
	xorl	%r15d, %r15d
.L12562:
	movq	8(%rsi), %rsi
	movq	8(%rdi), %rdi
	movzbl	16(%rsi), %r8d
	cmpb	$23, %r8b
	je	.L12746
	movzbl	16(%rdi), %r9d
.L12565:
	movzbl	17(%rsi), %ecx
	movzbl	62(%rsi), %r11d
	xorl	%eax, %eax
	movl	%ecx, %edx
	shrb	$5, %r11b
	shrb	$3, %cl
	shrb	$4, %dl
	andl	$1, %ecx
	andl	$1, %r11d
	andl	$1, %edx
	addl	%ecx, %ecx
	sall	$2, %r11d
	orl	%ecx, %edx
	orl	%r11d, %edx
	cmpb	$20, %r8b
	je	.L12747
.L12569:
	movzbl	17(%rdi), %r11d
	leal	0(,%rax,8), %ecx
	xorl	%eax, %eax
	orl	%edx, %ecx
	movl	%r11d, %edx
	shrb	$3, %r11b
	shrb	$4, %dl
	andl	$1, %r11d
	addl	%r11d, %r11d
	andl	$1, %edx
	orl	%r11d, %edx
	movzbl	62(%rdi), %r11d
	shrb	$5, %r11b
	andl	$1, %r11d
	sall	$2, %r11d
	orl	%r11d, %edx
	cmpb	$20, %r9b
	je	.L12748
.L12570:
	sall	$3, %eax
	orl	%eax, %edx
	notl	%edx
	andl	%edx, %ecx
	orl	%ecx, %r15d
.L12564:
	cmpb	$13, %r9b
	jne	.L12563
	cmpb	$13, %r8b
	je	.L12562
.L12563:
	testl	%r10d, %r10d
	jne	.L12749
.L12573:
	testl	%r15d, %r15d
	jne	.L12750
.L12706:
	movzbl	16(%r14), %ecx
	jmp	.L12575
.L12750:
	movl	$.LC153, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L12706
.L12749:
	movl	$.LC152, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L12573
.L12748:
	cmpq	$0, 8(%rdi)
	movl	$1, %r11d
	cmovne	%r11d, %eax
	jmp	.L12570
.L12747:
	cmpq	$0, 8(%rsi)
	movl	$1, %r11d
	cmovne	%r11d, %eax
	jmp	.L12569
.L12746:
	movzbl	16(%rdi), %r9d
	cmpb	$23, %r9b
	jne	.L12565
	movzbl	17(%rdi), %edx
	movzbl	62(%rdi), %ecx
	movl	%edx, %r11d
	shrb	$5, %cl
	shrb	$3, %dl
	shrb	$4, %r11b
	andl	$1, %edx
	andl	$1, %ecx
	addl	%edx, %edx
	andl	$1, %r11d
	sall	$2, %ecx
	orl	%edx, %r11d
	movzbl	17(%rsi), %edx
	orl	%ecx, %r11d
	movl	%edx, %ecx
	shrb	$3, %dl
	shrb	$4, %cl
	andl	$1, %edx
	addl	%edx, %edx
	andl	$1, %ecx
	orl	%edx, %ecx
	movzbl	62(%rsi), %edx
	shrb	$5, %dl
	andl	$1, %edx
	sall	$2, %edx
	orl	%edx, %ecx
	notl	%ecx
	andl	%ecx, %r11d
	orl	%r11d, %r10d
	jmp	.L12564
	.p2align 6,,7
.L12738:
	movzbl	%cl, %r8d 
	xorl	%edx, %edx
	xorl	%r15d, %r15d
	movzbl	tree_code_type(%r8), %eax
	movq	8(%rdi), %r11
	cmpb	$114, %al
	je	.L12513
	cmpb	$100, %al
	je	.L12513
.L12512:
	movzbl	17(%rdi), %r8d
	movl	$1, %esi
	movl	%r8d, %r10d
	movl	%r8d, %r9d
	shrb	$3, %r10b
	shrb	$4, %r9b
	andl	$1, %r10d
	andl	%r9d, %esi
	addl	%r10d, %r10d
	orl	%r10d, %esi
	movzbl	62(%rdi), %r10d
	movzbl	16(%rdi), %edi
	movl	%r10d, %r9d
	shrb	$5, %r9b
	andl	$1, %r9d
	sall	$2, %r9d
	orl	%r9d, %esi
	xorl	%r9d, %r9d
	cmpb	$20, %dil
	je	.L12751
.L12516:
	leal	0(,%r9,8), %eax
	orl	%eax, %esi
	jne	.L12515
	testl	%edx, %edx
	jne	.L12515
	testl	%r15d, %r15d
	je	.L12514
.L12515:
	movl	%r8d, %ecx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %cl
	movl	%r8d, %r9d
	andl	%ecx, %esi
	movl	%r10d, %ecx
	andl	$1, %r9d
	andl	$1, %ecx
	addl	%r9d, %r9d
	sall	$2, %ecx
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L12752
.L12518:
	leal	0(,%rcx,8), %r8d
	leal	(%r15,%r15), %edi
	orl	%r8d, %esi
	orl	%edx, %esi
	orl	%edi, %esi
	movq	%r11, %rdi
	call	c_build_qualified_type
	movzbl	16(%rbx), %ecx
	movq	%rax, %r11
.L12514:
	cmpb	$41, %cl
	je	.L12753
	cmpb	$47, %cl
	je	.L12754
	xorl	%r15d, %r15d
	testl	%r12d, %r12d
	je	.L12755
.L12557:
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L12558
	testl	%r15d, %r15d
	movq	%rbx, %r12
	je	.L12510
.L12558:
	movq	%r11, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %r12
	je	.L12756
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%r12, %rdi
	movq	%rax, %rsi
.L12732:
	call	convert
.L12719:
	movq	%rax, %r12
	jmp	.L12510
.L12756:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, %r12
	call	mark_addressable
	testl	%eax, %eax
	jne	.L12560
	movq	global_trees(%rip), %r12
	jmp	.L12510
.L12560:
	movq	%rbx, %rdi
	call	staticp
	movzbl	17(%r12), %ebx
	movl	%eax, %edi
	andb	$1, %dil
	addb	%dil, %dil
	andb	$-4, %bl
	orb	%dil, %bl
	movb	%bl, 17(%r12)
	jmp	.L12510
.L12755:
	movq	%rbx, %rdi
	movq	%r11, -192(%rbp)
	call	lvalue_p
	movq	-192(%rbp), %r11
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r15d
	jmp	.L12557
.L12754:
	movq	40(%rbx), %r12
	movq	8(%r12), %r15
	movzbl	16(%r15), %edx
	movq	%r15, %rax
	cmpl	$23, %edx
	movl	%edx, -100(%rbp)
	je	.L12522
	cmpl	$18, %edx
	je	.L12522
	movzbl	16(%r12), %edx
	cmpb	$32, %dl
	je	.L12757
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L12525
	cmpb	$34, %dl
	je	.L12758
.L12525:
	cmpb	$116, %dl
	movq	%r12, %rcx
	je	.L12703
	cmpb	$115, %dl
	je	.L12759
.L12534:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L12539
	cmpb	$49, %al
	je	.L12539
	cmpb	$50, %al
	je	.L12539
	cmpb	$101, %al
	je	.L12539
.L12538:
	cmpl	$10, -100(%rbp)
	je	.L12760
	cmpb	$39, %dl
	je	.L12761
.L12547:
	movq	%r15, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L12552
	testb	$32, 17(%r15)
	je	.L12553
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L12554
	movq	integer_types+40(%rip), %r9
	movzwl	60(%r15), %r10d
	movzwl	60(%r9), %r15d
	andl	$511, %r10d
	andl	$511, %r15d
	cmpl	%r15d, %r10d
	je	.L12554
.L12553:
	movq	integer_types+40(%rip), %rdi
.L12718:
	movq	%r12, %rsi
	call	convert
.L12523:
	movq	8(%rax), %rsi
	movq	32(%rbx), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L12719
.L12554:
	movq	integer_types+48(%rip), %rdi
	jmp	.L12718
.L12552:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L12555
	movl	flag_allow_single_precision(%rip), %esi
	testl	%esi, %esi
	jne	.L12555
	movq	global_trees+192(%rip), %rcx
	cmpq	%rcx, 128(%r15)
	je	.L12762
.L12555:
	cmpl	$5, -100(%rbp)
	je	.L12763
	movq	%r12, %rax
	jmp	.L12523
.L12763:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L12523
.L12762:
	movq	global_trees+200(%rip), %rdi
	jmp	.L12718
	.p2align 6,,7
.L12761:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L12547
	movq	integer_types+40(%rip), %r8
	movq	40(%rdx), %rdi
	movzwl	60(%r8), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L12547
	movl	flag_traditional(%rip), %r11d
	testl	%r11d, %r11d
	je	.L12553
	testb	$32, 17(%r15)
	jne	.L12554
	jmp	.L12553
	.p2align 6,,7
.L12760:
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%r15), %edx
	movl	flag_traditional(%rip), %ecx
	movzwl	60(%rdi), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%ecx, %ecx
	jne	.L12546
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L12545
.L12546:
	testb	$32, 17(%r15)
	movl	$1, %eax
	cmovne	%eax, %esi
.L12545:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L12718
.L12539:
	movl	24(%rcx), %eax
	movl	%eax, 24(%r12)
	jmp	.L12538
.L12759:
	movq	32(%r12), %rsi
	movq	8(%r12), %rax
	cmpq	%rax, 8(%rsi)
	jne	.L12534
.L12537:
	movzbl	16(%rsi), %edx
	movq	%rsi, %r12
	cmpb	$116, %dl
	jne	.L12764
.L12703:
	movq	32(%r12), %rsi
	jmp	.L12537
.L12764:
	cmpb	$115, %dl
	jne	.L12534
	movq	32(%rsi), %r9
	movq	8(%r12), %r10
	cmpq	%r10, 8(%r9)
	movq	%r9, %rsi
	je	.L12537
	jmp	.L12534
.L12758:
	movl	pedantic(%rip), %r15d
	testl	%r15d, %r15d
	jne	.L12529
	cmpb	$51, 48(%r12)
	je	.L12529
	cmpq	$0, current_function_decl(%rip)
	je	.L12531
	movzbl	17(%r12), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L12765
.L12531:
	movq	%r12, %rsi
.L12532:
	movq	%rsi, %r12
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L12529:
	movq	%rax, %r15
	jmp	.L12525
.L12765:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L12531
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L12531
	testb	$2, 17(%rax)
	je	.L12531
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L12532
	jmp	.L12531
	.p2align 6,,7
.L12757:
	movq	104(%r12), %r12
	movzbl	16(%r12), %edx
	jmp	.L12525
.L12522:
	movq	%r12, %rdi
	call	default_function_array_conversion
	jmp	.L12523
.L12753:
	movq	72(%r11), %rdi
	movq	32(%rbx), %rsi
	jmp	.L12732
.L12752:
	testq	%r11, %r11
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L12518
.L12751:
	testq	%r11, %r11
	movl	$1, %eax
	cmovne	%eax, %r9d
	jmp	.L12516
.L12513:
	movzbl	17(%rbx), %esi
	movl	$1, %r15d
	movl	%esi, %edx
	shrb	$3, %sil
	shrb	$4, %dl
	andl	%esi, %r15d
	andl	$1, %edx
	jmp	.L12512
.L12737:
	movl	$121, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L12719
.L12508:
	movl	24(%r8), %eax
	movl	%eax, 24(%rbx)
	jmp	.L12507
.L12736:
	movq	32(%rsi), %rsi
	cmpq	%rdi, 8(%rsi)
	jne	.L12502
	.p2align 4,,7
.L12506:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %rbx
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r12d
	cmpb	$116, %cl
	jne	.L12766
.L12701:
	movq	32(%rbx), %rsi
	jmp	.L12506
.L12766:
	cmpb	$115, %cl
	jne	.L12502
	movq	32(%rsi), %r15
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%r15)
	movq	%r15, %rsi
	je	.L12506
	jmp	.L12502
.L12735:
	movl	$114, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	call	build1
	jmp	.L12720
.L12734:
	movzbl	16(%rsi), %ecx
	xorl	%r12d, %r12d
	movzbl	16(%rdi), %edx
	movq	%rsi, %r8
	cmpb	$116, %cl
	je	.L12693
	cmpb	$115, %cl
	je	.L12767
.L11703:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L11709
	cmpb	$49, %al
	je	.L11709
	cmpb	$50, %al
	je	.L11709
	cmpb	$101, %al
	je	.L11709
.L11708:
	cmpl	$23, %edx
	je	.L12768
	cmpl	$18, %edx
	je	.L12769
	movq	%rbx, -112(%rbp)
.L11711:
	movq	24(%r14), %r13
	testq	%r13, %r13
	je	.L11926
.L11925:
	movq	-112(%rbp), %rax
	movq	8(%r13), %r11
	movq	8(%rax), %rcx
	movq	128(%r11), %rbx
	movq	128(%rcx), %r12
	cmpq	%r12, %rbx
	je	.L12711
	testq	%rbx, %rbx
	je	.L12711
	testq	%r12, %r12
	je	.L12711
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L12711
	movzbl	16(%r12), %eax
	testb	%al, %al
	je	.L12711
	cmpb	$6, %dl
	je	.L12770
.L11770:
	cmpb	$6, %al
	je	.L12771
.L11771:
	cmpb	$10, %dl
	je	.L12772
.L11772:
	cmpb	$10, 16(%r12)
	je	.L12773
.L11773:
	cmpq	%r12, %rbx
	movl	$1, %r15d
	je	.L11769
	movzbl	16(%rbx), %esi
	cmpb	16(%r12), %sil
	je	.L11775
	xorl	%r15d, %r15d
.L11769:
	testl	%r15d, %r15d
	jne	.L11763
.L12691:
	movq	(%r13), %r13
	testq	%r13, %r13
	jne	.L11925
.L11926:
	movl	$.LC151, %edi
.L12721:
	xorl	%eax, %eax
	call	error
	movq	global_trees(%rip), %rbx
	jmp	.L11692
.L11763:
	testq	%r13, %r13
	je	.L11926
	movl	pedantic(%rip), %edi
	testl	%edi, %edi
	jne	.L12774
.L11931:
	movq	-112(%rbp), %rsi
	movq	%r13, %rdi
	movq	%r14, %r15
	call	build_tree_list
	xorl	%edx, %edx
	movq	%r14, %rsi
	movq	%rax, %rcx
	movl	$46, %edi
	xorl	%eax, %eax
	call	build
	movq	global_trees(%rip), %rdx
	movq	%rax, %r13
	movzbl	16(%r14), %eax
	movq	%r13, %rdi
	cmpq	%rdx, %r14
	movl	%eax, -68(%rbp)
	movq	%rdx, %rax
	je	.L11933
	cmpq	%rdx, %r13
	je	.L11933
	cmpq	%rdx, 8(%r13)
	je	.L11933
	cmpb	$116, 16(%r13)
	je	.L12775
.L11935:
	call	fold
	cmpl	$18, -68(%rbp)
	movq	%rax, %rbx
	je	.L12776
.L11936:
	testq	%rbx, %rbx
	je	.L12176
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L12777
.L12176:
	movl	-68(%rbp), %eax
	subl	$6, %eax
	cmpl	$1, %eax
	jbe	.L12361
	cmpl	$13, -68(%rbp)
	je	.L12361
	cmpl	$10, -68(%rbp)
	je	.L12361
	cmpl	$11, -68(%rbp)
	je	.L12361
	cmpl	$8, -68(%rbp)
	je	.L12361
	movq	32(%r14), %rax
	testq	%rax, %rax
	je	.L12413
	cmpb	$25, 16(%rax)
	je	.L12413
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC149, %esi
	call	error
	movq	spelling_base(%rip), %r13
	movq	spelling(%rip), %r10
	xorl	%r12d, %r12d
	cmpq	%r10, %r13
	movq	%r13, %rbx
	movq	%r10, %r14
	jae	.L12645
.L12420:
	cmpl	$3, (%rbx)
	je	.L12778
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L12416:
	addq	$16, %rbx
	cmpq	%r14, %rbx
	jb	.L12420
.L12645:
	movslq	%r12d,%rbx
	movq	%r13, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r14, %r13
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L12659
.L12434:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L12779
	cmpl	$2, %eax
	je	.L12780
.L12428:
	movq	8(%r12), %rsi
	movzbl	(%rsi), %r11d
	leaq	1(%rsi), %rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	je	.L12424
.L12433:
	movzbl	(%rcx), %edx
	incq	%rbx
	incq	%rcx
	testb	%dl, %dl
	movb	%dl, (%rbx)
	jne	.L12433
.L12424:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L12434
.L12659:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	jne	.L12781
.L12498:
	movq	global_trees(%rip), %rbx
.L11934:
	movq	-112(%rbp), %rcx
	movzbl	17(%rbx), %r12d
	movzbl	17(%rcx), %eax
	andb	$-3, %r12b
	andb	$2, %al
	orb	%al, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L11692
.L12781:
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L12498
.L12780:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L12428
.L12779:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L12424
.L12778:
	addl	$25, %r12d
	jmp	.L12416
	.p2align 6,,7
.L12413:
	movl	flag_traditional(%rip), %r12d
	testl	%r12d, %r12d
	je	.L12438
	movq	$0, -184(%rbp)
	xorl	%ebx, %ebx
	movzbl	16(%r14), %eax
	cmpb	$20, %al
	je	.L12472
	cmpb	$18, %al
	je	.L12472
	cmpb	$22, %al
	je	.L12472
	cmpb	$21, %al
	je	.L12472
.L12650:
	cmpq	%r15, %r14
	je	.L12498
	movq	%r15, %rdi
	movq	%r13, %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	digest_init
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	-184(%rbp), %r14
	movq	%rax, 40(%r14)
	jmp	.L11934
	.p2align 6,,7
.L12472:
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movl	$46, %edi
	movq	%r15, %rsi
	call	build
	cmpq	$0, -184(%rbp)
	movq	%rax, %r12
	jne	.L12442
	movq	%rax, %rbx
.L12443:
	movq	%r12, -184(%rbp)
	cmpb	$18, 16(%r15)
	je	.L12782
	movq	24(%r15), %rax
	testq	%rax, %rax
	je	.L12446
	movq	8(%rax), %r15
.L12439:
	movzbl	16(%r15), %eax
	cmpb	$20, %al
	je	.L12472
	cmpb	$18, %al
	je	.L12472
	cmpb	$22, %al
	je	.L12472
	cmpb	$21, %al
	je	.L12472
	jmp	.L12650
	.p2align 6,,7
.L12446:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC150, %esi
	call	error
	movq	spelling_base(%rip), %r13
	movq	spelling(%rip), %r9
	xorl	%r12d, %r12d
	cmpq	%r9, %r13
	movq	%r13, %rbx
	movq	%r9, %r14
	jae	.L12652
.L12454:
	cmpl	$3, (%rbx)
	je	.L12783
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L12450:
	addq	$16, %rbx
	cmpq	%r14, %rbx
	jb	.L12454
.L12652:
	movslq	%r12d,%r15
	movq	%r13, %r12
	addq	$16, %r15
	andq	$-16, %r15
	subq	%r15, %rsp
	cmpq	%r14, %r13
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L12659
.L12468:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L12784
	cmpl	$2, %eax
	je	.L12785
.L12462:
	movq	8(%r12), %r13
	movzbl	(%r13), %edi
	leaq	1(%r13), %rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	je	.L12458
.L12467:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L12467
.L12458:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L12468
	jmp	.L12659
.L12785:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L12462
.L12784:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L12458
	.p2align 6,,7
.L12783:
	addl	$25, %r12d
	jmp	.L12450
.L12782:
	movq	8(%r15), %r15
	jmp	.L12439
.L12442:
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	-184(%rbp), %rcx
	movq	%rax, 40(%rcx)
	jmp	.L12443
.L12438:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC150, %esi
	call	error
	movq	spelling_base(%rip), %r13
	movq	spelling(%rip), %r14
	xorl	%r12d, %r12d
	cmpq	%r14, %r13
	movq	%r13, %rbx
	jae	.L12657
.L12481:
	cmpl	$3, (%rbx)
	je	.L12786
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L12477:
	addq	$16, %rbx
	cmpq	%r14, %rbx
	jb	.L12481
.L12657:
	movslq	%r12d,%r10
	movq	%r13, %r12
	addq	$16, %r10
	andq	$-16, %r10
	subq	%r10, %rsp
	cmpq	%r14, %r13
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L12659
.L12495:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L12787
	cmpl	$2, %eax
	je	.L12788
.L12489:
	movq	8(%r12), %rsi
	movzbl	(%rsi), %r11d
	leaq	1(%rsi), %rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	je	.L12485
.L12494:
	movzbl	(%rcx), %edx
	incq	%rbx
	incq	%rcx
	testb	%dl, %dl
	movb	%dl, (%rbx)
	jne	.L12494
.L12485:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L12495
	jmp	.L12659
.L12788:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L12489
.L12787:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L12485
.L12786:
	addl	$25, %r12d
	jmp	.L12477
	.p2align 6,,7
.L12361:
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%r14, %rdi
	movq	%r13, %rsi
	movl	$.LC147, %edx
	call	convert_for_assignment
	movq	%rax, %rbx
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L11934
	testb	$2, 17(%rbx)
	jne	.L12362
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r13
	movq	spelling(%rip), %r11
	xorl	%r12d, %r12d
	cmpq	%r11, %r13
	movq	%r13, %rbx
	movq	%r11, %r14
	jae	.L12635
.L12369:
	cmpl	$3, (%rbx)
	je	.L12789
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L12365:
	addq	$16, %rbx
	cmpq	%r14, %rbx
	jb	.L12369
.L12635:
	movslq	%r12d,%rcx
	movq	%r13, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r14, %r13
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L12659
.L12383:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L12790
	cmpl	$2, %eax
	je	.L12791
.L12377:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %esi
	leaq	1(%rdx), %rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	je	.L12373
.L12382:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L12382
.L12373:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L12383
	jmp	.L12659
.L12791:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L12377
.L12790:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L12373
.L12789:
	addl	$25, %r12d
	jmp	.L12365
.L12362:
	movq	8(%rbx), %rsi
	movq	%rbx, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L11934
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC148, %esi
	call	error
	movq	spelling_base(%rip), %r13
	movq	spelling(%rip), %r15
	xorl	%r12d, %r12d
	cmpq	%r15, %r13
	movq	%r13, %rbx
	movq	%r15, %r14
	jae	.L12640
.L12395:
	cmpl	$3, (%rbx)
	je	.L12792
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L12391:
	addq	$16, %rbx
	cmpq	%r14, %rbx
	jb	.L12395
.L12640:
	movslq	%r12d,%rdi
	movq	%r13, %r12
	addq	$16, %rdi
	andq	$-16, %rdi
	subq	%rdi, %rsp
	cmpq	%r14, %r13
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L12659
.L12409:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L12793
	cmpl	$2, %eax
	je	.L12794
.L12403:
	movq	8(%r12), %r8
	movzbl	(%r8), %r13d
	leaq	1(%r8), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L12399
.L12408:
	movzbl	(%rcx), %r14d
	incq	%rbx
	incq	%rcx
	testb	%r14b, %r14b
	movb	%r14b, (%rbx)
	jne	.L12408
.L12399:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L12409
	jmp	.L12659
	.p2align 6,,7
.L12794:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L12403
.L12793:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L12399
	.p2align 6,,7
.L12792:
	addl	$25, %r12d
	jmp	.L12391
.L12777:
	movq	128(%rax), %rdi
	movq	128(%r14), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L12177
	cmpl	$18, -68(%rbp)
	je	.L12795
.L12178:
	cmpl	$9, -68(%rbp)
	je	.L12796
.L12179:
	cmpl	$13, -68(%rbp)
	jne	.L12176
	movq	8(%rbx), %rdx
	movzbl	16(%rdx), %eax
	cmpb	$18, %al
	je	.L12180
	cmpb	$23, %al
	jne	.L12176
.L12180:
	movq	8(%rdx), %rdi
	movq	8(%r14), %rsi
	call	comptypes
	testl	%eax, %eax
	je	.L12176
.L12177:
	cmpl	$13, -68(%rbp)
	je	.L12797
.L12181:
	xorl	%r12d, %r12d
	testl	%r12d, %r12d
	je	.L12242
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L12242
	cmpb	$-86, 16(%rbx)
	je	.L12798
.L12242:
	cmpl	$18, -68(%rbp)
	je	.L12799
.L12243:
	movl	optimize(%rip), %eax
	testl	%eax, %eax
	je	.L12268
	cmpb	$34, 16(%rbx)
	je	.L12800
.L12268:
	xorl	%esi, %esi
	testl	%esi, %esi
	je	.L11934
	movl	pedantic(%rip), %r12d
	testl	%r12d, %r12d
	je	.L12275
	cmpb	$47, 16(%rbx)
	je	.L12801
.L12275:
	xorl	%r15d, %r15d
	testl	%r15d, %r15d
	je	.L11934
	testb	$2, 17(%rbx)
	je	.L12335
	movq	8(%rbx), %rsi
	movq	%rbx, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L11934
.L12335:
	movl	$.LC42, %edi
	xorl	%eax, %eax
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r13
	movq	spelling(%rip), %rdi
	xorl	%r12d, %r12d
	cmpq	%rdi, %r13
	movq	%r13, %rbx
	movq	%rdi, %r14
	jae	.L12630
.L12342:
	cmpl	$3, (%rbx)
	je	.L12802
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L12338:
	addq	$16, %rbx
	cmpq	%r14, %rbx
	jb	.L12342
.L12630:
	movslq	%r12d,%rbx
	movq	%r13, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r14, %r13
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L12659
.L12356:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L12803
	cmpl	$2, %eax
	je	.L12804
.L12350:
	movq	8(%r12), %r14
	movzbl	(%r14), %r8d
	leaq	1(%r14), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L12346
.L12355:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L12355
.L12346:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L12356
	jmp	.L12659
.L12804:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L12350
.L12803:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L12346
.L12802:
	addl	$25, %r12d
	jmp	.L12338
.L12801:
	movq	8(%rbx), %r12
	movq	32(%rbx), %rdi
	movq	%r12, %rsi
	call	valid_compound_expr_initializer
	movq	global_trees(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L12805
	movq	40(%rbx), %rdi
	movq	%r12, %rsi
	call	valid_compound_expr_initializer
	movq	global_trees(%rip), %rdx
	movq	%rax, %rbx
.L12278:
	cmpq	%rdx, %rbx
	je	.L12806
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r13
	movq	spelling(%rip), %r11
	xorl	%r15d, %r15d
	cmpq	%r11, %r13
	movq	%r13, %r12
	movq	%r11, %r14
	jae	.L12625
.L12314:
	cmpl	$3, (%r12)
	je	.L12807
	movq	8(%r12), %rdi
	call	strlen
	leal	1(%rax,%r15), %r15d
.L12310:
	addq	$16, %r12
	cmpq	%r14, %r12
	jb	.L12314
.L12625:
	movslq	%r15d,%rcx
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r14, %r13
	movq	%rsp, %r15
	movq	%rsp, %r12
	jae	.L12627
.L12328:
	movl	(%r13), %eax
	cmpl	$3, %eax
	je	.L12808
	cmpl	$2, %eax
	je	.L12809
.L12322:
	movq	8(%r13), %rdx
	movzbl	(%rdx), %esi
	leaq	1(%rdx), %rcx
	testb	%sil, %sil
	movb	%sil, (%r12)
	je	.L12318
.L12327:
	movzbl	(%rcx), %r9d
	incq	%r12
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%r12)
	jne	.L12327
.L12318:
	addq	$16, %r13
	cmpq	spelling(%rip), %r13
	jb	.L12328
.L12627:
	movb	$0, (%r12)
	cmpb	$0, (%r15)
	jne	.L12810
.L12307:
	movl	flag_pedantic_errors(%rip), %r13d
	testl	%r13d, %r13d
	je	.L11934
	jmp	.L12498
.L12810:
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L12307
.L12809:
	movb	$46, (%r12)
	incq	%r12
	jmp	.L12322
.L12808:
	movl	8(%r13), %edx
	movq	%r12, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%r12, %rdi
	call	strlen
	addq	%rax, %r12
	jmp	.L12318
.L12807:
	addl	$25, %r15d
	jmp	.L12310
.L12806:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r13
	movq	spelling(%rip), %r9
	xorl	%r15d, %r15d
	cmpq	%r9, %r13
	movq	%r13, %r12
	movq	%r9, %r14
	jae	.L12620
.L12289:
	cmpl	$3, (%r12)
	je	.L12811
	movq	8(%r12), %rdi
	call	strlen
	leal	1(%rax,%r15), %r15d
.L12285:
	addq	$16, %r12
	cmpq	%r14, %r12
	jb	.L12289
.L12620:
	movslq	%r15d,%rdi
	addq	$16, %rdi
	andq	$-16, %rdi
	subq	%rdi, %rsp
	cmpq	%r14, %r13
	movq	%rsp, %r15
	movq	%rsp, %r12
	jae	.L12622
.L12303:
	movl	(%r13), %eax
	cmpl	$3, %eax
	je	.L12812
	cmpl	$2, %eax
	je	.L12813
.L12297:
	movq	8(%r13), %r14
	movzbl	(%r14), %r8d
	leaq	1(%r14), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%r12)
	je	.L12293
.L12302:
	movzbl	(%rcx), %r10d
	incq	%r12
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%r12)
	jne	.L12302
.L12293:
	addq	$16, %r13
	cmpq	spelling(%rip), %r13
	jb	.L12303
.L12622:
	movb	$0, (%r12)
	cmpb	$0, (%r15)
	je	.L12307
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L12307
.L12813:
	movb	$46, (%r12)
	incq	%r12
	jmp	.L12297
.L12812:
	movl	8(%r13), %edx
	movq	%r12, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%r12, %rdi
	call	strlen
	addq	%rax, %r12
	jmp	.L12293
.L12811:
	addl	$25, %r15d
	jmp	.L12285
.L12805:
	movq	%rdx, %rbx
	jmp	.L12278
.L12800:
	movl	pedantic(%rip), %ecx
	testl	%ecx, %ecx
	jne	.L12268
	cmpb	$51, 48(%rbx)
	je	.L12268
	cmpq	$0, current_function_decl(%rip)
	je	.L12273
	movzbl	17(%rbx), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L12814
.L12273:
	movq	%rbx, %rax
.L12274:
	movq	%rax, %rbx
	jmp	.L12268
.L12814:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L12273
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L12273
	testb	$2, 17(%rax)
	je	.L12273
	cmpb	$46, %dl
	jne	.L12274
	jmp	.L12273
.L12799:
	movzbl	16(%rbx), %eax
	cmpb	$29, %al
	je	.L12243
	cmpb	$46, %al
	je	.L12243
	movl	$.LC42, %edi
	xorl	%eax, %eax
	movl	$.LC145, %esi
	call	error
	movq	spelling_base(%rip), %r13
	movq	spelling(%rip), %rdi
	xorl	%r12d, %r12d
	cmpq	%rdi, %r13
	movq	%r13, %rbx
	movq	%rdi, %r14
	jae	.L12615
.L12250:
	cmpl	$3, (%rbx)
	je	.L12815
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L12246:
	addq	$16, %rbx
	cmpq	%r14, %rbx
	jb	.L12250
.L12615:
	movslq	%r12d,%r8
	movq	%r13, %r12
	addq	$16, %r8
	andq	$-16, %r8
	subq	%r8, %rsp
	cmpq	%r14, %r13
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L12659
.L12264:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L12816
	cmpl	$2, %eax
	je	.L12817
.L12258:
	movq	8(%r12), %r10
	movzbl	(%r10), %r14d
	leaq	1(%r10), %rcx
	testb	%r14b, %r14b
	movb	%r14b, (%rbx)
	je	.L12254
.L12263:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L12263
.L12254:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L12264
	jmp	.L12659
.L12817:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L12258
.L12816:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L12254
.L12815:
	addl	$25, %r12d
	jmp	.L12246
.L12798:
	movq	32(%rbx), %r15
	movq	32(%r15), %r9
	movq	104(%r9), %rbx
	jmp	.L12242
.L12797:
	movzbl	16(%rbx), %esi
	movq	8(%rbx), %r10
	xorl	%r12d, %r12d
	movq	%rbx, %rcx
	movzbl	16(%r10), %edi
	cmpb	$116, %sil
	je	.L12697
	cmpb	$115, %sil
	je	.L12818
.L12183:
	movl	%esi, %eax
	movzbl	%al, %r9d 
	movzbl	tree_code_type(%r9), %eax
	cmpb	$60, %al
	je	.L12189
	cmpb	$49, %al
	je	.L12189
	cmpb	$50, %al
	je	.L12189
	cmpb	$101, %al
	je	.L12189
.L12188:
	cmpl	$23, %edi
	je	.L12819
	cmpl	$18, %edi
	je	.L12820
	movq	%rbx, %r12
.L12191:
	movq	%r12, %rbx
	jmp	.L12181
.L12820:
	movl	%esi, %eax
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	%al, %r8d 
	movq	8(%r10), %r14
	movzbl	tree_code_type(%r8), %eax
	cmpb	$114, %al
	je	.L12194
	cmpb	$100, %al
	je	.L12194
.L12193:
	movzbl	17(%r10), %edi
	movl	$1, %r8d
	movl	%edi, %r9d
	movl	%edi, %r13d
	shrb	$4, %r9b
	shrb	$3, %r13b
	andl	%r9d, %r8d
	andl	$1, %r13d
	movzbl	62(%r10), %r9d
	movzbl	16(%r10), %r10d
	addl	%r13d, %r13d
	orl	%r13d, %r8d
	movl	%r9d, %ecx
	shrb	$5, %cl
	andl	$1, %ecx
	sall	$2, %ecx
	orl	%ecx, %r8d
	xorl	%ecx, %ecx
	cmpb	$20, %r10b
	je	.L12821
.L12197:
	leal	0(,%rcx,8), %r15d
	orl	%r15d, %r8d
	jne	.L12196
	testl	%edx, %edx
	jne	.L12196
	testl	%r11d, %r11d
	je	.L12195
.L12196:
	movl	%edi, %ecx
	shrb	$5, %r9b
	movl	$1, %esi
	shrb	$3, %dil
	shrb	$4, %cl
	movl	%edi, %r8d
	andl	%ecx, %esi
	movl	%r9d, %edi
	andl	$1, %r8d
	andl	$1, %edi
	xorl	%ecx, %ecx
	addl	%r8d, %r8d
	sall	$2, %edi
	orl	%r8d, %esi
	orl	%edi, %esi
	cmpb	$20, %r10b
	je	.L12822
.L12199:
	leal	0(,%rcx,8), %r10d
	movq	%r14, %rdi
	orl	%r10d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%rbx), %esi
	movq	%rax, %r14
.L12195:
	cmpb	$41, %sil
	je	.L12823
	cmpb	$47, %sil
	je	.L12824
	xorl	%r13d, %r13d
	testl	%r12d, %r12d
	je	.L12825
.L12238:
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L12239
	testl	%r13d, %r13d
	movq	%rbx, %r12
	je	.L12191
.L12239:
	movq	%r14, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %r12
	je	.L12826
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%r12, %rdi
	movq	%rax, %rsi
.L12730:
	call	convert
.L12717:
	movq	%rax, %r12
	jmp	.L12191
.L12826:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, %r12
	call	mark_addressable
	testl	%eax, %eax
	jne	.L12241
	movq	global_trees(%rip), %r12
	jmp	.L12191
.L12241:
	movq	%rbx, %rdi
	call	staticp
	movzbl	17(%r12), %ebx
	movl	%eax, %r13d
	andb	$1, %r13b
	addb	%r13b, %r13b
	andb	$-4, %bl
	orb	%r13b, %bl
	movb	%bl, 17(%r12)
	jmp	.L12191
.L12825:
	movq	%rbx, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r13d
	jmp	.L12238
.L12824:
	movq	40(%rbx), %r12
	movq	8(%r12), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L12203
	cmpl	$18, %r14d
	je	.L12203
	movzbl	16(%r12), %edx
	cmpb	$32, %dl
	je	.L12827
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L12206
	cmpb	$34, %dl
	je	.L12828
.L12206:
	cmpb	$116, %dl
	movq	%r12, %rcx
	je	.L12699
	cmpb	$115, %dl
	je	.L12829
.L12215:
	movzbl	%dl, %edi 
	movzbl	tree_code_type(%rdi), %eax
	cmpb	$60, %al
	je	.L12220
	cmpb	$49, %al
	je	.L12220
	cmpb	$50, %al
	je	.L12220
	cmpb	$101, %al
	je	.L12220
.L12219:
	cmpl	$10, %r14d
	je	.L12830
	cmpb	$39, %dl
	je	.L12831
.L12228:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L12233
	testb	$32, 17(%r13)
	je	.L12234
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L12235
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r13), %r11d
	movzwl	60(%rdx), %r10d
	andl	$511, %r11d
	andl	$511, %r10d
	cmpl	%r10d, %r11d
	je	.L12235
.L12234:
	movq	integer_types+40(%rip), %rdi
.L12716:
	movq	%r12, %rsi
	call	convert
.L12204:
	movq	8(%rax), %rsi
	movq	32(%rbx), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L12717
.L12235:
	movq	integer_types+48(%rip), %rdi
	jmp	.L12716
.L12233:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L12236
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L12236
	movq	global_trees+192(%rip), %rsi
	cmpq	%rsi, 128(%r13)
	je	.L12832
.L12236:
	cmpl	$5, %r14d
	je	.L12833
	movq	%r12, %rax
	jmp	.L12204
.L12833:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L12204
.L12832:
	movq	global_trees+200(%rip), %rdi
	jmp	.L12716
.L12831:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L12228
	movq	integer_types+40(%rip), %rcx
	movq	40(%rdx), %rdi
	movzwl	60(%rcx), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L12228
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L12234
	testb	$32, 17(%r13)
	jne	.L12235
	jmp	.L12234
.L12830:
	movq	integer_types+40(%rip), %r8
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%r8), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L12227
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L12226
.L12227:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L12226:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L12716
.L12220:
	movl	24(%rcx), %eax
	movl	%eax, 24(%r12)
	jmp	.L12219
.L12829:
	movq	32(%r12), %rsi
	movq	8(%r12), %rax
	cmpq	%rax, 8(%rsi)
	jne	.L12215
.L12218:
	movzbl	16(%rsi), %edx
	movq	%rsi, %r12
	cmpb	$116, %dl
	jne	.L12834
.L12699:
	movq	32(%r12), %rsi
	jmp	.L12218
.L12834:
	cmpb	$115, %dl
	jne	.L12215
	movq	32(%rsi), %r15
	movq	8(%r12), %r9
	cmpq	%r9, 8(%r15)
	movq	%r15, %rsi
	je	.L12218
	jmp	.L12215
.L12828:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L12210
	cmpb	$51, 48(%r12)
	je	.L12210
	cmpq	$0, current_function_decl(%rip)
	je	.L12212
	movzbl	17(%r12), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L12835
.L12212:
	movq	%r12, %rsi
.L12213:
	movq	%rsi, %r12
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L12210:
	movq	%rax, %r13
	jmp	.L12206
.L12835:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L12212
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L12212
	testb	$2, 17(%rax)
	je	.L12212
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L12213
	jmp	.L12212
.L12827:
	movq	104(%r12), %r12
	movzbl	16(%r12), %edx
	jmp	.L12206
.L12203:
	movq	%r12, %rdi
	call	default_function_array_conversion
	jmp	.L12204
.L12823:
	movq	72(%r14), %rdi
	movq	32(%rbx), %rsi
	jmp	.L12730
.L12822:
	testq	%r14, %r14
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L12199
.L12821:
	testq	%r14, %r14
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L12197
.L12194:
	movzbl	17(%rbx), %r15d
	movl	$1, %r11d
	movl	%r15d, %edx
	shrb	$3, %r15b
	shrb	$4, %dl
	andl	%r15d, %r11d
	andl	$1, %edx
	jmp	.L12193
.L12819:
	movl	$121, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L12717
.L12189:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L12188
.L12818:
	movq	32(%rbx), %rdx
	cmpq	%r10, 8(%rdx)
	jne	.L12183
.L12187:
	cmpb	$116, %sil
	movl	$1, %eax
	movq	%rdx, %rbx
	movzbl	16(%rdx), %esi
	cmove	%eax, %r12d
	cmpb	$116, %sil
	jne	.L12836
.L12697:
	movq	32(%rbx), %rdx
	jmp	.L12187
.L12836:
	cmpb	$115, %sil
	jne	.L12183
	movq	32(%rdx), %r13
	movq	8(%rbx), %rax
	cmpq	%rax, 8(%r13)
	movq	%r13, %rdx
	je	.L12187
	jmp	.L12183
.L12796:
	movq	8(%rbx), %rdi
	movq	%r14, %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L12177
	jmp	.L12179
.L12795:
	movq	8(%rbx), %rdi
	movq	%r14, %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L12177
	jmp	.L12178
	.p2align 6,,7
.L12776:
	movq	8(%r14), %r8
	movq	128(%r8), %rax
	cmpq	integer_types(%rip), %rax
	movq	%rax, -80(%rbp)
	je	.L11938
	cmpq	integer_types+8(%rip), %rax
	je	.L11938
	cmpq	integer_types+16(%rip), %rax
	je	.L11938
	cmpq	c_global_trees+16(%rip), %rax
	je	.L11938
	cmpq	c_global_trees+8(%rip), %rax
	jne	.L11936
.L11938:
	testq	%rbx, %rbx
	je	.L12176
	cmpb	$29, 16(%rbx)
	jne	.L11936
	movq	8(%rbx), %r13
	movq	128(%r13), %r12
	movq	128(%r14), %r13
	cmpq	%r13, %r12
	je	.L12715
	testq	%r12, %r12
	je	.L12715
	testq	%r13, %r13
	je	.L12715
	movzbl	16(%r12), %edx
	testb	%dl, %dl
	je	.L12715
	movzbl	16(%r13), %eax
	testb	%al, %al
	je	.L12715
	cmpb	$6, %dl
	je	.L12837
.L11943:
	cmpb	$6, %al
	je	.L12838
.L11944:
	cmpb	$10, %dl
	je	.L12839
.L11945:
	cmpb	$10, 16(%r13)
	je	.L12840
.L11946:
	cmpq	%r13, %r12
	movl	$1, -172(%rbp)
	je	.L11942
	movzbl	16(%r12), %esi
	cmpb	16(%r13), %sil
	je	.L11948
	movl	$0, -172(%rbp)
.L11942:
	movl	-172(%rbp), %ecx
	testl	%ecx, %ecx
	jne	.L11934
.L11939:
	movq	8(%rbx), %rsi
	movq	integer_types(%rip), %rcx
	movq	8(%rsi), %r11
	cmpq	%rcx, 128(%r11)
	je	.L12098
	movq	-80(%rbp), %rdx
	movzwl	60(%rcx), %edi
	movzwl	60(%rdx), %r13d
	andl	$511, %edi
	andl	$511, %r13d
	cmpl	%edi, %r13d
	je	.L12841
.L12098:
	movq	8(%rsi), %r12
	movq	128(%r12), %rax
	cmpq	%rcx, %rax
	je	.L12842
.L12123:
	movq	%r14, 8(%rbx)
	cmpq	$0, 24(%r14)
	je	.L11934
	movq	32(%r14), %rax
	testq	%rax, %rax
	je	.L11934
	cmpb	$25, 16(%rax)
	jne	.L11934
	movq	-80(%rbp), %r8
	movq	integer_types(%rip), %r12
	movl	32(%rbx), %ecx
	movzwl	60(%r8), %r9d
	movzwl	60(%r12), %r10d
	andl	$511, %r9d
	andl	$511, %r10d
	cmpl	%r10d, %r9d
	je	.L12149
	movq	c_global_trees(%rip), %r11
	movzwl	60(%r11), %r15d
	andl	$511, %r15d
	sarl	$3, %r15d
	subl	%r15d, %ecx
	movslq	%ecx,%rsi
.L12150:
	movq	40(%r14), %rdi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L11934
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC144, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r13
	movq	spelling(%rip), %rcx
	xorl	%r15d, %r15d
	cmpq	%rcx, %r13
	movq	%r13, %r12
	movq	%rcx, %r14
	jae	.L12608
.L12158:
	cmpl	$3, (%r12)
	je	.L12843
	movq	8(%r12), %rdi
	call	strlen
	leal	1(%rax,%r15), %r15d
.L12154:
	addq	$16, %r12
	cmpq	%r14, %r12
	jb	.L12158
.L12608:
	movslq	%r15d,%rdx
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r14, %r13
	movq	%rsp, %r15
	movq	%rsp, %r12
	jae	.L12610
.L12172:
	movl	(%r13), %eax
	cmpl	$3, %eax
	je	.L12844
	cmpl	$2, %eax
	je	.L12845
.L12166:
	movq	8(%r13), %rsi
	movzbl	(%rsi), %r14d
	leaq	1(%rsi), %rcx
	testb	%r14b, %r14b
	movb	%r14b, (%r12)
	je	.L12162
.L12171:
	movzbl	(%rcx), %r10d
	incq	%r12
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%r12)
	jne	.L12171
.L12162:
	addq	$16, %r13
	cmpq	spelling(%rip), %r13
	jb	.L12172
.L12610:
	movb	$0, (%r12)
	cmpb	$0, (%r15)
	je	.L11934
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L11934
.L12845:
	movb	$46, (%r12)
	incq	%r12
	jmp	.L12166
.L12844:
	movl	8(%r13), %edx
	movq	%r12, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%r12, %rdi
	call	strlen
	addq	%rax, %r12
	jmp	.L12162
.L12843:
	addl	$25, %r15d
	jmp	.L12154
.L12149:
	leal	-1(%rcx), %edi
	movslq	%edi,%rsi
	jmp	.L12150
.L12842:
	movq	-80(%rbp), %rcx
	movzwl	60(%rax), %r8d
	movzwl	60(%rcx), %r15d
	andl	$511, %r8d
	andl	$511, %r15d
	cmpl	%r8d, %r15d
	je	.L12123
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC143, %esi
	call	error
	movq	spelling_base(%rip), %r13
	movq	spelling(%rip), %r11
	xorl	%r12d, %r12d
	cmpq	%r11, %r13
	movq	%r13, %rbx
	movq	%r11, %r14
	jae	.L12603
.L12130:
	cmpl	$3, (%rbx)
	je	.L12846
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L12126:
	addq	$16, %rbx
	cmpq	%r14, %rbx
	jb	.L12130
.L12603:
	movslq	%r12d,%rdi
	movq	%r13, %r12
	addq	$16, %rdi
	andq	$-16, %rdi
	subq	%rdi, %rsp
	cmpq	%r14, %r13
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L12659
.L12144:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L12847
	cmpl	$2, %eax
	je	.L12848
.L12138:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r13d
	leaq	1(%rdx), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L12134
.L12143:
	movzbl	(%rcx), %esi
	incq	%rbx
	incq	%rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	jne	.L12143
.L12134:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L12144
	jmp	.L12659
.L12848:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L12138
.L12847:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L12134
.L12846:
	addl	$25, %r12d
	jmp	.L12126
.L12841:
	movl	$.LC140, %esi
	xorl	%eax, %eax
	movl	$.LC42, %edi
	call	error
	movq	spelling_base(%rip), %r13
	movq	spelling(%rip), %rsi
	xorl	%r12d, %r12d
	cmpq	%rsi, %r13
	movq	%r13, %rbx
	movq	%rsi, %r14
	jae	.L12598
.L12105:
	cmpl	$3, (%rbx)
	je	.L12849
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L12101:
	addq	$16, %rbx
	cmpq	%r14, %rbx
	jb	.L12105
.L12598:
	movslq	%r12d,%rbx
	movq	%r13, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r14, %r13
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L12659
.L12119:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L12850
	cmpl	$2, %eax
	je	.L12851
.L12113:
	movq	8(%r12), %r10
	movzbl	(%r10), %r14d
	leaq	1(%r10), %rcx
	testb	%r14b, %r14b
	movb	%r14b, (%rbx)
	je	.L12109
.L12118:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L12118
.L12109:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L12119
	jmp	.L12659
.L12851:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L12113
.L12850:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L12109
.L12849:
	addl	$25, %r12d
	jmp	.L12101
.L11948:
	movzbl	17(%r12), %r9d
	movzbl	62(%r12), %r10d
	xorl	%ecx, %ecx
	movl	%r9d, %edx
	shrb	$5, %r10b
	shrb	$3, %r9b
	shrb	$4, %dl
	andl	$1, %r9d
	andl	$1, %r10d
	andl	$1, %edx
	addl	%r9d, %r9d
	sall	$2, %r10d
	orl	%r9d, %edx
	orl	%r10d, %edx
	cmpb	$20, %sil
	je	.L12852
.L11950:
	movzbl	17(%r13), %r11d
	leal	0(,%rcx,8), %edi
	movzbl	62(%r13), %ecx
	orl	%edx, %edi
	movl	%r11d, %edx
	shrb	$5, %cl
	shrb	$3, %r11b
	shrb	$4, %dl
	andl	$1, %r11d
	andl	$1, %ecx
	andl	$1, %edx
	addl	%r11d, %r11d
	sall	$2, %ecx
	orl	%r11d, %edx
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	cmpb	$20, %sil
	je	.L12853
.L11951:
	leal	0(,%rcx,8), %esi
	movl	$0, -172(%rbp)
	orl	%esi, %edx
	cmpl	%edx, %edi
	jne	.L11942
	movq	128(%r13), %rdx
	cmpq	%rdx, 128(%r12)
	je	.L12715
	movq	%r12, %rdi
	movq	%r13, %rsi
	call	*targetm+264(%rip)
	movl	$0, -172(%rbp)
	testl	%eax, %eax
	movl	%eax, -84(%rbp)
	je	.L11942
	movl	$0, -172(%rbp)
	movzbl	16(%r12), %eax
	cmpl	$18, %eax
	je	.L12077
	cmpl	$18, %eax
	ja	.L12094
	cmpl	$13, %eax
	je	.L11955
.L11954:
	cmpl	$2, -84(%rbp)
	jne	.L11942
	cmpl	$1, -172(%rbp)
	movl	-84(%rbp), %eax
	cmovne	-172(%rbp), %eax
	movl	%eax, -172(%rbp)
	jmp	.L11942
.L11955:
	movq	8(%r12), %rdi
	movq	8(%r13), %rsi
	cmpq	%rsi, %rdi
	je	.L11956
	call	comptypes
.L12714:
	movl	%eax, -172(%rbp)
	jmp	.L11954
.L11956:
	movl	$1, -172(%rbp)
	jmp	.L11954
.L12094:
	cmpl	$20, %eax
	je	.L12090
	cmpl	$23, %eax
	jne	.L11954
	movl	$1, -148(%rbp)
	movq	8(%r13), %rsi
	movq	8(%r12), %rdi
	cmpq	%rsi, %rdi
	je	.L11959
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -148(%rbp)
	je	.L11954
.L11959:
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	movq	%rdi, -168(%rbp)
	movq	24(%r13), %r15
	je	.L12854
	testq	%r15, %r15
	je	.L12855
	movl	$1, -172(%rbp)
	xorl	%r13d, %r13d
.L12074:
	cmpq	$0, -168(%rbp)
	je	.L12856
	testq	%r15, %r15
	je	.L12063
	movq	-168(%rbp), %rsi
	movq	32(%rsi), %rdi
	testq	%rdi, %rdi
	je	.L12857
	movq	32(%r15), %rax
	testq	%rax, %rax
	jne	.L12049
.L12729:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L12063
.L12048:
	cmpl	-172(%rbp), %r13d
	movl	-172(%rbp), %edx
	movq	-168(%rbp), %rsi
	cmovg	%r13d, %edx
	movl	%edx, -172(%rbp)
	movq	(%rsi), %r11
	movq	%r11, -168(%rbp)
	movq	(%r15), %r15
	jmp	.L12074
.L12063:
	movl	$0, -172(%rbp)
.L12043:
	cmpl	$1, -172(%rbp)
	movl	-172(%rbp), %edx
	cmove	-148(%rbp), %edx
.L12713:
	movl	%edx, -172(%rbp)
	jmp	.L11954
.L12049:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r13d
	jne	.L12048
	movq	-168(%rbp), %rdx
	movq	32(%rdx), %rax
	cmpb	$21, 16(%rax)
	je	.L12859
.L12053:
	movq	32(%r15), %rax
	cmpb	$21, 16(%rax)
	jne	.L12063
	cmpq	$0, 96(%rax)
	je	.L12064
	testb	$8, 62(%rax)
	je	.L12063
.L12064:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L12063
	movq	-168(%rbp), %r9
	movq	32(%r9), %r10
	movq	32(%r10), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L12063
	movq	32(%r15), %rcx
	movq	24(%rcx), %r12
	testq	%r12, %r12
	je	.L12063
.L12070:
	movq	-168(%rbp), %rax
	movq	8(%r12), %rdi
	movq	32(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L12066
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.L12070
	jmp	.L12063
.L12066:
	testq	%r12, %r12
	jne	.L12048
	jmp	.L12063
.L12859:
	cmpq	$0, 96(%rax)
	je	.L12054
	testb	$8, 62(%rax)
	je	.L12053
.L12054:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L12053
	movq	32(%r15), %r12
	movq	32(%r12), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L12053
	movq	-168(%rbp), %r8
	movq	32(%r8), %rdi
	movq	24(%rdi), %r12
	testq	%r12, %r12
	je	.L12063
.L12060:
	movq	8(%r12), %rdi
	movq	32(%r15), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L12066
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.L12060
	jmp	.L12063
.L12857:
	movq	32(%r15), %rdi
	jmp	.L12729
.L12856:
	testq	%r15, %r15
	je	.L12043
	jmp	.L12063
.L12855:
	movq	-168(%rbp), %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L11954
	movq	136(%r13), %rax
	testq	%rax, %rax
	je	.L12669
	movq	%rax, %r13
	movl	$1, %r15d
	movl	$0, -160(%rbp)
.L12038:
	cmpq	$0, -168(%rbp)
	je	.L12860
	testq	%r13, %r13
	je	.L12027
	movq	-168(%rbp), %r11
	movq	32(%r11), %rdi
	testq	%rdi, %rdi
	je	.L12861
	movq	32(%r13), %rax
	testq	%rax, %rax
	jne	.L12013
.L12728:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L12027
.L12012:
	movq	-168(%rbp), %r11
	cmpl	%r15d, -160(%rbp)
	cmovg	-160(%rbp), %r15d
	movq	(%r11), %rcx
	movq	%rcx, -168(%rbp)
	movq	(%r13), %r13
	jmp	.L12038
.L12027:
	xorl	%r15d, %r15d
.L12007:
	decl	%r15d
	movl	$2, -172(%rbp)
	jne	.L11954
	movl	-148(%rbp), %r13d
	movl	%r13d, -172(%rbp)
	jmp	.L11954
.L12013:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -160(%rbp)
	jne	.L12012
	movq	-168(%rbp), %rsi
	movq	32(%rsi), %rax
	cmpb	$21, 16(%rax)
	je	.L12863
.L12017:
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	jne	.L12027
	cmpq	$0, 96(%rax)
	je	.L12028
	testb	$8, 62(%rax)
	je	.L12027
.L12028:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L12027
	movq	-168(%rbp), %r10
	movq	32(%r10), %r8
	movq	32(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L12027
	movq	32(%r13), %r9
	movq	24(%r9), %r12
	testq	%r12, %r12
	je	.L12027
.L12034:
	movq	-168(%rbp), %rax
	movq	8(%r12), %rdi
	movq	32(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L12030
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.L12034
	jmp	.L12027
.L12030:
	testq	%r12, %r12
	jne	.L12012
	jmp	.L12027
.L12863:
	cmpq	$0, 96(%rax)
	je	.L12018
	testb	$8, 62(%rax)
	je	.L12017
.L12018:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L12017
	movq	32(%r13), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L12017
	movq	-168(%rbp), %r12
	movq	32(%r12), %rdi
	movq	24(%rdi), %r12
	testq	%r12, %r12
	je	.L12027
.L12024:
	movq	8(%r12), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L12030
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.L12024
	jmp	.L12027
.L12861:
	movq	32(%r13), %rdi
	jmp	.L12728
.L12860:
	testq	%r13, %r13
	je	.L12007
	jmp	.L12027
.L12669:
	movl	-148(%rbp), %edx
	jmp	.L12713
.L12854:
	movq	%r15, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L11954
	movq	136(%r12), %rax
	testq	%rax, %rax
	je	.L12667
	movq	%rax, %r13
	movl	$1, -156(%rbp)
	movl	$0, -152(%rbp)
.L11999:
	testq	%r15, %r15
	je	.L12864
	testq	%r13, %r13
	je	.L11988
	movq	32(%r15), %rdi
	testq	%rdi, %rdi
	je	.L12865
	movq	32(%r13), %rax
	testq	%rax, %rax
	jne	.L11974
.L12727:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L11988
.L11973:
	movl	-156(%rbp), %ecx
	movl	-152(%rbp), %eax
	cmpl	%ecx, -152(%rbp)
	cmovle	%ecx, %eax
	movl	%eax, -156(%rbp)
	movq	(%r13), %r13
	movq	(%r15), %r15
	jmp	.L11999
.L11988:
	movl	$0, -156(%rbp)
.L11968:
	cmpl	$1, -156(%rbp)
	movl	$2, -172(%rbp)
	jne	.L11954
	movl	-148(%rbp), %r15d
	movl	%r15d, -172(%rbp)
	jmp	.L11954
.L11974:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -152(%rbp)
	jne	.L11973
	movq	32(%r15), %rax
	cmpb	$21, 16(%rax)
	je	.L12867
.L11978:
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	jne	.L11988
	cmpq	$0, 96(%rax)
	je	.L11989
	testb	$8, 62(%rax)
	je	.L11988
.L11989:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L11988
	movq	32(%r15), %r10
	movq	32(%r10), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L11988
	movq	32(%r13), %r9
	movq	24(%r9), %r12
	testq	%r12, %r12
	je	.L11988
.L11995:
	movq	8(%r12), %rdi
	movq	32(%r15), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L11991
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.L11995
	jmp	.L11988
.L11991:
	testq	%r12, %r12
	jne	.L11973
	jmp	.L11988
.L12867:
	cmpq	$0, 96(%rax)
	je	.L11979
	testb	$8, 62(%rax)
	je	.L11978
.L11979:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L11978
	movq	32(%r13), %r12
	movq	32(%r12), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L11978
	movq	32(%r15), %r8
	movq	24(%r8), %r12
	testq	%r12, %r12
	je	.L11988
.L11985:
	movq	8(%r12), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L11991
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.L11985
	jmp	.L11988
.L12865:
	movq	32(%r13), %rdi
	jmp	.L12727
.L12864:
	testq	%r13, %r13
	je	.L11968
	jmp	.L11988
.L12667:
	movl	-148(%rbp), %r13d
	movl	%r13d, -172(%rbp)
	jmp	.L11954
.L12090:
	xorl	%edx, %edx
	movq	%r12, %rdi
	movq	%r13, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmovne	-172(%rbp), %eax
	jmp	.L12714
.L12077:
	movq	24(%r13), %rdi
	movq	24(%r12), %r15
	movl	$1, -172(%rbp)
	movq	%rdi, -96(%rbp)
	movq	8(%r13), %rsi
	movq	8(%r12), %rdi
	cmpq	%rsi, %rdi
	je	.L12078
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -172(%rbp)
	je	.L11939
.L12078:
	testq	%r15, %r15
	je	.L11954
	cmpq	$0, -96(%rbp)
	je	.L11954
	cmpq	-96(%rbp), %r15
	je	.L11954
	movq	112(%r15), %rcx
	movq	-96(%rbp), %r13
	testq	%rcx, %rcx
	movq	112(%r13), %rsi
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L12081
	movq	104(%r15), %r12
	cmpb	$25, 16(%r12)
	je	.L12868
.L12082:
	movl	$1, %r8d
.L12081:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L12083
	movq	-96(%rbp), %r9
	movq	104(%r9), %r10
	cmpb	$25, 16(%r10)
	je	.L12869
.L12084:
	movl	$1, %ecx
.L12083:
	testb	%r8b, %r8b
	jne	.L11954
	testb	%cl, %cl
	jne	.L11954
	testb	%dil, %dil
	je	.L12690
	testb	%dl, %dl
.L12712:
	jne	.L11954
.L12089:
	movl	$0, -172(%rbp)
	jmp	.L11954
.L12690:
	testb	%dl, %dl
	jne	.L12089
	movq	-96(%rbp), %r8
	movq	104(%r15), %rdi
	movq	104(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L12089
	movq	112(%r15), %rdi
	movq	-96(%rbp), %r15
	movq	112(%r15), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L12712
.L12869:
	cmpb	$25, 16(%rsi)
	jne	.L12084
	jmp	.L12083
.L12868:
	cmpb	$25, 16(%rcx)
	jne	.L12082
	jmp	.L12081
.L12715:
	movl	$1, -172(%rbp)
	jmp	.L11942
.L12853:
	cmpq	$0, 8(%r13)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L11951
.L12852:
	cmpq	$0, 8(%r12)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L11950
.L12840:
	movzbl	17(%r13), %esi
	movzwl	60(%r13), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %r13
	jmp	.L11946
.L12839:
	movzbl	17(%r12), %esi
	movzwl	60(%r12), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %r12
	jmp	.L11945
.L12838:
	testb	$2, 62(%r13)
	je	.L11944
	movq	24(%r13), %r15
	testq	%r15, %r15
	cmovne	%r15, %r13
	jmp	.L11944
.L12837:
	testb	$2, 62(%r12)
	je	.L11943
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	je	.L11943
	movq	%rdi, %r12
	movzbl	16(%rdi), %edx
	jmp	.L11943
	.p2align 6,,7
.L12775:
	movq	32(%r13), %rdi
	jmp	.L11935
.L11933:
	movq	%rax, %rbx
	jmp	.L11934
.L12774:
	movl	$.LC138, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L11931
.L11775:
	movzbl	17(%rbx), %r9d
	movzbl	62(%rbx), %r10d
	xorl	%ecx, %ecx
	movl	%r9d, %edx
	shrb	$5, %r10b
	shrb	$3, %r9b
	shrb	$4, %dl
	andl	$1, %r9d
	andl	$1, %r10d
	andl	$1, %edx
	addl	%r9d, %r9d
	sall	$2, %r10d
	orl	%r9d, %edx
	orl	%r10d, %edx
	cmpb	$20, %sil
	je	.L12870
.L11777:
	leal	0(,%rcx,8), %edi
	movzbl	62(%r12), %r15d
	movzbl	17(%r12), %ecx
	orl	%edx, %edi
	movl	%ecx, %edx
	shrb	$5, %r15b
	shrb	$3, %cl
	shrb	$4, %dl
	andl	$1, %ecx
	andl	$1, %r15d
	addl	%ecx, %ecx
	andl	$1, %edx
	sall	$2, %r15d
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	orl	%r15d, %edx
	cmpb	$20, %sil
	je	.L12871
.L11778:
	leal	0(,%rcx,8), %esi
	xorl	%r15d, %r15d
	orl	%esi, %edx
	cmpl	%edx, %edi
	jne	.L11769
	movq	128(%r12), %rdx
	cmpq	%rdx, 128(%rbx)
	je	.L12711
	movq	%rbx, %rdi
	movq	%r12, %rsi
	xorl	%r15d, %r15d
	call	*targetm+264(%rip)
	testl	%eax, %eax
	movl	%eax, -44(%rbp)
	je	.L11769
	movzbl	16(%rbx), %eax
	xorl	%r15d, %r15d
	cmpl	$18, %eax
	je	.L11904
	cmpl	$18, %eax
	ja	.L11921
	cmpl	$13, %eax
	je	.L11782
.L11781:
	cmpl	$2, -44(%rbp)
	jne	.L11769
	cmpl	$1, %r15d
	cmove	-44(%rbp), %r15d
	jmp	.L11769
.L11782:
	movq	8(%rbx), %rdi
	movq	8(%r12), %rsi
	cmpq	%rsi, %rdi
	je	.L11783
	call	comptypes
	movl	%eax, %r15d
	jmp	.L11781
.L11783:
	movl	$1, %r15d
	jmp	.L11781
.L11921:
	cmpl	$20, %eax
	je	.L11917
	cmpl	$23, %eax
	jne	.L11781
	movl	$1, -116(%rbp)
	movq	8(%r12), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L11786
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -116(%rbp)
	je	.L11781
.L11786:
	movq	24(%rbx), %rdi
	movq	%rdi, -144(%rbp)
	testq	%rdi, %rdi
	movq	24(%r12), %rdx
	movq	%rdx, -136(%rbp)
	je	.L12872
	cmpq	$0, -136(%rbp)
	je	.L12873
	movl	$1, %r15d
	xorl	%r12d, %r12d
.L11901:
	cmpq	$0, -144(%rbp)
	je	.L12874
	cmpq	$0, -136(%rbp)
	je	.L11890
	movq	-144(%rbp), %r9
	movq	32(%r9), %rdi
	testq	%rdi, %rdi
	je	.L12875
	movq	-136(%rbp), %rbx
	movq	32(%rbx), %rax
	testq	%rax, %rax
	jne	.L11876
.L12726:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L11890
.L11875:
	movq	-144(%rbp), %r8
	movq	-136(%rbp), %rdi
	cmpl	%r15d, %r12d
	cmovg	%r12d, %r15d
	movq	(%r8), %rax
	movq	%rax, -144(%rbp)
	movq	(%rdi), %r11
	movq	%r11, -136(%rbp)
	jmp	.L11901
.L11890:
	xorl	%r15d, %r15d
.L11870:
	cmpl	$1, %r15d
	cmove	-116(%rbp), %r15d
	jmp	.L11781
.L11876:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r12d
	jne	.L11875
	movq	-144(%rbp), %rsi
	movq	32(%rsi), %rax
	cmpb	$21, 16(%rax)
	je	.L12877
.L11880:
	movq	-136(%rbp), %r10
	movq	32(%r10), %rax
	cmpb	$21, 16(%rax)
	jne	.L11890
	cmpq	$0, 96(%rax)
	je	.L11891
	testb	$8, 62(%rax)
	je	.L11890
.L11891:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L11890
	movq	-144(%rbp), %rbx
	movq	32(%rbx), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L11890
	movq	-136(%rbp), %rsi
	movq	32(%rsi), %rcx
	movq	24(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L11890
.L11897:
	movq	-144(%rbp), %rdx
	movq	8(%rbx), %rdi
	movq	32(%rdx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L11893
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L11897
	jmp	.L11890
.L11893:
	testq	%rbx, %rbx
	jne	.L11875
	jmp	.L11890
.L12877:
	cmpq	$0, 96(%rax)
	je	.L11881
	testb	$8, 62(%rax)
	je	.L11880
.L11881:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L11880
	movq	-136(%rbp), %rax
	movq	32(%rax), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L11880
	movq	-144(%rbp), %rdi
	movq	32(%rdi), %r11
	movq	24(%r11), %rbx
	testq	%rbx, %rbx
	je	.L11890
.L11887:
	movq	-136(%rbp), %r8
	movq	8(%rbx), %rdi
	movq	32(%r8), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L11893
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L11887
	jmp	.L11890
.L12875:
	movq	-136(%rbp), %rcx
	movq	32(%rcx), %rdi
	jmp	.L12726
.L12874:
	cmpq	$0, -136(%rbp)
	je	.L11870
	jmp	.L11890
.L12873:
	movq	-144(%rbp), %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L11781
	movq	136(%r12), %rax
	testq	%rax, %rax
	je	.L12666
	movq	%rax, %r12
	movl	$1, -124(%rbp)
	xorl	%r15d, %r15d
.L11865:
	cmpq	$0, -144(%rbp)
	je	.L12878
	testq	%r12, %r12
	je	.L11854
	movq	-144(%rbp), %r8
	movq	32(%r8), %rdi
	testq	%rdi, %rdi
	je	.L12879
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L11840
.L12724:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L11854
.L11839:
	cmpl	-124(%rbp), %r15d
	movl	-124(%rbp), %r10d
	movq	-144(%rbp), %r8
	cmovg	%r15d, %r10d
	movl	%r10d, -124(%rbp)
	movq	(%r8), %rdi
	movq	%rdi, -144(%rbp)
	movq	(%r12), %r12
	jmp	.L11865
.L11854:
	movl	$0, -124(%rbp)
.L11834:
	movl	$2, %r15d
	cmpl	$1, -124(%rbp)
.L12725:
	jne	.L11781
.L12666:
	movl	-116(%rbp), %r15d
	jmp	.L11781
.L11840:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L11839
	movq	-144(%rbp), %r10
	movq	32(%r10), %rax
	cmpb	$21, 16(%rax)
	je	.L12881
.L11844:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L11854
	cmpq	$0, 96(%rax)
	je	.L11855
	testb	$8, 62(%rax)
	je	.L11854
.L11855:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L11854
	movq	-144(%rbp), %rsi
	movq	32(%rsi), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L11854
	movq	32(%r12), %rdx
	movq	24(%rdx), %rbx
	testq	%rbx, %rbx
	je	.L11854
.L11861:
	movq	-144(%rbp), %r11
	movq	8(%rbx), %rdi
	movq	32(%r11), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L11857
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L11861
	jmp	.L11854
.L11857:
	testq	%rbx, %rbx
	jne	.L11839
	jmp	.L11854
.L12881:
	cmpq	$0, 96(%rax)
	je	.L11845
	testb	$8, 62(%rax)
	je	.L11844
.L11845:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L11844
	movq	32(%r12), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L11844
	movq	-144(%rbp), %rax
	movq	32(%rax), %rcx
	movq	24(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L11854
.L11851:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L11857
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L11851
	jmp	.L11854
.L12879:
	movq	32(%r12), %rdi
	jmp	.L12724
.L12878:
	testq	%r12, %r12
	je	.L11834
	jmp	.L11854
.L12872:
	movq	%rdx, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L11781
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L12666
	movq	%rax, %r12
	movl	$1, -120(%rbp)
	xorl	%r15d, %r15d
.L11826:
	cmpq	$0, -136(%rbp)
	je	.L12882
	testq	%r12, %r12
	je	.L11815
	movq	-136(%rbp), %rbx
	movq	32(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L12883
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L11801
.L12723:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L11815
.L11800:
	cmpl	-120(%rbp), %r15d
	movl	-120(%rbp), %r11d
	movq	-136(%rbp), %rbx
	cmovg	%r15d, %r11d
	movl	%r11d, -120(%rbp)
	movq	(%rbx), %rdi
	movq	%rdi, -136(%rbp)
	movq	(%r12), %r12
	jmp	.L11826
.L11815:
	movl	$0, -120(%rbp)
.L11795:
	cmpl	$1, -120(%rbp)
	movl	$2, %r15d
	jmp	.L12725
.L11801:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	jne	.L11800
	movq	-136(%rbp), %r11
	movq	32(%r11), %rax
	cmpb	$21, 16(%rax)
	je	.L12885
.L11805:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L11815
	cmpq	$0, 96(%rax)
	je	.L11816
	testb	$8, 62(%rax)
	je	.L11815
.L11816:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L11815
	movq	-136(%rbp), %rcx
	movq	32(%rcx), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L11815
	movq	32(%r12), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L11815
.L11822:
	movq	-136(%rbp), %rdx
	movq	8(%rbx), %rdi
	movq	32(%rdx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L11818
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L11822
	jmp	.L11815
.L11818:
	testq	%rbx, %rbx
	jne	.L11800
	jmp	.L11815
.L12885:
	cmpq	$0, 96(%rax)
	je	.L11806
	testb	$8, 62(%rax)
	je	.L11805
.L11806:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L11805
	movq	32(%r12), %r8
	movq	32(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L11805
	movq	-136(%rbp), %rax
	movq	32(%rax), %r10
	movq	24(%r10), %rbx
	testq	%rbx, %rbx
	je	.L11815
.L11812:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L11818
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L11812
	jmp	.L11815
.L12883:
	movq	32(%r12), %rdi
	jmp	.L12723
.L12882:
	testq	%r12, %r12
	je	.L11795
	jmp	.L11815
.L11917:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmove	%eax, %r15d
	jmp	.L11781
.L11904:
	movq	24(%rbx), %r10
	movq	%r10, -56(%rbp)
	movq	24(%r12), %r15
	movq	%r15, -64(%rbp)
	movq	8(%r12), %rsi
	movq	8(%rbx), %rdi
	movl	$1, %r15d
	cmpq	%rsi, %rdi
	je	.L11905
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r15d
	je	.L12691
.L11905:
	cmpq	$0, -56(%rbp)
	je	.L11781
	cmpq	$0, -64(%rbp)
	je	.L11781
	movq	-64(%rbp), %rbx
	cmpq	%rbx, -56(%rbp)
	je	.L11781
	movq	-56(%rbp), %r9
	movq	112(%rbx), %rsi
	movq	112(%r9), %rcx
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L11908
	movq	104(%r9), %r12
	cmpb	$25, 16(%r12)
	je	.L12886
.L11909:
	movl	$1, %r8d
.L11908:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L11910
	movq	-64(%rbp), %rbx
	movq	104(%rbx), %r9
	cmpb	$25, 16(%r9)
	je	.L12887
.L11911:
	movl	$1, %ecx
.L11910:
	testb	%r8b, %r8b
	jne	.L11781
	testb	%cl, %cl
	jne	.L11781
	testb	%dil, %dil
	je	.L12680
	testb	%dl, %dl
.L12710:
	jne	.L11781
.L11916:
	xorl	%r15d, %r15d
	jmp	.L11781
.L12680:
	testb	%dl, %dl
	jne	.L11916
	movq	-56(%rbp), %rsi
	movq	-64(%rbp), %rcx
	movq	104(%rsi), %rdi
	movq	104(%rcx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L11916
	movq	-56(%rbp), %r11
	movq	-64(%rbp), %rdx
	movq	112(%r11), %rdi
	movq	112(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L12710
.L12887:
	cmpb	$25, 16(%rsi)
	jne	.L11911
	jmp	.L11910
.L12886:
	cmpb	$25, 16(%rcx)
	jne	.L11909
	jmp	.L11908
	.p2align 6,,7
.L12711:
	movl	$1, %r15d
	jmp	.L11769
.L12871:
	cmpq	$0, 8(%r12)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L11778
.L12870:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L11777
.L12773:
	movzbl	17(%r12), %esi
	movzwl	60(%r12), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %r12
	jmp	.L11773
.L12772:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L11772
.L12771:
	testb	$2, 62(%r12)
	je	.L11771
	movq	24(%r12), %r8
	testq	%r8, %r8
	cmovne	%r8, %r12
	jmp	.L11771
.L12770:
	testb	$2, 62(%rbx)
	je	.L11770
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L11770
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L11770
	.p2align 6,,7
.L12769:
	movzbl	%cl, %r8d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r8), %eax
	movq	8(%rdi), %r15
	cmpb	$114, %al
	je	.L11714
	cmpb	$100, %al
	je	.L11714
.L11713:
	movzbl	17(%rdi), %r8d
	movl	$1, %esi
	movl	%r8d, %r10d
	movl	%r8d, %r9d
	shrb	$4, %r10b
	shrb	$3, %r9b
	andl	%r10d, %esi
	andl	$1, %r9d
	movzbl	62(%rdi), %r10d
	movzbl	16(%rdi), %edi
	addl	%r9d, %r9d
	orl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r10d, %r13d
	shrb	$5, %r13b
	andl	$1, %r13d
	sall	$2, %r13d
	orl	%r13d, %esi
	cmpb	$20, %dil
	je	.L12888
.L11717:
	leal	0(,%r9,8), %r13d
	orl	%r13d, %esi
	jne	.L11716
	testl	%edx, %edx
	jne	.L11716
	testl	%r11d, %r11d
	je	.L11715
.L11716:
	movl	%r8d, %r13d
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r13b
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%r13d, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L12889
.L11719:
	leal	0(,%rcx,8), %edi
	orl	%edi, %esi
	movq	%r15, %rdi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%rbx), %ecx
	movq	%rax, %r15
.L11715:
	cmpb	$41, %cl
	je	.L12890
	cmpb	$47, %cl
	je	.L12891
	xorl	%r13d, %r13d
	testl	%r12d, %r12d
	je	.L12892
.L11758:
	movl	flag_isoc99(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L11759
	testl	%r13d, %r13d
	movq	%rbx, -112(%rbp)
	je	.L11711
.L11759:
	movq	%r15, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %r12
	je	.L12893
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%r12, %rdi
	movq	%rax, %rsi
.L12722:
	call	convert
.L12709:
	movq	%rax, -112(%rbp)
	jmp	.L11711
.L12893:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, -112(%rbp)
	call	mark_addressable
	testl	%eax, %eax
	jne	.L11761
	movq	global_trees(%rip), %rbx
	movq	%rbx, -112(%rbp)
	jmp	.L11711
.L11761:
	movq	%rbx, %rdi
	call	staticp
	movq	-112(%rbp), %r9
	movl	%eax, %r15d
	andb	$1, %r15b
	movzbl	17(%r9), %edi
	addb	%r15b, %r15b
	andb	$-4, %dil
	orb	%r15b, %dil
	movb	%dil, 17(%r9)
	jmp	.L11711
.L12892:
	movq	%rbx, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r13d
	jmp	.L11758
.L12891:
	movq	40(%rbx), %r12
	movq	8(%r12), %r13
	movzbl	16(%r13), %r15d
	movq	%r13, %rax
	cmpl	$23, %r15d
	je	.L11723
	cmpl	$18, %r15d
	je	.L11723
	movzbl	16(%r12), %edx
	cmpb	$32, %dl
	je	.L12894
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L11726
	cmpb	$34, %dl
	je	.L12895
.L11726:
	cmpb	$116, %dl
	movq	%r12, %rcx
	je	.L12695
	cmpb	$115, %dl
	je	.L12896
.L11735:
	movzbl	%dl, %edi 
	movzbl	tree_code_type(%rdi), %eax
	cmpb	$60, %al
	je	.L11740
	cmpb	$49, %al
	je	.L11740
	cmpb	$50, %al
	je	.L11740
	cmpb	$101, %al
	je	.L11740
.L11739:
	cmpl	$10, %r15d
	je	.L12897
	cmpb	$39, %dl
	je	.L12898
.L11748:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L11753
	testb	$32, 17(%r13)
	je	.L11754
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L11755
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r13), %r8d
	movzwl	60(%rdx), %r13d
	andl	$511, %r8d
	andl	$511, %r13d
	cmpl	%r13d, %r8d
	je	.L11755
.L11754:
	movq	integer_types+40(%rip), %rdi
.L12708:
	movq	%r12, %rsi
	call	convert
.L11724:
	movq	8(%rax), %rsi
	movq	32(%rbx), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L12709
.L11755:
	movq	integer_types+48(%rip), %rdi
	jmp	.L12708
.L11753:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L11756
	movl	flag_allow_single_precision(%rip), %esi
	testl	%esi, %esi
	jne	.L11756
	movq	global_trees+192(%rip), %r10
	cmpq	%r10, 128(%r13)
	je	.L12899
.L11756:
	cmpl	$5, %r15d
	je	.L12900
	movq	%r12, %rax
	jmp	.L11724
.L12900:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L11724
.L12899:
	movq	global_trees+200(%rip), %rdi
	jmp	.L12708
	.p2align 6,,7
.L12898:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L11748
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L11748
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L11754
	testb	$32, 17(%r13)
	jne	.L11755
	jmp	.L11754
	.p2align 6,,7
.L12897:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r15d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r15d, %r15d
	jne	.L11747
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L11746
.L11747:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L11746:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L12708
.L11740:
	movl	24(%rcx), %eax
	movl	%eax, 24(%r12)
	jmp	.L11739
.L12896:
	movq	32(%r12), %rsi
	movq	8(%r12), %rax
	cmpq	%rax, 8(%rsi)
	jne	.L11735
.L11738:
	movzbl	16(%rsi), %edx
	movq	%rsi, %r12
	cmpb	$116, %dl
	jne	.L12901
.L12695:
	movq	32(%r12), %rsi
	jmp	.L11738
.L12901:
	cmpb	$115, %dl
	jne	.L11735
	movq	32(%rsi), %r9
	movq	8(%r12), %r10
	cmpq	%r10, 8(%r9)
	movq	%r9, %rsi
	je	.L11738
	jmp	.L11735
.L12895:
	movl	pedantic(%rip), %r8d
	testl	%r8d, %r8d
	jne	.L11730
	cmpb	$51, 48(%r12)
	je	.L11730
	cmpq	$0, current_function_decl(%rip)
	je	.L11732
	movzbl	17(%r12), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L12902
.L11732:
	movq	%r12, %rsi
.L11733:
	movq	%rsi, %r12
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L11730:
	movq	%rax, %r13
	jmp	.L11726
.L12902:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L11732
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L11732
	testb	$2, 17(%rax)
	je	.L11732
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L11733
	jmp	.L11732
	.p2align 6,,7
.L12894:
	movq	104(%r12), %r12
	movzbl	16(%r12), %edx
	jmp	.L11726
.L11723:
	movq	%r12, %rdi
	call	default_function_array_conversion
	jmp	.L11724
.L12890:
	movq	72(%r15), %rdi
	movq	32(%rbx), %rsi
	jmp	.L12722
.L12889:
	testq	%r15, %r15
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L11719
.L12888:
	testq	%r15, %r15
	movl	$1, %eax
	cmovne	%eax, %r9d
	jmp	.L11717
.L11714:
	movzbl	17(%rbx), %r10d
	movl	$1, %r11d
	movl	%r10d, %edx
	shrb	$3, %r10b
	shrb	$4, %dl
	andl	%r10d, %r11d
	andl	$1, %edx
	jmp	.L11713
.L12768:
	movl	$121, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L12709
.L11709:
	movl	24(%r8), %eax
	movl	%eax, 24(%rbx)
	jmp	.L11708
.L12767:
	movq	32(%rsi), %rsi
	cmpq	%rdi, 8(%rsi)
	jne	.L11703
	.p2align 4,,7
.L11707:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %rbx
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r12d
	cmpb	$116, %cl
	jne	.L12903
.L12693:
	movq	32(%rbx), %rsi
	jmp	.L11707
.L12903:
	cmpb	$115, %cl
	jne	.L11703
	movq	32(%rsi), %rsi
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%rsi)
	je	.L11707
	jmp	.L11703
.L12733:
	movl	pedantic(%rip), %edx
	testl	%edx, %edx
	je	.L12580
	leal	-20(%rcx), %esi
	cmpb	$1, %sil
	ja	.L11700
	movl	$.LC137, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L12707
.LFE30:
.Lfe30:
	.size	build_c_cast,.Lfe30-build_c_cast
	.align 2
	.p2align 4,,15
.globl c_cast_expr
	.type	c_cast_expr,@function
c_cast_expr:
.LFB31:
	subq	$24, %rsp
.LCFI129:
	movq	%rbx, 8(%rsp)
.LCFI130:
	movq	%rbp, 16(%rsp)
.LCFI131:
	movq	%rsi, %rbx
	cmpb	$25, 16(%rsi)
	movl	warn_strict_prototypes(%rip), %ebp
	je	.L12906
.L12905:
	call	groktypename
	movq	%rbx, %rsi
	movl	%ebp, warn_strict_prototypes(%rip)
	movq	8(%rsp), %rbx
	movq	%rax, %rdi
	movq	16(%rsp), %rbp
	addq	$24, %rsp
	jmp	build_c_cast
	.p2align 6,,7
.L12906:
	movl	$0, warn_strict_prototypes(%rip)
	jmp	.L12905
.LFE31:
.Lfe31:
	.size	c_cast_expr,.Lfe31-c_cast_expr
	.align 2
	.p2align 4,,15
.globl c_convert_parm_for_inlining
	.type	c_convert_parm_for_inlining,@function
c_convert_parm_for_inlining:
.LFB32:
	subq	$40, %rsp
.LCFI132:
	movq	%rdx, %r8
	testq	%rsi, %rsi
	movq	%rbx, 8(%rsp)
.LCFI133:
	movq	%rbp, 16(%rsp)
.LCFI134:
	movq	%r12, 24(%rsp)
.LCFI135:
	movq	%r13, 32(%rsp)
.LCFI136:
	je	.L12907
	movq	8(%rdx), %rdx
	cmpq	$0, 24(%rdx)
	je	.L13022
.L12907:
	movq	8(%rsp), %rbx
	movq	16(%rsp), %rbp
	movq	%rsi, %rax
	movq	24(%rsp), %r12
	movq	32(%rsp), %r13
	addq	$40, %rsp
	ret
	.p2align 6,,7
.L13022:
	movq	8(%rdi), %rbx
	movq	%r8, %rcx
	xorl	%edx, %edx
	movq	72(%r8), %r8
	xorl	%r9d, %r9d
	movq	%rbx, %rdi
	call	convert_for_assignment
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rbp
	jne	.L12910
	movzbl	16(%rbx), %eax
	cmpb	$6, %al
	je	.L12911
	cmpb	$10, %al
	je	.L12911
	cmpb	$11, %al
	je	.L12911
	cmpb	$12, %al
	je	.L12911
	.p2align 4,,7
.L12910:
	movq	%rbp, %rsi
	jmp	.L12907
.L12911:
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%rbx), %esi
	movzwl	60(%rdx), %ecx
	andl	$511, %esi
	andl	$511, %ecx
	cmpl	%ecx, %esi
	jge	.L12910
	movq	8(%rbp), %r12
	movzbl	16(%r12), %ebx
	movq	%r12, %rax
	cmpl	$23, %ebx
	je	.L12913
	cmpl	$18, %ebx
	je	.L12913
	movzbl	16(%rbp), %ecx
	cmpb	$32, %cl
	je	.L13023
	movl	optimize(%rip), %r8d
	testl	%r8d, %r8d
	je	.L12976
	cmpb	$34, %cl
	je	.L13024
.L12976:
	cmpb	$116, %cl
	movq	%rbp, %rsi
	je	.L13016
	cmpb	$115, %cl
	je	.L13025
.L12985:
	movzbl	%cl, %edx 
	movzbl	tree_code_type(%rdx), %eax
	cmpb	$60, %al
	je	.L12990
	cmpb	$49, %al
	je	.L12990
	cmpb	$50, %al
	je	.L12990
	cmpb	$101, %al
	je	.L12990
.L12989:
	cmpl	$10, %ebx
	je	.L13026
	cmpb	$39, %cl
	je	.L13027
.L12998:
	movq	%r12, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L13003
	testb	$32, 17(%r12)
	je	.L13004
	movl	flag_traditional(%rip), %esi
	testl	%esi, %esi
	jne	.L13005
	movq	integer_types+40(%rip), %r13
	movzwl	60(%r12), %r11d
	movzwl	60(%r13), %r12d
	andl	$511, %r11d
	andl	$511, %r12d
	cmpl	%r12d, %r11d
	je	.L13005
.L13004:
	movq	integer_types+40(%rip), %rdi
.L13018:
	movq	%rbp, %rsi
.L13019:
	call	convert
.L13021:
	movq	%rax, %rbx
.L12974:
	movq	%rbx, %rbp
	jmp	.L12910
.L13005:
	movq	integer_types+48(%rip), %rdi
	jmp	.L13018
.L13003:
	movl	flag_traditional(%rip), %edi
	testl	%edi, %edi
	je	.L13006
	movl	flag_allow_single_precision(%rip), %r9d
	testl	%r9d, %r9d
	jne	.L13006
	movq	global_trees+192(%rip), %r10
	cmpq	%r10, 128(%r12)
	je	.L13028
.L13006:
	cmpl	$5, %ebx
	je	.L13029
.L13007:
	movq	%rbp, %rbx
	jmp	.L12974
.L13029:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L13020:
	movq	global_trees(%rip), %rbx
	jmp	.L12974
.L13028:
	movq	global_trees+200(%rip), %rdi
	jmp	.L13018
	.p2align 6,,7
.L13027:
	movq	40(%rbp), %rdx
	testb	$2, 53(%rdx)
	je	.L12998
	movq	integer_types+40(%rip), %r8
	movq	40(%rdx), %rdi
	movzwl	60(%r8), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L12998
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L13004
	testb	$32, 17(%r12)
	jne	.L13005
	jmp	.L13004
	.p2align 6,,7
.L13026:
	movq	integer_types+40(%rip), %rbx
	movzwl	60(%r12), %edx
	movl	flag_traditional(%rip), %ecx
	movzwl	60(%rbx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%ecx, %ecx
	jne	.L12997
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L12996
.L12997:
	testb	$32, 17(%r12)
	movl	$1, %eax
	cmovne	%eax, %esi
.L12996:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L13018
.L12990:
	movl	24(%rsi), %eax
	movl	%eax, 24(%rbp)
	jmp	.L12989
.L13025:
	movq	32(%rbp), %rdx
	movq	8(%rbp), %rdi
	cmpq	%rdi, 8(%rdx)
	jne	.L12985
	.p2align 4,,7
.L12988:
	movzbl	16(%rdx), %ecx
	movq	%rdx, %rbp
	cmpb	$116, %cl
	jne	.L13030
.L13016:
	movq	32(%rbp), %rdx
	jmp	.L12988
.L13030:
	cmpb	$115, %cl
	jne	.L12985
	movq	32(%rdx), %r10
	movq	8(%rbp), %r9
	cmpq	%r9, 8(%r10)
	movq	%r10, %rdx
	je	.L12988
	jmp	.L12985
.L13024:
	movl	pedantic(%rip), %r11d
	testl	%r11d, %r11d
	jne	.L12980
	cmpb	$51, 48(%rbp)
	je	.L12980
	cmpq	$0, current_function_decl(%rip)
	je	.L12982
	movzbl	17(%rbp), %r13d
	andb	$24, %r13b
	cmpb	$16, %r13b
	je	.L13031
.L12982:
	movq	%rbp, %rax
.L12983:
	movq	%rax, %rbp
	movq	8(%rax), %rax
	movzbl	16(%rbp), %ecx
.L12980:
	movq	%rax, %r12
	jmp	.L12976
.L13031:
	movq	104(%rbp), %rax
	testq	%rax, %rax
	je	.L12982
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L12982
	testb	$2, 17(%rax)
	je	.L12982
	cmpb	$46, %dl
	jne	.L12983
	jmp	.L12982
	.p2align 6,,7
.L13023:
	movq	104(%rbp), %rbp
	movzbl	16(%rbp), %ecx
	jmp	.L12976
.L12913:
	movzbl	16(%rbp), %ecx
	movl	%ebx, %esi
	movq	%rbp, %rdi
	xorl	%ebx, %ebx
	cmpb	$116, %cl
	je	.L13012
	cmpb	$115, %cl
	je	.L13032
.L12915:
	movzbl	%cl, %r9d 
	movzbl	tree_code_type(%r9), %eax
	cmpb	$60, %al
	je	.L12921
	cmpb	$49, %al
	je	.L12921
	cmpb	$50, %al
	je	.L12921
	cmpb	$101, %al
	je	.L12921
.L12920:
	cmpl	$23, %esi
	je	.L13033
	cmpl	$18, %esi
	jne	.L13007
	movzbl	%cl, %edi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rdi), %eax
	movq	8(%r12), %r13
	cmpb	$114, %al
	je	.L12926
	cmpb	$100, %al
	je	.L12926
.L12925:
	movzbl	17(%r12), %r8d
	movl	$1, %esi
	movl	%r8d, %r9d
	movl	%r8d, %r10d
	shrb	$3, %r9b
	shrb	$4, %r10b
	andl	$1, %r9d
	andl	%r10d, %esi
	xorl	%r10d, %r10d
	addl	%r9d, %r9d
	orl	%r9d, %esi
	movzbl	62(%r12), %r9d
	movl	%r9d, %edi
	shrb	$5, %dil
	andl	$1, %edi
	sall	$2, %edi
	orl	%edi, %esi
	movzbl	16(%r12), %edi
	cmpb	$20, %dil
	je	.L13034
.L12929:
	leal	0(,%r10,8), %r12d
	orl	%r12d, %esi
	jne	.L12928
	testl	%edx, %edx
	jne	.L12928
	testl	%r11d, %r11d
	je	.L12927
.L12928:
	movl	%r8d, %r12d
	shrb	$5, %r9b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r12b
	movl	%r9d, %ecx
	movl	%r8d, %r10d
	andl	%r12d, %esi
	andl	$1, %ecx
	andl	$1, %r10d
	sall	$2, %ecx
	addl	%r10d, %r10d
	orl	%r10d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L13035
.L12931:
	leal	0(,%rcx,8), %r8d
	movq	%r13, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%rbp), %ecx
	movq	%rax, %r13
.L12927:
	cmpb	$41, %cl
	je	.L13036
	cmpb	$47, %cl
	je	.L13037
	xorl	%r12d, %r12d
	testl	%ebx, %ebx
	je	.L13038
.L12970:
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L12971
	testl	%r12d, %r12d
	movq	%rbp, %rbx
	je	.L12974
.L12971:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbp)
	movq	%rax, %rbx
	je	.L13039
	movl	$121, %edi
	movq	%rbp, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L13019
.L13039:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbp, %rdx
	call	build1
	movq	%rbp, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L13020
	movq	%rbp, %rdi
	call	staticp
	movzbl	17(%rbx), %ebp
	movl	%eax, %r10d
	andb	$1, %r10b
	addb	%r10b, %r10b
	andb	$-4, %bpl
	orb	%r10b, %bpl
	movb	%bpl, 17(%rbx)
	jmp	.L12974
.L13038:
	movq	%rbp, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r12d
	jmp	.L12970
.L13037:
	movq	40(%rbp), %rbx
	movq	8(%rbx), %r12
	movzbl	16(%r12), %r13d
	movq	%r12, %rax
	cmpl	$23, %r13d
	je	.L12935
	cmpl	$18, %r13d
	je	.L12935
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L13040
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L12938
	cmpb	$34, %dl
	je	.L13041
.L12938:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L13014
	cmpb	$115, %dl
	je	.L13042
.L12947:
	movzbl	%dl, %r11d 
	movzbl	tree_code_type(%r11), %eax
	cmpb	$60, %al
	je	.L12952
	cmpb	$49, %al
	je	.L12952
	cmpb	$50, %al
	je	.L12952
	cmpb	$101, %al
	je	.L12952
.L12951:
	cmpl	$10, %r13d
	je	.L13043
	cmpb	$39, %dl
	je	.L13044
.L12960:
	movq	%r12, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L12965
	testb	$32, 17(%r12)
	je	.L12966
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L12967
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r12), %esi
	movzwl	60(%rdx), %r12d
	andl	$511, %esi
	andl	$511, %r12d
	cmpl	%r12d, %esi
	je	.L12967
.L12966:
	movq	integer_types+40(%rip), %rdi
.L13017:
	movq	%rbx, %rsi
	call	convert
.L12936:
	movq	8(%rax), %rsi
	movq	32(%rbp), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L13021
.L12967:
	movq	integer_types+48(%rip), %rdi
	jmp	.L13017
.L12965:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L12968
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L12968
	movq	global_trees+192(%rip), %r9
	cmpq	%r9, 128(%r12)
	je	.L13045
.L12968:
	cmpl	$5, %r13d
	je	.L13046
	movq	%rbx, %rax
	jmp	.L12936
.L13046:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L12936
.L13045:
	movq	global_trees+200(%rip), %rdi
	jmp	.L13017
	.p2align 6,,7
.L13044:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L12960
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%rdi), %esi
	movq	40(%rdx), %rdi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L12960
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L12966
	testb	$32, 17(%r12)
	jne	.L12967
	jmp	.L12966
	.p2align 6,,7
.L13043:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r12), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L12959
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L12958
.L12959:
	testb	$32, 17(%r12)
	movl	$1, %eax
	cmovne	%eax, %esi
.L12958:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L13017
.L12952:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L12951
.L13042:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%rsi)
	jne	.L12947
.L12950:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L13047
.L13014:
	movq	32(%rbx), %rsi
	jmp	.L12950
.L13047:
	cmpb	$115, %dl
	jne	.L12947
	movq	32(%rsi), %r8
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%r8)
	movq	%r8, %rsi
	je	.L12950
	jmp	.L12947
.L13041:
	movl	pedantic(%rip), %edi
	testl	%edi, %edi
	jne	.L12942
	cmpb	$51, 48(%rbx)
	je	.L12942
	cmpq	$0, current_function_decl(%rip)
	je	.L12944
	movzbl	17(%rbx), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L13048
.L12944:
	movq	%rbx, %rsi
.L12945:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L12942:
	movq	%rax, %r12
	jmp	.L12938
.L13048:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L12944
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L12944
	testb	$2, 17(%rax)
	je	.L12944
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L12945
	jmp	.L12944
	.p2align 6,,7
.L13040:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L12938
.L12935:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L12936
.L13036:
	movq	72(%r13), %rdi
	movq	32(%rbp), %rsi
	jmp	.L13019
.L13035:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L12931
.L13034:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %r10d
	jmp	.L12929
.L12926:
	movzbl	17(%rbp), %r10d
	movl	$1, %r11d
	movl	%r10d, %edx
	shrb	$3, %r10b
	shrb	$4, %dl
	andl	%r10d, %r11d
	andl	$1, %edx
	jmp	.L12925
.L13033:
	movl	$121, %edi
	movq	%rbp, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L13021
.L12921:
	movl	24(%rdi), %eax
	movl	%eax, 24(%rbp)
	jmp	.L12920
.L13032:
	movq	32(%rbp), %rdx
	cmpq	%r12, 8(%rdx)
	jne	.L12915
	.p2align 4,,7
.L12919:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rdx, %rbp
	movzbl	16(%rdx), %ecx
	cmove	%eax, %ebx
	cmpb	$116, %cl
	jne	.L13049
.L13012:
	movq	32(%rbp), %rdx
	jmp	.L12919
.L13049:
	cmpb	$115, %cl
	jne	.L12915
	movq	32(%rdx), %rdx
	movq	8(%rbp), %r8
	cmpq	%r8, 8(%rdx)
	je	.L12919
	jmp	.L12915
.LFE32:
.Lfe32:
	.size	c_convert_parm_for_inlining,.Lfe32-c_convert_parm_for_inlining
	.section	.rodata.str1.32
	.align 32
.LC158:
	.string	"traditional C rejects automatic aggregate initialization"
	.text
	.align 2
	.p2align 4,,15
.globl store_init_value
	.type	store_init_value,@function
store_init_value:
.LFB33:
	pushq	%rbp
.LCFI137:
	movq	%rsp, %rbp
.LCFI138:
	pushq	%r15
.LCFI139:
	pushq	%r14
.LCFI140:
	pushq	%r13
.LCFI141:
	pushq	%r12
.LCFI142:
	pushq	%rbx
.LCFI143:
	subq	$232, %rsp
.LCFI144:
	movq	%rsi, -56(%rbp)
	movq	%rdi, -48(%rbp)
	movq	8(%rdi), %r15
	movzbl	16(%r15), %edx
	testb	%dl, %dl
	je	.L13057
	movzbl	18(%rdi), %ecx
	movq	%r15, %r12
	movl	$0, -212(%rbp)
	shrb	$2, %cl
	movl	%ecx, %ebx
	andl	$1, %ebx
	movl	%ebx, -60(%rbp)
	jne	.L13060
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	je	.L13059
	movl	flag_isoc99(%rip), %esi
	testl	%esi, %esi
	jne	.L13059
.L13060:
	movl	$1, -212(%rbp)
.L13059:
	movzbl	%dl, %ebx
	movq	-56(%rbp), %rdi
	movq	global_trees(%rip), %rdx
	cmpq	%rdx, %r15
	movq	%rdx, %rax
	je	.L13062
	cmpq	%rdx, %rdi
	je	.L13062
	cmpq	%rdx, 8(%rdi)
	je	.L13062
	movq	-56(%rbp), %rax
	cmpb	$116, 16(%rax)
	je	.L13742
.L13064:
	call	fold
	cmpl	$18, %ebx
	movq	%rax, %r13
	je	.L13743
.L13065:
	testq	%r13, %r13
	je	.L13305
	movq	8(%r13), %rax
	testq	%rax, %rax
	jne	.L13744
.L13305:
	leal	-6(%rbx), %edx
	cmpl	$1, %edx
	jbe	.L13490
	cmpl	$13, %ebx
	je	.L13490
	cmpl	$10, %ebx
	je	.L13490
	cmpl	$11, %ebx
	je	.L13490
	cmpl	$8, %ebx
	je	.L13490
	movq	32(%r15), %rax
	testq	%rax, %rax
	je	.L13542
	cmpb	$25, 16(%rax)
	je	.L13542
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC149, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r10
	xorl	%r12d, %r12d
	cmpq	%r10, %r14
	movq	%r14, %rbx
	movq	%r10, %r13
	jae	.L13693
.L13549:
	cmpl	$3, (%rbx)
	je	.L13745
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L13545:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L13549
.L13693:
	movslq	%r12d,%r9
	movq	%r14, %r12
	addq	$16, %r9
	andq	$-16, %r9
	subq	%r9, %rsp
	cmpq	%r13, %r14
	movq	%rsp, -168(%rbp)
	movq	%rsp, %rbx
	jae	.L13695
.L13563:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L13746
	cmpl	$2, %eax
	je	.L13747
.L13557:
	movq	8(%r12), %rdi
	movzbl	(%rdi), %r14d
	leaq	1(%rdi), %rcx
	testb	%r14b, %r14b
	movb	%r14b, (%rbx)
	je	.L13553
	.p2align 4,,7
.L13562:
	movzbl	(%rcx), %esi
	incq	%rbx
	incq	%rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	jne	.L13562
.L13553:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L13563
.L13695:
	movb	$0, (%rbx)
	movq	-168(%rbp), %rax
	cmpb	$0, (%rax)
	jne	.L13748
.L13627:
	movq	global_trees(%rip), %r13
.L13063:
	movl	warn_traditional(%rip), %r12d
	testl	%r12d, %r12d
	je	.L13628
	movl	in_system_header(%rip), %edi
	testl	%edi, %edi
	jne	.L13628
	movq	-48(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	16(%rsi), %eax
	cmpb	$18, %al
	je	.L13629
	cmpb	$20, %al
	je	.L13629
	cmpb	$21, %al
	je	.L13629
	cmpb	$22, %al
	je	.L13629
	cmpb	$19, %al
	je	.L13629
	.p2align 4,,7
.L13628:
	movq	-48(%rbp), %r8
	movq	%r13, 104(%r8)
	movzbl	16(%r13), %ebx
	subb	$114, %bl
	cmpb	$2, %bl
	ja	.L13631
	movq	32(%r13), %rax
	movq	global_trees(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L13631
	movq	8(%rax), %r11
	cmpq	%r11, 8(%r13)
	je	.L13634
.L13631:
	movq	%r13, %rdi
	call	constant_expression_warning
	cmpb	$18, 16(%r15)
	je	.L13749
.L13057:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
	.p2align 6,,7
.L13749:
	cmpq	$0, 24(%r15)
	jne	.L13057
	cmpq	global_trees(%rip), %r13
	je	.L13057
	movq	-56(%rbp), %rdi
	cmpb	$116, 16(%rdi)
	je	.L13750
.L13636:
	call	fold
	cmpb	$-86, 16(%rax)
	jne	.L13057
	movq	32(%rax), %rdx
	movq	32(%rdx), %rbx
	movq	8(%rbx), %r13
	movq	24(%r13), %rax
	testq	%rax, %rax
	je	.L13057
	movq	%r15, %rdi
	movq	%rax, 24(%r15)
	call	layout_type
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	layout_decl
	jmp	.L13057
.L13750:
	movq	32(%rdi), %rdi
	jmp	.L13636
	.p2align 6,,7
.L13634:
	movzbl	16(%rax), %r10d
	movq	%rax, %r13
	subb	$114, %r10b
	cmpb	$2, %r10b
	ja	.L13631
	movq	32(%rax), %rax
	cmpq	%rdx, %rax
	je	.L13631
	movq	8(%rax), %r9
	cmpq	%r9, 8(%r13)
	je	.L13634
	jmp	.L13631
.L13629:
	movq	-48(%rbp), %rcx
	testb	$4, 18(%rcx)
	jne	.L13628
	movl	$.LC158, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L13628
.L13748:
	movl	$.LC142, %edi
	movq	%rax, %rsi
.L13737:
	xorl	%eax, %eax
	call	error
	jmp	.L13627
.L13747:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L13557
.L13746:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L13553
.L13745:
	addl	$25, %r12d
	jmp	.L13545
.L13542:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L13567
	movzbl	16(%r15), %eax
	xorl	%r13d, %r13d
	xorl	%r14d, %r14d
	cmpb	$20, %al
	je	.L13601
	cmpb	$18, %al
	je	.L13601
	cmpb	$22, %al
	je	.L13601
	cmpb	$21, %al
	je	.L13601
.L13698:
	cmpq	%r12, %r15
	je	.L13627
	movq	-56(%rbp), %rsi
	movl	-60(%rbp), %edx
	movq	%r12, %rdi
	movl	-212(%rbp), %ecx
	call	digest_init
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%rax, 40(%r14)
	jmp	.L13063
	.p2align 6,,7
.L13601:
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movl	$46, %edi
	movq	%r12, %rsi
	call	build
	testq	%r14, %r14
	movq	%rax, %rbx
	jne	.L13571
	movq	%rax, %r13
.L13572:
	cmpb	$18, 16(%r12)
	movq	%rbx, %r14
	je	.L13751
	movq	24(%r12), %rax
	testq	%rax, %rax
	je	.L13575
	movq	8(%rax), %r12
.L13568:
	movzbl	16(%r12), %eax
	cmpb	$20, %al
	je	.L13601
	cmpb	$18, %al
	je	.L13601
	cmpb	$22, %al
	je	.L13601
	cmpb	$21, %al
	je	.L13601
	jmp	.L13698
	.p2align 6,,7
.L13575:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC150, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rcx
	xorl	%r12d, %r12d
	cmpq	%rcx, %r14
	movq	%r14, %rbx
	movq	%rcx, %r13
	jae	.L13700
.L13583:
	cmpl	$3, (%rbx)
	je	.L13752
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L13579:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L13583
.L13700:
	movslq	%r12d,%rbx
	movq	%r14, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, -176(%rbp)
	movq	%rsp, %rbx
	jae	.L13702
.L13597:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L13753
	cmpl	$2, %eax
	je	.L13754
.L13591:
	movq	8(%r12), %r13
	movzbl	(%r13), %r8d
	leaq	1(%r13), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L13587
	.p2align 4,,7
.L13596:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L13596
.L13587:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L13597
.L13702:
	movb	$0, (%rbx)
	movq	-176(%rbp), %rdx
.L13740:
	cmpb	$0, (%rdx)
	je	.L13627
	movl	$.LC142, %edi
	movq	%rdx, %rsi
	jmp	.L13737
.L13754:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L13591
.L13753:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L13587
.L13752:
	addl	$25, %r12d
	jmp	.L13579
	.p2align 6,,7
.L13751:
	movq	8(%r12), %r12
	jmp	.L13568
	.p2align 6,,7
.L13571:
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%rax, 40(%r14)
	jmp	.L13572
.L13567:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC150, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r13
	xorl	%r12d, %r12d
	cmpq	%r13, %r14
	movq	%r14, %rbx
	jae	.L13705
.L13610:
	cmpl	$3, (%rbx)
	je	.L13755
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L13606:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L13610
.L13705:
	movslq	%r12d,%rdx
	movq	%r14, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, -184(%rbp)
	movq	%rsp, %rbx
	jae	.L13707
.L13624:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L13756
	cmpl	$2, %eax
	je	.L13757
.L13618:
	movq	8(%r12), %r9
	movzbl	(%r9), %r10d
	leaq	1(%r9), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L13614
	.p2align 4,,7
.L13623:
	movzbl	(%rcx), %r14d
	incq	%rbx
	incq	%rcx
	testb	%r14b, %r14b
	movb	%r14b, (%rbx)
	jne	.L13623
.L13614:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L13624
.L13707:
	movb	$0, (%rbx)
	movq	-184(%rbp), %rcx
.L13741:
	cmpb	$0, (%rcx)
	je	.L13627
	movl	$.LC142, %edi
	movq	%rcx, %rsi
	jmp	.L13737
.L13757:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L13618
.L13756:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L13614
.L13755:
	addl	$25, %r12d
	jmp	.L13606
	.p2align 6,,7
.L13490:
	movq	-56(%rbp), %rsi
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%r15, %rdi
	movl	$.LC147, %edx
	call	convert_for_assignment
	movl	-60(%rbp), %r10d
	movq	%rax, %r13
	testl	%r10d, %r10d
	je	.L13063
	testb	$2, 17(%rax)
	jne	.L13491
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r9
	xorl	%r12d, %r12d
	cmpq	%r9, %r14
	movq	%r14, %rbx
	movq	%r9, %r13
	jae	.L13683
	.p2align 4,,7
.L13498:
	cmpl	$3, (%rbx)
	je	.L13758
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L13494:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L13498
.L13683:
	movslq	%r12d,%rbx
	movq	%r14, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, -152(%rbp)
	movq	%rsp, %rbx
	jae	.L13685
	.p2align 4,,7
.L13512:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L13759
	cmpl	$2, %eax
	je	.L13760
.L13506:
	movq	8(%r12), %rdi
	movzbl	(%rdi), %r14d
	leaq	1(%rdi), %rcx
	testb	%r14b, %r14b
	movb	%r14b, (%rbx)
	je	.L13502
	.p2align 4,,7
.L13511:
	movzbl	(%rcx), %esi
	incq	%rbx
	incq	%rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	jne	.L13511
.L13502:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L13512
.L13685:
	movb	$0, (%rbx)
	movq	-152(%rbp), %rcx
	jmp	.L13741
.L13760:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L13506
.L13759:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L13502
.L13758:
	addl	$25, %r12d
	jmp	.L13494
.L13491:
	movq	8(%rax), %rsi
	movq	%rax, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L13063
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC148, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rcx
	xorl	%r12d, %r12d
	cmpq	%rcx, %r14
	movq	%r14, %rbx
	movq	%rcx, %r13
	jae	.L13688
.L13524:
	cmpl	$3, (%rbx)
	je	.L13761
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L13520:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L13524
.L13688:
	movslq	%r12d,%r8
	movq	%r14, %r12
	addq	$16, %r8
	andq	$-16, %r8
	subq	%r8, %rsp
	cmpq	%r13, %r14
	movq	%rsp, -160(%rbp)
	movq	%rsp, %rbx
	jae	.L13690
.L13538:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L13762
	cmpl	$2, %eax
	je	.L13763
.L13532:
	movq	8(%r12), %r11
	movzbl	(%r11), %r13d
	leaq	1(%r11), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L13528
	.p2align 4,,7
.L13537:
	movzbl	(%rcx), %edx
	incq	%rbx
	incq	%rcx
	testb	%dl, %dl
	movb	%dl, (%rbx)
	jne	.L13537
.L13528:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L13538
.L13690:
	movb	$0, (%rbx)
	movq	-160(%rbp), %rbx
	cmpb	$0, (%rbx)
	je	.L13627
	movl	$.LC142, %edi
	movq	%rbx, %rsi
	jmp	.L13737
.L13763:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L13532
.L13762:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L13528
.L13761:
	addl	$25, %r12d
	jmp	.L13520
.L13744:
	movq	128(%rax), %rdi
	movq	128(%r15), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L13306
	cmpl	$18, %ebx
	je	.L13764
.L13307:
	cmpl	$9, %ebx
	je	.L13765
.L13308:
	cmpl	$13, %ebx
	jne	.L13305
	movq	8(%r13), %rdx
	movzbl	16(%rdx), %eax
	cmpb	$18, %al
	je	.L13309
	cmpb	$23, %al
	jne	.L13305
.L13309:
	movq	8(%rdx), %rdi
	movq	8(%r15), %rsi
	call	comptypes
	testl	%eax, %eax
	je	.L13305
.L13306:
	cmpl	$13, %ebx
	je	.L13766
.L13310:
	movl	-60(%rbp), %eax
	testl	%eax, %eax
	je	.L13371
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L13371
	cmpb	$-86, 16(%r13)
	je	.L13767
.L13371:
	cmpl	$18, %ebx
	je	.L13768
.L13372:
	movl	optimize(%rip), %eax
	testl	%eax, %eax
	je	.L13397
	cmpb	$34, 16(%r13)
	je	.L13769
.L13397:
	movl	-60(%rbp), %eax
	testl	%eax, %eax
	je	.L13063
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	je	.L13404
	cmpb	$47, 16(%r13)
	je	.L13770
.L13404:
	movl	-60(%rbp), %r12d
	testl	%r12d, %r12d
	je	.L13063
	testb	$2, 17(%r13)
	je	.L13464
	movq	8(%r13), %rsi
	movq	%r13, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L13063
.L13464:
	movl	$.LC146, %esi
	xorl	%eax, %eax
	movl	$.LC42, %edi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rsi
	xorl	%r12d, %r12d
	cmpq	%rsi, %r14
	movq	%r14, %rbx
	movq	%rsi, %r13
	jae	.L13678
.L13471:
	cmpl	$3, (%rbx)
	je	.L13771
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L13467:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L13471
.L13678:
	movslq	%r12d,%rcx
	movq	%r14, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, -144(%rbp)
	movq	%rsp, %rbx
	jae	.L13680
.L13485:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L13772
	cmpl	$2, %eax
	je	.L13773
.L13479:
	movq	8(%r12), %r8
	movzbl	(%r8), %r13d
	leaq	1(%r8), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L13475
.L13484:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L13484
.L13475:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L13485
.L13680:
	movb	$0, (%rbx)
	movq	-144(%rbp), %rdx
	jmp	.L13740
.L13773:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L13479
.L13772:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L13475
.L13771:
	addl	$25, %r12d
	jmp	.L13467
.L13770:
	movq	8(%r13), %rbx
	movq	32(%r13), %rdi
	movq	%rbx, %rsi
	call	valid_compound_expr_initializer
	movq	global_trees(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L13774
	movq	40(%r13), %rdi
	movq	%rbx, %rsi
	call	valid_compound_expr_initializer
	movq	global_trees(%rip), %rdx
	movq	%rax, %r13
.L13407:
	cmpq	%rdx, %r13
	je	.L13775
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r10
	xorl	%r12d, %r12d
	cmpq	%r10, %r14
	movq	%r14, %rbx
	movq	%r10, -208(%rbp)
	jae	.L13673
.L13443:
	cmpl	$3, (%rbx)
	je	.L13776
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L13439:
	addq	$16, %rbx
	cmpq	-208(%rbp), %rbx
	jb	.L13443
.L13673:
	movslq	%r12d,%rbx
	movq	%r14, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	-208(%rbp), %r14
	movq	%rsp, -136(%rbp)
	movq	%rsp, %rbx
	jae	.L13675
.L13457:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L13777
	cmpl	$2, %eax
	je	.L13778
.L13451:
	movq	8(%r12), %r9
	movzbl	(%r9), %r14d
	leaq	1(%r9), %rcx
	testb	%r14b, %r14b
	movb	%r14b, (%rbx)
	je	.L13447
.L13456:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L13456
.L13447:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L13457
.L13675:
	movb	$0, (%rbx)
	movq	-136(%rbp), %rax
	cmpb	$0, (%rax)
	jne	.L13779
.L13436:
	movl	flag_pedantic_errors(%rip), %eax
	testl	%eax, %eax
	je	.L13063
	jmp	.L13627
.L13779:
	movq	%rax, %rsi
	movl	$.LC142, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L13436
.L13778:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L13451
.L13777:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L13447
.L13776:
	addl	$25, %r12d
	jmp	.L13439
.L13775:
	movl	$.LC146, %esi
	xorl	%eax, %eax
	movl	$.LC42, %edi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rsi
	xorl	%r12d, %r12d
	cmpq	%rsi, %r14
	movq	%r14, %rbx
	movq	%rsi, -200(%rbp)
	jae	.L13668
.L13418:
	cmpl	$3, (%rbx)
	je	.L13780
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L13414:
	addq	$16, %rbx
	cmpq	-200(%rbp), %rbx
	jb	.L13418
.L13668:
	movslq	%r12d,%rcx
	movq	%r14, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	-200(%rbp), %r14
	movq	%rsp, -128(%rbp)
	movq	%rsp, %rbx
	jae	.L13670
.L13432:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L13781
	cmpl	$2, %eax
	je	.L13782
.L13426:
	movq	8(%r12), %r11
	movzbl	(%r11), %r8d
	leaq	1(%r11), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L13422
.L13431:
	movzbl	(%rcx), %edx
	incq	%rbx
	incq	%rcx
	testb	%dl, %dl
	movb	%dl, (%rbx)
	jne	.L13431
.L13422:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L13432
.L13670:
	movb	$0, (%rbx)
	movq	-128(%rbp), %rbx
	cmpb	$0, (%rbx)
	je	.L13436
	movl	$.LC142, %edi
	movq	%rbx, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L13436
	.p2align 6,,7
.L13782:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L13426
.L13781:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L13422
.L13780:
	addl	$25, %r12d
	jmp	.L13414
.L13774:
	movq	%rdx, %r13
	jmp	.L13407
.L13769:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	jne	.L13397
	cmpb	$51, 48(%r13)
	je	.L13397
	cmpq	$0, current_function_decl(%rip)
	je	.L13402
	movzbl	17(%r13), %edi
	andb	$24, %dil
	cmpb	$16, %dil
	je	.L13783
.L13402:
	movq	%r13, %rax
.L13403:
	movq	%rax, %r13
	jmp	.L13397
.L13783:
	movq	104(%r13), %rax
	testq	%rax, %rax
	je	.L13402
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L13402
	testb	$2, 17(%rax)
	je	.L13402
	cmpb	$46, %dl
	jne	.L13403
	jmp	.L13402
	.p2align 6,,7
.L13768:
	movzbl	16(%r13), %eax
	cmpb	$29, %al
	je	.L13372
	cmpb	$46, %al
	je	.L13372
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC145, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rdx
	xorl	%r12d, %r12d
	cmpq	%rdx, %r14
	movq	%r14, %rbx
	movq	%rdx, %r13
	jae	.L13663
.L13379:
	cmpl	$3, (%rbx)
	je	.L13784
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L13375:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L13379
.L13663:
	movslq	%r12d,%rbx
	movq	%r14, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, -120(%rbp)
	movq	%rsp, %rbx
	jae	.L13665
.L13393:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L13785
	cmpl	$2, %eax
	je	.L13786
.L13387:
	movq	8(%r12), %r10
	movzbl	(%r10), %r14d
	leaq	1(%r10), %rcx
	testb	%r14b, %r14b
	movb	%r14b, (%rbx)
	je	.L13383
.L13392:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L13392
.L13383:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L13393
.L13665:
	movb	$0, (%rbx)
	movq	-120(%rbp), %rcx
	jmp	.L13741
.L13786:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L13387
.L13785:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L13383
.L13784:
	addl	$25, %r12d
	jmp	.L13375
.L13767:
	movq	32(%r13), %r11
	movq	32(%r11), %r12
	movq	104(%r12), %r13
	jmp	.L13371
.L13766:
	movzbl	16(%r13), %ecx
	movq	8(%r13), %rdi
	xorl	%r12d, %r12d
	movq	%r13, %r8
	movzbl	16(%rdi), %esi
	cmpb	$116, %cl
	je	.L13725
	cmpb	$115, %cl
	je	.L13787
.L13312:
	movzbl	%cl, %edx 
	movzbl	tree_code_type(%rdx), %eax
	cmpb	$60, %al
	je	.L13318
	cmpb	$49, %al
	je	.L13318
	cmpb	$50, %al
	je	.L13318
	cmpb	$101, %al
	je	.L13318
.L13317:
	cmpl	$23, %esi
	je	.L13788
	cmpl	$18, %esi
	je	.L13789
	movq	%r13, %r12
.L13320:
	movq	%r12, %r13
	jmp	.L13310
.L13789:
	movzbl	%cl, %esi 
	xorl	%edx, %edx
	xorl	%r14d, %r14d
	movzbl	tree_code_type(%rsi), %eax
	movq	8(%rdi), %r11
	cmpb	$114, %al
	je	.L13323
	cmpb	$100, %al
	je	.L13323
.L13322:
	movzbl	17(%rdi), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %esi
	shrb	$3, %r10b
	shrb	$4, %sil
	andl	$1, %r10d
	andl	%esi, %r9d
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rdi), %r10d
	movzbl	16(%rdi), %edi
	movl	%r10d, %esi
	shrb	$5, %sil
	andl	$1, %esi
	sall	$2, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	cmpb	$20, %dil
	je	.L13790
.L13326:
	leal	0(,%rsi,8), %eax
	orl	%eax, %r9d
	jne	.L13325
	testl	%edx, %edx
	jne	.L13325
	testl	%r14d, %r14d
	je	.L13324
.L13325:
	movl	%r8d, %ecx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %cl
	movl	%r8d, %r9d
	andl	%ecx, %esi
	movl	%r10d, %ecx
	andl	$1, %r9d
	andl	$1, %ecx
	addl	%r9d, %r9d
	sall	$2, %ecx
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L13791
.L13328:
	leal	0(,%rcx,8), %r8d
	leal	(%r14,%r14), %edi
	orl	%r8d, %esi
	orl	%edx, %esi
	orl	%edi, %esi
	movq	%r11, %rdi
	call	c_build_qualified_type
	movzbl	16(%r13), %ecx
	movq	%rax, %r11
.L13324:
	cmpb	$41, %cl
	je	.L13792
	cmpb	$47, %cl
	je	.L13793
	xorl	%r14d, %r14d
	testl	%r12d, %r12d
	je	.L13794
.L13367:
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L13368
	testl	%r14d, %r14d
	movq	%r13, %r12
	je	.L13320
.L13368:
	movq	%r11, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r13)
	movq	%rax, %r12
	je	.L13795
	movl	$121, %edi
	movq	%r13, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%r12, %rdi
	movq	%rax, %rsi
.L13736:
	call	convert
.L13732:
	movq	%rax, %r12
	jmp	.L13320
.L13795:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r13, %rdx
	call	build1
	movq	%r13, %rdi
	movq	%rax, %r12
	call	mark_addressable
	testl	%eax, %eax
	jne	.L13370
	movq	global_trees(%rip), %r12
	jmp	.L13320
.L13370:
	movq	%r13, %rdi
	call	staticp
	movzbl	17(%r12), %r13d
	movl	%eax, %r8d
	andb	$1, %r8b
	addb	%r8b, %r8b
	andb	$-4, %r13b
	orb	%r8b, %r13b
	movb	%r13b, 17(%r12)
	jmp	.L13320
	.p2align 6,,7
.L13794:
	movq	%r13, %rdi
	movq	%r11, -264(%rbp)
	call	lvalue_p
	movq	-264(%rbp), %r11
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r14d
	jmp	.L13367
.L13793:
	movq	40(%r13), %r12
	movq	8(%r12), %r14
	movzbl	16(%r14), %edx
	movq	%r14, %rax
	cmpl	$23, %edx
	movl	%edx, -108(%rbp)
	je	.L13332
	cmpl	$18, %edx
	je	.L13332
	movzbl	16(%r12), %edx
	cmpb	$32, %dl
	je	.L13796
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L13335
	cmpb	$34, %dl
	je	.L13797
.L13335:
	cmpb	$116, %dl
	movq	%r12, %rcx
	je	.L13727
	cmpb	$115, %dl
	je	.L13798
.L13344:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L13349
	cmpb	$49, %al
	je	.L13349
	cmpb	$50, %al
	je	.L13349
	cmpb	$101, %al
	je	.L13349
.L13348:
	cmpl	$10, -108(%rbp)
	je	.L13799
	cmpb	$39, %dl
	je	.L13800
.L13357:
	movq	%r14, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L13362
	testb	$32, 17(%r14)
	je	.L13363
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L13364
	movq	integer_types+40(%rip), %r9
	movzwl	60(%r14), %r10d
	movzwl	60(%r9), %r14d
	andl	$511, %r10d
	andl	$511, %r14d
	cmpl	%r14d, %r10d
	je	.L13364
.L13363:
	movq	integer_types+40(%rip), %rdi
.L13731:
	movq	%r12, %rsi
	call	convert
.L13333:
	movq	8(%rax), %rsi
	movq	32(%r13), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L13732
.L13364:
	movq	integer_types+48(%rip), %rdi
	jmp	.L13731
	.p2align 6,,7
.L13362:
	movl	flag_traditional(%rip), %edi
	testl	%edi, %edi
	je	.L13365
	movl	flag_allow_single_precision(%rip), %esi
	testl	%esi, %esi
	jne	.L13365
	movq	global_trees+192(%rip), %rcx
	cmpq	%rcx, 128(%r14)
	je	.L13801
.L13365:
	cmpl	$5, -108(%rbp)
	je	.L13802
	movq	%r12, %rax
	jmp	.L13333
.L13802:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L13333
.L13801:
	movq	global_trees+200(%rip), %rdi
	jmp	.L13731
	.p2align 6,,7
.L13800:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L13357
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L13357
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L13363
	testb	$32, 17(%r14)
	jne	.L13364
	jmp	.L13363
.L13799:
	movq	integer_types+40(%rip), %r8
	movzwl	60(%r14), %edx
	movl	flag_traditional(%rip), %ecx
	movzwl	60(%r8), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%ecx, %ecx
	jne	.L13356
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L13355
.L13356:
	testb	$32, 17(%r14)
	movl	$1, %eax
	cmovne	%eax, %esi
.L13355:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L13731
	.p2align 6,,7
.L13349:
	movl	24(%rcx), %eax
	movl	%eax, 24(%r12)
	jmp	.L13348
.L13798:
	movq	32(%r12), %rsi
	movq	8(%r12), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L13344
.L13347:
	movzbl	16(%rsi), %edx
	movq	%rsi, %r12
	cmpb	$116, %dl
	jne	.L13803
.L13727:
	movq	32(%r12), %rsi
	jmp	.L13347
.L13803:
	cmpb	$115, %dl
	jne	.L13344
	movq	32(%rsi), %rdi
	movq	8(%r12), %r9
	cmpq	%r9, 8(%rdi)
	movq	%rdi, %rsi
	je	.L13347
	jmp	.L13344
.L13797:
	movl	pedantic(%rip), %r14d
	testl	%r14d, %r14d
	jne	.L13339
	cmpb	$51, 48(%r12)
	je	.L13339
	cmpq	$0, current_function_decl(%rip)
	je	.L13341
	movzbl	17(%r12), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L13804
.L13341:
	movq	%r12, %rsi
.L13342:
	movq	%rsi, %r12
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L13339:
	movq	%rax, %r14
	jmp	.L13335
.L13804:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L13341
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L13341
	testb	$2, 17(%rax)
	je	.L13341
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L13342
	jmp	.L13341
.L13796:
	movq	104(%r12), %r12
	movzbl	16(%r12), %edx
	jmp	.L13335
	.p2align 6,,7
.L13332:
	movq	%r12, %rdi
	call	default_function_array_conversion
	jmp	.L13333
.L13792:
	movq	72(%r11), %rdi
	movq	32(%r13), %rsi
	jmp	.L13736
.L13791:
	testq	%r11, %r11
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L13328
.L13790:
	testq	%r11, %r11
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L13326
.L13323:
	movzbl	17(%r13), %r8d
	movl	$1, %r14d
	movl	%r8d, %edx
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	%r8d, %r14d
	andl	$1, %edx
	jmp	.L13322
.L13788:
	movl	$121, %edi
	movq	%r13, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L13732
.L13318:
	movl	24(%r8), %eax
	movl	%eax, 24(%r13)
	jmp	.L13317
.L13787:
	movq	32(%r13), %rdx
	cmpq	%rdi, 8(%rdx)
	jne	.L13312
	.p2align 4,,7
.L13316:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rdx, %r13
	movzbl	16(%rdx), %ecx
	cmove	%eax, %r12d
	cmpb	$116, %cl
	jne	.L13805
.L13725:
	movq	32(%r13), %rdx
	jmp	.L13316
.L13805:
	cmpb	$115, %cl
	jne	.L13312
	movq	32(%rdx), %r14
	movq	8(%r13), %r11
	cmpq	%r11, 8(%r14)
	movq	%r14, %rdx
	je	.L13316
	jmp	.L13312
.L13765:
	movq	8(%r13), %rdi
	movq	%r15, %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L13306
	jmp	.L13308
.L13764:
	movq	8(%r13), %rdi
	movq	%r15, %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L13306
	jmp	.L13307
	.p2align 6,,7
.L13743:
	movq	8(%r15), %rdx
	movq	128(%rdx), %r14
	cmpq	integer_types(%rip), %r14
	je	.L13067
	cmpq	integer_types+8(%rip), %r14
	je	.L13067
	cmpq	integer_types+16(%rip), %r14
	je	.L13067
	cmpq	c_global_trees+16(%rip), %r14
	je	.L13067
	cmpq	c_global_trees+8(%rip), %r14
	jne	.L13065
.L13067:
	testq	%r13, %r13
	je	.L13305
	cmpb	$29, 16(%r13)
	jne	.L13065
	movq	8(%r13), %rdi
	movq	128(%r15), %r12
	movq	128(%rdi), %rbx
	cmpq	%r12, %rbx
	je	.L13730
	testq	%rbx, %rbx
	je	.L13730
	testq	%r12, %r12
	je	.L13730
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L13730
	movzbl	16(%r12), %eax
	testb	%al, %al
	je	.L13730
	cmpb	$6, %dl
	je	.L13806
.L13072:
	cmpb	$6, %al
	je	.L13807
.L13073:
	cmpb	$10, %dl
	je	.L13808
.L13074:
	cmpb	$10, 16(%r12)
	je	.L13809
.L13075:
	cmpq	%r12, %rbx
	movl	$1, -252(%rbp)
	je	.L13071
	movzbl	16(%rbx), %esi
	cmpb	16(%r12), %sil
	je	.L13077
	movl	$0, -252(%rbp)
.L13071:
	movl	-252(%rbp), %edi
	testl	%edi, %edi
	jne	.L13063
.L13068:
	movq	8(%r13), %rsi
	movq	integer_types(%rip), %rcx
	movq	8(%rsi), %r8
	cmpq	%rcx, 128(%r8)
	je	.L13227
	movzwl	60(%r14), %eax
	movzwl	60(%rcx), %r12d
	andl	$511, %eax
	andl	$511, %r12d
	cmpl	%r12d, %eax
	je	.L13810
.L13227:
	movq	8(%rsi), %rbx
	movq	128(%rbx), %rax
	cmpq	%rcx, %rax
	je	.L13811
.L13252:
	movq	%r15, 8(%r13)
	cmpq	$0, 24(%r15)
	je	.L13063
	movq	32(%r15), %rax
	testq	%rax, %rax
	je	.L13063
	cmpb	$25, 16(%rax)
	jne	.L13063
	movzwl	60(%r14), %r11d
	movl	32(%r13), %ecx
	movq	integer_types(%rip), %r14
	movzwl	60(%r14), %r12d
	andl	$511, %r11d
	andl	$511, %r12d
	cmpl	%r12d, %r11d
	je	.L13278
	movq	c_global_trees(%rip), %rsi
	movzwl	60(%rsi), %ebx
	andl	$511, %ebx
	sarl	$3, %ebx
	subl	%ebx, %ecx
	movslq	%ecx,%rsi
.L13279:
	movq	40(%r15), %rdi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L13063
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC144, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rcx
	xorl	%r12d, %r12d
	cmpq	%rcx, %r14
	movq	%r14, %rbx
	movq	%rcx, -192(%rbp)
	jae	.L13656
.L13287:
	cmpl	$3, (%rbx)
	je	.L13812
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L13283:
	addq	$16, %rbx
	cmpq	-192(%rbp), %rbx
	jb	.L13287
.L13656:
	movslq	%r12d,%rdi
	movq	%r14, %r12
	addq	$16, %rdi
	andq	$-16, %rdi
	subq	%rdi, %rsp
	cmpq	-192(%rbp), %r14
	movq	%rsp, -104(%rbp)
	movq	%rsp, %rbx
	jae	.L13658
.L13301:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L13813
	cmpl	$2, %eax
	je	.L13814
.L13295:
	movq	8(%r12), %r9
	movzbl	(%r9), %r8d
	leaq	1(%r9), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L13291
.L13300:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L13300
.L13291:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L13301
.L13658:
	movb	$0, (%rbx)
	movq	-104(%rbp), %rbx
	cmpb	$0, (%rbx)
	je	.L13063
	movl	$.LC142, %edi
	movq	%rbx, %rsi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L13063
.L13814:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L13295
.L13813:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L13291
.L13812:
	addl	$25, %r12d
	jmp	.L13283
.L13278:
	leal	-1(%rcx), %edx
	movslq	%edx,%rsi
	jmp	.L13279
	.p2align 6,,7
.L13811:
	movzwl	60(%r14), %esi
	movzwl	60(%rax), %ecx
	andl	$511, %esi
	andl	$511, %ecx
	cmpl	%ecx, %esi
	je	.L13252
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC143, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rdx
	xorl	%r12d, %r12d
	cmpq	%rdx, %r14
	movq	%r14, %rbx
	movq	%rdx, %r13
	jae	.L13651
.L13259:
	cmpl	$3, (%rbx)
	je	.L13815
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L13255:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L13259
.L13651:
	movslq	%r12d,%rdi
	movq	%r14, %r12
	addq	$16, %rdi
	andq	$-16, %rdi
	subq	%rdi, %rsp
	cmpq	%r13, %r14
	movq	%rsp, -96(%rbp)
	movq	%rsp, %rbx
	jae	.L13653
.L13273:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L13816
	cmpl	$2, %eax
	je	.L13817
.L13267:
	movq	8(%r12), %r9
	movzbl	(%r9), %r8d
	leaq	1(%r9), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L13263
.L13272:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L13272
.L13263:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L13273
.L13653:
	movb	$0, (%rbx)
	movq	-96(%rbp), %rcx
	jmp	.L13741
.L13817:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L13267
.L13816:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L13263
.L13815:
	addl	$25, %r12d
	jmp	.L13255
.L13810:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC140, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r9
	xorl	%r12d, %r12d
	cmpq	%r9, %r14
	movq	%r14, %rbx
	movq	%r9, %r13
	jae	.L13646
.L13234:
	cmpl	$3, (%rbx)
	je	.L13818
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L13230:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L13234
.L13646:
	movslq	%r12d,%r10
	movq	%r14, %r12
	addq	$16, %r10
	andq	$-16, %r10
	subq	%r10, %rsp
	cmpq	%r13, %r14
	movq	%rsp, -88(%rbp)
	movq	%rsp, %rbx
	jae	.L13648
.L13248:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L13819
	cmpl	$2, %eax
	je	.L13820
.L13242:
	movq	8(%r12), %r14
	movzbl	(%r14), %r13d
	leaq	1(%r14), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L13238
.L13247:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L13247
.L13238:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L13248
.L13648:
	movb	$0, (%rbx)
	movq	-88(%rbp), %rdx
	jmp	.L13740
.L13820:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L13242
.L13819:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L13238
.L13818:
	addl	$25, %r12d
	jmp	.L13230
.L13077:
	movzbl	17(%rbx), %r10d
	movzbl	62(%rbx), %r9d
	xorl	%ecx, %ecx
	movl	%r10d, %edx
	shrb	$5, %r9b
	shrb	$3, %r10b
	shrb	$4, %dl
	andl	$1, %r10d
	andl	$1, %r9d
	andl	$1, %edx
	addl	%r10d, %r10d
	sall	$2, %r9d
	orl	%r10d, %edx
	orl	%r9d, %edx
	cmpb	$20, %sil
	je	.L13821
.L13079:
	leal	0(,%rcx,8), %edi
	movzbl	62(%r12), %r11d
	movzbl	17(%r12), %ecx
	orl	%edx, %edi
	movl	%ecx, %edx
	shrb	$5, %r11b
	shrb	$3, %cl
	shrb	$4, %dl
	andl	$1, %ecx
	andl	$1, %r11d
	addl	%ecx, %ecx
	andl	$1, %edx
	sall	$2, %r11d
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	orl	%r11d, %edx
	cmpb	$20, %sil
	je	.L13822
.L13080:
	leal	0(,%rcx,8), %esi
	movl	$0, -252(%rbp)
	orl	%esi, %edx
	cmpl	%edx, %edi
	jne	.L13071
	movq	128(%r12), %rax
	cmpq	%rax, 128(%rbx)
	je	.L13730
	movq	%rbx, %rdi
	movq	%r12, %rsi
	call	*targetm+264(%rip)
	movl	$0, -252(%rbp)
	testl	%eax, %eax
	movl	%eax, -64(%rbp)
	je	.L13071
	movl	$0, -252(%rbp)
	movzbl	16(%rbx), %eax
	cmpl	$18, %eax
	je	.L13206
	cmpl	$18, %eax
	ja	.L13223
	cmpl	$13, %eax
	je	.L13084
.L13083:
	cmpl	$2, -64(%rbp)
	jne	.L13071
	cmpl	$1, -252(%rbp)
	movl	-64(%rbp), %eax
	cmovne	-252(%rbp), %eax
	movl	%eax, -252(%rbp)
	jmp	.L13071
.L13084:
	movq	8(%rbx), %rdi
	movq	8(%r12), %rsi
	cmpq	%rsi, %rdi
	je	.L13085
	call	comptypes
.L13729:
	movl	%eax, -252(%rbp)
	jmp	.L13083
.L13085:
	movl	$1, -252(%rbp)
	jmp	.L13083
.L13223:
	cmpl	$20, %eax
	je	.L13219
	cmpl	$23, %eax
	jne	.L13083
	movl	$1, -216(%rbp)
	movq	8(%r12), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L13088
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -216(%rbp)
	je	.L13083
.L13088:
	movq	24(%rbx), %rdx
	movq	%rdx, -248(%rbp)
	testq	%rdx, %rdx
	movq	24(%r12), %rax
	movq	%rax, -240(%rbp)
	je	.L13823
	cmpq	$0, -240(%rbp)
	je	.L13824
	movl	$1, -252(%rbp)
	xorl	%r12d, %r12d
.L13203:
	cmpq	$0, -248(%rbp)
	je	.L13825
	cmpq	$0, -240(%rbp)
	je	.L13192
	movq	-248(%rbp), %rsi
	movq	32(%rsi), %rdi
	testq	%rdi, %rdi
	je	.L13826
	movq	-240(%rbp), %rcx
	movq	32(%rcx), %rax
	testq	%rax, %rax
	jne	.L13178
.L13735:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L13192
.L13177:
	cmpl	-252(%rbp), %r12d
	movl	-252(%rbp), %esi
	movq	-248(%rbp), %r11
	movq	-240(%rbp), %rdi
	cmovg	%r12d, %esi
	movl	%esi, -252(%rbp)
	movq	(%r11), %r10
	movq	%r10, -248(%rbp)
	movq	(%rdi), %r9
	movq	%r9, -240(%rbp)
	jmp	.L13203
.L13192:
	movl	$0, -252(%rbp)
.L13172:
	cmpl	$1, -252(%rbp)
	movl	-252(%rbp), %eax
	cmove	-216(%rbp), %eax
	jmp	.L13729
.L13178:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r12d
	jne	.L13177
	movq	-248(%rbp), %rdx
	movq	32(%rdx), %rax
	cmpb	$21, 16(%rax)
	je	.L13828
.L13182:
	movq	-240(%rbp), %rsi
	movq	32(%rsi), %rax
	cmpb	$21, 16(%rax)
	jne	.L13192
	cmpq	$0, 96(%rax)
	je	.L13193
	testb	$8, 62(%rax)
	je	.L13192
.L13193:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L13192
	movq	-248(%rbp), %rax
	movq	32(%rax), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L13192
	movq	-240(%rbp), %r8
	movq	32(%r8), %rdx
	movq	24(%rdx), %rbx
	testq	%rbx, %rbx
	je	.L13192
.L13199:
	movq	-248(%rbp), %rcx
	movq	8(%rbx), %rdi
	movq	32(%rcx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L13195
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L13199
	jmp	.L13192
.L13195:
	testq	%rbx, %rbx
	jne	.L13177
	jmp	.L13192
.L13828:
	cmpq	$0, 96(%rax)
	je	.L13183
	testb	$8, 62(%rax)
	je	.L13182
.L13183:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L13182
	movq	-240(%rbp), %r9
	movq	32(%r9), %r8
	movq	32(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L13182
	movq	-248(%rbp), %r10
	movq	32(%r10), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L13192
.L13189:
	movq	-240(%rbp), %r11
	movq	8(%rbx), %rdi
	movq	32(%r11), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L13195
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L13189
	jmp	.L13192
.L13826:
	movq	-240(%rbp), %rax
	movq	32(%rax), %rdi
	jmp	.L13735
.L13825:
	cmpq	$0, -240(%rbp)
	je	.L13172
	jmp	.L13192
.L13824:
	movq	-248(%rbp), %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L13083
	movq	136(%r12), %rax
	testq	%rax, %rax
	je	.L13712
	movq	%rax, %r12
	movl	$1, -232(%rbp)
	movl	$0, -228(%rbp)
.L13167:
	cmpq	$0, -248(%rbp)
	je	.L13829
	testq	%r12, %r12
	je	.L13156
	movq	-248(%rbp), %r9
	movq	32(%r9), %rdi
	testq	%rdi, %rdi
	je	.L13830
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L13142
.L13734:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L13156
.L13141:
	movl	-232(%rbp), %r11d
	movl	-228(%rbp), %ebx
	cmpl	%r11d, -228(%rbp)
	movq	-248(%rbp), %r10
	cmovle	%r11d, %ebx
	movl	%ebx, -232(%rbp)
	movq	(%r10), %r9
	movq	%r9, -248(%rbp)
	movq	(%r12), %r12
	jmp	.L13167
.L13156:
	movl	$0, -232(%rbp)
.L13136:
	cmpl	$1, -232(%rbp)
	movl	$2, -252(%rbp)
	jne	.L13083
	movl	-216(%rbp), %r12d
	movl	%r12d, -252(%rbp)
	jmp	.L13083
.L13142:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -228(%rbp)
	jne	.L13141
	movq	-248(%rbp), %r10
	movq	32(%r10), %rax
	cmpb	$21, 16(%rax)
	je	.L13832
.L13146:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L13156
	cmpq	$0, 96(%rax)
	je	.L13157
	testb	$8, 62(%rax)
	je	.L13156
.L13157:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L13156
	movq	-248(%rbp), %rdx
	movq	32(%rdx), %rcx
	movq	32(%rcx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L13156
	movq	32(%r12), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L13156
.L13163:
	movq	-248(%rbp), %r8
	movq	8(%rbx), %rdi
	movq	32(%r8), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L13159
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L13163
	jmp	.L13156
.L13159:
	testq	%rbx, %rbx
	jne	.L13141
	jmp	.L13156
.L13832:
	cmpq	$0, 96(%rax)
	je	.L13147
	testb	$8, 62(%rax)
	je	.L13146
.L13147:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L13146
	movq	32(%r12), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L13146
	movq	-248(%rbp), %rax
	movq	32(%rax), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L13156
.L13153:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L13159
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L13153
	jmp	.L13156
.L13830:
	movq	32(%r12), %rdi
	jmp	.L13734
.L13829:
	testq	%r12, %r12
	je	.L13136
	jmp	.L13156
.L13712:
	movl	-216(%rbp), %eax
	jmp	.L13729
.L13823:
	movq	%rax, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L13083
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L13710
	movq	%rax, %r12
	movl	$1, -224(%rbp)
	movl	$0, -220(%rbp)
.L13128:
	cmpq	$0, -240(%rbp)
	je	.L13833
	testq	%r12, %r12
	je	.L13117
	movq	-240(%rbp), %rbx
	movq	32(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L13834
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L13103
.L13733:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L13117
.L13102:
	movl	-224(%rbp), %edx
	movl	-220(%rbp), %eax
	cmpl	%edx, -220(%rbp)
	movq	-240(%rbp), %rdi
	cmovle	%edx, %eax
	movl	%eax, -224(%rbp)
	movq	(%rdi), %rbx
	movq	%rbx, -240(%rbp)
	movq	(%r12), %r12
	jmp	.L13128
.L13117:
	movl	$0, -224(%rbp)
.L13097:
	cmpl	$1, -224(%rbp)
	movl	$2, -252(%rbp)
	jne	.L13083
	movl	-216(%rbp), %r8d
	movl	%r8d, -252(%rbp)
	jmp	.L13083
.L13103:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -220(%rbp)
	jne	.L13102
	movq	-240(%rbp), %rdi
	movq	32(%rdi), %rax
	cmpb	$21, 16(%rax)
	je	.L13836
.L13107:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L13117
	cmpq	$0, 96(%rax)
	je	.L13118
	testb	$8, 62(%rax)
	je	.L13117
.L13118:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L13117
	movq	-240(%rbp), %rcx
	movq	32(%rcx), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L13117
	movq	32(%r12), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L13117
.L13124:
	movq	-240(%rbp), %rax
	movq	8(%rbx), %rdi
	movq	32(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L13120
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L13124
	jmp	.L13117
.L13120:
	testq	%rbx, %rbx
	jne	.L13102
	jmp	.L13117
.L13836:
	cmpq	$0, 96(%rax)
	je	.L13108
	testb	$8, 62(%rax)
	je	.L13107
.L13108:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L13107
	movq	32(%r12), %r8
	movq	32(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L13107
	movq	-240(%rbp), %r10
	movq	32(%r10), %r9
	movq	24(%r9), %rbx
	testq	%rbx, %rbx
	je	.L13117
.L13114:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L13120
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L13114
	jmp	.L13117
.L13834:
	movq	32(%r12), %rdi
	jmp	.L13733
.L13833:
	testq	%r12, %r12
	je	.L13097
	jmp	.L13117
.L13710:
	movl	-216(%rbp), %r12d
	movl	%r12d, -252(%rbp)
	jmp	.L13083
.L13219:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmovne	-252(%rbp), %eax
	jmp	.L13729
.L13206:
	movq	24(%rbx), %r8
	movq	%r8, -72(%rbp)
	movq	24(%r12), %rax
	movl	$1, -252(%rbp)
	movq	%rax, -80(%rbp)
	movq	8(%r12), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L13207
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -252(%rbp)
	je	.L13068
.L13207:
	cmpq	$0, -72(%rbp)
	je	.L13083
	cmpq	$0, -80(%rbp)
	je	.L13083
	movq	-80(%rbp), %rbx
	cmpq	%rbx, -72(%rbp)
	je	.L13083
	movq	-72(%rbp), %rax
	movq	112(%rbx), %rsi
	movq	112(%rax), %rcx
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L13210
	movq	104(%rax), %r12
	cmpb	$25, 16(%r12)
	je	.L13837
.L13211:
	movl	$1, %r8d
.L13210:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L13212
	movq	-80(%rbp), %r11
	movq	104(%r11), %r10
	cmpb	$25, 16(%r10)
	je	.L13838
.L13213:
	movl	$1, %ecx
.L13212:
	testb	%r8b, %r8b
	jne	.L13083
	testb	%cl, %cl
	jne	.L13083
	testb	%dil, %dil
	je	.L13723
	testb	%dl, %dl
.L13728:
	jne	.L13083
.L13218:
	movl	$0, -252(%rbp)
	jmp	.L13083
.L13723:
	testb	%dl, %dl
	jne	.L13218
	movq	-72(%rbp), %rdx
	movq	-80(%rbp), %rbx
	movq	104(%rdx), %rdi
	movq	104(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L13218
	movq	-72(%rbp), %rsi
	movq	-80(%rbp), %rcx
	movq	112(%rsi), %rdi
	movq	112(%rcx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L13728
.L13838:
	cmpb	$25, 16(%rsi)
	jne	.L13213
	jmp	.L13212
.L13837:
	cmpb	$25, 16(%rcx)
	jne	.L13211
	jmp	.L13210
	.p2align 6,,7
.L13730:
	movl	$1, -252(%rbp)
	jmp	.L13071
.L13822:
	cmpq	$0, 8(%r12)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L13080
.L13821:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L13079
.L13809:
	movzbl	17(%r12), %esi
	movzwl	60(%r12), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %r12
	jmp	.L13075
.L13808:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L13074
	.p2align 6,,7
.L13807:
	testb	$2, 62(%r12)
	je	.L13073
	movq	24(%r12), %r8
	testq	%r8, %r8
	cmovne	%r8, %r12
	jmp	.L13073
	.p2align 6,,7
.L13806:
	testb	$2, 62(%rbx)
	je	.L13072
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L13072
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L13072
	.p2align 6,,7
.L13742:
	movq	32(%rax), %rdi
	jmp	.L13064
	.p2align 6,,7
.L13062:
	movq	%rax, %r13
	jmp	.L13063
.LFE33:
.Lfe33:
	.size	store_init_value,.Lfe33-store_init_value
	.align 2
	.p2align 4,,15
.globl error_init
	.type	error_init,@function
error_init:
.LFB34:
	pushq	%rbp
.LCFI145:
	movq	%rdi, %rdx
	xorl	%eax, %eax
	movq	%rsp, %rbp
.LCFI146:
	movl	$.LC42, %edi
	movq	%rdx, %rsi
	pushq	%r15
.LCFI147:
	pushq	%r14
.LCFI148:
	pushq	%r13
.LCFI149:
	pushq	%r12
.LCFI150:
	xorl	%r12d, %r12d
	pushq	%rbx
.LCFI151:
	subq	$8, %rsp
.LCFI152:
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r13
	cmpq	%r13, %r14
	movq	%r14, %rbx
	jae	.L13900
	.p2align 4,,7
.L13882:
	cmpl	$3, (%rbx)
	je	.L13904
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L13878:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L13882
.L13900:
	movslq	%r12d,%rdx
	movq	%r14, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L13902
	.p2align 4,,7
.L13896:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L13905
	cmpl	$2, %eax
	je	.L13906
.L13890:
	movq	8(%r12), %rdi
	movzbl	(%rdi), %esi
	leaq	1(%rdi), %rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	je	.L13886
	.p2align 4,,7
.L13895:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L13895
.L13886:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L13896
.L13902:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	jne	.L13907
.L13875:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
.L13907:
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L13875
.L13906:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L13890
.L13905:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L13886
.L13904:
	addl	$25, %r12d
	jmp	.L13878
.LFE34:
.Lfe34:
	.size	error_init,.Lfe34-error_init
	.align 2
	.p2align 4,,15
.globl pedwarn_init
	.type	pedwarn_init,@function
pedwarn_init:
.LFB35:
	pushq	%rbp
.LCFI153:
	movq	%rdi, %rdx
	xorl	%eax, %eax
	movq	%rsp, %rbp
.LCFI154:
	movl	$.LC42, %edi
	movq	%rdx, %rsi
	pushq	%r15
.LCFI155:
	pushq	%r14
.LCFI156:
	pushq	%r13
.LCFI157:
	pushq	%r12
.LCFI158:
	xorl	%r12d, %r12d
	pushq	%rbx
.LCFI159:
	subq	$8, %rsp
.LCFI160:
	call	pedwarn
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r13
	cmpq	%r13, %r14
	movq	%r14, %rbx
	jae	.L13933
	.p2align 4,,7
.L13915:
	cmpl	$3, (%rbx)
	je	.L13937
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L13911:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L13915
.L13933:
	movslq	%r12d,%rdx
	movq	%r14, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L13935
	.p2align 4,,7
.L13929:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L13938
	cmpl	$2, %eax
	je	.L13939
.L13923:
	movq	8(%r12), %rdi
	movzbl	(%rdi), %esi
	leaq	1(%rdi), %rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	je	.L13919
	.p2align 4,,7
.L13928:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L13928
.L13919:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L13929
.L13935:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	jne	.L13940
.L13908:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
.L13940:
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L13908
.L13939:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L13923
.L13938:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L13919
.L13937:
	addl	$25, %r12d
	jmp	.L13911
.LFE35:
.Lfe35:
	.size	pedwarn_init,.Lfe35-pedwarn_init
	.section	.rodata.str1.1
.LC160:
	.string	"(anonymous)"
	.text
	.align 2
	.p2align 4,,15
.globl start_init
	.type	start_init,@function
start_init:
.LFB36:
	pushq	%r12
.LCFI161:
	movl	%edx, %r12d
	pushq	%rbp
.LCFI162:
	movq	%rdi, %rbp
	movl	$72, %edi
	pushq	%rbx
.LCFI163:
	movq	%rsi, %rbx
	call	xmalloc
	xorl	%ecx, %ecx
	testq	%rbx, %rbx
	movq	%rax, %rdx
	je	.L15165
	movq	40(%rbx), %rcx
.L15165:
	movzbl	require_constant_value(%rip), %esi
	movq	constructor_decl(%rip), %r8
	testq	%rbp, %rbp
	movq	constructor_asmspec(%rip), %rdi
	movq	%r8, 8(%rdx)
	movb	%sil, 69(%rdx)
	movq	%rdi, 16(%rdx)
	movzbl	require_constant_elements(%rip), %ebx
	movb	%bl, 70(%rdx)
	movzbl	constructor_subconstants_deferred(%rip), %esi
	movl	spelling_size(%rip), %eax
	movq	spelling(%rip), %r8
	movq	constructor_stack(%rip), %r11
	movq	constructor_range_stack(%rip), %r10
	movq	constructor_elements(%rip), %r9
	movq	spelling_base(%rip), %rdi
	movl	%eax, 64(%rdx)
	movb	%sil, 71(%rdx)
	movq	%r11, 24(%rdx)
	movq	%r8, 48(%rdx)
	movzbl	constructor_top_level(%rip), %ebx
	movq	%r9, 40(%rdx)
	movq	%r10, 32(%rdx)
	movq	%rdi, 56(%rdx)
	movb	%bl, 68(%rdx)
	movl	%r12d, constructor_top_level(%rip)
	movl	$0, constructor_designated(%rip)
	movq	initializer_stack(%rip), %rbx
	movq	%rbp, constructor_decl(%rip)
	movq	%rcx, constructor_asmspec(%rip)
	movl	$0, constructor_subconstants_deferred(%rip)
	movq	%rbx, (%rdx)
	movq	%rdx, initializer_stack(%rip)
	je	.L15166
	movzbl	18(%rbp), %ecx
	xorl	%edx, %edx
	shrb	$2, %cl
	andl	$1, %ecx
	testl	%ecx, %ecx
	movl	%ecx, require_constant_value(%rip)
	jne	.L15168
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	je	.L15167
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L15167
.L15168:
	movq	8(%rbp), %r12
	movzbl	16(%r12), %eax
	cmpb	$18, %al
	je	.L15169
	cmpb	$20, %al
	je	.L15169
	cmpb	$21, %al
	je	.L15169
	cmpb	$22, %al
	je	.L15169
	.p2align 4,,7
.L15167:
	movl	%edx, require_constant_elements(%rip)
	movq	72(%rbp), %rdx
	movq	32(%rdx), %rbx
.L15170:
	testq	%rbx, %rbx
	movq	$0, constructor_stack(%rip)
	movq	$0, constructor_range_stack(%rip)
	movl	$0, missing_braces_mentioned(%rip)
	movq	$0, spelling_base(%rip)
	movl	$0, spelling_size(%rip)
	movq	$0, spelling(%rip)
	jne	.L15176
.L15164:
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret
	.p2align 6,,7
.L15176:
	movl	$160, %edi
	movl	$10, spelling_size(%rip)
	call	xmalloc
	movq	%rax, spelling_base(%rip)
	movl	$1, (%rax)
	movq	%rbx, 8(%rax)
	addq	$16, %rax
	movq	%rax, spelling(%rip)
	jmp	.L15164
	.p2align 6,,7
.L15169:
	movl	$1, %edx
	jmp	.L15167
	.p2align 6,,7
.L15166:
	movl	$0, require_constant_value(%rip)
	movl	$0, require_constant_elements(%rip)
	movl	$.LC160, %ebx
	jmp	.L15170
.LFE36:
.Lfe36:
	.size	start_init,.Lfe36-start_init
	.section	.rodata.str1.1
.LC161:
	.string	"finish_init"
	.text
	.align 2
	.p2align 4,,15
.globl finish_init
	.type	finish_init,@function
finish_init:
.LFB37:
	movl	constructor_subconstants_deferred(%rip), %eax
	pushq	%rbx
.LCFI164:
	movq	initializer_stack(%rip), %rbx
	testl	%eax, %eax
	jne	.L15186
.L15178:
	movq	constructor_stack(%rip), %rax
	testq	%rax, %rax
	jne	.L15182
.L15185:
	cmpq	$0, constructor_range_stack(%rip)
	jne	.L15187
	movq	8(%rbx), %rdi
	movsbl	69(%rbx),%ecx
	movsbl	70(%rbx),%edx
	movq	16(%rbx), %rsi
	movl	64(%rbx), %eax
	movq	48(%rbx), %r8
	movq	%rdi, constructor_decl(%rip)
	movq	24(%rbx), %r11
	movq	32(%rbx), %r10
	movq	56(%rbx), %rdi
	movq	40(%rbx), %r9
	movq	%rsi, constructor_asmspec(%rip)
	movl	%ecx, require_constant_value(%rip)
	movl	%edx, require_constant_elements(%rip)
	movsbl	71(%rbx),%esi
	movsbl	68(%rbx),%ecx
	movq	(%rbx), %rdx
	movq	%r11, constructor_stack(%rip)
	movq	%rdi, spelling_base(%rip)
	movq	%r10, constructor_range_stack(%rip)
	movq	%r9, constructor_elements(%rip)
	movq	%rbx, %rdi
	movq	%r8, spelling(%rip)
	movl	%eax, spelling_size(%rip)
	popq	%rbx
	movl	%esi, constructor_subconstants_deferred(%rip)
	movl	%ecx, constructor_top_level(%rip)
	movq	%rdx, initializer_stack(%rip)
	jmp	free
	.p2align 6,,7
.L15182:
	movq	(%rax), %rdx
	movq	%rax, %rdi
	movq	%rdx, constructor_stack(%rip)
	call	free
	movq	constructor_stack(%rip), %rax
	testq	%rax, %rax
	jne	.L15182
	jmp	.L15185
.L15186:
	call	output_deferred_addressed_constants
	jmp	.L15178
.L15187:
	movl	$.LC68, %edi
	movl	$5151, %esi
	movl	$.LC161, %edx
	call	fancy_abort
.LFE37:
.Lfe37:
	.size	finish_init,.Lfe37-finish_init
	.align 2
	.p2align 4,,15
.globl really_start_incremental_init
	.type	really_start_incremental_init,@function
really_start_incremental_init:
.LFB38:
	pushq	%rbx
.LCFI165:
	movq	%rdi, %rbx
	movl	$112, %edi
	call	xmalloc
	testq	%rbx, %rbx
	movq	%rax, %rdx
	jne	.L15189
	movq	constructor_decl(%rip), %rcx
	movq	8(%rcx), %rbx
.L15189:
	movq	constructor_fields(%rip), %r11
	movq	constructor_type(%rip), %rcx
	movq	$0, 96(%rdx)
	movq	constructor_index(%rip), %r10
	movq	constructor_max_index(%rip), %r9
	movq	constructor_unfilled_index(%rip), %r8
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%r11, 16(%rdx)
	movq	constructor_bit_index(%rip), %rsi
	movq	%rcx, 8(%rdx)
	movzbl	constructor_constant(%rip), %r11d
	movq	%r10, 24(%rdx)
	movq	constructor_elements(%rip), %rcx
	movq	%r9, 32(%rdx)
	movq	%r8, 40(%rdx)
	movq	%rdi, 48(%rdx)
	movq	%rsi, 56(%rdx)
	movq	$0, 88(%rdx)
	movq	%rcx, 64(%rdx)
	movb	%r11b, 104(%rdx)
	movzbl	constructor_simple(%rip), %r10d
	movb	%r10b, 105(%rdx)
	movzbl	constructor_erroneous(%rip), %r9d
	movb	%r9b, 107(%rdx)
	movl	constructor_depth(%rip), %eax
	movq	constructor_pending_elts(%rip), %r8
	movb	$0, 106(%rdx)
	movb	$0, 108(%rdx)
	movzbl	constructor_incremental(%rip), %edi
	movq	%r8, 72(%rdx)
	movl	%eax, 84(%rdx)
	movb	%dil, 109(%rdx)
	movzbl	constructor_designated(%rip), %esi
	movb	%sil, 110(%rdx)
	movl	$0, designator_errorneous(%rip)
	movl	$0, designator_depth(%rip)
	movq	$0, (%rdx)
	movl	$1, constructor_constant(%rip)
	movl	$1, constructor_simple(%rip)
	movq	%rdx, constructor_stack(%rip)
	movq	$0, constructor_elements(%rip)
	movq	$0, constructor_pending_elts(%rip)
	movq	spelling(%rip), %rdx
	movq	%rbx, constructor_type(%rip)
	movl	$1, constructor_incremental(%rip)
	subq	spelling_base(%rip), %rdx
	movl	$0, constructor_designated(%rip)
	sarq	$4, %rdx
	movl	%edx, constructor_depth(%rip)
	movzbl	16(%rbx), %edx
	leal	-20(%rdx), %ecx
	cmpb	$1, %cl
	ja	.L15190
	movq	24(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_fields(%rip)
	je	.L15192
	testb	$2, 53(%rax)
	jne	.L15213
.L15192:
	movq	constructor_fields(%rip), %rdx
	movq	global_trees+136(%rip), %rbx
	movq	%rdx, constructor_unfilled_fields(%rip)
	movq	%rbx, constructor_bit_index(%rip)
.L15188:
	popq	%rbx
	ret
	.p2align 6,,7
.L15213:
	cmpq	$0, 72(%rax)
	jne	.L15192
.L15195:
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L15210
	testb	$2, 53(%rax)
	je	.L15210
	cmpq	$0, 72(%rax)
	je	.L15195
.L15210:
	movq	%rax, constructor_fields(%rip)
	jmp	.L15192
	.p2align 6,,7
.L15190:
	cmpb	$18, %dl
	je	.L15214
	cmpb	$9, %dl
	je	.L15215
	movq	%rbx, constructor_fields(%rip)
	movq	%rbx, constructor_unfilled_fields(%rip)
	jmp	.L15188
	.p2align 6,,7
.L15215:
	movzbl	61(%rbx), %eax
	shrb	$1, %al
	andl	$127, %eax
	movzbl	mode_unit_size(%rax), %edx
	testb	%dl, %dl
	je	.L15206
	movzbw	mode_size(%rax), %ax
	divb	%dl
	movzbl	%al, %r9d
	decl	%r9d
	movslq	%r9d,%rdi
.L15207:
	xorl	%esi, %esi
	call	build_int_2_wide
	movq	global_trees+88(%rip), %rsi
	movq	sizetype_tab+24(%rip), %rdi
	movq	%rax, constructor_max_index(%rip)
	call	convert
	movq	%rax, constructor_index(%rip)
.L15212:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L15188
.L15206:
	movq	$-1, %rdi
	jmp	.L15207
	.p2align 6,,7
.L15214:
	movq	24(%rbx), %rax
	testq	%rax, %rax
	je	.L15198
	movq	112(%rax), %rsi
	testq	%rsi, %rsi
	movq	%rsi, constructor_max_index(%rip)
	jne	.L15199
	cmpq	$0, 32(%rbx)
	jne	.L15216
.L15199:
	movq	constructor_max_index(%rip), %rax
	testq	%rax, %rax
	je	.L15200
	cmpb	$25, 16(%rax)
	je	.L15200
	movq	$-1, %rdi
	movq	%rdi, %rsi
	call	build_int_2_wide
	movq	%rax, constructor_max_index(%rip)
.L15200:
	movq	constructor_type(%rip), %rdi
	movq	24(%rdi), %r8
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%r8), %rsi
	call	convert
.L15211:
	movq	%rax, constructor_index(%rip)
	movq	constructor_index(%rip), %rax
	jmp	.L15212
.L15216:
	movq	$-1, %rdi
	movq	%rdi, %rsi
	call	build_int_2_wide
	movq	%rax, constructor_max_index(%rip)
	jmp	.L15199
.L15198:
	movq	global_trees+136(%rip), %rax
	jmp	.L15211
.LFE38:
.Lfe38:
	.size	really_start_incremental_init,.Lfe38-really_start_incremental_init
	.section	.rodata.str1.1
.LC176:
	.string	"empty scalar initializer"
	.section	.rodata.str1.32
	.align 32
.LC177:
	.string	"extra elements in scalar initializer"
	.align 32
.LC165:
	.string	"initialized field with side-effects overwritten"
	.section	.rodata.str1.1
.LC159:
	.string	"<anonymous>"
.LC175:
	.string	"missing initializer"
	.section	.rodata.str1.32
	.align 32
.LC174:
	.string	"initialization of a flexible array member"
	.align 32
.LC173:
	.string	"initialization of flexible array member in a nested context"
	.section	.rodata.str1.1
.LC172:
	.string	"pop_init_level"
.LC171:
	.string	"process_init_element"
	.section	.rodata.str1.32
	.align 32
.LC181:
	.string	"braces around scalar initializer"
	.align 32
.LC180:
	.string	"set_nonincremental_init_from_string"
	.align 32
.LC179:
	.string	"missing braces around initializer"
	.align 32
.LC178:
	.string	"extra brace group at end of initializer"
	.align 32
.LC168:
	.string	"excess elements in array initializer"
	.align 32
.LC170:
	.string	"excess elements in scalar initializer"
	.align 32
.LC169:
	.string	"excess elements in vector initializer"
	.align 32
.LC167:
	.string	"traditional C rejects initialization of unions"
	.align 32
.LC166:
	.string	"excess elements in union initializer"
	.align 32
.LC164:
	.string	"non-static initialization of a flexible array member"
	.align 32
.LC163:
	.string	"excess elements in struct initializer"
	.align 32
.LC162:
	.string	"excess elements in char array initializer"
	.text
	.align 2
	.p2align 4,,15
.globl push_init_level
	.type	push_init_level,@function
push_init_level:
.LFB39:
	pushq	%rbp
.LCFI166:
	movq	%rsp, %rbp
.LCFI167:
	pushq	%r15
.LCFI168:
	pushq	%r14
.LCFI169:
	pushq	%r13
.LCFI170:
	pushq	%r12
.LCFI171:
	pushq	%rbx
.LCFI172:
	subq	$1272, %rsp
.LCFI173:
	movq	constructor_stack(%rip), %rdx
	movq	$0, -1264(%rbp)
	movl	%edi, -68(%rbp)
	movq	%rdx, -1296(%rbp)
	cmpb	$0, 106(%rdx)
	je	.L15219
.L28702:
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %ecx
	movq	%rdi, %rdx
	subb	$20, %cl
	cmpb	$1, %cl
	ja	.L15221
	cmpq	$0, constructor_fields(%rip)
	jne	.L15221
.L15596:
.L15929:
.L16247:
.L16556:
.L16865:
	movq	$0, -648(%rbp)
	movq	-1296(%rbp), %rbx
	movq	%rbx, -80(%rbp)
	movl	extra_warnings(%rip), %eax
	testl	%eax, %eax
	je	.L16989
	testq	%rdi, %rdi
	je	.L16989
	cmpb	$20, 16(%rdi)
	je	.L32175
.L16989:
	movl	$1, constructor_incremental(%rip)
	movq	constructor_pending_elts(%rip), %r14
.L17026:
	testq	%r14, %r14
	movq	$0, -640(%rbp)
	je	.L17028
	.p2align 4,,7
.L17536:
	movq	constructor_type(%rip), %r15
	movzbl	16(%r15), %eax
	cmpb	$18, %al
	je	.L32176
	subb	$20, %al
	cmpb	$1, %al
	ja	.L17027
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L17028
	call	bit_position
	movq	32(%r14), %rdi
	movq	%rax, %r12
	call	bit_position
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L17285
	movq	32(%r14), %r11
	movq	40(%r14), %rbx
	movq	8(%r11), %rsi
	movq	%r11, %r15
	movq	%r11, constructor_unfilled_fields(%rip)
	movq	%r11, -632(%rbp)
	movq	%rsi, -120(%rbp)
	movq	8(%rbx), %r13
	movzbl	16(%r13), %eax
	movq	%r13, %rdx
	cmpb	$23, %al
	je	.L17287
	cmpb	$18, %al
	je	.L32177
.L31008:
	movq	global_trees(%rip), %r8
.L31393:
	movzbl	16(%rbx), %ecx
.L17286:
	cmpb	$-86, %cl
	je	.L32178
.L17385:
	cmpq	%r8, %rbx
	je	.L32179
	testb	$2, 17(%rbx)
	jne	.L17388
	movl	$0, constructor_constant(%rip)
.L17387:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L17392
	testb	$2, 17(%rbx)
	je	.L32180
.L17392:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L32181
.L17417:
	testq	%r15, %r15
	je	.L17419
	movq	8(%r15), %rax
	cmpq	global_trees(%rip), %rax
	je	.L17027
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L32182
.L17419:
	movq	-120(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%rbx, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, %r13
	je	.L31400
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L32183
.L17423:
	cmpb	$20, 16(%rdi)
	je	.L32184
.L17444:
	cmpb	$21, 16(%rdi)
	je	.L32185
.L17443:
	testq	%r15, %r15
	je	.L17511
	cmpb	$25, 16(%r15)
	je	.L32186
.L17511:
	movq	constructor_elements(%rip), %rdx
	movq	-632(%rbp), %rdi
	movq	%r13, %rsi
	call	tree_cons
	movq	constructor_type(%rip), %r15
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r15), %eax
	movq	%r15, %rdx
	cmpb	$18, %al
	je	.L32049
	cmpb	$20, %al
	je	.L32187
.L17514:
	cmpb	$21, 16(%rdx)
	je	.L32188
.L17513:
	xorl	%edi, %edi
	testl	%edi, %edi
	jne	.L32189
	.p2align 4,,7
.L17027:
	testq	%r14, %r14
	jne	.L17536
.L17028:
	movl	$1, %r12d
	testl	%r12d, %r12d
	je	.L17539
	cmpq	$0, -640(%rbp)
	je	.L17539
	movq	constructor_type(%rip), %rcx
	movzbl	16(%rcx), %edx
	leal	-20(%rdx), %r11d
	cmpb	$1, %r11b
	jbe	.L32190
	cmpb	$18, %dl
	jne	.L17026
	movq	-640(%rbp), %rax
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L17026
.L32190:
	movq	-640(%rbp), %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	jmp	.L17026
.L17539:
	movq	-1296(%rbp), %r14
	movq	88(%r14), %rax
	testq	%rax, %rax
	jne	.L31402
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L17544
	movzbl	16(%rax), %edx
	leal	-20(%rdx), %r10d
	cmpb	$1, %r10b
	jbe	.L17547
	cmpb	$18, %dl
	je	.L17547
	cmpb	$9, %dl
	je	.L17547
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	jne	.L17548
	movl	constructor_erroneous(%rip), %r8d
	testl	%r8d, %r8d
	je	.L32191
.L17549:
	movq	global_trees(%rip), %rbx
	movq	%rbx, -648(%rbp)
.L17544:
	movq	-1296(%rbp), %rbx
	movsbl	104(%rbx),%edx
	movq	8(%rbx), %rsi
	movq	%rbx, %rdi
	movq	16(%rbx), %rax
	movq	24(%rbx), %r13
	movsbl	105(%rbx),%r10d
	movq	32(%rbx), %r15
	movsbl	107(%rbx),%ecx
	movq	40(%rbx), %r9
	movq	%rsi, constructor_type(%rip)
	movsbl	109(%rbx),%r11d
	movq	48(%rbx), %r14
	movl	%edx, constructor_constant(%rip)
	movq	56(%rbx), %r12
	movq	64(%rbx), %r8
	movq	%rax, constructor_fields(%rip)
	movsbl	110(%rbx),%ebx
	cmpb	$0, 106(%rdi)
	movq	%r13, constructor_index(%rip)
	movq	72(%rdi), %rsi
	movl	84(%rdi), %edx
	movq	%r15, constructor_max_index(%rip)
	movq	%r9, constructor_unfilled_index(%rip)
	movq	%r14, constructor_unfilled_fields(%rip)
	movq	%r12, constructor_bit_index(%rip)
	movq	%r8, constructor_elements(%rip)
	movl	%r10d, constructor_simple(%rip)
	movl	%ecx, constructor_erroneous(%rip)
	movl	%r11d, constructor_incremental(%rip)
	movl	%ebx, constructor_designated(%rip)
	movq	%rsi, constructor_pending_elts(%rip)
	movl	%edx, constructor_depth(%rip)
	jne	.L17606
	movq	96(%rdi), %rdi
	movq	%rdi, constructor_range_stack(%rip)
.L17606:
	movq	-1296(%rbp), %r10
	movslq	%edx,%r8
	movq	-80(%rbp), %rdi
	salq	$4, %r8
	addq	spelling_base(%rip), %r8
	movq	(%r10), %rcx
	movq	%r8, spelling(%rip)
	movq	%rcx, constructor_stack(%rip)
	call	free
	movq	-648(%rbp), %r11
	testq	%r11, %r11
	movq	%r11, -760(%rbp)
	jne	.L17609
	cmpq	$0, constructor_stack(%rip)
	jne	.L17608
	movq	global_trees(%rip), %rdx
	movq	%rdx, -760(%rbp)
.L17609:
	movq	-760(%rbp), %rdx
	movl	$0, -652(%rbp)
	testq	%rdx, %rdx
	movq	%rdx, -152(%rbp)
	je	.L17610
	cmpb	$29, 16(%rdx)
	movl	$1, %eax
	cmovne	-652(%rbp), %eax
	movl	%eax, -652(%rbp)
.L17610:
	movl	-652(%rbp), %r12d
	movl	$0, designator_depth(%rip)
	movl	$0, designator_errorneous(%rip)
	testl	%r12d, %r12d
	je	.L17611
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L17611
	cmpb	$18, 16(%rax)
	je	.L32192
.L17611:
	movq	constructor_stack(%rip), %r10
	cmpq	$0, 88(%r10)
	movq	%r10, -1296(%rbp)
	jne	.L32193
	movq	constructor_type(%rip), %rdi
	testq	%rdi, %rdi
	je	.L15218
	movq	-1296(%rbp), %r12
	cmpb	$0, 106(%r12)
	je	.L17665
.L18996:
	movzbl	16(%rdi), %r14d
	subb	$20, %r14b
	cmpb	$1, %r14b
	ja	.L17667
	cmpq	$0, constructor_fields(%rip)
	jne	.L17667
	movq	$0, -704(%rbp)
	movq	-1296(%rbp), %r13
	movq	%r13, -160(%rbp)
	movl	extra_warnings(%rip), %ebx
	testl	%ebx, %ebx
	je	.L17731
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L17731
	cmpb	$20, 16(%rax)
	je	.L32194
.L17731:
	movq	constructor_pending_elts(%rip), %r14
	movl	$1, constructor_incremental(%rip)
	movq	%r14, -664(%rbp)
.L17768:
	cmpq	$0, -664(%rbp)
	movq	$0, -696(%rbp)
	je	.L17770
.L18256:
	movq	constructor_type(%rip), %rbx
	movzbl	16(%rbx), %eax
	cmpb	$18, %al
	je	.L32195
	subb	$20, %al
	cmpb	$1, %al
	ja	.L17769
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L17770
	call	bit_position
	movq	-664(%rbp), %r10
	movq	%rax, %r12
	movq	32(%r10), %rdi
	call	bit_position
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L18016
	movq	-664(%rbp), %r9
	movq	32(%r9), %r15
	movq	40(%r9), %r12
	movq	8(%r15), %r13
	movq	%r15, %r14
	movq	%r15, constructor_unfilled_fields(%rip)
	movq	%r15, -688(%rbp)
	movq	%r13, -176(%rbp)
	movq	8(%r12), %rbx
	movzbl	16(%rbx), %eax
	movq	%rbx, %rdx
	cmpb	$23, %al
	je	.L18018
	cmpb	$18, %al
	je	.L32196
.L31031:
	movq	global_trees(%rip), %r8
.L31432:
	movzbl	16(%r12), %ecx
.L18017:
	cmpb	$-86, %cl
	je	.L32197
.L18105:
	cmpq	%r8, %r12
	je	.L32198
	testb	$2, 17(%r12)
	jne	.L18108
	movl	$0, constructor_constant(%rip)
.L18107:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L18112
	testb	$2, 17(%r12)
	je	.L32199
.L18112:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L32200
.L18137:
	testq	%r14, %r14
	je	.L18139
	movq	8(%r14), %rax
	cmpq	global_trees(%rip), %rax
	je	.L17769
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L32201
.L18139:
	movq	-176(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%r12, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -680(%rbp)
	je	.L31439
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L32202
.L18143:
	cmpb	$20, 16(%rdi)
	je	.L32203
.L18164:
	cmpb	$21, 16(%rdi)
	je	.L32204
.L18163:
	testq	%r14, %r14
	je	.L18231
	cmpb	$25, 16(%r14)
	je	.L32205
.L18231:
	movq	constructor_elements(%rip), %rdx
	movq	-688(%rbp), %rdi
	movq	-680(%rbp), %rsi
	call	tree_cons
	movq	constructor_type(%rip), %r14
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r14), %eax
	movq	%r14, %rdx
	cmpb	$18, %al
	je	.L32053
	cmpb	$20, %al
	je	.L32206
.L18234:
	cmpb	$21, 16(%rdx)
	je	.L32207
.L18233:
	xorl	%eax, %eax
	testl	%eax, %eax
	jne	.L32208
.L17769:
	cmpq	$0, -664(%rbp)
	jne	.L18256
.L17770:
	movl	$1, %edx
	testl	%edx, %edx
	je	.L18259
	cmpq	$0, -696(%rbp)
	je	.L18259
	movq	constructor_type(%rip), %r8
	movzbl	16(%r8), %edx
	leal	-20(%rdx), %r9d
	cmpb	$1, %r9b
	jbe	.L32209
	cmpb	$18, %dl
	jne	.L17768
	movq	-696(%rbp), %rdi
	movq	%rdi, constructor_unfilled_index(%rip)
	jmp	.L17768
.L32209:
	movq	-696(%rbp), %r11
	movq	%r11, constructor_unfilled_fields(%rip)
	jmp	.L17768
.L18259:
	movq	-1296(%rbp), %r14
	movq	88(%r14), %rax
	testq	%rax, %rax
	jne	.L31440
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L18264
	movzbl	16(%rax), %edx
	leal	-20(%rdx), %ebx
	cmpb	$1, %bl
	jbe	.L18267
	cmpb	$18, %dl
	je	.L18267
	cmpb	$9, %dl
	je	.L18267
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	jne	.L18268
	movl	constructor_erroneous(%rip), %r12d
	testl	%r12d, %r12d
	je	.L32210
.L18269:
	movq	global_trees(%rip), %rcx
	movq	%rcx, -704(%rbp)
.L18264:
	movq	-1296(%rbp), %r13
	movsbl	109(%r13),%edx
	movq	8(%r13), %r10
	movsbl	104(%r13),%r11d
	movsbl	105(%r13),%r8d
	movsbl	107(%r13),%r9d
	movsbl	110(%r13),%ecx
	cmpb	$0, 106(%r13)
	movq	16(%r13), %rax
	movq	%r10, constructor_type(%rip)
	movq	24(%r13), %rsi
	movq	32(%r13), %r12
	movl	%edx, constructor_incremental(%rip)
	movq	40(%r13), %r15
	movq	48(%r13), %rbx
	movl	%r11d, constructor_constant(%rip)
	movq	56(%r13), %r14
	movq	64(%r13), %rdi
	movq	%rax, constructor_fields(%rip)
	movq	72(%r13), %r10
	movl	84(%r13), %edx
	movq	%rsi, constructor_index(%rip)
	movq	%r12, constructor_max_index(%rip)
	movq	%r15, constructor_unfilled_index(%rip)
	movq	%rbx, constructor_unfilled_fields(%rip)
	movq	%r14, constructor_bit_index(%rip)
	movq	%rdi, constructor_elements(%rip)
	movl	%r8d, constructor_simple(%rip)
	movl	%r9d, constructor_erroneous(%rip)
	movl	%ecx, constructor_designated(%rip)
	movq	%r10, constructor_pending_elts(%rip)
	movl	%edx, constructor_depth(%rip)
	jne	.L18326
	movq	96(%r13), %r13
	movq	%r13, constructor_range_stack(%rip)
.L18326:
	movslq	%edx,%r9
	movq	-160(%rbp), %rdi
	movq	-1296(%rbp), %rdx
	salq	$4, %r9
	addq	spelling_base(%rip), %r9
	movq	(%rdx), %rcx
	movq	%r9, spelling(%rip)
	movq	%rcx, constructor_stack(%rip)
	call	free
	movq	-704(%rbp), %rdi
.L32114:
	testq	%rdi, %rdi
	jne	.L18994
	cmpq	$0, constructor_stack(%rip)
	jne	.L18993
	movq	global_trees(%rip), %rdi
.L18994:
	call	process_init_element
	movq	constructor_stack(%rip), %r11
	movq	%r11, -1296(%rbp)
	cmpb	$0, 106(%r11)
	je	.L17665
	movq	constructor_type(%rip), %rdi
	jmp	.L18996
	.p2align 6,,7
.L17665:
	cmpq	$0, constructor_range_stack(%rip)
	je	.L21960
	movq	-760(%rbp), %rsi
	cmpb	$-86, 16(%rsi)
	je	.L32211
.L18999:
	movq	-760(%rbp), %rdi
	call	save_expr
	movq	%rax, -760(%rbp)
.L21960:
	movq	constructor_type(%rip), %rbx
	cmpb	$20, 16(%rbx)
	movq	%rbx, %r14
	je	.L32212
	movzbl	16(%rbx), %edx
	cmpb	$21, %dl
	je	.L32213
	cmpb	$18, %dl
	jne	.L19681
	movq	8(%rbx), %r15
	cmpq	$0, -760(%rbp)
	movq	128(%r15), %r14
	movzbl	16(%r14), %edx
	je	.L19683
	cmpl	$18, %edx
	je	.L32214
.L19682:
	cmpq	$0, -760(%rbp)
	je	.L19683
	movl	constructor_no_implicit(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L19683
	movq	-760(%rbp), %rax
	cmpq	global_trees(%rip), %rax
	je	.L19683
	movq	8(%rax), %rdi
	cmpq	%r14, 128(%rdi)
	je	.L19683
	cmpl	$20, %edx
	je	.L19685
	cmpl	$18, %edx
	je	.L19685
	cmpl	$21, %edx
	jne	.L19683
.L19685:
	movl	$1, %edi
	call	push_init_level
	jmp	.L21960
.L19683:
	movq	constructor_max_index(%rip), %rdi
	testq	%rdi, %rdi
	jne	.L32215
.L19686:
	cmpq	$0, -760(%rbp)
	jne	.L32216
.L20025:
	movq	constructor_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	cmpq	$0, -760(%rbp)
	movq	%rax, constructor_index(%rip)
	jne	.L19358
	movq	%rax, constructor_unfilled_index(%rip)
.L19358:
	movq	constructor_range_stack(%rip), %rsi
	testq	%rsi, %rsi
	movq	%rsi, -216(%rbp)
	je	.L25741
	movq	constructor_stack(%rip), %rdx
	movl	$0, -916(%rbp)
	movq	$0, constructor_range_stack(%rip)
	cmpq	16(%rsi), %rdx
	movq	%rdx, -1296(%rbp)
	je	.L30024
.L21282:
	movq	-1296(%rbp), %rax
	cmpb	$0, 106(%rax)
	je	.L32092
	movq	$0, -864(%rbp)
	movq	-1296(%rbp), %r11
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	movq	%r11, -224(%rbp)
	je	.L20626
	cmpq	$0, constructor_fields(%rip)
	je	.L20626
	cmpb	$18, 16(%rax)
	je	.L32217
.L20626:
	movl	extra_warnings(%rip), %eax
	testl	%eax, %eax
	je	.L20683
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L20683
	cmpb	$20, 16(%rax)
	je	.L32218
.L20683:
	movq	constructor_pending_elts(%rip), %rbx
	movl	$1, constructor_incremental(%rip)
	movq	%rbx, -824(%rbp)
.L20720:
	cmpq	$0, -824(%rbp)
	movq	$0, -856(%rbp)
	je	.L20722
.L21208:
	movq	constructor_type(%rip), %rdx
	movzbl	16(%rdx), %eax
	cmpb	$18, %al
	je	.L32219
	subb	$20, %al
	cmpb	$1, %al
	ja	.L20721
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L20722
	call	bit_position
	movq	-824(%rbp), %r13
	movq	%rax, %r12
	movq	32(%r13), %rdi
	call	bit_position
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L20968
	movq	-824(%rbp), %rsi
	movq	32(%rsi), %r15
	movq	40(%rsi), %r12
	movq	8(%r15), %rdi
	movq	%r15, %r14
	movq	%r15, constructor_unfilled_fields(%rip)
	movq	%r15, -848(%rbp)
	movq	%rdi, -240(%rbp)
	movq	8(%r12), %rbx
	movzbl	16(%rbx), %eax
	movq	%rbx, %rdx
	cmpb	$23, %al
	je	.L20970
	cmpb	$18, %al
	je	.L32220
.L31129:
	movq	global_trees(%rip), %r8
.L31594:
	movzbl	16(%r12), %ecx
.L20969:
	cmpb	$-86, %cl
	je	.L32221
.L21057:
	cmpq	%r8, %r12
	je	.L32222
	testb	$2, 17(%r12)
	jne	.L21060
	movl	$0, constructor_constant(%rip)
.L21059:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L21064
	testb	$2, 17(%r12)
	je	.L32223
.L21064:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L32224
.L21089:
	testq	%r14, %r14
	je	.L21091
	movq	8(%r14), %rax
	cmpq	global_trees(%rip), %rax
	je	.L20721
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L32225
.L21091:
	movq	-240(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%r12, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -840(%rbp)
	je	.L31601
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L32226
.L21095:
	cmpb	$20, 16(%rdi)
	je	.L32227
.L21116:
	cmpb	$21, 16(%rdi)
	je	.L32228
.L21115:
	testq	%r14, %r14
	je	.L21183
	cmpb	$25, 16(%r14)
	je	.L32229
.L21183:
	movq	constructor_elements(%rip), %rdx
	movq	-848(%rbp), %rdi
	movq	-840(%rbp), %rsi
	call	tree_cons
	movq	constructor_type(%rip), %r14
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r14), %eax
	movq	%r14, %rdx
	cmpb	$18, %al
	je	.L32067
	cmpb	$20, %al
	je	.L32230
.L21186:
	cmpb	$21, 16(%rdx)
	je	.L32231
.L21185:
	xorl	%eax, %eax
	testl	%eax, %eax
	jne	.L32232
.L20721:
	cmpq	$0, -824(%rbp)
	jne	.L21208
.L20722:
	movl	$1, %edx
	testl	%edx, %edx
	je	.L21211
	cmpq	$0, -856(%rbp)
	je	.L21211
	movq	constructor_type(%rip), %r8
	movzbl	16(%r8), %edx
	leal	-20(%rdx), %r9d
	cmpb	$1, %r9b
	jbe	.L32233
	cmpb	$18, %dl
	jne	.L20720
	movq	-856(%rbp), %r10
	movq	%r10, constructor_unfilled_index(%rip)
	jmp	.L20720
.L32233:
	movq	-856(%rbp), %r11
	movq	%r11, constructor_unfilled_fields(%rip)
	jmp	.L20720
.L21211:
	movq	-1296(%rbp), %r14
	movq	88(%r14), %rax
	testq	%rax, %rax
	jne	.L31603
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L21216
	movzbl	16(%rax), %edx
	leal	-20(%rdx), %ebx
	cmpb	$1, %bl
	jbe	.L21219
	cmpb	$18, %dl
	je	.L21219
	cmpb	$9, %dl
	je	.L21219
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	jne	.L21220
	movl	constructor_erroneous(%rip), %r12d
	testl	%r12d, %r12d
	je	.L32234
.L21221:
	movq	global_trees(%rip), %rcx
	movq	%rcx, -864(%rbp)
.L21216:
	movq	-1296(%rbp), %r13
	movq	8(%r13), %rcx
	movsbl	109(%r13),%edx
	movsbl	104(%r13),%r11d
	movsbl	105(%r13),%r8d
	movsbl	107(%r13),%r9d
	cmpb	$0, 106(%r13)
	movq	%rcx, constructor_type(%rip)
	movq	16(%r13), %rax
	movq	24(%r13), %rsi
	movsbl	110(%r13),%ecx
	movq	32(%r13), %r12
	movl	%edx, constructor_incremental(%rip)
	movq	40(%r13), %r15
	movq	48(%r13), %rbx
	movl	%r11d, constructor_constant(%rip)
	movq	56(%r13), %r14
	movq	64(%r13), %r10
	movq	%rax, constructor_fields(%rip)
	movq	72(%r13), %rdi
	movl	84(%r13), %edx
	movq	%rsi, constructor_index(%rip)
	movq	%r12, constructor_max_index(%rip)
	movq	%r15, constructor_unfilled_index(%rip)
	movq	%rbx, constructor_unfilled_fields(%rip)
	movq	%r14, constructor_bit_index(%rip)
	movq	%r10, constructor_elements(%rip)
	movl	%r8d, constructor_simple(%rip)
	movl	%r9d, constructor_erroneous(%rip)
	movl	%ecx, constructor_designated(%rip)
	movq	%rdi, constructor_pending_elts(%rip)
	movl	%edx, constructor_depth(%rip)
	jne	.L21278
	movq	96(%r13), %r13
	movq	%r13, constructor_range_stack(%rip)
.L21278:
	movslq	%edx,%r9
	movq	-1296(%rbp), %rdx
	salq	$4, %r9
	addq	spelling_base(%rip), %r9
	movq	(%rdx), %rdi
	movq	%r9, spelling(%rip)
	movq	%rdi, constructor_stack(%rip)
	movq	-224(%rbp), %rdi
	call	free
	movq	-864(%rbp), %rdi
	testq	%rdi, %rdi
	jne	.L21281
	cmpq	$0, constructor_stack(%rip)
	jne	.L21280
	movq	global_trees(%rip), %rdi
.L21281:
	call	process_init_element
	movq	-216(%rbp), %r8
	movq	constructor_stack(%rip), %r11
	cmpq	16(%r8), %r11
	movq	%r11, -1296(%rbp)
	jne	.L21282
.L30024:
	movq	-216(%rbp), %r10
	movq	%r10, -928(%rbp)
.L21283:
	movq	-928(%rbp), %rax
	movq	40(%rax), %rsi
	testq	%rsi, %rsi
	je	.L21950
	movq	32(%rax), %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L32235
.L21950:
	movq	constructor_stack(%rip), %r14
	movq	%r14, -248(%rbp)
	cmpb	$0, 106(%r14)
	je	.L32091
	movq	$0, -912(%rbp)
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L21294
	cmpq	$0, constructor_fields(%rip)
	je	.L21294
	cmpb	$18, 16(%rax)
	je	.L32236
.L21294:
	movl	extra_warnings(%rip), %r14d
	testl	%r14d, %r14d
	je	.L21351
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L21351
	cmpb	$20, 16(%rax)
	je	.L32237
.L21351:
	movq	constructor_pending_elts(%rip), %rax
	movl	$1, constructor_incremental(%rip)
	movq	%rax, -872(%rbp)
.L21388:
	cmpq	$0, -872(%rbp)
	movq	$0, -904(%rbp)
	je	.L21390
.L21876:
	movq	constructor_type(%rip), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$18, %al
	je	.L32238
	subb	$20, %al
	cmpb	$1, %al
	ja	.L21389
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L21390
	call	bit_position
	movq	-872(%rbp), %r13
	movq	%rax, %r12
	movq	32(%r13), %rdi
	call	bit_position
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L21636
	movq	-872(%rbp), %rsi
	movq	32(%rsi), %r15
	movq	40(%rsi), %r12
	movq	8(%r15), %rdi
	movq	%r15, %r14
	movq	%r15, constructor_unfilled_fields(%rip)
	movq	%r15, -896(%rbp)
	movq	%rdi, -264(%rbp)
	movq	8(%r12), %rbx
	movzbl	16(%rbx), %eax
	movq	%rbx, %rdx
	cmpb	$23, %al
	je	.L21638
	cmpb	$18, %al
	je	.L32239
.L31150:
	movq	global_trees(%rip), %r8
.L31634:
	movzbl	16(%r12), %ecx
.L21637:
	cmpb	$-86, %cl
	je	.L32240
.L21725:
	cmpq	%r8, %r12
	je	.L32241
	testb	$2, 17(%r12)
	jne	.L21728
	movl	$0, constructor_constant(%rip)
.L21727:
	movl	require_constant_value(%rip), %r15d
	testl	%r15d, %r15d
	je	.L21732
	testb	$2, 17(%r12)
	je	.L32242
.L21732:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L32243
.L21757:
	testq	%r14, %r14
	je	.L21759
	movq	8(%r14), %rax
	cmpq	global_trees(%rip), %rax
	je	.L21389
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L32244
.L21759:
	movq	-264(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%r12, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -888(%rbp)
	je	.L31641
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L32245
.L21763:
	cmpb	$20, 16(%rdi)
	je	.L32246
.L21784:
	cmpb	$21, 16(%rdi)
	je	.L32247
.L21783:
	testq	%r14, %r14
	je	.L21851
	cmpb	$25, 16(%r14)
	je	.L32248
.L21851:
	movq	constructor_elements(%rip), %rdx
	movq	-896(%rbp), %rdi
	movq	-888(%rbp), %rsi
	call	tree_cons
	movq	constructor_type(%rip), %r14
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r14), %eax
	movq	%r14, %rdx
	cmpb	$18, %al
	je	.L32071
	cmpb	$20, %al
	je	.L32249
.L21854:
	cmpb	$21, 16(%rdx)
	je	.L32250
.L21853:
	xorl	%eax, %eax
	testl	%eax, %eax
	jne	.L32251
.L21389:
	cmpq	$0, -872(%rbp)
	jne	.L21876
.L21390:
	movl	$1, %r10d
	testl	%r10d, %r10d
	je	.L21879
	cmpq	$0, -904(%rbp)
	je	.L21879
	movq	constructor_type(%rip), %rsi
	movzbl	16(%rsi), %edx
	leal	-20(%rdx), %edi
	cmpb	$1, %dil
	jbe	.L32252
	cmpb	$18, %dl
	jne	.L21388
	movq	-904(%rbp), %r13
	movq	%r13, constructor_unfilled_index(%rip)
	jmp	.L21388
.L32252:
	movq	-904(%rbp), %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	jmp	.L21388
.L21879:
	movq	-248(%rbp), %r14
	movq	88(%r14), %rax
	testq	%rax, %rax
	jne	.L31643
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L21884
	movzbl	16(%rax), %edx
	leal	-20(%rdx), %ebx
	cmpb	$1, %bl
	jbe	.L21887
	cmpb	$18, %dl
	je	.L21887
	cmpb	$9, %dl
	je	.L21887
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	jne	.L21888
	movl	constructor_erroneous(%rip), %r12d
	testl	%r12d, %r12d
	je	.L32253
.L21889:
	movq	global_trees(%rip), %rcx
	movq	%rcx, -912(%rbp)
.L21884:
	movq	-248(%rbp), %r15
	movsbl	104(%r15),%edx
	movq	8(%r15), %r11
	movsbl	105(%r15),%esi
	movsbl	107(%r15),%edi
	movsbl	109(%r15),%r10d
	movsbl	110(%r15),%ecx
	cmpb	$0, 106(%r15)
	movq	16(%r15), %rax
	movq	%r11, constructor_type(%rip)
	movq	24(%r15), %r8
	movq	32(%r15), %r9
	movl	%edx, constructor_constant(%rip)
	movq	40(%r15), %r12
	movq	48(%r15), %rbx
	movl	%esi, constructor_simple(%rip)
	movq	56(%r15), %r14
	movq	64(%r15), %r13
	movq	%rax, constructor_fields(%rip)
	movq	72(%r15), %r11
	movl	84(%r15), %edx
	movq	%r8, constructor_index(%rip)
	movq	%r9, constructor_max_index(%rip)
	movq	%r12, constructor_unfilled_index(%rip)
	movq	%rbx, constructor_unfilled_fields(%rip)
	movq	%r14, constructor_bit_index(%rip)
	movq	%r13, constructor_elements(%rip)
	movl	%edi, constructor_erroneous(%rip)
	movl	%r10d, constructor_incremental(%rip)
	movl	%ecx, constructor_designated(%rip)
	movq	%r11, constructor_pending_elts(%rip)
	movl	%edx, constructor_depth(%rip)
	jne	.L21946
	movq	96(%r15), %r15
	movq	%r15, constructor_range_stack(%rip)
.L21946:
	movslq	%edx,%rdi
	movq	-248(%rbp), %r10
	salq	$4, %rdi
	addq	spelling_base(%rip), %rdi
	movq	(%r10), %rcx
	movq	%rdi, spelling(%rip)
	movq	-248(%rbp), %rdi
	movq	%rcx, constructor_stack(%rip)
	call	free
	movq	-912(%rbp), %rdi
	testq	%rdi, %rdi
	jne	.L21949
	cmpq	$0, constructor_stack(%rip)
	jne	.L21948
	movq	global_trees(%rip), %rdi
.L21949:
	call	process_init_element
	movq	-928(%rbp), %r13
	movq	8(%r13), %rdx
	movq	%rdx, -928(%rbp)
	jmp	.L21283
.L21948:
	xorl	%edi, %edi
	jmp	.L21949
.L32253:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC176, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L30168
.L21896:
	cmpl	$3, (%rbx)
	je	.L32254
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L21892:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L21896
.L30168:
	movslq	%r12d,%r9
	movq	%r8, %r12
	addq	$16, %r9
	andq	$-16, %r9
	subq	%r9, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30170
.L21910:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32255
	cmpl	$2, %eax
	je	.L32256
.L21904:
	movq	8(%r12), %r15
	movzbl	(%r15), %r8d
	leaq	1(%r15), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L21900
.L21909:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L21909
.L21900:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L21910
.L30170:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L21889
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L21889
.L32256:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L21904
.L32255:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L21900
.L32254:
	addl	$25, %r12d
	jmp	.L21892
.L21888:
	cmpq	$0, (%rax)
	jne	.L32257
.L21915:
	movq	32(%rax), %rax
.L31643:
	movq	%rax, -912(%rbp)
	jmp	.L21884
.L32257:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC177, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r10
	xorl	%r12d, %r12d
	cmpq	%r10, %r8
	movq	%r8, %rbx
	movq	%r10, %r13
	jae	.L30173
.L21922:
	cmpl	$3, (%rbx)
	je	.L32258
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L21918:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L21922
.L30173:
	movslq	%r12d,%rdi
	movq	%r8, %r12
	addq	$16, %rdi
	andq	$-16, %rdi
	subq	%rdi, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30175
.L21936:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32259
	cmpl	$2, %eax
	je	.L32260
.L21930:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %esi
	leaq	1(%rdx), %rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	je	.L21926
.L21935:
	movzbl	(%rcx), %r13d
	incq	%rbx
	incq	%rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	jne	.L21935
.L21926:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L21936
.L30175:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L32261
.L21939:
	movq	constructor_elements(%rip), %rax
	jmp	.L21915
.L32261:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L21939
.L32260:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L21930
.L32259:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L21926
.L32258:
	addl	$25, %r12d
	jmp	.L21918
.L21887:
	movl	constructor_erroneous(%rip), %r14d
	testl	%r14d, %r14d
	je	.L21942
	movq	global_trees(%rip), %rbx
	movq	%rbx, -912(%rbp)
	jmp	.L21884
.L21942:
	movq	constructor_elements(%rip), %rdi
	call	nreverse
	xorl	%edx, %edx
	movq	constructor_type(%rip), %rsi
	movq	%rax, %rcx
	movl	$46, %edi
	xorl	%eax, %eax
	call	build
	movl	constructor_constant(%rip), %r12d
	movq	%rax, -912(%rbp)
	testl	%r12d, %r12d
	je	.L21884
	orb	$2, 17(%rax)
	movl	constructor_constant(%rip), %eax
	testl	%eax, %eax
	je	.L21884
	movl	constructor_simple(%rip), %r9d
	testl	%r9d, %r9d
	je	.L21884
	movq	-912(%rbp), %r8
	orb	$4, 18(%r8)
	jmp	.L21884
.L32251:
	xorl	%edi, %edi
	call	output_pending_init_elements
	jmp	.L21389
.L32250:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L21853
.L32249:
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L21853
	testb	$2, 53(%rax)
	je	.L21853
	cmpq	$0, 72(%rax)
	jne	.L21853
.L21859:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L21853
	testb	$2, 53(%rax)
	je	.L21853
	cmpq	$0, 72(%rax)
	jne	.L21853
	jmp	.L21859
.L32071:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L21853
.L32248:
	movq	%r14, %rdi
	call	copy_node
	movq	%rax, -896(%rbp)
	jmp	.L21851
.L32247:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L21783
	movq	32(%rax), %rcx
	testb	$1, 17(%rcx)
	jne	.L32262
.L21826:
	movq	$0, constructor_elements(%rip)
	jmp	.L21783
.L32262:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r10
	xorl	%r12d, %r12d
	cmpq	%r10, %r8
	movq	%r8, %rbx
	movq	%r10, %r13
	jae	.L30161
.L21833:
	cmpl	$3, (%rbx)
	je	.L32263
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L21829:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L21833
.L30161:
	movslq	%r12d,%rdx
	movq	%r8, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L30163
.L21847:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32264
	cmpl	$2, %eax
	je	.L32265
.L21841:
	movq	8(%r12), %rsi
	movzbl	(%rsi), %edi
	leaq	1(%rsi), %rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	je	.L21837
.L21846:
	movzbl	(%rcx), %r13d
	incq	%rbx
	incq	%rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	jne	.L21846
.L21837:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L21847
.L30163:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	je	.L21826
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L21826
.L32265:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L21841
.L32264:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L21837
.L32263:
	addl	$25, %r12d
	jmp	.L21829
.L32246:
	movl	constructor_incremental(%rip), %r9d
	testl	%r9d, %r9d
	je	.L21786
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, %r14
	je	.L21784
	testq	%rax, %rax
	jne	.L21787
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L21794
.L30155:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L32266
.L21814:
	cmpb	$18, 16(%rdi)
	je	.L32267
.L21820:
	movl	$0, constructor_incremental(%rip)
.L21786:
	movq	%r14, %rdi
	movq	-888(%rbp), %rsi
.L31640:
	call	add_pending_init
	jmp	.L21389
.L32267:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L32268
	movq	global_trees+136(%rip), %rax
.L31637:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L21820
.L32268:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31637
.L32266:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L21820
	testb	$2, 53(%rax)
	je	.L21820
	cmpq	$0, 72(%rax)
	jne	.L21820
.L21800:
	movq	constructor_unfilled_fields(%rip), %r8
	movq	(%r8), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L21820
	testb	$2, 53(%rax)
	je	.L21820
	cmpq	$0, 72(%rax)
	jne	.L21820
	jmp	.L21800
.L21794:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L21794
	movq	constructor_type(%rip), %rdi
	jmp	.L30155
.L21787:
	movq	%r14, %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r15
	call	bit_position
	movq	%r15, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L21786
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L21807
	cmpb	$18, %al
	jne	.L21786
.L21807:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L21813
.L30158:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L21814
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L21820
	testb	$2, 53(%rax)
	je	.L21820
	cmpq	$0, 72(%rax)
	jne	.L21820
.L21819:
	movq	constructor_unfilled_fields(%rip), %r11
	movq	(%r11), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L21820
	testb	$2, 53(%rax)
	je	.L21820
	cmpq	$0, 72(%rax)
	jne	.L21820
	jmp	.L21819
.L21813:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L21813
	movq	constructor_type(%rip), %rdi
	jmp	.L30158
.L32245:
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L21786
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r14, %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31157
	movl	constructor_incremental(%rip), %esi
	testl	%esi, %esi
	je	.L21786
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r14, %rdi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L21786
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L21766
	cmpb	$18, %al
	jne	.L21786
.L21766:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L21772
.L30152:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L21814
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L21820
	testb	$2, 53(%rax)
	je	.L21820
	cmpq	$0, 72(%rax)
	jne	.L21820
.L21778:
	movq	constructor_unfilled_fields(%rip), %r13
	movq	(%r13), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L21820
	testb	$2, 53(%rax)
	je	.L21820
	cmpq	$0, 72(%rax)
	jne	.L21820
	jmp	.L21778
.L21772:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L21772
	movq	constructor_type(%rip), %rdi
	jmp	.L30152
.L31157:
	movq	constructor_type(%rip), %rdi
	jmp	.L21763
.L31641:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L21389
.L32244:
	call	integer_zerop
	testl	%eax, %eax
	je	.L21759
	movq	constructor_type(%rip), %rbx
	cmpb	$18, 16(%rbx)
	je	.L21389
	cmpq	$0, (%r14)
	jne	.L21389
	jmp	.L21759
.L32243:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L21757
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L21757
.L32242:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r11
	xorl	%r12d, %r12d
	cmpq	%r11, %r8
	movq	%r8, %rbx
	movq	%r11, %r13
	jae	.L30147
.L21739:
	cmpl	$3, (%rbx)
	je	.L32269
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L21735:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L21739
.L30147:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L30149
.L21753:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32270
	cmpl	$2, %eax
	je	.L32271
.L21747:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r10d
	leaq	1(%rdx), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L21743
.L21752:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L21752
.L21743:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L21753
.L30149:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	jne	.L32272
.L21756:
	movq	global_trees(%rip), %r12
	jmp	.L21757
.L32272:
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L21756
.L32271:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L21747
.L32270:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L21743
.L32269:
	addl	$25, %r12d
	jmp	.L21735
.L21728:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L21731
	movq	constructor_type(%rip), %r9
	movzbl	16(%r9), %r8d
	subb	$20, %r8b
	cmpb	$1, %r8b
	ja	.L21727
	testb	$2, 53(%r14)
	je	.L21727
	cmpb	$25, 16(%r12)
	je	.L21727
.L21731:
	movl	$0, constructor_simple(%rip)
	jmp	.L21727
.L32241:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L21727
.L32240:
	movl	require_constant_value(%rip), %ebx
	testl	%ebx, %ebx
	je	.L21725
	movl	flag_isoc99(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L21725
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L21725
	movq	32(%r12), %r13
	movq	32(%r13), %rsi
	movq	104(%rsi), %r12
	jmp	.L21725
.L32239:
	movzbl	16(%r12), %ecx
	cmpb	$29, %cl
	je	.L32273
.L21639:
	movq	-264(%rbp), %rbx
	movq	128(%rdx), %rdi
	movq	128(%rbx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L31150
	movq	8(%r12), %rbx
.L21638:
	movzbl	16(%rbx), %r13d
	cmpl	$23, %r13d
	je	.L21641
	cmpl	$18, %r13d
	je	.L21641
	movzbl	16(%r12), %ecx
	cmpb	$32, %cl
	je	.L32274
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L21698
	cmpb	$34, %cl
	je	.L32275
.L21698:
	cmpb	$116, %cl
	movq	%r12, %rdx
	je	.L31156
	cmpb	$115, %cl
	je	.L32276
.L21707:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L21712
	cmpb	$49, %al
	je	.L21712
	cmpb	$50, %al
	je	.L21712
	cmpb	$101, %al
	je	.L21712
.L21711:
	cmpl	$10, %r13d
	je	.L32277
	cmpb	$39, %cl
	je	.L32278
.L21717:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L21720
	testb	$32, 17(%rbx)
	je	.L21721
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L21722
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%rbx), %r11d
	movzwl	60(%rdx), %ecx
	andl	$511, %r11d
	andl	$511, %ecx
	cmpl	%ecx, %r11d
	je	.L21722
.L21721:
	movq	integer_types+40(%rip), %rdi
.L31987:
	movq	%r12, %rsi
.L31988:
	call	convert
.L31633:
	movq	%rax, %rbx
.L31624:
	movq	global_trees(%rip), %r8
.L21696:
	movq	%rbx, %r12
	jmp	.L31634
.L21722:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31987
.L21720:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L21723
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L21723
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%rbx)
	je	.L32279
.L21723:
	cmpl	$5, %r13d
	je	.L32280
.L21724:
	movq	%r12, %rbx
	jmp	.L31624
.L32280:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31625:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L21696
.L32279:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31987
.L32278:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L21717
	movq	integer_types+40(%rip), %r15
	movq	40(%rdx), %rdi
	movzwl	60(%r15), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L21717
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L21721
	testb	$32, 17(%rbx)
	jne	.L21722
	jmp	.L21721
.L32277:
	movq	integer_types+40(%rip), %r9
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%r9), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L21716
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L21715
.L21716:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L21715:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31987
.L21712:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L21711
.L32276:
	movq	32(%r12), %rsi
	movq	8(%r12), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L21707
.L21710:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L32281
.L31156:
	movq	32(%r12), %rsi
	jmp	.L21710
.L32281:
	cmpb	$115, %cl
	jne	.L21707
	movq	32(%rsi), %r8
	movq	8(%r12), %rdi
	cmpq	%rdi, 8(%r8)
	movq	%r8, %rsi
	je	.L21710
	jmp	.L21707
.L32275:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	jne	.L21698
	cmpb	$51, 48(%r12)
	je	.L21698
	cmpq	$0, current_function_decl(%rip)
	je	.L21704
	movzbl	17(%r12), %ebx
	andb	$24, %bl
	cmpb	$16, %bl
	je	.L32282
.L21704:
	movq	%r12, %rsi
.L21705:
	movq	%rsi, %r12
	movq	8(%rsi), %rbx
.L31623:
	movzbl	16(%r12), %ecx
	jmp	.L21698
.L32282:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L21704
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L21704
	testb	$2, 17(%rax)
	je	.L21704
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L21705
	jmp	.L21704
.L32274:
	movq	104(%r12), %r12
	jmp	.L31623
.L21641:
	movzbl	16(%r12), %ecx
	xorl	%r15d, %r15d
	movl	%r13d, %edi
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L31152
	cmpb	$115, %cl
	je	.L32283
.L21643:
	movzbl	%cl, %r11d 
	movzbl	tree_code_type(%r11), %eax
	cmpb	$60, %al
	je	.L21649
	cmpb	$49, %al
	je	.L21649
	cmpb	$50, %al
	je	.L21649
	cmpb	$101, %al
	je	.L21649
.L21648:
	cmpl	$23, %edi
	je	.L32284
	cmpl	$18, %edi
	jne	.L21724
	movzbl	%cl, %r10d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r10), %eax
	movq	8(%rbx), %r13
	cmpb	$114, %al
	je	.L21654
	cmpb	$100, %al
	je	.L21654
.L21653:
	movzbl	17(%rbx), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %edi
	shrb	$3, %r10b
	shrb	$4, %dil
	andl	$1, %r10d
	andl	%edi, %r9d
	movzbl	16(%rbx), %edi
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rbx), %r10d
	movl	%r10d, %esi
	shrb	$5, %sil
	andl	$1, %esi
	sall	$2, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	cmpb	$20, %dil
	je	.L32285
.L21657:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L21656
	testl	%edx, %edx
	jne	.L21656
	testl	%r11d, %r11d
	je	.L21655
.L21656:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%ebx, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L32286
.L21658:
	leal	0(,%rcx,8), %r8d
	movq	%r13, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L21655:
	cmpb	$41, %cl
	je	.L32287
	cmpb	$47, %cl
	je	.L32288
	xorl	%ebx, %ebx
	testl	%r15d, %r15d
	je	.L32289
.L21692:
	movl	flag_isoc99(%rip), %r15d
	testl	%r15d, %r15d
	jne	.L21693
	testl	%ebx, %ebx
	je	.L21724
.L21693:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L32290
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L31988
.L32290:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L31625
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %ecx
	andb	$1, %cl
	addb	%cl, %cl
	andb	$-4, %r12b
	orb	%cl, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L31624
.L32289:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L21692
.L32288:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r15d
	movq	%r13, %rax
	cmpl	$23, %r15d
	je	.L21662
	cmpl	$18, %r15d
	je	.L21662
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L32291
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L21665
	cmpb	$34, %dl
	je	.L32292
.L21665:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L31154
	cmpb	$115, %dl
	je	.L32293
.L21674:
	movzbl	%dl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L21679
	cmpb	$49, %al
	je	.L21679
	cmpb	$50, %al
	je	.L21679
	cmpb	$101, %al
	je	.L21679
.L21678:
	cmpl	$10, %r15d
	je	.L32294
	cmpb	$39, %dl
	je	.L32295
.L21684:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L21687
	testb	$32, 17(%r13)
	je	.L21688
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L21689
	movq	integer_types+40(%rip), %r10
	movzwl	60(%r13), %esi
	movzwl	60(%r10), %r13d
	andl	$511, %esi
	andl	$511, %r13d
	cmpl	%r13d, %esi
	je	.L21689
.L21688:
	movq	integer_types+40(%rip), %rdi
.L31622:
	movq	%rbx, %rsi
	call	convert
.L21663:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31633
.L21689:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31622
.L21687:
	movl	flag_traditional(%rip), %edi
	testl	%edi, %edi
	je	.L21690
	movl	flag_allow_single_precision(%rip), %r8d
	testl	%r8d, %r8d
	jne	.L21690
	movq	global_trees+192(%rip), %r9
	cmpq	%r9, 128(%r13)
	je	.L32296
.L21690:
	cmpl	$5, %r15d
	je	.L32297
	movq	%rbx, %rax
	jmp	.L21663
.L32297:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L21663
.L32296:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31622
.L32295:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L21684
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L21684
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L21688
	testb	$32, 17(%r13)
	jne	.L21689
	jmp	.L21688
.L32294:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r15d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r15d, %r15d
	jne	.L21683
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L21682
.L21683:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L21682:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31622
.L21679:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L21678
.L32293:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L21674
.L21677:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L32298
.L31154:
	movq	32(%rbx), %rsi
	jmp	.L21677
.L32298:
	cmpb	$115, %dl
	jne	.L21674
	movq	32(%rsi), %r9
	movq	8(%rbx), %rdi
	cmpq	%rdi, 8(%r9)
	movq	%r9, %rsi
	je	.L21677
	jmp	.L21674
.L32292:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L21669
	cmpb	$51, 48(%rbx)
	je	.L21669
	cmpq	$0, current_function_decl(%rip)
	je	.L21671
	movzbl	17(%rbx), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L32299
.L21671:
	movq	%rbx, %rsi
.L21672:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L21669:
	movq	%rax, %r13
	jmp	.L21665
.L32299:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L21671
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L21671
	testb	$2, 17(%rax)
	je	.L21671
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L21672
	jmp	.L21671
.L32291:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L21665
.L21662:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L21663
.L32287:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L31988
.L32286:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L21658
.L32285:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L21657
.L21654:
	movzbl	17(%r12), %edi
	movl	$1, %r11d
	movl	%edi, %edx
	shrb	$3, %dil
	shrb	$4, %dl
	andl	%edi, %r11d
	andl	$1, %edx
	jmp	.L21653
.L32284:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31633
.L21649:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L21648
.L32283:
	movq	32(%r12), %rsi
	cmpq	%rbx, 8(%rsi)
	jne	.L21643
.L21647:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r15d
	cmpb	$116, %cl
	jne	.L32300
.L31152:
	movq	32(%r12), %rsi
	jmp	.L21647
.L32300:
	cmpb	$115, %cl
	jne	.L21643
	movq	32(%rsi), %rsi
	movq	8(%r12), %r8
	cmpq	%r8, 8(%rsi)
	je	.L21647
	jmp	.L21643
.L32273:
	movq	-264(%rbp), %rbx
	cmpb	$18, 16(%rbx)
	jne	.L21639
	movq	8(%rbx), %r9
	cmpb	$6, 16(%r9)
	jne	.L21639
	movq	global_trees(%rip), %r8
	jmp	.L21637
	.p2align 6,,7
.L21636:
	movq	%r12, %rdi
	movq	%rbx, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L21864
	movq	-872(%rbp), %r9
	movq	(%r9), %rax
	testq	%rax, %rax
	je	.L32301
.L31638:
	movq	%rax, -872(%rbp)
	jmp	.L21389
.L32301:
	movq	-872(%rbp), %r15
	movq	32(%r15), %r8
	movq	%r8, -904(%rbp)
	jmp	.L21390
.L21864:
	movq	-872(%rbp), %r11
	movq	8(%r11), %rax
	testq	%rax, %rax
	jne	.L31638
	movq	-872(%rbp), %rcx
	movq	16(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L21871
	cmpq	%rcx, 8(%rax)
	je	.L21874
.L21871:
	testq	%rax, %rax
	movq	%rax, -872(%rbp)
	je	.L21390
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r12, %rdi
	movq	%rax, %rsi
.L31989:
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L21389
	movq	-872(%rbp), %rdx
	movq	32(%rdx), %rcx
	movq	%rcx, -904(%rbp)
	jmp	.L21390
.L21874:
	movq	16(%rdx), %rax
	movq	%rdx, -872(%rbp)
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L21871
	movq	-872(%rbp), %rcx
	cmpq	%rcx, 8(%rax)
	je	.L21874
	jmp	.L21871
	.p2align 6,,7
.L32238:
	movq	-872(%rbp), %r11
	movq	constructor_unfilled_index(%rip), %rsi
	movq	32(%r11), %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L21393
	movq	-872(%rbp), %rbx
	movq	constructor_type(%rip), %r14
	movq	constructor_unfilled_index(%rip), %r15
	movq	40(%rbx), %r12
	movq	8(%r14), %r10
	movq	%r10, -256(%rbp)
	movq	8(%r12), %rbx
	movzbl	16(%rbx), %eax
	movq	%rbx, %rdx
	cmpb	$23, %al
	je	.L21395
	cmpb	$18, %al
	je	.L32302
.L31140:
	movq	global_trees(%rip), %r8
.L31618:
	movzbl	16(%r12), %ecx
.L21394:
	cmpb	$-86, %cl
	je	.L32303
.L21482:
	cmpq	%r8, %r12
	je	.L32304
	testb	$2, 17(%r12)
	jne	.L21485
	movl	$0, constructor_constant(%rip)
.L21484:
	movl	require_constant_value(%rip), %r14d
	testl	%r14d, %r14d
	je	.L21489
	testb	$2, 17(%r12)
	je	.L32305
.L21489:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L32306
.L21514:
	testq	%r15, %r15
	je	.L21516
	movq	8(%r15), %rax
	cmpq	global_trees(%rip), %rax
	je	.L21389
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L32307
.L21516:
	movq	-256(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%r12, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -880(%rbp)
	je	.L31641
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L32308
.L21520:
	cmpb	$20, 16(%rdi)
	je	.L32309
.L21541:
	cmpb	$21, 16(%rdi)
	je	.L32310
.L21540:
	testq	%r15, %r15
	je	.L21608
	cmpb	$25, 16(%r15)
	je	.L32311
.L21608:
	movq	constructor_elements(%rip), %rdx
	movq	-880(%rbp), %rsi
	movq	%r15, %rdi
	call	tree_cons
	movq	constructor_type(%rip), %r15
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r15), %eax
	movq	%r15, %rdx
	cmpb	$18, %al
	je	.L32071
	cmpb	$20, %al
	jne	.L21854
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L21853
	testb	$2, 53(%rax)
	je	.L21853
	cmpq	$0, 72(%rax)
	jne	.L21853
.L21616:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L21853
	testb	$2, 53(%rax)
	je	.L21853
	cmpq	$0, 72(%rax)
	jne	.L21853
	jmp	.L21616
.L32311:
	movq	%r15, %rdi
	call	copy_node
	movq	%rax, %r15
	jmp	.L21608
.L32310:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L21540
	movq	32(%rax), %rcx
	testb	$1, 17(%rcx)
	jne	.L32312
.L21583:
	movq	$0, constructor_elements(%rip)
	jmp	.L21540
.L32312:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r10
	xorl	%r12d, %r12d
	cmpq	%r10, %r8
	movq	%r8, %rbx
	movq	%r10, %r13
	jae	.L30137
.L21590:
	cmpl	$3, (%rbx)
	je	.L32313
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L21586:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L21590
.L30137:
	movslq	%r12d,%rdx
	movq	%r8, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30139
.L21604:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32314
	cmpl	$2, %eax
	je	.L32315
.L21598:
	movq	8(%r12), %rsi
	movzbl	(%rsi), %edi
	leaq	1(%rsi), %rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	je	.L21594
.L21603:
	movzbl	(%rcx), %r13d
	incq	%rbx
	incq	%rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	jne	.L21603
.L21594:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L21604
.L30139:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L21583
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L21583
.L32315:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L21598
.L32314:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L21594
.L32313:
	addl	$25, %r12d
	jmp	.L21586
.L32309:
	movl	constructor_incremental(%rip), %r9d
	testl	%r9d, %r9d
	je	.L21543
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, %r15
	je	.L21541
	testq	%rax, %rax
	jne	.L21544
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L21551
.L30131:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L32316
.L21571:
	cmpb	$18, 16(%rdi)
	je	.L32317
.L21577:
	movl	$0, constructor_incremental(%rip)
.L21543:
	movq	-880(%rbp), %rsi
	movq	%r15, %rdi
	jmp	.L31640
.L32317:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L32318
	movq	global_trees+136(%rip), %rax
.L31621:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L21577
.L32318:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31621
.L32316:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L21577
	testb	$2, 53(%rax)
	je	.L21577
	cmpq	$0, 72(%rax)
	jne	.L21577
.L21557:
	movq	constructor_unfilled_fields(%rip), %r8
	movq	(%r8), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L21577
	testb	$2, 53(%rax)
	je	.L21577
	cmpq	$0, 72(%rax)
	jne	.L21577
	jmp	.L21557
.L21551:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L21551
	movq	constructor_type(%rip), %rdi
	jmp	.L30131
.L21544:
	movq	%r15, %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r14
	call	bit_position
	movq	%r14, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L21543
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L21564
	cmpb	$18, %al
	jne	.L21543
.L21564:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L21570
.L30134:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L21571
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L21577
	testb	$2, 53(%rax)
	je	.L21577
	cmpq	$0, 72(%rax)
	jne	.L21577
.L21576:
	movq	constructor_unfilled_fields(%rip), %r11
	movq	(%r11), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L21577
	testb	$2, 53(%rax)
	je	.L21577
	cmpq	$0, 72(%rax)
	jne	.L21577
	jmp	.L21576
.L21570:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L21570
	movq	constructor_type(%rip), %rdi
	jmp	.L30134
.L32308:
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L21543
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31147
	movl	constructor_incremental(%rip), %esi
	testl	%esi, %esi
	je	.L21543
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L21543
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L21523
	cmpb	$18, %al
	jne	.L21543
.L21523:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L21529
.L30128:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L21571
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L21577
	testb	$2, 53(%rax)
	je	.L21577
	cmpq	$0, 72(%rax)
	jne	.L21577
.L21535:
	movq	constructor_unfilled_fields(%rip), %r13
	movq	(%r13), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L21577
	testb	$2, 53(%rax)
	je	.L21577
	cmpq	$0, 72(%rax)
	jne	.L21577
	jmp	.L21535
.L21529:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L21529
	movq	constructor_type(%rip), %rdi
	jmp	.L30128
.L31147:
	movq	constructor_type(%rip), %rdi
	jmp	.L21520
.L32307:
	call	integer_zerop
	testl	%eax, %eax
	je	.L21516
	movq	constructor_type(%rip), %rbx
	cmpb	$18, 16(%rbx)
	je	.L21389
	cmpq	$0, (%r15)
	jne	.L21389
	jmp	.L21516
.L32306:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L21514
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L21514
.L32305:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r11
	xorl	%r12d, %r12d
	cmpq	%r11, %r8
	movq	%r8, %rbx
	movq	%r11, %r13
	jae	.L30123
.L21496:
	cmpl	$3, (%rbx)
	je	.L32319
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L21492:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L21496
.L30123:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30125
.L21510:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32320
	cmpl	$2, %eax
	je	.L32321
.L21504:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r10d
	leaq	1(%rdx), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L21500
.L21509:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L21509
.L21500:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L21510
.L30125:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L32322
.L21513:
	movq	global_trees(%rip), %r12
	jmp	.L21514
.L32322:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L21513
.L32321:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L21504
.L32320:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L21500
.L32319:
	addl	$25, %r12d
	jmp	.L21492
.L21485:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L21488
	movq	constructor_type(%rip), %r9
	movzbl	16(%r9), %r8d
	subb	$20, %r8b
	cmpb	$1, %r8b
	ja	.L21484
	testb	$2, 53(%r15)
	je	.L21484
	cmpb	$25, 16(%r12)
	je	.L21484
.L21488:
	movl	$0, constructor_simple(%rip)
	jmp	.L21484
.L32304:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L21484
.L32303:
	movl	require_constant_value(%rip), %ebx
	testl	%ebx, %ebx
	je	.L21482
	movl	flag_isoc99(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L21482
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L21482
	movq	32(%r12), %r13
	movq	32(%r13), %rsi
	movq	104(%rsi), %r12
	jmp	.L21482
.L32302:
	movzbl	16(%r12), %ecx
	cmpb	$29, %cl
	je	.L32323
.L21396:
	movq	128(%rdx), %rdi
	movq	-256(%rbp), %rdx
	movq	128(%rdx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L31140
	movq	8(%r12), %rbx
.L21395:
	movzbl	16(%rbx), %r13d
	cmpl	$23, %r13d
	je	.L21398
	cmpl	$18, %r13d
	je	.L21398
	movzbl	16(%r12), %ecx
	cmpb	$32, %cl
	je	.L32324
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L21455
	cmpb	$34, %cl
	je	.L32325
.L21455:
	cmpb	$116, %cl
	movq	%r12, %rdx
	je	.L31146
	cmpb	$115, %cl
	je	.L32326
.L21464:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L21469
	cmpb	$49, %al
	je	.L21469
	cmpb	$50, %al
	je	.L21469
	cmpb	$101, %al
	je	.L21469
.L21468:
	cmpl	$10, %r13d
	je	.L32327
	cmpb	$39, %cl
	je	.L32328
.L21474:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L21477
	testb	$32, 17(%rbx)
	je	.L21478
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L21479
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%rbx), %r11d
	movzwl	60(%rdx), %ecx
	andl	$511, %r11d
	andl	$511, %ecx
	cmpl	%ecx, %r11d
	je	.L21479
.L21478:
	movq	integer_types+40(%rip), %rdi
.L31985:
	movq	%r12, %rsi
.L31986:
	call	convert
.L31617:
	movq	%rax, %rbx
.L31608:
	movq	global_trees(%rip), %r8
.L21453:
	movq	%rbx, %r12
	jmp	.L31618
.L21479:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31985
.L21477:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L21480
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L21480
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%rbx)
	je	.L32329
.L21480:
	cmpl	$5, %r13d
	je	.L32330
.L21481:
	movq	%r12, %rbx
	jmp	.L31608
.L32330:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31609:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L21453
.L32329:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31985
.L32328:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L21474
	movq	integer_types+40(%rip), %r14
	movq	40(%rdx), %rdi
	movzwl	60(%r14), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L21474
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L21478
	testb	$32, 17(%rbx)
	jne	.L21479
	jmp	.L21478
.L32327:
	movq	integer_types+40(%rip), %r9
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%r9), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L21473
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L21472
.L21473:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L21472:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31985
.L21469:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L21468
.L32326:
	movq	32(%r12), %rsi
	movq	8(%r12), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L21464
.L21467:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L32331
.L31146:
	movq	32(%r12), %rsi
	jmp	.L21467
.L32331:
	cmpb	$115, %cl
	jne	.L21464
	movq	32(%rsi), %r8
	movq	8(%r12), %rdi
	cmpq	%rdi, 8(%r8)
	movq	%r8, %rsi
	je	.L21467
	jmp	.L21464
.L32325:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	jne	.L21455
	cmpb	$51, 48(%r12)
	je	.L21455
	cmpq	$0, current_function_decl(%rip)
	je	.L21461
	movzbl	17(%r12), %ebx
	andb	$24, %bl
	cmpb	$16, %bl
	je	.L32332
.L21461:
	movq	%r12, %rsi
.L21462:
	movq	%rsi, %r12
	movq	8(%rsi), %rbx
.L31607:
	movzbl	16(%r12), %ecx
	jmp	.L21455
.L32332:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L21461
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L21461
	testb	$2, 17(%rax)
	je	.L21461
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L21462
	jmp	.L21461
.L32324:
	movq	104(%r12), %r12
	jmp	.L31607
.L21398:
	movzbl	16(%r12), %ecx
	xorl	%r14d, %r14d
	movl	%r13d, %edi
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L31142
	cmpb	$115, %cl
	je	.L32333
.L21400:
	movzbl	%cl, %r9d 
	movzbl	tree_code_type(%r9), %eax
	cmpb	$60, %al
	je	.L21406
	cmpb	$49, %al
	je	.L21406
	cmpb	$50, %al
	je	.L21406
	cmpb	$101, %al
	je	.L21406
.L21405:
	cmpl	$23, %edi
	je	.L32334
	cmpl	$18, %edi
	jne	.L21481
	movzbl	%cl, %edi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rdi), %eax
	movq	8(%rbx), %r13
	cmpb	$114, %al
	je	.L21411
	cmpb	$100, %al
	je	.L21411
.L21410:
	movzbl	17(%rbx), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %edi
	shrb	$3, %r10b
	shrb	$4, %dil
	andl	$1, %r10d
	andl	%edi, %r9d
	movzbl	16(%rbx), %edi
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rbx), %r10d
	movl	%r10d, %esi
	shrb	$5, %sil
	andl	$1, %esi
	sall	$2, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	cmpb	$20, %dil
	je	.L32335
.L21414:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L21413
	testl	%edx, %edx
	jne	.L21413
	testl	%r11d, %r11d
	je	.L21412
.L21413:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%ebx, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L32336
.L21415:
	leal	0(,%rcx,8), %r8d
	movq	%r13, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L21412:
	cmpb	$41, %cl
	je	.L32337
	cmpb	$47, %cl
	je	.L32338
	xorl	%ebx, %ebx
	testl	%r14d, %r14d
	je	.L32339
.L21449:
	movl	flag_isoc99(%rip), %r14d
	testl	%r14d, %r14d
	jne	.L21450
	testl	%ebx, %ebx
	je	.L21481
.L21450:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L32340
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L31986
.L32340:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L31609
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %ecx
	andb	$1, %cl
	addb	%cl, %cl
	andb	$-4, %r12b
	orb	%cl, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L31608
.L32339:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L21449
.L32338:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L21419
	cmpl	$18, %r14d
	je	.L21419
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L32341
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L21422
	cmpb	$34, %dl
	je	.L32342
.L21422:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L31144
	cmpb	$115, %dl
	je	.L32343
.L21431:
	movzbl	%dl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L21436
	cmpb	$49, %al
	je	.L21436
	cmpb	$50, %al
	je	.L21436
	cmpb	$101, %al
	je	.L21436
.L21435:
	cmpl	$10, %r14d
	je	.L32344
	cmpb	$39, %dl
	je	.L32345
.L21441:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L21444
	testb	$32, 17(%r13)
	je	.L21445
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L21446
	movq	integer_types+40(%rip), %r10
	movzwl	60(%r13), %esi
	movzwl	60(%r10), %r13d
	andl	$511, %esi
	andl	$511, %r13d
	cmpl	%r13d, %esi
	je	.L21446
.L21445:
	movq	integer_types+40(%rip), %rdi
.L31606:
	movq	%rbx, %rsi
	call	convert
.L21420:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31617
.L21446:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31606
.L21444:
	movl	flag_traditional(%rip), %edi
	testl	%edi, %edi
	je	.L21447
	movl	flag_allow_single_precision(%rip), %r8d
	testl	%r8d, %r8d
	jne	.L21447
	movq	global_trees+192(%rip), %r9
	cmpq	%r9, 128(%r13)
	je	.L32346
.L21447:
	cmpl	$5, %r14d
	je	.L32347
	movq	%rbx, %rax
	jmp	.L21420
.L32347:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L21420
.L32346:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31606
.L32345:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L21441
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L21441
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L21445
	testb	$32, 17(%r13)
	jne	.L21446
	jmp	.L21445
.L32344:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L21440
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L21439
.L21440:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L21439:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31606
.L21436:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L21435
.L32343:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L21431
.L21434:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L32348
.L31144:
	movq	32(%rbx), %rsi
	jmp	.L21434
.L32348:
	cmpb	$115, %dl
	jne	.L21431
	movq	32(%rsi), %r9
	movq	8(%rbx), %rdi
	cmpq	%rdi, 8(%r9)
	movq	%r9, %rsi
	je	.L21434
	jmp	.L21431
.L32342:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L21426
	cmpb	$51, 48(%rbx)
	je	.L21426
	cmpq	$0, current_function_decl(%rip)
	je	.L21428
	movzbl	17(%rbx), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L32349
.L21428:
	movq	%rbx, %rsi
.L21429:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L21426:
	movq	%rax, %r13
	jmp	.L21422
.L32349:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L21428
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L21428
	testb	$2, 17(%rax)
	je	.L21428
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L21429
	jmp	.L21428
.L32341:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L21422
.L21419:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L21420
.L32337:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L31986
.L32336:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L21415
.L32335:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L21414
.L21411:
	movzbl	17(%r12), %r8d
	movl	$1, %r11d
	movl	%r8d, %edx
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	%r8d, %r11d
	andl	$1, %edx
	jmp	.L21410
.L32334:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31617
.L21406:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L21405
.L32333:
	movq	32(%r12), %rsi
	cmpq	%rbx, 8(%rsi)
	jne	.L21400
.L21404:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r14d
	cmpb	$116, %cl
	jne	.L32350
.L31142:
	movq	32(%r12), %rsi
	jmp	.L21404
.L32350:
	cmpb	$115, %cl
	jne	.L21400
	movq	32(%rsi), %rsi
	movq	8(%r12), %r13
	cmpq	%r13, 8(%rsi)
	je	.L21404
	jmp	.L21400
.L32323:
	movq	-256(%rbp), %rbx
	cmpb	$18, 16(%rbx)
	jne	.L21396
	movq	8(%rbx), %rsi
	cmpb	$6, 16(%rsi)
	jne	.L21396
	movq	global_trees(%rip), %r8
	jmp	.L21394
.L21393:
	movq	-872(%rbp), %r9
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%r9), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L21621
	movq	-872(%rbp), %r8
	movq	(%r8), %rax
	testq	%rax, %rax
	jne	.L31638
	movq	-872(%rbp), %r14
	movq	32(%r14), %rax
	movq	%rax, -904(%rbp)
	jmp	.L21390
.L21621:
	movq	-872(%rbp), %r11
	movq	8(%r11), %rax
	testq	%rax, %rax
	jne	.L31638
	movq	-872(%rbp), %rsi
	movq	16(%rsi), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L21628
	cmpq	%rsi, 8(%rax)
	je	.L21631
.L21628:
	testq	%rax, %rax
	movq	%rax, -872(%rbp)
	je	.L21390
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	jmp	.L31989
.L21631:
	movq	16(%rdx), %rax
	movq	%rdx, -872(%rbp)
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L21628
	movq	-872(%rbp), %r10
	cmpq	%r10, 8(%rax)
	je	.L21631
	jmp	.L21628
.L32237:
	movq	constructor_unfilled_fields(%rip), %rax
	testq	%rax, %rax
	je	.L21351
.L31357:
	movq	40(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L32351
.L21356:
	movq	(%rax), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	jne	.L31357
	jmp	.L21351
.L32351:
	call	integer_zerop
	testl	%eax, %eax
	je	.L32352
	movq	constructor_unfilled_fields(%rip), %rax
	jmp	.L21356
.L32352:
	movq	constructor_unfilled_fields(%rip), %rax
	testq	%rax, %rax
	je	.L21351
	movl	constructor_designated(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L21351
	movq	72(%rax), %rax
	movl	$.LC159, %r12d
	testq	%rax, %rax
	je	.L21359
	movq	32(%rax), %r12
.L21359:
	movq	spelling(%rip), %rcx
	movq	spelling_base(%rip), %rdi
	movl	spelling_size(%rip), %eax
	movq	%rcx, %r15
	subq	%rdi, %r15
	movq	%r15, %rbx
	shrq	$4, %rbx
	cmpl	%eax, %ebx
	jl	.L21360
	addl	$10, %eax
	testq	%rdi, %rdi
	movl	%eax, spelling_size(%rip)
	jne	.L21361
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L31605:
	movslq	%ebx,%rcx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rcx
	addq	spelling_base(%rip), %rcx
	movq	%rcx, spelling(%rip)
.L21360:
	movq	%r12, 8(%rcx)
	movl	$2, (%rcx)
	movl	$.LC42, %edi
	addq	$16, %rcx
	xorl	%eax, %eax
	movl	$.LC175, %esi
	movq	%rcx, spelling(%rip)
	xorl	%r12d, %r12d
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdi
	cmpq	%rdi, %r8
	movq	%r8, %rbx
	movq	%rdi, %r13
	jae	.L30114
.L21370:
	cmpl	$3, (%rbx)
	je	.L32353
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L21366:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L21370
.L30114:
	movslq	%r12d,%rdx
	movq	%r8, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30116
.L21384:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32354
	cmpl	$2, %eax
	je	.L32355
.L21378:
	movq	8(%r12), %r9
	movzbl	(%r9), %r13d
	leaq	1(%r9), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L21374
.L21383:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L21383
.L21374:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L21384
.L30116:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L32356
.L21387:
	movslq	constructor_depth(%rip),%r12
	salq	$4, %r12
	addq	spelling_base(%rip), %r12
	movq	%r12, spelling(%rip)
	jmp	.L21351
.L32356:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L21387
.L32355:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L21378
.L32354:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L21374
.L32353:
	addl	$25, %r12d
	jmp	.L21366
.L21361:
	movslq	%eax,%rsi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L31605
.L32236:
	movq	24(%rax), %rax
	testq	%rax, %rax
	je	.L21294
	cmpq	$0, 112(%rax)
	jne	.L21294
	movq	constructor_unfilled_index(%rip), %rdi
	call	integer_zerop
	testl	%eax, %eax
	jne	.L31604
	movq	constructor_type(%rip), %rbx
	cmpq	$0, 32(%rbx)
	jne	.L28037
	cmpl	$2, constructor_depth(%rip)
	jg	.L32357
	movl	pedantic(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L32358
.L21323:
	movq	constructor_fields(%rip), %r10
	cmpq	$0, (%r10)
	je	.L21294
.L31604:
	movq	$0, constructor_type(%rip)
	jmp	.L21294
.L32358:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC174, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L30109
.L21331:
	cmpl	$3, (%rbx)
	je	.L32359
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L21327:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L21331
.L30109:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30111
.L21345:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32360
	cmpl	$2, %eax
	je	.L32361
.L21339:
	movq	8(%r12), %r8
	movzbl	(%r8), %r9d
	leaq	1(%r8), %rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	je	.L21335
.L21344:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L21344
.L21335:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L21345
.L30111:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L21323
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L21323
.L32361:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L21339
.L32360:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L21335
.L32359:
	addl	$25, %r12d
	jmp	.L21327
.L32357:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC173, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r15
	xorl	%r12d, %r12d
	cmpq	%r15, %r8
	movq	%r8, %rbx
	movq	%r15, %r13
	jae	.L30104
.L21305:
	cmpl	$3, (%rbx)
	je	.L32362
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L21301:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L21305
.L30104:
	movslq	%r12d,%rsi
	movq	%r8, %r12
	addq	$16, %rsi
	andq	$-16, %rsi
	subq	%rsi, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30106
.L21319:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32363
	cmpl	$2, %eax
	je	.L32364
.L21313:
	movq	8(%r12), %rdi
	movzbl	(%rdi), %r13d
	leaq	1(%rdi), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L21309
.L21318:
	movzbl	(%rcx), %edx
	incq	%rbx
	incq	%rcx
	testb	%dl, %dl
	movb	%dl, (%rbx)
	jne	.L21318
.L21309:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L21319
.L30106:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L21323
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L21323
.L32364:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L21313
.L32363:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L21309
.L32362:
	addl	$25, %r12d
	jmp	.L21301
.L28037:
	movl	$.LC68, %edi
	movl	$5520, %esi
	movl	$.LC172, %edx
	jmp	.L31944
.L32091:
	movl	$.LC68, %edi
	movl	$6838, %esi
.L32044:
	movl	$.LC171, %edx
	jmp	.L31944
.L32235:
	movq	-928(%rbp), %rbx
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	movq	32(%rbx), %rsi
	call	size_binop
	movq	-928(%rbp), %r14
	movq	%rax, %rdi
	movq	40(%r14), %rsi
	movq	%rax, 32(%r14)
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L21958
	movq	-928(%rbp), %rsi
	movl	$1, %eax
	cmpq	$0, 8(%rsi)
	cmovne	-916(%rbp), %eax
	movl	%eax, -916(%rbp)
.L21958:
	movq	-928(%rbp), %r8
	movl	-916(%rbp), %r12d
	movq	32(%r8), %rax
	movq	48(%r8), %r9
	testl	%r12d, %r12d
	movq	%rax, constructor_index(%rip)
	movq	%r9, constructor_fields(%rip)
	je	.L21955
	cmpq	$0, 40(%r8)
	je	.L21955
	cmpq	24(%r8), %rax
	je	.L32365
.L21955:
	movq	-928(%rbp), %r11
	movq	(%r11), %rax
	testq	%rax, %rax
	movq	%rax, -928(%rbp)
	je	.L21953
	movl	$2, %edi
	call	push_init_level
	movq	-928(%rbp), %rbx
	movq	constructor_stack(%rip), %r15
	movq	40(%rbx), %rsi
	movq	%r15, 16(%rbx)
	testq	%rsi, %rsi
	je	.L21958
	movq	32(%rbx), %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L21958
	movq	24(%rbx), %rcx
	movq	%rcx, 32(%rbx)
	jmp	.L21958
.L21953:
	movl	-916(%rbp), %r10d
	testl	%r10d, %r10d
	jne	.L21960
	movq	-216(%rbp), %rdi
	movq	%rdi, constructor_range_stack(%rip)
	jmp	.L21960
.L32365:
	movl	$0, -916(%rbp)
	movq	$0, 8(%r8)
	jmp	.L21955
.L21280:
	xorl	%edi, %edi
	jmp	.L21281
.L32234:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC176, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L30092
.L21228:
	cmpl	$3, (%rbx)
	je	.L32366
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L21224:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L21228
.L30092:
	movslq	%r12d,%r15
	movq	%r8, %r12
	addq	$16, %r15
	andq	$-16, %r15
	subq	%r15, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30094
.L21242:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32367
	cmpl	$2, %eax
	je	.L32368
.L21236:
	movq	8(%r12), %r13
	movzbl	(%r13), %esi
	leaq	1(%r13), %rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	je	.L21232
.L21241:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L21241
.L21232:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L21242
.L30094:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L21221
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L21221
.L32368:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L21236
.L32367:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L21232
.L32366:
	addl	$25, %r12d
	jmp	.L21224
.L21220:
	cmpq	$0, (%rax)
	jne	.L32369
.L21247:
	movq	32(%rax), %rax
.L31603:
	movq	%rax, -864(%rbp)
	jmp	.L21216
.L32369:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC177, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdx
	xorl	%r12d, %r12d
	cmpq	%rdx, %r8
	movq	%r8, %rbx
	movq	%rdx, %r13
	jae	.L30097
.L21254:
	cmpl	$3, (%rbx)
	je	.L32370
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L21250:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L21254
.L30097:
	movslq	%r12d,%r9
	movq	%r8, %r12
	addq	$16, %r9
	andq	$-16, %r9
	subq	%r9, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30099
.L21268:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32371
	cmpl	$2, %eax
	je	.L32372
.L21262:
	movq	8(%r12), %r11
	movzbl	(%r11), %r8d
	leaq	1(%r11), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L21258
.L21267:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L21267
.L21258:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L21268
.L30099:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L32373
.L21271:
	movq	constructor_elements(%rip), %rax
	jmp	.L21247
.L32373:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L21271
.L32372:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L21262
.L32371:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L21258
.L32370:
	addl	$25, %r12d
	jmp	.L21250
.L21219:
	movl	constructor_erroneous(%rip), %r14d
	testl	%r14d, %r14d
	je	.L21274
	movq	global_trees(%rip), %rbx
	movq	%rbx, -864(%rbp)
	jmp	.L21216
.L21274:
	movq	constructor_elements(%rip), %rdi
	call	nreverse
	xorl	%edx, %edx
	movq	constructor_type(%rip), %rsi
	movq	%rax, %rcx
	movl	$46, %edi
	xorl	%eax, %eax
	call	build
	movl	constructor_constant(%rip), %r15d
	movq	%rax, -864(%rbp)
	testl	%r15d, %r15d
	je	.L21216
	orb	$2, 17(%rax)
	movl	constructor_constant(%rip), %r12d
	testl	%r12d, %r12d
	je	.L21216
	movl	constructor_simple(%rip), %eax
	testl	%eax, %eax
	je	.L21216
	movq	-864(%rbp), %rsi
	orb	$4, 18(%rsi)
	jmp	.L21216
	.p2align 6,,7
.L32232:
	xorl	%edi, %edi
	call	output_pending_init_elements
	jmp	.L20721
.L32231:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L21185
	.p2align 6,,7
.L32230:
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L21185
	testb	$2, 53(%rax)
	je	.L21185
	cmpq	$0, 72(%rax)
	jne	.L21185
.L21191:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L21185
	testb	$2, 53(%rax)
	je	.L21185
	cmpq	$0, 72(%rax)
	jne	.L21185
	jmp	.L21191
.L32067:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L21185
.L32229:
	movq	%r14, %rdi
	call	copy_node
	movq	%rax, -848(%rbp)
	jmp	.L21183
	.p2align 6,,7
.L32228:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L21115
	movq	32(%rax), %rdi
	testb	$1, 17(%rdi)
	jne	.L32374
.L21158:
	movq	$0, constructor_elements(%rip)
	jmp	.L21115
.L32374:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdx
	xorl	%r12d, %r12d
	cmpq	%rdx, %r8
	movq	%r8, %rbx
	movq	%rdx, %r13
	jae	.L30085
.L21165:
	cmpl	$3, (%rbx)
	je	.L32375
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L21161:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L21165
.L30085:
	movslq	%r12d,%r9
	movq	%r8, %r12
	addq	$16, %r9
	andq	$-16, %r9
	subq	%r9, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L30087
.L21179:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32376
	cmpl	$2, %eax
	je	.L32377
.L21173:
	movq	8(%r12), %r11
	movzbl	(%r11), %r8d
	leaq	1(%r11), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L21169
.L21178:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L21178
.L21169:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L21179
.L30087:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	je	.L21158
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L21158
.L32377:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L21173
.L32376:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L21169
.L32375:
	addl	$25, %r12d
	jmp	.L21161
	.p2align 6,,7
.L32227:
	movl	constructor_incremental(%rip), %esi
	testl	%esi, %esi
	je	.L21118
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, %r14
	je	.L21116
	testq	%rax, %rax
	jne	.L21119
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L21126
.L30079:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L32378
.L21146:
	cmpb	$18, 16(%rdi)
	je	.L32379
.L21152:
	movl	$0, constructor_incremental(%rip)
.L21118:
	movq	%r14, %rdi
	movq	-840(%rbp), %rsi
.L31600:
	call	add_pending_init
	jmp	.L20721
.L32379:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L32380
	movq	global_trees+136(%rip), %rax
.L31597:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L21152
.L32380:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31597
.L32378:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L21152
	testb	$2, 53(%rax)
	je	.L21152
	cmpq	$0, 72(%rax)
	jne	.L21152
.L21132:
	movq	constructor_unfilled_fields(%rip), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L21152
	testb	$2, 53(%rax)
	je	.L21152
	cmpq	$0, 72(%rax)
	jne	.L21152
	jmp	.L21132
	.p2align 6,,7
.L21126:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L21126
	movq	constructor_type(%rip), %rdi
	jmp	.L30079
.L21119:
	movq	%r14, %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L21118
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L21139
	cmpb	$18, %al
	jne	.L21118
.L21139:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L21145
.L30082:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L21146
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L21152
	testb	$2, 53(%rax)
	je	.L21152
	cmpq	$0, 72(%rax)
	jne	.L21152
.L21151:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L21152
	testb	$2, 53(%rax)
	je	.L21152
	cmpq	$0, 72(%rax)
	jne	.L21152
	jmp	.L21151
.L21145:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L21145
	movq	constructor_type(%rip), %rdi
	jmp	.L30082
	.p2align 6,,7
.L32226:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L21118
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r14, %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31136
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L21118
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r14, %rdi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L21118
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L21098
	cmpb	$18, %al
	jne	.L21118
.L21098:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L21104
.L30076:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L21146
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L21152
	testb	$2, 53(%rax)
	je	.L21152
	cmpq	$0, 72(%rax)
	jne	.L21152
.L21110:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L21152
	testb	$2, 53(%rax)
	je	.L21152
	cmpq	$0, 72(%rax)
	jne	.L21152
	jmp	.L21110
.L21104:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L21104
	movq	constructor_type(%rip), %rdi
	jmp	.L30076
.L31136:
	movq	constructor_type(%rip), %rdi
	jmp	.L21095
	.p2align 6,,7
.L31601:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L20721
.L32225:
	call	integer_zerop
	testl	%eax, %eax
	je	.L21091
	movq	constructor_type(%rip), %rbx
	cmpb	$18, 16(%rbx)
	je	.L20721
	cmpq	$0, (%r14)
	jne	.L20721
	jmp	.L21091
	.p2align 6,,7
.L32224:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L21089
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L21089
.L32223:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L30071
.L21071:
	cmpl	$3, (%rbx)
	je	.L32381
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L21067:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L21071
.L30071:
	movslq	%r12d,%r9
	movq	%r8, %r12
	addq	$16, %r9
	andq	$-16, %r9
	subq	%r9, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L30073
.L21085:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32382
	cmpl	$2, %eax
	je	.L32383
.L21079:
	movq	8(%r12), %r11
	movzbl	(%r11), %r8d
	leaq	1(%r11), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L21075
.L21084:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L21084
.L21075:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L21085
.L30073:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	jne	.L32384
.L21088:
	movq	global_trees(%rip), %r12
	jmp	.L21089
.L32384:
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L21088
	.p2align 6,,7
.L32383:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L21079
.L32382:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L21075
.L32381:
	addl	$25, %r12d
	jmp	.L21067
.L21060:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L21063
	movq	constructor_type(%rip), %rdx
	movzbl	16(%rdx), %edi
	subb	$20, %dil
	cmpb	$1, %dil
	ja	.L21059
	testb	$2, 53(%r14)
	je	.L21059
	cmpb	$25, 16(%r12)
	je	.L21059
.L21063:
	movl	$0, constructor_simple(%rip)
	jmp	.L21059
.L32222:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L21059
.L32221:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L21057
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L21057
	xorl	%esi, %esi
	testl	%esi, %esi
	je	.L21057
	movq	32(%r12), %r13
	movq	32(%r13), %rcx
	movq	104(%rcx), %r12
	jmp	.L21057
	.p2align 6,,7
.L32220:
	movzbl	16(%r12), %ecx
	cmpb	$29, %cl
	je	.L32385
.L20971:
	movq	-240(%rbp), %rbx
	movq	128(%rdx), %rdi
	movq	128(%rbx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L31129
	movq	8(%r12), %rbx
.L20970:
	movzbl	16(%rbx), %r13d
	cmpl	$23, %r13d
	je	.L20973
	cmpl	$18, %r13d
	je	.L20973
	movzbl	16(%r12), %ecx
	cmpb	$32, %cl
	je	.L32386
	movl	optimize(%rip), %r9d
	testl	%r9d, %r9d
	je	.L21030
	cmpb	$34, %cl
	je	.L32387
.L21030:
	cmpb	$116, %cl
	movq	%r12, %rdx
	je	.L31135
	cmpb	$115, %cl
	je	.L32388
.L21039:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L21044
	cmpb	$49, %al
	je	.L21044
	cmpb	$50, %al
	je	.L21044
	cmpb	$101, %al
	je	.L21044
.L21043:
	cmpl	$10, %r13d
	je	.L32389
	cmpb	$39, %cl
	je	.L32390
.L21049:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L21052
	testb	$32, 17(%rbx)
	je	.L21053
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L21054
	movzwl	60(%rbx), %r8d
	movq	integer_types+40(%rip), %rbx
	movzwl	60(%rbx), %r9d
	andl	$511, %r8d
	andl	$511, %r9d
	cmpl	%r9d, %r8d
	je	.L21054
.L21053:
	movq	integer_types+40(%rip), %rdi
.L31982:
	movq	%r12, %rsi
.L31983:
	call	convert
.L31593:
	movq	%rax, %rbx
.L31584:
	movq	global_trees(%rip), %r8
.L21028:
	movq	%rbx, %r12
	jmp	.L31594
.L21054:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31982
.L21052:
	movl	flag_traditional(%rip), %r15d
	testl	%r15d, %r15d
	je	.L21055
	movl	flag_allow_single_precision(%rip), %r11d
	testl	%r11d, %r11d
	jne	.L21055
	movq	global_trees+192(%rip), %r10
	cmpq	%r10, 128(%rbx)
	je	.L32391
.L21055:
	cmpl	$5, %r13d
	je	.L32392
.L21056:
	movq	%r12, %rbx
	jmp	.L31584
.L32392:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31585:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L21028
.L32391:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31982
.L32390:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L21049
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%rdi), %esi
	movq	40(%rdx), %rdi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L21049
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	je	.L21053
	testb	$32, 17(%rbx)
	jne	.L21054
	jmp	.L21053
.L32389:
	movq	integer_types+40(%rip), %r13
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %ecx
	movzwl	60(%r13), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%ecx, %ecx
	jne	.L21048
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L21047
.L21048:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L21047:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31982
	.p2align 6,,7
.L21044:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L21043
.L32388:
	movq	32(%r12), %rsi
	movq	8(%r12), %r15
	cmpq	%r15, 8(%rsi)
	jne	.L21039
.L21042:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L32393
.L31135:
	movq	32(%r12), %rsi
	jmp	.L21042
.L32393:
	cmpb	$115, %cl
	jne	.L21039
	movq	32(%rsi), %r10
	movq	8(%r12), %r11
	cmpq	%r11, 8(%r10)
	movq	%r10, %rsi
	je	.L21042
	jmp	.L21039
.L32387:
	movl	pedantic(%rip), %r8d
	testl	%r8d, %r8d
	jne	.L21030
	cmpb	$51, 48(%r12)
	je	.L21030
	cmpq	$0, current_function_decl(%rip)
	je	.L21036
	movzbl	17(%r12), %ebx
	andb	$24, %bl
	cmpb	$16, %bl
	je	.L32394
.L21036:
	movq	%r12, %rsi
.L21037:
	movq	%rsi, %r12
	movq	8(%rsi), %rbx
.L31583:
	movzbl	16(%r12), %ecx
	jmp	.L21030
.L32394:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L21036
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L21036
	testb	$2, 17(%rax)
	je	.L21036
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L21037
	jmp	.L21036
.L32386:
	movq	104(%r12), %r12
	jmp	.L31583
	.p2align 6,,7
.L20973:
	movzbl	16(%r12), %ecx
	xorl	%r15d, %r15d
	movl	%r13d, %edi
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L31131
	cmpb	$115, %cl
	je	.L32395
.L20975:
	movzbl	%cl, %r11d 
	movzbl	tree_code_type(%r11), %eax
	cmpb	$60, %al
	je	.L20981
	cmpb	$49, %al
	je	.L20981
	cmpb	$50, %al
	je	.L20981
	cmpb	$101, %al
	je	.L20981
.L20980:
	cmpl	$23, %edi
	je	.L32396
	cmpl	$18, %edi
	jne	.L21056
	movzbl	%cl, %r10d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r10), %eax
	movq	8(%rbx), %r13
	cmpb	$114, %al
	je	.L20986
	cmpb	$100, %al
	je	.L20986
.L20985:
	movzbl	17(%rbx), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %edi
	shrb	$3, %r10b
	shrb	$4, %dil
	andl	$1, %r10d
	andl	%edi, %r9d
	movzbl	16(%rbx), %edi
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rbx), %r10d
	movl	%r10d, %esi
	shrb	$5, %sil
	andl	$1, %esi
	sall	$2, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	cmpb	$20, %dil
	je	.L32397
.L20989:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L20988
	testl	%edx, %edx
	jne	.L20988
	testl	%r11d, %r11d
	je	.L20987
.L20988:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%ebx, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L32398
.L20990:
	leal	0(,%rcx,8), %r8d
	movq	%r13, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L20987:
	cmpb	$41, %cl
	je	.L32399
	cmpb	$47, %cl
	je	.L32400
	xorl	%ebx, %ebx
	testl	%r15d, %r15d
	je	.L32401
.L21024:
	movl	flag_isoc99(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L21025
	testl	%ebx, %ebx
	je	.L21056
.L21025:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L32402
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L31983
.L32402:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L31585
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %edi
	andb	$1, %dil
	addb	%dil, %dil
	andb	$-4, %r12b
	orb	%dil, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L31584
.L32401:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L21024
.L32400:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r15d
	movq	%r13, %rax
	cmpl	$23, %r15d
	je	.L20994
	cmpl	$18, %r15d
	je	.L20994
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L32403
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L20997
	cmpb	$34, %dl
	je	.L32404
.L20997:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L31133
	cmpb	$115, %dl
	je	.L32405
.L21006:
	movzbl	%dl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L21011
	cmpb	$49, %al
	je	.L21011
	cmpb	$50, %al
	je	.L21011
	cmpb	$101, %al
	je	.L21011
.L21010:
	cmpl	$10, %r15d
	je	.L32406
	cmpb	$39, %dl
	je	.L32407
.L21016:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L21019
	testb	$32, 17(%r13)
	je	.L21020
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L21021
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r13), %esi
	movzwl	60(%rdx), %r13d
	andl	$511, %esi
	andl	$511, %r13d
	cmpl	%r13d, %esi
	je	.L21021
.L21020:
	movq	integer_types+40(%rip), %rdi
.L31582:
	movq	%rbx, %rsi
	call	convert
.L20995:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31593
.L21021:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31582
.L21019:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L21022
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L21022
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%r13)
	je	.L32408
.L21022:
	cmpl	$5, %r15d
	je	.L32409
	movq	%rbx, %rax
	jmp	.L20995
.L32409:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L20995
.L32408:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31582
.L32407:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L21016
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L21016
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L21020
	testb	$32, 17(%r13)
	jne	.L21021
	jmp	.L21020
.L32406:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r15d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r15d, %r15d
	jne	.L21015
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L21014
.L21015:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L21014:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31582
.L21011:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L21010
.L32405:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L21006
.L21009:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L32410
.L31133:
	movq	32(%rbx), %rsi
	jmp	.L21009
.L32410:
	cmpb	$115, %dl
	jne	.L21006
	movq	32(%rsi), %r9
	movq	8(%rbx), %rdi
	cmpq	%rdi, 8(%r9)
	movq	%r9, %rsi
	je	.L21009
	jmp	.L21006
.L32404:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L21001
	cmpb	$51, 48(%rbx)
	je	.L21001
	cmpq	$0, current_function_decl(%rip)
	je	.L21003
	movzbl	17(%rbx), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L32411
.L21003:
	movq	%rbx, %rsi
.L21004:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L21001:
	movq	%rax, %r13
	jmp	.L20997
.L32411:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L21003
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L21003
	testb	$2, 17(%rax)
	je	.L21003
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L21004
	jmp	.L21003
.L32403:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L20997
.L20994:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L20995
.L32399:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L31983
.L32398:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L20990
.L32397:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L20989
.L20986:
	movzbl	17(%r12), %edi
	movl	$1, %r11d
	movl	%edi, %edx
	shrb	$3, %dil
	shrb	$4, %dl
	andl	%edi, %r11d
	andl	$1, %edx
	jmp	.L20985
.L32396:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31593
	.p2align 6,,7
.L20981:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L20980
.L32395:
	movq	32(%r12), %rsi
	cmpq	%rbx, 8(%rsi)
	jne	.L20975
.L20979:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r15d
	cmpb	$116, %cl
	jne	.L32412
.L31131:
	movq	32(%r12), %rsi
	jmp	.L20979
.L32412:
	cmpb	$115, %cl
	jne	.L20975
	movq	32(%rsi), %rsi
	movq	8(%r12), %r8
	cmpq	%r8, 8(%rsi)
	je	.L20979
	jmp	.L20975
.L32385:
	movq	-240(%rbp), %rbx
	cmpb	$18, 16(%rbx)
	jne	.L20971
	movq	8(%rbx), %r9
	cmpb	$6, 16(%r9)
	jne	.L20971
	movq	global_trees(%rip), %r8
	jmp	.L20969
	.p2align 6,,7
.L20968:
	movq	%r12, %rdi
	movq	%rbx, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L21196
	movq	-824(%rbp), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L32413
.L31598:
	movq	%rax, -824(%rbp)
	jmp	.L20721
.L32413:
	movq	-824(%rbp), %r13
	movq	32(%r13), %rsi
	movq	%rsi, -856(%rbp)
	jmp	.L20722
	.p2align 6,,7
.L21196:
	movq	-824(%rbp), %rcx
	movq	8(%rcx), %rax
	testq	%rax, %rax
	jne	.L31598
	movq	-824(%rbp), %rcx
	movq	16(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L21203
	cmpq	%rcx, 8(%rax)
	je	.L21206
.L21203:
	testq	%rax, %rax
	movq	%rax, -824(%rbp)
	je	.L20722
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r12, %rdi
	movq	%rax, %rsi
.L31984:
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L20721
	movq	-824(%rbp), %rdx
	movq	32(%rdx), %rcx
	movq	%rcx, -856(%rbp)
	jmp	.L20722
	.p2align 6,,7
.L21206:
	movq	16(%rdx), %rax
	movq	%rdx, -824(%rbp)
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L21203
	movq	-824(%rbp), %rdi
	cmpq	%rdi, 8(%rax)
	je	.L21206
	jmp	.L21203
	.p2align 6,,7
.L32219:
	movq	-824(%rbp), %r11
	movq	constructor_unfilled_index(%rip), %rsi
	movq	32(%r11), %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L20725
	movq	-824(%rbp), %rax
	movq	constructor_type(%rip), %r9
	movq	constructor_unfilled_index(%rip), %r15
	movq	40(%rax), %r12
	movq	8(%r9), %rdi
	movq	%rdi, -232(%rbp)
	movq	8(%r12), %rbx
	movzbl	16(%rbx), %eax
	movq	%rbx, %rdx
	cmpb	$23, %al
	je	.L20727
	cmpb	$18, %al
	je	.L32414
.L31119:
	movq	global_trees(%rip), %r8
.L31578:
	movzbl	16(%r12), %ecx
.L20726:
	cmpb	$-86, %cl
	je	.L32415
.L20814:
	cmpq	%r8, %r12
	je	.L32416
	testb	$2, 17(%r12)
	jne	.L20817
	movl	$0, constructor_constant(%rip)
.L20816:
	movl	require_constant_value(%rip), %r14d
	testl	%r14d, %r14d
	je	.L20821
	testb	$2, 17(%r12)
	je	.L32417
.L20821:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L32418
.L20846:
	testq	%r15, %r15
	je	.L20848
	movq	8(%r15), %rax
	cmpq	global_trees(%rip), %rax
	je	.L20721
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L32419
.L20848:
	movq	-232(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%r12, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -832(%rbp)
	je	.L31601
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L32420
.L20852:
	cmpb	$20, 16(%rdi)
	je	.L32421
.L20873:
	cmpb	$21, 16(%rdi)
	je	.L32422
.L20872:
	testq	%r15, %r15
	je	.L20940
	cmpb	$25, 16(%r15)
	je	.L32423
.L20940:
	movq	constructor_elements(%rip), %rdx
	movq	-832(%rbp), %rsi
	movq	%r15, %rdi
	call	tree_cons
	movq	constructor_type(%rip), %r15
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r15), %eax
	movq	%r15, %rdx
	cmpb	$18, %al
	je	.L32067
	cmpb	$20, %al
	jne	.L21186
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L21185
	testb	$2, 53(%rax)
	je	.L21185
	cmpq	$0, 72(%rax)
	jne	.L21185
.L20948:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L21185
	testb	$2, 53(%rax)
	je	.L21185
	cmpq	$0, 72(%rax)
	jne	.L21185
	jmp	.L20948
.L32423:
	movq	%r15, %rdi
	call	copy_node
	movq	%rax, %r15
	jmp	.L20940
.L32422:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L20872
	movq	32(%rax), %rcx
	testb	$1, 17(%rcx)
	jne	.L32424
.L20915:
	movq	$0, constructor_elements(%rip)
	jmp	.L20872
.L32424:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r10
	xorl	%r12d, %r12d
	cmpq	%r10, %r8
	movq	%r8, %rbx
	movq	%r10, %r13
	jae	.L30061
.L20922:
	cmpl	$3, (%rbx)
	je	.L32425
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L20918:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L20922
.L30061:
	movslq	%r12d,%rdx
	movq	%r8, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30063
.L20936:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32426
	cmpl	$2, %eax
	je	.L32427
.L20930:
	movq	8(%r12), %rsi
	movzbl	(%rsi), %edi
	leaq	1(%rsi), %rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	je	.L20926
.L20935:
	movzbl	(%rcx), %r13d
	incq	%rbx
	incq	%rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	jne	.L20935
.L20926:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L20936
.L30063:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L20915
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L20915
.L32427:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L20930
.L32426:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L20926
.L32425:
	addl	$25, %r12d
	jmp	.L20918
.L32421:
	movl	constructor_incremental(%rip), %r9d
	testl	%r9d, %r9d
	je	.L20875
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, %r15
	je	.L20873
	testq	%rax, %rax
	jne	.L20876
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L20883
.L30055:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L32428
.L20903:
	cmpb	$18, 16(%rdi)
	je	.L32429
.L20909:
	movl	$0, constructor_incremental(%rip)
.L20875:
	movq	-832(%rbp), %rsi
	movq	%r15, %rdi
	jmp	.L31600
.L32429:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L32430
	movq	global_trees+136(%rip), %rax
.L31581:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L20909
.L32430:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31581
.L32428:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L20909
	testb	$2, 53(%rax)
	je	.L20909
	cmpq	$0, 72(%rax)
	jne	.L20909
.L20889:
	movq	constructor_unfilled_fields(%rip), %r8
	movq	(%r8), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L20909
	testb	$2, 53(%rax)
	je	.L20909
	cmpq	$0, 72(%rax)
	jne	.L20909
	jmp	.L20889
.L20883:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L20883
	movq	constructor_type(%rip), %rdi
	jmp	.L30055
.L20876:
	movq	%r15, %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r14
	call	bit_position
	movq	%r14, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L20875
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L20896
	cmpb	$18, %al
	jne	.L20875
.L20896:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L20902
.L30058:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L20903
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L20909
	testb	$2, 53(%rax)
	je	.L20909
	cmpq	$0, 72(%rax)
	jne	.L20909
.L20908:
	movq	constructor_unfilled_fields(%rip), %r11
	movq	(%r11), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L20909
	testb	$2, 53(%rax)
	je	.L20909
	cmpq	$0, 72(%rax)
	jne	.L20909
	jmp	.L20908
.L20902:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L20902
	movq	constructor_type(%rip), %rdi
	jmp	.L30058
.L32420:
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L20875
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31126
	movl	constructor_incremental(%rip), %esi
	testl	%esi, %esi
	je	.L20875
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L20875
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L20855
	cmpb	$18, %al
	jne	.L20875
.L20855:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L20861
.L30052:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L20903
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L20909
	testb	$2, 53(%rax)
	je	.L20909
	cmpq	$0, 72(%rax)
	jne	.L20909
.L20867:
	movq	constructor_unfilled_fields(%rip), %r13
	movq	(%r13), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L20909
	testb	$2, 53(%rax)
	je	.L20909
	cmpq	$0, 72(%rax)
	jne	.L20909
	jmp	.L20867
.L20861:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L20861
	movq	constructor_type(%rip), %rdi
	jmp	.L30052
.L31126:
	movq	constructor_type(%rip), %rdi
	jmp	.L20852
.L32419:
	call	integer_zerop
	testl	%eax, %eax
	je	.L20848
	movq	constructor_type(%rip), %rbx
	cmpb	$18, 16(%rbx)
	je	.L20721
	cmpq	$0, (%r15)
	jne	.L20721
	jmp	.L20848
	.p2align 6,,7
.L32418:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L20846
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L20846
.L32417:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r11
	xorl	%r12d, %r12d
	cmpq	%r11, %r8
	movq	%r8, %rbx
	movq	%r11, %r13
	jae	.L30047
.L20828:
	cmpl	$3, (%rbx)
	je	.L32431
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L20824:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L20828
.L30047:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30049
.L20842:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32432
	cmpl	$2, %eax
	je	.L32433
.L20836:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r10d
	leaq	1(%rdx), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L20832
.L20841:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L20841
.L20832:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L20842
.L30049:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L32434
.L20845:
	movq	global_trees(%rip), %r12
	jmp	.L20846
.L32434:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L20845
	.p2align 6,,7
.L32433:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L20836
.L32432:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L20832
	.p2align 6,,7
.L32431:
	addl	$25, %r12d
	jmp	.L20824
.L20817:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L20820
	movq	constructor_type(%rip), %r9
	movzbl	16(%r9), %r8d
	subb	$20, %r8b
	cmpb	$1, %r8b
	ja	.L20816
	testb	$2, 53(%r15)
	je	.L20816
	cmpb	$25, 16(%r12)
	je	.L20816
.L20820:
	movl	$0, constructor_simple(%rip)
	jmp	.L20816
	.p2align 6,,7
.L32416:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L20816
.L32415:
	movl	require_constant_value(%rip), %ebx
	testl	%ebx, %ebx
	je	.L20814
	movl	flag_isoc99(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L20814
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L20814
	movq	32(%r12), %r13
	movq	32(%r13), %rsi
	movq	104(%rsi), %r12
	jmp	.L20814
	.p2align 6,,7
.L32414:
	movzbl	16(%r12), %ecx
	cmpb	$29, %cl
	je	.L32435
.L20728:
	movq	-232(%rbp), %rcx
	movq	128(%rdx), %rdi
	movq	128(%rcx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L31119
	movq	8(%r12), %rbx
.L20727:
	movzbl	16(%rbx), %r13d
	cmpl	$23, %r13d
	je	.L20730
	cmpl	$18, %r13d
	je	.L20730
	movzbl	16(%r12), %ecx
	cmpb	$32, %cl
	je	.L32436
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L20787
	cmpb	$34, %cl
	je	.L32437
.L20787:
	cmpb	$116, %cl
	movq	%r12, %rdx
	je	.L31125
	cmpb	$115, %cl
	je	.L32438
.L20796:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L20801
	cmpb	$49, %al
	je	.L20801
	cmpb	$50, %al
	je	.L20801
	cmpb	$101, %al
	je	.L20801
.L20800:
	cmpl	$10, %r13d
	je	.L32439
	cmpb	$39, %cl
	je	.L32440
.L20806:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L20809
	testb	$32, 17(%rbx)
	je	.L20810
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L20811
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%rbx), %r11d
	movzwl	60(%rdx), %ecx
	andl	$511, %r11d
	andl	$511, %ecx
	cmpl	%ecx, %r11d
	je	.L20811
.L20810:
	movq	integer_types+40(%rip), %rdi
.L31980:
	movq	%r12, %rsi
.L31981:
	call	convert
.L31577:
	movq	%rax, %rbx
.L31568:
	movq	global_trees(%rip), %r8
.L20785:
	movq	%rbx, %r12
	jmp	.L31578
.L20811:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31980
.L20809:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L20812
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L20812
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%rbx)
	je	.L32441
.L20812:
	cmpl	$5, %r13d
	je	.L32442
.L20813:
	movq	%r12, %rbx
	jmp	.L31568
.L32442:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31569:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L20785
.L32441:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31980
.L32440:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L20806
	movq	integer_types+40(%rip), %r14
	movq	40(%rdx), %rdi
	movzwl	60(%r14), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L20806
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L20810
	testb	$32, 17(%rbx)
	jne	.L20811
	jmp	.L20810
.L32439:
	movq	integer_types+40(%rip), %r9
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%r9), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L20805
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L20804
.L20805:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L20804:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31980
.L20801:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L20800
.L32438:
	movq	32(%r12), %rsi
	movq	8(%r12), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L20796
.L20799:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L32443
.L31125:
	movq	32(%r12), %rsi
	jmp	.L20799
.L32443:
	cmpb	$115, %cl
	jne	.L20796
	movq	32(%rsi), %r8
	movq	8(%r12), %rdi
	cmpq	%rdi, 8(%r8)
	movq	%r8, %rsi
	je	.L20799
	jmp	.L20796
.L32437:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	jne	.L20787
	cmpb	$51, 48(%r12)
	je	.L20787
	cmpq	$0, current_function_decl(%rip)
	je	.L20793
	movzbl	17(%r12), %ebx
	andb	$24, %bl
	cmpb	$16, %bl
	je	.L32444
.L20793:
	movq	%r12, %rsi
.L20794:
	movq	%rsi, %r12
	movq	8(%rsi), %rbx
.L31567:
	movzbl	16(%r12), %ecx
	jmp	.L20787
.L32444:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L20793
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L20793
	testb	$2, 17(%rax)
	je	.L20793
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L20794
	jmp	.L20793
.L32436:
	movq	104(%r12), %r12
	jmp	.L31567
.L20730:
	movzbl	16(%r12), %ecx
	xorl	%r14d, %r14d
	movl	%r13d, %edi
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L31121
	cmpb	$115, %cl
	je	.L32445
.L20732:
	movzbl	%cl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L20738
	cmpb	$49, %al
	je	.L20738
	cmpb	$50, %al
	je	.L20738
	cmpb	$101, %al
	je	.L20738
.L20737:
	cmpl	$23, %edi
	je	.L32446
	cmpl	$18, %edi
	jne	.L20813
	movzbl	%cl, %r10d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r10), %eax
	movq	8(%rbx), %r13
	cmpb	$114, %al
	je	.L20743
	cmpb	$100, %al
	je	.L20743
.L20742:
	movzbl	17(%rbx), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %edi
	shrb	$3, %r10b
	shrb	$4, %dil
	andl	$1, %r10d
	andl	%edi, %r9d
	movzbl	16(%rbx), %edi
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rbx), %r10d
	movl	%r10d, %esi
	shrb	$5, %sil
	andl	$1, %esi
	sall	$2, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	cmpb	$20, %dil
	je	.L32447
.L20746:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L20745
	testl	%edx, %edx
	jne	.L20745
	testl	%r11d, %r11d
	je	.L20744
.L20745:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %r9d
	movl	%r8d, %ecx
	andl	%ebx, %esi
	andl	$1, %r9d
	andl	$1, %ecx
	sall	$2, %r9d
	addl	%ecx, %ecx
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	orl	%r9d, %esi
	cmpb	$20, %dil
	je	.L32448
.L20747:
	leal	0(,%rcx,8), %r8d
	movq	%r13, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L20744:
	cmpb	$41, %cl
	je	.L32449
	cmpb	$47, %cl
	je	.L32450
	xorl	%ebx, %ebx
	testl	%r14d, %r14d
	je	.L32451
.L20781:
	movl	flag_isoc99(%rip), %r14d
	testl	%r14d, %r14d
	jne	.L20782
	testl	%ebx, %ebx
	je	.L20813
.L20782:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L32452
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L31981
.L32452:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L31569
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %ecx
	andb	$1, %cl
	addb	%cl, %cl
	andb	$-4, %r12b
	orb	%cl, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L31568
.L32451:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L20781
.L32450:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L20751
	cmpl	$18, %r14d
	je	.L20751
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L32453
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L20754
	cmpb	$34, %dl
	je	.L32454
.L20754:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L31123
	cmpb	$115, %dl
	je	.L32455
.L20763:
	movzbl	%dl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L20768
	cmpb	$49, %al
	je	.L20768
	cmpb	$50, %al
	je	.L20768
	cmpb	$101, %al
	je	.L20768
.L20767:
	cmpl	$10, %r14d
	je	.L32456
	cmpb	$39, %dl
	je	.L32457
.L20773:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L20776
	testb	$32, 17(%r13)
	je	.L20777
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L20778
	movq	integer_types+40(%rip), %r10
	movzwl	60(%r13), %esi
	movzwl	60(%r10), %r13d
	andl	$511, %esi
	andl	$511, %r13d
	cmpl	%r13d, %esi
	je	.L20778
.L20777:
	movq	integer_types+40(%rip), %rdi
.L31566:
	movq	%rbx, %rsi
	call	convert
.L20752:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31577
.L20778:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31566
.L20776:
	movl	flag_traditional(%rip), %edi
	testl	%edi, %edi
	je	.L20779
	movl	flag_allow_single_precision(%rip), %r8d
	testl	%r8d, %r8d
	jne	.L20779
	movq	global_trees+192(%rip), %r9
	cmpq	%r9, 128(%r13)
	je	.L32458
.L20779:
	cmpl	$5, %r14d
	je	.L32459
	movq	%rbx, %rax
	jmp	.L20752
.L32459:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L20752
.L32458:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31566
.L32457:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L20773
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L20773
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L20777
	testb	$32, 17(%r13)
	jne	.L20778
	jmp	.L20777
.L32456:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L20772
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L20771
.L20772:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L20771:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31566
.L20768:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L20767
.L32455:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L20763
.L20766:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L32460
.L31123:
	movq	32(%rbx), %rsi
	jmp	.L20766
.L32460:
	cmpb	$115, %dl
	jne	.L20763
	movq	32(%rsi), %r9
	movq	8(%rbx), %rdi
	cmpq	%rdi, 8(%r9)
	movq	%r9, %rsi
	je	.L20766
	jmp	.L20763
.L32454:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L20758
	cmpb	$51, 48(%rbx)
	je	.L20758
	cmpq	$0, current_function_decl(%rip)
	je	.L20760
	movzbl	17(%rbx), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L32461
.L20760:
	movq	%rbx, %rsi
.L20761:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L20758:
	movq	%rax, %r13
	jmp	.L20754
.L32461:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L20760
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L20760
	testb	$2, 17(%rax)
	je	.L20760
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L20761
	jmp	.L20760
.L32453:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L20754
.L20751:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L20752
.L32449:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L31981
.L32448:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L20747
.L32447:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L20746
.L20743:
	movzbl	17(%r12), %edi
	movl	$1, %r11d
	movl	%edi, %edx
	shrb	$3, %dil
	shrb	$4, %dl
	andl	%edi, %r11d
	andl	$1, %edx
	jmp	.L20742
.L32446:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31577
.L20738:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L20737
.L32445:
	movq	32(%r12), %rsi
	cmpq	%rbx, 8(%rsi)
	jne	.L20732
.L20736:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r14d
	cmpb	$116, %cl
	jne	.L32462
.L31121:
	movq	32(%r12), %rsi
	jmp	.L20736
.L32462:
	cmpb	$115, %cl
	jne	.L20732
	movq	32(%rsi), %rsi
	movq	8(%r12), %r13
	cmpq	%r13, 8(%rsi)
	je	.L20736
	jmp	.L20732
.L32435:
	movq	-232(%rbp), %rbx
	cmpb	$18, 16(%rbx)
	jne	.L20728
	movq	8(%rbx), %rsi
	cmpb	$6, 16(%rsi)
	jne	.L20728
	movq	global_trees(%rip), %r8
	jmp	.L20726
	.p2align 6,,7
.L20725:
	movq	-824(%rbp), %r9
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%r9), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L20953
	movq	-824(%rbp), %r8
	movq	(%r8), %rax
	testq	%rax, %rax
	jne	.L31598
	movq	-824(%rbp), %r14
	movq	32(%r14), %rax
	movq	%rax, -856(%rbp)
	jmp	.L20722
	.p2align 6,,7
.L20953:
	movq	-824(%rbp), %r11
	movq	8(%r11), %rax
	testq	%rax, %rax
	jne	.L31598
	movq	-824(%rbp), %rsi
	movq	16(%rsi), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L20960
	cmpq	%rsi, 8(%rax)
	je	.L20963
.L20960:
	testq	%rax, %rax
	movq	%rax, -824(%rbp)
	je	.L20722
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	jmp	.L31984
.L20963:
	movq	16(%rdx), %rax
	movq	%rdx, -824(%rbp)
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L20960
	movq	-824(%rbp), %r10
	cmpq	%r10, 8(%rax)
	je	.L20963
	jmp	.L20960
.L32218:
	movq	constructor_unfilled_fields(%rip), %rax
	testq	%rax, %rax
	je	.L20683
.L31356:
	movq	40(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L32463
.L20688:
	movq	(%rax), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	jne	.L31356
	jmp	.L20683
.L32463:
	call	integer_zerop
	testl	%eax, %eax
	je	.L32464
	movq	constructor_unfilled_fields(%rip), %rax
	jmp	.L20688
.L32464:
	movq	constructor_unfilled_fields(%rip), %rax
	testq	%rax, %rax
	je	.L20683
	movl	constructor_designated(%rip), %edi
	testl	%edi, %edi
	jne	.L20683
	movq	72(%rax), %rax
	movl	$.LC159, %r12d
	testq	%rax, %rax
	je	.L20691
	movq	32(%rax), %r12
.L20691:
	movq	spelling(%rip), %rcx
	movq	spelling_base(%rip), %rdi
	movl	spelling_size(%rip), %eax
	movq	%rcx, %r9
	subq	%rdi, %r9
	movq	%r9, %rbx
	shrq	$4, %rbx
	cmpl	%eax, %ebx
	jl	.L20692
	addl	$10, %eax
	testq	%rdi, %rdi
	movl	%eax, spelling_size(%rip)
	jne	.L20693
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L31565:
	movslq	%ebx,%rcx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rcx
	addq	spelling_base(%rip), %rcx
	movq	%rcx, spelling(%rip)
.L20692:
	movq	%r12, 8(%rcx)
	movl	$2, (%rcx)
	movl	$.LC175, %esi
	addq	$16, %rcx
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movq	%rcx, spelling(%rip)
	xorl	%r12d, %r12d
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rsi
	cmpq	%rsi, %r8
	movq	%r8, %rbx
	movq	%rsi, %r13
	jae	.L30038
.L20702:
	cmpl	$3, (%rbx)
	je	.L32465
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L20698:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L20702
.L30038:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30040
.L20716:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32466
	cmpl	$2, %eax
	je	.L32467
.L20710:
	movq	8(%r12), %r8
	movzbl	(%r8), %r13d
	leaq	1(%r8), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L20706
.L20715:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L20715
.L20706:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L20716
.L30040:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L32468
.L20719:
	movslq	constructor_depth(%rip),%r14
	salq	$4, %r14
	addq	spelling_base(%rip), %r14
	movq	%r14, spelling(%rip)
	jmp	.L20683
.L32468:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L20719
.L32467:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L20710
.L32466:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L20706
.L32465:
	addl	$25, %r12d
	jmp	.L20698
.L20693:
	movslq	%eax,%rsi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L31565
.L32217:
	movq	24(%rax), %rax
	testq	%rax, %rax
	je	.L20626
	cmpq	$0, 112(%rax)
	jne	.L20626
	movq	constructor_unfilled_index(%rip), %rdi
	call	integer_zerop
	testl	%eax, %eax
	jne	.L31564
	movq	constructor_type(%rip), %rdi
	cmpq	$0, 32(%rdi)
	jne	.L28037
	cmpl	$2, constructor_depth(%rip)
	jg	.L32469
	movl	pedantic(%rip), %ecx
	testl	%ecx, %ecx
	jne	.L32470
.L20655:
	movq	constructor_fields(%rip), %r12
	cmpq	$0, (%r12)
	je	.L20626
.L31564:
	movq	$0, constructor_type(%rip)
	jmp	.L20626
.L32470:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC174, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r14
	xorl	%r12d, %r12d
	cmpq	%r14, %r8
	movq	%r8, %rbx
	movq	%r14, %r13
	jae	.L30033
.L20663:
	cmpl	$3, (%rbx)
	je	.L32471
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L20659:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L20663
.L30033:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30035
.L20677:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32472
	cmpl	$2, %eax
	je	.L32473
.L20671:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r10d
	leaq	1(%rdx), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L20667
.L20676:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L20676
.L20667:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L20677
.L30035:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L20655
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L20655
.L32473:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L20671
.L32472:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L20667
.L32471:
	addl	$25, %r12d
	jmp	.L20659
.L32469:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC173, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r9
	xorl	%r12d, %r12d
	cmpq	%r9, %r8
	movq	%r8, %rbx
	movq	%r9, %r13
	jae	.L30028
.L20637:
	cmpl	$3, (%rbx)
	je	.L32474
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L20633:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L20637
.L30028:
	movslq	%r12d,%r15
	movq	%r8, %r12
	addq	$16, %r15
	andq	$-16, %r15
	subq	%r15, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30030
.L20651:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32475
	cmpl	$2, %eax
	je	.L32476
.L20645:
	movq	8(%r12), %r8
	movzbl	(%r8), %r13d
	leaq	1(%r8), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L20641
.L20650:
	movzbl	(%rcx), %esi
	incq	%rbx
	incq	%rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	jne	.L20650
.L20641:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L20651
.L30030:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L20655
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L20655
.L32476:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L20645
.L32475:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L20641
.L32474:
	addl	$25, %r12d
	jmp	.L20633
.L32092:
	movl	$.LC68, %edi
	movl	$6830, %esi
	jmp	.L32044
.L25741:
	movq	constructor_stack(%rip), %r10
	movq	$0, constructor_range_stack(%rip)
	movq	%r10, -1296(%rbp)
.L15218:
	movq	-1296(%rbp), %r8
	cmpb	$0, 106(%r8)
	jne	.L28702
.L15219:
	movl	-68(%rbp), %eax
	testl	%eax, %eax
	je	.L28703
	movq	constructor_type(%rip), %rcx
	movq	%rcx, %rdx
	movzbl	16(%rcx), %ecx
	leal	-20(%rcx), %r14d
	cmpb	$1, %r14b
	ja	.L28704
	movq	constructor_fields(%rip), %r14
	testq	%r14, %r14
	je	.L28704
	cmpb	$18, %cl
	je	.L32477
	cmpb	$20, 16(%rdx)
	je	.L32478
	cmpb	$21, 16(%rdx)
	je	.L32479
.L28846:
	movq	$0, -1264(%rbp)
.L28703:
	movl	$112, %edi
	call	xmalloc
	movzbl	constructor_constant(%rip), %ecx
	movq	constructor_elements(%rip), %r14
	movq	constructor_type(%rip), %rdi
	movq	constructor_fields(%rip), %rsi
	movq	%rax, %rdx
	movq	constructor_index(%rip), %r13
	movq	constructor_max_index(%rip), %r10
	movq	constructor_unfilled_index(%rip), %r9
	movq	constructor_unfilled_fields(%rip), %r8
	movq	constructor_bit_index(%rip), %r11
	movq	%rdi, 8(%rax)
	movq	%rsi, 16(%rax)
	movb	%cl, 104(%rax)
	movq	%r13, 24(%rax)
	movq	%r10, 32(%rax)
	movzbl	constructor_simple(%rip), %ebx
	movq	%r9, 40(%rax)
	movq	%r8, 48(%rax)
	movq	%r11, 56(%rax)
	movq	%r14, 64(%rax)
	movq	$0, 88(%rdx)
	movb	%bl, 105(%rax)
	movzbl	constructor_erroneous(%rip), %r12d
	movb	%r12b, 107(%rax)
	movzbl	-68(%rbp), %r13d
	movq	constructor_pending_elts(%rip), %r15
	movq	%r15, 72(%rax)
	movl	constructor_depth(%rip), %eax
	movb	$0, 108(%rdx)
	movb	%r13b, 106(%rdx)
	movzbl	constructor_incremental(%rip), %r10d
	movl	%eax, 84(%rdx)
	movb	%r10b, 109(%rdx)
	movzbl	constructor_designated(%rip), %r9d
	movb	%r9b, 110(%rdx)
	movl	-68(%rbp), %r14d
	movq	$0, constructor_pending_elts(%rip)
	movq	constructor_stack(%rip), %r8
	movq	spelling(%rip), %rcx
	movq	$0, 96(%rdx)
	movl	$1, constructor_constant(%rip)
	movl	$1, constructor_simple(%rip)
	movq	$0, constructor_elements(%rip)
	movl	$1, constructor_incremental(%rip)
	movl	$0, constructor_designated(%rip)
	movq	%r8, (%rdx)
	movq	%rcx, %r11
	movq	%rcx, %r9
	movq	spelling_base(%rip), %r8
	movq	%rdx, constructor_stack(%rip)
	subq	%r8, %r11
	sarq	$4, %r11
	testl	%r14d, %r14d
	movl	%r11d, constructor_depth(%rip)
	jne	.L29053
	movq	constructor_range_stack(%rip), %r15
	movl	$0, designator_depth(%rip)
	movl	$0, designator_errorneous(%rip)
	movq	%r15, 96(%rdx)
	movq	$0, constructor_range_stack(%rip)
.L29053:
	testq	%rdi, %rdi
	je	.L31363
	movzbl	16(%rdi), %edx
	leal	-20(%rdx), %r12d
	cmpb	$1, %r12b
	ja	.L29056
	testq	%rsi, %rsi
	jne	.L29057
	xorl	%edi, %edi
	movq	$0, constructor_type(%rip)
.L29055:
	testq	%rdi, %rdi
	je	.L31363
	cmpq	$0, -1264(%rbp)
	je	.L29096
	movq	-1264(%rbp), %rbx
	cmpb	$46, 16(%rbx)
	je	.L32480
.L29096:
	cmpl	$1, -68(%rbp)
	je	.L32481
.L29229:
	movq	constructor_type(%rip), %rcx
	movzbl	16(%rcx), %edx
	leal	-20(%rdx), %r13d
	cmpb	$1, %r13b
	ja	.L29254
	movq	24(%rcx), %rsi
	testq	%rsi, %rsi
	movq	%rsi, constructor_fields(%rip)
	je	.L29256
	testb	$2, 53(%rsi)
	jne	.L32482
.L29256:
	movq	constructor_fields(%rip), %r11
	movq	global_trees+136(%rip), %r14
	movq	%r11, constructor_unfilled_fields(%rip)
	movq	%r14, constructor_bit_index(%rip)
.L15217:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
.L32482:
	cmpq	$0, 72(%rsi)
	jne	.L29256
.L29259:
	movq	constructor_fields(%rip), %r12
	movq	(%r12), %rsi
	testq	%rsi, %rsi
	movq	%rsi, constructor_fields(%rip)
	je	.L29256
	testb	$2, 53(%rsi)
	je	.L29256
	cmpq	$0, 72(%rsi)
	je	.L29259
	jmp	.L29256
.L29254:
	cmpb	$9, %dl
	je	.L32483
	cmpb	$18, %dl
	je	.L32484
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC181, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r13
	xorl	%r12d, %r12d
	cmpq	%r13, %r8
	movq	%r8, %rbx
	jae	.L30991
.L29428:
	cmpl	$3, (%rbx)
	je	.L32485
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L29424:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L29428
.L30991:
	movslq	%r12d,%r15
	movq	%r8, %r12
	addq	$16, %r15
	andq	$-16, %r15
	subq	%r15, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30993
.L29442:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32486
	cmpl	$2, %eax
	je	.L32487
.L29436:
	movq	8(%r12), %rsi
	movzbl	(%rsi), %r11d
	leaq	1(%rsi), %rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	je	.L29432
	.p2align 4,,7
.L29441:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L29441
.L29432:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L29442
.L30993:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L32488
.L29445:
	movq	constructor_type(%rip), %rbx
	movq	%rbx, constructor_fields(%rip)
	movq	%rbx, constructor_unfilled_fields(%rip)
	jmp	.L15217
.L32488:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L29445
.L32487:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L29436
.L32486:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L29432
.L32485:
	addl	$25, %r12d
	jmp	.L29424
.L32484:
	movq	24(%rcx), %rax
	testq	%rax, %rax
	je	.L29268
	movq	112(%rax), %r8
	testq	%r8, %r8
	movq	%r8, constructor_max_index(%rip)
	jne	.L29269
	cmpq	$0, 32(%rcx)
	jne	.L32489
.L29269:
	movq	constructor_max_index(%rip), %rax
	testq	%rax, %rax
	je	.L29270
	cmpb	$25, 16(%rax)
	je	.L29270
	movq	$-1, %rdi
	movq	%rdi, %rsi
	call	build_int_2_wide
	movq	%rax, constructor_max_index(%rip)
.L29270:
	movq	constructor_type(%rip), %rbx
	movq	sizetype_tab+24(%rip), %rdi
	movq	24(%rbx), %r9
	movq	104(%r9), %rsi
	call	convert
.L31939:
	cmpq	$0, -1264(%rbp)
	movq	%rax, constructor_index(%rip)
	movq	constructor_index(%rip), %r10
	movq	%r10, constructor_unfilled_index(%rip)
	je	.L15217
	movq	-1264(%rbp), %rax
	cmpb	$29, 16(%rax)
	jne	.L15217
	movq	constructor_type(%rip), %rsi
	cmpb	$18, 16(%rsi)
	jne	.L32490
	movq	-1264(%rbp), %r13
	movq	integer_types(%rip), %rcx
	movq	8(%r13), %rdx
	movzwl	60(%rcx), %edi
	movq	8(%rdx), %r15
	movl	$1, -1276(%rbp)
	andl	$511, %edi
	movzwl	60(%r15), %edx
	andl	$511, %edx
	cmpl	%edi, %edx
	je	.L29275
	movq	c_global_trees(%rip), %r14
	movzwl	60(%r14), %r12d
	andl	$511, %r12d
	cmpl	%r12d, %edx
	jne	.L29276
	shrl	$3, %edx
	movl	%edx, -1276(%rbp)
.L29275:
	movzwl	60(%rcx), %ebx
	movq	-1264(%rbp), %r8
	movq	global_trees+136(%rip), %r11
	andl	$511, %ebx
	movl	%ebx, -556(%rbp)
	movq	8(%rsi), %r9
	movq	%r9, -544(%rbp)
	movslq	32(%r8),%rcx
	movq	40(%r8), %r15
	movq	%r11, -1288(%rbp)
	leaq	(%rcx,%r15), %rsi
	movq	%rsi, -552(%rbp)
.L29279:
	cmpq	-552(%rbp), %r15
	jae	.L29280
	movq	constructor_max_index(%rip), %rdi
	movq	-1288(%rbp), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L29280
	cmpl	$1, -1276(%rbp)
	je	.L32491
	cmpl	-1276(%rbp), %eax
	movq	$0, -64(%rbp)
	movq	$0, -56(%rbp)
	jge	.L29285
	leaq	-64(%rbp), %r9
	xorl	%edi, %edi
	movl	-1276(%rbp), %r8d
.L29297:
	xorl	%r13d, %r13d
	movzbq	(%r15), %r12
	leal	63(%rdi), %edx
	cmpl	$63, %edi
	movl	%edi, %ecx
	setle	%r13b
	incq	%r15
	cmpl	$-1, %edi
	cmovg	%edi, %edx
	addl	-556(%rbp), %edi
	andl	$-64, %edx
	subl	%edx, %ecx
	movq	%r13, %r14
	salq	%cl, %r12
	orq	(%r9,%r14,8), %r12
	decl	%r8d
	movq	%r12, (%r9,%r13,8)
	jne	.L29297
.L29285:
	movq	-544(%rbp), %rdi
	testb	$32, 17(%rdi)
	jne	.L31324
	movl	-1276(%rbp), %edx
	decl	%edx
	imull	-556(%rbp), %edx
	leal	8(%rdx), %r8d
	cmpl	$63, %r8d
	jg	.L29299
	movq	-56(%rbp), %rdi
	leal	7(%rdx), %ecx
	movq	%rdi, %rax
	sarq	%cl, %rax
	testl	$1, %eax 
	je	.L31326
	movq	$-1, %rsi
	movl	%r8d, %ecx
	movq	%rsi, %r11
	salq	%cl, %r11
	orq	%r11, %rdi
	movq	%rdi, -56(%rbp)
.L31940:
	movq	%rsi, -64(%rbp)
.L29298:
	call	build_int_2_wide
	xorl	%ebx, %ebx
	movl	$constructor_pending_elts, %r12d
	movq	constructor_type(%rip), %rsi
	movq	%rax, -536(%rbp)
	movq	-544(%rbp), %rcx
	cmpb	$18, 16(%rsi)
	movq	%rcx, 8(%rax)
	je	.L32492
	movq	-1288(%rbp), %rdi
	call	bit_position
	movq	%rax, %r14
	movq	constructor_pending_elts(%rip), %rax
	testq	%rax, %rax
	je	.L29341
	movq	%rax, %r13
.L29374:
	movq	32(%r13), %rdi
	movq	%r13, %rbx
	movq	%r13, %r12
	call	bit_position
	movq	%r14, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L29342
	movq	-1288(%rbp), %rdi
	cmpq	%rdi, 32(%r13)
	je	.L29347
	leaq	8(%r13), %r12
.L29342:
	movq	(%r12), %rdx
	testq	%rdx, %rdx
	movq	%rdx, %r13
	jne	.L29374
.L29341:
	movl	$48, %edi
	call	ggc_alloc
	testq	%rbx, %rbx
	movq	-536(%rbp), %r13
	movq	-1288(%rbp), %r14
	movq	%rax, (%r12)
	movq	%rax, %rdx
	movq	%rbx, 16(%rax)
	movq	$0, (%rax)
	movq	$0, 8(%rax)
	movq	%r13, 40(%rax)
	movl	$0, 24(%rax)
	movq	%r14, 32(%rax)
	je	.L29281
.L29418:
	cmpq	(%rbx), %rdx
	je	.L32493
	movl	24(%rbx), %eax
	testl	%eax, %eax
	jne	.L29399
	movl	$1, 24(%rbx)
.L29398:
	movq	%rbx, %rdx
	movq	16(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L29418
.L29281:
	movq	-1288(%rbp), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, -1288(%rbp)
	jmp	.L29279
.L29399:
	testl	%eax, %eax
	jle	.L29401
	movl	24(%rdx), %eax
	testl	%eax, %eax
	jle	.L29402
	movq	(%rdx), %rax
	testq	%rax, %rax
	movq	%rax, 8(%rbx)
	je	.L29403
	movq	%rbx, 16(%rax)
.L29403:
	movq	%rbx, (%rdx)
.L32103:
	movq	16(%rbx), %rax
	movl	$0, 24(%rbx)
	movq	%rdx, 16(%rbx)
	movl	$0, 24(%rdx)
	testq	%rax, %rax
	movq	%rax, 16(%rdx)
	je	.L29404
	cmpq	%rbx, (%rax)
	je	.L31351
	movq	%rdx, 8(%rax)
	jmp	.L29281
.L31351:
	movq	%rdx, (%rax)
	jmp	.L29281
.L29404:
	movq	%rdx, constructor_pending_elts(%rip)
	jmp	.L29281
.L29402:
	movq	(%rdx), %rcx
	movq	8(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, (%rdx)
	je	.L29409
	movq	%rdx, 16(%rax)
.L29409:
	movq	(%rcx), %rax
	movq	%rdx, 8(%rcx)
	testq	%rax, %rax
	movq	%rax, 8(%rbx)
	je	.L29410
	movq	%rbx, 16(%rax)
.L29410:
	movl	24(%rcx), %eax
	xorl	%edi, %edi
	movq	%rbx, (%rcx)
	shrl	$31, %eax
	movl	%eax, 24(%rdx)
	cmpl	$0, 24(%rcx)
	setle	%dil
	decl	%edi
	movl	%edi, 24(%rbx)
.L32104:
	movq	16(%rbx), %rax
	movl	$0, 24(%rcx)
	movq	%rcx, 16(%rbx)
	movq	%rcx, 16(%rdx)
	testq	%rax, %rax
	movq	%rax, 16(%rcx)
	je	.L29413
	cmpq	%rbx, (%rax)
	je	.L31352
	movq	%rcx, 8(%rax)
	jmp	.L29281
.L31352:
	movq	%rcx, (%rax)
	jmp	.L29281
	.p2align 6,,7
.L29413:
	movq	%rcx, constructor_pending_elts(%rip)
	jmp	.L29281
.L29401:
	movl	$0, 24(%rbx)
	jmp	.L29281
	.p2align 6,,7
.L32493:
	movl	24(%rbx), %eax
	testl	%eax, %eax
	jne	.L29379
	movl	$-1, 24(%rbx)
	jmp	.L29398
.L29379:
	testl	%eax, %eax
	jns	.L29401
	movl	24(%rdx), %eax
	testl	%eax, %eax
	js	.L32494
	movq	8(%rdx), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, 8(%rdx)
	je	.L29389
	movq	%rdx, 16(%rax)
.L29389:
	movq	8(%rcx), %rax
	movq	%rdx, (%rcx)
	testq	%rax, %rax
	movq	%rax, (%rbx)
	je	.L29390
	movq	%rbx, 16(%rax)
.L29390:
	movl	24(%rcx), %eax
	xorl	%r12d, %r12d
	movq	%rbx, 8(%rcx)
	shrl	$31, %eax
	movl	%eax, 24(%rbx)
	cmpl	$0, 24(%rcx)
	setle	%r12b
	decl	%r12d
	movl	%r12d, 24(%rdx)
	jmp	.L32104
.L32494:
	movq	8(%rdx), %rax
	testq	%rax, %rax
	movq	%rax, (%rbx)
	je	.L29383
	movq	%rbx, 16(%rax)
.L29383:
	movq	%rbx, 8(%rdx)
	jmp	.L32103
	.p2align 6,,7
.L29347:
	movq	40(%r13), %r11
	testb	$1, 17(%r11)
	jne	.L32495
.L29349:
	movq	-536(%rbp), %rax
	movq	%rax, 40(%r13)
	jmp	.L29281
.L32495:
	movl	$.LC165, %esi
	xorl	%eax, %eax
	movl	$.LC42, %edi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rsi
	xorl	%r12d, %r12d
	cmpq	%rsi, %r8
	movq	%r8, %rbx
	movq	%rsi, %r14
	jae	.L30985
.L29356:
	cmpl	$3, (%rbx)
	je	.L32496
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L29352:
	addq	$16, %rbx
	cmpq	%r14, %rbx
	jb	.L29356
.L30985:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r14, %r8
	movq	%rsp, -576(%rbp)
	movq	%rsp, %rbx
	jae	.L30987
.L29370:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32497
	cmpl	$2, %eax
	je	.L32498
.L29364:
	movq	8(%r12), %r9
	movzbl	(%r9), %r8d
	leaq	1(%r9), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L29360
.L29369:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L29369
.L29360:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L29370
.L30987:
	movb	$0, (%rbx)
	movq	-576(%rbp), %rcx
	cmpb	$0, (%rcx)
	je	.L29349
	movl	$.LC142, %edi
	movq	%rcx, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L29349
	.p2align 6,,7
.L32498:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L29364
.L32497:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L29360
.L32496:
	addl	$25, %r12d
	jmp	.L29352
	.p2align 6,,7
.L32492:
	movq	constructor_pending_elts(%rip), %rax
	testq	%rax, %rax
	je	.L29341
	movq	%rax, %r13
.L29340:
	movq	-1288(%rbp), %rdi
	movq	32(%r13), %rsi
	movq	%r13, %rbx
	movq	%r13, %r12
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L32499
.L29307:
	movq	(%r12), %r13
	testq	%r13, %r13
	jne	.L29340
	jmp	.L29341
.L32499:
	movq	32(%r13), %rdi
	movq	-1288(%rbp), %rsi
	leaq	8(%r13), %r12
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L29307
	movq	40(%r13), %r9
	testb	$1, 17(%r9)
	jne	.L32500
.L29314:
	movq	-536(%rbp), %r12
	movq	%r12, 40(%r13)
	jmp	.L29281
.L32500:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r14
	jae	.L30979
.L29321:
	cmpl	$3, (%rbx)
	je	.L32501
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L29317:
	addq	$16, %rbx
	cmpq	%r14, %rbx
	jb	.L29321
.L30979:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r14, %r8
	movq	%rsp, -568(%rbp)
	movq	%rsp, %rbx
	jae	.L30981
.L29335:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32502
	cmpl	$2, %eax
	je	.L32503
.L29329:
	movq	8(%r12), %r14
	movzbl	(%r14), %r10d
	leaq	1(%r14), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L29325
.L29334:
	movzbl	(%rcx), %edx
	incq	%rbx
	incq	%rcx
	testb	%dl, %dl
	movb	%dl, (%rbx)
	jne	.L29334
.L29325:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L29335
.L30981:
	movb	$0, (%rbx)
	movq	-568(%rbp), %rsi
	cmpb	$0, (%rsi)
	je	.L29314
	movl	$.LC142, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L29314
	.p2align 6,,7
.L32503:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L29329
.L32502:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L29325
.L32501:
	addl	$25, %r12d
	jmp	.L29317
	.p2align 6,,7
.L31326:
	movq	-64(%rbp), %rsi
	jmp	.L29298
.L29299:
	cmpl	$64, %r8d
	je	.L32504
	movq	-64(%rbp), %rsi
	leal	-57(%rdx), %ecx
	movq	%rsi, %rax
	sarq	%cl, %rax
	testl	$1, %eax 
	je	.L31327
	leal	-56(%rdx), %ecx
	movq	$-1, %r8
	salq	%cl, %r8
	orq	%r8, %rsi
	movq	%rsi, -64(%rbp)
.L31327:
	movq	-56(%rbp), %rdi
	jmp	.L29298
.L32504:
	movq	-56(%rbp), %rdi
	testq	%rdi, %rdi
	jns	.L31326
	movq	$-1, %rsi
	jmp	.L31940
	.p2align 6,,7
.L31324:
	movq	-56(%rbp), %rdi
	jmp	.L31326
.L32491:
	movzbq	(%r15), %r10
	movq	$0, -64(%rbp)
	incq	%r15
	movq	%r10, -56(%rbp)
	jmp	.L29285
.L29280:
	movl	$0, constructor_incremental(%rip)
	jmp	.L15217
.L29276:
	movl	$.LC68, %edi
	movl	$6100, %esi
.L31943:
	movl	$.LC180, %edx
.L31944:
	call	fancy_abort
.L32490:
	movl	$.LC68, %edi
	movl	$6091, %esi
	jmp	.L31943
	.p2align 6,,7
.L32489:
	movq	$-1, %rdi
	movq	%rdi, %rsi
	call	build_int_2_wide
	movq	%rax, constructor_max_index(%rip)
	jmp	.L29269
.L29268:
	movq	global_trees+136(%rip), %rax
	jmp	.L31939
.L32483:
	movzbl	61(%rcx), %eax
	shrb	$1, %al
	andl	$127, %eax
	movzbl	mode_unit_size(%rax), %edx
	testb	%dl, %dl
	je	.L29264
	movzbw	mode_size(%rax), %ax
	divb	%dl
	movzbl	%al, %ecx
	decl	%ecx
	movslq	%ecx,%rdi
.L29265:
	xorl	%esi, %esi
	call	build_int_2_wide
	movq	global_trees+88(%rip), %rsi
	movq	sizetype_tab+24(%rip), %rdi
	movq	%rax, constructor_max_index(%rip)
	call	convert
	movq	%rax, constructor_index(%rip)
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L15217
.L29264:
	movq	$-1, %rdi
	jmp	.L29265
.L32481:
	movl	warn_missing_braces(%rip), %ebx
	testl	%ebx, %ebx
	je	.L29229
	movl	missing_braces_mentioned(%rip), %eax
	testl	%eax, %eax
	jne	.L29229
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC179, %esi
	movl	$1, missing_braces_mentioned(%rip)
	xorl	%r12d, %r12d
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r10
	cmpq	%r10, %r8
	movq	%r8, %rbx
	movq	%r10, %r13
	jae	.L30971
.L29236:
	cmpl	$3, (%rbx)
	je	.L32505
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L29232:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L29236
.L30971:
	movslq	%r12d,%rdi
	movq	%r8, %r12
	addq	$16, %rdi
	andq	$-16, %rdi
	subq	%rdi, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30973
.L29250:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32506
	cmpl	$2, %eax
	je	.L32507
.L29244:
	movq	8(%r12), %r15
	movzbl	(%r15), %esi
	leaq	1(%r15), %rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	je	.L29240
.L29249:
	movzbl	(%rcx), %edx
	incq	%rbx
	incq	%rcx
	testb	%dl, %dl
	movb	%dl, (%rbx)
	jne	.L29249
.L29240:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L29250
.L30973:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L29229
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L29229
.L32507:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L29244
.L32506:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L29240
.L32505:
	addl	$25, %r12d
	jmp	.L29232
.L32480:
	movzbl	17(%rbx), %r13d
	movzbl	18(%rbx), %r10d
	movq	40(%rbx), %rax
	shrb	$1, %r13b
	shrb	$2, %r10b
	movq	%rax, constructor_elements(%rip)
	andl	$1, %r13d
	andl	$1, %r10d
	testq	%rax, %rax
	movl	%r13d, constructor_constant(%rip)
	movl	%r10d, constructor_simple(%rip)
	je	.L29096
	movzbl	16(%rdi), %edx
	cmpb	$20, %dl
	je	.L29099
	cmpb	$18, %dl
	jne	.L29096
.L29099:
	movq	%rax, -1272(%rbp)
.L29218:
	movq	-1272(%rbp), %r12
	xorl	%ebx, %ebx
	movq	32(%r12), %r15
	movq	24(%r12), %r14
	movl	$constructor_pending_elts, %r12d
	movq	%r15, -528(%rbp)
	cmpb	$18, 16(%rdi)
	je	.L32508
	movq	%r14, %rdi
	call	bit_position
	movq	%rax, %r15
	movq	constructor_pending_elts(%rip), %rax
	testq	%rax, %rax
	je	.L29140
	movq	%rax, %r13
.L29173:
	movq	32(%r13), %rdi
	movq	%r13, %rbx
	movq	%r13, %r12
	call	bit_position
	movq	%r15, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L29141
	cmpq	%r14, 32(%r13)
	je	.L29146
	leaq	8(%r13), %r12
.L29141:
	movq	(%r12), %rdx
	testq	%rdx, %rdx
	movq	%rdx, %r13
	jne	.L29173
.L29140:
	movl	$48, %edi
	call	ggc_alloc
	testq	%rbx, %rbx
	movq	-528(%rbp), %r13
	movq	%rax, (%r12)
	movq	%rax, %rdx
	movq	%r14, 32(%rax)
	movq	%rbx, 16(%rax)
	movq	$0, (%rax)
	movq	$0, 8(%rax)
	movq	%r13, 40(%rax)
	movl	$0, 24(%rax)
	je	.L29103
.L29217:
	cmpq	(%rbx), %rdx
	je	.L32509
	movl	24(%rbx), %eax
	testl	%eax, %eax
	jne	.L29198
	movl	$1, 24(%rbx)
.L29197:
	movq	%rbx, %rdx
	movq	16(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L29217
.L29103:
	movq	-1272(%rbp), %r8
	movq	(%r8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, -1272(%rbp)
	je	.L32510
	movq	constructor_type(%rip), %rdi
	jmp	.L29218
.L32510:
	movq	constructor_type(%rip), %rdi
	movq	$0, constructor_elements(%rip)
	cmpb	$20, 16(%rdi)
	je	.L32511
	cmpb	$18, 16(%rdi)
	je	.L32512
.L29225:
	movl	$0, constructor_incremental(%rip)
	jmp	.L29096
.L32512:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L32513
	movq	global_trees+136(%rip), %rax
.L31938:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L29225
.L32513:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31938
.L32511:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L29225
	testb	$2, 53(%rax)
	je	.L29225
	cmpq	$0, 72(%rax)
	jne	.L29225
.L29224:
	movq	constructor_unfilled_fields(%rip), %r9
	movq	(%r9), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L29225
	testb	$2, 53(%rax)
	je	.L29225
	cmpq	$0, 72(%rax)
	jne	.L29225
	jmp	.L29224
.L29198:
	testl	%eax, %eax
	jle	.L29200
	movl	24(%rdx), %eax
	testl	%eax, %eax
	jle	.L29201
	movq	(%rdx), %rax
	testq	%rax, %rax
	movq	%rax, 8(%rbx)
	je	.L29202
	movq	%rbx, 16(%rax)
.L29202:
	movq	%rbx, (%rdx)
.L32101:
	movq	16(%rbx), %rax
	movl	$0, 24(%rbx)
	movq	%rdx, 16(%rbx)
	movl	$0, 24(%rdx)
	testq	%rax, %rax
	movq	%rax, 16(%rdx)
	je	.L29203
	cmpq	%rbx, (%rax)
	je	.L32514
	movq	%rdx, 8(%rax)
	jmp	.L29103
.L32514:
	movq	%rdx, (%rax)
	jmp	.L29103
.L29203:
	movq	%rdx, constructor_pending_elts(%rip)
	jmp	.L29103
.L29201:
	movq	(%rdx), %rcx
	movq	8(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, (%rdx)
	je	.L29208
	movq	%rdx, 16(%rax)
.L29208:
	movq	(%rcx), %rax
	movq	%rdx, 8(%rcx)
	testq	%rax, %rax
	movq	%rax, 8(%rbx)
	je	.L29209
	movq	%rbx, 16(%rax)
.L29209:
	movl	24(%rcx), %eax
	xorl	%r11d, %r11d
	movq	%rbx, (%rcx)
	shrl	$31, %eax
	movl	%eax, 24(%rdx)
	cmpl	$0, 24(%rcx)
	setle	%r11b
	decl	%r11d
	movl	%r11d, 24(%rbx)
.L32102:
	movq	16(%rbx), %rax
	movl	$0, 24(%rcx)
	movq	%rcx, 16(%rbx)
	movq	%rcx, 16(%rdx)
	testq	%rax, %rax
	movq	%rax, 16(%rcx)
	je	.L29212
	cmpq	%rbx, (%rax)
	je	.L32515
	movq	%rcx, 8(%rax)
	jmp	.L29103
.L32515:
	movq	%rcx, (%rax)
	jmp	.L29103
	.p2align 6,,7
.L29212:
	movq	%rcx, constructor_pending_elts(%rip)
	jmp	.L29103
.L29200:
	movl	$0, 24(%rbx)
	jmp	.L29103
	.p2align 6,,7
.L32509:
	movl	24(%rbx), %eax
	testl	%eax, %eax
	jne	.L29178
	movl	$-1, 24(%rbx)
	jmp	.L29197
.L29178:
	testl	%eax, %eax
	jns	.L29200
	movl	24(%rdx), %r12d
	testl	%r12d, %r12d
	js	.L32516
	movq	8(%rdx), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, 8(%rdx)
	je	.L29188
	movq	%rdx, 16(%rax)
.L29188:
	movq	8(%rcx), %rax
	movq	%rdx, (%rcx)
	testq	%rax, %rax
	movq	%rax, (%rbx)
	je	.L29189
	movq	%rbx, 16(%rax)
.L29189:
	movl	24(%rcx), %eax
	xorl	%r14d, %r14d
	movq	%rbx, 8(%rcx)
	shrl	$31, %eax
	movl	%eax, 24(%rbx)
	cmpl	$0, 24(%rcx)
	setle	%r14b
	decl	%r14d
	movl	%r14d, 24(%rdx)
	jmp	.L32102
.L32516:
	movq	8(%rdx), %rax
	testq	%rax, %rax
	movq	%rax, (%rbx)
	je	.L29182
	movq	%rbx, 16(%rax)
.L29182:
	movq	%rbx, 8(%rdx)
	jmp	.L32101
	.p2align 6,,7
.L29146:
	movq	40(%r13), %r8
	testb	$1, 17(%r8)
	jne	.L32517
.L29148:
	movq	-528(%rbp), %r15
	movq	%r15, 40(%r13)
	jmp	.L29103
.L32517:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r9
	xorl	%r12d, %r12d
	cmpq	%r9, %r8
	movq	%r8, %rbx
	movq	%r9, %r14
	jae	.L30964
.L29155:
	cmpl	$3, (%rbx)
	je	.L32518
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L29151:
	addq	$16, %rbx
	cmpq	%r14, %rbx
	jb	.L29155
.L30964:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r14, %r8
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L30966
.L29169:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32519
	cmpl	$2, %eax
	je	.L32520
.L29163:
	movq	8(%r12), %rdi
	movzbl	(%rdi), %r10d
	leaq	1(%rdi), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L29159
.L29168:
	movzbl	(%rcx), %esi
	incq	%rbx
	incq	%rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	jne	.L29168
.L29159:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L29169
.L30966:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	je	.L29148
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L29148
.L32520:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L29163
.L32519:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L29159
.L32518:
	addl	$25, %r12d
	jmp	.L29151
	.p2align 6,,7
.L32508:
	movq	constructor_pending_elts(%rip), %rax
	testq	%rax, %rax
	je	.L29140
	movq	%rax, %r13
.L29139:
	movq	32(%r13), %rsi
	movq	%r14, %rdi
	movq	%r13, %rbx
	movq	%r13, %r12
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L32521
.L29106:
	movq	(%r12), %r13
	testq	%r13, %r13
	jne	.L29139
	jmp	.L29140
.L32521:
	movq	32(%r13), %rdi
	movq	%r14, %rsi
	leaq	8(%r13), %r12
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L29106
	movq	40(%r13), %rdi
	testb	$1, 17(%rdi)
	jne	.L32522
.L29113:
	movq	-528(%rbp), %rcx
	movq	%rcx, 40(%r13)
	jmp	.L29103
.L32522:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r14
	jae	.L30958
.L29120:
	cmpl	$3, (%rbx)
	je	.L32523
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L29116:
	addq	$16, %rbx
	cmpq	%r14, %rbx
	jb	.L29120
.L30958:
	movslq	%r12d,%rsi
	movq	%r8, %r12
	addq	$16, %rsi
	andq	$-16, %rsi
	subq	%rsi, %rsp
	cmpq	%r14, %r8
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L30960
.L29134:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32524
	cmpl	$2, %eax
	je	.L32525
.L29128:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r14d
	leaq	1(%rdx), %rcx
	testb	%r14b, %r14b
	movb	%r14b, (%rbx)
	je	.L29124
.L29133:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L29133
.L29124:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L29134
.L30960:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	je	.L29113
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L29113
	.p2align 6,,7
.L32525:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L29128
.L32524:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L29124
.L32523:
	addl	$25, %r12d
	jmp	.L29116
	.p2align 6,,7
.L31363:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC178, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r14
	xorl	%r12d, %r12d
	cmpq	%r14, %r8
	movq	%r8, %rbx
	movq	%r14, %r13
	jae	.L30950
.L29078:
	cmpl	$3, (%rbx)
	je	.L32526
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L29074:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L29078
.L30950:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30952
.L29092:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32527
	cmpl	$2, %eax
	je	.L32528
.L29086:
	movq	8(%r12), %r8
	movzbl	(%r8), %r11d
	leaq	1(%r8), %rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	je	.L29082
	.p2align 4,,7
.L29091:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L29091
.L29082:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L29092
.L30952:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L32529
.L29095:
	movq	$0, constructor_fields(%rip)
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L15217
.L32529:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L29095
.L32528:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L29086
.L32527:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L29082
.L32526:
	addl	$25, %r12d
	jmp	.L29074
.L29057:
	movq	8(%rsi), %rax
	movl	$.LC159, %r12d
	movq	%rax, constructor_type(%rip)
	movq	72(%rsi), %rax
	testq	%rax, %rax
	je	.L29060
	movq	32(%rax), %r12
.L29060:
	subq	%r8, %r9
	movl	spelling_size(%rip), %eax
	movq	%r9, %rbx
	shrq	$4, %rbx
	cmpl	%eax, %ebx
	jl	.L29061
	addl	$10, %eax
	testq	%r8, %r8
	movl	%eax, spelling_size(%rip)
	jne	.L29062
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L31933:
	movslq	%ebx,%rcx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rcx
	addq	spelling_base(%rip), %rcx
	movq	%rcx, spelling(%rip)
.L29061:
	movl	$2, (%rcx)
	movq	%r12, 8(%rcx)
.L31935:
	addq	$16, %rcx
	incl	constructor_depth(%rip)
	movq	constructor_type(%rip), %rdi
	movq	%rcx, spelling(%rip)
	jmp	.L29055
.L29062:
	movslq	%eax,%rsi
	movq	%r8, %rdi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L31933
.L29056:
	cmpb	$18, %dl
	jne	.L29055
	movq	8(%rdi), %rdx
	xorl	%esi, %esi
	movq	constructor_index(%rip), %rdi
	movq	%rdx, constructor_type(%rip)
	call	tree_low_cst
	movq	spelling_base(%rip), %rdi
	movq	spelling(%rip), %rcx
	movl	%eax, %r12d
	movl	spelling_size(%rip), %eax
	movq	%rcx, %rsi
	subq	%rdi, %rsi
	movq	%rsi, %rbx
	shrq	$4, %rbx
	cmpl	%eax, %ebx
	jl	.L29067
	addl	$10, %eax
	testq	%rdi, %rdi
	movl	%eax, spelling_size(%rip)
	jne	.L29068
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L31934:
	movslq	%ebx,%rcx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rcx
	addq	spelling_base(%rip), %rcx
	movq	%rcx, spelling(%rip)
.L29067:
	movl	$3, (%rcx)
	movl	%r12d, 8(%rcx)
	jmp	.L31935
.L29068:
	movslq	%eax,%rsi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L31934
.L32479:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L28846
	cmpq	%r14, 24(%rax)
	jne	.L28846
	movq	32(%rax), %rax
.L29019:
	movq	%rax, -1264(%rbp)
	jmp	.L28703
.L32478:
	movq	%r14, %rdi
	call	bit_position
	movl	constructor_incremental(%rip), %esi
	movq	%rax, %r12
	testl	%esi, %esi
	je	.L28848
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	jne	.L32530
.L28849:
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L28850
	cmpb	$18, %al
	je	.L28850
.L28848:
	movq	constructor_pending_elts(%rip), %rbx
	testq	%rbx, %rbx
	je	.L28846
.L28874:
	movq	32(%rbx), %rdi
	cmpq	%rdi, %r14
	je	.L31348
	call	bit_position
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L28872
	movq	(%rbx), %rbx
.L28867:
	testq	%rbx, %rbx
	jne	.L28874
	jmp	.L28846
.L28872:
	movq	8(%rbx), %rbx
	jmp	.L28867
.L31348:
	movq	40(%rbx), %rcx
	movq	%rcx, -1264(%rbp)
	jmp	.L28703
.L28850:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L28856
.L30925:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L32531
	cmpb	$18, 16(%rdi)
	je	.L32532
.L28863:
	movl	$0, constructor_incremental(%rip)
	jmp	.L28848
.L32532:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L32533
	movq	global_trees+136(%rip), %rax
.L31929:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L28863
.L32533:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31929
.L32531:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L28863
	testb	$2, 53(%rax)
	je	.L28863
	cmpq	$0, 72(%rax)
	jne	.L28863
.L28862:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L28863
	testb	$2, 53(%rax)
	je	.L28863
	cmpq	$0, 72(%rax)
	jne	.L28863
	jmp	.L28862
	.p2align 6,,7
.L28856:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L28856
	movq	constructor_type(%rip), %rdi
	jmp	.L30925
	.p2align 6,,7
.L32530:
	call	bit_position
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L28848
	jmp	.L28849
	.p2align 6,,7
.L32477:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	jne	.L32534
.L28706:
	movq	constructor_pending_elts(%rip), %rbx
	testq	%rbx, %rbx
	je	.L28846
.L28845:
	movq	32(%rbx), %rsi
	movq	%r14, %rdi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L28840
	movq	(%rbx), %rbx
.L28837:
	testq	%rbx, %rbx
	jne	.L28845
	jmp	.L28846
.L28840:
	movq	32(%rbx), %rdi
	movq	%r14, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L31348
	movq	8(%rbx), %rbx
	jmp	.L28837
.L32534:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r14, %rdi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L28706
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L28707
	cmpb	$18, %al
	jne	.L28706
.L28707:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	movq	%rbx, -1248(%rbp)
	je	.L30908
.L28826:
	movq	-1248(%rbp), %rsi
	xorl	%ebx, %ebx
	movl	$constructor_pending_elts, %r12d
	movq	32(%rsi), %r15
	movq	24(%rsi), %r13
	movq	%r15, -480(%rbp)
	cmpb	$18, 16(%rdi)
	je	.L32535
	movq	%r13, %rdi
	call	bit_position
	movq	%rax, -496(%rbp)
	movq	constructor_pending_elts(%rip), %rax
	testq	%rax, %rax
	je	.L28748
	movq	%rax, %r15
.L28781:
	movq	32(%r15), %rdi
	movq	%r15, %rbx
	movq	%r15, %r12
	call	bit_position
	movq	-496(%rbp), %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L28749
	cmpq	%r13, 32(%r15)
	je	.L28754
	leaq	8(%r15), %r12
.L28749:
	movq	(%r12), %r11
	testq	%r11, %r11
	movq	%r11, %r15
	jne	.L28781
.L28748:
	movl	$48, %edi
	call	ggc_alloc
	testq	%rbx, %rbx
	movq	-480(%rbp), %r15
	movq	%rax, (%r12)
	movq	%rax, %rdx
	movq	%r13, 32(%rax)
	movq	%rbx, 16(%rax)
	movq	$0, (%rax)
	movq	$0, 8(%rax)
	movq	%r15, 40(%rax)
	movl	$0, 24(%rax)
	je	.L28711
.L28825:
	cmpq	(%rbx), %rdx
	je	.L32536
	movl	24(%rbx), %eax
	testl	%eax, %eax
	jne	.L28806
	movl	$1, 24(%rbx)
.L28805:
	movq	%rbx, %rdx
	movq	16(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L28825
.L28711:
	movq	-1248(%rbp), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, -1248(%rbp)
	je	.L32537
	movq	constructor_type(%rip), %rdi
	jmp	.L28826
.L32537:
	movq	constructor_type(%rip), %rdi
.L30908:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L32538
	cmpb	$18, 16(%rdi)
	je	.L32539
.L28833:
	movl	$0, constructor_incremental(%rip)
	jmp	.L28706
.L32539:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L32540
	movq	global_trees+136(%rip), %rax
.L31928:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L28833
.L32540:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31928
.L32538:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L28833
	testb	$2, 53(%rax)
	je	.L28833
	cmpq	$0, 72(%rax)
	jne	.L28833
.L28832:
	movq	constructor_unfilled_fields(%rip), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L28833
	testb	$2, 53(%rax)
	je	.L28833
	cmpq	$0, 72(%rax)
	jne	.L28833
	jmp	.L28832
	.p2align 6,,7
.L28806:
	testl	%eax, %eax
	jle	.L28808
	movl	24(%rdx), %eax
	testl	%eax, %eax
	jle	.L28809
	movq	(%rdx), %rax
	testq	%rax, %rax
	movq	%rax, 8(%rbx)
	je	.L28810
	movq	%rbx, 16(%rax)
.L28810:
	movq	%rbx, (%rdx)
.L32097:
	movq	16(%rbx), %rax
	movl	$0, 24(%rbx)
	movq	%rdx, 16(%rbx)
	movl	$0, 24(%rdx)
	testq	%rax, %rax
	movq	%rax, 16(%rdx)
	je	.L28811
	cmpq	%rbx, (%rax)
	je	.L32541
	movq	%rdx, 8(%rax)
	jmp	.L28711
.L32541:
	movq	%rdx, (%rax)
	jmp	.L28711
.L28811:
	movq	%rdx, constructor_pending_elts(%rip)
	jmp	.L28711
.L28809:
	movq	(%rdx), %rcx
	movq	8(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, (%rdx)
	je	.L28816
	movq	%rdx, 16(%rax)
.L28816:
	movq	(%rcx), %rax
	movq	%rdx, 8(%rcx)
	testq	%rax, %rax
	movq	%rax, 8(%rbx)
	je	.L28817
	movq	%rbx, 16(%rax)
.L28817:
	movl	24(%rcx), %eax
	xorl	%edi, %edi
	movq	%rbx, (%rcx)
	shrl	$31, %eax
	movl	%eax, 24(%rdx)
	cmpl	$0, 24(%rcx)
	setle	%dil
	decl	%edi
	movl	%edi, 24(%rbx)
.L32098:
	movq	16(%rbx), %rax
	movl	$0, 24(%rcx)
	movq	%rcx, 16(%rbx)
	movq	%rcx, 16(%rdx)
	testq	%rax, %rax
	movq	%rax, 16(%rcx)
	je	.L28820
	cmpq	%rbx, (%rax)
	je	.L32542
	movq	%rcx, 8(%rax)
	jmp	.L28711
.L32542:
	movq	%rcx, (%rax)
	jmp	.L28711
.L28820:
	movq	%rcx, constructor_pending_elts(%rip)
	jmp	.L28711
.L28808:
	movl	$0, 24(%rbx)
	jmp	.L28711
	.p2align 6,,7
.L32536:
	movl	24(%rbx), %eax
	testl	%eax, %eax
	jne	.L28786
	movl	$-1, 24(%rbx)
	jmp	.L28805
.L28786:
	testl	%eax, %eax
	jns	.L28808
	movl	24(%rdx), %eax
	testl	%eax, %eax
	js	.L32543
	movq	8(%rdx), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, 8(%rdx)
	je	.L28796
	movq	%rdx, 16(%rax)
.L28796:
	movq	8(%rcx), %rax
	movq	%rdx, (%rcx)
	testq	%rax, %rax
	movq	%rax, (%rbx)
	je	.L28797
	movq	%rbx, 16(%rax)
.L28797:
	movl	24(%rcx), %eax
	xorl	%r10d, %r10d
	movq	%rbx, 8(%rcx)
	shrl	$31, %eax
	movl	%eax, 24(%rbx)
	cmpl	$0, 24(%rcx)
	setle	%r10b
	decl	%r10d
	movl	%r10d, 24(%rdx)
	jmp	.L32098
.L32543:
	movq	8(%rdx), %rax
	testq	%rax, %rax
	movq	%rax, (%rbx)
	je	.L28790
	movq	%rbx, 16(%rax)
.L28790:
	movq	%rbx, 8(%rdx)
	jmp	.L32097
.L28754:
	movq	40(%r15), %rdx
	testb	$1, 17(%rdx)
	jne	.L32544
.L28756:
	movq	-480(%rbp), %rbx
	movq	%rbx, 40(%r15)
	jmp	.L28711
.L32544:
	movl	$.LC165, %esi
	xorl	%eax, %eax
	movl	$.LC42, %edi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rsi
	xorl	%r12d, %r12d
	cmpq	%rsi, %r8
	movq	%r8, %rbx
	movq	%rsi, %r13
	jae	.L30917
.L28763:
	cmpl	$3, (%rbx)
	je	.L32545
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L28759:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L28763
.L30917:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, -504(%rbp)
	movq	%rsp, %rbx
	jae	.L30919
.L28777:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32546
	cmpl	$2, %eax
	je	.L32547
.L28771:
	movq	8(%r12), %r13
	movzbl	(%r13), %r8d
	leaq	1(%r13), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L28767
.L28776:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L28776
.L28767:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L28777
.L30919:
	movb	$0, (%rbx)
	movq	-504(%rbp), %rsi
	cmpb	$0, (%rsi)
	je	.L28756
	movl	$.LC142, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L28756
.L32547:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L28771
.L32546:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L28767
.L32545:
	addl	$25, %r12d
	jmp	.L28759
	.p2align 6,,7
.L32535:
	movq	constructor_pending_elts(%rip), %rax
	testq	%rax, %rax
	je	.L28748
	movq	%rax, %r15
.L28747:
	movq	32(%r15), %rsi
	movq	%r13, %rdi
	movq	%r15, %rbx
	movq	%r15, %r12
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L32548
.L28714:
	movq	(%r12), %r15
	testq	%r15, %r15
	jne	.L28747
	jmp	.L28748
.L32548:
	movq	32(%r15), %rdi
	movq	%r13, %rsi
	leaq	8(%r15), %r12
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L28714
	movq	40(%r15), %r13
	testb	$1, 17(%r13)
	jne	.L32549
.L28721:
	movq	-480(%rbp), %r12
	movq	%r12, 40(%r15)
	jmp	.L28711
.L32549:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L30911
.L28728:
	cmpl	$3, (%rbx)
	je	.L32550
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L28724:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L28728
.L30911:
	movslq	%r12d,%r9
	movq	%r8, %r12
	addq	$16, %r9
	andq	$-16, %r9
	subq	%r9, %rsp
	cmpq	%r13, %r8
	movq	%rsp, -488(%rbp)
	movq	%rsp, %rbx
	jae	.L30913
.L28742:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32551
	cmpl	$2, %eax
	je	.L32552
.L28736:
	movq	8(%r12), %r10
	movzbl	(%r10), %r11d
	leaq	1(%r10), %rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	je	.L28732
.L28741:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L28741
.L28732:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L28742
.L30913:
	movb	$0, (%rbx)
	movq	-488(%rbp), %rcx
	cmpb	$0, (%rcx)
	je	.L28721
	movl	$.LC142, %edi
	movq	%rcx, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L28721
.L32552:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L28736
.L32551:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L28732
.L32550:
	addl	$25, %r12d
	jmp	.L28724
	.p2align 6,,7
.L28704:
	cmpb	$18, 16(%rdx)
	jne	.L28703
	movl	constructor_incremental(%rip), %r14d
	movq	constructor_index(%rip), %rsi
	testl	%r14d, %r14d
	movq	%rsi, -512(%rbp)
	jne	.L32553
.L28881:
	movq	constructor_pending_elts(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L29020
.L29021:
	xorl	%eax, %eax
	jmp	.L29019
.L29020:
	movq	-512(%rbp), %rdi
	movq	32(%rbx), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L29015
	movq	(%rbx), %rbx
.L29012:
	testq	%rbx, %rbx
	jne	.L29020
	jmp	.L29021
.L29015:
	movq	32(%rbx), %rdi
	movq	-512(%rbp), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L29017
	movq	8(%rbx), %rbx
	jmp	.L29012
.L29017:
	movq	40(%rbx), %rax
	jmp	.L29019
.L32553:
	movq	%rsi, %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L28881
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L28882
	cmpb	$18, %al
	jne	.L28881
.L28882:
	movq	constructor_elements(%rip), %r8
	testq	%r8, %r8
	movq	%r8, -1256(%rbp)
	je	.L30929
.L29001:
	movq	-1256(%rbp), %r9
	xorl	%ebx, %ebx
	movl	$constructor_pending_elts, %r12d
	movq	32(%r9), %r13
	movq	24(%r9), %r14
	movq	%r13, -520(%rbp)
	cmpb	$18, 16(%rdi)
	je	.L32554
	movq	%r14, %rdi
	call	bit_position
	movq	%rax, %r15
	movq	constructor_pending_elts(%rip), %rax
	testq	%rax, %rax
	je	.L28923
	movq	%rax, %r13
.L28956:
	movq	32(%r13), %rdi
	movq	%r13, %rbx
	movq	%r13, %r12
	call	bit_position
	movq	%r15, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L28924
	cmpq	%r14, 32(%r13)
	je	.L28929
	leaq	8(%r13), %r12
.L28924:
	movq	(%r12), %r10
	testq	%r10, %r10
	movq	%r10, %r13
	jne	.L28956
.L28923:
	movl	$48, %edi
	call	ggc_alloc
	testq	%rbx, %rbx
	movq	-520(%rbp), %r13
	movq	%rax, (%r12)
	movq	%rax, %rdx
	movq	%r14, 32(%rax)
	movq	%rbx, 16(%rax)
	movq	$0, (%rax)
	movq	$0, 8(%rax)
	movq	%r13, 40(%rax)
	movl	$0, 24(%rax)
	je	.L28886
.L29000:
	cmpq	(%rbx), %rdx
	je	.L32555
	movl	24(%rbx), %eax
	testl	%eax, %eax
	jne	.L28981
	movl	$1, 24(%rbx)
.L28980:
	movq	%rbx, %rdx
	movq	16(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L29000
.L28886:
	movq	-1256(%rbp), %rsi
	movq	(%rsi), %rbx
	testq	%rbx, %rbx
	movq	%rbx, -1256(%rbp)
	je	.L32556
	movq	constructor_type(%rip), %rdi
	jmp	.L29001
.L32556:
	movq	constructor_type(%rip), %rdi
.L30929:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L32557
	cmpb	$18, 16(%rdi)
	je	.L32558
.L29008:
	movl	$0, constructor_incremental(%rip)
	jmp	.L28881
.L32558:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L32559
	movq	global_trees+136(%rip), %rax
.L31932:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L29008
.L32559:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31932
	.p2align 6,,7
.L32557:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L29008
	testb	$2, 53(%rax)
	je	.L29008
	cmpq	$0, 72(%rax)
	jne	.L29008
.L29007:
	movq	constructor_unfilled_fields(%rip), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L29008
	testb	$2, 53(%rax)
	je	.L29008
	cmpq	$0, 72(%rax)
	jne	.L29008
	jmp	.L29007
.L28981:
	testl	%eax, %eax
	jle	.L28983
	movl	24(%rdx), %eax
	testl	%eax, %eax
	jle	.L28984
	movq	(%rdx), %rax
	testq	%rax, %rax
	movq	%rax, 8(%rbx)
	je	.L28985
	movq	%rbx, 16(%rax)
.L28985:
	movq	%rbx, (%rdx)
.L32099:
	movq	16(%rbx), %rax
	movl	$0, 24(%rbx)
	movq	%rdx, 16(%rbx)
	movl	$0, 24(%rdx)
	testq	%rax, %rax
	movq	%rax, 16(%rdx)
	je	.L28986
	cmpq	%rbx, (%rax)
	je	.L32560
	movq	%rdx, 8(%rax)
	jmp	.L28886
.L32560:
	movq	%rdx, (%rax)
	jmp	.L28886
	.p2align 6,,7
.L28986:
	movq	%rdx, constructor_pending_elts(%rip)
	jmp	.L28886
.L28984:
	movq	(%rdx), %rcx
	movq	8(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, (%rdx)
	je	.L28991
	movq	%rdx, 16(%rax)
.L28991:
	movq	(%rcx), %rax
	movq	%rdx, 8(%rcx)
	testq	%rax, %rax
	movq	%rax, 8(%rbx)
	je	.L28992
	movq	%rbx, 16(%rax)
.L28992:
	movl	24(%rcx), %eax
	xorl	%r12d, %r12d
	movq	%rbx, (%rcx)
	shrl	$31, %eax
	movl	%eax, 24(%rdx)
	cmpl	$0, 24(%rcx)
	setle	%r12b
	decl	%r12d
	movl	%r12d, 24(%rbx)
.L32100:
	movq	16(%rbx), %rax
	movl	$0, 24(%rcx)
	movq	%rcx, 16(%rbx)
	movq	%rcx, 16(%rdx)
	testq	%rax, %rax
	movq	%rax, 16(%rcx)
	je	.L28995
	cmpq	%rbx, (%rax)
	je	.L32561
	movq	%rcx, 8(%rax)
	jmp	.L28886
.L32561:
	movq	%rcx, (%rax)
	jmp	.L28886
.L28995:
	movq	%rcx, constructor_pending_elts(%rip)
	jmp	.L28886
	.p2align 6,,7
.L28983:
	movl	$0, 24(%rbx)
	jmp	.L28886
	.p2align 6,,7
.L32555:
	movl	24(%rbx), %eax
	testl	%eax, %eax
	jne	.L28961
	movl	$-1, 24(%rbx)
	jmp	.L28980
.L28961:
	testl	%eax, %eax
	jns	.L28983
	movl	24(%rdx), %r15d
	testl	%r15d, %r15d
	js	.L32562
	movq	8(%rdx), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, 8(%rdx)
	je	.L28971
	movq	%rdx, 16(%rax)
.L28971:
	movq	8(%rcx), %rax
	movq	%rdx, (%rcx)
	testq	%rax, %rax
	movq	%rax, (%rbx)
	je	.L28972
	movq	%rbx, 16(%rax)
.L28972:
	movl	24(%rcx), %eax
	xorl	%edi, %edi
	movq	%rbx, 8(%rcx)
	shrl	$31, %eax
	movl	%eax, 24(%rbx)
	cmpl	$0, 24(%rcx)
	setle	%dil
	decl	%edi
	movl	%edi, 24(%rdx)
	jmp	.L32100
.L32562:
	movq	8(%rdx), %rax
	testq	%rax, %rax
	movq	%rax, (%rbx)
	je	.L28965
	movq	%rbx, 16(%rax)
.L28965:
	movq	%rbx, 8(%rdx)
	jmp	.L32099
	.p2align 6,,7
.L28929:
	movq	40(%r13), %r12
	testb	$1, 17(%r12)
	jne	.L32563
.L28931:
	movq	-520(%rbp), %r11
	movq	%r11, 40(%r13)
	jmp	.L28886
.L32563:
	movl	$.LC165, %esi
	xorl	%eax, %eax
	movl	$.LC42, %edi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rsi
	xorl	%r12d, %r12d
	cmpq	%rsi, %r8
	movq	%r8, %rbx
	movq	%rsi, %r14
	jae	.L30938
.L28938:
	cmpl	$3, (%rbx)
	je	.L32564
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L28934:
	addq	$16, %rbx
	cmpq	%r14, %rbx
	jb	.L28938
.L30938:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r14, %r8
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L30940
.L28952:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32565
	cmpl	$2, %eax
	je	.L32566
.L28946:
	movq	8(%r12), %r8
	movzbl	(%r8), %r14d
	leaq	1(%r8), %rcx
	testb	%r14b, %r14b
	movb	%r14b, (%rbx)
	je	.L28942
.L28951:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L28951
.L28942:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L28952
.L30940:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	je	.L28931
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L28931
	.p2align 6,,7
.L32566:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L28946
.L32565:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L28942
	.p2align 6,,7
.L32564:
	addl	$25, %r12d
	jmp	.L28934
.L32554:
	movq	constructor_pending_elts(%rip), %rax
	testq	%rax, %rax
	je	.L28923
	movq	%rax, %r13
.L28922:
	movq	32(%r13), %rsi
	movq	%r14, %rdi
	movq	%r13, %rbx
	movq	%r13, %r12
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L32567
.L28889:
	movq	(%r12), %r13
	testq	%r13, %r13
	jne	.L28922
	jmp	.L28923
.L32567:
	movq	32(%r13), %rdi
	movq	%r14, %rsi
	leaq	8(%r13), %r12
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L28889
	movq	40(%r13), %r11
	testb	$1, 17(%r11)
	jne	.L32568
.L28896:
	movq	-520(%rbp), %rax
	movq	%rax, 40(%r13)
	jmp	.L28886
.L32568:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r15
	xorl	%r12d, %r12d
	cmpq	%r15, %r8
	movq	%r8, %rbx
	movq	%r15, %r14
	jae	.L30932
.L28903:
	cmpl	$3, (%rbx)
	je	.L32569
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L28899:
	addq	$16, %rbx
	cmpq	%r14, %rbx
	jb	.L28903
.L30932:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r14, %r8
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L30934
.L28917:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32570
	cmpl	$2, %eax
	je	.L32571
.L28911:
	movq	8(%r12), %rdi
	movzbl	(%rdi), %r10d
	leaq	1(%rdi), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L28907
.L28916:
	movzbl	(%rcx), %edx
	incq	%rbx
	incq	%rcx
	testb	%dl, %dl
	movb	%dl, (%rbx)
	jne	.L28916
.L28907:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L28917
.L30934:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	je	.L28896
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L28896
.L32571:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L28911
.L32570:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L28907
.L32569:
	addl	$25, %r12d
	jmp	.L28899
	.p2align 6,,7
.L32216:
	movq	constructor_index(%rip), %rdi
	xorl	%esi, %esi
	call	tree_low_cst
	movq	spelling_base(%rip), %rdi
	movq	spelling(%rip), %rcx
	movl	%eax, %r12d
	movl	spelling_size(%rip), %eax
	movq	%rcx, %rdx
	subq	%rdi, %rdx
	movq	%rdx, %rbx
	shrq	$4, %rbx
	cmpl	%eax, %ebx
	jl	.L19713
	addl	$10, %eax
	testq	%rdi, %rdi
	movl	%eax, spelling_size(%rip)
	jne	.L19714
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L31514:
	movslq	%ebx,%rcx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rcx
	addq	spelling_base(%rip), %rcx
	movq	%rcx, spelling(%rip)
.L19713:
	movl	%r12d, 8(%rcx)
	movl	$3, (%rcx)
	movq	-760(%rbp), %r12
	addq	$16, %rcx
	movq	%rcx, spelling(%rip)
	movq	constructor_index(%rip), %rcx
	movq	%rcx, -800(%rbp)
	movq	8(%r12), %rdi
	movzbl	16(%rdi), %eax
	movq	%rdi, %rdx
	cmpb	$23, %al
	je	.L19718
	cmpb	$18, %al
	je	.L32572
.L31085:
	movq	global_trees(%rip), %r8
.L19717:
	cmpb	$-86, 16(%r12)
	je	.L32573
.L19816:
	cmpq	%r8, %r12
	je	.L32574
	testb	$2, 17(%r12)
	jne	.L19819
	movl	$0, constructor_constant(%rip)
.L19818:
	movl	require_constant_value(%rip), %ecx
	testl	%ecx, %ecx
	je	.L19823
	testb	$2, 17(%r12)
	je	.L32575
.L19823:
	movl	require_constant_elements(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L32576
.L19848:
	cmpq	$0, -800(%rbp)
	je	.L19850
	movq	-800(%rbp), %r9
	movq	8(%r9), %rax
	cmpq	global_trees(%rip), %rax
	je	.L19852
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L32577
.L19850:
	movl	require_constant_value(%rip), %edx
	movl	require_constant_elements(%rip), %ecx
	movq	%r14, %rdi
	movq	%r12, %rsi
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, %r15
	je	.L32578
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L32579
.L19854:
	cmpb	$20, 16(%rdi)
	je	.L32580
.L19875:
	cmpb	$21, 16(%rdi)
	je	.L32581
.L19874:
	cmpq	$0, -800(%rbp)
	je	.L19942
	movq	-800(%rbp), %rdx
	cmpb	$25, 16(%rdx)
	je	.L32582
.L19942:
	movq	-800(%rbp), %rdi
	movq	constructor_elements(%rip), %rdx
	movq	%r15, %rsi
	call	tree_cons
	movq	constructor_type(%rip), %r15
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r15), %eax
	cmpb	$18, %al
	je	.L32583
	cmpb	$20, %al
	je	.L32584
	cmpb	$21, 16(%r15)
	je	.L32585
.L19944:
	movl	$1, %esi
	testl	%esi, %esi
	je	.L19852
	xorl	%r15d, %r15d
	movq	constructor_pending_elts(%rip), %rbx
.L19954:
	xorl	%r14d, %r14d
	testq	%rbx, %rbx
	je	.L19956
.L19990:
	movq	constructor_type(%rip), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$18, %al
	je	.L32586
	subb	$20, %al
	cmpb	$1, %al
	ja	.L19955
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L19956
	call	bit_position
	movq	32(%rbx), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L19976
	movq	32(%rbx), %r8
	movq	40(%rbx), %rdi
	movq	%r8, constructor_unfilled_fields(%rip)
	movq	8(%r8), %rsi
	movq	%r8, %rdx
.L31530:
	xorl	%ecx, %ecx
	call	output_init_element
.L19955:
	testq	%rbx, %rbx
	jne	.L19990
.L19956:
	testl	%r15d, %r15d
	je	.L19852
	testq	%r14, %r14
	je	.L19852
	movq	constructor_type(%rip), %r10
	movzbl	16(%r10), %edx
	leal	-20(%rdx), %r11d
	cmpb	$1, %r11b
	jbe	.L32587
	cmpb	$18, %dl
	jne	.L19954
	movq	%r14, constructor_unfilled_index(%rip)
	jmp	.L19954
.L32587:
	movq	%r14, constructor_unfilled_fields(%rip)
	jmp	.L19954
	.p2align 6,,7
.L19852:
	movslq	constructor_depth(%rip),%rbx
	salq	$4, %rbx
	addq	spelling_base(%rip), %rbx
	movq	%rbx, spelling(%rip)
	jmp	.L20025
.L19976:
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L19978
.L31970:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.L19979
.L31529:
	movq	%rax, %rbx
	jmp	.L19955
.L19979:
	movq	32(%rbx), %r14
	jmp	.L19956
	.p2align 6,,7
.L19978:
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L31529
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L19985
	cmpq	%rbx, 8(%rax)
	je	.L19988
.L19985:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L19956
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
.L31971:
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L19955
	jmp	.L19979
	.p2align 6,,7
.L19988:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L19985
	cmpq	%rbx, 8(%rax)
	je	.L19988
	jmp	.L19985
	.p2align 6,,7
.L32586:
	movq	32(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L19959
	movq	constructor_type(%rip), %r13
	movq	40(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rdx
	movq	8(%r13), %rsi
	jmp	.L31530
.L19959:
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rbx), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L31970
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L31529
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L19968
	cmpq	%rbx, 8(%rax)
	je	.L19971
.L19968:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L19956
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	jmp	.L31971
.L19971:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L19968
	cmpq	%rbx, 8(%rax)
	je	.L19971
	jmp	.L19968
.L32585:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L19944
.L32584:
	movq	constructor_unfilled_fields(%rip), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L19944
	testb	$2, 53(%rax)
	je	.L19944
	cmpq	$0, 72(%rax)
	jne	.L19944
.L19950:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L19944
	testb	$2, 53(%rax)
	je	.L19944
	cmpq	$0, 72(%rax)
	jne	.L19944
	jmp	.L19950
.L32583:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L19944
.L32582:
	movq	%rdx, %rdi
	call	copy_node
	movq	%rax, -800(%rbp)
	jmp	.L19942
.L32581:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L19874
	movq	32(%rax), %rdx
	testb	$1, 17(%rdx)
	jne	.L32588
.L19917:
	movq	$0, constructor_elements(%rip)
	jmp	.L19874
.L32588:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L29953
.L19924:
	cmpl	$3, (%rbx)
	je	.L32589
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L19920:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L19924
.L29953:
	movslq	%r12d,%r11
	movq	%r8, %r12
	addq	$16, %r11
	andq	$-16, %r11
	subq	%r11, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L29955
.L19938:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32590
	cmpl	$2, %eax
	je	.L32591
.L19932:
	movq	8(%r12), %r9
	movzbl	(%r9), %r10d
	leaq	1(%r9), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L19928
.L19937:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L19937
.L19928:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L19938
.L29955:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L19917
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L19917
.L32591:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L19932
.L32590:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L19928
.L32589:
	addl	$25, %r12d
	jmp	.L19920
.L32580:
	movl	constructor_incremental(%rip), %ecx
	testl	%ecx, %ecx
	je	.L19877
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, -800(%rbp)
	je	.L19875
	testq	%rax, %rax
	jne	.L19878
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L19885
.L29947:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L32592
.L19905:
	cmpb	$18, 16(%rdi)
	je	.L32593
.L19911:
	movl	$0, constructor_incremental(%rip)
.L19877:
	movq	-800(%rbp), %rdi
	movq	%r15, %rsi
	call	add_pending_init
	jmp	.L19852
.L32593:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L32594
	movq	global_trees+136(%rip), %rax
.L31528:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L19911
.L32594:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31528
.L32592:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L19911
	testb	$2, 53(%rax)
	je	.L19911
	cmpq	$0, 72(%rax)
	jne	.L19911
.L19891:
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L19911
	testb	$2, 53(%rax)
	je	.L19911
	cmpq	$0, 72(%rax)
	jne	.L19911
	jmp	.L19891
.L19885:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L19885
	movq	constructor_type(%rip), %rdi
	jmp	.L29947
.L19878:
	movq	-800(%rbp), %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L19877
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L19898
	cmpb	$18, %al
	jne	.L19877
.L19898:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L19904
.L29950:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L19905
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L19911
	testb	$2, 53(%rax)
	je	.L19911
	cmpq	$0, 72(%rax)
	jne	.L19911
.L19910:
	movq	constructor_unfilled_fields(%rip), %r8
	movq	(%r8), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L19911
	testb	$2, 53(%rax)
	je	.L19911
	cmpq	$0, 72(%rax)
	jne	.L19911
	jmp	.L19910
.L19904:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L19904
	movq	constructor_type(%rip), %rdi
	jmp	.L29950
.L32579:
	movl	constructor_incremental(%rip), %r14d
	testl	%r14d, %r14d
	je	.L19877
	movq	-800(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31093
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L19877
	movq	-800(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L19877
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L19857
	cmpb	$18, %al
	jne	.L19877
.L19857:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L19863
.L29944:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L19905
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L19911
	testb	$2, 53(%rax)
	je	.L19911
	cmpq	$0, 72(%rax)
	jne	.L19911
.L19869:
	movq	constructor_unfilled_fields(%rip), %rsi
	movq	(%rsi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L19911
	testb	$2, 53(%rax)
	je	.L19911
	cmpq	$0, 72(%rax)
	jne	.L19911
	jmp	.L19869
.L19863:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L19863
	movq	constructor_type(%rip), %rdi
	jmp	.L29944
.L31093:
	movq	constructor_type(%rip), %rdi
	jmp	.L19854
.L32578:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L19852
.L32577:
	call	integer_zerop
	testl	%eax, %eax
	je	.L19850
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L19852
	movq	-800(%rbp), %r13
	cmpq	$0, (%r13)
	jne	.L19852
	jmp	.L19850
.L32576:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L19848
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L19848
.L32575:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L29939
.L19830:
	cmpl	$3, (%rbx)
	je	.L32595
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L19826:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L19830
.L29939:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L29941
.L19844:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32596
	cmpl	$2, %eax
	je	.L32597
.L19838:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r8d
	leaq	1(%rdx), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L19834
.L19843:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L19843
.L19834:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L19844
.L29941:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	jne	.L32598
.L19847:
	movq	global_trees(%rip), %r12
	jmp	.L19848
.L32598:
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L19847
.L32597:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L19838
.L32596:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L19834
.L32595:
	addl	$25, %r12d
	jmp	.L19826
.L19819:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L19822
	movq	constructor_type(%rip), %rsi
	movzbl	16(%rsi), %r13d
	subb	$20, %r13b
	cmpb	$1, %r13b
	ja	.L19818
	movq	-800(%rbp), %r15
	testb	$2, 53(%r15)
	je	.L19818
	cmpb	$25, 16(%r12)
	je	.L19818
.L19822:
	movl	$0, constructor_simple(%rip)
	jmp	.L19818
.L32574:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L19818
.L32573:
	movl	require_constant_value(%rip), %edx
	testl	%edx, %edx
	je	.L19816
	movl	flag_isoc99(%rip), %r11d
	testl	%r11d, %r11d
	jne	.L19816
	movl	$1, %r10d
	testl	%r10d, %r10d
	je	.L19816
	movq	32(%r12), %rdi
	movq	32(%rdi), %r9
	movq	104(%r9), %r12
	jmp	.L19816
.L32572:
	cmpb	$29, 16(%r12)
	je	.L32599
.L19719:
	movq	128(%rdx), %rdi
	movq	128(%r14), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L31085
	movq	-760(%rbp), %rax
	movq	8(%rax), %rdi
.L19718:
	movzbl	16(%rdi), %r13d
	movq	%rdi, %rbx
	cmpl	$23, %r13d
	je	.L19721
	cmpl	$18, %r13d
	je	.L19721
	movq	-760(%rbp), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$32, %al
	je	.L32600
	movl	optimize(%rip), %r8d
	testl	%r8d, %r8d
	je	.L19784
	cmpb	$34, %al
	je	.L32601
.L19784:
	movzbl	16(%r12), %ecx
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L31092
	cmpb	$115, %cl
	je	.L32602
.L19793:
	movzbl	%cl, %edi 
	movzbl	tree_code_type(%rdi), %eax
	cmpb	$60, %al
	je	.L19798
	cmpb	$49, %al
	je	.L19798
	cmpb	$50, %al
	je	.L19798
	cmpb	$101, %al
	je	.L19798
.L19797:
	cmpl	$10, %r13d
	je	.L32603
	cmpb	$39, %cl
	je	.L32604
.L19806:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L19811
	testb	$32, 17(%rbx)
	je	.L19812
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L19813
	movzwl	60(%rbx), %r8d
	movq	integer_types+40(%rip), %rbx
	movzwl	60(%rbx), %ecx
	andl	$511, %r8d
	andl	$511, %ecx
	cmpl	%ecx, %r8d
	je	.L19813
.L19812:
	movq	integer_types+40(%rip), %rdi
.L31968:
	movq	%r12, %rsi
.L31969:
	call	convert
.L31525:
	movq	%rax, %rbx
.L31516:
	movq	global_trees(%rip), %r8
.L19782:
	movq	%rbx, %r12
	jmp	.L19717
.L19813:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31968
.L19811:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L19814
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L19814
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%rbx)
	je	.L32605
.L19814:
	cmpl	$5, %r13d
	je	.L32606
.L19815:
	movq	%r12, %rbx
	jmp	.L31516
.L32606:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31517:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L19782
.L32605:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31968
.L32604:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L19806
	movq	integer_types+40(%rip), %r15
	movq	40(%rdx), %rdi
	movzwl	60(%r15), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L19806
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L19812
	testb	$32, 17(%rbx)
	jne	.L19813
	jmp	.L19812
.L32603:
	movq	integer_types+40(%rip), %rsi
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%rsi), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L19805
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L19804
.L19805:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L19804:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31968
.L19798:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L19797
.L32602:
	movq	32(%r12), %rsi
	movq	8(%r12), %r11
	cmpq	%r11, 8(%rsi)
	jne	.L19793
.L19796:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L32607
.L31092:
	movq	32(%r12), %rsi
	jmp	.L19796
.L32607:
	cmpb	$115, %cl
	jne	.L19793
	movq	32(%rsi), %r9
	movq	8(%r12), %r10
	cmpq	%r10, 8(%r9)
	movq	%r9, %rsi
	je	.L19796
	jmp	.L19793
.L32601:
	movl	pedantic(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L19788
	movq	-760(%rbp), %rbx
	cmpb	$51, 48(%rbx)
	je	.L19788
	cmpq	$0, current_function_decl(%rip)
	je	.L19790
	movzbl	17(%rbx), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L32608
.L19790:
	movq	-760(%rbp), %rsi
.L19791:
	movq	%rsi, %r12
.L19788:
	movq	8(%r12), %rbx
	jmp	.L19784
.L32608:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L19790
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L19790
	testb	$2, 17(%rax)
	je	.L19790
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L19791
	jmp	.L19790
.L32600:
	movq	104(%rcx), %r12
	jmp	.L19784
.L19721:
	movq	-760(%rbp), %rax
	xorl	%r15d, %r15d
	movl	%r13d, %r8d
	movzbl	16(%rax), %edx
	cmpb	$116, %dl
	je	.L29935
	cmpb	$115, %dl
	je	.L32609
	movq	-760(%rbp), %rsi
	movzbl	16(%rsi), %ecx
.L19723:
	movzbl	%cl, %r9d 
	movzbl	tree_code_type(%r9), %eax
	cmpb	$60, %al
	je	.L19729
	cmpb	$49, %al
	je	.L19729
	cmpb	$50, %al
	je	.L19729
	cmpb	$101, %al
	je	.L19729
.L19728:
	cmpl	$23, %r8d
	je	.L32610
	cmpl	$18, %r8d
	jne	.L19815
	movzbl	%cl, %r8d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r8), %eax
	movq	8(%rdi), %r13
	cmpb	$114, %al
	je	.L19734
	cmpb	$100, %al
	je	.L19734
.L19733:
	movzbl	17(%rdi), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %ebx
	shrb	$3, %r10b
	shrb	$4, %bl
	andl	$1, %r10d
	andl	%ebx, %r9d
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rdi), %r10d
	movzbl	16(%rdi), %edi
	movl	%r10d, %esi
	shrb	$5, %sil
	andl	$1, %esi
	sall	$2, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	cmpb	$20, %dil
	je	.L32611
.L19737:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L19736
	testl	%edx, %edx
	jne	.L19736
	testl	%r11d, %r11d
	je	.L19735
.L19736:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%ebx, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L32612
.L19739:
	leal	0(,%rcx,8), %r8d
	leal	(%r11,%r11), %edi
	orl	%r8d, %esi
	orl	%edx, %esi
	orl	%edi, %esi
	movq	%r13, %rdi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L19735:
	cmpb	$41, %cl
	je	.L32613
	cmpb	$47, %cl
	je	.L32614
	xorl	%ebx, %ebx
	testl	%r15d, %r15d
	je	.L32615
.L19778:
	movl	flag_isoc99(%rip), %r15d
	testl	%r15d, %r15d
	jne	.L19779
	testl	%ebx, %ebx
	je	.L19815
.L19779:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L32616
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L31969
.L32616:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L31517
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %ecx
	andb	$1, %cl
	addb	%cl, %cl
	andb	$-4, %r12b
	orb	%cl, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L31516
.L32615:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L19778
.L32614:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r15d
	movq	%r13, %rax
	cmpl	$23, %r15d
	je	.L19743
	cmpl	$18, %r15d
	je	.L19743
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L32617
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L19746
	cmpb	$34, %dl
	je	.L32618
.L19746:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L31090
	cmpb	$115, %dl
	je	.L32619
.L19755:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L19760
	cmpb	$49, %al
	je	.L19760
	cmpb	$50, %al
	je	.L19760
	cmpb	$101, %al
	je	.L19760
.L19759:
	cmpl	$10, %r15d
	je	.L32620
	cmpb	$39, %dl
	je	.L32621
.L19768:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L19773
	testb	$32, 17(%r13)
	je	.L19774
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L19775
	movzwl	60(%r13), %r10d
	movq	integer_types+40(%rip), %r13
	movzwl	60(%r13), %r11d
	andl	$511, %r10d
	andl	$511, %r11d
	cmpl	%r11d, %r10d
	je	.L19775
.L19774:
	movq	integer_types+40(%rip), %rdi
.L31515:
	movq	%rbx, %rsi
	call	convert
.L19744:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31525
.L19775:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31515
.L19773:
	movl	flag_traditional(%rip), %r9d
	testl	%r9d, %r9d
	je	.L19776
	movl	flag_allow_single_precision(%rip), %edi
	testl	%edi, %edi
	jne	.L19776
	movq	global_trees+192(%rip), %rsi
	cmpq	%rsi, 128(%r13)
	je	.L32622
.L19776:
	cmpl	$5, %r15d
	je	.L32623
	movq	%rbx, %rax
	jmp	.L19744
.L32623:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L19744
.L32622:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31515
.L32621:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L19768
	movq	integer_types+40(%rip), %r8
	movq	40(%rdx), %rdi
	movzwl	60(%r8), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L19768
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L19774
	testb	$32, 17(%r13)
	jne	.L19775
	jmp	.L19774
.L32620:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r15d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r15d, %r15d
	jne	.L19767
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L19766
.L19767:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L19766:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31515
.L19760:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L19759
.L32619:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L19755
.L19758:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L32624
.L31090:
	movq	32(%rbx), %rsi
	jmp	.L19758
.L32624:
	cmpb	$115, %dl
	jne	.L19755
	movq	32(%rsi), %rdi
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%rdi)
	movq	%rdi, %rsi
	je	.L19758
	jmp	.L19755
.L32618:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L19750
	cmpb	$51, 48(%rbx)
	je	.L19750
	cmpq	$0, current_function_decl(%rip)
	je	.L19752
	movzbl	17(%rbx), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L32625
.L19752:
	movq	%rbx, %rsi
.L19753:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L19750:
	movq	%rax, %r13
	jmp	.L19746
.L32625:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L19752
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L19752
	testb	$2, 17(%rax)
	je	.L19752
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L19753
	jmp	.L19752
.L32617:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L19746
.L19743:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L19744
.L32613:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L31969
.L32612:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L19739
.L32611:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L19737
.L19734:
	movzbl	17(%r12), %ebx
	movl	$1, %r11d
	movl	%ebx, %edx
	shrb	$3, %bl
	shrb	$4, %dl
	andl	%ebx, %r11d
	andl	$1, %edx
	jmp	.L19733
.L32610:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31525
.L19729:
	movq	-760(%rbp), %rdx
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L19728
.L32609:
	movq	32(%rax), %r13
	cmpq	%rdi, 8(%r13)
	je	.L29935
	movl	$115, %ecx
	jmp	.L19723
.L29935:
	movq	-760(%rbp), %r12
	movl	%edx, %ecx
	movq	32(%r12), %rsi
.L19727:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r15d
	cmpb	$116, %cl
	jne	.L32626
	movq	32(%r12), %rsi
	jmp	.L19727
.L32626:
	cmpb	$115, %cl
	jne	.L19723
	movq	32(%rsi), %rsi
	movq	8(%r12), %r10
	cmpq	%r10, 8(%rsi)
	je	.L19727
	jmp	.L19723
.L32599:
	cmpb	$18, 16(%r14)
	jne	.L19719
	movq	8(%r14), %rbx
	cmpb	$6, 16(%rbx)
	jne	.L19719
	jmp	.L31085
.L19714:
	movslq	%eax,%rsi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L31514
	.p2align 6,,7
.L32215:
	movq	constructor_index(%rip), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L19687
	movq	constructor_max_index(%rip), %rdi
	call	integer_all_onesp
	testl	%eax, %eax
	je	.L19686
.L19687:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC168, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r11
	xorl	%r12d, %r12d
	cmpq	%r11, %r8
	movq	%r8, %rbx
	movq	%r11, %r13
	jae	.L29931
.L19694:
	cmpl	$3, (%rbx)
	je	.L32627
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L19690:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L19694
.L29931:
	movslq	%r12d,%rsi
	movq	%r8, %r12
	addq	$16, %rsi
	andq	$-16, %rsi
	subq	%rsi, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30725
.L19708:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32628
	cmpl	$2, %eax
	je	.L32629
.L19702:
	movq	8(%r12), %r10
	movzbl	(%r10), %r8d
	leaq	1(%r10), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L19698
.L19707:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L19707
.L19698:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L19708
.L30725:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L25741
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L25741
.L32629:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L19702
.L32628:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L19698
.L32627:
	addl	$25, %r12d
	jmp	.L19690
	.p2align 6,,7
.L32214:
	movq	8(%r14), %rcx
	cmpb	$6, 16(%rcx)
	jne	.L19682
	movl	-652(%rbp), %eax
	testl	%eax, %eax
	je	.L19682
	movq	-152(%rbp), %rbx
	movq	%rbx, -760(%rbp)
	jmp	.L19683
.L19681:
	cmpb	$9, %dl
	je	.L32630
	cmpq	$0, constructor_fields(%rip)
	je	.L32631
	cmpq	$0, -760(%rbp)
	je	.L20334
	movq	-760(%rbp), %r12
	movq	$0, -816(%rbp)
	movq	8(%r12), %rbx
	movzbl	16(%rbx), %eax
	cmpb	$23, %al
	je	.L20336
	cmpb	$18, %al
	je	.L32632
.L31107:
	movq	global_trees(%rip), %r8
.L20335:
	cmpb	$-86, 16(%r12)
	je	.L32633
.L20434:
	cmpq	%r8, %r12
	je	.L32634
	testb	$2, 17(%r12)
	jne	.L20437
	movl	$0, constructor_constant(%rip)
.L20436:
	movl	require_constant_value(%rip), %r13d
	testl	%r13d, %r13d
	je	.L20441
	testb	$2, 17(%r12)
	je	.L32635
.L20441:
	movl	require_constant_elements(%rip), %ecx
	testl	%ecx, %ecx
	jne	.L32636
.L20466:
	cmpq	$0, -816(%rbp)
	je	.L20468
	movq	8, %rax
	cmpq	global_trees(%rip), %rax
	je	.L20334
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L32637
.L20468:
	movl	require_constant_value(%rip), %edx
	movl	require_constant_elements(%rip), %ecx
	movq	%r14, %rdi
	movq	%r12, %rsi
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, %r15
	je	.L32638
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L32639
.L20472:
	cmpb	$20, 16(%rdi)
	je	.L32640
.L20493:
	cmpb	$21, 16(%rdi)
	je	.L32641
.L20492:
	cmpq	$0, -816(%rbp)
	je	.L20560
	cmpb	$25, 16
	je	.L32642
.L20560:
	movq	-816(%rbp), %rdi
	movq	constructor_elements(%rip), %rdx
	movq	%r15, %rsi
	call	tree_cons
	movq	constructor_type(%rip), %r15
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r15), %eax
	cmpb	$18, %al
	je	.L32643
	cmpb	$20, %al
	je	.L32644
	cmpb	$21, 16(%r15)
	je	.L32645
.L20562:
	movl	$1, %r14d
	testl	%r14d, %r14d
	je	.L20334
	xorl	%r15d, %r15d
	movq	constructor_pending_elts(%rip), %rbx
.L20572:
	xorl	%r14d, %r14d
	testq	%rbx, %rbx
	je	.L20574
.L20608:
	movq	constructor_type(%rip), %r12
	movzbl	16(%r12), %eax
	cmpb	$18, %al
	je	.L32646
	subb	$20, %al
	cmpb	$1, %al
	ja	.L20573
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L20574
	call	bit_position
	movq	32(%rbx), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L20594
	movq	32(%rbx), %r8
	movq	40(%rbx), %rdi
	movq	%r8, constructor_unfilled_fields(%rip)
	movq	8(%r8), %rsi
	movq	%r8, %rdx
.L31562:
	xorl	%ecx, %ecx
	call	output_init_element
.L20573:
	testq	%rbx, %rbx
	jne	.L20608
.L20574:
	testl	%r15d, %r15d
	je	.L20334
	testq	%r14, %r14
	je	.L20334
	movq	constructor_type(%rip), %r10
	movzbl	16(%r10), %edx
	leal	-20(%rdx), %esi
	cmpb	$1, %sil
	jbe	.L32647
	cmpb	$18, %dl
	jne	.L20572
	movq	%r14, constructor_unfilled_index(%rip)
	jmp	.L20572
.L32647:
	movq	%r14, constructor_unfilled_fields(%rip)
	jmp	.L20572
.L20334:
	movq	$0, constructor_fields(%rip)
	jmp	.L19358
	.p2align 6,,7
.L20594:
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L20596
.L31978:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.L20597
.L31561:
	movq	%rax, %rbx
	jmp	.L20573
.L20597:
	movq	32(%rbx), %r14
	jmp	.L20574
.L20596:
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L31561
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L20603
	cmpq	%rbx, 8(%rax)
	je	.L20606
.L20603:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L20574
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
.L31979:
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L20573
	jmp	.L20597
.L20606:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L20603
	cmpq	%rbx, 8(%rax)
	je	.L20606
	jmp	.L20603
.L32646:
	movq	32(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L20577
	movq	constructor_type(%rip), %r13
	movq	40(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rdx
	movq	8(%r13), %rsi
	jmp	.L31562
.L20577:
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rbx), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L31978
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L31561
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L20586
	cmpq	%rbx, 8(%rax)
	je	.L20589
.L20586:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L20574
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	jmp	.L31979
.L20589:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L20586
	cmpq	%rbx, 8(%rax)
	je	.L20589
	jmp	.L20586
.L32645:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L20562
.L32644:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L20562
	testb	$2, 53(%rax)
	je	.L20562
	cmpq	$0, 72(%rax)
	jne	.L20562
.L20568:
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L20562
	testb	$2, 53(%rax)
	je	.L20562
	cmpq	$0, 72(%rax)
	jne	.L20562
	jmp	.L20568
.L32643:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L20562
.L32642:
	xorl	%edi, %edi
	call	copy_node
	movq	%rax, -816(%rbp)
	jmp	.L20560
.L32641:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L20492
	movq	32(%rax), %rsi
	testb	$1, 17(%rsi)
	jne	.L32648
.L20535:
	movq	$0, constructor_elements(%rip)
	jmp	.L20492
.L32648:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r10
	xorl	%r12d, %r12d
	cmpq	%r10, %r8
	movq	%r8, %rbx
	movq	%r10, %r13
	jae	.L30015
.L20542:
	cmpl	$3, (%rbx)
	je	.L32649
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L20538:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L20542
.L30015:
	movslq	%r12d,%rdx
	movq	%r8, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30017
.L20556:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32650
	cmpl	$2, %eax
	je	.L32651
.L20550:
	movq	8(%r12), %rdi
	movzbl	(%rdi), %r11d
	leaq	1(%rdi), %rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	je	.L20546
.L20555:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L20555
.L20546:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L20556
.L30017:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L20535
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L20535
.L32651:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L20550
.L32650:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L20546
.L32649:
	addl	$25, %r12d
	jmp	.L20538
.L32640:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L20495
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, -816(%rbp)
	je	.L20493
	testq	%rax, %rax
	jne	.L20496
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L20503
.L30009:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L32652
.L20523:
	cmpb	$18, 16(%rdi)
	je	.L32653
.L20529:
	movl	$0, constructor_incremental(%rip)
.L20495:
	xorl	%edi, %edi
	movq	%r15, %rsi
	call	add_pending_init
	jmp	.L20334
.L32653:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L32654
	movq	global_trees+136(%rip), %rax
.L31560:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L20529
.L32654:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31560
.L32652:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L20529
	testb	$2, 53(%rax)
	je	.L20529
	cmpq	$0, 72(%rax)
	jne	.L20529
.L20509:
	movq	constructor_unfilled_fields(%rip), %r9
	movq	(%r9), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L20529
	testb	$2, 53(%rax)
	je	.L20529
	cmpq	$0, 72(%rax)
	jne	.L20529
	jmp	.L20509
.L20503:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L20503
	movq	constructor_type(%rip), %rdi
	jmp	.L30009
.L20496:
	xorl	%edi, %edi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L20495
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L20516
	cmpb	$18, %al
	jne	.L20495
.L20516:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L20522
.L30012:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L20523
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L20529
	testb	$2, 53(%rax)
	je	.L20529
	cmpq	$0, 72(%rax)
	jne	.L20529
.L20528:
	movq	constructor_unfilled_fields(%rip), %r8
	movq	(%r8), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L20529
	testb	$2, 53(%rax)
	je	.L20529
	cmpq	$0, 72(%rax)
	jne	.L20529
	jmp	.L20528
.L20522:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L20522
	movq	constructor_type(%rip), %rdi
	jmp	.L30012
.L32639:
	movl	constructor_incremental(%rip), %r14d
	testl	%r14d, %r14d
	je	.L20495
	movq	constructor_unfilled_index(%rip), %rsi
	xorl	%edi, %edi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31115
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L20495
	movq	constructor_unfilled_index(%rip), %rsi
	xorl	%edi, %edi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L20495
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L20475
	cmpb	$18, %al
	jne	.L20495
.L20475:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L20481
.L30006:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L20523
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L20529
	testb	$2, 53(%rax)
	je	.L20529
	cmpq	$0, 72(%rax)
	jne	.L20529
.L20487:
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L20529
	testb	$2, 53(%rax)
	je	.L20529
	cmpq	$0, 72(%rax)
	jne	.L20529
	jmp	.L20487
.L20481:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L20481
	movq	constructor_type(%rip), %rdi
	jmp	.L30006
.L31115:
	movq	constructor_type(%rip), %rdi
	jmp	.L20472
.L32638:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L20334
.L32637:
	call	integer_zerop
	testl	%eax, %eax
	je	.L20468
	movq	constructor_type(%rip), %rbx
	cmpb	$18, 16(%rbx)
	je	.L20334
	cmpq	$0, 0
	jne	.L20334
	jmp	.L20468
.L32636:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L20466
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L20466
.L32635:
	movl	$.LC146, %esi
	xorl	%eax, %eax
	movl	$.LC42, %edi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rsi
	xorl	%r12d, %r12d
	cmpq	%rsi, %r8
	movq	%r8, %rbx
	movq	%rsi, %r13
	jae	.L30001
.L20448:
	cmpl	$3, (%rbx)
	je	.L32655
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L20444:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L20448
.L30001:
	movslq	%r12d,%r15
	movq	%r8, %r12
	addq	$16, %r15
	andq	$-16, %r15
	subq	%r15, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L30003
.L20462:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32656
	cmpl	$2, %eax
	je	.L32657
.L20456:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r10d
	leaq	1(%rdx), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L20452
.L20461:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L20461
.L20452:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L20462
.L30003:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	jne	.L32658
.L20465:
	movq	global_trees(%rip), %r12
	jmp	.L20466
.L32658:
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L20465
.L32657:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L20456
.L32656:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L20452
.L32655:
	addl	$25, %r12d
	jmp	.L20444
.L20437:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L20440
	movq	constructor_type(%rip), %r8
	movzbl	16(%r8), %r9d
	subb	$20, %r9b
	cmpb	$1, %r9b
	ja	.L20436
	testb	$2, 53
	je	.L20436
	cmpb	$25, 16(%r12)
	je	.L20436
.L20440:
	movl	$0, constructor_simple(%rip)
	jmp	.L20436
.L32634:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L20436
.L32633:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L20434
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L20434
	movl	$1, %edx
	testl	%edx, %edx
	je	.L20434
	movq	32(%r12), %rdi
	movq	32(%rdi), %r11
	movq	104(%r11), %r12
	jmp	.L20434
.L32632:
	cmpb	$29, 16(%r12)
	je	.L32659
.L20337:
	movq	-760(%rbp), %rax
	movq	128(%r14), %rsi
	movq	8(%rax), %r13
	movq	128(%r13), %rdi
	call	comptypes
	testl	%eax, %eax
	jne	.L31107
.L20336:
	movq	-760(%rbp), %rcx
	movq	8(%rcx), %rbx
	movzbl	16(%rbx), %r13d
	cmpl	$23, %r13d
	je	.L20339
	cmpl	$18, %r13d
	je	.L20339
	movq	-760(%rbp), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$32, %al
	je	.L32660
	movl	optimize(%rip), %r10d
	testl	%r10d, %r10d
	je	.L20402
	cmpb	$34, %al
	je	.L32661
.L20402:
	movzbl	16(%r12), %ecx
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L31114
	cmpb	$115, %cl
	je	.L32662
.L20411:
	movzbl	%cl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L20416
	cmpb	$49, %al
	je	.L20416
	cmpb	$50, %al
	je	.L20416
	cmpb	$101, %al
	je	.L20416
.L20415:
	cmpl	$10, %r13d
	je	.L32663
	cmpb	$39, %cl
	je	.L32664
.L20424:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L20429
	testb	$32, 17(%rbx)
	je	.L20430
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L20431
	movzwl	60(%rbx), %r10d
	movq	integer_types+40(%rip), %rbx
	movzwl	60(%rbx), %ecx
	andl	$511, %r10d
	andl	$511, %ecx
	cmpl	%ecx, %r10d
	je	.L20431
.L20430:
	movq	integer_types+40(%rip), %rdi
.L31976:
	movq	%r12, %rsi
.L31977:
	call	convert
.L31557:
	movq	%rax, %rbx
.L31548:
	movq	global_trees(%rip), %r8
.L20400:
	movq	%rbx, %r12
	jmp	.L20335
.L20431:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31976
.L20429:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L20432
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L20432
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%rbx)
	je	.L32665
.L20432:
	cmpl	$5, %r13d
	je	.L32666
.L20433:
	movq	%r12, %rbx
	jmp	.L31548
.L32666:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31549:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L20400
.L32665:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31976
.L32664:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L20424
	movq	integer_types+40(%rip), %r15
	movq	40(%rdx), %rdi
	movzwl	60(%r15), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L20424
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L20430
	testb	$32, 17(%rbx)
	jne	.L20431
	jmp	.L20430
.L32663:
	movq	integer_types+40(%rip), %rsi
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%rsi), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L20423
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L20422
.L20423:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L20422:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31976
.L20416:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L20415
.L32662:
	movq	32(%r12), %rsi
	movq	8(%r12), %r11
	cmpq	%r11, 8(%rsi)
	jne	.L20411
.L20414:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L32667
.L31114:
	movq	32(%r12), %rsi
	jmp	.L20414
.L32667:
	cmpb	$115, %cl
	jne	.L20411
	movq	32(%rsi), %r9
	movq	8(%r12), %rdi
	cmpq	%rdi, 8(%r9)
	movq	%r9, %rsi
	je	.L20414
	jmp	.L20411
.L32661:
	movl	pedantic(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L20406
	movq	-760(%rbp), %rbx
	cmpb	$51, 48(%rbx)
	je	.L20406
	cmpq	$0, current_function_decl(%rip)
	je	.L20408
	movzbl	17(%rbx), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L32668
.L20408:
	movq	-760(%rbp), %rsi
.L20409:
	movq	%rsi, %r12
.L20406:
	movq	8(%r12), %rbx
	jmp	.L20402
.L32668:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L20408
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L20408
	testb	$2, 17(%rax)
	je	.L20408
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L20409
	jmp	.L20408
.L32660:
	movq	104(%rcx), %r12
	jmp	.L20402
.L20339:
	movq	-760(%rbp), %rcx
	xorl	%r15d, %r15d
	movl	%r13d, %edi
	movzbl	16(%rcx), %edx
	cmpb	$116, %dl
	je	.L29997
	cmpb	$115, %dl
	je	.L32669
	movq	-760(%rbp), %rdx
	movzbl	16(%rdx), %ecx
.L20341:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L20347
	cmpb	$49, %al
	je	.L20347
	cmpb	$50, %al
	je	.L20347
	cmpb	$101, %al
	je	.L20347
.L20346:
	cmpl	$23, %edi
	je	.L32670
	cmpl	$18, %edi
	jne	.L20433
	movzbl	%cl, %edi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rdi), %eax
	movq	8(%rbx), %r13
	cmpb	$114, %al
	je	.L20352
	cmpb	$100, %al
	je	.L20352
.L20351:
	movzbl	17(%rbx), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %edi
	shrb	$3, %r10b
	shrb	$4, %dil
	andl	$1, %r10d
	andl	%edi, %r9d
	movzbl	16(%rbx), %edi
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rbx), %r10d
	movl	%r10d, %esi
	shrb	$5, %sil
	andl	$1, %esi
	sall	$2, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	cmpb	$20, %dil
	je	.L32671
.L20355:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L20354
	testl	%edx, %edx
	jne	.L20354
	testl	%r11d, %r11d
	je	.L20353
.L20354:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%ebx, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L32672
.L20357:
	leal	0(,%rcx,8), %r10d
	leal	(%r11,%r11), %r8d
	movq	%r13, %rdi
	orl	%r10d, %esi
	orl	%edx, %esi
	orl	%r8d, %esi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L20353:
	cmpb	$41, %cl
	je	.L32673
	cmpb	$47, %cl
	je	.L32674
	xorl	%ebx, %ebx
	testl	%r15d, %r15d
	je	.L32675
.L20396:
	movl	flag_isoc99(%rip), %r15d
	testl	%r15d, %r15d
	jne	.L20397
	testl	%ebx, %ebx
	je	.L20433
.L20397:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L32676
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L31977
.L32676:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L31549
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %ecx
	andb	$1, %cl
	addb	%cl, %cl
	andb	$-4, %r12b
	orb	%cl, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L31548
.L32675:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L20396
.L32674:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r15d
	movq	%r13, %rax
	cmpl	$23, %r15d
	je	.L20361
	cmpl	$18, %r15d
	je	.L20361
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L32677
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L20364
	cmpb	$34, %dl
	je	.L32678
.L20364:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L31112
	cmpb	$115, %dl
	je	.L32679
.L20373:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L20378
	cmpb	$49, %al
	je	.L20378
	cmpb	$50, %al
	je	.L20378
	cmpb	$101, %al
	je	.L20378
.L20377:
	cmpl	$10, %r15d
	je	.L32680
	cmpb	$39, %dl
	je	.L32681
.L20386:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L20391
	testb	$32, 17(%r13)
	je	.L20392
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L20393
	movzwl	60(%r13), %edi
	movq	integer_types+40(%rip), %r13
	movzwl	60(%r13), %r11d
	andl	$511, %edi
	andl	$511, %r11d
	cmpl	%r11d, %edi
	je	.L20393
.L20392:
	movq	integer_types+40(%rip), %rdi
.L31547:
	movq	%rbx, %rsi
	call	convert
.L20362:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31557
.L20393:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31547
.L20391:
	movl	flag_traditional(%rip), %r9d
	testl	%r9d, %r9d
	je	.L20394
	movl	flag_allow_single_precision(%rip), %r8d
	testl	%r8d, %r8d
	jne	.L20394
	movq	global_trees+192(%rip), %rsi
	cmpq	%rsi, 128(%r13)
	je	.L32682
.L20394:
	cmpl	$5, %r15d
	je	.L32683
	movq	%rbx, %rax
	jmp	.L20362
.L32683:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L20362
.L32682:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31547
.L32681:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L20386
	movq	integer_types+40(%rip), %r10
	movq	40(%rdx), %rdi
	movzwl	60(%r10), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L20386
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L20392
	testb	$32, 17(%r13)
	jne	.L20393
	jmp	.L20392
.L32680:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r15d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r15d, %r15d
	jne	.L20385
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L20384
.L20385:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L20384:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31547
.L20378:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L20377
.L32679:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rdi, 8(%rsi)
	jne	.L20373
.L20376:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L32684
.L31112:
	movq	32(%rbx), %rsi
	jmp	.L20376
.L32684:
	cmpb	$115, %dl
	jne	.L20373
	movq	32(%rsi), %r8
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%r8)
	movq	%r8, %rsi
	je	.L20376
	jmp	.L20373
.L32678:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L20368
	cmpb	$51, 48(%rbx)
	je	.L20368
	cmpq	$0, current_function_decl(%rip)
	je	.L20370
	movzbl	17(%rbx), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L32685
.L20370:
	movq	%rbx, %rsi
.L20371:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L20368:
	movq	%rax, %r13
	jmp	.L20364
.L32685:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L20370
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L20370
	testb	$2, 17(%rax)
	je	.L20370
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L20371
	jmp	.L20370
.L32677:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L20364
.L20361:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L20362
.L32673:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L31977
.L32672:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L20357
.L32671:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L20355
.L20352:
	movzbl	17(%r12), %r9d
	movl	$1, %r11d
	movl	%r9d, %edx
	shrb	$3, %r9b
	shrb	$4, %dl
	andl	%r9d, %r11d
	andl	$1, %edx
	jmp	.L20351
.L32670:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31557
.L20347:
	movq	-760(%rbp), %r10
	movl	24(%r10), %eax
	movl	%eax, 24(%r12)
	jmp	.L20346
.L32669:
	movq	32(%rcx), %r8
	cmpq	%rbx, 8(%r8)
	je	.L29997
	movl	$115, %ecx
	jmp	.L20341
.L29997:
	movq	-760(%rbp), %r12
	movl	%edx, %ecx
	movq	32(%r12), %rsi
.L20345:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r15d
	cmpb	$116, %cl
	jne	.L32686
	movq	32(%r12), %rsi
	jmp	.L20345
.L32686:
	cmpb	$115, %cl
	jne	.L20341
	movq	32(%rsi), %rsi
	movq	8(%r12), %r11
	cmpq	%r11, 8(%rsi)
	je	.L20345
	jmp	.L20341
.L32659:
	cmpb	$18, %dl
	jne	.L20337
	movq	8(%r14), %r9
	cmpb	$6, 16(%r9)
	jne	.L20337
	jmp	.L31107
.L32631:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC170, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r14
	xorl	%r12d, %r12d
	cmpq	%r14, %r8
	movq	%r8, %rbx
	movq	%r14, %r13
	jae	.L29993
.L20315:
	cmpl	$3, (%rbx)
	je	.L32687
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L20311:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L20315
.L29993:
	movslq	%r12d,%rdx
	movq	%r8, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30725
.L20329:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32688
	cmpl	$2, %eax
	je	.L32689
.L20323:
	movq	8(%r12), %rdi
	movzbl	(%rdi), %r10d
	leaq	1(%rdi), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L20319
.L20328:
	movzbl	(%rcx), %r15d
	incq	%rbx
	incq	%rcx
	testb	%r15b, %r15b
	movb	%r15b, (%rbx)
	jne	.L20328
.L20319:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L20329
	jmp	.L30725
.L32689:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L20323
.L32688:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L20319
.L32687:
	addl	$25, %r12d
	jmp	.L20311
.L32630:
	movq	8(%rbx), %r9
	movq	constructor_max_index(%rip), %rdi
	movq	constructor_index(%rip), %rsi
	movq	128(%r9), %rdx
	movq	%rdx, -208(%rbp)
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L32690
	cmpq	$0, -760(%rbp)
	je	.L20025
	movq	-760(%rbp), %r12
	movq	constructor_index(%rip), %r15
	movq	8(%r12), %rdi
	movzbl	16(%rdi), %eax
	movq	%rdi, %rdx
	cmpb	$23, %al
	je	.L20027
	cmpb	$18, %al
	je	.L32691
.L31096:
	movq	global_trees(%rip), %r8
.L20026:
	cmpb	$-86, 16(%r12)
	je	.L32692
.L20125:
	cmpq	%r8, %r12
	je	.L32693
	testb	$2, 17(%r12)
	jne	.L20128
	movl	$0, constructor_constant(%rip)
.L20127:
	movl	require_constant_value(%rip), %r14d
	testl	%r14d, %r14d
	je	.L20132
	testb	$2, 17(%r12)
	je	.L32694
.L20132:
	movl	require_constant_elements(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L32695
.L20157:
	testq	%r15, %r15
	je	.L20159
	movq	8(%r15), %rax
	cmpq	global_trees(%rip), %rax
	je	.L20025
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L32696
.L20159:
	movq	-208(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%r12, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -808(%rbp)
	je	.L32697
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L32698
.L20163:
	cmpb	$20, 16(%rdi)
	je	.L32699
.L20184:
	cmpb	$21, 16(%rdi)
	je	.L32700
.L20183:
	testq	%r15, %r15
	je	.L20251
	cmpb	$25, 16(%r15)
	je	.L32701
.L20251:
	movq	-808(%rbp), %rsi
	movq	constructor_elements(%rip), %rdx
	movq	%r15, %rdi
	call	tree_cons
	movq	constructor_type(%rip), %r15
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r15), %eax
	cmpb	$18, %al
	je	.L32702
	cmpb	$20, %al
	je	.L32703
	cmpb	$21, 16(%r15)
	je	.L32704
.L20253:
	movl	$1, %r9d
	testl	%r9d, %r9d
	je	.L20025
	xorl	%r15d, %r15d
	movq	constructor_pending_elts(%rip), %rbx
.L20263:
	xorl	%r14d, %r14d
	testq	%rbx, %rbx
	je	.L20265
.L20299:
	movq	constructor_type(%rip), %r13
	movzbl	16(%r13), %eax
	cmpb	$18, %al
	je	.L32705
	subb	$20, %al
	cmpb	$1, %al
	ja	.L20264
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L20265
	call	bit_position
	movq	32(%rbx), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L20285
	movq	32(%rbx), %r8
	movq	40(%rbx), %rdi
	movq	%r8, constructor_unfilled_fields(%rip)
	movq	8(%r8), %rsi
	movq	%r8, %rdx
.L31546:
	xorl	%ecx, %ecx
	call	output_init_element
.L20264:
	testq	%rbx, %rbx
	jne	.L20299
.L20265:
	testl	%r15d, %r15d
	je	.L20025
	testq	%r14, %r14
	je	.L20025
	movq	constructor_type(%rip), %r11
	movzbl	16(%r11), %edx
	leal	-20(%rdx), %esi
	cmpb	$1, %sil
	jbe	.L32706
	cmpb	$18, %dl
	jne	.L20263
	movq	%r14, constructor_unfilled_index(%rip)
	jmp	.L20263
.L32706:
	movq	%r14, constructor_unfilled_fields(%rip)
	jmp	.L20263
.L20285:
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L20287
.L31974:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.L20288
.L31545:
	movq	%rax, %rbx
	jmp	.L20264
.L20288:
	movq	32(%rbx), %r14
	jmp	.L20265
.L20287:
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L31545
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L20294
	cmpq	%rbx, 8(%rax)
	je	.L20297
.L20294:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L20265
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
.L31975:
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L20264
	jmp	.L20288
.L20297:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L20294
	cmpq	%rbx, 8(%rax)
	je	.L20297
	jmp	.L20294
.L32705:
	movq	32(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L20268
	movq	constructor_type(%rip), %rcx
	movq	40(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rdx
	movq	8(%rcx), %rsi
	jmp	.L31546
.L20268:
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rbx), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L31974
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L31545
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L20277
	cmpq	%rbx, 8(%rax)
	je	.L20280
.L20277:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L20265
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	jmp	.L31975
.L20280:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L20277
	cmpq	%rbx, 8(%rax)
	je	.L20280
	jmp	.L20277
.L32704:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L20253
.L32703:
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L20253
	testb	$2, 53(%rax)
	je	.L20253
	cmpq	$0, 72(%rax)
	jne	.L20253
.L20259:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L20253
	testb	$2, 53(%rax)
	je	.L20253
	cmpq	$0, 72(%rax)
	jne	.L20253
	jmp	.L20259
.L32702:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L20253
.L32701:
	movq	%r15, %rdi
	call	copy_node
	movq	%rax, %r15
	jmp	.L20251
.L32700:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L20183
	movq	32(%rax), %r8
	testb	$1, 17(%r8)
	jne	.L32707
.L20226:
	movq	$0, constructor_elements(%rip)
	jmp	.L20183
.L32707:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L29984
.L20233:
	cmpl	$3, (%rbx)
	je	.L32708
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L20229:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L20233
.L29984:
	movslq	%r12d,%rdx
	movq	%r8, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L29986
.L20247:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32709
	cmpl	$2, %eax
	je	.L32710
.L20241:
	movq	8(%r12), %r10
	movzbl	(%r10), %r11d
	leaq	1(%r10), %rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	je	.L20237
.L20246:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L20246
.L20237:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L20247
.L29986:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L20226
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L20226
.L32710:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L20241
.L32709:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L20237
.L32708:
	addl	$25, %r12d
	jmp	.L20229
.L32699:
	movl	constructor_incremental(%rip), %r13d
	testl	%r13d, %r13d
	je	.L20186
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, %r15
	je	.L20184
	testq	%rax, %rax
	jne	.L20187
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L20194
.L29978:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L32711
.L20214:
	cmpb	$18, 16(%rdi)
	je	.L32712
.L20220:
	movl	$0, constructor_incremental(%rip)
.L20186:
	movq	-808(%rbp), %rsi
	movq	%r15, %rdi
	call	add_pending_init
	jmp	.L20025
.L32712:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L32713
	movq	global_trees+136(%rip), %rax
.L31544:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L20220
.L32713:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31544
.L32711:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L20220
	testb	$2, 53(%rax)
	je	.L20220
	cmpq	$0, 72(%rax)
	jne	.L20220
.L20200:
	movq	constructor_unfilled_fields(%rip), %rsi
	movq	(%rsi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L20220
	testb	$2, 53(%rax)
	je	.L20220
	cmpq	$0, 72(%rax)
	jne	.L20220
	jmp	.L20200
.L20194:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L20194
	movq	constructor_type(%rip), %rdi
	jmp	.L29978
.L20187:
	movq	%r15, %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r14
	call	bit_position
	movq	%r14, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L20186
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L20207
	cmpb	$18, %al
	jne	.L20186
.L20207:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L20213
.L29981:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L20214
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L20220
	testb	$2, 53(%rax)
	je	.L20220
	cmpq	$0, 72(%rax)
	jne	.L20220
.L20219:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L20220
	testb	$2, 53(%rax)
	je	.L20220
	cmpq	$0, 72(%rax)
	jne	.L20220
	jmp	.L20219
.L20213:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L20213
	movq	constructor_type(%rip), %rdi
	jmp	.L29981
.L32698:
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L20186
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31104
	movl	constructor_incremental(%rip), %edi
	testl	%edi, %edi
	je	.L20186
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L20186
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L20166
	cmpb	$18, %al
	jne	.L20186
.L20166:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L20172
.L29975:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L20214
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L20220
	testb	$2, 53(%rax)
	je	.L20220
	cmpq	$0, 72(%rax)
	jne	.L20220
.L20178:
	movq	constructor_unfilled_fields(%rip), %r9
	movq	(%r9), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L20220
	testb	$2, 53(%rax)
	je	.L20220
	cmpq	$0, 72(%rax)
	jne	.L20220
	jmp	.L20178
.L20172:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L20172
	movq	constructor_type(%rip), %rdi
	jmp	.L29975
.L31104:
	movq	constructor_type(%rip), %rdi
	jmp	.L20163
.L32697:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L20025
.L32696:
	call	integer_zerop
	testl	%eax, %eax
	je	.L20159
	movq	constructor_type(%rip), %r10
	cmpb	$18, 16(%r10)
	je	.L20025
	cmpq	$0, (%r15)
	jne	.L20025
	jmp	.L20159
.L32695:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L20157
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L20157
.L32694:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L29970
.L20139:
	cmpl	$3, (%rbx)
	je	.L32714
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L20135:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L20139
.L29970:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L29972
.L20153:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32715
	cmpl	$2, %eax
	je	.L32716
.L20147:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r8d
	leaq	1(%rdx), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L20143
.L20152:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L20152
.L20143:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L20153
.L29972:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L32717
.L20156:
	movq	global_trees(%rip), %r12
	jmp	.L20157
.L32717:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L20156
.L32716:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L20147
.L32715:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L20143
.L32714:
	addl	$25, %r12d
	jmp	.L20135
.L20128:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L20131
	movq	constructor_type(%rip), %rsi
	movzbl	16(%rsi), %r13d
	subb	$20, %r13b
	cmpb	$1, %r13b
	ja	.L20127
	testb	$2, 53(%r15)
	je	.L20127
	cmpb	$25, 16(%r12)
	je	.L20127
.L20131:
	movl	$0, constructor_simple(%rip)
	jmp	.L20127
.L32693:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L20127
.L32692:
	movl	require_constant_value(%rip), %edx
	testl	%edx, %edx
	je	.L20125
	movl	flag_isoc99(%rip), %r11d
	testl	%r11d, %r11d
	jne	.L20125
	movl	$1, %r10d
	testl	%r10d, %r10d
	je	.L20125
	movq	32(%r12), %rdi
	movq	32(%rdi), %r9
	movq	104(%r9), %r12
	jmp	.L20125
.L32691:
	cmpb	$29, 16(%r12)
	je	.L32718
.L20028:
	movq	-208(%rbp), %rcx
	movq	128(%rdx), %rdi
	movq	128(%rcx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L31096
	movq	-760(%rbp), %r8
	movq	8(%r8), %rdi
.L20027:
	movzbl	16(%rdi), %r13d
	movq	%rdi, %rbx
	cmpl	$23, %r13d
	je	.L20030
	cmpl	$18, %r13d
	je	.L20030
	movq	-760(%rbp), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$32, %al
	je	.L32719
	movl	optimize(%rip), %r8d
	testl	%r8d, %r8d
	je	.L20093
	cmpb	$34, %al
	je	.L32720
.L20093:
	movzbl	16(%r12), %ecx
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L31103
	cmpb	$115, %cl
	je	.L32721
.L20102:
	movzbl	%cl, %edi 
	movzbl	tree_code_type(%rdi), %eax
	cmpb	$60, %al
	je	.L20107
	cmpb	$49, %al
	je	.L20107
	cmpb	$50, %al
	je	.L20107
	cmpb	$101, %al
	je	.L20107
.L20106:
	cmpl	$10, %r13d
	je	.L32722
	cmpb	$39, %cl
	je	.L32723
.L20115:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L20120
	testb	$32, 17(%rbx)
	je	.L20121
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L20122
	movzwl	60(%rbx), %r8d
	movq	integer_types+40(%rip), %rbx
	movzwl	60(%rbx), %ecx
	andl	$511, %r8d
	andl	$511, %ecx
	cmpl	%ecx, %r8d
	je	.L20122
.L20121:
	movq	integer_types+40(%rip), %rdi
.L31972:
	movq	%r12, %rsi
.L31973:
	call	convert
.L31541:
	movq	%rax, %rbx
.L31532:
	movq	global_trees(%rip), %r8
.L20091:
	movq	%rbx, %r12
	jmp	.L20026
.L20122:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31972
.L20120:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L20123
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L20123
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%rbx)
	je	.L32724
.L20123:
	cmpl	$5, %r13d
	je	.L32725
.L20124:
	movq	%r12, %rbx
	jmp	.L31532
.L32725:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31533:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L20091
.L32724:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31972
.L32723:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L20115
	movq	integer_types+40(%rip), %r14
	movq	40(%rdx), %rdi
	movzwl	60(%r14), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L20115
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L20121
	testb	$32, 17(%rbx)
	jne	.L20122
	jmp	.L20121
.L32722:
	movq	integer_types+40(%rip), %rsi
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%rsi), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L20114
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L20113
.L20114:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L20113:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31972
.L20107:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L20106
.L32721:
	movq	32(%r12), %rsi
	movq	8(%r12), %r11
	cmpq	%r11, 8(%rsi)
	jne	.L20102
.L20105:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L32726
.L31103:
	movq	32(%r12), %rsi
	jmp	.L20105
.L32726:
	cmpb	$115, %cl
	jne	.L20102
	movq	32(%rsi), %r9
	movq	8(%r12), %r10
	cmpq	%r10, 8(%r9)
	movq	%r9, %rsi
	je	.L20105
	jmp	.L20102
.L32720:
	movl	pedantic(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L20097
	movq	-760(%rbp), %rbx
	cmpb	$51, 48(%rbx)
	je	.L20097
	cmpq	$0, current_function_decl(%rip)
	je	.L20099
	movzbl	17(%rbx), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L32727
.L20099:
	movq	-760(%rbp), %rsi
.L20100:
	movq	%rsi, %r12
.L20097:
	movq	8(%r12), %rbx
	jmp	.L20093
.L32727:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L20099
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L20099
	testb	$2, 17(%rax)
	je	.L20099
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L20100
	jmp	.L20099
.L32719:
	movq	104(%rcx), %r12
	jmp	.L20093
.L20030:
	movq	-760(%rbp), %rcx
	xorl	%r14d, %r14d
	movl	%r13d, %r8d
	movzbl	16(%rcx), %edx
	cmpb	$116, %dl
	je	.L29966
	cmpb	$115, %dl
	je	.L32728
	movq	-760(%rbp), %rbx
	movzbl	16(%rbx), %ecx
.L20032:
	movzbl	%cl, %edx 
	movzbl	tree_code_type(%rdx), %eax
	cmpb	$60, %al
	je	.L20038
	cmpb	$49, %al
	je	.L20038
	cmpb	$50, %al
	je	.L20038
	cmpb	$101, %al
	je	.L20038
.L20037:
	cmpl	$23, %r8d
	je	.L32729
	cmpl	$18, %r8d
	jne	.L20124
	movzbl	%cl, %esi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rsi), %eax
	movq	8(%rdi), %r13
	cmpb	$114, %al
	je	.L20043
	cmpb	$100, %al
	je	.L20043
.L20042:
	movzbl	17(%rdi), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %esi
	shrb	$3, %r10b
	shrb	$4, %sil
	andl	$1, %r10d
	andl	%esi, %r9d
	xorl	%esi, %esi
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rdi), %r10d
	movzbl	16(%rdi), %edi
	movl	%r10d, %ebx
	shrb	$5, %bl
	andl	$1, %ebx
	sall	$2, %ebx
	orl	%ebx, %r9d
	cmpb	$20, %dil
	je	.L32730
.L20046:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L20045
	testl	%edx, %edx
	jne	.L20045
	testl	%r11d, %r11d
	je	.L20044
.L20045:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%ebx, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L32731
.L20048:
	leal	0(,%rcx,8), %r8d
	leal	(%r11,%r11), %edi
	orl	%r8d, %esi
	orl	%edx, %esi
	orl	%edi, %esi
	movq	%r13, %rdi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L20044:
	cmpb	$41, %cl
	je	.L32732
	cmpb	$47, %cl
	je	.L32733
	xorl	%ebx, %ebx
	testl	%r14d, %r14d
	je	.L32734
.L20087:
	movl	flag_isoc99(%rip), %r14d
	testl	%r14d, %r14d
	jne	.L20088
	testl	%ebx, %ebx
	je	.L20124
.L20088:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L32735
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L31973
.L32735:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L31533
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %ecx
	andb	$1, %cl
	addb	%cl, %cl
	andb	$-4, %r12b
	orb	%cl, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L31532
.L32734:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L20087
.L32733:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L20052
	cmpl	$18, %r14d
	je	.L20052
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L32736
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L20055
	cmpb	$34, %dl
	je	.L32737
.L20055:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L31101
	cmpb	$115, %dl
	je	.L32738
.L20064:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L20069
	cmpb	$49, %al
	je	.L20069
	cmpb	$50, %al
	je	.L20069
	cmpb	$101, %al
	je	.L20069
.L20068:
	cmpl	$10, %r14d
	je	.L32739
	cmpb	$39, %dl
	je	.L32740
.L20077:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L20082
	testb	$32, 17(%r13)
	je	.L20083
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L20084
	movzwl	60(%r13), %r10d
	movq	integer_types+40(%rip), %r13
	movzwl	60(%r13), %r11d
	andl	$511, %r10d
	andl	$511, %r11d
	cmpl	%r11d, %r10d
	je	.L20084
.L20083:
	movq	integer_types+40(%rip), %rdi
.L31531:
	movq	%rbx, %rsi
	call	convert
.L20053:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31541
.L20084:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31531
.L20082:
	movl	flag_traditional(%rip), %r9d
	testl	%r9d, %r9d
	je	.L20085
	movl	flag_allow_single_precision(%rip), %edi
	testl	%edi, %edi
	jne	.L20085
	movq	global_trees+192(%rip), %rsi
	cmpq	%rsi, 128(%r13)
	je	.L32741
.L20085:
	cmpl	$5, %r14d
	je	.L32742
	movq	%rbx, %rax
	jmp	.L20053
.L32742:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L20053
.L32741:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31531
.L32740:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L20077
	movq	integer_types+40(%rip), %r8
	movq	40(%rdx), %rdi
	movzwl	60(%r8), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L20077
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L20083
	testb	$32, 17(%r13)
	jne	.L20084
	jmp	.L20083
.L32739:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L20076
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L20075
.L20076:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L20075:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31531
.L20069:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L20068
.L32738:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L20064
.L20067:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L32743
.L31101:
	movq	32(%rbx), %rsi
	jmp	.L20067
.L32743:
	cmpb	$115, %dl
	jne	.L20064
	movq	32(%rsi), %rdi
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%rdi)
	movq	%rdi, %rsi
	je	.L20067
	jmp	.L20064
.L32737:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L20059
	cmpb	$51, 48(%rbx)
	je	.L20059
	cmpq	$0, current_function_decl(%rip)
	je	.L20061
	movzbl	17(%rbx), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L32744
.L20061:
	movq	%rbx, %rsi
.L20062:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L20059:
	movq	%rax, %r13
	jmp	.L20055
.L32744:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L20061
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L20061
	testb	$2, 17(%rax)
	je	.L20061
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L20062
	jmp	.L20061
.L32736:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L20055
.L20052:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L20053
.L32732:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L31973
.L32731:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L20048
.L32730:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L20046
.L20043:
	movzbl	17(%r12), %r8d
	movl	$1, %r11d
	movl	%r8d, %edx
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	%r8d, %r11d
	andl	$1, %edx
	jmp	.L20042
.L32729:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31541
.L20038:
	movq	-760(%rbp), %r9
	movl	24(%r9), %eax
	movl	%eax, 24(%r12)
	jmp	.L20037
.L32728:
	movq	32(%rcx), %r11
	cmpq	%rdi, 8(%r11)
	je	.L29966
	movl	$115, %ecx
	jmp	.L20032
.L29966:
	movq	-760(%rbp), %r12
	movl	%edx, %ecx
	movq	32(%r12), %rsi
.L20036:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r14d
	cmpb	$116, %cl
	jne	.L32745
	movq	32(%r12), %rsi
	jmp	.L20036
.L32745:
	cmpb	$115, %cl
	jne	.L20032
	movq	32(%rsi), %rsi
	movq	8(%r12), %r10
	cmpq	%r10, 8(%rsi)
	je	.L20036
	jmp	.L20032
.L32718:
	movq	-208(%rbp), %rbx
	cmpb	$18, 16(%rbx)
	jne	.L20028
	movq	8(%rbx), %r14
	cmpb	$6, 16(%r14)
	jne	.L20028
	jmp	.L31096
.L32690:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC169, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L29962
.L20007:
	cmpl	$3, (%rbx)
	je	.L32746
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L20003:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L20007
.L29962:
	movslq	%r12d,%rdi
	movq	%r8, %r12
	addq	$16, %rdi
	andq	$-16, %rdi
	subq	%rdi, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30725
.L20021:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32747
	cmpl	$2, %eax
	je	.L32748
.L20015:
	movq	8(%r12), %rsi
	movzbl	(%rsi), %r15d
	leaq	1(%rsi), %rcx
	testb	%r15b, %r15b
	movb	%r15b, (%rbx)
	je	.L20011
.L20020:
	movzbl	(%rcx), %r13d
	incq	%rbx
	incq	%rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	jne	.L20020
.L20011:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L20021
	jmp	.L30725
.L32748:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L20015
.L32747:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L20011
.L32746:
	addl	$25, %r12d
	jmp	.L20003
.L32213:
	movq	constructor_fields(%rip), %rax
	testq	%rax, %rax
	je	.L32749
	movq	8(%rax), %rax
	cmpq	global_trees(%rip), %rax
	movq	%rax, -784(%rbp)
	je	.L19385
	movq	128(%rax), %rbx
	movq	%rbx, -784(%rbp)
.L19385:
	movl	warn_traditional(%rip), %r14d
	movq	-784(%rbp), %r12
	testl	%r14d, %r14d
	movzbl	16(%r12), %ebx
	je	.L19386
	movl	in_system_header(%rip), %ecx
	testl	%ecx, %ecx
	jne	.L19386
	movl	constructor_designated(%rip), %r9d
	testl	%r9d, %r9d
	jne	.L19386
	cmpq	$0, -760(%rbp)
	je	.L19387
	movq	-760(%rbp), %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L32750
.L19386:
	cmpq	$0, -760(%rbp)
	je	.L19392
	cmpl	$18, %ebx
	je	.L32751
.L19388:
	cmpq	$0, -760(%rbp)
	je	.L19392
	movl	constructor_no_implicit(%rip), %eax
	testl	%eax, %eax
	jne	.L19389
	movq	-760(%rbp), %rsi
	cmpq	global_trees(%rip), %rsi
	je	.L19389
	movq	8(%rsi), %r11
	movq	-784(%rbp), %rsi
	cmpq	%rsi, 128(%r11)
	je	.L19389
	cmpl	$20, %ebx
	je	.L19685
	cmpl	$18, %ebx
	je	.L19685
	cmpl	$21, %ebx
	je	.L19685
.L19389:
	cmpq	$0, -760(%rbp)
	je	.L19392
	movq	constructor_fields(%rip), %r10
	movl	$.LC159, %r12d
	movq	72(%r10), %rax
	testq	%rax, %rax
	je	.L19394
	movq	32(%rax), %r12
.L19394:
	movq	spelling(%rip), %rcx
	movq	spelling_base(%rip), %rdi
	movl	spelling_size(%rip), %eax
	movq	%rcx, %r13
	subq	%rdi, %r13
	movq	%r13, %rbx
	shrq	$4, %rbx
	cmpl	%eax, %ebx
	jl	.L19395
	addl	$10, %eax
	testq	%rdi, %rdi
	movl	%eax, spelling_size(%rip)
	jne	.L19396
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L31497:
	movslq	%ebx,%rcx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rcx
	addq	spelling_base(%rip), %rcx
	movq	%rcx, spelling(%rip)
.L19395:
	movq	%r12, 8(%rcx)
	movl	$2, (%rcx)
	movq	constructor_fields(%rip), %r15
	movq	-760(%rbp), %r12
	addq	$16, %rcx
	movq	%rcx, spelling(%rip)
	movq	8(%r12), %rdi
	movzbl	16(%rdi), %eax
	movq	%rdi, %rdx
	cmpb	$23, %al
	je	.L19400
	cmpb	$18, %al
	je	.L32752
.L31074:
	movq	global_trees(%rip), %r8
.L19399:
	cmpb	$-86, 16(%r12)
	je	.L32753
.L19498:
	cmpq	%r8, %r12
	je	.L32754
	testb	$2, 17(%r12)
	jne	.L19501
	movl	$0, constructor_constant(%rip)
.L19500:
	movl	require_constant_value(%rip), %r13d
	testl	%r13d, %r13d
	je	.L19505
	testb	$2, 17(%r12)
	je	.L32755
.L19505:
	movl	require_constant_elements(%rip), %ecx
	testl	%ecx, %ecx
	jne	.L32756
.L19530:
	testq	%r15, %r15
	je	.L19532
	movq	8(%r15), %rax
	cmpq	global_trees(%rip), %rax
	je	.L19534
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L32757
.L19532:
	movq	-784(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%r12, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -792(%rbp)
	je	.L32758
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L32759
.L19536:
	cmpb	$20, 16(%rdi)
	je	.L32760
.L19557:
	cmpb	$21, 16(%rdi)
	je	.L32761
.L19556:
	testq	%r15, %r15
	je	.L19624
	cmpb	$25, 16(%r15)
	je	.L32762
.L19624:
	movq	-792(%rbp), %rsi
	movq	constructor_elements(%rip), %rdx
	movq	%r15, %rdi
	call	tree_cons
	movq	constructor_type(%rip), %r15
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r15), %eax
	cmpb	$18, %al
	je	.L32763
	cmpb	$20, %al
	je	.L32764
	cmpb	$21, 16(%r15)
	je	.L32765
.L19626:
	movl	$1, %r12d
	testl	%r12d, %r12d
	je	.L19534
	xorl	%r15d, %r15d
	movq	constructor_pending_elts(%rip), %rbx
.L19636:
	xorl	%r14d, %r14d
	testq	%rbx, %rbx
	je	.L19638
.L19672:
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$18, %al
	je	.L32766
	subb	$20, %al
	cmpb	$1, %al
	ja	.L19637
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L19638
	call	bit_position
	movq	32(%rbx), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L19658
	movq	32(%rbx), %r11
	movq	40(%rbx), %rdi
	movq	%r11, constructor_unfilled_fields(%rip)
	movq	8(%r11), %rsi
	movq	%r11, %rdx
.L31513:
	xorl	%ecx, %ecx
	call	output_init_element
.L19637:
	testq	%rbx, %rbx
	jne	.L19672
.L19638:
	testl	%r15d, %r15d
	je	.L19534
	testq	%r14, %r14
	je	.L19534
	movq	constructor_type(%rip), %r8
	movzbl	16(%r8), %edx
	leal	-20(%rdx), %esi
	cmpb	$1, %sil
	jbe	.L32767
	cmpb	$18, %dl
	jne	.L19636
	movq	%r14, constructor_unfilled_index(%rip)
	jmp	.L19636
.L32767:
	movq	%r14, constructor_unfilled_fields(%rip)
	jmp	.L19636
.L19534:
	movslq	constructor_depth(%rip),%r14
	salq	$4, %r14
	addq	spelling_base(%rip), %r14
	movq	%r14, spelling(%rip)
	jmp	.L20334
.L19658:
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L19660
.L31966:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.L19661
.L31512:
	movq	%rax, %rbx
	jmp	.L19637
.L19661:
	movq	32(%rbx), %r14
	jmp	.L19638
.L19660:
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L31512
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L19667
	cmpq	%rbx, 8(%rax)
	je	.L19670
.L19667:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L19638
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
.L31967:
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L19637
	jmp	.L19661
.L19670:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L19667
	cmpq	%rbx, 8(%rax)
	je	.L19670
	jmp	.L19667
.L32766:
	movq	32(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L19641
	movq	constructor_type(%rip), %r13
	movq	40(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rdx
	movq	8(%r13), %rsi
	jmp	.L31513
.L19641:
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rbx), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L31966
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L31512
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L19650
	cmpq	%rbx, 8(%rax)
	je	.L19653
.L19650:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L19638
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	jmp	.L31967
.L19653:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L19650
	cmpq	%rbx, 8(%rax)
	je	.L19653
	jmp	.L19650
.L32765:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L19626
.L32764:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L19626
	testb	$2, 53(%rax)
	je	.L19626
	cmpq	$0, 72(%rax)
	jne	.L19626
.L19632:
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L19626
	testb	$2, 53(%rax)
	je	.L19626
	cmpq	$0, 72(%rax)
	jne	.L19626
	jmp	.L19632
.L32763:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L19626
.L32762:
	movq	%r15, %rdi
	call	copy_node
	movq	%rax, %r15
	jmp	.L19624
.L32761:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L19556
	movq	32(%rax), %r14
	testb	$1, 17(%r14)
	jne	.L32768
.L19599:
	movq	$0, constructor_elements(%rip)
	jmp	.L19556
.L32768:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdx
	xorl	%r12d, %r12d
	cmpq	%rdx, %r8
	movq	%r8, %rbx
	movq	%rdx, %r13
	jae	.L29922
.L19606:
	cmpl	$3, (%rbx)
	je	.L32769
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L19602:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L19606
.L29922:
	movslq	%r12d,%r11
	movq	%r8, %r12
	addq	$16, %r11
	andq	$-16, %r11
	subq	%r11, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L29924
.L19620:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32770
	cmpl	$2, %eax
	je	.L32771
.L19614:
	movq	8(%r12), %r10
	movzbl	(%r10), %r8d
	leaq	1(%r10), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L19610
.L19619:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L19619
.L19610:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L19620
.L29924:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L19599
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L19599
.L32771:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L19614
.L32770:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L19610
.L32769:
	addl	$25, %r12d
	jmp	.L19602
.L32760:
	movl	constructor_incremental(%rip), %r9d
	testl	%r9d, %r9d
	je	.L19559
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, %r15
	je	.L19557
	testq	%rax, %rax
	jne	.L19560
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L19567
.L29916:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L32772
.L19587:
	cmpb	$18, 16(%rdi)
	je	.L32773
.L19593:
	movl	$0, constructor_incremental(%rip)
.L19559:
	movq	-792(%rbp), %rsi
	movq	%r15, %rdi
	call	add_pending_init
	jmp	.L19534
.L32773:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L32774
	movq	global_trees+136(%rip), %rax
.L31511:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L19593
.L32774:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31511
.L32772:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L19593
	testb	$2, 53(%rax)
	je	.L19593
	cmpq	$0, 72(%rax)
	jne	.L19593
.L19573:
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L19593
	testb	$2, 53(%rax)
	je	.L19593
	cmpq	$0, 72(%rax)
	jne	.L19593
	jmp	.L19573
.L19567:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L19567
	movq	constructor_type(%rip), %rdi
	jmp	.L29916
.L19560:
	movq	%r15, %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L19559
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L19580
	cmpb	$18, %al
	jne	.L19559
.L19580:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L19586
.L29919:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L19587
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L19593
	testb	$2, 53(%rax)
	je	.L19593
	cmpq	$0, 72(%rax)
	jne	.L19593
.L19592:
	movq	constructor_unfilled_fields(%rip), %rsi
	movq	(%rsi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L19593
	testb	$2, 53(%rax)
	je	.L19593
	cmpq	$0, 72(%rax)
	jne	.L19593
	jmp	.L19592
.L19586:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L19586
	movq	constructor_type(%rip), %rdi
	jmp	.L29919
.L32759:
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L19559
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31082
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L19559
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L19559
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L19539
	cmpb	$18, %al
	jne	.L19559
.L19539:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L19545
.L29913:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L19587
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L19593
	testb	$2, 53(%rax)
	je	.L19593
	cmpq	$0, 72(%rax)
	jne	.L19593
.L19551:
	movq	constructor_unfilled_fields(%rip), %r10
	movq	(%r10), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L19593
	testb	$2, 53(%rax)
	je	.L19593
	cmpq	$0, 72(%rax)
	jne	.L19593
	jmp	.L19551
.L19545:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L19545
	movq	constructor_type(%rip), %rdi
	jmp	.L29913
.L31082:
	movq	constructor_type(%rip), %rdi
	jmp	.L19536
.L32758:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L19534
.L32757:
	call	integer_zerop
	testl	%eax, %eax
	je	.L19532
	movq	constructor_type(%rip), %rbx
	cmpb	$18, 16(%rbx)
	je	.L19534
	cmpq	$0, (%r15)
	jne	.L19534
	jmp	.L19532
.L32756:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L19530
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L19530
.L32755:
	movl	$.LC146, %esi
	xorl	%eax, %eax
	movl	$.LC42, %edi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rsi
	xorl	%r12d, %r12d
	cmpq	%rsi, %r8
	movq	%r8, %rbx
	movq	%rsi, %r13
	jae	.L29908
.L19512:
	cmpl	$3, (%rbx)
	je	.L32775
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L19508:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L19512
.L29908:
	movslq	%r12d,%r14
	movq	%r8, %r12
	addq	$16, %r14
	andq	$-16, %r14
	subq	%r14, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L29910
.L19526:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32776
	cmpl	$2, %eax
	je	.L32777
.L19520:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r8d
	leaq	1(%rdx), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L19516
.L19525:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L19525
.L19516:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L19526
.L29910:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L32778
.L19529:
	movq	global_trees(%rip), %r12
	jmp	.L19530
.L32778:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L19529
.L32777:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L19520
.L32776:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L19516
.L32775:
	addl	$25, %r12d
	jmp	.L19508
.L19501:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L19504
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %r9d
	subb	$20, %r9b
	cmpb	$1, %r9b
	ja	.L19500
	testb	$2, 53(%r15)
	je	.L19500
	cmpb	$25, 16(%r12)
	je	.L19500
.L19504:
	movl	$0, constructor_simple(%rip)
	jmp	.L19500
.L32754:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L19500
.L32753:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L19498
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L19498
	movl	$1, %edx
	testl	%edx, %edx
	je	.L19498
	movq	32(%r12), %r10
	movq	32(%r10), %r11
	movq	104(%r11), %r12
	jmp	.L19498
.L32752:
	cmpb	$29, 16(%r12)
	je	.L32779
.L19401:
	movq	-784(%rbp), %rcx
	movq	128(%rdx), %rdi
	movq	128(%rcx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L31074
	movq	-760(%rbp), %r9
	movq	8(%r9), %rdi
.L19400:
	movzbl	16(%rdi), %r13d
	movq	%rdi, %rbx
	cmpl	$23, %r13d
	je	.L19403
	cmpl	$18, %r13d
	je	.L19403
	movq	-760(%rbp), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$32, %al
	je	.L32780
	movl	optimize(%rip), %r8d
	testl	%r8d, %r8d
	je	.L19466
	cmpb	$34, %al
	je	.L32781
.L19466:
	movzbl	16(%r12), %ecx
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L31081
	cmpb	$115, %cl
	je	.L32782
.L19475:
	movzbl	%cl, %edi 
	movzbl	tree_code_type(%rdi), %eax
	cmpb	$60, %al
	je	.L19480
	cmpb	$49, %al
	je	.L19480
	cmpb	$50, %al
	je	.L19480
	cmpb	$101, %al
	je	.L19480
.L19479:
	cmpl	$10, %r13d
	je	.L32783
	cmpb	$39, %cl
	je	.L32784
.L19488:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L19493
	testb	$32, 17(%rbx)
	je	.L19494
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L19495
	movzwl	60(%rbx), %r8d
	movq	integer_types+40(%rip), %rbx
	movzwl	60(%rbx), %ecx
	andl	$511, %r8d
	andl	$511, %ecx
	cmpl	%ecx, %r8d
	je	.L19495
.L19494:
	movq	integer_types+40(%rip), %rdi
.L31964:
	movq	%r12, %rsi
.L31965:
	call	convert
.L31508:
	movq	%rax, %rbx
.L31499:
	movq	global_trees(%rip), %r8
.L19464:
	movq	%rbx, %r12
	jmp	.L19399
.L19495:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31964
.L19493:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L19496
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L19496
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%rbx)
	je	.L32785
.L19496:
	cmpl	$5, %r13d
	je	.L32786
.L19497:
	movq	%r12, %rbx
	jmp	.L31499
.L32786:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31500:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L19464
.L32785:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31964
.L32784:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L19488
	movq	integer_types+40(%rip), %r14
	movq	40(%rdx), %rdi
	movzwl	60(%r14), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L19488
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L19494
	testb	$32, 17(%rbx)
	jne	.L19495
	jmp	.L19494
.L32783:
	movq	integer_types+40(%rip), %rsi
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%rsi), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L19487
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L19486
.L19487:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L19486:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31964
.L19480:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L19479
.L32782:
	movq	32(%r12), %rsi
	movq	8(%r12), %r11
	cmpq	%r11, 8(%rsi)
	jne	.L19475
.L19478:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L32787
.L31081:
	movq	32(%r12), %rsi
	jmp	.L19478
.L32787:
	cmpb	$115, %cl
	jne	.L19475
	movq	32(%rsi), %r9
	movq	8(%r12), %r10
	cmpq	%r10, 8(%r9)
	movq	%r9, %rsi
	je	.L19478
	jmp	.L19475
.L32781:
	movl	pedantic(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L19470
	movq	-760(%rbp), %rbx
	cmpb	$51, 48(%rbx)
	je	.L19470
	cmpq	$0, current_function_decl(%rip)
	je	.L19472
	movzbl	17(%rbx), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L32788
.L19472:
	movq	-760(%rbp), %rsi
.L19473:
	movq	%rsi, %r12
.L19470:
	movq	8(%r12), %rbx
	jmp	.L19466
.L32788:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L19472
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L19472
	testb	$2, 17(%rax)
	je	.L19472
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L19473
	jmp	.L19472
.L32780:
	movq	104(%rcx), %r12
	jmp	.L19466
.L19403:
	movq	-760(%rbp), %rax
	xorl	%r14d, %r14d
	movl	%r13d, %r8d
	movzbl	16(%rax), %edx
	cmpb	$116, %dl
	je	.L29904
	cmpb	$115, %dl
	je	.L32789
	movq	-760(%rbp), %rax
	movzbl	16(%rax), %ecx
.L19405:
	movzbl	%cl, %r10d 
	movzbl	tree_code_type(%r10), %eax
	cmpb	$60, %al
	je	.L19411
	cmpb	$49, %al
	je	.L19411
	cmpb	$50, %al
	je	.L19411
	cmpb	$101, %al
	je	.L19411
.L19410:
	cmpl	$23, %r8d
	je	.L32790
	cmpl	$18, %r8d
	jne	.L19497
	movzbl	%cl, %r8d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r8), %eax
	movq	8(%rdi), %r13
	cmpb	$114, %al
	je	.L19416
	cmpb	$100, %al
	je	.L19416
.L19415:
	movzbl	17(%rdi), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %ebx
	shrb	$3, %r10b
	shrb	$4, %bl
	andl	$1, %r10d
	andl	%ebx, %r9d
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rdi), %r10d
	movzbl	16(%rdi), %edi
	movl	%r10d, %esi
	shrb	$5, %sil
	andl	$1, %esi
	sall	$2, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	cmpb	$20, %dil
	je	.L32791
.L19419:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L19418
	testl	%edx, %edx
	jne	.L19418
	testl	%r11d, %r11d
	je	.L19417
.L19418:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%ebx, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L32792
.L19421:
	leal	0(,%rcx,8), %r8d
	leal	(%r11,%r11), %edi
	orl	%r8d, %esi
	orl	%edx, %esi
	orl	%edi, %esi
	movq	%r13, %rdi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L19417:
	cmpb	$41, %cl
	je	.L32793
	cmpb	$47, %cl
	je	.L32794
	xorl	%ebx, %ebx
	testl	%r14d, %r14d
	je	.L32795
.L19460:
	movl	flag_isoc99(%rip), %r14d
	testl	%r14d, %r14d
	jne	.L19461
	testl	%ebx, %ebx
	je	.L19497
.L19461:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L32796
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L31965
.L32796:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L31500
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %ecx
	andb	$1, %cl
	addb	%cl, %cl
	andb	$-4, %r12b
	orb	%cl, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L31499
.L32795:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L19460
.L32794:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L19425
	cmpl	$18, %r14d
	je	.L19425
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L32797
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L19428
	cmpb	$34, %dl
	je	.L32798
.L19428:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L31079
	cmpb	$115, %dl
	je	.L32799
.L19437:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L19442
	cmpb	$49, %al
	je	.L19442
	cmpb	$50, %al
	je	.L19442
	cmpb	$101, %al
	je	.L19442
.L19441:
	cmpl	$10, %r14d
	je	.L32800
	cmpb	$39, %dl
	je	.L32801
.L19450:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L19455
	testb	$32, 17(%r13)
	je	.L19456
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L19457
	movzwl	60(%r13), %r10d
	movq	integer_types+40(%rip), %r13
	movzwl	60(%r13), %r11d
	andl	$511, %r10d
	andl	$511, %r11d
	cmpl	%r11d, %r10d
	je	.L19457
.L19456:
	movq	integer_types+40(%rip), %rdi
.L31498:
	movq	%rbx, %rsi
	call	convert
.L19426:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31508
.L19457:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31498
.L19455:
	movl	flag_traditional(%rip), %r9d
	testl	%r9d, %r9d
	je	.L19458
	movl	flag_allow_single_precision(%rip), %edi
	testl	%edi, %edi
	jne	.L19458
	movq	global_trees+192(%rip), %rsi
	cmpq	%rsi, 128(%r13)
	je	.L32802
.L19458:
	cmpl	$5, %r14d
	je	.L32803
	movq	%rbx, %rax
	jmp	.L19426
.L32803:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L19426
.L32802:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31498
.L32801:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L19450
	movq	integer_types+40(%rip), %r8
	movq	40(%rdx), %rdi
	movzwl	60(%r8), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L19450
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L19456
	testb	$32, 17(%r13)
	jne	.L19457
	jmp	.L19456
.L32800:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L19449
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L19448
.L19449:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L19448:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31498
.L19442:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L19441
.L32799:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L19437
.L19440:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L32804
.L31079:
	movq	32(%rbx), %rsi
	jmp	.L19440
.L32804:
	cmpb	$115, %dl
	jne	.L19437
	movq	32(%rsi), %rdi
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%rdi)
	movq	%rdi, %rsi
	je	.L19440
	jmp	.L19437
.L32798:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L19432
	cmpb	$51, 48(%rbx)
	je	.L19432
	cmpq	$0, current_function_decl(%rip)
	je	.L19434
	movzbl	17(%rbx), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L32805
.L19434:
	movq	%rbx, %rsi
.L19435:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L19432:
	movq	%rax, %r13
	jmp	.L19428
.L32805:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L19434
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L19434
	testb	$2, 17(%rax)
	je	.L19434
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L19435
	jmp	.L19434
.L32797:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L19428
.L19425:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L19426
.L32793:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L31965
.L32792:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L19421
.L32791:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L19419
.L19416:
	movzbl	17(%r12), %ebx
	movl	$1, %r11d
	movl	%ebx, %edx
	shrb	$3, %bl
	shrb	$4, %dl
	andl	%ebx, %r11d
	andl	$1, %edx
	jmp	.L19415
.L32790:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31508
.L19411:
	movq	-760(%rbp), %r13
	movl	24(%r13), %eax
	movl	%eax, 24(%r12)
	jmp	.L19410
.L32789:
	movq	32(%rax), %rsi
	cmpq	%rdi, 8(%rsi)
	je	.L29904
	movl	$115, %ecx
	jmp	.L19405
.L29904:
	movq	-760(%rbp), %r12
	movl	%edx, %ecx
	movq	32(%r12), %rsi
.L19409:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r14d
	cmpb	$116, %cl
	jne	.L32806
	movq	32(%r12), %rsi
	jmp	.L19409
.L32806:
	cmpb	$115, %cl
	jne	.L19405
	movq	32(%rsi), %rsi
	movq	8(%r12), %rdx
	cmpq	%rdx, 8(%rsi)
	je	.L19409
	jmp	.L19405
.L32779:
	movq	-784(%rbp), %rcx
	cmpb	$18, 16(%rcx)
	jne	.L19401
	movq	8(%rcx), %rbx
	cmpb	$6, 16(%rbx)
	jne	.L19401
	jmp	.L31074
.L19396:
	movslq	%eax,%rsi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L31497
.L19392:
	movq	constructor_fields(%rip), %r9
	movq	40(%r9), %rdx
	movq	(%r9), %r10
	movq	%rdx, constructor_bit_index(%rip)
	movq	%r10, constructor_unfilled_fields(%rip)
	jmp	.L20334
.L32751:
	movq	-784(%rbp), %rdi
	movq	8(%rdi), %r8
	cmpb	$6, 16(%r8)
	jne	.L19388
	movl	-652(%rbp), %edx
	testl	%edx, %edx
	je	.L19388
	movq	-152(%rbp), %r15
	movq	%r15, -760(%rbp)
	jmp	.L19389
.L32750:
	movq	-760(%rbp), %rdi
	call	real_zerop
	testl	%eax, %eax
	jne	.L19386
.L19387:
	movl	$.LC167, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L19386
.L32749:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC166, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L29900
.L19367:
	cmpl	$3, (%rbx)
	je	.L32807
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L19363:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L19367
.L29900:
	movslq	%r12d,%rsi
	movq	%r8, %r12
	addq	$16, %rsi
	andq	$-16, %rsi
	subq	%rsi, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30725
.L19381:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32808
	cmpl	$2, %eax
	je	.L32809
.L19375:
	movq	8(%r12), %r10
	movzbl	(%r10), %r11d
	leaq	1(%r10), %rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	je	.L19371
.L19380:
	movzbl	(%rcx), %r13d
	incq	%rbx
	incq	%rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	jne	.L19380
.L19371:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L19381
	jmp	.L30725
.L32809:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L19375
.L32808:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L19371
.L32807:
	addl	$25, %r12d
	jmp	.L19363
.L32212:
	movq	constructor_fields(%rip), %rsi
	testq	%rsi, %rsi
	movq	%rsi, %rdi
	je	.L32810
	movq	8(%rsi), %rdx
	movq	global_trees(%rip), %rax
	cmpq	%rax, %rdx
	movq	%rdx, -768(%rbp)
	movq	%rax, %rcx
	je	.L19029
	movq	128(%rdx), %r9
	movq	%r9, -768(%rbp)
.L19029:
	movq	-768(%rbp), %rax
	movzbl	16(%rax), %edx
	cmpl	$18, %edx
	je	.L32811
.L19030:
	cmpq	$0, -760(%rbp)
	je	.L19059
	cmpl	$18, %edx
	je	.L32812
.L19055:
	cmpq	$0, -760(%rbp)
	je	.L19059
	movl	constructor_no_implicit(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L19056
	cmpq	%rcx, -760(%rbp)
	je	.L19056
	movq	-760(%rbp), %rax
	movq	-768(%rbp), %r9
	movq	8(%rax), %r8
	cmpq	%r9, 128(%r8)
	je	.L19056
	cmpl	$20, %edx
	je	.L19685
	cmpl	$18, %edx
	je	.L19685
	cmpl	$21, %edx
	je	.L19685
.L19056:
	cmpq	$0, -760(%rbp)
	je	.L19059
	movq	72(%rdi), %rax
	movl	$.LC159, %r12d
	testq	%rax, %rax
	je	.L19061
	movq	32(%rax), %r12
.L19061:
	movq	spelling(%rip), %rcx
	movq	spelling_base(%rip), %rdi
	movl	spelling_size(%rip), %eax
	movq	%rcx, %rdx
	subq	%rdi, %rdx
	movq	%rdx, %rbx
	shrq	$4, %rbx
	cmpl	%eax, %ebx
	jl	.L19062
	addl	$10, %eax
	testq	%rdi, %rdi
	movl	%eax, spelling_size(%rip)
	jne	.L19063
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L31480:
	movslq	%ebx,%rcx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rcx
	addq	spelling_base(%rip), %rcx
	movq	%rcx, spelling(%rip)
.L19062:
	movq	%r12, 8(%rcx)
	movl	$2, (%rcx)
	movq	constructor_fields(%rip), %r15
	movq	-760(%rbp), %r12
	addq	$16, %rcx
	movq	%rcx, spelling(%rip)
	movq	8(%r12), %rdi
	movzbl	16(%rdi), %eax
	movq	%rdi, %rdx
	cmpb	$23, %al
	je	.L19067
	cmpb	$18, %al
	je	.L32813
.L31063:
	movq	global_trees(%rip), %r8
.L19066:
	cmpb	$-86, 16(%r12)
	je	.L32814
.L19165:
	cmpq	%r8, %r12
	je	.L32815
	testb	$2, 17(%r12)
	jne	.L19168
	movl	$0, constructor_constant(%rip)
.L19167:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L19172
	testb	$2, 17(%r12)
	je	.L32816
.L19172:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L32817
.L19197:
	testq	%r15, %r15
	je	.L19199
	movq	8(%r15), %rax
	cmpq	global_trees(%rip), %rax
	je	.L19201
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L32818
.L19199:
	movq	-768(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%r12, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -776(%rbp)
	je	.L32819
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L32820
.L19203:
	cmpb	$20, 16(%rdi)
	je	.L32821
.L19224:
	cmpb	$21, 16(%rdi)
	je	.L32822
.L19223:
	testq	%r15, %r15
	je	.L19291
	cmpb	$25, 16(%r15)
	je	.L32823
.L19291:
	movq	-776(%rbp), %rsi
	movq	constructor_elements(%rip), %rdx
	movq	%r15, %rdi
	call	tree_cons
	movq	constructor_type(%rip), %r15
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r15), %eax
	cmpb	$18, %al
	je	.L32824
	cmpb	$20, %al
	je	.L32825
	cmpb	$21, 16(%r15)
	je	.L32826
.L19293:
	movl	$1, %r14d
	testl	%r14d, %r14d
	je	.L19201
	xorl	%r15d, %r15d
	movq	constructor_pending_elts(%rip), %rbx
.L19303:
	xorl	%r14d, %r14d
	testq	%rbx, %rbx
	je	.L19305
.L19339:
	movq	constructor_type(%rip), %r11
	movzbl	16(%r11), %eax
	cmpb	$18, %al
	je	.L32827
	subb	$20, %al
	cmpb	$1, %al
	ja	.L19304
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L19305
	call	bit_position
	movq	32(%rbx), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L19325
	movq	32(%rbx), %r13
	movq	40(%rbx), %rdi
	movq	%r13, constructor_unfilled_fields(%rip)
	movq	8(%r13), %rsi
	movq	%r13, %rdx
.L31496:
	xorl	%ecx, %ecx
	call	output_init_element
.L19304:
	testq	%rbx, %rbx
	jne	.L19339
.L19305:
	testl	%r15d, %r15d
	je	.L19201
	testq	%r14, %r14
	je	.L19201
	movq	constructor_type(%rip), %r9
	movzbl	16(%r9), %edx
	leal	-20(%rdx), %ecx
	cmpb	$1, %cl
	jbe	.L32828
	cmpb	$18, %dl
	jne	.L19303
	movq	%r14, constructor_unfilled_index(%rip)
	jmp	.L19303
.L32828:
	movq	%r14, constructor_unfilled_fields(%rip)
	jmp	.L19303
.L19201:
	movslq	constructor_depth(%rip),%rdx
	movq	constructor_fields(%rip), %rsi
	salq	$4, %rdx
	addq	spelling_base(%rip), %rdx
	movq	%rdx, spelling(%rip)
.L19346:
	movq	(%rsi), %rsi
	testq	%rsi, %rsi
	movq	%rsi, constructor_fields(%rip)
	je	.L19358
	testb	$2, 53(%rsi)
	je	.L19358
	cmpq	$0, 72(%rsi)
	jne	.L19358
.L19357:
	movq	constructor_fields(%rip), %r15
	movq	(%r15), %rsi
	testq	%rsi, %rsi
	movq	%rsi, constructor_fields(%rip)
	je	.L19358
	testb	$2, 53(%rsi)
	je	.L19358
	cmpq	$0, 72(%rsi)
	jne	.L19358
	jmp	.L19357
.L19325:
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L19327
.L31962:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.L19328
.L31495:
	movq	%rax, %rbx
	jmp	.L19304
.L19328:
	movq	32(%rbx), %r14
	jmp	.L19305
.L19327:
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L31495
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L19334
	cmpq	%rbx, 8(%rax)
	je	.L19337
.L19334:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L19305
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
.L31963:
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L19304
	jmp	.L19328
.L19337:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L19334
	cmpq	%rbx, 8(%rax)
	je	.L19337
	jmp	.L19334
.L32827:
	movq	32(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L19308
	movq	constructor_type(%rip), %r10
	movq	40(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rdx
	movq	8(%r10), %rsi
	jmp	.L31496
.L19308:
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rbx), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L31962
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L31495
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L19317
	cmpq	%rbx, 8(%rax)
	je	.L19320
.L19317:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L19305
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	jmp	.L31963
.L19320:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L19317
	cmpq	%rbx, 8(%rax)
	je	.L19320
	jmp	.L19317
.L32826:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L19293
.L32825:
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L19293
	testb	$2, 53(%rax)
	je	.L19293
	cmpq	$0, 72(%rax)
	jne	.L19293
.L19299:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L19293
	testb	$2, 53(%rax)
	je	.L19293
	cmpq	$0, 72(%rax)
	jne	.L19293
	jmp	.L19299
.L32824:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L19293
.L32823:
	movq	%r15, %rdi
	call	copy_node
	movq	%rax, %r15
	jmp	.L19291
.L32822:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L19223
	movq	32(%rax), %r9
	testb	$1, 17(%r9)
	jne	.L32829
.L19266:
	movq	$0, constructor_elements(%rip)
	jmp	.L19223
.L32829:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L29889
.L19273:
	cmpl	$3, (%rbx)
	je	.L32830
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L19269:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L19273
.L29889:
	movslq	%r12d,%rdx
	movq	%r8, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L29891
.L19287:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32831
	cmpl	$2, %eax
	je	.L32832
.L19281:
	movq	8(%r12), %rsi
	movzbl	(%rsi), %edi
	leaq	1(%rsi), %rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	je	.L19277
.L19286:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L19286
.L19277:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L19287
.L29891:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L19266
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L19266
.L32832:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L19281
.L32831:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L19277
.L32830:
	addl	$25, %r12d
	jmp	.L19269
.L32821:
	movl	constructor_incremental(%rip), %r11d
	testl	%r11d, %r11d
	je	.L19226
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, %r15
	je	.L19224
	testq	%rax, %rax
	jne	.L19227
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L19234
.L29883:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L32833
.L19254:
	cmpb	$18, 16(%rdi)
	je	.L32834
.L19260:
	movl	$0, constructor_incremental(%rip)
.L19226:
	movq	-776(%rbp), %rsi
	movq	%r15, %rdi
	call	add_pending_init
	jmp	.L19201
.L32834:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L32835
	movq	global_trees+136(%rip), %rax
.L31494:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L19260
.L32835:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31494
.L32833:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L19260
	testb	$2, 53(%rax)
	je	.L19260
	cmpq	$0, 72(%rax)
	jne	.L19260
.L19240:
	movq	constructor_unfilled_fields(%rip), %r10
	movq	(%r10), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L19260
	testb	$2, 53(%rax)
	je	.L19260
	cmpq	$0, 72(%rax)
	jne	.L19260
	jmp	.L19240
.L19234:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L19234
	movq	constructor_type(%rip), %rdi
	jmp	.L29883
.L19227:
	movq	%r15, %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L19226
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L19247
	cmpb	$18, %al
	jne	.L19226
.L19247:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L19253
.L29886:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L19254
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L19260
	testb	$2, 53(%rax)
	je	.L19260
	cmpq	$0, 72(%rax)
	jne	.L19260
.L19259:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L19260
	testb	$2, 53(%rax)
	je	.L19260
	cmpq	$0, 72(%rax)
	jne	.L19260
	jmp	.L19259
.L19253:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L19253
	movq	constructor_type(%rip), %rdi
	jmp	.L29886
.L32820:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L19226
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31071
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L19226
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L19226
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L19206
	cmpb	$18, %al
	jne	.L19226
.L19206:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L19212
.L29880:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L19254
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L19260
	testb	$2, 53(%rax)
	je	.L19260
	cmpq	$0, 72(%rax)
	jne	.L19260
.L19218:
	movq	constructor_unfilled_fields(%rip), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L19260
	testb	$2, 53(%rax)
	je	.L19260
	cmpq	$0, 72(%rax)
	jne	.L19260
	jmp	.L19218
.L19212:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L19212
	movq	constructor_type(%rip), %rdi
	jmp	.L29880
.L31071:
	movq	constructor_type(%rip), %rdi
	jmp	.L19203
.L32819:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L19201
.L32818:
	call	integer_zerop
	testl	%eax, %eax
	je	.L19199
	movq	constructor_type(%rip), %rbx
	cmpb	$18, 16(%rbx)
	je	.L19201
	cmpq	$0, (%r15)
	jne	.L19201
	jmp	.L19199
.L32817:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L19197
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L19197
.L32816:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L29875
.L19179:
	cmpl	$3, (%rbx)
	je	.L32836
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L19175:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L19179
.L29875:
	movslq	%r12d,%rdx
	movq	%r8, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L29877
.L19193:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32837
	cmpl	$2, %eax
	je	.L32838
.L19187:
	movq	8(%r12), %rsi
	movzbl	(%rsi), %edi
	leaq	1(%rsi), %rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	je	.L19183
.L19192:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L19192
.L19183:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L19193
.L29877:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L32839
.L19196:
	movq	global_trees(%rip), %r12
	jmp	.L19197
.L32839:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L19196
.L32838:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L19187
.L32837:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L19183
.L32836:
	addl	$25, %r12d
	jmp	.L19175
.L19168:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L19171
	movq	constructor_type(%rip), %r9
	movzbl	16(%r9), %r13d
	subb	$20, %r13b
	cmpb	$1, %r13b
	ja	.L19167
	testb	$2, 53(%r15)
	je	.L19167
	cmpb	$25, 16(%r12)
	je	.L19167
.L19171:
	movl	$0, constructor_simple(%rip)
	jmp	.L19167
.L32815:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L19167
.L32814:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L19165
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L19165
	movl	$1, %r11d
	testl	%r11d, %r11d
	je	.L19165
	movq	32(%r12), %rcx
	movq	32(%rcx), %r10
	movq	104(%r10), %r12
	jmp	.L19165
.L32813:
	cmpb	$29, 16(%r12)
	je	.L32840
.L19068:
	movq	-768(%rbp), %r13
	movq	128(%rdx), %rdi
	movq	128(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L31063
	movq	-760(%rbp), %rsi
	movq	8(%rsi), %rdi
.L19067:
	movzbl	16(%rdi), %r13d
	movq	%rdi, %rbx
	cmpl	$23, %r13d
	je	.L19070
	cmpl	$18, %r13d
	je	.L19070
	movq	-760(%rbp), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$32, %al
	je	.L32841
	movl	optimize(%rip), %edi
	testl	%edi, %edi
	je	.L19133
	cmpb	$34, %al
	je	.L32842
.L19133:
	movzbl	16(%r12), %ecx
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L31070
	cmpb	$115, %cl
	je	.L32843
.L19142:
	movzbl	%cl, %r10d 
	movzbl	tree_code_type(%r10), %eax
	cmpb	$60, %al
	je	.L19147
	cmpb	$49, %al
	je	.L19147
	cmpb	$50, %al
	je	.L19147
	cmpb	$101, %al
	je	.L19147
.L19146:
	cmpl	$10, %r13d
	je	.L32844
	cmpb	$39, %cl
	je	.L32845
.L19155:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L19160
	testb	$32, 17(%rbx)
	je	.L19161
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L19162
	movzwl	60(%rbx), %esi
	movq	integer_types+40(%rip), %rbx
	movzwl	60(%rbx), %edi
	andl	$511, %esi
	andl	$511, %edi
	cmpl	%edi, %esi
	je	.L19162
.L19161:
	movq	integer_types+40(%rip), %rdi
.L31960:
	movq	%r12, %rsi
.L31961:
	call	convert
.L31491:
	movq	%rax, %rbx
.L31482:
	movq	global_trees(%rip), %r8
.L19131:
	movq	%rbx, %r12
	jmp	.L19066
.L19162:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31960
.L19160:
	movl	flag_traditional(%rip), %r14d
	testl	%r14d, %r14d
	je	.L19163
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L19163
	movq	global_trees+192(%rip), %r8
	cmpq	%r8, 128(%rbx)
	je	.L32846
.L19163:
	cmpl	$5, %r13d
	je	.L32847
.L19164:
	movq	%r12, %rbx
	jmp	.L31482
.L32847:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31483:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L19131
.L32846:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31960
.L32845:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L19155
	movq	integer_types+40(%rip), %r9
	movq	40(%rdx), %rdi
	movzwl	60(%r9), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L19155
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L19161
	testb	$32, 17(%rbx)
	jne	.L19162
	jmp	.L19161
.L32844:
	movq	integer_types+40(%rip), %r13
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %ecx
	movzwl	60(%r13), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%ecx, %ecx
	jne	.L19154
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L19153
.L19154:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L19153:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31960
.L19147:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L19146
.L32843:
	movq	32(%r12), %rsi
	movq	8(%r12), %r14
	cmpq	%r14, 8(%rsi)
	jne	.L19142
.L19145:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L32848
.L31070:
	movq	32(%r12), %rsi
	jmp	.L19145
.L32848:
	cmpb	$115, %cl
	jne	.L19142
	movq	32(%rsi), %r11
	movq	8(%r12), %r8
	cmpq	%r8, 8(%r11)
	movq	%r11, %rsi
	je	.L19145
	jmp	.L19142
.L32842:
	movl	pedantic(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L19137
	movq	-760(%rbp), %rbx
	cmpb	$51, 48(%rbx)
	je	.L19137
	cmpq	$0, current_function_decl(%rip)
	je	.L19139
	movzbl	17(%rbx), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L32849
.L19139:
	movq	-760(%rbp), %rsi
.L19140:
	movq	%rsi, %r12
.L19137:
	movq	8(%r12), %rbx
	jmp	.L19133
.L32849:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L19139
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L19139
	testb	$2, 17(%rax)
	je	.L19139
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L19140
	jmp	.L19139
.L32841:
	movq	104(%rcx), %r12
	jmp	.L19133
.L19070:
	movq	-760(%rbp), %rcx
	xorl	%r14d, %r14d
	movl	%r13d, %r8d
	movzbl	16(%rcx), %edx
	cmpb	$116, %dl
	je	.L29871
	cmpb	$115, %dl
	je	.L32850
	movq	-760(%rbp), %r9
	movzbl	16(%r9), %ecx
.L19072:
	movzbl	%cl, %edx 
	movzbl	tree_code_type(%rdx), %eax
	cmpb	$60, %al
	je	.L19078
	cmpb	$49, %al
	je	.L19078
	cmpb	$50, %al
	je	.L19078
	cmpb	$101, %al
	je	.L19078
.L19077:
	cmpl	$23, %r8d
	je	.L32851
	cmpl	$18, %r8d
	jne	.L19164
	movzbl	%cl, %r8d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r8), %eax
	movq	8(%rdi), %r13
	cmpb	$114, %al
	je	.L19083
	cmpb	$100, %al
	je	.L19083
.L19082:
	movzbl	17(%rdi), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %esi
	shrb	$3, %r10b
	shrb	$4, %sil
	andl	$1, %r10d
	andl	%esi, %r9d
	xorl	%esi, %esi
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rdi), %r10d
	movzbl	16(%rdi), %edi
	movl	%r10d, %ebx
	shrb	$5, %bl
	andl	$1, %ebx
	sall	$2, %ebx
	orl	%ebx, %r9d
	cmpb	$20, %dil
	je	.L32852
.L19086:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L19085
	testl	%edx, %edx
	jne	.L19085
	testl	%r11d, %r11d
	je	.L19084
.L19085:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%ebx, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L32853
.L19088:
	leal	0(,%rcx,8), %r8d
	leal	(%r11,%r11), %edi
	orl	%r8d, %esi
	orl	%edx, %esi
	orl	%edi, %esi
	movq	%r13, %rdi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L19084:
	cmpb	$41, %cl
	je	.L32854
	cmpb	$47, %cl
	je	.L32855
	xorl	%ebx, %ebx
	testl	%r14d, %r14d
	je	.L32856
.L19127:
	movl	flag_isoc99(%rip), %edx
	testl	%edx, %edx
	jne	.L19128
	testl	%ebx, %ebx
	je	.L19164
.L19128:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L32857
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L31961
.L32857:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L31483
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %r9d
	andb	$1, %r9b
	addb	%r9b, %r9b
	andb	$-4, %r12b
	orb	%r9b, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L31482
.L32856:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L19127
.L32855:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L19092
	cmpl	$18, %r14d
	je	.L19092
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L32858
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L19095
	cmpb	$34, %dl
	je	.L32859
.L19095:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L31068
	cmpb	$115, %dl
	je	.L32860
.L19104:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L19109
	cmpb	$49, %al
	je	.L19109
	cmpb	$50, %al
	je	.L19109
	cmpb	$101, %al
	je	.L19109
.L19108:
	cmpl	$10, %r14d
	je	.L32861
	cmpb	$39, %dl
	je	.L32862
.L19117:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L19122
	testb	$32, 17(%r13)
	je	.L19123
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L19124
	movzwl	60(%r13), %r10d
	movq	integer_types+40(%rip), %r13
	movzwl	60(%r13), %r11d
	andl	$511, %r10d
	andl	$511, %r11d
	cmpl	%r11d, %r10d
	je	.L19124
.L19123:
	movq	integer_types+40(%rip), %rdi
.L31481:
	movq	%rbx, %rsi
	call	convert
.L19093:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31491
.L19124:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31481
.L19122:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L19125
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L19125
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%r13)
	je	.L32863
.L19125:
	cmpl	$5, %r14d
	je	.L32864
	movq	%rbx, %rax
	jmp	.L19093
.L32864:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L19093
.L32863:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31481
.L32862:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L19117
	movq	integer_types+40(%rip), %r8
	movq	40(%rdx), %rdi
	movzwl	60(%r8), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L19117
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L19123
	testb	$32, 17(%r13)
	jne	.L19124
	jmp	.L19123
.L32861:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L19116
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L19115
.L19116:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L19115:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31481
.L19109:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L19108
.L32860:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L19104
.L19107:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L32865
.L31068:
	movq	32(%rbx), %rsi
	jmp	.L19107
.L32865:
	cmpb	$115, %dl
	jne	.L19104
	movq	32(%rsi), %rdi
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%rdi)
	movq	%rdi, %rsi
	je	.L19107
	jmp	.L19104
.L32859:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L19099
	cmpb	$51, 48(%rbx)
	je	.L19099
	cmpq	$0, current_function_decl(%rip)
	je	.L19101
	movzbl	17(%rbx), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L32866
.L19101:
	movq	%rbx, %rsi
.L19102:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L19099:
	movq	%rax, %r13
	jmp	.L19095
.L32866:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L19101
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L19101
	testb	$2, 17(%rax)
	je	.L19101
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L19102
	jmp	.L19101
.L32858:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L19095
.L19092:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L19093
.L32854:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L31961
.L32853:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L19088
.L32852:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L19086
.L19083:
	movzbl	17(%r12), %esi
	movl	$1, %r11d
	movl	%esi, %edx
	shrb	$3, %sil
	shrb	$4, %dl
	andl	%esi, %r11d
	andl	$1, %edx
	jmp	.L19082
.L32851:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31491
.L19078:
	movq	-760(%rbp), %r11
	movl	24(%r11), %eax
	movl	%eax, 24(%r12)
	jmp	.L19077
.L32850:
	movq	32(%rcx), %rbx
	cmpq	%rdi, 8(%rbx)
	je	.L29871
	movl	$115, %ecx
	jmp	.L19072
.L29871:
	movq	-760(%rbp), %r12
	movl	%edx, %ecx
	movq	32(%r12), %rsi
.L19076:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r14d
	cmpb	$116, %cl
	jne	.L32867
	movq	32(%r12), %rsi
	jmp	.L19076
.L32867:
	cmpb	$115, %cl
	jne	.L19072
	movq	32(%rsi), %rsi
	movq	8(%r12), %r10
	cmpq	%r10, 8(%rsi)
	je	.L19076
	jmp	.L19072
.L32840:
	movq	-768(%rbp), %rsi
	cmpb	$18, 16(%rsi)
	jne	.L19068
	movq	8(%rsi), %r11
	cmpb	$6, 16(%r11)
	jne	.L19068
	jmp	.L31063
.L19063:
	movslq	%eax,%rsi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L31480
.L19059:
	cmpq	$0, 40(%rdi)
	jne	.L32868
.L19347:
	movq	(%rsi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L19346
	testb	$2, 53(%rax)
	je	.L19346
	cmpq	$0, 72(%rax)
	jne	.L19346
.L19352:
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L19346
	testb	$2, 53(%rax)
	je	.L19346
	cmpq	$0, 72(%rax)
	je	.L19352
	jmp	.L19346
.L32868:
	call	bit_position
	movq	constructor_fields(%rip), %r8
	movl	$59, %edi
	movq	%rax, %rsi
	movq	40(%r8), %rdx
	call	size_binop
	movq	constructor_fields(%rip), %rsi
	movq	%rax, constructor_bit_index(%rip)
	jmp	.L19347
.L32812:
	movq	-768(%rbp), %r14
	movq	8(%r14), %r12
	cmpb	$6, 16(%r12)
	jne	.L19055
	movl	-652(%rbp), %ebx
	testl	%ebx, %ebx
	je	.L19055
	movq	-152(%rbp), %rcx
	movq	%rcx, -760(%rbp)
	jmp	.L19056
.L32811:
	movl	require_constant_value(%rip), %r8d
	testl	%r8d, %r8d
	jne	.L19030
	cmpq	$0, 32(%rax)
	jne	.L19030
	cmpq	$0, (%rsi)
	jne	.L19030
	movl	$.LC42, %edi
	xorl	%eax, %eax
	movl	$.LC164, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdi
	xorl	%r12d, %r12d
	cmpq	%rdi, %r8
	movq	%r8, %rbx
	movq	%rdi, %r13
	jae	.L29867
.L19037:
	cmpl	$3, (%rbx)
	je	.L32869
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L19033:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L19037
.L29867:
	movslq	%r12d,%r11
	movq	%r8, %r12
	addq	$16, %r11
	andq	$-16, %r11
	subq	%r11, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30599
.L19051:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32870
	cmpl	$2, %eax
	je	.L32871
.L19045:
	movq	8(%r12), %r15
	movzbl	(%r15), %esi
	leaq	1(%r15), %rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	je	.L19041
.L19050:
	movzbl	(%rcx), %r13d
	incq	%rbx
	incq	%rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	jne	.L19050
.L19041:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L19051
.L30599:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L25741
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L25741
.L32871:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L19045
.L32870:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L19041
.L32869:
	addl	$25, %r12d
	jmp	.L19033
.L32810:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC163, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r14
	xorl	%r12d, %r12d
	cmpq	%r14, %r8
	movq	%r8, %rbx
	movq	%r14, %r13
	jae	.L29862
.L19011:
	cmpl	$3, (%rbx)
	je	.L32872
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L19007:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L19011
.L29862:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30725
.L19025:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32873
	cmpl	$2, %eax
	je	.L32874
.L19019:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r13d
	leaq	1(%rdx), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L19015
.L19024:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L19024
.L19015:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L19025
	jmp	.L30725
.L32874:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L19019
.L32873:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L19015
.L32872:
	addl	$25, %r12d
	jmp	.L19007
	.p2align 6,,7
.L32211:
	movl	require_constant_value(%rip), %r12d
	testl	%r12d, %r12d
	je	.L18999
	movl	flag_isoc99(%rip), %r15d
	testl	%r15d, %r15d
	je	.L21960
	jmp	.L18999
.L18993:
	xorl	%edi, %edi
	jmp	.L18994
.L32210:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC176, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L29776
.L18276:
	cmpl	$3, (%rbx)
	je	.L32875
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L18272:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L18276
.L29776:
	movslq	%r12d,%r15
	movq	%r8, %r12
	addq	$16, %r15
	andq	$-16, %r15
	subq	%r15, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L29778
.L18290:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32876
	cmpl	$2, %eax
	je	.L32877
.L18284:
	movq	8(%r12), %r13
	movzbl	(%r13), %esi
	leaq	1(%r13), %rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	je	.L18280
.L18289:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L18289
.L18280:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L18290
.L29778:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L18269
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L18269
.L32877:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L18284
.L32876:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L18280
.L32875:
	addl	$25, %r12d
	jmp	.L18272
.L18268:
	cmpq	$0, (%rax)
	jne	.L32878
.L18295:
	movq	32(%rax), %rax
.L31440:
	movq	%rax, -704(%rbp)
	jmp	.L18264
.L32878:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC177, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdx
	xorl	%r12d, %r12d
	cmpq	%rdx, %r8
	movq	%r8, %rbx
	movq	%rdx, %r13
	jae	.L29781
.L18302:
	cmpl	$3, (%rbx)
	je	.L32879
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L18298:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L18302
.L29781:
	movslq	%r12d,%r9
	movq	%r8, %r12
	addq	$16, %r9
	andq	$-16, %r9
	subq	%r9, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L29783
.L18316:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32880
	cmpl	$2, %eax
	je	.L32881
.L18310:
	movq	8(%r12), %r11
	movzbl	(%r11), %r8d
	leaq	1(%r11), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L18306
.L18315:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L18315
.L18306:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L18316
.L29783:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L32882
.L18319:
	movq	constructor_elements(%rip), %rax
	jmp	.L18295
.L32882:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L18319
.L32881:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L18310
.L32880:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L18306
.L32879:
	addl	$25, %r12d
	jmp	.L18298
.L18267:
	movl	constructor_erroneous(%rip), %r14d
	testl	%r14d, %r14d
	je	.L18322
	movq	global_trees(%rip), %rbx
	movq	%rbx, -704(%rbp)
	jmp	.L18264
.L18322:
	movq	constructor_elements(%rip), %rdi
	call	nreverse
	xorl	%edx, %edx
	movq	constructor_type(%rip), %rsi
	movq	%rax, %rcx
	movl	$46, %edi
	xorl	%eax, %eax
	call	build
	movl	constructor_constant(%rip), %r15d
	movq	%rax, -704(%rbp)
	testl	%r15d, %r15d
	je	.L18264
	orb	$2, 17(%rax)
	movl	constructor_constant(%rip), %r12d
	testl	%r12d, %r12d
	je	.L18264
	movl	constructor_simple(%rip), %eax
	testl	%eax, %eax
	je	.L18264
	movq	-704(%rbp), %rsi
	orb	$4, 18(%rsi)
	jmp	.L18264
.L32208:
	xorl	%edi, %edi
	call	output_pending_init_elements
	jmp	.L17769
.L32207:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L18233
.L32206:
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L18233
	testb	$2, 53(%rax)
	je	.L18233
	cmpq	$0, 72(%rax)
	jne	.L18233
.L18239:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L18233
	testb	$2, 53(%rax)
	je	.L18233
	cmpq	$0, 72(%rax)
	jne	.L18233
	jmp	.L18239
.L32053:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L18233
.L32205:
	movq	%r14, %rdi
	call	copy_node
	movq	%rax, -688(%rbp)
	jmp	.L18231
.L32204:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L18163
	movq	32(%rax), %r10
	testb	$1, 17(%r10)
	jne	.L32883
.L18206:
	movq	$0, constructor_elements(%rip)
	jmp	.L18163
.L32883:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdx
	xorl	%r12d, %r12d
	cmpq	%rdx, %r8
	movq	%r8, %rbx
	movq	%rdx, %r13
	jae	.L29769
.L18213:
	cmpl	$3, (%rbx)
	je	.L32884
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L18209:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L18213
.L29769:
	movslq	%r12d,%r9
	movq	%r8, %r12
	addq	$16, %r9
	andq	$-16, %r9
	subq	%r9, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L29771
.L18227:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32885
	cmpl	$2, %eax
	je	.L32886
.L18221:
	movq	8(%r12), %r11
	movzbl	(%r11), %r8d
	leaq	1(%r11), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L18217
.L18226:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L18226
.L18217:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L18227
.L29771:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	je	.L18206
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L18206
.L32886:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L18221
.L32885:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L18217
.L32884:
	addl	$25, %r12d
	jmp	.L18209
.L32203:
	movl	constructor_incremental(%rip), %esi
	testl	%esi, %esi
	je	.L18166
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, %r14
	je	.L18164
	testq	%rax, %rax
	jne	.L18167
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L18174
.L29763:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L32887
.L18194:
	cmpb	$18, 16(%rdi)
	je	.L32888
.L18200:
	movl	$0, constructor_incremental(%rip)
.L18166:
	movq	%r14, %rdi
	movq	-680(%rbp), %rsi
.L31438:
	call	add_pending_init
	jmp	.L17769
.L32888:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L32889
	movq	global_trees+136(%rip), %rax
.L31435:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L18200
.L32889:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31435
.L32887:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L18200
	testb	$2, 53(%rax)
	je	.L18200
	cmpq	$0, 72(%rax)
	jne	.L18200
.L18180:
	movq	constructor_unfilled_fields(%rip), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L18200
	testb	$2, 53(%rax)
	je	.L18200
	cmpq	$0, 72(%rax)
	jne	.L18200
	jmp	.L18180
	.p2align 6,,7
.L18174:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L18174
	movq	constructor_type(%rip), %rdi
	jmp	.L29763
.L18167:
	movq	%r14, %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L18166
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L18187
	cmpb	$18, %al
	jne	.L18166
.L18187:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L18193
.L29766:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L18194
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L18200
	testb	$2, 53(%rax)
	je	.L18200
	cmpq	$0, 72(%rax)
	jne	.L18200
.L18199:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L18200
	testb	$2, 53(%rax)
	je	.L18200
	cmpq	$0, 72(%rax)
	jne	.L18200
	jmp	.L18199
.L18193:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L18193
	movq	constructor_type(%rip), %rdi
	jmp	.L29766
	.p2align 6,,7
.L32202:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L18166
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r14, %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31038
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L18166
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r14, %rdi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L18166
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L18146
	cmpb	$18, %al
	jne	.L18166
.L18146:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L18152
.L29760:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L18194
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L18200
	testb	$2, 53(%rax)
	je	.L18200
	cmpq	$0, 72(%rax)
	jne	.L18200
.L18158:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L18200
	testb	$2, 53(%rax)
	je	.L18200
	cmpq	$0, 72(%rax)
	jne	.L18200
	jmp	.L18158
.L18152:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L18152
	movq	constructor_type(%rip), %rdi
	jmp	.L29760
.L31038:
	movq	constructor_type(%rip), %rdi
	jmp	.L18143
	.p2align 6,,7
.L31439:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L17769
.L32201:
	call	integer_zerop
	testl	%eax, %eax
	je	.L18139
	movq	constructor_type(%rip), %rbx
	cmpb	$18, 16(%rbx)
	je	.L17769
	cmpq	$0, (%r14)
	jne	.L17769
	jmp	.L18139
	.p2align 6,,7
.L32200:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L18137
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L18137
	.p2align 6,,7
.L32199:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L29755
.L18119:
	cmpl	$3, (%rbx)
	je	.L32890
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L18115:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L18119
.L29755:
	movslq	%r12d,%r9
	movq	%r8, %r12
	addq	$16, %r9
	andq	$-16, %r9
	subq	%r9, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L29757
.L18133:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32891
	cmpl	$2, %eax
	je	.L32892
.L18127:
	movq	8(%r12), %r11
	movzbl	(%r11), %r8d
	leaq	1(%r11), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L18123
.L18132:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L18132
.L18123:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L18133
.L29757:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	jne	.L32893
.L18136:
	movq	global_trees(%rip), %r12
	jmp	.L18137
.L32893:
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L18136
	.p2align 6,,7
.L32892:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L18127
.L32891:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L18123
	.p2align 6,,7
.L32890:
	addl	$25, %r12d
	jmp	.L18115
.L18108:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L18111
	movq	constructor_type(%rip), %rdx
	movzbl	16(%rdx), %r10d
	subb	$20, %r10b
	cmpb	$1, %r10b
	ja	.L18107
	testb	$2, 53(%r14)
	je	.L18107
	cmpb	$25, 16(%r12)
	je	.L18107
.L18111:
	movl	$0, constructor_simple(%rip)
	jmp	.L18107
	.p2align 6,,7
.L32198:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L18107
.L32197:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L18105
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L18105
	xorl	%esi, %esi
	testl	%esi, %esi
	je	.L18105
	movq	32(%r12), %r13
	movq	32(%r13), %rcx
	movq	104(%rcx), %r12
	jmp	.L18105
	.p2align 6,,7
.L32196:
	movzbl	16(%r12), %ecx
	cmpb	$29, %cl
	je	.L32894
.L18019:
	movq	-176(%rbp), %rbx
	movq	128(%rdx), %rdi
	movq	128(%rbx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L31031
	movq	8(%r12), %rbx
.L18018:
	movzbl	16(%rbx), %r13d
	cmpl	$23, %r13d
	je	.L18021
	cmpl	$18, %r13d
	je	.L18021
	movzbl	16(%r12), %ecx
	cmpb	$32, %cl
	je	.L32895
	movl	optimize(%rip), %r9d
	testl	%r9d, %r9d
	je	.L18078
	cmpb	$34, %cl
	je	.L32896
.L18078:
	cmpb	$116, %cl
	movq	%r12, %rdx
	je	.L31037
	cmpb	$115, %cl
	je	.L32897
.L18087:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L18092
	cmpb	$49, %al
	je	.L18092
	cmpb	$50, %al
	je	.L18092
	cmpb	$101, %al
	je	.L18092
.L18091:
	cmpl	$10, %r13d
	je	.L32898
	cmpb	$39, %cl
	je	.L32899
.L18097:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L18100
	testb	$32, 17(%rbx)
	je	.L18101
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L18102
	movzwl	60(%rbx), %r8d
	movq	integer_types+40(%rip), %rbx
	movzwl	60(%rbx), %r9d
	andl	$511, %r8d
	andl	$511, %r9d
	cmpl	%r9d, %r8d
	je	.L18102
.L18101:
	movq	integer_types+40(%rip), %rdi
.L31953:
	movq	%r12, %rsi
.L31954:
	call	convert
.L31431:
	movq	%rax, %rbx
.L31422:
	movq	global_trees(%rip), %r8
.L18076:
	movq	%rbx, %r12
	jmp	.L31432
.L18102:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31953
.L18100:
	movl	flag_traditional(%rip), %r15d
	testl	%r15d, %r15d
	je	.L18103
	movl	flag_allow_single_precision(%rip), %r11d
	testl	%r11d, %r11d
	jne	.L18103
	movq	global_trees+192(%rip), %rdi
	cmpq	%rdi, 128(%rbx)
	je	.L32900
.L18103:
	cmpl	$5, %r13d
	je	.L32901
.L18104:
	movq	%r12, %rbx
	jmp	.L31422
.L32901:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31423:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L18076
.L32900:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31953
.L32899:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L18097
	movq	integer_types+40(%rip), %r10
	movq	40(%rdx), %rdi
	movzwl	60(%r10), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L18097
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	je	.L18101
	testb	$32, 17(%rbx)
	jne	.L18102
	jmp	.L18101
.L32898:
	movq	integer_types+40(%rip), %r13
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %ecx
	movzwl	60(%r13), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%ecx, %ecx
	jne	.L18096
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L18095
.L18096:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L18095:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31953
	.p2align 6,,7
.L18092:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L18091
.L32897:
	movq	32(%r12), %rsi
	movq	8(%r12), %r15
	cmpq	%r15, 8(%rsi)
	jne	.L18087
.L18090:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L32902
.L31037:
	movq	32(%r12), %rsi
	jmp	.L18090
.L32902:
	cmpb	$115, %cl
	jne	.L18087
	movq	32(%rsi), %rdi
	movq	8(%r12), %r11
	cmpq	%r11, 8(%rdi)
	movq	%rdi, %rsi
	je	.L18090
	jmp	.L18087
.L32896:
	movl	pedantic(%rip), %r8d
	testl	%r8d, %r8d
	jne	.L18078
	cmpb	$51, 48(%r12)
	je	.L18078
	cmpq	$0, current_function_decl(%rip)
	je	.L18084
	movzbl	17(%r12), %ebx
	andb	$24, %bl
	cmpb	$16, %bl
	je	.L32903
.L18084:
	movq	%r12, %rsi
.L18085:
	movq	%rsi, %r12
	movq	8(%rsi), %rbx
.L31421:
	movzbl	16(%r12), %ecx
	jmp	.L18078
.L32903:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L18084
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L18084
	testb	$2, 17(%rax)
	je	.L18084
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L18085
	jmp	.L18084
.L32895:
	movq	104(%r12), %r12
	jmp	.L31421
	.p2align 6,,7
.L18021:
	movzbl	16(%r12), %ecx
	xorl	%r15d, %r15d
	movl	%r13d, %edi
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L31033
	cmpb	$115, %cl
	je	.L32904
.L18023:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L18029
	cmpb	$49, %al
	je	.L18029
	cmpb	$50, %al
	je	.L18029
	cmpb	$101, %al
	je	.L18029
.L18028:
	cmpl	$23, %edi
	je	.L32905
	cmpl	$18, %edi
	jne	.L18104
	movzbl	%cl, %edi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rdi), %eax
	movq	8(%rbx), %r13
	cmpb	$114, %al
	je	.L18034
	cmpb	$100, %al
	je	.L18034
.L18033:
	movzbl	17(%rbx), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %edi
	shrb	$4, %r10b
	shrb	$3, %dil
	andl	%r10d, %r9d
	andl	$1, %edi
	movzbl	62(%rbx), %r10d
	addl	%edi, %edi
	orl	%edi, %r9d
	movzbl	16(%rbx), %edi
	movl	%r10d, %esi
	shrb	$5, %sil
	andl	$1, %esi
	sall	$2, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	cmpb	$20, %dil
	je	.L32906
.L18037:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L18036
	testl	%edx, %edx
	jne	.L18036
	testl	%r11d, %r11d
	je	.L18035
.L18036:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%ebx, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L32907
.L18038:
	leal	0(,%rcx,8), %r8d
	movq	%r13, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L18035:
	cmpb	$41, %cl
	je	.L32908
	cmpb	$47, %cl
	je	.L32909
	xorl	%ebx, %ebx
	testl	%r15d, %r15d
	je	.L32910
.L18072:
	movl	flag_isoc99(%rip), %edi
	testl	%edi, %edi
	jne	.L18073
	testl	%ebx, %ebx
	je	.L18104
.L18073:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L32911
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L31954
.L32911:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L31423
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %r10d
	andb	$1, %r10b
	addb	%r10b, %r10b
	andb	$-4, %r12b
	orb	%r10b, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L31422
.L32910:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L18072
.L32909:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r15d
	movq	%r13, %rax
	cmpl	$23, %r15d
	je	.L18042
	cmpl	$18, %r15d
	je	.L18042
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L32912
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L18045
	cmpb	$34, %dl
	je	.L32913
.L18045:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L31035
	cmpb	$115, %dl
	je	.L32914
.L18054:
	movzbl	%dl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L18059
	cmpb	$49, %al
	je	.L18059
	cmpb	$50, %al
	je	.L18059
	cmpb	$101, %al
	je	.L18059
.L18058:
	cmpl	$10, %r15d
	je	.L32915
	cmpb	$39, %dl
	je	.L32916
.L18064:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L18067
	testb	$32, 17(%r13)
	je	.L18068
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L18069
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r13), %esi
	movzwl	60(%rdx), %r13d
	andl	$511, %esi
	andl	$511, %r13d
	cmpl	%r13d, %esi
	je	.L18069
.L18068:
	movq	integer_types+40(%rip), %rdi
.L31420:
	movq	%rbx, %rsi
	call	convert
.L18043:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31431
.L18069:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31420
.L18067:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L18070
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L18070
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%r13)
	je	.L32917
.L18070:
	cmpl	$5, %r15d
	je	.L32918
	movq	%rbx, %rax
	jmp	.L18043
.L32918:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L18043
.L32917:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31420
.L32916:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L18064
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L18064
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L18068
	testb	$32, 17(%r13)
	jne	.L18069
	jmp	.L18068
.L32915:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r15d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r15d, %r15d
	jne	.L18063
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L18062
.L18063:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L18062:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31420
.L18059:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L18058
.L32914:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rdi, 8(%rsi)
	jne	.L18054
.L18057:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L32919
.L31035:
	movq	32(%rbx), %rsi
	jmp	.L18057
.L32919:
	cmpb	$115, %dl
	jne	.L18054
	movq	32(%rsi), %r9
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%r9)
	movq	%r9, %rsi
	je	.L18057
	jmp	.L18054
.L32913:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L18049
	cmpb	$51, 48(%rbx)
	je	.L18049
	cmpq	$0, current_function_decl(%rip)
	je	.L18051
	movzbl	17(%rbx), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L32920
.L18051:
	movq	%rbx, %rsi
.L18052:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L18049:
	movq	%rax, %r13
	jmp	.L18045
.L32920:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L18051
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L18051
	testb	$2, 17(%rax)
	je	.L18051
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L18052
	jmp	.L18051
.L32912:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L18045
.L18042:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L18043
.L32908:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L31954
.L32907:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L18038
.L32906:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L18037
.L18034:
	movzbl	17(%r12), %r10d
	movl	$1, %r11d
	movl	%r10d, %edx
	shrb	$3, %r10b
	shrb	$4, %dl
	andl	%r10d, %r11d
	andl	$1, %edx
	jmp	.L18033
.L32905:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31431
	.p2align 6,,7
.L18029:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L18028
.L32904:
	movq	32(%r12), %rsi
	cmpq	%rbx, 8(%rsi)
	jne	.L18023
.L18027:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r15d
	cmpb	$116, %cl
	jne	.L32921
.L31033:
	movq	32(%r12), %rsi
	jmp	.L18027
.L32921:
	cmpb	$115, %cl
	jne	.L18023
	movq	32(%rsi), %rsi
	movq	8(%r12), %r11
	cmpq	%r11, 8(%rsi)
	je	.L18027
	jmp	.L18023
.L32894:
	movq	-176(%rbp), %rbx
	cmpb	$18, 16(%rbx)
	jne	.L18019
	movq	8(%rbx), %r8
	cmpb	$6, 16(%r8)
	jne	.L18019
	movq	global_trees(%rip), %r8
	jmp	.L18017
	.p2align 6,,7
.L18016:
	movq	%r12, %rdi
	movq	%rbx, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L18244
	movq	-664(%rbp), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L32922
.L31436:
	movq	%rax, -664(%rbp)
	jmp	.L17769
.L32922:
	movq	-664(%rbp), %r13
	movq	32(%r13), %rsi
	movq	%rsi, -696(%rbp)
	jmp	.L17770
	.p2align 6,,7
.L18244:
	movq	-664(%rbp), %rcx
	movq	8(%rcx), %rax
	testq	%rax, %rax
	jne	.L31436
	movq	-664(%rbp), %rcx
	movq	16(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L18251
	cmpq	%rcx, 8(%rax)
	je	.L18254
.L18251:
	testq	%rax, %rax
	movq	%rax, -664(%rbp)
	je	.L17770
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L17769
	movq	-664(%rbp), %rax
	movq	32(%rax), %rdi
	movq	%rdi, -696(%rbp)
	jmp	.L17770
	.p2align 6,,7
.L18254:
	movq	16(%rdx), %rax
	movq	%rdx, -664(%rbp)
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L18251
	movq	-664(%rbp), %r10
	cmpq	%r10, 8(%rax)
	je	.L18254
	jmp	.L18251
	.p2align 6,,7
.L32195:
	movq	-664(%rbp), %rbx
	movq	constructor_unfilled_index(%rip), %rsi
	movq	32(%rbx), %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L17773
	movq	constructor_type(%rip), %rsi
	movq	40(%rbx), %r12
	movq	constructor_unfilled_index(%rip), %r15
	movq	8(%rsi), %r13
	movq	%r13, -168(%rbp)
	movq	8(%r12), %rbx
	movzbl	16(%rbx), %eax
	movq	%rbx, %rdx
	cmpb	$23, %al
	je	.L17775
	cmpb	$18, %al
	je	.L32923
.L31021:
	movq	global_trees(%rip), %r8
.L31416:
	movzbl	16(%r12), %ecx
.L17774:
	cmpb	$-86, %cl
	je	.L32924
.L17862:
	cmpq	%r8, %r12
	je	.L32925
	testb	$2, 17(%r12)
	jne	.L17865
	movl	$0, constructor_constant(%rip)
.L17864:
	movl	require_constant_value(%rip), %r14d
	testl	%r14d, %r14d
	je	.L17869
	testb	$2, 17(%r12)
	je	.L32926
.L17869:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L32927
.L17894:
	testq	%r15, %r15
	je	.L17896
	movq	8(%r15), %rax
	cmpq	global_trees(%rip), %rax
	je	.L17769
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L32928
.L17896:
	movq	-168(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%r12, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -672(%rbp)
	je	.L31439
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L32929
.L17900:
	cmpb	$20, 16(%rdi)
	je	.L32930
.L17921:
	cmpb	$21, 16(%rdi)
	je	.L32931
.L17920:
	testq	%r15, %r15
	je	.L17988
	cmpb	$25, 16(%r15)
	je	.L32932
.L17988:
	movq	constructor_elements(%rip), %rdx
	movq	-672(%rbp), %rsi
	movq	%r15, %rdi
	call	tree_cons
	movq	constructor_type(%rip), %r15
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r15), %eax
	movq	%r15, %rdx
	cmpb	$18, %al
	je	.L32053
	cmpb	$20, %al
	jne	.L18234
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L18233
	testb	$2, 53(%rax)
	je	.L18233
	cmpq	$0, 72(%rax)
	jne	.L18233
.L17996:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L18233
	testb	$2, 53(%rax)
	je	.L18233
	cmpq	$0, 72(%rax)
	jne	.L18233
	jmp	.L17996
.L32932:
	movq	%r15, %rdi
	call	copy_node
	movq	%rax, %r15
	jmp	.L17988
.L32931:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L17920
	movq	32(%rax), %rcx
	testb	$1, 17(%rcx)
	jne	.L32933
.L17963:
	movq	$0, constructor_elements(%rip)
	jmp	.L17920
.L32933:
	movl	$.LC42, %edi
	xorl	%eax, %eax
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdi
	xorl	%r12d, %r12d
	cmpq	%rdi, %r8
	movq	%r8, %rbx
	movq	%rdi, %r13
	jae	.L29745
.L17970:
	cmpl	$3, (%rbx)
	je	.L32934
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L17966:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L17970
.L29745:
	movslq	%r12d,%rdx
	movq	%r8, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L29747
.L17984:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32935
	cmpl	$2, %eax
	je	.L32936
.L17978:
	movq	8(%r12), %r13
	movzbl	(%r13), %r10d
	leaq	1(%r13), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L17974
.L17983:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L17983
.L17974:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L17984
.L29747:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L17963
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L17963
.L32936:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L17978
.L32935:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L17974
.L32934:
	addl	$25, %r12d
	jmp	.L17966
.L32930:
	movl	constructor_incremental(%rip), %esi
	testl	%esi, %esi
	je	.L17923
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, %r15
	je	.L17921
	testq	%rax, %rax
	jne	.L17924
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L17931
.L29739:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L32937
.L17951:
	cmpb	$18, 16(%rdi)
	je	.L32938
.L17957:
	movl	$0, constructor_incremental(%rip)
.L17923:
	movq	-672(%rbp), %rsi
	movq	%r15, %rdi
	jmp	.L31438
.L32938:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L32939
	movq	global_trees+136(%rip), %rax
.L31419:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L17957
.L32939:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31419
.L32937:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L17957
	testb	$2, 53(%rax)
	je	.L17957
	cmpq	$0, 72(%rax)
	jne	.L17957
.L17937:
	movq	constructor_unfilled_fields(%rip), %r8
	movq	(%r8), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L17957
	testb	$2, 53(%rax)
	je	.L17957
	cmpq	$0, 72(%rax)
	jne	.L17957
	jmp	.L17937
.L17931:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L17931
	movq	constructor_type(%rip), %rdi
	jmp	.L29739
.L17924:
	movq	%r15, %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r14
	call	bit_position
	movq	%r14, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L17923
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L17944
	cmpb	$18, %al
	jne	.L17923
.L17944:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L17950
.L29742:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L17951
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L17957
	testb	$2, 53(%rax)
	je	.L17957
	cmpq	$0, 72(%rax)
	jne	.L17957
.L17956:
	movq	constructor_unfilled_fields(%rip), %r11
	movq	(%r11), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L17957
	testb	$2, 53(%rax)
	je	.L17957
	cmpq	$0, 72(%rax)
	jne	.L17957
	jmp	.L17956
.L17950:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L17950
	movq	constructor_type(%rip), %rdi
	jmp	.L29742
.L32929:
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L17923
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31028
	movl	constructor_incremental(%rip), %r13d
	testl	%r13d, %r13d
	je	.L17923
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L17923
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L17903
	cmpb	$18, %al
	jne	.L17923
.L17903:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L17909
.L29736:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L17951
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L17957
	testb	$2, 53(%rax)
	je	.L17957
	cmpq	$0, 72(%rax)
	jne	.L17957
.L17915:
	movq	constructor_unfilled_fields(%rip), %r9
	movq	(%r9), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L17957
	testb	$2, 53(%rax)
	je	.L17957
	cmpq	$0, 72(%rax)
	jne	.L17957
	jmp	.L17915
.L17909:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L17909
	movq	constructor_type(%rip), %rdi
	jmp	.L29736
.L31028:
	movq	constructor_type(%rip), %rdi
	jmp	.L17900
.L32928:
	call	integer_zerop
	testl	%eax, %eax
	je	.L17896
	movq	constructor_type(%rip), %rbx
	cmpb	$18, 16(%rbx)
	je	.L17769
	cmpq	$0, (%r15)
	jne	.L17769
	jmp	.L17896
.L32927:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L17894
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L17894
.L32926:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r11
	xorl	%r12d, %r12d
	cmpq	%r11, %r8
	movq	%r8, %rbx
	movq	%r11, %r13
	jae	.L29731
.L17876:
	cmpl	$3, (%rbx)
	je	.L32940
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L17872:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L17876
.L29731:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L29733
.L17890:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32941
	cmpl	$2, %eax
	je	.L32942
.L17884:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %edi
	leaq	1(%rdx), %rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	je	.L17880
.L17889:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L17889
.L17880:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L17890
.L29733:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L32943
.L17893:
	movq	global_trees(%rip), %r12
	jmp	.L17894
.L32943:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L17893
.L32942:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L17884
.L32941:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L17880
.L32940:
	addl	$25, %r12d
	jmp	.L17872
.L17865:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L17868
	movq	constructor_type(%rip), %rsi
	movzbl	16(%rsi), %r8d
	subb	$20, %r8b
	cmpb	$1, %r8b
	ja	.L17864
	testb	$2, 53(%r15)
	je	.L17864
	cmpb	$25, 16(%r12)
	je	.L17864
.L17868:
	movl	$0, constructor_simple(%rip)
	jmp	.L17864
.L32925:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L17864
.L32924:
	movl	require_constant_value(%rip), %ebx
	testl	%ebx, %ebx
	je	.L17862
	movl	flag_isoc99(%rip), %edi
	testl	%edi, %edi
	jne	.L17862
	xorl	%r10d, %r10d
	testl	%r10d, %r10d
	je	.L17862
	movq	32(%r12), %r13
	movq	32(%r13), %r9
	movq	104(%r9), %r12
	jmp	.L17862
.L32923:
	movzbl	16(%r12), %ecx
	cmpb	$29, %cl
	je	.L32944
.L17776:
	movq	-168(%rbp), %r10
	movq	128(%rdx), %rdi
	movq	128(%r10), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L31021
	movq	8(%r12), %rbx
.L17775:
	movzbl	16(%rbx), %r13d
	cmpl	$23, %r13d
	je	.L17778
	cmpl	$18, %r13d
	je	.L17778
	movzbl	16(%r12), %ecx
	cmpb	$32, %cl
	je	.L32945
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L17835
	cmpb	$34, %cl
	je	.L32946
.L17835:
	cmpb	$116, %cl
	movq	%r12, %rdx
	je	.L31027
	cmpb	$115, %cl
	je	.L32947
.L17844:
	movzbl	%cl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L17849
	cmpb	$49, %al
	je	.L17849
	cmpb	$50, %al
	je	.L17849
	cmpb	$101, %al
	je	.L17849
.L17848:
	cmpl	$10, %r13d
	je	.L32948
	cmpb	$39, %cl
	je	.L32949
.L17854:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L17857
	testb	$32, 17(%rbx)
	je	.L17858
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L17859
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%rbx), %r11d
	movzwl	60(%rdx), %ecx
	andl	$511, %r11d
	andl	$511, %ecx
	cmpl	%ecx, %r11d
	je	.L17859
.L17858:
	movq	integer_types+40(%rip), %rdi
.L31951:
	movq	%r12, %rsi
.L31952:
	call	convert
.L31415:
	movq	%rax, %rbx
.L31406:
	movq	global_trees(%rip), %r8
.L17833:
	movq	%rbx, %r12
	jmp	.L31416
.L17859:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31951
.L17857:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L17860
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L17860
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%rbx)
	je	.L32950
.L17860:
	cmpl	$5, %r13d
	je	.L32951
.L17861:
	movq	%r12, %rbx
	jmp	.L31406
.L32951:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31407:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L17833
.L32950:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31951
.L32949:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L17854
	movq	integer_types+40(%rip), %r14
	movq	40(%rdx), %rdi
	movzwl	60(%r14), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L17854
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L17858
	testb	$32, 17(%rbx)
	jne	.L17859
	jmp	.L17858
.L32948:
	movq	integer_types+40(%rip), %rsi
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%rsi), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L17853
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L17852
.L17853:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L17852:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31951
.L17849:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L17848
.L32947:
	movq	32(%r12), %rsi
	movq	8(%r12), %rdi
	cmpq	%rdi, 8(%rsi)
	jne	.L17844
.L17847:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L32952
.L31027:
	movq	32(%r12), %rsi
	jmp	.L17847
.L32952:
	cmpb	$115, %cl
	jne	.L17844
	movq	32(%rsi), %r9
	movq	8(%r12), %r10
	cmpq	%r10, 8(%r9)
	movq	%r9, %rsi
	je	.L17847
	jmp	.L17844
.L32946:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	jne	.L17835
	cmpb	$51, 48(%r12)
	je	.L17835
	cmpq	$0, current_function_decl(%rip)
	je	.L17841
	movzbl	17(%r12), %ebx
	andb	$24, %bl
	cmpb	$16, %bl
	je	.L32953
.L17841:
	movq	%r12, %rsi
.L17842:
	movq	%rsi, %r12
	movq	8(%rsi), %rbx
.L31405:
	movzbl	16(%r12), %ecx
	jmp	.L17835
.L32953:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L17841
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L17841
	testb	$2, 17(%rax)
	je	.L17841
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L17842
	jmp	.L17841
.L32945:
	movq	104(%r12), %r12
	jmp	.L31405
.L17778:
	movzbl	16(%r12), %ecx
	xorl	%r14d, %r14d
	movl	%r13d, %edi
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L31023
	cmpb	$115, %cl
	je	.L32954
.L17780:
	movzbl	%cl, %r9d 
	movzbl	tree_code_type(%r9), %eax
	cmpb	$60, %al
	je	.L17786
	cmpb	$49, %al
	je	.L17786
	cmpb	$50, %al
	je	.L17786
	cmpb	$101, %al
	je	.L17786
.L17785:
	cmpl	$23, %edi
	je	.L32955
	cmpl	$18, %edi
	jne	.L17861
	movzbl	%cl, %edi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rdi), %eax
	movq	8(%rbx), %r13
	cmpb	$114, %al
	je	.L17791
	cmpb	$100, %al
	je	.L17791
.L17790:
	movzbl	17(%rbx), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %esi
	shrb	$3, %r10b
	shrb	$4, %sil
	andl	$1, %r10d
	andl	%esi, %r9d
	xorl	%esi, %esi
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rbx), %r10d
	movl	%r10d, %edi
	shrb	$5, %dil
	andl	$1, %edi
	sall	$2, %edi
	orl	%edi, %r9d
	movzbl	16(%rbx), %edi
	cmpb	$20, %dil
	je	.L32956
.L17794:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L17793
	testl	%edx, %edx
	jne	.L17793
	testl	%r11d, %r11d
	je	.L17792
.L17793:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%ebx, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L32957
.L17795:
	leal	0(,%rcx,8), %r8d
	movq	%r13, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L17792:
	cmpb	$41, %cl
	je	.L32958
	cmpb	$47, %cl
	je	.L32959
	xorl	%ebx, %ebx
	testl	%r14d, %r14d
	je	.L32960
.L17829:
	movl	flag_isoc99(%rip), %r14d
	testl	%r14d, %r14d
	jne	.L17830
	testl	%ebx, %ebx
	je	.L17861
.L17830:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L32961
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L31952
.L32961:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L31407
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %ecx
	andb	$1, %cl
	addb	%cl, %cl
	andb	$-4, %r12b
	orb	%cl, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L31406
.L32960:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L17829
.L32959:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L17799
	cmpl	$18, %r14d
	je	.L17799
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L32962
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L17802
	cmpb	$34, %dl
	je	.L32963
.L17802:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L31025
	cmpb	$115, %dl
	je	.L32964
.L17811:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L17816
	cmpb	$49, %al
	je	.L17816
	cmpb	$50, %al
	je	.L17816
	cmpb	$101, %al
	je	.L17816
.L17815:
	cmpl	$10, %r14d
	je	.L32965
	cmpb	$39, %dl
	je	.L32966
.L17821:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L17824
	testb	$32, 17(%r13)
	je	.L17825
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L17826
	movq	integer_types+40(%rip), %r10
	movzwl	60(%r13), %edi
	movzwl	60(%r10), %r13d
	andl	$511, %edi
	andl	$511, %r13d
	cmpl	%r13d, %edi
	je	.L17826
.L17825:
	movq	integer_types+40(%rip), %rdi
.L31404:
	movq	%rbx, %rsi
	call	convert
.L17800:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31415
.L17826:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31404
.L17824:
	movl	flag_traditional(%rip), %r9d
	testl	%r9d, %r9d
	je	.L17827
	movl	flag_allow_single_precision(%rip), %r8d
	testl	%r8d, %r8d
	jne	.L17827
	movq	global_trees+192(%rip), %rsi
	cmpq	%rsi, 128(%r13)
	je	.L32967
.L17827:
	cmpl	$5, %r14d
	je	.L32968
	movq	%rbx, %rax
	jmp	.L17800
.L32968:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L17800
.L32967:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31404
.L32966:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L17821
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L17821
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L17825
	testb	$32, 17(%r13)
	jne	.L17826
	jmp	.L17825
.L32965:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L17820
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L17819
.L17820:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L17819:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31404
.L17816:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L17815
.L32964:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L17811
.L17814:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L32969
.L31025:
	movq	32(%rbx), %rsi
	jmp	.L17814
.L32969:
	cmpb	$115, %dl
	jne	.L17811
	movq	32(%rsi), %r8
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%r8)
	movq	%r8, %rsi
	je	.L17814
	jmp	.L17811
.L32963:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L17806
	cmpb	$51, 48(%rbx)
	je	.L17806
	cmpq	$0, current_function_decl(%rip)
	je	.L17808
	movzbl	17(%rbx), %edi
	andb	$24, %dil
	cmpb	$16, %dil
	je	.L32970
.L17808:
	movq	%rbx, %rsi
.L17809:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L17806:
	movq	%rax, %r13
	jmp	.L17802
.L32970:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L17808
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L17808
	testb	$2, 17(%rax)
	je	.L17808
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L17809
	jmp	.L17808
.L32962:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L17802
.L17799:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L17800
.L32958:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L31952
.L32957:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L17795
.L32956:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L17794
.L17791:
	movzbl	17(%r12), %esi
	movl	$1, %r11d
	movl	%esi, %edx
	shrb	$3, %sil
	shrb	$4, %dl
	andl	%esi, %r11d
	andl	$1, %edx
	jmp	.L17790
.L32955:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31415
.L17786:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L17785
.L32954:
	movq	32(%r12), %rsi
	cmpq	%rbx, 8(%rsi)
	jne	.L17780
.L17784:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r14d
	cmpb	$116, %cl
	jne	.L32971
.L31023:
	movq	32(%r12), %rsi
	jmp	.L17784
.L32971:
	cmpb	$115, %cl
	jne	.L17780
	movq	32(%rsi), %rsi
	movq	8(%r12), %r8
	cmpq	%r8, 8(%rsi)
	je	.L17784
	jmp	.L17780
.L32944:
	movq	-168(%rbp), %rsi
	cmpb	$18, 16(%rsi)
	jne	.L17776
	movq	8(%rsi), %r11
	cmpb	$6, 16(%r11)
	jne	.L17776
	movq	global_trees(%rip), %r8
	jmp	.L17774
	.p2align 6,,7
.L17773:
	movq	-664(%rbp), %r8
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%r8), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L18001
	movq	-664(%rbp), %rsi
	movq	(%rsi), %rax
	testq	%rax, %rax
	jne	.L31436
	movq	-664(%rbp), %r14
	movq	32(%r14), %rax
	movq	%rax, -696(%rbp)
	jmp	.L17770
.L18001:
	movq	-664(%rbp), %r11
	movq	8(%r11), %rax
	testq	%rax, %rax
	jne	.L31436
	movq	-664(%rbp), %rsi
	movq	16(%rsi), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L18008
	cmpq	%rsi, 8(%rax)
	je	.L18011
.L18008:
	testq	%rax, %rax
	movq	%rax, -664(%rbp)
	je	.L17770
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L17769
	movq	-664(%rbp), %rdx
	movq	32(%rdx), %rcx
	movq	%rcx, -696(%rbp)
	jmp	.L17770
.L18011:
	movq	16(%rdx), %rax
	movq	%rdx, -664(%rbp)
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L18008
	movq	-664(%rbp), %rdi
	cmpq	%rdi, 8(%rax)
	je	.L18011
	jmp	.L18008
.L32194:
	movq	constructor_unfilled_fields(%rip), %rax
	testq	%rax, %rax
	je	.L17731
.L31354:
	movq	40(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L32972
.L17736:
	movq	(%rax), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	jne	.L31354
	jmp	.L17731
.L32972:
	call	integer_zerop
	testl	%eax, %eax
	je	.L32973
	movq	constructor_unfilled_fields(%rip), %rax
	jmp	.L17736
.L32973:
	movq	constructor_unfilled_fields(%rip), %rax
	testq	%rax, %rax
	je	.L17731
	movl	constructor_designated(%rip), %esi
	testl	%esi, %esi
	jne	.L17731
	movq	72(%rax), %rax
	movl	$.LC159, %r12d
	testq	%rax, %rax
	je	.L17739
	movq	32(%rax), %r12
.L17739:
	movq	spelling(%rip), %rcx
	movq	spelling_base(%rip), %rdi
	movl	spelling_size(%rip), %eax
	movq	%rcx, %r11
	subq	%rdi, %r11
	movq	%r11, %rbx
	shrq	$4, %rbx
	cmpl	%eax, %ebx
	jl	.L17740
	addl	$10, %eax
	testq	%rdi, %rdi
	movl	%eax, spelling_size(%rip)
	jne	.L17741
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L31403:
	movslq	%ebx,%rcx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rcx
	addq	spelling_base(%rip), %rcx
	movq	%rcx, spelling(%rip)
.L17740:
	movq	%r12, 8(%rcx)
	movl	$2, (%rcx)
	xorl	%eax, %eax
	addq	$16, %rcx
	movl	$.LC42, %edi
	movl	$.LC175, %esi
	movq	%rcx, spelling(%rip)
	xorl	%r12d, %r12d
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdx
	cmpq	%rdx, %r8
	movq	%r8, %rbx
	movq	%rdx, %r13
	jae	.L29722
.L17750:
	cmpl	$3, (%rbx)
	je	.L32974
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L17746:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L17750
.L29722:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L29724
.L17764:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32975
	cmpl	$2, %eax
	je	.L32976
.L17758:
	movq	8(%r12), %r9
	movzbl	(%r9), %r8d
	leaq	1(%r9), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L17754
.L17763:
	movzbl	(%rcx), %r15d
	incq	%rbx
	incq	%rcx
	testb	%r15b, %r15b
	movb	%r15b, (%rbx)
	jne	.L17763
.L17754:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L17764
.L29724:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L32977
.L17767:
	movslq	constructor_depth(%rip),%r12
	salq	$4, %r12
	addq	spelling_base(%rip), %r12
	movq	%r12, spelling(%rip)
	jmp	.L17731
.L32977:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L17767
.L32976:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L17758
.L32975:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L17754
.L32974:
	addl	$25, %r12d
	jmp	.L17746
.L17741:
	movslq	%eax,%rsi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L31403
	.p2align 6,,7
.L17667:
	cmpb	$18, 16(%rdi)
	jne	.L17665
	movq	constructor_max_index(%rip), %rax
	testq	%rax, %rax
	jne	.L32978
.L18332:
	movq	$0, -752(%rbp)
	movq	-1296(%rbp), %r11
	testq	%rdi, %rdi
	movq	%r11, -184(%rbp)
	je	.L18339
	cmpq	$0, constructor_fields(%rip)
	je	.L18339
	cmpb	$18, 16(%rdi)
	je	.L32979
.L18339:
	movl	extra_warnings(%rip), %r11d
	testl	%r11d, %r11d
	je	.L18396
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L18396
	cmpb	$20, 16(%rax)
	je	.L32980
.L18396:
	movq	constructor_pending_elts(%rip), %rax
	movl	$1, constructor_incremental(%rip)
	movq	%rax, -712(%rbp)
.L18433:
	cmpq	$0, -712(%rbp)
	movq	$0, -744(%rbp)
	je	.L18435
.L18921:
	movq	constructor_type(%rip), %r8
	movzbl	16(%r8), %eax
	cmpb	$18, %al
	je	.L32981
	subb	$20, %al
	cmpb	$1, %al
	ja	.L18434
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L18435
	call	bit_position
	movq	-712(%rbp), %r10
	movq	%rax, %r12
	movq	32(%r10), %rdi
	call	bit_position
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L18681
	movq	-712(%rbp), %r9
	movq	32(%r9), %rbx
	movq	40(%r9), %r12
	movq	8(%rbx), %r13
	movq	%rbx, %r15
	movq	%rbx, constructor_unfilled_fields(%rip)
	movq	%rbx, -736(%rbp)
	movq	%r13, -200(%rbp)
	movq	8(%r12), %rbx
	movzbl	16(%rbx), %eax
	movq	%rbx, %rdx
	cmpb	$23, %al
	je	.L18683
	cmpb	$18, %al
	je	.L32982
.L31052:
	movq	global_trees(%rip), %r8
.L31471:
	movzbl	16(%r12), %ecx
.L18682:
	cmpb	$-86, %cl
	je	.L32983
.L18770:
	cmpq	%r8, %r12
	je	.L32984
	testb	$2, 17(%r12)
	jne	.L18773
	movl	$0, constructor_constant(%rip)
.L18772:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L18777
	testb	$2, 17(%r12)
	je	.L32985
.L18777:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L32986
.L18802:
	testq	%r15, %r15
	je	.L18804
	movq	8(%r15), %rax
	cmpq	global_trees(%rip), %rax
	je	.L18434
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L32987
.L18804:
	movq	-200(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%r12, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -728(%rbp)
	je	.L31478
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L32988
.L18808:
	cmpb	$20, 16(%rdi)
	je	.L32989
.L18829:
	cmpb	$21, 16(%rdi)
	je	.L32990
.L18828:
	testq	%r15, %r15
	je	.L18896
	cmpb	$25, 16(%r15)
	je	.L32991
.L18896:
	movq	constructor_elements(%rip), %rdx
	movq	-736(%rbp), %rdi
	movq	-728(%rbp), %rsi
	call	tree_cons
	movq	constructor_type(%rip), %r15
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r15), %eax
	movq	%r15, %rdx
	cmpb	$18, %al
	je	.L32057
	cmpb	$20, %al
	je	.L32992
.L18899:
	cmpb	$21, 16(%rdx)
	je	.L32993
.L18898:
	xorl	%eax, %eax
	testl	%eax, %eax
	jne	.L32994
.L18434:
	cmpq	$0, -712(%rbp)
	jne	.L18921
.L18435:
	movl	$1, %edx
	testl	%edx, %edx
	je	.L18924
	cmpq	$0, -744(%rbp)
	je	.L18924
	movq	constructor_type(%rip), %r8
	movzbl	16(%r8), %edx
	leal	-20(%rdx), %r9d
	cmpb	$1, %r9b
	jbe	.L32995
	cmpb	$18, %dl
	jne	.L18433
	movq	-744(%rbp), %rsi
	movq	%rsi, constructor_unfilled_index(%rip)
	jmp	.L18433
.L32995:
	movq	-744(%rbp), %r11
	movq	%r11, constructor_unfilled_fields(%rip)
	jmp	.L18433
.L18924:
	movq	-1296(%rbp), %r15
	movq	88(%r15), %rax
	testq	%rax, %rax
	jne	.L31479
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L18929
	movzbl	16(%rax), %edx
	leal	-20(%rdx), %ebx
	cmpb	$1, %bl
	jbe	.L18932
	cmpb	$18, %dl
	je	.L18932
	cmpb	$9, %dl
	je	.L18932
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	jne	.L18933
	movl	constructor_erroneous(%rip), %eax
	testl	%eax, %eax
	je	.L32996
.L18934:
	movq	global_trees(%rip), %rax
	movq	%rax, -752(%rbp)
.L18929:
	movq	-1296(%rbp), %r10
	movq	8(%r10), %rdx
	movsbl	104(%r10),%esi
	movsbl	105(%r10),%r11d
	movsbl	107(%r10),%r8d
	movsbl	109(%r10),%r9d
	cmpb	$0, 106(%r10)
	movq	%rdx, constructor_type(%rip)
	movq	16(%r10), %rax
	movq	24(%r10), %r13
	movsbl	110(%r10),%edx
	movq	32(%r10), %rcx
	movl	%esi, constructor_constant(%rip)
	movq	40(%r10), %r14
	movq	48(%r10), %rbx
	movl	%r11d, constructor_simple(%rip)
	movq	56(%r10), %r15
	movq	64(%r10), %r12
	movq	%rax, constructor_fields(%rip)
	movq	72(%r10), %rdi
	movq	%r13, constructor_index(%rip)
	movq	%rcx, constructor_max_index(%rip)
	movl	%edx, constructor_designated(%rip)
	movq	%r14, constructor_unfilled_index(%rip)
	movq	%rbx, constructor_unfilled_fields(%rip)
	movl	84(%r10), %edx
	movq	%r15, constructor_bit_index(%rip)
	movq	%r12, constructor_elements(%rip)
	movl	%r8d, constructor_erroneous(%rip)
	movl	%r9d, constructor_incremental(%rip)
	movq	%rdi, constructor_pending_elts(%rip)
	movl	%edx, constructor_depth(%rip)
	jne	.L18991
	movq	96(%r10), %r10
	movq	%r10, constructor_range_stack(%rip)
.L18991:
	movq	-1296(%rbp), %r9
	movslq	%edx,%r8
	salq	$4, %r8
	addq	spelling_base(%rip), %r8
	movq	(%r9), %rdi
	movq	%r8, spelling(%rip)
	movq	%rdi, constructor_stack(%rip)
	movq	-184(%rbp), %rdi
	call	free
	movq	-752(%rbp), %rdi
	jmp	.L32114
.L32996:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC176, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r14
	xorl	%r12d, %r12d
	cmpq	%r14, %r8
	movq	%r8, %rbx
	movq	%r14, %r13
	jae	.L29852
.L18941:
	cmpl	$3, (%rbx)
	je	.L32997
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L18937:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L18941
.L29852:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L29854
.L18955:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L32998
	cmpl	$2, %eax
	je	.L32999
.L18949:
	movq	8(%r12), %rdi
	movzbl	(%rdi), %r13d
	leaq	1(%rdi), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L18945
.L18954:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L18954
.L18945:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L18955
.L29854:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L18934
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L18934
.L32999:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L18949
.L32998:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L18945
.L32997:
	addl	$25, %r12d
	jmp	.L18937
.L18933:
	cmpq	$0, (%rax)
	jne	.L33000
.L18960:
	movq	32(%rax), %rax
.L31479:
	movq	%rax, -752(%rbp)
	jmp	.L18929
.L33000:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC177, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdx
	xorl	%r12d, %r12d
	cmpq	%rdx, %r8
	movq	%r8, %rbx
	movq	%rdx, %r13
	jae	.L29857
.L18967:
	cmpl	$3, (%rbx)
	je	.L33001
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L18963:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L18967
.L29857:
	movslq	%r12d,%r9
	movq	%r8, %r12
	addq	$16, %r9
	andq	$-16, %r9
	subq	%r9, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L29859
.L18981:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33002
	cmpl	$2, %eax
	je	.L33003
.L18975:
	movq	8(%r12), %r11
	movzbl	(%r11), %r8d
	leaq	1(%r11), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L18971
.L18980:
	movzbl	(%rcx), %esi
	incq	%rbx
	incq	%rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	jne	.L18980
.L18971:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L18981
.L29859:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L33004
.L18984:
	movq	constructor_elements(%rip), %rax
	jmp	.L18960
.L33004:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L18984
.L33003:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L18975
.L33002:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L18971
.L33001:
	addl	$25, %r12d
	jmp	.L18963
.L18932:
	movl	constructor_erroneous(%rip), %r12d
	testl	%r12d, %r12d
	je	.L18987
	movq	global_trees(%rip), %r15
	movq	%r15, -752(%rbp)
	jmp	.L18929
.L18987:
	movq	constructor_elements(%rip), %rdi
	call	nreverse
	xorl	%edx, %edx
	movq	constructor_type(%rip), %rsi
	movq	%rax, %rcx
	movl	$46, %edi
	xorl	%eax, %eax
	call	build
	movl	constructor_constant(%rip), %ebx
	movq	%rax, -752(%rbp)
	testl	%ebx, %ebx
	je	.L18929
	orb	$2, 17(%rax)
	movl	constructor_constant(%rip), %r14d
	testl	%r14d, %r14d
	je	.L18929
	movl	constructor_simple(%rip), %ecx
	testl	%ecx, %ecx
	je	.L18929
	movq	-752(%rbp), %r13
	orb	$4, 18(%r13)
	jmp	.L18929
	.p2align 6,,7
.L32994:
	xorl	%edi, %edi
	call	output_pending_init_elements
	jmp	.L18434
.L32993:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L18898
.L32992:
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L18898
	testb	$2, 53(%rax)
	je	.L18898
	cmpq	$0, 72(%rax)
	jne	.L18898
.L18904:
	movq	constructor_unfilled_fields(%rip), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L18898
	testb	$2, 53(%rax)
	je	.L18898
	cmpq	$0, 72(%rax)
	jne	.L18898
	jmp	.L18904
.L32057:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L18898
.L32991:
	movq	%r15, %rdi
	call	copy_node
	movq	%rax, -736(%rbp)
	jmp	.L18896
	.p2align 6,,7
.L32990:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L18828
	movq	32(%rax), %rdx
	testb	$1, 17(%rdx)
	jne	.L33005
.L18871:
	movq	$0, constructor_elements(%rip)
	jmp	.L18828
.L33005:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r10
	xorl	%r12d, %r12d
	cmpq	%r10, %r8
	movq	%r8, %rbx
	movq	%r10, %r13
	jae	.L29845
.L18878:
	cmpl	$3, (%rbx)
	je	.L33006
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L18874:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L18878
.L29845:
	movslq	%r12d,%r9
	movq	%r8, %r12
	addq	$16, %r9
	andq	$-16, %r9
	subq	%r9, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L29847
.L18892:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33007
	cmpl	$2, %eax
	je	.L33008
.L18886:
	movq	8(%r12), %r11
	movzbl	(%r11), %r8d
	leaq	1(%r11), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L18882
.L18891:
	movzbl	(%rcx), %esi
	incq	%rbx
	incq	%rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	jne	.L18891
.L18882:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L18892
.L29847:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L18871
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L18871
.L33008:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L18886
.L33007:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L18882
.L33006:
	addl	$25, %r12d
	jmp	.L18874
	.p2align 6,,7
.L32989:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L18831
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, %r15
	je	.L18829
	testq	%rax, %rax
	jne	.L18832
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L18839
.L29839:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L33009
.L18859:
	cmpb	$18, 16(%rdi)
	je	.L33010
.L18865:
	movl	$0, constructor_incremental(%rip)
.L18831:
	movq	%r15, %rdi
	movq	-728(%rbp), %rsi
.L31477:
	call	add_pending_init
	jmp	.L18434
.L33010:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L33011
	movq	global_trees+136(%rip), %rax
.L31474:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L18865
.L33011:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31474
.L33009:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L18865
	testb	$2, 53(%rax)
	je	.L18865
	cmpq	$0, 72(%rax)
	jne	.L18865
.L18845:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L18865
	testb	$2, 53(%rax)
	je	.L18865
	cmpq	$0, 72(%rax)
	jne	.L18865
	jmp	.L18845
	.p2align 6,,7
.L18839:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L18839
	movq	constructor_type(%rip), %rdi
	jmp	.L29839
.L18832:
	movq	%r15, %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L18831
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L18852
	cmpb	$18, %al
	jne	.L18831
.L18852:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L18858
.L29842:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L18859
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L18865
	testb	$2, 53(%rax)
	je	.L18865
	cmpq	$0, 72(%rax)
	jne	.L18865
.L18864:
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L18865
	testb	$2, 53(%rax)
	je	.L18865
	cmpq	$0, 72(%rax)
	jne	.L18865
	jmp	.L18864
.L18858:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L18858
	movq	constructor_type(%rip), %rdi
	jmp	.L29842
	.p2align 6,,7
.L32988:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L18831
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31059
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L18831
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L18831
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L18811
	cmpb	$18, %al
	jne	.L18831
.L18811:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L18817
.L29836:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L18859
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L18865
	testb	$2, 53(%rax)
	je	.L18865
	cmpq	$0, 72(%rax)
	jne	.L18865
.L18823:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L18865
	testb	$2, 53(%rax)
	je	.L18865
	cmpq	$0, 72(%rax)
	jne	.L18865
	jmp	.L18823
.L18817:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L18817
	movq	constructor_type(%rip), %rdi
	jmp	.L29836
.L31059:
	movq	constructor_type(%rip), %rdi
	jmp	.L18808
	.p2align 6,,7
.L31478:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L18434
.L32987:
	call	integer_zerop
	testl	%eax, %eax
	je	.L18804
	movq	constructor_type(%rip), %r14
	cmpb	$18, 16(%r14)
	je	.L18434
	cmpq	$0, (%r15)
	jne	.L18434
	jmp	.L18804
.L32986:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L18802
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L18802
.L32985:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L29831
.L18784:
	cmpl	$3, (%rbx)
	je	.L33012
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L18780:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L18784
.L29831:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L29833
.L18798:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33013
	cmpl	$2, %eax
	je	.L33014
.L18792:
	movq	8(%r12), %r11
	movzbl	(%r11), %r8d
	leaq	1(%r11), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L18788
.L18797:
	movzbl	(%rcx), %esi
	incq	%rbx
	incq	%rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	jne	.L18797
.L18788:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L18798
.L29833:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L33015
.L18801:
	movq	global_trees(%rip), %r12
	jmp	.L18802
.L33015:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L18801
	.p2align 6,,7
.L33014:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L18792
.L33013:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L18788
.L33012:
	addl	$25, %r12d
	jmp	.L18780
.L18773:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L18776
	movq	constructor_type(%rip), %r9
	movzbl	16(%r9), %r10d
	subb	$20, %r10b
	cmpb	$1, %r10b
	ja	.L18772
	testb	$2, 53(%r15)
	je	.L18772
	cmpb	$25, 16(%r12)
	je	.L18772
.L18776:
	movl	$0, constructor_simple(%rip)
	jmp	.L18772
.L32984:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L18772
.L32983:
	movl	require_constant_value(%rip), %esi
	testl	%esi, %esi
	je	.L18770
	movl	flag_isoc99(%rip), %ecx
	testl	%ecx, %ecx
	jne	.L18770
	xorl	%r13d, %r13d
	testl	%r13d, %r13d
	je	.L18770
	movq	32(%r12), %rdx
	movq	32(%rdx), %rdi
	movq	104(%rdi), %r12
	jmp	.L18770
	.p2align 6,,7
.L32982:
	movzbl	16(%r12), %ecx
	cmpb	$29, %cl
	je	.L33016
.L18684:
	movq	-200(%rbp), %r14
	movq	128(%rdx), %rdi
	movq	128(%r14), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L31052
	movq	8(%r12), %rbx
.L18683:
	movzbl	16(%rbx), %r13d
	cmpl	$23, %r13d
	je	.L18686
	cmpl	$18, %r13d
	je	.L18686
	movzbl	16(%r12), %ecx
	cmpb	$32, %cl
	je	.L33017
	movl	optimize(%rip), %r10d
	testl	%r10d, %r10d
	je	.L18743
	cmpb	$34, %cl
	je	.L33018
.L18743:
	cmpb	$116, %cl
	movq	%r12, %rdx
	je	.L31058
	cmpb	$115, %cl
	je	.L33019
.L18752:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L18757
	cmpb	$49, %al
	je	.L18757
	cmpb	$50, %al
	je	.L18757
	cmpb	$101, %al
	je	.L18757
.L18756:
	cmpl	$10, %r13d
	je	.L33020
	cmpb	$39, %cl
	je	.L33021
.L18762:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L18765
	testb	$32, 17(%rbx)
	je	.L18766
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L18767
	movzwl	60(%rbx), %r9d
	movq	integer_types+40(%rip), %rbx
	movzwl	60(%rbx), %r10d
	andl	$511, %r9d
	andl	$511, %r10d
	cmpl	%r10d, %r9d
	je	.L18767
.L18766:
	movq	integer_types+40(%rip), %rdi
.L31957:
	movq	%r12, %rsi
.L31958:
	call	convert
.L31470:
	movq	%rax, %rbx
.L31461:
	movq	global_trees(%rip), %r8
.L18741:
	movq	%rbx, %r12
	jmp	.L31471
.L18767:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31957
	.p2align 6,,7
.L18765:
	movl	flag_traditional(%rip), %r8d
	testl	%r8d, %r8d
	je	.L18768
	movl	flag_allow_single_precision(%rip), %r14d
	testl	%r14d, %r14d
	jne	.L18768
	movq	global_trees+192(%rip), %r11
	cmpq	%r11, 128(%rbx)
	je	.L33022
.L18768:
	cmpl	$5, %r13d
	je	.L33023
.L18769:
	movq	%r12, %rbx
	jmp	.L31461
.L33023:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31462:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L18741
.L33022:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31957
	.p2align 6,,7
.L33021:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L18762
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%rdi), %esi
	movq	40(%rdx), %rdi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L18762
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	je	.L18766
	testb	$32, 17(%rbx)
	jne	.L18767
	jmp	.L18766
	.p2align 6,,7
.L33020:
	movq	integer_types+40(%rip), %r13
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %ecx
	movzwl	60(%r13), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%ecx, %ecx
	jne	.L18761
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L18760
.L18761:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L18760:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31957
.L18757:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L18756
.L33019:
	movq	32(%r12), %rsi
	movq	8(%r12), %r8
	cmpq	%r8, 8(%rsi)
	jne	.L18752
.L18755:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L33024
.L31058:
	movq	32(%r12), %rsi
	jmp	.L18755
.L33024:
	cmpb	$115, %cl
	jne	.L18752
	movq	32(%rsi), %r11
	movq	8(%r12), %r14
	cmpq	%r14, 8(%r11)
	movq	%r11, %rsi
	je	.L18755
	jmp	.L18752
.L33018:
	movl	pedantic(%rip), %r9d
	testl	%r9d, %r9d
	jne	.L18743
	cmpb	$51, 48(%r12)
	je	.L18743
	cmpq	$0, current_function_decl(%rip)
	je	.L18749
	movzbl	17(%r12), %ebx
	andb	$24, %bl
	cmpb	$16, %bl
	je	.L33025
.L18749:
	movq	%r12, %rsi
.L18750:
	movq	%rsi, %r12
	movq	8(%rsi), %rbx
.L31460:
	movzbl	16(%r12), %ecx
	jmp	.L18743
.L33025:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L18749
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L18749
	testb	$2, 17(%rax)
	je	.L18749
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L18750
	jmp	.L18749
	.p2align 6,,7
.L33017:
	movq	104(%r12), %r12
	jmp	.L31460
.L18686:
	movzbl	16(%r12), %ecx
	xorl	%r14d, %r14d
	movl	%r13d, %edi
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L31054
	cmpb	$115, %cl
	je	.L33026
.L18688:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L18694
	cmpb	$49, %al
	je	.L18694
	cmpb	$50, %al
	je	.L18694
	cmpb	$101, %al
	je	.L18694
.L18693:
	cmpl	$23, %edi
	je	.L33027
	cmpl	$18, %edi
	jne	.L18769
	movzbl	%cl, %edi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rdi), %eax
	movq	8(%rbx), %r13
	cmpb	$114, %al
	je	.L18699
	cmpb	$100, %al
	je	.L18699
.L18698:
	movzbl	17(%rbx), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %edi
	shrb	$4, %r10b
	shrb	$3, %dil
	andl	%r10d, %r9d
	andl	$1, %edi
	movzbl	62(%rbx), %r10d
	addl	%edi, %edi
	orl	%edi, %r9d
	movzbl	16(%rbx), %edi
	movl	%r10d, %esi
	shrb	$5, %sil
	andl	$1, %esi
	sall	$2, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	cmpb	$20, %dil
	je	.L33028
.L18702:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L18701
	testl	%edx, %edx
	jne	.L18701
	testl	%r11d, %r11d
	je	.L18700
.L18701:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%ebx, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L33029
.L18703:
	leal	0(,%rcx,8), %r8d
	movq	%r13, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L18700:
	cmpb	$41, %cl
	je	.L33030
	cmpb	$47, %cl
	je	.L33031
	xorl	%ebx, %ebx
	testl	%r14d, %r14d
	je	.L33032
.L18737:
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L18738
	testl	%ebx, %ebx
	je	.L18769
.L18738:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L33033
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L31958
.L33033:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L31462
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %edi
	andb	$1, %dil
	addb	%dil, %dil
	andb	$-4, %r12b
	orb	%dil, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L31461
.L33032:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L18737
.L33031:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L18707
	cmpl	$18, %r14d
	je	.L18707
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L33034
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L18710
	cmpb	$34, %dl
	je	.L33035
.L18710:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L31056
	cmpb	$115, %dl
	je	.L33036
.L18719:
	movzbl	%dl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L18724
	cmpb	$49, %al
	je	.L18724
	cmpb	$50, %al
	je	.L18724
	cmpb	$101, %al
	je	.L18724
.L18723:
	cmpl	$10, %r14d
	je	.L33037
	cmpb	$39, %dl
	je	.L33038
.L18729:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L18732
	testb	$32, 17(%r13)
	je	.L18733
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L18734
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r13), %esi
	movzwl	60(%rdx), %r13d
	andl	$511, %esi
	andl	$511, %r13d
	cmpl	%r13d, %esi
	je	.L18734
.L18733:
	movq	integer_types+40(%rip), %rdi
.L31459:
	movq	%rbx, %rsi
	call	convert
.L18708:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31470
.L18734:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31459
.L18732:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L18735
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L18735
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%r13)
	je	.L33039
.L18735:
	cmpl	$5, %r14d
	je	.L33040
	movq	%rbx, %rax
	jmp	.L18708
.L33040:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L18708
.L33039:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31459
.L33038:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L18729
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L18729
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L18733
	testb	$32, 17(%r13)
	jne	.L18734
	jmp	.L18733
.L33037:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L18728
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L18727
.L18728:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L18727:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31459
.L18724:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L18723
.L33036:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rdi, 8(%rsi)
	jne	.L18719
.L18722:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L33041
.L31056:
	movq	32(%rbx), %rsi
	jmp	.L18722
.L33041:
	cmpb	$115, %dl
	jne	.L18719
	movq	32(%rsi), %r9
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%r9)
	movq	%r9, %rsi
	je	.L18722
	jmp	.L18719
.L33035:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L18714
	cmpb	$51, 48(%rbx)
	je	.L18714
	cmpq	$0, current_function_decl(%rip)
	je	.L18716
	movzbl	17(%rbx), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L33042
.L18716:
	movq	%rbx, %rsi
.L18717:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L18714:
	movq	%rax, %r13
	jmp	.L18710
.L33042:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L18716
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L18716
	testb	$2, 17(%rax)
	je	.L18716
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L18717
	jmp	.L18716
.L33034:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L18710
.L18707:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L18708
.L33030:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L31958
.L33029:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L18703
.L33028:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L18702
.L18699:
	movzbl	17(%r12), %r10d
	movl	$1, %r11d
	movl	%r10d, %edx
	shrb	$3, %r10b
	shrb	$4, %dl
	andl	%r10d, %r11d
	andl	$1, %edx
	jmp	.L18698
.L33027:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31470
	.p2align 6,,7
.L18694:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L18693
.L33026:
	movq	32(%r12), %rsi
	cmpq	%rbx, 8(%rsi)
	jne	.L18688
.L18692:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r14d
	cmpb	$116, %cl
	jne	.L33043
.L31054:
	movq	32(%r12), %rsi
	jmp	.L18692
.L33043:
	cmpb	$115, %cl
	jne	.L18688
	movq	32(%rsi), %rsi
	movq	8(%r12), %r11
	cmpq	%r11, 8(%rsi)
	je	.L18692
	jmp	.L18688
.L33016:
	movq	-200(%rbp), %rbx
	cmpb	$18, 16(%rbx)
	jne	.L18684
	movq	8(%rbx), %r8
	cmpb	$6, 16(%r8)
	jne	.L18684
	movq	global_trees(%rip), %r8
	jmp	.L18682
	.p2align 6,,7
.L18681:
	movq	%r12, %rdi
	movq	%rbx, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L18909
	movq	-712(%rbp), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	je	.L33044
.L31475:
	movq	%rax, -712(%rbp)
	jmp	.L18434
.L33044:
	movq	-712(%rbp), %r13
	movq	32(%r13), %rcx
	movq	%rcx, -744(%rbp)
	jmp	.L18435
	.p2align 6,,7
.L18909:
	movq	-712(%rbp), %rdi
	movq	8(%rdi), %rax
	testq	%rax, %rax
	jne	.L31475
	movq	-712(%rbp), %rcx
	movq	16(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L18916
	cmpq	%rcx, 8(%rax)
	je	.L18919
.L18916:
	testq	%rax, %rax
	movq	%rax, -712(%rbp)
	je	.L18435
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L18434
	movq	-712(%rbp), %r15
	movq	32(%r15), %rbx
	movq	%rbx, -744(%rbp)
	jmp	.L18435
	.p2align 6,,7
.L18919:
	movq	16(%rdx), %rax
	movq	%rdx, -712(%rbp)
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L18916
	movq	-712(%rbp), %r10
	cmpq	%r10, 8(%rax)
	je	.L18919
	jmp	.L18916
	.p2align 6,,7
.L32981:
	movq	-712(%rbp), %rbx
	movq	constructor_unfilled_index(%rip), %rsi
	movq	32(%rbx), %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L18438
	movq	constructor_type(%rip), %rdi
	movq	40(%rbx), %r12
	movq	constructor_unfilled_index(%rip), %r15
	movq	8(%rdi), %r11
	movq	%r11, -192(%rbp)
	movq	8(%r12), %rbx
	movzbl	16(%rbx), %eax
	movq	%rbx, %rdx
	cmpb	$23, %al
	je	.L18440
	cmpb	$18, %al
	je	.L33045
.L31042:
	movq	global_trees(%rip), %r8
.L31455:
	movzbl	16(%r12), %ecx
.L18439:
	cmpb	$-86, %cl
	je	.L33046
.L18527:
	cmpq	%r8, %r12
	je	.L33047
	testb	$2, 17(%r12)
	jne	.L18530
	movl	$0, constructor_constant(%rip)
.L18529:
	movl	require_constant_value(%rip), %r14d
	testl	%r14d, %r14d
	je	.L18534
	testb	$2, 17(%r12)
	je	.L33048
.L18534:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L33049
.L18559:
	testq	%r15, %r15
	je	.L18561
	movq	8(%r15), %rax
	cmpq	global_trees(%rip), %rax
	je	.L18434
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L33050
.L18561:
	movq	-192(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%r12, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -720(%rbp)
	je	.L31478
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L33051
.L18565:
	cmpb	$20, 16(%rdi)
	je	.L33052
.L18586:
	cmpb	$21, 16(%rdi)
	je	.L33053
.L18585:
	testq	%r15, %r15
	je	.L18653
	cmpb	$25, 16(%r15)
	je	.L33054
.L18653:
	movq	constructor_elements(%rip), %rdx
	movq	-720(%rbp), %rsi
	movq	%r15, %rdi
	call	tree_cons
	movq	constructor_type(%rip), %r15
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r15), %eax
	movq	%r15, %rdx
	cmpb	$18, %al
	je	.L32057
	cmpb	$20, %al
	jne	.L18899
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L18898
	testb	$2, 53(%rax)
	je	.L18898
	cmpq	$0, 72(%rax)
	jne	.L18898
.L18661:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L18898
	testb	$2, 53(%rax)
	je	.L18898
	cmpq	$0, 72(%rax)
	jne	.L18898
	jmp	.L18661
.L33054:
	movq	%r15, %rdi
	call	copy_node
	movq	%rax, %r15
	jmp	.L18653
.L33053:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L18585
	movq	32(%rax), %rcx
	testb	$1, 17(%rcx)
	jne	.L33055
.L18628:
	movq	$0, constructor_elements(%rip)
	jmp	.L18585
.L33055:
	movl	$.LC42, %edi
	xorl	%eax, %eax
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdi
	xorl	%r12d, %r12d
	cmpq	%rdi, %r8
	movq	%r8, %rbx
	movq	%rdi, %r13
	jae	.L29821
.L18635:
	cmpl	$3, (%rbx)
	je	.L33056
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L18631:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L18635
.L29821:
	movslq	%r12d,%rdx
	movq	%r8, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L29823
.L18649:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33057
	cmpl	$2, %eax
	je	.L33058
.L18643:
	movq	8(%r12), %r13
	movzbl	(%r13), %r10d
	leaq	1(%r13), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L18639
.L18648:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L18648
.L18639:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L18649
.L29823:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L18628
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L18628
.L33058:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L18643
.L33057:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L18639
.L33056:
	addl	$25, %r12d
	jmp	.L18631
.L33052:
	movl	constructor_incremental(%rip), %esi
	testl	%esi, %esi
	je	.L18588
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, %r15
	je	.L18586
	testq	%rax, %rax
	jne	.L18589
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L18596
.L29815:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L33059
.L18616:
	cmpb	$18, 16(%rdi)
	je	.L33060
.L18622:
	movl	$0, constructor_incremental(%rip)
.L18588:
	movq	-720(%rbp), %rsi
	movq	%r15, %rdi
	jmp	.L31477
.L33060:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L33061
	movq	global_trees+136(%rip), %rax
.L31458:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L18622
.L33061:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31458
.L33059:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L18622
	testb	$2, 53(%rax)
	je	.L18622
	cmpq	$0, 72(%rax)
	jne	.L18622
.L18602:
	movq	constructor_unfilled_fields(%rip), %r8
	movq	(%r8), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L18622
	testb	$2, 53(%rax)
	je	.L18622
	cmpq	$0, 72(%rax)
	jne	.L18622
	jmp	.L18602
	.p2align 6,,7
.L18596:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L18596
	movq	constructor_type(%rip), %rdi
	jmp	.L29815
.L18589:
	movq	%r15, %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r14
	call	bit_position
	movq	%r14, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L18588
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L18609
	cmpb	$18, %al
	jne	.L18588
.L18609:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L18615
.L29818:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L18616
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L18622
	testb	$2, 53(%rax)
	je	.L18622
	cmpq	$0, 72(%rax)
	jne	.L18622
.L18621:
	movq	constructor_unfilled_fields(%rip), %r11
	movq	(%r11), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L18622
	testb	$2, 53(%rax)
	je	.L18622
	cmpq	$0, 72(%rax)
	jne	.L18622
	jmp	.L18621
.L18615:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L18615
	movq	constructor_type(%rip), %rdi
	jmp	.L29818
	.p2align 6,,7
.L33051:
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L18588
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31049
	movl	constructor_incremental(%rip), %r13d
	testl	%r13d, %r13d
	je	.L18588
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L18588
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L18568
	cmpb	$18, %al
	jne	.L18588
.L18568:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L18574
.L29812:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L18616
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L18622
	testb	$2, 53(%rax)
	je	.L18622
	cmpq	$0, 72(%rax)
	jne	.L18622
.L18580:
	movq	constructor_unfilled_fields(%rip), %r9
	movq	(%r9), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L18622
	testb	$2, 53(%rax)
	je	.L18622
	cmpq	$0, 72(%rax)
	jne	.L18622
	jmp	.L18580
.L18574:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L18574
	movq	constructor_type(%rip), %rdi
	jmp	.L29812
.L31049:
	movq	constructor_type(%rip), %rdi
	jmp	.L18565
	.p2align 6,,7
.L33050:
	call	integer_zerop
	testl	%eax, %eax
	je	.L18561
	movq	constructor_type(%rip), %rbx
	cmpb	$18, 16(%rbx)
	je	.L18434
	cmpq	$0, (%r15)
	jne	.L18434
	jmp	.L18561
	.p2align 6,,7
.L33049:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L18559
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L18559
	.p2align 6,,7
.L33048:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r11
	xorl	%r12d, %r12d
	cmpq	%r11, %r8
	movq	%r8, %rbx
	movq	%r11, %r13
	jae	.L29807
.L18541:
	cmpl	$3, (%rbx)
	je	.L33062
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L18537:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L18541
.L29807:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L29809
.L18555:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33063
	cmpl	$2, %eax
	je	.L33064
.L18549:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %edi
	leaq	1(%rdx), %rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	je	.L18545
.L18554:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L18554
.L18545:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L18555
.L29809:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L33065
.L18558:
	movq	global_trees(%rip), %r12
	jmp	.L18559
.L33065:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L18558
	.p2align 6,,7
.L33064:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L18549
.L33063:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L18545
	.p2align 6,,7
.L33062:
	addl	$25, %r12d
	jmp	.L18537
.L18530:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L18533
	movq	constructor_type(%rip), %rsi
	movzbl	16(%rsi), %r8d
	subb	$20, %r8b
	cmpb	$1, %r8b
	ja	.L18529
	testb	$2, 53(%r15)
	je	.L18529
	cmpb	$25, 16(%r12)
	je	.L18529
.L18533:
	movl	$0, constructor_simple(%rip)
	jmp	.L18529
	.p2align 6,,7
.L33047:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L18529
.L33046:
	movl	require_constant_value(%rip), %ebx
	testl	%ebx, %ebx
	je	.L18527
	movl	flag_isoc99(%rip), %edi
	testl	%edi, %edi
	jne	.L18527
	xorl	%r10d, %r10d
	testl	%r10d, %r10d
	je	.L18527
	movq	32(%r12), %r13
	movq	32(%r13), %r9
	movq	104(%r9), %r12
	jmp	.L18527
	.p2align 6,,7
.L33045:
	movzbl	16(%r12), %ecx
	cmpb	$29, %cl
	je	.L33066
.L18441:
	movq	-192(%rbp), %rbx
	movq	128(%rdx), %rdi
	movq	128(%rbx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L31042
	movq	8(%r12), %rbx
.L18440:
	movzbl	16(%rbx), %r13d
	cmpl	$23, %r13d
	je	.L18443
	cmpl	$18, %r13d
	je	.L18443
	movzbl	16(%r12), %ecx
	cmpb	$32, %cl
	je	.L33067
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L18500
	cmpb	$34, %cl
	je	.L33068
.L18500:
	cmpb	$116, %cl
	movq	%r12, %rdx
	je	.L31048
	cmpb	$115, %cl
	je	.L33069
.L18509:
	movzbl	%cl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L18514
	cmpb	$49, %al
	je	.L18514
	cmpb	$50, %al
	je	.L18514
	cmpb	$101, %al
	je	.L18514
.L18513:
	cmpl	$10, %r13d
	je	.L33070
	cmpb	$39, %cl
	je	.L33071
.L18519:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L18522
	testb	$32, 17(%rbx)
	je	.L18523
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L18524
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%rbx), %r11d
	movzwl	60(%rdx), %ecx
	andl	$511, %r11d
	andl	$511, %ecx
	cmpl	%ecx, %r11d
	je	.L18524
.L18523:
	movq	integer_types+40(%rip), %rdi
.L31955:
	movq	%r12, %rsi
.L31956:
	call	convert
.L31454:
	movq	%rax, %rbx
.L31445:
	movq	global_trees(%rip), %r8
.L18498:
	movq	%rbx, %r12
	jmp	.L31455
.L18524:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31955
.L18522:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L18525
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L18525
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%rbx)
	je	.L33072
.L18525:
	cmpl	$5, %r13d
	je	.L33073
.L18526:
	movq	%r12, %rbx
	jmp	.L31445
.L33073:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31446:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L18498
.L33072:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31955
.L33071:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L18519
	movq	integer_types+40(%rip), %r14
	movq	40(%rdx), %rdi
	movzwl	60(%r14), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L18519
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L18523
	testb	$32, 17(%rbx)
	jne	.L18524
	jmp	.L18523
.L33070:
	movq	integer_types+40(%rip), %rsi
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%rsi), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L18518
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L18517
.L18518:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L18517:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31955
	.p2align 6,,7
.L18514:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L18513
.L33069:
	movq	32(%r12), %rsi
	movq	8(%r12), %rdi
	cmpq	%rdi, 8(%rsi)
	jne	.L18509
.L18512:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L33074
.L31048:
	movq	32(%r12), %rsi
	jmp	.L18512
.L33074:
	cmpb	$115, %cl
	jne	.L18509
	movq	32(%rsi), %r9
	movq	8(%r12), %r10
	cmpq	%r10, 8(%r9)
	movq	%r9, %rsi
	je	.L18512
	jmp	.L18509
.L33068:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	jne	.L18500
	cmpb	$51, 48(%r12)
	je	.L18500
	cmpq	$0, current_function_decl(%rip)
	je	.L18506
	movzbl	17(%r12), %ebx
	andb	$24, %bl
	cmpb	$16, %bl
	je	.L33075
.L18506:
	movq	%r12, %rsi
.L18507:
	movq	%rsi, %r12
	movq	8(%rsi), %rbx
.L31444:
	movzbl	16(%r12), %ecx
	jmp	.L18500
.L33075:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L18506
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L18506
	testb	$2, 17(%rax)
	je	.L18506
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L18507
	jmp	.L18506
.L33067:
	movq	104(%r12), %r12
	jmp	.L31444
	.p2align 6,,7
.L18443:
	movzbl	16(%r12), %ecx
	xorl	%r14d, %r14d
	movl	%r13d, %edi
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L31044
	cmpb	$115, %cl
	je	.L33076
.L18445:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L18451
	cmpb	$49, %al
	je	.L18451
	cmpb	$50, %al
	je	.L18451
	cmpb	$101, %al
	je	.L18451
.L18450:
	cmpl	$23, %edi
	je	.L33077
	cmpl	$18, %edi
	jne	.L18526
	movzbl	%cl, %r9d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r9), %eax
	movq	8(%rbx), %r13
	cmpb	$114, %al
	je	.L18456
	cmpb	$100, %al
	je	.L18456
.L18455:
	movzbl	17(%rbx), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %esi
	shrb	$3, %r10b
	shrb	$4, %sil
	andl	$1, %r10d
	andl	%esi, %r9d
	xorl	%esi, %esi
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rbx), %r10d
	movl	%r10d, %edi
	shrb	$5, %dil
	andl	$1, %edi
	sall	$2, %edi
	orl	%edi, %r9d
	movzbl	16(%rbx), %edi
	cmpb	$20, %dil
	je	.L33078
.L18459:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L18458
	testl	%edx, %edx
	jne	.L18458
	testl	%r11d, %r11d
	je	.L18457
.L18458:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%ebx, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L33079
.L18460:
	leal	0(,%rcx,8), %r8d
	movq	%r13, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L18457:
	cmpb	$41, %cl
	je	.L33080
	cmpb	$47, %cl
	je	.L33081
	xorl	%ebx, %ebx
	testl	%r14d, %r14d
	je	.L33082
.L18494:
	movl	flag_isoc99(%rip), %r14d
	testl	%r14d, %r14d
	jne	.L18495
	testl	%ebx, %ebx
	je	.L18526
.L18495:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L33083
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L31956
.L33083:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L31446
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %ecx
	andb	$1, %cl
	addb	%cl, %cl
	andb	$-4, %r12b
	orb	%cl, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L31445
.L33082:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L18494
.L33081:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L18464
	cmpl	$18, %r14d
	je	.L18464
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L33084
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L18467
	cmpb	$34, %dl
	je	.L33085
.L18467:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L31046
	cmpb	$115, %dl
	je	.L33086
.L18476:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L18481
	cmpb	$49, %al
	je	.L18481
	cmpb	$50, %al
	je	.L18481
	cmpb	$101, %al
	je	.L18481
.L18480:
	cmpl	$10, %r14d
	je	.L33087
	cmpb	$39, %dl
	je	.L33088
.L18486:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L18489
	testb	$32, 17(%r13)
	je	.L18490
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L18491
	movq	integer_types+40(%rip), %r10
	movzwl	60(%r13), %edi
	movzwl	60(%r10), %r13d
	andl	$511, %edi
	andl	$511, %r13d
	cmpl	%r13d, %edi
	je	.L18491
.L18490:
	movq	integer_types+40(%rip), %rdi
.L31443:
	movq	%rbx, %rsi
	call	convert
.L18465:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31454
.L18491:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31443
.L18489:
	movl	flag_traditional(%rip), %r9d
	testl	%r9d, %r9d
	je	.L18492
	movl	flag_allow_single_precision(%rip), %r8d
	testl	%r8d, %r8d
	jne	.L18492
	movq	global_trees+192(%rip), %rsi
	cmpq	%rsi, 128(%r13)
	je	.L33089
.L18492:
	cmpl	$5, %r14d
	je	.L33090
	movq	%rbx, %rax
	jmp	.L18465
.L33090:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L18465
.L33089:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31443
.L33088:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L18486
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L18486
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L18490
	testb	$32, 17(%r13)
	jne	.L18491
	jmp	.L18490
.L33087:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L18485
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L18484
.L18485:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L18484:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31443
.L18481:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L18480
.L33086:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L18476
.L18479:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L33091
.L31046:
	movq	32(%rbx), %rsi
	jmp	.L18479
.L33091:
	cmpb	$115, %dl
	jne	.L18476
	movq	32(%rsi), %r8
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%r8)
	movq	%r8, %rsi
	je	.L18479
	jmp	.L18476
.L33085:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L18471
	cmpb	$51, 48(%rbx)
	je	.L18471
	cmpq	$0, current_function_decl(%rip)
	je	.L18473
	movzbl	17(%rbx), %edi
	andb	$24, %dil
	cmpb	$16, %dil
	je	.L33092
.L18473:
	movq	%rbx, %rsi
.L18474:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L18471:
	movq	%rax, %r13
	jmp	.L18467
.L33092:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L18473
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L18473
	testb	$2, 17(%rax)
	je	.L18473
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L18474
	jmp	.L18473
.L33084:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L18467
.L18464:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L18465
.L33080:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L31956
.L33079:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L18460
.L33078:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L18459
.L18456:
	movzbl	17(%r12), %r8d
	movl	$1, %r11d
	movl	%r8d, %edx
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	%r8d, %r11d
	andl	$1, %edx
	jmp	.L18455
.L33077:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31454
	.p2align 6,,7
.L18451:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L18450
.L33076:
	movq	32(%r12), %rsi
	cmpq	%rbx, 8(%rsi)
	jne	.L18445
.L18449:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r14d
	cmpb	$116, %cl
	jne	.L33093
.L31044:
	movq	32(%r12), %rsi
	jmp	.L18449
.L33093:
	cmpb	$115, %cl
	jne	.L18445
	movq	32(%rsi), %rsi
	movq	8(%r12), %r10
	cmpq	%r10, 8(%rsi)
	je	.L18449
	jmp	.L18445
.L33066:
	movq	-192(%rbp), %rsi
	cmpb	$18, 16(%rsi)
	jne	.L18441
	movq	8(%rsi), %r14
	cmpb	$6, 16(%r14)
	jne	.L18441
	movq	global_trees(%rip), %r8
	jmp	.L18439
	.p2align 6,,7
.L18438:
	movq	-712(%rbp), %r8
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%r8), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L18666
	movq	-712(%rbp), %rsi
	movq	(%rsi), %rax
	testq	%rax, %rax
	jne	.L31475
	movq	-712(%rbp), %r14
	movq	32(%r14), %rax
	movq	%rax, -744(%rbp)
	jmp	.L18435
	.p2align 6,,7
.L18666:
	movq	-712(%rbp), %r11
	movq	8(%r11), %rax
	testq	%rax, %rax
	jne	.L31475
	movq	-712(%rbp), %rsi
	movq	16(%rsi), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L18673
	cmpq	%rsi, 8(%rax)
	je	.L18676
.L18673:
	testq	%rax, %rax
	movq	%rax, -712(%rbp)
	je	.L18435
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L18434
	movq	-712(%rbp), %rdx
	movq	32(%rdx), %rcx
	movq	%rcx, -744(%rbp)
	jmp	.L18435
	.p2align 6,,7
.L18676:
	movq	16(%rdx), %rax
	movq	%rdx, -712(%rbp)
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L18673
	movq	-712(%rbp), %rdi
	cmpq	%rdi, 8(%rax)
	je	.L18676
	jmp	.L18673
.L32980:
	movq	constructor_unfilled_fields(%rip), %rax
	testq	%rax, %rax
	je	.L18396
.L31355:
	movq	40(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L33094
.L18401:
	movq	(%rax), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	jne	.L31355
	jmp	.L18396
.L33094:
	call	integer_zerop
	testl	%eax, %eax
	je	.L33095
	movq	constructor_unfilled_fields(%rip), %rax
	jmp	.L18401
.L33095:
	movq	constructor_unfilled_fields(%rip), %rax
	testq	%rax, %rax
	je	.L18396
	movl	constructor_designated(%rip), %edi
	testl	%edi, %edi
	jne	.L18396
	movq	72(%rax), %rax
	movl	$.LC159, %r12d
	testq	%rax, %rax
	je	.L18404
	movq	32(%rax), %r12
.L18404:
	movq	spelling(%rip), %rcx
	movq	spelling_base(%rip), %rdi
	movl	spelling_size(%rip), %eax
	movq	%rcx, %r14
	subq	%rdi, %r14
	movq	%r14, %rbx
	shrq	$4, %rbx
	cmpl	%eax, %ebx
	jl	.L18405
	addl	$10, %eax
	testq	%rdi, %rdi
	movl	%eax, spelling_size(%rip)
	jne	.L18406
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L31442:
	movslq	%ebx,%rcx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rcx
	addq	spelling_base(%rip), %rcx
	movq	%rcx, spelling(%rip)
.L18405:
	movq	%r12, 8(%rcx)
	movl	$2, (%rcx)
	xorl	%eax, %eax
	addq	$16, %rcx
	movl	$.LC42, %edi
	movl	$.LC175, %esi
	movq	%rcx, spelling(%rip)
	xorl	%r12d, %r12d
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r10
	cmpq	%r10, %r8
	movq	%r8, %rbx
	movq	%r10, %r13
	jae	.L29798
.L18415:
	cmpl	$3, (%rbx)
	je	.L33096
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L18411:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L18415
.L29798:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L29800
.L18429:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33097
	cmpl	$2, %eax
	je	.L33098
.L18423:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r13d
	leaq	1(%rdx), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L18419
.L18428:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L18428
.L18419:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L18429
.L29800:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L33099
.L18432:
	movslq	constructor_depth(%rip),%r12
	salq	$4, %r12
	addq	spelling_base(%rip), %r12
	movq	%r12, spelling(%rip)
	jmp	.L18396
.L33099:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L18432
.L33098:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L18423
.L33097:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L18419
.L33096:
	addl	$25, %r12d
	jmp	.L18411
.L18406:
	movslq	%eax,%rsi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L31442
.L32979:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	je	.L18339
	cmpq	$0, 112(%rax)
	jne	.L18339
	movq	constructor_unfilled_index(%rip), %rdi
	call	integer_zerop
	testl	%eax, %eax
	jne	.L31441
	movq	constructor_type(%rip), %rdi
	cmpq	$0, 32(%rdi)
	jne	.L28037
	cmpl	$2, constructor_depth(%rip)
	jg	.L33100
	movl	pedantic(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L33101
.L18368:
	movq	constructor_fields(%rip), %r8
	cmpq	$0, (%r8)
	je	.L18339
.L31441:
	movq	$0, constructor_type(%rip)
	jmp	.L18339
.L33101:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC174, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L29793
.L18376:
	cmpl	$3, (%rbx)
	je	.L33102
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L18372:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L18376
.L29793:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L29795
.L18390:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33103
	cmpl	$2, %eax
	je	.L33104
.L18384:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r13d
	leaq	1(%rdx), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L18380
.L18389:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L18389
.L18380:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L18390
.L29795:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L18368
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L18368
.L33104:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L18384
.L33103:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L18380
.L33102:
	addl	$25, %r12d
	jmp	.L18372
.L33100:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC173, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r14
	xorl	%r12d, %r12d
	cmpq	%r14, %r8
	movq	%r8, %rbx
	movq	%r14, %r13
	jae	.L29788
.L18350:
	cmpl	$3, (%rbx)
	je	.L33105
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L18346:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L18350
.L29788:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L29790
.L18364:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33106
	cmpl	$2, %eax
	je	.L33107
.L18358:
	movq	8(%r12), %rsi
	movzbl	(%rsi), %r15d
	leaq	1(%rsi), %rcx
	testb	%r15b, %r15b
	movb	%r15b, (%rbx)
	je	.L18354
.L18363:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L18363
.L18354:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L18364
.L29790:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L18368
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L18368
.L33107:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L18358
.L33106:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L18354
.L33105:
	addl	$25, %r12d
	jmp	.L18346
	.p2align 6,,7
.L32978:
	movq	constructor_index(%rip), %rsi
	movq	%rax, %rdi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L17665
	movq	constructor_stack(%rip), %r8
	movq	constructor_type(%rip), %rdi
	movq	%r8, -1296(%rbp)
	jmp	.L18332
.L32193:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC163, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdx
	xorl	%r12d, %r12d
	cmpq	%rdx, %r8
	movq	%r8, %rbx
	movq	%rdx, %r13
	jae	.L29704
.L17645:
	cmpl	$3, (%rbx)
	je	.L33108
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L17641:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L17645
.L29704:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L29706
.L17659:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33109
	cmpl	$2, %eax
	je	.L33110
.L17653:
	movq	8(%r12), %r9
	movzbl	(%r9), %r8d
	leaq	1(%r9), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L17649
.L17658:
	movzbl	(%rcx), %r15d
	incq	%rbx
	incq	%rcx
	testb	%r15b, %r15b
	movb	%r15b, (%rbx)
	jne	.L17658
.L17649:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L17659
.L29706:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L31924
	movq	constructor_stack(%rip), %rdi
	movq	%rdi, -1296(%rbp)
	jmp	.L15218
.L31924:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	movq	constructor_stack(%rip), %r12
	movq	%r12, -1296(%rbp)
	jmp	.L15218
.L33110:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L17653
.L33109:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L17649
.L33108:
	addl	$25, %r12d
	jmp	.L17641
.L32192:
	movq	8(%rax), %r14
	cmpb	$6, 16(%r14)
	jne	.L17611
	movq	constructor_unfilled_index(%rip), %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L17611
	movq	constructor_stack(%rip), %r9
	cmpq	$0, 88(%r9)
	movq	%r9, -1296(%rbp)
	jne	.L33112
.L17612:
	movq	-760(%rbp), %rdx
.L31925:
	movq	-1296(%rbp), %rcx
	movq	%rdx, 88(%rcx)
	jmp	.L15218
.L33112:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC162, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r15
	xorl	%r12d, %r12d
	cmpq	%r15, %r8
	movq	%r8, %rbx
	movq	%r15, %r13
	jae	.L29699
.L17619:
	cmpl	$3, (%rbx)
	je	.L33113
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L17615:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L17619
.L29699:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L29701
.L17633:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33114
	cmpl	$2, %eax
	je	.L33115
.L17627:
	movq	8(%r12), %rsi
	movzbl	(%rsi), %r13d
	leaq	1(%rsi), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L17623
.L17632:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L17632
.L17623:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L17633
.L29701:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L33116
	movq	constructor_stack(%rip), %r11
	movq	%r11, -1296(%rbp)
	jmp	.L17612
.L33116:
	xorl	%eax, %eax
	movl	$.LC142, %edi
	movq	%r14, %rsi
	call	error
	movq	constructor_stack(%rip), %rax
	movq	%rax, -1296(%rbp)
	jmp	.L17612
.L33115:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L17627
.L33114:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L17623
.L33113:
	addl	$25, %r12d
	jmp	.L17615
	.p2align 6,,7
.L17608:
	movq	$0, -760(%rbp)
	jmp	.L17609
.L32191:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC176, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r9
	xorl	%r12d, %r12d
	cmpq	%r9, %r8
	movq	%r8, %rbx
	movq	%r9, %r13
	jae	.L29689
.L17556:
	cmpl	$3, (%rbx)
	je	.L33117
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L17552:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L17556
.L29689:
	movslq	%r12d,%r15
	movq	%r8, %r12
	addq	$16, %r15
	andq	$-16, %r15
	subq	%r15, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L29691
.L17570:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33118
	cmpl	$2, %eax
	je	.L33119
.L17564:
	movq	8(%r12), %rdi
	movzbl	(%rdi), %r13d
	leaq	1(%rdi), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L17560
.L17569:
	movzbl	(%rcx), %esi
	incq	%rbx
	incq	%rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	jne	.L17569
.L17560:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L17570
.L29691:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L17549
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L17549
.L33119:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L17564
.L33118:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L17560
.L33117:
	addl	$25, %r12d
	jmp	.L17552
.L17548:
	cmpq	$0, (%rax)
	jne	.L33120
.L17575:
	movq	32(%rax), %rax
.L31402:
	movq	%rax, -648(%rbp)
	jmp	.L17544
.L33120:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC177, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r11
	xorl	%r12d, %r12d
	cmpq	%r11, %r8
	movq	%r8, %rbx
	movq	%r11, %r13
	jae	.L29694
.L17582:
	cmpl	$3, (%rbx)
	je	.L33121
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L17578:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L17582
.L29694:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L29696
.L17596:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33122
	cmpl	$2, %eax
	je	.L33123
.L17590:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r10d
	leaq	1(%rdx), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L17586
.L17595:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L17595
.L17586:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L17596
.L29696:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L33124
.L17599:
	movq	constructor_elements(%rip), %rax
	jmp	.L17575
.L33124:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L17599
.L33123:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L17590
.L33122:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L17586
.L33121:
	addl	$25, %r12d
	jmp	.L17578
	.p2align 6,,7
.L17547:
	movl	constructor_erroneous(%rip), %r12d
	testl	%r12d, %r12d
	je	.L17602
	movq	global_trees(%rip), %rax
	movq	%rax, -648(%rbp)
	jmp	.L17544
.L17602:
	movq	constructor_elements(%rip), %rdi
	call	nreverse
	xorl	%edx, %edx
	movq	constructor_type(%rip), %rsi
	movq	%rax, %rcx
	movl	$46, %edi
	xorl	%eax, %eax
	call	build
	movl	constructor_constant(%rip), %r14d
	movq	%rax, -648(%rbp)
	testl	%r14d, %r14d
	je	.L17544
	orb	$2, 17(%rax)
	movl	constructor_constant(%rip), %r9d
	testl	%r9d, %r9d
	je	.L17544
	movl	constructor_simple(%rip), %r15d
	testl	%r15d, %r15d
	je	.L17544
	movq	-648(%rbp), %r13
	orb	$4, 18(%r13)
	jmp	.L17544
	.p2align 6,,7
.L32189:
	xorl	%edi, %edi
	call	output_pending_init_elements
	jmp	.L17027
.L32188:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L17513
.L32187:
	movq	constructor_unfilled_fields(%rip), %r13
	movq	(%r13), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L17513
	testb	$2, 53(%rax)
	je	.L17513
	cmpq	$0, 72(%rax)
	jne	.L17513
.L17519:
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L17513
	testb	$2, 53(%rax)
	je	.L17513
	cmpq	$0, 72(%rax)
	jne	.L17513
	jmp	.L17519
.L32049:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L17513
.L32186:
	movq	%r15, %rdi
	call	copy_node
	movq	%rax, -632(%rbp)
	jmp	.L17511
.L32185:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L17443
	movq	32(%rax), %rdx
	testb	$1, 17(%rdx)
	jne	.L33125
.L17486:
	movq	$0, constructor_elements(%rip)
	jmp	.L17443
.L33125:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, -584(%rbp)
	jae	.L29682
.L17493:
	cmpl	$3, (%rbx)
	je	.L33126
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L17489:
	addq	$16, %rbx
	cmpq	-584(%rbp), %rbx
	jb	.L17493
.L29682:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	-584(%rbp), %r8
	movq	%rsp, -144(%rbp)
	movq	%rsp, %rbx
	jae	.L29684
.L17507:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33127
	cmpl	$2, %eax
	je	.L33128
.L17501:
	movq	8(%r12), %r8
	movzbl	(%r8), %r10d
	leaq	1(%r8), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L17497
.L17506:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L17506
.L17497:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L17507
.L29684:
	movb	$0, (%rbx)
	movq	-144(%rbp), %rsi
	cmpb	$0, (%rsi)
	je	.L17486
	movl	$.LC142, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L17486
.L33128:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L17501
.L33127:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L17497
.L33126:
	addl	$25, %r12d
	jmp	.L17489
.L32184:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L17446
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, %r15
	je	.L17444
	testq	%rax, %rax
	jne	.L17447
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L17454
.L29676:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L33129
.L17474:
	cmpb	$18, 16(%rdi)
	je	.L33130
.L17480:
	movl	$0, constructor_incremental(%rip)
.L17446:
	movq	%r15, %rdi
	movq	%r13, %rsi
.L31399:
	call	add_pending_init
	jmp	.L17027
.L33130:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L33131
	movq	global_trees+136(%rip), %rax
.L31396:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L17480
.L33131:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31396
.L33129:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L17480
	testb	$2, 53(%rax)
	je	.L17480
	cmpq	$0, 72(%rax)
	jne	.L17480
.L17460:
	movq	constructor_unfilled_fields(%rip), %rsi
	movq	(%rsi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L17480
	testb	$2, 53(%rax)
	je	.L17480
	cmpq	$0, 72(%rax)
	jne	.L17480
	jmp	.L17460
.L17454:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L17454
	movq	constructor_type(%rip), %rdi
	jmp	.L29676
.L17447:
	movq	%r15, %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r12
	call	bit_position
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L17446
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L17467
	cmpb	$18, %al
	jne	.L17446
.L17467:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L17473
.L29679:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L17474
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L17480
	testb	$2, 53(%rax)
	je	.L17480
	cmpq	$0, 72(%rax)
	jne	.L17480
.L17479:
	movq	constructor_unfilled_fields(%rip), %r11
	movq	(%r11), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L17480
	testb	$2, 53(%rax)
	je	.L17480
	cmpq	$0, 72(%rax)
	jne	.L17480
	jmp	.L17479
.L17473:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L17473
	movq	constructor_type(%rip), %rdi
	jmp	.L29679
	.p2align 6,,7
.L32183:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L17446
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31015
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L17446
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L17446
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L17426
	cmpb	$18, %al
	jne	.L17446
.L17426:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L17432
.L29673:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L17474
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L17480
	testb	$2, 53(%rax)
	je	.L17480
	cmpq	$0, 72(%rax)
	jne	.L17480
.L17438:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L17480
	testb	$2, 53(%rax)
	je	.L17480
	cmpq	$0, 72(%rax)
	jne	.L17480
	jmp	.L17438
.L17432:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L17432
	movq	constructor_type(%rip), %rdi
	jmp	.L29673
	.p2align 6,,7
.L31015:
	movq	constructor_type(%rip), %rdi
	jmp	.L17423
.L31400:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L17027
.L32182:
	call	integer_zerop
	testl	%eax, %eax
	je	.L17419
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L17027
	cmpq	$0, (%r15)
	jne	.L17027
	jmp	.L17419
.L32181:
	movq	8(%rbx), %rsi
	movq	%rbx, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L17417
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L17417
.L32180:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L29668
.L17399:
	cmpl	$3, (%rbx)
	je	.L33132
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L17395:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L17399
.L29668:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, -136(%rbp)
	movq	%rsp, %rbx
	jae	.L29670
.L17413:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33133
	cmpl	$2, %eax
	je	.L33134
.L17407:
	movq	8(%r12), %r8
	movzbl	(%r8), %r10d
	leaq	1(%r8), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L17403
	.p2align 4,,7
.L17412:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L17412
.L17403:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L17413
.L29670:
	movb	$0, (%rbx)
	movq	-136(%rbp), %rbx
	cmpb	$0, (%rbx)
	jne	.L33135
.L17416:
	movq	global_trees(%rip), %rbx
	jmp	.L17417
.L33135:
	movl	$.LC142, %edi
	movq	%rbx, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L17416
.L33134:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L17407
.L33133:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L17403
.L33132:
	addl	$25, %r12d
	jmp	.L17395
.L17388:
	movq	8(%rbx), %rsi
	movq	%rbx, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L17391
	movq	constructor_type(%rip), %rcx
	movzbl	16(%rcx), %r13d
	subb	$20, %r13b
	cmpb	$1, %r13b
	ja	.L17387
	testb	$2, 53(%r15)
	je	.L17387
	cmpb	$25, 16(%rbx)
	je	.L17387
.L17391:
	movl	$0, constructor_simple(%rip)
	jmp	.L17387
.L32179:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L17387
.L32178:
	movl	require_constant_value(%rip), %r12d
	testl	%r12d, %r12d
	je	.L17385
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L17385
	xorl	%esi, %esi
	testl	%esi, %esi
	je	.L17385
	movq	32(%rbx), %rdx
	movq	32(%rdx), %r11
	movq	104(%r11), %rbx
	jmp	.L17385
.L32177:
	movzbl	16(%rbx), %ecx
	cmpb	$29, %cl
	je	.L33136
.L17288:
	movq	128(%rdx), %rdi
	movq	-120(%rbp), %rdx
	movq	128(%rdx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L31008
	movq	8(%rbx), %r13
.L17287:
	movzbl	16(%r13), %r12d
	cmpl	$23, %r12d
	je	.L17290
	cmpl	$18, %r12d
	je	.L17290
	movzbl	16(%rbx), %ecx
	cmpb	$32, %cl
	je	.L33137
	movl	optimize(%rip), %esi
	testl	%esi, %esi
	je	.L17353
	cmpb	$34, %cl
	je	.L33138
.L17353:
	cmpb	$116, %cl
	movq	%rbx, %rdx
	je	.L31014
	cmpb	$115, %cl
	je	.L33139
.L17362:
	movzbl	%cl, %edi 
	movzbl	tree_code_type(%rdi), %eax
	cmpb	$60, %al
	je	.L17367
	cmpb	$49, %al
	je	.L17367
	cmpb	$50, %al
	je	.L17367
	cmpb	$101, %al
	je	.L17367
.L17366:
	cmpl	$10, %r12d
	je	.L33140
	cmpb	$39, %cl
	je	.L33141
.L17375:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L17380
	testb	$32, 17(%r13)
	je	.L17381
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L17382
	movq	integer_types+40(%rip), %r10
	movzwl	60(%r13), %ecx
	movzwl	60(%r10), %r13d
	andl	$511, %ecx
	andl	$511, %r13d
	cmpl	%r13d, %ecx
	je	.L17382
.L17381:
	movq	integer_types+40(%rip), %rdi
.L31947:
	movq	%rbx, %rsi
.L31948:
	call	convert
.L31392:
	movq	%rax, %r12
.L31383:
	movq	global_trees(%rip), %r8
.L17351:
	movq	%r12, %rbx
	jmp	.L31393
.L17382:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31947
.L17380:
	movl	flag_traditional(%rip), %r8d
	testl	%r8d, %r8d
	je	.L17383
	movl	flag_allow_single_precision(%rip), %r9d
	testl	%r9d, %r9d
	jne	.L17383
	movq	global_trees+192(%rip), %rdi
	cmpq	%rdi, 128(%r13)
	je	.L33142
.L17383:
	cmpl	$5, %r12d
	je	.L33143
.L17384:
	movq	%rbx, %r12
	jmp	.L31383
.L33143:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31384:
	movq	global_trees(%rip), %r8
	movq	%r8, %r12
	jmp	.L17351
.L33142:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31947
	.p2align 6,,7
.L33141:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L17375
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L17375
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	je	.L17381
	testb	$32, 17(%r13)
	jne	.L17382
	jmp	.L17381
	.p2align 6,,7
.L33140:
	movq	integer_types+40(%rip), %rsi
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r12d
	movzwl	60(%rsi), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r12d, %r12d
	jne	.L17374
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L17373
.L17374:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L17373:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31947
.L17367:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L17366
.L33139:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L17362
	.p2align 4,,7
.L17365:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %rbx
	cmpb	$116, %cl
	jne	.L33144
.L31014:
	movq	32(%rbx), %rsi
	jmp	.L17365
.L33144:
	cmpb	$115, %cl
	jne	.L17362
	movq	32(%rsi), %r9
	movq	8(%rbx), %r8
	cmpq	%r8, 8(%r9)
	movq	%r9, %rsi
	je	.L17365
	jmp	.L17362
.L33138:
	movl	pedantic(%rip), %r11d
	testl	%r11d, %r11d
	jne	.L17353
	cmpb	$51, 48(%rbx)
	je	.L17353
	cmpq	$0, current_function_decl(%rip)
	je	.L17359
	movzbl	17(%rbx), %ecx
	andb	$24, %cl
	cmpb	$16, %cl
	je	.L33145
.L17359:
	movq	%rbx, %rsi
.L17360:
	movq	%rsi, %rbx
	movq	8(%rsi), %r13
.L31382:
	movzbl	16(%rbx), %ecx
	jmp	.L17353
.L33145:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L17359
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L17359
	testb	$2, 17(%rax)
	je	.L17359
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L17360
	jmp	.L17359
	.p2align 6,,7
.L33137:
	movq	104(%rbx), %rbx
	jmp	.L31382
.L17290:
	movzbl	16(%rbx), %ecx
	movl	%r12d, %edx
	movq	%rbx, %rdi
	xorl	%r12d, %r12d
	cmpb	$116, %cl
	je	.L31010
	cmpb	$115, %cl
	je	.L33146
.L17292:
	movzbl	%cl, %r10d 
	movzbl	tree_code_type(%r10), %eax
	cmpb	$60, %al
	je	.L17298
	cmpb	$49, %al
	je	.L17298
	cmpb	$50, %al
	je	.L17298
	cmpb	$101, %al
	je	.L17298
.L17297:
	cmpl	$23, %edx
	je	.L33147
	cmpl	$18, %edx
	jne	.L17384
	movzbl	%cl, %edi 
	xorl	%edx, %edx
	movq	8(%r13), %r11
	movzbl	tree_code_type(%rdi), %eax
	movl	$0, -620(%rbp)
	cmpb	$114, %al
	je	.L17303
	cmpb	$100, %al
	je	.L17303
.L17302:
	movzbl	17(%r13), %r9d
	movl	$1, %esi
	movl	%r9d, %r10d
	movl	%r9d, %r8d
	shrb	$3, %r10b
	shrb	$4, %r8b
	andl	$1, %r10d
	andl	%r8d, %esi
	xorl	%r8d, %r8d
	addl	%r10d, %r10d
	orl	%r10d, %esi
	movzbl	62(%r13), %r10d
	movl	%r10d, %edi
	shrb	$5, %dil
	andl	$1, %edi
	sall	$2, %edi
	orl	%edi, %esi
	movzbl	16(%r13), %edi
	cmpb	$20, %dil
	je	.L33148
.L17306:
	leal	0(,%r8,8), %r13d
	orl	%r13d, %esi
	jne	.L17305
	movl	-620(%rbp), %eax
	testl	%eax, %eax
	jne	.L17305
	testl	%edx, %edx
	je	.L17304
.L17305:
	movl	%r9d, %r13d
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r9b
	shrb	$4, %r13b
	movl	%r10d, %ecx
	movl	%r9d, %r8d
	andl	%r13d, %esi
	andl	$1, %ecx
	andl	$1, %r8d
	sall	$2, %ecx
	addl	%r8d, %r8d
	orl	%r8d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L33149
.L17308:
	leal	0(,%rcx,8), %edi
	leal	(%rdx,%rdx), %r9d
	orl	%edi, %esi
	movq	%r11, %rdi
	orl	-620(%rbp), %esi
	orl	%r9d, %esi
	call	c_build_qualified_type
	movzbl	16(%rbx), %ecx
	movq	%rax, %r11
.L17304:
	cmpb	$41, %cl
	je	.L33150
	cmpb	$47, %cl
	je	.L33151
	xorl	%r13d, %r13d
	testl	%r12d, %r12d
	je	.L33152
.L17347:
	movl	flag_isoc99(%rip), %r9d
	testl	%r9d, %r9d
	jne	.L17348
	testl	%r13d, %r13d
	je	.L17384
.L17348:
	movq	%r11, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %r12
	je	.L33153
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%r12, %rdi
	movq	%rax, %rsi
	jmp	.L31948
.L33153:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, %r12
	call	mark_addressable
	testl	%eax, %eax
	je	.L31384
	movq	%rbx, %rdi
	call	staticp
	movzbl	17(%r12), %ebx
	movl	%eax, %edi
	andb	$1, %dil
	addb	%dil, %dil
	andb	$-4, %bl
	orb	%dil, %bl
	movb	%bl, 17(%r12)
	jmp	.L31383
.L33152:
	movq	%rbx, %rdi
	movq	%r11, -1312(%rbp)
	call	lvalue_p
	movq	-1312(%rbp), %r11
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r13d
	jmp	.L17347
.L33151:
	movq	40(%rbx), %r12
	movq	8(%r12), %r13
	movzbl	16(%r13), %edx
	movq	%r13, %rax
	cmpl	$23, %edx
	movl	%edx, -124(%rbp)
	je	.L17312
	cmpl	$18, %edx
	je	.L17312
	movzbl	16(%r12), %edx
	cmpb	$32, %dl
	je	.L33154
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L17315
	cmpb	$34, %dl
	je	.L33155
.L17315:
	cmpb	$116, %dl
	movq	%r12, %rcx
	je	.L31012
	cmpb	$115, %dl
	je	.L33156
.L17324:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L17329
	cmpb	$49, %al
	je	.L17329
	cmpb	$50, %al
	je	.L17329
	cmpb	$101, %al
	je	.L17329
.L17328:
	cmpl	$10, -124(%rbp)
	je	.L33157
	cmpb	$39, %dl
	je	.L33158
.L17337:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L17342
	testb	$32, 17(%r13)
	je	.L17343
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L17344
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r13), %r8d
	movzwl	60(%rdx), %r13d
	andl	$511, %r8d
	andl	$511, %r13d
	cmpl	%r13d, %r8d
	je	.L17344
.L17343:
	movq	integer_types+40(%rip), %rdi
.L31381:
	movq	%r12, %rsi
	call	convert
.L17313:
	movq	8(%rax), %rsi
	movq	32(%rbx), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31392
.L17344:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31381
	.p2align 6,,7
.L17342:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L17345
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L17345
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%r13)
	je	.L33159
.L17345:
	cmpl	$5, -124(%rbp)
	je	.L33160
	movq	%r12, %rax
	jmp	.L17313
.L33160:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L17313
.L33159:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31381
	.p2align 6,,7
.L33158:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L17337
	movq	integer_types+40(%rip), %r10
	movq	40(%rdx), %rdi
	movzwl	60(%r10), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L17337
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L17343
	testb	$32, 17(%r13)
	jne	.L17344
	jmp	.L17343
	.p2align 6,,7
.L33157:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r11d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r11d, %r11d
	jne	.L17336
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L17335
.L17336:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L17335:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31381
.L17329:
	movl	24(%rcx), %eax
	movl	%eax, 24(%r12)
	jmp	.L17328
.L33156:
	movq	32(%r12), %rsi
	movq	8(%r12), %r8
	cmpq	%r8, 8(%rsi)
	jne	.L17324
.L17327:
	movzbl	16(%rsi), %edx
	movq	%rsi, %r12
	cmpb	$116, %dl
	jne	.L33161
.L31012:
	movq	32(%r12), %rsi
	jmp	.L17327
.L33161:
	cmpb	$115, %dl
	jne	.L17324
	movq	32(%rsi), %rdi
	movq	8(%r12), %r9
	cmpq	%r9, 8(%rdi)
	movq	%rdi, %rsi
	je	.L17327
	jmp	.L17324
.L33155:
	movl	pedantic(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L17319
	cmpb	$51, 48(%r12)
	je	.L17319
	cmpq	$0, current_function_decl(%rip)
	je	.L17321
	movzbl	17(%r12), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L33162
.L17321:
	movq	%r12, %rsi
.L17322:
	movq	%rsi, %r12
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L17319:
	movq	%rax, %r13
	jmp	.L17315
.L33162:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L17321
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L17321
	testb	$2, 17(%rax)
	je	.L17321
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L17322
	jmp	.L17321
	.p2align 6,,7
.L33154:
	movq	104(%r12), %r12
	movzbl	16(%r12), %edx
	jmp	.L17315
.L17312:
	movq	%r12, %rdi
	call	default_function_array_conversion
	jmp	.L17313
.L33150:
	movq	72(%r11), %rdi
	movq	32(%rbx), %rsi
	jmp	.L31948
.L33149:
	testq	%r11, %r11
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L17308
.L33148:
	testq	%r11, %r11
	movl	$1, %eax
	cmovne	%eax, %r8d
	jmp	.L17306
.L17303:
	movzbl	17(%rbx), %r8d
	movl	%r8d, %esi
	shrb	$3, %r8b
	shrb	$4, %sil
	movl	%r8d, %edx
	movl	%esi, %eax
	andl	$1, %edx
	andl	$1, %eax
	movl	%eax, -620(%rbp)
	jmp	.L17302
.L33147:
	movl	$121, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31392
.L17298:
	movl	24(%rdi), %eax
	movl	%eax, 24(%rbx)
	jmp	.L17297
.L33146:
	movq	32(%rbx), %rsi
	cmpq	%r13, 8(%rsi)
	jne	.L17292
	.p2align 4,,7
.L17296:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %rbx
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r12d
	cmpb	$116, %cl
	jne	.L33163
.L31010:
	movq	32(%rbx), %rsi
	jmp	.L17296
.L33163:
	cmpb	$115, %cl
	jne	.L17292
	movq	32(%rsi), %rsi
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%rsi)
	je	.L17296
	jmp	.L17292
.L33136:
	cmpb	$18, 16(%rsi)
	jne	.L17288
	movq	8(%rsi), %r13
	cmpb	$6, 16(%r13)
	jne	.L17288
	movq	global_trees(%rip), %r8
	jmp	.L17286
	.p2align 6,,7
.L17285:
	movq	%r12, %rdi
	movq	%rbx, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L17524
.L31949:
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L33164
.L31397:
	movq	%rax, %r14
	jmp	.L17027
.L33164:
	movq	32(%r14), %rsi
	movq	%rsi, -640(%rbp)
	jmp	.L17028
	.p2align 6,,7
.L17524:
	movq	8(%r14), %rax
	testq	%rax, %rax
	jne	.L31397
	movq	16(%r14), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L17531
	cmpq	%r14, 8(%rax)
	je	.L17534
.L17531:
	testq	%rax, %rax
	movq	%rax, %r14
	je	.L17028
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r12, %rdi
	movq	%rax, %rsi
.L31950:
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L17027
	movq	32(%r14), %rax
	movq	%rax, -640(%rbp)
	jmp	.L17028
	.p2align 6,,7
.L17534:
	movq	16(%rdx), %rax
	movq	%rdx, %r14
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L17531
	cmpq	%r14, 8(%rax)
	je	.L17534
	jmp	.L17531
	.p2align 6,,7
.L32176:
	movq	32(%r14), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L17031
	movq	constructor_type(%rip), %rdx
	movq	40(%r14), %rbx
	movq	constructor_unfilled_index(%rip), %r15
	movq	8(%rdx), %rcx
	movq	%rcx, -88(%rbp)
	movq	8(%rbx), %r13
	movzbl	16(%r13), %eax
	movq	%r13, %rdx
	cmpb	$23, %al
	je	.L17033
	cmpb	$18, %al
	je	.L33165
.L30998:
	movzbl	16(%rbx), %ecx
.L31377:
	movq	global_trees(%rip), %r8
.L17032:
	cmpb	$-86, %cl
	je	.L33166
.L17131:
	cmpq	%r8, %rbx
	je	.L33167
	testb	$2, 17(%rbx)
	jne	.L17134
	movl	$0, constructor_constant(%rip)
.L17133:
	movl	require_constant_value(%rip), %r11d
	testl	%r11d, %r11d
	je	.L17138
	testb	$2, 17(%rbx)
	je	.L33168
.L17138:
	movl	require_constant_elements(%rip), %ecx
	testl	%ecx, %ecx
	jne	.L33169
.L17163:
	testq	%r15, %r15
	je	.L17165
	movq	8(%r15), %rax
	cmpq	global_trees(%rip), %rax
	je	.L17027
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L33170
.L17165:
	movq	-88(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%rbx, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -616(%rbp)
	je	.L31400
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L33171
.L17169:
	cmpb	$20, 16(%rdi)
	je	.L33172
.L17190:
	cmpb	$21, 16(%rdi)
	je	.L33173
.L17189:
	testq	%r15, %r15
	je	.L17257
	cmpb	$25, 16(%r15)
	je	.L33174
.L17257:
	movq	constructor_elements(%rip), %rdx
	movq	-616(%rbp), %rsi
	movq	%r15, %rdi
	call	tree_cons
	movq	constructor_type(%rip), %r15
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r15), %eax
	movq	%r15, %rdx
	cmpb	$18, %al
	je	.L32049
	cmpb	$20, %al
	jne	.L17514
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L17513
	testb	$2, 53(%rax)
	je	.L17513
	cmpq	$0, 72(%rax)
	jne	.L17513
.L17265:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L17513
	testb	$2, 53(%rax)
	je	.L17513
	cmpq	$0, 72(%rax)
	jne	.L17513
	jmp	.L17265
.L33174:
	movq	%r15, %rdi
	call	copy_node
	movq	%rax, %r15
	jmp	.L17257
.L33173:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L17189
	movq	32(%rax), %rbx
	testb	$1, 17(%rbx)
	jne	.L33175
.L17232:
	movq	$0, constructor_elements(%rip)
	jmp	.L17189
.L33175:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdx
	xorl	%r12d, %r12d
	cmpq	%rdx, %r8
	movq	%r8, %rbx
	movq	%rdx, %r13
	jae	.L29658
.L17239:
	cmpl	$3, (%rbx)
	je	.L33176
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L17235:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L17239
.L29658:
	movslq	%r12d,%r9
	movq	%r8, %r12
	addq	$16, %r9
	andq	$-16, %r9
	subq	%r9, %rsp
	cmpq	%r13, %r8
	movq	%rsp, -112(%rbp)
	movq	%rsp, %rbx
	jae	.L29660
.L17253:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33177
	cmpl	$2, %eax
	je	.L33178
.L17247:
	movq	8(%r12), %rsi
	movzbl	(%rsi), %r10d
	leaq	1(%rsi), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L17243
.L17252:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L17252
.L17243:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L17253
.L29660:
	movb	$0, (%rbx)
	movq	-112(%rbp), %rsi
	cmpb	$0, (%rsi)
	je	.L17232
	movl	$.LC142, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L17232
.L33178:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L17247
.L33177:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L17243
.L33176:
	addl	$25, %r12d
	jmp	.L17235
.L33172:
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L17192
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, %r15
	je	.L17190
	testq	%rax, %rax
	jne	.L17193
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L17200
.L29652:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L33179
.L17220:
	cmpb	$18, 16(%rdi)
	je	.L33180
.L17226:
	movl	$0, constructor_incremental(%rip)
.L17192:
	movq	-616(%rbp), %rsi
	movq	%r15, %rdi
	jmp	.L31399
.L33180:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L33181
	movq	global_trees+136(%rip), %rax
.L31380:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L17226
.L33181:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31380
	.p2align 6,,7
.L33179:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L17226
	testb	$2, 53(%rax)
	je	.L17226
	cmpq	$0, 72(%rax)
	jne	.L17226
.L17206:
	movq	constructor_unfilled_fields(%rip), %r11
	movq	(%r11), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L17226
	testb	$2, 53(%rax)
	je	.L17226
	cmpq	$0, 72(%rax)
	jne	.L17226
	jmp	.L17206
.L17200:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L17200
	movq	constructor_type(%rip), %rdi
	jmp	.L29652
.L17193:
	movq	%r15, %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L17192
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L17213
	cmpb	$18, %al
	jne	.L17192
.L17213:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L17219
.L29655:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L17220
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L17226
	testb	$2, 53(%rax)
	je	.L17226
	cmpq	$0, 72(%rax)
	jne	.L17226
.L17225:
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L17226
	testb	$2, 53(%rax)
	je	.L17226
	cmpq	$0, 72(%rax)
	jne	.L17226
	jmp	.L17225
	.p2align 6,,7
.L17219:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L17219
	movq	constructor_type(%rip), %rdi
	jmp	.L29655
	.p2align 6,,7
.L33171:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L17192
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31005
	movl	constructor_incremental(%rip), %esi
	testl	%esi, %esi
	je	.L17192
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L17192
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L17172
	cmpb	$18, %al
	jne	.L17192
.L17172:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L17178
.L29649:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L17220
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L17226
	testb	$2, 53(%rax)
	je	.L17226
	cmpq	$0, 72(%rax)
	jne	.L17226
.L17184:
	movq	constructor_unfilled_fields(%rip), %r8
	movq	(%r8), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L17226
	testb	$2, 53(%rax)
	je	.L17226
	cmpq	$0, 72(%rax)
	jne	.L17226
	jmp	.L17184
	.p2align 6,,7
.L17178:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L17178
	movq	constructor_type(%rip), %rdi
	jmp	.L29649
	.p2align 6,,7
.L31005:
	movq	constructor_type(%rip), %rdi
	jmp	.L17169
.L33170:
	call	integer_zerop
	testl	%eax, %eax
	je	.L17165
	movq	constructor_type(%rip), %r10
	cmpb	$18, 16(%r10)
	je	.L17027
	cmpq	$0, (%r15)
	jne	.L17027
	jmp	.L17165
.L33169:
	movq	8(%rbx), %rsi
	movq	%rbx, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L17163
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L17163
.L33168:
	movl	$.LC42, %edi
	xorl	%eax, %eax
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdi
	xorl	%r12d, %r12d
	cmpq	%rdi, %r8
	movq	%r8, %rbx
	movq	%rdi, %r13
	jae	.L29644
.L17145:
	cmpl	$3, (%rbx)
	je	.L33182
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L17141:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L17145
.L29644:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, -104(%rbp)
	movq	%rsp, %rbx
	jae	.L29646
.L17159:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33183
	cmpl	$2, %eax
	je	.L33184
.L17153:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r13d
	leaq	1(%rdx), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L17149
.L17158:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L17158
.L17149:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L17159
.L29646:
	movb	$0, (%rbx)
	movq	-104(%rbp), %rbx
	cmpb	$0, (%rbx)
	jne	.L33185
.L17162:
	movq	global_trees(%rip), %rbx
	jmp	.L17163
.L33185:
	movl	$.LC142, %edi
	movq	%rbx, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L17162
.L33184:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L17153
.L33183:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L17149
.L33182:
	addl	$25, %r12d
	jmp	.L17141
.L17134:
	movq	8(%rbx), %rsi
	movq	%rbx, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L17137
	movq	constructor_type(%rip), %r12
	movzbl	16(%r12), %r8d
	subb	$20, %r8b
	cmpb	$1, %r8b
	ja	.L17133
	testb	$2, 53(%r15)
	je	.L17133
	cmpb	$25, 16(%rbx)
	je	.L17133
.L17137:
	movl	$0, constructor_simple(%rip)
	jmp	.L17133
.L33167:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L17133
.L33166:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L17131
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L17131
	xorl	%r9d, %r9d
	testl	%r9d, %r9d
	je	.L17131
	movq	32(%rbx), %rsi
	movq	32(%rsi), %r10
	movq	104(%r10), %rbx
	jmp	.L17131
.L33165:
	movzbl	16(%rbx), %ecx
	cmpb	$29, %cl
	je	.L33186
.L17034:
	movq	-88(%rbp), %r9
	movq	128(%rdx), %rdi
	movq	128(%r9), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L30998
	movq	8(%rbx), %r13
.L17033:
	movzbl	16(%r13), %r12d
	cmpl	$23, %r12d
	je	.L17036
	cmpl	$18, %r12d
	je	.L17036
	movzbl	16(%rbx), %ecx
	cmpb	$32, %cl
	je	.L33187
	movl	optimize(%rip), %eax
	testl	%eax, %eax
	je	.L17099
	cmpb	$34, %cl
	je	.L33188
.L17099:
	cmpb	$116, %cl
	movq	%rbx, %rdx
	je	.L31004
	cmpb	$115, %cl
	je	.L33189
.L17108:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L17113
	cmpb	$49, %al
	je	.L17113
	cmpb	$50, %al
	je	.L17113
	cmpb	$101, %al
	je	.L17113
.L17112:
	cmpl	$10, %r12d
	je	.L33190
	cmpb	$39, %cl
	je	.L33191
.L17121:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L17126
	testb	$32, 17(%r13)
	je	.L17127
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L17128
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r13), %ecx
	movzwl	60(%rdx), %r13d
	andl	$511, %ecx
	andl	$511, %r13d
	cmpl	%r13d, %ecx
	je	.L17128
.L17127:
	movq	integer_types+40(%rip), %rdi
.L31945:
	movq	%rbx, %rsi
.L31946:
	call	convert
.L31376:
	movq	%rax, %r12
.L31367:
	movq	global_trees(%rip), %r8
.L17097:
	movzbl	16(%r12), %ecx
	movq	%r12, %rbx
	jmp	.L17032
.L17128:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31945
.L17126:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L17129
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L17129
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%r13)
	je	.L33192
.L17129:
	cmpl	$5, %r12d
	je	.L33193
.L17130:
	movq	%rbx, %r12
	jmp	.L31367
.L33193:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31368:
	movq	global_trees(%rip), %r8
	movq	%r8, %r12
	jmp	.L17097
.L33192:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31945
	.p2align 6,,7
.L33191:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L17121
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%rdi), %esi
	movq	40(%rdx), %rdi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L17121
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L17127
	testb	$32, 17(%r13)
	jne	.L17128
	jmp	.L17127
	.p2align 6,,7
.L33190:
	movq	integer_types+40(%rip), %r11
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r12d
	movzwl	60(%r11), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r12d, %r12d
	jne	.L17120
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L17119
.L17120:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L17119:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31945
.L17113:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L17112
.L33189:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%rsi)
	jne	.L17108
	.p2align 4,,7
.L17111:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %rbx
	cmpb	$116, %cl
	jne	.L33194
.L31004:
	movq	32(%rbx), %rsi
	jmp	.L17111
.L33194:
	cmpb	$115, %cl
	jne	.L17108
	movq	32(%rsi), %r10
	movq	8(%rbx), %r8
	cmpq	%r8, 8(%r10)
	movq	%r10, %rsi
	je	.L17111
	jmp	.L17108
.L33188:
	movl	pedantic(%rip), %edi
	testl	%edi, %edi
	jne	.L17099
	cmpb	$51, 48(%rbx)
	je	.L17099
	cmpq	$0, current_function_decl(%rip)
	je	.L17105
	movzbl	17(%rbx), %ecx
	andb	$24, %cl
	cmpb	$16, %cl
	je	.L33195
.L17105:
	movq	%rbx, %rsi
.L17106:
	movq	%rsi, %rbx
	movq	8(%rsi), %r13
.L31366:
	movzbl	16(%rbx), %ecx
	jmp	.L17099
.L33195:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L17105
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L17105
	testb	$2, 17(%rax)
	je	.L17105
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L17106
	jmp	.L17105
	.p2align 6,,7
.L33187:
	movq	104(%rbx), %rbx
	jmp	.L31366
.L17036:
	movzbl	16(%rbx), %ecx
	movl	%r12d, %edx
	movq	%rbx, %rdi
	xorl	%r12d, %r12d
	cmpb	$116, %cl
	je	.L31000
	cmpb	$115, %cl
	je	.L33196
.L17038:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L17044
	cmpb	$49, %al
	je	.L17044
	cmpb	$50, %al
	je	.L17044
	cmpb	$101, %al
	je	.L17044
.L17043:
	cmpl	$23, %edx
	je	.L33197
	cmpl	$18, %edx
	jne	.L17130
	movzbl	%cl, %r8d 
	xorl	%edx, %edx
	movq	8(%r13), %r11
	movzbl	tree_code_type(%r8), %eax
	movl	$0, -604(%rbp)
	cmpb	$114, %al
	je	.L17049
	cmpb	$100, %al
	je	.L17049
.L17048:
	movzbl	17(%r13), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %edi
	shrb	$3, %r10b
	shrb	$4, %dil
	andl	$1, %r10d
	andl	%edi, %r9d
	movzbl	16(%r13), %edi
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%r13), %r10d
	movl	%r10d, %esi
	shrb	$5, %sil
	andl	$1, %esi
	sall	$2, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	cmpb	$20, %dil
	je	.L33198
.L17052:
	leal	0(,%rsi,8), %r13d
	orl	%r13d, %r9d
	jne	.L17051
	movl	-604(%rbp), %eax
	testl	%eax, %eax
	jne	.L17051
	testl	%edx, %edx
	je	.L17050
.L17051:
	movl	%r8d, %r13d
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r13b
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%r13d, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L33199
.L17054:
	leal	0(,%rcx,8), %r10d
	leal	(%rdx,%rdx), %r8d
	movq	%r11, %rdi
	orl	%r10d, %esi
	orl	-604(%rbp), %esi
	orl	%r8d, %esi
	call	c_build_qualified_type
	movzbl	16(%rbx), %ecx
	movq	%rax, %r11
.L17050:
	cmpb	$41, %cl
	je	.L33200
	cmpb	$47, %cl
	je	.L33201
	xorl	%r13d, %r13d
	testl	%r12d, %r12d
	je	.L33202
.L17093:
	movl	flag_isoc99(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L17094
	testl	%r13d, %r13d
	je	.L17130
.L17094:
	movq	%r11, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %r12
	je	.L33203
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%r12, %rdi
	movq	%rax, %rsi
	jmp	.L31946
.L33203:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, %r12
	call	mark_addressable
	testl	%eax, %eax
	je	.L31368
	movq	%rbx, %rdi
	call	staticp
	movzbl	17(%r12), %ebx
	movl	%eax, %r11d
	andb	$1, %r11b
	addb	%r11b, %r11b
	andb	$-4, %bl
	orb	%r11b, %bl
	movb	%bl, 17(%r12)
	jmp	.L31367
	.p2align 6,,7
.L33202:
	movq	%rbx, %rdi
	movq	%r11, -1312(%rbp)
	call	lvalue_p
	movq	-1312(%rbp), %r11
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r13d
	jmp	.L17093
.L33201:
	movq	40(%rbx), %r12
	movq	8(%r12), %r13
	movzbl	16(%r13), %edx
	movq	%r13, %rax
	cmpl	$23, %edx
	movl	%edx, -92(%rbp)
	je	.L17058
	cmpl	$18, %edx
	je	.L17058
	movzbl	16(%r12), %edx
	cmpb	$32, %dl
	je	.L33204
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L17061
	cmpb	$34, %dl
	je	.L33205
.L17061:
	cmpb	$116, %dl
	movq	%r12, %rcx
	je	.L31002
	cmpb	$115, %dl
	je	.L33206
.L17070:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L17075
	cmpb	$49, %al
	je	.L17075
	cmpb	$50, %al
	je	.L17075
	cmpb	$101, %al
	je	.L17075
.L17074:
	cmpl	$10, -92(%rbp)
	je	.L33207
	cmpb	$39, %dl
	je	.L33208
.L17083:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L17088
	testb	$32, 17(%r13)
	je	.L17089
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L17090
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r13), %r9d
	movzwl	60(%rdx), %r13d
	andl	$511, %r9d
	andl	$511, %r13d
	cmpl	%r13d, %r9d
	je	.L17090
.L17089:
	movq	integer_types+40(%rip), %rdi
.L31365:
	movq	%r12, %rsi
	call	convert
.L17059:
	movq	8(%rax), %rsi
	movq	32(%rbx), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31376
.L17090:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31365
.L17088:
	movl	flag_traditional(%rip), %r8d
	testl	%r8d, %r8d
	je	.L17091
	movl	flag_allow_single_precision(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L17091
	movq	global_trees+192(%rip), %rsi
	cmpq	%rsi, 128(%r13)
	je	.L33209
.L17091:
	cmpl	$5, -92(%rbp)
	je	.L33210
	movq	%r12, %rax
	jmp	.L17059
.L33210:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L17059
.L33209:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31365
.L33208:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L17083
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%rdi), %esi
	movq	40(%rdx), %rdi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L17083
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L17089
	testb	$32, 17(%r13)
	jne	.L17090
	jmp	.L17089
.L33207:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r11d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r11d, %r11d
	jne	.L17082
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L17081
.L17082:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L17081:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31365
	.p2align 6,,7
.L17075:
	movl	24(%rcx), %eax
	movl	%eax, 24(%r12)
	jmp	.L17074
.L33206:
	movq	32(%r12), %rsi
	movq	8(%r12), %r9
	cmpq	%r9, 8(%rsi)
	jne	.L17070
.L17073:
	movzbl	16(%rsi), %edx
	movq	%rsi, %r12
	cmpb	$116, %dl
	jne	.L33211
.L31002:
	movq	32(%r12), %rsi
	jmp	.L17073
.L33211:
	cmpb	$115, %dl
	jne	.L17070
	movq	32(%rsi), %r10
	movq	8(%r12), %r8
	cmpq	%r8, 8(%r10)
	movq	%r10, %rsi
	je	.L17073
	jmp	.L17070
.L33205:
	movl	pedantic(%rip), %edi
	testl	%edi, %edi
	jne	.L17065
	cmpb	$51, 48(%r12)
	je	.L17065
	cmpq	$0, current_function_decl(%rip)
	je	.L17067
	movzbl	17(%r12), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L33212
.L17067:
	movq	%r12, %rsi
.L17068:
	movq	%rsi, %r12
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L17065:
	movq	%rax, %r13
	jmp	.L17061
.L33212:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L17067
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L17067
	testb	$2, 17(%rax)
	je	.L17067
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L17068
	jmp	.L17067
.L33204:
	movq	104(%r12), %r12
	movzbl	16(%r12), %edx
	jmp	.L17061
	.p2align 6,,7
.L17058:
	movq	%r12, %rdi
	call	default_function_array_conversion
	jmp	.L17059
.L33200:
	movq	72(%r11), %rdi
	movq	32(%rbx), %rsi
	jmp	.L31946
.L33199:
	testq	%r11, %r11
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L17054
.L33198:
	testq	%r11, %r11
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L17052
.L17049:
	movzbl	17(%rbx), %edi
	movl	%edi, %r9d
	shrb	$3, %dil
	shrb	$4, %r9b
	movl	%edi, %edx
	movl	%r9d, %eax
	andl	$1, %edx
	andl	$1, %eax
	movl	%eax, -604(%rbp)
	jmp	.L17048
.L33197:
	movl	$121, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31376
.L17044:
	movl	24(%rdi), %eax
	movl	%eax, 24(%rbx)
	jmp	.L17043
.L33196:
	movq	32(%rbx), %rsi
	cmpq	%r13, 8(%rsi)
	jne	.L17038
	.p2align 4,,7
.L17042:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %rbx
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r12d
	cmpb	$116, %cl
	jne	.L33213
.L31000:
	movq	32(%rbx), %rsi
	jmp	.L17042
.L33213:
	cmpb	$115, %cl
	jne	.L17038
	movq	32(%rsi), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	je	.L17042
	jmp	.L17038
.L33186:
	movq	-88(%rbp), %rsi
	cmpb	$18, 16(%rsi)
	jne	.L17034
	movq	8(%rsi), %rdi
	cmpb	$6, 16(%rdi)
	jne	.L17034
	jmp	.L31377
	.p2align 6,,7
.L17031:
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%r14), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L31949
	movq	8(%r14), %rax
	testq	%rax, %rax
	jne	.L31397
	movq	16(%r14), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L17277
	cmpq	%r14, 8(%rax)
	je	.L17280
.L17277:
	testq	%rax, %rax
	movq	%rax, %r14
	je	.L17028
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	jmp	.L31950
.L17280:
	movq	16(%rdx), %rax
	movq	%rdx, %r14
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L17277
	cmpq	%r14, 8(%rax)
	je	.L17280
	jmp	.L17277
.L32175:
	movq	constructor_unfilled_fields(%rip), %rax
	testq	%rax, %rax
	je	.L16989
.L31353:
	movq	40(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L33214
.L16994:
	movq	(%rax), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	jne	.L31353
	jmp	.L16989
.L33214:
	call	integer_zerop
	testl	%eax, %eax
	je	.L33215
	movq	constructor_unfilled_fields(%rip), %rax
	jmp	.L16994
.L33215:
	movq	constructor_unfilled_fields(%rip), %rax
	testq	%rax, %rax
	je	.L16989
	movl	constructor_designated(%rip), %edx
	testl	%edx, %edx
	jne	.L16989
	movq	72(%rax), %rax
	movl	$.LC159, %r12d
	testq	%rax, %rax
	je	.L16997
	movq	32(%rax), %r12
.L16997:
	movq	spelling(%rip), %rcx
	movq	spelling_base(%rip), %rdi
	movl	spelling_size(%rip), %eax
	movq	%rcx, %rsi
	subq	%rdi, %rsi
	movq	%rsi, %rbx
	shrq	$4, %rbx
	cmpl	%eax, %ebx
	jl	.L16998
	addl	$10, %eax
	testq	%rdi, %rdi
	movl	%eax, spelling_size(%rip)
	jne	.L16999
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L31364:
	movslq	%ebx,%rcx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rcx
	addq	spelling_base(%rip), %rcx
	movq	%rcx, spelling(%rip)
.L16998:
	movq	%r12, 8(%rcx)
	movl	$2, (%rcx)
	xorl	%eax, %eax
	addq	$16, %rcx
	movl	$.LC42, %edi
	movl	$.LC175, %esi
	movq	%rcx, spelling(%rip)
	xorl	%r12d, %r12d
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r9
	cmpq	%r9, %r8
	movq	%r8, %rbx
	movq	%r9, %r13
	jae	.L29635
.L17008:
	cmpl	$3, (%rbx)
	je	.L33216
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L17004:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L17008
.L29635:
	movslq	%r12d,%r10
	movq	%r8, %r12
	addq	$16, %r10
	andq	$-16, %r10
	subq	%r10, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L29637
.L17022:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33217
	cmpl	$2, %eax
	je	.L33218
.L17016:
	movq	8(%r12), %r11
	movzbl	(%r11), %r8d
	leaq	1(%r11), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L17012
.L17021:
	movzbl	(%rcx), %r13d
	incq	%rbx
	incq	%rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	jne	.L17021
.L17012:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L17022
.L29637:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L33219
.L17025:
	movslq	constructor_depth(%rip),%r12
	salq	$4, %r12
	addq	spelling_base(%rip), %r12
	movq	%r12, spelling(%rip)
	jmp	.L16989
.L33219:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L17025
.L33218:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L17016
.L33217:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L17012
.L33216:
	addl	$25, %r12d
	jmp	.L17004
.L16999:
	movslq	%eax,%rsi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L31364
	.p2align 6,,7
.L15221:
	cmpb	$18, 16(%rdx)
	jne	.L15219
	movq	constructor_max_index(%rip), %rdi
	movq	constructor_index(%rip), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L15219
.L22336:
.L22669:
.L22987:
.L23296:
.L23605:
	movq	$0, -960(%rbp)
	movq	constructor_stack(%rip), %r13
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	movq	%r13, -272(%rbp)
	je	.L23672
	cmpq	$0, constructor_fields(%rip)
	je	.L23672
	cmpb	$18, 16(%rax)
	je	.L33220
.L23672:
	movl	extra_warnings(%rip), %r13d
	testl	%r13d, %r13d
	je	.L23729
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L23729
	cmpb	$20, 16(%rax)
	je	.L33221
.L23729:
	movl	$1, constructor_incremental(%rip)
	movq	constructor_pending_elts(%rip), %r14
.L23766:
	testq	%r14, %r14
	movq	$0, -952(%rbp)
	je	.L23768
	.p2align 4,,7
.L24276:
	movq	constructor_type(%rip), %r10
	movzbl	16(%r10), %eax
	cmpb	$18, %al
	je	.L33222
	subb	$20, %al
	cmpb	$1, %al
	ja	.L23767
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L23768
	call	bit_position
	movq	32(%r14), %rdi
	movq	%rax, %r12
	call	bit_position
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L24025
	movq	32(%r14), %r11
	movq	40(%r14), %rbx
	movq	8(%r11), %rsi
	movq	%r11, %r15
	movq	%r11, constructor_unfilled_fields(%rip)
	movq	%r11, -944(%rbp)
	movq	%rsi, -312(%rbp)
	movq	8(%rbx), %r13
	movzbl	16(%r13), %eax
	movq	%r13, %rdx
	cmpb	$23, %al
	je	.L24027
	cmpb	$18, %al
	je	.L33223
.L31171:
	movq	global_trees(%rip), %r8
.L31675:
	movzbl	16(%rbx), %ecx
.L24026:
	cmpb	$-86, %cl
	je	.L33224
.L24125:
	cmpq	%r8, %rbx
	je	.L33225
	testb	$2, 17(%rbx)
	jne	.L24128
	movl	$0, constructor_constant(%rip)
.L24127:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L24132
	testb	$2, 17(%rbx)
	je	.L33226
.L24132:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L33227
.L24157:
	testq	%r15, %r15
	je	.L24159
	movq	8(%r15), %rax
	cmpq	global_trees(%rip), %rax
	je	.L23767
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L33228
.L24159:
	movq	-312(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%rbx, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, %r13
	je	.L31681
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L33229
.L24163:
	cmpb	$20, 16(%rdi)
	je	.L33230
.L24184:
	cmpb	$21, 16(%rdi)
	je	.L33231
.L24183:
	testq	%r15, %r15
	je	.L24251
	cmpb	$25, 16(%r15)
	je	.L33232
.L24251:
	movq	constructor_elements(%rip), %rdx
	movq	-944(%rbp), %rdi
	movq	%r13, %rsi
	call	tree_cons
	movq	constructor_type(%rip), %r15
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r15), %eax
	movq	%r15, %rdx
	cmpb	$18, %al
	je	.L32075
	cmpb	$20, %al
	je	.L33233
.L24254:
	cmpb	$21, 16(%rdx)
	je	.L33234
.L24253:
	xorl	%r8d, %r8d
	testl	%r8d, %r8d
	jne	.L33235
	.p2align 4,,7
.L23767:
	testq	%r14, %r14
	jne	.L24276
.L23768:
	movl	$1, %r12d
	testl	%r12d, %r12d
	je	.L24279
	cmpq	$0, -952(%rbp)
	je	.L24279
	movq	constructor_type(%rip), %rcx
	movzbl	16(%rcx), %edx
	leal	-20(%rdx), %r11d
	cmpb	$1, %r11b
	jbe	.L33236
	cmpb	$18, %dl
	jne	.L23766
	movq	-952(%rbp), %rax
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L23766
.L33236:
	movq	-952(%rbp), %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	jmp	.L23766
.L24279:
	movq	-272(%rbp), %r14
	movq	88(%r14), %rax
	testq	%rax, %rax
	jne	.L31683
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L24284
	movzbl	16(%rax), %edx
	leal	-20(%rdx), %r9d
	cmpb	$1, %r9b
	jbe	.L24287
	cmpb	$18, %dl
	je	.L24287
	cmpb	$9, %dl
	je	.L24287
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	jne	.L24288
	movl	constructor_erroneous(%rip), %edi
	testl	%edi, %edi
	je	.L33237
.L24289:
	movq	global_trees(%rip), %rbx
	movq	%rbx, -960(%rbp)
.L24284:
	movq	-272(%rbp), %rbx
	movq	8(%rbx), %r8
	movsbl	104(%rbx),%edx
	movq	16(%rbx), %rax
	movq	24(%rbx), %r13
	movsbl	105(%rbx),%r9d
	movq	32(%rbx), %r15
	movq	%r8, constructor_type(%rip)
	movsbl	107(%rbx),%ecx
	movq	40(%rbx), %r10
	movq	%rbx, %r8
	movsbl	109(%rbx),%r11d
	movq	48(%rbx), %r14
	movq	56(%rbx), %r12
	movq	64(%rbx), %rdi
	movl	%edx, constructor_constant(%rip)
	movsbl	110(%rbx),%ebx
	cmpb	$0, 106(%r8)
	movq	%rax, constructor_fields(%rip)
	movq	72(%r8), %rsi
	movl	84(%r8), %edx
	movq	%r13, constructor_index(%rip)
	movq	%r15, constructor_max_index(%rip)
	movq	%r10, constructor_unfilled_index(%rip)
	movq	%r14, constructor_unfilled_fields(%rip)
	movq	%r12, constructor_bit_index(%rip)
	movq	%rdi, constructor_elements(%rip)
	movl	%r9d, constructor_simple(%rip)
	movl	%ecx, constructor_erroneous(%rip)
	movl	%r11d, constructor_incremental(%rip)
	movl	%ebx, constructor_designated(%rip)
	movq	%rsi, constructor_pending_elts(%rip)
	movl	%edx, constructor_depth(%rip)
	jne	.L24346
	movq	96(%r8), %rsi
	movq	%rsi, constructor_range_stack(%rip)
.L24346:
	movslq	%edx,%rdi
	movq	-272(%rbp), %r9
	salq	$4, %rdi
	addq	spelling_base(%rip), %rdi
	movq	(%r9), %rcx
	movq	%rdi, spelling(%rip)
	movq	-272(%rbp), %rdi
	movq	%rcx, constructor_stack(%rip)
	call	free
	movq	-960(%rbp), %r11
	testq	%r11, %r11
	movq	%r11, -1072(%rbp)
	jne	.L24349
	cmpq	$0, constructor_stack(%rip)
	jne	.L24348
	movq	global_trees(%rip), %rdx
	movq	%rdx, -1072(%rbp)
.L24349:
	movq	-1072(%rbp), %rdx
	movl	$0, -964(%rbp)
	testq	%rdx, %rdx
	movq	%rdx, -344(%rbp)
	je	.L24350
	cmpb	$29, 16(%rdx)
	movl	$1, %eax
	cmovne	-964(%rbp), %eax
	movl	%eax, -964(%rbp)
.L24350:
	movl	-964(%rbp), %r12d
	movl	$0, designator_depth(%rip)
	movl	$0, designator_errorneous(%rip)
	testl	%r12d, %r12d
	je	.L24351
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L24351
	cmpb	$18, 16(%rax)
	je	.L33238
.L24351:
	movq	constructor_stack(%rip), %r9
	cmpq	$0, 88(%r9)
	movq	%r9, -1296(%rbp)
	jne	.L33239
	movq	constructor_type(%rip), %rdi
	testq	%rdi, %rdi
	je	.L15218
	movq	-1296(%rbp), %r14
	cmpb	$0, 106(%r14)
	je	.L24405
.L25736:
	movzbl	16(%rdi), %ebx
	subb	$20, %bl
	cmpb	$1, %bl
	ja	.L24407
	cmpq	$0, constructor_fields(%rip)
	jne	.L24407
	movq	$0, -1016(%rbp)
	movq	-1296(%rbp), %rsi
	movq	%rsi, -352(%rbp)
	movl	extra_warnings(%rip), %r8d
	testl	%r8d, %r8d
	je	.L24471
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L24471
	cmpb	$20, 16(%rax)
	je	.L33240
.L24471:
	movq	constructor_pending_elts(%rip), %r14
	movl	$1, constructor_incremental(%rip)
	movq	%r14, -976(%rbp)
.L24508:
	cmpq	$0, -976(%rbp)
	movq	$0, -1008(%rbp)
	je	.L24510
.L24996:
	movq	constructor_type(%rip), %rbx
	movzbl	16(%rbx), %eax
	cmpb	$18, %al
	je	.L33241
	subb	$20, %al
	cmpb	$1, %al
	ja	.L24509
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L24510
	call	bit_position
	movq	-976(%rbp), %r13
	movq	%rax, %r12
	movq	32(%r13), %rdi
	call	bit_position
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L24756
	movq	-976(%rbp), %rsi
	movq	32(%rsi), %rbx
	movq	40(%rsi), %r12
	movq	8(%rbx), %rdi
	movq	%rbx, %r15
	movq	%rbx, constructor_unfilled_fields(%rip)
	movq	%rbx, -1000(%rbp)
	movq	%rdi, -368(%rbp)
	movq	8(%r12), %rbx
	movzbl	16(%rbx), %eax
	movq	%rbx, %rdx
	cmpb	$23, %al
	je	.L24758
	cmpb	$18, %al
	je	.L33242
.L31194:
	movq	global_trees(%rip), %r8
.L31713:
	movzbl	16(%r12), %ecx
.L24757:
	cmpb	$-86, %cl
	je	.L33243
.L24845:
	cmpq	%r8, %r12
	je	.L33244
	testb	$2, 17(%r12)
	jne	.L24848
	movl	$0, constructor_constant(%rip)
.L24847:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L24852
	testb	$2, 17(%r12)
	je	.L33245
.L24852:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L33246
.L24877:
	testq	%r15, %r15
	je	.L24879
	movq	8(%r15), %rax
	cmpq	global_trees(%rip), %rax
	je	.L24509
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L33247
.L24879:
	movq	-368(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%r12, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -992(%rbp)
	je	.L31720
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L33248
.L24883:
	cmpb	$20, 16(%rdi)
	je	.L33249
.L24904:
	cmpb	$21, 16(%rdi)
	je	.L33250
.L24903:
	testq	%r15, %r15
	je	.L24971
	cmpb	$25, 16(%r15)
	je	.L33251
.L24971:
	movq	constructor_elements(%rip), %rdx
	movq	-1000(%rbp), %rdi
	movq	-992(%rbp), %rsi
	call	tree_cons
	movq	constructor_type(%rip), %r15
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r15), %eax
	movq	%r15, %rdx
	cmpb	$18, %al
	je	.L32079
	cmpb	$20, %al
	je	.L33252
.L24974:
	cmpb	$21, 16(%rdx)
	je	.L33253
.L24973:
	xorl	%eax, %eax
	testl	%eax, %eax
	jne	.L33254
.L24509:
	cmpq	$0, -976(%rbp)
	jne	.L24996
.L24510:
	movl	$1, %edx
	testl	%edx, %edx
	je	.L24999
	cmpq	$0, -1008(%rbp)
	je	.L24999
	movq	constructor_type(%rip), %r8
	movzbl	16(%r8), %edx
	leal	-20(%rdx), %esi
	cmpb	$1, %sil
	jbe	.L33255
	cmpb	$18, %dl
	jne	.L24508
	movq	-1008(%rbp), %rdi
	movq	%rdi, constructor_unfilled_index(%rip)
	jmp	.L24508
.L33255:
	movq	-1008(%rbp), %r11
	movq	%r11, constructor_unfilled_fields(%rip)
	jmp	.L24508
.L24999:
	movq	-1296(%rbp), %r15
	movq	88(%r15), %rax
	testq	%rax, %rax
	jne	.L31721
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L25004
	movzbl	16(%rax), %edx
	leal	-20(%rdx), %r10d
	cmpb	$1, %r10b
	jbe	.L25007
	cmpb	$18, %dl
	je	.L25007
	cmpb	$9, %dl
	je	.L25007
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	jne	.L25008
	movl	constructor_erroneous(%rip), %ebx
	testl	%ebx, %ebx
	je	.L33256
.L25009:
	movq	global_trees(%rip), %r12
	movq	%r12, -1016(%rbp)
.L25004:
	movq	-1296(%rbp), %r9
	movq	8(%r9), %rdx
	movsbl	104(%r9),%r11d
	movsbl	105(%r9),%r8d
	movsbl	107(%r9),%ecx
	movsbl	109(%r9),%esi
	movsbl	110(%r9),%r12d
	movq	%rdx, constructor_type(%rip)
	cmpb	$0, 106(%r9)
	movq	16(%r9), %rax
	movq	72(%r9), %rdx
	movq	24(%r9), %r13
	movl	%r11d, constructor_constant(%rip)
	movq	32(%r9), %r14
	movq	40(%r9), %rbx
	movl	%r8d, constructor_simple(%rip)
	movq	48(%r9), %r10
	movq	56(%r9), %r15
	movq	%rax, constructor_fields(%rip)
	movq	64(%r9), %rdi
	movq	%rdx, constructor_pending_elts(%rip)
	movq	%r13, constructor_index(%rip)
	movl	84(%r9), %edx
	movq	%r14, constructor_max_index(%rip)
	movq	%rbx, constructor_unfilled_index(%rip)
	movq	%r10, constructor_unfilled_fields(%rip)
	movq	%r15, constructor_bit_index(%rip)
	movl	%ecx, constructor_erroneous(%rip)
	movq	%rdi, constructor_elements(%rip)
	movl	%esi, constructor_incremental(%rip)
	movl	%r12d, constructor_designated(%rip)
	movl	%edx, constructor_depth(%rip)
	jne	.L25066
	movq	96(%r9), %r9
	movq	%r9, constructor_range_stack(%rip)
.L25066:
	movq	-1296(%rbp), %rsi
	movslq	%edx,%rcx
	movq	-352(%rbp), %rdi
	salq	$4, %rcx
	addq	spelling_base(%rip), %rcx
	movq	(%rsi), %r12
	movq	%rcx, spelling(%rip)
	movq	%r12, constructor_stack(%rip)
	call	free
	movq	-1016(%rbp), %rdi
.L32140:
	testq	%rdi, %rdi
	jne	.L25734
	cmpq	$0, constructor_stack(%rip)
	jne	.L25733
	movq	global_trees(%rip), %rdi
.L25734:
	call	process_init_element
	movq	constructor_stack(%rip), %rcx
	movq	%rcx, -1296(%rbp)
	cmpb	$0, 106(%rcx)
	je	.L24405
	movq	constructor_type(%rip), %rdi
	jmp	.L25736
.L24405:
	cmpq	$0, constructor_range_stack(%rip)
	je	.L28700
	movq	-1072(%rbp), %rdi
	cmpb	$-86, 16(%rdi)
	je	.L33257
.L25739:
	movq	-1072(%rbp), %rdi
	call	save_expr
	movq	%rax, -1072(%rbp)
.L28700:
	movq	constructor_type(%rip), %r12
	cmpb	$20, 16(%r12)
	movq	%r12, %r14
	je	.L33258
	movzbl	16(%r12), %edx
	cmpb	$21, %dl
	je	.L33259
	cmpb	$18, %dl
	jne	.L26421
	movq	8(%r12), %r15
	cmpq	$0, -1072(%rbp)
	movq	128(%r15), %r14
	movzbl	16(%r14), %edx
	je	.L26423
	cmpl	$18, %edx
	je	.L33260
.L26422:
	cmpq	$0, -1072(%rbp)
	je	.L26423
	movl	constructor_no_implicit(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L26423
	movq	-1072(%rbp), %rax
	cmpq	global_trees(%rip), %rax
	je	.L26423
	movq	8(%rax), %rdi
	cmpq	%r14, 128(%rdi)
	je	.L26423
	cmpl	$20, %edx
	je	.L26425
	cmpl	$18, %edx
	je	.L26425
	cmpl	$21, %edx
	jne	.L26423
.L26425:
	movl	$1, %edi
	call	push_init_level
	jmp	.L28700
.L26423:
	movq	constructor_max_index(%rip), %rdi
	testq	%rdi, %rdi
	jne	.L33261
.L26426:
	cmpq	$0, -1072(%rbp)
	jne	.L33262
.L26765:
	movq	constructor_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	cmpq	$0, -1072(%rbp)
	movq	%rax, constructor_index(%rip)
	jne	.L26098
	movq	%rax, constructor_unfilled_index(%rip)
.L26098:
	movq	constructor_range_stack(%rip), %rsi
	testq	%rsi, %rsi
	movq	%rsi, -416(%rbp)
	je	.L25741
	movq	constructor_stack(%rip), %rdx
	movl	$0, -1228(%rbp)
	movq	$0, constructor_range_stack(%rip)
	cmpq	16(%rsi), %rdx
	movq	%rdx, -1296(%rbp)
	je	.L30754
.L28022:
	movq	-1296(%rbp), %rax
	cmpb	$0, 106(%rax)
	je	.L32092
	movq	$0, -1176(%rbp)
	movq	-1296(%rbp), %r11
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	movq	%r11, -424(%rbp)
	je	.L27366
	cmpq	$0, constructor_fields(%rip)
	je	.L27366
	cmpb	$18, 16(%rax)
	je	.L33263
.L27366:
	movl	extra_warnings(%rip), %eax
	testl	%eax, %eax
	je	.L27423
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L27423
	cmpb	$20, 16(%rax)
	je	.L33264
.L27423:
	movl	$1, constructor_incremental(%rip)
	movq	constructor_pending_elts(%rip), %r15
.L27460:
	testq	%r15, %r15
	movq	$0, -1168(%rbp)
	je	.L27462
.L27948:
	movq	constructor_type(%rip), %rbx
	movzbl	16(%rbx), %eax
	cmpb	$18, %al
	je	.L33265
	subb	$20, %al
	cmpb	$1, %al
	ja	.L27461
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L27462
	call	bit_position
	movq	32(%r15), %rdi
	movq	%rax, %r12
	call	bit_position
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L27708
	movq	32(%r15), %rdi
	movq	40(%r15), %rbx
	movq	%rdi, -440(%rbp)
	movq	%rdi, constructor_unfilled_fields(%rip)
	movq	-440(%rbp), %r10
	movq	8(%rdi), %rdx
	movq	%r10, -1160(%rbp)
	movq	%rdx, -448(%rbp)
	movq	8(%rbx), %r12
	movzbl	16(%r12), %eax
	movq	%r12, %rdx
	cmpb	$23, %al
	je	.L27710
	cmpb	$18, %al
	je	.L33266
.L31292:
	movq	global_trees(%rip), %r8
.L31875:
	movzbl	16(%rbx), %ecx
.L27709:
	cmpb	$-86, %cl
	je	.L33267
.L27797:
	cmpq	%r8, %rbx
	je	.L33268
	testb	$2, 17(%rbx)
	jne	.L27800
	movl	$0, constructor_constant(%rip)
.L27799:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L27804
	testb	$2, 17(%rbx)
	je	.L33269
.L27804:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L33270
.L27829:
	cmpq	$0, -440(%rbp)
	je	.L27831
	movq	-440(%rbp), %r12
	movq	8(%r12), %rax
	cmpq	global_trees(%rip), %rax
	je	.L27461
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L33271
.L27831:
	movq	-448(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%rbx, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -1152(%rbp)
	je	.L31882
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L33272
.L27835:
	cmpb	$20, 16(%rdi)
	je	.L33273
.L27856:
	cmpb	$21, 16(%rdi)
	je	.L33274
.L27855:
	cmpq	$0, -440(%rbp)
	je	.L27923
	movq	-440(%rbp), %rbx
	cmpb	$25, 16(%rbx)
	je	.L33275
.L27923:
	movq	-1160(%rbp), %rdi
	movq	-1152(%rbp), %rsi
	movq	constructor_elements(%rip), %rdx
	call	tree_cons
	movq	constructor_type(%rip), %r12
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r12), %eax
	cmpb	$18, %al
	je	.L33276
	cmpb	$20, %al
	je	.L33277
	cmpb	$21, 16(%r12)
	je	.L33278
.L27925:
	xorl	%ecx, %ecx
	testl	%ecx, %ecx
.L32030:
	jne	.L33279
.L27461:
	testq	%r15, %r15
	jne	.L27948
.L27462:
	movl	$1, %r14d
	testl	%r14d, %r14d
	je	.L27951
	cmpq	$0, -1168(%rbp)
	je	.L27951
	movq	constructor_type(%rip), %rbx
	movzbl	16(%rbx), %edx
	leal	-20(%rdx), %r9d
	cmpb	$1, %r9b
	jbe	.L33280
	cmpb	$18, %dl
	jne	.L27460
	movq	-1168(%rbp), %rax
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L27460
.L33280:
	movq	-1168(%rbp), %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	jmp	.L27460
	.p2align 6,,7
.L27951:
	movq	-1296(%rbp), %r15
	movq	88(%r15), %rax
	testq	%rax, %rax
	jne	.L31883
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L27956
	movzbl	16(%rax), %edx
	leal	-20(%rdx), %r8d
	cmpb	$1, %r8b
	jbe	.L27959
	cmpb	$18, %dl
	je	.L27959
	cmpb	$9, %dl
	je	.L27959
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	jne	.L27960
	movl	constructor_erroneous(%rip), %r11d
	testl	%r11d, %r11d
	je	.L33281
.L27961:
	movq	global_trees(%rip), %rax
.L31883:
	movq	%rax, -1176(%rbp)
.L27956:
	movq	-1296(%rbp), %rbx
	movq	8(%rbx), %r13
	movq	64(%rbx), %rdx
	movsbl	104(%rbx),%r15d
	movsbl	105(%rbx),%ecx
	movsbl	107(%rbx),%r14d
	movsbl	109(%rbx),%r9d
	movsbl	110(%rbx),%edi
	cmpb	$0, 106(%rbx)
	movq	%r13, constructor_type(%rip)
	movq	16(%rbx), %rax
	movq	24(%rbx), %rsi
	movq	32(%rbx), %r10
	movq	40(%rbx), %r11
	movl	%r15d, constructor_constant(%rip)
	movq	48(%rbx), %r12
	movq	56(%rbx), %r8
	movl	%ecx, constructor_simple(%rip)
	movq	%rdx, constructor_elements(%rip)
	movq	72(%rbx), %r13
	movq	%rax, constructor_fields(%rip)
	movl	84(%rbx), %edx
	movq	%rsi, constructor_index(%rip)
	movq	%r10, constructor_max_index(%rip)
	movq	%r11, constructor_unfilled_index(%rip)
	movq	%r12, constructor_unfilled_fields(%rip)
	movq	%r8, constructor_bit_index(%rip)
	movl	%r14d, constructor_erroneous(%rip)
	movl	%r9d, constructor_incremental(%rip)
	movl	%edi, constructor_designated(%rip)
	movq	%r13, constructor_pending_elts(%rip)
	movl	%edx, constructor_depth(%rip)
	jne	.L28018
	movq	96(%rbx), %rdi
	movq	%rdi, constructor_range_stack(%rip)
.L28018:
	movq	-1296(%rbp), %r9
	movslq	%edx,%r14
	movq	-424(%rbp), %rdi
	salq	$4, %r14
	addq	spelling_base(%rip), %r14
	movq	(%r9), %rbx
	movq	%r14, spelling(%rip)
	movq	%rbx, constructor_stack(%rip)
	call	free
	movq	-1176(%rbp), %rdi
	testq	%rdi, %rdi
	jne	.L28021
	cmpq	$0, constructor_stack(%rip)
	jne	.L28020
	movq	global_trees(%rip), %rdi
.L28021:
	call	process_init_element
	movq	-416(%rbp), %rcx
	movq	constructor_stack(%rip), %r15
	cmpq	16(%rcx), %r15
	movq	%r15, -1296(%rbp)
	jne	.L28022
.L30754:
	movq	-416(%rbp), %rdx
	movq	%rdx, -1240(%rbp)
.L28023:
	movq	-1240(%rbp), %rax
	movq	40(%rax), %rsi
	testq	%rsi, %rsi
	je	.L28690
	movq	32(%rax), %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L33282
.L28690:
	movq	constructor_stack(%rip), %r8
	movq	%r8, -456(%rbp)
	cmpb	$0, 106(%r8)
	je	.L32091
	movq	$0, -1224(%rbp)
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L28034
	cmpq	$0, constructor_fields(%rip)
	je	.L28034
	cmpb	$18, 16(%rax)
	je	.L33283
.L28034:
	movl	extra_warnings(%rip), %ecx
	testl	%ecx, %ecx
	je	.L28091
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L28091
	cmpb	$20, 16(%rax)
	je	.L33284
.L28091:
	movq	constructor_pending_elts(%rip), %r14
	movl	$1, constructor_incremental(%rip)
	movq	%r14, -1184(%rbp)
.L28128:
	cmpq	$0, -1184(%rbp)
	movq	$0, -1216(%rbp)
	je	.L28130
.L28616:
	movq	constructor_type(%rip), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$18, %al
	je	.L33285
	subb	$20, %al
	cmpb	$1, %al
	ja	.L28129
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L28130
	call	bit_position
	movq	-1184(%rbp), %r9
	movq	%rax, %r12
	movq	32(%r9), %rdi
	call	bit_position
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L28376
	movq	-1184(%rbp), %rsi
	movq	32(%rsi), %r15
	movq	40(%rsi), %r12
	movq	8(%r15), %r10
	movq	%r15, %r14
	movq	%r15, constructor_unfilled_fields(%rip)
	movq	%r15, -1208(%rbp)
	movq	%r10, -472(%rbp)
	movq	8(%r12), %rbx
	movzbl	16(%rbx), %eax
	movq	%rbx, %rdx
	cmpb	$23, %al
	je	.L28378
	cmpb	$18, %al
	je	.L33286
.L31313:
	movq	global_trees(%rip), %r8
.L31914:
	movzbl	16(%r12), %ecx
.L28377:
	cmpb	$-86, %cl
	je	.L33287
.L28465:
	cmpq	%r8, %r12
	je	.L33288
	testb	$2, 17(%r12)
	jne	.L28468
	movl	$0, constructor_constant(%rip)
.L28467:
	movl	require_constant_value(%rip), %r13d
	testl	%r13d, %r13d
	je	.L28472
	testb	$2, 17(%r12)
	je	.L33289
.L28472:
	movl	require_constant_elements(%rip), %ecx
	testl	%ecx, %ecx
	jne	.L33290
.L28497:
	testq	%r14, %r14
	je	.L28499
	movq	8(%r14), %rax
	cmpq	global_trees(%rip), %rax
	je	.L28129
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L33291
.L28499:
	movq	-472(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%r12, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -1200(%rbp)
	je	.L31921
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L33292
.L28503:
	cmpb	$20, 16(%rdi)
	je	.L33293
.L28524:
	cmpb	$21, 16(%rdi)
	je	.L33294
.L28523:
	testq	%r14, %r14
	je	.L28591
	cmpb	$25, 16(%r14)
	je	.L33295
.L28591:
	movq	constructor_elements(%rip), %rdx
	movq	-1208(%rbp), %rdi
	movq	-1200(%rbp), %rsi
	call	tree_cons
	movq	constructor_type(%rip), %r14
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r14), %eax
	movq	%r14, %rdx
	cmpb	$18, %al
	je	.L32095
	cmpb	$20, %al
	je	.L33296
.L28594:
	cmpb	$21, 16(%rdx)
	je	.L33297
.L28593:
	xorl	%eax, %eax
	testl	%eax, %eax
	jne	.L33298
.L28129:
	cmpq	$0, -1184(%rbp)
	jne	.L28616
.L28130:
	movl	$1, %r11d
	testl	%r11d, %r11d
	je	.L28619
	cmpq	$0, -1216(%rbp)
	je	.L28619
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %edx
	leal	-20(%rdx), %r10d
	cmpb	$1, %r10b
	jbe	.L33299
	cmpb	$18, %dl
	jne	.L28128
	movq	-1216(%rbp), %r8
	movq	%r8, constructor_unfilled_index(%rip)
	jmp	.L28128
.L33299:
	movq	-1216(%rbp), %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	jmp	.L28128
.L28619:
	movq	-456(%rbp), %r14
	movq	88(%r14), %rax
	testq	%rax, %rax
	jne	.L31922
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L28624
	movzbl	16(%rax), %edx
	leal	-20(%rdx), %ecx
	cmpb	$1, %cl
	jbe	.L28627
	cmpb	$18, %dl
	je	.L28627
	cmpb	$9, %dl
	je	.L28627
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	jne	.L28628
	movl	constructor_erroneous(%rip), %ebx
	testl	%ebx, %ebx
	je	.L33300
.L28629:
	movq	global_trees(%rip), %r12
	movq	%r12, -1224(%rbp)
.L28624:
	movq	-456(%rbp), %r9
	movsbl	104(%r9),%edx
	movq	8(%r9), %r15
	movsbl	105(%r9),%edi
	movsbl	107(%r9),%r10d
	movsbl	109(%r9),%r11d
	movsbl	110(%r9),%r12d
	cmpb	$0, 106(%r9)
	movq	16(%r9), %rax
	movq	%r15, constructor_type(%rip)
	movq	24(%r9), %rsi
	movq	32(%r9), %r13
	movl	%edx, constructor_constant(%rip)
	movq	40(%r9), %rbx
	movq	48(%r9), %rcx
	movl	%edi, constructor_simple(%rip)
	movq	56(%r9), %r14
	movq	64(%r9), %r8
	movq	%rax, constructor_fields(%rip)
	movq	72(%r9), %r15
	movl	84(%r9), %edx
	movq	%rsi, constructor_index(%rip)
	movq	%r13, constructor_max_index(%rip)
	movq	%rbx, constructor_unfilled_index(%rip)
	movq	%rcx, constructor_unfilled_fields(%rip)
	movq	%r14, constructor_bit_index(%rip)
	movq	%r8, constructor_elements(%rip)
	movl	%r10d, constructor_erroneous(%rip)
	movl	%r11d, constructor_incremental(%rip)
	movl	%r12d, constructor_designated(%rip)
	movq	%r15, constructor_pending_elts(%rip)
	movl	%edx, constructor_depth(%rip)
	jne	.L28686
	movq	96(%r9), %r9
	movq	%r9, constructor_range_stack(%rip)
.L28686:
	movq	-456(%rbp), %r11
	movslq	%edx,%r10
	movq	-456(%rbp), %rdi
	salq	$4, %r10
	addq	spelling_base(%rip), %r10
	movq	(%r11), %r12
	movq	%r10, spelling(%rip)
	movq	%r12, constructor_stack(%rip)
	call	free
	movq	-1224(%rbp), %rdi
	testq	%rdi, %rdi
	jne	.L28689
	cmpq	$0, constructor_stack(%rip)
	jne	.L28688
	movq	global_trees(%rip), %rdi
.L28689:
	call	process_init_element
	movq	-1240(%rbp), %rdx
	movq	8(%rdx), %rdi
	movq	%rdi, -1240(%rbp)
	jmp	.L28023
.L28688:
	xorl	%edi, %edi
	jmp	.L28689
.L33300:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC176, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L30898
.L28636:
	cmpl	$3, (%rbx)
	je	.L33301
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L28632:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L28636
.L30898:
	movslq	%r12d,%rsi
	movq	%r8, %r12
	addq	$16, %rsi
	andq	$-16, %rsi
	subq	%rsi, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30900
.L28650:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33302
	cmpl	$2, %eax
	je	.L33303
.L28644:
	movq	8(%r12), %r9
	movzbl	(%r9), %r13d
	leaq	1(%r9), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L28640
.L28649:
	movzbl	(%rcx), %r15d
	incq	%rbx
	incq	%rcx
	testb	%r15b, %r15b
	movb	%r15b, (%rbx)
	jne	.L28649
.L28640:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L28650
.L30900:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L28629
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L28629
.L33303:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L28644
.L33302:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L28640
.L33301:
	addl	$25, %r12d
	jmp	.L28632
.L28628:
	cmpq	$0, (%rax)
	jne	.L33304
.L28655:
	movq	32(%rax), %rax
.L31922:
	movq	%rax, -1224(%rbp)
	jmp	.L28624
.L33304:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC177, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r11
	xorl	%r12d, %r12d
	cmpq	%r11, %r8
	movq	%r8, %rbx
	movq	%r11, %r13
	jae	.L30903
.L28662:
	cmpl	$3, (%rbx)
	je	.L33305
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L28658:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L28662
.L30903:
	movslq	%r12d,%r10
	movq	%r8, %r12
	addq	$16, %r10
	andq	$-16, %r10
	subq	%r10, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30905
.L28676:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33306
	cmpl	$2, %eax
	je	.L33307
.L28670:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %edi
	leaq	1(%rdx), %rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	je	.L28666
.L28675:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L28675
.L28666:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L28676
.L30905:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L33308
.L28679:
	movq	constructor_elements(%rip), %rax
	jmp	.L28655
.L33308:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L28679
.L33307:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L28670
.L33306:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L28666
.L33305:
	addl	$25, %r12d
	jmp	.L28658
.L28627:
	movl	constructor_erroneous(%rip), %r14d
	testl	%r14d, %r14d
	je	.L28682
	movq	global_trees(%rip), %rcx
	movq	%rcx, -1224(%rbp)
	jmp	.L28624
.L28682:
	movq	constructor_elements(%rip), %rdi
	call	nreverse
	xorl	%edx, %edx
	movq	constructor_type(%rip), %rsi
	movq	%rax, %rcx
	movl	$46, %edi
	xorl	%eax, %eax
	call	build
	movl	constructor_constant(%rip), %ebx
	movq	%rax, -1224(%rbp)
	testl	%ebx, %ebx
	je	.L28624
	orb	$2, 17(%rax)
	movl	constructor_constant(%rip), %eax
	testl	%eax, %eax
	je	.L28624
	movl	constructor_simple(%rip), %r13d
	testl	%r13d, %r13d
	je	.L28624
	movq	-1224(%rbp), %rsi
	orb	$4, 18(%rsi)
	jmp	.L28624
.L33298:
	xorl	%edi, %edi
	call	output_pending_init_elements
	jmp	.L28129
.L33297:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L28593
.L33296:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L28593
	testb	$2, 53(%rax)
	je	.L28593
	cmpq	$0, 72(%rax)
	jne	.L28593
.L28599:
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L28593
	testb	$2, 53(%rax)
	je	.L28593
	cmpq	$0, 72(%rax)
	jne	.L28593
	jmp	.L28599
.L32095:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L28593
.L33295:
	movq	%r14, %rdi
	call	copy_node
	movq	%rax, -1208(%rbp)
	jmp	.L28591
.L33294:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L28523
	movq	32(%rax), %r15
	testb	$1, 17(%r15)
	jne	.L33309
.L28566:
	movq	$0, constructor_elements(%rip)
	jmp	.L28523
.L33309:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r11
	xorl	%r12d, %r12d
	cmpq	%r11, %r8
	movq	%r8, %rbx
	movq	%r11, %r13
	jae	.L30891
.L28573:
	cmpl	$3, (%rbx)
	je	.L33310
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L28569:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L28573
.L30891:
	movslq	%r12d,%rdx
	movq	%r8, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L30893
.L28587:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33311
	cmpl	$2, %eax
	je	.L33312
.L28581:
	movq	8(%r12), %rdi
	movzbl	(%rdi), %r10d
	leaq	1(%rdi), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L28577
.L28586:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L28586
.L28577:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L28587
.L30893:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	je	.L28566
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L28566
.L33312:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L28581
.L33311:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L28577
.L33310:
	addl	$25, %r12d
	jmp	.L28569
	.p2align 6,,7
.L33293:
	movl	constructor_incremental(%rip), %r8d
	testl	%r8d, %r8d
	je	.L28526
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, %r14
	je	.L28524
	testq	%rax, %rax
	jne	.L28527
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L28534
.L30885:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L33313
.L28554:
	cmpb	$18, 16(%rdi)
	je	.L33314
.L28560:
	movl	$0, constructor_incremental(%rip)
.L28526:
	movq	%r14, %rdi
	movq	-1200(%rbp), %rsi
.L31920:
	call	add_pending_init
	jmp	.L28129
.L33314:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L33315
	movq	global_trees+136(%rip), %rax
.L31917:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L28560
.L33315:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31917
.L33313:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L28560
	testb	$2, 53(%rax)
	je	.L28560
	cmpq	$0, 72(%rax)
	jne	.L28560
.L28540:
	movq	constructor_unfilled_fields(%rip), %rsi
	movq	(%rsi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L28560
	testb	$2, 53(%rax)
	je	.L28560
	cmpq	$0, 72(%rax)
	jne	.L28560
	jmp	.L28540
	.p2align 6,,7
.L28534:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L28534
	movq	constructor_type(%rip), %rdi
	jmp	.L30885
.L28527:
	movq	%r14, %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L28526
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L28547
	cmpb	$18, %al
	jne	.L28526
.L28547:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L28553
.L30888:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L28554
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L28560
	testb	$2, 53(%rax)
	je	.L28560
	cmpq	$0, 72(%rax)
	jne	.L28560
.L28559:
	movq	constructor_unfilled_fields(%rip), %r9
	movq	(%r9), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L28560
	testb	$2, 53(%rax)
	je	.L28560
	cmpq	$0, 72(%rax)
	jne	.L28560
	jmp	.L28559
.L28553:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L28553
	movq	constructor_type(%rip), %rdi
	jmp	.L30888
	.p2align 6,,7
.L33292:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L28526
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r14, %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31320
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L28526
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r14, %rdi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L28526
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L28506
	cmpb	$18, %al
	jne	.L28526
.L28506:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L28512
.L30882:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L28554
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L28560
	testb	$2, 53(%rax)
	je	.L28560
	cmpq	$0, 72(%rax)
	jne	.L28560
.L28518:
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L28560
	testb	$2, 53(%rax)
	je	.L28560
	cmpq	$0, 72(%rax)
	jne	.L28560
	jmp	.L28518
.L28512:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L28512
	movq	constructor_type(%rip), %rdi
	jmp	.L30882
.L31320:
	movq	constructor_type(%rip), %rdi
	jmp	.L28503
	.p2align 6,,7
.L31921:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L28129
.L33291:
	call	integer_zerop
	testl	%eax, %eax
	je	.L28499
	movq	constructor_type(%rip), %rbx
	cmpb	$18, 16(%rbx)
	je	.L28129
	cmpq	$0, (%r14)
	jne	.L28129
	jmp	.L28499
	.p2align 6,,7
.L33290:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L28497
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L28497
	.p2align 6,,7
.L33289:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r9
	xorl	%r12d, %r12d
	cmpq	%r9, %r8
	movq	%r8, %rbx
	movq	%r9, %r13
	jae	.L30877
.L28479:
	cmpl	$3, (%rbx)
	je	.L33316
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L28475:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L28479
.L30877:
	movslq	%r12d,%r15
	movq	%r8, %r12
	addq	$16, %r15
	andq	$-16, %r15
	subq	%r15, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L30879
.L28493:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33317
	cmpl	$2, %eax
	je	.L33318
.L28487:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r11d
	leaq	1(%rdx), %rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	je	.L28483
.L28492:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L28492
.L28483:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L28493
.L30879:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	jne	.L33319
.L28496:
	movq	global_trees(%rip), %r12
	jmp	.L28497
.L33319:
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L28496
	.p2align 6,,7
.L33318:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L28487
.L33317:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L28483
.L33316:
	addl	$25, %r12d
	jmp	.L28475
.L28468:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L28471
	movq	constructor_type(%rip), %rsi
	movzbl	16(%rsi), %r8d
	subb	$20, %r8b
	cmpb	$1, %r8b
	ja	.L28467
	testb	$2, 53(%r14)
	je	.L28467
	cmpb	$25, 16(%r12)
	je	.L28467
.L28471:
	movl	$0, constructor_simple(%rip)
	jmp	.L28467
.L33288:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L28467
.L33287:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L28465
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L28465
	xorl	%ebx, %ebx
	testl	%ebx, %ebx
	je	.L28465
	movq	32(%r12), %rdi
	movq	32(%rdi), %r10
	movq	104(%r10), %r12
	jmp	.L28465
	.p2align 6,,7
.L33286:
	movzbl	16(%r12), %ecx
	cmpb	$29, %cl
	je	.L33320
.L28379:
	movq	-472(%rbp), %rbx
	movq	128(%rdx), %rdi
	movq	128(%rbx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L31313
	movq	8(%r12), %rbx
.L28378:
	movzbl	16(%rbx), %r13d
	cmpl	$23, %r13d
	je	.L28381
	cmpl	$18, %r13d
	je	.L28381
	movzbl	16(%r12), %ecx
	cmpb	$32, %cl
	je	.L33321
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L28438
	cmpb	$34, %cl
	je	.L33322
.L28438:
	cmpb	$116, %cl
	movq	%r12, %rdx
	je	.L31319
	cmpb	$115, %cl
	je	.L33323
.L28447:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L28452
	cmpb	$49, %al
	je	.L28452
	cmpb	$50, %al
	je	.L28452
	cmpb	$101, %al
	je	.L28452
.L28451:
	cmpl	$10, %r13d
	je	.L33324
	cmpb	$39, %cl
	je	.L33325
.L28457:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L28460
	testb	$32, 17(%rbx)
	je	.L28461
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L28462
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%rbx), %r11d
	movzwl	60(%rdx), %ecx
	andl	$511, %r11d
	andl	$511, %ecx
	cmpl	%ecx, %r11d
	je	.L28462
.L28461:
	movq	integer_types+40(%rip), %rdi
.L32033:
	movq	%r12, %rsi
.L32034:
	call	convert
.L31913:
	movq	%rax, %rbx
.L31904:
	movq	global_trees(%rip), %r8
.L28436:
	movq	%rbx, %r12
	jmp	.L31914
.L28462:
	movq	integer_types+48(%rip), %rdi
	jmp	.L32033
.L28460:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L28463
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L28463
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%rbx)
	je	.L33326
.L28463:
	cmpl	$5, %r13d
	je	.L33327
.L28464:
	movq	%r12, %rbx
	jmp	.L31904
.L33327:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31905:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L28436
.L33326:
	movq	global_trees+200(%rip), %rdi
	jmp	.L32033
.L33325:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L28457
	movq	integer_types+40(%rip), %r15
	movq	40(%rdx), %rdi
	movzwl	60(%r15), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L28457
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L28461
	testb	$32, 17(%rbx)
	jne	.L28462
	jmp	.L28461
.L33324:
	movq	integer_types+40(%rip), %r9
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%r9), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L28456
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L28455
.L28456:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L28455:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L32033
	.p2align 6,,7
.L28452:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L28451
.L33323:
	movq	32(%r12), %rsi
	movq	8(%r12), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L28447
.L28450:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L33328
.L31319:
	movq	32(%r12), %rsi
	jmp	.L28450
.L33328:
	cmpb	$115, %cl
	jne	.L28447
	movq	32(%rsi), %r8
	movq	8(%r12), %rdi
	cmpq	%rdi, 8(%r8)
	movq	%r8, %rsi
	je	.L28450
	jmp	.L28447
.L33322:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	jne	.L28438
	cmpb	$51, 48(%r12)
	je	.L28438
	cmpq	$0, current_function_decl(%rip)
	je	.L28444
	movzbl	17(%r12), %ebx
	andb	$24, %bl
	cmpb	$16, %bl
	je	.L33329
.L28444:
	movq	%r12, %rsi
.L28445:
	movq	%rsi, %r12
	movq	8(%rsi), %rbx
.L31903:
	movzbl	16(%r12), %ecx
	jmp	.L28438
.L33329:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L28444
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L28444
	testb	$2, 17(%rax)
	je	.L28444
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L28445
	jmp	.L28444
.L33321:
	movq	104(%r12), %r12
	jmp	.L31903
	.p2align 6,,7
.L28381:
	movzbl	16(%r12), %ecx
	xorl	%r15d, %r15d
	movl	%r13d, %edi
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L31315
	cmpb	$115, %cl
	je	.L33330
.L28383:
	movzbl	%cl, %r11d 
	movzbl	tree_code_type(%r11), %eax
	cmpb	$60, %al
	je	.L28389
	cmpb	$49, %al
	je	.L28389
	cmpb	$50, %al
	je	.L28389
	cmpb	$101, %al
	je	.L28389
.L28388:
	cmpl	$23, %edi
	je	.L33331
	cmpl	$18, %edi
	jne	.L28464
	movzbl	%cl, %edi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rdi), %eax
	movq	8(%rbx), %r13
	cmpb	$114, %al
	je	.L28394
	cmpb	$100, %al
	je	.L28394
.L28393:
	movzbl	17(%rbx), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %edi
	shrb	$3, %r10b
	shrb	$4, %dil
	andl	$1, %r10d
	andl	%edi, %r9d
	movzbl	16(%rbx), %edi
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rbx), %r10d
	movl	%r10d, %esi
	shrb	$5, %sil
	andl	$1, %esi
	sall	$2, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	cmpb	$20, %dil
	je	.L33332
.L28397:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L28396
	testl	%edx, %edx
	jne	.L28396
	testl	%r11d, %r11d
	je	.L28395
.L28396:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%ebx, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L33333
.L28398:
	leal	0(,%rcx,8), %r8d
	movq	%r13, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L28395:
	cmpb	$41, %cl
	je	.L33334
	cmpb	$47, %cl
	je	.L33335
	xorl	%ebx, %ebx
	testl	%r15d, %r15d
	je	.L33336
.L28432:
	movl	flag_isoc99(%rip), %r15d
	testl	%r15d, %r15d
	jne	.L28433
	testl	%ebx, %ebx
	je	.L28464
.L28433:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L33337
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L32034
.L33337:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L31905
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %ecx
	andb	$1, %cl
	addb	%cl, %cl
	andb	$-4, %r12b
	orb	%cl, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L31904
.L33336:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L28432
.L33335:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r15d
	movq	%r13, %rax
	cmpl	$23, %r15d
	je	.L28402
	cmpl	$18, %r15d
	je	.L28402
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L33338
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L28405
	cmpb	$34, %dl
	je	.L33339
.L28405:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L31317
	cmpb	$115, %dl
	je	.L33340
.L28414:
	movzbl	%dl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L28419
	cmpb	$49, %al
	je	.L28419
	cmpb	$50, %al
	je	.L28419
	cmpb	$101, %al
	je	.L28419
.L28418:
	cmpl	$10, %r15d
	je	.L33341
	cmpb	$39, %dl
	je	.L33342
.L28424:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L28427
	testb	$32, 17(%r13)
	je	.L28428
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L28429
	movq	integer_types+40(%rip), %r10
	movzwl	60(%r13), %esi
	movzwl	60(%r10), %r13d
	andl	$511, %esi
	andl	$511, %r13d
	cmpl	%r13d, %esi
	je	.L28429
.L28428:
	movq	integer_types+40(%rip), %rdi
.L31902:
	movq	%rbx, %rsi
	call	convert
.L28403:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31913
.L28429:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31902
.L28427:
	movl	flag_traditional(%rip), %edi
	testl	%edi, %edi
	je	.L28430
	movl	flag_allow_single_precision(%rip), %r8d
	testl	%r8d, %r8d
	jne	.L28430
	movq	global_trees+192(%rip), %r9
	cmpq	%r9, 128(%r13)
	je	.L33343
.L28430:
	cmpl	$5, %r15d
	je	.L33344
	movq	%rbx, %rax
	jmp	.L28403
.L33344:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L28403
.L33343:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31902
.L33342:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L28424
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L28424
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L28428
	testb	$32, 17(%r13)
	jne	.L28429
	jmp	.L28428
.L33341:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r15d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r15d, %r15d
	jne	.L28423
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L28422
.L28423:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L28422:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31902
.L28419:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L28418
.L33340:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L28414
.L28417:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L33345
.L31317:
	movq	32(%rbx), %rsi
	jmp	.L28417
.L33345:
	cmpb	$115, %dl
	jne	.L28414
	movq	32(%rsi), %r9
	movq	8(%rbx), %rdi
	cmpq	%rdi, 8(%r9)
	movq	%r9, %rsi
	je	.L28417
	jmp	.L28414
.L33339:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L28409
	cmpb	$51, 48(%rbx)
	je	.L28409
	cmpq	$0, current_function_decl(%rip)
	je	.L28411
	movzbl	17(%rbx), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L33346
.L28411:
	movq	%rbx, %rsi
.L28412:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L28409:
	movq	%rax, %r13
	jmp	.L28405
.L33346:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L28411
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L28411
	testb	$2, 17(%rax)
	je	.L28411
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L28412
	jmp	.L28411
.L33338:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L28405
.L28402:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L28403
.L33334:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L32034
.L33333:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L28398
.L33332:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L28397
.L28394:
	movzbl	17(%r12), %r9d
	movl	$1, %r11d
	movl	%r9d, %edx
	shrb	$3, %r9b
	shrb	$4, %dl
	andl	%r9d, %r11d
	andl	$1, %edx
	jmp	.L28393
.L33331:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31913
	.p2align 6,,7
.L28389:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L28388
.L33330:
	movq	32(%r12), %rsi
	cmpq	%rbx, 8(%rsi)
	jne	.L28383
.L28387:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r15d
	cmpb	$116, %cl
	jne	.L33347
.L31315:
	movq	32(%r12), %rsi
	jmp	.L28387
.L33347:
	cmpb	$115, %cl
	jne	.L28383
	movq	32(%rsi), %rsi
	movq	8(%r12), %r8
	cmpq	%r8, 8(%rsi)
	je	.L28387
	jmp	.L28383
.L33320:
	movq	-472(%rbp), %rbx
	cmpb	$18, 16(%rbx)
	jne	.L28379
	movq	8(%rbx), %r13
	cmpb	$6, 16(%r13)
	jne	.L28379
	movq	global_trees(%rip), %r8
	jmp	.L28377
	.p2align 6,,7
.L28376:
	movq	%r12, %rdi
	movq	%rbx, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L28604
	movq	-1184(%rbp), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	je	.L33348
.L31918:
	movq	%rax, -1184(%rbp)
	jmp	.L28129
.L33348:
	movq	-1184(%rbp), %r13
	movq	32(%r13), %rsi
	movq	%rsi, -1216(%rbp)
	jmp	.L28130
	.p2align 6,,7
.L28604:
	movq	-1184(%rbp), %r9
	movq	8(%r9), %rax
	testq	%rax, %rax
	jne	.L31918
	movq	-1184(%rbp), %rcx
	movq	16(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L28611
	cmpq	%rcx, 8(%rax)
	je	.L28614
.L28611:
	testq	%rax, %rax
	movq	%rax, -1184(%rbp)
	je	.L28130
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L28129
	movq	-1184(%rbp), %r13
	movq	32(%r13), %r10
	movq	%r10, -1216(%rbp)
	jmp	.L28130
	.p2align 6,,7
.L28614:
	movq	16(%rdx), %rax
	movq	%rdx, -1184(%rbp)
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L28611
	movq	-1184(%rbp), %r15
	cmpq	%r15, 8(%rax)
	je	.L28614
	jmp	.L28611
	.p2align 6,,7
.L33285:
	movq	-1184(%rbp), %rax
	movq	constructor_unfilled_index(%rip), %rsi
	movq	32(%rax), %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L28133
	movq	-1184(%rbp), %r13
	movq	constructor_type(%rip), %r10
	movq	constructor_unfilled_index(%rip), %r15
	movq	40(%r13), %r12
	movq	8(%r10), %r11
	movq	%r11, -464(%rbp)
	movq	8(%r12), %rbx
	movzbl	16(%rbx), %eax
	movq	%rbx, %rdx
	cmpb	$23, %al
	je	.L28135
	cmpb	$18, %al
	je	.L33349
.L31303:
	movq	global_trees(%rip), %r8
.L31898:
	movzbl	16(%r12), %ecx
.L28134:
	cmpb	$-86, %cl
	je	.L33350
.L28222:
	cmpq	%r8, %r12
	je	.L33351
	testb	$2, 17(%r12)
	jne	.L28225
	movl	$0, constructor_constant(%rip)
.L28224:
	movl	require_constant_value(%rip), %r14d
	testl	%r14d, %r14d
	je	.L28229
	testb	$2, 17(%r12)
	je	.L33352
.L28229:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L33353
.L28254:
	testq	%r15, %r15
	je	.L28256
	movq	8(%r15), %rax
	cmpq	global_trees(%rip), %rax
	je	.L28129
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L33354
.L28256:
	movq	-464(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%r12, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -1192(%rbp)
	je	.L31921
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L33355
.L28260:
	cmpb	$20, 16(%rdi)
	je	.L33356
.L28281:
	cmpb	$21, 16(%rdi)
	je	.L33357
.L28280:
	testq	%r15, %r15
	je	.L28348
	cmpb	$25, 16(%r15)
	je	.L33358
.L28348:
	movq	constructor_elements(%rip), %rdx
	movq	-1192(%rbp), %rsi
	movq	%r15, %rdi
	call	tree_cons
	movq	constructor_type(%rip), %r15
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r15), %eax
	movq	%r15, %rdx
	cmpb	$18, %al
	je	.L32095
	cmpb	$20, %al
	jne	.L28594
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L28593
	testb	$2, 53(%rax)
	je	.L28593
	cmpq	$0, 72(%rax)
	jne	.L28593
.L28356:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L28593
	testb	$2, 53(%rax)
	je	.L28593
	cmpq	$0, 72(%rax)
	jne	.L28593
	jmp	.L28356
.L33358:
	movq	%r15, %rdi
	call	copy_node
	movq	%rax, %r15
	jmp	.L28348
.L33357:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L28280
	movq	32(%rax), %rcx
	testb	$1, 17(%rcx)
	jne	.L33359
.L28323:
	movq	$0, constructor_elements(%rip)
	jmp	.L28280
.L33359:
	movl	$.LC42, %edi
	xorl	%eax, %eax
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdi
	xorl	%r12d, %r12d
	cmpq	%rdi, %r8
	movq	%r8, %rbx
	movq	%rdi, %r13
	jae	.L30867
.L28330:
	cmpl	$3, (%rbx)
	je	.L33360
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L28326:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L28330
.L30867:
	movslq	%r12d,%rdx
	movq	%r8, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30869
.L28344:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33361
	cmpl	$2, %eax
	je	.L33362
.L28338:
	movq	8(%r12), %r10
	movzbl	(%r10), %r9d
	leaq	1(%r10), %rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	je	.L28334
.L28343:
	movzbl	(%rcx), %esi
	incq	%rbx
	incq	%rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	jne	.L28343
.L28334:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L28344
.L30869:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L28323
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L28323
.L33362:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L28338
.L33361:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L28334
.L33360:
	addl	$25, %r12d
	jmp	.L28326
.L33356:
	movl	constructor_incremental(%rip), %r13d
	testl	%r13d, %r13d
	je	.L28283
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, %r15
	je	.L28281
	testq	%rax, %rax
	jne	.L28284
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L28291
.L30861:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L33363
.L28311:
	cmpb	$18, 16(%rdi)
	je	.L33364
.L28317:
	movl	$0, constructor_incremental(%rip)
.L28283:
	movq	-1192(%rbp), %rsi
	movq	%r15, %rdi
	jmp	.L31920
.L33364:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L33365
	movq	global_trees+136(%rip), %rax
.L31901:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L28317
.L33365:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31901
.L33363:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L28317
	testb	$2, 53(%rax)
	je	.L28317
	cmpq	$0, 72(%rax)
	jne	.L28317
.L28297:
	movq	constructor_unfilled_fields(%rip), %r8
	movq	(%r8), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L28317
	testb	$2, 53(%rax)
	je	.L28317
	cmpq	$0, 72(%rax)
	jne	.L28317
	jmp	.L28297
.L28291:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L28291
	movq	constructor_type(%rip), %rdi
	jmp	.L30861
.L28284:
	movq	%r15, %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r14
	call	bit_position
	movq	%r14, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L28283
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L28304
	cmpb	$18, %al
	jne	.L28283
.L28304:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L28310
.L30864:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L28311
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L28317
	testb	$2, 53(%rax)
	je	.L28317
	cmpq	$0, 72(%rax)
	jne	.L28317
.L28316:
	movq	constructor_unfilled_fields(%rip), %r11
	movq	(%r11), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L28317
	testb	$2, 53(%rax)
	je	.L28317
	cmpq	$0, 72(%rax)
	jne	.L28317
	jmp	.L28316
.L28310:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L28310
	movq	constructor_type(%rip), %rdi
	jmp	.L30864
.L33355:
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L28283
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31310
	movl	constructor_incremental(%rip), %r10d
	testl	%r10d, %r10d
	je	.L28283
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L28283
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L28263
	cmpb	$18, %al
	jne	.L28283
.L28263:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L28269
.L30858:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L28311
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L28317
	testb	$2, 53(%rax)
	je	.L28317
	cmpq	$0, 72(%rax)
	jne	.L28317
.L28275:
	movq	constructor_unfilled_fields(%rip), %rsi
	movq	(%rsi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L28317
	testb	$2, 53(%rax)
	je	.L28317
	cmpq	$0, 72(%rax)
	jne	.L28317
	jmp	.L28275
.L28269:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L28269
	movq	constructor_type(%rip), %rdi
	jmp	.L30858
.L31310:
	movq	constructor_type(%rip), %rdi
	jmp	.L28260
.L33354:
	call	integer_zerop
	testl	%eax, %eax
	je	.L28256
	movq	constructor_type(%rip), %rbx
	cmpb	$18, 16(%rbx)
	je	.L28129
	cmpq	$0, (%r15)
	jne	.L28129
	jmp	.L28256
.L33353:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L28254
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L28254
.L33352:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r11
	xorl	%r12d, %r12d
	cmpq	%r11, %r8
	movq	%r8, %rbx
	movq	%r11, %r13
	jae	.L30853
.L28236:
	cmpl	$3, (%rbx)
	je	.L33366
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L28232:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L28236
.L30853:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30855
.L28250:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33367
	cmpl	$2, %eax
	je	.L33368
.L28244:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %edi
	leaq	1(%rdx), %rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	je	.L28240
.L28249:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L28249
.L28240:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L28250
.L30855:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L33369
.L28253:
	movq	global_trees(%rip), %r12
	jmp	.L28254
.L33369:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L28253
.L33368:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L28244
.L33367:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L28240
.L33366:
	addl	$25, %r12d
	jmp	.L28232
.L28225:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L28228
	movq	constructor_type(%rip), %r8
	movzbl	16(%r8), %r13d
	subb	$20, %r13b
	cmpb	$1, %r13b
	ja	.L28224
	testb	$2, 53(%r15)
	je	.L28224
	cmpb	$25, 16(%r12)
	je	.L28224
.L28228:
	movl	$0, constructor_simple(%rip)
	jmp	.L28224
	.p2align 6,,7
.L33351:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L28224
.L33350:
	movl	require_constant_value(%rip), %ebx
	testl	%ebx, %ebx
	je	.L28222
	movl	flag_isoc99(%rip), %edi
	testl	%edi, %edi
	jne	.L28222
	xorl	%r9d, %r9d
	testl	%r9d, %r9d
	je	.L28222
	movq	32(%r12), %rsi
	movq	32(%rsi), %r10
	movq	104(%r10), %r12
	jmp	.L28222
.L33349:
	movzbl	16(%r12), %ecx
	cmpb	$29, %cl
	je	.L33370
.L28136:
	movq	-464(%rbp), %r9
	movq	128(%rdx), %rdi
	movq	128(%r9), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L31303
	movq	8(%r12), %rbx
.L28135:
	movzbl	16(%rbx), %r13d
	cmpl	$23, %r13d
	je	.L28138
	cmpl	$18, %r13d
	je	.L28138
	movzbl	16(%r12), %ecx
	cmpb	$32, %cl
	je	.L33371
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L28195
	cmpb	$34, %cl
	je	.L33372
.L28195:
	cmpb	$116, %cl
	movq	%r12, %rdx
	je	.L31309
	cmpb	$115, %cl
	je	.L33373
.L28204:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L28209
	cmpb	$49, %al
	je	.L28209
	cmpb	$50, %al
	je	.L28209
	cmpb	$101, %al
	je	.L28209
.L28208:
	cmpl	$10, %r13d
	je	.L33374
	cmpb	$39, %cl
	je	.L33375
.L28214:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L28217
	testb	$32, 17(%rbx)
	je	.L28218
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L28219
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%rbx), %r11d
	movzwl	60(%rdx), %ecx
	andl	$511, %r11d
	andl	$511, %ecx
	cmpl	%ecx, %r11d
	je	.L28219
.L28218:
	movq	integer_types+40(%rip), %rdi
.L32031:
	movq	%r12, %rsi
.L32032:
	call	convert
.L31897:
	movq	%rax, %rbx
.L31888:
	movq	global_trees(%rip), %r8
.L28193:
	movq	%rbx, %r12
	jmp	.L31898
.L28219:
	movq	integer_types+48(%rip), %rdi
	jmp	.L32031
.L28217:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L28220
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L28220
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%rbx)
	je	.L33376
.L28220:
	cmpl	$5, %r13d
	je	.L33377
.L28221:
	movq	%r12, %rbx
	jmp	.L31888
.L33377:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31889:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L28193
.L33376:
	movq	global_trees+200(%rip), %rdi
	jmp	.L32031
.L33375:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L28214
	movq	integer_types+40(%rip), %r14
	movq	40(%rdx), %rdi
	movzwl	60(%r14), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L28214
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L28218
	testb	$32, 17(%rbx)
	jne	.L28219
	jmp	.L28218
.L33374:
	movq	integer_types+40(%rip), %r8
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%r8), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L28213
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L28212
.L28213:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L28212:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L32031
.L28209:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L28208
.L33373:
	movq	32(%r12), %rsi
	movq	8(%r12), %rdi
	cmpq	%rdi, 8(%rsi)
	jne	.L28204
.L28207:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L33378
.L31309:
	movq	32(%r12), %rsi
	jmp	.L28207
.L33378:
	cmpb	$115, %cl
	jne	.L28204
	movq	32(%rsi), %r10
	movq	8(%r12), %r9
	cmpq	%r9, 8(%r10)
	movq	%r10, %rsi
	je	.L28207
	jmp	.L28204
.L33372:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	jne	.L28195
	cmpb	$51, 48(%r12)
	je	.L28195
	cmpq	$0, current_function_decl(%rip)
	je	.L28201
	movzbl	17(%r12), %ebx
	andb	$24, %bl
	cmpb	$16, %bl
	je	.L33379
.L28201:
	movq	%r12, %rsi
.L28202:
	movq	%rsi, %r12
	movq	8(%rsi), %rbx
.L31887:
	movzbl	16(%r12), %ecx
	jmp	.L28195
.L33379:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L28201
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L28201
	testb	$2, 17(%rax)
	je	.L28201
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L28202
	jmp	.L28201
.L33371:
	movq	104(%r12), %r12
	jmp	.L31887
.L28138:
	movzbl	16(%r12), %ecx
	xorl	%r14d, %r14d
	movl	%r13d, %edi
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L31305
	cmpb	$115, %cl
	je	.L33380
.L28140:
	movzbl	%cl, %r11d 
	movzbl	tree_code_type(%r11), %eax
	cmpb	$60, %al
	je	.L28146
	cmpb	$49, %al
	je	.L28146
	cmpb	$50, %al
	je	.L28146
	cmpb	$101, %al
	je	.L28146
.L28145:
	cmpl	$23, %edi
	je	.L33381
	cmpl	$18, %edi
	jne	.L28221
	movzbl	%cl, %edi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rdi), %eax
	movq	8(%rbx), %r13
	cmpb	$114, %al
	je	.L28151
	cmpb	$100, %al
	je	.L28151
.L28150:
	movzbl	17(%rbx), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %edi
	shrb	$4, %r10b
	shrb	$3, %dil
	andl	%r10d, %r9d
	andl	$1, %edi
	movzbl	62(%rbx), %r10d
	addl	%edi, %edi
	orl	%edi, %r9d
	movzbl	16(%rbx), %edi
	movl	%r10d, %esi
	shrb	$5, %sil
	andl	$1, %esi
	sall	$2, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	cmpb	$20, %dil
	je	.L33382
.L28154:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L28153
	testl	%edx, %edx
	jne	.L28153
	testl	%r11d, %r11d
	je	.L28152
.L28153:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%ebx, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L33383
.L28155:
	leal	0(,%rcx,8), %r8d
	movq	%r13, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L28152:
	cmpb	$41, %cl
	je	.L33384
	cmpb	$47, %cl
	je	.L33385
	xorl	%ebx, %ebx
	testl	%r14d, %r14d
	je	.L33386
.L28189:
	movl	flag_isoc99(%rip), %r14d
	testl	%r14d, %r14d
	jne	.L28190
	testl	%ebx, %ebx
	je	.L28221
.L28190:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L33387
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L32032
.L33387:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L31889
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %ecx
	andb	$1, %cl
	addb	%cl, %cl
	andb	$-4, %r12b
	orb	%cl, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L31888
.L33386:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L28189
.L33385:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L28159
	cmpl	$18, %r14d
	je	.L28159
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L33388
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L28162
	cmpb	$34, %dl
	je	.L33389
.L28162:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L31307
	cmpb	$115, %dl
	je	.L33390
.L28171:
	movzbl	%dl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L28176
	cmpb	$49, %al
	je	.L28176
	cmpb	$50, %al
	je	.L28176
	cmpb	$101, %al
	je	.L28176
.L28175:
	cmpl	$10, %r14d
	je	.L33391
	cmpb	$39, %dl
	je	.L33392
.L28181:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L28184
	testb	$32, 17(%r13)
	je	.L28185
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L28186
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%r13), %esi
	movzwl	60(%rdi), %r13d
	andl	$511, %esi
	andl	$511, %r13d
	cmpl	%r13d, %esi
	je	.L28186
.L28185:
	movq	integer_types+40(%rip), %rdi
.L31886:
	movq	%rbx, %rsi
	call	convert
.L28160:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31897
.L28186:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31886
.L28184:
	movl	flag_traditional(%rip), %r9d
	testl	%r9d, %r9d
	je	.L28187
	movl	flag_allow_single_precision(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L28187
	movq	global_trees+192(%rip), %r8
	cmpq	%r8, 128(%r13)
	je	.L33393
.L28187:
	cmpl	$5, %r14d
	je	.L33394
	movq	%rbx, %rax
	jmp	.L28160
.L33394:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L28160
.L33393:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31886
.L33392:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L28181
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L28181
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L28185
	testb	$32, 17(%r13)
	jne	.L28186
	jmp	.L28185
.L33391:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L28180
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L28179
.L28180:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L28179:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31886
.L28176:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L28175
.L33390:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rdi, 8(%rsi)
	jne	.L28171
.L28174:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L33395
.L31307:
	movq	32(%rbx), %rsi
	jmp	.L28174
.L33395:
	cmpb	$115, %dl
	jne	.L28171
	movq	32(%rsi), %r9
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%r9)
	movq	%r9, %rsi
	je	.L28174
	jmp	.L28171
.L33389:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L28166
	cmpb	$51, 48(%rbx)
	je	.L28166
	cmpq	$0, current_function_decl(%rip)
	je	.L28168
	movzbl	17(%rbx), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L33396
.L28168:
	movq	%rbx, %rsi
.L28169:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L28166:
	movq	%rax, %r13
	jmp	.L28162
.L33396:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L28168
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L28168
	testb	$2, 17(%rax)
	je	.L28168
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L28169
	jmp	.L28168
.L33388:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L28162
.L28159:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L28160
.L33384:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L32032
.L33383:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L28155
.L33382:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L28154
.L28151:
	movzbl	17(%r12), %r10d
	movl	$1, %r11d
	movl	%r10d, %edx
	shrb	$3, %r10b
	shrb	$4, %dl
	andl	%r10d, %r11d
	andl	$1, %edx
	jmp	.L28150
.L33381:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31897
.L28146:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L28145
.L33380:
	movq	32(%r12), %rsi
	cmpq	%rbx, 8(%rsi)
	jne	.L28140
.L28144:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r14d
	cmpb	$116, %cl
	jne	.L33397
.L31305:
	movq	32(%r12), %rsi
	jmp	.L28144
.L33397:
	cmpb	$115, %cl
	jne	.L28140
	movq	32(%rsi), %rsi
	movq	8(%r12), %r8
	cmpq	%r8, 8(%rsi)
	je	.L28144
	jmp	.L28140
.L33370:
	movq	-464(%rbp), %rbx
	cmpb	$18, 16(%rbx)
	jne	.L28136
	movq	8(%rbx), %rsi
	cmpb	$6, 16(%rsi)
	jne	.L28136
	movq	global_trees(%rip), %r8
	jmp	.L28134
	.p2align 6,,7
.L28133:
	movq	-1184(%rbp), %r13
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%r13), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L28361
	movq	-1184(%rbp), %r8
	movq	(%r8), %rax
	testq	%rax, %rax
	jne	.L31918
	movq	-1184(%rbp), %r14
	movq	32(%r14), %rax
	movq	%rax, -1216(%rbp)
	jmp	.L28130
.L28361:
	movq	-1184(%rbp), %r11
	movq	8(%r11), %rax
	testq	%rax, %rax
	jne	.L31918
	movq	-1184(%rbp), %rsi
	movq	16(%rsi), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L28368
	cmpq	%rsi, 8(%rax)
	je	.L28371
.L28368:
	testq	%rax, %rax
	movq	%rax, -1184(%rbp)
	je	.L28130
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L28129
	movq	-1184(%rbp), %rdx
	movq	32(%rdx), %rcx
	movq	%rcx, -1216(%rbp)
	jmp	.L28130
.L28371:
	movq	16(%rdx), %rax
	movq	%rdx, -1184(%rbp)
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L28368
	movq	-1184(%rbp), %rdi
	cmpq	%rdi, 8(%rax)
	je	.L28371
	jmp	.L28368
.L33284:
	movq	constructor_unfilled_fields(%rip), %rax
	testq	%rax, %rax
	je	.L28091
.L31362:
	movq	40(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L33398
.L28096:
	movq	(%rax), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	jne	.L31362
	jmp	.L28091
.L33398:
	call	integer_zerop
	testl	%eax, %eax
	je	.L33399
	movq	constructor_unfilled_fields(%rip), %rax
	jmp	.L28096
.L33399:
	movq	constructor_unfilled_fields(%rip), %rax
	testq	%rax, %rax
	je	.L28091
	movl	constructor_designated(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L28091
	movq	72(%rax), %rax
	movl	$.LC159, %r12d
	testq	%rax, %rax
	je	.L28099
	movq	32(%rax), %r12
.L28099:
	movq	spelling(%rip), %rcx
	movq	spelling_base(%rip), %rdi
	movl	spelling_size(%rip), %eax
	movq	%rcx, %r11
	subq	%rdi, %r11
	movq	%r11, %rbx
	shrq	$4, %rbx
	cmpl	%eax, %ebx
	jl	.L28100
	addl	$10, %eax
	testq	%rdi, %rdi
	movl	%eax, spelling_size(%rip)
	jne	.L28101
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L31885:
	movslq	%ebx,%rcx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rcx
	addq	spelling_base(%rip), %rcx
	movq	%rcx, spelling(%rip)
.L28100:
	movq	%r12, 8(%rcx)
	movl	$2, (%rcx)
	movl	$.LC42, %edi
	addq	$16, %rcx
	xorl	%eax, %eax
	movl	$.LC175, %esi
	movq	%rcx, spelling(%rip)
	xorl	%r12d, %r12d
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdi
	cmpq	%rdi, %r8
	movq	%r8, %rbx
	movq	%rdi, %r13
	jae	.L30844
.L28110:
	cmpl	$3, (%rbx)
	je	.L33400
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L28106:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L28110
.L30844:
	movslq	%r12d,%r9
	movq	%r8, %r12
	addq	$16, %r9
	andq	$-16, %r9
	subq	%r9, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30846
.L28124:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33401
	cmpl	$2, %eax
	je	.L33402
.L28118:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r15d
	leaq	1(%rdx), %rcx
	testb	%r15b, %r15b
	movb	%r15b, (%rbx)
	je	.L28114
.L28123:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L28123
.L28114:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L28124
.L30846:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L33403
.L28127:
	movslq	constructor_depth(%rip),%rbx
	salq	$4, %rbx
	addq	spelling_base(%rip), %rbx
	movq	%rbx, spelling(%rip)
	jmp	.L28091
.L33403:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L28127
.L33402:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L28118
.L33401:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L28114
.L33400:
	addl	$25, %r12d
	jmp	.L28106
.L28101:
	movslq	%eax,%rsi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L31885
.L33283:
	movq	24(%rax), %rax
	testq	%rax, %rax
	je	.L28034
	cmpq	$0, 112(%rax)
	jne	.L28034
	movq	constructor_unfilled_index(%rip), %rdi
	call	integer_zerop
	testl	%eax, %eax
	jne	.L31884
	movq	constructor_type(%rip), %r12
	cmpq	$0, 32(%r12)
	jne	.L28037
	cmpl	$2, constructor_depth(%rip)
	jg	.L33404
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	jne	.L33405
.L28063:
	movq	constructor_fields(%rip), %r14
	cmpq	$0, (%r14)
	je	.L28034
.L31884:
	movq	$0, constructor_type(%rip)
	jmp	.L28034
.L33405:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC174, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r9
	xorl	%r12d, %r12d
	cmpq	%r9, %r8
	movq	%r8, %rbx
	movq	%r9, %r13
	jae	.L30839
.L28071:
	cmpl	$3, (%rbx)
	je	.L33406
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L28067:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L28071
.L30839:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30841
.L28085:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33407
	cmpl	$2, %eax
	je	.L33408
.L28079:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r15d
	leaq	1(%rdx), %rcx
	testb	%r15b, %r15b
	movb	%r15b, (%rbx)
	je	.L28075
.L28084:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L28084
.L28075:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L28085
.L30841:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L28063
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L28063
.L33408:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L28079
.L33407:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L28075
.L33406:
	addl	$25, %r12d
	jmp	.L28067
.L33404:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC173, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r11
	xorl	%r12d, %r12d
	cmpq	%r11, %r8
	movq	%r8, %rbx
	movq	%r11, %r13
	jae	.L30834
.L28045:
	cmpl	$3, (%rbx)
	je	.L33409
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L28041:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L28045
.L30834:
	movslq	%r12d,%r10
	movq	%r8, %r12
	addq	$16, %r10
	andq	$-16, %r10
	subq	%r10, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30836
.L28059:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33410
	cmpl	$2, %eax
	je	.L33411
.L28053:
	movq	8(%r12), %r13
	movzbl	(%r13), %esi
	leaq	1(%r13), %rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	je	.L28049
.L28058:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L28058
.L28049:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L28059
.L30836:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L28063
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L28063
.L33411:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L28053
.L33410:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L28049
.L33409:
	addl	$25, %r12d
	jmp	.L28041
.L33282:
	movq	-1240(%rbp), %r14
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	movq	32(%r14), %rsi
	call	size_binop
	movq	-1240(%rbp), %r8
	movq	%rax, %rdi
	movq	40(%r8), %rsi
	movq	%rax, 32(%r8)
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L28698
	movq	-1240(%rbp), %rcx
	movl	$1, %eax
	cmpq	$0, 8(%rcx)
	cmovne	-1228(%rbp), %eax
	movl	%eax, -1228(%rbp)
.L28698:
	movq	-1240(%rbp), %r15
	movl	-1228(%rbp), %ebx
	movq	32(%r15), %rax
	movq	48(%r15), %r13
	testl	%ebx, %ebx
	movq	%rax, constructor_index(%rip)
	movq	%r13, constructor_fields(%rip)
	je	.L28695
	cmpq	$0, 40(%r15)
	je	.L28695
	cmpq	24(%r15), %rax
	je	.L33412
.L28695:
	movq	-1240(%rbp), %rax
	movq	(%rax), %rsi
	testq	%rsi, %rsi
	movq	%rsi, -1240(%rbp)
	je	.L28693
	movl	$2, %edi
	call	push_init_level
	movq	-1240(%rbp), %rbx
	movq	constructor_stack(%rip), %r9
	movq	40(%rbx), %rsi
	movq	%r9, 16(%rbx)
	testq	%rsi, %rsi
	je	.L28698
	movq	32(%rbx), %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L28698
	movq	24(%rbx), %r12
	movq	%r12, 32(%rbx)
	jmp	.L28698
.L28693:
	movl	-1228(%rbp), %eax
	testl	%eax, %eax
	jne	.L28700
	movq	-416(%rbp), %r11
	movq	%r11, constructor_range_stack(%rip)
	jmp	.L28700
.L33412:
	movl	$0, -1228(%rbp)
	movq	$0, 8(%r15)
	jmp	.L28695
.L28020:
	xorl	%edi, %edi
	jmp	.L28021
.L33281:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC176, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r10
	xorl	%r12d, %r12d
	cmpq	%r10, %r8
	movq	%r8, %rbx
	movq	%r10, %r13
	jae	.L30822
.L27968:
	cmpl	$3, (%rbx)
	je	.L33413
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L27964:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L27968
.L30822:
	movslq	%r12d,%rsi
	movq	%r8, %r12
	addq	$16, %rsi
	andq	$-16, %rsi
	subq	%rsi, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30824
.L27982:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33414
	cmpl	$2, %eax
	je	.L33415
.L27976:
	movq	8(%r12), %rdi
	movzbl	(%rdi), %r13d
	leaq	1(%rdi), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L27972
.L27981:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L27981
.L27972:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L27982
.L30824:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L27961
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L27961
.L33415:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L27976
.L33414:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L27972
.L33413:
	addl	$25, %r12d
	jmp	.L27964
.L27960:
	cmpq	$0, (%rax)
	jne	.L33416
.L27987:
	movq	32(%rax), %rax
	jmp	.L31883
.L33416:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC177, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r14
	xorl	%r12d, %r12d
	cmpq	%r14, %r8
	movq	%r8, %rbx
	movq	%r14, %r13
	jae	.L30827
.L27994:
	cmpl	$3, (%rbx)
	je	.L33417
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L27990:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L27994
.L30827:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30829
.L28008:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33418
	cmpl	$2, %eax
	je	.L33419
.L28002:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r15d
	leaq	1(%rdx), %rcx
	testb	%r15b, %r15b
	movb	%r15b, (%rbx)
	je	.L27998
.L28007:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L28007
.L27998:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L28008
.L30829:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L33420
.L28011:
	movq	constructor_elements(%rip), %rax
	jmp	.L27987
.L33420:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L28011
.L33419:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L28002
.L33418:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L27998
.L33417:
	addl	$25, %r12d
	jmp	.L27990
.L27959:
	movl	constructor_erroneous(%rip), %r12d
	testl	%r12d, %r12d
	je	.L28014
	movq	global_trees(%rip), %rbx
	movq	%rbx, -1176(%rbp)
	jmp	.L27956
.L28014:
	movq	constructor_elements(%rip), %rdi
	call	nreverse
	xorl	%edx, %edx
	movq	constructor_type(%rip), %rsi
	movq	%rax, %rcx
	movl	$46, %edi
	xorl	%eax, %eax
	call	build
	movl	constructor_constant(%rip), %r11d
	movq	%rax, -1176(%rbp)
	testl	%r11d, %r11d
	je	.L27956
	orb	$2, 17(%rax)
	movl	constructor_constant(%rip), %eax
	testl	%eax, %eax
	je	.L27956
	movl	constructor_simple(%rip), %r10d
	testl	%r10d, %r10d
	je	.L27956
	movq	-1176(%rbp), %rsi
	orb	$4, 18(%rsi)
	jmp	.L27956
	.p2align 6,,7
.L33279:
	xorl	%edi, %edi
	call	output_pending_init_elements
	jmp	.L27461
.L33278:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L27925
.L33277:
	movq	constructor_unfilled_fields(%rip), %rsi
	movq	(%rsi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L27925
	testb	$2, 53(%rax)
	je	.L27925
	cmpq	$0, 72(%rax)
	jne	.L27925
.L27931:
	movq	constructor_unfilled_fields(%rip), %r13
	movq	(%r13), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L27925
	testb	$2, 53(%rax)
	je	.L27925
	cmpq	$0, 72(%rax)
	jne	.L27925
	jmp	.L27931
.L33276:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L27925
.L33275:
	movq	%rbx, %rdi
	call	copy_node
	movq	%rax, -1160(%rbp)
	jmp	.L27923
	.p2align 6,,7
.L33274:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L27855
	movq	32(%rax), %r9
	testb	$1, 17(%r9)
	jne	.L33421
.L27898:
	movq	$0, constructor_elements(%rip)
	jmp	.L27855
.L33421:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L30815
.L27905:
	cmpl	$3, (%rbx)
	je	.L33422
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L27901:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L27905
.L30815:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30817
.L27919:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33423
	cmpl	$2, %eax
	je	.L33424
.L27913:
	movq	8(%r12), %r11
	movzbl	(%r11), %r8d
	leaq	1(%r11), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L27909
.L27918:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L27918
.L27909:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L27919
.L30817:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L27898
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L27898
.L33424:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L27913
.L33423:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L27909
.L33422:
	addl	$25, %r12d
	jmp	.L27901
	.p2align 6,,7
.L33273:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L27858
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, -440(%rbp)
	je	.L27856
	testq	%rax, %rax
	jne	.L27859
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L27866
.L30809:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L33425
.L27886:
	cmpb	$18, 16(%rdi)
	je	.L33426
.L27892:
	movl	$0, constructor_incremental(%rip)
.L27858:
	movq	-440(%rbp), %rdi
	movq	-1152(%rbp), %rsi
.L31881:
	call	add_pending_init
	jmp	.L27461
.L33426:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L33427
	movq	global_trees+136(%rip), %rax
.L31878:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L27892
.L33427:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31878
.L33425:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L27892
	testb	$2, 53(%rax)
	je	.L27892
	cmpq	$0, 72(%rax)
	jne	.L27892
.L27872:
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L27892
	testb	$2, 53(%rax)
	je	.L27892
	cmpq	$0, 72(%rax)
	jne	.L27892
	jmp	.L27872
	.p2align 6,,7
.L27866:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L27866
	movq	constructor_type(%rip), %rdi
	jmp	.L30809
.L27859:
	movq	-440(%rbp), %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r14
	call	bit_position
	movq	%r14, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L27858
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L27879
	cmpb	$18, %al
	jne	.L27858
.L27879:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L27885
.L30812:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L27886
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L27892
	testb	$2, 53(%rax)
	je	.L27892
	cmpq	$0, 72(%rax)
	jne	.L27892
.L27891:
	movq	constructor_unfilled_fields(%rip), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L27892
	testb	$2, 53(%rax)
	je	.L27892
	cmpq	$0, 72(%rax)
	jne	.L27892
	jmp	.L27891
.L27885:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L27885
	movq	constructor_type(%rip), %rdi
	jmp	.L30812
	.p2align 6,,7
.L33272:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L27858
	movq	-440(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31299
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L27858
	movq	-440(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L27858
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L27838
	cmpb	$18, %al
	jne	.L27858
.L27838:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L27844
.L30806:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L27886
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L27892
	testb	$2, 53(%rax)
	je	.L27892
	cmpq	$0, 72(%rax)
	jne	.L27892
.L27850:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L27892
	testb	$2, 53(%rax)
	je	.L27892
	cmpq	$0, 72(%rax)
	jne	.L27892
	jmp	.L27850
.L27844:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L27844
	movq	constructor_type(%rip), %rdi
	jmp	.L30806
	.p2align 6,,7
.L31299:
	movq	constructor_type(%rip), %rdi
	jmp	.L27835
.L31882:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L27461
.L33271:
	call	integer_zerop
	testl	%eax, %eax
	je	.L27831
	movq	constructor_type(%rip), %rsi
	cmpb	$18, 16(%rsi)
	je	.L27461
	movq	-440(%rbp), %r13
	cmpq	$0, (%r13)
	jne	.L27461
	jmp	.L27831
.L33270:
	movq	8(%rbx), %rsi
	movq	%rbx, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L27829
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L27829
.L33269:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r14
	xorl	%r12d, %r12d
	cmpq	%r14, %r8
	movq	%r8, %rbx
	movq	%r14, %r13
	jae	.L30801
.L27811:
	cmpl	$3, (%rbx)
	je	.L33428
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L27807:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L27811
.L30801:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30803
.L27825:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33429
	cmpl	$2, %eax
	je	.L33430
.L27819:
	movq	8(%r12), %r11
	movzbl	(%r11), %r8d
	leaq	1(%r11), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L27815
.L27824:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L27824
.L27815:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L27825
.L30803:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L33431
.L27828:
	movq	global_trees(%rip), %rbx
	jmp	.L27829
.L33431:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L27828
.L33430:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L27819
.L33429:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L27815
.L33428:
	addl	$25, %r12d
	jmp	.L27807
.L27800:
	movq	8(%rbx), %rsi
	movq	%rbx, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L27803
	movq	constructor_type(%rip), %r9
	movzbl	16(%r9), %edx
	subb	$20, %dl
	cmpb	$1, %dl
	ja	.L27799
	movq	-440(%rbp), %rax
	testb	$2, 53(%rax)
	je	.L27799
	cmpb	$25, 16(%rbx)
	je	.L27799
.L27803:
	movl	$0, constructor_simple(%rip)
	jmp	.L27799
.L33268:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L27799
.L33267:
	movl	require_constant_value(%rip), %esi
	testl	%esi, %esi
	je	.L27797
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L27797
	xorl	%r13d, %r13d
	testl	%r13d, %r13d
	je	.L27797
	movq	32(%rbx), %rdi
	movq	32(%rdi), %rcx
	movq	104(%rcx), %rbx
	jmp	.L27797
.L33266:
	movzbl	16(%rbx), %ecx
	cmpb	$29, %cl
	je	.L33432
.L27711:
	movq	-448(%rbp), %r9
	movq	128(%rdx), %rdi
	movq	128(%r9), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L31292
	movq	8(%rbx), %r12
.L27710:
	movzbl	16(%r12), %r13d
	cmpl	$23, %r13d
	je	.L27713
	cmpl	$18, %r13d
	je	.L27713
	movzbl	16(%rbx), %ecx
	cmpb	$32, %cl
	je	.L33433
	movl	optimize(%rip), %r9d
	testl	%r9d, %r9d
	je	.L27770
	cmpb	$34, %cl
	je	.L33434
.L27770:
	cmpb	$116, %cl
	movq	%rbx, %rdx
	je	.L31298
	cmpb	$115, %cl
	je	.L33435
.L27779:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L27784
	cmpb	$49, %al
	je	.L27784
	cmpb	$50, %al
	je	.L27784
	cmpb	$101, %al
	je	.L27784
.L27783:
	cmpl	$10, %r13d
	je	.L33436
	cmpb	$39, %cl
	je	.L33437
.L27789:
	movq	%r12, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L27792
	testb	$32, 17(%r12)
	je	.L27793
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L27794
	movzwl	60(%r12), %r8d
	movq	integer_types+40(%rip), %r12
	movzwl	60(%r12), %r9d
	andl	$511, %r8d
	andl	$511, %r9d
	cmpl	%r9d, %r8d
	je	.L27794
.L27793:
	movq	integer_types+40(%rip), %rdi
.L32028:
	movq	%rbx, %rsi
.L32029:
	call	convert
.L31874:
	movq	%rax, %r12
.L31865:
	movq	global_trees(%rip), %r8
.L27768:
	movq	%r12, %rbx
	jmp	.L31875
.L27794:
	movq	integer_types+48(%rip), %rdi
	jmp	.L32028
.L27792:
	movl	flag_traditional(%rip), %r14d
	testl	%r14d, %r14d
	je	.L27795
	movl	flag_allow_single_precision(%rip), %r11d
	testl	%r11d, %r11d
	jne	.L27795
	movq	global_trees+192(%rip), %r10
	cmpq	%r10, 128(%r12)
	je	.L33438
.L27795:
	cmpl	$5, %r13d
	je	.L33439
.L27796:
	movq	%rbx, %r12
	jmp	.L31865
.L33439:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31866:
	movq	global_trees(%rip), %r8
	movq	%r8, %r12
	jmp	.L27768
.L33438:
	movq	global_trees+200(%rip), %rdi
	jmp	.L32028
	.p2align 6,,7
.L33437:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L27789
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%rdi), %esi
	movq	40(%rdx), %rdi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L27789
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	je	.L27793
	testb	$32, 17(%r12)
	jne	.L27794
	jmp	.L27793
	.p2align 6,,7
.L33436:
	movq	integer_types+40(%rip), %r13
	movzwl	60(%r12), %edx
	movl	flag_traditional(%rip), %ecx
	movzwl	60(%r13), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%ecx, %ecx
	jne	.L27788
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L27787
.L27788:
	testb	$32, 17(%r12)
	movl	$1, %eax
	cmovne	%eax, %esi
.L27787:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L32028
.L27784:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L27783
.L33435:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r14
	cmpq	%r14, 8(%rsi)
	jne	.L27779
.L27782:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %rbx
	cmpb	$116, %cl
	jne	.L33440
.L31298:
	movq	32(%rbx), %rsi
	jmp	.L27782
.L33440:
	cmpb	$115, %cl
	jne	.L27779
	movq	32(%rsi), %r10
	movq	8(%rbx), %r11
	cmpq	%r11, 8(%r10)
	movq	%r10, %rsi
	je	.L27782
	jmp	.L27779
.L33434:
	movl	pedantic(%rip), %r8d
	testl	%r8d, %r8d
	jne	.L27770
	cmpb	$51, 48(%rbx)
	je	.L27770
	cmpq	$0, current_function_decl(%rip)
	je	.L27776
	movzbl	17(%rbx), %r12d
	andb	$24, %r12b
	cmpb	$16, %r12b
	je	.L33441
.L27776:
	movq	%rbx, %rsi
.L27777:
	movq	%rsi, %rbx
	movq	8(%rsi), %r12
.L31864:
	movzbl	16(%rbx), %ecx
	jmp	.L27770
.L33441:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L27776
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L27776
	testb	$2, 17(%rax)
	je	.L27776
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L27777
	jmp	.L27776
	.p2align 6,,7
.L33433:
	movq	104(%rbx), %rbx
	jmp	.L31864
.L27713:
	movzbl	16(%rbx), %ecx
	movl	%r13d, %edi
	movq	%rbx, %rdx
	xorl	%r13d, %r13d
	cmpb	$116, %cl
	je	.L31294
	cmpb	$115, %cl
	je	.L33442
.L27715:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L27721
	cmpb	$49, %al
	je	.L27721
	cmpb	$50, %al
	je	.L27721
	cmpb	$101, %al
	je	.L27721
.L27720:
	cmpl	$23, %edi
	je	.L33443
	cmpl	$18, %edi
	jne	.L27796
	movzbl	%cl, %r10d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r10), %eax
	movq	8(%r12), %r14
	cmpb	$114, %al
	je	.L27726
	cmpb	$100, %al
	je	.L27726
.L27725:
	movzbl	17(%r12), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %edi
	shrb	$3, %r10b
	shrb	$4, %dil
	andl	$1, %r10d
	andl	%edi, %r9d
	movzbl	16(%r12), %edi
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%r12), %r10d
	movl	%r10d, %esi
	shrb	$5, %sil
	andl	$1, %esi
	sall	$2, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	cmpb	$20, %dil
	je	.L33444
.L27729:
	leal	0(,%rsi,8), %r12d
	orl	%r12d, %r9d
	jne	.L27728
	testl	%edx, %edx
	jne	.L27728
	testl	%r11d, %r11d
	je	.L27727
.L27728:
	movl	%r8d, %r12d
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r12b
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%r12d, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L33445
.L27730:
	leal	0(,%rcx,8), %r8d
	movq	%r14, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%rbx), %ecx
	movq	%rax, %r14
.L27727:
	cmpb	$41, %cl
	je	.L33446
	cmpb	$47, %cl
	je	.L33447
	xorl	%r12d, %r12d
	testl	%r13d, %r13d
	je	.L33448
.L27764:
	movl	flag_isoc99(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L27765
	testl	%r12d, %r12d
	je	.L27796
.L27765:
	movq	%r14, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %r12
	je	.L33449
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%r12, %rdi
	movq	%rax, %rsi
	jmp	.L32029
.L33449:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, %r12
	call	mark_addressable
	testl	%eax, %eax
	je	.L31866
	movq	%rbx, %rdi
	call	staticp
	movzbl	17(%r12), %ebx
	movl	%eax, %edi
	andb	$1, %dil
	addb	%dil, %dil
	andb	$-4, %bl
	orb	%dil, %bl
	movb	%bl, 17(%r12)
	jmp	.L31865
.L33448:
	movq	%rbx, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r12d
	jmp	.L27764
.L33447:
	movq	40(%rbx), %r12
	movq	8(%r12), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L27734
	cmpl	$18, %r14d
	je	.L27734
	movzbl	16(%r12), %edx
	cmpb	$32, %dl
	je	.L33450
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L27737
	cmpb	$34, %dl
	je	.L33451
.L27737:
	cmpb	$116, %dl
	movq	%r12, %rcx
	je	.L31296
	cmpb	$115, %dl
	je	.L33452
.L27746:
	movzbl	%dl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L27751
	cmpb	$49, %al
	je	.L27751
	cmpb	$50, %al
	je	.L27751
	cmpb	$101, %al
	je	.L27751
.L27750:
	cmpl	$10, %r14d
	je	.L33453
	cmpb	$39, %dl
	je	.L33454
.L27756:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L27759
	testb	$32, 17(%r13)
	je	.L27760
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L27761
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r13), %esi
	movzwl	60(%rdx), %r13d
	andl	$511, %esi
	andl	$511, %r13d
	cmpl	%r13d, %esi
	je	.L27761
.L27760:
	movq	integer_types+40(%rip), %rdi
.L31863:
	movq	%r12, %rsi
	call	convert
.L27735:
	movq	8(%rax), %rsi
	movq	32(%rbx), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31874
.L27761:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31863
.L27759:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L27762
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L27762
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%r13)
	je	.L33455
.L27762:
	cmpl	$5, %r14d
	je	.L33456
	movq	%r12, %rax
	jmp	.L27735
.L33456:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L27735
.L33455:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31863
.L33454:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L27756
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L27756
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L27760
	testb	$32, 17(%r13)
	jne	.L27761
	jmp	.L27760
.L33453:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L27755
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L27754
.L27755:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L27754:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31863
.L27751:
	movl	24(%rcx), %eax
	movl	%eax, 24(%r12)
	jmp	.L27750
.L33452:
	movq	32(%r12), %rsi
	movq	8(%r12), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L27746
.L27749:
	movzbl	16(%rsi), %edx
	movq	%rsi, %r12
	cmpb	$116, %dl
	jne	.L33457
.L31296:
	movq	32(%r12), %rsi
	jmp	.L27749
.L33457:
	cmpb	$115, %dl
	jne	.L27746
	movq	32(%rsi), %r9
	movq	8(%r12), %rdi
	cmpq	%rdi, 8(%r9)
	movq	%r9, %rsi
	je	.L27749
	jmp	.L27746
.L33451:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L27741
	cmpb	$51, 48(%r12)
	je	.L27741
	cmpq	$0, current_function_decl(%rip)
	je	.L27743
	movzbl	17(%r12), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L33458
.L27743:
	movq	%r12, %rsi
.L27744:
	movq	%rsi, %r12
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L27741:
	movq	%rax, %r13
	jmp	.L27737
.L33458:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L27743
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L27743
	testb	$2, 17(%rax)
	je	.L27743
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L27744
	jmp	.L27743
.L33450:
	movq	104(%r12), %r12
	movzbl	16(%r12), %edx
	jmp	.L27737
.L27734:
	movq	%r12, %rdi
	call	default_function_array_conversion
	jmp	.L27735
.L33446:
	movq	72(%r14), %rdi
	movq	32(%rbx), %rsi
	jmp	.L32029
.L33445:
	testq	%r14, %r14
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L27730
.L33444:
	testq	%r14, %r14
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L27729
.L27726:
	movzbl	17(%rbx), %edi
	movl	$1, %r11d
	movl	%edi, %edx
	shrb	$3, %dil
	shrb	$4, %dl
	andl	%edi, %r11d
	andl	$1, %edx
	jmp	.L27725
	.p2align 6,,7
.L33443:
	movl	$121, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31874
.L27721:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L27720
.L33442:
	movq	32(%rbx), %rsi
	cmpq	%r12, 8(%rsi)
	jne	.L27715
.L27719:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %rbx
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r13d
	cmpb	$116, %cl
	jne	.L33459
.L31294:
	movq	32(%rbx), %rsi
	jmp	.L27719
.L33459:
	cmpb	$115, %cl
	jne	.L27715
	movq	32(%rsi), %rsi
	movq	8(%rbx), %r11
	cmpq	%r11, 8(%rsi)
	je	.L27719
	jmp	.L27715
.L33432:
	movq	-448(%rbp), %rsi
	cmpb	$18, 16(%rsi)
	jne	.L27711
	movq	8(%rsi), %r8
	cmpb	$6, 16(%r8)
	jne	.L27711
	movq	global_trees(%rip), %r8
	jmp	.L27709
	.p2align 6,,7
.L27708:
	movq	%r12, %rdi
	movq	%rbx, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L27936
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L33460
.L31879:
	movq	%rax, %r15
	jmp	.L27461
.L33460:
	movq	32(%r15), %rdi
	movq	%rdi, -1168(%rbp)
	jmp	.L27462
	.p2align 6,,7
.L27936:
	movq	8(%r15), %rax
	testq	%rax, %rax
	jne	.L31879
	movq	16(%r15), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L27943
	cmpq	%r15, 8(%rax)
	je	.L27946
.L27943:
	testq	%rax, %rax
	movq	%rax, %r15
	je	.L27462
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L27461
.L27694:
	movq	32(%r15), %rcx
	movq	%rcx, -1168(%rbp)
	jmp	.L27462
	.p2align 6,,7
.L27946:
	movq	16(%rdx), %rax
	movq	%rdx, %r15
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L27943
	cmpq	%r15, 8(%rax)
	je	.L27946
	jmp	.L27943
	.p2align 6,,7
.L33265:
	movq	32(%r15), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L27465
	movq	constructor_type(%rip), %rdi
	movq	constructor_unfilled_index(%rip), %rdx
	movq	40(%r15), %r12
	movq	8(%rdi), %r11
	movq	%rdx, -1144(%rbp)
	movq	%r11, -432(%rbp)
	movq	8(%r12), %rbx
	movzbl	16(%rbx), %eax
	movq	%rbx, %rdx
	cmpb	$23, %al
	je	.L27467
	cmpb	$18, %al
	je	.L33461
.L31282:
	movq	global_trees(%rip), %r8
.L31859:
	movzbl	16(%r12), %ecx
.L27466:
	cmpb	$-86, %cl
	je	.L33462
.L27554:
	cmpq	%r8, %r12
	je	.L33463
	testb	$2, 17(%r12)
	jne	.L27557
	movl	$0, constructor_constant(%rip)
.L27556:
	movl	require_constant_value(%rip), %ecx
	testl	%ecx, %ecx
	je	.L27561
	testb	$2, 17(%r12)
	je	.L33464
.L27561:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L33465
.L27586:
	cmpq	$0, -1144(%rbp)
	je	.L27588
	movq	-1144(%rbp), %rbx
	movq	8(%rbx), %rax
	cmpq	global_trees(%rip), %rax
	je	.L27461
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L33466
.L27588:
	movq	-432(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%r12, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -1136(%rbp)
	je	.L31882
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L33467
.L27592:
	cmpb	$20, 16(%rdi)
	je	.L33468
.L27613:
	cmpb	$21, 16(%rdi)
	je	.L33469
.L27612:
	cmpq	$0, -1144(%rbp)
	je	.L27680
	movq	-1144(%rbp), %rdx
	cmpb	$25, 16(%rdx)
	je	.L33470
.L27680:
	movq	constructor_elements(%rip), %rdx
	movq	-1144(%rbp), %rdi
	movq	-1136(%rbp), %rsi
	call	tree_cons
	movq	%rax, constructor_elements(%rip)
	movq	constructor_type(%rip), %rax
	movq	%rax, %rdx
	movzbl	16(%rax), %eax
	cmpb	$18, %al
	je	.L33471
	cmpb	$20, %al
	je	.L33472
	cmpb	$21, 16(%rdx)
	je	.L33473
.L27682:
	xorl	%r14d, %r14d
	testl	%r14d, %r14d
	jmp	.L32030
.L33473:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L27682
	.p2align 6,,7
.L33472:
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L27682
	testb	$2, 53(%rax)
	je	.L27682
	cmpq	$0, 72(%rax)
	jne	.L27682
.L27688:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L27682
	testb	$2, 53(%rax)
	je	.L27682
	cmpq	$0, 72(%rax)
	jne	.L27682
	jmp	.L27688
.L33471:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L27682
.L33470:
	movq	%rdx, %rdi
	call	copy_node
	movq	%rax, -1144(%rbp)
	jmp	.L27680
	.p2align 6,,7
.L33469:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L27612
	movq	32(%rax), %r10
	testb	$1, 17(%r10)
	jne	.L33474
.L27655:
	movq	$0, constructor_elements(%rip)
	jmp	.L27612
.L33474:
	movl	$.LC42, %edi
	xorl	%eax, %eax
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdi
	xorl	%r12d, %r12d
	cmpq	%rdi, %r8
	movq	%r8, %rbx
	movq	%rdi, %r13
	jae	.L30791
.L27662:
	cmpl	$3, (%rbx)
	je	.L33475
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L27658:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L27662
.L30791:
	movslq	%r12d,%rsi
	movq	%r8, %r12
	addq	$16, %rsi
	andq	$-16, %rsi
	subq	%rsi, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30793
.L27676:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33476
	cmpl	$2, %eax
	je	.L33477
.L27670:
	movq	8(%r12), %r9
	movzbl	(%r9), %r8d
	leaq	1(%r9), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L27666
.L27675:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L27675
.L27666:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L27676
.L30793:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L27655
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L27655
.L33477:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L27670
.L33476:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L27666
.L33475:
	addl	$25, %r12d
	jmp	.L27658
	.p2align 6,,7
.L33468:
	movl	constructor_incremental(%rip), %ecx
	testl	%ecx, %ecx
	je	.L27615
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, -1144(%rbp)
	je	.L27613
	testq	%rax, %rax
	jne	.L27616
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L27623
.L30785:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L33478
.L27643:
	cmpb	$18, 16(%rdi)
	je	.L33479
.L27649:
	movl	$0, constructor_incremental(%rip)
.L27615:
	movq	-1144(%rbp), %rdi
	movq	-1136(%rbp), %rsi
	jmp	.L31881
.L33479:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L33480
	movq	global_trees+136(%rip), %rax
.L31862:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L27649
.L33480:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31862
.L33478:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L27649
	testb	$2, 53(%rax)
	je	.L27649
	cmpq	$0, 72(%rax)
	jne	.L27649
.L27629:
	movq	constructor_unfilled_fields(%rip), %r11
	movq	(%r11), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L27649
	testb	$2, 53(%rax)
	je	.L27649
	cmpq	$0, 72(%rax)
	jne	.L27649
	jmp	.L27629
	.p2align 6,,7
.L27623:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L27623
	movq	constructor_type(%rip), %rdi
	jmp	.L30785
.L27616:
	movq	-1144(%rbp), %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L27615
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L27636
	cmpb	$18, %al
	jne	.L27615
.L27636:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L27642
.L30788:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L27643
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L27649
	testb	$2, 53(%rax)
	je	.L27649
	cmpq	$0, 72(%rax)
	jne	.L27649
.L27648:
	movq	constructor_unfilled_fields(%rip), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L27649
	testb	$2, 53(%rax)
	je	.L27649
	cmpq	$0, 72(%rax)
	jne	.L27649
	jmp	.L27648
.L27642:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L27642
	movq	constructor_type(%rip), %rdi
	jmp	.L30788
	.p2align 6,,7
.L33467:
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L27615
	movq	-1144(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31289
	movl	constructor_incremental(%rip), %r14d
	testl	%r14d, %r14d
	je	.L27615
	movq	-1144(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L27615
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L27595
	cmpb	$18, %al
	jne	.L27615
.L27595:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L27601
.L30782:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L27643
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L27649
	testb	$2, 53(%rax)
	je	.L27649
	cmpq	$0, 72(%rax)
	jne	.L27649
.L27607:
	movq	constructor_unfilled_fields(%rip), %r9
	movq	(%r9), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L27649
	testb	$2, 53(%rax)
	je	.L27649
	cmpq	$0, 72(%rax)
	jne	.L27649
	jmp	.L27607
.L27601:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L27601
	movq	constructor_type(%rip), %rdi
	jmp	.L30782
.L31289:
	movq	constructor_type(%rip), %rdi
	jmp	.L27592
	.p2align 6,,7
.L33466:
	call	integer_zerop
	testl	%eax, %eax
	je	.L27588
	movq	constructor_type(%rip), %r13
	cmpb	$18, 16(%r13)
	je	.L27461
	movq	-1144(%rbp), %r8
	cmpq	$0, (%r8)
	jne	.L27461
	jmp	.L27588
	.p2align 6,,7
.L33465:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L27586
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L27586
.L33464:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r11
	xorl	%r12d, %r12d
	cmpq	%r11, %r8
	movq	%r8, %rbx
	movq	%r11, %r13
	jae	.L30777
.L27568:
	cmpl	$3, (%rbx)
	je	.L33481
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L27564:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L27568
.L30777:
	movslq	%r12d,%rdx
	movq	%r8, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30779
.L27582:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33482
	cmpl	$2, %eax
	je	.L33483
.L27576:
	movq	8(%r12), %rdi
	movzbl	(%rdi), %r10d
	leaq	1(%rdi), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L27572
.L27581:
	movzbl	(%rcx), %esi
	incq	%rbx
	incq	%rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	jne	.L27581
.L27572:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L27582
.L30779:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L33484
.L27585:
	movq	global_trees(%rip), %r12
	jmp	.L27586
.L33484:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L27585
	.p2align 6,,7
.L33483:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L27576
.L33482:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L27572
.L33481:
	addl	$25, %r12d
	jmp	.L27564
.L27557:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L27560
	movq	constructor_type(%rip), %r9
	movzbl	16(%r9), %r8d
	subb	$20, %r8b
	cmpb	$1, %r8b
	ja	.L27556
	movq	-1144(%rbp), %r14
	testb	$2, 53(%r14)
	je	.L27556
	cmpb	$25, 16(%r12)
	je	.L27556
.L27560:
	movl	$0, constructor_simple(%rip)
	jmp	.L27556
.L33463:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L27556
.L33462:
	movl	require_constant_value(%rip), %ebx
	testl	%ebx, %ebx
	je	.L27554
	movl	flag_isoc99(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L27554
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L27554
	movq	32(%r12), %r13
	movq	32(%r13), %rsi
	movq	104(%rsi), %r12
	jmp	.L27554
	.p2align 6,,7
.L33461:
	movzbl	16(%r12), %ecx
	cmpb	$29, %cl
	je	.L33485
.L27468:
	movq	-432(%rbp), %rcx
	movq	128(%rdx), %rdi
	movq	128(%rcx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L31282
	movq	8(%r12), %rbx
.L27467:
	movzbl	16(%rbx), %r13d
	cmpl	$23, %r13d
	je	.L27470
	cmpl	$18, %r13d
	je	.L27470
	movzbl	16(%r12), %ecx
	cmpb	$32, %cl
	je	.L33486
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L27527
	cmpb	$34, %cl
	je	.L33487
.L27527:
	cmpb	$116, %cl
	movq	%r12, %rdx
	je	.L31288
	cmpb	$115, %cl
	je	.L33488
.L27536:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L27541
	cmpb	$49, %al
	je	.L27541
	cmpb	$50, %al
	je	.L27541
	cmpb	$101, %al
	je	.L27541
.L27540:
	cmpl	$10, %r13d
	je	.L33489
	cmpb	$39, %cl
	je	.L33490
.L27546:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L27549
	testb	$32, 17(%rbx)
	je	.L27550
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L27551
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%rbx), %r11d
	movzwl	60(%rdx), %ecx
	andl	$511, %r11d
	andl	$511, %ecx
	cmpl	%ecx, %r11d
	je	.L27551
.L27550:
	movq	integer_types+40(%rip), %rdi
.L32026:
	movq	%r12, %rsi
.L32027:
	call	convert
.L31858:
	movq	%rax, %rbx
.L31849:
	movq	global_trees(%rip), %r8
.L27525:
	movq	%rbx, %r12
	jmp	.L31859
.L27551:
	movq	integer_types+48(%rip), %rdi
	jmp	.L32026
	.p2align 6,,7
.L27549:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L27552
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L27552
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%rbx)
	je	.L33491
.L27552:
	cmpl	$5, %r13d
	je	.L33492
.L27553:
	movq	%r12, %rbx
	jmp	.L31849
.L33492:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31850:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L27525
.L33491:
	movq	global_trees+200(%rip), %rdi
	jmp	.L32026
.L33490:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L27546
	movq	integer_types+40(%rip), %r14
	movq	40(%rdx), %rdi
	movzwl	60(%r14), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L27546
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L27550
	testb	$32, 17(%rbx)
	jne	.L27551
	jmp	.L27550
.L33489:
	movq	integer_types+40(%rip), %r9
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%r9), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L27545
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L27544
.L27545:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L27544:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L32026
	.p2align 6,,7
.L27541:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L27540
.L33488:
	movq	32(%r12), %rsi
	movq	8(%r12), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L27536
.L27539:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L33493
.L31288:
	movq	32(%r12), %rsi
	jmp	.L27539
.L33493:
	cmpb	$115, %cl
	jne	.L27536
	movq	32(%rsi), %r8
	movq	8(%r12), %rdi
	cmpq	%rdi, 8(%r8)
	movq	%r8, %rsi
	je	.L27539
	jmp	.L27536
.L33487:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	jne	.L27527
	cmpb	$51, 48(%r12)
	je	.L27527
	cmpq	$0, current_function_decl(%rip)
	je	.L27533
	movzbl	17(%r12), %ebx
	andb	$24, %bl
	cmpb	$16, %bl
	je	.L33494
.L27533:
	movq	%r12, %rsi
.L27534:
	movq	%rsi, %r12
	movq	8(%rsi), %rbx
.L31848:
	movzbl	16(%r12), %ecx
	jmp	.L27527
.L33494:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L27533
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L27533
	testb	$2, 17(%rax)
	je	.L27533
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L27534
	jmp	.L27533
.L33486:
	movq	104(%r12), %r12
	jmp	.L31848
	.p2align 6,,7
.L27470:
	movzbl	16(%r12), %ecx
	xorl	%r14d, %r14d
	movl	%r13d, %edi
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L31284
	cmpb	$115, %cl
	je	.L33495
.L27472:
	movzbl	%cl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L27478
	cmpb	$49, %al
	je	.L27478
	cmpb	$50, %al
	je	.L27478
	cmpb	$101, %al
	je	.L27478
.L27477:
	cmpl	$23, %edi
	je	.L33496
	cmpl	$18, %edi
	jne	.L27553
	movzbl	%cl, %r10d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r10), %eax
	movq	8(%rbx), %r13
	cmpb	$114, %al
	je	.L27483
	cmpb	$100, %al
	je	.L27483
.L27482:
	movzbl	17(%rbx), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %edi
	shrb	$3, %r10b
	shrb	$4, %dil
	andl	$1, %r10d
	andl	%edi, %r9d
	movzbl	16(%rbx), %edi
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rbx), %r10d
	movl	%r10d, %esi
	shrb	$5, %sil
	andl	$1, %esi
	sall	$2, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	cmpb	$20, %dil
	je	.L33497
.L27486:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L27485
	testl	%edx, %edx
	jne	.L27485
	testl	%r11d, %r11d
	je	.L27484
.L27485:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %r9d
	movl	%r8d, %ecx
	andl	%ebx, %esi
	andl	$1, %r9d
	andl	$1, %ecx
	sall	$2, %r9d
	addl	%ecx, %ecx
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	orl	%r9d, %esi
	cmpb	$20, %dil
	je	.L33498
.L27487:
	leal	0(,%rcx,8), %r8d
	movq	%r13, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L27484:
	cmpb	$41, %cl
	je	.L33499
	cmpb	$47, %cl
	je	.L33500
	xorl	%ebx, %ebx
	testl	%r14d, %r14d
	je	.L33501
.L27521:
	movl	flag_isoc99(%rip), %r14d
	testl	%r14d, %r14d
	jne	.L27522
	testl	%ebx, %ebx
	je	.L27553
.L27522:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L33502
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L32027
.L33502:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L31850
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %ecx
	andb	$1, %cl
	addb	%cl, %cl
	andb	$-4, %r12b
	orb	%cl, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L31849
.L33501:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L27521
.L33500:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L27491
	cmpl	$18, %r14d
	je	.L27491
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L33503
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L27494
	cmpb	$34, %dl
	je	.L33504
.L27494:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L31286
	cmpb	$115, %dl
	je	.L33505
.L27503:
	movzbl	%dl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L27508
	cmpb	$49, %al
	je	.L27508
	cmpb	$50, %al
	je	.L27508
	cmpb	$101, %al
	je	.L27508
.L27507:
	cmpl	$10, %r14d
	je	.L33506
	cmpb	$39, %dl
	je	.L33507
.L27513:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L27516
	testb	$32, 17(%r13)
	je	.L27517
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L27518
	movq	integer_types+40(%rip), %r10
	movzwl	60(%r13), %esi
	movzwl	60(%r10), %r13d
	andl	$511, %esi
	andl	$511, %r13d
	cmpl	%r13d, %esi
	je	.L27518
.L27517:
	movq	integer_types+40(%rip), %rdi
.L31847:
	movq	%rbx, %rsi
	call	convert
.L27492:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31858
.L27518:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31847
.L27516:
	movl	flag_traditional(%rip), %edi
	testl	%edi, %edi
	je	.L27519
	movl	flag_allow_single_precision(%rip), %r8d
	testl	%r8d, %r8d
	jne	.L27519
	movq	global_trees+192(%rip), %r9
	cmpq	%r9, 128(%r13)
	je	.L33508
.L27519:
	cmpl	$5, %r14d
	je	.L33509
	movq	%rbx, %rax
	jmp	.L27492
.L33509:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L27492
.L33508:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31847
.L33507:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L27513
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L27513
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L27517
	testb	$32, 17(%r13)
	jne	.L27518
	jmp	.L27517
.L33506:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L27512
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L27511
.L27512:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L27511:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31847
.L27508:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L27507
.L33505:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L27503
.L27506:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L33510
.L31286:
	movq	32(%rbx), %rsi
	jmp	.L27506
.L33510:
	cmpb	$115, %dl
	jne	.L27503
	movq	32(%rsi), %r9
	movq	8(%rbx), %rdi
	cmpq	%rdi, 8(%r9)
	movq	%r9, %rsi
	je	.L27506
	jmp	.L27503
.L33504:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L27498
	cmpb	$51, 48(%rbx)
	je	.L27498
	cmpq	$0, current_function_decl(%rip)
	je	.L27500
	movzbl	17(%rbx), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L33511
.L27500:
	movq	%rbx, %rsi
.L27501:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L27498:
	movq	%rax, %r13
	jmp	.L27494
.L33511:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L27500
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L27500
	testb	$2, 17(%rax)
	je	.L27500
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L27501
	jmp	.L27500
.L33503:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L27494
.L27491:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L27492
.L33499:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L32027
.L33498:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L27487
.L33497:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L27486
.L27483:
	movzbl	17(%r12), %edi
	movl	$1, %r11d
	movl	%edi, %edx
	shrb	$3, %dil
	shrb	$4, %dl
	andl	%edi, %r11d
	andl	$1, %edx
	jmp	.L27482
.L33496:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31858
	.p2align 6,,7
.L27478:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L27477
.L33495:
	movq	32(%r12), %rsi
	cmpq	%rbx, 8(%rsi)
	jne	.L27472
.L27476:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r14d
	cmpb	$116, %cl
	jne	.L33512
.L31284:
	movq	32(%r12), %rsi
	jmp	.L27476
.L33512:
	cmpb	$115, %cl
	jne	.L27472
	movq	32(%rsi), %rsi
	movq	8(%r12), %r13
	cmpq	%r13, 8(%rsi)
	je	.L27476
	jmp	.L27472
.L33485:
	movq	-432(%rbp), %rax
	cmpb	$18, 16(%rax)
	jne	.L27468
	movq	8(%rax), %r9
	cmpb	$6, 16(%r9)
	jne	.L27468
	movq	global_trees(%rip), %r8
	jmp	.L27466
	.p2align 6,,7
.L27465:
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%r15), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L27693
	movq	(%r15), %rax
	testq	%rax, %rax
	jne	.L31879
	jmp	.L27694
	.p2align 6,,7
.L27693:
	movq	8(%r15), %rax
	testq	%rax, %rax
	jne	.L31879
	movq	16(%r15), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L27700
	cmpq	%r15, 8(%rax)
	je	.L27703
.L27700:
	testq	%rax, %rax
	movq	%rax, %r15
	je	.L27462
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L27461
	movq	32(%r15), %r13
	movq	%r13, -1168(%rbp)
	jmp	.L27462
	.p2align 6,,7
.L27703:
	movq	16(%rdx), %rax
	movq	%rdx, %r15
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L27700
	cmpq	%r15, 8(%rax)
	je	.L27703
	jmp	.L27700
	.p2align 6,,7
.L33264:
	movq	constructor_unfilled_fields(%rip), %rax
	testq	%rax, %rax
	je	.L27423
.L31361:
	movq	40(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L33513
.L27428:
	movq	(%rax), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	jne	.L31361
	jmp	.L27423
	.p2align 6,,7
.L33513:
	call	integer_zerop
	testl	%eax, %eax
	je	.L33514
	movq	constructor_unfilled_fields(%rip), %rax
	jmp	.L27428
.L33514:
	movq	constructor_unfilled_fields(%rip), %rax
	testq	%rax, %rax
	je	.L27423
	movl	constructor_designated(%rip), %edi
	testl	%edi, %edi
	jne	.L27423
	movq	72(%rax), %rax
	movl	$.LC159, %r12d
	testq	%rax, %rax
	je	.L27431
	movq	32(%rax), %r12
.L27431:
	movq	spelling(%rip), %rcx
	movq	spelling_base(%rip), %rdi
	movl	spelling_size(%rip), %eax
	movq	%rcx, %r9
	subq	%rdi, %r9
	movq	%r9, %rbx
	shrq	$4, %rbx
	cmpl	%eax, %ebx
	jl	.L27432
	addl	$10, %eax
	testq	%rdi, %rdi
	movl	%eax, spelling_size(%rip)
	jne	.L27433
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L31846:
	movslq	%ebx,%rcx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rcx
	addq	spelling_base(%rip), %rcx
	movq	%rcx, spelling(%rip)
.L27432:
	movq	%r12, 8(%rcx)
	movl	$2, (%rcx)
	movl	$.LC175, %esi
	addq	$16, %rcx
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movq	%rcx, spelling(%rip)
	xorl	%r12d, %r12d
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rsi
	cmpq	%rsi, %r8
	movq	%r8, %rbx
	movq	%rsi, %r13
	jae	.L30768
.L27442:
	cmpl	$3, (%rbx)
	je	.L33515
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L27438:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L27442
.L30768:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30770
.L27456:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33516
	cmpl	$2, %eax
	je	.L33517
.L27450:
	movq	8(%r12), %r8
	movzbl	(%r8), %r13d
	leaq	1(%r8), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L27446
.L27455:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L27455
.L27446:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L27456
.L30770:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L33518
.L27459:
	movslq	constructor_depth(%rip),%r14
	salq	$4, %r14
	addq	spelling_base(%rip), %r14
	movq	%r14, spelling(%rip)
	jmp	.L27423
.L33518:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L27459
.L33517:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L27450
.L33516:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L27446
.L33515:
	addl	$25, %r12d
	jmp	.L27438
.L27433:
	movslq	%eax,%rsi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L31846
	.p2align 6,,7
.L33263:
	movq	24(%rax), %rax
	testq	%rax, %rax
	je	.L27366
	cmpq	$0, 112(%rax)
	jne	.L27366
	movq	constructor_unfilled_index(%rip), %rdi
	call	integer_zerop
	testl	%eax, %eax
	jne	.L31845
	movq	constructor_type(%rip), %rdi
	cmpq	$0, 32(%rdi)
	jne	.L28037
	cmpl	$2, constructor_depth(%rip)
	jg	.L33519
	movl	pedantic(%rip), %ecx
	testl	%ecx, %ecx
	jne	.L33520
.L27395:
	movq	constructor_fields(%rip), %r12
	cmpq	$0, (%r12)
	je	.L27366
.L31845:
	movq	$0, constructor_type(%rip)
	jmp	.L27366
.L33520:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC174, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r14
	xorl	%r12d, %r12d
	cmpq	%r14, %r8
	movq	%r8, %rbx
	movq	%r14, %r13
	jae	.L30763
.L27403:
	cmpl	$3, (%rbx)
	je	.L33521
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L27399:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L27403
.L30763:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30765
.L27417:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33522
	cmpl	$2, %eax
	je	.L33523
.L27411:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r10d
	leaq	1(%rdx), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L27407
.L27416:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L27416
.L27407:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L27417
.L30765:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L27395
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L27395
.L33523:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L27411
.L33522:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L27407
.L33521:
	addl	$25, %r12d
	jmp	.L27399
.L33519:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC173, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r9
	xorl	%r12d, %r12d
	cmpq	%r9, %r8
	movq	%r8, %rbx
	movq	%r9, %r13
	jae	.L30758
.L27377:
	cmpl	$3, (%rbx)
	je	.L33524
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L27373:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L27377
.L30758:
	movslq	%r12d,%r15
	movq	%r8, %r12
	addq	$16, %r15
	andq	$-16, %r15
	subq	%r15, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30760
.L27391:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33525
	cmpl	$2, %eax
	je	.L33526
.L27385:
	movq	8(%r12), %r8
	movzbl	(%r8), %r13d
	leaq	1(%r8), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L27381
.L27390:
	movzbl	(%rcx), %esi
	incq	%rbx
	incq	%rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	jne	.L27390
.L27381:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L27391
.L30760:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L27395
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L27395
.L33526:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L27385
.L33525:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L27381
.L33524:
	addl	$25, %r12d
	jmp	.L27373
	.p2align 6,,7
.L33262:
	movq	constructor_index(%rip), %rdi
	xorl	%esi, %esi
	call	tree_low_cst
	movq	spelling_base(%rip), %rdi
	movq	spelling(%rip), %rcx
	movl	%eax, %r12d
	movl	spelling_size(%rip), %eax
	movq	%rcx, %rdx
	subq	%rdi, %rdx
	movq	%rdx, %rbx
	shrq	$4, %rbx
	cmpl	%eax, %ebx
	jl	.L26453
	addl	$10, %eax
	testq	%rdi, %rdi
	movl	%eax, spelling_size(%rip)
	jne	.L26454
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L31795:
	movslq	%ebx,%rcx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rcx
	addq	spelling_base(%rip), %rcx
	movq	%rcx, spelling(%rip)
.L26453:
	movl	%r12d, 8(%rcx)
	movl	$3, (%rcx)
	movq	-1072(%rbp), %r12
	addq	$16, %rcx
	movq	%rcx, spelling(%rip)
	movq	constructor_index(%rip), %rcx
	movq	%rcx, -1112(%rbp)
	movq	8(%r12), %rdi
	movzbl	16(%rdi), %eax
	movq	%rdi, %rdx
	cmpb	$23, %al
	je	.L26458
	cmpb	$18, %al
	je	.L33527
.L31248:
	movq	global_trees(%rip), %r8
.L26457:
	cmpb	$-86, 16(%r12)
	je	.L33528
.L26556:
	cmpq	%r8, %r12
	je	.L33529
	testb	$2, 17(%r12)
	jne	.L26559
	movl	$0, constructor_constant(%rip)
.L26558:
	movl	require_constant_value(%rip), %ecx
	testl	%ecx, %ecx
	je	.L26563
	testb	$2, 17(%r12)
	je	.L33530
.L26563:
	movl	require_constant_elements(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L33531
.L26588:
	cmpq	$0, -1112(%rbp)
	je	.L26590
	movq	-1112(%rbp), %r9
	movq	8(%r9), %rax
	cmpq	global_trees(%rip), %rax
	je	.L26592
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L33532
.L26590:
	movl	require_constant_value(%rip), %edx
	movl	require_constant_elements(%rip), %ecx
	movq	%r14, %rdi
	movq	%r12, %rsi
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, %r15
	je	.L33533
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L33534
.L26594:
	cmpb	$20, 16(%rdi)
	je	.L33535
.L26615:
	cmpb	$21, 16(%rdi)
	je	.L33536
.L26614:
	cmpq	$0, -1112(%rbp)
	je	.L26682
	movq	-1112(%rbp), %rdx
	cmpb	$25, 16(%rdx)
	je	.L33537
.L26682:
	movq	-1112(%rbp), %rdi
	movq	constructor_elements(%rip), %rdx
	movq	%r15, %rsi
	call	tree_cons
	movq	constructor_type(%rip), %r15
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r15), %eax
	cmpb	$18, %al
	je	.L33538
	cmpb	$20, %al
	je	.L33539
	cmpb	$21, 16(%r15)
	je	.L33540
.L26684:
	movl	$1, %esi
	testl	%esi, %esi
	je	.L26592
	xorl	%r15d, %r15d
	movq	constructor_pending_elts(%rip), %rbx
.L26694:
	xorl	%r14d, %r14d
	testq	%rbx, %rbx
	je	.L26696
.L26730:
	movq	constructor_type(%rip), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$18, %al
	je	.L33541
	subb	$20, %al
	cmpb	$1, %al
	ja	.L26695
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L26696
	call	bit_position
	movq	32(%rbx), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L26716
	movq	32(%rbx), %r8
	movq	40(%rbx), %rdi
	movq	%r8, constructor_unfilled_fields(%rip)
	movq	8(%r8), %rsi
	movq	%r8, %rdx
.L31811:
	xorl	%ecx, %ecx
	call	output_init_element
.L26695:
	testq	%rbx, %rbx
	jne	.L26730
.L26696:
	testl	%r15d, %r15d
	je	.L26592
	testq	%r14, %r14
	je	.L26592
	movq	constructor_type(%rip), %r10
	movzbl	16(%r10), %edx
	leal	-20(%rdx), %r11d
	cmpb	$1, %r11b
	jbe	.L33542
	cmpb	$18, %dl
	jne	.L26694
	movq	%r14, constructor_unfilled_index(%rip)
	jmp	.L26694
.L33542:
	movq	%r14, constructor_unfilled_fields(%rip)
	jmp	.L26694
	.p2align 6,,7
.L26592:
	movslq	constructor_depth(%rip),%rbx
	salq	$4, %rbx
	addq	spelling_base(%rip), %rbx
	movq	%rbx, spelling(%rip)
	jmp	.L26765
.L26716:
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L26718
.L32016:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.L26719
.L31810:
	movq	%rax, %rbx
	jmp	.L26695
.L26719:
	movq	32(%rbx), %r14
	jmp	.L26696
	.p2align 6,,7
.L26718:
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L31810
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L26725
	cmpq	%rbx, 8(%rax)
	je	.L26728
.L26725:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L26696
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
.L32017:
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L26695
	jmp	.L26719
	.p2align 6,,7
.L26728:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L26725
	cmpq	%rbx, 8(%rax)
	je	.L26728
	jmp	.L26725
	.p2align 6,,7
.L33541:
	movq	32(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L26699
	movq	constructor_type(%rip), %r13
	movq	40(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rdx
	movq	8(%r13), %rsi
	jmp	.L31811
.L26699:
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rbx), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L32016
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L31810
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L26708
	cmpq	%rbx, 8(%rax)
	je	.L26711
.L26708:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L26696
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	jmp	.L32017
.L26711:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L26708
	cmpq	%rbx, 8(%rax)
	je	.L26711
	jmp	.L26708
.L33540:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L26684
.L33539:
	movq	constructor_unfilled_fields(%rip), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26684
	testb	$2, 53(%rax)
	je	.L26684
	cmpq	$0, 72(%rax)
	jne	.L26684
.L26690:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26684
	testb	$2, 53(%rax)
	je	.L26684
	cmpq	$0, 72(%rax)
	jne	.L26684
	jmp	.L26690
.L33538:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L26684
.L33537:
	movq	%rdx, %rdi
	call	copy_node
	movq	%rax, -1112(%rbp)
	jmp	.L26682
.L33536:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L26614
	movq	32(%rax), %rdx
	testb	$1, 17(%rdx)
	jne	.L33543
.L26657:
	movq	$0, constructor_elements(%rip)
	jmp	.L26614
.L33543:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L30683
.L26664:
	cmpl	$3, (%rbx)
	je	.L33544
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L26660:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L26664
.L30683:
	movslq	%r12d,%r11
	movq	%r8, %r12
	addq	$16, %r11
	andq	$-16, %r11
	subq	%r11, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30685
.L26678:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33545
	cmpl	$2, %eax
	je	.L33546
.L26672:
	movq	8(%r12), %r9
	movzbl	(%r9), %r10d
	leaq	1(%r9), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L26668
.L26677:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L26677
.L26668:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L26678
.L30685:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L26657
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L26657
.L33546:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L26672
.L33545:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L26668
.L33544:
	addl	$25, %r12d
	jmp	.L26660
.L33535:
	movl	constructor_incremental(%rip), %ecx
	testl	%ecx, %ecx
	je	.L26617
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, -1112(%rbp)
	je	.L26615
	testq	%rax, %rax
	jne	.L26618
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L26625
.L30677:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L33547
.L26645:
	cmpb	$18, 16(%rdi)
	je	.L33548
.L26651:
	movl	$0, constructor_incremental(%rip)
.L26617:
	movq	-1112(%rbp), %rdi
	movq	%r15, %rsi
	call	add_pending_init
	jmp	.L26592
.L33548:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L33549
	movq	global_trees+136(%rip), %rax
.L31809:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L26651
.L33549:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31809
.L33547:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26651
	testb	$2, 53(%rax)
	je	.L26651
	cmpq	$0, 72(%rax)
	jne	.L26651
.L26631:
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26651
	testb	$2, 53(%rax)
	je	.L26651
	cmpq	$0, 72(%rax)
	jne	.L26651
	jmp	.L26631
.L26625:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L26625
	movq	constructor_type(%rip), %rdi
	jmp	.L30677
.L26618:
	movq	-1112(%rbp), %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L26617
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L26638
	cmpb	$18, %al
	jne	.L26617
.L26638:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L26644
.L30680:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L26645
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26651
	testb	$2, 53(%rax)
	je	.L26651
	cmpq	$0, 72(%rax)
	jne	.L26651
.L26650:
	movq	constructor_unfilled_fields(%rip), %r8
	movq	(%r8), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26651
	testb	$2, 53(%rax)
	je	.L26651
	cmpq	$0, 72(%rax)
	jne	.L26651
	jmp	.L26650
.L26644:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L26644
	movq	constructor_type(%rip), %rdi
	jmp	.L30680
.L33534:
	movl	constructor_incremental(%rip), %r14d
	testl	%r14d, %r14d
	je	.L26617
	movq	-1112(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31256
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L26617
	movq	-1112(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L26617
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L26597
	cmpb	$18, %al
	jne	.L26617
.L26597:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L26603
.L30674:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L26645
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26651
	testb	$2, 53(%rax)
	je	.L26651
	cmpq	$0, 72(%rax)
	jne	.L26651
.L26609:
	movq	constructor_unfilled_fields(%rip), %rsi
	movq	(%rsi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26651
	testb	$2, 53(%rax)
	je	.L26651
	cmpq	$0, 72(%rax)
	jne	.L26651
	jmp	.L26609
.L26603:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L26603
	movq	constructor_type(%rip), %rdi
	jmp	.L30674
.L31256:
	movq	constructor_type(%rip), %rdi
	jmp	.L26594
.L33533:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L26592
.L33532:
	call	integer_zerop
	testl	%eax, %eax
	je	.L26590
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L26592
	movq	-1112(%rbp), %r13
	cmpq	$0, (%r13)
	jne	.L26592
	jmp	.L26590
	.p2align 6,,7
.L33531:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L26588
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L26588
.L33530:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L30669
.L26570:
	cmpl	$3, (%rbx)
	je	.L33550
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L26566:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L26570
.L30669:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L30671
.L26584:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33551
	cmpl	$2, %eax
	je	.L33552
.L26578:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r8d
	leaq	1(%rdx), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L26574
.L26583:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L26583
.L26574:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L26584
.L30671:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	jne	.L33553
.L26587:
	movq	global_trees(%rip), %r12
	jmp	.L26588
.L33553:
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L26587
.L33552:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L26578
.L33551:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L26574
	.p2align 6,,7
.L33550:
	addl	$25, %r12d
	jmp	.L26566
.L26559:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L26562
	movq	constructor_type(%rip), %rsi
	movzbl	16(%rsi), %r13d
	subb	$20, %r13b
	cmpb	$1, %r13b
	ja	.L26558
	movq	-1112(%rbp), %r15
	testb	$2, 53(%r15)
	je	.L26558
	cmpb	$25, 16(%r12)
	je	.L26558
.L26562:
	movl	$0, constructor_simple(%rip)
	jmp	.L26558
	.p2align 6,,7
.L33529:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L26558
.L33528:
	movl	require_constant_value(%rip), %edx
	testl	%edx, %edx
	je	.L26556
	movl	flag_isoc99(%rip), %r11d
	testl	%r11d, %r11d
	jne	.L26556
	movl	$1, %r10d
	testl	%r10d, %r10d
	je	.L26556
	movq	32(%r12), %rdi
	movq	32(%rdi), %r9
	movq	104(%r9), %r12
	jmp	.L26556
.L33527:
	cmpb	$29, 16(%r12)
	je	.L33554
.L26459:
	movq	128(%rdx), %rdi
	movq	128(%r14), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L31248
	movq	-1072(%rbp), %rax
	movq	8(%rax), %rdi
.L26458:
	movzbl	16(%rdi), %r13d
	movq	%rdi, %rbx
	cmpl	$23, %r13d
	je	.L26461
	cmpl	$18, %r13d
	je	.L26461
	movq	-1072(%rbp), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$32, %al
	je	.L33555
	movl	optimize(%rip), %r8d
	testl	%r8d, %r8d
	je	.L26524
	cmpb	$34, %al
	je	.L33556
.L26524:
	movzbl	16(%r12), %ecx
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L31255
	cmpb	$115, %cl
	je	.L33557
.L26533:
	movzbl	%cl, %edi 
	movzbl	tree_code_type(%rdi), %eax
	cmpb	$60, %al
	je	.L26538
	cmpb	$49, %al
	je	.L26538
	cmpb	$50, %al
	je	.L26538
	cmpb	$101, %al
	je	.L26538
.L26537:
	cmpl	$10, %r13d
	je	.L33558
	cmpb	$39, %cl
	je	.L33559
.L26546:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L26551
	testb	$32, 17(%rbx)
	je	.L26552
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L26553
	movzwl	60(%rbx), %r8d
	movq	integer_types+40(%rip), %rbx
	movzwl	60(%rbx), %ecx
	andl	$511, %r8d
	andl	$511, %ecx
	cmpl	%ecx, %r8d
	je	.L26553
.L26552:
	movq	integer_types+40(%rip), %rdi
.L32014:
	movq	%r12, %rsi
.L32015:
	call	convert
.L31806:
	movq	%rax, %rbx
.L31797:
	movq	global_trees(%rip), %r8
.L26522:
	movq	%rbx, %r12
	jmp	.L26457
.L26553:
	movq	integer_types+48(%rip), %rdi
	jmp	.L32014
.L26551:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L26554
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L26554
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%rbx)
	je	.L33560
.L26554:
	cmpl	$5, %r13d
	je	.L33561
.L26555:
	movq	%r12, %rbx
	jmp	.L31797
.L33561:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31798:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L26522
.L33560:
	movq	global_trees+200(%rip), %rdi
	jmp	.L32014
.L33559:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L26546
	movq	integer_types+40(%rip), %r15
	movq	40(%rdx), %rdi
	movzwl	60(%r15), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L26546
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L26552
	testb	$32, 17(%rbx)
	jne	.L26553
	jmp	.L26552
.L33558:
	movq	integer_types+40(%rip), %rsi
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%rsi), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L26545
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L26544
.L26545:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L26544:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L32014
.L26538:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L26537
.L33557:
	movq	32(%r12), %rsi
	movq	8(%r12), %r11
	cmpq	%r11, 8(%rsi)
	jne	.L26533
.L26536:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L33562
.L31255:
	movq	32(%r12), %rsi
	jmp	.L26536
.L33562:
	cmpb	$115, %cl
	jne	.L26533
	movq	32(%rsi), %r9
	movq	8(%r12), %r10
	cmpq	%r10, 8(%r9)
	movq	%r9, %rsi
	je	.L26536
	jmp	.L26533
.L33556:
	movl	pedantic(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L26528
	movq	-1072(%rbp), %rbx
	cmpb	$51, 48(%rbx)
	je	.L26528
	cmpq	$0, current_function_decl(%rip)
	je	.L26530
	movzbl	17(%rbx), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L33563
.L26530:
	movq	-1072(%rbp), %rsi
.L26531:
	movq	%rsi, %r12
.L26528:
	movq	8(%r12), %rbx
	jmp	.L26524
.L33563:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L26530
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L26530
	testb	$2, 17(%rax)
	je	.L26530
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L26531
	jmp	.L26530
.L33555:
	movq	104(%rcx), %r12
	jmp	.L26524
.L26461:
	movq	-1072(%rbp), %rax
	xorl	%r15d, %r15d
	movl	%r13d, %r8d
	movzbl	16(%rax), %edx
	cmpb	$116, %dl
	je	.L30665
	cmpb	$115, %dl
	je	.L33564
	movq	-1072(%rbp), %rsi
	movzbl	16(%rsi), %ecx
.L26463:
	movzbl	%cl, %r9d 
	movzbl	tree_code_type(%r9), %eax
	cmpb	$60, %al
	je	.L26469
	cmpb	$49, %al
	je	.L26469
	cmpb	$50, %al
	je	.L26469
	cmpb	$101, %al
	je	.L26469
.L26468:
	cmpl	$23, %r8d
	je	.L33565
	cmpl	$18, %r8d
	jne	.L26555
	movzbl	%cl, %r8d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r8), %eax
	movq	8(%rdi), %r13
	cmpb	$114, %al
	je	.L26474
	cmpb	$100, %al
	je	.L26474
.L26473:
	movzbl	17(%rdi), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %ebx
	shrb	$3, %r10b
	shrb	$4, %bl
	andl	$1, %r10d
	andl	%ebx, %r9d
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rdi), %r10d
	movzbl	16(%rdi), %edi
	movl	%r10d, %esi
	shrb	$5, %sil
	andl	$1, %esi
	sall	$2, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	cmpb	$20, %dil
	je	.L33566
.L26477:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L26476
	testl	%edx, %edx
	jne	.L26476
	testl	%r11d, %r11d
	je	.L26475
.L26476:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%ebx, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L33567
.L26479:
	leal	0(,%rcx,8), %r8d
	leal	(%r11,%r11), %edi
	orl	%r8d, %esi
	orl	%edx, %esi
	orl	%edi, %esi
	movq	%r13, %rdi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L26475:
	cmpb	$41, %cl
	je	.L33568
	cmpb	$47, %cl
	je	.L33569
	xorl	%ebx, %ebx
	testl	%r15d, %r15d
	je	.L33570
.L26518:
	movl	flag_isoc99(%rip), %r15d
	testl	%r15d, %r15d
	jne	.L26519
	testl	%ebx, %ebx
	je	.L26555
.L26519:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L33571
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L32015
.L33571:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L31798
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %ecx
	andb	$1, %cl
	addb	%cl, %cl
	andb	$-4, %r12b
	orb	%cl, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L31797
.L33570:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L26518
.L33569:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r15d
	movq	%r13, %rax
	cmpl	$23, %r15d
	je	.L26483
	cmpl	$18, %r15d
	je	.L26483
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L33572
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L26486
	cmpb	$34, %dl
	je	.L33573
.L26486:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L31253
	cmpb	$115, %dl
	je	.L33574
.L26495:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L26500
	cmpb	$49, %al
	je	.L26500
	cmpb	$50, %al
	je	.L26500
	cmpb	$101, %al
	je	.L26500
.L26499:
	cmpl	$10, %r15d
	je	.L33575
	cmpb	$39, %dl
	je	.L33576
.L26508:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L26513
	testb	$32, 17(%r13)
	je	.L26514
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L26515
	movzwl	60(%r13), %r10d
	movq	integer_types+40(%rip), %r13
	movzwl	60(%r13), %r11d
	andl	$511, %r10d
	andl	$511, %r11d
	cmpl	%r11d, %r10d
	je	.L26515
.L26514:
	movq	integer_types+40(%rip), %rdi
.L31796:
	movq	%rbx, %rsi
	call	convert
.L26484:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31806
.L26515:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31796
.L26513:
	movl	flag_traditional(%rip), %r9d
	testl	%r9d, %r9d
	je	.L26516
	movl	flag_allow_single_precision(%rip), %edi
	testl	%edi, %edi
	jne	.L26516
	movq	global_trees+192(%rip), %rsi
	cmpq	%rsi, 128(%r13)
	je	.L33577
.L26516:
	cmpl	$5, %r15d
	je	.L33578
	movq	%rbx, %rax
	jmp	.L26484
.L33578:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L26484
.L33577:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31796
.L33576:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L26508
	movq	integer_types+40(%rip), %r8
	movq	40(%rdx), %rdi
	movzwl	60(%r8), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L26508
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L26514
	testb	$32, 17(%r13)
	jne	.L26515
	jmp	.L26514
.L33575:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r15d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r15d, %r15d
	jne	.L26507
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L26506
.L26507:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L26506:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31796
.L26500:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L26499
.L33574:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L26495
.L26498:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L33579
.L31253:
	movq	32(%rbx), %rsi
	jmp	.L26498
.L33579:
	cmpb	$115, %dl
	jne	.L26495
	movq	32(%rsi), %rdi
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%rdi)
	movq	%rdi, %rsi
	je	.L26498
	jmp	.L26495
.L33573:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L26490
	cmpb	$51, 48(%rbx)
	je	.L26490
	cmpq	$0, current_function_decl(%rip)
	je	.L26492
	movzbl	17(%rbx), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L33580
.L26492:
	movq	%rbx, %rsi
.L26493:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L26490:
	movq	%rax, %r13
	jmp	.L26486
.L33580:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L26492
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L26492
	testb	$2, 17(%rax)
	je	.L26492
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L26493
	jmp	.L26492
.L33572:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L26486
.L26483:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L26484
.L33568:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L32015
.L33567:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L26479
.L33566:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L26477
.L26474:
	movzbl	17(%r12), %ebx
	movl	$1, %r11d
	movl	%ebx, %edx
	shrb	$3, %bl
	shrb	$4, %dl
	andl	%ebx, %r11d
	andl	$1, %edx
	jmp	.L26473
.L33565:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31806
.L26469:
	movq	-1072(%rbp), %rdx
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L26468
.L33564:
	movq	32(%rax), %r13
	cmpq	%rdi, 8(%r13)
	je	.L30665
	movl	$115, %ecx
	jmp	.L26463
.L30665:
	movq	-1072(%rbp), %r12
	movl	%edx, %ecx
	movq	32(%r12), %rsi
.L26467:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r15d
	cmpb	$116, %cl
	jne	.L33581
	movq	32(%r12), %rsi
	jmp	.L26467
.L33581:
	cmpb	$115, %cl
	jne	.L26463
	movq	32(%rsi), %rsi
	movq	8(%r12), %r10
	cmpq	%r10, 8(%rsi)
	je	.L26467
	jmp	.L26463
.L33554:
	cmpb	$18, 16(%r14)
	jne	.L26459
	movq	8(%r14), %rbx
	cmpb	$6, 16(%rbx)
	jne	.L26459
	jmp	.L31248
	.p2align 6,,7
.L26454:
	movslq	%eax,%rsi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L31795
.L33261:
	movq	constructor_index(%rip), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L26427
	movq	constructor_max_index(%rip), %rdi
	call	integer_all_onesp
	testl	%eax, %eax
	je	.L26426
.L26427:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC168, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r11
	xorl	%r12d, %r12d
	cmpq	%r11, %r8
	movq	%r8, %rbx
	movq	%r11, %r13
	jae	.L30661
.L26434:
	cmpl	$3, (%rbx)
	je	.L33582
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L26430:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L26434
.L30661:
	movslq	%r12d,%rsi
	movq	%r8, %r12
	addq	$16, %rsi
	andq	$-16, %rsi
	subq	%rsi, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30725
.L26448:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33583
	cmpl	$2, %eax
	je	.L33584
.L26442:
	movq	8(%r12), %r10
	movzbl	(%r10), %r8d
	leaq	1(%r10), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L26438
.L26447:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L26447
.L26438:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L26448
	jmp	.L30725
.L33584:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L26442
.L33583:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L26438
.L33582:
	addl	$25, %r12d
	jmp	.L26430
	.p2align 6,,7
.L33260:
	movq	8(%r14), %rcx
	cmpb	$6, 16(%rcx)
	jne	.L26422
	movl	-964(%rbp), %eax
	testl	%eax, %eax
	je	.L26422
	movq	-344(%rbp), %rbx
	movq	%rbx, -1072(%rbp)
	jmp	.L26423
	.p2align 6,,7
.L26421:
	cmpb	$9, %dl
	je	.L33585
	cmpq	$0, constructor_fields(%rip)
	je	.L33586
	cmpq	$0, -1072(%rbp)
	je	.L27074
	movq	-1072(%rbp), %r12
	movq	$0, -1128(%rbp)
	movq	8(%r12), %rbx
	movzbl	16(%rbx), %eax
	cmpb	$23, %al
	je	.L27076
	cmpb	$18, %al
	je	.L33587
.L31270:
	movq	global_trees(%rip), %r8
.L27075:
	cmpb	$-86, 16(%r12)
	je	.L33588
.L27174:
	cmpq	%r8, %r12
	je	.L33589
	testb	$2, 17(%r12)
	jne	.L27177
	movl	$0, constructor_constant(%rip)
.L27176:
	movl	require_constant_value(%rip), %r13d
	testl	%r13d, %r13d
	je	.L27181
	testb	$2, 17(%r12)
	je	.L33590
.L27181:
	movl	require_constant_elements(%rip), %ecx
	testl	%ecx, %ecx
	jne	.L33591
.L27206:
	cmpq	$0, -1128(%rbp)
	je	.L27208
	movq	8, %rax
	cmpq	global_trees(%rip), %rax
	je	.L27074
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L33592
.L27208:
	movl	require_constant_value(%rip), %edx
	movl	require_constant_elements(%rip), %ecx
	movq	%r14, %rdi
	movq	%r12, %rsi
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, %r15
	je	.L33593
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L33594
.L27212:
	cmpb	$20, 16(%rdi)
	je	.L33595
.L27233:
	cmpb	$21, 16(%rdi)
	je	.L33596
.L27232:
	cmpq	$0, -1128(%rbp)
	je	.L27300
	cmpb	$25, 16
	je	.L33597
.L27300:
	movq	-1128(%rbp), %rdi
	movq	constructor_elements(%rip), %rdx
	movq	%r15, %rsi
	call	tree_cons
	movq	constructor_type(%rip), %r15
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r15), %eax
	cmpb	$18, %al
	je	.L33598
	cmpb	$20, %al
	je	.L33599
	cmpb	$21, 16(%r15)
	je	.L33600
.L27302:
	movl	$1, %r14d
	testl	%r14d, %r14d
	je	.L27074
	xorl	%r15d, %r15d
	movq	constructor_pending_elts(%rip), %rbx
.L27312:
	xorl	%r14d, %r14d
	testq	%rbx, %rbx
	je	.L27314
.L27348:
	movq	constructor_type(%rip), %r12
	movzbl	16(%r12), %eax
	cmpb	$18, %al
	je	.L33601
	subb	$20, %al
	cmpb	$1, %al
	ja	.L27313
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L27314
	call	bit_position
	movq	32(%rbx), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L27334
	movq	32(%rbx), %r8
	movq	40(%rbx), %rdi
	movq	%r8, constructor_unfilled_fields(%rip)
	movq	8(%r8), %rsi
	movq	%r8, %rdx
.L31843:
	xorl	%ecx, %ecx
	call	output_init_element
.L27313:
	testq	%rbx, %rbx
	jne	.L27348
.L27314:
	testl	%r15d, %r15d
	je	.L27074
	testq	%r14, %r14
	je	.L27074
	movq	constructor_type(%rip), %r10
	movzbl	16(%r10), %edx
	leal	-20(%rdx), %esi
	cmpb	$1, %sil
	jbe	.L33602
	cmpb	$18, %dl
	jne	.L27312
	movq	%r14, constructor_unfilled_index(%rip)
	jmp	.L27312
.L33602:
	movq	%r14, constructor_unfilled_fields(%rip)
	jmp	.L27312
	.p2align 6,,7
.L27074:
	movq	$0, constructor_fields(%rip)
	jmp	.L26098
.L27334:
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L27336
.L32024:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.L27337
.L31842:
	movq	%rax, %rbx
	jmp	.L27313
.L27337:
	movq	32(%rbx), %r14
	jmp	.L27314
	.p2align 6,,7
.L27336:
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L31842
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L27343
	cmpq	%rbx, 8(%rax)
	je	.L27346
.L27343:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L27314
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
.L32025:
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L27313
	jmp	.L27337
	.p2align 6,,7
.L27346:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L27343
	cmpq	%rbx, 8(%rax)
	je	.L27346
	jmp	.L27343
	.p2align 6,,7
.L33601:
	movq	32(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L27317
	movq	constructor_type(%rip), %r13
	movq	40(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rdx
	movq	8(%r13), %rsi
	jmp	.L31843
.L27317:
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rbx), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L32024
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L31842
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L27326
	cmpq	%rbx, 8(%rax)
	je	.L27329
.L27326:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L27314
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	jmp	.L32025
.L27329:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L27326
	cmpq	%rbx, 8(%rax)
	je	.L27329
	jmp	.L27326
.L33600:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L27302
.L33599:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L27302
	testb	$2, 53(%rax)
	je	.L27302
	cmpq	$0, 72(%rax)
	jne	.L27302
.L27308:
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L27302
	testb	$2, 53(%rax)
	je	.L27302
	cmpq	$0, 72(%rax)
	jne	.L27302
	jmp	.L27308
.L33598:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L27302
.L33597:
	xorl	%edi, %edi
	call	copy_node
	movq	%rax, -1128(%rbp)
	jmp	.L27300
.L33596:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L27232
	movq	32(%rax), %rsi
	testb	$1, 17(%rsi)
	jne	.L33603
.L27275:
	movq	$0, constructor_elements(%rip)
	jmp	.L27232
.L33603:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r10
	xorl	%r12d, %r12d
	cmpq	%r10, %r8
	movq	%r8, %rbx
	movq	%r10, %r13
	jae	.L30745
.L27282:
	cmpl	$3, (%rbx)
	je	.L33604
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L27278:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L27282
.L30745:
	movslq	%r12d,%rdx
	movq	%r8, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30747
.L27296:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33605
	cmpl	$2, %eax
	je	.L33606
.L27290:
	movq	8(%r12), %rdi
	movzbl	(%rdi), %r11d
	leaq	1(%rdi), %rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	je	.L27286
.L27295:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L27295
.L27286:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L27296
.L30747:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L27275
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L27275
.L33606:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L27290
.L33605:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L27286
.L33604:
	addl	$25, %r12d
	jmp	.L27278
.L33595:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L27235
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, -1128(%rbp)
	je	.L27233
	testq	%rax, %rax
	jne	.L27236
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L27243
.L30739:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L33607
.L27263:
	cmpb	$18, 16(%rdi)
	je	.L33608
.L27269:
	movl	$0, constructor_incremental(%rip)
.L27235:
	xorl	%edi, %edi
	movq	%r15, %rsi
	call	add_pending_init
	jmp	.L27074
.L33608:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L33609
	movq	global_trees+136(%rip), %rax
.L31841:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L27269
.L33609:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31841
.L33607:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L27269
	testb	$2, 53(%rax)
	je	.L27269
	cmpq	$0, 72(%rax)
	jne	.L27269
.L27249:
	movq	constructor_unfilled_fields(%rip), %r9
	movq	(%r9), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L27269
	testb	$2, 53(%rax)
	je	.L27269
	cmpq	$0, 72(%rax)
	jne	.L27269
	jmp	.L27249
.L27243:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L27243
	movq	constructor_type(%rip), %rdi
	jmp	.L30739
.L27236:
	xorl	%edi, %edi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L27235
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L27256
	cmpb	$18, %al
	jne	.L27235
.L27256:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L27262
.L30742:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L27263
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L27269
	testb	$2, 53(%rax)
	je	.L27269
	cmpq	$0, 72(%rax)
	jne	.L27269
.L27268:
	movq	constructor_unfilled_fields(%rip), %r8
	movq	(%r8), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L27269
	testb	$2, 53(%rax)
	je	.L27269
	cmpq	$0, 72(%rax)
	jne	.L27269
	jmp	.L27268
.L27262:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L27262
	movq	constructor_type(%rip), %rdi
	jmp	.L30742
.L33594:
	movl	constructor_incremental(%rip), %r14d
	testl	%r14d, %r14d
	je	.L27235
	movq	constructor_unfilled_index(%rip), %rsi
	xorl	%edi, %edi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31278
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L27235
	movq	constructor_unfilled_index(%rip), %rsi
	xorl	%edi, %edi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L27235
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L27215
	cmpb	$18, %al
	jne	.L27235
.L27215:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L27221
.L30736:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L27263
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L27269
	testb	$2, 53(%rax)
	je	.L27269
	cmpq	$0, 72(%rax)
	jne	.L27269
.L27227:
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L27269
	testb	$2, 53(%rax)
	je	.L27269
	cmpq	$0, 72(%rax)
	jne	.L27269
	jmp	.L27227
.L27221:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L27221
	movq	constructor_type(%rip), %rdi
	jmp	.L30736
.L31278:
	movq	constructor_type(%rip), %rdi
	jmp	.L27212
.L33593:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L27074
.L33592:
	call	integer_zerop
	testl	%eax, %eax
	je	.L27208
	movq	constructor_type(%rip), %rbx
	cmpb	$18, 16(%rbx)
	je	.L27074
	cmpq	$0, 0
	jne	.L27074
	jmp	.L27208
.L33591:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L27206
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L27206
.L33590:
	movl	$.LC146, %esi
	xorl	%eax, %eax
	movl	$.LC42, %edi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rsi
	xorl	%r12d, %r12d
	cmpq	%rsi, %r8
	movq	%r8, %rbx
	movq	%rsi, %r13
	jae	.L30731
.L27188:
	cmpl	$3, (%rbx)
	je	.L33610
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L27184:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L27188
.L30731:
	movslq	%r12d,%r15
	movq	%r8, %r12
	addq	$16, %r15
	andq	$-16, %r15
	subq	%r15, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L30733
.L27202:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33611
	cmpl	$2, %eax
	je	.L33612
.L27196:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r10d
	leaq	1(%rdx), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L27192
.L27201:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L27201
.L27192:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L27202
.L30733:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	jne	.L33613
.L27205:
	movq	global_trees(%rip), %r12
	jmp	.L27206
.L33613:
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L27205
.L33612:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L27196
.L33611:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L27192
.L33610:
	addl	$25, %r12d
	jmp	.L27184
.L27177:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L27180
	movq	constructor_type(%rip), %r8
	movzbl	16(%r8), %r9d
	subb	$20, %r9b
	cmpb	$1, %r9b
	ja	.L27176
	testb	$2, 53
	je	.L27176
	cmpb	$25, 16(%r12)
	je	.L27176
.L27180:
	movl	$0, constructor_simple(%rip)
	jmp	.L27176
.L33589:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L27176
.L33588:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L27174
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L27174
	movl	$1, %edx
	testl	%edx, %edx
	je	.L27174
	movq	32(%r12), %rdi
	movq	32(%rdi), %r11
	movq	104(%r11), %r12
	jmp	.L27174
.L33587:
	cmpb	$29, 16(%r12)
	je	.L33614
.L27077:
	movq	-1072(%rbp), %rax
	movq	128(%r14), %rsi
	movq	8(%rax), %r13
	movq	128(%r13), %rdi
	call	comptypes
	testl	%eax, %eax
	jne	.L31270
.L27076:
	movq	-1072(%rbp), %rcx
	movq	8(%rcx), %rbx
	movzbl	16(%rbx), %r13d
	cmpl	$23, %r13d
	je	.L27079
	cmpl	$18, %r13d
	je	.L27079
	movq	-1072(%rbp), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$32, %al
	je	.L33615
	movl	optimize(%rip), %r10d
	testl	%r10d, %r10d
	je	.L27142
	cmpb	$34, %al
	je	.L33616
.L27142:
	movzbl	16(%r12), %ecx
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L31277
	cmpb	$115, %cl
	je	.L33617
.L27151:
	movzbl	%cl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L27156
	cmpb	$49, %al
	je	.L27156
	cmpb	$50, %al
	je	.L27156
	cmpb	$101, %al
	je	.L27156
.L27155:
	cmpl	$10, %r13d
	je	.L33618
	cmpb	$39, %cl
	je	.L33619
.L27164:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L27169
	testb	$32, 17(%rbx)
	je	.L27170
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L27171
	movzwl	60(%rbx), %r10d
	movq	integer_types+40(%rip), %rbx
	movzwl	60(%rbx), %ecx
	andl	$511, %r10d
	andl	$511, %ecx
	cmpl	%ecx, %r10d
	je	.L27171
.L27170:
	movq	integer_types+40(%rip), %rdi
.L32022:
	movq	%r12, %rsi
.L32023:
	call	convert
.L31838:
	movq	%rax, %rbx
.L31829:
	movq	global_trees(%rip), %r8
.L27140:
	movq	%rbx, %r12
	jmp	.L27075
.L27171:
	movq	integer_types+48(%rip), %rdi
	jmp	.L32022
.L27169:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L27172
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L27172
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%rbx)
	je	.L33620
.L27172:
	cmpl	$5, %r13d
	je	.L33621
.L27173:
	movq	%r12, %rbx
	jmp	.L31829
.L33621:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31830:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L27140
.L33620:
	movq	global_trees+200(%rip), %rdi
	jmp	.L32022
.L33619:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L27164
	movq	integer_types+40(%rip), %r15
	movq	40(%rdx), %rdi
	movzwl	60(%r15), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L27164
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L27170
	testb	$32, 17(%rbx)
	jne	.L27171
	jmp	.L27170
.L33618:
	movq	integer_types+40(%rip), %rsi
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%rsi), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L27163
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L27162
.L27163:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L27162:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L32022
.L27156:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L27155
.L33617:
	movq	32(%r12), %rsi
	movq	8(%r12), %r11
	cmpq	%r11, 8(%rsi)
	jne	.L27151
.L27154:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L33622
.L31277:
	movq	32(%r12), %rsi
	jmp	.L27154
.L33622:
	cmpb	$115, %cl
	jne	.L27151
	movq	32(%rsi), %r9
	movq	8(%r12), %rdi
	cmpq	%rdi, 8(%r9)
	movq	%r9, %rsi
	je	.L27154
	jmp	.L27151
.L33616:
	movl	pedantic(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L27146
	movq	-1072(%rbp), %rbx
	cmpb	$51, 48(%rbx)
	je	.L27146
	cmpq	$0, current_function_decl(%rip)
	je	.L27148
	movzbl	17(%rbx), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L33623
.L27148:
	movq	-1072(%rbp), %rsi
.L27149:
	movq	%rsi, %r12
.L27146:
	movq	8(%r12), %rbx
	jmp	.L27142
.L33623:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L27148
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L27148
	testb	$2, 17(%rax)
	je	.L27148
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L27149
	jmp	.L27148
.L33615:
	movq	104(%rcx), %r12
	jmp	.L27142
.L27079:
	movq	-1072(%rbp), %rcx
	xorl	%r15d, %r15d
	movl	%r13d, %edi
	movzbl	16(%rcx), %edx
	cmpb	$116, %dl
	je	.L30727
	cmpb	$115, %dl
	je	.L33624
	movq	-1072(%rbp), %rdx
	movzbl	16(%rdx), %ecx
.L27081:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L27087
	cmpb	$49, %al
	je	.L27087
	cmpb	$50, %al
	je	.L27087
	cmpb	$101, %al
	je	.L27087
.L27086:
	cmpl	$23, %edi
	je	.L33625
	cmpl	$18, %edi
	jne	.L27173
	movzbl	%cl, %edi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rdi), %eax
	movq	8(%rbx), %r13
	cmpb	$114, %al
	je	.L27092
	cmpb	$100, %al
	je	.L27092
.L27091:
	movzbl	17(%rbx), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %edi
	shrb	$3, %r10b
	shrb	$4, %dil
	andl	$1, %r10d
	andl	%edi, %r9d
	movzbl	16(%rbx), %edi
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rbx), %r10d
	movl	%r10d, %esi
	shrb	$5, %sil
	andl	$1, %esi
	sall	$2, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	cmpb	$20, %dil
	je	.L33626
.L27095:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L27094
	testl	%edx, %edx
	jne	.L27094
	testl	%r11d, %r11d
	je	.L27093
.L27094:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%ebx, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L33627
.L27097:
	leal	0(,%rcx,8), %r10d
	leal	(%r11,%r11), %r8d
	movq	%r13, %rdi
	orl	%r10d, %esi
	orl	%edx, %esi
	orl	%r8d, %esi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L27093:
	cmpb	$41, %cl
	je	.L33628
	cmpb	$47, %cl
	je	.L33629
	xorl	%ebx, %ebx
	testl	%r15d, %r15d
	je	.L33630
.L27136:
	movl	flag_isoc99(%rip), %r15d
	testl	%r15d, %r15d
	jne	.L27137
	testl	%ebx, %ebx
	je	.L27173
.L27137:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L33631
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L32023
.L33631:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L31830
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %ecx
	andb	$1, %cl
	addb	%cl, %cl
	andb	$-4, %r12b
	orb	%cl, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L31829
.L33630:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L27136
.L33629:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r15d
	movq	%r13, %rax
	cmpl	$23, %r15d
	je	.L27101
	cmpl	$18, %r15d
	je	.L27101
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L33632
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L27104
	cmpb	$34, %dl
	je	.L33633
.L27104:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L31275
	cmpb	$115, %dl
	je	.L33634
.L27113:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L27118
	cmpb	$49, %al
	je	.L27118
	cmpb	$50, %al
	je	.L27118
	cmpb	$101, %al
	je	.L27118
.L27117:
	cmpl	$10, %r15d
	je	.L33635
	cmpb	$39, %dl
	je	.L33636
.L27126:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L27131
	testb	$32, 17(%r13)
	je	.L27132
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L27133
	movzwl	60(%r13), %edi
	movq	integer_types+40(%rip), %r13
	movzwl	60(%r13), %r11d
	andl	$511, %edi
	andl	$511, %r11d
	cmpl	%r11d, %edi
	je	.L27133
.L27132:
	movq	integer_types+40(%rip), %rdi
.L31828:
	movq	%rbx, %rsi
	call	convert
.L27102:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31838
.L27133:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31828
.L27131:
	movl	flag_traditional(%rip), %r9d
	testl	%r9d, %r9d
	je	.L27134
	movl	flag_allow_single_precision(%rip), %r8d
	testl	%r8d, %r8d
	jne	.L27134
	movq	global_trees+192(%rip), %rsi
	cmpq	%rsi, 128(%r13)
	je	.L33637
.L27134:
	cmpl	$5, %r15d
	je	.L33638
	movq	%rbx, %rax
	jmp	.L27102
.L33638:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L27102
.L33637:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31828
.L33636:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L27126
	movq	integer_types+40(%rip), %r10
	movq	40(%rdx), %rdi
	movzwl	60(%r10), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L27126
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L27132
	testb	$32, 17(%r13)
	jne	.L27133
	jmp	.L27132
.L33635:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r15d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r15d, %r15d
	jne	.L27125
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L27124
.L27125:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L27124:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31828
.L27118:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L27117
.L33634:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rdi, 8(%rsi)
	jne	.L27113
.L27116:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L33639
.L31275:
	movq	32(%rbx), %rsi
	jmp	.L27116
.L33639:
	cmpb	$115, %dl
	jne	.L27113
	movq	32(%rsi), %r8
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%r8)
	movq	%r8, %rsi
	je	.L27116
	jmp	.L27113
.L33633:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L27108
	cmpb	$51, 48(%rbx)
	je	.L27108
	cmpq	$0, current_function_decl(%rip)
	je	.L27110
	movzbl	17(%rbx), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L33640
.L27110:
	movq	%rbx, %rsi
.L27111:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L27108:
	movq	%rax, %r13
	jmp	.L27104
.L33640:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L27110
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L27110
	testb	$2, 17(%rax)
	je	.L27110
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L27111
	jmp	.L27110
.L33632:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L27104
.L27101:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L27102
.L33628:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L32023
.L33627:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L27097
.L33626:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L27095
.L27092:
	movzbl	17(%r12), %r9d
	movl	$1, %r11d
	movl	%r9d, %edx
	shrb	$3, %r9b
	shrb	$4, %dl
	andl	%r9d, %r11d
	andl	$1, %edx
	jmp	.L27091
.L33625:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31838
.L27087:
	movq	-1072(%rbp), %r10
	movl	24(%r10), %eax
	movl	%eax, 24(%r12)
	jmp	.L27086
.L33624:
	movq	32(%rcx), %r8
	cmpq	%rbx, 8(%r8)
	je	.L30727
	movl	$115, %ecx
	jmp	.L27081
.L30727:
	movq	-1072(%rbp), %r12
	movl	%edx, %ecx
	movq	32(%r12), %rsi
.L27085:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r15d
	cmpb	$116, %cl
	jne	.L33641
	movq	32(%r12), %rsi
	jmp	.L27085
.L33641:
	cmpb	$115, %cl
	jne	.L27081
	movq	32(%rsi), %rsi
	movq	8(%r12), %r11
	cmpq	%r11, 8(%rsi)
	je	.L27085
	jmp	.L27081
.L33614:
	cmpb	$18, %dl
	jne	.L27077
	movq	8(%r14), %r9
	cmpb	$6, 16(%r9)
	jne	.L27077
	jmp	.L31270
.L33586:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC170, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r14
	xorl	%r12d, %r12d
	cmpq	%r14, %r8
	movq	%r8, %rbx
	movq	%r14, %r13
	jae	.L30723
.L27055:
	cmpl	$3, (%rbx)
	je	.L33642
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L27051:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L27055
.L30723:
	movslq	%r12d,%rdx
	movq	%r8, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30725
.L27069:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33643
	cmpl	$2, %eax
	je	.L33644
.L27063:
	movq	8(%r12), %rdi
	movzbl	(%rdi), %r10d
	leaq	1(%rdi), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L27059
.L27068:
	movzbl	(%rcx), %r15d
	incq	%rbx
	incq	%rcx
	testb	%r15b, %r15b
	movb	%r15b, (%rbx)
	jne	.L27068
.L27059:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L27069
	jmp	.L30725
.L33644:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L27063
.L33643:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L27059
.L33642:
	addl	$25, %r12d
	jmp	.L27051
.L33585:
	movq	8(%r12), %r9
	movq	constructor_max_index(%rip), %rdi
	movq	constructor_index(%rip), %rsi
	movq	128(%r9), %rdx
	movq	%rdx, -408(%rbp)
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L33645
	cmpq	$0, -1072(%rbp)
	je	.L26765
	movq	-1072(%rbp), %r12
	movq	constructor_index(%rip), %r15
	movq	8(%r12), %rdi
	movzbl	16(%rdi), %eax
	movq	%rdi, %rdx
	cmpb	$23, %al
	je	.L26767
	cmpb	$18, %al
	je	.L33646
.L31259:
	movq	global_trees(%rip), %r8
.L26766:
	cmpb	$-86, 16(%r12)
	je	.L33647
.L26865:
	cmpq	%r8, %r12
	je	.L33648
	testb	$2, 17(%r12)
	jne	.L26868
	movl	$0, constructor_constant(%rip)
.L26867:
	movl	require_constant_value(%rip), %r14d
	testl	%r14d, %r14d
	je	.L26872
	testb	$2, 17(%r12)
	je	.L33649
.L26872:
	movl	require_constant_elements(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L33650
.L26897:
	testq	%r15, %r15
	je	.L26899
	movq	8(%r15), %rax
	cmpq	global_trees(%rip), %rax
	je	.L26765
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L33651
.L26899:
	movq	-408(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%r12, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -1120(%rbp)
	je	.L33652
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L33653
.L26903:
	cmpb	$20, 16(%rdi)
	je	.L33654
.L26924:
	cmpb	$21, 16(%rdi)
	je	.L33655
.L26923:
	testq	%r15, %r15
	je	.L26991
	cmpb	$25, 16(%r15)
	je	.L33656
.L26991:
	movq	-1120(%rbp), %rsi
	movq	constructor_elements(%rip), %rdx
	movq	%r15, %rdi
	call	tree_cons
	movq	constructor_type(%rip), %r15
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r15), %eax
	cmpb	$18, %al
	je	.L33657
	cmpb	$20, %al
	je	.L33658
	cmpb	$21, 16(%r15)
	je	.L33659
.L26993:
	movl	$1, %r9d
	testl	%r9d, %r9d
	je	.L26765
	xorl	%r15d, %r15d
	movq	constructor_pending_elts(%rip), %rbx
.L27003:
	xorl	%r14d, %r14d
	testq	%rbx, %rbx
	je	.L27005
.L27039:
	movq	constructor_type(%rip), %r13
	movzbl	16(%r13), %eax
	cmpb	$18, %al
	je	.L33660
	subb	$20, %al
	cmpb	$1, %al
	ja	.L27004
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L27005
	call	bit_position
	movq	32(%rbx), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L27025
	movq	32(%rbx), %r8
	movq	40(%rbx), %rdi
	movq	%r8, constructor_unfilled_fields(%rip)
	movq	8(%r8), %rsi
	movq	%r8, %rdx
.L31827:
	xorl	%ecx, %ecx
	call	output_init_element
.L27004:
	testq	%rbx, %rbx
	jne	.L27039
.L27005:
	testl	%r15d, %r15d
	je	.L26765
	testq	%r14, %r14
	je	.L26765
	movq	constructor_type(%rip), %r11
	movzbl	16(%r11), %edx
	leal	-20(%rdx), %esi
	cmpb	$1, %sil
	jbe	.L33661
	cmpb	$18, %dl
	jne	.L27003
	movq	%r14, constructor_unfilled_index(%rip)
	jmp	.L27003
.L33661:
	movq	%r14, constructor_unfilled_fields(%rip)
	jmp	.L27003
.L27025:
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L27027
.L32020:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.L27028
.L31826:
	movq	%rax, %rbx
	jmp	.L27004
.L27028:
	movq	32(%rbx), %r14
	jmp	.L27005
.L27027:
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L31826
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L27034
	cmpq	%rbx, 8(%rax)
	je	.L27037
.L27034:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L27005
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
.L32021:
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L27004
	jmp	.L27028
.L27037:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L27034
	cmpq	%rbx, 8(%rax)
	je	.L27037
	jmp	.L27034
.L33660:
	movq	32(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L27008
	movq	constructor_type(%rip), %rcx
	movq	40(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rdx
	movq	8(%rcx), %rsi
	jmp	.L31827
.L27008:
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rbx), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L32020
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L31826
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L27017
	cmpq	%rbx, 8(%rax)
	je	.L27020
.L27017:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L27005
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	jmp	.L32021
.L27020:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L27017
	cmpq	%rbx, 8(%rax)
	je	.L27020
	jmp	.L27017
.L33659:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L26993
.L33658:
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26993
	testb	$2, 53(%rax)
	je	.L26993
	cmpq	$0, 72(%rax)
	jne	.L26993
.L26999:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26993
	testb	$2, 53(%rax)
	je	.L26993
	cmpq	$0, 72(%rax)
	jne	.L26993
	jmp	.L26999
.L33657:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L26993
.L33656:
	movq	%r15, %rdi
	call	copy_node
	movq	%rax, %r15
	jmp	.L26991
.L33655:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L26923
	movq	32(%rax), %r8
	testb	$1, 17(%r8)
	jne	.L33662
.L26966:
	movq	$0, constructor_elements(%rip)
	jmp	.L26923
.L33662:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L30714
.L26973:
	cmpl	$3, (%rbx)
	je	.L33663
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L26969:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L26973
.L30714:
	movslq	%r12d,%rdx
	movq	%r8, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30716
.L26987:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33664
	cmpl	$2, %eax
	je	.L33665
.L26981:
	movq	8(%r12), %r10
	movzbl	(%r10), %r11d
	leaq	1(%r10), %rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	je	.L26977
.L26986:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L26986
.L26977:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L26987
.L30716:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L26966
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L26966
.L33665:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L26981
.L33664:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L26977
.L33663:
	addl	$25, %r12d
	jmp	.L26969
.L33654:
	movl	constructor_incremental(%rip), %r13d
	testl	%r13d, %r13d
	je	.L26926
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, %r15
	je	.L26924
	testq	%rax, %rax
	jne	.L26927
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L26934
.L30708:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L33666
.L26954:
	cmpb	$18, 16(%rdi)
	je	.L33667
.L26960:
	movl	$0, constructor_incremental(%rip)
.L26926:
	movq	-1120(%rbp), %rsi
	movq	%r15, %rdi
	call	add_pending_init
	jmp	.L26765
.L33667:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L33668
	movq	global_trees+136(%rip), %rax
.L31825:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L26960
.L33668:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31825
.L33666:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26960
	testb	$2, 53(%rax)
	je	.L26960
	cmpq	$0, 72(%rax)
	jne	.L26960
.L26940:
	movq	constructor_unfilled_fields(%rip), %rsi
	movq	(%rsi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26960
	testb	$2, 53(%rax)
	je	.L26960
	cmpq	$0, 72(%rax)
	jne	.L26960
	jmp	.L26940
.L26934:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L26934
	movq	constructor_type(%rip), %rdi
	jmp	.L30708
.L26927:
	movq	%r15, %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r14
	call	bit_position
	movq	%r14, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L26926
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L26947
	cmpb	$18, %al
	jne	.L26926
.L26947:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L26953
.L30711:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L26954
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26960
	testb	$2, 53(%rax)
	je	.L26960
	cmpq	$0, 72(%rax)
	jne	.L26960
.L26959:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26960
	testb	$2, 53(%rax)
	je	.L26960
	cmpq	$0, 72(%rax)
	jne	.L26960
	jmp	.L26959
.L26953:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L26953
	movq	constructor_type(%rip), %rdi
	jmp	.L30711
.L33653:
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L26926
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31267
	movl	constructor_incremental(%rip), %edi
	testl	%edi, %edi
	je	.L26926
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L26926
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L26906
	cmpb	$18, %al
	jne	.L26926
.L26906:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L26912
.L30705:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L26954
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26960
	testb	$2, 53(%rax)
	je	.L26960
	cmpq	$0, 72(%rax)
	jne	.L26960
.L26918:
	movq	constructor_unfilled_fields(%rip), %r9
	movq	(%r9), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26960
	testb	$2, 53(%rax)
	je	.L26960
	cmpq	$0, 72(%rax)
	jne	.L26960
	jmp	.L26918
.L26912:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L26912
	movq	constructor_type(%rip), %rdi
	jmp	.L30705
.L31267:
	movq	constructor_type(%rip), %rdi
	jmp	.L26903
.L33652:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L26765
.L33651:
	call	integer_zerop
	testl	%eax, %eax
	je	.L26899
	movq	constructor_type(%rip), %r10
	cmpb	$18, 16(%r10)
	je	.L26765
	cmpq	$0, (%r15)
	jne	.L26765
	jmp	.L26899
.L33650:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L26897
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L26897
.L33649:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L30700
.L26879:
	cmpl	$3, (%rbx)
	je	.L33669
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L26875:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L26879
.L30700:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30702
.L26893:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33670
	cmpl	$2, %eax
	je	.L33671
.L26887:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r8d
	leaq	1(%rdx), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L26883
.L26892:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L26892
.L26883:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L26893
.L30702:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L33672
.L26896:
	movq	global_trees(%rip), %r12
	jmp	.L26897
.L33672:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L26896
.L33671:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L26887
.L33670:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L26883
.L33669:
	addl	$25, %r12d
	jmp	.L26875
.L26868:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L26871
	movq	constructor_type(%rip), %rsi
	movzbl	16(%rsi), %r13d
	subb	$20, %r13b
	cmpb	$1, %r13b
	ja	.L26867
	testb	$2, 53(%r15)
	je	.L26867
	cmpb	$25, 16(%r12)
	je	.L26867
.L26871:
	movl	$0, constructor_simple(%rip)
	jmp	.L26867
.L33648:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L26867
.L33647:
	movl	require_constant_value(%rip), %edx
	testl	%edx, %edx
	je	.L26865
	movl	flag_isoc99(%rip), %r11d
	testl	%r11d, %r11d
	jne	.L26865
	movl	$1, %r10d
	testl	%r10d, %r10d
	je	.L26865
	movq	32(%r12), %rdi
	movq	32(%rdi), %r9
	movq	104(%r9), %r12
	jmp	.L26865
.L33646:
	cmpb	$29, 16(%r12)
	je	.L33673
.L26768:
	movq	-408(%rbp), %rcx
	movq	128(%rdx), %rdi
	movq	128(%rcx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L31259
	movq	-1072(%rbp), %r8
	movq	8(%r8), %rdi
.L26767:
	movzbl	16(%rdi), %r13d
	movq	%rdi, %rbx
	cmpl	$23, %r13d
	je	.L26770
	cmpl	$18, %r13d
	je	.L26770
	movq	-1072(%rbp), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$32, %al
	je	.L33674
	movl	optimize(%rip), %r8d
	testl	%r8d, %r8d
	je	.L26833
	cmpb	$34, %al
	je	.L33675
.L26833:
	movzbl	16(%r12), %ecx
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L31266
	cmpb	$115, %cl
	je	.L33676
.L26842:
	movzbl	%cl, %edi 
	movzbl	tree_code_type(%rdi), %eax
	cmpb	$60, %al
	je	.L26847
	cmpb	$49, %al
	je	.L26847
	cmpb	$50, %al
	je	.L26847
	cmpb	$101, %al
	je	.L26847
.L26846:
	cmpl	$10, %r13d
	je	.L33677
	cmpb	$39, %cl
	je	.L33678
.L26855:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L26860
	testb	$32, 17(%rbx)
	je	.L26861
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L26862
	movzwl	60(%rbx), %r8d
	movq	integer_types+40(%rip), %rbx
	movzwl	60(%rbx), %ecx
	andl	$511, %r8d
	andl	$511, %ecx
	cmpl	%ecx, %r8d
	je	.L26862
.L26861:
	movq	integer_types+40(%rip), %rdi
.L32018:
	movq	%r12, %rsi
.L32019:
	call	convert
.L31822:
	movq	%rax, %rbx
.L31813:
	movq	global_trees(%rip), %r8
.L26831:
	movq	%rbx, %r12
	jmp	.L26766
.L26862:
	movq	integer_types+48(%rip), %rdi
	jmp	.L32018
.L26860:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L26863
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L26863
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%rbx)
	je	.L33679
.L26863:
	cmpl	$5, %r13d
	je	.L33680
.L26864:
	movq	%r12, %rbx
	jmp	.L31813
.L33680:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31814:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L26831
.L33679:
	movq	global_trees+200(%rip), %rdi
	jmp	.L32018
.L33678:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L26855
	movq	integer_types+40(%rip), %r14
	movq	40(%rdx), %rdi
	movzwl	60(%r14), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L26855
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L26861
	testb	$32, 17(%rbx)
	jne	.L26862
	jmp	.L26861
.L33677:
	movq	integer_types+40(%rip), %rsi
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%rsi), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L26854
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L26853
.L26854:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L26853:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L32018
.L26847:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L26846
.L33676:
	movq	32(%r12), %rsi
	movq	8(%r12), %r11
	cmpq	%r11, 8(%rsi)
	jne	.L26842
.L26845:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L33681
.L31266:
	movq	32(%r12), %rsi
	jmp	.L26845
.L33681:
	cmpb	$115, %cl
	jne	.L26842
	movq	32(%rsi), %r9
	movq	8(%r12), %r10
	cmpq	%r10, 8(%r9)
	movq	%r9, %rsi
	je	.L26845
	jmp	.L26842
.L33675:
	movl	pedantic(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L26837
	movq	-1072(%rbp), %rbx
	cmpb	$51, 48(%rbx)
	je	.L26837
	cmpq	$0, current_function_decl(%rip)
	je	.L26839
	movzbl	17(%rbx), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L33682
.L26839:
	movq	-1072(%rbp), %rsi
.L26840:
	movq	%rsi, %r12
.L26837:
	movq	8(%r12), %rbx
	jmp	.L26833
.L33682:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L26839
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L26839
	testb	$2, 17(%rax)
	je	.L26839
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L26840
	jmp	.L26839
.L33674:
	movq	104(%rcx), %r12
	jmp	.L26833
.L26770:
	movq	-1072(%rbp), %rcx
	xorl	%r14d, %r14d
	movl	%r13d, %r8d
	movzbl	16(%rcx), %edx
	cmpb	$116, %dl
	je	.L30696
	cmpb	$115, %dl
	je	.L33683
	movq	-1072(%rbp), %rbx
	movzbl	16(%rbx), %ecx
.L26772:
	movzbl	%cl, %edx 
	movzbl	tree_code_type(%rdx), %eax
	cmpb	$60, %al
	je	.L26778
	cmpb	$49, %al
	je	.L26778
	cmpb	$50, %al
	je	.L26778
	cmpb	$101, %al
	je	.L26778
.L26777:
	cmpl	$23, %r8d
	je	.L33684
	cmpl	$18, %r8d
	jne	.L26864
	movzbl	%cl, %esi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rsi), %eax
	movq	8(%rdi), %r13
	cmpb	$114, %al
	je	.L26783
	cmpb	$100, %al
	je	.L26783
.L26782:
	movzbl	17(%rdi), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %esi
	shrb	$3, %r10b
	shrb	$4, %sil
	andl	$1, %r10d
	andl	%esi, %r9d
	xorl	%esi, %esi
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rdi), %r10d
	movzbl	16(%rdi), %edi
	movl	%r10d, %ebx
	shrb	$5, %bl
	andl	$1, %ebx
	sall	$2, %ebx
	orl	%ebx, %r9d
	cmpb	$20, %dil
	je	.L33685
.L26786:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L26785
	testl	%edx, %edx
	jne	.L26785
	testl	%r11d, %r11d
	je	.L26784
.L26785:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%ebx, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L33686
.L26788:
	leal	0(,%rcx,8), %r8d
	leal	(%r11,%r11), %edi
	orl	%r8d, %esi
	orl	%edx, %esi
	orl	%edi, %esi
	movq	%r13, %rdi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L26784:
	cmpb	$41, %cl
	je	.L33687
	cmpb	$47, %cl
	je	.L33688
	xorl	%ebx, %ebx
	testl	%r14d, %r14d
	je	.L33689
.L26827:
	movl	flag_isoc99(%rip), %r14d
	testl	%r14d, %r14d
	jne	.L26828
	testl	%ebx, %ebx
	je	.L26864
.L26828:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L33690
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L32019
.L33690:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L31814
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %ecx
	andb	$1, %cl
	addb	%cl, %cl
	andb	$-4, %r12b
	orb	%cl, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L31813
.L33689:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L26827
.L33688:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L26792
	cmpl	$18, %r14d
	je	.L26792
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L33691
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L26795
	cmpb	$34, %dl
	je	.L33692
.L26795:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L31264
	cmpb	$115, %dl
	je	.L33693
.L26804:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L26809
	cmpb	$49, %al
	je	.L26809
	cmpb	$50, %al
	je	.L26809
	cmpb	$101, %al
	je	.L26809
.L26808:
	cmpl	$10, %r14d
	je	.L33694
	cmpb	$39, %dl
	je	.L33695
.L26817:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L26822
	testb	$32, 17(%r13)
	je	.L26823
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L26824
	movzwl	60(%r13), %r10d
	movq	integer_types+40(%rip), %r13
	movzwl	60(%r13), %r11d
	andl	$511, %r10d
	andl	$511, %r11d
	cmpl	%r11d, %r10d
	je	.L26824
.L26823:
	movq	integer_types+40(%rip), %rdi
.L31812:
	movq	%rbx, %rsi
	call	convert
.L26793:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31822
.L26824:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31812
.L26822:
	movl	flag_traditional(%rip), %r9d
	testl	%r9d, %r9d
	je	.L26825
	movl	flag_allow_single_precision(%rip), %edi
	testl	%edi, %edi
	jne	.L26825
	movq	global_trees+192(%rip), %rsi
	cmpq	%rsi, 128(%r13)
	je	.L33696
.L26825:
	cmpl	$5, %r14d
	je	.L33697
	movq	%rbx, %rax
	jmp	.L26793
.L33697:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L26793
.L33696:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31812
.L33695:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L26817
	movq	integer_types+40(%rip), %r8
	movq	40(%rdx), %rdi
	movzwl	60(%r8), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L26817
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L26823
	testb	$32, 17(%r13)
	jne	.L26824
	jmp	.L26823
.L33694:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L26816
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L26815
.L26816:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L26815:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31812
.L26809:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L26808
.L33693:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L26804
.L26807:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L33698
.L31264:
	movq	32(%rbx), %rsi
	jmp	.L26807
.L33698:
	cmpb	$115, %dl
	jne	.L26804
	movq	32(%rsi), %rdi
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%rdi)
	movq	%rdi, %rsi
	je	.L26807
	jmp	.L26804
.L33692:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L26799
	cmpb	$51, 48(%rbx)
	je	.L26799
	cmpq	$0, current_function_decl(%rip)
	je	.L26801
	movzbl	17(%rbx), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L33699
.L26801:
	movq	%rbx, %rsi
.L26802:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L26799:
	movq	%rax, %r13
	jmp	.L26795
.L33699:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L26801
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L26801
	testb	$2, 17(%rax)
	je	.L26801
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L26802
	jmp	.L26801
.L33691:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L26795
.L26792:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L26793
.L33687:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L32019
.L33686:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L26788
.L33685:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L26786
.L26783:
	movzbl	17(%r12), %r8d
	movl	$1, %r11d
	movl	%r8d, %edx
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	%r8d, %r11d
	andl	$1, %edx
	jmp	.L26782
.L33684:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31822
.L26778:
	movq	-1072(%rbp), %r9
	movl	24(%r9), %eax
	movl	%eax, 24(%r12)
	jmp	.L26777
.L33683:
	movq	32(%rcx), %r11
	cmpq	%rdi, 8(%r11)
	je	.L30696
	movl	$115, %ecx
	jmp	.L26772
.L30696:
	movq	-1072(%rbp), %r12
	movl	%edx, %ecx
	movq	32(%r12), %rsi
.L26776:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r14d
	cmpb	$116, %cl
	jne	.L33700
	movq	32(%r12), %rsi
	jmp	.L26776
.L33700:
	cmpb	$115, %cl
	jne	.L26772
	movq	32(%rsi), %rsi
	movq	8(%r12), %r10
	cmpq	%r10, 8(%rsi)
	je	.L26776
	jmp	.L26772
.L33673:
	movq	-408(%rbp), %rbx
	cmpb	$18, 16(%rbx)
	jne	.L26768
	movq	8(%rbx), %r14
	cmpb	$6, 16(%r14)
	jne	.L26768
	jmp	.L31259
.L33645:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC169, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L30692
.L26747:
	cmpl	$3, (%rbx)
	je	.L33701
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L26743:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L26747
.L30692:
	movslq	%r12d,%rdi
	movq	%r8, %r12
	addq	$16, %rdi
	andq	$-16, %rdi
	subq	%rdi, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30725
.L26761:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33702
	cmpl	$2, %eax
	je	.L33703
.L26755:
	movq	8(%r12), %rsi
	movzbl	(%rsi), %r15d
	leaq	1(%rsi), %rcx
	testb	%r15b, %r15b
	movb	%r15b, (%rbx)
	je	.L26751
.L26760:
	movzbl	(%rcx), %r13d
	incq	%rbx
	incq	%rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	jne	.L26760
.L26751:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L26761
	jmp	.L30725
.L33703:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L26755
.L33702:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L26751
.L33701:
	addl	$25, %r12d
	jmp	.L26743
	.p2align 6,,7
.L33259:
	movq	constructor_fields(%rip), %rax
	testq	%rax, %rax
	je	.L33704
	movq	8(%rax), %rax
	cmpq	global_trees(%rip), %rax
	movq	%rax, -1096(%rbp)
	je	.L26125
	movq	128(%rax), %rbx
	movq	%rbx, -1096(%rbp)
.L26125:
	movl	warn_traditional(%rip), %r14d
	movq	-1096(%rbp), %r12
	testl	%r14d, %r14d
	movzbl	16(%r12), %ebx
	je	.L26126
	movl	in_system_header(%rip), %ecx
	testl	%ecx, %ecx
	jne	.L26126
	movl	constructor_designated(%rip), %edi
	testl	%edi, %edi
	jne	.L26126
	cmpq	$0, -1072(%rbp)
	je	.L26127
	movq	-1072(%rbp), %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L33705
.L26126:
	cmpq	$0, -1072(%rbp)
	je	.L26132
	cmpl	$18, %ebx
	je	.L33706
.L26128:
	cmpq	$0, -1072(%rbp)
	je	.L26132
	movl	constructor_no_implicit(%rip), %eax
	testl	%eax, %eax
	jne	.L26129
	movq	-1072(%rbp), %rsi
	cmpq	global_trees(%rip), %rsi
	je	.L26129
	movq	8(%rsi), %r13
	movq	-1096(%rbp), %rsi
	cmpq	%rsi, 128(%r13)
	je	.L26129
	cmpl	$20, %ebx
	je	.L26425
	cmpl	$18, %ebx
	je	.L26425
	cmpl	$21, %ebx
	je	.L26425
.L26129:
	cmpq	$0, -1072(%rbp)
	je	.L26132
	movq	constructor_fields(%rip), %r8
	movl	$.LC159, %r12d
	movq	72(%r8), %rax
	testq	%rax, %rax
	je	.L26134
	movq	32(%rax), %r12
.L26134:
	movq	spelling(%rip), %rcx
	movq	spelling_base(%rip), %rdi
	movl	spelling_size(%rip), %eax
	movq	%rcx, %r9
	subq	%rdi, %r9
	movq	%r9, %rbx
	shrq	$4, %rbx
	cmpl	%eax, %ebx
	jl	.L26135
	addl	$10, %eax
	testq	%rdi, %rdi
	movl	%eax, spelling_size(%rip)
	jne	.L26136
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L31778:
	movslq	%ebx,%rcx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rcx
	addq	spelling_base(%rip), %rcx
	movq	%rcx, spelling(%rip)
.L26135:
	movq	%r12, 8(%rcx)
	movl	$2, (%rcx)
	movq	constructor_fields(%rip), %r15
	movq	-1072(%rbp), %r12
	addq	$16, %rcx
	movq	%rcx, spelling(%rip)
	movq	8(%r12), %rdi
	movzbl	16(%rdi), %eax
	movq	%rdi, %rdx
	cmpb	$23, %al
	je	.L26140
	cmpb	$18, %al
	je	.L33707
.L31237:
	movq	global_trees(%rip), %r8
.L26139:
	cmpb	$-86, 16(%r12)
	je	.L33708
.L26238:
	cmpq	%r8, %r12
	je	.L33709
	testb	$2, 17(%r12)
	jne	.L26241
	movl	$0, constructor_constant(%rip)
.L26240:
	movl	require_constant_value(%rip), %r13d
	testl	%r13d, %r13d
	je	.L26245
	testb	$2, 17(%r12)
	je	.L33710
.L26245:
	movl	require_constant_elements(%rip), %ecx
	testl	%ecx, %ecx
	jne	.L33711
.L26270:
	testq	%r15, %r15
	je	.L26272
	movq	8(%r15), %rax
	cmpq	global_trees(%rip), %rax
	je	.L26274
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L33712
.L26272:
	movq	-1096(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%r12, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -1104(%rbp)
	je	.L33713
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L33714
.L26276:
	cmpb	$20, 16(%rdi)
	je	.L33715
.L26297:
	cmpb	$21, 16(%rdi)
	je	.L33716
.L26296:
	testq	%r15, %r15
	je	.L26364
	cmpb	$25, 16(%r15)
	je	.L33717
.L26364:
	movq	-1104(%rbp), %rsi
	movq	constructor_elements(%rip), %rdx
	movq	%r15, %rdi
	call	tree_cons
	movq	constructor_type(%rip), %r15
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r15), %eax
	cmpb	$18, %al
	je	.L33718
	cmpb	$20, %al
	je	.L33719
	cmpb	$21, 16(%r15)
	je	.L33720
.L26366:
	movl	$1, %r12d
	testl	%r12d, %r12d
	je	.L26274
	xorl	%r15d, %r15d
	movq	constructor_pending_elts(%rip), %rbx
.L26376:
	xorl	%r14d, %r14d
	testq	%rbx, %rbx
	je	.L26378
.L26412:
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$18, %al
	je	.L33721
	subb	$20, %al
	cmpb	$1, %al
	ja	.L26377
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L26378
	call	bit_position
	movq	32(%rbx), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L26398
	movq	32(%rbx), %r11
	movq	40(%rbx), %rdi
	movq	%r11, constructor_unfilled_fields(%rip)
	movq	8(%r11), %rsi
	movq	%r11, %rdx
.L31794:
	xorl	%ecx, %ecx
	call	output_init_element
.L26377:
	testq	%rbx, %rbx
	jne	.L26412
.L26378:
	testl	%r15d, %r15d
	je	.L26274
	testq	%r14, %r14
	je	.L26274
	movq	constructor_type(%rip), %r8
	movzbl	16(%r8), %edx
	leal	-20(%rdx), %esi
	cmpb	$1, %sil
	jbe	.L33722
	cmpb	$18, %dl
	jne	.L26376
	movq	%r14, constructor_unfilled_index(%rip)
	jmp	.L26376
.L33722:
	movq	%r14, constructor_unfilled_fields(%rip)
	jmp	.L26376
.L26274:
	movslq	constructor_depth(%rip),%r14
	salq	$4, %r14
	addq	spelling_base(%rip), %r14
	movq	%r14, spelling(%rip)
	jmp	.L27074
.L26398:
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L26400
.L32012:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.L26401
.L31793:
	movq	%rax, %rbx
	jmp	.L26377
.L26401:
	movq	32(%rbx), %r14
	jmp	.L26378
.L26400:
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L31793
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L26407
	cmpq	%rbx, 8(%rax)
	je	.L26410
.L26407:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L26378
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
.L32013:
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L26377
	jmp	.L26401
.L26410:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L26407
	cmpq	%rbx, 8(%rax)
	je	.L26410
	jmp	.L26407
.L33721:
	movq	32(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L26381
	movq	constructor_type(%rip), %r13
	movq	40(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rdx
	movq	8(%r13), %rsi
	jmp	.L31794
.L26381:
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rbx), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L32012
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L31793
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L26390
	cmpq	%rbx, 8(%rax)
	je	.L26393
.L26390:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L26378
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	jmp	.L32013
.L26393:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L26390
	cmpq	%rbx, 8(%rax)
	je	.L26393
	jmp	.L26390
.L33720:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L26366
.L33719:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26366
	testb	$2, 53(%rax)
	je	.L26366
	cmpq	$0, 72(%rax)
	jne	.L26366
.L26372:
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26366
	testb	$2, 53(%rax)
	je	.L26366
	cmpq	$0, 72(%rax)
	jne	.L26366
	jmp	.L26372
.L33718:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L26366
.L33717:
	movq	%r15, %rdi
	call	copy_node
	movq	%rax, %r15
	jmp	.L26364
.L33716:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L26296
	movq	32(%rax), %r14
	testb	$1, 17(%r14)
	jne	.L33723
.L26339:
	movq	$0, constructor_elements(%rip)
	jmp	.L26296
.L33723:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdx
	xorl	%r12d, %r12d
	cmpq	%rdx, %r8
	movq	%r8, %rbx
	movq	%rdx, %r13
	jae	.L30652
.L26346:
	cmpl	$3, (%rbx)
	je	.L33724
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L26342:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L26346
.L30652:
	movslq	%r12d,%r11
	movq	%r8, %r12
	addq	$16, %r11
	andq	$-16, %r11
	subq	%r11, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30654
.L26360:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33725
	cmpl	$2, %eax
	je	.L33726
.L26354:
	movq	8(%r12), %r10
	movzbl	(%r10), %r8d
	leaq	1(%r10), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L26350
.L26359:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L26359
.L26350:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L26360
.L30654:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L26339
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L26339
.L33726:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L26354
.L33725:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L26350
.L33724:
	addl	$25, %r12d
	jmp	.L26342
.L33715:
	movl	constructor_incremental(%rip), %r9d
	testl	%r9d, %r9d
	je	.L26299
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, %r15
	je	.L26297
	testq	%rax, %rax
	jne	.L26300
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L26307
.L30646:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L33727
.L26327:
	cmpb	$18, 16(%rdi)
	je	.L33728
.L26333:
	movl	$0, constructor_incremental(%rip)
.L26299:
	movq	-1104(%rbp), %rsi
	movq	%r15, %rdi
	call	add_pending_init
	jmp	.L26274
.L33728:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L33729
	movq	global_trees+136(%rip), %rax
.L31792:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L26333
.L33729:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31792
.L33727:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26333
	testb	$2, 53(%rax)
	je	.L26333
	cmpq	$0, 72(%rax)
	jne	.L26333
.L26313:
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26333
	testb	$2, 53(%rax)
	je	.L26333
	cmpq	$0, 72(%rax)
	jne	.L26333
	jmp	.L26313
.L26307:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L26307
	movq	constructor_type(%rip), %rdi
	jmp	.L30646
.L26300:
	movq	%r15, %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L26299
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L26320
	cmpb	$18, %al
	jne	.L26299
.L26320:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L26326
.L30649:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L26327
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26333
	testb	$2, 53(%rax)
	je	.L26333
	cmpq	$0, 72(%rax)
	jne	.L26333
.L26332:
	movq	constructor_unfilled_fields(%rip), %rsi
	movq	(%rsi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26333
	testb	$2, 53(%rax)
	je	.L26333
	cmpq	$0, 72(%rax)
	jne	.L26333
	jmp	.L26332
.L26326:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L26326
	movq	constructor_type(%rip), %rdi
	jmp	.L30649
.L33714:
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L26299
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31245
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L26299
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L26299
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L26279
	cmpb	$18, %al
	jne	.L26299
.L26279:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L26285
.L30643:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L26327
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26333
	testb	$2, 53(%rax)
	je	.L26333
	cmpq	$0, 72(%rax)
	jne	.L26333
.L26291:
	movq	constructor_unfilled_fields(%rip), %r10
	movq	(%r10), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26333
	testb	$2, 53(%rax)
	je	.L26333
	cmpq	$0, 72(%rax)
	jne	.L26333
	jmp	.L26291
.L26285:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L26285
	movq	constructor_type(%rip), %rdi
	jmp	.L30643
.L31245:
	movq	constructor_type(%rip), %rdi
	jmp	.L26276
.L33713:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L26274
.L33712:
	call	integer_zerop
	testl	%eax, %eax
	je	.L26272
	movq	constructor_type(%rip), %rbx
	cmpb	$18, 16(%rbx)
	je	.L26274
	cmpq	$0, (%r15)
	jne	.L26274
	jmp	.L26272
.L33711:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L26270
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L26270
.L33710:
	movl	$.LC146, %esi
	xorl	%eax, %eax
	movl	$.LC42, %edi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rsi
	xorl	%r12d, %r12d
	cmpq	%rsi, %r8
	movq	%r8, %rbx
	movq	%rsi, %r13
	jae	.L30638
.L26252:
	cmpl	$3, (%rbx)
	je	.L33730
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L26248:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L26252
.L30638:
	movslq	%r12d,%r14
	movq	%r8, %r12
	addq	$16, %r14
	andq	$-16, %r14
	subq	%r14, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30640
.L26266:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33731
	cmpl	$2, %eax
	je	.L33732
.L26260:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r8d
	leaq	1(%rdx), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L26256
.L26265:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L26265
.L26256:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L26266
.L30640:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L33733
.L26269:
	movq	global_trees(%rip), %r12
	jmp	.L26270
.L33733:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L26269
.L33732:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L26260
.L33731:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L26256
.L33730:
	addl	$25, %r12d
	jmp	.L26248
.L26241:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L26244
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %r9d
	subb	$20, %r9b
	cmpb	$1, %r9b
	ja	.L26240
	testb	$2, 53(%r15)
	je	.L26240
	cmpb	$25, 16(%r12)
	je	.L26240
.L26244:
	movl	$0, constructor_simple(%rip)
	jmp	.L26240
.L33709:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L26240
.L33708:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L26238
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L26238
	movl	$1, %edx
	testl	%edx, %edx
	je	.L26238
	movq	32(%r12), %r10
	movq	32(%r10), %r11
	movq	104(%r11), %r12
	jmp	.L26238
.L33707:
	cmpb	$29, 16(%r12)
	je	.L33734
.L26141:
	movq	-1096(%rbp), %rcx
	movq	128(%rdx), %rdi
	movq	128(%rcx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L31237
	movq	-1072(%rbp), %r11
	movq	8(%r11), %rdi
.L26140:
	movzbl	16(%rdi), %r13d
	movq	%rdi, %rbx
	cmpl	$23, %r13d
	je	.L26143
	cmpl	$18, %r13d
	je	.L26143
	movq	-1072(%rbp), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$32, %al
	je	.L33735
	movl	optimize(%rip), %r8d
	testl	%r8d, %r8d
	je	.L26206
	cmpb	$34, %al
	je	.L33736
.L26206:
	movzbl	16(%r12), %ecx
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L31244
	cmpb	$115, %cl
	je	.L33737
.L26215:
	movzbl	%cl, %edi 
	movzbl	tree_code_type(%rdi), %eax
	cmpb	$60, %al
	je	.L26220
	cmpb	$49, %al
	je	.L26220
	cmpb	$50, %al
	je	.L26220
	cmpb	$101, %al
	je	.L26220
.L26219:
	cmpl	$10, %r13d
	je	.L33738
	cmpb	$39, %cl
	je	.L33739
.L26228:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L26233
	testb	$32, 17(%rbx)
	je	.L26234
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L26235
	movzwl	60(%rbx), %r8d
	movq	integer_types+40(%rip), %rbx
	movzwl	60(%rbx), %ecx
	andl	$511, %r8d
	andl	$511, %ecx
	cmpl	%ecx, %r8d
	je	.L26235
.L26234:
	movq	integer_types+40(%rip), %rdi
.L32010:
	movq	%r12, %rsi
.L32011:
	call	convert
.L31789:
	movq	%rax, %rbx
.L31780:
	movq	global_trees(%rip), %r8
.L26204:
	movq	%rbx, %r12
	jmp	.L26139
.L26235:
	movq	integer_types+48(%rip), %rdi
	jmp	.L32010
.L26233:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L26236
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L26236
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%rbx)
	je	.L33740
.L26236:
	cmpl	$5, %r13d
	je	.L33741
.L26237:
	movq	%r12, %rbx
	jmp	.L31780
.L33741:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31781:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L26204
.L33740:
	movq	global_trees+200(%rip), %rdi
	jmp	.L32010
.L33739:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L26228
	movq	integer_types+40(%rip), %r14
	movq	40(%rdx), %rdi
	movzwl	60(%r14), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L26228
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L26234
	testb	$32, 17(%rbx)
	jne	.L26235
	jmp	.L26234
.L33738:
	movq	integer_types+40(%rip), %rsi
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%rsi), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L26227
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L26226
.L26227:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L26226:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L32010
.L26220:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L26219
.L33737:
	movq	32(%r12), %rsi
	movq	8(%r12), %r11
	cmpq	%r11, 8(%rsi)
	jne	.L26215
.L26218:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L33742
.L31244:
	movq	32(%r12), %rsi
	jmp	.L26218
.L33742:
	cmpb	$115, %cl
	jne	.L26215
	movq	32(%rsi), %r9
	movq	8(%r12), %r10
	cmpq	%r10, 8(%r9)
	movq	%r9, %rsi
	je	.L26218
	jmp	.L26215
.L33736:
	movl	pedantic(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L26210
	movq	-1072(%rbp), %rbx
	cmpb	$51, 48(%rbx)
	je	.L26210
	cmpq	$0, current_function_decl(%rip)
	je	.L26212
	movzbl	17(%rbx), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L33743
.L26212:
	movq	-1072(%rbp), %rsi
.L26213:
	movq	%rsi, %r12
.L26210:
	movq	8(%r12), %rbx
	jmp	.L26206
.L33743:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L26212
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L26212
	testb	$2, 17(%rax)
	je	.L26212
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L26213
	jmp	.L26212
.L33735:
	movq	104(%rcx), %r12
	jmp	.L26206
.L26143:
	movq	-1072(%rbp), %rax
	xorl	%r14d, %r14d
	movl	%r13d, %r8d
	movzbl	16(%rax), %edx
	cmpb	$116, %dl
	je	.L30634
	cmpb	$115, %dl
	je	.L33744
	movq	-1072(%rbp), %rax
	movzbl	16(%rax), %ecx
.L26145:
	movzbl	%cl, %r13d 
	movzbl	tree_code_type(%r13), %eax
	cmpb	$60, %al
	je	.L26151
	cmpb	$49, %al
	je	.L26151
	cmpb	$50, %al
	je	.L26151
	cmpb	$101, %al
	je	.L26151
.L26150:
	cmpl	$23, %r8d
	je	.L33745
	cmpl	$18, %r8d
	jne	.L26237
	movzbl	%cl, %r8d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r8), %eax
	movq	8(%rdi), %r13
	cmpb	$114, %al
	je	.L26156
	cmpb	$100, %al
	je	.L26156
.L26155:
	movzbl	17(%rdi), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %ebx
	shrb	$3, %r10b
	shrb	$4, %bl
	andl	$1, %r10d
	andl	%ebx, %r9d
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rdi), %r10d
	movzbl	16(%rdi), %edi
	movl	%r10d, %esi
	shrb	$5, %sil
	andl	$1, %esi
	sall	$2, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	cmpb	$20, %dil
	je	.L33746
.L26159:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L26158
	testl	%edx, %edx
	jne	.L26158
	testl	%r11d, %r11d
	je	.L26157
.L26158:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%ebx, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L33747
.L26161:
	leal	0(,%rcx,8), %r8d
	leal	(%r11,%r11), %edi
	orl	%r8d, %esi
	orl	%edx, %esi
	orl	%edi, %esi
	movq	%r13, %rdi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L26157:
	cmpb	$41, %cl
	je	.L33748
	cmpb	$47, %cl
	je	.L33749
	xorl	%ebx, %ebx
	testl	%r14d, %r14d
	je	.L33750
.L26200:
	movl	flag_isoc99(%rip), %r14d
	testl	%r14d, %r14d
	jne	.L26201
	testl	%ebx, %ebx
	je	.L26237
.L26201:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L33751
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L32011
.L33751:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L31781
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %ecx
	andb	$1, %cl
	addb	%cl, %cl
	andb	$-4, %r12b
	orb	%cl, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L31780
.L33750:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L26200
.L33749:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L26165
	cmpl	$18, %r14d
	je	.L26165
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L33752
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L26168
	cmpb	$34, %dl
	je	.L33753
.L26168:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L31242
	cmpb	$115, %dl
	je	.L33754
.L26177:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L26182
	cmpb	$49, %al
	je	.L26182
	cmpb	$50, %al
	je	.L26182
	cmpb	$101, %al
	je	.L26182
.L26181:
	cmpl	$10, %r14d
	je	.L33755
	cmpb	$39, %dl
	je	.L33756
.L26190:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L26195
	testb	$32, 17(%r13)
	je	.L26196
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L26197
	movzwl	60(%r13), %r10d
	movq	integer_types+40(%rip), %r13
	movzwl	60(%r13), %r11d
	andl	$511, %r10d
	andl	$511, %r11d
	cmpl	%r11d, %r10d
	je	.L26197
.L26196:
	movq	integer_types+40(%rip), %rdi
.L31779:
	movq	%rbx, %rsi
	call	convert
.L26166:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31789
.L26197:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31779
.L26195:
	movl	flag_traditional(%rip), %r9d
	testl	%r9d, %r9d
	je	.L26198
	movl	flag_allow_single_precision(%rip), %edi
	testl	%edi, %edi
	jne	.L26198
	movq	global_trees+192(%rip), %rsi
	cmpq	%rsi, 128(%r13)
	je	.L33757
.L26198:
	cmpl	$5, %r14d
	je	.L33758
	movq	%rbx, %rax
	jmp	.L26166
.L33758:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L26166
.L33757:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31779
.L33756:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L26190
	movq	integer_types+40(%rip), %r8
	movq	40(%rdx), %rdi
	movzwl	60(%r8), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L26190
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L26196
	testb	$32, 17(%r13)
	jne	.L26197
	jmp	.L26196
.L33755:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L26189
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L26188
.L26189:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L26188:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31779
.L26182:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L26181
.L33754:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L26177
.L26180:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L33759
.L31242:
	movq	32(%rbx), %rsi
	jmp	.L26180
.L33759:
	cmpb	$115, %dl
	jne	.L26177
	movq	32(%rsi), %rdi
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%rdi)
	movq	%rdi, %rsi
	je	.L26180
	jmp	.L26177
.L33753:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L26172
	cmpb	$51, 48(%rbx)
	je	.L26172
	cmpq	$0, current_function_decl(%rip)
	je	.L26174
	movzbl	17(%rbx), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L33760
.L26174:
	movq	%rbx, %rsi
.L26175:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L26172:
	movq	%rax, %r13
	jmp	.L26168
.L33760:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L26174
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L26174
	testb	$2, 17(%rax)
	je	.L26174
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L26175
	jmp	.L26174
.L33752:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L26168
.L26165:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L26166
.L33748:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L32011
.L33747:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L26161
.L33746:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L26159
.L26156:
	movzbl	17(%r12), %ebx
	movl	$1, %r11d
	movl	%ebx, %edx
	shrb	$3, %bl
	shrb	$4, %dl
	andl	%ebx, %r11d
	andl	$1, %edx
	jmp	.L26155
.L33745:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31789
.L26151:
	movq	-1072(%rbp), %r9
	movl	24(%r9), %eax
	movl	%eax, 24(%r12)
	jmp	.L26150
.L33744:
	movq	32(%rax), %r10
	cmpq	%rdi, 8(%r10)
	je	.L30634
	movl	$115, %ecx
	jmp	.L26145
.L30634:
	movq	-1072(%rbp), %r12
	movl	%edx, %ecx
	movq	32(%r12), %rsi
.L26149:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r14d
	cmpb	$116, %cl
	jne	.L33761
	movq	32(%r12), %rsi
	jmp	.L26149
.L33761:
	cmpb	$115, %cl
	jne	.L26145
	movq	32(%rsi), %rsi
	movq	8(%r12), %rdx
	cmpq	%rdx, 8(%rsi)
	je	.L26149
	jmp	.L26145
.L33734:
	movq	-1096(%rbp), %rcx
	cmpb	$18, 16(%rcx)
	jne	.L26141
	movq	8(%rcx), %rbx
	cmpb	$6, 16(%rbx)
	jne	.L26141
	jmp	.L31237
.L26136:
	movslq	%eax,%rsi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L31778
.L26132:
	movq	constructor_fields(%rip), %r9
	movq	40(%r9), %rdx
	movq	(%r9), %r10
	movq	%rdx, constructor_bit_index(%rip)
	movq	%r10, constructor_unfilled_fields(%rip)
	jmp	.L27074
.L33706:
	movq	-1096(%rbp), %r10
	movq	8(%r10), %r11
	cmpb	$6, 16(%r11)
	jne	.L26128
	movl	-964(%rbp), %edx
	testl	%edx, %edx
	je	.L26128
	movq	-344(%rbp), %r15
	movq	%r15, -1072(%rbp)
	jmp	.L26129
.L33705:
	movq	-1072(%rbp), %rdi
	call	real_zerop
	testl	%eax, %eax
	jne	.L26126
.L26127:
	movl	$.LC167, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L26126
.L33704:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC166, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L30630
.L26107:
	cmpl	$3, (%rbx)
	je	.L33762
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L26103:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L26107
.L30630:
	movslq	%r12d,%rsi
	movq	%r8, %r12
	addq	$16, %rsi
	andq	$-16, %rsi
	subq	%rsi, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30725
.L26121:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33763
	cmpl	$2, %eax
	je	.L33764
.L26115:
	movq	8(%r12), %r8
	movzbl	(%r8), %r13d
	leaq	1(%r8), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L26111
.L26120:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L26120
.L26111:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L26121
	jmp	.L30725
.L33764:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L26115
.L33763:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L26111
.L33762:
	addl	$25, %r12d
	jmp	.L26103
	.p2align 6,,7
.L33258:
	movq	constructor_fields(%rip), %rsi
	testq	%rsi, %rsi
	movq	%rsi, %rdi
	je	.L33765
	movq	8(%rsi), %rbx
	movq	global_trees(%rip), %rax
	movq	%rbx, -1080(%rbp)
	movq	%rax, %rcx
	cmpq	%rax, -1080(%rbp)
	je	.L25769
	movq	-1080(%rbp), %r14
	movq	128(%r14), %rdx
	movq	%rdx, -1080(%rbp)
.L25769:
	movq	-1080(%rbp), %rax
	movzbl	16(%rax), %edx
	cmpl	$18, %edx
	je	.L33766
.L25770:
	cmpq	$0, -1072(%rbp)
	je	.L25799
	cmpl	$18, %edx
	je	.L33767
.L25795:
	cmpq	$0, -1072(%rbp)
	je	.L25799
	movl	constructor_no_implicit(%rip), %eax
	testl	%eax, %eax
	jne	.L25796
	cmpq	%rcx, -1072(%rbp)
	je	.L25796
	movq	-1072(%rbp), %r8
	movq	-1080(%rbp), %r14
	movq	8(%r8), %r9
	cmpq	%r14, 128(%r9)
	je	.L25796
	cmpl	$20, %edx
	je	.L26425
	cmpl	$18, %edx
	je	.L26425
	cmpl	$21, %edx
	je	.L26425
.L25796:
	cmpq	$0, -1072(%rbp)
	je	.L25799
	movq	72(%rdi), %rax
	movl	$.LC159, %r12d
	testq	%rax, %rax
	je	.L25801
	movq	32(%rax), %r12
.L25801:
	movq	spelling(%rip), %rcx
	movq	spelling_base(%rip), %rdi
	movl	spelling_size(%rip), %eax
	movq	%rcx, %rsi
	subq	%rdi, %rsi
	movq	%rsi, %rbx
	shrq	$4, %rbx
	cmpl	%eax, %ebx
	jl	.L25802
	addl	$10, %eax
	testq	%rdi, %rdi
	movl	%eax, spelling_size(%rip)
	jne	.L25803
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L31761:
	movslq	%ebx,%rcx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rcx
	addq	spelling_base(%rip), %rcx
	movq	%rcx, spelling(%rip)
.L25802:
	movq	%r12, 8(%rcx)
	movl	$2, (%rcx)
	movq	constructor_fields(%rip), %r15
	movq	-1072(%rbp), %r12
	addq	$16, %rcx
	movq	%rcx, spelling(%rip)
	movq	8(%r12), %rdi
	movzbl	16(%rdi), %eax
	movq	%rdi, %rdx
	cmpb	$23, %al
	je	.L25807
	cmpb	$18, %al
	je	.L33768
.L31226:
	movq	global_trees(%rip), %r8
.L25806:
	cmpb	$-86, 16(%r12)
	je	.L33769
.L25905:
	cmpq	%r8, %r12
	je	.L33770
	testb	$2, 17(%r12)
	jne	.L25908
	movl	$0, constructor_constant(%rip)
.L25907:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L25912
	testb	$2, 17(%r12)
	je	.L33771
.L25912:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L33772
.L25937:
	testq	%r15, %r15
	je	.L25939
	movq	8(%r15), %rax
	cmpq	global_trees(%rip), %rax
	je	.L25941
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L33773
.L25939:
	movq	-1080(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%r12, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -1088(%rbp)
	je	.L33774
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L33775
.L25943:
	cmpb	$20, 16(%rdi)
	je	.L33776
.L25964:
	cmpb	$21, 16(%rdi)
	je	.L33777
.L25963:
	testq	%r15, %r15
	je	.L26031
	cmpb	$25, 16(%r15)
	je	.L33778
.L26031:
	movq	-1088(%rbp), %rsi
	movq	constructor_elements(%rip), %rdx
	movq	%r15, %rdi
	call	tree_cons
	movq	constructor_type(%rip), %r15
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r15), %eax
	cmpb	$18, %al
	je	.L33779
	cmpb	$20, %al
	je	.L33780
	cmpb	$21, 16(%r15)
	je	.L33781
.L26033:
	movl	$1, %r14d
	testl	%r14d, %r14d
	je	.L25941
	xorl	%r15d, %r15d
	movq	constructor_pending_elts(%rip), %rbx
.L26043:
	xorl	%r14d, %r14d
	testq	%rbx, %rbx
	je	.L26045
.L26079:
	movq	constructor_type(%rip), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$18, %al
	je	.L33782
	subb	$20, %al
	cmpb	$1, %al
	ja	.L26044
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L26045
	call	bit_position
	movq	32(%rbx), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L26065
	movq	32(%rbx), %r8
	movq	40(%rbx), %rdi
	movq	%r8, constructor_unfilled_fields(%rip)
	movq	8(%r8), %rsi
	movq	%r8, %rdx
.L31777:
	xorl	%ecx, %ecx
	call	output_init_element
.L26044:
	testq	%rbx, %rbx
	jne	.L26079
.L26045:
	testl	%r15d, %r15d
	je	.L25941
	testq	%r14, %r14
	je	.L25941
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %edx
	leal	-20(%rdx), %r9d
	cmpb	$1, %r9b
	jbe	.L33783
	cmpb	$18, %dl
	jne	.L26043
	movq	%r14, constructor_unfilled_index(%rip)
	jmp	.L26043
.L33783:
	movq	%r14, constructor_unfilled_fields(%rip)
	jmp	.L26043
.L25941:
	movslq	constructor_depth(%rip),%rdx
	movq	constructor_fields(%rip), %rsi
	salq	$4, %rdx
	addq	spelling_base(%rip), %rdx
	movq	%rdx, spelling(%rip)
.L26086:
	movq	(%rsi), %rsi
	testq	%rsi, %rsi
	movq	%rsi, constructor_fields(%rip)
	je	.L26098
	testb	$2, 53(%rsi)
	je	.L26098
	cmpq	$0, 72(%rsi)
	jne	.L26098
.L26097:
	movq	constructor_fields(%rip), %r15
	movq	(%r15), %rsi
	testq	%rsi, %rsi
	movq	%rsi, constructor_fields(%rip)
	je	.L26098
	testb	$2, 53(%rsi)
	je	.L26098
	cmpq	$0, 72(%rsi)
	jne	.L26098
	jmp	.L26097
.L26065:
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L26067
.L32008:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.L26068
.L31776:
	movq	%rax, %rbx
	jmp	.L26044
.L26068:
	movq	32(%rbx), %r14
	jmp	.L26045
.L26067:
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L31776
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L26074
	cmpq	%rbx, 8(%rax)
	je	.L26077
.L26074:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L26045
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
.L32009:
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L26044
	jmp	.L26068
.L26077:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L26074
	cmpq	%rbx, 8(%rax)
	je	.L26077
	jmp	.L26074
.L33782:
	movq	32(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L26048
	movq	constructor_type(%rip), %r13
	movq	40(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rdx
	movq	8(%r13), %rsi
	jmp	.L31777
.L26048:
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rbx), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L32008
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L31776
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L26057
	cmpq	%rbx, 8(%rax)
	je	.L26060
.L26057:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L26045
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	jmp	.L32009
.L26060:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L26057
	cmpq	%rbx, 8(%rax)
	je	.L26060
	jmp	.L26057
.L33781:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L26033
.L33780:
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26033
	testb	$2, 53(%rax)
	je	.L26033
	cmpq	$0, 72(%rax)
	jne	.L26033
.L26039:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26033
	testb	$2, 53(%rax)
	je	.L26033
	cmpq	$0, 72(%rax)
	jne	.L26033
	jmp	.L26039
.L33779:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L26033
.L33778:
	movq	%r15, %rdi
	call	copy_node
	movq	%rax, %r15
	jmp	.L26031
.L33777:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L25963
	movq	32(%rax), %r9
	testb	$1, 17(%r9)
	jne	.L33784
.L26006:
	movq	$0, constructor_elements(%rip)
	jmp	.L25963
.L33784:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdx
	xorl	%r12d, %r12d
	cmpq	%rdx, %r8
	movq	%r8, %rbx
	movq	%rdx, %r13
	jae	.L30619
.L26013:
	cmpl	$3, (%rbx)
	je	.L33785
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L26009:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L26013
.L30619:
	movslq	%r12d,%rdi
	movq	%r8, %r12
	addq	$16, %rdi
	andq	$-16, %rdi
	subq	%rdi, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30621
.L26027:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33786
	cmpl	$2, %eax
	je	.L33787
.L26021:
	movq	8(%r12), %r11
	movzbl	(%r11), %esi
	leaq	1(%r11), %rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	je	.L26017
.L26026:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L26026
.L26017:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L26027
.L30621:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L26006
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L26006
.L33787:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L26021
.L33786:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L26017
.L33785:
	addl	$25, %r12d
	jmp	.L26009
.L33776:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L25966
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, %r15
	je	.L25964
	testq	%rax, %rax
	jne	.L25967
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L25974
.L30613:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L33788
.L25994:
	cmpb	$18, 16(%rdi)
	je	.L33789
.L26000:
	movl	$0, constructor_incremental(%rip)
.L25966:
	movq	-1088(%rbp), %rsi
	movq	%r15, %rdi
	call	add_pending_init
	jmp	.L25941
.L33789:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L33790
	movq	global_trees+136(%rip), %rax
.L31775:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L26000
.L33790:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31775
.L33788:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26000
	testb	$2, 53(%rax)
	je	.L26000
	cmpq	$0, 72(%rax)
	jne	.L26000
.L25980:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26000
	testb	$2, 53(%rax)
	je	.L26000
	cmpq	$0, 72(%rax)
	jne	.L26000
	jmp	.L25980
.L25974:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L25974
	movq	constructor_type(%rip), %rdi
	jmp	.L30613
.L25967:
	movq	%r15, %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L25966
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L25987
	cmpb	$18, %al
	jne	.L25966
.L25987:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L25993
.L30616:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L25994
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26000
	testb	$2, 53(%rax)
	je	.L26000
	cmpq	$0, 72(%rax)
	jne	.L26000
.L25999:
	movq	constructor_unfilled_fields(%rip), %r8
	movq	(%r8), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26000
	testb	$2, 53(%rax)
	je	.L26000
	cmpq	$0, 72(%rax)
	jne	.L26000
	jmp	.L25999
.L25993:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L25993
	movq	constructor_type(%rip), %rdi
	jmp	.L30616
.L33775:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L25966
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31234
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L25966
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L25966
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L25946
	cmpb	$18, %al
	jne	.L25966
.L25946:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L25952
.L30610:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L25994
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26000
	testb	$2, 53(%rax)
	je	.L26000
	cmpq	$0, 72(%rax)
	jne	.L26000
.L25958:
	movq	constructor_unfilled_fields(%rip), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26000
	testb	$2, 53(%rax)
	je	.L26000
	cmpq	$0, 72(%rax)
	jne	.L26000
	jmp	.L25958
.L25952:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L25952
	movq	constructor_type(%rip), %rdi
	jmp	.L30610
.L31234:
	movq	constructor_type(%rip), %rdi
	jmp	.L25943
.L33774:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L25941
.L33773:
	call	integer_zerop
	testl	%eax, %eax
	je	.L25939
	movq	constructor_type(%rip), %rbx
	cmpb	$18, 16(%rbx)
	je	.L25941
	cmpq	$0, (%r15)
	jne	.L25941
	jmp	.L25939
.L33772:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L25937
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L25937
.L33771:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdx
	xorl	%r12d, %r12d
	cmpq	%rdx, %r8
	movq	%r8, %rbx
	movq	%rdx, %r13
	jae	.L30605
.L25919:
	cmpl	$3, (%rbx)
	je	.L33791
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L25915:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L25919
.L30605:
	movslq	%r12d,%rdi
	movq	%r8, %r12
	addq	$16, %rdi
	andq	$-16, %rdi
	subq	%rdi, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30607
.L25933:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33792
	cmpl	$2, %eax
	je	.L33793
.L25927:
	movq	8(%r12), %r11
	movzbl	(%r11), %esi
	leaq	1(%r11), %rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	je	.L25923
.L25932:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L25932
.L25923:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L25933
.L30607:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L33794
.L25936:
	movq	global_trees(%rip), %r12
	jmp	.L25937
.L33794:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L25936
.L33793:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L25927
.L33792:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L25923
.L33791:
	addl	$25, %r12d
	jmp	.L25915
.L25908:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L25911
	movq	constructor_type(%rip), %r9
	movzbl	16(%r9), %r8d
	subb	$20, %r8b
	cmpb	$1, %r8b
	ja	.L25907
	testb	$2, 53(%r15)
	je	.L25907
	cmpb	$25, 16(%r12)
	je	.L25907
.L25911:
	movl	$0, constructor_simple(%rip)
	jmp	.L25907
.L33770:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L25907
.L33769:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L25905
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L25905
	movl	$1, %r10d
	testl	%r10d, %r10d
	je	.L25905
	movq	32(%r12), %r13
	movq	32(%r13), %rcx
	movq	104(%rcx), %r12
	jmp	.L25905
.L33768:
	cmpb	$29, 16(%r12)
	je	.L33795
.L25808:
	movq	-1080(%rbp), %rcx
	movq	128(%rdx), %rdi
	movq	128(%rcx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L31226
	movq	-1072(%rbp), %r11
	movq	8(%r11), %rdi
.L25807:
	movzbl	16(%rdi), %r13d
	movq	%rdi, %rbx
	cmpl	$23, %r13d
	je	.L25810
	cmpl	$18, %r13d
	je	.L25810
	movq	-1072(%rbp), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$32, %al
	je	.L33796
	movl	optimize(%rip), %edi
	testl	%edi, %edi
	je	.L25873
	cmpb	$34, %al
	je	.L33797
.L25873:
	movzbl	16(%r12), %ecx
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L31233
	cmpb	$115, %cl
	je	.L33798
.L25882:
	movzbl	%cl, %r10d 
	movzbl	tree_code_type(%r10), %eax
	cmpb	$60, %al
	je	.L25887
	cmpb	$49, %al
	je	.L25887
	cmpb	$50, %al
	je	.L25887
	cmpb	$101, %al
	je	.L25887
.L25886:
	cmpl	$10, %r13d
	je	.L33799
	cmpb	$39, %cl
	je	.L33800
.L25895:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L25900
	testb	$32, 17(%rbx)
	je	.L25901
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L25902
	movzwl	60(%rbx), %esi
	movq	integer_types+40(%rip), %rbx
	movzwl	60(%rbx), %edi
	andl	$511, %esi
	andl	$511, %edi
	cmpl	%edi, %esi
	je	.L25902
.L25901:
	movq	integer_types+40(%rip), %rdi
.L32006:
	movq	%r12, %rsi
.L32007:
	call	convert
.L31772:
	movq	%rax, %rbx
.L31763:
	movq	global_trees(%rip), %r8
.L25871:
	movq	%rbx, %r12
	jmp	.L25806
.L25902:
	movq	integer_types+48(%rip), %rdi
	jmp	.L32006
.L25900:
	movl	flag_traditional(%rip), %r14d
	testl	%r14d, %r14d
	je	.L25903
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L25903
	movq	global_trees+192(%rip), %r11
	cmpq	%r11, 128(%rbx)
	je	.L33801
.L25903:
	cmpl	$5, %r13d
	je	.L33802
.L25904:
	movq	%r12, %rbx
	jmp	.L31763
.L33802:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31764:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L25871
.L33801:
	movq	global_trees+200(%rip), %rdi
	jmp	.L32006
.L33800:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L25895
	movq	integer_types+40(%rip), %r9
	movq	40(%rdx), %rdi
	movzwl	60(%r9), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L25895
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	je	.L25901
	testb	$32, 17(%rbx)
	jne	.L25902
	jmp	.L25901
.L33799:
	movq	integer_types+40(%rip), %r13
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %ecx
	movzwl	60(%r13), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%ecx, %ecx
	jne	.L25894
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L25893
.L25894:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L25893:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L32006
.L25887:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L25886
.L33798:
	movq	32(%r12), %rsi
	movq	8(%r12), %r14
	cmpq	%r14, 8(%rsi)
	jne	.L25882
.L25885:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L33803
.L31233:
	movq	32(%r12), %rsi
	jmp	.L25885
.L33803:
	cmpb	$115, %cl
	jne	.L25882
	movq	32(%rsi), %r8
	movq	8(%r12), %r11
	cmpq	%r11, 8(%r8)
	movq	%r8, %rsi
	je	.L25885
	jmp	.L25882
.L33797:
	movl	pedantic(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L25877
	movq	-1072(%rbp), %rbx
	cmpb	$51, 48(%rbx)
	je	.L25877
	cmpq	$0, current_function_decl(%rip)
	je	.L25879
	movzbl	17(%rbx), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L33804
.L25879:
	movq	-1072(%rbp), %rsi
.L25880:
	movq	%rsi, %r12
.L25877:
	movq	8(%r12), %rbx
	jmp	.L25873
.L33804:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L25879
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L25879
	testb	$2, 17(%rax)
	je	.L25879
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L25880
	jmp	.L25879
.L33796:
	movq	104(%rcx), %r12
	jmp	.L25873
.L25810:
	movq	-1072(%rbp), %rcx
	xorl	%r14d, %r14d
	movl	%r13d, %r8d
	movzbl	16(%rcx), %edx
	cmpb	$116, %dl
	je	.L30601
	cmpb	$115, %dl
	je	.L33805
	movq	-1072(%rbp), %rbx
	movzbl	16(%rbx), %ecx
.L25812:
	movzbl	%cl, %r9d 
	movzbl	tree_code_type(%r9), %eax
	cmpb	$60, %al
	je	.L25818
	cmpb	$49, %al
	je	.L25818
	cmpb	$50, %al
	je	.L25818
	cmpb	$101, %al
	je	.L25818
.L25817:
	cmpl	$23, %r8d
	je	.L33806
	cmpl	$18, %r8d
	jne	.L25904
	movzbl	%cl, %r8d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r8), %eax
	movq	8(%rdi), %r13
	cmpb	$114, %al
	je	.L25823
	cmpb	$100, %al
	je	.L25823
.L25822:
	movzbl	17(%rdi), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %esi
	shrb	$4, %r10b
	shrb	$3, %sil
	andl	%r10d, %r9d
	andl	$1, %esi
	movzbl	62(%rdi), %r10d
	movzbl	16(%rdi), %edi
	addl	%esi, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	movl	%r10d, %ebx
	shrb	$5, %bl
	andl	$1, %ebx
	sall	$2, %ebx
	orl	%ebx, %r9d
	cmpb	$20, %dil
	je	.L33807
.L25826:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L25825
	testl	%edx, %edx
	jne	.L25825
	testl	%r11d, %r11d
	je	.L25824
.L25825:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%ebx, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L33808
.L25828:
	leal	0(,%rcx,8), %edi
	orl	%edi, %esi
	movq	%r13, %rdi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L25824:
	cmpb	$41, %cl
	je	.L33809
	cmpb	$47, %cl
	je	.L33810
	xorl	%ebx, %ebx
	testl	%r14d, %r14d
	je	.L33811
.L25867:
	movl	flag_isoc99(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L25868
	testl	%ebx, %ebx
	je	.L25904
.L25868:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L33812
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L32007
.L33812:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L31764
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %r9d
	andb	$1, %r9b
	addb	%r9b, %r9b
	andb	$-4, %r12b
	orb	%r9b, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L31763
.L33811:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L25867
.L33810:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L25832
	cmpl	$18, %r14d
	je	.L25832
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L33813
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L25835
	cmpb	$34, %dl
	je	.L33814
.L25835:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L31231
	cmpb	$115, %dl
	je	.L33815
.L25844:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L25849
	cmpb	$49, %al
	je	.L25849
	cmpb	$50, %al
	je	.L25849
	cmpb	$101, %al
	je	.L25849
.L25848:
	cmpl	$10, %r14d
	je	.L33816
	cmpb	$39, %dl
	je	.L33817
.L25857:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L25862
	testb	$32, 17(%r13)
	je	.L25863
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L25864
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r13), %r8d
	movzwl	60(%rdx), %r13d
	andl	$511, %r8d
	andl	$511, %r13d
	cmpl	%r13d, %r8d
	je	.L25864
.L25863:
	movq	integer_types+40(%rip), %rdi
.L31762:
	movq	%rbx, %rsi
	call	convert
.L25833:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31772
.L25864:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31762
.L25862:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L25865
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L25865
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%r13)
	je	.L33818
.L25865:
	cmpl	$5, %r14d
	je	.L33819
	movq	%rbx, %rax
	jmp	.L25833
.L33819:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L25833
.L33818:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31762
.L33817:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L25857
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L25857
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L25863
	testb	$32, 17(%r13)
	jne	.L25864
	jmp	.L25863
.L33816:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L25856
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L25855
.L25856:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L25855:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31762
.L25849:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L25848
.L33815:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L25844
.L25847:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L33820
.L31231:
	movq	32(%rbx), %rsi
	jmp	.L25847
.L33820:
	cmpb	$115, %dl
	jne	.L25844
	movq	32(%rsi), %rdi
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%rdi)
	movq	%rdi, %rsi
	je	.L25847
	jmp	.L25844
.L33814:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L25839
	cmpb	$51, 48(%rbx)
	je	.L25839
	cmpq	$0, current_function_decl(%rip)
	je	.L25841
	movzbl	17(%rbx), %r8d
	andb	$24, %r8b
	cmpb	$16, %r8b
	je	.L33821
.L25841:
	movq	%rbx, %rsi
.L25842:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L25839:
	movq	%rax, %r13
	jmp	.L25835
.L33821:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L25841
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L25841
	testb	$2, 17(%rax)
	je	.L25841
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L25842
	jmp	.L25841
.L33813:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L25835
.L25832:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L25833
.L33809:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L32007
.L33808:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L25828
.L33807:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L25826
.L25823:
	movzbl	17(%r12), %r10d
	movl	$1, %r11d
	movl	%r10d, %edx
	shrb	$3, %r10b
	shrb	$4, %dl
	andl	%r10d, %r11d
	andl	$1, %edx
	jmp	.L25822
.L33806:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31772
.L25818:
	movq	-1072(%rbp), %rsi
	movl	24(%rsi), %eax
	movl	%eax, 24(%r12)
	jmp	.L25817
.L33805:
	movq	32(%rcx), %r13
	cmpq	%rdi, 8(%r13)
	je	.L30601
	movl	$115, %ecx
	jmp	.L25812
.L30601:
	movq	-1072(%rbp), %r12
	movl	%edx, %ecx
	movq	32(%r12), %rsi
.L25816:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r14d
	cmpb	$116, %cl
	jne	.L33822
	movq	32(%r12), %rsi
	jmp	.L25816
.L33822:
	cmpb	$115, %cl
	jne	.L25812
	movq	32(%rsi), %rsi
	movq	8(%r12), %r10
	cmpq	%r10, 8(%rsi)
	je	.L25816
	jmp	.L25812
.L33795:
	movq	-1080(%rbp), %rsi
	cmpb	$18, 16(%rsi)
	jne	.L25808
	movq	8(%rsi), %rdi
	cmpb	$6, 16(%rdi)
	jne	.L25808
	jmp	.L31226
.L25803:
	movslq	%eax,%rsi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L31761
.L25799:
	cmpq	$0, 40(%rdi)
	jne	.L33823
.L26087:
	movq	(%rsi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26086
	testb	$2, 53(%rax)
	je	.L26086
	cmpq	$0, 72(%rax)
	jne	.L26086
.L26092:
	movq	constructor_unfilled_fields(%rip), %r10
	movq	(%r10), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L26086
	testb	$2, 53(%rax)
	je	.L26086
	cmpq	$0, 72(%rax)
	je	.L26092
	jmp	.L26086
.L33823:
	call	bit_position
	movq	constructor_fields(%rip), %r11
	movl	$59, %edi
	movq	%rax, %rsi
	movq	40(%r11), %rdx
	call	size_binop
	movq	constructor_fields(%rip), %rsi
	movq	%rax, constructor_bit_index(%rip)
	jmp	.L26087
.L33767:
	movq	-1080(%rbp), %r13
	movq	8(%r13), %r12
	cmpb	$6, 16(%r12)
	jne	.L25795
	movl	-964(%rbp), %r10d
	testl	%r10d, %r10d
	je	.L25795
	movq	-344(%rbp), %rbx
	movq	%rbx, -1072(%rbp)
	jmp	.L25796
.L33766:
	movl	require_constant_value(%rip), %r9d
	testl	%r9d, %r9d
	jne	.L25770
	cmpq	$0, 32(%rax)
	jne	.L25770
	cmpq	$0, (%rsi)
	jne	.L25770
	movl	$.LC42, %edi
	xorl	%eax, %eax
	movl	$.LC164, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdi
	xorl	%r12d, %r12d
	cmpq	%rdi, %r8
	movq	%r8, %rbx
	movq	%rdi, %r13
	jae	.L30597
.L25777:
	cmpl	$3, (%rbx)
	je	.L33824
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L25773:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L25777
.L30597:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30599
.L25791:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33825
	cmpl	$2, %eax
	je	.L33826
.L25785:
	movq	8(%r12), %r15
	movzbl	(%r15), %r8d
	leaq	1(%r15), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L25781
.L25790:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L25790
.L25781:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L25791
	jmp	.L30599
.L33826:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L25785
.L33825:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L25781
.L33824:
	addl	$25, %r12d
	jmp	.L25773
.L33765:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC163, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r15
	xorl	%r12d, %r12d
	cmpq	%r15, %r8
	movq	%r8, %rbx
	movq	%r15, %r13
	jae	.L30592
.L25751:
	cmpl	$3, (%rbx)
	je	.L33827
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L25747:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L25751
.L30592:
	movslq	%r12d,%r11
	movq	%r8, %r12
	addq	$16, %r11
	andq	$-16, %r11
	subq	%r11, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30725
.L25765:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33828
	cmpl	$2, %eax
	je	.L33829
.L25759:
	movq	8(%r12), %r13
	movzbl	(%r13), %esi
	leaq	1(%r13), %rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	je	.L25755
.L25764:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L25764
.L25755:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L25765
	jmp	.L30725
.L33829:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L25759
.L33828:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L25755
.L33827:
	addl	$25, %r12d
	jmp	.L25747
	.p2align 6,,7
.L33257:
	movl	require_constant_value(%rip), %r9d
	testl	%r9d, %r9d
	je	.L25739
	movl	flag_isoc99(%rip), %r8d
	testl	%r8d, %r8d
	je	.L28700
	jmp	.L25739
.L25733:
	xorl	%edi, %edi
	jmp	.L25734
.L33256:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC176, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L30506
.L25016:
	cmpl	$3, (%rbx)
	je	.L33830
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L25012:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L25016
.L30506:
	movslq	%r12d,%r14
	movq	%r8, %r12
	addq	$16, %r14
	andq	$-16, %r14
	subq	%r14, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30508
.L25030:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33831
	cmpl	$2, %eax
	je	.L33832
.L25024:
	movq	8(%r12), %r9
	movzbl	(%r9), %r13d
	leaq	1(%r9), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L25020
.L25029:
	movzbl	(%rcx), %edx
	incq	%rbx
	incq	%rcx
	testb	%dl, %dl
	movb	%dl, (%rbx)
	jne	.L25029
.L25020:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L25030
.L30508:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L25009
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L25009
.L33832:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L25024
.L33831:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L25020
.L33830:
	addl	$25, %r12d
	jmp	.L25012
.L25008:
	cmpq	$0, (%rax)
	jne	.L33833
.L25035:
	movq	32(%rax), %rax
.L31721:
	movq	%rax, -1016(%rbp)
	jmp	.L25004
.L33833:
	movl	$.LC177, %esi
	xorl	%eax, %eax
	movl	$.LC42, %edi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rsi
	xorl	%r12d, %r12d
	cmpq	%rsi, %r8
	movq	%r8, %rbx
	movq	%rsi, %r13
	jae	.L30511
.L25042:
	cmpl	$3, (%rbx)
	je	.L33834
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L25038:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L25042
.L30511:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30513
.L25056:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33835
	cmpl	$2, %eax
	je	.L33836
.L25050:
	movq	8(%r12), %r11
	movzbl	(%r11), %r8d
	leaq	1(%r11), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L25046
.L25055:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L25055
.L25046:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L25056
.L30513:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L33837
.L25059:
	movq	constructor_elements(%rip), %rax
	jmp	.L25035
.L33837:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L25059
.L33836:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L25050
.L33835:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L25046
.L33834:
	addl	$25, %r12d
	jmp	.L25038
.L25007:
	movl	constructor_erroneous(%rip), %r15d
	testl	%r15d, %r15d
	je	.L25062
	movq	global_trees(%rip), %r10
	movq	%r10, -1016(%rbp)
	jmp	.L25004
.L25062:
	movq	constructor_elements(%rip), %rdi
	call	nreverse
	xorl	%edx, %edx
	movq	constructor_type(%rip), %rsi
	movq	%rax, %rcx
	movl	$46, %edi
	xorl	%eax, %eax
	call	build
	movl	constructor_constant(%rip), %ebx
	movq	%rax, -1016(%rbp)
	testl	%ebx, %ebx
	je	.L25004
	orb	$2, 17(%rax)
	movl	constructor_constant(%rip), %eax
	testl	%eax, %eax
	je	.L25004
	movl	constructor_simple(%rip), %r14d
	testl	%r14d, %r14d
	je	.L25004
	movq	-1016(%rbp), %r13
	orb	$4, 18(%r13)
	jmp	.L25004
	.p2align 6,,7
.L33254:
	xorl	%edi, %edi
	call	output_pending_init_elements
	jmp	.L24509
.L33253:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L24973
.L33252:
	movq	constructor_unfilled_fields(%rip), %r10
	movq	(%r10), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24973
	testb	$2, 53(%rax)
	je	.L24973
	cmpq	$0, 72(%rax)
	jne	.L24973
.L24979:
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24973
	testb	$2, 53(%rax)
	je	.L24973
	cmpq	$0, 72(%rax)
	jne	.L24973
	jmp	.L24979
.L32079:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L24973
.L33251:
	movq	%r15, %rdi
	call	copy_node
	movq	%rax, -1000(%rbp)
	jmp	.L24971
	.p2align 6,,7
.L33250:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L24903
	movq	32(%rax), %r9
	testb	$1, 17(%r9)
	jne	.L33838
.L24946:
	movq	$0, constructor_elements(%rip)
	jmp	.L24903
.L33838:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdx
	xorl	%r12d, %r12d
	cmpq	%rdx, %r8
	movq	%r8, %rbx
	movq	%rdx, %r13
	jae	.L30499
.L24953:
	cmpl	$3, (%rbx)
	je	.L33839
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L24949:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L24953
.L30499:
	movslq	%r12d,%rsi
	movq	%r8, %r12
	addq	$16, %rsi
	andq	$-16, %rsi
	subq	%rsi, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30501
.L24967:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33840
	cmpl	$2, %eax
	je	.L33841
.L24961:
	movq	8(%r12), %r11
	movzbl	(%r11), %r8d
	leaq	1(%r11), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L24957
.L24966:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L24966
.L24957:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L24967
.L30501:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L24946
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L24946
.L33841:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L24961
.L33840:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L24957
.L33839:
	addl	$25, %r12d
	jmp	.L24949
	.p2align 6,,7
.L33249:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L24906
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, %r15
	je	.L24904
	testq	%rax, %rax
	jne	.L24907
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L24914
.L30493:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L33842
.L24934:
	cmpb	$18, 16(%rdi)
	je	.L33843
.L24940:
	movl	$0, constructor_incremental(%rip)
.L24906:
	movq	%r15, %rdi
	movq	-992(%rbp), %rsi
.L31719:
	call	add_pending_init
	jmp	.L24509
.L33843:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L33844
	movq	global_trees+136(%rip), %rax
.L31716:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L24940
.L33844:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31716
.L33842:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24940
	testb	$2, 53(%rax)
	je	.L24940
	cmpq	$0, 72(%rax)
	jne	.L24940
.L24920:
	movq	constructor_unfilled_fields(%rip), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24940
	testb	$2, 53(%rax)
	je	.L24940
	cmpq	$0, 72(%rax)
	jne	.L24940
	jmp	.L24920
	.p2align 6,,7
.L24914:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L24914
	movq	constructor_type(%rip), %rdi
	jmp	.L30493
.L24907:
	movq	%r15, %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L24906
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L24927
	cmpb	$18, %al
	jne	.L24906
.L24927:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L24933
.L30496:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L24934
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24940
	testb	$2, 53(%rax)
	je	.L24940
	cmpq	$0, 72(%rax)
	jne	.L24940
.L24939:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24940
	testb	$2, 53(%rax)
	je	.L24940
	cmpq	$0, 72(%rax)
	jne	.L24940
	jmp	.L24939
.L24933:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L24933
	movq	constructor_type(%rip), %rdi
	jmp	.L30496
	.p2align 6,,7
.L33248:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L24906
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31201
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L24906
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L24906
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L24886
	cmpb	$18, %al
	jne	.L24906
.L24886:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L24892
.L30490:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L24934
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24940
	testb	$2, 53(%rax)
	je	.L24940
	cmpq	$0, 72(%rax)
	jne	.L24940
.L24898:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24940
	testb	$2, 53(%rax)
	je	.L24940
	cmpq	$0, 72(%rax)
	jne	.L24940
	jmp	.L24898
.L24892:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L24892
	movq	constructor_type(%rip), %rdi
	jmp	.L30490
.L31201:
	movq	constructor_type(%rip), %rdi
	jmp	.L24883
	.p2align 6,,7
.L31720:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L24509
.L33247:
	call	integer_zerop
	testl	%eax, %eax
	je	.L24879
	movq	constructor_type(%rip), %rbx
	cmpb	$18, 16(%rbx)
	je	.L24509
	cmpq	$0, (%r15)
	jne	.L24509
	jmp	.L24879
.L33246:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L24877
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L24877
.L33245:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L30485
.L24859:
	cmpl	$3, (%rbx)
	je	.L33845
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L24855:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L24859
.L30485:
	movslq	%r12d,%rsi
	movq	%r8, %r12
	addq	$16, %rsi
	andq	$-16, %rsi
	subq	%rsi, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30487
.L24873:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33846
	cmpl	$2, %eax
	je	.L33847
.L24867:
	movq	8(%r12), %rdi
	movzbl	(%rdi), %r11d
	leaq	1(%rdi), %rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	je	.L24863
.L24872:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L24872
.L24863:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L24873
.L30487:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L33848
.L24876:
	movq	global_trees(%rip), %r12
	jmp	.L24877
.L33848:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L24876
	.p2align 6,,7
.L33847:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L24867
.L33846:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L24863
.L33845:
	addl	$25, %r12d
	jmp	.L24855
.L24848:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L24851
	movq	constructor_type(%rip), %r8
	movzbl	16(%r8), %edx
	subb	$20, %dl
	cmpb	$1, %dl
	ja	.L24847
	testb	$2, 53(%r15)
	je	.L24847
	cmpb	$25, 16(%r12)
	je	.L24847
.L24851:
	movl	$0, constructor_simple(%rip)
	jmp	.L24847
.L33244:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L24847
.L33243:
	movl	require_constant_value(%rip), %r10d
	testl	%r10d, %r10d
	je	.L24845
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L24845
	xorl	%r13d, %r13d
	testl	%r13d, %r13d
	je	.L24845
	movq	32(%r12), %r9
	movq	32(%r9), %rcx
	movq	104(%rcx), %r12
	jmp	.L24845
	.p2align 6,,7
.L33242:
	movzbl	16(%r12), %ecx
	cmpb	$29, %cl
	je	.L33849
.L24759:
	movq	-368(%rbp), %r8
	movq	128(%rdx), %rdi
	movq	128(%r8), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L31194
	movq	8(%r12), %rbx
.L24758:
	movzbl	16(%rbx), %r13d
	cmpl	$23, %r13d
	je	.L24761
	cmpl	$18, %r13d
	je	.L24761
	movzbl	16(%r12), %ecx
	cmpb	$32, %cl
	je	.L33850
	movl	optimize(%rip), %r8d
	testl	%r8d, %r8d
	je	.L24818
	cmpb	$34, %cl
	je	.L33851
.L24818:
	cmpb	$116, %cl
	movq	%r12, %rdx
	je	.L31200
	cmpb	$115, %cl
	je	.L33852
.L24827:
	movzbl	%cl, %r10d 
	movzbl	tree_code_type(%r10), %eax
	cmpb	$60, %al
	je	.L24832
	cmpb	$49, %al
	je	.L24832
	cmpb	$50, %al
	je	.L24832
	cmpb	$101, %al
	je	.L24832
.L24831:
	cmpl	$10, %r13d
	je	.L33853
	cmpb	$39, %cl
	je	.L33854
.L24837:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L24840
	testb	$32, 17(%rbx)
	je	.L24841
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L24842
	movzwl	60(%rbx), %esi
	movq	integer_types+40(%rip), %rbx
	movzwl	60(%rbx), %r8d
	andl	$511, %esi
	andl	$511, %r8d
	cmpl	%r8d, %esi
	je	.L24842
.L24841:
	movq	integer_types+40(%rip), %rdi
.L31998:
	movq	%r12, %rsi
.L31999:
	call	convert
.L31712:
	movq	%rax, %rbx
.L31703:
	movq	global_trees(%rip), %r8
.L24816:
	movq	%rbx, %r12
	jmp	.L31713
.L24842:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31998
	.p2align 6,,7
.L24840:
	movl	flag_traditional(%rip), %r14d
	testl	%r14d, %r14d
	je	.L24843
	movl	flag_allow_single_precision(%rip), %r11d
	testl	%r11d, %r11d
	jne	.L24843
	movq	global_trees+192(%rip), %rdi
	cmpq	%rdi, 128(%rbx)
	je	.L33855
.L24843:
	cmpl	$5, %r13d
	je	.L33856
.L24844:
	movq	%r12, %rbx
	jmp	.L31703
.L33856:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31704:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L24816
.L33855:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31998
	.p2align 6,,7
.L33854:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L24837
	movq	integer_types+40(%rip), %r9
	movq	40(%rdx), %rdi
	movzwl	60(%r9), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L24837
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	je	.L24841
	testb	$32, 17(%rbx)
	jne	.L24842
	jmp	.L24841
	.p2align 6,,7
.L33853:
	movq	integer_types+40(%rip), %r13
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %ecx
	movzwl	60(%r13), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%ecx, %ecx
	jne	.L24836
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L24835
.L24836:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L24835:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31998
.L24832:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L24831
.L33852:
	movq	32(%r12), %rsi
	movq	8(%r12), %r14
	cmpq	%r14, 8(%rsi)
	jne	.L24827
.L24830:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L33857
.L31200:
	movq	32(%r12), %rsi
	jmp	.L24830
.L33857:
	cmpb	$115, %cl
	jne	.L24827
	movq	32(%rsi), %rdi
	movq	8(%r12), %r11
	cmpq	%r11, 8(%rdi)
	movq	%rdi, %rsi
	je	.L24830
	jmp	.L24827
.L33851:
	movl	pedantic(%rip), %esi
	testl	%esi, %esi
	jne	.L24818
	cmpb	$51, 48(%r12)
	je	.L24818
	cmpq	$0, current_function_decl(%rip)
	je	.L24824
	movzbl	17(%r12), %ebx
	andb	$24, %bl
	cmpb	$16, %bl
	je	.L33858
.L24824:
	movq	%r12, %rsi
.L24825:
	movq	%rsi, %r12
	movq	8(%rsi), %rbx
.L31702:
	movzbl	16(%r12), %ecx
	jmp	.L24818
.L33858:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L24824
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L24824
	testb	$2, 17(%rax)
	je	.L24824
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L24825
	jmp	.L24824
	.p2align 6,,7
.L33850:
	movq	104(%r12), %r12
	jmp	.L31702
.L24761:
	movzbl	16(%r12), %ecx
	xorl	%r14d, %r14d
	movl	%r13d, %edi
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L31196
	cmpb	$115, %cl
	je	.L33859
.L24763:
	movzbl	%cl, %r10d 
	movzbl	tree_code_type(%r10), %eax
	cmpb	$60, %al
	je	.L24769
	cmpb	$49, %al
	je	.L24769
	cmpb	$50, %al
	je	.L24769
	cmpb	$101, %al
	je	.L24769
.L24768:
	cmpl	$23, %edi
	je	.L33860
	cmpl	$18, %edi
	jne	.L24844
	movzbl	%cl, %edi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rdi), %eax
	movq	8(%rbx), %r13
	cmpb	$114, %al
	je	.L24774
	cmpb	$100, %al
	je	.L24774
.L24773:
	movzbl	17(%rbx), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %esi
	shrb	$3, %r10b
	shrb	$4, %sil
	andl	$1, %r10d
	andl	%esi, %r9d
	xorl	%esi, %esi
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rbx), %r10d
	movl	%r10d, %edi
	shrb	$5, %dil
	andl	$1, %edi
	sall	$2, %edi
	orl	%edi, %r9d
	movzbl	16(%rbx), %edi
	cmpb	$20, %dil
	je	.L33861
.L24777:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L24776
	testl	%edx, %edx
	jne	.L24776
	testl	%r11d, %r11d
	je	.L24775
.L24776:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%ebx, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L33862
.L24778:
	leal	0(,%rcx,8), %r8d
	movq	%r13, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L24775:
	cmpb	$41, %cl
	je	.L33863
	cmpb	$47, %cl
	je	.L33864
	xorl	%ebx, %ebx
	testl	%r14d, %r14d
	je	.L33865
.L24812:
	movl	flag_isoc99(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L24813
	testl	%ebx, %ebx
	je	.L24844
.L24813:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L33866
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L31999
.L33866:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L31704
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %r9d
	andb	$1, %r9b
	addb	%r9b, %r9b
	andb	$-4, %r12b
	orb	%r9b, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L31703
.L33865:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L24812
.L33864:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L24782
	cmpl	$18, %r14d
	je	.L24782
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L33867
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L24785
	cmpb	$34, %dl
	je	.L33868
.L24785:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L31198
	cmpb	$115, %dl
	je	.L33869
.L24794:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L24799
	cmpb	$49, %al
	je	.L24799
	cmpb	$50, %al
	je	.L24799
	cmpb	$101, %al
	je	.L24799
.L24798:
	cmpl	$10, %r14d
	je	.L33870
	cmpb	$39, %dl
	je	.L33871
.L24804:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L24807
	testb	$32, 17(%r13)
	je	.L24808
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L24809
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r13), %edi
	movzwl	60(%rdx), %r13d
	andl	$511, %edi
	andl	$511, %r13d
	cmpl	%r13d, %edi
	je	.L24809
.L24808:
	movq	integer_types+40(%rip), %rdi
.L31701:
	movq	%rbx, %rsi
	call	convert
.L24783:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31712
.L24809:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31701
.L24807:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L24810
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L24810
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%r13)
	je	.L33872
.L24810:
	cmpl	$5, %r14d
	je	.L33873
	movq	%rbx, %rax
	jmp	.L24783
.L33873:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L24783
.L33872:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31701
.L33871:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L24804
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L24804
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L24808
	testb	$32, 17(%r13)
	jne	.L24809
	jmp	.L24808
.L33870:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L24803
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L24802
.L24803:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L24802:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31701
.L24799:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L24798
.L33869:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L24794
.L24797:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L33874
.L31198:
	movq	32(%rbx), %rsi
	jmp	.L24797
.L33874:
	cmpb	$115, %dl
	jne	.L24794
	movq	32(%rsi), %r8
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%r8)
	movq	%r8, %rsi
	je	.L24797
	jmp	.L24794
.L33868:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L24789
	cmpb	$51, 48(%rbx)
	je	.L24789
	cmpq	$0, current_function_decl(%rip)
	je	.L24791
	movzbl	17(%rbx), %edi
	andb	$24, %dil
	cmpb	$16, %dil
	je	.L33875
.L24791:
	movq	%rbx, %rsi
.L24792:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L24789:
	movq	%rax, %r13
	jmp	.L24785
.L33875:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L24791
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L24791
	testb	$2, 17(%rax)
	je	.L24791
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L24792
	jmp	.L24791
.L33867:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L24785
.L24782:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L24783
.L33863:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L31999
.L33862:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L24778
.L33861:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L24777
.L24774:
	movzbl	17(%r12), %esi
	movl	$1, %r11d
	movl	%esi, %edx
	shrb	$3, %sil
	shrb	$4, %dl
	andl	%esi, %r11d
	andl	$1, %edx
	jmp	.L24773
.L33860:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31712
	.p2align 6,,7
.L24769:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L24768
.L33859:
	movq	32(%r12), %rsi
	cmpq	%rbx, 8(%rsi)
	jne	.L24763
.L24767:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r14d
	cmpb	$116, %cl
	jne	.L33876
.L31196:
	movq	32(%r12), %rsi
	jmp	.L24767
.L33876:
	cmpb	$115, %cl
	jne	.L24763
	movq	32(%rsi), %rsi
	movq	8(%r12), %r11
	cmpq	%r11, 8(%rsi)
	je	.L24767
	jmp	.L24763
.L33849:
	movq	-368(%rbp), %rbx
	cmpb	$18, 16(%rbx)
	jne	.L24759
	movq	8(%rbx), %r9
	cmpb	$6, 16(%r9)
	jne	.L24759
	movq	global_trees(%rip), %r8
	jmp	.L24757
	.p2align 6,,7
.L24756:
	movq	%r12, %rdi
	movq	%rbx, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L24984
	movq	-976(%rbp), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	je	.L33877
.L31717:
	movq	%rax, -976(%rbp)
	jmp	.L24509
.L33877:
	movq	-976(%rbp), %r13
	movq	32(%r13), %r14
	movq	%r14, -1008(%rbp)
	jmp	.L24510
	.p2align 6,,7
.L24984:
	movq	-976(%rbp), %rcx
	movq	8(%rcx), %rax
	testq	%rax, %rax
	jne	.L31717
	movq	-976(%rbp), %rcx
	movq	16(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L24991
	cmpq	%rcx, 8(%rax)
	je	.L24994
.L24991:
	testq	%rax, %rax
	movq	%rax, -976(%rbp)
	je	.L24510
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L24509
	movq	-976(%rbp), %rcx
	movq	32(%rcx), %rax
	movq	%rax, -1008(%rbp)
	jmp	.L24510
	.p2align 6,,7
.L24994:
	movq	16(%rdx), %rax
	movq	%rdx, -976(%rbp)
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L24991
	movq	-976(%rbp), %r9
	cmpq	%r9, 8(%rax)
	je	.L24994
	jmp	.L24991
	.p2align 6,,7
.L33241:
	movq	-976(%rbp), %rbx
	movq	constructor_unfilled_index(%rip), %rsi
	movq	32(%rbx), %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L24513
	movq	constructor_type(%rip), %r11
	movq	40(%rbx), %r12
	movq	constructor_unfilled_index(%rip), %r15
	movq	8(%r11), %rsi
	movq	%rsi, -360(%rbp)
	movq	8(%r12), %rbx
	movzbl	16(%rbx), %eax
	movq	%rbx, %rdx
	cmpb	$23, %al
	je	.L24515
	cmpb	$18, %al
	je	.L33878
.L31184:
	movq	global_trees(%rip), %r8
.L31697:
	movzbl	16(%r12), %ecx
.L24514:
	cmpb	$-86, %cl
	je	.L33879
.L24602:
	cmpq	%r8, %r12
	je	.L33880
	testb	$2, 17(%r12)
	jne	.L24605
	movl	$0, constructor_constant(%rip)
.L24604:
	movl	require_constant_value(%rip), %r14d
	testl	%r14d, %r14d
	je	.L24609
	testb	$2, 17(%r12)
	je	.L33881
.L24609:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L33882
.L24634:
	testq	%r15, %r15
	je	.L24636
	movq	8(%r15), %rax
	cmpq	global_trees(%rip), %rax
	je	.L24509
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L33883
.L24636:
	movq	-360(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%r12, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -984(%rbp)
	je	.L31720
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L33884
.L24640:
	cmpb	$20, 16(%rdi)
	je	.L33885
.L24661:
	cmpb	$21, 16(%rdi)
	je	.L33886
.L24660:
	testq	%r15, %r15
	je	.L24728
	cmpb	$25, 16(%r15)
	je	.L33887
.L24728:
	movq	constructor_elements(%rip), %rdx
	movq	-984(%rbp), %rsi
	movq	%r15, %rdi
	call	tree_cons
	movq	constructor_type(%rip), %r15
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r15), %eax
	movq	%r15, %rdx
	cmpb	$18, %al
	je	.L32079
	cmpb	$20, %al
	jne	.L24974
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24973
	testb	$2, 53(%rax)
	je	.L24973
	cmpq	$0, 72(%rax)
	jne	.L24973
.L24736:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24973
	testb	$2, 53(%rax)
	je	.L24973
	cmpq	$0, 72(%rax)
	jne	.L24973
	jmp	.L24736
.L33887:
	movq	%r15, %rdi
	call	copy_node
	movq	%rax, %r15
	jmp	.L24728
.L33886:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L24660
	movq	32(%rax), %rcx
	testb	$1, 17(%rcx)
	jne	.L33888
.L24703:
	movq	$0, constructor_elements(%rip)
	jmp	.L24660
.L33888:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r10
	xorl	%r12d, %r12d
	cmpq	%r10, %r8
	movq	%r8, %rbx
	movq	%r10, %r13
	jae	.L30475
.L24710:
	cmpl	$3, (%rbx)
	je	.L33889
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L24706:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L24710
.L30475:
	movslq	%r12d,%rdx
	movq	%r8, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30477
.L24724:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33890
	cmpl	$2, %eax
	je	.L33891
.L24718:
	movq	8(%r12), %rsi
	movzbl	(%rsi), %edi
	leaq	1(%rsi), %rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	je	.L24714
.L24723:
	movzbl	(%rcx), %r13d
	incq	%rbx
	incq	%rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	jne	.L24723
.L24714:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L24724
.L30477:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L24703
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L24703
.L33891:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L24718
.L33890:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L24714
.L33889:
	addl	$25, %r12d
	jmp	.L24706
.L33885:
	movl	constructor_incremental(%rip), %r9d
	testl	%r9d, %r9d
	je	.L24663
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, %r15
	je	.L24661
	testq	%rax, %rax
	jne	.L24664
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L24671
.L30469:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L33892
.L24691:
	cmpb	$18, 16(%rdi)
	je	.L33893
.L24697:
	movl	$0, constructor_incremental(%rip)
.L24663:
	movq	-984(%rbp), %rsi
	movq	%r15, %rdi
	jmp	.L31719
.L33893:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L33894
	movq	global_trees+136(%rip), %rax
.L31700:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L24697
.L33894:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31700
.L33892:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24697
	testb	$2, 53(%rax)
	je	.L24697
	cmpq	$0, 72(%rax)
	jne	.L24697
.L24677:
	movq	constructor_unfilled_fields(%rip), %r8
	movq	(%r8), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24697
	testb	$2, 53(%rax)
	je	.L24697
	cmpq	$0, 72(%rax)
	jne	.L24697
	jmp	.L24677
	.p2align 6,,7
.L24671:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L24671
	movq	constructor_type(%rip), %rdi
	jmp	.L30469
.L24664:
	movq	%r15, %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r14
	call	bit_position
	movq	%r14, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L24663
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L24684
	cmpb	$18, %al
	jne	.L24663
.L24684:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L24690
.L30472:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L24691
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24697
	testb	$2, 53(%rax)
	je	.L24697
	cmpq	$0, 72(%rax)
	jne	.L24697
.L24696:
	movq	constructor_unfilled_fields(%rip), %r11
	movq	(%r11), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24697
	testb	$2, 53(%rax)
	je	.L24697
	cmpq	$0, 72(%rax)
	jne	.L24697
	jmp	.L24696
.L24690:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L24690
	movq	constructor_type(%rip), %rdi
	jmp	.L30472
	.p2align 6,,7
.L33884:
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L24663
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31191
	movl	constructor_incremental(%rip), %esi
	testl	%esi, %esi
	je	.L24663
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L24663
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L24643
	cmpb	$18, %al
	jne	.L24663
.L24643:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L24649
.L30466:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L24691
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24697
	testb	$2, 53(%rax)
	je	.L24697
	cmpq	$0, 72(%rax)
	jne	.L24697
.L24655:
	movq	constructor_unfilled_fields(%rip), %r13
	movq	(%r13), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24697
	testb	$2, 53(%rax)
	je	.L24697
	cmpq	$0, 72(%rax)
	jne	.L24697
	jmp	.L24655
.L24649:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L24649
	movq	constructor_type(%rip), %rdi
	jmp	.L30466
.L31191:
	movq	constructor_type(%rip), %rdi
	jmp	.L24640
	.p2align 6,,7
.L33883:
	call	integer_zerop
	testl	%eax, %eax
	je	.L24636
	movq	constructor_type(%rip), %rbx
	cmpb	$18, 16(%rbx)
	je	.L24509
	cmpq	$0, (%r15)
	jne	.L24509
	jmp	.L24636
	.p2align 6,,7
.L33882:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L24634
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L24634
	.p2align 6,,7
.L33881:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r11
	xorl	%r12d, %r12d
	cmpq	%r11, %r8
	movq	%r8, %rbx
	movq	%r11, %r13
	jae	.L30461
.L24616:
	cmpl	$3, (%rbx)
	je	.L33895
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L24612:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L24616
.L30461:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30463
.L24630:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33896
	cmpl	$2, %eax
	je	.L33897
.L24624:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r10d
	leaq	1(%rdx), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L24620
.L24629:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L24629
.L24620:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L24630
.L30463:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L33898
.L24633:
	movq	global_trees(%rip), %r12
	jmp	.L24634
.L33898:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L24633
	.p2align 6,,7
.L33897:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L24624
.L33896:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L24620
.L33895:
	addl	$25, %r12d
	jmp	.L24612
.L24605:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L24608
	movq	constructor_type(%rip), %r9
	movzbl	16(%r9), %r8d
	subb	$20, %r8b
	cmpb	$1, %r8b
	ja	.L24604
	testb	$2, 53(%r15)
	je	.L24604
	cmpb	$25, 16(%r12)
	je	.L24604
.L24608:
	movl	$0, constructor_simple(%rip)
	jmp	.L24604
	.p2align 6,,7
.L33880:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L24604
.L33879:
	movl	require_constant_value(%rip), %ebx
	testl	%ebx, %ebx
	je	.L24602
	movl	flag_isoc99(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L24602
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L24602
	movq	32(%r12), %r13
	movq	32(%r13), %rsi
	movq	104(%rsi), %r12
	jmp	.L24602
	.p2align 6,,7
.L33878:
	movzbl	16(%r12), %ecx
	cmpb	$29, %cl
	je	.L33899
.L24516:
	movq	-360(%rbp), %rcx
	movq	128(%rdx), %rdi
	movq	128(%rcx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L31184
	movq	8(%r12), %rbx
.L24515:
	movzbl	16(%rbx), %r13d
	cmpl	$23, %r13d
	je	.L24518
	cmpl	$18, %r13d
	je	.L24518
	movzbl	16(%r12), %ecx
	cmpb	$32, %cl
	je	.L33900
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L24575
	cmpb	$34, %cl
	je	.L33901
.L24575:
	cmpb	$116, %cl
	movq	%r12, %rdx
	je	.L31190
	cmpb	$115, %cl
	je	.L33902
.L24584:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L24589
	cmpb	$49, %al
	je	.L24589
	cmpb	$50, %al
	je	.L24589
	cmpb	$101, %al
	je	.L24589
.L24588:
	cmpl	$10, %r13d
	je	.L33903
	cmpb	$39, %cl
	je	.L33904
.L24594:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L24597
	testb	$32, 17(%rbx)
	je	.L24598
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L24599
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%rbx), %r11d
	movzwl	60(%rdx), %ecx
	andl	$511, %r11d
	andl	$511, %ecx
	cmpl	%ecx, %r11d
	je	.L24599
.L24598:
	movq	integer_types+40(%rip), %rdi
.L31996:
	movq	%r12, %rsi
.L31997:
	call	convert
.L31696:
	movq	%rax, %rbx
.L31687:
	movq	global_trees(%rip), %r8
.L24573:
	movq	%rbx, %r12
	jmp	.L31697
.L24599:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31996
.L24597:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L24600
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L24600
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%rbx)
	je	.L33905
.L24600:
	cmpl	$5, %r13d
	je	.L33906
.L24601:
	movq	%r12, %rbx
	jmp	.L31687
.L33906:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31688:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L24573
.L33905:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31996
.L33904:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L24594
	movq	integer_types+40(%rip), %r14
	movq	40(%rdx), %rdi
	movzwl	60(%r14), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L24594
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L24598
	testb	$32, 17(%rbx)
	jne	.L24599
	jmp	.L24598
.L33903:
	movq	integer_types+40(%rip), %r9
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%r9), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L24593
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L24592
.L24593:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L24592:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31996
	.p2align 6,,7
.L24589:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L24588
.L33902:
	movq	32(%r12), %rsi
	movq	8(%r12), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L24584
.L24587:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L33907
.L31190:
	movq	32(%r12), %rsi
	jmp	.L24587
.L33907:
	cmpb	$115, %cl
	jne	.L24584
	movq	32(%rsi), %r8
	movq	8(%r12), %rdi
	cmpq	%rdi, 8(%r8)
	movq	%r8, %rsi
	je	.L24587
	jmp	.L24584
.L33901:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	jne	.L24575
	cmpb	$51, 48(%r12)
	je	.L24575
	cmpq	$0, current_function_decl(%rip)
	je	.L24581
	movzbl	17(%r12), %ebx
	andb	$24, %bl
	cmpb	$16, %bl
	je	.L33908
.L24581:
	movq	%r12, %rsi
.L24582:
	movq	%rsi, %r12
	movq	8(%rsi), %rbx
.L31686:
	movzbl	16(%r12), %ecx
	jmp	.L24575
.L33908:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L24581
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L24581
	testb	$2, 17(%rax)
	je	.L24581
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L24582
	jmp	.L24581
.L33900:
	movq	104(%r12), %r12
	jmp	.L31686
	.p2align 6,,7
.L24518:
	movzbl	16(%r12), %ecx
	xorl	%r14d, %r14d
	movl	%r13d, %edi
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L31186
	cmpb	$115, %cl
	je	.L33909
.L24520:
	movzbl	%cl, %r13d 
	movzbl	tree_code_type(%r13), %eax
	cmpb	$60, %al
	je	.L24526
	cmpb	$49, %al
	je	.L24526
	cmpb	$50, %al
	je	.L24526
	cmpb	$101, %al
	je	.L24526
.L24525:
	cmpl	$23, %edi
	je	.L33910
	cmpl	$18, %edi
	jne	.L24601
	movzbl	%cl, %edi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rdi), %eax
	movq	8(%rbx), %r13
	cmpb	$114, %al
	je	.L24531
	cmpb	$100, %al
	je	.L24531
.L24530:
	movzbl	17(%rbx), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %edi
	shrb	$3, %r10b
	shrb	$4, %dil
	andl	$1, %r10d
	andl	%edi, %r9d
	movzbl	16(%rbx), %edi
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rbx), %r10d
	movl	%r10d, %esi
	shrb	$5, %sil
	andl	$1, %esi
	sall	$2, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	cmpb	$20, %dil
	je	.L33911
.L24534:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L24533
	testl	%edx, %edx
	jne	.L24533
	testl	%r11d, %r11d
	je	.L24532
.L24533:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %r9d
	movl	%r8d, %ecx
	andl	%ebx, %esi
	andl	$1, %r9d
	andl	$1, %ecx
	sall	$2, %r9d
	addl	%ecx, %ecx
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	orl	%r9d, %esi
	cmpb	$20, %dil
	je	.L33912
.L24535:
	leal	0(,%rcx,8), %r8d
	movq	%r13, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L24532:
	cmpb	$41, %cl
	je	.L33913
	cmpb	$47, %cl
	je	.L33914
	xorl	%ebx, %ebx
	testl	%r14d, %r14d
	je	.L33915
.L24569:
	movl	flag_isoc99(%rip), %r14d
	testl	%r14d, %r14d
	jne	.L24570
	testl	%ebx, %ebx
	je	.L24601
.L24570:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L33916
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L31997
.L33916:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L31688
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %ecx
	andb	$1, %cl
	addb	%cl, %cl
	andb	$-4, %r12b
	orb	%cl, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L31687
.L33915:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L24569
.L33914:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L24539
	cmpl	$18, %r14d
	je	.L24539
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L33917
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L24542
	cmpb	$34, %dl
	je	.L33918
.L24542:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L31188
	cmpb	$115, %dl
	je	.L33919
.L24551:
	movzbl	%dl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L24556
	cmpb	$49, %al
	je	.L24556
	cmpb	$50, %al
	je	.L24556
	cmpb	$101, %al
	je	.L24556
.L24555:
	cmpl	$10, %r14d
	je	.L33920
	cmpb	$39, %dl
	je	.L33921
.L24561:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L24564
	testb	$32, 17(%r13)
	je	.L24565
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L24566
	movq	integer_types+40(%rip), %r10
	movzwl	60(%r13), %esi
	movzwl	60(%r10), %r13d
	andl	$511, %esi
	andl	$511, %r13d
	cmpl	%r13d, %esi
	je	.L24566
.L24565:
	movq	integer_types+40(%rip), %rdi
.L31685:
	movq	%rbx, %rsi
	call	convert
.L24540:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31696
.L24566:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31685
.L24564:
	movl	flag_traditional(%rip), %edi
	testl	%edi, %edi
	je	.L24567
	movl	flag_allow_single_precision(%rip), %r8d
	testl	%r8d, %r8d
	jne	.L24567
	movq	global_trees+192(%rip), %r9
	cmpq	%r9, 128(%r13)
	je	.L33922
.L24567:
	cmpl	$5, %r14d
	je	.L33923
	movq	%rbx, %rax
	jmp	.L24540
.L33923:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L24540
.L33922:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31685
.L33921:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L24561
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L24561
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L24565
	testb	$32, 17(%r13)
	jne	.L24566
	jmp	.L24565
.L33920:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L24560
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L24559
.L24560:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L24559:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31685
.L24556:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L24555
.L33919:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L24551
.L24554:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L33924
.L31188:
	movq	32(%rbx), %rsi
	jmp	.L24554
.L33924:
	cmpb	$115, %dl
	jne	.L24551
	movq	32(%rsi), %r9
	movq	8(%rbx), %rdi
	cmpq	%rdi, 8(%r9)
	movq	%r9, %rsi
	je	.L24554
	jmp	.L24551
.L33918:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L24546
	cmpb	$51, 48(%rbx)
	je	.L24546
	cmpq	$0, current_function_decl(%rip)
	je	.L24548
	movzbl	17(%rbx), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L33925
.L24548:
	movq	%rbx, %rsi
.L24549:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L24546:
	movq	%rax, %r13
	jmp	.L24542
.L33925:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L24548
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L24548
	testb	$2, 17(%rax)
	je	.L24548
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L24549
	jmp	.L24548
.L33917:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L24542
.L24539:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L24540
.L33913:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L31997
.L33912:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L24535
.L33911:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L24534
.L24531:
	movzbl	17(%r12), %r8d
	movl	$1, %r11d
	movl	%r8d, %edx
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	%r8d, %r11d
	andl	$1, %edx
	jmp	.L24530
.L33910:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31696
	.p2align 6,,7
.L24526:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L24525
.L33909:
	movq	32(%r12), %rsi
	cmpq	%rbx, 8(%rsi)
	jne	.L24520
.L24524:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r14d
	cmpb	$116, %cl
	jne	.L33926
.L31186:
	movq	32(%r12), %rsi
	jmp	.L24524
.L33926:
	cmpb	$115, %cl
	jne	.L24520
	movq	32(%rsi), %rsi
	movq	8(%r12), %r10
	cmpq	%r10, 8(%rsi)
	je	.L24524
	jmp	.L24520
.L33899:
	movq	-360(%rbp), %rsi
	cmpb	$18, 16(%rsi)
	jne	.L24516
	movq	8(%rsi), %r9
	cmpb	$6, 16(%r9)
	jne	.L24516
	movq	global_trees(%rip), %r8
	jmp	.L24514
	.p2align 6,,7
.L24513:
	movq	-976(%rbp), %r9
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%r9), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L24741
	movq	-976(%rbp), %r8
	movq	(%r8), %rax
	testq	%rax, %rax
	jne	.L31717
	movq	-976(%rbp), %r14
	movq	32(%r14), %rax
	movq	%rax, -1008(%rbp)
	jmp	.L24510
	.p2align 6,,7
.L24741:
	movq	-976(%rbp), %r11
	movq	8(%r11), %rax
	testq	%rax, %rax
	jne	.L31717
	movq	-976(%rbp), %rsi
	movq	16(%rsi), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L24748
	cmpq	%rsi, 8(%rax)
	je	.L24751
.L24748:
	testq	%rax, %rax
	movq	%rax, -976(%rbp)
	je	.L24510
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L24509
	movq	-976(%rbp), %rdx
	movq	32(%rdx), %rcx
	movq	%rcx, -1008(%rbp)
	jmp	.L24510
	.p2align 6,,7
.L24751:
	movq	16(%rdx), %rax
	movq	%rdx, -976(%rbp)
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L24748
	movq	-976(%rbp), %r10
	cmpq	%r10, 8(%rax)
	je	.L24751
	jmp	.L24748
.L33240:
	movq	constructor_unfilled_fields(%rip), %rax
	testq	%rax, %rax
	je	.L24471
.L31359:
	movq	40(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L33927
.L24476:
	movq	(%rax), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	jne	.L31359
	jmp	.L24471
.L33927:
	call	integer_zerop
	testl	%eax, %eax
	je	.L33928
	movq	constructor_unfilled_fields(%rip), %rax
	jmp	.L24476
.L33928:
	movq	constructor_unfilled_fields(%rip), %rax
	testq	%rax, %rax
	je	.L24471
	movl	constructor_designated(%rip), %r11d
	testl	%r11d, %r11d
	jne	.L24471
	movq	72(%rax), %rax
	movl	$.LC159, %r12d
	testq	%rax, %rax
	je	.L24479
	movq	32(%rax), %r12
.L24479:
	movq	spelling(%rip), %rcx
	movq	spelling_base(%rip), %rdi
	movl	spelling_size(%rip), %eax
	movq	%rcx, %r9
	subq	%rdi, %r9
	movq	%r9, %rbx
	shrq	$4, %rbx
	cmpl	%eax, %ebx
	jl	.L24480
	addl	$10, %eax
	testq	%rdi, %rdi
	movl	%eax, spelling_size(%rip)
	jne	.L24481
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L31684:
	movslq	%ebx,%rcx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rcx
	addq	spelling_base(%rip), %rcx
	movq	%rcx, spelling(%rip)
.L24480:
	movq	%r12, 8(%rcx)
	movl	$2, (%rcx)
	xorl	%eax, %eax
	addq	$16, %rcx
	movl	$.LC42, %edi
	movl	$.LC175, %esi
	movq	%rcx, spelling(%rip)
	xorl	%r12d, %r12d
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdx
	cmpq	%rdx, %r8
	movq	%r8, %rbx
	movq	%rdx, %r13
	jae	.L30452
.L24490:
	cmpl	$3, (%rbx)
	je	.L33929
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L24486:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L24490
.L30452:
	movslq	%r12d,%r10
	movq	%r8, %r12
	addq	$16, %r10
	andq	$-16, %r10
	subq	%r10, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30454
.L24504:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33930
	cmpl	$2, %eax
	je	.L33931
.L24498:
	movq	8(%r12), %r13
	movzbl	(%r13), %r15d
	leaq	1(%r13), %rcx
	testb	%r15b, %r15b
	movb	%r15b, (%rbx)
	je	.L24494
.L24503:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L24503
.L24494:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L24504
.L30454:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L33932
.L24507:
	movslq	constructor_depth(%rip),%r12
	salq	$4, %r12
	addq	spelling_base(%rip), %r12
	movq	%r12, spelling(%rip)
	jmp	.L24471
.L33932:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L24507
.L33931:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L24498
.L33930:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L24494
.L33929:
	addl	$25, %r12d
	jmp	.L24486
.L24481:
	movslq	%eax,%rsi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L31684
	.p2align 6,,7
.L24407:
	cmpb	$18, 16(%rdi)
	jne	.L24405
	movq	constructor_max_index(%rip), %rax
	testq	%rax, %rax
	jne	.L33933
.L25072:
	movq	$0, -1064(%rbp)
	movq	-1296(%rbp), %r11
	testq	%rdi, %rdi
	movq	%r11, -376(%rbp)
	je	.L25079
	cmpq	$0, constructor_fields(%rip)
	je	.L25079
	cmpb	$18, 16(%rdi)
	je	.L33934
.L25079:
	movl	extra_warnings(%rip), %eax
	testl	%eax, %eax
	je	.L25136
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L25136
	cmpb	$20, 16(%rax)
	je	.L33935
.L25136:
	movl	$1, constructor_incremental(%rip)
	movq	constructor_pending_elts(%rip), %r15
.L25173:
	testq	%r15, %r15
	movq	$0, -1056(%rbp)
	je	.L25175
.L25661:
	movq	constructor_type(%rip), %r14
	movzbl	16(%r14), %eax
	cmpb	$18, %al
	je	.L33936
	subb	$20, %al
	cmpb	$1, %al
	ja	.L25174
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L25175
	call	bit_position
	movq	32(%r15), %rdi
	movq	%rax, %r12
	call	bit_position
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L25421
	movq	32(%r15), %rdi
	movq	40(%r15), %rbx
	movq	%rdi, -392(%rbp)
	movq	%rdi, constructor_unfilled_fields(%rip)
	movq	-392(%rbp), %r10
	movq	8(%rdi), %rdx
	movq	%r10, -1048(%rbp)
	movq	%rdx, -400(%rbp)
	movq	8(%rbx), %r12
	movzbl	16(%r12), %eax
	movq	%r12, %rdx
	cmpb	$23, %al
	je	.L25423
	cmpb	$18, %al
	je	.L33937
.L31215:
	movq	global_trees(%rip), %r8
.L31752:
	movzbl	16(%rbx), %ecx
.L25422:
	cmpb	$-86, %cl
	je	.L33938
.L25510:
	cmpq	%r8, %rbx
	je	.L33939
	testb	$2, 17(%rbx)
	jne	.L25513
	movl	$0, constructor_constant(%rip)
.L25512:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L25517
	testb	$2, 17(%rbx)
	je	.L33940
.L25517:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L33941
.L25542:
	cmpq	$0, -392(%rbp)
	je	.L25544
	movq	-392(%rbp), %r12
	movq	8(%r12), %rax
	cmpq	global_trees(%rip), %rax
	je	.L25174
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L33942
.L25544:
	movq	-400(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%rbx, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -1040(%rbp)
	je	.L31759
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L33943
.L25548:
	cmpb	$20, 16(%rdi)
	je	.L33944
.L25569:
	cmpb	$21, 16(%rdi)
	je	.L33945
.L25568:
	cmpq	$0, -392(%rbp)
	je	.L25636
	movq	-392(%rbp), %rbx
	cmpb	$25, 16(%rbx)
	je	.L33946
.L25636:
	movq	-1048(%rbp), %rdi
	movq	-1040(%rbp), %rsi
	movq	constructor_elements(%rip), %rdx
	call	tree_cons
	movq	constructor_type(%rip), %r12
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r12), %eax
	cmpb	$18, %al
	je	.L33947
	cmpb	$20, %al
	je	.L33948
	cmpb	$21, 16(%r12)
	je	.L33949
.L25638:
	xorl	%r10d, %r10d
	testl	%r10d, %r10d
.L32004:
	jne	.L33950
.L25174:
	testq	%r15, %r15
	jne	.L25661
.L25175:
	movl	$1, %r14d
	testl	%r14d, %r14d
	je	.L25664
	cmpq	$0, -1056(%rbp)
	je	.L25664
	movq	constructor_type(%rip), %r9
	movzbl	16(%r9), %edx
	leal	-20(%rdx), %edi
	cmpb	$1, %dil
	jbe	.L33951
	cmpb	$18, %dl
	jne	.L25173
	movq	-1056(%rbp), %r8
	movq	%r8, constructor_unfilled_index(%rip)
	jmp	.L25173
.L33951:
	movq	-1056(%rbp), %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	jmp	.L25173
	.p2align 6,,7
.L25664:
	movq	-1296(%rbp), %r15
	movq	88(%r15), %rax
	testq	%rax, %rax
	jne	.L31760
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L25669
	movzbl	16(%rax), %edx
	leal	-20(%rdx), %ebx
	cmpb	$1, %bl
	jbe	.L25672
	cmpb	$18, %dl
	je	.L25672
	cmpb	$9, %dl
	je	.L25672
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	jne	.L25673
	movl	constructor_erroneous(%rip), %eax
	testl	%eax, %eax
	je	.L33952
.L25674:
	movq	global_trees(%rip), %rax
.L31760:
	movq	%rax, -1064(%rbp)
.L25669:
	movq	-1296(%rbp), %rbx
	movsbl	109(%rbx),%edx
	movq	8(%rbx), %r13
	movsbl	104(%rbx),%edi
	movsbl	105(%rbx),%ecx
	movsbl	107(%rbx),%r14d
	movsbl	110(%rbx),%r10d
	cmpb	$0, 106(%rbx)
	movq	16(%rbx), %rax
	movq	%r13, constructor_type(%rip)
	movq	24(%rbx), %rsi
	movq	32(%rbx), %r11
	movl	%edx, constructor_incremental(%rip)
	movq	40(%rbx), %r15
	movq	48(%rbx), %r12
	movl	%edi, constructor_constant(%rip)
	movq	56(%rbx), %r8
	movq	64(%rbx), %r9
	movq	%rax, constructor_fields(%rip)
	movq	72(%rbx), %r13
	movl	84(%rbx), %edx
	movq	%rsi, constructor_index(%rip)
	movq	%r11, constructor_max_index(%rip)
	movq	%r15, constructor_unfilled_index(%rip)
	movq	%r12, constructor_unfilled_fields(%rip)
	movq	%r8, constructor_bit_index(%rip)
	movq	%r9, constructor_elements(%rip)
	movl	%ecx, constructor_simple(%rip)
	movl	%r14d, constructor_erroneous(%rip)
	movl	%r10d, constructor_designated(%rip)
	movq	%r13, constructor_pending_elts(%rip)
	movl	%edx, constructor_depth(%rip)
	jne	.L25731
	movq	96(%rbx), %r10
	movq	%r10, constructor_range_stack(%rip)
.L25731:
	movslq	%edx,%r14
	movq	-376(%rbp), %rdi
	movq	-1296(%rbp), %rdx
	salq	$4, %r14
	addq	spelling_base(%rip), %r14
	movq	(%rdx), %rbx
	movq	%r14, spelling(%rip)
	movq	%rbx, constructor_stack(%rip)
	call	free
	movq	-1064(%rbp), %rdi
	jmp	.L32140
.L33952:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC176, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r11
	xorl	%r12d, %r12d
	cmpq	%r11, %r8
	movq	%r8, %rbx
	movq	%r11, %r13
	jae	.L30582
.L25681:
	cmpl	$3, (%rbx)
	je	.L33953
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L25677:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L25681
.L30582:
	movslq	%r12d,%rsi
	movq	%r8, %r12
	addq	$16, %rsi
	andq	$-16, %rsi
	subq	%rsi, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30584
.L25695:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33954
	cmpl	$2, %eax
	je	.L33955
.L25689:
	movq	8(%r12), %r10
	movzbl	(%r10), %r13d
	leaq	1(%r10), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L25685
.L25694:
	movzbl	(%rcx), %edx
	incq	%rbx
	incq	%rcx
	testb	%dl, %dl
	movb	%dl, (%rbx)
	jne	.L25694
.L25685:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L25695
.L30584:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L25674
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L25674
.L33955:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L25689
.L33954:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L25685
.L33953:
	addl	$25, %r12d
	jmp	.L25677
.L25673:
	cmpq	$0, (%rax)
	jne	.L33956
.L25700:
	movq	32(%rax), %rax
	jmp	.L31760
.L33956:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC177, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r14
	xorl	%r12d, %r12d
	cmpq	%r14, %r8
	movq	%r8, %rbx
	movq	%r14, %r13
	jae	.L30587
.L25707:
	cmpl	$3, (%rbx)
	je	.L33957
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L25703:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L25707
.L30587:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30589
.L25721:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33958
	cmpl	$2, %eax
	je	.L33959
.L25715:
	movq	8(%r12), %r9
	movzbl	(%r9), %edi
	leaq	1(%r9), %rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	je	.L25711
.L25720:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L25720
.L25711:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L25721
.L30589:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L33960
.L25724:
	movq	constructor_elements(%rip), %rax
	jmp	.L25700
.L33960:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L25724
.L33959:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L25715
.L33958:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L25711
.L33957:
	addl	$25, %r12d
	jmp	.L25703
.L25672:
	movl	constructor_erroneous(%rip), %r12d
	testl	%r12d, %r12d
	je	.L25727
	movq	global_trees(%rip), %rax
	movq	%rax, -1064(%rbp)
	jmp	.L25669
.L25727:
	movq	constructor_elements(%rip), %rdi
	call	nreverse
	xorl	%edx, %edx
	movq	constructor_type(%rip), %rsi
	movq	%rax, %rcx
	movl	$46, %edi
	xorl	%eax, %eax
	call	build
	movl	constructor_constant(%rip), %r15d
	movq	%rax, -1064(%rbp)
	testl	%r15d, %r15d
	je	.L25669
	orb	$2, 17(%rax)
	movl	constructor_constant(%rip), %ebx
	testl	%ebx, %ebx
	je	.L25669
	movl	constructor_simple(%rip), %r11d
	testl	%r11d, %r11d
	je	.L25669
	movq	-1064(%rbp), %rsi
	orb	$4, 18(%rsi)
	jmp	.L25669
	.p2align 6,,7
.L33950:
	xorl	%edi, %edi
	call	output_pending_init_elements
	jmp	.L25174
.L33949:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L25638
.L33948:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L25638
	testb	$2, 53(%rax)
	je	.L25638
	cmpq	$0, 72(%rax)
	jne	.L25638
.L25644:
	movq	constructor_unfilled_fields(%rip), %r13
	movq	(%r13), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L25638
	testb	$2, 53(%rax)
	je	.L25638
	cmpq	$0, 72(%rax)
	jne	.L25638
	jmp	.L25644
.L33947:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L25638
.L33946:
	movq	%rbx, %rdi
	call	copy_node
	movq	%rax, -1048(%rbp)
	jmp	.L25636
.L33945:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L25568
	movq	32(%rax), %r9
	testb	$1, 17(%r9)
	jne	.L33961
.L25611:
	movq	$0, constructor_elements(%rip)
	jmp	.L25568
.L33961:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L30575
.L25618:
	cmpl	$3, (%rbx)
	je	.L33962
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L25614:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L25618
.L30575:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30577
.L25632:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33963
	cmpl	$2, %eax
	je	.L33964
.L25626:
	movq	8(%r12), %r11
	movzbl	(%r11), %r8d
	leaq	1(%r11), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L25622
.L25631:
	movzbl	(%rcx), %esi
	incq	%rbx
	incq	%rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	jne	.L25631
.L25622:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L25632
.L30577:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L25611
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L25611
	.p2align 6,,7
.L33964:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L25626
.L33963:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L25622
	.p2align 6,,7
.L33962:
	addl	$25, %r12d
	jmp	.L25614
.L33944:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L25571
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, -392(%rbp)
	je	.L25569
	testq	%rax, %rax
	jne	.L25572
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L25579
.L30569:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L33965
.L25599:
	cmpb	$18, 16(%rdi)
	je	.L33966
.L25605:
	movl	$0, constructor_incremental(%rip)
.L25571:
	movq	-392(%rbp), %rdi
	movq	-1040(%rbp), %rsi
.L31758:
	call	add_pending_init
	jmp	.L25174
.L33966:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L33967
	movq	global_trees+136(%rip), %rax
.L31755:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L25605
.L33967:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31755
.L33965:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L25605
	testb	$2, 53(%rax)
	je	.L25605
	cmpq	$0, 72(%rax)
	jne	.L25605
.L25585:
	movq	constructor_unfilled_fields(%rip), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L25605
	testb	$2, 53(%rax)
	je	.L25605
	cmpq	$0, 72(%rax)
	jne	.L25605
	jmp	.L25585
.L25579:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L25579
	movq	constructor_type(%rip), %rdi
	jmp	.L30569
.L25572:
	movq	-392(%rbp), %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r14
	call	bit_position
	movq	%r14, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L25571
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L25592
	cmpb	$18, %al
	jne	.L25571
.L25592:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L25598
.L30572:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L25599
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L25605
	testb	$2, 53(%rax)
	je	.L25605
	cmpq	$0, 72(%rax)
	jne	.L25605
.L25604:
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L25605
	testb	$2, 53(%rax)
	je	.L25605
	cmpq	$0, 72(%rax)
	jne	.L25605
	jmp	.L25604
	.p2align 6,,7
.L25598:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L25598
	movq	constructor_type(%rip), %rdi
	jmp	.L30572
	.p2align 6,,7
.L33943:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L25571
	movq	-392(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31222
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L25571
	movq	-392(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L25571
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L25551
	cmpb	$18, %al
	jne	.L25571
.L25551:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L25557
.L30566:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L25599
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L25605
	testb	$2, 53(%rax)
	je	.L25605
	cmpq	$0, 72(%rax)
	jne	.L25605
.L25563:
	movq	constructor_unfilled_fields(%rip), %r10
	movq	(%r10), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L25605
	testb	$2, 53(%rax)
	je	.L25605
	cmpq	$0, 72(%rax)
	jne	.L25605
	jmp	.L25563
.L25557:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L25557
	movq	constructor_type(%rip), %rdi
	jmp	.L30566
	.p2align 6,,7
.L31222:
	movq	constructor_type(%rip), %rdi
	jmp	.L25548
.L31759:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L25174
.L33942:
	call	integer_zerop
	testl	%eax, %eax
	je	.L25544
	movq	constructor_type(%rip), %rcx
	cmpb	$18, 16(%rcx)
	je	.L25174
	movq	-392(%rbp), %r13
	cmpq	$0, (%r13)
	jne	.L25174
	jmp	.L25544
.L33941:
	movq	8(%rbx), %rsi
	movq	%rbx, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L25542
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L25542
.L33940:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r14
	xorl	%r12d, %r12d
	cmpq	%r14, %r8
	movq	%r8, %rbx
	movq	%r14, %r13
	jae	.L30561
.L25524:
	cmpl	$3, (%rbx)
	je	.L33968
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L25520:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L25524
.L30561:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30563
.L25538:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L33969
	cmpl	$2, %eax
	je	.L33970
.L25532:
	movq	8(%r12), %r11
	movzbl	(%r11), %r8d
	leaq	1(%r11), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L25528
.L25537:
	movzbl	(%rcx), %esi
	incq	%rbx
	incq	%rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	jne	.L25537
.L25528:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L25538
.L30563:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L33971
.L25541:
	movq	global_trees(%rip), %rbx
	jmp	.L25542
.L33971:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L25541
.L33970:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L25532
.L33969:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L25528
.L33968:
	addl	$25, %r12d
	jmp	.L25520
.L25513:
	movq	8(%rbx), %rsi
	movq	%rbx, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L25516
	movq	constructor_type(%rip), %r9
	movzbl	16(%r9), %edi
	subb	$20, %dil
	cmpb	$1, %dil
	ja	.L25512
	movq	-392(%rbp), %rax
	testb	$2, 53(%rax)
	je	.L25512
	cmpb	$25, 16(%rbx)
	je	.L25512
.L25516:
	movl	$0, constructor_simple(%rip)
	jmp	.L25512
.L33939:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L25512
.L33938:
	movl	require_constant_value(%rip), %esi
	testl	%esi, %esi
	je	.L25510
	movl	flag_isoc99(%rip), %ecx
	testl	%ecx, %ecx
	jne	.L25510
	xorl	%r13d, %r13d
	testl	%r13d, %r13d
	je	.L25510
	movq	32(%rbx), %rdx
	movq	32(%rdx), %r10
	movq	104(%r10), %rbx
	jmp	.L25510
.L33937:
	movzbl	16(%rbx), %ecx
	cmpb	$29, %cl
	je	.L33972
.L25424:
	movq	-400(%rbp), %r9
	movq	128(%rdx), %rdi
	movq	128(%r9), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L31215
	movq	8(%rbx), %r12
.L25423:
	movzbl	16(%r12), %r13d
	cmpl	$23, %r13d
	je	.L25426
	cmpl	$18, %r13d
	je	.L25426
	movzbl	16(%rbx), %ecx
	cmpb	$32, %cl
	je	.L33973
	movl	optimize(%rip), %edi
	testl	%edi, %edi
	je	.L25483
	cmpb	$34, %cl
	je	.L33974
.L25483:
	cmpb	$116, %cl
	movq	%rbx, %rdx
	je	.L31221
	cmpb	$115, %cl
	je	.L33975
.L25492:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L25497
	cmpb	$49, %al
	je	.L25497
	cmpb	$50, %al
	je	.L25497
	cmpb	$101, %al
	je	.L25497
.L25496:
	cmpl	$10, %r13d
	je	.L33976
	cmpb	$39, %cl
	je	.L33977
.L25502:
	movq	%r12, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L25505
	testb	$32, 17(%r12)
	je	.L25506
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L25507
	movzwl	60(%r12), %r9d
	movq	integer_types+40(%rip), %r12
	movzwl	60(%r12), %edi
	andl	$511, %r9d
	andl	$511, %edi
	cmpl	%edi, %r9d
	je	.L25507
.L25506:
	movq	integer_types+40(%rip), %rdi
.L32002:
	movq	%rbx, %rsi
.L32003:
	call	convert
.L31751:
	movq	%rax, %r12
.L31742:
	movq	global_trees(%rip), %r8
.L25481:
	movq	%r12, %rbx
	jmp	.L31752
.L25507:
	movq	integer_types+48(%rip), %rdi
	jmp	.L32002
.L25505:
	movl	flag_traditional(%rip), %r8d
	testl	%r8d, %r8d
	je	.L25508
	movl	flag_allow_single_precision(%rip), %r14d
	testl	%r14d, %r14d
	jne	.L25508
	movq	global_trees+192(%rip), %r11
	cmpq	%r11, 128(%r12)
	je	.L33978
.L25508:
	cmpl	$5, %r13d
	je	.L33979
.L25509:
	movq	%rbx, %r12
	jmp	.L31742
.L33979:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31743:
	movq	global_trees(%rip), %r8
	movq	%r8, %r12
	jmp	.L25481
.L33978:
	movq	global_trees+200(%rip), %rdi
	jmp	.L32002
	.p2align 6,,7
.L33977:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L25502
	movq	integer_types+40(%rip), %r10
	movq	40(%rdx), %rdi
	movzwl	60(%r10), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L25502
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	je	.L25506
	testb	$32, 17(%r12)
	jne	.L25507
	jmp	.L25506
	.p2align 6,,7
.L33976:
	movq	integer_types+40(%rip), %r13
	movzwl	60(%r12), %edx
	movl	flag_traditional(%rip), %ecx
	movzwl	60(%r13), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%ecx, %ecx
	jne	.L25501
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L25500
.L25501:
	testb	$32, 17(%r12)
	movl	$1, %eax
	cmovne	%eax, %esi
.L25500:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L32002
.L25497:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L25496
.L33975:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r8
	cmpq	%r8, 8(%rsi)
	jne	.L25492
.L25495:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %rbx
	cmpb	$116, %cl
	jne	.L33980
.L31221:
	movq	32(%rbx), %rsi
	jmp	.L25495
.L33980:
	cmpb	$115, %cl
	jne	.L25492
	movq	32(%rsi), %r11
	movq	8(%rbx), %r14
	cmpq	%r14, 8(%r11)
	movq	%r11, %rsi
	je	.L25495
	jmp	.L25492
.L33974:
	movl	pedantic(%rip), %r9d
	testl	%r9d, %r9d
	jne	.L25483
	cmpb	$51, 48(%rbx)
	je	.L25483
	cmpq	$0, current_function_decl(%rip)
	je	.L25489
	movzbl	17(%rbx), %r12d
	andb	$24, %r12b
	cmpb	$16, %r12b
	je	.L33981
.L25489:
	movq	%rbx, %rsi
.L25490:
	movq	%rsi, %rbx
	movq	8(%rsi), %r12
.L31741:
	movzbl	16(%rbx), %ecx
	jmp	.L25483
.L33981:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L25489
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L25489
	testb	$2, 17(%rax)
	je	.L25489
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L25490
	jmp	.L25489
	.p2align 6,,7
.L33973:
	movq	104(%rbx), %rbx
	jmp	.L31741
.L25426:
	movzbl	16(%rbx), %ecx
	movl	%r13d, %edi
	movq	%rbx, %rdx
	xorl	%r13d, %r13d
	cmpb	$116, %cl
	je	.L31217
	cmpb	$115, %cl
	je	.L33982
.L25428:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L25434
	cmpb	$49, %al
	je	.L25434
	cmpb	$50, %al
	je	.L25434
	cmpb	$101, %al
	je	.L25434
.L25433:
	cmpl	$23, %edi
	je	.L33983
	cmpl	$18, %edi
	jne	.L25509
	movzbl	%cl, %r10d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r10), %eax
	movq	8(%r12), %r14
	cmpb	$114, %al
	je	.L25439
	cmpb	$100, %al
	je	.L25439
.L25438:
	movzbl	17(%r12), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %edi
	shrb	$3, %r10b
	shrb	$4, %dil
	andl	$1, %r10d
	andl	%edi, %r9d
	movzbl	16(%r12), %edi
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%r12), %r10d
	movl	%r10d, %esi
	shrb	$5, %sil
	andl	$1, %esi
	sall	$2, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	cmpb	$20, %dil
	je	.L33984
.L25442:
	leal	0(,%rsi,8), %r12d
	orl	%r12d, %r9d
	jne	.L25441
	testl	%edx, %edx
	jne	.L25441
	testl	%r11d, %r11d
	je	.L25440
.L25441:
	movl	%r8d, %r12d
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r12b
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%r12d, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L33985
.L25443:
	leal	0(,%rcx,8), %r8d
	movq	%r14, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%rbx), %ecx
	movq	%rax, %r14
.L25440:
	cmpb	$41, %cl
	je	.L33986
	cmpb	$47, %cl
	je	.L33987
	xorl	%r12d, %r12d
	testl	%r13d, %r13d
	je	.L33988
.L25477:
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L25478
	testl	%r12d, %r12d
	je	.L25509
.L25478:
	movq	%r14, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %r12
	je	.L33989
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%r12, %rdi
	movq	%rax, %rsi
	jmp	.L32003
.L33989:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, %r12
	call	mark_addressable
	testl	%eax, %eax
	je	.L31743
	movq	%rbx, %rdi
	call	staticp
	movzbl	17(%r12), %ebx
	movl	%eax, %r10d
	andb	$1, %r10b
	addb	%r10b, %r10b
	andb	$-4, %bl
	orb	%r10b, %bl
	movb	%bl, 17(%r12)
	jmp	.L31742
.L33988:
	movq	%rbx, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r12d
	jmp	.L25477
.L33987:
	movq	40(%rbx), %r12
	movq	8(%r12), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L25447
	cmpl	$18, %r14d
	je	.L25447
	movzbl	16(%r12), %edx
	cmpb	$32, %dl
	je	.L33990
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L25450
	cmpb	$34, %dl
	je	.L33991
.L25450:
	cmpb	$116, %dl
	movq	%r12, %rcx
	je	.L31219
	cmpb	$115, %dl
	je	.L33992
.L25459:
	movzbl	%dl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L25464
	cmpb	$49, %al
	je	.L25464
	cmpb	$50, %al
	je	.L25464
	cmpb	$101, %al
	je	.L25464
.L25463:
	cmpl	$10, %r14d
	je	.L33993
	cmpb	$39, %dl
	je	.L33994
.L25469:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L25472
	testb	$32, 17(%r13)
	je	.L25473
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L25474
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r13), %esi
	movzwl	60(%rdx), %r13d
	andl	$511, %esi
	andl	$511, %r13d
	cmpl	%r13d, %esi
	je	.L25474
.L25473:
	movq	integer_types+40(%rip), %rdi
.L31740:
	movq	%r12, %rsi
	call	convert
.L25448:
	movq	8(%rax), %rsi
	movq	32(%rbx), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31751
.L25474:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31740
.L25472:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L25475
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L25475
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%r13)
	je	.L33995
.L25475:
	cmpl	$5, %r14d
	je	.L33996
	movq	%r12, %rax
	jmp	.L25448
.L33996:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L25448
.L33995:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31740
.L33994:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L25469
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L25469
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L25473
	testb	$32, 17(%r13)
	jne	.L25474
	jmp	.L25473
.L33993:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L25468
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L25467
.L25468:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L25467:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31740
.L25464:
	movl	24(%rcx), %eax
	movl	%eax, 24(%r12)
	jmp	.L25463
.L33992:
	movq	32(%r12), %rsi
	movq	8(%r12), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L25459
.L25462:
	movzbl	16(%rsi), %edx
	movq	%rsi, %r12
	cmpb	$116, %dl
	jne	.L33997
.L31219:
	movq	32(%r12), %rsi
	jmp	.L25462
.L33997:
	cmpb	$115, %dl
	jne	.L25459
	movq	32(%rsi), %r9
	movq	8(%r12), %rdi
	cmpq	%rdi, 8(%r9)
	movq	%r9, %rsi
	je	.L25462
	jmp	.L25459
.L33991:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L25454
	cmpb	$51, 48(%r12)
	je	.L25454
	cmpq	$0, current_function_decl(%rip)
	je	.L25456
	movzbl	17(%r12), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L33998
.L25456:
	movq	%r12, %rsi
.L25457:
	movq	%rsi, %r12
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L25454:
	movq	%rax, %r13
	jmp	.L25450
.L33998:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L25456
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L25456
	testb	$2, 17(%rax)
	je	.L25456
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L25457
	jmp	.L25456
.L33990:
	movq	104(%r12), %r12
	movzbl	16(%r12), %edx
	jmp	.L25450
.L25447:
	movq	%r12, %rdi
	call	default_function_array_conversion
	jmp	.L25448
.L33986:
	movq	72(%r14), %rdi
	movq	32(%rbx), %rsi
	jmp	.L32003
.L33985:
	testq	%r14, %r14
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L25443
.L33984:
	testq	%r14, %r14
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L25442
	.p2align 6,,7
.L25439:
	movzbl	17(%rbx), %edi
	movl	$1, %r11d
	movl	%edi, %edx
	shrb	$3, %dil
	shrb	$4, %dl
	andl	%edi, %r11d
	andl	$1, %edx
	jmp	.L25438
.L33983:
	movl	$121, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31751
.L25434:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L25433
.L33982:
	movq	32(%rbx), %rsi
	cmpq	%r12, 8(%rsi)
	jne	.L25428
.L25432:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %rbx
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r13d
	cmpb	$116, %cl
	jne	.L33999
.L31217:
	movq	32(%rbx), %rsi
	jmp	.L25432
.L33999:
	cmpb	$115, %cl
	jne	.L25428
	movq	32(%rsi), %rsi
	movq	8(%rbx), %r11
	cmpq	%r11, 8(%rsi)
	je	.L25432
	jmp	.L25428
.L33972:
	movq	-400(%rbp), %rsi
	cmpb	$18, 16(%rsi)
	jne	.L25424
	movq	8(%rsi), %r8
	cmpb	$6, 16(%r8)
	jne	.L25424
	movq	global_trees(%rip), %r8
	jmp	.L25422
	.p2align 6,,7
.L25421:
	movq	%r12, %rdi
	movq	%rbx, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L25649
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L34000
.L31756:
	movq	%rax, %r15
	jmp	.L25174
.L34000:
	movq	32(%r15), %rdx
	movq	%rdx, -1056(%rbp)
	jmp	.L25175
	.p2align 6,,7
.L25649:
	movq	8(%r15), %rax
	testq	%rax, %rax
	jne	.L31756
	movq	16(%r15), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L25656
	cmpq	%r15, 8(%rax)
	je	.L25659
.L25656:
	testq	%rax, %rax
	movq	%rax, %r15
	je	.L25175
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L25174
	movq	32(%r15), %r10
	movq	%r10, -1056(%rbp)
	jmp	.L25175
	.p2align 6,,7
.L25659:
	movq	16(%rdx), %rax
	movq	%rdx, %r15
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L25656
	cmpq	%r15, 8(%rax)
	je	.L25659
	jmp	.L25656
	.p2align 6,,7
.L33936:
	movq	32(%r15), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L25178
	movq	constructor_type(%rip), %r10
	movq	40(%r15), %r12
	movq	constructor_unfilled_index(%rip), %rdi
	movq	8(%r10), %rcx
	movq	%rdi, -1032(%rbp)
	movq	%rcx, -384(%rbp)
	movq	8(%r12), %rbx
	movzbl	16(%rbx), %eax
	movq	%rbx, %rdx
	cmpb	$23, %al
	je	.L25180
	cmpb	$18, %al
	je	.L34001
.L31205:
	movq	global_trees(%rip), %r8
.L31736:
	movzbl	16(%r12), %ecx
.L25179:
	cmpb	$-86, %cl
	je	.L34002
.L25267:
	cmpq	%r8, %r12
	je	.L34003
	testb	$2, 17(%r12)
	jne	.L25270
	movl	$0, constructor_constant(%rip)
.L25269:
	movl	require_constant_value(%rip), %ecx
	testl	%ecx, %ecx
	je	.L25274
	testb	$2, 17(%r12)
	je	.L34004
.L25274:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L34005
.L25299:
	cmpq	$0, -1032(%rbp)
	je	.L25301
	movq	-1032(%rbp), %rbx
	movq	8(%rbx), %rax
	cmpq	global_trees(%rip), %rax
	je	.L25174
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L34006
.L25301:
	movq	-384(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%r12, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -1024(%rbp)
	je	.L31759
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L34007
.L25305:
	cmpb	$20, 16(%rdi)
	je	.L34008
.L25326:
	cmpb	$21, 16(%rdi)
	je	.L34009
.L25325:
	cmpq	$0, -1032(%rbp)
	je	.L25393
	movq	-1032(%rbp), %rdx
	cmpb	$25, 16(%rdx)
	je	.L34010
.L25393:
	movq	constructor_elements(%rip), %rdx
	movq	-1032(%rbp), %rdi
	movq	-1024(%rbp), %rsi
	call	tree_cons
	movq	%rax, constructor_elements(%rip)
	movq	constructor_type(%rip), %rax
	movq	%rax, %rdx
	movzbl	16(%rax), %eax
	cmpb	$18, %al
	je	.L34011
	cmpb	$20, %al
	je	.L34012
	cmpb	$21, 16(%rdx)
	je	.L34013
.L25395:
	xorl	%r14d, %r14d
	testl	%r14d, %r14d
	jmp	.L32004
.L34013:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L25395
.L34012:
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L25395
	testb	$2, 53(%rax)
	je	.L25395
	cmpq	$0, 72(%rax)
	jne	.L25395
.L25401:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L25395
	testb	$2, 53(%rax)
	je	.L25395
	cmpq	$0, 72(%rax)
	jne	.L25395
	jmp	.L25401
.L34011:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L25395
.L34010:
	movq	%rdx, %rdi
	call	copy_node
	movq	%rax, -1032(%rbp)
	jmp	.L25393
	.p2align 6,,7
.L34009:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L25325
	movq	32(%rax), %r10
	testb	$1, 17(%r10)
	jne	.L34014
.L25368:
	movq	$0, constructor_elements(%rip)
	jmp	.L25325
.L34014:
	movl	$.LC42, %edi
	xorl	%eax, %eax
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdi
	xorl	%r12d, %r12d
	cmpq	%rdi, %r8
	movq	%r8, %rbx
	movq	%rdi, %r13
	jae	.L30551
.L25375:
	cmpl	$3, (%rbx)
	je	.L34015
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L25371:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L25375
.L30551:
	movslq	%r12d,%rsi
	movq	%r8, %r12
	addq	$16, %rsi
	andq	$-16, %rsi
	subq	%rsi, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30553
.L25389:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L34016
	cmpl	$2, %eax
	je	.L34017
.L25383:
	movq	8(%r12), %r9
	movzbl	(%r9), %r8d
	leaq	1(%r9), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L25379
.L25388:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L25388
.L25379:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L25389
.L30553:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L25368
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L25368
.L34017:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L25383
.L34016:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L25379
.L34015:
	addl	$25, %r12d
	jmp	.L25371
	.p2align 6,,7
.L34008:
	movl	constructor_incremental(%rip), %ecx
	testl	%ecx, %ecx
	je	.L25328
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, -1032(%rbp)
	je	.L25326
	testq	%rax, %rax
	jne	.L25329
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L25336
.L30545:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L34018
.L25356:
	cmpb	$18, 16(%rdi)
	je	.L34019
.L25362:
	movl	$0, constructor_incremental(%rip)
.L25328:
	movq	-1032(%rbp), %rdi
	movq	-1024(%rbp), %rsi
	jmp	.L31758
.L34019:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L34020
	movq	global_trees+136(%rip), %rax
.L31739:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L25362
.L34020:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31739
.L34018:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L25362
	testb	$2, 53(%rax)
	je	.L25362
	cmpq	$0, 72(%rax)
	jne	.L25362
.L25342:
	movq	constructor_unfilled_fields(%rip), %r11
	movq	(%r11), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L25362
	testb	$2, 53(%rax)
	je	.L25362
	cmpq	$0, 72(%rax)
	jne	.L25362
	jmp	.L25342
	.p2align 6,,7
.L25336:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L25336
	movq	constructor_type(%rip), %rdi
	jmp	.L30545
.L25329:
	movq	-1032(%rbp), %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L25328
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L25349
	cmpb	$18, %al
	jne	.L25328
.L25349:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L25355
.L30548:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L25356
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L25362
	testb	$2, 53(%rax)
	je	.L25362
	cmpq	$0, 72(%rax)
	jne	.L25362
.L25361:
	movq	constructor_unfilled_fields(%rip), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L25362
	testb	$2, 53(%rax)
	je	.L25362
	cmpq	$0, 72(%rax)
	jne	.L25362
	jmp	.L25361
.L25355:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L25355
	movq	constructor_type(%rip), %rdi
	jmp	.L30548
	.p2align 6,,7
.L34007:
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L25328
	movq	-1032(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31212
	movl	constructor_incremental(%rip), %r14d
	testl	%r14d, %r14d
	je	.L25328
	movq	-1032(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L25328
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L25308
	cmpb	$18, %al
	jne	.L25328
.L25308:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L25314
.L30542:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L25356
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L25362
	testb	$2, 53(%rax)
	je	.L25362
	cmpq	$0, 72(%rax)
	jne	.L25362
.L25320:
	movq	constructor_unfilled_fields(%rip), %r9
	movq	(%r9), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L25362
	testb	$2, 53(%rax)
	je	.L25362
	cmpq	$0, 72(%rax)
	jne	.L25362
	jmp	.L25320
.L25314:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L25314
	movq	constructor_type(%rip), %rdi
	jmp	.L30542
.L31212:
	movq	constructor_type(%rip), %rdi
	jmp	.L25305
	.p2align 6,,7
.L34006:
	call	integer_zerop
	testl	%eax, %eax
	je	.L25301
	movq	constructor_type(%rip), %r13
	cmpb	$18, 16(%r13)
	je	.L25174
	movq	-1032(%rbp), %r8
	cmpq	$0, (%r8)
	jne	.L25174
	jmp	.L25301
.L34005:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L25299
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L25299
.L34004:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r11
	xorl	%r12d, %r12d
	cmpq	%r11, %r8
	movq	%r8, %rbx
	movq	%r11, %r13
	jae	.L30537
.L25281:
	cmpl	$3, (%rbx)
	je	.L34021
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L25277:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L25281
.L30537:
	movslq	%r12d,%rdx
	movq	%r8, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30539
.L25295:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L34022
	cmpl	$2, %eax
	je	.L34023
.L25289:
	movq	8(%r12), %rdi
	movzbl	(%rdi), %r10d
	leaq	1(%rdi), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L25285
.L25294:
	movzbl	(%rcx), %esi
	incq	%rbx
	incq	%rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	jne	.L25294
.L25285:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L25295
.L30539:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L34024
.L25298:
	movq	global_trees(%rip), %r12
	jmp	.L25299
.L34024:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L25298
.L34023:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L25289
.L34022:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L25285
.L34021:
	addl	$25, %r12d
	jmp	.L25277
.L25270:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L25273
	movq	constructor_type(%rip), %r9
	movzbl	16(%r9), %r8d
	subb	$20, %r8b
	cmpb	$1, %r8b
	ja	.L25269
	movq	-1032(%rbp), %r14
	testb	$2, 53(%r14)
	je	.L25269
	cmpb	$25, 16(%r12)
	je	.L25269
.L25273:
	movl	$0, constructor_simple(%rip)
	jmp	.L25269
.L34003:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L25269
.L34002:
	movl	require_constant_value(%rip), %ebx
	testl	%ebx, %ebx
	je	.L25267
	movl	flag_isoc99(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L25267
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L25267
	movq	32(%r12), %r13
	movq	32(%r13), %rsi
	movq	104(%rsi), %r12
	jmp	.L25267
	.p2align 6,,7
.L34001:
	movzbl	16(%r12), %ecx
	cmpb	$29, %cl
	je	.L34025
.L25181:
	movq	128(%rdx), %rdi
	movq	-384(%rbp), %rdx
	movq	128(%rdx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L31205
	movq	8(%r12), %rbx
.L25180:
	movzbl	16(%rbx), %r13d
	cmpl	$23, %r13d
	je	.L25183
	cmpl	$18, %r13d
	je	.L25183
	movzbl	16(%r12), %ecx
	cmpb	$32, %cl
	je	.L34026
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L25240
	cmpb	$34, %cl
	je	.L34027
.L25240:
	cmpb	$116, %cl
	movq	%r12, %rdx
	je	.L31211
	cmpb	$115, %cl
	je	.L34028
.L25249:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L25254
	cmpb	$49, %al
	je	.L25254
	cmpb	$50, %al
	je	.L25254
	cmpb	$101, %al
	je	.L25254
.L25253:
	cmpl	$10, %r13d
	je	.L34029
	cmpb	$39, %cl
	je	.L34030
.L25259:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L25262
	testb	$32, 17(%rbx)
	je	.L25263
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L25264
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%rbx), %r11d
	movzwl	60(%rdx), %ecx
	andl	$511, %r11d
	andl	$511, %ecx
	cmpl	%ecx, %r11d
	je	.L25264
.L25263:
	movq	integer_types+40(%rip), %rdi
.L32000:
	movq	%r12, %rsi
.L32001:
	call	convert
.L31735:
	movq	%rax, %rbx
.L31726:
	movq	global_trees(%rip), %r8
.L25238:
	movq	%rbx, %r12
	jmp	.L31736
.L25264:
	movq	integer_types+48(%rip), %rdi
	jmp	.L32000
	.p2align 6,,7
.L25262:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L25265
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L25265
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%rbx)
	je	.L34031
.L25265:
	cmpl	$5, %r13d
	je	.L34032
.L25266:
	movq	%r12, %rbx
	jmp	.L31726
.L34032:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31727:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L25238
.L34031:
	movq	global_trees+200(%rip), %rdi
	jmp	.L32000
	.p2align 6,,7
.L34030:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L25259
	movq	integer_types+40(%rip), %r14
	movq	40(%rdx), %rdi
	movzwl	60(%r14), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L25259
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L25263
	testb	$32, 17(%rbx)
	jne	.L25264
	jmp	.L25263
	.p2align 6,,7
.L34029:
	movq	integer_types+40(%rip), %r9
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%r9), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L25258
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L25257
.L25258:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L25257:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L32000
.L25254:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L25253
.L34028:
	movq	32(%r12), %rsi
	movq	8(%r12), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L25249
.L25252:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L34033
.L31211:
	movq	32(%r12), %rsi
	jmp	.L25252
.L34033:
	cmpb	$115, %cl
	jne	.L25249
	movq	32(%rsi), %r8
	movq	8(%r12), %rdi
	cmpq	%rdi, 8(%r8)
	movq	%r8, %rsi
	je	.L25252
	jmp	.L25249
.L34027:
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	jne	.L25240
	cmpb	$51, 48(%r12)
	je	.L25240
	cmpq	$0, current_function_decl(%rip)
	je	.L25246
	movzbl	17(%r12), %ebx
	andb	$24, %bl
	cmpb	$16, %bl
	je	.L34034
.L25246:
	movq	%r12, %rsi
.L25247:
	movq	%rsi, %r12
	movq	8(%rsi), %rbx
.L31725:
	movzbl	16(%r12), %ecx
	jmp	.L25240
.L34034:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L25246
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L25246
	testb	$2, 17(%rax)
	je	.L25246
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L25247
	jmp	.L25246
	.p2align 6,,7
.L34026:
	movq	104(%r12), %r12
	jmp	.L31725
.L25183:
	movzbl	16(%r12), %ecx
	xorl	%r14d, %r14d
	movl	%r13d, %edi
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L31207
	cmpb	$115, %cl
	je	.L34035
.L25185:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L25191
	cmpb	$49, %al
	je	.L25191
	cmpb	$50, %al
	je	.L25191
	cmpb	$101, %al
	je	.L25191
.L25190:
	cmpl	$23, %edi
	je	.L34036
	cmpl	$18, %edi
	jne	.L25266
	movzbl	%cl, %r8d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r8), %eax
	movq	8(%rbx), %r13
	cmpb	$114, %al
	je	.L25196
	cmpb	$100, %al
	je	.L25196
.L25195:
	movzbl	17(%rbx), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %edi
	shrb	$3, %r10b
	shrb	$4, %dil
	andl	$1, %r10d
	andl	%edi, %r9d
	movzbl	16(%rbx), %edi
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rbx), %r10d
	movl	%r10d, %esi
	shrb	$5, %sil
	andl	$1, %esi
	sall	$2, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	cmpb	$20, %dil
	je	.L34037
.L25199:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L25198
	testl	%edx, %edx
	jne	.L25198
	testl	%r11d, %r11d
	je	.L25197
.L25198:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%ebx, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L34038
.L25200:
	leal	0(,%rcx,8), %r8d
	movq	%r13, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L25197:
	cmpb	$41, %cl
	je	.L34039
	cmpb	$47, %cl
	je	.L34040
	xorl	%ebx, %ebx
	testl	%r14d, %r14d
	je	.L34041
.L25234:
	movl	flag_isoc99(%rip), %r14d
	testl	%r14d, %r14d
	jne	.L25235
	testl	%ebx, %ebx
	je	.L25266
.L25235:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L34042
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L32001
.L34042:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L31727
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %ecx
	andb	$1, %cl
	addb	%cl, %cl
	andb	$-4, %r12b
	orb	%cl, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L31726
.L34041:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L25234
.L34040:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L25204
	cmpl	$18, %r14d
	je	.L25204
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L34043
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L25207
	cmpb	$34, %dl
	je	.L34044
.L25207:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L31209
	cmpb	$115, %dl
	je	.L34045
.L25216:
	movzbl	%dl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L25221
	cmpb	$49, %al
	je	.L25221
	cmpb	$50, %al
	je	.L25221
	cmpb	$101, %al
	je	.L25221
.L25220:
	cmpl	$10, %r14d
	je	.L34046
	cmpb	$39, %dl
	je	.L34047
.L25226:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L25229
	testb	$32, 17(%r13)
	je	.L25230
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L25231
	movq	integer_types+40(%rip), %r10
	movzwl	60(%r13), %esi
	movzwl	60(%r10), %r13d
	andl	$511, %esi
	andl	$511, %r13d
	cmpl	%r13d, %esi
	je	.L25231
.L25230:
	movq	integer_types+40(%rip), %rdi
.L31724:
	movq	%rbx, %rsi
	call	convert
.L25205:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31735
.L25231:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31724
.L25229:
	movl	flag_traditional(%rip), %edi
	testl	%edi, %edi
	je	.L25232
	movl	flag_allow_single_precision(%rip), %r8d
	testl	%r8d, %r8d
	jne	.L25232
	movq	global_trees+192(%rip), %r9
	cmpq	%r9, 128(%r13)
	je	.L34048
.L25232:
	cmpl	$5, %r14d
	je	.L34049
	movq	%rbx, %rax
	jmp	.L25205
.L34049:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L25205
.L34048:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31724
.L34047:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L25226
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L25226
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L25230
	testb	$32, 17(%r13)
	jne	.L25231
	jmp	.L25230
.L34046:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L25225
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L25224
.L25225:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L25224:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31724
.L25221:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L25220
.L34045:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L25216
.L25219:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L34050
.L31209:
	movq	32(%rbx), %rsi
	jmp	.L25219
.L34050:
	cmpb	$115, %dl
	jne	.L25216
	movq	32(%rsi), %r9
	movq	8(%rbx), %rdi
	cmpq	%rdi, 8(%r9)
	movq	%r9, %rsi
	je	.L25219
	jmp	.L25216
.L34044:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L25211
	cmpb	$51, 48(%rbx)
	je	.L25211
	cmpq	$0, current_function_decl(%rip)
	je	.L25213
	movzbl	17(%rbx), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L34051
.L25213:
	movq	%rbx, %rsi
.L25214:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L25211:
	movq	%rax, %r13
	jmp	.L25207
.L34051:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L25213
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L25213
	testb	$2, 17(%rax)
	je	.L25213
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L25214
	jmp	.L25213
.L34043:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L25207
.L25204:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L25205
.L34039:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L32001
.L34038:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L25200
.L34037:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L25199
.L25196:
	movzbl	17(%r12), %edi
	movl	$1, %r11d
	movl	%edi, %edx
	shrb	$3, %dil
	shrb	$4, %dl
	andl	%edi, %r11d
	andl	$1, %edx
	jmp	.L25195
.L34036:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31735
	.p2align 6,,7
.L25191:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L25190
.L34035:
	movq	32(%r12), %rsi
	cmpq	%rbx, 8(%rsi)
	jne	.L25185
.L25189:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r14d
	cmpb	$116, %cl
	jne	.L34052
.L31207:
	movq	32(%r12), %rsi
	jmp	.L25189
.L34052:
	cmpb	$115, %cl
	jne	.L25185
	movq	32(%rsi), %rsi
	movq	8(%r12), %r9
	cmpq	%r9, 8(%rsi)
	je	.L25189
	jmp	.L25185
.L34025:
	movq	-384(%rbp), %rbx
	cmpb	$18, 16(%rbx)
	jne	.L25181
	movq	8(%rbx), %r13
	cmpb	$6, 16(%r13)
	jne	.L25181
	movq	global_trees(%rip), %r8
	jmp	.L25179
	.p2align 6,,7
.L25178:
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%r15), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L25406
	movq	(%r15), %rax
	testq	%rax, %rax
	jne	.L31756
	movq	32(%r15), %rcx
	movq	%rcx, -1056(%rbp)
	jmp	.L25175
	.p2align 6,,7
.L25406:
	movq	8(%r15), %rax
	testq	%rax, %rax
	jne	.L31756
	movq	16(%r15), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L25413
	cmpq	%r15, 8(%rax)
	je	.L25416
.L25413:
	testq	%rax, %rax
	movq	%rax, %r15
	je	.L25175
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L25174
	movq	32(%r15), %r13
	movq	%r13, -1056(%rbp)
	jmp	.L25175
	.p2align 6,,7
.L25416:
	movq	16(%rdx), %rax
	movq	%rdx, %r15
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L25413
	cmpq	%r15, 8(%rax)
	je	.L25416
	jmp	.L25413
	.p2align 6,,7
.L33935:
	movq	constructor_unfilled_fields(%rip), %rax
	testq	%rax, %rax
	je	.L25136
.L31360:
	movq	40(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L34053
.L25141:
	movq	(%rax), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	jne	.L31360
	jmp	.L25136
	.p2align 6,,7
.L34053:
	call	integer_zerop
	testl	%eax, %eax
	je	.L34054
	movq	constructor_unfilled_fields(%rip), %rax
	jmp	.L25141
.L34054:
	movq	constructor_unfilled_fields(%rip), %rax
	testq	%rax, %rax
	je	.L25136
	movl	constructor_designated(%rip), %ecx
	testl	%ecx, %ecx
	jne	.L25136
	movq	72(%rax), %rax
	movl	$.LC159, %r12d
	testq	%rax, %rax
	je	.L25144
	movq	32(%rax), %r12
.L25144:
	movq	spelling(%rip), %rcx
	movq	spelling_base(%rip), %rdi
	movl	spelling_size(%rip), %eax
	movq	%rcx, %r15
	subq	%rdi, %r15
	movq	%r15, %rbx
	shrq	$4, %rbx
	cmpl	%eax, %ebx
	jl	.L25145
	addl	$10, %eax
	testq	%rdi, %rdi
	movl	%eax, spelling_size(%rip)
	jne	.L25146
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L31723:
	movslq	%ebx,%rcx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rcx
	addq	spelling_base(%rip), %rcx
	movq	%rcx, spelling(%rip)
.L25145:
	movq	%r12, 8(%rcx)
	movl	$2, (%rcx)
	xorl	%eax, %eax
	addq	$16, %rcx
	movl	$.LC42, %edi
	movl	$.LC175, %esi
	movq	%rcx, spelling(%rip)
	xorl	%r12d, %r12d
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdx
	cmpq	%rdx, %r8
	movq	%r8, %rbx
	movq	%rdx, %r13
	jae	.L30528
.L25155:
	cmpl	$3, (%rbx)
	je	.L34055
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L25151:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L25155
.L30528:
	movslq	%r12d,%r9
	movq	%r8, %r12
	addq	$16, %r9
	andq	$-16, %r9
	subq	%r9, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30530
.L25169:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L34056
	cmpl	$2, %eax
	je	.L34057
.L25163:
	movq	8(%r12), %r8
	movzbl	(%r8), %esi
	leaq	1(%r8), %rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	je	.L25159
.L25168:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L25168
.L25159:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L25169
.L30530:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L34058
.L25172:
	movslq	constructor_depth(%rip),%rbx
	salq	$4, %rbx
	addq	spelling_base(%rip), %rbx
	movq	%rbx, spelling(%rip)
	jmp	.L25136
.L34058:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L25172
.L34057:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L25163
.L34056:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L25159
.L34055:
	addl	$25, %r12d
	jmp	.L25151
.L25146:
	movslq	%eax,%rsi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L31723
	.p2align 6,,7
.L33934:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	je	.L25079
	cmpq	$0, 112(%rax)
	jne	.L25079
	movq	constructor_unfilled_index(%rip), %rdi
	call	integer_zerop
	testl	%eax, %eax
	jne	.L31722
	movq	constructor_type(%rip), %rdi
	cmpq	$0, 32(%rdi)
	jne	.L28037
	cmpl	$2, constructor_depth(%rip)
	jg	.L34059
	movl	pedantic(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L34060
.L25108:
	movq	constructor_fields(%rip), %r12
	cmpq	$0, (%r12)
	je	.L25079
.L31722:
	movq	$0, constructor_type(%rip)
	jmp	.L25079
.L34060:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC174, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r14
	xorl	%r12d, %r12d
	cmpq	%r14, %r8
	movq	%r8, %rbx
	movq	%r14, %r13
	jae	.L30523
.L25116:
	cmpl	$3, (%rbx)
	je	.L34061
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L25112:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L25116
.L30523:
	movslq	%r12d,%rsi
	movq	%r8, %r12
	addq	$16, %rsi
	andq	$-16, %rsi
	subq	%rsi, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30525
.L25130:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L34062
	cmpl	$2, %eax
	je	.L34063
.L25124:
	movq	8(%r12), %r11
	movzbl	(%r11), %r8d
	leaq	1(%r11), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L25120
.L25129:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L25129
.L25120:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L25130
.L30525:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L25108
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L25108
.L34063:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L25124
.L34062:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L25120
.L34061:
	addl	$25, %r12d
	jmp	.L25112
.L34059:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC173, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r15
	xorl	%r12d, %r12d
	cmpq	%r15, %r8
	movq	%r8, %rbx
	movq	%r15, %r13
	jae	.L30518
.L25090:
	cmpl	$3, (%rbx)
	je	.L34064
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L25086:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L25090
.L30518:
	movslq	%r12d,%r10
	movq	%r8, %r12
	addq	$16, %r10
	andq	$-16, %r10
	subq	%r10, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30520
.L25104:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L34065
	cmpl	$2, %eax
	je	.L34066
.L25098:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r13d
	leaq	1(%rdx), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L25094
.L25103:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L25103
.L25094:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L25104
.L30520:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L25108
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L25108
.L34066:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L25098
.L34065:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L25094
.L34064:
	addl	$25, %r12d
	jmp	.L25086
	.p2align 6,,7
.L33933:
	movq	constructor_index(%rip), %rsi
	movq	%rax, %rdi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L24405
	movq	constructor_stack(%rip), %r8
	movq	constructor_type(%rip), %rdi
	movq	%r8, -1296(%rbp)
	jmp	.L25072
.L33239:
	movl	$.LC42, %edi
	xorl	%eax, %eax
	movl	$.LC163, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdi
	xorl	%r12d, %r12d
	cmpq	%rdi, %r8
	movq	%r8, %rbx
	movq	%rdi, %r13
	jae	.L30434
.L24385:
	cmpl	$3, (%rbx)
	je	.L34067
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L24381:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L24385
.L30434:
	movslq	%r12d,%rdx
	movq	%r8, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30436
.L24399:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L34068
	cmpl	$2, %eax
	je	.L34069
.L24393:
	movq	8(%r12), %r15
	movzbl	(%r15), %r10d
	leaq	1(%r15), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L24389
.L24398:
	movzbl	(%rcx), %r13d
	incq	%rbx
	incq	%rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	jne	.L24398
.L24389:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L24399
.L30436:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L31924
	movq	constructor_stack(%rip), %rdx
	movq	%rdx, -1296(%rbp)
	jmp	.L15218
.L34069:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L24393
.L34068:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L24389
.L34067:
	addl	$25, %r12d
	jmp	.L24381
.L33238:
	movq	8(%rax), %r14
	cmpb	$6, 16(%r14)
	jne	.L24351
	movq	constructor_unfilled_index(%rip), %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L24351
	movq	constructor_stack(%rip), %r10
	cmpq	$0, 88(%r10)
	movq	%r10, -1296(%rbp)
	jne	.L34070
.L24352:
	movq	-1072(%rbp), %rdx
	jmp	.L31925
.L34070:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC162, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r15
	xorl	%r12d, %r12d
	cmpq	%r15, %r8
	movq	%r8, %rbx
	movq	%r15, %r13
	jae	.L30429
.L24359:
	cmpl	$3, (%rbx)
	je	.L34071
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L24355:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L24359
.L30429:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30431
.L24373:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L34072
	cmpl	$2, %eax
	je	.L34073
.L24367:
	movq	8(%r12), %r8
	movzbl	(%r8), %r13d
	leaq	1(%r8), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L24363
.L24372:
	movzbl	(%rcx), %esi
	incq	%rbx
	incq	%rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	jne	.L24372
.L24363:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L24373
.L30431:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L34074
	movq	constructor_stack(%rip), %r11
	movq	%r11, -1296(%rbp)
	jmp	.L24352
.L34074:
	xorl	%eax, %eax
	movl	$.LC142, %edi
	movq	%r14, %rsi
	call	error
	movq	constructor_stack(%rip), %rax
	movq	%rax, -1296(%rbp)
	jmp	.L24352
.L34073:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L24367
.L34072:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L24363
.L34071:
	addl	$25, %r12d
	jmp	.L24355
	.p2align 6,,7
.L24348:
	movq	$0, -1072(%rbp)
	jmp	.L24349
.L33237:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC176, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r10
	xorl	%r12d, %r12d
	cmpq	%r10, %r8
	movq	%r8, %rbx
	movq	%r10, %r13
	jae	.L30419
.L24296:
	cmpl	$3, (%rbx)
	je	.L34075
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L24292:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L24296
.L30419:
	movslq	%r12d,%r15
	movq	%r8, %r12
	addq	$16, %r15
	andq	$-16, %r15
	subq	%r15, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30421
.L24310:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L34076
	cmpl	$2, %eax
	je	.L34077
.L24304:
	movq	8(%r12), %r8
	movzbl	(%r8), %r13d
	leaq	1(%r8), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L24300
.L24309:
	movzbl	(%rcx), %esi
	incq	%rbx
	incq	%rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	jne	.L24309
.L24300:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L24310
.L30421:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L24289
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L24289
	.p2align 6,,7
.L34077:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L24304
.L34076:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L24300
	.p2align 6,,7
.L34075:
	addl	$25, %r12d
	jmp	.L24292
.L24288:
	cmpq	$0, (%rax)
	jne	.L34078
.L24315:
	movq	32(%rax), %rax
.L31683:
	movq	%rax, -960(%rbp)
	jmp	.L24284
.L34078:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC177, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r11
	xorl	%r12d, %r12d
	cmpq	%r11, %r8
	movq	%r8, %rbx
	movq	%r11, %r13
	jae	.L30424
.L24322:
	cmpl	$3, (%rbx)
	je	.L34079
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L24318:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L24322
.L30424:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30426
.L24336:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L34080
	cmpl	$2, %eax
	je	.L34081
.L24330:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r9d
	leaq	1(%rdx), %rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	je	.L24326
.L24335:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L24335
.L24326:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L24336
.L30426:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L34082
.L24339:
	movq	constructor_elements(%rip), %rax
	jmp	.L24315
.L34082:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L24339
	.p2align 6,,7
.L34081:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L24330
.L34080:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L24326
	.p2align 6,,7
.L34079:
	addl	$25, %r12d
	jmp	.L24318
.L24287:
	movl	constructor_erroneous(%rip), %r12d
	testl	%r12d, %r12d
	je	.L24342
	movq	global_trees(%rip), %rax
	movq	%rax, -960(%rbp)
	jmp	.L24284
.L24342:
	movq	constructor_elements(%rip), %rdi
	call	nreverse
	xorl	%edx, %edx
	movq	constructor_type(%rip), %rsi
	movq	%rax, %rcx
	movl	$46, %edi
	xorl	%eax, %eax
	call	build
	movl	constructor_constant(%rip), %r14d
	movq	%rax, -960(%rbp)
	testl	%r14d, %r14d
	je	.L24284
	orb	$2, 17(%rax)
	movl	constructor_constant(%rip), %r10d
	testl	%r10d, %r10d
	je	.L24284
	movl	constructor_simple(%rip), %r15d
	testl	%r15d, %r15d
	je	.L24284
	movq	-960(%rbp), %r13
	orb	$4, 18(%r13)
	jmp	.L24284
	.p2align 6,,7
.L33235:
	xorl	%edi, %edi
	call	output_pending_init_elements
	jmp	.L23767
.L33234:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L24253
.L33233:
	movq	constructor_unfilled_fields(%rip), %r13
	movq	(%r13), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24253
	testb	$2, 53(%rax)
	je	.L24253
	cmpq	$0, 72(%rax)
	jne	.L24253
.L24259:
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24253
	testb	$2, 53(%rax)
	je	.L24253
	cmpq	$0, 72(%rax)
	jne	.L24253
	jmp	.L24259
.L32075:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L24253
.L33232:
	movq	%r15, %rdi
	call	copy_node
	movq	%rax, -944(%rbp)
	jmp	.L24251
.L33231:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L24183
	movq	32(%rax), %rdx
	testb	$1, 17(%rdx)
	jne	.L34083
.L24226:
	movq	$0, constructor_elements(%rip)
	jmp	.L24183
.L34083:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, -600(%rbp)
	jae	.L30412
.L24233:
	cmpl	$3, (%rbx)
	je	.L34084
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L24229:
	addq	$16, %rbx
	cmpq	-600(%rbp), %rbx
	jb	.L24233
.L30412:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	-600(%rbp), %r8
	movq	%rsp, -336(%rbp)
	movq	%rsp, %rbx
	jae	.L30414
.L24247:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L34085
	cmpl	$2, %eax
	je	.L34086
.L24241:
	movq	8(%r12), %rdi
	movzbl	(%rdi), %r9d
	leaq	1(%rdi), %rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	je	.L24237
.L24246:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L24246
.L24237:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L24247
.L30414:
	movb	$0, (%rbx)
	movq	-336(%rbp), %rsi
	cmpb	$0, (%rsi)
	je	.L24226
	movl	$.LC142, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L24226
.L34086:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L24241
.L34085:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L24237
.L34084:
	addl	$25, %r12d
	jmp	.L24229
.L33230:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L24186
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, %r15
	je	.L24184
	testq	%rax, %rax
	jne	.L24187
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L24194
.L30406:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L34087
.L24214:
	cmpb	$18, 16(%rdi)
	je	.L34088
.L24220:
	movl	$0, constructor_incremental(%rip)
.L24186:
	movq	%r15, %rdi
	movq	%r13, %rsi
	call	add_pending_init
	jmp	.L23767
.L34088:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L34089
	movq	global_trees+136(%rip), %rax
.L31678:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L24220
.L34089:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L31678
.L34087:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24220
	testb	$2, 53(%rax)
	je	.L24220
	cmpq	$0, 72(%rax)
	jne	.L24220
.L24200:
	movq	constructor_unfilled_fields(%rip), %rsi
	movq	(%rsi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24220
	testb	$2, 53(%rax)
	je	.L24220
	cmpq	$0, 72(%rax)
	jne	.L24220
	jmp	.L24200
.L24194:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L24194
	movq	constructor_type(%rip), %rdi
	jmp	.L30406
.L24187:
	movq	%r15, %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r12
	call	bit_position
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L24186
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L24207
	cmpb	$18, %al
	jne	.L24186
.L24207:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L24213
.L30409:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L24214
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24220
	testb	$2, 53(%rax)
	je	.L24220
	cmpq	$0, 72(%rax)
	jne	.L24220
.L24219:
	movq	constructor_unfilled_fields(%rip), %r11
	movq	(%r11), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24220
	testb	$2, 53(%rax)
	je	.L24220
	cmpq	$0, 72(%rax)
	jne	.L24220
	jmp	.L24219
.L24213:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L24213
	movq	constructor_type(%rip), %rdi
	jmp	.L30409
	.p2align 6,,7
.L33229:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L24186
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31178
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L24186
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L24186
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L24166
	cmpb	$18, %al
	jne	.L24186
.L24166:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L24172
.L30403:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L24214
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24220
	testb	$2, 53(%rax)
	je	.L24220
	cmpq	$0, 72(%rax)
	jne	.L24220
.L24178:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24220
	testb	$2, 53(%rax)
	je	.L24220
	cmpq	$0, 72(%rax)
	jne	.L24220
	jmp	.L24178
.L24172:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L24172
	movq	constructor_type(%rip), %rdi
	jmp	.L30403
	.p2align 6,,7
.L31178:
	movq	constructor_type(%rip), %rdi
	jmp	.L24163
.L31681:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L23767
.L33228:
	call	integer_zerop
	testl	%eax, %eax
	je	.L24159
	movq	constructor_type(%rip), %r8
	cmpb	$18, 16(%r8)
	je	.L23767
	cmpq	$0, (%r15)
	jne	.L23767
	jmp	.L24159
.L33227:
	movq	8(%rbx), %rsi
	movq	%rbx, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L24157
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L24157
.L33226:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L30398
	.p2align 4,,7
.L24139:
	cmpl	$3, (%rbx)
	je	.L34090
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L24135:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L24139
.L30398:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, -328(%rbp)
	movq	%rsp, %rbx
	jae	.L30400
	.p2align 4,,7
.L24153:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L34091
	cmpl	$2, %eax
	je	.L34092
.L24147:
	movq	8(%r12), %rdi
	movzbl	(%rdi), %r9d
	leaq	1(%rdi), %rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	je	.L24143
	.p2align 4,,7
.L24152:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L24152
.L24143:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L24153
.L30400:
	movb	$0, (%rbx)
	movq	-328(%rbp), %rbx
	cmpb	$0, (%rbx)
	jne	.L34093
.L24156:
	movq	global_trees(%rip), %rbx
	jmp	.L24157
.L34093:
	movl	$.LC142, %edi
	movq	%rbx, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L24156
.L34092:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L24147
.L34091:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L24143
.L34090:
	addl	$25, %r12d
	jmp	.L24135
.L24128:
	movq	8(%rbx), %rsi
	movq	%rbx, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L24131
	movq	constructor_type(%rip), %rcx
	movzbl	16(%rcx), %r13d
	subb	$20, %r13b
	cmpb	$1, %r13b
	ja	.L24127
	testb	$2, 53(%r15)
	je	.L24127
	cmpb	$25, 16(%rbx)
	je	.L24127
.L24131:
	movl	$0, constructor_simple(%rip)
	jmp	.L24127
.L33225:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L24127
.L33224:
	movl	require_constant_value(%rip), %r12d
	testl	%r12d, %r12d
	je	.L24125
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L24125
	xorl	%esi, %esi
	testl	%esi, %esi
	je	.L24125
	movq	32(%rbx), %rdx
	movq	32(%rdx), %r11
	movq	104(%r11), %rbx
	jmp	.L24125
.L33223:
	movzbl	16(%rbx), %ecx
	cmpb	$29, %cl
	je	.L34094
.L24028:
	movq	128(%rdx), %rdi
	movq	-312(%rbp), %rdx
	movq	128(%rdx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L31171
	movq	8(%rbx), %r13
.L24027:
	movzbl	16(%r13), %r12d
	cmpl	$23, %r12d
	je	.L24030
	cmpl	$18, %r12d
	je	.L24030
	movzbl	16(%rbx), %ecx
	cmpb	$32, %cl
	je	.L34095
	movl	optimize(%rip), %esi
	testl	%esi, %esi
	je	.L24093
	cmpb	$34, %cl
	je	.L34096
.L24093:
	cmpb	$116, %cl
	movq	%rbx, %rdx
	je	.L31177
	cmpb	$115, %cl
	je	.L34097
.L24102:
	movzbl	%cl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L24107
	cmpb	$49, %al
	je	.L24107
	cmpb	$50, %al
	je	.L24107
	cmpb	$101, %al
	je	.L24107
.L24106:
	cmpl	$10, %r12d
	je	.L34098
	cmpb	$39, %cl
	je	.L34099
.L24115:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L24120
	testb	$32, 17(%r13)
	je	.L24121
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L24122
	movq	integer_types+40(%rip), %r9
	movzwl	60(%r13), %ecx
	movzwl	60(%r9), %r13d
	andl	$511, %ecx
	andl	$511, %r13d
	cmpl	%r13d, %ecx
	je	.L24122
.L24121:
	movq	integer_types+40(%rip), %rdi
.L31992:
	movq	%rbx, %rsi
.L31993:
	call	convert
.L31674:
	movq	%rax, %r12
.L31665:
	movq	global_trees(%rip), %r8
.L24091:
	movq	%r12, %rbx
	jmp	.L31675
.L24122:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31992
.L24120:
	movl	flag_traditional(%rip), %edi
	testl	%edi, %edi
	je	.L24123
	movl	flag_allow_single_precision(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L24123
	movq	global_trees+192(%rip), %r8
	cmpq	%r8, 128(%r13)
	je	.L34100
.L24123:
	cmpl	$5, %r12d
	je	.L34101
.L24124:
	movq	%rbx, %r12
	jmp	.L31665
.L34101:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31666:
	movq	global_trees(%rip), %r8
	movq	%r8, %r12
	jmp	.L24091
.L34100:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31992
	.p2align 6,,7
.L34099:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L24115
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L24115
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	je	.L24121
	testb	$32, 17(%r13)
	jne	.L24122
	jmp	.L24121
	.p2align 6,,7
.L34098:
	movq	integer_types+40(%rip), %rsi
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r12d
	movzwl	60(%rsi), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r12d, %r12d
	jne	.L24114
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L24113
.L24114:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L24113:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31992
.L24107:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L24106
.L34097:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%rsi)
	jne	.L24102
	.p2align 4,,7
.L24105:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %rbx
	cmpb	$116, %cl
	jne	.L34102
.L31177:
	movq	32(%rbx), %rsi
	jmp	.L24105
.L34102:
	cmpb	$115, %cl
	jne	.L24102
	movq	32(%rsi), %r10
	movq	8(%rbx), %rdi
	cmpq	%rdi, 8(%r10)
	movq	%r10, %rsi
	je	.L24105
	jmp	.L24102
.L34096:
	movl	pedantic(%rip), %r11d
	testl	%r11d, %r11d
	jne	.L24093
	cmpb	$51, 48(%rbx)
	je	.L24093
	cmpq	$0, current_function_decl(%rip)
	je	.L24099
	movzbl	17(%rbx), %ecx
	andb	$24, %cl
	cmpb	$16, %cl
	je	.L34103
.L24099:
	movq	%rbx, %rsi
.L24100:
	movq	%rsi, %rbx
	movq	8(%rsi), %r13
.L31664:
	movzbl	16(%rbx), %ecx
	jmp	.L24093
.L34103:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L24099
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L24099
	testb	$2, 17(%rax)
	je	.L24099
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L24100
	jmp	.L24099
	.p2align 6,,7
.L34095:
	movq	104(%rbx), %rbx
	jmp	.L31664
.L24030:
	movzbl	16(%rbx), %ecx
	movl	%r12d, %edx
	movq	%rbx, %rdi
	xorl	%r12d, %r12d
	cmpb	$116, %cl
	je	.L31173
	cmpb	$115, %cl
	je	.L34104
.L24032:
	movzbl	%cl, %r10d 
	movzbl	tree_code_type(%r10), %eax
	cmpb	$60, %al
	je	.L24038
	cmpb	$49, %al
	je	.L24038
	cmpb	$50, %al
	je	.L24038
	cmpb	$101, %al
	je	.L24038
.L24037:
	cmpl	$23, %edx
	je	.L34105
	cmpl	$18, %edx
	jne	.L24124
	movzbl	%cl, %edi 
	xorl	%edx, %edx
	movq	8(%r13), %r11
	movzbl	tree_code_type(%rdi), %eax
	movl	$0, -936(%rbp)
	cmpb	$114, %al
	je	.L24043
	cmpb	$100, %al
	je	.L24043
.L24042:
	movzbl	17(%r13), %r8d
	movl	$1, %esi
	movl	%r8d, %r9d
	movl	%r8d, %edi
	shrb	$3, %r9b
	shrb	$4, %dil
	andl	$1, %r9d
	andl	%edi, %esi
	movzbl	16(%r13), %edi
	addl	%r9d, %r9d
	orl	%r9d, %esi
	movzbl	62(%r13), %r9d
	movl	%r9d, %r10d
	shrb	$5, %r10b
	andl	$1, %r10d
	sall	$2, %r10d
	orl	%r10d, %esi
	xorl	%r10d, %r10d
	cmpb	$20, %dil
	je	.L34106
.L24046:
	leal	0(,%r10,8), %r13d
	orl	%r13d, %esi
	jne	.L24045
	testl	%edx, %edx
	jne	.L24045
	movl	-936(%rbp), %eax
	testl	%eax, %eax
	je	.L24044
.L24045:
	movl	%r8d, %r13d
	shrb	$5, %r9b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r13b
	movl	%r9d, %ecx
	movl	%r8d, %r10d
	andl	%r13d, %esi
	andl	$1, %ecx
	andl	$1, %r10d
	sall	$2, %ecx
	addl	%r10d, %r10d
	orl	%r10d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L34107
.L24048:
	movl	-936(%rbp), %eax
	leal	0(,%rcx,8), %r8d
	movq	%r11, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	addl	%eax, %eax
	orl	%eax, %esi
	call	c_build_qualified_type
	movzbl	16(%rbx), %ecx
	movq	%rax, %r11
.L24044:
	cmpb	$41, %cl
	je	.L34108
	cmpb	$47, %cl
	je	.L34109
	xorl	%r13d, %r13d
	testl	%r12d, %r12d
	je	.L34110
.L24087:
	movl	flag_isoc99(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L24088
	testl	%r13d, %r13d
	je	.L24124
.L24088:
	movq	%r11, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %r12
	je	.L34111
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%r12, %rdi
	movq	%rax, %rsi
	jmp	.L31993
.L34111:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, %r12
	call	mark_addressable
	testl	%eax, %eax
	je	.L31666
	movq	%rbx, %rdi
	call	staticp
	movzbl	17(%r12), %ebx
	movl	%eax, %r8d
	andb	$1, %r8b
	addb	%r8b, %r8b
	andb	$-4, %bl
	orb	%r8b, %bl
	movb	%bl, 17(%r12)
	jmp	.L31665
.L34110:
	movq	%rbx, %rdi
	movq	%r11, -1312(%rbp)
	call	lvalue_p
	movq	-1312(%rbp), %r11
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r13d
	jmp	.L24087
.L34109:
	movq	40(%rbx), %r12
	movq	8(%r12), %r13
	movzbl	16(%r13), %edx
	movq	%r13, %rax
	cmpl	$23, %edx
	movl	%edx, -316(%rbp)
	je	.L24052
	cmpl	$18, %edx
	je	.L24052
	movzbl	16(%r12), %edx
	cmpb	$32, %dl
	je	.L34112
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L24055
	cmpb	$34, %dl
	je	.L34113
.L24055:
	cmpb	$116, %dl
	movq	%r12, %rcx
	je	.L31175
	cmpb	$115, %dl
	je	.L34114
.L24064:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L24069
	cmpb	$49, %al
	je	.L24069
	cmpb	$50, %al
	je	.L24069
	cmpb	$101, %al
	je	.L24069
.L24068:
	cmpl	$10, -316(%rbp)
	je	.L34115
	cmpb	$39, %dl
	je	.L34116
.L24077:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L24082
	testb	$32, 17(%r13)
	je	.L24083
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L24084
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r13), %edi
	movzwl	60(%rdx), %r13d
	andl	$511, %edi
	andl	$511, %r13d
	cmpl	%r13d, %edi
	je	.L24084
.L24083:
	movq	integer_types+40(%rip), %rdi
.L31663:
	movq	%r12, %rsi
	call	convert
.L24053:
	movq	8(%rax), %rsi
	movq	32(%rbx), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31674
.L24084:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31663
.L24082:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L24085
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L24085
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%r13)
	je	.L34117
.L24085:
	cmpl	$5, -316(%rbp)
	je	.L34118
	movq	%r12, %rax
	jmp	.L24053
.L34118:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L24053
.L34117:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31663
	.p2align 6,,7
.L34116:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L24077
	movq	integer_types+40(%rip), %r9
	movq	40(%rdx), %rdi
	movzwl	60(%r9), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L24077
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L24083
	testb	$32, 17(%r13)
	jne	.L24084
	jmp	.L24083
	.p2align 6,,7
.L34115:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r11d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r11d, %r11d
	jne	.L24076
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L24075
.L24076:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L24075:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31663
.L24069:
	movl	24(%rcx), %eax
	movl	%eax, 24(%r12)
	jmp	.L24068
.L34114:
	movq	32(%r12), %rsi
	movq	8(%r12), %rdi
	cmpq	%rdi, 8(%rsi)
	jne	.L24064
.L24067:
	movzbl	16(%rsi), %edx
	movq	%rsi, %r12
	cmpb	$116, %dl
	jne	.L34119
.L31175:
	movq	32(%r12), %rsi
	jmp	.L24067
.L34119:
	cmpb	$115, %dl
	jne	.L24064
	movq	32(%rsi), %r8
	movq	8(%r12), %r10
	cmpq	%r10, 8(%r8)
	movq	%r8, %rsi
	je	.L24067
	jmp	.L24064
.L34113:
	movl	pedantic(%rip), %r9d
	testl	%r9d, %r9d
	jne	.L24059
	cmpb	$51, 48(%r12)
	je	.L24059
	cmpq	$0, current_function_decl(%rip)
	je	.L24061
	movzbl	17(%r12), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L34120
.L24061:
	movq	%r12, %rsi
.L24062:
	movq	%rsi, %r12
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L24059:
	movq	%rax, %r13
	jmp	.L24055
.L34120:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L24061
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L24061
	testb	$2, 17(%rax)
	je	.L24061
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L24062
	jmp	.L24061
	.p2align 6,,7
.L34112:
	movq	104(%r12), %r12
	movzbl	16(%r12), %edx
	jmp	.L24055
.L24052:
	movq	%r12, %rdi
	call	default_function_array_conversion
	jmp	.L24053
.L34108:
	movq	72(%r11), %rdi
	movq	32(%rbx), %rsi
	jmp	.L31993
.L34107:
	testq	%r11, %r11
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L24048
.L34106:
	testq	%r11, %r11
	movl	$1, %eax
	cmovne	%eax, %r10d
	jmp	.L24046
.L24043:
	movzbl	17(%rbx), %esi
	movl	%esi, %edx
	shrb	$3, %sil
	movl	%esi, %r8d
	shrb	$4, %dl
	andl	$1, %r8d
	andl	$1, %edx
	movl	%r8d, -936(%rbp)
	jmp	.L24042
.L34105:
	movl	$121, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31674
.L24038:
	movl	24(%rdi), %eax
	movl	%eax, 24(%rbx)
	jmp	.L24037
.L34104:
	movq	32(%rbx), %rsi
	cmpq	%r13, 8(%rsi)
	jne	.L24032
	.p2align 4,,7
.L24036:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %rbx
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r12d
	cmpb	$116, %cl
	jne	.L34121
.L31173:
	movq	32(%rbx), %rsi
	jmp	.L24036
.L34121:
	cmpb	$115, %cl
	jne	.L24032
	movq	32(%rsi), %rsi
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%rsi)
	je	.L24036
	jmp	.L24032
.L34094:
	cmpb	$18, 16(%rsi)
	jne	.L24028
	movq	8(%rsi), %r12
	cmpb	$6, 16(%r12)
	jne	.L24028
	movq	global_trees(%rip), %r8
	jmp	.L24026
	.p2align 6,,7
.L24025:
	movq	%r12, %rdi
	movq	%rbx, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L24264
.L31994:
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L34122
.L31679:
	movq	%rax, %r14
	jmp	.L23767
.L34122:
	movq	32(%r14), %rsi
	movq	%rsi, -952(%rbp)
	jmp	.L23768
	.p2align 6,,7
.L24264:
	movq	8(%r14), %rax
	testq	%rax, %rax
	jne	.L31679
	movq	16(%r14), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L24271
	cmpq	%r14, 8(%rax)
	je	.L24274
.L24271:
	testq	%rax, %rax
	movq	%rax, %r14
	je	.L23768
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r12, %rdi
	movq	%rax, %rsi
.L31995:
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L23767
	movq	32(%r14), %rax
	movq	%rax, -952(%rbp)
	jmp	.L23768
	.p2align 6,,7
.L24274:
	movq	16(%rdx), %rax
	movq	%rdx, %r14
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L24271
	cmpq	%r14, 8(%rax)
	je	.L24274
	jmp	.L24271
	.p2align 6,,7
.L33222:
	movq	32(%r14), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L23771
	movq	constructor_type(%rip), %rcx
	movq	40(%r14), %rbx
	movq	constructor_unfilled_index(%rip), %r15
	movq	8(%rcx), %rdi
	movq	%rdi, -280(%rbp)
	movq	8(%rbx), %r13
	movzbl	16(%r13), %eax
	movq	%r13, %rdx
	cmpb	$23, %al
	je	.L23773
	cmpb	$18, %al
	je	.L34123
.L31161:
	movq	global_trees(%rip), %r8
.L31659:
	movzbl	16(%rbx), %ecx
.L23772:
	cmpb	$-86, %cl
	je	.L34124
.L23871:
	cmpq	%r8, %rbx
	je	.L34125
	testb	$2, 17(%rbx)
	jne	.L23874
	movl	$0, constructor_constant(%rip)
.L23873:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L23878
	testb	$2, 17(%rbx)
	je	.L34126
.L23878:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L34127
.L23903:
	testq	%r15, %r15
	je	.L23905
	movq	8(%r15), %rax
	cmpq	global_trees(%rip), %rax
	je	.L23767
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L34128
.L23905:
	movq	-280(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%rbx, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, %r13
	je	.L31681
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L34129
.L23909:
	cmpb	$20, 16(%rdi)
	je	.L34130
.L23930:
	cmpb	$21, 16(%rdi)
	je	.L34131
.L23929:
	testq	%r15, %r15
	je	.L23997
	cmpb	$25, 16(%r15)
	je	.L34132
.L23997:
	movq	constructor_elements(%rip), %rdx
	movq	%r15, %rdi
	movq	%r13, %rsi
	call	tree_cons
	movq	constructor_type(%rip), %r15
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r15), %eax
	movq	%r15, %rdx
	cmpb	$18, %al
	je	.L32075
	cmpb	$20, %al
	jne	.L24254
	movq	constructor_unfilled_fields(%rip), %r13
	movq	(%r13), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24253
	testb	$2, 53(%rax)
	je	.L24253
	cmpq	$0, 72(%rax)
	jne	.L24253
.L24005:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24253
	testb	$2, 53(%rax)
	je	.L24253
	cmpq	$0, 72(%rax)
	jne	.L24253
	jmp	.L24005
.L34132:
	movq	%r15, %rdi
	call	copy_node
	movq	%rax, %r15
	jmp	.L23997
.L34131:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L23929
	movq	32(%rax), %rbx
	testb	$1, 17(%rbx)
	jne	.L34133
.L23972:
	movq	$0, constructor_elements(%rip)
	jmp	.L23929
.L34133:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdx
	xorl	%r12d, %r12d
	cmpq	%rdx, %r8
	movq	%r8, %rbx
	movq	%rdx, -592(%rbp)
	jae	.L30388
.L23979:
	cmpl	$3, (%rbx)
	je	.L34134
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L23975:
	addq	$16, %rbx
	cmpq	-592(%rbp), %rbx
	jb	.L23979
.L30388:
	movslq	%r12d,%r9
	movq	%r8, %r12
	addq	$16, %r9
	andq	$-16, %r9
	subq	%r9, %rsp
	cmpq	-592(%rbp), %r8
	movq	%rsp, -304(%rbp)
	movq	%rsp, %rbx
	jae	.L30390
.L23993:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L34135
	cmpl	$2, %eax
	je	.L34136
.L23987:
	movq	8(%r12), %rsi
	movzbl	(%rsi), %r10d
	leaq	1(%rsi), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L23983
.L23992:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L23992
.L23983:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L23993
.L30390:
	movb	$0, (%rbx)
	movq	-304(%rbp), %rsi
	cmpb	$0, (%rsi)
	je	.L23972
	movl	$.LC142, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L23972
.L34136:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L23987
.L34135:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L23983
.L34134:
	addl	$25, %r12d
	jmp	.L23975
.L34130:
	movl	constructor_incremental(%rip), %r8d
	testl	%r8d, %r8d
	je	.L24186
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, %r15
	je	.L23930
	testq	%rax, %rax
	jne	.L23933
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L23940
.L30382:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L24214
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24220
	testb	$2, 53(%rax)
	je	.L24220
	cmpq	$0, 72(%rax)
	jne	.L24220
.L23946:
	movq	constructor_unfilled_fields(%rip), %r11
	movq	(%r11), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24220
	testb	$2, 53(%rax)
	je	.L24220
	cmpq	$0, 72(%rax)
	jne	.L24220
	jmp	.L23946
.L23940:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L23940
	movq	constructor_type(%rip), %rdi
	jmp	.L30382
.L23933:
	movq	%r15, %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r12
	call	bit_position
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L24186
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L23953
	cmpb	$18, %al
	jne	.L24186
.L23953:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L23959
.L30385:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L24214
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24220
	testb	$2, 53(%rax)
	je	.L24220
	cmpq	$0, 72(%rax)
	jne	.L24220
.L23965:
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24220
	testb	$2, 53(%rax)
	je	.L24220
	cmpq	$0, 72(%rax)
	jne	.L24220
	jmp	.L23965
.L23959:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L23959
	movq	constructor_type(%rip), %rdi
	jmp	.L30385
	.p2align 6,,7
.L34129:
	movl	constructor_incremental(%rip), %r10d
	testl	%r10d, %r10d
	je	.L24186
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L31168
	movl	constructor_incremental(%rip), %esi
	testl	%esi, %esi
	je	.L24186
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r15, %rdi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L24186
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L23912
	cmpb	$18, %al
	jne	.L24186
.L23912:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L23918
.L30379:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L24214
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24220
	testb	$2, 53(%rax)
	je	.L24220
	cmpq	$0, 72(%rax)
	jne	.L24220
.L23924:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L24220
	testb	$2, 53(%rax)
	je	.L24220
	cmpq	$0, 72(%rax)
	jne	.L24220
	jmp	.L23924
.L23918:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L23918
	movq	constructor_type(%rip), %rdi
	jmp	.L30379
	.p2align 6,,7
.L31168:
	movq	constructor_type(%rip), %rdi
	jmp	.L23909
.L34128:
	call	integer_zerop
	testl	%eax, %eax
	je	.L23905
	movq	constructor_type(%rip), %rcx
	cmpb	$18, 16(%rcx)
	je	.L23767
	cmpq	$0, (%r15)
	jne	.L23767
	jmp	.L23905
.L34127:
	movq	8(%rbx), %rsi
	movq	%rbx, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L23903
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L23903
.L34126:
	movl	$.LC42, %edi
	xorl	%eax, %eax
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdi
	xorl	%r12d, %r12d
	cmpq	%rdi, %r8
	movq	%r8, %rbx
	movq	%rdi, %r13
	jae	.L30374
.L23885:
	cmpl	$3, (%rbx)
	je	.L34137
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L23881:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L23885
.L30374:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, -296(%rbp)
	movq	%rsp, %rbx
	jae	.L30376
.L23899:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L34138
	cmpl	$2, %eax
	je	.L34139
.L23893:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r13d
	leaq	1(%rdx), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L23889
	.p2align 4,,7
.L23898:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L23898
.L23889:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L23899
.L30376:
	movb	$0, (%rbx)
	movq	-296(%rbp), %rbx
	cmpb	$0, (%rbx)
	jne	.L34140
.L23902:
	movq	global_trees(%rip), %rbx
	jmp	.L23903
.L34140:
	movl	$.LC142, %edi
	movq	%rbx, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L23902
.L34139:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L23893
.L34138:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L23889
.L34137:
	addl	$25, %r12d
	jmp	.L23881
.L23874:
	movq	8(%rbx), %rsi
	movq	%rbx, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L23877
	movq	constructor_type(%rip), %r11
	movzbl	16(%r11), %r8d
	subb	$20, %r8b
	cmpb	$1, %r8b
	ja	.L23873
	testb	$2, 53(%r15)
	je	.L23873
	cmpb	$25, 16(%rbx)
	je	.L23873
.L23877:
	movl	$0, constructor_simple(%rip)
	jmp	.L23873
.L34125:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L23873
.L34124:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L23871
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L23871
	xorl	%r10d, %r10d
	testl	%r10d, %r10d
	je	.L23871
	movq	32(%rbx), %r12
	movq	32(%r12), %rsi
	movq	104(%rsi), %rbx
	jmp	.L23871
.L34123:
	movzbl	16(%rbx), %ecx
	cmpb	$29, %cl
	je	.L34141
.L23774:
	movq	128(%rdx), %rdi
	movq	-280(%rbp), %rdx
	movq	128(%rdx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L31161
	movq	8(%rbx), %r13
.L23773:
	movzbl	16(%r13), %r12d
	cmpl	$23, %r12d
	je	.L23776
	cmpl	$18, %r12d
	je	.L23776
	movzbl	16(%rbx), %ecx
	cmpb	$32, %cl
	je	.L34142
	movl	optimize(%rip), %eax
	testl	%eax, %eax
	je	.L23839
	cmpb	$34, %cl
	je	.L34143
.L23839:
	cmpb	$116, %cl
	movq	%rbx, %rdx
	je	.L31167
	cmpb	$115, %cl
	je	.L34144
.L23848:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L23853
	cmpb	$49, %al
	je	.L23853
	cmpb	$50, %al
	je	.L23853
	cmpb	$101, %al
	je	.L23853
.L23852:
	cmpl	$10, %r12d
	je	.L34145
	cmpb	$39, %cl
	je	.L34146
.L23861:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L23866
	testb	$32, 17(%r13)
	je	.L23867
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L23868
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r13), %ecx
	movzwl	60(%rdx), %r13d
	andl	$511, %ecx
	andl	$511, %r13d
	cmpl	%r13d, %ecx
	je	.L23868
.L23867:
	movq	integer_types+40(%rip), %rdi
.L31990:
	movq	%rbx, %rsi
.L31991:
	call	convert
.L31658:
	movq	%rax, %r12
.L31649:
	movq	global_trees(%rip), %r8
.L23837:
	movq	%r12, %rbx
	jmp	.L31659
.L23868:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31990
.L23866:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L23869
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L23869
	movq	global_trees+192(%rip), %r9
	cmpq	%r9, 128(%r13)
	je	.L34147
.L23869:
	cmpl	$5, %r12d
	je	.L34148
.L23870:
	movq	%rbx, %r12
	jmp	.L31649
.L34148:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L31650:
	movq	global_trees(%rip), %r8
	movq	%r8, %r12
	jmp	.L23837
.L34147:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31990
	.p2align 6,,7
.L34146:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L23861
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%rdi), %esi
	movq	40(%rdx), %rdi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L23861
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L23867
	testb	$32, 17(%r13)
	jne	.L23868
	jmp	.L23867
	.p2align 6,,7
.L34145:
	movq	integer_types+40(%rip), %r11
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r12d
	movzwl	60(%r11), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r12d, %r12d
	jne	.L23860
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L23859
.L23860:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L23859:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31990
.L23853:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L23852
.L34144:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%rsi)
	jne	.L23848
	.p2align 4,,7
.L23851:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %rbx
	cmpb	$116, %cl
	jne	.L34149
.L31167:
	movq	32(%rbx), %rsi
	jmp	.L23851
.L34149:
	cmpb	$115, %cl
	jne	.L23848
	movq	32(%rsi), %r10
	movq	8(%rbx), %r8
	cmpq	%r8, 8(%r10)
	movq	%r10, %rsi
	je	.L23851
	jmp	.L23848
.L34143:
	movl	pedantic(%rip), %edi
	testl	%edi, %edi
	jne	.L23839
	cmpb	$51, 48(%rbx)
	je	.L23839
	cmpq	$0, current_function_decl(%rip)
	je	.L23845
	movzbl	17(%rbx), %ecx
	andb	$24, %cl
	cmpb	$16, %cl
	je	.L34150
.L23845:
	movq	%rbx, %rsi
.L23846:
	movq	%rsi, %rbx
	movq	8(%rsi), %r13
.L31648:
	movzbl	16(%rbx), %ecx
	jmp	.L23839
.L34150:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L23845
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L23845
	testb	$2, 17(%rax)
	je	.L23845
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L23846
	jmp	.L23845
	.p2align 6,,7
.L34142:
	movq	104(%rbx), %rbx
	jmp	.L31648
.L23776:
	movzbl	16(%rbx), %ecx
	movl	%r12d, %edx
	movq	%rbx, %rdi
	xorl	%r12d, %r12d
	cmpb	$116, %cl
	je	.L31163
	cmpb	$115, %cl
	je	.L34151
.L23778:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L23784
	cmpb	$49, %al
	je	.L23784
	cmpb	$50, %al
	je	.L23784
	cmpb	$101, %al
	je	.L23784
.L23783:
	cmpl	$23, %edx
	je	.L34152
	cmpl	$18, %edx
	jne	.L23870
	movzbl	%cl, %r8d 
	xorl	%edx, %edx
	movq	8(%r13), %r11
	movzbl	tree_code_type(%r8), %eax
	movl	$0, -932(%rbp)
	cmpb	$114, %al
	je	.L23789
	cmpb	$100, %al
	je	.L23789
.L23788:
	movzbl	17(%r13), %r8d
	movl	$1, %esi
	movl	%r8d, %r10d
	movl	%r8d, %edi
	shrb	$3, %r10b
	shrb	$4, %dil
	andl	$1, %r10d
	andl	%edi, %esi
	movzbl	16(%r13), %edi
	addl	%r10d, %r10d
	orl	%r10d, %esi
	movzbl	62(%r13), %r10d
	movl	%r10d, %r9d
	shrb	$5, %r9b
	andl	$1, %r9d
	sall	$2, %r9d
	orl	%r9d, %esi
	xorl	%r9d, %r9d
	cmpb	$20, %dil
	je	.L34153
.L23792:
	leal	0(,%r9,8), %r13d
	orl	%r13d, %esi
	jne	.L23791
	movl	-932(%rbp), %esi
	testl	%esi, %esi
	jne	.L23791
	testl	%edx, %edx
	je	.L23790
.L23791:
	movl	%r8d, %r13d
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r13b
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%r13d, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L34154
.L23794:
	leal	0(,%rcx,8), %r10d
	leal	(%rdx,%rdx), %r8d
	movq	%r11, %rdi
	orl	%r10d, %esi
	orl	-932(%rbp), %esi
	orl	%r8d, %esi
	call	c_build_qualified_type
	movzbl	16(%rbx), %ecx
	movq	%rax, %r11
.L23790:
	cmpb	$41, %cl
	je	.L34155
	cmpb	$47, %cl
	je	.L34156
	xorl	%r13d, %r13d
	testl	%r12d, %r12d
	je	.L34157
.L23833:
	movl	flag_isoc99(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L23834
	testl	%r13d, %r13d
	je	.L23870
.L23834:
	movq	%r11, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %r12
	je	.L34158
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%r12, %rdi
	movq	%rax, %rsi
	jmp	.L31991
.L34158:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, %r12
	call	mark_addressable
	testl	%eax, %eax
	je	.L31650
	movq	%rbx, %rdi
	call	staticp
	movzbl	17(%r12), %ebx
	movl	%eax, %r11d
	andb	$1, %r11b
	addb	%r11b, %r11b
	andb	$-4, %bl
	orb	%r11b, %bl
	movb	%bl, 17(%r12)
	jmp	.L31649
.L34157:
	movq	%rbx, %rdi
	movq	%r11, -1312(%rbp)
	call	lvalue_p
	movq	-1312(%rbp), %r11
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r13d
	jmp	.L23833
.L34156:
	movq	40(%rbx), %r12
	movq	8(%r12), %r13
	movzbl	16(%r13), %edx
	movq	%r13, %rax
	cmpl	$23, %edx
	movl	%edx, -284(%rbp)
	je	.L23798
	cmpl	$18, %edx
	je	.L23798
	movzbl	16(%r12), %edx
	cmpb	$32, %dl
	je	.L34159
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L23801
	cmpb	$34, %dl
	je	.L34160
.L23801:
	cmpb	$116, %dl
	movq	%r12, %rcx
	je	.L31165
	cmpb	$115, %dl
	je	.L34161
.L23810:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L23815
	cmpb	$49, %al
	je	.L23815
	cmpb	$50, %al
	je	.L23815
	cmpb	$101, %al
	je	.L23815
.L23814:
	cmpl	$10, -284(%rbp)
	je	.L34162
	cmpb	$39, %dl
	je	.L34163
.L23823:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L23828
	testb	$32, 17(%r13)
	je	.L23829
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L23830
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r13), %r9d
	movzwl	60(%rdx), %r13d
	andl	$511, %r9d
	andl	$511, %r13d
	cmpl	%r13d, %r9d
	je	.L23830
.L23829:
	movq	integer_types+40(%rip), %rdi
.L31647:
	movq	%r12, %rsi
	call	convert
.L23799:
	movq	8(%rax), %rsi
	movq	32(%rbx), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L31658
.L23830:
	movq	integer_types+48(%rip), %rdi
	jmp	.L31647
	.p2align 6,,7
.L23828:
	movl	flag_traditional(%rip), %r8d
	testl	%r8d, %r8d
	je	.L23831
	movl	flag_allow_single_precision(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L23831
	movq	global_trees+192(%rip), %rsi
	cmpq	%rsi, 128(%r13)
	je	.L34164
.L23831:
	cmpl	$5, -284(%rbp)
	je	.L34165
	movq	%r12, %rax
	jmp	.L23799
.L34165:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L23799
.L34164:
	movq	global_trees+200(%rip), %rdi
	jmp	.L31647
	.p2align 6,,7
.L34163:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L23823
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%rdi), %esi
	movq	40(%rdx), %rdi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L23823
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L23829
	testb	$32, 17(%r13)
	jne	.L23830
	jmp	.L23829
	.p2align 6,,7
.L34162:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r11d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r11d, %r11d
	jne	.L23822
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L23821
.L23822:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L23821:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L31647
.L23815:
	movl	24(%rcx), %eax
	movl	%eax, 24(%r12)
	jmp	.L23814
.L34161:
	movq	32(%r12), %rsi
	movq	8(%r12), %r9
	cmpq	%r9, 8(%rsi)
	jne	.L23810
.L23813:
	movzbl	16(%rsi), %edx
	movq	%rsi, %r12
	cmpb	$116, %dl
	jne	.L34166
.L31165:
	movq	32(%r12), %rsi
	jmp	.L23813
.L34166:
	cmpb	$115, %dl
	jne	.L23810
	movq	32(%rsi), %r10
	movq	8(%r12), %r8
	cmpq	%r8, 8(%r10)
	movq	%r10, %rsi
	je	.L23813
	jmp	.L23810
.L34160:
	movl	pedantic(%rip), %edi
	testl	%edi, %edi
	jne	.L23805
	cmpb	$51, 48(%r12)
	je	.L23805
	cmpq	$0, current_function_decl(%rip)
	je	.L23807
	movzbl	17(%r12), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L34167
.L23807:
	movq	%r12, %rsi
.L23808:
	movq	%rsi, %r12
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L23805:
	movq	%rax, %r13
	jmp	.L23801
.L34167:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L23807
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L23807
	testb	$2, 17(%rax)
	je	.L23807
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L23808
	jmp	.L23807
	.p2align 6,,7
.L34159:
	movq	104(%r12), %r12
	movzbl	16(%r12), %edx
	jmp	.L23801
.L23798:
	movq	%r12, %rdi
	call	default_function_array_conversion
	jmp	.L23799
.L34155:
	movq	72(%r11), %rdi
	movq	32(%rbx), %rsi
	jmp	.L31991
.L34154:
	testq	%r11, %r11
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L23794
.L34153:
	testq	%r11, %r11
	movl	$1, %eax
	cmovne	%eax, %r9d
	jmp	.L23792
.L23789:
	movzbl	17(%rbx), %r10d
	movl	%r10d, %edi
	shrb	$3, %r10b
	shrb	$4, %dil
	movl	%r10d, %edx
	movl	%edi, %eax
	andl	$1, %edx
	andl	$1, %eax
	movl	%eax, -932(%rbp)
	jmp	.L23788
.L34152:
	movl	$121, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L31658
.L23784:
	movl	24(%rdi), %eax
	movl	%eax, 24(%rbx)
	jmp	.L23783
.L34151:
	movq	32(%rbx), %rsi
	cmpq	%r13, 8(%rsi)
	jne	.L23778
	.p2align 4,,7
.L23782:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %rbx
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r12d
	cmpb	$116, %cl
	jne	.L34168
.L31163:
	movq	32(%rbx), %rsi
	jmp	.L23782
.L34168:
	cmpb	$115, %cl
	jne	.L23778
	movq	32(%rsi), %rsi
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%rsi)
	je	.L23782
	jmp	.L23778
.L34141:
	movq	-280(%rbp), %rsi
	cmpb	$18, 16(%rsi)
	jne	.L23774
	movq	8(%rsi), %r13
	cmpb	$6, 16(%r13)
	jne	.L23774
	movq	global_trees(%rip), %r8
	jmp	.L23772
	.p2align 6,,7
.L23771:
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%r14), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L31994
	movq	8(%r14), %rax
	testq	%rax, %rax
	jne	.L31679
	movq	16(%r14), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L24017
	cmpq	%r14, 8(%rax)
	je	.L24020
.L24017:
	testq	%rax, %rax
	movq	%rax, %r14
	je	.L23768
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	jmp	.L31995
.L24020:
	movq	16(%rdx), %rax
	movq	%rdx, %r14
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L24017
	cmpq	%r14, 8(%rax)
	je	.L24020
	jmp	.L24017
.L33221:
	movq	constructor_unfilled_fields(%rip), %rax
	testq	%rax, %rax
	je	.L23729
.L31358:
	movq	40(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L34169
.L23734:
	movq	(%rax), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	jne	.L31358
	jmp	.L23729
.L34169:
	call	integer_zerop
	testl	%eax, %eax
	je	.L34170
	movq	constructor_unfilled_fields(%rip), %rax
	jmp	.L23734
.L34170:
	movq	constructor_unfilled_fields(%rip), %rax
	testq	%rax, %rax
	je	.L23729
	movl	constructor_designated(%rip), %edx
	testl	%edx, %edx
	jne	.L23729
	movq	72(%rax), %rax
	movl	$.LC159, %r12d
	testq	%rax, %rax
	je	.L23737
	movq	32(%rax), %r12
.L23737:
	movq	spelling(%rip), %rcx
	movq	spelling_base(%rip), %rdi
	movl	spelling_size(%rip), %eax
	movq	%rcx, %r14
	subq	%rdi, %r14
	movq	%r14, %rbx
	shrq	$4, %rbx
	cmpl	%eax, %ebx
	jl	.L23738
	addl	$10, %eax
	testq	%rdi, %rdi
	movl	%eax, spelling_size(%rip)
	jne	.L23739
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L31646:
	movslq	%ebx,%rcx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rcx
	addq	spelling_base(%rip), %rcx
	movq	%rcx, spelling(%rip)
.L23738:
	movq	%r12, 8(%rcx)
	movl	$2, (%rcx)
	xorl	%eax, %eax
	addq	$16, %rcx
	movl	$.LC42, %edi
	movl	$.LC175, %esi
	movq	%rcx, spelling(%rip)
	xorl	%r12d, %r12d
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r9
	cmpq	%r9, %r8
	movq	%r8, %rbx
	movq	%r9, %r13
	jae	.L30365
.L23748:
	cmpl	$3, (%rbx)
	je	.L34171
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L23744:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L23748
.L30365:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30367
.L23762:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L34172
	cmpl	$2, %eax
	je	.L34173
.L23756:
	movq	8(%r12), %r11
	movzbl	(%r11), %r8d
	leaq	1(%r11), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L23752
.L23761:
	movzbl	(%rcx), %r15d
	incq	%rbx
	incq	%rcx
	testb	%r15b, %r15b
	movb	%r15b, (%rbx)
	jne	.L23761
.L23752:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L23762
.L30367:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L34174
.L23765:
	movslq	constructor_depth(%rip),%r12
	salq	$4, %r12
	addq	spelling_base(%rip), %r12
	movq	%r12, spelling(%rip)
	jmp	.L23729
.L34174:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L23765
	.p2align 6,,7
.L34173:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L23756
.L34172:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L23752
	.p2align 6,,7
.L34171:
	addl	$25, %r12d
	jmp	.L23744
.L23739:
	movslq	%eax,%rsi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L31646
	.p2align 6,,7
.L33220:
	movq	24(%rax), %rax
	testq	%rax, %rax
	je	.L23672
	cmpq	$0, 112(%rax)
	jne	.L23672
	movq	constructor_unfilled_index(%rip), %rdi
	call	integer_zerop
	testl	%eax, %eax
	jne	.L31645
	movq	constructor_type(%rip), %rdx
	cmpq	$0, 32(%rdx)
	jne	.L28037
	cmpl	$2, constructor_depth(%rip)
	jg	.L34175
	movl	pedantic(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L34176
.L23701:
	movq	constructor_fields(%rip), %rcx
	cmpq	$0, (%rcx)
	je	.L23672
.L31645:
	movq	$0, constructor_type(%rip)
	jmp	.L23672
.L34176:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC174, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L30360
.L23709:
	cmpl	$3, (%rbx)
	je	.L34177
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L23705:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L23709
.L30360:
	movslq	%r12d,%r11
	movq	%r8, %r12
	addq	$16, %r11
	andq	$-16, %r11
	subq	%r11, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30362
.L23723:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L34178
	cmpl	$2, %eax
	je	.L34179
.L23717:
	movq	8(%r12), %r10
	movzbl	(%r10), %r15d
	leaq	1(%r10), %rcx
	testb	%r15b, %r15b
	movb	%r15b, (%rbx)
	je	.L23713
.L23722:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L23722
.L23713:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L23723
.L30362:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L23701
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L23701
	.p2align 6,,7
.L34179:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L23717
.L34178:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L23713
	.p2align 6,,7
.L34177:
	addl	$25, %r12d
	jmp	.L23705
.L34175:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC173, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r14
	xorl	%r12d, %r12d
	cmpq	%r14, %r8
	movq	%r8, %rbx
	movq	%r14, %r13
	jae	.L30355
.L23683:
	cmpl	$3, (%rbx)
	je	.L34180
	movq	8(%rbx), %rdi
	movq	%r8, -1304(%rbp)
	call	strlen
	movq	-1304(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L23679:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L23683
.L30355:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L30357
.L23697:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L34181
	cmpl	$2, %eax
	je	.L34182
.L23691:
	movq	8(%r12), %r9
	movzbl	(%r9), %esi
	leaq	1(%r9), %rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	je	.L23687
.L23696:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L23696
.L23687:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L23697
.L30357:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L23701
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L23701
	.p2align 6,,7
.L34182:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L23691
.L34181:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L23687
.L34180:
	addl	$25, %r12d
	jmp	.L23679
.LFE39:
.Lfe39:
	.size	push_init_level,.Lfe39-push_init_level
	.align 2
	.p2align 4,,15
.globl pop_init_level
	.type	pop_init_level,@function
pop_init_level:
.LFB40:
	pushq	%rbp
.LCFI174:
	movq	%rsp, %rbp
.LCFI175:
	pushq	%r15
.LCFI176:
	pushq	%r14
.LCFI177:
	pushq	%r13
.LCFI178:
	pushq	%r12
.LCFI179:
	pushq	%rbx
.LCFI180:
	subq	$344, %rsp
.LCFI181:
	testl	%edi, %edi
	movq	$0, -360(%rbp)
	jne	.L37000
	movq	constructor_stack(%rip), %rdx
	movq	%rdx, -368(%rbp)
	cmpb	$0, 106(%rdx)
	jne	.L35892
.L36730:
	cmpq	$0, constructor_range_stack(%rip)
	jne	.L37275
.L34184:
	movq	constructor_type(%rip), %rax
	movq	-368(%rbp), %rdi
	testq	%rax, %rax
	movq	%rdi, -48(%rbp)
	je	.L35894
	cmpq	$0, constructor_fields(%rip)
	je	.L35894
	cmpb	$18, 16(%rax)
	je	.L37276
.L35894:
	movl	extra_warnings(%rip), %r12d
	testl	%r12d, %r12d
	je	.L35951
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L35951
	cmpb	$20, 16(%rax)
	je	.L37277
.L35951:
	movl	$1, constructor_incremental(%rip)
	movq	constructor_pending_elts(%rip), %r15
.L35988:
	testq	%r15, %r15
	movq	$0, -352(%rbp)
	je	.L35990
	.p2align 4,,7
.L36656:
	movq	constructor_type(%rip), %r14
	movzbl	16(%r14), %eax
	cmpb	$18, %al
	je	.L37278
	subb	$20, %al
	cmpb	$1, %al
	ja	.L35989
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L35990
	call	bit_position
	movq	32(%r15), %rdi
	movq	%rax, %r12
	call	bit_position
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L36405
	movq	32(%r15), %rbx
	movq	%rbx, %r14
	movq	%rbx, constructor_unfilled_fields(%rip)
	movq	40(%r15), %rbx
	movq	8(%r14), %r11
	movq	%r14, -344(%rbp)
	movq	%r11, -152(%rbp)
	movq	8(%rbx), %r13
	movzbl	16(%r13), %eax
	movq	%r13, %rdx
	cmpb	$23, %al
	je	.L36407
	cmpb	$18, %al
	je	.L37279
.L37076:
	movq	global_trees(%rip), %r8
.L37210:
	movzbl	16(%rbx), %ecx
.L36406:
	cmpb	$-86, %cl
	je	.L37280
.L36505:
	cmpq	%r8, %rbx
	je	.L37281
	testb	$2, 17(%rbx)
	jne	.L36508
	movl	$0, constructor_constant(%rip)
.L36507:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L36512
	testb	$2, 17(%rbx)
	je	.L37282
.L36512:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L37283
.L36537:
	testq	%r14, %r14
	je	.L36539
	movq	8(%r14), %rax
	cmpq	global_trees(%rip), %rax
	je	.L35989
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L37284
.L36539:
	movq	-152(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%rbx, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, %r13
	je	.L37217
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L37285
.L36543:
	cmpb	$20, 16(%rdi)
	je	.L37286
.L36564:
	cmpb	$21, 16(%rdi)
	je	.L37287
.L36563:
	testq	%r14, %r14
	je	.L36631
	cmpb	$25, 16(%r14)
	je	.L37288
.L36631:
	movq	-344(%rbp), %rdi
	movq	constructor_elements(%rip), %rdx
	movq	%r13, %rsi
	call	tree_cons
	movq	constructor_type(%rip), %r14
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r14), %eax
	cmpb	$18, %al
	je	.L37289
	cmpb	$20, %al
	je	.L37290
	cmpb	$21, 16(%r14)
	je	.L37291
.L36633:
	xorl	%esi, %esi
	testl	%esi, %esi
.L37252:
	jne	.L37292
	.p2align 4,,7
.L35989:
	testq	%r15, %r15
	jne	.L36656
.L35990:
	movl	$1, %r12d
	testl	%r12d, %r12d
	je	.L36659
	cmpq	$0, -352(%rbp)
	je	.L36659
	movq	constructor_type(%rip), %rcx
	movzbl	16(%rcx), %edx
	leal	-20(%rdx), %r8d
	cmpb	$1, %r8b
	jbe	.L37293
	cmpb	$18, %dl
	jne	.L35988
	movq	-352(%rbp), %rbx
	movq	%rbx, constructor_unfilled_index(%rip)
	jmp	.L35988
.L37293:
	movq	-352(%rbp), %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	jmp	.L35988
.L36659:
	movq	-368(%rbp), %r15
	movq	88(%r15), %rax
	testq	%rax, %rax
	jne	.L37218
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L36664
	movzbl	16(%rax), %edx
	leal	-20(%rdx), %r11d
	cmpb	$1, %r11b
	jbe	.L36667
	cmpb	$18, %dl
	je	.L36667
	cmpb	$9, %dl
	je	.L36667
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	jne	.L36668
	movl	constructor_erroneous(%rip), %r9d
	testl	%r9d, %r9d
	je	.L37294
.L36669:
	movq	global_trees(%rip), %rax
	movq	%rax, -360(%rbp)
.L36664:
	movq	-368(%rbp), %rsi
	movq	8(%rsi), %r10
	movsbl	109(%rsi),%edx
	movsbl	104(%rsi),%r11d
	movsbl	105(%rsi),%r15d
	movsbl	107(%rsi),%r8d
	movsbl	110(%rsi),%ecx
	movq	%r10, constructor_type(%rip)
	movq	16(%rsi), %rax
	movq	24(%rsi), %r13
	movq	%rsi, %r10
	movq	32(%rsi), %r14
	movq	40(%rsi), %rdi
	cmpb	$0, 106(%r10)
	movq	48(%rsi), %r9
	movl	%edx, constructor_incremental(%rip)
	movq	56(%rsi), %rbx
	movq	64(%rsi), %r12
	movq	%rax, constructor_fields(%rip)
	movq	72(%rsi), %rsi
	movl	84(%r10), %edx
	movq	%r13, constructor_index(%rip)
	movq	%r14, constructor_max_index(%rip)
	movq	%rdi, constructor_unfilled_index(%rip)
	movq	%r9, constructor_unfilled_fields(%rip)
	movq	%rbx, constructor_bit_index(%rip)
	movq	%r12, constructor_elements(%rip)
	movl	%r11d, constructor_constant(%rip)
	movl	%r15d, constructor_simple(%rip)
	movl	%r8d, constructor_erroneous(%rip)
	movl	%ecx, constructor_designated(%rip)
	movq	%rsi, constructor_pending_elts(%rip)
	movl	%edx, constructor_depth(%rip)
	jne	.L36726
	movq	96(%r10), %r8
	movq	%r8, constructor_range_stack(%rip)
.L36726:
	movslq	%edx,%r15
	movq	-48(%rbp), %rdi
	movq	-368(%rbp), %rdx
	salq	$4, %r15
	addq	spelling_base(%rip), %r15
	movq	(%rdx), %rcx
	movq	%r15, spelling(%rip)
	movq	%rcx, constructor_stack(%rip)
	call	free
	movq	-360(%rbp), %rax
	testq	%rax, %rax
	jne	.L34183
	cmpq	$0, constructor_stack(%rip)
	jne	.L36728
	movq	global_trees(%rip), %rax
.L34183:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
.L36728:
	xorl	%eax, %eax
	jmp	.L34183
.L37294:
	movl	$.LC42, %edi
	xorl	%eax, %eax
	movl	$.LC176, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdi
	xorl	%r12d, %r12d
	cmpq	%rdi, %r8
	movq	%r8, %rbx
	movq	%rdi, %r13
	jae	.L36977
.L36676:
	cmpl	$3, (%rbx)
	je	.L37295
	movq	8(%rbx), %rdi
	movq	%r8, -376(%rbp)
	call	strlen
	movq	-376(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L36672:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L36676
.L36977:
	movslq	%r12d,%r14
	movq	%r8, %r12
	addq	$16, %r14
	andq	$-16, %r14
	subq	%r14, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L36979
.L36690:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L37296
	cmpl	$2, %eax
	je	.L37297
.L36684:
	movq	8(%r12), %r10
	movzbl	(%r10), %r13d
	leaq	1(%r10), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L36680
.L36689:
	movzbl	(%rcx), %esi
	incq	%rbx
	incq	%rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	jne	.L36689
.L36680:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L36690
.L36979:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L36669
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L36669
	.p2align 6,,7
.L37297:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L36684
.L37296:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L36680
	.p2align 6,,7
.L37295:
	addl	$25, %r12d
	jmp	.L36672
.L36668:
	cmpq	$0, (%rax)
	jne	.L37298
.L36695:
	movq	32(%rax), %rax
.L37218:
	movq	%rax, -360(%rbp)
	jmp	.L36664
.L37298:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC177, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rcx
	xorl	%r12d, %r12d
	cmpq	%rcx, %r8
	movq	%r8, %rbx
	movq	%rcx, %r13
	jae	.L36982
.L36702:
	cmpl	$3, (%rbx)
	je	.L37299
	movq	8(%rbx), %rdi
	movq	%r8, -376(%rbp)
	call	strlen
	movq	-376(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L36698:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L36702
.L36982:
	movslq	%r12d,%rdx
	movq	%r8, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L36984
.L36716:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L37300
	cmpl	$2, %eax
	je	.L37301
.L36710:
	movq	8(%r12), %r15
	movzbl	(%r15), %r8d
	leaq	1(%r15), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L36706
.L36715:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L36715
.L36706:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L36716
.L36984:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L37302
.L36719:
	movq	constructor_elements(%rip), %rax
	jmp	.L36695
.L37302:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L36719
	.p2align 6,,7
.L37301:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L36710
.L37300:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L36706
	.p2align 6,,7
.L37299:
	addl	$25, %r12d
	jmp	.L36698
.L36667:
	movl	constructor_erroneous(%rip), %r12d
	testl	%r12d, %r12d
	je	.L36722
	movq	global_trees(%rip), %rbx
	movq	%rbx, -360(%rbp)
	jmp	.L36664
.L36722:
	movq	constructor_elements(%rip), %rdi
	call	nreverse
	xorl	%edx, %edx
	movq	constructor_type(%rip), %rsi
	movq	%rax, %rcx
	movl	$46, %edi
	xorl	%eax, %eax
	call	build
	movl	constructor_constant(%rip), %r9d
	movq	%rax, -360(%rbp)
	testl	%r9d, %r9d
	je	.L36664
	orb	$2, 17(%rax)
	movl	constructor_constant(%rip), %edi
	testl	%edi, %edi
	je	.L36664
	movl	constructor_simple(%rip), %r14d
	testl	%r14d, %r14d
	je	.L36664
	movq	-360(%rbp), %r13
	orb	$4, 18(%r13)
	jmp	.L36664
	.p2align 6,,7
.L37292:
	xorl	%edi, %edi
	call	output_pending_init_elements
	jmp	.L35989
.L37291:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L36633
.L37290:
	movq	constructor_unfilled_fields(%rip), %r13
	movq	(%r13), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L36633
	testb	$2, 53(%rax)
	je	.L36633
	cmpq	$0, 72(%rax)
	jne	.L36633
.L36639:
	movq	constructor_unfilled_fields(%rip), %r10
	movq	(%r10), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L36633
	testb	$2, 53(%rax)
	je	.L36633
	cmpq	$0, 72(%rax)
	jne	.L36633
	jmp	.L36639
.L37289:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L36633
.L37288:
	movq	%r14, %rdi
	call	copy_node
	movq	%rax, -344(%rbp)
	jmp	.L36631
.L37287:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L36563
	movq	32(%rax), %r8
	testb	$1, 17(%r8)
	jne	.L37303
.L36606:
	movq	$0, constructor_elements(%rip)
	jmp	.L36563
.L37303:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rcx
	xorl	%r12d, %r12d
	cmpq	%rcx, %r8
	movq	%r8, %rbx
	movq	%rcx, -184(%rbp)
	jae	.L36970
.L36613:
	cmpl	$3, (%rbx)
	je	.L37304
	movq	8(%rbx), %rdi
	movq	%r8, -376(%rbp)
	call	strlen
	movq	-376(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L36609:
	addq	$16, %rbx
	cmpq	-184(%rbp), %rbx
	jb	.L36613
.L36970:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	-184(%rbp), %r8
	movq	%rsp, -176(%rbp)
	movq	%rsp, %rbx
	jae	.L36972
.L36627:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L37305
	cmpl	$2, %eax
	je	.L37306
.L36621:
	movq	8(%r12), %r9
	movzbl	(%r9), %r11d
	leaq	1(%r9), %rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	je	.L36617
.L36626:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L36626
.L36617:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L36627
.L36972:
	movb	$0, (%rbx)
	movq	-176(%rbp), %r9
	cmpb	$0, (%r9)
	je	.L36606
	movl	$.LC142, %edi
	movq	%r9, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L36606
.L37306:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L36621
.L37305:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L36617
.L37304:
	addl	$25, %r12d
	jmp	.L36609
.L37286:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L36566
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, %r14
	je	.L36564
	testq	%rax, %rax
	jne	.L36567
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L36574
.L36964:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L37307
.L36594:
	cmpb	$18, 16(%rdi)
	je	.L37308
.L36600:
	movl	$0, constructor_incremental(%rip)
.L36566:
	movq	%r14, %rdi
.L37216:
	movq	%r13, %rsi
	call	add_pending_init
	jmp	.L35989
.L37308:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L37309
	movq	global_trees+136(%rip), %rax
.L37213:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L36600
.L37309:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L37213
.L37307:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L36600
	testb	$2, 53(%rax)
	je	.L36600
	cmpq	$0, 72(%rax)
	jne	.L36600
.L36580:
	movq	constructor_unfilled_fields(%rip), %rsi
	movq	(%rsi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L36600
	testb	$2, 53(%rax)
	je	.L36600
	cmpq	$0, 72(%rax)
	jne	.L36600
	jmp	.L36580
.L36574:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L36574
	movq	constructor_type(%rip), %rdi
	jmp	.L36964
.L36567:
	movq	%r14, %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r12
	call	bit_position
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L36566
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L36587
	cmpb	$18, %al
	jne	.L36566
.L36587:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L36593
.L36967:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L36594
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L36600
	testb	$2, 53(%rax)
	je	.L36600
	cmpq	$0, 72(%rax)
	jne	.L36600
.L36599:
	movq	constructor_unfilled_fields(%rip), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L36600
	testb	$2, 53(%rax)
	je	.L36600
	cmpq	$0, 72(%rax)
	jne	.L36600
	jmp	.L36599
.L36593:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L36593
	movq	constructor_type(%rip), %rdi
	jmp	.L36967
	.p2align 6,,7
.L37285:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L36566
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r14, %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L37083
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L36566
	movq	constructor_unfilled_index(%rip), %rsi
	movq	%r14, %rdi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L36566
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L36546
	cmpb	$18, %al
	jne	.L36566
.L36546:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L36552
.L36961:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L36594
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L36600
	testb	$2, 53(%rax)
	je	.L36600
	cmpq	$0, 72(%rax)
	jne	.L36600
.L36558:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L36600
	testb	$2, 53(%rax)
	je	.L36600
	cmpq	$0, 72(%rax)
	jne	.L36600
	jmp	.L36558
.L36552:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L36552
	movq	constructor_type(%rip), %rdi
	jmp	.L36961
	.p2align 6,,7
.L37083:
	movq	constructor_type(%rip), %rdi
	jmp	.L36543
.L37217:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L35989
.L37284:
	call	integer_zerop
	testl	%eax, %eax
	je	.L36539
	movq	constructor_type(%rip), %r10
	cmpb	$18, 16(%r10)
	je	.L35989
	cmpq	$0, (%r14)
	jne	.L35989
	jmp	.L36539
.L37283:
	movq	8(%rbx), %rsi
	movq	%rbx, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L36537
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L36537
.L37282:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L36956
	.p2align 4,,7
.L36519:
	cmpl	$3, (%rbx)
	je	.L37310
	movq	8(%rbx), %rdi
	movq	%r8, -376(%rbp)
	call	strlen
	movq	-376(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L36515:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L36519
.L36956:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, -168(%rbp)
	movq	%rsp, %rbx
	jae	.L36958
	.p2align 4,,7
.L36533:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L37311
	cmpl	$2, %eax
	je	.L37312
.L36527:
	movq	8(%r12), %r9
	movzbl	(%r9), %r11d
	leaq	1(%r9), %rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	je	.L36523
	.p2align 4,,7
.L36532:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L36532
.L36523:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L36533
.L36958:
	movb	$0, (%rbx)
	movq	-168(%rbp), %rsi
	cmpb	$0, (%rsi)
	jne	.L37313
.L36536:
	movq	global_trees(%rip), %rbx
	jmp	.L36537
.L37313:
	movl	$.LC142, %edi
	xorl	%eax, %eax
	call	error
	jmp	.L36536
.L37312:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L36527
.L37311:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L36523
.L37310:
	addl	$25, %r12d
	jmp	.L36515
.L36508:
	movq	8(%rbx), %rsi
	movq	%rbx, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L36511
	movq	constructor_type(%rip), %rcx
	movzbl	16(%rcx), %r8d
	subb	$20, %r8b
	cmpb	$1, %r8b
	ja	.L36507
	testb	$2, 53(%r14)
	je	.L36507
	cmpb	$25, 16(%rbx)
	je	.L36507
.L36511:
	movl	$0, constructor_simple(%rip)
	jmp	.L36507
.L37281:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L36507
.L37280:
	movl	require_constant_value(%rip), %r12d
	testl	%r12d, %r12d
	je	.L36505
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L36505
	xorl	%esi, %esi
	testl	%esi, %esi
	je	.L36505
	movq	32(%rbx), %r13
	movq	32(%r13), %rdx
	movq	104(%rdx), %rbx
	jmp	.L36505
.L37279:
	movzbl	16(%rbx), %ecx
	cmpb	$29, %cl
	je	.L37314
.L36408:
	movq	-152(%rbp), %rax
	movq	128(%rdx), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L37076
	movq	8(%rbx), %r13
.L36407:
	movzbl	16(%r13), %r12d
	cmpl	$23, %r12d
	je	.L36410
	cmpl	$18, %r12d
	je	.L36410
	movzbl	16(%rbx), %ecx
	cmpb	$32, %cl
	je	.L37315
	movl	optimize(%rip), %esi
	testl	%esi, %esi
	je	.L36473
	cmpb	$34, %cl
	je	.L37316
.L36473:
	cmpb	$116, %cl
	movq	%rbx, %rdx
	je	.L37082
	cmpb	$115, %cl
	je	.L37317
.L36482:
	movzbl	%cl, %r10d 
	movzbl	tree_code_type(%r10), %eax
	cmpb	$60, %al
	je	.L36487
	cmpb	$49, %al
	je	.L36487
	cmpb	$50, %al
	je	.L36487
	cmpb	$101, %al
	je	.L36487
.L36486:
	cmpl	$10, %r12d
	je	.L37318
	cmpb	$39, %cl
	je	.L37319
.L36495:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L36500
	testb	$32, 17(%r13)
	je	.L36501
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L36502
	movq	integer_types+40(%rip), %r11
	movzwl	60(%r13), %ecx
	movzwl	60(%r11), %r13d
	andl	$511, %ecx
	andl	$511, %r13d
	cmpl	%r13d, %ecx
	je	.L36502
.L36501:
	movq	integer_types+40(%rip), %rdi
.L37250:
	movq	%rbx, %rsi
.L37251:
	call	convert
.L37209:
	movq	%rax, %r12
.L37200:
	movq	global_trees(%rip), %r8
.L36471:
	movq	%r12, %rbx
	jmp	.L37210
.L36502:
	movq	integer_types+48(%rip), %rdi
	jmp	.L37250
.L36500:
	movl	flag_traditional(%rip), %r9d
	testl	%r9d, %r9d
	je	.L36503
	movl	flag_allow_single_precision(%rip), %edi
	testl	%edi, %edi
	jne	.L36503
	movq	global_trees+192(%rip), %r10
	cmpq	%r10, 128(%r13)
	je	.L37320
.L36503:
	cmpl	$5, %r12d
	je	.L37321
.L36504:
	movq	%rbx, %r12
	jmp	.L37200
.L37321:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L37201:
	movq	global_trees(%rip), %r8
	movq	%r8, %r12
	jmp	.L36471
.L37320:
	movq	global_trees+200(%rip), %rdi
	jmp	.L37250
	.p2align 6,,7
.L37319:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L36495
	movq	integer_types+40(%rip), %r8
	movq	40(%rdx), %rdi
	movzwl	60(%r8), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L36495
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	je	.L36501
	testb	$32, 17(%r13)
	jne	.L36502
	jmp	.L36501
	.p2align 6,,7
.L37318:
	movq	integer_types+40(%rip), %rsi
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r12d
	movzwl	60(%rsi), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r12d, %r12d
	jne	.L36494
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L36493
.L36494:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L36493:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L37250
.L36487:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L36486
.L37317:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r11
	cmpq	%r11, 8(%rsi)
	jne	.L36482
	.p2align 4,,7
.L36485:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %rbx
	cmpb	$116, %cl
	jne	.L37322
.L37082:
	movq	32(%rbx), %rsi
	jmp	.L36485
.L37322:
	cmpb	$115, %cl
	jne	.L36482
	movq	32(%rsi), %rdi
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%rdi)
	movq	%rdi, %rsi
	je	.L36485
	jmp	.L36482
.L37316:
	movl	pedantic(%rip), %r8d
	testl	%r8d, %r8d
	jne	.L36473
	cmpb	$51, 48(%rbx)
	je	.L36473
	cmpq	$0, current_function_decl(%rip)
	je	.L36479
	movzbl	17(%rbx), %ecx
	andb	$24, %cl
	cmpb	$16, %cl
	je	.L37323
.L36479:
	movq	%rbx, %rsi
.L36480:
	movq	%rsi, %rbx
	movq	8(%rsi), %r13
.L37199:
	movzbl	16(%rbx), %ecx
	jmp	.L36473
.L37323:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L36479
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L36479
	testb	$2, 17(%rax)
	je	.L36479
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L36480
	jmp	.L36479
	.p2align 6,,7
.L37315:
	movq	104(%rbx), %rbx
	jmp	.L37199
.L36410:
	movzbl	16(%rbx), %ecx
	movl	%r12d, %edx
	movq	%rbx, %rdi
	xorl	%r12d, %r12d
	cmpb	$116, %cl
	je	.L37078
	cmpb	$115, %cl
	je	.L37324
.L36412:
	movzbl	%cl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L36418
	cmpb	$49, %al
	je	.L36418
	cmpb	$50, %al
	je	.L36418
	cmpb	$101, %al
	je	.L36418
.L36417:
	cmpl	$23, %edx
	je	.L37325
	cmpl	$18, %edx
	jne	.L36504
	movzbl	%cl, %esi 
	xorl	%edx, %edx
	movq	8(%r13), %r11
	movzbl	tree_code_type(%rsi), %eax
	movl	$0, -332(%rbp)
	cmpb	$114, %al
	je	.L36423
	cmpb	$100, %al
	je	.L36423
.L36422:
	movzbl	17(%r13), %r8d
	movl	$1, %esi
	movl	%r8d, %r9d
	movl	%r8d, %edi
	shrb	$3, %r9b
	shrb	$4, %dil
	andl	$1, %r9d
	andl	%edi, %esi
	movzbl	16(%r13), %edi
	addl	%r9d, %r9d
	orl	%r9d, %esi
	movzbl	62(%r13), %r9d
	movl	%r9d, %r10d
	shrb	$5, %r10b
	andl	$1, %r10d
	sall	$2, %r10d
	orl	%r10d, %esi
	xorl	%r10d, %r10d
	cmpb	$20, %dil
	je	.L37326
.L36426:
	leal	0(,%r10,8), %r13d
	orl	%r13d, %esi
	jne	.L36425
	testl	%edx, %edx
	jne	.L36425
	movl	-332(%rbp), %eax
	testl	%eax, %eax
	je	.L36424
.L36425:
	movl	%r8d, %r13d
	shrb	$5, %r9b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r13b
	movl	%r9d, %ecx
	movl	%r8d, %r10d
	andl	%r13d, %esi
	andl	$1, %ecx
	andl	$1, %r10d
	sall	$2, %ecx
	addl	%r10d, %r10d
	orl	%r10d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L37327
.L36428:
	movl	-332(%rbp), %eax
	leal	0(,%rcx,8), %r8d
	movq	%r11, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	addl	%eax, %eax
	orl	%eax, %esi
	call	c_build_qualified_type
	movzbl	16(%rbx), %ecx
	movq	%rax, %r11
.L36424:
	cmpb	$41, %cl
	je	.L37328
	cmpb	$47, %cl
	je	.L37329
	xorl	%r13d, %r13d
	testl	%r12d, %r12d
	je	.L37330
.L36467:
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L36468
	testl	%r13d, %r13d
	je	.L36504
.L36468:
	movq	%r11, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %r12
	je	.L37331
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%r12, %rdi
	movq	%rax, %rsi
	jmp	.L37251
.L37331:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, %r12
	call	mark_addressable
	testl	%eax, %eax
	je	.L37201
	movq	%rbx, %rdi
	call	staticp
	movzbl	17(%r12), %ebx
	movl	%eax, %r10d
	andb	$1, %r10b
	addb	%r10b, %r10b
	andb	$-4, %bl
	orb	%r10b, %bl
	movb	%bl, 17(%r12)
	jmp	.L37200
.L37330:
	movq	%rbx, %rdi
	movq	%r11, -384(%rbp)
	call	lvalue_p
	movq	-384(%rbp), %r11
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r13d
	jmp	.L36467
.L37329:
	movq	40(%rbx), %r12
	movq	8(%r12), %r13
	movzbl	16(%r13), %r9d
	movq	%r13, %rax
	cmpl	$23, %r9d
	movl	%r9d, -156(%rbp)
	je	.L36432
	cmpl	$18, %r9d
	je	.L36432
	movzbl	16(%r12), %edx
	cmpb	$32, %dl
	je	.L37332
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L36435
	cmpb	$34, %dl
	je	.L37333
.L36435:
	cmpb	$116, %dl
	movq	%r12, %rcx
	je	.L37080
	cmpb	$115, %dl
	je	.L37334
.L36444:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L36449
	cmpb	$49, %al
	je	.L36449
	cmpb	$50, %al
	je	.L36449
	cmpb	$101, %al
	je	.L36449
.L36448:
	cmpl	$10, -156(%rbp)
	je	.L37335
	cmpb	$39, %dl
	je	.L37336
.L36457:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L36462
	testb	$32, 17(%r13)
	je	.L36463
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L36464
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r13), %r9d
	movzwl	60(%rdx), %r13d
	andl	$511, %r9d
	andl	$511, %r13d
	cmpl	%r13d, %r9d
	je	.L36464
.L36463:
	movq	integer_types+40(%rip), %rdi
.L37198:
	movq	%r12, %rsi
	call	convert
.L36433:
	movq	8(%rax), %rsi
	movq	32(%rbx), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L37209
.L36464:
	movq	integer_types+48(%rip), %rdi
	jmp	.L37198
.L36462:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L36465
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L36465
	movq	global_trees+192(%rip), %rdi
	cmpq	%rdi, 128(%r13)
	je	.L37337
.L36465:
	cmpl	$5, -156(%rbp)
	je	.L37338
	movq	%r12, %rax
	jmp	.L36433
.L37338:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L36433
.L37337:
	movq	global_trees+200(%rip), %rdi
	jmp	.L37198
	.p2align 6,,7
.L37336:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L36457
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L36457
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L36463
	testb	$32, 17(%r13)
	jne	.L36464
	jmp	.L36463
	.p2align 6,,7
.L37335:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r8d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r8d, %r8d
	jne	.L36456
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L36455
.L36456:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L36455:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L37198
.L36449:
	movl	24(%rcx), %eax
	movl	%eax, 24(%r12)
	jmp	.L36448
.L37334:
	movq	32(%r12), %rsi
	movq	8(%r12), %rdi
	cmpq	%rdi, 8(%rsi)
	jne	.L36444
.L36447:
	movzbl	16(%rsi), %edx
	movq	%rsi, %r12
	cmpb	$116, %dl
	jne	.L37339
.L37080:
	movq	32(%r12), %rsi
	jmp	.L36447
.L37339:
	cmpb	$115, %dl
	jne	.L36444
	movq	32(%rsi), %r10
	movq	8(%r12), %rax
	cmpq	%rax, 8(%r10)
	movq	%r10, %rsi
	je	.L36447
	jmp	.L36444
.L37333:
	movl	pedantic(%rip), %r9d
	testl	%r9d, %r9d
	jne	.L36439
	cmpb	$51, 48(%r12)
	je	.L36439
	cmpq	$0, current_function_decl(%rip)
	je	.L36441
	movzbl	17(%r12), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L37340
.L36441:
	movq	%r12, %rsi
.L36442:
	movq	%rsi, %r12
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L36439:
	movq	%rax, %r13
	jmp	.L36435
.L37340:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L36441
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L36441
	testb	$2, 17(%rax)
	je	.L36441
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L36442
	jmp	.L36441
	.p2align 6,,7
.L37332:
	movq	104(%r12), %r12
	movzbl	16(%r12), %edx
	jmp	.L36435
.L36432:
	movq	%r12, %rdi
	call	default_function_array_conversion
	jmp	.L36433
.L37328:
	movq	72(%r11), %rdi
	movq	32(%rbx), %rsi
	jmp	.L37251
.L37327:
	testq	%r11, %r11
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L36428
.L37326:
	testq	%r11, %r11
	movl	$1, %eax
	cmovne	%eax, %r10d
	jmp	.L36426
.L36423:
	movzbl	17(%rbx), %edi
	movl	%edi, %edx
	shrb	$3, %dil
	movl	%edi, %r9d
	shrb	$4, %dl
	andl	$1, %r9d
	andl	$1, %edx
	movl	%r9d, -332(%rbp)
	jmp	.L36422
.L37325:
	movl	$121, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L37209
.L36418:
	movl	24(%rdi), %eax
	movl	%eax, 24(%rbx)
	jmp	.L36417
.L37324:
	movq	32(%rbx), %rsi
	cmpq	%r13, 8(%rsi)
	jne	.L36412
	.p2align 4,,7
.L36416:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %rbx
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r12d
	cmpb	$116, %cl
	jne	.L37341
.L37078:
	movq	32(%rbx), %rsi
	jmp	.L36416
.L37341:
	cmpb	$115, %cl
	jne	.L36412
	movq	32(%rsi), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	je	.L36416
	jmp	.L36412
.L37314:
	movq	-152(%rbp), %rsi
	cmpb	$18, 16(%rsi)
	jne	.L36408
	movq	8(%rsi), %rdi
	cmpb	$6, 16(%rdi)
	jne	.L36408
	movq	global_trees(%rip), %r8
	jmp	.L36406
	.p2align 6,,7
.L36405:
	movq	%r12, %rdi
	movq	%rbx, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L36644
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L37342
.L37214:
	movq	%rax, %r15
	jmp	.L35989
.L37342:
	movq	32(%r15), %rax
	movq	%rax, -352(%rbp)
	jmp	.L35990
	.p2align 6,,7
.L36644:
	movq	8(%r15), %rax
	testq	%rax, %rax
	jne	.L37214
	movq	16(%r15), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L36651
	cmpq	%r15, 8(%rax)
	je	.L36654
.L36651:
	testq	%rax, %rax
	movq	%rax, %r15
	je	.L35990
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L35989
.L36391:
	movq	32(%r15), %r14
	movq	%r14, -352(%rbp)
	jmp	.L35990
	.p2align 6,,7
.L36654:
	movq	16(%rdx), %rax
	movq	%rdx, %r15
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L36651
	cmpq	%r15, 8(%rax)
	je	.L36654
	jmp	.L36651
	.p2align 6,,7
.L37278:
	movq	32(%r15), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L35993
	movq	constructor_type(%rip), %r11
	movq	40(%r15), %rbx
	movq	constructor_unfilled_index(%rip), %rdi
	movq	8(%r11), %r12
	movq	%rdi, -328(%rbp)
	movq	%r12, -120(%rbp)
	movq	8(%rbx), %r13
	movzbl	16(%r13), %eax
	movq	%r13, %rdx
	cmpb	$23, %al
	je	.L37181
	cmpb	$18, %al
	je	.L37343
	movq	global_trees(%rip), %r8
.L37194:
	movzbl	16(%rbx), %ecx
.L35994:
	cmpb	$-86, %cl
	je	.L37344
.L36251:
	cmpq	%r8, %rbx
	je	.L37345
	testb	$2, 17(%rbx)
	jne	.L36254
	movl	$0, constructor_constant(%rip)
.L36253:
	movl	require_constant_value(%rip), %r12d
	testl	%r12d, %r12d
	je	.L36258
	testb	$2, 17(%rbx)
	je	.L37346
.L36258:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L37347
.L36283:
	cmpq	$0, -328(%rbp)
	je	.L36285
	movq	-328(%rbp), %rdi
	movq	8(%rdi), %rax
	cmpq	global_trees(%rip), %rax
	je	.L35989
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L37348
.L36285:
	movq	-120(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%rbx, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, %r13
	je	.L37217
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L37349
.L36289:
	cmpb	$20, 16(%rdi)
	je	.L37350
.L36310:
	cmpb	$21, 16(%rdi)
	je	.L37351
.L36309:
	cmpq	$0, -328(%rbp)
	je	.L36377
	movq	-328(%rbp), %rcx
	cmpb	$25, 16(%rcx)
	je	.L37352
.L36377:
	movq	-328(%rbp), %rdi
	movq	constructor_elements(%rip), %rdx
	movq	%r13, %rsi
	call	tree_cons
	movq	constructor_type(%rip), %r13
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r13), %eax
	cmpb	$18, %al
	je	.L37353
	cmpb	$20, %al
	je	.L37354
	cmpb	$21, 16(%r13)
	je	.L37355
.L36379:
	xorl	%r9d, %r9d
	testl	%r9d, %r9d
	jmp	.L37252
.L37355:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L36379
.L37354:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L36379
	testb	$2, 53(%rax)
	je	.L36379
	cmpq	$0, 72(%rax)
	jne	.L36379
.L36385:
	movq	constructor_unfilled_fields(%rip), %rsi
	movq	(%rsi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L36379
	testb	$2, 53(%rax)
	je	.L36379
	cmpq	$0, 72(%rax)
	jne	.L36379
	jmp	.L36385
.L37353:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L36379
.L37352:
	movq	%rcx, %rdi
	call	copy_node
	movq	%rax, -328(%rbp)
	jmp	.L36377
.L37351:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L36309
	movq	32(%rax), %r11
	testb	$1, 17(%r11)
	jne	.L37356
.L36352:
	movq	$0, constructor_elements(%rip)
	jmp	.L36309
.L37356:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r14
	jae	.L36946
.L36359:
	cmpl	$3, (%rbx)
	je	.L37357
	movq	8(%rbx), %rdi
	movq	%r8, -376(%rbp)
	call	strlen
	movq	-376(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L36355:
	addq	$16, %rbx
	cmpq	%r14, %rbx
	jb	.L36359
.L36946:
	movslq	%r12d,%rdx
	movq	%r8, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r14, %r8
	movq	%rsp, -144(%rbp)
	movq	%rsp, %rbx
	jae	.L36948
.L36373:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L37358
	cmpl	$2, %eax
	je	.L37359
.L36367:
	movq	8(%r12), %r10
	movzbl	(%r10), %edi
	leaq	1(%r10), %rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	je	.L36363
.L36372:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L36372
.L36363:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L36373
.L36948:
	movb	$0, (%rbx)
	movq	-144(%rbp), %rdx
	cmpb	$0, (%rdx)
	je	.L36352
	movl	$.LC142, %edi
	movq	%rdx, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L36352
.L37359:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L36367
.L37358:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L36363
.L37357:
	addl	$25, %r12d
	jmp	.L36355
.L37350:
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L36312
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, -328(%rbp)
	je	.L36310
	testq	%rax, %rax
	jne	.L36313
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L36320
.L36940:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L37360
.L36340:
	cmpb	$18, 16(%rdi)
	je	.L37361
.L36346:
	movl	$0, constructor_incremental(%rip)
.L36312:
	movq	-328(%rbp), %rdi
	jmp	.L37216
.L37361:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L37362
	movq	global_trees+136(%rip), %rax
.L37197:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L36346
.L37362:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L37197
.L37360:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L36346
	testb	$2, 53(%rax)
	je	.L36346
	cmpq	$0, 72(%rax)
	jne	.L36346
.L36326:
	movq	constructor_unfilled_fields(%rip), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L36346
	testb	$2, 53(%rax)
	je	.L36346
	cmpq	$0, 72(%rax)
	jne	.L36346
	jmp	.L36326
.L36320:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L36320
	movq	constructor_type(%rip), %rdi
	jmp	.L36940
.L36313:
	movq	-328(%rbp), %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r12
	call	bit_position
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L36312
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L36333
	cmpb	$18, %al
	jne	.L36312
.L36333:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L36339
.L36943:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L36340
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L36346
	testb	$2, 53(%rax)
	je	.L36346
	cmpq	$0, 72(%rax)
	jne	.L36346
.L36345:
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L36346
	testb	$2, 53(%rax)
	je	.L36346
	cmpq	$0, 72(%rax)
	jne	.L36346
	jmp	.L36345
.L36339:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L36339
	movq	constructor_type(%rip), %rdi
	jmp	.L36943
	.p2align 6,,7
.L37349:
	movl	constructor_incremental(%rip), %r8d
	testl	%r8d, %r8d
	je	.L36312
	movq	-328(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L37073
	movl	constructor_incremental(%rip), %esi
	testl	%esi, %esi
	je	.L36312
	movq	-328(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L36312
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L36292
	cmpb	$18, %al
	jne	.L36312
.L36292:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L36298
.L36937:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L36340
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L36346
	testb	$2, 53(%rax)
	je	.L36346
	cmpq	$0, 72(%rax)
	jne	.L36346
.L36304:
	movq	constructor_unfilled_fields(%rip), %r9
	movq	(%r9), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L36346
	testb	$2, 53(%rax)
	je	.L36346
	cmpq	$0, 72(%rax)
	jne	.L36346
	jmp	.L36304
.L36298:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L36298
	movq	constructor_type(%rip), %rdi
	jmp	.L36937
	.p2align 6,,7
.L37073:
	movq	constructor_type(%rip), %rdi
	jmp	.L36289
.L37348:
	call	integer_zerop
	testl	%eax, %eax
	je	.L36285
	movq	constructor_type(%rip), %rcx
	cmpb	$18, 16(%rcx)
	je	.L35989
	movq	-328(%rbp), %r10
	cmpq	$0, (%r10)
	jne	.L35989
	jmp	.L36285
.L37347:
	movq	8(%rbx), %rsi
	movq	%rbx, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L36283
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L36283
.L37346:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r14
	xorl	%r12d, %r12d
	cmpq	%r14, %r8
	movq	%r8, %rbx
	movq	%r14, %r13
	jae	.L36932
.L36265:
	cmpl	$3, (%rbx)
	je	.L37363
	movq	8(%rbx), %rdi
	movq	%r8, -376(%rbp)
	call	strlen
	movq	-376(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L36261:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L36265
.L36932:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L36934
.L36279:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L37364
	cmpl	$2, %eax
	je	.L37365
.L36273:
	movq	8(%r12), %r11
	movzbl	(%r11), %r13d
	leaq	1(%r11), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L36269
	.p2align 4,,7
.L36278:
	movzbl	(%rcx), %edx
	incq	%rbx
	incq	%rcx
	testb	%dl, %dl
	movb	%dl, (%rbx)
	jne	.L36278
.L36269:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L36279
.L36934:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L37366
.L36282:
	movq	global_trees(%rip), %rbx
	jmp	.L36283
.L37366:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L36282
.L37365:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L36273
.L37364:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L36269
.L37363:
	addl	$25, %r12d
	jmp	.L36261
.L36254:
	movq	8(%rbx), %rsi
	movq	%rbx, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L36257
	movq	constructor_type(%rip), %rsi
	movzbl	16(%rsi), %r8d
	subb	$20, %r8b
	cmpb	$1, %r8b
	ja	.L36253
	movq	-328(%rbp), %r9
	testb	$2, 53(%r9)
	je	.L36253
	cmpb	$25, 16(%rbx)
	je	.L36253
.L36257:
	movl	$0, constructor_simple(%rip)
	jmp	.L36253
.L37345:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L36253
.L37344:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L36251
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L36251
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L36251
	movq	32(%rbx), %r10
	movq	32(%r10), %rcx
	movq	104(%rcx), %rbx
	jmp	.L36251
.L37343:
	movzbl	16(%rbx), %ecx
	cmpb	$29, %cl
	je	.L37367
.L35996:
	movq	-120(%rbp), %rax
	movq	128(%rdx), %r12
	movq	128(%rax), %r13
	cmpq	%r13, %r12
	je	.L35998
	testq	%r12, %r12
	je	.L35998
	testq	%r13, %r13
	je	.L35998
	movzbl	16(%r12), %edx
	testb	%dl, %dl
	je	.L35998
	movzbl	16(%r13), %eax
	testb	%al, %al
	jne	.L35997
.L35998:
	movl	$1, -316(%rbp)
.L35999:
	movl	-316(%rbp), %esi
	testl	%esi, %esi
	jne	.L37066
	movq	8(%rbx), %r13
.L35995:
	movzbl	16(%r13), %r12d
	cmpl	$23, %r12d
	je	.L36156
	cmpl	$18, %r12d
	je	.L36156
	cmpb	$32, %cl
	je	.L37368
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L36219
	cmpb	$34, %cl
	je	.L37369
.L36219:
	cmpb	$116, %cl
	movq	%rbx, %rdx
	je	.L37072
	cmpb	$115, %cl
	je	.L37370
.L36228:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L36233
	cmpb	$49, %al
	je	.L36233
	cmpb	$50, %al
	je	.L36233
	cmpb	$101, %al
	je	.L36233
.L36232:
	cmpl	$10, %r12d
	je	.L37371
	cmpb	$39, %cl
	je	.L37372
.L36241:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L36246
	testb	$32, 17(%r13)
	je	.L36247
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L36248
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r13), %r11d
	movzwl	60(%rdx), %r13d
	andl	$511, %r11d
	andl	$511, %r13d
	cmpl	%r13d, %r11d
	je	.L36248
.L36247:
	movq	integer_types+40(%rip), %rdi
.L37248:
	movq	%rbx, %rsi
.L37249:
	call	convert
.L37193:
	movq	%rax, %r12
.L37184:
	movq	global_trees(%rip), %r8
.L36217:
	movq	%r12, %rbx
	jmp	.L37194
.L36248:
	movq	integer_types+48(%rip), %rdi
	jmp	.L37248
.L36246:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L36249
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L36249
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%r13)
	je	.L37373
.L36249:
	cmpl	$5, %r12d
	je	.L37374
.L36250:
	movq	%rbx, %r12
	jmp	.L37184
.L37374:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L37185:
	movq	global_trees(%rip), %r8
	movq	%r8, %r12
	jmp	.L36217
.L37373:
	movq	global_trees+200(%rip), %rdi
	jmp	.L37248
	.p2align 6,,7
.L37372:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L36241
	movq	integer_types+40(%rip), %r14
	movq	40(%rdx), %rdi
	movzwl	60(%r14), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L36241
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L36247
	testb	$32, 17(%r13)
	jne	.L36248
	jmp	.L36247
	.p2align 6,,7
.L37371:
	movq	integer_types+40(%rip), %r12
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r9d
	movzwl	60(%r12), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r9d, %r9d
	jne	.L36240
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L36239
.L36240:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L36239:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L37248
.L36233:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L36232
.L37370:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rdi, 8(%rsi)
	jne	.L36228
	.p2align 4,,7
.L36231:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %rbx
	cmpb	$116, %cl
	jne	.L37375
.L37072:
	movq	32(%rbx), %rsi
	jmp	.L36231
.L37375:
	cmpb	$115, %cl
	jne	.L36228
	movq	32(%rsi), %r8
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%r8)
	movq	%r8, %rsi
	je	.L36231
	jmp	.L36228
.L37369:
	movl	pedantic(%rip), %edx
	testl	%edx, %edx
	jne	.L36219
	cmpb	$51, 48(%rbx)
	je	.L36219
	cmpq	$0, current_function_decl(%rip)
	je	.L36225
	movzbl	17(%rbx), %ecx
	andb	$24, %cl
	cmpb	$16, %cl
	je	.L37376
.L36225:
	movq	%rbx, %rsi
.L36226:
	movq	%rsi, %rbx
	movq	8(%rsi), %r13
.L37183:
	movzbl	16(%rbx), %ecx
	jmp	.L36219
.L37376:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L36225
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L36225
	testb	$2, 17(%rax)
	je	.L36225
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L36226
	jmp	.L36225
	.p2align 6,,7
.L37368:
	movq	104(%rbx), %rbx
	jmp	.L37183
.L36156:
	movl	%r12d, %edx
	movq	%rbx, %rdi
	xorl	%r12d, %r12d
	cmpb	$116, %cl
	je	.L37068
	cmpb	$115, %cl
	je	.L37377
.L36158:
	movzbl	%cl, %r11d 
	movzbl	tree_code_type(%r11), %eax
	cmpb	$60, %al
	je	.L36164
	cmpb	$49, %al
	je	.L36164
	cmpb	$50, %al
	je	.L36164
	cmpb	$101, %al
	je	.L36164
.L36163:
	cmpl	$23, %edx
	je	.L37378
	cmpl	$18, %edx
	jne	.L36250
	movzbl	%cl, %edi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rdi), %eax
	movq	8(%r13), %r14
	cmpb	$114, %al
	je	.L36169
	cmpb	$100, %al
	je	.L36169
.L36168:
	movzbl	17(%r13), %r8d
	movl	$1, %esi
	movl	%r8d, %r10d
	movl	%r8d, %edi
	shrb	$4, %r10b
	shrb	$3, %dil
	andl	%r10d, %esi
	andl	$1, %edi
	movzbl	62(%r13), %r10d
	addl	%edi, %edi
	orl	%edi, %esi
	movzbl	16(%r13), %edi
	movl	%r10d, %r9d
	shrb	$5, %r9b
	andl	$1, %r9d
	sall	$2, %r9d
	orl	%r9d, %esi
	xorl	%r9d, %r9d
	cmpb	$20, %dil
	je	.L37379
.L36172:
	leal	0(,%r9,8), %r13d
	orl	%r13d, %esi
	jne	.L36171
	testl	%edx, %edx
	jne	.L36171
	testl	%r11d, %r11d
	je	.L36170
.L36171:
	movl	%r8d, %r13d
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r13b
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%r13d, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L37380
.L36174:
	leal	0(,%rcx,8), %r8d
	movq	%r14, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%rbx), %ecx
	movq	%rax, %r14
.L36170:
	cmpb	$41, %cl
	je	.L37381
	cmpb	$47, %cl
	je	.L37382
	xorl	%r13d, %r13d
	testl	%r12d, %r12d
	je	.L37383
.L36213:
	movl	flag_isoc99(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L36214
	testl	%r13d, %r13d
	je	.L36250
.L36214:
	movq	%r14, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %r12
	je	.L37384
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%r12, %rdi
	movq	%rax, %rsi
	jmp	.L37249
.L37384:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, %r12
	call	mark_addressable
	testl	%eax, %eax
	je	.L37185
	movq	%rbx, %rdi
	call	staticp
	movzbl	17(%r12), %ebx
	movl	%eax, %r14d
	andb	$1, %r14b
	addb	%r14b, %r14b
	andb	$-4, %bl
	orb	%r14b, %bl
	movb	%bl, 17(%r12)
	jmp	.L37184
.L37383:
	movq	%rbx, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r13d
	jmp	.L36213
.L37382:
	movq	40(%rbx), %r12
	movq	8(%r12), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L36178
	cmpl	$18, %r14d
	je	.L36178
	movzbl	16(%r12), %edx
	cmpb	$32, %dl
	je	.L37385
	movl	optimize(%rip), %esi
	testl	%esi, %esi
	je	.L36181
	cmpb	$34, %dl
	je	.L37386
.L36181:
	cmpb	$116, %dl
	movq	%r12, %rcx
	je	.L37070
	cmpb	$115, %dl
	je	.L37387
.L36190:
	movzbl	%dl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L36195
	cmpb	$49, %al
	je	.L36195
	cmpb	$50, %al
	je	.L36195
	cmpb	$101, %al
	je	.L36195
.L36194:
	cmpl	$10, %r14d
	je	.L37388
	cmpb	$39, %dl
	je	.L37389
.L36203:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L36208
	testb	$32, 17(%r13)
	je	.L36209
	movl	flag_traditional(%rip), %esi
	testl	%esi, %esi
	jne	.L36210
	movq	integer_types+40(%rip), %r10
	movzwl	60(%r13), %edi
	movzwl	60(%r10), %r13d
	andl	$511, %edi
	andl	$511, %r13d
	cmpl	%r13d, %edi
	je	.L36210
.L36209:
	movq	integer_types+40(%rip), %rdi
.L37182:
	movq	%r12, %rsi
	call	convert
.L36179:
	movq	8(%rax), %rsi
	movq	32(%rbx), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L37193
.L36210:
	movq	integer_types+48(%rip), %rdi
	jmp	.L37182
	.p2align 6,,7
.L36208:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L36211
	movl	flag_allow_single_precision(%rip), %r8d
	testl	%r8d, %r8d
	jne	.L36211
	movq	global_trees+192(%rip), %r9
	cmpq	%r9, 128(%r13)
	je	.L37390
.L36211:
	cmpl	$5, %r14d
	je	.L37391
	movq	%r12, %rax
	jmp	.L36179
.L37391:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L36179
.L37390:
	movq	global_trees+200(%rip), %rdi
	jmp	.L37182
	.p2align 6,,7
.L37389:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L36203
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L36203
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	je	.L36209
	testb	$32, 17(%r13)
	jne	.L36210
	jmp	.L36209
	.p2align 6,,7
.L37388:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L36202
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L36201
.L36202:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L36201:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L37182
.L36195:
	movl	24(%rcx), %eax
	movl	%eax, 24(%r12)
	jmp	.L36194
.L37387:
	movq	32(%r12), %rsi
	movq	8(%r12), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L36190
.L36193:
	movzbl	16(%rsi), %edx
	movq	%rsi, %r12
	cmpb	$116, %dl
	jne	.L37392
.L37070:
	movq	32(%r12), %rsi
	jmp	.L36193
.L37392:
	cmpb	$115, %dl
	jne	.L36190
	movq	32(%rsi), %r9
	movq	8(%r12), %rax
	cmpq	%rax, 8(%r9)
	movq	%r9, %rsi
	je	.L36193
	jmp	.L36190
.L37386:
	movl	pedantic(%rip), %r11d
	testl	%r11d, %r11d
	jne	.L36185
	cmpb	$51, 48(%r12)
	je	.L36185
	cmpq	$0, current_function_decl(%rip)
	je	.L36187
	movzbl	17(%r12), %edi
	andb	$24, %dil
	cmpb	$16, %dil
	je	.L37393
.L36187:
	movq	%r12, %rsi
.L36188:
	movq	%rsi, %r12
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L36185:
	movq	%rax, %r13
	jmp	.L36181
.L37393:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L36187
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L36187
	testb	$2, 17(%rax)
	je	.L36187
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L36188
	jmp	.L36187
	.p2align 6,,7
.L37385:
	movq	104(%r12), %r12
	movzbl	16(%r12), %edx
	jmp	.L36181
.L36178:
	movq	%r12, %rdi
	call	default_function_array_conversion
	jmp	.L36179
.L37381:
	movq	72(%r14), %rdi
	movq	32(%rbx), %rsi
	jmp	.L37249
.L37380:
	testq	%r14, %r14
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L36174
.L37379:
	testq	%r14, %r14
	movl	$1, %eax
	cmovne	%eax, %r9d
	jmp	.L36172
.L36169:
	movzbl	17(%rbx), %r10d
	movl	$1, %r11d
	movl	%r10d, %edx
	shrb	$3, %r10b
	shrb	$4, %dl
	andl	%r10d, %r11d
	andl	$1, %edx
	jmp	.L36168
.L37378:
	movl	$121, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L37193
.L36164:
	movl	24(%rdi), %eax
	movl	%eax, 24(%rbx)
	jmp	.L36163
.L37377:
	movq	32(%rbx), %rsi
	cmpq	%r13, 8(%rsi)
	jne	.L36158
	.p2align 4,,7
.L36162:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %rbx
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r12d
	cmpb	$116, %cl
	jne	.L37394
.L37068:
	movq	32(%rbx), %rsi
	jmp	.L36162
.L37394:
	cmpb	$115, %cl
	jne	.L36158
	movq	32(%rsi), %rsi
	movq	8(%rbx), %r8
	cmpq	%r8, 8(%rsi)
	je	.L36162
	jmp	.L36158
.L37066:
	movq	global_trees(%rip), %r8
	jmp	.L35994
.L35997:
	cmpb	$6, %dl
	je	.L37395
.L36000:
	cmpb	$6, %al
	je	.L37396
.L36001:
	cmpb	$10, %dl
	je	.L37397
.L36002:
	cmpb	$10, 16(%r13)
	je	.L37398
.L36003:
	cmpq	%r13, %r12
	je	.L37245
	movzbl	16(%r12), %edi
	cmpb	16(%r13), %dil
	je	.L37399
.L37247:
	movl	$0, -316(%rbp)
.L37065:
	movzbl	16(%rbx), %ecx
	jmp	.L35999
.L37399:
	movzbl	17(%r12), %r8d
	movzbl	62(%r12), %esi
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	shrb	$5, %sil
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	$1, %r8d
	andl	$1, %esi
	andl	$1, %edx
	addl	%r8d, %r8d
	sall	$2, %esi
	orl	%r8d, %edx
	orl	%esi, %edx
	cmpb	$20, %dil
	je	.L37400
.L36007:
	movzbl	17(%r13), %r14d
	leal	0(,%rcx,8), %esi
	movzbl	62(%r13), %ecx
	orl	%edx, %esi
	movl	%r14d, %edx
	shrb	$5, %cl
	shrb	$3, %r14b
	shrb	$4, %dl
	andl	$1, %r14d
	andl	$1, %ecx
	andl	$1, %edx
	addl	%r14d, %r14d
	sall	$2, %ecx
	orl	%r14d, %edx
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L37401
.L36008:
	leal	0(,%rcx,8), %edi
	orl	%edi, %edx
	cmpl	%edx, %esi
	jne	.L37247
	movq	128(%r13), %rdx
	cmpq	%rdx, 128(%r12)
	je	.L37245
	movq	%r12, %rdi
	movq	%r13, %rsi
	call	*targetm+264(%rip)
	testl	%eax, %eax
	movl	%eax, -124(%rbp)
	je	.L37247
	movl	$0, -316(%rbp)
	movzbl	16(%r12), %eax
	cmpl	$18, %eax
	je	.L36134
	cmpl	$18, %eax
	ja	.L36151
	cmpl	$13, %eax
	je	.L36012
.L36011:
	cmpl	$2, -124(%rbp)
	jne	.L37065
	cmpl	$1, -316(%rbp)
	jne	.L37065
	movl	$2, -316(%rbp)
	jmp	.L37065
.L36012:
	movq	8(%r12), %rdi
	movq	8(%r13), %rsi
	cmpq	%rsi, %rdi
	je	.L36013
	call	comptypes
.L37180:
	movl	%eax, -316(%rbp)
	jmp	.L36011
.L36013:
	movl	$1, -316(%rbp)
	jmp	.L36011
.L36151:
	cmpl	$20, %eax
	je	.L36147
	cmpl	$23, %eax
	jne	.L36011
	movl	$1, -292(%rbp)
	movq	8(%r13), %rsi
	movq	8(%r12), %rdi
	cmpq	%rsi, %rdi
	je	.L36016
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -292(%rbp)
	je	.L36011
.L36016:
	movq	24(%r12), %r11
	testq	%r11, %r11
	movq	%r11, -312(%rbp)
	movq	24(%r13), %r14
	je	.L37402
	testq	%r14, %r14
	je	.L37403
	movl	$1, -316(%rbp)
	xorl	%r13d, %r13d
.L36131:
	cmpq	$0, -312(%rbp)
	je	.L37404
	testq	%r14, %r14
	je	.L36120
	movq	-312(%rbp), %rdx
	movq	32(%rdx), %rdi
	testq	%rdi, %rdi
	je	.L37405
	movq	32(%r14), %rax
	testq	%rax, %rax
	jne	.L36106
.L37244:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L36120
.L36105:
	cmpl	-316(%rbp), %r13d
	movl	-316(%rbp), %eax
	movq	-312(%rbp), %rdi
	cmovg	%r13d, %eax
	movl	%eax, -316(%rbp)
	movq	(%rdi), %rcx
	movq	%rcx, -312(%rbp)
	movq	(%r14), %r14
	jmp	.L36131
.L36120:
	movl	$0, -316(%rbp)
.L36100:
	cmpl	$1, -316(%rbp)
	movl	-316(%rbp), %ecx
	cmove	-292(%rbp), %ecx
.L37179:
	movl	%ecx, -316(%rbp)
	jmp	.L36011
.L36106:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r13d
	jne	.L36105
	movq	-312(%rbp), %rdi
	movq	32(%rdi), %rax
	cmpb	$21, 16(%rax)
	je	.L37407
.L36110:
	movq	32(%r14), %rax
	cmpb	$21, 16(%rax)
	jne	.L36120
	cmpq	$0, 96(%rax)
	je	.L36121
	testb	$8, 62(%rax)
	je	.L36120
.L36121:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L36120
	movq	-312(%rbp), %r8
	movq	32(%r8), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L36120
	movq	32(%r14), %rsi
	movq	24(%rsi), %r12
	testq	%r12, %r12
	je	.L36120
.L36127:
	movq	-312(%rbp), %rax
	movq	8(%r12), %rdi
	movq	32(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L36123
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.L36127
	jmp	.L36120
.L36123:
	testq	%r12, %r12
	jne	.L36105
	jmp	.L36120
.L37407:
	cmpq	$0, 96(%rax)
	je	.L36111
	testb	$8, 62(%rax)
	je	.L36110
.L36111:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L36110
	movq	32(%r14), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L36110
	movq	-312(%rbp), %r12
	movq	32(%r12), %r10
	movq	24(%r10), %r12
	testq	%r12, %r12
	je	.L36120
.L36117:
	movq	8(%r12), %rdi
	movq	32(%r14), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L36123
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.L36117
	jmp	.L36120
.L37405:
	movq	32(%r14), %rdi
	jmp	.L37244
.L37404:
	testq	%r14, %r14
	je	.L36100
	jmp	.L36120
.L37403:
	movq	-312(%rbp), %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L36011
	movq	136(%r13), %rax
	testq	%rax, %rax
	je	.L36988
	movq	%rax, %r13
	movl	$1, %r14d
	movl	$0, -304(%rbp)
.L36095:
	cmpq	$0, -312(%rbp)
	je	.L37408
	testq	%r13, %r13
	je	.L36084
	movq	-312(%rbp), %rcx
	movq	32(%rcx), %rdi
	testq	%rdi, %rdi
	je	.L37409
	movq	32(%r13), %rax
	testq	%rax, %rax
	jne	.L36070
.L37243:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L36084
.L36069:
	movq	-312(%rbp), %rcx
	cmpl	%r14d, -304(%rbp)
	cmovg	-304(%rbp), %r14d
	movq	(%rcx), %rax
	movq	%rax, -312(%rbp)
	movq	(%r13), %r13
	jmp	.L36095
.L36084:
	xorl	%r14d, %r14d
.L36064:
	decl	%r14d
	movl	$2, -316(%rbp)
	jne	.L36011
	movl	-292(%rbp), %r14d
	movl	%r14d, -316(%rbp)
	jmp	.L36011
.L36070:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -304(%rbp)
	jne	.L36069
	movq	-312(%rbp), %rdi
	movq	32(%rdi), %rax
	cmpb	$21, 16(%rax)
	je	.L37411
.L36074:
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	jne	.L36084
	cmpq	$0, 96(%rax)
	je	.L36085
	testb	$8, 62(%rax)
	je	.L36084
.L36085:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L36084
	movq	-312(%rbp), %rsi
	movq	32(%rsi), %r10
	movq	32(%r10), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L36084
	movq	32(%r13), %r9
	movq	24(%r9), %r12
	testq	%r12, %r12
	je	.L36084
.L36091:
	movq	-312(%rbp), %r8
	movq	8(%r12), %rdi
	movq	32(%r8), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L36087
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.L36091
	jmp	.L36084
.L36087:
	testq	%r12, %r12
	jne	.L36069
	jmp	.L36084
.L37411:
	cmpq	$0, 96(%rax)
	je	.L36075
	testb	$8, 62(%rax)
	je	.L36074
.L36075:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L36074
	movq	32(%r13), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L36074
	movq	-312(%rbp), %r12
	movq	32(%r12), %r11
	movq	24(%r11), %r12
	testq	%r12, %r12
	je	.L36084
.L36081:
	movq	8(%r12), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L36087
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.L36081
	jmp	.L36084
.L37409:
	movq	32(%r13), %rdi
	jmp	.L37243
.L37408:
	testq	%r13, %r13
	je	.L36064
	jmp	.L36084
.L36988:
	movl	-292(%rbp), %ecx
	jmp	.L37179
.L37402:
	movq	%r14, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L36011
	movq	136(%r12), %rax
	testq	%rax, %rax
	je	.L36986
	movq	%rax, %r13
	movl	$1, -300(%rbp)
	movl	$0, -296(%rbp)
.L36056:
	testq	%r14, %r14
	je	.L37412
	testq	%r13, %r13
	je	.L36045
	movq	32(%r14), %rdi
	testq	%rdi, %rdi
	je	.L37413
	movq	32(%r13), %rax
	testq	%rax, %rax
	jne	.L36031
.L37242:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L36045
.L36030:
	movl	-300(%rbp), %r8d
	movl	-296(%rbp), %eax
	cmpl	%r8d, -296(%rbp)
	cmovle	%r8d, %eax
	movl	%eax, -300(%rbp)
	movq	(%r13), %r13
	movq	(%r14), %r14
	jmp	.L36056
.L36045:
	movl	$0, -300(%rbp)
.L36025:
	cmpl	$1, -300(%rbp)
	movl	$2, -316(%rbp)
	jne	.L36011
	movl	-292(%rbp), %eax
	jmp	.L37180
.L36031:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -296(%rbp)
	jne	.L36030
	movq	32(%r14), %rax
	cmpb	$21, 16(%rax)
	je	.L37415
.L36035:
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	jne	.L36045
	cmpq	$0, 96(%rax)
	je	.L36046
	testb	$8, 62(%rax)
	je	.L36045
.L36046:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L36045
	movq	32(%r14), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L36045
	movq	32(%r13), %rsi
	movq	24(%rsi), %r12
	testq	%r12, %r12
	je	.L36045
.L36052:
	movq	8(%r12), %rdi
	movq	32(%r14), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L36048
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.L36052
	jmp	.L36045
.L36048:
	testq	%r12, %r12
	jne	.L36030
	jmp	.L36045
.L37415:
	cmpq	$0, 96(%rax)
	je	.L36036
	testb	$8, 62(%rax)
	je	.L36035
.L36036:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L36035
	movq	32(%r13), %r12
	movq	32(%r12), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L36035
	movq	32(%r14), %r10
	movq	24(%r10), %r12
	testq	%r12, %r12
	je	.L36045
.L36042:
	movq	8(%r12), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L36048
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.L36042
	jmp	.L36045
.L37413:
	movq	32(%r13), %rdi
	jmp	.L37242
.L37412:
	testq	%r13, %r13
	je	.L36025
	jmp	.L36045
.L36986:
	movl	-292(%rbp), %r13d
	movl	%r13d, -316(%rbp)
	jmp	.L36011
.L36147:
	xorl	%edx, %edx
	movq	%r12, %rdi
	movq	%r13, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmovne	-316(%rbp), %eax
	jmp	.L37180
.L36134:
	movq	24(%r13), %rdx
	movq	24(%r12), %r14
	movl	$1, -316(%rbp)
	movq	%rdx, -136(%rbp)
	movq	8(%r13), %rsi
	movq	8(%r12), %rdi
	cmpq	%rsi, %rdi
	je	.L36135
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -316(%rbp)
	je	.L37063
.L36135:
	testq	%r14, %r14
	je	.L36011
	cmpq	$0, -136(%rbp)
	je	.L36011
	cmpq	-136(%rbp), %r14
	je	.L36011
	movq	112(%r14), %rcx
	movq	-136(%rbp), %r13
	testq	%rcx, %rcx
	movq	112(%r13), %rsi
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L36138
	movq	104(%r14), %r11
	cmpb	$25, 16(%r11)
	je	.L37416
.L36139:
	movl	$1, %r8d
.L36138:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L36140
	movq	-136(%rbp), %r12
	movq	104(%r12), %r10
	cmpb	$25, 16(%r10)
	je	.L37417
.L36141:
	movl	$1, %ecx
.L36140:
	testb	%r8b, %r8b
	jne	.L36011
	testb	%cl, %cl
	jne	.L36011
	testb	%dil, %dil
	je	.L36999
	testb	%dl, %dl
.L37178:
	jne	.L36011
.L36146:
	movl	$0, -316(%rbp)
	jmp	.L36011
.L36999:
	testb	%dl, %dl
	jne	.L36146
	movq	-136(%rbp), %r9
	movq	104(%r14), %rdi
	movq	104(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L36146
	movq	112(%r14), %rdi
	movq	-136(%rbp), %r14
	movq	112(%r14), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L37178
.L37417:
	cmpb	$25, 16(%rsi)
	jne	.L36141
	jmp	.L36140
.L37416:
	cmpb	$25, 16(%rcx)
	jne	.L36139
	jmp	.L36138
.L37063:
	movq	8(%rbx), %r13
.L37181:
	movzbl	16(%rbx), %ecx
	jmp	.L35995
.L37245:
	movl	$1, -316(%rbp)
	jmp	.L37065
.L37401:
	cmpq	$0, 8(%r13)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L36008
.L37400:
	cmpq	$0, 8(%r12)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L36007
	.p2align 6,,7
.L37398:
	movzbl	17(%r13), %esi
	movzwl	60(%r13), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %r13
	jmp	.L36003
.L37397:
	movzbl	17(%r12), %esi
	movzwl	60(%r12), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %r12
	jmp	.L36002
.L37396:
	testb	$2, 62(%r13)
	je	.L36001
	movq	24(%r13), %r9
	testq	%r9, %r9
	cmovne	%r9, %r13
	jmp	.L36001
.L37395:
	testb	$2, 62(%r12)
	je	.L36000
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	je	.L36000
	movq	%rdi, %r12
	movzbl	16(%rdi), %edx
	jmp	.L36000
	.p2align 6,,7
.L37367:
	movq	-120(%rbp), %rsi
	cmpb	$18, 16(%rsi)
	jne	.L35996
	movq	8(%rsi), %r10
	cmpb	$6, 16(%r10)
	jne	.L35996
	jmp	.L37066
	.p2align 6,,7
.L35993:
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%r15), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L36390
	movq	(%r15), %rax
	testq	%rax, %rax
	jne	.L37214
	jmp	.L36391
	.p2align 6,,7
.L36390:
	movq	8(%r15), %rax
	testq	%rax, %rax
	jne	.L37214
	movq	16(%r15), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L36397
	cmpq	%r15, 8(%rax)
	je	.L36400
.L36397:
	testq	%rax, %rax
	movq	%rax, %r15
	je	.L35990
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L35989
	movq	32(%r15), %r12
	movq	%r12, -352(%rbp)
	jmp	.L35990
	.p2align 6,,7
.L36400:
	movq	16(%rdx), %rax
	movq	%rdx, %r15
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L36397
	cmpq	%r15, 8(%rax)
	je	.L36400
	jmp	.L36397
.L37277:
	movq	constructor_unfilled_fields(%rip), %rax
	testq	%rax, %rax
	je	.L35951
.L37090:
	movq	40(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L37418
.L35956:
	movq	(%rax), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	jne	.L37090
	jmp	.L35951
.L37418:
	call	integer_zerop
	testl	%eax, %eax
	je	.L37419
	movq	constructor_unfilled_fields(%rip), %rax
	jmp	.L35956
.L37419:
	movq	constructor_unfilled_fields(%rip), %rax
	testq	%rax, %rax
	je	.L35951
	movl	constructor_designated(%rip), %r11d
	testl	%r11d, %r11d
	jne	.L35951
	movq	72(%rax), %rax
	movl	$.LC159, %r12d
	testq	%rax, %rax
	je	.L35959
	movq	32(%rax), %r12
.L35959:
	movq	spelling(%rip), %rdx
	movq	spelling_base(%rip), %rdi
	movl	spelling_size(%rip), %eax
	movq	%rdx, %r10
	subq	%rdi, %r10
	movq	%r10, %rbx
	shrq	$4, %rbx
	cmpl	%eax, %ebx
	jl	.L35960
	addl	$10, %eax
	testq	%rdi, %rdi
	movl	%eax, spelling_size(%rip)
	jne	.L35961
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L37177:
	movslq	%ebx,%rdx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rdx
	addq	spelling_base(%rip), %rdx
	movq	%rdx, spelling(%rip)
.L35960:
	movq	%r12, 8(%rdx)
	movl	$2, (%rdx)
	xorl	%eax, %eax
	addq	$16, %rdx
	movl	$.LC42, %edi
	movl	$.LC175, %esi
	movq	%rdx, spelling(%rip)
	xorl	%r12d, %r12d
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r9
	cmpq	%r9, %r8
	movq	%r8, %rbx
	movq	%r9, %r13
	jae	.L36917
.L35970:
	cmpl	$3, (%rbx)
	je	.L37420
	movq	8(%rbx), %rdi
	movq	%r8, -376(%rbp)
	call	strlen
	movq	-376(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L35966:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L35970
.L36917:
	movslq	%r12d,%rdx
	movq	%r8, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L36919
.L35984:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L37421
	cmpl	$2, %eax
	je	.L37422
.L35978:
	movq	8(%r12), %r8
	movzbl	(%r8), %esi
	leaq	1(%r8), %rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	je	.L35974
.L35983:
	movzbl	(%rcx), %r13d
	incq	%rbx
	incq	%rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	jne	.L35983
.L35974:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L35984
.L36919:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L37423
.L35987:
	movslq	constructor_depth(%rip),%rcx
	salq	$4, %rcx
	addq	spelling_base(%rip), %rcx
	movq	%rcx, spelling(%rip)
	jmp	.L35951
.L37423:
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L35987
	.p2align 6,,7
.L37422:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L35978
.L37421:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L35974
	.p2align 6,,7
.L37420:
	addl	$25, %r12d
	jmp	.L35966
.L35961:
	movslq	%eax,%rsi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L37177
	.p2align 6,,7
.L37276:
	movq	24(%rax), %rax
	testq	%rax, %rax
	je	.L35894
	cmpq	$0, 112(%rax)
	jne	.L35894
	movq	constructor_unfilled_index(%rip), %rdi
	call	integer_zerop
	testl	%eax, %eax
	jne	.L37176
	movq	constructor_type(%rip), %r11
	cmpq	$0, 32(%r11)
	jne	.L35897
	cmpl	$2, constructor_depth(%rip)
	jg	.L37424
	movl	pedantic(%rip), %eax
	testl	%eax, %eax
	jne	.L37425
.L35923:
	movq	constructor_fields(%rip), %rbx
	cmpq	$0, (%rbx)
	je	.L35894
.L37176:
	movq	$0, constructor_type(%rip)
	jmp	.L35894
.L37425:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC174, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rcx
	xorl	%r12d, %r12d
	cmpq	%rcx, %r8
	movq	%r8, %rbx
	movq	%rcx, %r13
	jae	.L36912
.L35931:
	cmpl	$3, (%rbx)
	je	.L37426
	movq	8(%rbx), %rdi
	movq	%r8, -376(%rbp)
	call	strlen
	movq	-376(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L35927:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L35931
.L36912:
	movslq	%r12d,%r14
	movq	%r8, %r12
	addq	$16, %r14
	andq	$-16, %r14
	subq	%r14, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L36914
.L35945:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L37427
	cmpl	$2, %eax
	je	.L37428
.L35939:
	movq	8(%r12), %r13
	movzbl	(%r13), %r8d
	leaq	1(%r13), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L35935
.L35944:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L35944
.L35935:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L35945
.L36914:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L35923
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L35923
	.p2align 6,,7
.L37428:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L35939
.L37427:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L35935
	.p2align 6,,7
.L37426:
	addl	$25, %r12d
	jmp	.L35927
.L37424:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC173, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r10
	xorl	%r12d, %r12d
	cmpq	%r10, %r8
	movq	%r8, %rbx
	movq	%r10, %r13
	jae	.L36907
.L35905:
	cmpl	$3, (%rbx)
	je	.L37429
	movq	8(%rbx), %rdi
	movq	%r8, -376(%rbp)
	call	strlen
	movq	-376(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L35901:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L35905
.L36907:
	movslq	%r12d,%r15
	movq	%r8, %r12
	addq	$16, %r15
	andq	$-16, %r15
	subq	%r15, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L36909
.L35919:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L37430
	cmpl	$2, %eax
	je	.L37431
.L35913:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r9d
	leaq	1(%rdx), %rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	je	.L35909
.L35918:
	movzbl	(%rcx), %esi
	incq	%rbx
	incq	%rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	jne	.L35918
.L35909:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L35919
.L36909:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L35923
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L35923
	.p2align 6,,7
.L37431:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L35913
.L37430:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L35909
.L37429:
	addl	$25, %r12d
	jmp	.L35901
.L35897:
	movl	$.LC68, %edi
	movl	$5520, %esi
.L37219:
	movl	$.LC172, %edx
.L37220:
	call	fancy_abort
.L37275:
	movl	$.LC68, %edi
	movl	$5488, %esi
	jmp	.L37219
	.p2align 6,,7
.L35892:
	movl	$1, %edi
	call	pop_init_level
	movl	$0, -188(%rbp)
	testq	%rax, %rax
	movq	%rax, %r14
	movq	%rax, -56(%rbp)
	je	.L34189
	cmpb	$29, 16(%rax)
	movl	$1, %eax
	cmovne	-188(%rbp), %eax
	movl	%eax, -188(%rbp)
.L34189:
	movl	-188(%rbp), %eax
	movl	$0, designator_depth(%rip)
	movl	$0, designator_errorneous(%rip)
	testl	%eax, %eax
	je	.L34190
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L34190
	cmpb	$18, 16(%rax)
	je	.L37432
.L34190:
	movq	constructor_stack(%rip), %r13
	cmpq	$0, 88(%r13)
	movq	%r13, -368(%rbp)
	jne	.L37433
	movq	constructor_type(%rip), %rdi
	testq	%rdi, %rdi
	je	.L34185
	movq	-368(%rbp), %rbx
	cmpb	$0, 106(%rbx)
	je	.L34244
.L34251:
	movzbl	16(%rdi), %ecx
	subb	$20, %cl
	cmpb	$1, %cl
	ja	.L34246
	cmpq	$0, constructor_fields(%rip)
	je	.L34249
.L34246:
	cmpb	$18, 16(%rdi)
	jne	.L34244
	movq	constructor_max_index(%rip), %rdi
	testq	%rdi, %rdi
	je	.L34249
	movq	constructor_index(%rip), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L34244
.L34249:
	movl	$1, %edi
	call	pop_init_level
	movq	%rax, %rdi
	call	process_init_element
	movq	constructor_stack(%rip), %r8
	cmpb	$0, 106(%r8)
	je	.L34244
	movq	constructor_type(%rip), %rdi
	jmp	.L34251
.L34244:
	cmpq	$0, constructor_range_stack(%rip)
	je	.L35891
	cmpb	$-86, 16(%r14)
	je	.L37434
.L34254:
	movq	%r14, %rdi
	call	save_expr
	movq	%rax, %r14
	.p2align 4,,7
.L35891:
	movq	constructor_type(%rip), %r11
	cmpb	$20, 16(%r11)
	movq	%r11, %rbx
	je	.L37435
	movzbl	16(%r11), %edx
	cmpb	$21, %dl
	je	.L37436
	cmpb	$18, %dl
	jne	.L34936
	movq	8(%r11), %r13
	testq	%r14, %r14
	movq	128(%r13), %r12
	movzbl	16(%r12), %edx
	je	.L34938
	cmpl	$18, %edx
	je	.L37437
.L34937:
	testq	%r14, %r14
	je	.L34938
	movl	constructor_no_implicit(%rip), %ecx
	testl	%ecx, %ecx
	jne	.L34938
	cmpq	global_trees(%rip), %r14
	je	.L34938
	movq	8(%r14), %r8
	cmpq	%r12, 128(%r8)
	je	.L34938
	cmpl	$20, %edx
	je	.L34940
	cmpl	$18, %edx
	je	.L34940
	cmpl	$21, %edx
	jne	.L34938
.L34940:
	movl	$1, %edi
	call	push_init_level
	jmp	.L35891
.L34938:
	movq	constructor_max_index(%rip), %rdi
	testq	%rdi, %rdi
	jne	.L37438
.L34941:
	testq	%r14, %r14
	jne	.L37439
.L35280:
	movq	constructor_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	testq	%r14, %r14
	movq	%rax, constructor_index(%rip)
	jne	.L34613
	movq	%rax, constructor_unfilled_index(%rip)
.L34613:
	movq	constructor_range_stack(%rip), %r12
	testq	%r12, %r12
	je	.L34256
	movq	constructor_stack(%rip), %r15
	xorl	%r13d, %r13d
	movq	$0, constructor_range_stack(%rip)
	cmpq	16(%r12), %r15
	movq	%r15, -368(%rbp)
	je	.L36905
	.p2align 4,,7
.L35875:
	movq	-368(%rbp), %rax
	cmpb	$0, 106(%rax)
	je	.L37440
	movl	$1, %edi
	call	pop_init_level
	movq	%rax, %rdi
	call	process_init_element
	movq	constructor_stack(%rip), %rdx
	cmpq	16(%r12), %rdx
	movq	%rdx, -368(%rbp)
	jne	.L35875
.L36905:
	movq	%r12, %rbx
	.p2align 4,,7
.L35876:
	movq	40(%rbx), %rsi
	testq	%rsi, %rsi
	je	.L35881
	movq	32(%rbx), %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L37441
.L35881:
	movq	constructor_stack(%rip), %r9
	cmpb	$0, 106(%r9)
	je	.L37442
	movl	$1, %edi
	call	pop_init_level
	movq	%rax, %rdi
	call	process_init_element
	movq	8(%rbx), %rbx
	jmp	.L35876
.L37442:
	movl	$.LC68, %edi
	movl	$6838, %esi
.L37241:
	movl	$.LC171, %edx
	jmp	.L37220
.L37441:
	movq	32(%rbx), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	40(%rbx), %rsi
	movq	%rax, %rdi
	movq	%rax, 32(%rbx)
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L35889
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmove	%eax, %r13d
	.p2align 4,,7
.L35889:
	movq	32(%rbx), %rax
	movq	48(%rbx), %rsi
	testl	%r13d, %r13d
	movq	%rax, constructor_index(%rip)
	movq	%rsi, constructor_fields(%rip)
	je	.L35886
	cmpq	$0, 40(%rbx)
	je	.L35886
	cmpq	24(%rbx), %rax
	je	.L37443
.L35886:
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	je	.L35884
	movl	$2, %edi
	call	push_init_level
	movq	40(%rbx), %rsi
	movq	constructor_stack(%rip), %rcx
	testq	%rsi, %rsi
	movq	%rcx, 16(%rbx)
	je	.L35889
	movq	32(%rbx), %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L35889
	movq	24(%rbx), %r8
	movq	%r8, 32(%rbx)
	jmp	.L35889
.L35884:
	testl	%r13d, %r13d
	jne	.L35891
	movq	%r12, constructor_range_stack(%rip)
	jmp	.L35891
	.p2align 6,,7
.L37443:
	xorl	%r13d, %r13d
	movq	$0, 8(%rbx)
	jmp	.L35886
.L37440:
	movl	$.LC68, %edi
	movl	$6830, %esi
	jmp	.L37241
.L34256:
	movq	constructor_stack(%rip), %r14
	movq	$0, constructor_range_stack(%rip)
	movq	%r14, -368(%rbp)
.L34185:
	movq	-368(%rbp), %r13
	cmpb	$0, 106(%r13)
	jne	.L35892
	jmp	.L36730
.L37439:
	movq	constructor_index(%rip), %rdi
	xorl	%esi, %esi
	call	tree_low_cst
	movq	spelling_base(%rip), %rdi
	movq	spelling(%rip), %rdx
	movl	%eax, %r13d
	movl	spelling_size(%rip), %eax
	movq	%rdx, %r9
	subq	%rdi, %r9
	movq	%r9, %rbx
	shrq	$4, %rbx
	cmpl	%eax, %ebx
	jl	.L34968
	addl	$10, %eax
	testq	%rdi, %rdi
	movl	%eax, spelling_size(%rip)
	jne	.L34969
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L37125:
	movslq	%ebx,%rdx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rdx
	addq	spelling_base(%rip), %rdx
	movq	%rdx, spelling(%rip)
.L34968:
	movl	%r13d, 8(%rdx)
	movl	$3, (%rdx)
	movq	%r14, %rbx
	movq	constructor_index(%rip), %r13
	addq	$16, %rdx
	movq	%rdx, spelling(%rip)
	movq	%r13, -248(%rbp)
	movq	8(%r14), %rdi
	movzbl	16(%rdi), %eax
	movq	%rdi, %rdx
	cmpb	$23, %al
	je	.L34973
	cmpb	$18, %al
	je	.L37444
.L37028:
	movq	global_trees(%rip), %r8
.L34972:
	cmpb	$-86, 16(%rbx)
	je	.L37445
.L35071:
	cmpq	%r8, %rbx
	je	.L37446
	testb	$2, 17(%rbx)
	jne	.L35074
	movl	$0, constructor_constant(%rip)
.L35073:
	movl	require_constant_value(%rip), %edi
	testl	%edi, %edi
	je	.L35078
	testb	$2, 17(%rbx)
	je	.L37447
.L35078:
	movl	require_constant_elements(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L37448
.L35103:
	cmpq	$0, -248(%rbp)
	je	.L35105
	movq	-248(%rbp), %r9
	movq	8(%r9), %rax
	cmpq	global_trees(%rip), %rax
	je	.L35107
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L37449
.L35105:
	movl	require_constant_value(%rip), %edx
	movl	require_constant_elements(%rip), %ecx
	movq	%r12, %rdi
	movq	%rbx, %rsi
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -240(%rbp)
	je	.L37450
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L37451
.L35109:
	cmpb	$20, 16(%rdi)
	je	.L37452
.L35130:
	cmpb	$21, 16(%rdi)
	je	.L37453
.L35129:
	cmpq	$0, -248(%rbp)
	je	.L35197
	movq	-248(%rbp), %rsi
	cmpb	$25, 16(%rsi)
	je	.L37454
.L35197:
	movq	-248(%rbp), %rdi
	movq	-240(%rbp), %rsi
	movq	constructor_elements(%rip), %rdx
	call	tree_cons
	movq	constructor_type(%rip), %r15
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r15), %eax
	cmpb	$18, %al
	je	.L37455
	cmpb	$20, %al
	je	.L37456
	cmpb	$21, 16(%r15)
	je	.L37457
.L35199:
	movl	$1, %eax
	testl	%eax, %eax
	je	.L35107
	movq	constructor_pending_elts(%rip), %rbx
.L35209:
	xorl	%r15d, %r15d
	testq	%rbx, %rbx
	je	.L35211
	.p2align 4,,7
.L35245:
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$18, %al
	je	.L37458
	subb	$20, %al
	cmpb	$1, %al
	ja	.L35210
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L35211
	call	bit_position
	movq	32(%rbx), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L35231
	movq	32(%rbx), %r11
	movq	40(%rbx), %rdi
	movq	%r11, constructor_unfilled_fields(%rip)
	movq	8(%r11), %rsi
	movq	%r11, %rdx
.L37141:
	xorl	%ecx, %ecx
	call	output_init_element
.L35210:
	testq	%rbx, %rbx
	jne	.L35245
.L35211:
	xorl	%r10d, %r10d
	testl	%r10d, %r10d
	je	.L35107
	testq	%r15, %r15
	je	.L35107
	movq	constructor_type(%rip), %rsi
	movzbl	16(%rsi), %edx
	leal	-20(%rdx), %r9d
	cmpb	$1, %r9b
	jbe	.L37459
	cmpb	$18, %dl
	jne	.L35209
	movq	%r15, constructor_unfilled_index(%rip)
	jmp	.L35209
.L37459:
	movq	%r15, constructor_unfilled_fields(%rip)
	jmp	.L35209
	.p2align 6,,7
.L35107:
	movslq	constructor_depth(%rip),%rbx
	salq	$4, %rbx
	addq	spelling_base(%rip), %rbx
	movq	%rbx, spelling(%rip)
	jmp	.L35280
.L35231:
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L35233
.L37231:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.L35234
.L37140:
	movq	%rax, %rbx
	jmp	.L35210
.L35234:
	movq	32(%rbx), %r15
	jmp	.L35211
	.p2align 6,,7
.L35233:
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L37140
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L35240
	cmpq	%rbx, 8(%rax)
	je	.L35243
.L35240:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L35211
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
.L37232:
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L35210
	jmp	.L35234
	.p2align 6,,7
.L35243:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L35240
	cmpq	%rbx, 8(%rax)
	je	.L35243
	jmp	.L35240
	.p2align 6,,7
.L37458:
	movq	32(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L35214
	movq	constructor_type(%rip), %r13
	movq	40(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rdx
	movq	8(%r13), %rsi
	jmp	.L37141
.L35214:
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rbx), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L37231
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L37140
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L35223
	cmpq	%rbx, 8(%rax)
	je	.L35226
.L35223:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L35211
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	jmp	.L37232
.L35226:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L35223
	cmpq	%rbx, 8(%rax)
	je	.L35226
	jmp	.L35223
.L37457:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L35199
.L37456:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L35199
	testb	$2, 53(%rax)
	je	.L35199
	cmpq	$0, 72(%rax)
	jne	.L35199
.L35205:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L35199
	testb	$2, 53(%rax)
	je	.L35199
	cmpq	$0, 72(%rax)
	jne	.L35199
	jmp	.L35205
.L37455:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L35199
.L37454:
	movq	%rsi, %rdi
	call	copy_node
	movq	%rax, -248(%rbp)
	jmp	.L35197
.L37453:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L35129
	movq	32(%rax), %r11
	testb	$1, 17(%r11)
	jne	.L37460
.L35172:
	movq	$0, constructor_elements(%rip)
	jmp	.L35129
.L37460:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r10
	xorl	%r12d, %r12d
	cmpq	%r10, %r8
	movq	%r8, %rbx
	movq	%r10, %r13
	jae	.L36834
.L35179:
	cmpl	$3, (%rbx)
	je	.L37461
	movq	8(%rbx), %rdi
	movq	%r8, -376(%rbp)
	call	strlen
	movq	-376(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L35175:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L35179
.L36834:
	movslq	%r12d,%rdx
	movq	%r8, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L36836
.L35193:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L37462
	cmpl	$2, %eax
	je	.L37463
.L35187:
	movq	8(%r12), %rsi
	movzbl	(%rsi), %r9d
	leaq	1(%rsi), %rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	je	.L35183
.L35192:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L35192
.L35183:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L35193
.L36836:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	je	.L35172
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L35172
	.p2align 6,,7
.L37463:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L35187
.L37462:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L35183
.L37461:
	addl	$25, %r12d
	jmp	.L35175
.L37452:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L35132
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, -248(%rbp)
	je	.L35130
	testq	%rax, %rax
	jne	.L35133
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L35140
.L36828:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L37464
.L35160:
	cmpb	$18, 16(%rdi)
	je	.L37465
.L35166:
	movl	$0, constructor_incremental(%rip)
.L35132:
	movq	-248(%rbp), %rdi
	movq	-240(%rbp), %rsi
	call	add_pending_init
	jmp	.L35107
.L37465:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L37466
	movq	global_trees+136(%rip), %rax
.L37139:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L35166
.L37466:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L37139
	.p2align 6,,7
.L37464:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L35166
	testb	$2, 53(%rax)
	je	.L35166
	cmpq	$0, 72(%rax)
	jne	.L35166
.L35146:
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L35166
	testb	$2, 53(%rax)
	je	.L35166
	cmpq	$0, 72(%rax)
	jne	.L35166
	jmp	.L35146
.L35140:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L35140
	movq	constructor_type(%rip), %rdi
	jmp	.L36828
.L35133:
	movq	-248(%rbp), %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L35132
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L35153
	cmpb	$18, %al
	jne	.L35132
.L35153:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L35159
.L36831:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L35160
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L35166
	testb	$2, 53(%rax)
	je	.L35166
	cmpq	$0, 72(%rax)
	jne	.L35166
.L35165:
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L35166
	testb	$2, 53(%rax)
	je	.L35166
	cmpq	$0, 72(%rax)
	jne	.L35166
	jmp	.L35165
	.p2align 6,,7
.L35159:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L35159
	movq	constructor_type(%rip), %rdi
	jmp	.L36831
	.p2align 6,,7
.L37451:
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L35132
	movq	-248(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L37036
	movl	constructor_incremental(%rip), %r8d
	testl	%r8d, %r8d
	je	.L35132
	movq	-248(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L35132
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L35112
	cmpb	$18, %al
	jne	.L35132
.L35112:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L35118
.L36825:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L35160
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L35166
	testb	$2, 53(%rax)
	je	.L35166
	cmpq	$0, 72(%rax)
	jne	.L35166
.L35124:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L35166
	testb	$2, 53(%rax)
	je	.L35166
	cmpq	$0, 72(%rax)
	jne	.L35166
	jmp	.L35124
	.p2align 6,,7
.L35118:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L35118
	movq	constructor_type(%rip), %rdi
	jmp	.L36825
	.p2align 6,,7
.L37036:
	movq	constructor_type(%rip), %rdi
	jmp	.L35109
.L37450:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L35107
.L37449:
	call	integer_zerop
	testl	%eax, %eax
	je	.L35105
	movq	constructor_type(%rip), %rsi
	cmpb	$18, 16(%rsi)
	je	.L35107
	movq	-248(%rbp), %r15
	cmpq	$0, (%r15)
	jne	.L35107
	jmp	.L35105
.L37448:
	movq	8(%rbx), %rsi
	movq	%rbx, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L35103
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L35103
.L37447:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r13d, %r13d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r15
	jae	.L36820
.L35085:
	cmpl	$3, (%rbx)
	je	.L37467
	movq	8(%rbx), %rdi
	movq	%r8, -376(%rbp)
	call	strlen
	movq	-376(%rbp), %r8
	leal	1(%rax,%r13), %r13d
.L35081:
	addq	$16, %rbx
	cmpq	%r15, %rbx
	jb	.L35085
.L36820:
	movslq	%r13d,%rbx
	movq	%r8, %r13
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r15, %r8
	movq	%rsp, -88(%rbp)
	movq	%rsp, %rbx
	jae	.L36822
.L35099:
	movl	(%r13), %eax
	cmpl	$3, %eax
	je	.L37468
	cmpl	$2, %eax
	je	.L37469
.L35093:
	movq	8(%r13), %rdx
	movzbl	(%rdx), %r11d
	leaq	1(%rdx), %rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	je	.L35089
.L35098:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L35098
.L35089:
	addq	$16, %r13
	cmpq	spelling(%rip), %r13
	jb	.L35099
.L36822:
	movb	$0, (%rbx)
	movq	-88(%rbp), %r9
	cmpb	$0, (%r9)
	jne	.L37470
.L35102:
	movq	global_trees(%rip), %rbx
	jmp	.L35103
.L37470:
	movl	$.LC142, %edi
	movq	%r9, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L35102
.L37469:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L35093
.L37468:
	movl	8(%r13), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L35089
.L37467:
	addl	$25, %r13d
	jmp	.L35081
.L35074:
	movq	8(%rbx), %rsi
	movq	%rbx, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L35077
	movq	constructor_type(%rip), %r8
	movzbl	16(%r8), %r15d
	subb	$20, %r15b
	cmpb	$1, %r15b
	ja	.L35073
	movq	-248(%rbp), %rcx
	testb	$2, 53(%rcx)
	je	.L35073
	cmpb	$25, 16(%rbx)
	je	.L35073
.L35077:
	movl	$0, constructor_simple(%rip)
	jmp	.L35073
.L37446:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L35073
.L37445:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L35071
	movl	flag_isoc99(%rip), %r11d
	testl	%r11d, %r11d
	jne	.L35071
	movl	$1, %r10d
	testl	%r10d, %r10d
	je	.L35071
	movq	32(%rbx), %rsi
	movq	32(%rsi), %r9
	movq	104(%r9), %rbx
	jmp	.L35071
.L37444:
	cmpb	$29, 16(%r14)
	je	.L37471
.L34974:
	movq	128(%rdx), %rdi
	movq	128(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L37028
	movq	8(%r14), %rdi
.L34973:
	movzbl	16(%rdi), %r15d
	movq	%rdi, %r13
	cmpl	$23, %r15d
	je	.L34976
	cmpl	$18, %r15d
	je	.L34976
	movzbl	16(%r14), %eax
	cmpb	$32, %al
	je	.L37472
	movl	optimize(%rip), %ecx
	testl	%ecx, %ecx
	je	.L35039
	cmpb	$34, %al
	je	.L37473
.L35039:
	movzbl	16(%rbx), %ecx
	movq	%rbx, %rdx
	cmpb	$116, %cl
	je	.L37035
	cmpb	$115, %cl
	je	.L37474
.L35048:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L35053
	cmpb	$49, %al
	je	.L35053
	cmpb	$50, %al
	je	.L35053
	cmpb	$101, %al
	je	.L35053
.L35052:
	cmpl	$10, %r15d
	je	.L37475
	cmpb	$39, %cl
	je	.L37476
.L35061:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L35066
	testb	$32, 17(%r13)
	je	.L35067
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L35068
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r13), %edi
	movzwl	60(%rdx), %r13d
	andl	$511, %edi
	andl	$511, %r13d
	cmpl	%r13d, %edi
	je	.L35068
.L35067:
	movq	integer_types+40(%rip), %rdi
.L37229:
	movq	%rbx, %rsi
.L37230:
	call	convert
.L37136:
	movq	%rax, %r13
.L37127:
	movq	global_trees(%rip), %r8
.L35037:
	movq	%r13, %rbx
	jmp	.L34972
.L35068:
	movq	integer_types+48(%rip), %rdi
	jmp	.L37229
.L35066:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L35069
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L35069
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%r13)
	je	.L37477
.L35069:
	cmpl	$5, %r15d
	je	.L37478
.L35070:
	movq	%rbx, %r13
	jmp	.L37127
.L37478:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L37128:
	movq	global_trees(%rip), %r8
	movq	%r8, %r13
	jmp	.L35037
.L37477:
	movq	global_trees+200(%rip), %rdi
	jmp	.L37229
	.p2align 6,,7
.L37476:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L35061
	movq	integer_types+40(%rip), %rcx
	movq	40(%rdx), %rdi
	movzwl	60(%rcx), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L35061
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L35067
	testb	$32, 17(%r13)
	jne	.L35068
	jmp	.L35067
	.p2align 6,,7
.L37475:
	movq	integer_types+40(%rip), %r8
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r15d
	movzwl	60(%r8), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r15d, %r15d
	jne	.L35060
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L35059
.L35060:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L35059:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L37229
.L35053:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L35052
.L37474:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r11
	cmpq	%r11, 8(%rsi)
	jne	.L35048
.L35051:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %rbx
	cmpb	$116, %cl
	jne	.L37479
.L37035:
	movq	32(%rbx), %rsi
	jmp	.L35051
.L37479:
	cmpb	$115, %cl
	jne	.L35048
	movq	32(%rsi), %r9
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%r9)
	movq	%r9, %rsi
	je	.L35051
	jmp	.L35048
.L37473:
	movl	pedantic(%rip), %edi
	testl	%edi, %edi
	jne	.L35043
	cmpb	$51, 48(%r14)
	je	.L35043
	cmpq	$0, current_function_decl(%rip)
	je	.L35045
	movzbl	17(%r14), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L37480
.L35045:
	movq	%r14, %rsi
.L35046:
	movq	%rsi, %rbx
.L35043:
	movq	8(%rbx), %r13
	jmp	.L35039
.L37480:
	movq	104(%r14), %rax
	testq	%rax, %rax
	je	.L35045
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L35045
	testb	$2, 17(%rax)
	je	.L35045
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L35046
	jmp	.L35045
	.p2align 6,,7
.L37472:
	movq	104(%r14), %rbx
	jmp	.L35039
.L34976:
	movzbl	16(%r14), %edx
	xorl	%r13d, %r13d
	movl	%r15d, %r8d
	cmpb	$116, %dl
	je	.L36816
	cmpb	$115, %dl
	je	.L37481
	movzbl	16(%r14), %ecx
.L34978:
	movzbl	%cl, %r10d 
	movzbl	tree_code_type(%r10), %eax
	cmpb	$60, %al
	je	.L34984
	cmpb	$49, %al
	je	.L34984
	cmpb	$50, %al
	je	.L34984
	cmpb	$101, %al
	je	.L34984
.L34983:
	cmpl	$23, %r8d
	je	.L37482
	cmpl	$18, %r8d
	jne	.L35070
	movzbl	%cl, %r8d 
	xorl	%edx, %edx
	xorl	%r15d, %r15d
	movzbl	tree_code_type(%r8), %eax
	movq	8(%rdi), %r11
	cmpb	$114, %al
	je	.L34989
	cmpb	$100, %al
	je	.L34989
.L34988:
	movzbl	17(%rdi), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %esi
	shrb	$3, %r10b
	shrb	$4, %sil
	andl	$1, %r10d
	andl	%esi, %r9d
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rdi), %r10d
	movzbl	16(%rdi), %edi
	movl	%r10d, %esi
	shrb	$5, %sil
	andl	$1, %esi
	sall	$2, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	cmpb	$20, %dil
	je	.L37483
.L34992:
	leal	0(,%rsi,8), %eax
	orl	%eax, %r9d
	jne	.L34991
	testl	%edx, %edx
	jne	.L34991
	testl	%r15d, %r15d
	je	.L34990
.L34991:
	movl	%r8d, %ecx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %cl
	movl	%r8d, %r9d
	andl	%ecx, %esi
	movl	%r10d, %ecx
	andl	$1, %r9d
	andl	$1, %ecx
	addl	%r9d, %r9d
	sall	$2, %ecx
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L37484
.L34994:
	leal	0(,%rcx,8), %r8d
	leal	(%r15,%r15), %edi
	orl	%r8d, %esi
	orl	%edx, %esi
	orl	%edi, %esi
	movq	%r11, %rdi
	call	c_build_qualified_type
	movzbl	16(%rbx), %ecx
	movq	%rax, %r11
.L34990:
	cmpb	$41, %cl
	je	.L37485
	cmpb	$47, %cl
	je	.L37486
	xorl	%r15d, %r15d
	testl	%r13d, %r13d
	je	.L37487
.L35033:
	movl	flag_isoc99(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L35034
	testl	%r15d, %r15d
	je	.L35070
.L35034:
	movq	%r11, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %r13
	je	.L37488
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%r13, %rdi
	movq	%rax, %rsi
	jmp	.L37230
.L37488:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, %r13
	call	mark_addressable
	testl	%eax, %eax
	je	.L37128
	movq	%rbx, %rdi
	call	staticp
	movzbl	17(%r13), %ebx
	movl	%eax, %r8d
	andb	$1, %r8b
	addb	%r8b, %r8b
	andb	$-4, %bl
	orb	%r8b, %bl
	movb	%bl, 17(%r13)
	jmp	.L37127
	.p2align 6,,7
.L37487:
	movq	%rbx, %rdi
	movq	%r11, -384(%rbp)
	call	lvalue_p
	movq	-384(%rbp), %r11
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r15d
	jmp	.L35033
.L37486:
	movq	40(%rbx), %r13
	movq	8(%r13), %r15
	movzbl	16(%r15), %edx
	movq	%r15, %rax
	cmpl	$23, %edx
	movl	%edx, -76(%rbp)
	je	.L34998
	cmpl	$18, %edx
	je	.L34998
	movzbl	16(%r13), %edx
	cmpb	$32, %dl
	je	.L37489
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L35001
	cmpb	$34, %dl
	je	.L37490
.L35001:
	cmpb	$116, %dl
	movq	%r13, %rcx
	je	.L37033
	cmpb	$115, %dl
	je	.L37491
.L35010:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L35015
	cmpb	$49, %al
	je	.L35015
	cmpb	$50, %al
	je	.L35015
	cmpb	$101, %al
	je	.L35015
.L35014:
	cmpl	$10, -76(%rbp)
	je	.L37492
	cmpb	$39, %dl
	je	.L37493
.L35023:
	movq	%r15, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L35028
	testb	$32, 17(%r15)
	je	.L35029
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L35030
	movzwl	60(%r15), %r10d
	movq	integer_types+40(%rip), %r15
	movzwl	60(%r15), %r11d
	andl	$511, %r10d
	andl	$511, %r11d
	cmpl	%r11d, %r10d
	je	.L35030
.L35029:
	movq	integer_types+40(%rip), %rdi
.L37126:
	movq	%r13, %rsi
	call	convert
.L34999:
	movq	8(%rax), %rsi
	movq	32(%rbx), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L37136
.L35030:
	movq	integer_types+48(%rip), %rdi
	jmp	.L37126
.L35028:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L35031
	movl	flag_allow_single_precision(%rip), %esi
	testl	%esi, %esi
	jne	.L35031
	movq	global_trees+192(%rip), %r9
	cmpq	%r9, 128(%r15)
	je	.L37494
.L35031:
	cmpl	$5, -76(%rbp)
	je	.L37495
	movq	%r13, %rax
	jmp	.L34999
.L37495:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L34999
.L37494:
	movq	global_trees+200(%rip), %rdi
	jmp	.L37126
.L37493:
	movq	40(%r13), %rdx
	testb	$2, 53(%rdx)
	je	.L35023
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%rdi), %esi
	movq	40(%rdx), %rdi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L35023
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L35029
	testb	$32, 17(%r15)
	jne	.L35030
	jmp	.L35029
.L37492:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r15), %edx
	movl	flag_traditional(%rip), %r8d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r8d, %r8d
	jne	.L35022
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L35021
.L35022:
	testb	$32, 17(%r15)
	movl	$1, %eax
	cmovne	%eax, %esi
.L35021:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L37126
.L35015:
	movl	24(%rcx), %eax
	movl	%eax, 24(%r13)
	jmp	.L35014
.L37491:
	movq	32(%r13), %rsi
	movq	8(%r13), %rax
	cmpq	%rax, 8(%rsi)
	jne	.L35010
.L35013:
	movzbl	16(%rsi), %edx
	movq	%rsi, %r13
	cmpb	$116, %dl
	jne	.L37496
.L37033:
	movq	32(%r13), %rsi
	jmp	.L35013
.L37496:
	cmpb	$115, %dl
	jne	.L35010
	movq	32(%rsi), %r9
	movq	8(%r13), %r10
	cmpq	%r10, 8(%r9)
	movq	%r9, %rsi
	je	.L35013
	jmp	.L35010
.L37490:
	movl	pedantic(%rip), %r15d
	testl	%r15d, %r15d
	jne	.L35005
	cmpb	$51, 48(%r13)
	je	.L35005
	cmpq	$0, current_function_decl(%rip)
	je	.L35007
	movzbl	17(%r13), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L37497
.L35007:
	movq	%r13, %rsi
.L35008:
	movq	%rsi, %r13
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L35005:
	movq	%rax, %r15
	jmp	.L35001
.L37497:
	movq	104(%r13), %rax
	testq	%rax, %rax
	je	.L35007
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L35007
	testb	$2, 17(%rax)
	je	.L35007
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L35008
	jmp	.L35007
.L37489:
	movq	104(%r13), %r13
	movzbl	16(%r13), %edx
	jmp	.L35001
.L34998:
	movq	%r13, %rdi
	call	default_function_array_conversion
	jmp	.L34999
	.p2align 6,,7
.L37485:
	movq	72(%r11), %rdi
	movq	32(%rbx), %rsi
	jmp	.L37230
.L37484:
	testq	%r11, %r11
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L34994
.L37483:
	testq	%r11, %r11
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L34992
.L34989:
	movzbl	17(%rbx), %r9d
	movl	$1, %r15d
	movl	%r9d, %edx
	shrb	$3, %r9b
	shrb	$4, %dl
	andl	%r9d, %r15d
	andl	$1, %edx
	jmp	.L34988
.L37482:
	movl	$121, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L37136
.L34984:
	movl	24(%r14), %eax
	movl	%eax, 24(%rbx)
	jmp	.L34983
.L37481:
	movq	32(%r14), %rcx
	cmpq	%rdi, 8(%rcx)
	je	.L36816
	movl	$115, %ecx
	jmp	.L34978
.L36816:
	movq	32(%r14), %rsi
	movl	%edx, %ecx
.L34982:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %rbx
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r13d
	cmpb	$116, %cl
	jne	.L37498
	movq	32(%rbx), %rsi
	jmp	.L34982
.L37498:
	cmpb	$115, %cl
	jne	.L34978
	movq	32(%rsi), %rsi
	movq	8(%rbx), %r11
	cmpq	%r11, 8(%rsi)
	je	.L34982
	jmp	.L34978
.L37471:
	cmpb	$18, 16(%r12)
	jne	.L34974
	movq	8(%r12), %r15
	cmpb	$6, 16(%r15)
	jne	.L34974
	jmp	.L37028
	.p2align 6,,7
.L34969:
	movslq	%eax,%rsi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L37125
.L37438:
	movq	constructor_index(%rip), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L34942
	movq	constructor_max_index(%rip), %rdi
	call	integer_all_onesp
	testl	%eax, %eax
	je	.L34941
.L34942:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC168, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r14
	xorl	%r12d, %r12d
	cmpq	%r14, %r8
	movq	%r8, %rbx
	movq	%r14, %r13
	jae	.L36812
.L34949:
	cmpl	$3, (%rbx)
	je	.L37499
	movq	8(%rbx), %rdi
	movq	%r8, -376(%rbp)
	call	strlen
	movq	-376(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L34945:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L34949
.L36812:
	movslq	%r12d,%rdi
	movq	%r8, %r12
	addq	$16, %rdi
	andq	$-16, %rdi
	subq	%rdi, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L36876
.L34963:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L37500
	cmpl	$2, %eax
	je	.L37501
.L34957:
	movq	8(%r12), %r10
	movzbl	(%r10), %r11d
	leaq	1(%r10), %rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	je	.L34953
.L34962:
	movzbl	(%rcx), %edx
	incq	%rbx
	incq	%rcx
	testb	%dl, %dl
	movb	%dl, (%rbx)
	jne	.L34962
.L34953:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L34963
.L36876:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L34256
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L34256
	.p2align 6,,7
.L37501:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L34957
.L37500:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L34953
.L37499:
	addl	$25, %r12d
	jmp	.L34945
	.p2align 6,,7
.L37437:
	movq	8(%r12), %r15
	cmpb	$6, 16(%r15)
	jne	.L34937
	movl	-188(%rbp), %eax
	testl	%eax, %eax
	je	.L34937
	movq	-56(%rbp), %r14
	jmp	.L34938
	.p2align 6,,7
.L34936:
	cmpb	$9, %dl
	je	.L37502
	cmpq	$0, constructor_fields(%rip)
	je	.L37503
	testq	%r14, %r14
	je	.L35589
	movq	$0, -288(%rbp)
	movq	%r14, %r13
	movq	8(%r14), %r9
	movzbl	16(%r9), %eax
	cmpb	$23, %al
	je	.L35591
	cmpb	$18, %al
	je	.L37504
.L37050:
	movq	global_trees(%rip), %r8
.L35590:
	cmpb	$-86, 16(%r13)
	je	.L37505
.L35689:
	cmpq	%r8, %r13
	je	.L37506
	testb	$2, 17(%r13)
	jne	.L35692
	movl	$0, constructor_constant(%rip)
.L35691:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L35696
	testb	$2, 17(%r13)
	je	.L37507
.L35696:
	movl	require_constant_elements(%rip), %r11d
	testl	%r11d, %r11d
	jne	.L37508
.L35721:
	cmpq	$0, -288(%rbp)
	je	.L35723
	movq	8, %rax
	cmpq	global_trees(%rip), %rax
	je	.L35589
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L37509
.L35723:
	movl	require_constant_value(%rip), %edx
	movl	require_constant_elements(%rip), %ecx
	movq	%rbx, %rdi
	movq	%r13, %rsi
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -280(%rbp)
	je	.L37510
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L37511
.L35727:
	cmpb	$20, 16(%rdi)
	je	.L37512
.L35748:
	cmpb	$21, 16(%rdi)
	je	.L37513
.L35747:
	cmpq	$0, -288(%rbp)
	je	.L35815
	cmpb	$25, 16
	je	.L37514
.L35815:
	movq	-288(%rbp), %rdi
	movq	-280(%rbp), %rsi
	movq	constructor_elements(%rip), %rdx
	call	tree_cons
	movq	constructor_type(%rip), %rbx
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%rbx), %eax
	cmpb	$18, %al
	je	.L37515
	cmpb	$20, %al
	je	.L37516
	cmpb	$21, 16(%rbx)
	je	.L37517
.L35817:
	movl	$1, %esi
	testl	%esi, %esi
	je	.L35589
	movq	constructor_pending_elts(%rip), %rbx
.L35827:
	xorl	%r15d, %r15d
	testq	%rbx, %rbx
	je	.L35829
.L35863:
	movq	constructor_type(%rip), %r12
	movzbl	16(%r12), %eax
	cmpb	$18, %al
	je	.L37518
	subb	$20, %al
	cmpb	$1, %al
	ja	.L35828
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L35829
	call	bit_position
	movq	32(%rbx), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L35849
	movq	32(%rbx), %r8
	movq	40(%rbx), %rdi
	movq	%r8, constructor_unfilled_fields(%rip)
	movq	8(%r8), %rsi
	movq	%r8, %rdx
.L37173:
	xorl	%ecx, %ecx
	call	output_init_element
.L35828:
	testq	%rbx, %rbx
	jne	.L35863
.L35829:
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L35589
	testq	%r15, %r15
	je	.L35589
	movq	constructor_type(%rip), %r10
	movzbl	16(%r10), %edx
	leal	-20(%rdx), %r11d
	cmpb	$1, %r11b
	jbe	.L37519
	cmpb	$18, %dl
	jne	.L35827
	movq	%r15, constructor_unfilled_index(%rip)
	jmp	.L35827
.L37519:
	movq	%r15, constructor_unfilled_fields(%rip)
	jmp	.L35827
	.p2align 6,,7
.L35589:
	movq	$0, constructor_fields(%rip)
	jmp	.L34613
.L35849:
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L35851
.L37239:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.L35852
.L37172:
	movq	%rax, %rbx
	jmp	.L35828
.L35852:
	movq	32(%rbx), %r15
	jmp	.L35829
	.p2align 6,,7
.L35851:
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L37172
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L35858
	cmpq	%rbx, 8(%rax)
	je	.L35861
.L35858:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L35829
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
.L37240:
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L35828
	jmp	.L35852
	.p2align 6,,7
.L35861:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L35858
	cmpq	%rbx, 8(%rax)
	je	.L35861
	jmp	.L35858
	.p2align 6,,7
.L37518:
	movq	32(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L35832
	movq	constructor_type(%rip), %rcx
	movq	40(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rdx
	movq	8(%rcx), %rsi
	jmp	.L37173
.L35832:
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rbx), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L37239
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L37172
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L35841
	cmpq	%rbx, 8(%rax)
	je	.L35844
.L35841:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L35829
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	jmp	.L37240
.L35844:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L35841
	cmpq	%rbx, 8(%rax)
	je	.L35844
	jmp	.L35841
.L37517:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L35817
.L37516:
	movq	constructor_unfilled_fields(%rip), %r13
	movq	(%r13), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L35817
	testb	$2, 53(%rax)
	je	.L35817
	cmpq	$0, 72(%rax)
	jne	.L35817
.L35823:
	movq	constructor_unfilled_fields(%rip), %r9
	movq	(%r9), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L35817
	testb	$2, 53(%rax)
	je	.L35817
	cmpq	$0, 72(%rax)
	jne	.L35817
	jmp	.L35823
.L37515:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L35817
.L37514:
	xorl	%edi, %edi
	call	copy_node
	movq	%rax, -288(%rbp)
	jmp	.L35815
	.p2align 6,,7
.L37513:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L35747
	movq	32(%rax), %r8
	testb	$1, 17(%r8)
	jne	.L37520
.L35790:
	movq	$0, constructor_elements(%rip)
	jmp	.L35747
.L37520:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L36896
.L35797:
	cmpl	$3, (%rbx)
	je	.L37521
	movq	8(%rbx), %rdi
	movq	%r8, -376(%rbp)
	call	strlen
	movq	-376(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L35793:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L35797
.L36896:
	movslq	%r12d,%rdi
	movq	%r8, %r12
	addq	$16, %rdi
	andq	$-16, %rdi
	subq	%rdi, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L36898
.L35811:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L37522
	cmpl	$2, %eax
	je	.L37523
.L35805:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r11d
	leaq	1(%rdx), %rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	je	.L35801
.L35810:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L35810
.L35801:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L35811
.L36898:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	je	.L35790
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L35790
.L37523:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L35805
.L37522:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L35801
.L37521:
	addl	$25, %r12d
	jmp	.L35793
	.p2align 6,,7
.L37512:
	movl	constructor_incremental(%rip), %esi
	testl	%esi, %esi
	je	.L35750
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, -288(%rbp)
	je	.L35748
	testq	%rax, %rax
	jne	.L35751
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L35758
.L36890:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L37524
.L35778:
	cmpb	$18, 16(%rdi)
	je	.L37525
.L35784:
	movl	$0, constructor_incremental(%rip)
.L35750:
	movq	-280(%rbp), %rsi
	xorl	%edi, %edi
	call	add_pending_init
	jmp	.L35589
.L37525:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L37526
	movq	global_trees+136(%rip), %rax
.L37171:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L35784
.L37526:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L37171
.L37524:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L35784
	testb	$2, 53(%rax)
	je	.L35784
	cmpq	$0, 72(%rax)
	jne	.L35784
.L35764:
	movq	constructor_unfilled_fields(%rip), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L35784
	testb	$2, 53(%rax)
	je	.L35784
	cmpq	$0, 72(%rax)
	jne	.L35784
	jmp	.L35764
	.p2align 6,,7
.L35758:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L35758
	movq	constructor_type(%rip), %rdi
	jmp	.L36890
.L35751:
	xorl	%edi, %edi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r12
	call	bit_position
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L35750
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L35771
	cmpb	$18, %al
	jne	.L35750
.L35771:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L35777
.L36893:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L35778
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L35784
	testb	$2, 53(%rax)
	je	.L35784
	cmpq	$0, 72(%rax)
	jne	.L35784
.L35783:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L35784
	testb	$2, 53(%rax)
	je	.L35784
	cmpq	$0, 72(%rax)
	jne	.L35784
	jmp	.L35783
.L35777:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L35777
	movq	constructor_type(%rip), %rdi
	jmp	.L36893
	.p2align 6,,7
.L37511:
	movl	constructor_incremental(%rip), %ebx
	testl	%ebx, %ebx
	je	.L35750
	movq	constructor_unfilled_index(%rip), %rsi
	xorl	%edi, %edi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L37058
	movl	constructor_incremental(%rip), %r13d
	testl	%r13d, %r13d
	je	.L35750
	movq	constructor_unfilled_index(%rip), %rsi
	xorl	%edi, %edi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L35750
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L35730
	cmpb	$18, %al
	jne	.L35750
.L35730:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L35736
.L36887:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L35778
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L35784
	testb	$2, 53(%rax)
	je	.L35784
	cmpq	$0, 72(%rax)
	jne	.L35784
.L35742:
	movq	constructor_unfilled_fields(%rip), %r9
	movq	(%r9), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L35784
	testb	$2, 53(%rax)
	je	.L35784
	cmpq	$0, 72(%rax)
	jne	.L35784
	jmp	.L35742
.L35736:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L35736
	movq	constructor_type(%rip), %rdi
	jmp	.L36887
	.p2align 6,,7
.L37058:
	movq	constructor_type(%rip), %rdi
	jmp	.L35727
.L37510:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L35589
.L37509:
	call	integer_zerop
	testl	%eax, %eax
	je	.L35723
	movq	constructor_type(%rip), %r10
	cmpb	$18, 16(%r10)
	je	.L35589
	cmpq	$0, 0
	jne	.L35589
	jmp	.L35723
.L37508:
	movq	8(%r13), %rsi
	movq	%r13, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L35721
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L35721
.L37507:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r13d, %r13d
	cmpq	%rax, %r8
	movq	%r8, %r12
	movq	%rax, %r15
	jae	.L36882
.L35703:
	cmpl	$3, (%r12)
	je	.L37527
	movq	8(%r12), %rdi
	movq	%r8, -376(%rbp)
	call	strlen
	movq	-376(%rbp), %r8
	leal	1(%rax,%r13), %r13d
.L35699:
	addq	$16, %r12
	cmpq	%r15, %r12
	jb	.L35703
.L36882:
	movslq	%r13d,%r12
	movq	%r8, %r13
	addq	$16, %r12
	andq	$-16, %r12
	subq	%r12, %rsp
	cmpq	%r15, %r8
	movq	%rsp, -112(%rbp)
	movq	%rsp, %r12
	jae	.L36884
.L35717:
	movl	(%r13), %eax
	cmpl	$3, %eax
	je	.L37528
	cmpl	$2, %eax
	je	.L37529
.L35711:
	movq	8(%r13), %rdi
	movzbl	(%rdi), %r8d
	leaq	1(%rdi), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%r12)
	je	.L35707
.L35716:
	movzbl	(%rcx), %edx
	incq	%r12
	incq	%rcx
	testb	%dl, %dl
	movb	%dl, (%r12)
	jne	.L35716
.L35707:
	addq	$16, %r13
	cmpq	spelling(%rip), %r13
	jb	.L35717
.L36884:
	movb	$0, (%r12)
	movq	-112(%rbp), %rsi
	cmpb	$0, (%rsi)
	jne	.L37530
.L35720:
	movq	global_trees(%rip), %r13
	jmp	.L35721
.L37530:
	movl	$.LC142, %edi
	xorl	%eax, %eax
	call	error
	jmp	.L35720
.L37529:
	movb	$46, (%r12)
	incq	%r12
	jmp	.L35711
.L37528:
	movl	8(%r13), %edx
	movq	%r12, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%r12, %rdi
	call	strlen
	addq	%rax, %r12
	jmp	.L35707
.L37527:
	addl	$25, %r13d
	jmp	.L35699
.L35692:
	movq	8(%r13), %rsi
	movq	%r13, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L35695
	movq	constructor_type(%rip), %rcx
	movzbl	16(%rcx), %r15d
	subb	$20, %r15b
	cmpb	$1, %r15b
	ja	.L35691
	testb	$2, 53
	je	.L35691
	cmpb	$25, 16(%r13)
	je	.L35691
.L35695:
	movl	$0, constructor_simple(%rip)
	jmp	.L35691
.L37506:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L35691
.L37505:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L35689
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L35689
	movl	$1, %r10d
	testl	%r10d, %r10d
	je	.L35689
	movq	32(%r13), %rsi
	movq	32(%rsi), %r9
	movq	104(%r9), %r13
	jmp	.L35689
.L37504:
	cmpb	$29, 16(%r14)
	je	.L37531
.L35592:
	movq	8(%r14), %rcx
	movq	128(%rbx), %rsi
	movq	128(%rcx), %rdi
	call	comptypes
	testl	%eax, %eax
	jne	.L37050
.L35591:
	movq	8(%r14), %r12
	movzbl	16(%r12), %r15d
	cmpl	$23, %r15d
	je	.L35594
	cmpl	$18, %r15d
	je	.L35594
	movzbl	16(%r14), %eax
	cmpb	$32, %al
	je	.L37532
	movl	optimize(%rip), %edx
	testl	%edx, %edx
	je	.L35657
	cmpb	$34, %al
	je	.L37533
.L35657:
	movzbl	16(%r13), %ecx
	movq	%r13, %rdx
	cmpb	$116, %cl
	je	.L37057
	cmpb	$115, %cl
	je	.L37534
.L35666:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L35671
	cmpb	$49, %al
	je	.L35671
	cmpb	$50, %al
	je	.L35671
	cmpb	$101, %al
	je	.L35671
.L35670:
	cmpl	$10, %r15d
	je	.L37535
	cmpb	$39, %cl
	je	.L37536
.L35679:
	movq	%r12, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L35684
	testb	$32, 17(%r12)
	je	.L35685
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L35686
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r12), %edi
	movzwl	60(%rdx), %r12d
	andl	$511, %edi
	andl	$511, %r12d
	cmpl	%r12d, %edi
	je	.L35686
.L35685:
	movq	integer_types+40(%rip), %rdi
.L37237:
	movq	%r13, %rsi
.L37238:
	call	convert
.L37168:
	movq	%rax, %r12
.L37159:
	movq	global_trees(%rip), %r8
.L35655:
	movq	%r12, %r13
	jmp	.L35590
.L35686:
	movq	integer_types+48(%rip), %rdi
	jmp	.L37237
	.p2align 6,,7
.L35684:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L35687
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L35687
	movq	global_trees+192(%rip), %r11
	cmpq	%r11, 128(%r12)
	je	.L37537
.L35687:
	cmpl	$5, %r15d
	je	.L37538
.L35688:
	movq	%r13, %r12
	jmp	.L37159
.L37538:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L37160:
	movq	global_trees(%rip), %r8
	movq	%r8, %r12
	jmp	.L35655
.L37537:
	movq	global_trees+200(%rip), %rdi
	jmp	.L37237
	.p2align 6,,7
.L37536:
	movq	40(%r13), %rdx
	testb	$2, 53(%rdx)
	je	.L35679
	movq	integer_types+40(%rip), %r8
	movq	40(%rdx), %rdi
	movzwl	60(%r8), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L35679
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L35685
	testb	$32, 17(%r12)
	jne	.L35686
	jmp	.L35685
	.p2align 6,,7
.L37535:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r12), %edx
	movl	flag_traditional(%rip), %r15d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r15d, %r15d
	jne	.L35678
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L35677
.L35678:
	testb	$32, 17(%r12)
	movl	$1, %eax
	cmovne	%eax, %esi
.L35677:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L37237
.L35671:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r13)
	jmp	.L35670
.L37534:
	movq	32(%r13), %rsi
	movq	8(%r13), %r11
	cmpq	%r11, 8(%rsi)
	jne	.L35666
.L35669:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r13
	cmpb	$116, %cl
	jne	.L37539
.L37057:
	movq	32(%r13), %rsi
	jmp	.L35669
.L37539:
	cmpb	$115, %cl
	jne	.L35666
	movq	32(%rsi), %r9
	movq	8(%r13), %r10
	cmpq	%r10, 8(%r9)
	movq	%r9, %rsi
	je	.L35669
	jmp	.L35666
.L37533:
	movl	pedantic(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L35661
	cmpb	$51, 48(%r14)
	je	.L35661
	cmpq	$0, current_function_decl(%rip)
	je	.L35663
	movzbl	17(%r14), %edi
	andb	$24, %dil
	cmpb	$16, %dil
	je	.L37540
.L35663:
	movq	%r14, %rsi
.L35664:
	movq	%rsi, %r13
.L35661:
	movq	8(%r13), %r12
	jmp	.L35657
.L37540:
	movq	104(%r14), %rax
	testq	%rax, %rax
	je	.L35663
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L35663
	testb	$2, 17(%rax)
	je	.L35663
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L35664
	jmp	.L35663
	.p2align 6,,7
.L37532:
	movq	104(%r14), %r13
	jmp	.L35657
.L35594:
	movzbl	16(%r14), %edx
	movl	%r15d, %edi
	xorl	%r15d, %r15d
	cmpb	$116, %dl
	je	.L36878
	cmpb	$115, %dl
	je	.L37541
	movzbl	16(%r14), %ecx
.L35596:
	movzbl	%cl, %r10d 
	movzbl	tree_code_type(%r10), %eax
	cmpb	$60, %al
	je	.L35602
	cmpb	$49, %al
	je	.L35602
	cmpb	$50, %al
	je	.L35602
	cmpb	$101, %al
	je	.L35602
.L35601:
	cmpl	$23, %edi
	je	.L37542
	cmpl	$18, %edi
	jne	.L35688
	movzbl	%cl, %edi 
	xorl	%edx, %edx
	movq	8(%r12), %r11
	movzbl	tree_code_type(%rdi), %eax
	movl	$0, -268(%rbp)
	cmpb	$114, %al
	je	.L35607
	cmpb	$100, %al
	je	.L35607
.L35606:
	movzbl	17(%r12), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %esi
	shrb	$3, %r10b
	shrb	$4, %sil
	andl	$1, %r10d
	andl	%esi, %r9d
	xorl	%esi, %esi
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%r12), %r10d
	movl	%r10d, %edi
	shrb	$5, %dil
	andl	$1, %edi
	sall	$2, %edi
	orl	%edi, %r9d
	movzbl	16(%r12), %edi
	cmpb	$20, %dil
	je	.L37543
.L35610:
	leal	0(,%rsi,8), %r12d
	orl	%r12d, %r9d
	jne	.L35609
	movl	-268(%rbp), %eax
	testl	%eax, %eax
	jne	.L35609
	testl	%edx, %edx
	je	.L35608
.L35609:
	movl	%r8d, %r12d
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r12b
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%r12d, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L37544
.L35612:
	leal	0(,%rcx,8), %edi
	leal	(%rdx,%rdx), %r8d
	orl	%edi, %esi
	movq	%r11, %rdi
	orl	-268(%rbp), %esi
	orl	%r8d, %esi
	call	c_build_qualified_type
	movzbl	16(%r13), %ecx
	movq	%rax, %r11
.L35608:
	cmpb	$41, %cl
	je	.L37545
	cmpb	$47, %cl
	je	.L37546
	xorl	%r12d, %r12d
	testl	%r15d, %r15d
	je	.L37547
.L35651:
	movl	flag_isoc99(%rip), %ecx
	testl	%ecx, %ecx
	jne	.L35652
	testl	%r12d, %r12d
	je	.L35688
.L35652:
	movq	%r11, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r13)
	movq	%rax, %r12
	je	.L37548
	movl	$121, %edi
	movq	%r13, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%r12, %rdi
	movq	%rax, %rsi
	jmp	.L37238
.L37548:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r13, %rdx
	call	build1
	movq	%r13, %rdi
	movq	%rax, %r12
	call	mark_addressable
	testl	%eax, %eax
	je	.L37160
	movq	%r13, %rdi
	call	staticp
	movzbl	17(%r12), %r13d
	movl	%eax, %r8d
	andb	$1, %r8b
	addb	%r8b, %r8b
	andb	$-4, %r13b
	orb	%r8b, %r13b
	movb	%r13b, 17(%r12)
	jmp	.L37159
.L37547:
	movq	%r13, %rdi
	movq	%r11, -384(%rbp)
	call	lvalue_p
	movq	-384(%rbp), %r11
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r12d
	jmp	.L35651
.L37546:
	movq	40(%r13), %r12
	movq	8(%r12), %r15
	movzbl	16(%r15), %r9d
	movq	%r15, %rax
	cmpl	$23, %r9d
	movl	%r9d, -100(%rbp)
	je	.L35616
	cmpl	$18, %r9d
	je	.L35616
	movzbl	16(%r12), %edx
	cmpb	$32, %dl
	je	.L37549
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L35619
	cmpb	$34, %dl
	je	.L37550
.L35619:
	cmpb	$116, %dl
	movq	%r12, %rcx
	je	.L37055
	cmpb	$115, %dl
	je	.L37551
.L35628:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L35633
	cmpb	$49, %al
	je	.L35633
	cmpb	$50, %al
	je	.L35633
	cmpb	$101, %al
	je	.L35633
.L35632:
	cmpl	$10, -100(%rbp)
	je	.L37552
	cmpb	$39, %dl
	je	.L37553
.L35641:
	movq	%r15, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L35646
	testb	$32, 17(%r15)
	je	.L35647
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L35648
	movzwl	60(%r15), %r10d
	movq	integer_types+40(%rip), %r15
	movzwl	60(%r15), %r11d
	andl	$511, %r10d
	andl	$511, %r11d
	cmpl	%r11d, %r10d
	je	.L35648
.L35647:
	movq	integer_types+40(%rip), %rdi
.L37158:
	movq	%r12, %rsi
	call	convert
.L35617:
	movq	8(%rax), %rsi
	movq	32(%r13), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L37168
.L35648:
	movq	integer_types+48(%rip), %rdi
	jmp	.L37158
.L35646:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L35649
	movl	flag_allow_single_precision(%rip), %esi
	testl	%esi, %esi
	jne	.L35649
	movq	global_trees+192(%rip), %r9
	cmpq	%r9, 128(%r15)
	je	.L37554
.L35649:
	cmpl	$5, -100(%rbp)
	je	.L37555
	movq	%r12, %rax
	jmp	.L35617
.L37555:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L35617
.L37554:
	movq	global_trees+200(%rip), %rdi
	jmp	.L37158
.L37553:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L35641
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%rdi), %esi
	movq	40(%rdx), %rdi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L35641
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L35647
	testb	$32, 17(%r15)
	jne	.L35648
	jmp	.L35647
.L37552:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r15), %edx
	movl	flag_traditional(%rip), %r8d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r8d, %r8d
	jne	.L35640
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L35639
.L35640:
	testb	$32, 17(%r15)
	movl	$1, %eax
	cmovne	%eax, %esi
.L35639:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L37158
.L35633:
	movl	24(%rcx), %eax
	movl	%eax, 24(%r12)
	jmp	.L35632
.L37551:
	movq	32(%r12), %rsi
	movq	8(%r12), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L35628
.L35631:
	movzbl	16(%rsi), %edx
	movq	%rsi, %r12
	cmpb	$116, %dl
	jne	.L37556
.L37055:
	movq	32(%r12), %rsi
	jmp	.L35631
.L37556:
	cmpb	$115, %dl
	jne	.L35628
	movq	32(%rsi), %r9
	movq	8(%r12), %rax
	cmpq	%rax, 8(%r9)
	movq	%r9, %rsi
	je	.L35631
	jmp	.L35628
.L37550:
	movl	pedantic(%rip), %r15d
	testl	%r15d, %r15d
	jne	.L35623
	cmpb	$51, 48(%r12)
	je	.L35623
	cmpq	$0, current_function_decl(%rip)
	je	.L35625
	movzbl	17(%r12), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L37557
.L35625:
	movq	%r12, %rsi
.L35626:
	movq	%rsi, %r12
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L35623:
	movq	%rax, %r15
	jmp	.L35619
.L37557:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L35625
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L35625
	testb	$2, 17(%rax)
	je	.L35625
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L35626
	jmp	.L35625
.L37549:
	movq	104(%r12), %r12
	movzbl	16(%r12), %edx
	jmp	.L35619
.L35616:
	movq	%r12, %rdi
	call	default_function_array_conversion
	jmp	.L35617
.L37545:
	movq	72(%r11), %rdi
	movq	32(%r13), %rsi
	jmp	.L37238
.L37544:
	testq	%r11, %r11
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L35612
.L37543:
	testq	%r11, %r11
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L35610
.L35607:
	movzbl	17(%r13), %r8d
	movl	%r8d, %esi
	shrb	$3, %r8b
	shrb	$4, %sil
	movl	%r8d, %edx
	movl	%esi, %r9d
	andl	$1, %edx
	andl	$1, %r9d
	movl	%r9d, -268(%rbp)
	jmp	.L35606
	.p2align 6,,7
.L37542:
	movl	$121, %edi
	movq	%r13, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L37168
.L35602:
	movl	24(%r14), %eax
	movl	%eax, 24(%r13)
	jmp	.L35601
.L37541:
	movq	32(%r14), %r11
	cmpq	%r12, 8(%r11)
	je	.L36878
	movl	$115, %ecx
	jmp	.L35596
.L36878:
	movq	32(%r14), %rsi
	movl	%edx, %ecx
.L35600:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r13
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r15d
	cmpb	$116, %cl
	jne	.L37558
	movq	32(%r13), %rsi
	jmp	.L35600
.L37558:
	cmpb	$115, %cl
	jne	.L35596
	movq	32(%rsi), %rsi
	movq	8(%r13), %rax
	cmpq	%rax, 8(%rsi)
	je	.L35600
	jmp	.L35596
.L37531:
	cmpb	$18, %dl
	jne	.L35592
	movq	8(%r11), %r12
	cmpb	$6, 16(%r12)
	jne	.L35592
	jmp	.L37050
.L37503:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC170, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r14
	xorl	%r12d, %r12d
	cmpq	%r14, %r8
	movq	%r8, %rbx
	movq	%r14, %r13
	jae	.L36874
.L35570:
	cmpl	$3, (%rbx)
	je	.L37559
	movq	8(%rbx), %rdi
	movq	%r8, -376(%rbp)
	call	strlen
	movq	-376(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L35566:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L35570
.L36874:
	movslq	%r12d,%r15
	movq	%r8, %r12
	addq	$16, %r15
	andq	$-16, %r15
	subq	%r15, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L36876
.L35584:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L37560
	cmpl	$2, %eax
	je	.L37561
.L35578:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %esi
	leaq	1(%rdx), %rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	je	.L35574
.L35583:
	movzbl	(%rcx), %r13d
	incq	%rbx
	incq	%rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	jne	.L35583
.L35574:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L35584
	jmp	.L36876
.L37561:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L35578
.L37560:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L35574
.L37559:
	addl	$25, %r12d
	jmp	.L35566
	.p2align 6,,7
.L37502:
	movq	8(%r11), %r8
	movq	constructor_max_index(%rip), %rdi
	movq	constructor_index(%rip), %rsi
	movq	128(%r8), %rdx
	movq	%rdx, -96(%rbp)
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L37562
	testq	%r14, %r14
	je	.L35280
	movq	constructor_index(%rip), %rcx
	movq	%r14, %r12
	movq	%rcx, -264(%rbp)
	movq	8(%r14), %rdi
	movzbl	16(%rdi), %eax
	movq	%rdi, %rdx
	cmpb	$23, %al
	je	.L35282
	cmpb	$18, %al
	je	.L37563
.L37039:
	movq	global_trees(%rip), %r8
.L35281:
	cmpb	$-86, 16(%r12)
	je	.L37564
.L35380:
	cmpq	%r8, %r12
	je	.L37565
	testb	$2, 17(%r12)
	jne	.L35383
	movl	$0, constructor_constant(%rip)
.L35382:
	movl	require_constant_value(%rip), %r9d
	testl	%r9d, %r9d
	je	.L35387
	testb	$2, 17(%r12)
	je	.L37566
.L35387:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L37567
.L35412:
	cmpq	$0, -264(%rbp)
	je	.L35414
	movq	-264(%rbp), %rbx
	movq	8(%rbx), %rax
	cmpq	global_trees(%rip), %rax
	je	.L35280
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L37568
.L35414:
	movq	-96(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%r12, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -256(%rbp)
	je	.L37569
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L37570
.L35418:
	cmpb	$20, 16(%rdi)
	je	.L37571
.L35439:
	cmpb	$21, 16(%rdi)
	je	.L37572
.L35438:
	cmpq	$0, -264(%rbp)
	je	.L35506
	movq	-264(%rbp), %rdx
	cmpb	$25, 16(%rdx)
	je	.L37573
.L35506:
	movq	constructor_elements(%rip), %rdx
	movq	-264(%rbp), %rdi
	movq	-256(%rbp), %rsi
	call	tree_cons
	movq	%rax, constructor_elements(%rip)
	movq	constructor_type(%rip), %rax
	movq	%rax, %rdx
	movzbl	16(%rax), %eax
	cmpb	$18, %al
	je	.L37574
	cmpb	$20, %al
	je	.L37575
	cmpb	$21, 16(%rdx)
	je	.L37576
.L35508:
	movl	$1, %r9d
	testl	%r9d, %r9d
	je	.L35280
	movq	constructor_pending_elts(%rip), %rbx
.L35518:
	xorl	%r15d, %r15d
	testq	%rbx, %rbx
	je	.L35520
.L35554:
	movq	constructor_type(%rip), %r12
	movzbl	16(%r12), %eax
	cmpb	$18, %al
	je	.L37577
	subb	$20, %al
	cmpb	$1, %al
	ja	.L35519
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L35520
	call	bit_position
	movq	32(%rbx), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L35540
	movq	32(%rbx), %r11
	movq	40(%rbx), %rdi
	movq	%r11, constructor_unfilled_fields(%rip)
	movq	8(%r11), %rsi
	movq	%r11, %rdx
.L37157:
	xorl	%ecx, %ecx
	call	output_init_element
.L35519:
	testq	%rbx, %rbx
	jne	.L35554
.L35520:
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L35280
	testq	%r15, %r15
	je	.L35280
	movq	constructor_type(%rip), %r8
	movzbl	16(%r8), %edx
	leal	-20(%rdx), %r10d
	cmpb	$1, %r10b
	jbe	.L37578
	cmpb	$18, %dl
	jne	.L35518
	movq	%r15, constructor_unfilled_index(%rip)
	jmp	.L35518
.L37578:
	movq	%r15, constructor_unfilled_fields(%rip)
	jmp	.L35518
	.p2align 6,,7
.L35540:
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L35542
.L37235:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.L35543
.L37156:
	movq	%rax, %rbx
	jmp	.L35519
.L35543:
	movq	32(%rbx), %r15
	jmp	.L35520
	.p2align 6,,7
.L35542:
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L37156
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L35549
	cmpq	%rbx, 8(%rax)
	je	.L35552
.L35549:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L35520
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
.L37236:
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L35519
	jmp	.L35543
	.p2align 6,,7
.L35552:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L35549
	cmpq	%rbx, 8(%rax)
	je	.L35552
	jmp	.L35549
.L37577:
	movq	32(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L35523
	movq	constructor_type(%rip), %rcx
	movq	40(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rdx
	movq	8(%rcx), %rsi
	jmp	.L37157
.L35523:
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rbx), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L37235
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L37156
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L35532
	cmpq	%rbx, 8(%rax)
	je	.L35535
.L35532:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L35520
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	jmp	.L37236
.L35535:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L35532
	cmpq	%rbx, 8(%rax)
	je	.L35535
	jmp	.L35532
.L37576:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L35508
.L37575:
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L35508
	testb	$2, 53(%rax)
	je	.L35508
	cmpq	$0, 72(%rax)
	jne	.L35508
.L35514:
	movq	constructor_unfilled_fields(%rip), %r13
	movq	(%r13), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L35508
	testb	$2, 53(%rax)
	je	.L35508
	cmpq	$0, 72(%rax)
	jne	.L35508
	jmp	.L35514
.L37574:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L35508
.L37573:
	movq	%rdx, %rdi
	call	copy_node
	movq	%rax, -264(%rbp)
	jmp	.L35506
.L37572:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L35438
	movq	32(%rax), %rdi
	testb	$1, 17(%rdi)
	jne	.L37579
.L35481:
	movq	$0, constructor_elements(%rip)
	jmp	.L35438
.L37579:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r11
	xorl	%r12d, %r12d
	cmpq	%r11, %r8
	movq	%r8, %rbx
	movq	%r11, %r13
	jae	.L36865
.L35488:
	cmpl	$3, (%rbx)
	je	.L37580
	movq	8(%rbx), %rdi
	movq	%r8, -376(%rbp)
	call	strlen
	movq	-376(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L35484:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L35488
.L36865:
	movslq	%r12d,%rdx
	movq	%r8, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L36867
.L35502:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L37581
	cmpl	$2, %eax
	je	.L37582
.L35496:
	movq	8(%r12), %r8
	movzbl	(%r8), %r10d
	leaq	1(%r8), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L35492
.L35501:
	movzbl	(%rcx), %esi
	incq	%rbx
	incq	%rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	jne	.L35501
.L35492:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L35502
.L36867:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	je	.L35481
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L35481
.L37582:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L35496
.L37581:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L35492
.L37580:
	addl	$25, %r12d
	jmp	.L35484
.L37571:
	movl	constructor_incremental(%rip), %r9d
	testl	%r9d, %r9d
	je	.L35441
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, -264(%rbp)
	je	.L35439
	testq	%rax, %rax
	jne	.L35442
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L35449
.L36859:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L37583
.L35469:
	cmpb	$18, 16(%rdi)
	je	.L37584
.L35475:
	movl	$0, constructor_incremental(%rip)
.L35441:
	movq	-264(%rbp), %rdi
	movq	-256(%rbp), %rsi
	call	add_pending_init
	jmp	.L35280
.L37584:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L37585
	movq	global_trees+136(%rip), %rax
.L37155:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L35475
.L37585:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L37155
.L37583:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L35475
	testb	$2, 53(%rax)
	je	.L35475
	cmpq	$0, 72(%rax)
	jne	.L35475
.L35455:
	movq	constructor_unfilled_fields(%rip), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L35475
	testb	$2, 53(%rax)
	je	.L35475
	cmpq	$0, 72(%rax)
	jne	.L35475
	jmp	.L35455
	.p2align 6,,7
.L35449:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L35449
	movq	constructor_type(%rip), %rdi
	jmp	.L36859
.L35442:
	movq	-264(%rbp), %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r12
	call	bit_position
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L35441
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L35462
	cmpb	$18, %al
	jne	.L35441
.L35462:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L35468
.L36862:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L35469
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L35475
	testb	$2, 53(%rax)
	je	.L35475
	cmpq	$0, 72(%rax)
	jne	.L35475
.L35474:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L35475
	testb	$2, 53(%rax)
	je	.L35475
	cmpq	$0, 72(%rax)
	jne	.L35475
	jmp	.L35474
.L35468:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L35468
	movq	constructor_type(%rip), %rdi
	jmp	.L36862
	.p2align 6,,7
.L37570:
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L35441
	movq	-264(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L37047
	movl	constructor_incremental(%rip), %esi
	testl	%esi, %esi
	je	.L35441
	movq	-264(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L35441
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L35421
	cmpb	$18, %al
	jne	.L35441
.L35421:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L35427
.L36856:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L35469
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L35475
	testb	$2, 53(%rax)
	je	.L35475
	cmpq	$0, 72(%rax)
	jne	.L35475
.L35433:
	movq	constructor_unfilled_fields(%rip), %r13
	movq	(%r13), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L35475
	testb	$2, 53(%rax)
	je	.L35475
	cmpq	$0, 72(%rax)
	jne	.L35475
	jmp	.L35433
.L35427:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L35427
	movq	constructor_type(%rip), %rdi
	jmp	.L36856
.L37047:
	movq	constructor_type(%rip), %rdi
	jmp	.L35418
	.p2align 6,,7
.L37569:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L35280
.L37568:
	call	integer_zerop
	testl	%eax, %eax
	je	.L35414
	movq	constructor_type(%rip), %r10
	cmpb	$18, 16(%r10)
	je	.L35280
	movq	-264(%rbp), %r8
	cmpq	$0, (%r8)
	jne	.L35280
	jmp	.L35414
	.p2align 6,,7
.L37567:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L35412
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L35412
	.p2align 6,,7
.L37566:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r15
	xorl	%r12d, %r12d
	cmpq	%r15, %r8
	movq	%r8, %rbx
	movq	%r15, %r13
	jae	.L36851
.L35394:
	cmpl	$3, (%rbx)
	je	.L37586
	movq	8(%rbx), %rdi
	movq	%r8, -376(%rbp)
	call	strlen
	movq	-376(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L35390:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L35394
.L36851:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L36853
.L35408:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L37587
	cmpl	$2, %eax
	je	.L37588
.L35402:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %edi
	leaq	1(%rdx), %rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	je	.L35398
.L35407:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L35407
.L35398:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L35408
.L36853:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	jne	.L37589
.L35411:
	movq	global_trees(%rip), %r12
	jmp	.L35412
.L37589:
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L35411
	.p2align 6,,7
.L37588:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L35402
.L37587:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L35398
	.p2align 6,,7
.L37586:
	addl	$25, %r12d
	jmp	.L35390
.L35383:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L35386
	movq	constructor_type(%rip), %rsi
	movzbl	16(%rsi), %r8d
	subb	$20, %r8b
	cmpb	$1, %r8b
	ja	.L35382
	movq	-264(%rbp), %r13
	testb	$2, 53(%r13)
	je	.L35382
	cmpb	$25, 16(%r12)
	je	.L35382
.L35386:
	movl	$0, constructor_simple(%rip)
	jmp	.L35382
	.p2align 6,,7
.L37565:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L35382
.L37564:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L35380
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L35380
	movl	$1, %ebx
	testl	%ebx, %ebx
	je	.L35380
	movq	32(%r12), %r10
	movq	32(%r10), %r11
	movq	104(%r11), %r12
	jmp	.L35380
	.p2align 6,,7
.L37563:
	cmpb	$29, 16(%r14)
	je	.L37590
.L35283:
	movq	-96(%rbp), %rax
	movq	128(%rdx), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L37039
	movq	8(%r14), %rdi
.L35282:
	movzbl	16(%rdi), %r13d
	movq	%rdi, %rbx
	cmpl	$23, %r13d
	je	.L35285
	cmpl	$18, %r13d
	je	.L35285
	movzbl	16(%r14), %eax
	cmpb	$32, %al
	je	.L37591
	movl	optimize(%rip), %edx
	testl	%edx, %edx
	je	.L35348
	cmpb	$34, %al
	je	.L37592
.L35348:
	movzbl	16(%r12), %ecx
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L37046
	cmpb	$115, %cl
	je	.L37593
.L35357:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L35362
	cmpb	$49, %al
	je	.L35362
	cmpb	$50, %al
	je	.L35362
	cmpb	$101, %al
	je	.L35362
.L35361:
	cmpl	$10, %r13d
	je	.L37594
	cmpb	$39, %cl
	je	.L37595
.L35370:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L35375
	testb	$32, 17(%rbx)
	je	.L35376
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L35377
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%rbx), %edi
	movzwl	60(%rdx), %ecx
	andl	$511, %edi
	andl	$511, %ecx
	cmpl	%ecx, %edi
	je	.L35377
.L35376:
	movq	integer_types+40(%rip), %rdi
.L37233:
	movq	%r12, %rsi
.L37234:
	call	convert
.L37152:
	movq	%rax, %rbx
.L37143:
	movq	global_trees(%rip), %r8
.L35346:
	movq	%rbx, %r12
	jmp	.L35281
.L35377:
	movq	integer_types+48(%rip), %rdi
	jmp	.L37233
.L35375:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L35378
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L35378
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%rbx)
	je	.L37596
.L35378:
	cmpl	$5, %r13d
	je	.L37597
.L35379:
	movq	%r12, %rbx
	jmp	.L37143
.L37597:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L37144:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L35346
.L37596:
	movq	global_trees+200(%rip), %rdi
	jmp	.L37233
.L37595:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L35370
	movq	integer_types+40(%rip), %r15
	movq	40(%rdx), %rdi
	movzwl	60(%r15), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L35370
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L35376
	testb	$32, 17(%rbx)
	jne	.L35377
	jmp	.L35376
.L37594:
	movq	integer_types+40(%rip), %r9
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%r9), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L35369
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L35368
.L35369:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L35368:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L37233
.L35362:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L35361
.L37593:
	movq	32(%r12), %rsi
	movq	8(%r12), %r8
	cmpq	%r8, 8(%rsi)
	jne	.L35357
.L35360:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L37598
.L37046:
	movq	32(%r12), %rsi
	jmp	.L35360
.L37598:
	cmpb	$115, %cl
	jne	.L35357
	movq	32(%rsi), %r10
	movq	8(%r12), %r11
	cmpq	%r11, 8(%r10)
	movq	%r10, %rsi
	je	.L35360
	jmp	.L35357
.L37592:
	movl	pedantic(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L35352
	cmpb	$51, 48(%r14)
	je	.L35352
	cmpq	$0, current_function_decl(%rip)
	je	.L35354
	movzbl	17(%r14), %edi
	andb	$24, %dil
	cmpb	$16, %dil
	je	.L37599
.L35354:
	movq	%r14, %rsi
.L35355:
	movq	%rsi, %r12
.L35352:
	movq	8(%r12), %rbx
	jmp	.L35348
.L37599:
	movq	104(%r14), %rax
	testq	%rax, %rax
	je	.L35354
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L35354
	testb	$2, 17(%rax)
	je	.L35354
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L35355
	jmp	.L35354
.L37591:
	movq	104(%r14), %r12
	jmp	.L35348
	.p2align 6,,7
.L35285:
	movzbl	16(%r14), %edx
	xorl	%r15d, %r15d
	movl	%r13d, %r8d
	cmpb	$116, %dl
	je	.L36847
	cmpb	$115, %dl
	je	.L37600
	movzbl	16(%r14), %ecx
.L35287:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L35293
	cmpb	$49, %al
	je	.L35293
	cmpb	$50, %al
	je	.L35293
	cmpb	$101, %al
	je	.L35293
.L35292:
	cmpl	$23, %r8d
	je	.L37601
	cmpl	$18, %r8d
	jne	.L35379
	movzbl	%cl, %r8d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r8), %eax
	movq	8(%rdi), %r13
	cmpb	$114, %al
	je	.L35298
	cmpb	$100, %al
	je	.L35298
.L35297:
	movzbl	17(%rdi), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %esi
	shrb	$4, %r10b
	shrb	$3, %sil
	andl	%r10d, %r9d
	andl	$1, %esi
	movzbl	62(%rdi), %r10d
	movzbl	16(%rdi), %edi
	addl	%esi, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	movl	%r10d, %ebx
	shrb	$5, %bl
	andl	$1, %ebx
	sall	$2, %ebx
	orl	%ebx, %r9d
	cmpb	$20, %dil
	je	.L37602
.L35301:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L35300
	testl	%edx, %edx
	jne	.L35300
	testl	%r11d, %r11d
	je	.L35299
.L35300:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%ebx, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L37603
.L35303:
	leal	0(,%rcx,8), %edi
	orl	%edi, %esi
	movq	%r13, %rdi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L35299:
	cmpb	$41, %cl
	je	.L37604
	cmpb	$47, %cl
	je	.L37605
	xorl	%ebx, %ebx
	testl	%r15d, %r15d
	je	.L37606
.L35342:
	movl	flag_isoc99(%rip), %r15d
	testl	%r15d, %r15d
	jne	.L35343
	testl	%ebx, %ebx
	je	.L35379
.L35343:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L37607
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L37234
.L37607:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L37144
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %ecx
	andb	$1, %cl
	addb	%cl, %cl
	andb	$-4, %r12b
	orb	%cl, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L37143
.L37606:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L35342
.L37605:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r15d
	movq	%r13, %rax
	cmpl	$23, %r15d
	je	.L35307
	cmpl	$18, %r15d
	je	.L35307
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L37608
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L35310
	cmpb	$34, %dl
	je	.L37609
.L35310:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L37044
	cmpb	$115, %dl
	je	.L37610
.L35319:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L35324
	cmpb	$49, %al
	je	.L35324
	cmpb	$50, %al
	je	.L35324
	cmpb	$101, %al
	je	.L35324
.L35323:
	cmpl	$10, %r15d
	je	.L37611
	cmpb	$39, %dl
	je	.L37612
.L35332:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L35337
	testb	$32, 17(%r13)
	je	.L35338
	movl	flag_traditional(%rip), %r8d
	testl	%r8d, %r8d
	jne	.L35339
	movzwl	60(%r13), %r10d
	movq	integer_types+40(%rip), %r13
	movzwl	60(%r13), %r11d
	andl	$511, %r10d
	andl	$511, %r11d
	cmpl	%r11d, %r10d
	je	.L35339
.L35338:
	movq	integer_types+40(%rip), %rdi
.L37142:
	movq	%rbx, %rsi
	call	convert
.L35308:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L37152
.L35339:
	movq	integer_types+48(%rip), %rdi
	jmp	.L37142
.L35337:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L35340
	movl	flag_allow_single_precision(%rip), %esi
	testl	%esi, %esi
	jne	.L35340
	movq	global_trees+192(%rip), %r9
	cmpq	%r9, 128(%r13)
	je	.L37613
.L35340:
	cmpl	$5, %r15d
	je	.L37614
	movq	%rbx, %rax
	jmp	.L35308
.L37614:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L35308
.L37613:
	movq	global_trees+200(%rip), %rdi
	jmp	.L37142
.L37612:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L35332
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%rdi), %esi
	movq	40(%rdx), %rdi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L35332
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	je	.L35338
	testb	$32, 17(%r13)
	jne	.L35339
	jmp	.L35338
.L37611:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r15d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r15d, %r15d
	jne	.L35331
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L35330
.L35331:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L35330:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L37142
.L35324:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L35323
.L37610:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %rax
	cmpq	%rax, 8(%rsi)
	jne	.L35319
.L35322:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L37615
.L37044:
	movq	32(%rbx), %rsi
	jmp	.L35322
.L37615:
	cmpb	$115, %dl
	jne	.L35319
	movq	32(%rsi), %r9
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%r9)
	movq	%r9, %rsi
	je	.L35322
	jmp	.L35319
.L37609:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L35314
	cmpb	$51, 48(%rbx)
	je	.L35314
	cmpq	$0, current_function_decl(%rip)
	je	.L35316
	movzbl	17(%rbx), %r8d
	andb	$24, %r8b
	cmpb	$16, %r8b
	je	.L37616
.L35316:
	movq	%rbx, %rsi
.L35317:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L35314:
	movq	%rax, %r13
	jmp	.L35310
.L37616:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L35316
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L35316
	testb	$2, 17(%rax)
	je	.L35316
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L35317
	jmp	.L35316
.L37608:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L35310
.L35307:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L35308
.L37604:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L37234
.L37603:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L35303
.L37602:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L35301
.L35298:
	movzbl	17(%r12), %r10d
	movl	$1, %r11d
	movl	%r10d, %edx
	shrb	$3, %r10b
	shrb	$4, %dl
	andl	%r10d, %r11d
	andl	$1, %edx
	jmp	.L35297
.L37601:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L37152
.L35293:
	movl	24(%r14), %eax
	movl	%eax, 24(%r12)
	jmp	.L35292
.L37600:
	movq	32(%r14), %r9
	cmpq	%rdi, 8(%r9)
	je	.L36847
	movl	$115, %ecx
	jmp	.L35287
.L36847:
	movq	32(%r14), %rsi
	movl	%edx, %ecx
.L35291:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r15d
	cmpb	$116, %cl
	jne	.L37617
	movq	32(%r12), %rsi
	jmp	.L35291
.L37617:
	cmpb	$115, %cl
	jne	.L35287
	movq	32(%rsi), %rsi
	movq	8(%r12), %rbx
	cmpq	%rbx, 8(%rsi)
	je	.L35291
	jmp	.L35287
.L37590:
	movq	-96(%rbp), %rcx
	cmpb	$18, 16(%rcx)
	jne	.L35283
	movq	8(%rcx), %r10
	cmpb	$6, 16(%r10)
	jne	.L35283
	jmp	.L37039
.L37562:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC169, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r14
	xorl	%r12d, %r12d
	cmpq	%r14, %r8
	movq	%r8, %rbx
	movq	%r14, %r13
	jae	.L36843
.L35262:
	cmpl	$3, (%rbx)
	je	.L37618
	movq	8(%rbx), %rdi
	movq	%r8, -376(%rbp)
	call	strlen
	movq	-376(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L35258:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L35262
.L36843:
	movslq	%r12d,%r15
	movq	%r8, %r12
	addq	$16, %r15
	andq	$-16, %r15
	subq	%r15, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L36876
.L35276:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L37619
	cmpl	$2, %eax
	je	.L37620
.L35270:
	movq	8(%r12), %r13
	movzbl	(%r13), %edi
	leaq	1(%r13), %rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	je	.L35266
.L35275:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L35275
.L35266:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L35276
	jmp	.L36876
.L37620:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L35270
.L37619:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L35266
.L37618:
	addl	$25, %r12d
	jmp	.L35258
	.p2align 6,,7
.L37436:
	movq	constructor_fields(%rip), %rax
	testq	%rax, %rax
	je	.L37621
	movq	8(%rax), %rax
	cmpq	global_trees(%rip), %rax
	movq	%rax, -216(%rbp)
	je	.L34640
	movq	128(%rax), %r10
	movq	%r10, -216(%rbp)
.L34640:
	movl	warn_traditional(%rip), %eax
	movq	-216(%rbp), %rsi
	testl	%eax, %eax
	movzbl	16(%rsi), %ebx
	je	.L34641
	movl	in_system_header(%rip), %edi
	testl	%edi, %edi
	jne	.L34641
	movl	constructor_designated(%rip), %r8d
	testl	%r8d, %r8d
	jne	.L34641
	testq	%r14, %r14
	je	.L34642
	movq	%r14, %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L37622
.L34641:
	testq	%r14, %r14
	je	.L34647
	cmpl	$18, %ebx
	je	.L37623
.L34643:
	testq	%r14, %r14
	je	.L34647
	movl	constructor_no_implicit(%rip), %ecx
	testl	%ecx, %ecx
	jne	.L34644
	cmpq	global_trees(%rip), %r14
	je	.L34644
	movq	8(%r14), %rdx
	movq	-216(%rbp), %r15
	cmpq	%r15, 128(%rdx)
	je	.L34644
	cmpl	$20, %ebx
	je	.L34940
	cmpl	$18, %ebx
	je	.L34940
	cmpl	$21, %ebx
	je	.L34940
.L34644:
	testq	%r14, %r14
	je	.L34647
	movq	constructor_fields(%rip), %rbx
	movl	$.LC159, %r12d
	movq	72(%rbx), %rax
	testq	%rax, %rax
	je	.L34649
	movq	32(%rax), %r12
.L34649:
	movq	spelling(%rip), %rdx
	movq	spelling_base(%rip), %rdi
	movl	spelling_size(%rip), %eax
	movq	%rdx, %r13
	subq	%rdi, %r13
	movq	%r13, %rbx
	shrq	$4, %rbx
	cmpl	%eax, %ebx
	jl	.L34650
	addl	$10, %eax
	testq	%rdi, %rdi
	movl	%eax, spelling_size(%rip)
	jne	.L34651
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L37108:
	movslq	%ebx,%rdx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rdx
	addq	spelling_base(%rip), %rdx
	movq	%rdx, spelling(%rip)
.L34650:
	movq	constructor_fields(%rip), %rsi
	movq	%r12, 8(%rdx)
	movl	$2, (%rdx)
	addq	$16, %rdx
	movq	%r14, %r12
	movq	%rdx, spelling(%rip)
	movq	%rsi, -232(%rbp)
	movq	8(%r14), %rdi
	movzbl	16(%rdi), %eax
	movq	%rdi, %rdx
	cmpb	$23, %al
	je	.L34655
	cmpb	$18, %al
	je	.L37624
.L37017:
	movq	global_trees(%rip), %r8
.L34654:
	cmpb	$-86, 16(%r12)
	je	.L37625
.L34753:
	cmpq	%r8, %r12
	je	.L37626
	testb	$2, 17(%r12)
	jne	.L34756
	movl	$0, constructor_constant(%rip)
.L34755:
	movl	require_constant_value(%rip), %ecx
	testl	%ecx, %ecx
	je	.L34760
	testb	$2, 17(%r12)
	je	.L37627
.L34760:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L37628
.L34785:
	cmpq	$0, -232(%rbp)
	je	.L34787
	movq	-232(%rbp), %rbx
	movq	8(%rbx), %rax
	cmpq	global_trees(%rip), %rax
	je	.L34789
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L37629
.L34787:
	movq	-216(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%r12, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -224(%rbp)
	je	.L37630
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L37631
.L34791:
	cmpb	$20, 16(%rdi)
	je	.L37632
.L34812:
	cmpb	$21, 16(%rdi)
	je	.L37633
.L34811:
	cmpq	$0, -232(%rbp)
	je	.L34879
	movq	-232(%rbp), %rdx
	cmpb	$25, 16(%rdx)
	je	.L37634
.L34879:
	movq	constructor_elements(%rip), %rdx
	movq	-232(%rbp), %rdi
	movq	-224(%rbp), %rsi
	call	tree_cons
	movq	%rax, constructor_elements(%rip)
	movq	constructor_type(%rip), %rax
	movq	%rax, %rdx
	movzbl	16(%rax), %eax
	cmpb	$18, %al
	je	.L37635
	cmpb	$20, %al
	je	.L37636
	cmpb	$21, 16(%rdx)
	je	.L37637
.L34881:
	movl	$1, %r15d
	testl	%r15d, %r15d
	je	.L34789
	movq	constructor_pending_elts(%rip), %rbx
.L34891:
	xorl	%r15d, %r15d
	testq	%rbx, %rbx
	je	.L34893
.L34927:
	movq	constructor_type(%rip), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$18, %al
	je	.L37638
	subb	$20, %al
	cmpb	$1, %al
	ja	.L34892
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L34893
	call	bit_position
	movq	32(%rbx), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L34913
	movq	32(%rbx), %r8
	movq	40(%rbx), %rdi
	movq	%r8, constructor_unfilled_fields(%rip)
	movq	8(%r8), %rsi
	movq	%r8, %rdx
.L37124:
	xorl	%ecx, %ecx
	call	output_init_element
.L34892:
	testq	%rbx, %rbx
	jne	.L34927
.L34893:
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L34789
	testq	%r15, %r15
	je	.L34789
	movq	constructor_type(%rip), %r10
	movzbl	16(%r10), %edx
	leal	-20(%rdx), %r11d
	cmpb	$1, %r11b
	jbe	.L37639
	cmpb	$18, %dl
	jne	.L34891
	movq	%r15, constructor_unfilled_index(%rip)
	jmp	.L34891
.L37639:
	movq	%r15, constructor_unfilled_fields(%rip)
	jmp	.L34891
	.p2align 6,,7
.L34789:
	movslq	constructor_depth(%rip),%rdx
	salq	$4, %rdx
	addq	spelling_base(%rip), %rdx
	movq	%rdx, spelling(%rip)
	jmp	.L35589
.L34913:
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L34915
.L37227:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.L34916
.L37123:
	movq	%rax, %rbx
	jmp	.L34892
.L34916:
	movq	32(%rbx), %r15
	jmp	.L34893
	.p2align 6,,7
.L34915:
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L37123
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L34922
	cmpq	%rbx, 8(%rax)
	je	.L34925
.L34922:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L34893
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
.L37228:
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L34892
	jmp	.L34916
	.p2align 6,,7
.L34925:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L34922
	cmpq	%rbx, 8(%rax)
	je	.L34925
	jmp	.L34922
	.p2align 6,,7
.L37638:
	movq	32(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L34896
	movq	constructor_type(%rip), %r12
	movq	40(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rdx
	movq	8(%r12), %rsi
	jmp	.L37124
.L34896:
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rbx), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L37227
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L37123
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L34905
	cmpq	%rbx, 8(%rax)
	je	.L34908
.L34905:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L34893
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	jmp	.L37228
	.p2align 6,,7
.L34908:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L34905
	cmpq	%rbx, 8(%rax)
	je	.L34908
	jmp	.L34905
.L37637:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L34881
.L37636:
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L34881
	testb	$2, 53(%rax)
	je	.L34881
	cmpq	$0, 72(%rax)
	jne	.L34881
.L34887:
	movq	constructor_unfilled_fields(%rip), %r13
	movq	(%r13), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L34881
	testb	$2, 53(%rax)
	je	.L34881
	cmpq	$0, 72(%rax)
	jne	.L34881
	jmp	.L34887
.L37635:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L34881
.L37634:
	movq	%rdx, %rdi
	call	copy_node
	movq	%rax, -232(%rbp)
	jmp	.L34879
.L37633:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L34811
	movq	32(%rax), %r8
	testb	$1, 17(%r8)
	jne	.L37640
.L34854:
	movq	$0, constructor_elements(%rip)
	jmp	.L34811
.L37640:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r11
	xorl	%r12d, %r12d
	cmpq	%r11, %r8
	movq	%r8, %rbx
	movq	%r11, %r13
	jae	.L36803
.L34861:
	cmpl	$3, (%rbx)
	je	.L37641
	movq	8(%rbx), %rdi
	movq	%r8, -376(%rbp)
	call	strlen
	movq	-376(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L34857:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L34861
.L36803:
	movslq	%r12d,%rdx
	movq	%r8, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L36805
.L34875:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L37642
	cmpl	$2, %eax
	je	.L37643
.L34869:
	movq	8(%r12), %r9
	movzbl	(%r9), %r10d
	leaq	1(%r9), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L34865
.L34874:
	movzbl	(%rcx), %esi
	incq	%rbx
	incq	%rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	jne	.L34874
.L34865:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L34875
.L36805:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	je	.L34854
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L34854
.L37643:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L34869
.L37642:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L34865
.L37641:
	addl	$25, %r12d
	jmp	.L34857
.L37632:
	movl	constructor_incremental(%rip), %ecx
	testl	%ecx, %ecx
	je	.L34814
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, -232(%rbp)
	je	.L34812
	testq	%rax, %rax
	jne	.L34815
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L34822
.L36797:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L37644
.L34842:
	cmpb	$18, 16(%rdi)
	je	.L37645
.L34848:
	movl	$0, constructor_incremental(%rip)
.L34814:
	movq	-232(%rbp), %rdi
	movq	-224(%rbp), %rsi
	call	add_pending_init
	jmp	.L34789
.L37645:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L37646
	movq	global_trees+136(%rip), %rax
.L37122:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L34848
.L37646:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L37122
.L37644:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L34848
	testb	$2, 53(%rax)
	je	.L34848
	cmpq	$0, 72(%rax)
	jne	.L34848
.L34828:
	movq	constructor_unfilled_fields(%rip), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L34848
	testb	$2, 53(%rax)
	je	.L34848
	cmpq	$0, 72(%rax)
	jne	.L34848
	jmp	.L34828
.L34822:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L34822
	movq	constructor_type(%rip), %rdi
	jmp	.L36797
.L34815:
	movq	-232(%rbp), %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r12
	call	bit_position
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L34814
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L34835
	cmpb	$18, %al
	jne	.L34814
.L34835:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L34841
.L36800:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L34842
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L34848
	testb	$2, 53(%rax)
	je	.L34848
	cmpq	$0, 72(%rax)
	jne	.L34848
.L34847:
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L34848
	testb	$2, 53(%rax)
	je	.L34848
	cmpq	$0, 72(%rax)
	jne	.L34848
	jmp	.L34847
.L34841:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L34841
	movq	constructor_type(%rip), %rdi
	jmp	.L36800
.L37631:
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L34814
	movq	-232(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L37025
	movl	constructor_incremental(%rip), %esi
	testl	%esi, %esi
	je	.L34814
	movq	-232(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L34814
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L34794
	cmpb	$18, %al
	jne	.L34814
.L34794:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L34800
.L36794:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L34842
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L34848
	testb	$2, 53(%rax)
	je	.L34848
	cmpq	$0, 72(%rax)
	jne	.L34848
.L34806:
	movq	constructor_unfilled_fields(%rip), %r13
	movq	(%r13), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L34848
	testb	$2, 53(%rax)
	je	.L34848
	cmpq	$0, 72(%rax)
	jne	.L34848
	jmp	.L34806
.L34800:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L34800
	movq	constructor_type(%rip), %rdi
	jmp	.L36794
.L37025:
	movq	constructor_type(%rip), %rdi
	jmp	.L34791
.L37630:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L34789
.L37629:
	call	integer_zerop
	testl	%eax, %eax
	je	.L34787
	movq	constructor_type(%rip), %r10
	cmpb	$18, 16(%r10)
	je	.L34789
	movq	-232(%rbp), %r9
	cmpq	$0, (%r9)
	jne	.L34789
	jmp	.L34787
.L37628:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L34785
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L34785
.L37627:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r15
	xorl	%r12d, %r12d
	cmpq	%r15, %r8
	movq	%r8, %rbx
	movq	%r15, %r13
	jae	.L36789
.L34767:
	cmpl	$3, (%rbx)
	je	.L37647
	movq	8(%rbx), %rdi
	movq	%r8, -376(%rbp)
	call	strlen
	movq	-376(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L34763:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L34767
.L36789:
	movslq	%r12d,%rdi
	movq	%r8, %r12
	addq	$16, %rdi
	andq	$-16, %rdi
	subq	%rdi, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L36791
.L34781:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L37648
	cmpl	$2, %eax
	je	.L37649
.L34775:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r8d
	leaq	1(%rdx), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L34771
.L34780:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L34780
.L34771:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L34781
.L36791:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	jne	.L37650
.L34784:
	movq	global_trees(%rip), %r12
	jmp	.L34785
.L37650:
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L34784
.L37649:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L34775
.L37648:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L34771
.L37647:
	addl	$25, %r12d
	jmp	.L34763
.L34756:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L34759
	movq	constructor_type(%rip), %rsi
	movzbl	16(%rsi), %r9d
	subb	$20, %r9b
	cmpb	$1, %r9b
	ja	.L34755
	movq	-232(%rbp), %r13
	testb	$2, 53(%r13)
	je	.L34755
	cmpb	$25, 16(%r12)
	je	.L34755
.L34759:
	movl	$0, constructor_simple(%rip)
	jmp	.L34755
.L37626:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L34755
.L37625:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L34753
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L34753
	movl	$1, %ebx
	testl	%ebx, %ebx
	je	.L34753
	movq	32(%r12), %r10
	movq	32(%r10), %r11
	movq	104(%r11), %r12
	jmp	.L34753
.L37624:
	cmpb	$29, 16(%r14)
	je	.L37651
.L34656:
	movq	-216(%rbp), %rax
	movq	128(%rdx), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L37017
	movq	8(%r14), %rdi
.L34655:
	movzbl	16(%rdi), %r13d
	movq	%rdi, %rbx
	cmpl	$23, %r13d
	je	.L34658
	cmpl	$18, %r13d
	je	.L34658
	movzbl	16(%r14), %eax
	cmpb	$32, %al
	je	.L37652
	movl	optimize(%rip), %r8d
	testl	%r8d, %r8d
	je	.L34721
	cmpb	$34, %al
	je	.L37653
.L34721:
	movzbl	16(%r12), %ecx
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L37024
	cmpb	$115, %cl
	je	.L37654
.L34730:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L34735
	cmpb	$49, %al
	je	.L34735
	cmpb	$50, %al
	je	.L34735
	cmpb	$101, %al
	je	.L34735
.L34734:
	cmpl	$10, %r13d
	je	.L37655
	cmpb	$39, %cl
	je	.L37656
.L34743:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L34748
	testb	$32, 17(%rbx)
	je	.L34749
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L34750
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%rbx), %edi
	movzwl	60(%rdx), %r8d
	andl	$511, %edi
	andl	$511, %r8d
	cmpl	%r8d, %edi
	je	.L34750
.L34749:
	movq	integer_types+40(%rip), %rdi
.L37225:
	movq	%r12, %rsi
.L37226:
	call	convert
.L37119:
	movq	%rax, %rbx
.L37110:
	movq	global_trees(%rip), %r8
.L34719:
	movq	%rbx, %r12
	jmp	.L34654
.L34750:
	movq	integer_types+48(%rip), %rdi
	jmp	.L37225
.L34748:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L34751
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L34751
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%rbx)
	je	.L37657
.L34751:
	cmpl	$5, %r13d
	je	.L37658
.L34752:
	movq	%r12, %rbx
	jmp	.L37110
.L37658:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L37111:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L34719
.L37657:
	movq	global_trees+200(%rip), %rdi
	jmp	.L37225
.L37656:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L34743
	movq	integer_types+40(%rip), %rcx
	movq	40(%rdx), %rdi
	movzwl	60(%rcx), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L34743
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L34749
	testb	$32, 17(%rbx)
	jne	.L34750
	jmp	.L34749
.L37655:
	movq	integer_types+40(%rip), %r15
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%r15), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L34742
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L34741
.L34742:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L34741:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L37225
.L34735:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L34734
.L37654:
	movq	32(%r12), %rsi
	movq	8(%r12), %r11
	cmpq	%r11, 8(%rsi)
	jne	.L34730
.L34733:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L37659
.L37024:
	movq	32(%r12), %rsi
	jmp	.L34733
.L37659:
	cmpb	$115, %cl
	jne	.L34730
	movq	32(%rsi), %r9
	movq	8(%r12), %r10
	cmpq	%r10, 8(%r9)
	movq	%r9, %rsi
	je	.L34733
	jmp	.L34730
.L37653:
	movl	pedantic(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L34725
	cmpb	$51, 48(%r14)
	je	.L34725
	cmpq	$0, current_function_decl(%rip)
	je	.L34727
	movzbl	17(%r14), %edi
	andb	$24, %dil
	cmpb	$16, %dil
	je	.L37660
.L34727:
	movq	%r14, %rsi
.L34728:
	movq	%rsi, %r12
.L34725:
	movq	8(%r12), %rbx
	jmp	.L34721
.L37660:
	movq	104(%r14), %rax
	testq	%rax, %rax
	je	.L34727
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L34727
	testb	$2, 17(%rax)
	je	.L34727
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L34728
	jmp	.L34727
.L37652:
	movq	104(%r14), %r12
	jmp	.L34721
.L34658:
	movzbl	16(%r14), %edx
	xorl	%r15d, %r15d
	movl	%r13d, %r8d
	cmpb	$116, %dl
	je	.L36785
	cmpb	$115, %dl
	je	.L37661
	movzbl	16(%r14), %ecx
.L34660:
	movzbl	%cl, %edx 
	movzbl	tree_code_type(%rdx), %eax
	cmpb	$60, %al
	je	.L34666
	cmpb	$49, %al
	je	.L34666
	cmpb	$50, %al
	je	.L34666
	cmpb	$101, %al
	je	.L34666
.L34665:
	cmpl	$23, %r8d
	je	.L37662
	cmpl	$18, %r8d
	jne	.L34752
	movzbl	%cl, %r8d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r8), %eax
	movq	8(%rdi), %r13
	cmpb	$114, %al
	je	.L34671
	cmpb	$100, %al
	je	.L34671
.L34670:
	movzbl	17(%rdi), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %ebx
	shrb	$3, %r10b
	shrb	$4, %bl
	andl	$1, %r10d
	andl	%ebx, %r9d
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rdi), %r10d
	movzbl	16(%rdi), %edi
	movl	%r10d, %esi
	shrb	$5, %sil
	andl	$1, %esi
	sall	$2, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	cmpb	$20, %dil
	je	.L37663
.L34674:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L34673
	testl	%edx, %edx
	jne	.L34673
	testl	%r11d, %r11d
	je	.L34672
.L34673:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%ebx, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L37664
.L34676:
	leal	0(,%rcx,8), %r8d
	leal	(%r11,%r11), %edi
	orl	%r8d, %esi
	orl	%edx, %esi
	orl	%edi, %esi
	movq	%r13, %rdi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L34672:
	cmpb	$41, %cl
	je	.L37665
	cmpb	$47, %cl
	je	.L37666
	xorl	%ebx, %ebx
	testl	%r15d, %r15d
	je	.L37667
.L34715:
	movl	flag_isoc99(%rip), %r15d
	testl	%r15d, %r15d
	jne	.L34716
	testl	%ebx, %ebx
	je	.L34752
.L34716:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L37668
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L37226
.L37668:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L37111
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %ecx
	andb	$1, %cl
	addb	%cl, %cl
	andb	$-4, %r12b
	orb	%cl, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L37110
.L37667:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L34715
.L37666:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r15d
	movq	%r13, %rax
	cmpl	$23, %r15d
	je	.L34680
	cmpl	$18, %r15d
	je	.L34680
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L37669
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L34683
	cmpb	$34, %dl
	je	.L37670
.L34683:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L37022
	cmpb	$115, %dl
	je	.L37671
.L34692:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L34697
	cmpb	$49, %al
	je	.L34697
	cmpb	$50, %al
	je	.L34697
	cmpb	$101, %al
	je	.L34697
.L34696:
	cmpl	$10, %r15d
	je	.L37672
	cmpb	$39, %dl
	je	.L37673
.L34705:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L34710
	testb	$32, 17(%r13)
	je	.L34711
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L34712
	movzwl	60(%r13), %r10d
	movq	integer_types+40(%rip), %r13
	movzwl	60(%r13), %r11d
	andl	$511, %r10d
	andl	$511, %r11d
	cmpl	%r11d, %r10d
	je	.L34712
.L34711:
	movq	integer_types+40(%rip), %rdi
.L37109:
	movq	%rbx, %rsi
	call	convert
.L34681:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L37119
.L34712:
	movq	integer_types+48(%rip), %rdi
	jmp	.L37109
.L34710:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L34713
	movl	flag_allow_single_precision(%rip), %esi
	testl	%esi, %esi
	jne	.L34713
	movq	global_trees+192(%rip), %r9
	cmpq	%r9, 128(%r13)
	je	.L37674
.L34713:
	cmpl	$5, %r15d
	je	.L37675
	movq	%rbx, %rax
	jmp	.L34681
.L37675:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L34681
.L37674:
	movq	global_trees+200(%rip), %rdi
	jmp	.L37109
.L37673:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L34705
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%rdi), %esi
	movq	40(%rdx), %rdi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L34705
	movl	flag_traditional(%rip), %r8d
	testl	%r8d, %r8d
	je	.L34711
	testb	$32, 17(%r13)
	jne	.L34712
	jmp	.L34711
.L37672:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r15d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r15d, %r15d
	jne	.L34704
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L34703
.L34704:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L34703:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L37109
.L34697:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L34696
.L37671:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %rax
	cmpq	%rax, 8(%rsi)
	jne	.L34692
.L34695:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L37676
.L37022:
	movq	32(%rbx), %rsi
	jmp	.L34695
.L37676:
	cmpb	$115, %dl
	jne	.L34692
	movq	32(%rsi), %r9
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%r9)
	movq	%r9, %rsi
	je	.L34695
	jmp	.L34692
.L37670:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L34687
	cmpb	$51, 48(%rbx)
	je	.L34687
	cmpq	$0, current_function_decl(%rip)
	je	.L34689
	movzbl	17(%rbx), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L37677
.L34689:
	movq	%rbx, %rsi
.L34690:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L34687:
	movq	%rax, %r13
	jmp	.L34683
.L37677:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L34689
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L34689
	testb	$2, 17(%rax)
	je	.L34689
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L34690
	jmp	.L34689
.L37669:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L34683
.L34680:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L34681
.L37665:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L37226
.L37664:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L34676
.L37663:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L34674
.L34671:
	movzbl	17(%r12), %ebx
	movl	$1, %r11d
	movl	%ebx, %edx
	shrb	$3, %bl
	shrb	$4, %dl
	andl	%ebx, %r11d
	andl	$1, %edx
	jmp	.L34670
.L37662:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L37119
.L34666:
	movl	24(%r14), %eax
	movl	%eax, 24(%r12)
	jmp	.L34665
.L37661:
	movq	32(%r14), %r9
	cmpq	%rdi, 8(%r9)
	je	.L36785
	movl	$115, %ecx
	jmp	.L34660
.L36785:
	movq	32(%r14), %rsi
	movl	%edx, %ecx
.L34664:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r15d
	cmpb	$116, %cl
	jne	.L37678
	movq	32(%r12), %rsi
	jmp	.L34664
.L37678:
	cmpb	$115, %cl
	jne	.L34660
	movq	32(%rsi), %rsi
	movq	8(%r12), %r11
	cmpq	%r11, 8(%rsi)
	je	.L34664
	jmp	.L34660
.L37651:
	movq	-216(%rbp), %rcx
	cmpb	$18, 16(%rcx)
	jne	.L34656
	movq	8(%rcx), %rdi
	cmpb	$6, 16(%rdi)
	jne	.L34656
	jmp	.L37017
.L34651:
	movslq	%eax,%rsi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L37108
	.p2align 6,,7
.L34647:
	movq	constructor_fields(%rip), %rsi
	movq	40(%rsi), %rbx
	movq	(%rsi), %r9
	movq	%rbx, constructor_bit_index(%rip)
	movq	%r9, constructor_unfilled_fields(%rip)
	jmp	.L35589
.L37623:
	movq	-216(%rbp), %r11
	movq	8(%r11), %r9
	cmpb	$6, 16(%r9)
	jne	.L34643
	movl	-188(%rbp), %r12d
	testl	%r12d, %r12d
	je	.L34643
	movq	-56(%rbp), %r14
	jmp	.L34644
	.p2align 6,,7
.L37622:
	movq	%r14, %rdi
	call	real_zerop
	testl	%eax, %eax
	jne	.L34641
.L34642:
	movl	$.LC167, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L34641
.L37621:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC166, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r14
	xorl	%r12d, %r12d
	cmpq	%r14, %r8
	movq	%r8, %rbx
	movq	%r14, %r13
	jae	.L36781
.L34622:
	cmpl	$3, (%rbx)
	je	.L37679
	movq	8(%rbx), %rdi
	movq	%r8, -376(%rbp)
	call	strlen
	movq	-376(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L34618:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L34622
.L36781:
	movslq	%r12d,%rcx
	movq	%r8, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L36876
.L34636:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L37680
	cmpl	$2, %eax
	je	.L37681
.L34630:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r15d
	leaq	1(%rdx), %rcx
	testb	%r15b, %r15b
	movb	%r15b, (%rbx)
	je	.L34626
.L34635:
	movzbl	(%rcx), %r13d
	incq	%rbx
	incq	%rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	jne	.L34635
.L34626:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L34636
	jmp	.L36876
	.p2align 6,,7
.L37681:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L34630
.L37680:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L34626
	.p2align 6,,7
.L37679:
	addl	$25, %r12d
	jmp	.L34618
	.p2align 6,,7
.L37435:
	movq	constructor_fields(%rip), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rdi
	je	.L37682
	movq	global_trees(%rip), %r12
	movq	8(%rcx), %r15
	cmpq	%r12, %r15
	movq	%r12, %rsi
	je	.L34284
	movq	128(%r15), %r15
.L34284:
	movzbl	16(%r15), %edx
	cmpl	$18, %edx
	je	.L37683
.L34285:
	testq	%r14, %r14
	je	.L34314
	cmpl	$18, %edx
	je	.L37684
.L34310:
	testq	%r14, %r14
	je	.L34314
	movl	constructor_no_implicit(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L34311
	cmpq	%rsi, %r14
	je	.L34311
	movq	8(%r14), %rsi
	cmpq	%r15, 128(%rsi)
	je	.L34311
	cmpl	$20, %edx
	je	.L34940
	cmpl	$18, %edx
	je	.L34940
	cmpl	$21, %edx
	je	.L34940
.L34311:
	testq	%r14, %r14
	je	.L34314
	movq	72(%rdi), %rax
	movl	$.LC159, %r12d
	testq	%rax, %rax
	je	.L34316
	movq	32(%rax), %r12
.L34316:
	movq	spelling(%rip), %rdx
	movq	spelling_base(%rip), %rdi
	movl	spelling_size(%rip), %eax
	movq	%rdx, %rcx
	subq	%rdi, %rcx
	movq	%rcx, %rbx
	shrq	$4, %rbx
	cmpl	%eax, %ebx
	jl	.L34317
	addl	$10, %eax
	testq	%rdi, %rdi
	movl	%eax, spelling_size(%rip)
	jne	.L34318
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L37091:
	movslq	%ebx,%rdx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rdx
	addq	spelling_base(%rip), %rdx
	movq	%rdx, spelling(%rip)
.L34317:
	movq	constructor_fields(%rip), %rax
	movq	%r12, 8(%rdx)
	movl	$2, (%rdx)
	addq	$16, %rdx
	movq	%r14, %r12
	movq	%rdx, spelling(%rip)
	movq	%rax, -208(%rbp)
	movq	8(%r14), %rdi
	movzbl	16(%rdi), %eax
	movq	%rdi, %rdx
	cmpb	$23, %al
	je	.L34322
	cmpb	$18, %al
	je	.L37685
.L37006:
	movq	global_trees(%rip), %r8
.L34321:
	cmpb	$-86, 16(%r12)
	je	.L37686
.L34420:
	cmpq	%r8, %r12
	je	.L37687
	testb	$2, 17(%r12)
	jne	.L34423
	movl	$0, constructor_constant(%rip)
.L34422:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L34427
	testb	$2, 17(%r12)
	je	.L37688
.L34427:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L37689
.L34452:
	cmpq	$0, -208(%rbp)
	je	.L34454
	movq	-208(%rbp), %rbx
	movq	8(%rbx), %rax
	cmpq	global_trees(%rip), %rax
	je	.L34456
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L37690
.L34454:
	movl	require_constant_value(%rip), %edx
	movl	require_constant_elements(%rip), %ecx
	movq	%r15, %rdi
	movq	%r12, %rsi
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -200(%rbp)
	je	.L37691
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L37692
.L34458:
	cmpb	$20, 16(%rdi)
	je	.L37693
.L34479:
	cmpb	$21, 16(%rdi)
	je	.L37694
.L34478:
	cmpq	$0, -208(%rbp)
	je	.L34546
	movq	-208(%rbp), %rsi
	cmpb	$25, 16(%rsi)
	je	.L37695
.L34546:
	movq	-208(%rbp), %rdi
	movq	-200(%rbp), %rsi
	movq	constructor_elements(%rip), %rdx
	call	tree_cons
	movq	constructor_type(%rip), %rbx
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%rbx), %eax
	cmpb	$18, %al
	je	.L37696
	cmpb	$20, %al
	je	.L37697
	cmpb	$21, 16(%rbx)
	je	.L37698
.L34548:
	movl	$1, %r15d
	testl	%r15d, %r15d
	je	.L34456
	movq	constructor_pending_elts(%rip), %rbx
.L34558:
	xorl	%r15d, %r15d
	testq	%rbx, %rbx
	je	.L34560
.L34594:
	movq	constructor_type(%rip), %rdx
	movzbl	16(%rdx), %eax
	cmpb	$18, %al
	je	.L37699
	subb	$20, %al
	cmpb	$1, %al
	ja	.L34559
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L34560
	call	bit_position
	movq	32(%rbx), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L34580
	movq	32(%rbx), %r10
	movq	40(%rbx), %rdi
	movq	%r10, constructor_unfilled_fields(%rip)
	movq	8(%r10), %rsi
	movq	%r10, %rdx
.L37107:
	xorl	%ecx, %ecx
	call	output_init_element
.L34559:
	testq	%rbx, %rbx
	jne	.L34594
.L34560:
	xorl	%esi, %esi
	testl	%esi, %esi
	je	.L34456
	testq	%r15, %r15
	je	.L34456
	movq	constructor_type(%rip), %r8
	movzbl	16(%r8), %edx
	leal	-20(%rdx), %edi
	cmpb	$1, %dil
	jbe	.L37700
	cmpb	$18, %dl
	jne	.L34558
	movq	%r15, constructor_unfilled_index(%rip)
	jmp	.L34558
.L37700:
	movq	%r15, constructor_unfilled_fields(%rip)
	jmp	.L34558
	.p2align 6,,7
.L34456:
	movslq	constructor_depth(%rip),%r9
	movq	constructor_fields(%rip), %rcx
	salq	$4, %r9
	addq	spelling_base(%rip), %r9
	movq	%r9, spelling(%rip)
.L34601:
	movq	(%rcx), %rcx
	testq	%rcx, %rcx
	movq	%rcx, constructor_fields(%rip)
	je	.L34613
	testb	$2, 53(%rcx)
	je	.L34613
	cmpq	$0, 72(%rcx)
	jne	.L34613
.L34612:
	movq	constructor_fields(%rip), %r12
	movq	(%r12), %rcx
	testq	%rcx, %rcx
	movq	%rcx, constructor_fields(%rip)
	je	.L34613
	testb	$2, 53(%rcx)
	je	.L34613
	cmpq	$0, 72(%rcx)
	jne	.L34613
	jmp	.L34612
.L34580:
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L34582
.L37223:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.L34583
.L37106:
	movq	%rax, %rbx
	jmp	.L34559
.L34583:
	movq	32(%rbx), %r15
	jmp	.L34560
	.p2align 6,,7
.L34582:
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L37106
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L34589
	cmpq	%rbx, 8(%rax)
	je	.L34592
.L34589:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L34560
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
.L37224:
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L34559
	jmp	.L34583
	.p2align 6,,7
.L34592:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L34589
	cmpq	%rbx, 8(%rax)
	je	.L34592
	jmp	.L34589
	.p2align 6,,7
.L37699:
	movq	32(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L34563
	movq	constructor_type(%rip), %r13
	movq	40(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rdx
	movq	8(%r13), %rsi
	jmp	.L37107
.L34563:
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rbx), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L37223
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L37106
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L34572
	cmpq	%rbx, 8(%rax)
	je	.L34575
.L34572:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L34560
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	jmp	.L37224
	.p2align 6,,7
.L34575:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L34572
	cmpq	%rbx, 8(%rax)
	je	.L34575
	jmp	.L34572
.L37698:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L34548
.L37697:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L34548
	testb	$2, 53(%rax)
	je	.L34548
	cmpq	$0, 72(%rax)
	jne	.L34548
.L34554:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L34548
	testb	$2, 53(%rax)
	je	.L34548
	cmpq	$0, 72(%rax)
	jne	.L34548
	jmp	.L34554
.L37696:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L34548
.L37695:
	movq	%rsi, %rdi
	call	copy_node
	movq	%rax, -208(%rbp)
	jmp	.L34546
.L37694:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L34478
	movq	32(%rax), %rdi
	testb	$1, 17(%rdi)
	jne	.L37701
.L34521:
	movq	$0, constructor_elements(%rip)
	jmp	.L34478
.L37701:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r8
	movq	%r8, %rbx
	movq	%rax, %r13
	jae	.L36770
.L34528:
	cmpl	$3, (%rbx)
	je	.L37702
	movq	8(%rbx), %rdi
	movq	%r8, -376(%rbp)
	call	strlen
	movq	-376(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L34524:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L34528
.L36770:
	movslq	%r12d,%r10
	movq	%r8, %r12
	addq	$16, %r10
	andq	$-16, %r10
	subq	%r10, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L36772
.L34542:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L37703
	cmpl	$2, %eax
	je	.L37704
.L34536:
	movq	8(%r12), %r9
	movzbl	(%r9), %r8d
	leaq	1(%r9), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L34532
.L34541:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L34541
.L34532:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L34542
.L36772:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	je	.L34521
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L34521
.L37704:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L34536
.L37703:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L34532
.L37702:
	addl	$25, %r12d
	jmp	.L34524
.L37693:
	movl	constructor_incremental(%rip), %r11d
	testl	%r11d, %r11d
	je	.L34481
	movq	constructor_unfilled_fields(%rip), %rax
	cmpq	%rax, -208(%rbp)
	je	.L34479
	testq	%rax, %rax
	jne	.L34482
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L34489
.L36764:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L37705
.L34509:
	cmpb	$18, 16(%rdi)
	je	.L37706
.L34515:
	movl	$0, constructor_incremental(%rip)
.L34481:
	movq	-208(%rbp), %rdi
	movq	-200(%rbp), %rsi
	call	add_pending_init
	jmp	.L34456
.L37706:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L37707
	movq	global_trees+136(%rip), %rax
.L37105:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L34515
.L37707:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L37105
.L37705:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L34515
	testb	$2, 53(%rax)
	je	.L34515
	cmpq	$0, 72(%rax)
	jne	.L34515
.L34495:
	movq	constructor_unfilled_fields(%rip), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L34515
	testb	$2, 53(%rax)
	je	.L34515
	cmpq	$0, 72(%rax)
	jne	.L34515
	jmp	.L34495
.L34489:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L34489
	movq	constructor_type(%rip), %rdi
	jmp	.L36764
.L34482:
	movq	-208(%rbp), %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L34481
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L34502
	cmpb	$18, %al
	jne	.L34481
.L34502:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L34508
.L36767:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L34509
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L34515
	testb	$2, 53(%rax)
	je	.L34515
	cmpq	$0, 72(%rax)
	jne	.L34515
.L34514:
	movq	constructor_unfilled_fields(%rip), %rsi
	movq	(%rsi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L34515
	testb	$2, 53(%rax)
	je	.L34515
	cmpq	$0, 72(%rax)
	jne	.L34515
	jmp	.L34514
.L34508:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L34508
	movq	constructor_type(%rip), %rdi
	jmp	.L36767
.L37692:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L34481
	movq	-208(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L37014
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L34481
	movq	-208(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L34481
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L34461
	cmpb	$18, %al
	jne	.L34481
.L34461:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L34467
.L36761:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L34509
	movq	24(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L34515
	testb	$2, 53(%rax)
	je	.L34515
	cmpq	$0, 72(%rax)
	jne	.L34515
.L34473:
	movq	constructor_unfilled_fields(%rip), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L34515
	testb	$2, 53(%rax)
	je	.L34515
	cmpq	$0, 72(%rax)
	jne	.L34515
	jmp	.L34473
.L34467:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L34467
	movq	constructor_type(%rip), %rdi
	jmp	.L36761
.L37014:
	movq	constructor_type(%rip), %rdi
	jmp	.L34458
.L37691:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L34456
.L37690:
	call	integer_zerop
	testl	%eax, %eax
	je	.L34454
	movq	constructor_type(%rip), %rcx
	cmpb	$18, 16(%rcx)
	je	.L34456
	movq	-208(%rbp), %r13
	cmpq	$0, (%r13)
	jne	.L34456
	jmp	.L34454
.L37689:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L34452
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L34452
.L37688:
	movl	$.LC146, %esi
	xorl	%eax, %eax
	movl	$.LC42, %edi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rsi
	xorl	%r12d, %r12d
	cmpq	%rsi, %r8
	movq	%r8, %rbx
	movq	%rsi, %r13
	jae	.L36756
.L34434:
	cmpl	$3, (%rbx)
	je	.L37708
	movq	8(%rbx), %rdi
	movq	%r8, -376(%rbp)
	call	strlen
	movq	-376(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L34430:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L34434
.L36756:
	movslq	%r12d,%rdi
	movq	%r8, %r12
	addq	$16, %rdi
	andq	$-16, %rdi
	subq	%rdi, %rsp
	cmpq	%r13, %r8
	movq	%rsp, -72(%rbp)
	movq	%rsp, %rbx
	jae	.L36758
.L34448:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L37709
	cmpl	$2, %eax
	je	.L37710
.L34442:
	movq	8(%r12), %r10
	movzbl	(%r10), %r8d
	leaq	1(%r10), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L34438
.L34447:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L34447
.L34438:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L34448
.L36758:
	movb	$0, (%rbx)
	movq	-72(%rbp), %r9
	cmpb	$0, (%r9)
	jne	.L37711
.L34451:
	movq	global_trees(%rip), %r12
	jmp	.L34452
.L37711:
	movl	$.LC142, %edi
	movq	%r9, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L34451
.L37710:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L34442
.L37709:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L34438
.L37708:
	addl	$25, %r12d
	jmp	.L34430
.L34423:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L34426
	movq	constructor_type(%rip), %rdx
	movzbl	16(%rdx), %r11d
	subb	$20, %r11b
	cmpb	$1, %r11b
	ja	.L34422
	movq	-208(%rbp), %rax
	testb	$2, 53(%rax)
	je	.L34422
	cmpb	$25, 16(%r12)
	je	.L34422
.L34426:
	movl	$0, constructor_simple(%rip)
	jmp	.L34422
.L37687:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L34422
.L37686:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L34420
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L34420
	movl	$1, %r9d
	testl	%r9d, %r9d
	je	.L34420
	movq	32(%r12), %r13
	movq	32(%r13), %rcx
	movq	104(%rcx), %r12
	jmp	.L34420
.L37685:
	cmpb	$29, 16(%r14)
	je	.L37712
.L34323:
	movq	128(%rdx), %rdi
	movq	128(%r15), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L37006
	movq	8(%r14), %rdi
.L34322:
	movzbl	16(%rdi), %r13d
	movq	%rdi, %rbx
	cmpl	$23, %r13d
	je	.L34325
	cmpl	$18, %r13d
	je	.L34325
	movzbl	16(%r14), %eax
	cmpb	$32, %al
	je	.L37713
	movl	optimize(%rip), %esi
	testl	%esi, %esi
	je	.L34388
	cmpb	$34, %al
	je	.L37714
.L34388:
	movzbl	16(%r12), %ecx
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L37013
	cmpb	$115, %cl
	je	.L37715
.L34397:
	movzbl	%cl, %r9d 
	movzbl	tree_code_type(%r9), %eax
	cmpb	$60, %al
	je	.L34402
	cmpb	$49, %al
	je	.L34402
	cmpb	$50, %al
	je	.L34402
	cmpb	$101, %al
	je	.L34402
.L34401:
	cmpl	$10, %r13d
	je	.L37716
	cmpb	$39, %cl
	je	.L37717
.L34410:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L34415
	testb	$32, 17(%rbx)
	je	.L34416
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L34417
	movzwl	60(%rbx), %edi
	movq	integer_types+40(%rip), %rbx
	movzwl	60(%rbx), %esi
	andl	$511, %edi
	andl	$511, %esi
	cmpl	%esi, %edi
	je	.L34417
.L34416:
	movq	integer_types+40(%rip), %rdi
.L37221:
	movq	%r12, %rsi
.L37222:
	call	convert
.L37102:
	movq	%rax, %rbx
.L37093:
	movq	global_trees(%rip), %r8
.L34386:
	movq	%rbx, %r12
	jmp	.L34321
.L34417:
	movq	integer_types+48(%rip), %rdi
	jmp	.L37221
.L34415:
	movl	flag_traditional(%rip), %r8d
	testl	%r8d, %r8d
	je	.L34418
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L34418
	movq	global_trees+192(%rip), %r10
	cmpq	%r10, 128(%rbx)
	je	.L37718
.L34418:
	cmpl	$5, %r13d
	je	.L37719
.L34419:
	movq	%r12, %rbx
	jmp	.L37093
.L37719:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L37094:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L34386
.L37718:
	movq	global_trees+200(%rip), %rdi
	jmp	.L37221
.L37717:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L34410
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L34410
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	je	.L34416
	testb	$32, 17(%rbx)
	jne	.L34417
	jmp	.L34416
.L37716:
	movq	integer_types+40(%rip), %r13
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %ecx
	movzwl	60(%r13), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%ecx, %ecx
	jne	.L34409
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L34408
.L34409:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L34408:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L37221
.L34402:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L34401
.L37715:
	movq	32(%r12), %rsi
	movq	8(%r12), %rdi
	cmpq	%rdi, 8(%rsi)
	jne	.L34397
.L34400:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L37720
.L37013:
	movq	32(%r12), %rsi
	jmp	.L34400
.L37720:
	cmpb	$115, %cl
	jne	.L34397
	movq	32(%rsi), %r10
	movq	8(%r12), %r8
	cmpq	%r8, 8(%r10)
	movq	%r10, %rsi
	je	.L34400
	jmp	.L34397
.L37714:
	movl	pedantic(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L34392
	cmpb	$51, 48(%r14)
	je	.L34392
	cmpq	$0, current_function_decl(%rip)
	je	.L34394
	movzbl	17(%r14), %r11d
	andb	$24, %r11b
	cmpb	$16, %r11b
	je	.L37721
.L34394:
	movq	%r14, %rsi
.L34395:
	movq	%rsi, %r12
.L34392:
	movq	8(%r12), %rbx
	jmp	.L34388
.L37721:
	movq	104(%r14), %rax
	testq	%rax, %rax
	je	.L34394
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L34394
	testb	$2, 17(%rax)
	je	.L34394
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L34395
	jmp	.L34394
.L37713:
	movq	104(%r14), %r12
	jmp	.L34388
.L34325:
	movl	$0, -192(%rbp)
	movl	%r13d, %r8d
	movzbl	16(%r14), %edx
	cmpb	$116, %dl
	je	.L36752
	cmpb	$115, %dl
	je	.L37722
	movzbl	16(%r14), %ecx
.L34327:
	movzbl	%cl, %r10d 
	movzbl	tree_code_type(%r10), %eax
	cmpb	$60, %al
	je	.L34333
	cmpb	$49, %al
	je	.L34333
	cmpb	$50, %al
	je	.L34333
	cmpb	$101, %al
	je	.L34333
.L34332:
	cmpl	$23, %r8d
	je	.L37723
	cmpl	$18, %r8d
	jne	.L34419
	movzbl	%cl, %r8d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r8), %eax
	movq	8(%rdi), %r13
	cmpb	$114, %al
	je	.L34338
	cmpb	$100, %al
	je	.L34338
.L34337:
	movzbl	17(%rdi), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %esi
	shrb	$3, %r10b
	shrb	$4, %sil
	andl	$1, %r10d
	andl	%esi, %r9d
	xorl	%esi, %esi
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rdi), %r10d
	movzbl	16(%rdi), %edi
	movl	%r10d, %ebx
	shrb	$5, %bl
	andl	$1, %ebx
	sall	$2, %ebx
	orl	%ebx, %r9d
	cmpb	$20, %dil
	je	.L37724
.L34341:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L34340
	testl	%edx, %edx
	jne	.L34340
	testl	%r11d, %r11d
	je	.L34339
.L34340:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%ebx, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L37725
.L34343:
	leal	0(,%rcx,8), %edi
	orl	%edi, %esi
	movq	%r13, %rdi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L34339:
	cmpb	$41, %cl
	je	.L37726
	cmpb	$47, %cl
	je	.L37727
	movl	-192(%rbp), %eax
	xorl	%ebx, %ebx
	testl	%eax, %eax
	je	.L37728
.L34382:
	movl	flag_isoc99(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L34383
	testl	%ebx, %ebx
	je	.L34419
.L34383:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L37729
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L37222
.L37729:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L37094
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %r9d
	andb	$1, %r9b
	addb	%r9b, %r9b
	andb	$-4, %r12b
	orb	%r9b, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L37093
.L37728:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L34382
.L37727:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %edx
	movq	%r13, %rax
	cmpl	$23, %edx
	movl	%edx, -60(%rbp)
	je	.L34347
	cmpl	$18, %edx
	je	.L34347
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L37730
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L34350
	cmpb	$34, %dl
	je	.L37731
.L34350:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L37011
	cmpb	$115, %dl
	je	.L37732
.L34359:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L34364
	cmpb	$49, %al
	je	.L34364
	cmpb	$50, %al
	je	.L34364
	cmpb	$101, %al
	je	.L34364
.L34363:
	cmpl	$10, -60(%rbp)
	je	.L37733
	cmpb	$39, %dl
	je	.L37734
.L34372:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L34377
	testb	$32, 17(%r13)
	je	.L34378
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L34379
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r13), %r8d
	movzwl	60(%rdx), %r13d
	andl	$511, %r8d
	andl	$511, %r13d
	cmpl	%r13d, %r8d
	je	.L34379
.L34378:
	movq	integer_types+40(%rip), %rdi
.L37092:
	movq	%rbx, %rsi
	call	convert
.L34348:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L37102
.L34379:
	movq	integer_types+48(%rip), %rdi
	jmp	.L37092
.L34377:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L34380
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L34380
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%r13)
	je	.L37735
.L34380:
	cmpl	$5, -60(%rbp)
	je	.L37736
	movq	%rbx, %rax
	jmp	.L34348
.L37736:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L34348
.L37735:
	movq	global_trees+200(%rip), %rdi
	jmp	.L37092
.L37734:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L34372
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%rdi), %esi
	movq	40(%rdx), %rdi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L34372
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L34378
	testb	$32, 17(%r13)
	jne	.L34379
	jmp	.L34378
.L37733:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r11d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r11d, %r11d
	jne	.L34371
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L34370
.L34371:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L34370:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L37092
.L34364:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L34363
.L37732:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %rax
	cmpq	%rax, 8(%rsi)
	jne	.L34359
.L34362:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L37737
.L37011:
	movq	32(%rbx), %rsi
	jmp	.L34362
.L37737:
	cmpb	$115, %dl
	jne	.L34359
	movq	32(%rsi), %r9
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%r9)
	movq	%r9, %rsi
	je	.L34362
	jmp	.L34359
.L37731:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L34354
	cmpb	$51, 48(%rbx)
	je	.L34354
	cmpq	$0, current_function_decl(%rip)
	je	.L34356
	movzbl	17(%rbx), %r8d
	andb	$24, %r8b
	cmpb	$16, %r8b
	je	.L37738
.L34356:
	movq	%rbx, %rsi
.L34357:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L34354:
	movq	%rax, %r13
	jmp	.L34350
.L37738:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L34356
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L34356
	testb	$2, 17(%rax)
	je	.L34356
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L34357
	jmp	.L34356
.L37730:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L34350
.L34347:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L34348
.L37726:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L37222
.L37725:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L34343
.L37724:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L34341
.L34338:
	movzbl	17(%r12), %esi
	movl	$1, %r11d
	movl	%esi, %edx
	shrb	$3, %sil
	shrb	$4, %dl
	andl	%esi, %r11d
	andl	$1, %edx
	jmp	.L34337
.L37723:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L37102
.L34333:
	movl	24(%r14), %eax
	movl	%eax, 24(%r12)
	jmp	.L34332
.L37722:
	movq	32(%r14), %rbx
	cmpq	%rdi, 8(%rbx)
	je	.L36752
	movl	$115, %ecx
	jmp	.L34327
.L36752:
	movq	32(%r14), %rsi
	movl	%edx, %ecx
.L34331:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	cmovne	-192(%rbp), %eax
	movl	%eax, -192(%rbp)
	movzbl	16(%rsi), %ecx
	cmpb	$116, %cl
	jne	.L37739
	movq	32(%r12), %rsi
	jmp	.L34331
.L37739:
	cmpb	$115, %cl
	jne	.L34327
	movq	32(%rsi), %rsi
	movq	8(%r12), %r9
	cmpq	%r9, 8(%rsi)
	je	.L34331
	jmp	.L34327
.L37712:
	cmpb	$18, 16(%r15)
	jne	.L34323
	movq	8(%r15), %rdi
	cmpb	$6, 16(%rdi)
	jne	.L34323
	jmp	.L37006
.L34318:
	movslq	%eax,%rsi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L37091
	.p2align 6,,7
.L34314:
	cmpq	$0, 40(%rdi)
	jne	.L37740
.L34602:
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L34601
	testb	$2, 53(%rax)
	je	.L34601
	cmpq	$0, 72(%rax)
	jne	.L34601
.L34607:
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L34601
	testb	$2, 53(%rax)
	je	.L34601
	cmpq	$0, 72(%rax)
	je	.L34607
	jmp	.L34601
	.p2align 6,,7
.L37740:
	call	bit_position
	movq	constructor_fields(%rip), %r11
	movl	$59, %edi
	movq	%rax, %rsi
	movq	40(%r11), %rdx
	call	size_binop
	movq	constructor_fields(%rip), %rcx
	movq	%rax, constructor_bit_index(%rip)
	jmp	.L34602
	.p2align 6,,7
.L37684:
	movq	8(%r15), %r11
	cmpb	$6, 16(%r11)
	jne	.L34310
	movl	-188(%rbp), %r13d
	testl	%r13d, %r13d
	je	.L34310
	movq	-56(%rbp), %r14
	jmp	.L34311
	.p2align 6,,7
.L37683:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	jne	.L34285
	cmpq	$0, 32(%r15)
	jne	.L34285
	cmpq	$0, (%rcx)
	jne	.L34285
	movl	$.LC42, %edi
	xorl	%eax, %eax
	movl	$.LC164, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rdi
	xorl	%r12d, %r12d
	cmpq	%rdi, %r8
	movq	%r8, %rbx
	movq	%rdi, %r13
	jae	.L36748
.L34292:
	cmpl	$3, (%rbx)
	je	.L37741
	movq	8(%rbx), %rdi
	movq	%r8, -376(%rbp)
	call	strlen
	movq	-376(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L34288:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L34292
.L36748:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L36750
.L34306:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L37742
	cmpl	$2, %eax
	je	.L37743
.L34300:
	movq	8(%r12), %r9
	movzbl	(%r9), %r8d
	leaq	1(%r9), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L34296
.L34305:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L34305
.L34296:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L34306
.L36750:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	je	.L34256
	movl	$.LC142, %edi
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L34256
.L37743:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L34300
.L37742:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L34296
.L37741:
	addl	$25, %r12d
	jmp	.L34288
.L37682:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC163, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r14
	xorl	%r12d, %r12d
	cmpq	%r14, %r8
	movq	%r8, %rbx
	movq	%r14, %r13
	jae	.L36743
.L34266:
	cmpl	$3, (%rbx)
	je	.L37744
	movq	8(%rbx), %rdi
	movq	%r8, -376(%rbp)
	call	strlen
	movq	-376(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L34262:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L34266
.L36743:
	movslq	%r12d,%r15
	movq	%r8, %r12
	addq	$16, %r15
	andq	$-16, %r15
	subq	%r15, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L36876
.L34280:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L37745
	cmpl	$2, %eax
	je	.L37746
.L34274:
	movq	8(%r12), %rsi
	movzbl	(%rsi), %r13d
	leaq	1(%rsi), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L34270
.L34279:
	movzbl	(%rcx), %edx
	incq	%rbx
	incq	%rcx
	testb	%dl, %dl
	movb	%dl, (%rbx)
	jne	.L34279
.L34270:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L34280
	jmp	.L36876
	.p2align 6,,7
.L37746:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L34274
.L37745:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L34270
	.p2align 6,,7
.L37744:
	addl	$25, %r12d
	jmp	.L34262
	.p2align 6,,7
.L37434:
	movl	require_constant_value(%rip), %r9d
	testl	%r9d, %r9d
	je	.L34254
	movl	flag_isoc99(%rip), %r10d
	testl	%r10d, %r10d
	je	.L35891
	jmp	.L34254
	.p2align 6,,7
.L37433:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC163, %esi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %r14
	xorl	%r12d, %r12d
	cmpq	%r14, %r8
	movq	%r8, %rbx
	movq	%r14, %r13
	jae	.L36737
.L34224:
	cmpl	$3, (%rbx)
	je	.L37747
	movq	8(%rbx), %rdi
	movq	%r8, -376(%rbp)
	call	strlen
	movq	-376(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L34220:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L34224
.L36737:
	movslq	%r12d,%r15
	movq	%r8, %r12
	addq	$16, %r15
	andq	$-16, %r15
	subq	%r15, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r14
	movq	%rsp, %rbx
	jae	.L36739
.L34238:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L37748
	cmpl	$2, %eax
	je	.L37749
.L34232:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %esi
	leaq	1(%rdx), %rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	je	.L34228
	.p2align 4,,7
.L34237:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L34237
.L34228:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L34238
.L36739:
	movb	$0, (%rbx)
	cmpb	$0, (%r14)
	jne	.L37750
	movq	constructor_stack(%rip), %rbx
	movq	%rbx, -368(%rbp)
	jmp	.L34185
.L37750:
	xorl	%eax, %eax
	movl	$.LC142, %edi
	movq	%r14, %rsi
	call	error
	movq	constructor_stack(%rip), %rax
	movq	%rax, -368(%rbp)
	jmp	.L34185
.L37749:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L34232
.L37748:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L34228
.L37747:
	addl	$25, %r12d
	jmp	.L34220
.L37432:
	movq	8(%rax), %rdx
	cmpb	$6, 16(%rdx)
	jne	.L34190
	movq	constructor_unfilled_index(%rip), %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L34190
	movq	constructor_stack(%rip), %rcx
	cmpq	$0, 88(%rcx)
	movq	%rcx, -368(%rbp)
	jne	.L37751
.L34191:
	movq	-368(%rbp), %r12
	movq	%r14, 88(%r12)
	jmp	.L34185
.L37751:
	movl	$.LC162, %esi
	xorl	%eax, %eax
	movl	$.LC42, %edi
	call	error
	movq	spelling_base(%rip), %r8
	movq	spelling(%rip), %rsi
	xorl	%r12d, %r12d
	cmpq	%rsi, %r8
	movq	%r8, %rbx
	movq	%rsi, %r13
	jae	.L36732
.L34198:
	cmpl	$3, (%rbx)
	je	.L37752
	movq	8(%rbx), %rdi
	movq	%r8, -376(%rbp)
	call	strlen
	movq	-376(%rbp), %r8
	leal	1(%rax,%r12), %r12d
.L34194:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L34198
.L36732:
	movslq	%r12d,%rbx
	movq	%r8, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r8
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L36734
.L34212:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L37753
	cmpl	$2, %eax
	je	.L37754
.L34206:
	movq	8(%r12), %r8
	movzbl	(%r8), %edi
	leaq	1(%r8), %rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	je	.L34202
.L34211:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L34211
.L34202:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L34212
.L36734:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	jne	.L37755
	movq	constructor_stack(%rip), %r11
	movq	%r11, -368(%rbp)
	jmp	.L34191
.L37755:
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	error
	movq	constructor_stack(%rip), %r10
	movq	%r10, -368(%rbp)
	jmp	.L34191
	.p2align 6,,7
.L37754:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L34206
.L37753:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L34202
	.p2align 6,,7
.L37752:
	addl	$25, %r12d
	jmp	.L34194
	.p2align 6,,7
.L37000:
	movq	constructor_stack(%rip), %r12
	movq	%r12, -368(%rbp)
	jmp	.L34184
.LFE40:
.Lfe40:
	.size	pop_init_level,.Lfe40-pop_init_level
	.section	.rodata.str1.32
	.align 32
.LC186:
	.string	"nonconstant array index in initializer"
	.align 32
.LC184:
	.string	"array index in non-array initializer"
	.align 32
.LC188:
	.string	"empty index range in initializer"
	.align 32
.LC189:
	.string	"array index range in initializer exceeds array bounds"
	.align 32
.LC187:
	.string	"array index in initializer exceeds array bounds"
	.text
	.align 2
	.p2align 4,,15
.globl set_init_index
	.type	set_init_index,@function
set_init_index:
.LFB41:
	pushq	%rbp
.LCFI182:
	movq	%rsp, %rbp
.LCFI183:
	pushq	%r15
.LCFI184:
	pushq	%r14
.LCFI185:
	pushq	%r13
.LCFI186:
	pushq	%r12
.LCFI187:
	movq	%rsi, %r12
	pushq	%rbx
.LCFI188:
	movq	%rdi, %rbx
	movl	$1, %edi
	subq	$8, %rsp
.LCFI189:
	call	set_designator
	testl	%eax, %eax
	jne	.L39551
	movzbl	16(%rbx), %ecx
	movl	$1, designator_errorneous(%rip)
	leal	-114(%rcx), %edx
	cmpb	$2, %dl
	ja	.L39554
	movq	8(%rbx), %rdi
	movzbl	61(%rdi), %r8d
	movq	32(%rbx), %rdi
	movq	8(%rdi), %rdx
	andb	$-2, %r8b
	movzbl	61(%rdx), %esi
	andb	$-2, %sil
	cmpb	%sil, %r8b
	je	.L39557
.L39554:
	testq	%r12, %r12
	je	.L39558
	movzbl	16(%r12), %r15d
	subb	$114, %r15b
	cmpb	$2, %r15b
	ja	.L39558
	movq	8(%r12), %rsi
	movzbl	61(%rsi), %edi
	movq	32(%r12), %rsi
	movq	8(%rsi), %rdx
	andb	$-2, %dil
	movzbl	61(%rdx), %r8d
	andb	$-2, %r8b
	cmpb	%r8b, %dil
	je	.L39563
.L39558:
	cmpb	$25, %cl
	je	.L39564
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC186, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rcx
	xorl	%r12d, %r12d
	cmpq	%rcx, %r14
	movq	%r14, %rbx
	movq	%rcx, %r13
	jae	.L39729
	.p2align 4,,7
.L39571:
	cmpl	$3, (%rbx)
	je	.L39760
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L39567:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L39571
.L39729:
	movslq	%r12d,%rbx
	movq	%r14, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L39746
	.p2align 4,,7
.L39585:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L39761
	cmpl	$2, %eax
	je	.L39762
.L39579:
	movq	8(%r12), %rdi
	movzbl	(%rdi), %r8d
	leaq	1(%rdi), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L39575
	.p2align 4,,7
.L39584:
	movzbl	(%rcx), %edx
	incq	%rbx
	incq	%rcx
	testb	%dl, %dl
	movb	%dl, (%rbx)
	jne	.L39584
.L39575:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L39585
.L39746:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	jne	.L39763
.L39551:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
.L39763:
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L39551
.L39762:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L39579
.L39761:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L39575
.L39760:
	addl	$25, %r12d
	jmp	.L39567
.L39564:
	testq	%r12, %r12
	je	.L39590
	cmpb	$25, 16(%r12)
	je	.L39590
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC186, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r15
	xorl	%r12d, %r12d
	cmpq	%r15, %r14
	movq	%r14, %rbx
	movq	%r15, %r13
	jae	.L39734
.L39597:
	cmpl	$3, (%rbx)
	je	.L39764
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L39593:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L39597
.L39734:
	movslq	%r12d,%rsi
	movq	%r14, %r12
	addq	$16, %rsi
	andq	$-16, %rsi
	subq	%rsi, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L39746
.L39611:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L39765
	cmpl	$2, %eax
	je	.L39766
.L39605:
	movq	8(%r12), %r10
	movzbl	(%r10), %r9d
	leaq	1(%r10), %rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	je	.L39601
	.p2align 4,,7
.L39610:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L39610
.L39601:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L39611
	jmp	.L39746
.L39766:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L39605
.L39765:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L39601
.L39764:
	addl	$25, %r12d
	jmp	.L39593
.L39590:
	movq	constructor_type(%rip), %r13
	cmpb	$18, 16(%r13)
	je	.L39616
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC184, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rcx
	xorl	%r12d, %r12d
	cmpq	%rcx, %r14
	movq	%r14, %rbx
	movq	%rcx, %r13
	jae	.L39739
.L39623:
	cmpl	$3, (%rbx)
	je	.L39767
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L39619:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L39623
.L39739:
	movslq	%r12d,%rbx
	movq	%r14, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L39746
.L39637:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L39768
	cmpl	$2, %eax
	je	.L39769
.L39631:
	movq	8(%r12), %r8
	movzbl	(%r8), %r14d
	leaq	1(%r8), %rcx
	testb	%r14b, %r14b
	movb	%r14b, (%rbx)
	je	.L39627
	.p2align 4,,7
.L39636:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L39636
.L39627:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L39637
	jmp	.L39746
.L39769:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L39631
.L39768:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L39627
.L39767:
	addl	$25, %r12d
	jmp	.L39619
.L39616:
	movq	constructor_max_index(%rip), %rdi
	testq	%rdi, %rdi
	je	.L39642
	movq	%rbx, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L39770
.L39642:
	movq	sizetype_tab+24(%rip), %rdi
	movq	%rbx, %rsi
	call	convert
	testq	%r12, %r12
	movq	%rax, constructor_index(%rip)
	jne	.L39771
.L39668:
	incl	designator_depth(%rip)
	movl	$0, designator_errorneous(%rip)
	cmpq	$0, constructor_range_stack(%rip)
	jne	.L39723
	testq	%r12, %r12
	je	.L39551
.L39723:
	movl	$56, %edi
	call	ggc_alloc
	movq	constructor_stack(%rip), %r15
	movq	constructor_index(%rip), %r9
	movq	constructor_range_stack(%rip), %rcx
	movq	constructor_fields(%rip), %r10
	movq	%rax, %rdx
	movq	$0, (%rax)
	movq	%r12, 40(%rax)
	movq	%r9, 24(%rax)
	movq	%r9, 32(%rax)
	movq	%r15, 16(%rax)
	testq	%rcx, %rcx
	movq	%rcx, 8(%rax)
	movq	%r10, 48(%rax)
	je	.L39724
	movq	%rax, (%rcx)
.L39724:
	movq	%rdx, constructor_range_stack(%rip)
	jmp	.L39551
.L39771:
	movq	%rbx, %rdi
	movq	%r12, %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L39772
.L39721:
	xorl	%r12d, %r12d
	jmp	.L39668
.L39772:
	movq	%r12, %rdi
	movq	%rbx, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L39671
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC188, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r11
	xorl	%r12d, %r12d
	cmpq	%r11, %r14
	movq	%r14, %rbx
	movq	%r11, %r13
	jae	.L39749
.L39678:
	cmpl	$3, (%rbx)
	je	.L39773
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L39674:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L39678
.L39749:
	movslq	%r12d,%rcx
	movq	%r14, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L39756
.L39692:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L39774
	cmpl	$2, %eax
	je	.L39775
.L39686:
	movq	8(%r12), %r14
	movzbl	(%r14), %r13d
	leaq	1(%r14), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L39682
.L39691:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L39691
.L39682:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L39692
.L39756:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	je	.L39721
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L39721
.L39775:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L39686
.L39774:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L39682
.L39773:
	addl	$25, %r12d
	jmp	.L39674
.L39671:
	movq	sizetype_tab+24(%rip), %rdi
	movq	%r12, %rsi
	call	convert
	movq	constructor_max_index(%rip), %rdi
	movq	%rax, %r12
	testq	%rdi, %rdi
	je	.L39668
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L39668
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC189, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r13
	xorl	%r12d, %r12d
	cmpq	%r13, %r14
	movq	%r14, %rbx
	jae	.L39754
.L39704:
	cmpl	$3, (%rbx)
	je	.L39776
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L39700:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L39704
.L39754:
	movslq	%r12d,%rbx
	movq	%r14, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L39756
.L39718:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L39777
	cmpl	$2, %eax
	je	.L39778
.L39712:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %edi
	leaq	1(%rdx), %rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	je	.L39708
.L39717:
	movzbl	(%rcx), %esi
	incq	%rbx
	incq	%rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	jne	.L39717
.L39708:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L39718
	jmp	.L39756
	.p2align 6,,7
.L39778:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L39712
.L39777:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L39708
	.p2align 6,,7
.L39776:
	addl	$25, %r12d
	jmp	.L39700
	.p2align 6,,7
.L39770:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC187, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rdx
	xorl	%r12d, %r12d
	cmpq	%rdx, %r14
	movq	%r14, %rbx
	movq	%rdx, %r13
	jae	.L39744
.L39649:
	cmpl	$3, (%rbx)
	je	.L39779
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L39645:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L39649
.L39744:
	movslq	%r12d,%r15
	movq	%r14, %r12
	addq	$16, %r15
	andq	$-16, %r15
	subq	%r15, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L39746
.L39663:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L39780
	cmpl	$2, %eax
	je	.L39781
.L39657:
	movq	8(%r12), %r9
	movzbl	(%r9), %esi
	leaq	1(%r9), %rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	je	.L39653
.L39662:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L39662
.L39653:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L39663
	jmp	.L39746
.L39781:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L39657
.L39780:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L39653
.L39779:
	addl	$25, %r12d
	jmp	.L39645
	.p2align 6,,7
.L39563:
	movzbl	16(%rsi), %r9d
	movq	%rsi, %r12
	subb	$114, %r9b
	cmpb	$2, %r9b
	ja	.L39558
	movq	8(%rsi), %r14
	movq	32(%rsi), %rsi
	movq	8(%rsi), %r13
	movzbl	61(%r14), %r11d
	movzbl	61(%r13), %r10d
	andb	$-2, %r11b
	andb	$-2, %r10b
	cmpb	%r10b, %r11b
	je	.L39563
	jmp	.L39558
	.p2align 6,,7
.L39557:
	movzbl	16(%rdi), %ecx
	movq	%rdi, %rbx
	leal	-114(%rcx), %r9d
	cmpb	$2, %r9b
	ja	.L39554
	movq	8(%rdi), %r14
	movq	32(%rdi), %rdi
	movq	8(%rdi), %r13
	movzbl	61(%r14), %r11d
	movzbl	61(%r13), %r10d
	andb	$-2, %r11b
	andb	$-2, %r10b
	cmpb	%r10b, %r11b
	je	.L39557
	jmp	.L39554
.LFE41:
.Lfe41:
	.size	set_init_index,.Lfe41-set_init_index
	.section	.rodata.str1.32
	.align 32
.LC190:
	.string	"unknown field `%s' specified in initializer"
	.align 32
.LC185:
	.string	"field name not in record or union initializer"
	.text
	.align 2
	.p2align 4,,15
.globl set_init_label
	.type	set_init_label,@function
set_init_label:
.LFB42:
	pushq	%rbp
.LCFI190:
	movq	%rsp, %rbp
.LCFI191:
	pushq	%r15
.LCFI192:
	pushq	%r14
.LCFI193:
	pushq	%r13
.LCFI194:
	pushq	%r12
.LCFI195:
	pushq	%rbx
.LCFI196:
	movq	%rdi, %rbx
	xorl	%edi, %edi
	subq	$8, %rsp
.LCFI197:
	call	set_designator
	testl	%eax, %eax
	jne	.L39782
	movq	constructor_type(%rip), %rdx
	movl	$1, designator_errorneous(%rip)
	movzbl	16(%rdx), %ecx
	subb	$20, %cl
	cmpb	$1, %cl
	ja	.L39828
	movq	24(%rdx), %rax
	testq	%rax, %rax
	je	.L39826
	.p2align 4,,7
.L39814:
	cmpq	%rbx, 72(%rax)
	je	.L39810
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L39814
.L39826:
	movl	$.LC190, %edi
	movq	32(%rbx), %rsi
.L39827:
	xorl	%eax, %eax
	call	error
.L39782:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
.L39810:
	testq	%rax, %rax
	je	.L39826
	incl	designator_depth(%rip)
	movq	%rax, constructor_fields(%rip)
	movl	$0, designator_errorneous(%rip)
	cmpq	$0, constructor_range_stack(%rip)
	je	.L39782
	movl	$56, %edi
	call	ggc_alloc
	movq	constructor_stack(%rip), %rbx
	movq	constructor_index(%rip), %r9
	movq	constructor_range_stack(%rip), %rcx
	movq	constructor_fields(%rip), %r10
	movq	%rax, %rdx
	movq	$0, (%rax)
	movq	$0, 40(%rax)
	movq	%r9, 24(%rax)
	movq	%r9, 32(%rax)
	movq	%rbx, 16(%rax)
	testq	%rcx, %rcx
	movq	%rcx, 8(%rax)
	movq	%r10, 48(%rax)
	je	.L39818
	movq	%rax, (%rcx)
.L39818:
	movq	%rdx, constructor_range_stack(%rip)
	jmp	.L39782
	.p2align 6,,7
.L39828:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC185, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r13
	xorl	%r12d, %r12d
	cmpq	%r13, %r14
	movq	%r14, %rbx
	jae	.L39821
	.p2align 4,,7
.L39791:
	cmpl	$3, (%rbx)
	je	.L39829
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L39787:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L39791
.L39821:
	movslq	%r12d,%rdx
	movq	%r14, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L39823
	.p2align 4,,7
.L39805:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L39830
	cmpl	$2, %eax
	je	.L39831
.L39799:
	movq	8(%r12), %rdi
	movzbl	(%rdi), %esi
	leaq	1(%rdi), %rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	je	.L39795
	.p2align 4,,7
.L39804:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L39804
.L39795:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L39805
.L39823:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	je	.L39782
	movl	$.LC142, %edi
	movq	%r15, %rsi
	jmp	.L39827
.L39831:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L39799
.L39830:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L39795
.L39829:
	addl	$25, %r12d
	jmp	.L39787
.LFE42:
.Lfe42:
	.size	set_init_label,.Lfe42-set_init_label
	.align 2
	.p2align 4,,15
.globl process_init_element
	.type	process_init_element,@function
process_init_element:
.LFB43:
	pushq	%rbp
.LCFI198:
	movq	%rsp, %rbp
.LCFI199:
	pushq	%r15
.LCFI200:
	pushq	%r14
.LCFI201:
	pushq	%r13
.LCFI202:
	pushq	%r12
.LCFI203:
	movq	%rdi, %r12
	pushq	%rbx
.LCFI204:
	subq	$24, %rsp
.LCFI205:
	testq	%rdi, %rdi
	movl	$0, -60(%rbp)
	movq	%rdi, -48(%rbp)
	je	.L40540
	cmpb	$29, 16(%rdi)
	movl	$1, %eax
	cmovne	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.L40540:
	movl	-60(%rbp), %eax
	movl	$0, designator_depth(%rip)
	movl	$0, designator_errorneous(%rip)
	testl	%eax, %eax
	je	.L40541
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L40541
	cmpb	$18, 16(%rax)
	je	.L40896
.L40541:
	movq	constructor_stack(%rip), %rax
	cmpq	$0, 88(%rax)
	jne	.L40897
	movq	constructor_type(%rip), %rdx
	testq	%rdx, %rdx
	je	.L40539
	cmpb	$0, 106(%rax)
	je	.L40594
	.p2align 4,,7
.L40602:
	movzbl	16(%rdx), %r14d
	subb	$20, %r14b
	cmpb	$1, %r14b
	ja	.L40596
	cmpq	$0, constructor_fields(%rip)
	je	.L40600
.L40596:
	cmpb	$18, 16(%rdx)
	jne	.L40594
	movq	constructor_max_index(%rip), %rdi
	testq	%rdi, %rdi
	je	.L40600
	movq	constructor_index(%rip), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L40594
.L40600:
	movl	$1, %edi
	call	pop_init_level
	movq	%rax, %rdi
	call	process_init_element
	movq	constructor_stack(%rip), %r15
	cmpb	$0, 106(%r15)
	je	.L40594
	movq	constructor_type(%rip), %rdx
	jmp	.L40602
.L40594:
	cmpq	$0, constructor_range_stack(%rip)
	je	.L40842
	cmpb	$-86, 16(%r12)
	je	.L40898
.L40605:
	movq	%r12, %rdi
	call	save_expr
	movq	%rax, %r12
	.p2align 4,,7
.L40842:
	movq	constructor_type(%rip), %rsi
	cmpb	$20, 16(%rsi)
	je	.L40899
	movzbl	16(%rsi), %eax
	cmpb	$21, %al
	je	.L40900
	cmpb	$18, %al
	jne	.L40727
	movq	8(%rsi), %r13
	testq	%r12, %r12
	movq	128(%r13), %rbx
	movzbl	16(%rbx), %edx
	je	.L40729
	cmpl	$18, %edx
	je	.L40901
.L40728:
	testq	%r12, %r12
	je	.L40729
	movl	constructor_no_implicit(%rip), %esi
	testl	%esi, %esi
	jne	.L40729
	cmpq	global_trees(%rip), %r12
	je	.L40729
	movq	8(%r12), %rcx
	cmpq	%rbx, 128(%rcx)
	je	.L40729
	cmpl	$20, %edx
	je	.L40731
	cmpl	$18, %edx
	je	.L40731
	cmpl	$21, %edx
	jne	.L40729
.L40731:
	movl	$1, %edi
	call	push_init_level
	jmp	.L40842
.L40729:
	movq	constructor_max_index(%rip), %rdi
	testq	%rdi, %rdi
	jne	.L40902
.L40732:
	testq	%r12, %r12
	jne	.L40903
.L40791:
	movq	constructor_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	testq	%r12, %r12
	movq	%rax, constructor_index(%rip)
	jne	.L40684
	movq	%rax, constructor_unfilled_index(%rip)
.L40684:
	movq	constructor_range_stack(%rip), %r13
	testq	%r13, %r13
	je	.L40607
	xorl	%r14d, %r14d
	movq	constructor_stack(%rip), %rax
	movq	$0, constructor_range_stack(%rip)
	cmpq	16(%r13), %rax
	je	.L40887
	.p2align 4,,7
.L40826:
	cmpb	$0, 106(%rax)
	je	.L40904
	movl	$1, %edi
	call	pop_init_level
	movq	%rax, %rdi
	call	process_init_element
	movq	constructor_stack(%rip), %rax
	cmpq	16(%r13), %rax
	jne	.L40826
.L40887:
	movq	%r13, %rbx
	.p2align 4,,7
.L40827:
	movq	40(%rbx), %rsi
	testq	%rsi, %rsi
	je	.L40832
	movq	32(%rbx), %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L40905
.L40832:
	movq	constructor_stack(%rip), %r11
	cmpb	$0, 106(%r11)
	je	.L40906
	movl	$1, %edi
	call	pop_init_level
	movq	%rax, %rdi
	call	process_init_element
	movq	8(%rbx), %rbx
	jmp	.L40827
.L40906:
	movl	$.LC68, %edi
	movl	$6838, %esi
.L40895:
	movl	$.LC171, %edx
	call	fancy_abort
.L40905:
	movq	32(%rbx), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	40(%rbx), %rsi
	movq	%rax, %rdi
	movq	%rax, 32(%rbx)
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L40840
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmove	%eax, %r14d
	.p2align 4,,7
.L40840:
	movq	32(%rbx), %rax
	movq	48(%rbx), %rsi
	testl	%r14d, %r14d
	movq	%rax, constructor_index(%rip)
	movq	%rsi, constructor_fields(%rip)
	je	.L40837
	cmpq	$0, 40(%rbx)
	je	.L40837
	cmpq	24(%rbx), %rax
	je	.L40907
.L40837:
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	je	.L40835
	movl	$2, %edi
	call	push_init_level
	movq	40(%rbx), %rsi
	movq	constructor_stack(%rip), %r15
	testq	%rsi, %rsi
	movq	%r15, 16(%rbx)
	je	.L40840
	movq	32(%rbx), %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L40840
	movq	24(%rbx), %rdi
	movq	%rdi, 32(%rbx)
	jmp	.L40840
.L40835:
	testl	%r14d, %r14d
	jne	.L40842
	movq	%r13, constructor_range_stack(%rip)
	jmp	.L40842
	.p2align 6,,7
.L40907:
	xorl	%r14d, %r14d
	movq	$0, 8(%rbx)
	jmp	.L40837
.L40904:
	movl	$.LC68, %edi
	movl	$6830, %esi
	jmp	.L40895
.L40607:
	movq	$0, constructor_range_stack(%rip)
.L40539:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
.L40903:
	movq	constructor_index(%rip), %rdi
	xorl	%esi, %esi
	call	tree_low_cst
	movq	spelling_base(%rip), %rdi
	movq	spelling(%rip), %rdx
	movl	%eax, %r15d
	movl	spelling_size(%rip), %eax
	movq	%rdx, %r11
	subq	%rdi, %r11
	movq	%r11, %r13
	shrq	$4, %r13
	cmpl	%eax, %r13d
	jl	.L40759
	addl	$10, %eax
	testq	%rdi, %rdi
	movl	%eax, spelling_size(%rip)
	jne	.L40760
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L40892:
	movslq	%r13d,%rdx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rdx
	addq	spelling_base(%rip), %rdx
	movq	%rdx, spelling(%rip)
.L40759:
	movl	%r15d, 8(%rdx)
	movl	$3, (%rdx)
	movq	%rbx, %rsi
	addq	$16, %rdx
	movq	%r12, %rdi
	movl	$1, %ecx
	movq	%rdx, spelling(%rip)
	movq	constructor_index(%rip), %rdx
	call	output_init_element
	movslq	constructor_depth(%rip),%rbx
	salq	$4, %rbx
	addq	spelling_base(%rip), %rbx
	movq	%rbx, spelling(%rip)
	jmp	.L40791
.L40760:
	movslq	%eax,%rsi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L40892
.L40902:
	movq	constructor_index(%rip), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L40733
	movq	constructor_max_index(%rip), %rdi
	call	integer_all_onesp
	testl	%eax, %eax
	je	.L40732
.L40733:
	movl	$.LC42, %edi
	xorl	%eax, %eax
	movl	$.LC168, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rdi
	xorl	%r12d, %r12d
	cmpq	%rdi, %r14
	movq	%r14, %rbx
	movq	%rdi, %r13
	jae	.L40872
.L40740:
	cmpl	$3, (%rbx)
	je	.L40908
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L40736:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L40740
.L40872:
	movslq	%r12d,%rdx
	movq	%r14, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L40884
.L40754:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L40909
	cmpl	$2, %eax
	je	.L40910
.L40748:
	movq	8(%r12), %r9
	movzbl	(%r9), %r8d
	leaq	1(%r9), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L40744
.L40753:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L40753
.L40744:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L40754
.L40884:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	je	.L40607
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L40607
	.p2align 6,,7
.L40910:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L40748
.L40909:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L40744
.L40908:
	addl	$25, %r12d
	jmp	.L40736
	.p2align 6,,7
.L40901:
	movq	8(%rbx), %r14
	cmpb	$6, 16(%r14)
	jne	.L40728
	movl	-60(%rbp), %r15d
	testl	%r15d, %r15d
	je	.L40728
	movq	-48(%rbp), %r12
	jmp	.L40729
	.p2align 6,,7
.L40727:
	cmpb	$9, %al
	je	.L40911
	cmpq	$0, constructor_fields(%rip)
	je	.L40912
	testq	%r12, %r12
	jne	.L40913
.L40820:
	movq	$0, constructor_fields(%rip)
	jmp	.L40684
.L40913:
	movq	%r12, %rdi
	xorl	%edx, %edx
	movl	$1, %ecx
	call	output_init_element
	jmp	.L40820
.L40912:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC170, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r13
	xorl	%r12d, %r12d
	cmpq	%r13, %r14
	movq	%r14, %rbx
	jae	.L40882
.L40801:
	cmpl	$3, (%rbx)
	je	.L40914
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L40797:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L40801
.L40882:
	movslq	%r12d,%rcx
	movq	%r14, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L40884
.L40815:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L40915
	cmpl	$2, %eax
	je	.L40916
.L40809:
	movq	8(%r12), %r9
	movzbl	(%r9), %r8d
	leaq	1(%r9), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L40805
.L40814:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L40814
.L40805:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L40815
	jmp	.L40884
.L40916:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L40809
.L40915:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L40805
.L40914:
	addl	$25, %r12d
	jmp	.L40797
	.p2align 6,,7
.L40911:
	movq	8(%rsi), %r13
	movq	constructor_max_index(%rip), %rdi
	movq	constructor_index(%rip), %rsi
	movq	128(%r13), %rbx
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L40917
	testq	%r12, %r12
	je	.L40791
	movq	constructor_index(%rip), %rdx
	movq	%r12, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	call	output_init_element
	jmp	.L40791
.L40917:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC169, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r14
	movq	%r14, %rbx
	movq	%rax, %r13
	jae	.L40877
.L40773:
	cmpl	$3, (%rbx)
	je	.L40918
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L40769:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L40773
.L40877:
	movslq	%r12d,%r15
	movq	%r14, %r12
	addq	$16, %r15
	andq	$-16, %r15
	subq	%r15, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L40884
.L40787:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L40919
	cmpl	$2, %eax
	je	.L40920
.L40781:
	movq	8(%r12), %rdi
	movzbl	(%rdi), %r14d
	leaq	1(%rdi), %rcx
	testb	%r14b, %r14b
	movb	%r14b, (%rbx)
	je	.L40777
.L40786:
	movzbl	(%rcx), %edx
	incq	%rbx
	incq	%rcx
	testb	%dl, %dl
	movb	%dl, (%rbx)
	jne	.L40786
.L40777:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L40787
	jmp	.L40884
.L40920:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L40781
.L40919:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L40777
.L40918:
	addl	$25, %r12d
	jmp	.L40769
	.p2align 6,,7
.L40900:
	movq	constructor_fields(%rip), %rax
	testq	%rax, %rax
	je	.L40921
	movq	8(%rax), %r13
	cmpq	global_trees(%rip), %r13
	je	.L40711
	movq	128(%r13), %r13
.L40711:
	movl	warn_traditional(%rip), %eax
	movzbl	16(%r13), %ebx
	testl	%eax, %eax
	je	.L40712
	movl	in_system_header(%rip), %eax
	testl	%eax, %eax
	jne	.L40712
	movl	constructor_designated(%rip), %eax
	testl	%eax, %eax
	jne	.L40712
	testq	%r12, %r12
	je	.L40713
	movq	%r12, %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L40922
.L40712:
	testq	%r12, %r12
	je	.L40718
	cmpl	$18, %ebx
	je	.L40923
.L40714:
	testq	%r12, %r12
	je	.L40718
	movl	constructor_no_implicit(%rip), %esi
	testl	%esi, %esi
	jne	.L40715
	cmpq	global_trees(%rip), %r12
	je	.L40715
	movq	8(%r12), %rcx
	cmpq	%r13, 128(%rcx)
	je	.L40715
	cmpl	$20, %ebx
	je	.L40731
	cmpl	$18, %ebx
	je	.L40731
	cmpl	$21, %ebx
	je	.L40731
.L40715:
	testq	%r12, %r12
	je	.L40718
	movq	constructor_fields(%rip), %rdi
	movl	$.LC159, %r15d
	movq	72(%rdi), %rax
	testq	%rax, %rax
	je	.L40720
	movq	32(%rax), %r15
.L40720:
	movq	spelling(%rip), %rdx
	movq	spelling_base(%rip), %rdi
	movl	spelling_size(%rip), %eax
	movq	%rdx, %r8
	subq	%rdi, %r8
	movq	%r8, %rbx
	shrq	$4, %rbx
	cmpl	%eax, %ebx
	jl	.L40721
	addl	$10, %eax
	testq	%rdi, %rdi
	movl	%eax, spelling_size(%rip)
	jne	.L40722
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L40891:
	movslq	%ebx,%rdx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rdx
	addq	spelling_base(%rip), %rdx
	movq	%rdx, spelling(%rip)
.L40721:
	movq	%r15, 8(%rdx)
	movl	$2, (%rdx)
	movq	%r12, %rdi
	addq	$16, %rdx
	movq	%r13, %rsi
	movl	$1, %ecx
	movq	%rdx, spelling(%rip)
	movq	constructor_fields(%rip), %rdx
	call	output_init_element
	movslq	constructor_depth(%rip),%r10
	salq	$4, %r10
	addq	spelling_base(%rip), %r10
	movq	%r10, spelling(%rip)
	jmp	.L40820
.L40722:
	movslq	%eax,%rsi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L40891
	.p2align 6,,7
.L40718:
	movq	constructor_fields(%rip), %rbx
	movq	40(%rbx), %rax
	movq	(%rbx), %r11
	movq	%rax, constructor_bit_index(%rip)
	movq	%r11, constructor_unfilled_fields(%rip)
	jmp	.L40820
.L40923:
	movq	8(%r13), %r15
	cmpb	$6, 16(%r15)
	jne	.L40714
	movl	-60(%rbp), %eax
	testl	%eax, %eax
	je	.L40714
	movq	-48(%rbp), %r12
	jmp	.L40715
	.p2align 6,,7
.L40922:
	movq	%r12, %rdi
	call	real_zerop
	testl	%eax, %eax
	jne	.L40712
.L40713:
	movl	$.LC167, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L40712
.L40921:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC166, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r14
	movq	%r14, %rbx
	movq	%rax, %r13
	jae	.L40867
.L40693:
	cmpl	$3, (%rbx)
	je	.L40924
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L40689:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L40693
.L40867:
	movslq	%r12d,%rbx
	movq	%r14, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L40884
.L40707:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L40925
	cmpl	$2, %eax
	je	.L40926
.L40701:
	movq	8(%r12), %r14
	movzbl	(%r14), %r13d
	leaq	1(%r14), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L40697
.L40706:
	movzbl	(%rcx), %edx
	incq	%rbx
	incq	%rcx
	testb	%dl, %dl
	movb	%dl, (%rbx)
	jne	.L40706
.L40697:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L40707
	jmp	.L40884
.L40926:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L40701
.L40925:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L40697
	.p2align 6,,7
.L40924:
	addl	$25, %r12d
	jmp	.L40689
	.p2align 6,,7
.L40899:
	movq	constructor_fields(%rip), %rdx
	testq	%rdx, %rdx
	movq	%rdx, %rdi
	je	.L40927
	movq	8(%rdx), %rbx
	movq	global_trees(%rip), %rsi
	cmpq	%rsi, %rbx
	je	.L40635
	movq	128(%rbx), %rbx
.L40635:
	movzbl	16(%rbx), %ecx
	cmpl	$18, %ecx
	je	.L40928
.L40636:
	testq	%r12, %r12
	je	.L40665
	cmpl	$18, %ecx
	je	.L40929
.L40661:
	testq	%r12, %r12
	je	.L40665
	movl	constructor_no_implicit(%rip), %eax
	testl	%eax, %eax
	jne	.L40662
	cmpq	%rsi, %r12
	je	.L40662
	movq	8(%r12), %rsi
	cmpq	%rbx, 128(%rsi)
	je	.L40662
	cmpl	$20, %ecx
	je	.L40731
	cmpl	$18, %ecx
	je	.L40731
	cmpl	$21, %ecx
	je	.L40731
.L40662:
	testq	%r12, %r12
	je	.L40665
	movq	72(%rdi), %rax
	movl	$.LC159, %r15d
	testq	%rax, %rax
	je	.L40667
	movq	32(%rax), %r15
.L40667:
	movq	spelling(%rip), %rdx
	movq	spelling_base(%rip), %rdi
	movl	spelling_size(%rip), %eax
	movq	%rdx, %rcx
	subq	%rdi, %rcx
	movq	%rcx, %r13
	shrq	$4, %r13
	cmpl	%eax, %r13d
	jl	.L40668
	addl	$10, %eax
	testq	%rdi, %rdi
	movl	%eax, spelling_size(%rip)
	jne	.L40669
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L40890:
	movslq	%r13d,%rdx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rdx
	addq	spelling_base(%rip), %rdx
	movq	%rdx, spelling(%rip)
.L40668:
	movq	%r15, 8(%rdx)
	movl	$2, (%rdx)
	movq	%r12, %rdi
	addq	$16, %rdx
	movq	%rbx, %rsi
	movl	$1, %ecx
	movq	%rdx, spelling(%rip)
	movq	constructor_fields(%rip), %rdx
	call	output_init_element
	movslq	constructor_depth(%rip),%r8
	movq	constructor_fields(%rip), %rdx
	salq	$4, %r8
	addq	spelling_base(%rip), %r8
	movq	%r8, spelling(%rip)
.L40672:
	movq	(%rdx), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_fields(%rip)
	je	.L40684
	testb	$2, 53(%rdx)
	je	.L40684
	cmpq	$0, 72(%rdx)
	jne	.L40684
.L40683:
	movq	constructor_fields(%rip), %r11
	movq	(%r11), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_fields(%rip)
	je	.L40684
	testb	$2, 53(%rdx)
	je	.L40684
	cmpq	$0, 72(%rdx)
	jne	.L40684
	jmp	.L40683
.L40669:
	movslq	%eax,%rsi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L40890
	.p2align 6,,7
.L40665:
	cmpq	$0, 40(%rdi)
	jne	.L40930
.L40673:
	movq	(%rdx), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L40672
	testb	$2, 53(%rax)
	je	.L40672
	cmpq	$0, 72(%rax)
	jne	.L40672
.L40678:
	movq	constructor_unfilled_fields(%rip), %r10
	movq	(%r10), %rax
	testq	%rax, %rax
	movq	%rax, constructor_unfilled_fields(%rip)
	je	.L40672
	testb	$2, 53(%rax)
	je	.L40672
	cmpq	$0, 72(%rax)
	je	.L40678
	jmp	.L40672
	.p2align 6,,7
.L40930:
	call	bit_position
	movq	constructor_fields(%rip), %r9
	movl	$59, %edi
	movq	%rax, %rsi
	movq	40(%r9), %rdx
	call	size_binop
	movq	constructor_fields(%rip), %rdx
	movq	%rax, constructor_bit_index(%rip)
	jmp	.L40673
	.p2align 6,,7
.L40929:
	movq	8(%rbx), %r15
	cmpb	$6, 16(%r15)
	jne	.L40661
	movl	-60(%rbp), %eax
	testl	%eax, %eax
	je	.L40661
	movq	-48(%rbp), %r12
	jmp	.L40662
	.p2align 6,,7
.L40928:
	movl	require_constant_value(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L40636
	cmpq	$0, 32(%rbx)
	jne	.L40636
	cmpq	$0, (%rdx)
	jne	.L40636
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC164, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r11
	xorl	%r12d, %r12d
	cmpq	%r11, %r14
	movq	%r14, %rbx
	movq	%r11, %r13
	jae	.L40860
.L40643:
	cmpl	$3, (%rbx)
	je	.L40931
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L40639:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L40643
.L40860:
	movslq	%r12d,%rbx
	movq	%r14, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L40862
.L40657:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L40932
	cmpl	$2, %eax
	je	.L40933
.L40651:
	movq	8(%r12), %r14
	movzbl	(%r14), %r13d
	leaq	1(%r14), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L40647
.L40656:
	movzbl	(%rcx), %edx
	incq	%rbx
	incq	%rcx
	testb	%dl, %dl
	movb	%dl, (%rbx)
	jne	.L40656
.L40647:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L40657
.L40862:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	je	.L40607
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L40607
.L40933:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L40651
.L40932:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L40647
.L40931:
	addl	$25, %r12d
	jmp	.L40639
	.p2align 6,,7
.L40927:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC163, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rcx
	xorl	%r12d, %r12d
	cmpq	%rcx, %r14
	movq	%r14, %rbx
	movq	%rcx, %r13
	jae	.L40855
.L40617:
	cmpl	$3, (%rbx)
	je	.L40934
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L40613:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L40617
.L40855:
	movslq	%r12d,%rsi
	movq	%r14, %r12
	addq	$16, %rsi
	andq	$-16, %rsi
	subq	%rsi, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L40884
.L40631:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L40935
	cmpl	$2, %eax
	je	.L40936
.L40625:
	movq	8(%r12), %r8
	movzbl	(%r8), %edi
	leaq	1(%r8), %rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	je	.L40621
.L40630:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L40630
.L40621:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L40631
	jmp	.L40884
.L40936:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L40625
.L40935:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L40621
	.p2align 6,,7
.L40934:
	addl	$25, %r12d
	jmp	.L40613
	.p2align 6,,7
.L40898:
	movl	require_constant_value(%rip), %edx
	testl	%edx, %edx
	je	.L40605
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	je	.L40842
	jmp	.L40605
	.p2align 6,,7
.L40897:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC163, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r9
	xorl	%r12d, %r12d
	cmpq	%r9, %r14
	movq	%r14, %rbx
	movq	%r9, %r13
	jae	.L40849
.L40574:
	cmpl	$3, (%rbx)
	je	.L40937
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L40570:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L40574
.L40849:
	movslq	%r12d,%rbx
	movq	%r14, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L40851
.L40588:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L40938
	cmpl	$2, %eax
	je	.L40939
.L40582:
	movq	8(%r12), %r11
	movzbl	(%r11), %r10d
	leaq	1(%r11), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L40578
	.p2align 4,,7
.L40587:
	movzbl	(%rcx), %r13d
	incq	%rbx
	incq	%rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	jne	.L40587
.L40578:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L40588
.L40851:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	je	.L40539
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L40539
.L40939:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L40582
.L40938:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L40578
.L40937:
	addl	$25, %r12d
	jmp	.L40570
.L40896:
	movq	8(%rax), %rdx
	cmpb	$6, 16(%rdx)
	jne	.L40541
	movq	constructor_unfilled_index(%rip), %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L40541
	movq	constructor_stack(%rip), %rax
	cmpq	$0, 88(%rax)
	jne	.L40940
.L40542:
	movq	%r12, 88(%rax)
	jmp	.L40539
.L40940:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC162, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rax
	xorl	%r13d, %r13d
	cmpq	%rax, %r14
	movq	%r14, %rbx
	movq	%rax, %r15
	jae	.L40844
.L40549:
	cmpl	$3, (%rbx)
	je	.L40941
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r13), %r13d
.L40545:
	addq	$16, %rbx
	cmpq	%r15, %rbx
	jb	.L40549
.L40844:
	movslq	%r13d,%rcx
	movq	%r14, %r13
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r15, %r14
	movq	%rsp, -56(%rbp)
	movq	%rsp, %rbx
	jae	.L40846
.L40563:
	movl	(%r13), %eax
	cmpl	$3, %eax
	je	.L40942
	cmpl	$2, %eax
	je	.L40943
.L40557:
	movq	8(%r13), %rdi
	movzbl	(%rdi), %esi
	leaq	1(%rdi), %rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	je	.L40553
.L40562:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L40562
.L40553:
	addq	$16, %r13
	cmpq	spelling(%rip), %r13
	jb	.L40563
.L40846:
	movb	$0, (%rbx)
	movq	-56(%rbp), %rax
	cmpb	$0, (%rax)
	jne	.L40944
.L40888:
	movq	constructor_stack(%rip), %rax
	jmp	.L40542
.L40944:
	movq	%rax, %rsi
	movl	$.LC142, %edi
	xorl	%eax, %eax
	call	error
	jmp	.L40888
	.p2align 6,,7
.L40943:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L40557
.L40942:
	movl	8(%r13), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L40553
.L40941:
	addl	$25, %r13d
	jmp	.L40545
.LFE43:
.Lfe43:
	.size	process_init_element,.Lfe43-process_init_element
	.section	.rodata.str1.32
	.align 32
.LC191:
	.string	"argument of `asm' is not a constant string"
	.text
	.align 2
	.p2align 4,,15
.globl simple_asm_stmt
	.type	simple_asm_stmt,@function
simple_asm_stmt:
.LFB44:
	subq	$8, %rsp
.LCFI206:
	movq	%rdi, %rcx
	movq	global_trees(%rip), %r9
	.p2align 4,,7
.L40946:
	movzbl	16(%rcx), %esi
	leal	-114(%rsi), %edx
	movl	%esi, %r8d
	cmpb	$2, %dl
	ja	.L40947
	movq	32(%rcx), %rdi
	cmpq	%r9, %rdi
	je	.L40947
	movq	8(%rcx), %r10
	movq	8(%rdi), %rdx
	movzbl	61(%r10), %r11d
	movzbl	61(%rdx), %r10d
	andb	$-2, %r11b
	andb	$-2, %r10b
	cmpb	%r10b, %r11b
	jne	.L40947
	movq	%rdi, %rcx
	jmp	.L40946
.L40947:
	cmpb	$121, %r8b
	je	.L40954
.L40951:
	cmpb	$29, %sil
	je	.L40955
	xorl	%eax, %eax
	movl	$.LC191, %edi
	call	error
	xorl	%eax, %eax
.L40945:
	addq	$8, %rsp
	ret
.L40955:
	cmpq	$0, (%rcx)
	jne	.L40956
.L40953:
	movq	%rcx, %rdx
	movl	$165, %edi
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	xorl	%eax, %eax
	call	build_stmt
	movq	%rax, %rdi
	call	add_stmt
	orb	$1, 19(%rax)
	jmp	.L40945
.L40956:
	movq	%rcx, %rdi
	call	combine_strings
	movq	%rax, %rcx
	jmp	.L40953
.L40954:
	movq	32(%rcx), %rcx
	movzbl	16(%rcx), %esi
	jmp	.L40951
.LFE44:
.Lfe44:
	.size	simple_asm_stmt,.Lfe44-simple_asm_stmt
	.section	.rodata.str1.1
.LC193:
	.string	"%s qualifier ignored on asm"
	.section	.rodata.str1.32
	.align 32
.LC194:
	.string	"invalid lvalue in asm statement"
	.align 32
.LC192:
	.string	"asm template is not a string constant"
	.text
	.align 2
	.p2align 4,,15
.globl build_asm_stmt
	.type	build_asm_stmt,@function
build_asm_stmt:
.LFB45:
	pushq	%r15
.LCFI207:
	pushq	%r14
.LCFI208:
	pushq	%r13
.LCFI209:
	pushq	%r12
.LCFI210:
	pushq	%rbp
.LCFI211:
	pushq	%rbx
.LCFI212:
	subq	$40, %rsp
.LCFI213:
	movq	%rdi, (%rsp)
	movq	%rsi, 8(%rsp)
	movq	%rdx, 32(%rsp)
	movq	%rcx, 24(%rsp)
	movq	%r8, 16(%rsp)
	cmpq	$0, (%rsi)
	jne	.L41066
.L40958:
	movq	8(%rsp), %rdx
	cmpb	$29, 16(%rdx)
	jne	.L41050
	cmpq	$0, (%rsp)
	je	.L40960
	movq	ridpointers(%rip), %rcx
	movq	(%rsp), %rdx
	cmpq	72(%rcx), %rdx
	je	.L40960
	movq	32(%rdx), %rsi
	movl	$.LC193, %edi
	xorl	%eax, %eax
	call	warning
	movq	$0, (%rsp)
.L40960:
	movq	32(%rsp), %rbx
	testq	%rbx, %rbx
	je	.L41052
.L40974:
	movq	32(%rbx), %rcx
	movq	global_trees(%rip), %rdi
	.p2align 4,,7
.L40965:
	movzbl	16(%rcx), %edx
	subb	$114, %dl
	cmpb	$2, %dl
	ja	.L40966
	movq	32(%rcx), %rsi
	cmpq	%rdi, %rsi
	je	.L40966
	movq	8(%rcx), %r10
	movq	8(%rsi), %r9
	movzbl	61(%r10), %r8d
	movzbl	61(%r9), %ebp
	andb	$-2, %r8b
	andb	$-2, %bpl
	cmpb	%bpl, %r8b
	jne	.L40966
	movq	%rsi, %rcx
	jmp	.L40965
.L40966:
	movq	%rcx, 32(%rbx)
	.p2align 4,,7
.L40970:
	movzbl	16(%rcx), %edx
	leal	-114(%rdx), %esi
	cmpb	$1, %sil
	jbe	.L40973
	cmpb	$76, %dl
	je	.L40973
	cmpb	$72, %dl
	je	.L40973
	cmpb	$74, %dl
	je	.L40973
	cmpb	$75, %dl
	je	.L40973
	cmpb	$73, %dl
	jne	.L41067
	.p2align 4,,7
.L40973:
	movq	32(%rcx), %rcx
	jmp	.L40970
.L41067:
	movq	32(%rbx), %rdi
	movl	$.LC194, %esi
	call	lvalue_or_else
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L40974
.L41052:
	movq	32(%rsp), %r8
	testq	%r8, %r8
	je	.L41054
.L40984:
	movq	32(%r8), %rsi
	movq	global_trees(%rip), %rdi
	.p2align 4,,7
.L40979:
	movzbl	16(%rsi), %ebx
	subb	$114, %bl
	cmpb	$2, %bl
	ja	.L40980
	movq	32(%rsi), %rcx
	cmpq	%rdi, %rcx
	je	.L40980
	movq	8(%rsi), %r14
	movq	8(%rcx), %r13
	movzbl	61(%r14), %r12d
	movzbl	61(%r13), %r11d
	andb	$-2, %r12b
	andb	$-2, %r11b
	cmpb	%r11b, %r12b
	jne	.L40980
	movq	%rcx, %rsi
	jmp	.L40979
.L40980:
	movq	%rsi, 32(%r8)
	movq	(%r8), %r8
	testq	%r8, %r8
	jne	.L40984
.L41054:
	movq	24(%rsp), %r12
	testq	%r12, %r12
	je	.L41056
.L41049:
	movq	32(%r12), %rbx
	xorl	%ebp, %ebp
	leaq	32(%r12), %r15
	movzbl	16(%rbx), %ecx
	movq	8(%rbx), %rdi
	movq	%rbx, %r8
	movzbl	16(%rdi), %edx
	cmpb	$116, %cl
	je	.L41060
	cmpb	$115, %cl
	je	.L41068
.L40990:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L40996
	cmpb	$49, %al
	je	.L40996
	cmpb	$50, %al
	je	.L40996
	cmpb	$101, %al
	je	.L40996
.L40995:
	cmpl	$23, %edx
	je	.L41069
	cmpl	$18, %edx
	je	.L41070
	movq	%rbx, %rbp
.L40998:
	movq	%rbp, (%r15)
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.L41049
.L41056:
	movq	(%rsp), %rsi
	movq	8(%rsp), %rdx
	movl	$165, %edi
	movq	32(%rsp), %rcx
	movq	24(%rsp), %r8
	xorl	%eax, %eax
	movq	16(%rsp), %r9
	call	build_stmt
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	movq	%rax, %rdi
	jmp	add_stmt
.L41070:
	movzbl	%cl, %r8d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r8), %eax
	movq	8(%rdi), %r13
	cmpb	$114, %al
	je	.L41001
	cmpb	$100, %al
	je	.L41001
.L41000:
	movzbl	17(%rdi), %r8d
	movl	$1, %esi
	movl	%r8d, %r10d
	movl	%r8d, %r14d
	shrb	$3, %r10b
	shrb	$4, %r14b
	andl	$1, %r10d
	andl	%r14d, %esi
	addl	%r10d, %r10d
	orl	%r10d, %esi
	movzbl	62(%rdi), %r10d
	movzbl	16(%rdi), %edi
	movl	%r10d, %r9d
	shrb	$5, %r9b
	andl	$1, %r9d
	sall	$2, %r9d
	orl	%r9d, %esi
	xorl	%r9d, %r9d
	cmpb	$20, %dil
	je	.L41071
.L41004:
	leal	0(,%r9,8), %r14d
	orl	%r14d, %esi
	jne	.L41003
	testl	%edx, %edx
	jne	.L41003
	testl	%r11d, %r11d
	je	.L41002
.L41003:
	movl	%r8d, %r14d
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r14b
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%r14d, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L41072
.L41006:
	leal	0(,%rcx,8), %r8d
	leal	(%r11,%r11), %edi
	orl	%r8d, %esi
	orl	%edx, %esi
	orl	%edi, %esi
	movq	%r13, %rdi
	call	c_build_qualified_type
	movzbl	16(%rbx), %ecx
	movq	%rax, %r13
.L41002:
	cmpb	$41, %cl
	je	.L41073
	cmpb	$47, %cl
	je	.L41074
	xorl	%r14d, %r14d
	testl	%ebp, %ebp
	je	.L41075
.L41045:
	movl	flag_isoc99(%rip), %edx
	testl	%edx, %edx
	jne	.L41046
	testl	%r14d, %r14d
	movq	%rbx, %rbp
	je	.L40998
.L41046:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %rbp
	je	.L41076
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbp, %rdi
	movq	%rax, %rsi
.L41065:
	call	convert
.L41064:
	movq	%rax, %rbp
	jmp	.L40998
.L41076:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, %rbp
	call	mark_addressable
	testl	%eax, %eax
	jne	.L41048
	movq	global_trees(%rip), %rbp
	jmp	.L40998
.L41048:
	movq	%rbx, %rdi
	call	staticp
	movzbl	17(%rbp), %ebx
	movl	%eax, %r9d
	andb	$1, %r9b
	addb	%r9b, %r9b
	andb	$-4, %bl
	orb	%r9b, %bl
	movb	%bl, 17(%rbp)
	jmp	.L40998
.L41075:
	movq	%rbx, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r14d
	jmp	.L41045
.L41074:
	movq	40(%rbx), %rbp
	movq	8(%rbp), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L41010
	cmpl	$18, %r14d
	je	.L41010
	movzbl	16(%rbp), %edx
	cmpb	$32, %dl
	je	.L41077
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L41013
	cmpb	$34, %dl
	je	.L41078
.L41013:
	cmpb	$116, %dl
	movq	%rbp, %rcx
	je	.L41062
	cmpb	$115, %dl
	je	.L41079
.L41022:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L41027
	cmpb	$49, %al
	je	.L41027
	cmpb	$50, %al
	je	.L41027
	cmpb	$101, %al
	je	.L41027
.L41026:
	cmpl	$10, %r14d
	je	.L41080
	cmpb	$39, %dl
	je	.L41081
.L41035:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L41040
	testb	$32, 17(%r13)
	je	.L41041
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L41042
	movzwl	60(%r13), %r10d
	movq	integer_types+40(%rip), %r13
	movzwl	60(%r13), %r11d
	andl	$511, %r10d
	andl	$511, %r11d
	cmpl	%r11d, %r10d
	je	.L41042
.L41041:
	movq	integer_types+40(%rip), %rdi
.L41063:
	movq	%rbp, %rsi
	call	convert
.L41011:
	movq	8(%rax), %rsi
	movq	32(%rbx), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L41064
.L41042:
	movq	integer_types+48(%rip), %rdi
	jmp	.L41063
.L41040:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L41043
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L41043
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%r13)
	je	.L41082
.L41043:
	cmpl	$5, %r14d
	je	.L41083
	movq	%rbp, %rax
	jmp	.L41011
.L41083:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L41011
.L41082:
	movq	global_trees+200(%rip), %rdi
	jmp	.L41063
	.p2align 6,,7
.L41081:
	movq	40(%rbp), %rdx
	testb	$2, 53(%rdx)
	je	.L41035
	movq	integer_types+40(%rip), %r8
	movq	40(%rdx), %rdi
	movzwl	60(%r8), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L41035
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L41041
	testb	$32, 17(%r13)
	jne	.L41042
	jmp	.L41041
	.p2align 6,,7
.L41080:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L41034
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L41033
.L41034:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L41033:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L41063
.L41027:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbp)
	jmp	.L41026
.L41079:
	movq	32(%rbp), %rsi
	movq	8(%rbp), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L41022
.L41025:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbp
	cmpb	$116, %dl
	jne	.L41084
.L41062:
	movq	32(%rbp), %rsi
	jmp	.L41025
.L41084:
	cmpb	$115, %dl
	jne	.L41022
	movq	32(%rsi), %rdi
	movq	8(%rbp), %r9
	cmpq	%r9, 8(%rdi)
	movq	%rdi, %rsi
	je	.L41025
	jmp	.L41022
.L41078:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L41017
	cmpb	$51, 48(%rbp)
	je	.L41017
	cmpq	$0, current_function_decl(%rip)
	je	.L41019
	movzbl	17(%rbp), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L41085
.L41019:
	movq	%rbp, %rsi
.L41020:
	movq	%rsi, %rbp
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L41017:
	movq	%rax, %r13
	jmp	.L41013
.L41085:
	movq	104(%rbp), %rax
	testq	%rax, %rax
	je	.L41019
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L41019
	testb	$2, 17(%rax)
	je	.L41019
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L41020
	jmp	.L41019
	.p2align 6,,7
.L41077:
	movq	104(%rbp), %rbp
	movzbl	16(%rbp), %edx
	jmp	.L41013
.L41010:
	movq	%rbp, %rdi
	call	default_function_array_conversion
	jmp	.L41011
.L41073:
	movq	72(%r13), %rdi
	movq	32(%rbx), %rsi
	jmp	.L41065
.L41072:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L41006
.L41071:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %r9d
	jmp	.L41004
.L41001:
	movzbl	17(%rbx), %r14d
	movl	$1, %r11d
	movl	%r14d, %edx
	shrb	$3, %r14b
	shrb	$4, %dl
	andl	%r14d, %r11d
	andl	$1, %edx
	jmp	.L41000
.L41069:
	movl	$121, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L41064
.L40996:
	movl	24(%r8), %eax
	movl	%eax, 24(%rbx)
	jmp	.L40995
.L41068:
	movq	32(%rbx), %rsi
	cmpq	%rdi, 8(%rsi)
	jne	.L40990
	.p2align 4,,7
.L40994:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %rbx
	movzbl	16(%rsi), %ecx
	cmove	%eax, %ebp
	cmpb	$116, %cl
	jne	.L41086
.L41060:
	movq	32(%rbx), %rsi
	jmp	.L40994
.L41086:
	cmpb	$115, %cl
	jne	.L40990
	movq	32(%rsi), %r10
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%r10)
	movq	%r10, %rsi
	je	.L40994
	jmp	.L40990
.L41050:
	xorl	%eax, %eax
	movl	$.LC192, %edi
	call	error
	addq	$40, %rsp
	xorl	%eax, %eax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L41066:
	movq	%rsi, %rdi
	call	combine_strings
	movq	%rax, 8(%rsp)
	jmp	.L40958
.LFE45:
.Lfe45:
	.size	build_asm_stmt,.Lfe45-build_asm_stmt
	.section	.rodata.str1.1
.LC195:
	.string	"modification by `asm'"
	.text
	.align 2
	.p2align 4,,15
.globl c_expand_asm_operands
	.type	c_expand_asm_operands,@function
c_expand_asm_operands:
.LFB46:
	pushq	%rbp
.LCFI214:
	movq	%rsp, %rbp
.LCFI215:
	pushq	%r15
.LCFI216:
	movq	%rcx, %r15
	pushq	%r14
.LCFI217:
	movq	%rdx, %r14
	pushq	%r13
.LCFI218:
	pushq	%r12
.LCFI219:
	movq	%rdi, %r12
	movq	%rsi, %rdi
	pushq	%rbx
.LCFI220:
	movq	%rsi, %rbx
	subq	$24, %rsp
.LCFI221:
	movq	%r9, -56(%rbp)
	movl	%r8d, -44(%rbp)
	call	list_length
	movq	%rbx, %rcx
	xorl	%esi, %esi
	cltq
	leaq	15(,%rax,8), %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	testq	%rbx, %rbx
	leaq	8(%rsp), %r13
	je	.L41103
	.p2align 4,,7
.L41092:
	movq	32(%rcx), %rdx
	movslq	%esi,%rdi
	incl	%esi
	movq	%rdx, (%r13,%rdi,8)
	movq	(%rcx), %rcx
	testq	%rcx, %rcx
	jne	.L41092
.L41103:
	movl	16(%rbp), %eax
	movl	-44(%rbp), %r8d
	movq	%r14, %rdx
	movq	-56(%rbp), %r9
	movq	%r12, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rcx
	xorl	%r14d, %r14d
	movl	%eax, (%rsp)
	call	expand_asm_operands
	testq	%rbx, %rbx
	je	.L41105
	.p2align 4,,7
.L41101:
	movslq	%r14d,%rcx
	movq	32(%rbx), %rdx
	leaq	(%r13,%rcx,8), %r12
	movq	(%r12), %rdi
	cmpq	%rdx, %rdi
	je	.L41097
	movl	$115, %esi
	call	build_modify_expr
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	call	expand_expr
	call	free_temp_slots
	movq	(%r12), %rcx
	movq	%rcx, 32(%rbx)
.L41095:
	movq	(%rbx), %rbx
	incl	%r14d
	testq	%rbx, %rbx
	jne	.L41101
.L41105:
	call	emit_queue
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
	.p2align 6,,7
.L41097:
	testb	$16, 17(%rdi)
	movq	8(%rdi), %rdx
	jne	.L41100
	testb	$16, 17(%rdx)
	jne	.L41100
	movzbl	16(%rdx), %esi
	subb	$20, %sil
	cmpb	$1, %sil
	ja	.L41095
	testb	$2, 19(%rdx)
	je	.L41095
	.p2align 4,,7
.L41100:
	movq	(%r13,%rcx,8), %rdi
	movl	$.LC195, %esi
	call	readonly_warning
	jmp	.L41095
.LFE46:
.Lfe46:
	.size	c_expand_asm_operands,.Lfe46-c_expand_asm_operands
	.section	.rodata.str1.32
	.align 32
.LC197:
	.string	"`return' with no value, in function returning non-void"
	.section	.rodata.str1.1
.LC199:
	.string	"return"
	.section	.rodata.str1.32
	.align 32
.LC200:
	.string	"function returns address of local variable"
	.align 32
.LC198:
	.string	"`return' with a value, in function returning void"
	.align 32
.LC196:
	.string	"function declared `noreturn' has a `return' statement"
	.text
	.align 2
	.p2align 4,,15
.globl c_expand_return
	.type	c_expand_return,@function
c_expand_return:
.LFB47:
	pushq	%rbp
.LCFI222:
	movq	%rdi, %rbp
	pushq	%rbx
.LCFI223:
	subq	$8, %rsp
.LCFI224:
	movq	current_function_decl(%rip), %rcx
	testb	$8, 17(%rcx)
	movq	8(%rcx), %rdx
	movq	8(%rdx), %rbx
	jne	.L41149
.L41107:
	testq	%rbp, %rbp
	jne	.L41108
	movl	warn_return_type(%rip), %eax
	movl	$1, current_function_returns_null(%rip)
	testl	%eax, %eax
	jne	.L41110
	movl	flag_isoc99(%rip), %ecx
	testl	%ecx, %ecx
	je	.L41111
.L41110:
	testq	%rbx, %rbx
	je	.L41111
	cmpb	$5, 16(%rbx)
	je	.L41111
	movl	$.LC197, %edi
	xorl	%eax, %eax
	call	pedwarn_c99
.L41111:
	movq	%rbp, %rdi
	call	build_return_stmt
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	movq	%rax, %rdi
	jmp	add_stmt
	.p2align 6,,7
.L41108:
	testq	%rbx, %rbx
	je	.L41113
	cmpb	$5, 16(%rbx)
	je	.L41113
	movq	%rbx, %rdi
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rbp, %rsi
	movl	$.LC199, %edx
	call	convert_for_assignment
	cmpq	global_trees(%rip), %rax
	movq	current_function_decl(%rip), %rdi
	movq	96(%rdi), %rbx
	movl	$1, current_function_returns_value(%rip)
	je	.L41144
	movq	8(%rbx), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%rax, %rbp
	movq	%rax, %rdx
	.p2align 4,,7
.L41143:
	movzbl	16(%rdx), %eax
	cmpl	$116, %eax
	ja	.L41142
	cmpl	$114, %eax
	jae	.L41148
	cmpl	$59, %eax
	jne	.L41150
.L41148:
	movq	32(%rdx), %rdx
	jmp	.L41143
.L41150:
	cmpl	$60, %eax
	jne	.L41119
	movq	40(%rdx), %rcx
	movq	8(%rcx), %rsi
	movzbl	16(%rsi), %eax
	cmpb	$13, %al
	je	.L41128
	cmpb	$15, %al
	je	.L41128
	movzbl	16(%rcx), %r8d
	subb	$114, %r8b
	cmpb	$2, %r8b
	ja	.L41128
.L41131:
	movq	32(%rcx), %rcx
	movq	8(%rcx), %rsi
	movzbl	16(%rsi), %eax
	cmpb	$13, %al
	je	.L41128
	cmpb	$15, %al
	je	.L41128
	movzbl	16(%rcx), %r9d
	subb	$114, %r9b
	cmpb	$2, %r9b
	jbe	.L41131
.L41128:
	movzbl	16(%rsi), %eax
	cmpb	$13, %al
	je	.L41119
	cmpb	$15, %al
	jne	.L41148
.L41119:
	movq	8(%rbx), %rsi
	movq	%rbp, %rcx
	movl	$48, %edi
	movq	%rbx, %rdx
	xorl	%eax, %eax
	call	build
	movq	%rax, %rbp
	jmp	.L41111
.L41142:
	cmpl	$121, %eax
	jne	.L41119
	movq	32(%rdx), %rcx
	movzbl	16(%rcx), %edx
	movzbl	%dl, %r10d 
	cmpb	$114, tree_code_type(%r10)
	je	.L41138
.L41147:
	cmpb	$34, %dl
	jne	.L41119
	testb	$1, 49(%rcx)
	jne	.L41119
	testb	$4, 18(%rcx)
	jne	.L41119
	movq	current_function_decl(%rip), %rdx
	cmpq	%rdx, 80(%rcx)
	jne	.L41119
	movl	$.LC200, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L41119
	.p2align 6,,7
.L41138:
	movq	32(%rcx), %rcx
	movzbl	16(%rcx), %edx
	movzbl	%dl, %r11d 
	cmpb	$114, tree_code_type(%r11)
	je	.L41138
	jmp	.L41147
.L41144:
	addq	$8, %rsp
	xorl	%eax, %eax
	popq	%rbx
	popq	%rbp
	ret
	.p2align 6,,7
.L41113:
	movl	pedantic(%rip), %ebx
	movl	$1, current_function_returns_null(%rip)
	testl	%ebx, %ebx
	jne	.L41115
	movq	8(%rbp), %rsi
	cmpb	$5, 16(%rsi)
	je	.L41111
.L41115:
	movl	$.LC198, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L41111
	.p2align 6,,7
.L41149:
	movl	$.LC196, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L41107
.LFE47:
.Lfe47:
	.size	c_expand_return,.Lfe47-c_expand_return
	.section	.rodata.str1.32
	.align 32
.LC202:
	.string	"`long' switch expression not converted to `int' in ISO C"
	.align 32
.LC201:
	.string	"switch quantity not an integer"
	.text
	.align 2
	.p2align 4,,15
.globl c_start_case
	.type	c_start_case,@function
c_start_case:
.LFB48:
	pushq	%r14
.LCFI225:
	pushq	%r13
.LCFI226:
	movq	global_trees(%rip), %r13
	pushq	%r12
.LCFI227:
	pushq	%rbp
.LCFI228:
	movq	%rdi, %rbp
	cmpq	%r13, %rdi
	pushq	%rbx
.LCFI229:
	je	.L41153
	movq	8(%rdi), %r12
	movzbl	16(%r12), %eax
	movq	%r12, %rdx
	movq	%r12, %r13
	cmpb	$6, %al
	movzbl	%al, %ecx
	je	.L41154
	cmpb	$10, %al
	je	.L41154
	cmpb	$11, %al
	je	.L41154
	cmpb	$12, %al
	je	.L41154
	testl	%ecx, %ecx
	jne	.L41269
.L41154:
	movq	128(%rdx), %rax
	movl	warn_traditional(%rip), %edx
	testl	%edx, %edx
	je	.L41156
	movl	in_system_header(%rip), %edx
	testl	%edx, %edx
	jne	.L41156
	cmpq	integer_types+56(%rip), %rax
	je	.L41157
	cmpq	integer_types+64(%rip), %rax
	je	.L41157
.L41156:
	movzbl	16(%r12), %ebx
	cmpl	$23, %ebx
	je	.L41159
	cmpl	$18, %ebx
	je	.L41159
	movzbl	16(%rbp), %ecx
	cmpb	$32, %cl
	je	.L41270
	movl	optimize(%rip), %eax
	testl	%eax, %eax
	je	.L41222
	cmpb	$34, %cl
	je	.L41271
.L41222:
	cmpb	$116, %cl
	movq	%rbp, %rdx
	je	.L41262
	cmpb	$115, %cl
	je	.L41272
.L41231:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L41236
	cmpb	$49, %al
	je	.L41236
	cmpb	$50, %al
	je	.L41236
	cmpb	$101, %al
	je	.L41236
.L41235:
	cmpl	$10, %ebx
	je	.L41273
	cmpb	$39, %cl
	je	.L41274
.L41244:
	movq	%r12, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L41249
	testb	$32, 17(%r12)
	je	.L41250
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L41251
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r12), %edi
	movzwl	60(%rdx), %r12d
	andl	$511, %edi
	andl	$511, %r12d
	cmpl	%r12d, %edi
	je	.L41251
.L41250:
	movq	integer_types+40(%rip), %rdi
.L41265:
	movq	%rbp, %rsi
.L41266:
	call	convert
.L41268:
	movq	%rax, %rbx
.L41220:
	movq	%rbx, %rbp
.L41153:
	movl	$24, %edi
	call	xmalloc
	movq	%r13, %rcx
	xorl	%edx, %edx
	movq	%rax, %r14
	movq	%rbp, %rsi
	movl	$162, %edi
	xorl	%eax, %eax
	call	build_stmt
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, (%r14)
	movl	$case_compare, %edi
	call	splay_tree_new
	movq	(%r14), %rdi
	movq	switch_stack(%rip), %r13
	movq	%rax, 8(%r14)
	movq	%r13, 16(%r14)
	movq	%r14, switch_stack(%rip)
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	jmp	add_stmt
.L41251:
	movq	integer_types+48(%rip), %rdi
	jmp	.L41265
.L41249:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L41252
	movl	flag_allow_single_precision(%rip), %ecx
	testl	%ecx, %ecx
	jne	.L41252
	movq	global_trees+192(%rip), %r9
	cmpq	%r9, 128(%r12)
	je	.L41275
.L41252:
	cmpl	$5, %ebx
	je	.L41276
.L41253:
	movq	%rbp, %rbx
	jmp	.L41220
.L41276:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L41267:
	movq	global_trees(%rip), %rbx
	jmp	.L41220
.L41275:
	movq	global_trees+200(%rip), %rdi
	jmp	.L41265
	.p2align 6,,7
.L41274:
	movq	40(%rbp), %rdx
	testb	$2, 53(%rdx)
	je	.L41244
	movq	integer_types+40(%rip), %r14
	movq	40(%rdx), %rdi
	movzwl	60(%r14), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L41244
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L41250
	testb	$32, 17(%r12)
	jne	.L41251
	jmp	.L41250
	.p2align 6,,7
.L41273:
	movq	integer_types+40(%rip), %rbx
	movzwl	60(%r12), %edx
	movl	flag_traditional(%rip), %r11d
	movzwl	60(%rbx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r11d, %r11d
	jne	.L41243
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L41242
.L41243:
	testb	$32, 17(%r12)
	movl	$1, %eax
	cmovne	%eax, %esi
.L41242:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L41265
.L41236:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbp)
	jmp	.L41235
.L41272:
	movq	32(%rbp), %rsi
	movq	8(%rbp), %r9
	cmpq	%r9, 8(%rsi)
	jne	.L41231
	.p2align 4,,7
.L41234:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %rbp
	cmpb	$116, %cl
	jne	.L41277
.L41262:
	movq	32(%rbp), %rsi
	jmp	.L41234
.L41277:
	cmpb	$115, %cl
	jne	.L41231
	movq	32(%rsi), %r10
	movq	8(%rbp), %r8
	cmpq	%r8, 8(%r10)
	movq	%r10, %rsi
	je	.L41234
	jmp	.L41231
.L41271:
	movl	pedantic(%rip), %edi
	testl	%edi, %edi
	jne	.L41222
	cmpb	$51, 48(%rbp)
	je	.L41222
	cmpq	$0, current_function_decl(%rip)
	je	.L41228
	movzbl	17(%rbp), %ecx
	andb	$24, %cl
	cmpb	$16, %cl
	je	.L41278
.L41228:
	movq	%rbp, %rsi
.L41229:
	movq	%rsi, %rbp
	movq	8(%rsi), %r12
.L41264:
	movzbl	16(%rbp), %ecx
	jmp	.L41222
.L41278:
	movq	104(%rbp), %rax
	testq	%rax, %rax
	je	.L41228
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L41228
	testb	$2, 17(%rax)
	je	.L41228
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L41229
	jmp	.L41228
	.p2align 6,,7
.L41270:
	movq	104(%rbp), %rbp
	jmp	.L41264
.L41159:
	movzbl	16(%rbp), %ecx
	movl	%ebx, %edx
	movq	%rbp, %rdi
	xorl	%ebx, %ebx
	cmpb	$116, %cl
	je	.L41258
	cmpb	$115, %cl
	je	.L41279
.L41161:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L41167
	cmpb	$49, %al
	je	.L41167
	cmpb	$50, %al
	je	.L41167
	cmpb	$101, %al
	je	.L41167
.L41166:
	cmpl	$23, %edx
	je	.L41280
	cmpl	$18, %edx
	jne	.L41253
	movzbl	%cl, %edi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rdi), %eax
	movq	8(%r12), %r14
	cmpb	$114, %al
	je	.L41172
	cmpb	$100, %al
	je	.L41172
.L41171:
	movzbl	17(%r12), %r8d
	movl	$1, %esi
	movl	%r8d, %r9d
	movl	%r8d, %edi
	shrb	$4, %r9b
	shrb	$3, %dil
	andl	%r9d, %esi
	andl	$1, %edi
	movzbl	62(%r12), %r9d
	addl	%edi, %edi
	orl	%edi, %esi
	movzbl	16(%r12), %edi
	movl	%r9d, %r10d
	shrb	$5, %r10b
	andl	$1, %r10d
	sall	$2, %r10d
	orl	%r10d, %esi
	xorl	%r10d, %r10d
	cmpb	$20, %dil
	je	.L41281
.L41175:
	leal	0(,%r10,8), %r12d
	orl	%r12d, %esi
	jne	.L41174
	testl	%edx, %edx
	jne	.L41174
	testl	%r11d, %r11d
	je	.L41173
.L41174:
	movl	%r8d, %r12d
	shrb	$5, %r9b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r12b
	movl	%r9d, %ecx
	movl	%r8d, %r10d
	andl	%r12d, %esi
	andl	$1, %ecx
	andl	$1, %r10d
	sall	$2, %ecx
	addl	%r10d, %r10d
	orl	%r10d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L41282
.L41177:
	leal	0(,%rcx,8), %r8d
	movq	%r14, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%rbp), %ecx
	movq	%rax, %r14
.L41173:
	cmpb	$41, %cl
	je	.L41283
	cmpb	$47, %cl
	je	.L41284
	xorl	%r12d, %r12d
	testl	%ebx, %ebx
	je	.L41285
.L41216:
	movl	flag_isoc99(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L41217
	testl	%r12d, %r12d
	movq	%rbp, %rbx
	je	.L41220
.L41217:
	movq	%r14, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbp)
	movq	%rax, %rbx
	je	.L41286
	movl	$121, %edi
	movq	%rbp, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L41266
.L41286:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbp, %rdx
	call	build1
	movq	%rbp, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L41267
	movq	%rbp, %rdi
	call	staticp
	movzbl	17(%rbx), %ebp
	movl	%eax, %r14d
	andb	$1, %r14b
	addb	%r14b, %r14b
	andb	$-4, %bpl
	orb	%r14b, %bpl
	movb	%bpl, 17(%rbx)
	jmp	.L41220
.L41285:
	movq	%rbp, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r12d
	jmp	.L41216
.L41284:
	movq	40(%rbp), %rbx
	movq	8(%rbx), %r12
	movzbl	16(%r12), %r14d
	movq	%r12, %rax
	cmpl	$23, %r14d
	je	.L41181
	cmpl	$18, %r14d
	je	.L41181
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L41287
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L41184
	cmpb	$34, %dl
	je	.L41288
.L41184:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L41260
	cmpb	$115, %dl
	je	.L41289
.L41193:
	movzbl	%dl, %r11d 
	movzbl	tree_code_type(%r11), %eax
	cmpb	$60, %al
	je	.L41198
	cmpb	$49, %al
	je	.L41198
	cmpb	$50, %al
	je	.L41198
	cmpb	$101, %al
	je	.L41198
.L41197:
	cmpl	$10, %r14d
	je	.L41290
	cmpb	$39, %dl
	je	.L41291
.L41206:
	movq	%r12, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L41211
	testb	$32, 17(%r12)
	je	.L41212
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L41213
	movq	integer_types+40(%rip), %r9
	movzwl	60(%r12), %esi
	movzwl	60(%r9), %r12d
	andl	$511, %esi
	andl	$511, %r12d
	cmpl	%r12d, %esi
	je	.L41213
.L41212:
	movq	integer_types+40(%rip), %rdi
.L41263:
	movq	%rbx, %rsi
	call	convert
.L41182:
	movq	8(%rax), %rsi
	movq	32(%rbp), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L41268
.L41213:
	movq	integer_types+48(%rip), %rdi
	jmp	.L41263
.L41211:
	movl	flag_traditional(%rip), %r8d
	testl	%r8d, %r8d
	je	.L41214
	movl	flag_allow_single_precision(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L41214
	movq	global_trees+192(%rip), %r11
	cmpq	%r11, 128(%r12)
	je	.L41292
.L41214:
	cmpl	$5, %r14d
	je	.L41293
	movq	%rbx, %rax
	jmp	.L41182
.L41293:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L41182
.L41292:
	movq	global_trees+200(%rip), %rdi
	jmp	.L41263
	.p2align 6,,7
.L41291:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L41206
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%rdi), %esi
	movq	40(%rdx), %rdi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L41206
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L41212
	testb	$32, 17(%r12)
	jne	.L41213
	jmp	.L41212
	.p2align 6,,7
.L41290:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r12), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L41205
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L41204
.L41205:
	testb	$32, 17(%r12)
	movl	$1, %eax
	cmovne	%eax, %esi
.L41204:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L41263
.L41198:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L41197
.L41289:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%rsi)
	jne	.L41193
.L41196:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L41294
.L41260:
	movq	32(%rbx), %rsi
	jmp	.L41196
.L41294:
	cmpb	$115, %dl
	jne	.L41193
	movq	32(%rsi), %r8
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%r8)
	movq	%r8, %rsi
	je	.L41196
	jmp	.L41193
.L41288:
	movl	pedantic(%rip), %edi
	testl	%edi, %edi
	jne	.L41188
	cmpb	$51, 48(%rbx)
	je	.L41188
	cmpq	$0, current_function_decl(%rip)
	je	.L41190
	movzbl	17(%rbx), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L41295
.L41190:
	movq	%rbx, %rsi
.L41191:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L41188:
	movq	%rax, %r12
	jmp	.L41184
.L41295:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L41190
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L41190
	testb	$2, 17(%rax)
	je	.L41190
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L41191
	jmp	.L41190
	.p2align 6,,7
.L41287:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L41184
.L41181:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L41182
.L41283:
	movq	72(%r14), %rdi
	movq	32(%rbp), %rsi
	jmp	.L41266
.L41282:
	testq	%r14, %r14
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L41177
.L41281:
	testq	%r14, %r14
	movl	$1, %eax
	cmovne	%eax, %r10d
	jmp	.L41175
.L41172:
	movzbl	17(%rbp), %r9d
	movl	$1, %r11d
	movl	%r9d, %edx
	shrb	$3, %r9b
	shrb	$4, %dl
	andl	%r9d, %r11d
	andl	$1, %edx
	jmp	.L41171
.L41280:
	movl	$121, %edi
	movq	%rbp, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L41268
.L41167:
	movl	24(%rdi), %eax
	movl	%eax, 24(%rbp)
	jmp	.L41166
.L41279:
	movq	32(%rbp), %rsi
	cmpq	%r12, 8(%rsi)
	jne	.L41161
	.p2align 4,,7
.L41165:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %rbp
	movzbl	16(%rsi), %ecx
	cmove	%eax, %ebx
	cmpb	$116, %cl
	jne	.L41296
.L41258:
	movq	32(%rbp), %rsi
	jmp	.L41165
.L41296:
	cmpb	$115, %cl
	jne	.L41161
	movq	32(%rsi), %rsi
	movq	8(%rbp), %r8
	cmpq	%r8, 8(%rsi)
	je	.L41165
	jmp	.L41161
.L41157:
	movl	$.LC202, %edi
	xorl	%eax, %eax
	call	warning
	movq	8(%rbp), %r12
	jmp	.L41156
.L41269:
	movl	$.LC201, %edi
	xorl	%eax, %eax
	call	error
	movq	global_trees+88(%rip), %rbp
	jmp	.L41153
.LFE48:
.Lfe48:
	.size	c_start_case,.Lfe48-c_start_case
	.section	.rodata.str1.32
	.align 32
.LC203:
	.string	"case label not within a switch statement"
	.align 32
.LC204:
	.string	"`default' label not within a switch statement"
	.text
	.align 2
	.p2align 4,,15
.globl do_case
	.type	do_case,@function
do_case:
.LFB49:
	movq	switch_stack(%rip), %rdx
	pushq	%rbx
.LCFI230:
	movq	%rdi, %rcx
	xorl	%ebx, %ebx
	movq	%rsi, %r8
	testq	%rdx, %rdx
	jne	.L41304
	testq	%rdi, %rdi
	je	.L41301
	movl	$.LC203, %edi
.L41303:
	xorl	%eax, %eax
	call	error
.L41300:
	movq	%rbx, %rax
	popq	%rbx
	ret
	.p2align 6,,7
.L41301:
	movl	$.LC204, %edi
	jmp	.L41303
	.p2align 6,,7
.L41304:
	movq	(%rdx), %rbx
	movq	8(%rdx), %rdi
	movq	%rcx, %rdx
	movq	%r8, %rcx
	movq	32(%rbx), %rsi
	call	c_add_case_label
	cmpq	global_trees(%rip), %rax
	movq	%rax, %rbx
	jne	.L41300
	xorl	%ebx, %ebx
	jmp	.L41300
.LFE49:
.Lfe49:
	.size	do_case,.Lfe49-do_case
	.align 2
	.p2align 4,,15
.globl c_finish_case
	.type	c_finish_case,@function
c_finish_case:
.LFB50:
	pushq	%rbx
.LCFI231:
	movq	switch_stack(%rip), %rbx
	movq	(%rbx), %rdi
	movq	(%rdi), %r8
	movq	%r8, 40(%rdi)
	movq	(%rbx), %rdx
	movq	$0, (%rdx)
	call	current_stmt_tree
	movq	8(%rbx), %rdi
	movq	switch_stack(%rip), %rcx
	movq	(%rbx), %rsi
	movq	16(%rcx), %rdx
	movq	%rsi, (%rax)
	movq	%rdx, switch_stack(%rip)
	call	splay_tree_delete
	movq	%rbx, %rdi
	popq	%rbx
	jmp	free
.LFE50:
.Lfe50:
	.size	c_finish_case,.Lfe50-c_finish_case
	.local	missing_braces_mentioned
	.comm	missing_braces_mentioned,4,4
	.local	undeclared_variable_notice
	.comm	undeclared_variable_notice,4,4
	.align 2
	.p2align 4,,15
	.type	default_function_array_conversion,@function
default_function_array_conversion:
.LFB51:
	pushq	%r13
.LCFI232:
	movq	%rdi, %rsi
	pushq	%r12
.LCFI233:
	pushq	%rbp
.LCFI234:
	xorl	%ebp, %ebp
	pushq	%rbx
.LCFI235:
	movq	%rdi, %rbx
	subq	$8, %rsp
.LCFI236:
	movzbl	16(%rdi), %ecx
	movq	8(%rdi), %r8
	movzbl	16(%r8), %edx
	cmpb	$116, %cl
	je	.L41310
	cmpb	$115, %cl
	je	.L41315
.L9145:
	movzbl	%cl, %edi 
	movzbl	tree_code_type(%rdi), %eax
	cmpb	$60, %al
	je	.L9151
	cmpb	$49, %al
	je	.L9151
	cmpb	$50, %al
	je	.L9151
	cmpb	$101, %al
	je	.L9151
.L9150:
	cmpl	$23, %edx
	je	.L41316
	cmpl	$18, %edx
	je	.L41317
	movq	%rbx, %rbp
.L9143:
	addq	$8, %rsp
	movq	%rbp, %rax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret
.L41317:
	movzbl	%cl, %esi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rsi), %eax
	movq	8(%r8), %r13
	cmpb	$114, %al
	je	.L9155
	cmpb	$100, %al
	je	.L9155
.L9154:
	movzbl	17(%r8), %edi
	movl	$1, %esi
	movl	%edi, %r10d
	movl	%edi, %r9d
	shrb	$4, %r10b
	shrb	$3, %r9b
	andl	%r10d, %esi
	andl	$1, %r9d
	movzbl	62(%r8), %r10d
	movzbl	16(%r8), %r8d
	addl	%r9d, %r9d
	orl	%r9d, %esi
	xorl	%r9d, %r9d
	movl	%r10d, %r12d
	shrb	$5, %r12b
	andl	$1, %r12d
	sall	$2, %r12d
	orl	%r12d, %esi
	cmpb	$20, %r8b
	je	.L41318
.L9158:
	leal	0(,%r9,8), %r12d
	orl	%r12d, %esi
	jne	.L9157
	testl	%edx, %edx
	jne	.L9157
	testl	%r11d, %r11d
	je	.L9156
.L9157:
	movl	%edi, %r12d
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %dil
	shrb	$4, %r12b
	movl	%r10d, %ecx
	movl	%edi, %r9d
	andl	%r12d, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %r8b
	je	.L41319
.L9160:
	leal	0(,%rcx,8), %r8d
	movq	%r13, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%rbx), %ecx
	movq	%rax, %r13
.L9156:
	cmpb	$41, %cl
	je	.L41320
	cmpb	$47, %cl
	je	.L41321
	xorl	%r12d, %r12d
	testl	%ebp, %ebp
	je	.L41322
.L9200:
	movl	flag_isoc99(%rip), %ebp
	testl	%ebp, %ebp
	jne	.L9201
	testl	%r12d, %r12d
	movq	%rbx, %rbp
	je	.L9143
.L9201:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %rbp
	je	.L41323
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbp, %rdi
	movq	%rax, %rsi
.L41314:
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	jmp	convert
.L41323:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, %rbp
	call	mark_addressable
	testl	%eax, %eax
	jne	.L9203
	movq	global_trees(%rip), %rbp
	jmp	.L9143
.L9203:
	movq	%rbx, %rdi
	call	staticp
	movzbl	17(%rbp), %ebx
	movl	%eax, %r9d
	andb	$1, %r9b
	addb	%r9b, %r9b
	andb	$-4, %bl
	orb	%r9b, %bl
	movb	%bl, 17(%rbp)
	jmp	.L9143
.L41322:
	movq	%rbx, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r12d
	jmp	.L9200
.L41321:
	movq	40(%rbx), %rbp
	movq	8(%rbp), %r12
	movzbl	16(%r12), %r13d
	movq	%r12, %rax
	cmpl	$23, %r13d
	je	.L9164
	cmpl	$18, %r13d
	je	.L9164
	movzbl	16(%rbp), %edx
	cmpb	$32, %dl
	je	.L41324
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L9168
	cmpb	$34, %dl
	je	.L41325
.L9168:
	cmpb	$116, %dl
	movq	%rbp, %rcx
	je	.L41312
	cmpb	$115, %dl
	je	.L41326
.L9177:
	movzbl	%dl, %r11d 
	movzbl	tree_code_type(%r11), %eax
	cmpb	$60, %al
	je	.L9182
	cmpb	$49, %al
	je	.L9182
	cmpb	$50, %al
	je	.L9182
	cmpb	$101, %al
	je	.L9182
.L9181:
	cmpl	$10, %r13d
	je	.L41327
	cmpb	$39, %dl
	je	.L41328
.L9190:
	movq	%r12, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L9195
	testb	$32, 17(%r12)
	je	.L9196
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L9197
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r12), %esi
	movzwl	60(%rdx), %r12d
	andl	$511, %esi
	andl	$511, %r12d
	cmpl	%r12d, %esi
	je	.L9197
.L9196:
	movq	integer_types+40(%rip), %rdi
.L41313:
	movq	%rbp, %rsi
	call	convert
.L9166:
	movq	8(%rax), %rsi
	movq	32(%rbx), %rdx
	movq	%rax, %rcx
	addq	$8, %rsp
	movl	$47, %edi
	xorl	%eax, %eax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	jmp	build
.L9197:
	movq	integer_types+48(%rip), %rdi
	jmp	.L41313
.L9195:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L9198
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L9198
	movq	global_trees+192(%rip), %r10
	cmpq	%r10, 128(%r12)
	je	.L41329
.L9198:
	cmpl	$5, %r13d
	je	.L41330
	movq	%rbp, %rax
	jmp	.L9166
.L41330:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L9166
.L41329:
	movq	global_trees+200(%rip), %rdi
	jmp	.L41313
	.p2align 6,,7
.L41328:
	movq	40(%rbp), %rdx
	testb	$2, 53(%rdx)
	je	.L9190
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%rdi), %esi
	movq	40(%rdx), %rdi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L9190
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L9196
	testb	$32, 17(%r12)
	jne	.L9197
	jmp	.L9196
	.p2align 6,,7
.L41327:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r12), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L9189
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L9188
.L9189:
	testb	$32, 17(%r12)
	movl	$1, %eax
	cmovne	%eax, %esi
.L9188:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L41313
.L9182:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbp)
	jmp	.L9181
.L41326:
	movq	32(%rbp), %rsi
	movq	8(%rbp), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L9177
.L9180:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbp
	cmpb	$116, %dl
	jne	.L41331
.L41312:
	movq	32(%rbp), %rsi
	jmp	.L9180
.L41331:
	cmpb	$115, %dl
	jne	.L9177
	movq	32(%rsi), %r8
	movq	8(%rbp), %r9
	cmpq	%r9, 8(%r8)
	movq	%r8, %rsi
	je	.L9180
	jmp	.L9177
.L41325:
	movl	pedantic(%rip), %edi
	testl	%edi, %edi
	jne	.L9172
	cmpb	$51, 48(%rbp)
	je	.L9172
	cmpq	$0, current_function_decl(%rip)
	je	.L9174
	movzbl	17(%rbp), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L41332
.L9174:
	movq	%rbp, %rsi
.L9175:
	movq	%rsi, %rbp
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L9172:
	movq	%rax, %r12
	jmp	.L9168
.L41332:
	movq	104(%rbp), %rax
	testq	%rax, %rax
	je	.L9174
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L9174
	testb	$2, 17(%rax)
	je	.L9174
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L9175
	jmp	.L9174
	.p2align 6,,7
.L41324:
	movq	104(%rbp), %rbp
	movzbl	16(%rbp), %edx
	jmp	.L9168
.L9164:
	movq	%rbp, %rdi
	call	default_function_array_conversion
	jmp	.L9166
.L41320:
	movq	72(%r13), %rdi
	movq	32(%rbx), %rsi
	jmp	.L41314
.L41319:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L9160
.L41318:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %r9d
	jmp	.L9158
.L9155:
	movzbl	17(%rbx), %r10d
	movl	$1, %r11d
	movl	%r10d, %edx
	shrb	$3, %r10b
	shrb	$4, %dl
	andl	%r10d, %r11d
	andl	$1, %edx
	jmp	.L9154
.L41316:
	addq	$8, %rsp
	movq	%rbx, %rsi
	movl	$121, %edi
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	xorl	%edx, %edx
	jmp	build_unary_op
.L9151:
	movl	24(%rsi), %eax
	movl	%eax, 24(%rbx)
	jmp	.L9150
.L41315:
	movq	32(%rdi), %rdi
	cmpq	%r8, 8(%rdi)
	jne	.L9145
	.p2align 4,,7
.L9149:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rdi, %rbx
	movzbl	16(%rdi), %ecx
	cmove	%eax, %ebp
	cmpb	$116, %cl
	jne	.L41333
.L41310:
	movq	32(%rbx), %rdi
	jmp	.L9149
.L41333:
	cmpb	$115, %cl
	jne	.L9145
	movq	32(%rdi), %r9
	movq	%r9, %rdi
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%rdi)
	je	.L9149
	jmp	.L9145
.LFE51:
.Lfe51:
	.size	default_function_array_conversion,.Lfe51-default_function_array_conversion
	.align 2
	.p2align 4,,15
	.type	lookup_field,@function
lookup_field:
.LFB52:
	pushq	%r14
.LCFI237:
	pushq	%r13
.LCFI238:
	movq	%rsi, %r13
	pushq	%r12
.LCFI239:
	pushq	%rbp
.LCFI240:
	pushq	%rbx
.LCFI241:
	movq	8(%rdi), %rdx
	movq	160(%rdx), %rax
	testq	%rax, %rax
	je	.L9254
	movl	(%rax), %r14d
	xorl	%ebp, %ebp
	leaq	8(%rax), %r12
	movq	24(%rdx), %rbx
	cmpl	$1, %r14d
	jle	.L9256
	.p2align 4,,7
.L9270:
	movl	%r14d, %ecx
	subl	%ebp, %ecx
	incl	%ecx
	sarl	$1, %ecx
	leal	(%rcx,%rbp), %edx
	movslq	%edx,%rcx
	movq	(%r12,%rcx,8), %rbx
	movq	72(%rbx), %rax
	testq	%rax, %rax
	jne	.L9258
	movslq	%ebp,%rdi
	leaq	(%r12,%rdi,8), %rdx
	movq	(%rdx), %rsi
	cmpq	$0, 72(%rsi)
	jne	.L41336
	.p2align 4,,7
.L9265:
	movq	(%rdx), %rbx
	incl	%ebp
	movq	8(%rbx), %r8
	movzbl	16(%r8), %edx
	subb	$20, %dl
	cmpb	$1, %dl
	jbe	.L41342
.L9259:
	movslq	%ebp,%r10
	leaq	(%r12,%r10,8), %rdx
	movq	(%rdx), %r9
	cmpq	$0, 72(%r9)
	je	.L9265
.L41336:
	cmpl	%r14d, %ebp
	jg	.L9253
.L9255:
	movl	%r14d, %r11d
	subl	%ebp, %r11d
	decl	%r11d
	jg	.L9270
.L9256:
	movslq	%ebp,%r14
	movq	(%r12,%r14,8), %rsi
	cmpq	%r13, 72(%rsi)
	je	.L41344
	cmpq	%r13, 72(%rbx)
	je	.L9274
.L9253:
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	xorl	%eax, %eax
	ret
.L9274:
	xorl	%edi, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
.L41340:
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	jmp	tree_cons
.L41344:
	movq	%rsi, %rbx
	jmp	.L9274
	.p2align 6,,7
.L41342:
	movq	%rbx, %rdi
	movq	%r13, %rsi
	call	lookup_field
	testq	%rax, %rax
	je	.L9259
.L41341:
	xorl	%edi, %edi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	jmp	.L41340
	.p2align 6,,7
.L9258:
	cmpq	%r13, %rax
	je	.L9256
	cmpq	%r13, %rax
	jae	.L9268
	movl	%edx, %ebp
	jmp	.L9255
.L9268:
	movl	%edx, %r14d
	jmp	.L9255
.L9254:
	movq	24(%rdx), %rbx
	testq	%rbx, %rbx
	je	.L9253
	.p2align 4,,7
.L9282:
	movq	72(%rbx), %rdx
	testq	%rdx, %rdx
	jne	.L9279
	movq	8(%rbx), %r12
	movzbl	16(%r12), %ebp
	subb	$20, %bpl
	cmpb	$1, %bpl
	jbe	.L41345
.L9279:
	cmpq	%r13, %rdx
	je	.L9276
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L9282
	jmp	.L9253
.L9276:
	testq	%rbx, %rbx
	je	.L9253
	jmp	.L9274
.L41345:
	movq	%rbx, %rdi
	movq	%r13, %rsi
	call	lookup_field
	testq	%rax, %rax
	jne	.L41341
	movq	72(%rbx), %rdx
	jmp	.L9279
.LFE52:
.Lfe52:
	.size	lookup_field,.Lfe52-lookup_field
	.align 2
	.p2align 4,,15
	.type	internal_build_compound_expr,@function
internal_build_compound_expr:
.LFB53:
	pushq	%r15
.LCFI242:
	movl	%esi, %r15d
	pushq	%r14
.LCFI243:
	pushq	%r13
.LCFI244:
	pushq	%r12
.LCFI245:
	movq	%rdi, %r12
	pushq	%rbp
.LCFI246:
	pushq	%rbx
.LCFI247:
	subq	$8, %rsp
.LCFI248:
	movq	(%rdi), %rdi
	testq	%rdi, %rdi
	jne	.L11621
	testl	%esi, %esi
	jne	.L11683
	leaq	32(%r12), %rdx
	xorl	%ebp, %ebp
	movq	%rdx, (%rsp)
	movq	32(%r12), %rbx
	movzbl	16(%rbx), %ecx
	movq	8(%rbx), %r8
	movq	%rbx, %rdi
	movzbl	16(%r8), %edx
	cmpb	$116, %cl
	je	.L41349
	cmpb	$115, %cl
	je	.L41355
.L11624:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L11630
	cmpb	$49, %al
	je	.L11630
	cmpb	$50, %al
	je	.L11630
	cmpb	$101, %al
	je	.L11630
.L11629:
	cmpl	$23, %edx
	je	.L41356
	cmpl	$18, %edx
	je	.L41357
	movq	%rbx, %rbp
.L11632:
	movq	(%rsp), %r8
	testl	%r15d, %r15d
	movq	%rbp, (%r8)
	je	.L41358
.L11683:
	movq	32(%r12), %rbx
.L11620:
	addq	$8, %rsp
	movq	%rbx, %rax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L41358:
	movq	32(%r12), %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L11683
	movq	32(%r12), %rdi
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	non_lvalue
.L41357:
	movzbl	%cl, %edi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rdi), %eax
	movq	8(%r8), %r14
	cmpb	$114, %al
	je	.L11635
	cmpb	$100, %al
	je	.L11635
.L11634:
	movzbl	17(%r8), %edi
	movl	$1, %esi
	movl	%edi, %r10d
	movl	%edi, %r13d
	shrb	$3, %r10b
	shrb	$4, %r13b
	andl	$1, %r10d
	andl	%r13d, %esi
	addl	%r10d, %r10d
	orl	%r10d, %esi
	movzbl	62(%r8), %r10d
	movzbl	16(%r8), %r8d
	movl	%r10d, %r9d
	shrb	$5, %r9b
	andl	$1, %r9d
	sall	$2, %r9d
	orl	%r9d, %esi
	xorl	%r9d, %r9d
	cmpb	$20, %r8b
	je	.L41359
.L11638:
	leal	0(,%r9,8), %r13d
	orl	%r13d, %esi
	jne	.L11637
	testl	%edx, %edx
	jne	.L11637
	testl	%r11d, %r11d
	je	.L11636
.L11637:
	movl	%edi, %r13d
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %dil
	shrb	$4, %r13b
	movl	%r10d, %ecx
	movl	%edi, %r9d
	andl	%r13d, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %r8b
	je	.L41360
.L11640:
	leal	0(,%rcx,8), %r8d
	movq	%r14, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%rbx), %ecx
	movq	%rax, %r14
.L11636:
	cmpb	$41, %cl
	je	.L41361
	cmpb	$47, %cl
	je	.L41362
	xorl	%r13d, %r13d
	testl	%ebp, %ebp
	je	.L41363
.L11679:
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L11680
	testl	%r13d, %r13d
	movq	%rbx, %rbp
	je	.L11632
.L11680:
	movq	%r14, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %rbp
	je	.L41364
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbp, %rdi
	movq	%rax, %rsi
.L41354:
	call	convert
.L41353:
	movq	%rax, %rbp
	jmp	.L11632
.L41364:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, %rbp
	call	mark_addressable
	testl	%eax, %eax
	jne	.L11682
	movq	global_trees(%rip), %rbp
	jmp	.L11632
.L11682:
	movq	%rbx, %rdi
	call	staticp
	movzbl	17(%rbp), %ebx
	movl	%eax, %r9d
	andb	$1, %r9b
	addb	%r9b, %r9b
	andb	$-4, %bl
	orb	%r9b, %bl
	movb	%bl, 17(%rbp)
	jmp	.L11632
.L41363:
	movq	%rbx, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r13d
	jmp	.L11679
.L41362:
	movq	40(%rbx), %rbp
	movq	8(%rbp), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L11644
	cmpl	$18, %r14d
	je	.L11644
	movzbl	16(%rbp), %edx
	cmpb	$32, %dl
	je	.L41365
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L11647
	cmpb	$34, %dl
	je	.L41366
.L11647:
	cmpb	$116, %dl
	movq	%rbp, %rcx
	je	.L41351
	cmpb	$115, %dl
	je	.L41367
.L11656:
	movzbl	%dl, %r11d 
	movzbl	tree_code_type(%r11), %eax
	cmpb	$60, %al
	je	.L11661
	cmpb	$49, %al
	je	.L11661
	cmpb	$50, %al
	je	.L11661
	cmpb	$101, %al
	je	.L11661
.L11660:
	cmpl	$10, %r14d
	je	.L41368
	cmpb	$39, %dl
	je	.L41369
.L11669:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L11674
	testb	$32, 17(%r13)
	je	.L11675
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L11676
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r13), %esi
	movzwl	60(%rdx), %r13d
	andl	$511, %esi
	andl	$511, %r13d
	cmpl	%r13d, %esi
	je	.L11676
.L11675:
	movq	integer_types+40(%rip), %rdi
.L41352:
	movq	%rbp, %rsi
	call	convert
.L11645:
	movq	8(%rax), %rsi
	movq	32(%rbx), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L41353
.L11676:
	movq	integer_types+48(%rip), %rdi
	jmp	.L41352
.L11674:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L11677
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L11677
	movq	global_trees+192(%rip), %r10
	cmpq	%r10, 128(%r13)
	je	.L41370
.L11677:
	cmpl	$5, %r14d
	je	.L41371
	movq	%rbp, %rax
	jmp	.L11645
.L41371:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L11645
.L41370:
	movq	global_trees+200(%rip), %rdi
	jmp	.L41352
	.p2align 6,,7
.L41369:
	movq	40(%rbp), %rdx
	testb	$2, 53(%rdx)
	je	.L11669
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%rdi), %esi
	movq	40(%rdx), %rdi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L11669
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L11675
	testb	$32, 17(%r13)
	jne	.L11676
	jmp	.L11675
	.p2align 6,,7
.L41368:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L11668
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L11667
.L11668:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L11667:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L41352
.L11661:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbp)
	jmp	.L11660
.L41367:
	movq	32(%rbp), %rsi
	movq	8(%rbp), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L11656
.L11659:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbp
	cmpb	$116, %dl
	jne	.L41372
.L41351:
	movq	32(%rbp), %rsi
	jmp	.L11659
.L41372:
	cmpb	$115, %dl
	jne	.L11656
	movq	32(%rsi), %r8
	movq	8(%rbp), %r9
	cmpq	%r9, 8(%r8)
	movq	%r8, %rsi
	je	.L11659
	jmp	.L11656
.L41366:
	movl	pedantic(%rip), %edi
	testl	%edi, %edi
	jne	.L11651
	cmpb	$51, 48(%rbp)
	je	.L11651
	cmpq	$0, current_function_decl(%rip)
	je	.L11653
	movzbl	17(%rbp), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L41373
.L11653:
	movq	%rbp, %rsi
.L11654:
	movq	%rsi, %rbp
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L11651:
	movq	%rax, %r13
	jmp	.L11647
.L41373:
	movq	104(%rbp), %rax
	testq	%rax, %rax
	je	.L11653
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L11653
	testb	$2, 17(%rax)
	je	.L11653
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L11654
	jmp	.L11653
	.p2align 6,,7
.L41365:
	movq	104(%rbp), %rbp
	movzbl	16(%rbp), %edx
	jmp	.L11647
.L11644:
	movq	%rbp, %rdi
	call	default_function_array_conversion
	jmp	.L11645
.L41361:
	movq	72(%r14), %rdi
	movq	32(%rbx), %rsi
	jmp	.L41354
.L41360:
	testq	%r14, %r14
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L11640
.L41359:
	testq	%r14, %r14
	movl	$1, %eax
	cmovne	%eax, %r9d
	jmp	.L11638
.L11635:
	movzbl	17(%rbx), %r13d
	movl	$1, %r11d
	movl	%r13d, %edx
	shrb	$3, %r13b
	shrb	$4, %dl
	andl	%r13d, %r11d
	andl	$1, %edx
	jmp	.L11634
.L41356:
	movl	$121, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L41353
.L11630:
	movl	24(%rdi), %eax
	movl	%eax, 24(%rbx)
	jmp	.L11629
.L41355:
	movq	32(%rbx), %rsi
	cmpq	%r8, 8(%rsi)
	jne	.L11624
	.p2align 4,,7
.L11628:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %rbx
	movzbl	16(%rsi), %ecx
	cmove	%eax, %ebp
	cmpb	$116, %cl
	jne	.L41374
.L41349:
	movq	32(%rbx), %rsi
	jmp	.L11628
.L41374:
	cmpb	$115, %cl
	jne	.L11624
	movq	32(%rsi), %r10
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%r10)
	movq	%r10, %rsi
	je	.L11628
	jmp	.L11624
.L11621:
	xorl	%esi, %esi
	call	internal_build_compound_expr
	movq	32(%r12), %rdi
	movq	%rax, %rbx
	testb	$1, 17(%rdi)
	jne	.L11685
	movl	extra_warnings(%rip), %ebp
	testl	%ebp, %ebp
	jne	.L11687
	movl	warn_unused_value(%rip), %r15d
	testl	%r15d, %r15d
	je	.L11686
.L11687:
	cmpb	$114, 16(%rdi)
	je	.L41375
.L11688:
	movl	$.LC134, %edi
	xorl	%eax, %eax
	call	warning
.L11686:
	movl	pedantic(%rip), %r14d
	testl	%r14d, %r14d
	je	.L11620
.L11690:
	movq	8(%rbx), %rsi
	movq	32(%r12), %rdx
	movq	%rbx, %rcx
	addq	$8, %rsp
	movl	$47, %edi
	xorl	%eax, %eax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	build
.L41375:
	movq	8(%rdi), %r11
	cmpb	$5, 16(%r11)
	jne	.L11688
	jmp	.L11686
.L11685:
	movl	warn_unused_value(%rip), %ecx
	testl	%ecx, %ecx
	je	.L11690
	call	warn_if_unused_value
	jmp	.L11690
.LFE53:
.Lfe53:
	.size	internal_build_compound_expr,.Lfe53-internal_build_compound_expr
	.align 2
	.p2align 4,,15
	.type	valid_compound_expr_initializer,@function
valid_compound_expr_initializer:
.LFB54:
	pushq	%rbp
.LCFI249:
	movq	%rsi, %rbp
	pushq	%rbx
.LCFI250:
	movq	%rdi, %rbx
	subq	$8, %rsp
.LCFI251:
	.p2align 4,,7
.L13053:
	cmpb	$47, 16(%rbx)
	jne	.L13051
	movq	32(%rbx), %rdi
	movq	%rbp, %rsi
	call	valid_compound_expr_initializer
	cmpq	global_trees(%rip), %rax
	je	.L13050
	movq	40(%rbx), %rbx
	jmp	.L13053
.L13050:
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	ret
.L13051:
	testb	$2, 17(%rbx)
	je	.L41376
.L13055:
	movq	%rbx, %rax
	jmp	.L13050
.L41376:
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L13055
	movq	global_trees(%rip), %rax
	jmp	.L13050
.LFE54:
.Lfe54:
	.size	valid_compound_expr_initializer,.Lfe54-valid_compound_expr_initializer
	.align 2
	.p2align 4,,15
	.type	digest_init,@function
digest_init:
.LFB55:
	pushq	%rbp
.LCFI252:
	movq	%rsp, %rbp
.LCFI253:
	pushq	%r15
.LCFI254:
	pushq	%r14
.LCFI255:
	movq	%rsi, %r14
	pushq	%r13
.LCFI256:
	movq	%rdi, %r13
	pushq	%r12
.LCFI257:
	pushq	%rbx
.LCFI258:
	subq	$376, %rsp
.LCFI259:
	movl	%ecx, -48(%rbp)
	movl	%edx, -44(%rbp)
	movzbl	16(%rdi), %edx
	movq	%rsi, %rdi
	movl	%edx, -52(%rbp)
	movq	global_trees(%rip), %rdx
	cmpq	%rdx, %r13
	movq	%rdx, %rax
	je	.L13967
	cmpq	%rdx, %rsi
	je	.L13967
	cmpq	%rdx, 8(%rsi)
	je	.L13967
	cmpb	$116, 16(%rsi)
	je	.L41584
.L13968:
	call	fold
	cmpl	$18, -52(%rbp)
	movq	%rax, %r15
	je	.L41585
.L13969:
	testq	%r15, %r15
	je	.L14209
	movq	8(%r15), %rax
	testq	%rax, %rax
	je	.L14209
	movq	128(%rax), %rbx
	movq	128(%r13), %r12
	cmpq	%r12, %rbx
	je	.L41551
	testq	%rbx, %rbx
	je	.L41551
	testq	%r12, %r12
	je	.L41551
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L41551
	movzbl	16(%r12), %eax
	testb	%al, %al
	je	.L41551
	cmpb	$6, %dl
	je	.L41586
.L14214:
	cmpb	$6, %al
	je	.L41587
.L14215:
	cmpb	$10, %dl
	je	.L41588
.L14216:
	cmpb	$10, 16(%r12)
	je	.L41589
.L14217:
	cmpq	%r12, %rbx
	movl	$1, -284(%rbp)
	je	.L14213
	movzbl	16(%rbx), %esi
	cmpb	16(%r12), %sil
	je	.L14219
	movl	$0, -284(%rbp)
.L14213:
	movl	-284(%rbp), %edi
	testl	%edi, %edi
	jne	.L14210
.L41541:
	cmpl	$18, -52(%rbp)
	je	.L41590
.L14369:
	cmpl	$9, -52(%rbp)
	je	.L41591
.L14528:
	cmpl	$13, -52(%rbp)
	je	.L41592
	.p2align 4,,7
.L14209:
	movl	-52(%rbp), %eax
	subl	$6, %eax
	cmpl	$1, %eax
	jbe	.L15026
	cmpl	$13, -52(%rbp)
	je	.L15026
	cmpl	$10, -52(%rbp)
	je	.L15026
	cmpl	$11, -52(%rbp)
	je	.L15026
	cmpl	$8, -52(%rbp)
	je	.L15026
	movq	32(%r13), %rax
	testq	%rax, %rax
	je	.L15078
	cmpb	$25, 16(%rax)
	je	.L15078
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC149, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r8
	xorl	%r12d, %r12d
	cmpq	%r8, %r14
	movq	%r14, %rbx
	movq	%r8, %r13
	jae	.L41455
.L15085:
	cmpl	$3, (%rbx)
	je	.L41593
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L15081:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L15085
.L41455:
	movslq	%r12d,%rbx
	movq	%r14, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L41469
.L15099:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L41594
	cmpl	$2, %eax
	je	.L41595
.L15093:
	movq	8(%r12), %r13
	movzbl	(%r13), %edi
	leaq	1(%r13), %rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	je	.L15089
	.p2align 4,,7
.L15098:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L15098
.L15089:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L15099
.L41469:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	jne	.L41596
.L15163:
	movq	global_trees(%rip), %r15
.L13965:
	leaq	-40(%rbp), %rsp
	movq	%r15, %rax
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
.L41596:
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L15163
.L41595:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L15093
.L41594:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L15089
.L41593:
	addl	$25, %r12d
	jmp	.L15081
.L15078:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L15103
	movq	%r13, -200(%rbp)
	xorl	%r15d, %r15d
	xorl	%r12d, %r12d
	movzbl	16(%r13), %eax
	cmpb	$20, %al
	je	.L15137
	cmpb	$18, %al
	je	.L15137
	cmpb	$22, %al
	je	.L15137
	cmpb	$21, %al
	je	.L15137
.L41460:
	cmpq	%r13, -200(%rbp)
	je	.L15163
	movl	-44(%rbp), %edx
	movl	-48(%rbp), %ecx
	movq	%r13, %rdi
	movq	%r14, %rsi
	call	digest_init
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%rax, 40(%r12)
	jmp	.L13965
	.p2align 6,,7
.L15137:
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movl	$46, %edi
	movq	%r13, %rsi
	call	build
	testq	%r12, %r12
	movq	%rax, %rbx
	jne	.L15107
	movq	%rax, %r15
.L15108:
	cmpb	$18, 16(%r13)
	movq	%rbx, %r12
	je	.L41597
	movq	24(%r13), %rax
	testq	%rax, %rax
	je	.L15111
	movq	8(%rax), %r13
.L15104:
	movzbl	16(%r13), %eax
	cmpb	$20, %al
	je	.L15137
	cmpb	$18, %al
	je	.L15137
	cmpb	$22, %al
	je	.L15137
	cmpb	$21, %al
	je	.L15137
	jmp	.L41460
	.p2align 6,,7
.L15111:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC150, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rcx
	xorl	%r12d, %r12d
	cmpq	%rcx, %r14
	movq	%r14, %rbx
	movq	%rcx, %r13
	jae	.L41462
.L15119:
	cmpl	$3, (%rbx)
	je	.L41598
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L15115:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L15119
.L41462:
	movslq	%r12d,%r9
	movq	%r14, %r12
	addq	$16, %r9
	andq	$-16, %r9
	subq	%r9, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L41469
.L15133:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L41599
	cmpl	$2, %eax
	je	.L41600
.L15127:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %esi
	leaq	1(%rdx), %rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	je	.L15123
	.p2align 4,,7
.L15132:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L15132
.L15123:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L15133
	jmp	.L41469
.L41600:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L15127
.L41599:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L15123
.L41598:
	addl	$25, %r12d
	jmp	.L15115
	.p2align 6,,7
.L41597:
	movq	8(%r13), %r13
	jmp	.L15104
	.p2align 6,,7
.L15107:
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%rax, 40(%r12)
	jmp	.L15108
.L15103:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC150, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r13
	xorl	%r12d, %r12d
	cmpq	%r13, %r14
	movq	%r14, %rbx
	jae	.L41467
.L15146:
	cmpl	$3, (%rbx)
	je	.L41601
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L15142:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L15146
.L41467:
	movslq	%r12d,%r15
	movq	%r14, %r12
	addq	$16, %r15
	andq	$-16, %r15
	subq	%r15, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L41469
.L15160:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L41602
	cmpl	$2, %eax
	je	.L41603
.L15154:
	movq	8(%r12), %r8
	movzbl	(%r8), %r14d
	leaq	1(%r8), %rcx
	testb	%r14b, %r14b
	movb	%r14b, (%rbx)
	je	.L15150
	.p2align 4,,7
.L15159:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L15159
.L15150:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L15160
	jmp	.L41469
.L41603:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L15154
.L41602:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L15150
.L41601:
	addl	$25, %r12d
	jmp	.L15142
	.p2align 6,,7
.L15026:
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%r13, %rdi
	movq	%r14, %rsi
	movl	$.LC147, %edx
	call	convert_for_assignment
	movl	-44(%rbp), %ebx
	movq	%rax, %r15
	testl	%ebx, %ebx
	je	.L13965
	testb	$2, 17(%rax)
	jne	.L15027
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rcx
	xorl	%r12d, %r12d
	cmpq	%rcx, %r14
	movq	%r14, %rbx
	movq	%rcx, %r13
	jae	.L41445
	.p2align 4,,7
.L15034:
	cmpl	$3, (%rbx)
	je	.L41604
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L15030:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L15034
.L41445:
	movslq	%r12d,%rdi
	movq	%r14, %r12
	addq	$16, %rdi
	andq	$-16, %rdi
	subq	%rdi, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L41469
	.p2align 4,,7
.L15048:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L41605
	cmpl	$2, %eax
	je	.L41606
.L15042:
	movq	8(%r12), %r11
	movzbl	(%r11), %r13d
	leaq	1(%r11), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L15038
	.p2align 4,,7
.L15047:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L15047
.L15038:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L15048
	jmp	.L41469
.L41606:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L15042
.L41605:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L15038
.L41604:
	addl	$25, %r12d
	jmp	.L15030
.L15027:
	movq	8(%rax), %rsi
	movq	%rax, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L13965
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC148, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rdx
	xorl	%r12d, %r12d
	cmpq	%rdx, %r14
	movq	%r14, %rbx
	movq	%rdx, %r13
	jae	.L41450
.L15060:
	cmpl	$3, (%rbx)
	je	.L41607
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L15056:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L15060
.L41450:
	movslq	%r12d,%r15
	movq	%r14, %r12
	addq	$16, %r15
	andq	$-16, %r15
	subq	%r15, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L41469
.L15074:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L41608
	cmpl	$2, %eax
	je	.L41609
.L15068:
	movq	8(%r12), %r10
	movzbl	(%r10), %esi
	leaq	1(%r10), %rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	je	.L15064
	.p2align 4,,7
.L15073:
	movzbl	(%rcx), %r14d
	incq	%rbx
	incq	%rcx
	testb	%r14b, %r14b
	movb	%r14b, (%rbx)
	jne	.L15073
.L15064:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L15074
	jmp	.L41469
.L41609:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L15068
.L41608:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L15064
.L41607:
	addl	$25, %r12d
	jmp	.L15056
.L41592:
	movq	8(%r15), %rax
	movzbl	16(%rax), %edx
	cmpb	$18, %dl
	je	.L14687
	cmpb	$23, %dl
	jne	.L14209
.L14687:
	movq	8(%rax), %rbx
	movq	8(%r13), %r12
	cmpq	%r12, %rbx
	je	.L41560
	testq	%rbx, %rbx
	je	.L41560
	testq	%r12, %r12
	je	.L41560
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L41560
	movzbl	16(%r12), %eax
	testb	%al, %al
	je	.L41560
	cmpb	$6, %dl
	je	.L41610
.L14691:
	cmpb	$6, %al
	je	.L41611
.L14692:
	cmpb	$10, %dl
	je	.L41612
.L14693:
	cmpb	$10, 16(%r12)
	je	.L41613
.L14694:
	cmpq	%r12, %rbx
	movl	$1, -404(%rbp)
	je	.L14690
	movzbl	16(%rbx), %esi
	cmpb	16(%r12), %sil
	je	.L14696
	movl	$0, -404(%rbp)
.L14690:
	movl	-404(%rbp), %edi
	testl	%edi, %edi
	je	.L14209
.L14210:
	cmpl	$13, -52(%rbp)
	je	.L41614
.L14846:
	movl	-44(%rbp), %eax
	testl	%eax, %eax
	je	.L14907
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L14907
	cmpb	$-86, 16(%r15)
	je	.L41615
.L14907:
	cmpl	$18, -52(%rbp)
	je	.L41616
.L14908:
	movl	optimize(%rip), %eax
	testl	%eax, %eax
	je	.L14933
	cmpb	$34, 16(%r15)
	je	.L41617
.L14933:
	movl	-44(%rbp), %edx
	testl	%edx, %edx
	je	.L13965
	movl	pedantic(%rip), %esi
	testl	%esi, %esi
	je	.L14940
	cmpb	$47, 16(%r15)
	je	.L41618
.L14940:
	movl	-44(%rbp), %r12d
	testl	%r12d, %r12d
	je	.L13965
	testb	$2, 17(%r15)
	je	.L15000
	movq	8(%r15), %rsi
	movq	%r15, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L13965
.L15000:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r15
	xorl	%r12d, %r12d
	cmpq	%r15, %r14
	movq	%r14, %rbx
	movq	%r15, %r13
	jae	.L41440
.L15007:
	cmpl	$3, (%rbx)
	je	.L41619
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L15003:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L15007
.L41440:
	movslq	%r12d,%rsi
	movq	%r14, %r12
	addq	$16, %rsi
	andq	$-16, %rsi
	subq	%rsi, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L41469
.L15021:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L41620
	cmpl	$2, %eax
	je	.L41621
.L15015:
	movq	8(%r12), %r14
	movzbl	(%r14), %r10d
	leaq	1(%r14), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L15011
	.p2align 4,,7
.L15020:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L15020
.L15011:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L15021
	jmp	.L41469
.L41621:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L15015
.L41620:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L15011
.L41619:
	addl	$25, %r12d
	jmp	.L15003
.L41618:
	movq	8(%r15), %rbx
	movq	32(%r15), %rdi
	movq	%rbx, %rsi
	call	valid_compound_expr_initializer
	movq	global_trees(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L41622
	movq	40(%r15), %rdi
	movq	%rbx, %rsi
	call	valid_compound_expr_initializer
	movq	global_trees(%rip), %rdx
	movq	%rax, %r15
.L14943:
	cmpq	%rdx, %r15
	je	.L41623
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rcx
	xorl	%r12d, %r12d
	cmpq	%rcx, %r14
	movq	%r14, %rbx
	movq	%rcx, %r13
	jae	.L41435
.L14979:
	cmpl	$3, (%rbx)
	je	.L41624
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L14975:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L14979
.L41435:
	movslq	%r12d,%rdi
	movq	%r14, %r12
	addq	$16, %rdi
	andq	$-16, %rdi
	subq	%rdi, %rsp
	cmpq	%r13, %r14
	movq	%rsp, -192(%rbp)
	movq	%rsp, %rbx
	jae	.L41437
.L14993:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L41625
	cmpl	$2, %eax
	je	.L41626
.L14987:
	movq	8(%r12), %r9
	movzbl	(%r9), %r11d
	leaq	1(%r9), %rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	je	.L14983
.L14992:
	movzbl	(%rcx), %edx
	incq	%rbx
	incq	%rcx
	testb	%dl, %dl
	movb	%dl, (%rbx)
	jne	.L14992
.L14983:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L14993
.L41437:
	movb	$0, (%rbx)
	movq	-192(%rbp), %rbx
	cmpb	$0, (%rbx)
	jne	.L41627
.L14972:
	movl	flag_pedantic_errors(%rip), %eax
	testl	%eax, %eax
	je	.L13965
	jmp	.L15163
.L41627:
	movl	$.LC142, %edi
	movq	%rbx, %rsi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L14972
.L41626:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L14987
.L41625:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L14983
.L41624:
	addl	$25, %r12d
	jmp	.L14975
.L41623:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r10
	xorl	%r12d, %r12d
	cmpq	%r10, %r14
	movq	%r14, %rbx
	movq	%r10, %r13
	jae	.L41430
.L14954:
	cmpl	$3, (%rbx)
	je	.L41628
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L14950:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L14954
.L41430:
	movslq	%r12d,%rbx
	movq	%r14, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, -184(%rbp)
	movq	%rsp, %rbx
	jae	.L41432
.L14968:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L41629
	cmpl	$2, %eax
	je	.L41630
.L14962:
	movq	8(%r12), %r8
	movzbl	(%r8), %r14d
	leaq	1(%r8), %rcx
	testb	%r14b, %r14b
	movb	%r14b, (%rbx)
	je	.L14958
.L14967:
	movzbl	(%rcx), %r13d
	incq	%rbx
	incq	%rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	jne	.L14967
.L14958:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L14968
.L41432:
	movb	$0, (%rbx)
	movq	-184(%rbp), %rdx
	cmpb	$0, (%rdx)
	je	.L14972
	movl	$.LC142, %edi
	movq	%rdx, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L14972
.L41630:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L14962
.L41629:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L14958
.L41628:
	addl	$25, %r12d
	jmp	.L14950
.L41622:
	movq	%rdx, %r15
	jmp	.L14943
.L41617:
	movl	pedantic(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L14933
	cmpb	$51, 48(%r15)
	je	.L14933
	cmpq	$0, current_function_decl(%rip)
	je	.L14938
	movzbl	17(%r15), %r9d
	andb	$24, %r9b
	cmpb	$16, %r9b
	je	.L41631
.L14938:
	movq	%r15, %rax
.L14939:
	movq	%rax, %r15
	jmp	.L14933
.L41631:
	movq	104(%r15), %rax
	testq	%rax, %rax
	je	.L14938
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L14938
	testb	$2, 17(%rax)
	je	.L14938
	cmpb	$46, %dl
	jne	.L14939
	jmp	.L14938
	.p2align 6,,7
.L41616:
	movzbl	16(%r15), %eax
	cmpb	$29, %al
	je	.L14908
	cmpb	$46, %al
	je	.L14908
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC145, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r8
	xorl	%r12d, %r12d
	cmpq	%r8, %r14
	movq	%r14, %rbx
	movq	%r8, %r13
	jae	.L41425
.L14915:
	cmpl	$3, (%rbx)
	je	.L41632
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L14911:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L14915
.L41425:
	movslq	%r12d,%rcx
	movq	%r14, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L41469
.L14929:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L41633
	cmpl	$2, %eax
	je	.L41634
.L14923:
	movq	8(%r12), %rdi
	movzbl	(%rdi), %r13d
	leaq	1(%rdi), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L14919
.L14928:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L14928
.L14919:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L14929
	jmp	.L41469
.L41634:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L14923
.L41633:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L14919
.L41632:
	addl	$25, %r12d
	jmp	.L14911
.L41615:
	movq	32(%r15), %r14
	movq	32(%r14), %rbx
	movq	104(%rbx), %r15
	jmp	.L14907
.L41614:
	movzbl	16(%r15), %ecx
	movq	8(%r15), %rdi
	xorl	%ebx, %ebx
	movq	%r15, %r8
	movzbl	16(%rdi), %esi
	cmpb	$116, %cl
	je	.L41543
	cmpb	$115, %cl
	je	.L41635
.L14848:
	movzbl	%cl, %r12d 
	movzbl	tree_code_type(%r12), %eax
	cmpb	$60, %al
	je	.L14854
	cmpb	$49, %al
	je	.L14854
	cmpb	$50, %al
	je	.L14854
	cmpb	$101, %al
	je	.L14854
.L14853:
	cmpl	$23, %esi
	je	.L41636
	cmpl	$18, %esi
	je	.L41637
	movq	%r15, %rbx
.L14856:
	movq	%rbx, %r15
	jmp	.L14846
.L41637:
	movzbl	%cl, %r8d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r8), %eax
	movq	8(%rdi), %r13
	cmpb	$114, %al
	je	.L14859
	cmpb	$100, %al
	je	.L14859
.L14858:
	movzbl	17(%rdi), %r9d
	movl	$1, %esi
	xorl	%r8d, %r8d
	movl	%r9d, %r10d
	movl	%r9d, %r12d
	shrb	$3, %r10b
	shrb	$4, %r12b
	andl	$1, %r10d
	andl	%r12d, %esi
	addl	%r10d, %r10d
	orl	%r10d, %esi
	movzbl	62(%rdi), %r10d
	movzbl	16(%rdi), %edi
	movl	%r10d, %r14d
	shrb	$5, %r14b
	andl	$1, %r14d
	sall	$2, %r14d
	orl	%r14d, %esi
	cmpb	$20, %dil
	je	.L41638
.L14862:
	leal	0(,%r8,8), %r14d
	orl	%r14d, %esi
	jne	.L14861
	testl	%edx, %edx
	jne	.L14861
	testl	%r11d, %r11d
	je	.L14860
.L14861:
	movl	%r9d, %r12d
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r9b
	shrb	$4, %r12b
	movl	%r10d, %ecx
	movl	%r9d, %r8d
	andl	%r12d, %esi
	andl	$1, %ecx
	andl	$1, %r8d
	sall	$2, %ecx
	addl	%r8d, %r8d
	orl	%r8d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L41639
.L14864:
	leal	0(,%rcx,8), %edi
	orl	%edi, %esi
	movq	%r13, %rdi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%r15), %ecx
	movq	%rax, %r13
.L14860:
	cmpb	$41, %cl
	je	.L41640
	cmpb	$47, %cl
	je	.L41641
	xorl	%r12d, %r12d
	testl	%ebx, %ebx
	je	.L41642
.L14903:
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L14904
	testl	%r12d, %r12d
	movq	%r15, %rbx
	je	.L14856
.L14904:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r15)
	movq	%rax, %rbx
	je	.L41643
	movl	$121, %edi
	movq	%r15, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
.L41582:
	call	convert
.L41562:
	movq	%rax, %rbx
	jmp	.L14856
.L41643:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r15, %rdx
	call	build1
	movq	%r15, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	jne	.L14906
	movq	global_trees(%rip), %rbx
	jmp	.L14856
.L14906:
	movq	%r15, %rdi
	call	staticp
	movzbl	17(%rbx), %r15d
	movl	%eax, %r10d
	andb	$1, %r10b
	addb	%r10b, %r10b
	andb	$-4, %r15b
	orb	%r10b, %r15b
	movb	%r15b, 17(%rbx)
	jmp	.L14856
.L41642:
	movq	%r15, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r12d
	jmp	.L14903
.L41641:
	movq	40(%r15), %rbx
	movq	8(%rbx), %r12
	movzbl	16(%r12), %r13d
	movq	%r12, %rax
	cmpl	$23, %r13d
	je	.L14868
	cmpl	$18, %r13d
	je	.L14868
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L41644
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L14871
	cmpb	$34, %dl
	je	.L41645
.L14871:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L41545
	cmpb	$115, %dl
	je	.L41646
.L14880:
	movzbl	%dl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L14885
	cmpb	$49, %al
	je	.L14885
	cmpb	$50, %al
	je	.L14885
	cmpb	$101, %al
	je	.L14885
.L14884:
	cmpl	$10, %r13d
	je	.L41647
	cmpb	$39, %dl
	je	.L41648
.L14893:
	movq	%r12, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L14898
	testb	$32, 17(%r12)
	je	.L14899
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L14900
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r12), %r9d
	movzwl	60(%rdx), %r12d
	andl	$511, %r9d
	andl	$511, %r12d
	cmpl	%r12d, %r9d
	je	.L14900
.L14899:
	movq	integer_types+40(%rip), %rdi
.L41561:
	movq	%rbx, %rsi
	call	convert
.L14869:
	movq	8(%rax), %rsi
	movq	32(%r15), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L41562
.L14900:
	movq	integer_types+48(%rip), %rdi
	jmp	.L41561
	.p2align 6,,7
.L14898:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L14901
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L14901
	movq	global_trees+192(%rip), %rsi
	cmpq	%rsi, 128(%r12)
	je	.L41649
.L14901:
	cmpl	$5, %r13d
	je	.L41650
	movq	%rbx, %rax
	jmp	.L14869
.L41650:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L14869
.L41649:
	movq	global_trees+200(%rip), %rdi
	jmp	.L41561
	.p2align 6,,7
.L41648:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L14893
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%rdi), %esi
	movq	40(%rdx), %rdi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L14893
	movl	flag_traditional(%rip), %r11d
	testl	%r11d, %r11d
	je	.L14899
	testb	$32, 17(%r12)
	jne	.L14900
	jmp	.L14899
	.p2align 6,,7
.L41647:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r12), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L14892
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L14891
.L14892:
	testb	$32, 17(%r12)
	movl	$1, %eax
	cmovne	%eax, %esi
.L14891:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L41561
.L14885:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L14884
.L41646:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L14880
.L14883:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L41651
.L41545:
	movq	32(%rbx), %rsi
	jmp	.L14883
.L41651:
	cmpb	$115, %dl
	jne	.L14880
	movq	32(%rsi), %r14
	movq	8(%rbx), %rax
	cmpq	%rax, 8(%r14)
	movq	%r14, %rsi
	je	.L14883
	jmp	.L14880
.L41645:
	movl	pedantic(%rip), %r9d
	testl	%r9d, %r9d
	jne	.L14875
	cmpb	$51, 48(%rbx)
	je	.L14875
	cmpq	$0, current_function_decl(%rip)
	je	.L14877
	movzbl	17(%rbx), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L41652
.L14877:
	movq	%rbx, %rsi
.L14878:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L14875:
	movq	%rax, %r12
	jmp	.L14871
.L41652:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L14877
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L14877
	testb	$2, 17(%rax)
	je	.L14877
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L14878
	jmp	.L14877
	.p2align 6,,7
.L41644:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L14871
.L14868:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L14869
.L41640:
	movq	72(%r13), %rdi
	movq	32(%r15), %rsi
	jmp	.L41582
.L41639:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L14864
.L41638:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %r8d
	jmp	.L14862
.L14859:
	movzbl	17(%r15), %r9d
	movl	$1, %r11d
	movl	%r9d, %edx
	shrb	$3, %r9b
	shrb	$4, %dl
	andl	%r9d, %r11d
	andl	$1, %edx
	jmp	.L14858
.L41636:
	movl	$121, %edi
	movq	%r15, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L41562
.L14854:
	movl	24(%r8), %eax
	movl	%eax, 24(%r15)
	jmp	.L14853
.L41635:
	movq	32(%r15), %rdx
	cmpq	%rdi, 8(%rdx)
	jne	.L14848
	.p2align 4,,7
.L14852:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rdx, %r15
	movzbl	16(%rdx), %ecx
	cmove	%eax, %ebx
	cmpb	$116, %cl
	jne	.L41653
.L41543:
	movq	32(%r15), %rdx
	jmp	.L14852
.L41653:
	cmpb	$115, %cl
	jne	.L14848
	movq	32(%rdx), %r14
	movq	8(%r15), %r13
	cmpq	%r13, 8(%r14)
	movq	%r14, %rdx
	je	.L14852
	jmp	.L14848
.L14696:
	movzbl	17(%rbx), %r10d
	movzbl	62(%rbx), %r9d
	xorl	%ecx, %ecx
	movl	%r10d, %edx
	shrb	$5, %r9b
	shrb	$3, %r10b
	shrb	$4, %dl
	andl	$1, %r10d
	andl	$1, %r9d
	andl	$1, %edx
	addl	%r10d, %r10d
	sall	$2, %r9d
	orl	%r10d, %edx
	orl	%r9d, %edx
	cmpb	$20, %sil
	je	.L41654
.L14698:
	movzbl	17(%r12), %r8d
	leal	0(,%rcx,8), %edi
	movzbl	62(%r12), %ecx
	orl	%edx, %edi
	movl	%r8d, %edx
	shrb	$5, %cl
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	$1, %r8d
	andl	$1, %ecx
	andl	$1, %edx
	addl	%r8d, %r8d
	sall	$2, %ecx
	orl	%r8d, %edx
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	cmpb	$20, %sil
	je	.L41655
.L14699:
	leal	0(,%rcx,8), %esi
	movl	$0, -404(%rbp)
	orl	%esi, %edx
	cmpl	%edx, %edi
	jne	.L14690
	movq	128(%r12), %rax
	cmpq	%rax, 128(%rbx)
	je	.L41560
	movq	%rbx, %rdi
	movq	%r12, %rsi
	call	*targetm+264(%rip)
	movl	$0, -404(%rbp)
	testl	%eax, %eax
	movl	%eax, -156(%rbp)
	je	.L14690
	movl	$0, -404(%rbp)
	movzbl	16(%rbx), %eax
	cmpl	$18, %eax
	je	.L14825
	cmpl	$18, %eax
	ja	.L14842
	cmpl	$13, %eax
	je	.L14703
.L14702:
	cmpl	$2, -156(%rbp)
	jne	.L14690
	cmpl	$1, -404(%rbp)
	movl	-156(%rbp), %eax
	cmovne	-404(%rbp), %eax
	movl	%eax, -404(%rbp)
	jmp	.L14690
.L14703:
	movq	8(%rbx), %rdi
	movq	8(%r12), %rsi
	cmpq	%rsi, %rdi
	je	.L14704
	call	comptypes
.L41559:
	movl	%eax, -404(%rbp)
	jmp	.L14702
.L14704:
	movl	$1, -404(%rbp)
	jmp	.L14702
.L14842:
	cmpl	$20, %eax
	je	.L14838
	cmpl	$23, %eax
	jne	.L14702
	movl	$1, -368(%rbp)
	movq	8(%r12), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L14707
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -368(%rbp)
	je	.L14702
.L14707:
	movq	24(%rbx), %rdx
	movq	%rdx, -400(%rbp)
	testq	%rdx, %rdx
	movq	24(%r12), %rax
	movq	%rax, -392(%rbp)
	je	.L41656
	cmpq	$0, -392(%rbp)
	je	.L41657
	movl	$1, -404(%rbp)
	xorl	%r12d, %r12d
.L14822:
	cmpq	$0, -400(%rbp)
	je	.L41658
	cmpq	$0, -392(%rbp)
	je	.L14811
	movq	-400(%rbp), %rcx
	movq	32(%rcx), %rdi
	testq	%rdi, %rdi
	je	.L41659
	movq	-392(%rbp), %rsi
	movq	32(%rsi), %rax
	testq	%rax, %rax
	jne	.L14797
.L41581:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L14811
.L14796:
	cmpl	-404(%rbp), %r12d
	movl	-404(%rbp), %ebx
	movq	-400(%rbp), %r10
	movq	-392(%rbp), %r11
	cmovg	%r12d, %ebx
	movl	%ebx, -404(%rbp)
	movq	(%r10), %rdi
	movq	%rdi, -400(%rbp)
	movq	(%r11), %rax
	movq	%rax, -392(%rbp)
	jmp	.L14822
.L14811:
	movl	$0, -404(%rbp)
.L14791:
	cmpl	$1, -404(%rbp)
	movl	-404(%rbp), %eax
	cmove	-368(%rbp), %eax
	jmp	.L41559
.L14797:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r12d
	jne	.L14796
	movq	-400(%rbp), %r9
	movq	32(%r9), %rax
	cmpb	$21, 16(%rax)
	je	.L41661
.L14801:
	movq	-392(%rbp), %rbx
	movq	32(%rbx), %rax
	cmpb	$21, 16(%rax)
	jne	.L14811
	cmpq	$0, 96(%rax)
	je	.L14812
	testb	$8, 62(%rax)
	je	.L14811
.L14812:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14811
	movq	-400(%rbp), %r8
	movq	32(%r8), %rcx
	movq	32(%rcx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14811
	movq	-392(%rbp), %rdx
	movq	32(%rdx), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L14811
.L14818:
	movq	-400(%rbp), %r9
	movq	8(%rbx), %rdi
	movq	32(%r9), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14814
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L14818
	jmp	.L14811
.L14814:
	testq	%rbx, %rbx
	jne	.L14796
	jmp	.L14811
.L41661:
	cmpq	$0, 96(%rax)
	je	.L14802
	testb	$8, 62(%rax)
	je	.L14801
.L14802:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14801
	movq	-392(%rbp), %rax
	movq	32(%rax), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14801
	movq	-400(%rbp), %rdi
	movq	32(%rdi), %r11
	movq	24(%r11), %rbx
	testq	%rbx, %rbx
	je	.L14811
.L14808:
	movq	-392(%rbp), %r10
	movq	8(%rbx), %rdi
	movq	32(%r10), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14814
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L14808
	jmp	.L14811
.L41659:
	movq	-392(%rbp), %r8
	movq	32(%r8), %rdi
	jmp	.L41581
.L41658:
	cmpq	$0, -392(%rbp)
	je	.L14791
	jmp	.L14811
.L41657:
	movq	-400(%rbp), %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L14702
	movq	136(%r12), %rax
	testq	%rax, %rax
	je	.L41489
	movq	%rax, %r12
	movl	$1, -384(%rbp)
	movl	$0, -380(%rbp)
.L14786:
	cmpq	$0, -400(%rbp)
	je	.L41662
	testq	%r12, %r12
	je	.L14775
	movq	-400(%rbp), %r11
	movq	32(%r11), %rdi
	testq	%rdi, %rdi
	je	.L41663
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L14761
.L41579:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L14775
.L14760:
	movl	-384(%rbp), %eax
	movl	-380(%rbp), %ebx
	cmpl	%eax, -380(%rbp)
	movq	-400(%rbp), %r10
	cmovle	%eax, %ebx
	movl	%ebx, -384(%rbp)
	movq	(%r10), %rdi
	movq	%rdi, -400(%rbp)
	movq	(%r12), %r12
	jmp	.L14786
.L14775:
	movl	$0, -384(%rbp)
.L14755:
	movl	$2, -404(%rbp)
	cmpl	$1, -384(%rbp)
.L41580:
	jne	.L14702
	movl	-368(%rbp), %eax
	jmp	.L41559
.L14761:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -380(%rbp)
	jne	.L14760
	movq	-400(%rbp), %r10
	movq	32(%r10), %rax
	cmpb	$21, 16(%rax)
	je	.L41665
.L14765:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L14775
	cmpq	$0, 96(%rax)
	je	.L14776
	testb	$8, 62(%rax)
	je	.L14775
.L14776:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14775
	movq	-400(%rbp), %rax
	movq	32(%rax), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14775
	movq	32(%r12), %rdx
	movq	24(%rdx), %rbx
	testq	%rbx, %rbx
	je	.L14775
.L14782:
	movq	-400(%rbp), %r11
	movq	8(%rbx), %rdi
	movq	32(%r11), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14778
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L14782
	jmp	.L14775
.L14778:
	testq	%rbx, %rbx
	jne	.L14760
	jmp	.L14775
.L41665:
	cmpq	$0, 96(%rax)
	je	.L14766
	testb	$8, 62(%rax)
	je	.L14765
.L14766:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14765
	movq	32(%r12), %rcx
	movq	32(%rcx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14765
	movq	-400(%rbp), %rsi
	movq	32(%rsi), %r8
	movq	24(%r8), %rbx
	testq	%rbx, %rbx
	je	.L14775
.L14772:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14778
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L14772
	jmp	.L14775
.L41663:
	movq	32(%r12), %rdi
	jmp	.L41579
.L41662:
	testq	%r12, %r12
	je	.L14755
	jmp	.L14775
.L41489:
	movl	-368(%rbp), %r12d
	movl	%r12d, -404(%rbp)
	jmp	.L14702
.L41656:
	movq	%rax, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L14702
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L41489
	movq	%rax, %r12
	movl	$1, -376(%rbp)
	movl	$0, -372(%rbp)
.L14747:
	cmpq	$0, -392(%rbp)
	je	.L41666
	testq	%r12, %r12
	je	.L14736
	movq	-392(%rbp), %rbx
	movq	32(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L41667
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L14722
.L41578:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L14736
.L14721:
	movl	-376(%rbp), %eax
	movl	-372(%rbp), %ebx
	cmpl	%eax, -372(%rbp)
	movq	-392(%rbp), %rdi
	cmovle	%eax, %ebx
	movl	%ebx, -376(%rbp)
	movq	(%rdi), %rdx
	movq	%rdx, -392(%rbp)
	movq	(%r12), %r12
	jmp	.L14747
.L14736:
	movl	$0, -376(%rbp)
.L14716:
	cmpl	$1, -376(%rbp)
	movl	$2, -404(%rbp)
	jmp	.L41580
.L14722:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -372(%rbp)
	jne	.L14721
	movq	-392(%rbp), %rdi
	movq	32(%rdi), %rax
	cmpb	$21, 16(%rax)
	je	.L41669
.L14726:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L14736
	cmpq	$0, 96(%rax)
	je	.L14737
	testb	$8, 62(%rax)
	je	.L14736
.L14737:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14736
	movq	-392(%rbp), %r8
	movq	32(%r8), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14736
	movq	32(%r12), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L14736
.L14743:
	movq	-392(%rbp), %rax
	movq	8(%rbx), %rdi
	movq	32(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14739
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L14743
	jmp	.L14736
.L14739:
	testq	%rbx, %rbx
	jne	.L14721
	jmp	.L14736
.L41669:
	cmpq	$0, 96(%rax)
	je	.L14727
	testb	$8, 62(%rax)
	je	.L14726
.L14727:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14726
	movq	32(%r12), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14726
	movq	-392(%rbp), %rcx
	movq	32(%rcx), %r10
	movq	24(%r10), %rbx
	testq	%rbx, %rbx
	je	.L14736
.L14733:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14739
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L14733
	jmp	.L14736
.L41667:
	movq	32(%r12), %rdi
	jmp	.L41578
.L41666:
	testq	%r12, %r12
	je	.L14716
	jmp	.L14736
.L14838:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmovne	-404(%rbp), %eax
	jmp	.L41559
.L14825:
	movq	24(%rbx), %r8
	movq	%r8, -168(%rbp)
	movq	24(%r12), %rcx
	movl	$1, -404(%rbp)
	movq	%rcx, -176(%rbp)
	movq	8(%r12), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L14826
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -404(%rbp)
	je	.L14209
.L14826:
	cmpq	$0, -168(%rbp)
	je	.L14702
	cmpq	$0, -176(%rbp)
	je	.L14702
	movq	-176(%rbp), %rax
	cmpq	%rax, -168(%rbp)
	je	.L14702
	movq	-168(%rbp), %r12
	movq	112(%rax), %rsi
	movq	112(%r12), %rcx
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L14829
	movq	-168(%rbp), %rax
	movq	104(%rax), %r9
	cmpb	$25, 16(%r9)
	je	.L41670
.L14830:
	movl	$1, %r8d
.L14829:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L14831
	movq	-176(%rbp), %r10
	movq	104(%r10), %r11
	cmpb	$25, 16(%r11)
	je	.L41671
.L14832:
	movl	$1, %ecx
.L14831:
	testb	%r8b, %r8b
	jne	.L14702
	testb	%cl, %cl
	jne	.L14702
	testb	%dil, %dil
	je	.L41540
	testb	%dl, %dl
.L41558:
	jne	.L14702
.L14837:
	movl	$0, -404(%rbp)
	jmp	.L14702
.L41540:
	testb	%dl, %dl
	jne	.L14837
	movq	-168(%rbp), %rsi
	movq	-176(%rbp), %rbx
	movq	104(%rsi), %rdi
	movq	104(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14837
	movq	-168(%rbp), %rcx
	movq	-176(%rbp), %rdx
	movq	112(%rcx), %rdi
	movq	112(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L41558
.L41671:
	cmpb	$25, 16(%rsi)
	jne	.L14832
	jmp	.L14831
.L41670:
	cmpb	$25, 16(%rcx)
	jne	.L14830
	jmp	.L14829
	.p2align 6,,7
.L41560:
	movl	$1, -404(%rbp)
	jmp	.L14690
.L41655:
	cmpq	$0, 8(%r12)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L14699
.L41654:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L14698
.L41613:
	movzbl	17(%r12), %esi
	movzwl	60(%r12), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %r12
	jmp	.L14694
.L41612:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L14693
.L41611:
	testb	$2, 62(%r12)
	je	.L14692
	movq	24(%r12), %r11
	testq	%r11, %r11
	cmovne	%r11, %r12
	jmp	.L14692
.L41610:
	testb	$2, 62(%rbx)
	je	.L14691
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L14691
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L14691
	.p2align 6,,7
.L41591:
	movq	8(%r15), %rbx
	movq	%r13, %r12
	cmpq	%r13, %rbx
	je	.L41557
	testq	%rbx, %rbx
	je	.L41557
	testq	%r13, %r13
	je	.L41557
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L41557
	movzbl	16(%r13), %eax
	testb	%al, %al
	je	.L41557
	cmpb	$6, %dl
	je	.L41672
.L14532:
	cmpb	$6, %al
	je	.L41673
.L14533:
	cmpb	$10, %dl
	je	.L41674
.L14534:
	cmpb	$10, 16(%r12)
	je	.L41675
.L14535:
	cmpq	%r12, %rbx
	movl	$1, -364(%rbp)
	je	.L14531
	movzbl	16(%rbx), %esi
	cmpb	16(%r12), %sil
	je	.L14537
	movl	$0, -364(%rbp)
.L14531:
	movl	-364(%rbp), %edi
	testl	%edi, %edi
	jne	.L14210
	jmp	.L14528
.L14537:
	movzbl	17(%rbx), %r10d
	movzbl	62(%rbx), %r9d
	xorl	%ecx, %ecx
	movl	%r10d, %edx
	shrb	$5, %r9b
	shrb	$3, %r10b
	shrb	$4, %dl
	andl	$1, %r10d
	andl	$1, %r9d
	andl	$1, %edx
	addl	%r10d, %r10d
	sall	$2, %r9d
	orl	%r10d, %edx
	orl	%r9d, %edx
	cmpb	$20, %sil
	je	.L41676
.L14539:
	movzbl	17(%r12), %r11d
	movzbl	62(%r12), %r8d
	leal	0(,%rcx,8), %edi
	orl	%edx, %edi
	xorl	%ecx, %ecx
	movl	%r11d, %edx
	shrb	$5, %r8b
	shrb	$3, %r11b
	shrb	$4, %dl
	andl	$1, %r11d
	andl	$1, %r8d
	andl	$1, %edx
	addl	%r11d, %r11d
	sall	$2, %r8d
	orl	%r11d, %edx
	orl	%r8d, %edx
	cmpb	$20, %sil
	je	.L41677
.L14540:
	leal	0(,%rcx,8), %esi
	movl	$0, -364(%rbp)
	orl	%esi, %edx
	cmpl	%edx, %edi
	jne	.L14531
	movq	128(%r12), %rax
	cmpq	%rax, 128(%rbx)
	je	.L41557
	movq	%rbx, %rdi
	movq	%r12, %rsi
	call	*targetm+264(%rip)
	movl	$0, -364(%rbp)
	testl	%eax, %eax
	movl	%eax, -132(%rbp)
	je	.L14531
	movl	$0, -364(%rbp)
	movzbl	16(%rbx), %eax
	cmpl	$18, %eax
	je	.L14666
	cmpl	$18, %eax
	ja	.L14683
	cmpl	$13, %eax
	je	.L14544
.L14543:
	cmpl	$2, -132(%rbp)
	jne	.L14531
	cmpl	$1, -364(%rbp)
	movl	-132(%rbp), %eax
	cmovne	-364(%rbp), %eax
	movl	%eax, -364(%rbp)
	jmp	.L14531
.L14544:
	movq	8(%rbx), %rdi
	movq	8(%r12), %rsi
	cmpq	%rsi, %rdi
	je	.L14545
	call	comptypes
.L41556:
	movl	%eax, -364(%rbp)
	jmp	.L14543
.L14545:
	movl	$1, -364(%rbp)
	jmp	.L14543
.L14683:
	cmpl	$20, %eax
	je	.L14679
	cmpl	$23, %eax
	jne	.L14543
	movl	$1, -328(%rbp)
	movq	8(%r12), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L14548
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -328(%rbp)
	je	.L14543
.L14548:
	movq	24(%rbx), %rdx
	movq	%rdx, -360(%rbp)
	testq	%rdx, %rdx
	movq	24(%r12), %rax
	movq	%rax, -352(%rbp)
	je	.L41678
	cmpq	$0, -352(%rbp)
	je	.L41679
	movl	$1, -364(%rbp)
	xorl	%r12d, %r12d
.L14663:
	cmpq	$0, -360(%rbp)
	je	.L41680
	cmpq	$0, -352(%rbp)
	je	.L14652
	movq	-360(%rbp), %r8
	movq	32(%r8), %rdi
	testq	%rdi, %rdi
	je	.L41681
	movq	-352(%rbp), %rsi
	movq	32(%rsi), %rax
	testq	%rax, %rax
	jne	.L14638
.L41577:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L14652
.L14637:
	cmpl	-364(%rbp), %r12d
	movl	-364(%rbp), %ebx
	movq	-360(%rbp), %r10
	movq	-352(%rbp), %rcx
	cmovg	%r12d, %ebx
	movl	%ebx, -364(%rbp)
	movq	(%r10), %rdi
	movq	%rdi, -360(%rbp)
	movq	(%rcx), %rax
	movq	%rax, -352(%rbp)
	jmp	.L14663
.L14652:
	movl	$0, -364(%rbp)
.L14632:
	cmpl	$1, -364(%rbp)
	movl	-364(%rbp), %eax
	cmove	-328(%rbp), %eax
	jmp	.L41556
.L14638:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r12d
	jne	.L14637
	movq	-360(%rbp), %r9
	movq	32(%r9), %rax
	cmpb	$21, 16(%rax)
	je	.L41683
.L14642:
	movq	-352(%rbp), %rbx
	movq	32(%rbx), %rax
	cmpb	$21, 16(%rax)
	jne	.L14652
	cmpq	$0, 96(%rax)
	je	.L14653
	testb	$8, 62(%rax)
	je	.L14652
.L14653:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14652
	movq	-360(%rbp), %r11
	movq	32(%r11), %r8
	movq	32(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14652
	movq	-352(%rbp), %rdx
	movq	32(%rdx), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L14652
.L14659:
	movq	-360(%rbp), %r9
	movq	8(%rbx), %rdi
	movq	32(%r9), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14655
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L14659
	jmp	.L14652
.L14655:
	testq	%rbx, %rbx
	jne	.L14637
	jmp	.L14652
.L41683:
	cmpq	$0, 96(%rax)
	je	.L14643
	testb	$8, 62(%rax)
	je	.L14642
.L14643:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14642
	movq	-352(%rbp), %rax
	movq	32(%rax), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14642
	movq	-360(%rbp), %rdi
	movq	32(%rdi), %rcx
	movq	24(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L14652
.L14649:
	movq	-352(%rbp), %r10
	movq	8(%rbx), %rdi
	movq	32(%r10), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14655
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L14649
	jmp	.L14652
.L41681:
	movq	-352(%rbp), %r11
	movq	32(%r11), %rdi
	jmp	.L41577
.L41680:
	cmpq	$0, -352(%rbp)
	je	.L14632
	jmp	.L14652
.L41679:
	movq	-360(%rbp), %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L14543
	movq	136(%r12), %rax
	testq	%rax, %rax
	je	.L41485
	movq	%rax, %r12
	movl	$1, -344(%rbp)
	movl	$0, -340(%rbp)
.L14627:
	cmpq	$0, -360(%rbp)
	je	.L41684
	testq	%r12, %r12
	je	.L14616
	movq	-360(%rbp), %rcx
	movq	32(%rcx), %rdi
	testq	%rdi, %rdi
	je	.L41685
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L14602
.L41575:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L14616
.L14601:
	movl	-344(%rbp), %eax
	movl	-340(%rbp), %ebx
	cmpl	%eax, -340(%rbp)
	movq	-360(%rbp), %r10
	cmovle	%eax, %ebx
	movl	%ebx, -344(%rbp)
	movq	(%r10), %rdi
	movq	%rdi, -360(%rbp)
	movq	(%r12), %r12
	jmp	.L14627
.L14616:
	movl	$0, -344(%rbp)
.L14596:
	movl	$2, -364(%rbp)
	cmpl	$1, -344(%rbp)
.L41576:
	jne	.L14543
	movl	-328(%rbp), %eax
	jmp	.L41556
.L14602:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -340(%rbp)
	jne	.L14601
	movq	-360(%rbp), %r10
	movq	32(%r10), %rax
	cmpb	$21, 16(%rax)
	je	.L41687
.L14606:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L14616
	cmpq	$0, 96(%rax)
	je	.L14617
	testb	$8, 62(%rax)
	je	.L14616
.L14617:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14616
	movq	-360(%rbp), %rax
	movq	32(%rax), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14616
	movq	32(%r12), %rdx
	movq	24(%rdx), %rbx
	testq	%rbx, %rbx
	je	.L14616
.L14623:
	movq	-360(%rbp), %rcx
	movq	8(%rbx), %rdi
	movq	32(%rcx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14619
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L14623
	jmp	.L14616
.L14619:
	testq	%rbx, %rbx
	jne	.L14601
	jmp	.L14616
.L41687:
	cmpq	$0, 96(%rax)
	je	.L14607
	testb	$8, 62(%rax)
	je	.L14606
.L14607:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14606
	movq	32(%r12), %r8
	movq	32(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14606
	movq	-360(%rbp), %rsi
	movq	32(%rsi), %r11
	movq	24(%r11), %rbx
	testq	%rbx, %rbx
	je	.L14616
.L14613:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14619
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L14613
	jmp	.L14616
.L41685:
	movq	32(%r12), %rdi
	jmp	.L41575
.L41684:
	testq	%r12, %r12
	je	.L14596
	jmp	.L14616
.L41485:
	movl	-328(%rbp), %r12d
	movl	%r12d, -364(%rbp)
	jmp	.L14543
.L41678:
	movq	%rax, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L14543
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L41485
	movq	%rax, %r12
	movl	$1, -336(%rbp)
	movl	$0, -332(%rbp)
.L14588:
	cmpq	$0, -352(%rbp)
	je	.L41688
	testq	%r12, %r12
	je	.L14577
	movq	-352(%rbp), %rbx
	movq	32(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L41689
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L14563
.L41574:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L14577
.L14562:
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ebx
	cmpl	%eax, -332(%rbp)
	movq	-352(%rbp), %rdi
	cmovle	%eax, %ebx
	movl	%ebx, -336(%rbp)
	movq	(%rdi), %rdx
	movq	%rdx, -352(%rbp)
	movq	(%r12), %r12
	jmp	.L14588
.L14577:
	movl	$0, -336(%rbp)
.L14557:
	cmpl	$1, -336(%rbp)
	movl	$2, -364(%rbp)
	jmp	.L41576
.L14563:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -332(%rbp)
	jne	.L14562
	movq	-352(%rbp), %rdi
	movq	32(%rdi), %rax
	cmpb	$21, 16(%rax)
	je	.L41691
.L14567:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L14577
	cmpq	$0, 96(%rax)
	je	.L14578
	testb	$8, 62(%rax)
	je	.L14577
.L14578:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14577
	movq	-352(%rbp), %r11
	movq	32(%r11), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14577
	movq	32(%r12), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L14577
.L14584:
	movq	-352(%rbp), %rax
	movq	8(%rbx), %rdi
	movq	32(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14580
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L14584
	jmp	.L14577
.L14580:
	testq	%rbx, %rbx
	jne	.L14562
	jmp	.L14577
.L41691:
	cmpq	$0, 96(%rax)
	je	.L14568
	testb	$8, 62(%rax)
	je	.L14567
.L14568:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14567
	movq	32(%r12), %rcx
	movq	32(%rcx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14567
	movq	-352(%rbp), %r8
	movq	32(%r8), %r10
	movq	24(%r10), %rbx
	testq	%rbx, %rbx
	je	.L14577
.L14574:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14580
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L14574
	jmp	.L14577
.L41689:
	movq	32(%r12), %rdi
	jmp	.L41574
.L41688:
	testq	%r12, %r12
	je	.L14557
	jmp	.L14577
.L14679:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmovne	-364(%rbp), %eax
	jmp	.L41556
.L14666:
	movq	24(%rbx), %r11
	movq	%r11, -144(%rbp)
	movq	24(%r12), %r8
	movl	$1, -364(%rbp)
	movq	%r8, -152(%rbp)
	movq	8(%r12), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L14667
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -364(%rbp)
	je	.L14528
.L14667:
	cmpq	$0, -144(%rbp)
	je	.L14543
	cmpq	$0, -152(%rbp)
	je	.L14543
	movq	-152(%rbp), %rax
	cmpq	%rax, -144(%rbp)
	je	.L14543
	movq	-144(%rbp), %r12
	movq	112(%rax), %rsi
	movq	112(%r12), %rcx
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L14670
	movq	-144(%rbp), %rax
	movq	104(%rax), %r9
	cmpb	$25, 16(%r9)
	je	.L41692
.L14671:
	movl	$1, %r8d
.L14670:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L14672
	movq	-152(%rbp), %rbx
	movq	104(%rbx), %r10
	cmpb	$25, 16(%r10)
	je	.L41693
.L14673:
	movl	$1, %ecx
.L14672:
	testb	%r8b, %r8b
	jne	.L14543
	testb	%cl, %cl
	jne	.L14543
	testb	%dil, %dil
	je	.L41530
	testb	%dl, %dl
.L41555:
	jne	.L14543
.L14678:
	movl	$0, -364(%rbp)
	jmp	.L14543
.L41530:
	testb	%dl, %dl
	jne	.L14678
	movq	-144(%rbp), %rsi
	movq	-152(%rbp), %rcx
	movq	104(%rsi), %rdi
	movq	104(%rcx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14678
	movq	-144(%rbp), %r8
	movq	-152(%rbp), %rdx
	movq	112(%r8), %rdi
	movq	112(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L41555
.L41693:
	cmpb	$25, 16(%rsi)
	jne	.L14673
	jmp	.L14672
.L41692:
	cmpb	$25, 16(%rcx)
	jne	.L14671
	jmp	.L14670
	.p2align 6,,7
.L41557:
	movl	$1, -364(%rbp)
	jmp	.L14531
.L41677:
	cmpq	$0, 8(%r12)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L14540
.L41676:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L14539
.L41675:
	movzbl	17(%r12), %esi
	movzwl	60(%r12), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %r12
	jmp	.L14535
.L41674:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L14534
	.p2align 6,,7
.L41673:
	testb	$2, 62(%r13)
	je	.L14533
	movq	24(%r13), %rcx
	testq	%rcx, %rcx
	cmovne	%rcx, %r12
	jmp	.L14533
	.p2align 6,,7
.L41672:
	testb	$2, 62(%rbx)
	je	.L14532
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L14532
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L14532
	.p2align 6,,7
.L41590:
	movq	8(%r15), %rbx
	movq	%r13, %r12
	cmpq	%r13, %rbx
	je	.L41554
	testq	%rbx, %rbx
	je	.L41554
	testq	%r13, %r13
	je	.L41554
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L41554
	movzbl	16(%r13), %eax
	testb	%al, %al
	je	.L41554
	cmpb	$6, %dl
	je	.L41694
.L14373:
	cmpb	$6, %al
	je	.L41695
.L14374:
	cmpb	$10, %dl
	je	.L41696
.L14375:
	cmpb	$10, 16(%r12)
	je	.L41697
.L14376:
	cmpq	%r12, %rbx
	movl	$1, -324(%rbp)
	je	.L14372
	movzbl	16(%rbx), %esi
	cmpb	16(%r12), %sil
	je	.L14378
	movl	$0, -324(%rbp)
.L14372:
	movl	-324(%rbp), %edi
	testl	%edi, %edi
	jne	.L14210
	jmp	.L14369
.L14378:
	movzbl	17(%rbx), %r11d
	movzbl	62(%rbx), %r10d
	xorl	%ecx, %ecx
	movl	%r11d, %edx
	shrb	$5, %r10b
	shrb	$3, %r11b
	shrb	$4, %dl
	andl	$1, %r11d
	andl	$1, %r10d
	andl	$1, %edx
	addl	%r11d, %r11d
	sall	$2, %r10d
	orl	%r11d, %edx
	orl	%r10d, %edx
	cmpb	$20, %sil
	je	.L41698
.L14380:
	movzbl	17(%r12), %r8d
	leal	0(,%rcx,8), %edi
	movzbl	62(%r12), %ecx
	orl	%edx, %edi
	movl	%r8d, %edx
	shrb	$5, %cl
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	$1, %r8d
	andl	$1, %ecx
	andl	$1, %edx
	addl	%r8d, %r8d
	sall	$2, %ecx
	orl	%r8d, %edx
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	cmpb	$20, %sil
	je	.L41699
.L14381:
	leal	0(,%rcx,8), %esi
	movl	$0, -324(%rbp)
	orl	%esi, %edx
	cmpl	%edx, %edi
	jne	.L14372
	movq	128(%r12), %rax
	cmpq	%rax, 128(%rbx)
	je	.L41554
	movq	%rbx, %rdi
	movq	%r12, %rsi
	call	*targetm+264(%rip)
	movl	$0, -324(%rbp)
	testl	%eax, %eax
	movl	%eax, -108(%rbp)
	je	.L14372
	movl	$0, -324(%rbp)
	movzbl	16(%rbx), %eax
	cmpl	$18, %eax
	je	.L14507
	cmpl	$18, %eax
	ja	.L14524
	cmpl	$13, %eax
	je	.L14385
.L14384:
	cmpl	$2, -108(%rbp)
	jne	.L14372
	cmpl	$1, -324(%rbp)
	movl	-108(%rbp), %eax
	cmovne	-324(%rbp), %eax
	movl	%eax, -324(%rbp)
	jmp	.L14372
.L14385:
	movq	8(%rbx), %rdi
	movq	8(%r12), %rsi
	cmpq	%rsi, %rdi
	je	.L14386
	call	comptypes
.L41553:
	movl	%eax, -324(%rbp)
	jmp	.L14384
.L14386:
	movl	$1, -324(%rbp)
	jmp	.L14384
.L14524:
	cmpl	$20, %eax
	je	.L14520
	cmpl	$23, %eax
	jne	.L14384
	movl	$1, -288(%rbp)
	movq	8(%r12), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L14389
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -288(%rbp)
	je	.L14384
.L14389:
	movq	24(%rbx), %rdx
	movq	%rdx, -320(%rbp)
	testq	%rdx, %rdx
	movq	24(%r12), %rax
	movq	%rax, -312(%rbp)
	je	.L41700
	cmpq	$0, -312(%rbp)
	je	.L41701
	movl	$1, -324(%rbp)
	xorl	%r12d, %r12d
.L14504:
	cmpq	$0, -320(%rbp)
	je	.L41702
	cmpq	$0, -312(%rbp)
	je	.L14493
	movq	-320(%rbp), %r11
	movq	32(%r11), %rdi
	testq	%rdi, %rdi
	je	.L41703
	movq	-312(%rbp), %r8
	movq	32(%r8), %rax
	testq	%rax, %rax
	jne	.L14479
.L41573:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L14493
.L14478:
	cmpl	-324(%rbp), %r12d
	movl	-324(%rbp), %r10d
	movq	-320(%rbp), %r9
	movq	-312(%rbp), %rdi
	cmovg	%r12d, %r10d
	movl	%r10d, -324(%rbp)
	movq	(%r9), %rax
	movq	%rax, -320(%rbp)
	movq	(%rdi), %rsi
	movq	%rsi, -312(%rbp)
	jmp	.L14504
.L14493:
	movl	$0, -324(%rbp)
.L14473:
	cmpl	$1, -324(%rbp)
	movl	-324(%rbp), %eax
	cmove	-288(%rbp), %eax
	jmp	.L41553
.L14479:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r12d
	jne	.L14478
	movq	-320(%rbp), %rbx
	movq	32(%rbx), %rax
	cmpb	$21, 16(%rax)
	je	.L41705
.L14483:
	movq	-312(%rbp), %r10
	movq	32(%r10), %rax
	cmpb	$21, 16(%rax)
	jne	.L14493
	cmpq	$0, 96(%rax)
	je	.L14494
	testb	$8, 62(%rax)
	je	.L14493
.L14494:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14493
	movq	-320(%rbp), %rcx
	movq	32(%rcx), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14493
	movq	-312(%rbp), %rbx
	movq	32(%rbx), %r8
	movq	24(%r8), %rbx
	testq	%rbx, %rbx
	je	.L14493
.L14500:
	movq	-320(%rbp), %rdx
	movq	8(%rbx), %rdi
	movq	32(%rdx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14496
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L14500
	jmp	.L14493
.L14496:
	testq	%rbx, %rbx
	jne	.L14478
	jmp	.L14493
.L41705:
	cmpq	$0, 96(%rax)
	je	.L14484
	testb	$8, 62(%rax)
	je	.L14483
.L14484:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14483
	movq	-312(%rbp), %rsi
	movq	32(%rsi), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14483
	movq	-320(%rbp), %rax
	movq	32(%rax), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L14493
.L14490:
	movq	-312(%rbp), %r9
	movq	8(%rbx), %rdi
	movq	32(%r9), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14496
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L14490
	jmp	.L14493
.L41703:
	movq	-312(%rbp), %rcx
	movq	32(%rcx), %rdi
	jmp	.L41573
.L41702:
	cmpq	$0, -312(%rbp)
	je	.L14473
	jmp	.L14493
.L41701:
	movq	-320(%rbp), %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L14384
	movq	136(%r12), %rax
	testq	%rax, %rax
	je	.L41481
	movq	%rax, %r12
	movl	$1, -304(%rbp)
	movl	$0, -300(%rbp)
.L14468:
	cmpq	$0, -320(%rbp)
	je	.L41706
	testq	%r12, %r12
	je	.L14457
	movq	-320(%rbp), %r9
	movq	32(%r9), %rdi
	testq	%rdi, %rdi
	je	.L41707
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L14443
.L41571:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L14457
.L14442:
	movl	-304(%rbp), %eax
	movl	-300(%rbp), %r10d
	cmpl	%eax, -300(%rbp)
	movq	-320(%rbp), %r9
	cmovle	%eax, %r10d
	movl	%r10d, -304(%rbp)
	movq	(%r9), %rdi
	movq	%rdi, -320(%rbp)
	movq	(%r12), %r12
	jmp	.L14468
.L14457:
	movl	$0, -304(%rbp)
.L14437:
	movl	$2, -324(%rbp)
	cmpl	$1, -304(%rbp)
.L41572:
	jne	.L14384
	movl	-288(%rbp), %eax
	jmp	.L41553
.L14443:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -300(%rbp)
	jne	.L14442
	movq	-320(%rbp), %r10
	movq	32(%r10), %rax
	cmpb	$21, 16(%rax)
	je	.L41709
.L14447:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L14457
	cmpq	$0, 96(%rax)
	je	.L14458
	testb	$8, 62(%rax)
	je	.L14457
.L14458:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14457
	movq	-320(%rbp), %rsi
	movq	32(%rsi), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14457
	movq	32(%r12), %rdx
	movq	24(%rdx), %rbx
	testq	%rbx, %rbx
	je	.L14457
.L14464:
	movq	-320(%rbp), %rax
	movq	8(%rbx), %rdi
	movq	32(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14460
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L14464
	jmp	.L14457
.L14460:
	testq	%rbx, %rbx
	jne	.L14442
	jmp	.L14457
.L41709:
	cmpq	$0, 96(%rax)
	je	.L14448
	testb	$8, 62(%rax)
	je	.L14447
.L14448:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14447
	movq	32(%r12), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14447
	movq	-320(%rbp), %r8
	movq	32(%r8), %rcx
	movq	24(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L14457
.L14454:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14460
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L14454
	jmp	.L14457
.L41707:
	movq	32(%r12), %rdi
	jmp	.L41571
.L41706:
	testq	%r12, %r12
	je	.L14437
	jmp	.L14457
.L41481:
	movl	-288(%rbp), %r12d
	movl	%r12d, -324(%rbp)
	jmp	.L14384
.L41700:
	movq	%rax, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L14384
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L41481
	movq	%rax, %r12
	movl	$1, -296(%rbp)
	movl	$0, -292(%rbp)
.L14429:
	cmpq	$0, -312(%rbp)
	je	.L41710
	testq	%r12, %r12
	je	.L14418
	movq	-312(%rbp), %rbx
	movq	32(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L41711
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L14404
.L41570:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L14418
.L14403:
	movl	-296(%rbp), %eax
	movl	-292(%rbp), %ebx
	cmpl	%eax, -292(%rbp)
	movq	-312(%rbp), %rdi
	cmovle	%eax, %ebx
	movl	%ebx, -296(%rbp)
	movq	(%rdi), %rdx
	movq	%rdx, -312(%rbp)
	movq	(%r12), %r12
	jmp	.L14429
.L14418:
	movl	$0, -296(%rbp)
.L14398:
	cmpl	$1, -296(%rbp)
	movl	$2, -324(%rbp)
	jmp	.L41572
.L14404:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -292(%rbp)
	jne	.L14403
	movq	-312(%rbp), %rdi
	movq	32(%rdi), %rax
	cmpb	$21, 16(%rax)
	je	.L41713
.L14408:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L14418
	cmpq	$0, 96(%rax)
	je	.L14419
	testb	$8, 62(%rax)
	je	.L14418
.L14419:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14418
	movq	-312(%rbp), %r8
	movq	32(%r8), %rcx
	movq	32(%rcx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14418
	movq	32(%r12), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L14418
.L14425:
	movq	-312(%rbp), %rax
	movq	8(%rbx), %rdi
	movq	32(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14421
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L14425
	jmp	.L14418
.L14421:
	testq	%rbx, %rbx
	jne	.L14403
	jmp	.L14418
.L41713:
	cmpq	$0, 96(%rax)
	je	.L14409
	testb	$8, 62(%rax)
	je	.L14408
.L14409:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14408
	movq	32(%r12), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14408
	movq	-312(%rbp), %r11
	movq	32(%r11), %r10
	movq	24(%r10), %rbx
	testq	%rbx, %rbx
	je	.L14418
.L14415:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14421
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L14415
	jmp	.L14418
.L41711:
	movq	32(%r12), %rdi
	jmp	.L41570
.L41710:
	testq	%r12, %r12
	je	.L14398
	jmp	.L14418
.L14520:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmovne	-324(%rbp), %eax
	jmp	.L41553
.L14507:
	movq	24(%rbx), %rcx
	movq	%rcx, -120(%rbp)
	movq	24(%r12), %r11
	movl	$1, -324(%rbp)
	movq	%r11, -128(%rbp)
	movq	8(%r12), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L14508
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -324(%rbp)
	je	.L14369
.L14508:
	cmpq	$0, -120(%rbp)
	je	.L14384
	cmpq	$0, -128(%rbp)
	je	.L14384
	movq	-128(%rbp), %rax
	cmpq	%rax, -120(%rbp)
	je	.L14384
	movq	-120(%rbp), %r12
	movq	112(%rax), %rsi
	movq	112(%r12), %rcx
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L14511
	movq	-120(%rbp), %rax
	movq	104(%rax), %r9
	cmpb	$25, 16(%r9)
	je	.L41714
.L14512:
	movl	$1, %r8d
.L14511:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L14513
	movq	-128(%rbp), %r10
	movq	104(%r10), %rbx
	cmpb	$25, 16(%rbx)
	je	.L41715
.L14514:
	movl	$1, %ecx
.L14513:
	testb	%r8b, %r8b
	jne	.L14384
	testb	%cl, %cl
	jne	.L14384
	testb	%dil, %dil
	je	.L41520
	testb	%dl, %dl
.L41552:
	jne	.L14384
.L14519:
	movl	$0, -324(%rbp)
	jmp	.L14384
.L41520:
	testb	%dl, %dl
	jne	.L14519
	movq	-120(%rbp), %rdx
	movq	-128(%rbp), %r8
	movq	104(%rdx), %rdi
	movq	104(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14519
	movq	-120(%rbp), %rsi
	movq	-128(%rbp), %r11
	movq	112(%rsi), %rdi
	movq	112(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L41552
.L41715:
	cmpb	$25, 16(%rsi)
	jne	.L14514
	jmp	.L14513
.L41714:
	cmpb	$25, 16(%rcx)
	jne	.L14512
	jmp	.L14511
	.p2align 6,,7
.L41554:
	movl	$1, -324(%rbp)
	jmp	.L14372
.L41699:
	cmpq	$0, 8(%r12)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L14381
.L41698:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L14380
.L41697:
	movzbl	17(%r12), %esi
	movzwl	60(%r12), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %r12
	jmp	.L14376
.L41696:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L14375
	.p2align 6,,7
.L41695:
	testb	$2, 62(%r13)
	je	.L14374
	movq	24(%r13), %r9
	testq	%r9, %r9
	cmovne	%r9, %r12
	jmp	.L14374
	.p2align 6,,7
.L41694:
	testb	$2, 62(%rbx)
	je	.L14373
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L14373
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L14373
	.p2align 6,,7
.L14219:
	movzbl	17(%rbx), %r9d
	movzbl	62(%rbx), %r11d
	xorl	%ecx, %ecx
	movl	%r9d, %edx
	shrb	$5, %r11b
	shrb	$3, %r9b
	shrb	$4, %dl
	andl	$1, %r9d
	andl	$1, %r11d
	andl	$1, %edx
	addl	%r9d, %r9d
	sall	$2, %r11d
	orl	%r9d, %edx
	orl	%r11d, %edx
	cmpb	$20, %sil
	je	.L41716
.L14221:
	leal	0(,%rcx,8), %edi
	movzbl	62(%r12), %r8d
	movzbl	17(%r12), %ecx
	orl	%edx, %edi
	movl	%ecx, %edx
	shrb	$5, %r8b
	shrb	$3, %cl
	shrb	$4, %dl
	andl	$1, %ecx
	andl	$1, %r8d
	addl	%ecx, %ecx
	andl	$1, %edx
	sall	$2, %r8d
	orl	%ecx, %edx
	xorl	%ecx, %ecx
	orl	%r8d, %edx
	cmpb	$20, %sil
	je	.L41717
.L14222:
	leal	0(,%rcx,8), %esi
	movl	$0, -284(%rbp)
	orl	%esi, %edx
	cmpl	%edx, %edi
	jne	.L14213
	movq	128(%r12), %rax
	cmpq	%rax, 128(%rbx)
	je	.L41551
	movq	%rbx, %rdi
	movq	%r12, %rsi
	call	*targetm+264(%rip)
	movl	$0, -284(%rbp)
	testl	%eax, %eax
	movl	%eax, -84(%rbp)
	je	.L14213
	movl	$0, -284(%rbp)
	movzbl	16(%rbx), %eax
	cmpl	$18, %eax
	je	.L14348
	cmpl	$18, %eax
	ja	.L14365
	cmpl	$13, %eax
	je	.L14226
.L14225:
	cmpl	$2, -84(%rbp)
	jne	.L14213
	cmpl	$1, -284(%rbp)
	movl	-84(%rbp), %eax
	cmovne	-284(%rbp), %eax
	movl	%eax, -284(%rbp)
	jmp	.L14213
.L14226:
	movq	8(%rbx), %rdi
	movq	8(%r12), %rsi
	cmpq	%rsi, %rdi
	je	.L14227
	call	comptypes
.L41550:
	movl	%eax, -284(%rbp)
	jmp	.L14225
.L14227:
	movl	$1, -284(%rbp)
	jmp	.L14225
.L14365:
	cmpl	$20, %eax
	je	.L14361
	cmpl	$23, %eax
	jne	.L14225
	movl	$1, -248(%rbp)
	movq	8(%r12), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L14230
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -248(%rbp)
	je	.L14225
.L14230:
	movq	24(%rbx), %rdi
	movq	%rdi, -280(%rbp)
	testq	%rdi, %rdi
	movq	24(%r12), %rdx
	movq	%rdx, -272(%rbp)
	je	.L41718
	cmpq	$0, -272(%rbp)
	je	.L41719
	movl	$1, -284(%rbp)
	xorl	%r12d, %r12d
.L14345:
	cmpq	$0, -280(%rbp)
	je	.L41720
	cmpq	$0, -272(%rbp)
	je	.L14334
	movq	-280(%rbp), %r9
	movq	32(%r9), %rdi
	testq	%rdi, %rdi
	je	.L41721
	movq	-272(%rbp), %rcx
	movq	32(%rcx), %rax
	testq	%rax, %rax
	jne	.L14320
.L41569:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L14334
.L14319:
	cmpl	-284(%rbp), %r12d
	movl	-284(%rbp), %r11d
	movq	-280(%rbp), %r10
	movq	-272(%rbp), %rdi
	cmovg	%r12d, %r11d
	movl	%r11d, -284(%rbp)
	movq	(%r10), %rax
	movq	%rax, -280(%rbp)
	movq	(%rdi), %rsi
	movq	%rsi, -272(%rbp)
	jmp	.L14345
.L14334:
	movl	$0, -284(%rbp)
.L14314:
	cmpl	$1, -284(%rbp)
	movl	-284(%rbp), %eax
	cmove	-248(%rbp), %eax
	jmp	.L41550
.L14320:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r12d
	jne	.L14319
	movq	-280(%rbp), %rbx
	movq	32(%rbx), %rax
	cmpb	$21, 16(%rax)
	je	.L41723
.L14324:
	movq	-272(%rbp), %r11
	movq	32(%r11), %rax
	cmpb	$21, 16(%rax)
	jne	.L14334
	cmpq	$0, 96(%rax)
	je	.L14335
	testb	$8, 62(%rax)
	je	.L14334
.L14335:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14334
	movq	-280(%rbp), %r8
	movq	32(%r8), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14334
	movq	-272(%rbp), %rbx
	movq	32(%rbx), %rcx
	movq	24(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L14334
.L14341:
	movq	-280(%rbp), %rdx
	movq	8(%rbx), %rdi
	movq	32(%rdx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14337
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L14341
	jmp	.L14334
.L14337:
	testq	%rbx, %rbx
	jne	.L14319
	jmp	.L14334
.L41723:
	cmpq	$0, 96(%rax)
	je	.L14325
	testb	$8, 62(%rax)
	je	.L14324
.L14325:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14324
	movq	-272(%rbp), %rsi
	movq	32(%rsi), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14324
	movq	-280(%rbp), %rax
	movq	32(%rax), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L14334
.L14331:
	movq	-272(%rbp), %r10
	movq	8(%rbx), %rdi
	movq	32(%r10), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14337
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L14331
	jmp	.L14334
.L41721:
	movq	-272(%rbp), %r8
	movq	32(%r8), %rdi
	jmp	.L41569
.L41720:
	cmpq	$0, -272(%rbp)
	je	.L14314
	jmp	.L14334
.L41719:
	movq	-280(%rbp), %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L14225
	movq	136(%r12), %rax
	testq	%rax, %rax
	je	.L41477
	movq	%rax, %r12
	movl	$1, -264(%rbp)
	movl	$0, -260(%rbp)
.L14309:
	cmpq	$0, -280(%rbp)
	je	.L41724
	testq	%r12, %r12
	je	.L14298
	movq	-280(%rbp), %r10
	movq	32(%r10), %rdi
	testq	%rdi, %rdi
	je	.L41725
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L14284
.L41567:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L14298
.L14283:
	movl	-264(%rbp), %eax
	movl	-260(%rbp), %r11d
	cmpl	%eax, -260(%rbp)
	movq	-280(%rbp), %r10
	cmovle	%eax, %r11d
	movl	%r11d, -264(%rbp)
	movq	(%r10), %rdx
	movq	%rdx, -280(%rbp)
	movq	(%r12), %r12
	jmp	.L14309
.L14298:
	movl	$0, -264(%rbp)
.L14278:
	movl	$2, -284(%rbp)
	cmpl	$1, -264(%rbp)
.L41568:
	jne	.L14225
	movl	-248(%rbp), %eax
	jmp	.L41550
.L14284:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -260(%rbp)
	jne	.L14283
	movq	-280(%rbp), %r11
	movq	32(%r11), %rax
	cmpb	$21, 16(%rax)
	je	.L41727
.L14288:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L14298
	cmpq	$0, 96(%rax)
	je	.L14299
	testb	$8, 62(%rax)
	je	.L14298
.L14299:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14298
	movq	-280(%rbp), %rsi
	movq	32(%rsi), %rbx
	movq	32(%rbx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14298
	movq	32(%r12), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L14298
.L14305:
	movq	-280(%rbp), %rax
	movq	8(%rbx), %rdi
	movq	32(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14301
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L14305
	jmp	.L14298
.L14301:
	testq	%rbx, %rbx
	jne	.L14283
	jmp	.L14298
.L41727:
	cmpq	$0, 96(%rax)
	je	.L14289
	testb	$8, 62(%rax)
	je	.L14288
.L14289:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14288
	movq	32(%r12), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14288
	movq	-280(%rbp), %rcx
	movq	32(%rcx), %r8
	movq	24(%r8), %rbx
	testq	%rbx, %rbx
	je	.L14298
.L14295:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14301
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L14295
	jmp	.L14298
.L41725:
	movq	32(%r12), %rdi
	jmp	.L41567
.L41724:
	testq	%r12, %r12
	je	.L14278
	jmp	.L14298
.L41477:
	movl	-248(%rbp), %r12d
	movl	%r12d, -284(%rbp)
	jmp	.L14225
.L41718:
	movq	%rdx, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L14225
	movq	136(%rbx), %rax
	testq	%rax, %rax
	je	.L41477
	movq	%rax, %r12
	movl	$1, -256(%rbp)
	movl	$0, -252(%rbp)
.L14270:
	cmpq	$0, -272(%rbp)
	je	.L41728
	testq	%r12, %r12
	je	.L14259
	movq	-272(%rbp), %rdx
	movq	32(%rdx), %rdi
	testq	%rdi, %rdi
	je	.L41729
	movq	32(%r12), %rax
	testq	%rax, %rax
	jne	.L14245
.L41566:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L14259
.L14244:
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %ebx
	cmpl	%eax, -252(%rbp)
	movq	-272(%rbp), %rdx
	cmovle	%eax, %ebx
	movl	%ebx, -256(%rbp)
	movq	(%rdx), %rdi
	movq	%rdi, -272(%rbp)
	movq	(%r12), %r12
	jmp	.L14270
.L14259:
	movl	$0, -256(%rbp)
.L14239:
	cmpl	$1, -256(%rbp)
	movl	$2, -284(%rbp)
	jmp	.L41568
.L14245:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -252(%rbp)
	jne	.L14244
	movq	-272(%rbp), %rbx
	movq	32(%rbx), %rax
	cmpb	$21, 16(%rax)
	je	.L41731
.L14249:
	movq	32(%r12), %rax
	cmpb	$21, 16(%rax)
	jne	.L14259
	cmpq	$0, 96(%rax)
	je	.L14260
	testb	$8, 62(%rax)
	je	.L14259
.L14260:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14259
	movq	-272(%rbp), %rcx
	movq	32(%rcx), %r8
	movq	32(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14259
	movq	32(%r12), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L14259
.L14266:
	movq	-272(%rbp), %rax
	movq	8(%rbx), %rdi
	movq	32(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14262
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L14266
	jmp	.L14259
.L14262:
	testq	%rbx, %rbx
	jne	.L14244
	jmp	.L14259
.L41731:
	cmpq	$0, 96(%rax)
	je	.L14250
	testb	$8, 62(%rax)
	je	.L14249
.L14250:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14249
	movq	32(%r12), %r10
	movq	32(%r10), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14249
	movq	-272(%rbp), %r9
	movq	32(%r9), %r11
	movq	24(%r11), %rbx
	testq	%rbx, %rbx
	je	.L14259
.L14256:
	movq	8(%rbx), %rdi
	movq	32(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14262
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L14256
	jmp	.L14259
.L41729:
	movq	32(%r12), %rdi
	jmp	.L41566
.L41728:
	testq	%r12, %r12
	je	.L14239
	jmp	.L14259
.L14361:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmovne	-284(%rbp), %eax
	jmp	.L41550
.L14348:
	movq	24(%rbx), %r9
	movq	%r9, -96(%rbp)
	movq	24(%r12), %r8
	movl	$1, -284(%rbp)
	movq	%r8, -104(%rbp)
	movq	8(%r12), %rsi
	movq	8(%rbx), %rdi
	cmpq	%rsi, %rdi
	je	.L14349
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -284(%rbp)
	je	.L41541
.L14349:
	cmpq	$0, -96(%rbp)
	je	.L14225
	cmpq	$0, -104(%rbp)
	je	.L14225
	movq	-104(%rbp), %rax
	cmpq	%rax, -96(%rbp)
	je	.L14225
	movq	-96(%rbp), %r12
	movq	112(%rax), %rsi
	movq	112(%r12), %rcx
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L14352
	movq	-96(%rbp), %rax
	movq	104(%rax), %r10
	cmpb	$25, 16(%r10)
	je	.L41732
.L14353:
	movl	$1, %r8d
.L14352:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L14354
	movq	-104(%rbp), %r11
	movq	104(%r11), %rbx
	cmpb	$25, 16(%rbx)
	je	.L41733
.L14355:
	movl	$1, %ecx
.L14354:
	testb	%r8b, %r8b
	jne	.L14225
	testb	%cl, %cl
	jne	.L14225
	testb	%dil, %dil
	je	.L41510
	testb	%dl, %dl
.L41549:
	jne	.L14225
.L14360:
	movl	$0, -284(%rbp)
	jmp	.L14225
.L41510:
	testb	%dl, %dl
	jne	.L14360
	movq	-96(%rbp), %rdx
	movq	-104(%rbp), %rcx
	movq	104(%rdx), %rdi
	movq	104(%rcx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14360
	movq	-96(%rbp), %rsi
	movq	-104(%rbp), %r8
	movq	112(%rsi), %rdi
	movq	112(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L41549
.L41733:
	cmpb	$25, 16(%rsi)
	jne	.L14355
	jmp	.L14354
.L41732:
	cmpb	$25, 16(%rcx)
	jne	.L14353
	jmp	.L14352
	.p2align 6,,7
.L41551:
	movl	$1, -284(%rbp)
	jmp	.L14213
.L41717:
	cmpq	$0, 8(%r12)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L14222
.L41716:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L14221
.L41589:
	movzbl	17(%r12), %esi
	movzwl	60(%r12), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %r12
	jmp	.L14217
.L41588:
	movzbl	17(%rbx), %esi
	movzwl	60(%rbx), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %rbx
	jmp	.L14216
.L41587:
	testb	$2, 62(%r12)
	je	.L14215
	movq	24(%r12), %r10
	testq	%r10, %r10
	cmovne	%r10, %r12
	jmp	.L14215
.L41586:
	testb	$2, 62(%rbx)
	je	.L14214
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L14214
	movq	%rdi, %rbx
	movzbl	16(%rdi), %edx
	jmp	.L14214
	.p2align 6,,7
.L41585:
	movq	8(%r13), %rdx
	movq	128(%rdx), %rbx
	cmpq	integer_types(%rip), %rbx
	je	.L13971
	cmpq	integer_types+8(%rip), %rbx
	je	.L13971
	cmpq	integer_types+16(%rip), %rbx
	je	.L13971
	cmpq	c_global_trees+16(%rip), %rbx
	je	.L13971
	cmpq	c_global_trees+8(%rip), %rbx
	jne	.L13969
.L13971:
	testq	%r15, %r15
	je	.L14209
	cmpb	$29, 16(%r15)
	jne	.L13969
	movq	8(%r15), %rcx
	movq	128(%r13), %r14
	movq	128(%rcx), %r12
	cmpq	%r14, %r12
	je	.L41548
	testq	%r12, %r12
	je	.L41548
	testq	%r14, %r14
	je	.L41548
	movzbl	16(%r12), %edx
	testb	%dl, %dl
	je	.L41548
	movzbl	16(%r14), %eax
	testb	%al, %al
	je	.L41548
	cmpb	$6, %dl
	je	.L41734
.L13976:
	cmpb	$6, %al
	je	.L41735
.L13977:
	cmpb	$10, %dl
	je	.L41736
.L13978:
	cmpb	$10, 16(%r14)
	je	.L41737
.L13979:
	cmpq	%r14, %r12
	movl	$1, -244(%rbp)
	je	.L13975
	movzbl	16(%r12), %esi
	cmpb	16(%r14), %sil
	je	.L13981
	movl	$0, -244(%rbp)
.L13975:
	movl	-244(%rbp), %esi
	testl	%esi, %esi
	jne	.L13965
.L13972:
	movq	8(%r15), %rsi
	movq	integer_types(%rip), %rcx
	movq	8(%rsi), %r14
	cmpq	%rcx, 128(%r14)
	je	.L14131
	movzwl	60(%rbx), %eax
	movzwl	60(%rcx), %r12d
	andl	$511, %eax
	andl	$511, %r12d
	cmpl	%r12d, %eax
	je	.L41738
.L14131:
	movq	8(%rsi), %r9
	movq	128(%r9), %rax
	cmpq	%rcx, %rax
	je	.L41739
.L14156:
	movq	%r13, 8(%r15)
	cmpq	$0, 24(%r13)
	je	.L13965
	movq	32(%r13), %rax
	testq	%rax, %rax
	je	.L13965
	cmpb	$25, 16(%rax)
	jne	.L13965
	movzwl	60(%rbx), %r10d
	movl	32(%r15), %ecx
	movq	integer_types(%rip), %rbx
	movzwl	60(%rbx), %r12d
	andl	$511, %r10d
	andl	$511, %r12d
	cmpl	%r12d, %r10d
	je	.L14182
	movq	c_global_trees(%rip), %r9
	movzwl	60(%r9), %r11d
	andl	$511, %r11d
	sarl	$3, %r11d
	subl	%r11d, %ecx
	movslq	%ecx,%rsi
.L14183:
	movq	40(%r13), %rdi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L13965
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC144, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rcx
	xorl	%r12d, %r12d
	cmpq	%rcx, %r14
	movq	%r14, %rbx
	movq	%rcx, %r13
	jae	.L41394
.L14191:
	cmpl	$3, (%rbx)
	je	.L41740
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L14187:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L14191
.L41394:
	movslq	%r12d,%rdx
	movq	%r14, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, -80(%rbp)
	movq	%rsp, %rbx
	jae	.L41396
.L14205:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L41741
	cmpl	$2, %eax
	je	.L41742
.L14199:
	movq	8(%r12), %rsi
	movzbl	(%rsi), %edi
	leaq	1(%rsi), %rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	je	.L14195
.L14204:
	movzbl	(%rcx), %r14d
	incq	%rbx
	incq	%rcx
	testb	%r14b, %r14b
	movb	%r14b, (%rbx)
	jne	.L14204
.L14195:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L14205
.L41396:
	movb	$0, (%rbx)
	movq	-80(%rbp), %rbx
	cmpb	$0, (%rbx)
	je	.L13965
	movl	$.LC142, %edi
	movq	%rbx, %rsi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L13965
.L41742:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L14199
.L41741:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L14195
.L41740:
	addl	$25, %r12d
	jmp	.L14187
	.p2align 6,,7
.L14182:
	leal	-1(%rcx), %r8d
	movslq	%r8d,%rsi
	jmp	.L14183
.L41739:
	movzwl	60(%rbx), %r8d
	movzwl	60(%rax), %ecx
	andl	$511, %r8d
	andl	$511, %ecx
	cmpl	%ecx, %r8d
	je	.L14156
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC143, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rdx
	xorl	%r12d, %r12d
	cmpq	%rdx, %r14
	movq	%r14, %rbx
	movq	%rdx, %r13
	jae	.L41389
.L14163:
	cmpl	$3, (%rbx)
	je	.L41743
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L14159:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L14163
.L41389:
	movslq	%r12d,%rdi
	movq	%r14, %r12
	addq	$16, %rdi
	andq	$-16, %rdi
	subq	%rdi, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L41469
.L14177:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L41744
	cmpl	$2, %eax
	je	.L41745
.L14171:
	movq	8(%r12), %r14
	movzbl	(%r14), %esi
	leaq	1(%r14), %rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	je	.L14167
.L14176:
	movzbl	(%rcx), %r13d
	incq	%rbx
	incq	%rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	jne	.L14176
.L14167:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L14177
	jmp	.L41469
.L41745:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L14171
.L41744:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L14167
.L41743:
	addl	$25, %r12d
	jmp	.L14159
.L41738:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC140, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r15
	xorl	%r12d, %r12d
	cmpq	%r15, %r14
	movq	%r14, %rbx
	movq	%r15, %r13
	jae	.L41384
.L14138:
	cmpl	$3, (%rbx)
	je	.L41746
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L14134:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L14138
.L41384:
	movslq	%r12d,%rbx
	movq	%r14, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L41469
.L14152:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L41747
	cmpl	$2, %eax
	je	.L41748
.L14146:
	movq	8(%r12), %r10
	movzbl	(%r10), %r13d
	leaq	1(%r10), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L14142
.L14151:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L14151
.L14142:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L14152
	jmp	.L41469
.L41748:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L14146
.L41747:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L14142
.L41746:
	addl	$25, %r12d
	jmp	.L14134
.L13981:
	movzbl	17(%r12), %r8d
	movzbl	62(%r12), %edi
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	shrb	$5, %dil
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	$1, %r8d
	andl	$1, %edi
	andl	$1, %edx
	addl	%r8d, %r8d
	sall	$2, %edi
	orl	%r8d, %edx
	orl	%edi, %edx
	cmpb	$20, %sil
	je	.L41749
.L13983:
	movzbl	17(%r14), %r10d
	movzbl	62(%r14), %r9d
	leal	0(,%rcx,8), %edi
	orl	%edx, %edi
	xorl	%ecx, %ecx
	movl	%r10d, %edx
	shrb	$5, %r9b
	shrb	$3, %r10b
	shrb	$4, %dl
	andl	$1, %r10d
	andl	$1, %r9d
	andl	$1, %edx
	addl	%r10d, %r10d
	sall	$2, %r9d
	orl	%r10d, %edx
	orl	%r9d, %edx
	cmpb	$20, %sil
	je	.L41750
.L13984:
	leal	0(,%rcx,8), %r11d
	movl	$0, -244(%rbp)
	orl	%r11d, %edx
	cmpl	%edx, %edi
	jne	.L13975
	movq	128(%r14), %rax
	cmpq	%rax, 128(%r12)
	je	.L41548
	movq	%r12, %rdi
	movq	%r14, %rsi
	call	*targetm+264(%rip)
	movl	$0, -244(%rbp)
	testl	%eax, %eax
	movl	%eax, -56(%rbp)
	je	.L13975
	movl	$0, -244(%rbp)
	movzbl	16(%r12), %eax
	cmpl	$18, %eax
	je	.L14110
	cmpl	$18, %eax
	ja	.L14127
	cmpl	$13, %eax
	je	.L13988
.L13987:
	cmpl	$2, -56(%rbp)
	jne	.L13975
	cmpl	$1, -244(%rbp)
	movl	-56(%rbp), %edi
	cmovne	-244(%rbp), %edi
	movl	%edi, -244(%rbp)
	jmp	.L13975
.L13988:
	movq	8(%r12), %rdi
	movq	8(%r14), %rsi
	cmpq	%rsi, %rdi
	je	.L13989
	call	comptypes
.L41547:
	movl	%eax, -244(%rbp)
	jmp	.L13987
.L13989:
	movl	$1, -244(%rbp)
	jmp	.L13987
.L14127:
	cmpl	$20, %eax
	je	.L14123
	cmpl	$23, %eax
	jne	.L13987
	movl	$1, -204(%rbp)
	movq	8(%r14), %rsi
	movq	8(%r12), %rdi
	cmpq	%rsi, %rdi
	je	.L13992
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -204(%rbp)
	je	.L13987
.L13992:
	movq	24(%r12), %rdx
	movq	%rdx, -240(%rbp)
	testq	%rdx, %rdx
	movq	24(%r14), %rax
	movq	%rax, -232(%rbp)
	je	.L41751
	cmpq	$0, -232(%rbp)
	je	.L41752
	movl	$1, -244(%rbp)
	xorl	%r14d, %r14d
.L14107:
	cmpq	$0, -240(%rbp)
	je	.L41753
	cmpq	$0, -232(%rbp)
	je	.L14096
	movq	-240(%rbp), %r10
	movq	32(%r10), %rdi
	testq	%rdi, %rdi
	je	.L41754
	movq	-232(%rbp), %r9
	movq	32(%r9), %rax
	testq	%rax, %rax
	jne	.L14082
.L41565:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L14096
.L14081:
	cmpl	-244(%rbp), %r14d
	movl	-244(%rbp), %eax
	movq	-240(%rbp), %r10
	movq	-232(%rbp), %r8
	cmovg	%r14d, %eax
	movl	%eax, -244(%rbp)
	movq	(%r10), %rax
	movq	%rax, -240(%rbp)
	movq	(%r8), %r12
	movq	%r12, -232(%rbp)
	jmp	.L14107
.L14096:
	movl	$0, -244(%rbp)
.L14076:
	cmpl	$1, -244(%rbp)
	movl	-244(%rbp), %eax
	cmove	-204(%rbp), %eax
	jmp	.L41547
.L14082:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r14d
	jne	.L14081
	movq	-240(%rbp), %rdx
	movq	32(%rdx), %rax
	cmpb	$21, 16(%rax)
	je	.L41756
.L14086:
	movq	-232(%rbp), %rsi
	movq	32(%rsi), %rax
	cmpb	$21, 16(%rax)
	jne	.L14096
	cmpq	$0, 96(%rax)
	je	.L14097
	testb	$8, 62(%rax)
	je	.L14096
.L14097:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14096
	movq	-240(%rbp), %rdx
	movq	32(%rdx), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14096
	movq	-232(%rbp), %r9
	movq	32(%r9), %rdi
	movq	24(%rdi), %r12
	testq	%r12, %r12
	je	.L14096
.L14103:
	movq	-240(%rbp), %rcx
	movq	8(%r12), %rdi
	movq	32(%rcx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14099
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.L14103
	jmp	.L14096
.L14099:
	testq	%r12, %r12
	jne	.L14081
	jmp	.L14096
.L41756:
	cmpq	$0, 96(%rax)
	je	.L14087
	testb	$8, 62(%rax)
	je	.L14086
.L14087:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14086
	movq	-232(%rbp), %rcx
	movq	32(%rcx), %r12
	movq	32(%r12), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14086
	movq	-240(%rbp), %rax
	movq	32(%rax), %r8
	movq	24(%r8), %r12
	testq	%r12, %r12
	je	.L14096
.L14093:
	movq	-232(%rbp), %r10
	movq	8(%r12), %rdi
	movq	32(%r10), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14099
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.L14093
	jmp	.L14096
.L41754:
	movq	-232(%rbp), %r11
	movq	32(%r11), %rdi
	jmp	.L41565
.L41753:
	cmpq	$0, -232(%rbp)
	je	.L14076
	jmp	.L14096
.L41752:
	movq	-240(%rbp), %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L13987
	movq	136(%r14), %rax
	testq	%rax, %rax
	je	.L41473
	movq	%rax, %r14
	movl	$1, -220(%rbp)
	movl	$0, -216(%rbp)
.L14071:
	cmpq	$0, -240(%rbp)
	je	.L41757
	testq	%r14, %r14
	je	.L14060
	movq	-240(%rbp), %rsi
	movq	32(%rsi), %rdi
	testq	%rdi, %rdi
	je	.L41758
	movq	32(%r14), %rax
	testq	%rax, %rax
	jne	.L14046
.L41564:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L14060
.L14045:
	movl	-220(%rbp), %eax
	movl	-216(%rbp), %edi
	cmpl	%eax, -216(%rbp)
	movq	-240(%rbp), %rsi
	cmovle	%eax, %edi
	movl	%edi, -220(%rbp)
	movq	(%rsi), %r8
	movq	%r8, -240(%rbp)
	movq	(%r14), %r14
	jmp	.L14071
.L14060:
	movl	$0, -220(%rbp)
.L14040:
	cmpl	$1, -220(%rbp)
	movl	$2, -244(%rbp)
	jne	.L13987
.L41474:
	movl	-204(%rbp), %r14d
	movl	%r14d, -244(%rbp)
	jmp	.L13987
.L14046:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -216(%rbp)
	jne	.L14045
	movq	-240(%rbp), %rdi
	movq	32(%rdi), %rax
	cmpb	$21, 16(%rax)
	je	.L41760
.L14050:
	movq	32(%r14), %rax
	cmpb	$21, 16(%rax)
	jne	.L14060
	cmpq	$0, 96(%rax)
	je	.L14061
	testb	$8, 62(%rax)
	je	.L14060
.L14061:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14060
	movq	-240(%rbp), %r12
	movq	32(%r12), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14060
	movq	32(%r14), %rcx
	movq	24(%rcx), %r12
	testq	%r12, %r12
	je	.L14060
.L14067:
	movq	-240(%rbp), %rax
	movq	8(%r12), %rdi
	movq	32(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14063
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.L14067
	jmp	.L14060
.L14063:
	testq	%r12, %r12
	jne	.L14045
	jmp	.L14060
.L41760:
	cmpq	$0, 96(%rax)
	je	.L14051
	testb	$8, 62(%rax)
	je	.L14050
.L14051:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14050
	movq	32(%r14), %r10
	movq	32(%r10), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14050
	movq	-240(%rbp), %rdx
	movq	32(%rdx), %r11
	movq	24(%r11), %r12
	testq	%r12, %r12
	je	.L14060
.L14057:
	movq	8(%r12), %rdi
	movq	32(%r14), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14063
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.L14057
	jmp	.L14060
.L41758:
	movq	32(%r14), %rdi
	jmp	.L41564
.L41757:
	testq	%r14, %r14
	je	.L14040
	jmp	.L14060
.L41473:
	movl	-204(%rbp), %eax
	jmp	.L41547
.L41751:
	movq	%rax, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L13987
	movq	136(%r12), %rax
	testq	%rax, %rax
	je	.L41474
	movq	%rax, %r14
	movl	$1, -212(%rbp)
	movl	$0, -208(%rbp)
.L14032:
	cmpq	$0, -232(%rbp)
	je	.L41761
	testq	%r14, %r14
	je	.L14021
	movq	-232(%rbp), %r12
	movq	32(%r12), %rdi
	testq	%rdi, %rdi
	je	.L41762
	movq	32(%r14), %rax
	testq	%rax, %rax
	jne	.L14007
.L41563:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L14021
.L14006:
	movl	-212(%rbp), %r8d
	movl	-208(%rbp), %eax
	cmpl	%r8d, -208(%rbp)
	movq	-232(%rbp), %rcx
	cmovle	%r8d, %eax
	movl	%eax, -212(%rbp)
	movq	(%rcx), %r12
	movq	%r12, -232(%rbp)
	movq	(%r14), %r14
	jmp	.L14032
.L14021:
	movl	$0, -212(%rbp)
.L14001:
	cmpl	$1, -212(%rbp)
	movl	$2, -244(%rbp)
	jne	.L13987
	movl	-204(%rbp), %r14d
	movl	%r14d, -244(%rbp)
	jmp	.L13987
.L14007:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -208(%rbp)
	jne	.L14006
	movq	-232(%rbp), %rcx
	movq	32(%rcx), %rax
	cmpb	$21, 16(%rax)
	je	.L41764
.L14011:
	movq	32(%r14), %rax
	cmpb	$21, 16(%rax)
	jne	.L14021
	cmpq	$0, 96(%rax)
	je	.L14022
	testb	$8, 62(%rax)
	je	.L14021
.L14022:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14021
	movq	-232(%rbp), %r11
	movq	32(%r11), %r10
	movq	32(%r10), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14021
	movq	32(%r14), %r9
	movq	24(%r9), %r12
	testq	%r12, %r12
	je	.L14021
.L14028:
	movq	-232(%rbp), %rdx
	movq	8(%r12), %rdi
	movq	32(%rdx), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14024
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.L14028
	jmp	.L14021
.L14024:
	testq	%r12, %r12
	jne	.L14006
	jmp	.L14021
.L41764:
	cmpq	$0, 96(%rax)
	je	.L14012
	testb	$8, 62(%rax)
	je	.L14011
.L14012:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L14011
	movq	32(%r14), %r8
	movq	32(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14011
	movq	-232(%rbp), %rdi
	movq	32(%rdi), %rsi
	movq	24(%rsi), %r12
	testq	%r12, %r12
	je	.L14021
.L14018:
	movq	8(%r12), %rdi
	movq	32(%r14), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L14024
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.L14018
	jmp	.L14021
.L41762:
	movq	32(%r14), %rdi
	jmp	.L41563
.L41761:
	testq	%r14, %r14
	je	.L14001
	jmp	.L14021
.L14123:
	xorl	%edx, %edx
	movq	%r12, %rdi
	movq	%r14, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmovne	-244(%rbp), %eax
	jmp	.L41547
.L14110:
	movq	24(%r12), %r11
	movq	%r11, -64(%rbp)
	movq	24(%r14), %rsi
	movl	$1, -244(%rbp)
	movq	%rsi, -72(%rbp)
	movq	8(%r14), %rsi
	movq	8(%r12), %rdi
	cmpq	%rsi, %rdi
	je	.L14111
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -244(%rbp)
	je	.L13972
.L14111:
	cmpq	$0, -64(%rbp)
	je	.L13987
	cmpq	$0, -72(%rbp)
	je	.L13987
	movq	-72(%rbp), %rax
	cmpq	%rax, -64(%rbp)
	je	.L13987
	movq	-64(%rbp), %r14
	movq	112(%rax), %rsi
	movq	112(%r14), %rcx
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L14114
	movq	-64(%rbp), %rax
	movq	104(%rax), %r12
	cmpb	$25, 16(%r12)
	je	.L41765
.L14115:
	movl	$1, %r8d
.L14114:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L14116
	movq	-72(%rbp), %r11
	movq	104(%r11), %r10
	cmpb	$25, 16(%r10)
	je	.L41766
.L14117:
	movl	$1, %ecx
.L14116:
	testb	%r8b, %r8b
	jne	.L13987
	testb	%cl, %cl
	jne	.L13987
	testb	%dil, %dil
	je	.L41500
	testb	%dl, %dl
.L41546:
	jne	.L13987
.L14122:
	movl	$0, -244(%rbp)
	jmp	.L13987
.L41500:
	testb	%dl, %dl
	jne	.L14122
	movq	-64(%rbp), %rdx
	movq	-72(%rbp), %r9
	movq	104(%rdx), %rdi
	movq	104(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L14122
	movq	-64(%rbp), %r8
	movq	-72(%rbp), %rcx
	movq	112(%r8), %rdi
	movq	112(%rcx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L41546
.L41766:
	cmpb	$25, 16(%rsi)
	jne	.L14117
	jmp	.L14116
.L41765:
	cmpb	$25, 16(%rcx)
	jne	.L14115
	jmp	.L14114
	.p2align 6,,7
.L41548:
	movl	$1, -244(%rbp)
	jmp	.L13975
.L41750:
	cmpq	$0, 8(%r14)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L13984
.L41749:
	cmpq	$0, 8(%r12)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L13983
.L41737:
	movzbl	17(%r14), %esi
	movzwl	60(%r14), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %r14
	jmp	.L13979
.L41736:
	movzbl	17(%r12), %esi
	movzwl	60(%r12), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %r12
	jmp	.L13978
	.p2align 6,,7
.L41735:
	testb	$2, 62(%r14)
	je	.L13977
	movq	24(%r14), %rsi
	testq	%rsi, %rsi
	cmovne	%rsi, %r14
	jmp	.L13977
	.p2align 6,,7
.L41734:
	testb	$2, 62(%r12)
	je	.L13976
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	je	.L13976
	movq	%rdi, %r12
	movzbl	16(%rdi), %edx
	jmp	.L13976
	.p2align 6,,7
.L41584:
	movq	32(%rsi), %rdi
	jmp	.L13968
	.p2align 6,,7
.L13967:
	movq	%rax, %r15
	jmp	.L13965
.LFE55:
.Lfe55:
	.size	digest_init,.Lfe55-digest_init
	.align 2
	.p2align 4,,15
	.type	output_init_element,@function
output_init_element:
.LFB56:
	pushq	%rbp
.LCFI260:
	movq	%rsp, %rbp
.LCFI261:
	pushq	%r15
.LCFI262:
	pushq	%r14
.LCFI263:
	pushq	%r13
.LCFI264:
	pushq	%r12
.LCFI265:
	pushq	%rbx
.LCFI266:
	movq	%rdi, %rbx
	subq	$56, %rsp
.LCFI267:
	movl	%ecx, -52(%rbp)
	movq	%rdx, -88(%rbp)
	movq	%rsi, -48(%rbp)
	movq	8(%rdi), %r13
	movzbl	16(%r13), %eax
	movq	%r13, %rdx
	cmpb	$23, %al
	je	.L41831
	cmpb	$18, %al
	je	.L41862
	movzbl	16(%rdi), %ecx
.L41819:
	movq	global_trees(%rip), %r8
.L40058:
	cmpb	$-86, %cl
	je	.L41863
.L40315:
	cmpq	%r8, %rbx
	je	.L41864
	testb	$2, 17(%rbx)
	jne	.L40318
	movl	$0, constructor_constant(%rip)
.L40317:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L40322
	testb	$2, 17(%rbx)
	je	.L41865
.L40322:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L41866
.L40347:
	cmpq	$0, -88(%rbp)
	je	.L40349
	movq	-88(%rbp), %r15
	movq	8(%r15), %rax
	cmpq	global_trees(%rip), %rax
	je	.L40057
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L41867
.L40349:
	movq	-48(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%rbx, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, %r13
	je	.L41868
	movq	constructor_type(%rip), %rax
	cmpb	$18, 16(%rax)
	je	.L41869
.L40352:
	cmpb	$20, 16(%rax)
	je	.L41870
.L40373:
	cmpb	$21, 16(%rax)
	je	.L41871
.L40372:
	cmpq	$0, -88(%rbp)
	je	.L40440
	movq	-88(%rbp), %rdx
	cmpb	$25, 16(%rdx)
	je	.L41872
.L40440:
	movq	constructor_elements(%rip), %rdx
	movq	-88(%rbp), %rdi
	movq	%r13, %rsi
	call	tree_cons
	movq	constructor_type(%rip), %rdx
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%rdx), %eax
	cmpb	$18, %al
	je	.L41873
	cmpb	$20, %al
	je	.L41874
	cmpb	$21, 16(%rdx)
	je	.L41875
.L40442:
	movl	-52(%rbp), %eax
	testl	%eax, %eax
	je	.L40057
	xorl	%r15d, %r15d
	movq	constructor_pending_elts(%rip), %rbx
	.p2align 4,,7
.L40452:
	xorl	%r14d, %r14d
	testq	%rbx, %rbx
	je	.L40454
	.p2align 4,,7
.L40489:
	movq	constructor_type(%rip), %r11
	movzbl	16(%r11), %eax
	cmpb	$18, %al
	je	.L41876
	subb	$20, %al
	cmpb	$1, %al
	ja	.L40453
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L40454
	call	bit_position
	movq	32(%rbx), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L40475
	movq	32(%rbx), %rdx
	movq	40(%rbx), %rdi
	movq	%rdx, constructor_unfilled_fields(%rip)
	movq	8(%rdx), %rsi
.L41848:
	xorl	%ecx, %ecx
	call	output_init_element
.L40453:
	testq	%rbx, %rbx
	jne	.L40489
.L40454:
	testl	%r15d, %r15d
	je	.L40057
	testq	%r14, %r14
	je	.L40057
	movq	constructor_type(%rip), %r12
	movzbl	16(%r12), %edx
	leal	-20(%rdx), %esi
	cmpb	$1, %sil
	jbe	.L41877
	cmpb	$18, %dl
	jne	.L40452
	movq	%r14, constructor_unfilled_index(%rip)
	jmp	.L40452
.L41877:
	movq	%r14, constructor_unfilled_fields(%rip)
	jmp	.L40452
	.p2align 6,,7
.L40057:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
	.p2align 6,,7
.L40475:
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L40477
.L41857:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.L40478
.L41847:
	movq	%rax, %rbx
	jmp	.L40453
.L40478:
	movq	32(%rbx), %r14
	jmp	.L40454
	.p2align 6,,7
.L40477:
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L41847
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L40484
	cmpq	%rbx, 8(%rax)
	je	.L40487
.L40484:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L40454
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
.L41858:
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L40453
	jmp	.L40478
	.p2align 6,,7
.L40487:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L40484
	cmpq	%rbx, 8(%rax)
	je	.L40487
	jmp	.L40484
	.p2align 6,,7
.L41876:
	movq	32(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L40457
	movq	constructor_type(%rip), %r10
	movq	40(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rdx
	movq	8(%r10), %rsi
	jmp	.L41848
.L40457:
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rbx), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L41857
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L41847
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L40467
	cmpq	%rbx, 8(%rax)
	je	.L40470
.L40467:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L40454
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	jmp	.L41858
.L40470:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L40467
	cmpq	%rbx, 8(%rax)
	je	.L40470
	jmp	.L40467
.L41875:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L40442
.L41874:
	movq	constructor_unfilled_fields(%rip), %r13
	movq	(%r13), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L40442
	testb	$2, 53(%rdx)
	je	.L40442
	cmpq	$0, 72(%rdx)
	jne	.L40442
.L40448:
	movq	constructor_unfilled_fields(%rip), %r8
	movq	(%r8), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L40442
	testb	$2, 53(%rdx)
	je	.L40442
	cmpq	$0, 72(%rdx)
	jne	.L40442
	jmp	.L40448
.L41873:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L40442
.L41872:
	movq	%rdx, %rdi
	call	copy_node
	movq	%rax, -88(%rbp)
	jmp	.L40440
.L41871:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L40372
	movq	32(%rax), %rdi
	testb	$1, 17(%rdi)
	jne	.L41878
.L40415:
	movq	$0, constructor_elements(%rip)
	jmp	.L40372
.L41878:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r15
	xorl	%r12d, %r12d
	cmpq	%r15, %r14
	movq	%r14, %rbx
	jae	.L41791
.L40422:
	cmpl	$3, (%rbx)
	je	.L41879
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L40418:
	addq	$16, %rbx
	cmpq	%r15, %rbx
	jb	.L40422
.L41791:
	movslq	%r12d,%rbx
	movq	%r14, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r15, %r14
	movq	%rsp, -64(%rbp)
	movq	%rsp, %rbx
	jae	.L41793
.L40436:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L41880
	cmpl	$2, %eax
	je	.L41881
.L40430:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r9d
	leaq	1(%rdx), %rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	je	.L40426
.L40435:
	movzbl	(%rcx), %r15d
	incq	%rbx
	incq	%rcx
	testb	%r15b, %r15b
	movb	%r15b, (%rbx)
	jne	.L40435
.L40426:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L40436
.L41793:
	movb	$0, (%rbx)
	movq	-64(%rbp), %rax
	cmpb	$0, (%rax)
	je	.L40415
	movq	%rax, %rsi
	movl	$.LC142, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L40415
.L41881:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L40430
.L41880:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L40426
.L41879:
	addl	$25, %r12d
	jmp	.L40418
.L41870:
	movl	constructor_incremental(%rip), %r10d
	testl	%r10d, %r10d
	je	.L40375
	movq	constructor_unfilled_fields(%rip), %rdx
	cmpq	%rdx, -88(%rbp)
	je	.L40373
	testq	%rdx, %rdx
	jne	.L40376
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L40383
.L41785:
	cmpb	$20, 16(%rax)
	movq	$0, constructor_elements(%rip)
	je	.L41882
.L40403:
	cmpb	$18, 16(%rax)
	je	.L41883
.L40409:
	movl	$0, constructor_incremental(%rip)
.L40375:
	movq	-88(%rbp), %rdi
	movq	%r13, %rsi
	call	add_pending_init
	jmp	.L40057
.L41883:
	movq	24(%rax), %rax
	testq	%rax, %rax
	jne	.L41884
	movq	global_trees+136(%rip), %rax
.L41846:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L40409
.L41884:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L41846
.L41882:
	movq	24(%rax), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L40409
	testb	$2, 53(%rdx)
	je	.L40409
	cmpq	$0, 72(%rdx)
	jne	.L40409
.L40389:
	movq	constructor_unfilled_fields(%rip), %rsi
	movq	(%rsi), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L40409
	testb	$2, 53(%rdx)
	je	.L40409
	cmpq	$0, 72(%rdx)
	jne	.L40409
	jmp	.L40389
.L40383:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L40383
	movq	constructor_type(%rip), %rax
	jmp	.L41785
.L40376:
	movq	-88(%rbp), %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r12
	call	bit_position
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L40375
	movq	constructor_type(%rip), %rax
	movzbl	16(%rax), %edx
	cmpb	$20, %dl
	je	.L40396
	cmpb	$18, %dl
	jne	.L40375
.L40396:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L40402
.L41788:
	cmpb	$20, 16(%rax)
	movq	$0, constructor_elements(%rip)
	jne	.L40403
	movq	24(%rax), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L40409
	testb	$2, 53(%rdx)
	je	.L40409
	cmpq	$0, 72(%rdx)
	jne	.L40409
.L40408:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L40409
	testb	$2, 53(%rdx)
	je	.L40409
	cmpq	$0, 72(%rdx)
	jne	.L40409
	jmp	.L40408
.L40402:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L40402
	movq	constructor_type(%rip), %rax
	jmp	.L41788
	.p2align 6,,7
.L41869:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L40375
	movq	-88(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L41826
	movl	constructor_incremental(%rip), %r14d
	testl	%r14d, %r14d
	je	.L40375
	movq	-88(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L40375
	movq	constructor_type(%rip), %rax
	movzbl	16(%rax), %edx
	cmpb	$20, %dl
	je	.L40355
	cmpb	$18, %dl
	jne	.L40375
.L40355:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L40361
.L41782:
	cmpb	$20, 16(%rax)
	movq	$0, constructor_elements(%rip)
	jne	.L40403
	movq	24(%rax), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L40409
	testb	$2, 53(%rdx)
	je	.L40409
	cmpq	$0, 72(%rdx)
	jne	.L40409
.L40367:
	movq	constructor_unfilled_fields(%rip), %r11
	movq	(%r11), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L40409
	testb	$2, 53(%rdx)
	je	.L40409
	cmpq	$0, 72(%rdx)
	jne	.L40409
	jmp	.L40367
.L40361:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L40361
	movq	constructor_type(%rip), %rax
	jmp	.L41782
	.p2align 6,,7
.L41826:
	movq	constructor_type(%rip), %rax
	jmp	.L40352
.L41868:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L40057
.L41867:
	call	integer_zerop
	testl	%eax, %eax
	je	.L40349
	movq	constructor_type(%rip), %r8
	cmpb	$18, 16(%r8)
	je	.L40057
	movq	-88(%rbp), %rax
	cmpq	$0, (%rax)
	je	.L40349
	jmp	.L40057
.L41866:
	movq	8(%rbx), %rsi
	movq	%rbx, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L40347
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L40347
.L41865:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r13
	xorl	%r12d, %r12d
	cmpq	%r13, %r14
	movq	%r14, %rbx
	jae	.L41777
.L40329:
	cmpl	$3, (%rbx)
	je	.L41885
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L40325:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L40329
.L41777:
	movslq	%r12d,%rbx
	movq	%r14, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L41779
.L40343:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L41886
	cmpl	$2, %eax
	je	.L41887
.L40337:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r13d
	leaq	1(%rdx), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L40333
	.p2align 4,,7
.L40342:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L40342
.L40333:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L40343
.L41779:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	jne	.L41888
.L40346:
	movq	global_trees(%rip), %rbx
	jmp	.L40347
.L41888:
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L40346
.L41887:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L40337
.L41886:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L40333
.L41885:
	addl	$25, %r12d
	jmp	.L40325
.L40318:
	movq	8(%rbx), %rsi
	movq	%rbx, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L40321
	movq	constructor_type(%rip), %r12
	movzbl	16(%r12), %ecx
	subb	$20, %cl
	cmpb	$1, %cl
	ja	.L40317
	movq	-88(%rbp), %rdi
	testb	$2, 53(%rdi)
	je	.L40317
	cmpb	$25, 16(%rbx)
	je	.L40317
.L40321:
	movl	$0, constructor_simple(%rip)
	jmp	.L40317
.L41864:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L40317
.L41863:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L40315
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L40315
	movl	-52(%rbp), %eax
	testl	%eax, %eax
	je	.L40315
	movq	32(%rbx), %rsi
	movq	32(%rsi), %r10
	movq	104(%r10), %rbx
	jmp	.L40315
.L41862:
	movzbl	16(%rdi), %ecx
	cmpb	$29, %cl
	je	.L41889
.L40060:
	movq	128(%rdx), %r12
	movq	-48(%rbp), %rdx
	movq	128(%rdx), %r13
	cmpq	%r13, %r12
	je	.L40062
	testq	%r12, %r12
	je	.L40062
	testq	%r13, %r13
	je	.L40062
	movzbl	16(%r12), %edx
	testb	%dl, %dl
	je	.L40062
	movzbl	16(%r13), %eax
	testb	%al, %al
	jne	.L40061
.L40062:
	movl	$1, -80(%rbp)
.L40063:
	movl	-80(%rbp), %r14d
	testl	%r14d, %r14d
	jne	.L41819
	movq	8(%rbx), %r13
.L40059:
	movzbl	16(%r13), %r12d
	cmpl	$23, %r12d
	je	.L40220
	cmpl	$18, %r12d
	je	.L40220
	cmpb	$32, %cl
	je	.L41890
	movl	optimize(%rip), %r9d
	testl	%r9d, %r9d
	je	.L40283
	cmpb	$34, %cl
	je	.L41891
.L40283:
	cmpb	$116, %cl
	movq	%rbx, %rdx
	je	.L41825
	cmpb	$115, %cl
	je	.L41892
.L40292:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L40297
	cmpb	$49, %al
	je	.L40297
	cmpb	$50, %al
	je	.L40297
	cmpb	$101, %al
	je	.L40297
.L40296:
	cmpl	$10, %r12d
	je	.L41893
	cmpb	$39, %cl
	je	.L41894
.L40305:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L40310
	testb	$32, 17(%r13)
	je	.L40311
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L40312
	movq	integer_types+40(%rip), %r15
	movzwl	60(%r13), %r9d
	movzwl	60(%r15), %r13d
	andl	$511, %r9d
	andl	$511, %r13d
	cmpl	%r13d, %r9d
	je	.L40312
.L40311:
	movq	integer_types+40(%rip), %rdi
.L41855:
	movq	%rbx, %rsi
.L41856:
	call	convert
.L41843:
	movq	%rax, %r12
.L41834:
	movq	global_trees(%rip), %r8
.L40281:
	movzbl	16(%r12), %ecx
	movq	%r12, %rbx
	jmp	.L40058
.L40312:
	movq	integer_types+48(%rip), %rdi
	jmp	.L41855
.L40310:
	movl	flag_traditional(%rip), %r8d
	testl	%r8d, %r8d
	je	.L40313
	movl	flag_allow_single_precision(%rip), %r14d
	testl	%r14d, %r14d
	jne	.L40313
	movq	global_trees+192(%rip), %r11
	cmpq	%r11, 128(%r13)
	je	.L41895
.L40313:
	cmpl	$5, %r12d
	je	.L41896
.L40314:
	movq	%rbx, %r12
	jmp	.L41834
.L41896:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L41835:
	movq	global_trees(%rip), %r8
	movq	%r8, %r12
	jmp	.L40281
.L41895:
	movq	global_trees+200(%rip), %rdi
	jmp	.L41855
	.p2align 6,,7
.L41894:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L40305
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%rdi), %esi
	movq	40(%rdx), %rdi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L40305
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	je	.L40311
	testb	$32, 17(%r13)
	jne	.L40312
	jmp	.L40311
	.p2align 6,,7
.L41893:
	movq	integer_types+40(%rip), %r12
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %ecx
	movzwl	60(%r12), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%ecx, %ecx
	jne	.L40304
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L40303
.L40304:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L40303:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L41855
.L40297:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L40296
.L41892:
	movq	32(%rbx), %rdi
	movq	8(%rbx), %r14
	cmpq	%r14, 8(%rdi)
	jne	.L40292
	.p2align 4,,7
.L40295:
	movzbl	16(%rdi), %ecx
	movq	%rdi, %rbx
	cmpb	$116, %cl
	jne	.L41897
.L41825:
	movq	32(%rbx), %rdi
	jmp	.L40295
.L41897:
	cmpb	$115, %cl
	jne	.L40292
	movq	32(%rdi), %r10
	movq	8(%rbx), %r11
	cmpq	%r11, 8(%r10)
	movq	%r10, %rdi
	je	.L40295
	jmp	.L40292
.L41891:
	movl	pedantic(%rip), %r15d
	testl	%r15d, %r15d
	jne	.L40283
	cmpb	$51, 48(%rbx)
	je	.L40283
	cmpq	$0, current_function_decl(%rip)
	je	.L40289
	movzbl	17(%rbx), %r8d
	andb	$24, %r8b
	cmpb	$16, %r8b
	je	.L41898
.L40289:
	movq	%rbx, %rdi
.L40290:
	movq	%rdi, %rbx
	movq	8(%rdi), %r13
.L41833:
	movzbl	16(%rbx), %ecx
	jmp	.L40283
.L41898:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L40289
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L40289
	testb	$2, 17(%rax)
	je	.L40289
	cmpb	$46, %dl
	movq	%rax, %rdi
	jne	.L40290
	jmp	.L40289
	.p2align 6,,7
.L41890:
	movq	104(%rbx), %rbx
	jmp	.L41833
.L40220:
	movl	%r12d, %edx
	movq	%rbx, %rsi
	xorl	%r12d, %r12d
	cmpb	$116, %cl
	je	.L41821
	cmpb	$115, %cl
	je	.L41899
.L40222:
	movzbl	%cl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L40228
	cmpb	$49, %al
	je	.L40228
	cmpb	$50, %al
	je	.L40228
	cmpb	$101, %al
	je	.L40228
.L40227:
	cmpl	$23, %edx
	je	.L41900
	cmpl	$18, %edx
	jne	.L40314
	movzbl	%cl, %esi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rsi), %eax
	movq	8(%r13), %r14
	cmpb	$114, %al
	je	.L40233
	cmpb	$100, %al
	je	.L40233
.L40232:
	movzbl	17(%r13), %r8d
	movzbl	62(%r13), %r10d
	movl	$1, %esi
	movl	%r8d, %r9d
	movl	%r8d, %r15d
	movl	%r10d, %edi
	shrb	$3, %r9b
	shrb	$4, %r15b
	shrb	$5, %dil
	andl	$1, %r9d
	andl	%r15d, %esi
	andl	$1, %edi
	addl	%r9d, %r9d
	sall	$2, %edi
	orl	%r9d, %esi
	xorl	%r9d, %r9d
	orl	%edi, %esi
	movzbl	16(%r13), %edi
	cmpb	$20, %dil
	je	.L41901
.L40236:
	leal	0(,%r9,8), %r13d
	orl	%r13d, %esi
	jne	.L40235
	testl	%edx, %edx
	jne	.L40235
	testl	%r11d, %r11d
	je	.L40234
.L40235:
	movl	%r8d, %r15d
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r15b
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%r15d, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L41902
.L40238:
	leal	0(,%rcx,8), %r8d
	movq	%r14, %rdi
	orl	%r8d, %esi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%rbx), %ecx
	movq	%rax, %r14
.L40234:
	cmpb	$41, %cl
	je	.L41903
	cmpb	$47, %cl
	je	.L41904
	xorl	%r13d, %r13d
	testl	%r12d, %r12d
	je	.L41905
.L40277:
	movl	flag_isoc99(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L40278
	testl	%r13d, %r13d
	je	.L40314
.L40278:
	movq	%r14, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %r12
	je	.L41906
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%r12, %rdi
	movq	%rax, %rsi
	jmp	.L41856
.L41906:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, %r12
	call	mark_addressable
	testl	%eax, %eax
	je	.L41835
	movq	%rbx, %rdi
	call	staticp
	movzbl	17(%r12), %ebx
	movl	%eax, %edi
	andb	$1, %dil
	addb	%dil, %dil
	andb	$-4, %bl
	orb	%dil, %bl
	movb	%bl, 17(%r12)
	jmp	.L41834
.L41905:
	movq	%rbx, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r13d
	jmp	.L40277
.L41904:
	movq	40(%rbx), %r12
	movq	8(%r12), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L40242
	cmpl	$18, %r14d
	je	.L40242
	movzbl	16(%r12), %edx
	cmpb	$32, %dl
	je	.L41907
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L40245
	cmpb	$34, %dl
	je	.L41908
.L40245:
	cmpb	$116, %dl
	movq	%r12, %rcx
	je	.L41823
	cmpb	$115, %dl
	je	.L41909
.L40254:
	movzbl	%dl, %r8d 
	movzbl	tree_code_type(%r8), %eax
	cmpb	$60, %al
	je	.L40259
	cmpb	$49, %al
	je	.L40259
	cmpb	$50, %al
	je	.L40259
	cmpb	$101, %al
	je	.L40259
.L40258:
	cmpl	$10, %r14d
	je	.L41910
	cmpb	$39, %dl
	je	.L41911
.L40267:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L40272
	testb	$32, 17(%r13)
	je	.L40273
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L40274
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r13), %r10d
	movzwl	60(%rdx), %r13d
	andl	$511, %r10d
	andl	$511, %r13d
	cmpl	%r13d, %r10d
	je	.L40274
.L40273:
	movq	integer_types+40(%rip), %rdi
.L41832:
	movq	%r12, %rsi
	call	convert
.L40243:
	movq	8(%rax), %rsi
	movq	32(%rbx), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L41843
.L40274:
	movq	integer_types+48(%rip), %rdi
	jmp	.L41832
	.p2align 6,,7
.L40272:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L40275
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L40275
	movq	global_trees+192(%rip), %rsi
	cmpq	%rsi, 128(%r13)
	je	.L41912
.L40275:
	cmpl	$5, %r14d
	je	.L41913
	movq	%r12, %rax
	jmp	.L40243
.L41913:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L40243
.L41912:
	movq	global_trees+200(%rip), %rdi
	jmp	.L41832
	.p2align 6,,7
.L41911:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L40267
	movq	integer_types+40(%rip), %r11
	movq	40(%rdx), %rdi
	movzwl	60(%r11), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L40267
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L40273
	testb	$32, 17(%r13)
	jne	.L40274
	jmp	.L40273
	.p2align 6,,7
.L41910:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L40266
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L40265
.L40266:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L40265:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L41832
.L40259:
	movl	24(%rcx), %eax
	movl	%eax, 24(%r12)
	jmp	.L40258
.L41909:
	movq	32(%r12), %rsi
	movq	8(%r12), %rdi
	cmpq	%rdi, 8(%rsi)
	jne	.L40254
.L40257:
	movzbl	16(%rsi), %edx
	movq	%rsi, %r12
	cmpb	$116, %dl
	jne	.L41914
.L41823:
	movq	32(%r12), %rsi
	jmp	.L40257
.L41914:
	cmpb	$115, %dl
	jne	.L40254
	movq	32(%rsi), %r15
	movq	8(%r12), %r9
	cmpq	%r9, 8(%r15)
	movq	%r15, %rsi
	je	.L40257
	jmp	.L40254
.L41908:
	movl	pedantic(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L40249
	cmpb	$51, 48(%r12)
	je	.L40249
	cmpq	$0, current_function_decl(%rip)
	je	.L40251
	movzbl	17(%r12), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L41915
.L40251:
	movq	%r12, %rsi
.L40252:
	movq	%rsi, %r12
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L40249:
	movq	%rax, %r13
	jmp	.L40245
.L41915:
	movq	104(%r12), %rax
	testq	%rax, %rax
	je	.L40251
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L40251
	testb	$2, 17(%rax)
	je	.L40251
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L40252
	jmp	.L40251
	.p2align 6,,7
.L41907:
	movq	104(%r12), %r12
	movzbl	16(%r12), %edx
	jmp	.L40245
.L40242:
	movq	%r12, %rdi
	call	default_function_array_conversion
	jmp	.L40243
.L41903:
	movq	72(%r14), %rdi
	movq	32(%rbx), %rsi
	jmp	.L41856
.L41902:
	testq	%r14, %r14
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L40238
.L41901:
	testq	%r14, %r14
	movl	$1, %eax
	cmovne	%eax, %r9d
	jmp	.L40236
.L40233:
	movzbl	17(%rbx), %r10d
	movl	$1, %r11d
	movl	%r10d, %edx
	shrb	$3, %r10b
	shrb	$4, %dl
	andl	%r10d, %r11d
	andl	$1, %edx
	jmp	.L40232
.L41900:
	movl	$121, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L41843
.L40228:
	movl	24(%rsi), %eax
	movl	%eax, 24(%rbx)
	jmp	.L40227
.L41899:
	movq	32(%rbx), %rdi
	cmpq	%r13, 8(%rdi)
	jne	.L40222
	.p2align 4,,7
.L40226:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rdi, %rbx
	movzbl	16(%rdi), %ecx
	cmove	%eax, %r12d
	cmpb	$116, %cl
	jne	.L41916
.L41821:
	movq	32(%rbx), %rdi
	jmp	.L40226
.L41916:
	cmpb	$115, %cl
	jne	.L40222
	movq	32(%rdi), %rdi
	movq	8(%rbx), %r15
	cmpq	%r15, 8(%rdi)
	je	.L40226
	jmp	.L40222
.L40061:
	cmpb	$6, %dl
	je	.L41917
.L40064:
	cmpb	$6, %al
	je	.L41918
.L40065:
	cmpb	$10, %dl
	je	.L41919
.L40066:
	cmpb	$10, 16(%r13)
	je	.L41920
.L40067:
	cmpq	%r13, %r12
	je	.L41852
	movzbl	16(%r12), %edi
	cmpb	16(%r13), %dil
	je	.L41921
.L41854:
	movl	$0, -80(%rbp)
.L41818:
	movzbl	16(%rbx), %ecx
	jmp	.L40063
.L41921:
	movzbl	17(%r12), %r8d
	movzbl	62(%r12), %esi
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	shrb	$5, %sil
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	$1, %r8d
	andl	$1, %esi
	andl	$1, %edx
	addl	%r8d, %r8d
	sall	$2, %esi
	orl	%r8d, %edx
	orl	%esi, %edx
	cmpb	$20, %dil
	je	.L41922
.L40071:
	movzbl	17(%r13), %r10d
	movzbl	62(%r13), %r9d
	leal	0(,%rcx,8), %esi
	orl	%edx, %esi
	xorl	%ecx, %ecx
	movl	%r10d, %edx
	shrb	$5, %r9b
	shrb	$3, %r10b
	shrb	$4, %dl
	andl	$1, %r10d
	andl	$1, %r9d
	andl	$1, %edx
	addl	%r10d, %r10d
	sall	$2, %r9d
	orl	%r10d, %edx
	orl	%r9d, %edx
	cmpb	$20, %dil
	je	.L41923
.L40072:
	leal	0(,%rcx,8), %edi
	orl	%edi, %edx
	cmpl	%edx, %esi
	jne	.L41854
	movq	128(%r13), %rax
	cmpq	%rax, 128(%r12)
	je	.L41852
	movq	%r12, %rdi
	movq	%r13, %rsi
	call	*targetm+264(%rip)
	testl	%eax, %eax
	movl	%eax, -56(%rbp)
	je	.L41854
	movl	$0, -80(%rbp)
	movzbl	16(%r12), %eax
	cmpl	$18, %eax
	je	.L40198
	cmpl	$18, %eax
	ja	.L40215
	cmpl	$13, %eax
	je	.L40076
.L40075:
	cmpl	$2, -56(%rbp)
	jne	.L41818
	cmpl	$1, -80(%rbp)
	jne	.L41818
	movl	$2, -80(%rbp)
	jmp	.L41818
.L40076:
	movq	8(%r12), %rdi
	movq	8(%r13), %rsi
	cmpq	%rsi, %rdi
	je	.L40077
	call	comptypes
.L41830:
	movl	%eax, -80(%rbp)
	jmp	.L40075
.L40077:
	movl	$1, -80(%rbp)
	jmp	.L40075
.L40215:
	cmpl	$20, %eax
	je	.L40211
	cmpl	$23, %eax
	jne	.L40075
	movl	$1, -68(%rbp)
	movq	8(%r13), %rsi
	movq	8(%r12), %rdi
	cmpq	%rsi, %rdi
	je	.L40080
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -68(%rbp)
	je	.L40075
.L40080:
	movq	24(%r12), %r15
	movq	24(%r13), %r14
	testq	%r15, %r15
	je	.L41924
	testq	%r14, %r14
	je	.L41925
	movl	$1, -80(%rbp)
	xorl	%r13d, %r13d
.L40195:
	testq	%r15, %r15
	je	.L41926
	testq	%r14, %r14
	je	.L40184
	movq	32(%r15), %rdi
	testq	%rdi, %rdi
	je	.L41927
	movq	32(%r14), %rax
	testq	%rax, %rax
	jne	.L40170
.L41851:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L40184
.L40169:
	cmpl	-80(%rbp), %r13d
	movl	-80(%rbp), %eax
	cmovg	%r13d, %eax
	movl	%eax, -80(%rbp)
	movq	(%r14), %r14
	movq	(%r15), %r15
	jmp	.L40195
.L40184:
	movl	$0, -80(%rbp)
.L40164:
	cmpl	$1, -80(%rbp)
	movl	-80(%rbp), %edx
	cmove	-68(%rbp), %edx
.L41829:
	movl	%edx, -80(%rbp)
	jmp	.L40075
.L40170:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, %r13d
	jne	.L40169
	movq	32(%r15), %rax
	cmpb	$21, 16(%rax)
	je	.L41929
.L40174:
	movq	32(%r14), %rax
	cmpb	$21, 16(%rax)
	jne	.L40184
	cmpq	$0, 96(%rax)
	je	.L40185
	testb	$8, 62(%rax)
	je	.L40184
.L40185:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L40184
	movq	32(%r15), %rdx
	movq	32(%rdx), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L40184
	movq	32(%r14), %rcx
	movq	24(%rcx), %r12
	testq	%r12, %r12
	je	.L40184
.L40191:
	movq	8(%r12), %rdi
	movq	32(%r15), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L40187
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.L40191
	jmp	.L40184
.L40187:
	testq	%r12, %r12
	jne	.L40169
	jmp	.L40184
.L41929:
	cmpq	$0, 96(%rax)
	je	.L40175
	testb	$8, 62(%rax)
	je	.L40174
.L40175:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L40174
	movq	32(%r14), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L40174
	movq	32(%r15), %rdi
	movq	24(%rdi), %r12
	testq	%r12, %r12
	je	.L40184
.L40181:
	movq	8(%r12), %rdi
	movq	32(%r14), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L40187
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.L40181
	jmp	.L40184
.L41927:
	movq	32(%r14), %rdi
	jmp	.L41851
.L41926:
	testq	%r14, %r14
	je	.L40164
	jmp	.L40184
.L41925:
	movq	%r15, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L40075
	movq	136(%r13), %rax
	testq	%rax, %rax
	je	.L41801
	movq	%rax, %r13
	movl	$1, %r14d
	movl	$0, -76(%rbp)
.L40159:
	testq	%r15, %r15
	je	.L41930
	testq	%r13, %r13
	je	.L40148
	movq	32(%r15), %rdi
	testq	%rdi, %rdi
	je	.L41931
	movq	32(%r13), %rax
	testq	%rax, %rax
	jne	.L40134
.L41850:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L40148
.L40133:
	cmpl	%r14d, -76(%rbp)
	movq	(%r15), %r15
	cmovg	-76(%rbp), %r14d
	movq	(%r13), %r13
	jmp	.L40159
.L40148:
	xorl	%r14d, %r14d
.L40128:
	decl	%r14d
	movl	$2, -80(%rbp)
	jne	.L40075
.L41802:
	movl	-68(%rbp), %r13d
	movl	%r13d, -80(%rbp)
	jmp	.L40075
.L40134:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -76(%rbp)
	jne	.L40133
	movq	32(%r15), %rax
	cmpb	$21, 16(%rax)
	je	.L41933
.L40138:
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	jne	.L40148
	cmpq	$0, 96(%rax)
	je	.L40149
	testb	$8, 62(%rax)
	je	.L40148
.L40149:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L40148
	movq	32(%r15), %r9
	movq	32(%r9), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L40148
	movq	32(%r13), %r10
	movq	24(%r10), %r12
	testq	%r12, %r12
	je	.L40148
.L40155:
	movq	8(%r12), %rdi
	movq	32(%r15), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L40151
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.L40155
	jmp	.L40148
.L40151:
	testq	%r12, %r12
	jne	.L40133
	jmp	.L40148
.L41933:
	cmpq	$0, 96(%rax)
	je	.L40139
	testb	$8, 62(%rax)
	je	.L40138
.L40139:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L40138
	movq	32(%r13), %r8
	movq	32(%r8), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L40138
	movq	32(%r15), %rsi
	movq	24(%rsi), %r12
	testq	%r12, %r12
	je	.L40148
.L40145:
	movq	8(%r12), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L40151
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.L40145
	jmp	.L40148
.L41931:
	movq	32(%r13), %rdi
	jmp	.L41850
.L41930:
	testq	%r13, %r13
	je	.L40128
	jmp	.L40148
.L41801:
	movl	-68(%rbp), %edx
	jmp	.L41829
.L41924:
	movq	%r14, %rdi
	call	self_promoting_args_p
	testl	%eax, %eax
	je	.L40075
	movq	136(%r12), %rax
	testq	%rax, %rax
	je	.L41802
	movq	%rax, %r13
	movl	$1, %r15d
	movl	$0, -72(%rbp)
.L40120:
	testq	%r14, %r14
	je	.L41934
	testq	%r13, %r13
	je	.L40109
	movq	32(%r14), %rdi
	testq	%rdi, %rdi
	je	.L41935
	movq	32(%r13), %rax
	testq	%rax, %rax
	jne	.L40095
.L41849:
	call	simple_type_promotes_to
	testq	%rax, %rax
	jne	.L40109
.L40094:
	cmpl	%r15d, -72(%rbp)
	movq	(%r14), %r14
	cmovg	-72(%rbp), %r15d
	movq	(%r13), %r13
	jmp	.L40120
.L40109:
	xorl	%r15d, %r15d
.L40089:
	decl	%r15d
	movl	$2, -80(%rbp)
	jne	.L40075
	movl	-68(%rbp), %eax
	jmp	.L41830
.L40095:
	movq	128(%rdi), %rdi
	movq	128(%rax), %rsi
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -72(%rbp)
	jne	.L40094
	movq	32(%r14), %rax
	cmpb	$21, 16(%rax)
	je	.L41937
.L40099:
	movq	32(%r13), %rax
	cmpb	$21, 16(%rax)
	jne	.L40109
	cmpq	$0, 96(%rax)
	je	.L40110
	testb	$8, 62(%rax)
	je	.L40109
.L40110:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L40109
	movq	32(%r14), %r12
	movq	32(%r12), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L40109
	movq	32(%r13), %rcx
	movq	24(%rcx), %r12
	testq	%r12, %r12
	je	.L40109
.L40116:
	movq	8(%r12), %rdi
	movq	32(%r14), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L40112
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.L40116
	jmp	.L40109
.L40112:
	testq	%r12, %r12
	jne	.L40094
	jmp	.L40109
.L41937:
	cmpq	$0, 96(%rax)
	je	.L40100
	testb	$8, 62(%rax)
	je	.L40099
.L40100:
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L40099
	movq	32(%r13), %r11
	movq	32(%r11), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L40099
	movq	32(%r14), %rdx
	movq	24(%rdx), %r12
	testq	%r12, %r12
	je	.L40109
.L40106:
	movq	8(%r12), %rdi
	movq	32(%r13), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L40112
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.L40106
	jmp	.L40109
.L41935:
	movq	32(%r13), %rdi
	jmp	.L41849
.L41934:
	testq	%r13, %r13
	je	.L40089
	jmp	.L40109
.L40211:
	xorl	%edx, %edx
	movq	%r12, %rdi
	movq	%r13, %rsi
	call	maybe_objc_comptypes
	decl	%eax
	movl	$1, %eax
	cmovne	-80(%rbp), %eax
	jmp	.L41830
.L40198:
	movq	24(%r12), %r14
	movq	24(%r13), %r15
	movl	$1, -80(%rbp)
	movq	8(%r12), %rdi
	movq	8(%r13), %rsi
	cmpq	%rsi, %rdi
	je	.L40199
	call	comptypes
	testl	%eax, %eax
	movl	%eax, -80(%rbp)
	je	.L41816
.L40199:
	testq	%r14, %r14
	je	.L40075
	testq	%r15, %r15
	je	.L40075
	cmpq	%r15, %r14
	je	.L40075
	movq	112(%r14), %rcx
	movq	112(%r15), %rsi
	testq	%rcx, %rcx
	sete	%dil
	testq	%rsi, %rsi
	sete	%dl
	xorl	%r8d, %r8d
	testb	%dil, %dil
	jne	.L40202
	movq	104(%r14), %r12
	cmpb	$25, 16(%r12)
	je	.L41938
.L40203:
	movl	$1, %r8d
.L40202:
	xorl	%ecx, %ecx
	testb	%dl, %dl
	jne	.L40204
	movq	104(%r15), %r9
	cmpb	$25, 16(%r9)
	je	.L41939
.L40205:
	movl	$1, %ecx
.L40204:
	testb	%r8b, %r8b
	jne	.L40075
	testb	%cl, %cl
	jne	.L40075
	testb	%dil, %dil
	je	.L41812
	testb	%dl, %dl
.L41828:
	jne	.L40075
.L40210:
	movl	$0, -80(%rbp)
	jmp	.L40075
.L41812:
	testb	%dl, %dl
	jne	.L40210
	movq	104(%r14), %rdi
	movq	104(%r15), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L40210
	movq	112(%r14), %rdi
	movq	112(%r15), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jmp	.L41828
.L41939:
	cmpb	$25, 16(%rsi)
	jne	.L40205
	jmp	.L40204
.L41938:
	cmpb	$25, 16(%rcx)
	jne	.L40203
	jmp	.L40202
.L41816:
	movq	8(%rbx), %r13
.L41831:
	movzbl	16(%rbx), %ecx
	jmp	.L40059
.L41852:
	movl	$1, -80(%rbp)
	jmp	.L41818
.L41923:
	cmpq	$0, 8(%r13)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L40072
.L41922:
	cmpq	$0, 8(%r12)
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L40071
	.p2align 6,,7
.L41920:
	movzbl	17(%r13), %esi
	movzwl	60(%r13), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %r13
	jmp	.L40067
.L41919:
	movzbl	17(%r12), %esi
	movzwl	60(%r12), %edi
	shrb	$5, %sil
	andl	$511, %edi
	andl	$1, %esi
	call	type_for_size
	movq	%rax, %r12
	jmp	.L40066
.L41918:
	testb	$2, 62(%r13)
	je	.L40065
	movq	24(%r13), %rcx
	testq	%rcx, %rcx
	cmovne	%rcx, %r13
	jmp	.L40065
.L41917:
	testb	$2, 62(%r12)
	je	.L40064
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	je	.L40064
	movq	%rdi, %r12
	movzbl	16(%rdi), %edx
	jmp	.L40064
	.p2align 6,,7
.L41889:
	cmpb	$18, 16(%rsi)
	jne	.L40060
	movq	8(%rsi), %rdi
	cmpb	$6, 16(%rdi)
	jne	.L40060
	jmp	.L41819
.LFE56:
.Lfe56:
	.size	output_init_element,.Lfe56-output_init_element
	.align 2
	.p2align 4,,15
	.type	output_pending_init_elements,@function
output_pending_init_elements:
.LFB57:
	pushq	%r14
.LCFI268:
	movl	%edi, %r14d
	pushq	%r13
.LCFI269:
	pushq	%r12
.LCFI270:
	pushq	%rbp
.LCFI271:
	pushq	%rbx
.LCFI272:
	movq	constructor_pending_elts(%rip), %rbx
	.p2align 4,,7
.L40497:
	xorl	%r13d, %r13d
	testq	%rbx, %rbx
	je	.L40499
	.p2align 4,,7
.L40533:
	movq	constructor_type(%rip), %rdx
	movzbl	16(%rdx), %eax
	cmpb	$18, %al
	je	.L41948
	subb	$20, %al
	cmpb	$1, %al
	ja	.L40498
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L40499
	call	bit_position
	movq	32(%rbx), %rdi
	movq	%rax, %r12
	call	bit_position
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbp
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L40519
	movq	32(%rbx), %rdx
	movq	40(%rbx), %rdi
	movq	%rdx, constructor_unfilled_fields(%rip)
	movq	8(%rdx), %rsi
.L41945:
	xorl	%ecx, %ecx
	call	output_init_element
.L40498:
	testq	%rbx, %rbx
	jne	.L40533
.L40499:
	testl	%r14d, %r14d
	je	.L40496
	testq	%r13, %r13
	je	.L40496
	movq	constructor_type(%rip), %rsi
	movzbl	16(%rsi), %edx
	leal	-20(%rdx), %ecx
	cmpb	$1, %cl
	jbe	.L41949
	cmpb	$18, %dl
	jne	.L40497
	movq	%r13, constructor_unfilled_index(%rip)
	jmp	.L40497
.L41949:
	movq	%r13, constructor_unfilled_fields(%rip)
	jmp	.L40497
.L40496:
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	ret
	.p2align 6,,7
.L40519:
	movq	%r12, %rdi
	movq	%rbp, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L40521
.L41947:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.L41943
.L41944:
	movq	%rax, %rbx
	jmp	.L40498
.L41943:
	movq	32(%rbx), %r13
	jmp	.L40499
	.p2align 6,,7
.L40521:
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L41944
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L40528
	cmpq	%rbx, 8(%rax)
	je	.L40531
.L40528:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L40499
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r12, %rdi
	movq	%rax, %rsi
.L41946:
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L40498
	jmp	.L41943
	.p2align 6,,7
.L40531:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L40528
	cmpq	%rbx, 8(%rax)
	je	.L40531
	jmp	.L40528
	.p2align 6,,7
.L41948:
	movq	32(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L40502
	movq	constructor_type(%rip), %rdx
	movq	40(%rbx), %rdi
	movq	8(%rdx), %rsi
	movq	constructor_unfilled_index(%rip), %rdx
	jmp	.L41945
.L40502:
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rbx), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L41947
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L41944
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L40511
	cmpq	%rbx, 8(%rax)
	je	.L40514
.L40511:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L40499
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	jmp	.L41946
.L40514:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L40511
	cmpq	%rbx, 8(%rax)
	je	.L40514
	jmp	.L40511
.LFE57:
.Lfe57:
	.size	output_pending_init_elements,.Lfe57-output_pending_init_elements
	.section	.rodata.str1.1
.LC182:
	.string	"set_designator"
	.section	.rodata.str1.32
	.align 32
.LC183:
	.string	"initialization designators may not nest"
	.text
	.align 2
	.p2align 4,,15
	.type	set_designator,@function
set_designator:
.LFB58:
	pushq	%rbp
.LCFI273:
	movl	$1, %eax
	movq	%rsp, %rbp
.LCFI274:
	pushq	%r15
.LCFI275:
	pushq	%r14
.LCFI276:
	pushq	%r13
.LCFI277:
	pushq	%r12
.LCFI278:
	pushq	%rbx
.LCFI279:
	subq	$264, %rsp
.LCFI280:
	movq	constructor_type(%rip), %rdx
	testq	%rdx, %rdx
	je	.L37756
	movl	designator_errorneous(%rip), %eax
	testl	%eax, %eax
	jne	.L39548
	movl	designator_depth(%rip), %eax
	testl	%eax, %eax
	jne	.L37759
	cmpq	$0, constructor_range_stack(%rip)
	jne	.L42333
	movq	constructor_stack(%rip), %rdx
	cmpb	$0, 106(%rdx)
	jne	.L39467
.L41952:
	movl	$1, constructor_designated(%rip)
.L42293:
	xorl	%eax, %eax
	.p2align 4,,7
.L37756:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
.L39467:
	movl	$1, %edi
	call	pop_init_level
	movl	$0, -180(%rbp)
	testq	%rax, %rax
	movq	%rax, %r15
	movq	%rax, -48(%rbp)
	je	.L37764
	cmpb	$29, 16(%rax)
	movl	$1, %eax
	cmovne	-180(%rbp), %eax
	movl	%eax, -180(%rbp)
.L37764:
	movl	-180(%rbp), %ecx
	movl	$0, designator_depth(%rip)
	movl	$0, designator_errorneous(%rip)
	testl	%ecx, %ecx
	je	.L37765
	movq	constructor_type(%rip), %rax
	testq	%rax, %rax
	je	.L37765
	cmpb	$18, 16(%rax)
	je	.L42334
.L37765:
	movq	constructor_stack(%rip), %rax
	cmpq	$0, 88(%rax)
	jne	.L42335
	movq	constructor_type(%rip), %rdi
	testq	%rdi, %rdi
	je	.L37761
	cmpb	$0, 106(%rax)
	je	.L37819
	.p2align 4,,7
.L37826:
	movzbl	16(%rdi), %r12d
	subb	$20, %r12b
	cmpb	$1, %r12b
	ja	.L37821
	cmpq	$0, constructor_fields(%rip)
	je	.L37824
.L37821:
	cmpb	$18, 16(%rdi)
	jne	.L37819
	movq	constructor_max_index(%rip), %rdi
	testq	%rdi, %rdi
	je	.L37824
	movq	constructor_index(%rip), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L37819
.L37824:
	movl	$1, %edi
	call	pop_init_level
	movq	%rax, %rdi
	call	process_init_element
	movq	constructor_stack(%rip), %rcx
	cmpb	$0, 106(%rcx)
	je	.L37819
	movq	constructor_type(%rip), %rdi
	jmp	.L37826
.L37819:
	cmpq	$0, constructor_range_stack(%rip)
	je	.L39466
	cmpb	$-86, 16(%r15)
	je	.L42336
.L37829:
	movq	%r15, %rdi
	call	save_expr
	movq	%rax, %r15
	.p2align 4,,7
.L39466:
	movq	constructor_type(%rip), %rsi
	cmpb	$20, 16(%rsi)
	movq	%rsi, %rbx
	je	.L42337
	movzbl	16(%rsi), %edx
	cmpb	$21, %dl
	je	.L42338
	cmpb	$18, %dl
	jne	.L38511
	movq	8(%rsi), %rdi
	testq	%r15, %r15
	movq	128(%rdi), %r12
	movzbl	16(%r12), %edx
	je	.L38513
	cmpl	$18, %edx
	je	.L42339
.L38512:
	testq	%r15, %r15
	je	.L38513
	movl	constructor_no_implicit(%rip), %esi
	testl	%esi, %esi
	jne	.L38513
	cmpq	global_trees(%rip), %r15
	je	.L38513
	movq	8(%r15), %rcx
	cmpq	%r12, 128(%rcx)
	je	.L38513
	cmpl	$20, %edx
	je	.L38515
	cmpl	$18, %edx
	je	.L38515
	cmpl	$21, %edx
	jne	.L38513
.L38515:
	movl	$1, %edi
	call	push_init_level
	jmp	.L39466
.L38513:
	movq	constructor_max_index(%rip), %rdi
	testq	%rdi, %rdi
	jne	.L42340
.L38516:
	testq	%r15, %r15
	jne	.L42341
.L38855:
	movq	constructor_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	testq	%r15, %r15
	movq	%rax, constructor_index(%rip)
	jne	.L38188
	movq	%rax, constructor_unfilled_index(%rip)
.L38188:
	movq	constructor_range_stack(%rip), %r12
	testq	%r12, %r12
	je	.L37831
	xorl	%r13d, %r13d
	movq	constructor_stack(%rip), %rax
	movq	$0, constructor_range_stack(%rip)
	cmpq	16(%r12), %rax
	je	.L42127
	.p2align 4,,7
.L39450:
	cmpb	$0, 106(%rax)
	je	.L42342
	movl	$1, %edi
	call	pop_init_level
	movq	%rax, %rdi
	call	process_init_element
	movq	constructor_stack(%rip), %rax
	cmpq	16(%r12), %rax
	jne	.L39450
.L42127:
	movq	%r12, %rbx
	.p2align 4,,7
.L39451:
	movq	40(%rbx), %rsi
	testq	%rsi, %rsi
	je	.L39456
	movq	32(%rbx), %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L42343
.L39456:
	movq	constructor_stack(%rip), %r14
	cmpb	$0, 106(%r14)
	je	.L42344
	movl	$1, %edi
	call	pop_init_level
	movq	%rax, %rdi
	call	process_init_element
	movq	8(%rbx), %rbx
	jmp	.L39451
.L42344:
	movl	$.LC68, %edi
	movl	$6838, %esi
.L42316:
	movl	$.LC171, %edx
	jmp	.L42294
.L42343:
	movq	32(%rbx), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	40(%rbx), %rsi
	movq	%rax, %rdi
	movq	%rax, 32(%rbx)
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L39464
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmove	%eax, %r13d
	.p2align 4,,7
.L39464:
	movq	32(%rbx), %rax
	movq	48(%rbx), %rdx
	testl	%r13d, %r13d
	movq	%rax, constructor_index(%rip)
	movq	%rdx, constructor_fields(%rip)
	je	.L39461
	cmpq	$0, 40(%rbx)
	je	.L39461
	cmpq	24(%rbx), %rax
	je	.L42345
.L39461:
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	je	.L39459
	movl	$2, %edi
	call	push_init_level
	movq	40(%rbx), %rsi
	movq	constructor_stack(%rip), %r9
	testq	%rsi, %rsi
	movq	%r9, 16(%rbx)
	je	.L39464
	movq	32(%rbx), %rdi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L39464
	movq	24(%rbx), %r11
	movq	%r11, 32(%rbx)
	jmp	.L39464
.L39459:
	testl	%r13d, %r13d
	jne	.L39466
	movq	%r12, constructor_range_stack(%rip)
	jmp	.L39466
	.p2align 6,,7
.L42345:
	xorl	%r13d, %r13d
	movq	$0, 8(%rbx)
	jmp	.L39461
.L42342:
	movl	$.LC68, %edi
	movl	$6830, %esi
	jmp	.L42316
.L37831:
	movq	$0, constructor_range_stack(%rip)
.L42145:
	movq	constructor_stack(%rip), %rax
.L37761:
	cmpb	$0, 106(%rax)
	jne	.L39467
	jmp	.L41952
.L42341:
	movq	constructor_index(%rip), %rdi
	xorl	%esi, %esi
	call	tree_low_cst
	movq	spelling_base(%rip), %rdi
	movq	spelling(%rip), %rdx
	movl	%eax, %r13d
	movl	spelling_size(%rip), %eax
	movq	%rdx, %r9
	subq	%rdi, %r9
	movq	%r9, %rbx
	shrq	$4, %rbx
	cmpl	%eax, %ebx
	jl	.L38543
	addl	$10, %eax
	testq	%rdi, %rdi
	movl	%eax, spelling_size(%rip)
	jne	.L38544
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L42241:
	movslq	%ebx,%rdx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rdx
	addq	spelling_base(%rip), %rdx
	movq	%rdx, spelling(%rip)
.L38543:
	movq	constructor_index(%rip), %rdi
	movl	%r13d, 8(%rdx)
	movl	$3, (%rdx)
	addq	$16, %rdx
	movq	%r15, %rbx
	movq	%rdx, spelling(%rip)
	movq	%rdi, -248(%rbp)
	movq	8(%r15), %rdi
	movzbl	16(%rdi), %eax
	movq	%rdi, %rdx
	cmpb	$23, %al
	je	.L38548
	cmpb	$18, %al
	je	.L42346
.L42171:
	movq	global_trees(%rip), %r8
.L38547:
	cmpb	$-86, 16(%rbx)
	je	.L42347
.L38646:
	cmpq	%r8, %rbx
	je	.L42348
	testb	$2, 17(%rbx)
	jne	.L38649
	movl	$0, constructor_constant(%rip)
.L38648:
	movl	require_constant_value(%rip), %r10d
	testl	%r10d, %r10d
	je	.L38653
	testb	$2, 17(%rbx)
	je	.L42349
.L38653:
	movl	require_constant_elements(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L42350
.L38678:
	cmpq	$0, -248(%rbp)
	je	.L38680
	movq	-248(%rbp), %r11
	movq	8(%r11), %rax
	cmpq	global_trees(%rip), %rax
	je	.L38682
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L42351
.L38680:
	movl	require_constant_value(%rip), %edx
	movl	require_constant_elements(%rip), %ecx
	movq	%r12, %rdi
	movq	%rbx, %rsi
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -240(%rbp)
	je	.L42352
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L42353
.L38684:
	cmpb	$20, 16(%rdi)
	je	.L42354
.L38705:
	cmpb	$21, 16(%rdi)
	je	.L42355
.L38704:
	cmpq	$0, -248(%rbp)
	je	.L38772
	movq	-248(%rbp), %rsi
	cmpb	$25, 16(%rsi)
	je	.L42356
.L38772:
	movq	-248(%rbp), %rdi
	movq	-240(%rbp), %rsi
	movq	constructor_elements(%rip), %rdx
	call	tree_cons
	movq	constructor_type(%rip), %r12
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%r12), %eax
	cmpb	$18, %al
	je	.L42357
	cmpb	$20, %al
	je	.L42358
	cmpb	$21, 16(%r12)
	je	.L42359
.L38774:
	movl	$1, %eax
	testl	%eax, %eax
	je	.L38682
	movq	constructor_pending_elts(%rip), %rbx
.L38784:
	xorl	%r14d, %r14d
	testq	%rbx, %rbx
	je	.L38786
	.p2align 4,,7
.L38820:
	movq	constructor_type(%rip), %r10
	movzbl	16(%r10), %eax
	cmpb	$18, %al
	je	.L42360
	subb	$20, %al
	cmpb	$1, %al
	ja	.L38785
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L38786
	call	bit_position
	movq	32(%rbx), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L38806
	movq	32(%rbx), %rdx
	movq	40(%rbx), %rdi
	movq	%rdx, constructor_unfilled_fields(%rip)
	movq	8(%rdx), %rsi
.L42257:
	xorl	%ecx, %ecx
	call	output_init_element
.L38785:
	testq	%rbx, %rbx
	jne	.L38820
.L38786:
	xorl	%r9d, %r9d
	testl	%r9d, %r9d
	je	.L38682
	testq	%r14, %r14
	je	.L38682
	movq	constructor_type(%rip), %r11
	movzbl	16(%r11), %edx
	leal	-20(%rdx), %edi
	cmpb	$1, %dil
	jbe	.L42361
	cmpb	$18, %dl
	jne	.L38784
	movq	%r14, constructor_unfilled_index(%rip)
	jmp	.L38784
.L42361:
	movq	%r14, constructor_unfilled_fields(%rip)
	jmp	.L38784
	.p2align 6,,7
.L38682:
	movslq	constructor_depth(%rip),%rbx
	salq	$4, %rbx
	addq	spelling_base(%rip), %rbx
	movq	%rbx, spelling(%rip)
	jmp	.L38855
.L38806:
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L38808
.L42305:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.L38809
.L42256:
	movq	%rax, %rbx
	jmp	.L38785
.L38809:
	movq	32(%rbx), %r14
	jmp	.L38786
	.p2align 6,,7
.L38808:
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L42256
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L38815
	cmpq	%rbx, 8(%rax)
	je	.L38818
.L38815:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L38786
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
.L42306:
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L38785
	jmp	.L38809
	.p2align 6,,7
.L38818:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L38815
	cmpq	%rbx, 8(%rax)
	je	.L38818
	jmp	.L38815
	.p2align 6,,7
.L42360:
	movq	32(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L38789
	movq	constructor_type(%rip), %r13
	movq	40(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rdx
	movq	8(%r13), %rsi
	jmp	.L42257
.L38789:
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rbx), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L42305
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L42256
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L38798
	cmpq	%rbx, 8(%rax)
	je	.L38801
.L38798:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L38786
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	jmp	.L42306
.L38801:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L38798
	cmpq	%rbx, 8(%rax)
	je	.L38801
	jmp	.L38798
.L42359:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L38774
.L42358:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L38774
	testb	$2, 53(%rdx)
	je	.L38774
	cmpq	$0, 72(%rdx)
	jne	.L38774
.L38780:
	movq	constructor_unfilled_fields(%rip), %r8
	movq	(%r8), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L38774
	testb	$2, 53(%rdx)
	je	.L38774
	cmpq	$0, 72(%rdx)
	jne	.L38774
	jmp	.L38780
.L42357:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L38774
.L42356:
	movq	%rsi, %rdi
	call	copy_node
	movq	%rax, -248(%rbp)
	jmp	.L38772
.L42355:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L38704
	movq	32(%rax), %rdx
	testb	$1, 17(%rdx)
	jne	.L42362
.L38747:
	movq	$0, constructor_elements(%rip)
	jmp	.L38704
.L42362:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r14
	movq	%r14, %rbx
	movq	%rax, %r13
	jae	.L42056
.L38754:
	cmpl	$3, (%rbx)
	je	.L42363
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L38750:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L38754
.L42056:
	movslq	%r12d,%rdi
	movq	%r14, %r12
	addq	$16, %rdi
	andq	$-16, %rdi
	subq	%rdi, %rsp
	cmpq	%r13, %r14
	movq	%rsp, -112(%rbp)
	movq	%rsp, %rbx
	jae	.L42058
.L38768:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L42364
	cmpl	$2, %eax
	je	.L42365
.L38762:
	movq	8(%r12), %rsi
	movzbl	(%rsi), %r11d
	leaq	1(%rsi), %rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	je	.L38758
.L38767:
	movzbl	(%rcx), %r14d
	incq	%rbx
	incq	%rcx
	testb	%r14b, %r14b
	movb	%r14b, (%rbx)
	jne	.L38767
.L38758:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L38768
.L42058:
	movb	$0, (%rbx)
	movq	-112(%rbp), %rbx
	cmpb	$0, (%rbx)
	je	.L38747
	movl	$.LC142, %edi
	movq	%rbx, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L38747
	.p2align 6,,7
.L42365:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L38762
.L42364:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L38758
.L42363:
	addl	$25, %r12d
	jmp	.L38750
.L42354:
	movl	constructor_incremental(%rip), %r10d
	testl	%r10d, %r10d
	je	.L38707
	movq	constructor_unfilled_fields(%rip), %rdx
	cmpq	%rdx, -248(%rbp)
	je	.L38705
	testq	%rdx, %rdx
	jne	.L38708
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L38715
.L42050:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L42366
.L38735:
	cmpb	$18, 16(%rdi)
	je	.L42367
.L38741:
	movl	$0, constructor_incremental(%rip)
.L38707:
	movq	-248(%rbp), %rdi
	movq	-240(%rbp), %rsi
	call	add_pending_init
	jmp	.L38682
.L42367:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L42368
	movq	global_trees+136(%rip), %rax
.L42255:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L38741
.L42368:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L42255
	.p2align 6,,7
.L42366:
	movq	24(%rdi), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L38741
	testb	$2, 53(%rdx)
	je	.L38741
	cmpq	$0, 72(%rdx)
	jne	.L38741
.L38721:
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L38741
	testb	$2, 53(%rdx)
	je	.L38741
	cmpq	$0, 72(%rdx)
	jne	.L38741
	jmp	.L38721
.L38715:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L38715
	movq	constructor_type(%rip), %rdi
	jmp	.L42050
.L38708:
	movq	-248(%rbp), %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L38707
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L38728
	cmpb	$18, %al
	jne	.L38707
.L38728:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L38734
.L42053:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L38735
	movq	24(%rdi), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L38741
	testb	$2, 53(%rdx)
	je	.L38741
	cmpq	$0, 72(%rdx)
	jne	.L38741
.L38740:
	movq	constructor_unfilled_fields(%rip), %r9
	movq	(%r9), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L38741
	testb	$2, 53(%rdx)
	je	.L38741
	cmpq	$0, 72(%rdx)
	jne	.L38741
	jmp	.L38740
	.p2align 6,,7
.L38734:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L38734
	movq	constructor_type(%rip), %rdi
	jmp	.L42053
	.p2align 6,,7
.L42353:
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L38707
	movq	-248(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L42179
	movl	constructor_incremental(%rip), %ecx
	testl	%ecx, %ecx
	je	.L38707
	movq	-248(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L38707
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L38687
	cmpb	$18, %al
	jne	.L38707
.L38687:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L38693
.L42047:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L38735
	movq	24(%rdi), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L38741
	testb	$2, 53(%rdx)
	je	.L38741
	cmpq	$0, 72(%rdx)
	jne	.L38741
.L38699:
	movq	constructor_unfilled_fields(%rip), %r8
	movq	(%r8), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L38741
	testb	$2, 53(%rdx)
	je	.L38741
	cmpq	$0, 72(%rdx)
	jne	.L38741
	jmp	.L38699
	.p2align 6,,7
.L38693:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L38693
	movq	constructor_type(%rip), %rdi
	jmp	.L42047
	.p2align 6,,7
.L42179:
	movq	constructor_type(%rip), %rdi
	jmp	.L38684
.L42352:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L38682
.L42351:
	call	integer_zerop
	testl	%eax, %eax
	je	.L38680
	movq	constructor_type(%rip), %rsi
	cmpb	$18, 16(%rsi)
	je	.L38682
	movq	-248(%rbp), %r14
	cmpq	$0, (%r14)
	jne	.L38682
	jmp	.L38680
.L42350:
	movq	8(%rbx), %rsi
	movq	%rbx, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L38678
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L38678
.L42349:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rax
	xorl	%r13d, %r13d
	cmpq	%rax, %r14
	movq	%r14, %rbx
	movq	%rax, -168(%rbp)
	jae	.L42042
.L38660:
	cmpl	$3, (%rbx)
	je	.L42369
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r13), %r13d
.L38656:
	addq	$16, %rbx
	cmpq	-168(%rbp), %rbx
	jb	.L38660
.L42042:
	movslq	%r13d,%rbx
	movq	%r14, %r13
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	-168(%rbp), %r14
	movq	%rsp, -104(%rbp)
	movq	%rsp, %rbx
	jae	.L42044
.L38674:
	movl	(%r13), %eax
	cmpl	$3, %eax
	je	.L42370
	cmpl	$2, %eax
	je	.L42371
.L38668:
	movq	8(%r13), %rdx
	movzbl	(%rdx), %r9d
	leaq	1(%rdx), %rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	je	.L38664
.L38673:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L38673
.L38664:
	addq	$16, %r13
	cmpq	spelling(%rip), %r13
	jb	.L38674
.L42044:
	movb	$0, (%rbx)
	movq	-104(%rbp), %rax
	cmpb	$0, (%rax)
	jne	.L42372
.L38677:
	movq	global_trees(%rip), %rbx
	jmp	.L38678
.L42372:
	movq	%rax, %rsi
	movl	$.LC142, %edi
	xorl	%eax, %eax
	call	error
	jmp	.L38677
.L42371:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L38668
.L42370:
	movl	8(%r13), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L38664
.L42369:
	addl	$25, %r13d
	jmp	.L38656
.L38649:
	movq	8(%rbx), %rsi
	movq	%rbx, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L38652
	movq	constructor_type(%rip), %rcx
	movzbl	16(%rcx), %r14d
	subb	$20, %r14b
	cmpb	$1, %r14b
	ja	.L38648
	movq	-248(%rbp), %r8
	testb	$2, 53(%r8)
	je	.L38648
	cmpb	$25, 16(%rbx)
	je	.L38648
.L38652:
	movl	$0, constructor_simple(%rip)
	jmp	.L38648
.L42348:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L38648
.L42347:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L38646
	movl	flag_isoc99(%rip), %r9d
	testl	%r9d, %r9d
	jne	.L38646
	movl	$1, %edi
	testl	%edi, %edi
	je	.L38646
	movq	32(%rbx), %rsi
	movq	32(%rsi), %r11
	movq	104(%r11), %rbx
	jmp	.L38646
.L42346:
	cmpb	$29, 16(%r15)
	je	.L42373
.L38549:
	movq	128(%rdx), %rdi
	movq	128(%r12), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L42171
	movq	8(%r15), %rdi
.L38548:
	movzbl	16(%rdi), %r14d
	movq	%rdi, %r13
	cmpl	$23, %r14d
	je	.L38551
	cmpl	$18, %r14d
	je	.L38551
	movzbl	16(%r15), %eax
	cmpb	$32, %al
	je	.L42374
	movl	optimize(%rip), %ecx
	testl	%ecx, %ecx
	je	.L38614
	cmpb	$34, %al
	je	.L42375
.L38614:
	movzbl	16(%rbx), %ecx
	movq	%rbx, %rdx
	cmpb	$116, %cl
	je	.L42178
	cmpb	$115, %cl
	je	.L42376
.L38623:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L38628
	cmpb	$49, %al
	je	.L38628
	cmpb	$50, %al
	je	.L38628
	cmpb	$101, %al
	je	.L38628
.L38627:
	cmpl	$10, %r14d
	je	.L42377
	cmpb	$39, %cl
	je	.L42378
.L38636:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L38641
	testb	$32, 17(%r13)
	je	.L38642
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L38643
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r13), %r10d
	movzwl	60(%rdx), %r13d
	andl	$511, %r10d
	andl	$511, %r13d
	cmpl	%r13d, %r10d
	je	.L38643
.L38642:
	movq	integer_types+40(%rip), %rdi
.L42303:
	movq	%rbx, %rsi
.L42304:
	call	convert
.L42252:
	movq	%rax, %r13
.L42243:
	movq	global_trees(%rip), %r8
.L38612:
	movq	%r13, %rbx
	jmp	.L38547
.L38643:
	movq	integer_types+48(%rip), %rdi
	jmp	.L42303
.L38641:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L38644
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L38644
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%r13)
	je	.L42379
.L38644:
	cmpl	$5, %r14d
	je	.L42380
.L38645:
	movq	%rbx, %r13
	jmp	.L42243
.L42380:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L42244:
	movq	global_trees(%rip), %r8
	movq	%r8, %r13
	jmp	.L38612
.L42379:
	movq	global_trees+200(%rip), %rdi
	jmp	.L42303
	.p2align 6,,7
.L42378:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L38636
	movq	integer_types+40(%rip), %r8
	movq	40(%rdx), %rdi
	movzwl	60(%r8), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L38636
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L38642
	testb	$32, 17(%r13)
	jne	.L38643
	jmp	.L38642
	.p2align 6,,7
.L42377:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L38635
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L38634
.L38635:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L38634:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L42303
.L38628:
	movl	24(%rdx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L38627
.L42376:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%rsi)
	jne	.L38623
.L38626:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %rbx
	cmpb	$116, %cl
	jne	.L42381
.L42178:
	movq	32(%rbx), %rsi
	jmp	.L38626
.L42381:
	cmpb	$115, %cl
	jne	.L38623
	movq	32(%rsi), %r11
	movq	8(%rbx), %rdi
	cmpq	%rdi, 8(%r11)
	movq	%r11, %rsi
	je	.L38626
	jmp	.L38623
.L42375:
	movl	pedantic(%rip), %r8d
	testl	%r8d, %r8d
	jne	.L38618
	cmpb	$51, 48(%r15)
	je	.L38618
	cmpq	$0, current_function_decl(%rip)
	je	.L38620
	movzbl	17(%r15), %r10d
	andb	$24, %r10b
	cmpb	$16, %r10b
	je	.L42382
.L38620:
	movq	%r15, %rsi
.L38621:
	movq	%rsi, %rbx
.L38618:
	movq	8(%rbx), %r13
	jmp	.L38614
.L42382:
	movq	104(%r15), %rax
	testq	%rax, %rax
	je	.L38620
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L38620
	testb	$2, 17(%rax)
	je	.L38620
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L38621
	jmp	.L38620
	.p2align 6,,7
.L42374:
	movq	104(%r15), %rbx
	jmp	.L38614
.L38551:
	movzbl	16(%r15), %edx
	xorl	%r13d, %r13d
	movl	%r14d, %r8d
	cmpb	$116, %dl
	je	.L42038
	cmpb	$115, %dl
	je	.L42383
	movzbl	16(%r15), %ecx
.L38553:
	movzbl	%cl, %r10d 
	movzbl	tree_code_type(%r10), %eax
	cmpb	$60, %al
	je	.L38559
	cmpb	$49, %al
	je	.L38559
	cmpb	$50, %al
	je	.L38559
	cmpb	$101, %al
	je	.L38559
.L38558:
	cmpl	$23, %r8d
	je	.L42384
	cmpl	$18, %r8d
	jne	.L38645
	movzbl	%cl, %r8d 
	xorl	%edx, %edx
	xorl	%r14d, %r14d
	movzbl	tree_code_type(%r8), %eax
	movq	8(%rdi), %r11
	cmpb	$114, %al
	je	.L38564
	cmpb	$100, %al
	je	.L38564
.L38563:
	movzbl	17(%rdi), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %esi
	shrb	$3, %r10b
	shrb	$4, %sil
	andl	$1, %r10d
	andl	%esi, %r9d
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rdi), %r10d
	movzbl	16(%rdi), %edi
	movl	%r10d, %esi
	shrb	$5, %sil
	andl	$1, %esi
	sall	$2, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	cmpb	$20, %dil
	je	.L42385
.L38567:
	leal	0(,%rsi,8), %eax
	orl	%eax, %r9d
	jne	.L38566
	testl	%edx, %edx
	jne	.L38566
	testl	%r14d, %r14d
	je	.L38565
.L38566:
	movl	%r8d, %ecx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %cl
	movl	%r8d, %r9d
	andl	%ecx, %esi
	movl	%r10d, %ecx
	andl	$1, %r9d
	andl	$1, %ecx
	addl	%r9d, %r9d
	sall	$2, %ecx
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L42386
.L38569:
	leal	0(,%rcx,8), %edi
	orl	%edi, %esi
	movq	%r11, %rdi
	orl	%edx, %esi
	leal	(%r14,%r14), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%rbx), %ecx
	movq	%rax, %r11
.L38565:
	cmpb	$41, %cl
	je	.L42387
	cmpb	$47, %cl
	je	.L42388
	xorl	%r14d, %r14d
	testl	%r13d, %r13d
	je	.L42389
.L38608:
	movl	flag_isoc99(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L38609
	testl	%r14d, %r14d
	je	.L38645
.L38609:
	movq	%r11, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%rbx)
	movq	%rax, %r13
	je	.L42390
	movl	$121, %edi
	movq	%rbx, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%r13, %rdi
	movq	%rax, %rsi
	jmp	.L42304
.L42390:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	call	build1
	movq	%rbx, %rdi
	movq	%rax, %r13
	call	mark_addressable
	testl	%eax, %eax
	je	.L42244
	movq	%rbx, %rdi
	call	staticp
	movzbl	17(%r13), %ebx
	movl	%eax, %r11d
	andb	$1, %r11b
	addb	%r11b, %r11b
	andb	$-4, %bl
	orb	%r11b, %bl
	movb	%bl, 17(%r13)
	jmp	.L42243
	.p2align 6,,7
.L42389:
	movq	%rbx, %rdi
	movq	%r11, -296(%rbp)
	call	lvalue_p
	movq	-296(%rbp), %r11
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r14d
	jmp	.L38608
.L42388:
	movq	40(%rbx), %r13
	movq	8(%r13), %r14
	movzbl	16(%r14), %edx
	movq	%r14, %rax
	cmpl	$23, %edx
	movl	%edx, -92(%rbp)
	je	.L38573
	cmpl	$18, %edx
	je	.L38573
	movzbl	16(%r13), %edx
	cmpb	$32, %dl
	je	.L42391
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L38576
	cmpb	$34, %dl
	je	.L42392
.L38576:
	cmpb	$116, %dl
	movq	%r13, %rcx
	je	.L42176
	cmpb	$115, %dl
	je	.L42393
.L38585:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L38590
	cmpb	$49, %al
	je	.L38590
	cmpb	$50, %al
	je	.L38590
	cmpb	$101, %al
	je	.L38590
.L38589:
	cmpl	$10, -92(%rbp)
	je	.L42394
	cmpb	$39, %dl
	je	.L42395
.L38598:
	movq	%r14, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L38603
	testb	$32, 17(%r14)
	je	.L38604
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L38605
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r14), %r10d
	movzwl	60(%rdx), %r14d
	andl	$511, %r10d
	andl	$511, %r14d
	cmpl	%r14d, %r10d
	je	.L38605
.L38604:
	movq	integer_types+40(%rip), %rdi
.L42242:
	movq	%r13, %rsi
	call	convert
.L38574:
	movq	8(%rax), %rsi
	movq	32(%rbx), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L42252
.L38605:
	movq	integer_types+48(%rip), %rdi
	jmp	.L42242
.L38603:
	movl	flag_traditional(%rip), %r9d
	testl	%r9d, %r9d
	je	.L38606
	movl	flag_allow_single_precision(%rip), %edi
	testl	%edi, %edi
	jne	.L38606
	movq	global_trees+192(%rip), %rsi
	cmpq	%rsi, 128(%r14)
	je	.L42396
.L38606:
	cmpl	$5, -92(%rbp)
	je	.L42397
	movq	%r13, %rax
	jmp	.L38574
.L42397:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L38574
.L42396:
	movq	global_trees+200(%rip), %rdi
	jmp	.L42242
.L42395:
	movq	40(%r13), %rdx
	testb	$2, 53(%rdx)
	je	.L38598
	movq	integer_types+40(%rip), %r8
	movq	40(%rdx), %rdi
	movzwl	60(%r8), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L38598
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L38604
	testb	$32, 17(%r14)
	jne	.L38605
	jmp	.L38604
.L42394:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r14), %edx
	movl	flag_traditional(%rip), %r11d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r11d, %r11d
	jne	.L38597
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L38596
.L38597:
	testb	$32, 17(%r14)
	movl	$1, %eax
	cmovne	%eax, %esi
.L38596:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L42242
	.p2align 6,,7
.L38590:
	movl	24(%rcx), %eax
	movl	%eax, 24(%r13)
	jmp	.L38589
.L42393:
	movq	32(%r13), %rsi
	movq	8(%r13), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L38585
.L38588:
	movzbl	16(%rsi), %edx
	movq	%rsi, %r13
	cmpb	$116, %dl
	jne	.L42398
.L42176:
	movq	32(%r13), %rsi
	jmp	.L38588
.L42398:
	cmpb	$115, %dl
	jne	.L38585
	movq	32(%rsi), %rdi
	movq	8(%r13), %r9
	cmpq	%r9, 8(%rdi)
	movq	%rdi, %rsi
	je	.L38588
	jmp	.L38585
.L42392:
	movl	pedantic(%rip), %r14d
	testl	%r14d, %r14d
	jne	.L38580
	cmpb	$51, 48(%r13)
	je	.L38580
	cmpq	$0, current_function_decl(%rip)
	je	.L38582
	movzbl	17(%r13), %r8d
	andb	$24, %r8b
	cmpb	$16, %r8b
	je	.L42399
.L38582:
	movq	%r13, %rsi
.L38583:
	movq	%rsi, %r13
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L38580:
	movq	%rax, %r14
	jmp	.L38576
.L42399:
	movq	104(%r13), %rax
	testq	%rax, %rax
	je	.L38582
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L38582
	testb	$2, 17(%rax)
	je	.L38582
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L38583
	jmp	.L38582
.L42391:
	movq	104(%r13), %r13
	movzbl	16(%r13), %edx
	jmp	.L38576
.L38573:
	movq	%r13, %rdi
	call	default_function_array_conversion
	jmp	.L38574
	.p2align 6,,7
.L42387:
	movq	72(%r11), %rdi
	movq	32(%rbx), %rsi
	jmp	.L42304
.L42386:
	testq	%r11, %r11
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L38569
.L42385:
	testq	%r11, %r11
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L38567
.L38564:
	movzbl	17(%rbx), %r9d
	movl	$1, %r14d
	movl	%r9d, %edx
	shrb	$3, %r9b
	shrb	$4, %dl
	andl	%r9d, %r14d
	andl	$1, %edx
	jmp	.L38563
.L42384:
	movl	$121, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L42252
.L38559:
	movl	24(%r15), %eax
	movl	%eax, 24(%rbx)
	jmp	.L38558
.L42383:
	movq	32(%r15), %rsi
	cmpq	%rdi, 8(%rsi)
	je	.L42038
	movl	$115, %ecx
	jmp	.L38553
.L42038:
	movq	32(%r15), %rsi
	movl	%edx, %ecx
.L38557:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %rbx
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r13d
	cmpb	$116, %cl
	jne	.L42400
	movq	32(%rbx), %rsi
	jmp	.L38557
.L42400:
	cmpb	$115, %cl
	jne	.L38553
	movq	32(%rsi), %rsi
	movq	8(%rbx), %r11
	cmpq	%r11, 8(%rsi)
	je	.L38557
	jmp	.L38553
.L42373:
	cmpb	$18, 16(%r12)
	jne	.L38549
	movq	8(%r12), %r13
	cmpb	$6, 16(%r13)
	jne	.L38549
	jmp	.L42171
	.p2align 6,,7
.L38544:
	movslq	%eax,%rsi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L42241
.L42340:
	movq	constructor_index(%rip), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L38517
	movq	constructor_max_index(%rip), %rdi
	call	integer_all_onesp
	testl	%eax, %eax
	je	.L38516
.L38517:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC168, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r15
	xorl	%r12d, %r12d
	cmpq	%r15, %r14
	movq	%r14, %rbx
	movq	%r15, %r13
	jae	.L42034
.L38524:
	cmpl	$3, (%rbx)
	je	.L42401
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L38520:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L38524
.L42034:
	movslq	%r12d,%r8
	movq	%r14, %r12
	addq	$16, %r8
	andq	$-16, %r8
	subq	%r8, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L42098
.L38538:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L42402
	cmpl	$2, %eax
	je	.L42403
.L38532:
	movq	8(%r12), %r10
	movzbl	(%r10), %r11d
	leaq	1(%r10), %rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	je	.L38528
.L38537:
	movzbl	(%rcx), %r14d
	incq	%rbx
	incq	%rcx
	testb	%r14b, %r14b
	movb	%r14b, (%rbx)
	jne	.L38537
.L38528:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L38538
.L42098:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	je	.L37831
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L37831
	.p2align 6,,7
.L42403:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L38532
.L42402:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L38528
.L42401:
	addl	$25, %r12d
	jmp	.L38520
	.p2align 6,,7
.L42339:
	movq	8(%r12), %r13
	cmpb	$6, 16(%r13)
	jne	.L38512
	movl	-180(%rbp), %eax
	testl	%eax, %eax
	je	.L38512
	movq	-48(%rbp), %r15
	jmp	.L38513
	.p2align 6,,7
.L38511:
	cmpb	$9, %dl
	je	.L42404
	cmpq	$0, constructor_fields(%rip)
	je	.L42405
	testq	%r15, %r15
	je	.L39164
	movq	$0, -288(%rbp)
	movq	%r15, %r12
	movq	8(%r15), %r13
	movzbl	16(%r13), %eax
	cmpb	$23, %al
	je	.L39166
	cmpb	$18, %al
	je	.L42406
.L42193:
	movq	global_trees(%rip), %r8
.L39165:
	cmpb	$-86, 16(%r12)
	je	.L42407
.L39264:
	cmpq	%r8, %r12
	je	.L42408
	testb	$2, 17(%r12)
	jne	.L39267
	movl	$0, constructor_constant(%rip)
.L39266:
	movl	require_constant_value(%rip), %ecx
	testl	%ecx, %ecx
	je	.L39271
	testb	$2, 17(%r12)
	je	.L42409
.L39271:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L42410
.L39296:
	cmpq	$0, -288(%rbp)
	je	.L39298
	movq	8, %rax
	cmpq	global_trees(%rip), %rax
	je	.L39164
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L42411
.L39298:
	movl	require_constant_value(%rip), %edx
	movl	require_constant_elements(%rip), %ecx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -280(%rbp)
	je	.L42412
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L42413
.L39302:
	cmpb	$20, 16(%rdi)
	je	.L42414
.L39323:
	cmpb	$21, 16(%rdi)
	je	.L42415
.L39322:
	cmpq	$0, -288(%rbp)
	je	.L39390
	cmpb	$25, 16
	je	.L42416
.L39390:
	movq	constructor_elements(%rip), %rdx
	movq	-288(%rbp), %rdi
	movq	-280(%rbp), %rsi
	call	tree_cons
	movq	constructor_type(%rip), %rdx
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%rdx), %eax
	cmpb	$18, %al
	je	.L42417
	cmpb	$20, %al
	je	.L42418
	cmpb	$21, 16(%rdx)
	je	.L42419
.L39392:
	movl	$1, %eax
	testl	%eax, %eax
	je	.L39164
	movq	constructor_pending_elts(%rip), %rbx
.L39402:
	xorl	%r14d, %r14d
	testq	%rbx, %rbx
	je	.L39404
.L39438:
	movq	constructor_type(%rip), %r8
	movzbl	16(%r8), %eax
	cmpb	$18, %al
	je	.L42420
	subb	$20, %al
	cmpb	$1, %al
	ja	.L39403
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L39404
	call	bit_position
	movq	32(%rbx), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L39424
	movq	32(%rbx), %rdx
	movq	40(%rbx), %rdi
	movq	%rdx, constructor_unfilled_fields(%rip)
	movq	8(%rdx), %rsi
.L42289:
	xorl	%ecx, %ecx
	call	output_init_element
.L39403:
	testq	%rbx, %rbx
	jne	.L39438
.L39404:
	xorl	%r10d, %r10d
	testl	%r10d, %r10d
	je	.L39164
	testq	%r14, %r14
	je	.L39164
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %edx
	leal	-20(%rdx), %ecx
	cmpb	$1, %cl
	jbe	.L42421
	cmpb	$18, %dl
	jne	.L39402
	movq	%r14, constructor_unfilled_index(%rip)
	jmp	.L39402
.L42421:
	movq	%r14, constructor_unfilled_fields(%rip)
	jmp	.L39402
	.p2align 6,,7
.L39164:
	movq	$0, constructor_fields(%rip)
	jmp	.L38188
.L39424:
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L39426
.L42313:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.L39427
.L42288:
	movq	%rax, %rbx
	jmp	.L39403
.L39427:
	movq	32(%rbx), %r14
	jmp	.L39404
	.p2align 6,,7
.L39426:
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L42288
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L39433
	cmpq	%rbx, 8(%rax)
	je	.L39436
.L39433:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L39404
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
.L42314:
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L39403
	jmp	.L39427
	.p2align 6,,7
.L39436:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L39433
	cmpq	%rbx, 8(%rax)
	je	.L39436
	jmp	.L39433
	.p2align 6,,7
.L42420:
	movq	32(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L39407
	movq	constructor_type(%rip), %r12
	movq	40(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rdx
	movq	8(%r12), %rsi
	jmp	.L42289
.L39407:
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rbx), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L42313
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L42288
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L39416
	cmpq	%rbx, 8(%rax)
	je	.L39419
.L39416:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L39404
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	jmp	.L42314
.L39419:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L39416
	cmpq	%rbx, 8(%rax)
	je	.L39419
	jmp	.L39416
.L42419:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L39392
.L42418:
	movq	constructor_unfilled_fields(%rip), %rbx
	movq	(%rbx), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L39392
	testb	$2, 53(%rdx)
	je	.L39392
	cmpq	$0, 72(%rdx)
	jne	.L39392
.L39398:
	movq	constructor_unfilled_fields(%rip), %rsi
	movq	(%rsi), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L39392
	testb	$2, 53(%rdx)
	je	.L39392
	cmpq	$0, 72(%rdx)
	jne	.L39392
	jmp	.L39398
.L42417:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L39392
.L42416:
	xorl	%edi, %edi
	call	copy_node
	movq	%rax, -288(%rbp)
	jmp	.L39390
.L42415:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L39322
	movq	32(%rax), %r10
	testb	$1, 17(%r10)
	jne	.L42422
.L39365:
	movq	$0, constructor_elements(%rip)
	jmp	.L39322
.L42422:
	movl	$.LC42, %edi
	xorl	%eax, %eax
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rdi
	xorl	%r12d, %r12d
	cmpq	%rdi, %r14
	movq	%r14, %rbx
	movq	%rdi, %r13
	jae	.L42118
.L39372:
	cmpl	$3, (%rbx)
	je	.L42423
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L39368:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L39372
.L42118:
	movslq	%r12d,%rdx
	movq	%r14, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, -160(%rbp)
	movq	%rsp, %rbx
	jae	.L42120
.L39386:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L42424
	cmpl	$2, %eax
	je	.L42425
.L39380:
	movq	8(%r12), %r13
	movzbl	(%r13), %r9d
	leaq	1(%r13), %rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	je	.L39376
.L39385:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L39385
.L39376:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L39386
.L42120:
	movb	$0, (%rbx)
	movq	-160(%rbp), %rax
	cmpb	$0, (%rax)
	je	.L39365
	movq	%rax, %rsi
	movl	$.LC142, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L39365
.L42425:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L39380
.L42424:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L39376
	.p2align 6,,7
.L42423:
	addl	$25, %r12d
	jmp	.L39368
.L42414:
	movl	constructor_incremental(%rip), %r8d
	testl	%r8d, %r8d
	je	.L39325
	movq	constructor_unfilled_fields(%rip), %rdx
	cmpq	%rdx, -288(%rbp)
	je	.L39323
	testq	%rdx, %rdx
	jne	.L39326
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L39333
.L42112:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L42426
.L39353:
	cmpb	$18, 16(%rdi)
	je	.L42427
.L39359:
	movl	$0, constructor_incremental(%rip)
.L39325:
	movq	-280(%rbp), %rsi
	xorl	%edi, %edi
	call	add_pending_init
	jmp	.L39164
.L42427:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L42428
	movq	global_trees+136(%rip), %rax
.L42287:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L39359
.L42428:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L42287
.L42426:
	movq	24(%rdi), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L39359
	testb	$2, 53(%rdx)
	je	.L39359
	cmpq	$0, 72(%rdx)
	jne	.L39359
.L39339:
	movq	constructor_unfilled_fields(%rip), %r14
	movq	(%r14), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L39359
	testb	$2, 53(%rdx)
	je	.L39359
	cmpq	$0, 72(%rdx)
	jne	.L39359
	jmp	.L39339
	.p2align 6,,7
.L39333:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L39333
	movq	constructor_type(%rip), %rdi
	jmp	.L42112
.L39326:
	xorl	%edi, %edi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r12
	call	bit_position
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L39325
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L39346
	cmpb	$18, %al
	jne	.L39325
.L39346:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L39352
.L42115:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L39353
	movq	24(%rdi), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L39359
	testb	$2, 53(%rdx)
	je	.L39359
	cmpq	$0, 72(%rdx)
	jne	.L39359
.L39358:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L39359
	testb	$2, 53(%rdx)
	je	.L39359
	cmpq	$0, 72(%rdx)
	jne	.L39359
	jmp	.L39358
.L39352:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L39352
	movq	constructor_type(%rip), %rdi
	jmp	.L42115
	.p2align 6,,7
.L42413:
	movl	constructor_incremental(%rip), %r11d
	testl	%r11d, %r11d
	je	.L39325
	movq	constructor_unfilled_index(%rip), %rsi
	xorl	%edi, %edi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L42201
	movl	constructor_incremental(%rip), %ebx
	testl	%ebx, %ebx
	je	.L39325
	movq	constructor_unfilled_index(%rip), %rsi
	xorl	%edi, %edi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L39325
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L39305
	cmpb	$18, %al
	jne	.L39325
.L39305:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L39311
.L42109:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L39353
	movq	24(%rdi), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L39359
	testb	$2, 53(%rdx)
	je	.L39359
	cmpq	$0, 72(%rdx)
	jne	.L39359
.L39317:
	movq	constructor_unfilled_fields(%rip), %rsi
	movq	(%rsi), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L39359
	testb	$2, 53(%rdx)
	je	.L39359
	cmpq	$0, 72(%rdx)
	jne	.L39359
	jmp	.L39317
.L39311:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L39311
	movq	constructor_type(%rip), %rdi
	jmp	.L42109
	.p2align 6,,7
.L42201:
	movq	constructor_type(%rip), %rdi
	jmp	.L39302
.L42412:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L39164
.L42411:
	call	integer_zerop
	testl	%eax, %eax
	je	.L39298
	movq	constructor_type(%rip), %r13
	cmpb	$18, 16(%r13)
	je	.L39164
	cmpq	$0, 0
	jne	.L39164
	jmp	.L39298
.L42410:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L39296
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L39296
.L42409:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r10
	xorl	%r13d, %r13d
	cmpq	%r10, %r14
	movq	%r14, %r12
	movq	%r10, -176(%rbp)
	jae	.L42104
.L39278:
	cmpl	$3, (%r12)
	je	.L42429
	movq	8(%r12), %rdi
	call	strlen
	leal	1(%rax,%r13), %r13d
.L39274:
	addq	$16, %r12
	cmpq	-176(%rbp), %r12
	jb	.L39278
.L42104:
	movslq	%r13d,%r12
	movq	%r14, %r13
	addq	$16, %r12
	andq	$-16, %r12
	subq	%r12, %rsp
	cmpq	-176(%rbp), %r14
	movq	%rsp, -152(%rbp)
	movq	%rsp, %r12
	jae	.L42106
.L39292:
	movl	(%r13), %eax
	cmpl	$3, %eax
	je	.L42430
	cmpl	$2, %eax
	je	.L42431
.L39286:
	movq	8(%r13), %rdx
	movzbl	(%rdx), %edi
	leaq	1(%rdx), %rcx
	testb	%dil, %dil
	movb	%dil, (%r12)
	je	.L39282
.L39291:
	movzbl	(%rcx), %r9d
	incq	%r12
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%r12)
	jne	.L39291
.L39282:
	addq	$16, %r13
	cmpq	spelling(%rip), %r13
	jb	.L39292
.L42106:
	movb	$0, (%r12)
	movq	-152(%rbp), %rsi
	cmpb	$0, (%rsi)
	jne	.L42432
.L39295:
	movq	global_trees(%rip), %r12
	jmp	.L39296
.L42432:
	movl	$.LC142, %edi
	xorl	%eax, %eax
	call	error
	jmp	.L39295
.L42431:
	movb	$46, (%r12)
	incq	%r12
	jmp	.L39286
.L42430:
	movl	8(%r13), %edx
	movq	%r12, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%r12, %rdi
	call	strlen
	addq	%rax, %r12
	jmp	.L39282
.L42429:
	addl	$25, %r13d
	jmp	.L39274
.L39267:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L39270
	movq	constructor_type(%rip), %r14
	movzbl	16(%r14), %r8d
	subb	$20, %r8b
	cmpb	$1, %r8b
	ja	.L39266
	testb	$2, 53
	je	.L39266
	cmpb	$25, 16(%r12)
	je	.L39266
.L39270:
	movl	$0, constructor_simple(%rip)
	jmp	.L39266
.L42408:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L39266
.L42407:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L39264
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L39264
	movl	$1, %r9d
	testl	%r9d, %r9d
	je	.L39264
	movq	32(%r12), %rsi
	movq	32(%rsi), %r11
	movq	104(%r11), %r12
	jmp	.L39264
.L42406:
	cmpb	$29, 16(%r15)
	je	.L42433
.L39167:
	movq	8(%r15), %rcx
	movq	128(%rbx), %rsi
	movq	128(%rcx), %rdi
	call	comptypes
	testl	%eax, %eax
	jne	.L42193
.L39166:
	movq	8(%r15), %r13
	movzbl	16(%r13), %r14d
	cmpl	$23, %r14d
	je	.L39169
	cmpl	$18, %r14d
	je	.L39169
	movzbl	16(%r15), %eax
	cmpb	$32, %al
	je	.L42434
	movl	optimize(%rip), %r10d
	testl	%r10d, %r10d
	je	.L39232
	cmpb	$34, %al
	je	.L42435
.L39232:
	movzbl	16(%r12), %ecx
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L42200
	cmpb	$115, %cl
	je	.L42436
.L39241:
	movzbl	%cl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L39246
	cmpb	$49, %al
	je	.L39246
	cmpb	$50, %al
	je	.L39246
	cmpb	$101, %al
	je	.L39246
.L39245:
	cmpl	$10, %r14d
	je	.L42437
	cmpb	$39, %cl
	je	.L42438
.L39254:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L39259
	testb	$32, 17(%r13)
	je	.L39260
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L39261
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r13), %edi
	movzwl	60(%rdx), %r13d
	andl	$511, %edi
	andl	$511, %r13d
	cmpl	%r13d, %edi
	je	.L39261
.L39260:
	movq	integer_types+40(%rip), %rdi
.L42311:
	movq	%r12, %rsi
.L42312:
	call	convert
.L42284:
	movq	%rax, %r13
.L42275:
	movq	global_trees(%rip), %r8
.L39230:
	movq	%r13, %r12
	jmp	.L39165
.L39261:
	movq	integer_types+48(%rip), %rdi
	jmp	.L42311
.L39259:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L39262
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L39262
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%r13)
	je	.L42439
.L39262:
	cmpl	$5, %r14d
	je	.L42440
.L39263:
	movq	%r12, %r13
	jmp	.L42275
.L42440:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L42276:
	movq	global_trees(%rip), %r8
	movq	%r8, %r13
	jmp	.L39230
.L42439:
	movq	global_trees+200(%rip), %rdi
	jmp	.L42311
	.p2align 6,,7
.L42438:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L39254
	movq	integer_types+40(%rip), %r10
	movq	40(%rdx), %rdi
	movzwl	60(%r10), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L39254
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L39260
	testb	$32, 17(%r13)
	jne	.L39261
	jmp	.L39260
	.p2align 6,,7
.L42437:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L39253
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L39252
.L39253:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L39252:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L42311
.L39246:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L39245
.L42436:
	movq	32(%r12), %rsi
	movq	8(%r12), %r9
	cmpq	%r9, 8(%rsi)
	jne	.L39241
.L39244:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L42441
.L42200:
	movq	32(%r12), %rsi
	jmp	.L39244
.L42441:
	cmpb	$115, %cl
	jne	.L39241
	movq	32(%rsi), %r11
	movq	8(%r12), %r8
	cmpq	%r8, 8(%r11)
	movq	%r11, %rsi
	je	.L39244
	jmp	.L39241
.L42435:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L39236
	cmpb	$51, 48(%r15)
	je	.L39236
	cmpq	$0, current_function_decl(%rip)
	je	.L39238
	movzbl	17(%r15), %edi
	andb	$24, %dil
	cmpb	$16, %dil
	je	.L42442
.L39238:
	movq	%r15, %rsi
.L39239:
	movq	%rsi, %r12
.L39236:
	movq	8(%r12), %r13
	jmp	.L39232
.L42442:
	movq	104(%r15), %rax
	testq	%rax, %rax
	je	.L39238
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L39238
	testb	$2, 17(%rax)
	je	.L39238
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L39239
	jmp	.L39238
	.p2align 6,,7
.L42434:
	movq	104(%r15), %r12
	jmp	.L39232
.L39169:
	movzbl	16(%r15), %edx
	movl	%r14d, %edi
	xorl	%r14d, %r14d
	cmpb	$116, %dl
	je	.L42100
	cmpb	$115, %dl
	je	.L42443
	movzbl	16(%r15), %ecx
.L39171:
	movzbl	%cl, %r10d 
	movzbl	tree_code_type(%r10), %eax
	cmpb	$60, %al
	je	.L39177
	cmpb	$49, %al
	je	.L39177
	cmpb	$50, %al
	je	.L39177
	cmpb	$101, %al
	je	.L39177
.L39176:
	cmpl	$23, %edi
	je	.L42444
	cmpl	$18, %edi
	jne	.L39263
	movzbl	%cl, %r9d 
	xorl	%edx, %edx
	movq	8(%r13), %r11
	movzbl	tree_code_type(%r9), %eax
	movl	$0, -268(%rbp)
	cmpb	$114, %al
	je	.L39182
	cmpb	$100, %al
	je	.L39182
.L39181:
	movzbl	17(%r13), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %esi
	shrb	$3, %r10b
	shrb	$4, %sil
	andl	$1, %r10d
	andl	%esi, %r9d
	xorl	%esi, %esi
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%r13), %r10d
	movl	%r10d, %edi
	shrb	$5, %dil
	andl	$1, %edi
	sall	$2, %edi
	orl	%edi, %r9d
	movzbl	16(%r13), %edi
	cmpb	$20, %dil
	je	.L42445
.L39185:
	leal	0(,%rsi,8), %r13d
	orl	%r13d, %r9d
	jne	.L39184
	movl	-268(%rbp), %eax
	testl	%eax, %eax
	jne	.L39184
	testl	%edx, %edx
	je	.L39183
.L39184:
	movl	%r8d, %r13d
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %r13b
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%r13d, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L42446
.L39187:
	leal	0(,%rcx,8), %edi
	leal	(%rdx,%rdx), %r8d
	orl	%edi, %esi
	movq	%r11, %rdi
	orl	-268(%rbp), %esi
	orl	%r8d, %esi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r11
.L39183:
	cmpb	$41, %cl
	je	.L42447
	cmpb	$47, %cl
	je	.L42448
	xorl	%r13d, %r13d
	testl	%r14d, %r14d
	je	.L42449
.L39226:
	movl	flag_isoc99(%rip), %ecx
	testl	%ecx, %ecx
	jne	.L39227
	testl	%r13d, %r13d
	je	.L39263
.L39227:
	movq	%r11, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %r13
	je	.L42450
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%r13, %rdi
	movq	%rax, %rsi
	jmp	.L42312
.L42450:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %r13
	call	mark_addressable
	testl	%eax, %eax
	je	.L42276
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%r13), %r12d
	movl	%eax, %r11d
	andb	$1, %r11b
	addb	%r11b, %r11b
	andb	$-4, %r12b
	orb	%r11b, %r12b
	movb	%r12b, 17(%r13)
	jmp	.L42275
.L42449:
	movq	%r12, %rdi
	movq	%r11, -296(%rbp)
	call	lvalue_p
	movq	-296(%rbp), %r11
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r13d
	jmp	.L39226
.L42448:
	movq	40(%r12), %r13
	movq	8(%r13), %r14
	movzbl	16(%r14), %edx
	movq	%r14, %rax
	cmpl	$23, %edx
	movl	%edx, -140(%rbp)
	je	.L39191
	cmpl	$18, %edx
	je	.L39191
	movzbl	16(%r13), %edx
	cmpb	$32, %dl
	je	.L42451
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L39194
	cmpb	$34, %dl
	je	.L42452
.L39194:
	cmpb	$116, %dl
	movq	%r13, %rcx
	je	.L42198
	cmpb	$115, %dl
	je	.L42453
.L39203:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L39208
	cmpb	$49, %al
	je	.L39208
	cmpb	$50, %al
	je	.L39208
	cmpb	$101, %al
	je	.L39208
.L39207:
	cmpl	$10, -140(%rbp)
	je	.L42454
	cmpb	$39, %dl
	je	.L42455
.L39216:
	movq	%r14, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L39221
	testb	$32, 17(%r14)
	je	.L39222
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L39223
	movq	integer_types+40(%rip), %rdx
	movzwl	60(%r14), %r10d
	movzwl	60(%rdx), %r14d
	andl	$511, %r10d
	andl	$511, %r14d
	cmpl	%r14d, %r10d
	je	.L39223
.L39222:
	movq	integer_types+40(%rip), %rdi
.L42274:
	movq	%r13, %rsi
	call	convert
.L39192:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L42284
.L39223:
	movq	integer_types+48(%rip), %rdi
	jmp	.L42274
.L39221:
	movl	flag_traditional(%rip), %r9d
	testl	%r9d, %r9d
	je	.L39224
	movl	flag_allow_single_precision(%rip), %r8d
	testl	%r8d, %r8d
	jne	.L39224
	movq	global_trees+192(%rip), %rsi
	cmpq	%rsi, 128(%r14)
	je	.L42456
.L39224:
	cmpl	$5, -140(%rbp)
	je	.L42457
	movq	%r13, %rax
	jmp	.L39192
.L42457:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L39192
.L42456:
	movq	global_trees+200(%rip), %rdi
	jmp	.L42274
.L42455:
	movq	40(%r13), %rdx
	testb	$2, 53(%rdx)
	je	.L39216
	movq	integer_types+40(%rip), %rdi
	movzwl	60(%rdi), %esi
	movq	40(%rdx), %rdi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L39216
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L39222
	testb	$32, 17(%r14)
	jne	.L39223
	jmp	.L39222
.L42454:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r14), %edx
	movl	flag_traditional(%rip), %r11d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r11d, %r11d
	jne	.L39215
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L39214
.L39215:
	testb	$32, 17(%r14)
	movl	$1, %eax
	cmovne	%eax, %esi
.L39214:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L42274
.L39208:
	movl	24(%rcx), %eax
	movl	%eax, 24(%r13)
	jmp	.L39207
.L42453:
	movq	32(%r13), %rsi
	movq	8(%r13), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L39203
.L39206:
	movzbl	16(%rsi), %edx
	movq	%rsi, %r13
	cmpb	$116, %dl
	jne	.L42458
.L42198:
	movq	32(%r13), %rsi
	jmp	.L39206
.L42458:
	cmpb	$115, %dl
	jne	.L39203
	movq	32(%rsi), %r8
	movq	8(%r13), %r9
	cmpq	%r9, 8(%r8)
	movq	%r8, %rsi
	je	.L39206
	jmp	.L39203
.L42452:
	movl	pedantic(%rip), %r14d
	testl	%r14d, %r14d
	jne	.L39198
	cmpb	$51, 48(%r13)
	je	.L39198
	cmpq	$0, current_function_decl(%rip)
	je	.L39200
	movzbl	17(%r13), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L42459
.L39200:
	movq	%r13, %rsi
.L39201:
	movq	%rsi, %r13
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L39198:
	movq	%rax, %r14
	jmp	.L39194
.L42459:
	movq	104(%r13), %rax
	testq	%rax, %rax
	je	.L39200
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L39200
	testb	$2, 17(%rax)
	je	.L39200
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L39201
	jmp	.L39200
.L42451:
	movq	104(%r13), %r13
	movzbl	16(%r13), %edx
	jmp	.L39194
.L39191:
	movq	%r13, %rdi
	call	default_function_array_conversion
	jmp	.L39192
.L42447:
	movq	72(%r11), %rdi
	movq	32(%r12), %rsi
	jmp	.L42312
.L42446:
	testq	%r11, %r11
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L39187
.L42445:
	testq	%r11, %r11
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L39185
	.p2align 6,,7
.L39182:
	movzbl	17(%r12), %edi
	movl	%edi, %esi
	shrb	$3, %dil
	shrb	$4, %sil
	movl	%edi, %edx
	movl	%esi, %eax
	andl	$1, %edx
	andl	$1, %eax
	movl	%eax, -268(%rbp)
	jmp	.L39181
.L42444:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L42284
.L39177:
	movl	24(%r15), %eax
	movl	%eax, 24(%r12)
	jmp	.L39176
.L42443:
	movq	32(%r15), %r8
	cmpq	%r13, 8(%r8)
	je	.L42100
	movl	$115, %ecx
	jmp	.L39171
.L42100:
	movq	32(%r15), %rsi
	movl	%edx, %ecx
.L39175:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r14d
	cmpb	$116, %cl
	jne	.L42460
	movq	32(%r12), %rsi
	jmp	.L39175
.L42460:
	cmpb	$115, %cl
	jne	.L39171
	movq	32(%rsi), %rsi
	movq	8(%r12), %r11
	cmpq	%r11, 8(%rsi)
	je	.L39175
	jmp	.L39171
.L42433:
	cmpb	$18, %dl
	jne	.L39167
	movq	8(%rsi), %rsi
	cmpb	$6, 16(%rsi)
	jne	.L39167
	jmp	.L42193
.L42405:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC170, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r15
	xorl	%r12d, %r12d
	cmpq	%r15, %r14
	movq	%r14, %rbx
	movq	%r15, %r13
	jae	.L42096
.L39145:
	cmpl	$3, (%rbx)
	je	.L42461
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L39141:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L39145
.L42096:
	movslq	%r12d,%rdx
	movq	%r14, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L42098
.L39159:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L42462
	cmpl	$2, %eax
	je	.L42463
.L39153:
	movq	8(%r12), %r9
	movzbl	(%r9), %r14d
	leaq	1(%r9), %rcx
	testb	%r14b, %r14b
	movb	%r14b, (%rbx)
	je	.L39149
.L39158:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L39158
.L39149:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L39159
	jmp	.L42098
.L42463:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L39153
.L42462:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L39149
.L42461:
	addl	$25, %r12d
	jmp	.L39141
	.p2align 6,,7
.L42404:
	movq	8(%rsi), %rsi
	movq	constructor_max_index(%rip), %rdi
	movq	128(%rsi), %rdx
	movq	constructor_index(%rip), %rsi
	movq	%rdx, -120(%rbp)
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L42464
	testq	%r15, %r15
	je	.L38855
	movq	constructor_index(%rip), %rax
	movq	%r15, %r12
	movq	%rax, -264(%rbp)
	movq	8(%r15), %rdi
	movzbl	16(%rdi), %eax
	movq	%rdi, %rdx
	cmpb	$23, %al
	je	.L38857
	cmpb	$18, %al
	je	.L42465
.L42182:
	movq	global_trees(%rip), %r8
.L38856:
	cmpb	$-86, 16(%r12)
	je	.L42466
.L38955:
	cmpq	%r8, %r12
	je	.L42467
	testb	$2, 17(%r12)
	jne	.L38958
	movl	$0, constructor_constant(%rip)
.L38957:
	movl	require_constant_value(%rip), %esi
	testl	%esi, %esi
	je	.L38962
	testb	$2, 17(%r12)
	je	.L42468
.L38962:
	movl	require_constant_elements(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L42469
.L38987:
	cmpq	$0, -264(%rbp)
	je	.L38989
	movq	-264(%rbp), %r10
	movq	8(%r10), %rax
	cmpq	global_trees(%rip), %rax
	je	.L38855
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L42470
.L38989:
	movq	-120(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%r12, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -256(%rbp)
	je	.L42471
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L42472
.L38993:
	cmpb	$20, 16(%rdi)
	je	.L42473
.L39014:
	cmpb	$21, 16(%rdi)
	je	.L42474
.L39013:
	cmpq	$0, -264(%rbp)
	je	.L39081
	movq	-264(%rbp), %rsi
	cmpb	$25, 16(%rsi)
	je	.L42475
.L39081:
	movq	constructor_elements(%rip), %rdx
	movq	-264(%rbp), %rdi
	movq	-256(%rbp), %rsi
	call	tree_cons
	movq	%rax, constructor_elements(%rip)
	movq	constructor_type(%rip), %rax
	movq	%rax, %rdx
	movzbl	16(%rax), %eax
	cmpb	$18, %al
	je	.L42476
	cmpb	$20, %al
	je	.L42477
	cmpb	$21, 16(%rdx)
	je	.L42478
.L39083:
	movl	$1, %eax
	testl	%eax, %eax
	je	.L38855
	movq	constructor_pending_elts(%rip), %rbx
.L39093:
	xorl	%r14d, %r14d
	testq	%rbx, %rbx
	je	.L39095
.L39129:
	movq	constructor_type(%rip), %rsi
	movzbl	16(%rsi), %eax
	cmpb	$18, %al
	je	.L42479
	subb	$20, %al
	cmpb	$1, %al
	ja	.L39094
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L39095
	call	bit_position
	movq	32(%rbx), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L39115
	movq	32(%rbx), %rdx
	movq	40(%rbx), %rdi
	movq	%rdx, constructor_unfilled_fields(%rip)
	movq	8(%rdx), %rsi
.L42273:
	xorl	%ecx, %ecx
	call	output_init_element
.L39094:
	testq	%rbx, %rbx
	jne	.L39129
.L39095:
	xorl	%r8d, %r8d
	testl	%r8d, %r8d
	je	.L38855
	testq	%r14, %r14
	je	.L38855
	movq	constructor_type(%rip), %r10
	movzbl	16(%r10), %edx
	leal	-20(%rdx), %r11d
	cmpb	$1, %r11b
	jbe	.L42480
	cmpb	$18, %dl
	jne	.L39093
	movq	%r14, constructor_unfilled_index(%rip)
	jmp	.L39093
.L42480:
	movq	%r14, constructor_unfilled_fields(%rip)
	jmp	.L39093
	.p2align 6,,7
.L39115:
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L39117
.L42309:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.L39118
.L42272:
	movq	%rax, %rbx
	jmp	.L39094
.L39118:
	movq	32(%rbx), %r14
	jmp	.L39095
	.p2align 6,,7
.L39117:
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L42272
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L39124
	cmpq	%rbx, 8(%rax)
	je	.L39127
.L39124:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L39095
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
.L42310:
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L39094
	jmp	.L39118
	.p2align 6,,7
.L39127:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L39124
	cmpq	%rbx, 8(%rax)
	je	.L39127
	jmp	.L39124
	.p2align 6,,7
.L42479:
	movq	32(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L39098
	movq	constructor_type(%rip), %rcx
	movq	40(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rdx
	movq	8(%rcx), %rsi
	jmp	.L42273
.L39098:
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rbx), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L42309
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L42272
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L39107
	cmpq	%rbx, 8(%rax)
	je	.L39110
.L39107:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L39095
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	jmp	.L42310
.L39110:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L39107
	cmpq	%rbx, 8(%rax)
	je	.L39110
	jmp	.L39107
.L42478:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L39083
.L42477:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L39083
	testb	$2, 53(%rdx)
	je	.L39083
	cmpq	$0, 72(%rdx)
	jne	.L39083
.L39089:
	movq	constructor_unfilled_fields(%rip), %r13
	movq	(%r13), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L39083
	testb	$2, 53(%rdx)
	je	.L39083
	cmpq	$0, 72(%rdx)
	jne	.L39083
	jmp	.L39089
.L42476:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L39083
.L42475:
	movq	%rsi, %rdi
	call	copy_node
	movq	%rax, -264(%rbp)
	jmp	.L39081
.L42474:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L39013
	movq	32(%rax), %rdx
	testb	$1, 17(%rdx)
	jne	.L42481
.L39056:
	movq	$0, constructor_elements(%rip)
	jmp	.L39013
.L42481:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r11
	xorl	%r12d, %r12d
	cmpq	%r11, %r14
	movq	%r14, %rbx
	movq	%r11, %r13
	jae	.L42087
.L39063:
	cmpl	$3, (%rbx)
	je	.L42482
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L39059:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L39063
.L42087:
	movslq	%r12d,%rbx
	movq	%r14, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, -136(%rbp)
	movq	%rsp, %rbx
	jae	.L42089
.L39077:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L42483
	cmpl	$2, %eax
	je	.L42484
.L39071:
	movq	8(%r12), %r9
	movzbl	(%r9), %r10d
	leaq	1(%r9), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L39067
.L39076:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L39076
.L39067:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L39077
.L42089:
	movb	$0, (%rbx)
	movq	-136(%rbp), %rbx
	cmpb	$0, (%rbx)
	je	.L39056
	movl	$.LC142, %edi
	movq	%rbx, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L39056
.L42484:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L39071
.L42483:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L39067
.L42482:
	addl	$25, %r12d
	jmp	.L39059
.L42473:
	movl	constructor_incremental(%rip), %esi
	testl	%esi, %esi
	je	.L39016
	movq	constructor_unfilled_fields(%rip), %rdx
	cmpq	%rdx, -264(%rbp)
	je	.L39014
	testq	%rdx, %rdx
	jne	.L39017
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L39024
.L42081:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L42485
.L39044:
	cmpb	$18, 16(%rdi)
	je	.L42486
.L39050:
	movl	$0, constructor_incremental(%rip)
.L39016:
	movq	-264(%rbp), %rdi
	movq	-256(%rbp), %rsi
	call	add_pending_init
	jmp	.L38855
.L42486:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L42487
	movq	global_trees+136(%rip), %rax
.L42271:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L39050
.L42487:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L42271
.L42485:
	movq	24(%rdi), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L39050
	testb	$2, 53(%rdx)
	je	.L39050
	cmpq	$0, 72(%rdx)
	jne	.L39050
.L39030:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L39050
	testb	$2, 53(%rdx)
	je	.L39050
	cmpq	$0, 72(%rdx)
	jne	.L39050
	jmp	.L39030
	.p2align 6,,7
.L39024:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L39024
	movq	constructor_type(%rip), %rdi
	jmp	.L42081
.L39017:
	movq	-264(%rbp), %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r14
	call	bit_position
	movq	%r14, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L39016
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L39037
	cmpb	$18, %al
	jne	.L39016
.L39037:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L39043
.L42084:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L39044
	movq	24(%rdi), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L39050
	testb	$2, 53(%rdx)
	je	.L39050
	cmpq	$0, 72(%rdx)
	jne	.L39050
.L39049:
	movq	constructor_unfilled_fields(%rip), %r8
	movq	(%r8), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L39050
	testb	$2, 53(%rdx)
	je	.L39050
	cmpq	$0, 72(%rdx)
	jne	.L39050
	jmp	.L39049
.L39043:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L39043
	movq	constructor_type(%rip), %rdi
	jmp	.L42084
	.p2align 6,,7
.L42472:
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L39016
	movq	-264(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L42190
	movl	constructor_incremental(%rip), %edi
	testl	%edi, %edi
	je	.L39016
	movq	-264(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L39016
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L38996
	cmpb	$18, %al
	jne	.L39016
.L38996:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L39002
.L42078:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L39044
	movq	24(%rdi), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L39050
	testb	$2, 53(%rdx)
	je	.L39050
	cmpq	$0, 72(%rdx)
	jne	.L39050
.L39008:
	movq	constructor_unfilled_fields(%rip), %r13
	movq	(%r13), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L39050
	testb	$2, 53(%rdx)
	je	.L39050
	cmpq	$0, 72(%rdx)
	jne	.L39050
	jmp	.L39008
.L39002:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L39002
	movq	constructor_type(%rip), %rdi
	jmp	.L42078
.L42190:
	movq	constructor_type(%rip), %rdi
	jmp	.L38993
	.p2align 6,,7
.L42471:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L38855
.L42470:
	call	integer_zerop
	testl	%eax, %eax
	je	.L38989
	movq	constructor_type(%rip), %r9
	cmpb	$18, 16(%r9)
	je	.L38855
	movq	-264(%rbp), %rax
	cmpq	$0, (%rax)
	jne	.L38855
	jmp	.L38989
	.p2align 6,,7
.L42469:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L38987
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L38987
	.p2align 6,,7
.L42468:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rcx
	xorl	%r12d, %r12d
	cmpq	%rcx, %r14
	movq	%r14, %rbx
	movq	%rcx, %r13
	jae	.L42073
.L38969:
	cmpl	$3, (%rbx)
	je	.L42488
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L38965:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L38969
.L42073:
	movslq	%r12d,%r8
	movq	%r14, %r12
	addq	$16, %r8
	andq	$-16, %r8
	subq	%r8, %rsp
	cmpq	%r13, %r14
	movq	%rsp, -128(%rbp)
	movq	%rsp, %rbx
	jae	.L42075
.L38983:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L42489
	cmpl	$2, %eax
	je	.L42490
.L38977:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r14d
	leaq	1(%rdx), %rcx
	testb	%r14b, %r14b
	movb	%r14b, (%rbx)
	je	.L38973
.L38982:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L38982
.L38973:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L38983
.L42075:
	movb	$0, (%rbx)
	movq	-128(%rbp), %rsi
	cmpb	$0, (%rsi)
	jne	.L42491
.L38986:
	movq	global_trees(%rip), %r12
	jmp	.L38987
.L42491:
	movl	$.LC142, %edi
	xorl	%eax, %eax
	call	error
	jmp	.L38986
	.p2align 6,,7
.L42490:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L38977
.L42489:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L38973
.L42488:
	addl	$25, %r12d
	jmp	.L38965
.L38958:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L38961
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %r9d
	subb	$20, %r9b
	cmpb	$1, %r9b
	ja	.L38957
	movq	-264(%rbp), %r13
	testb	$2, 53(%r13)
	je	.L38957
	cmpb	$25, 16(%r12)
	je	.L38957
.L38961:
	movl	$0, constructor_simple(%rip)
	jmp	.L38957
	.p2align 6,,7
.L42467:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L38957
.L42466:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L38955
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L38955
	movl	$1, %edx
	testl	%edx, %edx
	je	.L38955
	movq	32(%r12), %r10
	movq	32(%r10), %r11
	movq	104(%r11), %r12
	jmp	.L38955
	.p2align 6,,7
.L42465:
	cmpb	$29, 16(%r15)
	je	.L42492
.L38858:
	movq	-120(%rbp), %r9
	movq	128(%rdx), %rdi
	movq	128(%r9), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L42182
	movq	8(%r15), %rdi
.L38857:
	movzbl	16(%rdi), %r13d
	movq	%rdi, %rbx
	cmpl	$23, %r13d
	je	.L38860
	cmpl	$18, %r13d
	je	.L38860
	movzbl	16(%r15), %eax
	cmpb	$32, %al
	je	.L42493
	movl	optimize(%rip), %r8d
	testl	%r8d, %r8d
	je	.L38923
	cmpb	$34, %al
	je	.L42494
.L38923:
	movzbl	16(%r12), %ecx
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L42189
	cmpb	$115, %cl
	je	.L42495
.L38932:
	movzbl	%cl, %edi 
	movzbl	tree_code_type(%rdi), %eax
	cmpb	$60, %al
	je	.L38937
	cmpb	$49, %al
	je	.L38937
	cmpb	$50, %al
	je	.L38937
	cmpb	$101, %al
	je	.L38937
.L38936:
	cmpl	$10, %r13d
	je	.L42496
	cmpb	$39, %cl
	je	.L42497
.L38945:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L38950
	testb	$32, 17(%rbx)
	je	.L38951
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L38952
	movzwl	60(%rbx), %r8d
	movq	integer_types+40(%rip), %rbx
	movzwl	60(%rbx), %ecx
	andl	$511, %r8d
	andl	$511, %ecx
	cmpl	%ecx, %r8d
	je	.L38952
.L38951:
	movq	integer_types+40(%rip), %rdi
.L42307:
	movq	%r12, %rsi
.L42308:
	call	convert
.L42268:
	movq	%rax, %rbx
.L42259:
	movq	global_trees(%rip), %r8
.L38921:
	movq	%rbx, %r12
	jmp	.L38856
.L38952:
	movq	integer_types+48(%rip), %rdi
	jmp	.L42307
.L38950:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L38953
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L38953
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%rbx)
	je	.L42498
.L38953:
	cmpl	$5, %r13d
	je	.L42499
.L38954:
	movq	%r12, %rbx
	jmp	.L42259
.L42499:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L42260:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L38921
.L42498:
	movq	global_trees+200(%rip), %rdi
	jmp	.L42307
.L42497:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L38945
	movq	integer_types+40(%rip), %r14
	movq	40(%rdx), %rdi
	movzwl	60(%r14), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L38945
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L38951
	testb	$32, 17(%rbx)
	jne	.L38952
	jmp	.L38951
.L42496:
	movq	integer_types+40(%rip), %rsi
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%rsi), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L38944
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L38943
.L38944:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L38943:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L42307
	.p2align 6,,7
.L38937:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L38936
.L42495:
	movq	32(%r12), %rsi
	movq	8(%r12), %r11
	cmpq	%r11, 8(%rsi)
	jne	.L38932
.L38935:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L42500
.L42189:
	movq	32(%r12), %rsi
	jmp	.L38935
.L42500:
	cmpb	$115, %cl
	jne	.L38932
	movq	32(%rsi), %r9
	movq	8(%r12), %r10
	cmpq	%r10, 8(%r9)
	movq	%r9, %rsi
	je	.L38935
	jmp	.L38932
.L42494:
	movl	pedantic(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L38927
	cmpb	$51, 48(%r15)
	je	.L38927
	cmpq	$0, current_function_decl(%rip)
	je	.L38929
	movzbl	17(%r15), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L42501
.L38929:
	movq	%r15, %rsi
.L38930:
	movq	%rsi, %r12
.L38927:
	movq	8(%r12), %rbx
	jmp	.L38923
.L42501:
	movq	104(%r15), %rax
	testq	%rax, %rax
	je	.L38929
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L38929
	testb	$2, 17(%rax)
	je	.L38929
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L38930
	jmp	.L38929
.L42493:
	movq	104(%r15), %r12
	jmp	.L38923
	.p2align 6,,7
.L38860:
	movzbl	16(%r15), %edx
	xorl	%r14d, %r14d
	movl	%r13d, %r8d
	cmpb	$116, %dl
	je	.L42069
	cmpb	$115, %dl
	je	.L42502
	movzbl	16(%r15), %ecx
.L38862:
	movzbl	%cl, %edx 
	movzbl	tree_code_type(%rdx), %eax
	cmpb	$60, %al
	je	.L38868
	cmpb	$49, %al
	je	.L38868
	cmpb	$50, %al
	je	.L38868
	cmpb	$101, %al
	je	.L38868
.L38867:
	cmpl	$23, %r8d
	je	.L42503
	cmpl	$18, %r8d
	jne	.L38954
	movzbl	%cl, %esi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rsi), %eax
	movq	8(%rdi), %r13
	cmpb	$114, %al
	je	.L38873
	cmpb	$100, %al
	je	.L38873
.L38872:
	movzbl	17(%rdi), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %esi
	shrb	$3, %r10b
	shrb	$4, %sil
	andl	$1, %r10d
	andl	%esi, %r9d
	xorl	%esi, %esi
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rdi), %r10d
	movzbl	16(%rdi), %edi
	movl	%r10d, %ebx
	shrb	$5, %bl
	andl	$1, %ebx
	sall	$2, %ebx
	orl	%ebx, %r9d
	cmpb	$20, %dil
	je	.L42504
.L38876:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L38875
	testl	%edx, %edx
	jne	.L38875
	testl	%r11d, %r11d
	je	.L38874
.L38875:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%ebx, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L42505
.L38878:
	leal	0(,%rcx,8), %r8d
	leal	(%r11,%r11), %edi
	orl	%r8d, %esi
	orl	%edx, %esi
	orl	%edi, %esi
	movq	%r13, %rdi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L38874:
	cmpb	$41, %cl
	je	.L42506
	cmpb	$47, %cl
	je	.L42507
	xorl	%ebx, %ebx
	testl	%r14d, %r14d
	je	.L42508
.L38917:
	movl	flag_isoc99(%rip), %r14d
	testl	%r14d, %r14d
	jne	.L38918
	testl	%ebx, %ebx
	je	.L38954
.L38918:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L42509
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L42308
.L42509:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L42260
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %ecx
	andb	$1, %cl
	addb	%cl, %cl
	andb	$-4, %r12b
	orb	%cl, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L42259
.L42508:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L38917
.L42507:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L38882
	cmpl	$18, %r14d
	je	.L38882
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L42510
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L38885
	cmpb	$34, %dl
	je	.L42511
.L38885:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L42187
	cmpb	$115, %dl
	je	.L42512
.L38894:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L38899
	cmpb	$49, %al
	je	.L38899
	cmpb	$50, %al
	je	.L38899
	cmpb	$101, %al
	je	.L38899
.L38898:
	cmpl	$10, %r14d
	je	.L42513
	cmpb	$39, %dl
	je	.L42514
.L38907:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L38912
	testb	$32, 17(%r13)
	je	.L38913
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L38914
	movzwl	60(%r13), %r10d
	movq	integer_types+40(%rip), %r13
	movzwl	60(%r13), %r11d
	andl	$511, %r10d
	andl	$511, %r11d
	cmpl	%r11d, %r10d
	je	.L38914
.L38913:
	movq	integer_types+40(%rip), %rdi
.L42258:
	movq	%rbx, %rsi
	call	convert
.L38883:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L42268
.L38914:
	movq	integer_types+48(%rip), %rdi
	jmp	.L42258
.L38912:
	movl	flag_traditional(%rip), %r9d
	testl	%r9d, %r9d
	je	.L38915
	movl	flag_allow_single_precision(%rip), %edi
	testl	%edi, %edi
	jne	.L38915
	movq	global_trees+192(%rip), %rsi
	cmpq	%rsi, 128(%r13)
	je	.L42515
.L38915:
	cmpl	$5, %r14d
	je	.L42516
	movq	%rbx, %rax
	jmp	.L38883
.L42516:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L38883
.L42515:
	movq	global_trees+200(%rip), %rdi
	jmp	.L42258
.L42514:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L38907
	movq	integer_types+40(%rip), %r8
	movq	40(%rdx), %rdi
	movzwl	60(%r8), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L38907
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L38913
	testb	$32, 17(%r13)
	jne	.L38914
	jmp	.L38913
.L42513:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L38906
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L38905
.L38906:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L38905:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L42258
.L38899:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L38898
.L42512:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L38894
.L38897:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L42517
.L42187:
	movq	32(%rbx), %rsi
	jmp	.L38897
.L42517:
	cmpb	$115, %dl
	jne	.L38894
	movq	32(%rsi), %rdi
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%rdi)
	movq	%rdi, %rsi
	je	.L38897
	jmp	.L38894
.L42511:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L38889
	cmpb	$51, 48(%rbx)
	je	.L38889
	cmpq	$0, current_function_decl(%rip)
	je	.L38891
	movzbl	17(%rbx), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L42518
.L38891:
	movq	%rbx, %rsi
.L38892:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L38889:
	movq	%rax, %r13
	jmp	.L38885
.L42518:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L38891
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L38891
	testb	$2, 17(%rax)
	je	.L38891
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L38892
	jmp	.L38891
.L42510:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L38885
.L38882:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L38883
.L42506:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L42308
.L42505:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L38878
.L42504:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L38876
.L38873:
	movzbl	17(%r12), %r8d
	movl	$1, %r11d
	movl	%r8d, %edx
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	%r8d, %r11d
	andl	$1, %edx
	jmp	.L38872
.L42503:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L42268
	.p2align 6,,7
.L38868:
	movl	24(%r15), %eax
	movl	%eax, 24(%r12)
	jmp	.L38867
.L42502:
	movq	32(%r15), %r11
	cmpq	%rdi, 8(%r11)
	je	.L42069
	movl	$115, %ecx
	jmp	.L38862
.L42069:
	movq	32(%r15), %rsi
	movl	%edx, %ecx
.L38866:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r14d
	cmpb	$116, %cl
	jne	.L42519
	movq	32(%r12), %rsi
	jmp	.L38866
.L42519:
	cmpb	$115, %cl
	jne	.L38862
	movq	32(%rsi), %rsi
	movq	8(%r12), %rbx
	cmpq	%rbx, 8(%rsi)
	je	.L38866
	jmp	.L38862
.L42492:
	movq	-120(%rbp), %rbx
	cmpb	$18, 16(%rbx)
	jne	.L38858
	movq	8(%rbx), %r13
	cmpb	$6, 16(%r13)
	jne	.L38858
	jmp	.L42182
.L42464:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC169, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r15
	xorl	%r12d, %r12d
	cmpq	%r15, %r14
	movq	%r14, %rbx
	movq	%r15, %r13
	jae	.L42065
.L38837:
	cmpl	$3, (%rbx)
	je	.L42520
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L38833:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L38837
.L42065:
	movslq	%r12d,%rcx
	movq	%r14, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L42098
.L38851:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L42521
	cmpl	$2, %eax
	je	.L42522
.L38845:
	movq	8(%r12), %r8
	movzbl	(%r8), %r14d
	leaq	1(%r8), %rcx
	testb	%r14b, %r14b
	movb	%r14b, (%rbx)
	je	.L38841
.L38850:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L38850
.L38841:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L38851
	jmp	.L42098
.L42522:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L38845
.L42521:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L38841
.L42520:
	addl	$25, %r12d
	jmp	.L38833
	.p2align 6,,7
.L42338:
	movq	constructor_fields(%rip), %rax
	testq	%rax, %rax
	je	.L42523
	movq	8(%rax), %rax
	cmpq	global_trees(%rip), %rax
	movq	%rax, -216(%rbp)
	je	.L38215
	movq	128(%rax), %r12
	movq	%r12, -216(%rbp)
.L38215:
	movl	warn_traditional(%rip), %eax
	movq	-216(%rbp), %rcx
	testl	%eax, %eax
	movzbl	16(%rcx), %ebx
	je	.L38216
	movl	in_system_header(%rip), %esi
	testl	%esi, %esi
	jne	.L38216
	movl	constructor_designated(%rip), %r8d
	testl	%r8d, %r8d
	jne	.L38216
	testq	%r15, %r15
	je	.L38217
	movq	%r15, %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L42524
.L38216:
	testq	%r15, %r15
	je	.L38222
	cmpl	$18, %ebx
	je	.L42525
.L38218:
	testq	%r15, %r15
	je	.L38222
	movl	constructor_no_implicit(%rip), %edx
	testl	%edx, %edx
	jne	.L38219
	cmpq	global_trees(%rip), %r15
	je	.L38219
	movq	8(%r15), %r13
	movq	-216(%rbp), %r9
	cmpq	%r9, 128(%r13)
	je	.L38219
	cmpl	$20, %ebx
	je	.L38515
	cmpl	$18, %ebx
	je	.L38515
	cmpl	$21, %ebx
	je	.L38515
.L38219:
	testq	%r15, %r15
	je	.L38222
	movq	constructor_fields(%rip), %rbx
	movl	$.LC159, %r12d
	movq	72(%rbx), %rax
	testq	%rax, %rax
	je	.L38224
	movq	32(%rax), %r12
.L38224:
	movq	spelling(%rip), %rdx
	movq	spelling_base(%rip), %rdi
	movl	spelling_size(%rip), %eax
	movq	%rdx, %rcx
	subq	%rdi, %rcx
	movq	%rcx, %rbx
	shrq	$4, %rbx
	cmpl	%eax, %ebx
	jl	.L38225
	addl	$10, %eax
	testq	%rdi, %rdi
	movl	%eax, spelling_size(%rip)
	jne	.L38226
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L42224:
	movslq	%ebx,%rdx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rdx
	addq	spelling_base(%rip), %rdx
	movq	%rdx, spelling(%rip)
.L38225:
	movq	constructor_fields(%rip), %rax
	movq	%r12, 8(%rdx)
	movl	$2, (%rdx)
	addq	$16, %rdx
	movq	%r15, %r12
	movq	%rdx, spelling(%rip)
	movq	%rax, -232(%rbp)
	movq	8(%r15), %rdi
	movzbl	16(%rdi), %eax
	movq	%rdi, %rdx
	cmpb	$23, %al
	je	.L38230
	cmpb	$18, %al
	je	.L42526
.L42160:
	movq	global_trees(%rip), %r8
.L38229:
	cmpb	$-86, 16(%r12)
	je	.L42527
.L38328:
	cmpq	%r8, %r12
	je	.L42528
	testb	$2, 17(%r12)
	jne	.L38331
	movl	$0, constructor_constant(%rip)
.L38330:
	movl	require_constant_value(%rip), %esi
	testl	%esi, %esi
	je	.L38335
	testb	$2, 17(%r12)
	je	.L42529
.L38335:
	movl	require_constant_elements(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L42530
.L38360:
	cmpq	$0, -232(%rbp)
	je	.L38362
	movq	-232(%rbp), %r10
	movq	8(%r10), %rax
	cmpq	global_trees(%rip), %rax
	je	.L38364
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L42531
.L38362:
	movq	-216(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%r12, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -224(%rbp)
	je	.L42532
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L42533
.L38366:
	cmpb	$20, 16(%rdi)
	je	.L42534
.L38387:
	cmpb	$21, 16(%rdi)
	je	.L42535
.L38386:
	cmpq	$0, -232(%rbp)
	je	.L38454
	movq	-232(%rbp), %rsi
	cmpb	$25, 16(%rsi)
	je	.L42536
.L38454:
	movq	constructor_elements(%rip), %rdx
	movq	-232(%rbp), %rdi
	movq	-224(%rbp), %rsi
	call	tree_cons
	movq	%rax, constructor_elements(%rip)
	movq	constructor_type(%rip), %rax
	movq	%rax, %rdx
	movzbl	16(%rax), %eax
	cmpb	$18, %al
	je	.L42537
	cmpb	$20, %al
	je	.L42538
	cmpb	$21, 16(%rdx)
	je	.L42539
.L38456:
	movl	$1, %eax
	testl	%eax, %eax
	je	.L38364
	movq	constructor_pending_elts(%rip), %rbx
.L38466:
	xorl	%r14d, %r14d
	testq	%rbx, %rbx
	je	.L38468
.L38502:
	movq	constructor_type(%rip), %rsi
	movzbl	16(%rsi), %eax
	cmpb	$18, %al
	je	.L42540
	subb	$20, %al
	cmpb	$1, %al
	ja	.L38467
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L38468
	call	bit_position
	movq	32(%rbx), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L38488
	movq	32(%rbx), %rdx
	movq	40(%rbx), %rdi
	movq	%rdx, constructor_unfilled_fields(%rip)
	movq	8(%rdx), %rsi
.L42240:
	xorl	%ecx, %ecx
	call	output_init_element
.L38467:
	testq	%rbx, %rbx
	jne	.L38502
.L38468:
	xorl	%r8d, %r8d
	testl	%r8d, %r8d
	je	.L38364
	testq	%r14, %r14
	je	.L38364
	movq	constructor_type(%rip), %r10
	movzbl	16(%r10), %edx
	leal	-20(%rdx), %r11d
	cmpb	$1, %r11b
	jbe	.L42541
	cmpb	$18, %dl
	jne	.L38466
	movq	%r14, constructor_unfilled_index(%rip)
	jmp	.L38466
.L42541:
	movq	%r14, constructor_unfilled_fields(%rip)
	jmp	.L38466
	.p2align 6,,7
.L38364:
	movslq	constructor_depth(%rip),%r14
	salq	$4, %r14
	addq	spelling_base(%rip), %r14
	movq	%r14, spelling(%rip)
	jmp	.L39164
.L38488:
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L38490
.L42301:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.L38491
.L42239:
	movq	%rax, %rbx
	jmp	.L38467
.L38491:
	movq	32(%rbx), %r14
	jmp	.L38468
	.p2align 6,,7
.L38490:
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L42239
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L38497
	cmpq	%rbx, 8(%rax)
	je	.L38500
.L38497:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L38468
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
.L42302:
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L38467
	jmp	.L38491
	.p2align 6,,7
.L38500:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L38497
	cmpq	%rbx, 8(%rax)
	je	.L38500
	jmp	.L38497
	.p2align 6,,7
.L42540:
	movq	32(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L38471
	movq	constructor_type(%rip), %rcx
	movq	40(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rdx
	movq	8(%rcx), %rsi
	jmp	.L42240
.L38471:
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rbx), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L42301
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L42239
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L38480
	cmpq	%rbx, 8(%rax)
	je	.L38483
.L38480:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L38468
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	jmp	.L42302
	.p2align 6,,7
.L38483:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L38480
	cmpq	%rbx, 8(%rax)
	je	.L38483
	jmp	.L38480
.L42539:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L38456
.L42538:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L38456
	testb	$2, 53(%rdx)
	je	.L38456
	cmpq	$0, 72(%rdx)
	jne	.L38456
.L38462:
	movq	constructor_unfilled_fields(%rip), %r13
	movq	(%r13), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L38456
	testb	$2, 53(%rdx)
	je	.L38456
	cmpq	$0, 72(%rdx)
	jne	.L38456
	jmp	.L38462
.L42537:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L38456
.L42536:
	movq	%rsi, %rdi
	call	copy_node
	movq	%rax, -232(%rbp)
	jmp	.L38454
.L42535:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L38386
	movq	32(%rax), %rdx
	testb	$1, 17(%rdx)
	jne	.L42542
.L38429:
	movq	$0, constructor_elements(%rip)
	jmp	.L38386
.L42542:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r11
	xorl	%r12d, %r12d
	cmpq	%r11, %r14
	movq	%r14, %rbx
	movq	%r11, %r13
	jae	.L42025
.L38436:
	cmpl	$3, (%rbx)
	je	.L42543
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L38432:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L38436
.L42025:
	movslq	%r12d,%rbx
	movq	%r14, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, -88(%rbp)
	movq	%rsp, %rbx
	jae	.L42027
.L38450:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L42544
	cmpl	$2, %eax
	je	.L42545
.L38444:
	movq	8(%r12), %r9
	movzbl	(%r9), %r10d
	leaq	1(%r9), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L38440
.L38449:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L38449
.L38440:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L38450
.L42027:
	movb	$0, (%rbx)
	movq	-88(%rbp), %rbx
	cmpb	$0, (%rbx)
	je	.L38429
	movl	$.LC142, %edi
	movq	%rbx, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L38429
.L42545:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L38444
.L42544:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L38440
.L42543:
	addl	$25, %r12d
	jmp	.L38432
.L42534:
	movl	constructor_incremental(%rip), %esi
	testl	%esi, %esi
	je	.L38389
	movq	constructor_unfilled_fields(%rip), %rdx
	cmpq	%rdx, -232(%rbp)
	je	.L38387
	testq	%rdx, %rdx
	jne	.L38390
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L38397
.L42019:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L42546
.L38417:
	cmpb	$18, 16(%rdi)
	je	.L42547
.L38423:
	movl	$0, constructor_incremental(%rip)
.L38389:
	movq	-232(%rbp), %rdi
	movq	-224(%rbp), %rsi
	call	add_pending_init
	jmp	.L38364
.L42547:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L42548
	movq	global_trees+136(%rip), %rax
.L42238:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L38423
.L42548:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L42238
.L42546:
	movq	24(%rdi), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L38423
	testb	$2, 53(%rdx)
	je	.L38423
	cmpq	$0, 72(%rdx)
	jne	.L38423
.L38403:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L38423
	testb	$2, 53(%rdx)
	je	.L38423
	cmpq	$0, 72(%rdx)
	jne	.L38423
	jmp	.L38403
.L38397:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L38397
	movq	constructor_type(%rip), %rdi
	jmp	.L42019
.L38390:
	movq	-232(%rbp), %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r14
	call	bit_position
	movq	%r14, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L38389
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L38410
	cmpb	$18, %al
	jne	.L38389
.L38410:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L38416
.L42022:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L38417
	movq	24(%rdi), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L38423
	testb	$2, 53(%rdx)
	je	.L38423
	cmpq	$0, 72(%rdx)
	jne	.L38423
.L38422:
	movq	constructor_unfilled_fields(%rip), %r8
	movq	(%r8), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L38423
	testb	$2, 53(%rdx)
	je	.L38423
	cmpq	$0, 72(%rdx)
	jne	.L38423
	jmp	.L38422
.L38416:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L38416
	movq	constructor_type(%rip), %rdi
	jmp	.L42022
.L42533:
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L38389
	movq	-232(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L42168
	movl	constructor_incremental(%rip), %edi
	testl	%edi, %edi
	je	.L38389
	movq	-232(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L38389
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L38369
	cmpb	$18, %al
	jne	.L38389
.L38369:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L38375
.L42016:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L38417
	movq	24(%rdi), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L38423
	testb	$2, 53(%rdx)
	je	.L38423
	cmpq	$0, 72(%rdx)
	jne	.L38423
.L38381:
	movq	constructor_unfilled_fields(%rip), %r13
	movq	(%r13), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L38423
	testb	$2, 53(%rdx)
	je	.L38423
	cmpq	$0, 72(%rdx)
	jne	.L38423
	jmp	.L38381
.L38375:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L38375
	movq	constructor_type(%rip), %rdi
	jmp	.L42016
.L42168:
	movq	constructor_type(%rip), %rdi
	jmp	.L38366
.L42532:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L38364
.L42531:
	call	integer_zerop
	testl	%eax, %eax
	je	.L38362
	movq	constructor_type(%rip), %r9
	cmpb	$18, 16(%r9)
	je	.L38364
	movq	-232(%rbp), %rax
	cmpq	$0, (%rax)
	jne	.L38364
	jmp	.L38362
.L42530:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L38360
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L38360
.L42529:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rcx
	xorl	%r12d, %r12d
	cmpq	%rcx, %r14
	movq	%r14, %rbx
	movq	%rcx, %r13
	jae	.L42011
.L38342:
	cmpl	$3, (%rbx)
	je	.L42549
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L38338:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L38342
.L42011:
	movslq	%r12d,%r8
	movq	%r14, %r12
	addq	$16, %r8
	andq	$-16, %r8
	subq	%r8, %rsp
	cmpq	%r13, %r14
	movq	%rsp, -80(%rbp)
	movq	%rsp, %rbx
	jae	.L42013
.L38356:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L42550
	cmpl	$2, %eax
	je	.L42551
.L38350:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r14d
	leaq	1(%rdx), %rcx
	testb	%r14b, %r14b
	movb	%r14b, (%rbx)
	je	.L38346
.L38355:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L38355
.L38346:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L38356
.L42013:
	movb	$0, (%rbx)
	movq	-80(%rbp), %rsi
	cmpb	$0, (%rsi)
	jne	.L42552
.L38359:
	movq	global_trees(%rip), %r12
	jmp	.L38360
.L42552:
	movl	$.LC142, %edi
	xorl	%eax, %eax
	call	error
	jmp	.L38359
.L42551:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L38350
.L42550:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L38346
.L42549:
	addl	$25, %r12d
	jmp	.L38338
.L38331:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L38334
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %r9d
	subb	$20, %r9b
	cmpb	$1, %r9b
	ja	.L38330
	movq	-232(%rbp), %r13
	testb	$2, 53(%r13)
	je	.L38330
	cmpb	$25, 16(%r12)
	je	.L38330
.L38334:
	movl	$0, constructor_simple(%rip)
	jmp	.L38330
.L42528:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L38330
.L42527:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L38328
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L38328
	movl	$1, %edx
	testl	%edx, %edx
	je	.L38328
	movq	32(%r12), %r10
	movq	32(%r10), %r11
	movq	104(%r11), %r12
	jmp	.L38328
.L42526:
	cmpb	$29, 16(%r15)
	je	.L42553
.L38231:
	movq	-216(%rbp), %r14
	movq	128(%rdx), %rdi
	movq	128(%r14), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L42160
	movq	8(%r15), %rdi
.L38230:
	movzbl	16(%rdi), %r13d
	movq	%rdi, %rbx
	cmpl	$23, %r13d
	je	.L38233
	cmpl	$18, %r13d
	je	.L38233
	movzbl	16(%r15), %eax
	cmpb	$32, %al
	je	.L42554
	movl	optimize(%rip), %r8d
	testl	%r8d, %r8d
	je	.L38296
	cmpb	$34, %al
	je	.L42555
.L38296:
	movzbl	16(%r12), %ecx
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L42167
	cmpb	$115, %cl
	je	.L42556
.L38305:
	movzbl	%cl, %edi 
	movzbl	tree_code_type(%rdi), %eax
	cmpb	$60, %al
	je	.L38310
	cmpb	$49, %al
	je	.L38310
	cmpb	$50, %al
	je	.L38310
	cmpb	$101, %al
	je	.L38310
.L38309:
	cmpl	$10, %r13d
	je	.L42557
	cmpb	$39, %cl
	je	.L42558
.L38318:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L38323
	testb	$32, 17(%rbx)
	je	.L38324
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L38325
	movzwl	60(%rbx), %r8d
	movq	integer_types+40(%rip), %rbx
	movzwl	60(%rbx), %ecx
	andl	$511, %r8d
	andl	$511, %ecx
	cmpl	%ecx, %r8d
	je	.L38325
.L38324:
	movq	integer_types+40(%rip), %rdi
.L42299:
	movq	%r12, %rsi
.L42300:
	call	convert
.L42235:
	movq	%rax, %rbx
.L42226:
	movq	global_trees(%rip), %r8
.L38294:
	movq	%rbx, %r12
	jmp	.L38229
.L38325:
	movq	integer_types+48(%rip), %rdi
	jmp	.L42299
.L38323:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L38326
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L38326
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%rbx)
	je	.L42559
.L38326:
	cmpl	$5, %r13d
	je	.L42560
.L38327:
	movq	%r12, %rbx
	jmp	.L42226
.L42560:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L42227:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L38294
.L42559:
	movq	global_trees+200(%rip), %rdi
	jmp	.L42299
.L42558:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L38318
	movq	integer_types+40(%rip), %r14
	movq	40(%rdx), %rdi
	movzwl	60(%r14), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L38318
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L38324
	testb	$32, 17(%rbx)
	jne	.L38325
	jmp	.L38324
.L42557:
	movq	integer_types+40(%rip), %rsi
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %r13d
	movzwl	60(%rsi), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r13d, %r13d
	jne	.L38317
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L38316
.L38317:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L38316:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L42299
.L38310:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L38309
.L42556:
	movq	32(%r12), %rsi
	movq	8(%r12), %r11
	cmpq	%r11, 8(%rsi)
	jne	.L38305
.L38308:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L42561
.L42167:
	movq	32(%r12), %rsi
	jmp	.L38308
.L42561:
	cmpb	$115, %cl
	jne	.L38305
	movq	32(%rsi), %r9
	movq	8(%r12), %r10
	cmpq	%r10, 8(%r9)
	movq	%r9, %rsi
	je	.L38308
	jmp	.L38305
.L42555:
	movl	pedantic(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L38300
	cmpb	$51, 48(%r15)
	je	.L38300
	cmpq	$0, current_function_decl(%rip)
	je	.L38302
	movzbl	17(%r15), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L42562
.L38302:
	movq	%r15, %rsi
.L38303:
	movq	%rsi, %r12
.L38300:
	movq	8(%r12), %rbx
	jmp	.L38296
.L42562:
	movq	104(%r15), %rax
	testq	%rax, %rax
	je	.L38302
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L38302
	testb	$2, 17(%rax)
	je	.L38302
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L38303
	jmp	.L38302
.L42554:
	movq	104(%r15), %r12
	jmp	.L38296
.L38233:
	movzbl	16(%r15), %edx
	xorl	%r14d, %r14d
	movl	%r13d, %r8d
	cmpb	$116, %dl
	je	.L42007
	cmpb	$115, %dl
	je	.L42563
	movzbl	16(%r15), %ecx
.L38235:
	movzbl	%cl, %r10d 
	movzbl	tree_code_type(%r10), %eax
	cmpb	$60, %al
	je	.L38241
	cmpb	$49, %al
	je	.L38241
	cmpb	$50, %al
	je	.L38241
	cmpb	$101, %al
	je	.L38241
.L38240:
	cmpl	$23, %r8d
	je	.L42564
	cmpl	$18, %r8d
	jne	.L38327
	movzbl	%cl, %r9d 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%r9), %eax
	movq	8(%rdi), %r13
	cmpb	$114, %al
	je	.L38246
	cmpb	$100, %al
	je	.L38246
.L38245:
	movzbl	17(%rdi), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %ebx
	shrb	$3, %r10b
	shrb	$4, %bl
	andl	$1, %r10d
	andl	%ebx, %r9d
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rdi), %r10d
	movzbl	16(%rdi), %edi
	movl	%r10d, %esi
	shrb	$5, %sil
	andl	$1, %esi
	sall	$2, %esi
	orl	%esi, %r9d
	xorl	%esi, %esi
	cmpb	$20, %dil
	je	.L42565
.L38249:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L38248
	testl	%edx, %edx
	jne	.L38248
	testl	%r11d, %r11d
	je	.L38247
.L38248:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%ebx, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L42566
.L38251:
	leal	0(,%rcx,8), %edi
	orl	%edi, %esi
	movq	%r13, %rdi
	orl	%edx, %esi
	leal	(%r11,%r11), %edx
	orl	%edx, %esi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L38247:
	cmpb	$41, %cl
	je	.L42567
	cmpb	$47, %cl
	je	.L42568
	xorl	%ebx, %ebx
	testl	%r14d, %r14d
	je	.L42569
.L38290:
	movl	flag_isoc99(%rip), %r14d
	testl	%r14d, %r14d
	jne	.L38291
	testl	%ebx, %ebx
	je	.L38327
.L38291:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L42570
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L42300
.L42570:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L42227
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %ecx
	andb	$1, %cl
	addb	%cl, %cl
	andb	$-4, %r12b
	orb	%cl, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L42226
.L42569:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L38290
.L42568:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L38255
	cmpl	$18, %r14d
	je	.L38255
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L42571
	movl	optimize(%rip), %r8d
	testl	%r8d, %r8d
	je	.L38258
	cmpb	$34, %dl
	je	.L42572
.L38258:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L42165
	cmpb	$115, %dl
	je	.L42573
.L38267:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L38272
	cmpb	$49, %al
	je	.L38272
	cmpb	$50, %al
	je	.L38272
	cmpb	$101, %al
	je	.L38272
.L38271:
	cmpl	$10, %r14d
	je	.L42574
	cmpb	$39, %dl
	je	.L42575
.L38280:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L38285
	testb	$32, 17(%r13)
	je	.L38286
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L38287
	movq	integer_types+40(%rip), %r10
	movzwl	60(%r13), %r11d
	movzwl	60(%r10), %r13d
	andl	$511, %r11d
	andl	$511, %r13d
	cmpl	%r13d, %r11d
	je	.L38287
.L38286:
	movq	integer_types+40(%rip), %rdi
.L42225:
	movq	%rbx, %rsi
	call	convert
.L38256:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L42235
.L38287:
	movq	integer_types+48(%rip), %rdi
	jmp	.L42225
.L38285:
	movl	flag_traditional(%rip), %r9d
	testl	%r9d, %r9d
	je	.L38288
	movl	flag_allow_single_precision(%rip), %edi
	testl	%edi, %edi
	jne	.L38288
	movq	global_trees+192(%rip), %rsi
	cmpq	%rsi, 128(%r13)
	je	.L42576
.L38288:
	cmpl	$5, %r14d
	je	.L42577
	movq	%rbx, %rax
	jmp	.L38256
.L42577:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L38256
.L42576:
	movq	global_trees+200(%rip), %rdi
	jmp	.L42225
.L42575:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L38280
	movq	integer_types+40(%rip), %r8
	movq	40(%rdx), %rdi
	movzwl	60(%r8), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L38280
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L38286
	testb	$32, 17(%r13)
	jne	.L38287
	jmp	.L38286
.L42574:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L38279
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L38278
.L38279:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L38278:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L42225
.L38272:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L38271
.L42573:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L38267
.L38270:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L42578
.L42165:
	movq	32(%rbx), %rsi
	jmp	.L38270
.L42578:
	cmpb	$115, %dl
	jne	.L38267
	movq	32(%rsi), %rdi
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%rdi)
	movq	%rdi, %rsi
	je	.L38270
	jmp	.L38267
.L42572:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L38262
	cmpb	$51, 48(%rbx)
	je	.L38262
	cmpq	$0, current_function_decl(%rip)
	je	.L38264
	movzbl	17(%rbx), %r11d
	andb	$24, %r11b
	cmpb	$16, %r11b
	je	.L42579
.L38264:
	movq	%rbx, %rsi
.L38265:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L38262:
	movq	%rax, %r13
	jmp	.L38258
.L42579:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L38264
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L38264
	testb	$2, 17(%rax)
	je	.L38264
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L38265
	jmp	.L38264
.L42571:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L38258
.L38255:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L38256
.L42567:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L42300
.L42566:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L38251
.L42565:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L38249
.L38246:
	movzbl	17(%r12), %ebx
	movl	$1, %r11d
	movl	%ebx, %edx
	shrb	$3, %bl
	shrb	$4, %dl
	andl	%ebx, %r11d
	andl	$1, %edx
	jmp	.L38245
.L42564:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L42235
.L38241:
	movl	24(%r15), %eax
	movl	%eax, 24(%r12)
	jmp	.L38240
.L42563:
	movq	32(%r15), %rsi
	cmpq	%rdi, 8(%rsi)
	je	.L42007
	movl	$115, %ecx
	jmp	.L38235
.L42007:
	movq	32(%r15), %rsi
	movl	%edx, %ecx
.L38239:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r14d
	cmpb	$116, %cl
	jne	.L42580
	movq	32(%r12), %rsi
	jmp	.L38239
.L42580:
	cmpb	$115, %cl
	jne	.L38235
	movq	32(%rsi), %rsi
	movq	8(%r12), %r11
	cmpq	%r11, 8(%rsi)
	je	.L38239
	jmp	.L38235
.L42553:
	movq	-216(%rbp), %rsi
	cmpb	$18, 16(%rsi)
	jne	.L38231
	movq	8(%rsi), %r8
	cmpb	$6, 16(%r8)
	jne	.L38231
	jmp	.L42160
.L38226:
	movslq	%eax,%rsi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L42224
	.p2align 6,,7
.L38222:
	movq	constructor_fields(%rip), %r9
	movq	40(%r9), %rdx
	movq	(%r9), %rbx
	movq	%rdx, constructor_bit_index(%rip)
	movq	%rbx, constructor_unfilled_fields(%rip)
	jmp	.L39164
.L42525:
	movq	-216(%rbp), %r11
	movq	8(%r11), %r14
	cmpb	$6, 16(%r14)
	jne	.L38218
	movl	-180(%rbp), %r10d
	testl	%r10d, %r10d
	je	.L38218
	movq	-48(%rbp), %r15
	jmp	.L38219
	.p2align 6,,7
.L42524:
	movq	%r15, %rdi
	call	real_zerop
	testl	%eax, %eax
	jne	.L38216
.L38217:
	movl	$.LC167, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L38216
.L42523:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC166, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r15
	xorl	%r12d, %r12d
	cmpq	%r15, %r14
	movq	%r14, %rbx
	movq	%r15, %r13
	jae	.L42003
.L38197:
	cmpl	$3, (%rbx)
	je	.L42581
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L38193:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L38197
.L42003:
	movslq	%r12d,%rbx
	movq	%r14, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L42098
.L38211:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L42582
	cmpl	$2, %eax
	je	.L42583
.L38205:
	movq	8(%r12), %r13
	movzbl	(%r13), %r9d
	leaq	1(%r13), %rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	je	.L38201
.L38210:
	movzbl	(%rcx), %edi
	incq	%rbx
	incq	%rcx
	testb	%dil, %dil
	movb	%dil, (%rbx)
	jne	.L38210
.L38201:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L38211
	jmp	.L42098
.L42583:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L38205
.L42582:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L38201
	.p2align 6,,7
.L42581:
	addl	$25, %r12d
	jmp	.L38193
	.p2align 6,,7
.L42337:
	movq	constructor_fields(%rip), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rdi
	je	.L42584
	movq	8(%rcx), %rdx
	movq	global_trees(%rip), %r13
	cmpq	%r13, %rdx
	movq	%rdx, -192(%rbp)
	movq	%r13, %rsi
	je	.L37859
	movq	128(%rdx), %r14
	movq	%r14, -192(%rbp)
.L37859:
	movq	-192(%rbp), %rax
	movzbl	16(%rax), %edx
	cmpl	$18, %edx
	je	.L42585
.L37860:
	testq	%r15, %r15
	je	.L37889
	cmpl	$18, %edx
	je	.L42586
.L37885:
	testq	%r15, %r15
	je	.L37889
	movl	constructor_no_implicit(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L37886
	cmpq	%rsi, %r15
	je	.L37886
	movq	8(%r15), %r13
	movq	-192(%rbp), %r11
	cmpq	%r11, 128(%r13)
	je	.L37886
	cmpl	$20, %edx
	je	.L38515
	cmpl	$18, %edx
	je	.L38515
	cmpl	$21, %edx
	je	.L38515
.L37886:
	testq	%r15, %r15
	je	.L37889
	movq	72(%rdi), %rax
	movl	$.LC159, %r12d
	testq	%rax, %rax
	je	.L37891
	movq	32(%rax), %r12
.L37891:
	movq	spelling(%rip), %rdx
	movq	spelling_base(%rip), %rdi
	movl	spelling_size(%rip), %eax
	movq	%rdx, %rcx
	subq	%rdi, %rcx
	movq	%rcx, %rbx
	shrq	$4, %rbx
	cmpl	%eax, %ebx
	jl	.L37892
	addl	$10, %eax
	testq	%rdi, %rdi
	movl	%eax, spelling_size(%rip)
	jne	.L37893
	movslq	%eax,%rdi
	salq	$4, %rdi
	call	xmalloc
.L42207:
	movslq	%ebx,%rdx
	movq	%rax, spelling_base(%rip)
	salq	$4, %rdx
	addq	spelling_base(%rip), %rdx
	movq	%rdx, spelling(%rip)
.L37892:
	movq	constructor_fields(%rip), %r14
	movq	%r12, 8(%rdx)
	movl	$2, (%rdx)
	addq	$16, %rdx
	movq	%r15, %r12
	movq	%rdx, spelling(%rip)
	movq	%r14, -208(%rbp)
	movq	8(%r15), %rdi
	movzbl	16(%rdi), %eax
	movq	%rdi, %rdx
	cmpb	$23, %al
	je	.L37897
	cmpb	$18, %al
	je	.L42587
.L42149:
	movq	global_trees(%rip), %r8
.L37896:
	cmpb	$-86, 16(%r12)
	je	.L42588
.L37995:
	cmpq	%r8, %r12
	je	.L42589
	testb	$2, 17(%r12)
	jne	.L37998
	movl	$0, constructor_constant(%rip)
.L37997:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L38002
	testb	$2, 17(%r12)
	je	.L42590
.L38002:
	movl	require_constant_elements(%rip), %eax
	testl	%eax, %eax
	jne	.L42591
.L38027:
	cmpq	$0, -208(%rbp)
	je	.L38029
	movq	-208(%rbp), %rbx
	movq	8(%rbx), %rax
	cmpq	global_trees(%rip), %rax
	je	.L38031
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L42592
.L38029:
	movq	-192(%rbp), %rdi
	movl	require_constant_value(%rip), %edx
	movq	%r12, %rsi
	movl	require_constant_elements(%rip), %ecx
	call	digest_init
	cmpq	global_trees(%rip), %rax
	movq	%rax, -200(%rbp)
	je	.L42593
	movq	constructor_type(%rip), %rdi
	cmpb	$18, 16(%rdi)
	je	.L42594
.L38033:
	cmpb	$20, 16(%rdi)
	je	.L42595
.L38054:
	cmpb	$21, 16(%rdi)
	je	.L42596
.L38053:
	cmpq	$0, -208(%rbp)
	je	.L38121
	movq	-208(%rbp), %rsi
	cmpb	$25, 16(%rsi)
	je	.L42597
.L38121:
	movq	-208(%rbp), %rdi
	movq	-200(%rbp), %rsi
	movq	constructor_elements(%rip), %rdx
	call	tree_cons
	movq	constructor_type(%rip), %rbx
	movq	%rax, constructor_elements(%rip)
	movzbl	16(%rbx), %eax
	cmpb	$18, %al
	je	.L42598
	cmpb	$20, %al
	je	.L42599
	cmpb	$21, 16(%rbx)
	je	.L42600
.L38123:
	movl	$1, %eax
	testl	%eax, %eax
	je	.L38031
	movq	constructor_pending_elts(%rip), %rbx
.L38133:
	xorl	%r14d, %r14d
	testq	%rbx, %rbx
	je	.L38135
.L38169:
	movq	constructor_type(%rip), %r9
	movzbl	16(%r9), %eax
	cmpb	$18, %al
	je	.L42601
	subb	$20, %al
	cmpb	$1, %al
	ja	.L38134
	movq	constructor_unfilled_fields(%rip), %rdi
	testq	%rdi, %rdi
	je	.L38135
	call	bit_position
	movq	32(%rbx), %rdi
	movq	%rax, %r13
	call	bit_position
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L38155
	movq	32(%rbx), %rdx
	movq	40(%rbx), %rdi
	movq	%rdx, constructor_unfilled_fields(%rip)
	movq	8(%rdx), %rsi
.L42223:
	xorl	%ecx, %ecx
	call	output_init_element
.L38134:
	testq	%rbx, %rbx
	jne	.L38169
.L38135:
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L38031
	testq	%r14, %r14
	je	.L38031
	movq	constructor_type(%rip), %r8
	movzbl	16(%r8), %edx
	leal	-20(%rdx), %esi
	cmpb	$1, %sil
	jbe	.L42602
	cmpb	$18, %dl
	jne	.L38133
	movq	%r14, constructor_unfilled_index(%rip)
	jmp	.L38133
.L42602:
	movq	%r14, constructor_unfilled_fields(%rip)
	jmp	.L38133
	.p2align 6,,7
.L38031:
	movslq	constructor_depth(%rip),%r14
	movq	constructor_fields(%rip), %rcx
	salq	$4, %r14
	addq	spelling_base(%rip), %r14
	movq	%r14, spelling(%rip)
.L38176:
	movq	(%rcx), %rcx
	testq	%rcx, %rcx
	movq	%rcx, constructor_fields(%rip)
	je	.L38188
	testb	$2, 53(%rcx)
	je	.L38188
	cmpq	$0, 72(%rcx)
	jne	.L38188
.L38187:
	movq	constructor_fields(%rip), %rdx
	movq	(%rdx), %rcx
	testq	%rcx, %rcx
	movq	%rcx, constructor_fields(%rip)
	je	.L38188
	testb	$2, 53(%rcx)
	je	.L38188
	cmpq	$0, 72(%rcx)
	jne	.L38188
	jmp	.L38187
.L38155:
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L38157
.L42297:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.L38158
.L42222:
	movq	%rax, %rbx
	jmp	.L38134
.L38158:
	movq	32(%rbx), %r14
	jmp	.L38135
	.p2align 6,,7
.L38157:
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L42222
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L38164
	cmpq	%rbx, 8(%rax)
	je	.L38167
.L38164:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L38135
	movq	32(%rax), %rdi
	call	bit_position
	movq	%r13, %rdi
	movq	%rax, %rsi
.L42298:
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L38134
	jmp	.L38158
	.p2align 6,,7
.L38167:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L38164
	cmpq	%rbx, 8(%rax)
	je	.L38167
	jmp	.L38164
	.p2align 6,,7
.L42601:
	movq	32(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	je	.L38138
	movq	constructor_type(%rip), %r13
	movq	40(%rbx), %rdi
	movq	constructor_unfilled_index(%rip), %rdx
	movq	8(%r13), %rsi
	jmp	.L42223
.L38138:
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rbx), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L42297
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jne	.L42222
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L38147
	cmpq	%rbx, 8(%rax)
	je	.L38150
.L38147:
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L38135
	movq	constructor_unfilled_index(%rip), %rdi
	movq	32(%rax), %rsi
	jmp	.L42298
	.p2align 6,,7
.L38150:
	movq	16(%rdx), %rax
	movq	%rdx, %rbx
	testq	%rax, %rax
	movq	%rax, %rdx
	je	.L38147
	cmpq	%rbx, 8(%rax)
	je	.L38150
	jmp	.L38147
.L42600:
	movq	$0, constructor_unfilled_fields(%rip)
	jmp	.L38123
.L42599:
	movq	constructor_unfilled_fields(%rip), %r12
	movq	(%r12), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L38123
	testb	$2, 53(%rdx)
	je	.L38123
	cmpq	$0, 72(%rdx)
	jne	.L38123
.L38129:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L38123
	testb	$2, 53(%rdx)
	je	.L38123
	cmpq	$0, 72(%rdx)
	jne	.L38123
	jmp	.L38129
.L42598:
	movq	constructor_unfilled_index(%rip), %rsi
	movq	global_trees+144(%rip), %rdx
	movl	$59, %edi
	call	size_binop
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L38123
.L42597:
	movq	%rsi, %rdi
	call	copy_node
	movq	%rax, -208(%rbp)
	jmp	.L38121
.L42596:
	movq	constructor_elements(%rip), %rax
	testq	%rax, %rax
	je	.L38053
	movq	32(%rax), %rdx
	testb	$1, 17(%rdx)
	jne	.L42603
.L38096:
	movq	$0, constructor_elements(%rip)
	jmp	.L38053
.L42603:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r14
	movq	%r14, %rbx
	movq	%rax, %r13
	jae	.L41992
.L38103:
	cmpl	$3, (%rbx)
	je	.L42604
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L38099:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L38103
.L41992:
	movslq	%r12d,%rsi
	movq	%r14, %r12
	addq	$16, %rsi
	andq	$-16, %rsi
	subq	%rsi, %rsp
	cmpq	%r13, %r14
	movq	%rsp, -72(%rbp)
	movq	%rsp, %rbx
	jae	.L41994
.L38117:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L42605
	cmpl	$2, %eax
	je	.L42606
.L38111:
	movq	8(%r12), %r11
	movzbl	(%r11), %r8d
	leaq	1(%r11), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L38107
.L38116:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L38116
.L38107:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L38117
.L41994:
	movb	$0, (%rbx)
	movq	-72(%rbp), %rbx
	cmpb	$0, (%rbx)
	je	.L38096
	movl	$.LC142, %edi
	movq	%rbx, %rsi
	xorl	%eax, %eax
	call	warning
	jmp	.L38096
.L42606:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L38111
.L42605:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L38107
.L42604:
	addl	$25, %r12d
	jmp	.L38099
.L42595:
	movl	constructor_incremental(%rip), %r9d
	testl	%r9d, %r9d
	je	.L38056
	movq	constructor_unfilled_fields(%rip), %rdx
	cmpq	%rdx, -208(%rbp)
	je	.L38054
	testq	%rdx, %rdx
	jne	.L38057
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L38064
.L41986:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	je	.L42607
.L38084:
	cmpb	$18, 16(%rdi)
	je	.L42608
.L38090:
	movl	$0, constructor_incremental(%rip)
.L38056:
	movq	-208(%rbp), %rdi
	movq	-200(%rbp), %rsi
	call	add_pending_init
	jmp	.L38031
.L42608:
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L42609
	movq	global_trees+136(%rip), %rax
.L42221:
	movq	%rax, constructor_unfilled_index(%rip)
	jmp	.L38090
.L42609:
	movq	sizetype_tab+24(%rip), %rdi
	movq	104(%rax), %rsi
	call	convert
	jmp	.L42221
.L42607:
	movq	24(%rdi), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L38090
	testb	$2, 53(%rdx)
	je	.L38090
	cmpq	$0, 72(%rdx)
	jne	.L38090
.L38070:
	movq	constructor_unfilled_fields(%rip), %r13
	movq	(%r13), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L38090
	testb	$2, 53(%rdx)
	je	.L38090
	cmpq	$0, 72(%rdx)
	jne	.L38090
	jmp	.L38070
.L38064:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L38064
	movq	constructor_type(%rip), %rdi
	jmp	.L41986
.L38057:
	movq	-208(%rbp), %rdi
	call	bit_position
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	%rax, %r14
	call	bit_position
	movq	%r14, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L38056
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L38077
	cmpb	$18, %al
	jne	.L38056
.L38077:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L38083
.L41989:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L38084
	movq	24(%rdi), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L38090
	testb	$2, 53(%rdx)
	je	.L38090
	cmpq	$0, 72(%rdx)
	jne	.L38090
.L38089:
	movq	constructor_unfilled_fields(%rip), %rdi
	movq	(%rdi), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L38090
	testb	$2, 53(%rdx)
	je	.L38090
	cmpq	$0, 72(%rdx)
	jne	.L38090
	jmp	.L38089
.L38083:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L38083
	movq	constructor_type(%rip), %rdi
	jmp	.L41989
.L42594:
	movl	constructor_incremental(%rip), %eax
	testl	%eax, %eax
	je	.L38056
	movq	-208(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L42157
	movl	constructor_incremental(%rip), %r12d
	testl	%r12d, %r12d
	je	.L38056
	movq	-208(%rbp), %rdi
	movq	constructor_unfilled_index(%rip), %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L38056
	movq	constructor_type(%rip), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$20, %al
	je	.L38036
	cmpb	$18, %al
	jne	.L38056
.L38036:
	movq	constructor_elements(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L38042
.L41983:
	cmpb	$20, 16(%rdi)
	movq	$0, constructor_elements(%rip)
	jne	.L38084
	movq	24(%rdi), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L38090
	testb	$2, 53(%rdx)
	je	.L38090
	cmpq	$0, 72(%rdx)
	jne	.L38090
.L38048:
	movq	constructor_unfilled_fields(%rip), %rcx
	movq	(%rcx), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L38090
	testb	$2, 53(%rdx)
	je	.L38090
	cmpq	$0, 72(%rdx)
	jne	.L38090
	jmp	.L38048
.L38042:
	movq	24(%rbx), %rdi
	movq	32(%rbx), %rsi
	call	add_pending_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L38042
	movq	constructor_type(%rip), %rdi
	jmp	.L41983
.L42157:
	movq	constructor_type(%rip), %rdi
	jmp	.L38033
.L42593:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L38031
.L42592:
	call	integer_zerop
	testl	%eax, %eax
	je	.L38029
	movq	constructor_type(%rip), %r11
	cmpb	$18, 16(%r11)
	je	.L38031
	movq	-208(%rbp), %r10
	cmpq	$0, (%r10)
	jne	.L38031
	jmp	.L38029
.L42591:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	jne	.L38027
	movl	$.LC148, %edi
	xorl	%eax, %eax
	call	pedwarn
	jmp	.L38027
.L42590:
	movl	$.LC42, %edi
	xorl	%eax, %eax
	movl	$.LC146, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rdi
	xorl	%r12d, %r12d
	cmpq	%rdi, %r14
	movq	%r14, %rbx
	movq	%rdi, %r13
	jae	.L41978
.L38009:
	cmpl	$3, (%rbx)
	je	.L42610
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L38005:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L38009
.L41978:
	movslq	%r12d,%rdx
	movq	%r14, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, -64(%rbp)
	movq	%rsp, %rbx
	jae	.L41980
.L38023:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L42611
	cmpl	$2, %eax
	je	.L42612
.L38017:
	movq	8(%r12), %r14
	movzbl	(%r14), %esi
	leaq	1(%r14), %rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	je	.L38013
.L38022:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L38022
.L38013:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L38023
.L41980:
	movb	$0, (%rbx)
	movq	-64(%rbp), %rsi
	cmpb	$0, (%rsi)
	jne	.L42613
.L38026:
	movq	global_trees(%rip), %r12
	jmp	.L38027
.L42613:
	movl	$.LC142, %edi
	xorl	%eax, %eax
	call	error
	jmp	.L38026
.L42612:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L38017
.L42611:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L38013
.L42610:
	addl	$25, %r12d
	jmp	.L38005
.L37998:
	movq	8(%r12), %rsi
	movq	%r12, %rdi
	call	initializer_constant_valid_p
	testq	%rax, %rax
	je	.L38001
	movq	constructor_type(%rip), %r9
	movzbl	16(%r9), %r13d
	subb	$20, %r13b
	cmpb	$1, %r13b
	ja	.L37997
	movq	-208(%rbp), %rax
	testb	$2, 53(%rax)
	je	.L37997
	cmpb	$25, 16(%r12)
	je	.L37997
.L38001:
	movl	$0, constructor_simple(%rip)
	jmp	.L37997
.L42589:
	movl	$1, constructor_erroneous(%rip)
	jmp	.L37997
.L42588:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L37995
	movl	flag_isoc99(%rip), %eax
	testl	%eax, %eax
	jne	.L37995
	movl	$1, %r11d
	testl	%r11d, %r11d
	je	.L37995
	movq	32(%r12), %rcx
	movq	32(%rcx), %r10
	movq	104(%r10), %r12
	jmp	.L37995
.L42587:
	cmpb	$29, 16(%r15)
	je	.L42614
.L37898:
	movq	-192(%rbp), %r8
	movq	128(%rdx), %rdi
	movq	128(%r8), %rsi
	call	comptypes
	testl	%eax, %eax
	jne	.L42149
	movq	8(%r15), %rdi
.L37897:
	movzbl	16(%rdi), %r13d
	movq	%rdi, %rbx
	cmpl	$23, %r13d
	je	.L37900
	cmpl	$18, %r13d
	je	.L37900
	movzbl	16(%r15), %eax
	cmpb	$32, %al
	je	.L42615
	movl	optimize(%rip), %edi
	testl	%edi, %edi
	je	.L37963
	cmpb	$34, %al
	je	.L42616
.L37963:
	movzbl	16(%r12), %ecx
	movq	%r12, %rdx
	cmpb	$116, %cl
	je	.L42156
	cmpb	$115, %cl
	je	.L42617
.L37972:
	movzbl	%cl, %r10d 
	movzbl	tree_code_type(%r10), %eax
	cmpb	$60, %al
	je	.L37977
	cmpb	$49, %al
	je	.L37977
	cmpb	$50, %al
	je	.L37977
	cmpb	$101, %al
	je	.L37977
.L37976:
	cmpl	$10, %r13d
	je	.L42618
	cmpb	$39, %cl
	je	.L42619
.L37985:
	movq	%rbx, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L37990
	testb	$32, 17(%rbx)
	je	.L37991
	movl	flag_traditional(%rip), %edx
	testl	%edx, %edx
	jne	.L37992
	movzwl	60(%rbx), %esi
	movq	integer_types+40(%rip), %rbx
	movzwl	60(%rbx), %edi
	andl	$511, %esi
	andl	$511, %edi
	cmpl	%edi, %esi
	je	.L37992
.L37991:
	movq	integer_types+40(%rip), %rdi
.L42295:
	movq	%r12, %rsi
.L42296:
	call	convert
.L42218:
	movq	%rax, %rbx
.L42209:
	movq	global_trees(%rip), %r8
.L37961:
	movq	%rbx, %r12
	jmp	.L37896
.L37992:
	movq	integer_types+48(%rip), %rdi
	jmp	.L42295
.L37990:
	movl	flag_traditional(%rip), %r14d
	testl	%r14d, %r14d
	je	.L37993
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L37993
	movq	global_trees+192(%rip), %r8
	cmpq	%r8, 128(%rbx)
	je	.L42620
.L37993:
	cmpl	$5, %r13d
	je	.L42621
.L37994:
	movq	%r12, %rbx
	jmp	.L42209
.L42621:
	movl	$.LC0, %edi
	xorl	%eax, %eax
	call	error
.L42210:
	movq	global_trees(%rip), %r8
	movq	%r8, %rbx
	jmp	.L37961
.L42620:
	movq	global_trees+200(%rip), %rdi
	jmp	.L42295
.L42619:
	movq	40(%r12), %rdx
	testb	$2, 53(%rdx)
	je	.L37985
	movq	integer_types+40(%rip), %r9
	movq	40(%rdx), %rdi
	movzwl	60(%r9), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L37985
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L37991
	testb	$32, 17(%rbx)
	jne	.L37992
	jmp	.L37991
.L42618:
	movq	integer_types+40(%rip), %r13
	movzwl	60(%rbx), %edx
	movl	flag_traditional(%rip), %ecx
	movzwl	60(%r13), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%ecx, %ecx
	jne	.L37984
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L37983
.L37984:
	testb	$32, 17(%rbx)
	movl	$1, %eax
	cmovne	%eax, %esi
.L37983:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L42295
.L37977:
	movl	24(%rdx), %eax
	movl	%eax, 24(%r12)
	jmp	.L37976
.L42617:
	movq	32(%r12), %rsi
	movq	8(%r12), %r14
	cmpq	%r14, 8(%rsi)
	jne	.L37972
.L37975:
	movzbl	16(%rsi), %ecx
	movq	%rsi, %r12
	cmpb	$116, %cl
	jne	.L42622
.L42156:
	movq	32(%r12), %rsi
	jmp	.L37975
.L42622:
	cmpb	$115, %cl
	jne	.L37972
	movq	32(%rsi), %r11
	movq	8(%r12), %r8
	cmpq	%r8, 8(%r11)
	movq	%r11, %rsi
	je	.L37975
	jmp	.L37972
.L42616:
	movl	pedantic(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L37967
	cmpb	$51, 48(%r15)
	je	.L37967
	cmpq	$0, current_function_decl(%rip)
	je	.L37969
	movzbl	17(%r15), %esi
	andb	$24, %sil
	cmpb	$16, %sil
	je	.L42623
.L37969:
	movq	%r15, %rsi
.L37970:
	movq	%rsi, %r12
.L37967:
	movq	8(%r12), %rbx
	jmp	.L37963
.L42623:
	movq	104(%r15), %rax
	testq	%rax, %rax
	je	.L37969
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L37969
	testb	$2, 17(%rax)
	je	.L37969
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L37970
	jmp	.L37969
.L42615:
	movq	104(%r15), %r12
	jmp	.L37963
.L37900:
	movzbl	16(%r15), %edx
	xorl	%r14d, %r14d
	movl	%r13d, %r8d
	cmpb	$116, %dl
	je	.L41974
	cmpb	$115, %dl
	je	.L42624
	movzbl	16(%r15), %ecx
.L37902:
	movzbl	%cl, %r10d 
	movzbl	tree_code_type(%r10), %eax
	cmpb	$60, %al
	je	.L37908
	cmpb	$49, %al
	je	.L37908
	cmpb	$50, %al
	je	.L37908
	cmpb	$101, %al
	je	.L37908
.L37907:
	cmpl	$23, %r8d
	je	.L42625
	cmpl	$18, %r8d
	jne	.L37994
	movzbl	%cl, %esi 
	xorl	%edx, %edx
	xorl	%r11d, %r11d
	movzbl	tree_code_type(%rsi), %eax
	movq	8(%rdi), %r13
	cmpb	$114, %al
	je	.L37913
	cmpb	$100, %al
	je	.L37913
.L37912:
	movzbl	17(%rdi), %r8d
	movl	$1, %r9d
	movl	%r8d, %r10d
	movl	%r8d, %esi
	shrb	$3, %r10b
	shrb	$4, %sil
	andl	$1, %r10d
	andl	%esi, %r9d
	xorl	%esi, %esi
	addl	%r10d, %r10d
	orl	%r10d, %r9d
	movzbl	62(%rdi), %r10d
	movzbl	16(%rdi), %edi
	movl	%r10d, %ebx
	shrb	$5, %bl
	andl	$1, %ebx
	sall	$2, %ebx
	orl	%ebx, %r9d
	cmpb	$20, %dil
	je	.L42626
.L37916:
	leal	0(,%rsi,8), %ebx
	orl	%ebx, %r9d
	jne	.L37915
	testl	%edx, %edx
	jne	.L37915
	testl	%r11d, %r11d
	je	.L37914
.L37915:
	movl	%r8d, %ebx
	shrb	$5, %r10b
	movl	$1, %esi
	shrb	$3, %r8b
	shrb	$4, %bl
	movl	%r10d, %ecx
	movl	%r8d, %r9d
	andl	%ebx, %esi
	andl	$1, %ecx
	andl	$1, %r9d
	sall	$2, %ecx
	addl	%r9d, %r9d
	orl	%r9d, %esi
	orl	%ecx, %esi
	xorl	%ecx, %ecx
	cmpb	$20, %dil
	je	.L42627
.L37918:
	leal	0(,%rcx,8), %r8d
	leal	(%r11,%r11), %edi
	orl	%r8d, %esi
	orl	%edx, %esi
	orl	%edi, %esi
	movq	%r13, %rdi
	call	c_build_qualified_type
	movzbl	16(%r12), %ecx
	movq	%rax, %r13
.L37914:
	cmpb	$41, %cl
	je	.L42628
	cmpb	$47, %cl
	je	.L42629
	xorl	%ebx, %ebx
	testl	%r14d, %r14d
	je	.L42630
.L37957:
	movl	flag_isoc99(%rip), %edx
	testl	%edx, %edx
	jne	.L37958
	testl	%ebx, %ebx
	je	.L37994
.L37958:
	movq	%r13, %rdi
	call	build_pointer_type
	cmpb	$34, 16(%r12)
	movq	%rax, %rbx
	je	.L42631
	movl	$121, %edi
	movq	%r12, %rsi
	movl	$1, %edx
	call	build_unary_op
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L42296
.L42631:
	movl	$121, %edi
	movq	%rax, %rsi
	movq	%r12, %rdx
	call	build1
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	mark_addressable
	testl	%eax, %eax
	je	.L42210
	movq	%r12, %rdi
	call	staticp
	movzbl	17(%rbx), %r12d
	movl	%eax, %r9d
	andb	$1, %r9b
	addb	%r9b, %r9b
	andb	$-4, %r12b
	orb	%r9b, %r12b
	movb	%r12b, 17(%rbx)
	jmp	.L42209
.L42630:
	movq	%r12, %rdi
	call	lvalue_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebx
	jmp	.L37957
.L42629:
	movq	40(%r12), %rbx
	movq	8(%rbx), %r13
	movzbl	16(%r13), %r14d
	movq	%r13, %rax
	cmpl	$23, %r14d
	je	.L37922
	cmpl	$18, %r14d
	je	.L37922
	movzbl	16(%rbx), %edx
	cmpb	$32, %dl
	je	.L42632
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L37925
	cmpb	$34, %dl
	je	.L42633
.L37925:
	cmpb	$116, %dl
	movq	%rbx, %rcx
	je	.L42154
	cmpb	$115, %dl
	je	.L42634
.L37934:
	movzbl	%dl, %esi 
	movzbl	tree_code_type(%rsi), %eax
	cmpb	$60, %al
	je	.L37939
	cmpb	$49, %al
	je	.L37939
	cmpb	$50, %al
	je	.L37939
	cmpb	$101, %al
	je	.L37939
.L37938:
	cmpl	$10, %r14d
	je	.L42635
	cmpb	$39, %dl
	je	.L42636
.L37947:
	movq	%r13, %rdi
	call	c_promoting_integer_type_p
	testb	%al, %al
	je	.L37952
	testb	$32, 17(%r13)
	je	.L37953
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	jne	.L37954
	movzwl	60(%r13), %r10d
	movq	integer_types+40(%rip), %r13
	movzwl	60(%r13), %r11d
	andl	$511, %r10d
	andl	$511, %r11d
	cmpl	%r11d, %r10d
	je	.L37954
.L37953:
	movq	integer_types+40(%rip), %rdi
.L42208:
	movq	%rbx, %rsi
	call	convert
.L37923:
	movq	8(%rax), %rsi
	movq	32(%r12), %rdx
	movq	%rax, %rcx
	movl	$47, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L42218
.L37954:
	movq	integer_types+48(%rip), %rdi
	jmp	.L42208
.L37952:
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L37955
	movl	flag_allow_single_precision(%rip), %eax
	testl	%eax, %eax
	jne	.L37955
	movq	global_trees+192(%rip), %rax
	cmpq	%rax, 128(%r13)
	je	.L42637
.L37955:
	cmpl	$5, %r14d
	je	.L42638
	movq	%rbx, %rax
	jmp	.L37923
.L42638:
	xorl	%eax, %eax
	movl	$.LC0, %edi
	call	error
	movq	global_trees(%rip), %rax
	jmp	.L37923
.L42637:
	movq	global_trees+200(%rip), %rdi
	jmp	.L42208
.L42636:
	movq	40(%rbx), %rdx
	testb	$2, 53(%rdx)
	je	.L37947
	movq	integer_types+40(%rip), %r8
	movq	40(%rdx), %rdi
	movzwl	60(%r8), %esi
	andl	$511, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L37947
	movl	flag_traditional(%rip), %eax
	testl	%eax, %eax
	je	.L37953
	testb	$32, 17(%r13)
	jne	.L37954
	jmp	.L37953
.L42635:
	movq	integer_types+40(%rip), %rcx
	movzwl	60(%r13), %edx
	movl	flag_traditional(%rip), %r14d
	movzwl	60(%rcx), %eax
	andl	$511, %edx
	movl	%eax, %edi
	andl	$511, %edi
	cmpl	%edx, %edi
	cmovl	%edx, %edi
	xorl	%esi, %esi
	testl	%r14d, %r14d
	jne	.L37946
	andl	$511, %eax
	cmpl	%eax, %edx
	jl	.L37945
.L37946:
	testb	$32, 17(%r13)
	movl	$1, %eax
	cmovne	%eax, %esi
.L37945:
	call	type_for_size
	movq	%rax, %rdi
	jmp	.L42208
.L37939:
	movl	24(%rcx), %eax
	movl	%eax, 24(%rbx)
	jmp	.L37938
.L42634:
	movq	32(%rbx), %rsi
	movq	8(%rbx), %r10
	cmpq	%r10, 8(%rsi)
	jne	.L37934
.L37937:
	movzbl	16(%rsi), %edx
	movq	%rsi, %rbx
	cmpb	$116, %dl
	jne	.L42639
.L42154:
	movq	32(%rbx), %rsi
	jmp	.L37937
.L42639:
	cmpb	$115, %dl
	jne	.L37934
	movq	32(%rsi), %rdi
	movq	8(%rbx), %r9
	cmpq	%r9, 8(%rdi)
	movq	%rdi, %rsi
	je	.L37937
	jmp	.L37934
.L42633:
	movl	pedantic(%rip), %r13d
	testl	%r13d, %r13d
	jne	.L37929
	cmpb	$51, 48(%rbx)
	je	.L37929
	cmpq	$0, current_function_decl(%rip)
	je	.L37931
	movzbl	17(%rbx), %edx
	andb	$24, %dl
	cmpb	$16, %dl
	je	.L42640
.L37931:
	movq	%rbx, %rsi
.L37932:
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movzbl	16(%rsi), %edx
.L37929:
	movq	%rax, %r13
	jmp	.L37925
.L42640:
	movq	104(%rbx), %rax
	testq	%rax, %rax
	je	.L37931
	movzbl	16(%rax), %edx
	testb	%dl, %dl
	je	.L37931
	testb	$2, 17(%rax)
	je	.L37931
	cmpb	$46, %dl
	movq	%rax, %rsi
	jne	.L37932
	jmp	.L37931
.L42632:
	movq	104(%rbx), %rbx
	movzbl	16(%rbx), %edx
	jmp	.L37925
.L37922:
	movq	%rbx, %rdi
	call	default_function_array_conversion
	jmp	.L37923
.L42628:
	movq	72(%r13), %rdi
	movq	32(%r12), %rsi
	jmp	.L42296
.L42627:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %ecx
	jmp	.L37918
.L42626:
	testq	%r13, %r13
	movl	$1, %eax
	cmovne	%eax, %esi
	jmp	.L37916
.L37913:
	movzbl	17(%r12), %r8d
	movl	$1, %r11d
	movl	%r8d, %edx
	shrb	$3, %r8b
	shrb	$4, %dl
	andl	%r8d, %r11d
	andl	$1, %edx
	jmp	.L37912
.L42625:
	movl	$121, %edi
	movq	%r12, %rsi
	xorl	%edx, %edx
	call	build_unary_op
	jmp	.L42218
.L37908:
	movl	24(%r15), %eax
	movl	%eax, 24(%r12)
	jmp	.L37907
.L42624:
	movq	32(%r15), %r9
	cmpq	%rdi, 8(%r9)
	je	.L41974
	movl	$115, %ecx
	jmp	.L37902
.L41974:
	movq	32(%r15), %rsi
	movl	%edx, %ecx
.L37906:
	cmpb	$116, %cl
	movl	$1, %eax
	movq	%rsi, %r12
	movzbl	16(%rsi), %ecx
	cmove	%eax, %r14d
	cmpb	$116, %cl
	jne	.L42641
	movq	32(%r12), %rsi
	jmp	.L37906
.L42641:
	cmpb	$115, %cl
	jne	.L37902
	movq	32(%rsi), %rsi
	movq	8(%r12), %rbx
	cmpq	%rbx, 8(%rsi)
	je	.L37906
	jmp	.L37902
.L42614:
	movq	-192(%rbp), %rcx
	cmpb	$18, 16(%rcx)
	jne	.L37898
	movq	8(%rcx), %rsi
	cmpb	$6, 16(%rsi)
	jne	.L37898
	jmp	.L42149
.L37893:
	movslq	%eax,%rsi
	salq	$4, %rsi
	call	xrealloc
	jmp	.L42207
	.p2align 6,,7
.L37889:
	cmpq	$0, 40(%rdi)
	jne	.L42642
.L38177:
	movq	(%rcx), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L38176
	testb	$2, 53(%rdx)
	je	.L38176
	cmpq	$0, 72(%rdx)
	jne	.L38176
.L38182:
	movq	constructor_unfilled_fields(%rip), %r10
	movq	(%r10), %rdx
	testq	%rdx, %rdx
	movq	%rdx, constructor_unfilled_fields(%rip)
	je	.L38176
	testb	$2, 53(%rdx)
	je	.L38176
	cmpq	$0, 72(%rdx)
	je	.L38182
	jmp	.L38176
	.p2align 6,,7
.L42642:
	call	bit_position
	movq	constructor_fields(%rip), %r11
	movl	$59, %edi
	movq	%rax, %rsi
	movq	40(%r11), %rdx
	call	size_binop
	movq	constructor_fields(%rip), %rcx
	movq	%rax, constructor_bit_index(%rip)
	jmp	.L38177
	.p2align 6,,7
.L42586:
	movq	-192(%rbp), %rax
	movq	8(%rax), %r9
	cmpb	$6, 16(%r9)
	jne	.L37885
	movl	-180(%rbp), %ebx
	testl	%ebx, %ebx
	je	.L37885
	movq	-48(%rbp), %r15
	jmp	.L37886
	.p2align 6,,7
.L42585:
	movl	require_constant_value(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L37860
	cmpq	$0, 32(%rax)
	jne	.L37860
	cmpq	$0, (%rcx)
	jne	.L37860
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC164, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r15
	xorl	%r12d, %r12d
	cmpq	%r15, %r14
	movq	%r14, %rbx
	movq	%r15, %r13
	jae	.L41970
.L37867:
	cmpl	$3, (%rbx)
	je	.L42643
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L37863:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L37867
.L41970:
	movslq	%r12d,%rdx
	movq	%r14, %r12
	addq	$16, %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L41972
.L37881:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L42644
	cmpl	$2, %eax
	je	.L42645
.L37875:
	movq	8(%r12), %rdi
	movzbl	(%rdi), %esi
	leaq	1(%rdi), %rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	je	.L37871
.L37880:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L37880
.L37871:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L37881
.L41972:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	je	.L37831
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L37831
.L42645:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L37875
.L42644:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L37871
.L42643:
	addl	$25, %r12d
	jmp	.L37863
	.p2align 6,,7
.L42584:
	movl	$.LC42, %edi
	xorl	%eax, %eax
	movl	$.LC163, %esi
	call	pedwarn
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rdi
	xorl	%r12d, %r12d
	cmpq	%rdi, %r14
	movq	%r14, %rbx
	movq	%rdi, %r13
	jae	.L41965
.L37841:
	cmpl	$3, (%rbx)
	je	.L42646
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L37837:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L37841
.L41965:
	movslq	%r12d,%r8
	movq	%r14, %r12
	addq	$16, %r8
	andq	$-16, %r8
	subq	%r8, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L42098
.L37855:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L42647
	cmpl	$2, %eax
	je	.L42648
.L37849:
	movq	8(%r12), %r10
	movzbl	(%r10), %r9d
	leaq	1(%r10), %rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	je	.L37845
.L37854:
	movzbl	(%rcx), %r11d
	incq	%rbx
	incq	%rcx
	testb	%r11b, %r11b
	movb	%r11b, (%rbx)
	jne	.L37854
.L37845:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L37855
	jmp	.L42098
.L42648:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L37849
.L42647:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L37845
	.p2align 6,,7
.L42646:
	addl	$25, %r12d
	jmp	.L37837
	.p2align 6,,7
.L42336:
	movl	require_constant_value(%rip), %eax
	testl	%eax, %eax
	je	.L37829
	movl	flag_isoc99(%rip), %ebx
	testl	%ebx, %ebx
	je	.L39466
	jmp	.L37829
	.p2align 6,,7
.L42335:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC163, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r11
	xorl	%r12d, %r12d
	cmpq	%r11, %r14
	movq	%r14, %rbx
	movq	%r11, %r13
	jae	.L41959
.L37799:
	cmpl	$3, (%rbx)
	je	.L42649
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L37795:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L37799
.L41959:
	movslq	%r12d,%r15
	movq	%r14, %r12
	addq	$16, %r15
	andq	$-16, %r15
	subq	%r15, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L41961
.L37813:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L42650
	cmpl	$2, %eax
	je	.L42651
.L37807:
	movq	8(%r12), %r14
	movzbl	(%r14), %r13d
	leaq	1(%r14), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L37803
	.p2align 4,,7
.L37812:
	movzbl	(%rcx), %edx
	incq	%rbx
	incq	%rcx
	testb	%dl, %dl
	movb	%dl, (%rbx)
	jne	.L37812
.L37803:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L37813
.L41961:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	je	.L42145
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L42145
.L42651:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L37807
.L42650:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L37803
.L42649:
	addl	$25, %r12d
	jmp	.L37795
.L42334:
	movq	8(%rax), %rbx
	cmpb	$6, 16(%rbx)
	jne	.L37765
	movq	constructor_unfilled_index(%rip), %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L37765
	movq	constructor_stack(%rip), %rax
	cmpq	$0, 88(%rax)
	jne	.L42652
.L37766:
	movq	%r15, 88(%rax)
	jmp	.L37761
.L42652:
	movl	$.LC162, %esi
	xorl	%eax, %eax
	movl	$.LC42, %edi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rsi
	xorl	%r12d, %r12d
	cmpq	%rsi, %r14
	movq	%r14, %rbx
	movq	%rsi, %r13
	jae	.L41954
.L37773:
	cmpl	$3, (%rbx)
	je	.L42653
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L37769:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L37773
.L41954:
	movslq	%r12d,%rdi
	movq	%r14, %r12
	addq	$16, %rdi
	andq	$-16, %rdi
	subq	%rdi, %rsp
	cmpq	%r13, %r14
	movq	%rsp, -56(%rbp)
	movq	%rsp, %rbx
	jae	.L41956
.L37787:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L42654
	cmpl	$2, %eax
	je	.L42655
.L37781:
	movq	8(%r12), %r9
	movzbl	(%r9), %r8d
	leaq	1(%r9), %rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	je	.L37777
.L37786:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L37786
.L37777:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L37787
.L41956:
	movb	$0, (%rbx)
	movq	-56(%rbp), %rax
	cmpb	$0, (%rax)
	jne	.L42656
.L42144:
	movq	constructor_stack(%rip), %rax
	jmp	.L37766
.L42656:
	movq	%rax, %rsi
	movl	$.LC142, %edi
	xorl	%eax, %eax
	call	error
	jmp	.L42144
	.p2align 6,,7
.L42655:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L37781
.L42654:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L37777
.L42653:
	addl	$25, %r12d
	jmp	.L37769
.L42333:
	movl	$.LC68, %edi
	movl	$5645, %esi
.L42315:
	movl	$.LC182, %edx
.L42294:
	call	fancy_abort
.L37759:
	movl	constructor_no_implicit(%rip), %r15d
	testl	%r15d, %r15d
	jne	.L42657
	movzbl	16(%rdx), %ecx
	leal	-20(%rcx), %r12d
	cmpb	$1, %r12b
	ja	.L39493
	movq	constructor_fields(%rip), %rcx
	movq	8(%rcx), %rax
	cmpq	global_trees(%rip), %rax
	je	.L39495
.L42292:
	movq	128(%rax), %rax
.L39495:
	testl	%edi, %edi
	movzbl	16(%rax), %eax
	je	.L42143
	cmpl	$18, %eax
	je	.L39523
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC184, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r14
	movq	%r14, %rbx
	movq	%rax, %r13
	jae	.L42134
.L39505:
	cmpl	$3, (%rbx)
	je	.L42658
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L39501:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L39505
.L42134:
	movslq	%r12d,%rdi
	movq	%r14, %r12
	addq	$16, %rdi
	andq	$-16, %rdi
	subq	%rdi, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L42141
.L39519:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L42659
	cmpl	$2, %eax
	je	.L42660
.L39513:
	movq	8(%r12), %rdx
	movzbl	(%rdx), %r14d
	leaq	1(%rdx), %rcx
	testb	%r14b, %r14b
	movb	%r14b, (%rbx)
	je	.L39509
	.p2align 4,,7
.L39518:
	movzbl	(%rcx), %r9d
	incq	%rbx
	incq	%rcx
	testb	%r9b, %r9b
	movb	%r9b, (%rbx)
	jne	.L39518
.L39509:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L39519
.L42141:
	movb	$0, (%rbx)
	cmpb	$0, (%r15)
	jne	.L42661
.L39548:
	movl	$1, %eax
	jmp	.L37756
.L42661:
	movl	$.LC142, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	error
	jmp	.L39548
.L42660:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L39513
.L42659:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L39509
.L42658:
	addl	$25, %r12d
	jmp	.L39501
.L39523:
	movl	$2, %edi
	movl	$1, constructor_designated(%rip)
	call	push_init_level
	jmp	.L42293
.L42143:
	cmpl	$20, %eax
	je	.L39523
	cmpl	$21, %eax
	je	.L39523
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC185, %esi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %r13
	xorl	%r12d, %r12d
	cmpq	%r13, %r14
	movq	%r14, %rbx
	jae	.L42139
.L39531:
	cmpl	$3, (%rbx)
	je	.L42662
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L39527:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L39531
.L42139:
	movslq	%r12d,%r11
	movq	%r14, %r12
	addq	$16, %r11
	andq	$-16, %r11
	subq	%r11, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L42141
.L39545:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L42663
	cmpl	$2, %eax
	je	.L42664
.L39539:
	movq	8(%r12), %r13
	movzbl	(%r13), %esi
	leaq	1(%r13), %rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	je	.L39535
	.p2align 4,,7
.L39544:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L39544
.L39535:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L39545
	jmp	.L42141
.L42664:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L39539
.L42663:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L39535
.L42662:
	addl	$25, %r12d
	jmp	.L39527
.L39493:
	cmpb	$18, %cl
	jne	.L39496
	movq	8(%rdx), %rax
	jmp	.L42292
.L39496:
	movl	$.LC68, %edi
	movl	$5673, %esi
	jmp	.L42315
	.p2align 6,,7
.L42657:
	movl	$.LC183, %esi
	xorl	%eax, %eax
	movl	$.LC42, %edi
	call	error
	movq	spelling_base(%rip), %r14
	movq	spelling(%rip), %rsi
	xorl	%r12d, %r12d
	cmpq	%rsi, %r14
	movq	%r14, %rbx
	movq	%rsi, %r13
	jae	.L42129
.L39475:
	cmpl	$3, (%rbx)
	je	.L42665
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L39471:
	addq	$16, %rbx
	cmpq	%r13, %rbx
	jb	.L39475
.L42129:
	movslq	%r12d,%rbx
	movq	%r14, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r13, %r14
	movq	%rsp, %r15
	movq	%rsp, %rbx
	jae	.L42141
.L39489:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L42666
	cmpl	$2, %eax
	je	.L42667
.L39483:
	movq	8(%r12), %r8
	movzbl	(%r8), %r13d
	leaq	1(%r8), %rcx
	testb	%r13b, %r13b
	movb	%r13b, (%rbx)
	je	.L39479
	.p2align 4,,7
.L39488:
	movzbl	(%rcx), %r10d
	incq	%rbx
	incq	%rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	jne	.L39488
.L39479:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L39489
	jmp	.L42141
.L42667:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L39483
.L42666:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L39479
.L42665:
	addl	$25, %r12d
	jmp	.L39471
.LFE58:
.Lfe58:
	.size	set_designator,.Lfe58-set_designator
	.align 2
	.p2align 4,,15
	.type	add_pending_init,@function
add_pending_init:
.LFB59:
	pushq	%rbp
.LCFI281:
	movq	%rsp, %rbp
.LCFI282:
	pushq	%r15
.LCFI283:
	pushq	%r14
.LCFI284:
	movq	%rdi, %r14
	pushq	%r13
.LCFI285:
	pushq	%r12
.LCFI286:
	movl	$constructor_pending_elts, %r12d
	pushq	%rbx
.LCFI287:
	xorl	%ebx, %ebx
	subq	$24, %rsp
.LCFI288:
	movq	constructor_type(%rip), %rdx
	movq	%rsi, -48(%rbp)
	cmpb	$18, 16(%rdx)
	je	.L42689
	call	bit_position
	movq	%rax, %r15
	movq	constructor_pending_elts(%rip), %rax
	testq	%rax, %rax
	je	.L39867
	movq	%rax, %r13
	.p2align 4,,7
.L39900:
	movq	32(%r13), %rdi
	movq	%r13, %rbx
	movq	%r13, %r12
	call	bit_position
	movq	%r15, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L39868
	cmpq	%r14, 32(%r13)
	je	.L39873
	leaq	8(%r13), %r12
.L39868:
	movq	(%r12), %rdx
	testq	%rdx, %rdx
	movq	%rdx, %r13
	jne	.L39900
.L39867:
	movl	$48, %edi
	call	ggc_alloc
	testq	%rbx, %rbx
	movq	-48(%rbp), %r13
	movq	%rax, (%r12)
	movq	%rax, %rdx
	movq	%r14, 32(%rax)
	movq	%rbx, 16(%rax)
	movq	$0, (%rax)
	movq	$0, 8(%rax)
	movq	%r13, 40(%rax)
	movl	$0, 24(%rax)
	je	.L39832
	.p2align 4,,7
.L39944:
	cmpq	(%rbx), %rdx
	je	.L42690
	movl	24(%rbx), %eax
	testl	%eax, %eax
	jne	.L39925
	movl	$1, 24(%rbx)
.L39924:
	movq	%rbx, %rdx
	movq	16(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L39944
.L39832:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
.L39925:
	testl	%eax, %eax
	jle	.L39927
	movl	24(%rdx), %eax
	testl	%eax, %eax
	jle	.L39928
	movq	(%rdx), %rax
	testq	%rax, %rax
	movq	%rax, 8(%rbx)
	je	.L39929
	movq	%rbx, 16(%rax)
.L39929:
	movq	%rbx, (%rdx)
.L42687:
	movq	16(%rbx), %rax
	movl	$0, 24(%rbx)
	movq	%rdx, 16(%rbx)
	movl	$0, 24(%rdx)
	testq	%rax, %rax
	movq	%rax, 16(%rdx)
	je	.L39930
	cmpq	%rbx, (%rax)
	je	.L42691
	movq	%rdx, 8(%rax)
	jmp	.L39832
.L42691:
	movq	%rdx, (%rax)
	jmp	.L39832
.L39930:
	movq	%rdx, constructor_pending_elts(%rip)
	jmp	.L39832
.L39928:
	movq	(%rdx), %rcx
	movq	8(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, (%rdx)
	je	.L39935
	movq	%rdx, 16(%rax)
.L39935:
	movq	(%rcx), %rax
	movq	%rdx, 8(%rcx)
	testq	%rax, %rax
	movq	%rax, 8(%rbx)
	je	.L39936
	movq	%rbx, 16(%rax)
.L39936:
	movl	24(%rcx), %eax
	xorl	%esi, %esi
	movq	%rbx, (%rcx)
	shrl	$31, %eax
	movl	%eax, 24(%rdx)
	cmpl	$0, 24(%rcx)
	setle	%sil
	decl	%esi
	movl	%esi, 24(%rbx)
.L42688:
	movq	16(%rbx), %rax
	movl	$0, 24(%rcx)
	movq	%rcx, 16(%rbx)
	movq	%rcx, 16(%rdx)
	testq	%rax, %rax
	movq	%rax, 16(%rcx)
	je	.L39939
	cmpq	%rbx, (%rax)
	je	.L42692
	movq	%rcx, 8(%rax)
	jmp	.L39832
.L42692:
	movq	%rcx, (%rax)
	jmp	.L39832
.L39939:
	movq	%rcx, constructor_pending_elts(%rip)
	jmp	.L39832
.L39927:
	movl	$0, 24(%rbx)
	jmp	.L39832
	.p2align 6,,7
.L42690:
	movl	24(%rbx), %eax
	testl	%eax, %eax
	jne	.L39905
	movl	$-1, 24(%rbx)
	jmp	.L39924
.L39905:
	testl	%eax, %eax
	jns	.L39927
	movl	24(%rdx), %eax
	testl	%eax, %eax
	js	.L42693
	movq	8(%rdx), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, 8(%rdx)
	je	.L39915
	movq	%rdx, 16(%rax)
.L39915:
	movq	8(%rcx), %rax
	movq	%rdx, (%rcx)
	testq	%rax, %rax
	movq	%rax, (%rbx)
	je	.L39916
	movq	%rbx, 16(%rax)
.L39916:
	movl	24(%rcx), %eax
	xorl	%r15d, %r15d
	movq	%rbx, 8(%rcx)
	shrl	$31, %eax
	movl	%eax, 24(%rbx)
	cmpl	$0, 24(%rcx)
	setle	%r15b
	decl	%r15d
	movl	%r15d, 24(%rdx)
	jmp	.L42688
.L42693:
	movq	8(%rdx), %rax
	testq	%rax, %rax
	movq	%rax, (%rbx)
	je	.L39909
	movq	%rbx, 16(%rax)
.L39909:
	movq	%rbx, 8(%rdx)
	jmp	.L42687
	.p2align 6,,7
.L39873:
	movq	40(%r13), %r9
	testb	$1, 17(%r9)
	jne	.L42694
.L39875:
	movq	-48(%rbp), %r12
	movq	%r12, 40(%r13)
	jmp	.L39832
.L42694:
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r15
	movq	spelling(%rip), %r14
	xorl	%r12d, %r12d
	cmpq	%r14, %r15
	movq	%r15, %rbx
	jae	.L42676
.L39882:
	cmpl	$3, (%rbx)
	je	.L42695
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L39878:
	addq	$16, %rbx
	cmpq	%r14, %rbx
	jb	.L39882
.L42676:
	movslq	%r12d,%rbx
	movq	%r15, %r12
	addq	$16, %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	cmpq	%r14, %r15
	movq	%rsp, -64(%rbp)
	movq	%rsp, %rbx
	jae	.L42678
.L39896:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L42696
	cmpl	$2, %eax
	je	.L42697
.L39890:
	movq	8(%r12), %r11
	movzbl	(%r11), %r10d
	leaq	1(%r11), %rcx
	testb	%r10b, %r10b
	movb	%r10b, (%rbx)
	je	.L39886
	.p2align 4,,7
.L39895:
	movzbl	(%rcx), %r14d
	incq	%rbx
	incq	%rcx
	testb	%r14b, %r14b
	movb	%r14b, (%rbx)
	jne	.L39895
.L39886:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L39896
.L42678:
	movb	$0, (%rbx)
	movq	-64(%rbp), %rax
.L42686:
	cmpb	$0, (%rax)
	je	.L39875
	movq	%rax, %rsi
	movl	$.LC142, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L39875
.L42697:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L39890
.L42696:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L39886
.L42695:
	addl	$25, %r12d
	jmp	.L39878
	.p2align 6,,7
.L42689:
	movq	constructor_pending_elts(%rip), %rax
	testq	%rax, %rax
	je	.L39867
	movq	%rax, %r13
	.p2align 4,,7
.L39866:
	movq	32(%r13), %rsi
	movq	%r14, %rdi
	movq	%r13, %rbx
	movq	%r13, %r12
	call	tree_int_cst_lt
	testl	%eax, %eax
	je	.L42698
.L39834:
	movq	(%r12), %r13
	testq	%r13, %r13
	jne	.L39866
	jmp	.L39867
	.p2align 6,,7
.L42698:
	movq	32(%r13), %rdi
	movq	%r14, %rsi
	leaq	8(%r13), %r12
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L39834
	movq	40(%r13), %rdx
	testb	$1, 17(%rdx)
	je	.L39875
	xorl	%eax, %eax
	movl	$.LC42, %edi
	movl	$.LC165, %esi
	call	warning
	movq	spelling_base(%rip), %r15
	movq	spelling(%rip), %r14
	xorl	%r12d, %r12d
	cmpq	%r14, %r15
	movq	%r15, %rbx
	jae	.L42670
.L39848:
	cmpl	$3, (%rbx)
	je	.L42699
	movq	8(%rbx), %rdi
	call	strlen
	leal	1(%rax,%r12), %r12d
.L39844:
	addq	$16, %rbx
	cmpq	%r14, %rbx
	jb	.L39848
.L42670:
	movslq	%r12d,%rcx
	movq	%r15, %r12
	addq	$16, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	cmpq	%r14, %r15
	movq	%rsp, -56(%rbp)
	movq	%rsp, %rbx
	jae	.L42672
.L39862:
	movl	(%r12), %eax
	cmpl	$3, %eax
	je	.L42700
	cmpl	$2, %eax
	je	.L42701
.L39856:
	movq	8(%r12), %rdi
	movzbl	(%rdi), %esi
	leaq	1(%rdi), %rcx
	testb	%sil, %sil
	movb	%sil, (%rbx)
	je	.L39852
.L39861:
	movzbl	(%rcx), %r8d
	incq	%rbx
	incq	%rcx
	testb	%r8b, %r8b
	movb	%r8b, (%rbx)
	jne	.L39861
.L39852:
	addq	$16, %r12
	cmpq	spelling(%rip), %r12
	jb	.L39862
.L42672:
	movb	$0, (%rbx)
	movq	-56(%rbp), %rax
	jmp	.L42686
.L42701:
	movb	$46, (%rbx)
	incq	%rbx
	jmp	.L39856
.L42700:
	movl	8(%r12), %edx
	movq	%rbx, %rdi
	movl	$.LC141, %esi
	xorl	%eax, %eax
	call	sprintf
	movq	%rbx, %rdi
	call	strlen
	addq	%rax, %rbx
	jmp	.L39852
.L42699:
	addl	$25, %r12d
	jmp	.L39844
.LFE59:
.Lfe59:
	.size	add_pending_init,.Lfe59-add_pending_init
	.local	spelling
	.comm	spelling,8,8
	.local	spelling_base
	.comm	spelling_base,8,8
	.local	spelling_size
	.comm	spelling_size,4,4
	.local	constructor_type
	.comm	constructor_type,8,8
	.local	constructor_fields
	.comm	constructor_fields,8,8
	.local	constructor_index
	.comm	constructor_index,8,8
	.local	constructor_max_index
	.comm	constructor_max_index,8,8
	.local	constructor_unfilled_fields
	.comm	constructor_unfilled_fields,8,8
	.local	constructor_unfilled_index
	.comm	constructor_unfilled_index,8,8
	.local	constructor_bit_index
	.comm	constructor_bit_index,8,8
	.local	constructor_elements
	.comm	constructor_elements,8,8
	.local	constructor_incremental
	.comm	constructor_incremental,4,4
	.local	constructor_constant
	.comm	constructor_constant,4,4
	.local	constructor_simple
	.comm	constructor_simple,4,4
	.local	constructor_erroneous
	.comm	constructor_erroneous,4,4
	.local	constructor_subconstants_deferred
	.comm	constructor_subconstants_deferred,4,4
	.local	constructor_pending_elts
	.comm	constructor_pending_elts,8,8
	.local	constructor_depth
	.comm	constructor_depth,4,4
	.local	require_constant_value
	.comm	require_constant_value,4,4
	.local	require_constant_elements
	.comm	require_constant_elements,4,4
	.local	constructor_decl
	.comm	constructor_decl,8,8
	.local	constructor_asmspec
	.comm	constructor_asmspec,8,8
	.local	constructor_top_level
	.comm	constructor_top_level,4,4
	.local	constructor_designated
	.comm	constructor_designated,4,4
	.local	designator_depth
	.comm	designator_depth,4,4
	.local	designator_errorneous
	.comm	designator_errorneous,4,4
	.comm	constructor_stack,8,8
	.comm	constructor_range_stack,8,8
	.comm	initializer_stack,8,8
	.local	switch_stack
	.comm	switch_stack,8,8
	.section	.eh_frame,"aw",@progbits
.Lframe1:
	.long	.LECIE1-.LSCIE1
.LSCIE1:
	.long	0x0
	.byte	0x1
	.string	""
	.uleb128 0x1
	.sleb128 -8
	.byte	0x10
	.byte	0xc
	.uleb128 0x7
	.uleb128 0x8
	.byte	0x90
	.uleb128 0x1
	.align 8
.LECIE1:
.LSFDE1:
	.long	.LEFDE1-.LASFDE1
.LASFDE1:
	.long	.LASFDE1-.Lframe1
	.quad	.LFB1
	.quad	.LFE1-.LFB1
	.byte	0x4
	.long	.LCFI0-.LFB1
	.byte	0xe
	.uleb128 0x10
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI1-.LCFI0
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI2-.LCFI1
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI3-.LCFI2
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI4-.LCFI3
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI5-.LCFI4
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI6-.LCFI5
	.byte	0xe
	.uleb128 0x2d0
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8e
	.uleb128 0x3
	.align 8
.LEFDE1:
.LSFDE3:
	.long	.LEFDE3-.LASFDE3
.LASFDE3:
	.long	.LASFDE3-.Lframe1
	.quad	.LFB2
	.quad	.LFE2-.LFB2
	.byte	0x4
	.long	.LCFI7-.LFB2
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI8-.LCFI7
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI9-.LCFI8
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI10-.LCFI9
	.byte	0xe
	.uleb128 0x28
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI11-.LCFI10
	.byte	0xe
	.uleb128 0x30
	.byte	0x86
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI12-.LCFI11
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI13-.LCFI12
	.byte	0xe
	.uleb128 0x40
	.byte	0x83
	.uleb128 0x7
	.align 8
.LEFDE3:
.LSFDE5:
	.long	.LEFDE5-.LASFDE5
.LASFDE5:
	.long	.LASFDE5-.Lframe1
	.quad	.LFB3
	.quad	.LFE3-.LFB3
	.byte	0x4
	.long	.LCFI14-.LFB3
	.byte	0xe
	.uleb128 0x10
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI15-.LCFI14
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI16-.LCFI15
	.byte	0xe
	.uleb128 0x20
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8e
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI17-.LCFI16
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI18-.LCFI17
	.byte	0xe
	.uleb128 0x30
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI19-.LCFI18
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI20-.LCFI19
	.byte	0xe
	.uleb128 0x40
	.byte	0x83
	.uleb128 0x7
	.align 8
.LEFDE5:
.LSFDE7:
	.long	.LEFDE7-.LASFDE7
.LASFDE7:
	.long	.LASFDE7-.Lframe1
	.quad	.LFB4
	.quad	.LFE4-.LFB4
	.align 8
.LEFDE7:
.LSFDE9:
	.long	.LEFDE9-.LASFDE9
.LASFDE9:
	.long	.LASFDE9-.Lframe1
	.quad	.LFB5
	.quad	.LFE5-.LFB5
	.byte	0x4
	.long	.LCFI21-.LFB5
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI23-.LCFI21
	.byte	0x86
	.uleb128 0x2
	.byte	0x83
	.uleb128 0x3
	.align 8
.LEFDE9:
.LSFDE11:
	.long	.LEFDE11-.LASFDE11
.LASFDE11:
	.long	.LASFDE11-.Lframe1
	.quad	.LFB6
	.quad	.LFE6-.LFB6
	.byte	0x4
	.long	.LCFI24-.LFB6
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI28-.LCFI24
	.byte	0x83
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x2
	.byte	0x8c
	.uleb128 0x3
	.byte	0x86
	.uleb128 0x4
	.align 8
.LEFDE11:
.LSFDE13:
	.long	.LEFDE13-.LASFDE13
.LASFDE13:
	.long	.LASFDE13-.Lframe1
	.quad	.LFB7
	.quad	.LFE7-.LFB7
	.byte	0x4
	.long	.LCFI29-.LFB7
	.byte	0xe
	.uleb128 0x10
	.align 8
.LEFDE13:
.LSFDE15:
	.long	.LEFDE15-.LASFDE15
.LASFDE15:
	.long	.LASFDE15-.Lframe1
	.quad	.LFB8
	.quad	.LFE8-.LFB8
	.align 8
.LEFDE15:
.LSFDE17:
	.long	.LEFDE17-.LASFDE17
.LASFDE17:
	.long	.LASFDE17-.Lframe1
	.quad	.LFB9
	.quad	.LFE9-.LFB9
	.byte	0x4
	.long	.LCFI30-.LFB9
	.byte	0xe
	.uleb128 0x10
	.byte	0x83
	.uleb128 0x2
	.align 8
.LEFDE17:
.LSFDE19:
	.long	.LEFDE19-.LASFDE19
.LASFDE19:
	.long	.LASFDE19-.Lframe1
	.quad	.LFB10
	.quad	.LFE10-.LFB10
	.byte	0x4
	.long	.LCFI31-.LFB10
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI32-.LCFI31
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI33-.LCFI32
	.byte	0xe
	.uleb128 0x20
	.byte	0x8d
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI34-.LCFI33
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI35-.LCFI34
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI36-.LCFI35
	.byte	0xe
	.uleb128 0x38
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI37-.LCFI36
	.byte	0xe
	.uleb128 0x180
	.align 8
.LEFDE19:
.LSFDE21:
	.long	.LEFDE21-.LASFDE21
.LASFDE21:
	.long	.LASFDE21-.Lframe1
	.quad	.LFB11
	.quad	.LFE11-.LFB11
	.byte	0x4
	.long	.LCFI38-.LFB11
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI39-.LCFI38
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI40-.LCFI39
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI41-.LCFI40
	.byte	0xe
	.uleb128 0x28
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI42-.LCFI41
	.byte	0xe
	.uleb128 0x30
	.byte	0x86
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI43-.LCFI42
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI44-.LCFI43
	.byte	0xe
	.uleb128 0x40
	.byte	0x83
	.uleb128 0x7
	.align 8
.LEFDE21:
.LSFDE23:
	.long	.LEFDE23-.LASFDE23
.LASFDE23:
	.long	.LASFDE23-.Lframe1
	.quad	.LFB12
	.quad	.LFE12-.LFB12
	.byte	0x4
	.long	.LCFI45-.LFB12
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI46-.LCFI45
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI47-.LCFI46
	.byte	0xe
	.uleb128 0x20
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI48-.LCFI47
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI49-.LCFI48
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI50-.LCFI49
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI51-.LCFI50
	.byte	0xe
	.uleb128 0x160
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.align 8
.LEFDE23:
.LSFDE25:
	.long	.LEFDE25-.LASFDE25
.LASFDE25:
	.long	.LASFDE25-.Lframe1
	.quad	.LFB13
	.quad	.LFE13-.LFB13
	.byte	0x4
	.long	.LCFI52-.LFB13
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI53-.LCFI52
	.byte	0xd
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI57-.LCFI53
	.byte	0x8d
	.uleb128 0x3
	.byte	0x8c
	.uleb128 0x4
	.byte	0x83
	.uleb128 0x5
	.align 8
.LEFDE25:
.LSFDE27:
	.long	.LEFDE27-.LASFDE27
.LASFDE27:
	.long	.LASFDE27-.Lframe1
	.quad	.LFB14
	.quad	.LFE14-.LFB14
	.byte	0x4
	.long	.LCFI58-.LFB14
	.byte	0xe
	.uleb128 0x10
	.align 8
.LEFDE27:
.LSFDE29:
	.long	.LEFDE29-.LASFDE29
.LASFDE29:
	.long	.LASFDE29-.Lframe1
	.quad	.LFB15
	.quad	.LFE15-.LFB15
	.byte	0x4
	.long	.LCFI59-.LFB15
	.byte	0xe
	.uleb128 0x10
	.align 8
.LEFDE29:
.LSFDE31:
	.long	.LEFDE31-.LASFDE31
.LASFDE31:
	.long	.LASFDE31-.Lframe1
	.quad	.LFB16
	.quad	.LFE16-.LFB16
	.byte	0x4
	.long	.LCFI60-.LFB16
	.byte	0xe
	.uleb128 0xc0
	.byte	0x4
	.long	.LCFI66-.LCFI60
	.byte	0x8f
	.uleb128 0x2
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8c
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x6
	.byte	0x83
	.uleb128 0x7
	.align 8
.LEFDE31:
.LSFDE33:
	.long	.LEFDE33-.LASFDE33
.LASFDE33:
	.long	.LASFDE33-.Lframe1
	.quad	.LFB17
	.quad	.LFE17-.LFB17
	.byte	0x4
	.long	.LCFI67-.LFB17
	.byte	0xe
	.uleb128 0x40
	.byte	0x4
	.long	.LCFI73-.LCFI67
	.byte	0x8f
	.uleb128 0x2
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8c
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x6
	.byte	0x83
	.uleb128 0x7
	.align 8
.LEFDE33:
.LSFDE35:
	.long	.LEFDE35-.LASFDE35
.LASFDE35:
	.long	.LASFDE35-.Lframe1
	.quad	.LFB18
	.quad	.LFE18-.LFB18
	.byte	0x4
	.long	.LCFI74-.LFB18
	.byte	0xe
	.uleb128 0x10
	.byte	0x83
	.uleb128 0x2
	.align 8
.LEFDE35:
.LSFDE37:
	.long	.LEFDE37-.LASFDE37
.LASFDE37:
	.long	.LASFDE37-.Lframe1
	.quad	.LFB19
	.quad	.LFE19-.LFB19
	.byte	0x4
	.long	.LCFI75-.LFB19
	.byte	0xe
	.uleb128 0x10
	.byte	0x83
	.uleb128 0x2
	.align 8
.LEFDE37:
.LSFDE39:
	.long	.LEFDE39-.LASFDE39
.LASFDE39:
	.long	.LASFDE39-.Lframe1
	.quad	.LFB20
	.quad	.LFE20-.LFB20
	.byte	0x4
	.long	.LCFI76-.LFB20
	.byte	0xe
	.uleb128 0x10
	.byte	0x83
	.uleb128 0x2
	.align 8
.LEFDE39:
.LSFDE41:
	.long	.LEFDE41-.LASFDE41
.LASFDE41:
	.long	.LASFDE41-.Lframe1
	.quad	.LFB21
	.quad	.LFE21-.LFB21
	.align 8
.LEFDE41:
.LSFDE43:
	.long	.LEFDE43-.LASFDE43
.LASFDE43:
	.long	.LASFDE43-.Lframe1
	.quad	.LFB22
	.quad	.LFE22-.LFB22
	.byte	0x4
	.long	.LCFI77-.LFB22
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI78-.LCFI77
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI79-.LCFI78
	.byte	0xe
	.uleb128 0x20
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.byte	0x8c
	.uleb128 0x2
	.align 8
.LEFDE43:
.LSFDE45:
	.long	.LEFDE45-.LASFDE45
.LASFDE45:
	.long	.LASFDE45-.Lframe1
	.quad	.LFB23
	.quad	.LFE23-.LFB23
	.byte	0x4
	.long	.LCFI80-.LFB23
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI81-.LCFI80
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI82-.LCFI81
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI83-.LCFI82
	.byte	0xe
	.uleb128 0x28
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI84-.LCFI83
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI85-.LCFI84
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI86-.LCFI85
	.byte	0xe
	.uleb128 0x50
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.align 8
.LEFDE45:
.LSFDE47:
	.long	.LEFDE47-.LASFDE47
.LASFDE47:
	.long	.LASFDE47-.Lframe1
	.quad	.LFB24
	.quad	.LFE24-.LFB24
	.byte	0x4
	.long	.LCFI87-.LFB24
	.byte	0xe
	.uleb128 0x10
	.byte	0x8e
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI88-.LCFI87
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI89-.LCFI88
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI90-.LCFI89
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI91-.LCFI90
	.byte	0xe
	.uleb128 0x30
	.byte	0x83
	.uleb128 0x6
	.byte	0x86
	.uleb128 0x5
	.byte	0x8c
	.uleb128 0x4
	.byte	0x8d
	.uleb128 0x3
	.align 8
.LEFDE47:
.LSFDE49:
	.long	.LEFDE49-.LASFDE49
.LASFDE49:
	.long	.LASFDE49-.Lframe1
	.quad	.LFB25
	.quad	.LFE25-.LFB25
	.byte	0x4
	.long	.LCFI92-.LFB25
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI93-.LCFI92
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI94-.LCFI93
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI95-.LCFI94
	.byte	0xe
	.uleb128 0x28
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI96-.LCFI95
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI97-.LCFI96
	.byte	0xe
	.uleb128 0x38
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI98-.LCFI97
	.byte	0xe
	.uleb128 0x40
	.align 8
.LEFDE49:
.LSFDE51:
	.long	.LEFDE51-.LASFDE51
.LASFDE51:
	.long	.LASFDE51-.Lframe1
	.quad	.LFB26
	.quad	.LFE26-.LFB26
	.byte	0x4
	.long	.LCFI99-.LFB26
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI103-.LCFI99
	.byte	0x8d
	.uleb128 0x2
	.byte	0x8c
	.uleb128 0x3
	.byte	0x86
	.uleb128 0x4
	.byte	0x83
	.uleb128 0x5
	.align 8
.LEFDE51:
.LSFDE53:
	.long	.LEFDE53-.LASFDE53
.LASFDE53:
	.long	.LASFDE53-.Lframe1
	.quad	.LFB27
	.quad	.LFE27-.LFB27
	.byte	0x4
	.long	.LCFI104-.LFB27
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI105-.LCFI104
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI106-.LCFI105
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI107-.LCFI106
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI108-.LCFI107
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI109-.LCFI108
	.byte	0xe
	.uleb128 0x38
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI110-.LCFI109
	.byte	0xe
	.uleb128 0x90
	.align 8
.LEFDE53:
.LSFDE55:
	.long	.LEFDE55-.LASFDE55
.LASFDE55:
	.long	.LASFDE55-.Lframe1
	.quad	.LFB28
	.quad	.LFE28-.LFB28
	.byte	0x4
	.long	.LCFI111-.LFB28
	.byte	0xe
	.uleb128 0x10
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI112-.LCFI111
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI113-.LCFI112
	.byte	0xe
	.uleb128 0x20
	.byte	0x8d
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI114-.LCFI113
	.byte	0xe
	.uleb128 0x28
	.byte	0x8c
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI115-.LCFI114
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI116-.LCFI115
	.byte	0xe
	.uleb128 0x38
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI117-.LCFI116
	.byte	0xe
	.uleb128 0x40
	.align 8
.LEFDE55:
.LSFDE57:
	.long	.LEFDE57-.LASFDE57
.LASFDE57:
	.long	.LASFDE57-.Lframe1
	.quad	.LFB29
	.quad	.LFE29-.LFB29
	.byte	0x4
	.long	.LCFI118-.LFB29
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI120-.LCFI118
	.byte	0x86
	.uleb128 0x2
	.byte	0x83
	.uleb128 0x3
	.align 8
.LEFDE57:
.LSFDE59:
	.long	.LEFDE59-.LASFDE59
.LASFDE59:
	.long	.LASFDE59-.Lframe1
	.quad	.LFB30
	.quad	.LFE30-.LFB30
	.byte	0x4
	.long	.LCFI121-.LFB30
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI122-.LCFI121
	.byte	0xd
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI125-.LCFI122
	.byte	0x8d
	.uleb128 0x5
	.byte	0x8e
	.uleb128 0x4
	.byte	0x8f
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI127-.LCFI125
	.byte	0x83
	.uleb128 0x7
	.byte	0x8c
	.uleb128 0x6
	.align 8
.LEFDE59:
.LSFDE61:
	.long	.LEFDE61-.LASFDE61
.LASFDE61:
	.long	.LASFDE61-.Lframe1
	.quad	.LFB31
	.quad	.LFE31-.LFB31
	.byte	0x4
	.long	.LCFI129-.LFB31
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI131-.LCFI129
	.byte	0x86
	.uleb128 0x2
	.byte	0x83
	.uleb128 0x3
	.align 8
.LEFDE61:
.LSFDE63:
	.long	.LEFDE63-.LASFDE63
.LASFDE63:
	.long	.LASFDE63-.Lframe1
	.quad	.LFB32
	.quad	.LFE32-.LFB32
	.byte	0x4
	.long	.LCFI132-.LFB32
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI136-.LCFI132
	.byte	0x8d
	.uleb128 0x2
	.byte	0x8c
	.uleb128 0x3
	.byte	0x86
	.uleb128 0x4
	.byte	0x83
	.uleb128 0x5
	.align 8
.LEFDE63:
.LSFDE65:
	.long	.LEFDE65-.LASFDE65
.LASFDE65:
	.long	.LASFDE65-.Lframe1
	.quad	.LFB33
	.quad	.LFE33-.LFB33
	.byte	0x4
	.long	.LCFI137-.LFB33
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI138-.LCFI137
	.byte	0xd
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI144-.LCFI138
	.byte	0x83
	.uleb128 0x7
	.byte	0x8c
	.uleb128 0x6
	.byte	0x8d
	.uleb128 0x5
	.byte	0x8e
	.uleb128 0x4
	.byte	0x8f
	.uleb128 0x3
	.align 8
.LEFDE65:
.LSFDE67:
	.long	.LEFDE67-.LASFDE67
.LASFDE67:
	.long	.LASFDE67-.Lframe1
	.quad	.LFB34
	.quad	.LFE34-.LFB34
	.byte	0x4
	.long	.LCFI145-.LFB34
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI146-.LCFI145
	.byte	0xd
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI150-.LCFI146
	.byte	0x8c
	.uleb128 0x6
	.byte	0x8d
	.uleb128 0x5
	.byte	0x8e
	.uleb128 0x4
	.byte	0x8f
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI152-.LCFI150
	.byte	0x83
	.uleb128 0x7
	.align 8
.LEFDE67:
.LSFDE69:
	.long	.LEFDE69-.LASFDE69
.LASFDE69:
	.long	.LASFDE69-.Lframe1
	.quad	.LFB35
	.quad	.LFE35-.LFB35
	.byte	0x4
	.long	.LCFI153-.LFB35
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI154-.LCFI153
	.byte	0xd
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI158-.LCFI154
	.byte	0x8c
	.uleb128 0x6
	.byte	0x8d
	.uleb128 0x5
	.byte	0x8e
	.uleb128 0x4
	.byte	0x8f
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI160-.LCFI158
	.byte	0x83
	.uleb128 0x7
	.align 8
.LEFDE69:
.LSFDE71:
	.long	.LEFDE71-.LASFDE71
.LASFDE71:
	.long	.LASFDE71-.Lframe1
	.quad	.LFB36
	.quad	.LFE36-.LFB36
	.byte	0x4
	.long	.LCFI161-.LFB36
	.byte	0xe
	.uleb128 0x10
	.byte	0x8c
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI162-.LCFI161
	.byte	0xe
	.uleb128 0x18
	.byte	0x86
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI163-.LCFI162
	.byte	0xe
	.uleb128 0x20
	.byte	0x83
	.uleb128 0x4
	.align 8
.LEFDE71:
.LSFDE73:
	.long	.LEFDE73-.LASFDE73
.LASFDE73:
	.long	.LASFDE73-.Lframe1
	.quad	.LFB37
	.quad	.LFE37-.LFB37
	.byte	0x4
	.long	.LCFI164-.LFB37
	.byte	0xe
	.uleb128 0x10
	.byte	0x83
	.uleb128 0x2
	.align 8
.LEFDE73:
.LSFDE75:
	.long	.LEFDE75-.LASFDE75
.LASFDE75:
	.long	.LASFDE75-.Lframe1
	.quad	.LFB38
	.quad	.LFE38-.LFB38
	.byte	0x4
	.long	.LCFI165-.LFB38
	.byte	0xe
	.uleb128 0x10
	.byte	0x83
	.uleb128 0x2
	.align 8
.LEFDE75:
.LSFDE77:
	.long	.LEFDE77-.LASFDE77
.LASFDE77:
	.long	.LASFDE77-.Lframe1
	.quad	.LFB39
	.quad	.LFE39-.LFB39
	.byte	0x4
	.long	.LCFI166-.LFB39
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI167-.LCFI166
	.byte	0xd
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI173-.LCFI167
	.byte	0x83
	.uleb128 0x7
	.byte	0x8c
	.uleb128 0x6
	.byte	0x8d
	.uleb128 0x5
	.byte	0x8e
	.uleb128 0x4
	.byte	0x8f
	.uleb128 0x3
	.align 8
.LEFDE77:
.LSFDE79:
	.long	.LEFDE79-.LASFDE79
.LASFDE79:
	.long	.LASFDE79-.Lframe1
	.quad	.LFB40
	.quad	.LFE40-.LFB40
	.byte	0x4
	.long	.LCFI174-.LFB40
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI175-.LCFI174
	.byte	0xd
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI181-.LCFI175
	.byte	0x83
	.uleb128 0x7
	.byte	0x8c
	.uleb128 0x6
	.byte	0x8d
	.uleb128 0x5
	.byte	0x8e
	.uleb128 0x4
	.byte	0x8f
	.uleb128 0x3
	.align 8
.LEFDE79:
.LSFDE81:
	.long	.LEFDE81-.LASFDE81
.LASFDE81:
	.long	.LASFDE81-.Lframe1
	.quad	.LFB41
	.quad	.LFE41-.LFB41
	.byte	0x4
	.long	.LCFI182-.LFB41
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI183-.LCFI182
	.byte	0xd
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI187-.LCFI183
	.byte	0x8c
	.uleb128 0x6
	.byte	0x8d
	.uleb128 0x5
	.byte	0x8e
	.uleb128 0x4
	.byte	0x8f
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI188-.LCFI187
	.byte	0x83
	.uleb128 0x7
	.align 8
.LEFDE81:
.LSFDE83:
	.long	.LEFDE83-.LASFDE83
.LASFDE83:
	.long	.LASFDE83-.Lframe1
	.quad	.LFB42
	.quad	.LFE42-.LFB42
	.byte	0x4
	.long	.LCFI190-.LFB42
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI191-.LCFI190
	.byte	0xd
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI196-.LCFI191
	.byte	0x83
	.uleb128 0x7
	.byte	0x8c
	.uleb128 0x6
	.byte	0x8d
	.uleb128 0x5
	.byte	0x8e
	.uleb128 0x4
	.byte	0x8f
	.uleb128 0x3
	.align 8
.LEFDE83:
.LSFDE85:
	.long	.LEFDE85-.LASFDE85
.LASFDE85:
	.long	.LASFDE85-.Lframe1
	.quad	.LFB43
	.quad	.LFE43-.LFB43
	.byte	0x4
	.long	.LCFI198-.LFB43
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI199-.LCFI198
	.byte	0xd
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI203-.LCFI199
	.byte	0x8c
	.uleb128 0x6
	.byte	0x8d
	.uleb128 0x5
	.byte	0x8e
	.uleb128 0x4
	.byte	0x8f
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI205-.LCFI203
	.byte	0x83
	.uleb128 0x7
	.align 8
.LEFDE85:
.LSFDE87:
	.long	.LEFDE87-.LASFDE87
.LASFDE87:
	.long	.LASFDE87-.Lframe1
	.quad	.LFB44
	.quad	.LFE44-.LFB44
	.byte	0x4
	.long	.LCFI206-.LFB44
	.byte	0xe
	.uleb128 0x10
	.align 8
.LEFDE87:
.LSFDE89:
	.long	.LEFDE89-.LASFDE89
.LASFDE89:
	.long	.LASFDE89-.Lframe1
	.quad	.LFB45
	.quad	.LFE45-.LFB45
	.byte	0x4
	.long	.LCFI207-.LFB45
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI208-.LCFI207
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI209-.LCFI208
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI210-.LCFI209
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI211-.LCFI210
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI212-.LCFI211
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI213-.LCFI212
	.byte	0xe
	.uleb128 0x60
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.align 8
.LEFDE89:
.LSFDE91:
	.long	.LEFDE91-.LASFDE91
.LASFDE91:
	.long	.LASFDE91-.Lframe1
	.quad	.LFB46
	.quad	.LFE46-.LFB46
	.byte	0x4
	.long	.LCFI214-.LFB46
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI215-.LCFI214
	.byte	0xd
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI216-.LCFI215
	.byte	0x8f
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI217-.LCFI216
	.byte	0x8e
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI219-.LCFI217
	.byte	0x8c
	.uleb128 0x6
	.byte	0x8d
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI220-.LCFI219
	.byte	0x83
	.uleb128 0x7
	.align 8
.LEFDE91:
.LSFDE93:
	.long	.LEFDE93-.LASFDE93
.LASFDE93:
	.long	.LASFDE93-.Lframe1
	.quad	.LFB47
	.quad	.LFE47-.LFB47
	.byte	0x4
	.long	.LCFI222-.LFB47
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI223-.LCFI222
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI224-.LCFI223
	.byte	0xe
	.uleb128 0x20
	.byte	0x83
	.uleb128 0x3
	.align 8
.LEFDE93:
.LSFDE95:
	.long	.LEFDE95-.LASFDE95
.LASFDE95:
	.long	.LASFDE95-.Lframe1
	.quad	.LFB48
	.quad	.LFE48-.LFB48
	.byte	0x4
	.long	.LCFI225-.LFB48
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI226-.LCFI225
	.byte	0xe
	.uleb128 0x18
	.byte	0x8d
	.uleb128 0x3
	.byte	0x8e
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI227-.LCFI226
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI228-.LCFI227
	.byte	0xe
	.uleb128 0x28
	.byte	0x86
	.uleb128 0x5
	.byte	0x8c
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI229-.LCFI228
	.byte	0xe
	.uleb128 0x30
	.byte	0x83
	.uleb128 0x6
	.align 8
.LEFDE95:
.LSFDE97:
	.long	.LEFDE97-.LASFDE97
.LASFDE97:
	.long	.LASFDE97-.Lframe1
	.quad	.LFB49
	.quad	.LFE49-.LFB49
	.byte	0x4
	.long	.LCFI230-.LFB49
	.byte	0xe
	.uleb128 0x10
	.byte	0x83
	.uleb128 0x2
	.align 8
.LEFDE97:
.LSFDE99:
	.long	.LEFDE99-.LASFDE99
.LASFDE99:
	.long	.LASFDE99-.Lframe1
	.quad	.LFB50
	.quad	.LFE50-.LFB50
	.byte	0x4
	.long	.LCFI231-.LFB50
	.byte	0xe
	.uleb128 0x10
	.byte	0x83
	.uleb128 0x2
	.align 8
.LEFDE99:
.LSFDE101:
	.long	.LEFDE101-.LASFDE101
.LASFDE101:
	.long	.LASFDE101-.Lframe1
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.byte	0x4
	.long	.LCFI232-.LFB51
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI233-.LCFI232
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI234-.LCFI233
	.byte	0xe
	.uleb128 0x20
	.byte	0x86
	.uleb128 0x4
	.byte	0x8c
	.uleb128 0x3
	.byte	0x8d
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI235-.LCFI234
	.byte	0xe
	.uleb128 0x28
	.byte	0x83
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI236-.LCFI235
	.byte	0xe
	.uleb128 0x30
	.align 8
.LEFDE101:
.LSFDE103:
	.long	.LEFDE103-.LASFDE103
.LASFDE103:
	.long	.LASFDE103-.Lframe1
	.quad	.LFB52
	.quad	.LFE52-.LFB52
	.byte	0x4
	.long	.LCFI237-.LFB52
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI238-.LCFI237
	.byte	0xe
	.uleb128 0x18
	.byte	0x8d
	.uleb128 0x3
	.byte	0x8e
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI239-.LCFI238
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI240-.LCFI239
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI241-.LCFI240
	.byte	0xe
	.uleb128 0x30
	.byte	0x83
	.uleb128 0x6
	.byte	0x86
	.uleb128 0x5
	.byte	0x8c
	.uleb128 0x4
	.align 8
.LEFDE103:
.LSFDE105:
	.long	.LEFDE105-.LASFDE105
.LASFDE105:
	.long	.LASFDE105-.Lframe1
	.quad	.LFB53
	.quad	.LFE53-.LFB53
	.byte	0x4
	.long	.LCFI242-.LFB53
	.byte	0xe
	.uleb128 0x10
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI243-.LCFI242
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI244-.LCFI243
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI245-.LCFI244
	.byte	0xe
	.uleb128 0x28
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8e
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI246-.LCFI245
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI247-.LCFI246
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI248-.LCFI247
	.byte	0xe
	.uleb128 0x40
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.align 8
.LEFDE105:
.LSFDE107:
	.long	.LEFDE107-.LASFDE107
.LASFDE107:
	.long	.LASFDE107-.Lframe1
	.quad	.LFB54
	.quad	.LFE54-.LFB54
	.byte	0x4
	.long	.LCFI249-.LFB54
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI250-.LCFI249
	.byte	0xe
	.uleb128 0x18
	.byte	0x83
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI251-.LCFI250
	.byte	0xe
	.uleb128 0x20
	.align 8
.LEFDE107:
.LSFDE109:
	.long	.LEFDE109-.LASFDE109
.LASFDE109:
	.long	.LASFDE109-.Lframe1
	.quad	.LFB55
	.quad	.LFE55-.LFB55
	.byte	0x4
	.long	.LCFI252-.LFB55
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI253-.LCFI252
	.byte	0xd
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI255-.LCFI253
	.byte	0x8e
	.uleb128 0x4
	.byte	0x8f
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI256-.LCFI255
	.byte	0x8d
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI259-.LCFI256
	.byte	0x83
	.uleb128 0x7
	.byte	0x8c
	.uleb128 0x6
	.align 8
.LEFDE109:
.LSFDE111:
	.long	.LEFDE111-.LASFDE111
.LASFDE111:
	.long	.LASFDE111-.Lframe1
	.quad	.LFB56
	.quad	.LFE56-.LFB56
	.byte	0x4
	.long	.LCFI260-.LFB56
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI261-.LCFI260
	.byte	0xd
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI266-.LCFI261
	.byte	0x83
	.uleb128 0x7
	.byte	0x8c
	.uleb128 0x6
	.byte	0x8d
	.uleb128 0x5
	.byte	0x8e
	.uleb128 0x4
	.byte	0x8f
	.uleb128 0x3
	.align 8
.LEFDE111:
.LSFDE113:
	.long	.LEFDE113-.LASFDE113
.LASFDE113:
	.long	.LASFDE113-.Lframe1
	.quad	.LFB57
	.quad	.LFE57-.LFB57
	.byte	0x4
	.long	.LCFI268-.LFB57
	.byte	0xe
	.uleb128 0x10
	.byte	0x8e
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI269-.LCFI268
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI270-.LCFI269
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI271-.LCFI270
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI272-.LCFI271
	.byte	0xe
	.uleb128 0x30
	.byte	0x83
	.uleb128 0x6
	.byte	0x86
	.uleb128 0x5
	.byte	0x8c
	.uleb128 0x4
	.byte	0x8d
	.uleb128 0x3
	.align 8
.LEFDE113:
.LSFDE115:
	.long	.LEFDE115-.LASFDE115
.LASFDE115:
	.long	.LASFDE115-.Lframe1
	.quad	.LFB58
	.quad	.LFE58-.LFB58
	.byte	0x4
	.long	.LCFI273-.LFB58
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI274-.LCFI273
	.byte	0xd
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI280-.LCFI274
	.byte	0x83
	.uleb128 0x7
	.byte	0x8c
	.uleb128 0x6
	.byte	0x8d
	.uleb128 0x5
	.byte	0x8e
	.uleb128 0x4
	.byte	0x8f
	.uleb128 0x3
	.align 8
.LEFDE115:
.LSFDE117:
	.long	.LEFDE117-.LASFDE117
.LASFDE117:
	.long	.LASFDE117-.Lframe1
	.quad	.LFB59
	.quad	.LFE59-.LFB59
	.byte	0x4
	.long	.LCFI281-.LFB59
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI282-.LCFI281
	.byte	0xd
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI284-.LCFI282
	.byte	0x8e
	.uleb128 0x4
	.byte	0x8f
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI286-.LCFI284
	.byte	0x8c
	.uleb128 0x6
	.byte	0x8d
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI287-.LCFI286
	.byte	0x83
	.uleb128 0x7
	.align 8
.LEFDE117:
	.ident	"GCC: (GNU) 3.2"
