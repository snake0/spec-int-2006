	.file	"expr2.i"
	.data
	.align 8
	.type	placeholder_list,@object
	.size	placeholder_list,8
placeholder_list:
	.quad	0
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC0:
	.string	"expr.c"
.LC1:
	.string	"convert_move"
	.text
	.align 2
	.p2align 4,,15
.globl convert_move
	.type	convert_move,@function
convert_move:
.LFB1:
	pushq	%r15
.LCFI0:
	movq	%rdi, %r15
	pushq	%r14
.LCFI1:
	pushq	%r13
.LCFI2:
	pushq	%r12
.LCFI3:
	pushq	%rbp
.LCFI4:
	movq	%rsi, %rbp
	pushq	%rbx
.LCFI5:
	subq	$40, %rsp
.LCFI6:
	movl	%edx, 24(%rsp)
	.p2align 4,,7
.L98:
	movzbl	2(%r15), %ebx
	xorl	%edx, %edx
	movl	%ebx, 36(%rsp)
	movslq	%ebx,%r13
	movzbl	2(%rbp), %r14d
	cmpl	$2, mode_class(,%r13,4)
	sete	%dl
	xorl	%ecx, %ecx
	movslq	%r14d,%rax
	cmpl	$2, mode_class(,%rax,4)
	sete	%cl
	movl	%edx, 32(%rsp)
	xorl	%edx, %edx
	cmpl	$0, 24(%rsp)
	setne	%dl
	movl	%ecx, 28(%rsp)
	addl	$120, %edx
	movl	%edx, 20(%rsp)
	movzwl	(%r15), %eax
	cmpl	$71, %eax
	je	.L4
	cmpl	$66, %eax
	je	.L202
.L8:
	cmpl	$75, %eax
	je	.L12
	cmpl	$78, %eax
	je	.L12
.L7:
	movzwl	(%rbp), %eax
	cmpl	$71, %eax
	je	.L17
	cmpl	$66, %eax
	je	.L203
.L21:
	cmpl	$75, %eax
	je	.L25
	cmpl	$78, %eax
	je	.L25
.L20:
	movl	28(%rsp), %eax
	cmpl	%eax, 32(%rsp)
	jne	.L204
	movl	(%rbp), %eax
	andl	$268500991, %eax
	cmpl	$268435519, %eax
	je	.L205
.L31:
	movl	(%r15), %eax
	andl	$268500991, %eax
	cmpl	$268435519, %eax
	je	.L206
	cmpl	%r14d, 36(%rsp)
	je	.L39
	testl	%r14d, %r14d
	jne	.L33
	movl	(%rbp), %edx
	leal	-67(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L39
	cmpw	$54, %dx
	je	.L39
	cmpw	$55, %dx
	je	.L39
	cmpw	$58, %dx
	je	.L39
	cmpw	$134, %dx
	je	.L39
	cmpw	$56, %dx
	je	.L39
	cmpw	$140, %dx
	je	.L39
.L33:
	movl	mode_class(,%r13,4), %ecx
	subl	$7, %ecx
	cmpl	$1, %ecx
	jbe	.L172
	movslq	%r14d,%rdx
	movl	mode_class(,%rdx,4), %eax
	movq	%rdx, %rbx
	subl	$7, %eax
	cmpl	$1, %eax
	jbe	.L36
	movl	28(%rsp), %eax
	cmpl	%eax, 32(%rsp)
	jne	.L208
	movl	32(%rsp), %ecx
	testl	%ecx, %ecx
	jne	.L209
	movzwl	mode_bitsize(%r13,%r13), %ecx
	cmpw	%cx, mode_bitsize(%rdx,%rdx)
	jae	.L173
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %edx
	je	.L83
	cmpw	$64, %cx
.L182:
	ja	.L210
.L82:
	testl	$33554432, %eax
	je	.L120
	cmpw	$64, mode_bitsize(%rbx,%rbx)
.L185:
	jbe	.L119
	testl	$33554432, %eax
	je	.L122
	cmpw	$64, mode_bitsize(%r13,%r13)
.L186:
	ja	.L119
	movl	(%rbp), %eax
	andl	$134283263, %eax
	cmpl	$66, %eax
	je	.L211
.L125:
	movl	(%rbp), %eax
	cmpw	$61, %ax
	je	.L124
	cmpw	$63, %ax
	je	.L124
	movq	%rbp, %rsi
	movl	%r14d, %edi
	call	force_reg
	movq	%rax, %rbp
.L124:
	movl	word_mode(%rip), %edi
	movq	%rbp, %rsi
	call	gen_lowpart
	movl	$0, 24(%rsp)
	movq	%rax, %rbp
	jmp	.L98
	.p2align 6,,7
.L211:
	cmpb	$0, direct_load(%r13)
	je	.L125
	movq	8(%rbp), %rdi
	call	mode_dependent_address_p
	testl	%eax, %eax
	je	.L124
	jmp	.L125
.L119:
	cmpl	$8, 36(%rsp)
	je	.L212
	cmpl	$8, %r14d
	je	.L213
.L128:
	cmpl	$10, 36(%rsp)
	je	.L214
	cmpl	$10, %r14d
	je	.L215
.L133:
	cmpl	$11, 36(%rsp)
	je	.L216
	cmpl	$11, %r14d
	je	.L217
.L138:
	movslq	%r14d,%r12
	movzwl	mode_bitsize(%r13,%r13), %edx
	movzwl	mode_bitsize(%r12,%r12), %eax
	cmpw	%ax, %dx
	jb	.L218
	cmpw	%ax, %dx
	ja	.L219
	cmpl	$5, %r14d
	jne	.L159
	cmpl	$4, 36(%rsp)
	je	.L188
	cmpl	$3, 36(%rsp)
	je	.L188
	cmpl	$2, 36(%rsp)
	je	.L188
.L159:
	cmpl	$4, %r14d
	jne	.L161
	cmpl	$3, 36(%rsp)
	je	.L189
	cmpl	$2, 36(%rsp)
	je	.L189
.L161:
	cmpl	$3, %r14d
	jne	.L162
	cmpl	$2, 36(%rsp)
	je	.L220
.L162:
	cmpl	$6, %r14d
	jne	.L166
	cmpl	$5, 36(%rsp)
	je	.L178
	cmpl	$4, 36(%rsp)
	je	.L178
	cmpl	$3, 36(%rsp)
	je	.L178
	cmpl	$2, 36(%rsp)
	jne	.L166
.L178:
	movl	$6, %edi
.L179:
	movq	%rbp, %rsi
	call	force_reg
.L180:
	movq	%rax, %rbp
	jmp	.L98
.L166:
	movzwl	mode_bitsize(%r12,%r12), %eax
	cmpw	%ax, mode_bitsize(%r13,%r13)
	jae	.L167
	movl	36(%rsp), %edi
	movq	%rbp, %rsi
	call	gen_lowpart
	movl	36(%rsp), %edi
	movq	%rax, %rsi
	call	force_reg
.L201:
	movq	%rax, %rsi
.L191:
	movq	%r15, %rdi
.L194:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	emit_move_insn
.L167:
	movl	$.LC0, %edi
	movl	$1243, %esi
.L190:
	movl	$.LC1, %edx
	call	fancy_abort
.L220:
	movl	$3, %edi
	jmp	.L179
.L189:
	movl	$4, %edi
	jmp	.L179
.L188:
	movl	$5, %edi
	jmp	.L179
.L219:
	movl	36(%rsp), %edi
	movl	24(%rsp), %edx
	movl	%r14d, %esi
	call	can_extend_p
	cmpl	$1317, %eax
	movl	%eax, %ebx
	jne	.L221
	testl	%r14d, %r14d
	movl	%r14d, %ebx
	je	.L171
.L155:
	movl	36(%rsp), %edi
	movl	24(%rsp), %edx
	movl	%ebx, %esi
	call	can_extend_p
	cmpl	$1317, %eax
	je	.L222
.L154:
	movl	24(%rsp), %edx
	movl	%ebx, %edi
	movl	%r14d, %esi
	call	can_extend_p
	cmpl	$1317, %eax
	jne	.L176
	movslq	%ebx,%rdx
.L151:
	movzbl	mode_wider_mode(%rdx), %ebx
	testl	%ebx, %ebx
	jne	.L155
.L171:
	movzwl	mode_bitsize(%r12,%r12), %ecx
	movzwl	mode_bitsize(%r13,%r13), %ebx
	xorl	%esi, %esi
	subl	%ecx, %ebx
	movslq	%ebx,%rdi
	call	build_int_2_wide
	movq	%rbp, %rsi
	movl	%r14d, %edi
	movq	%rax, %r12
	call	force_reg
	movl	36(%rsp), %edi
	movq	%rax, %rsi
	call	gen_lowpart
	movl	24(%rsp), %r9d
	movq	%r15, %r8
	movl	36(%rsp), %esi
	movl	$82, %edi
	movq	%rax, %rdx
	movq	%r12, %rcx
	call	expand_shift
	movl	24(%rsp), %r9d
	movq	%r15, %r8
	movl	36(%rsp), %esi
	movl	$83, %edi
	movq	%rax, %rdx
	movq	%r12, %rcx
	call	expand_shift
	cmpq	%r15, %rax
	movq	%rax, %rsi
	jne	.L191
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L176:
	movl	24(%rsp), %edx
	movl	%ebx, %edi
	movq	%rbp, %rsi
	call	convert_to_mode
	jmp	.L180
	.p2align 6,,7
.L222:
	movslq	%ebx,%rdx
	movzbl	mode_size(%rdx), %r11d
	cmpb	%r11b, mode_size(%r13)
	jae	.L151
	jmp	.L154
.L221:
	movl	flag_force_mem(%rip), %eax
	testl	%eax, %eax
	jne	.L223
.L147:
	movl	%ebx, %edi
.L195:
	movq	%r15, %rsi
	movq	%rbp, %rdx
.L192:
	movl	20(%rsp), %ecx
.L193:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	emit_unop_insn
.L223:
	movq	%rbp, %rdi
	call	force_not_mem
	movq	%rax, %rbp
	jmp	.L147
.L218:
	movl	(%rbp), %eax
	andl	$134283263, %eax
	cmpl	$66, %eax
	je	.L224
.L143:
	movl	(%rbp), %eax
	cmpw	$61, %ax
	je	.L177
	cmpw	$63, %ax
	je	.L142
	movq	%rbp, %rsi
	movl	%r14d, %edi
	call	force_reg
	movq	%rax, %rbp
.L174:
	movl	(%rbp), %eax
.L142:
	cmpw	$61, %ax
	je	.L177
.L144:
	movl	36(%rsp), %edi
	movq	%rbp, %rsi
	call	gen_lowpart
	jmp	.L201
.L177:
	movl	8(%rbp), %edi
	cmpl	$52, %edi
	ja	.L144
	movl	36(%rsp), %esi
	call	ix86_hard_regno_mode_ok
	testl	%eax, %eax
	jne	.L144
	movq	%rbp, %rdi
	call	copy_to_reg
	movq	%rax, %rbp
	jmp	.L144
.L224:
	cmpb	$0, direct_load(%r13)
	je	.L143
	movq	8(%rbp), %rdi
	call	mode_dependent_address_p
	testl	%eax, %eax
	je	.L174
	jmp	.L143
	.p2align 6,,7
.L217:
	cmpl	$5, 36(%rsp)
	je	.L139
	movl	24(%rsp), %edx
	movq	%rbp, %rsi
	movl	$5, %edi
	movl	$5, %r14d
	call	convert_to_mode
	movq	%rax, %rbp
	jmp	.L138
.L139:
	movl	$.LC0, %edi
	movl	$1024, %esi
	jmp	.L190
	.p2align 6,,7
.L216:
	cmpl	$5, %r14d
	je	.L137
	movl	24(%rsp), %edx
	movl	$5, %edi
	movq	%rbp, %rsi
	call	convert_to_mode
.L137:
	movl	$.LC0, %edi
	movl	$1005, %esi
	jmp	.L190
	.p2align 6,,7
.L215:
	cmpl	$4, 36(%rsp)
	je	.L134
	movl	24(%rsp), %edx
	movq	%rbp, %rsi
	movl	$4, %edi
	movl	$4, %r14d
	call	convert_to_mode
	movq	%rax, %rbp
	jmp	.L133
.L134:
	movl	$.LC0, %edi
	movl	$989, %esi
	jmp	.L190
	.p2align 6,,7
.L214:
	cmpl	$4, %r14d
	je	.L132
	movl	24(%rsp), %edx
	movl	$4, %edi
	movq	%rbp, %rsi
	call	convert_to_mode
.L132:
	movl	$.LC0, %edi
	movl	$963, %esi
	jmp	.L190
	.p2align 6,,7
.L213:
	cmpl	$2, 36(%rsp)
	je	.L129
	movl	24(%rsp), %edx
	movq	%rbp, %rsi
	movl	$2, %edi
	movl	$2, %r14d
	call	convert_to_mode
	movq	%rax, %rbp
	jmp	.L128
.L129:
	movl	$.LC0, %edi
	movl	$947, %esi
	jmp	.L190
	.p2align 6,,7
.L212:
	cmpl	$2, %r14d
	je	.L127
	movl	24(%rsp), %edx
	movl	$2, %edi
	movq	%rbp, %rsi
	call	convert_to_mode
.L127:
	movl	$.LC0, %edi
	movl	$928, %esi
	jmp	.L190
	.p2align 6,,7
.L122:
	cmpw	$32, mode_bitsize(%r13,%r13)
	jmp	.L186
	.p2align 6,,7
.L120:
	cmpw	$32, mode_bitsize(%rbx,%rbx)
	jmp	.L185
.L210:
	testl	$33554432, %edx
	je	.L85
	movzbl	mode_size(%r13), %esi
	leal	7(%rsi), %ecx
.L86:
	andl	$33554432, %edx
	je	.L87
	cmpl	$-1, %ecx
	leal	7(%rcx), %edx
	cmovle	%edx, %ecx
	movl	%ecx, 16(%rsp)
	sarl	$3, 16(%rsp)
.L88:
	movl	36(%rsp), %edi
	movl	24(%rsp), %edx
	movl	%r14d, %esi
	call	can_extend_p
	cmpl	$1317, %eax
	movl	%eax, %r12d
	je	.L91
	movl	optimize(%rip), %eax
	testl	%eax, %eax
	jle	.L92
	cmpw	$63, (%rbp)
	je	.L225
.L92:
	movl	%r12d, %edi
	jmp	.L195
.L225:
	movq	%rbp, %rsi
	movl	%r14d, %edi
	call	force_reg
	movq	%rax, %rbp
	jmp	.L92
.L91:
	testb	$2, target_flags+3(%rip)
	je	.L95
	cmpw	$63, mode_bitsize(%rbx,%rbx)
.L183:
	ja	.L93
	movl	36(%rsp), %edi
	movl	word_mode(%rip), %esi
	movl	24(%rsp), %edx
	call	can_extend_p
	cmpl	$1317, %eax
	movl	%eax, %r12d
	je	.L93
	cmpw	$61, (%r15)
	je	.L226
.L97:
	movl	word_mode(%rip), %edi
	movq	%r15, %rsi
	call	gen_lowpart
	movl	24(%rsp), %edx
	movq	%rbp, %rsi
	movq	%rax, %rdi
	call	convert_move
	movl	word_mode(%rip), %edi
	movq	%r15, %rsi
	call	gen_lowpart
	movq	%r15, %rsi
	movl	%r12d, %edi
	movq	%rax, %rdx
	jmp	.L192
.L226:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r15, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L97
	.p2align 6,,7
.L93:
	call	start_sequence
	movq	%r15, %rdi
	movq	%rbp, %rsi
	call	reg_overlap_mentioned_p
	testl	%eax, %eax
	jne	.L227
.L99:
	testb	$2, target_flags+3(%rip)
	je	.L101
	cmpw	$63, mode_bitsize(%rbx,%rbx)
.L184:
	ja	.L100
	movl	word_mode(%rip), %ebx
.L103:
	movl	24(%rsp), %edx
	movl	%ebx, %edi
	movq	%rbp, %rsi
	call	convert_to_mode
	movq	%r15, %rsi
	movl	%ebx, %edi
	movq	%rax, %r13
	call	gen_lowpart
	movq	%rax, %rdi
	movq	%r13, %rsi
	call	emit_move_insn
	movl	24(%rsp), %r9d
	testl	%r9d, %r9d
	je	.L106
	movq	const_int_rtx+512(%rip), %r13
	movslq	%ebx,%r12
.L105:
	testb	$2, target_flags+3(%rip)
	je	.L108
	movzbl	mode_size(%r12), %ebx
	sarl	$3, %ebx
.L109:
	cmpl	16(%rsp), %ebx
	jl	.L118
.L169:
	call	get_insns
	movq	%rax, %r13
	call	end_sequence
	movq	%rbp, %rdi
	call	copy_rtx
	movl	36(%rsp), %esi
	movl	20(%rsp), %edi
	movq	%rax, %rdx
	call	gen_rtx_fmt_e
	addq	$40, %rsp
	xorl	%ecx, %ecx
	popq	%rbx
	movq	%rbp, %rdx
	movq	%r13, %rdi
	movq	%r15, %rsi
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	movq	%rax, %r8
	jmp	emit_no_conflict_block
.L118:
	movl	36(%rsp), %ecx
	movq	%r15, %rdi
	movl	%ebx, %esi
	movl	$1, %edx
	call	operand_subword
	testq	%rax, %rax
	movq	%rax, %rdi
	je	.L228
	cmpq	%rax, %r13
	je	.L114
	movq	%r13, %rsi
	call	emit_move_insn
.L114:
	incl	%ebx
	cmpl	16(%rsp), %ebx
	jl	.L118
	jmp	.L169
.L228:
	movl	$.LC0, %edi
	movl	$886, %esi
	jmp	.L190
	.p2align 6,,7
.L108:
	movzbl	mode_size(%r12), %ebx
	sarl	$2, %ebx
	jmp	.L109
.L106:
	movslq	%ebx,%r12
	xorl	%esi, %esi
	movzwl	mode_bitsize(%r12,%r12), %r10d
	decl	%r10d
	movslq	%r10d,%rdi
	call	size_int_wide
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	%r13, %rdx
	movq	%rax, %rcx
	movl	$83, %edi
	movl	%ebx, %esi
	call	expand_shift
	movl	$1, %edx
	movl	word_mode(%rip), %edi
	movq	%rax, %rsi
	call	convert_to_mode
	movq	%rax, %r13
	jmp	.L105
.L100:
	movl	%r14d, %ebx
	jmp	.L103
.L101:
	cmpw	$31, mode_bitsize(%rbx,%rbx)
	jmp	.L184
.L227:
	movq	%rbp, %rsi
	movl	%r14d, %edi
	call	force_reg
	movq	%rax, %rbp
	jmp	.L99
.L95:
	cmpw	$31, mode_bitsize(%rbx,%rbx)
	jmp	.L183
.L87:
	cmpl	$-1, %ecx
	leal	3(%rcx), %edi
	cmovle	%edi, %ecx
	movl	%ecx, 16(%rsp)
	sarl	$2, 16(%rsp)
	jmp	.L88
.L85:
	movzbl	mode_size(%r13), %r8d
	leal	3(%r8), %ecx
	jmp	.L86
	.p2align 6,,7
.L83:
	cmpw	$32, %cx
	jmp	.L182
	.p2align 6,,7
.L173:
	movl	target_flags(%rip), %eax
	jmp	.L82
.L209:
	movzwl	mode_bitsize(%r13,%r13), %eax
	cmpw	%ax, mode_bitsize(%rdx,%rdx)
	jb	.L229
.L42:
	movl	target_flags(%rip), %edx
	testl	$262145, %edx
	je	.L44
	cmpl	$16, %r14d
	je	.L230
.L44:
	movl	%edx, %r13d
	andl	$33554433, %r13d
	decl	%r13d
	je	.L231
.L45:
	movl	target_flags(%rip), %eax
	testl	$1, %eax
	je	.L46
	cmpl	$18, %r14d
	je	.L232
.L46:
	andl	$33554433, %edx
	decl	%edx
	je	.L233
.L47:
	andl	$1, %eax
	je	.L48
	cmpl	$18, %r14d
	je	.L234
.L48:
	xorl	%ebx, %ebx
	cmpl	$16, %r14d
	je	.L58
	cmpl	$16, %r14d
	ja	.L80
	cmpl	$15, %r14d
	je	.L50
.L49:
	testq	%rbx, %rbx
	je	.L235
	call	start_sequence
	movl	36(%rsp), %ecx
	movq	%rbx, %rdi
	movq	%rbp, %r9
	xorl	%esi, %esi
	movl	$1, %edx
	movl	$1, %r8d
	xorl	%eax, %eax
	movl	%r14d, (%rsp)
	call	emit_library_call_value
	movq	%rax, %r14
	call	get_insns
	movq	%rax, %r12
	call	end_sequence
	movl	36(%rsp), %esi
	movq	%rbp, %rdx
	movl	$124, %edi
	call	gen_rtx_fmt_e
	addq	$40, %rsp
	movq	%r14, %rdx
	popq	%rbx
	popq	%rbp
	movq	%r12, %rdi
	movq	%r15, %rsi
	movq	%rax, %rcx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	emit_libcall_block
.L235:
	movl	$.LC0, %edi
	movl	$781, %esi
	jmp	.L190
	.p2align 6,,7
.L50:
	cmpl	$17, 36(%rsp)
	je	.L53
	cmpl	$17, 36(%rsp)
	ja	.L57
	cmpl	$16, 36(%rsp)
	jne	.L49
	movq	libfunc_table(%rip), %rbx
	jmp	.L49
	.p2align 6,,7
.L57:
	cmpl	$18, 36(%rsp)
	jne	.L49
	movq	libfunc_table+16(%rip), %rbx
	jmp	.L49
	.p2align 6,,7
.L53:
	movq	libfunc_table+8(%rip), %rbx
	jmp	.L49
	.p2align 6,,7
.L80:
	cmpl	$17, %r14d
	je	.L66
	cmpl	$18, %r14d
	jne	.L49
	cmpl	$15, 36(%rsp)
	je	.L74
	cmpl	$16, 36(%rsp)
	jne	.L49
	movq	libfunc_table+72(%rip), %rbx
	jmp	.L49
.L74:
	movq	libfunc_table+56(%rip), %rbx
	jmp	.L49
.L66:
	cmpl	$15, 36(%rsp)
	je	.L68
	cmpl	$16, 36(%rsp)
	jne	.L49
	movq	libfunc_table+64(%rip), %rbx
	jmp	.L49
.L68:
	movq	libfunc_table+48(%rip), %rbx
	jmp	.L49
	.p2align 6,,7
.L58:
	cmpl	$17, 36(%rsp)
	je	.L61
	cmpl	$17, 36(%rsp)
	ja	.L65
	cmpl	$15, 36(%rsp)
	jne	.L49
	movq	libfunc_table+40(%rip), %rbx
	jmp	.L49
.L65:
	cmpl	$18, 36(%rsp)
	jne	.L49
	movq	libfunc_table+32(%rip), %rbx
	jmp	.L49
.L61:
	movq	libfunc_table+24(%rip), %rbx
	jmp	.L49
.L234:
	cmpl	$16, 36(%rsp)
	jne	.L48
	movl	$922, %edi
.L200:
	movq	%r15, %rsi
	movq	%rbp, %rdx
	xorl	%ecx, %ecx
	jmp	.L193
.L233:
	cmpl	$17, %r14d
	jne	.L47
	cmpl	$16, 36(%rsp)
	jne	.L47
	movl	$919, %edi
	jmp	.L200
	.p2align 6,,7
.L232:
	cmpl	$15, 36(%rsp)
	jne	.L46
	movl	$916, %edi
	jmp	.L200
	.p2align 6,,7
.L231:
	cmpl	$17, %r14d
	jne	.L45
	cmpl	$15, 36(%rsp)
	jne	.L45
	movl	$913, %edi
	jmp	.L200
	.p2align 6,,7
.L230:
	cmpl	$15, 36(%rsp)
	jne	.L44
	movl	$909, %edi
	jmp	.L200
	.p2align 6,,7
.L229:
	movl	36(%rsp), %edi
	xorl	%edx, %edx
	movl	%r14d, %esi
	call	can_extend_p
	cmpl	$1317, %eax
	movl	%eax, %edi
	je	.L42
	jmp	.L200
	.p2align 6,,7
.L208:
	movl	$.LC0, %edi
	movl	$539, %esi
	jmp	.L190
.L36:
	movzwl	mode_bitsize(%r13,%r13), %eax
	cmpw	%ax, mode_bitsize(%rdx,%rdx)
	jne	.L236
	cmpl	$1, %ecx
	ja	.L38
	movzbl	2(%rbp), %edx
	movl	36(%rsp), %edi
	movq	%rbp, %rsi
	xorl	%ecx, %ecx
	call	simplify_gen_subreg
	movq	%rax, %rbp
.L39:
	movq	%r15, %rdi
	movq	%rbp, %rsi
	jmp	.L194
.L38:
	movzbl	2(%r15), %edx
	movq	%r15, %rsi
	movl	%r14d, %edi
	xorl	%ecx, %ecx
	call	simplify_gen_subreg
	movq	%rax, %r15
	jmp	.L39
.L236:
	movl	$.LC0, %edi
	movl	$527, %esi
	jmp	.L190
	.p2align 6,,7
.L172:
	movslq	%r14d,%rdx
	jmp	.L36
.L206:
	movl	$.LC0, %edi
	movl	$515, %esi
	jmp	.L190
	.p2align 6,,7
.L205:
	movq	8(%rbp), %r10
	movzbl	mode_size(%r13), %edi
	movzbq	2(%r10), %r9
	cmpb	%dil, mode_size(%r9)
	jb	.L31
	movzbl	3(%rbp), %r11d
	shrb	$2, %r11b
	andl	$1, %r11d
	cmpl	24(%rsp), %r11d
	jne	.L31
	movl	36(%rsp), %edi
	movq	%rbp, %rsi
	call	gen_lowpart
	movl	36(%rsp), %r14d
	movq	%rax, %rbp
	jmp	.L31
.L204:
	movl	$.LC0, %edi
	movl	$502, %esi
	jmp	.L190
	.p2align 6,,7
.L25:
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbp), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%rbp), %r12
	movq	%rax, %rbx
	je	.L237
.L27:
	movq	%rbp, %rdi
	call	copy_rtx
	movq	%rax, %rbp
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L20
.L237:
	cmpq	16(%rbp), %rax
	jne	.L27
	jmp	.L20
	.p2align 6,,7
.L203:
	cmpb	$51, 2(%rbp)
	je	.L18
	movq	8(%rbp), %rbx
	cmpw	$71, (%rbx)
	je	.L238
.L18:
	cmpl	$66, %eax
	jne	.L21
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%rbp), %rax
	movq	%rax, %rbx
	je	.L20
	movq	%rbp, %rdi
	call	copy_rtx
	movq	%rax, %rbp
	movq	%rbx, 8(%rax)
	jmp	.L20
.L238:
	movq	8(%rbx), %rsi
	movq	%rbp, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%rbx)
	movq	%rax, %r12
	je	.L19
	movzbl	2(%rbp), %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbp
	call	gen_move_insn
	movq	16(%rbx), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L20
.L19:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
	.p2align 4,,7
.L181:
	movq	%rax, %rbp
	jmp	.L20
	.p2align 6,,7
.L17:
	cmpq	$0, 16(%rbp)
	je	.L239
	movq	24(%rbp), %rax
	testq	%rax, %rax
	jne	.L181
	movq	8(%rbp), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbp)
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbp), %rbp
	jmp	.L20
.L239:
	movq	8(%rbp), %rdi
	call	copy_to_reg
	jmp	.L181
	.p2align 6,,7
.L12:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r15), %r12
	movq	%rax, %rbx
	je	.L240
.L14:
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, %r15
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L7
.L240:
	cmpq	16(%r15), %rax
	jne	.L14
	jmp	.L7
	.p2align 6,,7
.L202:
	jne	.L8
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r15), %rax
	movq	%rax, %rbx
	je	.L7
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, %r15
	movq	%rbx, 8(%rax)
	jmp	.L7
	.p2align 6,,7
.L4:
	cmpq	$0, 16(%r15)
	je	.L241
	movq	24(%r15), %rdi
	testq	%rdi, %rdi
	je	.L16
	movq	%rdi, %r15
	jmp	.L7
.L16:
	movq	8(%r15), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L7
.L241:
	movq	8(%r15), %rdi
	call	copy_to_reg
	movq	%rax, %r15
	jmp	.L7
.LFE1:
.Lfe1:
	.size	convert_move,.Lfe1-convert_move
	.align 2
	.p2align 4,,15
.globl convert_to_mode
	.type	convert_to_mode,@function
convert_to_mode:
.LFB2:
	movq	%rsi, %r8
	movl	%edx, %ecx
	xorl	%esi, %esi
	movq	%r8, %rdx
	jmp	convert_modes
.LFE2:
.Lfe2:
	.size	convert_to_mode,.Lfe2-convert_to_mode
	.align 2
	.p2align 4,,15
.globl convert_modes
	.type	convert_modes,@function
convert_modes:
.LFB3:
	pushq	%r13
.LCFI7:
	movl	%ecx, %r13d
	pushq	%r12
.LCFI8:
	movl	%edi, %r12d
	pushq	%rbp
.LCFI9:
	movq	%rdx, %rbp
	pushq	%rbx
.LCFI10:
	movl	%esi, %ebx
	subq	$8, %rsp
.LCFI11:
	movl	(%rdx), %eax
	andl	$268500991, %eax
	cmpl	$268435519, %eax
	je	.L258
.L244:
	movzbl	2(%rbp), %r8d
	testb	%r8b, %r8b
	movzbl	%r8b, %edi
	cmovne	%edi, %ebx
	cmpl	%ebx, %r12d
	je	.L243
	testl	%r13d, %r13d
	je	.L255
	movslq	%r12d,%r8
	cmpl	$1, mode_class(,%r8,4)
	je	.L259
.L257:
	movl	(%rbp), %edx
.L247:
	cmpw	$54, %dx
	je	.L260
.L251:
	cmpl	$1, mode_class(,%r8,4)
	je	.L261
.L249:
	movl	%r12d, %edi
	call	gen_reg_rtx
	movl	%r13d, %edx
	movq	%rbp, %rsi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	convert_move
	movq	%r12, %rbp
.L243:
	addq	$8, %rsp
	movq	%rbp, %rax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret
	.p2align 6,,7
.L261:
	movslq	%ebx,%rax
	cmpl	$1, mode_class(,%rax,4)
	jne	.L249
	cmpw	$55, %dx
	je	.L250
	movzbl	mode_size(%rax), %r9d
	cmpb	%r9b, mode_size(%r8)
	ja	.L249
	movl	(%rbp), %eax
	andl	$134283263, %eax
	cmpl	$66, %eax
	je	.L262
.L252:
	cmpw	$61, %dx
	jne	.L249
	.p2align 4,,7
.L250:
	cmpw	$54, %dx
	jne	.L253
	testl	%ebx, %ebx
	je	.L253
	movslq	%ebx,%rdx
	movzbl	mode_size(%rdx), %r10d
	cmpb	%r10b, mode_size(%r8)
	jbe	.L253
	movzwl	mode_bitsize(%rdx,%rdx), %edx
	movl	$1, %r11d
	movq	8(%rbp), %rdi
	movl	%edx, %ecx
	salq	%cl, %r11
	decq	%r11
	andq	%r11, %rdi
	testl	%r13d, %r13d
	jne	.L254
	leal	-1(%rdx), %ecx
	movq	%rdi, %rax
	sarq	%cl, %rax
	testl	$1, %eax 
	je	.L254
	movq	$-1, %r13
	movl	%edx, %ecx
	salq	%cl, %r13
	orq	%r13, %rdi
.L254:
	movl	%r12d, %esi
	call	trunc_int_for_mode
	addq	$8, %rsp
	xorl	%edi, %edi
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	movq	%rax, %rsi
	jmp	gen_rtx_CONST_INT
	.p2align 6,,7
.L253:
	addq	$8, %rsp
	movq	%rbp, %rsi
	movl	%r12d, %edi
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	jmp	gen_lowpart
.L262:
	cmpb	$0, direct_load(%r8)
	jne	.L250
	jmp	.L252
	.p2align 6,,7
.L260:
	cmpw	$64, mode_bitsize(%r8,%r8)
	jbe	.L250
	jmp	.L251
	.p2align 6,,7
.L259:
	cmpw	$128, mode_bitsize(%r8,%r8)
	jne	.L257
	movl	(%rbp), %edx
	cmpw	$54, %dx
	jne	.L251
	movq	8(%rbp), %rdi
	testq	%rdi, %rdi
	jns	.L247
	testl	%ebx, %ebx
	je	.L248
	movslq	%ebx,%rbp
	movzwl	mode_bitsize(%rbp,%rbp), %ecx
	cmpw	$63, %cx
	ja	.L248
	movl	$1, %ebx
	salq	%cl, %rbx
	decq	%rbx
	andq	%rbx, %rdi
.L248:
	addq	$8, %rsp
	movl	%r12d, %edx
	xorl	%esi, %esi
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	jmp	immed_double_const
	.p2align 6,,7
.L255:
	movslq	%r12d,%r8
	jmp	.L257
	.p2align 6,,7
.L258:
	movq	8(%rdx), %rdx
	movslq	%edi,%rax
	movzbl	mode_size(%rax), %ecx
	movzbq	2(%rdx), %rsi
	cmpb	%cl, mode_size(%rsi)
	jb	.L244
	movzbl	3(%rbp), %ecx
	shrb	$2, %cl
	andl	$1, %ecx
	cmpl	%r13d, %ecx
	jne	.L244
	movq	%rbp, %rsi
	call	gen_lowpart
	movq	%rax, %rbp
	jmp	.L244
.LFE3:
.Lfe3:
	.size	convert_modes,.Lfe3-convert_modes
	.section	.rodata.str1.1
.LC2:
	.string	"emit_move_insn"
	.text
	.align 2
	.p2align 4,,15
.globl emit_move_insn
	.type	emit_move_insn,@function
emit_move_insn:
.LFB4:
	pushq	%r14
.LCFI12:
	pushq	%r13
.LCFI13:
	pushq	%r12
.LCFI14:
	pushq	%rbp
.LCFI15:
	movq	%rdi, %rbp
	pushq	%rbx
.LCFI16:
	movzwl	(%rdi), %eax
	movzbl	2(%rdi), %r14d
	movq	%rsi, %rbx
	cmpl	$71, %eax
	je	.L264
	cmpl	$66, %eax
	je	.L304
.L268:
	cmpl	$75, %eax
	je	.L272
	cmpl	$78, %eax
	je	.L272
.L267:
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L277
	cmpl	$66, %eax
	je	.L305
.L281:
	cmpl	$75, %eax
	je	.L285
	cmpl	$78, %eax
	je	.L285
.L280:
	cmpl	$51, %r14d
	je	.L291
	movzbl	2(%rbx), %edx
	movzbl	%dl, %ecx
	cmpl	%r14d, %ecx
	je	.L290
	testb	%dl, %dl
	jne	.L291
.L290:
	cmpw	$66, (%rbp)
	je	.L306
.L295:
	cmpw	$66, (%rbx)
	je	.L307
.L298:
	cmpl	$51, %r14d
	je	.L308
	movq	%rbx, %rsi
	movq	%rbp, %rdi
	call	emit_move_insn_1
	xorl	%r11d, %r11d
	testq	%r11, %r11
	movq	%rax, %rbx
	je	.L301
	cmpw	$61, (%rbp)
	je	.L309
.L301:
	movq	%rbx, %rax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	ret
	.p2align 6,,7
.L309:
	movq	%rax, %rdi
	movl	$4, %esi
	xorl	%edx, %edx
	call	set_unique_reg_note
	jmp	.L301
.L308:
	movl	$.LC0, %edi
	movl	$2796, %esi
.L303:
	movl	$.LC2, %edx
	call	fancy_abort
	.p2align 6,,7
.L307:
	movzbl	2(%rbx), %edi
	movq	8(%rbx), %rsi
	call	memory_address_p
	testl	%eax, %eax
	je	.L299
	movl	flag_force_addr(%rip), %r8d
	testl	%r8d, %r8d
	je	.L298
	movq	8(%rbx), %r10
	movzwl	(%r10), %edx
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L299
	cmpw	$54, %dx
	je	.L299
	cmpw	$58, %dx
	je	.L299
	cmpw	$55, %dx
	jne	.L298
.L299:
	movq	%rbx, %rdi
	call	validize_mem
	movq	%rax, %rbx
	jmp	.L298
	.p2align 6,,7
.L306:
	movzbl	2(%rbp), %edi
	movq	8(%rbp), %rsi
	call	memory_address_p
	testl	%eax, %eax
	je	.L310
.L297:
	movl	flag_force_addr(%rip), %eax
	testl	%eax, %eax
	je	.L295
	movq	8(%rbp), %rdi
	movzwl	(%rdi), %edx
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L296
	cmpw	$54, %dx
	je	.L296
	cmpw	$58, %dx
	je	.L296
	cmpw	$55, %dx
	jne	.L295
.L296:
	movq	%rbp, %rdi
	call	validize_mem
	movq	%rax, %rbp
	jmp	.L295
.L310:
	movzbl	2(%rbp), %esi
	movq	%rbp, %rdi
	call	push_operand
	testl	%eax, %eax
	je	.L296
	jmp	.L297
.L291:
	movl	$.LC0, %edi
	movl	$2769, %esi
	jmp	.L303
	.p2align 6,,7
.L285:
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbx), %rdi
	movq	%rax, %r13
	call	protect_from_queue
	cmpq	8(%rbx), %r13
	movq	%rax, %r12
	je	.L311
.L287:
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r13, 8(%rax)
	movq	%r12, 16(%rax)
	jmp	.L280
.L311:
	cmpq	16(%rbx), %rax
	jne	.L287
	jmp	.L280
	.p2align 6,,7
.L305:
	cmpb	$51, 2(%rbx)
	je	.L278
	movq	8(%rbx), %r12
	cmpw	$71, (%r12)
	je	.L312
.L278:
	cmpl	$66, %eax
	jne	.L281
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%rbx), %rax
	movq	%rax, %r12
	je	.L280
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r12, 8(%rax)
	jmp	.L280
.L312:
	movq	8(%r12), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %r13
	je	.L279
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L280
.L279:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%r13, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L302:
	movq	%rax, %rbx
	jmp	.L280
	.p2align 6,,7
.L277:
	cmpq	$0, 16(%rbx)
	je	.L313
	movq	24(%rbx), %rsi
	testq	%rsi, %rsi
	je	.L289
	movq	%rsi, %rbx
	jmp	.L280
.L289:
	movq	8(%rbx), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%rbx), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	16(%rbx), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbx), %rbx
	jmp	.L280
.L313:
	movq	8(%rbx), %rdi
	call	copy_to_reg
	jmp	.L302
	.p2align 6,,7
.L272:
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbp), %rdi
	movq	%rax, %r13
	call	protect_from_queue
	cmpq	8(%rbp), %r13
	movq	%rax, %r12
	je	.L314
.L274:
	movq	%rbp, %rdi
	call	copy_rtx
	movq	%rax, %rbp
	movq	%r13, 8(%rax)
	movq	%r12, 16(%rax)
	jmp	.L267
.L314:
	cmpq	16(%rbp), %rax
	jne	.L274
	jmp	.L267
	.p2align 6,,7
.L304:
	jne	.L268
	movq	8(%rdi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%rbp), %rax
	movq	%rax, %r12
	je	.L267
	movq	%rbp, %rdi
	call	copy_rtx
	movq	%rax, %rbp
	movq	%r12, 8(%rax)
	jmp	.L267
	.p2align 6,,7
.L264:
	cmpq	$0, 16(%rdi)
	je	.L315
	movq	24(%rdi), %rdi
	testq	%rdi, %rdi
	je	.L276
	movq	%rdi, %rbp
	jmp	.L267
.L276:
	movq	8(%rbp), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbp)
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbp), %rbp
	jmp	.L267
.L315:
	movq	8(%rdi), %rdi
	call	copy_to_reg
	movq	%rax, %rbp
	jmp	.L267
.LFE4:
.Lfe4:
	.size	emit_move_insn,.Lfe4-emit_move_insn
	.section	.rodata.str1.32,"aMS",@progbits,1
	.align 32
.LC4:
	.string	"function using short complex types cannot be inline"
	.section	.rodata.str1.1
.LC3:
	.string	"emit_move_insn_1"
	.text
	.align 2
	.p2align 4,,15
.globl emit_move_insn_1
	.type	emit_move_insn_1,@function
emit_move_insn_1:
.LFB5:
	pushq	%r15
.LCFI17:
	movq	%rdi, %r15
	pushq	%r14
.LCFI18:
	pushq	%r13
.LCFI19:
	pushq	%r12
.LCFI20:
	pushq	%rbp
.LCFI21:
	pushq	%rbx
.LCFI22:
	subq	$24, %rsp
.LCFI23:
	movq	%rsi, 8(%rsp)
	.p2align 4,,7
.L355:
	movzbl	2(%r15), %r14d
	movslq	%r14d,%rbp
	cmpl	$58, %r14d
	movl	mode_class(,%rbp,4), %r12d
	ja	.L413
	movq	%rbp, %rdx
	salq	$4, %rdx
	addq	optab_table+240(%rip), %rdx
	movl	8(%rdx), %eax
	cmpl	$1317, %eax
	jne	.L414
	leal	-5(%r12), %edx
	cmpl	$1, %edx
	ja	.L320
	movzbl	mode_unit_size(%rbp), %edi
	sall	$3, %edi
	cmpl	$5, %r12d
	setne	%al
	xorl	%edx, %edx
	movzbl	%al, %esi
	incl	%esi
	call	mode_for_size
	cmpl	$51, %eax
	movl	%eax, 20(%rsp)
	je	.L320
	movslq	%eax,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L320
	movzbl	2(%r15), %esi
	movq	%r15, %rdi
	call	push_operand
	testl	%eax, %eax
	movl	%eax, %esi
	je	.L403
	movl	target_flags(%rip), %ecx
	testl	$33554432, %ecx
	movl	%ecx, %edi
	je	.L326
	movzbl	mode_size(%rbx), %edx
	leal	7(%rdx), %eax
	andl	$-8, %eax
.L405:
	cmpl	%edx, %eax
	jne	.L415
	testl	%esi, %esi
	jne	.L416
.L342:
	andl	$33554432, %ecx
	je	.L345
	cmpw	$127, mode_bitsize(%rbp,%rbp)
.L406:
	ja	.L344
	movl	reload_completed(%rip), %eax
	orl	reload_in_progress(%rip), %eax
	jne	.L344
	xorl	%r13d, %r13d
	cmpw	$61, (%r15)
	je	.L417
.L347:
	movq	8(%rsp), %rax
	xorl	%edx, %edx
	cmpw	$61, (%rax)
	je	.L418
.L348:
	testl	%r13d, %r13d
	jne	.L350
	testl	%edx, %edx
	je	.L344
.L350:
	cmpl	$6, %r12d
	movzwl	mode_bitsize(%rbp,%rbp), %edi
	movl	$1, %edx
	sete	%al
	movzbl	%al, %esi
	incl	%esi
	call	mode_for_size
	cmpl	$51, %eax
	movl	%eax, %r12d
	je	.L344
	movzbq	mode_size(%rbp), %rsi
	xorl	%edx, %edx
	movl	%eax, %edi
	call	assign_stack_temp
	movl	$1, %r8d
	movl	$1, %ecx
	movl	%r14d, %esi
	xorl	%edx, %edx
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	adjust_address_1
	testl	%r13d, %r13d
	movq	cfun(%rip), %rsi
	movq	%rax, %rbp
	movq	$.LC4, 136(%rsi)
	jne	.L419
	movq	8(%rsp), %rsi
	movl	%r12d, %edi
	xorl	%edx, %edx
	call	gen_rtx_SUBREG
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	emit_move_insn_1
	movq	%rbp, 8(%rsp)
	jmp	.L355
.L419:
	movq	%r15, %rsi
	movl	%r12d, %edi
	xorl	%edx, %edx
	call	gen_rtx_SUBREG
	movq	8(%rsp), %rsi
	movq	%rbp, %rdi
	movq	%rax, %r15
	call	emit_move_insn_1
	movq	%rbx, 8(%rsp)
	jmp	.L355
.L344:
	movl	20(%rsp), %edi
	movq	%r15, %rsi
	call	gen_realpart
	movq	8(%rsp), %rsi
	movl	20(%rsp), %edi
	movq	%rax, %r12
	call	gen_realpart
	movq	%r15, %rsi
	movl	20(%rsp), %edi
	movq	%rax, %rbp
	call	gen_imagpart
	movq	8(%rsp), %rsi
	movl	20(%rsp), %edi
	movq	%rax, %r14
	call	gen_imagpart
	cmpq	8(%rsp), %r15
	movq	%rax, %r13
	je	.L357
	movl	reload_in_progress(%rip), %eax
	testl	%eax, %eax
	jne	.L357
	movl	reload_completed(%rip), %r8d
	testl	%r8d, %r8d
	jne	.L357
	cmpw	$63, (%r12)
	je	.L358
	cmpw	$63, (%r14)
	je	.L358
.L357:
	salq	$4, %rbx
	movq	%rbp, %rsi
	movq	%r12, %rdi
	movq	%rbx, %r15
	xorl	%eax, %eax
	addq	optab_table+240(%rip), %r15
	movslq	8(%r15),%r11
	leaq	(%r11,%r11,4), %r10
	call	*insn_data+16(,%r10,8)
	movq	%rax, %rdi
	call	emit_insn
	movq	%r13, %rsi
	movq	%r14, %rdi
	addq	optab_table+240(%rip), %rbx
	movslq	8(%rbx),%r9
	leaq	(%r9,%r9,4), %rdx
.L407:
	xorl	%eax, %eax
	call	*insn_data+16(,%rdx,8)
	movq	%rax, %rdi
	call	emit_insn
.L341:
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	get_last_insn
.L358:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r15, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L357
	.p2align 6,,7
.L418:
	cmpl	$52, 8(%rax)
	movl	$1, %eax
	cmovbe	%eax, %edx
	jmp	.L348
	.p2align 6,,7
.L417:
	cmpl	$52, 8(%r15)
	movl	$1, %eax
	cmovbe	%eax, %r13d
	jmp	.L347
	.p2align 6,,7
.L345:
	cmpw	$63, mode_bitsize(%rbp,%rbp)
	jmp	.L406
.L416:
	movq	8(%r15), %rsi
	movl	20(%rsp), %edi
	salq	$4, %rbx
	call	gen_rtx_MEM
	movq	8(%rsp), %rsi
	movl	20(%rsp), %edi
	movq	%rax, %r13
	call	gen_imagpart
	movq	%rbx, %rdx
	addq	optab_table+240(%rip), %rdx
	movq	%rax, %rsi
	xorl	%eax, %eax
	movslq	8(%rdx),%rdi
	leaq	(%rdi,%rdi,4), %rbp
	movq	%r13, %rdi
	call	*insn_data+16(,%rbp,8)
	movq	%rax, %rdi
	call	emit_insn
	movq	8(%r15), %rsi
	movl	20(%rsp), %edi
	call	gen_rtx_MEM
	movq	8(%rsp), %rsi
	movl	20(%rsp), %edi
	movq	%rax, %r15
	call	gen_realpart
	movq	%r15, %rdi
	addq	optab_table+240(%rip), %rbx
	movq	%rax, %rsi
	movslq	8(%rbx),%rcx
	leaq	(%rcx,%rcx,4), %rdx
	jmp	.L407
.L415:
	andl	$33554432, %edi
	je	.L328
	movzbq	2(%r15), %rbp
	movzbl	mode_size(%rbp), %edi
	addl	$7, %edi
	movq	%rdi, %rsi
	andl	$504, %esi
.L329:
	xorl	%edi, %edi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movq	optab_table+16(%rip), %rsi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	movl	$3, (%rsp)
	setne	%r10b
	xorl	%r9d, %r9d
	movq	%rdx, %r8
	movzbl	%r10b, %edi
	addl	$4, %edi
	call	expand_binop
	movq	global_rtl+16(%rip), %rdi
	cmpq	%rdi, %rax
	je	.L332
	movq	%rax, %rsi
	call	emit_move_insn
.L332:
	xorl	%edi, %edi
	xorl	%esi, %esi
	movzbq	mode_size(%rbx), %r13
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movl	20(%rsp), %esi
	movq	%r15, %rdi
	movq	%rax, %rdx
	call	change_address
	movq	8(%rsp), %rsi
	movl	20(%rsp), %edi
	movq	%rax, %r14
	call	gen_realpart
	movq	%r14, %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	movq	%r13, %rsi
	xorl	%edi, %edi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r11b
	movzbl	%r11b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movl	20(%rsp), %esi
	movq	%r15, %rdi
	movq	%rax, %rdx
	call	change_address
	movq	8(%rsp), %rsi
	movl	20(%rsp), %edi
	movq	%rax, %r12
	call	gen_imagpart
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L341
.L328:
	movzbq	2(%r15), %r9
	movzbl	mode_size(%r9), %r8d
	incl	%r8d
	movq	%r8, %rsi
	andl	$510, %esi
	jmp	.L329
	.p2align 6,,7
.L326:
	movzbl	mode_size(%rbx), %edx
	leal	1(%rdx), %eax
	andl	$-2, %eax
	jmp	.L405
	.p2align 6,,7
.L403:
	movl	target_flags(%rip), %ecx
	jmp	.L342
.L320:
	testb	$2, target_flags+3(%rip)
	je	.L361
	cmpb	$8, mode_size(%rbp)
.L408:
	jbe	.L360
	movzbl	2(%r15), %esi
	movq	%r15, %rdi
	xorl	%ebx, %ebx
	call	push_operand
	testl	%eax, %eax
	je	.L363
	testb	$2, target_flags+3(%rip)
	je	.L364
	movzbq	2(%r15), %rcx
	movzbl	mode_size(%rcx), %r12d
	addl	$7, %r12d
	movq	%r12, %rsi
	andl	$504, %esi
.L365:
	xorl	%edi, %edi
	call	gen_rtx_CONST_INT
	movq	optab_table+16(%rip), %rsi
	movl	$3, (%rsp)
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%dl
	xorl	%r9d, %r9d
	movzbl	%dl, %edi
	movq	global_rtl+16(%rip), %rdx
	addl	$4, %edi
	movq	%rdx, %r8
	call	expand_binop
	movq	global_rtl+16(%rip), %rdi
	cmpq	%rdi, %rax
	je	.L368
	movq	%rax, %rsi
	call	emit_move_insn
.L368:
	movq	8(%r15), %rsi
	movzwl	(%rsi), %eax
	cmpl	$99, %eax
	je	.L420
	cmpl	$98, %eax
	je	.L421
	movq	global_rtl+16(%rip), %rdx
.L374:
	movq	%r15, %rdi
	xorl	%esi, %esi
	call	change_address
	movq	%rax, %r15
.L363:
	movl	reload_in_progress(%rip), %eax
	testl	%eax, %eax
	je	.L382
	cmpw	$66, (%r15)
	je	.L422
.L381:
	testl	%eax, %eax
	je	.L382
	movq	8(%rsp), %rax
	cmpw	$66, (%rax)
	je	.L423
.L382:
	call	start_sequence
	xorl	%r13d, %r13d
	xorl	%r12d, %r12d
	.p2align 4,,7
.L383:
	movl	target_flags(%rip), %ecx
	testl	$33554432, %ecx
	je	.L387
	movzbl	mode_size(%rbp), %edi
	leal	7(%rdi), %edx
.L388:
	andl	$33554432, %ecx
	je	.L389
	cmpl	$-1, %edx
	leal	7(%rdx), %r8d
	cmovle	%r8d, %edx
	sarl	$3, %edx
.L411:
	cmpl	%edx, %r12d
	jge	.L424
	movq	%r15, %rdi
	movl	%r12d, %esi
	movl	$1, %edx
	movl	%r14d, %ecx
	call	operand_subword
	movl	%r14d, %ecx
	movl	$1, %edx
	movq	8(%rsp), %rdi
	movl	%r12d, %esi
	movq	%rax, %rbx
	call	operand_subword
	testq	%rax, %rax
	movq	%rax, %rdx
	jne	.L395
	movq	8(%rsp), %r11
	movzwl	(%r11), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L394
	cmpw	$54, %dx
	je	.L394
	cmpw	$55, %dx
	je	.L394
	cmpw	$58, %dx
	je	.L394
	cmpw	$134, %dx
	je	.L394
	cmpw	$56, %dx
	je	.L394
	cmpw	$140, %dx
	je	.L394
	movq	8(%rsp), %rdi
	movl	%r12d, %esi
	movl	%r14d, %edx
	call	operand_subword_force
	.p2align 4,,7
.L410:
	movq	%rax, %rdx
.L395:
	testq	%rbx, %rbx
	je	.L398
	testq	%rdx, %rdx
	je	.L398
	movl	%r13d, %ecx
	movq	%rbx, %rdi
	movq	%rdx, %rsi
	orl	$1, %ecx
	cmpw	$63, (%rbx)
	cmove	%ecx, %r13d
	incl	%r12d
	call	emit_move_insn
	movq	%rax, %rbx
	jmp	.L383
.L398:
	movl	$.LC0, %edi
	movl	$3077, %esi
	jmp	.L412
	.p2align 6,,7
.L394:
	movq	8(%rsp), %rsi
	movl	%r14d, %edi
	call	force_const_mem
	movl	%r14d, %ecx
	movl	$1, %edx
	movq	%rax, %rdi
	movl	%r12d, %esi
	movq	%rax, 8(%rsp)
	call	operand_subword
	jmp	.L410
.L424:
	call	gen_sequence
	movq	%rax, %rbp
	call	end_sequence
	cmpq	8(%rsp), %r15
	je	.L401
	movl	reload_in_progress(%rip), %r14d
	testl	%r14d, %r14d
	jne	.L401
	movl	reload_completed(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L401
	testl	%r13d, %r13d
	jne	.L425
.L401:
	movq	%rbp, %rdi
	call	emit_insn
	addq	$24, %rsp
	movq	%rbx, %rax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L425:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r15, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L401
	.p2align 6,,7
.L389:
	cmpl	$-1, %edx
	leal	3(%rdx), %r9d
	cmovle	%r9d, %edx
	sarl	$2, %edx
	jmp	.L411
	.p2align 6,,7
.L387:
	movzbl	mode_size(%rbp), %esi
	leal	3(%rsi), %edx
	jmp	.L388
.L423:
	movq	%rax, %rdi
	addq	$8, %rdi
	call	find_replacement
	movq	%rax, %rsi
	movq	8(%rsp), %rax
	cmpq	8(%rax), %rsi
	je	.L382
	movq	%rax, %rdi
	call	replace_equiv_address_nv
	movq	%rax, 8(%rsp)
	jmp	.L382
.L422:
	leaq	8(%r15), %rdi
	call	find_replacement
	cmpq	8(%r15), %rax
	movq	%rax, %rsi
	je	.L404
	movq	%r15, %rdi
	call	replace_equiv_address_nv
	movq	%rax, %r15
.L404:
	movl	reload_in_progress(%rip), %eax
	jmp	.L381
.L421:
	movzbq	2(%r15), %r9
	movzbq	mode_size(%r9), %rsi
.L409:
	xorl	%edi, %edi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	%rax, %rdx
	jmp	.L374
.L420:
	movzbq	2(%r15), %r8
	movzbq	mode_size(%r8), %rsi
	negq	%rsi
	jmp	.L409
.L364:
	movzbq	2(%r15), %rdi
	movzbl	mode_size(%rdi), %r13d
	incl	%r13d
	movq	%r13, %rsi
	andl	$510, %esi
	jmp	.L365
.L360:
	movl	$.LC0, %edi
	movl	$3101, %esi
.L412:
	movl	$.LC3, %edx
	call	fancy_abort
.L361:
	cmpb	$4, mode_size(%rbp)
	jmp	.L408
.L414:
	movslq	%eax,%rbx
	movq	%r15, %rdi
	movq	8(%rsp), %rsi
	leaq	(%rbx,%rbx,4), %rcx
	xorl	%eax, %eax
	call	*insn_data+16(,%rcx,8)
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	movq	%rax, %rdi
	jmp	emit_insn
.L413:
	movl	$.LC0, %edi
	movl	$2819, %esi
	jmp	.L412
.LFE5:
.Lfe5:
	.size	emit_move_insn_1,.Lfe5-emit_move_insn_1
	.local	fn.0
	.comm	fn.0,8,8
	.local	fn.1
	.comm	fn.1,8,8
	.section	.rodata.str1.1
.LC8:
	.string	"store_constructor"
.LC7:
	.string	"memset"
.LC6:
	.string	"store_by_pieces_1"
.LC5:
	.string	"move_by_pieces_ninsns"
.LC13:
	.string	"__setbits"
.LC11:
	.string	"memcpy"
.LC10:
	.string	"move_by_pieces"
.LC9:
	.string	"emit_block_move"
.LC12:
	.string	"emit_group_load"
	.text
	.align 2
	.p2align 4,,15
	.type	store_constructor,@function
store_constructor:
.LFB6:
	pushq	%rbp
.LCFI24:
	movq	%rsp, %rbp
.LCFI25:
	pushq	%r15
.LCFI26:
	pushq	%r14
.LCFI27:
	pushq	%r13
.LCFI28:
	pushq	%r12
.LCFI29:
	pushq	%rbx
.LCFI30:
	subq	$2664, %rsp
.LCFI31:
	movq	%rcx, -712(%rbp)
	movl	%edx, -1884(%rbp)
	movq	%rdi, -704(%rbp)
	movq	%rsi, -1744(%rbp)
	movq	8(%rdi), %rcx
	movq	%rcx, -720(%rbp)
	movzbl	16(%rcx), %edx
	leal	-20(%rdx), %ecx
	cmpb	$2, %cl
	ja	.L427
	leal	-21(%rdx), %ebx
	cmpb	$1, %bl
	ja	.L428
	movl	-1884(%rbp), %eax
	testl	%eax, %eax
	jne	.L740
	cmpq	$0, 40(%rdi)
	je	.L4772
.L428:
	movl	-1884(%rbp), %r12d
	testl	%r12d, %r12d
	jne	.L740
	movq	-1744(%rbp), %rsi
	cmpw	$61, (%rsi)
	je	.L4773
.L563:
	movl	-1884(%rbp), %r11d
	testl	%r11d, %r11d
	jne	.L740
	cmpq	$0, -712(%rbp)
	jle	.L562
	movq	-704(%rbp), %r15
	movq	40(%r15), %rdi
	call	list_length
	movq	-720(%rbp), %rdi
	movl	%eax, %r14d
	call	fields_length
	cmpl	%eax, %r14d
	je	.L4774
.L568:
	movq	-1744(%rbp), %rbx
	cmpw	$61, (%rbx)
	je	.L4775
.L606:
	movq	-1744(%rbp), %r11
	movq	-712(%rbp), %rsi
	xorl	%edi, %edi
	movq	%r11, -1712(%rbp)
	call	gen_rtx_CONST_INT
	movq	%rax, %r15
	movq	-1744(%rbp), %rax
	cmpw	$66, (%rax)
	je	.L4776
	movq	-1744(%rbp), %rbx
	movzbl	2(%rbx), %edi
	call	get_mode_alignment
.L4521:
	movl	%eax, -1700(%rbp)
.L608:
	movq	-1744(%rbp), %rbx
	movzbl	2(%rbx), %eax
	cmpb	$51, %al
	je	.L611
	cmpw	$54, (%r15)
	je	.L4777
.L611:
	movq	-1744(%rbp), %rsi
	movzwl	(%rsi), %eax
	cmpl	$71, %eax
	je	.L613
	cmpl	$66, %eax
	je	.L4778
.L617:
	cmpl	$75, %eax
	je	.L621
	cmpl	$78, %eax
	je	.L621
.L616:
	movzwl	(%r15), %eax
	cmpl	$71, %eax
	je	.L626
	cmpl	$66, %eax
	je	.L4779
.L630:
	cmpl	$75, %eax
	je	.L634
	cmpl	$78, %eax
	je	.L634
.L629:
	cmpw	$54, (%r15)
	je	.L4780
.L639:
	shrl	$3, -1700(%rbp)
	xorl	%edi, %edi
	mov	-1700(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %ebx
	movq	%rax, -760(%rbp)
	testl	%ebx, %ebx
	je	.L4175
.L733:
	movslq	%ebx,%r12
	movl	clrstr_optab(,%r12,4), %edx
	cmpl	$1317, %edx
	je	.L720
	cmpw	$54, (%r15)
	je	.L4781
.L724:
	testb	$2, target_flags+3(%rip)
	je	.L725
	cmpw	$63, mode_bitsize(%r12,%r12)
.L4524:
	jbe	.L720
.L723:
	movslq	%edx,%r14
	leaq	(%r14,%r14,4), %rcx
	movq	insn_data+24(,%rcx,8), %r13
	movq	(%r13), %rax
	testq	%rax, %rax
	je	.L727
	movq	-1712(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L720
.L727:
	movq	48(%r13), %rax
	testq	%rax, %rax
	je	.L728
	xorl	%esi, %esi
	movq	-760(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L720
.L728:
	call	get_last_insn
	movl	$1, %edx
	movq	%r15, %rsi
	movl	%ebx, %edi
	movq	%rax, -768(%rbp)
	call	convert_to_mode
	movq	%rax, %r8
	movq	24(%r13), %rax
	testq	%rax, %rax
	jne	.L4782
.L729:
	leaq	(%r14,%r14,4), %r13
	xorl	%eax, %eax
	movq	-1712(%rbp), %rdi
	movq	%r8, %rsi
	movq	-760(%rbp), %rdx
	call	*insn_data+16(,%r13,8)
	testq	%rax, %rax
	jne	.L4525
	movq	-768(%rbp), %rdi
	call	delete_insns_since
.L720:
	movzbl	mode_wider_mode(%r12), %ebx
	testl	%ebx, %ebx
	jne	.L733
.L4175:
	testb	$2, target_flags+3(%rip)
	movq	-1712(%rbp), %rax
	setne	%dl
	movq	8(%rax), %rsi
	movzbl	%dl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%r15, %rsi
	movq	sizetype_tab(%rip), %r8
	movq	%rax, %r13
	movzbl	61(%r8), %r12d
	shrb	$1, %r12b
	movzbl	%r12b, %edi
.L4771:
	call	copy_to_mode_reg
	cmpq	$0, fn.0(%rip)
	movq	%rax, %r14
	je	.L4783
.L738:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r13, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	const_int_rtx+512(%rip), %rsi
	movq	integer_types+40(%rip), %rdi
	movq	%rax, %r15
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r14, %rsi
	movq	%rax, (%r15)
	movq	%rax, %r12
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.0(%rip), %r11
	movq	%rax, (%r12)
	movq	(%r15), %rcx
	movq	8(%r11), %rdi
	movq	(%rcx), %r14
	movq	$0, (%r14)
	call	build_pointer_type
	movq	fn.0(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r15, %rcx
	movq	fn.0(%rip), %rsi
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%rsi), %r10
	movq	8(%r10), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r13)
	jne	.L4784
.L731:
	movl	$1, -1884(%rbp)
.L562:
	movl	-1884(%rbp), %eax
	testl	%eax, %eax
	je	.L4785
.L740:
	movq	-704(%rbp), %r13
	movq	40(%r13), %r15
	testq	%r15, %r15
	je	.L426
	.p2align 4,,7
.L804:
	movq	24(%r15), %r12
	movq	32(%r15), %rsi
	movq	-1744(%rbp), %r13
	testq	%r12, %r12
	movq	%rsi, -776(%rbp)
	je	.L743
	movl	-1884(%rbp), %eax
	testl	%eax, %eax
	je	.L746
	movzbl	16(%rsi), %eax
	cmpl	$28, %eax
	je	.L757
	cmpl	$28, %eax
	ja	.L774
	cmpl	$26, %eax
	je	.L756
	cmpl	$26, %eax
	ja	.L754
	cmpl	$25, %eax
	je	.L753
.L772:
	xorl	%ebx, %ebx
.L752:
	testl	%ebx, %ebx
	jne	.L743
.L746:
	movq	40(%r12), %rdi
	movl	$1, %esi
	call	host_integerp
	testl	%eax, %eax
	jne	.L4786
	movq	$-1, -1728(%rbp)
.L776:
	movzbl	48(%r12), %esi
	testb	$16, 49(%r12)
	movl	$0, %eax
	cmove	%esi, %eax
	xorl	%esi, %esi
	movl	%eax, -1732(%rbp)
	movq	88(%r12), %rbx
	movq	%rbx, %rdi
	call	host_integerp
	testl	%eax, %eax
	je	.L778
	movq	%r12, %rdi
	call	bit_position
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	host_integerp
	testl	%eax, %eax
	jne	.L4787
.L778:
	movq	160(%r12), %rdi
	xorl	%esi, %esi
	call	tree_low_cst
	movq	%rax, %r14
.L779:
	testq	%rbx, %rbx
	jne	.L4788
.L780:
	testb	$16, 17(%r12)
	je	.L784
	cmpw	$66, (%r13)
	je	.L4789
.L785:
	orb	$4, 3(%r13)
.L784:
	movl	(%r13), %eax
	andl	$16842751, %eax
	cmpl	$66, %eax
	je	.L4790
.L786:
	movq	8(%r12), %rdi
	call	get_alias_set
	movq	-776(%rbp), %r12
	movl	%eax, %ebx
	cmpb	$46, 16(%r12)
	je	.L4791
.L787:
	movq	-720(%rbp), %r10
	movq	-1728(%rbp), %rsi
	movq	%r13, %rdi
	movl	-1732(%rbp), %ecx
	movq	-776(%rbp), %r8
	movq	%r14, %rdx
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	%ebx, 16(%rsp)
	movq	%r10, 8(%rsp)
	call	store_field
.L743:
	movq	(%r15), %r15
	testq	%r15, %r15
	jne	.L804
.L426:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
.L4791:
	testl	$7, %r14d 
	jne	.L787
	testq	%r14, %r14
	je	.L4446
	cmpw	$66, (%r13)
	jne	.L787
.L4507:
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L796
	movzbl	%al, %edi
	call	get_mode_alignment
	xorl	%esi, %esi
	mov	%eax, %edi
	movq	%r14, %rax
	cqto
	idivq	%rdi
	testq	%rdx, %rdx
	je	.L795
.L796:
	movl	$51, %esi
.L795:
	cmpq	$-1, %r14
	leaq	7(%r14), %rdx
	movq	%r13, %rdi
	cmovle	%rdx, %r14
	movl	$1, %ecx
	movl	$1, %r8d
	sarq	$3, %r14
	movq	%r14, %rdx
	call	adjust_address_1
	movq	%rax, %r13
.L789:
	movl	(%r13), %eax
	andl	$16842751, %eax
	cmpl	$66, %eax
	je	.L4792
.L798:
	shrq	$3, -1728(%rbp)
	movq	-776(%rbp), %rdi
	movq	%r13, %rsi
	movl	-1884(%rbp), %edx
	movq	-1728(%rbp), %rcx
	call	store_constructor
	jmp	.L743
.L4792:
	movq	16(%r13), %rax
	testq	%rax, %rax
	je	.L798
	cmpq	$0, (%rax)
	je	.L798
	movq	%r13, %rdi
	call	copy_rtx
	movslq	%ebx,%rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	set_mem_alias_set
	jmp	.L798
	.p2align 6,,7
.L4446:
	cmpw	$66, (%r13)
	jne	.L789
	jmp	.L4507
.L4790:
	testb	$4, 52(%r12)
	je	.L786
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	orb	$1, 3(%rax)
	jmp	.L786
.L4789:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	jmp	.L785
.L4788:
	movq	%rbx, %rdi
	call	contains_placeholder_p
	testl	%eax, %eax
	jne	.L4793
.L781:
	xorl	%ecx, %ecx
	xorl	%esi, %esi
	xorl	%edx, %edx
	movq	%rbx, %rdi
	call	expand_expr
	movq	-1744(%rbp), %rcx
	movq	%rax, %r13
	cmpw	$66, (%rcx)
	jne	.L4794
	movzbl	2(%rax), %r8d
	movl	ptr_mode(%rip), %edi
	cmpl	%edi, %r8d
	je	.L783
	movq	%rax, %rsi
	xorl	%edx, %edx
	call	convert_to_mode
	movq	%rax, %r13
.L783:
	movq	%rbx, %rdi
	call	highest_pow2_factor
	movq	%r13, %rsi
	movq	-1744(%rbp), %rdi
	movq	%rax, %rdx
	call	offset_address
	movq	%rax, %r13
	jmp	.L780
.L4794:
	movl	$.LC0, %edi
	movl	$4498, %esi
.L4654:
	movl	$.LC8, %edx
.L4655:
	call	fancy_abort
.L4793:
	movq	-704(%rbp), %r11
	movq	-1744(%rbp), %rsi
	movq	8(%r11), %rdi
	call	make_tree
	movq	%rbx, %rdx
	movq	sizetype_tab(%rip), %rsi
	movq	%rax, %rcx
	movl	$58, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rbx
	jmp	.L781
.L4787:
	movq	%r12, %rdi
	xorl	%ebx, %ebx
	call	int_bit_position
	movq	%rax, %r14
	jmp	.L779
.L4786:
	movq	40(%r12), %rdi
	movl	$1, %esi
	call	tree_low_cst
	movq	%rax, -1728(%rbp)
	jmp	.L776
.L753:
	movq	-776(%rbp), %rdi
	call	integer_zerop
.L4527:
	movl	%eax, %ebx
	jmp	.L752
.L754:
	movq	-776(%rbp), %rax
	xorl	%ebx, %ebx
	movq	32(%rax), %rdi
	call	is_zeros_p
	testl	%eax, %eax
	je	.L752
	movq	-776(%rbp), %rdx
	movq	40(%rdx), %rdi
	call	is_zeros_p
	testl	%eax, %eax
	je	.L752
.L4180:
	movl	$1, %ebx
	jmp	.L752
.L756:
	movq	-776(%rbp), %rsi
	movl	$dconst0, %edi
	movl	$24, %ecx
	cld
	addq	$32, %rsi
	repz
	cmpsb
.L4526:
	sete	%dil
	movzbl	%dil, %ebx
	jmp	.L752
.L774:
	cmpl	$46, %eax
	je	.L764
	cmpl	$46, %eax
	jb	.L772
	subl	$114, %eax
	cmpl	$3, %eax
	ja	.L772
	movq	-776(%rbp), %r8
	movq	32(%r8), %rdi
	call	is_zeros_p
	jmp	.L4527
.L764:
	movq	-776(%rbp), %rdx
	movq	8(%rdx), %rax
	testq	%rax, %rax
	je	.L765
	cmpb	$19, 16(%rax)
	je	.L4795
.L765:
	movq	-776(%rbp), %r10
	movq	40(%r10), %rbx
	testq	%rbx, %rbx
	je	.L4180
.L771:
	movq	32(%rbx), %rdi
	call	is_zeros_p
	testl	%eax, %eax
	je	.L772
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L771
	jmp	.L4180
.L4795:
	cmpq	$0, 40(%rdx)
	jmp	.L4526
	.p2align 6,,7
.L757:
	movq	-776(%rbp), %r9
	movq	32(%r9), %rbx
	testq	%rbx, %rbx
	je	.L4180
	.p2align 4,,7
.L763:
	movq	32(%rbx), %rdi
	call	is_zeros_p
	testl	%eax, %eax
	je	.L772
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L763
	jmp	.L4180
.L4785:
	movq	-1744(%rbp), %rdx
	movl	$49, %edi
	xorl	%esi, %esi
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L740
.L4784:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r13, %rdx
	call	gen_rtx_fmt_e
.L4525:
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L731
.L4783:
	movl	$.LC7, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.0(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.0(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.0, %edi
	movq	%rax, fn.0(%rip)
	call	ggc_add_tree_root
	movq	fn.0(%rip), %rbx
	xorl	%esi, %esi
	orb	$1, 49(%rbx)
	movq	fn.0(%rip), %rdi
	orb	$8, 18(%rdi)
	movq	fn.0(%rip), %r9
	orb	$64, 50(%r9)
	movq	fn.0(%rip), %r15
	orb	$2, 18(%r15)
	movq	fn.0(%rip), %rdi
	call	make_decl_rtl
	movq	fn.0(%rip), %rdi
	call	assemble_external
	jmp	.L738
.L4782:
	movq	%r8, %rdi
	movq	%r8, -2648(%rbp)
	movl	%ebx, %esi
	call	*%rax
	movq	-2648(%rbp), %r8
	testl	%eax, %eax
	jne	.L729
	movq	%r8, %rsi
	movl	%ebx, %edi
	call	copy_to_mode_reg
	movq	%rax, %r8
	jmp	.L729
	.p2align 6,,7
.L725:
	cmpw	$31, mode_bitsize(%r12,%r12)
	jmp	.L4524
.L4781:
	movq	mode_mask_array(,%r12,8), %r14
	shrq	$1, %r14
	cmpq	%r14, 8(%r15)
	jbe	.L723
	jmp	.L724
.L4780:
	movq	8(%r15), %r12
	xorl	%r13d, %r13d
	movl	$17, %esi
	movl	$128, %r14d
.L652:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4164
.L649:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L649
.L4164:
	testl	%edi, %edi
	je	.L642
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L651
	call	get_mode_alignment
	cmpl	%eax, %r14d
	jb	.L651
	movzbq	mode_size(%rbx), %r8
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r8
	addq	%rax, %r13
	movq	%rdx, %r12
.L651:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L652
.L642:
	testq	%r12, %r12
	jne	.L4757
	movl	optimize_size(%rip), %edx
	testl	%edx, %edx
	jne	.L655
	movq	ix86_cost(%rip), %r14
	mov	40(%r14), %r9d
	cmpq	%r9, %r13
	jae	.L639
.L656:
	movq	8(%r15), %r13
	movq	-1712(%rbp), %rsi
	xorl	%eax, %eax
	movq	$clear_by_pieces_1, -136(%rbp)
	movq	$0, -128(%rbp)
	testb	$2, target_flags+3(%rip)
	setne	%al
	xorl	%r14d, %r14d
	movq	%r13, -152(%rbp)
	movq	%rsi, -176(%rbp)
	leaq	-176(%rbp), %r13
	movq	8(%rsi), %r8
	leaq	16(%r13), %rcx
	xorl	%esi, %esi
	movq	$0, -144(%rbp)
	leaq	5(,%rax,4), %rbx
	movq	%r8, -168(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L660
	cmpw	$99, %dx
	je	.L660
	cmpw	$98, %dx
	je	.L660
.L659:
	movl	%esi, (%rcx)
	movl	$0, 20(%r13)
	leaq	56(%r13), %rdx
	movzwl	(%r8), %eax
	xorl	%ecx, %ecx
	cmpw	$96, %ax
	je	.L662
	cmpw	$98, %ax
	je	.L662
.L661:
	movl	%ecx, (%rdx)
	movl	56(%r13), %r10d
	testl	%r10d, %r10d
	je	.L663
	movq	24(%r13), %r11
	movq	%r11, 32(%r13)
.L663:
	movl	16(%r13), %ecx
	testl	%ecx, %ecx
	jne	.L664
	movq	24(%r13), %r15
	movq	$0, -1720(%rbp)
	movl	$17, %esi
.L677:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4167
.L674:
	movslq	%ecx,%r12
	movzbq	mode_size(%r12), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r12), %ecx
	testl	%ecx, %ecx
	jne	.L674
.L4167:
	testl	%edi, %edi
	je	.L667
	movslq	%edi,%r12
	movq	%r12, %r9
	salq	$4, %r9
	addq	optab_table+240(%rip), %r9
	cmpl	$1317, 8(%r9)
	je	.L676
	movq	%r8, -2648(%rbp)
	call	get_mode_alignment
	movq	-2648(%rbp), %r8
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L676
	movzbq	mode_size(%r12), %rsi
	movq	%r15, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, -1720(%rbp)
	movq	%rdx, %r15
.L676:
	movzbq	mode_size(%r12), %rsi
	cmpq	$1, %rsi
	ja	.L677
.L667:
	testq	%r15, %r15
	jne	.L4757
	cmpq	$2, -1720(%rbp)
	jbe	.L664
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4169
.L685:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %r12
	cmpq	%rbx, %r12
	cmovb	%ecx, %r14d
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L685
.L4169:
	movl	16(%r13), %eax
	testl	%eax, %eax
	jne	.L664
	movzwl	(%r8), %edx
	leal	-67(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L689
	cmpw	$54, %dx
	je	.L689
	cmpw	$55, %dx
	je	.L689
	cmpw	$58, %dx
	je	.L689
	cmpw	$134, %dx
	je	.L689
	cmpw	$56, %dx
	je	.L689
	cmpw	$140, %dx
	je	.L689
.L664:
	cmpq	$1, %rbx
	jbe	.L692
.L713:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4172
.L699:
	movslq	%ecx,%r8
	movzbq	mode_size(%r8), %rdx
	cmpq	%rbx, %rdx
	cmovb	%ecx, %r14d
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L699
.L4172:
	testl	%r14d, %r14d
	je	.L692
	movslq	%r14d,%r15
	movq	%r15, %r9
	salq	$4, %r9
	addq	optab_table+240(%rip), %r9
	movl	8(%r9), %ebx
	cmpl	$1317, %ebx
	je	.L701
	movl	%r14d, %edi
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L701
	movslq	%ebx,%rsi
	movzbq	mode_size(%r15), %rdx
	leaq	(%rsi,%rsi,4), %r10
	cmpq	%rdx, 24(%r13)
	movq	insn_data+16(,%r10,8), %rbx
	movq	%rdx, %r12
	movq	%rbx, -752(%rbp)
	jb	.L701
	movl	56(%r13), %ecx
.L711:
	testl	%ecx, %ecx
	je	.L705
	subq	%rdx, 32(%r13)
.L705:
	movl	16(%r13), %eax
	testl	%eax, %eax
	je	.L706
	movq	(%r13), %rdi
	movq	8(%r13), %rdx
	movl	%r14d, %esi
	movq	32(%r13), %rcx
	movl	$1, %r8d
	call	adjust_automodify_address_1
.L4523:
	movl	%r14d, %edx
	movq	%rax, %rbx
	movq	48(%r13), %rdi
	movq	32(%r13), %rsi
	call	*40(%r13)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	*-752(%rbp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%r13), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L710
	addq	%r12, 32(%r13)
.L710:
	movq	24(%r13), %r11
	movq	%r12, %rdx
	subq	%r12, %r11
	cmpq	%r12, %r11
	movq	%r11, 24(%r13)
	jae	.L711
.L701:
	movzbq	mode_size(%r15), %rbx
	cmpq	$1, %rbx
	ja	.L713
.L692:
	cmpq	$0, 24(%r13)
	je	.L731
.L4756:
	movl	$.LC0, %edi
	movl	$2524, %esi
	movl	$.LC6, %edx
	jmp	.L4655
	.p2align 6,,7
.L706:
	movq	(%r13), %rdi
	movq	32(%r13), %rdx
	movl	%r14d, %esi
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L4523
.L689:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, 8(%r13)
	jmp	.L664
.L4757:
	movl	$.LC0, %edi
	movl	$1542, %esi
	movl	$.LC5, %edx
	jmp	.L4655
	.p2align 6,,7
.L662:
	movl	$1, %ecx
	jmp	.L661
.L660:
	movl	$1, %esi
	jmp	.L659
.L655:
	cmpq	$2, %r13
	ja	.L639
	jmp	.L656
.L634:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r15), %r12
	movq	%rax, %rbx
	je	.L4796
.L636:
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, %r15
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L629
.L4796:
	cmpq	16(%r15), %rax
	jne	.L636
	jmp	.L629
	.p2align 6,,7
.L4779:
	cmpb	$51, 2(%r15)
	je	.L627
	movq	8(%r15), %r12
	cmpw	$71, (%r12)
	je	.L4797
.L627:
	cmpl	$66, %eax
	jne	.L630
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r15), %rax
	movq	%rax, %rbx
	je	.L629
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, %r15
	movq	%rbx, 8(%rax)
	jmp	.L629
	.p2align 6,,7
.L4797:
	movq	8(%r12), %rsi
	movq	%r15, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L628
	movzbl	2(%r15), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r15
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L629
.L628:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L4522:
	movq	%rax, %r15
	jmp	.L629
.L626:
	cmpq	$0, 16(%r15)
	je	.L4798
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L4522
	movq	8(%r15), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L629
.L4798:
	movq	8(%r15), %rdi
	call	copy_to_reg
	jmp	.L4522
.L621:
	movq	-1744(%rbp), %r13
	xorl	%esi, %esi
	movq	8(%r13), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-1744(%rbp), %rdx
	movq	%rax, %r12
	movq	16(%rdx), %rdi
	call	protect_from_queue
	movq	-1744(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L4799
.L623:
	movq	-1744(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -1712(%rbp)
	movq	%r12, 8(%rax)
	movq	-1712(%rbp), %r12
	movq	%rbx, 16(%r12)
	jmp	.L616
.L4799:
	cmpq	16(%rsi), %rax
	jne	.L623
	jmp	.L616
	.p2align 6,,7
.L4778:
	jne	.L617
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, %rbx
	movq	-1744(%rbp), %rax
	cmpq	8(%rax), %rbx
	je	.L616
	movq	%rax, %rdi
	call	copy_rtx
	movq	%rax, -1712(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L616
	.p2align 6,,7
.L613:
	movq	-1744(%rbp), %rdx
	cmpq	$0, 16(%rdx)
	je	.L4800
	movq	-1744(%rbp), %rax
	movq	24(%rax), %r8
	testq	%r8, %r8
	movq	%r8, -1712(%rbp)
	jne	.L616
	movq	-1744(%rbp), %r14
	movq	8(%r14), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r9
	movq	%r9, -1712(%rbp)
	jmp	.L616
.L4800:
	movq	8(%rdx), %rdi
	call	copy_to_reg
	movq	%rax, -1712(%rbp)
	jmp	.L616
.L4777:
	movzbl	%al, %edx 
	movzbl	mode_size(%rdx), %edi
	cmpl	8(%r15), %edi
	jne	.L611
.L4758:
	movq	%rbx, %rdi
	movq	const_tiny_rtx(,%rdx,8), %rsi
.L4657:
	call	emit_move_insn
	jmp	.L731
.L4776:
	movq	16(%rax), %rax
	movl	$8, -1700(%rbp)
	testq	%rax, %rax
	je	.L608
	movl	32(%rax), %eax
	jmp	.L4521
.L4775:
	movzbq	2(%rbx), %rcx
	movzbq	mode_size(%rcx), %r10
	cmpq	-712(%rbp), %r10
	jne	.L562
	jmp	.L606
.L4774:
	movq	-704(%rbp), %rsi
	movzbl	16(%rsi), %eax
	cmpb	$46, %al
	je	.L4801
	movzbl	%al, %eax
	cmpl	$28, %eax
	je	.L588
	cmpl	$28, %eax
	ja	.L605
	cmpl	$26, %eax
	je	.L587
	cmpl	$26, %eax
	ja	.L585
	cmpl	$25, %eax
	je	.L584
.L603:
	xorl	%ebx, %ebx
.L583:
	movl	%ebx, %eax
.L571:
	testl	%eax, %eax
	je	.L562
	jmp	.L568
.L584:
	movq	-704(%rbp), %rdi
	call	integer_zerop
.L4519:
	movl	%eax, %ebx
	jmp	.L583
	.p2align 6,,7
.L585:
	movq	-704(%rbp), %rax
	xorl	%ebx, %ebx
	movq	32(%rax), %rdi
	call	is_zeros_p
	testl	%eax, %eax
	je	.L583
	movq	-704(%rbp), %r12
	movq	40(%r12), %rdi
	call	is_zeros_p
	testl	%eax, %eax
	je	.L583
.L4161:
	movl	$1, %ebx
	jmp	.L583
.L587:
	movq	-704(%rbp), %rsi
	movl	$dconst0, %edi
	movl	$24, %ecx
	cld
	addq	$32, %rsi
	repz
	cmpsb
.L4518:
	sete	%sil
	movzbl	%sil, %ebx
	jmp	.L583
.L605:
	cmpl	$46, %eax
	je	.L595
	cmpl	$46, %eax
	jb	.L603
	subl	$114, %eax
	cmpl	$3, %eax
	ja	.L603
	movq	-704(%rbp), %r13
	movq	32(%r13), %rdi
	call	is_zeros_p
	jmp	.L4519
	.p2align 6,,7
.L595:
	movq	-704(%rbp), %rdx
	movq	8(%rdx), %rax
	testq	%rax, %rax
	je	.L596
	cmpb	$19, 16(%rax)
	je	.L4802
.L596:
	movq	-704(%rbp), %r9
	movq	40(%r9), %rbx
	testq	%rbx, %rbx
	je	.L4161
.L602:
	movq	32(%rbx), %rdi
	call	is_zeros_p
	testl	%eax, %eax
	je	.L603
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L602
	jmp	.L4161
.L4802:
	cmpq	$0, 40(%rdx)
	jmp	.L4518
	.p2align 6,,7
.L588:
	movq	-704(%rbp), %r8
	movq	32(%r8), %rbx
	testq	%rbx, %rbx
	je	.L4161
.L594:
	movq	32(%rbx), %rdi
	call	is_zeros_p
	testl	%eax, %eax
	je	.L603
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L594
	jmp	.L4161
	.p2align 6,,7
.L4801:
	movq	8(%rsi), %rax
	xorl	%r13d, %r13d
	xorl	%r12d, %r12d
	movq	40(%rsi), %rbx
	testq	%rax, %rax
	je	.L570
	cmpb	$19, 16(%rax)
	je	.L4803
.L570:
	testq	%rbx, %rbx
	jne	.L577
.L4157:
	leal	0(,%r12,4), %edx
	leal	(%r13,%r13,2), %ebx
	cmpl	%ebx, %edx
	setge	%al
.L4520:
	movzbl	%al, %eax
	jmp	.L571
.L577:
	movq	32(%rbx), %rdi
	call	mostly_zeros_p
	movq	(%rbx), %rbx
	leal	1(%r12), %edi
	testl	%eax, %eax
	cmovne	%edi, %r12d
	incl	%r13d
	testq	%rbx, %rbx
	jne	.L577
	jmp	.L4157
.L4803:
	testq	%rbx, %rbx
	sete	%al
	jmp	.L4520
	.p2align 6,,7
.L4773:
	movq	-704(%rbp), %r8
	testb	$4, 18(%r8)
	je	.L563
	testb	$2, target_flags+3(%rip)
	je	.L564
	movzbl	2(%rsi), %edx
	movzbl	%dl, %esi 
	cmpb	$8, mode_size(%rsi)
.L4517:
	ja	.L563
	movzbl	%dl, %ecx 
	movq	-1744(%rbp), %rdi
	movq	const_tiny_rtx(,%rcx,8), %rsi
	jmp	.L4657
.L564:
	movq	-1744(%rbp), %r10
	movzbl	2(%r10), %edx
	movzbl	%dl, %r9d 
	cmpb	$4, mode_size(%r9)
	jmp	.L4517
.L4772:
	movq	%rsi, -1680(%rbp)
	call	expr_size
	movq	-1744(%rbp), %rdx
	movq	%rax, -1688(%rbp)
	cmpw	$66, (%rdx)
	je	.L4804
	movq	-1744(%rbp), %rdx
	movzbl	2(%rdx), %edi
	call	get_mode_alignment
	movl	%eax, %r15d
.L430:
	movq	-1744(%rbp), %rbx
	movzbl	2(%rbx), %eax
	cmpb	$51, %al
	je	.L433
	movq	-1688(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L4805
.L433:
	movq	-1744(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L435
	cmpl	$66, %eax
	je	.L4806
.L439:
	cmpl	$75, %eax
	je	.L443
	cmpl	$78, %eax
	je	.L443
.L438:
	movq	-1688(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L448
	cmpl	$66, %eax
	je	.L4807
.L452:
	cmpl	$75, %eax
	je	.L456
	cmpl	$78, %eax
	je	.L456
.L451:
	movq	-1688(%rbp), %rax
	cmpw	$54, (%rax)
	je	.L4808
.L461:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %ebx
	movq	%rax, -736(%rbp)
	testl	%ebx, %ebx
	je	.L4155
.L555:
	movslq	%ebx,%r12
	movl	clrstr_optab(,%r12,4), %edx
	cmpl	$1317, %edx
	je	.L542
	movq	-1688(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L4809
.L546:
	testb	$2, target_flags+3(%rip)
	je	.L547
	cmpw	$63, mode_bitsize(%r12,%r12)
.L4515:
	jbe	.L542
.L545:
	movslq	%edx,%r14
	leaq	(%r14,%r14,4), %r15
	movq	insn_data+24(,%r15,8), %r13
	movq	(%r13), %rax
	testq	%rax, %rax
	je	.L549
	movq	-1680(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L542
.L549:
	movq	48(%r13), %rax
	testq	%rax, %rax
	je	.L550
	xorl	%esi, %esi
	movq	-736(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L542
.L550:
	call	get_last_insn
	movl	$1, %edx
	movq	-1688(%rbp), %rsi
	movl	%ebx, %edi
	movq	%rax, -744(%rbp)
	call	convert_to_mode
	movq	%rax, %r15
	movq	24(%r13), %rax
	testq	%rax, %rax
	jne	.L4810
.L551:
	leaq	(%r14,%r14,4), %r13
	xorl	%eax, %eax
	movq	-1680(%rbp), %rdi
	movq	%r15, %rsi
	movq	-736(%rbp), %rdx
	call	*insn_data+16(,%r13,8)
	testq	%rax, %rax
	jne	.L4525
	movq	-744(%rbp), %rdi
	call	delete_insns_since
.L542:
	movzbl	mode_wider_mode(%r12), %ebx
	testl	%ebx, %ebx
	jne	.L555
.L4155:
	testb	$2, target_flags+3(%rip)
	movq	-1680(%rbp), %rax
	setne	%dl
	movq	8(%rax), %rsi
	movzbl	%dl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-1688(%rbp), %rsi
	movq	sizetype_tab(%rip), %rdi
	movq	%rax, %r13
	movzbl	61(%rdi), %ebx
	shrb	$1, %bl
	movzbl	%bl, %edi
	jmp	.L4771
.L4810:
	movq	%r15, %rdi
	movl	%ebx, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L551
	movq	%r15, %rsi
	movl	%ebx, %edi
	call	copy_to_mode_reg
	movq	%rax, %r15
	jmp	.L551
	.p2align 6,,7
.L547:
	cmpw	$31, mode_bitsize(%r12,%r12)
	jmp	.L4515
.L4809:
	movq	mode_mask_array(,%r12,8), %r14
	shrq	$1, %r14
	cmpq	%r14, 8(%rcx)
	jbe	.L545
	jmp	.L546
.L4808:
	movq	8(%rax), %r12
	xorl	%r13d, %r13d
	movl	$17, %esi
	movl	$128, %r14d
.L474:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4144
.L471:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %r10
	cmpq	%rsi, %r10
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L471
.L4144:
	testl	%edi, %edi
	je	.L464
	movslq	%edi,%rbx
	movq	%rbx, %r11
	salq	$4, %r11
	addq	optab_table+240(%rip), %r11
	cmpl	$1317, 8(%r11)
	je	.L473
	call	get_mode_alignment
	cmpl	%eax, %r14d
	jb	.L473
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r13
	movq	%rdx, %r12
.L473:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L474
.L464:
	testq	%r12, %r12
	jne	.L4757
	movl	optimize_size(%rip), %r14d
	testl	%r14d, %r14d
	jne	.L477
	movq	ix86_cost(%rip), %rdx
	mov	40(%rdx), %ebx
	cmpq	%rbx, %r13
	jae	.L461
.L478:
	movq	-1688(%rbp), %r12
	movq	-1680(%rbp), %rax
	testb	$2, target_flags+3(%rip)
	setne	%cl
	xorl	%esi, %esi
	xorl	%r14d, %r14d
	movq	8(%r12), %r13
	movq	%rax, -112(%rbp)
	movq	$0, -64(%rbp)
	movq	$clear_by_pieces_1, -72(%rbp)
	movq	%r13, -88(%rbp)
	movzbl	%cl, %r9d 
	movq	8(%rax), %r8
	movq	$0, -80(%rbp)
	leaq	-112(%rbp), %r13
	leaq	5(,%r9,4), %r12
	leaq	16(%r13), %rcx
	movq	%r8, -104(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L482
	cmpw	$99, %dx
	je	.L482
	cmpw	$98, %dx
	je	.L482
.L481:
	movl	%esi, (%rcx)
	movl	$0, 20(%r13)
	leaq	56(%r13), %rdx
	movzwl	(%r8), %eax
	xorl	%ecx, %ecx
	cmpw	$96, %ax
	je	.L484
	cmpw	$98, %ax
	je	.L484
.L483:
	movl	%ecx, (%rdx)
	movl	56(%r13), %r10d
	testl	%r10d, %r10d
	je	.L485
	movq	24(%r13), %r11
	movq	%r11, 32(%r13)
.L485:
	movl	16(%r13), %edi
	testl	%edi, %edi
	jne	.L486
	movq	24(%r13), %r15
	movq	$0, -1696(%rbp)
	movl	$17, %esi
.L499:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4147
.L496:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L496
.L4147:
	testl	%edi, %edi
	je	.L489
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L498
	movq	%r8, -2648(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-2648(%rbp), %r8
	jb	.L498
	movzbq	mode_size(%rbx), %rcx
	movq	%r15, %rax
	xorl	%edx, %edx
	divq	%rcx
	addq	%rax, -1696(%rbp)
	movq	%rdx, %r15
.L498:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L499
.L489:
	testq	%r15, %r15
	jne	.L4757
	cmpq	$2, -1696(%rbp)
	jbe	.L486
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4149
.L507:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %r11
	cmpq	%r12, %r11
	cmovb	%ecx, %r14d
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L507
.L4149:
	movl	16(%r13), %eax
	testl	%eax, %eax
	jne	.L486
	movzwl	(%r8), %edx
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L511
	cmpw	$54, %dx
	je	.L511
	cmpw	$55, %dx
	je	.L511
	cmpw	$58, %dx
	je	.L511
	cmpw	$134, %dx
	je	.L511
	cmpw	$56, %dx
	je	.L511
	cmpw	$140, %dx
	je	.L511
.L486:
	cmpq	$1, %r12
	jbe	.L692
.L535:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4152
.L521:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%r12, %rdx
	cmovb	%ecx, %r14d
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L521
.L4152:
	testl	%r14d, %r14d
	je	.L692
	movslq	%r14d,%r15
	movq	%r15, %r12
	salq	$4, %r12
	addq	optab_table+240(%rip), %r12
	movl	8(%r12), %ebx
	cmpl	$1317, %ebx
	je	.L523
	movl	%r14d, %edi
	call	get_mode_alignment
	movl	$128, %esi
	cmpl	%eax, %esi
	jb	.L523
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rcx
	leaq	(%rcx,%rcx,4), %r9
	cmpq	%rdx, 24(%r13)
	movq	insn_data+16(,%r9,8), %r8
	movq	%rdx, %r12
	movq	%r8, -728(%rbp)
	jb	.L523
	movl	56(%r13), %ecx
.L533:
	testl	%ecx, %ecx
	je	.L527
	subq	%rdx, 32(%r13)
.L527:
	movl	16(%r13), %r10d
	testl	%r10d, %r10d
	je	.L528
	movq	(%r13), %rdi
	movq	8(%r13), %rdx
	movl	%r14d, %esi
	movq	32(%r13), %rcx
	movl	$1, %r8d
	call	adjust_automodify_address_1
.L4514:
	movl	%r14d, %edx
	movq	%rax, %rbx
	movq	48(%r13), %rdi
	movq	32(%r13), %rsi
	call	*40(%r13)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	*-728(%rbp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%r13), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L532
	addq	%r12, 32(%r13)
.L532:
	movq	24(%r13), %r11
	movq	%r12, %rdx
	subq	%r12, %r11
	cmpq	%r12, %r11
	movq	%r11, 24(%r13)
	jae	.L533
.L523:
	movzbq	mode_size(%r15), %r12
	cmpq	$1, %r12
	ja	.L535
	jmp	.L692
.L528:
	movq	(%r13), %rdi
	movq	32(%r13), %rdx
	movl	%r14d, %esi
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L4514
.L511:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, 8(%r13)
	jmp	.L486
.L484:
	movl	$1, %ecx
	jmp	.L483
.L482:
	movl	$1, %esi
	jmp	.L481
.L477:
	cmpq	$2, %r13
	ja	.L461
	jmp	.L478
.L456:
	movq	-1688(%rbp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-1688(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-1688(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L4811
.L458:
	movq	-1688(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -1688(%rbp)
	movq	%r12, 8(%rax)
	movq	-1688(%rbp), %rax
	movq	%rbx, 16(%rax)
	jmp	.L451
.L4811:
	cmpq	16(%rcx), %rax
	jne	.L458
	jmp	.L451
.L4807:
	cmpb	$51, 2(%rdx)
	je	.L449
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L4812
.L449:
	cmpl	$66, %eax
	jne	.L452
	movq	-1688(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	movq	-1688(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L451
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -1688(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L451
.L4812:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L450
	movq	-1688(%rbp), %r14
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -1688(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L451
.L450:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L4513:
	movq	%rax, -1688(%rbp)
	jmp	.L451
.L448:
	movq	-1688(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L4813
	movq	-1688(%rbp), %rdi
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L4513
	movq	-1688(%rbp), %r8
	movq	8(%r8), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	-1688(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r13
	movq	%r13, -1688(%rbp)
	jmp	.L451
.L4813:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L4513
.L443:
	movq	-1744(%rbp), %r13
	xorl	%esi, %esi
	movq	8(%r13), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-1744(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L4814
.L445:
	movq	-1744(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -1680(%rbp)
	movq	%r12, 8(%rax)
	movq	-1680(%rbp), %rsi
	movq	%rbx, 16(%rsi)
	jmp	.L438
.L4814:
	cmpq	16(%rsi), %rax
	jne	.L445
	jmp	.L438
.L4806:
	jne	.L439
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-1744(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L438
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -1680(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L438
.L435:
	movq	-1744(%rbp), %rdx
	cmpq	$0, 16(%rdx)
	je	.L4815
	movq	-1744(%rbp), %r9
	movq	24(%r9), %r8
	testq	%r8, %r8
	movq	%r8, -1680(%rbp)
	jne	.L438
	movq	-1744(%rbp), %r12
	movq	8(%r12), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r10
	movq	%r10, -1680(%rbp)
	jmp	.L438
.L4815:
	movq	8(%rdx), %rdi
	call	copy_to_reg
	movq	%rax, -1680(%rbp)
	jmp	.L438
.L4805:
	movzbl	%al, %edx 
	movzbl	mode_size(%rdx), %edi
	cmpl	8(%rsi), %edi
	jne	.L433
	jmp	.L4758
	.p2align 6,,7
.L4804:
	movq	16(%rdx), %rax
	movl	$8, %r15d
	testq	%rax, %rax
	je	.L430
	movl	32(%rax), %r15d
	jmp	.L430
	.p2align 6,,7
.L427:
	cmpb	$18, %dl
	je	.L807
	cmpb	$9, %dl
	je	.L807
	cmpb	$19, %dl
	jne	.L3825
	movq	-704(%rbp), %r15
	movq	-720(%rbp), %rdi
	movq	40(%r15), %r12
	movq	%r12, -1792(%rbp)
	call	int_size_in_bytes
	cmpq	$0, -1792(%rbp)
	movq	%rax, %r12
	movq	-720(%rbp), %rax
	movq	24(%rax), %rbx
	jne	.L3826
	cmpq	$0, -712(%rbp)
	jle	.L3826
	movl	-1884(%rbp), %r13d
	testl	%r13d, %r13d
	jne	.L426
	movq	-712(%rbp), %rsi
	xorl	%edi, %edi
	call	gen_rtx_CONST_INT
	movq	%rax, -1752(%rbp)
	movq	-1744(%rbp), %rax
	cmpw	$66, (%rax)
	je	.L4816
	movq	-1744(%rbp), %r9
	movzbl	2(%r9), %edi
	call	get_mode_alignment
	movl	%eax, %r15d
.L3829:
	movq	-1744(%rbp), %rbx
	movzbl	2(%rbx), %eax
	cmpb	$51, %al
	je	.L3832
	movq	-1752(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L4817
.L3832:
	movq	-1744(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L3834
	cmpl	$66, %eax
	je	.L4818
.L3838:
	cmpl	$75, %eax
	je	.L3842
	cmpl	$78, %eax
	je	.L3842
.L3837:
	movq	-1752(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L3847
	cmpl	$66, %eax
	je	.L4819
.L3851:
	cmpl	$75, %eax
	je	.L3855
	cmpl	$78, %eax
	je	.L3855
.L3850:
	movq	-1752(%rbp), %rax
	cmpw	$54, (%rax)
	je	.L4820
.L3860:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %ebx
	movq	%rax, -1536(%rbp)
	testl	%ebx, %ebx
	je	.L4429
.L3954:
	movslq	%ebx,%r12
	movl	clrstr_optab(,%r12,4), %edx
	cmpl	$1317, %edx
	je	.L3941
	movq	-1752(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L4821
.L3945:
	testb	$2, target_flags+3(%rip)
	je	.L3946
	cmpw	$63, mode_bitsize(%r12,%r12)
.L4647:
	jbe	.L3941
.L3944:
	movslq	%edx,%r14
	leaq	(%r14,%r14,4), %r15
	movq	insn_data+24(,%r15,8), %r13
	movq	(%r13), %rax
	testq	%rax, %rax
	je	.L3948
	movq	-1744(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L3941
.L3948:
	movq	48(%r13), %rax
	testq	%rax, %rax
	je	.L3949
	xorl	%esi, %esi
	movq	-1536(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L3941
.L3949:
	call	get_last_insn
	movl	$1, %edx
	movq	-1752(%rbp), %rsi
	movl	%ebx, %edi
	movq	%rax, -1544(%rbp)
	call	convert_to_mode
	movq	%rax, %r15
	movq	24(%r13), %rax
	testq	%rax, %rax
	jne	.L4822
.L3950:
	leaq	(%r14,%r14,4), %r13
	xorl	%eax, %eax
	movq	-1744(%rbp), %rdi
	movq	%r15, %rsi
	movq	-1536(%rbp), %rdx
	call	*insn_data+16(,%r13,8)
	testq	%rax, %rax
	jne	.L4505
	movq	-1544(%rbp), %rdi
	call	delete_insns_since
.L3941:
	movzbl	mode_wider_mode(%r12), %ebx
	testl	%ebx, %ebx
	jne	.L3954
.L4429:
	testb	$2, target_flags+3(%rip)
	movq	-1744(%rbp), %rax
	setne	%r9b
	movq	8(%rax), %rsi
	movzbl	%r9b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-1752(%rbp), %rsi
	movq	sizetype_tab(%rip), %rbx
	movq	%rax, %r13
	movzbl	61(%rbx), %ecx
	shrb	$1, %cl
	movzbl	%cl, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.0(%rip)
	movq	%rax, %r14
	je	.L4823
.L3959:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r13, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	const_int_rtx+512(%rip), %rsi
	movq	integer_types+40(%rip), %rdi
	movq	%rax, %r15
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r14, %rsi
	movq	%rax, (%r15)
	movq	%rax, %r12
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.0(%rip), %rsi
	movq	%rax, (%r12)
	movq	(%r15), %rcx
	movq	8(%rsi), %rdi
	movq	(%rcx), %r14
	movq	$0, (%r14)
	call	build_pointer_type
	movq	fn.0(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r15, %rcx
	movq	fn.0(%rip), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%rdi), %r11
	movl	$53, %edi
	movq	8(%r11), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r13)
	je	.L426
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r13, %rdx
	call	gen_rtx_fmt_e
.L4505:
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L426
.L4823:
	movl	$.LC7, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.0(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.0(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.0, %edi
	movq	%rax, fn.0(%rip)
	call	ggc_add_tree_root
	movq	fn.0(%rip), %r10
	xorl	%esi, %esi
	orb	$1, 49(%r10)
	movq	fn.0(%rip), %rdx
	orb	$8, 18(%rdx)
	movq	fn.0(%rip), %r8
	orb	$64, 50(%r8)
	movq	fn.0(%rip), %r12
	orb	$2, 18(%r12)
	movq	fn.0(%rip), %rdi
	call	make_decl_rtl
	movq	fn.0(%rip), %rdi
	call	assemble_external
	jmp	.L3959
.L4822:
	movq	%r15, %rdi
	movl	%ebx, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L3950
	movq	%r15, %rsi
	movl	%ebx, %edi
	call	copy_to_mode_reg
	movq	%rax, %r15
	jmp	.L3950
	.p2align 6,,7
.L3946:
	cmpw	$31, mode_bitsize(%r12,%r12)
	jmp	.L4647
.L4821:
	movq	mode_mask_array(,%r12,8), %r14
	shrq	$1, %r14
	cmpq	%r14, 8(%rcx)
	jbe	.L3944
	jmp	.L3945
.L4820:
	movq	8(%rax), %r12
	xorl	%r13d, %r13d
	movl	$17, %esi
	movl	$128, %r14d
.L3873:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4418
.L3870:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %r8
	cmpq	%rsi, %r8
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L3870
.L4418:
	testl	%edi, %edi
	je	.L3863
	movslq	%edi,%rbx
	movq	%rbx, %rdx
	salq	$4, %rdx
	addq	optab_table+240(%rip), %rdx
	cmpl	$1317, 8(%rdx)
	je	.L3872
	call	get_mode_alignment
	cmpl	%eax, %r14d
	jb	.L3872
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r13
	movq	%rdx, %r12
.L3872:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L3873
.L3863:
	testq	%r12, %r12
	jne	.L4757
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L3876
	movq	ix86_cost(%rip), %r9
	mov	40(%r9), %ebx
	cmpq	%rbx, %r13
	jae	.L3860
.L3877:
	movq	-1752(%rbp), %rdi
	movq	-1744(%rbp), %r10
	testb	$2, target_flags+3(%rip)
	setne	%dl
	xorl	%esi, %esi
	movq	8(%rdi), %r13
	movq	%r10, -464(%rbp)
	movq	$0, -416(%rbp)
	movq	$clear_by_pieces_1, -424(%rbp)
	movq	%r13, -440(%rbp)
	movzbl	%dl, %r14d 
	movq	8(%r10), %r8
	movq	$0, -432(%rbp)
	leaq	-464(%rbp), %r13
	leaq	5(,%r14,4), %r12
	xorl	%r14d, %r14d
	leaq	16(%r13), %rcx
	movq	%r8, -456(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L3881
	cmpw	$99, %dx
	je	.L3881
	cmpw	$98, %dx
	je	.L3881
.L3880:
	movl	%esi, (%rcx)
	movl	$0, 20(%r13)
	leaq	56(%r13), %rdx
	movzwl	(%r8), %eax
	xorl	%ecx, %ecx
	cmpw	$96, %ax
	je	.L3883
	cmpw	$98, %ax
	je	.L3883
.L3882:
	movl	%ecx, (%rdx)
	movl	56(%r13), %ecx
	testl	%ecx, %ecx
	je	.L3884
	movq	24(%r13), %r11
	movq	%r11, 32(%r13)
.L3884:
	movl	16(%r13), %esi
	testl	%esi, %esi
	jne	.L3885
	movq	24(%r13), %r15
	movq	$0, -1760(%rbp)
	movl	$17, %esi
.L3898:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4421
.L3895:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %r9
	cmpq	%rsi, %r9
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L3895
.L4421:
	testl	%edi, %edi
	je	.L3888
	movslq	%edi,%rbx
	movq	%rbx, %rdx
	salq	$4, %rdx
	addq	optab_table+240(%rip), %rdx
	cmpl	$1317, 8(%rdx)
	je	.L3897
	movq	%r8, -2648(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-2648(%rbp), %r8
	jb	.L3897
	movzbq	mode_size(%rbx), %rdi
	movq	%r15, %rax
	xorl	%edx, %edx
	divq	%rdi
	addq	%rax, -1760(%rbp)
	movq	%rdx, %r15
.L3897:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L3898
.L3888:
	testq	%r15, %r15
	jne	.L4757
	cmpq	$2, -1760(%rbp)
	jbe	.L3885
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4423
.L3906:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %rsi
	cmpq	%r12, %rsi
	cmovb	%ecx, %r14d
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L3906
.L4423:
	movl	16(%r13), %eax
	testl	%eax, %eax
	jne	.L3885
	movzwl	(%r8), %edx
	leal	-67(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L3910
	cmpw	$54, %dx
	je	.L3910
	cmpw	$55, %dx
	je	.L3910
	cmpw	$58, %dx
	je	.L3910
	cmpw	$134, %dx
	je	.L3910
	cmpw	$56, %dx
	je	.L3910
	cmpw	$140, %dx
	je	.L3910
.L3885:
	cmpq	$1, %r12
	jbe	.L3913
.L3934:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4426
.L3920:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %r9
	cmpq	%r12, %r9
	cmovb	%ecx, %r14d
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L3920
.L4426:
	testl	%r14d, %r14d
	je	.L3913
	movslq	%r14d,%r15
	movq	%r15, %r12
	salq	$4, %r12
	addq	optab_table+240(%rip), %r12
	movl	8(%r12), %ebx
	cmpl	$1317, %ebx
	je	.L3922
	movl	%r14d, %edi
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	jb	.L3922
	movslq	%ebx,%rdi
	leaq	(%rdi,%rdi,4), %r10
	movq	insn_data+16(,%r10,8), %rdx
	movq	%rdx, -1528(%rbp)
	movzbq	mode_size(%r15), %rdx
	cmpq	%rdx, 24(%r13)
	movq	%rdx, %r12
	jb	.L3922
	movl	56(%r13), %ecx
.L3932:
	testl	%ecx, %ecx
	je	.L3926
	subq	%rdx, 32(%r13)
.L3926:
	movl	16(%r13), %r11d
	testl	%r11d, %r11d
	je	.L3927
	movq	(%r13), %rdi
	movq	8(%r13), %rdx
	movl	%r14d, %esi
	movq	32(%r13), %rcx
	movl	$1, %r8d
	call	adjust_automodify_address_1
.L4646:
	movl	%r14d, %edx
	movq	%rax, %rbx
	movq	48(%r13), %rdi
	movq	32(%r13), %rsi
	call	*40(%r13)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	*-1528(%rbp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%r13), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L3931
	addq	%r12, 32(%r13)
.L3931:
	movq	24(%r13), %rsi
	movq	%r12, %rdx
	subq	%r12, %rsi
	cmpq	%r12, %rsi
	movq	%rsi, 24(%r13)
	jae	.L3932
.L3922:
	movzbq	mode_size(%r15), %r12
	cmpq	$1, %r12
	ja	.L3934
.L3913:
	cmpq	$0, 24(%r13)
	je	.L426
	jmp	.L4756
	.p2align 6,,7
.L3927:
	movq	(%r13), %rdi
	movq	32(%r13), %rdx
	movl	%r14d, %esi
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L4646
.L3910:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, 8(%r13)
	jmp	.L3885
.L3883:
	movl	$1, %ecx
	jmp	.L3882
.L3881:
	movl	$1, %esi
	jmp	.L3880
.L3876:
	cmpq	$2, %r13
	ja	.L3860
	jmp	.L3877
.L3855:
	movq	-1752(%rbp), %r13
	xorl	%esi, %esi
	movq	8(%r13), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-1752(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-1752(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L4824
.L3857:
	movq	-1752(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -1752(%rbp)
	movq	%r12, 8(%rax)
	movq	-1752(%rbp), %rax
	movq	%rbx, 16(%rax)
	jmp	.L3850
.L4824:
	cmpq	16(%rcx), %rax
	jne	.L3857
	jmp	.L3850
.L4819:
	cmpb	$51, 2(%rdx)
	je	.L3848
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L4825
.L3848:
	cmpl	$66, %eax
	jne	.L3851
	movq	-1752(%rbp), %rsi
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-1752(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L3850
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -1752(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L3850
.L4825:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L3849
	movq	-1752(%rbp), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -1752(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L3850
.L3849:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L4645:
	movq	%rax, -1752(%rbp)
	jmp	.L3850
.L3847:
	movq	-1752(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L4826
	movq	-1752(%rbp), %rcx
	movq	24(%rcx), %rax
	testq	%rax, %rax
	jne	.L4645
	movq	-1752(%rbp), %rdi
	movq	8(%rdi), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	-1752(%rbp), %r14
	movq	%rax, %rdi
	movq	8(%r14), %rsi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r9
	movq	%r9, -1752(%rbp)
	jmp	.L3850
.L4826:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L4645
.L3842:
	movq	-1744(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-1744(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L4827
.L3844:
	movq	-1744(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -1744(%rbp)
	movq	%r12, 8(%rax)
	movq	-1744(%rbp), %r10
	movq	%rbx, 16(%r10)
	jmp	.L3837
.L4827:
	cmpq	16(%rsi), %rax
	jne	.L3844
	jmp	.L3837
.L4818:
	jne	.L3838
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-1744(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L3837
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -1744(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L3837
	.p2align 6,,7
.L3834:
	movq	-1744(%rbp), %rdx
	cmpq	$0, 16(%rdx)
	je	.L4828
	movq	-1744(%rbp), %r11
	movq	24(%r11), %rsi
	testq	%rsi, %rsi
	je	.L4829
.L4644:
	movq	%rsi, -1744(%rbp)
	jmp	.L3837
.L4829:
	movq	-1744(%rbp), %r12
	movq	8(%r12), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rsi
	jmp	.L4644
.L4828:
	movq	8(%rdx), %rdi
	call	copy_to_reg
	movq	%rax, -1744(%rbp)
	jmp	.L3837
.L4817:
	movzbl	%al, %edx 
	movzbl	mode_size(%rdx), %edi
	cmpl	8(%rsi), %edi
	jne	.L3832
	movq	const_tiny_rtx(,%rdx,8), %rsi
	movq	%rbx, %rdi
	call	emit_move_insn
	jmp	.L426
	.p2align 6,,7
.L4816:
	movq	16(%rax), %rax
	movl	$8, %r15d
	testq	%rax, %rax
	je	.L3829
	movl	32(%rax), %r15d
	jmp	.L3829
	.p2align 6,,7
.L3826:
	movq	sizetype_tab(%rip), %rdi
	movq	104(%rbx), %rsi
	call	convert
	movq	sizetype_tab(%rip), %rdi
	movq	%rax, -1512(%rbp)
	movq	112(%rbx), %rsi
	call	convert
	movq	-1512(%rbp), %rsi
	movq	%rax, %rdi
	call	size_diffop
	movl	$1, %esi
	movl	$1, %edi
	movq	%rax, %r15
	call	size_int_wide
	movl	$59, %edi
	movq	%r15, %rsi
	movq	%rax, %rdx
	call	size_binop
	movl	$1, %esi
	movq	%rax, %rdi
	movq	%rax, -1520(%rbp)
	call	tree_low_cst
	movq	-1744(%rbp), %r13
	movq	%rax, %r15
	cmpb	$51, 2(%r13)
	je	.L4830
.L3962:
	movq	-704(%rbp), %r10
	movl	$1, %esi
	movl	$1, %edx
	xorl	%r13d, %r13d
	xorl	%ebx, %ebx
	xorl	%r12d, %r12d
	movq	8(%r10), %r8
	movl	64(%r8), %r14d
	movl	%r14d, %edi
	call	mode_for_size
	movl	%r15d, %edx
	movq	-704(%rbp), %rdi
	leaq	15(%r15), %r9
	movl	%eax, -1548(%rbp)
	movl	$0, -1784(%rbp)
	andq	$-16, %r9
	subq	%r9, %rsp
	leaq	48(%rsp), %rax
	movq	%rax, %rsi
	movq	%rax, -1560(%rbp)
	call	get_set_constructor_bits
	xorl	%edx, %edx
	movq	%rax, -1792(%rbp)
	.p2align 4,,7
.L3965:
	movq	-1560(%rbp), %r11
	cmpb	$0, (%rdx,%r11)
	je	.L3968
	movl	$1, %eax
	movl	%ebx, %ecx
	sall	%cl, %eax
	cltq
	orq	%rax, %r13
.L3968:
	incl	%ebx
	incl	%r12d
	cmpl	%r14d, %ebx
	jae	.L3972
	mov	%r12d, %edx
	cmpq	%r15, %rdx
	jne	.L3965
.L3972:
	testq	%r13, %r13
	jne	.L3974
	movl	-1884(%rbp), %edx
	testl	%edx, %edx
	jne	.L3973
.L3974:
	xorl	%edi, %edi
	movq	%r13, %rsi
	call	gen_rtx_CONST_INT
	movq	-1744(%rbp), %rsi
	movq	%rax, %rbx
	cmpw	$66, (%rsi)
	je	.L4831
	movl	-1784(%rbp), %ecx
	movq	-1744(%rbp), %rdi
	testl	%ecx, %ecx
	jne	.L4832
.L3976:
	movq	%rbx, %rsi
	call	emit_move_insn
.L3973:
	mov	%r12d, %edi
	cmpq	%r15, %rdi
	movq	%rdi, %rdx
	je	.L3980
	movl	%r14d, %esi
	xorl	%r13d, %r13d
	xorl	%ebx, %ebx
	shrl	$3, %esi
	addl	%esi, -1784(%rbp)
	jmp	.L3965
.L3980:
	cmpq	$0, -1792(%rbp)
	je	.L426
.L4140:
	movq	-1792(%rbp), %r13
	movq	-1520(%rbp), %rdi
	xorl	%esi, %esi
	movl	$66, %edx
	movl	$2, %ecx
	movq	24(%r13), %rbx
	movq	32(%r13), %r12
	call	expand_expr
	movq	%rax, -1592(%rbp)
	testq	%rbx, %rbx
	je	.L4833
.L4123:
	movq	sizetype_tab(%rip), %rdi
	movq	%rbx, %rsi
	call	convert
	movq	%r12, %rsi
	movq	sizetype_tab(%rip), %rdi
	movq	%rax, %rbx
	call	convert
	movq	-1512(%rbp), %rdi
	movq	%rax, %r12
	call	integer_zerop
	testl	%eax, %eax
	je	.L4834
.L4124:
	xorl	%esi, %esi
	movq	%rbx, %rdi
	movl	$66, %edx
	movl	$2, %ecx
	call	expand_expr
	movl	$2, %ecx
	movl	$66, %edx
	xorl	%esi, %esi
	movq	%r12, %rdi
	movq	%rax, -1600(%rbp)
	call	expand_expr
	movq	-1744(%rbp), %rcx
	movq	%rax, %r15
	movzwl	(%rcx), %eax
	cmpw	$61, %ax
	je	.L4835
	cmpw	$66, %ax
	movq	-1744(%rbp), %r14
	jne	.L4836
.L4126:
	cmpb	$25, 16(%rbx)
	je	.L4837
.L4129:
	testb	$2, target_flags+3(%rip)
	movl	$.LC13, %edx
	setne	%dil
	movzbl	%dil, %esi
	movl	$68, %edi
	addl	$4, %esi
	call	gen_rtx_fmt_s
	movq	sizetype_tab(%rip), %r11
	movq	-1592(%rbp), %rcx
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rdi
	movq	-1600(%rbp), %rax
	setne	%bl
	movq	%rcx, (%rsp)
	movl	$4, %ecx
	movzbl	61(%r11), %r10d
	movq	%rax, 16(%rsp)
	xorl	%eax, %eax
	movzbl	%bl, %r9d
	shrb	$1, %r10b
	addl	$4, %r9d
	movzbl	%r10b, %r8d
	movl	%r8d, 8(%rsp)
	movzbl	61(%r11), %esi
	movq	%r15, 32(%rsp)
	shrb	$1, %sil
	movzbl	%sil, %edx
	xorl	%esi, %esi
	movl	%edx, 24(%rsp)
	xorl	%edx, %edx
	movzbl	61(%r11), %r13d
	shrb	$1, %r13b
	movzbl	%r13b, %r12d
	movl	%r12d, 40(%rsp)
	movq	8(%r14), %r8
	call	emit_library_call
.L4134:
	movq	-1744(%rbp), %rax
	cmpw	$61, (%rax)
	je	.L4838
.L4121:
	movq	-1792(%rbp), %r15
	movq	(%r15), %r14
	testq	%r14, %r14
	movq	%r14, -1792(%rbp)
	jne	.L4140
	jmp	.L426
.L4838:
	movq	%rax, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L4121
.L4837:
	cmpb	$25, 16(%r12)
	jne	.L4129
	movq	32(%rbx), %r13
	testl	$7, %r13d 
	jne	.L4129
	movq	32(%r12), %r12
	incq	%r12
	testl	$7, %r12d 
	jne	.L4129
	cmpq	$-1, %r13
	movq	8(%r14), %rdi
	leaq	7(%r13), %rsi
	cmovg	%r13, %rsi
	sarq	$3, %rsi
	call	plus_constant_wide
	movq	%r12, %rsi
	subq	%r13, %rsi
	movq	%rax, %r15
	cmpq	$-1, %rsi
	leaq	7(%rsi), %r9
	cmovle	%r9, %rsi
	xorl	%edi, %edi
	sarq	$3, %rsi
	call	gen_rtx_CONST_INT
	movq	sizetype_tab(%rip), %rsi
	movq	integer_types+40(%rip), %r10
	movq	const_int_rtx+504(%rip), %rcx
	testb	$2, target_flags+3(%rip)
	setne	%bl
	movq	%rcx, (%rsp)
	movl	$3, %ecx
	movzbl	61(%r10), %r8d
	movq	%rax, 16(%rsp)
	xorl	%eax, %eax
	movzbl	%bl, %r9d
	addl	$4, %r9d
	shrb	$1, %r8b
	movzbl	%r8b, %edi
	movq	%r15, %r8
	movl	%edi, 8(%rsp)
	movq	libfunc_table+128(%rip), %rdi
	movzbl	61(%rsi), %edx
	xorl	%esi, %esi
	shrb	$1, %dl
	movzbl	%dl, %r11d
	xorl	%edx, %edx
	movl	%r11d, 24(%rsp)
	call	emit_library_call
	jmp	.L4134
.L4836:
	movl	$.LC0, %edi
	movl	$4975, %esi
	jmp	.L4654
	.p2align 6,,7
.L4835:
	movzbl	2(%rcx), %edi
	xorl	%esi, %esi
	call	type_for_mode
	movl	$1, %esi
	movq	%rax, %rdi
	call	build_qualified_type
	movl	$1, %ecx
	movl	$1, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	assign_temp
	movq	-1744(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	emit_move_insn
	jmp	.L4126
.L4834:
	movq	-1512(%rbp), %rdx
	movq	%rbx, %rsi
	movl	$60, %edi
	call	size_binop
	movq	-1512(%rbp), %rdx
	movq	%r12, %rsi
	movl	$60, %edi
	movq	%rax, %rbx
	call	size_binop
	movq	%rax, %r12
	jmp	.L4124
.L4833:
	movq	%r12, %rdi
	call	save_expr
	movq	%rax, %r12
	movq	%rax, %rbx
	jmp	.L4123
.L4832:
	movl	$.LC0, %edi
	movl	$4905, %esi
	jmp	.L4654
	.p2align 6,,7
.L4831:
	mov	-1784(%rbp), %edx
	movq	%rsi, %rdi
	movl	$1, %ecx
	movl	-1548(%rbp), %esi
	movl	$1, %r8d
	call	adjust_address_1
	movq	%rax, %rdi
	jmp	.L3976
.L4830:
	testb	$2, target_flags+3(%rip)
	je	.L3963
	cmpq	$128, %rax
.L4648:
	jbe	.L3962
	cmpq	$32, %r12
	ja	.L3961
	movq	-1792(%rbp), %rbx
	cmpq	$0, (%rbx)
	jne	.L3962
.L3961:
	movl	-1884(%rbp), %r14d
	testl	%r14d, %r14d
	jne	.L3980
	movq	-1792(%rbp), %rax
	cmpq	$0, (%rax)
	jne	.L3983
	cmpq	$0, 24(%rax)
	jne	.L3984
	cmpq	$1, %r15
.L4649:
	je	.L3980
.L3983:
	movq	-1744(%rbp), %r15
	movq	-704(%rbp), %rdi
	movq	%r15, -1768(%rbp)
	call	expr_size
	movq	-1744(%rbp), %rdx
	movq	%rax, %r12
	cmpw	$66, (%rdx)
	je	.L4839
	movq	-1744(%rbp), %r8
	movzbl	2(%r8), %edi
	call	get_mode_alignment
	movl	%eax, %r15d
.L3987:
	movq	-1744(%rbp), %rbx
	movzbl	2(%rbx), %eax
	cmpb	$51, %al
	je	.L3990
	cmpw	$54, (%r12)
	je	.L4840
.L3990:
	movq	-1744(%rbp), %rsi
	movzwl	(%rsi), %eax
	cmpl	$71, %eax
	je	.L3992
	cmpl	$66, %eax
	je	.L4841
.L3996:
	cmpl	$75, %eax
	je	.L4000
	cmpl	$78, %eax
	je	.L4000
.L3995:
	movzwl	(%r12), %eax
	cmpl	$71, %eax
	je	.L4005
	cmpl	$66, %eax
	je	.L4842
.L4009:
	cmpl	$75, %eax
	je	.L4013
	cmpl	$78, %eax
	je	.L4013
.L4008:
	cmpw	$54, (%r12)
	je	.L4843
.L4018:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %ebx
	movq	%rax, -1568(%rbp)
	testl	%ebx, %ebx
	je	.L4443
.L4112:
	movslq	%ebx,%r14
	movl	clrstr_optab(,%r14,4), %edx
	cmpl	$1317, %edx
	je	.L4099
	cmpw	$54, (%r12)
	je	.L4844
.L4103:
	testb	$2, target_flags+3(%rip)
	je	.L4104
	cmpw	$63, mode_bitsize(%r14,%r14)
.L4652:
	jbe	.L4099
.L4102:
	movslq	%edx,%rax
	leaq	(%rax,%rax,4), %r10
	movq	%rax, -1576(%rbp)
	movq	insn_data+24(,%r10,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L4106
	movq	-1768(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L4099
.L4106:
	movq	48(%r15), %rax
	testq	%rax, %rax
	je	.L4107
	xorl	%esi, %esi
	movq	-1568(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L4099
.L4107:
	call	get_last_insn
	movl	$1, %edx
	movq	%r12, %rsi
	movl	%ebx, %edi
	movq	%rax, -1584(%rbp)
	call	convert_to_mode
	movq	%rax, %r13
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L4845
.L4108:
	movq	-1576(%rbp), %rcx
	movq	-1768(%rbp), %rdi
	xorl	%eax, %eax
	movq	%r13, %rsi
	movq	-1568(%rbp), %rdx
	leaq	(%rcx,%rcx,4), %r15
	call	*insn_data+16(,%r15,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L4653
	movq	-1584(%rbp), %rdi
	call	delete_insns_since
.L4099:
	movzbl	mode_wider_mode(%r14), %ebx
	testl	%ebx, %ebx
	jne	.L4112
.L4443:
	testb	$2, target_flags+3(%rip)
	movq	-1768(%rbp), %r11
	setne	%dl
	movq	8(%r11), %rsi
	movzbl	%dl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%r12, %rsi
	movq	sizetype_tab(%rip), %rbx
	movq	%rax, %r13
	movzbl	61(%rbx), %r14d
	shrb	$1, %r14b
	movzbl	%r14b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.0(%rip)
	movq	%rax, %r14
	je	.L4846
.L4117:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r13, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	const_int_rtx+512(%rip), %rsi
	movq	integer_types+40(%rip), %rdi
	movq	%rax, %r15
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r14, %rsi
	movq	%rax, (%r15)
	movq	%rax, %r12
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.0(%rip), %rcx
	movq	%rax, (%r12)
	movq	(%r15), %rbx
	movq	8(%rcx), %rdi
	movq	(%rbx), %r14
	movq	$0, (%r14)
	call	build_pointer_type
	movq	fn.0(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	movq	%r15, %rcx
	movl	$53, %edi
	movq	fn.0(%rip), %r10
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%r10), %r8
	movq	8(%r8), %rsi
	xorl	%r8d, %r8d
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r13)
	je	.L3980
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r13, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
.L4653:
	call	emit_insn
	jmp	.L3980
.L4846:
	movl	$.LC7, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.0(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.0(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.0, %edi
	movq	%rax, fn.0(%rip)
	call	ggc_add_tree_root
	movq	fn.0(%rip), %r9
	orb	$1, 49(%r9)
	movq	fn.0(%rip), %rdi
	orb	$8, 18(%rdi)
	movq	fn.0(%rip), %rsi
	orb	$64, 50(%rsi)
	xorl	%esi, %esi
	movq	fn.0(%rip), %r12
	orb	$2, 18(%r12)
	movq	fn.0(%rip), %rdi
	call	make_decl_rtl
	movq	fn.0(%rip), %rdi
	call	assemble_external
	jmp	.L4117
.L4845:
	movq	%r13, %rdi
	movl	%ebx, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L4108
	movq	%r13, %rsi
	movl	%ebx, %edi
	call	copy_to_mode_reg
	movq	%rax, %r13
	jmp	.L4108
	.p2align 6,,7
.L4104:
	cmpw	$31, mode_bitsize(%r14,%r14)
	jmp	.L4652
.L4844:
	movq	mode_mask_array(,%r14,8), %r8
	shrq	$1, %r8
	cmpq	%r8, 8(%r12)
	jbe	.L4102
	jmp	.L4103
.L4843:
	movq	8(%r12), %r13
	xorl	%r14d, %r14d
	movl	$17, %esi
.L4031:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4432
.L4028:
	movslq	%ecx,%r8
	movzbq	mode_size(%r8), %r10
	cmpq	%rsi, %r10
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L4028
.L4432:
	testl	%edi, %edi
	je	.L4021
	movslq	%edi,%rbx
	movq	%rbx, %r11
	salq	$4, %r11
	addq	optab_table+240(%rip), %r11
	cmpl	$1317, 8(%r11)
	je	.L4030
	call	get_mode_alignment
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L4030
	movzbq	mode_size(%rbx), %rsi
	movq	%r13, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r14
	movq	%rdx, %r13
.L4030:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L4031
.L4021:
	testq	%r13, %r13
	jne	.L4757
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L4034
	movq	ix86_cost(%rip), %r9
	mov	40(%r9), %edx
	cmpq	%rdx, %r14
	jae	.L4018
.L4035:
	movq	8(%r12), %r15
	movq	-1768(%rbp), %r14
	leaq	-688(%rbp), %r12
	movq	$clear_by_pieces_1, -648(%rbp)
	movq	$0, -640(%rbp)
	testb	$2, target_flags+3(%rip)
	setne	%cl
	xorl	%esi, %esi
	movq	%r14, -688(%rbp)
	movq	%r15, -664(%rbp)
	movq	8(%r14), %r15
	movq	$0, -656(%rbp)
	movl	$0, -1780(%rbp)
	movq	%r15, -680(%rbp)
	movzbl	%cl, %r8d 
	movzwl	(%r15), %edx
	leaq	5(,%r8,4), %r14
	leaq	16(%r12), %rcx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L4039
	cmpw	$99, %dx
	je	.L4039
	cmpw	$98, %dx
	je	.L4039
.L4038:
	movl	%esi, (%rcx)
	movl	$0, 20(%r12)
	leaq	56(%r12), %rdx
	movzwl	(%r15), %eax
	xorl	%ecx, %ecx
	cmpw	$96, %ax
	je	.L4041
	cmpw	$98, %ax
	je	.L4041
.L4040:
	movl	%ecx, (%rdx)
	movl	56(%r12), %eax
	testl	%eax, %eax
	je	.L4042
	movq	24(%r12), %r10
	movq	%r10, 32(%r12)
.L4042:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L4043
	movq	24(%r12), %r13
	movq	$0, -1776(%rbp)
	movl	$17, %esi
.L4056:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4435
.L4053:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L4053
.L4435:
	testl	%edi, %edi
	je	.L4046
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L4055
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L4055
	movzbq	mode_size(%rbx), %r8
	movq	%r13, %rax
	xorl	%edx, %edx
	divq	%r8
	addq	%rax, -1776(%rbp)
	movq	%rdx, %r13
.L4055:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L4056
.L4046:
	testq	%r13, %r13
	jne	.L4757
	cmpq	$2, -1776(%rbp)
	jbe	.L4043
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4437
.L4064:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %r10
	cmpq	%r14, %r10
	cmovae	-1780(%rbp), %ecx
	movl	%ecx, -1780(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L4064
.L4437:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L4043
	movzwl	(%r15), %edx
	leal	-67(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L4068
	cmpw	$54, %dx
	je	.L4068
	cmpw	$55, %dx
	je	.L4068
	cmpw	$58, %dx
	je	.L4068
	cmpw	$134, %dx
	je	.L4068
	cmpw	$56, %dx
	je	.L4068
	cmpw	$140, %dx
	je	.L4068
.L4043:
	cmpq	$1, %r14
	jbe	.L4071
.L4092:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4440
.L4078:
	movslq	%ecx,%r15
	movzbq	mode_size(%r15), %r11
	cmpq	%r14, %r11
	cmovae	-1780(%rbp), %ecx
	movl	%ecx, -1780(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L4078
.L4440:
	movl	-1780(%rbp), %eax
	testl	%eax, %eax
	je	.L4071
	movslq	-1780(%rbp),%r14
	movq	%r14, %rdx
	salq	$4, %rdx
	addq	optab_table+240(%rip), %rdx
	movl	8(%rdx), %ebx
	cmpl	$1317, %ebx
	je	.L4080
	movl	-1780(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %esi
	cmpl	%eax, %esi
	jb	.L4080
	movzbq	mode_size(%r14), %rdx
	movslq	%ebx,%r13
	cmpq	%rdx, 24(%r12)
	leaq	(%r13,%r13,4), %rdi
	movq	insn_data+16(,%rdi,8), %r15
	movq	%rdx, %r13
	jb	.L4080
	movl	56(%r12), %ecx
.L4090:
	testl	%ecx, %ecx
	je	.L4084
	subq	%rdx, 32(%r12)
.L4084:
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L4085
	movq	(%r12), %rdi
	movl	-1780(%rbp), %esi
	movl	$1, %r8d
	movq	8(%r12), %rdx
	movq	32(%r12), %rcx
	call	adjust_automodify_address_1
.L4651:
	movl	-1780(%rbp), %edx
	movq	%rax, %rbx
	movq	48(%r12), %rdi
	movq	32(%r12), %rsi
	call	*40(%r12)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	*%r15
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L4089
	addq	%r13, 32(%r12)
.L4089:
	movq	24(%r12), %r9
	movq	%r13, %rdx
	subq	%r13, %r9
	cmpq	%r13, %r9
	movq	%r9, 24(%r12)
	jae	.L4090
.L4080:
	movzbq	mode_size(%r14), %r14
	cmpq	$1, %r14
	ja	.L4092
.L4071:
	cmpq	$0, 24(%r12)
	je	.L3980
	jmp	.L4756
	.p2align 6,,7
.L4085:
	movq	(%r12), %rdi
	movl	-1780(%rbp), %esi
	movl	$1, %ecx
	movq	32(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L4651
.L4068:
	movq	%r15, %rdi
	call	copy_addr_to_reg
	movq	%rax, 8(%r12)
	jmp	.L4043
	.p2align 6,,7
.L4041:
	movl	$1, %ecx
	jmp	.L4040
.L4039:
	movl	$1, %esi
	jmp	.L4038
.L4034:
	cmpq	$2, %r14
	ja	.L4018
	jmp	.L4035
.L4013:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, %r13
	call	protect_from_queue
	cmpq	8(%r12), %r13
	movq	%rax, %rbx
	je	.L4847
.L4015:
	movq	%r12, %rdi
	call	copy_rtx
	movq	%rax, %r12
	movq	%r13, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L4008
.L4847:
	cmpq	16(%r12), %rax
	jne	.L4015
	jmp	.L4008
	.p2align 6,,7
.L4842:
	cmpb	$51, 2(%r12)
	je	.L4006
	movq	8(%r12), %r13
	cmpw	$71, (%r13)
	je	.L4848
.L4006:
	cmpl	$66, %eax
	jne	.L4009
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r12), %rax
	movq	%rax, %rbx
	je	.L4008
	movq	%r12, %rdi
	call	copy_rtx
	movq	%rax, %r12
	movq	%rbx, 8(%rax)
	jmp	.L4008
.L4848:
	movq	8(%r13), %rsi
	movq	%r12, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r13)
	movq	%rax, %rbx
	je	.L4007
	movzbl	2(%r12), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L4008
.L4007:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L4650:
	movq	%rax, %r12
	jmp	.L4008
.L4005:
	cmpq	$0, 16(%r12)
	je	.L4849
	movq	24(%r12), %rax
	testq	%rax, %rax
	jne	.L4650
	movq	8(%r12), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L4008
	.p2align 6,,7
.L4849:
	movq	8(%r12), %rdi
	call	copy_to_reg
	jmp	.L4650
.L4000:
	movq	-1744(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-1744(%rbp), %r11
	movq	%rax, %r13
	movq	16(%r11), %rdi
	call	protect_from_queue
	movq	-1744(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r13
	je	.L4850
.L4002:
	movq	-1744(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -1768(%rbp)
	movq	%r13, 8(%rax)
	movq	-1768(%rbp), %rdx
	movq	%rbx, 16(%rdx)
	jmp	.L3995
.L4850:
	cmpq	16(%rsi), %rax
	jne	.L4002
	jmp	.L3995
	.p2align 6,,7
.L4841:
	jne	.L3996
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, %rbx
	movq	-1744(%rbp), %rax
	cmpq	8(%rax), %rbx
	je	.L3995
	movq	%rax, %rdi
	call	copy_rtx
	movq	%rax, -1768(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L3995
	.p2align 6,,7
.L3992:
	movq	-1744(%rbp), %rdx
	cmpq	$0, 16(%rdx)
	je	.L4851
	movq	-1744(%rbp), %rsi
	movq	24(%rsi), %rdi
	testq	%rdi, %rdi
	movq	%rdi, -1768(%rbp)
	jne	.L3995
	movq	-1744(%rbp), %r14
	movq	8(%r14), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r13
	movq	%r13, -1768(%rbp)
	jmp	.L3995
	.p2align 6,,7
.L4851:
	movq	8(%rdx), %rdi
	call	copy_to_reg
	movq	%rax, -1768(%rbp)
	jmp	.L3995
.L4840:
	movzbl	%al, %edx 
	movzbl	mode_size(%rdx), %r10d
	cmpl	8(%r12), %r10d
	jne	.L3990
	movq	const_tiny_rtx(,%rdx,8), %rsi
	movq	%rbx, %rdi
	call	emit_move_insn
	jmp	.L3980
	.p2align 6,,7
.L4839:
	movq	16(%rdx), %rax
	movl	$8, %r15d
	testq	%rax, %rax
	je	.L3987
	movl	32(%rax), %r15d
	jmp	.L3987
.L3984:
	movq	-1792(%rbp), %r12
	xorl	%esi, %esi
	movq	32(%r12), %rdi
	call	host_integerp
	testl	%eax, %eax
	je	.L3983
	movq	-1792(%rbp), %r13
	xorl	%esi, %esi
	movq	24(%r13), %rdi
	call	host_integerp
	testl	%eax, %eax
	je	.L3983
	movq	-1792(%rbp), %rax
	xorl	%esi, %esi
	movq	32(%rax), %rdi
	call	tree_low_cst
	xorl	%esi, %esi
	movq	-1792(%rbp), %rbx
	movq	%rax, %r14
	movq	24(%rbx), %rdi
	call	tree_low_cst
	subq	%rax, %r14
	leaq	1(%r14), %r9
	cmpq	%r15, %r9
	jmp	.L4649
	.p2align 6,,7
.L3963:
	cmpq	$64, %rax
	jmp	.L4648
.L3825:
	movl	$.LC0, %edi
	movl	$5009, %esi
	jmp	.L4654
	.p2align 6,,7
.L807:
	movq	-720(%rbp), %rbx
	movq	-720(%rbp), %r14
	cmpb	$9, %dl
	movq	24(%rbx), %rcx
	movq	%rcx, -1800(%rbp)
	movq	8(%r14), %r15
	movq	$0, -1816(%rbp)
	movq	$0, -1824(%rbp)
	movq	%r15, -784(%rbp)
	je	.L4852
.L808:
	movq	-1800(%rbp), %rsi
	movl	$0, -1804(%rbp)
	movq	104(%rsi), %rdi
	testq	%rdi, %rdi
	je	.L809
	cmpq	$0, 112(%rsi)
	jne	.L4853
.L809:
	movl	-1804(%rbp), %eax
	testl	%eax, %eax
	jne	.L4854
.L810:
	movl	-1884(%rbp), %eax
	testl	%eax, %eax
	jne	.L863
	movq	-1744(%rbp), %r12
	cmpw	$61, (%r12)
	je	.L4855
.L811:
	xorl	%r10d, %r10d
	movq	-704(%rbp), %rdx
	movq	$0, -1848(%rbp)
	cmpl	$0, -1804(%rbp)
	movq	$0, -1840(%rbp)
	sete	%r10b
	movl	%r10d, -1852(%rbp)
	movq	40(%rdx), %rdi
	testq	%rdi, %rdi
	movq	%rdi, -1832(%rbp)
	je	.L815
	movl	-1852(%rbp), %r14d
	testl	%r14d, %r14d
	jne	.L4445
.L861:
	movq	-1832(%rbp), %r15
	movq	24(%r15), %rax
	testq	%rax, %rax
	je	.L819
	cmpb	$113, 16(%rax)
	je	.L4856
.L819:
	movl	$1, %ebx
.L822:
	movq	-1832(%rbp), %rsi
	addq	%rbx, -1848(%rbp)
	movq	32(%rsi), %r13
	movzbl	16(%r13), %eax
	cmpb	$46, %al
	je	.L4857
	movzbl	%al, %eax
	cmpl	$28, %eax
	je	.L843
	cmpl	$28, %eax
	ja	.L860
	cmpl	$26, %eax
	je	.L842
	cmpl	$26, %eax
	ja	.L840
	cmpl	$25, %eax
	je	.L839
.L858:
	xorl	%r12d, %r12d
.L838:
	movl	%r12d, %edx
.L826:
	movq	-1840(%rbp), %r9
	movq	-1832(%rbp), %r12
	addq	%rbx, %r9
	testl	%edx, %edx
	cmove	-1840(%rbp), %r9
	movq	%r9, -1840(%rbp)
	movq	(%r12), %rax
	testq	%rax, %rax
	movq	%rax, -1832(%rbp)
	je	.L815
	movl	-1852(%rbp), %ebx
	testl	%ebx, %ebx
	je	.L861
.L4445:
	cmpq	$0, -712(%rbp)
	jle	.L864
	movl	-1884(%rbp), %r11d
	testl	%r11d, %r11d
	jne	.L865
	movq	-1744(%rbp), %rbx
	cmpw	$61, (%rbx)
	je	.L4858
	movq	-1744(%rbp), %r8
	movq	-712(%rbp), %rsi
	xorl	%edi, %edi
	movq	%r8, -1864(%rbp)
	call	gen_rtx_CONST_INT
	movq	%rax, -1872(%rbp)
	movq	-1744(%rbp), %rax
	cmpw	$66, (%rax)
	je	.L4859
	movq	-1744(%rbp), %rax
	movzbl	2(%rax), %edi
	call	get_mode_alignment
	movl	%eax, %r15d
.L869:
	movq	-1744(%rbp), %rbx
	movzbl	2(%rbx), %eax
	cmpb	$51, %al
	je	.L872
	movq	-1872(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L4860
.L872:
	movq	-1744(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L874
	cmpl	$66, %eax
	je	.L4861
.L878:
	cmpl	$75, %eax
	je	.L882
	cmpl	$78, %eax
	je	.L882
.L877:
	movq	-1872(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L887
	cmpl	$66, %eax
	je	.L4862
.L891:
	cmpl	$75, %eax
	je	.L895
	cmpl	$78, %eax
	je	.L895
.L890:
	movq	-1872(%rbp), %rax
	cmpw	$54, (%rax)
	je	.L4863
.L900:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %ebx
	movq	%rax, -800(%rbp)
	testl	%ebx, %ebx
	je	.L4201
.L994:
	movslq	%ebx,%r12
	movl	clrstr_optab(,%r12,4), %edx
	cmpl	$1317, %edx
	je	.L981
	movq	-1872(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L4864
.L985:
	testb	$2, target_flags+3(%rip)
	je	.L986
	cmpw	$63, mode_bitsize(%r12,%r12)
.L4533:
	jbe	.L981
.L984:
	movslq	%edx,%r14
	leaq	(%r14,%r14,4), %r15
	movq	insn_data+24(,%r15,8), %r13
	movq	(%r13), %rax
	testq	%rax, %rax
	je	.L988
	movq	-1864(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L981
.L988:
	movq	48(%r13), %rax
	testq	%rax, %rax
	je	.L989
	xorl	%esi, %esi
	movq	-800(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L981
.L989:
	call	get_last_insn
	movl	$1, %edx
	movq	-1872(%rbp), %rsi
	movl	%ebx, %edi
	movq	%rax, -808(%rbp)
	call	convert_to_mode
	movq	%rax, %r15
	movq	24(%r13), %rax
	testq	%rax, %rax
	jne	.L4865
.L990:
	leaq	(%r14,%r14,4), %r13
	xorl	%eax, %eax
	movq	-1864(%rbp), %rdi
	movq	%r15, %rsi
	movq	-800(%rbp), %rdx
	call	*insn_data+16(,%r13,8)
	testq	%rax, %rax
	jne	.L4534
	movq	-808(%rbp), %rdi
	call	delete_insns_since
.L981:
	movzbl	mode_wider_mode(%r12), %ebx
	testl	%ebx, %ebx
	jne	.L994
.L4201:
	testb	$2, target_flags+3(%rip)
	movq	-1864(%rbp), %rax
	setne	%bl
	movq	8(%rax), %rsi
	movzbl	%bl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-1872(%rbp), %rsi
	movq	sizetype_tab(%rip), %r9
	movq	%rax, %r13
	movzbl	61(%r9), %edx
	shrb	$1, %dl
	movzbl	%dl, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.0(%rip)
	movq	%rax, %r14
	je	.L4866
.L999:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r13, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	const_int_rtx+512(%rip), %rsi
	movq	integer_types+40(%rip), %rdi
	movq	%rax, %r15
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r14, %rsi
	movq	%rax, (%r15)
	movq	%rax, %r12
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.0(%rip), %r11
	movq	%rax, (%r12)
	movq	(%r15), %rdx
	movq	8(%r11), %rdi
	movq	(%rdx), %r14
	movq	$0, (%r14)
	call	build_pointer_type
	movq	fn.0(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r15, %rcx
	movq	fn.0(%rip), %rsi
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%rsi), %r10
	movq	8(%r10), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r13)
	jne	.L4867
.L865:
	movl	$1, -1884(%rbp)
.L1001:
	movq	-704(%rbp), %rbx
	movq	40(%rbx), %r9
	movl	$0, -1888(%rbp)
	testq	%r9, %r9
	movq	%r9, -1896(%rbp)
	je	.L426
	.p2align 4,,7
.L3823:
	movl	-1884(%rbp), %eax
	movq	-1896(%rbp), %rcx
	testl	%eax, %eax
	movq	32(%rcx), %r15
	movq	24(%rcx), %r12
	je	.L1007
	movzbl	16(%r15), %eax
	cmpl	$28, %eax
	je	.L1018
	cmpl	$28, %eax
	ja	.L1035
	cmpl	$26, %eax
	je	.L1017
	cmpl	$26, %eax
	ja	.L1015
	cmpl	$25, %eax
	je	.L1014
.L1033:
	xorl	%ebx, %ebx
.L1013:
	testl	%ebx, %ebx
	jne	.L1005
.L1007:
	movq	-784(%rbp), %rcx
	movzbl	61(%rcx), %r10d
	movzbl	17(%rcx), %esi
	shrb	$1, %r10b
	shrb	$5, %sil
	movzbl	%r10b, %edi
	andl	$1, %esi
	cmpl	$51, %edi
	movl	%esi, -692(%rbp)
	movl	%edi, -812(%rbp)
	je	.L4868
	movslq	-812(%rbp),%r14
	movzwq	mode_bitsize(%r14,%r14), %rax
.L4538:
	movq	%rax, -1904(%rbp)
.L1039:
	testq	%r12, %r12
	je	.L2894
	cmpb	$113, 16(%r12)
	je	.L4869
	xorl	%esi, %esi
	movq	%r12, %rdi
	call	host_integerp
	testl	%eax, %eax
	je	.L2893
.L2894:
	movq	-784(%rbp), %rsi
	movq	32(%rsi), %rdi
	movl	$1, %esi
	call	host_integerp
	testl	%eax, %eax
	jne	.L2892
.L2893:
	testq	%r12, %r12
	je	.L4870
.L2895:
	cmpq	$0, -1824(%rbp)
	jne	.L4871
.L2896:
	movq	-784(%rbp), %r11
	movq	sizetype_tab+8(%rip), %rdi
	movq	40(%r11), %rsi
	call	convert
	movq	%r12, %rsi
	movl	$61, %edi
	movq	%rax, %rdx
	call	size_binop
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	expand_expr
	movq	%r12, %rdi
	xorl	%r12d, %r12d
	movq	%rax, %r14
	call	highest_pow2_factor
	movq	-1744(%rbp), %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	call	offset_address
	movl	$1, %r8d
	movl	$1, %ecx
	movl	-812(%rbp), %esi
	xorl	%edx, %edx
	movq	%rax, %rdi
	call	adjust_address_1
	movl	$0, -2428(%rbp)
	movq	%rax, %r13
	movzbl	16(%r15), %eax
	cmpb	$47, %al
	je	.L4872
	cmpb	$51, %al
	je	.L4873
.L2907:
	movzwl	(%r13), %eax
	subl	$66, %eax
	cmpl	$12, %eax
	ja	.L2955
	mov	%eax, %edx
	jmp	*.L2956(,%rdx,8)
	.section	.rodata
	.align 8
	.align 4
.L2956:
	.quad	.L2949
	.quad	.L2955
	.quad	.L2955
	.quad	.L2955
	.quad	.L2955
	.quad	.L2954
	.quad	.L2955
	.quad	.L2955
	.quad	.L2955
	.quad	.L2952
	.quad	.L2952
	.quad	.L2955
	.quad	.L2952
	.text
.L2949:
	movq	8(%r13), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L2948:
	testl	%ebx, %ebx
	je	.L2945
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L2957
	testb	%al, %al
	jne	.L4874
.L2957:
	movzbl	2(%r13), %edx
	movq	%r15, %rdi
	xorl	%esi, %esi
.L4609:
	xorl	%ecx, %ecx
	call	expand_expr
	testb	$8, 3(%r13)
	movq	%rax, -2640(%rbp)
	jne	.L4476
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L4471
	movl	$1, -2428(%rbp)
.L4471:
	movq	-2640(%rbp), %rsi
	movzwl	(%rsi), %edx
.L2906:
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L2984
	cmpw	$54, %dx
	je	.L2984
	cmpw	$55, %dx
	je	.L2984
	cmpw	$58, %dx
	je	.L2984
	cmpw	$134, %dx
	je	.L2984
	cmpw	$56, %dx
	je	.L2984
	cmpw	$140, %dx
	je	.L2984
.L2983:
	movq	-2640(%rbp), %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	je	.L2986
	cmpq	%r13, -2640(%rbp)
	je	.L2985
	movq	-2640(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L4875
.L2986:
	movzbl	16(%r15), %eax
	testb	%al, %al
	je	.L2985
	testl	%r12d, %r12d
	jne	.L2985
	movzbl	%al, %r12d 
	cmpb	$100, tree_code_type(%r12)
	je	.L4876
.L2987:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L2992
	cmpl	$66, %eax
	je	.L4877
.L2996:
	cmpl	$75, %eax
	je	.L3000
	cmpl	$78, %eax
	je	.L3000
.L2995:
	movq	-2640(%rbp), %rcx
	movzbl	2(%rcx), %eax
	movzbl	2(%r13), %ecx
	cmpb	%cl, %al
	je	.L3005
	testb	%al, %al
	je	.L3005
	movq	8(%r15), %r14
	movl	-2428(%rbp), %eax
	movzbl	17(%r14), %r15d
	shrb	$5, %r15b
	movl	%r15d, %edx
	andl	$1, %edx
	testl	%eax, %eax
	je	.L3006
	movq	-2640(%rbp), %rsi
	movzbl	%cl, %edi
	call	convert_to_mode
	movq	%r13, %rdi
	movq	%rax, %rsi
	movq	%rax, -2640(%rbp)
.L4642:
	call	emit_move_insn
.L2985:
	xorl	%r12d, %r12d
	testl	%r12d, %r12d
	je	.L1005
	movl	-2428(%rbp), %eax
	testl	%eax, %eax
	je	.L3798
	movq	-2640(%rbp), %r15
	cmpw	$66, (%r15)
	je	.L3798
	.p2align 4,,7
.L1005:
	movq	-1896(%rbp), %rsi
	movq	(%rsi), %rbx
	incl	-1888(%rbp)
	testq	%rbx, %rbx
	movq	%rbx, -1896(%rbp)
	jne	.L3823
	jmp	.L426
.L3798:
	cmpb	$51, 2(%r13)
	je	.L1005
	cmpw	$61, (%r13)
	je	.L4878
.L3801:
	movq	%r13, %rdi
	call	copy_to_reg
	jmp	.L1005
.L4878:
	cmpl	$52, 8(%r13)
	jbe	.L1005
	jmp	.L3801
.L3006:
	movq	-2640(%rbp), %rsi
	movq	%r13, %rdi
	call	convert_move
	jmp	.L2985
.L3005:
	cmpb	$51, %al
	je	.L4879
.L3009:
	cmpw	$39, (%r13)
	je	.L4880
	cmpb	$51, %al
	je	.L4881
	movq	%r13, %rdi
	movq	-2640(%rbp), %rsi
	jmp	.L4642
.L4881:
	movq	-2640(%rbp), %rdi
	movq	%r13, -2600(%rbp)
	movq	%rdi, -2608(%rbp)
	movq	%r15, %rdi
	call	expr_size
	movl	$8, %edx
	movq	16(%r13), %rcx
	movq	%rax, %r14
	testq	%rcx, %rcx
	je	.L3600
	movl	32(%rcx), %edx
.L3600:
	movq	-2640(%rbp), %r15
	movq	16(%r15), %rax
	testq	%rax, %rax
	je	.L3601
	cmpl	32(%rax), %edx
	jb	.L3602
.L3597:
	testq	%rax, %rax
	movl	$8, -2588(%rbp)
	je	.L3598
	movl	32(%rax), %eax
	movl	%eax, -2588(%rbp)
.L3598:
	cmpb	$51, 2(%r13)
	jne	.L4766
	movq	-2640(%rbp), %rsi
	cmpb	$51, 2(%rsi)
	jne	.L4765
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L3609
	cmpl	$66, %eax
	je	.L4882
.L3613:
	cmpl	$75, %eax
	je	.L3617
	cmpl	$78, %eax
	je	.L3617
.L3612:
	movq	-2640(%rbp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L3622
	cmpl	$66, %eax
	je	.L4883
.L3626:
	cmpl	$75, %eax
	je	.L3630
	cmpl	$78, %eax
	je	.L3630
.L3625:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L3635
	cmpl	$66, %eax
	je	.L4884
.L3639:
	cmpl	$75, %eax
	je	.L3643
	cmpl	$78, %eax
	je	.L3643
.L3638:
	movq	-2600(%rbp), %rbx
	cmpw	$66, (%rbx)
	jne	.L4764
	movq	-2608(%rbp), %r9
	cmpw	$66, (%r9)
	jne	.L4763
	testq	%r14, %r14
	je	.L4762
	cmpw	$54, (%r14)
	je	.L4885
.L3651:
	shrl	$3, -2588(%rbp)
	xorl	%edi, %edi
	mov	-2588(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %ebx
	movl	$1, volatile_ok(%rip)
	movq	%rax, -1480(%rbp)
	testl	%ebx, %ebx
	je	.L4415
.L3784:
	movslq	%ebx,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L3770
	cmpw	$54, (%r14)
	je	.L4886
.L3774:
	testb	$2, target_flags+3(%rip)
	je	.L3775
	cmpw	$63, mode_bitsize(%r15,%r15)
.L4640:
	jbe	.L3770
.L3773:
	movslq	%edx,%r9
	leaq	(%r9,%r9,4), %rcx
	movq	%r9, -1488(%rbp)
	movq	insn_data+24(,%rcx,8), %rsi
	movq	(%rsi), %rax
	movq	%rsi, -1496(%rbp)
	testq	%rax, %rax
	je	.L3777
	movq	-2600(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L3770
.L3777:
	movq	-1496(%rbp), %rdi
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L4887
.L3778:
	movq	-1496(%rbp), %r10
	movq	72(%r10), %rax
	testq	%rax, %rax
	je	.L3779
	xorl	%esi, %esi
	movq	-1480(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L3770
.L3779:
	call	get_last_insn
	movl	$1, %edx
	movq	%r14, %rsi
	movl	%ebx, %edi
	movq	%rax, -1504(%rbp)
	call	convert_to_mode
	movq	-1496(%rbp), %r11
	movq	%rax, %r12
	movq	48(%r11), %rax
	testq	%rax, %rax
	jne	.L4888
.L3780:
	movq	-1488(%rbp), %r8
	movq	-2600(%rbp), %rdi
	xorl	%eax, %eax
	movq	-2608(%rbp), %rsi
	movq	%r12, %rdx
	movq	-1480(%rbp), %rcx
	leaq	(%r8,%r8,4), %rbx
	call	*insn_data+16(,%rbx,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L4504
	movq	-1504(%rbp), %rdi
	call	delete_insns_since
.L3770:
	movzbl	mode_wider_mode(%r15), %ebx
	testl	%ebx, %ebx
	jne	.L3784
.L4415:
	testb	$2, target_flags+3(%rip)
	movq	-2600(%rbp), %r15
	movl	$0, volatile_ok(%rip)
	setne	%cl
	movq	8(%r15), %rsi
	movzbl	%cl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%sil
	movq	%rax, %r15
	movq	-2608(%rbp), %rax
	movzbl	%sil, %edi
	movq	8(%rax), %rsi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%r14, %rsi
	movq	sizetype_tab(%rip), %rdx
	movq	%rax, %rbx
	movzbl	61(%rdx), %r12d
	shrb	$1, %r12b
	movzbl	%r12b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r14
	je	.L4889
.L3793:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r15, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r14, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %r8
	movq	%rax, (%rbx)
	movq	(%r12), %rsi
	movq	8(%r8), %rdi
	movq	(%rsi), %rdx
	movq	$0, (%rdx)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %rbx
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%rbx), %r14
	movq	8(%r14), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r15)
	je	.L2985
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r15, %rdx
.L4641:
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L2985
.L4889:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r11
	xorl	%esi, %esi
	orb	$1, 49(%r11)
	movq	fn.1(%rip), %r10
	orb	$8, 18(%r10)
	movq	fn.1(%rip), %rdi
	orb	$64, 50(%rdi)
	movq	fn.1(%rip), %r9
	orb	$2, 18(%r9)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L3793
.L4504:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L2985
	.p2align 6,,7
.L4888:
	movq	%r12, %rdi
	movl	%ebx, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L3780
	movq	%r12, %rsi
	movl	%ebx, %edi
	call	copy_to_mode_reg
	movq	%rax, %r12
	jmp	.L3780
.L4887:
	movq	-2608(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L3770
	jmp	.L3778
.L3775:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L4640
.L4886:
	movq	mode_mask_array(,%r15,8), %r12
	shrq	$1, %r12
	cmpq	%r12, 8(%r14)
	jbe	.L3773
	jmp	.L3774
.L4885:
	movq	8(%r14), %r12
	xorl	%r15d, %r15d
	movl	$17, %esi
.L3664:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4404
.L3661:
	movslq	%ecx,%r8
	movzbq	mode_size(%r8), %r10
	cmpq	%rsi, %r10
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L3661
.L4404:
	testl	%edi, %edi
	je	.L3654
	movslq	%edi,%rbx
	movq	%rbx, %r11
	salq	$4, %r11
	addq	optab_table+240(%rip), %r11
	cmpl	$1317, 8(%r11)
	je	.L3663
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L3663
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L3663:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L3664
.L3654:
	testq	%r12, %r12
	jne	.L4757
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L3667
	movq	ix86_cost(%rip), %rbx
	mov	40(%rbx), %edx
	cmpq	%rdx, %r15
	jae	.L3651
.L3668:
	movq	-2608(%rbp), %rsi
	movq	-2600(%rbp), %rdi
	movq	8(%r14), %r12
	movq	-2600(%rbp), %r11
	testb	$2, target_flags+3(%rip)
	movq	8(%rsi), %r8
	setne	%r14b
	movq	$0, -488(%rbp)
	movl	$0, -2620(%rbp)
	movq	%r8, -512(%rbp)
	movq	8(%rdi), %r10
	movq	%r11, -544(%rbp)
	movzbl	%r14b, %ecx
	leal	5(,%rcx,4), %r14d
	xorl	%ecx, %ecx
	movzwl	(%r10), %edx
	movq	%r10, -2616(%rbp)
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L3673
	cmpw	$99, %dx
	je	.L3673
	cmpw	$98, %dx
	je	.L3673
.L3672:
	movq	-2616(%rbp), %rbx
	movl	%ecx, -528(%rbp)
	xorl	%edx, %edx
	movzwl	(%rbx), %eax
	cmpw	$96, %ax
	je	.L3675
	cmpw	$98, %ax
	je	.L3675
.L3674:
	movl	%edx, -480(%rbp)
	movq	-2608(%rbp), %rax
	xorl	%ecx, %ecx
	movq	-2616(%rbp), %rdx
	movq	%rax, -520(%rbp)
	movq	%rdx, -536(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L3678
	cmpw	$99, %dx
	je	.L3678
	cmpw	$98, %dx
	je	.L3678
.L3677:
	movl	-480(%rbp), %r9d
	movl	%ecx, -504(%rbp)
	movl	$0, -500(%rbp)
	movl	$0, -524(%rbp)
	testl	%r9d, %r9d
	je	.L3679
	movq	%r12, -488(%rbp)
.L3679:
	movl	-504(%rbp), %r10d
	movq	%r12, -496(%rbp)
	testl	%r10d, %r10d
	je	.L3681
	movl	-528(%rbp), %r11d
	testl	%r11d, %r11d
	jne	.L3680
.L3681:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L3694:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4407
.L3691:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L3691
.L4407:
	testl	%edi, %edi
	je	.L3684
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L3693
	movq	%r8, -2648(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-2648(%rbp), %r8
	jb	.L3693
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L3693:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L3694
.L3684:
	testq	%r12, %r12
	jne	.L4757
	cmpq	$2, %r15
	jbe	.L3680
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4409
.L3702:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %r9d
	cmpl	%r14d, %r9d
	cmovae	-2620(%rbp), %ecx
	movl	%ecx, -2620(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L3702
.L4409:
	movl	-504(%rbp), %eax
	testl	%eax, %eax
	jne	.L3708
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L3706
	cmpw	$54, %dx
	je	.L3706
	cmpw	$55, %dx
	je	.L3706
	cmpw	$58, %dx
	je	.L3706
	cmpw	$134, %dx
	je	.L3706
	cmpw	$56, %dx
	je	.L3706
	cmpw	$140, %dx
	je	.L3706
.L3708:
	movl	-528(%rbp), %eax
	testl	%eax, %eax
	jne	.L3680
	movq	-2616(%rbp), %rbx
	movzwl	(%rbx), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L3710
	cmpw	$54, %dx
	je	.L3710
	cmpw	$55, %dx
	je	.L3710
	cmpw	$58, %dx
	je	.L3710
	cmpw	$134, %dx
	je	.L3710
	cmpw	$56, %dx
	je	.L3710
	cmpw	$140, %dx
	je	.L3710
.L3680:
	cmpl	$1, %r14d
	jbe	.L3713
.L3764:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4412
.L3720:
	movslq	%ecx,%r8
	movzbl	mode_size(%r8), %edx
	cmpl	%r14d, %edx
	cmovae	-2620(%rbp), %ecx
	movl	%ecx, -2620(%rbp)
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L3720
.L4412:
	movl	-2620(%rbp), %eax
	testl	%eax, %eax
	je	.L3713
	movslq	-2620(%rbp),%r15
	movq	%r15, %r14
	salq	$4, %r14
	addq	optab_table+240(%rip), %r14
	movl	8(%r14), %ebx
	cmpl	$1317, %ebx
	je	.L3722
	movl	-2620(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L3722
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rsi
	movq	$0, -2632(%rbp)
	leaq	(%rsi,%rsi,4), %rdi
	cmpq	%rdx, -496(%rbp)
	movq	insn_data+16(,%rdi,8), %r12
	movq	%rdx, -1672(%rbp)
	movq	%r12, -1472(%rbp)
	leaq	-544(%rbp), %r12
	jb	.L3722
	movl	-480(%rbp), %ecx
.L3762:
	testl	%ecx, %ecx
	je	.L3726
	subq	%rdx, 56(%r12)
.L3726:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L3727
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L3728
	movl	-2620(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L4636:
	movq	%rax, -2632(%rbp)
.L3727:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L3730
	movq	24(%r12), %rdi
	movl	-2620(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L4637:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L4890
	movl	target_flags(%rip), %esi
	testl	$33554432, %esi
	je	.L3736
	movzbl	mode_size(%r15), %r9d
	leal	7(%r9), %edx
	andl	$-8, %edx
.L3737:
	movq	cfun(%rip), %rbx
	andl	$33554432, %esi
	movq	16(%rbx), %r11
	leaq	8(%r11), %rdi
	movl	8(%r11), %ecx
	je	.L3738
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L4638:
	movq	%r15, %r8
	leal	(%rax,%rcx), %esi
	salq	$4, %r8
	movl	%esi, (%rdi)
	addq	optab_table+384(%rip), %r8
	movl	8(%r8), %eax
	cmpl	$1317, %eax
	je	.L3740
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rcx
	movq	insn_data+24(,%rcx,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L3741
	movq	%r14, %rdi
	movl	-2620(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L4891
.L3741:
	leaq	(%rbx,%rbx,4), %r9
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r9,8)
.L4639:
	movq	%rax, %rdi
	call	emit_insn
.L3760:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L3761
	movq	-1672(%rbp), %r14
	addq	%r14, 56(%r12)
.L3761:
	movq	48(%r12), %rbx
	movq	-1672(%rbp), %rdx
	subq	-1672(%rbp), %rbx
	cmpq	%rdx, %rbx
	movq	%rbx, 48(%r12)
	jae	.L3762
.L3722:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L3764
.L3713:
	cmpq	$0, -496(%rbp)
.L4767:
	je	.L2985
.L4742:
	movl	$.LC0, %edi
	movl	$1503, %esi
	movl	$.LC10, %edx
	jmp	.L4655
	.p2align 6,,7
.L4891:
	movl	-2620(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L3741
.L3740:
	movzbl	mode_size(%r15), %edi
	cmpl	%edx, %edi
	je	.L4892
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r11b
	movzbl	%r11b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r10b
	movzbl	%r10b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L3748:
	movl	-2620(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%r8d, %r8d
	testq	%r8, %r8
	movq	%rax, %rbx
	je	.L3757
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L4893
.L3757:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L3760
.L4893:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L3757
	.p2align 6,,7
.L4892:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L3748
.L3738:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L4638
.L3736:
	movzbl	mode_size(%r15), %r10d
	leal	1(%r10), %edx
	andl	$-2, %edx
	jmp	.L3737
.L4890:
	movq	%rax, %rsi
	movq	-2632(%rbp), %rdi
	xorl	%eax, %eax
	call	*-1472(%rbp)
	jmp	.L4639
.L3730:
	movq	24(%r12), %rdi
	movl	-2620(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L4637
.L3728:
	movl	-2620(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L4636
.L3710:
	movq	-2616(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -536(%rbp)
	jmp	.L3680
.L3706:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -512(%rbp)
	jmp	.L3708
	.p2align 6,,7
.L3678:
	movl	$1, %ecx
	jmp	.L3677
.L3675:
	movl	$1, %edx
	jmp	.L3674
.L3673:
	movl	$1, %ecx
	jmp	.L3672
.L3667:
	cmpq	$2, %r15
	ja	.L3651
	jmp	.L3668
.L4762:
	movl	$.LC0, %edi
	movl	$1648, %esi
.L4751:
	movl	$.LC9, %edx
	jmp	.L4655
.L4763:
	movl	$.LC0, %edi
	movl	$1646, %esi
	jmp	.L4751
.L4764:
	movl	$.LC0, %edi
	movl	$1644, %esi
	jmp	.L4751
	.p2align 6,,7
.L3643:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L4894
.L3645:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L3638
.L4894:
	cmpq	16(%r14), %rax
	jne	.L3645
	jmp	.L3638
	.p2align 6,,7
.L4884:
	cmpb	$51, 2(%r14)
	je	.L3636
	movq	8(%r14), %r12
	cmpw	$71, (%r12)
	je	.L4895
.L3636:
	cmpl	$66, %eax
	jne	.L3639
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L3638
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%rbx, 8(%rax)
	jmp	.L3638
.L4895:
	movq	8(%r12), %rsi
	movq	%r14, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L3637
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L3638
.L3637:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L4635:
	movq	%rax, %r14
	jmp	.L3638
.L3635:
	cmpq	$0, 16(%r14)
	je	.L4896
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L4635
	movq	8(%r14), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L3638
	.p2align 6,,7
.L4896:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L4635
.L3630:
	movq	-2640(%rbp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-2640(%rbp), %r10
	movq	%rax, %r12
	movq	16(%r10), %rdi
	call	protect_from_queue
	movq	-2640(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L4897
.L3632:
	movq	-2640(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -2608(%rbp)
	movq	%r12, 8(%rax)
	movq	-2608(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L3625
.L4897:
	cmpq	16(%rsi), %rax
	jne	.L3632
	jmp	.L3625
	.p2align 6,,7
.L4883:
	cmpb	$51, 2(%rbx)
	je	.L3623
	movq	8(%rbx), %r12
	cmpw	$71, (%r12)
	je	.L4898
.L3623:
	cmpl	$66, %eax
	jne	.L3626
	movq	-2640(%rbp), %r12
	xorl	%esi, %esi
	movq	8(%r12), %rdi
	call	protect_from_queue
	movq	-2640(%rbp), %rdx
	movq	%rax, %rbx
	cmpq	8(%rdx), %rax
	je	.L3625
	movq	%rdx, %rdi
	call	copy_rtx
	movq	%rax, -2608(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L3625
.L4898:
	movq	8(%r12), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L3624
	movq	-2640(%rbp), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -2608(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L3625
.L3624:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L4634:
	movq	%rax, -2608(%rbp)
	jmp	.L3625
.L3622:
	movq	-2640(%rbp), %rdx
	cmpq	$0, 16(%rdx)
	je	.L4899
	movq	-2640(%rbp), %r11
	movq	24(%r11), %r15
	testq	%r15, %r15
	movq	%r15, -2608(%rbp)
	jne	.L3625
	movq	-2640(%rbp), %r12
	movq	8(%r12), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rcx
	movq	%rcx, -2608(%rbp)
	jmp	.L3625
	.p2align 6,,7
.L4899:
	movq	8(%rdx), %rdi
	call	copy_to_reg
	jmp	.L4634
.L3617:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L4900
.L3619:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -2600(%rbp)
	movq	%r12, 8(%rax)
	movq	-2600(%rbp), %rcx
	movq	%rbx, 16(%rcx)
	jmp	.L3612
.L4900:
	cmpq	16(%r13), %rax
	jne	.L3619
	jmp	.L3612
	.p2align 6,,7
.L4882:
	jne	.L3613
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L3612
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -2600(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L3612
	.p2align 6,,7
.L3609:
	testq	%rcx, %rcx
	je	.L4901
	movq	24(%r13), %rdx
	testq	%rdx, %rdx
	movq	%rdx, -2600(%rbp)
	jne	.L3612
	movq	8(%r13), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rbx
	movq	%rbx, -2600(%rbp)
	jmp	.L3612
	.p2align 6,,7
.L4901:
	movq	8(%r13), %rdi
	call	copy_to_reg
	movq	%rax, -2600(%rbp)
	jmp	.L3612
.L4765:
	movl	$.LC0, %edi
	movl	$1637, %esi
	jmp	.L4751
.L4766:
	movl	$.LC0, %edi
	movl	$1634, %esi
	jmp	.L4751
	.p2align 6,,7
.L3602:
	testq	%rcx, %rcx
	movl	$8, -2588(%rbp)
	je	.L3598
	movl	32(%rcx), %r11d
	movl	%r11d, -2588(%rbp)
	jmp	.L3598
.L3601:
	cmpl	$7, %edx
	ja	.L3597
	jmp	.L3602
.L4880:
	movq	8(%r15), %rdi
	call	int_size_in_bytes
	cmpw	$39, (%r13)
	movl	%eax, -1436(%rbp)
	jne	.L4761
	movq	8(%r13), %rcx
	movq	8(%rcx), %r15
	movl	(%rcx), %r14d
	cmpq	$0, 8(%r15)
	movslq	%r14d,%rbx
	sete	%r8b
	leaq	15(,%rbx,8), %r9
	andq	$-16, %r9
	subq	%r9, %rsp
	leaq	48(%rsp), %r11
	movzbl	%r8b, %r12d
	movq	%r11, -1448(%rbp)
	movl	%r12d, -2584(%rbp)
	movl	-2584(%rbp), %eax
	cmpl	%r14d, %eax
	movl	%eax, -2576(%rbp)
	jge	.L4398
.L3581:
	movslq	-2576(%rbp),%r11
	movq	8(%rcx,%r11,8), %r10
	movq	%r11, -1456(%rbp)
	movl	-1436(%rbp), %ecx
	movq	8(%r10), %rsi
	movq	16(%r10), %rdx
	testl	%ecx, %ecx
	movzbl	2(%rsi), %r14d
	movq	8(%rdx), %r15
	movslq	%r14d,%rdi
	movzbl	mode_size(%rdi), %ebx
	movq	%rdi, -1464(%rbp)
	movl	%ebx, -2580(%rbp)
	js	.L3554
	movslq	-1436(%rbp),%r9
	mov	%ebx, %r12d
	leaq	(%r12,%r15), %rbx
	cmpq	%r9, %rbx
	jle	.L3554
	movl	-1436(%rbp), %eax
	subl	%r15d, %eax
	movl	%eax, -2580(%rbp)
	je	.L4760
.L3554:
	movq	-2640(%rbp), %r12
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L4511
	leal	-67(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L3558
	cmpw	$54, %dx
	je	.L3558
	cmpw	$55, %dx
	je	.L3558
	cmpw	$58, %dx
	je	.L3558
	cmpw	$134, %dx
	je	.L3558
	cmpw	$56, %dx
	je	.L3558
	cmpw	$140, %dx
	je	.L3558
.L3557:
	movq	-2640(%rbp), %rcx
	movl	%r14d, %edi
	movzbl	2(%rcx), %eax
	testb	%al, %al
	je	.L4632
	movzbl	%al, %edi
.L4632:
	call	gen_reg_rtx
	movq	-2640(%rbp), %rsi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	emit_move_insn
	movzwl	(%r12), %edx
.L3556:
	cmpw	$66, %dx
	je	.L4511
.L3561:
	cmpw	$65, %dx
	je	.L4902
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L3578
	cmpw	$54, %dx
	je	.L3578
	cmpw	$55, %dx
	je	.L3578
	cmpw	$58, %dx
	je	.L3578
	cmpw	$134, %dx
	je	.L3578
	cmpw	$56, %dx
	je	.L3578
	cmpw	$140, %dx
	je	.L3578
	cmpw	$61, %dx
	je	.L4903
.L3577:
	movslq	-1436(%rbp),%r9
	movl	-2580(%rbp), %r8d
	leaq	0(,%r15,8), %rdx
	movq	%r12, %rdi
	movl	$1, %ecx
	movl	%r14d, (%rsp)
	sall	$3, %r8d
	mov	%r8d, %esi
	movq	%r9, 8(%rsp)
	xorl	%r8d, %r8d
	movl	%r14d, %r9d
	call	extract_bit_field
.L4633:
	movq	-1456(%rbp), %r12
	movq	-1448(%rbp), %rdi
	movq	%rax, (%rdi,%r12,8)
.L3552:
	incl	-2576(%rbp)
	movq	8(%r13), %rcx
	movl	-2576(%rbp), %eax
	cmpl	(%rcx), %eax
	jl	.L3581
.L4398:
	movq	cfun(%rip), %r15
	movq	16(%r15), %r10
	movq	40(%r10), %rbx
	testq	%rbx, %rbx
	je	.L4400
.L3587:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L4904
	call	emit_insn
	movq	%rax, 16(%rbx)
.L3586:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %r11
	movq	16(%rdx), %r14
	testq	%r11, %r11
	movq	%r11, %rbx
	movq	%r11, 40(%r14)
	jne	.L3587
	movq	8(%r13), %rcx
.L4400:
	movl	-2584(%rbp), %ebx
	cmpl	(%rcx), %ebx
	jge	.L2985
.L3593:
	movslq	-2584(%rbp),%r10
	movq	-1448(%rbp), %r12
	salq	$3, %r10
	movq	8(%r10,%rcx), %rax
	movq	(%r12,%r10), %rsi
	movq	8(%rax), %rdi
	call	emit_move_insn
	incl	-2584(%rbp)
	movq	8(%r13), %r8
	movl	-2584(%rbp), %r9d
	cmpl	(%r8), %r9d
	movq	%r8, %rcx
	jl	.L3593
	jmp	.L2985
.L4904:
	movq	8(%rdi), %rsi
	movq	8(%rsi), %rcx
	movq	%rcx, 16(%rbx)
	call	emit_insn
	jmp	.L3586
.L4903:
	movzbl	2(%r12), %r11d
	cmpl	%r14d, %r11d
	jne	.L3577
.L3578:
	movq	-1456(%rbp), %rdx
	movq	-1448(%rbp), %r14
	movq	%r12, (%r14,%rdx,8)
	jmp	.L3552
.L4902:
	testq	%r15, %r15
	jne	.L4480
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %r10
	movzbl	mode_size(%r10), %ebx
	cmpl	%ebx, -2580(%rbp)
	je	.L3567
.L3568:
	movzbq	2(%rdx), %rsi
	movzbq	mode_size(%rsi), %rcx
	cmpq	%rcx, %r15
	je	.L4905
.L3566:
	testq	%r15, %r15
	jne	.L3574
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbx
	movzbq	mode_size(%rbx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %r15
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r15, %rdi
	movl	%r14d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	jmp	.L4633
.L3574:
	movl	$.LC0, %edi
	movl	$2028, %esi
.L4747:
	movl	$.LC12, %edx
	jmp	.L4655
	.p2align 6,,7
.L4905:
	movq	16(%r12), %r9
	movzbq	2(%r9), %rdx
	movzbl	mode_size(%rdx), %r11d
	cmpl	%r11d, -2580(%rbp)
	jne	.L3566
.L3567:
	xorl	%r8d, %r8d
	movq	-1456(%rbp), %rdi
	movq	-1448(%rbp), %rax
	testq	%r15, %r15
	setne	%r8b
	leaq	(%rax,%rdi,8), %rbx
	movq	8(%r12,%r8,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L3552
	cmpw	$54, %dx
	je	.L3552
	cmpw	$55, %dx
	je	.L3552
	cmpw	$58, %dx
	je	.L3552
	cmpw	$134, %dx
	je	.L3552
	cmpw	$56, %dx
	je	.L3552
	cmpw	$140, %dx
	je	.L3552
	cmpw	$61, %dx
	je	.L4906
.L3572:
	movslq	-1436(%rbp),%r10
	movl	-2580(%rbp), %ecx
	movl	%r14d, (%rsp)
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	movl	%r14d, %r9d
	sall	$3, %ecx
	movq	%r10, 8(%rsp)
	mov	%ecx, %esi
	movq	(%rbx), %rdi
	movl	$1, %ecx
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L3552
.L4906:
	movzbl	2(%rcx), %r12d
	cmpl	%r14d, %r12d
	jne	.L3572
	jmp	.L3552
	.p2align 6,,7
.L4480:
	movq	8(%r12), %rdx
	jmp	.L3568
.L4511:
	movl	%r14d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L3562
	cmpl	%eax, 32(%rdx)
	jae	.L3563
.L4479:
	movzwl	(%r12), %edx
	jmp	.L3561
.L3563:
	movl	%r14d, %edi
	leaq	0(,%r15,8), %rbx
	call	get_mode_alignment
	mov	%eax, %r11d
	movq	%rbx, %rax
	cqto
	idivq	%r11
	testq	%rdx, %rdx
	jne	.L4479
	movq	-1464(%rbp), %r9
	movzbl	mode_size(%r9), %edx
	cmpl	%edx, -2580(%rbp)
	jne	.L4479
	movl	%r14d, %edi
	call	gen_reg_rtx
	movl	$1, %ecx
	movq	%r15, %rdx
	movq	-1456(%rbp), %rdi
	movq	-1448(%rbp), %r8
	movl	%r14d, %esi
	leaq	(%r8,%rdi,8), %rbx
	movl	$1, %r8d
	movq	%r12, %rdi
	movq	%rax, (%rbx)
	call	adjust_address_1
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L3552
	.p2align 6,,7
.L3562:
	cmpl	$8, %eax
	ja	.L4479
	jmp	.L3563
.L3558:
	movq	-2640(%rbp), %r10
	movzbl	2(%r10), %ecx
	movzbl	%cl, %edi
	cmpl	%r14d, %edi
	je	.L3556
	testb	%cl, %cl
	je	.L3556
	jmp	.L3557
.L4760:
	movl	$.LC0, %edi
	movl	$1978, %esi
	jmp	.L4747
.L4761:
	movl	$.LC0, %edi
	movl	$1953, %esi
	jmp	.L4747
	.p2align 6,,7
.L4879:
	cmpb	$29, 16(%r15)
	jne	.L3009
	movq	%r15, %rdi
	call	expr_size
	cmpw	$54, (%rax)
	movq	%rax, -2456(%rbp)
	je	.L4907
.L3010:
	movq	sizetype_tab(%rip), %rdi
	movq	-2456(%rbp), %rsi
	call	make_tree
	xorl	%esi, %esi
	movslq	32(%r15),%rdi
	movq	%rax, %r14
	call	size_int_wide
	movq	%r14, %rsi
	movl	$78, %edi
	movq	%rax, %rdx
	call	size_binop
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	movq	%rax, -1360(%rbp)
	call	expand_expr
	xorl	%edx, %edx
	movl	ptr_mode(%rip), %edi
	movq	%rax, %rsi
	movq	$0, -2544(%rbp)
	call	convert_to_mode
	movl	$8, %edx
	movq	-2640(%rbp), %r12
	movq	%rax, -2488(%rbp)
	movq	%r13, -2496(%rbp)
	movq	%rax, -2512(%rbp)
	movq	%r12, -2504(%rbp)
	movq	16(%r13), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L3213
	movl	32(%rax), %edx
.L3213:
	movq	-2640(%rbp), %rdi
	movq	16(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L3214
	cmpl	32(%rax), %edx
	jb	.L3215
.L3210:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L3211
	movl	32(%rcx), %r15d
.L3211:
	cmpb	$51, 2(%r13)
	jne	.L4766
	movq	-2640(%rbp), %rax
	cmpb	$51, 2(%rax)
	jne	.L4765
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L3222
	cmpl	$66, %eax
	je	.L4908
.L3226:
	cmpl	$75, %eax
	je	.L3230
	cmpl	$78, %eax
	je	.L3230
.L3225:
	movq	-2640(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L3235
	cmpl	$66, %eax
	je	.L4909
.L3239:
	cmpl	$75, %eax
	je	.L3243
	cmpl	$78, %eax
	je	.L3243
.L3238:
	movq	-2488(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L3248
	cmpl	$66, %eax
	je	.L4910
.L3252:
	cmpl	$75, %eax
	je	.L3256
	cmpl	$78, %eax
	je	.L3256
.L3251:
	movq	-2496(%rbp), %r11
	cmpw	$66, (%r11)
	jne	.L4764
	movq	-2504(%rbp), %rax
	cmpw	$66, (%rax)
	jne	.L4763
	cmpq	$0, -2512(%rbp)
	je	.L4762
	movq	-2512(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L4911
.L3264:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -1376(%rbp)
	testl	%r12d, %r12d
	je	.L4382
.L3397:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L3383
	movq	-2512(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L4912
.L3387:
	testb	$2, target_flags+3(%rip)
	je	.L3388
	cmpw	$63, mode_bitsize(%r15,%r15)
.L4626:
	jbe	.L3383
.L3386:
	movslq	%edx,%rsi
	leaq	(%rsi,%rsi,4), %rcx
	movq	%rsi, -1384(%rbp)
	movq	insn_data+24(,%rcx,8), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L3390
	movq	-2496(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L3383
.L3390:
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L4913
.L3391:
	movq	72(%r14), %rax
	testq	%rax, %rax
	je	.L3392
	xorl	%esi, %esi
	movq	-1376(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L3383
.L3392:
	call	get_last_insn
	movl	$1, %edx
	movq	-2512(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -1392(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r14), %rax
	testq	%rax, %rax
	jne	.L4914
.L3393:
	movq	-1384(%rbp), %rdx
	movq	-2496(%rbp), %rdi
	xorl	%eax, %eax
	movq	-2504(%rbp), %rsi
	movq	-1376(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L4502
	movq	-1392(%rbp), %rdi
	call	delete_insns_since
.L3383:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L3397
.L4382:
	testb	$2, target_flags+3(%rip)
	movq	-2496(%rbp), %rbx
	movl	$0, volatile_ok(%rip)
	setne	%r11b
	movq	8(%rbx), %rsi
	movzbl	%r11b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%r8b
	movq	%rax, %r14
	movq	-2504(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%r8b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-2512(%rbp), %rsi
	movq	sizetype_tab(%rip), %r10
	movq	%rax, %rbx
	movzbl	61(%r10), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L4915
.L3406:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %rbx
	movq	8(%rdx), %rdi
	movq	(%rbx), %r8
	movq	$0, (%r8)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r10
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r10), %r15
	movq	8(%r15), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	jne	.L4916
.L3395:
	movq	-2488(%rbp), %rbx
	cmpw	$54, (%rbx)
	je	.L4917
	movq	sizetype_tab(%rip), %r12
	movq	-2488(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	optab_table+16(%rip), %rsi
	movq	-2456(%rbp), %rdx
	xorl	%r9d, %r9d
	movzbl	61(%r12), %r14d
	movl	$3, (%rsp)
	shrb	$1, %r14b
	movzbl	%r14b, %edi
	call	expand_binop
	movq	-1360(%rbp), %rdi
	movq	%rax, %rbx
	call	highest_pow2_factor
	movq	-2488(%rbp), %rsi
	movq	%r13, %rdi
	movq	%rax, %rdx
	call	offset_address
	movq	%rax, %r13
	call	gen_label_rtx
	xorl	%r9d, %r9d
	movq	%rax, -2544(%rbp)
	movq	const_int_rtx+512(%rip), %rsi
	movq	%rbx, %rdi
	movzbl	2(%rbx), %r8d
	movl	$107, %edx
	xorl	%ecx, %ecx
	movq	%rax, (%rsp)
	call	emit_cmp_and_jump_insns
.L3409:
	cmpq	const_int_rtx+512(%rip), %rbx
	je	.L3410
	cmpw	$66, (%r13)
	movq	%r13, -2560(%rbp)
	je	.L4918
	movzbl	2(%r13), %edi
	call	get_mode_alignment
.L4627:
	movl	%eax, -2548(%rbp)
.L3412:
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L3415
	cmpw	$54, (%rbx)
	je	.L4919
.L3415:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L3417
	cmpl	$66, %eax
	je	.L4920
.L3421:
	cmpl	$75, %eax
	je	.L3425
	cmpl	$78, %eax
	je	.L3425
.L3420:
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L3430
	cmpl	$66, %eax
	je	.L4921
.L3434:
	cmpl	$75, %eax
	je	.L3438
	cmpl	$78, %eax
	je	.L3438
.L3433:
	cmpw	$54, (%rbx)
	je	.L4922
.L3443:
	shrl	$3, -2548(%rbp)
	xorl	%edi, %edi
	mov	-2548(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r14d
	movq	%rax, -1408(%rbp)
	testl	%r14d, %r14d
	je	.L4396
.L3537:
	movslq	%r14d,%rcx
	movl	clrstr_optab(,%rcx,4), %edx
	movq	%rcx, -1416(%rbp)
	cmpl	$1317, %edx
	je	.L3524
	cmpw	$54, (%rbx)
	je	.L4923
.L3528:
	testb	$2, target_flags+3(%rip)
	je	.L3529
	movq	-1416(%rbp), %rax
	cmpw	$63, mode_bitsize(%rax,%rax)
.L4630:
	jbe	.L3524
.L3527:
	movslq	%edx,%r8
	leaq	(%r8,%r8,4), %rcx
	movq	%r8, -1424(%rbp)
	movq	insn_data+24(,%rcx,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L3531
	movq	-2560(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L3524
.L3531:
	movq	48(%r15), %rax
	testq	%rax, %rax
	je	.L3532
	xorl	%esi, %esi
	movq	-1408(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L3524
.L3532:
	call	get_last_insn
	movl	$1, %edx
	movq	%rbx, %rsi
	movl	%r14d, %edi
	movq	%rax, -1432(%rbp)
	call	convert_to_mode
	movq	%rax, %r12
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L4924
.L3533:
	movq	-1424(%rbp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	-1408(%rbp), %rdx
	leaq	(%rdi,%rdi,4), %r14
	movq	-2560(%rbp), %rdi
	call	*insn_data+16(,%r14,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L4631
	movq	-1432(%rbp), %rdi
	call	delete_insns_since
.L3524:
	movq	-1416(%rbp), %rdx
	movzbl	mode_wider_mode(%rdx), %r14d
	testl	%r14d, %r14d
	jne	.L3537
.L4396:
	testb	$2, target_flags+3(%rip)
	movq	-2560(%rbp), %r11
	setne	%r9b
	movq	8(%r11), %rsi
	movzbl	%r9b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	sizetype_tab(%rip), %rsi
	movq	%rax, %r14
	movzbl	61(%rsi), %r10d
	movq	%rbx, %rsi
	shrb	$1, %r10b
	movzbl	%r10b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.0(%rip)
	movq	%rax, %r15
	je	.L4925
.L3542:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	const_int_rtx+512(%rip), %rsi
	movq	integer_types+40(%rip), %rdi
	movq	%rax, %r12
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.0(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %rsi
	movq	8(%rdx), %rdi
	movq	(%rsi), %r10
	movq	$0, (%r10)
	call	build_pointer_type
	movq	fn.0(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.0(%rip), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%rdi), %r15
	movl	$53, %edi
	movq	8(%r15), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	jne	.L4926
.L3410:
	cmpq	$0, -2544(%rbp)
	je	.L2985
	movq	-2544(%rbp), %rdi
	call	emit_label
	jmp	.L2985
.L4926:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
.L4631:
	call	emit_insn
	jmp	.L3410
.L4925:
	movl	$.LC7, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.0(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.0(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.0, %edi
	movq	%rax, fn.0(%rip)
	call	ggc_add_tree_root
	movq	fn.0(%rip), %r8
	xorl	%esi, %esi
	orb	$1, 49(%r8)
	movq	fn.0(%rip), %rcx
	orb	$8, 18(%rcx)
	movq	fn.0(%rip), %r12
	orb	$64, 50(%r12)
	movq	fn.0(%rip), %rbx
	orb	$2, 18(%rbx)
	movq	fn.0(%rip), %rdi
	call	make_decl_rtl
	movq	fn.0(%rip), %rdi
	call	assemble_external
	jmp	.L3542
.L4924:
	movq	%r12, %rdi
	movl	%r14d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L3533
	movq	%r12, %rsi
	movl	%r14d, %edi
	call	copy_to_mode_reg
	movq	%rax, %r12
	jmp	.L3533
	.p2align 6,,7
.L3529:
	movq	-1416(%rbp), %r15
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L4630
.L4923:
	movq	mode_mask_array(,%rcx,8), %r12
	shrq	$1, %r12
	cmpq	%r12, 8(%rbx)
	jbe	.L3527
	jmp	.L3528
.L4922:
	movq	8(%rbx), %r14
	xorl	%r15d, %r15d
	movl	$17, %esi
.L3456:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4385
.L3453:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L3453
.L4385:
	testl	%edi, %edi
	je	.L3446
	movslq	%edi,%r12
	movq	%r12, %r8
	salq	$4, %r8
	addq	optab_table+240(%rip), %r8
	cmpl	$1317, 8(%r8)
	je	.L3455
	call	get_mode_alignment
	movl	$128, %r11d
	cmpl	%eax, %r11d
	jb	.L3455
	movzbq	mode_size(%r12), %r9
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%r9
	addq	%rax, %r15
	movq	%rdx, %r14
.L3455:
	movzbq	mode_size(%r12), %rsi
	cmpq	$1, %rsi
	ja	.L3456
.L3446:
	testq	%r14, %r14
	jne	.L4757
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L3459
	movq	ix86_cost(%rip), %rcx
	mov	40(%rcx), %r12d
	cmpq	%r12, %r15
	jae	.L3443
.L3460:
	movq	8(%rbx), %r10
	movq	-2560(%rbp), %r15
	leaq	-464(%rbp), %r12
	testb	$2, target_flags+3(%rip)
	movq	$clear_by_pieces_1, -424(%rbp)
	movq	$0, -416(%rbp)
	setne	%dl
	leaq	16(%r12), %rcx
	movq	%r15, -464(%rbp)
	movq	%r10, -440(%rbp)
	movq	8(%r15), %r8
	movq	$0, -432(%rbp)
	movl	$0, -2572(%rbp)
	movzbl	%dl, %esi 
	movq	%r8, -456(%rbp)
	movzwl	(%r8), %edx
	leaq	5(,%rsi,4), %r15
	xorl	%esi, %esi
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L3464
	cmpw	$99, %dx
	je	.L3464
	cmpw	$98, %dx
	je	.L3464
.L3463:
	movl	%esi, (%rcx)
	movl	$0, 20(%r12)
	leaq	56(%r12), %rdx
	movzwl	(%r8), %eax
	xorl	%ecx, %ecx
	cmpw	$96, %ax
	je	.L3466
	cmpw	$98, %ax
	je	.L3466
.L3465:
	movl	%ecx, (%rdx)
	movl	56(%r12), %eax
	testl	%eax, %eax
	je	.L3467
	movq	24(%r12), %r11
	movq	%r11, 32(%r12)
.L3467:
	movl	16(%r12), %r14d
	testl	%r14d, %r14d
	jne	.L3468
	movq	24(%r12), %r14
	movq	$0, -2568(%rbp)
	movl	$17, %esi
.L3481:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4388
.L3478:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L3478
.L4388:
	testl	%edi, %edi
	je	.L3471
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L3480
	movq	%r8, -2648(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-2648(%rbp), %r8
	jb	.L3480
	movzbq	mode_size(%rbx), %rsi
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, -2568(%rbp)
	movq	%rdx, %r14
.L3480:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L3481
.L3471:
	testq	%r14, %r14
	jne	.L4757
	cmpq	$2, -2568(%rbp)
	jbe	.L3468
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4390
.L3489:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %rdx
	cmpq	%r15, %rdx
	cmovae	-2572(%rbp), %ecx
	movl	%ecx, -2572(%rbp)
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L3489
.L4390:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L3468
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r14d
	cmpw	$1, %r14w
	jbe	.L3493
	cmpw	$54, %dx
	je	.L3493
	cmpw	$55, %dx
	je	.L3493
	cmpw	$58, %dx
	je	.L3493
	cmpw	$134, %dx
	je	.L3493
	cmpw	$56, %dx
	je	.L3493
	cmpw	$140, %dx
	je	.L3493
.L3468:
	cmpq	$1, %r15
	jbe	.L3496
.L3517:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4393
.L3503:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rbx
	cmpq	%r15, %rbx
	cmovae	-2572(%rbp), %ecx
	movl	%ecx, -2572(%rbp)
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L3503
.L4393:
	movl	-2572(%rbp), %r15d
	testl	%r15d, %r15d
	je	.L3496
	movslq	-2572(%rbp),%r15
	movq	%r15, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	movl	8(%rcx), %ebx
	cmpl	$1317, %ebx
	je	.L3505
	movl	-2572(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	jb	.L3505
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rsi
	leaq	(%rsi,%rsi,4), %r10
	cmpq	%rdx, 24(%r12)
	movq	insn_data+16(,%r10,8), %rdi
	movq	%rdx, %r14
	movq	%rdi, -1400(%rbp)
	jb	.L3505
	movl	56(%r12), %ecx
.L3515:
	testl	%ecx, %ecx
	je	.L3509
	subq	%rdx, 32(%r12)
.L3509:
	movl	16(%r12), %r11d
	testl	%r11d, %r11d
	je	.L3510
	movq	(%r12), %rdi
	movl	-2572(%rbp), %esi
	movl	$1, %r8d
	movq	8(%r12), %rdx
	movq	32(%r12), %rcx
	call	adjust_automodify_address_1
.L4629:
	movl	-2572(%rbp), %edx
	movq	%rax, %rbx
	movq	48(%r12), %rdi
	movq	32(%r12), %rsi
	call	*40(%r12)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	*-1400(%rbp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L3514
	addq	%r14, 32(%r12)
.L3514:
	movq	24(%r12), %r9
	movq	%r14, %rdx
	subq	%r14, %r9
	cmpq	%r14, %r9
	movq	%r9, 24(%r12)
	jae	.L3515
.L3505:
	movzbq	mode_size(%r15), %r15
	cmpq	$1, %r15
	ja	.L3517
.L3496:
	cmpq	$0, 24(%r12)
	je	.L3410
	jmp	.L4756
.L3510:
	movq	(%r12), %rdi
	movl	-2572(%rbp), %esi
	movl	$1, %ecx
	movq	32(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L4629
.L3493:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, 8(%r12)
	jmp	.L3468
.L3466:
	movl	$1, %ecx
	jmp	.L3465
.L3464:
	movl	$1, %esi
	jmp	.L3463
.L3459:
	cmpq	$2, %r15
	ja	.L3443
	jmp	.L3460
.L3438:
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbx), %rdi
	movq	%rax, %r14
	call	protect_from_queue
	cmpq	8(%rbx), %r14
	movq	%rax, %r12
	je	.L4927
.L3440:
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r14, 8(%rax)
	movq	%r12, 16(%rax)
	jmp	.L3433
.L4927:
	cmpq	16(%rbx), %rax
	jne	.L3440
	jmp	.L3433
.L4921:
	cmpb	$51, 2(%rbx)
	je	.L3431
	movq	8(%rbx), %r14
	cmpw	$71, (%r14)
	je	.L4928
.L3431:
	cmpl	$66, %eax
	jne	.L3434
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%rbx), %rax
	movq	%rax, %r12
	je	.L3433
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r12, 8(%rax)
	jmp	.L3433
.L4928:
	movq	8(%r14), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r14)
	movq	%rax, %r12
	je	.L3432
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L3433
.L3432:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L4628:
	movq	%rax, %rbx
	jmp	.L3433
.L3430:
	cmpq	$0, 16(%rbx)
	je	.L4929
	movq	24(%rbx), %rax
	testq	%rax, %rax
	jne	.L4628
	movq	8(%rbx), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%rbx), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	16(%rbx), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbx), %rbx
	jmp	.L3433
.L4929:
	movq	8(%rbx), %rdi
	call	copy_to_reg
	jmp	.L4628
.L3425:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r14
	call	protect_from_queue
	cmpq	8(%r13), %r14
	movq	%rax, %r12
	je	.L4930
.L3427:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -2560(%rbp)
	movq	%r14, 8(%rax)
	movq	-2560(%rbp), %rax
	movq	%r12, 16(%rax)
	jmp	.L3420
.L4930:
	cmpq	16(%r13), %rax
	jne	.L3427
	jmp	.L3420
.L4920:
	jne	.L3421
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %r12
	je	.L3420
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -2560(%rbp)
	movq	%r12, 8(%rax)
	jmp	.L3420
.L3417:
	cmpq	$0, 16(%r13)
	je	.L4931
	movq	24(%r13), %rdi
	testq	%rdi, %rdi
	movq	%rdi, -2560(%rbp)
	jne	.L3420
	movq	8(%r13), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r9
	movq	%r9, -2560(%rbp)
	jmp	.L3420
.L4931:
	movq	8(%r13), %rdi
	call	copy_to_reg
	movq	%rax, -2560(%rbp)
	jmp	.L3420
.L4919:
	movzbl	%al, %edx 
	movzbl	mode_size(%rdx), %r11d
	cmpl	8(%rbx), %r11d
	jne	.L3415
	movq	const_tiny_rtx(,%rdx,8), %rsi
	movq	%r13, %rdi
	call	emit_move_insn
	jmp	.L3410
.L4918:
	movq	16(%r13), %rax
	movl	$8, -2548(%rbp)
	testq	%rax, %rax
	je	.L3412
	movl	32(%rax), %eax
	jmp	.L4627
.L4917:
	movq	8(%rbx), %rsi
	movq	-2456(%rbp), %rdi
	negq	%rsi
	call	plus_constant_wide
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r13, %rdi
	movl	$51, %esi
	movq	%rax, %rbx
	movq	-2488(%rbp), %r13
	movq	8(%r13), %rdx
	call	adjust_address_1
	movq	%rax, %r13
	jmp	.L3409
.L4916:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L3395
.L4915:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %rsi
	orb	$1, 49(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %rcx
	orb	$8, 18(%rcx)
	movq	fn.1(%rip), %r9
	orb	$64, 50(%r9)
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L3406
.L4502:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L3395
.L4914:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L3393
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L3393
.L4913:
	movq	-2504(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L3383
	jmp	.L3391
	.p2align 6,,7
.L3388:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L4626
.L4912:
	movq	mode_mask_array(,%r15,8), %r9
	shrq	$1, %r9
	cmpq	%r9, 8(%rsi)
	jbe	.L3386
	jmp	.L3387
.L4911:
	movq	8(%rcx), %r12
	xorl	%r14d, %r14d
	movl	$17, %esi
.L3277:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4371
.L3274:
	movslq	%ecx,%r8
	movzbq	mode_size(%r8), %r9
	cmpq	%rsi, %r9
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L3274
.L4371:
	testl	%edi, %edi
	je	.L3267
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L3276
	call	get_mode_alignment
	movl	$128, %r10d
	cmpl	%eax, %r10d
	jb	.L3276
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r14
	movq	%rdx, %r12
.L3276:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L3277
.L3267:
	testq	%r12, %r12
	jne	.L4757
	movl	optimize_size(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L3280
	movq	ix86_cost(%rip), %r11
	mov	40(%r11), %edx
	cmpq	%rdx, %r14
	jae	.L3264
.L3281:
	movq	-2512(%rbp), %r8
	movq	-2504(%rbp), %rsi
	movq	-2496(%rbp), %rdi
	movq	-2496(%rbp), %r9
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r14b
	movq	8(%rsi), %r8
	movq	$0, -488(%rbp)
	movl	$0, -2524(%rbp)
	movq	%r8, -512(%rbp)
	movzbl	%r14b, %ecx
	movq	8(%rdi), %r10
	movq	%r9, -544(%rbp)
	leal	5(,%rcx,4), %r14d
	xorl	%ecx, %ecx
	movq	%r10, -2520(%rbp)
	movq	-2520(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L3286
	cmpw	$99, %dx
	je	.L3286
	cmpw	$98, %dx
	je	.L3286
.L3285:
	movq	-2520(%rbp), %rbx
	movl	%ecx, -528(%rbp)
	xorl	%edx, %edx
	movzwl	(%rbx), %eax
	cmpw	$96, %ax
	je	.L3288
	cmpw	$98, %ax
	je	.L3288
.L3287:
	movl	%edx, -480(%rbp)
	movq	-2520(%rbp), %r15
	xorl	%ecx, %ecx
	movq	-2504(%rbp), %rdx
	movq	%r15, -536(%rbp)
	movq	%rdx, -520(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L3291
	cmpw	$99, %dx
	je	.L3291
	cmpw	$98, %dx
	je	.L3291
.L3290:
	movl	-480(%rbp), %eax
	movl	%ecx, -504(%rbp)
	movl	$0, -500(%rbp)
	movl	$0, -524(%rbp)
	testl	%eax, %eax
	je	.L3292
	movq	%r12, -488(%rbp)
.L3292:
	movl	-504(%rbp), %r9d
	movq	%r12, -496(%rbp)
	testl	%r9d, %r9d
	je	.L3294
	movl	-528(%rbp), %r10d
	testl	%r10d, %r10d
	jne	.L3293
.L3294:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L3307:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4374
.L3304:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %r11
	cmpq	%rsi, %r11
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L3304
.L4374:
	testl	%edi, %edi
	je	.L3297
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L3306
	movq	%r8, -2648(%rbp)
	call	get_mode_alignment
	movq	-2648(%rbp), %r8
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L3306
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L3306:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L3307
.L3297:
	testq	%r12, %r12
	jne	.L4757
	cmpq	$2, %r15
	jbe	.L3293
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4376
.L3315:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %edx
	cmpl	%r14d, %edx
	cmovae	-2524(%rbp), %ecx
	movl	%ecx, -2524(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L3315
.L4376:
	movl	-504(%rbp), %eax
	testl	%eax, %eax
	jne	.L3321
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L3319
	cmpw	$54, %dx
	je	.L3319
	cmpw	$55, %dx
	je	.L3319
	cmpw	$58, %dx
	je	.L3319
	cmpw	$134, %dx
	je	.L3319
	cmpw	$56, %dx
	je	.L3319
	cmpw	$140, %dx
	je	.L3319
.L3321:
	movl	-528(%rbp), %eax
	testl	%eax, %eax
	jne	.L3293
	movq	-2520(%rbp), %rbx
	movzwl	(%rbx), %edx
	leal	-67(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L3323
	cmpw	$54, %dx
	je	.L3323
	cmpw	$55, %dx
	je	.L3323
	cmpw	$58, %dx
	je	.L3323
	cmpw	$134, %dx
	je	.L3323
	cmpw	$56, %dx
	je	.L3323
	cmpw	$140, %dx
	je	.L3323
.L3293:
	cmpl	$1, %r14d
	jbe	.L3326
.L3377:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4379
.L3333:
	movslq	%ecx,%r11
	movzbl	mode_size(%r11), %edi
	cmpl	%r14d, %edi
	cmovae	-2524(%rbp), %ecx
	movl	%ecx, -2524(%rbp)
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L3333
.L4379:
	movl	-2524(%rbp), %eax
	testl	%eax, %eax
	je	.L3326
	movslq	-2524(%rbp),%r15
	movq	%r15, %r14
	salq	$4, %r14
	addq	optab_table+240(%rip), %r14
	movl	8(%r14), %ebx
	cmpl	$1317, %ebx
	je	.L3335
	movl	-2524(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L3335
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rsi
	movq	$0, -2536(%rbp)
	leaq	(%rsi,%rsi,4), %r9
	cmpq	%rdx, -496(%rbp)
	movq	insn_data+16(,%r9,8), %r12
	movq	%rdx, -1664(%rbp)
	movq	%r12, -1368(%rbp)
	leaq	-544(%rbp), %r12
	jb	.L3335
	movl	-480(%rbp), %ecx
.L3375:
	testl	%ecx, %ecx
	je	.L3339
	subq	%rdx, 56(%r12)
.L3339:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L3340
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L3341
	movl	-2524(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L4622:
	movq	%rax, -2536(%rbp)
.L3340:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L3343
	movq	24(%r12), %rdi
	movl	-2524(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L4623:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L4932
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L3349
	movzbl	mode_size(%r15), %r10d
	leal	7(%r10), %edx
	andl	$-8, %edx
.L3350:
	movq	cfun(%rip), %r11
	andl	$33554432, %esi
	movq	16(%r11), %rbx
	leaq	8(%rbx), %rdi
	movl	8(%rbx), %ecx
	je	.L3351
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L4624:
	leal	(%rax,%rcx), %r9d
	movl	%r9d, (%rdi)
	movq	%r15, %rdi
	salq	$4, %rdi
	addq	optab_table+384(%rip), %rdi
	movl	8(%rdi), %eax
	cmpl	$1317, %eax
	je	.L3353
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rcx
	movq	insn_data+24(,%rcx,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L3354
	movq	%r14, %rdi
	movl	-2524(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L4933
.L3354:
	leaq	(%rbx,%rbx,4), %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%rsi,8)
.L4625:
	movq	%rax, %rdi
	call	emit_insn
.L3373:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L3374
	movq	-1664(%rbp), %r14
	addq	%r14, 56(%r12)
.L3374:
	movq	48(%r12), %rdi
	movq	-1664(%rbp), %rdx
	subq	-1664(%rbp), %rdi
	cmpq	%rdx, %rdi
	movq	%rdi, 48(%r12)
	jae	.L3375
.L3335:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L3377
.L3326:
	cmpq	$0, -496(%rbp)
	je	.L3395
	jmp	.L4742
.L4933:
	movl	-2524(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L3354
.L3353:
	movzbl	mode_size(%r15), %r10d
	cmpl	%edx, %r10d
	je	.L4934
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r8b
	movzbl	%r8b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L3361:
	movl	-2524(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%r11d, %r11d
	testq	%r11, %r11
	movq	%rax, %rbx
	je	.L3370
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L4935
.L3370:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L3373
.L4935:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L3370
.L4934:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L3361
.L3351:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L4624
.L3349:
	movzbl	mode_size(%r15), %r8d
	leal	1(%r8), %edx
	andl	$-2, %edx
	jmp	.L3350
.L4932:
	movq	%rax, %rsi
	movq	-2536(%rbp), %rdi
	xorl	%eax, %eax
	call	*-1368(%rbp)
	jmp	.L4625
	.p2align 6,,7
.L3343:
	movq	24(%r12), %rdi
	movl	-2524(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L4623
.L3341:
	movl	-2524(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L4622
.L3323:
	movq	-2520(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -536(%rbp)
	jmp	.L3293
.L3319:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -512(%rbp)
	jmp	.L3321
.L3291:
	movl	$1, %ecx
	jmp	.L3290
.L3288:
	movl	$1, %edx
	jmp	.L3287
.L3286:
	movl	$1, %ecx
	jmp	.L3285
.L3280:
	cmpq	$2, %r14
	ja	.L3264
	jmp	.L3281
.L3256:
	movq	-2488(%rbp), %r9
	xorl	%esi, %esi
	movq	8(%r9), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-2488(%rbp), %r8
	movq	%rax, %r12
	movq	16(%r8), %rdi
	call	protect_from_queue
	movq	-2488(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L4936
.L3258:
	movq	-2488(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -2512(%rbp)
	movq	%r12, 8(%rax)
	movq	-2512(%rbp), %r10
	movq	%rbx, 16(%r10)
	jmp	.L3251
.L4936:
	cmpq	16(%rcx), %rax
	jne	.L3258
	jmp	.L3251
.L4910:
	cmpb	$51, 2(%rdx)
	je	.L3249
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L4937
.L3249:
	cmpl	$66, %eax
	jne	.L3252
	movq	-2488(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	movq	-2488(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L3251
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -2512(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L3251
.L4937:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L3250
	movq	-2488(%rbp), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -2512(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L3251
.L3250:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L4621:
	movq	%rax, -2512(%rbp)
	jmp	.L3251
.L3248:
	movq	-2488(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L4938
	movq	-2488(%rbp), %r14
	movq	24(%r14), %rbx
	testq	%rbx, %rbx
	movq	%rbx, -2512(%rbp)
	jne	.L3251
	movq	-2488(%rbp), %rdi
	movq	8(%rdi), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	-2488(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdx
	movq	%rdx, -2512(%rbp)
	jmp	.L3251
.L4938:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L4621
.L3243:
	movq	-2640(%rbp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-2640(%rbp), %r10
	movq	%rax, %r12
	movq	16(%r10), %rdi
	call	protect_from_queue
	movq	-2640(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L4939
.L3245:
	movq	-2640(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -2504(%rbp)
	movq	%r12, 8(%rax)
	movq	-2504(%rbp), %r12
	movq	%rbx, 16(%r12)
	jmp	.L3238
.L4939:
	cmpq	16(%rcx), %rax
	jne	.L3245
	jmp	.L3238
.L4909:
	cmpb	$51, 2(%rdx)
	je	.L3236
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L4940
.L3236:
	cmpl	$66, %eax
	jne	.L3239
	movq	-2640(%rbp), %r9
	xorl	%esi, %esi
	movq	8(%r9), %rdi
	call	protect_from_queue
	movq	-2640(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L3238
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -2504(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L3238
.L4940:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L3237
	movq	-2640(%rbp), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -2504(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L3238
.L3237:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L4620:
	movq	%rax, -2504(%rbp)
	jmp	.L3238
.L3235:
	movq	-2640(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L4941
	movq	-2640(%rbp), %r14
	movq	24(%r14), %rbx
	testq	%rbx, %rbx
	movq	%rbx, -2504(%rbp)
	jne	.L3238
	movq	-2640(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	-2640(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdi
	movq	%rdi, -2504(%rbp)
	jmp	.L3238
.L4941:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L4620
.L3230:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L4942
.L3232:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -2496(%rbp)
	movq	%r12, 8(%rax)
	movq	-2496(%rbp), %rcx
	movq	%rbx, 16(%rcx)
	jmp	.L3225
.L4942:
	cmpq	16(%r13), %rax
	jne	.L3232
	jmp	.L3225
.L4908:
	jne	.L3226
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L3225
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -2496(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L3225
.L3222:
	testq	%rsi, %rsi
	je	.L4943
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	movq	%rsi, -2496(%rbp)
	jne	.L3225
	movq	8(%r13), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rax
.L4619:
	movq	%rax, -2496(%rbp)
	jmp	.L3225
.L4943:
	movq	8(%r13), %rdi
	call	copy_to_reg
	jmp	.L4619
.L3215:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L3211
	movl	32(%rsi), %r15d
	jmp	.L3211
.L3214:
	cmpl	$7, %edx
	ja	.L3210
	jmp	.L3215
	.p2align 6,,7
.L4907:
	movq	-2456(%rbp), %rsi
	movslq	32(%r15),%r10
	cmpq	%r10, 8(%rsi)
	jge	.L3010
	movq	-2640(%rbp), %rdi
	movq	%r13, -2440(%rbp)
	movl	$8, %edx
	movq	%rdi, -2448(%rbp)
	movq	16(%r13), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L3014
	movl	32(%rax), %edx
.L3014:
	movq	-2640(%rbp), %r11
	movq	16(%r11), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L3015
	cmpl	32(%rax), %edx
	jb	.L3016
.L3011:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L3012
	movl	32(%rcx), %r15d
.L3012:
	cmpb	$51, 2(%r13)
	jne	.L4766
	movq	-2640(%rbp), %rax
	cmpb	$51, 2(%rax)
	jne	.L4765
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L3023
	cmpl	$66, %eax
	je	.L4944
.L3027:
	cmpl	$75, %eax
	je	.L3031
	cmpl	$78, %eax
	je	.L3031
.L3026:
	movq	-2640(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L3036
	cmpl	$66, %eax
	je	.L4945
.L3040:
	cmpl	$75, %eax
	je	.L3044
	cmpl	$78, %eax
	je	.L3044
.L3039:
	movq	-2456(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L3049
	cmpl	$66, %eax
	je	.L4946
.L3053:
	cmpl	$75, %eax
	je	.L3057
	cmpl	$78, %eax
	je	.L3057
.L3052:
	movq	-2440(%rbp), %rdx
	cmpw	$66, (%rdx)
	jne	.L4764
	movq	-2448(%rbp), %rax
	cmpw	$66, (%rax)
	jne	.L4763
	cmpq	$0, -2456(%rbp)
	je	.L4762
	movq	-2456(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L4947
.L3065:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -1336(%rbp)
	testl	%r12d, %r12d
	je	.L4368
.L3198:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L3184
	movq	-2456(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L4948
.L3188:
	testb	$2, target_flags+3(%rip)
	je	.L3189
	cmpw	$63, mode_bitsize(%r15,%r15)
.L4618:
	jbe	.L3184
.L3187:
	movslq	%edx,%r9
	leaq	(%r9,%r9,4), %r8
	movq	%r9, -1344(%rbp)
	movq	insn_data+24(,%r8,8), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L3191
	movq	-2440(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L3184
.L3191:
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L4949
.L3192:
	movq	72(%r14), %rax
	testq	%rax, %rax
	je	.L3193
	xorl	%esi, %esi
	movq	-1336(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L3184
.L3193:
	call	get_last_insn
	movl	$1, %edx
	movq	-2456(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -1352(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r14), %rax
	testq	%rax, %rax
	jne	.L4950
.L3194:
	movq	-1344(%rbp), %rdx
	movq	-2440(%rbp), %rdi
	xorl	%eax, %eax
	movq	-2448(%rbp), %rsi
	movq	-1336(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L4504
	movq	-1352(%rbp), %rdi
	call	delete_insns_since
.L3184:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L3198
.L4368:
	testb	$2, target_flags+3(%rip)
	movq	-2440(%rbp), %rcx
	movl	$0, volatile_ok(%rip)
	setne	%r14b
	movq	8(%rcx), %rsi
	movzbl	%r14b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%bl
	movq	%rax, %r14
	movq	-2448(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%bl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-2456(%rbp), %rsi
	movq	sizetype_tab(%rip), %r10
	movq	%rax, %rbx
	movzbl	61(%r10), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L4951
.L3207:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %rbx
	movq	8(%rdx), %rdi
	movq	(%rbx), %r10
	movq	$0, (%r10)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r15
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r15), %r9
	movq	8(%r9), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	je	.L2985
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	jmp	.L4641
.L4951:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r8
	orb	$1, 49(%r8)
	movq	fn.1(%rip), %r11
	orb	$8, 18(%r11)
	movq	fn.1(%rip), %rsi
	orb	$64, 50(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L3207
.L4950:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L3194
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L3194
.L4949:
	movq	-2448(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L3184
	jmp	.L3192
.L3189:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L4618
.L4948:
	movq	mode_mask_array(,%r15,8), %r11
	shrq	$1, %r11
	cmpq	%r11, 8(%rsi)
	jbe	.L3187
	jmp	.L3188
.L4947:
	movq	8(%rcx), %r12
	xorl	%r14d, %r14d
	movl	$17, %esi
.L3078:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4357
.L3075:
	movslq	%ecx,%r8
	movzbq	mode_size(%r8), %r9
	cmpq	%rsi, %r9
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L3075
.L4357:
	testl	%edi, %edi
	je	.L3068
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L3077
	call	get_mode_alignment
	movl	$128, %r10d
	cmpl	%eax, %r10d
	jb	.L3077
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r14
	movq	%rdx, %r12
.L3077:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L3078
.L3068:
	testq	%r12, %r12
	jne	.L4757
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L3081
	movq	ix86_cost(%rip), %r11
	mov	40(%r11), %ebx
	cmpq	%rbx, %r14
	jae	.L3065
.L3082:
	movq	-2456(%rbp), %r8
	movq	-2448(%rbp), %rdi
	movq	-2440(%rbp), %r10
	movq	-2440(%rbp), %rdx
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r14b
	movq	8(%rdi), %r8
	movq	$0, -568(%rbp)
	movl	$0, -2468(%rbp)
	movq	%r8, -592(%rbp)
	movzbl	%r14b, %ecx
	movq	8(%r10), %r9
	movq	%rdx, -624(%rbp)
	leal	5(,%rcx,4), %r14d
	xorl	%ecx, %ecx
	movq	%r9, -2464(%rbp)
	movq	-2464(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L3087
	cmpw	$99, %dx
	je	.L3087
	cmpw	$98, %dx
	je	.L3087
.L3086:
	movq	-2464(%rbp), %rsi
	movl	%ecx, -608(%rbp)
	xorl	%edx, %edx
	movzwl	(%rsi), %eax
	cmpw	$96, %ax
	je	.L3089
	cmpw	$98, %ax
	je	.L3089
.L3088:
	movq	-2464(%rbp), %r15
	movq	-2448(%rbp), %r11
	movl	%edx, -560(%rbp)
	xorl	%ecx, %ecx
	movq	%r15, -616(%rbp)
	movq	%r11, -600(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L3092
	cmpw	$99, %dx
	je	.L3092
	cmpw	$98, %dx
	je	.L3092
.L3091:
	movl	-560(%rbp), %eax
	movl	%ecx, -584(%rbp)
	movl	$0, -580(%rbp)
	movl	$0, -604(%rbp)
	testl	%eax, %eax
	je	.L3093
	movq	%r12, -568(%rbp)
.L3093:
	movl	-584(%rbp), %eax
	movq	%r12, -576(%rbp)
	testl	%eax, %eax
	je	.L3095
	movl	-608(%rbp), %eax
	testl	%eax, %eax
	jne	.L3094
.L3095:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L3108:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4360
.L3105:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L3105
.L4360:
	testl	%edi, %edi
	je	.L3098
	movslq	%edi,%rbx
	movq	%rbx, %r10
	salq	$4, %r10
	addq	optab_table+240(%rip), %r10
	cmpl	$1317, 8(%r10)
	je	.L3107
	movq	%r8, -2648(%rbp)
	call	get_mode_alignment
	movq	-2648(%rbp), %r8
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L3107
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L3107:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L3108
.L3098:
	testq	%r12, %r12
	jne	.L4757
	cmpq	$2, %r15
	jbe	.L3094
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4362
.L3116:
	movslq	%ecx,%rbx
	movzbl	mode_size(%rbx), %r11d
	cmpl	%r14d, %r11d
	cmovae	-2468(%rbp), %ecx
	movl	%ecx, -2468(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L3116
.L4362:
	movl	-584(%rbp), %eax
	testl	%eax, %eax
	jne	.L3122
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L3120
	cmpw	$54, %dx
	je	.L3120
	cmpw	$55, %dx
	je	.L3120
	cmpw	$58, %dx
	je	.L3120
	cmpw	$134, %dx
	je	.L3120
	cmpw	$56, %dx
	je	.L3120
	cmpw	$140, %dx
	je	.L3120
.L3122:
	movl	-608(%rbp), %r8d
	testl	%r8d, %r8d
	jne	.L3094
	movq	-2464(%rbp), %r10
	movzwl	(%r10), %edx
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L3124
	cmpw	$54, %dx
	je	.L3124
	cmpw	$55, %dx
	je	.L3124
	cmpw	$58, %dx
	je	.L3124
	cmpw	$134, %dx
	je	.L3124
	cmpw	$56, %dx
	je	.L3124
	cmpw	$140, %dx
	je	.L3124
.L3094:
	cmpl	$1, %r14d
	jbe	.L3127
.L3178:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4365
.L3134:
	movslq	%ecx,%r12
	movzbl	mode_size(%r12), %edx
	cmpl	%r14d, %edx
	cmovae	-2468(%rbp), %ecx
	movl	%ecx, -2468(%rbp)
	movzbl	mode_wider_mode(%r12), %ecx
	testl	%ecx, %ecx
	jne	.L3134
.L4365:
	movl	-2468(%rbp), %r14d
	testl	%r14d, %r14d
	je	.L3127
	movslq	-2468(%rbp),%r15
	movq	%r15, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	movl	8(%rcx), %ebx
	cmpl	$1317, %ebx
	je	.L3136
	movl	-2468(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L3136
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%r11
	leaq	-624(%rbp), %r12
	leaq	(%r11,%r11,4), %rbx
	cmpq	%rdx, -576(%rbp)
	movq	$0, -2480(%rbp)
	movq	insn_data+16(,%rbx,8), %rsi
	movq	%rdx, -1656(%rbp)
	movq	%rsi, -1328(%rbp)
	jb	.L3136
	movl	-560(%rbp), %ecx
.L3176:
	testl	%ecx, %ecx
	je	.L3140
	subq	%rdx, 56(%r12)
.L3140:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L3141
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L3142
	movl	-2468(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L4614:
	movq	%rax, -2480(%rbp)
.L3141:
	movl	40(%r12), %r8d
	testl	%r8d, %r8d
	je	.L3144
	movq	24(%r12), %rdi
	movl	-2468(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L4615:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L4952
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L3150
	movzbl	mode_size(%r15), %r9d
	leal	7(%r9), %edx
	andl	$-8, %edx
.L3151:
	movq	cfun(%rip), %rcx
	andl	$33554432, %esi
	movq	16(%rcx), %rbx
	leaq	8(%rbx), %rdi
	movl	8(%rbx), %ecx
	je	.L3152
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L4616:
	leal	(%rax,%rcx), %esi
	movl	%esi, (%rdi)
	movq	%r15, %rdi
	salq	$4, %rdi
	addq	optab_table+384(%rip), %rdi
	movl	8(%rdi), %eax
	cmpl	$1317, %eax
	je	.L3154
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %r11
	movq	insn_data+24(,%r11,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L3155
	movq	%r14, %rdi
	movl	-2468(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L4953
.L3155:
	leaq	(%rbx,%rbx,4), %r8
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r8,8)
.L4617:
	movq	%rax, %rdi
	call	emit_insn
.L3174:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L3175
	movq	-1656(%rbp), %r14
	addq	%r14, 56(%r12)
.L3175:
	movq	48(%r12), %rsi
	movq	-1656(%rbp), %rdx
	subq	-1656(%rbp), %rsi
	cmpq	%rdx, %rsi
	movq	%rsi, 48(%r12)
	jae	.L3176
.L3136:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L3178
.L3127:
	cmpq	$0, -576(%rbp)
	jmp	.L4767
.L4953:
	movl	-2468(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L3155
.L3154:
	movzbl	mode_size(%r15), %r9d
	cmpl	%edx, %r9d
	je	.L4954
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r10b
	movzbl	%r10b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L3162:
	movl	-2468(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%ecx, %ecx
	testq	%rcx, %rcx
	movq	%rax, %rbx
	je	.L3171
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %edi
	testl	%edi, %edi
	jne	.L4955
.L3171:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L3174
.L4955:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L3171
.L4954:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L3162
.L3152:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L4616
.L3150:
	movzbl	mode_size(%r15), %r10d
	leal	1(%r10), %edx
	andl	$-2, %edx
	jmp	.L3151
.L4952:
	movq	%rax, %rsi
	movq	-2480(%rbp), %rdi
	xorl	%eax, %eax
	call	*-1328(%rbp)
	jmp	.L4617
.L3144:
	movq	24(%r12), %rdi
	movl	-2468(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L4615
.L3142:
	movl	-2468(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L4614
.L3124:
	movq	-2464(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -616(%rbp)
	jmp	.L3094
.L3120:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -592(%rbp)
	jmp	.L3122
.L3092:
	movl	$1, %ecx
	jmp	.L3091
.L3089:
	movl	$1, %edx
	jmp	.L3088
.L3087:
	movl	$1, %ecx
	jmp	.L3086
.L3081:
	cmpq	$2, %r14
	ja	.L3065
	jmp	.L3082
.L3057:
	movq	-2456(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-2456(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-2456(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L4956
.L3059:
	movq	-2456(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -2456(%rbp)
	movq	%r12, 8(%rax)
	movq	-2456(%rbp), %r14
	movq	%rbx, 16(%r14)
	jmp	.L3052
.L4956:
	cmpq	16(%rcx), %rax
	jne	.L3059
	jmp	.L3052
.L4946:
	cmpb	$51, 2(%rdx)
	je	.L3050
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L4957
.L3050:
	cmpl	$66, %eax
	jne	.L3053
	movq	-2456(%rbp), %r9
	xorl	%esi, %esi
	movq	8(%r9), %rdi
	call	protect_from_queue
	movq	-2456(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L3052
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -2456(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L3052
.L4957:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L3051
	movq	-2456(%rbp), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -2456(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L3052
.L3051:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L4613:
	movq	%rax, -2456(%rbp)
	jmp	.L3052
.L3049:
	movq	-2456(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L4958
	movq	-2456(%rbp), %r10
	movq	24(%r10), %rax
	testq	%rax, %rax
	jne	.L4613
	movq	-2456(%rbp), %r11
	movq	8(%r11), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	-2456(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdi
	movq	%rdi, -2456(%rbp)
	jmp	.L3052
.L4958:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L4613
.L3044:
	movq	-2640(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-2640(%rbp), %rcx
	movq	%rax, %r12
	movq	16(%rcx), %rdi
	call	protect_from_queue
	movq	-2640(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L4959
.L3046:
	movq	-2640(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -2448(%rbp)
	movq	%r12, 8(%rax)
	movq	-2448(%rbp), %r10
	movq	%rbx, 16(%r10)
	jmp	.L3039
.L4959:
	cmpq	16(%rcx), %rax
	jne	.L3046
	jmp	.L3039
.L4945:
	cmpb	$51, 2(%rdx)
	je	.L3037
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L4960
.L3037:
	cmpl	$66, %eax
	jne	.L3040
	movq	-2640(%rbp), %r12
	xorl	%esi, %esi
	movq	8(%r12), %rdi
	call	protect_from_queue
	movq	-2640(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L3039
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -2448(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L3039
.L4960:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L3038
	movq	-2640(%rbp), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -2448(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L3039
.L3038:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L4612:
	movq	%rax, -2448(%rbp)
	jmp	.L3039
.L3036:
	movq	-2640(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L4961
	movq	-2640(%rbp), %rdi
	movq	24(%rdi), %rsi
	testq	%rsi, %rsi
	movq	%rsi, -2448(%rbp)
	jne	.L3039
	movq	-2640(%rbp), %rax
	movq	8(%rax), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	-2640(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r11
	movq	%r11, -2448(%rbp)
	jmp	.L3039
.L4961:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L4612
.L3031:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L4962
.L3033:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -2440(%rbp)
	movq	%r12, 8(%rax)
	movq	-2440(%rbp), %rdx
	movq	%rbx, 16(%rdx)
	jmp	.L3026
.L4962:
	cmpq	16(%r13), %rax
	jne	.L3033
	jmp	.L3026
.L4944:
	jne	.L3027
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L3026
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -2440(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L3026
.L3023:
	testq	%rsi, %rsi
	je	.L4963
	movq	24(%r13), %rbx
	testq	%rbx, %rbx
	movq	%rbx, -2440(%rbp)
	jne	.L3026
	movq	8(%r13), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rax
.L4611:
	movq	%rax, -2440(%rbp)
	jmp	.L3026
.L4963:
	movq	8(%r13), %rdi
	call	copy_to_reg
	jmp	.L4611
.L3016:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L3012
	movl	32(%rsi), %r15d
	jmp	.L3012
.L3015:
	cmpl	$7, %edx
	ja	.L3011
	jmp	.L3016
	.p2align 6,,7
.L3000:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L4964
.L3002:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L2995
.L4964:
	cmpq	16(%r13), %rax
	jne	.L3002
	jmp	.L2995
.L4877:
	jne	.L2996
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L2995
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	movq	%rbx, 8(%rax)
	jmp	.L2995
	.p2align 6,,7
.L2992:
	cmpq	$0, 16(%r13)
	je	.L4965
	movq	24(%r13), %rax
	testq	%rax, %rax
	je	.L3004
.L4610:
	movq	%rax, %r13
	jmp	.L2995
.L3004:
	movq	8(%r13), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L2995
.L4965:
	movq	8(%r13), %rdi
	call	copy_to_reg
	jmp	.L4610
.L4876:
	movq	144(%r15), %rax
	testq	%rax, %rax
	je	.L2987
	cmpq	%rax, %r13
	jne	.L2987
	jmp	.L2985
	.p2align 6,,7
.L4875:
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L2985
	jmp	.L2986
	.p2align 6,,7
.L2984:
	movq	-2640(%rbp), %rdx
	cmpb	$0, 2(%rdx)
	jne	.L2983
	cmpb	$0, 16(%r15)
	je	.L2983
	movq	8(%r15), %rdx
	movzbl	2(%r13), %edi
	movzbl	61(%rdx), %r8d
	shrb	$1, %r8b
	movzbl	%r8b, %esi
	cmpl	%esi, %edi
	je	.L2983
	movzbl	17(%rdx), %ecx
	movq	-2640(%rbp), %rdx
	shrb	$5, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, -2640(%rbp)
	jmp	.L2983
.L4476:
	movq	-2640(%rbp), %rax
	movzwl	(%rax), %edx
	jmp	.L2906
.L4874:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	%r15, %rdi
	movzbl	2(%r13), %edx
	movq	%rax, %rsi
	jmp	.L4609
.L2945:
	xorl	%r8d, %r8d
	testl	%r8d, %r8d
	je	.L4472
	movl	(%r13), %ecx
	movl	%ecx, %r9d
	andl	$134283263, %r9d
	cmpl	$66, %r9d
	je	.L4966
.L2961:
	andl	$268500991, %ecx
	cmpl	$268435519, %ecx
	je	.L4967
	movzbl	2(%r13), %edx
	xorl	%ecx, %ecx
	movq	%r15, %rdi
	movq	%r13, %rsi
	call	expand_expr
	cmpw	$61, (%r13)
	movq	%rax, -2640(%rbp)
	je	.L4968
.L2981:
	movl	(%r13), %eax
	andl	$134283263, %eax
	cmpl	$134217794, %eax
	je	.L4475
	movq	-2640(%rbp), %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L4476
	movq	-2640(%rbp), %r14
	movzwl	(%r14), %edx
	leal	-67(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L2982
	cmpw	$54, %dx
	je	.L2982
	cmpw	$55, %dx
	je	.L2982
	cmpw	$58, %dx
	je	.L2982
	cmpw	$134, %dx
	je	.L2982
	cmpw	$56, %dx
	je	.L2982
	cmpw	$140, %dx
	je	.L2982
	xorl	%r10d, %r10d
	testl	%r10d, %r10d
	je	.L2906
.L2982:
	movl	$1, -2428(%rbp)
	jmp	.L2906
.L4475:
	movq	-2640(%rbp), %r11
	movzwl	(%r11), %edx
	jmp	.L2906
.L4968:
	cmpl	$52, 8(%r13)
	ja	.L2981
	movq	-2640(%rbp), %rdi
	movzwl	(%rdi), %edx
	jmp	.L2906
.L4967:
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testl	%ecx, %ecx
	jne	.L2967
	movq	8(%r15), %rsi
	movzbl	16(%rsi), %eax
	cmpb	$6, %al
	je	.L2968
	cmpb	$10, %al
	je	.L2968
	cmpb	$11, %al
	je	.L2968
	cmpb	$12, %al
	je	.L2968
.L2967:
	movq	%rdx, %rsi
	xorl	%ecx, %ecx
	movq	%r15, %rdi
	xorl	%edx, %edx
	call	expand_expr
	movzwl	(%rax), %edx
	movq	%rax, %rbx
	cmpw	$66, %dx
	je	.L4969
.L2970:
	leal	-67(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L2973
	cmpw	$54, %dx
	je	.L2973
	cmpw	$55, %dx
	je	.L2973
	cmpw	$58, %dx
	je	.L2973
	cmpw	$134, %dx
	je	.L2973
	cmpw	$56, %dx
	je	.L2973
	cmpw	$140, %dx
	je	.L2973
.L2972:
	movzbl	3(%r13), %edx
	movq	8(%r13), %rdi
	movq	%rbx, %rsi
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L1005
	movzbl	2(%rbx), %edx
	movzbl	2(%r13), %eax
	cmpb	%al, %dl
	je	.L1005
	testb	%dl, %dl
	je	.L2975
	movq	%rbx, %rsi
	movzbl	%al, %edi
	call	gen_lowpart_SUBREG
	movzbl	3(%rax), %ebx
	orb	$16, %bl
	movb	%bl, 3(%rax)
	andb	$-5, %bl
	movzbl	3(%r13), %r8d
	andb	$4, %r8b
	orb	%r8b, %bl
	movb	%bl, 3(%rax)
	jmp	.L1005
.L2975:
	movq	8(%r13), %r9
	movzbl	3(%r13), %ecx
	movzbl	%al, %edi
	movq	%rbx, %rdx
	movzbl	2(%r9), %esi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	jmp	.L1005
.L2973:
	cmpb	$0, 2(%rbx)
	jne	.L2972
	movq	8(%r15), %rdx
	movzbl	3(%r13), %ecx
	movzbl	2(%r13), %edi
	movzbl	61(%rdx), %r11d
	movq	%rbx, %rdx
	shrb	$2, %cl
	andl	$1, %ecx
	shrb	$1, %r11b
	movzbl	%r11b, %esi
	call	convert_modes
	movzbl	3(%r13), %ecx
	movzbl	2(%r13), %esi
	movq	8(%r13), %r15
	movq	%rax, %rdx
	movzbl	2(%r15), %edi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, %rbx
	jmp	.L2972
.L4969:
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L2970
	testb	$8, 3(%rax)
	jne	.L2971
	movq	8(%r13), %rdi
	movq	8(%rax), %rsi
	call	reg_mentioned_p
	testl	%eax, %eax
	je	.L4473
.L2971:
	movq	%rbx, %rdi
	call	copy_to_reg
	movq	%rax, %rbx
.L4473:
	movzwl	(%rbx), %edx
	jmp	.L2970
.L2968:
	cmpq	$0, 8(%rsi)
	jne	.L2967
	movzbl	3(%r13), %ecx
	movzbl	17(%rsi), %r14d
	movl	$1, %edi
	movl	%ecx, %r10d
	shrb	$5, %r14b
	shrb	$2, %r10b
	andl	$1, %r14d
	andl	%r10d, %edi
	cmpl	%edi, %r14d
	je	.L2969
	call	signed_or_unsigned_type
	movq	%r15, %rsi
	movq	%rax, %rdi
	call	convert
	movzbl	3(%r13), %ecx
	movq	%rax, %r15
.L2969:
	movq	8(%r13), %rsi
	shrb	$2, %cl
	movzbl	2(%rsi), %edi
	movl	$1, %esi
	andl	%ecx, %esi
	call	type_for_mode
	movq	%r15, %rsi
	movq	%rax, %rdi
	call	convert
	movq	8(%r13), %rdx
	movq	%rax, %r15
	jmp	.L2967
.L4966:
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L2961
	xorl	%ecx, %ecx
	movzbl	%al, %edx
	movq	%r15, %rdi
	movq	%r13, %rsi
	call	expand_expr
	movq	%rax, -2640(%rbp)
	movq	%rax, %rcx
	movzbl	2(%rax), %eax
	cmpb	$51, %al
	je	.L2962
	testb	%al, %al
	je	.L2962
	cmpq	%r13, %rcx
	je	.L2964
	movq	%rcx, %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L4970
.L2963:
	movq	-2640(%rbp), %rdi
	call	copy_to_reg
	movq	%rax, -2640(%rbp)
.L2962:
	movl	$1, -2428(%rbp)
	jmp	.L4475
.L4970:
	movq	-2640(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L2963
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L2963
.L2964:
	movl	$1, %r12d
	jmp	.L2963
	.p2align 6,,7
.L4472:
	movl	(%r13), %ecx
	jmp	.L2961
.L2954:
	movl	$1, %ebx
	jmp	.L2948
.L2955:
	xorl	%ebx, %ebx
	jmp	.L2948
.L2952:
	movq	8(%r13), %rdi
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L2954
	movq	16(%r13), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L2948
	jmp	.L2954
	.p2align 6,,7
.L4873:
	cmpb	$51, 2(%r13)
	jne	.L2907
	call	gen_label_rtx
	movq	%rax, %r14
	call	gen_label_rtx
	movq	cfun(%rip), %rbx
	movq	%rax, -1320(%rbp)
	movq	16(%rbx), %r12
	movq	40(%r12), %rbx
	testq	%rbx, %rbx
	je	.L4350
.L2913:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L4971
	call	emit_insn
	movq	%rax, 16(%rbx)
.L2912:
	movq	cfun(%rip), %r9
	movq	40(%rbx), %r8
	movq	16(%r9), %rcx
	testq	%r8, %r8
	movq	%r8, %rbx
	movq	%r8, 40(%rcx)
	jne	.L2913
.L4350:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L2915
	cmpl	$66, %eax
	je	.L4972
.L2919:
	cmpl	$75, %eax
	je	.L2923
	cmpl	$78, %eax
	je	.L2923
.L2918:
	call	do_pending_stack_adjust
	movq	cfun(%rip), %rbx
	movq	%r14, %rsi
	movq	16(%rbx), %r12
	incl	4(%r12)
	movq	32(%r15), %rdi
	call	jumpifnot
	call	start_cleanup_deferral
	movq	40(%r15), %rdi
	xorl	%edx, %edx
	movq	%r13, %rsi
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %r10
	movq	16(%r10), %rdi
	movq	40(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L4352
.L2933:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L4973
	call	emit_insn
	movq	%rax, 16(%rbx)
.L2932:
	movq	cfun(%rip), %r9
	movq	40(%rbx), %r8
	movq	16(%r9), %rcx
	testq	%r8, %r8
	movq	%r8, %rbx
	movq	%r8, 40(%rcx)
	jne	.L2933
.L4352:
	movq	-1320(%rbp), %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r14, %rdi
	call	emit_label
	call	start_cleanup_deferral
	movq	48(%r15), %rdi
	movq	%r13, %rsi
	xorl	%edx, %edx
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %r13
	movq	16(%r13), %r15
	movq	40(%r15), %rbx
	testq	%rbx, %rbx
	je	.L4354
.L2940:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L4974
	call	emit_insn
	movq	%rax, 16(%rbx)
.L2939:
	movq	cfun(%rip), %r12
	movq	40(%rbx), %rdi
	movq	16(%r12), %r10
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%r10)
	jne	.L2940
.L4354:
	movq	-1320(%rbp), %rdi
	call	emit_label
	movq	cfun(%rip), %r11
	movq	16(%r11), %rbx
	decl	4(%rbx)
	jmp	.L1005
.L4974:
	movq	8(%rdi), %rsi
	movq	8(%rsi), %r14
	movq	%r14, 16(%rbx)
	call	emit_insn
	jmp	.L2939
.L4973:
	movq	8(%rdi), %rdx
	movq	8(%rdx), %r11
	movq	%r11, 16(%rbx)
	call	emit_insn
	jmp	.L2932
.L2923:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L4975
.L2925:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L2918
.L4975:
	cmpq	16(%r13), %rax
	jne	.L2925
	jmp	.L2918
	.p2align 6,,7
.L4972:
	jne	.L2919
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L2918
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	movq	%rbx, 8(%rax)
	jmp	.L2918
	.p2align 6,,7
.L2915:
	cmpq	$0, 16(%r13)
	je	.L4976
	movq	24(%r13), %rax
	testq	%rax, %rax
	je	.L2927
.L4608:
	movq	%rax, %r13
	jmp	.L2918
.L2927:
	movq	8(%r13), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L2918
.L4976:
	movq	8(%r13), %rdi
	call	copy_to_reg
	jmp	.L4608
	.p2align 6,,7
.L4971:
	movq	8(%rdi), %rdx
	movq	8(%rdx), %r11
	movq	%r11, 16(%rbx)
	call	emit_insn
	jmp	.L2912
.L4872:
	movq	32(%r15), %rdi
	movq	const_int_rtx+512(%rip), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	cfun(%rip), %r8
	movq	16(%r8), %rdx
	movq	40(%rdx), %rbx
	testq	%rbx, %rbx
	je	.L4348
.L2903:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L4977
	call	emit_insn
	movq	%rax, 16(%rbx)
.L2902:
	movq	cfun(%rip), %r10
	movq	40(%rbx), %rdi
	movq	16(%r10), %rsi
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%rsi)
	jne	.L2903
.L4348:
	movq	40(%r15), %rdi
	movq	%r13, %rsi
	xorl	%edx, %edx
	call	store_expr
	jmp	.L1005
.L4977:
	movq	8(%rdi), %r9
	movq	8(%r9), %rcx
	movq	%rcx, 16(%rbx)
	call	emit_insn
	jmp	.L2902
.L4871:
	movq	-1800(%rbp), %r10
	movq	%r12, %rsi
	movl	$60, %edi
	xorl	%eax, %eax
	movq	104(%r10), %rdx
	call	build
	movq	%rax, %rdi
	call	fold
	movq	sizetype_tab+8(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%rax, %r12
	jmp	.L2896
.L4870:
	movl	$1, %edi
	movl	$1, %esi
	call	size_int_wide
	movq	%rax, %r12
	jmp	.L2895
.L2892:
	testq	%r12, %r12
	je	.L3804
	movq	%r12, %rdi
	xorl	%esi, %esi
	call	tree_low_cst
	movq	-784(%rbp), %r13
	movq	%rax, %rbx
	subq	-1824(%rbp), %rbx
	movq	32(%r13), %rdi
.L4643:
	movl	$1, %esi
	call	tree_low_cst
	movq	-1744(%rbp), %rcx
	imulq	%rax, %rbx
	movl	(%rcx), %eax
	andl	$16842751, %eax
	cmpl	$66, %eax
	je	.L4978
.L3806:
	movq	-784(%rbp), %rdi
	movq	-1744(%rbp), %r12
	call	get_alias_set
	cmpb	$46, 16(%r15)
	movl	%eax, %r13d
	je	.L4979
.L3807:
	movq	-720(%rbp), %rdx
	movq	-1744(%rbp), %rdi
	movq	%r15, %r8
	movq	-1904(%rbp), %rsi
	movl	-812(%rbp), %ecx
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	%r13d, 16(%rsp)
	movq	%rdx, 8(%rsp)
	movq	%rbx, %rdx
	call	store_field
	jmp	.L1005
.L4979:
	testl	$7, %ebx 
	jne	.L3807
	testq	%rbx, %rbx
	je	.L4481
	movq	-1744(%rbp), %r9
	cmpw	$66, (%r9)
	jne	.L3807
.L4512:
	movq	-1744(%rbp), %r10
	movzbl	2(%r10), %eax
	cmpb	$51, %al
	je	.L3816
	movzbl	%al, %edi
	call	get_mode_alignment
	xorl	%esi, %esi
	mov	%eax, %r14d
	movq	%rbx, %rax
	cqto
	idivq	%r14
	testq	%rdx, %rdx
	je	.L3815
.L3816:
	movl	$51, %esi
.L3815:
	cmpq	$-1, %rbx
	leaq	7(%rbx), %r8
	movq	-1744(%rbp), %rdi
	cmovle	%r8, %rbx
	movl	$1, %ecx
	movl	$1, %r8d
	sarq	$3, %rbx
	movq	%rbx, %rdx
	call	adjust_address_1
	movq	%rax, %r12
.L3809:
	movl	(%r12), %eax
	andl	$16842751, %eax
	cmpl	$66, %eax
	je	.L4980
.L3818:
	shrq	$3, -1904(%rbp)
	movl	-1884(%rbp), %edx
	movq	%r15, %rdi
	movq	-1904(%rbp), %rcx
	movq	%r12, %rsi
	call	store_constructor
	jmp	.L1005
.L4980:
	movq	16(%r12), %rax
	testq	%rax, %rax
	je	.L3818
	cmpq	$0, (%rax)
	je	.L3818
	movq	%r12, %rdi
	call	copy_rtx
	movslq	%r13d,%rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	set_mem_alias_set
	jmp	.L3818
	.p2align 6,,7
.L4481:
	movq	-1744(%rbp), %rdi
	cmpw	$66, (%rdi)
	jne	.L3809
	jmp	.L4512
.L4978:
	movq	-720(%rbp), %rsi
	cmpb	$18, 16(%rsi)
	jne	.L3806
	testb	$8, 62(%rsi)
	je	.L3806
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -1744(%rbp)
	orb	$1, 3(%rax)
	jmp	.L3806
	.p2align 6,,7
.L3804:
	movq	-784(%rbp), %rcx
	movslq	-1888(%rbp),%rbx
	movq	32(%rcx), %rdi
	jmp	.L4643
.L4869:
	movq	32(%r12), %r13
	movq	40(%r12), %rdx
	movl	-1804(%rbp), %r12d
	movq	%rdx, -824(%rbp)
	testl	%r12d, %r12d
	je	.L1041
	xorl	%esi, %esi
	movq	%r13, %rdi
	call	host_integerp
	testl	%eax, %eax
	jne	.L4981
.L1041:
	movq	-824(%rbp), %rdi
	xorl	%ecx, %ecx
	xorl	%esi, %esi
	xorl	%edx, %edx
	call	expand_expr
	call	gen_label_rtx
	call	gen_label_rtx
	movq	-1800(%rbp), %rdx
	xorl	%esi, %esi
	movl	$34, %edi
	movq	%rax, -832(%rbp)
	movzbl	17(%rdx), %r14d
	shrb	$5, %r14b
	andl	$1, %r14d
	movl	%r14d, -692(%rbp)
	call	build_decl
	xorl	%ecx, %ecx
	movq	%rax, -1920(%rbp)
	movq	-1800(%rbp), %rdi
	leaq	-692(%rbp), %rdx
	movzbl	48(%rax), %esi
	call	promote_mode
	movl	%eax, %edi
	call	gen_reg_rtx
	movq	%rax, %r14
	movq	-1920(%rbp), %rax
	movq	%r14, 144(%rax)
	cmpb	$118, 16(%r15)
	je	.L4982
.L1066:
	movl	$0, -1924(%rbp)
	xorl	%r12d, %r12d
	movzbl	16(%r13), %eax
	cmpb	$47, %al
	je	.L4983
	cmpb	$51, %al
	je	.L4984
.L1084:
	movzwl	(%r14), %eax
	subl	$66, %eax
	cmpl	$12, %eax
	ja	.L1132
	mov	%eax, %r9d
	jmp	*.L1133(,%r9,8)
	.section	.rodata
	.align 8
	.align 4
.L1133:
	.quad	.L1126
	.quad	.L1132
	.quad	.L1132
	.quad	.L1132
	.quad	.L1132
	.quad	.L1131
	.quad	.L1132
	.quad	.L1132
	.quad	.L1132
	.quad	.L1129
	.quad	.L1129
	.quad	.L1132
	.quad	.L1129
	.text
.L1126:
	movq	8(%r14), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L1125:
	testl	%ebx, %ebx
	je	.L1122
	movzbl	2(%r14), %eax
	cmpb	$51, %al
	je	.L1134
	testb	%al, %al
	jne	.L4985
.L1134:
	movzbl	2(%r14), %edx
	movq	%r13, %rdi
	xorl	%esi, %esi
.L4540:
	xorl	%ecx, %ecx
	call	expand_expr
	testb	$8, 3(%r14)
	movq	%rax, -2208(%rbp)
	jne	.L4454
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L4449
	movl	$1, -1924(%rbp)
.L4454:
	movq	-2208(%rbp), %rbx
	movzwl	(%rbx), %edx
.L1083:
	leal	-67(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L1161
	cmpw	$54, %dx
	je	.L1161
	cmpw	$55, %dx
	je	.L1161
	cmpw	$58, %dx
	je	.L1161
	cmpw	$134, %dx
	je	.L1161
	cmpw	$56, %dx
	je	.L1161
	cmpw	$140, %dx
	je	.L1161
.L1160:
	movq	-2208(%rbp), %rdi
	movq	%r14, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	je	.L1163
	cmpq	%r14, -2208(%rbp)
	je	.L1162
	movq	-2208(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L4986
.L1163:
	movzbl	16(%r13), %eax
	testb	%al, %al
	je	.L1162
	testl	%r12d, %r12d
	jne	.L1162
	movzbl	%al, %r12d 
	cmpb	$100, tree_code_type(%r12)
	je	.L4987
.L1164:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L1169
	cmpl	$66, %eax
	je	.L4988
.L1173:
	cmpl	$75, %eax
	je	.L1177
	cmpl	$78, %eax
	je	.L1177
.L1172:
	movq	-2208(%rbp), %rsi
	movzbl	2(%r14), %ecx
	movzbl	2(%rsi), %eax
	cmpb	%cl, %al
	je	.L1182
	testb	%al, %al
	je	.L1182
	movq	8(%r13), %rdi
	movl	-1924(%rbp), %eax
	movzbl	17(%rdi), %r13d
	shrb	$5, %r13b
	movl	%r13d, %edx
	andl	$1, %edx
	testl	%eax, %eax
	je	.L1183
	movq	-2208(%rbp), %rsi
	movzbl	%cl, %edi
	call	convert_to_mode
	movq	%r14, %rdi
	movq	%rax, %rsi
	movq	%rax, -2208(%rbp)
.L4572:
	call	emit_move_insn
.L1162:
	xorl	%esi, %esi
	testl	%esi, %esi
	je	.L1082
	movl	-1924(%rbp), %eax
	testl	%eax, %eax
	je	.L1975
	movq	-2208(%rbp), %rdi
	cmpw	$66, (%rdi)
	je	.L1975
.L1082:
	xorl	%edi, %edi
	call	expand_start_loop
	movq	-1800(%rbp), %r9
	movq	-1920(%rbp), %r10
	movq	%rax, -840(%rbp)
	movl	$60, %edi
	xorl	%eax, %eax
	movq	8(%r10), %rsi
	movq	104(%r9), %rcx
	movq	%r10, %rdx
	call	build
	movq	%rax, %rdi
	call	fold
	movq	sizetype_tab+8(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	-784(%rbp), %r8
	movq	sizetype_tab+8(%rip), %rdi
	movq	%rax, %r13
	movq	40(%r8), %rsi
	call	convert
	movq	%r13, %rsi
	movl	$61, %edi
	movq	%rax, %rdx
	call	size_binop
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	expand_expr
	movq	%r12, %rdi
	movq	%rax, %r14
	call	highest_pow2_factor
	movq	-1744(%rbp), %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	call	offset_address
	movl	$1, %r8d
	movl	$1, %ecx
	movl	-812(%rbp), %esi
	xorl	%edx, %edx
	movq	%rax, %rdi
	call	adjust_address_1
	movq	%rax, %r13
	movzbl	16(%r15), %eax
	cmpb	$46, %al
	je	.L4989
	xorl	%r12d, %r12d
	movl	$0, -2212(%rbp)
	cmpb	$47, %al
	je	.L4990
	cmpb	$51, %al
	je	.L4991
.L1995:
	movzwl	(%r13), %eax
	subl	$66, %eax
	cmpl	$12, %eax
	ja	.L2043
	mov	%eax, %ecx
	jmp	*.L2044(,%rcx,8)
	.section	.rodata
	.align 8
	.align 4
.L2044:
	.quad	.L2037
	.quad	.L2043
	.quad	.L2043
	.quad	.L2043
	.quad	.L2043
	.quad	.L2042
	.quad	.L2043
	.quad	.L2043
	.quad	.L2043
	.quad	.L2040
	.quad	.L2040
	.quad	.L2043
	.quad	.L2040
	.text
.L2037:
	movq	8(%r13), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L2036:
	testl	%ebx, %ebx
	je	.L2033
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L2045
	testb	%al, %al
	jne	.L4992
.L2045:
	movzbl	2(%r13), %edx
	movq	%r15, %rdi
	xorl	%esi, %esi
.L4574:
	xorl	%ecx, %ecx
	call	expand_expr
	testb	$8, 3(%r13)
	movq	%rax, -2424(%rbp)
	jne	.L4465
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L4460
	movl	$1, -2212(%rbp)
.L4463:
	movq	-2424(%rbp), %r10
	movzwl	(%r10), %edx
.L1994:
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L2072
	cmpw	$54, %dx
	je	.L2072
	cmpw	$55, %dx
	je	.L2072
	cmpw	$58, %dx
	je	.L2072
	cmpw	$134, %dx
	je	.L2072
	cmpw	$56, %dx
	je	.L2072
	cmpw	$140, %dx
	je	.L2072
.L2071:
	movq	-2424(%rbp), %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	je	.L2074
	cmpq	%r13, -2424(%rbp)
	je	.L2073
	movq	-2424(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L4993
.L2074:
	movzbl	16(%r15), %eax
	testb	%al, %al
	je	.L2073
	testl	%r12d, %r12d
	jne	.L2073
	movzbl	%al, %r12d 
	cmpb	$100, tree_code_type(%r12)
	je	.L4994
.L2075:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L2080
	cmpl	$66, %eax
	je	.L4995
.L2084:
	cmpl	$75, %eax
	je	.L2088
	cmpl	$78, %eax
	je	.L2088
.L2083:
	movq	-2424(%rbp), %r8
	movzbl	2(%r13), %ecx
	movzbl	2(%r8), %eax
	cmpb	%cl, %al
	je	.L2093
	testb	%al, %al
	je	.L2093
	movq	8(%r15), %r9
	movl	-2212(%rbp), %r15d
	movzbl	17(%r9), %edi
	shrb	$5, %dil
	movl	%edi, %edx
	andl	$1, %edx
	testl	%r15d, %r15d
	je	.L2094
	movq	-2424(%rbp), %rsi
	movzbl	%cl, %edi
	call	convert_to_mode
	movq	%r13, %rdi
	movq	%rax, %rsi
	movq	%rax, -2424(%rbp)
.L4607:
	call	emit_move_insn
.L2073:
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L1984
	movl	-2212(%rbp), %eax
	testl	%eax, %eax
	je	.L2886
	movq	-2424(%rbp), %r15
	cmpw	$66, (%r15)
	je	.L2886
.L1984:
	movq	-1920(%rbp), %rdx
	movq	-824(%rbp), %rcx
	movl	$97, %edi
	movq	integer_types+40(%rip), %rsi
	xorl	%eax, %eax
	call	build
	movq	-840(%rbp), %rdi
	movq	%rax, %rsi
	call	expand_exit_loop_if_false
	xorl	%eax, %eax
	movq	global_trees+96(%rip), %rcx
	movq	-1920(%rbp), %r13
	movl	$130, %edi
	movq	8(%r13), %rsi
	movq	%r13, %rdx
	call	build
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_increment
	call	expand_end_loop
	movq	-832(%rbp), %rdi
	call	emit_label
	jmp	.L1005
.L2886:
	cmpb	$51, 2(%r13)
	je	.L1984
	cmpw	$61, (%r13)
	je	.L4996
.L2889:
	movq	%r13, %rdi
	call	copy_to_reg
	jmp	.L1984
.L4996:
	cmpl	$52, 8(%r13)
	jbe	.L1984
	jmp	.L2889
.L2094:
	movq	-2424(%rbp), %rsi
	movq	%r13, %rdi
	call	convert_move
	jmp	.L2073
.L2093:
	cmpb	$51, %al
	je	.L4997
.L2097:
	cmpw	$39, (%r13)
	je	.L4998
	cmpb	$51, %al
	je	.L4999
	movq	%r13, %rdi
	movq	-2424(%rbp), %rsi
	jmp	.L4607
.L4999:
	movq	-2424(%rbp), %r11
	movq	%r15, %rdi
	movq	%r13, -2384(%rbp)
	movq	%r11, -2392(%rbp)
	call	expr_size
	movl	$8, %edx
	movq	16(%r13), %rcx
	movq	%rax, %r14
	testq	%rcx, %rcx
	je	.L2688
	movl	32(%rcx), %edx
.L2688:
	movq	-2424(%rbp), %r15
	movq	16(%r15), %rax
	testq	%rax, %rax
	je	.L2689
	cmpl	32(%rax), %edx
	jb	.L2690
.L2685:
	testq	%rax, %rax
	movl	$8, -2372(%rbp)
	je	.L2686
	movl	32(%rax), %eax
	movl	%eax, -2372(%rbp)
.L2686:
	cmpb	$51, 2(%r13)
	jne	.L4766
	movq	-2424(%rbp), %rsi
	cmpb	$51, 2(%rsi)
	jne	.L4765
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L2697
	cmpl	$66, %eax
	je	.L5000
.L2701:
	cmpl	$75, %eax
	je	.L2705
	cmpl	$78, %eax
	je	.L2705
.L2700:
	movq	-2424(%rbp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L2710
	cmpl	$66, %eax
	je	.L5001
.L2714:
	cmpl	$75, %eax
	je	.L2718
	cmpl	$78, %eax
	je	.L2718
.L2713:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L2723
	cmpl	$66, %eax
	je	.L5002
.L2727:
	cmpl	$75, %eax
	je	.L2731
	cmpl	$78, %eax
	je	.L2731
.L2726:
	movq	-2384(%rbp), %rbx
	cmpw	$66, (%rbx)
	jne	.L4764
	movq	-2392(%rbp), %r9
	cmpw	$66, (%r9)
	jne	.L4763
	testq	%r14, %r14
	je	.L4762
	cmpw	$54, (%r14)
	je	.L5003
.L2739:
	shrl	$3, -2372(%rbp)
	xorl	%edi, %edi
	mov	-2372(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -1288(%rbp)
	testl	%r12d, %r12d
	je	.L4346
.L2872:
	movslq	%r12d,%rsi
	movl	movstr_optab(,%rsi,4), %edx
	movq	%rsi, -1296(%rbp)
	cmpl	$1317, %edx
	je	.L2858
	cmpw	$54, (%r14)
	je	.L5004
.L2862:
	testb	$2, target_flags+3(%rip)
	je	.L2863
	movq	-1296(%rbp), %r10
	cmpw	$63, mode_bitsize(%r10,%r10)
.L4605:
	jbe	.L2858
.L2861:
	movslq	%edx,%rax
	leaq	(%rax,%rax,4), %rbx
	movq	%rax, -1304(%rbp)
	movq	insn_data+24(,%rbx,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L2865
	movq	-2384(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L2858
.L2865:
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L5005
.L2866:
	movq	72(%r15), %rax
	testq	%rax, %rax
	je	.L2867
	xorl	%esi, %esi
	movq	-1288(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L2858
.L2867:
	call	get_last_insn
	movl	$1, %edx
	movq	%r14, %rsi
	movl	%r12d, %edi
	movq	%rax, -1312(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r15), %rax
	testq	%rax, %rax
	jne	.L5006
.L2868:
	movq	-1304(%rbp), %rdx
	movq	-2384(%rbp), %rdi
	xorl	%eax, %eax
	movq	-2392(%rbp), %rsi
	movq	-1288(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L4500
	movq	-1312(%rbp), %rdi
	call	delete_insns_since
.L2858:
	movq	-1296(%rbp), %r8
	movzbl	mode_wider_mode(%r8), %r12d
	testl	%r12d, %r12d
	jne	.L2872
.L4346:
	testb	$2, target_flags+3(%rip)
	movq	-2384(%rbp), %r15
	movl	$0, volatile_ok(%rip)
	setne	%r10b
	movq	8(%r15), %rsi
	movzbl	%r10b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-2392(%rbp), %r9
	testb	$2, target_flags+3(%rip)
	setne	%sil
	movq	%rax, %r15
	movzbl	%sil, %edi
	movq	8(%r9), %rsi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%r14, %rsi
	movq	sizetype_tab(%rip), %rdi
	movq	%rax, %rbx
	movzbl	61(%rdi), %ecx
	shrb	$1, %cl
	movzbl	%cl, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r14
	je	.L5007
.L2881:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r15, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r14, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rcx
	movq	%rax, (%rbx)
	movq	(%r12), %r9
	movq	(%r9), %rdi
	movq	$0, (%rdi)
	movq	8(%rcx), %rdi
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %rbx
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%rbx), %r14
	movq	8(%r14), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r15)
	je	.L2073
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r15, %rdx
.L4606:
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L2073
.L5007:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r8
	xorl	%esi, %esi
	orb	$1, 49(%r8)
	movq	fn.1(%rip), %rdx
	orb	$8, 18(%rdx)
	movq	fn.1(%rip), %r12
	orb	$64, 50(%r12)
	movq	fn.1(%rip), %r11
	orb	$2, 18(%r11)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L2881
.L4500:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L2073
	.p2align 6,,7
.L5006:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L2868
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L2868
	.p2align 6,,7
.L5005:
	movq	-2392(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L2858
	jmp	.L2866
.L2863:
	movq	-1296(%rbp), %r11
	cmpw	$31, mode_bitsize(%r11,%r11)
	jmp	.L4605
.L5004:
	movq	mode_mask_array(,%rsi,8), %r15
	shrq	$1, %r15
	cmpq	%r15, 8(%r14)
	jbe	.L2861
	jmp	.L2862
.L5003:
	movq	8(%r14), %r12
	xorl	%r15d, %r15d
	movl	$17, %esi
.L2752:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4335
.L2749:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %r8
	cmpq	%rsi, %r8
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L2749
.L4335:
	testl	%edi, %edi
	je	.L2742
	movslq	%edi,%rbx
	movq	%rbx, %r11
	salq	$4, %r11
	addq	optab_table+240(%rip), %r11
	cmpl	$1317, 8(%r11)
	je	.L2751
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L2751
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L2751:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L2752
.L2742:
	testq	%r12, %r12
	jne	.L4757
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L2755
	movq	ix86_cost(%rip), %rbx
	mov	40(%rbx), %edx
	cmpq	%rdx, %r15
	jae	.L2739
.L2756:
	movq	-2392(%rbp), %rsi
	movq	-2384(%rbp), %rdi
	movq	8(%r14), %r12
	movq	-2384(%rbp), %r11
	testb	$2, target_flags+3(%rip)
	movq	8(%rsi), %r8
	setne	%r14b
	movq	$0, -568(%rbp)
	movl	$0, -2404(%rbp)
	movq	%r8, -592(%rbp)
	movq	8(%rdi), %r10
	movq	%r11, -624(%rbp)
	movzbl	%r14b, %ecx
	leal	5(,%rcx,4), %r14d
	xorl	%ecx, %ecx
	movzwl	(%r10), %edx
	movq	%r10, -2400(%rbp)
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L2761
	cmpw	$99, %dx
	je	.L2761
	cmpw	$98, %dx
	je	.L2761
.L2760:
	movq	-2400(%rbp), %rbx
	movl	%ecx, -608(%rbp)
	xorl	%edx, %edx
	movzwl	(%rbx), %eax
	cmpw	$96, %ax
	je	.L2763
	cmpw	$98, %ax
	je	.L2763
.L2762:
	movl	%edx, -560(%rbp)
	movq	-2392(%rbp), %rax
	xorl	%ecx, %ecx
	movq	-2400(%rbp), %rdx
	movq	%rax, -600(%rbp)
	movq	%rdx, -616(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L2766
	cmpw	$99, %dx
	je	.L2766
	cmpw	$98, %dx
	je	.L2766
.L2765:
	movl	-560(%rbp), %r9d
	movl	%ecx, -584(%rbp)
	movl	$0, -580(%rbp)
	movl	$0, -604(%rbp)
	testl	%r9d, %r9d
	je	.L2767
	movq	%r12, -568(%rbp)
.L2767:
	movl	-584(%rbp), %r10d
	movq	%r12, -576(%rbp)
	testl	%r10d, %r10d
	je	.L2769
	movl	-608(%rbp), %r11d
	testl	%r11d, %r11d
	jne	.L2768
.L2769:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L2782:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4338
.L2779:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L2779
.L4338:
	testl	%edi, %edi
	je	.L2772
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L2781
	movq	%r8, -2648(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-2648(%rbp), %r8
	jb	.L2781
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L2781:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L2782
.L2772:
	testq	%r12, %r12
	jne	.L4757
	cmpq	$2, %r15
	jbe	.L2768
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4340
.L2790:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %r9d
	cmpl	%r14d, %r9d
	cmovae	-2404(%rbp), %ecx
	movl	%ecx, -2404(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L2790
.L4340:
	movl	-584(%rbp), %eax
	testl	%eax, %eax
	jne	.L2796
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L2794
	cmpw	$54, %dx
	je	.L2794
	cmpw	$55, %dx
	je	.L2794
	cmpw	$58, %dx
	je	.L2794
	cmpw	$134, %dx
	je	.L2794
	cmpw	$56, %dx
	je	.L2794
	cmpw	$140, %dx
	je	.L2794
.L2796:
	movl	-608(%rbp), %r11d
	testl	%r11d, %r11d
	jne	.L2768
	movq	-2400(%rbp), %rcx
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L2798
	cmpw	$54, %dx
	je	.L2798
	cmpw	$55, %dx
	je	.L2798
	cmpw	$58, %dx
	je	.L2798
	cmpw	$134, %dx
	je	.L2798
	cmpw	$56, %dx
	je	.L2798
	cmpw	$140, %dx
	je	.L2798
.L2768:
	cmpl	$1, %r14d
	jbe	.L2801
.L2852:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4343
.L2808:
	movslq	%ecx,%r8
	movzbl	mode_size(%r8), %edx
	cmpl	%r14d, %edx
	cmovae	-2404(%rbp), %ecx
	movl	%ecx, -2404(%rbp)
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L2808
.L4343:
	movl	-2404(%rbp), %r14d
	testl	%r14d, %r14d
	je	.L2801
	movslq	-2404(%rbp),%r15
	movq	%r15, %r12
	salq	$4, %r12
	addq	optab_table+240(%rip), %r12
	movl	8(%r12), %ebx
	cmpl	$1317, %ebx
	je	.L2810
	movl	-2404(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L2810
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%r10
	leaq	-624(%rbp), %r12
	leaq	(%r10,%r10,4), %r9
	cmpq	%rdx, -576(%rbp)
	movq	$0, -2416(%rbp)
	movq	insn_data+16(,%r9,8), %rsi
	movq	%rdx, -1648(%rbp)
	movq	%rsi, -1280(%rbp)
	jb	.L2810
	movl	-560(%rbp), %ecx
.L2850:
	testl	%ecx, %ecx
	je	.L2814
	subq	%rdx, 56(%r12)
.L2814:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L2815
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L2816
	movl	-2404(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L4601:
	movq	%rax, -2416(%rbp)
.L2815:
	movl	40(%r12), %r11d
	testl	%r11d, %r11d
	je	.L2818
	movq	24(%r12), %rdi
	movl	-2404(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L4602:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L5008
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L2824
	movzbl	mode_size(%r15), %ebx
	leal	7(%rbx), %edx
	andl	$-8, %edx
.L2825:
	movq	cfun(%rip), %rdi
	andl	$33554432, %esi
	movq	16(%rdi), %r8
	leaq	8(%r8), %rdi
	movl	8(%r8), %ecx
	je	.L2826
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L4603:
	movq	%r15, %rsi
	leal	(%rax,%rcx), %r9d
	salq	$4, %rsi
	movl	%r9d, (%rdi)
	addq	optab_table+384(%rip), %rsi
	movl	8(%rsi), %eax
	cmpl	$1317, %eax
	je	.L2828
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %r10
	movq	insn_data+24(,%r10,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L2829
	movq	%r14, %rdi
	movl	-2404(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L5009
.L2829:
	leaq	(%rbx,%rbx,4), %r11
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r11,8)
.L4604:
	movq	%rax, %rdi
	call	emit_insn
.L2848:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L2849
	movq	-1648(%rbp), %r14
	addq	%r14, 56(%r12)
.L2849:
	movq	48(%r12), %r9
	movq	-1648(%rbp), %rdx
	subq	-1648(%rbp), %r9
	cmpq	%rdx, %r9
	movq	%r9, 48(%r12)
	jae	.L2850
.L2810:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L2852
.L2801:
	cmpq	$0, -576(%rbp)
.L4768:
	je	.L2073
	jmp	.L4742
	.p2align 6,,7
.L5009:
	movl	-2404(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L2829
.L2828:
	movzbl	mode_size(%r15), %ebx
	cmpl	%edx, %ebx
	je	.L5010
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	testb	$2, target_flags+3(%rip)
	setne	%dil
	movq	%rax, %rcx
	movzbl	%dil, %esi
	movl	$75, %edi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r8b
	movzbl	%r8b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L2836:
	movl	-2404(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%ecx, %ecx
	testq	%rcx, %rcx
	movq	%rax, %rbx
	je	.L2845
	xorl	%esi, %esi
	movq	%rax, %rdi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %esi
	testl	%esi, %esi
	jne	.L5011
.L2845:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L2848
.L5011:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L2845
.L5010:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L2836
	.p2align 6,,7
.L2826:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L4603
.L2824:
	movzbl	mode_size(%r15), %ecx
	leal	1(%rcx), %edx
	andl	$-2, %edx
	jmp	.L2825
.L5008:
	movq	%rax, %rsi
	movq	-2416(%rbp), %rdi
	xorl	%eax, %eax
	call	*-1280(%rbp)
	jmp	.L4604
.L2818:
	movq	24(%r12), %rdi
	movl	-2404(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L4602
.L2816:
	movl	-2404(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L4601
.L2798:
	movq	-2400(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -616(%rbp)
	jmp	.L2768
.L2794:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -592(%rbp)
	jmp	.L2796
	.p2align 6,,7
.L2766:
	movl	$1, %ecx
	jmp	.L2765
.L2763:
	movl	$1, %edx
	jmp	.L2762
.L2761:
	movl	$1, %ecx
	jmp	.L2760
.L2755:
	cmpq	$2, %r15
	ja	.L2739
	jmp	.L2756
.L2731:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L5012
.L2733:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L2726
.L5012:
	cmpq	16(%r14), %rax
	jne	.L2733
	jmp	.L2726
	.p2align 6,,7
.L5002:
	cmpb	$51, 2(%r14)
	je	.L2724
	movq	8(%r14), %r12
	cmpw	$71, (%r12)
	je	.L5013
.L2724:
	cmpl	$66, %eax
	jne	.L2727
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L2726
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%rbx, 8(%rax)
	jmp	.L2726
.L5013:
	movq	8(%r12), %rsi
	movq	%r14, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L2725
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L2726
.L2725:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L4600:
	movq	%rax, %r14
	jmp	.L2726
.L2723:
	cmpq	$0, 16(%r14)
	je	.L5014
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L4600
	movq	8(%r14), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L2726
.L5014:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L4600
	.p2align 6,,7
.L2718:
	movq	-2424(%rbp), %r12
	xorl	%esi, %esi
	movq	8(%r12), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	%rax, %r12
	movq	-2424(%rbp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	-2424(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L5015
.L2720:
	movq	-2424(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -2392(%rbp)
	movq	%r12, 8(%rax)
	movq	-2392(%rbp), %r11
	movq	%rbx, 16(%r11)
	jmp	.L2713
.L5015:
	cmpq	16(%rsi), %rax
	jne	.L2720
	jmp	.L2713
	.p2align 6,,7
.L5001:
	cmpb	$51, 2(%rbx)
	je	.L2711
	movq	8(%rbx), %r12
	cmpw	$71, (%r12)
	je	.L5016
.L2711:
	cmpl	$66, %eax
	jne	.L2714
	movq	-2424(%rbp), %r8
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	call	protect_from_queue
	movq	-2424(%rbp), %rdx
	movq	%rax, %rbx
	cmpq	8(%rdx), %rax
	je	.L2713
	movq	%rdx, %rdi
	call	copy_rtx
	movq	%rax, -2392(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L2713
.L5016:
	movq	8(%r12), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L2712
	movq	-2424(%rbp), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -2392(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L2713
.L2712:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L4599:
	movq	%rax, -2392(%rbp)
	jmp	.L2713
	.p2align 6,,7
.L2710:
	movq	-2424(%rbp), %rdx
	cmpq	$0, 16(%rdx)
	je	.L5017
	movq	-2424(%rbp), %rdi
	movq	24(%rdi), %r15
	testq	%r15, %r15
	movq	%r15, -2392(%rbp)
	jne	.L2713
	movq	-2424(%rbp), %r12
	movq	8(%r12), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rcx
	movq	%rcx, -2392(%rbp)
	jmp	.L2713
.L5017:
	movq	8(%rdx), %rdi
	call	copy_to_reg
	jmp	.L4599
	.p2align 6,,7
.L2705:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L5018
.L2707:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -2384(%rbp)
	movq	%r12, 8(%rax)
	movq	-2384(%rbp), %rcx
	movq	%rbx, 16(%rcx)
	jmp	.L2700
.L5018:
	cmpq	16(%r13), %rax
	jne	.L2707
	jmp	.L2700
	.p2align 6,,7
.L5000:
	jne	.L2701
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L2700
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -2384(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L2700
	.p2align 6,,7
.L2697:
	testq	%rcx, %rcx
	je	.L5019
	movq	24(%r13), %rdx
	testq	%rdx, %rdx
	movq	%rdx, -2384(%rbp)
	jne	.L2700
	movq	8(%r13), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rbx
	movq	%rbx, -2384(%rbp)
	jmp	.L2700
.L5019:
	movq	8(%r13), %rdi
	call	copy_to_reg
	movq	%rax, -2384(%rbp)
	jmp	.L2700
	.p2align 6,,7
.L2690:
	testq	%rcx, %rcx
	movl	$8, -2372(%rbp)
	je	.L2686
	movl	32(%rcx), %edi
	movl	%edi, -2372(%rbp)
	jmp	.L2686
.L2689:
	cmpl	$7, %edx
	ja	.L2685
	jmp	.L2690
.L4998:
	movq	8(%r15), %rdi
	call	int_size_in_bytes
	cmpw	$39, (%r13)
	movl	%eax, -1244(%rbp)
	jne	.L4761
	movq	8(%r13), %rcx
	movq	8(%rcx), %r15
	movl	(%rcx), %r14d
	cmpq	$0, 8(%r15)
	movslq	%r14d,%r12
	sete	%r8b
	leaq	15(,%r12,8), %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	leaq	48(%rsp), %r9
	movzbl	%r8b, %r10d
	movq	%r9, -1256(%rbp)
	movl	%r10d, -2368(%rbp)
	movl	-2368(%rbp), %eax
	cmpl	%r14d, %eax
	movl	%eax, -2360(%rbp)
	jge	.L4329
.L2669:
	movslq	-2360(%rbp),%rdx
	movl	-1244(%rbp), %eax
	testl	%eax, %eax
	movq	8(%rcx,%rdx,8), %r11
	movq	%rdx, -1264(%rbp)
	movq	8(%r11), %rdi
	movq	16(%r11), %rcx
	movzbl	2(%rdi), %r14d
	movq	8(%rcx), %r15
	movslq	%r14d,%rsi
	movzbl	mode_size(%rsi), %ebx
	movq	%rsi, -1272(%rbp)
	movl	%ebx, -2364(%rbp)
	js	.L2642
	movslq	-1244(%rbp),%r9
	mov	%ebx, %r12d
	leaq	(%r12,%r15), %rbx
	cmpq	%r9, %rbx
	jle	.L2642
	movl	-1244(%rbp), %eax
	subl	%r15d, %eax
	movl	%eax, -2364(%rbp)
	je	.L4760
.L2642:
	movq	-2424(%rbp), %r12
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L4510
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L2646
	cmpw	$54, %dx
	je	.L2646
	cmpw	$55, %dx
	je	.L2646
	cmpw	$58, %dx
	je	.L2646
	cmpw	$134, %dx
	je	.L2646
	cmpw	$56, %dx
	je	.L2646
	cmpw	$140, %dx
	je	.L2646
.L2645:
	movq	-2424(%rbp), %rcx
	movl	%r14d, %edi
	movzbl	2(%rcx), %eax
	testb	%al, %al
	je	.L4597
	movzbl	%al, %edi
.L4597:
	call	gen_reg_rtx
	movq	-2424(%rbp), %rsi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	emit_move_insn
	movzwl	(%r12), %edx
.L2644:
	cmpw	$66, %dx
	je	.L4510
.L2649:
	cmpw	$65, %dx
	je	.L5020
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L2666
	cmpw	$54, %dx
	je	.L2666
	cmpw	$55, %dx
	je	.L2666
	cmpw	$58, %dx
	je	.L2666
	cmpw	$134, %dx
	je	.L2666
	cmpw	$56, %dx
	je	.L2666
	cmpw	$140, %dx
	je	.L2666
	cmpw	$61, %dx
	je	.L5021
.L2665:
	movslq	-1244(%rbp),%r9
	movl	-2364(%rbp), %r10d
	leaq	0(,%r15,8), %rdx
	movq	%r12, %rdi
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r14d, (%rsp)
	sall	$3, %r10d
	movq	%r9, 8(%rsp)
	mov	%r10d, %esi
	movl	%r14d, %r9d
	call	extract_bit_field
.L4598:
	movq	-1264(%rbp), %r12
	movq	-1256(%rbp), %r8
	movq	%rax, (%r8,%r12,8)
.L2640:
	incl	-2360(%rbp)
	movq	8(%r13), %rcx
	movl	-2360(%rbp), %eax
	cmpl	(%rcx), %eax
	jl	.L2669
.L4329:
	movq	cfun(%rip), %r15
	movq	16(%r15), %r11
	movq	40(%r11), %rbx
	testq	%rbx, %rbx
	je	.L4331
.L2675:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L5022
	call	emit_insn
	movq	%rax, 16(%rbx)
.L2674:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %rdi
	movq	16(%rdx), %r14
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%r14)
	jne	.L2675
	movq	8(%r13), %rcx
.L4331:
	movl	-2368(%rbp), %ebx
	cmpl	(%rcx), %ebx
	jge	.L2073
.L2681:
	movslq	-2368(%rbp),%r12
	movq	-1256(%rbp), %r8
	salq	$3, %r12
	movq	8(%r12,%rcx), %rax
	movq	(%r8,%r12), %rsi
	movq	8(%rax), %rdi
	call	emit_move_insn
	incl	-2368(%rbp)
	movq	8(%r13), %r10
	movl	-2368(%rbp), %r9d
	cmpl	(%r10), %r9d
	movq	%r10, %rcx
	jl	.L2681
	jmp	.L2073
.L5022:
	movq	8(%rdi), %rsi
	movq	8(%rsi), %rcx
	movq	%rcx, 16(%rbx)
	call	emit_insn
	jmp	.L2674
.L5021:
	movzbl	2(%r12), %edi
	cmpl	%r14d, %edi
	jne	.L2665
.L2666:
	movq	-1264(%rbp), %rdx
	movq	-1256(%rbp), %r14
	movq	%r12, (%r14,%rdx,8)
	jmp	.L2640
.L5020:
	testq	%r15, %r15
	jne	.L4469
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %rsi
	movzbl	mode_size(%rsi), %ebx
	cmpl	%ebx, -2364(%rbp)
	je	.L2655
.L2656:
	movzbq	2(%rdx), %r11
	movzbq	mode_size(%r11), %rcx
	cmpq	%rcx, %r15
	je	.L5023
.L2654:
	testq	%r15, %r15
	jne	.L3574
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbx
	movzbq	mode_size(%rbx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %r15
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r15, %rdi
	movl	%r14d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	jmp	.L4598
.L5023:
	movq	16(%r12), %r9
	movzbq	2(%r9), %rdx
	movzbl	mode_size(%rdx), %edi
	cmpl	%edi, -2364(%rbp)
	jne	.L2654
.L2655:
	xorl	%r10d, %r10d
	movq	-1264(%rbp), %r8
	movq	-1256(%rbp), %rax
	testq	%r15, %r15
	setne	%r10b
	leaq	(%rax,%r8,8), %rbx
	movq	8(%r12,%r10,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L2640
	cmpw	$54, %dx
	je	.L2640
	cmpw	$55, %dx
	je	.L2640
	cmpw	$58, %dx
	je	.L2640
	cmpw	$134, %dx
	je	.L2640
	cmpw	$56, %dx
	je	.L2640
	cmpw	$140, %dx
	je	.L2640
	cmpw	$61, %dx
	je	.L5024
.L2660:
	movslq	-1244(%rbp),%rcx
	movl	-2364(%rbp), %r11d
	movl	%r14d, (%rsp)
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	movl	%r14d, %r9d
	sall	$3, %r11d
	movq	%rcx, 8(%rsp)
	mov	%r11d, %esi
	movl	$1, %ecx
	movq	(%rbx), %rdi
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L2640
.L5024:
	movzbl	2(%rcx), %r12d
	cmpl	%r14d, %r12d
	jne	.L2660
	jmp	.L2640
	.p2align 6,,7
.L4469:
	movq	8(%r12), %rdx
	jmp	.L2656
.L4510:
	movl	%r14d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L2650
	cmpl	%eax, 32(%rdx)
	jae	.L2651
.L4468:
	movzwl	(%r12), %edx
	jmp	.L2649
.L2651:
	movl	%r14d, %edi
	leaq	0(,%r15,8), %rbx
	call	get_mode_alignment
	mov	%eax, %edi
	movq	%rbx, %rax
	cqto
	idivq	%rdi
	testq	%rdx, %rdx
	jne	.L4468
	movq	-1272(%rbp), %r9
	movzbl	mode_size(%r9), %edx
	cmpl	%edx, -2364(%rbp)
	jne	.L4468
	movl	%r14d, %edi
	call	gen_reg_rtx
	movl	$1, %ecx
	movq	%r15, %rdx
	movq	-1264(%rbp), %r8
	movq	-1256(%rbp), %r10
	movq	%r12, %rdi
	movl	%r14d, %esi
	leaq	(%r10,%r8,8), %rbx
	movl	$1, %r8d
	movq	%rax, (%rbx)
	call	adjust_address_1
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L2640
	.p2align 6,,7
.L2650:
	cmpl	$8, %eax
	ja	.L4468
	jmp	.L2651
.L2646:
	movq	-2424(%rbp), %rsi
	movzbl	2(%rsi), %ecx
	movzbl	%cl, %r8d
	cmpl	%r14d, %r8d
	je	.L2644
	testb	%cl, %cl
	je	.L2644
	jmp	.L2645
.L4997:
	cmpb	$29, 16(%r15)
	jne	.L2097
	movq	%r15, %rdi
	call	expr_size
	cmpw	$54, (%rax)
	movq	%rax, -2240(%rbp)
	je	.L5025
.L2098:
	movq	sizetype_tab(%rip), %rdi
	movq	-2240(%rbp), %rsi
	call	make_tree
	xorl	%esi, %esi
	movslq	32(%r15),%rdi
	movq	%rax, %r12
	call	size_int_wide
	movq	%r12, %rsi
	movl	$78, %edi
	movq	%rax, %rdx
	call	size_binop
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	movq	%rax, -1168(%rbp)
	call	expand_expr
	xorl	%edx, %edx
	movl	ptr_mode(%rip), %edi
	movq	%rax, %rsi
	movq	$0, -2328(%rbp)
	call	convert_to_mode
	movl	$8, %edx
	movq	-2424(%rbp), %r14
	movq	%rax, -2272(%rbp)
	movq	%r13, -2280(%rbp)
	movq	%rax, -2296(%rbp)
	movq	%r14, -2288(%rbp)
	movq	16(%r13), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L2301
	movl	32(%rax), %edx
.L2301:
	movq	-2424(%rbp), %r11
	movq	16(%r11), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L2302
	cmpl	32(%rax), %edx
	jb	.L2303
.L2298:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L2299
	movl	32(%rcx), %r15d
.L2299:
	cmpb	$51, 2(%r13)
	jne	.L4766
	movq	-2424(%rbp), %rax
	cmpb	$51, 2(%rax)
	jne	.L4765
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L2310
	cmpl	$66, %eax
	je	.L5026
.L2314:
	cmpl	$75, %eax
	je	.L2318
	cmpl	$78, %eax
	je	.L2318
.L2313:
	movq	-2424(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L2323
	cmpl	$66, %eax
	je	.L5027
.L2327:
	cmpl	$75, %eax
	je	.L2331
	cmpl	$78, %eax
	je	.L2331
.L2326:
	movq	-2272(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L2336
	cmpl	$66, %eax
	je	.L5028
.L2340:
	cmpl	$75, %eax
	je	.L2344
	cmpl	$78, %eax
	je	.L2344
.L2339:
	movq	-2280(%rbp), %rsi
	cmpw	$66, (%rsi)
	jne	.L4764
	movq	-2288(%rbp), %rax
	cmpw	$66, (%rax)
	jne	.L4763
	cmpq	$0, -2296(%rbp)
	je	.L4762
	movq	-2296(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L5029
.L2352:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -1184(%rbp)
	testl	%r12d, %r12d
	je	.L4313
.L2485:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L2471
	movq	-2296(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L5030
.L2475:
	testb	$2, target_flags+3(%rip)
	je	.L2476
	cmpw	$63, mode_bitsize(%r15,%r15)
.L4591:
	jbe	.L2471
.L2474:
	movslq	%edx,%r10
	leaq	(%r10,%r10,4), %rsi
	movq	%r10, -1192(%rbp)
	movq	insn_data+24(,%rsi,8), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L2478
	movq	-2280(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L2471
.L2478:
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L5031
.L2479:
	movq	72(%r14), %rax
	testq	%rax, %rax
	je	.L2480
	xorl	%esi, %esi
	movq	-1184(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L2471
.L2480:
	call	get_last_insn
	movl	$1, %edx
	movq	-2296(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -1200(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r14), %rax
	testq	%rax, %rax
	jne	.L5032
.L2481:
	movq	-1192(%rbp), %rdx
	movq	-2280(%rbp), %rdi
	xorl	%eax, %eax
	movq	-2288(%rbp), %rsi
	movq	-1184(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L4498
	movq	-1200(%rbp), %rdi
	call	delete_insns_since
.L2471:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L2485
.L4313:
	testb	$2, target_flags+3(%rip)
	movq	-2280(%rbp), %r9
	movl	$0, volatile_ok(%rip)
	setne	%r14b
	movq	8(%r9), %rsi
	movzbl	%r14b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%cl
	movq	%rax, %r14
	movq	-2288(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%cl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-2296(%rbp), %rsi
	movq	sizetype_tab(%rip), %r11
	movq	%rax, %rbx
	movzbl	61(%r11), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L5033
.L2494:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %rcx
	movq	8(%rdx), %rdi
	movq	(%rcx), %r11
	movq	$0, (%r11)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r15
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r15), %rbx
	movq	8(%rbx), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	jne	.L5034
.L2483:
	movq	-2272(%rbp), %rbx
	cmpw	$54, (%rbx)
	je	.L5035
	movq	sizetype_tab(%rip), %r9
	movq	-2272(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	optab_table+16(%rip), %rsi
	movq	-2240(%rbp), %rdx
	movzbl	61(%r9), %r12d
	xorl	%r9d, %r9d
	movl	$3, (%rsp)
	shrb	$1, %r12b
	movzbl	%r12b, %edi
	call	expand_binop
	movq	-1168(%rbp), %rdi
	movq	%rax, %rbx
	call	highest_pow2_factor
	movq	-2272(%rbp), %rsi
	movq	%r13, %rdi
	movq	%rax, %rdx
	call	offset_address
	movq	%rax, %r13
	call	gen_label_rtx
	xorl	%r9d, %r9d
	movq	%rax, -2328(%rbp)
	movq	const_int_rtx+512(%rip), %rsi
	movq	%rbx, %rdi
	movzbl	2(%rbx), %r8d
	movl	$107, %edx
	xorl	%ecx, %ecx
	movq	%rax, (%rsp)
	call	emit_cmp_and_jump_insns
.L2497:
	cmpq	const_int_rtx+512(%rip), %rbx
	je	.L2498
	cmpw	$66, (%r13)
	movq	%r13, -2344(%rbp)
	je	.L5036
	movzbl	2(%r13), %edi
	call	get_mode_alignment
.L4592:
	movl	%eax, -2332(%rbp)
.L2500:
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L2503
	cmpw	$54, (%rbx)
	je	.L5037
.L2503:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L2505
	cmpl	$66, %eax
	je	.L5038
.L2509:
	cmpl	$75, %eax
	je	.L2513
	cmpl	$78, %eax
	je	.L2513
.L2508:
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L2518
	cmpl	$66, %eax
	je	.L5039
.L2522:
	cmpl	$75, %eax
	je	.L2526
	cmpl	$78, %eax
	je	.L2526
.L2521:
	cmpw	$54, (%rbx)
	je	.L5040
.L2531:
	shrl	$3, -2332(%rbp)
	xorl	%edi, %edi
	mov	-2332(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r14d
	movq	%rax, -1216(%rbp)
	testl	%r14d, %r14d
	je	.L4327
.L2625:
	movslq	%r14d,%rcx
	movl	clrstr_optab(,%rcx,4), %edx
	movq	%rcx, -1224(%rbp)
	cmpl	$1317, %edx
	je	.L2612
	cmpw	$54, (%rbx)
	je	.L5041
.L2616:
	testb	$2, target_flags+3(%rip)
	je	.L2617
	movq	-1224(%rbp), %rax
	cmpw	$63, mode_bitsize(%rax,%rax)
.L4595:
	jbe	.L2612
.L2615:
	movslq	%edx,%r8
	leaq	(%r8,%r8,4), %r10
	movq	%r8, -1232(%rbp)
	movq	insn_data+24(,%r10,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L2619
	movq	-2344(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L2612
.L2619:
	movq	48(%r15), %rax
	testq	%rax, %rax
	je	.L2620
	xorl	%esi, %esi
	movq	-1216(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L2612
.L2620:
	call	get_last_insn
	movl	$1, %edx
	movq	%rbx, %rsi
	movl	%r14d, %edi
	movq	%rax, -1240(%rbp)
	call	convert_to_mode
	movq	%rax, %r12
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L5042
.L2621:
	movq	-1232(%rbp), %rsi
	movq	-2344(%rbp), %rdi
	xorl	%eax, %eax
	movq	-1216(%rbp), %rdx
	leaq	(%rsi,%rsi,4), %r14
	movq	%r12, %rsi
	call	*insn_data+16(,%r14,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L4596
	movq	-1240(%rbp), %rdi
	call	delete_insns_since
.L2612:
	movq	-1224(%rbp), %rdx
	movzbl	mode_wider_mode(%rdx), %r14d
	testl	%r14d, %r14d
	jne	.L2625
.L4327:
	testb	$2, target_flags+3(%rip)
	movq	-2344(%rbp), %rcx
	setne	%r9b
	movq	8(%rcx), %rsi
	movzbl	%r9b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%rbx, %rsi
	movq	sizetype_tab(%rip), %rdi
	movq	%rax, %r14
	movzbl	61(%rdi), %r11d
	shrb	$1, %r11b
	movzbl	%r11b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.0(%rip)
	movq	%rax, %r15
	je	.L5043
.L2630:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	const_int_rtx+512(%rip), %rsi
	movq	integer_types+40(%rip), %rdi
	movq	%rax, %r12
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.0(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %rdi
	movq	(%rdi), %r11
	movq	8(%rdx), %rdi
	movq	$0, (%r11)
	call	build_pointer_type
	movq	fn.0(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.0(%rip), %rsi
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%rsi), %r15
	movq	8(%r15), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	jne	.L5044
.L2498:
	cmpq	$0, -2328(%rbp)
	je	.L2073
	movq	-2328(%rbp), %rdi
	call	emit_label
	jmp	.L2073
.L5044:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
.L4596:
	call	emit_insn
	jmp	.L2498
.L5043:
	movl	$.LC7, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.0(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.0(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.0, %edi
	movq	%rax, fn.0(%rip)
	call	ggc_add_tree_root
	movq	fn.0(%rip), %r8
	xorl	%esi, %esi
	orb	$1, 49(%r8)
	movq	fn.0(%rip), %r10
	orb	$8, 18(%r10)
	movq	fn.0(%rip), %r12
	orb	$64, 50(%r12)
	movq	fn.0(%rip), %rbx
	orb	$2, 18(%rbx)
	movq	fn.0(%rip), %rdi
	call	make_decl_rtl
	movq	fn.0(%rip), %rdi
	call	assemble_external
	jmp	.L2630
.L5042:
	movq	%r12, %rdi
	movl	%r14d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L2621
	movq	%r12, %rsi
	movl	%r14d, %edi
	call	copy_to_mode_reg
	movq	%rax, %r12
	jmp	.L2621
	.p2align 6,,7
.L2617:
	movq	-1224(%rbp), %r15
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L4595
.L5041:
	movq	mode_mask_array(,%rcx,8), %r12
	shrq	$1, %r12
	cmpq	%r12, 8(%rbx)
	jbe	.L2615
	jmp	.L2616
.L5040:
	movq	8(%rbx), %r14
	xorl	%r15d, %r15d
	movl	$17, %esi
.L2544:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4316
.L2541:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L2541
.L4316:
	testl	%edi, %edi
	je	.L2534
	movslq	%edi,%r12
	movq	%r12, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L2543
	call	get_mode_alignment
	movl	$128, %r9d
	cmpl	%eax, %r9d
	jb	.L2543
	movzbq	mode_size(%r12), %r8
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%r8
	addq	%rax, %r15
	movq	%rdx, %r14
.L2543:
	movzbq	mode_size(%r12), %rsi
	cmpq	$1, %rsi
	ja	.L2544
.L2534:
	testq	%r14, %r14
	jne	.L4757
	movl	optimize_size(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L2547
	movq	ix86_cost(%rip), %r10
	mov	40(%r10), %esi
	cmpq	%rsi, %r15
	jae	.L2531
.L2548:
	movq	8(%rbx), %rcx
	movq	-2344(%rbp), %r15
	leaq	-464(%rbp), %r12
	testb	$2, target_flags+3(%rip)
	movq	$clear_by_pieces_1, -424(%rbp)
	movq	$0, -416(%rbp)
	setne	%dl
	xorl	%esi, %esi
	movq	%rcx, -440(%rbp)
	movq	%r15, -464(%rbp)
	leaq	16(%r12), %rcx
	movq	8(%r15), %r8
	movq	$0, -432(%rbp)
	movl	$0, -2356(%rbp)
	movzbl	%dl, %r11d 
	movq	%r8, -456(%rbp)
	leaq	5(,%r11,4), %r15
	movzwl	(%r8), %edx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L2552
	cmpw	$99, %dx
	je	.L2552
	cmpw	$98, %dx
	je	.L2552
.L2551:
	movl	%esi, (%rcx)
	movl	$0, 20(%r12)
	leaq	56(%r12), %rdx
	movzwl	(%r8), %eax
	xorl	%ecx, %ecx
	cmpw	$96, %ax
	je	.L2554
	cmpw	$98, %ax
	je	.L2554
.L2553:
	movl	%ecx, (%rdx)
	movl	56(%r12), %eax
	testl	%eax, %eax
	je	.L2555
	movq	24(%r12), %r9
	movq	%r9, 32(%r12)
.L2555:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L2556
	movq	24(%r12), %r14
	movq	$0, -2352(%rbp)
	movl	$17, %esi
.L2569:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4319
.L2566:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L2566
.L4319:
	testl	%edi, %edi
	je	.L2559
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L2568
	movq	%r8, -2648(%rbp)
	call	get_mode_alignment
	movq	-2648(%rbp), %r8
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L2568
	movzbq	mode_size(%rbx), %rcx
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%rcx
	addq	%rax, -2352(%rbp)
	movq	%rdx, %r14
.L2568:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L2569
.L2559:
	testq	%r14, %r14
	jne	.L4757
	cmpq	$2, -2352(%rbp)
	jbe	.L2556
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4321
.L2577:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rdx
	cmpq	%r15, %rdx
	cmovae	-2356(%rbp), %ecx
	movl	%ecx, -2356(%rbp)
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L2577
.L4321:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L2556
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L2581
	cmpw	$54, %dx
	je	.L2581
	cmpw	$55, %dx
	je	.L2581
	cmpw	$58, %dx
	je	.L2581
	cmpw	$134, %dx
	je	.L2581
	cmpw	$56, %dx
	je	.L2581
	cmpw	$140, %dx
	je	.L2581
.L2556:
	cmpq	$1, %r15
	jbe	.L2584
.L2605:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4324
.L2591:
	movslq	%ecx,%r8
	movzbq	mode_size(%r8), %rbx
	cmpq	%r15, %rbx
	cmovae	-2356(%rbp), %ecx
	movl	%ecx, -2356(%rbp)
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L2591
.L4324:
	movl	-2356(%rbp), %eax
	testl	%eax, %eax
	je	.L2584
	movslq	-2356(%rbp),%r15
	movq	%r15, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	movl	8(%rsi), %ebx
	cmpl	$1317, %ebx
	je	.L2593
	movl	-2356(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L2593
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rcx
	leaq	(%rcx,%rcx,4), %r11
	cmpq	%rdx, 24(%r12)
	movq	insn_data+16(,%r11,8), %r14
	movq	%r14, -1208(%rbp)
	movq	%rdx, %r14
	jb	.L2593
	movl	56(%r12), %ecx
.L2603:
	testl	%ecx, %ecx
	je	.L2597
	subq	%rdx, 32(%r12)
.L2597:
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L2598
	movq	(%r12), %rdi
	movl	-2356(%rbp), %esi
	movl	$1, %r8d
	movq	8(%r12), %rdx
	movq	32(%r12), %rcx
	call	adjust_automodify_address_1
.L4594:
	movl	-2356(%rbp), %edx
	movq	%rax, %rbx
	movq	48(%r12), %rdi
	movq	32(%r12), %rsi
	call	*40(%r12)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	*-1208(%rbp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L2602
	addq	%r14, 32(%r12)
.L2602:
	movq	24(%r12), %r9
	movq	%r14, %rdx
	subq	%r14, %r9
	cmpq	%r14, %r9
	movq	%r9, 24(%r12)
	jae	.L2603
.L2593:
	movzbq	mode_size(%r15), %r15
	cmpq	$1, %r15
	ja	.L2605
.L2584:
	cmpq	$0, 24(%r12)
	je	.L2498
	jmp	.L4756
.L2598:
	movq	(%r12), %rdi
	movl	-2356(%rbp), %esi
	movl	$1, %ecx
	movq	32(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L4594
.L2581:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, 8(%r12)
	jmp	.L2556
.L2554:
	movl	$1, %ecx
	jmp	.L2553
.L2552:
	movl	$1, %esi
	jmp	.L2551
.L2547:
	cmpq	$2, %r15
	ja	.L2531
	jmp	.L2548
.L2526:
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbx), %rdi
	movq	%rax, %r14
	call	protect_from_queue
	cmpq	8(%rbx), %r14
	movq	%rax, %r12
	je	.L5045
.L2528:
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r14, 8(%rax)
	movq	%r12, 16(%rax)
	jmp	.L2521
.L5045:
	cmpq	16(%rbx), %rax
	jne	.L2528
	jmp	.L2521
.L5039:
	cmpb	$51, 2(%rbx)
	je	.L2519
	movq	8(%rbx), %r14
	cmpw	$71, (%r14)
	je	.L5046
.L2519:
	cmpl	$66, %eax
	jne	.L2522
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%rbx), %rax
	movq	%rax, %r12
	je	.L2521
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r12, 8(%rax)
	jmp	.L2521
.L5046:
	movq	8(%r14), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r14)
	movq	%rax, %r12
	je	.L2520
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L2521
.L2520:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L4593:
	movq	%rax, %rbx
	jmp	.L2521
.L2518:
	cmpq	$0, 16(%rbx)
	je	.L5047
	movq	24(%rbx), %rax
	testq	%rax, %rax
	jne	.L4593
	movq	8(%rbx), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%rbx), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	16(%rbx), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbx), %rbx
	jmp	.L2521
.L5047:
	movq	8(%rbx), %rdi
	call	copy_to_reg
	jmp	.L4593
.L2513:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r14
	call	protect_from_queue
	cmpq	8(%r13), %r14
	movq	%rax, %r12
	je	.L5048
.L2515:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -2344(%rbp)
	movq	%r14, 8(%rax)
	movq	-2344(%rbp), %rax
	movq	%r12, 16(%rax)
	jmp	.L2508
.L5048:
	cmpq	16(%r13), %rax
	jne	.L2515
	jmp	.L2508
.L5038:
	jne	.L2509
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %r12
	je	.L2508
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -2344(%rbp)
	movq	%r12, 8(%rax)
	jmp	.L2508
.L2505:
	cmpq	$0, 16(%r13)
	je	.L5049
	movq	24(%r13), %rdi
	testq	%rdi, %rdi
	movq	%rdi, -2344(%rbp)
	jne	.L2508
	movq	8(%r13), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r8
	movq	%r8, -2344(%rbp)
	jmp	.L2508
.L5049:
	movq	8(%r13), %rdi
	call	copy_to_reg
	movq	%rax, -2344(%rbp)
	jmp	.L2508
.L5037:
	movzbl	%al, %edx 
	movzbl	mode_size(%rdx), %r14d
	cmpl	8(%rbx), %r14d
	jne	.L2503
	movq	const_tiny_rtx(,%rdx,8), %rsi
	movq	%r13, %rdi
	call	emit_move_insn
	jmp	.L2498
.L5036:
	movq	16(%r13), %rax
	movl	$8, -2332(%rbp)
	testq	%rax, %rax
	je	.L2500
	movl	32(%rax), %eax
	jmp	.L4592
.L5035:
	movq	8(%rbx), %rsi
	movq	-2240(%rbp), %rdi
	negq	%rsi
	call	plus_constant_wide
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r13, %rdi
	movl	$51, %esi
	movq	%rax, %rbx
	movq	-2272(%rbp), %r13
	movq	8(%r13), %rdx
	call	adjust_address_1
	movq	%rax, %r13
	jmp	.L2497
.L5034:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L2483
.L5033:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r10
	orb	$1, 49(%r10)
	movq	fn.1(%rip), %rsi
	orb	$8, 18(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %r8
	orb	$64, 50(%r8)
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L2494
.L4498:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L2483
.L5032:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L2481
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L2481
.L5031:
	movq	-2288(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L2471
	jmp	.L2479
	.p2align 6,,7
.L2476:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L4591
.L5030:
	movq	mode_mask_array(,%r15,8), %r8
	shrq	$1, %r8
	cmpq	%r8, 8(%rsi)
	jbe	.L2474
	jmp	.L2475
.L5029:
	movq	8(%rcx), %r12
	xorl	%r14d, %r14d
	movl	$17, %esi
.L2365:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4302
.L2362:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %r8
	cmpq	%rsi, %r8
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L2362
.L4302:
	testl	%edi, %edi
	je	.L2355
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L2364
	call	get_mode_alignment
	movl	$128, %edx
	cmpl	%eax, %edx
	jb	.L2364
	movzbq	mode_size(%rbx), %r11
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r11
	addq	%rax, %r14
	movq	%rdx, %r12
.L2364:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L2365
.L2355:
	testq	%r12, %r12
	jne	.L4757
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L2368
	movq	ix86_cost(%rip), %r9
	mov	40(%r9), %ebx
	cmpq	%rbx, %r14
	jae	.L2352
.L2369:
	movq	-2296(%rbp), %r8
	movq	-2288(%rbp), %rdi
	movq	-2280(%rbp), %rdx
	movq	-2280(%rbp), %rsi
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r14b
	movq	8(%rdi), %r8
	movq	$0, -568(%rbp)
	movl	$0, -2308(%rbp)
	movq	%r8, -592(%rbp)
	movzbl	%r14b, %ecx
	movq	8(%rdx), %r10
	movq	%rsi, -624(%rbp)
	leal	5(,%rcx,4), %r14d
	xorl	%ecx, %ecx
	movq	%r10, -2304(%rbp)
	movq	-2304(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L2374
	cmpw	$99, %dx
	je	.L2374
	cmpw	$98, %dx
	je	.L2374
.L2373:
	movq	-2304(%rbp), %r11
	movl	%ecx, -608(%rbp)
	xorl	%edx, %edx
	movzwl	(%r11), %eax
	cmpw	$96, %ax
	je	.L2376
	cmpw	$98, %ax
	je	.L2376
.L2375:
	movq	-2304(%rbp), %r15
	movq	-2288(%rbp), %r9
	movl	%edx, -560(%rbp)
	xorl	%ecx, %ecx
	movq	%r15, -616(%rbp)
	movq	%r9, -600(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L2379
	cmpw	$99, %dx
	je	.L2379
	cmpw	$98, %dx
	je	.L2379
.L2378:
	movl	-560(%rbp), %eax
	movl	%ecx, -584(%rbp)
	movl	$0, -580(%rbp)
	movl	$0, -604(%rbp)
	testl	%eax, %eax
	je	.L2380
	movq	%r12, -568(%rbp)
.L2380:
	movl	-584(%rbp), %eax
	movq	%r12, -576(%rbp)
	testl	%eax, %eax
	je	.L2382
	movl	-608(%rbp), %esi
	testl	%esi, %esi
	jne	.L2381
.L2382:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L2395:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4305
.L2392:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L2392
.L4305:
	testl	%edi, %edi
	je	.L2385
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L2394
	movq	%r8, -2648(%rbp)
	call	get_mode_alignment
	movq	-2648(%rbp), %r8
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L2394
	movzbq	mode_size(%rbx), %r9
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r9
	addq	%rax, %r15
	movq	%rdx, %r12
.L2394:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L2395
.L2385:
	testq	%r12, %r12
	jne	.L4757
	cmpq	$2, %r15
	jbe	.L2381
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4307
.L2403:
	movslq	%ecx,%rbx
	movzbl	mode_size(%rbx), %r15d
	cmpl	%r14d, %r15d
	cmovae	-2308(%rbp), %ecx
	movl	%ecx, -2308(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L2403
.L4307:
	movl	-584(%rbp), %eax
	testl	%eax, %eax
	jne	.L2409
	movzwl	(%r8), %edx
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L2407
	cmpw	$54, %dx
	je	.L2407
	cmpw	$55, %dx
	je	.L2407
	cmpw	$58, %dx
	je	.L2407
	cmpw	$134, %dx
	je	.L2407
	cmpw	$56, %dx
	je	.L2407
	cmpw	$140, %dx
	je	.L2407
.L2409:
	movl	-608(%rbp), %r8d
	testl	%r8d, %r8d
	jne	.L2381
	movq	-2304(%rbp), %rcx
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L2411
	cmpw	$54, %dx
	je	.L2411
	cmpw	$55, %dx
	je	.L2411
	cmpw	$58, %dx
	je	.L2411
	cmpw	$134, %dx
	je	.L2411
	cmpw	$56, %dx
	je	.L2411
	cmpw	$140, %dx
	je	.L2411
.L2381:
	cmpl	$1, %r14d
	jbe	.L2414
.L2465:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4310
.L2421:
	movslq	%ecx,%rdi
	movzbl	mode_size(%rdi), %edx
	cmpl	%r14d, %edx
	cmovae	-2308(%rbp), %ecx
	movl	%ecx, -2308(%rbp)
	movzbl	mode_wider_mode(%rdi), %ecx
	testl	%ecx, %ecx
	jne	.L2421
.L4310:
	movl	-2308(%rbp), %r14d
	testl	%r14d, %r14d
	je	.L2414
	movslq	-2308(%rbp),%r15
	movq	%r15, %r12
	salq	$4, %r12
	addq	optab_table+240(%rip), %r12
	movl	8(%r12), %ebx
	cmpl	$1317, %ebx
	je	.L2423
	movl	-2308(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r11d
	cmpl	%eax, %r11d
	jb	.L2423
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rsi
	leaq	-624(%rbp), %r12
	leaq	(%rsi,%rsi,4), %rbx
	cmpq	%rdx, -576(%rbp)
	movq	$0, -2320(%rbp)
	movq	insn_data+16(,%rbx,8), %r9
	movq	%rdx, -1640(%rbp)
	movq	%r9, -1176(%rbp)
	jb	.L2423
	movl	-560(%rbp), %ecx
.L2463:
	testl	%ecx, %ecx
	je	.L2427
	subq	%rdx, 56(%r12)
.L2427:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L2428
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L2429
	movl	-2308(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L4587:
	movq	%rax, -2320(%rbp)
.L2428:
	movl	40(%r12), %r8d
	testl	%r8d, %r8d
	je	.L2431
	movq	24(%r12), %rdi
	movl	-2308(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L4588:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L5050
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L2437
	movzbl	mode_size(%r15), %r10d
	leal	7(%r10), %edx
	andl	$-8, %edx
.L2438:
	movq	cfun(%rip), %rdi
	andl	$33554432, %esi
	movq	16(%rdi), %r11
	leaq	8(%r11), %rdi
	movl	8(%r11), %ecx
	je	.L2439
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L4589:
	movq	%r15, %r9
	leal	(%rax,%rcx), %ebx
	salq	$4, %r9
	movl	%ebx, (%rdi)
	addq	optab_table+384(%rip), %r9
	movl	8(%r9), %eax
	cmpl	$1317, %eax
	je	.L2441
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rsi
	movq	insn_data+24(,%rsi,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L2442
	movq	%r14, %rdi
	movl	-2308(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L5051
.L2442:
	leaq	(%rbx,%rbx,4), %r8
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r8,8)
.L4590:
	movq	%rax, %rdi
	call	emit_insn
.L2461:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L2462
	movq	-1640(%rbp), %r14
	addq	%r14, 56(%r12)
.L2462:
	movq	48(%r12), %rbx
	movq	-1640(%rbp), %rdx
	subq	-1640(%rbp), %rbx
	cmpq	%rdx, %rbx
	movq	%rbx, 48(%r12)
	jae	.L2463
.L2423:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L2465
.L2414:
	cmpq	$0, -576(%rbp)
	je	.L2483
	jmp	.L4742
.L5051:
	movl	-2308(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L2442
.L2441:
	movzbl	mode_size(%r15), %r10d
	cmpl	%edx, %r10d
	je	.L5052
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	testb	$2, target_flags+3(%rip)
	setne	%dil
	movq	%rax, %rcx
	movzbl	%dil, %esi
	movl	$75, %edi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r11b
	movzbl	%r11b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L2449:
	movl	-2308(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%ecx, %ecx
	testq	%rcx, %rcx
	movq	%rax, %rbx
	je	.L2458
	xorl	%esi, %esi
	movq	%rax, %rdi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %r9d
	testl	%r9d, %r9d
	jne	.L5053
.L2458:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L2461
.L5053:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L2458
.L5052:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L2449
.L2439:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L4589
.L2437:
	movzbl	mode_size(%r15), %ecx
	leal	1(%rcx), %edx
	andl	$-2, %edx
	jmp	.L2438
.L5050:
	movq	%rax, %rsi
	movq	-2320(%rbp), %rdi
	xorl	%eax, %eax
	call	*-1176(%rbp)
	jmp	.L4590
.L2431:
	movq	24(%r12), %rdi
	movl	-2308(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L4588
.L2429:
	movl	-2308(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L4587
.L2411:
	movq	-2304(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -616(%rbp)
	jmp	.L2381
.L2407:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -592(%rbp)
	jmp	.L2409
.L2379:
	movl	$1, %ecx
	jmp	.L2378
.L2376:
	movl	$1, %edx
	jmp	.L2375
.L2374:
	movl	$1, %ecx
	jmp	.L2373
.L2368:
	cmpq	$2, %r14
	ja	.L2352
	jmp	.L2369
.L2344:
	movq	-2272(%rbp), %r8
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-2272(%rbp), %r10
	movq	%rax, %r12
	movq	16(%r10), %rdi
	call	protect_from_queue
	movq	-2272(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L5054
.L2346:
	movq	-2272(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -2296(%rbp)
	movq	%r12, 8(%rax)
	movq	-2296(%rbp), %rdx
	movq	%rbx, 16(%rdx)
	jmp	.L2339
.L5054:
	cmpq	16(%rcx), %rax
	jne	.L2346
	jmp	.L2339
.L5028:
	cmpb	$51, 2(%rdx)
	je	.L2337
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L5055
.L2337:
	cmpl	$66, %eax
	jne	.L2340
	movq	-2272(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	movq	-2272(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L2339
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -2296(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L2339
.L5055:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L2338
	movq	-2272(%rbp), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -2296(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L2339
.L2338:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L4586:
	movq	%rax, -2296(%rbp)
	jmp	.L2339
.L2336:
	movq	-2272(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L5056
	movq	-2272(%rbp), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	movq	%rbx, -2296(%rbp)
	jne	.L2339
	movq	-2272(%rbp), %r9
	movq	8(%r9), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	-2272(%rbp), %r14
	movq	%rax, %rdi
	movq	8(%r14), %rsi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r12
	movq	%r12, -2296(%rbp)
	jmp	.L2339
.L5056:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L4586
.L2331:
	movq	-2424(%rbp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-2424(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-2424(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L5057
.L2333:
	movq	-2424(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -2288(%rbp)
	movq	%r12, 8(%rax)
	movq	-2288(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L2326
.L5057:
	cmpq	16(%rcx), %rax
	jne	.L2333
	jmp	.L2326
.L5027:
	cmpb	$51, 2(%rdx)
	je	.L2324
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L5058
.L2324:
	cmpl	$66, %eax
	jne	.L2327
	movq	-2424(%rbp), %r8
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	call	protect_from_queue
	movq	-2424(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L2326
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -2288(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L2326
.L5058:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L2325
	movq	-2424(%rbp), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -2288(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L2326
.L2325:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L4585:
	movq	%rax, -2288(%rbp)
	jmp	.L2326
.L2323:
	movq	-2424(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L5059
	movq	-2424(%rbp), %r12
	movq	24(%r12), %r14
	testq	%r14, %r14
	movq	%r14, -2288(%rbp)
	jne	.L2326
	movq	-2424(%rbp), %rax
	movq	8(%rax), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	-2424(%rbp), %r14
	movq	%rax, %rdi
	movq	8(%r14), %rsi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r11
	movq	%r11, -2288(%rbp)
	jmp	.L2326
.L5059:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L4585
.L2318:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L5060
.L2320:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -2280(%rbp)
	movq	%r12, 8(%rax)
	movq	-2280(%rbp), %r9
	movq	%rbx, 16(%r9)
	jmp	.L2313
.L5060:
	cmpq	16(%r13), %rax
	jne	.L2320
	jmp	.L2313
.L5026:
	jne	.L2314
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L2313
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -2280(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L2313
.L2310:
	testq	%rsi, %rsi
	je	.L5061
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	movq	%rsi, -2280(%rbp)
	jne	.L2313
	movq	8(%r13), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rax
.L4584:
	movq	%rax, -2280(%rbp)
	jmp	.L2313
.L5061:
	movq	8(%r13), %rdi
	call	copy_to_reg
	jmp	.L4584
.L2303:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L2299
	movl	32(%rsi), %r15d
	jmp	.L2299
.L2302:
	cmpl	$7, %edx
	ja	.L2298
	jmp	.L2303
.L5025:
	movq	-2240(%rbp), %rax
	movslq	32(%r15),%r10
	cmpq	%r10, 8(%rax)
	jge	.L2098
	movq	-2424(%rbp), %rcx
	movq	%r13, -2224(%rbp)
	movl	$8, %edx
	movq	%rcx, -2232(%rbp)
	movq	16(%r13), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L2102
	movl	32(%rax), %edx
.L2102:
	movq	-2424(%rbp), %r11
	movq	16(%r11), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L2103
	cmpl	32(%rax), %edx
	jb	.L2104
.L2099:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L2100
	movl	32(%rcx), %r15d
.L2100:
	cmpb	$51, 2(%r13)
	jne	.L4766
	movq	-2424(%rbp), %rdx
	cmpb	$51, 2(%rdx)
	jne	.L4765
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L2111
	cmpl	$66, %eax
	je	.L5062
.L2115:
	cmpl	$75, %eax
	je	.L2119
	cmpl	$78, %eax
	je	.L2119
.L2114:
	movq	-2424(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L2124
	cmpl	$66, %eax
	je	.L5063
.L2128:
	cmpl	$75, %eax
	je	.L2132
	cmpl	$78, %eax
	je	.L2132
.L2127:
	movq	-2240(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L2137
	cmpl	$66, %eax
	je	.L5064
.L2141:
	cmpl	$75, %eax
	je	.L2145
	cmpl	$78, %eax
	je	.L2145
.L2140:
	movq	-2224(%rbp), %rdx
	cmpw	$66, (%rdx)
	jne	.L4764
	movq	-2232(%rbp), %rbx
	cmpw	$66, (%rbx)
	jne	.L4763
	cmpq	$0, -2240(%rbp)
	je	.L4762
	movq	-2240(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L5065
.L2153:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -1144(%rbp)
	testl	%r12d, %r12d
	je	.L4299
.L2286:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L2272
	movq	-2240(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L5066
.L2276:
	testb	$2, target_flags+3(%rip)
	je	.L2277
	cmpw	$63, mode_bitsize(%r15,%r15)
.L4583:
	jbe	.L2272
.L2275:
	movslq	%edx,%rcx
	leaq	(%rcx,%rcx,4), %rdi
	movq	%rcx, -1152(%rbp)
	movq	insn_data+24(,%rdi,8), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L2279
	movq	-2224(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L2272
.L2279:
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L5067
.L2280:
	movq	72(%r14), %rax
	testq	%rax, %rax
	je	.L2281
	xorl	%esi, %esi
	movq	-1144(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L2272
.L2281:
	call	get_last_insn
	movl	$1, %edx
	movq	-2240(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -1160(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r14), %rax
	testq	%rax, %rax
	jne	.L5068
.L2282:
	movq	-1152(%rbp), %r10
	movq	-2224(%rbp), %rdi
	xorl	%eax, %eax
	movq	-2232(%rbp), %rsi
	movq	%rbx, %rdx
	movq	-1144(%rbp), %rcx
	leaq	(%r10,%r10,4), %r12
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L4500
	movq	-1160(%rbp), %rdi
	call	delete_insns_since
.L2272:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L2286
.L4299:
	testb	$2, target_flags+3(%rip)
	movq	-2224(%rbp), %r11
	movl	$0, volatile_ok(%rip)
	setne	%sil
	movzbl	%sil, %edi
	movq	8(%r11), %rsi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%dl
	movq	%rax, %r14
	movq	-2232(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%dl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-2240(%rbp), %rsi
	movq	sizetype_tab(%rip), %r8
	movq	%rax, %rbx
	movzbl	61(%r8), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L5069
.L2295:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %r15
	movq	%rax, (%rbx)
	movq	(%r12), %rdx
	movq	8(%r15), %rdi
	movq	(%rdx), %r8
	movq	$0, (%r8)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r10
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r10), %rbx
	movq	8(%rbx), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	je	.L2073
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	jmp	.L4606
.L5069:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r12
	xorl	%esi, %esi
	orb	$1, 49(%r12)
	movq	fn.1(%rip), %rcx
	orb	$8, 18(%rcx)
	movq	fn.1(%rip), %rdi
	orb	$64, 50(%rdi)
	movq	fn.1(%rip), %r9
	orb	$2, 18(%r9)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L2295
.L5068:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L2282
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L2282
.L5067:
	movq	-2232(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L2272
	jmp	.L2280
.L2277:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L4583
.L5066:
	movq	mode_mask_array(,%r15,8), %r9
	shrq	$1, %r9
	cmpq	%r9, 8(%rsi)
	jbe	.L2275
	jmp	.L2276
.L5065:
	movq	8(%rcx), %r12
	xorl	%r14d, %r14d
	movl	$17, %esi
.L2166:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4288
.L2163:
	movslq	%ecx,%r8
	movzbq	mode_size(%r8), %r9
	cmpq	%rsi, %r9
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L2163
.L4288:
	testl	%edi, %edi
	je	.L2156
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L2165
	call	get_mode_alignment
	movl	$128, %r10d
	cmpl	%eax, %r10d
	jb	.L2165
	movzbq	mode_size(%rbx), %rcx
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rcx
	addq	%rax, %r14
	movq	%rdx, %r12
.L2165:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L2166
.L2156:
	testq	%r12, %r12
	jne	.L4757
	movl	optimize_size(%rip), %r11d
	testl	%r11d, %r11d
	jne	.L2169
	movq	ix86_cost(%rip), %rbx
	mov	40(%rbx), %edx
	cmpq	%rdx, %r14
	jae	.L2153
.L2170:
	movq	-2240(%rbp), %r8
	movq	-2232(%rbp), %rcx
	movq	-2224(%rbp), %r10
	movq	-2224(%rbp), %r9
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r14b
	movq	8(%rcx), %r8
	xorl	%ecx, %ecx
	movq	$0, -488(%rbp)
	movl	$0, -2252(%rbp)
	movq	%r8, -512(%rbp)
	movzbl	%r14b, %edi
	movq	8(%r10), %rsi
	movq	%r9, -544(%rbp)
	leal	5(,%rdi,4), %r14d
	movq	%rsi, -2248(%rbp)
	movq	-2248(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L2175
	cmpw	$99, %dx
	je	.L2175
	cmpw	$98, %dx
	je	.L2175
.L2174:
	movq	-2248(%rbp), %r11
	movl	%ecx, -528(%rbp)
	xorl	%edx, %edx
	movzwl	(%r11), %eax
	cmpw	$96, %ax
	je	.L2177
	cmpw	$98, %ax
	je	.L2177
.L2176:
	movl	%edx, -480(%rbp)
	movq	-2248(%rbp), %r15
	xorl	%ecx, %ecx
	movq	-2232(%rbp), %rdx
	movq	%r15, -536(%rbp)
	movq	%rdx, -520(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L2180
	cmpw	$99, %dx
	je	.L2180
	cmpw	$98, %dx
	je	.L2180
.L2179:
	movl	-480(%rbp), %eax
	movl	%ecx, -504(%rbp)
	movl	$0, -500(%rbp)
	movl	$0, -524(%rbp)
	testl	%eax, %eax
	je	.L2181
	movq	%r12, -488(%rbp)
.L2181:
	movl	-504(%rbp), %r9d
	movq	%r12, -496(%rbp)
	testl	%r9d, %r9d
	je	.L2183
	movl	-528(%rbp), %r10d
	testl	%r10d, %r10d
	jne	.L2182
.L2183:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L2196:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4291
.L2193:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L2193
.L4291:
	testl	%edi, %edi
	je	.L2186
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L2195
	movq	%r8, -2648(%rbp)
	call	get_mode_alignment
	movq	-2648(%rbp), %r8
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L2195
	movzbq	mode_size(%rbx), %r9
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r9
	addq	%rax, %r15
	movq	%rdx, %r12
.L2195:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L2196
.L2186:
	testq	%r12, %r12
	jne	.L4757
	cmpq	$2, %r15
	jbe	.L2182
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4293
.L2204:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %edx
	cmpl	%r14d, %edx
	cmovae	-2252(%rbp), %ecx
	movl	%ecx, -2252(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L2204
.L4293:
	movl	-504(%rbp), %eax
	testl	%eax, %eax
	jne	.L2210
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L2208
	cmpw	$54, %dx
	je	.L2208
	cmpw	$55, %dx
	je	.L2208
	cmpw	$58, %dx
	je	.L2208
	cmpw	$134, %dx
	je	.L2208
	cmpw	$56, %dx
	je	.L2208
	cmpw	$140, %dx
	je	.L2208
.L2210:
	movl	-528(%rbp), %r8d
	testl	%r8d, %r8d
	jne	.L2182
	movq	-2248(%rbp), %rbx
	movzwl	(%rbx), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L2212
	cmpw	$54, %dx
	je	.L2212
	cmpw	$55, %dx
	je	.L2212
	cmpw	$58, %dx
	je	.L2212
	cmpw	$134, %dx
	je	.L2212
	cmpw	$56, %dx
	je	.L2212
	cmpw	$140, %dx
	je	.L2212
.L2182:
	cmpl	$1, %r14d
	jbe	.L2215
.L2266:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4296
.L2222:
	movslq	%ecx,%rsi
	movzbl	mode_size(%rsi), %edi
	cmpl	%r14d, %edi
	cmovae	-2252(%rbp), %ecx
	movl	%ecx, -2252(%rbp)
	movzbl	mode_wider_mode(%rsi), %ecx
	testl	%ecx, %ecx
	jne	.L2222
.L4296:
	movl	-2252(%rbp), %eax
	testl	%eax, %eax
	je	.L2215
	movslq	-2252(%rbp),%r15
	movq	%r15, %r14
	salq	$4, %r14
	addq	optab_table+240(%rip), %r14
	movl	8(%r14), %ebx
	cmpl	$1317, %ebx
	je	.L2224
	movl	-2252(%rbp), %edi
	movl	$128, %r12d
	call	get_mode_alignment
	cmpl	%eax, %r12d
	jb	.L2224
	movslq	%ebx,%rdx
	leaq	-544(%rbp), %r12
	movq	$0, -2264(%rbp)
	leaq	(%rdx,%rdx,4), %r9
	movzbq	mode_size(%r15), %rdx
	cmpq	%rdx, -496(%rbp)
	movq	insn_data+16(,%r9,8), %rcx
	movq	%rdx, -1632(%rbp)
	movq	%rcx, -1136(%rbp)
	jb	.L2224
	movl	-480(%rbp), %ecx
.L2264:
	testl	%ecx, %ecx
	je	.L2228
	subq	%rdx, 56(%r12)
.L2228:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L2229
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L2230
	movl	-2252(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L4579:
	movq	%rax, -2264(%rbp)
.L2229:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L2232
	movq	24(%r12), %rdi
	movl	-2252(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L4580:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L5070
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L2238
	movzbl	mode_size(%r15), %r10d
	leal	7(%r10), %edx
	andl	$-8, %edx
.L2239:
	movq	cfun(%rip), %rbx
	andl	$33554432, %esi
	movq	16(%rbx), %r11
	leaq	8(%r11), %rdi
	movl	8(%r11), %ecx
	je	.L2240
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L4581:
	movq	%r15, %rsi
	leal	(%rax,%rcx), %r9d
	salq	$4, %rsi
	movl	%r9d, (%rdi)
	addq	optab_table+384(%rip), %rsi
	movl	8(%rsi), %eax
	cmpl	$1317, %eax
	je	.L2242
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rcx
	movq	insn_data+24(,%rcx,8), %rdi
	movq	(%rdi), %rax
	testq	%rax, %rax
	je	.L2243
	movq	%r14, %rdi
	movl	-2252(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L5071
.L2243:
	leaq	(%rbx,%rbx,4), %r10
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r10,8)
.L4582:
	movq	%rax, %rdi
	call	emit_insn
.L2262:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L2263
	movq	-1632(%rbp), %r14
	addq	%r14, 56(%r12)
.L2263:
	movq	48(%r12), %rbx
	movq	-1632(%rbp), %rdx
	subq	-1632(%rbp), %rbx
	cmpq	%rdx, %rbx
	movq	%rbx, 48(%r12)
	jae	.L2264
.L2224:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L2266
.L2215:
	cmpq	$0, -496(%rbp)
	jmp	.L4768
.L5071:
	movl	-2252(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L2243
.L2242:
	movzbl	mode_size(%r15), %r8d
	cmpl	%edx, %r8d
	je	.L5072
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r11b
	movzbl	%r11b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	setne	%dl
	movq	%rax, %rcx
	movzbl	%dl, %esi
	movq	global_rtl+16(%rip), %rdx
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L2250:
	movl	-2252(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%esi, %esi
	testq	%rsi, %rsi
	movq	%rax, %rbx
	je	.L2259
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L5073
.L2259:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L2262
.L5073:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L2259
.L5072:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L2250
.L2240:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L4581
.L2238:
	movzbl	mode_size(%r15), %r8d
	leal	1(%r8), %edx
	andl	$-2, %edx
	jmp	.L2239
.L5070:
	movq	%rax, %rsi
	movq	-2264(%rbp), %rdi
	xorl	%eax, %eax
	call	*-1136(%rbp)
	jmp	.L4582
.L2232:
	movq	24(%r12), %rdi
	movl	-2252(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L4580
.L2230:
	movl	-2252(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L4579
.L2212:
	movq	-2248(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -536(%rbp)
	jmp	.L2182
.L2208:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -512(%rbp)
	jmp	.L2210
.L2180:
	movl	$1, %ecx
	jmp	.L2179
.L2177:
	movl	$1, %edx
	jmp	.L2176
.L2175:
	movl	$1, %ecx
	jmp	.L2174
.L2169:
	cmpq	$2, %r14
	ja	.L2153
	jmp	.L2170
.L2145:
	movq	-2240(%rbp), %r9
	xorl	%esi, %esi
	movq	8(%r9), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-2240(%rbp), %r8
	movq	%rax, %r12
	movq	16(%r8), %rdi
	call	protect_from_queue
	movq	-2240(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L5074
.L2147:
	movq	-2240(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -2240(%rbp)
	movq	%r12, 8(%rax)
	movq	-2240(%rbp), %r10
	movq	%rbx, 16(%r10)
	jmp	.L2140
.L5074:
	cmpq	16(%rcx), %rax
	jne	.L2147
	jmp	.L2140
.L5064:
	cmpb	$51, 2(%rdx)
	je	.L2138
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L5075
.L2138:
	cmpl	$66, %eax
	jne	.L2141
	movq	-2240(%rbp), %r12
	xorl	%esi, %esi
	movq	8(%r12), %rdi
	call	protect_from_queue
	movq	-2240(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L2140
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -2240(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L2140
.L5075:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L2139
	movq	-2240(%rbp), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -2240(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L2140
.L2139:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L4578:
	movq	%rax, -2240(%rbp)
	jmp	.L2140
.L2137:
	movq	-2240(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L5076
	movq	-2240(%rbp), %rdi
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L4578
	movq	-2240(%rbp), %rax
	movq	8(%rax), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	-2240(%rbp), %r14
	movq	%rax, %rdi
	movq	8(%r14), %rsi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rcx
	movq	%rcx, -2240(%rbp)
	jmp	.L2140
.L5076:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L4578
.L2132:
	movq	-2424(%rbp), %r10
	xorl	%esi, %esi
	movq	8(%r10), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-2424(%rbp), %r9
	movq	%rax, %r12
	movq	16(%r9), %rdi
	call	protect_from_queue
	movq	-2424(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L5077
.L2134:
	movq	-2424(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -2232(%rbp)
	movq	%r12, 8(%rax)
	movq	-2232(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L2127
.L5077:
	cmpq	16(%rcx), %rax
	jne	.L2134
	jmp	.L2127
.L5063:
	cmpb	$51, 2(%rdx)
	je	.L2125
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L5078
.L2125:
	cmpl	$66, %eax
	jne	.L2128
	movq	-2424(%rbp), %r8
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	call	protect_from_queue
	movq	-2424(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L2127
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -2232(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L2127
.L5078:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L2126
	movq	-2424(%rbp), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -2232(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L2127
.L2126:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L4577:
	movq	%rax, -2232(%rbp)
	jmp	.L2127
.L2124:
	movq	-2424(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L5079
	movq	-2424(%rbp), %rax
	movq	24(%rax), %rcx
	testq	%rcx, %rcx
	movq	%rcx, -2232(%rbp)
	jne	.L2127
	movq	-2424(%rbp), %rbx
	movq	8(%rbx), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	-2424(%rbp), %r14
	movq	%rax, %rdi
	movq	8(%r14), %rsi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r11
	movq	%r11, -2232(%rbp)
	jmp	.L2127
.L5079:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L4577
.L2119:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L5080
.L2121:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -2224(%rbp)
	movq	%r12, 8(%rax)
	movq	-2224(%rbp), %r14
	movq	%rbx, 16(%r14)
	jmp	.L2114
.L5080:
	cmpq	16(%r13), %rax
	jne	.L2121
	jmp	.L2114
.L5062:
	jne	.L2115
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L2114
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -2224(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L2114
.L2111:
	testq	%rsi, %rsi
	je	.L5081
	movq	24(%r13), %rbx
	testq	%rbx, %rbx
	movq	%rbx, -2224(%rbp)
	jne	.L2114
	movq	8(%r13), %r12
	movzbl	2(%r12), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rax
.L4576:
	movq	%rax, -2224(%rbp)
	jmp	.L2114
.L5081:
	movq	8(%r13), %rdi
	call	copy_to_reg
	jmp	.L4576
.L2104:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L2100
	movl	32(%rsi), %r15d
	jmp	.L2100
.L2103:
	cmpl	$7, %edx
	ja	.L2099
	jmp	.L2104
	.p2align 6,,7
.L2088:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L5082
.L2090:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L2083
.L5082:
	cmpq	16(%r13), %rax
	jne	.L2090
	jmp	.L2083
.L4995:
	jne	.L2084
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L2083
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	movq	%rbx, 8(%rax)
	jmp	.L2083
.L2080:
	cmpq	$0, 16(%r13)
	je	.L5083
	movq	24(%r13), %rax
	testq	%rax, %rax
	je	.L2092
.L4575:
	movq	%rax, %r13
	jmp	.L2083
.L2092:
	movq	8(%r13), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L2083
.L5083:
	movq	8(%r13), %rdi
	call	copy_to_reg
	jmp	.L4575
.L4994:
	movq	144(%r15), %rax
	testq	%rax, %rax
	je	.L2075
	cmpq	%rax, %r13
	jne	.L2075
	jmp	.L2073
	.p2align 6,,7
.L4993:
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L2073
	jmp	.L2074
	.p2align 6,,7
.L2072:
	movq	-2424(%rbp), %rdx
	cmpb	$0, 2(%rdx)
	jne	.L2071
	cmpb	$0, 16(%r15)
	je	.L2071
	movq	8(%r15), %rdx
	movzbl	2(%r13), %edi
	movzbl	61(%rdx), %r14d
	shrb	$1, %r14b
	movzbl	%r14b, %esi
	cmpl	%esi, %edi
	je	.L2071
	movzbl	17(%rdx), %ecx
	movq	-2424(%rbp), %rdx
	shrb	$5, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, -2424(%rbp)
	jmp	.L2071
.L4460:
	movq	-2424(%rbp), %r9
	movzwl	(%r9), %edx
	jmp	.L1994
.L4465:
	movq	-2424(%rbp), %r11
	movzwl	(%r11), %edx
	jmp	.L1994
.L4992:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	%r15, %rdi
	movzbl	2(%r13), %edx
	movq	%rax, %rsi
	jmp	.L4574
.L2033:
	xorl	%r11d, %r11d
	testl	%r11d, %r11d
	je	.L4461
	movl	(%r13), %ecx
	movl	%ecx, %esi
	andl	$134283263, %esi
	cmpl	$66, %esi
	je	.L5084
.L2049:
	andl	$268500991, %ecx
	cmpl	$268435519, %ecx
	je	.L5085
	movzbl	2(%r13), %edx
	xorl	%ecx, %ecx
	movq	%r15, %rdi
	movq	%r13, %rsi
	call	expand_expr
	cmpw	$61, (%r13)
	movq	%rax, -2424(%rbp)
	je	.L5086
.L2069:
	movl	(%r13), %eax
	andl	$134283263, %eax
	cmpl	$134217794, %eax
	je	.L4464
	movq	-2424(%rbp), %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L4465
	movq	-2424(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-67(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L2070
	cmpw	$54, %dx
	je	.L2070
	cmpw	$55, %dx
	je	.L2070
	cmpw	$58, %dx
	je	.L2070
	cmpw	$134, %dx
	je	.L2070
	cmpw	$56, %dx
	je	.L2070
	cmpw	$140, %dx
	je	.L2070
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L1994
.L2070:
	movl	$1, -2212(%rbp)
	jmp	.L1994
.L4464:
	movq	-2424(%rbp), %rcx
	movzwl	(%rcx), %edx
	jmp	.L1994
.L5086:
	cmpl	$52, 8(%r13)
	jbe	.L4463
	jmp	.L2069
.L5085:
	xorl	%r14d, %r14d
	xorl	%edx, %edx
	testl	%r14d, %r14d
	jne	.L2055
	movq	8(%r15), %rsi
	movzbl	16(%rsi), %eax
	cmpb	$6, %al
	je	.L2056
	cmpb	$10, %al
	je	.L2056
	cmpb	$11, %al
	je	.L2056
	cmpb	$12, %al
	je	.L2056
.L2055:
	movq	%rdx, %rsi
	xorl	%ecx, %ecx
	movq	%r15, %rdi
	xorl	%edx, %edx
	call	expand_expr
	movzwl	(%rax), %edx
	movq	%rax, %rbx
	cmpw	$66, %dx
	je	.L5087
.L2058:
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L2061
	cmpw	$54, %dx
	je	.L2061
	cmpw	$55, %dx
	je	.L2061
	cmpw	$58, %dx
	je	.L2061
	cmpw	$134, %dx
	je	.L2061
	cmpw	$56, %dx
	je	.L2061
	cmpw	$140, %dx
	je	.L2061
.L2060:
	movzbl	3(%r13), %edx
	movq	8(%r13), %rdi
	movq	%rbx, %rsi
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	xorl	%r11d, %r11d
	testl	%r11d, %r11d
	je	.L1984
	movzbl	2(%rbx), %edx
	movzbl	2(%r13), %eax
	cmpb	%al, %dl
	je	.L1984
	testb	%dl, %dl
	je	.L2063
	movq	%rbx, %rsi
	movzbl	%al, %edi
	call	gen_lowpart_SUBREG
	movzbl	3(%rax), %ebx
	orb	$16, %bl
	movb	%bl, 3(%rax)
	andb	$-5, %bl
	movzbl	3(%r13), %esi
	andb	$4, %sil
	orb	%sil, %bl
	movb	%bl, 3(%rax)
	jmp	.L1984
.L2063:
	movq	8(%r13), %r14
	movzbl	3(%r13), %ecx
	movzbl	%al, %edi
	movq	%rbx, %rdx
	movzbl	2(%r14), %esi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	jmp	.L1984
.L2061:
	cmpb	$0, 2(%rbx)
	jne	.L2060
	movq	8(%r15), %rcx
	movzbl	2(%r13), %edi
	movq	%rbx, %rdx
	movzbl	61(%rcx), %r10d
	movzbl	3(%r13), %ecx
	shrb	$1, %r10b
	shrb	$2, %cl
	movzbl	%r10b, %esi
	andl	$1, %ecx
	call	convert_modes
	movzbl	3(%r13), %ecx
	movzbl	2(%r13), %esi
	movq	8(%r13), %r15
	movq	%rax, %rdx
	movzbl	2(%r15), %edi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, %rbx
	jmp	.L2060
.L5087:
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L2058
	testb	$8, 3(%rax)
	jne	.L2059
	movq	8(%r13), %rdi
	movq	8(%rax), %rsi
	call	reg_mentioned_p
	testl	%eax, %eax
	je	.L4462
.L2059:
	movq	%rbx, %rdi
	call	copy_to_reg
	movq	%rax, %rbx
.L4462:
	movzwl	(%rbx), %edx
	jmp	.L2058
.L2056:
	cmpq	$0, 8(%rsi)
	jne	.L2055
	movzbl	3(%r13), %ecx
	movzbl	17(%rsi), %r12d
	movl	$1, %edi
	movl	%ecx, %edx
	shrb	$5, %r12b
	shrb	$2, %dl
	andl	$1, %r12d
	andl	%edx, %edi
	cmpl	%edi, %r12d
	je	.L2057
	call	signed_or_unsigned_type
	movq	%r15, %rsi
	movq	%rax, %rdi
	call	convert
	movzbl	3(%r13), %ecx
	movq	%rax, %r15
.L2057:
	movq	8(%r13), %r8
	shrb	$2, %cl
	movl	$1, %esi
	andl	%ecx, %esi
	movzbl	2(%r8), %edi
	call	type_for_mode
	movq	%r15, %rsi
	movq	%rax, %rdi
	call	convert
	movq	8(%r13), %rdx
	movq	%rax, %r15
	jmp	.L2055
.L5084:
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L2049
	movq	%r13, %rsi
	xorl	%ecx, %ecx
	movzbl	%al, %edx
	movq	%r15, %rdi
	call	expand_expr
	movq	%rax, -2424(%rbp)
	movq	%rax, %rsi
	movzbl	2(%rax), %eax
	cmpb	$51, %al
	je	.L2050
	testb	%al, %al
	je	.L2050
	cmpq	%r13, %rsi
	je	.L2052
	movq	%rsi, %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L5088
.L2051:
	movq	-2424(%rbp), %rdi
	call	copy_to_reg
	movq	%rax, -2424(%rbp)
.L2050:
	movl	$1, -2212(%rbp)
	jmp	.L4460
.L5088:
	movq	-2424(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L2051
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L2051
.L2052:
	movl	$1, %r12d
	jmp	.L2051
	.p2align 6,,7
.L4461:
	movl	(%r13), %ecx
	jmp	.L2049
.L2042:
	movl	$1, %ebx
	jmp	.L2036
.L2043:
	xorl	%ebx, %ebx
	jmp	.L2036
.L2040:
	movq	8(%r13), %rdi
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L2042
	movq	16(%r13), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L2036
	jmp	.L2042
	.p2align 6,,7
.L4991:
	cmpb	$51, 2(%r13)
	jne	.L1995
	call	gen_label_rtx
	movq	%rax, %r14
	call	gen_label_rtx
	movq	cfun(%rip), %r9
	movq	%rax, -1128(%rbp)
	movq	16(%r9), %r8
	movq	40(%r8), %rbx
	testq	%rbx, %rbx
	je	.L4281
.L2001:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L5089
	call	emit_insn
	movq	%rax, 16(%rbx)
.L2000:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %r11
	movq	16(%rdx), %rsi
	testq	%r11, %r11
	movq	%r11, %rbx
	movq	%r11, 40(%rsi)
	jne	.L2001
.L4281:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L2003
	cmpl	$66, %eax
	je	.L5090
.L2007:
	cmpl	$75, %eax
	je	.L2011
	cmpl	$78, %eax
	je	.L2011
.L2006:
	call	do_pending_stack_adjust
	movq	cfun(%rip), %r9
	movq	%r14, %rsi
	movq	16(%r9), %r8
	incl	4(%r8)
	movq	32(%r15), %rdi
	call	jumpifnot
	call	start_cleanup_deferral
	movq	40(%r15), %rdi
	xorl	%edx, %edx
	movq	%r13, %rsi
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %r12
	movq	16(%r12), %rdi
	movq	40(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L4283
.L2021:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L5091
	call	emit_insn
	movq	%rax, 16(%rbx)
.L2020:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %r11
	movq	16(%rdx), %rsi
	testq	%r11, %r11
	movq	%r11, %rbx
	movq	%r11, 40(%rsi)
	jne	.L2021
.L4283:
	movq	-1128(%rbp), %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r14, %rdi
	call	emit_label
	call	start_cleanup_deferral
	movq	48(%r15), %rdi
	movq	%r13, %rsi
	xorl	%edx, %edx
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %r13
	movq	16(%r13), %r15
	movq	40(%r15), %rbx
	testq	%rbx, %rbx
	je	.L4285
.L2028:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L5092
	call	emit_insn
	movq	%rax, 16(%rbx)
.L2027:
	movq	cfun(%rip), %r9
	movq	40(%rbx), %rdi
	movq	16(%r9), %r8
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%r8)
	jne	.L2028
.L4285:
	movq	-1128(%rbp), %rdi
	call	emit_label
	movq	cfun(%rip), %r10
	movq	16(%r10), %rbx
	decl	4(%rbx)
	jmp	.L1984
.L5092:
	movq	8(%rdi), %r12
	movq	8(%r12), %r14
	movq	%r14, 16(%rbx)
	call	emit_insn
	jmp	.L2027
.L5091:
	movq	8(%rdi), %rcx
	movq	8(%rcx), %r10
	movq	%r10, 16(%rbx)
	call	emit_insn
	jmp	.L2020
.L2011:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L5093
.L2013:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L2006
.L5093:
	cmpq	16(%r13), %rax
	jne	.L2013
	jmp	.L2006
	.p2align 6,,7
.L5090:
	jne	.L2007
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L2006
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	movq	%rbx, 8(%rax)
	jmp	.L2006
	.p2align 6,,7
.L2003:
	cmpq	$0, 16(%r13)
	je	.L5094
	movq	24(%r13), %rax
	testq	%rax, %rax
	je	.L2015
.L4573:
	movq	%rax, %r13
	jmp	.L2006
.L2015:
	movq	8(%r13), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L2006
.L5094:
	movq	8(%r13), %rdi
	call	copy_to_reg
	jmp	.L4573
	.p2align 6,,7
.L5089:
	movq	8(%rdi), %rcx
	movq	8(%rcx), %r10
	movq	%r10, 16(%rbx)
	call	emit_insn
	jmp	.L2000
.L4990:
	movq	32(%r15), %rdi
	movq	const_int_rtx+512(%rip), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	cfun(%rip), %rdx
	movq	16(%rdx), %rcx
	movq	40(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L4279
.L1991:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L5095
	call	emit_insn
	movq	%rax, 16(%rbx)
.L1990:
	movq	cfun(%rip), %r12
	movq	40(%rbx), %rdi
	movq	16(%r12), %r14
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%r14)
	jne	.L1991
.L4279:
	movq	40(%r15), %rdi
	movq	%r13, %rsi
	xorl	%edx, %edx
	call	store_expr
	jmp	.L1984
.L5095:
	movq	8(%rdi), %rsi
	movq	8(%rsi), %r11
	movq	%r11, 16(%rbx)
	call	emit_insn
	jmp	.L1990
.L4989:
	movq	-1904(%rbp), %rbx
	movl	-1884(%rbp), %edx
	movq	%r15, %rdi
	movq	%r13, %rsi
	addq	$7, %rbx
	cmpq	$-1, -1904(%rbp)
	cmovg	-1904(%rbp), %rbx
	sarq	$3, %rbx
	movq	%rbx, %rcx
	call	store_constructor
	jmp	.L1984
.L1975:
	cmpb	$51, 2(%r14)
	je	.L1082
	cmpw	$61, (%r14)
	je	.L5096
.L1978:
	movq	%r14, %rdi
	call	copy_to_reg
	jmp	.L1082
.L5096:
	cmpl	$52, 8(%r14)
	jbe	.L1082
	jmp	.L1978
.L1183:
	movq	-2208(%rbp), %rsi
	movq	%r14, %rdi
	call	convert_move
	jmp	.L1162
.L1182:
	cmpb	$51, %al
	je	.L5097
.L1186:
	cmpw	$39, (%r14)
	je	.L5098
	cmpb	$51, %al
	je	.L5099
	movq	%r14, %rdi
	movq	-2208(%rbp), %rsi
	jmp	.L4572
.L5099:
	movq	-2208(%rbp), %r11
	movq	%r13, %rdi
	movq	%r14, -2152(%rbp)
	movq	%r11, -2160(%rbp)
	call	expr_size
	movl	$8, %edx
	movq	16(%r14), %rcx
	movq	%rax, %r13
	testq	%rcx, %rcx
	je	.L1777
	movl	32(%rcx), %edx
.L1777:
	movq	-2208(%rbp), %rdi
	movq	16(%rdi), %rax
	testq	%rax, %rax
	je	.L1778
	cmpl	32(%rax), %edx
	jb	.L1779
.L1774:
	testq	%rax, %rax
	movl	$8, -2144(%rbp)
	je	.L1775
	movl	32(%rax), %eax
	movl	%eax, -2144(%rbp)
.L1775:
	cmpb	$51, 2(%r14)
	jne	.L4766
	movq	-2208(%rbp), %rdx
	cmpb	$51, 2(%rdx)
	jne	.L4765
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L1786
	cmpl	$66, %eax
	je	.L5100
.L1790:
	cmpl	$75, %eax
	je	.L1794
	cmpl	$78, %eax
	je	.L1794
.L1789:
	movq	-2208(%rbp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L1799
	cmpl	$66, %eax
	je	.L5101
.L1803:
	cmpl	$75, %eax
	je	.L1807
	cmpl	$78, %eax
	je	.L1807
.L1802:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L1812
	cmpl	$66, %eax
	je	.L5102
.L1816:
	cmpl	$75, %eax
	je	.L1820
	cmpl	$78, %eax
	je	.L1820
.L1815:
	movq	-2152(%rbp), %r10
	cmpw	$66, (%r10)
	jne	.L4764
	movq	-2160(%rbp), %rax
	cmpw	$66, (%rax)
	jne	.L4763
	testq	%r13, %r13
	je	.L4762
	cmpw	$54, (%r13)
	je	.L5103
.L1828:
	shrl	$3, -2144(%rbp)
	xorl	%edi, %edi
	mov	-2144(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -1088(%rbp)
	testl	%r12d, %r12d
	je	.L4277
.L1961:
	movslq	%r12d,%rax
	movl	movstr_optab(,%rax,4), %edx
	movq	%rax, -1096(%rbp)
	cmpl	$1317, %edx
	je	.L1947
	cmpw	$54, (%r13)
	je	.L5104
.L1951:
	testb	$2, target_flags+3(%rip)
	je	.L1952
	movq	-1096(%rbp), %rcx
	cmpw	$63, mode_bitsize(%rcx,%rcx)
.L4570:
	jbe	.L1947
.L1950:
	movslq	%edx,%rdi
	leaq	(%rdi,%rdi,4), %r10
	movq	%rdi, -1104(%rbp)
	movq	insn_data+24(,%r10,8), %rdx
	movq	(%rdx), %rax
	movq	%rdx, -1112(%rbp)
	testq	%rax, %rax
	je	.L1954
	movq	-2152(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L1947
.L1954:
	movq	-1112(%rbp), %rsi
	movq	24(%rsi), %rax
	testq	%rax, %rax
	jne	.L5105
.L1955:
	movq	-1112(%rbp), %r11
	movq	72(%r11), %rax
	testq	%rax, %rax
	je	.L1956
	xorl	%esi, %esi
	movq	-1088(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L1947
.L1956:
	call	get_last_insn
	movl	$1, %edx
	movq	%r13, %rsi
	movl	%r12d, %edi
	movq	%rax, -1120(%rbp)
	call	convert_to_mode
	movq	-1112(%rbp), %r8
	movq	%rax, %rbx
	movq	48(%r8), %rax
	testq	%rax, %rax
	jne	.L5106
.L1957:
	movq	-1104(%rbp), %r9
	movq	-2152(%rbp), %rdi
	xorl	%eax, %eax
	movq	-2160(%rbp), %rsi
	movq	%rbx, %rdx
	movq	-1088(%rbp), %rcx
	leaq	(%r9,%r9,4), %r12
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L4496
	movq	-1120(%rbp), %rdi
	call	delete_insns_since
.L1947:
	movq	-1096(%rbp), %rcx
	movzbl	mode_wider_mode(%rcx), %r12d
	testl	%r12d, %r12d
	jne	.L1961
.L4277:
	testb	$2, target_flags+3(%rip)
	movq	-2152(%rbp), %r11
	movl	$0, volatile_ok(%rip)
	setne	%sil
	movzbl	%sil, %edi
	movq	8(%r11), %rsi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%bl
	movq	%rax, -2200(%rbp)
	movq	-2160(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%bl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%r13, %rsi
	movq	sizetype_tab(%rip), %r10
	movq	%rax, %rbx
	movzbl	61(%r10), %edx
	shrb	$1, %dl
	movzbl	%dl, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r13
	je	.L5107
.L1970:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	-2200(%rbp), %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r13, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %r11
	movq	8(%rdx), %rdi
	movq	(%r11), %rbx
	movq	$0, (%rbx)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movl	$53, %edi
	movq	fn.1(%rip), %r10
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%r10), %rcx
	movq	8(%rcx), %rsi
	movq	%r12, %rcx
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	movq	-2200(%rbp), %r13
	testb	$4, 3(%r13)
	je	.L1162
	movl	$49, %edi
	xorl	%esi, %esi
	movq	-2200(%rbp), %rdx
.L4571:
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L1162
.L5107:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r9
	xorl	%esi, %esi
	orb	$1, 49(%r9)
	movq	fn.1(%rip), %r12
	orb	$8, 18(%r12)
	movq	fn.1(%rip), %r8
	orb	$64, 50(%r8)
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L1970
.L4496:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L1162
	.p2align 6,,7
.L5106:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L1957
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L1957
	.p2align 6,,7
.L5105:
	movq	-2160(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L1947
	jmp	.L1955
.L1952:
	movq	-1096(%rbp), %rax
	cmpw	$31, mode_bitsize(%rax,%rax)
	jmp	.L4570
.L5104:
	movq	mode_mask_array(,%rax,8), %r8
	shrq	$1, %r8
	cmpq	%r8, 8(%r13)
	jbe	.L1950
	jmp	.L1951
.L5103:
	movq	8(%r13), %r12
	xorl	%r8d, %r8d
	movl	$17, %esi
.L1841:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4266
.L1838:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %r9
	cmpq	%rsi, %r9
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L1838
.L4266:
	testl	%edi, %edi
	je	.L1831
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L1840
	movq	%r8, -2648(%rbp)
	call	get_mode_alignment
	movq	-2648(%rbp), %r8
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L1840
	movzbq	mode_size(%rbx), %r10
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r10
	addq	%rax, %r8
	movq	%rdx, %r12
.L1840:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L1841
.L1831:
	testq	%r12, %r12
	jne	.L4757
	movl	optimize_size(%rip), %edx
	testl	%edx, %edx
	jne	.L1844
	movq	ix86_cost(%rip), %r11
	mov	40(%r11), %ebx
	cmpq	%rbx, %r8
	jae	.L1828
.L1845:
	movq	-2160(%rbp), %rdx
	movq	-2152(%rbp), %rcx
	movq	8(%r13), %r12
	movq	-2152(%rbp), %rdi
	testb	$2, target_flags+3(%rip)
	movq	8(%rdx), %r8
	setne	%r13b
	movq	$0, -344(%rbp)
	movl	$0, -2180(%rbp)
	movq	%r8, -368(%rbp)
	movq	8(%rcx), %rsi
	xorl	%ecx, %ecx
	movq	%rdi, -400(%rbp)
	movzbl	%r13b, %r10d
	leal	5(,%r10,4), %r13d
	movzwl	(%rsi), %edx
	movq	%rsi, -2168(%rbp)
	leal	-96(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L1850
	cmpw	$99, %dx
	je	.L1850
	cmpw	$98, %dx
	je	.L1850
.L1849:
	movq	-2168(%rbp), %rbx
	movl	%ecx, -384(%rbp)
	xorl	%edx, %edx
	movzwl	(%rbx), %eax
	cmpw	$96, %ax
	je	.L1852
	cmpw	$98, %ax
	je	.L1852
.L1851:
	movq	-2168(%rbp), %rsi
	movq	-2160(%rbp), %r9
	movl	%edx, -336(%rbp)
	xorl	%ecx, %ecx
	movq	%rsi, -392(%rbp)
	movq	%r9, -376(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L1855
	cmpw	$99, %dx
	je	.L1855
	cmpw	$98, %dx
	je	.L1855
.L1854:
	movl	-336(%rbp), %eax
	movl	%ecx, -360(%rbp)
	movl	$0, -356(%rbp)
	movl	$0, -380(%rbp)
	testl	%eax, %eax
	je	.L1856
	movq	%r12, -344(%rbp)
.L1856:
	movl	-360(%rbp), %edi
	movq	%r12, -352(%rbp)
	testl	%edi, %edi
	je	.L1858
	movl	-384(%rbp), %ecx
	testl	%ecx, %ecx
	jne	.L1857
.L1858:
	movq	$0, -2176(%rbp)
	movl	$17, %esi
.L1871:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4269
.L1868:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L1868
.L4269:
	testl	%edi, %edi
	je	.L1861
	movslq	%edi,%rbx
	movq	%rbx, %r11
	salq	$4, %r11
	addq	optab_table+240(%rip), %r11
	cmpl	$1317, 8(%r11)
	je	.L1870
	movq	%r8, -2648(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-2648(%rbp), %r8
	jb	.L1870
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, -2176(%rbp)
	movq	%rdx, %r12
.L1870:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L1871
.L1861:
	testq	%r12, %r12
	jne	.L4757
	cmpq	$2, -2176(%rbp)
	jbe	.L1857
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4271
.L1879:
	movslq	%ecx,%rbx
	movzbl	mode_size(%rbx), %edi
	cmpl	%r13d, %edi
	cmovae	-2180(%rbp), %ecx
	movl	%ecx, -2180(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L1879
.L4271:
	movl	-360(%rbp), %eax
	testl	%eax, %eax
	jne	.L1885
	movzwl	(%r8), %edx
	leal	-67(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L1883
	cmpw	$54, %dx
	je	.L1883
	cmpw	$55, %dx
	je	.L1883
	cmpw	$58, %dx
	je	.L1883
	cmpw	$134, %dx
	je	.L1883
	cmpw	$56, %dx
	je	.L1883
	cmpw	$140, %dx
	je	.L1883
.L1885:
	movl	-384(%rbp), %eax
	testl	%eax, %eax
	jne	.L1857
	movq	-2168(%rbp), %r11
	movzwl	(%r11), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L1887
	cmpw	$54, %dx
	je	.L1887
	cmpw	$55, %dx
	je	.L1887
	cmpw	$58, %dx
	je	.L1887
	cmpw	$134, %dx
	je	.L1887
	cmpw	$56, %dx
	je	.L1887
	cmpw	$140, %dx
	je	.L1887
.L1857:
	cmpl	$1, %r13d
	jbe	.L1890
.L1941:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4274
.L1897:
	movslq	%ecx,%r8
	movzbl	mode_size(%r8), %edx
	cmpl	%r13d, %edx
	cmovae	-2180(%rbp), %ecx
	movl	%ecx, -2180(%rbp)
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L1897
.L4274:
	movl	-2180(%rbp), %eax
	testl	%eax, %eax
	je	.L1890
	movslq	-2180(%rbp),%rax
	movq	%rax, %r13
	movq	%rax, -1072(%rbp)
	salq	$4, %r13
	addq	optab_table+240(%rip), %r13
	movl	8(%r13), %ebx
	cmpl	$1317, %ebx
	je	.L1899
	movl	-2180(%rbp), %edi
	movl	$128, %r12d
	call	get_mode_alignment
	cmpl	%eax, %r12d
	jb	.L1899
	movq	-1072(%rbp), %r9
	movslq	%ebx,%rdi
	leaq	-400(%rbp), %r12
	leaq	(%rdi,%rdi,4), %rbx
	movq	$0, -2192(%rbp)
	movq	insn_data+16(,%rbx,8), %rsi
	movzbq	mode_size(%r9), %rdx
	cmpq	%rdx, -352(%rbp)
	movq	%rsi, -1080(%rbp)
	movq	%rdx, -1624(%rbp)
	jb	.L1899
	movl	-336(%rbp), %ecx
.L1939:
	testl	%ecx, %ecx
	je	.L1903
	subq	%rdx, 56(%r12)
.L1903:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L1904
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L1905
	movl	-2180(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L4566:
	movq	%rax, -2192(%rbp)
.L1904:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L1907
	movq	24(%r12), %rdi
	movl	-2180(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L4567:
	cmpq	$0, (%r12)
	movq	%rax, %r13
	jne	.L5108
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L1913
	movq	-1072(%rbp), %r10
	movzbl	mode_size(%r10), %ecx
	leal	7(%rcx), %edx
	andl	$-8, %edx
.L1914:
	movq	cfun(%rip), %rbx
	andl	$33554432, %esi
	movq	16(%rbx), %r9
	leaq	8(%r9), %rdi
	movl	8(%r9), %ecx
	je	.L1915
	movq	-1072(%rbp), %rsi
	movzbl	mode_size(%rsi), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L4568:
	leal	(%rax,%rcx), %r11d
	movl	%r11d, (%rdi)
	movq	-1072(%rbp), %rdi
	salq	$4, %rdi
	addq	optab_table+384(%rip), %rdi
	movl	8(%rdi), %eax
	cmpl	$1317, %eax
	je	.L1917
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rcx
	movq	insn_data+24(,%rcx,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L1918
	movq	%r13, %rdi
	movl	-2180(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L5109
.L1918:
	leaq	(%rbx,%rbx,4), %r8
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r8,8)
.L4569:
	movq	%rax, %rdi
	call	emit_insn
.L1937:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L1938
	movq	-1624(%rbp), %r13
	addq	%r13, 56(%r12)
.L1938:
	movq	48(%r12), %r11
	movq	-1624(%rbp), %rdx
	subq	-1624(%rbp), %r11
	cmpq	%rdx, %r11
	movq	%r11, 48(%r12)
	jae	.L1939
.L1899:
	movq	-1072(%rbp), %r12
	movzbl	mode_size(%r12), %r13d
	cmpl	$1, %r13d
	ja	.L1941
.L1890:
	cmpq	$0, -352(%rbp)
.L4769:
	je	.L1162
	jmp	.L4742
	.p2align 6,,7
.L5109:
	movl	-2180(%rbp), %edi
	movq	%r13, %rsi
	call	force_reg
	movq	%rax, %r13
	jmp	.L1918
.L1917:
	movq	-1072(%rbp), %rax
	movzbl	mode_size(%rax), %r9d
	cmpl	%edx, %r9d
	je	.L5110
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	testb	$2, target_flags+3(%rip)
	setne	%dil
	movq	%rax, %rcx
	movzbl	%dil, %esi
	movl	$75, %edi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r10b
	movzbl	%r10b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L1925:
	movl	-2180(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%esi, %esi
	testq	%rsi, %rsi
	movq	%rax, %rbx
	je	.L1934
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L5111
.L1934:
	movq	%rbx, %rdi
	movq	%r13, %rsi
	call	emit_move_insn
	jmp	.L1937
.L5111:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L1934
.L5110:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L1925
	.p2align 6,,7
.L1915:
	movq	-1072(%rbp), %r10
	movzbl	mode_size(%r10), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L4568
.L1913:
	movq	-1072(%rbp), %r8
	movzbl	mode_size(%r8), %r11d
	leal	1(%r11), %edx
	andl	$-2, %edx
	jmp	.L1914
.L5108:
	movq	%rax, %rsi
	movq	-2192(%rbp), %rdi
	xorl	%eax, %eax
	call	*-1080(%rbp)
	jmp	.L4569
.L1907:
	movq	24(%r12), %rdi
	movl	-2180(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L4567
.L1905:
	movl	-2180(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L4566
.L1887:
	movq	-2168(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -392(%rbp)
	jmp	.L1857
.L1883:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -368(%rbp)
	jmp	.L1885
	.p2align 6,,7
.L1855:
	movl	$1, %ecx
	jmp	.L1854
.L1852:
	movl	$1, %edx
	jmp	.L1851
.L1850:
	movl	$1, %ecx
	jmp	.L1849
.L1844:
	cmpq	$2, %r8
	ja	.L1828
	jmp	.L1845
.L1820:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L5112
.L1822:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L1815
.L5112:
	cmpq	16(%r13), %rax
	jne	.L1822
	jmp	.L1815
	.p2align 6,,7
.L5102:
	cmpb	$51, 2(%r13)
	je	.L1813
	movq	8(%r13), %r12
	cmpw	$71, (%r12)
	je	.L5113
.L1813:
	cmpl	$66, %eax
	jne	.L1816
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L1815
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	movq	%rbx, 8(%rax)
	jmp	.L1815
.L5113:
	movq	8(%r12), %rsi
	movq	%r13, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L1814
	movzbl	2(%r13), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L1815
.L1814:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L4565:
	movq	%rax, %r13
	jmp	.L1815
.L1812:
	cmpq	$0, 16(%r13)
	je	.L5114
	movq	24(%r13), %rax
	testq	%rax, %rax
	jne	.L4565
	movq	8(%r13), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L1815
.L5114:
	movq	8(%r13), %rdi
	call	copy_to_reg
	jmp	.L4565
	.p2align 6,,7
.L1807:
	movq	-2208(%rbp), %r11
	xorl	%esi, %esi
	movq	8(%r11), %rdi
	call	protect_from_queue
	movq	-2208(%rbp), %rsi
	movq	%rax, %r12
	movq	16(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-2208(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L5115
.L1809:
	movq	-2208(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -2160(%rbp)
	movq	%r12, 8(%rax)
	movq	-2160(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L1802
.L5115:
	cmpq	16(%rsi), %rax
	jne	.L1809
	jmp	.L1802
	.p2align 6,,7
.L5101:
	cmpb	$51, 2(%rbx)
	je	.L1800
	movq	8(%rbx), %r12
	cmpw	$71, (%r12)
	je	.L5116
.L1800:
	cmpl	$66, %eax
	jne	.L1803
	movq	-2208(%rbp), %r10
	xorl	%esi, %esi
	movq	8(%r10), %rdi
	call	protect_from_queue
	movq	-2208(%rbp), %rdx
	movq	%rax, %rbx
	cmpq	8(%rdx), %rax
	je	.L1802
	movq	%rdx, %rdi
	call	copy_rtx
	movq	%rax, -2160(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L1802
.L5116:
	movq	8(%r12), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L1801
	movq	-2208(%rbp), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -2160(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L1802
.L1801:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L4564:
	movq	%rax, -2160(%rbp)
	jmp	.L1802
	.p2align 6,,7
.L1799:
	movq	-2208(%rbp), %rdx
	cmpq	$0, 16(%rdx)
	je	.L5117
	movq	-2208(%rbp), %rdx
	movq	24(%rdx), %r9
	testq	%r9, %r9
	movq	%r9, -2160(%rbp)
	jne	.L1802
	movq	-2208(%rbp), %r12
	movq	8(%r12), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rcx
	movq	%rcx, -2160(%rbp)
	jmp	.L1802
.L5117:
	movq	8(%rdx), %rdi
	call	copy_to_reg
	jmp	.L4564
	.p2align 6,,7
.L1794:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L5118
.L1796:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -2152(%rbp)
	movq	%r12, 8(%rax)
	movq	-2152(%rbp), %rcx
	movq	%rbx, 16(%rcx)
	jmp	.L1789
.L5118:
	cmpq	16(%r14), %rax
	jne	.L1796
	jmp	.L1789
	.p2align 6,,7
.L5100:
	jne	.L1790
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L1789
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -2152(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L1789
	.p2align 6,,7
.L1786:
	testq	%rcx, %rcx
	je	.L5119
	movq	24(%r14), %rbx
	testq	%rbx, %rbx
	movq	%rbx, -2152(%rbp)
	jne	.L1789
	movq	8(%r14), %r12
	movzbl	2(%r12), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rax
	movq	%rax, -2152(%rbp)
	jmp	.L1789
.L5119:
	movq	8(%r14), %rdi
	call	copy_to_reg
	movq	%rax, -2152(%rbp)
	jmp	.L1789
	.p2align 6,,7
.L1779:
	testq	%rcx, %rcx
	movl	$8, -2144(%rbp)
	je	.L1775
	movl	32(%rcx), %r9d
	movl	%r9d, -2144(%rbp)
	jmp	.L1775
.L1778:
	cmpl	$7, %edx
	ja	.L1774
	jmp	.L1779
.L5098:
	movq	8(%r13), %rdi
	call	int_size_in_bytes
	cmpw	$39, (%r14)
	movl	%eax, -1028(%rbp)
	jne	.L4761
	movq	8(%r14), %rcx
	movq	8(%rcx), %rsi
	movl	(%rcx), %r13d
	cmpq	$0, 8(%rsi)
	movslq	%r13d,%rdi
	sete	%r8b
	leaq	15(,%rdi,8), %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	leaq	48(%rsp), %r12
	movzbl	%r8b, %r9d
	movq	%r12, -1040(%rbp)
	movl	%r9d, -2140(%rbp)
	movl	-2140(%rbp), %eax
	cmpl	%r13d, %eax
	movl	%eax, -2132(%rbp)
	jge	.L4260
.L1758:
	movslq	-2132(%rbp),%rbx
	movq	8(%rcx,%rbx,8), %r12
	movq	%rbx, -1048(%rbp)
	movl	-1028(%rbp), %ecx
	movq	8(%r12), %rax
	movq	16(%r12), %r11
	testl	%ecx, %ecx
	movzbl	2(%rax), %r13d
	movq	8(%r11), %r10
	movq	%r10, -1056(%rbp)
	movslq	%r13d,%rdx
	movzbl	mode_size(%rdx), %ebx
	movq	%rdx, -1064(%rbp)
	movl	%ebx, -2136(%rbp)
	js	.L1731
	mov	%ebx, %r9d
	movslq	-1028(%rbp),%rdi
	addq	-1056(%rbp), %r9
	cmpq	%rdi, %r9
	jle	.L1731
	movl	-1028(%rbp), %r8d
	subl	-1056(%rbp), %r8d
	movl	%r8d, -2136(%rbp)
	je	.L4760
.L1731:
	movq	-2208(%rbp), %r12
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L4509
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L1735
	cmpw	$54, %dx
	je	.L1735
	cmpw	$55, %dx
	je	.L1735
	cmpw	$58, %dx
	je	.L1735
	cmpw	$134, %dx
	je	.L1735
	cmpw	$56, %dx
	je	.L1735
	cmpw	$140, %dx
	je	.L1735
.L1734:
	movq	-2208(%rbp), %rcx
	movl	%r13d, %edi
	movzbl	2(%rcx), %eax
	testb	%al, %al
	je	.L4562
	movzbl	%al, %edi
.L4562:
	call	gen_reg_rtx
	movq	-2208(%rbp), %rsi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	emit_move_insn
	movzwl	(%r12), %edx
.L1733:
	cmpw	$66, %dx
	je	.L4509
.L1738:
	cmpw	$65, %dx
	je	.L5120
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L1755
	cmpw	$54, %dx
	je	.L1755
	cmpw	$55, %dx
	je	.L1755
	cmpw	$58, %dx
	je	.L1755
	cmpw	$134, %dx
	je	.L1755
	cmpw	$56, %dx
	je	.L1755
	cmpw	$140, %dx
	je	.L1755
	cmpw	$61, %dx
	je	.L5121
.L1754:
	movslq	-1028(%rbp),%r9
	movl	-2136(%rbp), %eax
	movq	%r12, %rdi
	movq	-1056(%rbp), %rdx
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r13d, (%rsp)
	sall	$3, %eax
	movq	%r9, 8(%rsp)
	mov	%eax, %esi
	salq	$3, %rdx
	movl	%r13d, %r9d
	call	extract_bit_field
.L4563:
	movq	-1048(%rbp), %r8
	movq	-1040(%rbp), %r12
	movq	%rax, (%r12,%r8,8)
.L1729:
	incl	-2132(%rbp)
	movq	8(%r14), %rcx
	movl	-2132(%rbp), %esi
	cmpl	(%rcx), %esi
	jl	.L1758
.L4260:
	movq	cfun(%rip), %r11
	movq	16(%r11), %r10
	movq	40(%r10), %rbx
	testq	%rbx, %rbx
	je	.L4262
.L1764:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L5122
	call	emit_insn
	movq	%rax, 16(%rbx)
.L1763:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %rdi
	movq	16(%rdx), %r9
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%r9)
	jne	.L1764
	movq	8(%r14), %rcx
.L4262:
	movl	-2140(%rbp), %ebx
	cmpl	(%rcx), %ebx
	jge	.L1162
.L1770:
	movslq	-2140(%rbp),%r10
	movq	-1040(%rbp), %r8
	salq	$3, %r10
	movq	8(%r10,%rcx), %rsi
	movq	8(%rsi), %rdi
	movq	(%r8,%r10), %rsi
	call	emit_move_insn
	incl	-2140(%rbp)
	movq	8(%r14), %r12
	movl	-2140(%rbp), %eax
	cmpl	(%r12), %eax
	movq	%r12, %rcx
	jl	.L1770
	jmp	.L1162
.L5122:
	movq	8(%rdi), %r13
	movq	8(%r13), %rcx
	movq	%rcx, 16(%rbx)
	call	emit_insn
	jmp	.L1763
.L5121:
	movzbl	2(%r12), %edi
	cmpl	%r13d, %edi
	jne	.L1754
.L1755:
	movq	-1048(%rbp), %rdx
	movq	-1040(%rbp), %r13
	movq	%r12, (%r13,%rdx,8)
	jmp	.L1729
.L5120:
	cmpq	$0, -1056(%rbp)
	jne	.L4458
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %r10
	movzbl	mode_size(%r10), %esi
	cmpl	%esi, -2136(%rbp)
	je	.L1744
.L1745:
	movzbq	2(%rdx), %rcx
	movzbq	mode_size(%rcx), %r11
	cmpq	%r11, -1056(%rbp)
	je	.L5123
.L1743:
	cmpq	$0, -1056(%rbp)
	jne	.L3574
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rcx
	movzbq	mode_size(%rcx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %rbx
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%rbx, %rdi
	movl	%r13d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	jmp	.L4563
.L5123:
	movq	16(%r12), %rdx
	movzbq	2(%rdx), %rdi
	movzbl	mode_size(%rdi), %ebx
	cmpl	%ebx, -2136(%rbp)
	jne	.L1743
.L1744:
	xorl	%r9d, %r9d
	movq	-1048(%rbp), %r8
	movq	-1040(%rbp), %rax
	cmpq	$0, -1056(%rbp)
	setne	%r9b
	leaq	(%rax,%r8,8), %rbx
	movq	8(%r12,%r9,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L1729
	cmpw	$54, %dx
	je	.L1729
	cmpw	$55, %dx
	je	.L1729
	cmpw	$58, %dx
	je	.L1729
	cmpw	$134, %dx
	je	.L1729
	cmpw	$56, %dx
	je	.L1729
	cmpw	$140, %dx
	je	.L1729
	cmpw	$61, %dx
	je	.L5124
.L1749:
	movslq	-1028(%rbp),%r10
	movl	-2136(%rbp), %r11d
	movl	%r13d, (%rsp)
	xorl	%edx, %edx
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r13d, %r9d
	sall	$3, %r11d
	movq	%r10, 8(%rsp)
	mov	%r11d, %esi
	movq	(%rbx), %rdi
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L1729
.L5124:
	movzbl	2(%rcx), %esi
	cmpl	%r13d, %esi
	jne	.L1749
	jmp	.L1729
	.p2align 6,,7
.L4458:
	movq	8(%r12), %rdx
	jmp	.L1745
.L4509:
	movl	%r13d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L1739
	cmpl	%eax, 32(%rdx)
	jae	.L1740
.L4457:
	movzwl	(%r12), %edx
	jmp	.L1738
.L1740:
	movq	-1056(%rbp), %rbx
	movl	%r13d, %edi
	call	get_mode_alignment
	mov	%eax, %edi
	salq	$3, %rbx
	movq	%rbx, %rax
	cqto
	idivq	%rdi
	testq	%rdx, %rdx
	jne	.L4457
	movq	-1064(%rbp), %rax
	movzbl	mode_size(%rax), %edx
	cmpl	%edx, -2136(%rbp)
	jne	.L4457
	movl	%r13d, %edi
	call	gen_reg_rtx
	movl	$1, %ecx
	movq	-1056(%rbp), %rdx
	movq	-1048(%rbp), %r8
	movq	-1040(%rbp), %r9
	movq	%r12, %rdi
	movl	%r13d, %esi
	leaq	(%r9,%r8,8), %rbx
	movl	$1, %r8d
	movq	%rax, (%rbx)
	call	adjust_address_1
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L1729
	.p2align 6,,7
.L1739:
	cmpl	$8, %eax
	ja	.L4457
	jmp	.L1740
.L1735:
	movq	-2208(%rbp), %r11
	movzbl	2(%r11), %ecx
	movzbl	%cl, %r10d
	cmpl	%r13d, %r10d
	je	.L1733
	testb	%cl, %cl
	je	.L1733
	jmp	.L1734
.L5097:
	cmpb	$29, 16(%r13)
	jne	.L1186
	movq	%r13, %rdi
	call	expr_size
	cmpw	$54, (%rax)
	movq	%rax, -1952(%rbp)
	je	.L5125
.L1187:
	movq	sizetype_tab(%rip), %rdi
	movq	-1952(%rbp), %rsi
	call	make_tree
	xorl	%esi, %esi
	movslq	32(%r13),%rdi
	movq	%rax, %r12
	call	size_int_wide
	movq	%r12, %rsi
	movl	$78, %edi
	movq	%rax, %rdx
	call	size_binop
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	movq	%rax, -920(%rbp)
	call	expand_expr
	xorl	%edx, %edx
	movl	ptr_mode(%rip), %edi
	movq	%rax, %rsi
	movq	$0, -2080(%rbp)
	call	convert_to_mode
	movl	$8, %edx
	movq	-2208(%rbp), %r12
	movq	%rax, -2000(%rbp)
	movq	%r14, -2016(%rbp)
	movq	%rax, -2032(%rbp)
	movq	%r12, -2024(%rbp)
	movq	16(%r14), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L1390
	movl	32(%rax), %edx
.L1390:
	movq	-2208(%rbp), %r13
	movq	16(%r13), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L1391
	cmpl	32(%rax), %edx
	jb	.L1392
.L1387:
	testq	%rcx, %rcx
	movl	$8, -2004(%rbp)
	je	.L1388
	movl	32(%rcx), %r8d
	movl	%r8d, -2004(%rbp)
.L1388:
	cmpb	$51, 2(%r14)
	jne	.L4766
	movq	-2208(%rbp), %r10
	cmpb	$51, 2(%r10)
	jne	.L4765
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L1399
	cmpl	$66, %eax
	je	.L5126
.L1403:
	cmpl	$75, %eax
	je	.L1407
	cmpl	$78, %eax
	je	.L1407
.L1402:
	movq	-2208(%rbp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L1412
	cmpl	$66, %eax
	je	.L5127
.L1416:
	cmpl	$75, %eax
	je	.L1420
	cmpl	$78, %eax
	je	.L1420
.L1415:
	movq	-2000(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L1425
	cmpl	$66, %eax
	je	.L5128
.L1429:
	cmpl	$75, %eax
	je	.L1433
	cmpl	$78, %eax
	je	.L1433
.L1428:
	movq	-2016(%rbp), %rsi
	cmpw	$66, (%rsi)
	jne	.L4764
	movq	-2024(%rbp), %r11
	cmpw	$66, (%r11)
	jne	.L4763
	cmpq	$0, -2032(%rbp)
	je	.L4762
	movq	-2032(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L5129
.L1441:
	shrl	$3, -2004(%rbp)
	xorl	%edi, %edi
	mov	-2004(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -944(%rbp)
	testl	%r12d, %r12d
	je	.L4244
.L1574:
	movslq	%r12d,%rax
	movl	movstr_optab(,%rax,4), %edx
	movq	%rax, -952(%rbp)
	cmpl	$1317, %edx
	je	.L1560
	movq	-2032(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L5130
.L1564:
	testb	$2, target_flags+3(%rip)
	je	.L1565
	movq	-952(%rbp), %r9
	cmpw	$63, mode_bitsize(%r9,%r9)
.L4555:
	jbe	.L1560
.L1563:
	movslq	%edx,%rax
	leaq	(%rax,%rax,4), %rbx
	movq	%rax, -960(%rbp)
	movq	insn_data+24(,%rbx,8), %r13
	movq	(%r13), %rax
	testq	%rax, %rax
	je	.L1567
	movq	-2016(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L1560
.L1567:
	movq	24(%r13), %rax
	testq	%rax, %rax
	jne	.L5131
.L1568:
	movq	72(%r13), %rax
	testq	%rax, %rax
	je	.L1569
	xorl	%esi, %esi
	movq	-944(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L1560
.L1569:
	call	get_last_insn
	movl	$1, %edx
	movq	-2032(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -968(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r13), %rax
	testq	%rax, %rax
	jne	.L5132
.L1570:
	movq	-960(%rbp), %rdi
	xorl	%eax, %eax
	movq	-2024(%rbp), %rsi
	movq	%rbx, %rdx
	movq	-944(%rbp), %rcx
	leaq	(%rdi,%rdi,4), %r13
	movq	-2016(%rbp), %rdi
	call	*insn_data+16(,%r13,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L4494
	movq	-968(%rbp), %rdi
	call	delete_insns_since
.L1560:
	movq	-952(%rbp), %rdx
	movzbl	mode_wider_mode(%rdx), %r12d
	testl	%r12d, %r12d
	jne	.L1574
.L4244:
	testb	$2, target_flags+3(%rip)
	movq	-2016(%rbp), %r8
	movl	$0, volatile_ok(%rip)
	setne	%r9b
	movq	8(%r8), %rsi
	movzbl	%r9b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-2024(%rbp), %r12
	testb	$2, target_flags+3(%rip)
	setne	%r11b
	movq	%rax, %r13
	movq	8(%r12), %rsi
	movzbl	%r11b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	sizetype_tab(%rip), %r10
	movq	%rax, %rbx
	movzbl	61(%r10), %esi
	shrb	$1, %sil
	movzbl	%sil, %edi
	movq	-2032(%rbp), %rsi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, -2072(%rbp)
	je	.L5133
.L1583:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r13, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	-2072(%rbp), %rsi
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %r11
	movq	%rax, (%rbx)
	movq	(%r12), %r9
	movq	8(%r11), %rdi
	movq	(%r9), %r8
	movq	$0, (%r8)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r10
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r10), %rbx
	movq	8(%rbx), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r13)
	jne	.L5134
.L1572:
	movq	-2000(%rbp), %rdx
	cmpw	$54, (%rdx)
	je	.L5135
	movq	sizetype_tab(%rip), %r12
	movq	-2000(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	optab_table+16(%rip), %rsi
	movq	-1952(%rbp), %rdx
	xorl	%r9d, %r9d
	movzbl	61(%r12), %r13d
	movl	$3, (%rsp)
	shrb	$1, %r13b
	movzbl	%r13b, %edi
	call	expand_binop
	movq	-920(%rbp), %rdi
	movq	%rax, %rbx
	call	highest_pow2_factor
	movq	-2000(%rbp), %rsi
	movq	%r14, %rdi
	movq	%rax, %rdx
	call	offset_address
	movq	%rax, %r14
	call	gen_label_rtx
	xorl	%r9d, %r9d
	movq	%rax, -2080(%rbp)
	movq	const_int_rtx+512(%rip), %rsi
	movq	%rbx, %rdi
	movzbl	2(%rbx), %r8d
	movl	$107, %edx
	xorl	%ecx, %ecx
	movq	%rax, (%rsp)
	call	emit_cmp_and_jump_insns
.L1586:
	cmpq	const_int_rtx+512(%rip), %rbx
	je	.L1587
	cmpw	$66, (%r14)
	movq	%r14, -2096(%rbp)
	je	.L5136
	movzbl	2(%r14), %edi
	call	get_mode_alignment
.L4556:
	movl	%eax, -2084(%rbp)
.L1589:
	movzbl	2(%r14), %eax
	cmpb	$51, %al
	je	.L1592
	cmpw	$54, (%rbx)
	je	.L5137
.L1592:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L1594
	cmpl	$66, %eax
	je	.L5138
.L1598:
	cmpl	$75, %eax
	je	.L1602
	cmpl	$78, %eax
	je	.L1602
.L1597:
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L1607
	cmpl	$66, %eax
	je	.L5139
.L1611:
	cmpl	$75, %eax
	je	.L1615
	cmpl	$78, %eax
	je	.L1615
.L1610:
	cmpw	$54, (%rbx)
	je	.L5140
.L1620:
	shrl	$3, -2084(%rbp)
	xorl	%edi, %edi
	mov	-2084(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r13d
	movq	%rax, -992(%rbp)
	testl	%r13d, %r13d
	je	.L4258
.L1714:
	movslq	%r13d,%rsi
	movl	clrstr_optab(,%rsi,4), %edx
	movq	%rsi, -1000(%rbp)
	cmpl	$1317, %edx
	je	.L1701
	cmpw	$54, (%rbx)
	je	.L5141
.L1705:
	testb	$2, target_flags+3(%rip)
	je	.L1706
	movq	-1000(%rbp), %rsi
	cmpw	$63, mode_bitsize(%rsi,%rsi)
.L4560:
	jbe	.L1701
.L1704:
	movslq	%edx,%r9
	leaq	(%r9,%r9,4), %r11
	movq	%r9, -1008(%rbp)
	movq	insn_data+24(,%r11,8), %r10
	movq	(%r10), %rax
	movq	%r10, -1016(%rbp)
	testq	%rax, %rax
	je	.L1708
	movq	-2096(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L1701
.L1708:
	movq	-1016(%rbp), %rcx
	movq	48(%rcx), %rax
	testq	%rax, %rax
	je	.L1709
	xorl	%esi, %esi
	movq	-992(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L1701
.L1709:
	call	get_last_insn
	movl	$1, %edx
	movq	%rbx, %rsi
	movl	%r13d, %edi
	movq	%rax, -1024(%rbp)
	call	convert_to_mode
	movq	-1016(%rbp), %rdx
	movq	%rax, %r12
	movq	24(%rdx), %rax
	testq	%rax, %rax
	jne	.L5142
.L1710:
	movq	-1008(%rbp), %rax
	movq	-2096(%rbp), %rdi
	movq	%r12, %rsi
	movq	-992(%rbp), %rdx
	leaq	(%rax,%rax,4), %r13
	xorl	%eax, %eax
	call	*insn_data+16(,%r13,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L4561
	movq	-1024(%rbp), %rdi
	call	delete_insns_since
.L1701:
	movq	-1000(%rbp), %r12
	movzbl	mode_wider_mode(%r12), %r13d
	testl	%r13d, %r13d
	jne	.L1714
.L4258:
	testb	$2, target_flags+3(%rip)
	movq	-2096(%rbp), %r10
	setne	%r11b
	movq	8(%r10), %rsi
	movzbl	%r11b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	sizetype_tab(%rip), %r8
	movq	%rax, %r13
	movzbl	61(%r8), %esi
	shrb	$1, %sil
	movzbl	%sil, %edi
	movq	%rbx, %rsi
	call	copy_to_mode_reg
	cmpq	$0, fn.0(%rip)
	movq	%rax, -2128(%rbp)
	je	.L5143
.L1719:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r13, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	const_int_rtx+512(%rip), %rsi
	movq	integer_types+40(%rip), %rdi
	movq	%rax, %r12
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	-2128(%rbp), %rsi
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.0(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %r11
	movq	8(%rdx), %rdi
	movq	(%r11), %r10
	movq	$0, (%r10)
	call	build_pointer_type
	movq	fn.0(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	movq	%r12, %rcx
	movl	$53, %edi
	movq	fn.0(%rip), %rsi
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%rsi), %r8
	movq	8(%r8), %rsi
	xorl	%r8d, %r8d
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r13)
	jne	.L5144
.L1587:
	cmpq	$0, -2080(%rbp)
	je	.L1162
	movq	-2080(%rbp), %rdi
	call	emit_label
	jmp	.L1162
.L5144:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r13, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
.L4561:
	call	emit_insn
	jmp	.L1587
.L5143:
	movl	$.LC7, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.0(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.0(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.0, %edi
	movq	%rax, fn.0(%rip)
	call	ggc_add_tree_root
	movq	fn.0(%rip), %rcx
	xorl	%esi, %esi
	orb	$1, 49(%rcx)
	movq	fn.0(%rip), %r9
	orb	$8, 18(%r9)
	movq	fn.0(%rip), %rdi
	orb	$64, 50(%rdi)
	movq	fn.0(%rip), %rbx
	orb	$2, 18(%rbx)
	movq	fn.0(%rip), %rdi
	call	make_decl_rtl
	movq	fn.0(%rip), %rdi
	call	assemble_external
	jmp	.L1719
.L5142:
	movq	%r12, %rdi
	movl	%r13d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L1710
	movq	%r12, %rsi
	movl	%r13d, %edi
	call	copy_to_mode_reg
	movq	%rax, %r12
	jmp	.L1710
	.p2align 6,,7
.L1706:
	movq	-1000(%rbp), %r8
	cmpw	$31, mode_bitsize(%r8,%r8)
	jmp	.L4560
.L5141:
	movq	mode_mask_array(,%rsi,8), %r12
	shrq	$1, %r12
	cmpq	%r12, 8(%rbx)
	jbe	.L1704
	jmp	.L1705
.L5140:
	movq	8(%rbx), %r13
	xorl	%r8d, %r8d
	movl	$17, %esi
.L1633:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4247
.L1630:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %r11
	cmpq	%rsi, %r11
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L1630
.L4247:
	testl	%edi, %edi
	je	.L1623
	movslq	%edi,%r12
	movq	%r12, %r9
	salq	$4, %r9
	addq	optab_table+240(%rip), %r9
	cmpl	$1317, 8(%r9)
	je	.L1632
	movq	%r8, -2648(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-2648(%rbp), %r8
	jb	.L1632
	movzbq	mode_size(%r12), %rdi
	movq	%r13, %rax
	xorl	%edx, %edx
	divq	%rdi
	addq	%rax, %r8
	movq	%rdx, %r13
.L1632:
	movzbq	mode_size(%r12), %rsi
	cmpq	$1, %rsi
	ja	.L1633
.L1623:
	testq	%r13, %r13
	jne	.L4757
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L1636
	movq	ix86_cost(%rip), %rdx
	mov	40(%rdx), %r12d
	cmpq	%r12, %r8
	jae	.L1620
.L1637:
	movq	8(%rbx), %r9
	movq	-2096(%rbp), %r11
	xorl	%r10d, %r10d
	movq	$clear_by_pieces_1, -424(%rbp)
	movq	$0, -416(%rbp)
	testb	$2, target_flags+3(%rip)
	setne	%r10b
	leaq	-464(%rbp), %r12
	movq	%r9, -440(%rbp)
	movq	%r11, -464(%rbp)
	leaq	16(%r12), %rcx
	movq	8(%r11), %r8
	movq	$0, -432(%rbp)
	movl	$0, -2108(%rbp)
	leaq	5(,%r10,4), %rsi
	movq	%r8, -456(%rbp)
	movq	%rsi, -2120(%rbp)
	movzwl	(%r8), %edx
	xorl	%esi, %esi
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L1641
	cmpw	$99, %dx
	je	.L1641
	cmpw	$98, %dx
	je	.L1641
.L1640:
	movl	%esi, (%rcx)
	movl	$0, 20(%r12)
	leaq	56(%r12), %rdx
	movzwl	(%r8), %eax
	xorl	%ecx, %ecx
	cmpw	$96, %ax
	je	.L1643
	cmpw	$98, %ax
	je	.L1643
.L1642:
	movl	%ecx, (%rdx)
	movl	56(%r12), %eax
	testl	%eax, %eax
	je	.L1644
	movq	24(%r12), %r13
	movq	%r13, 32(%r12)
.L1644:
	movl	16(%r12), %ecx
	testl	%ecx, %ecx
	jne	.L1645
	movq	24(%r12), %r13
	movq	$0, -2104(%rbp)
	movl	$17, %esi
.L1658:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4250
.L1655:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L1655
.L4250:
	testl	%edi, %edi
	je	.L1648
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L1657
	movq	%r8, -2648(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-2648(%rbp), %r8
	jb	.L1657
	movzbq	mode_size(%rbx), %r11
	movq	%r13, %rax
	xorl	%edx, %edx
	divq	%r11
	addq	%rax, -2104(%rbp)
	movq	%rdx, %r13
.L1657:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L1658
.L1648:
	testq	%r13, %r13
	jne	.L4757
	cmpq	$2, -2104(%rbp)
	jbe	.L1645
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4252
.L1666:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %r13
	cmpq	-2120(%rbp), %r13
	cmovae	-2108(%rbp), %ecx
	movl	%ecx, -2108(%rbp)
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L1666
.L4252:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L1645
	movzwl	(%r8), %edx
	leal	-67(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L1670
	cmpw	$54, %dx
	je	.L1670
	cmpw	$55, %dx
	je	.L1670
	cmpw	$58, %dx
	je	.L1670
	cmpw	$134, %dx
	je	.L1670
	cmpw	$56, %dx
	je	.L1670
	cmpw	$140, %dx
	je	.L1670
.L1645:
	cmpq	$1, -2120(%rbp)
	jbe	.L1673
.L1694:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4255
.L1680:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	-2120(%rbp), %rdx
	cmovae	-2108(%rbp), %ecx
	movl	%ecx, -2108(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L1680
.L4255:
	movl	-2108(%rbp), %esi
	testl	%esi, %esi
	je	.L1673
	movslq	-2108(%rbp),%r8
	movq	%r8, -976(%rbp)
	salq	$4, %r8
	addq	optab_table+240(%rip), %r8
	movl	8(%r8), %ebx
	cmpl	$1317, %ebx
	je	.L1682
	movl	-2108(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L1682
	movq	-976(%rbp), %r10
	movslq	%ebx,%r13
	leaq	(%r13,%r13,4), %r9
	movq	insn_data+16(,%r9,8), %r11
	movzbq	mode_size(%r10), %rdx
	cmpq	%rdx, 24(%r12)
	movq	%r11, -984(%rbp)
	movq	%rdx, %r13
	jb	.L1682
	movl	56(%r12), %ecx
.L1692:
	testl	%ecx, %ecx
	je	.L1686
	subq	%rdx, 32(%r12)
.L1686:
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L1687
	movq	(%r12), %rdi
	movl	-2108(%rbp), %esi
	movl	$1, %r8d
	movq	8(%r12), %rdx
	movq	32(%r12), %rcx
	call	adjust_automodify_address_1
.L4559:
	movl	-2108(%rbp), %edx
	movq	%rax, %rbx
	movq	48(%r12), %rdi
	movq	32(%r12), %rsi
	call	*40(%r12)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	*-984(%rbp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L1691
	addq	%r13, 32(%r12)
.L1691:
	movq	24(%r12), %rbx
	movq	%r13, %rdx
	subq	%r13, %rbx
	cmpq	%r13, %rbx
	movq	%rbx, 24(%r12)
	jae	.L1692
.L1682:
	movq	-976(%rbp), %rdx
	movzbq	mode_size(%rdx), %rcx
	cmpq	$1, %rcx
	movq	%rcx, -2120(%rbp)
	ja	.L1694
.L1673:
	cmpq	$0, 24(%r12)
	je	.L1587
	jmp	.L4756
.L1687:
	movq	(%r12), %rdi
	movl	-2108(%rbp), %esi
	movl	$1, %ecx
	movq	32(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L4559
.L1670:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, 8(%r12)
	jmp	.L1645
.L1643:
	movl	$1, %ecx
	jmp	.L1642
.L1641:
	movl	$1, %esi
	jmp	.L1640
.L1636:
	cmpq	$2, %r8
	ja	.L1620
	jmp	.L1637
.L1615:
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbx), %rdi
	movq	%rax, %r13
	call	protect_from_queue
	cmpq	8(%rbx), %r13
	movq	%rax, %r12
	je	.L5145
.L1617:
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r13, 8(%rax)
	movq	%r12, 16(%rax)
	jmp	.L1610
.L5145:
	cmpq	16(%rbx), %rax
	jne	.L1617
	jmp	.L1610
.L5139:
	cmpb	$51, 2(%rbx)
	je	.L1608
	movq	8(%rbx), %r13
	cmpw	$71, (%r13)
	je	.L5146
.L1608:
	cmpl	$66, %eax
	jne	.L1611
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%rbx), %rax
	movq	%rax, %r12
	je	.L1610
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r12, 8(%rax)
	jmp	.L1610
.L5146:
	movq	8(%r13), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r13)
	movq	%rax, %r12
	je	.L1609
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L1610
.L1609:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L4558:
	movq	%rax, %rbx
	jmp	.L1610
.L1607:
	cmpq	$0, 16(%rbx)
	je	.L5147
	movq	24(%rbx), %rax
	testq	%rax, %rax
	jne	.L4558
	movq	8(%rbx), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%rbx), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	16(%rbx), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbx), %rbx
	jmp	.L1610
.L5147:
	movq	8(%rbx), %rdi
	call	copy_to_reg
	jmp	.L4558
.L1602:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r13
	call	protect_from_queue
	cmpq	8(%r14), %r13
	movq	%rax, %r12
	je	.L5148
.L1604:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -2096(%rbp)
	movq	%r13, 8(%rax)
	movq	-2096(%rbp), %rax
	movq	%r12, 16(%rax)
	jmp	.L1597
.L5148:
	cmpq	16(%r14), %rax
	jne	.L1604
	jmp	.L1597
.L5138:
	jne	.L1598
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %r12
	je	.L1597
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -2096(%rbp)
	movq	%r12, 8(%rax)
	jmp	.L1597
.L1594:
	cmpq	$0, 16(%r14)
	je	.L5149
	movq	24(%r14), %rdi
	testq	%rdi, %rdi
	movq	%rdi, -2096(%rbp)
	jne	.L1597
	movq	8(%r14), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rax
.L4557:
	movq	%rax, -2096(%rbp)
	jmp	.L1597
.L5149:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L4557
.L5137:
	movzbl	%al, %edx 
	movzbl	mode_size(%rdx), %ecx
	cmpl	8(%rbx), %ecx
	jne	.L1592
	movq	const_tiny_rtx(,%rdx,8), %rsi
	movq	%r14, %rdi
	call	emit_move_insn
	jmp	.L1587
.L5136:
	movq	16(%r14), %rax
	movl	$8, -2084(%rbp)
	testq	%rax, %rax
	je	.L1589
	movl	32(%rax), %eax
	jmp	.L4556
.L5135:
	movq	8(%rdx), %rsi
	movq	-1952(%rbp), %rdi
	negq	%rsi
	call	plus_constant_wide
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r14, %rdi
	movl	$51, %esi
	movq	%rax, %rbx
	movq	-2000(%rbp), %r14
	movq	8(%r14), %rdx
	call	adjust_address_1
	movq	%rax, %r14
	jmp	.L1586
.L5134:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r13, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L1572
.L5133:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %rsi
	orb	$1, 49(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %rdx
	orb	$8, 18(%rdx)
	movq	fn.1(%rip), %rdi
	orb	$64, 50(%rdi)
	movq	fn.1(%rip), %rcx
	orb	$2, 18(%rcx)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L1583
.L4494:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L1572
.L5132:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L1570
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L1570
.L5131:
	movq	-2024(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L1560
	jmp	.L1568
	.p2align 6,,7
.L1565:
	movq	-952(%rbp), %rcx
	cmpw	$31, mode_bitsize(%rcx,%rcx)
	jmp	.L4555
.L5130:
	movq	mode_mask_array(,%rax,8), %r11
	shrq	$1, %r11
	cmpq	%r11, 8(%rcx)
	jbe	.L1563
	jmp	.L1564
.L5129:
	movq	8(%rcx), %r12
	xorl	%r13d, %r13d
	movl	$17, %esi
.L1454:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4233
.L1451:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L1451
.L4233:
	testl	%edi, %edi
	je	.L1444
	movslq	%edi,%rbx
	movq	%rbx, %r9
	salq	$4, %r9
	addq	optab_table+240(%rip), %r9
	cmpl	$1317, 8(%r9)
	je	.L1453
	call	get_mode_alignment
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L1453
	movzbq	mode_size(%rbx), %r8
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r8
	addq	%rax, %r13
	movq	%rdx, %r12
.L1453:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L1454
.L1444:
	testq	%r12, %r12
	jne	.L4757
	movl	optimize_size(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L1457
	movq	ix86_cost(%rip), %r11
	mov	40(%r11), %esi
	cmpq	%rsi, %r13
	jae	.L1441
.L1458:
	movq	-2032(%rbp), %r8
	movq	-2024(%rbp), %r10
	movq	-2016(%rbp), %rdi
	movq	-2016(%rbp), %rdx
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r13b
	movq	8(%r10), %r8
	movq	$0, -344(%rbp)
	movl	$0, -2052(%rbp)
	movq	%r8, -368(%rbp)
	movzbl	%r13b, %ecx
	movq	8(%rdi), %r9
	movq	%rdx, -400(%rbp)
	leal	5(,%rcx,4), %r13d
	xorl	%ecx, %ecx
	movq	%r9, -2040(%rbp)
	movq	-2040(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L1463
	cmpw	$99, %dx
	je	.L1463
	cmpw	$98, %dx
	je	.L1463
.L1462:
	movq	-2040(%rbp), %rsi
	movl	%ecx, -384(%rbp)
	xorl	%edx, %edx
	movzwl	(%rsi), %eax
	cmpw	$96, %ax
	je	.L1465
	cmpw	$98, %ax
	je	.L1465
.L1464:
	movq	-2040(%rbp), %rax
	movq	-2024(%rbp), %rbx
	movl	%edx, -336(%rbp)
	xorl	%ecx, %ecx
	movq	%rax, -392(%rbp)
	movq	%rbx, -376(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L1468
	cmpw	$99, %dx
	je	.L1468
	cmpw	$98, %dx
	je	.L1468
.L1467:
	movl	-336(%rbp), %edx
	movl	%ecx, -360(%rbp)
	movl	$0, -356(%rbp)
	movl	$0, -380(%rbp)
	testl	%edx, %edx
	je	.L1469
	movq	%r12, -344(%rbp)
.L1469:
	movl	-360(%rbp), %r9d
	movq	%r12, -352(%rbp)
	testl	%r9d, %r9d
	je	.L1471
	movl	-384(%rbp), %edi
	testl	%edi, %edi
	jne	.L1470
.L1471:
	movq	$0, -2048(%rbp)
	movl	$17, %esi
.L1484:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4236
.L1481:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %r11
	cmpq	%rsi, %r11
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L1481
.L4236:
	testl	%edi, %edi
	je	.L1474
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L1483
	movq	%r8, -2648(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-2648(%rbp), %r8
	jb	.L1483
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, -2048(%rbp)
	movq	%rdx, %r12
.L1483:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L1484
.L1474:
	testq	%r12, %r12
	jne	.L4757
	cmpq	$2, -2048(%rbp)
	jbe	.L1470
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4238
.L1492:
	movslq	%ecx,%rbx
	movzbl	mode_size(%rbx), %edx
	cmpl	%r13d, %edx
	cmovae	-2052(%rbp), %ecx
	movl	%ecx, -2052(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L1492
.L4238:
	movl	-360(%rbp), %eax
	testl	%eax, %eax
	jne	.L1498
	movzwl	(%r8), %edx
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L1496
	cmpw	$54, %dx
	je	.L1496
	cmpw	$55, %dx
	je	.L1496
	cmpw	$58, %dx
	je	.L1496
	cmpw	$134, %dx
	je	.L1496
	cmpw	$56, %dx
	je	.L1496
	cmpw	$140, %dx
	je	.L1496
.L1498:
	movl	-384(%rbp), %eax
	testl	%eax, %eax
	jne	.L1470
	movq	-2040(%rbp), %r11
	movzwl	(%r11), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L1500
	cmpw	$54, %dx
	je	.L1500
	cmpw	$55, %dx
	je	.L1500
	cmpw	$58, %dx
	je	.L1500
	cmpw	$134, %dx
	je	.L1500
	cmpw	$56, %dx
	je	.L1500
	cmpw	$140, %dx
	je	.L1500
.L1470:
	cmpl	$1, %r13d
	jbe	.L1503
.L1554:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4241
.L1510:
	movslq	%ecx,%r8
	movzbl	mode_size(%r8), %r12d
	cmpl	%r13d, %r12d
	cmovae	-2052(%rbp), %ecx
	movl	%ecx, -2052(%rbp)
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L1510
.L4241:
	movl	-2052(%rbp), %eax
	testl	%eax, %eax
	je	.L1503
	movslq	-2052(%rbp),%rcx
	movq	%rcx, %r13
	movq	%rcx, -928(%rbp)
	salq	$4, %r13
	addq	optab_table+240(%rip), %r13
	movl	8(%r13), %ebx
	cmpl	$1317, %ebx
	je	.L1512
	movl	-2052(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r9d
	cmpl	%eax, %r9d
	jb	.L1512
	movq	-928(%rbp), %rsi
	movslq	%ebx,%rdi
	leaq	-400(%rbp), %r12
	leaq	(%rdi,%rdi,4), %rdx
	movq	$0, -2064(%rbp)
	movq	insn_data+16(,%rdx,8), %rbx
	movzbq	mode_size(%rsi), %rdx
	cmpq	%rdx, -352(%rbp)
	movq	%rbx, -936(%rbp)
	movq	%rdx, -1616(%rbp)
	jb	.L1512
	movl	-336(%rbp), %ecx
.L1552:
	testl	%ecx, %ecx
	je	.L1516
	subq	%rdx, 56(%r12)
.L1516:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L1517
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L1518
	movl	-2052(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L4551:
	movq	%rax, -2064(%rbp)
.L1517:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L1520
	movq	24(%r12), %rdi
	movl	-2052(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L4552:
	cmpq	$0, (%r12)
	movq	%rax, %r13
	jne	.L5150
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L1526
	movq	-928(%rbp), %rax
	movzbl	mode_size(%rax), %r10d
	leal	7(%r10), %edx
	andl	$-8, %edx
.L1527:
	movq	cfun(%rip), %rcx
	andl	$33554432, %esi
	movq	16(%rcx), %r9
	leaq	8(%r9), %rdi
	movl	8(%r9), %ecx
	je	.L1528
	movq	-928(%rbp), %rsi
	movzbl	mode_size(%rsi), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L4553:
	leal	(%rax,%rcx), %r10d
	movl	%r10d, (%rdi)
	movq	-928(%rbp), %rdi
	salq	$4, %rdi
	addq	optab_table+384(%rip), %rdi
	movl	8(%rdi), %eax
	cmpl	$1317, %eax
	je	.L1530
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %r11
	movq	insn_data+24(,%r11,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L1531
	movq	%r13, %rdi
	movl	-2052(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L5151
.L1531:
	leaq	(%rbx,%rbx,4), %r8
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r8,8)
.L4554:
	movq	%rax, %rdi
	call	emit_insn
.L1550:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L1551
	movq	-1616(%rbp), %r13
	addq	%r13, 56(%r12)
.L1551:
	movq	48(%r12), %r10
	movq	-1616(%rbp), %rdx
	subq	-1616(%rbp), %r10
	cmpq	%rdx, %r10
	movq	%r10, 48(%r12)
	jae	.L1552
.L1512:
	movq	-928(%rbp), %r12
	movzbl	mode_size(%r12), %r13d
	cmpl	$1, %r13d
	ja	.L1554
.L1503:
	cmpq	$0, -352(%rbp)
	je	.L1572
	jmp	.L4742
.L5151:
	movl	-2052(%rbp), %edi
	movq	%r13, %rsi
	call	force_reg
	movq	%rax, %r13
	jmp	.L1531
.L1530:
	movq	-928(%rbp), %rax
	movzbl	mode_size(%rax), %r9d
	cmpl	%edx, %r9d
	je	.L5152
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	testb	$2, target_flags+3(%rip)
	setne	%dil
	movq	%rax, %rcx
	movzbl	%dil, %esi
	movl	$75, %edi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L1538:
	movl	-2052(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%esi, %esi
	testq	%rsi, %rsi
	movq	%rax, %rbx
	je	.L1547
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L5153
.L1547:
	movq	%rbx, %rdi
	movq	%r13, %rsi
	call	emit_move_insn
	jmp	.L1550
.L5153:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L1547
.L5152:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%cl
	movzbl	%cl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L1538
.L1528:
	movq	-928(%rbp), %rbx
	movzbl	mode_size(%rbx), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L4553
.L1526:
	movq	-928(%rbp), %r8
	movzbl	mode_size(%r8), %r11d
	leal	1(%r11), %edx
	andl	$-2, %edx
	jmp	.L1527
.L5150:
	movq	%rax, %rsi
	movq	-2064(%rbp), %rdi
	xorl	%eax, %eax
	call	*-936(%rbp)
	jmp	.L4554
	.p2align 6,,7
.L1520:
	movq	24(%r12), %rdi
	movl	-2052(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L4552
.L1518:
	movl	-2052(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L4551
.L1500:
	movq	-2040(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -392(%rbp)
	jmp	.L1470
.L1496:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -368(%rbp)
	jmp	.L1498
.L1468:
	movl	$1, %ecx
	jmp	.L1467
.L1465:
	movl	$1, %edx
	jmp	.L1464
.L1463:
	movl	$1, %ecx
	jmp	.L1462
.L1457:
	cmpq	$2, %r13
	ja	.L1441
	jmp	.L1458
.L1433:
	movq	-2000(%rbp), %r9
	xorl	%esi, %esi
	movq	8(%r9), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-2000(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-2000(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L5154
.L1435:
	movq	-2000(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -2032(%rbp)
	movq	%r12, 8(%rax)
	movq	-2032(%rbp), %rcx
	movq	%rbx, 16(%rcx)
	jmp	.L1428
.L5154:
	cmpq	16(%rcx), %rax
	jne	.L1435
	jmp	.L1428
.L5128:
	cmpb	$51, 2(%rdx)
	je	.L1426
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L5155
.L1426:
	cmpl	$66, %eax
	jne	.L1429
	movq	-2000(%rbp), %r11
	xorl	%esi, %esi
	movq	8(%r11), %rdi
	call	protect_from_queue
	movq	-2000(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L1428
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -2032(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L1428
.L5155:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L1427
	movq	-2000(%rbp), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -2032(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L1428
.L1427:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L4550:
	movq	%rax, -2032(%rbp)
	jmp	.L1428
.L1425:
	movq	-2000(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L5156
	movq	-2000(%rbp), %rdi
	movq	24(%rdi), %r12
	testq	%r12, %r12
	movq	%r12, -2032(%rbp)
	jne	.L1428
	movq	-2000(%rbp), %rax
	movq	8(%rax), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	-2000(%rbp), %r13
	movq	%rax, %rdi
	movq	8(%r13), %rsi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r8
	movq	%r8, -2032(%rbp)
	jmp	.L1428
.L5156:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L4550
.L1420:
	movq	-2208(%rbp), %r12
	xorl	%esi, %esi
	movq	8(%r12), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-2208(%rbp), %r13
	movq	%rax, %r12
	movq	16(%r13), %rdi
	call	protect_from_queue
	movq	-2208(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L5157
.L1422:
	movq	-2208(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -2024(%rbp)
	movq	%r12, 8(%rax)
	movq	-2024(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L1415
.L5157:
	cmpq	16(%rsi), %rax
	jne	.L1422
	jmp	.L1415
.L5127:
	cmpb	$51, 2(%rbx)
	je	.L1413
	movq	8(%rbx), %r12
	cmpw	$71, (%r12)
	je	.L5158
.L1413:
	cmpl	$66, %eax
	jne	.L1416
	movq	-2208(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	movq	-2208(%rbp), %rdx
	movq	%rax, %rbx
	cmpq	8(%rdx), %rax
	je	.L1415
	movq	%rdx, %rdi
	call	copy_rtx
	movq	%rax, -2024(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L1415
.L5158:
	movq	8(%r12), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L1414
	movq	-2208(%rbp), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -2024(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L1415
.L1414:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L4549:
	movq	%rax, -2024(%rbp)
	jmp	.L1415
.L1412:
	movq	-2208(%rbp), %rdx
	cmpq	$0, 16(%rdx)
	je	.L5159
	movq	-2208(%rbp), %rax
	movq	24(%rax), %r8
	testq	%r8, %r8
	movq	%r8, -2024(%rbp)
	jne	.L1415
	movq	-2208(%rbp), %r13
	movq	8(%r13), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r10
	movq	%r10, -2024(%rbp)
	jmp	.L1415
.L5159:
	movq	8(%rdx), %rdi
	call	copy_to_reg
	jmp	.L4549
.L1407:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L5160
.L1409:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -2016(%rbp)
	movq	%r12, 8(%rax)
	movq	-2016(%rbp), %rsi
	movq	%rbx, 16(%rsi)
	jmp	.L1402
.L5160:
	cmpq	16(%r14), %rax
	jne	.L1409
	jmp	.L1402
.L5126:
	jne	.L1403
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L1402
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -2016(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L1402
.L1399:
	testq	%rsi, %rsi
	je	.L5161
	movq	24(%r14), %rdx
	testq	%rdx, %rdx
	movq	%rdx, -2016(%rbp)
	jne	.L1402
	movq	8(%r14), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rbx
	movq	%rbx, -2016(%rbp)
	jmp	.L1402
.L5161:
	movq	8(%r14), %rdi
	call	copy_to_reg
	movq	%rax, -2016(%rbp)
	jmp	.L1402
.L1392:
	testq	%rsi, %rsi
	movl	$8, -2004(%rbp)
	je	.L1388
	movl	32(%rsi), %eax
	movl	%eax, -2004(%rbp)
	jmp	.L1388
.L1391:
	cmpl	$7, %edx
	ja	.L1387
	jmp	.L1392
.L5125:
	movq	-1952(%rbp), %rax
	movslq	32(%r13),%r9
	cmpq	%r9, 8(%rax)
	jge	.L1187
	movq	-2208(%rbp), %rcx
	movq	%r14, -1936(%rbp)
	movl	$8, %edx
	movq	%rcx, -1944(%rbp)
	movq	16(%r14), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L1191
	movl	32(%rax), %edx
.L1191:
	movq	-2208(%rbp), %rbx
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L1192
	cmpl	32(%rax), %edx
	jb	.L1193
.L1188:
	testq	%rcx, %rcx
	movl	$8, -1928(%rbp)
	je	.L1189
	movl	32(%rcx), %edx
	movl	%edx, -1928(%rbp)
.L1189:
	cmpb	$51, 2(%r14)
	jne	.L4766
	movq	-2208(%rbp), %r10
	cmpb	$51, 2(%r10)
	jne	.L4765
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L1200
	cmpl	$66, %eax
	je	.L5162
.L1204:
	cmpl	$75, %eax
	je	.L1208
	cmpl	$78, %eax
	je	.L1208
.L1203:
	movq	-2208(%rbp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L1213
	cmpl	$66, %eax
	je	.L5163
.L1217:
	cmpl	$75, %eax
	je	.L1221
	cmpl	$78, %eax
	je	.L1221
.L1216:
	movq	-1952(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L1226
	cmpl	$66, %eax
	je	.L5164
.L1230:
	cmpl	$75, %eax
	je	.L1234
	cmpl	$78, %eax
	je	.L1234
.L1229:
	movq	-1936(%rbp), %r10
	cmpw	$66, (%r10)
	jne	.L4764
	movq	-1944(%rbp), %r11
	cmpw	$66, (%r11)
	jne	.L4763
	cmpq	$0, -1952(%rbp)
	je	.L4762
	movq	-1952(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L5165
.L1242:
	shrl	$3, -1928(%rbp)
	xorl	%edi, %edi
	mov	-1928(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -888(%rbp)
	testl	%r12d, %r12d
	je	.L4230
.L1375:
	movslq	%r12d,%rax
	movl	movstr_optab(,%rax,4), %edx
	movq	%rax, -896(%rbp)
	cmpl	$1317, %edx
	je	.L1361
	movq	-1952(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L5166
.L1365:
	testb	$2, target_flags+3(%rip)
	je	.L1366
	movq	-896(%rbp), %rcx
	cmpw	$63, mode_bitsize(%rcx,%rcx)
.L4548:
	jbe	.L1361
.L1364:
	movslq	%edx,%rax
	leaq	(%rax,%rax,4), %rbx
	movq	%rax, -904(%rbp)
	movq	insn_data+24(,%rbx,8), %r13
	movq	(%r13), %rax
	testq	%rax, %rax
	je	.L1368
	movq	-1936(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L1361
.L1368:
	movq	24(%r13), %rax
	testq	%rax, %rax
	jne	.L5167
.L1369:
	movq	72(%r13), %rax
	testq	%rax, %rax
	je	.L1370
	xorl	%esi, %esi
	movq	-888(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L1361
.L1370:
	call	get_last_insn
	movl	$1, %edx
	movq	-1952(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -912(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r13), %rax
	testq	%rax, %rax
	jne	.L5168
.L1371:
	movq	-904(%rbp), %rsi
	movq	-1936(%rbp), %rdi
	xorl	%eax, %eax
	movq	%rbx, %rdx
	movq	-888(%rbp), %rcx
	leaq	(%rsi,%rsi,4), %r10
	movq	-1944(%rbp), %rsi
	call	*insn_data+16(,%r10,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L4496
	movq	-912(%rbp), %rdi
	call	delete_insns_since
.L1361:
	movq	-896(%rbp), %rdx
	movzbl	mode_wider_mode(%rdx), %r12d
	testl	%r12d, %r12d
	jne	.L1375
.L4230:
	testb	$2, target_flags+3(%rip)
	movq	-1936(%rbp), %r13
	movl	$0, volatile_ok(%rip)
	setne	%cl
	movq	8(%r13), %rsi
	movzbl	%cl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-1944(%rbp), %r11
	testb	$2, target_flags+3(%rip)
	setne	%r9b
	movq	%rax, %r13
	movq	8(%r11), %rsi
	movzbl	%r9b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-1952(%rbp), %rsi
	movq	sizetype_tab(%rip), %rdi
	movq	%rax, %rbx
	movzbl	61(%rdi), %r12d
	shrb	$1, %r12b
	movzbl	%r12b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, -1992(%rbp)
	je	.L5169
.L1384:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r13, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	-1992(%rbp), %rsi
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %r11
	movq	%rax, (%rbx)
	movq	(%r12), %rcx
	movq	8(%r11), %rdi
	movq	(%rcx), %r9
	movq	$0, (%r9)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%rdi), %rbx
	movl	$53, %edi
	movq	8(%rbx), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r13)
	je	.L1162
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r13, %rdx
	jmp	.L4571
.L5169:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %rdx
	orb	$1, 49(%rdx)
	movq	fn.1(%rip), %rsi
	orb	$8, 18(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %r10
	orb	$64, 50(%r10)
	movq	fn.1(%rip), %r8
	orb	$2, 18(%r8)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L1384
.L5168:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L1371
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L1371
.L5167:
	movq	-1944(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L1361
	jmp	.L1369
.L1366:
	movq	-896(%rbp), %r8
	cmpw	$31, mode_bitsize(%r8,%r8)
	jmp	.L4548
.L5166:
	movq	mode_mask_array(,%rax,8), %r11
	shrq	$1, %r11
	cmpq	%r11, 8(%rcx)
	jbe	.L1364
	jmp	.L1365
.L5165:
	movq	8(%rcx), %r12
	xorl	%r13d, %r13d
	movl	$17, %esi
.L1255:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4219
.L1252:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L1252
.L4219:
	testl	%edi, %edi
	je	.L1245
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L1254
	call	get_mode_alignment
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L1254
	movzbq	mode_size(%rbx), %r8
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r8
	addq	%rax, %r13
	movq	%rdx, %r12
.L1254:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L1255
.L1245:
	testq	%r12, %r12
	jne	.L4757
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L1258
	movq	ix86_cost(%rip), %r10
	mov	40(%r10), %edx
	cmpq	%rdx, %r13
	jae	.L1242
.L1259:
	movq	-1952(%rbp), %r8
	movq	-1944(%rbp), %rdi
	movq	-1936(%rbp), %rsi
	movq	-1936(%rbp), %r9
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r13b
	movq	8(%rdi), %r8
	movq	$0, -264(%rbp)
	movl	$0, -1972(%rbp)
	movq	%r8, -288(%rbp)
	movzbl	%r13b, %ecx
	movq	8(%rsi), %rbx
	movq	%r9, -320(%rbp)
	leal	5(,%rcx,4), %r13d
	xorl	%ecx, %ecx
	movq	%rbx, -1960(%rbp)
	movq	-1960(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-96(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L1264
	cmpw	$99, %dx
	je	.L1264
	cmpw	$98, %dx
	je	.L1264
.L1263:
	movq	-1960(%rbp), %r10
	movl	%ecx, -304(%rbp)
	xorl	%edx, %edx
	movzwl	(%r10), %eax
	cmpw	$96, %ax
	je	.L1266
	cmpw	$98, %ax
	je	.L1266
.L1265:
	movl	%edx, -256(%rbp)
	movq	-1960(%rbp), %rax
	xorl	%ecx, %ecx
	movq	-1944(%rbp), %rdx
	movq	%rax, -312(%rbp)
	movq	%rdx, -296(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L1269
	cmpw	$99, %dx
	je	.L1269
	cmpw	$98, %dx
	je	.L1269
.L1268:
	movl	-256(%rbp), %eax
	movl	%ecx, -280(%rbp)
	movl	$0, -276(%rbp)
	movl	$0, -300(%rbp)
	testl	%eax, %eax
	je	.L1270
	movq	%r12, -264(%rbp)
.L1270:
	movl	-280(%rbp), %eax
	movq	%r12, -272(%rbp)
	testl	%eax, %eax
	je	.L1272
	movl	-304(%rbp), %eax
	testl	%eax, %eax
	jne	.L1271
.L1272:
	movq	$0, -1968(%rbp)
	movl	$17, %esi
.L1285:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4222
.L1282:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L1282
.L4222:
	testl	%edi, %edi
	je	.L1275
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L1284
	movq	%r8, -2648(%rbp)
	call	get_mode_alignment
	movq	-2648(%rbp), %r8
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L1284
	movzbq	mode_size(%rbx), %r10
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r10
	addq	%rax, -1968(%rbp)
	movq	%rdx, %r12
.L1284:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L1285
.L1275:
	testq	%r12, %r12
	jne	.L4757
	cmpq	$2, -1968(%rbp)
	jbe	.L1271
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4224
.L1293:
	movslq	%ecx,%r11
	movzbl	mode_size(%r11), %edx
	cmpl	%r13d, %edx
	cmovae	-1972(%rbp), %ecx
	movl	%ecx, -1972(%rbp)
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L1293
.L4224:
	movl	-280(%rbp), %eax
	testl	%eax, %eax
	jne	.L1299
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L1297
	cmpw	$54, %dx
	je	.L1297
	cmpw	$55, %dx
	je	.L1297
	cmpw	$58, %dx
	je	.L1297
	cmpw	$134, %dx
	je	.L1297
	cmpw	$56, %dx
	je	.L1297
	cmpw	$140, %dx
	je	.L1297
.L1299:
	movl	-304(%rbp), %r8d
	testl	%r8d, %r8d
	jne	.L1271
	movq	-1960(%rbp), %rsi
	movzwl	(%rsi), %edx
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L1301
	cmpw	$54, %dx
	je	.L1301
	cmpw	$55, %dx
	je	.L1301
	cmpw	$58, %dx
	je	.L1301
	cmpw	$134, %dx
	je	.L1301
	cmpw	$56, %dx
	je	.L1301
	cmpw	$140, %dx
	je	.L1301
.L1271:
	cmpl	$1, %r13d
	jbe	.L1304
.L1355:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4227
.L1311:
	movslq	%ecx,%r12
	movzbl	mode_size(%r12), %edi
	cmpl	%r13d, %edi
	cmovae	-1972(%rbp), %ecx
	movl	%ecx, -1972(%rbp)
	movzbl	mode_wider_mode(%r12), %ecx
	testl	%ecx, %ecx
	jne	.L1311
.L4227:
	movl	-1972(%rbp), %r13d
	testl	%r13d, %r13d
	je	.L1304
	movslq	-1972(%rbp),%rax
	movq	%rax, %rcx
	movq	%rax, -872(%rbp)
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	movl	8(%rcx), %ebx
	cmpl	$1317, %ebx
	je	.L1313
	movl	-1972(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r10d
	cmpl	%eax, %r10d
	jb	.L1313
	movslq	%ebx,%r8
	movq	-872(%rbp), %r11
	leaq	-320(%rbp), %r12
	leaq	(%r8,%r8,4), %r9
	movq	$0, -1984(%rbp)
	movq	insn_data+16(,%r9,8), %rdx
	movq	%rdx, -880(%rbp)
	movzbq	mode_size(%r11), %rdx
	cmpq	%rdx, -272(%rbp)
	movq	%rdx, -1608(%rbp)
	jb	.L1313
	movl	-256(%rbp), %ecx
.L1353:
	testl	%ecx, %ecx
	je	.L1317
	subq	%rdx, 56(%r12)
.L1317:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L1318
	movl	16(%r12), %ebx
	testl	%ebx, %ebx
	je	.L1319
	movl	-1972(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L4544:
	movq	%rax, -1984(%rbp)
.L1318:
	movl	40(%r12), %esi
	testl	%esi, %esi
	je	.L1321
	movq	24(%r12), %rdi
	movl	-1972(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L4545:
	cmpq	$0, (%r12)
	movq	%rax, %r13
	jne	.L5170
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L1327
	movq	-872(%rbp), %rcx
	movzbl	mode_size(%rcx), %edi
	leal	7(%rdi), %edx
	andl	$-8, %edx
.L1328:
	movq	cfun(%rip), %r9
	andl	$33554432, %esi
	movq	16(%r9), %r11
	leaq	8(%r11), %rdi
	movl	8(%r11), %ecx
	je	.L1329
	movq	-872(%rbp), %r8
	movzbl	mode_size(%r8), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L4546:
	movq	-872(%rbp), %rsi
	leal	(%rax,%rcx), %r10d
	movl	%r10d, (%rdi)
	salq	$4, %rsi
	addq	optab_table+384(%rip), %rsi
	movl	8(%rsi), %eax
	cmpl	$1317, %eax
	je	.L1331
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rdi
	movq	insn_data+24(,%rdi,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L1332
	movq	%r13, %rdi
	movl	-1972(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L5171
.L1332:
	leaq	(%rbx,%rbx,4), %rcx
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%rcx,8)
.L4547:
	movq	%rax, %rdi
	call	emit_insn
.L1351:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L1352
	movq	-1608(%rbp), %r13
	addq	%r13, 56(%r12)
.L1352:
	movq	48(%r12), %rdi
	movq	-1608(%rbp), %rdx
	subq	-1608(%rbp), %rdi
	cmpq	%rdx, %rdi
	movq	%rdi, 48(%r12)
	jae	.L1353
.L1313:
	movq	-872(%rbp), %r12
	movzbl	mode_size(%r12), %r13d
	cmpl	$1, %r13d
	ja	.L1355
.L1304:
	cmpq	$0, -272(%rbp)
	jmp	.L4769
.L5171:
	movl	-1972(%rbp), %edi
	movq	%r13, %rsi
	call	force_reg
	movq	%rax, %r13
	jmp	.L1332
.L1331:
	movq	-872(%rbp), %rax
	movzbl	mode_size(%rax), %r11d
	cmpl	%edx, %r11d
	je	.L5172
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r8b
	movzbl	%r8b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L1339:
	movl	-1972(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%esi, %esi
	testq	%rsi, %rsi
	movq	%rax, %rbx
	je	.L1348
	xorl	%esi, %esi
	movq	%rax, %rdi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L5173
.L1348:
	movq	%rbx, %rdi
	movq	%r13, %rsi
	call	emit_move_insn
	jmp	.L1351
.L5173:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L1348
.L5172:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%r9b
	movzbl	%r9b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L1339
.L1329:
	movq	-872(%rbp), %rbx
	movzbl	mode_size(%rbx), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L4546
.L1327:
	movq	-872(%rbp), %rax
	movzbl	mode_size(%rax), %r10d
	leal	1(%r10), %edx
	andl	$-2, %edx
	jmp	.L1328
.L5170:
	movq	%rax, %rsi
	movq	-1984(%rbp), %rdi
	xorl	%eax, %eax
	call	*-880(%rbp)
	jmp	.L4547
.L1321:
	movq	24(%r12), %rdi
	movl	-1972(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L4545
.L1319:
	movl	-1972(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L4544
.L1301:
	movq	-1960(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -312(%rbp)
	jmp	.L1271
.L1297:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -288(%rbp)
	jmp	.L1299
.L1269:
	movl	$1, %ecx
	jmp	.L1268
.L1266:
	movl	$1, %edx
	jmp	.L1265
.L1264:
	movl	$1, %ecx
	jmp	.L1263
.L1258:
	cmpq	$2, %r13
	ja	.L1242
	jmp	.L1259
.L1234:
	movq	-1952(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-1952(%rbp), %r9
	movq	%rax, %r12
	movq	16(%r9), %rdi
	call	protect_from_queue
	movq	-1952(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L5174
.L1236:
	movq	-1952(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -1952(%rbp)
	movq	%r12, 8(%rax)
	movq	-1952(%rbp), %rax
	movq	%rbx, 16(%rax)
	jmp	.L1229
.L5174:
	cmpq	16(%rcx), %rax
	jne	.L1236
	jmp	.L1229
.L5164:
	cmpb	$51, 2(%rdx)
	je	.L1227
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L5175
.L1227:
	cmpl	$66, %eax
	jne	.L1230
	movq	-1952(%rbp), %r13
	xorl	%esi, %esi
	movq	8(%r13), %rdi
	call	protect_from_queue
	movq	-1952(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L1229
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -1952(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L1229
.L5175:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L1228
	movq	-1952(%rbp), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -1952(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L1229
.L1228:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L4543:
	movq	%rax, -1952(%rbp)
	jmp	.L1229
.L1226:
	movq	-1952(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L5176
	movq	-1952(%rbp), %rbx
	movq	24(%rbx), %rax
	testq	%rax, %rax
	jne	.L4543
	movq	-1952(%rbp), %rdx
	movq	8(%rdx), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	-1952(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdi
	movq	%rdi, -1952(%rbp)
	jmp	.L1229
.L5176:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L4543
.L1221:
	movq	-2208(%rbp), %rbx
	xorl	%esi, %esi
	movq	8(%rbx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	%rax, %r12
	movq	-2208(%rbp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	-2208(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L5177
.L1223:
	movq	-2208(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -1944(%rbp)
	movq	%r12, 8(%rax)
	movq	-1944(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L1216
.L5177:
	cmpq	16(%rsi), %rax
	jne	.L1223
	jmp	.L1216
.L5163:
	cmpb	$51, 2(%rbx)
	je	.L1214
	movq	8(%rbx), %r12
	cmpw	$71, (%r12)
	je	.L5178
.L1214:
	cmpl	$66, %eax
	jne	.L1217
	movq	-2208(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	movq	-2208(%rbp), %rdx
	movq	%rax, %rbx
	cmpq	8(%rdx), %rax
	je	.L1216
	movq	%rdx, %rdi
	call	copy_rtx
	movq	%rax, -1944(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L1216
.L5178:
	movq	8(%r12), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L1215
	movq	-2208(%rbp), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -1944(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L1216
.L1215:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L4542:
	movq	%rax, -1944(%rbp)
	jmp	.L1216
.L1213:
	movq	-2208(%rbp), %rdx
	cmpq	$0, 16(%rdx)
	je	.L5179
	movq	-2208(%rbp), %rdx
	movq	24(%rdx), %r8
	testq	%r8, %r8
	movq	%r8, -1944(%rbp)
	jne	.L1216
	movq	-2208(%rbp), %r12
	movq	8(%r12), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r10
	movq	%r10, -1944(%rbp)
	jmp	.L1216
.L5179:
	movq	8(%rdx), %rdi
	call	copy_to_reg
	jmp	.L4542
.L1208:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L5180
.L1210:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -1936(%rbp)
	movq	%r12, 8(%rax)
	movq	-1936(%rbp), %r12
	movq	%rbx, 16(%r12)
	jmp	.L1203
.L5180:
	cmpq	16(%r14), %rax
	jne	.L1210
	jmp	.L1203
.L5162:
	jne	.L1204
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L1203
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -1936(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L1203
.L1200:
	testq	%rsi, %rsi
	je	.L5181
	movq	24(%r14), %r11
	testq	%r11, %r11
	movq	%r11, -1936(%rbp)
	jne	.L1203
	movq	8(%r14), %r13
	movzbl	2(%r13), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rsi
	movq	%rsi, -1936(%rbp)
	jmp	.L1203
.L5181:
	movq	8(%r14), %rdi
	call	copy_to_reg
	movq	%rax, -1936(%rbp)
	jmp	.L1203
.L1193:
	testq	%rsi, %rsi
	movl	$8, -1928(%rbp)
	je	.L1189
	movl	32(%rsi), %r8d
	movl	%r8d, -1928(%rbp)
	jmp	.L1189
.L1192:
	cmpl	$7, %edx
	ja	.L1188
	jmp	.L1193
	.p2align 6,,7
.L1177:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L5182
.L1179:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L1172
.L5182:
	cmpq	16(%r14), %rax
	jne	.L1179
	jmp	.L1172
.L4988:
	jne	.L1173
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L1172
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%rbx, 8(%rax)
	jmp	.L1172
	.p2align 6,,7
.L1169:
	cmpq	$0, 16(%r14)
	je	.L5183
	movq	24(%r14), %rax
	testq	%rax, %rax
	je	.L1181
.L4541:
	movq	%rax, %r14
	jmp	.L1172
.L1181:
	movq	8(%r14), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L1172
.L5183:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L4541
.L4987:
	movq	144(%r13), %rax
	testq	%rax, %rax
	je	.L1164
	cmpq	%rax, %r14
	jne	.L1164
	jmp	.L1162
.L4986:
	movq	%r14, %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L1162
	jmp	.L1163
	.p2align 6,,7
.L1161:
	movq	-2208(%rbp), %rdx
	cmpb	$0, 2(%rdx)
	jne	.L1160
	cmpb	$0, 16(%r13)
	je	.L1160
	movq	8(%r13), %rdx
	movzbl	2(%r14), %edi
	movzbl	61(%rdx), %r10d
	shrb	$1, %r10b
	movzbl	%r10b, %esi
	cmpl	%esi, %edi
	je	.L1160
	movzbl	17(%rdx), %ecx
	movq	-2208(%rbp), %rdx
	shrb	$5, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, -2208(%rbp)
	jmp	.L1160
.L4449:
	movq	-2208(%rbp), %rdi
	movzwl	(%rdi), %edx
	jmp	.L1083
.L4985:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	%r13, %rdi
	movzbl	2(%r14), %edx
	movq	%rax, %rsi
	jmp	.L4540
.L1122:
	xorl	%ecx, %ecx
	testl	%ecx, %ecx
	je	.L4450
	movl	(%r14), %ecx
	movl	%ecx, %edx
	andl	$134283263, %edx
	cmpl	$66, %edx
	je	.L5184
.L1138:
	andl	$268500991, %ecx
	cmpl	$268435519, %ecx
	je	.L5185
	movzbl	2(%r14), %edx
	xorl	%ecx, %ecx
	movq	%r13, %rdi
	movq	%r14, %rsi
	call	expand_expr
	cmpw	$61, (%r14)
	movq	%rax, -2208(%rbp)
	je	.L5186
.L1158:
	movl	(%r14), %eax
	andl	$134283263, %eax
	cmpl	$134217794, %eax
	je	.L4453
	movq	-2208(%rbp), %rdi
	movq	%r14, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L4454
	movq	-2208(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L1159
	cmpw	$54, %dx
	je	.L1159
	cmpw	$55, %dx
	je	.L1159
	cmpw	$58, %dx
	je	.L1159
	cmpw	$134, %dx
	je	.L1159
	cmpw	$56, %dx
	je	.L1159
	cmpw	$140, %dx
	je	.L1159
	xorl	%esi, %esi
	testl	%esi, %esi
	je	.L1083
.L1159:
	movl	$1, -1924(%rbp)
	jmp	.L1083
.L4453:
	movq	-2208(%rbp), %rcx
	movzwl	(%rcx), %edx
	jmp	.L1083
.L5186:
	cmpl	$52, 8(%r14)
	ja	.L1158
.L4452:
	movq	-2208(%rbp), %r9
	movzwl	(%r9), %edx
	jmp	.L1083
.L5185:
	xorl	%r8d, %r8d
	xorl	%edx, %edx
	testl	%r8d, %r8d
	jne	.L1144
	movq	8(%r13), %rsi
	movzbl	16(%rsi), %eax
	cmpb	$6, %al
	je	.L1145
	cmpb	$10, %al
	je	.L1145
	cmpb	$11, %al
	je	.L1145
	cmpb	$12, %al
	je	.L1145
.L1144:
	movq	%rdx, %rsi
	xorl	%ecx, %ecx
	movq	%r13, %rdi
	xorl	%edx, %edx
	call	expand_expr
	movzwl	(%rax), %edx
	movq	%rax, %rbx
	cmpw	$66, %dx
	je	.L5187
.L1147:
	leal	-67(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L1150
	cmpw	$54, %dx
	je	.L1150
	cmpw	$55, %dx
	je	.L1150
	cmpw	$58, %dx
	je	.L1150
	cmpw	$134, %dx
	je	.L1150
	cmpw	$56, %dx
	je	.L1150
	cmpw	$140, %dx
	je	.L1150
.L1149:
	movzbl	3(%r14), %edx
	movq	8(%r14), %rdi
	movq	%rbx, %rsi
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	xorl	%edx, %edx
	testl	%edx, %edx
	je	.L1082
	movzbl	2(%rbx), %edx
	movzbl	2(%r14), %eax
	cmpb	%al, %dl
	je	.L1082
	testb	%dl, %dl
	je	.L1152
	movq	%rbx, %rsi
	movzbl	%al, %edi
	call	gen_lowpart_SUBREG
	movzbl	3(%rax), %ebx
	orb	$16, %bl
	movb	%bl, 3(%rax)
	andb	$-5, %bl
	movzbl	3(%r14), %r8d
	andb	$4, %r8b
	orb	%r8b, %bl
	movb	%bl, 3(%rax)
	jmp	.L1082
.L1152:
	movq	8(%r14), %r10
	movzbl	3(%r14), %ecx
	movzbl	%al, %edi
	movq	%rbx, %rdx
	movzbl	2(%r10), %esi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	jmp	.L1082
.L1150:
	cmpb	$0, 2(%rbx)
	jne	.L1149
	movq	8(%r13), %rcx
	movzbl	2(%r14), %edi
	movq	%rbx, %rdx
	movzbl	61(%rcx), %r9d
	movzbl	3(%r14), %ecx
	shrb	$1, %r9b
	shrb	$2, %cl
	movzbl	%r9b, %esi
	andl	$1, %ecx
	call	convert_modes
	movzbl	3(%r14), %ecx
	movzbl	2(%r14), %esi
	movq	8(%r14), %r13
	movq	%rax, %rdx
	movzbl	2(%r13), %edi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, %rbx
	jmp	.L1149
.L5187:
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L1147
	testb	$8, 3(%rax)
	jne	.L1148
	movq	8(%r14), %rdi
	movq	8(%rax), %rsi
	call	reg_mentioned_p
	testl	%eax, %eax
	je	.L4451
.L1148:
	movq	%rbx, %rdi
	call	copy_to_reg
	movq	%rax, %rbx
.L4451:
	movzwl	(%rbx), %edx
	jmp	.L1147
.L1145:
	cmpq	$0, 8(%rsi)
	jne	.L1144
	movzbl	3(%r14), %ecx
	movzbl	17(%rsi), %r10d
	movl	$1, %edi
	movl	%ecx, %r11d
	shrb	$5, %r10b
	shrb	$2, %r11b
	andl	$1, %r10d
	andl	%r11d, %edi
	cmpl	%edi, %r10d
	je	.L1146
	call	signed_or_unsigned_type
	movq	%r13, %rsi
	movq	%rax, %rdi
	call	convert
	movzbl	3(%r14), %ecx
	movq	%rax, %r13
.L1146:
	movq	8(%r14), %rsi
	shrb	$2, %cl
	movzbl	2(%rsi), %edi
	movl	$1, %esi
	andl	%ecx, %esi
	call	type_for_mode
	movq	%r13, %rsi
	movq	%rax, %rdi
	call	convert
	movq	8(%r14), %rdx
	movq	%rax, %r13
	jmp	.L1144
.L5184:
	movzbl	2(%r14), %eax
	cmpb	$51, %al
	je	.L1138
	movzbl	%al, %edx
	xorl	%ecx, %ecx
	movq	%r13, %rdi
	movq	%r14, %rsi
	call	expand_expr
	movq	%rax, -2208(%rbp)
	movq	%rax, %rdx
	movzbl	2(%rax), %eax
	cmpb	$51, %al
	je	.L1139
	testb	%al, %al
	je	.L1139
	cmpq	%r14, %rdx
	je	.L1141
	movq	%rdx, %rdi
	movq	%r14, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L5188
.L1140:
	movq	-2208(%rbp), %rdi
	call	copy_to_reg
	movq	%rax, -2208(%rbp)
.L1139:
	movl	$1, -1924(%rbp)
	jmp	.L4452
.L5188:
	movq	-2208(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L1140
	movq	%r14, %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L1140
.L1141:
	movl	$1, %r12d
	jmp	.L1140
	.p2align 6,,7
.L4450:
	movl	(%r14), %ecx
	jmp	.L1138
.L1131:
	movl	$1, %ebx
	jmp	.L1125
.L1132:
	xorl	%ebx, %ebx
	jmp	.L1125
.L1129:
	movq	8(%r14), %rdi
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L1131
	movq	16(%r14), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L1125
	jmp	.L1131
	.p2align 6,,7
.L4984:
	cmpb	$51, 2(%r14)
	jne	.L1084
	call	gen_label_rtx
	movq	%rax, -856(%rbp)
	call	gen_label_rtx
	movq	cfun(%rip), %rbx
	movq	%rax, -864(%rbp)
	movq	16(%rbx), %rsi
	movq	40(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L4212
.L1090:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L5189
	call	emit_insn
	movq	%rax, 16(%rbx)
.L1089:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %r9
	movq	16(%rdx), %rcx
	testq	%r9, %r9
	movq	%r9, %rbx
	movq	%r9, 40(%rcx)
	jne	.L1090
.L4212:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L1092
	cmpl	$66, %eax
	je	.L5190
.L1096:
	cmpl	$75, %eax
	je	.L1100
	cmpl	$78, %eax
	je	.L1100
.L1095:
	call	do_pending_stack_adjust
	movq	cfun(%rip), %rbx
	movq	16(%rbx), %rsi
	incl	4(%rsi)
	movq	-856(%rbp), %rsi
	movq	32(%r13), %rdi
	call	jumpifnot
	call	start_cleanup_deferral
	movq	40(%r13), %rdi
	xorl	%edx, %edx
	movq	%r14, %rsi
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %rdi
	movq	16(%rdi), %r10
	movq	40(%r10), %rbx
	testq	%rbx, %rbx
	je	.L4214
.L1110:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L5191
	call	emit_insn
	movq	%rax, 16(%rbx)
.L1109:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %r9
	movq	16(%rdx), %rcx
	testq	%r9, %r9
	movq	%r9, %rbx
	movq	%r9, 40(%rcx)
	jne	.L1110
.L4214:
	movq	-864(%rbp), %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	-856(%rbp), %rdi
	call	emit_label
	call	start_cleanup_deferral
	movq	48(%r13), %rdi
	movq	%r14, %rsi
	xorl	%edx, %edx
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %r14
	movq	16(%r14), %r13
	movq	40(%r13), %rbx
	testq	%rbx, %rbx
	je	.L4216
.L1117:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L5192
	call	emit_insn
	movq	%rax, 16(%rbx)
.L1116:
	movq	cfun(%rip), %r11
	movq	40(%rbx), %rdi
	movq	16(%r11), %rsi
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%rsi)
	jne	.L1117
.L4216:
	movq	-864(%rbp), %rdi
	call	emit_label
	movq	cfun(%rip), %r12
	movq	16(%r12), %rbx
	decl	4(%rbx)
	jmp	.L1082
.L5192:
	movq	8(%rdi), %r10
	movq	8(%r10), %r8
	movq	%r8, 16(%rbx)
	call	emit_insn
	jmp	.L1116
.L5191:
	movq	8(%rdi), %r12
	movq	8(%r12), %r11
	movq	%r11, 16(%rbx)
	call	emit_insn
	jmp	.L1109
.L1100:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L5193
.L1102:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L1095
.L5193:
	cmpq	16(%r14), %rax
	jne	.L1102
	jmp	.L1095
	.p2align 6,,7
.L5190:
	jne	.L1096
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L1095
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%rbx, 8(%rax)
	jmp	.L1095
	.p2align 6,,7
.L1092:
	cmpq	$0, 16(%r14)
	je	.L5194
	movq	24(%r14), %rax
	testq	%rax, %rax
	je	.L1104
.L4539:
	movq	%rax, %r14
	jmp	.L1095
.L1104:
	movq	8(%r14), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L1095
.L5194:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L4539
	.p2align 6,,7
.L5189:
	movq	8(%rdi), %r12
	movq	8(%r12), %r11
	movq	%r11, 16(%rbx)
	call	emit_insn
	jmp	.L1089
.L4983:
	movq	32(%r13), %rdi
	movq	const_int_rtx+512(%rip), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	cfun(%rip), %rdx
	movq	16(%rdx), %r12
	movq	40(%r12), %rbx
	testq	%rbx, %rbx
	je	.L4210
.L1080:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L5195
	call	emit_insn
	movq	%rax, 16(%rbx)
.L1079:
	movq	cfun(%rip), %rdi
	movq	40(%rbx), %r8
	movq	16(%rdi), %r10
	testq	%r8, %r8
	movq	%r8, %rbx
	movq	%r8, 40(%r10)
	jne	.L1080
.L4210:
	movq	40(%r13), %rdi
	movq	%r14, %rsi
	xorl	%edx, %edx
	call	store_expr
	jmp	.L1082
.L5195:
	movq	8(%rdi), %rcx
	movq	8(%rcx), %r9
	movq	%r9, 16(%rbx)
	call	emit_insn
	jmp	.L1079
.L4982:
	cmpq	$0, 48(%r15)
	jne	.L1066
	movq	const_int_rtx+512(%rip), %rsi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%r15, %rdi
	call	expand_expr
	movq	cfun(%rip), %rbx
	movq	16(%rbx), %rcx
	movq	40(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L1066
.L1072:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L5196
	call	emit_insn
	movq	%rax, 16(%rbx)
.L1071:
	movq	cfun(%rip), %r11
	movq	40(%rbx), %rdi
	movq	16(%r11), %rsi
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%rsi)
	jne	.L1072
	jmp	.L1066
.L5196:
	movq	8(%rdi), %r10
	movq	8(%r10), %r8
	movq	%r8, 16(%rbx)
	call	emit_insn
	jmp	.L1071
.L4981:
	movq	-824(%rbp), %rdi
	xorl	%esi, %esi
	call	host_integerp
	testl	%eax, %eax
	je	.L1041
	xorl	%esi, %esi
	movq	%r13, %rdi
	call	tree_low_cst
	xorl	%esi, %esi
	movq	-824(%rbp), %rdi
	movq	%rax, %r12
	call	tree_low_cst
	movq	-1744(%rbp), %r9
	movq	%rax, %r14
	subq	%r12, %rax
	leaq	1(%rax), %rbx
	cmpw	$66, (%r9)
	je	.L5197
.L1042:
	subq	-1824(%rbp), %r14
	movq	%r12, %r13
	subq	-1824(%rbp), %r13
	cmpq	%r14, %r13
	movq	%r14, -1912(%rbp)
	jg	.L1005
	movq	-1904(%rbp), %rbx
	shrq	$3, %rbx
	movq	%rbx, -848(%rbp)
.L1064:
	movq	-784(%rbp), %r8
	xorl	%esi, %esi
	movq	%r13, %rbx
	movq	32(%r8), %rdi
	call	tree_low_cst
	movq	-1744(%rbp), %rsi
	imulq	%rax, %rbx
	movl	(%rsi), %eax
	andl	$16842751, %eax
	cmpl	$66, %eax
	je	.L5198
.L1047:
	movq	-784(%rbp), %rdi
	movq	-1744(%rbp), %r12
	call	get_alias_set
	cmpb	$46, 16(%r15)
	movl	%eax, %r14d
	je	.L5199
.L1048:
	movq	-720(%rbp), %r9
	movq	-1744(%rbp), %rdi
	movq	%rbx, %rdx
	movq	-1904(%rbp), %rsi
	movl	-812(%rbp), %ecx
	movq	%r15, %r8
	movl	$0, (%rsp)
	movl	%r14d, 16(%rsp)
	movq	%r9, 8(%rsp)
	xorl	%r9d, %r9d
	call	store_field
.L1045:
	incq	%r13
	cmpq	-1912(%rbp), %r13
	jle	.L1064
	jmp	.L1005
.L5199:
	testl	$7, %ebx 
	jne	.L1048
	testq	%rbx, %rbx
	je	.L4447
	movq	-1744(%rbp), %rdi
	cmpw	$66, (%rdi)
	jne	.L1048
.L4508:
	movq	-1744(%rbp), %rsi
	movzbl	2(%rsi), %eax
	cmpb	$51, %al
	je	.L1057
	movzbl	%al, %edi
	call	get_mode_alignment
	xorl	%esi, %esi
	mov	%eax, %r12d
	movq	%rbx, %rax
	cqto
	idivq	%r12
	testq	%rdx, %rdx
	je	.L1056
.L1057:
	movl	$51, %esi
.L1056:
	cmpq	$-1, %rbx
	leaq	7(%rbx), %rdx
	movq	-1744(%rbp), %rdi
	cmovle	%rdx, %rbx
	movl	$1, %ecx
	movl	$1, %r8d
	sarq	$3, %rbx
	movq	%rbx, %rdx
	call	adjust_address_1
	movq	%rax, %r12
.L1050:
	movl	(%r12), %eax
	andl	$16842751, %eax
	cmpl	$66, %eax
	je	.L5200
.L1059:
	movl	-1884(%rbp), %edx
	movq	-848(%rbp), %rcx
	movq	%r15, %rdi
	movq	%r12, %rsi
	call	store_constructor
	jmp	.L1045
.L5200:
	movq	16(%r12), %rax
	testq	%rax, %rax
	je	.L1059
	cmpq	$0, (%rax)
	je	.L1059
	movq	%r12, %rdi
	call	copy_rtx
	movslq	%r14d,%rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	set_mem_alias_set
	jmp	.L1059
.L4447:
	movq	-1744(%rbp), %r10
	cmpw	$66, (%r10)
	jne	.L1050
	jmp	.L4508
.L5198:
	movq	-720(%rbp), %rax
	cmpb	$18, 16(%rax)
	jne	.L1047
	testb	$8, 62(%rax)
	je	.L1047
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -1744(%rbp)
	orb	$1, 3(%rax)
	jmp	.L1047
.L5197:
	cmpq	$2, %rbx
	jle	.L1042
	movq	-784(%rbp), %rcx
	movl	$1, %esi
	movq	32(%rcx), %rdi
	call	host_integerp
	testl	%eax, %eax
	je	.L1041
	movq	-784(%rbp), %rax
	movl	$1, %esi
	movq	32(%rax), %rdi
	call	tree_low_cst
	imulq	%rbx, %rax
	cmpq	$320, %rax
	jg	.L1041
	jmp	.L1042
	.p2align 6,,7
.L4868:
	movq	32(%rcx), %rdi
	movl	$1, %esi
	call	host_integerp
	testl	%eax, %eax
	jne	.L5201
	movq	$-1, -1904(%rbp)
	jmp	.L1039
.L5201:
	movq	-784(%rbp), %r11
	movl	$1, %esi
	movq	32(%r11), %rdi
	call	tree_low_cst
	jmp	.L4538
.L1014:
	movq	%r15, %rdi
	call	integer_zerop
.L4537:
	movl	%eax, %ebx
	jmp	.L1013
.L1015:
	movq	32(%r15), %rdi
	xorl	%ebx, %ebx
	call	is_zeros_p
	testl	%eax, %eax
	je	.L1013
	movq	40(%r15), %rdi
	call	is_zeros_p
	testl	%eax, %eax
	je	.L1013
.L4206:
	movl	$1, %ebx
	jmp	.L1013
.L1017:
	leaq	32(%r15), %rsi
	movl	$dconst0, %edi
	movl	$24, %ecx
	cld
	repz
	cmpsb
.L4536:
	sete	%r8b
	movzbl	%r8b, %ebx
	jmp	.L1013
.L1035:
	cmpl	$46, %eax
	je	.L1025
	cmpl	$46, %eax
	jb	.L1033
	subl	$114, %eax
	cmpl	$3, %eax
	ja	.L1033
	movq	32(%r15), %rdi
	call	is_zeros_p
	jmp	.L4537
.L1025:
	movq	8(%r15), %rax
	testq	%rax, %rax
	je	.L1026
	cmpb	$19, 16(%rax)
	je	.L5202
.L1026:
	movq	40(%r15), %rbx
	testq	%rbx, %rbx
	je	.L4206
.L1032:
	movq	32(%rbx), %rdi
	call	is_zeros_p
	testl	%eax, %eax
	je	.L1033
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1032
	jmp	.L4206
.L5202:
	cmpq	$0, 40(%r15)
	jmp	.L4536
	.p2align 6,,7
.L1018:
	movq	32(%r15), %rbx
	testq	%rbx, %rbx
	je	.L4206
.L1024:
	movq	32(%rbx), %rdi
	call	is_zeros_p
	testl	%eax, %eax
	je	.L1033
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1024
	jmp	.L4206
.L4867:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r13, %rdx
	call	gen_rtx_fmt_e
.L4534:
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L865
.L4866:
	movl	$.LC7, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.0(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.0(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.0, %edi
	movq	%rax, fn.0(%rip)
	call	ggc_add_tree_root
	movq	fn.0(%rip), %rdi
	xorl	%esi, %esi
	orb	$1, 49(%rdi)
	movq	fn.0(%rip), %r8
	orb	$8, 18(%r8)
	movq	fn.0(%rip), %rcx
	orb	$64, 50(%rcx)
	movq	fn.0(%rip), %r12
	orb	$2, 18(%r12)
	movq	fn.0(%rip), %rdi
	call	make_decl_rtl
	movq	fn.0(%rip), %rdi
	call	assemble_external
	jmp	.L999
.L4865:
	movq	%r15, %rdi
	movl	%ebx, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L990
	movq	%r15, %rsi
	movl	%ebx, %edi
	call	copy_to_mode_reg
	movq	%rax, %r15
	jmp	.L990
	.p2align 6,,7
.L986:
	cmpw	$31, mode_bitsize(%r12,%r12)
	jmp	.L4533
.L4864:
	movq	mode_mask_array(,%r12,8), %r14
	shrq	$1, %r14
	cmpq	%r14, 8(%rcx)
	jbe	.L984
	jmp	.L985
.L4863:
	movq	8(%rax), %r12
	xorl	%r13d, %r13d
	movl	$17, %esi
	movl	$128, %r14d
.L913:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4190
.L910:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L910
.L4190:
	testl	%edi, %edi
	je	.L903
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L912
	call	get_mode_alignment
	cmpl	%eax, %r14d
	jb	.L912
	movzbq	mode_size(%rbx), %r8
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r8
	addq	%rax, %r13
	movq	%rdx, %r12
.L912:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L913
.L903:
	testq	%r12, %r12
	jne	.L4757
	movl	optimize_size(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L916
	movq	ix86_cost(%rip), %r14
	mov	40(%r14), %r9d
	cmpq	%r9, %r13
	jae	.L900
.L917:
	movq	-1872(%rbp), %rdi
	movq	-1864(%rbp), %rax
	testb	$2, target_flags+3(%rip)
	setne	%dl
	xorl	%esi, %esi
	xorl	%r14d, %r14d
	movq	8(%rdi), %r13
	movq	%rax, -240(%rbp)
	movq	$0, -192(%rbp)
	movq	$clear_by_pieces_1, -200(%rbp)
	movq	%r13, -216(%rbp)
	movzbl	%dl, %ebx 
	movq	8(%rax), %r8
	movq	$0, -208(%rbp)
	leaq	-240(%rbp), %r13
	leaq	5(,%rbx,4), %r12
	leaq	16(%r13), %rcx
	movq	%r8, -232(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L921
	cmpw	$99, %dx
	je	.L921
	cmpw	$98, %dx
	je	.L921
.L920:
	movl	%esi, (%rcx)
	movl	$0, 20(%r13)
	leaq	56(%r13), %rdx
	movzwl	(%r8), %eax
	xorl	%ecx, %ecx
	cmpw	$96, %ax
	je	.L923
	cmpw	$98, %ax
	je	.L923
.L922:
	movl	%ecx, (%rdx)
	movl	56(%r13), %esi
	testl	%esi, %esi
	je	.L924
	movq	24(%r13), %r10
	movq	%r10, 32(%r13)
.L924:
	movl	16(%r13), %r11d
	testl	%r11d, %r11d
	jne	.L925
	movq	24(%r13), %r15
	movq	$0, -1880(%rbp)
	movl	$17, %esi
.L938:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L4193
.L935:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L935
.L4193:
	testl	%edi, %edi
	je	.L928
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L937
	movq	%r8, -2648(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-2648(%rbp), %r8
	jb	.L937
	movzbq	mode_size(%rbx), %rsi
	movq	%r15, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, -1880(%rbp)
	movq	%rdx, %r15
.L937:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L938
.L928:
	testq	%r15, %r15
	jne	.L4757
	cmpq	$2, -1880(%rbp)
	jbe	.L925
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4195
.L946:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rdx
	cmpq	%r12, %rdx
	cmovb	%ecx, %r14d
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L946
.L4195:
	movl	16(%r13), %eax
	testl	%eax, %eax
	jne	.L925
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L950
	cmpw	$54, %dx
	je	.L950
	cmpw	$55, %dx
	je	.L950
	cmpw	$58, %dx
	je	.L950
	cmpw	$134, %dx
	je	.L950
	cmpw	$56, %dx
	je	.L950
	cmpw	$140, %dx
	je	.L950
.L925:
	cmpq	$1, %r12
	jbe	.L953
.L974:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4198
.L960:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rbx
	cmpq	%r12, %rbx
	cmovb	%ecx, %r14d
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L960
.L4198:
	testl	%r14d, %r14d
	je	.L953
	movslq	%r14d,%r15
	movq	%r15, %r12
	salq	$4, %r12
	addq	optab_table+240(%rip), %r12
	movl	8(%r12), %ebx
	cmpl	$1317, %ebx
	je	.L962
	movl	%r14d, %edi
	call	get_mode_alignment
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L962
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rsi
	leaq	(%rsi,%rsi,4), %rdi
	cmpq	%rdx, 24(%r13)
	movq	insn_data+16(,%rdi,8), %r8
	movq	%rdx, %r12
	movq	%r8, -792(%rbp)
	jb	.L962
	movl	56(%r13), %ecx
.L972:
	testl	%ecx, %ecx
	je	.L966
	subq	%rdx, 32(%r13)
.L966:
	movl	16(%r13), %r10d
	testl	%r10d, %r10d
	je	.L967
	movq	(%r13), %rdi
	movq	8(%r13), %rdx
	movl	%r14d, %esi
	movq	32(%r13), %rcx
	movl	$1, %r8d
	call	adjust_automodify_address_1
.L4532:
	movl	%r14d, %edx
	movq	%rax, %rbx
	movq	48(%r13), %rdi
	movq	32(%r13), %rsi
	call	*40(%r13)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	*-792(%rbp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%r13), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L971
	addq	%r12, 32(%r13)
.L971:
	movq	24(%r13), %r11
	movq	%r12, %rdx
	subq	%r12, %r11
	cmpq	%r12, %r11
	movq	%r11, 24(%r13)
	jae	.L972
.L962:
	movzbq	mode_size(%r15), %r12
	cmpq	$1, %r12
	ja	.L974
.L953:
	cmpq	$0, 24(%r13)
	je	.L865
	jmp	.L4756
	.p2align 6,,7
.L967:
	movq	(%r13), %rdi
	movq	32(%r13), %rdx
	movl	%r14d, %esi
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L4532
.L950:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, 8(%r13)
	jmp	.L925
.L923:
	movl	$1, %ecx
	jmp	.L922
.L921:
	movl	$1, %esi
	jmp	.L920
.L916:
	cmpq	$2, %r13
	ja	.L900
	jmp	.L917
.L895:
	movq	-1872(%rbp), %r12
	xorl	%esi, %esi
	movq	8(%r12), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-1872(%rbp), %r8
	movq	%rax, %r12
	movq	16(%r8), %rdi
	call	protect_from_queue
	movq	-1872(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L5203
.L897:
	movq	-1872(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -1872(%rbp)
	movq	%r12, 8(%rax)
	movq	-1872(%rbp), %rax
	movq	%rbx, 16(%rax)
	jmp	.L890
.L5203:
	cmpq	16(%rcx), %rax
	jne	.L897
	jmp	.L890
.L4862:
	cmpb	$51, 2(%rdx)
	je	.L888
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L5204
.L888:
	cmpl	$66, %eax
	jne	.L891
	movq	-1872(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	movq	-1872(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L890
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -1872(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L890
.L5204:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L889
	movq	-1872(%rbp), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -1872(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L890
.L889:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L4531:
	movq	%rax, -1872(%rbp)
	jmp	.L890
.L887:
	movq	-1872(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L5205
	movq	-1872(%rbp), %r9
	movq	24(%r9), %rax
	testq	%rax, %rax
	jne	.L4531
	movq	-1872(%rbp), %rdi
	movq	8(%rdi), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	-1872(%rbp), %r13
	movq	%rax, %rdi
	movq	8(%r13), %rsi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r14
	movq	%r14, -1872(%rbp)
	jmp	.L890
.L5205:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L4531
.L882:
	movq	-1744(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-1744(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L5206
.L884:
	movq	-1744(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -1864(%rbp)
	movq	%r12, 8(%rax)
	movq	-1864(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L877
.L5206:
	cmpq	16(%rsi), %rax
	jne	.L884
	jmp	.L877
.L4861:
	jne	.L878
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-1744(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L877
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -1864(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L877
	.p2align 6,,7
.L874:
	movq	-1744(%rbp), %rdx
	cmpq	$0, 16(%rdx)
	je	.L5207
	movq	-1744(%rbp), %rdx
	movq	24(%rdx), %rbx
	testq	%rbx, %rbx
	movq	%rbx, -1864(%rbp)
	jne	.L877
	movq	-1744(%rbp), %r13
	movq	8(%r13), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r10
	movq	%r10, -1864(%rbp)
	jmp	.L877
.L5207:
	movq	8(%rdx), %rdi
	call	copy_to_reg
	movq	%rax, -1864(%rbp)
	jmp	.L877
.L4860:
	movzbl	%al, %edx 
	movzbl	mode_size(%rdx), %r9d
	cmpl	8(%rsi), %r9d
	jne	.L872
	movq	%rbx, %rdi
	movq	const_tiny_rtx(,%rdx,8), %rsi
.L4535:
	call	emit_move_insn
	jmp	.L865
.L4859:
	movq	16(%rax), %rax
	movl	$8, %r15d
	testq	%rax, %rax
	je	.L869
	movl	32(%rax), %r15d
	jmp	.L869
.L4858:
	movzbq	2(%rbx), %rcx
	movq	%rbx, %rdi
	movq	const_tiny_rtx(,%rcx,8), %rsi
	jmp	.L4535
.L864:
	movq	-1744(%rbp), %r13
	cmpw	$61, (%r13)
	jne	.L1001
	movq	-1744(%rbp), %rdx
	movl	$49, %edi
	xorl	%esi, %esi
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L1001
.L815:
	movl	-1852(%rbp), %edi
	testl	%edi, %edi
	jne	.L4445
	movq	-1824(%rbp), %r10
	subq	%r10, -1816(%rbp)
	movq	-1816(%rbp), %rdx
	incq	%rdx
	cmpq	%rdx, -1848(%rbp)
	jl	.L863
	movq	-1840(%rbp), %r15
	movq	-1848(%rbp), %rsi
	salq	$2, %r15
	leaq	(%rsi,%rsi,2), %r14
	cmpq	%r14, %r15
	jl	.L813
.L863:
	movl	$1, -1852(%rbp)
.L813:
	movl	-1852(%rbp), %r13d
	testl	%r13d, %r13d
	je	.L864
	jmp	.L4445
.L839:
	movq	%r13, %rdi
	call	integer_zerop
.L4529:
	movl	%eax, %r12d
	jmp	.L838
.L840:
	movq	32(%r13), %rdi
	xorl	%r12d, %r12d
	call	is_zeros_p
	testl	%eax, %eax
	je	.L838
	movq	40(%r13), %rdi
	call	is_zeros_p
	testl	%eax, %eax
	je	.L838
.L4187:
	movl	$1, %r12d
	jmp	.L838
.L842:
	leaq	32(%r13), %rsi
	movl	$dconst0, %edi
	movl	$24, %ecx
	cld
	repz
	cmpsb
.L4528:
	sete	%r8b
	movzbl	%r8b, %r12d
	jmp	.L838
.L860:
	cmpl	$46, %eax
	je	.L850
	cmpl	$46, %eax
	jb	.L858
	subl	$114, %eax
	cmpl	$3, %eax
	ja	.L858
	movq	32(%r13), %rdi
	call	is_zeros_p
	jmp	.L4529
.L850:
	movq	8(%r13), %rax
	testq	%rax, %rax
	je	.L851
	cmpb	$19, 16(%rax)
	je	.L5208
.L851:
	movq	40(%r13), %r12
	testq	%r12, %r12
	je	.L4187
.L857:
	movq	32(%r12), %rdi
	call	is_zeros_p
	testl	%eax, %eax
	je	.L858
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.L857
	jmp	.L4187
.L5208:
	cmpq	$0, 40(%r13)
	jmp	.L4528
	.p2align 6,,7
.L843:
	movq	32(%r13), %r12
	testq	%r12, %r12
	je	.L4187
.L849:
	movq	32(%r12), %rdi
	call	is_zeros_p
	testl	%eax, %eax
	je	.L858
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.L849
	jmp	.L4187
.L4857:
	movq	8(%r13), %rax
	xorl	%r15d, %r15d
	xorl	%r14d, %r14d
	movq	40(%r13), %r12
	testq	%rax, %rax
	je	.L825
	cmpb	$19, 16(%rax)
	je	.L5209
.L825:
	testq	%r12, %r12
	jne	.L832
.L4183:
	leal	0(,%r14,4), %ecx
	leal	(%r15,%r15,2), %r11d
	cmpl	%r11d, %ecx
	setge	%al
.L4530:
	movzbl	%al, %edx
	jmp	.L826
.L832:
	movq	32(%r12), %rdi
	leal	1(%r14), %r13d
	call	mostly_zeros_p
	movq	(%r12), %r12
	testl	%eax, %eax
	cmovne	%r13d, %r14d
	incl	%r15d
	testq	%r12, %r12
	jne	.L832
	jmp	.L4183
.L5209:
	testq	%r12, %r12
	sete	%al
	jmp	.L4530
.L4856:
	movq	32(%rax), %r12
	movl	$1, %esi
	movq	40(%rax), %rbx
	movq	%r12, %rdi
	call	host_integerp
	testl	%eax, %eax
	je	.L821
	movq	%rbx, %rdi
	movl	$1, %esi
	call	host_integerp
	testl	%eax, %eax
	je	.L821
	movq	%rbx, %rdi
	movl	$1, %esi
	call	tree_low_cst
	movl	$1, %esi
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	tree_low_cst
	subq	%rax, %rbx
	incq	%rbx
	jmp	.L822
.L821:
	movl	$1, -1852(%rbp)
	jmp	.L815
	.p2align 6,,7
.L4855:
	movq	-704(%rbp), %r9
	testb	$4, 18(%r9)
	jne	.L863
	jmp	.L811
.L4854:
	movq	-1800(%rbp), %r8
	xorl	%esi, %esi
	movq	104(%r8), %rdi
	call	tree_low_cst
	xorl	%esi, %esi
	movq	%rax, -1824(%rbp)
	movq	-1800(%rbp), %rax
	movq	112(%rax), %rdi
	call	tree_low_cst
	movq	%rax, -1816(%rbp)
	jmp	.L810
.L4853:
	xorl	%esi, %esi
	call	host_integerp
	testl	%eax, %eax
	je	.L809
	movq	-1800(%rbp), %rcx
	xorl	%esi, %esi
	movq	112(%rcx), %rdi
	call	host_integerp
	testl	%eax, %eax
	movl	$1, %eax
	cmove	-1804(%rbp), %eax
	movl	%eax, -1804(%rbp)
	jmp	.L809
.L4852:
	movq	24(%rcx), %r11
	movq	8(%r11), %rsi
	movq	24(%rsi), %r13
	movq	%r13, -1800(%rbp)
	jmp	.L808
.LFE6:
.Lfe6:
	.size	store_constructor,.Lfe6-store_constructor
	.section	.rodata.str1.1
.LC14:
	.string	"store_field"
	.text
	.align 2
	.p2align 4,,15
	.type	store_field,@function
store_field:
.LFB7:
	pushq	%rbp
.LCFI32:
	movq	%rsp, %rbp
.LCFI33:
	pushq	%r15
.LCFI34:
	movq	%r8, %r15
	pushq	%r14
.LCFI35:
	xorl	%r14d, %r14d
	pushq	%r13
.LCFI36:
	movq	%rdx, %r13
	pushq	%r12
.LCFI37:
	movq	%rsi, %r12
	pushq	%rbx
.LCFI38:
	movl	%ecx, %ebx
	subq	$1464, %rsp
.LCFI39:
	movl	%r9d, -356(%rbp)
	movq	%rdi, -1128(%rbp)
	movzbl	16(%r8), %edx
	testb	%dl, %dl
	je	.L6341
	testq	%rsi, %rsi
	je	.L7600
	cmpq	$63, %rsi
	ja	.L5213
	movl	$1, %esi
	movl	%r12d, %ecx
	salq	%cl, %rsi
	leaq	-1(%rsi), %r14
.L5213:
	cmpl	$51, %ebx
	je	.L7601
	movq	-1128(%rbp), %rsi
	movzwl	(%rsi), %eax
.L5215:
	cmpw	$65, %ax
	je	.L7602
	testl	%ebx, %ebx
	je	.L6130
	cmpl	$51, %ebx
	je	.L6131
	movslq	%ebx,%rdx
	cmpb	$0, direct_store(%rdx)
	jne	.L6131
	movl	mode_class(,%rdx,4), %edx
	cmpl	$5, %edx
	je	.L6131
	cmpl	$6, %edx
	je	.L6131
.L6130:
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movq	%r15, %rdi
	call	expand_expr
	testl	%ebx, %ebx
	movq	%rax, -1432(%rbp)
	je	.L6133
	cmpl	$51, %ebx
	je	.L6133
	movq	8(%r15), %r9
	movzbl	61(%r9), %edi
	shrb	$1, %dil
	movzbl	%dil, %esi
	cmpl	%esi, %ebx
	je	.L6133
	movq	-1432(%rbp), %rdx
	movl	%ebx, %edi
	movl	$1, %ecx
	call	convert_modes
	movq	%rax, -1432(%rbp)
.L6133:
	movq	-1128(%rbp), %rdx
	cmpb	$51, 2(%rdx)
	je	.L7603
.L6134:
	movq	24(%rbp), %rdi
	call	int_size_in_bytes
	movq	-1432(%rbp), %r8
	movl	%ebx, %ecx
	movq	-1128(%rbp), %rdi
	movq	%r12, %rsi
	movq	%r13, %rdx
	movq	%rax, %r9
	call	store_bit_field
	movl	-356(%rbp), %eax
	testl	%eax, %eax
	je	.L6341
	testq	%r14, %r14
	je	.L6342
	movq	-1128(%rbp), %r11
	movl	(%r11), %eax
	andl	$134283263, %eax
	cmpl	$134217794, %eax
	je	.L6342
	movq	-1432(%rbp), %rbx
	movl	16(%rbp), %eax
	movzbl	2(%rbx), %r13d
	testl	%r13d, %r13d
	cmove	-356(%rbp), %r13d
	testl	%eax, %eax
	je	.L6344
	movq	%r14, %rdi
	movl	%r13d, %esi
	call	trunc_int_for_mode
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	gen_rtx_CONST_INT
	xorl	%ecx, %ecx
	movq	%rbx, %rsi
	movl	%r13d, %edi
	movq	%rax, %rdx
	call	expand_and
	.p2align 4,,7
.L7524:
	movq	%rax, %r14
.L5210:
	leaq	-40(%rbp), %rsp
	movq	%r14, %rax
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
.L6344:
	movslq	%r13d,%r8
	xorl	%esi, %esi
	movzwq	mode_bitsize(%r8,%r8), %rdi
	subq	%r12, %rdi
	call	build_int_2_wide
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	-1432(%rbp), %rdx
	movl	%r13d, %esi
	movl	$82, %edi
	movq	%rax, %rcx
	movq	%rax, %r15
	call	expand_shift
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movl	$83, %edi
	movl	%r13d, %esi
	movq	%rax, %rdx
	movq	%r15, %rcx
	call	expand_shift
	jmp	.L7524
.L6342:
	movq	24(%rbp), %rdi
	call	int_size_in_bytes
	movl	-356(%rbp), %r9d
	xorl	%r8d, %r8d
	movq	-1128(%rbp), %rdi
	movl	16(%rbp), %ecx
	movq	%r12, %rsi
	movq	%r13, %rdx
	movl	$0, (%rsp)
	movq	%rax, 8(%rsp)
	call	extract_bit_field
	jmp	.L7524
	.p2align 6,,7
.L6341:
	movq	const_int_rtx+512(%rip), %r14
	jmp	.L5210
.L7603:
	movq	-1432(%rbp), %rcx
	cmpb	$51, 2(%rcx)
	jne	.L6134
	cmpw	$66, (%rdx)
	jne	.L6136
	cmpw	$66, (%rcx)
	jne	.L6136
	testl	$7, %r13d 
	jne	.L6136
	cmpq	$-1, %r13
	leaq	7(%r13), %r8
	movq	-1128(%rbp), %rdi
	cmovle	%r8, %r13
	movl	$1, %ecx
	movl	$1, %r8d
	sarq	$3, %r13
	xorl	%esi, %esi
	movq	%r13, %rdx
	call	adjust_address_1
	movq	%r12, %rsi
	leaq	14(%r12), %r10
	addq	$7, %rsi
	movq	%rax, -1416(%rbp)
	movq	%rax, -1424(%rbp)
	cmovs	%r10, %rsi
	xorl	%edi, %edi
	sarq	$3, %rsi
	call	gen_rtx_CONST_INT
	movl	$8, %ecx
	movq	-1416(%rbp), %r13
	movq	%rax, -1440(%rbp)
	movq	16(%r13), %rdx
	testq	%rdx, %rdx
	je	.L6144
	movl	32(%rdx), %ecx
.L6144:
	movq	-1432(%rbp), %r15
	movq	16(%r15), %rax
	testq	%rax, %rax
	je	.L6145
	cmpl	32(%rax), %ecx
	jb	.L6146
.L6141:
	testq	%rax, %rax
	movl	$8, %r15d
	je	.L6142
	movl	32(%rax), %r15d
.L6142:
	movq	-1416(%rbp), %rbx
	cmpb	$51, 2(%rbx)
	jne	.L7598
	movq	-1432(%rbp), %rsi
	cmpb	$51, 2(%rsi)
	jne	.L7597
	movq	-1416(%rbp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L6153
	cmpl	$66, %eax
	je	.L7604
.L6157:
	cmpl	$75, %eax
	je	.L6161
	cmpl	$78, %eax
	je	.L6161
.L6156:
	movq	-1432(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L6166
	cmpl	$66, %eax
	je	.L7605
.L6170:
	cmpl	$75, %eax
	je	.L6174
	cmpl	$78, %eax
	je	.L6174
.L6169:
	movq	-1440(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L6179
	cmpl	$66, %eax
	je	.L7606
.L6183:
	cmpl	$75, %eax
	je	.L6187
	cmpl	$78, %eax
	je	.L6187
.L6182:
	movq	-1424(%rbp), %r13
	cmpw	$66, (%r13)
	jne	.L7596
	movq	-1432(%rbp), %r11
	cmpw	$66, (%r11)
	jne	.L7595
	cmpq	$0, -1440(%rbp)
	je	.L7594
	movq	-1440(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L7607
.L6195:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %ebx
	movl	$1, volatile_ok(%rip)
	movq	%rax, -568(%rbp)
	testl	%ebx, %ebx
	je	.L7345
	.p2align 4,,7
.L6328:
	movslq	%ebx,%r12
	movl	movstr_optab(,%r12,4), %edx
	cmpl	$1317, %edx
	je	.L6314
	movq	-1440(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L7608
.L6318:
	testb	$2, target_flags+3(%rip)
	je	.L6319
	cmpw	$63, mode_bitsize(%r12,%r12)
.L7487:
	jbe	.L6314
.L6317:
	movslq	%edx,%r14
	leaq	(%r14,%r14,4), %rcx
	movq	insn_data+24(,%rcx,8), %r13
	movq	(%r13), %rax
	testq	%rax, %rax
	je	.L6321
	movq	-1424(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L6314
.L6321:
	movq	24(%r13), %rax
	testq	%rax, %rax
	jne	.L7609
.L6322:
	movq	72(%r13), %rax
	testq	%rax, %rax
	je	.L6323
	xorl	%esi, %esi
	movq	-568(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L6314
.L6323:
	call	get_last_insn
	movl	$1, %edx
	movq	-1440(%rbp), %rsi
	movl	%ebx, %edi
	movq	%rax, -576(%rbp)
	call	convert_to_mode
	movq	%rax, %r15
	movq	48(%r13), %rax
	testq	%rax, %rax
	jne	.L7610
.L6324:
	leaq	(%r14,%r14,4), %r13
	xorl	%eax, %eax
	movq	-1424(%rbp), %rdi
	movq	-1432(%rbp), %rsi
	movq	%r15, %rdx
	movq	-568(%rbp), %rcx
	call	*insn_data+16(,%r13,8)
	testq	%rax, %rax
	jne	.L7442
	movq	-576(%rbp), %rdi
	call	delete_insns_since
.L6314:
	movzbl	mode_wider_mode(%r12), %ebx
	testl	%ebx, %ebx
	jne	.L6328
.L7345:
	testb	$2, target_flags+3(%rip)
	movq	-1424(%rbp), %r10
	movl	$0, volatile_ok(%rip)
	setne	%al
	movq	8(%r10), %rsi
	movzbl	%al, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-1432(%rbp), %r11
	testb	$2, target_flags+3(%rip)
	setne	%r8b
	movq	%rax, %r13
	movq	8(%r11), %rsi
	movzbl	%r8b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-1440(%rbp), %rsi
	movq	sizetype_tab(%rip), %rdx
	movq	%rax, %rbx
	movzbl	61(%rdx), %r12d
	shrb	$1, %r12b
	movzbl	%r12b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r14
	je	.L7611
.L6337:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r13, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r15
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r14, %rsi
	movq	%rax, (%r15)
	movq	%rax, %r12
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rcx
	movq	%rax, (%r12)
	movq	(%r15), %rdx
	movq	8(%rcx), %rdi
	movq	(%rdx), %r12
	movq	$0, (%r12)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r15, %rcx
	movq	fn.1(%rip), %r14
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r14), %rbx
	movq	8(%rbx), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r13)
	jne	.L7612
.L6326:
	movl	-356(%rbp), %eax
	movq	-1416(%rbp), %r14
	testl	%eax, %eax
	jne	.L5210
	jmp	.L6341
.L7612:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r13, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L6326
.L7611:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r15
	orb	$1, 49(%r15)
	movq	fn.1(%rip), %r9
	orb	$8, 18(%r9)
	movq	fn.1(%rip), %rsi
	orb	$64, 50(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L6337
.L7442:
	movq	%rax, %rdi
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L6326
.L7610:
	movq	%r15, %rdi
	movl	%ebx, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L6324
	movq	%r15, %rsi
	movl	%ebx, %edi
	call	copy_to_mode_reg
	movq	%rax, %r15
	jmp	.L6324
.L7609:
	movq	-1432(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L6314
	jmp	.L6322
.L6319:
	cmpw	$31, mode_bitsize(%r12,%r12)
	jmp	.L7487
.L7608:
	movq	mode_mask_array(,%r12,8), %r15
	shrq	$1, %r15
	cmpq	%r15, 8(%rsi)
	jbe	.L6317
	jmp	.L6318
.L7607:
	movq	8(%rcx), %r12
	xorl	%r13d, %r13d
	movl	$17, %esi
	movl	$128, %r14d
.L6208:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L7334
	.p2align 4,,7
.L6205:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %r10
	cmpq	%rsi, %r10
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L6205
.L7334:
	testl	%edi, %edi
	je	.L6198
	movslq	%edi,%rbx
	movq	%rbx, %r8
	salq	$4, %r8
	addq	optab_table+240(%rip), %r8
	cmpl	$1317, 8(%r8)
	je	.L6207
	call	get_mode_alignment
	cmpl	%eax, %r14d
	jb	.L6207
	movzbq	mode_size(%rbx), %rcx
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rcx
	addq	%rax, %r13
	movq	%rdx, %r12
.L6207:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L6208
.L6198:
	testq	%r12, %r12
	jne	.L7587
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L6211
	movq	ix86_cost(%rip), %r12
	mov	40(%r12), %edx
	cmpq	%rdx, %r13
	jae	.L6195
.L6212:
	movq	-1440(%rbp), %r8
	movq	-1432(%rbp), %rdi
	movq	-1424(%rbp), %r10
	movq	-1424(%rbp), %r11
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r13
	setne	%sil
	xorl	%ecx, %ecx
	movq	8(%rdi), %r8
	movq	$0, -152(%rbp)
	movq	%r8, -176(%rbp)
	movzbl	%sil, %r15d
	movq	8(%r10), %r9
	movq	%r11, -208(%rbp)
	leal	5(,%r15,4), %r12d
	xorl	%r15d, %r15d
	movq	%r9, -1448(%rbp)
	movq	-1448(%rbp), %r14
	movzwl	(%r14), %edx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L6217
	cmpw	$99, %dx
	je	.L6217
	cmpw	$98, %dx
	je	.L6217
.L6216:
	movq	-1448(%rbp), %rbx
	movl	%ecx, -192(%rbp)
	xorl	%edx, %edx
	movzwl	(%rbx), %eax
	cmpw	$96, %ax
	je	.L6219
	cmpw	$98, %ax
	je	.L6219
.L6218:
	movq	-1432(%rbp), %rcx
	movq	-1448(%rbp), %rax
	movl	%edx, -144(%rbp)
	movq	%rcx, -184(%rbp)
	movq	%rax, -200(%rbp)
	xorl	%ecx, %ecx
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r14d
	cmpw	$1, %r14w
	jbe	.L6222
	cmpw	$99, %dx
	je	.L6222
	cmpw	$98, %dx
	je	.L6222
.L6221:
	movl	-144(%rbp), %edx
	movl	%ecx, -168(%rbp)
	movl	$0, -164(%rbp)
	movl	$0, -188(%rbp)
	testl	%edx, %edx
	je	.L6223
	movq	%r13, -152(%rbp)
.L6223:
	movl	-168(%rbp), %r9d
	movq	%r13, -160(%rbp)
	testl	%r9d, %r9d
	je	.L6225
	movl	-192(%rbp), %r11d
	testl	%r11d, %r11d
	jne	.L6224
.L6225:
	xorl	%r14d, %r14d
	movl	$17, %esi
.L6238:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L7337
	.p2align 4,,7
.L6235:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L6235
.L7337:
	testl	%edi, %edi
	je	.L6228
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L6237
	movq	%r8, -1464(%rbp)
	call	get_mode_alignment
	movq	-1464(%rbp), %r8
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L6237
	movzbq	mode_size(%rbx), %r9
	movq	%r13, %rax
	xorl	%edx, %edx
	divq	%r9
	addq	%rax, %r14
	movq	%rdx, %r13
.L6237:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L6238
.L6228:
	testq	%r13, %r13
	jne	.L7587
	cmpq	$2, %r14
	jbe	.L6224
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L7339
.L6246:
	movslq	%ecx,%r14
	movzbl	mode_size(%r14), %edx
	cmpl	%r12d, %edx
	cmovb	%ecx, %r15d
	movzbl	mode_wider_mode(%r14), %ecx
	testl	%ecx, %ecx
	jne	.L6246
.L7339:
	movl	-168(%rbp), %eax
	testl	%eax, %eax
	jne	.L6252
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L6250
	cmpw	$54, %dx
	je	.L6250
	cmpw	$55, %dx
	je	.L6250
	cmpw	$58, %dx
	je	.L6250
	cmpw	$134, %dx
	je	.L6250
	cmpw	$56, %dx
	je	.L6250
	cmpw	$140, %dx
	je	.L6250
.L6252:
	movl	-192(%rbp), %r8d
	testl	%r8d, %r8d
	jne	.L6224
	movq	-1448(%rbp), %rbx
	movzwl	(%rbx), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L6254
	cmpw	$54, %dx
	je	.L6254
	cmpw	$55, %dx
	je	.L6254
	cmpw	$58, %dx
	je	.L6254
	cmpw	$134, %dx
	je	.L6254
	cmpw	$56, %dx
	je	.L6254
	cmpw	$140, %dx
	je	.L6254
.L6224:
	cmpl	$1, %r12d
	jbe	.L6257
.L6308:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L7342
	.p2align 4,,7
.L6264:
	movslq	%ecx,%rsi
	movzbl	mode_size(%rsi), %edi
	cmpl	%r12d, %edi
	cmovb	%ecx, %r15d
	movzbl	mode_wider_mode(%rsi), %ecx
	testl	%ecx, %ecx
	jne	.L6264
.L7342:
	testl	%r15d, %r15d
	je	.L6257
	movslq	%r15d,%r13
	movq	%r13, %r12
	salq	$4, %r12
	addq	optab_table+240(%rip), %r12
	movl	8(%r12), %ebx
	cmpl	$1317, %ebx
	je	.L6266
	movl	%r15d, %edi
	call	get_mode_alignment
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L6266
	movslq	%ebx,%rdx
	leaq	-208(%rbp), %r12
	movq	$0, -1456(%rbp)
	leaq	(%rdx,%rdx,4), %r14
	movzbq	mode_size(%r13), %rdx
	cmpq	%rdx, -160(%rbp)
	movq	insn_data+16(,%r14,8), %r9
	movq	%rdx, -888(%rbp)
	movq	%r9, -560(%rbp)
	jb	.L6266
	movl	-144(%rbp), %ecx
.L6306:
	testl	%ecx, %ecx
	je	.L6270
	subq	%rdx, 56(%r12)
.L6270:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L6271
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L6272
	movq	8(%r12), %rdx
	movq	56(%r12), %rcx
	movl	%r15d, %esi
	movl	$1, %r8d
	call	adjust_automodify_address_1
.L7482:
	movq	%rax, -1456(%rbp)
.L6271:
	movl	40(%r12), %r11d
	testl	%r11d, %r11d
	je	.L6274
	movq	24(%r12), %rdi
	movq	32(%r12), %rdx
	movl	%r15d, %esi
	movq	56(%r12), %rcx
	movl	$1, %r8d
	call	adjust_automodify_address_1
.L7483:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L7613
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L6280
	movzbl	mode_size(%r13), %r8d
	leal	7(%r8), %edx
	andl	$-8, %edx
.L6281:
	movq	cfun(%rip), %rdi
	andl	$33554432, %esi
	movq	16(%rdi), %rbx
	leaq	8(%rbx), %rdi
	movl	8(%rbx), %ecx
	je	.L6282
	movzbl	mode_size(%r13), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L7484:
	movq	%r13, %rsi
	leal	(%rax,%rcx), %r9d
	salq	$4, %rsi
	movl	%r9d, (%rdi)
	addq	optab_table+384(%rip), %rsi
	movl	8(%rsi), %eax
	cmpl	$1317, %eax
	je	.L6284
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rdx
	movq	insn_data+24(,%rdx,8), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	je	.L6285
	movq	%r14, %rdi
	movl	%r15d, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L7614
.L6285:
	leaq	(%rbx,%rbx,4), %r11
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r11,8)
.L7486:
	movq	%rax, %rdi
	call	emit_insn
.L6304:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L6305
	movq	-888(%rbp), %r14
	addq	%r14, 56(%r12)
.L6305:
	movq	48(%r12), %r9
	movq	-888(%rbp), %rdx
	subq	-888(%rbp), %r9
	cmpq	%rdx, %r9
	movq	%r9, 48(%r12)
	jae	.L6306
.L6266:
	movzbl	mode_size(%r13), %r12d
	cmpl	$1, %r12d
	ja	.L6308
.L6257:
	cmpq	$0, -160(%rbp)
	je	.L6326
.L7537:
	movl	$.LC0, %edi
	movl	$1503, %esi
	movl	$.LC10, %edx
.L7528:
	call	fancy_abort
.L7614:
	movq	%r14, %rsi
	movl	%r15d, %edi
	call	force_reg
	movq	%rax, %r14
	jmp	.L6285
.L6284:
	movzbl	mode_size(%r13), %r8d
	cmpl	%edx, %r8d
	je	.L7615
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r10b
	movzbl	%r10b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L7485:
	movl	%r15d, %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%edi, %edi
	testq	%rdi, %rdi
	movq	%rax, %rbx
	je	.L6301
	xorl	%esi, %esi
	movq	%rax, %rdi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %esi
	testl	%esi, %esi
	jne	.L7616
.L6301:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L6304
.L7616:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L6301
.L7615:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L7485
.L6282:
	movzbl	mode_size(%r13), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L7484
.L6280:
	movzbl	mode_size(%r13), %r10d
	leal	1(%r10), %edx
	andl	$-2, %edx
	jmp	.L6281
.L7613:
	movq	%rax, %rsi
	movq	-1456(%rbp), %rdi
	xorl	%eax, %eax
	call	*-560(%rbp)
	jmp	.L7486
.L6274:
	movq	24(%r12), %rdi
	movq	56(%r12), %rdx
	movl	%r15d, %esi
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L7483
.L6272:
	movq	56(%r12), %rdx
	movl	%r15d, %esi
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L7482
.L6254:
	movq	-1448(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -200(%rbp)
	jmp	.L6224
.L6250:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -176(%rbp)
	jmp	.L6252
.L7587:
	movl	$.LC0, %edi
	movl	$1542, %esi
	movl	$.LC5, %edx
	jmp	.L7528
	.p2align 6,,7
.L6222:
	movl	$1, %ecx
	jmp	.L6221
.L6219:
	movl	$1, %edx
	jmp	.L6218
.L6217:
	movl	$1, %ecx
	jmp	.L6216
.L6211:
	cmpq	$2, %r13
	ja	.L6195
	jmp	.L6212
.L7594:
	movl	$.LC0, %edi
	movl	$1648, %esi
.L7586:
	movl	$.LC9, %edx
	jmp	.L7528
.L7595:
	movl	$.LC0, %edi
	movl	$1646, %esi
	jmp	.L7586
.L7596:
	movl	$.LC0, %edi
	movl	$1644, %esi
	jmp	.L7586
	.p2align 6,,7
.L6187:
	movq	-1440(%rbp), %rsi
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-1440(%rbp), %r8
	movq	%rax, %rbx
	movq	16(%r8), %rdi
	call	protect_from_queue
	movq	-1440(%rbp), %rcx
	movq	%rax, %r12
	cmpq	8(%rcx), %rbx
	je	.L7617
.L6189:
	movq	-1440(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -1440(%rbp)
	movq	%rbx, 8(%rax)
	movq	-1440(%rbp), %rdi
	movq	%r12, 16(%rdi)
	jmp	.L6182
.L7617:
	cmpq	16(%rcx), %rax
	jne	.L6189
	jmp	.L6182
	.p2align 6,,7
.L7606:
	cmpb	$51, 2(%rdx)
	je	.L6180
	movq	8(%rdx), %rbx
	cmpw	$71, (%rbx)
	je	.L7618
.L6180:
	cmpl	$66, %eax
	jne	.L6183
	movq	-1440(%rbp), %r10
	xorl	%esi, %esi
	movq	8(%r10), %rdi
	call	protect_from_queue
	movq	-1440(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L6182
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -1440(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L6182
.L7618:
	movq	8(%rbx), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%rbx)
	movq	%rax, %r12
	je	.L6181
	movq	-1440(%rbp), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, -1440(%rbp)
	call	gen_move_insn
	movq	16(%rbx), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L6182
.L6181:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L7481:
	movq	%rax, -1440(%rbp)
	jmp	.L6182
.L6179:
	movq	-1440(%rbp), %rsi
	cmpq	$0, 16(%rsi)
	je	.L7619
	movq	-1440(%rbp), %rcx
	movq	24(%rcx), %rax
	testq	%rax, %rax
	jne	.L7481
	movq	-1440(%rbp), %r14
	movq	8(%r14), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	-1440(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdx
	movq	%rdx, -1440(%rbp)
	jmp	.L6182
.L7619:
	movq	8(%rsi), %rdi
	call	copy_to_reg
	jmp	.L7481
.L6174:
	movq	-1432(%rbp), %rbx
	xorl	%esi, %esi
	movq	8(%rbx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-1432(%rbp), %rcx
	movq	%rax, %rbx
	movq	16(%rcx), %rdi
	call	protect_from_queue
	movq	-1432(%rbp), %rcx
	movq	%rax, %r12
	cmpq	8(%rcx), %rbx
	je	.L7620
.L6176:
	movq	-1432(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -1432(%rbp)
	movq	%rbx, 8(%rax)
	movq	-1432(%rbp), %rdx
	movq	%r12, 16(%rdx)
	jmp	.L6169
.L7620:
	cmpq	16(%rcx), %rax
	jne	.L6176
	jmp	.L6169
	.p2align 6,,7
.L7605:
	cmpb	$51, 2(%rdx)
	je	.L6167
	movq	8(%rdx), %rbx
	cmpw	$71, (%rbx)
	je	.L7621
.L6167:
	cmpl	$66, %eax
	jne	.L6170
	movq	-1432(%rbp), %rsi
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-1432(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L6169
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -1432(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L6169
.L7621:
	movq	8(%rbx), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%rbx)
	movq	%rax, %r12
	je	.L6168
	movq	-1432(%rbp), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, -1432(%rbp)
	call	gen_move_insn
	movq	16(%rbx), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L6169
.L6168:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L7480:
	movq	%rax, -1432(%rbp)
	jmp	.L6169
.L6166:
	movq	-1432(%rbp), %rsi
	cmpq	$0, 16(%rsi)
	je	.L7622
	movq	-1432(%rbp), %r12
	movq	24(%r12), %rax
	testq	%rax, %rax
	jne	.L7480
	movq	-1432(%rbp), %rax
	movq	8(%rax), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	-1432(%rbp), %r13
	movq	%rax, %rdi
	movq	8(%r13), %rsi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r14
	movq	%r14, -1432(%rbp)
	jmp	.L6169
.L7622:
	movq	8(%rsi), %rdi
	call	copy_to_reg
	jmp	.L7480
.L6161:
	movq	-1416(%rbp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-1416(%rbp), %rcx
	movq	%rax, %r12
	movq	16(%rcx), %rdi
	call	protect_from_queue
	movq	-1416(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L7623
.L6163:
	movq	-1416(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -1424(%rbp)
	movq	%r12, 8(%rax)
	movq	-1424(%rbp), %r12
	movq	%rbx, 16(%r12)
	jmp	.L6156
.L7623:
	cmpq	16(%rcx), %rax
	jne	.L6163
	jmp	.L6156
	.p2align 6,,7
.L7604:
	jne	.L6157
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-1416(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L6156
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -1424(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L6156
	.p2align 6,,7
.L6153:
	testq	%rdx, %rdx
	je	.L7624
	movq	-1416(%rbp), %rax
	movq	24(%rax), %r11
	testq	%r11, %r11
	movq	%r11, -1424(%rbp)
	jne	.L6156
	movq	-1416(%rbp), %r10
	movq	8(%r10), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	-1416(%rbp), %r13
	movq	%rax, %rdi
	movq	8(%r13), %rsi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rdi
	movq	%rdi, -1424(%rbp)
	jmp	.L6156
.L7624:
	movq	-1416(%rbp), %r14
	movq	8(%r14), %rdi
	call	copy_to_reg
	movq	%rax, -1424(%rbp)
	jmp	.L6156
.L7597:
	movl	$.LC0, %edi
	movl	$1637, %esi
	jmp	.L7586
.L7598:
	movl	$.LC0, %edi
	movl	$1634, %esi
	jmp	.L7586
	.p2align 6,,7
.L6146:
	testq	%rdx, %rdx
	movl	$8, %r15d
	je	.L6142
	movl	32(%rdx), %r15d
	jmp	.L6142
.L6145:
	cmpl	$7, %ecx
	ja	.L6141
	jmp	.L6146
.L6136:
	movl	$.LC0, %edi
	movl	$5145, %esi
.L7529:
	movl	$.LC14, %edx
	jmp	.L7528
	.p2align 6,,7
.L6131:
	cmpw	$61, %ax
	je	.L6130
	cmpw	$63, %ax
	je	.L6130
	testq	%r12, %r12
	js	.L6129
	movq	8(%r15), %r11
	movq	32(%r11), %rdi
	cmpb	$25, 16(%rdi)
	je	.L7625
.L6129:
	movl	-356(%rbp), %eax
	movq	-1128(%rbp), %r10
	testl	%eax, %eax
	movq	8(%r10), %rdi
	je	.L6346
	movzwl	(%rdi), %edx
	cmpw	$61, %dx
	je	.L6346
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L6346
	cmpw	$54, %dx
	je	.L6346
	cmpw	$58, %dx
	je	.L6346
	cmpw	$55, %dx
	je	.L6346
	cmpw	$75, %dx
	je	.L7626
.L6347:
	call	copy_to_reg
	movq	-1128(%rbp), %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L6346:
	cmpq	$-1, %r13
	leaq	7(%r13), %rdi
	movl	%ebx, %esi
	cmovle	%rdi, %r13
	movl	$1, %ecx
	movl	$1, %r8d
	movq	-1128(%rbp), %rdi
	sarq	$3, %r13
	movq	%r13, %rdx
	call	adjust_address_1
	cmpq	-1128(%rbp), %rax
	movq	%rax, %r13
	je	.L7627
.L6350:
	movzbl	3(%r13), %eax
	orb	$16, %al
	andb	$127, %al
	testb	$1, %al
	movb	%al, 3(%r13)
	jne	.L6354
	movq	16(%r13), %rax
	testq	%rax, %rax
	je	.L6354
	cmpq	$0, (%rax)
	jne	.L7628
.L6354:
	xorl	%ebx, %ebx
	movl	$0, -1132(%rbp)
	cmpl	$0, -356(%rbp)
	setne	%bl
	xorl	%r12d, %r12d
	movl	%ebx, -580(%rbp)
	movzbl	16(%r15), %eax
	cmpb	$47, %al
	je	.L7629
	cmpb	$51, %al
	je	.L7630
.L6367:
	movzwl	(%r13), %eax
	subl	$66, %eax
	cmpl	$12, %eax
	ja	.L6415
	mov	%eax, %r14d
	jmp	*.L6416(,%r14,8)
	.section	.rodata
	.align 8
	.align 4
.L6416:
	.quad	.L6409
	.quad	.L6415
	.quad	.L6415
	.quad	.L6415
	.quad	.L6415
	.quad	.L6414
	.quad	.L6415
	.quad	.L6415
	.quad	.L6415
	.quad	.L6412
	.quad	.L6412
	.quad	.L6415
	.quad	.L6412
	.text
.L6409:
	movq	8(%r13), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L6408:
	testl	%ebx, %ebx
	je	.L6405
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L6417
	testb	%al, %al
	jne	.L7631
.L6417:
	movzbl	2(%r13), %edx
	movq	%r15, %rdi
	xorl	%esi, %esi
.L7489:
	xorl	%ecx, %ecx
	call	expand_expr
	testb	$8, 3(%r13)
	movq	%rax, %r14
	jne	.L7433
	movl	-580(%rbp), %eax
	testl	%eax, %eax
	je	.L7433
.L6422:
	movl	$1, -1132(%rbp)
.L7433:
	movzwl	(%r14), %edx
.L6366:
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L6444
	cmpw	$54, %dx
	je	.L6444
	cmpw	$55, %dx
	je	.L6444
	cmpw	$58, %dx
	je	.L6444
	cmpw	$134, %dx
	je	.L6444
	cmpw	$56, %dx
	je	.L6444
	cmpw	$140, %dx
	je	.L6444
.L6443:
	movq	%r14, %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	je	.L6446
	cmpq	%r13, %r14
	je	.L6445
	movq	%r14, %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L7632
.L6446:
	movzbl	16(%r15), %eax
	testb	%al, %al
	je	.L6445
	testl	%r12d, %r12d
	jne	.L6445
	movzbl	%al, %r12d 
	cmpb	$100, tree_code_type(%r12)
	je	.L7633
.L6447:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L6452
	cmpl	$66, %eax
	je	.L7634
.L6456:
	cmpl	$75, %eax
	je	.L6460
	cmpl	$78, %eax
	je	.L6460
.L6455:
	movzbl	2(%r14), %eax
	movzbl	2(%r13), %ecx
	cmpb	%cl, %al
	je	.L6465
	testb	%al, %al
	je	.L6465
	movq	8(%r15), %rdi
	movl	-1132(%rbp), %r15d
	movzbl	17(%rdi), %r9d
	shrb	$5, %r9b
	movl	%r9d, %edx
	andl	$1, %edx
	testl	%r15d, %r15d
	je	.L6466
	movq	%r14, %rsi
	movzbl	%cl, %edi
	call	convert_to_mode
	movq	%rax, %r14
.L7056:
	movq	%r13, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
.L6445:
	movl	-580(%rbp), %eax
	testl	%eax, %eax
	jne	.L7256
.L7523:
	xorl	%r14d, %r14d
	jmp	.L5210
.L7256:
	movl	-1132(%rbp), %eax
	testl	%eax, %eax
	je	.L7258
	cmpw	$66, (%r14)
	jne	.L5210
.L7258:
	cmpb	$51, 2(%r13)
	je	.L7260
	cmpw	$61, (%r13)
	je	.L7635
.L7261:
	movq	%r13, %rdi
.L7527:
	call	copy_to_reg
	jmp	.L7524
.L7635:
	cmpl	$52, 8(%r13)
	ja	.L7261
.L7260:
	movq	%r13, %r14
	jmp	.L5210
.L6466:
	movq	%r13, %rdi
	movq	%r14, %rsi
	call	convert_move
	jmp	.L6445
.L6465:
	cmpb	$51, %al
	je	.L7636
.L6469:
	cmpw	$39, (%r13)
	je	.L7637
	cmpb	$51, %al
	jne	.L7056
	movq	%r15, %rdi
	movq	%r13, -1360(%rbp)
	movq	%r14, -1368(%rbp)
	call	expr_size
	movl	$8, %edx
	movq	16(%r13), %rcx
	movq	%rax, %r15
	testq	%rcx, %rcx
	je	.L7060
	movl	32(%rcx), %edx
.L7060:
	movq	16(%r14), %rax
	testq	%rax, %rax
	je	.L7061
	cmpl	32(%rax), %edx
	jb	.L7062
.L7057:
	testq	%rax, %rax
	movl	$8, -1352(%rbp)
	je	.L7058
	movl	32(%rax), %eax
	movl	%eax, -1352(%rbp)
.L7058:
	cmpb	$51, 2(%r13)
	jne	.L7598
	cmpb	$51, 2(%r14)
	jne	.L7597
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L7069
	cmpl	$66, %eax
	je	.L7638
.L7073:
	cmpl	$75, %eax
	je	.L7077
	cmpl	$78, %eax
	je	.L7077
.L7072:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L7082
	cmpl	$66, %eax
	je	.L7639
.L7086:
	cmpl	$75, %eax
	je	.L7090
	cmpl	$78, %eax
	je	.L7090
.L7085:
	movzwl	(%r15), %eax
	cmpl	$71, %eax
	je	.L7095
	cmpl	$66, %eax
	je	.L7640
.L7099:
	cmpl	$75, %eax
	je	.L7103
	cmpl	$78, %eax
	je	.L7103
.L7098:
	movq	-1360(%rbp), %r8
	cmpw	$66, (%r8)
	jne	.L7596
	movq	-1368(%rbp), %rdx
	cmpw	$66, (%rdx)
	jne	.L7595
	testq	%r15, %r15
	je	.L7594
	cmpw	$54, (%r15)
	je	.L7641
.L7111:
	shrl	$3, -1352(%rbp)
	xorl	%edi, %edi
	mov	-1352(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %ebx
	movl	$1, volatile_ok(%rip)
	movq	%rax, -824(%rbp)
	testl	%ebx, %ebx
	je	.L7414
.L7244:
	movslq	%ebx,%rax
	movl	movstr_optab(,%rax,4), %edx
	movq	%rax, -832(%rbp)
	cmpl	$1317, %edx
	je	.L7230
	cmpw	$54, (%r15)
	je	.L7642
.L7234:
	testb	$2, target_flags+3(%rip)
	je	.L7235
	movq	-832(%rbp), %r8
	cmpw	$63, mode_bitsize(%r8,%r8)
.L7521:
	jbe	.L7230
.L7233:
	movslq	%edx,%rax
	leaq	(%rax,%rax,4), %rsi
	movq	%rax, -840(%rbp)
	movq	insn_data+24(,%rsi,8), %rdi
	movq	(%rdi), %rax
	movq	%rdi, -848(%rbp)
	testq	%rax, %rax
	je	.L7237
	movq	-1360(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L7230
.L7237:
	movq	-848(%rbp), %r9
	movq	24(%r9), %rax
	testq	%rax, %rax
	jne	.L7643
.L7238:
	movq	-848(%rbp), %rdx
	movq	72(%rdx), %rax
	testq	%rax, %rax
	je	.L7239
	xorl	%esi, %esi
	movq	-824(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L7230
.L7239:
	call	get_last_insn
	movl	$1, %edx
	movq	%r15, %rsi
	movl	%ebx, %edi
	movq	%rax, -856(%rbp)
	call	convert_to_mode
	movq	-848(%rbp), %r11
	movq	%rax, %r12
	movq	48(%r11), %rax
	testq	%rax, %rax
	jne	.L7644
.L7240:
	movq	-840(%rbp), %r8
	movq	-1360(%rbp), %rdi
	xorl	%eax, %eax
	movq	-1368(%rbp), %rsi
	movq	%r12, %rdx
	movq	-824(%rbp), %rcx
	leaq	(%r8,%r8,4), %rbx
	call	*insn_data+16(,%rbx,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L7446
	movq	-856(%rbp), %rdi
	call	delete_insns_since
.L7230:
	movq	-832(%rbp), %r12
	movzbl	mode_wider_mode(%r12), %ebx
	testl	%ebx, %ebx
	jne	.L7244
.L7414:
	testb	$2, target_flags+3(%rip)
	movq	-1360(%rbp), %r9
	movl	$0, volatile_ok(%rip)
	setne	%dl
	movq	8(%r9), %rsi
	movzbl	%dl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%sil
	movq	%rax, -1408(%rbp)
	movq	-1368(%rbp), %rax
	movzbl	%sil, %edi
	movq	8(%rax), %rsi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%r15, %rsi
	movq	sizetype_tab(%rip), %r10
	movq	%rax, %rbx
	movzbl	61(%r10), %ecx
	shrb	$1, %cl
	movzbl	%cl, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L7645
.L7253:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	-1408(%rbp), %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rcx
	movq	%rax, (%rbx)
	movq	(%r12), %rsi
	movq	8(%rcx), %rdi
	movq	(%rsi), %r10
	movq	$0, (%r10)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %rbx
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%rbx), %r15
	movq	8(%r15), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	movq	-1408(%rbp), %rcx
	testb	$4, 3(%rcx)
	je	.L6445
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%rcx, %rdx
.L7522:
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L6445
.L7645:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r12
	xorl	%esi, %esi
	orb	$1, 49(%r12)
	movq	fn.1(%rip), %r8
	orb	$8, 18(%r8)
	movq	fn.1(%rip), %r11
	orb	$64, 50(%r11)
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L7253
.L7446:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L6445
	.p2align 6,,7
.L7644:
	movq	%r12, %rdi
	movl	%ebx, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L7240
	movq	%r12, %rsi
	movl	%ebx, %edi
	call	copy_to_mode_reg
	movq	%rax, %r12
	jmp	.L7240
.L7643:
	movq	-1368(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L7230
	jmp	.L7238
.L7235:
	movq	-832(%rbp), %rcx
	cmpw	$31, mode_bitsize(%rcx,%rcx)
	jmp	.L7521
.L7642:
	movq	mode_mask_array(,%rax,8), %r12
	shrq	$1, %r12
	cmpq	%r12, 8(%r15)
	jbe	.L7233
	jmp	.L7234
.L7641:
	movq	8(%r15), %r12
	xorl	%r8d, %r8d
	movl	$17, %esi
.L7124:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L7403
.L7121:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L7121
.L7403:
	testl	%edi, %edi
	je	.L7114
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L7123
	movq	%r8, -1464(%rbp)
	call	get_mode_alignment
	movq	-1464(%rbp), %r8
	movl	$128, %esi
	cmpl	%eax, %esi
	jb	.L7123
	movzbq	mode_size(%rbx), %r10
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r10
	addq	%rax, %r8
	movq	%rdx, %r12
.L7123:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L7124
.L7114:
	testq	%r12, %r12
	jne	.L7587
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L7127
	movq	ix86_cost(%rip), %rdx
	mov	40(%rdx), %r9d
	cmpq	%r9, %r8
	jae	.L7111
.L7128:
	movq	-1368(%rbp), %r9
	movq	-1360(%rbp), %rcx
	movq	8(%r15), %r15
	movq	-1360(%rbp), %rdi
	testb	$2, target_flags+3(%rip)
	movq	8(%r9), %r8
	setne	%r12b
	movq	$0, -296(%rbp)
	movl	$0, -1388(%rbp)
	movq	%r8, -320(%rbp)
	movq	8(%rcx), %rbx
	xorl	%ecx, %ecx
	movq	%rdi, -352(%rbp)
	movzbl	%r12b, %r10d
	leal	5(,%r10,4), %r12d
	movzwl	(%rbx), %edx
	movq	%rbx, -1376(%rbp)
	leal	-96(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L7133
	cmpw	$99, %dx
	je	.L7133
	cmpw	$98, %dx
	je	.L7133
.L7132:
	movq	-1376(%rbp), %r11
	movl	%ecx, -336(%rbp)
	xorl	%edx, %edx
	movzwl	(%r11), %eax
	cmpw	$96, %ax
	je	.L7135
	cmpw	$98, %ax
	je	.L7135
.L7134:
	movl	%edx, -288(%rbp)
	movq	-1368(%rbp), %rax
	xorl	%ecx, %ecx
	movq	-1376(%rbp), %rdx
	movq	%rax, -328(%rbp)
	movq	%rdx, -344(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %esi
	cmpw	$1, %si
	jbe	.L7138
	cmpw	$99, %dx
	je	.L7138
	cmpw	$98, %dx
	je	.L7138
.L7137:
	movl	-288(%rbp), %ebx
	movl	%ecx, -312(%rbp)
	movl	$0, -308(%rbp)
	movl	$0, -332(%rbp)
	testl	%ebx, %ebx
	je	.L7139
	movq	%r15, -296(%rbp)
.L7139:
	movl	-312(%rbp), %edi
	movq	%r15, -304(%rbp)
	testl	%edi, %edi
	je	.L7141
	movl	-336(%rbp), %r10d
	testl	%r10d, %r10d
	jne	.L7140
.L7141:
	movq	$0, -1384(%rbp)
	movl	$17, %esi
.L7154:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L7406
.L7151:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %r11
	cmpq	%rsi, %r11
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L7151
.L7406:
	testl	%edi, %edi
	je	.L7144
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L7153
	movq	%r8, -1464(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-1464(%rbp), %r8
	jb	.L7153
	movzbq	mode_size(%rbx), %rsi
	movq	%r15, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, -1384(%rbp)
	movq	%rdx, %r15
.L7153:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L7154
.L7144:
	testq	%r15, %r15
	jne	.L7587
	cmpq	$2, -1384(%rbp)
	jbe	.L7140
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L7408
.L7162:
	movslq	%ecx,%rbx
	movzbl	mode_size(%rbx), %edx
	cmpl	%r12d, %edx
	cmovae	-1388(%rbp), %ecx
	movl	%ecx, -1388(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L7162
.L7408:
	movl	-312(%rbp), %eax
	testl	%eax, %eax
	jne	.L7168
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L7166
	cmpw	$54, %dx
	je	.L7166
	cmpw	$55, %dx
	je	.L7166
	cmpw	$58, %dx
	je	.L7166
	cmpw	$134, %dx
	je	.L7166
	cmpw	$56, %dx
	je	.L7166
	cmpw	$140, %dx
	je	.L7166
.L7168:
	movl	-336(%rbp), %eax
	testl	%eax, %eax
	jne	.L7140
	movq	-1376(%rbp), %r11
	movzwl	(%r11), %edx
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L7170
	cmpw	$54, %dx
	je	.L7170
	cmpw	$55, %dx
	je	.L7170
	cmpw	$58, %dx
	je	.L7170
	cmpw	$134, %dx
	je	.L7170
	cmpw	$56, %dx
	je	.L7170
	cmpw	$140, %dx
	je	.L7170
.L7140:
	cmpl	$1, %r12d
	jbe	.L7173
.L7224:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L7411
.L7180:
	movslq	%ecx,%r8
	movzbl	mode_size(%r8), %r15d
	cmpl	%r12d, %r15d
	cmovae	-1388(%rbp), %ecx
	movl	%ecx, -1388(%rbp)
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L7180
.L7411:
	movl	-1388(%rbp), %eax
	testl	%eax, %eax
	je	.L7173
	movslq	-1388(%rbp),%rcx
	movq	%rcx, %r12
	movq	%rcx, -808(%rbp)
	salq	$4, %r12
	addq	optab_table+240(%rip), %r12
	movl	8(%r12), %ebx
	cmpl	$1317, %ebx
	je	.L7182
	movl	-1388(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L7182
	movq	-808(%rbp), %rsi
	movslq	%ebx,%r10
	leaq	-352(%rbp), %r12
	leaq	(%r10,%r10,4), %rdx
	movq	$0, -1400(%rbp)
	movq	insn_data+16(,%rdx,8), %rbx
	movzbq	mode_size(%rsi), %rdx
	cmpq	%rdx, -304(%rbp)
	movq	%rbx, -816(%rbp)
	movq	%rdx, -912(%rbp)
	jb	.L7182
	movl	-288(%rbp), %ecx
.L7222:
	testl	%ecx, %ecx
	je	.L7186
	subq	%rdx, 56(%r12)
.L7186:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L7187
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L7188
	movl	-1388(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L7517:
	movq	%rax, -1400(%rbp)
.L7187:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L7190
	movq	24(%r12), %rdi
	movl	-1388(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L7518:
	cmpq	$0, (%r12)
	movq	%rax, %r15
	jne	.L7646
	movl	target_flags(%rip), %esi
	testl	$33554432, %esi
	je	.L7196
	movq	-808(%rbp), %rax
	movzbl	mode_size(%rax), %r9d
	leal	7(%r9), %edx
	andl	$-8, %edx
.L7197:
	movq	cfun(%rip), %rcx
	andl	$33554432, %esi
	movq	16(%rcx), %rbx
	leaq	8(%rbx), %rdi
	movl	8(%rbx), %ecx
	je	.L7198
	movq	-808(%rbp), %rsi
	movzbl	mode_size(%rsi), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L7519:
	leal	(%rax,%rcx), %r9d
	movl	%r9d, (%rdi)
	movq	-808(%rbp), %rdi
	salq	$4, %rdi
	addq	optab_table+384(%rip), %rdi
	movl	8(%rdi), %eax
	cmpl	$1317, %eax
	je	.L7200
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %r11
	movq	insn_data+24(,%r11,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L7201
	movq	%r15, %rdi
	movl	-1388(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L7647
.L7201:
	leaq	(%rbx,%rbx,4), %r8
	movq	%r15, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r8,8)
.L7520:
	movq	%rax, %rdi
	call	emit_insn
.L7220:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L7221
	movq	-912(%rbp), %r15
	addq	%r15, 56(%r12)
.L7221:
	movq	48(%r12), %r9
	movq	-912(%rbp), %rdx
	subq	-912(%rbp), %r9
	cmpq	%rdx, %r9
	movq	%r9, 48(%r12)
	jae	.L7222
.L7182:
	movq	-808(%rbp), %rdx
	movzbl	mode_size(%rdx), %r12d
	cmpl	$1, %r12d
	ja	.L7224
.L7173:
	cmpq	$0, -304(%rbp)
.L7588:
	je	.L6445
	jmp	.L7537
	.p2align 6,,7
.L7647:
	movl	-1388(%rbp), %edi
	movq	%r15, %rsi
	call	force_reg
	movq	%rax, %r15
	jmp	.L7201
.L7200:
	movq	-808(%rbp), %rax
	movzbl	mode_size(%rax), %ebx
	cmpl	%edx, %ebx
	je	.L7648
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	testb	$2, target_flags+3(%rip)
	setne	%dil
	movq	%rax, %rcx
	movzbl	%dil, %esi
	movl	$75, %edi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r10b
	movzbl	%r10b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L7208:
	movl	-1388(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%esi, %esi
	testq	%rsi, %rsi
	movq	%rax, %rbx
	je	.L7217
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L7649
.L7217:
	movq	%rbx, %rdi
	movq	%r15, %rsi
	call	emit_move_insn
	jmp	.L7220
.L7649:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L7217
.L7648:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%cl
	movzbl	%cl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L7208
.L7198:
	movq	-808(%rbp), %r10
	movzbl	mode_size(%r10), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L7519
.L7196:
	movq	-808(%rbp), %r8
	movzbl	mode_size(%r8), %r11d
	leal	1(%r11), %edx
	andl	$-2, %edx
	jmp	.L7197
.L7646:
	movq	%rax, %rsi
	movq	-1400(%rbp), %rdi
	xorl	%eax, %eax
	call	*-816(%rbp)
	jmp	.L7520
.L7190:
	movq	24(%r12), %rdi
	movl	-1388(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L7518
.L7188:
	movl	-1388(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L7517
.L7170:
	movq	-1376(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -344(%rbp)
	jmp	.L7140
.L7166:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -320(%rbp)
	jmp	.L7168
	.p2align 6,,7
.L7138:
	movl	$1, %ecx
	jmp	.L7137
.L7135:
	movl	$1, %edx
	jmp	.L7134
.L7133:
	movl	$1, %ecx
	jmp	.L7132
.L7127:
	cmpq	$2, %r8
	ja	.L7111
	jmp	.L7128
.L7103:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r15), %r12
	movq	%rax, %rbx
	je	.L7650
.L7105:
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, %r15
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L7098
.L7650:
	cmpq	16(%r15), %rax
	jne	.L7105
	jmp	.L7098
	.p2align 6,,7
.L7640:
	cmpb	$51, 2(%r15)
	je	.L7096
	movq	8(%r15), %r12
	cmpw	$71, (%r12)
	je	.L7651
.L7096:
	cmpl	$66, %eax
	jne	.L7099
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r15), %rax
	movq	%rax, %rbx
	je	.L7098
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, %r15
	movq	%rbx, 8(%rax)
	jmp	.L7098
.L7651:
	movq	8(%r12), %rsi
	movq	%r15, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L7097
	movzbl	2(%r15), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r15
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L7098
.L7097:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L7516:
	movq	%rax, %r15
	jmp	.L7098
.L7095:
	cmpq	$0, 16(%r15)
	je	.L7652
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L7516
	movq	8(%r15), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L7098
.L7652:
	movq	8(%r15), %rdi
	call	copy_to_reg
	jmp	.L7516
.L7090:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L7653
.L7092:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -1368(%rbp)
	movq	%r12, 8(%rax)
	movq	-1368(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L7085
.L7653:
	cmpq	16(%r14), %rax
	jne	.L7092
	jmp	.L7085
	.p2align 6,,7
.L7639:
	cmpb	$51, 2(%r14)
	je	.L7083
	movq	8(%r14), %r12
	cmpw	$71, (%r12)
	je	.L7654
.L7083:
	cmpl	$66, %eax
	jne	.L7086
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L7085
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -1368(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L7085
.L7654:
	movq	8(%r12), %rsi
	movq	%r14, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L7084
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -1368(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L7085
.L7084:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L7515:
	movq	%rax, -1368(%rbp)
	jmp	.L7085
.L7082:
	cmpq	$0, 16(%r14)
	je	.L7655
	movq	24(%r14), %r12
	testq	%r12, %r12
	movq	%r12, -1368(%rbp)
	jne	.L7085
	movq	8(%r14), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rax
	movq	%rax, -1368(%rbp)
	jmp	.L7085
.L7655:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L7515
.L7077:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L7656
.L7079:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -1360(%rbp)
	movq	%r12, 8(%rax)
	movq	-1360(%rbp), %r11
	movq	%rbx, 16(%r11)
	jmp	.L7072
.L7656:
	cmpq	16(%r13), %rax
	jne	.L7079
	jmp	.L7072
	.p2align 6,,7
.L7638:
	jne	.L7073
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L7072
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -1360(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L7072
	.p2align 6,,7
.L7069:
	testq	%rcx, %rcx
	je	.L7657
	movq	24(%r13), %rcx
	testq	%rcx, %rcx
	movq	%rcx, -1360(%rbp)
	jne	.L7072
	movq	8(%r13), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rsi
	movq	%rsi, -1360(%rbp)
	jmp	.L7072
.L7657:
	movq	8(%r13), %rdi
	call	copy_to_reg
	movq	%rax, -1360(%rbp)
	jmp	.L7072
.L7062:
	testq	%rcx, %rcx
	movl	$8, -1352(%rbp)
	je	.L7058
	movl	32(%rcx), %edx
	movl	%edx, -1352(%rbp)
	jmp	.L7058
.L7061:
	cmpl	$7, %edx
	ja	.L7057
	jmp	.L7062
.L7637:
	movq	8(%r15), %rdi
	call	int_size_in_bytes
	cmpw	$39, (%r13)
	movl	%eax, -764(%rbp)
	jne	.L7593
	movq	8(%r13), %rcx
	movq	8(%rcx), %r9
	movl	(%rcx), %r15d
	cmpq	$0, 8(%r9)
	movslq	%r15d,%rdi
	sete	%dl
	leaq	15(,%rdi,8), %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	leaq	24(%rsp), %r12
	movzbl	%dl, %r10d
	movq	%r12, -776(%rbp)
	movl	%r10d, -1348(%rbp)
	movl	-1348(%rbp), %eax
	cmpl	%r15d, %eax
	movl	%eax, -1340(%rbp)
	jge	.L7397
.L7041:
	movslq	-1340(%rbp),%rbx
	movq	8(%rcx,%rbx,8), %r12
	movq	%rbx, -784(%rbp)
	movl	-764(%rbp), %ecx
	movq	8(%r12), %rax
	movq	16(%r12), %rsi
	testl	%ecx, %ecx
	movzbl	2(%rax), %r15d
	movq	8(%rsi), %r11
	movq	%r11, -792(%rbp)
	movslq	%r15d,%r8
	movzbl	mode_size(%r8), %ebx
	movq	%r8, -800(%rbp)
	movl	%ebx, -1344(%rbp)
	js	.L7014
	mov	%ebx, %r10d
	movslq	-764(%rbp),%rdi
	addq	-792(%rbp), %r10
	cmpq	%rdi, %r10
	jle	.L7014
	movl	-764(%rbp), %edx
	subl	-792(%rbp), %edx
	movl	%edx, -1344(%rbp)
	je	.L7592
.L7014:
	movzwl	(%r14), %edx
	movq	%r14, %r12
	cmpw	$66, %dx
	je	.L7448
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L7018
	cmpw	$54, %dx
	je	.L7018
	cmpw	$55, %dx
	je	.L7018
	cmpw	$58, %dx
	je	.L7018
	cmpw	$134, %dx
	je	.L7018
	cmpw	$56, %dx
	je	.L7018
	cmpw	$140, %dx
	je	.L7018
.L7017:
	movzbl	2(%r14), %eax
	movl	%r15d, %edi
	testb	%al, %al
	je	.L7513
	movzbl	%al, %edi
.L7513:
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	emit_move_insn
	movzwl	(%r12), %edx
.L7016:
	cmpw	$66, %dx
	je	.L7448
.L7021:
	cmpw	$65, %dx
	je	.L7658
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L7038
	cmpw	$54, %dx
	je	.L7038
	cmpw	$55, %dx
	je	.L7038
	cmpw	$58, %dx
	je	.L7038
	cmpw	$134, %dx
	je	.L7038
	cmpw	$56, %dx
	je	.L7038
	cmpw	$140, %dx
	je	.L7038
	cmpw	$61, %dx
	je	.L7659
.L7037:
	movslq	-764(%rbp),%rdi
	movl	-1344(%rbp), %eax
	movl	$1, %ecx
	movq	-792(%rbp), %rdx
	xorl	%r8d, %r8d
	movl	%r15d, %r9d
	movl	%r15d, (%rsp)
	sall	$3, %eax
	movq	%rdi, 8(%rsp)
	mov	%eax, %esi
	salq	$3, %rdx
	movq	%r12, %rdi
	call	extract_bit_field
.L7514:
	movq	-784(%rbp), %r10
	movq	-776(%rbp), %r12
	movq	%rax, (%r12,%r10,8)
.L7012:
	incl	-1340(%rbp)
	movq	8(%r13), %rcx
	movl	-1340(%rbp), %r9d
	cmpl	(%rcx), %r9d
	jl	.L7041
.L7397:
	movq	cfun(%rip), %r8
	movq	16(%r8), %rdx
	movq	40(%rdx), %rbx
	testq	%rbx, %rbx
	je	.L7399
.L7047:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L7660
	call	emit_insn
	movq	%rax, 16(%rbx)
.L7046:
	movq	cfun(%rip), %rdi
	movq	40(%rbx), %r15
	movq	16(%rdi), %rsi
	testq	%r15, %r15
	movq	%r15, %rbx
	movq	%r15, 40(%rsi)
	jne	.L7047
	movq	8(%r13), %rcx
.L7399:
	movl	-1348(%rbp), %ebx
	cmpl	(%rcx), %ebx
	jge	.L6445
.L7053:
	movslq	-1348(%rbp),%r9
	movq	-776(%rbp), %r10
	salq	$3, %r9
	movq	8(%r9,%rcx), %r8
	movq	(%r10,%r9), %rsi
	movq	8(%r8), %rdi
	call	emit_move_insn
	incl	-1348(%rbp)
	movq	8(%r13), %r12
	movl	-1348(%rbp), %eax
	cmpl	(%r12), %eax
	movq	%r12, %rcx
	jl	.L7053
	jmp	.L6445
.L7660:
	movq	8(%rdi), %rcx
	movq	8(%rcx), %r11
	movq	%r11, 16(%rbx)
	call	emit_insn
	jmp	.L7046
.L7659:
	movzbl	2(%r12), %ecx
	cmpl	%r15d, %ecx
	jne	.L7037
.L7038:
	movq	-784(%rbp), %rsi
	movq	-776(%rbp), %r15
	movq	%r12, (%r15,%rsi,8)
	jmp	.L7012
.L7658:
	cmpq	$0, -792(%rbp)
	jne	.L7437
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %r9
	movzbl	mode_size(%r9), %ebx
	cmpl	%ebx, -1344(%rbp)
	je	.L7027
.L7028:
	movzbq	2(%rdx), %r8
	movzbq	mode_size(%r8), %rdx
	cmpq	%rdx, -792(%rbp)
	je	.L7661
.L7026:
	cmpq	$0, -792(%rbp)
	jne	.L7034
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbx
	movzbq	mode_size(%rbx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %rbx
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%rbx, %rdi
	movl	%r15d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	jmp	.L7514
.L7034:
	movl	$.LC0, %edi
	movl	$2028, %esi
.L7582:
	movl	$.LC12, %edx
	jmp	.L7528
	.p2align 6,,7
.L7661:
	movq	16(%r12), %rsi
	movzbq	2(%rsi), %rcx
	movzbl	mode_size(%rcx), %r11d
	cmpl	%r11d, -1344(%rbp)
	jne	.L7026
.L7027:
	xorl	%edi, %edi
	movq	-784(%rbp), %r10
	movq	-776(%rbp), %rax
	cmpq	$0, -792(%rbp)
	setne	%dil
	leaq	(%rax,%r10,8), %rbx
	movq	8(%r12,%rdi,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L7012
	cmpw	$54, %dx
	je	.L7012
	cmpw	$55, %dx
	je	.L7012
	cmpw	$58, %dx
	je	.L7012
	cmpw	$134, %dx
	je	.L7012
	cmpw	$56, %dx
	je	.L7012
	cmpw	$140, %dx
	je	.L7012
	cmpw	$61, %dx
	je	.L7662
.L7032:
	movslq	-764(%rbp),%rdx
	movl	-1344(%rbp), %r8d
	movl	%r15d, (%rsp)
	movl	$1, %ecx
	movl	%r15d, %r9d
	sall	$3, %r8d
	movq	%rdx, 8(%rsp)
	mov	%r8d, %esi
	xorl	%edx, %edx
	movq	(%rbx), %rdi
	xorl	%r8d, %r8d
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L7012
.L7662:
	movzbl	2(%rcx), %r9d
	cmpl	%r15d, %r9d
	jne	.L7032
	jmp	.L7012
	.p2align 6,,7
.L7437:
	movq	8(%r12), %rdx
	jmp	.L7028
.L7448:
	movl	%r15d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L7022
	cmpl	%eax, 32(%rdx)
	jae	.L7023
.L7436:
	movzwl	(%r12), %edx
	jmp	.L7021
.L7023:
	movq	-792(%rbp), %rbx
	movl	%r15d, %edi
	call	get_mode_alignment
	mov	%eax, %ecx
	salq	$3, %rbx
	movq	%rbx, %rax
	cqto
	idivq	%rcx
	testq	%rdx, %rdx
	jne	.L7436
	movq	-800(%rbp), %rax
	movzbl	mode_size(%rax), %esi
	cmpl	%esi, -1344(%rbp)
	jne	.L7436
	movl	%r15d, %edi
	call	gen_reg_rtx
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-776(%rbp), %rdi
	movq	-784(%rbp), %r10
	movl	%r15d, %esi
	movq	-792(%rbp), %rdx
	leaq	(%rdi,%r10,8), %rbx
	movq	%r12, %rdi
	movq	%rax, (%rbx)
	call	adjust_address_1
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L7012
	.p2align 6,,7
.L7022:
	cmpl	$8, %eax
	ja	.L7436
	jmp	.L7023
.L7018:
	movzbl	2(%r14), %ecx
	movzbl	%cl, %r8d
	cmpl	%r15d, %r8d
	je	.L7016
	testb	%cl, %cl
	je	.L7016
	jmp	.L7017
.L7592:
	movl	$.LC0, %edi
	movl	$1978, %esi
	jmp	.L7582
.L7593:
	movl	$.LC0, %edi
	movl	$1953, %esi
	jmp	.L7582
	.p2align 6,,7
.L7636:
	cmpb	$29, 16(%r15)
	jne	.L6469
	movq	%r15, %rdi
	call	expr_size
	cmpw	$54, (%rax)
	movq	%rax, -1160(%rbp)
	je	.L7663
.L6470:
	movq	sizetype_tab(%rip), %rdi
	movq	-1160(%rbp), %rsi
	call	make_tree
	xorl	%esi, %esi
	movslq	32(%r15),%rdi
	movq	%rax, %r12
	call	size_int_wide
	movq	%r12, %rsi
	movl	$78, %edi
	movq	%rax, %rdx
	call	size_binop
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	movq	%rax, -656(%rbp)
	call	expand_expr
	xorl	%edx, %edx
	movl	ptr_mode(%rip), %edi
	movq	%rax, %rsi
	movq	$0, -1288(%rbp)
	call	convert_to_mode
	movl	$8, %edx
	movq	%r14, -1232(%rbp)
	movq	%rax, -1208(%rbp)
	movq	%r13, -1224(%rbp)
	movq	%rax, -1240(%rbp)
	movq	16(%r13), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L6673
	movl	32(%rax), %edx
.L6673:
	movq	16(%r14), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L6674
	cmpl	32(%rax), %edx
	jb	.L6675
.L6670:
	testq	%rcx, %rcx
	movl	$8, -1212(%rbp)
	je	.L6671
	movl	32(%rcx), %r15d
	movl	%r15d, -1212(%rbp)
.L6671:
	cmpb	$51, 2(%r13)
	jne	.L7598
	cmpb	$51, 2(%r14)
	jne	.L7597
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L6682
	cmpl	$66, %eax
	je	.L7664
.L6686:
	cmpl	$75, %eax
	je	.L6690
	cmpl	$78, %eax
	je	.L6690
.L6685:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L6695
	cmpl	$66, %eax
	je	.L7665
.L6699:
	cmpl	$75, %eax
	je	.L6703
	cmpl	$78, %eax
	je	.L6703
.L6698:
	movq	-1208(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L6708
	cmpl	$66, %eax
	je	.L7666
.L6712:
	cmpl	$75, %eax
	je	.L6716
	cmpl	$78, %eax
	je	.L6716
.L6711:
	movq	-1224(%rbp), %rsi
	cmpw	$66, (%rsi)
	jne	.L7596
	movq	-1232(%rbp), %r8
	cmpw	$66, (%r8)
	jne	.L7595
	cmpq	$0, -1240(%rbp)
	je	.L7594
	movq	-1240(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L7667
.L6724:
	shrl	$3, -1212(%rbp)
	xorl	%edi, %edi
	mov	-1212(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -680(%rbp)
	testl	%r12d, %r12d
	je	.L7381
.L6857:
	movslq	%r12d,%rax
	movl	movstr_optab(,%rax,4), %edx
	movq	%rax, -688(%rbp)
	cmpl	$1317, %edx
	je	.L6843
	movq	-1240(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L7668
.L6847:
	testb	$2, target_flags+3(%rip)
	je	.L6848
	movq	-688(%rbp), %rcx
	cmpw	$63, mode_bitsize(%rcx,%rcx)
.L7506:
	jbe	.L6843
.L6846:
	movslq	%edx,%rax
	leaq	(%rax,%rax,4), %rdi
	movq	%rax, -696(%rbp)
	movq	insn_data+24(,%rdi,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L6850
	movq	-1224(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L6843
.L6850:
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L7669
.L6851:
	movq	72(%r15), %rax
	testq	%rax, %rax
	je	.L6852
	xorl	%esi, %esi
	movq	-680(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L6843
.L6852:
	call	get_last_insn
	movl	$1, %edx
	movq	-1240(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -704(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r15), %rax
	testq	%rax, %rax
	jne	.L7670
.L6853:
	movq	-696(%rbp), %r9
	movq	-1224(%rbp), %rdi
	xorl	%eax, %eax
	movq	-1232(%rbp), %rsi
	movq	%rbx, %rdx
	movq	-680(%rbp), %rcx
	leaq	(%r9,%r9,4), %r10
	call	*insn_data+16(,%r10,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L7444
	movq	-704(%rbp), %rdi
	call	delete_insns_since
.L6843:
	movq	-688(%rbp), %rdx
	movzbl	mode_wider_mode(%rdx), %r12d
	testl	%r12d, %r12d
	jne	.L6857
.L7381:
	testb	$2, target_flags+3(%rip)
	movq	-1224(%rbp), %r15
	movl	$0, volatile_ok(%rip)
	setne	%cl
	movq	8(%r15), %rsi
	movzbl	%cl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-1232(%rbp), %r11
	testb	$2, target_flags+3(%rip)
	setne	%sil
	movq	%rax, %r15
	movzbl	%sil, %edi
	movq	8(%r11), %rsi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-1240(%rbp), %rsi
	movq	sizetype_tab(%rip), %r12
	movq	%rax, %rbx
	movzbl	61(%r12), %r8d
	shrb	$1, %r8b
	movzbl	%r8b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, -1280(%rbp)
	je	.L7671
.L6866:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r15, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	-1280(%rbp), %rsi
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %r11
	movq	%rax, (%rbx)
	movq	(%r12), %rcx
	movq	8(%r11), %rdi
	movq	(%rcx), %rsi
	movq	$0, (%rsi)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	movq	%r12, %rcx
	movl	$53, %edi
	movq	fn.1(%rip), %r8
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%r8), %rbx
	xorl	%r8d, %r8d
	movq	8(%rbx), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r15)
	jne	.L7672
.L6855:
	movq	-1208(%rbp), %rdx
	cmpw	$54, (%rdx)
	je	.L7673
	movq	sizetype_tab(%rip), %r15
	movq	-1208(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	optab_table+16(%rip), %rsi
	movq	-1160(%rbp), %rdx
	xorl	%r9d, %r9d
	movzbl	61(%r15), %r12d
	movl	$3, (%rsp)
	shrb	$1, %r12b
	movzbl	%r12b, %edi
	call	expand_binop
	movq	-656(%rbp), %rdi
	movq	%rax, %rbx
	call	highest_pow2_factor
	movq	-1208(%rbp), %rsi
	movq	%r13, %rdi
	movq	%rax, %rdx
	call	offset_address
	movq	%rax, %r13
	call	gen_label_rtx
	xorl	%r9d, %r9d
	movq	%rax, -1288(%rbp)
	movq	const_int_rtx+512(%rip), %rsi
	movq	%rbx, %rdi
	movzbl	2(%rbx), %r8d
	movl	$107, %edx
	xorl	%ecx, %ecx
	movq	%rax, (%rsp)
	call	emit_cmp_and_jump_insns
.L6869:
	cmpq	const_int_rtx+512(%rip), %rbx
	je	.L6870
	cmpw	$66, (%r13)
	movq	%r13, -1304(%rbp)
	je	.L7674
	movzbl	2(%r13), %edi
	call	get_mode_alignment
.L7507:
	movl	%eax, -1292(%rbp)
.L6872:
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L6875
	cmpw	$54, (%rbx)
	je	.L7675
.L6875:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L6877
	cmpl	$66, %eax
	je	.L7676
.L6881:
	cmpl	$75, %eax
	je	.L6885
	cmpl	$78, %eax
	je	.L6885
.L6880:
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L6890
	cmpl	$66, %eax
	je	.L7677
.L6894:
	cmpl	$75, %eax
	je	.L6898
	cmpl	$78, %eax
	je	.L6898
.L6893:
	cmpw	$54, (%rbx)
	je	.L7678
.L6903:
	shrl	$3, -1292(%rbp)
	xorl	%edi, %edi
	mov	-1292(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r15d
	movq	%rax, -728(%rbp)
	testl	%r15d, %r15d
	je	.L7395
.L6997:
	movslq	%r15d,%rsi
	movl	clrstr_optab(,%rsi,4), %edx
	movq	%rsi, -736(%rbp)
	cmpl	$1317, %edx
	je	.L6984
	cmpw	$54, (%rbx)
	je	.L7679
.L6988:
	testb	$2, target_flags+3(%rip)
	je	.L6989
	movq	-736(%rbp), %rcx
	cmpw	$63, mode_bitsize(%rcx,%rcx)
.L7511:
	jbe	.L6984
.L6987:
	movslq	%edx,%rax
	leaq	(%rax,%rax,4), %rsi
	movq	%rax, -744(%rbp)
	movq	insn_data+24(,%rsi,8), %r11
	movq	(%r11), %rax
	movq	%r11, -752(%rbp)
	testq	%rax, %rax
	je	.L6991
	movq	-1304(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L6984
.L6991:
	movq	-752(%rbp), %r10
	movq	48(%r10), %rax
	testq	%rax, %rax
	je	.L6992
	xorl	%esi, %esi
	movq	-728(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L6984
.L6992:
	call	get_last_insn
	movl	$1, %edx
	movq	%rbx, %rsi
	movl	%r15d, %edi
	movq	%rax, -760(%rbp)
	call	convert_to_mode
	movq	-752(%rbp), %rdx
	movq	%rax, %r12
	movq	24(%rdx), %rax
	testq	%rax, %rax
	jne	.L7680
.L6993:
	movq	-744(%rbp), %r9
	movq	-1304(%rbp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	-728(%rbp), %rdx
	leaq	(%r9,%r9,4), %r15
	call	*insn_data+16(,%r15,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L7512
	movq	-760(%rbp), %rdi
	call	delete_insns_since
.L6984:
	movq	-736(%rbp), %r12
	movzbl	mode_wider_mode(%r12), %r15d
	testl	%r15d, %r15d
	jne	.L6997
.L7395:
	testb	$2, target_flags+3(%rip)
	movq	-1304(%rbp), %r11
	setne	%sil
	movzbl	%sil, %edi
	movq	8(%r11), %rsi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%rbx, %rsi
	movq	sizetype_tab(%rip), %r8
	movq	%rax, %r15
	movzbl	61(%r8), %ecx
	shrb	$1, %cl
	movzbl	%cl, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.0(%rip)
	movq	%rax, -1336(%rbp)
	je	.L7681
.L7002:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r15, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	const_int_rtx+512(%rip), %rsi
	movq	integer_types+40(%rip), %rdi
	movq	%rax, %r12
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	-1336(%rbp), %rsi
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.0(%rip), %r8
	movq	%rax, (%rbx)
	movq	(%r12), %rsi
	movq	8(%r8), %rdi
	movq	(%rsi), %r11
	movq	$0, (%r11)
	call	build_pointer_type
	movq	fn.0(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movl	$53, %edi
	movq	fn.0(%rip), %rcx
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%rcx), %r9
	movq	%r12, %rcx
	movq	8(%r9), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r15)
	jne	.L7682
.L6870:
	cmpq	$0, -1288(%rbp)
	je	.L6445
	movq	-1288(%rbp), %rdi
	call	emit_label
	jmp	.L6445
.L7682:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r15, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
.L7512:
	call	emit_insn
	jmp	.L6870
.L7681:
	movl	$.LC7, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.0(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.0(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.0, %edi
	movq	%rax, fn.0(%rip)
	call	ggc_add_tree_root
	movq	fn.0(%rip), %rdx
	xorl	%esi, %esi
	orb	$1, 49(%rdx)
	movq	fn.0(%rip), %r10
	orb	$8, 18(%r10)
	movq	fn.0(%rip), %rdi
	orb	$64, 50(%rdi)
	movq	fn.0(%rip), %rbx
	orb	$2, 18(%rbx)
	movq	fn.0(%rip), %rdi
	call	make_decl_rtl
	movq	fn.0(%rip), %rdi
	call	assemble_external
	jmp	.L7002
.L7680:
	movq	%r12, %rdi
	movl	%r15d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L6993
	movq	%r12, %rsi
	movl	%r15d, %edi
	call	copy_to_mode_reg
	movq	%rax, %r12
	jmp	.L6993
	.p2align 6,,7
.L6989:
	movq	-736(%rbp), %r8
	cmpw	$31, mode_bitsize(%r8,%r8)
	jmp	.L7511
.L7679:
	movq	mode_mask_array(,%rsi,8), %r12
	shrq	$1, %r12
	cmpq	%r12, 8(%rbx)
	jbe	.L6987
	jmp	.L6988
.L7678:
	movq	8(%rbx), %r15
	xorl	%r8d, %r8d
	movl	$17, %esi
.L6916:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L7384
.L6913:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %r12
	cmpq	%rsi, %r12
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L6913
.L7384:
	testl	%edi, %edi
	je	.L6906
	movslq	%edi,%r12
	movq	%r12, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L6915
	movq	%r8, -1464(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-1464(%rbp), %r8
	jb	.L6915
	movzbq	mode_size(%r12), %rdi
	movq	%r15, %rax
	xorl	%edx, %edx
	divq	%rdi
	addq	%rax, %r8
	movq	%rdx, %r15
.L6915:
	movzbq	mode_size(%r12), %rsi
	cmpq	$1, %rsi
	ja	.L6916
.L6906:
	testq	%r15, %r15
	jne	.L7587
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L6919
	movq	ix86_cost(%rip), %r9
	mov	40(%r9), %r10d
	cmpq	%r10, %r8
	jae	.L6903
.L6920:
	movq	8(%rbx), %r12
	movq	-1304(%rbp), %rsi
	xorl	%edx, %edx
	testb	$2, target_flags+3(%rip)
	movq	$clear_by_pieces_1, -232(%rbp)
	movq	$0, -224(%rbp)
	setne	%dl
	movq	%r12, -248(%rbp)
	movq	%rsi, -272(%rbp)
	leaq	-272(%rbp), %r12
	movq	8(%rsi), %r8
	leaq	16(%r12), %rcx
	xorl	%esi, %esi
	movq	$0, -240(%rbp)
	movl	$0, -1316(%rbp)
	leaq	5(,%rdx,4), %r11
	movq	%r8, -264(%rbp)
	movq	%r11, -1328(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L6924
	cmpw	$99, %dx
	je	.L6924
	cmpw	$98, %dx
	je	.L6924
.L6923:
	movl	%esi, (%rcx)
	movl	$0, 20(%r12)
	leaq	56(%r12), %rdx
	movzwl	(%r8), %eax
	xorl	%ecx, %ecx
	cmpw	$96, %ax
	je	.L6926
	cmpw	$98, %ax
	je	.L6926
.L6925:
	movl	%ecx, (%rdx)
	movl	56(%r12), %eax
	testl	%eax, %eax
	je	.L6927
	movq	24(%r12), %r15
	movq	%r15, 32(%r12)
.L6927:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L6928
	movq	24(%r12), %r15
	movq	$0, -1312(%rbp)
	movl	$17, %esi
.L6941:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L7387
.L6938:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %r9
	cmpq	%rsi, %r9
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L6938
.L7387:
	testl	%edi, %edi
	je	.L6931
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L6940
	movq	%r8, -1464(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-1464(%rbp), %r8
	jb	.L6940
	movzbq	mode_size(%rbx), %rsi
	movq	%r15, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, -1312(%rbp)
	movq	%rdx, %r15
.L6940:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L6941
.L6931:
	testq	%r15, %r15
	jne	.L7587
	cmpq	$2, -1312(%rbp)
	jbe	.L6928
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L7389
.L6949:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	-1328(%rbp), %rdx
	cmovae	-1316(%rbp), %ecx
	movl	%ecx, -1316(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L6949
.L7389:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L6928
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L6953
	cmpw	$54, %dx
	je	.L6953
	cmpw	$55, %dx
	je	.L6953
	cmpw	$58, %dx
	je	.L6953
	cmpw	$134, %dx
	je	.L6953
	cmpw	$56, %dx
	je	.L6953
	cmpw	$140, %dx
	je	.L6953
.L6928:
	cmpq	$1, -1328(%rbp)
	jbe	.L6956
.L6977:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L7392
.L6963:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %r9
	cmpq	-1328(%rbp), %r9
	cmovae	-1316(%rbp), %ecx
	movl	%ecx, -1316(%rbp)
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L6963
.L7392:
	movl	-1316(%rbp), %ecx
	testl	%ecx, %ecx
	je	.L6956
	movslq	-1316(%rbp),%r8
	movq	%r8, -712(%rbp)
	salq	$4, %r8
	addq	optab_table+240(%rip), %r8
	movl	8(%r8), %ebx
	cmpl	$1317, %ebx
	je	.L6965
	movl	-1316(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L6965
	movq	-712(%rbp), %r11
	movslq	%ebx,%rdx
	leaq	(%rdx,%rdx,4), %rbx
	movq	insn_data+16(,%rbx,8), %rsi
	movzbq	mode_size(%r11), %rdx
	cmpq	%rdx, 24(%r12)
	movq	%rsi, -720(%rbp)
	movq	%rdx, %r15
	jb	.L6965
	movl	56(%r12), %ecx
.L6975:
	testl	%ecx, %ecx
	je	.L6969
	subq	%rdx, 32(%r12)
.L6969:
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L6970
	movq	(%r12), %rdi
	movl	-1316(%rbp), %esi
	movl	$1, %r8d
	movq	8(%r12), %rdx
	movq	32(%r12), %rcx
	call	adjust_automodify_address_1
.L7510:
	movl	-1316(%rbp), %edx
	movq	%rax, %rbx
	movq	48(%r12), %rdi
	movq	32(%r12), %rsi
	call	*40(%r12)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	*-720(%rbp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L6974
	addq	%r15, 32(%r12)
.L6974:
	movq	24(%r12), %r10
	movq	%r15, %rdx
	subq	%r15, %r10
	cmpq	%r15, %r10
	movq	%r10, 24(%r12)
	jae	.L6975
.L6965:
	movq	-712(%rbp), %r9
	movzbq	mode_size(%r9), %r15
	cmpq	$1, %r15
	movq	%r15, -1328(%rbp)
	ja	.L6977
.L6956:
	cmpq	$0, 24(%r12)
	je	.L6870
.L7547:
	movl	$.LC0, %edi
	movl	$2524, %esi
	movl	$.LC6, %edx
	jmp	.L7528
	.p2align 6,,7
.L6970:
	movq	(%r12), %rdi
	movl	-1316(%rbp), %esi
	movl	$1, %ecx
	movq	32(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L7510
.L6953:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, 8(%r12)
	jmp	.L6928
.L6926:
	movl	$1, %ecx
	jmp	.L6925
.L6924:
	movl	$1, %esi
	jmp	.L6923
.L6919:
	cmpq	$2, %r8
	ja	.L6903
	jmp	.L6920
.L6898:
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbx), %rdi
	movq	%rax, %r15
	call	protect_from_queue
	cmpq	8(%rbx), %r15
	movq	%rax, %r12
	je	.L7683
.L6900:
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r15, 8(%rax)
	movq	%r12, 16(%rax)
	jmp	.L6893
.L7683:
	cmpq	16(%rbx), %rax
	jne	.L6900
	jmp	.L6893
.L7677:
	cmpb	$51, 2(%rbx)
	je	.L6891
	movq	8(%rbx), %r15
	cmpw	$71, (%r15)
	je	.L7684
.L6891:
	cmpl	$66, %eax
	jne	.L6894
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%rbx), %rax
	movq	%rax, %r12
	je	.L6893
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r12, 8(%rax)
	jmp	.L6893
.L7684:
	movq	8(%r15), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r15)
	movq	%rax, %r12
	je	.L6892
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L6893
.L6892:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L7509:
	movq	%rax, %rbx
	jmp	.L6893
.L6890:
	cmpq	$0, 16(%rbx)
	je	.L7685
	movq	24(%rbx), %rax
	testq	%rax, %rax
	jne	.L7509
	movq	8(%rbx), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%rbx), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	16(%rbx), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbx), %rbx
	jmp	.L6893
.L7685:
	movq	8(%rbx), %rdi
	call	copy_to_reg
	jmp	.L7509
.L6885:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r15
	call	protect_from_queue
	cmpq	8(%r13), %r15
	movq	%rax, %r12
	je	.L7686
.L6887:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -1304(%rbp)
	movq	%r15, 8(%rax)
	movq	-1304(%rbp), %rax
	movq	%r12, 16(%rax)
	jmp	.L6880
.L7686:
	cmpq	16(%r13), %rax
	jne	.L6887
	jmp	.L6880
.L7676:
	jne	.L6881
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %r12
	je	.L6880
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -1304(%rbp)
	movq	%r12, 8(%rax)
	jmp	.L6880
.L6877:
	cmpq	$0, 16(%r13)
	je	.L7687
	movq	24(%r13), %r10
	testq	%r10, %r10
	movq	%r10, -1304(%rbp)
	jne	.L6880
	movq	8(%r13), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rax
.L7508:
	movq	%rax, -1304(%rbp)
	jmp	.L6880
.L7687:
	movq	8(%r13), %rdi
	call	copy_to_reg
	jmp	.L7508
.L7675:
	movzbl	%al, %edx 
	movzbl	mode_size(%rdx), %edi
	cmpl	8(%rbx), %edi
	jne	.L6875
	movq	const_tiny_rtx(,%rdx,8), %rsi
	movq	%r13, %rdi
	call	emit_move_insn
	jmp	.L6870
.L7674:
	movq	16(%r13), %rax
	movl	$8, -1292(%rbp)
	testq	%rax, %rax
	je	.L6872
	movl	32(%rax), %eax
	jmp	.L7507
.L7673:
	movq	8(%rdx), %rsi
	movq	-1160(%rbp), %rdi
	negq	%rsi
	call	plus_constant_wide
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r13, %rdi
	movl	$51, %esi
	movq	%rax, %rbx
	movq	-1208(%rbp), %r13
	movq	8(%r13), %rdx
	call	adjust_address_1
	movq	%rax, %r13
	jmp	.L6869
.L7672:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r15, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L6855
.L7671:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %rdx
	xorl	%esi, %esi
	orb	$1, 49(%rdx)
	movq	fn.1(%rip), %r9
	orb	$8, 18(%r9)
	movq	fn.1(%rip), %r10
	orb	$64, 50(%r10)
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L6866
.L7444:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L6855
.L7670:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L6853
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L6853
	.p2align 6,,7
.L7669:
	movq	-1232(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L6843
	jmp	.L6851
.L6848:
	movq	-688(%rbp), %rbx
	cmpw	$31, mode_bitsize(%rbx,%rbx)
	jmp	.L7506
.L7668:
	movq	mode_mask_array(,%rax,8), %r11
	shrq	$1, %r11
	cmpq	%r11, 8(%rcx)
	jbe	.L6846
	jmp	.L6847
.L7667:
	movq	8(%rcx), %r12
	xorl	%r15d, %r15d
	movl	$17, %esi
.L6737:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L7370
.L6734:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L6734
.L7370:
	testl	%edi, %edi
	je	.L6727
	movslq	%edi,%rbx
	movq	%rbx, %r11
	salq	$4, %r11
	addq	optab_table+240(%rip), %r11
	cmpl	$1317, 8(%r11)
	je	.L6736
	call	get_mode_alignment
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L6736
	movzbq	mode_size(%rbx), %r10
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r10
	addq	%rax, %r15
	movq	%rdx, %r12
.L6736:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L6737
.L6727:
	testq	%r12, %r12
	jne	.L7587
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L6740
	movq	ix86_cost(%rip), %rsi
	mov	40(%rsi), %edx
	cmpq	%rdx, %r15
	jae	.L6724
.L6741:
	movq	-1240(%rbp), %r8
	movq	-1232(%rbp), %rax
	movq	-1224(%rbp), %r10
	movq	-1224(%rbp), %r11
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r15b
	movq	8(%rax), %r8
	movq	$0, -296(%rbp)
	movl	$0, -1260(%rbp)
	movq	%r8, -320(%rbp)
	movzbl	%r15b, %ecx
	movq	8(%r10), %rdi
	movq	%r11, -352(%rbp)
	leal	5(,%rcx,4), %r15d
	xorl	%ecx, %ecx
	movq	%rdi, -1248(%rbp)
	movq	-1248(%rbp), %rbx
	movzwl	(%rbx), %edx
	leal	-96(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L6746
	cmpw	$99, %dx
	je	.L6746
	cmpw	$98, %dx
	je	.L6746
.L6745:
	movq	-1248(%rbp), %rsi
	movl	%ecx, -336(%rbp)
	xorl	%edx, %edx
	movzwl	(%rsi), %eax
	cmpw	$96, %ax
	je	.L6748
	cmpw	$98, %ax
	je	.L6748
.L6747:
	movl	%edx, -288(%rbp)
	movq	-1248(%rbp), %r11
	xorl	%ecx, %ecx
	movq	-1232(%rbp), %rdx
	movq	%r11, -344(%rbp)
	movq	%rdx, -328(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L6751
	cmpw	$99, %dx
	je	.L6751
	cmpw	$98, %dx
	je	.L6751
.L6750:
	movl	-288(%rbp), %ebx
	movl	%ecx, -312(%rbp)
	movl	$0, -308(%rbp)
	movl	$0, -332(%rbp)
	testl	%ebx, %ebx
	je	.L6752
	movq	%r12, -296(%rbp)
.L6752:
	movl	-312(%rbp), %edi
	movq	%r12, -304(%rbp)
	testl	%edi, %edi
	je	.L6754
	movl	-336(%rbp), %r10d
	testl	%r10d, %r10d
	jne	.L6753
.L6754:
	movq	$0, -1256(%rbp)
	movl	$17, %esi
.L6767:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L7373
.L6764:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L6764
.L7373:
	testl	%edi, %edi
	je	.L6757
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L6766
	movq	%r8, -1464(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-1464(%rbp), %r8
	jb	.L6766
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, -1256(%rbp)
	movq	%rdx, %r12
.L6766:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L6767
.L6757:
	testq	%r12, %r12
	jne	.L7587
	cmpq	$2, -1256(%rbp)
	jbe	.L6753
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L7375
.L6775:
	movslq	%ecx,%rbx
	movzbl	mode_size(%rbx), %edi
	cmpl	%r15d, %edi
	cmovae	-1260(%rbp), %ecx
	movl	%ecx, -1260(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L6775
.L7375:
	movl	-312(%rbp), %eax
	testl	%eax, %eax
	jne	.L6781
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L6779
	cmpw	$54, %dx
	je	.L6779
	cmpw	$55, %dx
	je	.L6779
	cmpw	$58, %dx
	je	.L6779
	cmpw	$134, %dx
	je	.L6779
	cmpw	$56, %dx
	je	.L6779
	cmpw	$140, %dx
	je	.L6779
.L6781:
	movl	-336(%rbp), %r9d
	testl	%r9d, %r9d
	jne	.L6753
	movq	-1248(%rbp), %r8
	movzwl	(%r8), %edx
	leal	-67(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L6783
	cmpw	$54, %dx
	je	.L6783
	cmpw	$55, %dx
	je	.L6783
	cmpw	$58, %dx
	je	.L6783
	cmpw	$134, %dx
	je	.L6783
	cmpw	$56, %dx
	je	.L6783
	cmpw	$140, %dx
	je	.L6783
.L6753:
	cmpl	$1, %r15d
	jbe	.L6786
.L6837:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L7378
.L6793:
	movslq	%ecx,%r12
	movzbl	mode_size(%r12), %edx
	cmpl	%r15d, %edx
	cmovae	-1260(%rbp), %ecx
	movl	%ecx, -1260(%rbp)
	movzbl	mode_wider_mode(%r12), %ecx
	testl	%ecx, %ecx
	jne	.L6793
.L7378:
	movl	-1260(%rbp), %r15d
	testl	%r15d, %r15d
	je	.L6786
	movslq	-1260(%rbp),%rsi
	movq	%rsi, %r11
	movq	%rsi, -664(%rbp)
	salq	$4, %r11
	addq	optab_table+240(%rip), %r11
	movl	8(%r11), %ebx
	cmpl	$1317, %ebx
	je	.L6795
	movl	-1260(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L6795
	movq	-664(%rbp), %rax
	movslq	%ebx,%r9
	leaq	-352(%rbp), %r12
	leaq	(%r9,%r9,4), %r10
	movq	$0, -1272(%rbp)
	movq	insn_data+16(,%r10,8), %rbx
	movzbq	mode_size(%rax), %rdx
	cmpq	%rdx, -304(%rbp)
	movq	%rbx, -672(%rbp)
	movq	%rdx, -904(%rbp)
	jb	.L6795
	movl	-288(%rbp), %ecx
.L6835:
	testl	%ecx, %ecx
	je	.L6799
	subq	%rdx, 56(%r12)
.L6799:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L6800
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L6801
	movl	-1260(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L7502:
	movq	%rax, -1272(%rbp)
.L6800:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L6803
	movq	24(%r12), %rdi
	movl	-1260(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L7503:
	cmpq	$0, (%r12)
	movq	%rax, %r15
	jne	.L7688
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L6809
	movq	-664(%rbp), %r8
	movzbl	mode_size(%r8), %ecx
	leal	7(%rcx), %edx
	andl	$-8, %edx
.L6810:
	movq	cfun(%rip), %rdi
	andl	$33554432, %esi
	movq	16(%rdi), %rbx
	leaq	8(%rbx), %rdi
	movl	8(%rbx), %ecx
	je	.L6811
	movq	-664(%rbp), %rsi
	movzbl	mode_size(%rsi), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L7504:
	movq	-664(%rbp), %r9
	leal	(%rax,%rcx), %r8d
	movl	%r8d, (%rdi)
	salq	$4, %r9
	addq	optab_table+384(%rip), %r9
	movl	8(%r9), %eax
	cmpl	$1317, %eax
	je	.L6813
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %r11
	movq	insn_data+24(,%r11,8), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	je	.L6814
	movq	%r15, %rdi
	movl	-1260(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L7689
.L6814:
	leaq	(%rbx,%rbx,4), %rsi
	movq	%r15, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%rsi,8)
.L7505:
	movq	%rax, %rdi
	call	emit_insn
.L6833:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L6834
	movq	-904(%rbp), %r15
	addq	%r15, 56(%r12)
.L6834:
	movq	48(%r12), %r8
	movq	-904(%rbp), %rdx
	subq	-904(%rbp), %r8
	cmpq	%rdx, %r8
	movq	%r8, 48(%r12)
	jae	.L6835
.L6795:
	movq	-664(%rbp), %r12
	movzbl	mode_size(%r12), %r15d
	cmpl	$1, %r15d
	ja	.L6837
.L6786:
	cmpq	$0, -304(%rbp)
	je	.L6855
	jmp	.L7537
.L7689:
	movl	-1260(%rbp), %edi
	movq	%r15, %rsi
	call	force_reg
	movq	%rax, %r15
	jmp	.L6814
.L6813:
	movq	-664(%rbp), %rax
	movzbl	mode_size(%rax), %ebx
	cmpl	%edx, %ebx
	je	.L7690
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r10b
	movzbl	%r10b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	testb	$2, target_flags+3(%rip)
	setne	%dil
	movq	%rax, %rcx
	movzbl	%dil, %esi
	movl	$100, %edi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L6821:
	movl	-1260(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%r9d, %r9d
	testq	%r9, %r9
	movq	%rax, %rbx
	je	.L6830
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L7691
.L6830:
	movq	%rbx, %rdi
	movq	%r15, %rsi
	call	emit_move_insn
	jmp	.L6833
.L7691:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L6830
.L7690:
	testb	$2, target_flags+3(%rip)
	movl	$96, %edi
	setne	%dl
	movzbl	%dl, %esi
	movq	global_rtl+16(%rip), %rdx
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L6821
	.p2align 6,,7
.L6811:
	movq	-664(%rbp), %r10
	movzbl	mode_size(%r10), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L7504
.L6809:
	movq	-664(%rbp), %rdx
	movzbl	mode_size(%rdx), %r11d
	leal	1(%r11), %edx
	andl	$-2, %edx
	jmp	.L6810
.L7688:
	movq	%rax, %rsi
	movq	-1272(%rbp), %rdi
	xorl	%eax, %eax
	call	*-672(%rbp)
	jmp	.L7505
.L6803:
	movq	24(%r12), %rdi
	movl	-1260(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L7503
.L6801:
	movl	-1260(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L7502
.L6783:
	movq	-1248(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -344(%rbp)
	jmp	.L6753
.L6779:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -320(%rbp)
	jmp	.L6781
.L6751:
	movl	$1, %ecx
	jmp	.L6750
.L6748:
	movl	$1, %edx
	jmp	.L6747
.L6746:
	movl	$1, %ecx
	jmp	.L6745
.L6740:
	cmpq	$2, %r15
	ja	.L6724
	jmp	.L6741
.L6716:
	movq	-1208(%rbp), %r15
	xorl	%esi, %esi
	movq	8(%r15), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-1208(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-1208(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L7692
.L6718:
	movq	-1208(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -1240(%rbp)
	movq	%r12, 8(%rax)
	movq	-1240(%rbp), %rax
	movq	%rbx, 16(%rax)
	jmp	.L6711
.L7692:
	cmpq	16(%rcx), %rax
	jne	.L6718
	jmp	.L6711
.L7666:
	cmpb	$51, 2(%rdx)
	je	.L6709
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L7693
.L6709:
	cmpl	$66, %eax
	jne	.L6712
	movq	-1208(%rbp), %r12
	xorl	%esi, %esi
	movq	8(%r12), %rdi
	call	protect_from_queue
	movq	-1208(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L6711
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -1240(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L6711
.L7693:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L6710
	movq	-1208(%rbp), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -1240(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L6711
.L6710:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L7501:
	movq	%rax, -1240(%rbp)
	jmp	.L6711
.L6708:
	movq	-1208(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L7694
	movq	-1208(%rbp), %rcx
	movq	24(%rcx), %r11
	testq	%r11, %r11
	movq	%r11, -1240(%rbp)
	jne	.L6711
	movq	-1208(%rbp), %r10
	movq	8(%r10), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	-1208(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdi
	movq	%rdi, -1240(%rbp)
	jmp	.L6711
.L7694:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L7501
.L6703:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L7695
.L6705:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -1232(%rbp)
	movq	%r12, 8(%rax)
	movq	-1232(%rbp), %r10
	movq	%rbx, 16(%r10)
	jmp	.L6698
.L7695:
	cmpq	16(%r14), %rax
	jne	.L6705
	jmp	.L6698
.L7665:
	cmpb	$51, 2(%r14)
	je	.L6696
	movq	8(%r14), %r12
	cmpw	$71, (%r12)
	je	.L7696
.L6696:
	cmpl	$66, %eax
	jne	.L6699
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L6698
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -1232(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L6698
.L7696:
	movq	8(%r12), %rsi
	movq	%r14, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L6697
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -1232(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L6698
.L6697:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L7500:
	movq	%rax, -1232(%rbp)
	jmp	.L6698
.L6695:
	cmpq	$0, 16(%r14)
	je	.L7697
	movq	24(%r14), %rsi
	testq	%rsi, %rsi
	movq	%rsi, -1232(%rbp)
	jne	.L6698
	movq	8(%r14), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rax
	jmp	.L7500
.L7697:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L7500
.L6690:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L7698
.L6692:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -1224(%rbp)
	movq	%r12, 8(%rax)
	movq	-1224(%rbp), %r11
	movq	%rbx, 16(%r11)
	jmp	.L6685
.L7698:
	cmpq	16(%r13), %rax
	jne	.L6692
	jmp	.L6685
.L7664:
	jne	.L6686
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L6685
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -1224(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L6685
.L6682:
	testq	%rsi, %rsi
	je	.L7699
	movq	24(%r13), %rcx
	testq	%rcx, %rcx
	movq	%rcx, -1224(%rbp)
	jne	.L6685
	movq	8(%r13), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rdi
	movq	%rdi, -1224(%rbp)
	jmp	.L6685
.L7699:
	movq	8(%r13), %rdi
	call	copy_to_reg
	movq	%rax, -1224(%rbp)
	jmp	.L6685
	.p2align 6,,7
.L6675:
	testq	%rsi, %rsi
	movl	$8, -1212(%rbp)
	je	.L6671
	movl	32(%rsi), %eax
	movl	%eax, -1212(%rbp)
	jmp	.L6671
	.p2align 6,,7
.L6674:
	cmpl	$7, %edx
	ja	.L6670
	jmp	.L6675
.L7663:
	movq	-1160(%rbp), %rax
	movslq	32(%r15),%rcx
	cmpq	%rcx, 8(%rax)
	jge	.L6470
	movq	%r13, -1144(%rbp)
	movq	%r14, -1152(%rbp)
	movl	$8, %edx
	movq	16(%r13), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L6474
	movl	32(%rax), %edx
.L6474:
	movq	16(%r14), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L6475
	cmpl	32(%rax), %edx
	jb	.L6476
.L6471:
	testq	%rcx, %rcx
	movl	$8, -1136(%rbp)
	je	.L6472
	movl	32(%rcx), %ecx
.L7491:
	movl	%ecx, -1136(%rbp)
.L6472:
	cmpb	$51, 2(%r13)
	jne	.L7598
	cmpb	$51, 2(%r14)
	jne	.L7597
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L6483
	cmpl	$66, %eax
	je	.L7700
.L6487:
	cmpl	$75, %eax
	je	.L6491
	cmpl	$78, %eax
	je	.L6491
.L6486:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L6496
	cmpl	$66, %eax
	je	.L7701
.L6500:
	cmpl	$75, %eax
	je	.L6504
	cmpl	$78, %eax
	je	.L6504
.L6499:
	movq	-1160(%rbp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L6509
	cmpl	$66, %eax
	je	.L7702
.L6513:
	cmpl	$75, %eax
	je	.L6517
	cmpl	$78, %eax
	je	.L6517
.L6512:
	movq	-1144(%rbp), %rsi
	cmpw	$66, (%rsi)
	jne	.L7596
	movq	-1152(%rbp), %rbx
	cmpw	$66, (%rbx)
	jne	.L7595
	cmpq	$0, -1160(%rbp)
	je	.L7594
	movq	-1160(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L7703
.L6525:
	shrl	$3, -1136(%rbp)
	xorl	%edi, %edi
	mov	-1136(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -624(%rbp)
	testl	%r12d, %r12d
	je	.L7367
.L6658:
	movslq	%r12d,%rax
	movl	movstr_optab(,%rax,4), %edx
	movq	%rax, -632(%rbp)
	cmpl	$1317, %edx
	je	.L6644
	movq	-1160(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L7704
.L6648:
	testb	$2, target_flags+3(%rip)
	je	.L6649
	movq	-632(%rbp), %rbx
	cmpw	$63, mode_bitsize(%rbx,%rbx)
.L7499:
	jbe	.L6644
.L6647:
	movslq	%edx,%rax
	leaq	(%rax,%rax,4), %r11
	movq	%rax, -640(%rbp)
	movq	insn_data+24(,%r11,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L6651
	movq	-1144(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L6644
.L6651:
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L7705
.L6652:
	movq	72(%r15), %rax
	testq	%rax, %rax
	je	.L6653
	xorl	%esi, %esi
	movq	-624(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L6644
.L6653:
	call	get_last_insn
	movl	$1, %edx
	movq	-1160(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -648(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r15), %rax
	testq	%rax, %rax
	jne	.L7706
.L6654:
	movq	-640(%rbp), %rdi
	xorl	%eax, %eax
	movq	-1152(%rbp), %rsi
	movq	%rbx, %rdx
	movq	-624(%rbp), %rcx
	leaq	(%rdi,%rdi,4), %r15
	movq	-1144(%rbp), %rdi
	call	*insn_data+16(,%r15,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L7446
	movq	-648(%rbp), %rdi
	call	delete_insns_since
.L6644:
	movq	-632(%rbp), %rdx
	movzbl	mode_wider_mode(%rdx), %r12d
	testl	%r12d, %r12d
	jne	.L6658
.L7367:
	testb	$2, target_flags+3(%rip)
	movq	-1144(%rbp), %r9
	movl	$0, volatile_ok(%rip)
	setne	%bl
	movq	8(%r9), %rsi
	movzbl	%bl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-1152(%rbp), %r12
	testb	$2, target_flags+3(%rip)
	setne	%r8b
	movq	%rax, %r15
	movq	8(%r12), %rsi
	movzbl	%r8b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	sizetype_tab(%rip), %r10
	movq	%rax, %rbx
	movzbl	61(%r10), %esi
	shrb	$1, %sil
	movzbl	%sil, %edi
	movq	-1160(%rbp), %rsi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, -1200(%rbp)
	je	.L7707
.L6667:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r15, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	-1200(%rbp), %rsi
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %r8
	movq	%rax, (%rbx)
	movq	(%r12), %rbx
	movq	8(%r8), %rdi
	movq	(%rbx), %r9
	movq	$0, (%r9)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %rsi
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%rsi), %r10
	movq	8(%r10), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r15)
	je	.L6445
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r15, %rdx
	jmp	.L7522
.L7707:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %rdx
	xorl	%esi, %esi
	orb	$1, 49(%rdx)
	movq	fn.1(%rip), %rdi
	orb	$8, 18(%rdi)
	movq	fn.1(%rip), %r11
	orb	$64, 50(%r11)
	movq	fn.1(%rip), %rcx
	orb	$2, 18(%rcx)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L6667
.L7706:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L6654
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L6654
.L7705:
	movq	-1152(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L6644
	jmp	.L6652
	.p2align 6,,7
.L6649:
	movq	-632(%rbp), %rcx
	cmpw	$31, mode_bitsize(%rcx,%rcx)
	jmp	.L7499
.L7704:
	movq	mode_mask_array(,%rax,8), %r8
	shrq	$1, %r8
	cmpq	%r8, 8(%rcx)
	jbe	.L6647
	jmp	.L6648
.L7703:
	movq	8(%rcx), %r12
	xorl	%r15d, %r15d
	movl	$17, %esi
.L6538:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L7356
.L6535:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L6535
.L7356:
	testl	%edi, %edi
	je	.L6528
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L6537
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L6537
	movzbq	mode_size(%rbx), %r10
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r10
	addq	%rax, %r15
	movq	%rdx, %r12
.L6537:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L6538
.L6528:
	testq	%r12, %r12
	jne	.L7587
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L6541
	movq	ix86_cost(%rip), %rsi
	mov	40(%rsi), %r12d
	cmpq	%r12, %r15
	jae	.L6525
.L6542:
	movq	-1160(%rbp), %r8
	movq	-1152(%rbp), %r10
	movq	-1144(%rbp), %r11
	movq	-1144(%rbp), %rdx
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r15b
	movq	8(%r10), %r8
	movq	$0, -72(%rbp)
	movl	$0, -1180(%rbp)
	movq	%r8, -96(%rbp)
	movzbl	%r15b, %ecx
	movq	8(%r11), %rdi
	movq	%rdx, -128(%rbp)
	leal	5(,%rcx,4), %r15d
	xorl	%ecx, %ecx
	movq	%rdi, -1168(%rbp)
	movq	-1168(%rbp), %r9
	movzwl	(%r9), %edx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L6547
	cmpw	$99, %dx
	je	.L6547
	cmpw	$98, %dx
	je	.L6547
.L6546:
	movq	-1168(%rbp), %rsi
	movl	%ecx, -112(%rbp)
	xorl	%edx, %edx
	movzwl	(%rsi), %eax
	cmpw	$96, %ax
	je	.L6549
	cmpw	$98, %ax
	je	.L6549
.L6548:
	movq	-1168(%rbp), %r9
	movq	-1152(%rbp), %rax
	movl	%edx, -64(%rbp)
	xorl	%ecx, %ecx
	movq	%r9, -120(%rbp)
	movq	%rax, -104(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L6552
	cmpw	$99, %dx
	je	.L6552
	cmpw	$98, %dx
	je	.L6552
.L6551:
	movl	-64(%rbp), %edx
	movl	%ecx, -88(%rbp)
	movl	$0, -84(%rbp)
	movl	$0, -108(%rbp)
	testl	%edx, %edx
	je	.L6553
	movq	%r12, -72(%rbp)
.L6553:
	movl	-88(%rbp), %edi
	movq	%r12, -80(%rbp)
	testl	%edi, %edi
	je	.L6555
	movl	-112(%rbp), %r11d
	testl	%r11d, %r11d
	jne	.L6554
.L6555:
	movq	$0, -1176(%rbp)
	movl	$17, %esi
.L6568:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L7359
.L6565:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L6565
.L7359:
	testl	%edi, %edi
	je	.L6558
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L6567
	movq	%r8, -1464(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-1464(%rbp), %r8
	jb	.L6567
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, -1176(%rbp)
	movq	%rdx, %r12
.L6567:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L6568
.L6558:
	testq	%r12, %r12
	jne	.L7587
	cmpq	$2, -1176(%rbp)
	jbe	.L6554
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L7361
.L6576:
	movslq	%ecx,%rdi
	movzbl	mode_size(%rdi), %edx
	cmpl	%r15d, %edx
	cmovae	-1180(%rbp), %ecx
	movl	%ecx, -1180(%rbp)
	movzbl	mode_wider_mode(%rdi), %ecx
	testl	%ecx, %ecx
	jne	.L6576
.L7361:
	movl	-88(%rbp), %eax
	testl	%eax, %eax
	jne	.L6582
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L6580
	cmpw	$54, %dx
	je	.L6580
	cmpw	$55, %dx
	je	.L6580
	cmpw	$58, %dx
	je	.L6580
	cmpw	$134, %dx
	je	.L6580
	cmpw	$56, %dx
	je	.L6580
	cmpw	$140, %dx
	je	.L6580
.L6582:
	movl	-112(%rbp), %eax
	testl	%eax, %eax
	jne	.L6554
	movq	-1168(%rbp), %rbx
	movzwl	(%rbx), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L6584
	cmpw	$54, %dx
	je	.L6584
	cmpw	$55, %dx
	je	.L6584
	cmpw	$58, %dx
	je	.L6584
	cmpw	$134, %dx
	je	.L6584
	cmpw	$56, %dx
	je	.L6584
	cmpw	$140, %dx
	je	.L6584
.L6554:
	cmpl	$1, %r15d
	jbe	.L6587
.L6638:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L7364
.L6594:
	movslq	%ecx,%r8
	movzbl	mode_size(%r8), %r12d
	cmpl	%r15d, %r12d
	cmovae	-1180(%rbp), %ecx
	movl	%ecx, -1180(%rbp)
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L6594
.L7364:
	movl	-1180(%rbp), %eax
	testl	%eax, %eax
	je	.L6587
	movslq	-1180(%rbp),%rax
	movq	%rax, %r15
	movq	%rax, -608(%rbp)
	salq	$4, %r15
	addq	optab_table+240(%rip), %r15
	movl	8(%r15), %ebx
	cmpl	$1317, %ebx
	je	.L6596
	movl	-1180(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r9d
	cmpl	%eax, %r9d
	jb	.L6596
	movq	-608(%rbp), %rcx
	movslq	%ebx,%rdx
	leaq	-128(%rbp), %r12
	leaq	(%rdx,%rdx,4), %rdi
	movq	$0, -1192(%rbp)
	movq	insn_data+16(,%rdi,8), %rsi
	movzbq	mode_size(%rcx), %rdx
	cmpq	%rdx, -80(%rbp)
	movq	%rsi, -616(%rbp)
	movq	%rdx, -896(%rbp)
	jb	.L6596
	movl	-64(%rbp), %ecx
.L6636:
	testl	%ecx, %ecx
	je	.L6600
	subq	%rdx, 56(%r12)
.L6600:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L6601
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L6602
	movl	-1180(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L7495:
	movq	%rax, -1192(%rbp)
.L6601:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L6604
	movq	24(%r12), %rdi
	movl	-1180(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L7496:
	cmpq	$0, (%r12)
	movq	%rax, %r15
	jne	.L7708
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L6610
	movq	-608(%rbp), %r10
	movzbl	mode_size(%r10), %r11d
	leal	7(%r11), %edx
	andl	$-8, %edx
.L6611:
	movq	cfun(%rip), %rcx
	andl	$33554432, %esi
	movq	16(%rcx), %r9
	leaq	8(%r9), %rdi
	movl	8(%r9), %ecx
	je	.L6612
	movq	-608(%rbp), %rsi
	movzbl	mode_size(%rsi), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L7497:
	leal	(%rax,%rcx), %r10d
	movl	%r10d, (%rdi)
	movq	-608(%rbp), %rdi
	salq	$4, %rdi
	addq	optab_table+384(%rip), %rdi
	movl	8(%rdi), %eax
	cmpl	$1317, %eax
	je	.L6614
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %r8
	movq	insn_data+24(,%r8,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L6615
	movq	%r15, %rdi
	movl	-1180(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L7709
.L6615:
	leaq	(%rbx,%rbx,4), %r9
	movq	%r15, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r9,8)
.L7498:
	movq	%rax, %rdi
	call	emit_insn
.L6634:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L6635
	movq	-896(%rbp), %r15
	addq	%r15, 56(%r12)
.L6635:
	movq	48(%r12), %r10
	movq	-896(%rbp), %rdx
	subq	-896(%rbp), %r10
	cmpq	%rdx, %r10
	movq	%r10, 48(%r12)
	jae	.L6636
.L6596:
	movq	-608(%rbp), %r12
	movzbl	mode_size(%r12), %r15d
	cmpl	$1, %r15d
	ja	.L6638
.L6587:
	cmpq	$0, -80(%rbp)
	jmp	.L7588
.L7709:
	movl	-1180(%rbp), %edi
	movq	%r15, %rsi
	call	force_reg
	movq	%rax, %r15
	jmp	.L6615
.L6614:
	movq	-608(%rbp), %rax
	movzbl	mode_size(%rax), %ebx
	cmpl	%edx, %ebx
	je	.L7710
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	testb	$2, target_flags+3(%rip)
	setne	%dil
	movq	%rax, %rcx
	movzbl	%dil, %esi
	movl	$75, %edi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r11b
	movzbl	%r11b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L6622:
	movl	-1180(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%esi, %esi
	testq	%rsi, %rsi
	movq	%rax, %rbx
	je	.L6631
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L7711
.L6631:
	movq	%rbx, %rdi
	movq	%r15, %rsi
	call	emit_move_insn
	jmp	.L6634
.L7711:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L6631
.L7710:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%cl
	movzbl	%cl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L6622
.L6612:
	movq	-608(%rbp), %r11
	movzbl	mode_size(%r11), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L7497
.L6610:
	movq	-608(%rbp), %r8
	movzbl	mode_size(%r8), %ebx
	leal	1(%rbx), %edx
	andl	$-2, %edx
	jmp	.L6611
.L7708:
	movq	%rax, %rsi
	movq	-1192(%rbp), %rdi
	xorl	%eax, %eax
	call	*-616(%rbp)
	jmp	.L7498
.L6604:
	movq	24(%r12), %rdi
	movl	-1180(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L7496
.L6602:
	movl	-1180(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L7495
.L6584:
	movq	-1168(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -120(%rbp)
	jmp	.L6554
.L6580:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -96(%rbp)
	jmp	.L6582
.L6552:
	movl	$1, %ecx
	jmp	.L6551
.L6549:
	movl	$1, %edx
	jmp	.L6548
.L6547:
	movl	$1, %ecx
	jmp	.L6546
.L6541:
	cmpq	$2, %r15
	ja	.L6525
	jmp	.L6542
.L6517:
	movq	-1160(%rbp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-1160(%rbp), %rcx
	movq	%rax, %r12
	movq	16(%rcx), %rdi
	call	protect_from_queue
	movq	-1160(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L7712
.L6519:
	movq	-1160(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -1160(%rbp)
	movq	%r12, 8(%rax)
	movq	-1160(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L6512
.L7712:
	cmpq	16(%rsi), %rax
	jne	.L6519
	jmp	.L6512
.L7702:
	cmpb	$51, 2(%rbx)
	je	.L6510
	movq	8(%rbx), %r12
	cmpw	$71, (%r12)
	je	.L7713
.L6510:
	cmpl	$66, %eax
	jne	.L6513
	movq	-1160(%rbp), %r9
	xorl	%esi, %esi
	movq	8(%r9), %rdi
	call	protect_from_queue
	movq	-1160(%rbp), %rdx
	movq	%rax, %rbx
	cmpq	8(%rdx), %rax
	je	.L6512
	movq	%rdx, %rdi
	call	copy_rtx
	movq	%rax, -1160(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L6512
.L7713:
	movq	8(%r12), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L6511
	movq	-1160(%rbp), %r15
	movzbl	2(%r15), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -1160(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L6512
.L6511:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L7494:
	movq	%rax, -1160(%rbp)
	jmp	.L6512
.L6509:
	movq	-1160(%rbp), %rdx
	cmpq	$0, 16(%rdx)
	je	.L7714
	movq	-1160(%rbp), %r11
	movq	24(%r11), %rax
	testq	%rax, %rax
	jne	.L7494
	movq	-1160(%rbp), %r12
	movq	8(%r12), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r8
	movq	%r8, -1160(%rbp)
	jmp	.L6512
.L7714:
	movq	8(%rdx), %rdi
	call	copy_to_reg
	jmp	.L7494
.L6504:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L7715
.L6506:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -1152(%rbp)
	movq	%r12, 8(%rax)
	movq	-1152(%rbp), %rsi
	movq	%rbx, 16(%rsi)
	jmp	.L6499
.L7715:
	cmpq	16(%r14), %rax
	jne	.L6506
	jmp	.L6499
.L7701:
	cmpb	$51, 2(%r14)
	je	.L6497
	movq	8(%r14), %r12
	cmpw	$71, (%r12)
	je	.L7716
.L6497:
	cmpl	$66, %eax
	jne	.L6500
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L6499
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -1152(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L6499
.L7716:
	movq	8(%r12), %rsi
	movq	%r14, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L6498
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -1152(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L6499
.L6498:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L7493:
	movq	%rax, -1152(%rbp)
	jmp	.L6499
.L6496:
	cmpq	$0, 16(%r14)
	je	.L7717
	movq	24(%r14), %rbx
	testq	%rbx, %rbx
	movq	%rbx, -1152(%rbp)
	jne	.L6499
	movq	8(%r14), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r12
	movq	%r12, -1152(%rbp)
	jmp	.L6499
.L7717:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L7493
.L6491:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L7718
.L6493:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -1144(%rbp)
	movq	%r12, 8(%rax)
	movq	-1144(%rbp), %r11
	movq	%rbx, 16(%r11)
	jmp	.L6486
.L7718:
	cmpq	16(%r13), %rax
	jne	.L6493
	jmp	.L6486
.L7700:
	jne	.L6487
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L6486
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -1144(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L6486
.L6483:
	testq	%rsi, %rsi
	je	.L7719
	movq	24(%r13), %r8
	testq	%r8, %r8
	movq	%r8, -1144(%rbp)
	jne	.L6486
	movq	8(%r13), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rax
.L7492:
	movq	%rax, -1144(%rbp)
	jmp	.L6486
.L7719:
	movq	8(%r13), %rdi
	call	copy_to_reg
	jmp	.L7492
.L6476:
	testq	%rsi, %rsi
	movl	$8, -1136(%rbp)
	je	.L6472
	movl	32(%rsi), %ecx
	jmp	.L7491
.L6475:
	cmpl	$7, %edx
	ja	.L6471
	jmp	.L6476
	.p2align 6,,7
.L6460:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L7720
.L6462:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L6455
.L7720:
	cmpq	16(%r13), %rax
	jne	.L6462
	jmp	.L6455
	.p2align 6,,7
.L7634:
	jne	.L6456
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L6455
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	movq	%rbx, 8(%rax)
	jmp	.L6455
	.p2align 6,,7
.L6452:
	cmpq	$0, 16(%r13)
	je	.L7721
	movq	24(%r13), %rax
	testq	%rax, %rax
	je	.L6464
.L7490:
	movq	%rax, %r13
	jmp	.L6455
.L6464:
	movq	8(%r13), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L6455
.L7721:
	movq	8(%r13), %rdi
	call	copy_to_reg
	jmp	.L7490
.L7633:
	movq	144(%r15), %rax
	testq	%rax, %rax
	je	.L6447
	cmpq	%rax, %r13
	jne	.L6447
	jmp	.L6445
.L7632:
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L6445
	jmp	.L6446
	.p2align 6,,7
.L6444:
	cmpb	$0, 2(%r14)
	jne	.L6443
	cmpb	$0, 16(%r15)
	je	.L6443
	movq	8(%r15), %rdx
	movzbl	2(%r13), %edi
	movzbl	61(%rdx), %ebx
	shrb	$1, %bl
	movzbl	%bl, %esi
	cmpl	%esi, %edi
	je	.L6443
	movzbl	17(%rdx), %ecx
	movq	%r14, %rdx
	shrb	$5, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, %r14
	jmp	.L6443
.L7631:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	%r15, %rdi
	movzbl	2(%r13), %edx
	movq	%rax, %rsi
	jmp	.L7489
.L6405:
	movl	-580(%rbp), %eax
	testl	%eax, %eax
	je	.L7429
	movl	(%r13), %ecx
	movl	%ecx, %edi
	andl	$134283263, %edi
	cmpl	$66, %edi
	je	.L7722
.L6421:
	andl	$268500991, %ecx
	cmpl	$268435519, %ecx
	je	.L7723
	movzbl	2(%r13), %edx
	xorl	%ecx, %ecx
	movq	%r15, %rdi
	movq	%r13, %rsi
	call	expand_expr
	cmpw	$61, (%r13)
	movq	%rax, %r14
	je	.L7724
.L6441:
	movl	(%r13), %eax
	andl	$134283263, %eax
	cmpl	$134217794, %eax
	je	.L7433
	movq	%r14, %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L7433
	movzwl	(%r14), %edx
	leal	-67(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L6442
	cmpw	$54, %dx
	je	.L6442
	cmpw	$55, %dx
	je	.L6442
	cmpw	$58, %dx
	je	.L6442
	cmpw	$134, %dx
	je	.L6442
	cmpw	$56, %dx
	je	.L6442
	cmpw	$140, %dx
	je	.L6442
	movl	-580(%rbp), %r10d
	testl	%r10d, %r10d
	je	.L6366
.L6442:
	movl	$1, -1132(%rbp)
	jmp	.L6366
.L7724:
	cmpl	$52, 8(%r13)
	jbe	.L7433
	jmp	.L6441
.L7723:
	movl	-580(%rbp), %r11d
	xorl	%edx, %edx
	testl	%r11d, %r11d
	jne	.L6427
	movq	8(%r15), %rsi
	movzbl	16(%rsi), %eax
	cmpb	$6, %al
	je	.L6428
	cmpb	$10, %al
	je	.L6428
	cmpb	$11, %al
	je	.L6428
	cmpb	$12, %al
	je	.L6428
.L6427:
	movq	%rdx, %rsi
	xorl	%ecx, %ecx
	movq	%r15, %rdi
	xorl	%edx, %edx
	call	expand_expr
	movzwl	(%rax), %edx
	movq	%rax, %r14
	cmpw	$66, %dx
	je	.L7725
.L6430:
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L6433
	cmpw	$54, %dx
	je	.L6433
	cmpw	$55, %dx
	je	.L6433
	cmpw	$58, %dx
	je	.L6433
	cmpw	$134, %dx
	je	.L6433
	cmpw	$56, %dx
	je	.L6433
	cmpw	$140, %dx
	je	.L6433
.L6432:
	movzbl	3(%r13), %edx
	movq	8(%r13), %rdi
	movq	%r14, %rsi
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	movl	-580(%rbp), %ecx
	testl	%ecx, %ecx
	je	.L7523
	movzbl	2(%r14), %edx
	movzbl	2(%r13), %eax
	cmpb	%al, %dl
	je	.L6434
	testb	%dl, %dl
	je	.L6435
	movzbl	%al, %edi
	movq	%r14, %rsi
	call	gen_lowpart_SUBREG
	movzbl	3(%rax), %edi
	movq	%rax, %r14
	orb	$16, %dil
	movb	%dil, 3(%rax)
	andb	$-5, %dil
	movzbl	3(%r13), %eax
	andb	$4, %al
	orb	%al, %dil
	movb	%dil, 3(%r14)
.L6434:
	movl	-580(%rbp), %r13d
	testl	%r13d, %r13d
.L7590:
	jne	.L5210
	jmp	.L7523
.L6435:
	movq	8(%r13), %r11
	movzbl	3(%r13), %ecx
	movq	%r14, %rdx
	movzbl	%al, %edi
	movzbl	2(%r11), %esi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, %r14
	jmp	.L6434
.L6433:
	cmpb	$0, 2(%r14)
	jne	.L6432
	movq	8(%r15), %r9
	movzbl	3(%r13), %ecx
	movq	%r14, %rdx
	movzbl	2(%r13), %edi
	movzbl	61(%r9), %ebx
	shrb	$2, %cl
	andl	$1, %ecx
	shrb	$1, %bl
	movzbl	%bl, %esi
	call	convert_modes
	movzbl	3(%r13), %ecx
	movzbl	2(%r13), %esi
	movq	8(%r13), %r15
	movq	%rax, %rdx
	movzbl	2(%r15), %edi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, %r14
	jmp	.L6432
.L7725:
	movl	-580(%rbp), %r10d
	testl	%r10d, %r10d
	je	.L6430
	testb	$8, 3(%rax)
	jne	.L6431
	movq	8(%r13), %rdi
	movq	8(%rax), %rsi
	call	reg_mentioned_p
	testl	%eax, %eax
	je	.L7430
.L6431:
	movq	%r14, %rdi
	call	copy_to_reg
	movq	%rax, %r14
.L7430:
	movzwl	(%r14), %edx
	jmp	.L6430
.L6428:
	cmpq	$0, 8(%rsi)
	jne	.L6427
	movzbl	3(%r13), %ecx
	movzbl	17(%rsi), %r12d
	movl	$1, %edi
	movl	%ecx, %edx
	shrb	$5, %r12b
	shrb	$2, %dl
	andl	$1, %r12d
	andl	%edx, %edi
	cmpl	%edi, %r12d
	je	.L6429
	call	signed_or_unsigned_type
	movq	%r15, %rsi
	movq	%rax, %rdi
	call	convert
	movzbl	3(%r13), %ecx
	movq	%rax, %r15
.L6429:
	movq	8(%r13), %r8
	shrb	$2, %cl
	movl	$1, %esi
	andl	%ecx, %esi
	movzbl	2(%r8), %edi
	call	type_for_mode
	movq	%r15, %rsi
	movq	%rax, %rdi
	call	convert
	movq	8(%r13), %rdx
	movq	%rax, %r15
	jmp	.L6427
.L7722:
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L6421
	xorl	%ecx, %ecx
	movzbl	%al, %edx
	movq	%r15, %rdi
	movq	%r13, %rsi
	call	expand_expr
	movq	%rax, %r14
	movzbl	2(%rax), %eax
	cmpb	$51, %al
	je	.L6422
	testb	%al, %al
	je	.L6422
	cmpq	%r13, %r14
	je	.L6424
	movq	%r14, %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L7726
.L6423:
	movq	%r14, %rdi
	call	copy_to_reg
	movq	%rax, %r14
	jmp	.L6422
.L7726:
	movq	%r14, %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L6423
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L6423
.L6424:
	movl	$1, %r12d
	jmp	.L6423
	.p2align 6,,7
.L7429:
	movl	(%r13), %ecx
	jmp	.L6421
.L6414:
	movl	$1, %ebx
	jmp	.L6408
.L6415:
	xorl	%ebx, %ebx
	jmp	.L6408
.L6412:
	movq	8(%r13), %rdi
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L6414
	movq	16(%r13), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L6408
	jmp	.L6414
	.p2align 6,,7
.L7630:
	cmpb	$51, 2(%r13)
	jne	.L6367
	call	gen_label_rtx
	movq	%rax, -592(%rbp)
	call	gen_label_rtx
	movq	cfun(%rip), %r9
	movq	%rax, -600(%rbp)
	movq	16(%r9), %rsi
	movq	40(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L7349
.L6373:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L7727
	call	emit_insn
	movq	%rax, 16(%rbx)
.L6372:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %rdi
	movq	16(%rdx), %r12
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%r12)
	jne	.L6373
.L7349:
	movzwl	(%r13), %eax
	movq	%r13, %r14
	cmpl	$71, %eax
	je	.L6375
	cmpl	$66, %eax
	je	.L7728
.L6379:
	cmpl	$75, %eax
	je	.L6383
	cmpl	$78, %eax
	je	.L6383
.L6378:
	call	do_pending_stack_adjust
	movq	cfun(%rip), %r10
	movq	-592(%rbp), %rsi
	movq	16(%r10), %r8
	incl	4(%r8)
	movq	32(%r15), %rdi
	call	jumpifnot
	call	start_cleanup_deferral
	movq	40(%r15), %rdi
	xorl	%edx, %edx
	movq	%r14, %rsi
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %rbx
	movq	16(%rbx), %r11
	movq	40(%r11), %rbx
	testq	%rbx, %rbx
	je	.L7351
.L6393:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L7729
	call	emit_insn
	movq	%rax, 16(%rbx)
.L6392:
	movq	cfun(%rip), %r12
	movq	40(%rbx), %rcx
	movq	16(%r12), %rdi
	testq	%rcx, %rcx
	movq	%rcx, %rbx
	movq	%rcx, 40(%rdi)
	jne	.L6393
.L7351:
	movq	-600(%rbp), %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	-592(%rbp), %rdi
	call	emit_label
	call	start_cleanup_deferral
	movq	48(%r15), %rdi
	xorl	%edx, %edx
	movq	%r14, %rsi
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %rdx
	movq	16(%rdx), %r15
	movq	40(%r15), %rbx
	testq	%rbx, %rbx
	je	.L7353
.L6400:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L7730
	call	emit_insn
	movq	%rax, 16(%rbx)
.L6399:
	movq	cfun(%rip), %rsi
	movq	40(%rbx), %r8
	movq	16(%rsi), %r10
	testq	%r8, %r8
	movq	%r8, %rbx
	movq	%r8, 40(%r10)
	jne	.L6400
.L7353:
	movq	-600(%rbp), %rdi
	call	emit_label
	movl	-580(%rbp), %eax
	movq	cfun(%rip), %r9
	movq	16(%r9), %rbx
	decl	4(%rbx)
	testl	%eax, %eax
.L7525:
	movl	$0, %ecx
	cmove	%rcx, %r14
	jmp	.L5210
.L7730:
	movq	8(%rdi), %r11
	movq	8(%r11), %r13
	movq	%r13, 16(%rbx)
	call	emit_insn
	jmp	.L6399
.L7729:
	movq	8(%rdi), %r9
	movq	8(%r9), %rsi
	movq	%rsi, 16(%rbx)
	call	emit_insn
	jmp	.L6392
.L6383:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L7731
.L6385:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L6378
.L7731:
	cmpq	16(%r13), %rax
	jne	.L6385
	jmp	.L6378
	.p2align 6,,7
.L7728:
	jne	.L6379
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L6378
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%rbx, 8(%rax)
	jmp	.L6378
	.p2align 6,,7
.L6375:
	cmpq	$0, 16(%r13)
	je	.L7732
	movq	24(%r13), %rax
	testq	%rax, %rax
	je	.L6387
.L7488:
	movq	%rax, %r14
	jmp	.L6378
.L6387:
	movq	8(%r13), %r13
	movzbl	2(%r13), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L6378
.L7732:
	movq	8(%r13), %rdi
	call	copy_to_reg
	jmp	.L7488
	.p2align 6,,7
.L7727:
	movq	8(%rdi), %rcx
	movq	8(%rcx), %r14
	movq	%r14, 16(%rbx)
	call	emit_insn
	jmp	.L6372
.L7629:
	movq	32(%r15), %rdi
	movq	const_int_rtx+512(%rip), %rsi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	call	expand_expr
	movq	cfun(%rip), %rcx
	movq	16(%rcx), %r14
	movq	40(%r14), %rbx
	testq	%rbx, %rbx
	je	.L7347
.L6363:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L7733
	call	emit_insn
	movq	%rax, 16(%rbx)
.L6362:
	movq	cfun(%rip), %r10
	movq	40(%rbx), %r11
	movq	16(%r10), %r8
	testq	%r11, %r11
	movq	%r11, %rbx
	movq	%r11, 40(%r8)
	jne	.L6363
.L7347:
	movq	40(%r15), %rdi
	movq	%r13, %rsi
	movl	-580(%rbp), %edx
.L7526:
	call	store_expr
	jmp	.L7524
.L7733:
	movq	8(%rdi), %r12
	movq	8(%r12), %rdx
	movq	%rdx, 16(%rbx)
	call	emit_insn
	jmp	.L6362
.L7628:
	movslq	32(%rbp),%rsi
	movq	%r13, %rdi
	call	set_mem_alias_set
	jmp	.L6354
.L7627:
	movq	%rax, %rdi
	call	copy_rtx
	movq	%rax, %r13
	jmp	.L6350
.L7626:
	movq	16(%rdi), %r9
	cmpw	$54, (%r9)
	jne	.L6347
	movq	8(%rdi), %rax
	cmpq	global_rtl+48(%rip), %rax
	je	.L6346
	cmpq	global_rtl+56(%rip), %rax
	jne	.L6347
	jmp	.L6346
	.p2align 6,,7
.L7625:
	movq	%r12, %rsi
	call	compare_tree_int
	testl	%eax, %eax
	je	.L6129
	jmp	.L6130
	.p2align 6,,7
.L7602:
	testq	%r13, %r13
	jne	.L7734
	xorl	%r12d, %r12d
	movl	$0, -916(%rbp)
	cmpb	$47, %dl
	je	.L7735
	cmpb	$51, %dl
	je	.L7736
.L5233:
	movq	-1128(%rbp), %r14
	movzwl	(%r14), %eax
	subl	$66, %eax
	cmpl	$12, %eax
	ja	.L5281
	mov	%eax, %ecx
	jmp	*.L5282(,%rcx,8)
	.section	.rodata
	.align 8
	.align 4
.L5282:
	.quad	.L5275
	.quad	.L5281
	.quad	.L5281
	.quad	.L5281
	.quad	.L5281
	.quad	.L5280
	.quad	.L5281
	.quad	.L5281
	.quad	.L5281
	.quad	.L5278
	.quad	.L5278
	.quad	.L5281
	.quad	.L5278
	.text
.L5275:
	movq	-1128(%rbp), %r8
	movq	8(%r8), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L5274:
	testl	%ebx, %ebx
	je	.L5271
	movq	-1128(%rbp), %rdx
	movzbl	2(%rdx), %eax
	cmpb	$51, %al
	je	.L5283
	testb	%al, %al
	jne	.L7737
.L5283:
	movq	-1128(%rbp), %r10
	movq	%r15, %rdi
	xorl	%esi, %esi
	movzbl	2(%r10), %edx
.L7450:
	xorl	%ecx, %ecx
	call	expand_expr
	movq	-1128(%rbp), %r11
	movq	%rax, %r14
	testb	$8, 3(%r11)
	jne	.L7422
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L7422
.L5288:
	movl	$1, -916(%rbp)
.L7422:
	movzwl	(%r14), %edx
.L5232:
	leal	-67(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L5310
	cmpw	$54, %dx
	je	.L5310
	cmpw	$55, %dx
	je	.L5310
	cmpw	$58, %dx
	je	.L5310
	cmpw	$134, %dx
	je	.L5310
	cmpw	$56, %dx
	je	.L5310
	cmpw	$140, %dx
	je	.L5310
.L5309:
	movq	-1128(%rbp), %rsi
	movq	%r14, %rdi
	call	rtx_equal_p
	testl	%eax, %eax
	je	.L5312
	cmpq	-1128(%rbp), %r14
	je	.L5311
	movq	%r14, %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L7738
.L5312:
	movzbl	16(%r15), %eax
	testb	%al, %al
	je	.L5311
	testl	%r12d, %r12d
	jne	.L5311
	movzbl	%al, %edi 
	cmpb	$100, tree_code_type(%rdi)
	je	.L7739
.L5313:
	movq	-1128(%rbp), %rcx
	movzwl	(%rcx), %eax
	cmpl	$71, %eax
	je	.L5318
	cmpl	$66, %eax
	je	.L7740
.L5322:
	cmpl	$75, %eax
	je	.L5326
	cmpl	$78, %eax
	je	.L5326
.L5321:
	movq	-1128(%rbp), %r9
	movzbl	2(%r14), %eax
	movzbl	2(%r9), %ecx
	cmpb	%cl, %al
	je	.L5331
	testb	%al, %al
	je	.L5331
	movq	8(%r15), %rdi
	movl	-916(%rbp), %eax
	movzbl	17(%rdi), %r15d
	shrb	$5, %r15b
	movl	%r15d, %edx
	andl	$1, %edx
	testl	%eax, %eax
	je	.L5332
	movq	%r14, %rsi
	movzbl	%cl, %edi
	call	convert_to_mode
	movq	%rax, %r14
.L5922:
	movq	-1128(%rbp), %rdi
	movq	%r14, %rsi
	call	emit_move_insn
.L5311:
	xorl	%r12d, %r12d
	testl	%r12d, %r12d
	je	.L7523
	movl	-916(%rbp), %eax
	testl	%eax, %eax
	je	.L6124
	cmpw	$66, (%r14)
	jne	.L5210
.L6124:
	xorl	%r14d, %r14d
	testl	%r14d, %r14d
	je	.L6126
	movq	-1128(%rbp), %rax
	cmpb	$51, 2(%rax)
	je	.L6126
	cmpw	$61, (%rax)
	je	.L7741
.L6127:
	movq	-1128(%rbp), %rdi
	jmp	.L7527
.L7741:
	cmpl	$52, 8(%rax)
	ja	.L6127
.L6126:
	movq	-1128(%rbp), %r14
	jmp	.L5210
.L5332:
	movq	-1128(%rbp), %rdi
	movq	%r14, %rsi
	call	convert_move
	jmp	.L5311
.L5331:
	cmpb	$51, %al
	je	.L7742
.L5335:
	movq	-1128(%rbp), %rcx
	cmpw	$39, (%rcx)
	je	.L7743
	cmpb	$51, %al
	jne	.L5922
	movq	-1128(%rbp), %r10
	movq	%r15, %rdi
	movq	%r14, -1096(%rbp)
	movq	%r10, -1088(%rbp)
	call	expr_size
	movl	$8, %edx
	movq	-1128(%rbp), %rsi
	movq	%rax, %r15
	movq	16(%rsi), %rcx
	testq	%rcx, %rcx
	je	.L5926
	movl	32(%rcx), %edx
.L5926:
	movq	16(%r14), %rax
	testq	%rax, %rax
	je	.L5927
	cmpl	32(%rax), %edx
	jb	.L5928
.L5923:
	testq	%rax, %rax
	movl	$8, -1076(%rbp)
	je	.L5924
	movl	32(%rax), %eax
	movl	%eax, -1076(%rbp)
.L5924:
	movq	-1128(%rbp), %rdi
	cmpb	$51, 2(%rdi)
	jne	.L7598
	cmpb	$51, 2(%r14)
	jne	.L7597
	movq	-1128(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L5935
	cmpl	$66, %eax
	je	.L7744
.L5939:
	cmpl	$75, %eax
	je	.L5943
	cmpl	$78, %eax
	je	.L5943
.L5938:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L5948
	cmpl	$66, %eax
	je	.L7745
.L5952:
	cmpl	$75, %eax
	je	.L5956
	cmpl	$78, %eax
	je	.L5956
.L5951:
	movzwl	(%r15), %eax
	cmpl	$71, %eax
	je	.L5961
	cmpl	$66, %eax
	je	.L7746
.L5965:
	cmpl	$75, %eax
	je	.L5969
	cmpl	$78, %eax
	je	.L5969
.L5964:
	movq	-1088(%rbp), %rdi
	cmpw	$66, (%rdi)
	jne	.L7596
	movq	-1096(%rbp), %r11
	cmpw	$66, (%r11)
	jne	.L7595
	testq	%r15, %r15
	je	.L7594
	cmpw	$54, (%r15)
	je	.L7747
.L5977:
	shrl	$3, -1076(%rbp)
	xorl	%edi, %edi
	mov	-1076(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %ebx
	movl	$1, volatile_ok(%rip)
	movq	%rax, -528(%rbp)
	testl	%ebx, %ebx
	je	.L7331
.L6110:
	movslq	%ebx,%r12
	movl	movstr_optab(,%r12,4), %edx
	cmpl	$1317, %edx
	je	.L6096
	cmpw	$54, (%r15)
	je	.L7748
.L6100:
	testb	$2, target_flags+3(%rip)
	je	.L6101
	cmpw	$63, mode_bitsize(%r12,%r12)
.L7478:
	jbe	.L6096
.L6099:
	movslq	%edx,%rdi
	leaq	(%rdi,%rdi,4), %r11
	movq	%rdi, -536(%rbp)
	movq	insn_data+24(,%r11,8), %rcx
	movq	(%rcx), %rax
	movq	%rcx, -544(%rbp)
	testq	%rax, %rax
	je	.L6103
	movq	-1088(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L6096
.L6103:
	movq	-544(%rbp), %r9
	movq	24(%r9), %rax
	testq	%rax, %rax
	jne	.L7749
.L6104:
	movq	-544(%rbp), %r10
	movq	72(%r10), %rax
	testq	%rax, %rax
	je	.L6105
	xorl	%esi, %esi
	movq	-528(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L6096
.L6105:
	call	get_last_insn
	movl	$1, %edx
	movq	%r15, %rsi
	movl	%ebx, %edi
	movq	%rax, -552(%rbp)
	call	convert_to_mode
	movq	-544(%rbp), %r8
	movq	%rax, %r13
	movq	48(%r8), %rax
	testq	%rax, %rax
	jne	.L7750
.L6106:
	movq	-536(%rbp), %rsi
	movq	-1088(%rbp), %rdi
	xorl	%eax, %eax
	movq	%r13, %rdx
	movq	-528(%rbp), %rcx
	leaq	(%rsi,%rsi,4), %rbx
	movq	-1096(%rbp), %rsi
	call	*insn_data+16(,%rbx,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L7441
	movq	-552(%rbp), %rdi
	call	delete_insns_since
.L6096:
	movzbl	mode_wider_mode(%r12), %ebx
	testl	%ebx, %ebx
	jne	.L6110
.L7331:
	testb	$2, target_flags+3(%rip)
	movq	-1088(%rbp), %r13
	movl	$0, volatile_ok(%rip)
	setne	%r11b
	movq	8(%r13), %rsi
	movzbl	%r11b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%cl
	movq	%rax, %r13
	movq	-1096(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%cl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%r15, %rsi
	movq	sizetype_tab(%rip), %rdx
	movq	%rax, %rbx
	movzbl	61(%rdx), %r12d
	shrb	$1, %r12b
	movzbl	%r12b, %edi
.L7599:
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L7751
.L6119:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r13, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rsi
	movq	%rax, (%rbx)
	movq	(%r12), %rcx
	movq	8(%rsi), %rdi
	movq	(%rcx), %rdx
	movq	$0, (%rdx)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %rbx
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%rbx), %r15
	movq	8(%r15), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r13)
	je	.L5311
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r13, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L5311
.L7751:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r8
	xorl	%esi, %esi
	orb	$1, 49(%r8)
	movq	fn.1(%rip), %r10
	orb	$8, 18(%r10)
	movq	fn.1(%rip), %r9
	orb	$64, 50(%r9)
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L6119
.L7441:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L5311
.L7750:
	movq	%r13, %rdi
	movl	%ebx, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L6106
	movq	%r13, %rsi
	movl	%ebx, %edi
	call	copy_to_mode_reg
	movq	%rax, %r13
	jmp	.L6106
.L7749:
	movq	-1096(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L6096
	jmp	.L6104
.L6101:
	cmpw	$31, mode_bitsize(%r12,%r12)
	jmp	.L7478
.L7748:
	movq	mode_mask_array(,%r12,8), %r8
	shrq	$1, %r8
	cmpq	%r8, 8(%r15)
	jbe	.L6099
	jmp	.L6100
.L7747:
	movq	8(%r15), %r12
	xorl	%r13d, %r13d
	movl	$17, %esi
.L5990:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L7320
.L5987:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L5987
.L7320:
	testl	%edi, %edi
	je	.L5980
	movslq	%edi,%rbx
	movq	%rbx, %r9
	salq	$4, %r9
	addq	optab_table+240(%rip), %r9
	cmpl	$1317, 8(%r9)
	je	.L5989
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	jb	.L5989
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r13
	movq	%rdx, %r12
.L5989:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L5990
.L5980:
	testq	%r12, %r12
	jne	.L7587
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L5993
	movq	ix86_cost(%rip), %rdi
	mov	40(%rdi), %ecx
	cmpq	%rcx, %r13
	jae	.L5977
.L5994:
	movq	-1096(%rbp), %rsi
	testb	$2, target_flags+3(%rip)
	movq	-1088(%rbp), %r10
	setne	%r12b
	xorl	%ecx, %ecx
	movq	8(%r15), %r13
	movq	-1088(%rbp), %r9
	movq	8(%rsi), %r8
	movq	$0, -152(%rbp)
	movl	$0, -1108(%rbp)
	movzbl	%r12b, %edx
	movq	%r8, -176(%rbp)
	leal	5(,%rdx,4), %r12d
	movq	8(%r10), %rbx
	movq	%r9, -208(%rbp)
	movzwl	(%rbx), %edx
	movq	%rbx, -1104(%rbp)
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L5999
	cmpw	$99, %dx
	je	.L5999
	cmpw	$98, %dx
	je	.L5999
.L5998:
	movl	%ecx, -192(%rbp)
	xorl	%edx, %edx
	movq	-1104(%rbp), %rcx
	movzwl	(%rcx), %eax
	cmpw	$96, %ax
	je	.L6001
	cmpw	$98, %ax
	je	.L6001
.L6000:
	movq	-1104(%rbp), %r15
	movq	-1096(%rbp), %rax
	movl	%edx, -144(%rbp)
	xorl	%ecx, %ecx
	movq	%r15, -200(%rbp)
	movq	%rax, -184(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %edi
	cmpw	$1, %di
	jbe	.L6004
	cmpw	$99, %dx
	je	.L6004
	cmpw	$98, %dx
	je	.L6004
.L6003:
	movl	-144(%rbp), %r11d
	movl	%ecx, -168(%rbp)
	movl	$0, -164(%rbp)
	movl	$0, -188(%rbp)
	testl	%r11d, %r11d
	je	.L6005
	movq	%r13, -152(%rbp)
.L6005:
	movl	-168(%rbp), %ebx
	movq	%r13, -160(%rbp)
	testl	%ebx, %ebx
	je	.L6007
	movl	-192(%rbp), %r9d
	testl	%r9d, %r9d
	jne	.L6006
.L6007:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L6020:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L7323
.L6017:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L6017
.L7323:
	testl	%edi, %edi
	je	.L6010
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L6019
	movq	%r8, -1464(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-1464(%rbp), %r8
	jb	.L6019
	movzbq	mode_size(%rbx), %rdi
	movq	%r13, %rax
	xorl	%edx, %edx
	divq	%rdi
	addq	%rax, %r15
	movq	%rdx, %r13
.L6019:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L6020
.L6010:
	testq	%r13, %r13
	jne	.L7587
	cmpq	$2, %r15
	jbe	.L6006
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L7325
.L6028:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %r11d
	cmpl	%r12d, %r11d
	cmovae	-1108(%rbp), %ecx
	movl	%ecx, -1108(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L6028
.L7325:
	movl	-168(%rbp), %eax
	testl	%eax, %eax
	jne	.L6034
	movzwl	(%r8), %edx
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L6032
	cmpw	$54, %dx
	je	.L6032
	cmpw	$55, %dx
	je	.L6032
	cmpw	$58, %dx
	je	.L6032
	cmpw	$134, %dx
	je	.L6032
	cmpw	$56, %dx
	je	.L6032
	cmpw	$140, %dx
	je	.L6032
.L6034:
	movl	-192(%rbp), %eax
	testl	%eax, %eax
	jne	.L6006
	movq	-1104(%rbp), %r10
	movzwl	(%r10), %edx
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L6036
	cmpw	$54, %dx
	je	.L6036
	cmpw	$55, %dx
	je	.L6036
	cmpw	$58, %dx
	je	.L6036
	cmpw	$134, %dx
	je	.L6036
	cmpw	$56, %dx
	je	.L6036
	cmpw	$140, %dx
	je	.L6036
.L6006:
	cmpl	$1, %r12d
	jbe	.L6039
.L6090:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L7328
.L6046:
	movslq	%ecx,%rsi
	movzbl	mode_size(%rsi), %edx
	cmpl	%r12d, %edx
	cmovae	-1108(%rbp), %ecx
	movl	%ecx, -1108(%rbp)
	movzbl	mode_wider_mode(%rsi), %ecx
	testl	%ecx, %ecx
	jne	.L6046
.L7328:
	movl	-1108(%rbp), %eax
	testl	%eax, %eax
	je	.L6039
	movslq	-1108(%rbp),%r15
	movq	%r15, %r12
	salq	$4, %r12
	addq	optab_table+240(%rip), %r12
	movl	8(%r12), %ebx
	cmpl	$1317, %ebx
	je	.L6048
	movl	-1108(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	jb	.L6048
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rdi
	leaq	-208(%rbp), %r12
	leaq	(%rdi,%rdi,4), %rcx
	cmpq	%rdx, -160(%rbp)
	movq	$0, -1120(%rbp)
	movq	insn_data+16(,%rcx,8), %r13
	movq	%rdx, -880(%rbp)
	movq	%r13, -520(%rbp)
	jb	.L6048
	movl	-144(%rbp), %ecx
.L6088:
	testl	%ecx, %ecx
	je	.L6052
	subq	%rdx, 56(%r12)
.L6052:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L6053
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L6054
	movl	-1108(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L7474:
	movq	%rax, -1120(%rbp)
.L6053:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L6056
	movq	24(%r12), %rdi
	movl	-1108(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L7475:
	cmpq	$0, (%r12)
	movq	%rax, %r13
	jne	.L7752
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L6062
	movzbl	mode_size(%r15), %r11d
	leal	7(%r11), %edx
	andl	$-8, %edx
.L6063:
	movq	cfun(%rip), %r10
	andl	$33554432, %esi
	movq	16(%r10), %r9
	leaq	8(%r9), %rdi
	movl	8(%r9), %ecx
	je	.L6064
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L7476:
	movq	%r15, %rsi
	leal	(%rax,%rcx), %r8d
	salq	$4, %rsi
	movl	%r8d, (%rdi)
	addq	optab_table+384(%rip), %rsi
	movl	8(%rsi), %eax
	cmpl	$1317, %eax
	je	.L6066
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rcx
	movq	insn_data+24(,%rcx,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L6067
	movq	%r13, %rdi
	movl	-1108(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L7753
.L6067:
	leaq	(%rbx,%rbx,4), %r11
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r11,8)
.L7477:
	movq	%rax, %rdi
	call	emit_insn
.L6086:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L6087
	movq	-880(%rbp), %r13
	addq	%r13, 56(%r12)
.L6087:
	movq	48(%r12), %rsi
	movq	-880(%rbp), %rdx
	subq	-880(%rbp), %rsi
	cmpq	%rdx, %rsi
	movq	%rsi, 48(%r12)
	jae	.L6088
.L6048:
	movzbl	mode_size(%r15), %r12d
	cmpl	$1, %r12d
	ja	.L6090
.L6039:
	cmpq	$0, -160(%rbp)
.L7589:
	je	.L5311
	jmp	.L7537
	.p2align 6,,7
.L7753:
	movl	-1108(%rbp), %edi
	movq	%r13, %rsi
	call	force_reg
	movq	%rax, %r13
	jmp	.L6067
.L6066:
	movzbl	mode_size(%r15), %edi
	cmpl	%edx, %edi
	je	.L7754
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r9b
	movzbl	%r9b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L6074:
	movl	-1108(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%r10d, %r10d
	testq	%r10, %r10
	movq	%rax, %rbx
	je	.L6083
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L7755
.L6083:
	movq	%rbx, %rdi
	movq	%r13, %rsi
	call	emit_move_insn
	jmp	.L6086
.L7755:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L6083
.L7754:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L6074
.L6064:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L7476
.L6062:
	movzbl	mode_size(%r15), %ebx
	leal	1(%rbx), %edx
	andl	$-2, %edx
	jmp	.L6063
.L7752:
	movq	%rax, %rsi
	movq	-1120(%rbp), %rdi
	xorl	%eax, %eax
	call	*-520(%rbp)
	jmp	.L7477
.L6056:
	movq	24(%r12), %rdi
	movl	-1108(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L7475
.L6054:
	movl	-1108(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L7474
.L6036:
	movq	-1104(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -200(%rbp)
	jmp	.L6006
.L6032:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -176(%rbp)
	jmp	.L6034
.L6004:
	movl	$1, %ecx
	jmp	.L6003
.L6001:
	movl	$1, %edx
	jmp	.L6000
.L5999:
	movl	$1, %ecx
	jmp	.L5998
.L5993:
	cmpq	$2, %r13
	ja	.L5977
	jmp	.L5994
.L5969:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r15), %r12
	movq	%rax, %rbx
	je	.L7756
.L5971:
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, %r15
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L5964
.L7756:
	cmpq	16(%r15), %rax
	jne	.L5971
	jmp	.L5964
	.p2align 6,,7
.L7746:
	cmpb	$51, 2(%r15)
	je	.L5962
	movq	8(%r15), %r12
	cmpw	$71, (%r12)
	je	.L7757
.L5962:
	cmpl	$66, %eax
	jne	.L5965
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r15), %rax
	movq	%rax, %rbx
	je	.L5964
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, %r15
	movq	%rbx, 8(%rax)
	jmp	.L5964
.L7757:
	movq	8(%r12), %rsi
	movq	%r15, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L5963
	movzbl	2(%r15), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r15
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L5964
.L5963:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L7473:
	movq	%rax, %r15
	jmp	.L5964
.L5961:
	cmpq	$0, 16(%r15)
	je	.L7758
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L7473
	movq	8(%r15), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L5964
.L7758:
	movq	8(%r15), %rdi
	call	copy_to_reg
	jmp	.L7473
.L5956:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L7759
.L5958:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -1096(%rbp)
	movq	%r12, 8(%rax)
	movq	-1096(%rbp), %r8
	movq	%rbx, 16(%r8)
	jmp	.L5951
.L7759:
	cmpq	16(%r14), %rax
	jne	.L5958
	jmp	.L5951
	.p2align 6,,7
.L7745:
	cmpb	$51, 2(%r14)
	je	.L5949
	movq	8(%r14), %r12
	cmpw	$71, (%r12)
	je	.L7760
.L5949:
	cmpl	$66, %eax
	jne	.L5952
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L5951
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -1096(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L5951
.L7760:
	movq	8(%r12), %rsi
	movq	%r14, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L5950
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -1096(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L5951
.L5950:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L7472:
	movq	%rax, -1096(%rbp)
	jmp	.L5951
.L5948:
	cmpq	$0, 16(%r14)
	je	.L7761
	movq	24(%r14), %rsi
	testq	%rsi, %rsi
	movq	%rsi, -1096(%rbp)
	jne	.L5951
	movq	8(%r14), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rax
	movq	%rax, -1096(%rbp)
	jmp	.L5951
.L7761:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L7472
.L5943:
	movq	-1128(%rbp), %r13
	xorl	%esi, %esi
	movq	8(%r13), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-1128(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L7762
.L5945:
	movq	-1128(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -1088(%rbp)
	movq	%r12, 8(%rax)
	movq	-1088(%rbp), %rcx
	movq	%rbx, 16(%rcx)
	jmp	.L5938
.L7762:
	cmpq	16(%rsi), %rax
	jne	.L5945
	jmp	.L5938
	.p2align 6,,7
.L7744:
	jne	.L5939
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-1128(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L5938
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -1088(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L5938
	.p2align 6,,7
.L5935:
	testq	%rcx, %rcx
	je	.L7763
	movq	-1128(%rbp), %rdx
	movq	24(%rdx), %r11
	testq	%r11, %r11
	movq	%r11, -1088(%rbp)
	jne	.L5938
	movq	-1128(%rbp), %r13
	movq	8(%r13), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r12
	movq	%r12, -1088(%rbp)
	jmp	.L5938
.L7763:
	movq	-1128(%rbp), %rbx
	movq	8(%rbx), %rdi
	call	copy_to_reg
	movq	%rax, -1088(%rbp)
	jmp	.L5938
.L5928:
	testq	%rcx, %rcx
	movl	$8, -1076(%rbp)
	je	.L5924
	movl	32(%rcx), %r13d
	movl	%r13d, -1076(%rbp)
	jmp	.L5924
.L5927:
	cmpl	$7, %edx
	ja	.L5923
	jmp	.L5928
.L7743:
	movq	8(%r15), %rdi
	call	int_size_in_bytes
	movl	%eax, -484(%rbp)
	movq	-1128(%rbp), %rax
	cmpw	$39, (%rax)
	jne	.L7593
	movq	-1128(%rbp), %r8
	movq	8(%r8), %rcx
	movq	8(%rcx), %r15
	movl	(%rcx), %r13d
	cmpq	$0, 8(%r15)
	movslq	%r13d,%rdi
	sete	%r9b
	leaq	15(,%rdi,8), %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	leaq	24(%rsp), %r12
	movzbl	%r9b, %r11d
	movq	%r12, -496(%rbp)
	movl	%r11d, -1072(%rbp)
	movl	-1072(%rbp), %eax
	cmpl	%r13d, %eax
	movl	%eax, -1064(%rbp)
	jge	.L7314
.L5907:
	movslq	-1064(%rbp),%rax
	movl	-484(%rbp), %esi
	testl	%esi, %esi
	movq	8(%rcx,%rax,8), %r12
	movq	%rax, -504(%rbp)
	movq	8(%r12), %rcx
	movq	16(%r12), %r10
	movzbl	2(%rcx), %r13d
	movq	8(%r10), %r15
	movslq	%r13d,%rdx
	movzbl	mode_size(%rdx), %ebx
	movq	%rdx, -512(%rbp)
	movl	%ebx, -1068(%rbp)
	js	.L5880
	mov	%ebx, %r11d
	movslq	-484(%rbp),%rbx
	leaq	(%r11,%r15), %rdi
	cmpq	%rbx, %rdi
	jle	.L5880
	movl	-484(%rbp), %r9d
	subl	%r15d, %r9d
	movl	%r9d, -1068(%rbp)
	je	.L7592
.L5880:
	movzwl	(%r14), %edx
	movq	%r14, %r12
	cmpw	$66, %dx
	je	.L7447
	leal	-67(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L5884
	cmpw	$54, %dx
	je	.L5884
	cmpw	$55, %dx
	je	.L5884
	cmpw	$58, %dx
	je	.L5884
	cmpw	$134, %dx
	je	.L5884
	cmpw	$56, %dx
	je	.L5884
	cmpw	$140, %dx
	je	.L5884
.L5883:
	movzbl	2(%r14), %eax
	movl	%r13d, %edi
	testb	%al, %al
	je	.L7470
	movzbl	%al, %edi
.L7470:
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	emit_move_insn
	movzwl	(%r12), %edx
.L5882:
	cmpw	$66, %dx
	je	.L7447
.L5887:
	cmpw	$65, %dx
	je	.L7764
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L5904
	cmpw	$54, %dx
	je	.L5904
	cmpw	$55, %dx
	je	.L5904
	cmpw	$58, %dx
	je	.L5904
	cmpw	$134, %dx
	je	.L5904
	cmpw	$56, %dx
	je	.L5904
	cmpw	$140, %dx
	je	.L5904
	cmpw	$61, %dx
	je	.L7765
.L5903:
	movslq	-484(%rbp),%rdi
	movl	-1068(%rbp), %edx
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r13d, %r9d
	movl	%r13d, (%rsp)
	sall	$3, %edx
	mov	%edx, %esi
	movq	%rdi, 8(%rsp)
	leaq	0(,%r15,8), %rdx
	movq	%r12, %rdi
	call	extract_bit_field
.L7471:
	movq	-504(%rbp), %r12
	movq	-496(%rbp), %r11
	movq	%rax, (%r11,%r12,8)
.L5878:
	movq	-1128(%rbp), %r9
	incl	-1064(%rbp)
	movl	-1064(%rbp), %eax
	movq	8(%r9), %rcx
	cmpl	(%rcx), %eax
	jl	.L5907
.L7314:
	movq	cfun(%rip), %r15
	movq	16(%r15), %r8
	movq	40(%r8), %rbx
	testq	%rbx, %rbx
	je	.L7316
.L5913:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L7766
	call	emit_insn
	movq	%rax, 16(%rbx)
.L5912:
	movq	cfun(%rip), %rdi
	movq	40(%rbx), %r13
	movq	16(%rdi), %rcx
	testq	%r13, %r13
	movq	%r13, %rbx
	movq	%r13, 40(%rcx)
	jne	.L5913
	movq	-1128(%rbp), %rbx
	movq	8(%rbx), %rcx
.L7316:
	movl	-1072(%rbp), %r11d
	cmpl	(%rcx), %r11d
	jge	.L5311
.L5919:
	movslq	-1072(%rbp),%r8
	movq	-496(%rbp), %r9
	salq	$3, %r8
	movq	8(%r8,%rcx), %r15
	movq	(%r9,%r8), %rsi
	movq	8(%r15), %rdi
	call	emit_move_insn
	movq	-1128(%rbp), %rax
	incl	-1072(%rbp)
	movl	-1072(%rbp), %edx
	movq	8(%rax), %r12
	cmpl	(%r12), %edx
	movq	%r12, %rcx
	jl	.L5919
	jmp	.L5311
.L7766:
	movq	8(%rdi), %r10
	movq	8(%r10), %rsi
	movq	%rsi, 16(%rbx)
	call	emit_insn
	jmp	.L5912
.L7765:
	movzbl	2(%r12), %r10d
	cmpl	%r13d, %r10d
	jne	.L5903
.L5904:
	movq	-504(%rbp), %rcx
	movq	-496(%rbp), %r13
	movq	%r12, (%r13,%rcx,8)
	jmp	.L5878
.L7764:
	testq	%r15, %r15
	jne	.L7426
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %r9
	movzbl	mode_size(%r9), %ebx
	cmpl	%ebx, -1068(%rbp)
	je	.L5893
.L5894:
	movzbq	2(%rdx), %rsi
	movzbq	mode_size(%rsi), %r8
	cmpq	%r8, %r15
	je	.L7767
.L5892:
	testq	%r15, %r15
	jne	.L7034
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbx
	movzbq	mode_size(%rbx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %r15
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r15, %rdi
	movl	%r13d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	jmp	.L7471
.L7767:
	movq	16(%r12), %rdx
	movzbq	2(%rdx), %rcx
	movzbl	mode_size(%rcx), %r10d
	cmpl	%r10d, -1068(%rbp)
	jne	.L5892
.L5893:
	xorl	%edi, %edi
	movq	-504(%rbp), %r11
	movq	-496(%rbp), %rax
	testq	%r15, %r15
	setne	%dil
	leaq	(%rax,%r11,8), %rbx
	movq	8(%r12,%rdi,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L5878
	cmpw	$54, %dx
	je	.L5878
	cmpw	$55, %dx
	je	.L5878
	cmpw	$58, %dx
	je	.L5878
	cmpw	$134, %dx
	je	.L5878
	cmpw	$56, %dx
	je	.L5878
	cmpw	$140, %dx
	je	.L5878
	cmpw	$61, %dx
	je	.L7768
.L5898:
	movslq	-484(%rbp),%r9
	movl	-1068(%rbp), %r8d
	movl	%r13d, (%rsp)
	xorl	%edx, %edx
	movl	$1, %ecx
	sall	$3, %r8d
	movq	%r9, 8(%rsp)
	mov	%r8d, %esi
	movl	%r13d, %r9d
	movq	(%rbx), %rdi
	xorl	%r8d, %r8d
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L5878
.L7768:
	movzbl	2(%rcx), %r12d
	cmpl	%r13d, %r12d
	jne	.L5898
	jmp	.L5878
	.p2align 6,,7
.L7426:
	movq	8(%r12), %rdx
	jmp	.L5894
.L7447:
	movl	%r13d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L5888
	cmpl	%eax, 32(%rdx)
	jae	.L5889
.L7425:
	movzwl	(%r12), %edx
	jmp	.L5887
.L5889:
	movl	%r13d, %edi
	leaq	0(,%r15,8), %rbx
	call	get_mode_alignment
	mov	%eax, %ecx
	movq	%rbx, %rax
	cqto
	idivq	%rcx
	testq	%rdx, %rdx
	jne	.L7425
	movq	-512(%rbp), %rax
	movzbl	mode_size(%rax), %edx
	cmpl	%edx, -1068(%rbp)
	jne	.L7425
	movl	%r13d, %edi
	call	gen_reg_rtx
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-496(%rbp), %rdi
	movq	-504(%rbp), %r11
	movl	%r13d, %esi
	movq	%r15, %rdx
	leaq	(%rdi,%r11,8), %rbx
	movq	%r12, %rdi
	movq	%rax, (%rbx)
	call	adjust_address_1
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L5878
.L5888:
	cmpl	$8, %eax
	ja	.L7425
	jmp	.L5889
.L5884:
	movzbl	2(%r14), %ecx
	movzbl	%cl, %esi
	cmpl	%r13d, %esi
	je	.L5882
	testb	%cl, %cl
	je	.L5882
	jmp	.L5883
.L7742:
	cmpb	$29, 16(%r15)
	jne	.L5335
	movq	%r15, %rdi
	call	expr_size
	cmpw	$54, (%rax)
	movq	%rax, -944(%rbp)
	je	.L7769
.L5336:
	movq	sizetype_tab(%rip), %rdi
	movq	-944(%rbp), %rsi
	call	make_tree
	xorl	%esi, %esi
	movslq	32(%r15),%rdi
	movq	%rax, %r12
	call	size_int_wide
	movq	%r12, %rsi
	movl	$78, %edi
	movq	%rax, %rdx
	call	size_binop
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	movq	%rax, -408(%rbp)
	call	expand_expr
	xorl	%edx, %edx
	movl	ptr_mode(%rip), %edi
	movq	%rax, %rsi
	movq	$0, -1032(%rbp)
	call	convert_to_mode
	movl	$8, %edx
	movq	%r14, -992(%rbp)
	movq	-1128(%rbp), %r13
	movq	%rax, -976(%rbp)
	movq	%rax, -1000(%rbp)
	movq	%r13, -984(%rbp)
	movq	16(%r13), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L5539
	movl	32(%rax), %edx
.L5539:
	movq	16(%r14), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L5540
	cmpl	32(%rax), %edx
	jb	.L5541
.L5536:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L5537
	movl	32(%rcx), %r15d
.L5537:
	movq	-1128(%rbp), %rbx
	cmpb	$51, 2(%rbx)
	jne	.L7598
	cmpb	$51, 2(%r14)
	jne	.L7597
	movq	-1128(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L5548
	cmpl	$66, %eax
	je	.L7770
.L5552:
	cmpl	$75, %eax
	je	.L5556
	cmpl	$78, %eax
	je	.L5556
.L5551:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L5561
	cmpl	$66, %eax
	je	.L7771
.L5565:
	cmpl	$75, %eax
	je	.L5569
	cmpl	$78, %eax
	je	.L5569
.L5564:
	movq	-976(%rbp), %rcx
	movzwl	(%rcx), %eax
	cmpl	$71, %eax
	je	.L5574
	cmpl	$66, %eax
	je	.L7772
.L5578:
	cmpl	$75, %eax
	je	.L5582
	cmpl	$78, %eax
	je	.L5582
.L5577:
	movq	-984(%rbp), %rsi
	cmpw	$66, (%rsi)
	jne	.L7596
	movq	-992(%rbp), %rax
	cmpw	$66, (%rax)
	jne	.L7595
	cmpq	$0, -1000(%rbp)
	je	.L7594
	movq	-1000(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L7773
.L5590:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -424(%rbp)
	testl	%r12d, %r12d
	je	.L7298
.L5723:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L5709
	movq	-1000(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L7774
.L5713:
	testb	$2, target_flags+3(%rip)
	je	.L5714
	cmpw	$63, mode_bitsize(%r15,%r15)
.L7464:
	jbe	.L5709
.L5712:
	movslq	%edx,%rcx
	leaq	(%rcx,%rcx,4), %rsi
	movq	%rcx, -432(%rbp)
	movq	insn_data+24(,%rsi,8), %r13
	movq	(%r13), %rax
	testq	%rax, %rax
	je	.L5716
	movq	-984(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L5709
.L5716:
	movq	24(%r13), %rax
	testq	%rax, %rax
	jne	.L7775
.L5717:
	movq	72(%r13), %rax
	testq	%rax, %rax
	je	.L5718
	xorl	%esi, %esi
	movq	-424(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L5709
.L5718:
	call	get_last_insn
	movl	$1, %edx
	movq	-1000(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -440(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r13), %rax
	testq	%rax, %rax
	jne	.L7776
.L5719:
	movq	-432(%rbp), %rdx
	movq	-984(%rbp), %rdi
	xorl	%eax, %eax
	movq	-992(%rbp), %rsi
	movq	-424(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L7439
	movq	-440(%rbp), %rdi
	call	delete_insns_since
.L5709:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L5723
.L7298:
	testb	$2, target_flags+3(%rip)
	movq	-984(%rbp), %r8
	movl	$0, volatile_ok(%rip)
	setne	%r11b
	movq	8(%r8), %rsi
	movzbl	%r11b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%bl
	movq	%rax, %r13
	movq	-992(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%bl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-1000(%rbp), %rsi
	movq	sizetype_tab(%rip), %r10
	movq	%rax, %rbx
	movzbl	61(%r10), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L7777
.L5732:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r13, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %r8
	movq	8(%rdx), %rdi
	movq	(%r8), %rbx
	movq	$0, (%rbx)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r10
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r10), %r15
	movq	8(%r15), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r13)
	jne	.L7778
.L5721:
	movq	-976(%rbp), %rbx
	cmpw	$54, (%rbx)
	je	.L7779
	movq	sizetype_tab(%rip), %r11
	movq	-976(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	optab_table+16(%rip), %rsi
	movq	-944(%rbp), %rdx
	xorl	%r9d, %r9d
	movzbl	61(%r11), %r12d
	movl	$3, (%rsp)
	shrb	$1, %r12b
	movzbl	%r12b, %edi
	call	expand_binop
	movq	-408(%rbp), %rdi
	movq	%rax, %rbx
	call	highest_pow2_factor
	movq	-976(%rbp), %rsi
	movq	-1128(%rbp), %rdi
	movq	%rax, %rdx
	call	offset_address
	movq	%rax, -1128(%rbp)
	call	gen_label_rtx
	xorl	%r9d, %r9d
	movq	%rax, -1032(%rbp)
	movq	const_int_rtx+512(%rip), %rsi
	movq	%rbx, %rdi
	movzbl	2(%rbx), %r8d
	movl	$107, %edx
	xorl	%ecx, %ecx
	movq	%rax, (%rsp)
	call	emit_cmp_and_jump_insns
.L5735:
	cmpq	const_int_rtx+512(%rip), %rbx
	je	.L5736
	movq	-1128(%rbp), %rdx
	cmpw	$66, (%rdx)
	movq	%rdx, -1048(%rbp)
	je	.L7780
	movq	-1128(%rbp), %rax
	movzbl	2(%rax), %edi
	call	get_mode_alignment
.L7465:
	movl	%eax, -1036(%rbp)
.L5738:
	movq	-1128(%rbp), %rsi
	movzbl	2(%rsi), %eax
	cmpb	$51, %al
	je	.L5741
	cmpw	$54, (%rbx)
	je	.L7781
.L5741:
	movq	-1128(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L5743
	cmpl	$66, %eax
	je	.L7782
.L5747:
	cmpl	$75, %eax
	je	.L5751
	cmpl	$78, %eax
	je	.L5751
.L5746:
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L5756
	cmpl	$66, %eax
	je	.L7783
.L5760:
	cmpl	$75, %eax
	je	.L5764
	cmpl	$78, %eax
	je	.L5764
.L5759:
	cmpw	$54, (%rbx)
	je	.L7784
.L5769:
	shrl	$3, -1036(%rbp)
	xorl	%edi, %edi
	mov	-1036(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r13d
	movq	%rax, -456(%rbp)
	testl	%r13d, %r13d
	je	.L7312
.L5863:
	movslq	%r13d,%rcx
	movl	clrstr_optab(,%rcx,4), %edx
	movq	%rcx, -464(%rbp)
	cmpl	$1317, %edx
	je	.L5850
	cmpw	$54, (%rbx)
	je	.L7785
.L5854:
	testb	$2, target_flags+3(%rip)
	je	.L5855
	movq	-464(%rbp), %rax
	cmpw	$63, mode_bitsize(%rax,%rax)
.L7468:
	jbe	.L5850
.L5853:
	movslq	%edx,%r15
	leaq	(%r15,%r15,4), %r9
	movq	%r15, -472(%rbp)
	movq	insn_data+24(,%r9,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L5857
	movq	-1048(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L5850
.L5857:
	movq	48(%r15), %rax
	testq	%rax, %rax
	je	.L5858
	xorl	%esi, %esi
	movq	-456(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L5850
.L5858:
	call	get_last_insn
	movl	$1, %edx
	movq	%rbx, %rsi
	movl	%r13d, %edi
	movq	%rax, -480(%rbp)
	call	convert_to_mode
	movq	%rax, %r12
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L7786
.L5859:
	movq	-472(%rbp), %rsi
	movq	-1048(%rbp), %rdi
	xorl	%eax, %eax
	movq	-456(%rbp), %rdx
	leaq	(%rsi,%rsi,4), %r8
	movq	%r12, %rsi
	call	*insn_data+16(,%r8,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L7469
	movq	-480(%rbp), %rdi
	call	delete_insns_since
.L5850:
	movq	-464(%rbp), %rdx
	movzbl	mode_wider_mode(%rdx), %r13d
	testl	%r13d, %r13d
	jne	.L5863
.L7312:
	testb	$2, target_flags+3(%rip)
	movq	-1048(%rbp), %r13
	setne	%r12b
	movq	8(%r13), %rsi
	movzbl	%r12b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%rbx, %rsi
	movq	sizetype_tab(%rip), %rcx
	movq	%rax, %r13
	movzbl	61(%rcx), %r10d
	shrb	$1, %r10b
	movzbl	%r10b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.0(%rip)
	movq	%rax, %r15
	je	.L7787
.L5868:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r13, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	const_int_rtx+512(%rip), %rsi
	movq	integer_types+40(%rip), %rdi
	movq	%rax, %r12
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.0(%rip), %rsi
	movq	%rax, (%rbx)
	movq	(%r12), %r10
	movq	8(%rsi), %rdi
	movq	(%r10), %rdx
	movq	$0, (%rdx)
	call	build_pointer_type
	movq	fn.0(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	movq	%r12, %rcx
	movl	$53, %edi
	movq	fn.0(%rip), %r8
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%r8), %r15
	xorl	%r8d, %r8d
	movq	8(%r15), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r13)
	jne	.L7788
.L5736:
	cmpq	$0, -1032(%rbp)
	je	.L5311
	movq	-1032(%rbp), %rdi
	call	emit_label
	jmp	.L5311
.L7788:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r13, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
.L7469:
	call	emit_insn
	jmp	.L5736
.L7787:
	movl	$.LC7, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.0(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.0(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.0, %edi
	movq	%rax, fn.0(%rip)
	call	ggc_add_tree_root
	movq	fn.0(%rip), %r9
	xorl	%esi, %esi
	orb	$1, 49(%r9)
	movq	fn.0(%rip), %r11
	orb	$8, 18(%r11)
	movq	fn.0(%rip), %rdi
	orb	$64, 50(%rdi)
	movq	fn.0(%rip), %rbx
	orb	$2, 18(%rbx)
	movq	fn.0(%rip), %rdi
	call	make_decl_rtl
	movq	fn.0(%rip), %rdi
	call	assemble_external
	jmp	.L5868
.L7786:
	movq	%r12, %rdi
	movl	%r13d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L5859
	movq	%r12, %rsi
	movl	%r13d, %edi
	call	copy_to_mode_reg
	movq	%rax, %r12
	jmp	.L5859
	.p2align 6,,7
.L5855:
	movq	-464(%rbp), %r11
	cmpw	$31, mode_bitsize(%r11,%r11)
	jmp	.L7468
.L7785:
	movq	mode_mask_array(,%rcx,8), %r12
	shrq	$1, %r12
	cmpq	%r12, 8(%rbx)
	jbe	.L5853
	jmp	.L5854
.L7784:
	movq	8(%rbx), %r13
	xorl	%r15d, %r15d
	movl	$17, %esi
.L5782:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L7301
.L5779:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L5779
.L7301:
	testl	%edi, %edi
	je	.L5772
	movslq	%edi,%r12
	movq	%r12, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L5781
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L5781
	movzbq	mode_size(%r12), %r11
	movq	%r13, %rax
	xorl	%edx, %edx
	divq	%r11
	addq	%rax, %r15
	movq	%rdx, %r13
.L5781:
	movzbq	mode_size(%r12), %rsi
	cmpq	$1, %rsi
	ja	.L5782
.L5772:
	testq	%r13, %r13
	jne	.L7587
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L5785
	movq	ix86_cost(%rip), %r9
	mov	40(%r9), %r12d
	cmpq	%r12, %r15
	jae	.L5769
.L5786:
	movq	8(%rbx), %r10
	movq	-1048(%rbp), %r15
	leaq	-272(%rbp), %r12
	testb	$2, target_flags+3(%rip)
	movq	$clear_by_pieces_1, -232(%rbp)
	movq	$0, -224(%rbp)
	setne	%dl
	leaq	16(%r12), %rcx
	movq	%r15, -272(%rbp)
	movq	%r10, -248(%rbp)
	movq	8(%r15), %r8
	movq	$0, -240(%rbp)
	movl	$0, -1060(%rbp)
	movzbl	%dl, %esi 
	movq	%r8, -264(%rbp)
	movzwl	(%r8), %edx
	leaq	5(,%rsi,4), %r15
	xorl	%esi, %esi
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L5790
	cmpw	$99, %dx
	je	.L5790
	cmpw	$98, %dx
	je	.L5790
.L5789:
	movl	%esi, (%rcx)
	movl	$0, 20(%r12)
	leaq	56(%r12), %rdx
	movzwl	(%r8), %eax
	xorl	%ecx, %ecx
	cmpw	$96, %ax
	je	.L5792
	cmpw	$98, %ax
	je	.L5792
.L5791:
	movl	%ecx, (%rdx)
	movl	56(%r12), %eax
	testl	%eax, %eax
	je	.L5793
	movq	24(%r12), %rcx
	movq	%rcx, 32(%r12)
.L5793:
	movl	16(%r12), %edi
	testl	%edi, %edi
	jne	.L5794
	movq	24(%r12), %r13
	movq	$0, -1056(%rbp)
	movl	$17, %esi
.L5807:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L7304
.L5804:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %r9
	cmpq	%rsi, %r9
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L5804
.L7304:
	testl	%edi, %edi
	je	.L5797
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L5806
	movq	%r8, -1464(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-1464(%rbp), %r8
	jb	.L5806
	movzbq	mode_size(%rbx), %rcx
	movq	%r13, %rax
	xorl	%edx, %edx
	divq	%rcx
	addq	%rax, -1056(%rbp)
	movq	%rdx, %r13
.L5806:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L5807
.L5797:
	testq	%r13, %r13
	jne	.L7587
	cmpq	$2, -1056(%rbp)
	jbe	.L5794
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L7306
.L5815:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%r15, %rdx
	cmovae	-1060(%rbp), %ecx
	movl	%ecx, -1060(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L5815
.L7306:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L5794
	movzwl	(%r8), %edx
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L5819
	cmpw	$54, %dx
	je	.L5819
	cmpw	$55, %dx
	je	.L5819
	cmpw	$58, %dx
	je	.L5819
	cmpw	$134, %dx
	je	.L5819
	cmpw	$56, %dx
	je	.L5819
	cmpw	$140, %dx
	je	.L5819
.L5794:
	cmpq	$1, %r15
	jbe	.L5822
.L5843:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L7309
.L5829:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %r9
	cmpq	%r15, %r9
	cmovae	-1060(%rbp), %ecx
	movl	%ecx, -1060(%rbp)
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L5829
.L7309:
	movl	-1060(%rbp), %r15d
	testl	%r15d, %r15d
	je	.L5822
	movslq	-1060(%rbp),%r15
	movq	%r15, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	movl	8(%rsi), %ebx
	cmpl	$1317, %ebx
	je	.L5831
	movl	-1060(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	jb	.L5831
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rcx
	leaq	(%rcx,%rcx,4), %r10
	cmpq	%rdx, 24(%r12)
	movq	insn_data+16(,%r10,8), %r13
	movq	%r13, -448(%rbp)
	movq	%rdx, %r13
	jb	.L5831
	movl	56(%r12), %ecx
.L5841:
	testl	%ecx, %ecx
	je	.L5835
	subq	%rdx, 32(%r12)
.L5835:
	movl	16(%r12), %ebx
	testl	%ebx, %ebx
	je	.L5836
	movq	(%r12), %rdi
	movl	-1060(%rbp), %esi
	movl	$1, %r8d
	movq	8(%r12), %rdx
	movq	32(%r12), %rcx
	call	adjust_automodify_address_1
.L7467:
	movl	-1060(%rbp), %edx
	movq	%rax, %rbx
	movq	48(%r12), %rdi
	movq	32(%r12), %rsi
	call	*40(%r12)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	*-448(%rbp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L5840
	addq	%r13, 32(%r12)
.L5840:
	movq	24(%r12), %rdi
	movq	%r13, %rdx
	subq	%r13, %rdi
	cmpq	%r13, %rdi
	movq	%rdi, 24(%r12)
	jae	.L5841
.L5831:
	movzbq	mode_size(%r15), %r15
	cmpq	$1, %r15
	ja	.L5843
.L5822:
	cmpq	$0, 24(%r12)
	je	.L5736
	jmp	.L7547
	.p2align 6,,7
.L5836:
	movq	(%r12), %rdi
	movl	-1060(%rbp), %esi
	movl	$1, %ecx
	movq	32(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L7467
.L5819:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, 8(%r12)
	jmp	.L5794
.L5792:
	movl	$1, %ecx
	jmp	.L5791
.L5790:
	movl	$1, %esi
	jmp	.L5789
.L5785:
	cmpq	$2, %r15
	ja	.L5769
	jmp	.L5786
.L5764:
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbx), %rdi
	movq	%rax, %r13
	call	protect_from_queue
	cmpq	8(%rbx), %r13
	movq	%rax, %r12
	je	.L7789
.L5766:
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r13, 8(%rax)
	movq	%r12, 16(%rax)
	jmp	.L5759
.L7789:
	cmpq	16(%rbx), %rax
	jne	.L5766
	jmp	.L5759
.L7783:
	cmpb	$51, 2(%rbx)
	je	.L5757
	movq	8(%rbx), %r13
	cmpw	$71, (%r13)
	je	.L7790
.L5757:
	cmpl	$66, %eax
	jne	.L5760
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%rbx), %rax
	movq	%rax, %r12
	je	.L5759
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r12, 8(%rax)
	jmp	.L5759
.L7790:
	movq	8(%r13), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r13)
	movq	%rax, %r12
	je	.L5758
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L5759
.L5758:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L7466:
	movq	%rax, %rbx
	jmp	.L5759
.L5756:
	cmpq	$0, 16(%rbx)
	je	.L7791
	movq	24(%rbx), %rax
	testq	%rax, %rax
	jne	.L7466
	movq	8(%rbx), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%rbx), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	16(%rbx), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbx), %rbx
	jmp	.L5759
.L7791:
	movq	8(%rbx), %rdi
	call	copy_to_reg
	jmp	.L7466
.L5751:
	movq	-1128(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	movq	-1128(%rbp), %rsi
	movq	%rax, %r13
	movq	16(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-1128(%rbp), %rdx
	movq	%rax, %r12
	cmpq	8(%rdx), %r13
	je	.L7792
.L5753:
	movq	-1128(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -1048(%rbp)
	movq	%r13, 8(%rax)
	movq	-1048(%rbp), %rdi
	movq	%r12, 16(%rdi)
	jmp	.L5746
.L7792:
	cmpq	16(%rdx), %rax
	jne	.L5753
	jmp	.L5746
.L7782:
	jne	.L5747
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-1128(%rbp), %rcx
	movq	%rax, %r12
	cmpq	8(%rcx), %rax
	je	.L5746
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -1048(%rbp)
	movq	%r12, 8(%rax)
	jmp	.L5746
.L5743:
	movq	-1128(%rbp), %rsi
	cmpq	$0, 16(%rsi)
	je	.L7793
	movq	-1128(%rbp), %r10
	movq	24(%r10), %r15
	testq	%r15, %r15
	movq	%r15, -1048(%rbp)
	jne	.L5746
	movq	-1128(%rbp), %rax
	movq	8(%rax), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	-1128(%rbp), %r11
	movq	%rax, %rdi
	movq	%rax, 24(%r11)
	movq	-1128(%rbp), %r12
	movq	8(%r12), %rsi
	call	gen_move_insn
	movq	-1128(%rbp), %r13
	movq	%rax, %rdi
	movq	16(%r13), %rsi
	call	emit_insn_before
	movq	-1128(%rbp), %r8
	movq	24(%r8), %rdx
	movq	%rdx, -1048(%rbp)
	jmp	.L5746
.L7793:
	movq	8(%rsi), %rdi
	call	copy_to_reg
	movq	%rax, -1048(%rbp)
	jmp	.L5746
.L7781:
	movzbl	%al, %edx 
	movzbl	mode_size(%rdx), %r9d
	cmpl	8(%rbx), %r9d
	jne	.L5741
	movq	%rsi, %rdi
	movq	const_tiny_rtx(,%rdx,8), %rsi
	call	emit_move_insn
	jmp	.L5736
	.p2align 6,,7
.L7780:
	movq	16(%rdx), %rax
	movl	$8, -1036(%rbp)
	testq	%rax, %rax
	je	.L5738
	movl	32(%rax), %eax
	jmp	.L7465
	.p2align 6,,7
.L7779:
	movq	8(%rbx), %rsi
	movq	-944(%rbp), %rdi
	negq	%rsi
	call	plus_constant_wide
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-976(%rbp), %r13
	movq	-1128(%rbp), %rdi
	movl	$51, %esi
	movq	%rax, %rbx
	movq	8(%r13), %rdx
	call	adjust_address_1
	movq	%rax, -1128(%rbp)
	jmp	.L5735
.L7778:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r13, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L5721
.L7777:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %rcx
	orb	$1, 49(%rcx)
	movq	fn.1(%rip), %rsi
	orb	$8, 18(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %rdi
	orb	$64, 50(%rdi)
	movq	fn.1(%rip), %r9
	orb	$2, 18(%r9)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L5732
.L7439:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L5721
	.p2align 6,,7
.L7776:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L5719
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L5719
	.p2align 6,,7
.L7775:
	movq	-992(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L5709
	jmp	.L5717
.L5714:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L7464
.L7774:
	movq	mode_mask_array(,%r15,8), %rdi
	shrq	$1, %rdi
	cmpq	%rdi, 8(%rsi)
	jbe	.L5712
	jmp	.L5713
.L7773:
	movq	8(%rcx), %r12
	xorl	%r13d, %r13d
	movl	$17, %esi
.L5603:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L7287
.L5600:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %r8
	cmpq	%rsi, %r8
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L5600
.L7287:
	testl	%edi, %edi
	je	.L5593
	movslq	%edi,%rbx
	movq	%rbx, %r10
	salq	$4, %r10
	addq	optab_table+240(%rip), %r10
	cmpl	$1317, 8(%r10)
	je	.L5602
	call	get_mode_alignment
	movl	$128, %edx
	cmpl	%eax, %edx
	jb	.L5602
	movzbq	mode_size(%rbx), %r9
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r9
	addq	%rax, %r13
	movq	%rdx, %r12
.L5602:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L5603
.L5593:
	testq	%r12, %r12
	jne	.L7587
	movl	optimize_size(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L5606
	movq	ix86_cost(%rip), %rsi
	mov	40(%rsi), %ecx
	cmpq	%rcx, %r13
	jae	.L5590
.L5607:
	movq	-1000(%rbp), %r8
	movq	-992(%rbp), %r11
	movq	-984(%rbp), %rdx
	movq	-984(%rbp), %r10
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r13b
	xorl	%ecx, %ecx
	movq	8(%r11), %r8
	movq	$0, -152(%rbp)
	movl	$0, -1012(%rbp)
	movq	%r8, -176(%rbp)
	movzbl	%r13b, %edi
	movq	8(%rdx), %rbx
	movq	%r10, -208(%rbp)
	leal	5(,%rdi,4), %r13d
	movq	%rbx, -1008(%rbp)
	movq	-1008(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L5612
	cmpw	$99, %dx
	je	.L5612
	cmpw	$98, %dx
	je	.L5612
.L5611:
	movq	-1008(%rbp), %r9
	movl	%ecx, -192(%rbp)
	xorl	%edx, %edx
	movzwl	(%r9), %eax
	cmpw	$96, %ax
	je	.L5614
	cmpw	$98, %ax
	je	.L5614
.L5613:
	movq	-992(%rbp), %rcx
	movq	-1008(%rbp), %r15
	movl	%edx, -144(%rbp)
	movq	%rcx, -184(%rbp)
	movq	%r15, -200(%rbp)
	xorl	%ecx, %ecx
	movzwl	(%r8), %edx
	leal	-96(%rdx), %esi
	cmpw	$1, %si
	jbe	.L5617
	cmpw	$99, %dx
	je	.L5617
	cmpw	$98, %dx
	je	.L5617
.L5616:
	movl	-144(%rbp), %eax
	movl	%ecx, -168(%rbp)
	movl	$0, -164(%rbp)
	movl	$0, -188(%rbp)
	testl	%eax, %eax
	je	.L5618
	movq	%r12, -152(%rbp)
.L5618:
	movl	-168(%rbp), %r10d
	movq	%r12, -160(%rbp)
	testl	%r10d, %r10d
	je	.L5620
	movl	-192(%rbp), %ebx
	testl	%ebx, %ebx
	jne	.L5619
.L5620:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L5633:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L7290
.L5630:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L5630
.L7290:
	testl	%edi, %edi
	je	.L5623
	movslq	%edi,%rbx
	movq	%rbx, %r9
	salq	$4, %r9
	addq	optab_table+240(%rip), %r9
	cmpl	$1317, 8(%r9)
	je	.L5632
	movq	%r8, -1464(%rbp)
	call	get_mode_alignment
	movq	-1464(%rbp), %r8
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L5632
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L5632:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L5633
.L5623:
	testq	%r12, %r12
	jne	.L7587
	cmpq	$2, %r15
	jbe	.L5619
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L7292
.L5641:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %r10d
	cmpl	%r13d, %r10d
	cmovae	-1012(%rbp), %ecx
	movl	%ecx, -1012(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L5641
.L7292:
	movl	-168(%rbp), %eax
	testl	%eax, %eax
	jne	.L5647
	movzwl	(%r8), %edx
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L5645
	cmpw	$54, %dx
	je	.L5645
	cmpw	$55, %dx
	je	.L5645
	cmpw	$58, %dx
	je	.L5645
	cmpw	$134, %dx
	je	.L5645
	cmpw	$56, %dx
	je	.L5645
	cmpw	$140, %dx
	je	.L5645
.L5647:
	movl	-192(%rbp), %eax
	testl	%eax, %eax
	jne	.L5619
	movq	-1008(%rbp), %r11
	movzwl	(%r11), %edx
	leal	-67(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L5649
	cmpw	$54, %dx
	je	.L5649
	cmpw	$55, %dx
	je	.L5649
	cmpw	$58, %dx
	je	.L5649
	cmpw	$134, %dx
	je	.L5649
	cmpw	$56, %dx
	je	.L5649
	cmpw	$140, %dx
	je	.L5649
.L5619:
	cmpl	$1, %r13d
	jbe	.L5652
.L5703:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L7295
.L5659:
	movslq	%ecx,%r9
	movzbl	mode_size(%r9), %edx
	cmpl	%r13d, %edx
	cmovae	-1012(%rbp), %ecx
	movl	%ecx, -1012(%rbp)
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L5659
.L7295:
	movl	-1012(%rbp), %eax
	testl	%eax, %eax
	je	.L5652
	movslq	-1012(%rbp),%r15
	movq	%r15, %r13
	salq	$4, %r13
	addq	optab_table+240(%rip), %r13
	movl	8(%r13), %ebx
	cmpl	$1317, %ebx
	je	.L5661
	movl	-1012(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L5661
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rsi
	movq	$0, -1024(%rbp)
	leaq	(%rsi,%rsi,4), %rcx
	cmpq	%rdx, -160(%rbp)
	movq	insn_data+16(,%rcx,8), %r12
	movq	%rdx, -872(%rbp)
	movq	%r12, -416(%rbp)
	leaq	-208(%rbp), %r12
	jb	.L5661
	movl	-144(%rbp), %ecx
.L5701:
	testl	%ecx, %ecx
	je	.L5665
	subq	%rdx, 56(%r12)
.L5665:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L5666
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L5667
	movl	-1012(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L7460:
	movq	%rax, -1024(%rbp)
.L5666:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L5669
	movq	24(%r12), %rdi
	movl	-1012(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L7461:
	cmpq	$0, (%r12)
	movq	%rax, %r13
	jne	.L7794
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L5675
	movzbl	mode_size(%r15), %r10d
	leal	7(%r10), %edx
	andl	$-8, %edx
.L5676:
	movq	cfun(%rip), %r11
	andl	$33554432, %esi
	movq	16(%r11), %r8
	leaq	8(%r8), %rdi
	movl	8(%r8), %ecx
	je	.L5677
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L7462:
	movq	%r15, %r9
	leal	(%rax,%rcx), %esi
	salq	$4, %r9
	movl	%esi, (%rdi)
	addq	optab_table+384(%rip), %r9
	movl	8(%r9), %eax
	cmpl	$1317, %eax
	je	.L5679
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rdi
	movq	insn_data+24(,%rdi,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L5680
	movq	%r13, %rdi
	movl	-1012(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L7795
.L5680:
	leaq	(%rbx,%rbx,4), %rcx
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%rcx,8)
.L7463:
	movq	%rax, %rdi
	call	emit_insn
.L5699:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L5700
	movq	-872(%rbp), %r13
	addq	%r13, 56(%r12)
.L5700:
	movq	48(%r12), %r9
	movq	-872(%rbp), %rdx
	subq	-872(%rbp), %r9
	cmpq	%rdx, %r9
	movq	%r9, 48(%r12)
	jae	.L5701
.L5661:
	movzbl	mode_size(%r15), %r13d
	cmpl	$1, %r13d
	ja	.L5703
.L5652:
	cmpq	$0, -160(%rbp)
	je	.L5721
	jmp	.L7537
.L7795:
	movl	-1012(%rbp), %edi
	movq	%r13, %rsi
	call	force_reg
	movq	%rax, %r13
	jmp	.L5680
	.p2align 6,,7
.L5679:
	movzbl	mode_size(%r15), %r10d
	cmpl	%edx, %r10d
	je	.L7796
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r8b
	movzbl	%r8b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L5687:
	movl	-1012(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%r11d, %r11d
	testq	%r11, %r11
	movq	%rax, %rbx
	je	.L5696
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L7797
.L5696:
	movq	%rbx, %rdi
	movq	%r13, %rsi
	call	emit_move_insn
	jmp	.L5699
.L7797:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L5696
.L7796:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L5687
	.p2align 6,,7
.L5677:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L7462
.L5675:
	movzbl	mode_size(%r15), %ebx
	leal	1(%rbx), %edx
	andl	$-2, %edx
	jmp	.L5676
.L7794:
	movq	%rax, %rsi
	movq	-1024(%rbp), %rdi
	xorl	%eax, %eax
	call	*-416(%rbp)
	jmp	.L7463
.L5669:
	movq	24(%r12), %rdi
	movl	-1012(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L7461
.L5667:
	movl	-1012(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L7460
.L5649:
	movq	-1008(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -200(%rbp)
	jmp	.L5619
.L5645:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -176(%rbp)
	jmp	.L5647
.L5617:
	movl	$1, %ecx
	jmp	.L5616
.L5614:
	movl	$1, %edx
	jmp	.L5613
.L5612:
	movl	$1, %ecx
	jmp	.L5611
.L5606:
	cmpq	$2, %r13
	ja	.L5590
	jmp	.L5607
	.p2align 6,,7
.L5582:
	movq	-976(%rbp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-976(%rbp), %r10
	movq	%rax, %r12
	movq	16(%r10), %rdi
	call	protect_from_queue
	movq	-976(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L7798
.L5584:
	movq	-976(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -1000(%rbp)
	movq	%r12, 8(%rax)
	movq	-1000(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L5577
.L7798:
	cmpq	16(%rsi), %rax
	jne	.L5584
	jmp	.L5577
.L7772:
	cmpb	$51, 2(%rcx)
	je	.L5575
	movq	8(%rcx), %r12
	cmpw	$71, (%r12)
	je	.L7799
.L5575:
	cmpl	$66, %eax
	jne	.L5578
	movq	-976(%rbp), %r8
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	call	protect_from_queue
	movq	-976(%rbp), %rdx
	movq	%rax, %rbx
	cmpq	8(%rdx), %rax
	je	.L5577
	movq	%rdx, %rdi
	call	copy_rtx
	movq	%rax, -1000(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L5577
.L7799:
	movq	8(%r12), %rsi
	movq	%rcx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L5576
	movq	-976(%rbp), %r13
	movzbl	2(%r13), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -1000(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L5577
.L5576:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L7459:
	movq	%rax, -1000(%rbp)
	jmp	.L5577
	.p2align 6,,7
.L5574:
	movq	-976(%rbp), %rdx
	cmpq	$0, 16(%rdx)
	je	.L7800
	movq	-976(%rbp), %r12
	movq	24(%r12), %r11
	testq	%r11, %r11
	movq	%r11, -1000(%rbp)
	jne	.L5577
	movq	-976(%rbp), %r13
	movq	8(%r13), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r9
	movq	%r9, -1000(%rbp)
	jmp	.L5577
.L7800:
	movq	8(%rdx), %rdi
	call	copy_to_reg
	jmp	.L7459
	.p2align 6,,7
.L5569:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L7801
.L5571:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -992(%rbp)
	movq	%r12, 8(%rax)
	movq	-992(%rbp), %rcx
	movq	%rbx, 16(%rcx)
	jmp	.L5564
.L7801:
	cmpq	16(%r14), %rax
	jne	.L5571
	jmp	.L5564
.L7771:
	cmpb	$51, 2(%r14)
	je	.L5562
	movq	8(%r14), %r12
	cmpw	$71, (%r12)
	je	.L7802
.L5562:
	cmpl	$66, %eax
	jne	.L5565
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L5564
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -992(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L5564
.L7802:
	movq	8(%r12), %rsi
	movq	%r14, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L5563
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -992(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L5564
.L5563:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L7458:
	movq	%rax, -992(%rbp)
	jmp	.L5564
	.p2align 6,,7
.L5561:
	cmpq	$0, 16(%r14)
	je	.L7803
	movq	24(%r14), %rsi
	testq	%rsi, %rsi
	movq	%rsi, -992(%rbp)
	jne	.L5564
	movq	8(%r14), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rax
	movq	%rax, -992(%rbp)
	jmp	.L5564
.L7803:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L7458
	.p2align 6,,7
.L5556:
	movq	-1128(%rbp), %r13
	xorl	%esi, %esi
	movq	8(%r13), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-1128(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L7804
.L5558:
	movq	-1128(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -984(%rbp)
	movq	%r12, 8(%rax)
	movq	-984(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L5551
.L7804:
	cmpq	16(%rsi), %rax
	jne	.L5558
	jmp	.L5551
.L7770:
	jne	.L5552
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-1128(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L5551
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -984(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L5551
	.p2align 6,,7
.L5548:
	testq	%rsi, %rsi
	je	.L7805
	movq	-1128(%rbp), %rdx
	movq	24(%rdx), %r10
	testq	%r10, %r10
	movq	%r10, -984(%rbp)
	jne	.L5551
	movq	-1128(%rbp), %r12
	movq	8(%r12), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r11
	movq	%r11, -984(%rbp)
	jmp	.L5551
.L7805:
	movq	-1128(%rbp), %r8
	movq	8(%r8), %rdi
	call	copy_to_reg
	movq	%rax, -984(%rbp)
	jmp	.L5551
	.p2align 6,,7
.L5541:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L5537
	movl	32(%rsi), %r15d
	jmp	.L5537
	.p2align 6,,7
.L5540:
	cmpl	$7, %edx
	ja	.L5536
	jmp	.L5541
.L7769:
	movq	-944(%rbp), %rax
	movslq	32(%r15),%r10
	cmpq	%r10, 8(%rax)
	jge	.L5336
	movq	-1128(%rbp), %rcx
	movq	%r14, -936(%rbp)
	movl	$8, %edx
	movq	%rcx, -928(%rbp)
	movq	16(%rcx), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L5340
	movl	32(%rax), %edx
.L5340:
	movq	16(%r14), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L5341
	cmpl	32(%rax), %edx
	jb	.L5342
.L5337:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L5338
	movl	32(%rcx), %r15d
.L5338:
	movq	-1128(%rbp), %r11
	cmpb	$51, 2(%r11)
	jne	.L7598
	cmpb	$51, 2(%r14)
	jne	.L7597
	movq	-1128(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L5349
	cmpl	$66, %eax
	je	.L7806
.L5353:
	cmpl	$75, %eax
	je	.L5357
	cmpl	$78, %eax
	je	.L5357
.L5352:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L5362
	cmpl	$66, %eax
	je	.L7807
.L5366:
	cmpl	$75, %eax
	je	.L5370
	cmpl	$78, %eax
	je	.L5370
.L5365:
	movq	-944(%rbp), %rcx
	movzwl	(%rcx), %eax
	cmpl	$71, %eax
	je	.L5375
	cmpl	$66, %eax
	je	.L7808
.L5379:
	cmpl	$75, %eax
	je	.L5383
	cmpl	$78, %eax
	je	.L5383
.L5378:
	movq	-928(%rbp), %rdi
	cmpw	$66, (%rdi)
	jne	.L7596
	movq	-936(%rbp), %r10
	cmpw	$66, (%r10)
	jne	.L7595
	cmpq	$0, -944(%rbp)
	je	.L7594
	movq	-944(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L7809
.L5391:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -384(%rbp)
	testl	%r12d, %r12d
	je	.L7284
.L5524:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L5510
	movq	-944(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L7810
.L5514:
	testb	$2, target_flags+3(%rip)
	je	.L5515
	cmpw	$63, mode_bitsize(%r15,%r15)
.L7457:
	jbe	.L5510
.L5513:
	movslq	%edx,%r10
	leaq	(%r10,%r10,4), %r8
	movq	%r10, -392(%rbp)
	movq	insn_data+24(,%r8,8), %r13
	movq	(%r13), %rax
	testq	%rax, %rax
	je	.L5517
	movq	-928(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L5510
.L5517:
	movq	24(%r13), %rax
	testq	%rax, %rax
	jne	.L7811
.L5518:
	movq	72(%r13), %rax
	testq	%rax, %rax
	je	.L5519
	xorl	%esi, %esi
	movq	-384(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L5510
.L5519:
	call	get_last_insn
	movl	$1, %edx
	movq	-944(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -400(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r13), %rax
	testq	%rax, %rax
	jne	.L7812
.L5520:
	movq	-392(%rbp), %rdx
	movq	-928(%rbp), %rdi
	xorl	%eax, %eax
	movq	-936(%rbp), %rsi
	movq	-384(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L7441
	movq	-400(%rbp), %rdi
	call	delete_insns_since
.L5510:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L5524
.L7284:
	testb	$2, target_flags+3(%rip)
	movq	-928(%rbp), %rcx
	movl	$0, volatile_ok(%rip)
	setne	%sil
	movzbl	%sil, %edi
	movq	8(%rcx), %rsi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%r9b
	movq	%rax, %r13
	movq	-936(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%r9b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-944(%rbp), %rsi
	movq	sizetype_tab(%rip), %r11
	movq	%rax, %rbx
	movzbl	61(%r11), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	jmp	.L7599
.L7812:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L5520
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L5520
.L7811:
	movq	-936(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L5510
	jmp	.L5518
	.p2align 6,,7
.L5515:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L7457
.L7810:
	movq	mode_mask_array(,%r15,8), %rdi
	shrq	$1, %rdi
	cmpq	%rdi, 8(%rsi)
	jbe	.L5513
	jmp	.L5514
.L7809:
	movq	8(%rcx), %r12
	xorl	%r13d, %r13d
	movl	$17, %esi
.L5404:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L7273
.L5401:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L5401
.L7273:
	testl	%edi, %edi
	je	.L5394
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L5403
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	jb	.L5403
	movzbq	mode_size(%rbx), %r9
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r9
	addq	%rax, %r13
	movq	%rdx, %r12
.L5403:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L5404
.L5394:
	testq	%r12, %r12
	jne	.L7587
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L5407
	movq	ix86_cost(%rip), %rdi
	mov	40(%rdi), %ebx
	cmpq	%rbx, %r13
	jae	.L5391
.L5408:
	movq	-944(%rbp), %r8
	movq	-936(%rbp), %rsi
	movq	-928(%rbp), %rdx
	movq	-928(%rbp), %r10
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r13b
	movq	8(%rsi), %r8
	movq	$0, -72(%rbp)
	movl	$0, -956(%rbp)
	movq	%r8, -96(%rbp)
	movzbl	%r13b, %ecx
	movq	8(%rdx), %r11
	movq	%r10, -128(%rbp)
	leal	5(,%rcx,4), %r13d
	xorl	%ecx, %ecx
	movq	%r11, -952(%rbp)
	movq	-952(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L5413
	cmpw	$99, %dx
	je	.L5413
	cmpw	$98, %dx
	je	.L5413
.L5412:
	movq	-952(%rbp), %r9
	movl	%ecx, -112(%rbp)
	xorl	%edx, %edx
	movzwl	(%r9), %eax
	cmpw	$96, %ax
	je	.L5415
	cmpw	$98, %ax
	je	.L5415
.L5414:
	movq	-952(%rbp), %r15
	movq	-936(%rbp), %rdi
	movl	%edx, -64(%rbp)
	xorl	%ecx, %ecx
	movq	%r15, -120(%rbp)
	movq	%rdi, -104(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L5418
	cmpw	$99, %dx
	je	.L5418
	cmpw	$98, %dx
	je	.L5418
.L5417:
	movl	-64(%rbp), %eax
	movl	%ecx, -88(%rbp)
	movl	$0, -84(%rbp)
	movl	$0, -108(%rbp)
	testl	%eax, %eax
	je	.L5419
	movq	%r12, -72(%rbp)
.L5419:
	movl	-88(%rbp), %eax
	movq	%r12, -80(%rbp)
	testl	%eax, %eax
	je	.L5421
	movl	-112(%rbp), %eax
	testl	%eax, %eax
	jne	.L5420
.L5421:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L5434:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L7276
.L5431:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %r11
	cmpq	%rsi, %r11
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L5431
.L7276:
	testl	%edi, %edi
	je	.L5424
	movslq	%edi,%rbx
	movq	%rbx, %rdx
	salq	$4, %rdx
	addq	optab_table+240(%rip), %rdx
	cmpl	$1317, 8(%rdx)
	je	.L5433
	movq	%r8, -1464(%rbp)
	call	get_mode_alignment
	movq	-1464(%rbp), %r8
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L5433
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L5433:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L5434
.L5424:
	testq	%r12, %r12
	jne	.L7587
	cmpq	$2, %r15
	jbe	.L5420
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L7278
.L5442:
	movslq	%ecx,%rbx
	movzbl	mode_size(%rbx), %edi
	cmpl	%r13d, %edi
	cmovae	-956(%rbp), %ecx
	movl	%ecx, -956(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L5442
.L7278:
	movl	-88(%rbp), %eax
	testl	%eax, %eax
	jne	.L5448
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L5446
	cmpw	$54, %dx
	je	.L5446
	cmpw	$55, %dx
	je	.L5446
	cmpw	$58, %dx
	je	.L5446
	cmpw	$134, %dx
	je	.L5446
	cmpw	$56, %dx
	je	.L5446
	cmpw	$140, %dx
	je	.L5446
.L5448:
	movl	-112(%rbp), %r8d
	testl	%r8d, %r8d
	jne	.L5420
	movq	-952(%rbp), %r11
	movzwl	(%r11), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L5450
	cmpw	$54, %dx
	je	.L5450
	cmpw	$55, %dx
	je	.L5450
	cmpw	$58, %dx
	je	.L5450
	cmpw	$134, %dx
	je	.L5450
	cmpw	$56, %dx
	je	.L5450
	cmpw	$140, %dx
	je	.L5450
.L5420:
	cmpl	$1, %r13d
	jbe	.L5453
.L5504:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L7281
.L5460:
	movslq	%ecx,%r12
	movzbl	mode_size(%r12), %edx
	cmpl	%r13d, %edx
	cmovae	-956(%rbp), %ecx
	movl	%ecx, -956(%rbp)
	movzbl	mode_wider_mode(%r12), %ecx
	testl	%ecx, %ecx
	jne	.L5460
.L7281:
	movl	-956(%rbp), %r13d
	testl	%r13d, %r13d
	je	.L5453
	movslq	-956(%rbp),%r15
	movq	%r15, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	movl	8(%rcx), %ebx
	cmpl	$1317, %ebx
	je	.L5462
	movl	-956(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r9d
	cmpl	%eax, %r9d
	jb	.L5462
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rdi
	leaq	-128(%rbp), %r12
	leaq	(%rdi,%rdi,4), %rbx
	cmpq	%rdx, -80(%rbp)
	movq	$0, -968(%rbp)
	movq	insn_data+16(,%rbx,8), %rsi
	movq	%rdx, -864(%rbp)
	movq	%rsi, -376(%rbp)
	jb	.L5462
	movl	-64(%rbp), %ecx
.L5502:
	testl	%ecx, %ecx
	je	.L5466
	subq	%rdx, 56(%r12)
.L5466:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L5467
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L5468
	movl	-956(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L7453:
	movq	%rax, -968(%rbp)
.L5467:
	movl	40(%r12), %r8d
	testl	%r8d, %r8d
	je	.L5470
	movq	24(%r12), %rdi
	movl	-956(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L7454:
	cmpq	$0, (%r12)
	movq	%rax, %r13
	jne	.L7813
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L5476
	movzbl	mode_size(%r15), %r10d
	leal	7(%r10), %edx
	andl	$-8, %edx
.L5477:
	movq	cfun(%rip), %rcx
	andl	$33554432, %esi
	movq	16(%rcx), %r9
	leaq	8(%r9), %rdi
	movl	8(%r9), %ecx
	je	.L5478
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L7455:
	movq	%r15, %rsi
	leal	(%rax,%rcx), %ebx
	salq	$4, %rsi
	movl	%ebx, (%rdi)
	addq	optab_table+384(%rip), %rsi
	movl	8(%rsi), %eax
	cmpl	$1317, %eax
	je	.L5480
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rdi
	movq	insn_data+24(,%rdi,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L5481
	movq	%r13, %rdi
	movl	-956(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L7814
.L5481:
	leaq	(%rbx,%rbx,4), %r8
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r8,8)
.L7456:
	movq	%rax, %rdi
	call	emit_insn
.L5500:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L5501
	movq	-864(%rbp), %r13
	addq	%r13, 56(%r12)
.L5501:
	movq	48(%r12), %rbx
	movq	-864(%rbp), %rdx
	subq	-864(%rbp), %rbx
	cmpq	%rdx, %rbx
	movq	%rbx, 48(%r12)
	jae	.L5502
.L5462:
	movzbl	mode_size(%r15), %r13d
	cmpl	$1, %r13d
	ja	.L5504
.L5453:
	cmpq	$0, -80(%rbp)
	jmp	.L7589
.L7814:
	movl	-956(%rbp), %edi
	movq	%r13, %rsi
	call	force_reg
	movq	%rax, %r13
	jmp	.L5481
.L5480:
	movzbl	mode_size(%r15), %r10d
	cmpl	%edx, %r10d
	je	.L7815
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r9b
	movzbl	%r9b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r11b
	movzbl	%r11b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L5488:
	movl	-956(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%ecx, %ecx
	testq	%rcx, %rcx
	movq	%rax, %rbx
	je	.L5497
	xorl	%esi, %esi
	movq	%rax, %rdi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %esi
	testl	%esi, %esi
	jne	.L7816
.L5497:
	movq	%rbx, %rdi
	movq	%r13, %rsi
	call	emit_move_insn
	jmp	.L5500
.L7816:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L5497
.L7815:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L5488
.L5478:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L7455
.L5476:
	movzbl	mode_size(%r15), %r11d
	leal	1(%r11), %edx
	andl	$-2, %edx
	jmp	.L5477
.L7813:
	movq	%rax, %rsi
	movq	-968(%rbp), %rdi
	xorl	%eax, %eax
	call	*-376(%rbp)
	jmp	.L7456
.L5470:
	movq	24(%r12), %rdi
	movl	-956(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L7454
.L5468:
	movl	-956(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L7453
.L5450:
	movq	-952(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -120(%rbp)
	jmp	.L5420
.L5446:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -96(%rbp)
	jmp	.L5448
.L5418:
	movl	$1, %ecx
	jmp	.L5417
.L5415:
	movl	$1, %edx
	jmp	.L5414
.L5413:
	movl	$1, %ecx
	jmp	.L5412
.L5407:
	cmpq	$2, %r13
	ja	.L5391
	jmp	.L5408
.L5383:
	movq	-944(%rbp), %rbx
	xorl	%esi, %esi
	movq	8(%rbx), %rdi
	call	protect_from_queue
	movq	-944(%rbp), %rsi
	movq	%rax, %r12
	movq	16(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-944(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L7817
.L5385:
	movq	-944(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -944(%rbp)
	movq	%r12, 8(%rax)
	movq	-944(%rbp), %r12
	movq	%rbx, 16(%r12)
	jmp	.L5378
.L7817:
	cmpq	16(%rsi), %rax
	jne	.L5385
	jmp	.L5378
.L7808:
	cmpb	$51, 2(%rcx)
	je	.L5376
	movq	8(%rcx), %r12
	cmpw	$71, (%r12)
	je	.L7818
.L5376:
	cmpl	$66, %eax
	jne	.L5379
	movq	-944(%rbp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	movq	-944(%rbp), %rdx
	movq	%rax, %rbx
	cmpq	8(%rdx), %rax
	je	.L5378
	movq	%rdx, %rdi
	call	copy_rtx
	movq	%rax, -944(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L5378
.L7818:
	movq	8(%r12), %rsi
	movq	%rcx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L5377
	movq	-944(%rbp), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -944(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L5378
.L5377:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L7452:
	movq	%rax, -944(%rbp)
	jmp	.L5378
.L5375:
	movq	-944(%rbp), %rdx
	cmpq	$0, 16(%rdx)
	je	.L7819
	movq	-944(%rbp), %r8
	movq	24(%r8), %rax
	testq	%rax, %rax
	jne	.L7452
	movq	-944(%rbp), %r12
	movq	8(%r12), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r13
	movq	%r13, -944(%rbp)
	jmp	.L5378
.L7819:
	movq	8(%rdx), %rdi
	call	copy_to_reg
	jmp	.L7452
.L5370:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L7820
.L5372:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -936(%rbp)
	movq	%r12, 8(%rax)
	movq	-936(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L5365
.L7820:
	cmpq	16(%r14), %rax
	jne	.L5372
	jmp	.L5365
.L7807:
	cmpb	$51, 2(%r14)
	je	.L5363
	movq	8(%r14), %r12
	cmpw	$71, (%r12)
	je	.L7821
.L5363:
	cmpl	$66, %eax
	jne	.L5366
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L5365
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -936(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L5365
.L7821:
	movq	8(%r12), %rsi
	movq	%r14, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L5364
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -936(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L5365
.L5364:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L7451:
	movq	%rax, -936(%rbp)
	jmp	.L5365
.L5362:
	cmpq	$0, 16(%r14)
	je	.L7822
	movq	24(%r14), %r10
	testq	%r10, %r10
	movq	%r10, -936(%rbp)
	jne	.L5365
	movq	8(%r14), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rax
	movq	%rax, -936(%rbp)
	jmp	.L5365
.L7822:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L7451
.L5357:
	movq	-1128(%rbp), %r13
	xorl	%esi, %esi
	movq	8(%r13), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-1128(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L7823
.L5359:
	movq	-1128(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -928(%rbp)
	movq	%r12, 8(%rax)
	movq	-928(%rbp), %rdx
	movq	%rbx, 16(%rdx)
	jmp	.L5352
.L7823:
	cmpq	16(%rsi), %rax
	jne	.L5359
	jmp	.L5352
.L7806:
	jne	.L5353
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-1128(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L5352
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -928(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L5352
.L5349:
	testq	%rsi, %rsi
	je	.L7824
	movq	-1128(%rbp), %rsi
	movq	24(%rsi), %r12
	testq	%r12, %r12
	movq	%r12, -928(%rbp)
	jne	.L5352
	movq	-1128(%rbp), %r13
	movq	8(%r13), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r8
	movq	%r8, -928(%rbp)
	jmp	.L5352
.L7824:
	movq	-1128(%rbp), %rbx
	movq	8(%rbx), %rdi
	call	copy_to_reg
	movq	%rax, -928(%rbp)
	jmp	.L5352
.L5342:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L5338
	movl	32(%rsi), %r15d
	jmp	.L5338
.L5341:
	cmpl	$7, %edx
	ja	.L5337
	jmp	.L5342
	.p2align 6,,7
.L5326:
	movq	-1128(%rbp), %r11
	xorl	%esi, %esi
	movq	8(%r11), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-1128(%rbp), %r10
	movq	%rax, %r12
	movq	16(%r10), %rdi
	call	protect_from_queue
	movq	-1128(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L7825
.L5328:
	movq	-1128(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -1128(%rbp)
	movq	%r12, 8(%rax)
	movq	-1128(%rbp), %rdx
	movq	%rbx, 16(%rdx)
	jmp	.L5321
.L7825:
	cmpq	16(%rcx), %rax
	jne	.L5328
	jmp	.L5321
.L7740:
	jne	.L5322
	movq	8(%rcx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-1128(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L5321
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -1128(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L5321
	.p2align 6,,7
.L5318:
	movq	-1128(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L7826
	movq	-1128(%rbp), %rbx
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L5330
	movq	%rdi, -1128(%rbp)
	jmp	.L5321
.L5330:
	movq	-1128(%rbp), %r8
	movq	8(%r8), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	-1128(%rbp), %r13
	movq	%rax, %rdi
	movq	8(%r13), %rsi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r12
	movq	%r12, -1128(%rbp)
	jmp	.L5321
.L7826:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rax, -1128(%rbp)
	jmp	.L5321
.L7739:
	movq	144(%r15), %rax
	testq	%rax, %rax
	je	.L5313
	cmpq	%rax, -1128(%rbp)
	jne	.L5313
	jmp	.L5311
	.p2align 6,,7
.L7738:
	movq	-1128(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L5311
	jmp	.L5312
	.p2align 6,,7
.L5310:
	cmpb	$0, 2(%r14)
	jne	.L5309
	cmpb	$0, 16(%r15)
	je	.L5309
	movq	8(%r15), %rdx
	movq	-1128(%rbp), %rax
	movzbl	61(%rdx), %r9d
	movzbl	2(%rax), %edi
	shrb	$1, %r9b
	movzbl	%r9b, %esi
	cmpl	%esi, %edi
	je	.L5309
	movzbl	17(%rdx), %ecx
	movq	%r14, %rdx
	shrb	$5, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, %r14
	jmp	.L5309
.L7737:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	-1128(%rbp), %rdi
	movq	%rax, %rsi
	movzbl	2(%rdi), %edx
	movq	%r15, %rdi
	jmp	.L7450
.L5271:
	xorl	%ebx, %ebx
	testl	%ebx, %ebx
	je	.L7418
	movq	-1128(%rbp), %rbx
	movl	(%rbx), %ecx
	movl	%ecx, %esi
	andl	$134283263, %esi
	cmpl	$66, %esi
	je	.L7827
.L5287:
	andl	$268500991, %ecx
	cmpl	$268435519, %ecx
	je	.L7828
	movq	-1128(%rbp), %r14
	xorl	%ecx, %ecx
	movq	%r15, %rdi
	movzbl	2(%r14), %edx
	movq	%r14, %rsi
	call	expand_expr
	movq	-1128(%rbp), %rbx
	movq	%rax, %r14
	cmpw	$61, (%rbx)
	je	.L7829
.L5307:
	movq	-1128(%rbp), %rsi
	movl	(%rsi), %eax
	andl	$134283263, %eax
	cmpl	$134217794, %eax
	je	.L7422
	movq	%r14, %rdi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L7422
	movzwl	(%r14), %edx
	leal	-67(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L5308
	cmpw	$54, %dx
	je	.L5308
	cmpw	$55, %dx
	je	.L5308
	cmpw	$58, %dx
	je	.L5308
	cmpw	$134, %dx
	je	.L5308
	cmpw	$56, %dx
	je	.L5308
	cmpw	$140, %dx
	je	.L5308
	xorl	%r13d, %r13d
	testl	%r13d, %r13d
	je	.L5232
.L5308:
	movl	$1, -916(%rbp)
	jmp	.L5232
.L7829:
	cmpl	$52, 8(%rbx)
	jbe	.L7422
	jmp	.L5307
.L7828:
	xorl	%r12d, %r12d
	xorl	%edx, %edx
	testl	%r12d, %r12d
	jne	.L5293
	movq	8(%r15), %rsi
	movzbl	16(%rsi), %eax
	cmpb	$6, %al
	je	.L5294
	cmpb	$10, %al
	je	.L5294
	cmpb	$11, %al
	je	.L5294
	cmpb	$12, %al
	je	.L5294
.L5293:
	movq	%rdx, %rsi
	xorl	%ecx, %ecx
	movq	%r15, %rdi
	xorl	%edx, %edx
	call	expand_expr
	movzwl	(%rax), %edx
	movq	%rax, %r14
	cmpw	$66, %dx
	je	.L7830
.L5296:
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L5299
	cmpw	$54, %dx
	je	.L5299
	cmpw	$55, %dx
	je	.L5299
	cmpw	$58, %dx
	je	.L5299
	cmpw	$134, %dx
	je	.L5299
	cmpw	$56, %dx
	je	.L5299
	cmpw	$140, %dx
	je	.L5299
.L5298:
	movq	-1128(%rbp), %r9
	movq	%r14, %rsi
	movzbl	3(%r9), %edx
	movq	8(%r9), %rdi
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	xorl	%ecx, %ecx
	testl	%ecx, %ecx
	je	.L7523
	movq	-1128(%rbp), %rdi
	movzbl	2(%r14), %edx
	movzbl	2(%rdi), %eax
	cmpb	%al, %dl
	je	.L5300
	testb	%dl, %dl
	je	.L5301
	movq	%r14, %rsi
	movzbl	%al, %edi
	call	gen_lowpart_SUBREG
	movzbl	3(%rax), %r10d
	movq	%rax, %r14
	orb	$16, %r10b
	movb	%r10b, 3(%rax)
	andb	$-5, %r10b
	movq	-1128(%rbp), %rdx
	movzbl	3(%rdx), %r11d
	andb	$4, %r11b
	orb	%r11b, %r10b
	movb	%r10b, 3(%rax)
.L5300:
	xorl	%esi, %esi
	testl	%esi, %esi
	jmp	.L7590
.L5301:
	movq	-1128(%rbp), %r12
	movq	-1128(%rbp), %r15
	movq	%r14, %rdx
	movzbl	%al, %edi
	movq	8(%r12), %rbx
	movzbl	3(%r15), %ecx
	movzbl	2(%rbx), %esi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, %r14
	jmp	.L5300
.L5299:
	cmpb	$0, 2(%r14)
	jne	.L5298
	movq	8(%r15), %r13
	movq	-1128(%rbp), %r12
	movq	%r14, %rdx
	movq	-1128(%rbp), %rax
	movzbl	61(%r13), %r8d
	movzbl	3(%r12), %ecx
	movzbl	2(%rax), %edi
	shrb	$1, %r8b
	shrb	$2, %cl
	movzbl	%r8b, %esi
	andl	$1, %ecx
	call	convert_modes
	movq	-1128(%rbp), %rbx
	movq	%rax, %rdx
	movq	8(%rbx), %rsi
	movzbl	3(%rbx), %ecx
	movzbl	2(%rsi), %edi
	movzbl	2(%rbx), %esi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, %r14
	jmp	.L5298
.L7830:
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L5296
	testb	$8, 3(%rax)
	jne	.L5297
	movq	-1128(%rbp), %r10
	movq	8(%rax), %rsi
	movq	8(%r10), %rdi
	call	reg_mentioned_p
	testl	%eax, %eax
	je	.L7419
.L5297:
	movq	%r14, %rdi
	call	copy_to_reg
	movq	%rax, %r14
.L7419:
	movzwl	(%r14), %edx
	jmp	.L5296
.L5294:
	cmpq	$0, 8(%rsi)
	jne	.L5293
	movq	-1128(%rbp), %rbx
	movzbl	17(%rsi), %r8d
	movl	$1, %edi
	movzbl	3(%rbx), %ecx
	shrb	$5, %r8b
	andl	$1, %r8d
	movl	%ecx, %r13d
	shrb	$2, %r13b
	andl	%r13d, %edi
	cmpl	%edi, %r8d
	je	.L5295
	call	signed_or_unsigned_type
	movq	%r15, %rsi
	movq	%rax, %rdi
	call	convert
	movzbl	3(%rbx), %ecx
	movq	%rax, %r15
.L5295:
	movq	-1128(%rbp), %rdx
	shrb	$2, %cl
	movl	$1, %esi
	andl	%ecx, %esi
	movq	8(%rdx), %r9
	movzbl	2(%r9), %edi
	call	type_for_mode
	movq	%r15, %rsi
	movq	%rax, %rdi
	call	convert
	movq	-1128(%rbp), %rcx
	movq	%rax, %r15
	movq	8(%rcx), %rdx
	jmp	.L5293
.L7827:
	movzbl	2(%rbx), %eax
	cmpb	$51, %al
	je	.L5287
	xorl	%ecx, %ecx
	movzbl	%al, %edx
	movq	%r15, %rdi
	movq	%rbx, %rsi
	call	expand_expr
	movq	%rax, %r14
	movzbl	2(%rax), %eax
	cmpb	$51, %al
	je	.L5288
	testb	%al, %al
	je	.L5288
	cmpq	%rbx, %r14
	je	.L5290
	movq	%r14, %rdi
	movq	%rbx, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L7831
.L5289:
	movq	%r14, %rdi
	call	copy_to_reg
	movq	%rax, %r14
	jmp	.L5288
.L7831:
	movq	%r14, %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L5289
	movq	%rbx, %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L5289
.L5290:
	movl	$1, %r12d
	jmp	.L5289
	.p2align 6,,7
.L7418:
	movq	-1128(%rbp), %r14
	movl	(%r14), %ecx
	jmp	.L5287
.L5280:
	movl	$1, %ebx
	jmp	.L5274
.L5281:
	xorl	%ebx, %ebx
	jmp	.L5274
.L5278:
	movq	-1128(%rbp), %r13
	xorl	%ebx, %ebx
	movq	8(%r13), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L5280
	movq	-1128(%rbp), %r9
	movq	16(%r9), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L5274
	jmp	.L5280
	.p2align 6,,7
.L7736:
	movq	-1128(%rbp), %rax
	cmpb	$51, 2(%rax)
	jne	.L5233
	call	gen_label_rtx
	movq	%rax, %r13
	call	gen_label_rtx
	movq	cfun(%rip), %rbx
	movq	%rax, -368(%rbp)
	movq	16(%rbx), %r9
	movq	40(%r9), %rbx
	testq	%rbx, %rbx
	je	.L7266
.L5239:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L7832
	call	emit_insn
	movq	%rax, 16(%rbx)
.L5238:
	movq	cfun(%rip), %r14
	movq	40(%rbx), %rsi
	movq	16(%r14), %r12
	testq	%rsi, %rsi
	movq	%rsi, %rbx
	movq	%rsi, 40(%r12)
	jne	.L5239
.L7266:
	movq	-1128(%rbp), %r14
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L5241
	cmpl	$66, %eax
	je	.L7833
.L5245:
	cmpl	$75, %eax
	je	.L5249
	cmpl	$78, %eax
	je	.L5249
.L5244:
	call	do_pending_stack_adjust
	movq	cfun(%rip), %r10
	movq	%r13, %rsi
	movq	16(%r10), %rbx
	incl	4(%rbx)
	movq	32(%r15), %rdi
	call	jumpifnot
	call	start_cleanup_deferral
	movq	40(%r15), %rdi
	xorl	%edx, %edx
	movq	%r14, %rsi
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %r9
	movq	16(%r9), %rdi
	movq	40(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L7268
.L5259:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L7834
	call	emit_insn
	movq	%rax, 16(%rbx)
.L5258:
	movq	cfun(%rip), %r8
	movq	40(%rbx), %r12
	movq	16(%r8), %rcx
	testq	%r12, %r12
	movq	%r12, %rbx
	movq	%r12, 40(%rcx)
	jne	.L5259
.L7268:
	movq	-368(%rbp), %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r13, %rdi
	call	emit_label
	call	start_cleanup_deferral
	movq	48(%r15), %rdi
	xorl	%edx, %edx
	movq	%r14, %rsi
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %r13
	movq	16(%r13), %r15
	movq	40(%r15), %rbx
	testq	%rbx, %rbx
	je	.L7270
.L5266:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L7835
	call	emit_insn
	movq	%rax, 16(%rbx)
.L5265:
	movq	cfun(%rip), %r11
	movq	40(%rbx), %rdi
	movq	16(%r11), %r10
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%r10)
	jne	.L5266
.L7270:
	movq	-368(%rbp), %rdi
	call	emit_label
	xorl	%eax, %eax
	movq	cfun(%rip), %rsi
	movq	16(%rsi), %rbx
	decl	4(%rbx)
	testl	%eax, %eax
	jmp	.L7525
.L7835:
	movq	8(%rdi), %r9
	movq	8(%r9), %rdx
	movq	%rdx, 16(%rbx)
	call	emit_insn
	jmp	.L5265
.L7834:
	movq	8(%rdi), %rsi
	movq	8(%rsi), %r11
	movq	%r11, 16(%rbx)
	call	emit_insn
	jmp	.L5258
.L5249:
	movq	-1128(%rbp), %r8
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-1128(%rbp), %rcx
	movq	%rax, %r12
	movq	16(%rcx), %rdi
	call	protect_from_queue
	movq	-1128(%rbp), %rdx
	movq	%rax, %rbx
	cmpq	8(%rdx), %r12
	je	.L7836
.L5251:
	movq	-1128(%rbp), %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L5244
.L7836:
	cmpq	16(%rdx), %rax
	jne	.L5251
	jmp	.L5244
.L7833:
	jne	.L5245
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-1128(%rbp), %r14
	movq	%rax, %rbx
	cmpq	8(%r14), %rax
	je	.L5244
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%rbx, 8(%rax)
	jmp	.L5244
.L5241:
	cmpq	$0, 16(%r14)
	je	.L7837
	movq	24(%r14), %rax
	testq	%rax, %rax
	je	.L5253
.L7449:
	movq	%rax, %r14
	jmp	.L5244
.L5253:
	movq	8(%r14), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L5244
.L7837:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L7449
	.p2align 6,,7
.L7832:
	movq	8(%rdi), %r11
	movq	8(%r11), %r10
	movq	%r10, 16(%rbx)
	call	emit_insn
	jmp	.L5238
.L7735:
	movq	32(%r15), %rdi
	movq	const_int_rtx+512(%rip), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	cfun(%rip), %r13
	movq	16(%r13), %r12
	movq	40(%r12), %rbx
	testq	%rbx, %rbx
	je	.L7264
.L5229:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L7838
	call	emit_insn
	movq	%rax, 16(%rbx)
.L5228:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %rdi
	movq	16(%rdx), %r8
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%r8)
	jne	.L5229
.L7264:
	movq	40(%r15), %rdi
	movq	-1128(%rbp), %rsi
	xorl	%edx, %edx
	jmp	.L7526
.L7838:
	movq	8(%rdi), %rcx
	movq	8(%rcx), %r14
	movq	%r14, 16(%rbx)
	call	emit_insn
	jmp	.L5228
.L7734:
	movl	$.LC0, %edi
	movl	$5092, %esi
	jmp	.L7529
	.p2align 6,,7
.L7601:
	movq	-1128(%rbp), %rcx
	movzwl	(%rcx), %eax
	cmpw	$61, %ax
	je	.L5216
	cmpw	$63, %ax
	jne	.L5215
.L5216:
	movq	24(%rbp), %rsi
	movq	24(%rbp), %rcx
	movzbl	17(%rsi), %ebx
	movzbl	62(%rcx), %edx
	movl	$1, %esi
	movl	%ebx, %eax
	shrb	$5, %dl
	shrb	$3, %bl
	shrb	$4, %al
	andl	$1, %ebx
	andl	$1, %edx
	andl	%eax, %esi
	addl	%ebx, %ebx
	sall	$2, %edx
	orl	%ebx, %esi
	orl	%edx, %esi
	xorl	%edx, %edx
	cmpb	$20, 16(%rcx)
	je	.L7839
.L5218:
	leal	0(,%rdx,8), %r9d
	movq	24(%rbp), %rdi
	orl	%r9d, %esi
	orl	$1, %esi
	call	build_qualified_type
	movl	$1, %ecx
	movl	$1, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	assign_temp
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%rax, %rdi
	movl	$51, %esi
	xorl	%edx, %edx
	movq	%rax, %rbx
	call	adjust_address_1
	movq	-1128(%rbp), %rsi
	movq	%rax, %r14
	movzbq	2(%rsi), %r8
	movzwq	mode_bitsize(%r8,%r8), %rdi
	cmpq	%rdi, %r12
	je	.L5219
	movq	%rbx, %rdi
	call	emit_move_insn
.L5219:
	movq	24(%rbp), %r11
	movl	32(%rbp), %r10d
	movq	%r14, %rdi
	movq	%r12, %rsi
	movq	%r13, %rdx
	movl	$51, %ecx
	movq	%r15, %r8
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movq	%r11, 8(%rsp)
	movl	%r10d, 16(%rsp)
	call	store_field
	movq	-1128(%rbp), %rdi
	movq	%rbx, %rsi
	call	emit_move_insn
	jmp	.L5210
.L7839:
	cmpq	$0, 8(%rcx)
	movl	$1, %eax
	cmovne	%eax, %edx
	jmp	.L5218
	.p2align 6,,7
.L7600:
	movq	const_int_rtx+512(%rip), %rsi
	movq	%r8, %rdi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	jmp	.L7524
.LFE7:
.Lfe7:
	.size	store_field,.Lfe7-store_field
	.align 2
	.p2align 4,,15
	.type	highest_pow2_factor,@function
highest_pow2_factor:
.LFB8:
	subq	$24, %rsp
.LCFI40:
	movq	%rbp, 16(%rsp)
.LCFI41:
	movq	%rbx, 8(%rsp)
.LCFI42:
	movq	%rdi, %rbp
.L7850:
	movzbl	16(%rbp), %eax
	subl	$25, %eax
	cmpl	$93, %eax
	ja	.L7841
	mov	%eax, %edx
	jmp	*.L7868(,%rdx,8)
	.section	.rodata
	.align 8
	.align 4
.L7868:
	.quad	.L7842
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7864
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7865
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7863
	.quad	.L7849
	.quad	.L7849
	.quad	.L7852
	.quad	.L7856
	.quad	.L7856
	.quad	.L7856
	.quad	.L7856
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7849
	.quad	.L7849
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7841
	.quad	.L7863
	.quad	.L7863
	.quad	.L7863
	.quad	.L7841
	.quad	.L7863
	.text
	.p2align 6,,7
.L7842:
	testb	$4, 18(%rbp)
	je	.L7843
	movl	$128, %ecx
	.p2align 4,,7
.L7840:
	movq	8(%rsp), %rbx
	movq	16(%rsp), %rbp
	movq	%rcx, %rax
	addq	$24, %rsp
	ret
.L7843:
	movq	32(%rbp), %rsi
	movl	$128, %edx
	movq	%rsi, %rbx
	movq	%rsi, %rcx
	negq	%rbx
	andq	%rbx, %rcx 
	cmove	%rdx, %rcx
	jmp	.L7840
	.p2align 6,,7
.L7864:
	movq	40(%rbp), %rbp
	jmp	.L7850
	.p2align 6,,7
.L7865:
	movq	40(%rbp), %rdi
	call	highest_pow2_factor
	movq	48(%rbp), %rdi
	movq	%rax, %rbx
.L7869:
	call	highest_pow2_factor
	movq	%rax, %rcx
	cmpq	%rbx, %rax
	cmovg	%rbx, %rcx
	jmp	.L7840
	.p2align 6,,7
.L7852:
	movq	32(%rbp), %rdi
	call	highest_pow2_factor
	movq	40(%rbp), %rdi
	movq	%rax, %rbx
	call	highest_pow2_factor
	movq	%rbx, %rcx
	imulq	%rax, %rcx
	jmp	.L7840
	.p2align 6,,7
.L7856:
	movq	40(%rbp), %rdi
	call	integer_pow2p
	testl	%eax, %eax
	jne	.L7870
.L7841:
	movl	$1, %ecx
	jmp	.L7840
.L7870:
	movq	40(%rbp), %rdi
	movl	$1, %esi
	call	host_integerp
	testl	%eax, %eax
	je	.L7841
	movq	32(%rbp), %rdi
	call	highest_pow2_factor
	movl	$1, %esi
	movq	40(%rbp), %rdi
	movq	%rax, %rbx
	call	tree_low_cst
	movl	$1, %edi
	movq	%rax, %rbp
	movq	%rbx, %rax
	cqto
	idivq	%rbp
	movq	%rax, %rcx
	testq	%rax, %rax
	cmovle	%rdi, %rcx
	jmp	.L7840
	.p2align 6,,7
.L7849:
	movq	32(%rbp), %rdi
	call	highest_pow2_factor
	movq	40(%rbp), %rdi
	movq	%rax, %rbx
	jmp	.L7869
	.p2align 6,,7
.L7863:
	movq	32(%rbp), %rbp
	jmp	.L7850
.LFE8:
.Lfe8:
	.size	highest_pow2_factor,.Lfe8-highest_pow2_factor
	.local	save_expr_list.2
	.comm	save_expr_list.2,8,8
	.section	.rodata.str1.1
.LC16:
	.string	"expand_expr"
	.section	.rodata.str1.32
	.align 32
.LC15:
	.string	"prior parameter's size depends on `%s'"
	.section	.rodata.str1.1
.LC18:
	.string	"safe_from_p"
.LC19:
	.string	"expand_assignment"
.LC20:
	.string	"emit_group_store"
	.section	.rodata.str1.32
	.align 32
.LC17:
	.string	"returned value in block_exit_expr"
	.text
	.align 2
	.p2align 4,,15
.globl expand_expr
	.type	expand_expr,@function
expand_expr:
.LFB9:
	pushq	%rbp
.LCFI43:
	movq	%rsp, %rbp
.LCFI44:
	pushq	%r15
.LCFI45:
	movl	%edx, %r15d
	pushq	%r14
.LCFI46:
	movl	%ecx, %r14d
	pushq	%r13
.LCFI47:
	movq	%rsi, %r13
	pushq	%r12
.LCFI48:
	pushq	%rbx
.LCFI49:
	subq	$9592, %rsp
.LCFI50:
	movq	%rdi, -9552(%rbp)
	movq	8(%rdi), %rbx
	movzbl	17(%rbx), %ecx
	movq	%rbx, -2712(%rbp)
	movq	%rbx, %rdx
	movzbl	16(%rdi), %ebx
	shrb	$5, %cl
	andl	$1, %ecx
	movzbl	%bl, %r12d
	testb	%bl, %bl
	movl	%ecx, -2516(%rbp)
	je	.L7873
	cmpb	$0, 16(%rdx)
	jne	.L7872
.L7873:
	movslq	%r15d,%rdx
	movq	const_tiny_rtx(,%rdx,8), %r13
	testq	%r13, %r13
	jne	.L7871
.L25052:
	movq	const_int_rtx+512(%rip), %r13
.L7871:
	leaq	-40(%rbp), %rsp
	movq	%r13, %rax
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
	.p2align 6,,7
.L7872:
	movq	-2712(%rbp), %r8
	movzbl	61(%r8), %edi
	shrb	$1, %dil
	testq	%r13, %r13
	movzbl	%dil, %esi
	movl	%esi, -2716(%rbp)
	je	.L7875
	movl	(%r13), %eax
	andl	$67174399, %eax
	cmpl	$61, %eax
	je	.L25622
.L7875:
	movq	$0, -9560(%rbp)
.L7877:
	movq	const_int_rtx+512(%rip), %rdx
	movq	%r13, %rbx
	movl	$0, -6220(%rbp)
	cmpq	%rdx, %r13
	movq	%rdx, %rcx
	je	.L7879
	leal	-114(%r12), %r9d
	cmpl	$2, %r9d
	jbe	.L7880
	cmpl	$122, %r12d
	je	.L7880
	cmpl	$51, %r12d
	je	.L7880
	cmpl	$117, %r12d
	je	.L7880
	.p2align 4,,7
.L7878:
	movl	-6220(%rbp), %r11d
	testl	%r11d, %r11d
	je	.L7881
	movq	-9552(%rbp), %r13
	movzbl	17(%r13), %eax
	movq	%rdx, %r13
	testb	$1, %al
	je	.L7871
	testb	$8, %al
	je	.L7883
	movq	-9552(%rbp), %rax
	cmpb	$30, 16(%rax)
	je	.L7883
	movl	-2716(%rbp), %esi
	testl	%esi, %esi
	je	.L7883
	cmpl	$51, -2716(%rbp)
	je	.L7883
	cmpl	$2, %r14d
	je	.L7883
	xorl	%esi, %esi
	xorl	%edx, %edx
	movq	%rax, %rdi
	movl	%r14d, %ecx
	call	expand_expr
	cmpw	$66, (%rax)
	jne	.L25052
	movq	%rax, %rdi
	call	copy_to_reg
	jmp	.L25052
	.p2align 6,,7
.L7883:
	movslq	%r12d,%rdi
	movzbl	tree_code_type(%rdi), %eax
	cmpb	$49, %al
	je	.L7887
	cmpl	$39, %r12d
	je	.L7887
	cmpl	$41, %r12d
	je	.L7887
	cmpl	$42, %r12d
	je	.L7887
	cmpb	$50, %al
	je	.L7890
	cmpb	$60, %al
	je	.L7890
	cmpl	$43, %r12d
	je	.L7890
	cmpl	$44, %r12d
	je	.L7890
	leal	-91(%r12), %r8d
	cmpl	$1, %r8d
	ja	.L7892
	movq	-9552(%rbp), %r10
	movq	40(%r10), %r9
	testb	$1, 17(%r9)
	je	.L25623
.L7892:
	cmpl	$40, %r12d
	je	.L25624
	xorl	%r13d, %r13d
	.p2align 4,,7
.L7881:
	movl	cse_not_expected(%rip), %esi
	testl	%esi, %esi
	jne	.L7895
	cmpl	$51, -2716(%rbp)
	je	.L7895
	testq	%r13, %r13
	je	.L7895
	cmpw	$61, (%r13)
	je	.L25625
.L7896:
	cmpl	$46, %r12d
	je	.L25626
.L7897:
	movq	-9560(%rbp), %r13
	.p2align 4,,7
.L7895:
	leal	-25(%r12), %eax
	cmpl	$121, %eax
	ja	.L23108
	mov	%eax, %r9d
	jmp	*.L23109(,%r9,8)
	.section	.rodata
	.align 8
	.align 4
.L23109:
	.quad	.L7973
	.quad	.L7976
	.quad	.L7978
	.quad	.L23108
	.quad	.L7978
	.quad	.L24269
	.quad	.L7901
	.quad	.L7975
	.quad	.L23108
	.quad	.L24268
	.quad	.L7910
	.quad	.L24269
	.quad	.L23108
	.quad	.L23108
	.quad	.L9231
	.quad	.L9231
	.quad	.L9198
	.quad	.L9597
	.quad	.L9201
	.quad	.L9231
	.quad	.L9591
	.quad	.L8966
	.quad	.L11653
	.quad	.L21780
	.quad	.L21344
	.quad	.L20422
	.quad	.L11667
	.quad	.L8956
	.quad	.L9619
	.quad	.L23108
	.quad	.L9615
	.quad	.L9617
	.quad	.L8909
	.quad	.L8946
	.quad	.L10784
	.quad	.L10944
	.quad	.L10955
	.quad	.L11080
	.quad	.L11080
	.quad	.L11080
	.quad	.L11080
	.quad	.L11167
	.quad	.L11167
	.quad	.L11167
	.quad	.L11167
	.quad	.L11162
	.quad	.L11080
	.quad	.L11252
	.quad	.L11251
	.quad	.L11251
	.quad	.L11251
	.quad	.L11254
	.quad	.L11257
	.quad	.L11345
	.quad	.L11345
	.quad	.L11263
	.quad	.L11445
	.quad	.L11456
	.quad	.L11456
	.quad	.L11456
	.quad	.L11456
	.quad	.L11450
	.quad	.L11452
	.quad	.L11448
	.quad	.L23108
	.quad	.L11443
	.quad	.L11562
	.quad	.L11562
	.quad	.L11448
	.quad	.L11450
	.quad	.L11452
	.quad	.L11651
	.quad	.L11550
	.quad	.L11550
	.quad	.L11550
	.quad	.L11550
	.quad	.L11550
	.quad	.L11550
	.quad	.L11550
	.quad	.L11550
	.quad	.L11550
	.quad	.L11550
	.quad	.L11550
	.quad	.L11550
	.quad	.L11550
	.quad	.L9598
	.quad	.L23108
	.quad	.L23108
	.quad	.L23108
	.quad	.L9626
	.quad	.L9626
	.quad	.L9626
	.quad	.L10557
	.quad	.L7984
	.quad	.L8908
	.quad	.L8963
	.quad	.L22672
	.quad	.L9626
	.quad	.L23078
	.quad	.L23107
	.quad	.L23079
	.quad	.L23085
	.quad	.L23083
	.quad	.L23084
	.quad	.L22669
	.quad	.L22669
	.quad	.L22671
	.quad	.L22671
	.quad	.L23105
	.quad	.L23094
	.quad	.L23095
	.quad	.L23100
	.quad	.L23108
	.quad	.L8947
	.quad	.L22665
	.quad	.L8950
	.quad	.L8955
	.quad	.L8951
	.quad	.L8953
	.quad	.L7982
	.quad	.L23108
	.quad	.L23106
	.text
.L7901:
	movq	-9552(%rbp), %rdi
	call	decl_function_context
	cmpq	current_function_decl(%rip), %rax
	movq	%rax, %r15
	je	.L7902
	cmpq	inline_function_decl(%rip), %rax
	je	.L7902
	testq	%rax, %rax
	je	.L7902
	movq	%rax, %rdi
	call	find_function_data
	movq	-9552(%rbp), %rdi
	movq	%rax, %r12
	movq	16(%rax), %r14
	call	label_rtx
	xorl	%esi, %esi
	movl	$3, %edi
	movq	16(%r12), %r13
	movq	%rax, %rdx
	movq	32(%r13), %rcx
	call	gen_rtx_fmt_ee
	movq	%rax, 32(%r14)
.L7903:
	movq	-9552(%rbp), %rdi
	call	label_rtx
	movl	$67, %edi
	testb	$2, target_flags+3(%rip)
	setne	%bl
	movq	%rax, %rdx
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_u00
	movl	$2, %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	cmpq	current_function_decl(%rip), %r15
	movq	%rax, %r13
	je	.L7871
	cmpq	inline_function_decl(%rip), %r15
	je	.L7871
	testq	%r15, %r15
	je	.L7871
	movq	8(%rax), %r15
	orb	$8, 3(%r15)
	jmp	.L7871
.L7902:
	cmpl	$3, %r14d
	jne	.L7903
	movq	cfun(%rip), %rdx
	movq	-9552(%rbp), %rdi
	movq	16(%rdx), %r14
	call	label_rtx
	xorl	%esi, %esi
	movq	cfun(%rip), %rcx
	movl	$3, %edi
	movq	%rax, %rdx
	movq	16(%rcx), %r10
	movq	32(%r10), %rcx
	call	gen_rtx_fmt_ee
	movq	%rax, 32(%r14)
	jmp	.L7903
	.p2align 6,,7
.L7973:
	movq	-9552(%rbp), %r10
	movl	-2716(%rbp), %edx
	movq	32(%r10), %rdi
	movq	40(%r10), %rsi
	call	immed_double_const
	movq	-9552(%rbp), %r9
	movq	%rax, %r13
	testb	$4, 18(%r9)
	je	.L7871
	cmpl	$3, %r14d
	je	.L7871
	movl	-2716(%rbp), %edi
	movq	%rax, %rsi
	call	force_reg
	.p2align 4,,7
.L23191:
	movq	%rax, %r13
	jmp	.L7871
.L7976:
	movq	-9552(%rbp), %rdi
	call	immed_real_const
	jmp	.L23191
.L7978:
	movq	-9552(%rbp), %rbx
	movq	24(%rbx), %rdx
	testq	%rdx, %rdx
	je	.L25627
.L7979:
	cmpw	$66, (%rdx)
	je	.L25628
.L25062:
	movq	%rdx, %r13
	jmp	.L7871
.L25628:
	cmpl	$2, %r14d
	je	.L25062
	cmpl	$3, %r14d
	je	.L25062
	decl	%r14d
	je	.L25062
	movl	-2716(%rbp), %edi
	movq	8(%rdx), %rsi
	call	memory_address_p
	testl	%eax, %eax
	je	.L24275
	movl	flag_force_addr(%rip), %edi
	testl	%edi, %edi
	je	.L24276
	movq	-9552(%rbp), %rcx
	movq	24(%rcx), %rdx
	movq	8(%rdx), %r13
	cmpw	$61, (%r13)
	je	.L25062
.L7981:
	movq	8(%rdx), %rdi
	call	copy_rtx
	movq	%rax, %rsi
	movq	-9552(%rbp), %rax
	movq	24(%rax), %rdi
.L25071:
	call	replace_equiv_address
	jmp	.L23191
.L24276:
	movq	-9552(%rbp), %r14
	movq	24(%r14), %rdx
	jmp	.L25062
.L24275:
	movq	-9552(%rbp), %r11
	movq	24(%r11), %rdx
	jmp	.L7981
	.p2align 6,,7
.L25627:
	movq	%rbx, %rdi
	movl	$1, %esi
	call	output_constant_def
	movq	24(%rbx), %rdx
	jmp	.L7979
.L7975:
	movq	-9552(%rbp), %r15
	movq	%r13, %rsi
	movq	104(%r15), %rdi
.L25098:
	xorl	%edx, %edx
	xorl	%ecx, %ecx
.L25083:
	call	expand_expr
	jmp	.L23191
.L24268:
	movq	-9552(%rbp), %rax
	movq	144(%rax), %rdi
.L7914:
	movq	-9552(%rbp), %rcx
	cmpq	$0, 40(%rcx)
	jne	.L7922
	movq	8(%rcx), %rsi
	cmpq	$0, 32(%rsi)
	je	.L7922
	testb	$4, 18(%rcx)
	jne	.L7916
	testb	$1, 49(%rcx)
	je	.L7922
.L7916:
	xorl	%ebx, %ebx
	testq	%rdi, %rdi
	cmovne	%rdi, %rbx
	xorl	%esi, %esi
	movq	-9552(%rbp), %rdi
	call	layout_decl
	testq	%rbx, %rbx
	jne	.L25629
	movq	-9552(%rbp), %r12
	movq	144(%r12), %rdi
.L7922:
	testq	%rdi, %rdi
	je	.L25630
.L7923:
	movq	-9552(%rbp), %rsi
	testb	$1, 18(%rsi)
	je	.L25631
.L7926:
	movq	-9552(%rbp), %rdi
	xorl	%r13d, %r13d
	call	decl_function_context
	testq	%rax, %rax
	je	.L24271
	cmpq	current_function_decl(%rip), %rax
	je	.L24272
	cmpq	inline_function_decl(%rip), %rax
	je	.L24273
	movq	-9552(%rbp), %rdx
	movq	144(%rdx), %rdi
	testq	%rdi, %rdi
	movq	%rdi, %rax
	je	.L25632
.L7929:
	cmpw	$66, (%rax)
	je	.L25633
.L7928:
	movq	-9552(%rbp), %rdi
	orb	$2, 49(%rdi)
	movq	current_function_decl(%rip), %r14
	testb	$4, 49(%r14)
	jne	.L25634
	movq	-9552(%rbp), %rdi
	call	mark_addressable
	movq	-9552(%rbp), %rcx
	movq	144(%rcx), %r13
	testq	%r13, %r13
	movq	%r13, %rax
	je	.L25635
.L7940:
	cmpw	$66, (%rax)
	jne	.L25636
	testq	%rax, %rax
	je	.L25637
.L7941:
	movq	8(%rax), %rbx
	cmpw	$66, (%rbx)
	je	.L25638
	movq	-9552(%rbp), %rsi
	movq	%rbx, %rdi
	call	fix_lexical_addr
.L24545:
	movq	%rax, %rbx
	movq	-9552(%rbp), %rax
	movq	144(%rax), %rdi
	testq	%rdi, %rdi
	je	.L25639
.L7945:
	movq	%rbx, %rsi
.L24547:
	call	replace_equiv_address
.L24546:
	movq	%rax, %r13
.L7946:
	testq	%r13, %r13
	je	.L7963
	cmpw	$66, (%r13)
	jne	.L7871
	movq	8(%r13), %rdi
	cmpw	$61, (%rdi)
	jne	.L7871
	movq	-9552(%rbp), %rax
	movl	56(%rax), %esi
	andl	$16777215, %esi
.L25066:
	call	mark_reg_pointer
	jmp	.L7871
	.p2align 6,,7
.L7963:
	movq	-9552(%rbp), %rbx
	movq	144(%rbx), %rdi
	testq	%rdi, %rdi
	movq	%rdi, %rax
	je	.L25640
.L7966:
	cmpw	$61, (%rax)
	je	.L25641
.L7965:
	testq	%rdi, %rdi
	movq	%rdi, %r13
	jne	.L7871
	movq	-9552(%rbp), %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-9552(%rbp), %rsi
	movq	144(%rsi), %r13
	jmp	.L7871
.L25641:
	testq	%rax, %rax
	je	.L25642
.L7967:
	movq	-9552(%rbp), %rcx
	movzbl	48(%rcx), %edx
	cmpb	%dl, 2(%rax)
	je	.L7965
	testq	%rdi, %rdi
	movq	%rdi, %rax
	je	.L25643
.L7969:
	movq	-9552(%rbp), %rbx
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r14d
	movq	-2712(%rbp), %rdi
	movzbl	%dl, %esi
	leaq	-2516(%rbp), %rdx
	cmpb	$36, 16(%rbx)
	sete	%cl
	call	promote_mode
	cmpl	%eax, %r14d
	jne	.L25644
	movq	-9552(%rbp), %rdx
	movq	144(%rdx), %rsi
	testq	%rsi, %rsi
	je	.L25645
.L7971:
	movl	-2716(%rbp), %edi
.L25065:
	call	gen_lowpart_SUBREG
	movzbl	3(%rax), %ecx
	movq	%rax, %r13
	orb	$16, %cl
	movb	%cl, 3(%rax)
	andb	$-5, %cl
	movzbl	-2516(%rbp), %edi
	andb	$1, %dil
	salb	$2, %dil
	orb	%dil, %cl
	movb	%cl, 3(%rax)
	jmp	.L7871
.L25645:
	xorl	%esi, %esi
	movq	%rdx, %rdi
	call	make_decl_rtl
	movq	-9552(%rbp), %r8
	movq	144(%r8), %rsi
	jmp	.L7971
.L25644:
	movl	$.LC0, %edi
	movl	$6332, %esi
.L25123:
	movl	$.LC16, %edx
.L25086:
	call	fancy_abort
.L25643:
	movq	%rcx, %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-9552(%rbp), %r11
	movq	144(%r11), %rax
	movzbl	48(%r11), %edx
	jmp	.L7969
.L25642:
	movq	-9552(%rbp), %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-9552(%rbp), %rdx
	movq	144(%rdx), %rdi
	movq	%rdi, %rax
	jmp	.L7967
.L25640:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	144(%rbx), %rdi
	movq	%rdi, %rax
	jmp	.L7966
.L25639:
	movq	%rax, %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-9552(%rbp), %rax
	movq	144(%rax), %rdi
	jmp	.L7945
.L25638:
	movq	8(%rbx), %rdi
	movq	-9552(%rbp), %rsi
	call	fix_lexical_addr
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
	jmp	.L24545
.L25637:
	movq	-9552(%rbp), %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-9552(%rbp), %r12
	movq	144(%r12), %rax
	jmp	.L7941
.L25636:
	movl	$.LC0, %edi
	movl	$6275, %esi
	jmp	.L25123
	.p2align 6,,7
.L25635:
	movq	%rcx, %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-9552(%rbp), %r9
	movq	144(%r9), %rax
	jmp	.L7940
.L25634:
	movl	$.LC0, %edi
	movl	$6272, %esi
	jmp	.L25123
	.p2align 6,,7
.L25633:
	testq	%rax, %rax
	je	.L25646
.L7930:
	movq	8(%rax), %rbx
	cmpw	$67, (%rbx)
	je	.L7927
	testq	%rdi, %rdi
	movq	%rdi, %rax
	je	.L25647
.L7931:
	movq	8(%rax), %rsi
	cmpw	$68, (%rsi)
	je	.L7927
	testq	%rdi, %rdi
	movq	%rdi, %rax
	je	.L25648
.L7932:
	movq	8(%rax), %r9
	cmpw	$54, (%r9)
	je	.L7927
	testq	%rdi, %rdi
	movq	%rdi, %rax
	je	.L25649
.L7933:
	movq	8(%rax), %r12
	cmpw	$55, (%r12)
	je	.L7927
	testq	%rdi, %rdi
	movq	%rdi, %rax
	je	.L25650
.L7934:
	movq	8(%rax), %rcx
	cmpw	$58, (%rcx)
	je	.L7927
	testq	%rdi, %rdi
	movq	%rdi, %rax
	je	.L25651
.L7935:
	movq	8(%rax), %r15
	cmpw	$134, (%r15)
	je	.L7927
	testq	%rdi, %rdi
	movq	%rdi, %rax
	je	.L25652
.L7936:
	movq	8(%rax), %r11
	cmpw	$56, (%r11)
	je	.L7927
	testq	%rdi, %rdi
	movq	%rdi, %rax
	je	.L25653
.L7937:
	movq	8(%rax), %r8
	cmpw	$140, (%r8)
	jne	.L7928
.L7927:
	testq	%rdi, %rdi
	movq	%rdi, %rax
	je	.L25654
.L7948:
	cmpw	$66, (%rax)
	je	.L25655
.L7947:
	testq	%rdi, %rdi
	movq	%rdi, %rax
	je	.L25656
.L7954:
	cmpw	$66, (%rax)
	jne	.L7946
	cmpl	$2, %r14d
	je	.L7946
	cmpl	$1, %r14d
	je	.L7946
	cmpl	$3, %r14d
	je	.L7946
	testq	%rdi, %rdi
	movq	%rdi, %rax
	je	.L25657
.L7957:
	movq	-9552(%rbp), %r9
	movq	8(%rax), %rsi
	movzbl	48(%r9), %edi
	call	memory_address_p
	testl	%eax, %eax
	je	.L24274
	movl	flag_force_addr(%rip), %edi
	testl	%edi, %edi
	je	.L7946
	movq	-9552(%rbp), %rcx
	movq	144(%rcx), %rdi
	testq	%rdi, %rdi
	movq	%rdi, %rax
	je	.L25658
.L7958:
	movq	8(%rax), %r10
	cmpw	$61, (%r10)
	je	.L7946
.L7955:
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	je	.L25659
.L7961:
	testq	%rdi, %rdi
	movq	%rdi, %rax
	je	.L25660
.L7962:
	movq	8(%rax), %rdi
	call	copy_rtx
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L24547
.L25660:
	movq	-9552(%rbp), %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-9552(%rbp), %r15
	movq	144(%r15), %rax
	jmp	.L7962
.L25659:
	movq	-9552(%rbp), %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-9552(%rbp), %rcx
	movq	144(%rcx), %rdi
	movq	%rdi, %rbx
	jmp	.L7961
.L25658:
	movq	%rcx, %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-9552(%rbp), %r12
	movq	144(%r12), %rdi
	movq	%rdi, %rax
	jmp	.L7958
	.p2align 6,,7
.L24274:
	movq	-9552(%rbp), %r13
	movq	144(%r13), %rdi
	jmp	.L7955
.L25657:
	movq	-9552(%rbp), %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-9552(%rbp), %r14
	movq	144(%r14), %rax
	jmp	.L7957
.L25656:
	movq	-9552(%rbp), %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-9552(%rbp), %r8
	movq	144(%r8), %rdi
	movq	%rdi, %rax
	jmp	.L7954
.L25655:
	testq	%rdi, %rdi
	movq	%rdi, %rax
	je	.L25661
.L7949:
	movq	8(%rax), %r11
	cmpw	$61, (%r11)
	jne	.L7947
	testq	%rdi, %rdi
	je	.L25662
.L7951:
	call	validize_mem
	jmp	.L24546
.L25662:
	movq	-9552(%rbp), %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-9552(%rbp), %rsi
	movq	144(%rsi), %rdi
	jmp	.L7951
.L25661:
	movq	-9552(%rbp), %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-9552(%rbp), %rbx
	movq	144(%rbx), %rdi
	movq	%rdi, %rax
	jmp	.L7949
.L25654:
	movq	-9552(%rbp), %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-9552(%rbp), %r15
	movq	144(%r15), %rdi
	movq	%rdi, %rax
	jmp	.L7948
.L25653:
	movq	-9552(%rbp), %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-9552(%rbp), %rsi
	movq	144(%rsi), %rdi
	movq	%rdi, %rax
	jmp	.L7937
.L25652:
	movq	-9552(%rbp), %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-9552(%rbp), %rbx
	movq	144(%rbx), %rdi
	movq	%rdi, %rax
	jmp	.L7936
.L25651:
	movq	-9552(%rbp), %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-9552(%rbp), %rdx
	movq	144(%rdx), %rdi
	movq	%rdi, %rax
	jmp	.L7935
.L25650:
	movq	-9552(%rbp), %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-9552(%rbp), %r10
	movq	144(%r10), %rdi
	movq	%rdi, %rax
	jmp	.L7934
	.p2align 6,,7
.L25649:
	movq	-9552(%rbp), %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-9552(%rbp), %rax
	movq	144(%rax), %rdi
	movq	%rdi, %rax
	jmp	.L7933
.L25648:
	movq	-9552(%rbp), %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-9552(%rbp), %r8
	movq	144(%r8), %rdi
	movq	%rdi, %rax
	jmp	.L7932
.L25647:
	movq	-9552(%rbp), %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-9552(%rbp), %r11
	movq	144(%r11), %rdi
	movq	%rdi, %rax
	jmp	.L7931
.L25646:
	movq	-9552(%rbp), %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-9552(%rbp), %r15
	movq	144(%r15), %rdi
	movq	%rdi, %rax
	jmp	.L7930
.L25632:
	movq	%rdx, %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-9552(%rbp), %rdx
	movq	144(%rdx), %rdi
	movq	%rdi, %rax
	jmp	.L7929
.L24273:
	movq	-9552(%rbp), %rdx
	movq	144(%rdx), %rdi
	jmp	.L7927
.L24272:
	movq	-9552(%rbp), %rcx
	movq	144(%rcx), %rdi
	jmp	.L7927
.L24271:
	movq	-9552(%rbp), %r10
	movq	144(%r10), %rdi
	jmp	.L7927
.L25631:
	movq	%rsi, %rdi
	call	assemble_external
	movq	-9552(%rbp), %rcx
	orb	$1, 18(%rcx)
	jmp	.L7926
.L25630:
	movq	-9552(%rbp), %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-9552(%rbp), %r10
	cmpq	$0, 144(%r10)
	jne	.L7923
	movl	$.LC0, %edi
	movl	$6239, %esi
	jmp	.L25123
	.p2align 6,,7
.L25629:
	movq	-9552(%rbp), %r8
	movq	%rbx, %rdi
	movl	$1, %edx
	movzbl	48(%r8), %r9d
	movb	%r9b, 2(%rbx)
	movq	$0, 144(%r8)
	movq	-9552(%rbp), %rsi
	call	set_mem_attributes
	movq	-9552(%rbp), %rdi
	movq	%rbx, 144(%rdi)
	movq	%rbx, %rdi
	jmp	.L7922
	.p2align 6,,7
.L7910:
	movq	-9552(%rbp), %rsi
	movq	144(%rsi), %rdi
	testq	%rdi, %rdi
	jne	.L7914
	movq	%rsi, %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-9552(%rbp), %rax
	movq	144(%rax), %rdi
	testq	%rdi, %rdi
	jne	.L7914
	movq	%rax, %rdi
	movl	$.LC15, %esi
	xorl	%eax, %eax
	call	error_with_decl
	movslq	-2716(%rbp),%r11
	movq	const_tiny_rtx(,%r11,8), %r13
	jmp	.L7871
	.p2align 6,,7
.L24269:
	movq	-9552(%rbp), %r13
	movq	144(%r13), %rdi
	jmp	.L7922
.L9198:
	movq	-9552(%rbp), %rcx
	leaq	-2536(%rbp), %rsi
	movq	32(%rcx), %r12
	movq	%r12, %rdi
	call	string_constant
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L9199
	cmpb	$29, 16(%rax)
	je	.L25663
.L9199:
	xorl	%edx, %edx
	movl	$1, %ecx
	xorl	%esi, %esi
	movq	%r12, %rdi
	call	expand_expr
	movl	-2716(%rbp), %edi
	movq	%rax, %rsi
	call	memory_address
	movl	-2716(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%edx, %edx
	movq	-9552(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	set_mem_attributes
	cmpl	$4, %r14d
	jne	.L7871
	movq	-2712(%rbp), %rdi
	call	readonly_fields_p
	testl	%eax, %eax
	je	.L7871
	orb	$4, 3(%r13)
	jmp	.L7871
.L25663:
	movq	-2536(%rbp), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L9199
	movslq	32(%rax),%rsi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L9199
	movslq	-2716(%rbp),%rax
	cmpl	$1, mode_class(,%rax,4)
	jne	.L9199
	cmpb	$1, mode_size(%rax)
	jne	.L9199
	cmpl	$4, %r14d
	je	.L9199
	movq	-2536(%rbp), %r8
	movq	32(%r8), %rax
.L25072:
	addq	40(%rbx), %rax
	movl	-2716(%rbp), %esi
	movsbq	(%rax),%rdi
.L25073:
	call	trunc_int_for_mode
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	gen_rtx_CONST_INT
	jmp	.L23191
	.p2align 6,,7
.L9597:
	movl	$.LC0, %edi
	movl	$7155, %esi
	jmp	.L25123
.L9201:
	movq	-9552(%rbp), %r10
	movq	32(%r10), %rdx
	movq	%rdx, -2928(%rbp)
	movq	8(%rdx), %rax
	cmpb	$18, 16(%rax)
	jne	.L25664
	movq	24(%rax), %rax
	testq	%rax, %rax
	je	.L9203
	movq	104(%rax), %rbx
.L9204:
	movq	-9552(%rbp), %rax
	movq	sizetype_tab(%rip), %rdi
	movq	40(%rax), %rsi
	call	convert
	movq	%rbx, %rdi
	movq	%rax, -6456(%rbp)
	call	integer_zerop
	testl	%eax, %eax
	je	.L25665
.L9205:
	leal	-2(%r14), %r11d
	cmpl	$1, %r11d
	jbe	.L9206
	movq	-2928(%rbp), %rbx
	cmpb	$29, 16(%rbx)
	je	.L25666
.L9206:
	leal	-2(%r14), %esi
	cmpl	$1, %esi
	jbe	.L9207
	movq	-2928(%rbp), %rbx
	movzwl	16(%rbx), %eax
	andl	$511, %eax
	cmpw	$46, %ax
	je	.L25667
.L9207:
	movl	optimize(%rip), %edx
	testl	%edx, %edx
	jle	.L9231
	cmpl	$2, %r14d
	je	.L9231
	cmpl	$3, %r14d
	je	.L9231
	movq	-2928(%rbp), %rcx
	movzwl	16(%rcx), %eax
	andl	$4607, %eax
	cmpw	$4130, %ax
	je	.L25668
.L9231:
	cmpl	$39, %r12d
	je	.L25669
.L9232:
	movq	global_trees+136(%rip), %rax
	movq	-9552(%rbp), %r12
	movl	$0, -6460(%rbp)
	movq	global_trees+120(%rip), %r11
	xorl	%ebx, %ebx
	movl	$0, -2568(%rbp)
	movq	$0, -2576(%rbp)
	movq	%rax, -6472(%rbp)
	movq	%r11, -6480(%rbp)
	movzbl	16(%r12), %eax
	cmpb	$39, %al
	je	.L25670
	cmpb	$40, %al
	je	.L25671
	movq	-9552(%rbp), %rsi
	movq	8(%rsi), %r8
	movzbl	61(%r8), %r10d
	movzbl	17(%r8), %ecx
	shrb	$1, %r10b
	shrb	$5, %cl
	movzbl	%r10b, %edi
	andl	$1, %ecx
	movl	%edi, -6460(%rbp)
	movl	%ecx, -2516(%rbp)
	cmpl	$51, -6460(%rbp)
	je	.L25672
	movslq	-6460(%rbp),%r9
	movzwq	mode_bitsize(%r9,%r9), %rsi
	movq	%rsi, -2544(%rbp)
.L9245:
	testq	%rbx, %rbx
	jne	.L25673
	.p2align 4,,7
.L9312:
	movzbl	16(%r12), %edx
	cmpb	$40, %dl
	je	.L25674
	cmpb	$39, %dl
	je	.L25675
	leal	-43(%rdx), %ecx
	cmpb	$1, %cl
	jbe	.L25676
	cmpb	$57, %dl
	jne	.L9270
	movq	-2576(%rbp), %rax
	leaq	-2576(%rbp), %r8
	movq	8(%r12), %rdx
	testq	%rax, %rax
	je	.L9271
	movq	(%rax), %rdi
.L9272:
	testq	%rdi, %rdi
	je	.L23291
	movq	128(%rdx), %rsi
.L9305:
	movq	24(%rdi), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rdx
	je	.L23293
	.p2align 4,,7
.L9290:
	movq	8(%rcx), %r11
	cmpq	%rsi, 128(%r11)
	je	.L25677
	movzbl	16(%rcx), %eax
	cmpb	$47, %al
	je	.L9286
	cmpb	$51, %al
	je	.L9286
	movzbl	%al, %r9d 
	movzbl	tree_code_type(%r9), %eax
	cmpb	$114, %al
	je	.L9289
	cmpb	$49, %al
	je	.L9289
	cmpb	$50, %al
	je	.L9289
	cmpb	$101, %al
	je	.L9289
	xorl	%ecx, %ecx
	.p2align 4,,7
.L9285:
	testq	%rcx, %rcx
	jne	.L9290
.L23293:
	testq	%rdx, %rdx
	je	.L23295
	.p2align 4,,7
.L9304:
	movq	8(%rdx), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$13, %al
	je	.L9296
	cmpb	$15, %al
	je	.L9296
.L9293:
	movzbl	16(%rdx), %eax
	cmpb	$47, %al
	je	.L9300
	cmpb	$51, %al
	je	.L9300
	movzbl	%al, %ecx 
	movzbl	tree_code_type(%rcx), %eax
	cmpb	$114, %al
	je	.L9303
	cmpb	$49, %al
	je	.L9303
	cmpb	$50, %al
	je	.L9303
	cmpb	$101, %al
	je	.L9303
	xorl	%edx, %edx
	.p2align 4,,7
.L9299:
	testq	%rdx, %rdx
	jne	.L9304
.L23295:
	movq	(%rdi), %rdi
	testq	%rdi, %rdi
	jne	.L9305
.L23291:
	xorl	%ecx, %ecx
.L9283:
	testq	%rcx, %rcx
	je	.L9254
	movq	%rcx, %r12
	jmp	.L9312
.L9254:
	movq	-6480(%rbp), %rdi
	xorl	%esi, %esi
	call	host_integerp
	testl	%eax, %eax
	je	.L9313
	movq	sizetype_tab+24(%rip), %rdi
	movq	-6480(%rbp), %rsi
	call	convert
	movq	global_trees+152(%rip), %rdx
	movl	$61, %edi
	movq	%rax, %rsi
	call	size_binop
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L9313
	movq	-6472(%rbp), %rdx
	movl	$59, %edi
	call	size_binop
	testq	%rax, %rax
	movq	%rax, %rbx
	jne	.L25678
.L9313:
	movq	-6472(%rbp), %rdi
	xorl	%esi, %esi
	call	tree_low_cst
	movq	%rax, -2552(%rbp)
	movq	-6480(%rbp), %rax
	movq	%rax, -2560(%rbp)
.L9314:
	cmpq	-9552(%rbp), %r12
	movl	-6460(%rbp), %ebx
	movl	%ebx, -2564(%rbp)
	je	.L25679
	movq	8(%r12), %rax
	cmpb	$21, 16(%rax)
	je	.L25680
.L9325:
	xorl	%esi, %esi
.L9326:
	leal	-2(%r14), %edi
	xorl	%ecx, %ecx
	cmpl	$1, %edi
	movq	%r12, %rdi
	cmovbe	%r14d, %ecx
	xorl	%edx, %edx
	call	expand_expr
	movzwl	(%rax), %edx
	movq	%rax, -2952(%rbp)
	movq	%rax, -6504(%rbp)
	leal	-67(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L9330
	cmpw	$54, %dx
	je	.L9330
	cmpw	$55, %dx
	je	.L9330
	cmpw	$58, %dx
	je	.L9330
	cmpw	$134, %dx
	je	.L9330
	cmpw	$56, %dx
	je	.L9330
	cmpw	$140, %dx
	je	.L9330
.L9329:
	movq	-2560(%rbp), %rdi
	testq	%rdi, %rdi
	jne	.L25681
.L9333:
	movq	-6504(%rbp), %r10
	movzwl	(%r10), %edx
	cmpw	$66, %dx
	je	.L25682
.L9348:
	cmpw	$65, %dx
	je	.L25683
	movl	-2564(%rbp), %eax
	testl	%eax, %eax
	je	.L9354
	cmpw	$61, %dx
	je	.L9354
	cmpw	$63, %dx
	je	.L9354
	cmpl	$51, %eax
	je	.L9355
	cltq
	cmpb	$0, direct_load(%rax)
	jne	.L9355
	movslq	-2716(%rbp),%r9
	movl	mode_class(,%r9,4), %eax
	cmpl	$5, %eax
	je	.L9355
	cmpl	$6, %eax
	je	.L9355
	cmpl	$2, %r14d
	je	.L9355
	cmpl	$3, %r14d
	je	.L9355
.L9354:
	movl	-2716(%rbp), %r14d
	cmpl	$51, %r14d
	je	.L25684
.L9358:
	movq	-6504(%rbp), %rdi
	call	validize_mem
	cmpw	$66, (%rax)
	movq	%rax, %rbx
	je	.L25685
.L9565:
	movq	8(%r12), %rdi
	call	int_size_in_bytes
	movl	%r14d, %r9d
	movq	%r13, %r8
	movq	-2544(%rbp), %rsi
	movq	-2552(%rbp), %rdx
	movq	%rbx, %rdi
	movl	-2516(%rbp), %ecx
	movl	%r14d, (%rsp)
	movq	%rax, 8(%rsp)
	call	extract_bit_field
	cmpl	$51, -2716(%rbp)
	movq	%rax, %r13
	jne	.L7871
	movl	%r14d, %edi
	xorl	%esi, %esi
	call	type_for_mode
	movl	$1, %esi
	movq	%rax, %rdi
	call	build_qualified_type
	movl	$1, %ecx
	movl	$1, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	call	assign_temp
	movq	%r13, %rsi
	movq	%rax, %r15
	movq	%rax, %rdi
	call	emit_move_insn
	movq	%r15, %rdi
	call	copy_rtx
	movl	$1, %edx
	movq	-9552(%rbp), %rsi
	movq	%rax, %r13
	movq	%rax, %rdi
	movb	$51, 2(%rax)
.L25063:
	call	set_mem_attributes
	jmp	.L7871
.L25685:
	movq	8(%rax), %rdx
	cmpw	$61, (%rdx)
	jne	.L9565
	leaq	8(%rax), %rdx
	movl	$8, %esi
	movq	16(%rax), %rax
	testq	%rax, %rax
	je	.L9569
	movl	32(%rax), %esi
.L9569:
	movq	(%rdx), %rdi
	call	mark_reg_pointer
	jmp	.L9565
.L25684:
	testq	%r13, %r13
	je	.L9357
	movq	-6504(%rbp), %r15
	cmpw	$66, (%r15)
	je	.L25686
.L9357:
	movl	-2544(%rbp), %edi
	movl	$1, %esi
	movl	$1, %edx
	call	mode_for_size
	movl	%eax, %r14d
.L9356:
	cmpl	$51, %r14d
	jne	.L9358
	movq	-6504(%rbp), %rdx
	cmpw	$66, (%rdx)
	jne	.L9360
	testq	%r13, %r13
	je	.L9361
	cmpw	$66, (%r13)
	jne	.L9360
.L9361:
	movq	-2552(%rbp), %rdx
	testl	$7, %edx 
	jne	.L9360
	cmpq	$-1, %rdx
	leaq	7(%rdx), %rbx
	movq	-6504(%rbp), %rdi
	cmovle	%rbx, %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	sarq	$3, %rdx
	xorl	%esi, %esi
	call	adjust_address_1
	testq	%r13, %r13
	movq	%rax, %r15
	je	.L25687
.L9364:
	movq	-2544(%rbp), %rsi
	movq	%r13, -6520(%rbp)
	leaq	14(%rsi), %r10
	addq	$7, %rsi
	cmovs	%r10, %rsi
	xorl	%edi, %edi
	sarq	$3, %rsi
	call	gen_rtx_CONST_INT
	movl	$8, %edx
	movq	%rax, %r14
	movq	16(%r13), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L9370
	movl	32(%rax), %edx
.L9370:
	movq	16(%r15), %rax
	testq	%rax, %rax
	je	.L9371
	cmpl	32(%rax), %edx
	jb	.L9372
.L9367:
	testq	%rax, %rax
	movl	$8, -6508(%rbp)
	je	.L9368
	movl	32(%rax), %eax
	movl	%eax, -6508(%rbp)
.L9368:
	cmpb	$51, 2(%r13)
	jne	.L25547
	cmpb	$51, 2(%r15)
	jne	.L25546
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L9379
	cmpl	$66, %eax
	je	.L25688
.L9383:
	cmpl	$75, %eax
	je	.L9387
	cmpl	$78, %eax
	je	.L9387
.L9382:
	movzwl	(%r15), %eax
	cmpl	$71, %eax
	je	.L9392
	cmpl	$66, %eax
	je	.L25689
.L9396:
	cmpl	$75, %eax
	je	.L9400
	cmpl	$78, %eax
	je	.L9400
.L9395:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L9405
	cmpl	$66, %eax
	je	.L25690
.L9409:
	cmpl	$75, %eax
	je	.L9413
	cmpl	$78, %eax
	je	.L9413
.L9408:
	movq	-6520(%rbp), %rax
	cmpw	$66, (%rax)
	jne	.L25545
	cmpw	$66, (%r15)
	jne	.L25544
	testq	%r14, %r14
	je	.L25543
	cmpw	$54, (%r14)
	je	.L25691
.L9421:
	shrl	$3, -6508(%rbp)
	xorl	%edi, %edi
	mov	-6508(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -2968(%rbp)
	testl	%r12d, %r12d
	je	.L23309
.L9554:
	movslq	%r12d,%rsi
	movl	movstr_optab(,%rsi,4), %edx
	movq	%rsi, -2976(%rbp)
	cmpl	$1317, %edx
	je	.L9540
	cmpw	$54, (%r14)
	je	.L25692
.L9544:
	testb	$2, target_flags+3(%rip)
	je	.L9545
	movq	-2976(%rbp), %rcx
	cmpw	$63, mode_bitsize(%rcx,%rcx)
.L24598:
	jbe	.L9540
.L9543:
	movslq	%edx,%rax
	leaq	(%rax,%rax,4), %rbx
	movq	%rax, -2984(%rbp)
	movq	insn_data+24(,%rbx,8), %rdi
	movq	(%rdi), %rax
	movq	%rdi, -2992(%rbp)
	testq	%rax, %rax
	je	.L9547
	movq	-6520(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L9540
.L9547:
	movq	-2992(%rbp), %r10
	movq	24(%r10), %rax
	testq	%rax, %rax
	jne	.L25693
.L9548:
	movq	-2992(%rbp), %r11
	movq	72(%r11), %rax
	testq	%rax, %rax
	je	.L9549
	xorl	%esi, %esi
	movq	-2968(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L9540
.L9549:
	call	get_last_insn
	movl	$1, %edx
	movq	%r14, %rsi
	movl	%r12d, %edi
	movq	%rax, -3000(%rbp)
	call	convert_to_mode
	movq	-2992(%rbp), %rsi
	movq	%rax, %rbx
	movq	48(%rsi), %rax
	testq	%rax, %rax
	jne	.L25694
.L9550:
	movq	-2984(%rbp), %r8
	movq	-6520(%rbp), %rdi
	xorl	%eax, %eax
	movq	%r15, %rsi
	movq	%rbx, %rdx
	movq	-2968(%rbp), %rcx
	leaq	(%r8,%r8,4), %r12
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24468
	movq	-3000(%rbp), %rdi
	call	delete_insns_since
.L9540:
	movq	-2976(%rbp), %rcx
	movzbl	mode_wider_mode(%rcx), %r12d
	testl	%r12d, %r12d
	jne	.L9554
.L23309:
	testb	$2, target_flags+3(%rip)
	movq	-6520(%rbp), %rbx
	movl	$0, volatile_ok(%rip)
	setne	%al
	movq	8(%rbx), %rsi
	movzbl	%al, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%dl
	movq	%rax, -6552(%rbp)
	movq	8(%r15), %rsi
	movzbl	%dl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%r14, %rsi
	movq	sizetype_tab(%rip), %r9
	movq	%rax, %rbx
	movzbl	61(%r9), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r14
	je	.L25695
.L9563:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	-6552(%rbp), %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r15
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r14, %rsi
	movq	%rax, (%r15)
	movq	%rax, %r12
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %r8
	movq	%rax, (%r12)
	movq	(%r15), %r9
	movq	8(%r8), %rdi
	movq	(%r9), %rcx
	movq	$0, (%rcx)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r15, %rcx
	movq	fn.1(%rip), %r12
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r12), %r14
	movq	8(%r14), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	movq	-6552(%rbp), %rcx
	testb	$4, 3(%rcx)
	je	.L7871
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%rcx, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L7871
.L25695:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %rsi
	orb	$1, 49(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %r11
	orb	$8, 18(%r11)
	movq	fn.1(%rip), %r10
	orb	$64, 50(%r10)
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L9563
.L24468:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L7871
.L25694:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L9550
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L9550
	.p2align 6,,7
.L25693:
	movq	%r15, %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L9540
	jmp	.L9548
.L9545:
	movq	-2976(%rbp), %r9
	cmpw	$31, mode_bitsize(%r9,%r9)
	jmp	.L24598
.L25692:
	movq	mode_mask_array(,%rsi,8), %r8
	shrq	$1, %r8
	cmpq	%r8, 8(%r14)
	jbe	.L9543
	jmp	.L9544
.L25691:
	movq	8(%r14), %r12
	xorl	%r8d, %r8d
	movl	$17, %esi
.L9434:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23298
.L9431:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L9431
.L23298:
	testl	%edi, %edi
	je	.L9424
	movslq	%edi,%rbx
	movq	%rbx, %r10
	salq	$4, %r10
	addq	optab_table+240(%rip), %r10
	cmpl	$1317, 8(%r10)
	je	.L9433
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %r11d
	cmpl	%eax, %r11d
	jb	.L9433
	movzbq	mode_size(%rbx), %rdi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rdi
	addq	%rax, %r8
	movq	%rdx, %r12
.L9433:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L9434
.L9424:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L9437
	movq	ix86_cost(%rip), %rbx
	mov	40(%rbx), %r9d
	cmpq	%r9, %r8
	jae	.L9421
.L9438:
	movq	8(%r15), %r8
	movq	-6520(%rbp), %rdx
	movq	8(%r14), %r12
	movq	-6520(%rbp), %rsi
	movq	$0, -296(%rbp)
	movl	$0, -6532(%rbp)
	testb	$2, target_flags+3(%rip)
	movq	%r8, -320(%rbp)
	setne	%r14b
	movq	8(%rdx), %r11
	movq	%rsi, -352(%rbp)
	movzwl	(%r11), %edx
	movq	%r11, -6528(%rbp)
	movzbl	%r14b, %ecx
	leal	5(,%rcx,4), %r14d
	xorl	%ecx, %ecx
	leal	-96(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L9443
	cmpw	$99, %dx
	je	.L9443
	cmpw	$98, %dx
	je	.L9443
.L9442:
	movq	-6528(%rbp), %rdi
	movl	%ecx, -336(%rbp)
	xorl	%edx, %edx
	movzwl	(%rdi), %eax
	cmpw	$96, %ax
	je	.L9445
	cmpw	$98, %ax
	je	.L9445
.L9444:
	movq	-6528(%rbp), %rax
	movq	%r15, -328(%rbp)
	movl	%edx, -288(%rbp)
	xorl	%ecx, %ecx
	movq	%rax, -344(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L9448
	cmpw	$99, %dx
	je	.L9448
	cmpw	$98, %dx
	je	.L9448
.L9447:
	movl	-288(%rbp), %r9d
	movl	%ecx, -312(%rbp)
	movl	$0, -308(%rbp)
	movl	$0, -332(%rbp)
	testl	%r9d, %r9d
	je	.L9449
	movq	%r12, -296(%rbp)
.L9449:
	movl	-312(%rbp), %ebx
	movq	%r12, -304(%rbp)
	testl	%ebx, %ebx
	je	.L9451
	movl	-336(%rbp), %r10d
	testl	%r10d, %r10d
	jne	.L9450
.L9451:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L9464:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23301
.L9461:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L9461
.L23301:
	testl	%edi, %edi
	je	.L9454
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L9463
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L9463
	movzbq	mode_size(%rbx), %rdi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rdi
	addq	%rax, %r15
	movq	%rdx, %r12
.L9463:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L9464
.L9454:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L9450
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23303
.L9472:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %r9d
	cmpl	%r14d, %r9d
	cmovae	-6532(%rbp), %ecx
	movl	%ecx, -6532(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L9472
.L23303:
	movl	-312(%rbp), %eax
	testl	%eax, %eax
	jne	.L9478
	movzwl	(%r8), %edx
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L9476
	cmpw	$54, %dx
	je	.L9476
	cmpw	$55, %dx
	je	.L9476
	cmpw	$58, %dx
	je	.L9476
	cmpw	$134, %dx
	je	.L9476
	cmpw	$56, %dx
	je	.L9476
	cmpw	$140, %dx
	je	.L9476
.L9478:
	movl	-336(%rbp), %eax
	testl	%eax, %eax
	jne	.L9450
	movq	-6528(%rbp), %r11
	movzwl	(%r11), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L9480
	cmpw	$54, %dx
	je	.L9480
	cmpw	$55, %dx
	je	.L9480
	cmpw	$58, %dx
	je	.L9480
	cmpw	$134, %dx
	je	.L9480
	cmpw	$56, %dx
	je	.L9480
	cmpw	$140, %dx
	je	.L9480
.L9450:
	cmpl	$1, %r14d
	jbe	.L9483
.L9534:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23306
.L9490:
	movslq	%ecx,%rsi
	movzbl	mode_size(%rsi), %edx
	cmpl	%r14d, %edx
	cmovae	-6532(%rbp), %ecx
	movl	%ecx, -6532(%rbp)
	movzbl	mode_wider_mode(%rsi), %ecx
	testl	%ecx, %ecx
	jne	.L9490
.L23306:
	movl	-6532(%rbp), %eax
	testl	%eax, %eax
	je	.L9483
	movslq	-6532(%rbp),%r15
	movq	%r15, %r14
	salq	$4, %r14
	addq	optab_table+240(%rip), %r14
	movl	8(%r14), %ebx
	cmpl	$1317, %ebx
	je	.L9492
	movl	-6532(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	jb	.L9492
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rdi
	movq	$0, -6544(%rbp)
	leaq	(%rdi,%rdi,4), %rcx
	cmpq	%rdx, -304(%rbp)
	movq	insn_data+16(,%rcx,8), %r12
	movq	%rdx, -5928(%rbp)
	movq	%r12, -2960(%rbp)
	leaq	-352(%rbp), %r12
	jb	.L9492
	movl	-288(%rbp), %ecx
.L9532:
	testl	%ecx, %ecx
	je	.L9496
	subq	%rdx, 56(%r12)
.L9496:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L9497
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L9498
	movl	-6532(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24594:
	movq	%rax, -6544(%rbp)
.L9497:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L9500
	movq	24(%r12), %rdi
	movl	-6532(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24595:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L25696
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L9506
	movzbl	mode_size(%r15), %r9d
	leal	7(%r9), %edx
	andl	$-8, %edx
.L9507:
	movq	cfun(%rip), %r11
	andl	$33554432, %esi
	movq	16(%r11), %r10
	leaq	8(%r10), %rdi
	movl	8(%r10), %ecx
	je	.L9508
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24596:
	movq	%r15, %rsi
	leal	(%rax,%rcx), %r8d
	salq	$4, %rsi
	movl	%r8d, (%rdi)
	addq	optab_table+384(%rip), %rsi
	movl	8(%rsi), %eax
	cmpl	$1317, %eax
	je	.L9510
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rcx
	movq	insn_data+24(,%rcx,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L9511
	movq	%r14, %rdi
	movl	-6532(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L25697
.L9511:
	leaq	(%rbx,%rbx,4), %r9
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r9,8)
.L24597:
	movq	%rax, %rdi
	call	emit_insn
.L9530:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L9531
	movq	-5928(%rbp), %r14
	addq	%r14, 56(%r12)
.L9531:
	movq	48(%r12), %rsi
	movq	-5928(%rbp), %rdx
	subq	-5928(%rbp), %rsi
	cmpq	%rdx, %rsi
	movq	%rsi, 48(%r12)
	jae	.L9532
.L9492:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L9534
.L9483:
	cmpq	$0, -304(%rbp)
	je	.L7871
.L25518:
	movl	$.LC0, %edi
	movl	$1503, %esi
	movl	$.LC10, %edx
	jmp	.L25086
.L25697:
	movl	-6532(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L9511
.L9510:
	movzbl	mode_size(%r15), %edi
	cmpl	%edx, %edi
	je	.L25698
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r10b
	movzbl	%r10b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L9518:
	movl	-6532(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%r11d, %r11d
	testq	%r11, %r11
	movq	%rax, %rbx
	je	.L9527
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L25699
.L9527:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L9530
.L25699:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L9527
.L25698:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L9518
	.p2align 6,,7
.L9508:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24596
.L9506:
	movzbl	mode_size(%r15), %ebx
	leal	1(%rbx), %edx
	andl	$-2, %edx
	jmp	.L9507
.L25696:
	movq	%rax, %rsi
	movq	-6544(%rbp), %rdi
	xorl	%eax, %eax
	call	*-2960(%rbp)
	jmp	.L24597
.L9500:
	movq	24(%r12), %rdi
	movl	-6532(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24595
.L9498:
	movl	-6532(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24594
.L9480:
	movq	-6528(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -344(%rbp)
	jmp	.L9450
.L9476:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -320(%rbp)
	jmp	.L9478
.L25529:
	movl	$.LC0, %edi
	movl	$1542, %esi
	movl	$.LC5, %edx
	jmp	.L25086
.L9448:
	movl	$1, %ecx
	jmp	.L9447
.L9445:
	movl	$1, %edx
	jmp	.L9444
.L9443:
	movl	$1, %ecx
	jmp	.L9442
.L9437:
	cmpq	$2, %r8
	ja	.L9421
	jmp	.L9438
.L25543:
	movl	$.LC0, %edi
	movl	$1648, %esi
.L25528:
	movl	$.LC9, %edx
	jmp	.L25086
.L25544:
	movl	$.LC0, %edi
	movl	$1646, %esi
	jmp	.L25528
.L25545:
	movl	$.LC0, %edi
	movl	$1644, %esi
	jmp	.L25528
.L9413:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L25700
.L9415:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L9408
.L25700:
	cmpq	16(%r14), %rax
	jne	.L9415
	jmp	.L9408
.L25690:
	cmpb	$51, 2(%r14)
	je	.L9406
	movq	8(%r14), %r12
	cmpw	$71, (%r12)
	je	.L25701
.L9406:
	cmpl	$66, %eax
	jne	.L9409
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L9408
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%rbx, 8(%rax)
	jmp	.L9408
.L25701:
	movq	8(%r12), %rsi
	movq	%r14, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L9407
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L9408
.L9407:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24593:
	movq	%rax, %r14
	jmp	.L9408
	.p2align 6,,7
.L9405:
	cmpq	$0, 16(%r14)
	je	.L25702
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L24593
	movq	8(%r14), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L9408
.L25702:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L24593
.L9400:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r15), %r12
	movq	%rax, %rbx
	je	.L25703
.L9402:
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, %r15
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L9395
.L25703:
	cmpq	16(%r15), %rax
	jne	.L9402
	jmp	.L9395
.L25689:
	cmpb	$51, 2(%r15)
	je	.L9393
	movq	8(%r15), %r12
	cmpw	$71, (%r12)
	je	.L25704
.L9393:
	cmpl	$66, %eax
	jne	.L9396
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r15), %rax
	movq	%rax, %rbx
	je	.L9395
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, %r15
	movq	%rbx, 8(%rax)
	jmp	.L9395
.L25704:
	movq	8(%r12), %rsi
	movq	%r15, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L9394
	movzbl	2(%r15), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r15
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L9395
.L9394:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24592:
	movq	%rax, %r15
	jmp	.L9395
	.p2align 6,,7
.L9392:
	cmpq	$0, 16(%r15)
	je	.L25705
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L24592
	movq	8(%r15), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L9395
.L25705:
	movq	8(%r15), %rdi
	call	copy_to_reg
	jmp	.L24592
.L9387:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L25706
.L9389:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -6520(%rbp)
	movq	%r12, 8(%rax)
	movq	-6520(%rbp), %rcx
	movq	%rbx, 16(%rcx)
	jmp	.L9382
.L25706:
	cmpq	16(%r13), %rax
	jne	.L9389
	jmp	.L9382
.L25688:
	jne	.L9383
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L9382
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -6520(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L9382
	.p2align 6,,7
.L9379:
	testq	%rcx, %rcx
	je	.L25707
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	movq	%rsi, -6520(%rbp)
	jne	.L9382
	movq	8(%r13), %r12
	movzbl	2(%r12), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rdi
	movq	%rdi, -6520(%rbp)
	jmp	.L9382
.L25707:
	movq	8(%r13), %rdi
	call	copy_to_reg
	movq	%rax, -6520(%rbp)
	jmp	.L9382
.L25546:
	movl	$.LC0, %edi
	movl	$1637, %esi
	jmp	.L25528
.L25547:
	movl	$.LC0, %edi
	movl	$1634, %esi
	jmp	.L25528
	.p2align 6,,7
.L9372:
	testq	%rcx, %rcx
	movl	$8, -6508(%rbp)
	je	.L9368
	movl	32(%rcx), %r11d
	movl	%r11d, -6508(%rbp)
	jmp	.L9368
	.p2align 6,,7
.L9371:
	cmpl	$7, %edx
	ja	.L9367
	jmp	.L9372
.L25687:
	movq	-2712(%rbp), %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	movl	$1, %ecx
	call	assign_temp
	movq	%rax, %r13
	jmp	.L9364
.L9360:
	movl	$.LC0, %edi
	movl	$7035, %esi
	jmp	.L25123
	.p2align 6,,7
.L25686:
	cmpw	$66, (%r13)
	jne	.L9357
	testb	$7, -2552(%rbp)
	je	.L9356
	jmp	.L9357
	.p2align 6,,7
.L9355:
	movq	-2544(%rbp), %rsi
	testq	%rsi, %rsi
	js	.L9353
	movq	-9552(%rbp), %rax
	movq	8(%rax), %r8
	movq	32(%r8), %rdi
	cmpb	$25, 16(%rdi)
	je	.L25708
.L9353:
	cmpl	$51, -2716(%rbp)
	je	.L25709
.L9572:
	leal	-1(%r14), %ebx
	cmpl	$2, %ebx
	ja	.L9573
	movq	-2552(%rbp), %rdx
	movl	-2564(%rbp), %esi
	cmpq	$-1, %rdx
	leaq	7(%rdx), %rdi
	cmovle	%rdi, %rdx
	xorl	%ecx, %ecx
	movq	-6504(%rbp), %rdi
	sarq	$3, %rdx
.L24599:
	movl	$1, %r8d
	call	adjust_address_1
	cmpq	-2952(%rbp), %rax
	movq	%rax, %rbx
	je	.L25710
.L9579:
	movq	-9552(%rbp), %rsi
	xorl	%edx, %edx
	movq	%rbx, %rdi
	call	set_mem_attributes
	movq	8(%rbx), %r11
	cmpw	$61, (%r11)
	je	.L25711
.L9580:
	movzbl	3(%rbx), %esi
	movl	%esi, %eax
	andb	$-9, %sil
	shrb	$3, %al
	andl	$1, %eax
	orl	-2568(%rbp), %eax
	andb	$1, %al
	salb	$3, %al
	orb	%al, %sil
	movb	%sil, 3(%rbx)
	movl	-2564(%rbp), %eax
	cmpl	%eax, -2716(%rbp)
	je	.L25059
	cmpl	$51, %eax
	je	.L25059
	cmpl	%r15d, %eax
	je	.L25059
	cmpl	$2, %r14d
	je	.L25059
	cmpl	$3, %r14d
	je	.L25059
	testq	%r13, %r13
	je	.L25712
.L11677:
	movl	-2516(%rbp), %edx
	movq	%r13, %rdi
	movq	%rbx, %rsi
.L25060:
	call	convert_move
	jmp	.L7871
.L25712:
	testl	%r15d, %r15d
	cmove	-2716(%rbp), %r15d
	movl	%r15d, %edi
	movl	%r15d, -2716(%rbp)
.L25538:
	call	gen_reg_rtx
	movq	%rax, %r13
	jmp	.L11677
	.p2align 6,,7
.L25059:
	movq	%rbx, %r13
	jmp	.L7871
.L25711:
	movq	16(%rbx), %rax
	leaq	8(%rbx), %rdx
	movl	$8, %esi
	testq	%rax, %rax
	je	.L9584
	movl	32(%rax), %esi
.L9584:
	movq	(%rdx), %rdi
	call	mark_reg_pointer
	jmp	.L9580
.L25710:
	movq	%rax, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	jmp	.L9579
	.p2align 6,,7
.L9573:
	movq	-2552(%rbp), %rdx
	movl	-2564(%rbp), %esi
	movl	$1, %ecx
	movq	-6504(%rbp), %rdi
	cmpq	$-1, %rdx
	leaq	7(%rdx), %r10
	cmovle	%r10, %rdx
	sarq	$3, %rdx
	jmp	.L24599
.L25709:
	movl	$51, -2564(%rbp)
	jmp	.L9572
.L25708:
	call	compare_tree_int
	testl	%eax, %eax
	je	.L9353
	jmp	.L9354
	.p2align 6,,7
.L25683:
	cmpq	$0, -2552(%rbp)
	jne	.L9352
	movq	-6504(%rbp), %r12
	movzbq	2(%r12), %r14
	movzwq	mode_bitsize(%r14,%r14), %r13
	cmpq	%r13, -2544(%rbp)
	jne	.L9352
	movq	-6504(%rbp), %r13
	jmp	.L7871
.L9352:
	movl	$.LC0, %edi
	movl	$6987, %esi
	jmp	.L25123
	.p2align 6,,7
.L25682:
	cmpq	$0, -2552(%rbp)
	jne	.L9347
	movq	-2560(%rbp), %rdi
	testq	%rdi, %rdi
	jne	.L25713
.L9347:
	cmpw	$66, %dx
	jne	.L9348
	movl	-2568(%rbp), %esi
	testl	%esi, %esi
	je	.L9348
	movq	-6504(%rbp), %rax
	testb	$8, 3(%rax)
	jne	.L9348
	movq	-2952(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.L25714
.L9349:
	movq	-6504(%rbp), %rdi
	orb	$8, 3(%rdi)
	jmp	.L9348
.L25714:
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -6504(%rbp)
	movzwl	(%rax), %edx
	jmp	.L9349
	.p2align 6,,7
.L25713:
	movq	%r12, %rsi
	call	is_aligning_offset
	testl	%eax, %eax
	jne	.L25715
	movq	-6504(%rbp), %r11
	movzwl	(%r11), %edx
	jmp	.L9347
.L25715:
	movq	-6504(%rbp), %rdi
	movl	$128, %esi
	call	set_mem_align
	movq	-6504(%rbp), %rcx
	movzwl	(%rcx), %edx
	jmp	.L9347
	.p2align 6,,7
.L25681:
	xorl	%edx, %edx
	xorl	%esi, %esi
	movl	$1, %ecx
	call	expand_expr
	movq	-6504(%rbp), %r11
	movq	%rax, -6496(%rbp)
	movzwl	(%r11), %edx
	cmpw	$61, %dx
	je	.L9335
	cmpw	$63, %dx
	je	.L9335
	cmpw	$65, %dx
	je	.L9335
	cmpw	$70, %dx
	je	.L9335
.L9334:
	cmpw	$66, %dx
	jne	.L25716
	movq	-6496(%rbp), %rcx
	movl	ptr_mode(%rip), %edi
	movzbl	2(%rcx), %esi
	cmpl	%edi, %esi
	je	.L9341
	movq	%rcx, %rsi
	xorl	%edx, %edx
	call	convert_to_mode
	movq	%rax, -6496(%rbp)
.L9341:
	movq	-6504(%rbp), %rbx
	movl	(%rbx), %eax
	andl	$16777215, %eax
	cmpl	$3342402, %eax
	je	.L25717
.L9342:
	movq	-2560(%rbp), %rdi
	call	highest_pow2_factor
	movq	-6496(%rbp), %rsi
	movq	-6504(%rbp), %rdi
	movq	%rax, %rdx
	call	offset_address
	movq	%rax, -6504(%rbp)
	jmp	.L9333
.L25717:
	movq	8(%rbx), %rdi
	cmpb	$0, 2(%rdi)
	je	.L9342
	movq	-2544(%rbp), %rdx
	testq	%rdx, %rdx
	je	.L9342
	movq	-2552(%rbp), %rax
	movq	%rdx, %r9
	cqto
	idivq	%r9
	testq	%rdx, %rdx
	jne	.L9342
	movl	-2564(%rbp), %edi
	call	get_mode_alignment
	movq	-2544(%rbp), %rdx
	mov	%eax, %r8d
	movq	%rdx, %rax
	cqto
	idivq	%r8
	testq	%rdx, %rdx
	jne	.L9342
	movl	-2564(%rbp), %edi
	call	get_mode_alignment
	movq	16(%rbx), %rdx
	testq	%rdx, %rdx
	je	.L9343
	cmpl	%eax, 32(%rdx)
.L24591:
	jne	.L9342
	movq	-2552(%rbp), %rdx
	movl	-2564(%rbp), %esi
	movl	$1, %ecx
	movq	-6504(%rbp), %rdi
	movl	$1, %r8d
	cmpq	$-1, %rdx
	leaq	7(%rdx), %rbx
	cmovle	%rbx, %rdx
	sarq	$3, %rdx
	call	adjust_address_1
	movq	$0, -2552(%rbp)
	movq	%rax, -6504(%rbp)
	jmp	.L9342
.L9343:
	cmpl	$8, %eax
	jmp	.L24591
.L25716:
	movl	$.LC0, %edi
	movl	$6938, %esi
	jmp	.L25123
	.p2align 6,,7
.L9335:
	movq	-9552(%rbp), %rdx
	movq	32(%rdx), %rdi
	cmpb	$118, 16(%rdi)
	je	.L25718
	movq	8(%r12), %rdi
	movl	$1, %esi
	xorl	%edx, %edx
	movzbl	17(%rdi), %r8d
	movzbl	62(%rdi), %ecx
	movl	%r8d, %r10d
	shrb	$5, %cl
	shrb	$3, %r8b
	shrb	$4, %r10b
	andl	$1, %r8d
	andl	$1, %ecx
	andl	%r10d, %esi
	addl	%r8d, %r8d
	sall	$2, %ecx
	orl	%r8d, %esi
	orl	%ecx, %esi
	cmpb	$20, 16(%rdi)
	je	.L25719
.L9339:
	leal	0(,%rdx,8), %r11d
	orl	%r11d, %esi
	orl	$1, %esi
	call	build_qualified_type
	movl	$1, %ecx
	movl	$1, %edx
	movq	%rax, %rdi
	movl	$1, %esi
	call	assign_temp
	movq	-6504(%rbp), %rsi
	movq	%rax, %rbx
	movq	%rax, %rdi
	call	emit_move_insn
	movzwl	(%rbx), %edx
	movq	%rbx, -6504(%rbp)
	jmp	.L9334
.L25719:
	cmpq	$0, 8(%rdi)
	movl	$1, %eax
	cmovne	%eax, %edx
	jmp	.L9339
.L25718:
	call	put_var_into_stack
	movq	-9552(%rbp), %rax
	movq	32(%rax), %rbx
	movq	48(%rbx), %r9
	movzwl	(%r9), %edx
	movq	%r9, -6504(%rbp)
	jmp	.L9334
	.p2align 6,,7
.L9330:
	movq	8(%r12), %r10
	movzbl	61(%r10), %esi
	shrb	$1, %sil
	movzbl	%sil, %edi
	cmpl	$51, %edi
	je	.L9331
	cmpq	$0, -2560(%rbp)
	je	.L25720
.L9331:
	movq	-2952(%rbp), %rsi
	call	force_const_mem
	movq	%rax, %rdi
	call	validize_mem
.L24590:
	movq	%rax, -6504(%rbp)
	jmp	.L9329
.L25720:
	movq	-2952(%rbp), %rsi
	call	force_reg
	jmp	.L24590
.L25680:
	movq	32(%rax), %rcx
	cmpb	$25, 16(%rcx)
	je	.L9325
	movq	%r13, %rsi
	jmp	.L9326
.L25679:
	movl	$.LC0, %edi
	movl	$6877, %esi
	jmp	.L25123
	.p2align 6,,7
.L25678:
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	host_integerp
	testl	%eax, %eax
	je	.L9313
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	tree_low_cst
	movq	$0, -2560(%rbp)
	movq	%rax, -2552(%rbp)
	jmp	.L9314
	.p2align 6,,7
.L9303:
	movq	32(%rdx), %rdx
	jmp	.L9299
	.p2align 6,,7
.L9300:
	movq	40(%rdx), %rdx
	jmp	.L9299
	.p2align 6,,7
.L9296:
	movq	8(%rcx), %rbx
	cmpq	%rsi, 128(%rbx)
	jne	.L9293
	testq	%r8, %r8
	je	.L9297
	movq	%rdi, (%r8)
.L9297:
	movl	$41, %edi
	call	build1
	movq	%rax, %rcx
	jmp	.L9283
	.p2align 6,,7
.L9289:
	movq	32(%rcx), %rcx
	jmp	.L9285
	.p2align 6,,7
.L9286:
	movq	40(%rcx), %rcx
	jmp	.L9285
.L25677:
	testq	%r8, %r8
	je	.L9283
	movq	%rdi, (%r8)
	jmp	.L9283
.L9271:
	movq	placeholder_list(%rip), %rdi
	jmp	.L9272
.L9270:
	leal	-116(%rdx), %r8d
	cmpb	$1, %r8b
	jbe	.L9257
	leal	-114(%rdx), %esi
	cmpb	$1, %sil
	ja	.L9254
	movq	32(%r12), %r11
	movq	8(%r12), %r9
	movq	8(%r11), %rdx
	movzbl	61(%r9), %r10d
	movzbl	61(%rdx), %edi
	andb	$-2, %r10b
	andb	$-2, %dil
	cmpb	%dil, %r10b
	jne	.L9254
.L9257:
	testb	$8, 17(%r12)
	je	.L9311
	movl	$1, -2568(%rbp)
.L9311:
	movq	32(%r12), %r12
	jmp	.L9312
.L25676:
	movq	32(%r12), %rax
	movq	40(%r12), %rbx
	xorl	%r8d, %r8d
	movq	%rax, -2944(%rbp)
	movq	8(%rax), %rdx
	movq	24(%rdx), %rax
	testq	%rax, %rax
	je	.L9265
	movq	104(%rax), %r8
.L9265:
	movq	8(%rdx), %r10
	testq	%r8, %r8
	movq	40(%r10), %rdi
	movq	%rdi, -6488(%rbp)
	jne	.L25721
.L9266:
	testb	$2, 17(%rbx)
	je	.L25722
.L9267:
	movq	-6488(%rbp), %rax
	testb	$2, 17(%rax)
	je	.L25723
.L9268:
	movq	sizetype_tab(%rip), %rdi
	movq	%rbx, %rsi
	call	convert
	movq	-6488(%rbp), %rdx
	movl	$61, %edi
	movq	%rax, %rsi
	call	size_binop
	movq	-6480(%rbp), %rsi
	movl	$59, %edi
	movq	%rax, %rdx
	call	size_binop
	movq	%rax, -6480(%rbp)
	jmp	.L9257
.L25723:
	movq	%rax, %rdi
	call	contains_placeholder_p
	testl	%eax, %eax
	je	.L9268
	movq	sizetype_tab(%rip), %rsi
	movq	-6488(%rbp), %rdx
	movl	$58, %edi
	movq	-2944(%rbp), %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, -6488(%rbp)
	jmp	.L9268
.L25722:
	movq	%rbx, %rdi
	call	contains_placeholder_p
	testl	%eax, %eax
	je	.L9267
	movq	8(%rbx), %rsi
	movq	%rbx, %rdx
	movl	$58, %edi
	movq	%r12, %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %rbx
	jmp	.L9267
.L25721:
	movq	%r8, %rdi
	movq	%r8, -9592(%rbp)
	call	integer_zerop
	movq	-9592(%rbp), %r8
	testl	%eax, %eax
	jne	.L9266
	movq	8(%rbx), %rsi
	movq	%rbx, %rdx
	movl	$60, %edi
	movq	%r8, %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	movq	%rax, %rbx
	jmp	.L9266
	.p2align 6,,7
.L25675:
	movq	40(%r12), %rdx
	movq	%rdx, -2936(%rbp)
	movq	88(%rdx), %rbx
	testq	%rbx, %rbx
	je	.L9254
	testb	$2, 17(%rbx)
	je	.L25724
.L9260:
	movq	-6480(%rbp), %rsi
	movq	%rbx, %rdx
	movl	$59, %edi
	call	size_binop
	movq	-2936(%rbp), %rbx
	movq	-6472(%rbp), %rsi
	movq	%rax, -6480(%rbp)
	movl	$59, %edi
	movq	160(%rbx), %rdx
.L24589:
	call	size_binop
	movq	%rax, -6472(%rbp)
	jmp	.L9257
.L25724:
	movq	%rbx, %rdi
	call	contains_placeholder_p
	testl	%eax, %eax
	je	.L9260
	movq	sizetype_tab(%rip), %rsi
	movq	%rbx, %rdx
	movl	$58, %edi
	movq	%r12, %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %rbx
	jmp	.L9260
	.p2align 6,,7
.L25674:
	movq	-6472(%rbp), %rsi
	movq	48(%r12), %rdx
	movl	$59, %edi
	jmp	.L24589
.L25673:
	movq	%rbx, %rdi
	movl	$1, %esi
	call	host_integerp
	testl	%eax, %eax
	jne	.L9251
	movl	$51, -6460(%rbp)
	movq	$-1, -2544(%rbp)
	jmp	.L9312
.L9251:
	movq	%rbx, %rdi
	movl	$1, %esi
	call	tree_low_cst
	movq	%rax, -2544(%rbp)
	jmp	.L9312
.L25672:
	movq	8(%rsi), %r11
	movq	32(%r11), %rbx
	jmp	.L9245
.L25671:
	movq	-9552(%rbp), %rdx
	movq	40(%rdx), %rbx
	movzbl	17(%rdx), %eax
.L24588:
	shrb	$5, %al
	andl	$1, %eax
	movl	%eax, -2516(%rbp)
	jmp	.L9245
.L25670:
	movq	40(%r12), %rax
	testb	$16, 49(%rax)
	movq	40(%rax), %rbx
	jne	.L9244
	movzbl	48(%rax), %r9d
	movl	%r9d, -6460(%rbp)
.L9244:
	movzbl	17(%rax), %eax
	jmp	.L24588
.L25669:
	movq	-9552(%rbp), %rcx
	movq	32(%rcx), %rax
	cmpb	$46, 16(%rax)
	jne	.L9232
	cmpq	$0, 24(%rax)
	jne	.L9232
	movq	40(%rax), %rbx
	testq	%rbx, %rbx
	je	.L9232
	movq	40(%rcx), %r12
	movq	%r12, -9576(%rbp)
.L9242:
	movq	-9576(%rbp), %rax
	cmpq	%rax, 24(%rbx)
	je	.L25725
.L9235:
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L9242
	jmp	.L9232
.L25725:
	testb	$16, 49(%rax)
	je	.L9238
	movzbq	48(%rax), %rax
	cmpl	$1, mode_class(,%rax,4)
	jne	.L9235
	cmpw	$64, mode_bitsize(%rax,%rax)
	ja	.L9235
.L9238:
	movq	32(%rbx), %rdi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	movq	%r13, %rsi
	call	expand_expr
	movq	24(%rbx), %rdx
	movq	%rax, %r14
	testb	$16, 49(%rdx)
	je	.L24238
	movq	8(%rdx), %rbx
	movq	40(%rdx), %rdi
	movzbl	61(%rbx), %r8d
	movq	32(%rdi), %rcx
	shrb	$1, %r8b
	testb	$32, 17(%rbx)
	movzbl	%r8b, %r12d
	jne	.L24467
	movslq	%r12d,%r10
	xorl	%esi, %esi
	movzwq	mode_bitsize(%r10,%r10), %rdi
	subq	%rcx, %rdi
	call	build_int_2_wide
	xorl	%r9d, %r9d
	movq	%r13, %r8
	movl	$82, %edi
	movl	%r12d, %esi
	movq	%r14, %rdx
	movq	%rax, %rcx
	movq	%rax, %r15
	call	expand_shift
	xorl	%r9d, %r9d
	movq	%r13, %r8
	movl	$83, %edi
	movl	%r12d, %esi
	movq	%rax, %rdx
	movq	%r15, %rcx
.L25076:
	call	expand_shift
	jmp	.L23191
.L24467:
	movl	$1, %esi
	xorl	%edi, %edi
	salq	%cl, %rsi
	decq	%rsi
	call	gen_rtx_CONST_INT
	movq	%r13, %rcx
	movq	%r14, %rsi
	movl	%r12d, %edi
	movq	%rax, %rdx
	call	expand_and
	jmp	.L23191
.L24238:
	movq	%rax, %r13
	jmp	.L7871
	.p2align 6,,7
.L25668:
	movq	104(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L9231
	movzbl	16(%rbx), %eax
	testb	%al, %al
	je	.L9231
	movq	-6456(%rbp), %r11
	cmpb	$25, 16(%r11)
	jne	.L9231
	cmpb	$46, %al
	je	.L25726
	cmpb	$29, %al
	jne	.L9231
	movslq	32(%rbx),%rsi
	movq	-6456(%rbp), %rdi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L9231
	movq	8(%rbx), %rcx
	movq	8(%rcx), %rsi
	movzbl	61(%rsi), %r9d
	shrb	$1, %r9b
	movzbl	%r9b, %esi
	movslq	%esi,%rax
	cmpl	$1, mode_class(,%rax,4)
	jne	.L9231
	cmpb	$1, mode_size(%rax)
	jne	.L9231
	movq	-6456(%rbp), %r15
	movq	32(%r15), %r14
	addq	40(%rbx), %r14
	movsbq	(%r14),%rdi
	jmp	.L25073
.L25726:
	movq	40(%rbx), %rbx
.L9219:
	testq	%rbx, %rbx
	je	.L9231
	movq	24(%rbx), %rdi
	movq	-6456(%rbp), %rsi
	call	tree_int_cst_equal
	testl	%eax, %eax
	jne	.L25727
	movq	(%rbx), %rbx
	jmp	.L9219
.L25727:
	movq	32(%rbx), %rdi
	testb	$1, 17(%rdi)
	jne	.L9231
.L25100:
	call	fold
.L25097:
	movq	%rax, %rdi
	movq	%r13, %rsi
	movl	%r15d, %edx
.L25099:
	movl	%r14d, %ecx
	jmp	.L25083
.L25667:
	movq	-6456(%rbp), %rbx
	cmpb	$25, 16(%rbx)
	jne	.L9207
	movq	-9552(%rbp), %r8
	movq	32(%r8), %rcx
	movq	40(%rcx), %rdi
	call	list_length
	movq	%rbx, %rdi
	movslq	%eax,%rsi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L9207
	movq	-9552(%rbp), %r10
	movq	32(%rbx), %rax
	movq	32(%r10), %rdi
	movq	40(%rdi), %rdx
	testq	%rdx, %rdx
	je	.L9231
	testq	%rax, %rax
	je	.L9209
.L9213:
	movq	(%rdx), %rdx
	decq	%rax
	testq	%rdx, %rdx
	je	.L9231
	testq	%rax, %rax
	jne	.L9213
.L9209:
	testq	%rdx, %rdx
	je	.L9231
	movq	32(%rdx), %rdi
	jmp	.L25100
	.p2align 6,,7
.L25666:
	movq	-6456(%rbp), %r9
	cmpb	$25, 16(%r9)
	jne	.L9206
	movslq	32(%rbx),%rsi
	movq	-6456(%rbp), %rdi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L9206
	movslq	-2716(%rbp),%rax
	cmpl	$1, mode_class(,%rax,4)
	jne	.L9206
	cmpb	$1, mode_size(%rax)
	jne	.L9206
	movq	-6456(%rbp), %r13
	movq	32(%r13), %rax
	jmp	.L25072
	.p2align 6,,7
.L25665:
	movq	sizetype_tab(%rip), %rdi
	movq	%rbx, %rsi
	call	convert
	movq	-6456(%rbp), %rdi
	movq	%rax, %rsi
	call	size_diffop
	movq	%rax, -6456(%rbp)
	jmp	.L9205
.L9203:
	movq	global_trees+88(%rip), %rbx
	jmp	.L9204
.L25664:
	movl	$.LC0, %edi
	movl	$6703, %esi
	jmp	.L25123
	.p2align 6,,7
.L9591:
	call	get_last_insn
	movl	%r14d, %ecx
	movl	%r15d, %edx
	movq	-9552(%rbp), %r8
	movq	%rax, -3008(%rbp)
	movq	%r13, %rsi
	movq	32(%r8), %rdi
	call	expand_expr
	cmpw	$61, (%rax)
	movq	%rax, %rbx
	je	.L25728
	movzbl	2(%rax), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	emit_move_insn
.L24600:
	movq	%rax, %r12
.L9595:
	movq	-9552(%rbp), %rcx
	movq	40(%rcx), %rdi
	movq	144(%rdi), %rax
	testq	%rax, %rax
	je	.L25729
.L9596:
	movq	-9552(%rbp), %rdx
	movq	8(%rax), %r14
	xorl	%esi, %esi
	movq	48(%rdx), %rdi
	call	tree_low_cst
	movq	%r14, %rdi
	movq	%rax, %rsi
	call	plus_constant_wide
	movq	56(%r12), %rcx
	movl	$30, %esi
	movq	8(%rax), %rdx
	movl	$3, %edi
	call	gen_rtx_fmt_ee
	movq	%rax, 56(%r12)
	jmp	.L7871
.L25729:
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-9552(%rbp), %r15
	movq	40(%r15), %r9
	movq	144(%r9), %rax
	jmp	.L9596
.L25728:
	movq	%rax, %r13
	call	get_last_insn
	cmpq	-3008(%rbp), %rax
	movq	%rax, %r12
	je	.L25730
	movzwq	(%rax), %r14
	cmpb	$105, rtx_class(%r14)
	je	.L9595
	movq	%rax, %rdi
	call	prev_nonnote_insn
	jmp	.L24600
.L25730:
	movl	$.LC0, %edi
	movl	$7128, %esi
	jmp	.L25123
	.p2align 6,,7
.L8966:
	movl	-6220(%rbp), %r10d
	testl	%r10d, %r10d
	je	.L8967
	movq	-9552(%rbp), %r13
	movq	40(%r13), %rbx
	testq	%rbx, %rbx
	jne	.L8972
.L23270:
	movq	%rcx, %r13
	jmp	.L7871
.L8972:
	movq	32(%rbx), %rdi
	movq	const_int_rtx+512(%rip), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L8972
	movq	const_int_rtx+512(%rip), %rcx
	jmp	.L23270
.L8967:
	movq	-9552(%rbp), %rax
	movzbl	18(%rax), %esi
	testb	$4, %sil
	je	.L8976
	cmpl	$51, -2716(%rbp)
	je	.L25731
.L8977:
	movq	-9552(%rbp), %rsi
	testb	$4, 17(%rsi)
	je	.L25732
.L8975:
	movq	-9552(%rbp), %rdi
	movl	$1, %esi
	call	output_constant_def
	leal	-1(%r14), %edx
	cmpl	$2, %edx
	movq	%rax, %r13
	jbe	.L7871
	movq	%rax, %rdi
	call	validize_mem
	jmp	.L23191
.L25732:
	movq	-2712(%rbp), %r8
	movl	$1, %esi
	movq	40(%r8), %rdi
	call	host_integerp
	testl	%eax, %eax
	jne	.L25733
.L8976:
	cmpl	$3, %r14d
	je	.L25734
.L8974:
	testq	%r13, %r13
	je	.L9115
	movq	-9552(%rbp), %r8
	xorl	%r14d, %r14d
	movq	%r13, %r12
	movq	%r8, -6448(%rbp)
	movq	8(%r8), %rax
	testq	%rax, %rax
	je	.L9118
	movq	32(%rax), %rdx
	testq	%rdx, %rdx
	je	.L9118
	cmpb	$25, 16(%rdx)
	je	.L9118
	cmpb	$18, 16(%rax)
	je	.L25735
.L9119:
	cmpb	$51, 2(%r13)
	je	.L9195
.L9118:
	movzwl	(%r13), %eax
	cmpw	$66, %ax
	movl	%eax, %ecx
	je	.L25736
.L9116:
	cmpw	$63, %cx
	je	.L25737
.L9121:
	movl	$1, %eax
	testl	%eax, %eax
	jne	.L25738
	movq	-9552(%rbp), %rbx
	movzbl	16(%rbx), %r11d
	movl	%r11d, %edx
	movzbl	%dl, %r10d 
	movsbl	tree_code_type(%r10),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L9129
	mov	%eax, %r15d
	jmp	*.L9189(,%r15,8)
	.section	.rodata
	.align 8
	.align 4
.L9189:
	.quad	.L9143
	.quad	.L9145
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9145
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9195
	.quad	.L9130
	.quad	.L9148
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9148
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9129
	.quad	.L9135
	.text
.L9130:
	movq	-9552(%rbp), %r9
	movq	144(%r9), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %r14
	jne	.L24252
	xorl	%r14d, %r14d
.L9129:
	testq	%r14, %r14
	movl	$1, %ebx
	je	.L9120
.L24252:
	cmpw	$63, (%r14)
	je	.L25739
.L9192:
	movq	%r12, %rdi
	movq	%r14, %rsi
	xorl	%ebx, %ebx
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L9120
	cmpw	$66, (%r12)
	je	.L25740
.L9195:
	movl	$1, %ebx
.L9120:
	testl	%ebx, %ebx
	je	.L9115
	cmpw	$39, (%r13)
	je	.L9115
.L9114:
	movq	-9552(%rbp), %r12
	movq	8(%r12), %rdi
	call	int_size_in_bytes
	xorl	%edx, %edx
	movq	%r13, %rsi
	movq	%rax, %rcx
	movq	%r12, %rdi
	call	store_constructor
	jmp	.L7871
.L9115:
	movq	-2712(%rbp), %rbx
	movl	$1, %esi
	xorl	%edx, %edx
	movzbl	17(%rbx), %r12d
	movzbl	62(%rbx), %r13d
	movl	%r12d, %r14d
	shrb	$5, %r13b
	shrb	$3, %r12b
	shrb	$4, %r14b
	andl	$1, %r12d
	andl	$1, %r13d
	andl	%r14d, %esi
	addl	%r12d, %r12d
	sall	$2, %r13d
	orl	%r12d, %esi
	orl	%r13d, %esi
	cmpb	$20, 16(%rbx)
	je	.L25741
.L9197:
	movq	-9552(%rbp), %r15
	leal	0(,%rdx,8), %r9d
	movq	-2712(%rbp), %rdi
	orl	%r9d, %esi
	movzbl	17(%r15), %ebx
	shrb	$4, %bl
	andl	$1, %ebx
	orl	%ebx, %esi
	call	build_qualified_type
	movl	$1, %ecx
	movq	-9552(%rbp), %rsi
	movq	%rax, %rdi
	movzbl	17(%rsi), %edx
	xorl	%esi, %esi
	shrb	$2, %dl
	andl	$1, %edx
	call	assign_temp
	movq	%rax, %r13
	jmp	.L9114
.L25741:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %edx
	jmp	.L9197
.L25740:
	cmpw	$66, (%r14)
	jne	.L9195
	xorl	%esi, %esi
	movq	%r14, %rdi
	movq	%r12, %rdx
	movl	$rtx_addr_varies_p, %ecx
	call	true_dependence
	testl	%eax, %eax
	jne	.L9120
	jmp	.L9195
.L25739:
	movq	8(%r14), %r14
	cmpw	$61, (%r14)
	jne	.L9192
	cmpl	$52, 8(%r14)
	ja	.L9192
.L24466:
	xorl	%ebx, %ebx
	jmp	.L9120
.L9143:
	movq	%r12, %rdi
	movq	-9552(%rbp), %r12
	movq	32(%r12), %rsi
.L24587:
	xorl	%edx, %edx
	call	safe_from_p
	movl	%eax, %ebx
	jmp	.L9120
.L9145:
	movq	-9552(%rbp), %rdx
	movq	%r12, %rdi
	xorl	%ebx, %ebx
	movq	32(%rdx), %rsi
	xorl	%edx, %edx
	call	safe_from_p
	testl	%eax, %eax
	je	.L9120
	movq	-9552(%rbp), %r8
	movq	%r12, %rdi
	movq	40(%r8), %rsi
.L25088:
	xorl	%edx, %edx
	call	safe_from_p
	testl	%eax, %eax
	je	.L9120
	jmp	.L9195
.L9148:
	movzbl	%r11b, %eax
	subl	$41, %eax
	cmpl	$80, %eax
	ja	.L9149
	mov	%eax, %esi
	jmp	*.L9180(,%rsi,8)
	.section	.rodata
	.align 8
	.align 4
.L9180:
	.quad	.L9159
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9177
	.quad	.L9165
	.quad	.L23173
	.quad	.L9171
	.quad	.L9172
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9149
	.quad	.L9173
	.quad	.L9149
	.quad	.L9169
	.quad	.L9150
	.text
.L9150:
	movq	-9552(%rbp), %r10
	movq	32(%r10), %rdi
	call	staticp
	testl	%eax, %eax
	jne	.L9195
	movq	-9552(%rbp), %rbx
	testb	$4, 18(%rbx)
	jne	.L9195
	movq	32(%rbx), %rsi
	xorl	%edx, %edx
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L9195
	movq	-9552(%rbp), %rbx
	movq	32(%rbx), %rsi
	movq	%rsi, -6448(%rbp)
	movzbq	16(%rsi), %r11
	cmpb	$100, tree_code_type(%r11)
	je	.L25742
.L9149:
	testq	%r14, %r14
	jne	.L24252
	movq	-6448(%rbp), %rdx
	xorl	%ebx, %ebx
	movzbl	16(%rdx), %edi
	call	first_rtl_op
	cmpl	%eax, %ebx
	movl	%eax, %r15d
	jge	.L23287
.L9187:
	movq	-6448(%rbp), %r10
	movslq	%ebx,%r11
	movq	32(%r10,%r11,8), %rsi
	testq	%rsi, %rsi
	jne	.L25743
.L9184:
	incl	%ebx
	cmpl	%r15d, %ebx
	jl	.L9187
.L23287:
	movq	-6448(%rbp), %rcx
	cmpb	$-110, 16(%rcx)
	jbe	.L9129
	movq	%r12, %rdi
	movq	%rcx, %rsi
	xorl	%ebx, %ebx
	call	*lang_hooks+80(%rip)
	testl	%eax, %eax
	je	.L9120
	jmp	.L9129
.L25743:
	xorl	%edx, %edx
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L9184
	jmp	.L24466
.L25742:
	movq	144(%rsi), %rax
	testq	%rax, %rax
	je	.L24466
	cmpw	$66, (%rax)
	jne	.L24466
	movq	8(%rax), %r14
	jmp	.L9149
.L9159:
	cmpw	$66, (%r12)
	jne	.L9149
	movq	-9552(%rbp), %rdi
	call	get_alias_set
	xorl	%edi, %edi
	movq	%rax, %rsi
	movq	16(%r12), %rax
	testq	%rax, %rax
	je	.L9164
	movq	(%rax), %rdi
.L9164:
	call	alias_sets_conflict_p
	xorl	%ebx, %ebx
	testl	%eax, %eax
	jne	.L9120
	jmp	.L9149
.L9177:
	movq	-9552(%rbp), %rax
	movq	%r12, %rdi
	movq	40(%rax), %rsi
	jmp	.L24587
.L9165:
	movzwl	(%r12), %eax
	cmpw	$61, %ax
	je	.L25744
.L9168:
	cmpw	$66, %ax
	jne	.L9149
	jmp	.L24466
.L25744:
	cmpl	$52, 8(%r12)
	jbe	.L24466
	jmp	.L9168
.L23173:
	movl	$.LC0, %edi
	movl	$5724, %esi
	movl	$.LC18, %edx
	jmp	.L25086
.L9171:
	movq	-9552(%rbp), %r9
	movq	48(%r9), %r14
	jmp	.L9149
.L9172:
	movq	-9552(%rbp), %rcx
	movq	%r12, %rdi
	movq	32(%rcx), %rsi
	jmp	.L24587
.L9173:
	movq	-9552(%rbp), %rsi
	movq	48(%rsi), %r14
	testq	%r14, %r14
	jne	.L24252
	movzbl	18(%rsi), %eax
	movl	$1, %ebx
	testb	$16, %al
	jne	.L9120
	movq	-9552(%rbp), %r8
	orb	$16, %al
	xorl	%edx, %edx
	movq	%r12, %rdi
	movq	32(%r8), %rsi
	movb	%al, 18(%r8)
	call	safe_from_p
	testl	%eax, %eax
	jne	.L9176
	movq	-9552(%rbp), %rdi
	andb	$-17, 18(%rdi)
	jmp	.L24466
.L9176:
	movq	-9552(%rbp), %rdi
	movq	save_expr_list.2(%rip), %rdx
	xorl	%esi, %esi
	call	tree_cons
	movq	%rax, save_expr_list.2(%rip)
	jmp	.L9195
.L9169:
	movq	-9552(%rbp), %r14
	cmpq	$0, 32(%r14)
	jne	.L24466
	movq	-9552(%rbp), %r15
	movq	40(%r15), %r14
	jmp	.L9149
.L9135:
	cmpb	$2, %r11b
	je	.L25745
	xorl	%ebx, %ebx
	testb	%r11b, %r11b
	sete	%bl
	jmp	.L9120
.L25745:
	movq	-9552(%rbp), %rdi
	xorl	%ebx, %ebx
	movq	32(%rdi), %rsi
	testq	%rsi, %rsi
	jne	.L25746
.L9138:
	movq	-9552(%rbp), %rax
	movq	%r12, %rdi
	movq	(%rax), %rsi
	testq	%rsi, %rsi
	jne	.L25088
	jmp	.L9195
.L25746:
	xorl	%edx, %edx
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L9120
	jmp	.L9138
.L25738:
	movq	-9552(%rbp), %rsi
	xorl	%edx, %edx
	movq	%r12, %rdi
	movq	$0, save_expr_list.2(%rip)
	call	safe_from_p
	movq	save_expr_list.2(%rip), %rdx
	movl	%eax, %ebx
	testq	%rdx, %rdx
	je	.L9120
.L9128:
	movq	24(%rdx), %r14
	andb	$-17, 18(%r14)
	movq	(%rdx), %rdx
	testq	%rdx, %rdx
	jne	.L9128
	jmp	.L9120
.L25737:
	movq	8(%r13), %r12
	cmpw	$61, (%r12)
	jne	.L9121
	cmpl	$52, 8(%r12)
	jbe	.L24466
	jmp	.L9121
.L25736:
	movq	8(%r13), %rax
	movq	global_rtl+72(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L9195
	cmpw	$75, (%rax)
	jne	.L9116
	cmpq	%rdx, 8(%rax)
	jne	.L9116
	jmp	.L9195
.L25735:
	movq	112(%rax), %rax
	testq	%rax, %rax
	je	.L9119
	cmpb	$25, 16(%rax)
	jne	.L9119
	jmp	.L9118
	.p2align 6,,7
.L25734:
	movq	-9552(%rbp), %rsi
	testb	$2, 17(%rsi)
	je	.L8974
	jmp	.L8975
.L25733:
	movq	-2712(%rbp), %r10
	movl	$1, %esi
	xorl	%r15d, %r15d
	movq	40(%r10), %rdi
	call	tree_low_cst
	movl	$17, %esi
	movq	%rax, %r12
.L9070:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23277
.L9067:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L9067
.L23277:
	testl	%edi, %edi
	je	.L9060
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L9069
	call	get_mode_alignment
	movl	$128, %r9d
	cmpl	%eax, %r9d
	jb	.L9069
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L9069:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L9070
.L9060:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L9073
	movq	ix86_cost(%rip), %r8
	mov	40(%r8), %edx
	cmpq	%rdx, %r15
	jb	.L8976
.L9074:
	movq	-9552(%rbp), %rdx
	movzbl	16(%rdx), %eax
	cmpb	$46, %al
	je	.L25747
	movzbl	%al, %eax
	cmpl	$28, %eax
	je	.L9094
	cmpl	$28, %eax
	ja	.L9111
	cmpl	$26, %eax
	je	.L9093
	cmpl	$26, %eax
	ja	.L9091
	cmpl	$25, %eax
	je	.L9090
.L9109:
	xorl	%ebx, %ebx
.L9089:
	movl	%ebx, %eax
.L9077:
	testl	%eax, %eax
	je	.L8975
	jmp	.L8976
.L9090:
	movq	-9552(%rbp), %rdi
	call	integer_zerop
.L24585:
	movl	%eax, %ebx
	jmp	.L9089
.L9091:
	movq	-9552(%rbp), %rcx
	xorl	%ebx, %ebx
	movq	32(%rcx), %rdi
	call	is_zeros_p
	testl	%eax, %eax
	je	.L9089
	movq	-9552(%rbp), %r9
	movq	40(%r9), %rdi
	call	is_zeros_p
	testl	%eax, %eax
	je	.L9089
.L23283:
	movl	$1, %ebx
	jmp	.L9089
.L9093:
	movq	-9552(%rbp), %rsi
	movl	$dconst0, %edi
	movl	$24, %ecx
	cld
	addq	$32, %rsi
	repz
	cmpsb
.L24584:
	sete	%dil
	movzbl	%dil, %ebx
	jmp	.L9089
.L9111:
	cmpl	$46, %eax
	je	.L9101
	cmpl	$46, %eax
	jb	.L9109
	subl	$114, %eax
	cmpl	$3, %eax
	ja	.L9109
	movq	-9552(%rbp), %r15
	movq	32(%r15), %rdi
	call	is_zeros_p
	jmp	.L24585
.L9101:
	movq	-9552(%rbp), %rcx
	movq	8(%rcx), %rax
	testq	%rax, %rax
	je	.L9102
	cmpb	$19, 16(%rax)
	je	.L25748
.L9102:
	movq	-9552(%rbp), %rax
	movq	40(%rax), %rbx
	testq	%rbx, %rbx
	je	.L23283
.L9108:
	movq	32(%rbx), %rdi
	call	is_zeros_p
	testl	%eax, %eax
	je	.L9109
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L9108
	jmp	.L23283
.L25748:
	cmpq	$0, 40(%rcx)
	jmp	.L24584
.L9094:
	movq	-9552(%rbp), %r12
	movq	32(%r12), %rbx
	testq	%rbx, %rbx
	je	.L23283
.L9100:
	movq	32(%rbx), %rdi
	call	is_zeros_p
	testl	%eax, %eax
	je	.L9109
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L9100
	jmp	.L23283
.L25747:
	movq	8(%rdx), %rax
	xorl	%r15d, %r15d
	xorl	%r12d, %r12d
	movq	40(%rdx), %rbx
	testq	%rax, %rax
	je	.L9076
	cmpb	$19, 16(%rax)
	je	.L25749
.L9076:
	testq	%rbx, %rbx
	jne	.L9083
.L23279:
	leal	0(,%r12,4), %ebx
	leal	(%r15,%r15,2), %r11d
	cmpl	%r11d, %ebx
	setge	%al
.L24586:
	movzbl	%al, %eax
	jmp	.L9077
.L9083:
	movq	32(%rbx), %rdi
	call	mostly_zeros_p
	movq	(%rbx), %rbx
	leal	1(%r12), %r10d
	testl	%eax, %eax
	cmovne	%r10d, %r12d
	incl	%r15d
	testq	%rbx, %rbx
	jne	.L9083
	jmp	.L23279
.L25749:
	testq	%rbx, %rbx
	sete	%al
	jmp	.L24586
.L9073:
	cmpq	$2, %r15
	jbe	.L8976
	jmp	.L9074
	.p2align 6,,7
.L25731:
	testq	%r13, %r13
	je	.L8975
	movq	%rax, -6440(%rbp)
	xorl	%r15d, %r15d
	movq	%r13, %r12
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L8980
	movq	32(%rax), %rdx
	testq	%rdx, %rdx
	je	.L8980
	cmpb	$25, 16(%rdx)
	je	.L8980
	cmpb	$18, 16(%rax)
	je	.L25750
.L8981:
	cmpb	$51, 2(%r13)
	je	.L9057
.L8980:
	movzwl	(%r13), %eax
	cmpw	$66, %ax
	movl	%eax, %ecx
	je	.L25751
.L8978:
	cmpw	$63, %cx
	je	.L25752
.L8983:
	movl	$1, %eax
	testl	%eax, %eax
	jne	.L25753
	movq	-9552(%rbp), %rdx
	movzbl	16(%rdx), %r9d
	movl	%r9d, %edx
	movzbl	%dl, %ecx 
	movsbl	tree_code_type(%rcx),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L8991
	mov	%eax, %r8d
	jmp	*.L9051(,%r8,8)
	.section	.rodata
	.align 8
	.align 4
.L9051:
	.quad	.L9005
	.quad	.L9007
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L9007
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L9057
	.quad	.L8992
	.quad	.L9010
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L9010
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8991
	.quad	.L8997
	.text
.L8992:
	movq	-9552(%rbp), %r15
	movq	144(%r15), %rax
	testq	%rax, %rax
	movq	%rax, %r15
	jne	.L24251
	xorl	%r15d, %r15d
.L8991:
	testq	%r15, %r15
	movl	$1, %ebx
	je	.L8982
.L24251:
	cmpw	$63, (%r15)
	je	.L25754
.L9054:
	movq	%r12, %rdi
	movq	%r15, %rsi
	xorl	%ebx, %ebx
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L8982
	cmpw	$66, (%r12)
	je	.L25755
.L9057:
	movl	$1, %ebx
.L8982:
	testl	%ebx, %ebx
	je	.L8975
	jmp	.L8977
.L25755:
	cmpw	$66, (%r15)
	jne	.L9057
	xorl	%esi, %esi
	movq	%r15, %rdi
	movq	%r12, %rdx
	movl	$rtx_addr_varies_p, %ecx
	call	true_dependence
	testl	%eax, %eax
	jne	.L8982
	jmp	.L9057
.L25754:
	movq	8(%r15), %r15
	cmpw	$61, (%r15)
	jne	.L9054
	cmpl	$52, 8(%r15)
	ja	.L9054
.L24463:
	xorl	%ebx, %ebx
	jmp	.L8982
.L9005:
	movq	-9552(%rbp), %rbx
	movq	%r12, %rdi
	movq	32(%rbx), %rsi
.L24583:
	xorl	%edx, %edx
	call	safe_from_p
	movl	%eax, %ebx
	jmp	.L8982
.L9007:
	movq	-9552(%rbp), %rcx
	xorl	%edx, %edx
	movq	%r12, %rdi
	xorl	%ebx, %ebx
	movq	32(%rcx), %rsi
	call	safe_from_p
	testl	%eax, %eax
	je	.L8982
	movq	%r12, %rdi
	movq	-9552(%rbp), %r12
	movq	40(%r12), %rsi
.L25087:
	xorl	%edx, %edx
	call	safe_from_p
	testl	%eax, %eax
	je	.L8982
	jmp	.L9057
.L9010:
	movzbl	%r9b, %eax
	subl	$41, %eax
	cmpl	$80, %eax
	ja	.L9011
	mov	%eax, %edi
	jmp	*.L9042(,%rdi,8)
	.section	.rodata
	.align 8
	.align 4
.L9042:
	.quad	.L9021
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9039
	.quad	.L9027
	.quad	.L23173
	.quad	.L9033
	.quad	.L9034
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9011
	.quad	.L9035
	.quad	.L9011
	.quad	.L9031
	.quad	.L9012
	.text
.L9012:
	movq	-9552(%rbp), %rsi
	movq	32(%rsi), %rdi
	call	staticp
	testl	%eax, %eax
	jne	.L9057
	movq	-9552(%rbp), %rbx
	testb	$4, 18(%rbx)
	jne	.L9057
	movq	32(%rbx), %rsi
	xorl	%edx, %edx
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L9057
	movq	-9552(%rbp), %rdx
	movq	32(%rdx), %rsi
	movq	%rsi, -6440(%rbp)
	movzbq	16(%rsi), %r9
	cmpb	$100, tree_code_type(%r9)
	je	.L25756
.L9011:
	testq	%r15, %r15
	jne	.L24251
	movq	-6440(%rbp), %r9
	xorl	%ebx, %ebx
	movzbl	16(%r9), %edi
	call	first_rtl_op
	cmpl	%eax, %ebx
	movl	%eax, -2916(%rbp)
	jge	.L23274
.L9049:
	movq	-6440(%rbp), %rdi
	movslq	%ebx,%rdx
	movq	32(%rdi,%rdx,8), %rsi
	testq	%rsi, %rsi
	jne	.L25757
.L9046:
	incl	%ebx
	cmpl	-2916(%rbp), %ebx
	jl	.L9049
.L23274:
	movq	-6440(%rbp), %rcx
	cmpb	$-110, 16(%rcx)
	jbe	.L8991
	movq	%r12, %rdi
	movq	%rcx, %rsi
	xorl	%ebx, %ebx
	call	*lang_hooks+80(%rip)
	testl	%eax, %eax
	je	.L8982
	jmp	.L8991
.L25757:
	xorl	%edx, %edx
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L9046
	jmp	.L24463
.L25756:
	movq	144(%rsi), %rax
	testq	%rax, %rax
	je	.L24463
	cmpw	$66, (%rax)
	jne	.L24463
	movq	8(%rax), %r15
	jmp	.L9011
.L9021:
	cmpw	$66, (%r12)
	jne	.L9011
	movq	-9552(%rbp), %rdi
	call	get_alias_set
	xorl	%edi, %edi
	movq	%rax, %rsi
	movq	16(%r12), %rax
	testq	%rax, %rax
	je	.L9026
	movq	(%rax), %rdi
.L9026:
	call	alias_sets_conflict_p
	xorl	%ebx, %ebx
	testl	%eax, %eax
	jne	.L8982
	jmp	.L9011
.L9039:
	movq	-9552(%rbp), %rcx
	movq	%r12, %rdi
	movq	40(%rcx), %rsi
	jmp	.L24583
.L9027:
	movzwl	(%r12), %eax
	cmpw	$61, %ax
	je	.L25758
.L9030:
	cmpw	$66, %ax
	jne	.L9011
	jmp	.L24463
.L25758:
	cmpl	$52, 8(%r12)
	jbe	.L24463
	jmp	.L9030
.L9033:
	movq	-9552(%rbp), %r10
	movq	48(%r10), %r15
	jmp	.L9011
.L9034:
	movq	-9552(%rbp), %r15
	movq	%r12, %rdi
	movq	32(%r15), %rsi
	jmp	.L24583
.L9035:
	movq	-9552(%rbp), %r11
	movq	48(%r11), %r15
	testq	%r15, %r15
	jne	.L24251
	testb	$16, %sil
	movl	$1, %ebx
	jne	.L8982
	movq	-9552(%rbp), %rbx
	orb	$16, %sil
	xorl	%edx, %edx
	movq	%r12, %rdi
	movb	%sil, 18(%rbx)
	movq	32(%rbx), %rsi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L9038
	movq	-9552(%rbp), %r12
	andb	$-17, 18(%r12)
	jmp	.L24463
.L9038:
	movq	-9552(%rbp), %rdi
	movq	save_expr_list.2(%rip), %rdx
	xorl	%esi, %esi
	call	tree_cons
	movq	%rax, save_expr_list.2(%rip)
	jmp	.L9057
.L9031:
	movq	-9552(%rbp), %r8
	cmpq	$0, 32(%r8)
	jne	.L24463
	movq	-9552(%rbp), %rax
	movq	40(%rax), %r15
	jmp	.L9011
.L8997:
	cmpb	$2, %r9b
	je	.L25759
	xorl	%ebx, %ebx
	testb	%r9b, %r9b
	sete	%bl
	jmp	.L8982
.L25759:
	movq	-9552(%rbp), %r10
	xorl	%ebx, %ebx
	movq	32(%r10), %rsi
	testq	%rsi, %rsi
	jne	.L25760
.L9000:
	movq	-9552(%rbp), %r11
	movq	%r12, %rdi
	movq	(%r11), %rsi
	testq	%rsi, %rsi
	jne	.L25087
	jmp	.L9057
.L25760:
	xorl	%edx, %edx
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L8982
	jmp	.L9000
.L25753:
	movq	-9552(%rbp), %rsi
	xorl	%edx, %edx
	movq	%r12, %rdi
	movq	$0, save_expr_list.2(%rip)
	call	safe_from_p
	movq	save_expr_list.2(%rip), %rdx
	movl	%eax, %ebx
	testq	%rdx, %rdx
	je	.L8982
.L8990:
	movq	24(%rdx), %rdi
	andb	$-17, 18(%rdi)
	movq	(%rdx), %rdx
	testq	%rdx, %rdx
	jne	.L8990
	jmp	.L8982
.L25752:
	movq	8(%r13), %r12
	cmpw	$61, (%r12)
	jne	.L8983
	cmpl	$52, 8(%r12)
	jbe	.L24463
	jmp	.L8983
.L25751:
	movq	8(%r13), %rax
	movq	global_rtl+72(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L9057
	cmpw	$75, (%rax)
	jne	.L8978
	cmpq	%rdx, 8(%rax)
	jne	.L8978
	jmp	.L9057
.L25750:
	movq	112(%rax), %rax
	testq	%rax, %rax
	je	.L8981
	cmpb	$25, 16(%rax)
	jne	.L8981
	jmp	.L8980
	.p2align 6,,7
.L11653:
	movq	-9552(%rbp), %rdx
	movq	const_int_rtx+512(%rip), %rsi
	xorl	%ecx, %ecx
	movq	32(%rdx), %rdi
	xorl	%edx, %edx
	call	expand_expr
	movq	cfun(%rip), %rsi
	movq	16(%rsi), %rcx
	movq	40(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L23412
.L11659:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L25761
	call	emit_insn
	movq	%rax, 16(%rbx)
.L11658:
	movq	cfun(%rip), %rdi
	movq	40(%rbx), %r11
	movq	16(%rdi), %r9
	testq	%r11, %r11
	movq	%r11, %rbx
	movq	%r11, 40(%r9)
	jne	.L11659
.L23412:
	movq	-9552(%rbp), %rax
	movq	%r13, %rsi
	movl	-6220(%rbp), %r13d
	addq	$40, %rax
	testl	%r13d, %r13d
	je	.L11666
	movq	const_int_rtx+512(%rip), %rsi
.L11666:
	movq	(%rax), %rdi
	jmp	.L25098
.L25761:
	movq	8(%rdi), %r10
	movq	8(%r10), %r14
	movq	%r14, 16(%rbx)
	call	emit_insn
	jmp	.L11658
.L21780:
	movq	-9552(%rbp), %r9
	movq	-9552(%rbp), %r11
	movl	-6220(%rbp), %r13d
	movq	32(%r9), %rax
	testl	%r13d, %r13d
	movq	%rax, -5464(%rbp)
	movq	40(%r11), %rdx
	movq	%rdx, -5472(%rbp)
	je	.L24435
	movzbl	16(%rax), %ecx
	cmpb	$39, %cl
	je	.L25762
.L21781:
	xorl	%r10d, %r10d
	cmpl	$0, -6220(%rbp)
	sete	%r10b
	xorl	%r13d, %r13d
	testb	%cl, %cl
	movl	%r10d, -5612(%rbp)
	je	.L25763
	leal	-39(%rcx), %edx
	cmpb	$1, %dl
	jbe	.L22235
	cmpb	$43, %cl
	je	.L22235
	cmpb	$44, %cl
	je	.L22235
	movq	-5472(%rbp), %rax
	cmpb	$53, 16(%rax)
	je	.L25764
.L22345:
	testq	%r13, %r13
	je	.L25765
.L22601:
	movq	-5464(%rbp), %rax
	movzbl	16(%rax), %edx
	cmpb	$36, %dl
	je	.L25766
.L22656:
	call	push_temp_slots
	movq	-5472(%rbp), %rdi
	movl	-5612(%rbp), %edx
	movq	%r13, %rsi
	call	store_expr
	movq	%rax, %r13
.L25053:
	movq	%r13, %rdi
	call	preserve_temp_slots
	call	free_temp_slots
	call	pop_temp_slots
.L25054:
	movl	-5612(%rbp), %r9d
	testl	%r9d, %r9d
.L25055:
	movl	$0, %ecx
	cmove	%rcx, %r13
	jmp	.L7871
.L25766:
	movzwl	(%r13), %eax
	cmpw	$61, %ax
	je	.L22603
	cmpw	$39, %ax
	je	.L22603
	cmpb	$36, %dl
	jne	.L22656
	movq	-5472(%rbp), %r9
	cmpb	$41, 16(%r9)
	jne	.L22656
	movq	cfun(%rip), %rcx
	movzbl	424(%rcx), %r15d
	andb	$3, %r15b
	decb	%r15b
	jne	.L22656
	call	push_temp_slots
	movq	-5472(%rbp), %rdi
	call	expr_size
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	-5472(%rbp), %rdi
	xorl	%esi, %esi
	movq	%rax, %r12
	call	expand_expr
	movq	%r12, %rsi
	movq	sizetype_tab(%rip), %r8
	movq	%rax, %r15
	movzbl	17(%r8), %edx
	movzbl	61(%r8), %eax
	shrb	$5, %dl
	shrb	$1, %al
	andl	$1, %edx
	movzbl	%al, %edi
	call	convert_to_mode
	movl	$3, %ecx
	movq	sizetype_tab(%rip), %r14
	movl	target_flags(%rip), %edx
	movq	8(%r15), %rbx
	movq	%rax, 16(%rsp)
	andl	$33554432, %edx
	movq	%rbx, (%rsp)
	setne	%r11b
	xorl	%edx, %edx
	xorl	%eax, %eax
	movzbl	%r11b, %r9d
	addl	$4, %r9d
	movl	%r9d, 8(%rsp)
	movzbl	61(%r14), %edi
	shrb	$1, %dil
	movzbl	%dil, %esi
	movq	libfunc_table+96(%rip), %rdi
	movl	%esi, 24(%rsp)
	movq	8(%r13), %r8
	xorl	%esi, %esi
	call	emit_library_call
	jmp	.L25053
	.p2align 6,,7
.L22603:
	call	push_temp_slots
	movzbl	2(%r13), %edx
	movq	-5472(%rbp), %rdi
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	call	expand_expr
	cmpw	$39, (%r13)
	movq	%rax, -5712(%rbp)
	je	.L25767
	movq	%r13, %rdi
	movq	-5712(%rbp), %rsi
.L25113:
	call	emit_move_insn
	jmp	.L25053
.L25767:
	movq	-5472(%rbp), %rdx
	movq	8(%rdx), %rdi
	call	int_size_in_bytes
	cmpw	$39, (%r13)
	movl	%eax, -5716(%rbp)
	jne	.L25561
	movq	8(%r13), %rcx
	movq	8(%rcx), %r8
	movl	(%rcx), %edi
	cmpq	$0, 8(%r8)
	movslq	%edi,%rsi
	sete	%r14b
	leaq	15(,%rsi,8), %r11
	andq	$-16, %r11
	subq	%r11, %rsp
	leaq	32(%rsp), %rbx
	movzbl	%r14b, %r15d
	movq	%rbx, -5728(%rbp)
	movl	%r15d, -9468(%rbp)
	movl	-9468(%rbp), %r10d
	cmpl	%edi, %r10d
	movl	%r10d, -9460(%rbp)
	jge	.L24217
.L22639:
	movslq	-9460(%rbp),%rdx
	movq	8(%rcx,%rdx,8), %rdi
	movq	%rdx, -5736(%rbp)
	movl	-5716(%rbp), %ecx
	movq	8(%rdi), %rax
	movq	16(%rdi), %r12
	testl	%ecx, %ecx
	movzbl	2(%rax), %r14d
	movq	8(%r12), %r15
	movslq	%r14d,%r9
	movzbl	mode_size(%r9), %edx
	movq	%r9, -5744(%rbp)
	movl	%edx, -9464(%rbp)
	js	.L22612
	movslq	-5716(%rbp),%r10
	mov	%edx, %r11d
	leaq	(%r11,%r15), %rbx
	cmpq	%r10, %rbx
	jle	.L22612
	movl	-5716(%rbp), %esi
	subl	%r15d, %esi
	movl	%esi, -9464(%rbp)
	je	.L25560
.L22612:
	movq	-5712(%rbp), %r12
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L22614
	leal	-67(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L22616
	cmpw	$54, %dx
	je	.L22616
	cmpw	$55, %dx
	je	.L22616
	cmpw	$58, %dx
	je	.L22616
	cmpw	$134, %dx
	je	.L22616
	cmpw	$56, %dx
	je	.L22616
	cmpw	$140, %dx
	je	.L22616
.L22615:
	movq	-5712(%rbp), %r12
	movl	%r14d, %edi
	movzbl	2(%r12), %eax
	testb	%al, %al
	je	.L25037
	movzbl	%al, %edi
.L25037:
	call	gen_reg_rtx
	movq	-5712(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	emit_move_insn
.L22614:
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L25768
.L22619:
	cmpw	$65, %dx
	je	.L25769
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L22636
	cmpw	$54, %dx
	je	.L22636
	cmpw	$55, %dx
	je	.L22636
	cmpw	$58, %dx
	je	.L22636
	cmpw	$134, %dx
	je	.L22636
	cmpw	$56, %dx
	je	.L22636
	cmpw	$140, %dx
	je	.L22636
	cmpw	$61, %dx
	je	.L25770
.L22635:
	movl	-9464(%rbp), %edx
	movslq	-5716(%rbp),%r11
	movq	%r12, %rdi
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r14d, %r9d
	movl	%r14d, (%rsp)
	sall	$3, %edx
	mov	%edx, %esi
	movq	%r11, 8(%rsp)
	leaq	0(,%r15,8), %rdx
	call	extract_bit_field
.L25038:
	movq	-5736(%rbp), %r12
	movq	-5728(%rbp), %r8
	movq	%rax, (%r8,%r12,8)
.L22610:
	incl	-9460(%rbp)
	movq	8(%r13), %rcx
	movl	-9460(%rbp), %eax
	cmpl	(%rcx), %eax
	jl	.L22639
.L24217:
	movq	cfun(%rip), %r15
	movq	16(%r15), %r9
	movq	40(%r9), %rbx
	testq	%rbx, %rbx
	je	.L24219
.L22645:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L25771
	call	emit_insn
	movq	%rax, 16(%rbx)
.L22644:
	movq	cfun(%rip), %r10
	movq	40(%rbx), %rdi
	movq	16(%r10), %r14
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%r14)
	jne	.L22645
	movq	8(%r13), %rcx
.L24219:
	movl	-9468(%rbp), %ebx
	cmpl	(%rcx), %ebx
	jge	.L25053
.L22651:
	movslq	-9468(%rbp),%r12
	movq	-5728(%rbp), %r8
	salq	$3, %r12
	movq	8(%r12,%rcx), %rax
	movq	(%r8,%r12), %rsi
	movq	8(%rax), %rdi
	call	emit_move_insn
	incl	-9468(%rbp)
	movq	8(%r13), %rdx
	movl	-9468(%rbp), %r11d
	cmpl	(%rdx), %r11d
	movq	%rdx, %rcx
	jl	.L22651
	jmp	.L25053
.L25771:
	movq	8(%rdi), %rsi
	movq	8(%rsi), %rcx
	movq	%rcx, 16(%rbx)
	call	emit_insn
	jmp	.L22644
.L25770:
	movzbl	2(%r12), %edi
	cmpl	%r14d, %edi
	jne	.L22635
.L22636:
	movq	-5736(%rbp), %r10
	movq	-5728(%rbp), %r14
	movq	%r12, (%r14,%r10,8)
	jmp	.L22610
.L25769:
	testq	%r15, %r15
	jne	.L24453
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %rsi
	movzbl	mode_size(%rsi), %ebx
	cmpl	%ebx, -9464(%rbp)
	je	.L22625
.L22626:
	movzbq	2(%rdx), %r9
	movzbq	mode_size(%r9), %rcx
	cmpq	%rcx, %r15
	je	.L25772
.L22624:
	testq	%r15, %r15
	jne	.L22779
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbx
	movzbq	mode_size(%rbx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %r15
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r15, %rdi
	movl	%r14d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	jmp	.L25038
.L22779:
	movl	$.LC0, %edi
	movl	$2028, %esi
.L25535:
	movl	$.LC12, %edx
	jmp	.L25086
.L25772:
	movq	16(%r12), %rdx
	movzbq	2(%rdx), %r10
	movzbl	mode_size(%r10), %edi
	cmpl	%edi, -9464(%rbp)
	jne	.L22624
.L22625:
	xorl	%r11d, %r11d
	movq	-5736(%rbp), %r8
	movq	-5728(%rbp), %rax
	testq	%r15, %r15
	setne	%r11b
	leaq	(%rax,%r8,8), %rbx
	movq	8(%r12,%r11,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L22610
	cmpw	$54, %dx
	je	.L22610
	cmpw	$55, %dx
	je	.L22610
	cmpw	$58, %dx
	je	.L22610
	cmpw	$134, %dx
	je	.L22610
	cmpw	$56, %dx
	je	.L22610
	cmpw	$140, %dx
	je	.L22610
	cmpw	$61, %dx
	je	.L25773
.L22630:
	movslq	-5716(%rbp),%rcx
	movl	-9464(%rbp), %r9d
	movl	%r14d, (%rsp)
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	sall	$3, %r9d
	movq	%rcx, 8(%rsp)
	mov	%r9d, %esi
	movl	$1, %ecx
	movq	(%rbx), %rdi
	movl	%r14d, %r9d
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L22610
.L25773:
	movzbl	2(%rcx), %r12d
	cmpl	%r14d, %r12d
	jne	.L22630
	jmp	.L22610
.L24453:
	movq	8(%r12), %rdx
	jmp	.L22626
.L25768:
	movl	%r14d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L22620
	cmpl	%eax, 32(%rdx)
	jae	.L22621
.L24452:
	movzwl	(%r12), %edx
	jmp	.L22619
.L22621:
	movl	%r14d, %edi
	leaq	0(,%r15,8), %rbx
	call	get_mode_alignment
	mov	%eax, %r10d
	movq	%rbx, %rax
	cqto
	idivq	%r10
	testq	%rdx, %rdx
	jne	.L24452
	movq	-5744(%rbp), %rax
	movzbl	mode_size(%rax), %edx
	cmpl	%edx, -9464(%rbp)
	jne	.L24452
	movl	%r14d, %edi
	call	gen_reg_rtx
	movl	$1, %ecx
	movq	%r15, %rdx
	movq	-5736(%rbp), %r8
	movq	-5728(%rbp), %r11
	movq	%r12, %rdi
	movl	%r14d, %esi
	leaq	(%r11,%r8,8), %rbx
	movl	$1, %r8d
	movq	%rax, (%rbx)
	call	adjust_address_1
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L22610
.L22620:
	cmpl	$8, %eax
	ja	.L24452
	jmp	.L22621
	.p2align 6,,7
.L22616:
	movq	-5712(%rbp), %r9
	movzbl	2(%r9), %edx
	movzbl	%dl, %ecx
	cmpl	%r14d, %ecx
	je	.L22614
	testb	%dl, %dl
	je	.L22614
	jmp	.L22615
.L25560:
	movl	$.LC0, %edi
	movl	$1978, %esi
	jmp	.L25535
.L25561:
	movl	$.LC0, %edi
	movl	$1953, %esi
	jmp	.L25535
	.p2align 6,,7
.L25765:
	movq	-5464(%rbp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4, %ecx
	call	expand_expr
	movq	%rax, %r13
	jmp	.L22601
.L25764:
	movq	%rax, %rdi
	call	aggregate_value_p
	testl	%eax, %eax
	jne	.L22345
	movq	-5472(%rbp), %r10
	movq	8(%r10), %rsi
	movq	32(%rsi), %rdx
	cmpb	$25, 16(%rdx)
	jne	.L22345
	movq	-5464(%rbp), %rcx
	movzbl	16(%rcx), %r11d
	subb	$34, %r11b
	cmpb	$1, %r11b
	ja	.L22346
	movq	144(%rcx), %rax
	testq	%rax, %rax
	je	.L25774
.L22347:
	cmpw	$61, (%rax)
	je	.L22345
.L22346:
	call	push_temp_slots
	movq	-5472(%rbp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	testq	%r13, %r13
	movq	%rax, %r15
	je	.L25775
.L22348:
	cmpw	$39, (%r13)
	je	.L25776
	cmpb	$51, 2(%r13)
	je	.L25777
	movq	%r13, %rdi
	movq	%r15, %rsi
	jmp	.L25113
.L25777:
	movq	-5472(%rbp), %rdi
	movq	%r13, -9424(%rbp)
	call	expr_size
	movl	$8, %edx
	movq	16(%r13), %rcx
	movq	%rax, %r14
	testq	%rcx, %rcx
	je	.L22403
	movl	32(%rcx), %edx
.L22403:
	movq	16(%r15), %rax
	testq	%rax, %rax
	je	.L22404
	cmpl	32(%rax), %edx
	jb	.L22405
.L22400:
	testq	%rax, %rax
	movl	$8, -9416(%rbp)
	je	.L22401
	movl	32(%rax), %eax
	movl	%eax, -9416(%rbp)
.L22401:
	cmpb	$51, 2(%r13)
	jne	.L25547
	cmpb	$51, 2(%r15)
	jne	.L25546
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L22412
	cmpl	$66, %eax
	je	.L25778
.L22416:
	cmpl	$75, %eax
	je	.L22420
	cmpl	$78, %eax
	je	.L22420
.L22415:
	movzwl	(%r15), %eax
	cmpl	$71, %eax
	je	.L22425
	cmpl	$66, %eax
	je	.L25779
.L22429:
	cmpl	$75, %eax
	je	.L22433
	cmpl	$78, %eax
	je	.L22433
.L22428:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L22438
	cmpl	$66, %eax
	je	.L25780
.L22442:
	cmpl	$75, %eax
	je	.L22446
	cmpl	$78, %eax
	je	.L22446
.L22441:
	movq	-9424(%rbp), %rdi
	cmpw	$66, (%rdi)
	jne	.L25545
	cmpw	$66, (%r15)
	jne	.L25544
	testq	%r14, %r14
	je	.L25543
	cmpw	$54, (%r14)
	je	.L25781
.L22454:
	shrl	$3, -9416(%rbp)
	xorl	%edi, %edi
	mov	-9416(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -5672(%rbp)
	testl	%r12d, %r12d
	je	.L24215
.L22587:
	movslq	%r12d,%rsi
	movl	movstr_optab(,%rsi,4), %edx
	movq	%rsi, -5680(%rbp)
	cmpl	$1317, %edx
	je	.L22573
	cmpw	$54, (%r14)
	je	.L25782
.L22577:
	testb	$2, target_flags+3(%rip)
	je	.L22578
	movq	-5680(%rbp), %rcx
	cmpw	$63, mode_bitsize(%rcx,%rcx)
.L25036:
	jbe	.L22573
.L22576:
	movslq	%edx,%rax
	leaq	(%rax,%rax,4), %rbx
	movq	%rax, -5688(%rbp)
	movq	insn_data+24(,%rbx,8), %rdi
	movq	(%rdi), %rax
	movq	%rdi, -5696(%rbp)
	testq	%rax, %rax
	je	.L22580
	movq	-9424(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L22573
.L22580:
	movq	-5696(%rbp), %r10
	movq	24(%r10), %rax
	testq	%rax, %rax
	jne	.L25783
.L22581:
	movq	-5696(%rbp), %r11
	movq	72(%r11), %rax
	testq	%rax, %rax
	je	.L22582
	xorl	%esi, %esi
	movq	-5672(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L22573
.L22582:
	call	get_last_insn
	movl	$1, %edx
	movq	%r14, %rsi
	movl	%r12d, %edi
	movq	%rax, -5704(%rbp)
	call	convert_to_mode
	movq	-5696(%rbp), %rsi
	movq	%rax, %rbx
	movq	48(%rsi), %rax
	testq	%rax, %rax
	jne	.L25784
.L22583:
	movq	-5688(%rbp), %r8
	movq	-9424(%rbp), %rdi
	xorl	%eax, %eax
	movq	%r15, %rsi
	movq	%rbx, %rdx
	movq	-5672(%rbp), %rcx
	leaq	(%r8,%r8,4), %r12
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24529
	movq	-5704(%rbp), %rdi
	call	delete_insns_since
.L22573:
	movq	-5680(%rbp), %rcx
	movzbl	mode_wider_mode(%rcx), %r12d
	testl	%r12d, %r12d
	jne	.L22587
.L24215:
	testb	$2, target_flags+3(%rip)
	movq	-9424(%rbp), %rbx
	movl	$0, volatile_ok(%rip)
	setne	%al
	movq	8(%rbx), %rsi
	movzbl	%al, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%dl
	movq	%rax, -9456(%rbp)
	movq	8(%r15), %rsi
	movzbl	%dl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%r14, %rsi
	movq	sizetype_tab(%rip), %r9
	movq	%rax, %rbx
	movzbl	61(%r9), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r14
	je	.L25785
.L22596:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	-9456(%rbp), %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r15
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r14, %rsi
	movq	%rax, (%r15)
	movq	%rax, %r12
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %r8
	movq	%rax, (%r12)
	movq	(%r15), %r9
	movq	8(%r8), %rdi
	movq	(%r9), %rcx
	movq	$0, (%rcx)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r15, %rcx
	movq	fn.1(%rip), %r12
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r12), %r14
	movq	8(%r14), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	movq	-9456(%rbp), %rcx
	testb	$4, 3(%rcx)
	je	.L25053
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%rcx, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L25053
.L25785:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %rsi
	orb	$1, 49(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %r11
	orb	$8, 18(%r11)
	movq	fn.1(%rip), %r10
	orb	$64, 50(%r10)
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L22596
.L24529:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L25053
.L25784:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L22583
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L22583
.L25783:
	movq	%r15, %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L22573
	jmp	.L22581
.L22578:
	movq	-5680(%rbp), %r9
	cmpw	$31, mode_bitsize(%r9,%r9)
	jmp	.L25036
.L25782:
	movq	mode_mask_array(,%rsi,8), %r8
	shrq	$1, %r8
	cmpq	%r8, 8(%r14)
	jbe	.L22576
	jmp	.L22577
.L25781:
	movq	8(%r14), %r12
	xorl	%r8d, %r8d
	movl	$17, %esi
.L22467:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L24204
.L22464:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %r10
	cmpq	%rsi, %r10
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L22464
.L24204:
	testl	%edi, %edi
	je	.L22457
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L22466
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L22466
	movzbq	mode_size(%rbx), %rdi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rdi
	addq	%rax, %r8
	movq	%rdx, %r12
.L22466:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L22467
.L22457:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L22470
	movq	ix86_cost(%rip), %rbx
	mov	40(%rbx), %edx
	cmpq	%rdx, %r8
	jae	.L22454
.L22471:
	movq	8(%r15), %r8
	movq	-9424(%rbp), %rcx
	movq	8(%r14), %r12
	movq	-9424(%rbp), %rsi
	movq	$0, -2376(%rbp)
	movl	$0, -9436(%rbp)
	testb	$2, target_flags+3(%rip)
	movq	%r8, -2400(%rbp)
	setne	%r14b
	movq	8(%rcx), %r10
	movq	%rsi, -2432(%rbp)
	xorl	%ecx, %ecx
	movzwl	(%r10), %edx
	movq	%r10, -9432(%rbp)
	movzbl	%r14b, %r11d
	leal	5(,%r11,4), %r14d
	leal	-96(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L22476
	cmpw	$99, %dx
	je	.L22476
	cmpw	$98, %dx
	je	.L22476
.L22475:
	movq	-9432(%rbp), %rdi
	movl	%ecx, -2416(%rbp)
	xorl	%edx, %edx
	movzwl	(%rdi), %eax
	cmpw	$96, %ax
	je	.L22478
	cmpw	$98, %ax
	je	.L22478
.L22477:
	movq	-9432(%rbp), %rax
	movq	%r15, -2408(%rbp)
	movl	%edx, -2368(%rbp)
	xorl	%ecx, %ecx
	movq	%rax, -2424(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L22481
	cmpw	$99, %dx
	je	.L22481
	cmpw	$98, %dx
	je	.L22481
.L22480:
	movl	-2368(%rbp), %edx
	movl	%ecx, -2392(%rbp)
	movl	$0, -2388(%rbp)
	movl	$0, -2412(%rbp)
	testl	%edx, %edx
	je	.L22482
	movq	%r12, -2376(%rbp)
.L22482:
	movl	-2392(%rbp), %ebx
	movq	%r12, -2384(%rbp)
	testl	%ebx, %ebx
	je	.L22484
	movl	-2416(%rbp), %r9d
	testl	%r9d, %r9d
	jne	.L22483
.L22484:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L22497:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L24207
.L22494:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %r11
	cmpq	%rsi, %r11
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L22494
.L24207:
	testl	%edi, %edi
	je	.L22487
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L22496
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L22496
	movzbq	mode_size(%rbx), %rdi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rdi
	addq	%rax, %r15
	movq	%rdx, %r12
.L22496:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L22497
.L22487:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L22483
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L24209
.L22505:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %edx
	cmpl	%r14d, %edx
	cmovae	-9436(%rbp), %ecx
	movl	%ecx, -9436(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L22505
.L24209:
	movl	-2392(%rbp), %eax
	testl	%eax, %eax
	jne	.L22511
	movzwl	(%r8), %edx
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L22509
	cmpw	$54, %dx
	je	.L22509
	cmpw	$55, %dx
	je	.L22509
	cmpw	$58, %dx
	je	.L22509
	cmpw	$134, %dx
	je	.L22509
	cmpw	$56, %dx
	je	.L22509
	cmpw	$140, %dx
	je	.L22509
.L22511:
	movl	-2416(%rbp), %eax
	testl	%eax, %eax
	jne	.L22483
	movq	-9432(%rbp), %r10
	movzwl	(%r10), %edx
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L22513
	cmpw	$54, %dx
	je	.L22513
	cmpw	$55, %dx
	je	.L22513
	cmpw	$58, %dx
	je	.L22513
	cmpw	$134, %dx
	je	.L22513
	cmpw	$56, %dx
	je	.L22513
	cmpw	$140, %dx
	je	.L22513
.L22483:
	cmpl	$1, %r14d
	jbe	.L22516
.L22567:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L24212
.L22523:
	movslq	%ecx,%r11
	movzbl	mode_size(%r11), %esi
	cmpl	%r14d, %esi
	cmovae	-9436(%rbp), %ecx
	movl	%ecx, -9436(%rbp)
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L22523
.L24212:
	movl	-9436(%rbp), %eax
	testl	%eax, %eax
	je	.L22516
	movslq	-9436(%rbp),%r15
	movq	%r15, %r14
	salq	$4, %r14
	addq	optab_table+240(%rip), %r14
	movl	8(%r14), %ebx
	cmpl	$1317, %ebx
	je	.L22525
	movl	-9436(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	jb	.L22525
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rdi
	movq	$0, -9448(%rbp)
	leaq	(%rdi,%rdi,4), %rcx
	cmpq	%rdx, -2384(%rbp)
	movq	insn_data+16(,%rcx,8), %r12
	movq	%rdx, -6216(%rbp)
	movq	%r12, -5664(%rbp)
	leaq	-2432(%rbp), %r12
	jb	.L22525
	movl	-2368(%rbp), %ecx
.L22565:
	testl	%ecx, %ecx
	je	.L22529
	subq	%rdx, 56(%r12)
.L22529:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L22530
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L22531
	movl	-9436(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L25032:
	movq	%rax, -9448(%rbp)
.L22530:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L22533
	movq	24(%r12), %rdi
	movl	-9436(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L25033:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L25786
	movl	target_flags(%rip), %esi
	testl	$33554432, %esi
	je	.L22539
	movzbl	mode_size(%r15), %ebx
	leal	7(%rbx), %edx
	andl	$-8, %edx
.L22540:
	movq	cfun(%rip), %r11
	andl	$33554432, %esi
	movq	16(%r11), %r10
	leaq	8(%r10), %rdi
	movl	8(%r10), %ecx
	je	.L22541
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L25034:
	movq	%r15, %rsi
	leal	(%rax,%rcx), %r8d
	salq	$4, %rsi
	movl	%r8d, (%rdi)
	addq	optab_table+384(%rip), %rsi
	movl	8(%rsi), %eax
	cmpl	$1317, %eax
	je	.L22543
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rcx
	movq	insn_data+24(,%rcx,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L22544
	movq	%r14, %rdi
	movl	-9436(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L25787
.L22544:
	leaq	(%rbx,%rbx,4), %r9
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r9,8)
.L25035:
	movq	%rax, %rdi
	call	emit_insn
.L22563:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L22564
	movq	-6216(%rbp), %r14
	addq	%r14, 56(%r12)
.L22564:
	movq	48(%r12), %rsi
	movq	-6216(%rbp), %rdx
	subq	-6216(%rbp), %rsi
	cmpq	%rdx, %rsi
	movq	%rsi, 48(%r12)
	jae	.L22565
.L22525:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L22567
.L22516:
	cmpq	$0, -2384(%rbp)
	je	.L25053
	jmp	.L25518
.L25787:
	movl	-9436(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L22544
.L22543:
	movzbl	mode_size(%r15), %edi
	cmpl	%edx, %edi
	je	.L25788
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r10b
	movzbl	%r10b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L22551:
	movl	-9436(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%r11d, %r11d
	testq	%r11, %r11
	movq	%rax, %rbx
	je	.L22560
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L25789
.L22560:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L22563
.L25789:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L22560
.L25788:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L22551
.L22541:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L25034
.L22539:
	movzbl	mode_size(%r15), %r9d
	leal	1(%r9), %edx
	andl	$-2, %edx
	jmp	.L22540
.L25786:
	movq	%rax, %rsi
	movq	-9448(%rbp), %rdi
	xorl	%eax, %eax
	call	*-5664(%rbp)
	jmp	.L25035
.L22533:
	movq	24(%r12), %rdi
	movl	-9436(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L25033
.L22531:
	movl	-9436(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L25032
.L22513:
	movq	-9432(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -2424(%rbp)
	jmp	.L22483
.L22509:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -2400(%rbp)
	jmp	.L22511
.L22481:
	movl	$1, %ecx
	jmp	.L22480
.L22478:
	movl	$1, %edx
	jmp	.L22477
.L22476:
	movl	$1, %ecx
	jmp	.L22475
.L22470:
	cmpq	$2, %r8
	ja	.L22454
	jmp	.L22471
.L22446:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L25790
.L22448:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L22441
.L25790:
	cmpq	16(%r14), %rax
	jne	.L22448
	jmp	.L22441
.L25780:
	cmpb	$51, 2(%r14)
	je	.L22439
	movq	8(%r14), %r12
	cmpw	$71, (%r12)
	je	.L25791
.L22439:
	cmpl	$66, %eax
	jne	.L22442
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L22441
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%rbx, 8(%rax)
	jmp	.L22441
.L25791:
	movq	8(%r12), %rsi
	movq	%r14, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L22440
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L22441
.L22440:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L25031:
	movq	%rax, %r14
	jmp	.L22441
.L22438:
	cmpq	$0, 16(%r14)
	je	.L25792
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L25031
	movq	8(%r14), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L22441
.L25792:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L25031
.L22433:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r15), %r12
	movq	%rax, %rbx
	je	.L25793
.L22435:
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, %r15
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L22428
.L25793:
	cmpq	16(%r15), %rax
	jne	.L22435
	jmp	.L22428
.L25779:
	cmpb	$51, 2(%r15)
	je	.L22426
	movq	8(%r15), %r12
	cmpw	$71, (%r12)
	je	.L25794
.L22426:
	cmpl	$66, %eax
	jne	.L22429
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r15), %rax
	movq	%rax, %rbx
	je	.L22428
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, %r15
	movq	%rbx, 8(%rax)
	jmp	.L22428
.L25794:
	movq	8(%r12), %rsi
	movq	%r15, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L22427
	movzbl	2(%r15), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r15
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L22428
.L22427:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L25030:
	movq	%rax, %r15
	jmp	.L22428
.L22425:
	cmpq	$0, 16(%r15)
	je	.L25795
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L25030
	movq	8(%r15), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L22428
.L25795:
	movq	8(%r15), %rdi
	call	copy_to_reg
	jmp	.L25030
.L22420:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L25796
.L22422:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -9424(%rbp)
	movq	%r12, 8(%rax)
	movq	-9424(%rbp), %rsi
	movq	%rbx, 16(%rsi)
	jmp	.L22415
.L25796:
	cmpq	16(%r13), %rax
	jne	.L22422
	jmp	.L22415
.L25778:
	jne	.L22416
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L22415
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -9424(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L22415
.L22412:
	testq	%rcx, %rcx
	je	.L25797
	movq	24(%r13), %rcx
	testq	%rcx, %rcx
	movq	%rcx, -9424(%rbp)
	jne	.L22415
	movq	8(%r13), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r11
	movq	%r11, -9424(%rbp)
	jmp	.L22415
.L25797:
	movq	8(%r13), %rdi
	call	copy_to_reg
	movq	%rax, -9424(%rbp)
	jmp	.L22415
.L22405:
	testq	%rcx, %rcx
	movl	$8, -9416(%rbp)
	je	.L22401
	movl	32(%rcx), %r10d
	movl	%r10d, -9416(%rbp)
	jmp	.L22401
.L22404:
	cmpl	$7, %edx
	ja	.L22400
	jmp	.L22405
.L25776:
	movq	-5472(%rbp), %r8
	movq	8(%r8), %rdi
	call	int_size_in_bytes
	cmpw	$39, (%r13)
	movl	%eax, -5620(%rbp)
	jne	.L25561
	movq	8(%r13), %rcx
	movq	8(%rcx), %rsi
	movl	(%rcx), %r14d
	cmpq	$0, 8(%rsi)
	movslq	%r14d,%rdi
	sete	%dl
	leaq	15(,%rdi,8), %r12
	andq	$-16, %r12
	subq	%r12, %rsp
	leaq	32(%rsp), %rbx
	movzbl	%dl, %r9d
	movq	%rbx, -5632(%rbp)
	movl	%r9d, -9412(%rbp)
	movl	-9412(%rbp), %eax
	cmpl	%r14d, %eax
	movl	%eax, -9404(%rbp)
	jge	.L24198
.L22384:
	movslq	-9404(%rbp),%r14
	movq	8(%rcx,%r14,8), %rbx
	movq	%r14, -5640(%rbp)
	movl	-5620(%rbp), %ecx
	movq	8(%rbx), %rax
	movq	16(%rbx), %r8
	testl	%ecx, %ecx
	movzbl	2(%rax), %r14d
	movq	8(%r8), %r11
	movq	%r11, -5648(%rbp)
	movslq	%r14d,%r10
	movzbl	mode_size(%r10), %edx
	movq	%r10, -5656(%rbp)
	movl	%edx, -9408(%rbp)
	js	.L22357
	mov	%edx, %edi
	movslq	-5620(%rbp),%r12
	addq	-5648(%rbp), %rdi
	cmpq	%r12, %rdi
	jle	.L22357
	movl	-5620(%rbp), %r9d
	subl	-5648(%rbp), %r9d
	movl	%r9d, -9408(%rbp)
	je	.L25560
.L22357:
	movzwl	(%r15), %edx
	movq	%r15, %r12
	cmpw	$66, %dx
	je	.L22359
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L22361
	cmpw	$54, %dx
	je	.L22361
	cmpw	$55, %dx
	je	.L22361
	cmpw	$58, %dx
	je	.L22361
	cmpw	$134, %dx
	je	.L22361
	cmpw	$56, %dx
	je	.L22361
	cmpw	$140, %dx
	je	.L22361
.L22360:
	movzbl	2(%r15), %eax
	movl	%r14d, %edi
	testb	%al, %al
	je	.L25028
	movzbl	%al, %edi
.L25028:
	call	gen_reg_rtx
	movq	%r15, %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	emit_move_insn
.L22359:
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L25798
.L22364:
	cmpw	$65, %dx
	je	.L25799
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L22381
	cmpw	$54, %dx
	je	.L22381
	cmpw	$55, %dx
	je	.L22381
	cmpw	$58, %dx
	je	.L22381
	cmpw	$134, %dx
	je	.L22381
	cmpw	$56, %dx
	je	.L22381
	cmpw	$140, %dx
	je	.L22381
	cmpw	$61, %dx
	je	.L25800
.L22380:
	movslq	-5620(%rbp),%rdi
	movl	-9408(%rbp), %eax
	movl	$1, %ecx
	movq	-5648(%rbp), %rdx
	xorl	%r8d, %r8d
	movl	%r14d, %r9d
	movl	%r14d, (%rsp)
	sall	$3, %eax
	movq	%rdi, 8(%rsp)
	mov	%eax, %esi
	salq	$3, %rdx
	movq	%r12, %rdi
	call	extract_bit_field
.L25029:
	movq	-5640(%rbp), %r9
	movq	-5632(%rbp), %r12
	movq	%rax, (%r12,%r9,8)
.L22355:
	incl	-9404(%rbp)
	movq	8(%r13), %rcx
	movl	-9404(%rbp), %esi
	cmpl	(%rcx), %esi
	jl	.L22384
.L24198:
	movq	cfun(%rip), %r10
	movq	16(%r10), %r15
	movq	40(%r15), %rbx
	testq	%rbx, %rbx
	je	.L24200
.L22390:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L25801
	call	emit_insn
	movq	%rax, 16(%rbx)
.L22389:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %r14
	movq	16(%rdx), %r8
	testq	%r14, %r14
	movq	%r14, %rbx
	movq	%r14, 40(%r8)
	jne	.L22390
	movq	8(%r13), %rcx
.L24200:
	movl	-9412(%rbp), %ebx
	cmpl	(%rcx), %ebx
	jge	.L25053
.L22396:
	movslq	-9412(%rbp),%r9
	movq	-5632(%rbp), %r12
	salq	$3, %r9
	movq	8(%r9,%rcx), %rax
	movq	(%r12,%r9), %rsi
	movq	8(%rax), %rdi
	call	emit_move_insn
	incl	-9412(%rbp)
	movq	8(%r13), %rcx
	movl	-9412(%rbp), %edi
	cmpl	(%rcx), %edi
	jl	.L22396
	jmp	.L25053
.L25801:
	movq	8(%rdi), %r11
	movq	8(%r11), %rcx
	movq	%rcx, 16(%rbx)
	call	emit_insn
	jmp	.L22389
.L25800:
	movzbl	2(%r12), %edx
	cmpl	%r14d, %edx
	jne	.L22380
.L22381:
	movq	-5640(%rbp), %r8
	movq	-5632(%rbp), %r14
	movq	%r12, (%r14,%r8,8)
	jmp	.L22355
.L25799:
	cmpq	$0, -5648(%rbp)
	jne	.L24449
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %rsi
	movzbl	mode_size(%rsi), %ebx
	cmpl	%ebx, -9408(%rbp)
	je	.L22370
.L22371:
	movzbq	2(%rdx), %r10
	movzbq	mode_size(%r10), %rcx
	cmpq	%rcx, -5648(%rbp)
	je	.L25802
.L22369:
	cmpq	$0, -5648(%rbp)
	jne	.L22779
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbx
	movzbq	mode_size(%rbx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %rbx
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%rbx, %rdi
	movl	%r14d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	jmp	.L25029
.L25802:
	movq	16(%r12), %r8
	movzbq	2(%r8), %rdx
	movzbl	mode_size(%rdx), %r11d
	cmpl	%r11d, -9408(%rbp)
	jne	.L22369
.L22370:
	xorl	%edi, %edi
	movq	-5640(%rbp), %r9
	movq	-5632(%rbp), %rax
	cmpq	$0, -5648(%rbp)
	setne	%dil
	leaq	(%rax,%r9,8), %rbx
	movq	8(%r12,%rdi,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L22355
	cmpw	$54, %dx
	je	.L22355
	cmpw	$55, %dx
	je	.L22355
	cmpw	$58, %dx
	je	.L22355
	cmpw	$134, %dx
	je	.L22355
	cmpw	$56, %dx
	je	.L22355
	cmpw	$140, %dx
	je	.L22355
	cmpw	$61, %dx
	je	.L25803
.L22375:
	movslq	-5620(%rbp),%rcx
	movl	-9408(%rbp), %r10d
	movl	%r14d, (%rsp)
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	movl	%r14d, %r9d
	sall	$3, %r10d
	movq	%rcx, 8(%rsp)
	mov	%r10d, %esi
	movl	$1, %ecx
	movq	(%rbx), %rdi
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L22355
.L25803:
	movzbl	2(%rcx), %esi
	cmpl	%r14d, %esi
	jne	.L22375
	jmp	.L22355
.L24449:
	movq	8(%r12), %rdx
	jmp	.L22371
.L25798:
	movl	%r14d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L22365
	cmpl	%eax, 32(%rdx)
	jae	.L22366
.L24448:
	movzwl	(%r12), %edx
	jmp	.L22364
.L22366:
	movq	-5648(%rbp), %rbx
	movl	%r14d, %edi
	call	get_mode_alignment
	mov	%eax, %r11d
	salq	$3, %rbx
	movq	%rbx, %rax
	cqto
	idivq	%r11
	testq	%rdx, %rdx
	jne	.L24448
	movq	-5656(%rbp), %r8
	movzbl	mode_size(%r8), %edx
	cmpl	%edx, -9408(%rbp)
	jne	.L24448
	movl	%r14d, %edi
	call	gen_reg_rtx
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-5632(%rbp), %rdi
	movq	-5640(%rbp), %r9
	movl	%r14d, %esi
	movq	-5648(%rbp), %rdx
	leaq	(%rdi,%r9,8), %rbx
	movq	%r12, %rdi
	movq	%rax, (%rbx)
	call	adjust_address_1
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L22355
.L22365:
	cmpl	$8, %eax
	ja	.L24448
	jmp	.L22366
.L22361:
	movzbl	2(%r15), %edx
	movzbl	%dl, %ecx
	cmpl	%r14d, %ecx
	je	.L22359
	testb	%dl, %dl
	je	.L22359
	jmp	.L22360
.L25775:
	movq	-5464(%rbp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4, %ecx
	call	expand_expr
	movq	%rax, %r13
	jmp	.L22348
.L25774:
	movq	%rcx, %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-5464(%rbp), %r15
	movq	144(%r15), %rax
	jmp	.L22347
	.p2align 6,,7
.L22235:
	movl	$0, -2696(%rbp)
	xorl	%ebx, %ebx
	leaq	-2672(%rbp), %r12
	call	push_temp_slots
	movq	-5464(%rbp), %r13
	movq	global_trees+120(%rip), %r8
	movl	$0, -9472(%rbp)
	movq	global_trees+136(%rip), %rdi
	movq	$0, -2704(%rbp)
	movq	%r8, -9488(%rbp)
	movq	%rdi, -9480(%rbp)
	movzbl	16(%r13), %eax
	cmpb	$39, %al
	je	.L25804
	cmpb	$40, %al
	je	.L25805
	movq	-5464(%rbp), %r15
	movq	8(%r15), %rdx
	movzbl	61(%rdx), %r8d
	movzbl	17(%rdx), %r10d
	shrb	$1, %r8b
	shrb	$5, %r10b
	movzbl	%r8b, %edi
	movl	%r10d, %r14d
	andl	$1, %r14d
	movl	%edi, -9472(%rbp)
	cmpl	$51, -9472(%rbp)
	movl	%r14d, -5616(%rbp)
	je	.L25806
	movslq	-9472(%rbp),%rsi
	movzwq	mode_bitsize(%rsi,%rsi), %rdx
	movq	%rdx, -2672(%rbp)
.L22238:
	testq	%rbx, %rbx
	jne	.L25807
.L22305:
	movzbl	16(%r13), %edx
	cmpb	$40, %dl
	je	.L25808
	cmpb	$39, %dl
	je	.L25809
	leal	-43(%rdx), %ebx
	cmpb	$1, %bl
	jbe	.L25810
	cmpb	$57, %dl
	jne	.L22263
	movq	-2704(%rbp), %rax
	leaq	-2704(%rbp), %r9
	movq	8(%r13), %rdx
	testq	%rax, %rax
	je	.L22264
	movq	(%rax), %r8
.L22265:
	testq	%r8, %r8
	je	.L24192
	movq	128(%rdx), %rsi
.L22298:
	movq	24(%r8), %rdi
	testq	%rdi, %rdi
	movq	%rdi, %rdx
	je	.L24194
	.p2align 4,,7
.L22283:
	movq	8(%rdi), %r12
	cmpq	%rsi, 128(%r12)
	je	.L25811
	movzbl	16(%rdi), %eax
	cmpb	$47, %al
	je	.L22279
	cmpb	$51, %al
	je	.L22279
	movzbl	%al, %ecx 
	movzbl	tree_code_type(%rcx), %eax
	cmpb	$114, %al
	je	.L22282
	cmpb	$49, %al
	je	.L22282
	cmpb	$50, %al
	je	.L22282
	cmpb	$101, %al
	je	.L22282
	xorl	%edi, %edi
	.p2align 4,,7
.L22278:
	testq	%rdi, %rdi
	jne	.L22283
.L24194:
	testq	%rdx, %rdx
	je	.L24196
	.p2align 4,,7
.L22297:
	movq	8(%rdx), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$13, %al
	je	.L22289
	cmpb	$15, %al
	je	.L22289
.L22286:
	movzbl	16(%rdx), %eax
	cmpb	$47, %al
	je	.L22293
	cmpb	$51, %al
	je	.L22293
	movzbl	%al, %r14d 
	movzbl	tree_code_type(%r14), %eax
	cmpb	$114, %al
	je	.L22296
	cmpb	$49, %al
	je	.L22296
	cmpb	$50, %al
	je	.L22296
	cmpb	$101, %al
	je	.L22296
	xorl	%edx, %edx
	.p2align 4,,7
.L22292:
	testq	%rdx, %rdx
	jne	.L22297
.L24196:
	movq	(%r8), %r8
	testq	%r8, %r8
	jne	.L22298
.L24192:
	xorl	%edi, %edi
.L22276:
	testq	%rdi, %rdi
	je	.L22247
	movq	%rdi, %r13
	jmp	.L22305
.L22247:
	movq	-9488(%rbp), %rdi
	xorl	%esi, %esi
	call	host_integerp
	testl	%eax, %eax
	je	.L22306
	movq	sizetype_tab+24(%rip), %rdi
	movq	-9488(%rbp), %rsi
	call	convert
	movq	global_trees+152(%rip), %rdx
	movl	$61, %edi
	movq	%rax, %rsi
	call	size_binop
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L22306
	movq	-9480(%rbp), %rdx
	movl	$59, %edi
	call	size_binop
	testq	%rax, %rax
	movq	%rax, %rbx
	jne	.L25812
.L22306:
	movq	-9480(%rbp), %rdi
	xorl	%esi, %esi
	call	tree_low_cst
	movq	%rax, -2680(%rbp)
	movq	-9488(%rbp), %rax
	movq	%rax, -2688(%rbp)
.L22307:
	movl	-9472(%rbp), %r9d
	testl	%r9d, %r9d
	movl	%r9d, -2692(%rbp)
	jne	.L22309
	movl	-5612(%rbp), %r12d
	testl	%r12d, %r12d
	jne	.L25813
.L22309:
	movq	%r13, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	-2688(%rbp), %rdi
	movq	%rax, %r12
	movq	%rax, %r15
	testq	%rdi, %rdi
	jne	.L25814
.L22310:
	cmpw	$66, (%r12)
	je	.L25815
.L22320:
	movl	-2696(%rbp), %r10d
	testl	%r10d, %r10d
	je	.L22335
	cmpw	$66, (%r12)
	je	.L25816
.L22335:
	movq	-5464(%rbp), %rbx
	cmpb	$39, 16(%rbx)
	je	.L25817
.L22337:
	cmpw	$66, (%r12)
	je	.L25818
.L22339:
	movq	-5464(%rbp), %rdi
	call	get_alias_set
	movl	-5612(%rbp), %r15d
	movl	-2692(%rbp), %ecx
	movq	%rax, %rdi
	movq	-2672(%rbp), %rsi
	movq	-2680(%rbp), %rdx
	testl	%r15d, %r15d
	je	.L22341
	movq	-5464(%rbp), %rax
	movq	8(%rax), %r14
	movzbl	61(%r14), %r8d
	shrb	$1, %r8b
	movzbl	%r8b, %r9d
.L22342:
	movl	-5616(%rbp), %eax
	movq	-5472(%rbp), %r8
	movl	%eax, (%rsp)
	movq	8(%r13), %rbx
	movl	%edi, 16(%rsp)
	movq	%r12, %rdi
	movq	%rbx, 8(%rsp)
	call	store_field
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	preserve_temp_slots
	call	free_temp_slots
	call	pop_temp_slots
	movl	-5612(%rbp), %r13d
	testl	%r13d, %r13d
	jne	.L25819
.L22343:
	xorl	%r13d, %r13d
	jmp	.L7871
.L25819:
	movq	-5464(%rbp), %rdi
	movq	-5472(%rbp), %rsi
	movq	8(%rdi), %rdx
	movzbl	61(%rdx), %r12d
	shrb	$1, %r12b
	movzbl	%r12b, %edi
.L25112:
	movq	8(%rsi), %rcx
	movzbl	61(%rcx), %r9d
	movzbl	17(%rdx), %ecx
	movq	%rbx, %rdx
	shrb	$1, %r9b
	shrb	$5, %cl
	movzbl	%r9b, %esi
	andl	$1, %ecx
.L25084:
	call	convert_modes
	jmp	.L23191
.L22341:
	xorl	%r9d, %r9d
	jmp	.L22342
.L25818:
	movq	-5464(%rbp), %rdi
	call	can_address_p
	testl	%eax, %eax
	jne	.L22339
	cmpq	%r15, %r12
	je	.L25820
.L22340:
	orb	$1, 3(%r12)
	jmp	.L22339
.L25820:
	movq	%r12, %rdi
	call	copy_rtx
	movq	%rax, %r12
	jmp	.L22340
	.p2align 6,,7
.L25817:
	movq	40(%rbx), %r11
	testb	$16, 17(%r11)
	je	.L22337
	cmpq	%r15, %r12
	je	.L25821
.L22338:
	orb	$4, 3(%r12)
	jmp	.L22337
.L25821:
	movq	%r12, %rdi
	call	copy_rtx
	movq	%rax, %r12
	jmp	.L22338
	.p2align 6,,7
.L25816:
	cmpq	%r15, %r12
	je	.L25822
.L22336:
	orb	$8, 3(%r12)
	jmp	.L22335
.L25822:
	movq	%r12, %rdi
	call	copy_rtx
	movq	%rax, %r12
	jmp	.L22336
	.p2align 6,,7
.L25815:
	movq	16(%r12), %rax
	xorl	%ebx, %ebx
	testq	%rax, %rax
	je	.L22322
	movq	8(%rax), %rbx
.L22322:
	movq	%r12, %rdi
	call	shallow_copy_rtx
	xorl	%edx, %edx
	movq	-5464(%rbp), %rsi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	set_mem_attributes
	movq	16(%r12), %rax
	testq	%rax, %rax
	je	.L22324
	cmpq	%rbx, 8(%rax)
.L25027:
	je	.L22320
	testq	%rax, %rax
	je	.L22320
	movq	16(%rax), %rsi
	testq	%rsi, %rsi
	je	.L22320
	movq	-2680(%rbp), %r9
	cmpq	$-1, %r9
	leaq	7(%r9), %r14
	movq	%r9, %rax
	cmovle	%r14, %rax
	sarq	$3, %rax
	testq	%rax, %rax
	je	.L22320
	movq	8(%rsi), %rsi
	xorl	%edi, %edi
	subq	%rax, %rsi
	call	gen_rtx_CONST_INT
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	set_mem_offset
	jmp	.L22320
	.p2align 6,,7
.L22324:
	testq	%rbx, %rbx
	jmp	.L25027
.L25814:
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	call	expand_expr
	cmpw	$66, (%r12)
	movq	%rax, %r14
	jne	.L25507
	movzbl	2(%rax), %ecx
	movl	ptr_mode(%rip), %edi
	cmpl	%edi, %ecx
	je	.L22312
	movq	%rax, %rsi
	xorl	%edx, %edx
	call	convert_to_mode
	movq	%rax, %r14
.L22312:
	movl	(%r12), %eax
	andl	$16777215, %eax
	cmpl	$3342402, %eax
	je	.L25823
.L22313:
	movq	-5464(%rbp), %rax
	movq	-2688(%rbp), %rdi
	movq	8(%rax), %rbx
	call	highest_pow2_factor
	movq	%r12, %rdi
	movl	64(%rbx), %esi
	shrl	$3, %esi
	mov	%esi, %edx
	movq	%r14, %rsi
	cmpq	%rax, %rdx
	cmovl	%rax, %rdx
	call	offset_address
	movq	%rax, %r12
	jmp	.L22310
.L25823:
	movq	8(%r12), %r11
	cmpb	$0, 2(%r11)
	je	.L22313
	movq	-2672(%rbp), %rdx
	testq	%rdx, %rdx
	jle	.L22313
	movq	-2680(%rbp), %rax
	movq	%rdx, %r10
	cqto
	idivq	%r10
	testq	%rdx, %rdx
	jne	.L22313
	movl	-2692(%rbp), %edi
	call	get_mode_alignment
	movq	-2672(%rbp), %rdx
	mov	%eax, %r8d
	movq	%rdx, %rax
	cqto
	idivq	%r8
	testq	%rdx, %rdx
	jne	.L22313
	movl	-2692(%rbp), %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L22314
	cmpl	%eax, 32(%rdx)
.L25026:
	jne	.L22313
	movq	-2680(%rbp), %rdx
	movl	-2692(%rbp), %esi
	movq	%r12, %rdi
	movl	$1, %ecx
	movl	$1, %r8d
	cmpq	$-1, %rdx
	leaq	7(%rdx), %rbx
	cmovle	%rbx, %rdx
	sarq	$3, %rdx
	call	adjust_address_1
	movq	$0, -2680(%rbp)
	movq	%rax, %r12
	jmp	.L22313
.L22314:
	cmpl	$8, %eax
	jmp	.L25026
.L25507:
	movl	$.LC0, %edi
	movl	$3686, %esi
	movl	$.LC19, %edx
	jmp	.L25086
	.p2align 6,,7
.L25813:
	movq	%r13, %rdi
	call	stabilize_reference
	movq	%rax, %r13
	jmp	.L22309
.L25812:
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	host_integerp
	testl	%eax, %eax
	je	.L22306
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	tree_low_cst
	movq	$0, -2688(%rbp)
	movq	%rax, -2680(%rbp)
	jmp	.L22307
	.p2align 6,,7
.L22296:
	movq	32(%rdx), %rdx
	jmp	.L22292
.L22293:
	movq	40(%rdx), %rdx
	jmp	.L22292
.L22289:
	movq	8(%rcx), %r11
	cmpq	%rsi, 128(%r11)
	jne	.L22286
	testq	%r9, %r9
	je	.L22290
	movq	%r8, (%r9)
.L22290:
	movl	$41, %edi
	call	build1
	movq	%rax, %rdi
	jmp	.L22276
	.p2align 6,,7
.L22282:
	movq	32(%rdi), %rdi
	jmp	.L22278
.L22279:
	movq	40(%rdi), %rdi
	jmp	.L22278
.L25811:
	testq	%r9, %r9
	je	.L22276
	movq	%r8, (%r9)
	jmp	.L22276
.L22264:
	movq	placeholder_list(%rip), %r8
	jmp	.L22265
.L22263:
	leal	-116(%rdx), %r10d
	cmpb	$1, %r10b
	jbe	.L22250
	leal	-114(%rdx), %edi
	cmpb	$1, %dil
	ja	.L22247
	movq	32(%r13), %rsi
	movq	8(%r13), %rbx
	movq	8(%rsi), %rdx
	movzbl	61(%rbx), %r15d
	movzbl	61(%rdx), %r8d
	andb	$-2, %r15b
	andb	$-2, %r8b
	cmpb	%r8b, %r15b
	jne	.L22247
.L22250:
	testb	$8, 17(%r13)
	je	.L22304
	movl	$1, -2696(%rbp)
.L22304:
	movq	32(%r13), %r13
	jmp	.L22305
.L25810:
	movq	32(%r13), %r15
	xorl	%r12d, %r12d
	movq	40(%r13), %rbx
	movq	8(%r15), %rdx
	movq	24(%rdx), %rax
	testq	%rax, %rax
	je	.L22258
	movq	104(%rax), %r12
.L22258:
	movq	8(%rdx), %r9
	testq	%r12, %r12
	movq	40(%r9), %r14
	jne	.L25824
.L22259:
	testb	$2, 17(%rbx)
	je	.L25825
.L22260:
	testb	$2, 17(%r14)
	je	.L25826
.L22261:
	movq	sizetype_tab(%rip), %rdi
	movq	%rbx, %rsi
	call	convert
	movq	%r14, %rdx
	movl	$61, %edi
	movq	%rax, %rsi
	call	size_binop
	movq	-9488(%rbp), %rsi
	movl	$59, %edi
	movq	%rax, %rdx
	call	size_binop
	movq	%rax, -9488(%rbp)
	jmp	.L22250
.L25826:
	movq	%r14, %rdi
	call	contains_placeholder_p
	testl	%eax, %eax
	je	.L22261
	movq	sizetype_tab(%rip), %rsi
	movq	%r14, %rdx
	movl	$58, %edi
	movq	%r15, %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %r14
	jmp	.L22261
	.p2align 6,,7
.L25825:
	movq	%rbx, %rdi
	call	contains_placeholder_p
	testl	%eax, %eax
	je	.L22260
	movq	8(%rbx), %rsi
	movq	%rbx, %rdx
	movl	$58, %edi
	movq	%r13, %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %rbx
	jmp	.L22260
	.p2align 6,,7
.L25824:
	movq	%r12, %rdi
	call	integer_zerop
	testl	%eax, %eax
	jne	.L22259
	movq	8(%rbx), %rsi
	movq	%rbx, %rdx
	movl	$60, %edi
	movq	%r12, %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	movq	%rax, %rbx
	jmp	.L22259
	.p2align 6,,7
.L25809:
	movq	40(%r13), %r12
	movq	88(%r12), %rbx
	testq	%rbx, %rbx
	je	.L22247
	testb	$2, 17(%rbx)
	je	.L25827
.L22253:
	movq	-9488(%rbp), %rsi
	movl	$59, %edi
	movq	%rbx, %rdx
	call	size_binop
	movq	-9480(%rbp), %rsi
	movl	$59, %edi
	movq	%rax, -9488(%rbp)
	movq	160(%r12), %rdx
.L25025:
	call	size_binop
	movq	%rax, -9480(%rbp)
	jmp	.L22250
.L25827:
	movq	%rbx, %rdi
	call	contains_placeholder_p
	testl	%eax, %eax
	je	.L22253
	movq	sizetype_tab(%rip), %rsi
	movq	%rbx, %rdx
	movl	$58, %edi
	movq	%r13, %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %rbx
	jmp	.L22253
	.p2align 6,,7
.L25808:
	movq	-9480(%rbp), %rsi
	movq	48(%r13), %rdx
	movl	$59, %edi
	jmp	.L25025
.L25807:
	movq	%rbx, %rdi
	movl	$1, %esi
	call	host_integerp
	testl	%eax, %eax
	jne	.L22244
	movl	$51, -9472(%rbp)
	movq	$-1, (%r12)
	jmp	.L22305
.L22244:
	movq	%rbx, %rdi
	movl	$1, %esi
	call	tree_low_cst
	movq	%rax, (%r12)
	jmp	.L22305
	.p2align 6,,7
.L25806:
	movq	32(%rdx), %rbx
	jmp	.L22238
.L25805:
	movq	-5464(%rbp), %rax
	movzbl	17(%rax), %r11d
	movq	40(%rax), %rbx
	shrb	$5, %r11b
	movl	%r11d, %ecx
	andl	$1, %ecx
	movl	%ecx, -5616(%rbp)
	jmp	.L22238
.L25804:
	movq	40(%r13), %rax
	testb	$16, 49(%rax)
	movq	40(%rax), %rbx
	jne	.L22237
	movzbl	48(%rax), %r15d
	movl	%r15d, -9472(%rbp)
.L22237:
	movzbl	17(%rax), %r9d
	shrb	$5, %r9b
	movl	%r9d, %esi
	andl	$1, %esi
	movl	%esi, -5616(%rbp)
	jmp	.L22238
.L25763:
	movq	-5472(%rbp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	%rax, %r13
	jmp	.L25054
.L25762:
	movzbl	16(%rdx), %eax
	cmpb	$86, %al
	je	.L21782
	cmpb	$88, %al
	jne	.L21781
.L21782:
	movq	-5472(%rbp), %rbx
	movq	-5464(%rbp), %rsi
	cmpq	%rsi, 32(%rbx)
	jne	.L21781
	movq	40(%rbx), %r14
	cmpb	$39, 16(%r14)
	jne	.L21781
	movq	40(%rsi), %rcx
	movq	40(%rcx), %rdi
	call	integer_onep
	testl	%eax, %eax
	jne	.L25828
	movq	-5464(%rbp), %r14
	movzbl	16(%r14), %ecx
	jmp	.L21781
.L25828:
	movq	40(%rbx), %r15
	movq	40(%r15), %rsi
	movq	40(%rsi), %rdi
	call	integer_onep
	testl	%eax, %eax
	jne	.L25829
	movq	-5464(%rbp), %r13
	movzbl	16(%r13), %ecx
	jmp	.L21781
.L25829:
	call	gen_label_rtx
	xorl	%edx, %edx
	movq	%rax, -5480(%rbp)
	movq	40(%rbx), %rdi
	movq	-5480(%rbp), %rsi
	movzbl	16(%rbx), %r10d
	cmpb	$86, %r10b
	cmovne	%rdx, %rsi
	cmpb	$88, %r10b
	cmove	-5480(%rbp), %rdx
	call	do_jump
	movq	%rbx, %rax
	addq	$8, %rax
	cmpb	$86, 16(%rbx)
	je	.L25830
	movq	global_trees+88(%rip), %rsi
.L21794:
	movq	(%rax), %rdi
	call	convert
	movq	-5464(%rbp), %rbx
	movq	$0, -9368(%rbp)
	movq	%rax, %r15
	movzbl	16(%rbx), %edx
	testb	%dl, %dl
	je	.L25831
	leal	-39(%rdx), %r12d
	cmpb	$1, %r12b
	jbe	.L21800
	cmpb	$43, %dl
	je	.L21800
	cmpb	$44, %dl
	je	.L21800
	cmpb	$53, 16(%rax)
	je	.L25832
.L21910:
	cmpq	$0, -9368(%rbp)
	je	.L25833
.L22166:
	movq	-5464(%rbp), %rax
	movzbl	16(%rax), %r9d
	cmpb	$36, %r9b
	je	.L25834
.L22221:
	call	push_temp_slots
	movq	-9368(%rbp), %rsi
	movq	%r15, %rdi
	xorl	%edx, %edx
	call	store_expr
	movq	%rax, %rdi
.L25023:
	call	preserve_temp_slots
	call	free_temp_slots
	call	pop_temp_slots
.L21798:
	call	do_pending_stack_adjust
	movq	-5480(%rbp), %rdi
.L25122:
	call	emit_label
	jmp	.L25052
.L25834:
	movq	-9368(%rbp), %r10
	movzwl	(%r10), %edx
	cmpw	$61, %dx
	je	.L22168
	cmpw	$39, %dx
	je	.L22168
	cmpb	$36, %r9b
	jne	.L22221
	cmpb	$41, 16(%r15)
	jne	.L22221
	movq	cfun(%rip), %r14
	movzbl	424(%r14), %r11d
	andb	$3, %r11b
	decb	%r11b
	jne	.L22221
	call	push_temp_slots
	movq	%r15, %rdi
	call	expr_size
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%r15, %rdi
	xorl	%esi, %esi
	movq	%rax, %r12
	call	expand_expr
	movq	%r12, %rsi
	movq	sizetype_tab(%rip), %rcx
	movq	%rax, %r15
	movzbl	17(%rcx), %edx
	movzbl	61(%rcx), %eax
	shrb	$5, %dl
	shrb	$1, %al
	andl	$1, %edx
	movzbl	%al, %edi
	call	convert_to_mode
	movq	-9368(%rbp), %r13
	movl	$3, %ecx
	movl	target_flags(%rip), %r9d
	movq	8(%r15), %r8
	movq	%rax, 16(%rsp)
	movq	sizetype_tab(%rip), %rbx
	movq	libfunc_table+96(%rip), %rdi
	andl	$33554432, %r9d
	movq	%r8, (%rsp)
	setne	%sil
	xorl	%eax, %eax
	movzbl	%sil, %r9d
	xorl	%esi, %esi
	addl	$4, %r9d
	movl	%r9d, 8(%rsp)
	movzbl	61(%rbx), %edx
	shrb	$1, %dl
	movzbl	%dl, %r10d
	xorl	%edx, %edx
	movl	%r10d, 24(%rsp)
	movq	8(%r13), %r8
	call	emit_library_call
.L25024:
	movq	-9368(%rbp), %rdi
	jmp	.L25023
.L22168:
	call	push_temp_slots
	movq	-9368(%rbp), %rcx
	xorl	%esi, %esi
	movq	%r15, %rdi
	movzbl	2(%rcx), %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	-9368(%rbp), %rsi
	movq	%rax, -5576(%rbp)
	cmpw	$39, (%rsi)
	je	.L25835
	movq	-9368(%rbp), %rdi
	movq	-5576(%rbp), %rsi
.L25111:
	call	emit_move_insn
	jmp	.L25024
.L25835:
	movq	8(%r15), %rdi
	call	int_size_in_bytes
	movq	-9368(%rbp), %r15
	movl	%eax, -5580(%rbp)
	cmpw	$39, (%r15)
	jne	.L25561
	movq	-9368(%rbp), %r12
	movq	8(%r12), %rcx
	movq	8(%rcx), %r11
	movl	(%rcx), %edi
	cmpq	$0, 8(%r11)
	movslq	%edi,%rbx
	sete	%r8b
	leaq	15(,%rbx,8), %r13
	andq	$-16, %r13
	subq	%r13, %rsp
	leaq	32(%rsp), %r14
	movzbl	%r8b, %edx
	movq	%r14, -5592(%rbp)
	movl	%edx, -9376(%rbp)
	movl	-9376(%rbp), %eax
	cmpl	%edi, %eax
	movl	%eax, -9372(%rbp)
	jge	.L24187
.L22204:
	movslq	-9372(%rbp),%r15
	movl	-5580(%rbp), %r9d
	testl	%r9d, %r9d
	movq	8(%rcx,%r15,8), %rsi
	movq	%r15, -5600(%rbp)
	movq	8(%rsi), %rcx
	movq	16(%rsi), %r10
	movzbl	2(%rcx), %r13d
	movq	8(%r10), %r14
	movslq	%r13d,%rax
	movq	%rax, -5608(%rbp)
	movzbl	mode_size(%rax), %r15d
	js	.L22177
	movslq	-5580(%rbp),%rdi
	mov	%r15d, %edx
	leaq	(%rdx,%r14), %rbx
	cmpq	%rdi, %rbx
	jle	.L22177
	movl	-5580(%rbp), %r15d
	subl	%r14d, %r15d
	je	.L25560
.L22177:
	movq	-5576(%rbp), %r12
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L22179
	leal	-67(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L22181
	cmpw	$54, %dx
	je	.L22181
	cmpw	$55, %dx
	je	.L22181
	cmpw	$58, %dx
	je	.L22181
	cmpw	$134, %dx
	je	.L22181
	cmpw	$56, %dx
	je	.L22181
	cmpw	$140, %dx
	je	.L22181
.L22180:
	movq	-5576(%rbp), %r12
	movl	%r13d, %edi
	movzbl	2(%r12), %eax
	testb	%al, %al
	je	.L25021
	movzbl	%al, %edi
.L25021:
	call	gen_reg_rtx
	movq	-5576(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	emit_move_insn
.L22179:
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L25836
.L22184:
	cmpw	$65, %dx
	je	.L25837
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L22201
	cmpw	$54, %dx
	je	.L22201
	cmpw	$55, %dx
	je	.L22201
	cmpw	$58, %dx
	je	.L22201
	cmpw	$134, %dx
	je	.L22201
	cmpw	$56, %dx
	je	.L22201
	cmpw	$140, %dx
	je	.L22201
	cmpw	$61, %dx
	je	.L25838
.L22200:
	movslq	-5580(%rbp),%rcx
	leal	0(,%r15,8), %edi
	leaq	0(,%r14,8), %rdx
	mov	%edi, %esi
	xorl	%r8d, %r8d
	movl	%r13d, %r9d
	movq	%r12, %rdi
	movl	%r13d, (%rsp)
	movq	%rcx, 8(%rsp)
	movl	$1, %ecx
	call	extract_bit_field
.L25022:
	movq	-5600(%rbp), %r8
	movq	-5592(%rbp), %rsi
	movq	%rax, (%rsi,%r8,8)
.L22175:
	movq	-9368(%rbp), %r12
	incl	-9372(%rbp)
	movl	-9372(%rbp), %eax
	movq	8(%r12), %rcx
	cmpl	(%rcx), %eax
	jl	.L22204
.L24187:
	movq	cfun(%rip), %r11
	movq	16(%r11), %r15
	movq	40(%r15), %rbx
	testq	%rbx, %rbx
	je	.L24189
.L22210:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L25839
	call	emit_insn
	movq	%rax, 16(%rbx)
.L22209:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %r13
	movq	16(%rdx), %r10
	testq	%r13, %r13
	movq	%r13, %rbx
	movq	%r13, 40(%r10)
	jne	.L22210
	movq	-9368(%rbp), %rbx
	movq	8(%rbx), %rcx
.L24189:
	movl	-9376(%rbp), %edi
	cmpl	(%rcx), %edi
	jge	.L25024
.L22216:
	movslq	-9376(%rbp),%r15
	movq	-5592(%rbp), %r12
	salq	$3, %r15
	movq	8(%r15,%rcx), %rax
	movq	(%r12,%r15), %rsi
	movq	8(%rax), %rdi
	call	emit_move_insn
	movq	-9368(%rbp), %rcx
	incl	-9376(%rbp)
	movl	-9376(%rbp), %r8d
	movq	8(%rcx), %rsi
	cmpl	(%rsi), %r8d
	movq	%rsi, %rcx
	jl	.L22216
	jmp	.L25024
.L25839:
	movq	8(%rdi), %r9
	movq	8(%r9), %r14
	movq	%r14, 16(%rbx)
	call	emit_insn
	jmp	.L22209
.L25838:
	movzbl	2(%r12), %edx
	cmpl	%r13d, %edx
	jne	.L22200
.L22201:
	movq	-5600(%rbp), %r10
	movq	-5592(%rbp), %r13
	movq	%r12, (%r13,%r10,8)
	jmp	.L22175
.L25837:
	testq	%r14, %r14
	jne	.L24445
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %r11
	movzbl	mode_size(%r11), %r8d
	cmpl	%r8d, %r15d
	je	.L22190
.L22191:
	movzbq	2(%rdx), %r9
	movzbq	mode_size(%r9), %rdx
	cmpq	%rdx, %r14
	je	.L25840
.L22189:
	testq	%r14, %r14
	jne	.L22779
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbx
	movzbq	mode_size(%rbx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %r14
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r14, %rdi
	movl	%r13d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	jmp	.L25022
.L25840:
	movq	16(%r12), %rcx
	movzbq	2(%rcx), %rsi
	movzbl	mode_size(%rsi), %r10d
	cmpl	%r10d, %r15d
	jne	.L22189
.L22190:
	xorl	%edi, %edi
	movq	-5600(%rbp), %r8
	movq	-5592(%rbp), %rax
	testq	%r14, %r14
	setne	%dil
	leaq	(%rax,%r8,8), %rbx
	movq	8(%r12,%rdi,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r14d
	cmpw	$1, %r14w
	jbe	.L22175
	cmpw	$54, %dx
	je	.L22175
	cmpw	$55, %dx
	je	.L22175
	cmpw	$58, %dx
	je	.L22175
	cmpw	$134, %dx
	je	.L22175
	cmpw	$56, %dx
	je	.L22175
	cmpw	$140, %dx
	je	.L22175
	cmpw	$61, %dx
	je	.L25841
.L22195:
	leal	0(,%r15,8), %r11d
	movl	%r13d, (%rsp)
	xorl	%edx, %edx
	movslq	-5580(%rbp),%r15
	mov	%r11d, %esi
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r13d, %r9d
	movq	%r15, 8(%rsp)
	movq	(%rbx), %rdi
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L22175
.L25841:
	movzbl	2(%rcx), %r12d
	cmpl	%r13d, %r12d
	jne	.L22195
	jmp	.L22175
.L24445:
	movq	8(%r12), %rdx
	jmp	.L22191
.L25836:
	movl	%r13d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L22185
	cmpl	%eax, 32(%rdx)
	jae	.L22186
.L24444:
	movzwl	(%r12), %edx
	jmp	.L22184
.L22186:
	movl	%r13d, %edi
	leaq	0(,%r14,8), %rbx
	call	get_mode_alignment
	mov	%eax, %esi
	movq	%rbx, %rax
	cqto
	idivq	%rsi
	testq	%rdx, %rdx
	jne	.L24444
	movq	-5608(%rbp), %rax
	movzbl	mode_size(%rax), %ecx
	cmpl	%ecx, %r15d
	jne	.L24444
	movl	%r13d, %edi
	call	gen_reg_rtx
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-5592(%rbp), %rdi
	movq	-5600(%rbp), %rbx
	movl	%r13d, %esi
	movq	%r14, %rdx
	leaq	(%rdi,%rbx,8), %r15
	movq	%r12, %rdi
	movq	%rax, (%r15)
	call	adjust_address_1
	movq	(%r15), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L22175
.L22185:
	cmpl	$8, %eax
	ja	.L24444
	jmp	.L22186
.L22181:
	movq	-5576(%rbp), %r9
	movzbl	2(%r9), %edx
	movzbl	%dl, %r11d
	cmpl	%r13d, %r11d
	je	.L22179
	testb	%dl, %dl
	je	.L22179
	jmp	.L22180
.L25833:
	movq	-5464(%rbp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4, %ecx
	call	expand_expr
	movq	%rax, -9368(%rbp)
	jmp	.L22166
.L25832:
	movq	%rax, %rdi
	call	aggregate_value_p
	testl	%eax, %eax
	jne	.L21910
	movq	8(%r15), %rsi
	movq	32(%rsi), %rcx
	cmpb	$25, 16(%rcx)
	jne	.L21910
	movq	-5464(%rbp), %rbx
	movzbl	16(%rbx), %r8d
	subb	$34, %r8b
	cmpb	$1, %r8b
	ja	.L21911
	movq	144(%rbx), %rax
	testq	%rax, %rax
	je	.L25842
.L21912:
	cmpw	$61, (%rax)
	je	.L21910
.L21911:
	call	push_temp_slots
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movq	%r15, %rdi
	call	expand_expr
	cmpq	$0, -9368(%rbp)
	movq	%rax, %r14
	je	.L25843
.L21913:
	movq	-9368(%rbp), %r11
	cmpw	$39, (%r11)
	je	.L25844
	movq	-9368(%rbp), %rax
	cmpb	$51, 2(%rax)
	je	.L25845
	movq	-9368(%rbp), %rdi
	movq	%r14, %rsi
	jmp	.L25111
.L25845:
	movq	%r15, %rdi
	movq	%rax, -9336(%rbp)
	call	expr_size
	movl	$8, %edx
	movq	-9368(%rbp), %r8
	movq	%rax, %r13
	movq	16(%r8), %rcx
	testq	%rcx, %rcx
	je	.L21968
	movl	32(%rcx), %edx
.L21968:
	movq	16(%r14), %rax
	testq	%rax, %rax
	je	.L21969
	cmpl	32(%rax), %edx
	jb	.L21970
.L21965:
	testq	%rax, %rax
	movl	$8, -9328(%rbp)
	je	.L21966
	movl	32(%rax), %eax
	movl	%eax, -9328(%rbp)
.L21966:
	movq	-9368(%rbp), %r11
	cmpb	$51, 2(%r11)
	jne	.L25547
	cmpb	$51, 2(%r14)
	jne	.L25546
	movq	-9368(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L21977
	cmpl	$66, %eax
	je	.L25846
.L21981:
	cmpl	$75, %eax
	je	.L21985
	cmpl	$78, %eax
	je	.L21985
.L21980:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L21990
	cmpl	$66, %eax
	je	.L25847
.L21994:
	cmpl	$75, %eax
	je	.L21998
	cmpl	$78, %eax
	je	.L21998
.L21993:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L22003
	cmpl	$66, %eax
	je	.L25848
.L22007:
	cmpl	$75, %eax
	je	.L22011
	cmpl	$78, %eax
	je	.L22011
.L22006:
	movq	-9336(%rbp), %rdi
	cmpw	$66, (%rdi)
	jne	.L25545
	cmpw	$66, (%r14)
	jne	.L25544
	testq	%r13, %r13
	je	.L25543
	cmpw	$54, (%r13)
	je	.L25849
.L22019:
	shrl	$3, -9328(%rbp)
	xorl	%edi, %edi
	mov	-9328(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -5544(%rbp)
	testl	%r12d, %r12d
	je	.L24185
.L22152:
	movslq	%r12d,%rsi
	movl	movstr_optab(,%rsi,4), %edx
	movq	%rsi, -5552(%rbp)
	cmpl	$1317, %edx
	je	.L22138
	cmpw	$54, (%r13)
	je	.L25850
.L22142:
	testb	$2, target_flags+3(%rip)
	je	.L22143
	movq	-5552(%rbp), %rbx
	cmpw	$63, mode_bitsize(%rbx,%rbx)
.L25020:
	jbe	.L22138
.L22141:
	movslq	%edx,%rdi
	leaq	(%rdi,%rdi,4), %rcx
	movq	%rdi, -5560(%rbp)
	movq	insn_data+24(,%rcx,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L22145
	movq	-9336(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L22138
.L22145:
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L25851
.L22146:
	movq	72(%r15), %rax
	testq	%rax, %rax
	je	.L22147
	xorl	%esi, %esi
	movq	-5544(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L22138
.L22147:
	call	get_last_insn
	movl	$1, %edx
	movq	%r13, %rsi
	movl	%r12d, %edi
	movq	%rax, -5568(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r15), %rax
	testq	%rax, %rax
	jne	.L25852
.L22148:
	movq	-5560(%rbp), %rdx
	movq	-9336(%rbp), %rdi
	xorl	%eax, %eax
	movq	%r14, %rsi
	movq	-5544(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24528
	movq	-5568(%rbp), %rdi
	call	delete_insns_since
.L22138:
	movq	-5552(%rbp), %r8
	movzbl	mode_wider_mode(%r8), %r12d
	testl	%r12d, %r12d
	jne	.L22152
.L24185:
	testb	$2, target_flags+3(%rip)
	movq	-9336(%rbp), %r9
	movl	$0, volatile_ok(%rip)
	setne	%sil
	movzbl	%sil, %edi
	movq	8(%r9), %rsi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	8(%r14), %rsi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %r15
	setne	%al
	movzbl	%al, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%r13, %rsi
	movq	sizetype_tab(%rip), %r11
	movq	%rax, %rbx
	movzbl	61(%r11), %r14d
	shrb	$1, %r14b
	movzbl	%r14b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r13
	je	.L25853
.L22161:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r15, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r14
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r13, %rsi
	movq	%rax, (%r14)
	movq	%rax, %r12
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%r12)
	movq	(%r14), %r11
	movq	8(%rdx), %rdi
	movq	(%r11), %r8
	movq	$0, (%r8)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r14, %rcx
	movq	fn.1(%rip), %rbx
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%rbx), %r13
	movq	8(%r13), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r15)
	je	.L25024
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r15, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L25024
.L25853:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r12
	xorl	%esi, %esi
	orb	$1, 49(%r12)
	movq	fn.1(%rip), %rdi
	orb	$8, 18(%rdi)
	movq	fn.1(%rip), %rcx
	orb	$64, 50(%rcx)
	movq	fn.1(%rip), %r10
	orb	$2, 18(%r10)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L22161
.L24528:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L25024
.L25852:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L22148
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L22148
.L25851:
	movq	%r14, %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L22138
	jmp	.L22146
.L22143:
	movq	-5552(%rbp), %r10
	cmpw	$31, mode_bitsize(%r10,%r10)
	jmp	.L25020
.L25850:
	movq	mode_mask_array(,%rsi,8), %r15
	shrq	$1, %r15
	cmpq	%r15, 8(%r13)
	jbe	.L22141
	jmp	.L22142
.L25849:
	movq	8(%r13), %r12
	xorl	%r15d, %r15d
	movl	$17, %esi
.L22032:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L24174
.L22029:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L22029
.L24174:
	testl	%edi, %edi
	je	.L22022
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L22031
	call	get_mode_alignment
	movl	$128, %esi
	cmpl	%eax, %esi
	jb	.L22031
	movzbq	mode_size(%rbx), %r8
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r8
	addq	%rax, %r15
	movq	%rdx, %r12
.L22031:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L22032
.L22022:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L22035
	movq	ix86_cost(%rip), %r11
	mov	40(%r11), %edx
	cmpq	%rdx, %r15
	jae	.L22019
.L22036:
	movq	8(%r14), %r15
	movq	-9336(%rbp), %rcx
	movq	8(%r13), %r12
	movq	-9336(%rbp), %rbx
	movq	$0, -2296(%rbp)
	movl	$0, -9348(%rbp)
	testb	$2, target_flags+3(%rip)
	movq	%r15, -2320(%rbp)
	setne	%r13b
	movq	8(%rcx), %r9
	movq	%rbx, -2352(%rbp)
	xorl	%ecx, %ecx
	movzwl	(%r9), %edx
	movq	%r9, -9344(%rbp)
	movzbl	%r13b, %esi
	leal	5(,%rsi,4), %r13d
	leal	-96(%rdx), %edi
	cmpw	$1, %di
	jbe	.L22041
	cmpw	$99, %dx
	je	.L22041
	cmpw	$98, %dx
	je	.L22041
.L22040:
	movq	-9344(%rbp), %r10
	movl	%ecx, -2336(%rbp)
	xorl	%edx, %edx
	movzwl	(%r10), %eax
	cmpw	$96, %ax
	je	.L22043
	cmpw	$98, %ax
	je	.L22043
.L22042:
	movq	-9344(%rbp), %r8
	movq	%r14, -2328(%rbp)
	movl	%edx, -2288(%rbp)
	xorl	%ecx, %ecx
	movq	%r8, -2344(%rbp)
	movzwl	(%r15), %edx
	leal	-96(%rdx), %r14d
	cmpw	$1, %r14w
	jbe	.L22046
	cmpw	$99, %dx
	je	.L22046
	cmpw	$98, %dx
	je	.L22046
.L22045:
	movl	-2288(%rbp), %eax
	movl	%ecx, -2312(%rbp)
	movl	$0, -2308(%rbp)
	movl	$0, -2332(%rbp)
	testl	%eax, %eax
	je	.L22047
	movq	%r12, -2296(%rbp)
.L22047:
	movl	-2312(%rbp), %edx
	movq	%r12, -2304(%rbp)
	testl	%edx, %edx
	je	.L22049
	movl	-2336(%rbp), %r11d
	testl	%r11d, %r11d
	jne	.L22048
.L22049:
	xorl	%r14d, %r14d
	movl	$17, %esi
.L22062:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L24177
.L22059:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L22059
.L24177:
	testl	%edi, %edi
	je	.L22052
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L22061
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L22061
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r14
	movq	%rdx, %r12
.L22061:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L22062
.L22052:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r14
	jbe	.L22048
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L24179
.L22070:
	movslq	%ecx,%r14
	movzbl	mode_size(%r14), %r8d
	cmpl	%r13d, %r8d
	cmovae	-9348(%rbp), %ecx
	movl	%ecx, -9348(%rbp)
	movzbl	mode_wider_mode(%r14), %ecx
	testl	%ecx, %ecx
	jne	.L22070
.L24179:
	movl	-2312(%rbp), %eax
	testl	%eax, %eax
	jne	.L22076
	movzwl	(%r15), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L22074
	cmpw	$54, %dx
	je	.L22074
	cmpw	$55, %dx
	je	.L22074
	cmpw	$58, %dx
	je	.L22074
	cmpw	$134, %dx
	je	.L22074
	cmpw	$56, %dx
	je	.L22074
	cmpw	$140, %dx
	je	.L22074
.L22076:
	movl	-2336(%rbp), %eax
	testl	%eax, %eax
	jne	.L22048
	movq	-9344(%rbp), %r9
	movzwl	(%r9), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L22078
	cmpw	$54, %dx
	je	.L22078
	cmpw	$55, %dx
	je	.L22078
	cmpw	$58, %dx
	je	.L22078
	cmpw	$134, %dx
	je	.L22078
	cmpw	$56, %dx
	je	.L22078
	cmpw	$140, %dx
	je	.L22078
.L22048:
	cmpl	$1, %r13d
	jbe	.L22081
.L22132:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L24182
.L22088:
	movslq	%ecx,%rbx
	movzbl	mode_size(%rbx), %edx
	cmpl	%r13d, %edx
	cmovae	-9348(%rbp), %ecx
	movl	%ecx, -9348(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L22088
.L24182:
	movl	-9348(%rbp), %eax
	testl	%eax, %eax
	je	.L22081
	movslq	-9348(%rbp),%r14
	movq	%r14, %r13
	salq	$4, %r13
	addq	optab_table+240(%rip), %r13
	movl	8(%r13), %ebx
	cmpl	$1317, %ebx
	je	.L22090
	movl	-9348(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L22090
	movzbq	mode_size(%r14), %rdx
	movslq	%ebx,%r12
	movq	$0, -9360(%rbp)
	cmpq	%rdx, -2304(%rbp)
	leaq	(%r12,%r12,4), %rdi
	leaq	-2352(%rbp), %r12
	movq	insn_data+16(,%rdi,8), %r15
	movq	%rdx, -6208(%rbp)
	jb	.L22090
	movl	-2288(%rbp), %ecx
.L22130:
	testl	%ecx, %ecx
	je	.L22094
	subq	%rdx, 56(%r12)
.L22094:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L22095
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L22096
	movl	-9348(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L25016:
	movq	%rax, -9360(%rbp)
.L22095:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L22098
	movq	24(%r12), %rdi
	movl	-9348(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L25017:
	cmpq	$0, (%r12)
	movq	%rax, %r13
	jne	.L25854
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L22104
	movzbl	mode_size(%r14), %r10d
	leal	7(%r10), %edx
	andl	$-8, %edx
.L22105:
	movq	cfun(%rip), %r9
	andl	$33554432, %esi
	movq	16(%r9), %r11
	leaq	8(%r11), %rdi
	movl	8(%r11), %ecx
	je	.L22106
	movzbl	mode_size(%r14), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L25018:
	movq	%r14, %rsi
	leal	(%rax,%rcx), %ebx
	salq	$4, %rsi
	movl	%ebx, (%rdi)
	addq	optab_table+384(%rip), %rsi
	movl	8(%rsi), %eax
	cmpl	$1317, %eax
	je	.L22108
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rcx
	movq	insn_data+24(,%rcx,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L22109
	movq	%r13, %rdi
	movl	-9348(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L25855
.L22109:
	leaq	(%rbx,%rbx,4), %r10
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r10,8)
.L25019:
	movq	%rax, %rdi
	call	emit_insn
.L22128:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L22129
	movq	-6208(%rbp), %r13
	addq	%r13, 56(%r12)
.L22129:
	movq	48(%r12), %rsi
	movq	-6208(%rbp), %rdx
	subq	-6208(%rbp), %rsi
	cmpq	%rdx, %rsi
	movq	%rsi, 48(%r12)
	jae	.L22130
.L22090:
	movzbl	mode_size(%r14), %r13d
	cmpl	$1, %r13d
	ja	.L22132
.L22081:
	cmpq	$0, -2304(%rbp)
	je	.L25024
	jmp	.L25518
.L25855:
	movl	-9348(%rbp), %edi
	movq	%r13, %rsi
	call	force_reg
	movq	%rax, %r13
	jmp	.L22109
.L22108:
	movzbl	mode_size(%r14), %edi
	cmpl	%edx, %edi
	je	.L25856
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r11b
	movzbl	%r11b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r8b
	movzbl	%r8b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L22116:
	movl	-9348(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%r9d, %r9d
	testq	%r9, %r9
	movq	%rax, %rbx
	je	.L22125
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L25857
.L22125:
	movq	%rbx, %rdi
	movq	%r13, %rsi
	call	emit_move_insn
	jmp	.L22128
.L25857:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L22125
.L25856:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L22116
.L22106:
	movzbl	mode_size(%r14), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L25018
.L22104:
	movzbl	mode_size(%r14), %r8d
	leal	1(%r8), %edx
	andl	$-2, %edx
	jmp	.L22105
.L25854:
	movq	%rax, %rsi
	movq	-9360(%rbp), %rdi
	xorl	%eax, %eax
	call	*%r15
	jmp	.L25019
.L22098:
	movq	24(%r12), %rdi
	movl	-9348(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L25017
.L22096:
	movl	-9348(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L25016
.L22078:
	movq	-9344(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -2344(%rbp)
	jmp	.L22048
.L22074:
	movq	%r15, %rdi
	call	copy_addr_to_reg
	movq	%rax, -2320(%rbp)
	jmp	.L22076
.L22046:
	movl	$1, %ecx
	jmp	.L22045
.L22043:
	movl	$1, %edx
	jmp	.L22042
.L22041:
	movl	$1, %ecx
	jmp	.L22040
.L22035:
	cmpq	$2, %r15
	ja	.L22019
	jmp	.L22036
.L22011:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L25858
.L22013:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L22006
.L25858:
	cmpq	16(%r13), %rax
	jne	.L22013
	jmp	.L22006
.L25848:
	cmpb	$51, 2(%r13)
	je	.L22004
	movq	8(%r13), %r12
	cmpw	$71, (%r12)
	je	.L25859
.L22004:
	cmpl	$66, %eax
	jne	.L22007
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L22006
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	movq	%rbx, 8(%rax)
	jmp	.L22006
.L25859:
	movq	8(%r12), %rsi
	movq	%r13, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L22005
	movzbl	2(%r13), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L22006
.L22005:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L25015:
	movq	%rax, %r13
	jmp	.L22006
.L22003:
	cmpq	$0, 16(%r13)
	je	.L25860
	movq	24(%r13), %rax
	testq	%rax, %rax
	jne	.L25015
	movq	8(%r13), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L22006
.L25860:
	movq	8(%r13), %rdi
	call	copy_to_reg
	jmp	.L25015
.L21998:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L25861
.L22000:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L21993
.L25861:
	cmpq	16(%r14), %rax
	jne	.L22000
	jmp	.L21993
.L25847:
	cmpb	$51, 2(%r14)
	je	.L21991
	movq	8(%r14), %r12
	cmpw	$71, (%r12)
	je	.L25862
.L21991:
	cmpl	$66, %eax
	jne	.L21994
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L21993
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%rbx, 8(%rax)
	jmp	.L21993
.L25862:
	movq	8(%r12), %rsi
	movq	%r14, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L21992
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L21993
.L21992:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L25014:
	movq	%rax, %r14
	jmp	.L21993
.L21990:
	cmpq	$0, 16(%r14)
	je	.L25863
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L25014
	movq	8(%r14), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L21993
.L25863:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L25014
.L21985:
	movq	-9368(%rbp), %r15
	xorl	%esi, %esi
	movq	8(%r15), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-9368(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L25864
.L21987:
	movq	-9368(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -9336(%rbp)
	movq	%r12, 8(%rax)
	movq	-9336(%rbp), %rcx
	movq	%rbx, 16(%rcx)
	jmp	.L21980
.L25864:
	cmpq	16(%rsi), %rax
	jne	.L21987
	jmp	.L21980
.L25846:
	jne	.L21981
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-9368(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L21980
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -9336(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L21980
.L21977:
	testq	%rcx, %rcx
	je	.L25865
	movq	-9368(%rbp), %rbx
	movq	24(%rbx), %r9
	testq	%r9, %r9
	movq	%r9, -9336(%rbp)
	jne	.L21980
	movq	-9368(%rbp), %r12
	movq	8(%r12), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r10
	movq	%r10, -9336(%rbp)
	jmp	.L21980
.L25865:
	movq	-9368(%rbp), %rsi
	movq	8(%rsi), %rdi
	call	copy_to_reg
	movq	%rax, -9336(%rbp)
	jmp	.L21980
.L21970:
	testq	%rcx, %rcx
	movl	$8, -9328(%rbp)
	je	.L21966
	movl	32(%rcx), %r15d
	movl	%r15d, -9328(%rbp)
	jmp	.L21966
.L21969:
	cmpl	$7, %edx
	ja	.L21965
	jmp	.L21970
.L25844:
	movq	8(%r15), %rdi
	call	int_size_in_bytes
	movq	-9368(%rbp), %rbx
	movl	%eax, -5508(%rbp)
	cmpw	$39, (%rbx)
	jne	.L25561
	movq	-9368(%rbp), %rax
	movq	8(%rax), %rcx
	movq	8(%rcx), %rsi
	movl	(%rcx), %r9d
	cmpq	$0, 8(%rsi)
	movslq	%r9d,%r15
	sete	%dil
	leaq	15(,%r15,8), %r12
	andq	$-16, %r12
	subq	%r12, %rsp
	leaq	32(%rsp), %r13
	movzbl	%dil, %edx
	movq	%r13, -5520(%rbp)
	movl	%edx, -9324(%rbp)
	movl	-9324(%rbp), %r10d
	cmpl	%r9d, %r10d
	movl	%r10d, -9316(%rbp)
	jge	.L24168
.L21949:
	movslq	-9316(%rbp),%r13
	movq	8(%rcx,%r13,8), %rbx
	movq	%r13, -5528(%rbp)
	movl	-5508(%rbp), %ecx
	movq	8(%rbx), %r9
	movq	16(%rbx), %r11
	testl	%ecx, %ecx
	movzbl	2(%r9), %r13d
	movq	8(%r11), %r15
	movslq	%r13d,%r8
	movzbl	mode_size(%r8), %ebx
	movq	%r8, -5536(%rbp)
	movl	%ebx, -9320(%rbp)
	js	.L21922
	movslq	-5508(%rbp),%r12
	mov	%ebx, %edi
	leaq	(%rdi,%r15), %rdx
	cmpq	%r12, %rdx
	jle	.L21922
	movl	-5508(%rbp), %eax
	subl	%r15d, %eax
	movl	%eax, -9320(%rbp)
	je	.L25560
.L21922:
	movzwl	(%r14), %edx
	movq	%r14, %r12
	cmpw	$66, %dx
	je	.L21924
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L21926
	cmpw	$54, %dx
	je	.L21926
	cmpw	$55, %dx
	je	.L21926
	cmpw	$58, %dx
	je	.L21926
	cmpw	$134, %dx
	je	.L21926
	cmpw	$56, %dx
	je	.L21926
	cmpw	$140, %dx
	je	.L21926
.L21925:
	movzbl	2(%r14), %eax
	movl	%r13d, %edi
	testb	%al, %al
	je	.L25012
	movzbl	%al, %edi
.L25012:
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	emit_move_insn
.L21924:
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L25866
.L21929:
	cmpw	$65, %dx
	je	.L25867
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L21946
	cmpw	$54, %dx
	je	.L21946
	cmpw	$55, %dx
	je	.L21946
	cmpw	$58, %dx
	je	.L21946
	cmpw	$134, %dx
	je	.L21946
	cmpw	$56, %dx
	je	.L21946
	cmpw	$140, %dx
	je	.L21946
	cmpw	$61, %dx
	je	.L25868
.L21945:
	movl	-9320(%rbp), %edi
	movslq	-5508(%rbp),%r10
	leaq	0(,%r15,8), %rdx
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r13d, %r9d
	movl	%r13d, (%rsp)
	sall	$3, %edi
	mov	%edi, %esi
	movq	%r10, 8(%rsp)
	movq	%r12, %rdi
	call	extract_bit_field
.L25013:
	movq	-5528(%rbp), %rcx
	movq	-5520(%rbp), %r12
	movq	%rax, (%r12,%rcx,8)
.L21920:
	movq	-9368(%rbp), %rdx
	incl	-9316(%rbp)
	movl	-9316(%rbp), %eax
	movq	8(%rdx), %rcx
	cmpl	(%rcx), %eax
	jl	.L21949
.L24168:
	movq	cfun(%rip), %r8
	movq	16(%r8), %r14
	movq	40(%r14), %rbx
	testq	%rbx, %rbx
	je	.L24170
.L21955:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L25869
	call	emit_insn
	movq	%rax, 16(%rbx)
.L21954:
	movq	cfun(%rip), %r9
	movq	40(%rbx), %r11
	movq	16(%r9), %r13
	testq	%r11, %r11
	movq	%r11, %rbx
	movq	%r11, 40(%r13)
	jne	.L21955
	movq	-9368(%rbp), %rbx
	movq	8(%rbx), %rcx
.L24170:
	movl	-9324(%rbp), %r10d
	cmpl	(%rcx), %r10d
	jge	.L25024
.L21961:
	movslq	-9324(%rbp),%r14
	movq	-5520(%rbp), %rdx
	salq	$3, %r14
	movq	8(%r14,%rcx), %rax
	movq	(%rdx,%r14), %rsi
	movq	8(%rax), %rdi
	call	emit_move_insn
	movq	-9368(%rbp), %r12
	incl	-9324(%rbp)
	movl	-9324(%rbp), %edi
	movq	8(%r12), %rcx
	cmpl	(%rcx), %edi
	jl	.L21961
	jmp	.L25024
.L25869:
	movq	8(%rdi), %rsi
	movq	8(%rsi), %r15
	movq	%r15, 16(%rbx)
	call	emit_insn
	jmp	.L21954
.L25868:
	movzbl	2(%r12), %r11d
	cmpl	%r13d, %r11d
	jne	.L21945
.L21946:
	movq	-5528(%rbp), %r9
	movq	-5520(%rbp), %r13
	movq	%r12, (%r13,%r9,8)
	jmp	.L21920
.L25867:
	testq	%r15, %r15
	jne	.L24441
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %rsi
	movzbl	mode_size(%rsi), %ebx
	cmpl	%ebx, -9320(%rbp)
	je	.L21935
.L21936:
	movzbq	2(%rdx), %r8
	movzbq	mode_size(%r8), %rcx
	cmpq	%rcx, %r15
	je	.L25870
.L21934:
	testq	%r15, %r15
	jne	.L22779
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbx
	movzbq	mode_size(%rbx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %r15
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r15, %rdi
	movl	%r13d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	jmp	.L25013
.L25870:
	movq	16(%r12), %r10
	movzbq	2(%r10), %r9
	movzbl	mode_size(%r9), %r11d
	cmpl	%r11d, -9320(%rbp)
	jne	.L21934
.L21935:
	xorl	%edi, %edi
	movq	-5528(%rbp), %rdx
	movq	-5520(%rbp), %rax
	testq	%r15, %r15
	setne	%dil
	leaq	(%rax,%rdx,8), %rbx
	movq	8(%r12,%rdi,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L21920
	cmpw	$54, %dx
	je	.L21920
	cmpw	$55, %dx
	je	.L21920
	cmpw	$58, %dx
	je	.L21920
	cmpw	$134, %dx
	je	.L21920
	cmpw	$56, %dx
	je	.L21920
	cmpw	$140, %dx
	je	.L21920
	cmpw	$61, %dx
	je	.L25871
.L21940:
	movslq	-5508(%rbp),%rcx
	movl	-9320(%rbp), %r8d
	movl	%r13d, (%rsp)
	xorl	%edx, %edx
	movl	%r13d, %r9d
	sall	$3, %r8d
	movq	%rcx, 8(%rsp)
	mov	%r8d, %esi
	movl	$1, %ecx
	movq	(%rbx), %rdi
	xorl	%r8d, %r8d
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L21920
.L25871:
	movzbl	2(%rcx), %r12d
	cmpl	%r13d, %r12d
	jne	.L21940
	jmp	.L21920
.L24441:
	movq	8(%r12), %rdx
	jmp	.L21936
.L25866:
	movl	%r13d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L21930
	cmpl	%eax, 32(%rdx)
	jae	.L21931
.L24440:
	movzwl	(%r12), %edx
	jmp	.L21929
.L21931:
	movl	%r13d, %edi
	leaq	0(,%r15,8), %rbx
	call	get_mode_alignment
	mov	%eax, %r11d
	movq	%rbx, %rax
	cqto
	idivq	%r11
	testq	%rdx, %rdx
	jne	.L24440
	movq	-5536(%rbp), %r10
	movzbl	mode_size(%r10), %r9d
	cmpl	%r9d, -9320(%rbp)
	jne	.L24440
	movl	%r13d, %edi
	call	gen_reg_rtx
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-5528(%rbp), %rdx
	movq	-5520(%rbp), %rdi
	movl	%r13d, %esi
	leaq	(%rdi,%rdx,8), %rbx
	movq	%r15, %rdx
	movq	%r12, %rdi
	movq	%rax, (%rbx)
	call	adjust_address_1
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L21920
.L21930:
	cmpl	$8, %eax
	ja	.L24440
	jmp	.L21931
.L21926:
	movzbl	2(%r14), %edx
	movzbl	%dl, %ecx
	cmpl	%r13d, %ecx
	je	.L21924
	testb	%dl, %dl
	je	.L21924
	jmp	.L21925
.L25843:
	movq	-5464(%rbp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4, %ecx
	call	expand_expr
	movq	%rax, -9368(%rbp)
	jmp	.L21913
.L25842:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	144(%rbx), %rax
	jmp	.L21912
.L21800:
	movl	$0, -2656(%rbp)
	xorl	%ebx, %ebx
	leaq	-2632(%rbp), %r12
	call	push_temp_slots
	movq	-5464(%rbp), %r14
	movq	global_trees+120(%rip), %r8
	movl	$0, -9380(%rbp)
	movq	global_trees+136(%rip), %rdx
	movq	$0, -2664(%rbp)
	movq	%r8, -9400(%rbp)
	movq	%rdx, -9392(%rbp)
	movzbl	16(%r14), %eax
	cmpb	$39, %al
	je	.L25872
	cmpb	$40, %al
	je	.L25873
	movq	-5464(%rbp), %r13
	movq	8(%r13), %rdx
	movzbl	61(%rdx), %edi
	movzbl	17(%rdx), %esi
	shrb	$1, %dil
	shrb	$5, %sil
	movzbl	%dil, %r8d
	movl	%esi, %r10d
	andl	$1, %r10d
	movl	%r8d, -9380(%rbp)
	cmpl	$51, -9380(%rbp)
	movl	%r10d, -5484(%rbp)
	je	.L25874
	movslq	-9380(%rbp),%r11
	movzwq	mode_bitsize(%r11,%r11), %rdx
	movq	%rdx, -2632(%rbp)
.L21803:
	testq	%rbx, %rbx
	jne	.L25875
.L21870:
	movzbl	16(%r14), %edx
	cmpb	$40, %dl
	je	.L25876
	cmpb	$39, %dl
	je	.L25877
	leal	-43(%rdx), %ebx
	cmpb	$1, %bl
	jbe	.L25878
	cmpb	$57, %dl
	jne	.L21828
	movq	-2664(%rbp), %rax
	leaq	-2664(%rbp), %r9
	movq	8(%r14), %rdx
	testq	%rax, %rax
	je	.L21829
	movq	(%rax), %r8
.L21830:
	testq	%r8, %r8
	je	.L24162
	movq	128(%rdx), %rsi
.L21863:
	movq	24(%r8), %rdi
	testq	%rdi, %rdi
	movq	%rdi, %rdx
	je	.L24164
.L21848:
	movq	8(%rdi), %rcx
	cmpq	%rsi, 128(%rcx)
	je	.L25879
	movzbl	16(%rdi), %eax
	cmpb	$47, %al
	je	.L21844
	cmpb	$51, %al
	je	.L21844
	movzbl	%al, %r10d 
	movzbl	tree_code_type(%r10), %eax
	cmpb	$114, %al
	je	.L21847
	cmpb	$49, %al
	je	.L21847
	cmpb	$50, %al
	je	.L21847
	cmpb	$101, %al
	je	.L21847
	xorl	%edi, %edi
.L21843:
	testq	%rdi, %rdi
	jne	.L21848
.L24164:
	testq	%rdx, %rdx
	je	.L24166
.L21862:
	movq	8(%rdx), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$13, %al
	je	.L21854
	cmpb	$15, %al
	je	.L21854
.L21851:
	movzbl	16(%rdx), %eax
	cmpb	$47, %al
	je	.L21858
	cmpb	$51, %al
	je	.L21858
	movzbl	%al, %r13d 
	movzbl	tree_code_type(%r13), %eax
	cmpb	$114, %al
	je	.L21861
	cmpb	$49, %al
	je	.L21861
	cmpb	$50, %al
	je	.L21861
	cmpb	$101, %al
	je	.L21861
	xorl	%edx, %edx
.L21857:
	testq	%rdx, %rdx
	jne	.L21862
.L24166:
	movq	(%r8), %r8
	testq	%r8, %r8
	jne	.L21863
.L24162:
	xorl	%edi, %edi
.L21841:
	testq	%rdi, %rdi
	je	.L21812
	movq	%rdi, %r14
	jmp	.L21870
.L21812:
	movq	-9400(%rbp), %rdi
	xorl	%esi, %esi
	call	host_integerp
	testl	%eax, %eax
	je	.L21871
	movq	sizetype_tab+24(%rip), %rdi
	movq	-9400(%rbp), %rsi
	call	convert
	movq	global_trees+152(%rip), %rdx
	movl	$61, %edi
	movq	%rax, %rsi
	call	size_binop
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L21871
	movq	-9392(%rbp), %rdx
	movl	$59, %edi
	call	size_binop
	testq	%rax, %rax
	movq	%rax, %rbx
	jne	.L25880
.L21871:
	movq	-9392(%rbp), %rdi
	xorl	%esi, %esi
	call	tree_low_cst
	movq	%rax, -2640(%rbp)
	movq	-9400(%rbp), %rax
	movq	%rax, -2648(%rbp)
.L21872:
	movl	-9380(%rbp), %r10d
	testl	%r10d, %r10d
	movl	%r10d, -2652(%rbp)
	jne	.L21874
	xorl	%ecx, %ecx
	testl	%ecx, %ecx
	jne	.L25881
.L21874:
	movq	%r14, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	-2648(%rbp), %rdi
	movq	%rax, %r12
	movq	%rax, -5504(%rbp)
	testq	%rdi, %rdi
	jne	.L25882
.L21875:
	cmpw	$66, (%r12)
	je	.L25883
.L21885:
	movl	-2656(%rbp), %esi
	testl	%esi, %esi
	je	.L21900
	cmpw	$66, (%r12)
	je	.L25884
.L21900:
	movq	-5464(%rbp), %rbx
	cmpb	$39, 16(%rbx)
	je	.L25885
.L21902:
	cmpw	$66, (%r12)
	je	.L25886
.L21904:
	movq	-5464(%rbp), %rdi
	call	get_alias_set
	xorl	%r11d, %r11d
	movl	-2652(%rbp), %ecx
	testl	%r11d, %r11d
	movq	%rax, %rdi
	movq	-2632(%rbp), %rsi
	movq	-2640(%rbp), %rdx
	je	.L21906
	movq	-5464(%rbp), %r10
	movq	8(%r10), %r9
	movzbl	61(%r9), %ebx
	shrb	$1, %bl
	movzbl	%bl, %r9d
.L21907:
	movl	-5484(%rbp), %eax
	movq	%r15, %r8
	movl	%eax, (%rsp)
	movq	8(%r14), %r13
	xorl	%r14d, %r14d
	movl	%edi, 16(%rsp)
	movq	%r12, %rdi
	movq	%r13, 8(%rsp)
	call	store_field
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	preserve_temp_slots
	call	free_temp_slots
	call	pop_temp_slots
	testl	%r14d, %r14d
	je	.L21798
	movq	-5464(%rbp), %rdi
	movq	8(%r15), %rdx
	movq	8(%rdi), %r12
	movzbl	61(%rdx), %r15d
	movq	%rbx, %rdx
	movzbl	61(%r12), %eax
	movzbl	17(%r12), %ecx
	shrb	$1, %r15b
	movzbl	%r15b, %esi
	shrb	$1, %al
	shrb	$5, %cl
	movzbl	%al, %edi
	andl	$1, %ecx
	call	convert_modes
	jmp	.L21798
.L21906:
	xorl	%r9d, %r9d
	jmp	.L21907
.L25886:
	movq	-5464(%rbp), %rdi
	call	can_address_p
	testl	%eax, %eax
	jne	.L21904
	cmpq	-5504(%rbp), %r12
	je	.L25887
.L21905:
	orb	$1, 3(%r12)
	jmp	.L21904
.L25887:
	movq	%r12, %rdi
	call	copy_rtx
	movq	%rax, %r12
	jmp	.L21905
.L25885:
	movq	40(%rbx), %r8
	testb	$16, 17(%r8)
	je	.L21902
	cmpq	-5504(%rbp), %r12
	je	.L25888
.L21903:
	orb	$4, 3(%r12)
	jmp	.L21902
.L25888:
	movq	%r12, %rdi
	call	copy_rtx
	movq	%rax, %r12
	jmp	.L21903
.L25884:
	cmpq	-5504(%rbp), %r12
	je	.L25889
.L21901:
	orb	$8, 3(%r12)
	jmp	.L21900
.L25889:
	movq	%r12, %rdi
	call	copy_rtx
	movq	%rax, %r12
	jmp	.L21901
.L25883:
	movq	16(%r12), %rax
	xorl	%ebx, %ebx
	testq	%rax, %rax
	je	.L21887
	movq	8(%rax), %rbx
.L21887:
	movq	%r12, %rdi
	call	shallow_copy_rtx
	xorl	%edx, %edx
	movq	-5464(%rbp), %rsi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	set_mem_attributes
	movq	16(%r12), %rax
	testq	%rax, %rax
	je	.L21889
	cmpq	%rbx, 8(%rax)
.L25011:
	je	.L21885
	testq	%rax, %rax
	je	.L21885
	movq	16(%rax), %rsi
	testq	%rsi, %rsi
	je	.L21885
	movq	-2640(%rbp), %rcx
	cmpq	$-1, %rcx
	leaq	7(%rcx), %r13
	movq	%rcx, %rax
	cmovle	%r13, %rax
	sarq	$3, %rax
	testq	%rax, %rax
	je	.L21885
	movq	8(%rsi), %rsi
	xorl	%edi, %edi
	subq	%rax, %rsi
	call	gen_rtx_CONST_INT
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	set_mem_offset
	jmp	.L21885
.L21889:
	testq	%rbx, %rbx
	jmp	.L25011
.L25882:
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	call	expand_expr
	cmpw	$66, (%r12)
	movq	%rax, %r13
	jne	.L25507
	movzbl	2(%rax), %esi
	movl	ptr_mode(%rip), %edi
	cmpl	%edi, %esi
	je	.L21877
	movq	%rax, %rsi
	xorl	%edx, %edx
	call	convert_to_mode
	movq	%rax, %r13
.L21877:
	movl	(%r12), %eax
	andl	$16777215, %eax
	cmpl	$3342402, %eax
	je	.L25890
.L21878:
	movq	-5464(%rbp), %rax
	movq	-2648(%rbp), %rdi
	movq	8(%rax), %rbx
	call	highest_pow2_factor
	movq	%r13, %rsi
	movq	%r12, %rdi
	movl	64(%rbx), %r10d
	shrl	$3, %r10d
	mov	%r10d, %edx
	cmpq	%rax, %rdx
	cmovl	%rax, %rdx
	call	offset_address
	movq	%rax, %r12
	jmp	.L21875
.L25890:
	movq	8(%r12), %rdi
	cmpb	$0, 2(%rdi)
	je	.L21878
	movq	-2632(%rbp), %rdx
	testq	%rdx, %rdx
	jle	.L21878
	movq	-2640(%rbp), %rax
	movq	%rdx, %r8
	cqto
	idivq	%r8
	testq	%rdx, %rdx
	jne	.L21878
	movl	-2652(%rbp), %edi
	call	get_mode_alignment
	movq	-2632(%rbp), %rdx
	mov	%eax, %ebx
	movq	%rdx, %rax
	cqto
	idivq	%rbx
	testq	%rdx, %rdx
	jne	.L21878
	movl	-2652(%rbp), %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L21879
	cmpl	%eax, 32(%rdx)
.L25010:
	jne	.L21878
	movq	-2640(%rbp), %rdx
	movl	-2652(%rbp), %esi
	movq	%r12, %rdi
	movl	$1, %ecx
	movl	$1, %r8d
	cmpq	$-1, %rdx
	leaq	7(%rdx), %r9
	cmovle	%r9, %rdx
	sarq	$3, %rdx
	call	adjust_address_1
	movq	$0, -2640(%rbp)
	movq	%rax, %r12
	jmp	.L21878
.L21879:
	cmpl	$8, %eax
	jmp	.L25010
.L25881:
	movq	%r14, %rdi
	call	stabilize_reference
	movq	%rax, %r14
	jmp	.L21874
.L25880:
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	host_integerp
	testl	%eax, %eax
	je	.L21871
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	tree_low_cst
	movq	$0, -2648(%rbp)
	movq	%rax, -2640(%rbp)
	jmp	.L21872
.L21861:
	movq	32(%rdx), %rdx
	jmp	.L21857
.L21858:
	movq	40(%rdx), %rdx
	jmp	.L21857
.L21854:
	movq	8(%rcx), %rdi
	cmpq	%rsi, 128(%rdi)
	jne	.L21851
	testq	%r9, %r9
	je	.L21855
	movq	%r8, (%r9)
.L21855:
	movl	$41, %edi
	call	build1
	movq	%rax, %rdi
	jmp	.L21841
.L21847:
	movq	32(%rdi), %rdi
	jmp	.L21843
.L21844:
	movq	40(%rdi), %rdi
	jmp	.L21843
.L25879:
	testq	%r9, %r9
	je	.L21841
	movq	%r8, (%r9)
	jmp	.L21841
.L21829:
	movq	placeholder_list(%rip), %r8
	jmp	.L21830
.L21828:
	leal	-116(%rdx), %esi
	cmpb	$1, %sil
	jbe	.L21815
	leal	-114(%rdx), %r8d
	cmpb	$1, %r8b
	ja	.L21812
	movq	32(%r14), %r12
	movq	8(%r14), %r9
	movq	8(%r12), %rdx
	movzbl	61(%r9), %ebx
	movzbl	61(%rdx), %r11d
	andb	$-2, %bl
	andb	$-2, %r11b
	cmpb	%r11b, %bl
	jne	.L21812
.L21815:
	testb	$8, 17(%r14)
	je	.L21869
	movl	$1, -2656(%rbp)
.L21869:
	movq	32(%r14), %r14
	jmp	.L21870
.L25878:
	movq	32(%r14), %r12
	movq	40(%r14), %rbx
	movq	%r12, -5496(%rbp)
	movq	8(%r12), %rdx
	xorl	%r12d, %r12d
	movq	24(%rdx), %rax
	testq	%rax, %rax
	je	.L21823
	movq	104(%rax), %r12
.L21823:
	movq	8(%rdx), %r9
	testq	%r12, %r12
	movq	40(%r9), %r13
	jne	.L25891
.L21824:
	testb	$2, 17(%rbx)
	je	.L25892
.L21825:
	testb	$2, 17(%r13)
	je	.L25893
.L21826:
	movq	sizetype_tab(%rip), %rdi
	movq	%rbx, %rsi
	call	convert
	movq	%r13, %rdx
	movl	$61, %edi
	movq	%rax, %rsi
	call	size_binop
	movq	-9400(%rbp), %rsi
	movl	$59, %edi
	movq	%rax, %rdx
	call	size_binop
	movq	%rax, -9400(%rbp)
	jmp	.L21815
.L25893:
	movq	%r13, %rdi
	call	contains_placeholder_p
	testl	%eax, %eax
	je	.L21826
	movq	sizetype_tab(%rip), %rsi
	movq	-5496(%rbp), %rcx
	movq	%r13, %rdx
	movl	$58, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %r13
	jmp	.L21826
.L25892:
	movq	%rbx, %rdi
	call	contains_placeholder_p
	testl	%eax, %eax
	je	.L21825
	movq	8(%rbx), %rsi
	movq	%rbx, %rdx
	movl	$58, %edi
	movq	%r14, %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %rbx
	jmp	.L21825
.L25891:
	movq	%r12, %rdi
	call	integer_zerop
	testl	%eax, %eax
	jne	.L21824
	movq	8(%rbx), %rsi
	movq	%rbx, %rdx
	movl	$60, %edi
	movq	%r12, %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	movq	%rax, %rbx
	jmp	.L21824
.L25877:
	movq	40(%r14), %r12
	movq	88(%r12), %rbx
	testq	%rbx, %rbx
	je	.L21812
	testb	$2, 17(%rbx)
	je	.L25894
.L21818:
	movq	-9400(%rbp), %rsi
	movl	$59, %edi
	movq	%rbx, %rdx
	call	size_binop
	movq	-9392(%rbp), %rsi
	movl	$59, %edi
	movq	%rax, -9400(%rbp)
	movq	160(%r12), %rdx
.L25009:
	call	size_binop
	movq	%rax, -9392(%rbp)
	jmp	.L21815
.L25894:
	movq	%rbx, %rdi
	call	contains_placeholder_p
	testl	%eax, %eax
	je	.L21818
	movq	sizetype_tab(%rip), %rsi
	movq	%rbx, %rdx
	movl	$58, %edi
	movq	%r14, %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %rbx
	jmp	.L21818
.L25876:
	movq	-9392(%rbp), %rsi
	movq	48(%r14), %rdx
	movl	$59, %edi
	jmp	.L25009
.L25875:
	movq	%rbx, %rdi
	movl	$1, %esi
	call	host_integerp
	testl	%eax, %eax
	jne	.L21809
	movl	$51, -9380(%rbp)
	movq	$-1, (%r12)
	jmp	.L21870
.L21809:
	movq	%rbx, %rdi
	movl	$1, %esi
	call	tree_low_cst
	movq	%rax, (%r12)
	jmp	.L21870
.L25874:
	movq	32(%rdx), %rbx
	jmp	.L21803
.L25873:
	movq	-5464(%rbp), %rax
	movzbl	17(%rax), %ecx
	movq	40(%rax), %rbx
	shrb	$5, %cl
	movl	%ecx, %r9d
	andl	$1, %r9d
	movl	%r9d, -5484(%rbp)
	jmp	.L21803
.L25872:
	movq	40(%r14), %rax
	testb	$16, 49(%rax)
	movq	40(%rax), %rbx
	jne	.L21802
	movzbl	48(%rax), %edi
	movl	%edi, -9380(%rbp)
.L21802:
	movzbl	17(%rax), %r11d
	shrb	$5, %r11b
	movl	%r11d, %r13d
	andl	$1, %r13d
	movl	%r13d, -5484(%rbp)
	jmp	.L21803
.L25831:
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	jmp	.L21798
.L25830:
	movq	global_trees+96(%rip), %rsi
	jmp	.L21794
	.p2align 6,,7
.L24435:
	movq	-5464(%rbp), %r11
	movzbl	16(%r11), %ecx
	jmp	.L21781
.L21344:
	movq	-9552(%rbp), %rcx
	movq	-9552(%rbp), %rdi
	xorl	%r13d, %r13d
	cmpl	$0, -6220(%rbp)
	sete	%r13b
	movq	32(%rcx), %r11
	movq	%r11, -5312(%rbp)
	movq	40(%rdi), %rcx
	movl	%r13d, -5324(%rbp)
	xorl	%r13d, %r13d
	movq	%rcx, -5320(%rbp)
	movzbl	16(%r11), %edx
	testb	%dl, %dl
	je	.L25895
	leal	-39(%rdx), %r12d
	cmpb	$1, %r12b
	jbe	.L21350
	cmpb	$43, %dl
	je	.L21350
	cmpb	$44, %dl
	je	.L21350
	movq	-5320(%rbp), %rax
	cmpb	$53, 16(%rax)
	je	.L25896
.L21460:
	testq	%r13, %r13
	je	.L25897
.L21716:
	movq	-5312(%rbp), %rax
	movzbl	16(%rax), %edx
	cmpb	$36, %dl
	je	.L25898
.L21771:
	call	push_temp_slots
	movq	-5320(%rbp), %rdi
	movl	-5324(%rbp), %edx
	movq	%r13, %rsi
	call	store_expr
	movq	%rax, %r13
.L25541:
	movq	%r13, %rdi
	call	preserve_temp_slots
	call	free_temp_slots
	call	pop_temp_slots
.L25117:
	movl	-5324(%rbp), %edi
	testl	%edi, %edi
	jmp	.L25055
.L25898:
	movzwl	(%r13), %eax
	cmpw	$61, %ax
	je	.L21718
	cmpw	$39, %ax
	je	.L21718
	cmpb	$36, %dl
	jne	.L21771
	movq	-5320(%rbp), %rdi
	cmpb	$41, 16(%rdi)
	jne	.L21771
	movq	cfun(%rip), %r9
	movzbl	424(%r9), %r11d
	andb	$3, %r11b
	decb	%r11b
	jne	.L21771
	call	push_temp_slots
	movq	-5320(%rbp), %rdi
	call	expr_size
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	-5320(%rbp), %rdi
	xorl	%esi, %esi
	movq	%rax, %r12
	call	expand_expr
	movq	%r12, %rsi
	movq	sizetype_tab(%rip), %r8
	movq	%rax, %r15
	movzbl	17(%r8), %edx
	movzbl	61(%r8), %eax
	shrb	$5, %dl
	shrb	$1, %al
	andl	$1, %edx
	movzbl	%al, %edi
	call	convert_to_mode
	movl	$3, %ecx
	movq	libfunc_table+96(%rip), %rdi
	movl	target_flags(%rip), %r10d
	movq	8(%r15), %rbx
	movq	%rax, 16(%rsp)
	movq	sizetype_tab(%rip), %r14
	andl	$33554432, %r10d
	movq	%rbx, (%rsp)
	setne	%dl
	xorl	%eax, %eax
	movzbl	%dl, %r9d
	xorl	%edx, %edx
	addl	$4, %r9d
	movl	%r9d, 8(%rsp)
	movzbl	61(%r14), %esi
	shrb	$1, %sil
	movzbl	%sil, %r15d
	xorl	%esi, %esi
	movl	%r15d, 24(%rsp)
	movq	8(%r13), %r8
	call	emit_library_call
	jmp	.L25541
	.p2align 6,,7
.L21718:
	call	push_temp_slots
	movzbl	2(%r13), %edx
	movq	-5320(%rbp), %rdi
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	call	expand_expr
	cmpw	$39, (%r13)
	movq	%rax, -5424(%rbp)
	je	.L25899
	movq	%r13, %rdi
	movq	-5424(%rbp), %rsi
.L25542:
	call	emit_move_insn
	jmp	.L25541
.L25899:
	movq	-5320(%rbp), %rcx
	movq	8(%rcx), %rdi
	call	int_size_in_bytes
	cmpw	$39, (%r13)
	movl	%eax, -5428(%rbp)
	jne	.L25561
	movq	8(%r13), %rcx
	movq	8(%rcx), %rdx
	movl	(%rcx), %r11d
	cmpq	$0, 8(%rdx)
	movslq	%r11d,%r15
	sete	%r8b
	leaq	15(,%r15,8), %rsi
	andq	$-16, %rsi
	subq	%rsi, %rsp
	leaq	32(%rsp), %r10
	movzbl	%r8b, %r14d
	movq	%r10, -5440(%rbp)
	movl	%r14d, -9292(%rbp)
	movl	-9292(%rbp), %r9d
	cmpl	%r11d, %r9d
	movl	%r9d, -9284(%rbp)
	jge	.L24157
.L21754:
	movslq	-9284(%rbp),%r9
	movl	-5428(%rbp), %edi
	testl	%edi, %edi
	movq	8(%rcx,%r9,8), %r11
	movq	%r9, -5448(%rbp)
	movq	8(%r11), %rax
	movq	16(%r11), %r12
	movzbl	2(%rax), %r14d
	movq	8(%r12), %r15
	movslq	%r14d,%rbx
	movzbl	mode_size(%rbx), %edx
	movq	%rbx, -5456(%rbp)
	movl	%edx, -9288(%rbp)
	js	.L21727
	movslq	-5428(%rbp),%rcx
	mov	%edx, %esi
	leaq	(%rsi,%r15), %r10
	cmpq	%rcx, %r10
	jle	.L21727
	movl	-5428(%rbp), %r8d
	subl	%r15d, %r8d
	movl	%r8d, -9288(%rbp)
	je	.L25560
.L21727:
	movq	-5424(%rbp), %r12
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L21729
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L21731
	cmpw	$54, %dx
	je	.L21731
	cmpw	$55, %dx
	je	.L21731
	cmpw	$58, %dx
	je	.L21731
	cmpw	$134, %dx
	je	.L21731
	cmpw	$56, %dx
	je	.L21731
	cmpw	$140, %dx
	je	.L21731
.L21730:
	movq	-5424(%rbp), %rdx
	movl	%r14d, %edi
	movzbl	2(%rdx), %eax
	testb	%al, %al
	je	.L25007
	movzbl	%al, %edi
.L25007:
	call	gen_reg_rtx
	movq	-5424(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	emit_move_insn
.L21729:
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L25900
.L21734:
	cmpw	$65, %dx
	je	.L25901
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L21751
	cmpw	$54, %dx
	je	.L21751
	cmpw	$55, %dx
	je	.L21751
	cmpw	$58, %dx
	je	.L21751
	cmpw	$134, %dx
	je	.L21751
	cmpw	$56, %dx
	je	.L21751
	cmpw	$140, %dx
	je	.L21751
	cmpw	$61, %dx
	je	.L25902
.L21750:
	movl	-9288(%rbp), %r8d
	movslq	-5428(%rbp),%r10
	leaq	0(,%r15,8), %rdx
	movq	%r12, %rdi
	movl	$1, %ecx
	movl	%r14d, %r9d
	movl	%r14d, (%rsp)
	sall	$3, %r8d
	mov	%r8d, %esi
	movq	%r10, 8(%rsp)
	xorl	%r8d, %r8d
	call	extract_bit_field
.L25008:
	movq	-5448(%rbp), %r12
	movq	-5440(%rbp), %rdi
	movq	%rax, (%rdi,%r12,8)
.L21725:
	incl	-9284(%rbp)
	movq	8(%r13), %rcx
	movl	-9284(%rbp), %eax
	cmpl	(%rcx), %eax
	jl	.L21754
.L24157:
	movq	cfun(%rip), %r9
	movq	16(%r9), %r11
	movq	40(%r11), %rbx
	testq	%rbx, %rbx
	je	.L24159
.L21760:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L25903
	call	emit_insn
	movq	%rax, 16(%rbx)
.L21759:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %r14
	movq	16(%rdx), %rcx
	testq	%r14, %r14
	movq	%r14, %rbx
	movq	%r14, 40(%rcx)
	jne	.L21760
	movq	8(%r13), %rcx
.L24159:
	movl	-9292(%rbp), %ebx
	cmpl	(%rcx), %ebx
	jge	.L25541
.L21766:
	movslq	-9292(%rbp),%r12
	movq	-5440(%rbp), %r8
	salq	$3, %r12
	movq	8(%r12,%rcx), %rax
	movq	(%r8,%r12), %rsi
	movq	8(%rax), %rdi
	call	emit_move_insn
	incl	-9292(%rbp)
	movq	8(%r13), %rcx
	movl	-9292(%rbp), %r10d
	cmpl	(%rcx), %r10d
	jl	.L21766
	jmp	.L25541
.L25903:
	movq	8(%rdi), %rsi
	movq	8(%rsi), %r15
	movq	%r15, 16(%rbx)
	call	emit_insn
	jmp	.L21759
.L25902:
	movzbl	2(%r12), %edx
	cmpl	%r14d, %edx
	jne	.L21750
.L21751:
	movq	-5448(%rbp), %rcx
	movq	-5440(%rbp), %r14
	movq	%r12, (%r14,%rcx,8)
	jmp	.L21725
.L25901:
	testq	%r15, %r15
	jne	.L24434
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %rbx
	movzbl	mode_size(%rbx), %esi
	cmpl	%esi, -9288(%rbp)
	je	.L21740
.L21741:
	movzbq	2(%rdx), %r9
	movzbq	mode_size(%r9), %r11
	cmpq	%r11, %r15
	je	.L25904
.L21739:
	testq	%r15, %r15
	jne	.L22779
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbx
	movzbq	mode_size(%rbx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %r15
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r15, %rdi
	movl	%r14d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	jmp	.L25008
.L25904:
	movq	16(%r12), %r10
	movzbq	2(%r10), %rcx
	movzbl	mode_size(%rcx), %edx
	cmpl	%edx, -9288(%rbp)
	jne	.L21739
.L21740:
	xorl	%r8d, %r8d
	movq	-5448(%rbp), %rdi
	movq	-5440(%rbp), %rax
	testq	%r15, %r15
	setne	%r8b
	leaq	(%rax,%rdi,8), %rbx
	movq	8(%r12,%r8,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L21725
	cmpw	$54, %dx
	je	.L21725
	cmpw	$55, %dx
	je	.L21725
	cmpw	$58, %dx
	je	.L21725
	cmpw	$134, %dx
	je	.L21725
	cmpw	$56, %dx
	je	.L21725
	cmpw	$140, %dx
	je	.L21725
	cmpw	$61, %dx
	je	.L25905
.L21745:
	movslq	-5428(%rbp),%r11
	movl	-9288(%rbp), %r9d
	movl	%r14d, (%rsp)
	xorl	%edx, %edx
	movl	$1, %ecx
	xorl	%r8d, %r8d
	sall	$3, %r9d
	movq	%r11, 8(%rsp)
	mov	%r9d, %esi
	movq	(%rbx), %rdi
	movl	%r14d, %r9d
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L21725
.L25905:
	movzbl	2(%rcx), %r12d
	cmpl	%r14d, %r12d
	jne	.L21745
	jmp	.L21725
.L24434:
	movq	8(%r12), %rdx
	jmp	.L21741
.L25900:
	movl	%r14d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L21735
	cmpl	%eax, 32(%rdx)
	jae	.L21736
.L24433:
	movzwl	(%r12), %edx
	jmp	.L21734
.L21736:
	movl	%r14d, %edi
	leaq	0(,%r15,8), %rbx
	call	get_mode_alignment
	mov	%eax, %ecx
	movq	%rbx, %rax
	cqto
	idivq	%rcx
	testq	%rdx, %rdx
	jne	.L24433
	movq	-5456(%rbp), %rax
	movzbl	mode_size(%rax), %r10d
	cmpl	%r10d, -9288(%rbp)
	jne	.L24433
	movl	%r14d, %edi
	call	gen_reg_rtx
	movl	$1, %ecx
	movq	%r15, %rdx
	movq	-5448(%rbp), %rdi
	movq	-5440(%rbp), %r8
	movl	%r14d, %esi
	leaq	(%r8,%rdi,8), %rbx
	movl	$1, %r8d
	movq	%r12, %rdi
	movq	%rax, (%rbx)
	call	adjust_address_1
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L21725
.L21735:
	cmpl	$8, %eax
	ja	.L24433
	jmp	.L21736
	.p2align 6,,7
.L21731:
	movq	-5424(%rbp), %r11
	movzbl	2(%r11), %edx
	movzbl	%dl, %ebx
	cmpl	%r14d, %ebx
	je	.L21729
	testb	%dl, %dl
	je	.L21729
	jmp	.L21730
	.p2align 6,,7
.L25897:
	movq	-5312(%rbp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4, %ecx
	call	expand_expr
	movq	%rax, %r13
	jmp	.L21716
.L25896:
	movq	%rax, %rdi
	call	aggregate_value_p
	testl	%eax, %eax
	jne	.L21460
	movq	-5320(%rbp), %rdi
	movq	8(%rdi), %r11
	movq	32(%r11), %rcx
	cmpb	$25, 16(%rcx)
	jne	.L21460
	movq	-5312(%rbp), %rcx
	movzbl	16(%rcx), %edx
	subb	$34, %dl
	cmpb	$1, %dl
	ja	.L21461
	movq	144(%rcx), %rax
	testq	%rax, %rax
	je	.L25906
.L21462:
	cmpw	$61, (%rax)
	je	.L21460
.L21461:
	call	push_temp_slots
	movq	-5320(%rbp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	testq	%r13, %r13
	movq	%rax, %r15
	je	.L25907
.L21463:
	cmpw	$39, (%r13)
	je	.L25908
	cmpb	$51, 2(%r13)
	je	.L25909
	movq	%r13, %rdi
	movq	%r15, %rsi
	jmp	.L25542
.L25909:
	movq	-5320(%rbp), %rdi
	movq	%r13, -9248(%rbp)
	call	expr_size
	movl	$8, %edx
	movq	%rax, %r14
	movq	16(%r13), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L21518
	movl	32(%rax), %edx
.L21518:
	movq	16(%r15), %rax
	testq	%rax, %rax
	je	.L21519
	cmpl	32(%rax), %edx
	jb	.L21520
.L21515:
	testq	%rax, %rax
	movl	$8, -9240(%rbp)
	je	.L21516
	movl	32(%rax), %eax
	movl	%eax, -9240(%rbp)
.L21516:
	cmpb	$51, 2(%r13)
	jne	.L25547
	cmpb	$51, 2(%r15)
	jne	.L25546
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L21527
	cmpl	$66, %eax
	je	.L25910
.L21531:
	cmpl	$75, %eax
	je	.L21535
	cmpl	$78, %eax
	je	.L21535
.L21530:
	movzwl	(%r15), %eax
	cmpl	$71, %eax
	je	.L21540
	cmpl	$66, %eax
	je	.L25911
.L21544:
	cmpl	$75, %eax
	je	.L21548
	cmpl	$78, %eax
	je	.L21548
.L21543:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L21553
	cmpl	$66, %eax
	je	.L25912
.L21557:
	cmpl	$75, %eax
	je	.L21561
	cmpl	$78, %eax
	je	.L21561
.L21556:
	movq	-9248(%rbp), %r8
	cmpw	$66, (%r8)
	jne	.L25545
	cmpw	$66, (%r15)
	jne	.L25544
	testq	%r14, %r14
	je	.L25543
	cmpw	$54, (%r14)
	je	.L25913
.L21569:
	shrl	$3, -9240(%rbp)
	xorl	%edi, %edi
	mov	-9240(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -5384(%rbp)
	testl	%r12d, %r12d
	je	.L24155
.L21702:
	movslq	%r12d,%rsi
	movl	movstr_optab(,%rsi,4), %edx
	movq	%rsi, -5392(%rbp)
	cmpl	$1317, %edx
	je	.L21688
	cmpw	$54, (%r14)
	je	.L25914
.L21692:
	testb	$2, target_flags+3(%rip)
	je	.L21693
	movq	-5392(%rbp), %rdi
	cmpw	$63, mode_bitsize(%rdi,%rdi)
.L25006:
	jbe	.L21688
.L21691:
	movslq	%edx,%rax
	leaq	(%rax,%rax,4), %r11
	movq	%rax, -5400(%rbp)
	movq	insn_data+24(,%r11,8), %rcx
	movq	(%rcx), %rax
	movq	%rcx, -5408(%rbp)
	testq	%rax, %rax
	je	.L21695
	movq	-9248(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L21688
.L21695:
	movq	-5408(%rbp), %r9
	movq	24(%r9), %rax
	testq	%rax, %rax
	jne	.L25915
.L21696:
	movq	-5408(%rbp), %r10
	movq	72(%r10), %rax
	testq	%rax, %rax
	je	.L21697
	xorl	%esi, %esi
	movq	-5384(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L21688
.L21697:
	call	get_last_insn
	movl	$1, %edx
	movq	%r14, %rsi
	movl	%r12d, %edi
	movq	%rax, -5416(%rbp)
	call	convert_to_mode
	movq	-5408(%rbp), %rsi
	movq	%rax, %rbx
	movq	48(%rsi), %rax
	testq	%rax, %rax
	jne	.L25916
.L21698:
	movq	-5400(%rbp), %r8
	movq	-9248(%rbp), %rdi
	xorl	%eax, %eax
	movq	%r15, %rsi
	movq	%rbx, %rdx
	movq	-5384(%rbp), %rcx
	leaq	(%r8,%r8,4), %r12
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24527
	movq	-5416(%rbp), %rdi
	call	delete_insns_since
.L21688:
	movq	-5392(%rbp), %rdi
	movzbl	mode_wider_mode(%rdi), %r12d
	testl	%r12d, %r12d
	jne	.L21702
.L24155:
	testb	$2, target_flags+3(%rip)
	movq	-9248(%rbp), %rcx
	movl	$0, volatile_ok(%rip)
	setne	%r11b
	movq	8(%rcx), %rsi
	movzbl	%r11b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%bl
	movq	%rax, -9280(%rbp)
	movq	8(%r15), %rsi
	movzbl	%bl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%r14, %rsi
	movq	sizetype_tab(%rip), %rdx
	movq	%rax, %rbx
	movzbl	61(%rdx), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r14
	je	.L25917
.L21711:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	-9280(%rbp), %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r15
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r14, %rsi
	movq	%rax, (%r15)
	movq	%rax, %r12
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%r12)
	movq	(%r15), %rbx
	movq	(%rbx), %rdi
	movq	$0, (%rdi)
	movq	8(%rdx), %rdi
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	movq	%r15, %rcx
	movl	$53, %edi
	movq	fn.1(%rip), %r8
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%r8), %r14
	xorl	%r8d, %r8d
	movq	8(%r14), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	movq	-9280(%rbp), %rcx
	testb	$4, 3(%rcx)
	je	.L25541
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%rcx, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L25541
.L25917:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r12
	orb	$1, 49(%r12)
	movq	fn.1(%rip), %rsi
	orb	$8, 18(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %r10
	orb	$64, 50(%r10)
	movq	fn.1(%rip), %r9
	orb	$2, 18(%r9)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L21711
.L24527:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L25541
.L25916:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L21698
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L21698
.L25915:
	movq	%r15, %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L21688
	jmp	.L21696
.L21693:
	movq	-5392(%rbp), %rbx
	cmpw	$31, mode_bitsize(%rbx,%rbx)
	jmp	.L25006
.L25914:
	movq	mode_mask_array(,%rsi,8), %r8
	shrq	$1, %r8
	cmpq	%r8, 8(%r14)
	jbe	.L21691
	jmp	.L21692
.L25913:
	movq	8(%r14), %r12
	xorl	%r8d, %r8d
	movl	$17, %esi
.L21582:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L24144
.L21579:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %r9
	cmpq	%rsi, %r9
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L21579
.L24144:
	testl	%edi, %edi
	je	.L21572
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L21581
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L21581
	movzbq	mode_size(%rbx), %r10
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r10
	addq	%rax, %r8
	movq	%rdx, %r12
.L21581:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L21582
.L21572:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L21585
	movq	ix86_cost(%rip), %rbx
	mov	40(%rbx), %edx
	cmpq	%rdx, %r8
	jae	.L21569
.L21586:
	movq	8(%r15), %r8
	movq	-9248(%rbp), %rdi
	movq	8(%r14), %r12
	movq	-9248(%rbp), %rsi
	movq	$0, -2216(%rbp)
	movl	$0, -9260(%rbp)
	testb	$2, target_flags+3(%rip)
	movq	%r8, -2240(%rbp)
	setne	%r14b
	movq	8(%rdi), %r9
	movq	%rsi, -2272(%rbp)
	movzwl	(%r9), %edx
	movq	%r9, -9256(%rbp)
	movzbl	%r14b, %ecx
	leal	5(,%rcx,4), %r14d
	xorl	%ecx, %ecx
	leal	-96(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L21591
	cmpw	$99, %dx
	je	.L21591
	cmpw	$98, %dx
	je	.L21591
.L21590:
	movq	-9256(%rbp), %r10
	movl	%ecx, -2256(%rbp)
	xorl	%edx, %edx
	movzwl	(%r10), %eax
	cmpw	$96, %ax
	je	.L21593
	cmpw	$98, %ax
	je	.L21593
.L21592:
	movq	-9256(%rbp), %rax
	movq	%r15, -2248(%rbp)
	movl	%edx, -2208(%rbp)
	xorl	%ecx, %ecx
	movq	%rax, -2264(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L21596
	cmpw	$99, %dx
	je	.L21596
	cmpw	$98, %dx
	je	.L21596
.L21595:
	movl	-2208(%rbp), %edx
	movl	%ecx, -2232(%rbp)
	movl	$0, -2228(%rbp)
	movl	$0, -2252(%rbp)
	testl	%edx, %edx
	je	.L21597
	movq	%r12, -2216(%rbp)
.L21597:
	movl	-2232(%rbp), %ebx
	movq	%r12, -2224(%rbp)
	testl	%ebx, %ebx
	je	.L21599
	movl	-2256(%rbp), %r11d
	testl	%r11d, %r11d
	jne	.L21598
.L21599:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L21612:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L24147
.L21609:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %r10
	cmpq	%rsi, %r10
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L21609
.L24147:
	testl	%edi, %edi
	je	.L21602
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L21611
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L21611
	movzbq	mode_size(%rbx), %rcx
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rcx
	addq	%rax, %r15
	movq	%rdx, %r12
.L21611:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L21612
.L21602:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L21598
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L24149
.L21620:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %edx
	cmpl	%r14d, %edx
	cmovae	-9260(%rbp), %ecx
	movl	%ecx, -9260(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L21620
.L24149:
	movl	-2232(%rbp), %eax
	testl	%eax, %eax
	jne	.L21626
	movzwl	(%r8), %edx
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L21624
	cmpw	$54, %dx
	je	.L21624
	cmpw	$55, %dx
	je	.L21624
	cmpw	$58, %dx
	je	.L21624
	cmpw	$134, %dx
	je	.L21624
	cmpw	$56, %dx
	je	.L21624
	cmpw	$140, %dx
	je	.L21624
.L21626:
	movl	-2256(%rbp), %eax
	testl	%eax, %eax
	jne	.L21598
	movq	-9256(%rbp), %r9
	movzwl	(%r9), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L21628
	cmpw	$54, %dx
	je	.L21628
	cmpw	$55, %dx
	je	.L21628
	cmpw	$58, %dx
	je	.L21628
	cmpw	$134, %dx
	je	.L21628
	cmpw	$56, %dx
	je	.L21628
	cmpw	$140, %dx
	je	.L21628
.L21598:
	cmpl	$1, %r14d
	jbe	.L21631
.L21682:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L24152
.L21638:
	movslq	%ecx,%r10
	movzbl	mode_size(%r10), %esi
	cmpl	%r14d, %esi
	cmovae	-9260(%rbp), %ecx
	movl	%ecx, -9260(%rbp)
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L21638
.L24152:
	movl	-9260(%rbp), %eax
	testl	%eax, %eax
	je	.L21631
	movslq	-9260(%rbp),%r15
	movq	%r15, %r14
	salq	$4, %r14
	addq	optab_table+240(%rip), %r14
	movl	8(%r14), %ebx
	cmpl	$1317, %ebx
	je	.L21640
	movl	-9260(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	jb	.L21640
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rcx
	movq	$0, -9272(%rbp)
	leaq	(%rcx,%rcx,4), %rdi
	cmpq	%rdx, -2224(%rbp)
	movq	insn_data+16(,%rdi,8), %r12
	movq	%rdx, -6200(%rbp)
	movq	%r12, -5376(%rbp)
	leaq	-2272(%rbp), %r12
	jb	.L21640
	movl	-2208(%rbp), %ecx
.L21680:
	testl	%ecx, %ecx
	je	.L21644
	subq	%rdx, 56(%r12)
.L21644:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L21645
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L21646
	movl	-9260(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L25002:
	movq	%rax, -9272(%rbp)
.L21645:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L21648
	movq	24(%r12), %rdi
	movl	-9260(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L25003:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L25918
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L21654
	movzbl	mode_size(%r15), %ebx
	leal	7(%rbx), %edx
	andl	$-8, %edx
.L21655:
	movq	cfun(%rip), %r10
	andl	$33554432, %esi
	movq	16(%r10), %r9
	leaq	8(%r9), %rdi
	movl	8(%r9), %ecx
	je	.L21656
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L25004:
	movq	%r15, %rsi
	leal	(%rax,%rcx), %r8d
	salq	$4, %rsi
	movl	%r8d, (%rdi)
	addq	optab_table+384(%rip), %rsi
	movl	8(%rsi), %eax
	cmpl	$1317, %eax
	je	.L21658
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rdi
	movq	insn_data+24(,%rdi,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L21659
	movq	%r14, %rdi
	movl	-9260(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L25919
.L21659:
	leaq	(%rbx,%rbx,4), %rcx
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%rcx,8)
.L25005:
	movq	%rax, %rdi
	call	emit_insn
.L21678:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L21679
	movq	-6200(%rbp), %r14
	addq	%r14, 56(%r12)
.L21679:
	movq	48(%r12), %rsi
	movq	-6200(%rbp), %rdx
	subq	-6200(%rbp), %rsi
	cmpq	%rdx, %rsi
	movq	%rsi, 48(%r12)
	jae	.L21680
.L21640:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L21682
.L21631:
	cmpq	$0, -2224(%rbp)
	je	.L25541
	jmp	.L25518
.L25919:
	movl	-9260(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L21659
.L21658:
	movzbl	mode_size(%r15), %ebx
	cmpl	%edx, %ebx
	je	.L25920
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r9b
	movzbl	%r9b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r11b
	movzbl	%r11b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L21666:
	movl	-9260(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%r10d, %r10d
	testq	%r10, %r10
	movq	%rax, %rbx
	je	.L21675
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L25921
.L21675:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L21678
.L25921:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L21675
.L25920:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L21666
.L21656:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L25004
.L21654:
	movzbl	mode_size(%r15), %r11d
	leal	1(%r11), %edx
	andl	$-2, %edx
	jmp	.L21655
.L25918:
	movq	%rax, %rsi
	movq	-9272(%rbp), %rdi
	xorl	%eax, %eax
	call	*-5376(%rbp)
	jmp	.L25005
.L21648:
	movq	24(%r12), %rdi
	movl	-9260(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L25003
.L21646:
	movl	-9260(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L25002
.L21628:
	movq	-9256(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -2264(%rbp)
	jmp	.L21598
.L21624:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -2240(%rbp)
	jmp	.L21626
.L21596:
	movl	$1, %ecx
	jmp	.L21595
.L21593:
	movl	$1, %edx
	jmp	.L21592
.L21591:
	movl	$1, %ecx
	jmp	.L21590
.L21585:
	cmpq	$2, %r8
	ja	.L21569
	jmp	.L21586
.L21561:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L25922
.L21563:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L21556
.L25922:
	cmpq	16(%r14), %rax
	jne	.L21563
	jmp	.L21556
.L25912:
	cmpb	$51, 2(%r14)
	je	.L21554
	movq	8(%r14), %r12
	cmpw	$71, (%r12)
	je	.L25923
.L21554:
	cmpl	$66, %eax
	jne	.L21557
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L21556
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%rbx, 8(%rax)
	jmp	.L21556
.L25923:
	movq	8(%r12), %rsi
	movq	%r14, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L21555
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L21556
.L21555:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L25001:
	movq	%rax, %r14
	jmp	.L21556
.L21553:
	cmpq	$0, 16(%r14)
	je	.L25924
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L25001
	movq	8(%r14), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L21556
.L25924:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L25001
.L21548:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r15), %r12
	movq	%rax, %rbx
	je	.L25925
.L21550:
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, %r15
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L21543
.L25925:
	cmpq	16(%r15), %rax
	jne	.L21550
	jmp	.L21543
.L25911:
	cmpb	$51, 2(%r15)
	je	.L21541
	movq	8(%r15), %r12
	cmpw	$71, (%r12)
	je	.L25926
.L21541:
	cmpl	$66, %eax
	jne	.L21544
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r15), %rax
	movq	%rax, %rbx
	je	.L21543
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, %r15
	movq	%rbx, 8(%rax)
	jmp	.L21543
.L25926:
	movq	8(%r12), %rsi
	movq	%r15, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L21542
	movzbl	2(%r15), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r15
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L21543
.L21542:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L25000:
	movq	%rax, %r15
	jmp	.L21543
.L21540:
	cmpq	$0, 16(%r15)
	je	.L25927
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L25000
	movq	8(%r15), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L21543
.L25927:
	movq	8(%r15), %rdi
	call	copy_to_reg
	jmp	.L25000
.L21535:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L25928
.L21537:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -9248(%rbp)
	movq	%r12, 8(%rax)
	movq	-9248(%rbp), %rsi
	movq	%rbx, 16(%rsi)
	jmp	.L21530
.L25928:
	cmpq	16(%r13), %rax
	jne	.L21537
	jmp	.L21530
.L25910:
	jne	.L21531
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L21530
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -9248(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L21530
.L21527:
	testq	%rcx, %rcx
	je	.L25929
	movq	24(%r13), %r9
	testq	%r9, %r9
	movq	%r9, -9248(%rbp)
	jne	.L21530
	movq	8(%r13), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rcx
	movq	%rcx, -9248(%rbp)
	jmp	.L21530
.L25929:
	movq	8(%r13), %rdi
	call	copy_to_reg
	movq	%rax, -9248(%rbp)
	jmp	.L21530
.L21520:
	testq	%rcx, %rcx
	movl	$8, -9240(%rbp)
	je	.L21516
	movl	32(%rcx), %edi
	movl	%edi, -9240(%rbp)
	jmp	.L21516
.L21519:
	cmpl	$7, %edx
	ja	.L21515
	jmp	.L21520
.L25908:
	movq	-5320(%rbp), %rax
	movq	8(%rax), %rdi
	call	int_size_in_bytes
	cmpw	$39, (%r13)
	movl	%eax, -5332(%rbp)
	jne	.L25561
	movq	8(%r13), %rcx
	movq	8(%rcx), %rdi
	movl	(%rcx), %r10d
	cmpq	$0, 8(%rdi)
	movslq	%r10d,%r12
	sete	%r11b
	leaq	15(,%r12,8), %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	leaq	32(%rsp), %r14
	movzbl	%r11b, %esi
	movq	%r14, -5344(%rbp)
	movl	%esi, -9236(%rbp)
	movl	-9236(%rbp), %r8d
	cmpl	%r10d, %r8d
	movl	%r8d, -9228(%rbp)
	jge	.L24138
.L21499:
	movslq	-9228(%rbp),%r14
	movq	8(%rcx,%r14,8), %r8
	movq	%r14, -5352(%rbp)
	movl	-5332(%rbp), %ecx
	movq	8(%r8), %rax
	movq	16(%r8), %r10
	testl	%ecx, %ecx
	movzbl	2(%rax), %r14d
	movq	8(%r10), %rdx
	movq	%rdx, -5360(%rbp)
	movslq	%r14d,%r9
	movzbl	mode_size(%r9), %edx
	movq	%r9, -5368(%rbp)
	movl	%edx, -9232(%rbp)
	js	.L21472
	mov	%edx, %r12d
	movslq	-5332(%rbp),%rbx
	addq	-5360(%rbp), %r12
	cmpq	%rbx, %r12
	jle	.L21472
	movl	-5332(%rbp), %esi
	subl	-5360(%rbp), %esi
	movl	%esi, -9232(%rbp)
	je	.L25560
.L21472:
	movzwl	(%r15), %edx
	movq	%r15, %r12
	cmpw	$66, %dx
	je	.L21474
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L21476
	cmpw	$54, %dx
	je	.L21476
	cmpw	$55, %dx
	je	.L21476
	cmpw	$58, %dx
	je	.L21476
	cmpw	$134, %dx
	je	.L21476
	cmpw	$56, %dx
	je	.L21476
	cmpw	$140, %dx
	je	.L21476
.L21475:
	movzbl	2(%r15), %eax
	movl	%r14d, %edi
	testb	%al, %al
	je	.L24998
	movzbl	%al, %edi
.L24998:
	call	gen_reg_rtx
	movq	%r15, %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	emit_move_insn
.L21474:
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L25930
.L21479:
	cmpw	$65, %dx
	je	.L25931
	leal	-67(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L21496
	cmpw	$54, %dx
	je	.L21496
	cmpw	$55, %dx
	je	.L21496
	cmpw	$58, %dx
	je	.L21496
	cmpw	$134, %dx
	je	.L21496
	cmpw	$56, %dx
	je	.L21496
	cmpw	$140, %dx
	je	.L21496
	cmpw	$61, %dx
	je	.L25932
.L21495:
	movslq	-5332(%rbp),%r8
	movl	-9232(%rbp), %eax
	movq	%r12, %rdi
	movq	-5360(%rbp), %rdx
	movl	$1, %ecx
	movl	%r14d, %r9d
	movl	%r14d, (%rsp)
	sall	$3, %eax
	movq	%r8, 8(%rsp)
	mov	%eax, %esi
	salq	$3, %rdx
	xorl	%r8d, %r8d
	call	extract_bit_field
.L24999:
	movq	-5352(%rbp), %r11
	movq	-5344(%rbp), %r12
	movq	%rax, (%r12,%r11,8)
.L21470:
	incl	-9228(%rbp)
	movq	8(%r13), %rcx
	movl	-9228(%rbp), %esi
	cmpl	(%rcx), %esi
	jl	.L21499
.L24138:
	movq	cfun(%rip), %rdi
	movq	16(%rdi), %r15
	movq	40(%r15), %rbx
	testq	%rbx, %rbx
	je	.L24140
.L21505:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L25933
	call	emit_insn
	movq	%rax, 16(%rbx)
.L21504:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %r14
	movq	16(%rdx), %r10
	testq	%r14, %r14
	movq	%r14, %rbx
	movq	%r14, 40(%r10)
	jne	.L21505
	movq	8(%r13), %rcx
.L24140:
	movl	-9236(%rbp), %ebx
	cmpl	(%rcx), %ebx
	jge	.L25541
.L21511:
	movslq	-9236(%rbp),%r11
	movq	-5344(%rbp), %r12
	salq	$3, %r11
	movq	8(%r11,%rcx), %rax
	movq	(%r12,%r11), %rsi
	movq	8(%rax), %rdi
	call	emit_move_insn
	incl	-9236(%rbp)
	movq	8(%r13), %rcx
	movl	-9236(%rbp), %r8d
	cmpl	(%rcx), %r8d
	jl	.L21511
	jmp	.L25541
.L25933:
	movq	8(%rdi), %rcx
	movq	8(%rcx), %r9
	movq	%r9, 16(%rbx)
	call	emit_insn
	jmp	.L21504
.L25932:
	movzbl	2(%r12), %edx
	cmpl	%r14d, %edx
	jne	.L21495
.L21496:
	movq	-5352(%rbp), %r10
	movq	-5344(%rbp), %r14
	movq	%r12, (%r14,%r10,8)
	jmp	.L21470
.L25931:
	cmpq	$0, -5360(%rbp)
	jne	.L24430
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %rsi
	movzbl	mode_size(%rsi), %ebx
	cmpl	%ebx, -9232(%rbp)
	je	.L21485
.L21486:
	movzbq	2(%rdx), %r9
	movzbq	mode_size(%r9), %rdi
	cmpq	%rdi, -5360(%rbp)
	je	.L25934
.L21484:
	cmpq	$0, -5360(%rbp)
	jne	.L22779
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbx
	movzbq	mode_size(%rbx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %rbx
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%rbx, %rdi
	movl	%r14d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	jmp	.L24999
.L25934:
	movq	16(%r12), %r10
	movzbq	2(%r10), %rdx
	movzbl	mode_size(%rdx), %ecx
	cmpl	%ecx, -9232(%rbp)
	jne	.L21484
.L21485:
	xorl	%r8d, %r8d
	movq	-5352(%rbp), %r11
	movq	-5344(%rbp), %rax
	cmpq	$0, -5360(%rbp)
	setne	%r8b
	leaq	(%rax,%r11,8), %rbx
	movq	8(%r12,%r8,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L21470
	cmpw	$54, %dx
	je	.L21470
	cmpw	$55, %dx
	je	.L21470
	cmpw	$58, %dx
	je	.L21470
	cmpw	$134, %dx
	je	.L21470
	cmpw	$56, %dx
	je	.L21470
	cmpw	$140, %dx
	je	.L21470
	cmpw	$61, %dx
	je	.L25935
.L21490:
	movslq	-5332(%rbp),%rdi
	movl	-9232(%rbp), %r9d
	movl	%r14d, (%rsp)
	xorl	%edx, %edx
	movl	$1, %ecx
	xorl	%r8d, %r8d
	sall	$3, %r9d
	movq	%rdi, 8(%rsp)
	mov	%r9d, %esi
	movq	(%rbx), %rdi
	movl	%r14d, %r9d
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L21470
.L25935:
	movzbl	2(%rcx), %esi
	cmpl	%r14d, %esi
	jne	.L21490
	jmp	.L21470
.L24430:
	movq	8(%r12), %rdx
	jmp	.L21486
.L25930:
	movl	%r14d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L21480
	cmpl	%eax, 32(%rdx)
	jae	.L21481
.L24429:
	movzwl	(%r12), %edx
	jmp	.L21479
.L21481:
	movq	-5360(%rbp), %rbx
	movl	%r14d, %edi
	call	get_mode_alignment
	mov	%eax, %ecx
	salq	$3, %rbx
	movq	%rbx, %rax
	cqto
	idivq	%rcx
	testq	%rdx, %rdx
	jne	.L24429
	movq	-5368(%rbp), %r10
	movzbl	mode_size(%r10), %edx
	cmpl	%edx, -9232(%rbp)
	jne	.L24429
	movl	%r14d, %edi
	call	gen_reg_rtx
	movl	$1, %ecx
	movq	-5360(%rbp), %rdx
	movq	-5344(%rbp), %r8
	movq	-5352(%rbp), %r11
	movq	%r12, %rdi
	movl	%r14d, %esi
	leaq	(%r8,%r11,8), %rbx
	movl	$1, %r8d
	movq	%rax, (%rbx)
	call	adjust_address_1
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L21470
.L21480:
	cmpl	$8, %eax
	ja	.L24429
	jmp	.L21481
.L21476:
	movzbl	2(%r15), %edx
	movzbl	%dl, %edi
	cmpl	%r14d, %edi
	je	.L21474
	testb	%dl, %dl
	je	.L21474
	jmp	.L21475
.L25907:
	movq	-5312(%rbp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4, %ecx
	call	expand_expr
	movq	%rax, %r13
	jmp	.L21463
.L25906:
	movq	%rcx, %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	-5312(%rbp), %r9
	movq	144(%r9), %rax
	jmp	.L21462
	.p2align 6,,7
.L21350:
	movl	$0, -2616(%rbp)
	xorl	%ebx, %ebx
	leaq	-2592(%rbp), %r12
	call	push_temp_slots
	movq	-5312(%rbp), %r13
	movq	global_trees+120(%rip), %rdx
	movl	$0, -9296(%rbp)
	movq	global_trees+136(%rip), %r14
	movq	$0, -2624(%rbp)
	movq	%rdx, -9312(%rbp)
	movq	%r14, -9304(%rbp)
	movzbl	16(%r13), %eax
	cmpb	$39, %al
	je	.L25936
	cmpb	$40, %al
	je	.L25937
	movq	-5312(%rbp), %rax
	movq	8(%rax), %rdx
	movzbl	61(%rdx), %r10d
	movzbl	17(%rdx), %ecx
	shrb	$1, %r10b
	shrb	$5, %cl
	movzbl	%r10b, %r9d
	movl	%ecx, %r14d
	andl	$1, %r14d
	movl	%r9d, -9296(%rbp)
	cmpl	$51, -9296(%rbp)
	movl	%r14d, -5328(%rbp)
	je	.L25938
	movslq	-9296(%rbp),%r8
	movzwq	mode_bitsize(%r8,%r8), %rdx
	movq	%rdx, -2592(%rbp)
.L21353:
	testq	%rbx, %rbx
	jne	.L25939
.L21420:
	movzbl	16(%r13), %edx
	cmpb	$40, %dl
	je	.L25940
	cmpb	$39, %dl
	je	.L25941
	leal	-43(%rdx), %ebx
	cmpb	$1, %bl
	jbe	.L25942
	cmpb	$57, %dl
	jne	.L21378
	movq	-2624(%rbp), %rax
	leaq	-2624(%rbp), %r9
	movq	8(%r13), %rdx
	testq	%rax, %rax
	je	.L21379
	movq	(%rax), %r8
.L21380:
	testq	%r8, %r8
	je	.L24132
	movq	128(%rdx), %rsi
.L21413:
	movq	24(%r8), %rdi
	testq	%rdi, %rdi
	movq	%rdi, %rdx
	je	.L24134
	.p2align 4,,7
.L21398:
	movq	8(%rdi), %r12
	cmpq	%rsi, 128(%r12)
	je	.L25943
	movzbl	16(%rdi), %eax
	cmpb	$47, %al
	je	.L21394
	cmpb	$51, %al
	je	.L21394
	movzbl	%al, %r15d 
	movzbl	tree_code_type(%r15), %eax
	cmpb	$114, %al
	je	.L21397
	cmpb	$49, %al
	je	.L21397
	cmpb	$50, %al
	je	.L21397
	cmpb	$101, %al
	je	.L21397
	xorl	%edi, %edi
	.p2align 4,,7
.L21393:
	testq	%rdi, %rdi
	jne	.L21398
.L24134:
	testq	%rdx, %rdx
	je	.L24136
	.p2align 4,,7
.L21412:
	movq	8(%rdx), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$13, %al
	je	.L21404
	cmpb	$15, %al
	je	.L21404
.L21401:
	movzbl	16(%rdx), %eax
	cmpb	$47, %al
	je	.L21408
	cmpb	$51, %al
	je	.L21408
	movzbl	%al, %edi 
	movzbl	tree_code_type(%rdi), %eax
	cmpb	$114, %al
	je	.L21411
	cmpb	$49, %al
	je	.L21411
	cmpb	$50, %al
	je	.L21411
	cmpb	$101, %al
	je	.L21411
	xorl	%edx, %edx
	.p2align 4,,7
.L21407:
	testq	%rdx, %rdx
	jne	.L21412
.L24136:
	movq	(%r8), %r8
	testq	%r8, %r8
	jne	.L21413
.L24132:
	xorl	%edi, %edi
.L21391:
	testq	%rdi, %rdi
	je	.L21362
	movq	%rdi, %r13
	jmp	.L21420
.L21362:
	movq	-9312(%rbp), %rdi
	xorl	%esi, %esi
	call	host_integerp
	testl	%eax, %eax
	je	.L21421
	movq	sizetype_tab+24(%rip), %rdi
	movq	-9312(%rbp), %rsi
	call	convert
	movq	global_trees+152(%rip), %rdx
	movl	$61, %edi
	movq	%rax, %rsi
	call	size_binop
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L21421
	movq	-9304(%rbp), %rdx
	movl	$59, %edi
	call	size_binop
	testq	%rax, %rax
	movq	%rax, %rbx
	jne	.L25944
.L21421:
	movq	-9304(%rbp), %rdi
	xorl	%esi, %esi
	call	tree_low_cst
	movq	%rax, -2600(%rbp)
	movq	-9312(%rbp), %rax
	movq	%rax, -2608(%rbp)
.L21422:
	movl	-9296(%rbp), %r12d
	testl	%r12d, %r12d
	movl	%r12d, -2612(%rbp)
	jne	.L21424
	movl	-5324(%rbp), %esi
	testl	%esi, %esi
	jne	.L25945
.L21424:
	movq	%r13, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	-2608(%rbp), %rdi
	movq	%rax, %r12
	movq	%rax, %r15
	testq	%rdi, %rdi
	jne	.L25946
.L21425:
	cmpw	$66, (%r12)
	je	.L25947
.L21435:
	movl	-2616(%rbp), %eax
	testl	%eax, %eax
	je	.L21450
	cmpw	$66, (%r12)
	je	.L25948
.L21450:
	movq	-5312(%rbp), %rbx
	cmpb	$39, 16(%rbx)
	je	.L25949
.L21452:
	cmpw	$66, (%r12)
	je	.L25950
.L21454:
	movq	-5312(%rbp), %rdi
	call	get_alias_set
	movl	-5324(%rbp), %r15d
	movl	-2612(%rbp), %ecx
	movq	%rax, %rdi
	movq	-2592(%rbp), %rsi
	movq	-2600(%rbp), %rdx
	testl	%r15d, %r15d
	je	.L21456
	movq	-5312(%rbp), %r14
	movq	8(%r14), %r8
	movzbl	61(%r8), %r10d
	shrb	$1, %r10b
	movzbl	%r10b, %r9d
.L21457:
	movl	-5328(%rbp), %eax
	movq	-5320(%rbp), %r8
	movl	%eax, (%rsp)
	movq	8(%r13), %rbx
	movl	%edi, 16(%rsp)
	movq	%r12, %rdi
	movq	%rbx, 8(%rsp)
	call	store_field
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	preserve_temp_slots
	call	free_temp_slots
	call	pop_temp_slots
	movl	-5324(%rbp), %r13d
	testl	%r13d, %r13d
	je	.L22343
	movq	-5312(%rbp), %rsi
	movq	8(%rsi), %rdx
	movq	-5320(%rbp), %rsi
	movzbl	61(%rdx), %r12d
	shrb	$1, %r12b
	movzbl	%r12b, %edi
	jmp	.L25112
.L21456:
	xorl	%r9d, %r9d
	jmp	.L21457
.L25950:
	movq	-5312(%rbp), %rdi
	call	can_address_p
	testl	%eax, %eax
	jne	.L21454
	cmpq	%r15, %r12
	je	.L25951
.L21455:
	orb	$1, 3(%r12)
	jmp	.L21454
.L25951:
	movq	%r12, %rdi
	call	copy_rtx
	movq	%rax, %r12
	jmp	.L21455
	.p2align 6,,7
.L25949:
	movq	40(%rbx), %r9
	testb	$16, 17(%r9)
	je	.L21452
	cmpq	%r15, %r12
	je	.L25952
.L21453:
	orb	$4, 3(%r12)
	jmp	.L21452
.L25952:
	movq	%r12, %rdi
	call	copy_rtx
	movq	%rax, %r12
	jmp	.L21453
	.p2align 6,,7
.L25948:
	cmpq	%r15, %r12
	je	.L25953
.L21451:
	orb	$8, 3(%r12)
	jmp	.L21450
.L25953:
	movq	%r12, %rdi
	call	copy_rtx
	movq	%rax, %r12
	jmp	.L21451
	.p2align 6,,7
.L25947:
	movq	16(%r12), %rax
	xorl	%ebx, %ebx
	testq	%rax, %rax
	je	.L21437
	movq	8(%rax), %rbx
.L21437:
	movq	%r12, %rdi
	call	shallow_copy_rtx
	xorl	%edx, %edx
	movq	-5312(%rbp), %rsi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	set_mem_attributes
	movq	16(%r12), %rax
	testq	%rax, %rax
	je	.L21439
	cmpq	%rbx, 8(%rax)
.L24997:
	je	.L21435
	testq	%rax, %rax
	je	.L21435
	movq	16(%rax), %rsi
	testq	%rsi, %rsi
	je	.L21435
	movq	-2600(%rbp), %r11
	cmpq	$-1, %r11
	leaq	7(%r11), %r14
	movq	%r11, %rax
	cmovle	%r14, %rax
	sarq	$3, %rax
	testq	%rax, %rax
	je	.L21435
	movq	8(%rsi), %rsi
	xorl	%edi, %edi
	subq	%rax, %rsi
	call	gen_rtx_CONST_INT
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	set_mem_offset
	jmp	.L21435
	.p2align 6,,7
.L21439:
	testq	%rbx, %rbx
	jmp	.L24997
.L25946:
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	call	expand_expr
	cmpw	$66, (%r12)
	movq	%rax, %r14
	jne	.L25507
	movzbl	2(%rax), %r11d
	movl	ptr_mode(%rip), %edi
	cmpl	%edi, %r11d
	je	.L21427
	movq	%rax, %rsi
	xorl	%edx, %edx
	call	convert_to_mode
	movq	%rax, %r14
.L21427:
	movl	(%r12), %eax
	andl	$16777215, %eax
	cmpl	$3342402, %eax
	je	.L25954
.L21428:
	movq	-5312(%rbp), %rdx
	movq	-2608(%rbp), %rdi
	movq	8(%rdx), %rbx
	call	highest_pow2_factor
	movq	%r12, %rdi
	movl	64(%rbx), %esi
	shrl	$3, %esi
	mov	%esi, %edx
	movq	%r14, %rsi
	cmpq	%rax, %rdx
	cmovl	%rax, %rdx
	call	offset_address
	movq	%rax, %r12
	jmp	.L21425
.L25954:
	movq	8(%r12), %rdi
	cmpb	$0, 2(%rdi)
	je	.L21428
	movq	-2592(%rbp), %rdx
	testq	%rdx, %rdx
	jle	.L21428
	movq	-2600(%rbp), %rax
	movq	%rdx, %r9
	cqto
	idivq	%r9
	testq	%rdx, %rdx
	jne	.L21428
	movl	-2612(%rbp), %edi
	call	get_mode_alignment
	movq	-2592(%rbp), %rcx
	mov	%eax, %r8d
	movq	%rcx, %rax
	cqto
	idivq	%r8
	testq	%rdx, %rdx
	jne	.L21428
	movl	-2612(%rbp), %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L21429
	cmpl	%eax, 32(%rdx)
.L24996:
	jne	.L21428
	movq	-2600(%rbp), %rdx
	movl	-2612(%rbp), %esi
	movq	%r12, %rdi
	movl	$1, %ecx
	movl	$1, %r8d
	cmpq	$-1, %rdx
	leaq	7(%rdx), %rbx
	cmovle	%rbx, %rdx
	sarq	$3, %rdx
	call	adjust_address_1
	movq	$0, -2600(%rbp)
	movq	%rax, %r12
	jmp	.L21428
.L21429:
	cmpl	$8, %eax
	jmp	.L24996
	.p2align 6,,7
.L25945:
	movq	%r13, %rdi
	call	stabilize_reference
	movq	%rax, %r13
	jmp	.L21424
.L25944:
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	host_integerp
	testl	%eax, %eax
	je	.L21421
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	tree_low_cst
	movq	$0, -2608(%rbp)
	movq	%rax, -2600(%rbp)
	jmp	.L21422
	.p2align 6,,7
.L21411:
	movq	32(%rdx), %rdx
	jmp	.L21407
.L21408:
	movq	40(%rdx), %rdx
	jmp	.L21407
.L21404:
	movq	8(%rcx), %r11
	cmpq	%rsi, 128(%r11)
	jne	.L21401
	testq	%r9, %r9
	je	.L21405
	movq	%r8, (%r9)
.L21405:
	movl	$41, %edi
	call	build1
	movq	%rax, %rdi
	jmp	.L21391
	.p2align 6,,7
.L21397:
	movq	32(%rdi), %rdi
	jmp	.L21393
.L21394:
	movq	40(%rdi), %rdi
	jmp	.L21393
.L25943:
	testq	%r9, %r9
	je	.L21391
	movq	%r8, (%r9)
	jmp	.L21391
.L21379:
	movq	placeholder_list(%rip), %r8
	jmp	.L21380
.L21378:
	leal	-116(%rdx), %r14d
	cmpb	$1, %r14b
	jbe	.L21365
	leal	-114(%rdx), %ecx
	cmpb	$1, %cl
	ja	.L21362
	movq	32(%r13), %r8
	movq	8(%r13), %rbx
	movq	8(%r8), %rdx
	movzbl	61(%rbx), %r10d
	movzbl	61(%rdx), %r9d
	andb	$-2, %r10b
	andb	$-2, %r9b
	cmpb	%r9b, %r10b
	jne	.L21362
.L21365:
	testb	$8, 17(%r13)
	je	.L21419
	movl	$1, -2616(%rbp)
.L21419:
	movq	32(%r13), %r13
	jmp	.L21420
.L25942:
	movq	32(%r13), %r15
	xorl	%r12d, %r12d
	movq	40(%r13), %rbx
	movq	8(%r15), %rdx
	movq	24(%rdx), %rax
	testq	%rax, %rax
	je	.L21373
	movq	104(%rax), %r12
.L21373:
	movq	8(%rdx), %rsi
	testq	%r12, %r12
	movq	40(%rsi), %r14
	jne	.L25955
.L21374:
	testb	$2, 17(%rbx)
	je	.L25956
.L21375:
	testb	$2, 17(%r14)
	je	.L25957
.L21376:
	movq	sizetype_tab(%rip), %rdi
	movq	%rbx, %rsi
	call	convert
	movq	%r14, %rdx
	movl	$61, %edi
	movq	%rax, %rsi
	call	size_binop
	movq	-9312(%rbp), %rsi
	movl	$59, %edi
	movq	%rax, %rdx
	call	size_binop
	movq	%rax, -9312(%rbp)
	jmp	.L21365
.L25957:
	movq	%r14, %rdi
	call	contains_placeholder_p
	testl	%eax, %eax
	je	.L21376
	movq	sizetype_tab(%rip), %rsi
	movq	%r14, %rdx
	movl	$58, %edi
	movq	%r15, %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %r14
	jmp	.L21376
	.p2align 6,,7
.L25956:
	movq	%rbx, %rdi
	call	contains_placeholder_p
	testl	%eax, %eax
	je	.L21375
	movq	8(%rbx), %rsi
	movq	%rbx, %rdx
	movl	$58, %edi
	movq	%r13, %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %rbx
	jmp	.L21375
	.p2align 6,,7
.L25955:
	movq	%r12, %rdi
	call	integer_zerop
	testl	%eax, %eax
	jne	.L21374
	movq	8(%rbx), %rsi
	movq	%rbx, %rdx
	movl	$60, %edi
	movq	%r12, %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	movq	%rax, %rbx
	jmp	.L21374
	.p2align 6,,7
.L25941:
	movq	40(%r13), %r12
	movq	88(%r12), %rbx
	testq	%rbx, %rbx
	je	.L21362
	testb	$2, 17(%rbx)
	je	.L25958
.L21368:
	movq	-9312(%rbp), %rsi
	movl	$59, %edi
	movq	%rbx, %rdx
	call	size_binop
	movq	-9304(%rbp), %rsi
	movl	$59, %edi
	movq	%rax, -9312(%rbp)
	movq	160(%r12), %rdx
.L24995:
	call	size_binop
	movq	%rax, -9304(%rbp)
	jmp	.L21365
.L25958:
	movq	%rbx, %rdi
	call	contains_placeholder_p
	testl	%eax, %eax
	je	.L21368
	movq	sizetype_tab(%rip), %rsi
	movq	%rbx, %rdx
	movl	$58, %edi
	movq	%r13, %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %rbx
	jmp	.L21368
	.p2align 6,,7
.L25940:
	movq	-9304(%rbp), %rsi
	movq	48(%r13), %rdx
	movl	$59, %edi
	jmp	.L24995
.L25939:
	movq	%rbx, %rdi
	movl	$1, %esi
	call	host_integerp
	testl	%eax, %eax
	jne	.L21359
	movl	$51, -9296(%rbp)
	movq	$-1, (%r12)
	jmp	.L21420
.L21359:
	movq	%rbx, %rdi
	movl	$1, %esi
	call	tree_low_cst
	movq	%rax, (%r12)
	jmp	.L21420
	.p2align 6,,7
.L25938:
	movq	32(%rdx), %rbx
	jmp	.L21353
.L25937:
	movq	-5312(%rbp), %rdi
	movzbl	17(%rdi), %esi
	movq	40(%rdi), %rbx
	shrb	$5, %sil
	movl	%esi, %r15d
	andl	$1, %r15d
	movl	%r15d, -5328(%rbp)
	jmp	.L21353
.L25936:
	movq	40(%r13), %rax
	testb	$16, 49(%rax)
	movq	40(%rax), %rbx
	jne	.L21352
	movzbl	48(%rax), %r9d
	movl	%r9d, -9296(%rbp)
.L21352:
	movzbl	17(%rax), %r8d
	shrb	$5, %r8b
	movl	%r8d, %r10d
	andl	$1, %r10d
	movl	%r10d, -5328(%rbp)
	jmp	.L21353
.L25895:
	movq	%rcx, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	%rax, %r13
	jmp	.L25117
.L20422:
	movq	-9552(%rbp), %rax
	movq	32(%rax), %r12
	movq	$0, -9000(%rbp)
	cmpb	$34, 16(%r12)
	jne	.L25959
	movl	-6220(%rbp), %eax
	testl	%eax, %eax
	cmove	%rbx, %r13
	orb	$1, 18(%r12)
	testq	%r13, %r13
	jne	.L20425
	movq	144(%r12), %rax
	testq	%rax, %rax
	je	.L20426
	movq	-9552(%rbp), %r15
	movq	%rax, %r13
	movq	40(%r15), %rsi
	testq	%rsi, %rsi
	movq	%rsi, -9576(%rbp)
.L25056:
	je	.L7871
.L20432:
	movq	-9576(%rbp), %r12
	movq	-9552(%rbp), %rcx
	xorl	%r14d, %r14d
	movq	%r12, 56(%rcx)
	movq	$0, 40(%rcx)
	movq	-9576(%rbp), %rsi
	movq	%r13, -9224(%rbp)
	movl	$0, -9004(%rbp)
	movzbl	16(%rsi), %eax
	cmpb	$47, %al
	je	.L25961
	cmpb	$51, %al
	je	.L25962
.L20448:
	movzwl	(%r13), %eax
	subl	$66, %eax
	cmpl	$12, %eax
	ja	.L20496
	mov	%eax, %r10d
	jmp	*.L20497(,%r10,8)
	.section	.rodata
	.align 8
	.align 4
.L20497:
	.quad	.L20490
	.quad	.L20496
	.quad	.L20496
	.quad	.L20496
	.quad	.L20496
	.quad	.L20495
	.quad	.L20496
	.quad	.L20496
	.quad	.L20496
	.quad	.L20493
	.quad	.L20493
	.quad	.L20496
	.quad	.L20493
	.text
.L20490:
	movq	8(%r13), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L20489:
	testl	%ebx, %ebx
	je	.L20486
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L20498
	testb	%al, %al
	jne	.L25963
.L20498:
	movzbl	2(%r13), %edx
	movq	-9576(%rbp), %rdi
	xorl	%esi, %esi
.L24962:
	xorl	%ecx, %ecx
	call	expand_expr
	testb	$8, 3(%r13)
	movq	%rax, -9216(%rbp)
	jne	.L24422
	xorl	%r11d, %r11d
	testl	%r11d, %r11d
	je	.L24417
	movl	$1, -9004(%rbp)
.L24420:
	movq	-9216(%rbp), %rdi
	movzwl	(%rdi), %edx
.L20447:
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L20525
	cmpw	$54, %dx
	je	.L20525
	cmpw	$55, %dx
	je	.L20525
	cmpw	$58, %dx
	je	.L20525
	cmpw	$134, %dx
	je	.L20525
	cmpw	$56, %dx
	je	.L20525
	cmpw	$140, %dx
	je	.L20525
.L20524:
	movq	-9216(%rbp), %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	je	.L20527
	cmpq	%r13, -9216(%rbp)
	je	.L20526
	movq	-9216(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L25964
.L20527:
	movq	-9576(%rbp), %rbx
	movzbl	16(%rbx), %eax
	testb	%al, %al
	je	.L20526
	testl	%r14d, %r14d
	jne	.L20526
	movzbl	%al, %r14d 
	cmpb	$100, tree_code_type(%r14)
	je	.L25965
.L20528:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L20533
	cmpl	$66, %eax
	je	.L25966
.L20537:
	cmpl	$75, %eax
	je	.L20541
	cmpl	$78, %eax
	je	.L20541
.L20536:
	movq	-9216(%rbp), %rcx
	movq	-9224(%rbp), %rbx
	movzbl	2(%rcx), %eax
	movzbl	2(%rbx), %ecx
	cmpb	%cl, %al
	je	.L20546
	testb	%al, %al
	je	.L20546
	movq	-9576(%rbp), %rax
	movq	8(%rax), %r12
	movl	-9004(%rbp), %eax
	movzbl	17(%r12), %edi
	shrb	$5, %dil
	movl	%edi, %edx
	andl	$1, %edx
	testl	%eax, %eax
	je	.L20547
	movq	-9216(%rbp), %rsi
	movzbl	%cl, %edi
	call	convert_to_mode
	movq	%rbx, %rdi
	movq	%rax, %rsi
	movq	%rax, -9216(%rbp)
.L24994:
	call	emit_move_insn
.L20526:
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L20446
	movl	-9004(%rbp), %r8d
	testl	%r8d, %r8d
	je	.L21339
	movq	-9216(%rbp), %r15
	cmpw	$66, (%r15)
	je	.L21339
.L20446:
	movq	-9000(%rbp), %rsi
	xorl	%edi, %edi
	call	expand_decl_cleanup
	jmp	.L7871
.L21339:
	movq	-9224(%rbp), %rax
	cmpb	$51, 2(%rax)
	je	.L20446
	cmpw	$61, (%rax)
	je	.L25967
.L21342:
	movq	-9224(%rbp), %rdi
	call	copy_to_reg
	jmp	.L20446
.L25967:
	cmpl	$52, 8(%rax)
	jbe	.L20446
	jmp	.L21342
.L20547:
	movq	-9224(%rbp), %rdi
	movq	-9216(%rbp), %rsi
	call	convert_move
	jmp	.L20526
	.p2align 6,,7
.L20546:
	cmpb	$51, %al
	je	.L25968
.L20550:
	movq	-9224(%rbp), %rcx
	cmpw	$39, (%rcx)
	je	.L25969
	cmpb	$51, %al
	je	.L25970
	movq	-9224(%rbp), %rdi
	movq	-9216(%rbp), %rsi
	jmp	.L24994
.L25970:
	movq	-9224(%rbp), %rdx
	movq	-9216(%rbp), %r14
	movq	-9576(%rbp), %rdi
	movq	%rdx, -9176(%rbp)
	movq	%r14, -9184(%rbp)
	call	expr_size
	movl	$8, %edx
	movq	-9224(%rbp), %rdi
	movq	%rax, %r14
	movq	16(%rdi), %rcx
	testq	%rcx, %rcx
	je	.L21141
	movl	32(%rcx), %edx
.L21141:
	movq	-9216(%rbp), %r11
	movq	16(%r11), %rax
	testq	%rax, %rax
	je	.L21142
	cmpl	32(%rax), %edx
	jb	.L21143
.L21138:
	testq	%rax, %rax
	movl	$8, -9164(%rbp)
	je	.L21139
	movl	32(%rax), %eax
.L24985:
	movl	%eax, -9164(%rbp)
.L21139:
	movq	-9224(%rbp), %rbx
	cmpb	$51, 2(%rbx)
	jne	.L25547
	movq	-9216(%rbp), %r9
	cmpb	$51, 2(%r9)
	jne	.L25546
	movq	-9224(%rbp), %rsi
	movzwl	(%rsi), %eax
	cmpl	$71, %eax
	je	.L21150
	cmpl	$66, %eax
	je	.L25971
.L21154:
	cmpl	$75, %eax
	je	.L21158
	cmpl	$78, %eax
	je	.L21158
.L21153:
	movq	-9216(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L21163
	cmpl	$66, %eax
	je	.L25972
.L21167:
	cmpl	$75, %eax
	je	.L21171
	cmpl	$78, %eax
	je	.L21171
.L21166:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L21176
	cmpl	$66, %eax
	je	.L25973
.L21180:
	cmpl	$75, %eax
	je	.L21184
	cmpl	$78, %eax
	je	.L21184
.L21179:
	movq	-9176(%rbp), %rdx
	cmpw	$66, (%rdx)
	jne	.L25545
	movq	-9184(%rbp), %r11
	cmpw	$66, (%r11)
	jne	.L25544
	testq	%r14, %r14
	je	.L25543
	cmpw	$54, (%r14)
	je	.L25974
.L21192:
	shrl	$3, -9164(%rbp)
	xorl	%edi, %edi
	mov	-9164(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -5280(%rbp)
	testl	%r12d, %r12d
	je	.L24130
.L21325:
	movslq	%r12d,%rsi
	movl	movstr_optab(,%rsi,4), %edx
	movq	%rsi, -5288(%rbp)
	cmpl	$1317, %edx
	je	.L21311
	cmpw	$54, (%r14)
	je	.L25975
.L21315:
	testb	$2, target_flags+3(%rip)
	je	.L21316
	movq	-5288(%rbp), %rsi
	cmpw	$63, mode_bitsize(%rsi,%rsi)
.L24992:
	jbe	.L21311
.L21314:
	movslq	%edx,%rdi
	leaq	(%rdi,%rdi,4), %rcx
	movq	%rdi, -5296(%rbp)
	movq	insn_data+24(,%rcx,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L21318
	movq	-9176(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L21311
.L21318:
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L25976
.L21319:
	movq	72(%r15), %rax
	testq	%rax, %rax
	je	.L21320
	xorl	%esi, %esi
	movq	-5280(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L21311
.L21320:
	call	get_last_insn
	movl	$1, %edx
	movq	%r14, %rsi
	movl	%r12d, %edi
	movq	%rax, -5304(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r15), %rax
	testq	%rax, %rax
	jne	.L25977
.L21321:
	movq	-5296(%rbp), %rdx
	movq	-9176(%rbp), %rdi
	xorl	%eax, %eax
	movq	-9184(%rbp), %rsi
	movq	-5280(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24526
	movq	-5304(%rbp), %rdi
	call	delete_insns_since
.L21311:
	movq	-5288(%rbp), %rbx
	movzbl	mode_wider_mode(%rbx), %r12d
	testl	%r12d, %r12d
	jne	.L21325
.L24130:
	testb	$2, target_flags+3(%rip)
	movq	-9176(%rbp), %r15
	movl	$0, volatile_ok(%rip)
	setne	%sil
	movzbl	%sil, %edi
	movq	8(%r15), %rsi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%r8b
	movq	%rax, %r15
	movq	-9184(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%r8b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%r14, %rsi
	movq	sizetype_tab(%rip), %r10
	movq	%rax, %rbx
	movzbl	61(%r10), %r9d
	shrb	$1, %r9b
	movzbl	%r9b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r14
	je	.L25978
.L21334:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r15, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r14, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %r10
	movq	8(%rdx), %rdi
	movq	(%r10), %r9
	movq	$0, (%r9)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %rbx
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%rbx), %r14
	movq	8(%r14), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r15)
	je	.L20526
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r15, %rdx
.L24993:
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L20526
.L25978:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r12
	xorl	%esi, %esi
	orb	$1, 49(%r12)
	movq	fn.1(%rip), %rdi
	orb	$8, 18(%rdi)
	movq	fn.1(%rip), %rcx
	orb	$64, 50(%rcx)
	movq	fn.1(%rip), %r11
	orb	$2, 18(%r11)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L21334
.L24526:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L20526
.L25977:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L21321
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L21321
.L25976:
	movq	-9184(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L21311
	jmp	.L21319
.L21316:
	movq	-5288(%rbp), %r11
	cmpw	$31, mode_bitsize(%r11,%r11)
	jmp	.L24992
.L25975:
	movq	mode_mask_array(,%rsi,8), %r15
	shrq	$1, %r15
	cmpq	%r15, 8(%r14)
	jbe	.L21314
	jmp	.L21315
.L25974:
	movq	8(%r14), %r12
	xorl	%r15d, %r15d
	movl	$17, %esi
.L21205:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L24119
.L21202:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %r9
	cmpq	%rsi, %r9
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L21202
.L24119:
	testl	%edi, %edi
	je	.L21195
	movslq	%edi,%rbx
	movq	%rbx, %r8
	salq	$4, %r8
	addq	optab_table+240(%rip), %r8
	cmpl	$1317, 8(%r8)
	je	.L21204
	call	get_mode_alignment
	movl	$128, %r10d
	cmpl	%eax, %r10d
	jb	.L21204
	movzbq	mode_size(%rbx), %rdi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rdi
	addq	%rax, %r15
	movq	%rdx, %r12
.L21204:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L21205
.L21195:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L21208
	movq	ix86_cost(%rip), %rdx
	mov	40(%rdx), %esi
	cmpq	%rsi, %r15
	jae	.L21192
.L21209:
	movq	-9184(%rbp), %rdi
	movq	-9176(%rbp), %r10
	movq	8(%r14), %r12
	movq	-9176(%rbp), %r9
	testb	$2, target_flags+3(%rip)
	movq	8(%rdi), %r8
	setne	%r14b
	movq	$0, -2136(%rbp)
	movl	$0, -9196(%rbp)
	movq	%r8, -2160(%rbp)
	movq	8(%r10), %rbx
	movq	%r9, -2192(%rbp)
	movzbl	%r14b, %ecx
	leal	5(,%rcx,4), %r14d
	xorl	%ecx, %ecx
	movzwl	(%rbx), %edx
	movq	%rbx, -9192(%rbp)
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L21214
	cmpw	$99, %dx
	je	.L21214
	cmpw	$98, %dx
	je	.L21214
.L21213:
	movq	-9192(%rbp), %r15
	movl	%ecx, -2176(%rbp)
	xorl	%edx, %edx
	movzwl	(%r15), %eax
	cmpw	$96, %ax
	je	.L21216
	cmpw	$98, %ax
	je	.L21216
.L21215:
	movl	%edx, -2128(%rbp)
	movq	-9184(%rbp), %rax
	xorl	%ecx, %ecx
	movq	-9192(%rbp), %rdx
	movq	%rax, -2168(%rbp)
	movq	%rdx, -2184(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %esi
	cmpw	$1, %si
	jbe	.L21219
	cmpw	$99, %dx
	je	.L21219
	cmpw	$98, %dx
	je	.L21219
.L21218:
	movl	-2128(%rbp), %r11d
	movl	%ecx, -2152(%rbp)
	movl	$0, -2148(%rbp)
	movl	$0, -2172(%rbp)
	testl	%r11d, %r11d
	je	.L21220
	movq	%r12, -2136(%rbp)
.L21220:
	movl	-2152(%rbp), %ebx
	movq	%r12, -2144(%rbp)
	testl	%ebx, %ebx
	je	.L21222
	movl	-2176(%rbp), %r9d
	testl	%r9d, %r9d
	jne	.L21221
.L21222:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L21235:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L24122
.L21232:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L21232
.L24122:
	testl	%edi, %edi
	je	.L21225
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L21234
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L21234
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L21234:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L21235
.L21225:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L21221
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L24124
.L21243:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %r11d
	cmpl	%r14d, %r11d
	cmovae	-9196(%rbp), %ecx
	movl	%ecx, -9196(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L21243
.L24124:
	movl	-2152(%rbp), %eax
	testl	%eax, %eax
	jne	.L21249
	movzwl	(%r8), %edx
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L21247
	cmpw	$54, %dx
	je	.L21247
	cmpw	$55, %dx
	je	.L21247
	cmpw	$58, %dx
	je	.L21247
	cmpw	$134, %dx
	je	.L21247
	cmpw	$56, %dx
	je	.L21247
	cmpw	$140, %dx
	je	.L21247
.L21249:
	movl	-2176(%rbp), %eax
	testl	%eax, %eax
	jne	.L21221
	movq	-9192(%rbp), %r10
	movzwl	(%r10), %edx
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L21251
	cmpw	$54, %dx
	je	.L21251
	cmpw	$55, %dx
	je	.L21251
	cmpw	$58, %dx
	je	.L21251
	cmpw	$134, %dx
	je	.L21251
	cmpw	$56, %dx
	je	.L21251
	cmpw	$140, %dx
	je	.L21251
.L21221:
	cmpl	$1, %r14d
	jbe	.L21254
.L21305:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L24127
.L21261:
	movslq	%ecx,%r8
	movzbl	mode_size(%r8), %edx
	cmpl	%r14d, %edx
	cmovae	-9196(%rbp), %ecx
	movl	%ecx, -9196(%rbp)
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L21261
.L24127:
	movl	-9196(%rbp), %eax
	testl	%eax, %eax
	je	.L21254
	movslq	-9196(%rbp),%r15
	movq	%r15, %r14
	salq	$4, %r14
	addq	optab_table+240(%rip), %r14
	movl	8(%r14), %ebx
	cmpl	$1317, %ebx
	je	.L21263
	movl	-9196(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L21263
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rsi
	movq	$0, -9208(%rbp)
	leaq	(%rsi,%rsi,4), %rdi
	cmpq	%rdx, -2144(%rbp)
	movq	insn_data+16(,%rdi,8), %r12
	movq	%rdx, -6192(%rbp)
	movq	%r12, -5272(%rbp)
	leaq	-2192(%rbp), %r12
	jb	.L21263
	movl	-2128(%rbp), %ecx
.L21303:
	testl	%ecx, %ecx
	je	.L21267
	subq	%rdx, 56(%r12)
.L21267:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L21268
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L21269
	movl	-9196(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24988:
	movq	%rax, -9208(%rbp)
.L21268:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L21271
	movq	24(%r12), %rdi
	movl	-9196(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24989:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L25979
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L21277
	movzbl	mode_size(%r15), %r11d
	leal	7(%r11), %edx
	andl	$-8, %edx
.L21278:
	movq	cfun(%rip), %r10
	andl	$33554432, %esi
	movq	16(%r10), %r9
	leaq	8(%r9), %rdi
	movl	8(%r9), %ecx
	je	.L21279
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24990:
	movq	%r15, %r8
	leal	(%rax,%rcx), %esi
	salq	$4, %r8
	movl	%esi, (%rdi)
	addq	optab_table+384(%rip), %r8
	movl	8(%r8), %eax
	cmpl	$1317, %eax
	je	.L21281
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rcx
	movq	insn_data+24(,%rcx,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L21282
	movq	%r14, %rdi
	movl	-9196(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L25980
.L21282:
	leaq	(%rbx,%rbx,4), %r11
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r11,8)
.L24991:
	movq	%rax, %rdi
	call	emit_insn
.L21301:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L21302
	movq	-6192(%rbp), %r14
	addq	%r14, 56(%r12)
.L21302:
	movq	48(%r12), %r8
	movq	-6192(%rbp), %rdx
	subq	-6192(%rbp), %r8
	cmpq	%rdx, %r8
	movq	%r8, 48(%r12)
	jae	.L21303
.L21263:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L21305
.L21254:
	cmpq	$0, -2144(%rbp)
.L25548:
	je	.L20526
	jmp	.L25518
.L25980:
	movl	-9196(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L21282
.L21281:
	movzbl	mode_size(%r15), %edi
	cmpl	%edx, %edi
	je	.L25981
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r9b
	movzbl	%r9b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L21289:
	movl	-9196(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%r10d, %r10d
	testq	%r10, %r10
	movq	%rax, %rbx
	je	.L21298
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L25982
.L21298:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L21301
.L25982:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L21298
.L25981:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L21289
.L21279:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24990
.L21277:
	movzbl	mode_size(%r15), %ebx
	leal	1(%rbx), %edx
	andl	$-2, %edx
	jmp	.L21278
.L25979:
	movq	%rax, %rsi
	movq	-9208(%rbp), %rdi
	xorl	%eax, %eax
	call	*-5272(%rbp)
	jmp	.L24991
.L21271:
	movq	24(%r12), %rdi
	movl	-9196(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24989
.L21269:
	movl	-9196(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24988
.L21251:
	movq	-9192(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -2184(%rbp)
	jmp	.L21221
.L21247:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -2160(%rbp)
	jmp	.L21249
.L21219:
	movl	$1, %ecx
	jmp	.L21218
.L21216:
	movl	$1, %edx
	jmp	.L21215
.L21214:
	movl	$1, %ecx
	jmp	.L21213
.L21208:
	cmpq	$2, %r15
	ja	.L21192
	jmp	.L21209
.L21184:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L25983
.L21186:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L21179
.L25983:
	cmpq	16(%r14), %rax
	jne	.L21186
	jmp	.L21179
.L25973:
	cmpb	$51, 2(%r14)
	je	.L21177
	movq	8(%r14), %r12
	cmpw	$71, (%r12)
	je	.L25984
.L21177:
	cmpl	$66, %eax
	jne	.L21180
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L21179
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%rbx, 8(%rax)
	jmp	.L21179
.L25984:
	movq	8(%r12), %rsi
	movq	%r14, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L21178
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L21179
.L21178:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24987:
	movq	%rax, %r14
	jmp	.L21179
.L21176:
	cmpq	$0, 16(%r14)
	je	.L25985
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L24987
	movq	8(%r14), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L21179
.L25985:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L24987
.L21171:
	movq	-9216(%rbp), %r9
	xorl	%esi, %esi
	movq	8(%r9), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-9216(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-9216(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L25986
.L21173:
	movq	-9216(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -9184(%rbp)
	movq	%r12, 8(%rax)
	movq	-9184(%rbp), %r8
	movq	%rbx, 16(%r8)
	jmp	.L21166
.L25986:
	cmpq	16(%rcx), %rax
	jne	.L21173
	jmp	.L21166
.L25972:
	cmpb	$51, 2(%rdx)
	je	.L21164
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L25987
.L21164:
	cmpl	$66, %eax
	jne	.L21167
	movq	-9216(%rbp), %r11
	xorl	%esi, %esi
	movq	8(%r11), %rdi
	call	protect_from_queue
	movq	-9216(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L21166
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -9184(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L21166
.L25987:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L21165
	movq	-9216(%rbp), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -9184(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L21166
.L21165:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24986:
	movq	%rax, -9184(%rbp)
	jmp	.L21166
.L21163:
	movq	-9216(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L25988
	movq	-9216(%rbp), %rax
	movq	24(%rax), %rcx
	testq	%rcx, %rcx
	movq	%rcx, -9184(%rbp)
	jne	.L21166
	movq	-9216(%rbp), %rdi
	movq	8(%rdi), %r12
	movzbl	2(%r12), %edi
	call	gen_reg_rtx
	movq	-9216(%rbp), %r15
	movq	%rax, %rdi
	movq	8(%r15), %rsi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r10
	movq	%r10, -9184(%rbp)
	jmp	.L21166
.L25988:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24986
.L21158:
	movq	-9224(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-9224(%rbp), %r8
	movq	%rax, %r12
	movq	16(%r8), %rdi
	call	protect_from_queue
	movq	-9224(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L25989
.L21160:
	movq	-9224(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -9176(%rbp)
	movq	%r12, 8(%rax)
	movq	-9176(%rbp), %r12
	movq	%rbx, 16(%r12)
	jmp	.L21153
.L25989:
	cmpq	16(%rsi), %rax
	jne	.L21160
	jmp	.L21153
.L25971:
	jne	.L21154
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, %rbx
	movq	-9224(%rbp), %rax
	cmpq	8(%rax), %rbx
	je	.L21153
	movq	%rax, %rdi
	call	copy_rtx
	movq	%rax, -9176(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L21153
.L21150:
	testq	%rcx, %rcx
	je	.L25990
	movq	-9224(%rbp), %r15
	movq	24(%r15), %r10
	testq	%r10, %r10
	movq	%r10, -9176(%rbp)
	jne	.L21153
	movq	-9224(%rbp), %r12
	movq	8(%r12), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdi
	movq	%rdi, -9176(%rbp)
	jmp	.L21153
.L25990:
	movq	-9224(%rbp), %rax
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rax, -9176(%rbp)
	jmp	.L21153
.L21143:
	testq	%rcx, %rcx
	movl	$8, -9164(%rbp)
	je	.L21139
	movl	32(%rcx), %eax
	jmp	.L24985
.L21142:
	cmpl	$7, %edx
	ja	.L21138
	jmp	.L21143
.L25969:
	movq	-9576(%rbp), %r14
	movq	8(%r14), %rdi
	call	int_size_in_bytes
	movl	%eax, -5236(%rbp)
	movq	-9224(%rbp), %rax
	cmpw	$39, (%rax)
	jne	.L25561
	movq	-9224(%rbp), %rdx
	movq	8(%rdx), %rcx
	movq	8(%rcx), %rsi
	movl	(%rcx), %r12d
	cmpq	$0, 8(%rsi)
	movslq	%r12d,%r9
	sete	%r8b
	leaq	15(,%r9,8), %r11
	andq	$-16, %r11
	subq	%r11, %rsp
	leaq	32(%rsp), %rbx
	movzbl	%r8b, %r15d
	movq	%rbx, -5248(%rbp)
	movl	%r15d, -9160(%rbp)
	movl	-9160(%rbp), %edi
	cmpl	%r12d, %edi
	movl	%edi, -9152(%rbp)
	jge	.L24113
.L21122:
	movslq	-9152(%rbp),%r14
	movl	-5236(%rbp), %r10d
	testl	%r10d, %r10d
	movq	8(%rcx,%r14,8), %rdi
	movq	%r14, -5256(%rbp)
	movq	8(%rdi), %rax
	movq	16(%rdi), %r12
	movzbl	2(%rax), %r14d
	movq	8(%r12), %r15
	movslq	%r14d,%rcx
	movzbl	mode_size(%rcx), %edx
	movq	%rcx, -5264(%rbp)
	movl	%edx, -9156(%rbp)
	js	.L21095
	movslq	-5236(%rbp),%rbx
	mov	%edx, %r9d
	leaq	(%r9,%r15), %r11
	cmpq	%rbx, %r11
	jle	.L21095
	movl	-5236(%rbp), %r8d
	subl	%r15d, %r8d
	movl	%r8d, -9156(%rbp)
	je	.L25560
.L21095:
	movq	-9216(%rbp), %r12
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L24542
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L21099
	cmpw	$54, %dx
	je	.L21099
	cmpw	$55, %dx
	je	.L21099
	cmpw	$58, %dx
	je	.L21099
	cmpw	$134, %dx
	je	.L21099
	cmpw	$56, %dx
	je	.L21099
	cmpw	$140, %dx
	je	.L21099
.L21098:
	movq	-9216(%rbp), %rdx
	movl	%r14d, %edi
	movzbl	2(%rdx), %eax
	testb	%al, %al
	je	.L24983
	movzbl	%al, %edi
.L24983:
	call	gen_reg_rtx
	movq	-9216(%rbp), %rsi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	emit_move_insn
	movzwl	(%r12), %edx
.L21097:
	cmpw	$66, %dx
	je	.L24542
.L21102:
	cmpw	$65, %dx
	je	.L25991
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L21119
	cmpw	$54, %dx
	je	.L21119
	cmpw	$55, %dx
	je	.L21119
	cmpw	$58, %dx
	je	.L21119
	cmpw	$134, %dx
	je	.L21119
	cmpw	$56, %dx
	je	.L21119
	cmpw	$140, %dx
	je	.L21119
	cmpw	$61, %dx
	je	.L25992
.L21118:
	movl	-9156(%rbp), %r9d
	movslq	-5236(%rbp),%r11
	leaq	0(,%r15,8), %rdx
	movq	%r12, %rdi
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r14d, (%rsp)
	sall	$3, %r9d
	mov	%r9d, %esi
	movq	%r11, 8(%rsp)
	movl	%r14d, %r9d
	call	extract_bit_field
.L24984:
	movq	-5256(%rbp), %r12
	movq	-5248(%rbp), %r8
	movq	%rax, (%r8,%r12,8)
.L21093:
	movq	-9224(%rbp), %r10
	incl	-9152(%rbp)
	movl	-9152(%rbp), %eax
	movq	8(%r10), %rcx
	cmpl	(%rcx), %eax
	jl	.L21122
.L24113:
	movq	cfun(%rip), %r15
	movq	16(%r15), %rdi
	movq	40(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L24115
.L21128:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L25993
	call	emit_insn
	movq	%rax, 16(%rbx)
.L21127:
	movq	cfun(%rip), %r11
	movq	40(%rbx), %r14
	movq	16(%r11), %rcx
	testq	%r14, %r14
	movq	%r14, %rbx
	movq	%r14, 40(%rcx)
	jne	.L21128
	movq	-9224(%rbp), %rbx
	movq	8(%rbx), %rcx
.L24115:
	movl	-9160(%rbp), %r9d
	cmpl	(%rcx), %r9d
	jge	.L20526
.L21134:
	movslq	-9160(%rbp),%r15
	movq	-5248(%rbp), %r10
	salq	$3, %r15
	movq	8(%r15,%rcx), %rsi
	movq	8(%rsi), %rdi
	movq	(%r10,%r15), %rsi
	call	emit_move_insn
	movq	-9224(%rbp), %rax
	incl	-9160(%rbp)
	movl	-9160(%rbp), %r8d
	movq	8(%rax), %r12
	cmpl	(%r12), %r8d
	movq	%r12, %rcx
	jl	.L21134
	jmp	.L20526
.L25993:
	movq	8(%rdi), %rdx
	movq	8(%rdx), %rsi
	movq	%rsi, 16(%rbx)
	call	emit_insn
	jmp	.L21127
.L25992:
	movzbl	2(%r12), %edx
	cmpl	%r14d, %edx
	jne	.L21118
.L21119:
	movq	-5256(%rbp), %rcx
	movq	-5248(%rbp), %r14
	movq	%r12, (%r14,%rcx,8)
	jmp	.L21093
.L25991:
	testq	%r15, %r15
	jne	.L24426
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %r10
	movzbl	mode_size(%r10), %esi
	cmpl	%esi, -9156(%rbp)
	je	.L21108
.L21109:
	movzbq	2(%rdx), %rbx
	movzbq	mode_size(%rbx), %rdi
	cmpq	%rdi, %r15
	je	.L25994
.L21107:
	testq	%r15, %r15
	jne	.L22779
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbx
	movzbq	mode_size(%rbx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %r15
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r15, %rdi
	movl	%r14d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	jmp	.L24984
.L25994:
	movq	16(%r12), %r11
	movzbq	2(%r11), %rcx
	movzbl	mode_size(%rcx), %edx
	cmpl	%edx, -9156(%rbp)
	jne	.L21107
.L21108:
	xorl	%r9d, %r9d
	movq	-5256(%rbp), %r8
	movq	-5248(%rbp), %rax
	testq	%r15, %r15
	setne	%r9b
	leaq	(%rax,%r8,8), %rbx
	movq	8(%r12,%r9,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L21093
	cmpw	$54, %dx
	je	.L21093
	cmpw	$55, %dx
	je	.L21093
	cmpw	$58, %dx
	je	.L21093
	cmpw	$134, %dx
	je	.L21093
	cmpw	$56, %dx
	je	.L21093
	cmpw	$140, %dx
	je	.L21093
	cmpw	$61, %dx
	je	.L25995
.L21113:
	movl	-9156(%rbp), %edi
	movslq	-5236(%rbp),%r10
	movl	%r14d, (%rsp)
	xorl	%edx, %edx
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r14d, %r9d
	sall	$3, %edi
	mov	%edi, %esi
	movq	%r10, 8(%rsp)
	movq	(%rbx), %rdi
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L21093
.L25995:
	movzbl	2(%rcx), %r12d
	cmpl	%r14d, %r12d
	jne	.L21113
	jmp	.L21093
.L24426:
	movq	8(%r12), %rdx
	jmp	.L21109
.L24542:
	movl	%r14d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L21103
	cmpl	%eax, 32(%rdx)
	jae	.L21104
.L24425:
	movzwl	(%r12), %edx
	jmp	.L21102
.L21104:
	movl	%r14d, %edi
	leaq	0(,%r15,8), %rbx
	call	get_mode_alignment
	mov	%eax, %ecx
	movq	%rbx, %rax
	cqto
	idivq	%rcx
	testq	%rdx, %rdx
	jne	.L24425
	movq	-5264(%rbp), %rax
	movzbl	mode_size(%rax), %r11d
	cmpl	%r11d, -9156(%rbp)
	jne	.L24425
	movl	%r14d, %edi
	call	gen_reg_rtx
	movl	$1, %ecx
	movq	%r15, %rdx
	movq	-5256(%rbp), %r8
	movq	-5248(%rbp), %r9
	movq	%r12, %rdi
	movl	%r14d, %esi
	leaq	(%r9,%r8,8), %rbx
	movl	$1, %r8d
	movq	%rax, (%rbx)
	call	adjust_address_1
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L21093
.L21103:
	cmpl	$8, %eax
	ja	.L24425
	jmp	.L21104
.L21099:
	movq	-9216(%rbp), %rdi
	movzbl	2(%rdi), %ecx
	movzbl	%cl, %r10d
	cmpl	%r14d, %r10d
	je	.L21097
	testb	%cl, %cl
	je	.L21097
	jmp	.L21098
.L25968:
	movq	-9576(%rbp), %rdx
	cmpb	$29, 16(%rdx)
	jne	.L20550
	movq	%rdx, %rdi
	call	expr_size
	cmpw	$54, (%rax)
	movq	%rax, -9032(%rbp)
	je	.L25996
.L20551:
	movq	sizetype_tab(%rip), %rdi
	movq	-9032(%rbp), %rsi
	call	make_tree
	xorl	%esi, %esi
	movq	-9576(%rbp), %r8
	movq	%rax, %r15
	movslq	32(%r8),%rdi
	call	size_int_wide
	movq	%r15, %rsi
	movl	$78, %edi
	movq	%rax, %rdx
	call	size_binop
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	movq	%rax, -5160(%rbp)
	call	expand_expr
	xorl	%edx, %edx
	movl	ptr_mode(%rip), %edi
	movq	%rax, %rsi
	movq	$0, -9120(%rbp)
	call	convert_to_mode
	movl	$8, %edx
	movq	-9216(%rbp), %rcx
	movq	%rax, -9064(%rbp)
	movq	-9224(%rbp), %r14
	movq	-9064(%rbp), %rax
	movq	%rcx, -9080(%rbp)
	movq	%r14, -9072(%rbp)
	movq	%rax, -9088(%rbp)
	movq	16(%r14), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L20754
	movl	32(%rax), %edx
.L20754:
	movq	-9216(%rbp), %rdi
	movq	16(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L20755
	cmpl	32(%rax), %edx
	jb	.L20756
.L20751:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L20752
	movl	32(%rcx), %r15d
.L20752:
	movq	-9224(%rbp), %r9
	cmpb	$51, 2(%r9)
	jne	.L25547
	movq	-9216(%rbp), %rbx
	cmpb	$51, 2(%rbx)
	jne	.L25546
	movq	-9224(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L20763
	cmpl	$66, %eax
	je	.L25997
.L20767:
	cmpl	$75, %eax
	je	.L20771
	cmpl	$78, %eax
	je	.L20771
.L20766:
	movq	-9216(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L20776
	cmpl	$66, %eax
	je	.L25998
.L20780:
	cmpl	$75, %eax
	je	.L20784
	cmpl	$78, %eax
	je	.L20784
.L20779:
	movq	-9064(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L20789
	cmpl	$66, %eax
	je	.L25999
.L20793:
	cmpl	$75, %eax
	je	.L20797
	cmpl	$78, %eax
	je	.L20797
.L20792:
	movq	-9072(%rbp), %r14
	cmpw	$66, (%r14)
	jne	.L25545
	movq	-9080(%rbp), %rax
	cmpw	$66, (%rax)
	jne	.L25544
	cmpq	$0, -9088(%rbp)
	je	.L25543
	movq	-9088(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L26000
.L20805:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -5176(%rbp)
	testl	%r12d, %r12d
	je	.L24097
.L20938:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L20924
	movq	-9088(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L26001
.L20928:
	testb	$2, target_flags+3(%rip)
	je	.L20929
	cmpw	$63, mode_bitsize(%r15,%r15)
.L24977:
	jbe	.L20924
.L20927:
	movslq	%edx,%rdi
	leaq	(%rdi,%rdi,4), %rcx
	movq	%rdi, -5184(%rbp)
	movq	insn_data+24(,%rcx,8), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L20931
	movq	-9072(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L20924
.L20931:
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L26002
.L20932:
	movq	72(%r14), %rax
	testq	%rax, %rax
	je	.L20933
	xorl	%esi, %esi
	movq	-5176(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L20924
.L20933:
	call	get_last_insn
	movl	$1, %edx
	movq	-9088(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -5192(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r14), %rax
	testq	%rax, %rax
	jne	.L26003
.L20934:
	movq	-5184(%rbp), %r10
	movq	-9072(%rbp), %rdi
	xorl	%eax, %eax
	movq	-9080(%rbp), %rsi
	movq	%rbx, %rdx
	movq	-5176(%rbp), %rcx
	leaq	(%r10,%r10,4), %r12
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24524
	movq	-5192(%rbp), %rdi
	call	delete_insns_since
.L20924:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L20938
.L24097:
	testb	$2, target_flags+3(%rip)
	movq	-9072(%rbp), %r8
	movl	$0, volatile_ok(%rip)
	setne	%r11b
	movq	8(%r8), %rsi
	movzbl	%r11b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-9080(%rbp), %rbx
	testb	$2, target_flags+3(%rip)
	movq	%rax, %r14
	setne	%al
	movq	8(%rbx), %rsi
	movzbl	%al, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-9088(%rbp), %rsi
	movq	sizetype_tab(%rip), %rdx
	movq	%rax, %rbx
	movzbl	61(%rdx), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L26004
.L20947:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %r8
	movq	8(%rdx), %rdi
	movq	(%r8), %rbx
	movq	$0, (%rbx)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r15
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r15), %r10
	movq	8(%r10), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	jne	.L26005
.L20936:
	movq	-9064(%rbp), %rbx
	cmpw	$54, (%rbx)
	je	.L26006
	movq	sizetype_tab(%rip), %r11
	movq	-9064(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	optab_table+16(%rip), %rsi
	movq	-9032(%rbp), %rdx
	xorl	%r9d, %r9d
	movzbl	61(%r11), %r12d
	movl	$3, (%rsp)
	shrb	$1, %r12b
	movzbl	%r12b, %edi
	call	expand_binop
	movq	-5160(%rbp), %rdi
	movq	%rax, %rbx
	call	highest_pow2_factor
	movq	-9064(%rbp), %rsi
	movq	-9224(%rbp), %rdi
	movq	%rax, %rdx
	call	offset_address
	movq	%rax, -9224(%rbp)
	call	gen_label_rtx
	xorl	%r9d, %r9d
	movq	%rax, -9120(%rbp)
	movq	const_int_rtx+512(%rip), %rsi
	movq	%rbx, %rdi
	movzbl	2(%rbx), %r8d
	movl	$107, %edx
	xorl	%ecx, %ecx
	movq	%rax, (%rsp)
	call	emit_cmp_and_jump_insns
.L20950:
	cmpq	const_int_rtx+512(%rip), %rbx
	je	.L20951
	movq	-9224(%rbp), %rdx
	cmpw	$66, (%rdx)
	movq	%rdx, -9136(%rbp)
	je	.L26007
	movq	-9224(%rbp), %rax
	movzbl	2(%rax), %edi
	call	get_mode_alignment
.L24978:
	movl	%eax, -9124(%rbp)
.L20953:
	movq	-9224(%rbp), %rsi
	movzbl	2(%rsi), %eax
	cmpb	$51, %al
	je	.L20956
	cmpw	$54, (%rbx)
	je	.L26008
.L20956:
	movq	-9224(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L20958
	cmpl	$66, %eax
	je	.L26009
.L20962:
	cmpl	$75, %eax
	je	.L20966
	cmpl	$78, %eax
	je	.L20966
.L20961:
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L20971
	cmpl	$66, %eax
	je	.L26010
.L20975:
	cmpl	$75, %eax
	je	.L20979
	cmpl	$78, %eax
	je	.L20979
.L20974:
	cmpw	$54, (%rbx)
	je	.L26011
.L20984:
	shrl	$3, -9124(%rbp)
	xorl	%edi, %edi
	mov	-9124(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r14d
	movq	%rax, -5208(%rbp)
	testl	%r14d, %r14d
	je	.L24111
.L21078:
	movslq	%r14d,%rcx
	movl	clrstr_optab(,%rcx,4), %edx
	movq	%rcx, -5216(%rbp)
	cmpl	$1317, %edx
	je	.L21065
	cmpw	$54, (%rbx)
	je	.L26012
.L21069:
	testb	$2, target_flags+3(%rip)
	je	.L21070
	movq	-5216(%rbp), %rax
	cmpw	$63, mode_bitsize(%rax,%rax)
.L24981:
	jbe	.L21065
.L21068:
	movslq	%edx,%r15
	leaq	(%r15,%r15,4), %r9
	movq	%r15, -5224(%rbp)
	movq	insn_data+24(,%r9,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L21072
	movq	-9136(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L21065
.L21072:
	movq	48(%r15), %rax
	testq	%rax, %rax
	je	.L21073
	xorl	%esi, %esi
	movq	-5208(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L21065
.L21073:
	call	get_last_insn
	movl	$1, %edx
	movq	%rbx, %rsi
	movl	%r14d, %edi
	movq	%rax, -5232(%rbp)
	call	convert_to_mode
	movq	%rax, %r12
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L26013
.L21074:
	movq	-5224(%rbp), %rsi
	movq	-9136(%rbp), %rdi
	xorl	%eax, %eax
	movq	-5208(%rbp), %rdx
	leaq	(%rsi,%rsi,4), %r8
	movq	%r12, %rsi
	call	*insn_data+16(,%r8,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24982
	movq	-5232(%rbp), %rdi
	call	delete_insns_since
.L21065:
	movq	-5216(%rbp), %rdx
	movzbl	mode_wider_mode(%rdx), %r14d
	testl	%r14d, %r14d
	jne	.L21078
.L24111:
	testb	$2, target_flags+3(%rip)
	movq	-9136(%rbp), %r14
	setne	%r12b
	movq	8(%r14), %rsi
	movzbl	%r12b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%rbx, %rsi
	movq	sizetype_tab(%rip), %rcx
	movq	%rax, %r14
	movzbl	61(%rcx), %r10d
	shrb	$1, %r10b
	movzbl	%r10b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.0(%rip)
	movq	%rax, %r15
	je	.L26014
.L21083:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	const_int_rtx+512(%rip), %rsi
	movq	integer_types+40(%rip), %rdi
	movq	%rax, %r12
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.0(%rip), %rsi
	movq	%rax, (%rbx)
	movq	(%r12), %r10
	movq	8(%rsi), %rdi
	movq	(%r10), %rdx
	movq	$0, (%rdx)
	call	build_pointer_type
	movq	fn.0(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	movq	%r12, %rcx
	movl	$53, %edi
	movq	fn.0(%rip), %r8
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%r8), %r15
	xorl	%r8d, %r8d
	movq	8(%r15), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	jne	.L26015
.L20951:
	cmpq	$0, -9120(%rbp)
	je	.L20526
	movq	-9120(%rbp), %rdi
	call	emit_label
	jmp	.L20526
.L26015:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
.L24982:
	call	emit_insn
	jmp	.L20951
.L26014:
	movl	$.LC7, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.0(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.0(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.0, %edi
	movq	%rax, fn.0(%rip)
	call	ggc_add_tree_root
	movq	fn.0(%rip), %r9
	xorl	%esi, %esi
	orb	$1, 49(%r9)
	movq	fn.0(%rip), %r11
	orb	$8, 18(%r11)
	movq	fn.0(%rip), %rdi
	orb	$64, 50(%rdi)
	movq	fn.0(%rip), %rbx
	orb	$2, 18(%rbx)
	movq	fn.0(%rip), %rdi
	call	make_decl_rtl
	movq	fn.0(%rip), %rdi
	call	assemble_external
	jmp	.L21083
.L26013:
	movq	%r12, %rdi
	movl	%r14d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L21074
	movq	%r12, %rsi
	movl	%r14d, %edi
	call	copy_to_mode_reg
	movq	%rax, %r12
	jmp	.L21074
.L21070:
	movq	-5216(%rbp), %r11
	cmpw	$31, mode_bitsize(%r11,%r11)
	jmp	.L24981
.L26012:
	movq	mode_mask_array(,%rcx,8), %r12
	shrq	$1, %r12
	cmpq	%r12, 8(%rbx)
	jbe	.L21068
	jmp	.L21069
.L26011:
	movq	8(%rbx), %r14
	xorl	%r15d, %r15d
	movl	$17, %esi
.L20997:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L24100
.L20994:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L20994
.L24100:
	testl	%edi, %edi
	je	.L20987
	movslq	%edi,%r12
	movq	%r12, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L20996
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L20996
	movzbq	mode_size(%r12), %r11
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%r11
	addq	%rax, %r15
	movq	%rdx, %r14
.L20996:
	movzbq	mode_size(%r12), %rsi
	cmpq	$1, %rsi
	ja	.L20997
.L20987:
	testq	%r14, %r14
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L21000
	movq	ix86_cost(%rip), %r9
	mov	40(%r9), %r12d
	cmpq	%r12, %r15
	jae	.L20984
.L21001:
	movq	8(%rbx), %r10
	movq	-9136(%rbp), %r15
	leaq	-272(%rbp), %r12
	testb	$2, target_flags+3(%rip)
	movq	$clear_by_pieces_1, -232(%rbp)
	movq	$0, -224(%rbp)
	setne	%dl
	leaq	16(%r12), %rcx
	movq	%r15, -272(%rbp)
	movq	%r10, -248(%rbp)
	movq	8(%r15), %r8
	movq	$0, -240(%rbp)
	movl	$0, -9148(%rbp)
	movzbl	%dl, %esi 
	movq	%r8, -264(%rbp)
	movzwl	(%r8), %edx
	leaq	5(,%rsi,4), %r15
	xorl	%esi, %esi
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L21005
	cmpw	$99, %dx
	je	.L21005
	cmpw	$98, %dx
	je	.L21005
.L21004:
	movl	%esi, (%rcx)
	movl	$0, 20(%r12)
	leaq	56(%r12), %rdx
	movzwl	(%r8), %eax
	xorl	%ecx, %ecx
	cmpw	$96, %ax
	je	.L21007
	cmpw	$98, %ax
	je	.L21007
.L21006:
	movl	%ecx, (%rdx)
	movl	56(%r12), %eax
	testl	%eax, %eax
	je	.L21008
	movq	24(%r12), %rcx
	movq	%rcx, 32(%r12)
.L21008:
	movl	16(%r12), %edi
	testl	%edi, %edi
	jne	.L21009
	movq	24(%r12), %r14
	movq	$0, -9144(%rbp)
	movl	$17, %esi
.L21022:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L24103
.L21019:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %r9
	cmpq	%rsi, %r9
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L21019
.L24103:
	testl	%edi, %edi
	je	.L21012
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L21021
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L21021
	movzbq	mode_size(%rbx), %rcx
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%rcx
	addq	%rax, -9144(%rbp)
	movq	%rdx, %r14
.L21021:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L21022
.L21012:
	testq	%r14, %r14
	jne	.L25529
	cmpq	$2, -9144(%rbp)
	jbe	.L21009
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L24105
.L21030:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%r15, %rdx
	cmovae	-9148(%rbp), %ecx
	movl	%ecx, -9148(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L21030
.L24105:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L21009
	movzwl	(%r8), %edx
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L21034
	cmpw	$54, %dx
	je	.L21034
	cmpw	$55, %dx
	je	.L21034
	cmpw	$58, %dx
	je	.L21034
	cmpw	$134, %dx
	je	.L21034
	cmpw	$56, %dx
	je	.L21034
	cmpw	$140, %dx
	je	.L21034
.L21009:
	cmpq	$1, %r15
	jbe	.L21037
.L21058:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L24108
.L21044:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %r9
	cmpq	%r15, %r9
	cmovae	-9148(%rbp), %ecx
	movl	%ecx, -9148(%rbp)
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L21044
.L24108:
	movl	-9148(%rbp), %r15d
	testl	%r15d, %r15d
	je	.L21037
	movslq	-9148(%rbp),%r15
	movq	%r15, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	movl	8(%rsi), %ebx
	cmpl	$1317, %ebx
	je	.L21046
	movl	-9148(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	jb	.L21046
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rcx
	leaq	(%rcx,%rcx,4), %r10
	cmpq	%rdx, 24(%r12)
	movq	insn_data+16(,%r10,8), %r14
	movq	%r14, -5200(%rbp)
	movq	%rdx, %r14
	jb	.L21046
	movl	56(%r12), %ecx
.L21056:
	testl	%ecx, %ecx
	je	.L21050
	subq	%rdx, 32(%r12)
.L21050:
	movl	16(%r12), %ebx
	testl	%ebx, %ebx
	je	.L21051
	movq	(%r12), %rdi
	movl	-9148(%rbp), %esi
	movl	$1, %r8d
	movq	8(%r12), %rdx
	movq	32(%r12), %rcx
	call	adjust_automodify_address_1
.L24980:
	movl	-9148(%rbp), %edx
	movq	%rax, %rbx
	movq	48(%r12), %rdi
	movq	32(%r12), %rsi
	call	*40(%r12)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	*-5200(%rbp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L21055
	addq	%r14, 32(%r12)
.L21055:
	movq	24(%r12), %rdi
	movq	%r14, %rdx
	subq	%r14, %rdi
	cmpq	%r14, %rdi
	movq	%rdi, 24(%r12)
	jae	.L21056
.L21046:
	movzbq	mode_size(%r15), %r15
	cmpq	$1, %r15
	ja	.L21058
.L21037:
	cmpq	$0, 24(%r12)
	je	.L20951
.L25451:
	movl	$.LC0, %edi
	movl	$2524, %esi
	movl	$.LC6, %edx
	jmp	.L25086
.L21051:
	movq	(%r12), %rdi
	movl	-9148(%rbp), %esi
	movl	$1, %ecx
	movq	32(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24980
.L21034:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, 8(%r12)
	jmp	.L21009
.L21007:
	movl	$1, %ecx
	jmp	.L21006
.L21005:
	movl	$1, %esi
	jmp	.L21004
.L21000:
	cmpq	$2, %r15
	ja	.L20984
	jmp	.L21001
.L20979:
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbx), %rdi
	movq	%rax, %r14
	call	protect_from_queue
	cmpq	8(%rbx), %r14
	movq	%rax, %r12
	je	.L26016
.L20981:
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r14, 8(%rax)
	movq	%r12, 16(%rax)
	jmp	.L20974
.L26016:
	cmpq	16(%rbx), %rax
	jne	.L20981
	jmp	.L20974
.L26010:
	cmpb	$51, 2(%rbx)
	je	.L20972
	movq	8(%rbx), %r14
	cmpw	$71, (%r14)
	je	.L26017
.L20972:
	cmpl	$66, %eax
	jne	.L20975
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%rbx), %rax
	movq	%rax, %r12
	je	.L20974
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r12, 8(%rax)
	jmp	.L20974
.L26017:
	movq	8(%r14), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r14)
	movq	%rax, %r12
	je	.L20973
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L20974
.L20973:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24979:
	movq	%rax, %rbx
	jmp	.L20974
.L20971:
	cmpq	$0, 16(%rbx)
	je	.L26018
	movq	24(%rbx), %rax
	testq	%rax, %rax
	jne	.L24979
	movq	8(%rbx), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%rbx), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	16(%rbx), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbx), %rbx
	jmp	.L20974
.L26018:
	movq	8(%rbx), %rdi
	call	copy_to_reg
	jmp	.L24979
.L20966:
	movq	-9224(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	movq	-9224(%rbp), %rsi
	movq	%rax, %r14
	movq	16(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-9224(%rbp), %rdx
	movq	%rax, %r12
	cmpq	8(%rdx), %r14
	je	.L26019
.L20968:
	movq	-9224(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -9136(%rbp)
	movq	%r14, 8(%rax)
	movq	-9136(%rbp), %rdi
	movq	%r12, 16(%rdi)
	jmp	.L20961
.L26019:
	cmpq	16(%rdx), %rax
	jne	.L20968
	jmp	.L20961
.L26009:
	jne	.L20962
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-9224(%rbp), %rcx
	movq	%rax, %r12
	cmpq	8(%rcx), %rax
	je	.L20961
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -9136(%rbp)
	movq	%r12, 8(%rax)
	jmp	.L20961
.L20958:
	movq	-9224(%rbp), %rsi
	cmpq	$0, 16(%rsi)
	je	.L26020
	movq	-9224(%rbp), %r15
	movq	24(%r15), %r10
	testq	%r10, %r10
	movq	%r10, -9136(%rbp)
	jne	.L20961
	movq	-9224(%rbp), %rax
	movq	8(%rax), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	-9224(%rbp), %r11
	movq	%rax, %rdi
	movq	%rax, 24(%r11)
	movq	-9224(%rbp), %r12
	movq	8(%r12), %rsi
	call	gen_move_insn
	movq	-9224(%rbp), %r14
	movq	%rax, %rdi
	movq	16(%r14), %rsi
	call	emit_insn_before
	movq	-9224(%rbp), %r8
	movq	24(%r8), %rdx
	movq	%rdx, -9136(%rbp)
	jmp	.L20961
.L26020:
	movq	8(%rsi), %rdi
	call	copy_to_reg
	movq	%rax, -9136(%rbp)
	jmp	.L20961
.L26008:
	movzbl	%al, %edx 
	movzbl	mode_size(%rdx), %r9d
	cmpl	8(%rbx), %r9d
	jne	.L20956
	movq	%rsi, %rdi
	movq	const_tiny_rtx(,%rdx,8), %rsi
	call	emit_move_insn
	jmp	.L20951
.L26007:
	movq	16(%rdx), %rax
	movl	$8, -9124(%rbp)
	testq	%rax, %rax
	je	.L20953
	movl	32(%rax), %eax
	jmp	.L24978
.L26006:
	movq	8(%rbx), %rsi
	movq	-9032(%rbp), %rdi
	negq	%rsi
	call	plus_constant_wide
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-9064(%rbp), %r14
	movq	-9224(%rbp), %rdi
	movl	$51, %esi
	movq	%rax, %rbx
	movq	8(%r14), %rdx
	call	adjust_address_1
	movq	%rax, -9224(%rbp)
	jmp	.L20950
.L26005:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L20936
.L26004:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %rdi
	orb	$1, 49(%rdi)
	movq	fn.1(%rip), %rcx
	orb	$8, 18(%rcx)
	movq	fn.1(%rip), %r9
	orb	$64, 50(%r9)
	movq	fn.1(%rip), %rsi
	orb	$2, 18(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L20947
.L24524:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L20936
.L26003:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L20934
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L20934
.L26002:
	movq	-9080(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L20924
	jmp	.L20932
.L20929:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L24977
.L26001:
	movq	mode_mask_array(,%r15,8), %r9
	shrq	$1, %r9
	cmpq	%r9, 8(%rsi)
	jbe	.L20927
	jmp	.L20928
.L26000:
	movq	8(%rcx), %r12
	xorl	%r14d, %r14d
	movl	$17, %esi
.L20818:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L24086
.L20815:
	movslq	%ecx,%r8
	movzbq	mode_size(%r8), %r9
	cmpq	%rsi, %r9
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L20815
.L24086:
	testl	%edi, %edi
	je	.L20808
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L20817
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L20817
	movzbq	mode_size(%rbx), %r11
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r11
	addq	%rax, %r14
	movq	%rdx, %r12
.L20817:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L20818
.L20808:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L20821
	movq	ix86_cost(%rip), %rdx
	mov	40(%rdx), %r12d
	cmpq	%r12, %r14
	jae	.L20805
.L20822:
	movq	-9088(%rbp), %r8
	movq	-9080(%rbp), %r10
	movq	-9072(%rbp), %rsi
	movq	-9072(%rbp), %r9
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r14b
	movq	8(%r10), %r8
	movq	$0, -2136(%rbp)
	movl	$0, -9100(%rbp)
	movq	%r8, -2160(%rbp)
	movzbl	%r14b, %ecx
	movq	8(%rsi), %rdi
	movq	%r9, -2192(%rbp)
	leal	5(,%rcx,4), %r14d
	xorl	%ecx, %ecx
	movq	%rdi, -9096(%rbp)
	movq	-9096(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L20827
	cmpw	$99, %dx
	je	.L20827
	cmpw	$98, %dx
	je	.L20827
.L20826:
	movq	-9096(%rbp), %r11
	movl	%ecx, -2176(%rbp)
	xorl	%edx, %edx
	movzwl	(%r11), %eax
	cmpw	$96, %ax
	je	.L20829
	cmpw	$98, %ax
	je	.L20829
.L20828:
	movl	%edx, -2128(%rbp)
	movq	-9096(%rbp), %r15
	xorl	%ecx, %ecx
	movq	-9080(%rbp), %rdx
	movq	%r15, -2184(%rbp)
	movq	%rdx, -2168(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L20832
	cmpw	$99, %dx
	je	.L20832
	cmpw	$98, %dx
	je	.L20832
.L20831:
	movl	-2128(%rbp), %eax
	movl	%ecx, -2152(%rbp)
	movl	$0, -2148(%rbp)
	movl	$0, -2172(%rbp)
	testl	%eax, %eax
	je	.L20833
	movq	%r12, -2136(%rbp)
.L20833:
	movl	-2152(%rbp), %r9d
	movq	%r12, -2144(%rbp)
	testl	%r9d, %r9d
	je	.L20835
	movl	-2176(%rbp), %edi
	testl	%edi, %edi
	jne	.L20834
.L20835:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L20848:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L24089
.L20845:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %r11
	cmpq	%rsi, %r11
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L20845
.L24089:
	testl	%edi, %edi
	je	.L20838
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L20847
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L20847
	movzbq	mode_size(%rbx), %rdi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rdi
	addq	%rax, %r15
	movq	%rdx, %r12
.L20847:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L20848
.L20838:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L20834
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L24091
.L20856:
	movslq	%ecx,%rbx
	movzbl	mode_size(%rbx), %edx
	cmpl	%r14d, %edx
	cmovae	-9100(%rbp), %ecx
	movl	%ecx, -9100(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L20856
.L24091:
	movl	-2152(%rbp), %r15d
	testl	%r15d, %r15d
	jne	.L20862
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L20860
	cmpw	$54, %dx
	je	.L20860
	cmpw	$55, %dx
	je	.L20860
	cmpw	$58, %dx
	je	.L20860
	cmpw	$134, %dx
	je	.L20860
	cmpw	$56, %dx
	je	.L20860
	cmpw	$140, %dx
	je	.L20860
.L20862:
	movl	-2176(%rbp), %eax
	testl	%eax, %eax
	jne	.L20834
	movq	-9096(%rbp), %r11
	movzwl	(%r11), %edx
	leal	-67(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L20864
	cmpw	$54, %dx
	je	.L20864
	cmpw	$55, %dx
	je	.L20864
	cmpw	$58, %dx
	je	.L20864
	cmpw	$134, %dx
	je	.L20864
	cmpw	$56, %dx
	je	.L20864
	cmpw	$140, %dx
	je	.L20864
.L20834:
	cmpl	$1, %r14d
	jbe	.L20867
.L20918:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L24094
.L20874:
	movslq	%ecx,%rsi
	movzbl	mode_size(%rsi), %r12d
	cmpl	%r14d, %r12d
	cmovae	-9100(%rbp), %ecx
	movl	%ecx, -9100(%rbp)
	movzbl	mode_wider_mode(%rsi), %ecx
	testl	%ecx, %ecx
	jne	.L20874
.L24094:
	movl	-9100(%rbp), %eax
	testl	%eax, %eax
	je	.L20867
	movslq	-9100(%rbp),%r15
	movq	%r15, %r14
	salq	$4, %r14
	addq	optab_table+240(%rip), %r14
	movl	8(%r14), %ebx
	cmpl	$1317, %ebx
	je	.L20876
	movl	-9100(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L20876
	movslq	%ebx,%rdx
	leaq	-2192(%rbp), %r12
	movq	$0, -9112(%rbp)
	leaq	(%rdx,%rdx,4), %rdi
	movzbq	mode_size(%r15), %rdx
	cmpq	%rdx, -2144(%rbp)
	movq	insn_data+16(,%rdi,8), %r9
	movq	%rdx, -6184(%rbp)
	movq	%r9, -5168(%rbp)
	jb	.L20876
	movl	-2128(%rbp), %ecx
.L20916:
	testl	%ecx, %ecx
	je	.L20880
	subq	%rdx, 56(%r12)
.L20880:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L20881
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L20882
	movl	-9100(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24973:
	movq	%rax, -9112(%rbp)
.L20881:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L20884
	movq	24(%r12), %rdi
	movl	-9100(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24974:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L26021
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L20890
	movzbl	mode_size(%r15), %ebx
	leal	7(%rbx), %edx
	andl	$-8, %edx
.L20891:
	movq	cfun(%rip), %r11
	andl	$33554432, %esi
	movq	16(%r11), %r8
	leaq	8(%r8), %rdi
	movl	8(%r8), %ecx
	je	.L20892
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24975:
	movq	%r15, %rsi
	leal	(%rax,%rcx), %r9d
	salq	$4, %rsi
	movl	%r9d, (%rdi)
	addq	optab_table+384(%rip), %rsi
	movl	8(%rsi), %eax
	cmpl	$1317, %eax
	je	.L20894
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rdi
	movq	insn_data+24(,%rdi,8), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	je	.L20895
	movq	%r14, %rdi
	movl	-9100(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L26022
.L20895:
	leaq	(%rbx,%rbx,4), %r10
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r10,8)
.L24976:
	movq	%rax, %rdi
	call	emit_insn
.L20914:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L20915
	movq	-6184(%rbp), %r14
	addq	%r14, 56(%r12)
.L20915:
	movq	48(%r12), %rsi
	movq	-6184(%rbp), %rdx
	subq	-6184(%rbp), %rsi
	cmpq	%rdx, %rsi
	movq	%rsi, 48(%r12)
	jae	.L20916
.L20876:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L20918
.L20867:
	cmpq	$0, -2144(%rbp)
	je	.L20936
	jmp	.L25518
.L26022:
	movl	-9100(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L20895
.L20894:
	movzbl	mode_size(%r15), %ebx
	cmpl	%edx, %ebx
	je	.L26023
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r8b
	movzbl	%r8b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	setne	%dl
	movq	%rax, %rcx
	movzbl	%dl, %esi
	movq	global_rtl+16(%rip), %rdx
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L20902:
	movl	-9100(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%r11d, %r11d
	testq	%r11, %r11
	movq	%rax, %rbx
	je	.L20911
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L26024
.L20911:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L20914
.L26024:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L20911
.L26023:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L20902
.L20892:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24975
.L20890:
	movzbl	mode_size(%r15), %r10d
	leal	1(%r10), %edx
	andl	$-2, %edx
	jmp	.L20891
.L26021:
	movq	%rax, %rsi
	movq	-9112(%rbp), %rdi
	xorl	%eax, %eax
	call	*-5168(%rbp)
	jmp	.L24976
.L20884:
	movq	24(%r12), %rdi
	movl	-9100(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24974
.L20882:
	movl	-9100(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24973
.L20864:
	movq	-9096(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -2184(%rbp)
	jmp	.L20834
.L20860:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -2160(%rbp)
	jmp	.L20862
.L20832:
	movl	$1, %ecx
	jmp	.L20831
.L20829:
	movl	$1, %edx
	jmp	.L20828
.L20827:
	movl	$1, %ecx
	jmp	.L20826
.L20821:
	cmpq	$2, %r14
	ja	.L20805
	jmp	.L20822
.L20797:
	movq	-9064(%rbp), %r9
	xorl	%esi, %esi
	movq	8(%r9), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-9064(%rbp), %r8
	movq	%rax, %r12
	movq	16(%r8), %rdi
	call	protect_from_queue
	movq	-9064(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26025
.L20799:
	movq	-9064(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -9088(%rbp)
	movq	%r12, 8(%rax)
	movq	-9088(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L20792
.L26025:
	cmpq	16(%rcx), %rax
	jne	.L20799
	jmp	.L20792
.L25999:
	cmpb	$51, 2(%rdx)
	je	.L20790
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26026
.L20790:
	cmpl	$66, %eax
	jne	.L20793
	movq	-9064(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	movq	-9064(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L20792
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -9088(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L20792
.L26026:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L20791
	movq	-9064(%rbp), %rax
	movzbl	2(%rax), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -9088(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L20792
.L20791:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24972:
	movq	%rax, -9088(%rbp)
	jmp	.L20792
.L20789:
	movq	-9064(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26027
	movq	-9064(%rbp), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	movq	%rbx, -9088(%rbp)
	jne	.L20792
	movq	-9064(%rbp), %r11
	movq	8(%r11), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	-9064(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r10
	movq	%r10, -9088(%rbp)
	jmp	.L20792
.L26027:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24972
.L20784:
	movq	-9216(%rbp), %rbx
	xorl	%esi, %esi
	movq	8(%rbx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-9216(%rbp), %r9
	movq	%rax, %r12
	movq	16(%r9), %rdi
	call	protect_from_queue
	movq	-9216(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26028
.L20786:
	movq	-9216(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -9080(%rbp)
	movq	%r12, 8(%rax)
	movq	-9080(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L20779
.L26028:
	cmpq	16(%rcx), %rax
	jne	.L20786
	jmp	.L20779
.L25998:
	cmpb	$51, 2(%rdx)
	je	.L20777
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26029
.L20777:
	cmpl	$66, %eax
	jne	.L20780
	movq	-9216(%rbp), %r8
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	call	protect_from_queue
	movq	-9216(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L20779
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -9080(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L20779
.L26029:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L20778
	movq	-9216(%rbp), %rax
	movzbl	2(%rax), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -9080(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L20779
.L20778:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24971:
	movq	%rax, -9080(%rbp)
	jmp	.L20779
.L20776:
	movq	-9216(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26030
	movq	-9216(%rbp), %r10
	movq	24(%r10), %rsi
	testq	%rsi, %rsi
	movq	%rsi, -9080(%rbp)
	jne	.L20779
	movq	-9216(%rbp), %r14
	movq	8(%r14), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	-9216(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdx
	movq	%rdx, -9080(%rbp)
	jmp	.L20779
.L26030:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24971
.L20771:
	movq	-9224(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-9224(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L26031
.L20773:
	movq	-9224(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -9072(%rbp)
	movq	%r12, 8(%rax)
	movq	-9072(%rbp), %rsi
	movq	%rbx, 16(%rsi)
	jmp	.L20766
.L26031:
	cmpq	16(%rsi), %rax
	jne	.L20773
	jmp	.L20766
.L25997:
	jne	.L20767
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-9224(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L20766
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -9072(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L20766
.L20763:
	testq	%rsi, %rsi
	je	.L26032
	movq	-9224(%rbp), %r11
	movq	24(%r11), %rdx
	testq	%rdx, %rdx
	movq	%rdx, -9072(%rbp)
	jne	.L20766
	movq	-9224(%rbp), %r14
	movq	8(%r14), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r12
	movq	%r12, -9072(%rbp)
	jmp	.L20766
.L26032:
	movq	-9224(%rbp), %r10
	movq	8(%r10), %rdi
	call	copy_to_reg
	movq	%rax, -9072(%rbp)
	jmp	.L20766
.L20756:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L20752
	movl	32(%rsi), %r15d
	jmp	.L20752
.L20755:
	cmpl	$7, %edx
	ja	.L20751
	jmp	.L20756
.L25996:
	movq	-9576(%rbp), %rdx
	movq	-9032(%rbp), %r10
	movslq	32(%rdx),%r9
	cmpq	%r9, 8(%r10)
	jge	.L20551
	movq	-9224(%rbp), %r11
	movq	-9216(%rbp), %r8
	movl	$8, %edx
	movq	%r11, -9016(%rbp)
	movq	%r8, -9024(%rbp)
	movq	16(%r11), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L20555
	movl	32(%rax), %edx
.L20555:
	movq	-9216(%rbp), %r14
	movq	16(%r14), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L20556
	cmpl	32(%rax), %edx
	jb	.L20557
.L20552:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L20553
	movl	32(%rcx), %r15d
.L20553:
	movq	-9224(%rbp), %rcx
	cmpb	$51, 2(%rcx)
	jne	.L25547
	movq	-9216(%rbp), %rbx
	cmpb	$51, 2(%rbx)
	jne	.L25546
	movq	-9224(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L20564
	cmpl	$66, %eax
	je	.L26033
.L20568:
	cmpl	$75, %eax
	je	.L20572
	cmpl	$78, %eax
	je	.L20572
.L20567:
	movq	-9216(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L20577
	cmpl	$66, %eax
	je	.L26034
.L20581:
	cmpl	$75, %eax
	je	.L20585
	cmpl	$78, %eax
	je	.L20585
.L20580:
	movq	-9032(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L20590
	cmpl	$66, %eax
	je	.L26035
.L20594:
	cmpl	$75, %eax
	je	.L20598
	cmpl	$78, %eax
	je	.L20598
.L20593:
	movq	-9016(%rbp), %r9
	cmpw	$66, (%r9)
	jne	.L25545
	movq	-9024(%rbp), %rax
	cmpw	$66, (%rax)
	jne	.L25544
	cmpq	$0, -9032(%rbp)
	je	.L25543
	movq	-9032(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L26036
.L20606:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -5136(%rbp)
	testl	%r12d, %r12d
	je	.L24083
.L20739:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L20725
	movq	-9032(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L26037
.L20729:
	testb	$2, target_flags+3(%rip)
	je	.L20730
	cmpw	$63, mode_bitsize(%r15,%r15)
.L24970:
	jbe	.L20725
.L20728:
	movslq	%edx,%r9
	leaq	(%r9,%r9,4), %rsi
	movq	%r9, -5144(%rbp)
	movq	insn_data+24(,%rsi,8), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L20732
	movq	-9016(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L20725
.L20732:
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L26038
.L20733:
	movq	72(%r14), %rax
	testq	%rax, %rax
	je	.L20734
	xorl	%esi, %esi
	movq	-5136(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L20725
.L20734:
	call	get_last_insn
	movl	$1, %edx
	movq	-9032(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -5152(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r14), %rax
	testq	%rax, %rax
	jne	.L26039
.L20735:
	movq	-5144(%rbp), %rdx
	movq	-9016(%rbp), %rdi
	xorl	%eax, %eax
	movq	-9024(%rbp), %rsi
	movq	-5136(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24526
	movq	-5152(%rbp), %rdi
	call	delete_insns_since
.L20725:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L20739
.L24083:
	testb	$2, target_flags+3(%rip)
	movq	-9016(%rbp), %rcx
	movl	$0, volatile_ok(%rip)
	setne	%r14b
	movq	8(%rcx), %rsi
	movzbl	%r14b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%r11b
	movq	%rax, %r14
	movq	-9024(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%r11b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-9032(%rbp), %rsi
	movq	sizetype_tab(%rip), %r10
	movq	%rax, %rbx
	movzbl	61(%r10), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L26040
.L20748:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %r11
	movq	8(%rdx), %rdi
	movq	(%r11), %r10
	movq	$0, (%r10)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r15
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r15), %rbx
	movq	8(%rbx), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	je	.L20526
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	jmp	.L24993
.L26040:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r9
	orb	$1, 49(%r9)
	movq	fn.1(%rip), %rsi
	orb	$8, 18(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %r8
	orb	$64, 50(%r8)
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L20748
.L26039:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L20735
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L20735
.L26038:
	movq	-9024(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L20725
	jmp	.L20733
.L20730:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L24970
.L26037:
	movq	mode_mask_array(,%r15,8), %r8
	shrq	$1, %r8
	cmpq	%r8, 8(%rsi)
	jbe	.L20728
	jmp	.L20729
.L26036:
	movq	8(%rcx), %r12
	xorl	%r14d, %r14d
	movl	$17, %esi
.L20619:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L24072
.L20616:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L20616
.L24072:
	testl	%edi, %edi
	je	.L20609
	movslq	%edi,%rbx
	movq	%rbx, %r11
	salq	$4, %r11
	addq	optab_table+240(%rip), %r11
	cmpl	$1317, 8(%r11)
	je	.L20618
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	jb	.L20618
	movzbq	mode_size(%rbx), %rdi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rdi
	addq	%rax, %r14
	movq	%rdx, %r12
.L20618:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L20619
.L20609:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L20622
	movq	ix86_cost(%rip), %rsi
	mov	40(%rsi), %ebx
	cmpq	%rbx, %r14
	jae	.L20606
.L20623:
	movq	-9032(%rbp), %r8
	movq	-9024(%rbp), %rcx
	movq	-9016(%rbp), %rdx
	movq	-9016(%rbp), %rax
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r14b
	movq	8(%rcx), %r8
	xorl	%ecx, %ecx
	movq	$0, -2056(%rbp)
	movl	$0, -9044(%rbp)
	movq	%r8, -2080(%rbp)
	movzbl	%r14b, %r11d
	movq	8(%rdx), %r10
	movq	%rax, -2112(%rbp)
	leal	5(,%r11,4), %r14d
	movq	%r10, -9040(%rbp)
	movq	-9040(%rbp), %r9
	movzwl	(%r9), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L20628
	cmpw	$99, %dx
	je	.L20628
	cmpw	$98, %dx
	je	.L20628
.L20627:
	movq	-9040(%rbp), %rdi
	movl	%ecx, -2096(%rbp)
	xorl	%edx, %edx
	movzwl	(%rdi), %eax
	cmpw	$96, %ax
	je	.L20630
	cmpw	$98, %ax
	je	.L20630
.L20629:
	movq	-9040(%rbp), %rsi
	movq	-9024(%rbp), %r15
	movl	%edx, -2048(%rbp)
	xorl	%ecx, %ecx
	movq	%rsi, -2104(%rbp)
	movq	%r15, -2088(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L20633
	cmpw	$99, %dx
	je	.L20633
	cmpw	$98, %dx
	je	.L20633
.L20632:
	movl	-2048(%rbp), %eax
	movl	%ecx, -2072(%rbp)
	movl	$0, -2068(%rbp)
	movl	$0, -2092(%rbp)
	testl	%eax, %eax
	je	.L20634
	movq	%r12, -2056(%rbp)
.L20634:
	movl	-2072(%rbp), %eax
	movq	%r12, -2064(%rbp)
	testl	%eax, %eax
	je	.L20636
	movl	-2096(%rbp), %eax
	testl	%eax, %eax
	jne	.L20635
.L20636:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L20649:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L24075
.L20646:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %r10
	cmpq	%rsi, %r10
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L20646
.L24075:
	testl	%edi, %edi
	je	.L20639
	movslq	%edi,%rbx
	movq	%rbx, %rdx
	salq	$4, %rdx
	addq	optab_table+240(%rip), %rdx
	cmpl	$1317, 8(%rdx)
	je	.L20648
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %r11d
	cmpl	%eax, %r11d
	jb	.L20648
	movzbq	mode_size(%rbx), %rdi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rdi
	addq	%rax, %r15
	movq	%rdx, %r12
.L20648:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L20649
.L20639:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L20635
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L24077
.L20657:
	movslq	%ecx,%rbx
	movzbl	mode_size(%rbx), %r15d
	cmpl	%r14d, %r15d
	cmovae	-9044(%rbp), %ecx
	movl	%ecx, -9044(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L20657
.L24077:
	movl	-2072(%rbp), %eax
	testl	%eax, %eax
	jne	.L20663
	movzwl	(%r8), %edx
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L20661
	cmpw	$54, %dx
	je	.L20661
	cmpw	$55, %dx
	je	.L20661
	cmpw	$58, %dx
	je	.L20661
	cmpw	$134, %dx
	je	.L20661
	cmpw	$56, %dx
	je	.L20661
	cmpw	$140, %dx
	je	.L20661
.L20663:
	movl	-2096(%rbp), %r8d
	testl	%r8d, %r8d
	jne	.L20635
	movq	-9040(%rbp), %r10
	movzwl	(%r10), %edx
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L20665
	cmpw	$54, %dx
	je	.L20665
	cmpw	$55, %dx
	je	.L20665
	cmpw	$58, %dx
	je	.L20665
	cmpw	$134, %dx
	je	.L20665
	cmpw	$56, %dx
	je	.L20665
	cmpw	$140, %dx
	je	.L20665
.L20635:
	cmpl	$1, %r14d
	jbe	.L20668
.L20719:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L24080
.L20675:
	movslq	%ecx,%r11
	movzbl	mode_size(%r11), %edx
	cmpl	%r14d, %edx
	cmovae	-9044(%rbp), %ecx
	movl	%ecx, -9044(%rbp)
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L20675
.L24080:
	movl	-9044(%rbp), %r14d
	testl	%r14d, %r14d
	je	.L20668
	movslq	-9044(%rbp),%r15
	movq	%r15, %r12
	salq	$4, %r12
	addq	optab_table+240(%rip), %r12
	movl	8(%r12), %ebx
	cmpl	$1317, %ebx
	je	.L20677
	movl	-9044(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L20677
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rsi
	leaq	-2112(%rbp), %r12
	leaq	(%rsi,%rsi,4), %rbx
	cmpq	%rdx, -2064(%rbp)
	movq	$0, -9056(%rbp)
	movq	insn_data+16(,%rbx,8), %rdi
	movq	%rdx, -6176(%rbp)
	movq	%rdi, -5128(%rbp)
	jb	.L20677
	movl	-2048(%rbp), %ecx
.L20717:
	testl	%ecx, %ecx
	je	.L20681
	subq	%rdx, 56(%r12)
.L20681:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L20682
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L20683
	movl	-9044(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24966:
	movq	%rax, -9056(%rbp)
.L20682:
	movl	40(%r12), %r8d
	testl	%r8d, %r8d
	je	.L20685
	movq	24(%r12), %rdi
	movl	-9044(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24967:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L26041
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L20691
	movzbl	mode_size(%r15), %r9d
	leal	7(%r9), %edx
	andl	$-8, %edx
.L20692:
	movq	cfun(%rip), %rcx
	andl	$33554432, %esi
	movq	16(%rcx), %r11
	leaq	8(%r11), %rdi
	movl	8(%r11), %ecx
	je	.L20693
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24968:
	leal	(%rax,%rcx), %ebx
	movl	%ebx, (%rdi)
	movq	%r15, %rdi
	salq	$4, %rdi
	addq	optab_table+384(%rip), %rdi
	movl	8(%rdi), %eax
	cmpl	$1317, %eax
	je	.L20695
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rsi
	movq	insn_data+24(,%rsi,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L20696
	movq	%r14, %rdi
	movl	-9044(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L26042
.L20696:
	leaq	(%rbx,%rbx,4), %r8
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r8,8)
.L24969:
	movq	%rax, %rdi
	call	emit_insn
.L20715:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L20716
	movq	-6176(%rbp), %r14
	addq	%r14, 56(%r12)
.L20716:
	movq	48(%r12), %rbx
	movq	-6176(%rbp), %rdx
	subq	-6176(%rbp), %rbx
	cmpq	%rdx, %rbx
	movq	%rbx, 48(%r12)
	jae	.L20717
.L20677:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L20719
.L20668:
	cmpq	$0, -2064(%rbp)
	jmp	.L25548
.L26042:
	movl	-9044(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L20696
.L20695:
	movzbl	mode_size(%r15), %r9d
	cmpl	%edx, %r9d
	je	.L26043
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r11b
	movzbl	%r11b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r10b
	movzbl	%r10b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L20703:
	movl	-9044(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%ecx, %ecx
	testq	%rcx, %rcx
	movq	%rax, %rbx
	je	.L20712
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %edi
	testl	%edi, %edi
	jne	.L26044
.L20712:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L20715
.L26044:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L20712
.L26043:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L20703
.L20693:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24968
.L20691:
	movzbl	mode_size(%r15), %r10d
	leal	1(%r10), %edx
	andl	$-2, %edx
	jmp	.L20692
.L26041:
	movq	%rax, %rsi
	movq	-9056(%rbp), %rdi
	xorl	%eax, %eax
	call	*-5128(%rbp)
	jmp	.L24969
.L20685:
	movq	24(%r12), %rdi
	movl	-9044(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24967
.L20683:
	movl	-9044(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24966
.L20665:
	movq	-9040(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -2104(%rbp)
	jmp	.L20635
.L20661:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -2080(%rbp)
	jmp	.L20663
.L20633:
	movl	$1, %ecx
	jmp	.L20632
.L20630:
	movl	$1, %edx
	jmp	.L20629
.L20628:
	movl	$1, %ecx
	jmp	.L20627
.L20622:
	cmpq	$2, %r14
	ja	.L20606
	jmp	.L20623
.L20598:
	movq	-9032(%rbp), %r8
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-9032(%rbp), %r11
	movq	%rax, %r12
	movq	16(%r11), %rdi
	call	protect_from_queue
	movq	-9032(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26045
.L20600:
	movq	-9032(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -9032(%rbp)
	movq	%r12, 8(%rax)
	movq	-9032(%rbp), %rcx
	movq	%rbx, 16(%rcx)
	jmp	.L20593
.L26045:
	cmpq	16(%rcx), %rax
	jne	.L20600
	jmp	.L20593
.L26035:
	cmpb	$51, 2(%rdx)
	je	.L20591
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26046
.L20591:
	cmpl	$66, %eax
	jne	.L20594
	movq	-9032(%rbp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	movq	-9032(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L20593
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -9032(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L20593
.L26046:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L20592
	movq	-9032(%rbp), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -9032(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L20593
.L20592:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24965:
	movq	%rax, -9032(%rbp)
	jmp	.L20593
.L20590:
	movq	-9032(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26047
	movq	-9032(%rbp), %r12
	movq	24(%r12), %rax
	testq	%rax, %rax
	jne	.L24965
	movq	-9032(%rbp), %rsi
	movq	8(%rsi), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	-9032(%rbp), %r14
	movq	%rax, %rdi
	movq	8(%r14), %rsi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rdi
	movq	%rdi, -9032(%rbp)
	jmp	.L20593
.L26047:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24965
.L20585:
	movq	-9216(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-9216(%rbp), %r8
	movq	%rax, %r12
	movq	16(%r8), %rdi
	call	protect_from_queue
	movq	-9216(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26048
.L20587:
	movq	-9216(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -9024(%rbp)
	movq	%r12, 8(%rax)
	movq	-9024(%rbp), %r12
	movq	%rbx, 16(%r12)
	jmp	.L20580
.L26048:
	cmpq	16(%rcx), %rax
	jne	.L20587
	jmp	.L20580
.L26034:
	cmpb	$51, 2(%rdx)
	je	.L20578
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26049
.L20578:
	cmpl	$66, %eax
	jne	.L20581
	movq	-9216(%rbp), %r11
	xorl	%esi, %esi
	movq	8(%r11), %rdi
	call	protect_from_queue
	movq	-9216(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L20580
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -9024(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L20580
.L26049:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L20579
	movq	-9216(%rbp), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -9024(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L20580
.L20579:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24964:
	movq	%rax, -9024(%rbp)
	jmp	.L20580
.L20577:
	movq	-9216(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26050
	movq	-9216(%rbp), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	movq	%rbx, -9024(%rbp)
	jne	.L20580
	movq	-9216(%rbp), %rax
	movq	8(%rax), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	-9216(%rbp), %r14
	movq	%rax, %rdi
	movq	8(%r14), %rsi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rdi
	movq	%rdi, -9024(%rbp)
	jmp	.L20580
.L26050:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24964
.L20572:
	movq	-9224(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-9224(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L26051
.L20574:
	movq	-9224(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -9016(%rbp)
	movq	%r12, 8(%rax)
	movq	-9016(%rbp), %rsi
	movq	%rbx, 16(%rsi)
	jmp	.L20567
.L26051:
	cmpq	16(%rsi), %rax
	jne	.L20574
	jmp	.L20567
.L26033:
	jne	.L20568
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-9224(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L20567
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -9016(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L20567
.L20564:
	testq	%rsi, %rsi
	je	.L26052
	movq	-9224(%rbp), %rax
	movq	24(%rax), %rdi
	testq	%rdi, %rdi
	movq	%rdi, -9016(%rbp)
	jne	.L20567
	movq	-9224(%rbp), %r14
	movq	8(%r14), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r9
	movq	%r9, -9016(%rbp)
	jmp	.L20567
.L26052:
	movq	-9224(%rbp), %r12
	movq	8(%r12), %rdi
	call	copy_to_reg
	movq	%rax, -9016(%rbp)
	jmp	.L20567
.L20557:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L20553
	movl	32(%rsi), %r15d
	jmp	.L20553
.L20556:
	cmpl	$7, %edx
	ja	.L20552
	jmp	.L20557
.L20541:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L26053
.L20543:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -9224(%rbp)
	movq	%r12, 8(%rax)
	movq	-9224(%rbp), %r15
	movq	%rbx, 16(%r15)
	jmp	.L20536
.L26053:
	cmpq	16(%r13), %rax
	jne	.L20543
	jmp	.L20536
.L25966:
	jne	.L20537
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L20536
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -9224(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L20536
.L20533:
	cmpq	$0, 16(%r13)
	je	.L26054
	movq	24(%r13), %rbx
	testq	%rbx, %rbx
	movq	%rbx, -9224(%rbp)
	jne	.L20536
	movq	8(%r13), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rax
.L24963:
	movq	%rax, -9224(%rbp)
	jmp	.L20536
.L26054:
	movq	8(%r13), %rdi
	call	copy_to_reg
	jmp	.L24963
.L25965:
	movq	144(%rbx), %rax
	testq	%rax, %rax
	je	.L20528
	cmpq	%rax, %r13
	jne	.L20528
	jmp	.L20526
	.p2align 6,,7
.L25964:
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L20526
	jmp	.L20527
.L20525:
	movq	-9216(%rbp), %rdx
	cmpb	$0, 2(%rdx)
	jne	.L20524
	movq	-9576(%rbp), %rdx
	cmpb	$0, 16(%rdx)
	je	.L20524
	movq	8(%rdx), %rdx
	movzbl	2(%r13), %edi
	movzbl	61(%rdx), %r11d
	shrb	$1, %r11b
	movzbl	%r11b, %esi
	cmpl	%esi, %edi
	je	.L20524
	movzbl	17(%rdx), %ecx
	movq	-9216(%rbp), %rdx
	shrb	$5, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, -9216(%rbp)
	jmp	.L20524
.L24417:
	movq	-9216(%rbp), %rcx
	movzwl	(%rcx), %edx
	jmp	.L20447
.L24422:
	movq	-9216(%rbp), %r9
	movzwl	(%r9), %edx
	jmp	.L20447
.L25963:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	-9576(%rbp), %rdi
	movzbl	2(%r13), %edx
	movq	%rax, %rsi
	jmp	.L24962
.L20486:
	xorl	%r8d, %r8d
	testl	%r8d, %r8d
	je	.L24418
	movl	(%r13), %ecx
	movl	%ecx, %ebx
	andl	$134283263, %ebx
	cmpl	$66, %ebx
	je	.L26055
.L20502:
	andl	$268500991, %ecx
	cmpl	$268435519, %ecx
	je	.L26056
	movzbl	2(%r13), %edx
	movq	-9576(%rbp), %rdi
	xorl	%ecx, %ecx
	movq	%r13, %rsi
	call	expand_expr
	cmpw	$61, (%r13)
	movq	%rax, -9216(%rbp)
	je	.L26057
.L20522:
	movl	(%r13), %eax
	andl	$134283263, %eax
	cmpl	$134217794, %eax
	je	.L24421
	movq	-9216(%rbp), %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L24422
	movq	-9216(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L20523
	cmpw	$54, %dx
	je	.L20523
	cmpw	$55, %dx
	je	.L20523
	cmpw	$58, %dx
	je	.L20523
	cmpw	$134, %dx
	je	.L20523
	cmpw	$56, %dx
	je	.L20523
	cmpw	$140, %dx
	je	.L20523
	xorl	%esi, %esi
	testl	%esi, %esi
	je	.L20447
.L20523:
	movl	$1, -9004(%rbp)
	jmp	.L20447
	.p2align 6,,7
.L24421:
	movq	-9216(%rbp), %r12
	movzwl	(%r12), %edx
	jmp	.L20447
.L26057:
	cmpl	$52, 8(%r13)
	jbe	.L24420
	jmp	.L20522
.L26056:
	xorl	%r14d, %r14d
	xorl	%edx, %edx
	testl	%r14d, %r14d
	jne	.L20508
	movq	-9576(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	16(%rsi), %eax
	cmpb	$6, %al
	je	.L20509
	cmpb	$10, %al
	je	.L20509
	cmpb	$11, %al
	je	.L20509
	cmpb	$12, %al
	je	.L20509
.L20508:
	movq	%rdx, %rsi
	xorl	%ecx, %ecx
	movq	%r12, %rdi
	xorl	%edx, %edx
	call	expand_expr
	movzwl	(%rax), %edx
	movq	%rax, %rbx
	cmpw	$66, %dx
	je	.L26058
.L20511:
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L20514
	cmpw	$54, %dx
	je	.L20514
	cmpw	$55, %dx
	je	.L20514
	cmpw	$58, %dx
	je	.L20514
	cmpw	$134, %dx
	je	.L20514
	cmpw	$56, %dx
	je	.L20514
	cmpw	$140, %dx
	je	.L20514
.L20513:
	movzbl	3(%r13), %edx
	movq	8(%r13), %rdi
	movq	%rbx, %rsi
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	xorl	%r11d, %r11d
	testl	%r11d, %r11d
	je	.L20446
	movzbl	2(%rbx), %edx
	movzbl	2(%r13), %eax
	cmpb	%al, %dl
	je	.L20446
	testb	%dl, %dl
	je	.L20516
	movq	%rbx, %rsi
	movzbl	%al, %edi
	call	gen_lowpart_SUBREG
	movzbl	3(%rax), %r8d
	orb	$16, %r8b
	movb	%r8b, 3(%rax)
	andb	$-5, %r8b
	movzbl	3(%r13), %ebx
	andb	$4, %bl
	orb	%bl, %r8b
	movb	%r8b, 3(%rax)
	jmp	.L20446
.L20516:
	movq	8(%r13), %r14
	movzbl	3(%r13), %ecx
	movzbl	%al, %edi
	movq	%rbx, %rdx
	movzbl	2(%r14), %esi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	jmp	.L20446
	.p2align 6,,7
.L20514:
	cmpb	$0, 2(%rbx)
	jne	.L20513
	movq	8(%r12), %r10
	movzbl	3(%r13), %ecx
	movq	%rbx, %rdx
	movzbl	2(%r13), %edi
	movzbl	61(%r10), %r9d
	shrb	$2, %cl
	andl	$1, %ecx
	shrb	$1, %r9b
	movzbl	%r9b, %esi
	call	convert_modes
	movzbl	3(%r13), %ecx
	movzbl	2(%r13), %esi
	movq	8(%r13), %r12
	movq	%rax, %rdx
	movzbl	2(%r12), %edi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, %rbx
	jmp	.L20513
.L26058:
	xorl	%ecx, %ecx
	testl	%ecx, %ecx
	je	.L20511
	testb	$8, 3(%rax)
	jne	.L20512
	movq	8(%r13), %rdi
	movq	8(%rax), %rsi
	call	reg_mentioned_p
	testl	%eax, %eax
	je	.L24419
.L20512:
	movq	%rbx, %rdi
	call	copy_to_reg
	movq	%rax, %rbx
.L24419:
	movzwl	(%rbx), %edx
	jmp	.L20511
	.p2align 6,,7
.L20509:
	cmpq	$0, 8(%rsi)
	jne	.L20508
	movzbl	3(%r13), %ecx
	movzbl	17(%rsi), %r15d
	movl	$1, %edi
	movl	%ecx, %edx
	shrb	$5, %r15b
	shrb	$2, %dl
	andl	$1, %r15d
	andl	%edx, %edi
	cmpl	%edi, %r15d
	je	.L20510
	call	signed_or_unsigned_type
	movq	-9576(%rbp), %rsi
	movq	%rax, %rdi
	call	convert
	movzbl	3(%r13), %ecx
	movq	%rax, %r12
.L20510:
	movq	8(%r13), %rsi
	shrb	$2, %cl
	movzbl	2(%rsi), %edi
	movl	$1, %esi
	andl	%ecx, %esi
	call	type_for_mode
	movq	%r12, %rsi
	movq	%rax, %rdi
	call	convert
	movq	8(%r13), %rdx
	movq	%rax, %r12
	jmp	.L20508
	.p2align 6,,7
.L26055:
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L20502
	movq	-9576(%rbp), %rdi
	movq	%r13, %rsi
	xorl	%ecx, %ecx
	movzbl	%al, %edx
	call	expand_expr
	movq	%rax, -9216(%rbp)
	movq	%rax, %rsi
	movzbl	2(%rax), %eax
	cmpb	$51, %al
	je	.L20503
	testb	%al, %al
	je	.L20503
	cmpq	%r13, %rsi
	je	.L20505
	movq	%rsi, %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L26059
.L20504:
	movq	-9216(%rbp), %rdi
	call	copy_to_reg
	movq	%rax, -9216(%rbp)
.L20503:
	movl	$1, -9004(%rbp)
	jmp	.L24417
.L26059:
	movq	-9216(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L20504
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L20504
.L20505:
	movl	$1, %r14d
	jmp	.L20504
	.p2align 6,,7
.L24418:
	movl	(%r13), %ecx
	jmp	.L20502
.L20495:
	movl	$1, %ebx
	jmp	.L20489
.L20496:
	xorl	%ebx, %ebx
	jmp	.L20489
.L20493:
	movq	8(%r13), %rdi
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L20495
	movq	16(%r13), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L20489
	jmp	.L20495
	.p2align 6,,7
.L25962:
	cmpb	$51, 2(%r13)
	jne	.L20448
	call	gen_label_rtx
	movq	%rax, %r14
	call	gen_label_rtx
	movq	cfun(%rip), %rdi
	movq	%rax, %r15
	movq	16(%rdi), %r8
	movq	40(%r8), %rbx
	testq	%rbx, %rbx
	je	.L24065
.L20454:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26060
	call	emit_insn
	movq	%rax, 16(%rbx)
.L20453:
	movq	cfun(%rip), %r10
	movq	40(%rbx), %rsi
	movq	16(%r10), %r9
	testq	%rsi, %rsi
	movq	%rsi, %rbx
	movq	%rsi, 40(%r9)
	jne	.L20454
.L24065:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L20456
	cmpl	$66, %eax
	je	.L26061
.L20460:
	cmpl	$75, %eax
	je	.L20464
	cmpl	$78, %eax
	je	.L20464
.L20459:
	call	do_pending_stack_adjust
	movq	cfun(%rip), %rdx
	movq	-9576(%rbp), %r12
	movq	%r14, %rsi
	movq	16(%rdx), %rcx
	incl	4(%rcx)
	movq	32(%r12), %rdi
	call	jumpifnot
	call	start_cleanup_deferral
	movq	40(%r12), %rdi
	movq	-9224(%rbp), %rsi
	xorl	%edx, %edx
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %rdi
	movq	16(%rdi), %r8
	movq	40(%r8), %rbx
	testq	%rbx, %rbx
	je	.L24067
.L20474:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26062
	call	emit_insn
	movq	%rax, 16(%rbx)
.L20473:
	movq	cfun(%rip), %r8
	movq	40(%rbx), %r10
	movq	16(%r8), %r11
	testq	%r10, %r10
	movq	%r10, %rbx
	movq	%r10, 40(%r11)
	jne	.L20474
.L24067:
	movq	%r15, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r14, %rdi
	call	emit_label
	call	start_cleanup_deferral
	movq	-9576(%rbp), %rax
	movq	-9224(%rbp), %rsi
	xorl	%edx, %edx
	movq	48(%rax), %rdi
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %rbx
	movq	16(%rbx), %r14
	movq	40(%r14), %rbx
	testq	%rbx, %rbx
	je	.L24069
.L20481:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26063
	call	emit_insn
	movq	%rax, 16(%rbx)
.L20480:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %rdi
	movq	16(%rdx), %rsi
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%rsi)
	jne	.L20481
.L24069:
	movq	%r15, %rdi
	call	emit_label
	movq	cfun(%rip), %r9
	movq	16(%r9), %r15
	decl	4(%r15)
	jmp	.L20446
	.p2align 6,,7
.L26063:
	movq	8(%rdi), %rcx
	movq	8(%rcx), %r12
	movq	%r12, 16(%rbx)
	call	emit_insn
	jmp	.L20480
.L26062:
	movq	8(%rdi), %r9
	movq	8(%r9), %rsi
	movq	%rsi, 16(%rbx)
	call	emit_insn
	jmp	.L20473
.L20464:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L26064
.L20466:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -9224(%rbp)
	movq	%r12, 8(%rax)
	movq	-9224(%rbp), %rax
	movq	%rbx, 16(%rax)
	jmp	.L20459
.L26064:
	cmpq	16(%r13), %rax
	jne	.L20466
	jmp	.L20459
.L26061:
	jne	.L20460
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L20459
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -9224(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L20459
.L20456:
	cmpq	$0, 16(%r13)
	je	.L26065
	movq	24(%r13), %r11
	testq	%r11, %r11
	movq	%r11, -9224(%rbp)
	jne	.L20459
	movq	8(%r13), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r12
	movq	%r12, -9224(%rbp)
	jmp	.L20459
.L26065:
	movq	8(%r13), %rdi
	call	copy_to_reg
	movq	%rax, -9224(%rbp)
	jmp	.L20459
	.p2align 6,,7
.L26060:
	movq	8(%rdi), %rdx
	movq	8(%rdx), %rcx
	movq	%rcx, 16(%rbx)
	call	emit_insn
	jmp	.L20453
.L25961:
	movq	32(%rsi), %rdi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movq	const_int_rtx+512(%rip), %rsi
	call	expand_expr
	movq	cfun(%rip), %rsi
	movq	16(%rsi), %rdx
	movq	40(%rdx), %rbx
	testq	%rbx, %rbx
	je	.L24063
.L20444:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26066
	call	emit_insn
	movq	%rax, 16(%rbx)
.L20443:
	movq	cfun(%rip), %r12
	movq	40(%rbx), %r10
	movq	16(%r12), %r11
	testq	%r10, %r10
	movq	%r10, %rbx
	movq	%r10, 40(%r11)
	jne	.L20444
.L24063:
	movq	-9576(%rbp), %rbx
	movq	%r13, %rsi
	xorl	%edx, %edx
	movq	40(%rbx), %rdi
	call	store_expr
	jmp	.L20446
.L26066:
	movq	8(%rdi), %r9
	movq	8(%r9), %r15
	movq	%r15, 16(%rbx)
	call	emit_insn
	jmp	.L20443
.L20426:
	movq	-2712(%rbp), %rdi
	xorl	%edx, %edx
	movl	$2, %esi
	movl	$1, %ecx
	call	assign_temp
	movq	%rax, %rdi
	movq	%rax, %r13
	call	preserve_temp_slots
	testb	$4, 17(%r12)
	movq	%r13, 144(%r12)
	jne	.L26067
.L20430:
	movq	-9552(%rbp), %rbx
	movq	48(%rbx), %rsi
	testq	%rsi, %rsi
	je	.L26068
.L20431:
	movq	-9552(%rbp), %r9
	movq	%rsi, -9000(%rbp)
	movq	40(%r9), %rbx
	movq	%rbx, -9576(%rbp)
	jmp	.L20432
.L26068:
	movq	%r12, %rdi
	call	maybe_build_cleanup
	movq	%rax, 48(%rbx)
	movq	%rax, %rsi
	jmp	.L20431
.L26067:
	movq	%r12, %rdi
	call	put_var_into_stack
	jmp	.L20430
.L20425:
	movq	144(%r12), %rax
	testq	%rax, %rax
	je	.L20433
	movq	-9552(%rbp), %r11
	movq	%rax, %r13
	movq	40(%r11), %r10
	movq	%r10, -9576(%rbp)
	testq	%r10, %r10
	jmp	.L25056
.L20433:
	testb	$4, 17(%r12)
	movq	%r13, 144(%r12)
	jne	.L26069
	movq	-9552(%rbp), %rdi
	movq	40(%rdi), %r8
	movq	%r8, -9576(%rbp)
	jmp	.L20432
.L26069:
	movq	%r12, %rdi
	call	put_var_into_stack
	movq	-9552(%rbp), %r14
	movq	40(%r14), %r12
	movq	%r12, -9576(%rbp)
	jmp	.L20432
.L25959:
	movl	$.LC0, %edi
	movl	$8399, %esi
	jmp	.L25123
	.p2align 6,,7
.L11667:
	movq	-9552(%rbp), %rax
	movq	40(%rax), %rdx
	cmpb	$115, 16(%rdx)
	je	.L26070
.L11668:
	movq	-9552(%rbp), %r12
	movq	$0, -6928(%rbp)
	movq	$0, -6920(%rbp)
	movq	$0, -6912(%rbp)
	movq	40(%r12), %rdi
	call	integer_onep
	testl	%eax, %eax
	jne	.L26071
.L11674:
	movq	-9552(%rbp), %rcx
	movq	40(%rcx), %rdx
	movzbq	16(%rdx), %rdi
	cmpb	$50, tree_code_type(%rdi)
	je	.L26072
.L11678:
	movq	-9552(%rbp), %rcx
	movq	48(%rcx), %rdx
	movzbq	16(%rdx), %rsi
	cmpb	$50, tree_code_type(%rsi)
	je	.L26073
.L11680:
	movq	-9552(%rbp), %rcx
	movq	40(%rcx), %rdx
	movzbq	16(%rdx), %r12
	cmpb	$49, tree_code_type(%r12)
	je	.L26074
.L11682:
	movq	-9552(%rbp), %rcx
	movq	48(%rcx), %rdx
	movzbq	16(%rdx), %r14
	cmpb	$49, tree_code_type(%r14)
	je	.L26075
.L11679:
	movl	-6220(%rbp), %eax
	xorl	%r13d, %r13d
	testl	%eax, %eax
	jne	.L11686
	testq	%rbx, %rbx
	je	.L24313
	movq	-9552(%rbp), %r10
	xorl	%r15d, %r15d
	movq	%rbx, %r14
	movq	32(%r10), %r12
	movq	8(%r12), %rax
	testq	%rax, %rax
	je	.L11691
	movq	32(%rax), %rdx
	testq	%rdx, %rdx
	je	.L11691
	cmpb	$25, 16(%rdx)
	je	.L11691
	cmpb	$18, 16(%rax)
	je	.L26076
.L11692:
	cmpb	$51, 2(%rbx)
	je	.L11768
.L11691:
	movzwl	(%rbx), %eax
	cmpw	$66, %ax
	movl	%eax, %ecx
	je	.L26077
.L11689:
	cmpw	$63, %cx
	je	.L26078
.L11694:
	movl	$1, %eax
	testl	%eax, %eax
	jne	.L26079
	movzbl	16(%r12), %edx
	movzbl	%dl, %r11d 
	movsbl	tree_code_type(%r11),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L11702
	mov	%eax, %r9d
	jmp	*.L11762(,%r9,8)
	.section	.rodata
	.align 8
	.align 4
.L11762:
	.quad	.L11745
	.quad	.L11718
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11718
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11768
	.quad	.L11703
	.quad	.L11721
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11721
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11702
	.quad	.L11708
	.text
.L11703:
	movq	144(%r12), %rax
	testq	%rax, %rax
	movq	%rax, %r15
	jne	.L24261
	xorl	%r15d, %r15d
.L11702:
	testq	%r15, %r15
	movl	$1, %r13d
	je	.L11693
.L24261:
	cmpw	$63, (%r15)
	je	.L26080
.L11765:
	movq	%r14, %rdi
	movq	%r15, %rsi
	xorl	%r13d, %r13d
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L11693
	cmpw	$66, (%r14)
	je	.L26081
.L11768:
	movl	$1, %r13d
.L11693:
	testl	%r13d, %r13d
	jne	.L11688
	cmpq	$0, -6928(%rbp)
	je	.L24314
	cmpw	$61, (%rbx)
	je	.L26082
	movq	-2712(%rbp), %r12
	movzbl	17(%r12), %edx
.L11687:
	andb	$4, %dl
	jne	.L26083
	movq	-2712(%rbp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	call	assign_temp
	movq	%rax, %r13
.L11686:
	testq	%r13, %r13
	je	.L11786
	cmpq	$0, -6928(%rbp)
	je	.L11786
	cmpq	$0, -6920(%rbp)
	je	.L11786
	movq	-6920(%rbp), %r15
	movzbl	16(%r15), %edx
	leal	-59(%rdx), %ecx
	cmpb	$1, %cl
	jbe	.L11787
	cmpb	$86, %dl
	je	.L11787
	cmpb	$87, %dl
	je	.L11787
.L11786:
	call	do_pending_stack_adjust
	movq	cfun(%rip), %rbx
	movq	16(%rbx), %rcx
	incl	4(%rcx)
	call	gen_label_rtx
	cmpq	$0, -6928(%rbp)
	movq	%rax, -6968(%rbp)
	je	.L11965
	movq	-9552(%rbp), %r12
	movq	32(%r12), %r11
	testb	$1, 17(%r11)
	jne	.L11965
	testq	%r13, %r13
	je	.L11966
	cmpq	$0, -6920(%rbp)
	je	.L11969
	movq	-6920(%rbp), %r15
	movq	%r13, %r14
	movq	40(%r15), %rbx
	xorl	%r15d, %r15d
	movq	8(%rbx), %rax
	testq	%rax, %rax
	je	.L11972
	movq	32(%rax), %rdx
	testq	%rdx, %rdx
	je	.L11972
	cmpb	$25, 16(%rdx)
	je	.L11972
	cmpb	$18, 16(%rax)
	je	.L26084
.L11973:
	cmpb	$51, 2(%r13)
	je	.L12049
.L11972:
	movzwl	(%r13), %eax
	cmpw	$66, %ax
	movl	%eax, %ecx
	je	.L26085
.L11970:
	cmpw	$63, %cx
	je	.L26086
.L11975:
	movl	$1, %eax
	testl	%eax, %eax
	jne	.L26087
	movzbl	16(%rbx), %edx
	movzbl	%dl, %r8d 
	movsbl	tree_code_type(%r8),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L11983
	mov	%eax, %edi
	jmp	*.L12043(,%rdi,8)
	.section	.rodata
	.align 8
	.align 4
.L12043:
	.quad	.L12026
	.quad	.L11999
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11999
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L12049
	.quad	.L11984
	.quad	.L12002
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L12002
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11983
	.quad	.L11989
	.text
.L11984:
	movq	144(%rbx), %rdx
	testq	%rdx, %rdx
	movq	%rdx, %r15
	jne	.L24264
	xorl	%r15d, %r15d
.L11983:
	testq	%r15, %r15
	movl	$1, %r12d
	je	.L11974
.L24264:
	cmpw	$63, (%r15)
	je	.L26088
.L12046:
	movq	%r14, %rdi
	movq	%r15, %rsi
	xorl	%r12d, %r12d
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L11974
	cmpw	$66, (%r14)
	je	.L26089
.L12049:
	movl	$1, %r12d
.L11974:
	testl	%r12d, %r12d
	je	.L11968
.L11969:
	cmpw	$61, (%r13)
	je	.L26090
.L11967:
	movq	-6928(%rbp), %r12
	movq	%r13, -7192(%rbp)
	movl	$0, -6972(%rbp)
	xorl	%r14d, %r14d
	movzbl	16(%r12), %eax
	cmpb	$47, %al
	je	.L26091
	cmpb	$51, %al
	je	.L26092
.L12060:
	movzwl	(%r13), %eax
	subl	$66, %eax
	cmpl	$12, %eax
	ja	.L12108
	mov	%eax, %edi
	jmp	*.L12109(,%rdi,8)
	.section	.rodata
	.align 8
	.align 4
.L12109:
	.quad	.L12102
	.quad	.L12108
	.quad	.L12108
	.quad	.L12108
	.quad	.L12108
	.quad	.L12107
	.quad	.L12108
	.quad	.L12108
	.quad	.L12108
	.quad	.L12105
	.quad	.L12105
	.quad	.L12108
	.quad	.L12105
	.text
.L12102:
	movq	8(%r13), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L12101:
	testl	%ebx, %ebx
	je	.L12098
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L12110
	testb	%al, %al
	jne	.L26093
.L12110:
	movzbl	2(%r13), %edx
	movq	-6928(%rbp), %rdi
	xorl	%esi, %esi
.L24665:
	xorl	%ecx, %ecx
	call	expand_expr
	testb	$8, 3(%r13)
	movq	%rax, -7184(%rbp)
	jne	.L24322
	xorl	%esi, %esi
	testl	%esi, %esi
	je	.L24317
	movl	$1, -6972(%rbp)
.L24320:
	movq	-7184(%rbp), %r15
	movzwl	(%r15), %edx
.L12059:
	leal	-67(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L12137
	cmpw	$54, %dx
	je	.L12137
	cmpw	$55, %dx
	je	.L12137
	cmpw	$58, %dx
	je	.L12137
	cmpw	$134, %dx
	je	.L12137
	cmpw	$56, %dx
	je	.L12137
	cmpw	$140, %dx
	je	.L12137
.L12136:
	movq	-7184(%rbp), %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	je	.L12139
	cmpq	%r13, -7184(%rbp)
	je	.L12138
	movq	-7184(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L26094
.L12139:
	movq	-6928(%rbp), %rbx
	movzbl	16(%rbx), %eax
	testb	%al, %al
	je	.L12138
	testl	%r14d, %r14d
	jne	.L12138
	movzbl	%al, %edi 
	cmpb	$100, tree_code_type(%rdi)
	je	.L26095
.L12140:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L12145
	cmpl	$66, %eax
	je	.L26096
.L12149:
	cmpl	$75, %eax
	je	.L12153
	cmpl	$78, %eax
	je	.L12153
.L12148:
	movq	-7184(%rbp), %r9
	movq	-7192(%rbp), %rbx
	movzbl	2(%r9), %eax
	movzbl	2(%rbx), %ecx
	cmpb	%cl, %al
	je	.L12158
	testb	%al, %al
	je	.L12158
	movq	-6928(%rbp), %r8
	movl	-6972(%rbp), %eax
	movq	8(%r8), %r12
	movzbl	17(%r12), %r15d
	shrb	$5, %r15b
	movl	%r15d, %edx
	andl	$1, %edx
	testl	%eax, %eax
	je	.L12159
	movq	-7184(%rbp), %rsi
	movzbl	%cl, %edi
	call	convert_to_mode
	movq	%rbx, %rdi
	movq	%rax, %rsi
	movq	%rax, -7184(%rbp)
.L24697:
	call	emit_move_insn
.L12138:
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L12956
	movl	-6972(%rbp), %ecx
	testl	%ecx, %ecx
	je	.L12951
	movq	-7184(%rbp), %r15
	cmpw	$66, (%r15)
	je	.L12951
.L12956:
	movq	-9552(%rbp), %rdx
	movq	-6928(%rbp), %rsi
	cmpq	40(%rdx), %rsi
	je	.L26097
	movq	-9552(%rbp), %r11
	movq	-6968(%rbp), %rsi
	movq	32(%r11), %rdi
	call	jumpifnot
.L12964:
	call	start_cleanup_deferral
	cmpq	$0, -6920(%rbp)
	je	.L12973
	testq	%r13, %r13
	jne	.L12965
	movq	-6920(%rbp), %rax
	movl	-6220(%rbp), %r12d
	xorl	%esi, %esi
	addq	$40, %rax
	testl	%r12d, %r12d
	je	.L12971
	movq	const_int_rtx+512(%rip), %rsi
.L12971:
	movq	(%rax), %rdi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
.L17681:
	movq	-6968(%rbp), %rsi
	movq	%rsi, -8992(%rbp)
.L14787:
	call	end_cleanup_deferral
	movq	cfun(%rip), %r10
	movq	16(%r10), %r9
	movq	40(%r9), %rbx
	testq	%rbx, %rbx
	je	.L24061
.L20420:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26098
	call	emit_insn
	movq	%rax, 16(%rbx)
.L20419:
	movq	cfun(%rip), %rcx
	movq	40(%rbx), %r14
	movq	16(%rcx), %r8
	testq	%r14, %r14
	movq	%r14, %rbx
	movq	%r14, 40(%r8)
	jne	.L20420
.L24061:
	movq	-8992(%rbp), %rdi
.L25061:
	call	emit_label
	movq	cfun(%rip), %rdx
	movq	16(%rdx), %rdi
	decl	4(%rdi)
	jmp	.L7871
.L26098:
	movq	8(%rdi), %r12
	movq	8(%r12), %r11
	movq	%r11, 16(%rbx)
	call	emit_insn
	jmp	.L20419
.L12965:
	movq	-2712(%rbp), %rdi
	movq	%r13, %rsi
	xorl	%r12d, %r12d
	call	make_tree
	movq	-6920(%rbp), %r14
	movq	-2712(%rbp), %rsi
	movq	-6920(%rbp), %rdx
	movq	40(%r14), %rcx
	movzbl	16(%rdx), %edi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	build
	movl	$0, -7196(%rbp)
	movq	%r13, -7416(%rbp)
	movq	%rax, %r14
	movzbl	16(%rax), %eax
	cmpb	$47, %al
	je	.L26099
	cmpb	$51, %al
	je	.L26100
.L12984:
	movzwl	(%r13), %eax
	subl	$66, %eax
	cmpl	$12, %eax
	ja	.L13032
	mov	%eax, %ebx
	jmp	*.L13033(,%rbx,8)
	.section	.rodata
	.align 8
	.align 4
.L13033:
	.quad	.L13026
	.quad	.L13032
	.quad	.L13032
	.quad	.L13032
	.quad	.L13032
	.quad	.L13031
	.quad	.L13032
	.quad	.L13032
	.quad	.L13032
	.quad	.L13029
	.quad	.L13029
	.quad	.L13032
	.quad	.L13029
	.text
.L13026:
	movq	8(%r13), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L13025:
	testl	%ebx, %ebx
	je	.L13022
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L13034
	testb	%al, %al
	jne	.L26101
.L13034:
	movzbl	2(%r13), %edx
	movq	%r14, %rdi
	xorl	%esi, %esi
.L24698:
	xorl	%ecx, %ecx
	call	expand_expr
	testb	$8, 3(%r13)
	movq	%rax, -7408(%rbp)
	jne	.L24333
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L24328
	movl	$1, -7196(%rbp)
.L24333:
	movq	-7408(%rbp), %rbx
	movzwl	(%rbx), %edx
.L12983:
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L13061
	cmpw	$54, %dx
	je	.L13061
	cmpw	$55, %dx
	je	.L13061
	cmpw	$58, %dx
	je	.L13061
	cmpw	$134, %dx
	je	.L13061
	cmpw	$56, %dx
	je	.L13061
	cmpw	$140, %dx
	je	.L13061
.L13060:
	movq	-7408(%rbp), %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	je	.L13063
	cmpq	%r13, -7408(%rbp)
	je	.L13062
	movq	-7408(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L26102
.L13063:
	movzbl	16(%r14), %eax
	testb	%al, %al
	je	.L13062
	testl	%r12d, %r12d
	jne	.L13062
	movzbl	%al, %r12d 
	cmpb	$100, tree_code_type(%r12)
	je	.L26103
.L13064:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L13069
	cmpl	$66, %eax
	je	.L26104
.L13073:
	cmpl	$75, %eax
	je	.L13077
	cmpl	$78, %eax
	je	.L13077
.L13072:
	movq	-7408(%rbp), %rbx
	movq	-7416(%rbp), %r11
	movzbl	2(%rbx), %eax
	movzbl	2(%r11), %ecx
	cmpb	%cl, %al
	je	.L13082
	testb	%al, %al
	je	.L13082
	movq	8(%r14), %r8
	movl	-7196(%rbp), %eax
	movzbl	17(%r8), %r14d
	shrb	$5, %r14b
	movl	%r14d, %edx
	andl	$1, %edx
	testl	%eax, %eax
	je	.L13083
	movzbl	%cl, %edi
	movq	%rbx, %rsi
	call	convert_to_mode
	movq	-7416(%rbp), %rdi
	movq	%rax, %rsi
	movq	%rax, -7408(%rbp)
.L24729:
	call	emit_move_insn
.L13062:
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L17681
	movl	-7196(%rbp), %esi
	testl	%esi, %esi
	je	.L13875
	movq	-7408(%rbp), %r15
	cmpw	$66, (%r15)
	jne	.L17681
.L13875:
	movq	-7416(%rbp), %rax
	cmpb	$51, 2(%rax)
	je	.L17681
	cmpw	$61, (%rax)
	je	.L26105
.L13878:
	movq	-7416(%rbp), %rdi
.L25110:
	call	copy_to_reg
	jmp	.L17681
.L26105:
	cmpl	$52, 8(%rax)
	jbe	.L17681
	jmp	.L13878
.L13083:
	movq	-7416(%rbp), %rdi
	movq	-7408(%rbp), %rsi
	call	convert_move
	jmp	.L13062
.L13082:
	cmpb	$51, %al
	je	.L26106
.L13086:
	movq	-7416(%rbp), %rsi
	cmpw	$39, (%rsi)
	je	.L26107
	cmpb	$51, %al
	je	.L26108
	movq	-7416(%rbp), %rdi
	movq	-7408(%rbp), %rsi
	jmp	.L24729
.L26108:
	movq	-7416(%rbp), %rdi
	movq	-7408(%rbp), %rcx
	movq	%rdi, -7368(%rbp)
	movq	%rcx, -7376(%rbp)
	movq	%r14, %rdi
	call	expr_size
	movl	$8, %edx
	movq	-7416(%rbp), %rsi
	movq	%rax, %r14
	movq	16(%rsi), %rcx
	testq	%rcx, %rcx
	je	.L13677
	movl	32(%rcx), %edx
.L13677:
	movq	-7408(%rbp), %r9
	movq	16(%r9), %rax
	testq	%rax, %rax
	je	.L13678
	cmpl	32(%rax), %edx
	jb	.L13679
.L13674:
	testq	%rax, %rax
	movl	$8, -7356(%rbp)
	je	.L13675
	movl	32(%rax), %eax
.L24720:
	movl	%eax, -7356(%rbp)
.L13675:
	movq	-7416(%rbp), %rbx
	cmpb	$51, 2(%rbx)
	jne	.L25547
	movq	-7408(%rbp), %r10
	cmpb	$51, 2(%r10)
	jne	.L25546
	movq	-7416(%rbp), %rsi
	movzwl	(%rsi), %eax
	cmpl	$71, %eax
	je	.L13686
	cmpl	$66, %eax
	je	.L26109
.L13690:
	cmpl	$75, %eax
	je	.L13694
	cmpl	$78, %eax
	je	.L13694
.L13689:
	movq	-7408(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L13699
	cmpl	$66, %eax
	je	.L26110
.L13703:
	cmpl	$75, %eax
	je	.L13707
	cmpl	$78, %eax
	je	.L13707
.L13702:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L13712
	cmpl	$66, %eax
	je	.L26111
.L13716:
	cmpl	$75, %eax
	je	.L13720
	cmpl	$78, %eax
	je	.L13720
.L13715:
	movq	-7368(%rbp), %r9
	cmpw	$66, (%r9)
	jne	.L25545
	movq	-7376(%rbp), %r10
	cmpw	$66, (%r10)
	jne	.L25544
	testq	%r14, %r14
	je	.L25543
	cmpw	$54, (%r14)
	je	.L26112
.L13728:
	shrl	$3, -7356(%rbp)
	xorl	%edi, %edi
	mov	-7356(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -3736(%rbp)
	testl	%r12d, %r12d
	je	.L23566
.L13861:
	movslq	%r12d,%rsi
	movl	movstr_optab(,%rsi,4), %edx
	movq	%rsi, -3744(%rbp)
	cmpl	$1317, %edx
	je	.L13847
	cmpw	$54, (%r14)
	je	.L26113
.L13851:
	testb	$2, target_flags+3(%rip)
	je	.L13852
	movq	-3744(%rbp), %r8
	cmpw	$63, mode_bitsize(%r8,%r8)
.L24727:
	jbe	.L13847
.L13850:
	movslq	%edx,%r10
	leaq	(%r10,%r10,4), %rcx
	movq	%r10, -3752(%rbp)
	movq	insn_data+24(,%rcx,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L13854
	movq	-7368(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L13847
.L13854:
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L26114
.L13855:
	movq	72(%r15), %rax
	testq	%rax, %rax
	je	.L13856
	xorl	%esi, %esi
	movq	-3736(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L13847
.L13856:
	call	get_last_insn
	movl	$1, %edx
	movq	%r14, %rsi
	movl	%r12d, %edi
	movq	%rax, -3760(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r15), %rax
	testq	%rax, %rax
	jne	.L26115
.L13857:
	movq	-3752(%rbp), %rdx
	movq	-7368(%rbp), %rdi
	xorl	%eax, %eax
	movq	-7376(%rbp), %rsi
	movq	-3736(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24492
	movq	-3760(%rbp), %rdi
	call	delete_insns_since
.L13847:
	movq	-3744(%rbp), %rbx
	movzbl	mode_wider_mode(%rbx), %r12d
	testl	%r12d, %r12d
	jne	.L13861
.L23566:
	testb	$2, target_flags+3(%rip)
	movq	-7368(%rbp), %r15
	movl	$0, volatile_ok(%rip)
	setne	%r8b
	movq	8(%r15), %rsi
	movzbl	%r8b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%sil
	movq	%rax, %r15
	movq	-7376(%rbp), %rax
	movzbl	%sil, %edi
	movq	8(%rax), %rsi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%r14, %rsi
	movq	sizetype_tab(%rip), %rdi
	movq	%rax, %rbx
	movzbl	61(%rdi), %r11d
	shrb	$1, %r11b
	movzbl	%r11b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r14
	je	.L26116
.L13870:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r15, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r14, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %rdi
	movq	(%rdi), %r11
	movq	8(%rdx), %rdi
	movq	$0, (%r11)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %rbx
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%rbx), %r14
	movq	8(%r14), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r15)
	je	.L13062
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r15, %rdx
.L24728:
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L13062
.L26116:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r12
	xorl	%esi, %esi
	orb	$1, 49(%r12)
	movq	fn.1(%rip), %r10
	orb	$8, 18(%r10)
	movq	fn.1(%rip), %rcx
	orb	$64, 50(%rcx)
	movq	fn.1(%rip), %r9
	orb	$2, 18(%r9)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L13870
.L24492:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L13062
.L26115:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L13857
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L13857
.L26114:
	movq	-7376(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L13847
	jmp	.L13855
.L13852:
	movq	-3744(%rbp), %r9
	cmpw	$31, mode_bitsize(%r9,%r9)
	jmp	.L24727
.L26113:
	movq	mode_mask_array(,%rsi,8), %r15
	shrq	$1, %r15
	cmpq	%r15, 8(%r14)
	jbe	.L13850
	jmp	.L13851
.L26112:
	movq	8(%r14), %r12
	xorl	%r15d, %r15d
	movl	$17, %esi
.L13741:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23555
.L13738:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L13738
.L23555:
	testl	%edi, %edi
	je	.L13731
	movslq	%edi,%rbx
	movq	%rbx, %r8
	salq	$4, %r8
	addq	optab_table+240(%rip), %r8
	cmpl	$1317, 8(%r8)
	je	.L13740
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L13740
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L13740:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L13741
.L13731:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L13744
	movq	ix86_cost(%rip), %r9
	mov	40(%r9), %ecx
	cmpq	%rcx, %r15
	jae	.L13728
.L13745:
	movq	-7376(%rbp), %rsi
	testb	$2, target_flags+3(%rip)
	movq	-7368(%rbp), %r11
	movq	8(%r14), %r12
	setne	%r14b
	movq	-7368(%rbp), %rdi
	xorl	%ecx, %ecx
	movq	8(%rsi), %r8
	movq	$0, -856(%rbp)
	movl	$0, -7388(%rbp)
	movq	%r8, -880(%rbp)
	movzbl	%r14b, %edx
	movq	8(%r11), %rbx
	leal	5(,%rdx,4), %r14d
	movq	%rdi, -912(%rbp)
	movzwl	(%rbx), %edx
	movq	%rbx, -7384(%rbp)
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L13750
	cmpw	$99, %dx
	je	.L13750
	cmpw	$98, %dx
	je	.L13750
.L13749:
	movl	%ecx, -896(%rbp)
	xorl	%edx, %edx
	movq	-7384(%rbp), %rcx
	movzwl	(%rcx), %eax
	cmpw	$96, %ax
	je	.L13752
	cmpw	$98, %ax
	je	.L13752
.L13751:
	movq	-7384(%rbp), %r15
	movq	-7376(%rbp), %rax
	movl	%edx, -848(%rbp)
	xorl	%ecx, %ecx
	movq	%r15, -904(%rbp)
	movq	%rax, -888(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L13755
	cmpw	$99, %dx
	je	.L13755
	cmpw	$98, %dx
	je	.L13755
.L13754:
	movl	-848(%rbp), %r10d
	movl	%ecx, -872(%rbp)
	movl	$0, -868(%rbp)
	movl	$0, -892(%rbp)
	testl	%r10d, %r10d
	je	.L13756
	movq	%r12, -856(%rbp)
.L13756:
	movl	-872(%rbp), %ebx
	movq	%r12, -864(%rbp)
	testl	%ebx, %ebx
	je	.L13758
	movl	-896(%rbp), %edi
	testl	%edi, %edi
	jne	.L13757
.L13758:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L13771:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23558
.L13768:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L13768
.L23558:
	testl	%edi, %edi
	je	.L13761
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L13770
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L13770
	movzbq	mode_size(%rbx), %r9
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r9
	addq	%rax, %r15
	movq	%rdx, %r12
.L13770:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L13771
.L13761:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L13757
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23560
.L13779:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %r10d
	cmpl	%r14d, %r10d
	cmovae	-7388(%rbp), %ecx
	movl	%ecx, -7388(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L13779
.L23560:
	movl	-872(%rbp), %eax
	testl	%eax, %eax
	jne	.L13785
	movzwl	(%r8), %edx
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L13783
	cmpw	$54, %dx
	je	.L13783
	cmpw	$55, %dx
	je	.L13783
	cmpw	$58, %dx
	je	.L13783
	cmpw	$134, %dx
	je	.L13783
	cmpw	$56, %dx
	je	.L13783
	cmpw	$140, %dx
	je	.L13783
.L13785:
	movl	-896(%rbp), %eax
	testl	%eax, %eax
	jne	.L13757
	movq	-7384(%rbp), %r11
	movzwl	(%r11), %edx
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L13787
	cmpw	$54, %dx
	je	.L13787
	cmpw	$55, %dx
	je	.L13787
	cmpw	$58, %dx
	je	.L13787
	cmpw	$134, %dx
	je	.L13787
	cmpw	$56, %dx
	je	.L13787
	cmpw	$140, %dx
	je	.L13787
.L13757:
	cmpl	$1, %r14d
	jbe	.L13790
.L13841:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23563
.L13797:
	movslq	%ecx,%rsi
	movzbl	mode_size(%rsi), %edx
	cmpl	%r14d, %edx
	cmovae	-7388(%rbp), %ecx
	movl	%ecx, -7388(%rbp)
	movzbl	mode_wider_mode(%rsi), %ecx
	testl	%ecx, %ecx
	jne	.L13797
.L23563:
	movl	-7388(%rbp), %eax
	testl	%eax, %eax
	je	.L13790
	movslq	-7388(%rbp),%r15
	movq	%r15, %r14
	salq	$4, %r14
	addq	optab_table+240(%rip), %r14
	movl	8(%r14), %ebx
	cmpl	$1317, %ebx
	je	.L13799
	movl	-7388(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	jb	.L13799
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%r9
	movq	$0, -7400(%rbp)
	leaq	(%r9,%r9,4), %rcx
	cmpq	%rdx, -864(%rbp)
	movq	insn_data+16(,%rcx,8), %r12
	movq	%rdx, -6000(%rbp)
	movq	%r12, -3728(%rbp)
	leaq	-912(%rbp), %r12
	jb	.L13799
	movl	-848(%rbp), %ecx
.L13839:
	testl	%ecx, %ecx
	je	.L13803
	subq	%rdx, 56(%r12)
.L13803:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L13804
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L13805
	movl	-7388(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24723:
	movq	%rax, -7400(%rbp)
.L13804:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L13807
	movq	24(%r12), %rdi
	movl	-7388(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24724:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L26117
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L13813
	movzbl	mode_size(%r15), %r10d
	leal	7(%r10), %edx
	andl	$-8, %edx
.L13814:
	movq	cfun(%rip), %rdi
	andl	$33554432, %esi
	movq	16(%rdi), %r11
	leaq	8(%r11), %rdi
	movl	8(%r11), %ecx
	je	.L13815
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24725:
	movq	%r15, %rsi
	leal	(%rax,%rcx), %r8d
	salq	$4, %rsi
	movl	%r8d, (%rdi)
	addq	optab_table+384(%rip), %rsi
	movl	8(%rsi), %eax
	cmpl	$1317, %eax
	je	.L13817
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rcx
	movq	insn_data+24(,%rcx,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L13818
	movq	%r14, %rdi
	movl	-7388(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L26118
.L13818:
	leaq	(%rbx,%rbx,4), %r9
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r9,8)
.L24726:
	movq	%rax, %rdi
	call	emit_insn
.L13837:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L13838
	movq	-6000(%rbp), %r14
	addq	%r14, 56(%r12)
.L13838:
	movq	48(%r12), %rsi
	movq	-6000(%rbp), %rdx
	subq	-6000(%rbp), %rsi
	cmpq	%rdx, %rsi
	movq	%rsi, 48(%r12)
	jae	.L13839
.L13799:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L13841
.L13790:
	cmpq	$0, -864(%rbp)
.L25556:
	je	.L13062
	jmp	.L25518
.L26118:
	movl	-7388(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L13818
.L13817:
	movzbl	mode_size(%r15), %r10d
	cmpl	%edx, %r10d
	je	.L26119
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r11b
	movzbl	%r11b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L13825:
	movl	-7388(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%edi, %edi
	testq	%rdi, %rdi
	movq	%rax, %rbx
	je	.L13834
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L26120
.L13834:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L13837
.L26120:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L13834
.L26119:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L13825
.L13815:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24725
.L13813:
	movzbl	mode_size(%r15), %ebx
	leal	1(%rbx), %edx
	andl	$-2, %edx
	jmp	.L13814
.L26117:
	movq	%rax, %rsi
	movq	-7400(%rbp), %rdi
	xorl	%eax, %eax
	call	*-3728(%rbp)
	jmp	.L24726
.L13807:
	movq	24(%r12), %rdi
	movl	-7388(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24724
.L13805:
	movl	-7388(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24723
.L13787:
	movq	-7384(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -904(%rbp)
	jmp	.L13757
.L13783:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -880(%rbp)
	jmp	.L13785
.L13755:
	movl	$1, %ecx
	jmp	.L13754
.L13752:
	movl	$1, %edx
	jmp	.L13751
.L13750:
	movl	$1, %ecx
	jmp	.L13749
.L13744:
	cmpq	$2, %r15
	ja	.L13728
	jmp	.L13745
.L13720:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L26121
.L13722:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L13715
.L26121:
	cmpq	16(%r14), %rax
	jne	.L13722
	jmp	.L13715
.L26111:
	cmpb	$51, 2(%r14)
	je	.L13713
	movq	8(%r14), %r12
	cmpw	$71, (%r12)
	je	.L26122
.L13713:
	cmpl	$66, %eax
	jne	.L13716
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L13715
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%rbx, 8(%rax)
	jmp	.L13715
.L26122:
	movq	8(%r12), %rsi
	movq	%r14, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L13714
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L13715
.L13714:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24722:
	movq	%rax, %r14
	jmp	.L13715
.L13712:
	cmpq	$0, 16(%r14)
	je	.L26123
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L24722
	movq	8(%r14), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L13715
.L26123:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L24722
.L13707:
	movq	-7408(%rbp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-7408(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-7408(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26124
.L13709:
	movq	-7408(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7376(%rbp)
	movq	%r12, 8(%rax)
	movq	-7376(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L13702
.L26124:
	cmpq	16(%rcx), %rax
	jne	.L13709
	jmp	.L13702
.L26110:
	cmpb	$51, 2(%rdx)
	je	.L13700
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26125
.L13700:
	cmpl	$66, %eax
	jne	.L13703
	movq	-7408(%rbp), %r10
	xorl	%esi, %esi
	movq	8(%r10), %rdi
	call	protect_from_queue
	movq	-7408(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L13702
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -7376(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L13702
.L26125:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L13701
	movq	-7408(%rbp), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -7376(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L13702
.L13701:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24721:
	movq	%rax, -7376(%rbp)
	jmp	.L13702
.L13699:
	movq	-7408(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26126
	movq	-7408(%rbp), %rax
	movq	24(%rax), %r8
	testq	%r8, %r8
	movq	%r8, -7376(%rbp)
	jne	.L13702
	movq	-7408(%rbp), %rsi
	movq	8(%rsi), %r12
	movzbl	2(%r12), %edi
	call	gen_reg_rtx
	movq	-7408(%rbp), %r15
	movq	%rax, %rdi
	movq	8(%r15), %rsi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r11
	movq	%r11, -7376(%rbp)
	jmp	.L13702
.L26126:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24721
.L13694:
	movq	-7416(%rbp), %r12
	xorl	%esi, %esi
	movq	8(%r12), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-7416(%rbp), %rdx
	movq	%rax, %r12
	movq	16(%rdx), %rdi
	call	protect_from_queue
	movq	-7416(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L26127
.L13696:
	movq	-7416(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7368(%rbp)
	movq	%r12, 8(%rax)
	movq	-7368(%rbp), %r8
	movq	%rbx, 16(%r8)
	jmp	.L13689
.L26127:
	cmpq	16(%rsi), %rax
	jne	.L13696
	jmp	.L13689
.L26109:
	jne	.L13690
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, %rbx
	movq	-7416(%rbp), %rax
	cmpq	8(%rax), %rbx
	je	.L13689
	movq	%rax, %rdi
	call	copy_rtx
	movq	%rax, -7368(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L13689
.L13686:
	testq	%rcx, %rcx
	je	.L26128
	movq	-7416(%rbp), %r15
	movq	24(%r15), %r11
	testq	%r11, %r11
	movq	%r11, -7368(%rbp)
	jne	.L13689
	movq	-7416(%rbp), %r12
	movq	8(%r12), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rcx
	movq	%rcx, -7368(%rbp)
	jmp	.L13689
.L26128:
	movq	-7416(%rbp), %rax
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rax, -7368(%rbp)
	jmp	.L13689
.L13679:
	testq	%rcx, %rcx
	movl	$8, -7356(%rbp)
	je	.L13675
	movl	32(%rcx), %eax
	jmp	.L24720
.L13678:
	cmpl	$7, %edx
	ja	.L13674
	jmp	.L13679
.L26107:
	movq	8(%r14), %rdi
	call	int_size_in_bytes
	movl	%eax, -3692(%rbp)
	movq	-7416(%rbp), %rax
	cmpw	$39, (%rax)
	jne	.L25561
	movq	-7416(%rbp), %r8
	movq	8(%r8), %rcx
	movq	8(%rcx), %r15
	movl	(%rcx), %r14d
	cmpq	$0, 8(%r15)
	movslq	%r14d,%rdi
	sete	%r10b
	leaq	15(,%rdi,8), %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	leaq	32(%rsp), %r12
	movzbl	%r10b, %r9d
	movq	%r12, -3704(%rbp)
	movl	%r9d, -7352(%rbp)
	movl	-7352(%rbp), %eax
	cmpl	%r14d, %eax
	movl	%eax, -7344(%rbp)
	jge	.L23549
.L13658:
	movslq	-7344(%rbp),%r14
	movq	8(%rcx,%r14,8), %rsi
	movq	%r14, -3712(%rbp)
	movl	-3692(%rbp), %ecx
	movq	8(%rsi), %rax
	movq	16(%rsi), %r11
	testl	%ecx, %ecx
	movzbl	2(%rax), %r14d
	movq	8(%r11), %r15
	movslq	%r14d,%rdx
	movzbl	mode_size(%rdx), %ebx
	movq	%rdx, -3720(%rbp)
	movl	%ebx, -7348(%rbp)
	js	.L13631
	movslq	-3692(%rbp),%r12
	mov	%ebx, %edi
	leaq	(%rdi,%r15), %rbx
	cmpq	%r12, %rbx
	jle	.L13631
	movl	-3692(%rbp), %r9d
	subl	%r15d, %r9d
	movl	%r9d, -7348(%rbp)
	je	.L25560
.L13631:
	movq	-7408(%rbp), %r12
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L24534
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L13635
	cmpw	$54, %dx
	je	.L13635
	cmpw	$55, %dx
	je	.L13635
	cmpw	$58, %dx
	je	.L13635
	cmpw	$134, %dx
	je	.L13635
	cmpw	$56, %dx
	je	.L13635
	cmpw	$140, %dx
	je	.L13635
.L13634:
	movq	-7408(%rbp), %rcx
	movl	%r14d, %edi
	movzbl	2(%rcx), %eax
	testb	%al, %al
	je	.L24718
	movzbl	%al, %edi
.L24718:
	call	gen_reg_rtx
	movq	-7408(%rbp), %rsi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	emit_move_insn
	movzwl	(%r12), %edx
.L13633:
	cmpw	$66, %dx
	je	.L24534
.L13638:
	cmpw	$65, %dx
	je	.L26129
	leal	-67(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L13655
	cmpw	$54, %dx
	je	.L13655
	cmpw	$55, %dx
	je	.L13655
	cmpw	$58, %dx
	je	.L13655
	cmpw	$134, %dx
	je	.L13655
	cmpw	$56, %dx
	je	.L13655
	cmpw	$140, %dx
	je	.L13655
	cmpw	$61, %dx
	je	.L26130
.L13654:
	movslq	-3692(%rbp),%r9
	movl	-7348(%rbp), %edx
	movq	%r12, %rdi
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r14d, (%rsp)
	sall	$3, %edx
	mov	%edx, %esi
	movq	%r9, 8(%rsp)
	leaq	0(,%r15,8), %rdx
	movl	%r14d, %r9d
	call	extract_bit_field
.L24719:
	movq	-3712(%rbp), %r12
	movq	-3704(%rbp), %r10
	movq	%rax, (%r10,%r12,8)
.L13629:
	movq	-7416(%rbp), %r8
	incl	-7344(%rbp)
	movl	-7344(%rbp), %eax
	movq	8(%r8), %rcx
	cmpl	(%rcx), %eax
	jl	.L13658
.L23549:
	movq	cfun(%rip), %r15
	movq	16(%r15), %r11
	movq	40(%r11), %rbx
	testq	%rbx, %rbx
	je	.L23551
.L13664:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26131
	call	emit_insn
	movq	%rax, 16(%rbx)
.L13663:
	movq	cfun(%rip), %r9
	movq	40(%rbx), %r14
	movq	16(%r9), %rdi
	testq	%r14, %r14
	movq	%r14, %rbx
	movq	%r14, 40(%rdi)
	jne	.L13664
	movq	-7416(%rbp), %rbx
	movq	8(%rbx), %rcx
.L23551:
	movl	-7352(%rbp), %r10d
	cmpl	(%rcx), %r10d
	jge	.L13062
.L13670:
	movslq	-7352(%rbp),%r11
	movq	-3704(%rbp), %r8
	salq	$3, %r11
	movq	8(%r11,%rcx), %r15
	movq	(%r8,%r11), %rsi
	movq	8(%r15), %rdi
	call	emit_move_insn
	movq	-7416(%rbp), %rax
	incl	-7352(%rbp)
	movl	-7352(%rbp), %edx
	movq	8(%rax), %r12
	cmpl	(%r12), %edx
	movq	%r12, %rcx
	jl	.L13670
	jmp	.L13062
.L26131:
	movq	8(%rdi), %rsi
	movq	8(%rsi), %rcx
	movq	%rcx, 16(%rbx)
	call	emit_insn
	jmp	.L13663
.L26130:
	movzbl	2(%r12), %esi
	cmpl	%r14d, %esi
	jne	.L13654
.L13655:
	movq	-3712(%rbp), %rdi
	movq	-3704(%rbp), %r14
	movq	%r12, (%r14,%rdi,8)
	jmp	.L13629
.L26129:
	testq	%r15, %r15
	jne	.L24337
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %r8
	movzbl	mode_size(%r8), %ebx
	cmpl	%ebx, -7348(%rbp)
	je	.L13644
.L13645:
	movzbq	2(%rdx), %rcx
	movzbq	mode_size(%rcx), %r11
	cmpq	%r11, %r15
	je	.L26132
.L13643:
	testq	%r15, %r15
	jne	.L22779
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbx
	movzbq	mode_size(%rbx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %r15
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r15, %rdi
	movl	%r14d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	jmp	.L24719
.L26132:
	movq	16(%r12), %rdx
	movzbq	2(%rdx), %rdi
	movzbl	mode_size(%rdi), %esi
	cmpl	%esi, -7348(%rbp)
	jne	.L13643
.L13644:
	xorl	%r9d, %r9d
	movq	-3712(%rbp), %r10
	movq	-3704(%rbp), %rax
	testq	%r15, %r15
	setne	%r9b
	leaq	(%rax,%r10,8), %rbx
	movq	8(%r12,%r9,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L13629
	cmpw	$54, %dx
	je	.L13629
	cmpw	$55, %dx
	je	.L13629
	cmpw	$58, %dx
	je	.L13629
	cmpw	$134, %dx
	je	.L13629
	cmpw	$56, %dx
	je	.L13629
	cmpw	$140, %dx
	je	.L13629
	cmpw	$61, %dx
	je	.L26133
.L13649:
	movslq	-3692(%rbp),%r8
	movl	-7348(%rbp), %r11d
	movl	%r14d, (%rsp)
	xorl	%edx, %edx
	movl	$1, %ecx
	movl	%r14d, %r9d
	sall	$3, %r11d
	movq	%r8, 8(%rsp)
	mov	%r11d, %esi
	xorl	%r8d, %r8d
	movq	(%rbx), %rdi
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L13629
.L26133:
	movzbl	2(%rcx), %r12d
	cmpl	%r14d, %r12d
	jne	.L13649
	jmp	.L13629
.L24337:
	movq	8(%r12), %rdx
	jmp	.L13645
.L24534:
	movl	%r14d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L13639
	cmpl	%eax, 32(%rdx)
	jae	.L13640
.L24336:
	movzwl	(%r12), %edx
	jmp	.L13638
.L13640:
	movl	%r14d, %edi
	leaq	0(,%r15,8), %rbx
	call	get_mode_alignment
	mov	%eax, %edi
	movq	%rbx, %rax
	cqto
	idivq	%rdi
	testq	%rdx, %rdx
	jne	.L24336
	movq	-3720(%rbp), %rax
	movzbl	mode_size(%rax), %edx
	cmpl	%edx, -7348(%rbp)
	jne	.L24336
	movl	%r14d, %edi
	call	gen_reg_rtx
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-3712(%rbp), %r10
	movq	-3704(%rbp), %r9
	movq	%r12, %rdi
	movl	%r14d, %esi
	movq	%r15, %rdx
	leaq	(%r9,%r10,8), %rbx
	movq	%rax, (%rbx)
	call	adjust_address_1
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L13629
.L13639:
	cmpl	$8, %eax
	ja	.L24336
	jmp	.L13640
.L13635:
	movq	-7408(%rbp), %r11
	movzbl	2(%r11), %ecx
	movzbl	%cl, %r8d
	cmpl	%r14d, %r8d
	je	.L13633
	testb	%cl, %cl
	je	.L13633
	jmp	.L13634
.L26106:
	cmpb	$29, 16(%r14)
	jne	.L13086
	movq	%r14, %rdi
	call	expr_size
	cmpw	$54, (%rax)
	movq	%rax, -7224(%rbp)
	je	.L26134
.L13087:
	movq	sizetype_tab(%rip), %rdi
	movq	-7224(%rbp), %rsi
	call	make_tree
	xorl	%esi, %esi
	movslq	32(%r14),%rdi
	movq	%rax, %r15
	call	size_int_wide
	movq	%r15, %rsi
	movl	$78, %edi
	movq	%rax, %rdx
	call	size_binop
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	movq	%rax, -3616(%rbp)
	call	expand_expr
	xorl	%edx, %edx
	movl	ptr_mode(%rip), %edi
	movq	%rax, %rsi
	movq	$0, -7312(%rbp)
	call	convert_to_mode
	movl	$8, %edx
	movq	-7408(%rbp), %rcx
	movq	-7416(%rbp), %r12
	movq	%rax, -7256(%rbp)
	movq	%rax, -7280(%rbp)
	movq	%rcx, -7272(%rbp)
	movq	%r12, -7264(%rbp)
	movq	16(%r12), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L13290
	movl	32(%rax), %edx
.L13290:
	movq	-7408(%rbp), %r14
	movq	16(%r14), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L13291
	cmpl	32(%rax), %edx
	jb	.L13292
.L13287:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L13288
	movl	32(%rcx), %r15d
.L13288:
	movq	-7416(%rbp), %rax
	cmpb	$51, 2(%rax)
	jne	.L25547
	movq	-7408(%rbp), %rdi
	cmpb	$51, 2(%rdi)
	jne	.L25546
	movq	-7416(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L13299
	cmpl	$66, %eax
	je	.L26135
.L13303:
	cmpl	$75, %eax
	je	.L13307
	cmpl	$78, %eax
	je	.L13307
.L13302:
	movq	-7408(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L13312
	cmpl	$66, %eax
	je	.L26136
.L13316:
	cmpl	$75, %eax
	je	.L13320
	cmpl	$78, %eax
	je	.L13320
.L13315:
	movq	-7256(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L13325
	cmpl	$66, %eax
	je	.L26137
.L13329:
	cmpl	$75, %eax
	je	.L13333
	cmpl	$78, %eax
	je	.L13333
.L13328:
	movq	-7264(%rbp), %rdx
	cmpw	$66, (%rdx)
	jne	.L25545
	movq	-7272(%rbp), %r10
	cmpw	$66, (%r10)
	jne	.L25544
	cmpq	$0, -7280(%rbp)
	je	.L25543
	movq	-7280(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L26138
.L13341:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -3632(%rbp)
	testl	%r12d, %r12d
	je	.L23533
.L13474:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L13460
	movq	-7280(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L26139
.L13464:
	testb	$2, target_flags+3(%rip)
	je	.L13465
	cmpw	$63, mode_bitsize(%r15,%r15)
.L24712:
	jbe	.L13460
.L13463:
	movslq	%edx,%rsi
	leaq	(%rsi,%rsi,4), %rcx
	movq	%rsi, -3640(%rbp)
	movq	insn_data+24(,%rcx,8), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L13467
	movq	-7264(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L13460
.L13467:
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L26140
.L13468:
	movq	72(%r14), %rax
	testq	%rax, %rax
	je	.L13469
	xorl	%esi, %esi
	movq	-3632(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L13460
.L13469:
	call	get_last_insn
	movl	$1, %edx
	movq	-7280(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -3648(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r14), %rax
	testq	%rax, %rax
	jne	.L26141
.L13470:
	movq	-3640(%rbp), %rdx
	movq	-7264(%rbp), %rdi
	xorl	%eax, %eax
	movq	-7272(%rbp), %rsi
	movq	-3632(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24490
	movq	-3648(%rbp), %rdi
	call	delete_insns_since
.L13460:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L13474
.L23533:
	testb	$2, target_flags+3(%rip)
	movq	-7264(%rbp), %r8
	movl	$0, volatile_ok(%rip)
	setne	%r9b
	movq	8(%r8), %rsi
	movzbl	%r9b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%bl
	movq	%rax, %r14
	movq	-7272(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%bl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-7280(%rbp), %rsi
	movq	sizetype_tab(%rip), %r11
	movq	%rax, %rbx
	movzbl	61(%r11), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L26142
.L13483:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %r8
	movq	8(%rdx), %rdi
	movq	(%r8), %rbx
	movq	$0, (%rbx)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r11
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r11), %r15
	movq	8(%r15), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	jne	.L26143
.L13472:
	movq	-7256(%rbp), %rbx
	cmpw	$54, (%rbx)
	je	.L26144
	movq	sizetype_tab(%rip), %r9
	movq	-7256(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	optab_table+16(%rip), %rsi
	movq	-7224(%rbp), %rdx
	movzbl	61(%r9), %r12d
	xorl	%r9d, %r9d
	movl	$3, (%rsp)
	shrb	$1, %r12b
	movzbl	%r12b, %edi
	call	expand_binop
	movq	-3616(%rbp), %rdi
	movq	%rax, %rbx
	call	highest_pow2_factor
	movq	-7256(%rbp), %rsi
	movq	-7416(%rbp), %rdi
	movq	%rax, %rdx
	call	offset_address
	movq	%rax, -7416(%rbp)
	call	gen_label_rtx
	xorl	%r9d, %r9d
	movq	%rax, -7312(%rbp)
	movq	const_int_rtx+512(%rip), %rsi
	movq	%rbx, %rdi
	movzbl	2(%rbx), %r8d
	movl	$107, %edx
	xorl	%ecx, %ecx
	movq	%rax, (%rsp)
	call	emit_cmp_and_jump_insns
.L13486:
	cmpq	const_int_rtx+512(%rip), %rbx
	je	.L13487
	movq	-7416(%rbp), %rdx
	cmpw	$66, (%rdx)
	movq	%rdx, -7328(%rbp)
	je	.L26145
	movq	-7416(%rbp), %rax
	movzbl	2(%rax), %edi
	call	get_mode_alignment
.L24713:
	movl	%eax, -7316(%rbp)
.L13489:
	movq	-7416(%rbp), %rsi
	movzbl	2(%rsi), %eax
	cmpb	$51, %al
	je	.L13492
	cmpw	$54, (%rbx)
	je	.L26146
.L13492:
	movq	-7416(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L13494
	cmpl	$66, %eax
	je	.L26147
.L13498:
	cmpl	$75, %eax
	je	.L13502
	cmpl	$78, %eax
	je	.L13502
.L13497:
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L13507
	cmpl	$66, %eax
	je	.L26148
.L13511:
	cmpl	$75, %eax
	je	.L13515
	cmpl	$78, %eax
	je	.L13515
.L13510:
	cmpw	$54, (%rbx)
	je	.L26149
.L13520:
	shrl	$3, -7316(%rbp)
	xorl	%edi, %edi
	mov	-7316(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r14d
	movq	%rax, -3664(%rbp)
	testl	%r14d, %r14d
	je	.L23547
.L13614:
	movslq	%r14d,%rcx
	movl	clrstr_optab(,%rcx,4), %edx
	movq	%rcx, -3672(%rbp)
	cmpl	$1317, %edx
	je	.L13601
	cmpw	$54, (%rbx)
	je	.L26150
.L13605:
	testb	$2, target_flags+3(%rip)
	je	.L13606
	movq	-3672(%rbp), %rax
	cmpw	$63, mode_bitsize(%rax,%rax)
.L24716:
	jbe	.L13601
.L13604:
	movslq	%edx,%r15
	leaq	(%r15,%r15,4), %r10
	movq	%r15, -3680(%rbp)
	movq	insn_data+24(,%r10,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L13608
	movq	-7328(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L13601
.L13608:
	movq	48(%r15), %rax
	testq	%rax, %rax
	je	.L13609
	xorl	%esi, %esi
	movq	-3664(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L13601
.L13609:
	call	get_last_insn
	movl	$1, %edx
	movq	%rbx, %rsi
	movl	%r14d, %edi
	movq	%rax, -3688(%rbp)
	call	convert_to_mode
	movq	%rax, %r12
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L26151
.L13610:
	movq	-3680(%rbp), %rcx
	movq	-7328(%rbp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	-3664(%rbp), %rdx
	leaq	(%rcx,%rcx,4), %r8
	call	*insn_data+16(,%r8,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24717
	movq	-3688(%rbp), %rdi
	call	delete_insns_since
.L13601:
	movq	-3672(%rbp), %rdx
	movzbl	mode_wider_mode(%rdx), %r14d
	testl	%r14d, %r14d
	jne	.L13614
.L23547:
	testb	$2, target_flags+3(%rip)
	movq	-7328(%rbp), %r14
	setne	%r12b
	movq	8(%r14), %rsi
	movzbl	%r12b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	sizetype_tab(%rip), %rsi
	movq	%rax, %r14
	movzbl	61(%rsi), %r11d
	movq	%rbx, %rsi
	shrb	$1, %r11b
	movzbl	%r11b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.0(%rip)
	movq	%rax, %r15
	je	.L26152
.L13619:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	const_int_rtx+512(%rip), %rsi
	movq	integer_types+40(%rip), %rdi
	movq	%rax, %r12
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.0(%rip), %rcx
	movq	%rax, (%rbx)
	movq	(%r12), %r11
	movq	8(%rcx), %rdi
	movq	(%r11), %rdx
	movq	$0, (%rdx)
	call	build_pointer_type
	movq	fn.0(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	movq	%r12, %rcx
	movl	$53, %edi
	movq	fn.0(%rip), %r8
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%r8), %r15
	xorl	%r8d, %r8d
	movq	8(%r15), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	jne	.L26153
.L13487:
	cmpq	$0, -7312(%rbp)
	je	.L13062
	movq	-7312(%rbp), %rdi
	call	emit_label
	jmp	.L13062
.L26153:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
.L24717:
	call	emit_insn
	jmp	.L13487
.L26152:
	movl	$.LC7, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.0(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.0(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.0, %edi
	movq	%rax, fn.0(%rip)
	call	ggc_add_tree_root
	movq	fn.0(%rip), %r10
	xorl	%esi, %esi
	orb	$1, 49(%r10)
	movq	fn.0(%rip), %r9
	orb	$8, 18(%r9)
	movq	fn.0(%rip), %rdi
	orb	$64, 50(%rdi)
	movq	fn.0(%rip), %rbx
	orb	$2, 18(%rbx)
	movq	fn.0(%rip), %rdi
	call	make_decl_rtl
	movq	fn.0(%rip), %rdi
	call	assemble_external
	jmp	.L13619
.L26151:
	movq	%r12, %rdi
	movl	%r14d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L13610
	movq	%r12, %rsi
	movl	%r14d, %edi
	call	copy_to_mode_reg
	movq	%rax, %r12
	jmp	.L13610
.L13606:
	movq	-3672(%rbp), %r9
	cmpw	$31, mode_bitsize(%r9,%r9)
	jmp	.L24716
.L26150:
	movq	mode_mask_array(,%rcx,8), %r12
	shrq	$1, %r12
	cmpq	%r12, 8(%rbx)
	jbe	.L13604
	jmp	.L13605
.L26149:
	movq	8(%rbx), %r14
	xorl	%r15d, %r15d
	movl	$17, %esi
.L13533:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23536
.L13530:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L13530
.L23536:
	testl	%edi, %edi
	je	.L13523
	movslq	%edi,%r12
	movq	%r12, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L13532
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L13532
	movzbq	mode_size(%r12), %r9
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%r9
	addq	%rax, %r15
	movq	%rdx, %r14
.L13532:
	movzbq	mode_size(%r12), %rsi
	cmpq	$1, %rsi
	ja	.L13533
.L13523:
	testq	%r14, %r14
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L13536
	movq	ix86_cost(%rip), %r10
	mov	40(%r10), %r12d
	cmpq	%r12, %r15
	jae	.L13520
.L13537:
	movq	8(%rbx), %r11
	movq	-7328(%rbp), %r15
	leaq	-272(%rbp), %r12
	testb	$2, target_flags+3(%rip)
	movq	$clear_by_pieces_1, -232(%rbp)
	movq	$0, -224(%rbp)
	setne	%dl
	xorl	%esi, %esi
	movq	%r15, -272(%rbp)
	movq	%r11, -248(%rbp)
	movq	8(%r15), %r8
	movq	$0, -240(%rbp)
	movl	$0, -7340(%rbp)
	movzbl	%dl, %ecx 
	movq	%r8, -264(%rbp)
	movzwl	(%r8), %edx
	leaq	5(,%rcx,4), %r15
	leaq	16(%r12), %rcx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L13541
	cmpw	$99, %dx
	je	.L13541
	cmpw	$98, %dx
	je	.L13541
.L13540:
	movl	%esi, (%rcx)
	movl	$0, 20(%r12)
	leaq	56(%r12), %rdx
	movzwl	(%r8), %eax
	xorl	%ecx, %ecx
	cmpw	$96, %ax
	je	.L13543
	cmpw	$98, %ax
	je	.L13543
.L13542:
	movl	%ecx, (%rdx)
	movl	56(%r12), %eax
	testl	%eax, %eax
	je	.L13544
	movq	24(%r12), %rsi
	movq	%rsi, 32(%r12)
.L13544:
	movl	16(%r12), %edi
	testl	%edi, %edi
	jne	.L13545
	movq	24(%r12), %r14
	movq	$0, -7336(%rbp)
	movl	$17, %esi
.L13558:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23539
.L13555:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %r10
	cmpq	%rsi, %r10
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L13555
.L23539:
	testl	%edi, %edi
	je	.L13548
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L13557
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L13557
	movzbq	mode_size(%rbx), %rsi
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, -7336(%rbp)
	movq	%rdx, %r14
.L13557:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L13558
.L13548:
	testq	%r14, %r14
	jne	.L25529
	cmpq	$2, -7336(%rbp)
	jbe	.L13545
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23541
.L13566:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%r15, %rdx
	cmovae	-7340(%rbp), %ecx
	movl	%ecx, -7340(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L13566
.L23541:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L13545
	movzwl	(%r8), %edx
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L13570
	cmpw	$54, %dx
	je	.L13570
	cmpw	$55, %dx
	je	.L13570
	cmpw	$58, %dx
	je	.L13570
	cmpw	$134, %dx
	je	.L13570
	cmpw	$56, %dx
	je	.L13570
	cmpw	$140, %dx
	je	.L13570
.L13545:
	cmpq	$1, %r15
	jbe	.L13573
.L13594:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23544
.L13580:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %r10
	cmpq	%r15, %r10
	cmovae	-7340(%rbp), %ecx
	movl	%ecx, -7340(%rbp)
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L13580
.L23544:
	movl	-7340(%rbp), %r15d
	testl	%r15d, %r15d
	je	.L13573
	movslq	-7340(%rbp),%r15
	movq	%r15, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	movl	8(%rcx), %ebx
	cmpl	$1317, %ebx
	je	.L13582
	movl	-7340(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	jb	.L13582
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rsi
	leaq	(%rsi,%rsi,4), %r11
	cmpq	%rdx, 24(%r12)
	movq	insn_data+16(,%r11,8), %r14
	movq	%r14, -3656(%rbp)
	movq	%rdx, %r14
	jb	.L13582
	movl	56(%r12), %ecx
.L13592:
	testl	%ecx, %ecx
	je	.L13586
	subq	%rdx, 32(%r12)
.L13586:
	movl	16(%r12), %ebx
	testl	%ebx, %ebx
	je	.L13587
	movq	(%r12), %rdi
	movl	-7340(%rbp), %esi
	movl	$1, %r8d
	movq	8(%r12), %rdx
	movq	32(%r12), %rcx
	call	adjust_automodify_address_1
.L24715:
	movl	-7340(%rbp), %edx
	movq	%rax, %rbx
	movq	48(%r12), %rdi
	movq	32(%r12), %rsi
	call	*40(%r12)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	*-3656(%rbp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L13591
	addq	%r14, 32(%r12)
.L13591:
	movq	24(%r12), %rdi
	movq	%r14, %rdx
	subq	%r14, %rdi
	cmpq	%r14, %rdi
	movq	%rdi, 24(%r12)
	jae	.L13592
.L13582:
	movzbq	mode_size(%r15), %r15
	cmpq	$1, %r15
	ja	.L13594
.L13573:
	cmpq	$0, 24(%r12)
	je	.L13487
	jmp	.L25451
.L13587:
	movq	(%r12), %rdi
	movl	-7340(%rbp), %esi
	movl	$1, %ecx
	movq	32(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24715
.L13570:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, 8(%r12)
	jmp	.L13545
.L13543:
	movl	$1, %ecx
	jmp	.L13542
.L13541:
	movl	$1, %esi
	jmp	.L13540
.L13536:
	cmpq	$2, %r15
	ja	.L13520
	jmp	.L13537
.L13515:
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbx), %rdi
	movq	%rax, %r14
	call	protect_from_queue
	cmpq	8(%rbx), %r14
	movq	%rax, %r12
	je	.L26154
.L13517:
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r14, 8(%rax)
	movq	%r12, 16(%rax)
	jmp	.L13510
.L26154:
	cmpq	16(%rbx), %rax
	jne	.L13517
	jmp	.L13510
.L26148:
	cmpb	$51, 2(%rbx)
	je	.L13508
	movq	8(%rbx), %r14
	cmpw	$71, (%r14)
	je	.L26155
.L13508:
	cmpl	$66, %eax
	jne	.L13511
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%rbx), %rax
	movq	%rax, %r12
	je	.L13510
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r12, 8(%rax)
	jmp	.L13510
.L26155:
	movq	8(%r14), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r14)
	movq	%rax, %r12
	je	.L13509
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L13510
.L13509:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24714:
	movq	%rax, %rbx
	jmp	.L13510
.L13507:
	cmpq	$0, 16(%rbx)
	je	.L26156
	movq	24(%rbx), %rax
	testq	%rax, %rax
	jne	.L24714
	movq	8(%rbx), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%rbx), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	16(%rbx), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbx), %rbx
	jmp	.L13510
.L26156:
	movq	8(%rbx), %rdi
	call	copy_to_reg
	jmp	.L24714
.L13502:
	movq	-7416(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-7416(%rbp), %r10
	movq	%rax, %r14
	movq	16(%r10), %rdi
	call	protect_from_queue
	movq	-7416(%rbp), %rdx
	movq	%rax, %r12
	cmpq	8(%rdx), %r14
	je	.L26157
.L13504:
	movq	-7416(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7328(%rbp)
	movq	%r14, 8(%rax)
	movq	-7328(%rbp), %rsi
	movq	%r12, 16(%rsi)
	jmp	.L13497
.L26157:
	cmpq	16(%rdx), %rax
	jne	.L13504
	jmp	.L13497
.L26147:
	jne	.L13498
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-7416(%rbp), %rcx
	movq	%rax, %r12
	cmpq	8(%rcx), %rax
	je	.L13497
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -7328(%rbp)
	movq	%r12, 8(%rax)
	jmp	.L13497
.L13494:
	movq	-7416(%rbp), %rsi
	cmpq	$0, 16(%rsi)
	je	.L26158
	movq	-7416(%rbp), %r11
	movq	24(%r11), %r15
	testq	%r15, %r15
	movq	%r15, -7328(%rbp)
	jne	.L13497
	movq	-7416(%rbp), %rax
	movq	8(%rax), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	-7416(%rbp), %r9
	movq	%rax, %rdi
	movq	%rax, 24(%r9)
	movq	-7416(%rbp), %r12
	movq	8(%r12), %rsi
	call	gen_move_insn
	movq	-7416(%rbp), %r14
	movq	%rax, %rdi
	movq	16(%r14), %rsi
	call	emit_insn_before
	movq	-7416(%rbp), %r8
	movq	24(%r8), %rdx
	movq	%rdx, -7328(%rbp)
	jmp	.L13497
.L26158:
	movq	8(%rsi), %rdi
	call	copy_to_reg
	movq	%rax, -7328(%rbp)
	jmp	.L13497
.L26146:
	movzbl	%al, %edx 
	movzbl	mode_size(%rdx), %edi
	cmpl	8(%rbx), %edi
	jne	.L13492
	movq	%rsi, %rdi
	movq	const_tiny_rtx(,%rdx,8), %rsi
	call	emit_move_insn
	jmp	.L13487
.L26145:
	movq	16(%rdx), %rax
	movl	$8, -7316(%rbp)
	testq	%rax, %rax
	je	.L13489
	movl	32(%rax), %eax
	jmp	.L24713
.L26144:
	movq	8(%rbx), %rsi
	movq	-7224(%rbp), %rdi
	negq	%rsi
	call	plus_constant_wide
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-7256(%rbp), %r14
	movq	-7416(%rbp), %rdi
	movl	$51, %esi
	movq	%rax, %rbx
	movq	8(%r14), %rdx
	call	adjust_address_1
	movq	%rax, -7416(%rbp)
	jmp	.L13486
.L26143:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L13472
.L26142:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %rsi
	orb	$1, 49(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %rcx
	orb	$8, 18(%rcx)
	movq	fn.1(%rip), %r10
	orb	$64, 50(%r10)
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L13483
.L24490:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L13472
.L26141:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L13470
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L13470
.L26140:
	movq	-7272(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L13460
	jmp	.L13468
.L13465:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L24712
.L26139:
	movq	mode_mask_array(,%r15,8), %r10
	shrq	$1, %r10
	cmpq	%r10, 8(%rsi)
	jbe	.L13463
	jmp	.L13464
.L26138:
	movq	8(%rcx), %r12
	xorl	%r14d, %r14d
	movl	$17, %esi
.L13354:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23522
.L13351:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %r11
	cmpq	%rsi, %r11
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L13351
.L23522:
	testl	%edi, %edi
	je	.L13344
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L13353
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L13353
	movzbq	mode_size(%rbx), %r8
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r8
	addq	%rax, %r14
	movq	%rdx, %r12
.L13353:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L13354
.L13344:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L13357
	movq	ix86_cost(%rip), %rdx
	mov	40(%rdx), %r9d
	cmpq	%r9, %r14
	jae	.L13341
.L13358:
	movq	-7280(%rbp), %r8
	movq	-7272(%rbp), %rsi
	movq	-7264(%rbp), %rdi
	movq	-7264(%rbp), %r11
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r14b
	movq	8(%rsi), %r8
	movq	$0, -856(%rbp)
	movl	$0, -7292(%rbp)
	movq	%r8, -880(%rbp)
	movzbl	%r14b, %ecx
	movq	8(%rdi), %rbx
	movq	%r11, -912(%rbp)
	leal	5(,%rcx,4), %r14d
	xorl	%ecx, %ecx
	movq	%rbx, -7288(%rbp)
	movq	-7288(%rbp), %r10
	movzwl	(%r10), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L13363
	cmpw	$99, %dx
	je	.L13363
	cmpw	$98, %dx
	je	.L13363
.L13362:
	movq	-7288(%rbp), %r9
	movl	%ecx, -896(%rbp)
	xorl	%edx, %edx
	movzwl	(%r9), %eax
	cmpw	$96, %ax
	je	.L13365
	cmpw	$98, %ax
	je	.L13365
.L13364:
	movl	%edx, -848(%rbp)
	movq	-7272(%rbp), %rax
	xorl	%ecx, %ecx
	movq	-7288(%rbp), %rdx
	movq	%rax, -888(%rbp)
	movq	%rdx, -904(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L13368
	cmpw	$99, %dx
	je	.L13368
	cmpw	$98, %dx
	je	.L13368
.L13367:
	movl	-848(%rbp), %r10d
	movl	%ecx, -872(%rbp)
	movl	$0, -868(%rbp)
	movl	$0, -892(%rbp)
	testl	%r10d, %r10d
	je	.L13369
	movq	%r12, -856(%rbp)
.L13369:
	movl	-872(%rbp), %r11d
	movq	%r12, -864(%rbp)
	testl	%r11d, %r11d
	je	.L13371
	movl	-896(%rbp), %ebx
	testl	%ebx, %ebx
	jne	.L13370
.L13371:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L13384:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23525
.L13381:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L13381
.L23525:
	testl	%edi, %edi
	je	.L13374
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L13383
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L13383
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L13383:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L13384
.L13374:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L13370
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23527
.L13392:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %r11d
	cmpl	%r14d, %r11d
	cmovae	-7292(%rbp), %ecx
	movl	%ecx, -7292(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L13392
.L23527:
	movl	-872(%rbp), %eax
	testl	%eax, %eax
	jne	.L13398
	movzwl	(%r8), %edx
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L13396
	cmpw	$54, %dx
	je	.L13396
	cmpw	$55, %dx
	je	.L13396
	cmpw	$58, %dx
	je	.L13396
	cmpw	$134, %dx
	je	.L13396
	cmpw	$56, %dx
	je	.L13396
	cmpw	$140, %dx
	je	.L13396
.L13398:
	movl	-896(%rbp), %eax
	testl	%eax, %eax
	jne	.L13370
	movq	-7288(%rbp), %r9
	movzwl	(%r9), %edx
	leal	-67(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L13400
	cmpw	$54, %dx
	je	.L13400
	cmpw	$55, %dx
	je	.L13400
	cmpw	$58, %dx
	je	.L13400
	cmpw	$134, %dx
	je	.L13400
	cmpw	$56, %dx
	je	.L13400
	cmpw	$140, %dx
	je	.L13400
.L13370:
	cmpl	$1, %r14d
	jbe	.L13403
.L13454:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23530
.L13410:
	movslq	%ecx,%rdi
	movzbl	mode_size(%rdi), %edx
	cmpl	%r14d, %edx
	cmovae	-7292(%rbp), %ecx
	movl	%ecx, -7292(%rbp)
	movzbl	mode_wider_mode(%rdi), %ecx
	testl	%ecx, %ecx
	jne	.L13410
.L23530:
	movl	-7292(%rbp), %eax
	testl	%eax, %eax
	je	.L13403
	movslq	-7292(%rbp),%r15
	movq	%r15, %r14
	salq	$4, %r14
	addq	optab_table+240(%rip), %r14
	movl	8(%r14), %ebx
	cmpl	$1317, %ebx
	je	.L13412
	movl	-7292(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L13412
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rsi
	movq	$0, -7304(%rbp)
	leaq	(%rsi,%rsi,4), %r10
	cmpq	%rdx, -864(%rbp)
	movq	insn_data+16(,%r10,8), %r12
	movq	%rdx, -5992(%rbp)
	movq	%r12, -3624(%rbp)
	leaq	-912(%rbp), %r12
	jb	.L13412
	movl	-848(%rbp), %ecx
.L13452:
	testl	%ecx, %ecx
	je	.L13416
	subq	%rdx, 56(%r12)
.L13416:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L13417
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L13418
	movl	-7292(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24708:
	movq	%rax, -7304(%rbp)
.L13417:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L13420
	movq	24(%r12), %rdi
	movl	-7292(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24709:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L26159
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L13426
	movzbl	mode_size(%r15), %r11d
	leal	7(%r11), %edx
	andl	$-8, %edx
.L13427:
	movq	cfun(%rip), %r9
	andl	$33554432, %esi
	movq	16(%r9), %r8
	leaq	8(%r8), %rdi
	movl	8(%r8), %ecx
	je	.L13428
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24710:
	leal	(%rax,%rcx), %r10d
	movl	%r10d, (%rdi)
	movq	%r15, %rdi
	salq	$4, %rdi
	addq	optab_table+384(%rip), %rdi
	movl	8(%rdi), %eax
	cmpl	$1317, %eax
	je	.L13430
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rcx
	movq	insn_data+24(,%rcx,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L13431
	movq	%r14, %rdi
	movl	-7292(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L26160
.L13431:
	leaq	(%rbx,%rbx,4), %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%rsi,8)
.L24711:
	movq	%rax, %rdi
	call	emit_insn
.L13450:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L13451
	movq	-5992(%rbp), %r14
	addq	%r14, 56(%r12)
.L13451:
	movq	48(%r12), %rdi
	movq	-5992(%rbp), %rdx
	subq	-5992(%rbp), %rdi
	cmpq	%rdx, %rdi
	movq	%rdi, 48(%r12)
	jae	.L13452
.L13412:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L13454
.L13403:
	cmpq	$0, -864(%rbp)
	je	.L13472
	jmp	.L25518
.L26160:
	movl	-7292(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L13431
.L13430:
	movzbl	mode_size(%r15), %r11d
	cmpl	%edx, %r11d
	je	.L26161
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r8b
	movzbl	%r8b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L13438:
	movl	-7292(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%r9d, %r9d
	testq	%r9, %r9
	movq	%rax, %rbx
	je	.L13447
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L26162
.L13447:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L13450
.L26162:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L13447
.L26161:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L13438
.L13428:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24710
.L13426:
	movzbl	mode_size(%r15), %ebx
	leal	1(%rbx), %edx
	andl	$-2, %edx
	jmp	.L13427
.L26159:
	movq	%rax, %rsi
	movq	-7304(%rbp), %rdi
	xorl	%eax, %eax
	call	*-3624(%rbp)
	jmp	.L24711
.L13420:
	movq	24(%r12), %rdi
	movl	-7292(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24709
.L13418:
	movl	-7292(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24708
.L13400:
	movq	-7288(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -904(%rbp)
	jmp	.L13370
.L13396:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -880(%rbp)
	jmp	.L13398
.L13368:
	movl	$1, %ecx
	jmp	.L13367
.L13365:
	movl	$1, %edx
	jmp	.L13364
.L13363:
	movl	$1, %ecx
	jmp	.L13362
.L13357:
	cmpq	$2, %r14
	ja	.L13341
	jmp	.L13358
.L13333:
	movq	-7256(%rbp), %rbx
	xorl	%esi, %esi
	movq	8(%rbx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-7256(%rbp), %rcx
	movq	%rax, %r12
	movq	16(%rcx), %rdi
	call	protect_from_queue
	movq	-7256(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26163
.L13335:
	movq	-7256(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7280(%rbp)
	movq	%r12, 8(%rax)
	movq	-7280(%rbp), %r14
	movq	%rbx, 16(%r14)
	jmp	.L13328
.L26163:
	cmpq	16(%rcx), %rax
	jne	.L13335
	jmp	.L13328
.L26137:
	cmpb	$51, 2(%rdx)
	je	.L13326
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26164
.L13326:
	cmpl	$66, %eax
	jne	.L13329
	movq	-7256(%rbp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	movq	-7256(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L13328
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -7280(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L13328
.L26164:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L13327
	movq	-7256(%rbp), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -7280(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L13328
.L13327:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24707:
	movq	%rax, -7280(%rbp)
	jmp	.L13328
.L13325:
	movq	-7256(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26165
	movq	-7256(%rbp), %rsi
	movq	24(%rsi), %rdi
	testq	%rdi, %rdi
	movq	%rdi, -7280(%rbp)
	jne	.L13328
	movq	-7256(%rbp), %r9
	movq	8(%r9), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	-7256(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r11
	movq	%r11, -7280(%rbp)
	jmp	.L13328
.L26165:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24707
.L13320:
	movq	-7408(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-7408(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-7408(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26166
.L13322:
	movq	-7408(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7272(%rbp)
	movq	%r12, 8(%rax)
	movq	-7272(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L13315
.L26166:
	cmpq	16(%rcx), %rax
	jne	.L13322
	jmp	.L13315
.L26136:
	cmpb	$51, 2(%rdx)
	je	.L13313
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26167
.L13313:
	cmpl	$66, %eax
	jne	.L13316
	movq	-7408(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	movq	-7408(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L13315
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -7272(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L13315
.L26167:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L13314
	movq	-7408(%rbp), %rax
	movzbl	2(%rax), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -7272(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L13315
.L13314:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24706:
	movq	%rax, -7272(%rbp)
	jmp	.L13315
.L13312:
	movq	-7408(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26168
	movq	-7408(%rbp), %r11
	movq	24(%r11), %rsi
	testq	%rsi, %rsi
	movq	%rsi, -7272(%rbp)
	jne	.L13315
	movq	-7408(%rbp), %rdx
	movq	8(%rdx), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	-7408(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r8
	movq	%r8, -7272(%rbp)
	jmp	.L13315
.L26168:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24706
.L13307:
	movq	-7416(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-7416(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L26169
.L13309:
	movq	-7416(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7264(%rbp)
	movq	%r12, 8(%rax)
	movq	-7264(%rbp), %rsi
	movq	%rbx, 16(%rsi)
	jmp	.L13302
.L26169:
	cmpq	16(%rsi), %rax
	jne	.L13309
	jmp	.L13302
.L26135:
	jne	.L13303
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-7416(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L13302
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -7264(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L13302
.L13299:
	testq	%rsi, %rsi
	je	.L26170
	movq	-7416(%rbp), %r9
	movq	24(%r9), %r8
	testq	%r8, %r8
	movq	%r8, -7264(%rbp)
	jne	.L13302
	movq	-7416(%rbp), %r12
	movq	8(%r12), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdx
	movq	%rdx, -7264(%rbp)
	jmp	.L13302
.L26170:
	movq	-7416(%rbp), %r11
	movq	8(%r11), %rdi
	call	copy_to_reg
	movq	%rax, -7264(%rbp)
	jmp	.L13302
.L13292:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L13288
	movl	32(%rsi), %r15d
	jmp	.L13288
.L13291:
	cmpl	$7, %edx
	ja	.L13287
	jmp	.L13292
.L26134:
	movq	-7224(%rbp), %rax
	movslq	32(%r14),%rbx
	cmpq	%rbx, 8(%rax)
	jge	.L13087
	movq	-7416(%rbp), %r9
	movq	-7408(%rbp), %rdx
	movq	%r9, -7208(%rbp)
	movq	%rdx, -7216(%rbp)
	movl	$8, %edx
	movq	16(%r9), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L13091
	movl	32(%rax), %edx
.L13091:
	movq	-7408(%rbp), %r10
	movq	16(%r10), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L13092
	cmpl	32(%rax), %edx
	jb	.L13093
.L13088:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L13089
	movl	32(%rcx), %r15d
.L13089:
	movq	-7416(%rbp), %r12
	cmpb	$51, 2(%r12)
	jne	.L25547
	movq	-7408(%rbp), %rdi
	cmpb	$51, 2(%rdi)
	jne	.L25546
	movq	-7416(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L13100
	cmpl	$66, %eax
	je	.L26171
.L13104:
	cmpl	$75, %eax
	je	.L13108
	cmpl	$78, %eax
	je	.L13108
.L13103:
	movq	-7408(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L13113
	cmpl	$66, %eax
	je	.L26172
.L13117:
	cmpl	$75, %eax
	je	.L13121
	cmpl	$78, %eax
	je	.L13121
.L13116:
	movq	-7224(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L13126
	cmpl	$66, %eax
	je	.L26173
.L13130:
	cmpl	$75, %eax
	je	.L13134
	cmpl	$78, %eax
	je	.L13134
.L13129:
	movq	-7208(%rbp), %r8
	cmpw	$66, (%r8)
	jne	.L25545
	movq	-7216(%rbp), %rax
	cmpw	$66, (%rax)
	jne	.L25544
	cmpq	$0, -7224(%rbp)
	je	.L25543
	movq	-7224(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L26174
.L13142:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -3592(%rbp)
	testl	%r12d, %r12d
	je	.L23519
.L13275:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L13261
	movq	-7224(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L26175
.L13265:
	testb	$2, target_flags+3(%rip)
	je	.L13266
	cmpw	$63, mode_bitsize(%r15,%r15)
.L24705:
	jbe	.L13261
.L13264:
	movslq	%edx,%r9
	leaq	(%r9,%r9,4), %r8
	movq	%r9, -3600(%rbp)
	movq	insn_data+24(,%r8,8), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L13268
	movq	-7208(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L13261
.L13268:
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L26176
.L13269:
	movq	72(%r14), %rax
	testq	%rax, %rax
	je	.L13270
	xorl	%esi, %esi
	movq	-3592(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L13261
.L13270:
	call	get_last_insn
	movl	$1, %edx
	movq	-7224(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -3608(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r14), %rax
	testq	%rax, %rax
	jne	.L26177
.L13271:
	movq	-3600(%rbp), %rdx
	movq	-7208(%rbp), %rdi
	xorl	%eax, %eax
	movq	-7216(%rbp), %rsi
	movq	-3592(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24492
	movq	-3608(%rbp), %rdi
	call	delete_insns_since
.L13261:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L13275
.L23519:
	testb	$2, target_flags+3(%rip)
	movq	-7208(%rbp), %rcx
	movl	$0, volatile_ok(%rip)
	setne	%r14b
	movq	8(%rcx), %rsi
	movzbl	%r14b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%bl
	movq	%rax, %r14
	movq	-7216(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%bl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-7224(%rbp), %rsi
	movq	sizetype_tab(%rip), %r10
	movq	%rax, %rbx
	movzbl	61(%r10), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L26178
.L13284:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %rbx
	movq	8(%rdx), %rdi
	movq	(%rbx), %r10
	movq	$0, (%r10)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r15
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r15), %r9
	movq	8(%r9), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	je	.L13062
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	jmp	.L24728
.L26178:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r8
	orb	$1, 49(%r8)
	movq	fn.1(%rip), %r11
	orb	$8, 18(%r11)
	movq	fn.1(%rip), %rsi
	orb	$64, 50(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L13284
.L26177:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L13271
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L13271
.L26176:
	movq	-7216(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L13261
	jmp	.L13269
.L13266:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L24705
.L26175:
	movq	mode_mask_array(,%r15,8), %r11
	shrq	$1, %r11
	cmpq	%r11, 8(%rsi)
	jbe	.L13264
	jmp	.L13265
.L26174:
	movq	8(%rcx), %r12
	xorl	%r14d, %r14d
	movl	$17, %esi
.L13155:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23508
.L13152:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L13152
.L23508:
	testl	%edi, %edi
	je	.L13145
	movslq	%edi,%rbx
	movq	%rbx, %r10
	salq	$4, %r10
	addq	optab_table+240(%rip), %r10
	cmpl	$1317, 8(%r10)
	je	.L13154
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L13154
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r14
	movq	%rdx, %r12
.L13154:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L13155
.L13145:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L13158
	movq	ix86_cost(%rip), %r11
	mov	40(%r11), %ebx
	cmpq	%rbx, %r14
	jae	.L13142
.L13159:
	movq	-7224(%rbp), %r8
	movq	-7216(%rbp), %rcx
	movq	-7208(%rbp), %r10
	movq	-7208(%rbp), %r9
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r14b
	movq	8(%rcx), %r8
	xorl	%ecx, %ecx
	movq	$0, -776(%rbp)
	movl	$0, -7236(%rbp)
	movq	%r8, -800(%rbp)
	movzbl	%r14b, %edi
	movq	8(%r10), %rdx
	movq	%r9, -832(%rbp)
	leal	5(,%rdi,4), %r14d
	movq	%rdx, -7232(%rbp)
	movq	-7232(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L13164
	cmpw	$99, %dx
	je	.L13164
	cmpw	$98, %dx
	je	.L13164
.L13163:
	movq	-7232(%rbp), %rsi
	movl	%ecx, -816(%rbp)
	xorl	%edx, %edx
	movzwl	(%rsi), %eax
	cmpw	$96, %ax
	je	.L13166
	cmpw	$98, %ax
	je	.L13166
.L13165:
	movq	-7232(%rbp), %r15
	movq	-7216(%rbp), %r11
	movl	%edx, -768(%rbp)
	xorl	%ecx, %ecx
	movq	%r15, -824(%rbp)
	movq	%r11, -808(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L13169
	cmpw	$99, %dx
	je	.L13169
	cmpw	$98, %dx
	je	.L13169
.L13168:
	movl	-768(%rbp), %eax
	movl	%ecx, -792(%rbp)
	movl	$0, -788(%rbp)
	movl	$0, -812(%rbp)
	testl	%eax, %eax
	je	.L13170
	movq	%r12, -776(%rbp)
.L13170:
	movl	-792(%rbp), %eax
	movq	%r12, -784(%rbp)
	testl	%eax, %eax
	je	.L13172
	movl	-816(%rbp), %eax
	testl	%eax, %eax
	jne	.L13171
.L13172:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L13185:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23511
.L13182:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L13182
.L23511:
	testl	%edi, %edi
	je	.L13175
	movslq	%edi,%rbx
	movq	%rbx, %r10
	salq	$4, %r10
	addq	optab_table+240(%rip), %r10
	cmpl	$1317, 8(%r10)
	je	.L13184
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L13184
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L13184:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L13185
.L13175:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L13171
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23513
.L13193:
	movslq	%ecx,%rbx
	movzbl	mode_size(%rbx), %r11d
	cmpl	%r14d, %r11d
	cmovae	-7236(%rbp), %ecx
	movl	%ecx, -7236(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L13193
.L23513:
	movl	-792(%rbp), %eax
	testl	%eax, %eax
	jne	.L13199
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L13197
	cmpw	$54, %dx
	je	.L13197
	cmpw	$55, %dx
	je	.L13197
	cmpw	$58, %dx
	je	.L13197
	cmpw	$134, %dx
	je	.L13197
	cmpw	$56, %dx
	je	.L13197
	cmpw	$140, %dx
	je	.L13197
.L13199:
	movl	-816(%rbp), %r8d
	testl	%r8d, %r8d
	jne	.L13171
	movq	-7232(%rbp), %r10
	movzwl	(%r10), %edx
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L13201
	cmpw	$54, %dx
	je	.L13201
	cmpw	$55, %dx
	je	.L13201
	cmpw	$58, %dx
	je	.L13201
	cmpw	$134, %dx
	je	.L13201
	cmpw	$56, %dx
	je	.L13201
	cmpw	$140, %dx
	je	.L13201
.L13171:
	cmpl	$1, %r14d
	jbe	.L13204
.L13255:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23516
.L13211:
	movslq	%ecx,%rdi
	movzbl	mode_size(%rdi), %edx
	cmpl	%r14d, %edx
	cmovae	-7236(%rbp), %ecx
	movl	%ecx, -7236(%rbp)
	movzbl	mode_wider_mode(%rdi), %ecx
	testl	%ecx, %ecx
	jne	.L13211
.L23516:
	movl	-7236(%rbp), %r14d
	testl	%r14d, %r14d
	je	.L13204
	movslq	-7236(%rbp),%r15
	movq	%r15, %r12
	salq	$4, %r12
	addq	optab_table+240(%rip), %r12
	movl	8(%r12), %ebx
	cmpl	$1317, %ebx
	je	.L13213
	movl	-7236(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L13213
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%r11
	leaq	-832(%rbp), %r12
	leaq	(%r11,%r11,4), %rbx
	cmpq	%rdx, -784(%rbp)
	movq	$0, -7248(%rbp)
	movq	insn_data+16(,%rbx,8), %rsi
	movq	%rdx, -5984(%rbp)
	movq	%rsi, -3584(%rbp)
	jb	.L13213
	movl	-768(%rbp), %ecx
.L13253:
	testl	%ecx, %ecx
	je	.L13217
	subq	%rdx, 56(%r12)
.L13217:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L13218
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L13219
	movl	-7236(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24701:
	movq	%rax, -7248(%rbp)
.L13218:
	movl	40(%r12), %r8d
	testl	%r8d, %r8d
	je	.L13221
	movq	24(%r12), %rdi
	movl	-7236(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24702:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L26179
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L13227
	movzbl	mode_size(%r15), %r9d
	leal	7(%r9), %edx
	andl	$-8, %edx
.L13228:
	movq	cfun(%rip), %rdi
	andl	$33554432, %esi
	movq	16(%rdi), %rbx
	leaq	8(%rbx), %rdi
	movl	8(%rbx), %ecx
	je	.L13229
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24703:
	leal	(%rax,%rcx), %esi
	movq	%r15, %rcx
	salq	$4, %rcx
	movl	%esi, (%rdi)
	addq	optab_table+384(%rip), %rcx
	movl	8(%rcx), %eax
	cmpl	$1317, %eax
	je	.L13231
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %r11
	movq	insn_data+24(,%r11,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L13232
	movq	%r14, %rdi
	movl	-7236(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L26180
.L13232:
	leaq	(%rbx,%rbx,4), %r8
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r8,8)
.L24704:
	movq	%rax, %rdi
	call	emit_insn
.L13251:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L13252
	movq	-5984(%rbp), %r14
	addq	%r14, 56(%r12)
.L13252:
	movq	48(%r12), %rsi
	movq	-5984(%rbp), %rdx
	subq	-5984(%rbp), %rsi
	cmpq	%rdx, %rsi
	movq	%rsi, 48(%r12)
	jae	.L13253
.L13213:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L13255
.L13204:
	cmpq	$0, -784(%rbp)
	jmp	.L25556
.L26180:
	movl	-7236(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L13232
.L13231:
	movzbl	mode_size(%r15), %r9d
	cmpl	%edx, %r9d
	je	.L26181
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r10b
	movzbl	%r10b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L13239:
	movl	-7236(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%edi, %edi
	testq	%rdi, %rdi
	movq	%rax, %rbx
	je	.L13248
	xorl	%esi, %esi
	movq	%rax, %rdi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %ecx
	testl	%ecx, %ecx
	jne	.L26182
.L13248:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L13251
.L26182:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L13248
.L26181:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L13239
.L13229:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24703
.L13227:
	movzbl	mode_size(%r15), %r10d
	leal	1(%r10), %edx
	andl	$-2, %edx
	jmp	.L13228
.L26179:
	movq	%rax, %rsi
	movq	-7248(%rbp), %rdi
	xorl	%eax, %eax
	call	*-3584(%rbp)
	jmp	.L24704
.L13221:
	movq	24(%r12), %rdi
	movl	-7236(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24702
.L13219:
	movl	-7236(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24701
.L13201:
	movq	-7232(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -824(%rbp)
	jmp	.L13171
.L13197:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -800(%rbp)
	jmp	.L13199
.L13169:
	movl	$1, %ecx
	jmp	.L13168
.L13166:
	movl	$1, %edx
	jmp	.L13165
.L13164:
	movl	$1, %ecx
	jmp	.L13163
.L13158:
	cmpq	$2, %r14
	ja	.L13142
	jmp	.L13159
.L13134:
	movq	-7224(%rbp), %r10
	xorl	%esi, %esi
	movq	8(%r10), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-7224(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-7224(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26183
.L13136:
	movq	-7224(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7224(%rbp)
	movq	%r12, 8(%rax)
	movq	-7224(%rbp), %r14
	movq	%rbx, 16(%r14)
	jmp	.L13129
.L26183:
	cmpq	16(%rcx), %rax
	jne	.L13136
	jmp	.L13129
.L26173:
	cmpb	$51, 2(%rdx)
	je	.L13127
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26184
.L13127:
	cmpl	$66, %eax
	jne	.L13130
	movq	-7224(%rbp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	movq	-7224(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L13129
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -7224(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L13129
.L26184:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L13128
	movq	-7224(%rbp), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -7224(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L13129
.L13128:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24700:
	movq	%rax, -7224(%rbp)
	jmp	.L13129
.L13126:
	movq	-7224(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26185
	movq	-7224(%rbp), %rdi
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L24700
	movq	-7224(%rbp), %r11
	movq	8(%r11), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	-7224(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rcx
	movq	%rcx, -7224(%rbp)
	jmp	.L13129
.L26185:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24700
.L13121:
	movq	-7408(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-7408(%rbp), %r10
	movq	%rax, %r12
	movq	16(%r10), %rdi
	call	protect_from_queue
	movq	-7408(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26186
.L13123:
	movq	-7408(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7216(%rbp)
	movq	%r12, 8(%rax)
	movq	-7216(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L13116
.L26186:
	cmpq	16(%rcx), %rax
	jne	.L13123
	jmp	.L13116
.L26172:
	cmpb	$51, 2(%rdx)
	je	.L13114
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26187
.L13114:
	cmpl	$66, %eax
	jne	.L13117
	movq	-7408(%rbp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	movq	-7408(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L13116
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -7216(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L13116
.L26187:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L13115
	movq	-7408(%rbp), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -7216(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L13116
.L13115:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24699:
	movq	%rax, -7216(%rbp)
	jmp	.L13116
.L13113:
	movq	-7408(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26188
	movq	-7408(%rbp), %rsi
	movq	24(%rsi), %rcx
	testq	%rcx, %rcx
	movq	%rcx, -7216(%rbp)
	jne	.L13116
	movq	-7408(%rbp), %rax
	movq	8(%rax), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	-7408(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r11
	movq	%r11, -7216(%rbp)
	jmp	.L13116
.L26188:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24699
.L13108:
	movq	-7416(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-7416(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L26189
.L13110:
	movq	-7416(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7208(%rbp)
	movq	%r12, 8(%rax)
	movq	-7208(%rbp), %rcx
	movq	%rbx, 16(%rcx)
	jmp	.L13103
.L26189:
	cmpq	16(%rsi), %rax
	jne	.L13110
	jmp	.L13103
.L26171:
	jne	.L13104
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-7416(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L13103
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -7208(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L13103
.L13100:
	testq	%rsi, %rsi
	je	.L26190
	movq	-7416(%rbp), %r8
	movq	24(%r8), %r11
	testq	%r11, %r11
	movq	%r11, -7208(%rbp)
	jne	.L13103
	movq	-7416(%rbp), %r12
	movq	8(%r12), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rax
	movq	%rax, -7208(%rbp)
	jmp	.L13103
.L26190:
	movq	-7416(%rbp), %rsi
	movq	8(%rsi), %rdi
	call	copy_to_reg
	movq	%rax, -7208(%rbp)
	jmp	.L13103
.L13093:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L13089
	movl	32(%rsi), %r15d
	jmp	.L13089
.L13092:
	cmpl	$7, %edx
	ja	.L13088
	jmp	.L13093
.L13077:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L26191
.L13079:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -7416(%rbp)
	movq	%r12, 8(%rax)
	movq	-7416(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L13072
.L26191:
	cmpq	16(%r13), %rax
	jne	.L13079
	jmp	.L13072
.L26104:
	jne	.L13073
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L13072
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -7416(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L13072
.L13069:
	cmpq	$0, 16(%r13)
	je	.L26192
	movq	24(%r13), %rcx
	testq	%rcx, %rcx
	movq	%rcx, -7416(%rbp)
	jne	.L13072
	movq	8(%r13), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r15
	movq	%r15, -7416(%rbp)
	jmp	.L13072
.L26192:
	movq	8(%r13), %rdi
	call	copy_to_reg
	movq	%rax, -7416(%rbp)
	jmp	.L13072
.L26103:
	movq	144(%r14), %rax
	testq	%rax, %rax
	je	.L13064
	cmpq	%rax, %r13
	jne	.L13064
	jmp	.L13062
.L26102:
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L13062
	jmp	.L13063
.L13061:
	movq	-7408(%rbp), %rdx
	cmpb	$0, 2(%rdx)
	jne	.L13060
	cmpb	$0, 16(%r14)
	je	.L13060
	movq	8(%r14), %rdx
	movzbl	2(%r13), %edi
	movzbl	61(%rdx), %r10d
	shrb	$1, %r10b
	movzbl	%r10b, %esi
	cmpl	%esi, %edi
	je	.L13060
	movzbl	17(%rdx), %ecx
	movq	-7408(%rbp), %rdx
	shrb	$5, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, -7408(%rbp)
	jmp	.L13060
.L24328:
	movq	-7408(%rbp), %r11
	movzwl	(%r11), %edx
	jmp	.L12983
.L26101:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	%r14, %rdi
	movzbl	2(%r13), %edx
	movq	%rax, %rsi
	jmp	.L24698
.L13022:
	xorl	%r9d, %r9d
	testl	%r9d, %r9d
	je	.L24329
	movl	(%r13), %ecx
	movl	%ecx, %r10d
	andl	$134283263, %r10d
	cmpl	$66, %r10d
	je	.L26193
.L13038:
	andl	$268500991, %ecx
	cmpl	$268435519, %ecx
	je	.L26194
	movzbl	2(%r13), %edx
	xorl	%ecx, %ecx
	movq	%r14, %rdi
	movq	%r13, %rsi
	call	expand_expr
	cmpw	$61, (%r13)
	movq	%rax, -7408(%rbp)
	je	.L26195
.L13058:
	movl	(%r13), %eax
	andl	$134283263, %eax
	cmpl	$134217794, %eax
	je	.L24332
	movq	-7408(%rbp), %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L24333
	movq	-7408(%rbp), %r15
	movzwl	(%r15), %edx
	leal	-67(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L13059
	cmpw	$54, %dx
	je	.L13059
	cmpw	$55, %dx
	je	.L13059
	cmpw	$58, %dx
	je	.L13059
	cmpw	$134, %dx
	je	.L13059
	cmpw	$56, %dx
	je	.L13059
	cmpw	$140, %dx
	je	.L13059
	xorl	%esi, %esi
	testl	%esi, %esi
	je	.L12983
.L13059:
	movl	$1, -7196(%rbp)
	jmp	.L12983
.L24332:
	movq	-7408(%rbp), %rax
	movzwl	(%rax), %edx
	jmp	.L12983
.L26195:
	cmpl	$52, 8(%r13)
	ja	.L13058
.L24331:
	movq	-7408(%rbp), %r8
	movzwl	(%r8), %edx
	jmp	.L12983
.L26194:
	xorl	%edi, %edi
	xorl	%edx, %edx
	testl	%edi, %edi
.L25614:
	jne	.L17743
	movq	8(%r14), %rsi
	movzbl	16(%rsi), %eax
	cmpb	$6, %al
	je	.L17744
	cmpb	$10, %al
	je	.L17744
	cmpb	$11, %al
	je	.L17744
	cmpb	$12, %al
	je	.L17744
.L17743:
	movq	%rdx, %rsi
	xorl	%ecx, %ecx
	movq	%r14, %rdi
	xorl	%edx, %edx
	call	expand_expr
	movzwl	(%rax), %edx
	movq	%rax, %rbx
	cmpw	$66, %dx
	je	.L26196
.L17746:
	leal	-67(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L17749
	cmpw	$54, %dx
	je	.L17749
	cmpw	$55, %dx
	je	.L17749
	cmpw	$58, %dx
	je	.L17749
	cmpw	$134, %dx
	je	.L17749
	cmpw	$56, %dx
	je	.L17749
	cmpw	$140, %dx
	je	.L17749
.L17748:
	movzbl	3(%r13), %edx
	movq	8(%r13), %rdi
	movq	%rbx, %rsi
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	xorl	%edx, %edx
	testl	%edx, %edx
.L25569:
	je	.L17681
	movzbl	2(%rbx), %edx
	movzbl	2(%r13), %eax
	cmpb	%al, %dl
	je	.L17681
	testb	%dl, %dl
	je	.L17751
	movq	%rbx, %rsi
	movzbl	%al, %edi
	call	gen_lowpart_SUBREG
	movzbl	3(%rax), %ebx
	orb	$16, %bl
	movb	%bl, 3(%rax)
	andb	$-5, %bl
	movzbl	3(%r13), %r15d
	andb	$4, %r15b
	orb	%r15b, %bl
	movb	%bl, 3(%rax)
	jmp	.L17681
.L17751:
	movq	8(%r13), %r12
	movzbl	3(%r13), %ecx
	movzbl	%al, %edi
	movq	%rbx, %rdx
	movzbl	2(%r12), %esi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	jmp	.L17681
.L17749:
	cmpb	$0, 2(%rbx)
	jne	.L17748
	movq	8(%r14), %r9
	movzbl	3(%r13), %ecx
	movq	%rbx, %rdx
	movzbl	2(%r13), %edi
	movzbl	61(%r9), %r11d
	shrb	$2, %cl
	andl	$1, %ecx
	shrb	$1, %r11b
	movzbl	%r11b, %esi
	call	convert_modes
	movzbl	3(%r13), %ecx
	movzbl	2(%r13), %esi
	movq	8(%r13), %r14
	movq	%rax, %rdx
	movzbl	2(%r14), %edi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, %rbx
	jmp	.L17748
.L26196:
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L17746
	testb	$8, 3(%rax)
	jne	.L17747
	movq	8(%r13), %rdi
	movq	8(%rax), %rsi
	call	reg_mentioned_p
	testl	%eax, %eax
	je	.L24385
.L17747:
	movq	%rbx, %rdi
	call	copy_to_reg
	movq	%rax, %rbx
.L24385:
	movzwl	(%rbx), %edx
	jmp	.L17746
.L17744:
	cmpq	$0, 8(%rsi)
	jne	.L17743
	movzbl	3(%r13), %ecx
	movzbl	17(%rsi), %r8d
	movl	$1, %edi
	movl	%ecx, %r10d
	shrb	$5, %r8b
	shrb	$2, %r10b
	andl	$1, %r8d
	andl	%r10d, %edi
	cmpl	%edi, %r8d
	je	.L17745
	call	signed_or_unsigned_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	convert
	movzbl	3(%r13), %ecx
	movq	%rax, %r14
.L17745:
	movq	8(%r13), %rsi
	shrb	$2, %cl
	movzbl	2(%rsi), %edi
	movl	$1, %esi
	andl	%ecx, %esi
	call	type_for_mode
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	convert
	movq	8(%r13), %rdx
	movq	%rax, %r14
	jmp	.L17743
.L26193:
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L13038
	movzbl	%al, %edx
	xorl	%ecx, %ecx
	movq	%r14, %rdi
	movq	%r13, %rsi
	call	expand_expr
	movq	%rax, -7408(%rbp)
	movq	%rax, %rdx
	movzbl	2(%rax), %eax
	cmpb	$51, %al
	je	.L13039
	testb	%al, %al
	je	.L13039
	cmpq	%r13, %rdx
	je	.L13041
	movq	%rdx, %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L26197
.L13040:
	movq	-7408(%rbp), %rdi
	call	copy_to_reg
	movq	%rax, -7408(%rbp)
.L13039:
	movl	$1, -7196(%rbp)
	jmp	.L24331
.L26197:
	movq	-7408(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L13040
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L13040
.L13041:
	movl	$1, %r12d
	jmp	.L13040
.L24329:
	movl	(%r13), %ecx
	jmp	.L13038
.L13031:
	movl	$1, %ebx
	jmp	.L13025
.L13032:
	xorl	%ebx, %ebx
	jmp	.L13025
.L13029:
	movq	8(%r13), %rdi
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L13031
	movq	16(%r13), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L13025
	jmp	.L13031
.L26100:
	cmpb	$51, 2(%r13)
	jne	.L12984
	call	gen_label_rtx
	movq	%rax, %r15
	call	gen_label_rtx
	movq	cfun(%rip), %r11
	movq	%rax, -3576(%rbp)
	movq	16(%r11), %rsi
	movq	40(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L23501
.L12990:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26198
	call	emit_insn
	movq	%rax, 16(%rbx)
.L12989:
	movq	cfun(%rip), %r10
	movq	40(%rbx), %r8
	movq	16(%r10), %r9
	testq	%r8, %r8
	movq	%r8, %rbx
	movq	%r8, 40(%r9)
	jne	.L12990
.L23501:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L12992
	cmpl	$66, %eax
	je	.L26199
.L12996:
	cmpl	$75, %eax
	je	.L13000
	cmpl	$78, %eax
	je	.L13000
.L12995:
	call	do_pending_stack_adjust
	movq	cfun(%rip), %rdx
	movq	%r15, %rsi
	movq	16(%rdx), %r12
	incl	4(%r12)
	movq	32(%r14), %rdi
	call	jumpifnot
	call	start_cleanup_deferral
	movq	-7416(%rbp), %rsi
	movq	40(%r14), %rdi
	xorl	%edx, %edx
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %r11
	movq	16(%r11), %rsi
	movq	40(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L23503
.L13010:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26200
	call	emit_insn
	movq	%rax, 16(%rbx)
.L13009:
	movq	cfun(%rip), %rcx
	movq	40(%rbx), %r10
	movq	16(%rcx), %rdi
	testq	%r10, %r10
	movq	%r10, %rbx
	movq	%r10, 40(%rdi)
	jne	.L13010
.L23503:
	movq	-3576(%rbp), %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r15, %rdi
	call	emit_label
	call	start_cleanup_deferral
	movq	48(%r14), %rdi
	movq	-7416(%rbp), %rsi
	xorl	%edx, %edx
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %r15
	movq	16(%r15), %r14
	movq	40(%r14), %rbx
	testq	%rbx, %rbx
	je	.L23505
.L13017:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26201
	call	emit_insn
	movq	%rax, 16(%rbx)
.L13016:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %r12
	movq	16(%rdx), %r8
	testq	%r12, %r12
	movq	%r12, %rbx
	movq	%r12, 40(%r8)
	jne	.L13017
.L23505:
	movq	-3576(%rbp), %rdi
.L25109:
	call	emit_label
	movq	cfun(%rip), %r11
	movq	16(%r11), %rbx
	decl	4(%rbx)
	jmp	.L17681
.L26201:
	movq	8(%rdi), %r11
	movq	8(%r11), %rsi
	movq	%rsi, 16(%rbx)
	call	emit_insn
	jmp	.L13016
.L26200:
	movq	8(%rdi), %r9
	movq	8(%r9), %r8
	movq	%r8, 16(%rbx)
	call	emit_insn
	jmp	.L13009
.L13000:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L26202
.L13002:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -7416(%rbp)
	movq	%r12, 8(%rax)
	movq	-7416(%rbp), %rax
	movq	%rbx, 16(%rax)
	jmp	.L12995
.L26202:
	cmpq	16(%r13), %rax
	jne	.L13002
	jmp	.L12995
.L26199:
	jne	.L12996
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L12995
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -7416(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L12995
.L12992:
	cmpq	$0, 16(%r13)
	je	.L26203
	movq	24(%r13), %rbx
	testq	%rbx, %rbx
	movq	%rbx, -7416(%rbp)
	jne	.L12995
	movq	8(%r13), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rdi
	movq	%rdi, -7416(%rbp)
	jmp	.L12995
.L26203:
	movq	8(%r13), %rdi
	call	copy_to_reg
	movq	%rax, -7416(%rbp)
	jmp	.L12995
.L26198:
	movq	8(%rdi), %rdx
	movq	8(%rdx), %r12
	movq	%r12, 16(%rbx)
	call	emit_insn
	jmp	.L12989
.L26099:
	movq	32(%r14), %rdi
	movq	const_int_rtx+512(%rip), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	cfun(%rip), %rbx
	movq	16(%rbx), %r8
	movq	40(%r8), %rbx
	testq	%rbx, %rbx
	je	.L23852
.L12980:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26204
	call	emit_insn
	movq	%rax, 16(%rbx)
.L12979:
	movq	cfun(%rip), %rdi
	movq	40(%rbx), %rcx
	movq	16(%rdi), %r15
	testq	%rcx, %rcx
	movq	%rcx, %rbx
	movq	%rcx, 40(%r15)
	jne	.L12980
.L23852:
	movq	40(%r14), %rdi
	movq	%r13, %rsi
	xorl	%edx, %edx
	call	store_expr
	jmp	.L17681
.L26204:
	movq	8(%rdi), %r10
	movq	8(%r10), %r9
	movq	%r9, 16(%rbx)
	call	emit_insn
	jmp	.L12979
	.p2align 6,,7
.L12973:
	movq	-2712(%rbp), %rdi
	movq	%r13, %rsi
	xorl	%r12d, %r12d
	call	make_tree
	movq	-2712(%rbp), %rsi
	movq	-6912(%rbp), %r8
	movq	%rax, %rdx
	movzbl	16(%r8), %edi
	call	build1
	movl	$0, -7420(%rbp)
	movq	%r13, -7640(%rbp)
	movq	%rax, %r14
	movzbl	16(%rax), %eax
	cmpb	$47, %al
	je	.L26205
	cmpb	$51, %al
	je	.L26206
.L13891:
	movzwl	(%r13), %eax
	subl	$66, %eax
	cmpl	$12, %eax
	ja	.L13939
	mov	%eax, %ebx
	jmp	*.L13940(,%rbx,8)
	.section	.rodata
	.align 8
	.align 4
.L13940:
	.quad	.L13933
	.quad	.L13939
	.quad	.L13939
	.quad	.L13939
	.quad	.L13939
	.quad	.L13938
	.quad	.L13939
	.quad	.L13939
	.quad	.L13939
	.quad	.L13936
	.quad	.L13936
	.quad	.L13939
	.quad	.L13936
	.text
.L13933:
	movq	8(%r13), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L13932:
	testl	%ebx, %ebx
	je	.L13929
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L13941
	testb	%al, %al
	jne	.L26207
.L13941:
	movzbl	2(%r13), %edx
	movq	%r14, %rdi
	xorl	%esi, %esi
.L24730:
	xorl	%ecx, %ecx
	call	expand_expr
	testb	$8, 3(%r13)
	movq	%rax, -7632(%rbp)
	jne	.L24344
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L24339
	movl	$1, -7420(%rbp)
.L24339:
	movq	-7632(%rbp), %r15
	movzwl	(%r15), %edx
.L13890:
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L13968
	cmpw	$54, %dx
	je	.L13968
	cmpw	$55, %dx
	je	.L13968
	cmpw	$58, %dx
	je	.L13968
	cmpw	$134, %dx
	je	.L13968
	cmpw	$56, %dx
	je	.L13968
	cmpw	$140, %dx
	je	.L13968
.L13967:
	movq	-7632(%rbp), %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	je	.L13970
	cmpq	%r13, -7632(%rbp)
	je	.L13969
	movq	-7632(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L26208
.L13970:
	movzbl	16(%r14), %eax
	testb	%al, %al
	je	.L13969
	testl	%r12d, %r12d
	jne	.L13969
	movzbl	%al, %r12d 
	cmpb	$100, tree_code_type(%r12)
	je	.L26209
.L13971:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L13976
	cmpl	$66, %eax
	je	.L26210
.L13980:
	cmpl	$75, %eax
	je	.L13984
	cmpl	$78, %eax
	je	.L13984
.L13979:
	movq	-7632(%rbp), %rbx
	movq	-7640(%rbp), %r15
	movzbl	2(%rbx), %eax
	movzbl	2(%r15), %ecx
	cmpb	%cl, %al
	je	.L13989
	testb	%al, %al
	je	.L13989
	movq	8(%r14), %rdi
	movl	-7420(%rbp), %r14d
	movzbl	17(%rdi), %esi
	shrb	$5, %sil
	movl	%esi, %edx
	andl	$1, %edx
	testl	%r14d, %r14d
	je	.L13990
	movzbl	%cl, %edi
	movq	%rbx, %rsi
	call	convert_to_mode
	movq	-7640(%rbp), %rdi
	movq	%rax, %rsi
	movq	%rax, -7632(%rbp)
.L24761:
	call	emit_move_insn
.L13969:
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L17681
	movl	-7420(%rbp), %eax
	testl	%eax, %eax
	je	.L14782
	movq	-7632(%rbp), %r15
	cmpw	$66, (%r15)
	jne	.L17681
.L14782:
	movq	-7640(%rbp), %rax
	cmpb	$51, 2(%rax)
	je	.L17681
	cmpw	$61, (%rax)
	je	.L26211
.L14785:
	movq	-7640(%rbp), %rdi
	jmp	.L25110
.L26211:
	cmpl	$52, 8(%rax)
	jbe	.L17681
	jmp	.L14785
.L13990:
	movq	-7640(%rbp), %rdi
	movq	-7632(%rbp), %rsi
	call	convert_move
	jmp	.L13969
.L13989:
	cmpb	$51, %al
	je	.L26212
.L13993:
	movq	-7640(%rbp), %r9
	cmpw	$39, (%r9)
	je	.L26213
	cmpb	$51, %al
	je	.L26214
	movq	-7640(%rbp), %rdi
	movq	-7632(%rbp), %rsi
	jmp	.L24761
.L26214:
	movq	-7632(%rbp), %rcx
	movq	-7640(%rbp), %r9
	movq	%r14, %rdi
	movq	%rcx, -7600(%rbp)
	movq	%r9, -7592(%rbp)
	call	expr_size
	movq	-7640(%rbp), %rdi
	movq	%rax, %r14
	movl	$8, %edx
	movq	16(%rdi), %rcx
	testq	%rcx, %rcx
	je	.L14584
	movl	32(%rcx), %edx
.L14584:
	movq	-7632(%rbp), %r10
	movq	16(%r10), %rax
	testq	%rax, %rax
	je	.L14585
	cmpl	32(%rax), %edx
	jb	.L14586
.L14581:
	testq	%rax, %rax
	movl	$8, -7580(%rbp)
	je	.L14582
	movl	32(%rax), %eax
.L24752:
	movl	%eax, -7580(%rbp)
.L14582:
	movq	-7640(%rbp), %r11
	cmpb	$51, 2(%r11)
	jne	.L25547
	movq	-7632(%rbp), %r8
	cmpb	$51, 2(%r8)
	jne	.L25546
	movq	-7640(%rbp), %rsi
	movzwl	(%rsi), %eax
	cmpl	$71, %eax
	je	.L14593
	cmpl	$66, %eax
	je	.L26215
.L14597:
	cmpl	$75, %eax
	je	.L14601
	cmpl	$78, %eax
	je	.L14601
.L14596:
	movq	-7632(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L14606
	cmpl	$66, %eax
	je	.L26216
.L14610:
	cmpl	$75, %eax
	je	.L14614
	cmpl	$78, %eax
	je	.L14614
.L14609:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L14619
	cmpl	$66, %eax
	je	.L26217
.L14623:
	cmpl	$75, %eax
	je	.L14627
	cmpl	$78, %eax
	je	.L14627
.L14622:
	movq	-7592(%rbp), %r9
	cmpw	$66, (%r9)
	jne	.L25545
	movq	-7600(%rbp), %r10
	cmpw	$66, (%r10)
	jne	.L25544
	testq	%r14, %r14
	je	.L25543
	cmpw	$54, (%r14)
	je	.L26218
.L14635:
	shrl	$3, -7580(%rbp)
	xorl	%edi, %edi
	mov	-7580(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -3928(%rbp)
	testl	%r12d, %r12d
	je	.L23635
.L14768:
	movslq	%r12d,%rsi
	movl	movstr_optab(,%rsi,4), %edx
	movq	%rsi, -3936(%rbp)
	cmpl	$1317, %edx
	je	.L14754
	cmpw	$54, (%r14)
	je	.L26219
.L14758:
	testb	$2, target_flags+3(%rip)
	je	.L14759
	movq	-3936(%rbp), %rdi
	cmpw	$63, mode_bitsize(%rdi,%rdi)
.L24759:
	jbe	.L14754
.L14757:
	movslq	%edx,%rax
	leaq	(%rax,%rax,4), %rbx
	movq	%rax, -3944(%rbp)
	movq	insn_data+24(,%rbx,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L14761
	movq	-7592(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L14754
.L14761:
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L26220
.L14762:
	movq	72(%r15), %rax
	testq	%rax, %rax
	je	.L14763
	xorl	%esi, %esi
	movq	-3928(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L14754
.L14763:
	call	get_last_insn
	movl	$1, %edx
	movq	%r14, %rsi
	movl	%r12d, %edi
	movq	%rax, -3952(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r15), %rax
	testq	%rax, %rax
	jne	.L26221
.L14764:
	movq	-3944(%rbp), %rdx
	movq	-7592(%rbp), %rdi
	xorl	%eax, %eax
	movq	-7600(%rbp), %rsi
	movq	-3928(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24496
	movq	-3952(%rbp), %rdi
	call	delete_insns_since
.L14754:
	movq	-3936(%rbp), %r8
	movzbl	mode_wider_mode(%r8), %r12d
	testl	%r12d, %r12d
	jne	.L14768
.L23635:
	testb	$2, target_flags+3(%rip)
	movq	-7592(%rbp), %r15
	movl	$0, volatile_ok(%rip)
	setne	%r11b
	movq	8(%r15), %rsi
	movzbl	%r11b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-7600(%rbp), %r10
	testb	$2, target_flags+3(%rip)
	setne	%sil
	movq	%rax, %r15
	movzbl	%sil, %edi
	movq	8(%r10), %rsi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%r14, %rsi
	movq	sizetype_tab(%rip), %rcx
	movq	%rax, %rbx
	movzbl	61(%rcx), %r9d
	shrb	$1, %r9b
	movzbl	%r9b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r14
	je	.L26222
.L14777:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r15, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r14, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %r9
	movq	%rax, (%rbx)
	movq	(%r12), %r10
	movq	8(%r9), %rdi
	movq	(%r10), %rcx
	movq	$0, (%rcx)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %rbx
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%rbx), %r14
	movq	8(%r14), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r15)
	je	.L13969
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r15, %rdx
.L24760:
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L13969
.L26222:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r8
	xorl	%esi, %esi
	orb	$1, 49(%r8)
	movq	fn.1(%rip), %rdx
	orb	$8, 18(%rdx)
	movq	fn.1(%rip), %r12
	orb	$64, 50(%r12)
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L14777
.L24496:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L13969
.L26221:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L14764
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L14764
.L26220:
	movq	-7600(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L14754
	jmp	.L14762
.L14759:
	movq	-3936(%rbp), %r11
	cmpw	$31, mode_bitsize(%r11,%r11)
	jmp	.L24759
.L26219:
	movq	mode_mask_array(,%rsi,8), %r15
	shrq	$1, %r15
	cmpq	%r15, 8(%r14)
	jbe	.L14757
	jmp	.L14758
.L26218:
	movq	8(%r14), %r12
	xorl	%r15d, %r15d
	movl	$17, %esi
.L14648:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23624
.L14645:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %r8
	cmpq	%rsi, %r8
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L14645
.L23624:
	testl	%edi, %edi
	je	.L14638
	movslq	%edi,%rbx
	movq	%rbx, %rdx
	salq	$4, %rdx
	addq	optab_table+240(%rip), %rdx
	cmpl	$1317, 8(%rdx)
	je	.L14647
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L14647
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L14647:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L14648
.L14638:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L14651
	movq	ix86_cost(%rip), %r9
	mov	40(%r9), %ebx
	cmpq	%rbx, %r15
	jae	.L14635
.L14652:
	movq	-7600(%rbp), %rsi
	testb	$2, target_flags+3(%rip)
	movq	-7592(%rbp), %rcx
	movq	8(%r14), %r12
	setne	%r14b
	movq	-7592(%rbp), %rdi
	movq	8(%rsi), %r8
	movq	$0, -1016(%rbp)
	movl	$0, -7612(%rbp)
	movq	%r8, -1040(%rbp)
	movzbl	%r14b, %edx
	movq	8(%rcx), %r11
	leal	5(,%rdx,4), %r14d
	movq	%rdi, -1072(%rbp)
	xorl	%ecx, %ecx
	movzwl	(%r11), %edx
	movq	%r11, -7608(%rbp)
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L14657
	cmpw	$99, %dx
	je	.L14657
	cmpw	$98, %dx
	je	.L14657
.L14656:
	movq	-7608(%rbp), %rbx
	movl	%ecx, -1056(%rbp)
	xorl	%edx, %edx
	movzwl	(%rbx), %eax
	cmpw	$96, %ax
	je	.L14659
	cmpw	$98, %ax
	je	.L14659
.L14658:
	movq	-7608(%rbp), %r15
	movq	-7600(%rbp), %rax
	movl	%edx, -1008(%rbp)
	xorl	%ecx, %ecx
	movq	%r15, -1064(%rbp)
	movq	%rax, -1048(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L14662
	cmpw	$99, %dx
	je	.L14662
	cmpw	$98, %dx
	je	.L14662
.L14661:
	movl	-1008(%rbp), %r10d
	movl	%ecx, -1032(%rbp)
	movl	$0, -1028(%rbp)
	movl	$0, -1052(%rbp)
	testl	%r10d, %r10d
	je	.L14663
	movq	%r12, -1016(%rbp)
.L14663:
	movl	-1032(%rbp), %edi
	movq	%r12, -1024(%rbp)
	testl	%edi, %edi
	je	.L14665
	movl	-1056(%rbp), %r11d
	testl	%r11d, %r11d
	jne	.L14664
.L14665:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L14678:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23627
.L14675:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L14675
.L23627:
	testl	%edi, %edi
	je	.L14668
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L14677
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L14677
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L14677:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L14678
.L14668:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L14664
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23629
.L14686:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %r10d
	cmpl	%r14d, %r10d
	cmovae	-7612(%rbp), %ecx
	movl	%ecx, -7612(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L14686
.L23629:
	movl	-1032(%rbp), %eax
	testl	%eax, %eax
	jne	.L14692
	movzwl	(%r8), %edx
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L14690
	cmpw	$54, %dx
	je	.L14690
	cmpw	$55, %dx
	je	.L14690
	cmpw	$58, %dx
	je	.L14690
	cmpw	$134, %dx
	je	.L14690
	cmpw	$56, %dx
	je	.L14690
	cmpw	$140, %dx
	je	.L14690
.L14692:
	movl	-1056(%rbp), %r11d
	testl	%r11d, %r11d
	jne	.L14664
	movq	-7608(%rbp), %rcx
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L14694
	cmpw	$54, %dx
	je	.L14694
	cmpw	$55, %dx
	je	.L14694
	cmpw	$58, %dx
	je	.L14694
	cmpw	$134, %dx
	je	.L14694
	cmpw	$56, %dx
	je	.L14694
	cmpw	$140, %dx
	je	.L14694
.L14664:
	cmpl	$1, %r14d
	jbe	.L14697
.L14748:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23632
.L14704:
	movslq	%ecx,%r8
	movzbl	mode_size(%r8), %edx
	cmpl	%r14d, %edx
	cmovae	-7612(%rbp), %ecx
	movl	%ecx, -7612(%rbp)
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L14704
.L23632:
	movl	-7612(%rbp), %r14d
	testl	%r14d, %r14d
	je	.L14697
	movslq	-7612(%rbp),%r15
	movq	%r15, %r12
	salq	$4, %r12
	addq	optab_table+240(%rip), %r12
	movl	8(%r12), %ebx
	cmpl	$1317, %ebx
	je	.L14706
	movl	-7612(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r9d
	cmpl	%eax, %r9d
	jb	.L14706
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rdi
	leaq	-1072(%rbp), %r12
	leaq	(%rdi,%rdi,4), %r10
	cmpq	%rdx, -1024(%rbp)
	movq	$0, -7624(%rbp)
	movq	insn_data+16(,%r10,8), %rsi
	movq	%rdx, -6024(%rbp)
	movq	%rsi, -3920(%rbp)
	jb	.L14706
	movl	-1008(%rbp), %ecx
.L14746:
	testl	%ecx, %ecx
	je	.L14710
	subq	%rdx, 56(%r12)
.L14710:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L14711
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L14712
	movl	-7612(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24755:
	movq	%rax, -7624(%rbp)
.L14711:
	movl	40(%r12), %r11d
	testl	%r11d, %r11d
	je	.L14714
	movq	24(%r12), %rdi
	movl	-7612(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24756:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L26223
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L14720
	movzbl	mode_size(%r15), %ebx
	leal	7(%rbx), %edx
	andl	$-8, %edx
.L14721:
	movq	cfun(%rip), %r9
	andl	$33554432, %esi
	movq	16(%r9), %r8
	leaq	8(%r8), %rdi
	movl	8(%r8), %ecx
	je	.L14722
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24757:
	movq	%r15, %rsi
	leal	(%rax,%rcx), %r10d
	salq	$4, %rsi
	movl	%r10d, (%rdi)
	addq	optab_table+384(%rip), %rsi
	movl	8(%rsi), %eax
	cmpl	$1317, %eax
	je	.L14724
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rdi
	movq	insn_data+24(,%rdi,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L14725
	movq	%r14, %rdi
	movl	-7612(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L26224
.L14725:
	leaq	(%rbx,%rbx,4), %r11
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r11,8)
.L24758:
	movq	%rax, %rdi
	call	emit_insn
.L14744:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L14745
	movq	-6024(%rbp), %r14
	addq	%r14, 56(%r12)
.L14745:
	movq	48(%r12), %r10
	movq	-6024(%rbp), %rdx
	subq	-6024(%rbp), %r10
	cmpq	%rdx, %r10
	movq	%r10, 48(%r12)
	jae	.L14746
.L14706:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L14748
.L14697:
	cmpq	$0, -1024(%rbp)
.L25555:
	je	.L13969
	jmp	.L25518
.L26224:
	movl	-7612(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L14725
.L14724:
	movzbl	mode_size(%r15), %ebx
	cmpl	%edx, %ebx
	je	.L26225
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r9b
	movzbl	%r9b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r8b
	movzbl	%r8b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L14732:
	movl	-7612(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%ecx, %ecx
	testq	%rcx, %rcx
	movq	%rax, %rbx
	je	.L14741
	xorl	%esi, %esi
	movq	%rax, %rdi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %esi
	testl	%esi, %esi
	jne	.L26226
.L14741:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L14744
.L26226:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L14741
.L26225:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L14732
.L14722:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24757
.L14720:
	movzbl	mode_size(%r15), %ecx
	leal	1(%rcx), %edx
	andl	$-2, %edx
	jmp	.L14721
.L26223:
	movq	%rax, %rsi
	movq	-7624(%rbp), %rdi
	xorl	%eax, %eax
	call	*-3920(%rbp)
	jmp	.L24758
.L14714:
	movq	24(%r12), %rdi
	movl	-7612(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24756
.L14712:
	movl	-7612(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24755
.L14694:
	movq	-7608(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -1064(%rbp)
	jmp	.L14664
.L14690:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -1040(%rbp)
	jmp	.L14692
.L14662:
	movl	$1, %ecx
	jmp	.L14661
.L14659:
	movl	$1, %edx
	jmp	.L14658
.L14657:
	movl	$1, %ecx
	jmp	.L14656
.L14651:
	cmpq	$2, %r15
	ja	.L14635
	jmp	.L14652
.L14627:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L26227
.L14629:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L14622
.L26227:
	cmpq	16(%r14), %rax
	jne	.L14629
	jmp	.L14622
.L26217:
	cmpb	$51, 2(%r14)
	je	.L14620
	movq	8(%r14), %r12
	cmpw	$71, (%r12)
	je	.L26228
.L14620:
	cmpl	$66, %eax
	jne	.L14623
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L14622
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%rbx, 8(%rax)
	jmp	.L14622
.L26228:
	movq	8(%r12), %rsi
	movq	%r14, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L14621
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L14622
.L14621:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24754:
	movq	%rax, %r14
	jmp	.L14622
.L14619:
	cmpq	$0, 16(%r14)
	je	.L26229
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L24754
	movq	8(%r14), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L14622
.L26229:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L24754
.L14614:
	movq	-7632(%rbp), %r8
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-7632(%rbp), %r11
	movq	%rax, %r12
	movq	16(%r11), %rdi
	call	protect_from_queue
	movq	-7632(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26230
.L14616:
	movq	-7632(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7600(%rbp)
	movq	%r12, 8(%rax)
	movq	-7600(%rbp), %rdx
	movq	%rbx, 16(%rdx)
	jmp	.L14609
.L26230:
	cmpq	16(%rcx), %rax
	jne	.L14616
	jmp	.L14609
.L26216:
	cmpb	$51, 2(%rdx)
	je	.L14607
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26231
.L14607:
	cmpl	$66, %eax
	jne	.L14610
	movq	-7632(%rbp), %r10
	xorl	%esi, %esi
	movq	8(%r10), %rdi
	call	protect_from_queue
	movq	-7632(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L14609
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -7600(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L14609
.L26231:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L14608
	movq	-7632(%rbp), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -7600(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L14609
.L14608:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24753:
	movq	%rax, -7600(%rbp)
	jmp	.L14609
.L14606:
	movq	-7632(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26232
	movq	-7632(%rbp), %rax
	movq	24(%rax), %r15
	testq	%r15, %r15
	movq	%r15, -7600(%rbp)
	jne	.L14609
	movq	-7632(%rbp), %rsi
	movq	8(%rsi), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	-7632(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdi
	movq	%rdi, -7600(%rbp)
	jmp	.L14609
.L26232:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24753
.L14601:
	movq	-7640(%rbp), %r12
	xorl	%esi, %esi
	movq	8(%r12), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-7640(%rbp), %rdx
	movq	%rax, %r12
	movq	16(%rdx), %rdi
	call	protect_from_queue
	movq	-7640(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L26233
.L14603:
	movq	-7640(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7592(%rbp)
	movq	%r12, 8(%rax)
	movq	-7592(%rbp), %r15
	movq	%rbx, 16(%r15)
	jmp	.L14596
.L26233:
	cmpq	16(%rsi), %rax
	jne	.L14603
	jmp	.L14596
.L26215:
	jne	.L14597
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, %rbx
	movq	-7640(%rbp), %rax
	cmpq	8(%rax), %rbx
	je	.L14596
	movq	%rax, %rdi
	call	copy_rtx
	movq	%rax, -7592(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L14596
.L14593:
	testq	%rcx, %rcx
	je	.L26234
	movq	-7640(%rbp), %rsi
	movq	24(%rsi), %rbx
	testq	%rbx, %rbx
	movq	%rbx, -7592(%rbp)
	jne	.L14596
	movq	-7640(%rbp), %r12
	movq	8(%r12), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdi
	movq	%rdi, -7592(%rbp)
	jmp	.L14596
.L26234:
	movq	-7640(%rbp), %rax
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rax, -7592(%rbp)
	jmp	.L14596
.L14586:
	testq	%rcx, %rcx
	movl	$8, -7580(%rbp)
	je	.L14582
	movl	32(%rcx), %eax
	jmp	.L24752
.L14585:
	cmpl	$7, %edx
	ja	.L14581
	jmp	.L14586
.L26213:
	movq	8(%r14), %rdi
	call	int_size_in_bytes
	movl	%eax, -3884(%rbp)
	movq	-7640(%rbp), %rax
	cmpw	$39, (%rax)
	jne	.L25561
	movq	-7640(%rbp), %rdx
	movq	8(%rdx), %rcx
	movq	8(%rcx), %r15
	movl	(%rcx), %r14d
	cmpq	$0, 8(%r15)
	movslq	%r14d,%r12
	sete	%r8b
	leaq	15(,%r12,8), %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	leaq	32(%rsp), %r10
	movzbl	%r8b, %r11d
	movq	%r10, -3896(%rbp)
	movl	%r11d, -7576(%rbp)
	movl	-7576(%rbp), %eax
	cmpl	%r14d, %eax
	movl	%eax, -7568(%rbp)
	jge	.L23618
.L14565:
	movslq	-7568(%rbp),%rax
	movq	8(%rcx,%rax,8), %rdi
	movq	%rax, -3904(%rbp)
	movl	-3884(%rbp), %eax
	movq	8(%rdi), %r9
	movq	16(%rdi), %rcx
	testl	%eax, %eax
	movzbl	2(%r9), %r14d
	movq	8(%rcx), %r15
	movslq	%r14d,%rsi
	movzbl	mode_size(%rsi), %ebx
	movq	%rsi, -3912(%rbp)
	movl	%ebx, -7572(%rbp)
	js	.L14538
	movslq	-3884(%rbp),%r10
	mov	%ebx, %r12d
	leaq	(%r12,%r15), %rbx
	cmpq	%r10, %rbx
	jle	.L14538
	movl	-3884(%rbp), %r11d
	subl	%r15d, %r11d
	movl	%r11d, -7572(%rbp)
	je	.L25560
.L14538:
	movq	-7632(%rbp), %r12
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L24535
	leal	-67(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L14542
	cmpw	$54, %dx
	je	.L14542
	cmpw	$55, %dx
	je	.L14542
	cmpw	$58, %dx
	je	.L14542
	cmpw	$134, %dx
	je	.L14542
	cmpw	$56, %dx
	je	.L14542
	cmpw	$140, %dx
	je	.L14542
.L14541:
	movq	-7632(%rbp), %rcx
	movl	%r14d, %edi
	movzbl	2(%rcx), %eax
	testb	%al, %al
	je	.L24750
	movzbl	%al, %edi
.L24750:
	call	gen_reg_rtx
	movq	-7632(%rbp), %rsi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	emit_move_insn
	movzwl	(%r12), %edx
.L14540:
	cmpw	$66, %dx
	je	.L24535
.L14545:
	cmpw	$65, %dx
	je	.L26235
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L14562
	cmpw	$54, %dx
	je	.L14562
	cmpw	$55, %dx
	je	.L14562
	cmpw	$58, %dx
	je	.L14562
	cmpw	$134, %dx
	je	.L14562
	cmpw	$56, %dx
	je	.L14562
	cmpw	$140, %dx
	je	.L14562
	cmpw	$61, %dx
	je	.L26236
.L14561:
	movl	-7572(%rbp), %edx
	movslq	-3884(%rbp),%r11
	movq	%r12, %rdi
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r14d, %r9d
	movl	%r14d, (%rsp)
	sall	$3, %edx
	mov	%edx, %esi
	movq	%r11, 8(%rsp)
	leaq	0(,%r15,8), %rdx
	call	extract_bit_field
.L24751:
	movq	-3904(%rbp), %r12
	movq	-3896(%rbp), %r8
	movq	%rax, (%r8,%r12,8)
.L14536:
	movq	-7640(%rbp), %rdi
	incl	-7568(%rbp)
	movl	-7568(%rbp), %eax
	movq	8(%rdi), %rcx
	cmpl	(%rcx), %eax
	jl	.L14565
.L23618:
	movq	cfun(%rip), %rbx
	movq	16(%rbx), %r15
	movq	40(%r15), %rbx
	testq	%rbx, %rbx
	je	.L23620
.L14571:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26237
	call	emit_insn
	movq	%rax, 16(%rbx)
.L14570:
	movq	cfun(%rip), %r10
	movq	40(%rbx), %r9
	movq	16(%r10), %r14
	testq	%r9, %r9
	movq	%r9, %rbx
	movq	%r9, 40(%r14)
	jne	.L14571
	movq	-7640(%rbp), %r11
	movq	8(%r11), %rcx
.L23620:
	movl	-7576(%rbp), %r8d
	cmpl	(%rcx), %r8d
	jge	.L13969
.L14577:
	movslq	-7576(%rbp),%rbx
	movq	-3896(%rbp), %r15
	salq	$3, %rbx
	movq	8(%rbx,%rcx), %rsi
	movq	8(%rsi), %rdi
	movq	(%r15,%rbx), %rsi
	call	emit_move_insn
	movq	-7640(%rbp), %rax
	incl	-7576(%rbp)
	movl	-7576(%rbp), %edx
	movq	8(%rax), %r12
	cmpl	(%r12), %edx
	movq	%r12, %rcx
	jl	.L14577
	jmp	.L13969
.L26237:
	movq	8(%rdi), %rsi
	movq	8(%rsi), %rcx
	movq	%rcx, 16(%rbx)
	call	emit_insn
	jmp	.L14570
.L26236:
	movzbl	2(%r12), %r9d
	cmpl	%r14d, %r9d
	jne	.L14561
.L14562:
	movq	-3904(%rbp), %r10
	movq	-3896(%rbp), %r14
	movq	%r12, (%r14,%r10,8)
	jmp	.L14536
.L26235:
	testq	%r15, %r15
	jne	.L24348
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %rsi
	movzbl	mode_size(%rsi), %ebx
	cmpl	%ebx, -7572(%rbp)
	je	.L14551
.L14552:
	movzbq	2(%rdx), %rcx
	movzbq	mode_size(%rcx), %rdi
	cmpq	%rdi, %r15
	je	.L26238
.L14550:
	testq	%r15, %r15
	jne	.L22779
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbx
	movzbq	mode_size(%rbx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %r15
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r15, %rdi
	movl	%r14d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	jmp	.L24751
.L26238:
	movq	16(%r12), %rdx
	movzbq	2(%rdx), %r10
	movzbl	mode_size(%r10), %r9d
	cmpl	%r9d, -7572(%rbp)
	jne	.L14550
.L14551:
	xorl	%r11d, %r11d
	movq	-3904(%rbp), %r8
	movq	-3896(%rbp), %rax
	testq	%r15, %r15
	setne	%r11b
	leaq	(%rax,%r8,8), %rbx
	movq	8(%r12,%r11,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L14536
	cmpw	$54, %dx
	je	.L14536
	cmpw	$55, %dx
	je	.L14536
	cmpw	$58, %dx
	je	.L14536
	cmpw	$134, %dx
	je	.L14536
	cmpw	$56, %dx
	je	.L14536
	cmpw	$140, %dx
	je	.L14536
	cmpw	$61, %dx
	je	.L26239
.L14556:
	movslq	-3884(%rbp),%rdi
	movl	-7572(%rbp), %ecx
	movl	%r14d, (%rsp)
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	movl	%r14d, %r9d
	sall	$3, %ecx
	movq	%rdi, 8(%rsp)
	mov	%ecx, %esi
	movq	(%rbx), %rdi
	movl	$1, %ecx
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L14536
.L26239:
	movzbl	2(%rcx), %r12d
	cmpl	%r14d, %r12d
	jne	.L14556
	jmp	.L14536
.L24348:
	movq	8(%r12), %rdx
	jmp	.L14552
.L24535:
	movl	%r14d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L14546
	cmpl	%eax, 32(%rdx)
	jae	.L14547
.L24347:
	movzwl	(%r12), %edx
	jmp	.L14545
.L14547:
	movl	%r14d, %edi
	leaq	0(,%r15,8), %rbx
	call	get_mode_alignment
	mov	%eax, %r10d
	movq	%rbx, %rax
	cqto
	idivq	%r10
	testq	%rdx, %rdx
	jne	.L24347
	movq	-3912(%rbp), %rax
	movzbl	mode_size(%rax), %edx
	cmpl	%edx, -7572(%rbp)
	jne	.L24347
	movl	%r14d, %edi
	call	gen_reg_rtx
	movl	$1, %ecx
	movq	%r15, %rdx
	movq	-3904(%rbp), %r8
	movq	-3896(%rbp), %r11
	movq	%r12, %rdi
	movl	%r14d, %esi
	leaq	(%r11,%r8,8), %rbx
	movl	$1, %r8d
	movq	%rax, (%rbx)
	call	adjust_address_1
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L14536
.L14546:
	cmpl	$8, %eax
	ja	.L24347
	jmp	.L14547
.L14542:
	movq	-7632(%rbp), %rdi
	movzbl	2(%rdi), %ecx
	movzbl	%cl, %esi
	cmpl	%r14d, %esi
	je	.L14540
	testb	%cl, %cl
	je	.L14540
	jmp	.L14541
.L26212:
	cmpb	$29, 16(%r14)
	jne	.L13993
	movq	%r14, %rdi
	call	expr_size
	cmpw	$54, (%rax)
	movq	%rax, -7448(%rbp)
	je	.L26240
.L13994:
	movq	sizetype_tab(%rip), %rdi
	movq	-7448(%rbp), %rsi
	call	make_tree
	xorl	%esi, %esi
	movslq	32(%r14),%rdi
	movq	%rax, %r12
	call	size_int_wide
	movq	%r12, %rsi
	movl	$78, %edi
	movq	%rax, %rdx
	call	size_binop
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	movq	%rax, -3808(%rbp)
	call	expand_expr
	xorl	%edx, %edx
	movl	ptr_mode(%rip), %edi
	movq	%rax, %rsi
	movq	$0, -7536(%rbp)
	call	convert_to_mode
	movl	$8, %edx
	movq	-7632(%rbp), %r11
	movq	-7640(%rbp), %r14
	movq	%rax, -7480(%rbp)
	movq	%rax, -7504(%rbp)
	movq	%r11, -7496(%rbp)
	movq	%r14, -7488(%rbp)
	movq	16(%r14), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L14197
	movl	32(%rax), %edx
.L14197:
	movq	-7632(%rbp), %r8
	movq	16(%r8), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L14198
	cmpl	32(%rax), %edx
	jb	.L14199
.L14194:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L14195
	movl	32(%rcx), %r15d
.L14195:
	movq	-7640(%rbp), %rax
	cmpb	$51, 2(%rax)
	jne	.L25547
	movq	-7632(%rbp), %rcx
	cmpb	$51, 2(%rcx)
	jne	.L25546
	movq	-7640(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L14206
	cmpl	$66, %eax
	je	.L26241
.L14210:
	cmpl	$75, %eax
	je	.L14214
	cmpl	$78, %eax
	je	.L14214
.L14209:
	movq	-7632(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L14219
	cmpl	$66, %eax
	je	.L26242
.L14223:
	cmpl	$75, %eax
	je	.L14227
	cmpl	$78, %eax
	je	.L14227
.L14222:
	movq	-7480(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L14232
	cmpl	$66, %eax
	je	.L26243
.L14236:
	cmpl	$75, %eax
	je	.L14240
	cmpl	$78, %eax
	je	.L14240
.L14235:
	movq	-7488(%rbp), %r10
	cmpw	$66, (%r10)
	jne	.L25545
	movq	-7496(%rbp), %r11
	cmpw	$66, (%r11)
	jne	.L25544
	cmpq	$0, -7504(%rbp)
	je	.L25543
	movq	-7504(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L26244
.L14248:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -3824(%rbp)
	testl	%r12d, %r12d
	je	.L23602
.L14381:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L14367
	movq	-7504(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L26245
.L14371:
	testb	$2, target_flags+3(%rip)
	je	.L14372
	cmpw	$63, mode_bitsize(%r15,%r15)
.L24744:
	jbe	.L14367
.L14370:
	movslq	%edx,%r9
	leaq	(%r9,%r9,4), %r8
	movq	%r9, -3832(%rbp)
	movq	insn_data+24(,%r8,8), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L14374
	movq	-7488(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L14367
.L14374:
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L26246
.L14375:
	movq	72(%r14), %rax
	testq	%rax, %rax
	je	.L14376
	xorl	%esi, %esi
	movq	-3824(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L14367
.L14376:
	call	get_last_insn
	movl	$1, %edx
	movq	-7504(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -3840(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r14), %rax
	testq	%rax, %rax
	jne	.L26247
.L14377:
	movq	-3832(%rbp), %rdx
	movq	-7488(%rbp), %rdi
	xorl	%eax, %eax
	movq	-7496(%rbp), %rsi
	movq	-3824(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24494
	movq	-3840(%rbp), %rdi
	call	delete_insns_since
.L14367:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L14381
.L23602:
	testb	$2, target_flags+3(%rip)
	movq	-7488(%rbp), %r14
	movl	$0, volatile_ok(%rip)
	setne	%sil
	movzbl	%sil, %edi
	movq	8(%r14), %rsi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%cl
	movq	%rax, %r14
	movq	-7496(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%cl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-7504(%rbp), %rsi
	movq	sizetype_tab(%rip), %r10
	movq	%rax, %rbx
	movzbl	61(%r10), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L26248
.L14390:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %rcx
	movq	8(%rdx), %rdi
	movq	(%rcx), %r10
	movq	$0, (%r10)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r15
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r15), %rbx
	movq	8(%rbx), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	jne	.L26249
.L14379:
	movq	-7480(%rbp), %rbx
	cmpw	$54, (%rbx)
	je	.L26250
	movq	sizetype_tab(%rip), %rsi
	movq	-7480(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	-7448(%rbp), %rdx
	xorl	%r9d, %r9d
	movzbl	61(%rsi), %r14d
	movq	optab_table+16(%rip), %rsi
	movl	$3, (%rsp)
	shrb	$1, %r14b
	movzbl	%r14b, %edi
	call	expand_binop
	movq	-3808(%rbp), %rdi
	movq	%rax, %rbx
	call	highest_pow2_factor
	movq	-7480(%rbp), %rsi
	movq	-7640(%rbp), %rdi
	movq	%rax, %rdx
	call	offset_address
	movq	%rax, -7640(%rbp)
	call	gen_label_rtx
	xorl	%r9d, %r9d
	movq	%rax, -7536(%rbp)
	movq	const_int_rtx+512(%rip), %rsi
	movq	%rbx, %rdi
	movzbl	2(%rbx), %r8d
	movl	$107, %edx
	xorl	%ecx, %ecx
	movq	%rax, (%rsp)
	call	emit_cmp_and_jump_insns
.L14393:
	cmpq	const_int_rtx+512(%rip), %rbx
	je	.L14394
	movq	-7640(%rbp), %rdx
	cmpw	$66, (%rdx)
	movq	%rdx, -7552(%rbp)
	je	.L26251
	movq	-7640(%rbp), %rax
	movzbl	2(%rax), %edi
	call	get_mode_alignment
.L24745:
	movl	%eax, -7540(%rbp)
.L14396:
	movq	-7640(%rbp), %rsi
	movzbl	2(%rsi), %eax
	cmpb	$51, %al
	je	.L14399
	cmpw	$54, (%rbx)
	je	.L26252
.L14399:
	movq	-7640(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L14401
	cmpl	$66, %eax
	je	.L26253
.L14405:
	cmpl	$75, %eax
	je	.L14409
	cmpl	$78, %eax
	je	.L14409
.L14404:
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L14414
	cmpl	$66, %eax
	je	.L26254
.L14418:
	cmpl	$75, %eax
	je	.L14422
	cmpl	$78, %eax
	je	.L14422
.L14417:
	cmpw	$54, (%rbx)
	je	.L26255
.L14427:
	shrl	$3, -7540(%rbp)
	xorl	%edi, %edi
	mov	-7540(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r14d
	movq	%rax, -3856(%rbp)
	testl	%r14d, %r14d
	je	.L23616
.L14521:
	movslq	%r14d,%rcx
	movl	clrstr_optab(,%rcx,4), %edx
	movq	%rcx, -3864(%rbp)
	cmpl	$1317, %edx
	je	.L14508
	cmpw	$54, (%rbx)
	je	.L26256
.L14512:
	testb	$2, target_flags+3(%rip)
	je	.L14513
	movq	-3864(%rbp), %rax
	cmpw	$63, mode_bitsize(%rax,%rax)
.L24748:
	jbe	.L14508
.L14511:
	movslq	%edx,%r8
	leaq	(%r8,%r8,4), %r11
	movq	%r8, -3872(%rbp)
	movq	insn_data+24(,%r11,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L14515
	movq	-7552(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L14508
.L14515:
	movq	48(%r15), %rax
	testq	%rax, %rax
	je	.L14516
	xorl	%esi, %esi
	movq	-3856(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L14508
.L14516:
	call	get_last_insn
	movl	$1, %edx
	movq	%rbx, %rsi
	movl	%r14d, %edi
	movq	%rax, -3880(%rbp)
	call	convert_to_mode
	movq	%rax, %r12
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L26257
.L14517:
	movq	-3872(%rbp), %rcx
	movq	-7552(%rbp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	-3856(%rbp), %rdx
	leaq	(%rcx,%rcx,4), %r14
	call	*insn_data+16(,%r14,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24749
	movq	-3880(%rbp), %rdi
	call	delete_insns_since
.L14508:
	movq	-3864(%rbp), %rdx
	movzbl	mode_wider_mode(%rdx), %r14d
	testl	%r14d, %r14d
	jne	.L14521
.L23616:
	testb	$2, target_flags+3(%rip)
	movq	-7552(%rbp), %r9
	setne	%r10b
	movq	8(%r9), %rsi
	movzbl	%r10b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	sizetype_tab(%rip), %rdi
	movq	%rax, %r14
	movzbl	61(%rdi), %esi
	shrb	$1, %sil
	movzbl	%sil, %edi
	movq	%rbx, %rsi
	call	copy_to_mode_reg
	cmpq	$0, fn.0(%rip)
	movq	%rax, %r15
	je	.L26258
.L14526:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	const_int_rtx+512(%rip), %rsi
	movq	integer_types+40(%rip), %rdi
	movq	%rax, %r12
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.0(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %rdi
	movq	(%rdi), %rsi
	movq	8(%rdx), %rdi
	movq	$0, (%rsi)
	call	build_pointer_type
	movq	fn.0(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movl	$53, %edi
	movq	fn.0(%rip), %rcx
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%rcx), %r15
	movq	%r12, %rcx
	movq	8(%r15), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	jne	.L26259
.L14394:
	cmpq	$0, -7536(%rbp)
	je	.L13969
	movq	-7536(%rbp), %rdi
	call	emit_label
	jmp	.L13969
.L26259:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
.L24749:
	call	emit_insn
	jmp	.L14394
.L26258:
	movl	$.LC7, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.0(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.0(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.0, %edi
	movq	%rax, fn.0(%rip)
	call	ggc_add_tree_root
	movq	fn.0(%rip), %r8
	xorl	%esi, %esi
	orb	$1, 49(%r8)
	movq	fn.0(%rip), %r11
	orb	$8, 18(%r11)
	movq	fn.0(%rip), %r12
	orb	$64, 50(%r12)
	movq	fn.0(%rip), %rbx
	orb	$2, 18(%rbx)
	movq	fn.0(%rip), %rdi
	call	make_decl_rtl
	movq	fn.0(%rip), %rdi
	call	assemble_external
	jmp	.L14526
.L26257:
	movq	%r12, %rdi
	movl	%r14d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L14517
	movq	%r12, %rsi
	movl	%r14d, %edi
	call	copy_to_mode_reg
	movq	%rax, %r12
	jmp	.L14517
.L14513:
	movq	-3864(%rbp), %r15
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L24748
.L26256:
	movq	mode_mask_array(,%rcx,8), %r12
	shrq	$1, %r12
	cmpq	%r12, 8(%rbx)
	jbe	.L14511
	jmp	.L14512
.L26255:
	movq	8(%rbx), %r14
	xorl	%r15d, %r15d
	movl	$17, %esi
.L14440:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23605
.L14437:
	movslq	%ecx,%r8
	movzbq	mode_size(%r8), %r9
	cmpq	%rsi, %r9
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L14437
.L23605:
	testl	%edi, %edi
	je	.L14430
	movslq	%edi,%r12
	movq	%r12, %r10
	salq	$4, %r10
	addq	optab_table+240(%rip), %r10
	cmpl	$1317, 8(%r10)
	je	.L14439
	call	get_mode_alignment
	movl	$128, %edx
	cmpl	%eax, %edx
	jb	.L14439
	movzbq	mode_size(%r12), %rsi
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r14
.L14439:
	movzbq	mode_size(%r12), %rsi
	cmpq	$1, %rsi
	ja	.L14440
.L14430:
	testq	%r14, %r14
	jne	.L25529
	movl	optimize_size(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L14443
	movq	ix86_cost(%rip), %r11
	mov	40(%r11), %edi
	cmpq	%rdi, %r15
	jae	.L14427
.L14444:
	movq	8(%rbx), %r8
	movq	-7552(%rbp), %r15
	leaq	-272(%rbp), %r12
	testb	$2, target_flags+3(%rip)
	movq	$clear_by_pieces_1, -232(%rbp)
	movq	$0, -224(%rbp)
	setne	%dl
	leaq	16(%r12), %rcx
	xorl	%esi, %esi
	movq	%r15, -272(%rbp)
	movq	%r8, -248(%rbp)
	movq	8(%r15), %r8
	movq	$0, -240(%rbp)
	movl	$0, -7564(%rbp)
	movzbl	%dl, %r9d 
	movq	%r8, -264(%rbp)
	movzwl	(%r8), %edx
	leaq	5(,%r9,4), %r15
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L14448
	cmpw	$99, %dx
	je	.L14448
	cmpw	$98, %dx
	je	.L14448
.L14447:
	movl	%esi, (%rcx)
	movl	$0, 20(%r12)
	leaq	56(%r12), %rdx
	movzwl	(%r8), %eax
	xorl	%ecx, %ecx
	cmpw	$96, %ax
	je	.L14450
	cmpw	$98, %ax
	je	.L14450
.L14449:
	movl	%ecx, (%rdx)
	movl	56(%r12), %eax
	testl	%eax, %eax
	je	.L14451
	movq	24(%r12), %r10
	movq	%r10, 32(%r12)
.L14451:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L14452
	movq	24(%r12), %r14
	movq	$0, -7560(%rbp)
	movl	$17, %esi
.L14465:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23608
.L14462:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L14462
.L23608:
	testl	%edi, %edi
	je	.L14455
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L14464
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %esi
	cmpl	%eax, %esi
	jb	.L14464
	movzbq	mode_size(%rbx), %r9
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%r9
	addq	%rax, -7560(%rbp)
	movq	%rdx, %r14
.L14464:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L14465
.L14455:
	testq	%r14, %r14
	jne	.L25529
	cmpq	$2, -7560(%rbp)
	jbe	.L14452
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23610
.L14473:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rdx
	cmpq	%r15, %rdx
	cmovae	-7564(%rbp), %ecx
	movl	%ecx, -7564(%rbp)
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L14473
.L23610:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L14452
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L14477
	cmpw	$54, %dx
	je	.L14477
	cmpw	$55, %dx
	je	.L14477
	cmpw	$58, %dx
	je	.L14477
	cmpw	$134, %dx
	je	.L14477
	cmpw	$56, %dx
	je	.L14477
	cmpw	$140, %dx
	je	.L14477
.L14452:
	cmpq	$1, %r15
	jbe	.L14480
.L14501:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23613
.L14487:
	movslq	%ecx,%r8
	movzbq	mode_size(%r8), %rbx
	cmpq	%r15, %rbx
	cmovae	-7564(%rbp), %ecx
	movl	%ecx, -7564(%rbp)
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L14487
.L23613:
	movl	-7564(%rbp), %eax
	testl	%eax, %eax
	je	.L14480
	movslq	-7564(%rbp),%r15
	movq	%r15, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	movl	8(%rcx), %ebx
	cmpl	$1317, %ebx
	je	.L14489
	movl	-7564(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %esi
	cmpl	%eax, %esi
	jb	.L14489
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%r9
	leaq	(%r9,%r9,4), %rdi
	cmpq	%rdx, 24(%r12)
	movq	insn_data+16(,%rdi,8), %r14
	movq	%r14, -3848(%rbp)
	movq	%rdx, %r14
	jb	.L14489
	movl	56(%r12), %ecx
.L14499:
	testl	%ecx, %ecx
	je	.L14493
	subq	%rdx, 32(%r12)
.L14493:
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L14494
	movq	(%r12), %rdi
	movl	-7564(%rbp), %esi
	movl	$1, %r8d
	movq	8(%r12), %rdx
	movq	32(%r12), %rcx
	call	adjust_automodify_address_1
.L24747:
	movl	-7564(%rbp), %edx
	movq	%rax, %rbx
	movq	48(%r12), %rdi
	movq	32(%r12), %rsi
	call	*40(%r12)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	*-3848(%rbp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L14498
	addq	%r14, 32(%r12)
.L14498:
	movq	24(%r12), %r10
	movq	%r14, %rdx
	subq	%r14, %r10
	cmpq	%r14, %r10
	movq	%r10, 24(%r12)
	jae	.L14499
.L14489:
	movzbq	mode_size(%r15), %r15
	cmpq	$1, %r15
	ja	.L14501
.L14480:
	cmpq	$0, 24(%r12)
	je	.L14394
	jmp	.L25451
.L14494:
	movq	(%r12), %rdi
	movl	-7564(%rbp), %esi
	movl	$1, %ecx
	movq	32(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24747
.L14477:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, 8(%r12)
	jmp	.L14452
.L14450:
	movl	$1, %ecx
	jmp	.L14449
.L14448:
	movl	$1, %esi
	jmp	.L14447
.L14443:
	cmpq	$2, %r15
	ja	.L14427
	jmp	.L14444
.L14422:
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbx), %rdi
	movq	%rax, %r14
	call	protect_from_queue
	cmpq	8(%rbx), %r14
	movq	%rax, %r12
	je	.L26260
.L14424:
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r14, 8(%rax)
	movq	%r12, 16(%rax)
	jmp	.L14417
.L26260:
	cmpq	16(%rbx), %rax
	jne	.L14424
	jmp	.L14417
.L26254:
	cmpb	$51, 2(%rbx)
	je	.L14415
	movq	8(%rbx), %r14
	cmpw	$71, (%r14)
	je	.L26261
.L14415:
	cmpl	$66, %eax
	jne	.L14418
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%rbx), %rax
	movq	%rax, %r12
	je	.L14417
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r12, 8(%rax)
	jmp	.L14417
.L26261:
	movq	8(%r14), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r14)
	movq	%rax, %r12
	je	.L14416
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L14417
.L14416:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24746:
	movq	%rax, %rbx
	jmp	.L14417
.L14414:
	cmpq	$0, 16(%rbx)
	je	.L26262
	movq	24(%rbx), %rax
	testq	%rax, %rax
	jne	.L24746
	movq	8(%rbx), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%rbx), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	16(%rbx), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbx), %rbx
	jmp	.L14417
.L26262:
	movq	8(%rbx), %rdi
	call	copy_to_reg
	jmp	.L24746
.L14409:
	movq	-7640(%rbp), %r8
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-7640(%rbp), %r11
	movq	%rax, %r14
	movq	16(%r11), %rdi
	call	protect_from_queue
	movq	-7640(%rbp), %rdx
	movq	%rax, %r12
	cmpq	8(%rdx), %r14
	je	.L26263
.L14411:
	movq	-7640(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7552(%rbp)
	movq	%r14, 8(%rax)
	movq	-7552(%rbp), %r9
	movq	%r12, 16(%r9)
	jmp	.L14404
.L26263:
	cmpq	16(%rdx), %rax
	jne	.L14411
	jmp	.L14404
.L26253:
	jne	.L14405
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-7640(%rbp), %rcx
	movq	%rax, %r12
	cmpq	8(%rcx), %rax
	je	.L14404
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -7552(%rbp)
	movq	%r12, 8(%rax)
	jmp	.L14404
.L14401:
	movq	-7640(%rbp), %rsi
	cmpq	$0, 16(%rsi)
	je	.L26264
	movq	-7640(%rbp), %r10
	movq	24(%r10), %r15
	testq	%r15, %r15
	movq	%r15, -7552(%rbp)
	jne	.L14404
	movq	-7640(%rbp), %rdi
	movq	8(%rdi), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	%rax, %rdi
	movq	-7640(%rbp), %rax
	movq	%rdi, 24(%rax)
	movq	-7640(%rbp), %r14
	movq	8(%r14), %rsi
	call	gen_move_insn
	movq	-7640(%rbp), %rcx
	movq	%rax, %rdi
	movq	16(%rcx), %rsi
	call	emit_insn_before
	movq	-7640(%rbp), %r12
	movq	24(%r12), %rdx
	movq	%rdx, -7552(%rbp)
	jmp	.L14404
.L26264:
	movq	8(%rsi), %rdi
	call	copy_to_reg
	movq	%rax, -7552(%rbp)
	jmp	.L14404
.L26252:
	movzbl	%al, %edx 
	movzbl	mode_size(%rdx), %edi
	cmpl	8(%rbx), %edi
	jne	.L14399
	movq	%rsi, %rdi
	movq	const_tiny_rtx(,%rdx,8), %rsi
	call	emit_move_insn
	jmp	.L14394
.L26251:
	movq	16(%rdx), %rax
	movl	$8, -7540(%rbp)
	testq	%rax, %rax
	je	.L14396
	movl	32(%rax), %eax
	jmp	.L24745
.L26250:
	movq	8(%rbx), %rsi
	movq	-7448(%rbp), %rdi
	negq	%rsi
	call	plus_constant_wide
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-7480(%rbp), %r12
	movq	-7640(%rbp), %rdi
	movl	$51, %esi
	movq	%rax, %rbx
	movq	8(%r12), %rdx
	call	adjust_address_1
	movq	%rax, -7640(%rbp)
	jmp	.L14393
.L26249:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L14379
.L26248:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r9
	xorl	%esi, %esi
	orb	$1, 49(%r9)
	movq	fn.1(%rip), %r8
	orb	$8, 18(%r8)
	movq	fn.1(%rip), %r11
	orb	$64, 50(%r11)
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L14390
.L24494:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L14379
.L26247:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L14377
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L14377
.L26246:
	movq	-7496(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L14367
	jmp	.L14375
.L14372:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L24744
.L26245:
	movq	mode_mask_array(,%r15,8), %r11
	shrq	$1, %r11
	cmpq	%r11, 8(%rsi)
	jbe	.L14370
	jmp	.L14371
.L26244:
	movq	8(%rcx), %r12
	xorl	%r14d, %r14d
	movl	$17, %esi
.L14261:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23591
.L14258:
	movslq	%ecx,%r8
	movzbq	mode_size(%r8), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L14258
.L23591:
	testl	%edi, %edi
	je	.L14251
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L14260
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L14260
	movzbq	mode_size(%rbx), %r9
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r9
	addq	%rax, %r14
	movq	%rdx, %r12
.L14260:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L14261
.L14251:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L14264
	movq	ix86_cost(%rip), %r10
	mov	40(%r10), %ebx
	cmpq	%rbx, %r14
	jae	.L14248
.L14265:
	movq	-7504(%rbp), %r8
	movq	-7496(%rbp), %rsi
	movq	-7488(%rbp), %rdi
	movq	-7488(%rbp), %r11
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r14b
	movq	8(%rsi), %r8
	movq	$0, -1016(%rbp)
	movl	$0, -7516(%rbp)
	movq	%r8, -1040(%rbp)
	movzbl	%r14b, %ecx
	movq	8(%rdi), %rdx
	movq	%r11, -1072(%rbp)
	leal	5(,%rcx,4), %r14d
	xorl	%ecx, %ecx
	movq	%rdx, -7512(%rbp)
	movq	-7512(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L14270
	cmpw	$99, %dx
	je	.L14270
	cmpw	$98, %dx
	je	.L14270
.L14269:
	movq	-7512(%rbp), %r9
	movl	%ecx, -1056(%rbp)
	xorl	%edx, %edx
	movzwl	(%r9), %eax
	cmpw	$96, %ax
	je	.L14272
	cmpw	$98, %ax
	je	.L14272
.L14271:
	movq	-7512(%rbp), %r15
	movq	-7496(%rbp), %r10
	movl	%edx, -1008(%rbp)
	xorl	%ecx, %ecx
	movq	%r15, -1064(%rbp)
	movq	%r10, -1048(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L14275
	cmpw	$99, %dx
	je	.L14275
	cmpw	$98, %dx
	je	.L14275
.L14274:
	movl	-1008(%rbp), %eax
	movl	%ecx, -1032(%rbp)
	movl	$0, -1028(%rbp)
	movl	$0, -1052(%rbp)
	testl	%eax, %eax
	je	.L14276
	movq	%r12, -1016(%rbp)
.L14276:
	movl	-1032(%rbp), %eax
	movq	%r12, -1024(%rbp)
	testl	%eax, %eax
	je	.L14278
	movl	-1056(%rbp), %r11d
	testl	%r11d, %r11d
	jne	.L14277
.L14278:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L14291:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23594
.L14288:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L14288
.L23594:
	testl	%edi, %edi
	je	.L14281
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L14290
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L14290
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L14290:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L14291
.L14281:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L14277
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23596
.L14299:
	movslq	%ecx,%rbx
	movzbl	mode_size(%rbx), %r15d
	cmpl	%r14d, %r15d
	cmovae	-7516(%rbp), %ecx
	movl	%ecx, -7516(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L14299
.L23596:
	movl	-1032(%rbp), %eax
	testl	%eax, %eax
	jne	.L14305
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L14303
	cmpw	$54, %dx
	je	.L14303
	cmpw	$55, %dx
	je	.L14303
	cmpw	$58, %dx
	je	.L14303
	cmpw	$134, %dx
	je	.L14303
	cmpw	$56, %dx
	je	.L14303
	cmpw	$140, %dx
	je	.L14303
.L14305:
	movl	-1056(%rbp), %r8d
	testl	%r8d, %r8d
	jne	.L14277
	movq	-7512(%rbp), %rcx
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L14307
	cmpw	$54, %dx
	je	.L14307
	cmpw	$55, %dx
	je	.L14307
	cmpw	$58, %dx
	je	.L14307
	cmpw	$134, %dx
	je	.L14307
	cmpw	$56, %dx
	je	.L14307
	cmpw	$140, %dx
	je	.L14307
.L14277:
	cmpl	$1, %r14d
	jbe	.L14310
.L14361:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23599
.L14317:
	movslq	%ecx,%rdi
	movzbl	mode_size(%rdi), %edx
	cmpl	%r14d, %edx
	cmovae	-7516(%rbp), %ecx
	movl	%ecx, -7516(%rbp)
	movzbl	mode_wider_mode(%rdi), %ecx
	testl	%ecx, %ecx
	jne	.L14317
.L23599:
	movl	-7516(%rbp), %r14d
	testl	%r14d, %r14d
	je	.L14310
	movslq	-7516(%rbp),%r15
	movq	%r15, %r12
	salq	$4, %r12
	addq	optab_table+240(%rip), %r12
	movl	8(%r12), %ebx
	cmpl	$1317, %ebx
	je	.L14319
	movl	-7516(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r10d
	cmpl	%eax, %r10d
	jb	.L14319
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%r11
	leaq	-1072(%rbp), %r12
	leaq	(%r11,%r11,4), %rbx
	cmpq	%rdx, -1024(%rbp)
	movq	$0, -7528(%rbp)
	movq	insn_data+16(,%rbx,8), %rsi
	movq	%rdx, -6016(%rbp)
	movq	%rsi, -3816(%rbp)
	jb	.L14319
	movl	-1008(%rbp), %ecx
.L14359:
	testl	%ecx, %ecx
	je	.L14323
	subq	%rdx, 56(%r12)
.L14323:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L14324
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L14325
	movl	-7516(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24740:
	movq	%rax, -7528(%rbp)
.L14324:
	movl	40(%r12), %r8d
	testl	%r8d, %r8d
	je	.L14327
	movq	24(%r12), %rdi
	movl	-7516(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24741:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L26265
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L14333
	movzbl	mode_size(%r15), %r9d
	leal	7(%r9), %edx
	andl	$-8, %edx
.L14334:
	movq	cfun(%rip), %rdi
	andl	$33554432, %esi
	movq	16(%rdi), %r10
	leaq	8(%r10), %rdi
	movl	8(%r10), %ecx
	je	.L14335
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24742:
	movq	%r15, %rsi
	leal	(%rax,%rcx), %ebx
	salq	$4, %rsi
	movl	%ebx, (%rdi)
	addq	optab_table+384(%rip), %rsi
	movl	8(%rsi), %eax
	cmpl	$1317, %eax
	je	.L14337
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %r11
	movq	insn_data+24(,%r11,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L14338
	movq	%r14, %rdi
	movl	-7516(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L26266
.L14338:
	leaq	(%rbx,%rbx,4), %r8
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r8,8)
.L24743:
	movq	%rax, %rdi
	call	emit_insn
.L14357:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L14358
	movq	-6016(%rbp), %r14
	addq	%r14, 56(%r12)
.L14358:
	movq	48(%r12), %rbx
	movq	-6016(%rbp), %rdx
	subq	-6016(%rbp), %rbx
	cmpq	%rdx, %rbx
	movq	%rbx, 48(%r12)
	jae	.L14359
.L14319:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L14361
.L14310:
	cmpq	$0, -1024(%rbp)
	je	.L14379
	jmp	.L25518
.L26266:
	movl	-7516(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L14338
.L14337:
	movzbl	mode_size(%r15), %r9d
	cmpl	%edx, %r9d
	je	.L26267
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	testb	$2, target_flags+3(%rip)
	setne	%dil
	movq	%rax, %rcx
	movzbl	%dil, %esi
	movl	$75, %edi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r10b
	movzbl	%r10b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L14345:
	movl	-7516(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%ecx, %ecx
	testq	%rcx, %rcx
	movq	%rax, %rbx
	je	.L14354
	xorl	%esi, %esi
	movq	%rax, %rdi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %esi
	testl	%esi, %esi
	jne	.L26268
.L14354:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L14357
.L26268:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L14354
.L26267:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L14345
.L14335:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24742
.L14333:
	movzbl	mode_size(%r15), %ecx
	leal	1(%rcx), %edx
	andl	$-2, %edx
	jmp	.L14334
.L26265:
	movq	%rax, %rsi
	movq	-7528(%rbp), %rdi
	xorl	%eax, %eax
	call	*-3816(%rbp)
	jmp	.L24743
.L14327:
	movq	24(%r12), %rdi
	movl	-7516(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24741
.L14325:
	movl	-7516(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24740
.L14307:
	movq	-7512(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -1064(%rbp)
	jmp	.L14277
.L14303:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -1040(%rbp)
	jmp	.L14305
.L14275:
	movl	$1, %ecx
	jmp	.L14274
.L14272:
	movl	$1, %edx
	jmp	.L14271
.L14270:
	movl	$1, %ecx
	jmp	.L14269
.L14264:
	cmpq	$2, %r14
	ja	.L14248
	jmp	.L14265
.L14240:
	movq	-7480(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-7480(%rbp), %r8
	movq	%rax, %r12
	movq	16(%r8), %rdi
	call	protect_from_queue
	movq	-7480(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26269
.L14242:
	movq	-7480(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7504(%rbp)
	movq	%r12, 8(%rax)
	movq	-7504(%rbp), %rax
	movq	%rbx, 16(%rax)
	jmp	.L14235
.L26269:
	cmpq	16(%rcx), %rax
	jne	.L14242
	jmp	.L14235
.L26243:
	cmpb	$51, 2(%rdx)
	je	.L14233
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26270
.L14233:
	cmpl	$66, %eax
	jne	.L14236
	movq	-7480(%rbp), %r11
	xorl	%esi, %esi
	movq	8(%r11), %rdi
	call	protect_from_queue
	movq	-7480(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L14235
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -7504(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L14235
.L26270:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L14234
	movq	-7480(%rbp), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -7504(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L14235
.L14234:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24739:
	movq	%rax, -7504(%rbp)
	jmp	.L14235
.L14232:
	movq	-7480(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26271
	movq	-7480(%rbp), %rsi
	movq	24(%rsi), %r14
	testq	%r14, %r14
	movq	%r14, -7504(%rbp)
	jne	.L14235
	movq	-7480(%rbp), %r9
	movq	8(%r9), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	-7480(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdi
	movq	%rdi, -7504(%rbp)
	jmp	.L14235
.L26271:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24739
.L14227:
	movq	-7632(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	%rax, %r12
	movq	-7632(%rbp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	-7632(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26272
.L14229:
	movq	-7632(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7496(%rbp)
	movq	%r12, 8(%rax)
	movq	-7496(%rbp), %r14
	movq	%rbx, 16(%r14)
	jmp	.L14222
.L26272:
	cmpq	16(%rcx), %rax
	jne	.L14229
	jmp	.L14222
.L26242:
	cmpb	$51, 2(%rdx)
	je	.L14220
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26273
.L14220:
	cmpl	$66, %eax
	jne	.L14223
	movq	-7632(%rbp), %r8
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	call	protect_from_queue
	movq	-7632(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L14222
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -7496(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L14222
.L26273:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L14221
	movq	-7632(%rbp), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -7496(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L14222
.L14221:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24738:
	movq	%rax, -7496(%rbp)
	jmp	.L14222
.L14219:
	movq	-7632(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26274
	movq	-7632(%rbp), %rbx
	movq	24(%rbx), %rsi
	testq	%rsi, %rsi
	movq	%rsi, -7496(%rbp)
	jne	.L14222
	movq	-7632(%rbp), %r10
	movq	8(%r10), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	-7632(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdi
	movq	%rdi, -7496(%rbp)
	jmp	.L14222
.L26274:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24738
.L14214:
	movq	-7640(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-7640(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L26275
.L14216:
	movq	-7640(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7488(%rbp)
	movq	%r12, 8(%rax)
	movq	-7488(%rbp), %rsi
	movq	%rbx, 16(%rsi)
	jmp	.L14209
.L26275:
	cmpq	16(%rsi), %rax
	jne	.L14216
	jmp	.L14209
.L26241:
	jne	.L14210
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-7640(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L14209
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -7488(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L14209
.L14206:
	testq	%rsi, %rsi
	je	.L26276
	movq	-7640(%rbp), %r9
	movq	24(%r9), %rdi
	testq	%rdi, %rdi
	movq	%rdi, -7488(%rbp)
	jne	.L14209
	movq	-7640(%rbp), %r12
	movq	8(%r12), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r10
	movq	%r10, -7488(%rbp)
	jmp	.L14209
.L26276:
	movq	-7640(%rbp), %rbx
	movq	8(%rbx), %rdi
	call	copy_to_reg
	movq	%rax, -7488(%rbp)
	jmp	.L14209
.L14199:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L14195
	movl	32(%rsi), %r15d
	jmp	.L14195
.L14198:
	cmpl	$7, %edx
	ja	.L14194
	jmp	.L14199
.L26240:
	movq	-7448(%rbp), %r9
	movslq	32(%r14),%r8
	cmpq	%r8, 8(%r9)
	jge	.L13994
	movq	-7640(%rbp), %rdx
	movq	-7632(%rbp), %rcx
	movq	%rdx, -7432(%rbp)
	movq	%rcx, -7440(%rbp)
	movq	16(%rdx), %rax
	movl	$8, %edx
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L13998
	movl	32(%rax), %edx
.L13998:
	movq	-7632(%rbp), %r12
	movq	16(%r12), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L13999
	cmpl	32(%rax), %edx
	jb	.L14000
.L13995:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L13996
	movl	32(%rcx), %r15d
.L13996:
	movq	-7640(%rbp), %rax
	cmpb	$51, 2(%rax)
	jne	.L25547
	movq	-7632(%rbp), %rbx
	cmpb	$51, 2(%rbx)
	jne	.L25546
	movq	-7640(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L14007
	cmpl	$66, %eax
	je	.L26277
.L14011:
	cmpl	$75, %eax
	je	.L14015
	cmpl	$78, %eax
	je	.L14015
.L14010:
	movq	-7632(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L14020
	cmpl	$66, %eax
	je	.L26278
.L14024:
	cmpl	$75, %eax
	je	.L14028
	cmpl	$78, %eax
	je	.L14028
.L14023:
	movq	-7448(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L14033
	cmpl	$66, %eax
	je	.L26279
.L14037:
	cmpl	$75, %eax
	je	.L14041
	cmpl	$78, %eax
	je	.L14041
.L14036:
	movq	-7432(%rbp), %rsi
	cmpw	$66, (%rsi)
	jne	.L25545
	movq	-7440(%rbp), %r8
	cmpw	$66, (%r8)
	jne	.L25544
	cmpq	$0, -7448(%rbp)
	je	.L25543
	movq	-7448(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L26280
.L14049:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -3784(%rbp)
	testl	%r12d, %r12d
	je	.L23588
.L14182:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L14168
	movq	-7448(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L26281
.L14172:
	testb	$2, target_flags+3(%rip)
	je	.L14173
	cmpw	$63, mode_bitsize(%r15,%r15)
.L24737:
	jbe	.L14168
.L14171:
	movslq	%edx,%rdi
	leaq	(%rdi,%rdi,4), %rsi
	movq	%rdi, -3792(%rbp)
	movq	insn_data+24(,%rsi,8), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L14175
	movq	-7432(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L14168
.L14175:
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L26282
.L14176:
	movq	72(%r14), %rax
	testq	%rax, %rax
	je	.L14177
	xorl	%esi, %esi
	movq	-3784(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L14168
.L14177:
	call	get_last_insn
	movl	$1, %edx
	movq	-7448(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -3800(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r14), %rax
	testq	%rax, %rax
	jne	.L26283
.L14178:
	movq	-3792(%rbp), %r9
	movq	-7432(%rbp), %rdi
	xorl	%eax, %eax
	movq	-7440(%rbp), %rsi
	movq	%rbx, %rdx
	movq	-3784(%rbp), %rcx
	leaq	(%r9,%r9,4), %r12
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24496
	movq	-3800(%rbp), %rdi
	call	delete_insns_since
.L14168:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L14182
.L23588:
	testb	$2, target_flags+3(%rip)
	movq	-7432(%rbp), %r11
	movl	$0, volatile_ok(%rip)
	setne	%r8b
	movq	8(%r11), %rsi
	movzbl	%r8b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%dl
	movq	%rax, %r14
	movq	-7440(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%dl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-7448(%rbp), %rsi
	movq	sizetype_tab(%rip), %r10
	movq	%rax, %rbx
	movzbl	61(%r10), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L26284
.L14191:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %r15
	movq	%rax, (%rbx)
	movq	(%r12), %rdx
	movq	8(%r15), %rdi
	movq	(%rdx), %r10
	movq	$0, (%r10)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r9
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r9), %rbx
	movq	8(%rbx), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	je	.L13969
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	jmp	.L24760
.L26284:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r12
	orb	$1, 49(%r12)
	movq	fn.1(%rip), %rdi
	orb	$8, 18(%rdi)
	movq	fn.1(%rip), %rsi
	orb	$64, 50(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %rcx
	orb	$2, 18(%rcx)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L14191
.L26283:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L14178
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L14178
.L26282:
	movq	-7440(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L14168
	jmp	.L14176
.L14173:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L24737
.L26281:
	movq	mode_mask_array(,%r15,8), %rcx
	shrq	$1, %rcx
	cmpq	%rcx, 8(%rsi)
	jbe	.L14171
	jmp	.L14172
.L26280:
	movq	8(%rcx), %r12
	xorl	%r14d, %r14d
	movl	$17, %esi
.L14062:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23577
.L14059:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L14059
.L23577:
	testl	%edi, %edi
	je	.L14052
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L14061
	call	get_mode_alignment
	movl	$128, %r10d
	cmpl	%eax, %r10d
	jb	.L14061
	movzbq	mode_size(%rbx), %rdi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rdi
	addq	%rax, %r14
	movq	%rdx, %r12
.L14061:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L14062
.L14052:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L14065
	movq	ix86_cost(%rip), %r8
	mov	40(%r8), %esi
	cmpq	%rsi, %r14
	jae	.L14049
.L14066:
	movq	-7440(%rbp), %r11
	movq	-7448(%rbp), %rdi
	movq	-7432(%rbp), %r10
	movq	-7432(%rbp), %r9
	testb	$2, target_flags+3(%rip)
	movq	8(%r11), %r8
	movq	8(%rdi), %r12
	movq	$0, -936(%rbp)
	movl	$0, -7460(%rbp)
	setne	%r14b
	movq	%r8, -960(%rbp)
	movq	8(%r10), %rdx
	movq	%r9, -992(%rbp)
	movzbl	%r14b, %ecx
	movq	%rdx, -7456(%rbp)
	leal	5(,%rcx,4), %r14d
	movq	-7456(%rbp), %rax
	xorl	%ecx, %ecx
	movzwl	(%rax), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L14071
	cmpw	$99, %dx
	je	.L14071
	cmpw	$98, %dx
	je	.L14071
.L14070:
	movq	-7456(%rbp), %rbx
	movl	%ecx, -976(%rbp)
	xorl	%edx, %edx
	movzwl	(%rbx), %eax
	cmpw	$96, %ax
	je	.L14073
	cmpw	$98, %ax
	je	.L14073
.L14072:
	movq	-7456(%rbp), %rax
	movq	-7440(%rbp), %r15
	movl	%edx, -928(%rbp)
	xorl	%ecx, %ecx
	movq	%rax, -984(%rbp)
	movq	%r15, -968(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %esi
	cmpw	$1, %si
	jbe	.L14076
	cmpw	$99, %dx
	je	.L14076
	cmpw	$98, %dx
	je	.L14076
.L14075:
	movl	-928(%rbp), %edx
	movl	%ecx, -952(%rbp)
	movl	$0, -948(%rbp)
	movl	$0, -972(%rbp)
	testl	%edx, %edx
	je	.L14077
	movq	%r12, -936(%rbp)
.L14077:
	movl	-952(%rbp), %r9d
	movq	%r12, -944(%rbp)
	testl	%r9d, %r9d
	je	.L14079
	movl	-976(%rbp), %r10d
	testl	%r10d, %r10d
	jne	.L14078
.L14079:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L14092:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23580
.L14089:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L14089
.L23580:
	testl	%edi, %edi
	je	.L14082
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L14091
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L14091
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L14091:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L14092
.L14082:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L14078
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23582
.L14100:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %edx
	cmpl	%r14d, %edx
	cmovae	-7460(%rbp), %ecx
	movl	%ecx, -7460(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L14100
.L23582:
	movl	-952(%rbp), %eax
	testl	%eax, %eax
	jne	.L14106
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L14104
	cmpw	$54, %dx
	je	.L14104
	cmpw	$55, %dx
	je	.L14104
	cmpw	$58, %dx
	je	.L14104
	cmpw	$134, %dx
	je	.L14104
	cmpw	$56, %dx
	je	.L14104
	cmpw	$140, %dx
	je	.L14104
.L14106:
	movl	-976(%rbp), %r10d
	testl	%r10d, %r10d
	jne	.L14078
	movq	-7456(%rbp), %rbx
	movzwl	(%rbx), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L14108
	cmpw	$54, %dx
	je	.L14108
	cmpw	$55, %dx
	je	.L14108
	cmpw	$58, %dx
	je	.L14108
	cmpw	$134, %dx
	je	.L14108
	cmpw	$56, %dx
	je	.L14108
	cmpw	$140, %dx
	je	.L14108
.L14078:
	cmpl	$1, %r14d
	jbe	.L14111
.L14162:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23585
.L14118:
	movslq	%ecx,%r8
	movzbl	mode_size(%r8), %r12d
	cmpl	%r14d, %r12d
	cmovae	-7460(%rbp), %ecx
	movl	%ecx, -7460(%rbp)
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L14118
.L23585:
	movl	-7460(%rbp), %eax
	testl	%eax, %eax
	je	.L14111
	movslq	-7460(%rbp),%r15
	movq	%r15, %r14
	salq	$4, %r14
	addq	optab_table+240(%rip), %r14
	movl	8(%r14), %ebx
	cmpl	$1317, %ebx
	je	.L14120
	movl	-7460(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L14120
	movslq	%ebx,%rdx
	leaq	-992(%rbp), %r12
	movq	$0, -7472(%rbp)
	leaq	(%rdx,%rdx,4), %rsi
	movzbq	mode_size(%r15), %rdx
	cmpq	%rdx, -944(%rbp)
	movq	insn_data+16(,%rsi,8), %rdi
	movq	%rdx, -6008(%rbp)
	movq	%rdi, -3776(%rbp)
	jb	.L14120
	movl	-928(%rbp), %ecx
.L14160:
	testl	%ecx, %ecx
	je	.L14124
	subq	%rdx, 56(%r12)
.L14124:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L14125
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L14126
	movl	-7460(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24733:
	movq	%rax, -7472(%rbp)
.L14125:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L14128
	movq	24(%r12), %rdi
	movl	-7460(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24734:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L26285
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L14134
	movzbl	mode_size(%r15), %r9d
	leal	7(%r9), %edx
	andl	$-8, %edx
.L14135:
	movq	cfun(%rip), %rbx
	andl	$33554432, %esi
	movq	16(%rbx), %r11
	leaq	8(%r11), %rdi
	movl	8(%r11), %ecx
	je	.L14136
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24735:
	movq	%r15, %r8
	leal	(%rax,%rcx), %esi
	salq	$4, %r8
	movl	%esi, (%rdi)
	addq	optab_table+384(%rip), %r8
	movl	8(%r8), %eax
	cmpl	$1317, %eax
	je	.L14138
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rdi
	movq	insn_data+24(,%rdi,8), %rcx
	movq	(%rcx), %rax
	testq	%rax, %rax
	je	.L14139
	movq	%r14, %rdi
	movl	-7460(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L26286
.L14139:
	leaq	(%rbx,%rbx,4), %r9
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r9,8)
.L24736:
	movq	%rax, %rdi
	call	emit_insn
.L14158:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L14159
	movq	-6008(%rbp), %r14
	addq	%r14, 56(%r12)
.L14159:
	movq	48(%r12), %rbx
	movq	-6008(%rbp), %rdx
	subq	-6008(%rbp), %rbx
	cmpq	%rdx, %rbx
	movq	%rbx, 48(%r12)
	jae	.L14160
.L14120:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L14162
.L14111:
	cmpq	$0, -944(%rbp)
	jmp	.L25555
.L26286:
	movl	-7460(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L14139
.L14138:
	movzbl	mode_size(%r15), %r10d
	cmpl	%edx, %r10d
	je	.L26287
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r11b
	movzbl	%r11b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	setne	%dl
	movq	%rax, %rcx
	movzbl	%dl, %esi
	movq	global_rtl+16(%rip), %rdx
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L14146:
	movl	-7460(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%r8d, %r8d
	testq	%r8, %r8
	movq	%rax, %rbx
	je	.L14155
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L26288
.L14155:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L14158
.L26288:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L14155
.L26287:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L14146
.L14136:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24735
.L14134:
	movzbl	mode_size(%r15), %r10d
	leal	1(%r10), %edx
	andl	$-2, %edx
	jmp	.L14135
.L26285:
	movq	%rax, %rsi
	movq	-7472(%rbp), %rdi
	xorl	%eax, %eax
	call	*-3776(%rbp)
	jmp	.L24736
.L14128:
	movq	24(%r12), %rdi
	movl	-7460(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24734
.L14126:
	movl	-7460(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24733
.L14108:
	movq	-7456(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -984(%rbp)
	jmp	.L14078
.L14104:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -960(%rbp)
	jmp	.L14106
.L14076:
	movl	$1, %ecx
	jmp	.L14075
.L14073:
	movl	$1, %edx
	jmp	.L14072
.L14071:
	movl	$1, %ecx
	jmp	.L14070
.L14065:
	cmpq	$2, %r14
	ja	.L14049
	jmp	.L14066
.L14041:
	movq	-7448(%rbp), %rbx
	xorl	%esi, %esi
	movq	8(%rbx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-7448(%rbp), %rcx
	movq	%rax, %r12
	movq	16(%rcx), %rdi
	call	protect_from_queue
	movq	-7448(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26289
.L14043:
	movq	-7448(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7448(%rbp)
	movq	%r12, 8(%rax)
	movq	-7448(%rbp), %rax
	movq	%rbx, 16(%rax)
	jmp	.L14036
.L26289:
	cmpq	16(%rcx), %rax
	jne	.L14043
	jmp	.L14036
.L26279:
	cmpb	$51, 2(%rdx)
	je	.L14034
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26290
.L14034:
	cmpl	$66, %eax
	jne	.L14037
	movq	-7448(%rbp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	movq	-7448(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L14036
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -7448(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L14036
.L26290:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L14035
	movq	-7448(%rbp), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -7448(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L14036
.L14035:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24732:
	movq	%rax, -7448(%rbp)
	jmp	.L14036
.L14033:
	movq	-7448(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26291
	movq	-7448(%rbp), %r14
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L24732
	movq	-7448(%rbp), %rdi
	movq	8(%rdi), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	-7448(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r10
	movq	%r10, -7448(%rbp)
	jmp	.L14036
.L26291:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24732
.L14028:
	movq	-7632(%rbp), %rbx
	xorl	%esi, %esi
	movq	8(%rbx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	%rax, %r12
	movq	-7632(%rbp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	-7632(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26292
.L14030:
	movq	-7632(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7440(%rbp)
	movq	%r12, 8(%rax)
	movq	-7440(%rbp), %r14
	movq	%rbx, 16(%r14)
	jmp	.L14023
.L26292:
	cmpq	16(%rcx), %rax
	jne	.L14030
	jmp	.L14023
.L26278:
	cmpb	$51, 2(%rdx)
	je	.L14021
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26293
.L14021:
	cmpl	$66, %eax
	jne	.L14024
	movq	-7632(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	movq	-7632(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L14023
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -7440(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L14023
.L26293:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L14022
	movq	-7632(%rbp), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -7440(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L14023
.L14022:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24731:
	movq	%rax, -7440(%rbp)
	jmp	.L14023
.L14020:
	movq	-7632(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26294
	movq	-7632(%rbp), %r11
	movq	24(%r11), %r10
	testq	%r10, %r10
	movq	%r10, -7440(%rbp)
	jne	.L14023
	movq	-7632(%rbp), %r8
	movq	8(%r8), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	-7632(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdi
	movq	%rdi, -7440(%rbp)
	jmp	.L14023
.L26294:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24731
.L14015:
	movq	-7640(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-7640(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L26295
.L14017:
	movq	-7640(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7432(%rbp)
	movq	%r12, 8(%rax)
	movq	-7432(%rbp), %r10
	movq	%rbx, 16(%r10)
	jmp	.L14010
.L26295:
	cmpq	16(%rsi), %rax
	jne	.L14017
	jmp	.L14010
.L26277:
	jne	.L14011
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-7640(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L14010
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -7432(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L14010
.L14007:
	testq	%rsi, %rsi
	je	.L26296
	movq	-7640(%rbp), %rdi
	movq	24(%rdi), %rsi
	testq	%rsi, %rsi
	movq	%rsi, -7432(%rbp)
	jne	.L14010
	movq	-7640(%rbp), %r12
	movq	8(%r12), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r8
	movq	%r8, -7432(%rbp)
	jmp	.L14010
.L26296:
	movq	-7640(%rbp), %r11
	movq	8(%r11), %rdi
	call	copy_to_reg
	movq	%rax, -7432(%rbp)
	jmp	.L14010
.L14000:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L13996
	movl	32(%rsi), %r15d
	jmp	.L13996
.L13999:
	cmpl	$7, %edx
	ja	.L13995
	jmp	.L14000
.L13984:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L26297
.L13986:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -7640(%rbp)
	movq	%r12, 8(%rax)
	movq	-7640(%rbp), %rax
	movq	%rbx, 16(%rax)
	jmp	.L13979
.L26297:
	cmpq	16(%r13), %rax
	jne	.L13986
	jmp	.L13979
.L26210:
	jne	.L13980
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L13979
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -7640(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L13979
.L13976:
	cmpq	$0, 16(%r13)
	je	.L26298
	movq	24(%r13), %rbx
	testq	%rbx, %rbx
	movq	%rbx, -7640(%rbp)
	jne	.L13979
	movq	8(%r13), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r10
	movq	%r10, -7640(%rbp)
	jmp	.L13979
.L26298:
	movq	8(%r13), %rdi
	call	copy_to_reg
	movq	%rax, -7640(%rbp)
	jmp	.L13979
.L26209:
	movq	144(%r14), %rax
	testq	%rax, %rax
	je	.L13971
	cmpq	%rax, %r13
	jne	.L13971
	jmp	.L13969
.L26208:
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L13969
	jmp	.L13970
	.p2align 6,,7
.L13968:
	movq	-7632(%rbp), %rdx
	cmpb	$0, 2(%rdx)
	jne	.L13967
	cmpb	$0, 16(%r14)
	je	.L13967
	movq	8(%r14), %rdx
	movzbl	2(%r13), %edi
	movzbl	61(%rdx), %ecx
	shrb	$1, %cl
	movzbl	%cl, %esi
	cmpl	%esi, %edi
	je	.L13967
	movzbl	17(%rdx), %ecx
	movq	-7632(%rbp), %rdx
	shrb	$5, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, -7632(%rbp)
	jmp	.L13967
.L24344:
	movq	-7632(%rbp), %r8
	movzwl	(%r8), %edx
	jmp	.L13890
.L26207:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	%r14, %rdi
	movzbl	2(%r13), %edx
	movq	%rax, %rsi
	jmp	.L24730
.L13929:
	xorl	%r10d, %r10d
	testl	%r10d, %r10d
	je	.L24340
	movl	(%r13), %ecx
	movl	%ecx, %r11d
	andl	$134283263, %r11d
	cmpl	$66, %r11d
	je	.L26299
.L13945:
	andl	$268500991, %ecx
	cmpl	$268435519, %ecx
	je	.L26300
	movzbl	2(%r13), %edx
	xorl	%ecx, %ecx
	movq	%r14, %rdi
	movq	%r13, %rsi
	call	expand_expr
	cmpw	$61, (%r13)
	movq	%rax, -7632(%rbp)
	je	.L26301
.L13965:
	movl	(%r13), %eax
	andl	$134283263, %eax
	cmpl	$134217794, %eax
	je	.L24343
	movq	-7632(%rbp), %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L24344
	movq	-7632(%rbp), %r10
	movzwl	(%r10), %edx
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L13966
	cmpw	$54, %dx
	je	.L13966
	cmpw	$55, %dx
	je	.L13966
	cmpw	$58, %dx
	je	.L13966
	cmpw	$134, %dx
	je	.L13966
	cmpw	$56, %dx
	je	.L13966
	cmpw	$140, %dx
	je	.L13966
	xorl	%r11d, %r11d
	testl	%r11d, %r11d
	je	.L13890
.L13966:
	movl	$1, -7420(%rbp)
	jmp	.L13890
.L24343:
	movq	-7632(%rbp), %rdi
	movzwl	(%rdi), %edx
	jmp	.L13890
.L26301:
	cmpl	$52, 8(%r13)
	ja	.L13965
	movq	-7632(%rbp), %rsi
	movzwl	(%rsi), %edx
	jmp	.L13890
.L26300:
	xorl	%r12d, %r12d
	xorl	%edx, %edx
	testl	%r12d, %r12d
	jne	.L13951
	movq	8(%r14), %rsi
	movzbl	16(%rsi), %eax
	cmpb	$6, %al
	je	.L13952
	cmpb	$10, %al
	je	.L13952
	cmpb	$11, %al
	je	.L13952
	cmpb	$12, %al
	je	.L13952
.L13951:
	movq	%rdx, %rsi
	xorl	%ecx, %ecx
	movq	%r14, %rdi
	xorl	%edx, %edx
	call	expand_expr
	movzwl	(%rax), %edx
	movq	%rax, %rbx
	cmpw	$66, %dx
	je	.L26302
.L13954:
	leal	-67(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L13957
	cmpw	$54, %dx
	je	.L13957
	cmpw	$55, %dx
	je	.L13957
	cmpw	$58, %dx
	je	.L13957
	cmpw	$134, %dx
	je	.L13957
	cmpw	$56, %dx
	je	.L13957
	cmpw	$140, %dx
	je	.L13957
.L13956:
	movzbl	3(%r13), %edx
	movq	8(%r13), %rdi
	movq	%rbx, %rsi
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	xorl	%eax, %eax
	testl	%eax, %eax
	jmp	.L25569
.L13957:
	cmpb	$0, 2(%rbx)
	jne	.L13956
	movq	8(%r14), %rcx
	movzbl	2(%r13), %edi
	movq	%rbx, %rdx
	movzbl	61(%rcx), %r9d
	movzbl	3(%r13), %ecx
	shrb	$1, %r9b
	shrb	$2, %cl
	movzbl	%r9b, %esi
	andl	$1, %ecx
	call	convert_modes
	movzbl	3(%r13), %ecx
	movzbl	2(%r13), %esi
	movq	8(%r13), %r14
	movq	%rax, %rdx
	movzbl	2(%r14), %edi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, %rbx
	jmp	.L13956
.L26302:
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L13954
	testb	$8, 3(%rax)
	jne	.L13955
	movq	8(%r13), %rdi
	movq	8(%rax), %rsi
	call	reg_mentioned_p
	testl	%eax, %eax
	je	.L24341
.L13955:
	movq	%rbx, %rdi
	call	copy_to_reg
	movq	%rax, %rbx
.L24341:
	movzwl	(%rbx), %edx
	jmp	.L13954
.L13952:
	cmpq	$0, 8(%rsi)
	jne	.L13951
	movzbl	3(%r13), %ecx
	movzbl	17(%rsi), %r15d
	movl	$1, %edi
	movl	%ecx, %edx
	shrb	$5, %r15b
	shrb	$2, %dl
	andl	$1, %r15d
	andl	%edx, %edi
	cmpl	%edi, %r15d
	je	.L13953
	call	signed_or_unsigned_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	convert
	movzbl	3(%r13), %ecx
	movq	%rax, %r14
.L13953:
	movq	8(%r13), %rsi
	shrb	$2, %cl
	movzbl	2(%rsi), %edi
	movl	$1, %esi
	andl	%ecx, %esi
	call	type_for_mode
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	convert
	movq	8(%r13), %rdx
	movq	%rax, %r14
	jmp	.L13951
.L26299:
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L13945
	xorl	%ecx, %ecx
	movzbl	%al, %edx
	movq	%r14, %rdi
	movq	%r13, %rsi
	call	expand_expr
	movq	%rax, -7632(%rbp)
	movq	%rax, %rcx
	movzbl	2(%rax), %eax
	cmpb	$51, %al
	je	.L13946
	testb	%al, %al
	je	.L13946
	cmpq	%r13, %rcx
	je	.L13948
	movq	%rcx, %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L26303
.L13947:
	movq	-7632(%rbp), %rdi
	call	copy_to_reg
	movq	%rax, -7632(%rbp)
.L13946:
	movl	$1, -7420(%rbp)
	jmp	.L24343
.L26303:
	movq	-7632(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L13947
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L13947
.L13948:
	movl	$1, %r12d
	jmp	.L13947
.L24340:
	movl	(%r13), %ecx
	jmp	.L13945
.L13938:
	movl	$1, %ebx
	jmp	.L13932
.L13939:
	xorl	%ebx, %ebx
	jmp	.L13932
.L13936:
	movq	8(%r13), %rdi
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L13938
	movq	16(%r13), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L13932
	jmp	.L13938
.L26206:
	cmpb	$51, 2(%r13)
	jne	.L13891
	call	gen_label_rtx
	movq	%rax, %r15
	call	gen_label_rtx
	movq	cfun(%rip), %rbx
	movq	%rax, -3768(%rbp)
	movq	16(%rbx), %rsi
	movq	40(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L23570
.L13897:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26304
	call	emit_insn
	movq	%rax, 16(%rbx)
.L13896:
	movq	cfun(%rip), %r12
	movq	40(%rbx), %rcx
	movq	16(%r12), %r10
	testq	%rcx, %rcx
	movq	%rcx, %rbx
	movq	%rcx, 40(%r10)
	jne	.L13897
.L23570:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L13899
	cmpl	$66, %eax
	je	.L26305
.L13903:
	cmpl	$75, %eax
	je	.L13907
	cmpl	$78, %eax
	je	.L13907
.L13902:
	call	do_pending_stack_adjust
	movq	cfun(%rip), %r9
	movq	%r15, %rsi
	movq	16(%r9), %r8
	incl	4(%r8)
	movq	32(%r14), %rdi
	call	jumpifnot
	call	start_cleanup_deferral
	movq	-7640(%rbp), %rsi
	movq	40(%r14), %rdi
	xorl	%edx, %edx
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %rbx
	movq	16(%rbx), %rsi
	movq	40(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L23572
.L13917:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26306
	call	emit_insn
	movq	%rax, 16(%rbx)
.L13916:
	movq	cfun(%rip), %rdi
	movq	40(%rbx), %r12
	movq	16(%rdi), %r11
	testq	%r12, %r12
	movq	%r12, %rbx
	movq	%r12, 40(%r11)
	jne	.L13917
.L23572:
	movq	-3768(%rbp), %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r15, %rdi
	call	emit_label
	call	start_cleanup_deferral
	movq	48(%r14), %rdi
	movq	-7640(%rbp), %rsi
	xorl	%edx, %edx
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %r15
	movq	16(%r15), %r14
	movq	40(%r14), %rbx
	testq	%rbx, %rbx
	je	.L23574
.L13924:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26307
	call	emit_insn
	movq	%rax, 16(%rbx)
.L13923:
	movq	cfun(%rip), %rcx
	movq	40(%rbx), %r8
	movq	16(%rcx), %r9
	testq	%r8, %r8
	movq	%r8, %rbx
	movq	%r8, 40(%r9)
	jne	.L13924
.L23574:
	movq	-3768(%rbp), %rdi
	jmp	.L25109
.L26307:
	movq	8(%rdi), %rsi
	movq	8(%rsi), %rdx
	movq	%rdx, 16(%rbx)
	call	emit_insn
	jmp	.L13923
.L26306:
	movq	8(%rdi), %r10
	movq	8(%r10), %rcx
	movq	%rcx, 16(%rbx)
	call	emit_insn
	jmp	.L13916
.L13907:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L26308
.L13909:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -7640(%rbp)
	movq	%r12, 8(%rax)
	movq	-7640(%rbp), %rax
	movq	%rbx, 16(%rax)
	jmp	.L13902
.L26308:
	cmpq	16(%r13), %rax
	jne	.L13909
	jmp	.L13902
.L26305:
	jne	.L13903
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L13902
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -7640(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L13902
.L13899:
	cmpq	$0, 16(%r13)
	je	.L26309
	movq	24(%r13), %r11
	testq	%r11, %r11
	movq	%r11, -7640(%rbp)
	jne	.L13902
	movq	8(%r13), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rdi
	movq	%rdi, -7640(%rbp)
	jmp	.L13902
.L26309:
	movq	8(%r13), %rdi
	call	copy_to_reg
	movq	%rax, -7640(%rbp)
	jmp	.L13902
.L26304:
	movq	8(%rdi), %r9
	movq	8(%r9), %r8
	movq	%r8, 16(%rbx)
	call	emit_insn
	jmp	.L13896
.L26205:
	movq	32(%r14), %rdi
	movq	const_int_rtx+512(%rip), %rsi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	call	expand_expr
	movq	cfun(%rip), %rcx
	movq	16(%rcx), %r9
	movq	40(%r9), %rbx
	testq	%rbx, %rbx
	je	.L23852
.L13887:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26310
	call	emit_insn
	movq	%rax, 16(%rbx)
.L13886:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %r11
	movq	16(%rdx), %rdi
	testq	%r11, %r11
	movq	%r11, %rbx
	movq	%r11, 40(%rdi)
	jne	.L13887
	jmp	.L23852
.L26310:
	movq	8(%rdi), %r12
	movq	8(%r12), %r10
	movq	%r10, 16(%rbx)
	call	emit_insn
	jmp	.L13886
	.p2align 6,,7
.L26097:
	movq	32(%rdx), %rdi
	movq	-6968(%rbp), %rsi
	call	jumpif
	jmp	.L12964
.L12951:
	movq	-7192(%rbp), %rax
	cmpb	$51, 2(%rax)
	je	.L12956
	cmpw	$61, (%rax)
	je	.L26311
.L12954:
	movq	-7192(%rbp), %rdi
	call	copy_to_reg
	jmp	.L12956
.L26311:
	cmpl	$52, 8(%rax)
	jbe	.L12956
	jmp	.L12954
.L12159:
	movq	-7192(%rbp), %rdi
	movq	-7184(%rbp), %rsi
	call	convert_move
	jmp	.L12138
.L12158:
	cmpb	$51, %al
	je	.L26312
.L12162:
	movq	-7192(%rbp), %r14
	cmpw	$39, (%r14)
	je	.L26313
	cmpb	$51, %al
	je	.L26314
	movq	-7192(%rbp), %rdi
	movq	-7184(%rbp), %rsi
	jmp	.L24697
.L26314:
	movq	-7192(%rbp), %rdx
	movq	-7184(%rbp), %r14
	movq	-6928(%rbp), %rdi
	movq	%rdx, -7144(%rbp)
	movq	%r14, -7152(%rbp)
	call	expr_size
	movl	$8, %edx
	movq	-7192(%rbp), %rdi
	movq	%rax, %r14
	movq	16(%rdi), %rcx
	testq	%rcx, %rcx
	je	.L12753
	movl	32(%rcx), %edx
.L12753:
	movq	-7184(%rbp), %r10
	movq	16(%r10), %rax
	testq	%rax, %rax
	je	.L12754
	cmpl	32(%rax), %edx
	jb	.L12755
.L12750:
	testq	%rax, %rax
	movl	$8, -7132(%rbp)
	je	.L12751
	movl	32(%rax), %eax
.L24688:
	movl	%eax, -7132(%rbp)
.L12751:
	movq	-7192(%rbp), %rbx
	cmpb	$51, 2(%rbx)
	jne	.L25547
	movq	-7184(%rbp), %r8
	cmpb	$51, 2(%r8)
	jne	.L25546
	movq	-7192(%rbp), %rsi
	movzwl	(%rsi), %eax
	cmpl	$71, %eax
	je	.L12762
	cmpl	$66, %eax
	je	.L26315
.L12766:
	cmpl	$75, %eax
	je	.L12770
	cmpl	$78, %eax
	je	.L12770
.L12765:
	movq	-7184(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L12775
	cmpl	$66, %eax
	je	.L26316
.L12779:
	cmpl	$75, %eax
	je	.L12783
	cmpl	$78, %eax
	je	.L12783
.L12778:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L12788
	cmpl	$66, %eax
	je	.L26317
.L12792:
	cmpl	$75, %eax
	je	.L12796
	cmpl	$78, %eax
	je	.L12796
.L12791:
	movq	-7144(%rbp), %rdx
	cmpw	$66, (%rdx)
	jne	.L25545
	movq	-7152(%rbp), %r10
	cmpw	$66, (%r10)
	jne	.L25544
	testq	%r14, %r14
	je	.L25543
	cmpw	$54, (%r14)
	je	.L26318
.L12804:
	shrl	$3, -7132(%rbp)
	xorl	%edi, %edi
	mov	-7132(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -3544(%rbp)
	testl	%r12d, %r12d
	je	.L23497
.L12937:
	movslq	%r12d,%rsi
	movl	movstr_optab(,%rsi,4), %edx
	movq	%rsi, -3552(%rbp)
	cmpl	$1317, %edx
	je	.L12923
	cmpw	$54, (%r14)
	je	.L26319
.L12927:
	testb	$2, target_flags+3(%rip)
	je	.L12928
	movq	-3552(%rbp), %rdi
	cmpw	$63, mode_bitsize(%rdi,%rdi)
.L24695:
	jbe	.L12923
.L12926:
	movslq	%edx,%rbx
	leaq	(%rbx,%rbx,4), %r11
	movq	%rbx, -3560(%rbp)
	movq	insn_data+24(,%r11,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L12930
	movq	-7144(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L12923
.L12930:
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L26320
.L12931:
	movq	72(%r15), %rax
	testq	%rax, %rax
	je	.L12932
	xorl	%esi, %esi
	movq	-3544(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L12923
.L12932:
	call	get_last_insn
	movl	$1, %edx
	movq	%r14, %rsi
	movl	%r12d, %edi
	movq	%rax, -3568(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r15), %rax
	testq	%rax, %rax
	jne	.L26321
.L12933:
	movq	-3560(%rbp), %rax
	movq	-7144(%rbp), %rdi
	movq	%rbx, %rdx
	movq	-7152(%rbp), %rsi
	movq	-3544(%rbp), %rcx
	leaq	(%rax,%rax,4), %r12
	xorl	%eax, %eax
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24488
	movq	-3568(%rbp), %rdi
	call	delete_insns_since
.L12923:
	movq	-3552(%rbp), %rdx
	movzbl	mode_wider_mode(%rdx), %r12d
	testl	%r12d, %r12d
	jne	.L12937
.L23497:
	testb	$2, target_flags+3(%rip)
	movq	-7144(%rbp), %r15
	movl	$0, volatile_ok(%rip)
	setne	%sil
	movzbl	%sil, %edi
	movq	8(%r15), %rsi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-7152(%rbp), %r10
	testb	$2, target_flags+3(%rip)
	setne	%cl
	movq	%rax, %r15
	movq	8(%r10), %rsi
	movzbl	%cl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%r14, %rsi
	movq	sizetype_tab(%rip), %r9
	movq	%rax, %rbx
	movzbl	61(%r9), %r8d
	shrb	$1, %r8b
	movzbl	%r8b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r14
	je	.L26322
.L12946:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r15, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r14, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %r8
	movq	%rax, (%rbx)
	movq	(%r12), %r10
	movq	8(%r8), %rdi
	movq	(%r10), %r9
	movq	$0, (%r9)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %rbx
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%rbx), %r14
	movq	8(%r14), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r15)
	je	.L12138
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r15, %rdx
.L24696:
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L12138
.L26322:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %rdx
	xorl	%esi, %esi
	orb	$1, 49(%rdx)
	movq	fn.1(%rip), %r12
	orb	$8, 18(%r12)
	movq	fn.1(%rip), %r11
	orb	$64, 50(%r11)
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L12946
.L24488:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L12138
.L26321:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L12933
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L12933
.L26320:
	movq	-7152(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L12923
	jmp	.L12931
.L12928:
	movq	-3552(%rbp), %r10
	cmpw	$31, mode_bitsize(%r10,%r10)
	jmp	.L24695
.L26319:
	movq	mode_mask_array(,%rsi,8), %r15
	shrq	$1, %r15
	cmpq	%r15, 8(%r14)
	jbe	.L12926
	jmp	.L12927
.L26318:
	movq	8(%r14), %r12
	xorl	%r15d, %r15d
	movl	$17, %esi
.L12817:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23486
.L12814:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %r8
	cmpq	%rsi, %r8
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L12814
.L23486:
	testl	%edi, %edi
	je	.L12807
	movslq	%edi,%rbx
	movq	%rbx, %r11
	salq	$4, %r11
	addq	optab_table+240(%rip), %r11
	cmpl	$1317, 8(%r11)
	je	.L12816
	call	get_mode_alignment
	movl	$128, %r9d
	cmpl	%eax, %r9d
	jb	.L12816
	movzbq	mode_size(%rbx), %rdi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rdi
	addq	%rax, %r15
	movq	%rdx, %r12
.L12816:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L12817
.L12807:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L12820
	movq	ix86_cost(%rip), %rdx
	mov	40(%rdx), %esi
	cmpq	%rsi, %r15
	jae	.L12804
.L12821:
	movq	-7152(%rbp), %rcx
	movq	-7144(%rbp), %r11
	movq	8(%r14), %r12
	movq	-7144(%rbp), %rbx
	testb	$2, target_flags+3(%rip)
	movq	8(%rcx), %r8
	setne	%r14b
	movq	$0, -696(%rbp)
	movl	$0, -7164(%rbp)
	xorl	%ecx, %ecx
	movq	%r8, -720(%rbp)
	movq	8(%r11), %r10
	movq	%rbx, -752(%rbp)
	movzbl	%r14b, %r9d
	leal	5(,%r9,4), %r14d
	movzwl	(%r10), %edx
	movq	%r10, -7160(%rbp)
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L12826
	cmpw	$99, %dx
	je	.L12826
	cmpw	$98, %dx
	je	.L12826
.L12825:
	movq	-7160(%rbp), %rdi
	movl	%ecx, -736(%rbp)
	xorl	%edx, %edx
	movzwl	(%rdi), %eax
	cmpw	$96, %ax
	je	.L12828
	cmpw	$98, %ax
	je	.L12828
.L12827:
	movl	%edx, -688(%rbp)
	movq	-7152(%rbp), %r15
	xorl	%ecx, %ecx
	movq	-7160(%rbp), %rdx
	movq	%r15, -728(%rbp)
	movq	%rdx, -744(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %esi
	cmpw	$1, %si
	jbe	.L12831
	cmpw	$99, %dx
	je	.L12831
	cmpw	$98, %dx
	je	.L12831
.L12830:
	movl	-688(%rbp), %eax
	movl	%ecx, -712(%rbp)
	movl	$0, -708(%rbp)
	movl	$0, -732(%rbp)
	testl	%eax, %eax
	je	.L12832
	movq	%r12, -696(%rbp)
.L12832:
	movl	-712(%rbp), %eax
	movq	%r12, -704(%rbp)
	testl	%eax, %eax
	je	.L12834
	movl	-736(%rbp), %eax
	testl	%eax, %eax
	jne	.L12833
.L12834:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L12847:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23489
.L12844:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L12844
.L23489:
	testl	%edi, %edi
	je	.L12837
	movslq	%edi,%rbx
	movq	%rbx, %r11
	salq	$4, %r11
	addq	optab_table+240(%rip), %r11
	cmpl	$1317, 8(%r11)
	je	.L12846
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L12846
	movzbq	mode_size(%rbx), %rcx
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rcx
	addq	%rax, %r15
	movq	%rdx, %r12
.L12846:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L12847
.L12837:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L12833
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23491
.L12855:
	movslq	%ecx,%rdi
	movzbl	mode_size(%rdi), %esi
	cmpl	%r14d, %esi
	cmovae	-7164(%rbp), %ecx
	movl	%ecx, -7164(%rbp)
	movzbl	mode_wider_mode(%rdi), %ecx
	testl	%ecx, %ecx
	jne	.L12855
.L23491:
	movl	-712(%rbp), %r15d
	testl	%r15d, %r15d
	jne	.L12861
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L12859
	cmpw	$54, %dx
	je	.L12859
	cmpw	$55, %dx
	je	.L12859
	cmpw	$58, %dx
	je	.L12859
	cmpw	$134, %dx
	je	.L12859
	cmpw	$56, %dx
	je	.L12859
	cmpw	$140, %dx
	je	.L12859
.L12861:
	movl	-736(%rbp), %edx
	testl	%edx, %edx
	jne	.L12833
	movq	-7160(%rbp), %r11
	movzwl	(%r11), %edx
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L12863
	cmpw	$54, %dx
	je	.L12863
	cmpw	$55, %dx
	je	.L12863
	cmpw	$58, %dx
	je	.L12863
	cmpw	$134, %dx
	je	.L12863
	cmpw	$56, %dx
	je	.L12863
	cmpw	$140, %dx
	je	.L12863
.L12833:
	cmpl	$1, %r14d
	jbe	.L12866
.L12917:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23494
.L12873:
	movslq	%ecx,%r8
	movzbl	mode_size(%r8), %r12d
	cmpl	%r14d, %r12d
	cmovae	-7164(%rbp), %ecx
	movl	%ecx, -7164(%rbp)
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L12873
.L23494:
	movl	-7164(%rbp), %r14d
	testl	%r14d, %r14d
	je	.L12866
	movslq	-7164(%rbp),%r15
	movq	%r15, %r9
	salq	$4, %r9
	addq	optab_table+240(%rip), %r9
	movl	8(%r9), %ebx
	cmpl	$1317, %ebx
	je	.L12875
	movl	-7164(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L12875
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%r10
	leaq	-752(%rbp), %r12
	leaq	(%r10,%r10,4), %rsi
	cmpq	%rdx, -704(%rbp)
	movq	$0, -7176(%rbp)
	movq	insn_data+16(,%rsi,8), %rdi
	movq	%rdx, -5976(%rbp)
	movq	%rdi, -3536(%rbp)
	jb	.L12875
	movl	-688(%rbp), %ecx
.L12915:
	testl	%ecx, %ecx
	je	.L12879
	subq	%rdx, 56(%r12)
.L12879:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L12880
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L12881
	movl	-7164(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24691:
	movq	%rax, -7176(%rbp)
.L12880:
	movl	40(%r12), %edx
	testl	%edx, %edx
	je	.L12883
	movq	24(%r12), %rdi
	movl	-7164(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24692:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L26323
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L12889
	movzbl	mode_size(%r15), %ebx
	leal	7(%rbx), %edx
	andl	$-8, %edx
.L12890:
	movq	cfun(%rip), %r9
	andl	$33554432, %esi
	movq	16(%r9), %r8
	leaq	8(%r8), %rdi
	movl	8(%r8), %ecx
	je	.L12891
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24693:
	leal	(%rax,%rcx), %esi
	movq	%r15, %rcx
	salq	$4, %rcx
	movl	%esi, (%rdi)
	addq	optab_table+384(%rip), %rcx
	movl	8(%rcx), %eax
	cmpl	$1317, %eax
	je	.L12893
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %r10
	movq	insn_data+24(,%r10,8), %rdi
	movq	(%rdi), %rax
	testq	%rax, %rax
	je	.L12894
	movq	%r14, %rdi
	movl	-7164(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L26324
.L12894:
	leaq	(%rbx,%rbx,4), %r11
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r11,8)
.L24694:
	movq	%rax, %rdi
	call	emit_insn
.L12913:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L12914
	movq	-5976(%rbp), %r14
	addq	%r14, 56(%r12)
.L12914:
	movq	48(%r12), %rsi
	movq	-5976(%rbp), %rdx
	subq	-5976(%rbp), %rsi
	cmpq	%rdx, %rsi
	movq	%rsi, 48(%r12)
	jae	.L12915
.L12875:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L12917
.L12866:
	cmpq	$0, -704(%rbp)
.L25557:
	je	.L12138
	jmp	.L25518
.L26324:
	movl	-7164(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L12894
.L12893:
	movzbl	mode_size(%r15), %ebx
	cmpl	%edx, %ebx
	je	.L26325
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r8b
	movzbl	%r8b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	setne	%dl
	movq	%rax, %rcx
	movzbl	%dl, %esi
	movq	global_rtl+16(%rip), %rdx
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L12901:
	movl	-7164(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%r9d, %r9d
	testq	%r9, %r9
	movq	%rax, %rbx
	je	.L12910
	xorl	%esi, %esi
	movq	%rax, %rdi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %ecx
	testl	%ecx, %ecx
	jne	.L26326
.L12910:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L12913
.L26326:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L12910
.L26325:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L12901
.L12891:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24693
.L12889:
	movzbl	mode_size(%r15), %r11d
	leal	1(%r11), %edx
	andl	$-2, %edx
	jmp	.L12890
.L26323:
	movq	%rax, %rsi
	movq	-7176(%rbp), %rdi
	xorl	%eax, %eax
	call	*-3536(%rbp)
	jmp	.L24694
.L12883:
	movq	24(%r12), %rdi
	movl	-7164(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24692
.L12881:
	movl	-7164(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24691
.L12863:
	movq	-7160(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -744(%rbp)
	jmp	.L12833
.L12859:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -720(%rbp)
	jmp	.L12861
.L12831:
	movl	$1, %ecx
	jmp	.L12830
.L12828:
	movl	$1, %edx
	jmp	.L12827
.L12826:
	movl	$1, %ecx
	jmp	.L12825
.L12820:
	cmpq	$2, %r15
	ja	.L12804
	jmp	.L12821
.L12796:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L26327
.L12798:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L12791
.L26327:
	cmpq	16(%r14), %rax
	jne	.L12798
	jmp	.L12791
.L26317:
	cmpb	$51, 2(%r14)
	je	.L12789
	movq	8(%r14), %r12
	cmpw	$71, (%r12)
	je	.L26328
.L12789:
	cmpl	$66, %eax
	jne	.L12792
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L12791
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%rbx, 8(%rax)
	jmp	.L12791
.L26328:
	movq	8(%r12), %rsi
	movq	%r14, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L12790
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L12791
.L12790:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24690:
	movq	%rax, %r14
	jmp	.L12791
.L12788:
	cmpq	$0, 16(%r14)
	je	.L26329
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L24690
	movq	8(%r14), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L12791
.L26329:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L24690
.L12783:
	movq	-7184(%rbp), %r8
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-7184(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-7184(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26330
.L12785:
	movq	-7184(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7152(%rbp)
	movq	%r12, 8(%rax)
	movq	-7152(%rbp), %r11
	movq	%rbx, 16(%r11)
	jmp	.L12778
.L26330:
	cmpq	16(%rcx), %rax
	jne	.L12785
	jmp	.L12778
.L26316:
	cmpb	$51, 2(%rdx)
	je	.L12776
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26331
.L12776:
	cmpl	$66, %eax
	jne	.L12779
	movq	-7184(%rbp), %r10
	xorl	%esi, %esi
	movq	8(%r10), %rdi
	call	protect_from_queue
	movq	-7184(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L12778
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -7152(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L12778
.L26331:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L12777
	movq	-7184(%rbp), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -7152(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L12778
.L12777:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24689:
	movq	%rax, -7152(%rbp)
	jmp	.L12778
.L12775:
	movq	-7184(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26332
	movq	-7184(%rbp), %rax
	movq	24(%rax), %rcx
	testq	%rcx, %rcx
	movq	%rcx, -7152(%rbp)
	jne	.L12778
	movq	-7184(%rbp), %rdi
	movq	8(%rdi), %r12
	movzbl	2(%r12), %edi
	call	gen_reg_rtx
	movq	-7184(%rbp), %r15
	movq	%rax, %rdi
	movq	8(%r15), %rsi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r9
	movq	%r9, -7152(%rbp)
	jmp	.L12778
.L26332:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24689
.L12770:
	movq	-7192(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-7192(%rbp), %r11
	movq	%rax, %r12
	movq	16(%r11), %rdi
	call	protect_from_queue
	movq	-7192(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L26333
.L12772:
	movq	-7192(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7144(%rbp)
	movq	%r12, 8(%rax)
	movq	-7144(%rbp), %r12
	movq	%rbx, 16(%r12)
	jmp	.L12765
.L26333:
	cmpq	16(%rsi), %rax
	jne	.L12772
	jmp	.L12765
.L26315:
	jne	.L12766
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, %rbx
	movq	-7192(%rbp), %rax
	cmpq	8(%rax), %rbx
	je	.L12765
	movq	%rax, %rdi
	call	copy_rtx
	movq	%rax, -7144(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L12765
.L12762:
	testq	%rcx, %rcx
	je	.L26334
	movq	-7192(%rbp), %r15
	movq	24(%r15), %r9
	testq	%r9, %r9
	movq	%r9, -7144(%rbp)
	jne	.L12765
	movq	-7192(%rbp), %r12
	movq	8(%r12), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdi
	movq	%rdi, -7144(%rbp)
	jmp	.L12765
.L26334:
	movq	-7192(%rbp), %rax
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rax, -7144(%rbp)
	jmp	.L12765
.L12755:
	testq	%rcx, %rcx
	movl	$8, -7132(%rbp)
	je	.L12751
	movl	32(%rcx), %eax
	jmp	.L24688
.L12754:
	cmpl	$7, %edx
	ja	.L12750
	jmp	.L12755
.L26313:
	movq	-6928(%rbp), %r9
	movq	8(%r9), %rdi
	call	int_size_in_bytes
	movl	%eax, -3500(%rbp)
	movq	-7192(%rbp), %rax
	cmpw	$39, (%rax)
	jne	.L25561
	movq	-7192(%rbp), %r11
	movq	8(%r11), %rcx
	movq	8(%rcx), %rsi
	movl	(%rcx), %r12d
	cmpq	$0, 8(%rsi)
	movslq	%r12d,%r8
	sete	%dl
	leaq	15(,%r8,8), %r10
	andq	$-16, %r10
	subq	%r10, %rsp
	leaq	32(%rsp), %rbx
	movzbl	%dl, %r15d
	movq	%rbx, -3512(%rbp)
	movl	%r15d, -7128(%rbp)
	movl	-7128(%rbp), %edi
	cmpl	%r12d, %edi
	movl	%edi, -7120(%rbp)
	jge	.L23480
.L12734:
	movslq	-7120(%rbp),%r14
	movq	8(%rcx,%r14,8), %r12
	movq	%r14, -3520(%rbp)
	movq	8(%r12), %rax
	movq	16(%r12), %r9
	movzbl	2(%rax), %r14d
	movq	8(%r9), %r15
	movl	-3500(%rbp), %eax
	movslq	%r14d,%rcx
	testl	%eax, %eax
	movzbl	mode_size(%rcx), %edx
	movq	%rcx, -3528(%rbp)
	movl	%edx, -7124(%rbp)
	js	.L12707
	movslq	-3500(%rbp),%rdi
	mov	%edx, %r10d
	leaq	(%r10,%r15), %rbx
	cmpq	%rdi, %rbx
	jle	.L12707
	movl	-3500(%rbp), %r8d
	subl	%r15d, %r8d
	movl	%r8d, -7124(%rbp)
	je	.L25560
.L12707:
	movq	-7184(%rbp), %r12
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L24533
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L12711
	cmpw	$54, %dx
	je	.L12711
	cmpw	$55, %dx
	je	.L12711
	cmpw	$58, %dx
	je	.L12711
	cmpw	$134, %dx
	je	.L12711
	cmpw	$56, %dx
	je	.L12711
	cmpw	$140, %dx
	je	.L12711
.L12710:
	movq	-7184(%rbp), %rdx
	movl	%r14d, %edi
	movzbl	2(%rdx), %eax
	testb	%al, %al
	je	.L24686
	movzbl	%al, %edi
.L24686:
	call	gen_reg_rtx
	movq	-7184(%rbp), %rsi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	emit_move_insn
	movzwl	(%r12), %edx
.L12709:
	cmpw	$66, %dx
	je	.L24533
.L12714:
	cmpw	$65, %dx
	je	.L26335
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L12731
	cmpw	$54, %dx
	je	.L12731
	cmpw	$55, %dx
	je	.L12731
	cmpw	$58, %dx
	je	.L12731
	cmpw	$134, %dx
	je	.L12731
	cmpw	$56, %dx
	je	.L12731
	cmpw	$140, %dx
	je	.L12731
	cmpw	$61, %dx
	je	.L26336
.L12730:
	movl	-7124(%rbp), %r8d
	movslq	-3500(%rbp),%r10
	leaq	0(,%r15,8), %rdx
	movq	%r12, %rdi
	movl	$1, %ecx
	movl	%r14d, %r9d
	movl	%r14d, (%rsp)
	sall	$3, %r8d
	mov	%r8d, %esi
	movq	%r10, 8(%rsp)
	xorl	%r8d, %r8d
	call	extract_bit_field
.L24687:
	movq	-3520(%rbp), %r12
	movq	-3512(%rbp), %r11
	movq	%rax, (%r11,%r12,8)
.L12705:
	movq	-7192(%rbp), %r9
	incl	-7120(%rbp)
	movl	-7120(%rbp), %eax
	movq	8(%r9), %rcx
	cmpl	(%rcx), %eax
	jl	.L12734
.L23480:
	movq	cfun(%rip), %r15
	movq	16(%r15), %rdi
	movq	40(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L23482
.L12740:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26337
	call	emit_insn
	movq	%rax, 16(%rbx)
.L12739:
	movq	cfun(%rip), %r10
	movq	40(%rbx), %r14
	movq	16(%r10), %rcx
	testq	%r14, %r14
	movq	%r14, %rbx
	movq	%r14, 40(%rcx)
	jne	.L12740
	movq	-7192(%rbp), %rbx
	movq	8(%rbx), %rcx
.L23482:
	movl	-7128(%rbp), %r8d
	cmpl	(%rcx), %r8d
	jge	.L12138
.L12746:
	movslq	-7128(%rbp),%r15
	movq	-3512(%rbp), %r9
	salq	$3, %r15
	movq	8(%r15,%rcx), %rsi
	movq	8(%rsi), %rdi
	movq	(%r9,%r15), %rsi
	call	emit_move_insn
	movq	-7192(%rbp), %rax
	incl	-7128(%rbp)
	movl	-7128(%rbp), %r11d
	movq	8(%rax), %r12
	cmpl	(%r12), %r11d
	movq	%r12, %rcx
	jl	.L12746
	jmp	.L12138
.L26337:
	movq	8(%rdi), %rdx
	movq	8(%rdx), %rsi
	movq	%rsi, 16(%rbx)
	call	emit_insn
	jmp	.L12739
.L26336:
	movzbl	2(%r12), %edx
	cmpl	%r14d, %edx
	jne	.L12730
.L12731:
	movq	-3520(%rbp), %rcx
	movq	-3512(%rbp), %r14
	movq	%r12, (%r14,%rcx,8)
	jmp	.L12705
.L26335:
	testq	%r15, %r15
	jne	.L24326
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %rsi
	movzbl	mode_size(%rsi), %ebx
	cmpl	%ebx, -7124(%rbp)
	je	.L12720
.L12721:
	movzbq	2(%rdx), %rdi
	movzbq	mode_size(%rdi), %r9
	cmpq	%r9, %r15
	je	.L26338
.L12719:
	testq	%r15, %r15
	jne	.L22779
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbx
	movzbq	mode_size(%rbx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %r15
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r15, %rdi
	movl	%r14d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	jmp	.L24687
.L26338:
	movq	16(%r12), %r10
	movzbq	2(%r10), %rcx
	movzbl	mode_size(%rcx), %edx
	cmpl	%edx, -7124(%rbp)
	jne	.L12719
.L12720:
	xorl	%r8d, %r8d
	movq	-3520(%rbp), %r11
	movq	-3512(%rbp), %rax
	testq	%r15, %r15
	setne	%r8b
	leaq	(%rax,%r11,8), %rbx
	movq	8(%r12,%r8,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L12705
	cmpw	$54, %dx
	je	.L12705
	cmpw	$55, %dx
	je	.L12705
	cmpw	$58, %dx
	je	.L12705
	cmpw	$134, %dx
	je	.L12705
	cmpw	$56, %dx
	je	.L12705
	cmpw	$140, %dx
	je	.L12705
	cmpw	$61, %dx
	je	.L26339
.L12725:
	movslq	-3500(%rbp),%r9
	movl	-7124(%rbp), %edi
	movl	%r14d, (%rsp)
	xorl	%edx, %edx
	movl	$1, %ecx
	xorl	%r8d, %r8d
	sall	$3, %edi
	movq	%r9, 8(%rsp)
	mov	%edi, %esi
	movl	%r14d, %r9d
	movq	(%rbx), %rdi
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L12705
.L26339:
	movzbl	2(%rcx), %r12d
	cmpl	%r14d, %r12d
	jne	.L12725
	jmp	.L12705
.L24326:
	movq	8(%r12), %rdx
	jmp	.L12721
.L24533:
	movl	%r14d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L12715
	cmpl	%eax, 32(%rdx)
	jae	.L12716
.L24325:
	movzwl	(%r12), %edx
	jmp	.L12714
.L12716:
	movl	%r14d, %edi
	leaq	0(,%r15,8), %rbx
	call	get_mode_alignment
	mov	%eax, %ecx
	movq	%rbx, %rax
	cqto
	idivq	%rcx
	testq	%rdx, %rdx
	jne	.L24325
	movq	-3528(%rbp), %rax
	movzbl	mode_size(%rax), %r10d
	cmpl	%r10d, -7124(%rbp)
	jne	.L24325
	movl	%r14d, %edi
	call	gen_reg_rtx
	movl	$1, %ecx
	movq	%r15, %rdx
	movq	-3512(%rbp), %r8
	movq	-3520(%rbp), %r11
	movq	%r12, %rdi
	movl	%r14d, %esi
	leaq	(%r8,%r11,8), %rbx
	movl	$1, %r8d
	movq	%rax, (%rbx)
	call	adjust_address_1
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L12705
.L12715:
	cmpl	$8, %eax
	ja	.L24325
	jmp	.L12716
.L12711:
	movq	-7184(%rbp), %r9
	movzbl	2(%r9), %ecx
	movzbl	%cl, %r11d
	cmpl	%r14d, %r11d
	je	.L12709
	testb	%cl, %cl
	je	.L12709
	jmp	.L12710
.L26312:
	movq	-6928(%rbp), %rdx
	cmpb	$29, 16(%rdx)
	jne	.L12162
	movq	%rdx, %rdi
	call	expr_size
	cmpw	$54, (%rax)
	movq	%rax, -7000(%rbp)
	je	.L26340
.L12163:
	movq	sizetype_tab(%rip), %rdi
	movq	-7000(%rbp), %rsi
	call	make_tree
	xorl	%esi, %esi
	movq	-6928(%rbp), %r10
	movq	%rax, %r15
	movslq	32(%r10),%rdi
	call	size_int_wide
	movq	%r15, %rsi
	movl	$78, %edi
	movq	%rax, %rdx
	call	size_binop
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	movq	%rax, -3424(%rbp)
	call	expand_expr
	xorl	%edx, %edx
	movl	ptr_mode(%rip), %edi
	movq	%rax, %rsi
	movq	$0, -7088(%rbp)
	call	convert_to_mode
	movl	$8, %edx
	movq	-7184(%rbp), %rcx
	movq	%rax, -7032(%rbp)
	movq	-7192(%rbp), %r12
	movq	-7032(%rbp), %rax
	movq	%rcx, -7048(%rbp)
	movq	%r12, -7040(%rbp)
	movq	%rax, -7056(%rbp)
	movq	16(%r12), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L12366
	movl	32(%rax), %edx
.L12366:
	movq	-7184(%rbp), %rdi
	movq	16(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L12367
	cmpl	32(%rax), %edx
	jb	.L12368
.L12363:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L12364
	movl	32(%rcx), %r15d
.L12364:
	movq	-7192(%rbp), %r11
	cmpb	$51, 2(%r11)
	jne	.L25547
	movq	-7184(%rbp), %r9
	cmpb	$51, 2(%r9)
	jne	.L25546
	movq	-7192(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L12375
	cmpl	$66, %eax
	je	.L26341
.L12379:
	cmpl	$75, %eax
	je	.L12383
	cmpl	$78, %eax
	je	.L12383
.L12378:
	movq	-7184(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L12388
	cmpl	$66, %eax
	je	.L26342
.L12392:
	cmpl	$75, %eax
	je	.L12396
	cmpl	$78, %eax
	je	.L12396
.L12391:
	movq	-7032(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L12401
	cmpl	$66, %eax
	je	.L26343
.L12405:
	cmpl	$75, %eax
	je	.L12409
	cmpl	$78, %eax
	je	.L12409
.L12404:
	movq	-7040(%rbp), %r14
	cmpw	$66, (%r14)
	jne	.L25545
	movq	-7048(%rbp), %rax
	cmpw	$66, (%rax)
	jne	.L25544
	cmpq	$0, -7056(%rbp)
	je	.L25543
	movq	-7056(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L26344
.L12417:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -3440(%rbp)
	testl	%r12d, %r12d
	je	.L23464
.L12550:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L12536
	movq	-7056(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L26345
.L12540:
	testb	$2, target_flags+3(%rip)
	je	.L12541
	cmpw	$63, mode_bitsize(%r15,%r15)
.L24680:
	jbe	.L12536
.L12539:
	movslq	%edx,%r11
	leaq	(%r11,%r11,4), %r8
	movq	%r11, -3448(%rbp)
	movq	insn_data+24(,%r8,8), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L12543
	movq	-7040(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L12536
.L12543:
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L26346
.L12544:
	movq	72(%r14), %rax
	testq	%rax, %rax
	je	.L12545
	xorl	%esi, %esi
	movq	-3440(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L12536
.L12545:
	call	get_last_insn
	movl	$1, %edx
	movq	-7056(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -3456(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r14), %rax
	testq	%rax, %rax
	jne	.L26347
.L12546:
	movq	-3448(%rbp), %rdx
	movq	-7040(%rbp), %rdi
	xorl	%eax, %eax
	movq	-7048(%rbp), %rsi
	movq	-3440(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24486
	movq	-3456(%rbp), %rdi
	call	delete_insns_since
.L12536:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L12550
.L23464:
	testb	$2, target_flags+3(%rip)
	movq	-7040(%rbp), %rcx
	movl	$0, volatile_ok(%rip)
	setne	%r14b
	movq	8(%rcx), %rsi
	movzbl	%r14b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%bl
	movq	%rax, %r14
	movq	-7048(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%bl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-7056(%rbp), %rsi
	movq	sizetype_tab(%rip), %r9
	movq	%rax, %rbx
	movzbl	61(%r9), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L26348
.L12559:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %rbx
	movq	8(%rdx), %rdi
	movq	(%rbx), %r9
	movq	$0, (%r9)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r15
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r15), %r11
	movq	8(%r11), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	jne	.L26349
.L12548:
	movq	-7032(%rbp), %rbx
	cmpw	$54, (%rbx)
	je	.L26350
	movq	sizetype_tab(%rip), %r14
	movq	optab_table+16(%rip), %rsi
	xorl	%r8d, %r8d
	movq	-7000(%rbp), %rdx
	xorl	%r9d, %r9d
	movzbl	61(%r14), %ecx
	movl	$3, (%rsp)
	shrb	$1, %cl
	movzbl	%cl, %edi
	movq	-7032(%rbp), %rcx
	call	expand_binop
	movq	-3424(%rbp), %rdi
	movq	%rax, %rbx
	call	highest_pow2_factor
	movq	-7032(%rbp), %rsi
	movq	-7192(%rbp), %rdi
	movq	%rax, %rdx
	call	offset_address
	movq	%rax, -7192(%rbp)
	call	gen_label_rtx
	xorl	%r9d, %r9d
	movq	%rax, -7088(%rbp)
	movq	const_int_rtx+512(%rip), %rsi
	movq	%rbx, %rdi
	movzbl	2(%rbx), %r8d
	movl	$107, %edx
	xorl	%ecx, %ecx
	movq	%rax, (%rsp)
	call	emit_cmp_and_jump_insns
.L12562:
	cmpq	const_int_rtx+512(%rip), %rbx
	je	.L12563
	movq	-7192(%rbp), %rdx
	cmpw	$66, (%rdx)
	movq	%rdx, -7104(%rbp)
	je	.L26351
	movq	-7192(%rbp), %rax
	movzbl	2(%rax), %edi
	call	get_mode_alignment
.L24681:
	movl	%eax, -7092(%rbp)
.L12565:
	movq	-7192(%rbp), %rsi
	movzbl	2(%rsi), %eax
	cmpb	$51, %al
	je	.L12568
	cmpw	$54, (%rbx)
	je	.L26352
.L12568:
	movq	-7192(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L12570
	cmpl	$66, %eax
	je	.L26353
.L12574:
	cmpl	$75, %eax
	je	.L12578
	cmpl	$78, %eax
	je	.L12578
.L12573:
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L12583
	cmpl	$66, %eax
	je	.L26354
.L12587:
	cmpl	$75, %eax
	je	.L12591
	cmpl	$78, %eax
	je	.L12591
.L12586:
	cmpw	$54, (%rbx)
	je	.L26355
.L12596:
	shrl	$3, -7092(%rbp)
	xorl	%edi, %edi
	mov	-7092(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r14d
	movq	%rax, -3472(%rbp)
	testl	%r14d, %r14d
	je	.L23478
.L12690:
	movslq	%r14d,%rcx
	movl	clrstr_optab(,%rcx,4), %edx
	movq	%rcx, -3480(%rbp)
	cmpl	$1317, %edx
	je	.L12677
	cmpw	$54, (%rbx)
	je	.L26356
.L12681:
	testb	$2, target_flags+3(%rip)
	je	.L12682
	movq	-3480(%rbp), %r15
	cmpw	$63, mode_bitsize(%r15,%r15)
.L24684:
	jbe	.L12677
.L12680:
	movslq	%edx,%rax
	leaq	(%rax,%rax,4), %r8
	movq	%rax, -3488(%rbp)
	movq	insn_data+24(,%r8,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L12684
	movq	-7104(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L12677
.L12684:
	movq	48(%r15), %rax
	testq	%rax, %rax
	je	.L12685
	xorl	%esi, %esi
	movq	-3472(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L12677
.L12685:
	call	get_last_insn
	movl	$1, %edx
	movq	%rbx, %rsi
	movl	%r14d, %edi
	movq	%rax, -3496(%rbp)
	call	convert_to_mode
	movq	%rax, %r12
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L26357
.L12686:
	movq	-3488(%rbp), %rcx
	movq	-7104(%rbp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	-3472(%rbp), %rdx
	leaq	(%rcx,%rcx,4), %r14
	call	*insn_data+16(,%r14,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24685
	movq	-3496(%rbp), %rdi
	call	delete_insns_since
.L12677:
	movq	-3480(%rbp), %rdx
	movzbl	mode_wider_mode(%rdx), %r14d
	testl	%r14d, %r14d
	jne	.L12690
.L23478:
	testb	$2, target_flags+3(%rip)
	movq	-7104(%rbp), %r9
	setne	%r12b
	movq	8(%r9), %rsi
	movzbl	%r12b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	sizetype_tab(%rip), %r11
	movq	%rax, %r14
	movzbl	61(%r11), %esi
	shrb	$1, %sil
	movzbl	%sil, %edi
	movq	%rbx, %rsi
	call	copy_to_mode_reg
	cmpq	$0, fn.0(%rip)
	movq	%rax, %r15
	je	.L26358
.L12695:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	const_int_rtx+512(%rip), %rsi
	movq	integer_types+40(%rip), %rdi
	movq	%rax, %r12
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.0(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %r11
	movq	8(%rdx), %rdi
	movq	(%r11), %rsi
	movq	$0, (%rsi)
	call	build_pointer_type
	movq	fn.0(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movl	$53, %edi
	movq	fn.0(%rip), %rcx
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%rcx), %r15
	movq	%r12, %rcx
	movq	8(%r15), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	jne	.L26359
.L12563:
	cmpq	$0, -7088(%rbp)
	je	.L12138
	movq	-7088(%rbp), %rdi
	call	emit_label
	jmp	.L12138
.L26359:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
.L24685:
	call	emit_insn
	jmp	.L12563
.L26358:
	movl	$.LC7, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.0(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.0(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.0, %edi
	movq	%rax, fn.0(%rip)
	call	ggc_add_tree_root
	movq	fn.0(%rip), %r8
	xorl	%esi, %esi
	orb	$1, 49(%r8)
	movq	fn.0(%rip), %r10
	orb	$8, 18(%r10)
	movq	fn.0(%rip), %rdi
	orb	$64, 50(%rdi)
	movq	fn.0(%rip), %rbx
	orb	$2, 18(%rbx)
	movq	fn.0(%rip), %rdi
	call	make_decl_rtl
	movq	fn.0(%rip), %rdi
	call	assemble_external
	jmp	.L12695
.L26357:
	movq	%r12, %rdi
	movl	%r14d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L12686
	movq	%r12, %rsi
	movl	%r14d, %edi
	call	copy_to_mode_reg
	movq	%rax, %r12
	jmp	.L12686
.L12682:
	movq	-3480(%rbp), %r10
	cmpw	$31, mode_bitsize(%r10,%r10)
	jmp	.L24684
.L26356:
	movq	mode_mask_array(,%rcx,8), %r12
	shrq	$1, %r12
	cmpq	%r12, 8(%rbx)
	jbe	.L12680
	jmp	.L12681
.L26355:
	movq	8(%rbx), %r14
	xorl	%r15d, %r15d
	movl	$17, %esi
.L12609:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23467
.L12606:
	movslq	%ecx,%r8
	movzbq	mode_size(%r8), %r11
	cmpq	%rsi, %r11
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L12606
.L23467:
	testl	%edi, %edi
	je	.L12599
	movslq	%edi,%r12
	movq	%r12, %rdx
	salq	$4, %rdx
	addq	optab_table+240(%rip), %rdx
	cmpl	$1317, 8(%rdx)
	je	.L12608
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L12608
	movzbq	mode_size(%r12), %rsi
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r14
.L12608:
	movzbq	mode_size(%r12), %rsi
	cmpq	$1, %rsi
	ja	.L12609
.L12599:
	testq	%r14, %r14
	jne	.L25529
	movl	optimize_size(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L12612
	movq	ix86_cost(%rip), %r10
	mov	40(%r10), %r14d
	cmpq	%r14, %r15
	jae	.L12596
.L12613:
	movq	8(%rbx), %r8
	movq	-7104(%rbp), %r15
	leaq	-272(%rbp), %r12
	testb	$2, target_flags+3(%rip)
	movq	$clear_by_pieces_1, -232(%rbp)
	movq	$0, -224(%rbp)
	setne	%dl
	leaq	16(%r12), %rcx
	xorl	%esi, %esi
	movq	%r15, -272(%rbp)
	movq	%r8, -248(%rbp)
	movq	8(%r15), %r8
	movq	$0, -240(%rbp)
	movl	$0, -7116(%rbp)
	movzbl	%dl, %r11d 
	movq	%r8, -264(%rbp)
	movzwl	(%r8), %edx
	leaq	5(,%r11,4), %r15
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L12617
	cmpw	$99, %dx
	je	.L12617
	cmpw	$98, %dx
	je	.L12617
.L12616:
	movl	%esi, (%rcx)
	movl	$0, 20(%r12)
	leaq	56(%r12), %rdx
	movzwl	(%r8), %eax
	xorl	%ecx, %ecx
	cmpw	$96, %ax
	je	.L12619
	cmpw	$98, %ax
	je	.L12619
.L12618:
	movl	%ecx, (%rdx)
	movl	56(%r12), %eax
	testl	%eax, %eax
	je	.L12620
	movq	24(%r12), %rdi
	movq	%rdi, 32(%r12)
.L12620:
	movl	16(%r12), %r9d
	testl	%r9d, %r9d
	jne	.L12621
	movq	24(%r12), %r14
	movq	$0, -7112(%rbp)
	movl	$17, %esi
.L12634:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23470
.L12631:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L12631
.L23470:
	testl	%edi, %edi
	je	.L12624
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L12633
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %esi
	cmpl	%eax, %esi
	jb	.L12633
	movzbq	mode_size(%rbx), %rdi
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%rdi
	addq	%rax, -7112(%rbp)
	movq	%rdx, %r14
.L12633:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L12634
.L12624:
	testq	%r14, %r14
	jne	.L25529
	cmpq	$2, -7112(%rbp)
	jbe	.L12621
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23472
.L12642:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rdx
	cmpq	%r15, %rdx
	cmovae	-7116(%rbp), %ecx
	movl	%ecx, -7116(%rbp)
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L12642
.L23472:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L12621
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L12646
	cmpw	$54, %dx
	je	.L12646
	cmpw	$55, %dx
	je	.L12646
	cmpw	$58, %dx
	je	.L12646
	cmpw	$134, %dx
	je	.L12646
	cmpw	$56, %dx
	je	.L12646
	cmpw	$140, %dx
	je	.L12646
.L12621:
	cmpq	$1, %r15
	jbe	.L12649
.L12670:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23475
.L12656:
	movslq	%ecx,%r8
	movzbq	mode_size(%r8), %rbx
	cmpq	%r15, %rbx
	cmovae	-7116(%rbp), %ecx
	movl	%ecx, -7116(%rbp)
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L12656
.L23475:
	movl	-7116(%rbp), %eax
	testl	%eax, %eax
	je	.L12649
	movslq	-7116(%rbp),%r15
	movq	%r15, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	movl	8(%rcx), %ebx
	cmpl	$1317, %ebx
	je	.L12658
	movl	-7116(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %esi
	cmpl	%eax, %esi
	jb	.L12658
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rdi
	leaq	(%rdi,%rdi,4), %r11
	cmpq	%rdx, 24(%r12)
	movq	insn_data+16(,%r11,8), %r14
	movq	%r14, -3464(%rbp)
	movq	%rdx, %r14
	jb	.L12658
	movl	56(%r12), %ecx
.L12668:
	testl	%ecx, %ecx
	je	.L12662
	subq	%rdx, 32(%r12)
.L12662:
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L12663
	movq	(%r12), %rdi
	movl	-7116(%rbp), %esi
	movl	$1, %r8d
	movq	8(%r12), %rdx
	movq	32(%r12), %rcx
	call	adjust_automodify_address_1
.L24683:
	movl	-7116(%rbp), %edx
	movq	%rax, %rbx
	movq	48(%r12), %rdi
	movq	32(%r12), %rsi
	call	*40(%r12)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	*-3464(%rbp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L12667
	addq	%r14, 32(%r12)
.L12667:
	movq	24(%r12), %r9
	movq	%r14, %rdx
	subq	%r14, %r9
	cmpq	%r14, %r9
	movq	%r9, 24(%r12)
	jae	.L12668
.L12658:
	movzbq	mode_size(%r15), %r15
	cmpq	$1, %r15
	ja	.L12670
.L12649:
	cmpq	$0, 24(%r12)
	je	.L12563
	jmp	.L25451
.L12663:
	movq	(%r12), %rdi
	movl	-7116(%rbp), %esi
	movl	$1, %ecx
	movq	32(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24683
.L12646:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, 8(%r12)
	jmp	.L12621
.L12619:
	movl	$1, %ecx
	jmp	.L12618
.L12617:
	movl	$1, %esi
	jmp	.L12616
.L12612:
	cmpq	$2, %r15
	ja	.L12596
	jmp	.L12613
.L12591:
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbx), %rdi
	movq	%rax, %r14
	call	protect_from_queue
	cmpq	8(%rbx), %r14
	movq	%rax, %r12
	je	.L26360
.L12593:
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r14, 8(%rax)
	movq	%r12, 16(%rax)
	jmp	.L12586
.L26360:
	cmpq	16(%rbx), %rax
	jne	.L12593
	jmp	.L12586
.L26354:
	cmpb	$51, 2(%rbx)
	je	.L12584
	movq	8(%rbx), %r14
	cmpw	$71, (%r14)
	je	.L26361
.L12584:
	cmpl	$66, %eax
	jne	.L12587
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%rbx), %rax
	movq	%rax, %r12
	je	.L12586
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r12, 8(%rax)
	jmp	.L12586
.L26361:
	movq	8(%r14), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r14)
	movq	%rax, %r12
	je	.L12585
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L12586
.L12585:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24682:
	movq	%rax, %rbx
	jmp	.L12586
.L12583:
	cmpq	$0, 16(%rbx)
	je	.L26362
	movq	24(%rbx), %rax
	testq	%rax, %rax
	jne	.L24682
	movq	8(%rbx), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%rbx), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	16(%rbx), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbx), %rbx
	jmp	.L12586
.L26362:
	movq	8(%rbx), %rdi
	call	copy_to_reg
	jmp	.L24682
.L12578:
	movq	-7192(%rbp), %r10
	xorl	%esi, %esi
	movq	8(%r10), %rdi
	call	protect_from_queue
	movq	-7192(%rbp), %rsi
	movq	%rax, %r14
	movq	16(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-7192(%rbp), %rdx
	movq	%rax, %r12
	cmpq	8(%rdx), %r14
	je	.L26363
.L12580:
	movq	-7192(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7104(%rbp)
	movq	%r14, 8(%rax)
	movq	-7104(%rbp), %r8
	movq	%r12, 16(%r8)
	jmp	.L12573
.L26363:
	cmpq	16(%rdx), %rax
	jne	.L12580
	jmp	.L12573
.L26353:
	jne	.L12574
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-7192(%rbp), %rcx
	movq	%rax, %r12
	cmpq	8(%rcx), %rax
	je	.L12573
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -7104(%rbp)
	movq	%r12, 8(%rax)
	jmp	.L12573
.L12570:
	movq	-7192(%rbp), %rsi
	cmpq	$0, 16(%rsi)
	je	.L26364
	movq	-7192(%rbp), %r15
	movq	24(%r15), %r11
	testq	%r11, %r11
	movq	%r11, -7104(%rbp)
	jne	.L12573
	movq	-7192(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	-7192(%rbp), %r14
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	movq	-7192(%rbp), %rcx
	movq	8(%rcx), %rsi
	call	gen_move_insn
	movq	-7192(%rbp), %r12
	movq	%rax, %rdi
	movq	16(%r12), %rsi
	call	emit_insn_before
	movq	-7192(%rbp), %r9
	movq	24(%r9), %rdx
	movq	%rdx, -7104(%rbp)
	jmp	.L12573
.L26364:
	movq	8(%rsi), %rdi
	call	copy_to_reg
	movq	%rax, -7104(%rbp)
	jmp	.L12573
.L26352:
	movzbl	%al, %edx 
	movzbl	mode_size(%rdx), %edi
	cmpl	8(%rbx), %edi
	jne	.L12568
	movq	%rsi, %rdi
	movq	const_tiny_rtx(,%rdx,8), %rsi
	call	emit_move_insn
	jmp	.L12563
.L26351:
	movq	16(%rdx), %rax
	movl	$8, -7092(%rbp)
	testq	%rax, %rax
	je	.L12565
	movl	32(%rax), %eax
	jmp	.L24681
.L26350:
	movq	8(%rbx), %rsi
	movq	-7000(%rbp), %rdi
	negq	%rsi
	call	plus_constant_wide
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-7032(%rbp), %r12
	movq	-7192(%rbp), %rdi
	movl	$51, %esi
	movq	%rax, %rbx
	movq	8(%r12), %rdx
	call	adjust_address_1
	movq	%rax, -7192(%rbp)
	jmp	.L12562
.L26349:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L12548
.L26348:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r8
	orb	$1, 49(%r8)
	movq	fn.1(%rip), %r10
	orb	$8, 18(%r10)
	movq	fn.1(%rip), %rsi
	orb	$64, 50(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L12559
.L24486:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L12548
.L26347:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L12546
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L12546
.L26346:
	movq	-7048(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L12536
	jmp	.L12544
.L12541:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L24680
.L26345:
	movq	mode_mask_array(,%r15,8), %r10
	shrq	$1, %r10
	cmpq	%r10, 8(%rsi)
	jbe	.L12539
	jmp	.L12540
.L26344:
	movq	8(%rcx), %r12
	xorl	%r14d, %r14d
	movl	$17, %esi
.L12430:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23453
.L12427:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %r11
	cmpq	%rsi, %r11
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L12427
.L23453:
	testl	%edi, %edi
	je	.L12420
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L12429
	call	get_mode_alignment
	movl	$128, %r9d
	cmpl	%eax, %r9d
	jb	.L12429
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r14
	movq	%rdx, %r12
.L12429:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L12430
.L12420:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L12433
	movq	ix86_cost(%rip), %rbx
	mov	40(%rbx), %edx
	cmpq	%rdx, %r14
	jae	.L12417
.L12434:
	movq	-7056(%rbp), %r8
	movq	-7048(%rbp), %rdi
	movq	-7040(%rbp), %r9
	movq	-7040(%rbp), %r10
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r14b
	movq	8(%rdi), %r8
	movq	$0, -696(%rbp)
	movl	$0, -7068(%rbp)
	movq	%r8, -720(%rbp)
	movzbl	%r14b, %ecx
	movq	8(%r9), %r11
	movq	%r10, -752(%rbp)
	leal	5(,%rcx,4), %r14d
	xorl	%ecx, %ecx
	movq	%r11, -7064(%rbp)
	movq	-7064(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L12439
	cmpw	$99, %dx
	je	.L12439
	cmpw	$98, %dx
	je	.L12439
.L12438:
	movq	-7064(%rbp), %rsi
	movl	%ecx, -736(%rbp)
	xorl	%edx, %edx
	movzwl	(%rsi), %eax
	cmpw	$96, %ax
	je	.L12441
	cmpw	$98, %ax
	je	.L12441
.L12440:
	movl	%edx, -688(%rbp)
	movq	-7064(%rbp), %r15
	xorl	%ecx, %ecx
	movq	-7048(%rbp), %rdx
	movq	%r15, -744(%rbp)
	movq	%rdx, -728(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L12444
	cmpw	$99, %dx
	je	.L12444
	cmpw	$98, %dx
	je	.L12444
.L12443:
	movl	-688(%rbp), %eax
	movl	%ecx, -712(%rbp)
	movl	$0, -708(%rbp)
	movl	$0, -732(%rbp)
	testl	%eax, %eax
	je	.L12445
	movq	%r12, -696(%rbp)
.L12445:
	movl	-712(%rbp), %eax
	movq	%r12, -704(%rbp)
	testl	%eax, %eax
	je	.L12447
	movl	-736(%rbp), %eax
	testl	%eax, %eax
	jne	.L12446
.L12447:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L12460:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23456
.L12457:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %r11
	cmpq	%rsi, %r11
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L12457
.L23456:
	testl	%edi, %edi
	je	.L12450
	movslq	%edi,%rbx
	movq	%rbx, %r9
	salq	$4, %r9
	addq	optab_table+240(%rip), %r9
	cmpl	$1317, 8(%r9)
	je	.L12459
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L12459
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L12459:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L12460
.L12450:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L12446
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23458
.L12468:
	movslq	%ecx,%rbx
	movzbl	mode_size(%rbx), %edx
	cmpl	%r14d, %edx
	cmovae	-7068(%rbp), %ecx
	movl	%ecx, -7068(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L12468
.L23458:
	movl	-712(%rbp), %r15d
	testl	%r15d, %r15d
	jne	.L12474
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L12472
	cmpw	$54, %dx
	je	.L12472
	cmpw	$55, %dx
	je	.L12472
	cmpw	$58, %dx
	je	.L12472
	cmpw	$134, %dx
	je	.L12472
	cmpw	$56, %dx
	je	.L12472
	cmpw	$140, %dx
	je	.L12472
.L12474:
	movl	-736(%rbp), %r8d
	testl	%r8d, %r8d
	jne	.L12446
	movq	-7064(%rbp), %r9
	movzwl	(%r9), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L12476
	cmpw	$54, %dx
	je	.L12476
	cmpw	$55, %dx
	je	.L12476
	cmpw	$58, %dx
	je	.L12476
	cmpw	$134, %dx
	je	.L12476
	cmpw	$56, %dx
	je	.L12476
	cmpw	$140, %dx
	je	.L12476
.L12446:
	cmpl	$1, %r14d
	jbe	.L12479
.L12530:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23461
.L12486:
	movslq	%ecx,%r12
	movzbl	mode_size(%r12), %edi
	cmpl	%r14d, %edi
	cmovae	-7068(%rbp), %ecx
	movl	%ecx, -7068(%rbp)
	movzbl	mode_wider_mode(%r12), %ecx
	testl	%ecx, %ecx
	jne	.L12486
.L23461:
	movl	-7068(%rbp), %r14d
	testl	%r14d, %r14d
	je	.L12479
	movslq	-7068(%rbp),%r15
	movq	%r15, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	movl	8(%rcx), %ebx
	cmpl	$1317, %ebx
	je	.L12488
	movl	-7068(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %esi
	cmpl	%eax, %esi
	jb	.L12488
	movslq	%ebx,%r10
	leaq	-752(%rbp), %r12
	movq	$0, -7080(%rbp)
	leaq	(%r10,%r10,4), %rdx
	movq	insn_data+16(,%rdx,8), %rbx
	movzbq	mode_size(%r15), %rdx
	cmpq	%rdx, -704(%rbp)
	movq	%rbx, -3432(%rbp)
	movq	%rdx, -5968(%rbp)
	jb	.L12488
	movl	-688(%rbp), %ecx
.L12528:
	testl	%ecx, %ecx
	je	.L12492
	subq	%rdx, 56(%r12)
.L12492:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L12493
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L12494
	movl	-7068(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24676:
	movq	%rax, -7080(%rbp)
.L12493:
	movl	40(%r12), %r8d
	testl	%r8d, %r8d
	je	.L12496
	movq	24(%r12), %rdi
	movl	-7068(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24677:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L26365
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L12502
	movzbl	mode_size(%r15), %r11d
	leal	7(%r11), %edx
	andl	$-8, %edx
.L12503:
	movq	cfun(%rip), %rdi
	andl	$33554432, %esi
	movq	16(%rdi), %rbx
	leaq	8(%rbx), %rdi
	movl	8(%rbx), %ecx
	je	.L12504
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24678:
	leal	(%rax,%rcx), %esi
	movq	%r15, %rcx
	salq	$4, %rcx
	movl	%esi, (%rdi)
	addq	optab_table+384(%rip), %rcx
	movl	8(%rcx), %eax
	cmpl	$1317, %eax
	je	.L12506
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %r10
	movq	insn_data+24(,%r10,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L12507
	movq	%r14, %rdi
	movl	-7068(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L26366
.L12507:
	leaq	(%rbx,%rbx,4), %r8
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r8,8)
.L24679:
	movq	%rax, %rdi
	call	emit_insn
.L12526:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L12527
	movq	-5968(%rbp), %r14
	addq	%r14, 56(%r12)
.L12527:
	movq	48(%r12), %rsi
	movq	-5968(%rbp), %rdx
	subq	-5968(%rbp), %rsi
	cmpq	%rdx, %rsi
	movq	%rsi, 48(%r12)
	jae	.L12528
.L12488:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L12530
.L12479:
	cmpq	$0, -704(%rbp)
	je	.L12548
	jmp	.L25518
.L26366:
	movl	-7068(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L12507
.L12506:
	movzbl	mode_size(%r15), %r11d
	cmpl	%edx, %r11d
	je	.L26367
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r9b
	movzbl	%r9b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L12514:
	movl	-7068(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%edi, %edi
	testq	%rdi, %rdi
	movq	%rax, %rbx
	je	.L12523
	xorl	%esi, %esi
	movq	%rax, %rdi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %ecx
	testl	%ecx, %ecx
	jne	.L26368
.L12523:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L12526
.L26368:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L12523
.L26367:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L12514
.L12504:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24678
.L12502:
	movzbl	mode_size(%r15), %r9d
	leal	1(%r9), %edx
	andl	$-2, %edx
	jmp	.L12503
.L26365:
	movq	%rax, %rsi
	movq	-7080(%rbp), %rdi
	xorl	%eax, %eax
	call	*-3432(%rbp)
	jmp	.L24679
.L12496:
	movq	24(%r12), %rdi
	movl	-7068(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24677
.L12494:
	movl	-7068(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24676
.L12476:
	movq	-7064(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -744(%rbp)
	jmp	.L12446
.L12472:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -720(%rbp)
	jmp	.L12474
.L12444:
	movl	$1, %ecx
	jmp	.L12443
.L12441:
	movl	$1, %edx
	jmp	.L12440
.L12439:
	movl	$1, %ecx
	jmp	.L12438
.L12433:
	cmpq	$2, %r14
	ja	.L12417
	jmp	.L12434
.L12409:
	movq	-7032(%rbp), %r11
	xorl	%esi, %esi
	movq	8(%r11), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-7032(%rbp), %r10
	movq	%rax, %r12
	movq	16(%r10), %rdi
	call	protect_from_queue
	movq	-7032(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26369
.L12411:
	movq	-7032(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7056(%rbp)
	movq	%r12, 8(%rax)
	movq	-7056(%rbp), %r9
	movq	%rbx, 16(%r9)
	jmp	.L12404
.L26369:
	cmpq	16(%rcx), %rax
	jne	.L12411
	jmp	.L12404
.L26343:
	cmpb	$51, 2(%rdx)
	je	.L12402
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26370
.L12402:
	cmpl	$66, %eax
	jne	.L12405
	movq	-7032(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	movq	-7032(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L12404
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -7056(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L12404
.L26370:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L12403
	movq	-7032(%rbp), %rax
	movzbl	2(%rax), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -7056(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L12404
.L12403:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24675:
	movq	%rax, -7056(%rbp)
	jmp	.L12404
.L12401:
	movq	-7032(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26371
	movq	-7032(%rbp), %rsi
	movq	24(%rsi), %rdi
	testq	%rdi, %rdi
	movq	%rdi, -7056(%rbp)
	jne	.L12404
	movq	-7032(%rbp), %r8
	movq	8(%r8), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	-7032(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdx
	movq	%rdx, -7056(%rbp)
	jmp	.L12404
.L26371:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24675
.L12396:
	movq	-7184(%rbp), %r9
	xorl	%esi, %esi
	movq	8(%r9), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-7184(%rbp), %r11
	movq	%rax, %r12
	movq	16(%r11), %rdi
	call	protect_from_queue
	movq	-7184(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26372
.L12398:
	movq	-7184(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7048(%rbp)
	movq	%r12, 8(%rax)
	movq	-7048(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L12391
.L26372:
	cmpq	16(%rcx), %rax
	jne	.L12398
	jmp	.L12391
.L26342:
	cmpb	$51, 2(%rdx)
	je	.L12389
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26373
.L12389:
	cmpl	$66, %eax
	jne	.L12392
	movq	-7184(%rbp), %r10
	xorl	%esi, %esi
	movq	8(%r10), %rdi
	call	protect_from_queue
	movq	-7184(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L12391
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -7048(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L12391
.L26373:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L12390
	movq	-7184(%rbp), %rax
	movzbl	2(%rax), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -7048(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L12391
.L12390:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24674:
	movq	%rax, -7048(%rbp)
	jmp	.L12391
.L12388:
	movq	-7184(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26374
	movq	-7184(%rbp), %rbx
	movq	24(%rbx), %rsi
	testq	%rsi, %rsi
	movq	%rsi, -7048(%rbp)
	jne	.L12391
	movq	-7184(%rbp), %r14
	movq	8(%r14), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	-7184(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdx
	movq	%rdx, -7048(%rbp)
	jmp	.L12391
.L26374:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24674
.L12383:
	movq	-7192(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-7192(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L26375
.L12385:
	movq	-7192(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7040(%rbp)
	movq	%r12, 8(%rax)
	movq	-7040(%rbp), %rsi
	movq	%rbx, 16(%rsi)
	jmp	.L12378
.L26375:
	cmpq	16(%rsi), %rax
	jne	.L12385
	jmp	.L12378
.L26341:
	jne	.L12379
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-7192(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L12378
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -7040(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L12378
.L12375:
	testq	%rsi, %rsi
	je	.L26376
	movq	-7192(%rbp), %r8
	movq	24(%r8), %rdx
	testq	%rdx, %rdx
	movq	%rdx, -7040(%rbp)
	jne	.L12378
	movq	-7192(%rbp), %r14
	movq	8(%r14), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r12
	movq	%r12, -7040(%rbp)
	jmp	.L12378
.L26376:
	movq	-7192(%rbp), %rbx
	movq	8(%rbx), %rdi
	call	copy_to_reg
	movq	%rax, -7040(%rbp)
	jmp	.L12378
.L12368:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L12364
	movl	32(%rsi), %r15d
	jmp	.L12364
.L12367:
	cmpl	$7, %edx
	ja	.L12363
	jmp	.L12368
.L26340:
	movq	-6928(%rbp), %rbx
	movq	-7000(%rbp), %rcx
	movslq	32(%rbx),%rsi
	cmpq	%rsi, 8(%rcx)
	jge	.L12163
	movq	-7192(%rbp), %r10
	movq	-7184(%rbp), %rdi
	movl	$8, %edx
	movq	%r10, -6984(%rbp)
	movq	%rdi, -6992(%rbp)
	movq	16(%r10), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L12167
	movl	32(%rax), %edx
.L12167:
	movq	-7184(%rbp), %r14
	movq	16(%r14), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L12168
	cmpl	32(%rax), %edx
	jb	.L12169
.L12164:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L12165
	movl	32(%rcx), %r15d
.L12165:
	movq	-7192(%rbp), %rdx
	cmpb	$51, 2(%rdx)
	jne	.L25547
	movq	-7184(%rbp), %r11
	cmpb	$51, 2(%r11)
	jne	.L25546
	movq	-7192(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L12176
	cmpl	$66, %eax
	je	.L26377
.L12180:
	cmpl	$75, %eax
	je	.L12184
	cmpl	$78, %eax
	je	.L12184
.L12179:
	movq	-7184(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L12189
	cmpl	$66, %eax
	je	.L26378
.L12193:
	cmpl	$75, %eax
	je	.L12197
	cmpl	$78, %eax
	je	.L12197
.L12192:
	movq	-7000(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L12202
	cmpl	$66, %eax
	je	.L26379
.L12206:
	cmpl	$75, %eax
	je	.L12210
	cmpl	$78, %eax
	je	.L12210
.L12205:
	movq	-6984(%rbp), %r8
	cmpw	$66, (%r8)
	jne	.L25545
	movq	-6992(%rbp), %rsi
	cmpw	$66, (%rsi)
	jne	.L25544
	cmpq	$0, -7000(%rbp)
	je	.L25543
	movq	-7000(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L26380
.L12218:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -3400(%rbp)
	testl	%r12d, %r12d
	je	.L23450
.L12351:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L12337
	movq	-7000(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L26381
.L12341:
	testb	$2, target_flags+3(%rip)
	je	.L12342
	cmpw	$63, mode_bitsize(%r15,%r15)
.L24673:
	jbe	.L12337
.L12340:
	movslq	%edx,%r11
	leaq	(%r11,%r11,4), %rsi
	movq	%r11, -3408(%rbp)
	movq	insn_data+24(,%rsi,8), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L12344
	movq	-6984(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L12337
.L12344:
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L26382
.L12345:
	movq	72(%r14), %rax
	testq	%rax, %rax
	je	.L12346
	xorl	%esi, %esi
	movq	-3400(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L12337
.L12346:
	call	get_last_insn
	movl	$1, %edx
	movq	-7000(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -3416(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r14), %rax
	testq	%rax, %rax
	jne	.L26383
.L12347:
	movq	-3408(%rbp), %rdx
	movq	-6984(%rbp), %rdi
	xorl	%eax, %eax
	movq	-6992(%rbp), %rsi
	movq	-3400(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24488
	movq	-3416(%rbp), %rdi
	call	delete_insns_since
.L12337:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L12351
.L23450:
	testb	$2, target_flags+3(%rip)
	movq	-6984(%rbp), %r8
	movl	$0, volatile_ok(%rip)
	setne	%cl
	movq	8(%r8), %rsi
	movzbl	%cl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-6992(%rbp), %rbx
	testb	$2, target_flags+3(%rip)
	movq	%rax, %r14
	setne	%al
	movq	8(%rbx), %rsi
	movzbl	%al, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-7000(%rbp), %rsi
	movq	sizetype_tab(%rip), %r9
	movq	%rax, %rbx
	movzbl	61(%r9), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L26384
.L12360:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %r8
	movq	8(%rdx), %rdi
	movq	(%r8), %rbx
	movq	$0, (%rbx)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r9
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r9), %r15
	movq	8(%r15), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	je	.L12138
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	jmp	.L24696
.L26384:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r11
	orb	$1, 49(%r11)
	movq	fn.1(%rip), %rsi
	orb	$8, 18(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %r10
	orb	$64, 50(%r10)
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L12360
.L26383:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L12347
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L12347
.L26382:
	movq	-6992(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L12337
	jmp	.L12345
.L12342:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L24673
.L26381:
	movq	mode_mask_array(,%r15,8), %r10
	shrq	$1, %r10
	cmpq	%r10, 8(%rsi)
	jbe	.L12340
	jmp	.L12341
.L26380:
	movq	8(%rcx), %r12
	xorl	%r14d, %r14d
	movl	$17, %esi
.L12231:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23439
.L12228:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L12228
.L23439:
	testl	%edi, %edi
	je	.L12221
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L12230
	call	get_mode_alignment
	movl	$128, %edx
	cmpl	%eax, %edx
	jb	.L12230
	movzbq	mode_size(%rbx), %r9
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r9
	addq	%rax, %r14
	movq	%rdx, %r12
.L12230:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L12231
.L12221:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L12234
	movq	ix86_cost(%rip), %rsi
	mov	40(%rsi), %r8d
	cmpq	%r8, %r14
	jae	.L12218
.L12235:
	movq	-6992(%rbp), %r11
	movq	-6984(%rbp), %rdx
	movq	-7000(%rbp), %rdi
	movq	-6984(%rbp), %r10
	testb	$2, target_flags+3(%rip)
	movq	8(%r11), %r8
	setne	%r14b
	movq	8(%rdi), %r12
	movq	$0, -616(%rbp)
	movl	$0, -7012(%rbp)
	movq	%r8, -640(%rbp)
	movq	8(%rdx), %rbx
	movq	%r10, -672(%rbp)
	movzbl	%r14b, %ecx
	leal	5(,%rcx,4), %r14d
	xorl	%ecx, %ecx
	movq	%rbx, -7008(%rbp)
	movq	-7008(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L12240
	cmpw	$99, %dx
	je	.L12240
	cmpw	$98, %dx
	je	.L12240
.L12239:
	movq	-7008(%rbp), %r9
	movl	%ecx, -656(%rbp)
	xorl	%edx, %edx
	movzwl	(%r9), %eax
	cmpw	$96, %ax
	je	.L12242
	cmpw	$98, %ax
	je	.L12242
.L12241:
	movq	-7008(%rbp), %rax
	movq	-6992(%rbp), %r15
	movl	%edx, -608(%rbp)
	xorl	%ecx, %ecx
	movq	%rax, -664(%rbp)
	movq	%r15, -648(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %esi
	cmpw	$1, %si
	jbe	.L12245
	cmpw	$99, %dx
	je	.L12245
	cmpw	$98, %dx
	je	.L12245
.L12244:
	movl	-608(%rbp), %ebx
	movl	%ecx, -632(%rbp)
	movl	$0, -628(%rbp)
	movl	$0, -652(%rbp)
	testl	%ebx, %ebx
	je	.L12246
	movq	%r12, -616(%rbp)
.L12246:
	movl	-632(%rbp), %r10d
	movq	%r12, -624(%rbp)
	testl	%r10d, %r10d
	je	.L12248
	movl	-656(%rbp), %edx
	testl	%edx, %edx
	jne	.L12247
.L12248:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L12261:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23442
.L12258:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %r9
	cmpq	%rsi, %r9
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L12258
.L23442:
	testl	%edi, %edi
	je	.L12251
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L12260
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L12260
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L12260:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L12261
.L12251:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L12247
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23444
.L12269:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %ebx
	cmpl	%r14d, %ebx
	cmovae	-7012(%rbp), %ecx
	movl	%ecx, -7012(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L12269
.L23444:
	movl	-632(%rbp), %eax
	testl	%eax, %eax
	jne	.L12275
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L12273
	cmpw	$54, %dx
	je	.L12273
	cmpw	$55, %dx
	je	.L12273
	cmpw	$58, %dx
	je	.L12273
	cmpw	$134, %dx
	je	.L12273
	cmpw	$56, %dx
	je	.L12273
	cmpw	$140, %dx
	je	.L12273
.L12275:
	movl	-656(%rbp), %edx
	testl	%edx, %edx
	jne	.L12247
	movq	-7008(%rbp), %r9
	movzwl	(%r9), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L12277
	cmpw	$54, %dx
	je	.L12277
	cmpw	$55, %dx
	je	.L12277
	cmpw	$58, %dx
	je	.L12277
	cmpw	$134, %dx
	je	.L12277
	cmpw	$56, %dx
	je	.L12277
	cmpw	$140, %dx
	je	.L12277
.L12247:
	cmpl	$1, %r14d
	jbe	.L12280
.L12331:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23447
.L12287:
	movslq	%ecx,%r8
	movzbl	mode_size(%r8), %r12d
	cmpl	%r14d, %r12d
	cmovae	-7012(%rbp), %ecx
	movl	%ecx, -7012(%rbp)
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L12287
.L23447:
	movl	-7012(%rbp), %r14d
	testl	%r14d, %r14d
	je	.L12280
	movslq	-7012(%rbp),%r15
	movq	%r15, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	movl	8(%rcx), %ebx
	cmpl	$1317, %ebx
	je	.L12289
	movl	-7012(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L12289
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%r10
	leaq	-672(%rbp), %r12
	leaq	(%r10,%r10,4), %rbx
	cmpq	%rdx, -624(%rbp)
	movq	$0, -7024(%rbp)
	movq	insn_data+16(,%rbx,8), %rsi
	movq	%rdx, -5960(%rbp)
	movq	%rsi, -3392(%rbp)
	jb	.L12289
	movl	-608(%rbp), %ecx
.L12329:
	testl	%ecx, %ecx
	je	.L12293
	subq	%rdx, 56(%r12)
.L12293:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L12294
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L12295
	movl	-7012(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24669:
	movq	%rax, -7024(%rbp)
.L12294:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L12297
	movq	24(%r12), %rdi
	movl	-7012(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24670:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L26385
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L12303
	movzbl	mode_size(%r15), %r11d
	leal	7(%r11), %edx
	andl	$-8, %edx
.L12304:
	movq	cfun(%rip), %rcx
	andl	$33554432, %esi
	movq	16(%rcx), %r8
	leaq	8(%r8), %rdi
	movl	8(%r8), %ecx
	je	.L12305
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24671:
	leal	(%rax,%rcx), %esi
	movl	%esi, (%rdi)
	movq	%r15, %rdi
	salq	$4, %rdi
	addq	optab_table+384(%rip), %rdi
	movl	8(%rdi), %eax
	cmpl	$1317, %eax
	je	.L12307
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %r10
	movq	insn_data+24(,%r10,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L12308
	movq	%r14, %rdi
	movl	-7012(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L26386
.L12308:
	leaq	(%rbx,%rbx,4), %r11
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r11,8)
.L24672:
	movq	%rax, %rdi
	call	emit_insn
.L12327:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L12328
	movq	-5960(%rbp), %r14
	addq	%r14, 56(%r12)
.L12328:
	movq	48(%r12), %rdi
	movq	-5960(%rbp), %rdx
	subq	-5960(%rbp), %rdi
	cmpq	%rdx, %rdi
	movq	%rdi, 48(%r12)
	jae	.L12329
.L12289:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L12331
.L12280:
	cmpq	$0, -624(%rbp)
	jmp	.L25557
.L26386:
	movl	-7012(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L12308
.L12307:
	movzbl	mode_size(%r15), %ebx
	cmpl	%edx, %ebx
	je	.L26387
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r8b
	movzbl	%r8b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r9b
	movzbl	%r9b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L12315:
	movl	-7012(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%ecx, %ecx
	testq	%rcx, %rcx
	movq	%rax, %rbx
	je	.L12324
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L26388
.L12324:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L12327
.L26388:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L12324
.L26387:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L12315
.L12305:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24671
.L12303:
	movzbl	mode_size(%r15), %r9d
	leal	1(%r9), %edx
	andl	$-2, %edx
	jmp	.L12304
.L26385:
	movq	%rax, %rsi
	movq	-7024(%rbp), %rdi
	xorl	%eax, %eax
	call	*-3392(%rbp)
	jmp	.L24672
.L12297:
	movq	24(%r12), %rdi
	movl	-7012(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24670
.L12295:
	movl	-7012(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24669
.L12277:
	movq	-7008(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -664(%rbp)
	jmp	.L12247
.L12273:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -640(%rbp)
	jmp	.L12275
.L12245:
	movl	$1, %ecx
	jmp	.L12244
.L12242:
	movl	$1, %edx
	jmp	.L12241
.L12240:
	movl	$1, %ecx
	jmp	.L12239
.L12234:
	cmpq	$2, %r14
	ja	.L12218
	jmp	.L12235
.L12210:
	movq	-7000(%rbp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-7000(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-7000(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26389
.L12212:
	movq	-7000(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7000(%rbp)
	movq	%r12, 8(%rax)
	movq	-7000(%rbp), %r11
	movq	%rbx, 16(%r11)
	jmp	.L12205
.L26389:
	cmpq	16(%rcx), %rax
	jne	.L12212
	jmp	.L12205
.L26379:
	cmpb	$51, 2(%rdx)
	je	.L12203
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26390
.L12203:
	cmpl	$66, %eax
	jne	.L12206
	movq	-7000(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	movq	-7000(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L12205
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -7000(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L12205
.L26390:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L12204
	movq	-7000(%rbp), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -7000(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L12205
.L12204:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24668:
	movq	%rax, -7000(%rbp)
	jmp	.L12205
.L12202:
	movq	-7000(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26391
	movq	-7000(%rbp), %rdi
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L24668
	movq	-7000(%rbp), %rax
	movq	8(%rax), %r14
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	-7000(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r9
	movq	%r9, -7000(%rbp)
	jmp	.L12205
.L26391:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24668
.L12197:
	movq	-7184(%rbp), %r11
	xorl	%esi, %esi
	movq	8(%r11), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-7184(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-7184(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26392
.L12199:
	movq	-7184(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -6992(%rbp)
	movq	%r12, 8(%rax)
	movq	-6992(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L12192
.L26392:
	cmpq	16(%rcx), %rax
	jne	.L12199
	jmp	.L12192
.L26378:
	cmpb	$51, 2(%rdx)
	je	.L12190
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26393
.L12190:
	cmpl	$66, %eax
	jne	.L12193
	movq	-7184(%rbp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	movq	-7184(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L12192
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -6992(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L12192
.L26393:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L12191
	movq	-7184(%rbp), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -6992(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L12192
.L12191:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24667:
	movq	%rax, -6992(%rbp)
	jmp	.L12192
.L12189:
	movq	-7184(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26394
	movq	-7184(%rbp), %rax
	movq	24(%rax), %r9
	testq	%r9, %r9
	movq	%r9, -6992(%rbp)
	jne	.L12192
	movq	-7184(%rbp), %rsi
	movq	8(%rsi), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	-7184(%rbp), %r14
	movq	%rax, %rdi
	movq	8(%r14), %rsi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r12
	movq	%r12, -6992(%rbp)
	jmp	.L12192
.L26394:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24667
.L12184:
	movq	-7192(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-7192(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L26395
.L12186:
	movq	-7192(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -6984(%rbp)
	movq	%r12, 8(%rax)
	movq	-6984(%rbp), %r9
	movq	%rbx, 16(%r9)
	jmp	.L12179
.L26395:
	cmpq	16(%rsi), %rax
	jne	.L12186
	jmp	.L12179
.L26377:
	jne	.L12180
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-7192(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L12179
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -6984(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L12179
.L12176:
	testq	%rsi, %rsi
	je	.L26396
	movq	-7192(%rbp), %r8
	movq	24(%r8), %r12
	testq	%r12, %r12
	movq	%r12, -6984(%rbp)
	jne	.L12179
	movq	-7192(%rbp), %r14
	movq	8(%r14), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rcx
	movq	%rcx, -6984(%rbp)
	jmp	.L12179
.L26396:
	movq	-7192(%rbp), %rax
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rax, -6984(%rbp)
	jmp	.L12179
.L12169:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L12165
	movl	32(%rsi), %r15d
	jmp	.L12165
.L12168:
	cmpl	$7, %edx
	ja	.L12164
	jmp	.L12169
.L12153:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L26397
.L12155:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -7192(%rbp)
	movq	%r12, 8(%rax)
	movq	-7192(%rbp), %rdx
	movq	%rbx, 16(%rdx)
	jmp	.L12148
.L26397:
	cmpq	16(%r13), %rax
	jne	.L12155
	jmp	.L12148
.L26096:
	jne	.L12149
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L12148
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -7192(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L12148
.L12145:
	cmpq	$0, 16(%r13)
	je	.L26398
	movq	24(%r13), %r14
	testq	%r14, %r14
	movq	%r14, -7192(%rbp)
	jne	.L12148
	movq	8(%r13), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rax
.L24666:
	movq	%rax, -7192(%rbp)
	jmp	.L12148
.L26398:
	movq	8(%r13), %rdi
	call	copy_to_reg
	jmp	.L24666
.L26095:
	movq	144(%rbx), %rax
	testq	%rax, %rax
	je	.L12140
	cmpq	%rax, %r13
	jne	.L12140
	jmp	.L12138
.L26094:
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L12138
	jmp	.L12139
	.p2align 6,,7
.L12137:
	movq	-7184(%rbp), %rsi
	cmpb	$0, 2(%rsi)
	jne	.L12136
	movq	-6928(%rbp), %rdx
	cmpb	$0, 16(%rdx)
	je	.L12136
	movq	8(%rdx), %rdx
	movzbl	2(%r13), %edi
	movzbl	61(%rdx), %ebx
	shrb	$1, %bl
	movzbl	%bl, %esi
	cmpl	%esi, %edi
	je	.L12136
	movzbl	17(%rdx), %ecx
	movq	-7184(%rbp), %rdx
	shrb	$5, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, -7184(%rbp)
	jmp	.L12136
.L24317:
	movq	-7184(%rbp), %r9
	movzwl	(%r9), %edx
	jmp	.L12059
.L24322:
	movq	-7184(%rbp), %r12
	movzwl	(%r12), %edx
	jmp	.L12059
.L26093:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	-6928(%rbp), %rdi
	movzbl	2(%r13), %edx
	movq	%rax, %rsi
	jmp	.L24665
	.p2align 6,,7
.L12098:
	xorl	%edx, %edx
	testl	%edx, %edx
	je	.L24318
	movl	(%r13), %ecx
	movl	%ecx, %ebx
	andl	$134283263, %ebx
	cmpl	$66, %ebx
	je	.L26399
.L12114:
	andl	$268500991, %ecx
	cmpl	$268435519, %ecx
	je	.L26400
	movzbl	2(%r13), %edx
	movq	-6928(%rbp), %rdi
	xorl	%ecx, %ecx
	movq	%r13, %rsi
	call	expand_expr
	cmpw	$61, (%r13)
	movq	%rax, -7184(%rbp)
	je	.L26401
.L12134:
	movl	(%r13), %eax
	andl	$134283263, %eax
	cmpl	$134217794, %eax
	je	.L24321
	movq	-7184(%rbp), %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L24322
	movq	-7184(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L12135
	cmpw	$54, %dx
	je	.L12135
	cmpw	$55, %dx
	je	.L12135
	cmpw	$58, %dx
	je	.L12135
	cmpw	$134, %dx
	je	.L12135
	cmpw	$56, %dx
	je	.L12135
	cmpw	$140, %dx
	je	.L12135
	xorl	%r11d, %r11d
	testl	%r11d, %r11d
	je	.L12059
.L12135:
	movl	$1, -6972(%rbp)
	jmp	.L12059
.L24321:
	movq	-7184(%rbp), %rcx
	movzwl	(%rcx), %edx
	jmp	.L12059
.L26401:
	cmpl	$52, 8(%r13)
	jbe	.L24320
	jmp	.L12134
.L26400:
	xorl	%r14d, %r14d
	xorl	%edx, %edx
	testl	%r14d, %r14d
	jne	.L12120
	movq	-6928(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	16(%rsi), %eax
	cmpb	$6, %al
	je	.L12121
	cmpb	$10, %al
	je	.L12121
	cmpb	$11, %al
	je	.L12121
	cmpb	$12, %al
	je	.L12121
.L12120:
	movq	%rdx, %rsi
	xorl	%ecx, %ecx
	movq	%r12, %rdi
	xorl	%edx, %edx
	call	expand_expr
	movzwl	(%rax), %edx
	movq	%rax, %rbx
	cmpw	$66, %dx
	je	.L26402
.L12123:
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L12126
	cmpw	$54, %dx
	je	.L12126
	cmpw	$55, %dx
	je	.L12126
	cmpw	$58, %dx
	je	.L12126
	cmpw	$134, %dx
	je	.L12126
	cmpw	$56, %dx
	je	.L12126
	cmpw	$140, %dx
	je	.L12126
.L12125:
	movzbl	3(%r13), %edx
	movq	8(%r13), %rdi
	movq	%rbx, %rsi
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L12956
	movzbl	2(%rbx), %edx
	movzbl	2(%r13), %eax
	cmpb	%al, %dl
	je	.L12956
	testb	%dl, %dl
	je	.L12128
	movq	%rbx, %rsi
	movzbl	%al, %edi
	call	gen_lowpart_SUBREG
	movzbl	3(%rax), %ebx
	orb	$16, %bl
	movb	%bl, 3(%rax)
	andb	$-5, %bl
	movzbl	3(%r13), %edx
	andb	$4, %dl
	orb	%dl, %bl
	movb	%bl, 3(%rax)
	jmp	.L12956
.L12128:
	movq	8(%r13), %r14
	movzbl	3(%r13), %ecx
	movzbl	%al, %edi
	movq	%rbx, %rdx
	movzbl	2(%r14), %esi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	jmp	.L12956
.L12126:
	cmpb	$0, 2(%rbx)
	jne	.L12125
	movq	8(%r12), %rsi
	movzbl	3(%r13), %ecx
	movq	%rbx, %rdx
	movzbl	2(%r13), %edi
	movzbl	61(%rsi), %r8d
	shrb	$2, %cl
	andl	$1, %ecx
	shrb	$1, %r8b
	movzbl	%r8b, %esi
	call	convert_modes
	movzbl	3(%r13), %ecx
	movzbl	2(%r13), %esi
	movq	8(%r13), %r12
	movq	%rax, %rdx
	movzbl	2(%r12), %edi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, %rbx
	jmp	.L12125
.L26402:
	xorl	%ecx, %ecx
	testl	%ecx, %ecx
	je	.L12123
	testb	$8, 3(%rax)
	jne	.L12124
	movq	8(%r13), %rdi
	movq	8(%rax), %rsi
	call	reg_mentioned_p
	testl	%eax, %eax
	je	.L24319
.L12124:
	movq	%rbx, %rdi
	call	copy_to_reg
	movq	%rax, %rbx
.L24319:
	movzwl	(%rbx), %edx
	jmp	.L12123
.L12121:
	cmpq	$0, 8(%rsi)
	jne	.L12120
	movzbl	3(%r13), %ecx
	movzbl	17(%rsi), %r10d
	movl	$1, %edi
	movl	%ecx, %r11d
	shrb	$5, %r10b
	shrb	$2, %r11b
	andl	$1, %r10d
	andl	%r11d, %edi
	cmpl	%edi, %r10d
	je	.L12122
	call	signed_or_unsigned_type
	movq	-6928(%rbp), %rsi
	movq	%rax, %rdi
	call	convert
	movzbl	3(%r13), %ecx
	movq	%rax, %r12
.L12122:
	movq	8(%r13), %r9
	shrb	$2, %cl
	movl	$1, %esi
	andl	%ecx, %esi
	movzbl	2(%r9), %edi
	call	type_for_mode
	movq	%r12, %rsi
	movq	%rax, %rdi
	call	convert
	movq	8(%r13), %rdx
	movq	%rax, %r12
	jmp	.L12120
.L26399:
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L12114
	movq	-6928(%rbp), %rdi
	movq	%r13, %rsi
	xorl	%ecx, %ecx
	movzbl	%al, %edx
	call	expand_expr
	movq	%rax, -7184(%rbp)
	movq	%rax, %rsi
	movzbl	2(%rax), %eax
	cmpb	$51, %al
	je	.L12115
	testb	%al, %al
	je	.L12115
	cmpq	%r13, %rsi
	je	.L12117
	movq	%rsi, %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L26403
.L12116:
	movq	-7184(%rbp), %rdi
	call	copy_to_reg
	movq	%rax, -7184(%rbp)
.L12115:
	movl	$1, -6972(%rbp)
	jmp	.L24317
.L26403:
	movq	-7184(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L12116
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L12116
.L12117:
	movl	$1, %r14d
	jmp	.L12116
.L24318:
	movl	(%r13), %ecx
	jmp	.L12114
.L12107:
	movl	$1, %ebx
	jmp	.L12101
	.p2align 6,,7
.L12108:
	xorl	%ebx, %ebx
	jmp	.L12101
.L12105:
	movq	8(%r13), %rdi
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L12107
	movq	16(%r13), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L12101
	jmp	.L12107
.L26092:
	cmpb	$51, 2(%r13)
	jne	.L12060
	call	gen_label_rtx
	movq	%rax, %r14
	call	gen_label_rtx
	movq	cfun(%rip), %r10
	movq	%rax, %r15
	movq	16(%r10), %rsi
	movq	40(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L23432
.L12066:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26404
	call	emit_insn
	movq	%rax, 16(%rbx)
.L12065:
	movq	cfun(%rip), %r8
	movq	40(%rbx), %r12
	movq	16(%r8), %r9
	testq	%r12, %r12
	movq	%r12, %rbx
	movq	%r12, 40(%r9)
	jne	.L12066
.L23432:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L12068
	cmpl	$66, %eax
	je	.L26405
.L12072:
	cmpl	$75, %eax
	je	.L12076
	cmpl	$78, %eax
	je	.L12076
.L12071:
	call	do_pending_stack_adjust
	movq	cfun(%rip), %r11
	movq	-6928(%rbp), %r12
	movq	%r14, %rsi
	movq	16(%r11), %rcx
	incl	4(%rcx)
	movq	32(%r12), %rdi
	call	jumpifnot
	call	start_cleanup_deferral
	movq	-7192(%rbp), %rsi
	movq	40(%r12), %rdi
	xorl	%edx, %edx
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %r10
	movq	16(%r10), %rsi
	movq	40(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L23434
.L12086:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26406
	call	emit_insn
	movq	%rax, 16(%rbx)
.L12085:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %rdi
	movq	16(%rdx), %rsi
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%rsi)
	jne	.L12086
.L23434:
	movq	%r15, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r14, %rdi
	call	emit_label
	call	start_cleanup_deferral
	movq	-6928(%rbp), %rax
	movq	-7192(%rbp), %rsi
	xorl	%edx, %edx
	movq	48(%rax), %rdi
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %rbx
	movq	16(%rbx), %r14
	movq	40(%r14), %rbx
	testq	%rbx, %rbx
	je	.L23436
.L12093:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26407
	call	emit_insn
	movq	%rax, 16(%rbx)
.L12092:
	movq	cfun(%rip), %r9
	movq	40(%rbx), %rcx
	movq	16(%r9), %r11
	testq	%rcx, %rcx
	movq	%rcx, %rbx
	movq	%rcx, 40(%r11)
	jne	.L12093
.L23436:
	movq	%r15, %rdi
	call	emit_label
	movq	cfun(%rip), %r8
	movq	16(%r8), %r15
	decl	4(%r15)
	jmp	.L12956
.L26407:
	movq	8(%rdi), %r12
	movq	8(%r12), %r10
	movq	%r10, 16(%rbx)
	call	emit_insn
	jmp	.L12092
.L26406:
	movq	8(%rdi), %r8
	movq	8(%r8), %r9
	movq	%r9, 16(%rbx)
	call	emit_insn
	jmp	.L12085
.L12076:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L26408
.L12078:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -7192(%rbp)
	movq	%r12, 8(%rax)
	movq	-7192(%rbp), %rax
	movq	%rbx, 16(%rax)
	jmp	.L12071
.L26408:
	cmpq	16(%r13), %rax
	jne	.L12078
	jmp	.L12071
.L26405:
	jne	.L12072
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L12071
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -7192(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L12071
.L12068:
	cmpq	$0, 16(%r13)
	je	.L26409
	movq	24(%r13), %rbx
	testq	%rbx, %rbx
	movq	%rbx, -7192(%rbp)
	jne	.L12071
	movq	8(%r13), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rdi
	movq	%rdi, -7192(%rbp)
	jmp	.L12071
.L26409:
	movq	8(%r13), %rdi
	call	copy_to_reg
	movq	%rax, -7192(%rbp)
	jmp	.L12071
.L26404:
	movq	8(%rdi), %r11
	movq	8(%r11), %rcx
	movq	%rcx, 16(%rbx)
	call	emit_insn
	jmp	.L12065
.L26091:
	movq	32(%r12), %rdi
	movq	const_int_rtx+512(%rip), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	cfun(%rip), %rbx
	movq	16(%rbx), %r11
	movq	40(%r11), %rbx
	testq	%rbx, %rbx
	je	.L23430
.L12056:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26410
	call	emit_insn
	movq	%rax, 16(%rbx)
.L12055:
	movq	cfun(%rip), %rdi
	movq	40(%rbx), %r9
	movq	16(%rdi), %r8
	testq	%r9, %r9
	movq	%r9, %rbx
	movq	%r9, 40(%r8)
	jne	.L12056
.L23430:
	movq	-6928(%rbp), %rdx
	movq	%r13, %rsi
	movq	40(%rdx), %rdi
	xorl	%edx, %edx
	call	store_expr
	jmp	.L12956
.L26410:
	movq	8(%rdi), %r15
	movq	8(%r15), %r12
	movq	%r12, 16(%rbx)
	call	emit_insn
	jmp	.L12055
.L26090:
	cmpl	$52, 8(%r13)
	ja	.L11967
.L11968:
	movl	-2716(%rbp), %edi
	call	gen_reg_rtx
	movq	%rax, %r13
	jmp	.L11967
.L26089:
	cmpw	$66, (%r15)
	jne	.L12049
	xorl	%esi, %esi
	movq	%r15, %rdi
	movq	%r14, %rdx
	movl	$rtx_addr_varies_p, %ecx
	call	true_dependence
	testl	%eax, %eax
	jne	.L11974
	jmp	.L12049
.L26088:
	movq	8(%r15), %r15
	cmpw	$61, (%r15)
	jne	.L12046
	cmpl	$52, 8(%r15)
	ja	.L12046
.L24484:
	xorl	%r12d, %r12d
	jmp	.L11974
.L12026:
	movq	32(%rbx), %rsi
	movq	%r14, %rdi
.L24664:
	xorl	%edx, %edx
	call	safe_from_p
	movl	%eax, %r12d
	jmp	.L11974
.L11999:
	movq	32(%rbx), %rsi
	xorl	%edx, %edx
	movq	%r14, %rdi
	xorl	%r12d, %r12d
	call	safe_from_p
	testl	%eax, %eax
	je	.L11974
	movq	%r14, %rdi
	movq	40(%rbx), %rsi
.L25104:
	xorl	%edx, %edx
	call	safe_from_p
	testl	%eax, %eax
	je	.L11974
	jmp	.L12049
.L12002:
	movzbl	%dl, %eax
	subl	$41, %eax
	cmpl	$80, %eax
	ja	.L12003
	mov	%eax, %esi
	jmp	*.L12034(,%rsi,8)
	.section	.rodata
	.align 8
	.align 4
.L12034:
	.quad	.L12013
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12031
	.quad	.L12019
	.quad	.L23173
	.quad	.L12025
	.quad	.L12026
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12003
	.quad	.L12027
	.quad	.L12003
	.quad	.L12023
	.quad	.L12004
	.text
.L12004:
	movq	32(%rbx), %rdi
	call	staticp
	testl	%eax, %eax
	jne	.L12049
	testb	$4, 18(%rbx)
	jne	.L12049
	movq	32(%rbx), %rsi
	xorl	%edx, %edx
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L12049
	movq	32(%rbx), %rbx
	movzbq	16(%rbx), %r10
	cmpb	$100, tree_code_type(%r10)
	je	.L26411
.L12003:
	testq	%r15, %r15
	jne	.L24264
	movzbl	16(%rbx), %edi
	xorl	%r12d, %r12d
	call	first_rtl_op
	cmpl	%eax, %r12d
	movl	%eax, -3384(%rbp)
	jge	.L23428
.L12041:
	movslq	%r12d,%rcx
	movq	32(%rbx,%rcx,8), %rsi
	testq	%rsi, %rsi
	jne	.L26412
.L12038:
	incl	%r12d
	cmpl	-3384(%rbp), %r12d
	jl	.L12041
.L23428:
	cmpb	$-110, 16(%rbx)
	jbe	.L11983
	movq	%r14, %rdi
	movq	%rbx, %rsi
	xorl	%r12d, %r12d
	call	*lang_hooks+80(%rip)
	testl	%eax, %eax
	je	.L11974
	jmp	.L11983
.L26412:
	xorl	%edx, %edx
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L12038
	jmp	.L24484
.L26411:
	movq	144(%rbx), %rax
	testq	%rax, %rax
	je	.L24484
	cmpw	$66, (%rax)
	jne	.L24484
	movq	8(%rax), %r15
	jmp	.L12003
.L12013:
	cmpw	$66, (%r14)
	jne	.L12003
	movq	%rbx, %rdi
	call	get_alias_set
	xorl	%edi, %edi
	movq	%rax, %rsi
	movq	16(%r14), %rax
	testq	%rax, %rax
	je	.L12018
	movq	(%rax), %rdi
.L12018:
	call	alias_sets_conflict_p
	xorl	%r12d, %r12d
	testl	%eax, %eax
	jne	.L11974
	jmp	.L12003
.L12031:
	movq	%r14, %rdi
	movq	40(%rbx), %rsi
	jmp	.L24664
.L12019:
	movzwl	(%r14), %eax
	cmpw	$61, %ax
	je	.L26413
.L12022:
	cmpw	$66, %ax
	jne	.L12003
	jmp	.L24484
.L26413:
	cmpl	$52, 8(%r14)
	jbe	.L24484
	jmp	.L12022
.L12025:
	movq	48(%rbx), %r15
	jmp	.L12003
.L12027:
	movq	48(%rbx), %r15
	testq	%r15, %r15
	jne	.L24264
	movzbl	18(%rbx), %eax
	movl	$1, %r12d
	testb	$16, %al
	jne	.L11974
	movq	32(%rbx), %rsi
	orb	$16, %al
	xorl	%edx, %edx
	movb	%al, 18(%rbx)
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L12030
	andb	$-17, 18(%rbx)
	jmp	.L24484
.L12030:
	movq	save_expr_list.2(%rip), %rdx
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	tree_cons
	movq	%rax, save_expr_list.2(%rip)
	jmp	.L12049
.L12023:
	cmpq	$0, 32(%rbx)
	jne	.L24484
	movq	40(%rbx), %r15
	jmp	.L12003
.L11989:
	cmpb	$2, %dl
	je	.L26414
	testb	%dl, %dl
	sete	%r14b
	movzbl	%r14b, %r12d
	jmp	.L11974
.L26414:
	movq	32(%rbx), %rsi
	xorl	%r12d, %r12d
	testq	%rsi, %rsi
	jne	.L26415
.L11992:
	movq	(%rbx), %rsi
	movq	%r14, %rdi
	testq	%rsi, %rsi
	jne	.L25104
	jmp	.L12049
.L26415:
	xorl	%edx, %edx
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L11974
	jmp	.L11992
.L26087:
	xorl	%edx, %edx
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	$0, save_expr_list.2(%rip)
	call	safe_from_p
	movq	save_expr_list.2(%rip), %rdx
	movl	%eax, %r12d
	testq	%rdx, %rdx
	je	.L11974
.L11982:
	movq	24(%rdx), %r9
	andb	$-17, 18(%r9)
	movq	(%rdx), %rdx
	testq	%rdx, %rdx
	jne	.L11982
	jmp	.L11974
.L26086:
	movq	8(%r13), %r14
	cmpw	$61, (%r14)
	jne	.L11975
	cmpl	$52, 8(%r14)
	jbe	.L24484
	jmp	.L11975
.L26085:
	movq	8(%r13), %rax
	movq	global_rtl+72(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L12049
	cmpw	$75, (%rax)
	jne	.L11970
	cmpq	%rdx, 8(%rax)
	jne	.L11970
	jmp	.L12049
.L26084:
	movq	112(%rax), %rax
	testq	%rax, %rax
	je	.L11973
	cmpb	$25, 16(%rax)
	jne	.L11973
	jmp	.L11972
	.p2align 6,,7
.L11966:
	movl	-6220(%rbp), %edi
	xorl	%esi, %esi
	testl	%edi, %edi
	je	.L12962
	movq	const_int_rtx+512(%rip), %rsi
.L12962:
	movq	-6928(%rbp), %rdi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	jmp	.L12956
.L11965:
	testq	%r13, %r13
	je	.L16684
	movq	-9552(%rbp), %r11
	movq	32(%r11), %rdx
	movzbq	16(%rdx), %rsi
	cmpb	$60, tree_code_type(%rsi)
	je	.L26416
.L14788:
	testq	%r13, %r13
	je	.L16684
	movq	-9552(%rbp), %r11
	movq	32(%r11), %rdx
	movzbq	16(%rdx), %rsi
	cmpb	$60, tree_code_type(%rsi)
	je	.L26417
.L16684:
	call	gen_label_rtx
	movq	-6968(%rbp), %rsi
	movq	-9552(%rbp), %r11
	movq	%rax, -8992(%rbp)
	movq	32(%r11), %rdi
	call	jumpifnot
	call	start_cleanup_deferral
	testq	%r13, %r13
	je	.L18580
	movq	-9552(%rbp), %r12
	movq	global_trees+216(%rip), %rdi
	movq	40(%r12), %r14
	cmpq	%rdi, 8(%r14)
	je	.L18580
	movq	%r13, -8760(%rbp)
	movl	$0, -8540(%rbp)
	xorl	%r15d, %r15d
	movzbl	16(%r14), %eax
	movq	%r14, %r12
	cmpb	$47, %al
	je	.L26418
	cmpb	$51, %al
	je	.L26419
.L18591:
	movzwl	(%r13), %eax
	subl	$66, %eax
	cmpl	$12, %eax
	ja	.L18639
	mov	%eax, %edi
	jmp	*.L18640(,%rdi,8)
	.section	.rodata
	.align 8
	.align 4
.L18640:
	.quad	.L18633
	.quad	.L18639
	.quad	.L18639
	.quad	.L18639
	.quad	.L18639
	.quad	.L18638
	.quad	.L18639
	.quad	.L18639
	.quad	.L18639
	.quad	.L18636
	.quad	.L18636
	.quad	.L18639
	.quad	.L18636
	.text
.L18633:
	movq	8(%r13), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L18632:
	testl	%ebx, %ebx
	je	.L18629
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L18641
	testb	%al, %al
	jne	.L26420
.L18641:
	movzbl	2(%r13), %edx
	movq	%r14, %rdi
	xorl	%esi, %esi
.L24897:
	xorl	%ecx, %ecx
	call	expand_expr
	testb	$8, 3(%r13)
	movq	%rax, -8752(%rbp)
	jne	.L24399
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L24394
	movl	$1, -8540(%rbp)
.L24398:
	movq	-8752(%rbp), %r12
	movzwl	(%r12), %edx
.L18590:
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L18668
	cmpw	$54, %dx
	je	.L18668
	cmpw	$55, %dx
	je	.L18668
	cmpw	$58, %dx
	je	.L18668
	cmpw	$134, %dx
	je	.L18668
	cmpw	$56, %dx
	je	.L18668
	cmpw	$140, %dx
	je	.L18668
.L18667:
	movq	-8752(%rbp), %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	je	.L18670
	cmpq	%r13, -8752(%rbp)
	je	.L18669
	movq	-8752(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L26421
.L18670:
	movzbl	16(%r14), %eax
	testb	%al, %al
	je	.L18669
	testl	%r15d, %r15d
	jne	.L18669
	movzbl	%al, %r10d 
	cmpb	$100, tree_code_type(%r10)
	je	.L26422
.L18671:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L18676
	cmpl	$66, %eax
	je	.L26423
.L18680:
	cmpl	$75, %eax
	je	.L18684
	cmpl	$78, %eax
	je	.L18684
.L18679:
	movq	-8752(%rbp), %rbx
	movq	-8760(%rbp), %r9
	movzbl	2(%rbx), %eax
	movzbl	2(%r9), %ecx
	cmpb	%cl, %al
	je	.L18689
	testb	%al, %al
	je	.L18689
	movq	8(%r14), %rsi
	movl	-8540(%rbp), %eax
	movzbl	17(%rsi), %r14d
	shrb	$5, %r14b
	movl	%r14d, %edx
	andl	$1, %edx
	testl	%eax, %eax
	je	.L18690
	movzbl	%cl, %edi
	movq	%rbx, %rsi
	call	convert_to_mode
	movq	-8760(%rbp), %rdi
	movq	%rax, %rsi
	movq	%rax, -8752(%rbp)
.L24928:
	call	emit_move_insn
.L18669:
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L19487
	movl	-8540(%rbp), %esi
	testl	%esi, %esi
	je	.L19482
	movq	-8752(%rbp), %r15
	cmpw	$66, (%r15)
	je	.L19482
.L19487:
	call	end_cleanup_deferral
	movq	cfun(%rip), %rcx
	movq	16(%rcx), %r10
	movq	40(%r10), %rbx
	testq	%rbx, %rbx
	je	.L23990
.L19499:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26424
	call	emit_insn
	movq	%rax, 16(%rbx)
.L19498:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %r14
	movq	16(%rdx), %r9
	testq	%r14, %r14
	movq	%r14, %rbx
	movq	%r14, 40(%r9)
	jne	.L19499
.L23990:
	movq	-8992(%rbp), %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	-6968(%rbp), %rdi
	call	emit_label
	call	start_cleanup_deferral
	testq	%r13, %r13
	je	.L19501
	movq	-9552(%rbp), %rdi
	movq	global_trees+216(%rip), %rbx
	movq	48(%rdi), %r14
	cmpq	%rbx, 8(%r14)
	je	.L19501
	movq	%r13, -8984(%rbp)
	movl	$0, -8764(%rbp)
	xorl	%r15d, %r15d
	movzbl	16(%r14), %eax
	movq	%r14, %r12
	cmpb	$47, %al
	je	.L26425
	cmpb	$51, %al
	je	.L26426
.L19512:
	movzwl	(%r13), %eax
	subl	$66, %eax
	cmpl	$12, %eax
	ja	.L19560
	mov	%eax, %edi
	jmp	*.L19561(,%rdi,8)
	.section	.rodata
	.align 8
	.align 4
.L19561:
	.quad	.L19554
	.quad	.L19560
	.quad	.L19560
	.quad	.L19560
	.quad	.L19560
	.quad	.L19559
	.quad	.L19560
	.quad	.L19560
	.quad	.L19560
	.quad	.L19557
	.quad	.L19557
	.quad	.L19560
	.quad	.L19557
	.text
.L19554:
	movq	8(%r13), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L19553:
	testl	%ebx, %ebx
	je	.L19550
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L19562
	testb	%al, %al
	jne	.L26427
.L19562:
	movzbl	2(%r13), %edx
	movq	%r14, %rdi
	xorl	%esi, %esi
.L24930:
	xorl	%ecx, %ecx
	call	expand_expr
	testb	$8, 3(%r13)
	movq	%rax, -8976(%rbp)
	jne	.L24410
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L24405
	movl	$1, -8764(%rbp)
.L24408:
	movq	-8976(%rbp), %rsi
	movzwl	(%rsi), %edx
.L19511:
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L19589
	cmpw	$54, %dx
	je	.L19589
	cmpw	$55, %dx
	je	.L19589
	cmpw	$58, %dx
	je	.L19589
	cmpw	$134, %dx
	je	.L19589
	cmpw	$56, %dx
	je	.L19589
	cmpw	$140, %dx
	je	.L19589
.L19588:
	movq	-8976(%rbp), %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	je	.L19591
	cmpq	%r13, -8976(%rbp)
	je	.L19590
	movq	-8976(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L26428
.L19591:
	movzbl	16(%r14), %eax
	testb	%al, %al
	je	.L19590
	testl	%r15d, %r15d
	jne	.L19590
	movzbl	%al, %r11d 
	cmpb	$100, tree_code_type(%r11)
	je	.L26429
.L19592:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L19597
	cmpl	$66, %eax
	je	.L26430
.L19601:
	cmpl	$75, %eax
	je	.L19605
	cmpl	$78, %eax
	je	.L19605
.L19600:
	movq	-8976(%rbp), %rbx
	movq	-8984(%rbp), %r10
	movzbl	2(%rbx), %eax
	movzbl	2(%r10), %ecx
	cmpb	%cl, %al
	je	.L19610
	testb	%al, %al
	je	.L19610
	movq	8(%r14), %r12
	movl	-8764(%rbp), %r14d
	movzbl	17(%r12), %esi
	shrb	$5, %sil
	movl	%esi, %edx
	andl	$1, %edx
	testl	%r14d, %r14d
	je	.L19611
	movzbl	%cl, %edi
	movq	%rbx, %rsi
	call	convert_to_mode
	movq	-8984(%rbp), %rdi
	movq	%rax, %rsi
	movq	%rax, -8976(%rbp)
.L24961:
	call	emit_move_insn
.L19590:
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L14787
	movl	-8764(%rbp), %esi
	testl	%esi, %esi
	je	.L20403
	movq	-8976(%rbp), %r15
	cmpw	$66, (%r15)
	jne	.L14787
.L20403:
	movq	-8984(%rbp), %rax
	cmpb	$51, 2(%rax)
	je	.L14787
	cmpw	$61, (%rax)
	je	.L26431
.L20406:
	movq	-8984(%rbp), %rdi
	call	copy_to_reg
	jmp	.L14787
.L26431:
	cmpl	$52, 8(%rax)
	jbe	.L14787
	jmp	.L20406
.L19611:
	movq	-8984(%rbp), %rdi
	movq	-8976(%rbp), %rsi
	call	convert_move
	jmp	.L19590
.L19610:
	cmpb	$51, %al
	je	.L26432
.L19614:
	movq	-8984(%rbp), %r9
	cmpw	$39, (%r9)
	je	.L26433
	cmpb	$51, %al
	je	.L26434
	movq	-8984(%rbp), %rdi
	movq	-8976(%rbp), %rsi
	jmp	.L24961
.L26434:
	movq	-8976(%rbp), %rcx
	movq	-8984(%rbp), %r9
	movq	%r14, %rdi
	movq	%rcx, -8944(%rbp)
	movq	%r9, -8936(%rbp)
	call	expr_size
	movq	-8984(%rbp), %rsi
	movq	%rax, %r14
	movl	$8, %edx
	movq	16(%rsi), %rcx
	testq	%rcx, %rcx
	je	.L20205
	movl	32(%rcx), %edx
.L20205:
	movq	-8976(%rbp), %rdi
	movq	16(%rdi), %rax
	testq	%rax, %rax
	je	.L20206
	cmpl	32(%rax), %edx
	jb	.L20207
.L20202:
	testq	%rax, %rax
	movl	$8, -8924(%rbp)
	je	.L20203
	movl	32(%rax), %eax
.L24952:
	movl	%eax, -8924(%rbp)
.L20203:
	movq	-8984(%rbp), %r10
	cmpb	$51, 2(%r10)
	jne	.L25547
	movq	-8976(%rbp), %r8
	cmpb	$51, 2(%r8)
	jne	.L25546
	movq	-8984(%rbp), %rsi
	movzwl	(%rsi), %eax
	cmpl	$71, %eax
	je	.L20214
	cmpl	$66, %eax
	je	.L26435
.L20218:
	cmpl	$75, %eax
	je	.L20222
	cmpl	$78, %eax
	je	.L20222
.L20217:
	movq	-8976(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L20227
	cmpl	$66, %eax
	je	.L26436
.L20231:
	cmpl	$75, %eax
	je	.L20235
	cmpl	$78, %eax
	je	.L20235
.L20230:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L20240
	cmpl	$66, %eax
	je	.L26437
.L20244:
	cmpl	$75, %eax
	je	.L20248
	cmpl	$78, %eax
	je	.L20248
.L20243:
	movq	-8936(%rbp), %r9
	cmpw	$66, (%r9)
	jne	.L25545
	movq	-8944(%rbp), %r10
	cmpw	$66, (%r10)
	jne	.L25544
	testq	%r14, %r14
	je	.L25543
	cmpw	$54, (%r14)
	je	.L26438
.L20256:
	shrl	$3, -8924(%rbp)
	xorl	%edi, %edi
	mov	-8924(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -5096(%rbp)
	testl	%r12d, %r12d
	je	.L24059
.L20389:
	movslq	%r12d,%rsi
	movl	movstr_optab(,%rsi,4), %edx
	movq	%rsi, -5104(%rbp)
	cmpl	$1317, %edx
	je	.L20375
	cmpw	$54, (%r14)
	je	.L26439
.L20379:
	testb	$2, target_flags+3(%rip)
	je	.L20380
	movq	-5104(%rbp), %rbx
	cmpw	$63, mode_bitsize(%rbx,%rbx)
.L24959:
	jbe	.L20375
.L20378:
	movslq	%edx,%r11
	leaq	(%r11,%r11,4), %r10
	movq	%r11, -5112(%rbp)
	movq	insn_data+24(,%r10,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L20382
	movq	-8936(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L20375
.L20382:
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L26440
.L20383:
	movq	72(%r15), %rax
	testq	%rax, %rax
	je	.L20384
	xorl	%esi, %esi
	movq	-5096(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L20375
.L20384:
	call	get_last_insn
	movl	$1, %edx
	movq	%r14, %rsi
	movl	%r12d, %edi
	movq	%rax, -5120(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r15), %rax
	testq	%rax, %rax
	jne	.L26441
.L20385:
	movq	-5112(%rbp), %rax
	movq	-8936(%rbp), %rdi
	movq	%rbx, %rdx
	movq	-8944(%rbp), %rsi
	movq	-5096(%rbp), %rcx
	leaq	(%rax,%rax,4), %r12
	xorl	%eax, %eax
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24522
	movq	-5120(%rbp), %rdi
	call	delete_insns_since
.L20375:
	movq	-5104(%rbp), %r8
	movzbl	mode_wider_mode(%r8), %r12d
	testl	%r12d, %r12d
	jne	.L20389
.L24059:
	testb	$2, target_flags+3(%rip)
	movq	-8936(%rbp), %r15
	movl	$0, volatile_ok(%rip)
	setne	%bl
	movq	8(%r15), %rsi
	movzbl	%bl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-8944(%rbp), %rdx
	testb	$2, target_flags+3(%rip)
	setne	%sil
	movq	%rax, %r15
	movzbl	%sil, %edi
	movq	8(%rdx), %rsi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%r14, %rsi
	movq	sizetype_tab(%rip), %rdi
	movq	%rax, %rbx
	movzbl	61(%rdi), %ecx
	shrb	$1, %cl
	movzbl	%cl, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r14
	je	.L26442
.L20398:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r15, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r14, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rcx
	movq	%rax, (%rbx)
	movq	(%r12), %rdx
	movq	(%rdx), %rdi
	movq	$0, (%rdi)
	movq	8(%rcx), %rdi
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	movq	%r12, %rcx
	movl	$53, %edi
	movq	fn.1(%rip), %r8
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%r8), %r14
	xorl	%r8d, %r8d
	movq	8(%r14), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r15)
	je	.L19590
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r15, %rdx
.L24960:
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L19590
.L26442:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r12
	xorl	%esi, %esi
	orb	$1, 49(%r12)
	movq	fn.1(%rip), %r11
	orb	$8, 18(%r11)
	movq	fn.1(%rip), %r10
	orb	$64, 50(%r10)
	movq	fn.1(%rip), %r9
	orb	$2, 18(%r9)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L20398
.L24522:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L19590
.L26441:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L20385
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L20385
.L26440:
	movq	-8944(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L20375
	jmp	.L20383
.L20380:
	movq	-5104(%rbp), %r9
	cmpw	$31, mode_bitsize(%r9,%r9)
	jmp	.L24959
.L26439:
	movq	mode_mask_array(,%rsi,8), %r15
	shrq	$1, %r15
	cmpq	%r15, 8(%r14)
	jbe	.L20378
	jmp	.L20379
.L26438:
	movq	8(%r14), %r12
	xorl	%r15d, %r15d
	movl	$17, %esi
.L20269:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L24048
.L20266:
	movslq	%ecx,%r8
	movzbq	mode_size(%r8), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L20266
.L24048:
	testl	%edi, %edi
	je	.L20259
	movslq	%edi,%rbx
	movq	%rbx, %r11
	salq	$4, %r11
	addq	optab_table+240(%rip), %r11
	cmpl	$1317, 8(%r11)
	je	.L20268
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L20268
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L20268:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L20269
.L20259:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L20272
	movq	ix86_cost(%rip), %r9
	mov	40(%r9), %ebx
	cmpq	%rbx, %r15
	jae	.L20256
.L20273:
	movq	-8944(%rbp), %rcx
	testb	$2, target_flags+3(%rip)
	movq	-8936(%rbp), %rdi
	movq	8(%r14), %r12
	setne	%r14b
	movq	-8936(%rbp), %r11
	movq	8(%rcx), %r8
	xorl	%ecx, %ecx
	movq	$0, -1976(%rbp)
	movl	$0, -8956(%rbp)
	movq	%r8, -2000(%rbp)
	movzbl	%r14b, %edx
	movq	8(%rdi), %r10
	leal	5(,%rdx,4), %r14d
	movq	%r11, -2032(%rbp)
	movzwl	(%r10), %edx
	movq	%r10, -8952(%rbp)
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L20278
	cmpw	$99, %dx
	je	.L20278
	cmpw	$98, %dx
	je	.L20278
.L20277:
	movq	-8952(%rbp), %rbx
	movl	%ecx, -2016(%rbp)
	xorl	%edx, %edx
	movzwl	(%rbx), %eax
	cmpw	$96, %ax
	je	.L20280
	cmpw	$98, %ax
	je	.L20280
.L20279:
	movq	-8952(%rbp), %r15
	movq	-8944(%rbp), %r9
	movl	%edx, -1968(%rbp)
	xorl	%ecx, %ecx
	movq	%r15, -2024(%rbp)
	movq	%r9, -2008(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %esi
	cmpw	$1, %si
	jbe	.L20283
	cmpw	$99, %dx
	je	.L20283
	cmpw	$98, %dx
	je	.L20283
.L20282:
	movl	-1968(%rbp), %eax
	movl	%ecx, -1992(%rbp)
	movl	$0, -1988(%rbp)
	movl	$0, -2012(%rbp)
	testl	%eax, %eax
	je	.L20284
	movq	%r12, -1976(%rbp)
.L20284:
	movl	-1992(%rbp), %eax
	movq	%r12, -1984(%rbp)
	testl	%eax, %eax
	je	.L20286
	movl	-2016(%rbp), %r10d
	testl	%r10d, %r10d
	jne	.L20285
.L20286:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L20299:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L24051
.L20296:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L20296
.L24051:
	testl	%edi, %edi
	je	.L20289
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L20298
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L20298
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L20298:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L20299
.L20289:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L20285
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L24053
.L20307:
	movslq	%ecx,%rbx
	movzbl	mode_size(%rbx), %r9d
	cmpl	%r14d, %r9d
	cmovae	-8956(%rbp), %ecx
	movl	%ecx, -8956(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L20307
.L24053:
	movl	-1992(%rbp), %r15d
	testl	%r15d, %r15d
	jne	.L20313
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L20311
	cmpw	$54, %dx
	je	.L20311
	cmpw	$55, %dx
	je	.L20311
	cmpw	$58, %dx
	je	.L20311
	cmpw	$134, %dx
	je	.L20311
	cmpw	$56, %dx
	je	.L20311
	cmpw	$140, %dx
	je	.L20311
.L20313:
	movl	-2016(%rbp), %eax
	testl	%eax, %eax
	jne	.L20285
	movq	-8952(%rbp), %rcx
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L20315
	cmpw	$54, %dx
	je	.L20315
	cmpw	$55, %dx
	je	.L20315
	cmpw	$58, %dx
	je	.L20315
	cmpw	$134, %dx
	je	.L20315
	cmpw	$56, %dx
	je	.L20315
	cmpw	$140, %dx
	je	.L20315
.L20285:
	cmpl	$1, %r14d
	jbe	.L20318
.L20369:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L24056
.L20325:
	movslq	%ecx,%r8
	movzbl	mode_size(%r8), %edx
	cmpl	%r14d, %edx
	cmovae	-8956(%rbp), %ecx
	movl	%ecx, -8956(%rbp)
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L20325
.L24056:
	movl	-8956(%rbp), %r14d
	testl	%r14d, %r14d
	je	.L20318
	movslq	-8956(%rbp),%r15
	movq	%r15, %r12
	salq	$4, %r12
	addq	optab_table+240(%rip), %r12
	movl	8(%r12), %ebx
	cmpl	$1317, %ebx
	je	.L20327
	movl	-8956(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L20327
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%r9
	leaq	-2032(%rbp), %r12
	leaq	(%r9,%r9,4), %rbx
	cmpq	%rdx, -1984(%rbp)
	movq	$0, -8968(%rbp)
	movq	insn_data+16(,%rbx,8), %rsi
	movq	%rdx, -6168(%rbp)
	movq	%rsi, -5088(%rbp)
	jb	.L20327
	movl	-1968(%rbp), %ecx
.L20367:
	testl	%ecx, %ecx
	je	.L20331
	subq	%rdx, 56(%r12)
.L20331:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L20332
	movl	16(%r12), %r10d
	testl	%r10d, %r10d
	je	.L20333
	movl	-8956(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24955:
	movq	%rax, -8968(%rbp)
.L20332:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L20335
	movq	24(%r12), %rdi
	movl	-8956(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24956:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L26443
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L20341
	movzbl	mode_size(%r15), %r11d
	leal	7(%r11), %edx
	andl	$-8, %edx
.L20342:
	movq	cfun(%rip), %rdi
	andl	$33554432, %esi
	movq	16(%rdi), %r8
	leaq	8(%r8), %rdi
	movl	8(%r8), %ecx
	je	.L20343
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24957:
	movq	%r15, %rsi
	leal	(%rax,%rcx), %ebx
	salq	$4, %rsi
	movl	%ebx, (%rdi)
	addq	optab_table+384(%rip), %rsi
	movl	8(%rsi), %eax
	cmpl	$1317, %eax
	je	.L20345
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %r9
	movq	insn_data+24(,%r9,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L20346
	movq	%r14, %rdi
	movl	-8956(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L26444
.L20346:
	leaq	(%rbx,%rbx,4), %r10
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r10,8)
.L24958:
	movq	%rax, %rdi
	call	emit_insn
.L20365:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L20366
	movq	-6168(%rbp), %r14
	addq	%r14, 56(%r12)
.L20366:
	movq	48(%r12), %rsi
	movq	-6168(%rbp), %rdx
	subq	-6168(%rbp), %rsi
	cmpq	%rdx, %rsi
	movq	%rsi, 48(%r12)
	jae	.L20367
.L20327:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L20369
.L20318:
	cmpq	$0, -1984(%rbp)
.L25549:
	je	.L19590
	jmp	.L25518
.L26444:
	movl	-8956(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L20346
.L20345:
	movzbl	mode_size(%r15), %r11d
	cmpl	%edx, %r11d
	je	.L26445
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	testb	$2, target_flags+3(%rip)
	setne	%dil
	movq	%rax, %rcx
	movzbl	%dil, %esi
	movl	$75, %edi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r8b
	movzbl	%r8b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L20353:
	movl	-8956(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%ecx, %ecx
	testq	%rcx, %rcx
	movq	%rax, %rbx
	je	.L20362
	xorl	%esi, %esi
	movl	$1, %edx
	movq	%rax, %rdi
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %edx
	testl	%edx, %edx
	jne	.L26446
.L20362:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L20365
.L26446:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L20362
.L26445:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L20353
.L20343:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24957
.L20341:
	movzbl	mode_size(%r15), %ecx
	leal	1(%rcx), %edx
	andl	$-2, %edx
	jmp	.L20342
.L26443:
	movq	%rax, %rsi
	movq	-8968(%rbp), %rdi
	xorl	%eax, %eax
	call	*-5088(%rbp)
	jmp	.L24958
.L20335:
	movq	24(%r12), %rdi
	movl	-8956(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24956
.L20333:
	movl	-8956(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24955
.L20315:
	movq	-8952(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -2024(%rbp)
	jmp	.L20285
.L20311:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -2000(%rbp)
	jmp	.L20313
.L20283:
	movl	$1, %ecx
	jmp	.L20282
.L20280:
	movl	$1, %edx
	jmp	.L20279
.L20278:
	movl	$1, %ecx
	jmp	.L20277
.L20272:
	cmpq	$2, %r15
	ja	.L20256
	jmp	.L20273
.L20248:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L26447
.L20250:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L20243
.L26447:
	cmpq	16(%r14), %rax
	jne	.L20250
	jmp	.L20243
.L26437:
	cmpb	$51, 2(%r14)
	je	.L20241
	movq	8(%r14), %r12
	cmpw	$71, (%r12)
	je	.L26448
.L20241:
	cmpl	$66, %eax
	jne	.L20244
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L20243
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%rbx, 8(%rax)
	jmp	.L20243
.L26448:
	movq	8(%r12), %rsi
	movq	%r14, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L20242
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L20243
.L20242:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24954:
	movq	%rax, %r14
	jmp	.L20243
.L20240:
	cmpq	$0, 16(%r14)
	je	.L26449
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L24954
	movq	8(%r14), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L20243
.L26449:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L24954
.L20235:
	movq	-8976(%rbp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-8976(%rbp), %r8
	movq	%rax, %r12
	movq	16(%r8), %rdi
	call	protect_from_queue
	movq	-8976(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26450
.L20237:
	movq	-8976(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8944(%rbp)
	movq	%r12, 8(%rax)
	movq	-8944(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L20230
.L26450:
	cmpq	16(%rcx), %rax
	jne	.L20237
	jmp	.L20230
.L26436:
	cmpb	$51, 2(%rdx)
	je	.L20228
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26451
.L20228:
	cmpl	$66, %eax
	jne	.L20231
	movq	-8976(%rbp), %r10
	xorl	%esi, %esi
	movq	8(%r10), %rdi
	call	protect_from_queue
	movq	-8976(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L20230
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -8944(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L20230
.L26451:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L20229
	movq	-8976(%rbp), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -8944(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L20230
.L20229:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24953:
	movq	%rax, -8944(%rbp)
	jmp	.L20230
.L20227:
	movq	-8976(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26452
	movq	-8976(%rbp), %rax
	movq	24(%rax), %r11
	testq	%r11, %r11
	movq	%r11, -8944(%rbp)
	jne	.L20230
	movq	-8976(%rbp), %rsi
	movq	8(%rsi), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	-8976(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r15
	movq	%r15, -8944(%rbp)
	jmp	.L20230
.L26452:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24953
.L20222:
	movq	-8984(%rbp), %r12
	xorl	%esi, %esi
	movq	8(%r12), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-8984(%rbp), %rdx
	movq	%rax, %r12
	movq	16(%rdx), %rdi
	call	protect_from_queue
	movq	-8984(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L26453
.L20224:
	movq	-8984(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8936(%rbp)
	movq	%r12, 8(%rax)
	movq	-8936(%rbp), %r11
	movq	%rbx, 16(%r11)
	jmp	.L20217
.L26453:
	cmpq	16(%rsi), %rax
	jne	.L20224
	jmp	.L20217
.L26435:
	jne	.L20218
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, %rbx
	movq	-8984(%rbp), %rax
	cmpq	8(%rax), %rbx
	je	.L20217
	movq	%rax, %rdi
	call	copy_rtx
	movq	%rax, -8936(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L20217
.L20214:
	testq	%rcx, %rcx
	je	.L26454
	movq	-8984(%rbp), %rbx
	movq	24(%rbx), %r15
	testq	%r15, %r15
	movq	%r15, -8936(%rbp)
	jne	.L20217
	movq	-8984(%rbp), %r12
	movq	8(%r12), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rcx
	movq	%rcx, -8936(%rbp)
	jmp	.L20217
.L26454:
	movq	-8984(%rbp), %rax
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rax, -8936(%rbp)
	jmp	.L20217
.L20207:
	testq	%rcx, %rcx
	movl	$8, -8924(%rbp)
	je	.L20203
	movl	32(%rcx), %eax
	jmp	.L24952
.L20206:
	cmpl	$7, %edx
	ja	.L20202
	jmp	.L20207
.L26433:
	movq	8(%r14), %rdi
	call	int_size_in_bytes
	movl	%eax, -5052(%rbp)
	movq	-8984(%rbp), %rax
	cmpw	$39, (%rax)
	jne	.L25561
	movq	-8984(%rbp), %rdx
	movq	8(%rdx), %rcx
	movq	8(%rcx), %r15
	movl	(%rcx), %r14d
	cmpq	$0, 8(%r15)
	movslq	%r14d,%rdi
	sete	%r8b
	leaq	15(,%rdi,8), %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	leaq	32(%rsp), %r12
	movzbl	%r8b, %r10d
	movq	%r12, -5064(%rbp)
	movl	%r10d, -8920(%rbp)
	movl	-8920(%rbp), %eax
	cmpl	%r14d, %eax
	movl	%eax, -8912(%rbp)
	jge	.L24042
.L20186:
	movslq	-8912(%rbp),%rax
	movq	8(%rcx,%rax,8), %r11
	movq	%rax, -5072(%rbp)
	movl	-5052(%rbp), %eax
	movq	8(%r11), %r9
	movq	16(%r11), %rcx
	testl	%eax, %eax
	movzbl	2(%r9), %r14d
	movq	8(%rcx), %r15
	movslq	%r14d,%rsi
	movzbl	mode_size(%rsi), %ebx
	movq	%rsi, -5080(%rbp)
	movl	%ebx, -8916(%rbp)
	js	.L20159
	movslq	-5052(%rbp),%r12
	mov	%ebx, %edi
	leaq	(%rdi,%r15), %rbx
	cmpq	%r12, %rbx
	jle	.L20159
	movl	-5052(%rbp), %r10d
	subl	%r15d, %r10d
	movl	%r10d, -8916(%rbp)
	je	.L25560
.L20159:
	movq	-8976(%rbp), %r12
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L24541
	leal	-67(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L20163
	cmpw	$54, %dx
	je	.L20163
	cmpw	$55, %dx
	je	.L20163
	cmpw	$58, %dx
	je	.L20163
	cmpw	$134, %dx
	je	.L20163
	cmpw	$56, %dx
	je	.L20163
	cmpw	$140, %dx
	je	.L20163
.L20162:
	movq	-8976(%rbp), %rcx
	movl	%r14d, %edi
	movzbl	2(%rcx), %eax
	testb	%al, %al
	je	.L24950
	movzbl	%al, %edi
.L24950:
	call	gen_reg_rtx
	movq	-8976(%rbp), %rsi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	emit_move_insn
	movzwl	(%r12), %edx
.L20161:
	cmpw	$66, %dx
	je	.L24541
.L20166:
	cmpw	$65, %dx
	je	.L26455
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L20183
	cmpw	$54, %dx
	je	.L20183
	cmpw	$55, %dx
	je	.L20183
	cmpw	$58, %dx
	je	.L20183
	cmpw	$134, %dx
	je	.L20183
	cmpw	$56, %dx
	je	.L20183
	cmpw	$140, %dx
	je	.L20183
	cmpw	$61, %dx
	je	.L26456
.L20182:
	movl	-8916(%rbp), %edx
	movslq	-5052(%rbp),%r10
	movq	%r12, %rdi
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r14d, %r9d
	movl	%r14d, (%rsp)
	sall	$3, %edx
	mov	%edx, %esi
	movq	%r10, 8(%rsp)
	leaq	0(,%r15,8), %rdx
	call	extract_bit_field
.L24951:
	movq	-5072(%rbp), %r12
	movq	-5064(%rbp), %r8
	movq	%rax, (%r8,%r12,8)
.L20157:
	movq	-8984(%rbp), %r11
	incl	-8912(%rbp)
	movl	-8912(%rbp), %eax
	movq	8(%r11), %rcx
	cmpl	(%rcx), %eax
	jl	.L20186
.L24042:
	movq	cfun(%rip), %rbx
	movq	16(%rbx), %r15
	movq	40(%r15), %rbx
	testq	%rbx, %rbx
	je	.L24044
.L20192:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26457
	call	emit_insn
	movq	%rax, 16(%rbx)
.L20191:
	movq	cfun(%rip), %rdi
	movq	40(%rbx), %r9
	movq	16(%rdi), %r14
	testq	%r9, %r9
	movq	%r9, %rbx
	movq	%r9, 40(%r14)
	jne	.L20192
	movq	-8984(%rbp), %r10
	movq	8(%r10), %rcx
.L24044:
	movl	-8920(%rbp), %r8d
	cmpl	(%rcx), %r8d
	jge	.L19590
.L20198:
	movslq	-8920(%rbp),%r15
	movq	-5064(%rbp), %r11
	salq	$3, %r15
	movq	8(%r15,%rcx), %rbx
	movq	(%r11,%r15), %rsi
	movq	8(%rbx), %rdi
	call	emit_move_insn
	movq	-8984(%rbp), %rax
	incl	-8920(%rbp)
	movl	-8920(%rbp), %edx
	movq	8(%rax), %r12
	cmpl	(%r12), %edx
	movq	%r12, %rcx
	jl	.L20198
	jmp	.L19590
.L26457:
	movq	8(%rdi), %rsi
	movq	8(%rsi), %rcx
	movq	%rcx, 16(%rbx)
	call	emit_insn
	jmp	.L20191
.L26456:
	movzbl	2(%r12), %r9d
	cmpl	%r14d, %r9d
	jne	.L20182
.L20183:
	movq	-5072(%rbp), %rdi
	movq	-5064(%rbp), %r14
	movq	%r12, (%r14,%rdi,8)
	jmp	.L20157
.L26455:
	testq	%r15, %r15
	jne	.L24414
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %rsi
	movzbl	mode_size(%rsi), %ebx
	cmpl	%ebx, -8916(%rbp)
	je	.L20172
.L20173:
	movzbq	2(%rdx), %rcx
	movzbq	mode_size(%rcx), %r11
	cmpq	%r11, %r15
	je	.L26458
.L20171:
	testq	%r15, %r15
	jne	.L22779
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbx
	movzbq	mode_size(%rbx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %r15
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r15, %rdi
	movl	%r14d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	jmp	.L24951
.L26458:
	movq	16(%r12), %rdx
	movzbq	2(%rdx), %rdi
	movzbl	mode_size(%rdi), %r9d
	cmpl	%r9d, -8916(%rbp)
	jne	.L20171
.L20172:
	xorl	%r10d, %r10d
	movq	-5072(%rbp), %r8
	movq	-5064(%rbp), %rax
	testq	%r15, %r15
	setne	%r10b
	leaq	(%rax,%r8,8), %rbx
	movq	8(%r12,%r10,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L20157
	cmpw	$54, %dx
	je	.L20157
	cmpw	$55, %dx
	je	.L20157
	cmpw	$58, %dx
	je	.L20157
	cmpw	$134, %dx
	je	.L20157
	cmpw	$56, %dx
	je	.L20157
	cmpw	$140, %dx
	je	.L20157
	cmpw	$61, %dx
	je	.L26459
.L20177:
	movslq	-5052(%rbp),%r11
	movl	-8916(%rbp), %ecx
	movl	%r14d, (%rsp)
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	movl	%r14d, %r9d
	sall	$3, %ecx
	movq	%r11, 8(%rsp)
	mov	%ecx, %esi
	movq	(%rbx), %rdi
	movl	$1, %ecx
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L20157
.L26459:
	movzbl	2(%rcx), %r12d
	cmpl	%r14d, %r12d
	jne	.L20177
	jmp	.L20157
.L24414:
	movq	8(%r12), %rdx
	jmp	.L20173
.L24541:
	movl	%r14d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L20167
	cmpl	%eax, 32(%rdx)
	jae	.L20168
.L24413:
	movzwl	(%r12), %edx
	jmp	.L20166
.L20168:
	movl	%r14d, %edi
	leaq	0(,%r15,8), %rbx
	call	get_mode_alignment
	mov	%eax, %edi
	movq	%rbx, %rax
	cqto
	idivq	%rdi
	testq	%rdx, %rdx
	jne	.L24413
	movq	-5080(%rbp), %rax
	movzbl	mode_size(%rax), %edx
	cmpl	%edx, -8916(%rbp)
	jne	.L24413
	movl	%r14d, %edi
	call	gen_reg_rtx
	movl	$1, %ecx
	movq	%r15, %rdx
	movq	-5072(%rbp), %r8
	movq	-5064(%rbp), %r10
	movq	%r12, %rdi
	movl	%r14d, %esi
	leaq	(%r10,%r8,8), %rbx
	movl	$1, %r8d
	movq	%rax, (%rbx)
	call	adjust_address_1
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L20157
.L20167:
	cmpl	$8, %eax
	ja	.L24413
	jmp	.L20168
.L20163:
	movq	-8976(%rbp), %r11
	movzbl	2(%r11), %ecx
	movzbl	%cl, %esi
	cmpl	%r14d, %esi
	je	.L20161
	testb	%cl, %cl
	je	.L20161
	jmp	.L20162
.L26432:
	cmpb	$29, 16(%r14)
	jne	.L19614
	movq	%r14, %rdi
	call	expr_size
	cmpw	$54, (%rax)
	movq	%rax, -8792(%rbp)
	je	.L26460
.L19615:
	movq	sizetype_tab(%rip), %rdi
	movq	-8792(%rbp), %rsi
	call	make_tree
	xorl	%esi, %esi
	movslq	32(%r14),%rdi
	movq	%rax, %r15
	call	size_int_wide
	movq	%r15, %rsi
	movl	$78, %edi
	movq	%rax, %rdx
	call	size_binop
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	movq	%rax, -4976(%rbp)
	call	expand_expr
	xorl	%edx, %edx
	movl	ptr_mode(%rip), %edi
	movq	%rax, %rsi
	movq	$0, -8880(%rbp)
	call	convert_to_mode
	movl	$8, %edx
	movq	-8976(%rbp), %rbx
	movq	-8984(%rbp), %r12
	movq	%rax, -8824(%rbp)
	movq	%rax, -8848(%rbp)
	movq	%rbx, -8840(%rbp)
	movq	%r12, -8832(%rbp)
	movq	16(%r12), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L19818
	movl	32(%rax), %edx
.L19818:
	movq	-8976(%rbp), %r14
	movq	16(%r14), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L19819
	cmpl	32(%rax), %edx
	jb	.L19820
.L19815:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L19816
	movl	32(%rcx), %r15d
.L19816:
	movq	-8984(%rbp), %rax
	cmpb	$51, 2(%rax)
	jne	.L25547
	movq	-8976(%rbp), %rdi
	cmpb	$51, 2(%rdi)
	jne	.L25546
	movq	-8984(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L19827
	cmpl	$66, %eax
	je	.L26461
.L19831:
	cmpl	$75, %eax
	je	.L19835
	cmpl	$78, %eax
	je	.L19835
.L19830:
	movq	-8976(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L19840
	cmpl	$66, %eax
	je	.L26462
.L19844:
	cmpl	$75, %eax
	je	.L19848
	cmpl	$78, %eax
	je	.L19848
.L19843:
	movq	-8824(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L19853
	cmpl	$66, %eax
	je	.L26463
.L19857:
	cmpl	$75, %eax
	je	.L19861
	cmpl	$78, %eax
	je	.L19861
.L19856:
	movq	-8832(%rbp), %rdx
	cmpw	$66, (%rdx)
	jne	.L25545
	movq	-8840(%rbp), %r8
	cmpw	$66, (%r8)
	jne	.L25544
	cmpq	$0, -8848(%rbp)
	je	.L25543
	movq	-8848(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L26464
.L19869:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -4992(%rbp)
	testl	%r12d, %r12d
	je	.L24026
.L20002:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L19988
	movq	-8848(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L26465
.L19992:
	testb	$2, target_flags+3(%rip)
	je	.L19993
	cmpw	$63, mode_bitsize(%r15,%r15)
.L24944:
	jbe	.L19988
.L19991:
	movslq	%edx,%rbx
	leaq	(%rbx,%rbx,4), %r8
	movq	%rbx, -5000(%rbp)
	movq	insn_data+24(,%r8,8), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L19995
	movq	-8832(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L19988
.L19995:
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L26466
.L19996:
	movq	72(%r14), %rax
	testq	%rax, %rax
	je	.L19997
	xorl	%esi, %esi
	movq	-4992(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L19988
.L19997:
	call	get_last_insn
	movl	$1, %edx
	movq	-8848(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -5008(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r14), %rax
	testq	%rax, %rax
	jne	.L26467
.L19998:
	movq	-5000(%rbp), %rdx
	movq	-8832(%rbp), %rdi
	xorl	%eax, %eax
	movq	-8840(%rbp), %rsi
	movq	-4992(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24520
	movq	-5008(%rbp), %rdi
	call	delete_insns_since
.L19988:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L20002
.L24026:
	testb	$2, target_flags+3(%rip)
	movq	-8832(%rbp), %rcx
	movl	$0, volatile_ok(%rip)
	setne	%r14b
	movq	8(%rcx), %rsi
	movzbl	%r14b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%r9b
	movq	%rax, %r14
	movq	-8840(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%r9b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-8848(%rbp), %rsi
	movq	sizetype_tab(%rip), %r11
	movq	%rax, %rbx
	movzbl	61(%r11), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L26468
.L20011:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %r9
	movq	8(%rdx), %rdi
	movq	(%r9), %r11
	movq	$0, (%r11)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r15
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r15), %rbx
	movq	8(%rbx), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	jne	.L26469
.L20000:
	movq	-8824(%rbp), %rbx
	cmpw	$54, (%rbx)
	je	.L26470
	movq	sizetype_tab(%rip), %r14
	movq	optab_table+16(%rip), %rsi
	xorl	%r8d, %r8d
	movq	-8792(%rbp), %rdx
	xorl	%r9d, %r9d
	movzbl	61(%r14), %ecx
	movl	$3, (%rsp)
	shrb	$1, %cl
	movzbl	%cl, %edi
	movq	-8824(%rbp), %rcx
	call	expand_binop
	movq	-4976(%rbp), %rdi
	movq	%rax, %rbx
	call	highest_pow2_factor
	movq	-8824(%rbp), %rsi
	movq	-8984(%rbp), %rdi
	movq	%rax, %rdx
	call	offset_address
	movq	%rax, -8984(%rbp)
	call	gen_label_rtx
	xorl	%r9d, %r9d
	movq	%rax, -8880(%rbp)
	movq	const_int_rtx+512(%rip), %rsi
	movq	%rbx, %rdi
	movzbl	2(%rbx), %r8d
	movl	$107, %edx
	xorl	%ecx, %ecx
	movq	%rax, (%rsp)
	call	emit_cmp_and_jump_insns
.L20014:
	cmpq	const_int_rtx+512(%rip), %rbx
	je	.L20015
	movq	-8984(%rbp), %rdx
	cmpw	$66, (%rdx)
	movq	%rdx, -8896(%rbp)
	je	.L26471
	movq	-8984(%rbp), %rax
	movzbl	2(%rax), %edi
	call	get_mode_alignment
.L24945:
	movl	%eax, -8884(%rbp)
.L20017:
	movq	-8984(%rbp), %rsi
	movzbl	2(%rsi), %eax
	cmpb	$51, %al
	je	.L20020
	cmpw	$54, (%rbx)
	je	.L26472
.L20020:
	movq	-8984(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L20022
	cmpl	$66, %eax
	je	.L26473
.L20026:
	cmpl	$75, %eax
	je	.L20030
	cmpl	$78, %eax
	je	.L20030
.L20025:
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L20035
	cmpl	$66, %eax
	je	.L26474
.L20039:
	cmpl	$75, %eax
	je	.L20043
	cmpl	$78, %eax
	je	.L20043
.L20038:
	cmpw	$54, (%rbx)
	je	.L26475
.L20048:
	shrl	$3, -8884(%rbp)
	xorl	%edi, %edi
	mov	-8884(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r14d
	movq	%rax, -5024(%rbp)
	testl	%r14d, %r14d
	je	.L24040
.L20142:
	movslq	%r14d,%rcx
	movl	clrstr_optab(,%rcx,4), %edx
	movq	%rcx, -5032(%rbp)
	cmpl	$1317, %edx
	je	.L20129
	cmpw	$54, (%rbx)
	je	.L26476
.L20133:
	testb	$2, target_flags+3(%rip)
	je	.L20134
	movq	-5032(%rbp), %r15
	cmpw	$63, mode_bitsize(%r15,%r15)
.L24948:
	jbe	.L20129
.L20132:
	movslq	%edx,%rax
	leaq	(%rax,%rax,4), %r8
	movq	%rax, -5040(%rbp)
	movq	insn_data+24(,%r8,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L20136
	movq	-8896(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L20129
.L20136:
	movq	48(%r15), %rax
	testq	%rax, %rax
	je	.L20137
	xorl	%esi, %esi
	movq	-5024(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L20129
.L20137:
	call	get_last_insn
	movl	$1, %edx
	movq	%rbx, %rsi
	movl	%r14d, %edi
	movq	%rax, -5048(%rbp)
	call	convert_to_mode
	movq	%rax, %r12
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L26477
.L20138:
	movq	-5040(%rbp), %rcx
	movq	-8896(%rbp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	-5024(%rbp), %rdx
	leaq	(%rcx,%rcx,4), %r14
	call	*insn_data+16(,%r14,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24949
	movq	-5048(%rbp), %rdi
	call	delete_insns_since
.L20129:
	movq	-5032(%rbp), %rdx
	movzbl	mode_wider_mode(%rdx), %r14d
	testl	%r14d, %r14d
	jne	.L20142
.L24040:
	testb	$2, target_flags+3(%rip)
	movq	-8896(%rbp), %r9
	setne	%r12b
	movq	8(%r9), %rsi
	movzbl	%r12b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	sizetype_tab(%rip), %r11
	movq	%rax, %r14
	movzbl	61(%r11), %esi
	shrb	$1, %sil
	movzbl	%sil, %edi
	movq	%rbx, %rsi
	call	copy_to_mode_reg
	cmpq	$0, fn.0(%rip)
	movq	%rax, %r15
	je	.L26478
.L20147:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	const_int_rtx+512(%rip), %rsi
	movq	integer_types+40(%rip), %rdi
	movq	%rax, %r12
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.0(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %r11
	movq	8(%rdx), %rdi
	movq	(%r11), %rsi
	movq	$0, (%rsi)
	call	build_pointer_type
	movq	fn.0(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movl	$53, %edi
	movq	fn.0(%rip), %rcx
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%rcx), %r15
	movq	%r12, %rcx
	movq	8(%r15), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	jne	.L26479
.L20015:
	cmpq	$0, -8880(%rbp)
	je	.L19590
	movq	-8880(%rbp), %rdi
	call	emit_label
	jmp	.L19590
.L26479:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
.L24949:
	call	emit_insn
	jmp	.L20015
.L26478:
	movl	$.LC7, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.0(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.0(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.0, %edi
	movq	%rax, fn.0(%rip)
	call	ggc_add_tree_root
	movq	fn.0(%rip), %r8
	xorl	%esi, %esi
	orb	$1, 49(%r8)
	movq	fn.0(%rip), %r10
	orb	$8, 18(%r10)
	movq	fn.0(%rip), %rdi
	orb	$64, 50(%rdi)
	movq	fn.0(%rip), %rbx
	orb	$2, 18(%rbx)
	movq	fn.0(%rip), %rdi
	call	make_decl_rtl
	movq	fn.0(%rip), %rdi
	call	assemble_external
	jmp	.L20147
.L26477:
	movq	%r12, %rdi
	movl	%r14d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L20138
	movq	%r12, %rsi
	movl	%r14d, %edi
	call	copy_to_mode_reg
	movq	%rax, %r12
	jmp	.L20138
.L20134:
	movq	-5032(%rbp), %r10
	cmpw	$31, mode_bitsize(%r10,%r10)
	jmp	.L24948
.L26476:
	movq	mode_mask_array(,%rcx,8), %r12
	shrq	$1, %r12
	cmpq	%r12, 8(%rbx)
	jbe	.L20132
	jmp	.L20133
.L26475:
	movq	8(%rbx), %r14
	xorl	%r15d, %r15d
	movl	$17, %esi
.L20061:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L24029
.L20058:
	movslq	%ecx,%r8
	movzbq	mode_size(%r8), %r11
	cmpq	%rsi, %r11
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L20058
.L24029:
	testl	%edi, %edi
	je	.L20051
	movslq	%edi,%r12
	movq	%r12, %rdx
	salq	$4, %rdx
	addq	optab_table+240(%rip), %rdx
	cmpl	$1317, 8(%rdx)
	je	.L20060
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L20060
	movzbq	mode_size(%r12), %rsi
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r14
.L20060:
	movzbq	mode_size(%r12), %rsi
	cmpq	$1, %rsi
	ja	.L20061
.L20051:
	testq	%r14, %r14
	jne	.L25529
	movl	optimize_size(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L20064
	movq	ix86_cost(%rip), %r10
	mov	40(%r10), %r14d
	cmpq	%r14, %r15
	jae	.L20048
.L20065:
	movq	8(%rbx), %r8
	movq	-8896(%rbp), %r15
	leaq	-272(%rbp), %r12
	testb	$2, target_flags+3(%rip)
	movq	$clear_by_pieces_1, -232(%rbp)
	movq	$0, -224(%rbp)
	setne	%dl
	leaq	16(%r12), %rcx
	xorl	%esi, %esi
	movq	%r15, -272(%rbp)
	movq	%r8, -248(%rbp)
	movq	8(%r15), %r8
	movq	$0, -240(%rbp)
	movl	$0, -8908(%rbp)
	movzbl	%dl, %r11d 
	movq	%r8, -264(%rbp)
	movzwl	(%r8), %edx
	leaq	5(,%r11,4), %r15
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L20069
	cmpw	$99, %dx
	je	.L20069
	cmpw	$98, %dx
	je	.L20069
.L20068:
	movl	%esi, (%rcx)
	movl	$0, 20(%r12)
	leaq	56(%r12), %rdx
	movzwl	(%r8), %eax
	xorl	%ecx, %ecx
	cmpw	$96, %ax
	je	.L20071
	cmpw	$98, %ax
	je	.L20071
.L20070:
	movl	%ecx, (%rdx)
	movl	56(%r12), %eax
	testl	%eax, %eax
	je	.L20072
	movq	24(%r12), %rdi
	movq	%rdi, 32(%r12)
.L20072:
	movl	16(%r12), %r9d
	testl	%r9d, %r9d
	jne	.L20073
	movq	24(%r12), %r14
	movq	$0, -8904(%rbp)
	movl	$17, %esi
.L20086:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L24032
.L20083:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L20083
.L24032:
	testl	%edi, %edi
	je	.L20076
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L20085
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %esi
	cmpl	%eax, %esi
	jb	.L20085
	movzbq	mode_size(%rbx), %rdi
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%rdi
	addq	%rax, -8904(%rbp)
	movq	%rdx, %r14
.L20085:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L20086
.L20076:
	testq	%r14, %r14
	jne	.L25529
	cmpq	$2, -8904(%rbp)
	jbe	.L20073
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L24034
.L20094:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rdx
	cmpq	%r15, %rdx
	cmovae	-8908(%rbp), %ecx
	movl	%ecx, -8908(%rbp)
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L20094
.L24034:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L20073
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L20098
	cmpw	$54, %dx
	je	.L20098
	cmpw	$55, %dx
	je	.L20098
	cmpw	$58, %dx
	je	.L20098
	cmpw	$134, %dx
	je	.L20098
	cmpw	$56, %dx
	je	.L20098
	cmpw	$140, %dx
	je	.L20098
.L20073:
	cmpq	$1, %r15
	jbe	.L20101
.L20122:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L24037
.L20108:
	movslq	%ecx,%r8
	movzbq	mode_size(%r8), %rbx
	cmpq	%r15, %rbx
	cmovae	-8908(%rbp), %ecx
	movl	%ecx, -8908(%rbp)
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L20108
.L24037:
	movl	-8908(%rbp), %eax
	testl	%eax, %eax
	je	.L20101
	movslq	-8908(%rbp),%r15
	movq	%r15, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	movl	8(%rcx), %ebx
	cmpl	$1317, %ebx
	je	.L20110
	movl	-8908(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %esi
	cmpl	%eax, %esi
	jb	.L20110
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rdi
	leaq	(%rdi,%rdi,4), %r11
	cmpq	%rdx, 24(%r12)
	movq	insn_data+16(,%r11,8), %r14
	movq	%r14, -5016(%rbp)
	movq	%rdx, %r14
	jb	.L20110
	movl	56(%r12), %ecx
.L20120:
	testl	%ecx, %ecx
	je	.L20114
	subq	%rdx, 32(%r12)
.L20114:
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L20115
	movq	(%r12), %rdi
	movl	-8908(%rbp), %esi
	movl	$1, %r8d
	movq	8(%r12), %rdx
	movq	32(%r12), %rcx
	call	adjust_automodify_address_1
.L24947:
	movl	-8908(%rbp), %edx
	movq	%rax, %rbx
	movq	48(%r12), %rdi
	movq	32(%r12), %rsi
	call	*40(%r12)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	*-5016(%rbp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L20119
	addq	%r14, 32(%r12)
.L20119:
	movq	24(%r12), %r9
	movq	%r14, %rdx
	subq	%r14, %r9
	cmpq	%r14, %r9
	movq	%r9, 24(%r12)
	jae	.L20120
.L20110:
	movzbq	mode_size(%r15), %r15
	cmpq	$1, %r15
	ja	.L20122
.L20101:
	cmpq	$0, 24(%r12)
	je	.L20015
	jmp	.L25451
.L20115:
	movq	(%r12), %rdi
	movl	-8908(%rbp), %esi
	movl	$1, %ecx
	movq	32(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24947
.L20098:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, 8(%r12)
	jmp	.L20073
.L20071:
	movl	$1, %ecx
	jmp	.L20070
.L20069:
	movl	$1, %esi
	jmp	.L20068
.L20064:
	cmpq	$2, %r15
	ja	.L20048
	jmp	.L20065
.L20043:
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbx), %rdi
	movq	%rax, %r14
	call	protect_from_queue
	cmpq	8(%rbx), %r14
	movq	%rax, %r12
	je	.L26480
.L20045:
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r14, 8(%rax)
	movq	%r12, 16(%rax)
	jmp	.L20038
.L26480:
	cmpq	16(%rbx), %rax
	jne	.L20045
	jmp	.L20038
.L26474:
	cmpb	$51, 2(%rbx)
	je	.L20036
	movq	8(%rbx), %r14
	cmpw	$71, (%r14)
	je	.L26481
.L20036:
	cmpl	$66, %eax
	jne	.L20039
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%rbx), %rax
	movq	%rax, %r12
	je	.L20038
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r12, 8(%rax)
	jmp	.L20038
.L26481:
	movq	8(%r14), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r14)
	movq	%rax, %r12
	je	.L20037
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L20038
.L20037:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24946:
	movq	%rax, %rbx
	jmp	.L20038
.L20035:
	cmpq	$0, 16(%rbx)
	je	.L26482
	movq	24(%rbx), %rax
	testq	%rax, %rax
	jne	.L24946
	movq	8(%rbx), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%rbx), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	16(%rbx), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbx), %rbx
	jmp	.L20038
.L26482:
	movq	8(%rbx), %rdi
	call	copy_to_reg
	jmp	.L24946
.L20030:
	movq	-8984(%rbp), %r10
	xorl	%esi, %esi
	movq	8(%r10), %rdi
	call	protect_from_queue
	movq	-8984(%rbp), %rsi
	movq	%rax, %r14
	movq	16(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-8984(%rbp), %rdx
	movq	%rax, %r12
	cmpq	8(%rdx), %r14
	je	.L26483
.L20032:
	movq	-8984(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8896(%rbp)
	movq	%r14, 8(%rax)
	movq	-8896(%rbp), %r8
	movq	%r12, 16(%r8)
	jmp	.L20025
.L26483:
	cmpq	16(%rdx), %rax
	jne	.L20032
	jmp	.L20025
.L26473:
	jne	.L20026
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-8984(%rbp), %rcx
	movq	%rax, %r12
	cmpq	8(%rcx), %rax
	je	.L20025
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -8896(%rbp)
	movq	%r12, 8(%rax)
	jmp	.L20025
.L20022:
	movq	-8984(%rbp), %rsi
	cmpq	$0, 16(%rsi)
	je	.L26484
	movq	-8984(%rbp), %r11
	movq	24(%r11), %r15
	testq	%r15, %r15
	movq	%r15, -8896(%rbp)
	jne	.L20025
	movq	-8984(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	-8984(%rbp), %r14
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	movq	-8984(%rbp), %rcx
	movq	8(%rcx), %rsi
	call	gen_move_insn
	movq	-8984(%rbp), %r12
	movq	%rax, %rdi
	movq	16(%r12), %rsi
	call	emit_insn_before
	movq	-8984(%rbp), %r9
	movq	24(%r9), %rdx
	movq	%rdx, -8896(%rbp)
	jmp	.L20025
.L26484:
	movq	8(%rsi), %rdi
	call	copy_to_reg
	movq	%rax, -8896(%rbp)
	jmp	.L20025
.L26472:
	movzbl	%al, %edx 
	movzbl	mode_size(%rdx), %edi
	cmpl	8(%rbx), %edi
	jne	.L20020
	movq	%rsi, %rdi
	movq	const_tiny_rtx(,%rdx,8), %rsi
	call	emit_move_insn
	jmp	.L20015
.L26471:
	movq	16(%rdx), %rax
	movl	$8, -8884(%rbp)
	testq	%rax, %rax
	je	.L20017
	movl	32(%rax), %eax
	jmp	.L24945
.L26470:
	movq	8(%rbx), %rsi
	movq	-8792(%rbp), %rdi
	negq	%rsi
	call	plus_constant_wide
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-8824(%rbp), %r12
	movq	-8984(%rbp), %rdi
	movl	$51, %esi
	movq	%rax, %rbx
	movq	8(%r12), %rdx
	call	adjust_address_1
	movq	%rax, -8984(%rbp)
	jmp	.L20014
.L26469:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L20000
.L26468:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r8
	orb	$1, 49(%r8)
	movq	fn.1(%rip), %r10
	orb	$8, 18(%r10)
	movq	fn.1(%rip), %rsi
	orb	$64, 50(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L20011
.L24520:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L20000
.L26467:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L19998
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L19998
.L26466:
	movq	-8840(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L19988
	jmp	.L19996
.L19993:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L24944
.L26465:
	movq	mode_mask_array(,%r15,8), %r10
	shrq	$1, %r10
	cmpq	%r10, 8(%rsi)
	jbe	.L19991
	jmp	.L19992
.L26464:
	movq	8(%rcx), %r12
	xorl	%r14d, %r14d
	movl	$17, %esi
.L19882:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L24015
.L19879:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L19879
.L24015:
	testl	%edi, %edi
	je	.L19872
	movslq	%edi,%rbx
	movq	%rbx, %r11
	salq	$4, %r11
	addq	optab_table+240(%rip), %r11
	cmpl	$1317, 8(%r11)
	je	.L19881
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L19881
	movzbq	mode_size(%rbx), %r9
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r9
	addq	%rax, %r14
	movq	%rdx, %r12
.L19881:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L19882
.L19872:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L19885
	movq	ix86_cost(%rip), %rdx
	mov	40(%rdx), %esi
	cmpq	%rsi, %r14
	jae	.L19869
.L19886:
	movq	-8848(%rbp), %r8
	movq	-8840(%rbp), %rcx
	movq	-8832(%rbp), %r11
	movq	-8832(%rbp), %r10
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r14b
	movq	8(%rcx), %r8
	xorl	%ecx, %ecx
	movq	$0, -1976(%rbp)
	movl	$0, -8860(%rbp)
	movq	%r8, -2000(%rbp)
	movzbl	%r14b, %edi
	movq	8(%r11), %rbx
	movq	%r10, -2032(%rbp)
	leal	5(,%rdi,4), %r14d
	movq	%rbx, -8856(%rbp)
	movq	-8856(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L19891
	cmpw	$99, %dx
	je	.L19891
	cmpw	$98, %dx
	je	.L19891
.L19890:
	movq	-8856(%rbp), %r9
	movl	%ecx, -2016(%rbp)
	xorl	%edx, %edx
	movzwl	(%r9), %eax
	cmpw	$96, %ax
	je	.L19893
	cmpw	$98, %ax
	je	.L19893
.L19892:
	movl	%edx, -1968(%rbp)
	movq	-8856(%rbp), %r15
	xorl	%ecx, %ecx
	movq	-8840(%rbp), %rdx
	movq	%r15, -2024(%rbp)
	movq	%rdx, -2008(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %esi
	cmpw	$1, %si
	jbe	.L19896
	cmpw	$99, %dx
	je	.L19896
	cmpw	$98, %dx
	je	.L19896
.L19895:
	movl	-1968(%rbp), %eax
	movl	%ecx, -1992(%rbp)
	movl	$0, -1988(%rbp)
	movl	$0, -2012(%rbp)
	testl	%eax, %eax
	je	.L19897
	movq	%r12, -1976(%rbp)
.L19897:
	movl	-1992(%rbp), %eax
	movq	%r12, -1984(%rbp)
	testl	%eax, %eax
	je	.L19899
	movl	-2016(%rbp), %eax
	testl	%eax, %eax
	jne	.L19898
.L19899:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L19912:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L24018
.L19909:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L19909
.L24018:
	testl	%edi, %edi
	je	.L19902
	movslq	%edi,%rbx
	movq	%rbx, %r11
	salq	$4, %r11
	addq	optab_table+240(%rip), %r11
	cmpl	$1317, 8(%r11)
	je	.L19911
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L19911
	movzbq	mode_size(%rbx), %r9
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r9
	addq	%rax, %r15
	movq	%rdx, %r12
.L19911:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L19912
.L19902:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L19898
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L24020
.L19920:
	movslq	%ecx,%rsi
	movzbl	mode_size(%rsi), %edx
	cmpl	%r14d, %edx
	cmovae	-8860(%rbp), %ecx
	movl	%ecx, -8860(%rbp)
	movzbl	mode_wider_mode(%rsi), %ecx
	testl	%ecx, %ecx
	jne	.L19920
.L24020:
	movl	-1992(%rbp), %r15d
	testl	%r15d, %r15d
	jne	.L19926
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L19924
	cmpw	$54, %dx
	je	.L19924
	cmpw	$55, %dx
	je	.L19924
	cmpw	$58, %dx
	je	.L19924
	cmpw	$134, %dx
	je	.L19924
	cmpw	$56, %dx
	je	.L19924
	cmpw	$140, %dx
	je	.L19924
.L19926:
	movl	-2016(%rbp), %r8d
	testl	%r8d, %r8d
	jne	.L19898
	movq	-8856(%rbp), %r11
	movzwl	(%r11), %edx
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L19928
	cmpw	$54, %dx
	je	.L19928
	cmpw	$55, %dx
	je	.L19928
	cmpw	$58, %dx
	je	.L19928
	cmpw	$134, %dx
	je	.L19928
	cmpw	$56, %dx
	je	.L19928
	cmpw	$140, %dx
	je	.L19928
.L19898:
	cmpl	$1, %r14d
	jbe	.L19931
.L19982:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L24023
.L19938:
	movslq	%ecx,%rdi
	movzbl	mode_size(%rdi), %r12d
	cmpl	%r14d, %r12d
	cmovae	-8860(%rbp), %ecx
	movl	%ecx, -8860(%rbp)
	movzbl	mode_wider_mode(%rdi), %ecx
	testl	%ecx, %ecx
	jne	.L19938
.L24023:
	movl	-8860(%rbp), %r14d
	testl	%r14d, %r14d
	je	.L19931
	movslq	-8860(%rbp),%r15
	movq	%r15, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	movl	8(%rcx), %ebx
	cmpl	$1317, %ebx
	je	.L19940
	movl	-8860(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r9d
	cmpl	%eax, %r9d
	jb	.L19940
	movslq	%ebx,%r10
	leaq	-2032(%rbp), %r12
	movq	$0, -8872(%rbp)
	leaq	(%r10,%r10,4), %rdx
	movq	insn_data+16(,%rdx,8), %rsi
	movzbq	mode_size(%r15), %rdx
	cmpq	%rdx, -1984(%rbp)
	movq	%rsi, -4984(%rbp)
	movq	%rdx, -6160(%rbp)
	jb	.L19940
	movl	-1968(%rbp), %ecx
.L19980:
	testl	%ecx, %ecx
	je	.L19944
	subq	%rdx, 56(%r12)
.L19944:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L19945
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L19946
	movl	-8860(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24940:
	movq	%rax, -8872(%rbp)
.L19945:
	movl	40(%r12), %ebx
	testl	%ebx, %ebx
	je	.L19948
	movq	24(%r12), %rdi
	movl	-8860(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24941:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L26485
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L19954
	movzbl	mode_size(%r15), %r8d
	leal	7(%r8), %edx
	andl	$-8, %edx
.L19955:
	movq	cfun(%rip), %rdi
	andl	$33554432, %esi
	movq	16(%rdi), %r9
	leaq	8(%r9), %rdi
	movl	8(%r9), %ecx
	je	.L19956
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24942:
	leal	(%rax,%rcx), %esi
	movq	%r15, %rcx
	salq	$4, %rcx
	movl	%esi, (%rdi)
	addq	optab_table+384(%rip), %rcx
	movl	8(%rcx), %eax
	cmpl	$1317, %eax
	je	.L19958
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %r10
	movq	insn_data+24(,%r10,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L19959
	movq	%r14, %rdi
	movl	-8860(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L26486
.L19959:
	leaq	(%rbx,%rbx,4), %r8
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r8,8)
.L24943:
	movq	%rax, %rdi
	call	emit_insn
.L19978:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L19979
	movq	-6160(%rbp), %r14
	addq	%r14, 56(%r12)
.L19979:
	movq	48(%r12), %rsi
	movq	-6160(%rbp), %rdx
	subq	-6160(%rbp), %rsi
	cmpq	%rdx, %rsi
	movq	%rsi, 48(%r12)
	jae	.L19980
.L19940:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L19982
.L19931:
	cmpq	$0, -1984(%rbp)
	je	.L20000
	jmp	.L25518
.L26486:
	movl	-8860(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L19959
.L19958:
	movzbl	mode_size(%r15), %ebx
	cmpl	%edx, %ebx
	je	.L26487
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r9b
	movzbl	%r9b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r11b
	movzbl	%r11b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L19966:
	movl	-8860(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%edi, %edi
	testq	%rdi, %rdi
	movq	%rax, %rbx
	je	.L19975
	xorl	%esi, %esi
	movq	%rax, %rdi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %ecx
	testl	%ecx, %ecx
	jne	.L26488
.L19975:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L19978
.L26488:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L19975
.L26487:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L19966
.L19956:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24942
.L19954:
	movzbl	mode_size(%r15), %r11d
	leal	1(%r11), %edx
	andl	$-2, %edx
	jmp	.L19955
.L26485:
	movq	%rax, %rsi
	movq	-8872(%rbp), %rdi
	xorl	%eax, %eax
	call	*-4984(%rbp)
	jmp	.L24943
.L19948:
	movq	24(%r12), %rdi
	movl	-8860(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24941
.L19946:
	movl	-8860(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24940
.L19928:
	movq	-8856(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -2024(%rbp)
	jmp	.L19898
.L19924:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -2000(%rbp)
	jmp	.L19926
.L19896:
	movl	$1, %ecx
	jmp	.L19895
.L19893:
	movl	$1, %edx
	jmp	.L19892
.L19891:
	movl	$1, %ecx
	jmp	.L19890
.L19885:
	cmpq	$2, %r14
	ja	.L19869
	jmp	.L19886
.L19861:
	movq	-8824(%rbp), %rbx
	xorl	%esi, %esi
	movq	8(%rbx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	%rax, %r12
	movq	-8824(%rbp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	-8824(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26489
.L19863:
	movq	-8824(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8848(%rbp)
	movq	%r12, 8(%rax)
	movq	-8848(%rbp), %r14
	movq	%rbx, 16(%r14)
	jmp	.L19856
.L26489:
	cmpq	16(%rcx), %rax
	jne	.L19863
	jmp	.L19856
.L26463:
	cmpb	$51, 2(%rdx)
	je	.L19854
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26490
.L19854:
	cmpl	$66, %eax
	jne	.L19857
	movq	-8824(%rbp), %r10
	xorl	%esi, %esi
	movq	8(%r10), %rdi
	call	protect_from_queue
	movq	-8824(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L19856
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -8848(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L19856
.L26490:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L19855
	movq	-8824(%rbp), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -8848(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L19856
.L19855:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24939:
	movq	%rax, -8848(%rbp)
	jmp	.L19856
.L19853:
	movq	-8824(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26491
	movq	-8824(%rbp), %r11
	movq	24(%r11), %rdi
	testq	%rdi, %rdi
	movq	%rdi, -8848(%rbp)
	jne	.L19856
	movq	-8824(%rbp), %rsi
	movq	8(%rsi), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	-8824(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rcx
	movq	%rcx, -8848(%rbp)
	jmp	.L19856
.L26491:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24939
.L19848:
	movq	-8976(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-8976(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-8976(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26492
.L19850:
	movq	-8976(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8840(%rbp)
	movq	%r12, 8(%rax)
	movq	-8840(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L19843
.L26492:
	cmpq	16(%rcx), %rax
	jne	.L19850
	jmp	.L19843
.L26462:
	cmpb	$51, 2(%rdx)
	je	.L19841
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26493
.L19841:
	cmpl	$66, %eax
	jne	.L19844
	movq	-8976(%rbp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	movq	-8976(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L19843
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -8840(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L19843
.L26493:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L19842
	movq	-8976(%rbp), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -8840(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L19843
.L19842:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24938:
	movq	%rax, -8840(%rbp)
	jmp	.L19843
.L19840:
	movq	-8976(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26494
	movq	-8976(%rbp), %rcx
	movq	24(%rcx), %r11
	testq	%r11, %r11
	movq	%r11, -8840(%rbp)
	jne	.L19843
	movq	-8976(%rbp), %rdx
	movq	8(%rdx), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	-8976(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r9
	movq	%r9, -8840(%rbp)
	jmp	.L19843
.L26494:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24938
.L19835:
	movq	-8984(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-8984(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L26495
.L19837:
	movq	-8984(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8832(%rbp)
	movq	%r12, 8(%rax)
	movq	-8832(%rbp), %r11
	movq	%rbx, 16(%r11)
	jmp	.L19830
.L26495:
	cmpq	16(%rsi), %rax
	jne	.L19837
	jmp	.L19830
.L26461:
	jne	.L19831
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-8984(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L19830
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -8832(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L19830
.L19827:
	testq	%rsi, %rsi
	je	.L26496
	movq	-8984(%rbp), %r9
	movq	24(%r9), %rsi
	testq	%rsi, %rsi
	movq	%rsi, -8832(%rbp)
	jne	.L19830
	movq	-8984(%rbp), %r12
	movq	8(%r12), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdx
	movq	%rdx, -8832(%rbp)
	jmp	.L19830
.L26496:
	movq	-8984(%rbp), %rcx
	movq	8(%rcx), %rdi
	call	copy_to_reg
	movq	%rax, -8832(%rbp)
	jmp	.L19830
.L19820:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L19816
	movl	32(%rsi), %r15d
	jmp	.L19816
.L19819:
	cmpl	$7, %edx
	ja	.L19815
	jmp	.L19820
.L26460:
	movq	-8792(%rbp), %rdi
	movslq	32(%r14),%rcx
	cmpq	%rcx, 8(%rdi)
	jge	.L19615
	movq	-8984(%rbp), %rdx
	movq	-8976(%rbp), %r11
	movq	%rdx, -8776(%rbp)
	movq	%r11, -8784(%rbp)
	movq	16(%rdx), %rax
	movl	$8, %edx
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L19619
	movl	32(%rax), %edx
.L19619:
	movq	-8976(%rbp), %rbx
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L19620
	cmpl	32(%rax), %edx
	jb	.L19621
.L19616:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L19617
	movl	32(%rcx), %r15d
.L19617:
	movq	-8984(%rbp), %r9
	cmpb	$51, 2(%r9)
	jne	.L25547
	movq	-8976(%rbp), %r8
	cmpb	$51, 2(%r8)
	jne	.L25546
	movq	-8984(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L19628
	cmpl	$66, %eax
	je	.L26497
.L19632:
	cmpl	$75, %eax
	je	.L19636
	cmpl	$78, %eax
	je	.L19636
.L19631:
	movq	-8976(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L19641
	cmpl	$66, %eax
	je	.L26498
.L19645:
	cmpl	$75, %eax
	je	.L19649
	cmpl	$78, %eax
	je	.L19649
.L19644:
	movq	-8792(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L19654
	cmpl	$66, %eax
	je	.L26499
.L19658:
	cmpl	$75, %eax
	je	.L19662
	cmpl	$78, %eax
	je	.L19662
.L19657:
	movq	-8776(%rbp), %rsi
	cmpw	$66, (%rsi)
	jne	.L25545
	movq	-8784(%rbp), %r11
	cmpw	$66, (%r11)
	jne	.L25544
	cmpq	$0, -8792(%rbp)
	je	.L25543
	movq	-8792(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L26500
.L19670:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -4952(%rbp)
	testl	%r12d, %r12d
	je	.L24012
.L19803:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L19789
	movq	-8792(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L26501
.L19793:
	testb	$2, target_flags+3(%rip)
	je	.L19794
	cmpw	$63, mode_bitsize(%r15,%r15)
.L24937:
	jbe	.L19789
.L19792:
	movslq	%edx,%r9
	leaq	(%r9,%r9,4), %rsi
	movq	%r9, -4960(%rbp)
	movq	insn_data+24(,%rsi,8), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L19796
	movq	-8776(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L19789
.L19796:
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L26502
.L19797:
	movq	72(%r14), %rax
	testq	%rax, %rax
	je	.L19798
	xorl	%esi, %esi
	movq	-4952(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L19789
.L19798:
	call	get_last_insn
	movl	$1, %edx
	movq	-8792(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -4968(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r14), %rax
	testq	%rax, %rax
	jne	.L26503
.L19799:
	movq	-4960(%rbp), %rdx
	movq	-8776(%rbp), %rdi
	xorl	%eax, %eax
	movq	-8784(%rbp), %rsi
	movq	-4952(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24522
	movq	-4968(%rbp), %rdi
	call	delete_insns_since
.L19789:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L19803
.L24012:
	testb	$2, target_flags+3(%rip)
	movq	-8776(%rbp), %rbx
	movl	$0, volatile_ok(%rip)
	setne	%r14b
	movq	8(%rbx), %rsi
	movzbl	%r14b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%r10b
	movq	%rax, %r14
	movq	-8784(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%r10b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-8792(%rbp), %rsi
	movq	sizetype_tab(%rip), %r8
	movq	%rax, %rbx
	movzbl	61(%r8), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L26504
.L19812:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %r10
	movq	8(%rdx), %rdi
	movq	(%r10), %r8
	movq	$0, (%r8)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r15
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r15), %r9
	movq	8(%r9), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	je	.L19590
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	jmp	.L24960
.L26504:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %rsi
	orb	$1, 49(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %rcx
	orb	$8, 18(%rcx)
	movq	fn.1(%rip), %r11
	orb	$64, 50(%r11)
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L19812
.L26503:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L19799
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L19799
.L26502:
	movq	-8784(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L19789
	jmp	.L19797
.L19794:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L24937
.L26501:
	movq	mode_mask_array(,%r15,8), %rcx
	shrq	$1, %rcx
	cmpq	%rcx, 8(%rsi)
	jbe	.L19792
	jmp	.L19793
.L26500:
	movq	8(%rcx), %r12
	xorl	%r14d, %r14d
	movl	$17, %esi
.L19683:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L24001
.L19680:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L19680
.L24001:
	testl	%edi, %edi
	je	.L19673
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L19682
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	jb	.L19682
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r14
	movq	%rdx, %r12
.L19682:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L19683
.L19673:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L19686
	movq	ix86_cost(%rip), %r11
	mov	40(%r11), %r12d
	cmpq	%r12, %r14
	jae	.L19670
.L19687:
	movq	-8792(%rbp), %r8
	movq	-8784(%rbp), %r10
	movq	-8776(%rbp), %rdi
	movq	-8776(%rbp), %r9
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r14b
	movq	8(%r10), %r8
	movq	$0, -1896(%rbp)
	movl	$0, -8804(%rbp)
	movq	%r8, -1920(%rbp)
	movzbl	%r14b, %ecx
	movq	8(%rdi), %rdx
	movq	%r9, -1952(%rbp)
	leal	5(,%rcx,4), %r14d
	xorl	%ecx, %ecx
	movq	%rdx, -8800(%rbp)
	movq	-8800(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L19692
	cmpw	$99, %dx
	je	.L19692
	cmpw	$98, %dx
	je	.L19692
.L19691:
	movq	-8800(%rbp), %rsi
	movl	%ecx, -1936(%rbp)
	xorl	%edx, %edx
	movzwl	(%rsi), %eax
	cmpw	$96, %ax
	je	.L19694
	cmpw	$98, %ax
	je	.L19694
.L19693:
	movq	-8800(%rbp), %r15
	movq	-8784(%rbp), %r11
	movl	%edx, -1888(%rbp)
	xorl	%ecx, %ecx
	movq	%r15, -1944(%rbp)
	movq	%r11, -1928(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L19697
	cmpw	$99, %dx
	je	.L19697
	cmpw	$98, %dx
	je	.L19697
.L19696:
	movl	-1888(%rbp), %eax
	movl	%ecx, -1912(%rbp)
	movl	$0, -1908(%rbp)
	movl	$0, -1932(%rbp)
	testl	%eax, %eax
	je	.L19698
	movq	%r12, -1896(%rbp)
.L19698:
	movl	-1912(%rbp), %edx
	movq	%r12, -1904(%rbp)
	testl	%edx, %edx
	je	.L19700
	movl	-1936(%rbp), %r9d
	testl	%r9d, %r9d
	jne	.L19699
.L19700:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L19713:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L24004
.L19710:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L19710
.L24004:
	testl	%edi, %edi
	je	.L19703
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L19712
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L19712
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L19712:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L19713
.L19703:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L19699
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L24006
.L19721:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %edx
	cmpl	%r14d, %edx
	cmovae	-8804(%rbp), %ecx
	movl	%ecx, -8804(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L19721
.L24006:
	movl	-1912(%rbp), %eax
	testl	%eax, %eax
	jne	.L19727
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L19725
	cmpw	$54, %dx
	je	.L19725
	cmpw	$55, %dx
	je	.L19725
	cmpw	$58, %dx
	je	.L19725
	cmpw	$134, %dx
	je	.L19725
	cmpw	$56, %dx
	je	.L19725
	cmpw	$140, %dx
	je	.L19725
.L19727:
	movl	-1936(%rbp), %r8d
	testl	%r8d, %r8d
	jne	.L19699
	movq	-8800(%rbp), %rbx
	movzwl	(%rbx), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L19729
	cmpw	$54, %dx
	je	.L19729
	cmpw	$55, %dx
	je	.L19729
	cmpw	$58, %dx
	je	.L19729
	cmpw	$134, %dx
	je	.L19729
	cmpw	$56, %dx
	je	.L19729
	cmpw	$140, %dx
	je	.L19729
.L19699:
	cmpl	$1, %r14d
	jbe	.L19732
.L19783:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L24009
.L19739:
	movslq	%ecx,%rdi
	movzbl	mode_size(%rdi), %r12d
	cmpl	%r14d, %r12d
	cmovae	-8804(%rbp), %ecx
	movl	%ecx, -8804(%rbp)
	movzbl	mode_wider_mode(%rdi), %ecx
	testl	%ecx, %ecx
	jne	.L19739
.L24009:
	movl	-8804(%rbp), %r14d
	testl	%r14d, %r14d
	je	.L19732
	movslq	-8804(%rbp),%r15
	movq	%r15, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	movl	8(%rcx), %ebx
	cmpl	$1317, %ebx
	je	.L19741
	movl	-8804(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r11d
	cmpl	%eax, %r11d
	jb	.L19741
	movslq	%ebx,%r9
	leaq	-1952(%rbp), %r12
	movq	$0, -8816(%rbp)
	leaq	(%r9,%r9,4), %rdx
	movq	insn_data+16(,%rdx,8), %rsi
	movzbq	mode_size(%r15), %rdx
	cmpq	%rdx, -1904(%rbp)
	movq	%rsi, -4944(%rbp)
	movq	%rdx, -6152(%rbp)
	jb	.L19741
	movl	-1888(%rbp), %ecx
.L19781:
	testl	%ecx, %ecx
	je	.L19745
	subq	%rdx, 56(%r12)
.L19745:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L19746
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L19747
	movl	-8804(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24933:
	movq	%rax, -8816(%rbp)
.L19746:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L19749
	movq	24(%r12), %rdi
	movl	-8804(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24934:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L26505
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L19755
	movzbl	mode_size(%r15), %r8d
	leal	7(%r8), %edx
	andl	$-8, %edx
.L19756:
	movq	cfun(%rip), %rdi
	andl	$33554432, %esi
	movq	16(%rdi), %rbx
	leaq	8(%rbx), %rdi
	movl	8(%rbx), %ecx
	je	.L19757
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24935:
	leal	(%rax,%rcx), %r11d
	movq	%r15, %rcx
	salq	$4, %rcx
	movl	%r11d, (%rdi)
	addq	optab_table+384(%rip), %rcx
	movl	8(%rcx), %eax
	cmpl	$1317, %eax
	je	.L19759
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rdx
	movq	insn_data+24(,%rdx,8), %rsi
	movq	(%rsi), %rax
	testq	%rax, %rax
	je	.L19760
	movq	%r14, %rdi
	movl	-8804(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L26506
.L19760:
	leaq	(%rbx,%rbx,4), %r9
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r9,8)
.L24936:
	movq	%rax, %rdi
	call	emit_insn
.L19779:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L19780
	movq	-6152(%rbp), %r14
	addq	%r14, 56(%r12)
.L19780:
	movq	48(%r12), %r11
	movq	-6152(%rbp), %rdx
	subq	-6152(%rbp), %r11
	cmpq	%rdx, %r11
	movq	%r11, 48(%r12)
	jae	.L19781
.L19741:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L19783
.L19732:
	cmpq	$0, -1904(%rbp)
	jmp	.L25549
.L26506:
	movl	-8804(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L19760
.L19759:
	movzbl	mode_size(%r15), %r8d
	cmpl	%edx, %r8d
	je	.L26507
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r10b
	movzbl	%r10b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L19767:
	movl	-8804(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%edi, %edi
	testq	%rdi, %rdi
	movq	%rax, %rbx
	je	.L19776
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L26508
.L19776:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L19779
.L26508:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L19776
.L26507:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L19767
.L19757:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24935
.L19755:
	movzbl	mode_size(%r15), %r10d
	leal	1(%r10), %edx
	andl	$-2, %edx
	jmp	.L19756
.L26505:
	movq	%rax, %rsi
	movq	-8816(%rbp), %rdi
	xorl	%eax, %eax
	call	*-4944(%rbp)
	jmp	.L24936
.L19749:
	movq	24(%r12), %rdi
	movl	-8804(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24934
.L19747:
	movl	-8804(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24933
.L19729:
	movq	-8800(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -1944(%rbp)
	jmp	.L19699
.L19725:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -1920(%rbp)
	jmp	.L19727
.L19697:
	movl	$1, %ecx
	jmp	.L19696
.L19694:
	movl	$1, %edx
	jmp	.L19693
.L19692:
	movl	$1, %ecx
	jmp	.L19691
.L19686:
	cmpq	$2, %r14
	ja	.L19670
	jmp	.L19687
.L19662:
	movq	-8792(%rbp), %rbx
	xorl	%esi, %esi
	movq	8(%rbx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-8792(%rbp), %r9
	movq	%rax, %r12
	movq	16(%r9), %rdi
	call	protect_from_queue
	movq	-8792(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26509
.L19664:
	movq	-8792(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8792(%rbp)
	movq	%r12, 8(%rax)
	movq	-8792(%rbp), %r8
	movq	%rbx, 16(%r8)
	jmp	.L19657
.L26509:
	cmpq	16(%rcx), %rax
	jne	.L19664
	jmp	.L19657
.L26499:
	cmpb	$51, 2(%rdx)
	je	.L19655
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26510
.L19655:
	cmpl	$66, %eax
	jne	.L19658
	movq	-8792(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	movq	-8792(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L19657
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -8792(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L19657
.L26510:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L19656
	movq	-8792(%rbp), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -8792(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L19657
.L19656:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24932:
	movq	%rax, -8792(%rbp)
	jmp	.L19657
.L19654:
	movq	-8792(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26511
	movq	-8792(%rbp), %rdi
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L24932
	movq	-8792(%rbp), %rax
	movq	8(%rax), %r14
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	-8792(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r10
	movq	%r10, -8792(%rbp)
	jmp	.L19657
.L26511:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24932
.L19649:
	movq	-8976(%rbp), %r8
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-8976(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-8976(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26512
.L19651:
	movq	-8976(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8784(%rbp)
	movq	%r12, 8(%rax)
	movq	-8784(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L19644
.L26512:
	cmpq	16(%rcx), %rax
	jne	.L19651
	jmp	.L19644
.L26498:
	cmpb	$51, 2(%rdx)
	je	.L19642
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26513
.L19642:
	cmpl	$66, %eax
	jne	.L19645
	movq	-8976(%rbp), %r9
	xorl	%esi, %esi
	movq	8(%r9), %rdi
	call	protect_from_queue
	movq	-8976(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L19644
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -8784(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L19644
.L26513:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L19643
	movq	-8976(%rbp), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -8784(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L19644
.L19643:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24931:
	movq	%rax, -8784(%rbp)
	jmp	.L19644
.L19641:
	movq	-8976(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26514
	movq	-8976(%rbp), %rax
	movq	24(%rax), %r10
	testq	%r10, %r10
	movq	%r10, -8784(%rbp)
	jne	.L19644
	movq	-8976(%rbp), %rdx
	movq	8(%rdx), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	-8976(%rbp), %r14
	movq	%rax, %rdi
	movq	8(%r14), %rsi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r12
	movq	%r12, -8784(%rbp)
	jmp	.L19644
.L26514:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24931
.L19636:
	movq	-8984(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-8984(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L26515
.L19638:
	movq	-8984(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8776(%rbp)
	movq	%r12, 8(%rax)
	movq	-8776(%rbp), %r10
	movq	%rbx, 16(%r10)
	jmp	.L19631
.L26515:
	cmpq	16(%rsi), %rax
	jne	.L19638
	jmp	.L19631
.L26497:
	jne	.L19632
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-8984(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L19631
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -8776(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L19631
.L19628:
	testq	%rsi, %rsi
	je	.L26516
	movq	-8984(%rbp), %r12
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	movq	%rsi, -8776(%rbp)
	jne	.L19631
	movq	-8984(%rbp), %r14
	movq	8(%r14), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rcx
	movq	%rcx, -8776(%rbp)
	jmp	.L19631
.L26516:
	movq	-8984(%rbp), %rax
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rax, -8776(%rbp)
	jmp	.L19631
.L19621:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L19617
	movl	32(%rsi), %r15d
	jmp	.L19617
.L19620:
	cmpl	$7, %edx
	ja	.L19616
	jmp	.L19621
.L19605:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L26517
.L19607:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -8984(%rbp)
	movq	%r12, 8(%rax)
	movq	-8984(%rbp), %r15
	movq	%rbx, 16(%r15)
	jmp	.L19600
.L26517:
	cmpq	16(%r13), %rax
	jne	.L19607
	jmp	.L19600
.L26430:
	jne	.L19601
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L19600
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -8984(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L19600
.L19597:
	cmpq	$0, 16(%r13)
	je	.L26518
	movq	24(%r13), %r9
	testq	%r9, %r9
	movq	%r9, -8984(%rbp)
	jne	.L19600
	movq	8(%r13), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rax
	movq	%rax, -8984(%rbp)
	jmp	.L19600
.L26518:
	movq	8(%r13), %rdi
	call	copy_to_reg
	movq	%rax, -8984(%rbp)
	jmp	.L19600
.L26429:
	movq	144(%r14), %rax
	testq	%rax, %rax
	je	.L19592
	cmpq	%rax, %r13
	jne	.L19592
	jmp	.L19590
.L26428:
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L19590
	jmp	.L19591
	.p2align 6,,7
.L19589:
	movq	-8976(%rbp), %rdx
	cmpb	$0, 2(%rdx)
	jne	.L19588
	cmpb	$0, 16(%r14)
	je	.L19588
	movq	8(%r14), %rdx
	movzbl	2(%r13), %edi
	movzbl	61(%rdx), %ebx
	shrb	$1, %bl
	movzbl	%bl, %esi
	cmpl	%esi, %edi
	je	.L19588
	movzbl	17(%rdx), %ecx
	movq	-8976(%rbp), %rdx
	shrb	$5, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, -8976(%rbp)
	jmp	.L19588
.L24405:
	movq	-8976(%rbp), %r10
	movzwl	(%r10), %edx
	jmp	.L19511
	.p2align 6,,7
.L24410:
	movq	-8976(%rbp), %rcx
	movzwl	(%rcx), %edx
	jmp	.L19511
.L26427:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	%r14, %rdi
	movzbl	2(%r13), %edx
	movq	%rax, %rsi
	jmp	.L24930
	.p2align 6,,7
.L19550:
	xorl	%ecx, %ecx
	testl	%ecx, %ecx
	je	.L24406
	movl	(%r13), %ecx
	movl	%ecx, %r11d
	andl	$134283263, %r11d
	cmpl	$66, %r11d
	je	.L26519
.L19566:
	andl	$268500991, %ecx
	cmpl	$268435519, %ecx
	je	.L26520
	movzbl	2(%r13), %edx
	xorl	%ecx, %ecx
	movq	%r14, %rdi
	movq	%r13, %rsi
	call	expand_expr
	cmpw	$61, (%r13)
	movq	%rax, -8976(%rbp)
	je	.L26521
.L19586:
	movl	(%r13), %eax
	andl	$134283263, %eax
	cmpl	$134217794, %eax
	je	.L24409
	movq	-8976(%rbp), %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L24410
	movq	-8976(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L19587
	cmpw	$54, %dx
	je	.L19587
	cmpw	$55, %dx
	je	.L19587
	cmpw	$58, %dx
	je	.L19587
	cmpw	$134, %dx
	je	.L19587
	cmpw	$56, %dx
	je	.L19587
	cmpw	$140, %dx
	je	.L19587
	xorl	%r8d, %r8d
	testl	%r8d, %r8d
	je	.L19511
.L19587:
	movl	$1, -8764(%rbp)
	jmp	.L19511
.L24409:
	movq	-8976(%rbp), %r12
	movzwl	(%r12), %edx
	jmp	.L19511
.L26521:
	cmpl	$52, 8(%r13)
	jbe	.L24408
	jmp	.L19586
	.p2align 6,,7
.L26520:
	xorl	%r15d, %r15d
	xorl	%edx, %edx
	testl	%r15d, %r15d
	jne	.L19572
	movq	8(%r14), %rsi
	movzbl	16(%rsi), %eax
	cmpb	$6, %al
	je	.L19573
	cmpb	$10, %al
	je	.L19573
	cmpb	$11, %al
	je	.L19573
	cmpb	$12, %al
	je	.L19573
.L19572:
	movq	%rdx, %rsi
	xorl	%ecx, %ecx
	movq	%r12, %rdi
	xorl	%edx, %edx
	call	expand_expr
	movzwl	(%rax), %edx
	movq	%rax, %rbx
	cmpw	$66, %dx
	je	.L26522
.L19575:
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L19578
	cmpw	$54, %dx
	je	.L19578
	cmpw	$55, %dx
	je	.L19578
	cmpw	$58, %dx
	je	.L19578
	cmpw	$134, %dx
	je	.L19578
	cmpw	$56, %dx
	je	.L19578
	cmpw	$140, %dx
	je	.L19578
.L19577:
	movzbl	3(%r13), %edx
	movq	8(%r13), %rdi
	movq	%rbx, %rsi
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L14787
	movzbl	2(%rbx), %edx
	movzbl	2(%r13), %eax
	cmpb	%al, %dl
	je	.L14787
	testb	%dl, %dl
	je	.L19580
	movq	%rbx, %rsi
	movzbl	%al, %edi
	call	gen_lowpart_SUBREG
	movzbl	3(%rax), %ebx
	orb	$16, %bl
	movb	%bl, 3(%rax)
	andb	$-5, %bl
	movzbl	3(%r13), %r11d
	andb	$4, %r11b
	orb	%r11b, %bl
	movb	%bl, 3(%rax)
	jmp	.L14787
.L19580:
	movq	8(%r13), %r15
	movzbl	3(%r13), %ecx
	movzbl	%al, %edi
	movq	%rbx, %rdx
	movzbl	2(%r15), %esi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	jmp	.L14787
	.p2align 6,,7
.L19578:
	cmpb	$0, 2(%rbx)
	jne	.L19577
	movq	8(%r12), %rcx
	movzbl	2(%r13), %edi
	movzbl	61(%rcx), %edx
	movzbl	3(%r13), %ecx
	shrb	$1, %dl
	shrb	$2, %cl
	movzbl	%dl, %esi
	andl	$1, %ecx
	movq	%rbx, %rdx
	call	convert_modes
	movzbl	3(%r13), %ecx
	movzbl	2(%r13), %esi
	movq	8(%r13), %r12
	movq	%rax, %rdx
	movzbl	2(%r12), %edi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, %rbx
	jmp	.L19577
.L26522:
	xorl	%r10d, %r10d
	testl	%r10d, %r10d
	je	.L19575
	testb	$8, 3(%rax)
	jne	.L19576
	movq	8(%r13), %rdi
	movq	8(%rax), %rsi
	call	reg_mentioned_p
	testl	%eax, %eax
	je	.L24407
.L19576:
	movq	%rbx, %rdi
	call	copy_to_reg
	movq	%rax, %rbx
.L24407:
	movzwl	(%rbx), %edx
	jmp	.L19575
.L19573:
	cmpq	$0, 8(%rsi)
	jne	.L19572
	movzbl	3(%r13), %ecx
	movzbl	17(%rsi), %r9d
	movl	$1, %edi
	movl	%ecx, %r8d
	shrb	$5, %r9b
	shrb	$2, %r8b
	andl	$1, %r9d
	andl	%r8d, %edi
	cmpl	%edi, %r9d
	je	.L19574
	call	signed_or_unsigned_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	convert
	movzbl	3(%r13), %ecx
	movq	%rax, %r12
.L19574:
	movq	8(%r13), %r14
	shrb	$2, %cl
	movl	$1, %esi
	andl	%ecx, %esi
	movzbl	2(%r14), %edi
	call	type_for_mode
	movq	%r12, %rsi
	movq	%rax, %rdi
	call	convert
	movq	8(%r13), %rdx
	movq	%rax, %r12
	jmp	.L19572
.L26519:
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L19566
	movq	%r13, %rsi
	xorl	%ecx, %ecx
	movzbl	%al, %edx
	movq	%r14, %rdi
	call	expand_expr
	movq	%rax, -8976(%rbp)
	movq	%rax, %rsi
	movzbl	2(%rax), %eax
	cmpb	$51, %al
	je	.L19567
	testb	%al, %al
	je	.L19567
	cmpq	%r13, %rsi
	je	.L19569
	movq	%rsi, %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L26523
.L19568:
	movq	-8976(%rbp), %rdi
	call	copy_to_reg
	movq	%rax, -8976(%rbp)
.L19567:
	movl	$1, -8764(%rbp)
	jmp	.L24405
.L26523:
	movq	-8976(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L19568
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L19568
.L19569:
	movl	$1, %r15d
	jmp	.L19568
	.p2align 6,,7
.L24406:
	movl	(%r13), %ecx
	jmp	.L19566
.L19559:
	movl	$1, %ebx
	jmp	.L19553
	.p2align 6,,7
.L19560:
	xorl	%ebx, %ebx
	jmp	.L19553
.L19557:
	movq	8(%r13), %rdi
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L19559
	movq	16(%r13), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L19553
	jmp	.L19559
	.p2align 6,,7
.L26426:
	cmpb	$51, 2(%r13)
	jne	.L19512
	call	gen_label_rtx
	movq	%rax, %r15
	call	gen_label_rtx
	movq	cfun(%rip), %rdx
	movq	%rax, -4936(%rbp)
	movq	16(%rdx), %r9
	movq	40(%r9), %rbx
	testq	%rbx, %rbx
	je	.L23994
.L19518:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26524
	call	emit_insn
	movq	%rax, 16(%rbx)
.L19517:
	movq	cfun(%rip), %rcx
	movq	40(%rbx), %rdi
	movq	16(%rcx), %r10
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%r10)
	jne	.L19518
.L23994:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L19520
	cmpl	$66, %eax
	je	.L26525
.L19524:
	cmpl	$75, %eax
	je	.L19528
	cmpl	$78, %eax
	je	.L19528
.L19523:
	call	do_pending_stack_adjust
	movq	cfun(%rip), %rsi
	movq	16(%rsi), %rdx
	movq	%r15, %rsi
	incl	4(%rdx)
	movq	32(%r14), %rdi
	call	jumpifnot
	call	start_cleanup_deferral
	movq	40(%r14), %rdi
	movq	-8984(%rbp), %rsi
	xorl	%edx, %edx
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %r9
	movq	16(%r9), %r12
	movq	40(%r12), %rbx
	testq	%rbx, %rbx
	je	.L23996
.L19538:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26526
	call	emit_insn
	movq	%rax, 16(%rbx)
.L19537:
	movq	cfun(%rip), %r11
	movq	40(%rbx), %rdi
	movq	16(%r11), %rcx
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%rcx)
	jne	.L19538
.L23996:
	movq	-4936(%rbp), %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r15, %rdi
	call	emit_label
	call	start_cleanup_deferral
	movq	48(%r14), %rdi
	movq	-8984(%rbp), %rsi
	xorl	%edx, %edx
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %r15
	movq	16(%r15), %r14
	movq	40(%r14), %rbx
	testq	%rbx, %rbx
	je	.L23998
.L19545:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26527
	call	emit_insn
	movq	%rax, 16(%rbx)
.L19544:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %rsi
	movq	16(%rdx), %r8
	testq	%rsi, %rsi
	movq	%rsi, %rbx
	movq	%rsi, 40(%r8)
	jne	.L19545
.L23998:
	movq	-4936(%rbp), %rdi
	call	emit_label
	movq	cfun(%rip), %r10
	movq	16(%r10), %rbx
	decl	4(%rbx)
	jmp	.L14787
.L26527:
	movq	8(%rdi), %r9
	movq	8(%r9), %r12
	movq	%r12, 16(%rbx)
	call	emit_insn
	jmp	.L19544
.L26526:
	movq	8(%rdi), %r10
	movq	8(%r10), %r8
	movq	%r8, 16(%rbx)
	call	emit_insn
	jmp	.L19537
.L19528:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L26528
.L19530:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -8984(%rbp)
	movq	%r12, 8(%rax)
	movq	-8984(%rbp), %rax
	movq	%rbx, 16(%rax)
	jmp	.L19523
.L26528:
	cmpq	16(%r13), %rax
	jne	.L19530
	jmp	.L19523
.L26525:
	jne	.L19524
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L19523
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -8984(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L19523
.L19520:
	cmpq	$0, 16(%r13)
	je	.L26529
	movq	24(%r13), %rbx
	testq	%rbx, %rbx
	movq	%rbx, -8984(%rbp)
	jne	.L19523
	movq	8(%r13), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rax
.L24929:
	movq	%rax, -8984(%rbp)
	jmp	.L19523
.L26529:
	movq	8(%r13), %rdi
	call	copy_to_reg
	jmp	.L24929
.L26524:
	movq	8(%rdi), %r8
	movq	8(%r8), %rsi
	movq	%rsi, 16(%rbx)
	call	emit_insn
	jmp	.L19517
.L26425:
	movq	const_int_rtx+512(%rip), %rsi
	movq	32(%r14), %rdi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	cfun(%rip), %r15
	movq	16(%r15), %rsi
	movq	40(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L23992
.L19508:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26530
	call	emit_insn
	movq	%rax, 16(%rbx)
.L19507:
	movq	cfun(%rip), %r12
	movq	40(%rbx), %rcx
	movq	16(%r12), %r11
	testq	%rcx, %rcx
	movq	%rcx, %rbx
	movq	%rcx, 40(%r11)
	jne	.L19508
.L23992:
	movq	40(%r14), %rdi
	movq	%r13, %rsi
	xorl	%edx, %edx
	call	store_expr
	jmp	.L14787
	.p2align 6,,7
.L26530:
	movq	8(%rdi), %r10
	movq	8(%r10), %r8
	movq	%r8, 16(%rbx)
	call	emit_insn
	jmp	.L19507
.L19501:
	movq	-9552(%rbp), %rax
	movl	-6220(%rbp), %ebx
	xorl	%esi, %esi
	addq	$48, %rax
	testl	%ebx, %ebx
	je	.L20414
	movq	const_int_rtx+512(%rip), %rsi
.L20414:
	movq	(%rax), %rdi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	jmp	.L14787
.L26424:
	movq	8(%rdi), %r12
	movq	8(%r12), %r11
	movq	%r11, 16(%rbx)
	call	emit_insn
	jmp	.L19498
.L19482:
	movq	-8760(%rbp), %rax
	cmpb	$51, 2(%rax)
	je	.L19487
	cmpw	$61, (%rax)
	je	.L26531
.L19485:
	movq	-8760(%rbp), %rdi
	call	copy_to_reg
	jmp	.L19487
.L26531:
	cmpl	$52, 8(%rax)
	jbe	.L19487
	jmp	.L19485
.L18690:
	movq	-8760(%rbp), %rdi
	movq	-8752(%rbp), %rsi
	call	convert_move
	jmp	.L18669
.L18689:
	cmpb	$51, %al
	je	.L26532
.L18693:
	movq	-8760(%rbp), %rsi
	cmpw	$39, (%rsi)
	je	.L26533
	cmpb	$51, %al
	je	.L26534
	movq	-8760(%rbp), %rdi
	movq	-8752(%rbp), %rsi
	jmp	.L24928
.L26534:
	movq	-8760(%rbp), %rdi
	movq	-8752(%rbp), %rcx
	movq	%rdi, -8712(%rbp)
	movq	%rcx, -8720(%rbp)
	movq	%r14, %rdi
	call	expr_size
	movl	$8, %edx
	movq	-8760(%rbp), %rsi
	movq	%rax, %r14
	movq	16(%rsi), %rcx
	testq	%rcx, %rcx
	je	.L19284
	movl	32(%rcx), %edx
.L19284:
	movq	-8752(%rbp), %r10
	movq	16(%r10), %rax
	testq	%rax, %rax
	je	.L19285
	cmpl	32(%rax), %edx
	jb	.L19286
.L19281:
	testq	%rax, %rax
	movl	$8, -8700(%rbp)
	je	.L19282
	movl	32(%rax), %eax
.L24919:
	movl	%eax, -8700(%rbp)
.L19282:
	movq	-8760(%rbp), %rbx
	cmpb	$51, 2(%rbx)
	jne	.L25547
	movq	-8752(%rbp), %r11
	cmpb	$51, 2(%r11)
	jne	.L25546
	movq	-8760(%rbp), %rsi
	movzwl	(%rsi), %eax
	cmpl	$71, %eax
	je	.L19293
	cmpl	$66, %eax
	je	.L26535
.L19297:
	cmpl	$75, %eax
	je	.L19301
	cmpl	$78, %eax
	je	.L19301
.L19296:
	movq	-8752(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L19306
	cmpl	$66, %eax
	je	.L26536
.L19310:
	cmpl	$75, %eax
	je	.L19314
	cmpl	$78, %eax
	je	.L19314
.L19309:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L19319
	cmpl	$66, %eax
	je	.L26537
.L19323:
	cmpl	$75, %eax
	je	.L19327
	cmpl	$78, %eax
	je	.L19327
.L19322:
	movq	-8712(%rbp), %r10
	cmpw	$66, (%r10)
	jne	.L25545
	movq	-8720(%rbp), %r11
	cmpw	$66, (%r11)
	jne	.L25544
	testq	%r14, %r14
	je	.L25543
	cmpw	$54, (%r14)
	je	.L26538
.L19335:
	shrl	$3, -8700(%rbp)
	xorl	%edi, %edi
	mov	-8700(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -4904(%rbp)
	testl	%r12d, %r12d
	je	.L23988
.L19468:
	movslq	%r12d,%rsi
	movl	movstr_optab(,%rsi,4), %edx
	movq	%rsi, -4912(%rbp)
	cmpl	$1317, %edx
	je	.L19454
	cmpw	$54, (%r14)
	je	.L26539
.L19458:
	testb	$2, target_flags+3(%rip)
	je	.L19459
	movq	-4912(%rbp), %r8
	cmpw	$63, mode_bitsize(%r8,%r8)
.L24926:
	jbe	.L19454
.L19457:
	movslq	%edx,%r11
	leaq	(%r11,%r11,4), %rcx
	movq	%r11, -4920(%rbp)
	movq	insn_data+24(,%rcx,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L19461
	movq	-8712(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L19454
.L19461:
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L26540
.L19462:
	movq	72(%r15), %rax
	testq	%rax, %rax
	je	.L19463
	xorl	%esi, %esi
	movq	-4904(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L19454
.L19463:
	call	get_last_insn
	movl	$1, %edx
	movq	%r14, %rsi
	movl	%r12d, %edi
	movq	%rax, -4928(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r15), %rax
	testq	%rax, %rax
	jne	.L26541
.L19464:
	movq	-4920(%rbp), %rdx
	movq	-8712(%rbp), %rdi
	xorl	%eax, %eax
	movq	-8720(%rbp), %rsi
	movq	-4904(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24518
	movq	-4928(%rbp), %rdi
	call	delete_insns_since
.L19454:
	movq	-4912(%rbp), %rbx
	movzbl	mode_wider_mode(%rbx), %r12d
	testl	%r12d, %r12d
	jne	.L19468
.L23988:
	testb	$2, target_flags+3(%rip)
	movq	-8712(%rbp), %r15
	movl	$0, volatile_ok(%rip)
	setne	%r8b
	movq	8(%r15), %rsi
	movzbl	%r8b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%sil
	movq	%rax, %r15
	movq	-8720(%rbp), %rax
	movzbl	%sil, %edi
	movq	8(%rax), %rsi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%r14, %rsi
	movq	sizetype_tab(%rip), %rdi
	movq	%rax, %rbx
	movzbl	61(%rdi), %r9d
	shrb	$1, %r9b
	movzbl	%r9b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r14
	je	.L26542
.L19477:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r15, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r14, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %rdi
	movq	(%rdi), %r9
	movq	8(%rdx), %rdi
	movq	$0, (%r9)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %rbx
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%rbx), %r14
	movq	8(%r14), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r15)
	je	.L18669
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r15, %rdx
.L24927:
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L18669
.L26542:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r12
	xorl	%esi, %esi
	orb	$1, 49(%r12)
	movq	fn.1(%rip), %r11
	orb	$8, 18(%r11)
	movq	fn.1(%rip), %rcx
	orb	$64, 50(%rcx)
	movq	fn.1(%rip), %r10
	orb	$2, 18(%r10)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L19477
.L24518:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L18669
.L26541:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L19464
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L19464
.L26540:
	movq	-8720(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L19454
	jmp	.L19462
.L19459:
	movq	-4912(%rbp), %r10
	cmpw	$31, mode_bitsize(%r10,%r10)
	jmp	.L24926
.L26539:
	movq	mode_mask_array(,%rsi,8), %r15
	shrq	$1, %r15
	cmpq	%r15, 8(%r14)
	jbe	.L19457
	jmp	.L19458
.L26538:
	movq	8(%r14), %r12
	xorl	%r15d, %r15d
	movl	$17, %esi
.L19348:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23977
.L19345:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L19345
.L23977:
	testl	%edi, %edi
	je	.L19338
	movslq	%edi,%rbx
	movq	%rbx, %r8
	salq	$4, %r8
	addq	optab_table+240(%rip), %r8
	cmpl	$1317, 8(%r8)
	je	.L19347
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L19347
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L19347:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L19348
.L19338:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L19351
	movq	ix86_cost(%rip), %r10
	mov	40(%r10), %ecx
	cmpq	%rcx, %r15
	jae	.L19335
.L19352:
	movq	-8720(%rbp), %rsi
	testb	$2, target_flags+3(%rip)
	movq	-8712(%rbp), %r9
	movq	8(%r14), %r12
	setne	%r14b
	movq	-8712(%rbp), %rdi
	xorl	%ecx, %ecx
	movq	8(%rsi), %r8
	movq	$0, -1816(%rbp)
	movl	$0, -8732(%rbp)
	movq	%r8, -1840(%rbp)
	movzbl	%r14b, %edx
	movq	8(%r9), %rbx
	leal	5(,%rdx,4), %r14d
	movq	%rdi, -1872(%rbp)
	movzwl	(%rbx), %edx
	movq	%rbx, -8728(%rbp)
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L19357
	cmpw	$99, %dx
	je	.L19357
	cmpw	$98, %dx
	je	.L19357
.L19356:
	movl	%ecx, -1856(%rbp)
	xorl	%edx, %edx
	movq	-8728(%rbp), %rcx
	movzwl	(%rcx), %eax
	cmpw	$96, %ax
	je	.L19359
	cmpw	$98, %ax
	je	.L19359
.L19358:
	movq	-8728(%rbp), %r15
	movq	-8720(%rbp), %rax
	movl	%edx, -1808(%rbp)
	xorl	%ecx, %ecx
	movq	%r15, -1864(%rbp)
	movq	%rax, -1848(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L19362
	cmpw	$99, %dx
	je	.L19362
	cmpw	$98, %dx
	je	.L19362
.L19361:
	movl	-1808(%rbp), %r11d
	movl	%ecx, -1832(%rbp)
	movl	$0, -1828(%rbp)
	movl	$0, -1852(%rbp)
	testl	%r11d, %r11d
	je	.L19363
	movq	%r12, -1816(%rbp)
.L19363:
	movl	-1832(%rbp), %ebx
	movq	%r12, -1824(%rbp)
	testl	%ebx, %ebx
	je	.L19365
	movl	-1856(%rbp), %edi
	testl	%edi, %edi
	jne	.L19364
.L19365:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L19378:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23980
.L19375:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L19375
.L23980:
	testl	%edi, %edi
	je	.L19368
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L19377
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L19377
	movzbq	mode_size(%rbx), %r10
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r10
	addq	%rax, %r15
	movq	%rdx, %r12
.L19377:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L19378
.L19368:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L19364
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23982
.L19386:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %r11d
	cmpl	%r14d, %r11d
	cmovae	-8732(%rbp), %ecx
	movl	%ecx, -8732(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L19386
.L23982:
	movl	-1832(%rbp), %eax
	testl	%eax, %eax
	jne	.L19392
	movzwl	(%r8), %edx
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L19390
	cmpw	$54, %dx
	je	.L19390
	cmpw	$55, %dx
	je	.L19390
	cmpw	$58, %dx
	je	.L19390
	cmpw	$134, %dx
	je	.L19390
	cmpw	$56, %dx
	je	.L19390
	cmpw	$140, %dx
	je	.L19390
.L19392:
	movl	-1856(%rbp), %eax
	testl	%eax, %eax
	jne	.L19364
	movq	-8728(%rbp), %r9
	movzwl	(%r9), %edx
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L19394
	cmpw	$54, %dx
	je	.L19394
	cmpw	$55, %dx
	je	.L19394
	cmpw	$58, %dx
	je	.L19394
	cmpw	$134, %dx
	je	.L19394
	cmpw	$56, %dx
	je	.L19394
	cmpw	$140, %dx
	je	.L19394
.L19364:
	cmpl	$1, %r14d
	jbe	.L19397
.L19448:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23985
.L19404:
	movslq	%ecx,%rsi
	movzbl	mode_size(%rsi), %edx
	cmpl	%r14d, %edx
	cmovae	-8732(%rbp), %ecx
	movl	%ecx, -8732(%rbp)
	movzbl	mode_wider_mode(%rsi), %ecx
	testl	%ecx, %ecx
	jne	.L19404
.L23985:
	movl	-8732(%rbp), %eax
	testl	%eax, %eax
	je	.L19397
	movslq	-8732(%rbp),%r15
	movq	%r15, %r14
	salq	$4, %r14
	addq	optab_table+240(%rip), %r14
	movl	8(%r14), %ebx
	cmpl	$1317, %ebx
	je	.L19406
	movl	-8732(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	jb	.L19406
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%r10
	movq	$0, -8744(%rbp)
	leaq	(%r10,%r10,4), %rcx
	cmpq	%rdx, -1824(%rbp)
	movq	insn_data+16(,%rcx,8), %r12
	movq	%rdx, -6144(%rbp)
	movq	%r12, -4896(%rbp)
	leaq	-1872(%rbp), %r12
	jb	.L19406
	movl	-1808(%rbp), %ecx
.L19446:
	testl	%ecx, %ecx
	je	.L19410
	subq	%rdx, 56(%r12)
.L19410:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L19411
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L19412
	movl	-8732(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24922:
	movq	%rax, -8744(%rbp)
.L19411:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L19414
	movq	24(%r12), %rdi
	movl	-8732(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24923:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L26543
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L19420
	movzbl	mode_size(%r15), %r11d
	leal	7(%r11), %edx
	andl	$-8, %edx
.L19421:
	movq	cfun(%rip), %rdi
	andl	$33554432, %esi
	movq	16(%rdi), %r9
	leaq	8(%r9), %rdi
	movl	8(%r9), %ecx
	je	.L19422
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24924:
	movq	%r15, %rsi
	leal	(%rax,%rcx), %r8d
	salq	$4, %rsi
	movl	%r8d, (%rdi)
	addq	optab_table+384(%rip), %rsi
	movl	8(%rsi), %eax
	cmpl	$1317, %eax
	je	.L19424
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rcx
	movq	insn_data+24(,%rcx,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L19425
	movq	%r14, %rdi
	movl	-8732(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L26544
.L19425:
	leaq	(%rbx,%rbx,4), %r10
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r10,8)
.L24925:
	movq	%rax, %rdi
	call	emit_insn
.L19444:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L19445
	movq	-6144(%rbp), %r14
	addq	%r14, 56(%r12)
.L19445:
	movq	48(%r12), %rsi
	movq	-6144(%rbp), %rdx
	subq	-6144(%rbp), %rsi
	cmpq	%rdx, %rsi
	movq	%rsi, 48(%r12)
	jae	.L19446
.L19406:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L19448
.L19397:
	cmpq	$0, -1824(%rbp)
.L25550:
	je	.L18669
	jmp	.L25518
.L26544:
	movl	-8732(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L19425
.L19424:
	movzbl	mode_size(%r15), %r11d
	cmpl	%edx, %r11d
	je	.L26545
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r9b
	movzbl	%r9b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L19432:
	movl	-8732(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%edi, %edi
	testq	%rdi, %rdi
	movq	%rax, %rbx
	je	.L19441
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L26546
.L19441:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L19444
.L26546:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L19441
.L26545:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L19432
.L19422:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24924
.L19420:
	movzbl	mode_size(%r15), %ebx
	leal	1(%rbx), %edx
	andl	$-2, %edx
	jmp	.L19421
.L26543:
	movq	%rax, %rsi
	movq	-8744(%rbp), %rdi
	xorl	%eax, %eax
	call	*-4896(%rbp)
	jmp	.L24925
.L19414:
	movq	24(%r12), %rdi
	movl	-8732(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24923
.L19412:
	movl	-8732(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24922
.L19394:
	movq	-8728(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -1864(%rbp)
	jmp	.L19364
.L19390:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -1840(%rbp)
	jmp	.L19392
.L19362:
	movl	$1, %ecx
	jmp	.L19361
.L19359:
	movl	$1, %edx
	jmp	.L19358
.L19357:
	movl	$1, %ecx
	jmp	.L19356
.L19351:
	cmpq	$2, %r15
	ja	.L19335
	jmp	.L19352
.L19327:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L26547
.L19329:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L19322
.L26547:
	cmpq	16(%r14), %rax
	jne	.L19329
	jmp	.L19322
.L26537:
	cmpb	$51, 2(%r14)
	je	.L19320
	movq	8(%r14), %r12
	cmpw	$71, (%r12)
	je	.L26548
.L19320:
	cmpl	$66, %eax
	jne	.L19323
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L19322
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%rbx, 8(%rax)
	jmp	.L19322
.L26548:
	movq	8(%r12), %rsi
	movq	%r14, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L19321
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L19322
.L19321:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24921:
	movq	%rax, %r14
	jmp	.L19322
.L19319:
	cmpq	$0, 16(%r14)
	je	.L26549
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L24921
	movq	8(%r14), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L19322
.L26549:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L24921
.L19314:
	movq	-8752(%rbp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-8752(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-8752(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26550
.L19316:
	movq	-8752(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8720(%rbp)
	movq	%r12, 8(%rax)
	movq	-8720(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L19309
.L26550:
	cmpq	16(%rcx), %rax
	jne	.L19316
	jmp	.L19309
.L26536:
	cmpb	$51, 2(%rdx)
	je	.L19307
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26551
.L19307:
	cmpl	$66, %eax
	jne	.L19310
	movq	-8752(%rbp), %r11
	xorl	%esi, %esi
	movq	8(%r11), %rdi
	call	protect_from_queue
	movq	-8752(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L19309
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -8720(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L19309
.L26551:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L19308
	movq	-8752(%rbp), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -8720(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L19309
.L19308:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24920:
	movq	%rax, -8720(%rbp)
	jmp	.L19309
.L19306:
	movq	-8752(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26552
	movq	-8752(%rbp), %rax
	movq	24(%rax), %r8
	testq	%r8, %r8
	movq	%r8, -8720(%rbp)
	jne	.L19309
	movq	-8752(%rbp), %rsi
	movq	8(%rsi), %r12
	movzbl	2(%r12), %edi
	call	gen_reg_rtx
	movq	-8752(%rbp), %r15
	movq	%rax, %rdi
	movq	8(%r15), %rsi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r9
	movq	%r9, -8720(%rbp)
	jmp	.L19309
.L26552:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24920
.L19301:
	movq	-8760(%rbp), %r12
	xorl	%esi, %esi
	movq	8(%r12), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-8760(%rbp), %rdx
	movq	%rax, %r12
	movq	16(%rdx), %rdi
	call	protect_from_queue
	movq	-8760(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L26553
.L19303:
	movq	-8760(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8712(%rbp)
	movq	%r12, 8(%rax)
	movq	-8712(%rbp), %r8
	movq	%rbx, 16(%r8)
	jmp	.L19296
.L26553:
	cmpq	16(%rsi), %rax
	jne	.L19303
	jmp	.L19296
.L26535:
	jne	.L19297
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, %rbx
	movq	-8760(%rbp), %rax
	cmpq	8(%rax), %rbx
	je	.L19296
	movq	%rax, %rdi
	call	copy_rtx
	movq	%rax, -8712(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L19296
.L19293:
	testq	%rcx, %rcx
	je	.L26554
	movq	-8760(%rbp), %r15
	movq	24(%r15), %r9
	testq	%r9, %r9
	movq	%r9, -8712(%rbp)
	jne	.L19296
	movq	-8760(%rbp), %r12
	movq	8(%r12), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rcx
	movq	%rcx, -8712(%rbp)
	jmp	.L19296
.L26554:
	movq	-8760(%rbp), %rax
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rax, -8712(%rbp)
	jmp	.L19296
.L19286:
	testq	%rcx, %rcx
	movl	$8, -8700(%rbp)
	je	.L19282
	movl	32(%rcx), %eax
	jmp	.L24919
.L19285:
	cmpl	$7, %edx
	ja	.L19281
	jmp	.L19286
.L26533:
	movq	8(%r14), %rdi
	call	int_size_in_bytes
	movl	%eax, -4860(%rbp)
	movq	-8760(%rbp), %rax
	cmpw	$39, (%rax)
	jne	.L25561
	movq	-8760(%rbp), %r8
	movq	8(%r8), %rcx
	movq	8(%rcx), %r15
	movl	(%rcx), %r14d
	cmpq	$0, 8(%r15)
	movslq	%r14d,%rdi
	sete	%r11b
	leaq	15(,%rdi,8), %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	leaq	32(%rsp), %r12
	movzbl	%r11b, %r10d
	movq	%r12, -4872(%rbp)
	movl	%r10d, -8696(%rbp)
	movl	-8696(%rbp), %eax
	cmpl	%r14d, %eax
	movl	%eax, -8688(%rbp)
	jge	.L23971
.L19265:
	movslq	-8688(%rbp),%r14
	movq	8(%rcx,%r14,8), %rsi
	movq	%r14, -4880(%rbp)
	movl	-4860(%rbp), %ecx
	movq	8(%rsi), %rax
	movq	16(%rsi), %r9
	testl	%ecx, %ecx
	movzbl	2(%rax), %r14d
	movq	8(%r9), %r15
	movslq	%r14d,%rdx
	movzbl	mode_size(%rdx), %ebx
	movq	%rdx, -4888(%rbp)
	movl	%ebx, -8692(%rbp)
	js	.L19238
	movslq	-4860(%rbp),%r12
	mov	%ebx, %edi
	leaq	(%rdi,%r15), %rbx
	cmpq	%r12, %rbx
	jle	.L19238
	movl	-4860(%rbp), %r10d
	subl	%r15d, %r10d
	movl	%r10d, -8692(%rbp)
	je	.L25560
.L19238:
	movq	-8752(%rbp), %r12
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L24540
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L19242
	cmpw	$54, %dx
	je	.L19242
	cmpw	$55, %dx
	je	.L19242
	cmpw	$58, %dx
	je	.L19242
	cmpw	$134, %dx
	je	.L19242
	cmpw	$56, %dx
	je	.L19242
	cmpw	$140, %dx
	je	.L19242
.L19241:
	movq	-8752(%rbp), %rcx
	movl	%r14d, %edi
	movzbl	2(%rcx), %eax
	testb	%al, %al
	je	.L24917
	movzbl	%al, %edi
.L24917:
	call	gen_reg_rtx
	movq	-8752(%rbp), %rsi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	emit_move_insn
	movzwl	(%r12), %edx
.L19240:
	cmpw	$66, %dx
	je	.L24540
.L19245:
	cmpw	$65, %dx
	je	.L26555
	leal	-67(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L19262
	cmpw	$54, %dx
	je	.L19262
	cmpw	$55, %dx
	je	.L19262
	cmpw	$58, %dx
	je	.L19262
	cmpw	$134, %dx
	je	.L19262
	cmpw	$56, %dx
	je	.L19262
	cmpw	$140, %dx
	je	.L19262
	cmpw	$61, %dx
	je	.L26556
.L19261:
	movl	-8692(%rbp), %edx
	movslq	-4860(%rbp),%r10
	movq	%r12, %rdi
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r14d, %r9d
	movl	%r14d, (%rsp)
	sall	$3, %edx
	mov	%edx, %esi
	movq	%r10, 8(%rsp)
	leaq	0(,%r15,8), %rdx
	call	extract_bit_field
.L24918:
	movq	-4880(%rbp), %r12
	movq	-4872(%rbp), %r11
	movq	%rax, (%r11,%r12,8)
.L19236:
	movq	-8760(%rbp), %r8
	incl	-8688(%rbp)
	movl	-8688(%rbp), %eax
	movq	8(%r8), %rcx
	cmpl	(%rcx), %eax
	jl	.L19265
.L23971:
	movq	cfun(%rip), %r15
	movq	16(%r15), %r9
	movq	40(%r9), %rbx
	testq	%rbx, %rbx
	je	.L23973
.L19271:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26557
	call	emit_insn
	movq	%rax, 16(%rbx)
.L19270:
	movq	cfun(%rip), %r10
	movq	40(%rbx), %r14
	movq	16(%r10), %rdi
	testq	%r14, %r14
	movq	%r14, %rbx
	movq	%r14, 40(%rdi)
	jne	.L19271
	movq	-8760(%rbp), %rbx
	movq	8(%rbx), %rcx
.L23973:
	movl	-8696(%rbp), %r11d
	cmpl	(%rcx), %r11d
	jge	.L18669
.L19277:
	movslq	-8696(%rbp),%r9
	movq	-4872(%rbp), %r8
	salq	$3, %r9
	movq	8(%r9,%rcx), %r15
	movq	(%r8,%r9), %rsi
	movq	8(%r15), %rdi
	call	emit_move_insn
	movq	-8760(%rbp), %rax
	incl	-8696(%rbp)
	movl	-8696(%rbp), %edx
	movq	8(%rax), %r12
	cmpl	(%r12), %edx
	movq	%r12, %rcx
	jl	.L19277
	jmp	.L18669
.L26557:
	movq	8(%rdi), %rsi
	movq	8(%rsi), %rcx
	movq	%rcx, 16(%rbx)
	call	emit_insn
	jmp	.L19270
.L26556:
	movzbl	2(%r12), %esi
	cmpl	%r14d, %esi
	jne	.L19261
.L19262:
	movq	-4880(%rbp), %rdi
	movq	-4872(%rbp), %r14
	movq	%r12, (%r14,%rdi,8)
	jmp	.L19236
.L26555:
	testq	%r15, %r15
	jne	.L24403
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %r8
	movzbl	mode_size(%r8), %ebx
	cmpl	%ebx, -8692(%rbp)
	je	.L19251
.L19252:
	movzbq	2(%rdx), %rcx
	movzbq	mode_size(%rcx), %r9
	cmpq	%r9, %r15
	je	.L26558
.L19250:
	testq	%r15, %r15
	jne	.L22779
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbx
	movzbq	mode_size(%rbx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %r15
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r15, %rdi
	movl	%r14d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	jmp	.L24918
.L26558:
	movq	16(%r12), %rdx
	movzbq	2(%rdx), %rdi
	movzbl	mode_size(%rdi), %esi
	cmpl	%esi, -8692(%rbp)
	jne	.L19250
.L19251:
	xorl	%r10d, %r10d
	movq	-4880(%rbp), %r11
	movq	-4872(%rbp), %rax
	testq	%r15, %r15
	setne	%r10b
	leaq	(%rax,%r11,8), %rbx
	movq	8(%r12,%r10,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L19236
	cmpw	$54, %dx
	je	.L19236
	cmpw	$55, %dx
	je	.L19236
	cmpw	$58, %dx
	je	.L19236
	cmpw	$134, %dx
	je	.L19236
	cmpw	$56, %dx
	je	.L19236
	cmpw	$140, %dx
	je	.L19236
	cmpw	$61, %dx
	je	.L26559
.L19256:
	movslq	-4860(%rbp),%r8
	movl	-8692(%rbp), %r9d
	movl	%r14d, (%rsp)
	xorl	%edx, %edx
	movl	$1, %ecx
	sall	$3, %r9d
	movq	%r8, 8(%rsp)
	mov	%r9d, %esi
	xorl	%r8d, %r8d
	movq	(%rbx), %rdi
	movl	%r14d, %r9d
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L19236
.L26559:
	movzbl	2(%rcx), %r12d
	cmpl	%r14d, %r12d
	jne	.L19256
	jmp	.L19236
.L24403:
	movq	8(%r12), %rdx
	jmp	.L19252
.L24540:
	movl	%r14d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L19246
	cmpl	%eax, 32(%rdx)
	jae	.L19247
.L24402:
	movzwl	(%r12), %edx
	jmp	.L19245
.L19247:
	movl	%r14d, %edi
	leaq	0(,%r15,8), %rbx
	call	get_mode_alignment
	mov	%eax, %edi
	movq	%rbx, %rax
	cqto
	idivq	%rdi
	testq	%rdx, %rdx
	jne	.L24402
	movq	-4888(%rbp), %rax
	movzbl	mode_size(%rax), %edx
	cmpl	%edx, -8692(%rbp)
	jne	.L24402
	movl	%r14d, %edi
	call	gen_reg_rtx
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-4880(%rbp), %r11
	movq	-4872(%rbp), %r10
	movq	%r12, %rdi
	movl	%r14d, %esi
	movq	%r15, %rdx
	leaq	(%r10,%r11,8), %rbx
	movq	%rax, (%rbx)
	call	adjust_address_1
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L19236
.L19246:
	cmpl	$8, %eax
	ja	.L24402
	jmp	.L19247
.L19242:
	movq	-8752(%rbp), %r9
	movzbl	2(%r9), %ecx
	movzbl	%cl, %r8d
	cmpl	%r14d, %r8d
	je	.L19240
	testb	%cl, %cl
	je	.L19240
	jmp	.L19241
.L26532:
	cmpb	$29, 16(%r14)
	jne	.L18693
	movq	%r14, %rdi
	call	expr_size
	cmpw	$54, (%rax)
	movq	%rax, -8568(%rbp)
	je	.L26560
.L18694:
	movq	sizetype_tab(%rip), %rdi
	movq	-8568(%rbp), %rsi
	call	make_tree
	xorl	%esi, %esi
	movslq	32(%r14),%rdi
	movq	%rax, %r12
	call	size_int_wide
	movq	%r12, %rsi
	movl	$78, %edi
	movq	%rax, %rdx
	call	size_binop
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	movq	%rax, -4784(%rbp)
	call	expand_expr
	xorl	%edx, %edx
	movl	ptr_mode(%rip), %edi
	movq	%rax, %rsi
	movq	$0, -8656(%rbp)
	call	convert_to_mode
	movl	$8, %edx
	movq	-8752(%rbp), %rcx
	movq	-8760(%rbp), %r14
	movq	%rax, -8600(%rbp)
	movq	%rax, -8624(%rbp)
	movq	%rcx, -8616(%rbp)
	movq	%r14, -8608(%rbp)
	movq	16(%r14), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L18897
	movl	32(%rax), %edx
.L18897:
	movq	-8752(%rbp), %r9
	movq	16(%r9), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L18898
	cmpl	32(%rax), %edx
	jb	.L18899
.L18894:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L18895
	movl	32(%rcx), %r15d
.L18895:
	movq	-8760(%rbp), %rax
	cmpb	$51, 2(%rax)
	jne	.L25547
	movq	-8752(%rbp), %rdi
	cmpb	$51, 2(%rdi)
	jne	.L25546
	movq	-8760(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L18906
	cmpl	$66, %eax
	je	.L26561
.L18910:
	cmpl	$75, %eax
	je	.L18914
	cmpl	$78, %eax
	je	.L18914
.L18909:
	movq	-8752(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L18919
	cmpl	$66, %eax
	je	.L26562
.L18923:
	cmpl	$75, %eax
	je	.L18927
	cmpl	$78, %eax
	je	.L18927
.L18922:
	movq	-8600(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L18932
	cmpl	$66, %eax
	je	.L26563
.L18936:
	cmpl	$75, %eax
	je	.L18940
	cmpl	$78, %eax
	je	.L18940
.L18935:
	movq	-8608(%rbp), %r8
	cmpw	$66, (%r8)
	jne	.L25545
	movq	-8616(%rbp), %r11
	cmpw	$66, (%r11)
	jne	.L25544
	cmpq	$0, -8624(%rbp)
	je	.L25543
	movq	-8624(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L26564
.L18948:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -4800(%rbp)
	testl	%r12d, %r12d
	je	.L23955
.L19081:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L19067
	movq	-8624(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L26565
.L19071:
	testb	$2, target_flags+3(%rip)
	je	.L19072
	cmpw	$63, mode_bitsize(%r15,%r15)
.L24911:
	jbe	.L19067
.L19070:
	movslq	%edx,%rsi
	leaq	(%rsi,%rsi,4), %rcx
	movq	%rsi, -4808(%rbp)
	movq	insn_data+24(,%rcx,8), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L19074
	movq	-8608(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L19067
.L19074:
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L26566
.L19075:
	movq	72(%r14), %rax
	testq	%rax, %rax
	je	.L19076
	xorl	%esi, %esi
	movq	-4800(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L19067
.L19076:
	call	get_last_insn
	movl	$1, %edx
	movq	-8624(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -4816(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r14), %rax
	testq	%rax, %rax
	jne	.L26567
.L19077:
	movq	-4808(%rbp), %rdx
	movq	-8608(%rbp), %rdi
	xorl	%eax, %eax
	movq	-8616(%rbp), %rsi
	movq	-4800(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24516
	movq	-4816(%rbp), %rdi
	call	delete_insns_since
.L19067:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L19081
.L23955:
	testb	$2, target_flags+3(%rip)
	movq	-8608(%rbp), %r8
	movl	$0, volatile_ok(%rip)
	setne	%r14b
	movq	8(%r8), %rsi
	movzbl	%r14b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%r10b
	movq	%rax, %r14
	movq	-8616(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%r10b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-8624(%rbp), %rsi
	movq	sizetype_tab(%rip), %r9
	movq	%rax, %rbx
	movzbl	61(%r9), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L26568
.L19090:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %r10
	movq	8(%rdx), %rdi
	movq	(%r10), %r9
	movq	$0, (%r9)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r15
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r15), %rbx
	movq	8(%rbx), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	jne	.L26569
.L19079:
	movq	-8600(%rbp), %rbx
	cmpw	$54, (%rbx)
	je	.L26570
	movq	sizetype_tab(%rip), %r14
	movq	-8600(%rbp), %rcx
	xorl	%r9d, %r9d
	movq	optab_table+16(%rip), %rsi
	movq	-8568(%rbp), %rdx
	movzbl	61(%r14), %r8d
	movl	$3, (%rsp)
	shrb	$1, %r8b
	movzbl	%r8b, %edi
	xorl	%r8d, %r8d
	call	expand_binop
	movq	-4784(%rbp), %rdi
	movq	%rax, %rbx
	call	highest_pow2_factor
	movq	-8600(%rbp), %rsi
	movq	-8760(%rbp), %rdi
	movq	%rax, %rdx
	call	offset_address
	movq	%rax, -8760(%rbp)
	call	gen_label_rtx
	xorl	%r9d, %r9d
	movq	%rax, -8656(%rbp)
	movq	const_int_rtx+512(%rip), %rsi
	movq	%rbx, %rdi
	movzbl	2(%rbx), %r8d
	movl	$107, %edx
	xorl	%ecx, %ecx
	movq	%rax, (%rsp)
	call	emit_cmp_and_jump_insns
.L19093:
	cmpq	const_int_rtx+512(%rip), %rbx
	je	.L19094
	movq	-8760(%rbp), %rdx
	cmpw	$66, (%rdx)
	movq	%rdx, -8672(%rbp)
	je	.L26571
	movq	-8760(%rbp), %rax
	movzbl	2(%rax), %edi
	call	get_mode_alignment
.L24912:
	movl	%eax, -8660(%rbp)
.L19096:
	movq	-8760(%rbp), %rsi
	movzbl	2(%rsi), %eax
	cmpb	$51, %al
	je	.L19099
	cmpw	$54, (%rbx)
	je	.L26572
.L19099:
	movq	-8760(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L19101
	cmpl	$66, %eax
	je	.L26573
.L19105:
	cmpl	$75, %eax
	je	.L19109
	cmpl	$78, %eax
	je	.L19109
.L19104:
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L19114
	cmpl	$66, %eax
	je	.L26574
.L19118:
	cmpl	$75, %eax
	je	.L19122
	cmpl	$78, %eax
	je	.L19122
.L19117:
	cmpw	$54, (%rbx)
	je	.L26575
.L19127:
	shrl	$3, -8660(%rbp)
	xorl	%edi, %edi
	mov	-8660(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r14d
	movq	%rax, -4832(%rbp)
	testl	%r14d, %r14d
	je	.L23969
.L19221:
	movslq	%r14d,%rcx
	movl	clrstr_optab(,%rcx,4), %edx
	movq	%rcx, -4840(%rbp)
	cmpl	$1317, %edx
	je	.L19208
	cmpw	$54, (%rbx)
	je	.L26576
.L19212:
	testb	$2, target_flags+3(%rip)
	je	.L19213
	movq	-4840(%rbp), %rax
	cmpw	$63, mode_bitsize(%rax,%rax)
.L24915:
	jbe	.L19208
.L19211:
	movslq	%edx,%r15
	leaq	(%r15,%r15,4), %r11
	movq	%r15, -4848(%rbp)
	movq	insn_data+24(,%r11,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L19215
	movq	-8672(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L19208
.L19215:
	movq	48(%r15), %rax
	testq	%rax, %rax
	je	.L19216
	xorl	%esi, %esi
	movq	-4832(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L19208
.L19216:
	call	get_last_insn
	movl	$1, %edx
	movq	%rbx, %rsi
	movl	%r14d, %edi
	movq	%rax, -4856(%rbp)
	call	convert_to_mode
	movq	%rax, %r12
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L26577
.L19217:
	movq	-4848(%rbp), %rcx
	movq	-8672(%rbp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	-4832(%rbp), %rdx
	leaq	(%rcx,%rcx,4), %r8
	call	*insn_data+16(,%r8,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24916
	movq	-4856(%rbp), %rdi
	call	delete_insns_since
.L19208:
	movq	-4840(%rbp), %rdx
	movzbl	mode_wider_mode(%rdx), %r14d
	testl	%r14d, %r14d
	jne	.L19221
.L23969:
	testb	$2, target_flags+3(%rip)
	movq	-8672(%rbp), %r14
	setne	%r12b
	movq	8(%r14), %rsi
	movzbl	%r12b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	sizetype_tab(%rip), %rsi
	movq	%rax, %r14
	movzbl	61(%rsi), %r9d
	movq	%rbx, %rsi
	shrb	$1, %r9b
	movzbl	%r9b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.0(%rip)
	movq	%rax, %r15
	je	.L26578
.L19226:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	const_int_rtx+512(%rip), %rsi
	movq	integer_types+40(%rip), %rdi
	movq	%rax, %r12
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.0(%rip), %rcx
	movq	%rax, (%rbx)
	movq	(%r12), %r9
	movq	8(%rcx), %rdi
	movq	(%r9), %rdx
	movq	$0, (%rdx)
	call	build_pointer_type
	movq	fn.0(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	movq	%r12, %rcx
	movl	$53, %edi
	movq	fn.0(%rip), %r8
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%r8), %r15
	xorl	%r8d, %r8d
	movq	8(%r15), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	jne	.L26579
.L19094:
	cmpq	$0, -8656(%rbp)
	je	.L18669
	movq	-8656(%rbp), %rdi
	call	emit_label
	jmp	.L18669
.L26579:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
.L24916:
	call	emit_insn
	jmp	.L19094
.L26578:
	movl	$.LC7, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.0(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.0(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.0, %edi
	movq	%rax, fn.0(%rip)
	call	ggc_add_tree_root
	movq	fn.0(%rip), %r11
	xorl	%esi, %esi
	orb	$1, 49(%r11)
	movq	fn.0(%rip), %r10
	orb	$8, 18(%r10)
	movq	fn.0(%rip), %rdi
	orb	$64, 50(%rdi)
	movq	fn.0(%rip), %rbx
	orb	$2, 18(%rbx)
	movq	fn.0(%rip), %rdi
	call	make_decl_rtl
	movq	fn.0(%rip), %rdi
	call	assemble_external
	jmp	.L19226
.L26577:
	movq	%r12, %rdi
	movl	%r14d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L19217
	movq	%r12, %rsi
	movl	%r14d, %edi
	call	copy_to_mode_reg
	movq	%rax, %r12
	jmp	.L19217
.L19213:
	movq	-4840(%rbp), %r10
	cmpw	$31, mode_bitsize(%r10,%r10)
	jmp	.L24915
.L26576:
	movq	mode_mask_array(,%rcx,8), %r12
	shrq	$1, %r12
	cmpq	%r12, 8(%rbx)
	jbe	.L19211
	jmp	.L19212
.L26575:
	movq	8(%rbx), %r14
	xorl	%r15d, %r15d
	movl	$17, %esi
.L19140:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23958
.L19137:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L19137
.L23958:
	testl	%edi, %edi
	je	.L19130
	movslq	%edi,%r12
	movq	%r12, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L19139
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L19139
	movzbq	mode_size(%r12), %r11
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%r11
	addq	%rax, %r15
	movq	%rdx, %r14
.L19139:
	movzbq	mode_size(%r12), %rsi
	cmpq	$1, %rsi
	ja	.L19140
.L19130:
	testq	%r14, %r14
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L19143
	movq	ix86_cost(%rip), %r14
	mov	40(%r14), %r12d
	cmpq	%r12, %r15
	jae	.L19127
.L19144:
	movq	8(%rbx), %r9
	movq	-8672(%rbp), %r15
	leaq	-272(%rbp), %r12
	testb	$2, target_flags+3(%rip)
	movq	$clear_by_pieces_1, -232(%rbp)
	movq	$0, -224(%rbp)
	setne	%dl
	xorl	%esi, %esi
	movq	%r15, -272(%rbp)
	movq	%r9, -248(%rbp)
	movq	8(%r15), %r8
	movq	$0, -240(%rbp)
	movl	$0, -8684(%rbp)
	movzbl	%dl, %ecx 
	movq	%r8, -264(%rbp)
	movzwl	(%r8), %edx
	leaq	5(,%rcx,4), %r15
	leaq	16(%r12), %rcx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L19148
	cmpw	$99, %dx
	je	.L19148
	cmpw	$98, %dx
	je	.L19148
.L19147:
	movl	%esi, (%rcx)
	movl	$0, 20(%r12)
	leaq	56(%r12), %rdx
	movzwl	(%r8), %eax
	xorl	%ecx, %ecx
	cmpw	$96, %ax
	je	.L19150
	cmpw	$98, %ax
	je	.L19150
.L19149:
	movl	%ecx, (%rdx)
	movl	56(%r12), %eax
	testl	%eax, %eax
	je	.L19151
	movq	24(%r12), %rsi
	movq	%rsi, 32(%r12)
.L19151:
	movl	16(%r12), %edi
	testl	%edi, %edi
	jne	.L19152
	movq	24(%r12), %r14
	movq	$0, -8680(%rbp)
	movl	$17, %esi
.L19165:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23961
.L19162:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %r11
	cmpq	%rsi, %r11
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L19162
.L23961:
	testl	%edi, %edi
	je	.L19155
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L19164
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L19164
	movzbq	mode_size(%rbx), %rsi
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, -8680(%rbp)
	movq	%rdx, %r14
.L19164:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L19165
.L19155:
	testq	%r14, %r14
	jne	.L25529
	cmpq	$2, -8680(%rbp)
	jbe	.L19152
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23963
.L19173:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%r15, %rdx
	cmovae	-8684(%rbp), %ecx
	movl	%ecx, -8684(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L19173
.L23963:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L19152
	movzwl	(%r8), %edx
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L19177
	cmpw	$54, %dx
	je	.L19177
	cmpw	$55, %dx
	je	.L19177
	cmpw	$58, %dx
	je	.L19177
	cmpw	$134, %dx
	je	.L19177
	cmpw	$56, %dx
	je	.L19177
	cmpw	$140, %dx
	je	.L19177
.L19152:
	cmpq	$1, %r15
	jbe	.L19180
.L19201:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23966
.L19187:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %r11
	cmpq	%r15, %r11
	cmovae	-8684(%rbp), %ecx
	movl	%ecx, -8684(%rbp)
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L19187
.L23966:
	movl	-8684(%rbp), %r15d
	testl	%r15d, %r15d
	je	.L19180
	movslq	-8684(%rbp),%r15
	movq	%r15, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	movl	8(%rcx), %ebx
	cmpl	$1317, %ebx
	je	.L19189
	movl	-8684(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	jb	.L19189
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rsi
	leaq	(%rsi,%rsi,4), %r9
	cmpq	%rdx, 24(%r12)
	movq	insn_data+16(,%r9,8), %r14
	movq	%r14, -4824(%rbp)
	movq	%rdx, %r14
	jb	.L19189
	movl	56(%r12), %ecx
.L19199:
	testl	%ecx, %ecx
	je	.L19193
	subq	%rdx, 32(%r12)
.L19193:
	movl	16(%r12), %ebx
	testl	%ebx, %ebx
	je	.L19194
	movq	(%r12), %rdi
	movl	-8684(%rbp), %esi
	movl	$1, %r8d
	movq	8(%r12), %rdx
	movq	32(%r12), %rcx
	call	adjust_automodify_address_1
.L24914:
	movl	-8684(%rbp), %edx
	movq	%rax, %rbx
	movq	48(%r12), %rdi
	movq	32(%r12), %rsi
	call	*40(%r12)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	*-4824(%rbp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L19198
	addq	%r14, 32(%r12)
.L19198:
	movq	24(%r12), %rdi
	movq	%r14, %rdx
	subq	%r14, %rdi
	cmpq	%r14, %rdi
	movq	%rdi, 24(%r12)
	jae	.L19199
.L19189:
	movzbq	mode_size(%r15), %r15
	cmpq	$1, %r15
	ja	.L19201
.L19180:
	cmpq	$0, 24(%r12)
	je	.L19094
	jmp	.L25451
.L19194:
	movq	(%r12), %rdi
	movl	-8684(%rbp), %esi
	movl	$1, %ecx
	movq	32(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24914
.L19177:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, 8(%r12)
	jmp	.L19152
.L19150:
	movl	$1, %ecx
	jmp	.L19149
.L19148:
	movl	$1, %esi
	jmp	.L19147
.L19143:
	cmpq	$2, %r15
	ja	.L19127
	jmp	.L19144
.L19122:
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbx), %rdi
	movq	%rax, %r14
	call	protect_from_queue
	cmpq	8(%rbx), %r14
	movq	%rax, %r12
	je	.L26580
.L19124:
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r14, 8(%rax)
	movq	%r12, 16(%rax)
	jmp	.L19117
.L26580:
	cmpq	16(%rbx), %rax
	jne	.L19124
	jmp	.L19117
.L26574:
	cmpb	$51, 2(%rbx)
	je	.L19115
	movq	8(%rbx), %r14
	cmpw	$71, (%r14)
	je	.L26581
.L19115:
	cmpl	$66, %eax
	jne	.L19118
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%rbx), %rax
	movq	%rax, %r12
	je	.L19117
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r12, 8(%rax)
	jmp	.L19117
.L26581:
	movq	8(%r14), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r14)
	movq	%rax, %r12
	je	.L19116
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L19117
.L19116:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24913:
	movq	%rax, %rbx
	jmp	.L19117
.L19114:
	cmpq	$0, 16(%rbx)
	je	.L26582
	movq	24(%rbx), %rax
	testq	%rax, %rax
	jne	.L24913
	movq	8(%rbx), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%rbx), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	16(%rbx), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbx), %rbx
	jmp	.L19117
.L26582:
	movq	8(%rbx), %rdi
	call	copy_to_reg
	jmp	.L24913
.L19109:
	movq	-8760(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-8760(%rbp), %r11
	movq	%rax, %r14
	movq	16(%r11), %rdi
	call	protect_from_queue
	movq	-8760(%rbp), %rdx
	movq	%rax, %r12
	cmpq	8(%rdx), %r14
	je	.L26583
.L19111:
	movq	-8760(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8672(%rbp)
	movq	%r14, 8(%rax)
	movq	-8672(%rbp), %rsi
	movq	%r12, 16(%rsi)
	jmp	.L19104
.L26583:
	cmpq	16(%rdx), %rax
	jne	.L19111
	jmp	.L19104
.L26573:
	jne	.L19105
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-8760(%rbp), %rcx
	movq	%rax, %r12
	cmpq	8(%rcx), %rax
	je	.L19104
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -8672(%rbp)
	movq	%r12, 8(%rax)
	jmp	.L19104
.L19101:
	movq	-8760(%rbp), %rsi
	cmpq	$0, 16(%rsi)
	je	.L26584
	movq	-8760(%rbp), %r9
	movq	24(%r9), %r15
	testq	%r15, %r15
	movq	%r15, -8672(%rbp)
	jne	.L19104
	movq	-8760(%rbp), %rax
	movq	8(%rax), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	-8760(%rbp), %r14
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	movq	-8760(%rbp), %r8
	movq	8(%r8), %rsi
	call	gen_move_insn
	movq	-8760(%rbp), %r12
	movq	%rax, %rdi
	movq	16(%r12), %rsi
	call	emit_insn_before
	movq	-8760(%rbp), %r10
	movq	24(%r10), %rdx
	movq	%rdx, -8672(%rbp)
	jmp	.L19104
.L26584:
	movq	8(%rsi), %rdi
	call	copy_to_reg
	movq	%rax, -8672(%rbp)
	jmp	.L19104
.L26572:
	movzbl	%al, %edx 
	movzbl	mode_size(%rdx), %edi
	cmpl	8(%rbx), %edi
	jne	.L19099
	movq	%rsi, %rdi
	movq	const_tiny_rtx(,%rdx,8), %rsi
	call	emit_move_insn
	jmp	.L19094
.L26571:
	movq	16(%rdx), %rax
	movl	$8, -8660(%rbp)
	testq	%rax, %rax
	je	.L19096
	movl	32(%rax), %eax
	jmp	.L24912
.L26570:
	movq	8(%rbx), %rsi
	movq	-8568(%rbp), %rdi
	negq	%rsi
	call	plus_constant_wide
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-8600(%rbp), %r12
	movq	-8760(%rbp), %rdi
	movl	$51, %esi
	movq	%rax, %rbx
	movq	8(%r12), %rdx
	call	adjust_address_1
	movq	%rax, -8760(%rbp)
	jmp	.L19093
.L26569:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L19079
.L26568:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %rsi
	orb	$1, 49(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %rcx
	orb	$8, 18(%rcx)
	movq	fn.1(%rip), %r11
	orb	$64, 50(%r11)
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L19090
.L24516:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L19079
.L26567:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L19077
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L19077
.L26566:
	movq	-8616(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L19067
	jmp	.L19075
.L19072:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L24911
.L26565:
	movq	mode_mask_array(,%r15,8), %r11
	shrq	$1, %r11
	cmpq	%r11, 8(%rsi)
	jbe	.L19070
	jmp	.L19071
.L26564:
	movq	8(%rcx), %r12
	xorl	%r14d, %r14d
	movl	$17, %esi
.L18961:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23944
.L18958:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %r10
	cmpq	%rsi, %r10
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L18958
.L23944:
	testl	%edi, %edi
	je	.L18951
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L18960
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L18960
	movzbq	mode_size(%rbx), %r8
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r8
	addq	%rax, %r14
	movq	%rdx, %r12
.L18960:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L18961
.L18951:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L18964
	movq	ix86_cost(%rip), %rbx
	mov	40(%rbx), %edx
	cmpq	%rdx, %r14
	jae	.L18948
.L18965:
	movq	-8624(%rbp), %r8
	movq	-8616(%rbp), %rsi
	movq	-8608(%rbp), %rdi
	movq	-8608(%rbp), %r9
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r14b
	movq	8(%rsi), %r8
	movq	$0, -1816(%rbp)
	movl	$0, -8636(%rbp)
	movq	%r8, -1840(%rbp)
	movzbl	%r14b, %ecx
	movq	8(%rdi), %r10
	movq	%r9, -1872(%rbp)
	leal	5(,%rcx,4), %r14d
	xorl	%ecx, %ecx
	movq	%r10, -8632(%rbp)
	movq	-8632(%rbp), %r11
	movzwl	(%r11), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L18970
	cmpw	$99, %dx
	je	.L18970
	cmpw	$98, %dx
	je	.L18970
.L18969:
	movq	-8632(%rbp), %rbx
	movl	%ecx, -1856(%rbp)
	xorl	%edx, %edx
	movzwl	(%rbx), %eax
	cmpw	$96, %ax
	je	.L18972
	cmpw	$98, %ax
	je	.L18972
.L18971:
	movl	%edx, -1808(%rbp)
	movq	-8616(%rbp), %rax
	xorl	%ecx, %ecx
	movq	-8632(%rbp), %rdx
	movq	%rax, -1848(%rbp)
	movq	%rdx, -1864(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L18975
	cmpw	$99, %dx
	je	.L18975
	cmpw	$98, %dx
	je	.L18975
.L18974:
	movl	-1808(%rbp), %r11d
	movl	%ecx, -1832(%rbp)
	movl	$0, -1828(%rbp)
	movl	$0, -1852(%rbp)
	testl	%r11d, %r11d
	je	.L18976
	movq	%r12, -1816(%rbp)
.L18976:
	movl	-1832(%rbp), %r9d
	movq	%r12, -1824(%rbp)
	testl	%r9d, %r9d
	je	.L18978
	movl	-1856(%rbp), %r10d
	testl	%r10d, %r10d
	jne	.L18977
.L18978:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L18991:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23947
.L18988:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L18988
.L23947:
	testl	%edi, %edi
	je	.L18981
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L18990
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L18990
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L18990:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L18991
.L18981:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L18977
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23949
.L18999:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %r9d
	cmpl	%r14d, %r9d
	cmovae	-8636(%rbp), %ecx
	movl	%ecx, -8636(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L18999
.L23949:
	movl	-1832(%rbp), %eax
	testl	%eax, %eax
	jne	.L19005
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L19003
	cmpw	$54, %dx
	je	.L19003
	cmpw	$55, %dx
	je	.L19003
	cmpw	$58, %dx
	je	.L19003
	cmpw	$134, %dx
	je	.L19003
	cmpw	$56, %dx
	je	.L19003
	cmpw	$140, %dx
	je	.L19003
.L19005:
	movl	-1856(%rbp), %eax
	testl	%eax, %eax
	jne	.L18977
	movq	-8632(%rbp), %rbx
	movzwl	(%rbx), %edx
	leal	-67(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L19007
	cmpw	$54, %dx
	je	.L19007
	cmpw	$55, %dx
	je	.L19007
	cmpw	$58, %dx
	je	.L19007
	cmpw	$134, %dx
	je	.L19007
	cmpw	$56, %dx
	je	.L19007
	cmpw	$140, %dx
	je	.L19007
.L18977:
	cmpl	$1, %r14d
	jbe	.L19010
.L19061:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23952
.L19017:
	movslq	%ecx,%rdi
	movzbl	mode_size(%rdi), %edx
	cmpl	%r14d, %edx
	cmovae	-8636(%rbp), %ecx
	movl	%ecx, -8636(%rbp)
	movzbl	mode_wider_mode(%rdi), %ecx
	testl	%ecx, %ecx
	jne	.L19017
.L23952:
	movl	-8636(%rbp), %eax
	testl	%eax, %eax
	je	.L19010
	movslq	-8636(%rbp),%r15
	movq	%r15, %r14
	salq	$4, %r14
	addq	optab_table+240(%rip), %r14
	movl	8(%r14), %ebx
	cmpl	$1317, %ebx
	je	.L19019
	movl	-8636(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L19019
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rsi
	movq	$0, -8648(%rbp)
	leaq	(%rsi,%rsi,4), %r11
	cmpq	%rdx, -1824(%rbp)
	movq	insn_data+16(,%r11,8), %r12
	movq	%rdx, -6136(%rbp)
	movq	%r12, -4792(%rbp)
	leaq	-1872(%rbp), %r12
	jb	.L19019
	movl	-1808(%rbp), %ecx
.L19059:
	testl	%ecx, %ecx
	je	.L19023
	subq	%rdx, 56(%r12)
.L19023:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L19024
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L19025
	movl	-8636(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24907:
	movq	%rax, -8648(%rbp)
.L19024:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L19027
	movq	24(%r12), %rdi
	movl	-8636(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24908:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L26585
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L19033
	movzbl	mode_size(%r15), %r9d
	leal	7(%r9), %edx
	andl	$-8, %edx
.L19034:
	movq	cfun(%rip), %rbx
	andl	$33554432, %esi
	movq	16(%rbx), %r8
	leaq	8(%r8), %rdi
	movl	8(%r8), %ecx
	je	.L19035
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24909:
	leal	(%rax,%rcx), %r11d
	movl	%r11d, (%rdi)
	movq	%r15, %rdi
	salq	$4, %rdi
	addq	optab_table+384(%rip), %rdi
	movl	8(%rdi), %eax
	cmpl	$1317, %eax
	je	.L19037
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rcx
	movq	insn_data+24(,%rcx,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L19038
	movq	%r14, %rdi
	movl	-8636(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L26586
.L19038:
	leaq	(%rbx,%rbx,4), %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%rsi,8)
.L24910:
	movq	%rax, %rdi
	call	emit_insn
.L19057:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L19058
	movq	-6136(%rbp), %r14
	addq	%r14, 56(%r12)
.L19058:
	movq	48(%r12), %rbx
	movq	-6136(%rbp), %rdx
	subq	-6136(%rbp), %rbx
	cmpq	%rdx, %rbx
	movq	%rbx, 48(%r12)
	jae	.L19059
.L19019:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L19061
.L19010:
	cmpq	$0, -1824(%rbp)
	je	.L19079
	jmp	.L25518
.L26586:
	movl	-8636(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L19038
.L19037:
	movzbl	mode_size(%r15), %r9d
	cmpl	%edx, %r9d
	je	.L26587
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r8b
	movzbl	%r8b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r10b
	movzbl	%r10b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L19045:
	movl	-8636(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%edi, %edi
	testq	%rdi, %rdi
	movq	%rax, %rbx
	je	.L19054
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L26588
.L19054:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L19057
.L26588:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L19054
.L26587:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L19045
.L19035:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24909
.L19033:
	movzbl	mode_size(%r15), %r10d
	leal	1(%r10), %edx
	andl	$-2, %edx
	jmp	.L19034
.L26585:
	movq	%rax, %rsi
	movq	-8648(%rbp), %rdi
	xorl	%eax, %eax
	call	*-4792(%rbp)
	jmp	.L24910
.L19027:
	movq	24(%r12), %rdi
	movl	-8636(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24908
.L19025:
	movl	-8636(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24907
.L19007:
	movq	-8632(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -1864(%rbp)
	jmp	.L18977
.L19003:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -1840(%rbp)
	jmp	.L19005
.L18975:
	movl	$1, %ecx
	jmp	.L18974
.L18972:
	movl	$1, %edx
	jmp	.L18971
.L18970:
	movl	$1, %ecx
	jmp	.L18969
.L18964:
	cmpq	$2, %r14
	ja	.L18948
	jmp	.L18965
.L18940:
	movq	-8600(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-8600(%rbp), %rcx
	movq	%rax, %r12
	movq	16(%rcx), %rdi
	call	protect_from_queue
	movq	-8600(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26589
.L18942:
	movq	-8600(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8624(%rbp)
	movq	%r12, 8(%rax)
	movq	-8624(%rbp), %rax
	movq	%rbx, 16(%rax)
	jmp	.L18935
.L26589:
	cmpq	16(%rcx), %rax
	jne	.L18942
	jmp	.L18935
.L26563:
	cmpb	$51, 2(%rdx)
	je	.L18933
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26590
.L18933:
	cmpl	$66, %eax
	jne	.L18936
	movq	-8600(%rbp), %r9
	xorl	%esi, %esi
	movq	8(%r9), %rdi
	call	protect_from_queue
	movq	-8600(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L18935
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -8624(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L18935
.L26590:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L18934
	movq	-8600(%rbp), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -8624(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L18935
.L18934:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24906:
	movq	%rax, -8624(%rbp)
	jmp	.L18935
.L18932:
	movq	-8600(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26591
	movq	-8600(%rbp), %rsi
	movq	24(%rsi), %rdi
	testq	%rdi, %rdi
	movq	%rdi, -8624(%rbp)
	jne	.L18935
	movq	-8600(%rbp), %rbx
	movq	8(%rbx), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	-8600(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r10
	movq	%r10, -8624(%rbp)
	jmp	.L18935
.L26591:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24906
.L18927:
	movq	-8752(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	%rax, %r12
	movq	-8752(%rbp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	-8752(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26592
.L18929:
	movq	-8752(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8616(%rbp)
	movq	%r12, 8(%rax)
	movq	-8616(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L18922
.L26592:
	cmpq	16(%rcx), %rax
	jne	.L18929
	jmp	.L18922
.L26562:
	cmpb	$51, 2(%rdx)
	je	.L18920
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26593
.L18920:
	cmpl	$66, %eax
	jne	.L18923
	movq	-8752(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	movq	-8752(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L18922
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -8616(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L18922
.L26593:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L18921
	movq	-8752(%rbp), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -8616(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L18922
.L18921:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24905:
	movq	%rax, -8616(%rbp)
	jmp	.L18922
.L18919:
	movq	-8752(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26594
	movq	-8752(%rbp), %r10
	movq	24(%r10), %rsi
	testq	%rsi, %rsi
	movq	%rsi, -8616(%rbp)
	jne	.L18922
	movq	-8752(%rbp), %r8
	movq	8(%r8), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	-8752(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdx
	movq	%rdx, -8616(%rbp)
	jmp	.L18922
.L26594:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24905
.L18914:
	movq	-8760(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-8760(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L26595
.L18916:
	movq	-8760(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8608(%rbp)
	movq	%r12, 8(%rax)
	movq	-8608(%rbp), %rsi
	movq	%rbx, 16(%rsi)
	jmp	.L18909
.L26595:
	cmpq	16(%rsi), %rax
	jne	.L18916
	jmp	.L18909
.L26561:
	jne	.L18910
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-8760(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L18909
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -8608(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L18909
.L18906:
	testq	%rsi, %rsi
	je	.L26596
	movq	-8760(%rbp), %rdx
	movq	24(%rdx), %rbx
	testq	%rbx, %rbx
	movq	%rbx, -8608(%rbp)
	jne	.L18909
	movq	-8760(%rbp), %r12
	movq	8(%r12), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r8
	movq	%r8, -8608(%rbp)
	jmp	.L18909
.L26596:
	movq	-8760(%rbp), %r10
	movq	8(%r10), %rdi
	call	copy_to_reg
	movq	%rax, -8608(%rbp)
	jmp	.L18909
.L18899:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L18895
	movl	32(%rsi), %r15d
	jmp	.L18895
.L18898:
	cmpl	$7, %edx
	ja	.L18894
	jmp	.L18899
.L26560:
	movq	-8568(%rbp), %rcx
	movslq	32(%r14),%r12
	cmpq	%r12, 8(%rcx)
	jge	.L18694
	movq	-8760(%rbp), %rdi
	movq	-8752(%rbp), %rdx
	movq	%rdi, -8552(%rbp)
	movq	%rdx, -8560(%rbp)
	movl	$8, %edx
	movq	16(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L18698
	movl	32(%rax), %edx
.L18698:
	movq	-8752(%rbp), %rbx
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L18699
	cmpl	32(%rax), %edx
	jb	.L18700
.L18695:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L18696
	movl	32(%rcx), %r15d
.L18696:
	movq	-8760(%rbp), %r10
	cmpb	$51, 2(%r10)
	jne	.L25547
	movq	-8752(%rbp), %r11
	cmpb	$51, 2(%r11)
	jne	.L25546
	movq	-8760(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L18707
	cmpl	$66, %eax
	je	.L26597
.L18711:
	cmpl	$75, %eax
	je	.L18715
	cmpl	$78, %eax
	je	.L18715
.L18710:
	movq	-8752(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L18720
	cmpl	$66, %eax
	je	.L26598
.L18724:
	cmpl	$75, %eax
	je	.L18728
	cmpl	$78, %eax
	je	.L18728
.L18723:
	movq	-8568(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L18733
	cmpl	$66, %eax
	je	.L26599
.L18737:
	cmpl	$75, %eax
	je	.L18741
	cmpl	$78, %eax
	je	.L18741
.L18736:
	movq	-8552(%rbp), %rsi
	cmpw	$66, (%rsi)
	jne	.L25545
	movq	-8560(%rbp), %r14
	cmpw	$66, (%r14)
	jne	.L25544
	cmpq	$0, -8568(%rbp)
	je	.L25543
	movq	-8568(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L26600
.L18749:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -4760(%rbp)
	testl	%r12d, %r12d
	je	.L23941
.L18882:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L18868
	movq	-8568(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L26601
.L18872:
	testb	$2, target_flags+3(%rip)
	je	.L18873
	cmpw	$63, mode_bitsize(%r15,%r15)
.L24904:
	jbe	.L18868
.L18871:
	movslq	%edx,%rbx
	leaq	(%rbx,%rbx,4), %r10
	movq	%rbx, -4768(%rbp)
	movq	insn_data+24(,%r10,8), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L18875
	movq	-8552(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L18868
.L18875:
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L26602
.L18876:
	movq	72(%r14), %rax
	testq	%rax, %rax
	je	.L18877
	xorl	%esi, %esi
	movq	-4760(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L18868
.L18877:
	call	get_last_insn
	movl	$1, %edx
	movq	-8568(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -4776(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r14), %rax
	testq	%rax, %rax
	jne	.L26603
.L18878:
	movq	-4768(%rbp), %rdx
	movq	-8552(%rbp), %rdi
	xorl	%eax, %eax
	movq	-8560(%rbp), %rsi
	movq	-4760(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24518
	movq	-4776(%rbp), %rdi
	call	delete_insns_since
.L18868:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L18882
.L23941:
	testb	$2, target_flags+3(%rip)
	movq	-8552(%rbp), %rcx
	movl	$0, volatile_ok(%rip)
	setne	%sil
	movzbl	%sil, %edi
	movq	8(%rcx), %rsi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%r11b
	movq	%rax, %r14
	movq	-8560(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%r11b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-8568(%rbp), %rsi
	movq	sizetype_tab(%rip), %r8
	movq	%rax, %rbx
	movzbl	61(%r8), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L26604
.L18891:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %r11
	movq	8(%rdx), %rdi
	movq	(%r11), %r8
	movq	$0, (%r8)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r15
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r15), %rbx
	movq	8(%rbx), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	je	.L18669
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	jmp	.L24927
.L26604:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r12
	xorl	%esi, %esi
	orb	$1, 49(%r12)
	movq	fn.1(%rip), %r10
	orb	$8, 18(%r10)
	movq	fn.1(%rip), %rdi
	orb	$64, 50(%rdi)
	movq	fn.1(%rip), %r9
	orb	$2, 18(%r9)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L18891
.L26603:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L18878
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L18878
.L26602:
	movq	-8560(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L18868
	jmp	.L18876
.L18873:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L24904
.L26601:
	movq	mode_mask_array(,%r15,8), %rdi
	shrq	$1, %rdi
	cmpq	%rdi, 8(%rsi)
	jbe	.L18871
	jmp	.L18872
.L26600:
	movq	8(%rcx), %r12
	xorl	%r14d, %r14d
	movl	$17, %esi
.L18762:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23930
.L18759:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L18759
.L23930:
	testl	%edi, %edi
	je	.L18752
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L18761
	call	get_mode_alignment
	movl	$128, %r11d
	cmpl	%eax, %r11d
	jb	.L18761
	movzbq	mode_size(%rbx), %r9
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r9
	addq	%rax, %r14
	movq	%rdx, %r12
.L18761:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L18762
.L18752:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L18765
	movq	ix86_cost(%rip), %r12
	mov	40(%r12), %ebx
	cmpq	%rbx, %r14
	jae	.L18749
.L18766:
	movq	-8560(%rbp), %r11
	movq	-8552(%rbp), %rdx
	movq	-8568(%rbp), %rdi
	movq	-8552(%rbp), %rsi
	testb	$2, target_flags+3(%rip)
	movq	8(%r11), %r8
	setne	%r14b
	movq	8(%rdi), %r12
	movq	$0, -1736(%rbp)
	movl	$0, -8580(%rbp)
	movq	%r8, -1760(%rbp)
	movq	8(%rdx), %r10
	movq	%rsi, -1792(%rbp)
	movzbl	%r14b, %ecx
	leal	5(,%rcx,4), %r14d
	xorl	%ecx, %ecx
	movq	%r10, -8576(%rbp)
	movq	-8576(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L18771
	cmpw	$99, %dx
	je	.L18771
	cmpw	$98, %dx
	je	.L18771
.L18770:
	movq	-8576(%rbp), %r9
	movl	%ecx, -1776(%rbp)
	xorl	%edx, %edx
	movzwl	(%r9), %eax
	cmpw	$96, %ax
	je	.L18773
	cmpw	$98, %ax
	je	.L18773
.L18772:
	movq	-8576(%rbp), %rax
	movq	-8560(%rbp), %r15
	movl	%edx, -1728(%rbp)
	xorl	%ecx, %ecx
	movq	%rax, -1784(%rbp)
	movq	%r15, -1768(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L18776
	cmpw	$99, %dx
	je	.L18776
	cmpw	$98, %dx
	je	.L18776
.L18775:
	movl	-1728(%rbp), %eax
	movl	%ecx, -1752(%rbp)
	movl	$0, -1748(%rbp)
	movl	$0, -1772(%rbp)
	testl	%eax, %eax
	je	.L18777
	movq	%r12, -1736(%rbp)
.L18777:
	movl	-1752(%rbp), %eax
	movq	%r12, -1744(%rbp)
	testl	%eax, %eax
	je	.L18779
	movl	-1776(%rbp), %eax
	testl	%eax, %eax
	jne	.L18778
.L18779:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L18792:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23933
.L18789:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L18789
.L23933:
	testl	%edi, %edi
	je	.L18782
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L18791
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L18791
	movzbq	mode_size(%rbx), %r11
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r11
	addq	%rax, %r15
	movq	%rdx, %r12
.L18791:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L18792
.L18782:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L18778
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23935
.L18800:
	movslq	%ecx,%rdi
	movzbl	mode_size(%rdi), %r9d
	cmpl	%r14d, %r9d
	cmovae	-8580(%rbp), %ecx
	movl	%ecx, -8580(%rbp)
	movzbl	mode_wider_mode(%rdi), %ecx
	testl	%ecx, %ecx
	jne	.L18800
.L23935:
	movl	-1752(%rbp), %ebx
	testl	%ebx, %ebx
	jne	.L18806
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L18804
	cmpw	$54, %dx
	je	.L18804
	cmpw	$55, %dx
	je	.L18804
	cmpw	$58, %dx
	je	.L18804
	cmpw	$134, %dx
	je	.L18804
	cmpw	$56, %dx
	je	.L18804
	cmpw	$140, %dx
	je	.L18804
.L18806:
	movl	-1776(%rbp), %eax
	testl	%eax, %eax
	jne	.L18778
	movq	-8576(%rbp), %rsi
	movzwl	(%rsi), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L18808
	cmpw	$54, %dx
	je	.L18808
	cmpw	$55, %dx
	je	.L18808
	cmpw	$58, %dx
	je	.L18808
	cmpw	$134, %dx
	je	.L18808
	cmpw	$56, %dx
	je	.L18808
	cmpw	$140, %dx
	je	.L18808
.L18778:
	cmpl	$1, %r14d
	jbe	.L18811
.L18862:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23938
.L18818:
	movslq	%ecx,%r8
	movzbl	mode_size(%r8), %edx
	cmpl	%r14d, %edx
	cmovae	-8580(%rbp), %ecx
	movl	%ecx, -8580(%rbp)
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L18818
.L23938:
	movl	-8580(%rbp), %r14d
	testl	%r14d, %r14d
	je	.L18811
	movslq	-8580(%rbp),%r15
	movq	%r15, %r12
	salq	$4, %r12
	addq	optab_table+240(%rip), %r12
	movl	8(%r12), %ebx
	cmpl	$1317, %ebx
	je	.L18820
	movl	-8580(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L18820
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%r9
	leaq	-1792(%rbp), %r12
	leaq	(%r9,%r9,4), %rdi
	cmpq	%rdx, -1744(%rbp)
	movq	$0, -8592(%rbp)
	movq	insn_data+16(,%rdi,8), %r11
	movq	%rdx, -6128(%rbp)
	movq	%r11, -4752(%rbp)
	jb	.L18820
	movl	-1728(%rbp), %ecx
.L18860:
	testl	%ecx, %ecx
	je	.L18824
	subq	%rdx, 56(%r12)
.L18824:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L18825
	movl	16(%r12), %ebx
	testl	%ebx, %ebx
	je	.L18826
	movl	-8580(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24900:
	movq	%rax, -8592(%rbp)
.L18825:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L18828
	movq	24(%r12), %rdi
	movl	-8580(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24901:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L26605
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L18834
	movzbl	mode_size(%r15), %r10d
	leal	7(%r10), %edx
	andl	$-8, %edx
.L18835:
	movq	cfun(%rip), %rcx
	andl	$33554432, %esi
	movq	16(%rcx), %r11
	leaq	8(%r11), %rdi
	movl	8(%r11), %ecx
	je	.L18836
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24902:
	movq	%r15, %rsi
	leal	(%rax,%rcx), %r9d
	salq	$4, %rsi
	movl	%r9d, (%rdi)
	addq	optab_table+384(%rip), %rsi
	movl	8(%rsi), %eax
	cmpl	$1317, %eax
	je	.L18838
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rdi
	movq	insn_data+24(,%rdi,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L18839
	movq	%r14, %rdi
	movl	-8580(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L26606
.L18839:
	leaq	(%rbx,%rbx,4), %r10
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r10,8)
.L24903:
	movq	%rax, %rdi
	call	emit_insn
.L18858:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L18859
	movq	-6128(%rbp), %r14
	addq	%r14, 56(%r12)
.L18859:
	movq	48(%r12), %r9
	movq	-6128(%rbp), %rdx
	subq	-6128(%rbp), %r9
	cmpq	%rdx, %r9
	movq	%r9, 48(%r12)
	jae	.L18860
.L18820:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L18862
.L18811:
	cmpq	$0, -1744(%rbp)
	jmp	.L25550
.L26606:
	movl	-8580(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L18839
.L18838:
	movzbl	mode_size(%r15), %ebx
	cmpl	%edx, %ebx
	je	.L26607
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r11b
	movzbl	%r11b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r8b
	movzbl	%r8b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L18846:
	movl	-8580(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%ecx, %ecx
	testq	%rcx, %rcx
	movq	%rax, %rbx
	je	.L18855
	xorl	%esi, %esi
	movq	%rax, %rdi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %esi
	testl	%esi, %esi
	jne	.L26608
.L18855:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L18858
.L26608:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L18855
.L26607:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L18846
.L18836:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24902
.L18834:
	movzbl	mode_size(%r15), %r8d
	leal	1(%r8), %edx
	andl	$-2, %edx
	jmp	.L18835
.L26605:
	movq	%rax, %rsi
	movq	-8592(%rbp), %rdi
	xorl	%eax, %eax
	call	*-4752(%rbp)
	jmp	.L24903
.L18828:
	movq	24(%r12), %rdi
	movl	-8580(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24901
.L18826:
	movl	-8580(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24900
.L18808:
	movq	-8576(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -1784(%rbp)
	jmp	.L18778
.L18804:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -1760(%rbp)
	jmp	.L18806
.L18776:
	movl	$1, %ecx
	jmp	.L18775
.L18773:
	movl	$1, %edx
	jmp	.L18772
.L18771:
	movl	$1, %ecx
	jmp	.L18770
.L18765:
	cmpq	$2, %r14
	ja	.L18749
	jmp	.L18766
.L18741:
	movq	-8568(%rbp), %rbx
	xorl	%esi, %esi
	movq	8(%rbx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-8568(%rbp), %r10
	movq	%rax, %r12
	movq	16(%r10), %rdi
	call	protect_from_queue
	movq	-8568(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26609
.L18743:
	movq	-8568(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8568(%rbp)
	movq	%r12, 8(%rax)
	movq	-8568(%rbp), %r11
	movq	%rbx, 16(%r11)
	jmp	.L18736
.L26609:
	cmpq	16(%rcx), %rax
	jne	.L18743
	jmp	.L18736
.L26599:
	cmpb	$51, 2(%rdx)
	je	.L18734
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26610
.L18734:
	cmpl	$66, %eax
	jne	.L18737
	movq	-8568(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	movq	-8568(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L18736
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -8568(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L18736
.L26610:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L18735
	movq	-8568(%rbp), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -8568(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L18736
.L18735:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24899:
	movq	%rax, -8568(%rbp)
	jmp	.L18736
.L18733:
	movq	-8568(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26611
	movq	-8568(%rbp), %rdi
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L24899
	movq	-8568(%rbp), %rax
	movq	8(%rax), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	-8568(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r8
	movq	%r8, -8568(%rbp)
	jmp	.L18736
.L26611:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24899
.L18728:
	movq	-8752(%rbp), %r11
	xorl	%esi, %esi
	movq	8(%r11), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-8752(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-8752(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26612
.L18730:
	movq	-8752(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8560(%rbp)
	movq	%r12, 8(%rax)
	movq	-8560(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L18723
.L26612:
	cmpq	16(%rcx), %rax
	jne	.L18730
	jmp	.L18723
.L26598:
	cmpb	$51, 2(%rdx)
	je	.L18721
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26613
.L18721:
	cmpl	$66, %eax
	jne	.L18724
	movq	-8752(%rbp), %r10
	xorl	%esi, %esi
	movq	8(%r10), %rdi
	call	protect_from_queue
	movq	-8752(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L18723
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -8560(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L18723
.L26613:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L18722
	movq	-8752(%rbp), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -8560(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L18723
.L18722:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24898:
	movq	%rax, -8560(%rbp)
	jmp	.L18723
.L18720:
	movq	-8752(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26614
	movq	-8752(%rbp), %rax
	movq	24(%rax), %r8
	testq	%r8, %r8
	movq	%r8, -8560(%rbp)
	jne	.L18723
	movq	-8752(%rbp), %r14
	movq	8(%r14), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	-8752(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r9
	movq	%r9, -8560(%rbp)
	jmp	.L18723
.L26614:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24898
.L18715:
	movq	-8760(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-8760(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L26615
.L18717:
	movq	-8760(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8552(%rbp)
	movq	%r12, 8(%rax)
	movq	-8552(%rbp), %r8
	movq	%rbx, 16(%r8)
	jmp	.L18710
.L26615:
	cmpq	16(%rsi), %rax
	jne	.L18717
	jmp	.L18710
.L26597:
	jne	.L18711
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-8760(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L18710
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -8552(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L18710
.L18707:
	testq	%rsi, %rsi
	je	.L26616
	movq	-8760(%rbp), %rsi
	movq	24(%rsi), %r9
	testq	%r9, %r9
	movq	%r9, -8552(%rbp)
	jne	.L18710
	movq	-8760(%rbp), %r14
	movq	8(%r14), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r12
	movq	%r12, -8552(%rbp)
	jmp	.L18710
.L26616:
	movq	-8760(%rbp), %rax
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rax, -8552(%rbp)
	jmp	.L18710
.L18700:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L18696
	movl	32(%rsi), %r15d
	jmp	.L18696
.L18699:
	cmpl	$7, %edx
	ja	.L18695
	jmp	.L18700
.L18684:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L26617
.L18686:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -8760(%rbp)
	movq	%r12, 8(%rax)
	movq	-8760(%rbp), %r15
	movq	%rbx, 16(%r15)
	jmp	.L18679
.L26617:
	cmpq	16(%r13), %rax
	jne	.L18686
	jmp	.L18679
.L26423:
	jne	.L18680
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L18679
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -8760(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L18679
.L18676:
	cmpq	$0, 16(%r13)
	je	.L26618
	movq	24(%r13), %r11
	testq	%r11, %r11
	movq	%r11, -8760(%rbp)
	jne	.L18679
	movq	8(%r13), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rax
	movq	%rax, -8760(%rbp)
	jmp	.L18679
.L26618:
	movq	8(%r13), %rdi
	call	copy_to_reg
	movq	%rax, -8760(%rbp)
	jmp	.L18679
.L26422:
	movq	144(%r14), %rax
	testq	%rax, %rax
	je	.L18671
	cmpq	%rax, %r13
	jne	.L18671
	jmp	.L18669
.L26421:
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L18669
	jmp	.L18670
	.p2align 6,,7
.L18668:
	movq	-8752(%rbp), %rdx
	cmpb	$0, 2(%rdx)
	jne	.L18667
	cmpb	$0, 16(%r14)
	je	.L18667
	movq	8(%r14), %rdx
	movzbl	2(%r13), %edi
	movzbl	61(%rdx), %ebx
	shrb	$1, %bl
	movzbl	%bl, %esi
	cmpl	%esi, %edi
	je	.L18667
	movzbl	17(%rdx), %ecx
	movq	-8752(%rbp), %rdx
	shrb	$5, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, -8752(%rbp)
	jmp	.L18667
.L24394:
	movq	-8752(%rbp), %r9
	movzwl	(%r9), %edx
	jmp	.L18590
	.p2align 6,,7
.L24399:
	movq	-8752(%rbp), %rcx
	movzwl	(%rcx), %edx
	jmp	.L18590
.L26420:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	%r14, %rdi
	movzbl	2(%r13), %edx
	movq	%rax, %rsi
	jmp	.L24897
	.p2align 6,,7
.L18629:
	xorl	%ecx, %ecx
	testl	%ecx, %ecx
	je	.L24395
	movl	(%r13), %ecx
	movl	%ecx, %r10d
	andl	$134283263, %r10d
	cmpl	$66, %r10d
	je	.L26619
.L18645:
	andl	$268500991, %ecx
	cmpl	$268435519, %ecx
	je	.L26620
	movzbl	2(%r13), %edx
	xorl	%ecx, %ecx
	movq	%r14, %rdi
	movq	%r13, %rsi
	call	expand_expr
	cmpw	$61, (%r13)
	movq	%rax, -8752(%rbp)
	je	.L26621
.L18665:
	movl	(%r13), %eax
	andl	$134283263, %eax
	cmpl	$134217794, %eax
	je	.L24398
	movq	-8752(%rbp), %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L24399
	movq	-8752(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L18666
	cmpw	$54, %dx
	je	.L18666
	cmpw	$55, %dx
	je	.L18666
	cmpw	$58, %dx
	je	.L18666
	cmpw	$134, %dx
	je	.L18666
	cmpw	$56, %dx
	je	.L18666
	cmpw	$140, %dx
	je	.L18666
	xorl	%r8d, %r8d
	testl	%r8d, %r8d
	je	.L18590
.L18666:
	movl	$1, -8540(%rbp)
	jmp	.L18590
.L26621:
	cmpl	$52, 8(%r13)
	ja	.L18665
.L24397:
	movq	-8752(%rbp), %rsi
	movzwl	(%rsi), %edx
	jmp	.L18590
	.p2align 6,,7
.L26620:
	xorl	%r15d, %r15d
	xorl	%edx, %edx
	testl	%r15d, %r15d
	jne	.L18651
	movq	8(%r14), %rsi
	movzbl	16(%rsi), %eax
	cmpb	$6, %al
	je	.L18652
	cmpb	$10, %al
	je	.L18652
	cmpb	$11, %al
	je	.L18652
	cmpb	$12, %al
	je	.L18652
.L18651:
	movq	%rdx, %rsi
	xorl	%ecx, %ecx
	movq	%r12, %rdi
	xorl	%edx, %edx
	call	expand_expr
	movzwl	(%rax), %edx
	movq	%rax, %rbx
	cmpw	$66, %dx
	je	.L26622
.L18654:
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L18657
	cmpw	$54, %dx
	je	.L18657
	cmpw	$55, %dx
	je	.L18657
	cmpw	$58, %dx
	je	.L18657
	cmpw	$134, %dx
	je	.L18657
	cmpw	$56, %dx
	je	.L18657
	cmpw	$140, %dx
	je	.L18657
.L18656:
	movzbl	3(%r13), %edx
	movq	8(%r13), %rdi
	movq	%rbx, %rsi
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L19487
	movzbl	2(%rbx), %edx
	movzbl	2(%r13), %eax
	cmpb	%al, %dl
	je	.L19487
	testb	%dl, %dl
	je	.L18659
	movq	%rbx, %rsi
	movzbl	%al, %edi
	call	gen_lowpart_SUBREG
	movzbl	3(%rax), %ebx
	orb	$16, %bl
	movb	%bl, 3(%rax)
	andb	$-5, %bl
	movzbl	3(%r13), %r10d
	andb	$4, %r10b
	orb	%r10b, %bl
	movb	%bl, 3(%rax)
	jmp	.L19487
.L18659:
	movq	8(%r13), %r15
	movzbl	3(%r13), %ecx
	movzbl	%al, %edi
	movq	%rbx, %rdx
	movzbl	2(%r15), %esi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	jmp	.L19487
	.p2align 6,,7
.L18657:
	cmpb	$0, 2(%rbx)
	jne	.L18656
	movq	8(%r12), %rcx
	movzbl	2(%r13), %edi
	movzbl	61(%rcx), %edx
	movzbl	3(%r13), %ecx
	shrb	$1, %dl
	shrb	$2, %cl
	movzbl	%dl, %esi
	andl	$1, %ecx
	movq	%rbx, %rdx
	call	convert_modes
	movzbl	3(%r13), %ecx
	movzbl	2(%r13), %esi
	movq	8(%r13), %r12
	movq	%rax, %rdx
	movzbl	2(%r12), %edi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, %rbx
	jmp	.L18656
.L26622:
	xorl	%r9d, %r9d
	testl	%r9d, %r9d
	je	.L18654
	testb	$8, 3(%rax)
	jne	.L18655
	movq	8(%r13), %rdi
	movq	8(%rax), %rsi
	call	reg_mentioned_p
	testl	%eax, %eax
	je	.L24396
.L18655:
	movq	%rbx, %rdi
	call	copy_to_reg
	movq	%rax, %rbx
.L24396:
	movzwl	(%rbx), %edx
	jmp	.L18654
.L18652:
	cmpq	$0, 8(%rsi)
	jne	.L18651
	movzbl	3(%r13), %ecx
	movzbl	17(%rsi), %r11d
	movl	$1, %edi
	movl	%ecx, %r8d
	shrb	$5, %r11b
	shrb	$2, %r8b
	andl	$1, %r11d
	andl	%r8d, %edi
	cmpl	%edi, %r11d
	je	.L18653
	call	signed_or_unsigned_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	convert
	movzbl	3(%r13), %ecx
	movq	%rax, %r12
.L18653:
	movq	8(%r13), %r14
	shrb	$2, %cl
	movl	$1, %esi
	andl	%ecx, %esi
	movzbl	2(%r14), %edi
	call	type_for_mode
	movq	%r12, %rsi
	movq	%rax, %rdi
	call	convert
	movq	8(%r13), %rdx
	movq	%rax, %r12
	jmp	.L18651
.L26619:
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L18645
	movzbl	%al, %edx
	xorl	%ecx, %ecx
	movq	%r14, %rdi
	movq	%r13, %rsi
	call	expand_expr
	movq	%rax, -8752(%rbp)
	movq	%rax, %rdx
	movzbl	2(%rax), %eax
	cmpb	$51, %al
	je	.L18646
	testb	%al, %al
	je	.L18646
	cmpq	%r13, %rdx
	je	.L18648
	movq	%rdx, %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L26623
.L18647:
	movq	-8752(%rbp), %rdi
	call	copy_to_reg
	movq	%rax, -8752(%rbp)
.L18646:
	movl	$1, -8540(%rbp)
	jmp	.L24397
.L26623:
	movq	-8752(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L18647
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L18647
.L18648:
	movl	$1, %r15d
	jmp	.L18647
	.p2align 6,,7
.L24395:
	movl	(%r13), %ecx
	jmp	.L18645
.L18638:
	movl	$1, %ebx
	jmp	.L18632
	.p2align 6,,7
.L18639:
	xorl	%ebx, %ebx
	jmp	.L18632
.L18636:
	movq	8(%r13), %rdi
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L18638
	movq	16(%r13), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L18632
	jmp	.L18638
	.p2align 6,,7
.L26419:
	cmpb	$51, 2(%r13)
	jne	.L18591
	call	gen_label_rtx
	movq	%rax, %r15
	call	gen_label_rtx
	movq	cfun(%rip), %rbx
	movq	%rax, -4744(%rbp)
	movq	16(%rbx), %r11
	movq	40(%r11), %rbx
	testq	%rbx, %rbx
	je	.L23923
.L18597:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26624
	call	emit_insn
	movq	%rax, 16(%rbx)
.L18596:
	movq	cfun(%rip), %r9
	movq	40(%rbx), %rdi
	movq	16(%r9), %r8
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%r8)
	jne	.L18597
.L23923:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L18599
	cmpl	$66, %eax
	je	.L26625
.L18603:
	cmpl	$75, %eax
	je	.L18607
	cmpl	$78, %eax
	je	.L18607
.L18602:
	call	do_pending_stack_adjust
	movq	cfun(%rip), %rdx
	movq	%r15, %rsi
	movq	16(%rdx), %r12
	incl	4(%r12)
	movq	32(%r14), %rdi
	call	jumpifnot
	call	start_cleanup_deferral
	movq	40(%r14), %rdi
	movq	-8760(%rbp), %rsi
	xorl	%edx, %edx
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %rbx
	movq	16(%rbx), %r11
	movq	40(%r11), %rbx
	testq	%rbx, %rbx
	je	.L23925
.L18617:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26626
	call	emit_insn
	movq	%rax, 16(%rbx)
.L18616:
	movq	cfun(%rip), %r10
	movq	40(%rbx), %rdi
	movq	16(%r10), %rcx
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%rcx)
	jne	.L18617
.L23925:
	movq	-4744(%rbp), %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r15, %rdi
	call	emit_label
	call	start_cleanup_deferral
	movq	48(%r14), %rdi
	movq	-8760(%rbp), %rsi
	xorl	%edx, %edx
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %r15
	movq	16(%r15), %r14
	movq	40(%r14), %rbx
	testq	%rbx, %rbx
	je	.L23927
.L18624:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26627
	call	emit_insn
	movq	%rax, 16(%rbx)
.L18623:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %r12
	movq	16(%rdx), %r8
	testq	%r12, %r12
	movq	%r12, %rbx
	movq	%r12, 40(%r8)
	jne	.L18624
.L23927:
	movq	-4744(%rbp), %rdi
	call	emit_label
	movq	cfun(%rip), %r9
	movq	16(%r9), %rbx
	decl	4(%rbx)
	jmp	.L19487
.L26627:
	movq	8(%rdi), %r11
	movq	8(%r11), %rsi
	movq	%rsi, 16(%rbx)
	call	emit_insn
	jmp	.L18623
.L26626:
	movq	8(%rdi), %r9
	movq	8(%r9), %r8
	movq	%r8, 16(%rbx)
	call	emit_insn
	jmp	.L18616
.L18607:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L26628
.L18609:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -8760(%rbp)
	movq	%r12, 8(%rax)
	movq	-8760(%rbp), %rcx
	movq	%rbx, 16(%rcx)
	jmp	.L18602
.L26628:
	cmpq	16(%r13), %rax
	jne	.L18609
	jmp	.L18602
.L26625:
	jne	.L18603
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L18602
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -8760(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L18602
.L18599:
	cmpq	$0, 16(%r13)
	je	.L26629
	movq	24(%r13), %r10
	testq	%r10, %r10
	movq	%r10, -8760(%rbp)
	jne	.L18602
	movq	8(%r13), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rax
	movq	%rax, -8760(%rbp)
	jmp	.L18602
.L26629:
	movq	8(%r13), %rdi
	call	copy_to_reg
	movq	%rax, -8760(%rbp)
	jmp	.L18602
.L26624:
	movq	8(%rdi), %rdx
	movq	8(%rdx), %r12
	movq	%r12, 16(%rbx)
	call	emit_insn
	jmp	.L18596
.L26418:
	movq	32(%r14), %rdi
	movq	const_int_rtx+512(%rip), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	cfun(%rip), %r8
	movq	16(%r8), %rdx
	movq	40(%rdx), %rbx
	testq	%rbx, %rbx
	je	.L23921
.L18587:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26630
	call	emit_insn
	movq	%rax, 16(%rbx)
.L18586:
	movq	cfun(%rip), %rsi
	movq	40(%rbx), %r10
	movq	16(%rsi), %r15
	testq	%r10, %r10
	movq	%r10, %rbx
	movq	%r10, 40(%r15)
	jne	.L18587
.L23921:
	movq	40(%r14), %rdi
	movq	%r13, %rsi
	xorl	%edx, %edx
	call	store_expr
	jmp	.L19487
	.p2align 6,,7
.L26630:
	movq	8(%rdi), %rcx
	movq	8(%rcx), %r9
	movq	%r9, 16(%rbx)
	call	emit_insn
	jmp	.L18586
.L18580:
	movq	-9552(%rbp), %rax
	movl	-6220(%rbp), %r8d
	xorl	%esi, %esi
	addq	$40, %rax
	testl	%r8d, %r8d
	je	.L19493
	movq	const_int_rtx+512(%rip), %rsi
.L19493:
	movq	(%rax), %rdi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	jmp	.L19487
.L26417:
	movq	40(%rdx), %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L16684
	movq	-9552(%rbp), %rbx
	xorl	%edx, %edx
	movq	32(%rbx), %r12
	movq	48(%rbx), %rsi
	movq	32(%r12), %rdi
	call	operand_equal_p
	testl	%eax, %eax
	je	.L16684
	movq	32(%rbx), %rdi
	testb	$1, 17(%rdi)
	je	.L16685
	movq	48(%rbx), %rdx
	cmpb	$118, 16(%rdx)
	jne	.L16684
.L16685:
	movq	-9552(%rbp), %r8
	xorl	%r15d, %r15d
	movq	%r13, %r14
	movq	40(%r8), %rbx
	movq	8(%rbx), %rax
	testq	%rax, %rax
	je	.L16688
	movq	32(%rax), %rdx
	testq	%rdx, %rdx
	je	.L16688
	cmpb	$25, 16(%rdx)
	je	.L16688
	cmpb	$18, 16(%rax)
	je	.L26631
.L16689:
	cmpb	$51, 2(%r13)
	je	.L16765
.L16688:
	movzwl	(%r13), %ecx
	cmpw	$66, %cx
	je	.L26632
.L16686:
	cmpw	$63, %cx
	je	.L26633
.L16691:
	movl	$1, %eax
	testl	%eax, %eax
	jne	.L26634
	movzbl	16(%rbx), %edx
	movzbl	%dl, %r9d 
	movsbl	tree_code_type(%r9),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L16699
	mov	%eax, %ecx
	jmp	*.L16759(,%rcx,8)
	.section	.rodata
	.align 8
	.align 4
.L16759:
	.quad	.L16742
	.quad	.L16715
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16715
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16765
	.quad	.L16700
	.quad	.L16718
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16718
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16699
	.quad	.L16705
	.text
.L16700:
	movq	144(%rbx), %r10
	testq	%r10, %r10
	movq	%r10, %r15
	jne	.L24266
	xorl	%r15d, %r15d
.L16699:
	testq	%r15, %r15
	movl	$1, %r12d
	je	.L16690
.L24266:
	cmpw	$63, (%r15)
	je	.L26635
.L16762:
	movq	%r14, %rdi
	movq	%r15, %rsi
	xorl	%r12d, %r12d
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L16690
	cmpw	$66, (%r14)
	je	.L26636
.L16765:
	movl	$1, %r12d
.L16690:
	testl	%r12d, %r12d
	je	.L16684
	cmpw	$61, (%r13)
	je	.L26637
.L16766:
	movq	-9552(%rbp), %r15
	xorl	%r12d, %r12d
	movq	48(%r15), %r14
	movl	$0, -8092(%rbp)
	movq	%r13, -8312(%rbp)
	movzbl	16(%r14), %eax
	cmpb	$47, %al
	je	.L26638
	cmpb	$51, %al
	je	.L26639
.L16777:
	movzwl	(%r13), %eax
	subl	$66, %eax
	cmpl	$12, %eax
	ja	.L16825
	mov	%eax, %edi
	jmp	*.L16826(,%rdi,8)
	.section	.rodata
	.align 8
	.align 4
.L16826:
	.quad	.L16819
	.quad	.L16825
	.quad	.L16825
	.quad	.L16825
	.quad	.L16825
	.quad	.L16824
	.quad	.L16825
	.quad	.L16825
	.quad	.L16825
	.quad	.L16822
	.quad	.L16822
	.quad	.L16825
	.quad	.L16822
	.text
.L16819:
	movq	8(%r13), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L16818:
	testl	%ebx, %ebx
	je	.L16815
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L16827
	testb	%al, %al
	jne	.L26640
.L16827:
	movzbl	2(%r13), %edx
	movq	%r14, %rdi
	xorl	%esi, %esi
.L24832:
	xorl	%ecx, %ecx
	call	expand_expr
	testb	$8, 3(%r13)
	movq	%rax, -8304(%rbp)
	jne	.L24377
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L24372
	movl	$1, -8092(%rbp)
.L24377:
	movq	-8304(%rbp), %rdi
	movzwl	(%rdi), %edx
.L16776:
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L16854
	cmpw	$54, %dx
	je	.L16854
	cmpw	$55, %dx
	je	.L16854
	cmpw	$58, %dx
	je	.L16854
	cmpw	$134, %dx
	je	.L16854
	cmpw	$56, %dx
	je	.L16854
	cmpw	$140, %dx
	je	.L16854
.L16853:
	movq	-8304(%rbp), %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	je	.L16856
	cmpq	%r13, -8304(%rbp)
	je	.L16855
	movq	-8304(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L26641
.L16856:
	movzbl	16(%r14), %eax
	testb	%al, %al
	je	.L16855
	testl	%r12d, %r12d
	jne	.L16855
	movzbl	%al, %r12d 
	cmpb	$100, tree_code_type(%r12)
	je	.L26642
.L16857:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L16862
	cmpl	$66, %eax
	je	.L26643
.L16866:
	cmpl	$75, %eax
	je	.L16870
	cmpl	$78, %eax
	je	.L16870
.L16865:
	movq	-8304(%rbp), %rbx
	movq	-8312(%rbp), %r8
	movzbl	2(%rbx), %eax
	movzbl	2(%r8), %ecx
	cmpb	%cl, %al
	je	.L16875
	testb	%al, %al
	je	.L16875
	movq	8(%r14), %r9
	movl	-8092(%rbp), %eax
	movzbl	17(%r9), %r14d
	shrb	$5, %r14b
	movl	%r14d, %edx
	andl	$1, %edx
	testl	%eax, %eax
	je	.L16876
	movzbl	%cl, %edi
	movq	%rbx, %rsi
	call	convert_to_mode
	movq	-8312(%rbp), %rdi
	movq	%rax, %rsi
	movq	%rax, -8304(%rbp)
.L24863:
	call	emit_move_insn
.L16855:
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L16775
	movl	-8092(%rbp), %esi
	testl	%esi, %esi
	je	.L17668
	movq	-8304(%rbp), %r15
	cmpw	$66, (%r15)
	je	.L17668
.L16775:
	movq	-9552(%rbp), %r10
	movq	-6968(%rbp), %rsi
	xorl	%r12d, %r12d
	movq	32(%r10), %rdi
	call	jumpifnot
	call	start_cleanup_deferral
	movq	-9552(%rbp), %r8
	movq	40(%r8), %r14
	movl	$0, -8316(%rbp)
	movq	%r13, -8536(%rbp)
	movzbl	16(%r14), %eax
	cmpb	$47, %al
	je	.L26644
	cmpb	$51, %al
	je	.L26645
.L17683:
	movzwl	(%r13), %eax
	subl	$66, %eax
	cmpl	$12, %eax
	ja	.L17731
	mov	%eax, %r9d
	jmp	*.L17732(,%r9,8)
	.section	.rodata
	.align 8
	.align 4
.L17732:
	.quad	.L17725
	.quad	.L17731
	.quad	.L17731
	.quad	.L17731
	.quad	.L17731
	.quad	.L17730
	.quad	.L17731
	.quad	.L17731
	.quad	.L17731
	.quad	.L17728
	.quad	.L17728
	.quad	.L17731
	.quad	.L17728
	.text
.L17725:
	movq	8(%r13), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L17724:
	testl	%ebx, %ebx
	je	.L17721
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L17733
	testb	%al, %al
	jne	.L26646
.L17733:
	movzbl	2(%r13), %edx
	movq	%r14, %rdi
	xorl	%esi, %esi
.L24865:
	xorl	%ecx, %ecx
	call	expand_expr
	testb	$8, 3(%r13)
	movq	%rax, -8528(%rbp)
	jne	.L24388
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L24383
	movl	$1, -8316(%rbp)
.L24386:
	movq	-8528(%rbp), %rdi
	movzwl	(%rdi), %edx
.L17682:
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L17760
	cmpw	$54, %dx
	je	.L17760
	cmpw	$55, %dx
	je	.L17760
	cmpw	$58, %dx
	je	.L17760
	cmpw	$134, %dx
	je	.L17760
	cmpw	$56, %dx
	je	.L17760
	cmpw	$140, %dx
	je	.L17760
.L17759:
	movq	-8528(%rbp), %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	je	.L17762
	cmpq	%r13, -8528(%rbp)
	je	.L17761
	movq	-8528(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L26647
.L17762:
	movzbl	16(%r14), %eax
	testb	%al, %al
	je	.L17761
	testl	%r12d, %r12d
	jne	.L17761
	movzbl	%al, %r15d 
	cmpb	$100, tree_code_type(%r15)
	je	.L26648
.L17763:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L17768
	cmpl	$66, %eax
	je	.L26649
.L17772:
	cmpl	$75, %eax
	je	.L17776
	cmpl	$78, %eax
	je	.L17776
.L17771:
	movq	-8528(%rbp), %rbx
	movq	-8536(%rbp), %rdi
	movzbl	2(%rbx), %eax
	movzbl	2(%rdi), %ecx
	cmpb	%cl, %al
	je	.L17781
	testb	%al, %al
	je	.L17781
	movq	8(%r14), %r11
	movl	-8316(%rbp), %r14d
	movzbl	17(%r11), %esi
	shrb	$5, %sil
	movl	%esi, %edx
	andl	$1, %edx
	testl	%r14d, %r14d
	je	.L17782
	movzbl	%cl, %edi
	movq	%rbx, %rsi
	call	convert_to_mode
	movq	-8536(%rbp), %rdi
	movq	%rax, %rsi
	movq	%rax, -8528(%rbp)
.L24896:
	call	emit_move_insn
.L17761:
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L17681
	movl	-8316(%rbp), %eax
	testl	%eax, %eax
	je	.L18574
	movq	-8528(%rbp), %r15
	cmpw	$66, (%r15)
	jne	.L17681
.L18574:
	movq	-8536(%rbp), %rax
	cmpb	$51, 2(%rax)
	je	.L17681
	cmpw	$61, (%rax)
	je	.L26650
.L18577:
	movq	-8536(%rbp), %rdi
	jmp	.L25110
.L26650:
	cmpl	$52, 8(%rax)
	jbe	.L17681
	jmp	.L18577
.L17782:
	movq	-8536(%rbp), %rdi
	movq	-8528(%rbp), %rsi
	call	convert_move
	jmp	.L17761
.L17781:
	cmpb	$51, %al
	je	.L26651
.L17785:
	movq	-8536(%rbp), %rdi
	cmpw	$39, (%rdi)
	je	.L26652
	cmpb	$51, %al
	je	.L26653
	movq	-8536(%rbp), %rdi
	movq	-8528(%rbp), %rsi
	jmp	.L24896
.L26653:
	movq	-8536(%rbp), %rdi
	movq	-8528(%rbp), %rcx
	movq	%rdi, -8488(%rbp)
	movq	%rcx, -8496(%rbp)
	movq	%r14, %rdi
	call	expr_size
	movl	$8, %edx
	movq	-8536(%rbp), %rsi
	movq	%rax, %r14
	movq	16(%rsi), %rcx
	testq	%rcx, %rcx
	je	.L18376
	movl	32(%rcx), %edx
.L18376:
	movq	-8528(%rbp), %r9
	movq	16(%r9), %rax
	testq	%rax, %rax
	je	.L18377
	cmpl	32(%rax), %edx
	jb	.L18378
.L18373:
	testq	%rax, %rax
	movl	$8, -8476(%rbp)
	je	.L18374
	movl	32(%rax), %eax
.L24887:
	movl	%eax, -8476(%rbp)
.L18374:
	movq	-8536(%rbp), %r8
	cmpb	$51, 2(%r8)
	jne	.L25547
	movq	-8528(%rbp), %r10
	cmpb	$51, 2(%r10)
	jne	.L25546
	movq	-8536(%rbp), %rsi
	movzwl	(%rsi), %eax
	cmpl	$71, %eax
	je	.L18385
	cmpl	$66, %eax
	je	.L26654
.L18389:
	cmpl	$75, %eax
	je	.L18393
	cmpl	$78, %eax
	je	.L18393
.L18388:
	movq	-8528(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L18398
	cmpl	$66, %eax
	je	.L26655
.L18402:
	cmpl	$75, %eax
	je	.L18406
	cmpl	$78, %eax
	je	.L18406
.L18401:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L18411
	cmpl	$66, %eax
	je	.L26656
.L18415:
	cmpl	$75, %eax
	je	.L18419
	cmpl	$78, %eax
	je	.L18419
.L18414:
	movq	-8488(%rbp), %r9
	cmpw	$66, (%r9)
	jne	.L25545
	movq	-8496(%rbp), %r8
	cmpw	$66, (%r8)
	jne	.L25544
	testq	%r14, %r14
	je	.L25543
	cmpw	$54, (%r14)
	je	.L26657
.L18427:
	shrl	$3, -8476(%rbp)
	xorl	%edi, %edi
	mov	-8476(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -4712(%rbp)
	testl	%r12d, %r12d
	je	.L23919
.L18560:
	movslq	%r12d,%rsi
	movl	movstr_optab(,%rsi,4), %edx
	movq	%rsi, -4720(%rbp)
	cmpl	$1317, %edx
	je	.L18546
	cmpw	$54, (%r14)
	je	.L26658
.L18550:
	testb	$2, target_flags+3(%rip)
	je	.L18551
	movq	-4720(%rbp), %rdi
	cmpw	$63, mode_bitsize(%rdi,%rdi)
.L24894:
	jbe	.L18546
.L18549:
	movslq	%edx,%rax
	leaq	(%rax,%rax,4), %rbx
	movq	%rax, -4728(%rbp)
	movq	insn_data+24(,%rbx,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L18553
	movq	-8488(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L18546
.L18553:
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L26659
.L18554:
	movq	72(%r15), %rax
	testq	%rax, %rax
	je	.L18555
	xorl	%esi, %esi
	movq	-4712(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L18546
.L18555:
	call	get_last_insn
	movl	$1, %edx
	movq	%r14, %rsi
	movl	%r12d, %edi
	movq	%rax, -4736(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r15), %rax
	testq	%rax, %rax
	jne	.L26660
.L18556:
	movq	-4728(%rbp), %rdx
	movq	-8488(%rbp), %rdi
	xorl	%eax, %eax
	movq	-8496(%rbp), %rsi
	movq	-4712(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24514
	movq	-4736(%rbp), %rdi
	call	delete_insns_since
.L18546:
	movq	-4720(%rbp), %r8
	movzbl	mode_wider_mode(%r8), %r12d
	testl	%r12d, %r12d
	jne	.L18560
.L23919:
	testb	$2, target_flags+3(%rip)
	movq	-8488(%rbp), %r15
	movl	$0, volatile_ok(%rip)
	setne	%r11b
	movq	8(%r15), %rsi
	movzbl	%r11b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-8496(%rbp), %r10
	testb	$2, target_flags+3(%rip)
	setne	%sil
	movq	%rax, %r15
	movzbl	%sil, %edi
	movq	8(%r10), %rsi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%r14, %rsi
	movq	sizetype_tab(%rip), %rcx
	movq	%rax, %rbx
	movzbl	61(%rcx), %r9d
	shrb	$1, %r9b
	movzbl	%r9b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r14
	je	.L26661
.L18569:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r15, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r14, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %r9
	movq	%rax, (%rbx)
	movq	(%r12), %r10
	movq	8(%r9), %rdi
	movq	(%r10), %rcx
	movq	$0, (%rcx)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %rbx
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%rbx), %r14
	movq	8(%r14), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r15)
	je	.L17761
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r15, %rdx
.L24895:
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L17761
.L26661:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r8
	xorl	%esi, %esi
	orb	$1, 49(%r8)
	movq	fn.1(%rip), %rdx
	orb	$8, 18(%rdx)
	movq	fn.1(%rip), %r12
	orb	$64, 50(%r12)
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L18569
.L24514:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L17761
.L26660:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L18556
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L18556
.L26659:
	movq	-8496(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L18546
	jmp	.L18554
.L18551:
	movq	-4720(%rbp), %r11
	cmpw	$31, mode_bitsize(%r11,%r11)
	jmp	.L24894
.L26658:
	movq	mode_mask_array(,%rsi,8), %r15
	shrq	$1, %r15
	cmpq	%r15, 8(%r14)
	jbe	.L18549
	jmp	.L18550
.L26657:
	movq	8(%r14), %r12
	xorl	%r15d, %r15d
	movl	$17, %esi
.L18440:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23908
.L18437:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L18437
.L23908:
	testl	%edi, %edi
	je	.L18430
	movslq	%edi,%rbx
	movq	%rbx, %r11
	salq	$4, %r11
	addq	optab_table+240(%rip), %r11
	cmpl	$1317, 8(%r11)
	je	.L18439
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L18439
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L18439:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L18440
.L18430:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L18443
	movq	ix86_cost(%rip), %r9
	mov	40(%r9), %ebx
	cmpq	%rbx, %r15
	jae	.L18427
.L18444:
	movq	-8496(%rbp), %rsi
	testb	$2, target_flags+3(%rip)
	movq	-8488(%rbp), %rcx
	movq	8(%r14), %r12
	setne	%r14b
	movq	-8488(%rbp), %rdi
	movq	8(%rsi), %r8
	movq	$0, -1656(%rbp)
	movl	$0, -8508(%rbp)
	movq	%r8, -1680(%rbp)
	movzbl	%r14b, %edx
	movq	8(%rcx), %r11
	leal	5(,%rdx,4), %r14d
	movq	%rdi, -1712(%rbp)
	xorl	%ecx, %ecx
	movzwl	(%r11), %edx
	movq	%r11, -8504(%rbp)
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L18449
	cmpw	$99, %dx
	je	.L18449
	cmpw	$98, %dx
	je	.L18449
.L18448:
	movq	-8504(%rbp), %rbx
	movl	%ecx, -1696(%rbp)
	xorl	%edx, %edx
	movzwl	(%rbx), %eax
	cmpw	$96, %ax
	je	.L18451
	cmpw	$98, %ax
	je	.L18451
.L18450:
	movq	-8504(%rbp), %r15
	movq	-8496(%rbp), %rax
	movl	%edx, -1648(%rbp)
	xorl	%ecx, %ecx
	movq	%r15, -1704(%rbp)
	movq	%rax, -1688(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L18454
	cmpw	$99, %dx
	je	.L18454
	cmpw	$98, %dx
	je	.L18454
.L18453:
	movl	-1648(%rbp), %r10d
	movl	%ecx, -1672(%rbp)
	movl	$0, -1668(%rbp)
	movl	$0, -1692(%rbp)
	testl	%r10d, %r10d
	je	.L18455
	movq	%r12, -1656(%rbp)
.L18455:
	movl	-1672(%rbp), %edi
	movq	%r12, -1664(%rbp)
	testl	%edi, %edi
	je	.L18457
	movl	-1696(%rbp), %r11d
	testl	%r11d, %r11d
	jne	.L18456
.L18457:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L18470:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23911
.L18467:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L18467
.L23911:
	testl	%edi, %edi
	je	.L18460
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L18469
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L18469
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L18469:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L18470
.L18460:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L18456
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23913
.L18478:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %r10d
	cmpl	%r14d, %r10d
	cmovae	-8508(%rbp), %ecx
	movl	%ecx, -8508(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L18478
.L23913:
	movl	-1672(%rbp), %eax
	testl	%eax, %eax
	jne	.L18484
	movzwl	(%r8), %edx
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L18482
	cmpw	$54, %dx
	je	.L18482
	cmpw	$55, %dx
	je	.L18482
	cmpw	$58, %dx
	je	.L18482
	cmpw	$134, %dx
	je	.L18482
	cmpw	$56, %dx
	je	.L18482
	cmpw	$140, %dx
	je	.L18482
.L18484:
	movl	-1696(%rbp), %r11d
	testl	%r11d, %r11d
	jne	.L18456
	movq	-8504(%rbp), %rcx
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L18486
	cmpw	$54, %dx
	je	.L18486
	cmpw	$55, %dx
	je	.L18486
	cmpw	$58, %dx
	je	.L18486
	cmpw	$134, %dx
	je	.L18486
	cmpw	$56, %dx
	je	.L18486
	cmpw	$140, %dx
	je	.L18486
.L18456:
	cmpl	$1, %r14d
	jbe	.L18489
.L18540:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23916
.L18496:
	movslq	%ecx,%r8
	movzbl	mode_size(%r8), %edx
	cmpl	%r14d, %edx
	cmovae	-8508(%rbp), %ecx
	movl	%ecx, -8508(%rbp)
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L18496
.L23916:
	movl	-8508(%rbp), %r14d
	testl	%r14d, %r14d
	je	.L18489
	movslq	-8508(%rbp),%r15
	movq	%r15, %r12
	salq	$4, %r12
	addq	optab_table+240(%rip), %r12
	movl	8(%r12), %ebx
	cmpl	$1317, %ebx
	je	.L18498
	movl	-8508(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r9d
	cmpl	%eax, %r9d
	jb	.L18498
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rdi
	leaq	-1712(%rbp), %r12
	leaq	(%rdi,%rdi,4), %r10
	cmpq	%rdx, -1664(%rbp)
	movq	$0, -8520(%rbp)
	movq	insn_data+16(,%r10,8), %rsi
	movq	%rdx, -6120(%rbp)
	movq	%rsi, -4704(%rbp)
	jb	.L18498
	movl	-1648(%rbp), %ecx
.L18538:
	testl	%ecx, %ecx
	je	.L18502
	subq	%rdx, 56(%r12)
.L18502:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L18503
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L18504
	movl	-8508(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24890:
	movq	%rax, -8520(%rbp)
.L18503:
	movl	40(%r12), %r11d
	testl	%r11d, %r11d
	je	.L18506
	movq	24(%r12), %rdi
	movl	-8508(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24891:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L26662
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L18512
	movzbl	mode_size(%r15), %ebx
	leal	7(%rbx), %edx
	andl	$-8, %edx
.L18513:
	movq	cfun(%rip), %r9
	andl	$33554432, %esi
	movq	16(%r9), %r8
	leaq	8(%r8), %rdi
	movl	8(%r8), %ecx
	je	.L18514
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24892:
	movq	%r15, %rsi
	leal	(%rax,%rcx), %r10d
	salq	$4, %rsi
	movl	%r10d, (%rdi)
	addq	optab_table+384(%rip), %rsi
	movl	8(%rsi), %eax
	cmpl	$1317, %eax
	je	.L18516
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rdi
	movq	insn_data+24(,%rdi,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L18517
	movq	%r14, %rdi
	movl	-8508(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L26663
.L18517:
	leaq	(%rbx,%rbx,4), %r11
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r11,8)
.L24893:
	movq	%rax, %rdi
	call	emit_insn
.L18536:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L18537
	movq	-6120(%rbp), %r14
	addq	%r14, 56(%r12)
.L18537:
	movq	48(%r12), %r10
	movq	-6120(%rbp), %rdx
	subq	-6120(%rbp), %r10
	cmpq	%rdx, %r10
	movq	%r10, 48(%r12)
	jae	.L18538
.L18498:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L18540
.L18489:
	cmpq	$0, -1664(%rbp)
.L25551:
	je	.L17761
	jmp	.L25518
.L26663:
	movl	-8508(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L18517
.L18516:
	movzbl	mode_size(%r15), %ebx
	cmpl	%edx, %ebx
	je	.L26664
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r9b
	movzbl	%r9b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r8b
	movzbl	%r8b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L18524:
	movl	-8508(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%ecx, %ecx
	testq	%rcx, %rcx
	movq	%rax, %rbx
	je	.L18533
	xorl	%esi, %esi
	movq	%rax, %rdi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %esi
	testl	%esi, %esi
	jne	.L26665
.L18533:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L18536
.L26665:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L18533
.L26664:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L18524
.L18514:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24892
.L18512:
	movzbl	mode_size(%r15), %ecx
	leal	1(%rcx), %edx
	andl	$-2, %edx
	jmp	.L18513
.L26662:
	movq	%rax, %rsi
	movq	-8520(%rbp), %rdi
	xorl	%eax, %eax
	call	*-4704(%rbp)
	jmp	.L24893
.L18506:
	movq	24(%r12), %rdi
	movl	-8508(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24891
.L18504:
	movl	-8508(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24890
.L18486:
	movq	-8504(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -1704(%rbp)
	jmp	.L18456
.L18482:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -1680(%rbp)
	jmp	.L18484
.L18454:
	movl	$1, %ecx
	jmp	.L18453
.L18451:
	movl	$1, %edx
	jmp	.L18450
.L18449:
	movl	$1, %ecx
	jmp	.L18448
.L18443:
	cmpq	$2, %r15
	ja	.L18427
	jmp	.L18444
.L18419:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L26666
.L18421:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L18414
.L26666:
	cmpq	16(%r14), %rax
	jne	.L18421
	jmp	.L18414
.L26656:
	cmpb	$51, 2(%r14)
	je	.L18412
	movq	8(%r14), %r12
	cmpw	$71, (%r12)
	je	.L26667
.L18412:
	cmpl	$66, %eax
	jne	.L18415
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L18414
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%rbx, 8(%rax)
	jmp	.L18414
.L26667:
	movq	8(%r12), %rsi
	movq	%r14, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L18413
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L18414
.L18413:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24889:
	movq	%rax, %r14
	jmp	.L18414
.L18411:
	cmpq	$0, 16(%r14)
	je	.L26668
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L24889
	movq	8(%r14), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L18414
.L26668:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L24889
.L18406:
	movq	-8528(%rbp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-8528(%rbp), %r10
	movq	%rax, %r12
	movq	16(%r10), %rdi
	call	protect_from_queue
	movq	-8528(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26669
.L18408:
	movq	-8528(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8496(%rbp)
	movq	%r12, 8(%rax)
	movq	-8496(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L18401
.L26669:
	cmpq	16(%rcx), %rax
	jne	.L18408
	jmp	.L18401
.L26655:
	cmpb	$51, 2(%rdx)
	je	.L18399
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26670
.L18399:
	cmpl	$66, %eax
	jne	.L18402
	movq	-8528(%rbp), %r8
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	call	protect_from_queue
	movq	-8528(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L18401
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -8496(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L18401
.L26670:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L18400
	movq	-8528(%rbp), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -8496(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L18401
.L18400:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24888:
	movq	%rax, -8496(%rbp)
	jmp	.L18401
.L18398:
	movq	-8528(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26671
	movq	-8528(%rbp), %rax
	movq	24(%rax), %r11
	testq	%r11, %r11
	movq	%r11, -8496(%rbp)
	jne	.L18401
	movq	-8528(%rbp), %rsi
	movq	8(%rsi), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	-8528(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r15
	movq	%r15, -8496(%rbp)
	jmp	.L18401
.L26671:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24888
.L18393:
	movq	-8536(%rbp), %r12
	xorl	%esi, %esi
	movq	8(%r12), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-8536(%rbp), %rdx
	movq	%rax, %r12
	movq	16(%rdx), %rdi
	call	protect_from_queue
	movq	-8536(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L26672
.L18395:
	movq	-8536(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8488(%rbp)
	movq	%r12, 8(%rax)
	movq	-8488(%rbp), %r11
	movq	%rbx, 16(%r11)
	jmp	.L18388
.L26672:
	cmpq	16(%rsi), %rax
	jne	.L18395
	jmp	.L18388
.L26654:
	jne	.L18389
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, %rbx
	movq	-8536(%rbp), %rax
	cmpq	8(%rax), %rbx
	je	.L18388
	movq	%rax, %rdi
	call	copy_rtx
	movq	%rax, -8488(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L18388
.L18385:
	testq	%rcx, %rcx
	je	.L26673
	movq	-8536(%rbp), %rbx
	movq	24(%rbx), %r15
	testq	%r15, %r15
	movq	%r15, -8488(%rbp)
	jne	.L18388
	movq	-8536(%rbp), %r12
	movq	8(%r12), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rcx
	movq	%rcx, -8488(%rbp)
	jmp	.L18388
.L26673:
	movq	-8536(%rbp), %rax
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rax, -8488(%rbp)
	jmp	.L18388
.L18378:
	testq	%rcx, %rcx
	movl	$8, -8476(%rbp)
	je	.L18374
	movl	32(%rcx), %eax
	jmp	.L24887
.L18377:
	cmpl	$7, %edx
	ja	.L18373
	jmp	.L18378
.L26652:
	movq	8(%r14), %rdi
	call	int_size_in_bytes
	movl	%eax, -4668(%rbp)
	movq	-8536(%rbp), %rax
	cmpw	$39, (%rax)
	jne	.L25561
	movq	-8536(%rbp), %rsi
	movq	8(%rsi), %rcx
	movq	8(%rcx), %r10
	movl	(%rcx), %r14d
	cmpq	$0, 8(%r10)
	movslq	%r14d,%r9
	sete	%r15b
	leaq	15(,%r9,8), %r12
	andq	$-16, %r12
	subq	%r12, %rsp
	leaq	32(%rsp), %rbx
	movzbl	%r15b, %r8d
	movq	%rbx, -4680(%rbp)
	movl	%r8d, -8472(%rbp)
	movl	-8472(%rbp), %eax
	cmpl	%r14d, %eax
	movl	%eax, -8464(%rbp)
	jge	.L23902
.L18357:
	movslq	-8464(%rbp),%rax
	movq	8(%rcx,%rax,8), %r11
	movq	%rax, -4688(%rbp)
	movl	-4668(%rbp), %eax
	movq	8(%r11), %rdi
	movq	16(%r11), %rcx
	testl	%eax, %eax
	movzbl	2(%rdi), %r14d
	movq	8(%rcx), %r15
	movslq	%r14d,%rdx
	movzbl	mode_size(%rdx), %ebx
	movq	%rdx, -4696(%rbp)
	movl	%ebx, -8468(%rbp)
	js	.L18330
	mov	%ebx, %r9d
	movslq	-4668(%rbp),%rbx
	leaq	(%r9,%r15), %r12
	cmpq	%rbx, %r12
	jle	.L18330
	movl	-4668(%rbp), %r8d
	subl	%r15d, %r8d
	movl	%r8d, -8468(%rbp)
	je	.L25560
.L18330:
	movq	-8528(%rbp), %r12
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L24539
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L18334
	cmpw	$54, %dx
	je	.L18334
	cmpw	$55, %dx
	je	.L18334
	cmpw	$58, %dx
	je	.L18334
	cmpw	$134, %dx
	je	.L18334
	cmpw	$56, %dx
	je	.L18334
	cmpw	$140, %dx
	je	.L18334
.L18333:
	movq	-8528(%rbp), %rcx
	movl	%r14d, %edi
	movzbl	2(%rcx), %eax
	testb	%al, %al
	je	.L24885
	movzbl	%al, %edi
.L24885:
	call	gen_reg_rtx
	movq	-8528(%rbp), %rsi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	emit_move_insn
	movzwl	(%r12), %edx
.L18332:
	cmpw	$66, %dx
	je	.L24539
.L18337:
	cmpw	$65, %dx
	je	.L26674
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L18354
	cmpw	$54, %dx
	je	.L18354
	cmpw	$55, %dx
	je	.L18354
	cmpw	$58, %dx
	je	.L18354
	cmpw	$134, %dx
	je	.L18354
	cmpw	$56, %dx
	je	.L18354
	cmpw	$140, %dx
	je	.L18354
	cmpw	$61, %dx
	je	.L26675
.L18353:
	movslq	-4668(%rbp),%r8
	movl	-8468(%rbp), %edx
	movq	%r12, %rdi
	movl	$1, %ecx
	movl	%r14d, %r9d
	movl	%r14d, (%rsp)
	sall	$3, %edx
	mov	%edx, %esi
	movq	%r8, 8(%rsp)
	leaq	0(,%r15,8), %rdx
	xorl	%r8d, %r8d
	call	extract_bit_field
.L24886:
	movq	-4688(%rbp), %r12
	movq	-4680(%rbp), %r10
	movq	%rax, (%r10,%r12,8)
.L18328:
	movq	-8536(%rbp), %r11
	incl	-8464(%rbp)
	movl	-8464(%rbp), %eax
	movq	8(%r11), %rcx
	cmpl	(%rcx), %eax
	jl	.L18357
.L23902:
	movq	cfun(%rip), %rbx
	movq	16(%rbx), %r15
	movq	40(%r15), %rbx
	testq	%rbx, %rbx
	je	.L23904
.L18363:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26676
	call	emit_insn
	movq	%rax, 16(%rbx)
.L18362:
	movq	cfun(%rip), %r9
	movq	40(%rbx), %rdi
	movq	16(%r9), %r14
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%r14)
	jne	.L18363
	movq	-8536(%rbp), %r8
	movq	8(%r8), %rcx
.L23904:
	movl	-8472(%rbp), %r10d
	cmpl	(%rcx), %r10d
	jge	.L17761
.L18369:
	movslq	-8472(%rbp),%r15
	movq	-4680(%rbp), %r11
	salq	$3, %r15
	movq	8(%r15,%rcx), %rbx
	movq	(%r11,%r15), %rsi
	movq	8(%rbx), %rdi
	call	emit_move_insn
	movq	-8536(%rbp), %rax
	incl	-8472(%rbp)
	movl	-8472(%rbp), %edx
	movq	8(%rax), %r12
	cmpl	(%r12), %edx
	movq	%r12, %rcx
	jl	.L18369
	jmp	.L17761
.L26676:
	movq	8(%rdi), %rsi
	movq	8(%rsi), %rcx
	movq	%rcx, 16(%rbx)
	call	emit_insn
	jmp	.L18362
.L26675:
	movzbl	2(%r12), %edi
	cmpl	%r14d, %edi
	jne	.L18353
.L18354:
	movq	-4688(%rbp), %r9
	movq	-4680(%rbp), %r14
	movq	%r12, (%r14,%r9,8)
	jmp	.L18328
.L26674:
	testq	%r15, %r15
	jne	.L24392
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %rsi
	movzbl	mode_size(%rsi), %ebx
	cmpl	%ebx, -8468(%rbp)
	je	.L18343
.L18344:
	movzbq	2(%rdx), %rcx
	movzbq	mode_size(%rcx), %r11
	cmpq	%r11, %r15
	je	.L26677
.L18342:
	testq	%r15, %r15
	jne	.L22779
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbx
	movzbq	mode_size(%rbx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %r15
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r15, %rdi
	movl	%r14d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	jmp	.L24886
.L26677:
	movq	16(%r12), %rdx
	movzbq	2(%rdx), %r9
	movzbl	mode_size(%r9), %edi
	cmpl	%edi, -8468(%rbp)
	jne	.L18342
.L18343:
	xorl	%r8d, %r8d
	movq	-4688(%rbp), %r10
	movq	-4680(%rbp), %rax
	testq	%r15, %r15
	setne	%r8b
	leaq	(%rax,%r10,8), %rbx
	movq	8(%r12,%r8,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L18328
	cmpw	$54, %dx
	je	.L18328
	cmpw	$55, %dx
	je	.L18328
	cmpw	$58, %dx
	je	.L18328
	cmpw	$134, %dx
	je	.L18328
	cmpw	$56, %dx
	je	.L18328
	cmpw	$140, %dx
	je	.L18328
	cmpw	$61, %dx
	je	.L26678
.L18348:
	movslq	-4668(%rbp),%r11
	movl	-8468(%rbp), %ecx
	movl	%r14d, (%rsp)
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	movl	%r14d, %r9d
	sall	$3, %ecx
	movq	%r11, 8(%rsp)
	mov	%ecx, %esi
	movq	(%rbx), %rdi
	movl	$1, %ecx
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L18328
.L26678:
	movzbl	2(%rcx), %r12d
	cmpl	%r14d, %r12d
	jne	.L18348
	jmp	.L18328
.L24392:
	movq	8(%r12), %rdx
	jmp	.L18344
.L24539:
	movl	%r14d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L18338
	cmpl	%eax, 32(%rdx)
	jae	.L18339
.L24391:
	movzwl	(%r12), %edx
	jmp	.L18337
.L18339:
	movl	%r14d, %edi
	leaq	0(,%r15,8), %rbx
	call	get_mode_alignment
	mov	%eax, %r9d
	movq	%rbx, %rax
	cqto
	idivq	%r9
	testq	%rdx, %rdx
	jne	.L24391
	movq	-4696(%rbp), %rax
	movzbl	mode_size(%rax), %edx
	cmpl	%edx, -8468(%rbp)
	jne	.L24391
	movl	%r14d, %edi
	call	gen_reg_rtx
	movl	$1, %ecx
	movq	%r15, %rdx
	movq	-4680(%rbp), %r8
	movq	-4688(%rbp), %r10
	movq	%r12, %rdi
	movl	%r14d, %esi
	leaq	(%r8,%r10,8), %rbx
	movl	$1, %r8d
	movq	%rax, (%rbx)
	call	adjust_address_1
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L18328
.L18338:
	cmpl	$8, %eax
	ja	.L24391
	jmp	.L18339
.L18334:
	movq	-8528(%rbp), %r11
	movzbl	2(%r11), %ecx
	movzbl	%cl, %esi
	cmpl	%r14d, %esi
	je	.L18332
	testb	%cl, %cl
	je	.L18332
	jmp	.L18333
.L26651:
	cmpb	$29, 16(%r14)
	jne	.L17785
	movq	%r14, %rdi
	call	expr_size
	cmpw	$54, (%rax)
	movq	%rax, -8344(%rbp)
	je	.L26679
.L17786:
	movq	sizetype_tab(%rip), %rdi
	movq	-8344(%rbp), %rsi
	call	make_tree
	xorl	%esi, %esi
	movslq	32(%r14),%rdi
	movq	%rax, %r15
	call	size_int_wide
	movq	%r15, %rsi
	movl	$78, %edi
	movq	%rax, %rdx
	call	size_binop
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	movq	%rax, -4592(%rbp)
	call	expand_expr
	xorl	%edx, %edx
	movl	ptr_mode(%rip), %edi
	movq	%rax, %rsi
	movq	$0, -8432(%rbp)
	call	convert_to_mode
	movl	$8, %edx
	movq	-8528(%rbp), %r12
	movq	-8536(%rbp), %r14
	movq	%rax, -8376(%rbp)
	movq	%rax, -8400(%rbp)
	movq	%r12, -8392(%rbp)
	movq	%r14, -8384(%rbp)
	movq	16(%r14), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L17989
	movl	32(%rax), %edx
.L17989:
	movq	-8528(%rbp), %r8
	movq	16(%r8), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L17990
	cmpl	32(%rax), %edx
	jb	.L17991
.L17986:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L17987
	movl	32(%rcx), %r15d
.L17987:
	movq	-8536(%rbp), %rax
	cmpb	$51, 2(%rax)
	jne	.L25547
	movq	-8528(%rbp), %rcx
	cmpb	$51, 2(%rcx)
	jne	.L25546
	movq	-8536(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L17998
	cmpl	$66, %eax
	je	.L26680
.L18002:
	cmpl	$75, %eax
	je	.L18006
	cmpl	$78, %eax
	je	.L18006
.L18001:
	movq	-8528(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L18011
	cmpl	$66, %eax
	je	.L26681
.L18015:
	cmpl	$75, %eax
	je	.L18019
	cmpl	$78, %eax
	je	.L18019
.L18014:
	movq	-8376(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L18024
	cmpl	$66, %eax
	je	.L26682
.L18028:
	cmpl	$75, %eax
	je	.L18032
	cmpl	$78, %eax
	je	.L18032
.L18027:
	movq	-8384(%rbp), %rdx
	cmpw	$66, (%rdx)
	jne	.L25545
	movq	-8392(%rbp), %r10
	cmpw	$66, (%r10)
	jne	.L25544
	cmpq	$0, -8400(%rbp)
	je	.L25543
	movq	-8400(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L26683
.L18040:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -4608(%rbp)
	testl	%r12d, %r12d
	je	.L23886
.L18173:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L18159
	movq	-8400(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L26684
.L18163:
	testb	$2, target_flags+3(%rip)
	je	.L18164
	cmpw	$63, mode_bitsize(%r15,%r15)
.L24879:
	jbe	.L18159
.L18162:
	movslq	%edx,%rbx
	leaq	(%rbx,%rbx,4), %r8
	movq	%rbx, -4616(%rbp)
	movq	insn_data+24(,%r8,8), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L18166
	movq	-8384(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L18159
.L18166:
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L26685
.L18167:
	movq	72(%r14), %rax
	testq	%rax, %rax
	je	.L18168
	xorl	%esi, %esi
	movq	-4608(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L18159
.L18168:
	call	get_last_insn
	movl	$1, %edx
	movq	-8400(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -4624(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r14), %rax
	testq	%rax, %rax
	jne	.L26686
.L18169:
	movq	-4616(%rbp), %rdx
	movq	-8384(%rbp), %rdi
	xorl	%eax, %eax
	movq	-8392(%rbp), %rsi
	movq	-4608(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24512
	movq	-4624(%rbp), %rdi
	call	delete_insns_since
.L18159:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L18173
.L23886:
	testb	$2, target_flags+3(%rip)
	movq	-8384(%rbp), %r14
	movl	$0, volatile_ok(%rip)
	setne	%sil
	movzbl	%sil, %edi
	movq	8(%r14), %rsi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%r9b
	movq	%rax, %r14
	movq	-8392(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%r9b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-8400(%rbp), %rsi
	movq	sizetype_tab(%rip), %r11
	movq	%rax, %rbx
	movzbl	61(%r11), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L26687
.L18182:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %r9
	movq	8(%rdx), %rdi
	movq	(%r9), %r11
	movq	$0, (%r11)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r15
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r15), %rbx
	movq	8(%rbx), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	jne	.L26688
.L18171:
	movq	-8376(%rbp), %rbx
	cmpw	$54, (%rbx)
	je	.L26689
	movq	sizetype_tab(%rip), %rsi
	movq	-8376(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	-8344(%rbp), %rdx
	xorl	%r9d, %r9d
	movzbl	61(%rsi), %r14d
	movq	optab_table+16(%rip), %rsi
	movl	$3, (%rsp)
	shrb	$1, %r14b
	movzbl	%r14b, %edi
	call	expand_binop
	movq	-4592(%rbp), %rdi
	movq	%rax, %rbx
	call	highest_pow2_factor
	movq	-8376(%rbp), %rsi
	movq	-8536(%rbp), %rdi
	movq	%rax, %rdx
	call	offset_address
	movq	%rax, -8536(%rbp)
	call	gen_label_rtx
	xorl	%r9d, %r9d
	movq	%rax, -8432(%rbp)
	movq	const_int_rtx+512(%rip), %rsi
	movq	%rbx, %rdi
	movzbl	2(%rbx), %r8d
	movl	$107, %edx
	xorl	%ecx, %ecx
	movq	%rax, (%rsp)
	call	emit_cmp_and_jump_insns
.L18185:
	cmpq	const_int_rtx+512(%rip), %rbx
	je	.L18186
	movq	-8536(%rbp), %rdx
	cmpw	$66, (%rdx)
	movq	%rdx, -8448(%rbp)
	je	.L26690
	movq	-8536(%rbp), %rax
	movzbl	2(%rax), %edi
	call	get_mode_alignment
.L24880:
	movl	%eax, -8436(%rbp)
.L18188:
	movq	-8536(%rbp), %rsi
	movzbl	2(%rsi), %eax
	cmpb	$51, %al
	je	.L18191
	cmpw	$54, (%rbx)
	je	.L26691
.L18191:
	movq	-8536(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L18193
	cmpl	$66, %eax
	je	.L26692
.L18197:
	cmpl	$75, %eax
	je	.L18201
	cmpl	$78, %eax
	je	.L18201
.L18196:
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L18206
	cmpl	$66, %eax
	je	.L26693
.L18210:
	cmpl	$75, %eax
	je	.L18214
	cmpl	$78, %eax
	je	.L18214
.L18209:
	cmpw	$54, (%rbx)
	je	.L26694
.L18219:
	shrl	$3, -8436(%rbp)
	xorl	%edi, %edi
	mov	-8436(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r14d
	movq	%rax, -4640(%rbp)
	testl	%r14d, %r14d
	je	.L23900
.L18313:
	movslq	%r14d,%rcx
	movl	clrstr_optab(,%rcx,4), %edx
	movq	%rcx, -4648(%rbp)
	cmpl	$1317, %edx
	je	.L18300
	cmpw	$54, (%rbx)
	je	.L26695
.L18304:
	testb	$2, target_flags+3(%rip)
	je	.L18305
	movq	-4648(%rbp), %rax
	cmpw	$63, mode_bitsize(%rax,%rax)
.L24883:
	jbe	.L18300
.L18303:
	movslq	%edx,%r8
	leaq	(%r8,%r8,4), %r9
	movq	%r8, -4656(%rbp)
	movq	insn_data+24(,%r9,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L18307
	movq	-8448(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L18300
.L18307:
	movq	48(%r15), %rax
	testq	%rax, %rax
	je	.L18308
	xorl	%esi, %esi
	movq	-4640(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L18300
.L18308:
	call	get_last_insn
	movl	$1, %edx
	movq	%rbx, %rsi
	movl	%r14d, %edi
	movq	%rax, -4664(%rbp)
	call	convert_to_mode
	movq	%rax, %r12
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L26696
.L18309:
	movq	-4656(%rbp), %rsi
	movq	-8448(%rbp), %rdi
	xorl	%eax, %eax
	movq	-4640(%rbp), %rdx
	leaq	(%rsi,%rsi,4), %r10
	movq	%r12, %rsi
	call	*insn_data+16(,%r10,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24884
	movq	-4664(%rbp), %rdi
	call	delete_insns_since
.L18300:
	movq	-4648(%rbp), %rdx
	movzbl	mode_wider_mode(%rdx), %r14d
	testl	%r14d, %r14d
	jne	.L18313
.L23900:
	testb	$2, target_flags+3(%rip)
	movq	-8448(%rbp), %r14
	setne	%cl
	movq	8(%r14), %rsi
	movzbl	%cl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%rbx, %rsi
	movq	sizetype_tab(%rip), %rdi
	movq	%rax, %r14
	movzbl	61(%rdi), %r11d
	shrb	$1, %r11b
	movzbl	%r11b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.0(%rip)
	movq	%rax, %r15
	je	.L26697
.L18318:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	const_int_rtx+512(%rip), %rsi
	movq	integer_types+40(%rip), %rdi
	movq	%rax, %r12
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.0(%rip), %rsi
	movq	%rax, (%rbx)
	movq	(%r12), %r11
	movq	8(%rsi), %rdi
	movq	(%r11), %rdx
	movq	$0, (%rdx)
	call	build_pointer_type
	movq	fn.0(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.0(%rip), %r10
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r10), %r15
	movq	8(%r15), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	jne	.L26698
.L18186:
	cmpq	$0, -8432(%rbp)
	je	.L17761
	movq	-8432(%rbp), %rdi
	call	emit_label
	jmp	.L17761
.L26698:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
.L24884:
	call	emit_insn
	jmp	.L18186
.L26697:
	movl	$.LC7, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.0(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.0(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.0, %edi
	movq	%rax, fn.0(%rip)
	call	ggc_add_tree_root
	movq	fn.0(%rip), %r8
	xorl	%esi, %esi
	orb	$1, 49(%r8)
	movq	fn.0(%rip), %r9
	orb	$8, 18(%r9)
	movq	fn.0(%rip), %r12
	orb	$64, 50(%r12)
	movq	fn.0(%rip), %rbx
	orb	$2, 18(%rbx)
	movq	fn.0(%rip), %rdi
	call	make_decl_rtl
	movq	fn.0(%rip), %rdi
	call	assemble_external
	jmp	.L18318
.L26696:
	movq	%r12, %rdi
	movl	%r14d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L18309
	movq	%r12, %rsi
	movl	%r14d, %edi
	call	copy_to_mode_reg
	movq	%rax, %r12
	jmp	.L18309
.L18305:
	movq	-4648(%rbp), %r15
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L24883
.L26695:
	movq	mode_mask_array(,%rcx,8), %r12
	shrq	$1, %r12
	cmpq	%r12, 8(%rbx)
	jbe	.L18303
	jmp	.L18304
.L26694:
	movq	8(%rbx), %r14
	xorl	%r15d, %r15d
	movl	$17, %esi
.L18232:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23889
.L18229:
	movslq	%ecx,%r8
	movzbq	mode_size(%r8), %r11
	cmpq	%rsi, %r11
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L18229
.L23889:
	testl	%edi, %edi
	je	.L18222
	movslq	%edi,%r12
	movq	%r12, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L18231
	call	get_mode_alignment
	movl	$128, %edx
	cmpl	%eax, %edx
	jb	.L18231
	movzbq	mode_size(%r12), %rsi
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r14
.L18231:
	movzbq	mode_size(%r12), %rsi
	cmpq	$1, %rsi
	ja	.L18232
.L18222:
	testq	%r14, %r14
	jne	.L25529
	movl	optimize_size(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L18235
	movq	ix86_cost(%rip), %r10
	mov	40(%r10), %edi
	cmpq	%rdi, %r15
	jae	.L18219
.L18236:
	movq	8(%rbx), %r8
	movq	-8448(%rbp), %r15
	leaq	-272(%rbp), %r12
	movq	$clear_by_pieces_1, -232(%rbp)
	movq	$0, -224(%rbp)
	testb	$2, target_flags+3(%rip)
	setne	%cl
	xorl	%esi, %esi
	movq	%r15, -272(%rbp)
	movq	%r8, -248(%rbp)
	movq	8(%r15), %r8
	movq	$0, -240(%rbp)
	movl	$0, -8460(%rbp)
	movq	%r8, -264(%rbp)
	movzbl	%cl, %r11d 
	movzwl	(%r8), %edx
	leaq	5(,%r11,4), %r15
	leaq	16(%r12), %rcx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L18240
	cmpw	$99, %dx
	je	.L18240
	cmpw	$98, %dx
	je	.L18240
.L18239:
	movl	%esi, (%rcx)
	movl	$0, 20(%r12)
	leaq	56(%r12), %rdx
	movzwl	(%r8), %eax
	xorl	%ecx, %ecx
	cmpw	$96, %ax
	je	.L18242
	cmpw	$98, %ax
	je	.L18242
.L18241:
	movl	%ecx, (%rdx)
	movl	56(%r12), %eax
	testl	%eax, %eax
	je	.L18243
	movq	24(%r12), %rdx
	movq	%rdx, 32(%r12)
.L18243:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L18244
	movq	24(%r12), %r14
	movq	$0, -8456(%rbp)
	movl	$17, %esi
.L18257:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23892
.L18254:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %r10
	cmpq	%rsi, %r10
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L18254
.L23892:
	testl	%edi, %edi
	je	.L18247
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L18256
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L18256
	movzbq	mode_size(%rbx), %rcx
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%rcx
	addq	%rax, -8456(%rbp)
	movq	%rdx, %r14
.L18256:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L18257
.L18247:
	testq	%r14, %r14
	jne	.L25529
	cmpq	$2, -8456(%rbp)
	jbe	.L18244
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23894
.L18265:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%r15, %rdx
	cmovae	-8460(%rbp), %ecx
	movl	%ecx, -8460(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L18265
.L23894:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L18244
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L18269
	cmpw	$54, %dx
	je	.L18269
	cmpw	$55, %dx
	je	.L18269
	cmpw	$58, %dx
	je	.L18269
	cmpw	$134, %dx
	je	.L18269
	cmpw	$56, %dx
	je	.L18269
	cmpw	$140, %dx
	je	.L18269
.L18244:
	cmpq	$1, %r15
	jbe	.L18272
.L18293:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23897
.L18279:
	movslq	%ecx,%r8
	movzbq	mode_size(%r8), %r10
	cmpq	%r15, %r10
	cmovae	-8460(%rbp), %ecx
	movl	%ecx, -8460(%rbp)
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L18279
.L23897:
	movl	-8460(%rbp), %eax
	testl	%eax, %eax
	je	.L18272
	movslq	-8460(%rbp),%r15
	movq	%r15, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	movl	8(%rsi), %ebx
	cmpl	$1317, %ebx
	je	.L18281
	movl	-8460(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L18281
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rcx
	leaq	(%rcx,%rcx,4), %r11
	cmpq	%rdx, 24(%r12)
	movq	insn_data+16(,%r11,8), %r14
	movq	%r14, -4632(%rbp)
	movq	%rdx, %r14
	jb	.L18281
	movl	56(%r12), %ecx
.L18291:
	testl	%ecx, %ecx
	je	.L18285
	subq	%rdx, 32(%r12)
.L18285:
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L18286
	movq	(%r12), %rdi
	movl	-8460(%rbp), %esi
	movl	$1, %r8d
	movq	8(%r12), %rdx
	movq	32(%r12), %rcx
	call	adjust_automodify_address_1
.L24882:
	movl	-8460(%rbp), %edx
	movq	%rax, %rbx
	movq	48(%r12), %rdi
	movq	32(%r12), %rsi
	call	*40(%r12)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	*-4632(%rbp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L18290
	addq	%r14, 32(%r12)
.L18290:
	movq	24(%r12), %rbx
	movq	%r14, %rdx
	subq	%r14, %rbx
	cmpq	%r14, %rbx
	movq	%rbx, 24(%r12)
	jae	.L18291
.L18281:
	movzbq	mode_size(%r15), %r15
	cmpq	$1, %r15
	ja	.L18293
.L18272:
	cmpq	$0, 24(%r12)
	je	.L18186
	jmp	.L25451
.L18286:
	movq	(%r12), %rdi
	movl	-8460(%rbp), %esi
	movl	$1, %ecx
	movq	32(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24882
.L18269:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, 8(%r12)
	jmp	.L18244
.L18242:
	movl	$1, %ecx
	jmp	.L18241
.L18240:
	movl	$1, %esi
	jmp	.L18239
.L18235:
	cmpq	$2, %r15
	ja	.L18219
	jmp	.L18236
.L18214:
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbx), %rdi
	movq	%rax, %r14
	call	protect_from_queue
	cmpq	8(%rbx), %r14
	movq	%rax, %r12
	je	.L26699
.L18216:
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r14, 8(%rax)
	movq	%r12, 16(%rax)
	jmp	.L18209
.L26699:
	cmpq	16(%rbx), %rax
	jne	.L18216
	jmp	.L18209
.L26693:
	cmpb	$51, 2(%rbx)
	je	.L18207
	movq	8(%rbx), %r14
	cmpw	$71, (%r14)
	je	.L26700
.L18207:
	cmpl	$66, %eax
	jne	.L18210
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%rbx), %rax
	movq	%rax, %r12
	je	.L18209
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r12, 8(%rax)
	jmp	.L18209
.L26700:
	movq	8(%r14), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r14)
	movq	%rax, %r12
	je	.L18208
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L18209
.L18208:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24881:
	movq	%rax, %rbx
	jmp	.L18209
.L18206:
	cmpq	$0, 16(%rbx)
	je	.L26701
	movq	24(%rbx), %rax
	testq	%rax, %rax
	jne	.L24881
	movq	8(%rbx), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%rbx), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	16(%rbx), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbx), %rbx
	jmp	.L18209
.L26701:
	movq	8(%rbx), %rdi
	call	copy_to_reg
	jmp	.L24881
.L18201:
	movq	-8536(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-8536(%rbp), %r10
	movq	%rax, %r14
	movq	16(%r10), %rdi
	call	protect_from_queue
	movq	-8536(%rbp), %rdx
	movq	%rax, %r12
	cmpq	8(%rdx), %r14
	je	.L26702
.L18203:
	movq	-8536(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8448(%rbp)
	movq	%r14, 8(%rax)
	movq	-8448(%rbp), %r8
	movq	%r12, 16(%r8)
	jmp	.L18196
.L26702:
	cmpq	16(%rdx), %rax
	jne	.L18203
	jmp	.L18196
.L26692:
	jne	.L18197
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-8536(%rbp), %rcx
	movq	%rax, %r12
	cmpq	8(%rcx), %rax
	je	.L18196
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -8448(%rbp)
	movq	%r12, 8(%rax)
	jmp	.L18196
.L18193:
	movq	-8536(%rbp), %rsi
	cmpq	$0, 16(%rsi)
	je	.L26703
	movq	-8536(%rbp), %r11
	movq	24(%r11), %r15
	testq	%r15, %r15
	movq	%r15, -8448(%rbp)
	jne	.L18196
	movq	-8536(%rbp), %rdi
	movq	8(%rdi), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	%rax, %rdi
	movq	-8536(%rbp), %rax
	movq	%rdi, 24(%rax)
	movq	-8536(%rbp), %r14
	movq	8(%r14), %rsi
	call	gen_move_insn
	movq	-8536(%rbp), %r12
	movq	%rax, %rdi
	movq	16(%r12), %rsi
	call	emit_insn_before
	movq	-8536(%rbp), %r9
	movq	24(%r9), %rdx
	movq	%rdx, -8448(%rbp)
	jmp	.L18196
.L26703:
	movq	8(%rsi), %rdi
	call	copy_to_reg
	movq	%rax, -8448(%rbp)
	jmp	.L18196
.L26691:
	movzbl	%al, %edx 
	movzbl	mode_size(%rdx), %edi
	cmpl	8(%rbx), %edi
	jne	.L18191
	movq	%rsi, %rdi
	movq	const_tiny_rtx(,%rdx,8), %rsi
	call	emit_move_insn
	jmp	.L18186
.L26690:
	movq	16(%rdx), %rax
	movl	$8, -8436(%rbp)
	testq	%rax, %rax
	je	.L18188
	movl	32(%rax), %eax
	jmp	.L24880
.L26689:
	movq	8(%rbx), %rsi
	movq	-8344(%rbp), %rdi
	negq	%rsi
	call	plus_constant_wide
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-8376(%rbp), %r12
	movq	-8536(%rbp), %rdi
	movl	$51, %esi
	movq	%rax, %rbx
	movq	8(%r12), %rdx
	call	adjust_address_1
	movq	%rax, -8536(%rbp)
	jmp	.L18185
.L26688:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L18171
.L26687:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r8
	xorl	%esi, %esi
	orb	$1, 49(%r8)
	movq	fn.1(%rip), %rcx
	orb	$8, 18(%rcx)
	movq	fn.1(%rip), %r10
	orb	$64, 50(%r10)
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L18182
.L24512:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L18171
.L26686:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L18169
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L18169
.L26685:
	movq	-8392(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L18159
	jmp	.L18167
.L18164:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L24879
.L26684:
	movq	mode_mask_array(,%r15,8), %rcx
	shrq	$1, %rcx
	cmpq	%rcx, 8(%rsi)
	jbe	.L18162
	jmp	.L18163
.L26683:
	movq	8(%rcx), %r12
	xorl	%r14d, %r14d
	movl	$17, %esi
.L18053:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23875
.L18050:
	movslq	%ecx,%r8
	movzbq	mode_size(%r8), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L18050
.L23875:
	testl	%edi, %edi
	je	.L18043
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L18052
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L18052
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r14
	movq	%rdx, %r12
.L18052:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L18053
.L18043:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L18056
	movq	ix86_cost(%rip), %rdx
	mov	40(%rdx), %r9d
	cmpq	%r9, %r14
	jae	.L18040
.L18057:
	movq	-8400(%rbp), %r8
	movq	-8392(%rbp), %r11
	movq	-8384(%rbp), %rdi
	movq	-8384(%rbp), %r10
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r14b
	movq	8(%r11), %r8
	movq	$0, -1656(%rbp)
	movl	$0, -8412(%rbp)
	movq	%r8, -1680(%rbp)
	movzbl	%r14b, %ecx
	movq	8(%rdi), %rbx
	movq	%r10, -1712(%rbp)
	leal	5(,%rcx,4), %r14d
	xorl	%ecx, %ecx
	movq	%rbx, -8408(%rbp)
	movq	-8408(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L18062
	cmpw	$99, %dx
	je	.L18062
	cmpw	$98, %dx
	je	.L18062
.L18061:
	movq	-8408(%rbp), %rsi
	movl	%ecx, -1696(%rbp)
	xorl	%edx, %edx
	movzwl	(%rsi), %eax
	cmpw	$96, %ax
	je	.L18064
	cmpw	$98, %ax
	je	.L18064
.L18063:
	movl	%edx, -1648(%rbp)
	movq	-8408(%rbp), %r15
	xorl	%ecx, %ecx
	movq	-8392(%rbp), %rdx
	movq	%r15, -1704(%rbp)
	movq	%rdx, -1688(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L18067
	cmpw	$99, %dx
	je	.L18067
	cmpw	$98, %dx
	je	.L18067
.L18066:
	movl	-1648(%rbp), %eax
	movl	%ecx, -1672(%rbp)
	movl	$0, -1668(%rbp)
	movl	$0, -1692(%rbp)
	testl	%eax, %eax
	je	.L18068
	movq	%r12, -1656(%rbp)
.L18068:
	movl	-1672(%rbp), %eax
	movq	%r12, -1664(%rbp)
	testl	%eax, %eax
	je	.L18070
	movl	-1696(%rbp), %r10d
	testl	%r10d, %r10d
	jne	.L18069
.L18070:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L18083:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23878
.L18080:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %r11
	cmpq	%rsi, %r11
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L18080
.L23878:
	testl	%edi, %edi
	je	.L18073
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L18082
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L18082
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L18082:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L18083
.L18073:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L18069
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23880
.L18091:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %edx
	cmpl	%r14d, %edx
	cmovae	-8412(%rbp), %ecx
	movl	%ecx, -8412(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L18091
.L23880:
	movl	-1672(%rbp), %eax
	testl	%eax, %eax
	jne	.L18097
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L18095
	cmpw	$54, %dx
	je	.L18095
	cmpw	$55, %dx
	je	.L18095
	cmpw	$58, %dx
	je	.L18095
	cmpw	$134, %dx
	je	.L18095
	cmpw	$56, %dx
	je	.L18095
	cmpw	$140, %dx
	je	.L18095
.L18097:
	movl	-1696(%rbp), %r8d
	testl	%r8d, %r8d
	jne	.L18069
	movq	-8408(%rbp), %r11
	movzwl	(%r11), %edx
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L18099
	cmpw	$54, %dx
	je	.L18099
	cmpw	$55, %dx
	je	.L18099
	cmpw	$58, %dx
	je	.L18099
	cmpw	$134, %dx
	je	.L18099
	cmpw	$56, %dx
	je	.L18099
	cmpw	$140, %dx
	je	.L18099
.L18069:
	cmpl	$1, %r14d
	jbe	.L18102
.L18153:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23883
.L18109:
	movslq	%ecx,%rdi
	movzbl	mode_size(%rdi), %r12d
	cmpl	%r14d, %r12d
	cmovae	-8412(%rbp), %ecx
	movl	%ecx, -8412(%rbp)
	movzbl	mode_wider_mode(%rdi), %ecx
	testl	%ecx, %ecx
	jne	.L18109
.L23883:
	movl	-8412(%rbp), %r14d
	testl	%r14d, %r14d
	je	.L18102
	movslq	-8412(%rbp),%r15
	movq	%r15, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	movl	8(%rcx), %ebx
	cmpl	$1317, %ebx
	je	.L18111
	movl	-8412(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r9d
	cmpl	%eax, %r9d
	jb	.L18111
	movslq	%ebx,%r10
	leaq	-1712(%rbp), %r12
	movq	$0, -8424(%rbp)
	leaq	(%r10,%r10,4), %rdx
	movq	insn_data+16(,%rdx,8), %rsi
	movzbq	mode_size(%r15), %rdx
	cmpq	%rdx, -1664(%rbp)
	movq	%rsi, -4600(%rbp)
	movq	%rdx, -6112(%rbp)
	jb	.L18111
	movl	-1648(%rbp), %ecx
.L18151:
	testl	%ecx, %ecx
	je	.L18115
	subq	%rdx, 56(%r12)
.L18115:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L18116
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L18117
	movl	-8412(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24875:
	movq	%rax, -8424(%rbp)
.L18116:
	movl	40(%r12), %r8d
	testl	%r8d, %r8d
	je	.L18119
	movq	24(%r12), %rdi
	movl	-8412(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24876:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L26704
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L18125
	movzbl	mode_size(%r15), %ebx
	leal	7(%rbx), %edx
	andl	$-8, %edx
.L18126:
	movq	cfun(%rip), %rdi
	andl	$33554432, %esi
	movq	16(%rdi), %r9
	leaq	8(%r9), %rdi
	movl	8(%r9), %ecx
	je	.L18127
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24877:
	leal	(%rax,%rcx), %esi
	movq	%r15, %rcx
	salq	$4, %rcx
	movl	%esi, (%rdi)
	addq	optab_table+384(%rip), %rcx
	movl	8(%rcx), %eax
	cmpl	$1317, %eax
	je	.L18129
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %r10
	movq	insn_data+24(,%r10,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L18130
	movq	%r14, %rdi
	movl	-8412(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L26705
.L18130:
	leaq	(%rbx,%rbx,4), %r8
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r8,8)
.L24878:
	movq	%rax, %rdi
	call	emit_insn
.L18149:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L18150
	movq	-6112(%rbp), %r14
	addq	%r14, 56(%r12)
.L18150:
	movq	48(%r12), %r10
	movq	-6112(%rbp), %rdx
	subq	-6112(%rbp), %r10
	cmpq	%rdx, %r10
	movq	%r10, 48(%r12)
	jae	.L18151
.L18111:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L18153
.L18102:
	cmpq	$0, -1664(%rbp)
	je	.L18171
	jmp	.L25518
.L26705:
	movl	-8412(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L18130
.L18129:
	movzbl	mode_size(%r15), %ebx
	cmpl	%edx, %ebx
	je	.L26706
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r9b
	movzbl	%r9b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r11b
	movzbl	%r11b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L18137:
	movl	-8412(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%edi, %edi
	testq	%rdi, %rdi
	movq	%rax, %rbx
	je	.L18146
	xorl	%esi, %esi
	movq	%rax, %rdi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %esi
	testl	%esi, %esi
	jne	.L26707
.L18146:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L18149
.L26707:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L18146
.L26706:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L18137
.L18127:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24877
.L18125:
	movzbl	mode_size(%r15), %r11d
	leal	1(%r11), %edx
	andl	$-2, %edx
	jmp	.L18126
.L26704:
	movq	%rax, %rsi
	movq	-8424(%rbp), %rdi
	xorl	%eax, %eax
	call	*-4600(%rbp)
	jmp	.L24878
.L18119:
	movq	24(%r12), %rdi
	movl	-8412(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24876
.L18117:
	movl	-8412(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24875
.L18099:
	movq	-8408(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -1704(%rbp)
	jmp	.L18069
.L18095:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -1680(%rbp)
	jmp	.L18097
.L18067:
	movl	$1, %ecx
	jmp	.L18066
.L18064:
	movl	$1, %edx
	jmp	.L18063
.L18062:
	movl	$1, %ecx
	jmp	.L18061
.L18056:
	cmpq	$2, %r14
	ja	.L18040
	jmp	.L18057
.L18032:
	movq	-8376(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-8376(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-8376(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26708
.L18034:
	movq	-8376(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8400(%rbp)
	movq	%r12, 8(%rax)
	movq	-8400(%rbp), %rax
	movq	%rbx, 16(%rax)
	jmp	.L18027
.L26708:
	cmpq	16(%rcx), %rax
	jne	.L18034
	jmp	.L18027
.L26682:
	cmpb	$51, 2(%rdx)
	je	.L18025
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26709
.L18025:
	cmpl	$66, %eax
	jne	.L18028
	movq	-8376(%rbp), %r8
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	call	protect_from_queue
	movq	-8376(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L18027
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -8400(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L18027
.L26709:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L18026
	movq	-8376(%rbp), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -8400(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L18027
.L18026:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24874:
	movq	%rax, -8400(%rbp)
	jmp	.L18027
.L18024:
	movq	-8376(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26710
	movq	-8376(%rbp), %rdi
	movq	24(%rdi), %r14
	testq	%r14, %r14
	movq	%r14, -8400(%rbp)
	jne	.L18027
	movq	-8376(%rbp), %r9
	movq	8(%r9), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	-8376(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r11
	movq	%r11, -8400(%rbp)
	jmp	.L18027
.L26710:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24874
.L18019:
	movq	-8528(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	%rax, %r12
	movq	-8528(%rbp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	-8528(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26711
.L18021:
	movq	-8528(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8392(%rbp)
	movq	%r12, 8(%rax)
	movq	-8392(%rbp), %r14
	movq	%rbx, 16(%r14)
	jmp	.L18014
.L26711:
	cmpq	16(%rcx), %rax
	jne	.L18021
	jmp	.L18014
.L26681:
	cmpb	$51, 2(%rdx)
	je	.L18012
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26712
.L18012:
	cmpl	$66, %eax
	jne	.L18015
	movq	-8528(%rbp), %r8
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	call	protect_from_queue
	movq	-8528(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L18014
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -8392(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L18014
.L26712:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L18013
	movq	-8528(%rbp), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -8392(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L18014
.L18013:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24873:
	movq	%rax, -8392(%rbp)
	jmp	.L18014
.L18011:
	movq	-8528(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26713
	movq	-8528(%rbp), %rsi
	movq	24(%rsi), %rdi
	testq	%rdi, %rdi
	movq	%rdi, -8392(%rbp)
	jne	.L18014
	movq	-8528(%rbp), %rdx
	movq	8(%rdx), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	-8528(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r11
	movq	%r11, -8392(%rbp)
	jmp	.L18014
.L26713:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24873
.L18006:
	movq	-8536(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-8536(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L26714
.L18008:
	movq	-8536(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8384(%rbp)
	movq	%r12, 8(%rax)
	movq	-8384(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L18001
.L26714:
	cmpq	16(%rsi), %rax
	jne	.L18008
	jmp	.L18001
.L26680:
	jne	.L18002
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-8536(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L18001
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -8384(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L18001
.L17998:
	testq	%rsi, %rsi
	je	.L26715
	movq	-8536(%rbp), %r9
	movq	24(%r9), %r11
	testq	%r11, %r11
	movq	%r11, -8384(%rbp)
	jne	.L18001
	movq	-8536(%rbp), %r12
	movq	8(%r12), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdx
	movq	%rdx, -8384(%rbp)
	jmp	.L18001
.L26715:
	movq	-8536(%rbp), %rsi
	movq	8(%rsi), %rdi
	call	copy_to_reg
	movq	%rax, -8384(%rbp)
	jmp	.L18001
.L17991:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L17987
	movl	32(%rsi), %r15d
	jmp	.L17987
.L17990:
	cmpl	$7, %edx
	ja	.L17986
	jmp	.L17991
.L26679:
	movq	-8344(%rbp), %r9
	movslq	32(%r14),%rcx
	cmpq	%rcx, 8(%r9)
	jge	.L17786
	movq	-8536(%rbp), %rdx
	movq	-8528(%rbp), %r15
	movq	%rdx, -8328(%rbp)
	movq	%r15, -8336(%rbp)
	movq	16(%rdx), %rax
	movl	$8, %edx
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L17790
	movl	32(%rax), %edx
.L17790:
	movq	-8528(%rbp), %rbx
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L17791
	cmpl	32(%rax), %edx
	jb	.L17792
.L17787:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L17788
	movl	32(%rcx), %r15d
.L17788:
	movq	-8536(%rbp), %r12
	cmpb	$51, 2(%r12)
	jne	.L25547
	movq	-8528(%rbp), %r8
	cmpb	$51, 2(%r8)
	jne	.L25546
	movq	-8536(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L17799
	cmpl	$66, %eax
	je	.L26716
.L17803:
	cmpl	$75, %eax
	je	.L17807
	cmpl	$78, %eax
	je	.L17807
.L17802:
	movq	-8528(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L17812
	cmpl	$66, %eax
	je	.L26717
.L17816:
	cmpl	$75, %eax
	je	.L17820
	cmpl	$78, %eax
	je	.L17820
.L17815:
	movq	-8344(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L17825
	cmpl	$66, %eax
	je	.L26718
.L17829:
	cmpl	$75, %eax
	je	.L17833
	cmpl	$78, %eax
	je	.L17833
.L17828:
	movq	-8328(%rbp), %rdi
	cmpw	$66, (%rdi)
	jne	.L25545
	movq	-8336(%rbp), %r11
	cmpw	$66, (%r11)
	jne	.L25544
	cmpq	$0, -8344(%rbp)
	je	.L25543
	movq	-8344(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L26719
.L17841:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -4568(%rbp)
	testl	%r12d, %r12d
	je	.L23872
.L17974:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L17960
	movq	-8344(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L26720
.L17964:
	testb	$2, target_flags+3(%rip)
	je	.L17965
	cmpw	$63, mode_bitsize(%r15,%r15)
.L24872:
	jbe	.L17960
.L17963:
	movslq	%edx,%r11
	leaq	(%r11,%r11,4), %rsi
	movq	%r11, -4576(%rbp)
	movq	insn_data+24(,%rsi,8), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L17967
	movq	-8328(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L17960
.L17967:
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L26721
.L17968:
	movq	72(%r14), %rax
	testq	%rax, %rax
	je	.L17969
	xorl	%esi, %esi
	movq	-4568(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L17960
.L17969:
	call	get_last_insn
	movl	$1, %edx
	movq	-8344(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -4584(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r14), %rax
	testq	%rax, %rax
	jne	.L26722
.L17970:
	movq	-4576(%rbp), %rdx
	movq	-8328(%rbp), %rdi
	xorl	%eax, %eax
	movq	-8336(%rbp), %rsi
	movq	-4568(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24514
	movq	-4584(%rbp), %rdi
	call	delete_insns_since
.L17960:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L17974
.L23872:
	testb	$2, target_flags+3(%rip)
	movq	-8328(%rbp), %r10
	movl	$0, volatile_ok(%rip)
	setne	%cl
	movq	8(%r10), %rsi
	movzbl	%cl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%bl
	movq	%rax, %r14
	movq	-8336(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%bl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-8344(%rbp), %rsi
	movq	sizetype_tab(%rip), %r9
	movq	%rax, %rbx
	movzbl	61(%r9), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L26723
.L17983:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %r10
	movq	8(%rdx), %rdi
	movq	(%r10), %rbx
	movq	$0, (%rbx)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r9
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r9), %r15
	movq	8(%r15), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	je	.L17761
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	jmp	.L24895
.L26723:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r11
	orb	$1, 49(%r11)
	movq	fn.1(%rip), %rsi
	orb	$8, 18(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %rdi
	orb	$64, 50(%rdi)
	movq	fn.1(%rip), %r8
	orb	$2, 18(%r8)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L17983
.L26722:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L17970
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L17970
.L26721:
	movq	-8336(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L17960
	jmp	.L17968
.L17965:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L24872
.L26720:
	movq	mode_mask_array(,%r15,8), %rdi
	shrq	$1, %rdi
	cmpq	%rdi, 8(%rsi)
	jbe	.L17963
	jmp	.L17964
.L26719:
	movq	8(%rcx), %r12
	xorl	%r14d, %r14d
	movl	$17, %esi
.L17854:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23861
.L17851:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L17851
.L23861:
	testl	%edi, %edi
	je	.L17844
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L17853
	call	get_mode_alignment
	movl	$128, %edx
	cmpl	%eax, %edx
	jb	.L17853
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r14
	movq	%rdx, %r12
.L17853:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L17854
.L17844:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L17857
	movq	ix86_cost(%rip), %r11
	mov	40(%r11), %edi
	cmpq	%rdi, %r14
	jae	.L17841
.L17858:
	movq	-8344(%rbp), %r8
	movq	-8336(%rbp), %r10
	movq	-8328(%rbp), %rdx
	movq	-8328(%rbp), %r9
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r14b
	movq	8(%r10), %r8
	movq	$0, -1576(%rbp)
	movl	$0, -8356(%rbp)
	movq	%r8, -1600(%rbp)
	movzbl	%r14b, %ecx
	movq	8(%rdx), %rbx
	movq	%r9, -1632(%rbp)
	leal	5(,%rcx,4), %r14d
	xorl	%ecx, %ecx
	movq	%rbx, -8352(%rbp)
	movq	-8352(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L17863
	cmpw	$99, %dx
	je	.L17863
	cmpw	$98, %dx
	je	.L17863
.L17862:
	movq	-8352(%rbp), %rsi
	movl	%ecx, -1616(%rbp)
	xorl	%edx, %edx
	movzwl	(%rsi), %eax
	cmpw	$96, %ax
	je	.L17865
	cmpw	$98, %ax
	je	.L17865
.L17864:
	movq	-8352(%rbp), %r15
	movq	-8336(%rbp), %r11
	movl	%edx, -1568(%rbp)
	xorl	%ecx, %ecx
	movq	%r15, -1624(%rbp)
	movq	%r11, -1608(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %edi
	cmpw	$1, %di
	jbe	.L17868
	cmpw	$99, %dx
	je	.L17868
	cmpw	$98, %dx
	je	.L17868
.L17867:
	movl	-1568(%rbp), %eax
	movl	%ecx, -1592(%rbp)
	movl	$0, -1588(%rbp)
	movl	$0, -1612(%rbp)
	testl	%eax, %eax
	je	.L17869
	movq	%r12, -1576(%rbp)
.L17869:
	movl	-1592(%rbp), %r9d
	movq	%r12, -1584(%rbp)
	testl	%r9d, %r9d
	je	.L17871
	movl	-1616(%rbp), %ebx
	testl	%ebx, %ebx
	jne	.L17870
.L17871:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L17884:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23864
.L17881:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L17881
.L23864:
	testl	%edi, %edi
	je	.L17874
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L17883
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L17883
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L17883:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L17884
.L17874:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L17870
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23866
.L17892:
	movslq	%ecx,%r11
	movzbl	mode_size(%r11), %r15d
	cmpl	%r14d, %r15d
	cmovae	-8356(%rbp), %ecx
	movl	%ecx, -8356(%rbp)
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L17892
.L23866:
	movl	-1592(%rbp), %eax
	testl	%eax, %eax
	jne	.L17898
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L17896
	cmpw	$54, %dx
	je	.L17896
	cmpw	$55, %dx
	je	.L17896
	cmpw	$58, %dx
	je	.L17896
	cmpw	$134, %dx
	je	.L17896
	cmpw	$56, %dx
	je	.L17896
	cmpw	$140, %dx
	je	.L17896
.L17898:
	movl	-1616(%rbp), %ebx
	testl	%ebx, %ebx
	jne	.L17870
	movq	-8352(%rbp), %rcx
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L17900
	cmpw	$54, %dx
	je	.L17900
	cmpw	$55, %dx
	je	.L17900
	cmpw	$58, %dx
	je	.L17900
	cmpw	$134, %dx
	je	.L17900
	cmpw	$56, %dx
	je	.L17900
	cmpw	$140, %dx
	je	.L17900
.L17870:
	cmpl	$1, %r14d
	jbe	.L17903
.L17954:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23869
.L17910:
	movslq	%ecx,%r8
	movzbl	mode_size(%r8), %edx
	cmpl	%r14d, %edx
	cmovae	-8356(%rbp), %ecx
	movl	%ecx, -8356(%rbp)
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L17910
.L23869:
	movl	-8356(%rbp), %eax
	testl	%eax, %eax
	je	.L17903
	movslq	-8356(%rbp),%r15
	movq	%r15, %r14
	salq	$4, %r14
	addq	optab_table+240(%rip), %r14
	movl	8(%r14), %ebx
	cmpl	$1317, %ebx
	je	.L17912
	movl	-8356(%rbp), %edi
	movl	$128, %r12d
	call	get_mode_alignment
	cmpl	%eax, %r12d
	jb	.L17912
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%r11
	leaq	-1632(%rbp), %r12
	leaq	(%r11,%r11,4), %rsi
	cmpq	%rdx, -1584(%rbp)
	movq	$0, -8368(%rbp)
	movq	insn_data+16(,%rsi,8), %rdi
	movq	%rdx, -6104(%rbp)
	movq	%rdi, -4560(%rbp)
	jb	.L17912
	movl	-1568(%rbp), %ecx
.L17952:
	testl	%ecx, %ecx
	je	.L17916
	subq	%rdx, 56(%r12)
.L17916:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L17917
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L17918
	movl	-8356(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24868:
	movq	%rax, -8368(%rbp)
.L17917:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L17920
	movq	24(%r12), %rdi
	movl	-8356(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24869:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L26724
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L17926
	movzbl	mode_size(%r15), %r9d
	leal	7(%r9), %edx
	andl	$-8, %edx
.L17927:
	movq	cfun(%rip), %rcx
	andl	$33554432, %esi
	movq	16(%rcx), %r10
	leaq	8(%r10), %rdi
	movl	8(%r10), %ecx
	je	.L17928
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24870:
	movq	%r15, %r8
	leal	(%rax,%rcx), %esi
	salq	$4, %r8
	movl	%esi, (%rdi)
	addq	optab_table+384(%rip), %r8
	movl	8(%r8), %eax
	cmpl	$1317, %eax
	je	.L17930
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rdi
	movq	insn_data+24(,%rdi,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L17931
	movq	%r14, %rdi
	movl	-8356(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L26725
.L17931:
	leaq	(%rbx,%rbx,4), %r11
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r11,8)
.L24871:
	movq	%rax, %rdi
	call	emit_insn
.L17950:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L17951
	movq	-6104(%rbp), %r14
	addq	%r14, 56(%r12)
.L17951:
	movq	48(%r12), %r8
	movq	-6104(%rbp), %rdx
	subq	-6104(%rbp), %r8
	cmpq	%rdx, %r8
	movq	%r8, 48(%r12)
	jae	.L17952
.L17912:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L17954
.L17903:
	cmpq	$0, -1584(%rbp)
	jmp	.L25551
.L26725:
	movl	-8356(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L17931
.L17930:
	movzbl	mode_size(%r15), %r9d
	cmpl	%edx, %r9d
	je	.L26726
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r10b
	movzbl	%r10b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L17938:
	movl	-8356(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%ecx, %ecx
	testq	%rcx, %rcx
	movq	%rax, %rbx
	je	.L17947
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L26727
.L17947:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L17950
.L26727:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L17947
.L26726:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L17938
.L17928:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24870
.L17926:
	movzbl	mode_size(%r15), %ebx
	leal	1(%rbx), %edx
	andl	$-2, %edx
	jmp	.L17927
.L26724:
	movq	%rax, %rsi
	movq	-8368(%rbp), %rdi
	xorl	%eax, %eax
	call	*-4560(%rbp)
	jmp	.L24871
.L17920:
	movq	24(%r12), %rdi
	movl	-8356(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24869
.L17918:
	movl	-8356(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24868
.L17900:
	movq	-8352(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -1624(%rbp)
	jmp	.L17870
.L17896:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -1600(%rbp)
	jmp	.L17898
.L17868:
	movl	$1, %ecx
	jmp	.L17867
.L17865:
	movl	$1, %edx
	jmp	.L17864
.L17863:
	movl	$1, %ecx
	jmp	.L17862
.L17857:
	cmpq	$2, %r14
	ja	.L17841
	jmp	.L17858
.L17833:
	movq	-8344(%rbp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-8344(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-8344(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26728
.L17835:
	movq	-8344(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8344(%rbp)
	movq	%r12, 8(%rax)
	movq	-8344(%rbp), %r8
	movq	%rbx, 16(%r8)
	jmp	.L17828
.L26728:
	cmpq	16(%rcx), %rax
	jne	.L17835
	jmp	.L17828
.L26718:
	cmpb	$51, 2(%rdx)
	je	.L17826
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26729
.L17826:
	cmpl	$66, %eax
	jne	.L17829
	movq	-8344(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	movq	-8344(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L17828
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -8344(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L17828
.L26729:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L17827
	movq	-8344(%rbp), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -8344(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L17828
.L17827:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24867:
	movq	%rax, -8344(%rbp)
	jmp	.L17828
.L17825:
	movq	-8344(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26730
	movq	-8344(%rbp), %r14
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L24867
	movq	-8344(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	-8344(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r10
	movq	%r10, -8344(%rbp)
	jmp	.L17828
.L26730:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24867
.L17820:
	movq	-8528(%rbp), %r8
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-8528(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-8528(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26731
.L17822:
	movq	-8528(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8336(%rbp)
	movq	%r12, 8(%rax)
	movq	-8336(%rbp), %r14
	movq	%rbx, 16(%r14)
	jmp	.L17815
.L26731:
	cmpq	16(%rcx), %rax
	jne	.L17822
	jmp	.L17815
.L26717:
	cmpb	$51, 2(%rdx)
	je	.L17813
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26732
.L17813:
	cmpl	$66, %eax
	jne	.L17816
	movq	-8528(%rbp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	movq	-8528(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L17815
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -8336(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L17815
.L26732:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L17814
	movq	-8528(%rbp), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -8336(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L17815
.L17814:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24866:
	movq	%rax, -8336(%rbp)
	jmp	.L17815
.L17812:
	movq	-8528(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26733
	movq	-8528(%rbp), %rax
	movq	24(%rax), %r10
	testq	%r10, %r10
	movq	%r10, -8336(%rbp)
	jne	.L17815
	movq	-8528(%rbp), %r11
	movq	8(%r11), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	-8528(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdi
	movq	%rdi, -8336(%rbp)
	jmp	.L17815
.L26733:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24866
.L17807:
	movq	-8536(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-8536(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L26734
.L17809:
	movq	-8536(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8328(%rbp)
	movq	%r12, 8(%rax)
	movq	-8328(%rbp), %r10
	movq	%rbx, 16(%r10)
	jmp	.L17802
.L26734:
	cmpq	16(%rsi), %rax
	jne	.L17809
	jmp	.L17802
.L26716:
	jne	.L17803
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-8536(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L17802
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -8328(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L17802
.L17799:
	testq	%rsi, %rsi
	je	.L26735
	movq	-8536(%rbp), %rsi
	movq	24(%rsi), %rdi
	testq	%rdi, %rdi
	movq	%rdi, -8328(%rbp)
	jne	.L17802
	movq	-8536(%rbp), %r12
	movq	8(%r12), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r11
	movq	%r11, -8328(%rbp)
	jmp	.L17802
.L26735:
	movq	-8536(%rbp), %rax
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rax, -8328(%rbp)
	jmp	.L17802
.L17792:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L17788
	movl	32(%rsi), %r15d
	jmp	.L17788
.L17791:
	cmpl	$7, %edx
	ja	.L17787
	jmp	.L17792
.L17776:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L26736
.L17778:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -8536(%rbp)
	movq	%r12, 8(%rax)
	movq	-8536(%rbp), %r12
	movq	%rbx, 16(%r12)
	jmp	.L17771
.L26736:
	cmpq	16(%r13), %rax
	jne	.L17778
	jmp	.L17771
.L26649:
	jne	.L17772
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L17771
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -8536(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L17771
.L17768:
	cmpq	$0, 16(%r13)
	je	.L26737
	movq	24(%r13), %r8
	testq	%r8, %r8
	movq	%r8, -8536(%rbp)
	jne	.L17771
	movq	8(%r13), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rax
	movq	%rax, -8536(%rbp)
	jmp	.L17771
.L26737:
	movq	8(%r13), %rdi
	call	copy_to_reg
	movq	%rax, -8536(%rbp)
	jmp	.L17771
.L26648:
	movq	144(%r14), %rax
	testq	%rax, %rax
	je	.L17763
	cmpq	%rax, %r13
	jne	.L17763
	jmp	.L17761
.L26647:
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L17761
	jmp	.L17762
.L17760:
	movq	-8528(%rbp), %rdx
	cmpb	$0, 2(%rdx)
	jne	.L17759
	cmpb	$0, 16(%r14)
	je	.L17759
	movq	8(%r14), %rdx
	movzbl	2(%r13), %edi
	movzbl	61(%rdx), %ebx
	shrb	$1, %bl
	movzbl	%bl, %esi
	cmpl	%esi, %edi
	je	.L17759
	movzbl	17(%rdx), %ecx
	movq	-8528(%rbp), %rdx
	shrb	$5, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, -8528(%rbp)
	jmp	.L17759
.L24383:
	movq	-8528(%rbp), %rsi
	movzwl	(%rsi), %edx
	jmp	.L17682
.L24388:
	movq	-8528(%rbp), %r11
	movzwl	(%r11), %edx
	jmp	.L17682
.L26646:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	%r14, %rdi
	movzbl	2(%r13), %edx
	movq	%rax, %rsi
	jmp	.L24865
.L17721:
	xorl	%edx, %edx
	testl	%edx, %edx
	je	.L24384
	movl	(%r13), %ecx
	movl	%ecx, %r15d
	andl	$134283263, %r15d
	cmpl	$66, %r15d
	je	.L26738
.L17737:
	andl	$268500991, %ecx
	cmpl	$268435519, %ecx
	je	.L25613
	movzbl	2(%r13), %edx
	xorl	%ecx, %ecx
	movq	%r14, %rdi
	movq	%r13, %rsi
	call	expand_expr
	cmpw	$61, (%r13)
	movq	%rax, -8528(%rbp)
	je	.L26739
.L17757:
	movl	(%r13), %eax
	andl	$134283263, %eax
	cmpl	$134217794, %eax
	je	.L24387
	movq	-8528(%rbp), %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L24388
	movq	-8528(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-67(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L17758
	cmpw	$54, %dx
	je	.L17758
	cmpw	$55, %dx
	je	.L17758
	cmpw	$58, %dx
	je	.L17758
	cmpw	$134, %dx
	je	.L17758
	cmpw	$56, %dx
	je	.L17758
	cmpw	$140, %dx
	je	.L17758
	xorl	%r10d, %r10d
	testl	%r10d, %r10d
	je	.L17682
.L17758:
	movl	$1, -8316(%rbp)
	jmp	.L17682
.L24387:
	movq	-8528(%rbp), %rcx
	movzwl	(%rcx), %edx
	jmp	.L17682
.L26739:
	cmpl	$52, 8(%r13)
	jbe	.L24386
	jmp	.L17757
.L25613:
	xorl	%r12d, %r12d
	xorl	%edx, %edx
	testl	%r12d, %r12d
	jmp	.L25614
.L26738:
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L17737
	movq	%r13, %rsi
	xorl	%ecx, %ecx
	movzbl	%al, %edx
	movq	%r14, %rdi
	call	expand_expr
	movq	%rax, -8528(%rbp)
	movq	%rax, %rsi
	movzbl	2(%rax), %eax
	cmpb	$51, %al
	je	.L17738
	testb	%al, %al
	je	.L17738
	cmpq	%r13, %rsi
	je	.L17740
	movq	%rsi, %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L26740
.L17739:
	movq	-8528(%rbp), %rdi
	call	copy_to_reg
	movq	%rax, -8528(%rbp)
.L17738:
	movl	$1, -8316(%rbp)
	jmp	.L24383
.L26740:
	movq	-8528(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L17739
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L17739
.L17740:
	movl	$1, %r12d
	jmp	.L17739
.L24384:
	movl	(%r13), %ecx
	jmp	.L17737
.L17730:
	movl	$1, %ebx
	jmp	.L17724
.L17731:
	xorl	%ebx, %ebx
	jmp	.L17724
.L17728:
	movq	8(%r13), %rdi
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L17730
	movq	16(%r13), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L17724
	jmp	.L17730
.L26645:
	cmpb	$51, 2(%r13)
	jne	.L17683
	call	gen_label_rtx
	movq	%rax, %r15
	call	gen_label_rtx
	movq	cfun(%rip), %rbx
	movq	%rax, -4552(%rbp)
	movq	16(%rbx), %r8
	movq	40(%r8), %rbx
	testq	%rbx, %rbx
	je	.L23854
.L17689:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26741
	call	emit_insn
	movq	%rax, 16(%rbx)
.L17688:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %r11
	movq	16(%rdx), %r12
	testq	%r11, %r11
	movq	%r11, %rbx
	movq	%r11, 40(%r12)
	jne	.L17689
.L23854:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L17691
	cmpl	$66, %eax
	je	.L26742
.L17695:
	cmpl	$75, %eax
	je	.L17699
	cmpl	$78, %eax
	je	.L17699
.L17694:
	call	do_pending_stack_adjust
	movq	cfun(%rip), %r10
	movq	%r15, %rsi
	movq	16(%r10), %rbx
	incl	4(%rbx)
	movq	32(%r14), %rdi
	call	jumpifnot
	call	start_cleanup_deferral
	movq	40(%r14), %rdi
	movq	-8536(%rbp), %rsi
	xorl	%edx, %edx
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %r8
	movq	16(%r8), %rdi
	movq	40(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L23856
.L17709:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26743
	call	emit_insn
	movq	%rax, 16(%rbx)
.L17708:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %r12
	movq	16(%rdx), %r9
	testq	%r12, %r12
	movq	%r12, %rbx
	movq	%r12, 40(%r9)
	jne	.L17709
.L23856:
	movq	-4552(%rbp), %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r15, %rdi
	call	emit_label
	call	start_cleanup_deferral
	movq	48(%r14), %rdi
	movq	-8536(%rbp), %rsi
	xorl	%edx, %edx
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %r15
	movq	16(%r15), %r14
	movq	40(%r14), %rbx
	testq	%rbx, %rbx
	je	.L23858
.L17716:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26744
	call	emit_insn
	movq	%rax, 16(%rbx)
.L17715:
	movq	cfun(%rip), %rcx
	movq	40(%rbx), %rdi
	movq	16(%rcx), %r10
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%r10)
	jne	.L17716
.L23858:
	movq	-4552(%rbp), %rdi
	jmp	.L25109
.L26744:
	movq	8(%rdi), %r8
	movq	8(%r8), %rsi
	movq	%rsi, 16(%rbx)
	call	emit_insn
	jmp	.L17715
.L26743:
	movq	8(%rdi), %r11
	movq	8(%r11), %rcx
	movq	%rcx, 16(%rbx)
	call	emit_insn
	jmp	.L17708
.L17699:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L26745
.L17701:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -8536(%rbp)
	movq	%r12, 8(%rax)
	movq	-8536(%rbp), %rax
	movq	%rbx, 16(%rax)
	jmp	.L17694
.L26745:
	cmpq	16(%r13), %rax
	jne	.L17701
	jmp	.L17694
.L26742:
	jne	.L17695
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L17694
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -8536(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L17694
.L17691:
	cmpq	$0, 16(%r13)
	je	.L26746
	movq	24(%r13), %r9
	testq	%r9, %r9
	movq	%r9, -8536(%rbp)
	jne	.L17694
	movq	8(%r13), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rax
.L24864:
	movq	%rax, -8536(%rbp)
	jmp	.L17694
.L26746:
	movq	8(%r13), %rdi
	call	copy_to_reg
	jmp	.L24864
.L26741:
	movq	8(%rdi), %rcx
	movq	8(%rcx), %r10
	movq	%r10, 16(%rbx)
	call	emit_insn
	jmp	.L17688
.L26644:
	movq	32(%r14), %rdi
	movq	const_int_rtx+512(%rip), %rsi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	call	expand_expr
	movq	cfun(%rip), %r11
	movq	16(%r11), %rcx
	movq	40(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L23852
.L17679:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26747
	call	emit_insn
	movq	%rax, 16(%rbx)
.L17678:
	movq	cfun(%rip), %rsi
	movq	40(%rbx), %r9
	movq	16(%rsi), %rdi
	testq	%r9, %r9
	movq	%r9, %rbx
	movq	%r9, 40(%rdi)
	jne	.L17679
	jmp	.L23852
.L26747:
	movq	8(%rdi), %rdx
	movq	8(%rdx), %r12
	movq	%r12, 16(%rbx)
	call	emit_insn
	jmp	.L17678
.L17668:
	movq	-8312(%rbp), %rax
	cmpb	$51, 2(%rax)
	je	.L16775
	cmpw	$61, (%rax)
	je	.L26748
.L17671:
	movq	-8312(%rbp), %rdi
	call	copy_to_reg
	jmp	.L16775
.L26748:
	cmpl	$52, 8(%rax)
	jbe	.L16775
	jmp	.L17671
.L16876:
	movq	-8312(%rbp), %rdi
	movq	-8304(%rbp), %rsi
	call	convert_move
	jmp	.L16855
.L16875:
	cmpb	$51, %al
	je	.L26749
.L16879:
	movq	-8312(%rbp), %rsi
	cmpw	$39, (%rsi)
	je	.L26750
	cmpb	$51, %al
	je	.L26751
	movq	-8312(%rbp), %rdi
	movq	-8304(%rbp), %rsi
	jmp	.L24863
.L26751:
	movq	-8312(%rbp), %rdi
	movq	-8304(%rbp), %rcx
	movq	%rdi, -8264(%rbp)
	movq	%rcx, -8272(%rbp)
	movq	%r14, %rdi
	call	expr_size
	movl	$8, %edx
	movq	-8312(%rbp), %rsi
	movq	%rax, %r14
	movq	16(%rsi), %rcx
	testq	%rcx, %rcx
	je	.L17470
	movl	32(%rcx), %edx
.L17470:
	movq	-8304(%rbp), %r10
	movq	16(%r10), %rax
	testq	%rax, %rax
	je	.L17471
	cmpl	32(%rax), %edx
	jb	.L17472
.L17467:
	testq	%rax, %rax
	movl	$8, -8252(%rbp)
	je	.L17468
	movl	32(%rax), %eax
.L24854:
	movl	%eax, -8252(%rbp)
.L17468:
	movq	-8312(%rbp), %rbx
	cmpb	$51, 2(%rbx)
	jne	.L25547
	movq	-8304(%rbp), %r11
	cmpb	$51, 2(%r11)
	jne	.L25546
	movq	-8312(%rbp), %rsi
	movzwl	(%rsi), %eax
	cmpl	$71, %eax
	je	.L17479
	cmpl	$66, %eax
	je	.L26752
.L17483:
	cmpl	$75, %eax
	je	.L17487
	cmpl	$78, %eax
	je	.L17487
.L17482:
	movq	-8304(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L17492
	cmpl	$66, %eax
	je	.L26753
.L17496:
	cmpl	$75, %eax
	je	.L17500
	cmpl	$78, %eax
	je	.L17500
.L17495:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L17505
	cmpl	$66, %eax
	je	.L26754
.L17509:
	cmpl	$75, %eax
	je	.L17513
	cmpl	$78, %eax
	je	.L17513
.L17508:
	movq	-8264(%rbp), %r10
	cmpw	$66, (%r10)
	jne	.L25545
	movq	-8272(%rbp), %r11
	cmpw	$66, (%r11)
	jne	.L25544
	testq	%r14, %r14
	je	.L25543
	cmpw	$54, (%r14)
	je	.L26755
.L17521:
	shrl	$3, -8252(%rbp)
	xorl	%edi, %edi
	mov	-8252(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -4520(%rbp)
	testl	%r12d, %r12d
	je	.L23850
.L17654:
	movslq	%r12d,%rsi
	movl	movstr_optab(,%rsi,4), %edx
	movq	%rsi, -4528(%rbp)
	cmpl	$1317, %edx
	je	.L17640
	cmpw	$54, (%r14)
	je	.L26756
.L17644:
	testb	$2, target_flags+3(%rip)
	je	.L17645
	movq	-4528(%rbp), %r8
	cmpw	$63, mode_bitsize(%r8,%r8)
.L24861:
	jbe	.L17640
.L17643:
	movslq	%edx,%r11
	leaq	(%r11,%r11,4), %rcx
	movq	%r11, -4536(%rbp)
	movq	insn_data+24(,%rcx,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L17647
	movq	-8264(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L17640
.L17647:
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L26757
.L17648:
	movq	72(%r15), %rax
	testq	%rax, %rax
	je	.L17649
	xorl	%esi, %esi
	movq	-4520(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L17640
.L17649:
	call	get_last_insn
	movl	$1, %edx
	movq	%r14, %rsi
	movl	%r12d, %edi
	movq	%rax, -4544(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r15), %rax
	testq	%rax, %rax
	jne	.L26758
.L17650:
	movq	-4536(%rbp), %rdx
	movq	-8264(%rbp), %rdi
	xorl	%eax, %eax
	movq	-8272(%rbp), %rsi
	movq	-4520(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24510
	movq	-4544(%rbp), %rdi
	call	delete_insns_since
.L17640:
	movq	-4528(%rbp), %rbx
	movzbl	mode_wider_mode(%rbx), %r12d
	testl	%r12d, %r12d
	jne	.L17654
.L23850:
	testb	$2, target_flags+3(%rip)
	movq	-8264(%rbp), %r15
	movl	$0, volatile_ok(%rip)
	setne	%r8b
	movq	8(%r15), %rsi
	movzbl	%r8b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%sil
	movq	%rax, %r15
	movq	-8272(%rbp), %rax
	movzbl	%sil, %edi
	movq	8(%rax), %rsi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%r14, %rsi
	movq	sizetype_tab(%rip), %rdi
	movq	%rax, %rbx
	movzbl	61(%rdi), %r9d
	shrb	$1, %r9b
	movzbl	%r9b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r14
	je	.L26759
.L17663:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r15, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r14, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %rdi
	movq	(%rdi), %r9
	movq	8(%rdx), %rdi
	movq	$0, (%r9)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %rbx
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%rbx), %r14
	movq	8(%r14), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r15)
	je	.L16855
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r15, %rdx
.L24862:
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L16855
.L26759:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r12
	xorl	%esi, %esi
	orb	$1, 49(%r12)
	movq	fn.1(%rip), %r11
	orb	$8, 18(%r11)
	movq	fn.1(%rip), %rcx
	orb	$64, 50(%rcx)
	movq	fn.1(%rip), %r10
	orb	$2, 18(%r10)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L17663
.L24510:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L16855
.L26758:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L17650
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L17650
.L26757:
	movq	-8272(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L17640
	jmp	.L17648
.L17645:
	movq	-4528(%rbp), %r10
	cmpw	$31, mode_bitsize(%r10,%r10)
	jmp	.L24861
.L26756:
	movq	mode_mask_array(,%rsi,8), %r15
	shrq	$1, %r15
	cmpq	%r15, 8(%r14)
	jbe	.L17643
	jmp	.L17644
.L26755:
	movq	8(%r14), %r12
	xorl	%r15d, %r15d
	movl	$17, %esi
.L17534:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23839
.L17531:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L17531
.L23839:
	testl	%edi, %edi
	je	.L17524
	movslq	%edi,%rbx
	movq	%rbx, %r8
	salq	$4, %r8
	addq	optab_table+240(%rip), %r8
	cmpl	$1317, 8(%r8)
	je	.L17533
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L17533
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L17533:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L17534
.L17524:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L17537
	movq	ix86_cost(%rip), %r10
	mov	40(%r10), %ecx
	cmpq	%rcx, %r15
	jae	.L17521
.L17538:
	movq	-8272(%rbp), %rsi
	testb	$2, target_flags+3(%rip)
	movq	-8264(%rbp), %r9
	movq	8(%r14), %r12
	setne	%r14b
	movq	-8264(%rbp), %rdi
	xorl	%ecx, %ecx
	movq	8(%rsi), %r8
	movq	$0, -1496(%rbp)
	movl	$0, -8284(%rbp)
	movq	%r8, -1520(%rbp)
	movzbl	%r14b, %edx
	movq	8(%r9), %rbx
	leal	5(,%rdx,4), %r14d
	movq	%rdi, -1552(%rbp)
	movzwl	(%rbx), %edx
	movq	%rbx, -8280(%rbp)
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L17543
	cmpw	$99, %dx
	je	.L17543
	cmpw	$98, %dx
	je	.L17543
.L17542:
	movl	%ecx, -1536(%rbp)
	xorl	%edx, %edx
	movq	-8280(%rbp), %rcx
	movzwl	(%rcx), %eax
	cmpw	$96, %ax
	je	.L17545
	cmpw	$98, %ax
	je	.L17545
.L17544:
	movq	-8280(%rbp), %r15
	movq	-8272(%rbp), %rax
	movl	%edx, -1488(%rbp)
	xorl	%ecx, %ecx
	movq	%r15, -1544(%rbp)
	movq	%rax, -1528(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L17548
	cmpw	$99, %dx
	je	.L17548
	cmpw	$98, %dx
	je	.L17548
.L17547:
	movl	-1488(%rbp), %r11d
	movl	%ecx, -1512(%rbp)
	movl	$0, -1508(%rbp)
	movl	$0, -1532(%rbp)
	testl	%r11d, %r11d
	je	.L17549
	movq	%r12, -1496(%rbp)
.L17549:
	movl	-1512(%rbp), %ebx
	movq	%r12, -1504(%rbp)
	testl	%ebx, %ebx
	je	.L17551
	movl	-1536(%rbp), %edi
	testl	%edi, %edi
	jne	.L17550
.L17551:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L17564:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23842
.L17561:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L17561
.L23842:
	testl	%edi, %edi
	je	.L17554
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L17563
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L17563
	movzbq	mode_size(%rbx), %r10
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r10
	addq	%rax, %r15
	movq	%rdx, %r12
.L17563:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L17564
.L17554:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L17550
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23844
.L17572:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %r11d
	cmpl	%r14d, %r11d
	cmovae	-8284(%rbp), %ecx
	movl	%ecx, -8284(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L17572
.L23844:
	movl	-1512(%rbp), %eax
	testl	%eax, %eax
	jne	.L17578
	movzwl	(%r8), %edx
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L17576
	cmpw	$54, %dx
	je	.L17576
	cmpw	$55, %dx
	je	.L17576
	cmpw	$58, %dx
	je	.L17576
	cmpw	$134, %dx
	je	.L17576
	cmpw	$56, %dx
	je	.L17576
	cmpw	$140, %dx
	je	.L17576
.L17578:
	movl	-1536(%rbp), %eax
	testl	%eax, %eax
	jne	.L17550
	movq	-8280(%rbp), %r9
	movzwl	(%r9), %edx
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L17580
	cmpw	$54, %dx
	je	.L17580
	cmpw	$55, %dx
	je	.L17580
	cmpw	$58, %dx
	je	.L17580
	cmpw	$134, %dx
	je	.L17580
	cmpw	$56, %dx
	je	.L17580
	cmpw	$140, %dx
	je	.L17580
.L17550:
	cmpl	$1, %r14d
	jbe	.L17583
.L17634:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23847
.L17590:
	movslq	%ecx,%rsi
	movzbl	mode_size(%rsi), %edx
	cmpl	%r14d, %edx
	cmovae	-8284(%rbp), %ecx
	movl	%ecx, -8284(%rbp)
	movzbl	mode_wider_mode(%rsi), %ecx
	testl	%ecx, %ecx
	jne	.L17590
.L23847:
	movl	-8284(%rbp), %eax
	testl	%eax, %eax
	je	.L17583
	movslq	-8284(%rbp),%r15
	movq	%r15, %r14
	salq	$4, %r14
	addq	optab_table+240(%rip), %r14
	movl	8(%r14), %ebx
	cmpl	$1317, %ebx
	je	.L17592
	movl	-8284(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	jb	.L17592
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%r10
	movq	$0, -8296(%rbp)
	leaq	(%r10,%r10,4), %rcx
	cmpq	%rdx, -1504(%rbp)
	movq	insn_data+16(,%rcx,8), %r12
	movq	%rdx, -6096(%rbp)
	movq	%r12, -4512(%rbp)
	leaq	-1552(%rbp), %r12
	jb	.L17592
	movl	-1488(%rbp), %ecx
.L17632:
	testl	%ecx, %ecx
	je	.L17596
	subq	%rdx, 56(%r12)
.L17596:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L17597
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L17598
	movl	-8284(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24857:
	movq	%rax, -8296(%rbp)
.L17597:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L17600
	movq	24(%r12), %rdi
	movl	-8284(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24858:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L26760
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L17606
	movzbl	mode_size(%r15), %r11d
	leal	7(%r11), %edx
	andl	$-8, %edx
.L17607:
	movq	cfun(%rip), %rdi
	andl	$33554432, %esi
	movq	16(%rdi), %r9
	leaq	8(%r9), %rdi
	movl	8(%r9), %ecx
	je	.L17608
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24859:
	movq	%r15, %rsi
	leal	(%rax,%rcx), %r8d
	salq	$4, %rsi
	movl	%r8d, (%rdi)
	addq	optab_table+384(%rip), %rsi
	movl	8(%rsi), %eax
	cmpl	$1317, %eax
	je	.L17610
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rcx
	movq	insn_data+24(,%rcx,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L17611
	movq	%r14, %rdi
	movl	-8284(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L26761
.L17611:
	leaq	(%rbx,%rbx,4), %r10
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r10,8)
.L24860:
	movq	%rax, %rdi
	call	emit_insn
.L17630:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L17631
	movq	-6096(%rbp), %r14
	addq	%r14, 56(%r12)
.L17631:
	movq	48(%r12), %rsi
	movq	-6096(%rbp), %rdx
	subq	-6096(%rbp), %rsi
	cmpq	%rdx, %rsi
	movq	%rsi, 48(%r12)
	jae	.L17632
.L17592:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L17634
.L17583:
	cmpq	$0, -1504(%rbp)
.L25552:
	je	.L16855
	jmp	.L25518
.L26761:
	movl	-8284(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L17611
.L17610:
	movzbl	mode_size(%r15), %r11d
	cmpl	%edx, %r11d
	je	.L26762
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r9b
	movzbl	%r9b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L17618:
	movl	-8284(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%edi, %edi
	testq	%rdi, %rdi
	movq	%rax, %rbx
	je	.L17627
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L26763
.L17627:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L17630
.L26763:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L17627
.L26762:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L17618
.L17608:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24859
.L17606:
	movzbl	mode_size(%r15), %ebx
	leal	1(%rbx), %edx
	andl	$-2, %edx
	jmp	.L17607
.L26760:
	movq	%rax, %rsi
	movq	-8296(%rbp), %rdi
	xorl	%eax, %eax
	call	*-4512(%rbp)
	jmp	.L24860
.L17600:
	movq	24(%r12), %rdi
	movl	-8284(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24858
.L17598:
	movl	-8284(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24857
.L17580:
	movq	-8280(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -1544(%rbp)
	jmp	.L17550
.L17576:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -1520(%rbp)
	jmp	.L17578
.L17548:
	movl	$1, %ecx
	jmp	.L17547
.L17545:
	movl	$1, %edx
	jmp	.L17544
.L17543:
	movl	$1, %ecx
	jmp	.L17542
.L17537:
	cmpq	$2, %r15
	ja	.L17521
	jmp	.L17538
.L17513:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L26764
.L17515:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L17508
.L26764:
	cmpq	16(%r14), %rax
	jne	.L17515
	jmp	.L17508
.L26754:
	cmpb	$51, 2(%r14)
	je	.L17506
	movq	8(%r14), %r12
	cmpw	$71, (%r12)
	je	.L26765
.L17506:
	cmpl	$66, %eax
	jne	.L17509
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L17508
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%rbx, 8(%rax)
	jmp	.L17508
.L26765:
	movq	8(%r12), %rsi
	movq	%r14, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L17507
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L17508
.L17507:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24856:
	movq	%rax, %r14
	jmp	.L17508
.L17505:
	cmpq	$0, 16(%r14)
	je	.L26766
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L24856
	movq	8(%r14), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L17508
.L26766:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L24856
.L17500:
	movq	-8304(%rbp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-8304(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-8304(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26767
.L17502:
	movq	-8304(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8272(%rbp)
	movq	%r12, 8(%rax)
	movq	-8272(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L17495
.L26767:
	cmpq	16(%rcx), %rax
	jne	.L17502
	jmp	.L17495
.L26753:
	cmpb	$51, 2(%rdx)
	je	.L17493
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26768
.L17493:
	cmpl	$66, %eax
	jne	.L17496
	movq	-8304(%rbp), %r11
	xorl	%esi, %esi
	movq	8(%r11), %rdi
	call	protect_from_queue
	movq	-8304(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L17495
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -8272(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L17495
.L26768:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L17494
	movq	-8304(%rbp), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -8272(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L17495
.L17494:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24855:
	movq	%rax, -8272(%rbp)
	jmp	.L17495
.L17492:
	movq	-8304(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26769
	movq	-8304(%rbp), %rax
	movq	24(%rax), %r8
	testq	%r8, %r8
	movq	%r8, -8272(%rbp)
	jne	.L17495
	movq	-8304(%rbp), %rsi
	movq	8(%rsi), %r12
	movzbl	2(%r12), %edi
	call	gen_reg_rtx
	movq	-8304(%rbp), %r15
	movq	%rax, %rdi
	movq	8(%r15), %rsi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r9
	movq	%r9, -8272(%rbp)
	jmp	.L17495
.L26769:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24855
.L17487:
	movq	-8312(%rbp), %r12
	xorl	%esi, %esi
	movq	8(%r12), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-8312(%rbp), %rdx
	movq	%rax, %r12
	movq	16(%rdx), %rdi
	call	protect_from_queue
	movq	-8312(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L26770
.L17489:
	movq	-8312(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8264(%rbp)
	movq	%r12, 8(%rax)
	movq	-8264(%rbp), %r8
	movq	%rbx, 16(%r8)
	jmp	.L17482
.L26770:
	cmpq	16(%rsi), %rax
	jne	.L17489
	jmp	.L17482
.L26752:
	jne	.L17483
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, %rbx
	movq	-8312(%rbp), %rax
	cmpq	8(%rax), %rbx
	je	.L17482
	movq	%rax, %rdi
	call	copy_rtx
	movq	%rax, -8264(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L17482
.L17479:
	testq	%rcx, %rcx
	je	.L26771
	movq	-8312(%rbp), %r15
	movq	24(%r15), %r9
	testq	%r9, %r9
	movq	%r9, -8264(%rbp)
	jne	.L17482
	movq	-8312(%rbp), %r12
	movq	8(%r12), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rcx
	movq	%rcx, -8264(%rbp)
	jmp	.L17482
.L26771:
	movq	-8312(%rbp), %rax
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rax, -8264(%rbp)
	jmp	.L17482
.L17472:
	testq	%rcx, %rcx
	movl	$8, -8252(%rbp)
	je	.L17468
	movl	32(%rcx), %eax
	jmp	.L24854
.L17471:
	cmpl	$7, %edx
	ja	.L17467
	jmp	.L17472
.L26750:
	movq	8(%r14), %rdi
	call	int_size_in_bytes
	movl	%eax, -4476(%rbp)
	movq	-8312(%rbp), %rax
	cmpw	$39, (%rax)
	jne	.L25561
	movq	-8312(%rbp), %r8
	movq	8(%r8), %rcx
	movq	8(%rcx), %r15
	movl	(%rcx), %r14d
	cmpq	$0, 8(%r15)
	movslq	%r14d,%rdi
	sete	%r11b
	leaq	15(,%rdi,8), %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	leaq	32(%rsp), %r12
	movzbl	%r11b, %r10d
	movq	%r12, -4488(%rbp)
	movl	%r10d, -8248(%rbp)
	movl	-8248(%rbp), %eax
	cmpl	%r14d, %eax
	movl	%eax, -8240(%rbp)
	jge	.L23833
.L17451:
	movslq	-8240(%rbp),%r14
	movq	8(%rcx,%r14,8), %rsi
	movq	%r14, -4496(%rbp)
	movl	-4476(%rbp), %ecx
	movq	8(%rsi), %rax
	movq	16(%rsi), %r9
	testl	%ecx, %ecx
	movzbl	2(%rax), %r14d
	movq	8(%r9), %r15
	movslq	%r14d,%rdx
	movzbl	mode_size(%rdx), %ebx
	movq	%rdx, -4504(%rbp)
	movl	%ebx, -8244(%rbp)
	js	.L17424
	movslq	-4476(%rbp),%r12
	mov	%ebx, %edi
	leaq	(%rdi,%r15), %rbx
	cmpq	%r12, %rbx
	jle	.L17424
	movl	-4476(%rbp), %r10d
	subl	%r15d, %r10d
	movl	%r10d, -8244(%rbp)
	je	.L25560
.L17424:
	movq	-8304(%rbp), %r12
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L24538
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L17428
	cmpw	$54, %dx
	je	.L17428
	cmpw	$55, %dx
	je	.L17428
	cmpw	$58, %dx
	je	.L17428
	cmpw	$134, %dx
	je	.L17428
	cmpw	$56, %dx
	je	.L17428
	cmpw	$140, %dx
	je	.L17428
.L17427:
	movq	-8304(%rbp), %rcx
	movl	%r14d, %edi
	movzbl	2(%rcx), %eax
	testb	%al, %al
	je	.L24852
	movzbl	%al, %edi
.L24852:
	call	gen_reg_rtx
	movq	-8304(%rbp), %rsi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	emit_move_insn
	movzwl	(%r12), %edx
.L17426:
	cmpw	$66, %dx
	je	.L24538
.L17431:
	cmpw	$65, %dx
	je	.L26772
	leal	-67(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L17448
	cmpw	$54, %dx
	je	.L17448
	cmpw	$55, %dx
	je	.L17448
	cmpw	$58, %dx
	je	.L17448
	cmpw	$134, %dx
	je	.L17448
	cmpw	$56, %dx
	je	.L17448
	cmpw	$140, %dx
	je	.L17448
	cmpw	$61, %dx
	je	.L26773
.L17447:
	movl	-8244(%rbp), %edx
	movslq	-4476(%rbp),%r10
	movq	%r12, %rdi
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r14d, %r9d
	movl	%r14d, (%rsp)
	sall	$3, %edx
	mov	%edx, %esi
	movq	%r10, 8(%rsp)
	leaq	0(,%r15,8), %rdx
	call	extract_bit_field
.L24853:
	movq	-4496(%rbp), %r12
	movq	-4488(%rbp), %r11
	movq	%rax, (%r11,%r12,8)
.L17422:
	movq	-8312(%rbp), %r8
	incl	-8240(%rbp)
	movl	-8240(%rbp), %eax
	movq	8(%r8), %rcx
	cmpl	(%rcx), %eax
	jl	.L17451
.L23833:
	movq	cfun(%rip), %r15
	movq	16(%r15), %r9
	movq	40(%r9), %rbx
	testq	%rbx, %rbx
	je	.L23835
.L17457:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26774
	call	emit_insn
	movq	%rax, 16(%rbx)
.L17456:
	movq	cfun(%rip), %r10
	movq	40(%rbx), %r14
	movq	16(%r10), %rdi
	testq	%r14, %r14
	movq	%r14, %rbx
	movq	%r14, 40(%rdi)
	jne	.L17457
	movq	-8312(%rbp), %rbx
	movq	8(%rbx), %rcx
.L23835:
	movl	-8248(%rbp), %r11d
	cmpl	(%rcx), %r11d
	jge	.L16855
.L17463:
	movslq	-8248(%rbp),%r9
	movq	-4488(%rbp), %r8
	salq	$3, %r9
	movq	8(%r9,%rcx), %r15
	movq	(%r8,%r9), %rsi
	movq	8(%r15), %rdi
	call	emit_move_insn
	movq	-8312(%rbp), %rax
	incl	-8248(%rbp)
	movl	-8248(%rbp), %edx
	movq	8(%rax), %r12
	cmpl	(%r12), %edx
	movq	%r12, %rcx
	jl	.L17463
	jmp	.L16855
.L26774:
	movq	8(%rdi), %rsi
	movq	8(%rsi), %rcx
	movq	%rcx, 16(%rbx)
	call	emit_insn
	jmp	.L17456
.L26773:
	movzbl	2(%r12), %esi
	cmpl	%r14d, %esi
	jne	.L17447
.L17448:
	movq	-4496(%rbp), %rdi
	movq	-4488(%rbp), %r14
	movq	%r12, (%r14,%rdi,8)
	jmp	.L17422
.L26772:
	testq	%r15, %r15
	jne	.L24381
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %r8
	movzbl	mode_size(%r8), %ebx
	cmpl	%ebx, -8244(%rbp)
	je	.L17437
.L17438:
	movzbq	2(%rdx), %rcx
	movzbq	mode_size(%rcx), %r9
	cmpq	%r9, %r15
	je	.L26775
.L17436:
	testq	%r15, %r15
	jne	.L22779
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbx
	movzbq	mode_size(%rbx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %r15
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r15, %rdi
	movl	%r14d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	jmp	.L24853
.L26775:
	movq	16(%r12), %rdx
	movzbq	2(%rdx), %rdi
	movzbl	mode_size(%rdi), %esi
	cmpl	%esi, -8244(%rbp)
	jne	.L17436
.L17437:
	xorl	%r10d, %r10d
	movq	-4496(%rbp), %r11
	movq	-4488(%rbp), %rax
	testq	%r15, %r15
	setne	%r10b
	leaq	(%rax,%r11,8), %rbx
	movq	8(%r12,%r10,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L17422
	cmpw	$54, %dx
	je	.L17422
	cmpw	$55, %dx
	je	.L17422
	cmpw	$58, %dx
	je	.L17422
	cmpw	$134, %dx
	je	.L17422
	cmpw	$56, %dx
	je	.L17422
	cmpw	$140, %dx
	je	.L17422
	cmpw	$61, %dx
	je	.L26776
.L17442:
	movslq	-4476(%rbp),%r8
	movl	-8244(%rbp), %r9d
	movl	%r14d, (%rsp)
	xorl	%edx, %edx
	movl	$1, %ecx
	sall	$3, %r9d
	movq	%r8, 8(%rsp)
	mov	%r9d, %esi
	xorl	%r8d, %r8d
	movq	(%rbx), %rdi
	movl	%r14d, %r9d
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L17422
.L26776:
	movzbl	2(%rcx), %r12d
	cmpl	%r14d, %r12d
	jne	.L17442
	jmp	.L17422
.L24381:
	movq	8(%r12), %rdx
	jmp	.L17438
.L24538:
	movl	%r14d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L17432
	cmpl	%eax, 32(%rdx)
	jae	.L17433
.L24380:
	movzwl	(%r12), %edx
	jmp	.L17431
.L17433:
	movl	%r14d, %edi
	leaq	0(,%r15,8), %rbx
	call	get_mode_alignment
	mov	%eax, %edi
	movq	%rbx, %rax
	cqto
	idivq	%rdi
	testq	%rdx, %rdx
	jne	.L24380
	movq	-4504(%rbp), %rax
	movzbl	mode_size(%rax), %edx
	cmpl	%edx, -8244(%rbp)
	jne	.L24380
	movl	%r14d, %edi
	call	gen_reg_rtx
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-4496(%rbp), %r11
	movq	-4488(%rbp), %r10
	movq	%r12, %rdi
	movl	%r14d, %esi
	movq	%r15, %rdx
	leaq	(%r10,%r11,8), %rbx
	movq	%rax, (%rbx)
	call	adjust_address_1
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L17422
.L17432:
	cmpl	$8, %eax
	ja	.L24380
	jmp	.L17433
.L17428:
	movq	-8304(%rbp), %r9
	movzbl	2(%r9), %ecx
	movzbl	%cl, %r8d
	cmpl	%r14d, %r8d
	je	.L17426
	testb	%cl, %cl
	je	.L17426
	jmp	.L17427
.L26749:
	cmpb	$29, 16(%r14)
	jne	.L16879
	movq	%r14, %rdi
	call	expr_size
	cmpw	$54, (%rax)
	movq	%rax, -8120(%rbp)
	je	.L26777
.L16880:
	movq	sizetype_tab(%rip), %rdi
	movq	-8120(%rbp), %rsi
	call	make_tree
	xorl	%esi, %esi
	movslq	32(%r14),%rdi
	movq	%rax, %r15
	call	size_int_wide
	movq	%r15, %rsi
	movl	$78, %edi
	movq	%rax, %rdx
	call	size_binop
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	movq	%rax, -4400(%rbp)
	call	expand_expr
	xorl	%edx, %edx
	movl	ptr_mode(%rip), %edi
	movq	%rax, %rsi
	movq	$0, -8208(%rbp)
	call	convert_to_mode
	movl	$8, %edx
	movq	-8304(%rbp), %rcx
	movq	-8312(%rbp), %r12
	movq	%rax, -8152(%rbp)
	movq	%rax, -8176(%rbp)
	movq	%rcx, -8168(%rbp)
	movq	%r12, -8160(%rbp)
	movq	16(%r12), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L17083
	movl	32(%rax), %edx
.L17083:
	movq	-8304(%rbp), %r14
	movq	16(%r14), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L17084
	cmpl	32(%rax), %edx
	jb	.L17085
.L17080:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L17081
	movl	32(%rcx), %r15d
.L17081:
	movq	-8312(%rbp), %rax
	cmpb	$51, 2(%rax)
	jne	.L25547
	movq	-8304(%rbp), %rdi
	cmpb	$51, 2(%rdi)
	jne	.L25546
	movq	-8312(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L17092
	cmpl	$66, %eax
	je	.L26778
.L17096:
	cmpl	$75, %eax
	je	.L17100
	cmpl	$78, %eax
	je	.L17100
.L17095:
	movq	-8304(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L17105
	cmpl	$66, %eax
	je	.L26779
.L17109:
	cmpl	$75, %eax
	je	.L17113
	cmpl	$78, %eax
	je	.L17113
.L17108:
	movq	-8152(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L17118
	cmpl	$66, %eax
	je	.L26780
.L17122:
	cmpl	$75, %eax
	je	.L17126
	cmpl	$78, %eax
	je	.L17126
.L17121:
	movq	-8160(%rbp), %rdx
	cmpw	$66, (%rdx)
	jne	.L25545
	movq	-8168(%rbp), %r11
	cmpw	$66, (%r11)
	jne	.L25544
	cmpq	$0, -8176(%rbp)
	je	.L25543
	movq	-8176(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L26781
.L17134:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -4416(%rbp)
	testl	%r12d, %r12d
	je	.L23817
.L17267:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L17253
	movq	-8176(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L26782
.L17257:
	testb	$2, target_flags+3(%rip)
	je	.L17258
	cmpw	$63, mode_bitsize(%r15,%r15)
.L24846:
	jbe	.L17253
.L17256:
	movslq	%edx,%rsi
	leaq	(%rsi,%rsi,4), %rcx
	movq	%rsi, -4424(%rbp)
	movq	insn_data+24(,%rcx,8), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L17260
	movq	-8160(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L17253
.L17260:
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L26783
.L17261:
	movq	72(%r14), %rax
	testq	%rax, %rax
	je	.L17262
	xorl	%esi, %esi
	movq	-4416(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L17253
.L17262:
	call	get_last_insn
	movl	$1, %edx
	movq	-8176(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -4432(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r14), %rax
	testq	%rax, %rax
	jne	.L26784
.L17263:
	movq	-4424(%rbp), %rdx
	movq	-8160(%rbp), %rdi
	xorl	%eax, %eax
	movq	-8168(%rbp), %rsi
	movq	-4416(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24508
	movq	-4432(%rbp), %rdi
	call	delete_insns_since
.L17253:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L17267
.L23817:
	testb	$2, target_flags+3(%rip)
	movq	-8160(%rbp), %r8
	movl	$0, volatile_ok(%rip)
	setne	%r10b
	movq	8(%r8), %rsi
	movzbl	%r10b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%bl
	movq	%rax, %r14
	movq	-8168(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%bl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-8176(%rbp), %rsi
	movq	sizetype_tab(%rip), %r9
	movq	%rax, %rbx
	movzbl	61(%r9), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L26785
.L17276:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %r8
	movq	8(%rdx), %rdi
	movq	(%r8), %rbx
	movq	$0, (%rbx)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r9
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r9), %r15
	movq	8(%r15), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	jne	.L26786
.L17265:
	movq	-8152(%rbp), %rbx
	cmpw	$54, (%rbx)
	je	.L26787
	movq	sizetype_tab(%rip), %r10
	movq	-8152(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	optab_table+16(%rip), %rsi
	movq	-8120(%rbp), %rdx
	xorl	%r9d, %r9d
	movzbl	61(%r10), %r12d
	movl	$3, (%rsp)
	shrb	$1, %r12b
	movzbl	%r12b, %edi
	call	expand_binop
	movq	-4400(%rbp), %rdi
	movq	%rax, %rbx
	call	highest_pow2_factor
	movq	-8152(%rbp), %rsi
	movq	-8312(%rbp), %rdi
	movq	%rax, %rdx
	call	offset_address
	movq	%rax, -8312(%rbp)
	call	gen_label_rtx
	xorl	%r9d, %r9d
	movq	%rax, -8208(%rbp)
	movq	const_int_rtx+512(%rip), %rsi
	movq	%rbx, %rdi
	movzbl	2(%rbx), %r8d
	movl	$107, %edx
	xorl	%ecx, %ecx
	movq	%rax, (%rsp)
	call	emit_cmp_and_jump_insns
.L17279:
	cmpq	const_int_rtx+512(%rip), %rbx
	je	.L17280
	movq	-8312(%rbp), %rdx
	cmpw	$66, (%rdx)
	movq	%rdx, -8224(%rbp)
	je	.L26788
	movq	-8312(%rbp), %rax
	movzbl	2(%rax), %edi
	call	get_mode_alignment
.L24847:
	movl	%eax, -8212(%rbp)
.L17282:
	movq	-8312(%rbp), %rsi
	movzbl	2(%rsi), %eax
	cmpb	$51, %al
	je	.L17285
	cmpw	$54, (%rbx)
	je	.L26789
.L17285:
	movq	-8312(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L17287
	cmpl	$66, %eax
	je	.L26790
.L17291:
	cmpl	$75, %eax
	je	.L17295
	cmpl	$78, %eax
	je	.L17295
.L17290:
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L17300
	cmpl	$66, %eax
	je	.L26791
.L17304:
	cmpl	$75, %eax
	je	.L17308
	cmpl	$78, %eax
	je	.L17308
.L17303:
	cmpw	$54, (%rbx)
	je	.L26792
.L17313:
	shrl	$3, -8212(%rbp)
	xorl	%edi, %edi
	mov	-8212(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r14d
	movq	%rax, -4448(%rbp)
	testl	%r14d, %r14d
	je	.L23831
.L17407:
	movslq	%r14d,%rcx
	movl	clrstr_optab(,%rcx,4), %edx
	movq	%rcx, -4456(%rbp)
	cmpl	$1317, %edx
	je	.L17394
	cmpw	$54, (%rbx)
	je	.L26793
.L17398:
	testb	$2, target_flags+3(%rip)
	je	.L17399
	movq	-4456(%rbp), %rax
	cmpw	$63, mode_bitsize(%rax,%rax)
.L24850:
	jbe	.L17394
.L17397:
	movslq	%edx,%r15
	leaq	(%r15,%r15,4), %r11
	movq	%r15, -4464(%rbp)
	movq	insn_data+24(,%r11,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L17401
	movq	-8224(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L17394
.L17401:
	movq	48(%r15), %rax
	testq	%rax, %rax
	je	.L17402
	xorl	%esi, %esi
	movq	-4448(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L17394
.L17402:
	call	get_last_insn
	movl	$1, %edx
	movq	%rbx, %rsi
	movl	%r14d, %edi
	movq	%rax, -4472(%rbp)
	call	convert_to_mode
	movq	%rax, %r12
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L26794
.L17403:
	movq	-4464(%rbp), %rcx
	movq	-8224(%rbp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	-4448(%rbp), %rdx
	leaq	(%rcx,%rcx,4), %r8
	call	*insn_data+16(,%r8,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24851
	movq	-4472(%rbp), %rdi
	call	delete_insns_since
.L17394:
	movq	-4456(%rbp), %rdx
	movzbl	mode_wider_mode(%rdx), %r14d
	testl	%r14d, %r14d
	jne	.L17407
.L23831:
	testb	$2, target_flags+3(%rip)
	movq	-8224(%rbp), %r14
	setne	%r12b
	movq	8(%r14), %rsi
	movzbl	%r12b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	sizetype_tab(%rip), %rsi
	movq	%rax, %r14
	movzbl	61(%rsi), %r9d
	movq	%rbx, %rsi
	shrb	$1, %r9b
	movzbl	%r9b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.0(%rip)
	movq	%rax, %r15
	je	.L26795
.L17412:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	const_int_rtx+512(%rip), %rsi
	movq	integer_types+40(%rip), %rdi
	movq	%rax, %r12
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.0(%rip), %rcx
	movq	%rax, (%rbx)
	movq	(%r12), %r9
	movq	8(%rcx), %rdi
	movq	(%r9), %rdx
	movq	$0, (%rdx)
	call	build_pointer_type
	movq	fn.0(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	movq	%r12, %rcx
	movl	$53, %edi
	movq	fn.0(%rip), %r8
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%r8), %r15
	xorl	%r8d, %r8d
	movq	8(%r15), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	jne	.L26796
.L17280:
	cmpq	$0, -8208(%rbp)
	je	.L16855
	movq	-8208(%rbp), %rdi
	call	emit_label
	jmp	.L16855
.L26796:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
.L24851:
	call	emit_insn
	jmp	.L17280
.L26795:
	movl	$.LC7, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.0(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.0(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.0, %edi
	movq	%rax, fn.0(%rip)
	call	ggc_add_tree_root
	movq	fn.0(%rip), %r11
	xorl	%esi, %esi
	orb	$1, 49(%r11)
	movq	fn.0(%rip), %r10
	orb	$8, 18(%r10)
	movq	fn.0(%rip), %rdi
	orb	$64, 50(%rdi)
	movq	fn.0(%rip), %rbx
	orb	$2, 18(%rbx)
	movq	fn.0(%rip), %rdi
	call	make_decl_rtl
	movq	fn.0(%rip), %rdi
	call	assemble_external
	jmp	.L17412
.L26794:
	movq	%r12, %rdi
	movl	%r14d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L17403
	movq	%r12, %rsi
	movl	%r14d, %edi
	call	copy_to_mode_reg
	movq	%rax, %r12
	jmp	.L17403
.L17399:
	movq	-4456(%rbp), %r10
	cmpw	$31, mode_bitsize(%r10,%r10)
	jmp	.L24850
.L26793:
	movq	mode_mask_array(,%rcx,8), %r12
	shrq	$1, %r12
	cmpq	%r12, 8(%rbx)
	jbe	.L17397
	jmp	.L17398
.L26792:
	movq	8(%rbx), %r14
	xorl	%r15d, %r15d
	movl	$17, %esi
.L17326:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23820
.L17323:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L17323
.L23820:
	testl	%edi, %edi
	je	.L17316
	movslq	%edi,%r12
	movq	%r12, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L17325
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L17325
	movzbq	mode_size(%r12), %r10
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%r10
	addq	%rax, %r15
	movq	%rdx, %r14
.L17325:
	movzbq	mode_size(%r12), %rsi
	cmpq	$1, %rsi
	ja	.L17326
.L17316:
	testq	%r14, %r14
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L17329
	movq	ix86_cost(%rip), %r11
	mov	40(%r11), %r12d
	cmpq	%r12, %r15
	jae	.L17313
.L17330:
	movq	8(%rbx), %r9
	movq	-8224(%rbp), %r15
	leaq	-272(%rbp), %r12
	testb	$2, target_flags+3(%rip)
	movq	$clear_by_pieces_1, -232(%rbp)
	movq	$0, -224(%rbp)
	setne	%dl
	xorl	%esi, %esi
	movq	%r15, -272(%rbp)
	movq	%r9, -248(%rbp)
	movq	8(%r15), %r8
	movq	$0, -240(%rbp)
	movl	$0, -8236(%rbp)
	movzbl	%dl, %ecx 
	movq	%r8, -264(%rbp)
	movzwl	(%r8), %edx
	leaq	5(,%rcx,4), %r15
	leaq	16(%r12), %rcx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L17334
	cmpw	$99, %dx
	je	.L17334
	cmpw	$98, %dx
	je	.L17334
.L17333:
	movl	%esi, (%rcx)
	movl	$0, 20(%r12)
	leaq	56(%r12), %rdx
	movzwl	(%r8), %eax
	xorl	%ecx, %ecx
	cmpw	$96, %ax
	je	.L17336
	cmpw	$98, %ax
	je	.L17336
.L17335:
	movl	%ecx, (%rdx)
	movl	56(%r12), %eax
	testl	%eax, %eax
	je	.L17337
	movq	24(%r12), %rsi
	movq	%rsi, 32(%r12)
.L17337:
	movl	16(%r12), %edi
	testl	%edi, %edi
	jne	.L17338
	movq	24(%r12), %r14
	movq	$0, -8232(%rbp)
	movl	$17, %esi
.L17351:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23823
.L17348:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %r11
	cmpq	%rsi, %r11
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L17348
.L23823:
	testl	%edi, %edi
	je	.L17341
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L17350
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L17350
	movzbq	mode_size(%rbx), %rsi
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, -8232(%rbp)
	movq	%rdx, %r14
.L17350:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L17351
.L17341:
	testq	%r14, %r14
	jne	.L25529
	cmpq	$2, -8232(%rbp)
	jbe	.L17338
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23825
.L17359:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%r15, %rdx
	cmovae	-8236(%rbp), %ecx
	movl	%ecx, -8236(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L17359
.L23825:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L17338
	movzwl	(%r8), %edx
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L17363
	cmpw	$54, %dx
	je	.L17363
	cmpw	$55, %dx
	je	.L17363
	cmpw	$58, %dx
	je	.L17363
	cmpw	$134, %dx
	je	.L17363
	cmpw	$56, %dx
	je	.L17363
	cmpw	$140, %dx
	je	.L17363
.L17338:
	cmpq	$1, %r15
	jbe	.L17366
.L17387:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23828
.L17373:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %r11
	cmpq	%r15, %r11
	cmovae	-8236(%rbp), %ecx
	movl	%ecx, -8236(%rbp)
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L17373
.L23828:
	movl	-8236(%rbp), %r15d
	testl	%r15d, %r15d
	je	.L17366
	movslq	-8236(%rbp),%r15
	movq	%r15, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	movl	8(%rcx), %ebx
	cmpl	$1317, %ebx
	je	.L17375
	movl	-8236(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	jb	.L17375
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rsi
	leaq	(%rsi,%rsi,4), %r9
	cmpq	%rdx, 24(%r12)
	movq	insn_data+16(,%r9,8), %r14
	movq	%r14, -4440(%rbp)
	movq	%rdx, %r14
	jb	.L17375
	movl	56(%r12), %ecx
.L17385:
	testl	%ecx, %ecx
	je	.L17379
	subq	%rdx, 32(%r12)
.L17379:
	movl	16(%r12), %ebx
	testl	%ebx, %ebx
	je	.L17380
	movq	(%r12), %rdi
	movl	-8236(%rbp), %esi
	movl	$1, %r8d
	movq	8(%r12), %rdx
	movq	32(%r12), %rcx
	call	adjust_automodify_address_1
.L24849:
	movl	-8236(%rbp), %edx
	movq	%rax, %rbx
	movq	48(%r12), %rdi
	movq	32(%r12), %rsi
	call	*40(%r12)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	*-4440(%rbp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L17384
	addq	%r14, 32(%r12)
.L17384:
	movq	24(%r12), %rdi
	movq	%r14, %rdx
	subq	%r14, %rdi
	cmpq	%r14, %rdi
	movq	%rdi, 24(%r12)
	jae	.L17385
.L17375:
	movzbq	mode_size(%r15), %r15
	cmpq	$1, %r15
	ja	.L17387
.L17366:
	cmpq	$0, 24(%r12)
	je	.L17280
	jmp	.L25451
.L17380:
	movq	(%r12), %rdi
	movl	-8236(%rbp), %esi
	movl	$1, %ecx
	movq	32(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24849
.L17363:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, 8(%r12)
	jmp	.L17338
.L17336:
	movl	$1, %ecx
	jmp	.L17335
.L17334:
	movl	$1, %esi
	jmp	.L17333
.L17329:
	cmpq	$2, %r15
	ja	.L17313
	jmp	.L17330
.L17308:
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbx), %rdi
	movq	%rax, %r14
	call	protect_from_queue
	cmpq	8(%rbx), %r14
	movq	%rax, %r12
	je	.L26797
.L17310:
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r14, 8(%rax)
	movq	%r12, 16(%rax)
	jmp	.L17303
.L26797:
	cmpq	16(%rbx), %rax
	jne	.L17310
	jmp	.L17303
.L26791:
	cmpb	$51, 2(%rbx)
	je	.L17301
	movq	8(%rbx), %r14
	cmpw	$71, (%r14)
	je	.L26798
.L17301:
	cmpl	$66, %eax
	jne	.L17304
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%rbx), %rax
	movq	%rax, %r12
	je	.L17303
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r12, 8(%rax)
	jmp	.L17303
.L26798:
	movq	8(%r14), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r14)
	movq	%rax, %r12
	je	.L17302
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L17303
.L17302:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24848:
	movq	%rax, %rbx
	jmp	.L17303
.L17300:
	cmpq	$0, 16(%rbx)
	je	.L26799
	movq	24(%rbx), %rax
	testq	%rax, %rax
	jne	.L24848
	movq	8(%rbx), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%rbx), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	16(%rbx), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbx), %rbx
	jmp	.L17303
.L26799:
	movq	8(%rbx), %rdi
	call	copy_to_reg
	jmp	.L24848
.L17295:
	movq	-8312(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-8312(%rbp), %r11
	movq	%rax, %r14
	movq	16(%r11), %rdi
	call	protect_from_queue
	movq	-8312(%rbp), %rdx
	movq	%rax, %r12
	cmpq	8(%rdx), %r14
	je	.L26800
.L17297:
	movq	-8312(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8224(%rbp)
	movq	%r14, 8(%rax)
	movq	-8224(%rbp), %rsi
	movq	%r12, 16(%rsi)
	jmp	.L17290
.L26800:
	cmpq	16(%rdx), %rax
	jne	.L17297
	jmp	.L17290
.L26790:
	jne	.L17291
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-8312(%rbp), %rcx
	movq	%rax, %r12
	cmpq	8(%rcx), %rax
	je	.L17290
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -8224(%rbp)
	movq	%r12, 8(%rax)
	jmp	.L17290
.L17287:
	movq	-8312(%rbp), %rsi
	cmpq	$0, 16(%rsi)
	je	.L26801
	movq	-8312(%rbp), %r9
	movq	24(%r9), %r15
	testq	%r15, %r15
	movq	%r15, -8224(%rbp)
	jne	.L17290
	movq	-8312(%rbp), %rax
	movq	8(%rax), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	-8312(%rbp), %r10
	movq	%rax, %rdi
	movq	%rax, 24(%r10)
	movq	-8312(%rbp), %r12
	movq	8(%r12), %rsi
	call	gen_move_insn
	movq	-8312(%rbp), %r14
	movq	%rax, %rdi
	movq	16(%r14), %rsi
	call	emit_insn_before
	movq	-8312(%rbp), %r8
	movq	24(%r8), %rdx
	movq	%rdx, -8224(%rbp)
	jmp	.L17290
.L26801:
	movq	8(%rsi), %rdi
	call	copy_to_reg
	movq	%rax, -8224(%rbp)
	jmp	.L17290
.L26789:
	movzbl	%al, %edx 
	movzbl	mode_size(%rdx), %edi
	cmpl	8(%rbx), %edi
	jne	.L17285
	movq	%rsi, %rdi
	movq	const_tiny_rtx(,%rdx,8), %rsi
	call	emit_move_insn
	jmp	.L17280
.L26788:
	movq	16(%rdx), %rax
	movl	$8, -8212(%rbp)
	testq	%rax, %rax
	je	.L17282
	movl	32(%rax), %eax
	jmp	.L24847
.L26787:
	movq	8(%rbx), %rsi
	movq	-8120(%rbp), %rdi
	negq	%rsi
	call	plus_constant_wide
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-8152(%rbp), %r14
	movq	-8312(%rbp), %rdi
	movl	$51, %esi
	movq	%rax, %rbx
	movq	8(%r14), %rdx
	call	adjust_address_1
	movq	%rax, -8312(%rbp)
	jmp	.L17279
.L26786:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L17265
.L26785:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %rsi
	orb	$1, 49(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %rcx
	orb	$8, 18(%rcx)
	movq	fn.1(%rip), %r11
	orb	$64, 50(%r11)
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L17276
.L24508:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L17265
.L26784:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L17263
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L17263
.L26783:
	movq	-8168(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L17253
	jmp	.L17261
.L17258:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L24846
.L26782:
	movq	mode_mask_array(,%r15,8), %r11
	shrq	$1, %r11
	cmpq	%r11, 8(%rsi)
	jbe	.L17256
	jmp	.L17257
.L26781:
	movq	8(%rcx), %r12
	xorl	%r14d, %r14d
	movl	$17, %esi
.L17147:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23806
.L17144:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %r9
	cmpq	%rsi, %r9
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L17144
.L23806:
	testl	%edi, %edi
	je	.L17137
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L17146
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L17146
	movzbq	mode_size(%rbx), %r8
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r8
	addq	%rax, %r14
	movq	%rdx, %r12
.L17146:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L17147
.L17137:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L17150
	movq	ix86_cost(%rip), %rdx
	mov	40(%rdx), %r10d
	cmpq	%r10, %r14
	jae	.L17134
.L17151:
	movq	-8176(%rbp), %r8
	movq	-8168(%rbp), %rsi
	movq	-8160(%rbp), %rdi
	movq	-8160(%rbp), %r9
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r14b
	movq	8(%rsi), %r8
	movq	$0, -1496(%rbp)
	movl	$0, -8188(%rbp)
	movq	%r8, -1520(%rbp)
	movzbl	%r14b, %ecx
	movq	8(%rdi), %rbx
	movq	%r9, -1552(%rbp)
	leal	5(,%rcx,4), %r14d
	xorl	%ecx, %ecx
	movq	%rbx, -8184(%rbp)
	movq	-8184(%rbp), %r11
	movzwl	(%r11), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L17156
	cmpw	$99, %dx
	je	.L17156
	cmpw	$98, %dx
	je	.L17156
.L17155:
	movq	-8184(%rbp), %r10
	movl	%ecx, -1536(%rbp)
	xorl	%edx, %edx
	movzwl	(%r10), %eax
	cmpw	$96, %ax
	je	.L17158
	cmpw	$98, %ax
	je	.L17158
.L17157:
	movl	%edx, -1488(%rbp)
	movq	-8168(%rbp), %rax
	xorl	%ecx, %ecx
	movq	-8184(%rbp), %rdx
	movq	%rax, -1528(%rbp)
	movq	%rdx, -1544(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L17161
	cmpw	$99, %dx
	je	.L17161
	cmpw	$98, %dx
	je	.L17161
.L17160:
	movl	-1488(%rbp), %r11d
	movl	%ecx, -1512(%rbp)
	movl	$0, -1508(%rbp)
	movl	$0, -1532(%rbp)
	testl	%r11d, %r11d
	je	.L17162
	movq	%r12, -1496(%rbp)
.L17162:
	movl	-1512(%rbp), %r9d
	movq	%r12, -1504(%rbp)
	testl	%r9d, %r9d
	je	.L17164
	movl	-1536(%rbp), %ebx
	testl	%ebx, %ebx
	jne	.L17163
.L17164:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L17177:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23809
.L17174:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L17174
.L23809:
	testl	%edi, %edi
	je	.L17167
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L17176
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L17176
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L17176:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L17177
.L17167:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L17163
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23811
.L17185:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %r9d
	cmpl	%r14d, %r9d
	cmovae	-8188(%rbp), %ecx
	movl	%ecx, -8188(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L17185
.L23811:
	movl	-1512(%rbp), %eax
	testl	%eax, %eax
	jne	.L17191
	movzwl	(%r8), %edx
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L17189
	cmpw	$54, %dx
	je	.L17189
	cmpw	$55, %dx
	je	.L17189
	cmpw	$58, %dx
	je	.L17189
	cmpw	$134, %dx
	je	.L17189
	cmpw	$56, %dx
	je	.L17189
	cmpw	$140, %dx
	je	.L17189
.L17191:
	movl	-1536(%rbp), %eax
	testl	%eax, %eax
	jne	.L17163
	movq	-8184(%rbp), %r10
	movzwl	(%r10), %edx
	leal	-67(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L17193
	cmpw	$54, %dx
	je	.L17193
	cmpw	$55, %dx
	je	.L17193
	cmpw	$58, %dx
	je	.L17193
	cmpw	$134, %dx
	je	.L17193
	cmpw	$56, %dx
	je	.L17193
	cmpw	$140, %dx
	je	.L17193
.L17163:
	cmpl	$1, %r14d
	jbe	.L17196
.L17247:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23814
.L17203:
	movslq	%ecx,%rdi
	movzbl	mode_size(%rdi), %edx
	cmpl	%r14d, %edx
	cmovae	-8188(%rbp), %ecx
	movl	%ecx, -8188(%rbp)
	movzbl	mode_wider_mode(%rdi), %ecx
	testl	%ecx, %ecx
	jne	.L17203
.L23814:
	movl	-8188(%rbp), %eax
	testl	%eax, %eax
	je	.L17196
	movslq	-8188(%rbp),%r15
	movq	%r15, %r14
	salq	$4, %r14
	addq	optab_table+240(%rip), %r14
	movl	8(%r14), %ebx
	cmpl	$1317, %ebx
	je	.L17205
	movl	-8188(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L17205
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rsi
	movq	$0, -8200(%rbp)
	leaq	(%rsi,%rsi,4), %r11
	cmpq	%rdx, -1504(%rbp)
	movq	insn_data+16(,%r11,8), %r12
	movq	%rdx, -6088(%rbp)
	movq	%r12, -4408(%rbp)
	leaq	-1552(%rbp), %r12
	jb	.L17205
	movl	-1488(%rbp), %ecx
.L17245:
	testl	%ecx, %ecx
	je	.L17209
	subq	%rdx, 56(%r12)
.L17209:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L17210
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L17211
	movl	-8188(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24842:
	movq	%rax, -8200(%rbp)
.L17210:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L17213
	movq	24(%r12), %rdi
	movl	-8188(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24843:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L26802
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L17219
	movzbl	mode_size(%r15), %r9d
	leal	7(%r9), %edx
	andl	$-8, %edx
.L17220:
	movq	cfun(%rip), %r10
	andl	$33554432, %esi
	movq	16(%r10), %r8
	leaq	8(%r8), %rdi
	movl	8(%r8), %ecx
	je	.L17221
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24844:
	leal	(%rax,%rcx), %r11d
	movl	%r11d, (%rdi)
	movq	%r15, %rdi
	salq	$4, %rdi
	addq	optab_table+384(%rip), %rdi
	movl	8(%rdi), %eax
	cmpl	$1317, %eax
	je	.L17223
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rcx
	movq	insn_data+24(,%rcx,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L17224
	movq	%r14, %rdi
	movl	-8188(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L26803
.L17224:
	leaq	(%rbx,%rbx,4), %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%rsi,8)
.L24845:
	movq	%rax, %rdi
	call	emit_insn
.L17243:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L17244
	movq	-6088(%rbp), %r14
	addq	%r14, 56(%r12)
.L17244:
	movq	48(%r12), %rdi
	movq	-6088(%rbp), %rdx
	subq	-6088(%rbp), %rdi
	cmpq	%rdx, %rdi
	movq	%rdi, 48(%r12)
	jae	.L17245
.L17205:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L17247
.L17196:
	cmpq	$0, -1504(%rbp)
	je	.L17265
	jmp	.L25518
.L26803:
	movl	-8188(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L17224
.L17223:
	movzbl	mode_size(%r15), %r9d
	cmpl	%edx, %r9d
	je	.L26804
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r8b
	movzbl	%r8b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L17231:
	movl	-8188(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%r10d, %r10d
	testq	%r10, %r10
	movq	%rax, %rbx
	je	.L17240
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L26805
.L17240:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L17243
.L26805:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L17240
.L26804:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L17231
.L17221:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24844
.L17219:
	movzbl	mode_size(%r15), %ebx
	leal	1(%rbx), %edx
	andl	$-2, %edx
	jmp	.L17220
.L26802:
	movq	%rax, %rsi
	movq	-8200(%rbp), %rdi
	xorl	%eax, %eax
	call	*-4408(%rbp)
	jmp	.L24845
.L17213:
	movq	24(%r12), %rdi
	movl	-8188(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24843
.L17211:
	movl	-8188(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24842
.L17193:
	movq	-8184(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -1544(%rbp)
	jmp	.L17163
.L17189:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -1520(%rbp)
	jmp	.L17191
.L17161:
	movl	$1, %ecx
	jmp	.L17160
.L17158:
	movl	$1, %edx
	jmp	.L17157
.L17156:
	movl	$1, %ecx
	jmp	.L17155
.L17150:
	cmpq	$2, %r14
	ja	.L17134
	jmp	.L17151
.L17126:
	movq	-8152(%rbp), %rbx
	xorl	%esi, %esi
	movq	8(%rbx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-8152(%rbp), %rcx
	movq	%rax, %r12
	movq	16(%rcx), %rdi
	call	protect_from_queue
	movq	-8152(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26806
.L17128:
	movq	-8152(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8176(%rbp)
	movq	%r12, 8(%rax)
	movq	-8176(%rbp), %r14
	movq	%rbx, 16(%r14)
	jmp	.L17121
.L26806:
	cmpq	16(%rcx), %rax
	jne	.L17128
	jmp	.L17121
.L26780:
	cmpb	$51, 2(%rdx)
	je	.L17119
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26807
.L17119:
	cmpl	$66, %eax
	jne	.L17122
	movq	-8152(%rbp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	movq	-8152(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L17121
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -8176(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L17121
.L26807:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L17120
	movq	-8152(%rbp), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -8176(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L17121
.L17120:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24841:
	movq	%rax, -8176(%rbp)
	jmp	.L17121
.L17118:
	movq	-8152(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26808
	movq	-8152(%rbp), %rsi
	movq	24(%rsi), %rdi
	testq	%rdi, %rdi
	movq	%rdi, -8176(%rbp)
	jne	.L17121
	movq	-8152(%rbp), %r10
	movq	8(%r10), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	-8152(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r9
	movq	%r9, -8176(%rbp)
	jmp	.L17121
.L26808:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24841
.L17113:
	movq	-8304(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-8304(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-8304(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26809
.L17115:
	movq	-8304(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8168(%rbp)
	movq	%r12, 8(%rax)
	movq	-8168(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L17108
.L26809:
	cmpq	16(%rcx), %rax
	jne	.L17115
	jmp	.L17108
.L26779:
	cmpb	$51, 2(%rdx)
	je	.L17106
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26810
.L17106:
	cmpl	$66, %eax
	jne	.L17109
	movq	-8304(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	movq	-8304(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L17108
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -8168(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L17108
.L26810:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L17107
	movq	-8304(%rbp), %rax
	movzbl	2(%rax), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -8168(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L17108
.L17107:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24840:
	movq	%rax, -8168(%rbp)
	jmp	.L17108
.L17105:
	movq	-8304(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26811
	movq	-8304(%rbp), %r9
	movq	24(%r9), %rsi
	testq	%rsi, %rsi
	movq	%rsi, -8168(%rbp)
	jne	.L17108
	movq	-8304(%rbp), %rdx
	movq	8(%rdx), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	-8304(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r8
	movq	%r8, -8168(%rbp)
	jmp	.L17108
.L26811:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24840
.L17100:
	movq	-8312(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-8312(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L26812
.L17102:
	movq	-8312(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8160(%rbp)
	movq	%r12, 8(%rax)
	movq	-8160(%rbp), %rsi
	movq	%rbx, 16(%rsi)
	jmp	.L17095
.L26812:
	cmpq	16(%rsi), %rax
	jne	.L17102
	jmp	.L17095
.L26778:
	jne	.L17096
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-8312(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L17095
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -8160(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L17095
.L17092:
	testq	%rsi, %rsi
	je	.L26813
	movq	-8312(%rbp), %r10
	movq	24(%r10), %r8
	testq	%r8, %r8
	movq	%r8, -8160(%rbp)
	jne	.L17095
	movq	-8312(%rbp), %r12
	movq	8(%r12), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdx
	movq	%rdx, -8160(%rbp)
	jmp	.L17095
.L26813:
	movq	-8312(%rbp), %r9
	movq	8(%r9), %rdi
	call	copy_to_reg
	movq	%rax, -8160(%rbp)
	jmp	.L17095
.L17085:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L17081
	movl	32(%rsi), %r15d
	jmp	.L17081
.L17084:
	cmpl	$7, %edx
	ja	.L17080
	jmp	.L17085
.L26777:
	movq	-8120(%rbp), %rdi
	movslq	32(%r14),%rcx
	cmpq	%rcx, 8(%rdi)
	jge	.L16880
	movq	-8312(%rbp), %rdx
	movq	-8304(%rbp), %r10
	movq	%rdx, -8104(%rbp)
	movq	%r10, -8112(%rbp)
	movq	16(%rdx), %rax
	movl	$8, %edx
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L16884
	movl	32(%rax), %edx
.L16884:
	movq	-8304(%rbp), %rbx
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L16885
	cmpl	32(%rax), %edx
	jb	.L16886
.L16881:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L16882
	movl	32(%rcx), %r15d
.L16882:
	movq	-8312(%rbp), %r12
	cmpb	$51, 2(%r12)
	jne	.L25547
	movq	-8304(%rbp), %r11
	cmpb	$51, 2(%r11)
	jne	.L25546
	movq	-8312(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L16893
	cmpl	$66, %eax
	je	.L26814
.L16897:
	cmpl	$75, %eax
	je	.L16901
	cmpl	$78, %eax
	je	.L16901
.L16896:
	movq	-8304(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L16906
	cmpl	$66, %eax
	je	.L26815
.L16910:
	cmpl	$75, %eax
	je	.L16914
	cmpl	$78, %eax
	je	.L16914
.L16909:
	movq	-8120(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L16919
	cmpl	$66, %eax
	je	.L26816
.L16923:
	cmpl	$75, %eax
	je	.L16927
	cmpl	$78, %eax
	je	.L16927
.L16922:
	movq	-8104(%rbp), %r9
	cmpw	$66, (%r9)
	jne	.L25545
	movq	-8112(%rbp), %r10
	cmpw	$66, (%r10)
	jne	.L25544
	cmpq	$0, -8120(%rbp)
	je	.L25543
	movq	-8120(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L26817
.L16935:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -4376(%rbp)
	testl	%r12d, %r12d
	je	.L23803
.L17068:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L17054
	movq	-8120(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L26818
.L17058:
	testb	$2, target_flags+3(%rip)
	je	.L17059
	cmpw	$63, mode_bitsize(%r15,%r15)
.L24839:
	jbe	.L17054
.L17057:
	movslq	%edx,%r10
	leaq	(%r10,%r10,4), %r8
	movq	%r10, -4384(%rbp)
	movq	insn_data+24(,%r8,8), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L17061
	movq	-8104(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L17054
.L17061:
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L26819
.L17062:
	movq	72(%r14), %rax
	testq	%rax, %rax
	je	.L17063
	xorl	%esi, %esi
	movq	-4376(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L17054
.L17063:
	call	get_last_insn
	movl	$1, %edx
	movq	-8120(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -4392(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r14), %rax
	testq	%rax, %rax
	jne	.L26820
.L17064:
	movq	-4384(%rbp), %rdx
	movq	-8104(%rbp), %rdi
	xorl	%eax, %eax
	movq	-8112(%rbp), %rsi
	movq	-4376(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24510
	movq	-4392(%rbp), %rdi
	call	delete_insns_since
.L17054:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L17068
.L23803:
	testb	$2, target_flags+3(%rip)
	movq	-8104(%rbp), %rcx
	movl	$0, volatile_ok(%rip)
	setne	%r14b
	movq	8(%rcx), %rsi
	movzbl	%r14b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%bl
	movq	%rax, %r14
	movq	-8112(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%bl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-8120(%rbp), %rsi
	movq	sizetype_tab(%rip), %r11
	movq	%rax, %rbx
	movzbl	61(%r11), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L26821
.L17077:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %rbx
	movq	8(%rdx), %rdi
	movq	(%rbx), %r11
	movq	$0, (%r11)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r15
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r15), %r10
	movq	8(%r10), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	je	.L16855
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	jmp	.L24862
.L26821:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r8
	orb	$1, 49(%r8)
	movq	fn.1(%rip), %r9
	orb	$8, 18(%r9)
	movq	fn.1(%rip), %rsi
	orb	$64, 50(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L17077
.L26820:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L17064
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L17064
.L26819:
	movq	-8112(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L17054
	jmp	.L17062
.L17059:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L24839
.L26818:
	movq	mode_mask_array(,%r15,8), %r9
	shrq	$1, %r9
	cmpq	%r9, 8(%rsi)
	jbe	.L17057
	jmp	.L17058
.L26817:
	movq	8(%rcx), %r12
	xorl	%r14d, %r14d
	movl	$17, %esi
.L16948:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23792
.L16945:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L16945
.L23792:
	testl	%edi, %edi
	je	.L16938
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L16947
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L16947
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r14
	movq	%rdx, %r12
.L16947:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L16948
.L16938:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L16951
	movq	ix86_cost(%rip), %r9
	mov	40(%r9), %ebx
	cmpq	%rbx, %r14
	jae	.L16935
.L16952:
	movq	-8120(%rbp), %r8
	movq	-8112(%rbp), %rdi
	movq	-8104(%rbp), %rdx
	movq	-8104(%rbp), %r10
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r14b
	movq	8(%rdi), %r8
	movq	$0, -1416(%rbp)
	movl	$0, -8132(%rbp)
	movq	%r8, -1440(%rbp)
	movzbl	%r14b, %ecx
	movq	8(%rdx), %r11
	movq	%r10, -1472(%rbp)
	leal	5(,%rcx,4), %r14d
	xorl	%ecx, %ecx
	movq	%r11, -8128(%rbp)
	movq	-8128(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L16957
	cmpw	$99, %dx
	je	.L16957
	cmpw	$98, %dx
	je	.L16957
.L16956:
	movq	-8128(%rbp), %rsi
	movl	%ecx, -1456(%rbp)
	xorl	%edx, %edx
	movzwl	(%rsi), %eax
	cmpw	$96, %ax
	je	.L16959
	cmpw	$98, %ax
	je	.L16959
.L16958:
	movq	-8128(%rbp), %r15
	movq	-8112(%rbp), %r9
	movl	%edx, -1408(%rbp)
	xorl	%ecx, %ecx
	movq	%r15, -1464(%rbp)
	movq	%r9, -1448(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L16962
	cmpw	$99, %dx
	je	.L16962
	cmpw	$98, %dx
	je	.L16962
.L16961:
	movl	-1408(%rbp), %eax
	movl	%ecx, -1432(%rbp)
	movl	$0, -1428(%rbp)
	movl	$0, -1452(%rbp)
	testl	%eax, %eax
	je	.L16963
	movq	%r12, -1416(%rbp)
.L16963:
	movl	-1432(%rbp), %eax
	movq	%r12, -1424(%rbp)
	testl	%eax, %eax
	je	.L16965
	movl	-1456(%rbp), %eax
	testl	%eax, %eax
	jne	.L16964
.L16965:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L16978:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23795
.L16975:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %r11
	cmpq	%rsi, %r11
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L16975
.L23795:
	testl	%edi, %edi
	je	.L16968
	movslq	%edi,%rbx
	movq	%rbx, %rdx
	salq	$4, %rdx
	addq	optab_table+240(%rip), %rdx
	cmpl	$1317, 8(%rdx)
	je	.L16977
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L16977
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L16977:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L16978
.L16968:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L16964
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23797
.L16986:
	movslq	%ecx,%rbx
	movzbl	mode_size(%rbx), %r9d
	cmpl	%r14d, %r9d
	cmovae	-8132(%rbp), %ecx
	movl	%ecx, -8132(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L16986
.L23797:
	movl	-1432(%rbp), %eax
	testl	%eax, %eax
	jne	.L16992
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L16990
	cmpw	$54, %dx
	je	.L16990
	cmpw	$55, %dx
	je	.L16990
	cmpw	$58, %dx
	je	.L16990
	cmpw	$134, %dx
	je	.L16990
	cmpw	$56, %dx
	je	.L16990
	cmpw	$140, %dx
	je	.L16990
.L16992:
	movl	-1456(%rbp), %r8d
	testl	%r8d, %r8d
	jne	.L16964
	movq	-8128(%rbp), %r11
	movzwl	(%r11), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L16994
	cmpw	$54, %dx
	je	.L16994
	cmpw	$55, %dx
	je	.L16994
	cmpw	$58, %dx
	je	.L16994
	cmpw	$134, %dx
	je	.L16994
	cmpw	$56, %dx
	je	.L16994
	cmpw	$140, %dx
	je	.L16994
.L16964:
	cmpl	$1, %r14d
	jbe	.L16997
.L17048:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23800
.L17004:
	movslq	%ecx,%r12
	movzbl	mode_size(%r12), %edx
	cmpl	%r14d, %edx
	cmovae	-8132(%rbp), %ecx
	movl	%ecx, -8132(%rbp)
	movzbl	mode_wider_mode(%r12), %ecx
	testl	%ecx, %ecx
	jne	.L17004
.L23800:
	movl	-8132(%rbp), %r14d
	testl	%r14d, %r14d
	je	.L16997
	movslq	-8132(%rbp),%r15
	movq	%r15, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	movl	8(%rcx), %ebx
	cmpl	$1317, %ebx
	je	.L17006
	movl	-8132(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L17006
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%r9
	leaq	-1472(%rbp), %r12
	leaq	(%r9,%r9,4), %rbx
	cmpq	%rdx, -1424(%rbp)
	movq	$0, -8144(%rbp)
	movq	insn_data+16(,%rbx,8), %rsi
	movq	%rdx, -6080(%rbp)
	movq	%rsi, -4368(%rbp)
	jb	.L17006
	movl	-1408(%rbp), %ecx
.L17046:
	testl	%ecx, %ecx
	je	.L17010
	subq	%rdx, 56(%r12)
.L17010:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L17011
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L17012
	movl	-8132(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24835:
	movq	%rax, -8144(%rbp)
.L17011:
	movl	40(%r12), %r8d
	testl	%r8d, %r8d
	je	.L17014
	movq	24(%r12), %rdi
	movl	-8132(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24836:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L26822
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L17020
	movzbl	mode_size(%r15), %r10d
	leal	7(%r10), %edx
	andl	$-8, %edx
.L17021:
	movq	cfun(%rip), %rcx
	andl	$33554432, %esi
	movq	16(%rcx), %rbx
	leaq	8(%rbx), %rdi
	movl	8(%rbx), %ecx
	je	.L17022
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24837:
	leal	(%rax,%rcx), %esi
	movl	%esi, (%rdi)
	movq	%r15, %rdi
	salq	$4, %rdi
	addq	optab_table+384(%rip), %rdi
	movl	8(%rdi), %eax
	cmpl	$1317, %eax
	je	.L17024
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %r9
	movq	insn_data+24(,%r9,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L17025
	movq	%r14, %rdi
	movl	-8132(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L26823
.L17025:
	leaq	(%rbx,%rbx,4), %r8
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r8,8)
.L24838:
	movq	%rax, %rdi
	call	emit_insn
.L17044:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L17045
	movq	-6080(%rbp), %r14
	addq	%r14, 56(%r12)
.L17045:
	movq	48(%r12), %rsi
	movq	-6080(%rbp), %rdx
	subq	-6080(%rbp), %rsi
	cmpq	%rdx, %rsi
	movq	%rsi, 48(%r12)
	jae	.L17046
.L17006:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L17048
.L16997:
	cmpq	$0, -1424(%rbp)
	jmp	.L25552
.L26823:
	movl	-8132(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L17025
.L17024:
	movzbl	mode_size(%r15), %r10d
	cmpl	%edx, %r10d
	je	.L26824
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r11b
	movzbl	%r11b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L17032:
	movl	-8132(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%ecx, %ecx
	testq	%rcx, %rcx
	movq	%rax, %rbx
	je	.L17041
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %edi
	testl	%edi, %edi
	jne	.L26825
.L17041:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L17044
.L26825:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L17041
.L26824:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L17032
.L17022:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24837
.L17020:
	movzbl	mode_size(%r15), %r11d
	leal	1(%r11), %edx
	andl	$-2, %edx
	jmp	.L17021
.L26822:
	movq	%rax, %rsi
	movq	-8144(%rbp), %rdi
	xorl	%eax, %eax
	call	*-4368(%rbp)
	jmp	.L24838
.L17014:
	movq	24(%r12), %rdi
	movl	-8132(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24836
.L17012:
	movl	-8132(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24835
.L16994:
	movq	-8128(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -1464(%rbp)
	jmp	.L16964
.L16990:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -1440(%rbp)
	jmp	.L16992
.L16962:
	movl	$1, %ecx
	jmp	.L16961
.L16959:
	movl	$1, %edx
	jmp	.L16958
.L16957:
	movl	$1, %ecx
	jmp	.L16956
.L16951:
	cmpq	$2, %r14
	ja	.L16935
	jmp	.L16952
.L16927:
	movq	-8120(%rbp), %rbx
	xorl	%esi, %esi
	movq	8(%rbx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-8120(%rbp), %r11
	movq	%rax, %r12
	movq	16(%r11), %rdi
	call	protect_from_queue
	movq	-8120(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26826
.L16929:
	movq	-8120(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8120(%rbp)
	movq	%r12, 8(%rax)
	movq	-8120(%rbp), %r14
	movq	%rbx, 16(%r14)
	jmp	.L16922
.L26826:
	cmpq	16(%rcx), %rax
	jne	.L16929
	jmp	.L16922
.L26816:
	cmpb	$51, 2(%rdx)
	je	.L16920
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26827
.L16920:
	cmpl	$66, %eax
	jne	.L16923
	movq	-8120(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	movq	-8120(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L16922
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -8120(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L16922
.L26827:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L16921
	movq	-8120(%rbp), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -8120(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L16922
.L16921:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24834:
	movq	%rax, -8120(%rbp)
	jmp	.L16922
.L16919:
	movq	-8120(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26828
	movq	-8120(%rbp), %rdi
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L24834
	movq	-8120(%rbp), %r8
	movq	8(%r8), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	-8120(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rax
	movq	%rax, -8120(%rbp)
	jmp	.L16922
.L26828:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24834
.L16914:
	movq	-8304(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-8304(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-8304(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26829
.L16916:
	movq	-8304(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8112(%rbp)
	movq	%r12, 8(%rax)
	movq	-8112(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L16909
.L26829:
	cmpq	16(%rcx), %rax
	jne	.L16916
	jmp	.L16909
.L26815:
	cmpb	$51, 2(%rdx)
	je	.L16907
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26830
.L16907:
	cmpl	$66, %eax
	jne	.L16910
	movq	-8304(%rbp), %r11
	xorl	%esi, %esi
	movq	8(%r11), %rdi
	call	protect_from_queue
	movq	-8304(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L16909
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -8112(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L16909
.L26830:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L16908
	movq	-8304(%rbp), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -8112(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L16909
.L16908:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24833:
	movq	%rax, -8112(%rbp)
	jmp	.L16909
.L16906:
	movq	-8304(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26831
	movq	-8304(%rbp), %rax
	movq	24(%rax), %rsi
	testq	%rsi, %rsi
	movq	%rsi, -8112(%rbp)
	jne	.L16909
	movq	-8304(%rbp), %rdx
	movq	8(%rdx), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	-8304(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r8
	movq	%r8, -8112(%rbp)
	jmp	.L16909
.L26831:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24833
.L16901:
	movq	-8312(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-8312(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L26832
.L16903:
	movq	-8312(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8104(%rbp)
	movq	%r12, 8(%rax)
	movq	-8104(%rbp), %rsi
	movq	%rbx, 16(%rsi)
	jmp	.L16896
.L26832:
	cmpq	16(%rsi), %rax
	jne	.L16903
	jmp	.L16896
.L26814:
	jne	.L16897
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-8312(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L16896
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -8104(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L16896
.L16893:
	testq	%rsi, %rsi
	je	.L26833
	movq	-8312(%rbp), %r9
	movq	24(%r9), %r8
	testq	%r8, %r8
	movq	%r8, -8104(%rbp)
	jne	.L16896
	movq	-8312(%rbp), %r12
	movq	8(%r12), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rcx
	movq	%rcx, -8104(%rbp)
	jmp	.L16896
.L26833:
	movq	-8312(%rbp), %rax
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rax, -8104(%rbp)
	jmp	.L16896
.L16886:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L16882
	movl	32(%rsi), %r15d
	jmp	.L16882
.L16885:
	cmpl	$7, %edx
	ja	.L16881
	jmp	.L16886
.L16870:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L26834
.L16872:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -8312(%rbp)
	movq	%r12, 8(%rax)
	movq	-8312(%rbp), %r15
	movq	%rbx, 16(%r15)
	jmp	.L16865
.L26834:
	cmpq	16(%r13), %rax
	jne	.L16872
	jmp	.L16865
.L26643:
	jne	.L16866
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L16865
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -8312(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L16865
.L16862:
	cmpq	$0, 16(%r13)
	je	.L26835
	movq	24(%r13), %r11
	testq	%r11, %r11
	movq	%r11, -8312(%rbp)
	jne	.L16865
	movq	8(%r13), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rax
	movq	%rax, -8312(%rbp)
	jmp	.L16865
.L26835:
	movq	8(%r13), %rdi
	call	copy_to_reg
	movq	%rax, -8312(%rbp)
	jmp	.L16865
.L26642:
	movq	144(%r14), %rax
	testq	%rax, %rax
	je	.L16857
	cmpq	%rax, %r13
	jne	.L16857
	jmp	.L16855
.L26641:
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L16855
	jmp	.L16856
.L16854:
	movq	-8304(%rbp), %rdx
	cmpb	$0, 2(%rdx)
	jne	.L16853
	cmpb	$0, 16(%r14)
	je	.L16853
	movq	8(%r14), %rdx
	movzbl	2(%r13), %edi
	movzbl	61(%rdx), %r10d
	shrb	$1, %r10b
	movzbl	%r10b, %esi
	cmpl	%esi, %edi
	je	.L16853
	movzbl	17(%rdx), %ecx
	movq	-8304(%rbp), %rdx
	shrb	$5, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, -8304(%rbp)
	jmp	.L16853
.L24372:
	movq	-8304(%rbp), %r8
	movzwl	(%r8), %edx
	jmp	.L16776
.L26640:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	%r14, %rdi
	movzbl	2(%r13), %edx
	movq	%rax, %rsi
	jmp	.L24832
.L16815:
	xorl	%ecx, %ecx
	testl	%ecx, %ecx
	je	.L24373
	movl	(%r13), %ecx
	movl	%ecx, %r10d
	andl	$134283263, %r10d
	cmpl	$66, %r10d
	je	.L26836
.L16831:
	andl	$268500991, %ecx
	cmpl	$268435519, %ecx
	je	.L26837
	movzbl	2(%r13), %edx
	xorl	%ecx, %ecx
	movq	%r14, %rdi
	movq	%r13, %rsi
	call	expand_expr
	cmpw	$61, (%r13)
	movq	%rax, -8304(%rbp)
	je	.L26838
.L16851:
	movl	(%r13), %eax
	andl	$134283263, %eax
	cmpl	$134217794, %eax
	je	.L24376
	movq	-8304(%rbp), %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L24377
	movq	-8304(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L16852
	cmpw	$54, %dx
	je	.L16852
	cmpw	$55, %dx
	je	.L16852
	cmpw	$58, %dx
	je	.L16852
	cmpw	$134, %dx
	je	.L16852
	cmpw	$56, %dx
	je	.L16852
	cmpw	$140, %dx
	je	.L16852
	xorl	%esi, %esi
	testl	%esi, %esi
	je	.L16776
.L16852:
	movl	$1, -8092(%rbp)
	jmp	.L16776
.L24376:
	movq	-8304(%rbp), %rcx
	movzwl	(%rcx), %edx
	jmp	.L16776
.L26838:
	cmpl	$52, 8(%r13)
	ja	.L16851
.L24375:
	movq	-8304(%rbp), %r9
	movzwl	(%r9), %edx
	jmp	.L16776
.L26837:
	xorl	%r15d, %r15d
	xorl	%edx, %edx
	testl	%r15d, %r15d
	jne	.L16837
	movq	8(%r14), %rsi
	movzbl	16(%rsi), %eax
	cmpb	$6, %al
	je	.L16838
	cmpb	$10, %al
	je	.L16838
	cmpb	$11, %al
	je	.L16838
	cmpb	$12, %al
	je	.L16838
.L16837:
	movq	%rdx, %rsi
	xorl	%ecx, %ecx
	movq	%r14, %rdi
	xorl	%edx, %edx
	call	expand_expr
	movzwl	(%rax), %edx
	movq	%rax, %rbx
	cmpw	$66, %dx
	je	.L26839
.L16840:
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L16843
	cmpw	$54, %dx
	je	.L16843
	cmpw	$55, %dx
	je	.L16843
	cmpw	$58, %dx
	je	.L16843
	cmpw	$134, %dx
	je	.L16843
	cmpw	$56, %dx
	je	.L16843
	cmpw	$140, %dx
	je	.L16843
.L16842:
	movzbl	3(%r13), %edx
	movq	8(%r13), %rdi
	movq	%rbx, %rsi
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L16775
	movzbl	2(%rbx), %edx
	movzbl	2(%r13), %eax
	cmpb	%al, %dl
	je	.L16775
	testb	%dl, %dl
	je	.L16845
	movq	%rbx, %rsi
	movzbl	%al, %edi
	call	gen_lowpart_SUBREG
	movzbl	3(%rax), %ebx
	orb	$16, %bl
	movb	%bl, 3(%rax)
	andb	$-5, %bl
	movzbl	3(%r13), %r10d
	andb	$4, %r10b
	orb	%r10b, %bl
	movb	%bl, 3(%rax)
	jmp	.L16775
.L16845:
	movq	8(%r13), %r15
	movzbl	3(%r13), %ecx
	movzbl	%al, %edi
	movq	%rbx, %rdx
	movzbl	2(%r15), %esi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	jmp	.L16775
.L16843:
	cmpb	$0, 2(%rbx)
	jne	.L16842
	movq	8(%r14), %rcx
	movzbl	2(%r13), %edi
	movzbl	61(%rcx), %edx
	movzbl	3(%r13), %ecx
	shrb	$1, %dl
	shrb	$2, %cl
	movzbl	%dl, %esi
	andl	$1, %ecx
	movq	%rbx, %rdx
	call	convert_modes
	movzbl	3(%r13), %ecx
	movzbl	2(%r13), %esi
	movq	8(%r13), %r14
	movq	%rax, %rdx
	movzbl	2(%r14), %edi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, %rbx
	jmp	.L16842
.L26839:
	xorl	%r8d, %r8d
	testl	%r8d, %r8d
	je	.L16840
	testb	$8, 3(%rax)
	jne	.L16841
	movq	8(%r13), %rdi
	movq	8(%rax), %rsi
	call	reg_mentioned_p
	testl	%eax, %eax
	je	.L24374
.L16841:
	movq	%rbx, %rdi
	call	copy_to_reg
	movq	%rax, %rbx
.L24374:
	movzwl	(%rbx), %edx
	jmp	.L16840
.L16838:
	cmpq	$0, 8(%rsi)
	jne	.L16837
	movzbl	3(%r13), %ecx
	movzbl	17(%rsi), %r11d
	movl	$1, %edi
	movl	%ecx, %r12d
	shrb	$5, %r11b
	shrb	$2, %r12b
	andl	$1, %r11d
	andl	%r12d, %edi
	cmpl	%edi, %r11d
	je	.L16839
	call	signed_or_unsigned_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	convert
	movzbl	3(%r13), %ecx
	movq	%rax, %r14
.L16839:
	movq	8(%r13), %rsi
	shrb	$2, %cl
	movzbl	2(%rsi), %edi
	movl	$1, %esi
	andl	%ecx, %esi
	call	type_for_mode
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	convert
	movq	8(%r13), %rdx
	movq	%rax, %r14
	jmp	.L16837
.L26836:
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L16831
	movzbl	%al, %edx
	xorl	%ecx, %ecx
	movq	%r14, %rdi
	movq	%r13, %rsi
	call	expand_expr
	movq	%rax, -8304(%rbp)
	movq	%rax, %rdx
	movzbl	2(%rax), %eax
	cmpb	$51, %al
	je	.L16832
	testb	%al, %al
	je	.L16832
	cmpq	%r13, %rdx
	je	.L16834
	movq	%rdx, %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L26840
.L16833:
	movq	-8304(%rbp), %rdi
	call	copy_to_reg
	movq	%rax, -8304(%rbp)
.L16832:
	movl	$1, -8092(%rbp)
	jmp	.L24375
.L26840:
	movq	-8304(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L16833
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L16833
.L16834:
	movl	$1, %r12d
	jmp	.L16833
.L24373:
	movl	(%r13), %ecx
	jmp	.L16831
.L16824:
	movl	$1, %ebx
	jmp	.L16818
.L16825:
	xorl	%ebx, %ebx
	jmp	.L16818
.L16822:
	movq	8(%r13), %rdi
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L16824
	movq	16(%r13), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L16818
	jmp	.L16824
.L26639:
	cmpb	$51, 2(%r13)
	jne	.L16777
	call	gen_label_rtx
	movq	%rax, %r15
	call	gen_label_rtx
	movq	cfun(%rip), %rbx
	movq	%rax, -4360(%rbp)
	movq	16(%rbx), %r11
	movq	40(%r11), %rbx
	testq	%rbx, %rbx
	je	.L23785
.L16783:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26841
	call	emit_insn
	movq	%rax, 16(%rbx)
.L16782:
	movq	cfun(%rip), %r9
	movq	40(%rbx), %rdi
	movq	16(%r9), %r8
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%r8)
	jne	.L16783
.L23785:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L16785
	cmpl	$66, %eax
	je	.L26842
.L16789:
	cmpl	$75, %eax
	je	.L16793
	cmpl	$78, %eax
	je	.L16793
.L16788:
	call	do_pending_stack_adjust
	movq	cfun(%rip), %rdx
	movq	%r15, %rsi
	movq	16(%rdx), %r12
	incl	4(%r12)
	movq	32(%r14), %rdi
	call	jumpifnot
	call	start_cleanup_deferral
	movq	40(%r14), %rdi
	movq	-8312(%rbp), %rsi
	xorl	%edx, %edx
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %rbx
	movq	16(%rbx), %r11
	movq	40(%r11), %rbx
	testq	%rbx, %rbx
	je	.L23787
.L16803:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26843
	call	emit_insn
	movq	%rax, 16(%rbx)
.L16802:
	movq	cfun(%rip), %r10
	movq	40(%rbx), %rdi
	movq	16(%r10), %rcx
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%rcx)
	jne	.L16803
.L23787:
	movq	-4360(%rbp), %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r15, %rdi
	call	emit_label
	call	start_cleanup_deferral
	movq	48(%r14), %rdi
	movq	-8312(%rbp), %rsi
	xorl	%edx, %edx
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %r15
	movq	16(%r15), %r14
	movq	40(%r14), %rbx
	testq	%rbx, %rbx
	je	.L23789
.L16810:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26844
	call	emit_insn
	movq	%rax, 16(%rbx)
.L16809:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %r12
	movq	16(%rdx), %r8
	testq	%r12, %r12
	movq	%r12, %rbx
	movq	%r12, 40(%r8)
	jne	.L16810
.L23789:
	movq	-4360(%rbp), %rdi
	call	emit_label
	movq	cfun(%rip), %r9
	movq	16(%r9), %rbx
	decl	4(%rbx)
	jmp	.L16775
.L26844:
	movq	8(%rdi), %r11
	movq	8(%r11), %rsi
	movq	%rsi, 16(%rbx)
	call	emit_insn
	jmp	.L16809
.L26843:
	movq	8(%rdi), %r9
	movq	8(%r9), %r8
	movq	%r8, 16(%rbx)
	call	emit_insn
	jmp	.L16802
.L16793:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L26845
.L16795:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -8312(%rbp)
	movq	%r12, 8(%rax)
	movq	-8312(%rbp), %rax
	movq	%rbx, 16(%rax)
	jmp	.L16788
.L26845:
	cmpq	16(%r13), %rax
	jne	.L16795
	jmp	.L16788
.L26842:
	jne	.L16789
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L16788
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -8312(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L16788
.L16785:
	cmpq	$0, 16(%r13)
	je	.L26846
	movq	24(%r13), %rcx
	testq	%rcx, %rcx
	movq	%rcx, -8312(%rbp)
	jne	.L16788
	movq	8(%r13), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r10
	movq	%r10, -8312(%rbp)
	jmp	.L16788
.L26846:
	movq	8(%r13), %rdi
	call	copy_to_reg
	movq	%rax, -8312(%rbp)
	jmp	.L16788
.L26841:
	movq	8(%rdi), %rdx
	movq	8(%rdx), %r12
	movq	%r12, 16(%rbx)
	call	emit_insn
	jmp	.L16782
.L26638:
	movq	32(%r14), %rdi
	movq	const_int_rtx+512(%rip), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	cfun(%rip), %rdx
	movq	16(%rdx), %r12
	movq	40(%r12), %rbx
	testq	%rbx, %rbx
	je	.L23783
.L16773:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26847
	call	emit_insn
	movq	%rax, 16(%rbx)
.L16772:
	movq	cfun(%rip), %rsi
	movq	40(%rbx), %rcx
	movq	16(%rsi), %r10
	testq	%rcx, %rcx
	movq	%rcx, %rbx
	movq	%rcx, 40(%r10)
	jne	.L16773
.L23783:
	movq	40(%r14), %rdi
	movq	%r13, %rsi
	xorl	%edx, %edx
	call	store_expr
	jmp	.L16775
.L26847:
	movq	8(%rdi), %r9
	movq	8(%r9), %r8
	movq	%r8, 16(%rbx)
	call	emit_insn
	jmp	.L16772
.L26637:
	cmpl	$52, 8(%r13)
	ja	.L16766
	movl	-2716(%rbp), %edi
	call	gen_reg_rtx
	movq	%rax, %r13
	jmp	.L16766
.L26636:
	cmpw	$66, (%r15)
	jne	.L16765
	xorl	%esi, %esi
	movq	%r15, %rdi
	movq	%r14, %rdx
	movl	$rtx_addr_varies_p, %ecx
	call	true_dependence
	testl	%eax, %eax
	jne	.L16690
	jmp	.L16765
.L26635:
	movq	8(%r15), %r15
	cmpw	$61, (%r15)
	jne	.L16762
	cmpl	$52, 8(%r15)
	ja	.L16762
.L24506:
	xorl	%r12d, %r12d
	jmp	.L16690
.L16742:
	movq	32(%rbx), %rsi
	movq	%r14, %rdi
.L24831:
	xorl	%edx, %edx
	call	safe_from_p
	movl	%eax, %r12d
	jmp	.L16690
.L16715:
	movq	32(%rbx), %rsi
	xorl	%edx, %edx
	movq	%r14, %rdi
	xorl	%r12d, %r12d
	call	safe_from_p
	testl	%eax, %eax
	je	.L16690
	movq	%r14, %rdi
	movq	40(%rbx), %rsi
.L25107:
	xorl	%edx, %edx
	call	safe_from_p
	testl	%eax, %eax
	je	.L16690
	jmp	.L16765
.L16718:
	movzbl	%dl, %eax
	subl	$41, %eax
	cmpl	$80, %eax
	ja	.L16719
	mov	%eax, %esi
	jmp	*.L16750(,%rsi,8)
	.section	.rodata
	.align 8
	.align 4
.L16750:
	.quad	.L16729
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16747
	.quad	.L16735
	.quad	.L23173
	.quad	.L16741
	.quad	.L16742
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16719
	.quad	.L16743
	.quad	.L16719
	.quad	.L16739
	.quad	.L16720
	.text
.L16720:
	movq	32(%rbx), %rdi
	call	staticp
	testl	%eax, %eax
	jne	.L16765
	testb	$4, 18(%rbx)
	jne	.L16765
	movq	32(%rbx), %rsi
	xorl	%edx, %edx
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L16765
	movq	32(%rbx), %rbx
	movzbq	16(%rbx), %r11
	cmpb	$100, tree_code_type(%r11)
	je	.L26848
.L16719:
	testq	%r15, %r15
	jne	.L24266
	movzbl	16(%rbx), %edi
	xorl	%r12d, %r12d
	call	first_rtl_op
	cmpl	%eax, %r12d
	movl	%eax, -4348(%rbp)
	jge	.L23781
.L16757:
	movslq	%r12d,%rdi
	movq	32(%rbx,%rdi,8), %rsi
	testq	%rsi, %rsi
	jne	.L26849
.L16754:
	incl	%r12d
	cmpl	-4348(%rbp), %r12d
	jl	.L16757
.L23781:
	cmpb	$-110, 16(%rbx)
	jbe	.L16699
	movq	%r14, %rdi
	movq	%rbx, %rsi
	xorl	%r12d, %r12d
	call	*lang_hooks+80(%rip)
	testl	%eax, %eax
	je	.L16690
	jmp	.L16699
.L26849:
	xorl	%edx, %edx
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L16754
	jmp	.L24506
.L26848:
	movq	144(%rbx), %rax
	testq	%rax, %rax
	je	.L24506
	cmpw	$66, (%rax)
	jne	.L24506
	movq	8(%rax), %r15
	jmp	.L16719
.L16729:
	cmpw	$66, (%r14)
	jne	.L16719
	movq	%rbx, %rdi
	call	get_alias_set
	xorl	%edi, %edi
	movq	%rax, %rsi
	movq	16(%r14), %rax
	testq	%rax, %rax
	je	.L16734
	movq	(%rax), %rdi
.L16734:
	call	alias_sets_conflict_p
	xorl	%r12d, %r12d
	testl	%eax, %eax
	jne	.L16690
	jmp	.L16719
.L16747:
	movq	%r14, %rdi
	movq	40(%rbx), %rsi
	jmp	.L24831
.L16735:
	movzwl	(%r14), %eax
	cmpw	$61, %ax
	je	.L26850
.L16738:
	cmpw	$66, %ax
	jne	.L16719
	jmp	.L24506
.L26850:
	cmpl	$52, 8(%r14)
	jbe	.L24506
	jmp	.L16738
.L16741:
	movq	48(%rbx), %r15
	jmp	.L16719
.L16743:
	movq	48(%rbx), %r15
	testq	%r15, %r15
	jne	.L24266
	movzbl	18(%rbx), %eax
	movl	$1, %r12d
	testb	$16, %al
	jne	.L16690
	movq	32(%rbx), %rsi
	orb	$16, %al
	xorl	%edx, %edx
	movb	%al, 18(%rbx)
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L16746
	andb	$-17, 18(%rbx)
	jmp	.L24506
.L16746:
	movq	save_expr_list.2(%rip), %rdx
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	tree_cons
	movq	%rax, save_expr_list.2(%rip)
	jmp	.L16765
.L16739:
	cmpq	$0, 32(%rbx)
	jne	.L24506
	movq	40(%rbx), %r15
	jmp	.L16719
.L16705:
	cmpb	$2, %dl
	je	.L26851
	testb	%dl, %dl
	sete	%bl
	movzbl	%bl, %r12d
	jmp	.L16690
.L26851:
	movq	32(%rbx), %rsi
	xorl	%r12d, %r12d
	testq	%rsi, %rsi
	jne	.L26852
.L16708:
	movq	(%rbx), %rsi
	movq	%r14, %rdi
	testq	%rsi, %rsi
	jne	.L25107
	jmp	.L16765
.L26852:
	xorl	%edx, %edx
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L16690
	jmp	.L16708
.L26634:
	xorl	%edx, %edx
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	$0, save_expr_list.2(%rip)
	call	safe_from_p
	movq	save_expr_list.2(%rip), %rdx
	movl	%eax, %r12d
	testq	%rdx, %rdx
	je	.L16690
.L16698:
	movq	24(%rdx), %r14
	andb	$-17, 18(%r14)
	movq	(%rdx), %rdx
	testq	%rdx, %rdx
	jne	.L16698
	jmp	.L16690
.L26633:
	movq	8(%r13), %r14
	cmpw	$61, (%r14)
	jne	.L16691
	cmpl	$52, 8(%r14)
	jbe	.L24506
	jmp	.L16691
.L26632:
	movq	8(%r13), %rax
	movq	global_rtl+72(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L16765
	cmpw	$75, (%rax)
	jne	.L16686
	cmpq	%rdx, 8(%rax)
	jne	.L16686
	jmp	.L16765
.L26631:
	movq	112(%rax), %rax
	testq	%rax, %rax
	je	.L16689
	cmpb	$25, 16(%rax)
	jne	.L16689
	jmp	.L16688
	.p2align 6,,7
.L26416:
	movq	40(%rdx), %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L14788
	movq	-9552(%rbp), %rbx
	xorl	%edx, %edx
	movq	32(%rbx), %r12
	movq	40(%rbx), %rsi
	movq	32(%r12), %rdi
	call	operand_equal_p
	testl	%eax, %eax
	je	.L14788
	movq	32(%rbx), %rdi
	testb	$1, 17(%rdi)
	je	.L14789
	movq	40(%rbx), %rdx
	cmpb	$118, 16(%rdx)
	jne	.L14788
.L14789:
	movq	-9552(%rbp), %r8
	xorl	%r15d, %r15d
	movq	%r13, %r14
	movq	48(%r8), %rbx
	movq	8(%rbx), %rax
	testq	%rax, %rax
	je	.L14792
	movq	32(%rax), %rdx
	testq	%rdx, %rdx
	je	.L14792
	cmpb	$25, 16(%rdx)
	je	.L14792
	cmpb	$18, 16(%rax)
	je	.L26853
.L14793:
	cmpb	$51, 2(%r13)
	je	.L14869
.L14792:
	movzwl	(%r13), %eax
	cmpw	$66, %ax
	movl	%eax, %ecx
	je	.L26854
.L14790:
	cmpw	$63, %cx
	je	.L26855
.L14795:
	movl	$1, %eax
	testl	%eax, %eax
	jne	.L26856
	movzbl	16(%rbx), %edx
	movzbl	%dl, %r9d 
	movsbl	tree_code_type(%r9),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L14803
	mov	%eax, %ecx
	jmp	*.L14863(,%rcx,8)
	.section	.rodata
	.align 8
	.align 4
.L14863:
	.quad	.L14846
	.quad	.L14819
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14819
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14869
	.quad	.L14804
	.quad	.L14822
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14822
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14803
	.quad	.L14809
	.text
.L14804:
	movq	144(%rbx), %r10
	testq	%r10, %r10
	movq	%r10, %r15
	jne	.L24265
	xorl	%r15d, %r15d
.L14803:
	testq	%r15, %r15
	movl	$1, %r12d
	je	.L14794
.L24265:
	cmpw	$63, (%r15)
	je	.L26857
.L14866:
	movq	%r14, %rdi
	movq	%r15, %rsi
	xorl	%r12d, %r12d
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L14794
	cmpw	$66, (%r14)
	je	.L26858
.L14869:
	movl	$1, %r12d
.L14794:
	testl	%r12d, %r12d
	je	.L14788
	cmpw	$61, (%r13)
	je	.L26859
.L14870:
	movq	-9552(%rbp), %r15
	xorl	%r12d, %r12d
	movq	40(%r15), %r14
	movl	$0, -7644(%rbp)
	movq	%r13, -7864(%rbp)
	movzbl	16(%r14), %eax
	cmpb	$47, %al
	je	.L26860
	cmpb	$51, %al
	je	.L26861
.L14881:
	movzwl	(%r13), %eax
	subl	$66, %eax
	cmpl	$12, %eax
	ja	.L14929
	mov	%eax, %edi
	jmp	*.L14930(,%rdi,8)
	.section	.rodata
	.align 8
	.align 4
.L14930:
	.quad	.L14923
	.quad	.L14929
	.quad	.L14929
	.quad	.L14929
	.quad	.L14929
	.quad	.L14928
	.quad	.L14929
	.quad	.L14929
	.quad	.L14929
	.quad	.L14926
	.quad	.L14926
	.quad	.L14929
	.quad	.L14926
	.text
.L14923:
	movq	8(%r13), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L14922:
	testl	%ebx, %ebx
	je	.L14919
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L14931
	testb	%al, %al
	jne	.L26862
.L14931:
	movzbl	2(%r13), %edx
	movq	%r14, %rdi
	xorl	%esi, %esi
.L24766:
	xorl	%ecx, %ecx
	call	expand_expr
	testb	$8, 3(%r13)
	movq	%rax, -7856(%rbp)
	jne	.L24355
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L24350
	movl	$1, -7644(%rbp)
.L24355:
	movq	-7856(%rbp), %rdi
	movzwl	(%rdi), %edx
.L14880:
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L14958
	cmpw	$54, %dx
	je	.L14958
	cmpw	$55, %dx
	je	.L14958
	cmpw	$58, %dx
	je	.L14958
	cmpw	$134, %dx
	je	.L14958
	cmpw	$56, %dx
	je	.L14958
	cmpw	$140, %dx
	je	.L14958
.L14957:
	movq	-7856(%rbp), %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	je	.L14960
	cmpq	%r13, -7856(%rbp)
	je	.L14959
	movq	-7856(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L26863
.L14960:
	movzbl	16(%r14), %eax
	testb	%al, %al
	je	.L14959
	testl	%r12d, %r12d
	jne	.L14959
	movzbl	%al, %r12d 
	cmpb	$100, tree_code_type(%r12)
	je	.L26864
.L14961:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L14966
	cmpl	$66, %eax
	je	.L26865
.L14970:
	cmpl	$75, %eax
	je	.L14974
	cmpl	$78, %eax
	je	.L14974
.L14969:
	movq	-7856(%rbp), %rbx
	movq	-7864(%rbp), %r8
	movzbl	2(%rbx), %eax
	movzbl	2(%r8), %ecx
	cmpb	%cl, %al
	je	.L14979
	testb	%al, %al
	je	.L14979
	movq	8(%r14), %r9
	movl	-7644(%rbp), %eax
	movzbl	17(%r9), %r14d
	shrb	$5, %r14b
	movl	%r14d, %edx
	andl	$1, %edx
	testl	%eax, %eax
	je	.L14980
	movzbl	%cl, %edi
	movq	%rbx, %rsi
	call	convert_to_mode
	movq	-7864(%rbp), %rdi
	movq	%rax, %rsi
	movq	%rax, -7856(%rbp)
.L24797:
	call	emit_move_insn
.L14959:
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L14879
	movl	-7644(%rbp), %esi
	testl	%esi, %esi
	je	.L15772
	movq	-7856(%rbp), %r15
	cmpw	$66, (%r15)
	je	.L15772
.L14879:
	movq	-9552(%rbp), %r10
	movq	-6968(%rbp), %rsi
	xorl	%r12d, %r12d
	movq	32(%r10), %rdi
	call	jumpif
	call	start_cleanup_deferral
	movq	-9552(%rbp), %r8
	movq	48(%r8), %r14
	movl	$0, -7868(%rbp)
	movq	%r13, -8088(%rbp)
	movzbl	16(%r14), %eax
	cmpb	$47, %al
	je	.L26866
	cmpb	$51, %al
	je	.L26867
.L15787:
	movzwl	(%r13), %eax
	subl	$66, %eax
	cmpl	$12, %eax
	ja	.L15835
	mov	%eax, %ebx
	jmp	*.L15836(,%rbx,8)
	.section	.rodata
	.align 8
	.align 4
.L15836:
	.quad	.L15829
	.quad	.L15835
	.quad	.L15835
	.quad	.L15835
	.quad	.L15835
	.quad	.L15834
	.quad	.L15835
	.quad	.L15835
	.quad	.L15835
	.quad	.L15832
	.quad	.L15832
	.quad	.L15835
	.quad	.L15832
	.text
.L15829:
	movq	8(%r13), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L15828:
	testl	%ebx, %ebx
	je	.L15825
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L15837
	testb	%al, %al
	jne	.L26868
.L15837:
	movzbl	2(%r13), %edx
	movq	%r14, %rdi
	xorl	%esi, %esi
.L24799:
	xorl	%ecx, %ecx
	call	expand_expr
	testb	$8, 3(%r13)
	movq	%rax, -8080(%rbp)
	jne	.L24366
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L24361
	movl	$1, -7868(%rbp)
.L24364:
	movq	-8080(%rbp), %r10
	movzwl	(%r10), %edx
.L15786:
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L15864
	cmpw	$54, %dx
	je	.L15864
	cmpw	$55, %dx
	je	.L15864
	cmpw	$58, %dx
	je	.L15864
	cmpw	$134, %dx
	je	.L15864
	cmpw	$56, %dx
	je	.L15864
	cmpw	$140, %dx
	je	.L15864
.L15863:
	movq	-8080(%rbp), %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	je	.L15866
	cmpq	%r13, -8080(%rbp)
	je	.L15865
	movq	-8080(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L26869
.L15866:
	movzbl	16(%r14), %eax
	testb	%al, %al
	je	.L15865
	testl	%r12d, %r12d
	jne	.L15865
	movzbl	%al, %r12d 
	cmpb	$100, tree_code_type(%r12)
	je	.L26870
.L15867:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L15872
	cmpl	$66, %eax
	je	.L26871
.L15876:
	cmpl	$75, %eax
	je	.L15880
	cmpl	$78, %eax
	je	.L15880
.L15875:
	movq	-8080(%rbp), %rbx
	movq	-8088(%rbp), %rdi
	movzbl	2(%rbx), %eax
	movzbl	2(%rdi), %ecx
	cmpb	%cl, %al
	je	.L15885
	testb	%al, %al
	je	.L15885
	movq	8(%r14), %r11
	movl	-7868(%rbp), %r14d
	movzbl	17(%r11), %r10d
	shrb	$5, %r10b
	movl	%r10d, %edx
	andl	$1, %edx
	testl	%r14d, %r14d
	je	.L15886
	movzbl	%cl, %edi
	movq	%rbx, %rsi
	call	convert_to_mode
	movq	-8088(%rbp), %rdi
	movq	%rax, %rsi
	movq	%rax, -8080(%rbp)
.L24830:
	call	emit_move_insn
.L15865:
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L17681
	movl	-7868(%rbp), %eax
	testl	%eax, %eax
	je	.L16678
	movq	-8080(%rbp), %r15
	cmpw	$66, (%r15)
	jne	.L17681
.L16678:
	movq	-8088(%rbp), %rax
	cmpb	$51, 2(%rax)
	je	.L17681
	cmpw	$61, (%rax)
	je	.L26872
.L16681:
	movq	-8088(%rbp), %rdi
	jmp	.L25110
.L26872:
	cmpl	$52, 8(%rax)
	jbe	.L17681
	jmp	.L16681
.L15886:
	movq	-8088(%rbp), %rdi
	movq	-8080(%rbp), %rsi
	call	convert_move
	jmp	.L15865
.L15885:
	cmpb	$51, %al
	je	.L26873
.L15889:
	movq	-8088(%rbp), %r9
	cmpw	$39, (%r9)
	je	.L26874
	cmpb	$51, %al
	je	.L26875
	movq	-8088(%rbp), %rdi
	movq	-8080(%rbp), %rsi
	jmp	.L24830
.L26875:
	movq	-8080(%rbp), %rcx
	movq	-8088(%rbp), %r9
	movq	%r14, %rdi
	movq	%rcx, -8048(%rbp)
	movq	%r9, -8040(%rbp)
	call	expr_size
	movq	-8088(%rbp), %rsi
	movq	%rax, %r14
	movl	$8, %edx
	movq	16(%rsi), %rcx
	testq	%rcx, %rcx
	je	.L16480
	movl	32(%rcx), %edx
.L16480:
	movq	-8080(%rbp), %r10
	movq	16(%r10), %rax
	testq	%rax, %rax
	je	.L16481
	cmpl	32(%rax), %edx
	jb	.L16482
.L16477:
	testq	%rax, %rax
	movl	$8, -8028(%rbp)
	je	.L16478
	movl	32(%rax), %eax
.L24821:
	movl	%eax, -8028(%rbp)
.L16478:
	movq	-8088(%rbp), %rdi
	cmpb	$51, 2(%rdi)
	jne	.L25547
	movq	-8080(%rbp), %r11
	cmpb	$51, 2(%r11)
	jne	.L25546
	movq	-8088(%rbp), %rsi
	movzwl	(%rsi), %eax
	cmpl	$71, %eax
	je	.L16489
	cmpl	$66, %eax
	je	.L26876
.L16493:
	cmpl	$75, %eax
	je	.L16497
	cmpl	$78, %eax
	je	.L16497
.L16492:
	movq	-8080(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L16502
	cmpl	$66, %eax
	je	.L26877
.L16506:
	cmpl	$75, %eax
	je	.L16510
	cmpl	$78, %eax
	je	.L16510
.L16505:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L16515
	cmpl	$66, %eax
	je	.L26878
.L16519:
	cmpl	$75, %eax
	je	.L16523
	cmpl	$78, %eax
	je	.L16523
.L16518:
	movq	-8040(%rbp), %r9
	cmpw	$66, (%r9)
	jne	.L25545
	movq	-8048(%rbp), %r10
	cmpw	$66, (%r10)
	jne	.L25544
	testq	%r14, %r14
	je	.L25543
	cmpw	$54, (%r14)
	je	.L26879
.L16531:
	shrl	$3, -8028(%rbp)
	xorl	%edi, %edi
	mov	-8028(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -4320(%rbp)
	testl	%r12d, %r12d
	je	.L23777
.L16664:
	movslq	%r12d,%rsi
	movl	movstr_optab(,%rsi,4), %edx
	movq	%rsi, -4328(%rbp)
	cmpl	$1317, %edx
	je	.L16650
	cmpw	$54, (%r14)
	je	.L26880
.L16654:
	testb	$2, target_flags+3(%rip)
	je	.L16655
	movq	-4328(%rbp), %rdi
	cmpw	$63, mode_bitsize(%rdi,%rdi)
.L24828:
	jbe	.L16650
.L16653:
	movslq	%edx,%rax
	leaq	(%rax,%rax,4), %rbx
	movq	%rax, -4336(%rbp)
	movq	insn_data+24(,%rbx,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L16657
	movq	-8040(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L16650
.L16657:
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L26881
.L16658:
	movq	72(%r15), %rax
	testq	%rax, %rax
	je	.L16659
	xorl	%esi, %esi
	movq	-4320(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L16650
.L16659:
	call	get_last_insn
	movl	$1, %edx
	movq	%r14, %rsi
	movl	%r12d, %edi
	movq	%rax, -4344(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r15), %rax
	testq	%rax, %rax
	jne	.L26882
.L16660:
	movq	-4336(%rbp), %rdx
	movq	-8040(%rbp), %rdi
	xorl	%eax, %eax
	movq	-8048(%rbp), %rsi
	movq	-4320(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24505
	movq	-4344(%rbp), %rdi
	call	delete_insns_since
.L16650:
	movq	-4328(%rbp), %r8
	movzbl	mode_wider_mode(%r8), %r12d
	testl	%r12d, %r12d
	jne	.L16664
.L23777:
	testb	$2, target_flags+3(%rip)
	movq	-8040(%rbp), %r15
	movl	$0, volatile_ok(%rip)
	setne	%r11b
	movq	8(%r15), %rsi
	movzbl	%r11b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-8048(%rbp), %r10
	testb	$2, target_flags+3(%rip)
	setne	%sil
	movq	%rax, %r15
	movzbl	%sil, %edi
	movq	8(%r10), %rsi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%r14, %rsi
	movq	sizetype_tab(%rip), %rcx
	movq	%rax, %rbx
	movzbl	61(%rcx), %r9d
	shrb	$1, %r9b
	movzbl	%r9b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r14
	je	.L26883
.L16673:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r15, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r14, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %r9
	movq	%rax, (%rbx)
	movq	(%r12), %r10
	movq	8(%r9), %rdi
	movq	(%r10), %rcx
	movq	$0, (%rcx)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %rbx
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%rbx), %r14
	movq	8(%r14), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r15)
	je	.L15865
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r15, %rdx
.L24829:
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L15865
.L26883:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r8
	xorl	%esi, %esi
	orb	$1, 49(%r8)
	movq	fn.1(%rip), %rdx
	orb	$8, 18(%rdx)
	movq	fn.1(%rip), %r12
	orb	$64, 50(%r12)
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L16673
.L24505:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L15865
.L26882:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L16660
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L16660
.L26881:
	movq	-8048(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L16650
	jmp	.L16658
.L16655:
	movq	-4328(%rbp), %r11
	cmpw	$31, mode_bitsize(%r11,%r11)
	jmp	.L24828
.L26880:
	movq	mode_mask_array(,%rsi,8), %r15
	shrq	$1, %r15
	cmpq	%r15, 8(%r14)
	jbe	.L16653
	jmp	.L16654
.L26879:
	movq	8(%r14), %r12
	xorl	%r15d, %r15d
	movl	$17, %esi
.L16544:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23766
.L16541:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L16541
.L23766:
	testl	%edi, %edi
	je	.L16534
	movslq	%edi,%rbx
	movq	%rbx, %r8
	salq	$4, %r8
	addq	optab_table+240(%rip), %r8
	cmpl	$1317, 8(%r8)
	je	.L16543
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L16543
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L16543:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L16544
.L16534:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L16547
	movq	ix86_cost(%rip), %r9
	mov	40(%r9), %ebx
	cmpq	%rbx, %r15
	jae	.L16531
.L16548:
	movq	-8048(%rbp), %rsi
	testb	$2, target_flags+3(%rip)
	movq	-8040(%rbp), %rcx
	movq	8(%r14), %r12
	setne	%r14b
	movq	-8040(%rbp), %rdi
	movq	8(%rsi), %r8
	movq	$0, -1336(%rbp)
	movl	$0, -8060(%rbp)
	movq	%r8, -1360(%rbp)
	movzbl	%r14b, %edx
	movq	8(%rcx), %r11
	leal	5(,%rdx,4), %r14d
	movq	%rdi, -1392(%rbp)
	xorl	%ecx, %ecx
	movzwl	(%r11), %edx
	movq	%r11, -8056(%rbp)
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L16553
	cmpw	$99, %dx
	je	.L16553
	cmpw	$98, %dx
	je	.L16553
.L16552:
	movq	-8056(%rbp), %rbx
	movl	%ecx, -1376(%rbp)
	xorl	%edx, %edx
	movzwl	(%rbx), %eax
	cmpw	$96, %ax
	je	.L16555
	cmpw	$98, %ax
	je	.L16555
.L16554:
	movq	-8056(%rbp), %r15
	movq	-8048(%rbp), %rax
	movl	%edx, -1328(%rbp)
	xorl	%ecx, %ecx
	movq	%r15, -1384(%rbp)
	movq	%rax, -1368(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L16558
	cmpw	$99, %dx
	je	.L16558
	cmpw	$98, %dx
	je	.L16558
.L16557:
	movl	-1328(%rbp), %r10d
	movl	%ecx, -1352(%rbp)
	movl	$0, -1348(%rbp)
	movl	$0, -1372(%rbp)
	testl	%r10d, %r10d
	je	.L16559
	movq	%r12, -1336(%rbp)
.L16559:
	movl	-1352(%rbp), %edi
	movq	%r12, -1344(%rbp)
	testl	%edi, %edi
	je	.L16561
	movl	-1376(%rbp), %r11d
	testl	%r11d, %r11d
	jne	.L16560
.L16561:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L16574:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23769
.L16571:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L16571
.L23769:
	testl	%edi, %edi
	je	.L16564
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L16573
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L16573
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L16573:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L16574
.L16564:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L16560
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23771
.L16582:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %r10d
	cmpl	%r14d, %r10d
	cmovae	-8060(%rbp), %ecx
	movl	%ecx, -8060(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L16582
.L23771:
	movl	-1352(%rbp), %eax
	testl	%eax, %eax
	jne	.L16588
	movzwl	(%r8), %edx
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L16586
	cmpw	$54, %dx
	je	.L16586
	cmpw	$55, %dx
	je	.L16586
	cmpw	$58, %dx
	je	.L16586
	cmpw	$134, %dx
	je	.L16586
	cmpw	$56, %dx
	je	.L16586
	cmpw	$140, %dx
	je	.L16586
.L16588:
	movl	-1376(%rbp), %r11d
	testl	%r11d, %r11d
	jne	.L16560
	movq	-8056(%rbp), %rcx
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L16590
	cmpw	$54, %dx
	je	.L16590
	cmpw	$55, %dx
	je	.L16590
	cmpw	$58, %dx
	je	.L16590
	cmpw	$134, %dx
	je	.L16590
	cmpw	$56, %dx
	je	.L16590
	cmpw	$140, %dx
	je	.L16590
.L16560:
	cmpl	$1, %r14d
	jbe	.L16593
.L16644:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23774
.L16600:
	movslq	%ecx,%r8
	movzbl	mode_size(%r8), %edx
	cmpl	%r14d, %edx
	cmovae	-8060(%rbp), %ecx
	movl	%ecx, -8060(%rbp)
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L16600
.L23774:
	movl	-8060(%rbp), %r14d
	testl	%r14d, %r14d
	je	.L16593
	movslq	-8060(%rbp),%r15
	movq	%r15, %r12
	salq	$4, %r12
	addq	optab_table+240(%rip), %r12
	movl	8(%r12), %ebx
	cmpl	$1317, %ebx
	je	.L16602
	movl	-8060(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r9d
	cmpl	%eax, %r9d
	jb	.L16602
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rdi
	leaq	-1392(%rbp), %r12
	leaq	(%rdi,%rdi,4), %r10
	cmpq	%rdx, -1344(%rbp)
	movq	$0, -8072(%rbp)
	movq	insn_data+16(,%r10,8), %rsi
	movq	%rdx, -6072(%rbp)
	movq	%rsi, -4312(%rbp)
	jb	.L16602
	movl	-1328(%rbp), %ecx
.L16642:
	testl	%ecx, %ecx
	je	.L16606
	subq	%rdx, 56(%r12)
.L16606:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L16607
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L16608
	movl	-8060(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24824:
	movq	%rax, -8072(%rbp)
.L16607:
	movl	40(%r12), %r11d
	testl	%r11d, %r11d
	je	.L16610
	movq	24(%r12), %rdi
	movl	-8060(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24825:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L26884
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L16616
	movzbl	mode_size(%r15), %ebx
	leal	7(%rbx), %edx
	andl	$-8, %edx
.L16617:
	movq	cfun(%rip), %r9
	andl	$33554432, %esi
	movq	16(%r9), %r8
	leaq	8(%r8), %rdi
	movl	8(%r8), %ecx
	je	.L16618
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24826:
	movq	%r15, %rsi
	leal	(%rax,%rcx), %r10d
	salq	$4, %rsi
	movl	%r10d, (%rdi)
	addq	optab_table+384(%rip), %rsi
	movl	8(%rsi), %eax
	cmpl	$1317, %eax
	je	.L16620
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rdi
	movq	insn_data+24(,%rdi,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L16621
	movq	%r14, %rdi
	movl	-8060(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L26885
.L16621:
	leaq	(%rbx,%rbx,4), %r11
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r11,8)
.L24827:
	movq	%rax, %rdi
	call	emit_insn
.L16640:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L16641
	movq	-6072(%rbp), %r14
	addq	%r14, 56(%r12)
.L16641:
	movq	48(%r12), %r10
	movq	-6072(%rbp), %rdx
	subq	-6072(%rbp), %r10
	cmpq	%rdx, %r10
	movq	%r10, 48(%r12)
	jae	.L16642
.L16602:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L16644
.L16593:
	cmpq	$0, -1344(%rbp)
.L25553:
	je	.L15865
	jmp	.L25518
.L26885:
	movl	-8060(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L16621
.L16620:
	movzbl	mode_size(%r15), %ebx
	cmpl	%edx, %ebx
	je	.L26886
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r9b
	movzbl	%r9b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r8b
	movzbl	%r8b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L16628:
	movl	-8060(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%ecx, %ecx
	testq	%rcx, %rcx
	movq	%rax, %rbx
	je	.L16637
	xorl	%esi, %esi
	movq	%rax, %rdi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %esi
	testl	%esi, %esi
	jne	.L26887
.L16637:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L16640
.L26887:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L16637
.L26886:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L16628
.L16618:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24826
.L16616:
	movzbl	mode_size(%r15), %ecx
	leal	1(%rcx), %edx
	andl	$-2, %edx
	jmp	.L16617
.L26884:
	movq	%rax, %rsi
	movq	-8072(%rbp), %rdi
	xorl	%eax, %eax
	call	*-4312(%rbp)
	jmp	.L24827
.L16610:
	movq	24(%r12), %rdi
	movl	-8060(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24825
.L16608:
	movl	-8060(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24824
.L16590:
	movq	-8056(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -1384(%rbp)
	jmp	.L16560
.L16586:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -1360(%rbp)
	jmp	.L16588
.L16558:
	movl	$1, %ecx
	jmp	.L16557
.L16555:
	movl	$1, %edx
	jmp	.L16554
.L16553:
	movl	$1, %ecx
	jmp	.L16552
.L16547:
	cmpq	$2, %r15
	ja	.L16531
	jmp	.L16548
.L16523:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L26888
.L16525:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L16518
.L26888:
	cmpq	16(%r14), %rax
	jne	.L16525
	jmp	.L16518
.L26878:
	cmpb	$51, 2(%r14)
	je	.L16516
	movq	8(%r14), %r12
	cmpw	$71, (%r12)
	je	.L26889
.L16516:
	cmpl	$66, %eax
	jne	.L16519
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L16518
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%rbx, 8(%rax)
	jmp	.L16518
.L26889:
	movq	8(%r12), %rsi
	movq	%r14, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L16517
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L16518
.L16517:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24823:
	movq	%rax, %r14
	jmp	.L16518
.L16515:
	cmpq	$0, 16(%r14)
	je	.L26890
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L24823
	movq	8(%r14), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L16518
.L26890:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L24823
.L16510:
	movq	-8080(%rbp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-8080(%rbp), %r11
	movq	%rax, %r12
	movq	16(%r11), %rdi
	call	protect_from_queue
	movq	-8080(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26891
.L16512:
	movq	-8080(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8048(%rbp)
	movq	%r12, 8(%rax)
	movq	-8048(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L16505
.L26891:
	cmpq	16(%rcx), %rax
	jne	.L16512
	jmp	.L16505
.L26877:
	cmpb	$51, 2(%rdx)
	je	.L16503
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26892
.L16503:
	cmpl	$66, %eax
	jne	.L16506
	movq	-8080(%rbp), %r10
	xorl	%esi, %esi
	movq	8(%r10), %rdi
	call	protect_from_queue
	movq	-8080(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L16505
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -8048(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L16505
.L26892:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L16504
	movq	-8080(%rbp), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -8048(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L16505
.L16504:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24822:
	movq	%rax, -8048(%rbp)
	jmp	.L16505
.L16502:
	movq	-8080(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26893
	movq	-8080(%rbp), %rax
	movq	24(%rax), %r8
	testq	%r8, %r8
	movq	%r8, -8048(%rbp)
	jne	.L16505
	movq	-8080(%rbp), %rsi
	movq	8(%rsi), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	-8080(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r15
	movq	%r15, -8048(%rbp)
	jmp	.L16505
.L26893:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24822
.L16497:
	movq	-8088(%rbp), %r12
	xorl	%esi, %esi
	movq	8(%r12), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-8088(%rbp), %rdx
	movq	%rax, %r12
	movq	16(%rdx), %rdi
	call	protect_from_queue
	movq	-8088(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L26894
.L16499:
	movq	-8088(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8040(%rbp)
	movq	%r12, 8(%rax)
	movq	-8040(%rbp), %r8
	movq	%rbx, 16(%r8)
	jmp	.L16492
.L26894:
	cmpq	16(%rsi), %rax
	jne	.L16499
	jmp	.L16492
.L26876:
	jne	.L16493
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, %rbx
	movq	-8088(%rbp), %rax
	cmpq	8(%rax), %rbx
	je	.L16492
	movq	%rax, %rdi
	call	copy_rtx
	movq	%rax, -8040(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L16492
.L16489:
	testq	%rcx, %rcx
	je	.L26895
	movq	-8088(%rbp), %rbx
	movq	24(%rbx), %r15
	testq	%r15, %r15
	movq	%r15, -8040(%rbp)
	jne	.L16492
	movq	-8088(%rbp), %r12
	movq	8(%r12), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rcx
	movq	%rcx, -8040(%rbp)
	jmp	.L16492
.L26895:
	movq	-8088(%rbp), %rax
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rax, -8040(%rbp)
	jmp	.L16492
.L16482:
	testq	%rcx, %rcx
	movl	$8, -8028(%rbp)
	je	.L16478
	movl	32(%rcx), %eax
	jmp	.L24821
.L16481:
	cmpl	$7, %edx
	ja	.L16477
	jmp	.L16482
.L26874:
	movq	8(%r14), %rdi
	call	int_size_in_bytes
	movl	%eax, -4276(%rbp)
	movq	-8088(%rbp), %rax
	cmpw	$39, (%rax)
	jne	.L25561
	movq	-8088(%rbp), %r8
	movq	8(%r8), %rcx
	movq	8(%rcx), %r15
	movl	(%rcx), %r14d
	cmpq	$0, 8(%r15)
	movslq	%r14d,%r12
	sete	%r11b
	leaq	15(,%r12,8), %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	leaq	32(%rsp), %r10
	movzbl	%r11b, %edi
	movq	%r10, -4288(%rbp)
	movl	%edi, -8024(%rbp)
	movl	-8024(%rbp), %eax
	cmpl	%r14d, %eax
	movl	%eax, -8016(%rbp)
	jge	.L23760
.L16461:
	movslq	-8016(%rbp),%rax
	movq	8(%rcx,%rax,8), %rsi
	movq	%rax, -4296(%rbp)
	movl	-4276(%rbp), %eax
	movq	8(%rsi), %r9
	movq	16(%rsi), %rcx
	testl	%eax, %eax
	movzbl	2(%r9), %r14d
	movq	8(%rcx), %r15
	movslq	%r14d,%rdx
	movzbl	mode_size(%rdx), %ebx
	movq	%rdx, -4304(%rbp)
	movl	%ebx, -8020(%rbp)
	js	.L16434
	movslq	-4276(%rbp),%r10
	mov	%ebx, %r12d
	leaq	(%r12,%r15), %rbx
	cmpq	%r10, %rbx
	jle	.L16434
	movl	-4276(%rbp), %edi
	subl	%r15d, %edi
	movl	%edi, -8020(%rbp)
	je	.L25560
.L16434:
	movq	-8080(%rbp), %r12
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L24537
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L16438
	cmpw	$54, %dx
	je	.L16438
	cmpw	$55, %dx
	je	.L16438
	cmpw	$58, %dx
	je	.L16438
	cmpw	$134, %dx
	je	.L16438
	cmpw	$56, %dx
	je	.L16438
	cmpw	$140, %dx
	je	.L16438
.L16437:
	movq	-8080(%rbp), %rcx
	movl	%r14d, %edi
	movzbl	2(%rcx), %eax
	testb	%al, %al
	je	.L24819
	movzbl	%al, %edi
.L24819:
	call	gen_reg_rtx
	movq	-8080(%rbp), %rsi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	emit_move_insn
	movzwl	(%r12), %edx
.L16436:
	cmpw	$66, %dx
	je	.L24537
.L16441:
	cmpw	$65, %dx
	je	.L26896
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L16458
	cmpw	$54, %dx
	je	.L16458
	cmpw	$55, %dx
	je	.L16458
	cmpw	$58, %dx
	je	.L16458
	cmpw	$134, %dx
	je	.L16458
	cmpw	$56, %dx
	je	.L16458
	cmpw	$140, %dx
	je	.L16458
	cmpw	$61, %dx
	je	.L26897
.L16457:
	movslq	-4276(%rbp),%rdi
	movl	-8020(%rbp), %edx
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r14d, %r9d
	movl	%r14d, (%rsp)
	sall	$3, %edx
	mov	%edx, %esi
	movq	%rdi, 8(%rsp)
	leaq	0(,%r15,8), %rdx
	movq	%r12, %rdi
	call	extract_bit_field
.L24820:
	movq	-4296(%rbp), %r12
	movq	-4288(%rbp), %r11
	movq	%rax, (%r11,%r12,8)
.L16432:
	movq	-8088(%rbp), %r8
	incl	-8016(%rbp)
	movl	-8016(%rbp), %eax
	movq	8(%r8), %rcx
	cmpl	(%rcx), %eax
	jl	.L16461
.L23760:
	movq	cfun(%rip), %rbx
	movq	16(%rbx), %r15
	movq	40(%r15), %rbx
	testq	%rbx, %rbx
	je	.L23762
.L16467:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26898
	call	emit_insn
	movq	%rax, 16(%rbx)
.L16466:
	movq	cfun(%rip), %r10
	movq	40(%rbx), %r9
	movq	16(%r10), %r14
	testq	%r9, %r9
	movq	%r9, %rbx
	movq	%r9, 40(%r14)
	jne	.L16467
	movq	-8088(%rbp), %rdi
	movq	8(%rdi), %rcx
.L23762:
	movl	-8024(%rbp), %r11d
	cmpl	(%rcx), %r11d
	jge	.L15865
.L16473:
	movslq	-8024(%rbp),%r15
	movq	-4288(%rbp), %r8
	salq	$3, %r15
	movq	8(%r15,%rcx), %rbx
	movq	(%r8,%r15), %rsi
	movq	8(%rbx), %rdi
	call	emit_move_insn
	movq	-8088(%rbp), %rax
	incl	-8024(%rbp)
	movl	-8024(%rbp), %edx
	movq	8(%rax), %r12
	cmpl	(%r12), %edx
	movq	%r12, %rcx
	jl	.L16473
	jmp	.L15865
.L26898:
	movq	8(%rdi), %rsi
	movq	8(%rsi), %rcx
	movq	%rcx, 16(%rbx)
	call	emit_insn
	jmp	.L16466
.L26897:
	movzbl	2(%r12), %r9d
	cmpl	%r14d, %r9d
	jne	.L16457
.L16458:
	movq	-4296(%rbp), %r10
	movq	-4288(%rbp), %r14
	movq	%r12, (%r14,%r10,8)
	jmp	.L16432
.L26896:
	testq	%r15, %r15
	jne	.L24370
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %r8
	movzbl	mode_size(%r8), %ebx
	cmpl	%ebx, -8020(%rbp)
	je	.L16447
.L16448:
	movzbq	2(%rdx), %rcx
	movzbq	mode_size(%rcx), %rsi
	cmpq	%rsi, %r15
	je	.L26899
.L16446:
	testq	%r15, %r15
	jne	.L22779
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbx
	movzbq	mode_size(%rbx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %r15
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r15, %rdi
	movl	%r14d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	jmp	.L24820
.L26899:
	movq	16(%r12), %rdx
	movzbq	2(%rdx), %r10
	movzbl	mode_size(%r10), %r9d
	cmpl	%r9d, -8020(%rbp)
	jne	.L16446
.L16447:
	xorl	%edi, %edi
	movq	-4296(%rbp), %r11
	movq	-4288(%rbp), %rax
	testq	%r15, %r15
	setne	%dil
	leaq	(%rax,%r11,8), %rbx
	movq	8(%r12,%rdi,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L16432
	cmpw	$54, %dx
	je	.L16432
	cmpw	$55, %dx
	je	.L16432
	cmpw	$58, %dx
	je	.L16432
	cmpw	$134, %dx
	je	.L16432
	cmpw	$56, %dx
	je	.L16432
	cmpw	$140, %dx
	je	.L16432
	cmpw	$61, %dx
	je	.L26900
.L16452:
	movslq	-4276(%rbp),%r8
	movl	-8020(%rbp), %ecx
	movl	%r14d, (%rsp)
	xorl	%edx, %edx
	movl	%r14d, %r9d
	sall	$3, %ecx
	movq	%r8, 8(%rsp)
	mov	%ecx, %esi
	xorl	%r8d, %r8d
	movq	(%rbx), %rdi
	movl	$1, %ecx
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L16432
.L26900:
	movzbl	2(%rcx), %r12d
	cmpl	%r14d, %r12d
	jne	.L16452
	jmp	.L16432
.L24370:
	movq	8(%r12), %rdx
	jmp	.L16448
.L24537:
	movl	%r14d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L16442
	cmpl	%eax, 32(%rdx)
	jae	.L16443
.L24369:
	movzwl	(%r12), %edx
	jmp	.L16441
.L16443:
	movl	%r14d, %edi
	leaq	0(,%r15,8), %rbx
	call	get_mode_alignment
	mov	%eax, %r10d
	movq	%rbx, %rax
	cqto
	idivq	%r10
	testq	%rdx, %rdx
	jne	.L24369
	movq	-4304(%rbp), %rax
	movzbl	mode_size(%rax), %edx
	cmpl	%edx, -8020(%rbp)
	jne	.L24369
	movl	%r14d, %edi
	call	gen_reg_rtx
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-4288(%rbp), %rdi
	movq	-4296(%rbp), %r11
	movl	%r14d, %esi
	movq	%r15, %rdx
	leaq	(%rdi,%r11,8), %rbx
	movq	%r12, %rdi
	movq	%rax, (%rbx)
	call	adjust_address_1
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L16432
.L16442:
	cmpl	$8, %eax
	ja	.L24369
	jmp	.L16443
.L16438:
	movq	-8080(%rbp), %rsi
	movzbl	2(%rsi), %ecx
	movzbl	%cl, %r8d
	cmpl	%r14d, %r8d
	je	.L16436
	testb	%cl, %cl
	je	.L16436
	jmp	.L16437
.L26873:
	cmpb	$29, 16(%r14)
	jne	.L15889
	movq	%r14, %rdi
	call	expr_size
	cmpw	$54, (%rax)
	movq	%rax, -7896(%rbp)
	je	.L26901
.L15890:
	movq	sizetype_tab(%rip), %rdi
	movq	-7896(%rbp), %rsi
	call	make_tree
	xorl	%esi, %esi
	movslq	32(%r14),%rdi
	movq	%rax, %r15
	call	size_int_wide
	movq	%r15, %rsi
	movl	$78, %edi
	movq	%rax, %rdx
	call	size_binop
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	movq	%rax, -4200(%rbp)
	call	expand_expr
	xorl	%edx, %edx
	movl	ptr_mode(%rip), %edi
	movq	%rax, %rsi
	movq	$0, -7984(%rbp)
	call	convert_to_mode
	movl	$8, %edx
	movq	-8080(%rbp), %r12
	movq	-8088(%rbp), %r14
	movq	%rax, -7928(%rbp)
	movq	%rax, -7952(%rbp)
	movq	%r12, -7944(%rbp)
	movq	%r14, -7936(%rbp)
	movq	16(%r14), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L16093
	movl	32(%rax), %edx
.L16093:
	movq	-8080(%rbp), %r9
	movq	16(%r9), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L16094
	cmpl	32(%rax), %edx
	jb	.L16095
.L16090:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L16091
	movl	32(%rcx), %r15d
.L16091:
	movq	-8088(%rbp), %rax
	cmpb	$51, 2(%rax)
	jne	.L25547
	movq	-8080(%rbp), %rcx
	cmpb	$51, 2(%rcx)
	jne	.L25546
	movq	-8088(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L16102
	cmpl	$66, %eax
	je	.L26902
.L16106:
	cmpl	$75, %eax
	je	.L16110
	cmpl	$78, %eax
	je	.L16110
.L16105:
	movq	-8080(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L16115
	cmpl	$66, %eax
	je	.L26903
.L16119:
	cmpl	$75, %eax
	je	.L16123
	cmpl	$78, %eax
	je	.L16123
.L16118:
	movq	-7928(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L16128
	cmpl	$66, %eax
	je	.L26904
.L16132:
	cmpl	$75, %eax
	je	.L16136
	cmpl	$78, %eax
	je	.L16136
.L16131:
	movq	-7936(%rbp), %rdx
	cmpw	$66, (%rdx)
	jne	.L25545
	movq	-7944(%rbp), %r11
	cmpw	$66, (%r11)
	jne	.L25544
	cmpq	$0, -7952(%rbp)
	je	.L25543
	movq	-7952(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L26905
.L16144:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -4216(%rbp)
	testl	%r12d, %r12d
	je	.L23744
.L16277:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L16263
	movq	-7952(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L26906
.L16267:
	testb	$2, target_flags+3(%rip)
	je	.L16268
	cmpw	$63, mode_bitsize(%r15,%r15)
.L24813:
	jbe	.L16263
.L16266:
	movslq	%edx,%rbx
	leaq	(%rbx,%rbx,4), %r9
	movq	%rbx, -4224(%rbp)
	movq	insn_data+24(,%r9,8), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L16270
	movq	-7936(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L16263
.L16270:
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L26907
.L16271:
	movq	72(%r14), %rax
	testq	%rax, %rax
	je	.L16272
	xorl	%esi, %esi
	movq	-4216(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L16263
.L16272:
	call	get_last_insn
	movl	$1, %edx
	movq	-7952(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -4232(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r14), %rax
	testq	%rax, %rax
	jne	.L26908
.L16273:
	movq	-4224(%rbp), %rdx
	movq	-7936(%rbp), %rdi
	xorl	%eax, %eax
	movq	-7944(%rbp), %rsi
	movq	-4216(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24503
	movq	-4232(%rbp), %rdi
	call	delete_insns_since
.L16263:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L16277
.L23744:
	testb	$2, target_flags+3(%rip)
	movq	-7936(%rbp), %rcx
	movl	$0, volatile_ok(%rip)
	setne	%r14b
	movq	8(%rcx), %rsi
	movzbl	%r14b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%r8b
	movq	%rax, %r14
	movq	-7944(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%r8b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-7952(%rbp), %rsi
	movq	sizetype_tab(%rip), %r10
	movq	%rax, %rbx
	movzbl	61(%r10), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L26909
.L16286:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %r8
	movq	8(%rdx), %rdi
	movq	(%r8), %r10
	movq	$0, (%r10)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r15
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r15), %rbx
	movq	8(%rbx), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	jne	.L26910
.L16275:
	movq	-7928(%rbp), %rbx
	cmpw	$54, (%rbx)
	je	.L26911
	movq	sizetype_tab(%rip), %r14
	movq	optab_table+16(%rip), %rsi
	xorl	%r8d, %r8d
	movq	-7896(%rbp), %rdx
	xorl	%r9d, %r9d
	movzbl	61(%r14), %ecx
	movl	$3, (%rsp)
	shrb	$1, %cl
	movzbl	%cl, %edi
	movq	-7928(%rbp), %rcx
	call	expand_binop
	movq	-4200(%rbp), %rdi
	movq	%rax, %rbx
	call	highest_pow2_factor
	movq	-7928(%rbp), %rsi
	movq	-8088(%rbp), %rdi
	movq	%rax, %rdx
	call	offset_address
	movq	%rax, -8088(%rbp)
	call	gen_label_rtx
	xorl	%r9d, %r9d
	movq	%rax, -7984(%rbp)
	movq	const_int_rtx+512(%rip), %rsi
	movq	%rbx, %rdi
	movzbl	2(%rbx), %r8d
	movl	$107, %edx
	xorl	%ecx, %ecx
	movq	%rax, (%rsp)
	call	emit_cmp_and_jump_insns
.L16289:
	cmpq	const_int_rtx+512(%rip), %rbx
	je	.L16290
	movq	-8088(%rbp), %rdx
	cmpw	$66, (%rdx)
	movq	%rdx, -8000(%rbp)
	je	.L26912
	movq	-8088(%rbp), %rax
	movzbl	2(%rax), %edi
	call	get_mode_alignment
.L24814:
	movl	%eax, -7988(%rbp)
.L16292:
	movq	-8088(%rbp), %rsi
	movzbl	2(%rsi), %eax
	cmpb	$51, %al
	je	.L16295
	cmpw	$54, (%rbx)
	je	.L26913
.L16295:
	movq	-8088(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L16297
	cmpl	$66, %eax
	je	.L26914
.L16301:
	cmpl	$75, %eax
	je	.L16305
	cmpl	$78, %eax
	je	.L16305
.L16300:
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L16310
	cmpl	$66, %eax
	je	.L26915
.L16314:
	cmpl	$75, %eax
	je	.L16318
	cmpl	$78, %eax
	je	.L16318
.L16313:
	cmpw	$54, (%rbx)
	je	.L26916
.L16323:
	shrl	$3, -7988(%rbp)
	xorl	%edi, %edi
	mov	-7988(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r14d
	movq	%rax, -4248(%rbp)
	testl	%r14d, %r14d
	je	.L23758
.L16417:
	movslq	%r14d,%rcx
	movl	clrstr_optab(,%rcx,4), %edx
	movq	%rcx, -4256(%rbp)
	cmpl	$1317, %edx
	je	.L16404
	cmpw	$54, (%rbx)
	je	.L26917
.L16408:
	testb	$2, target_flags+3(%rip)
	je	.L16409
	movq	-4256(%rbp), %rax
	cmpw	$63, mode_bitsize(%rax,%rax)
.L24817:
	jbe	.L16404
.L16407:
	movslq	%edx,%r11
	leaq	(%r11,%r11,4), %rdi
	movq	%r11, -4264(%rbp)
	movq	insn_data+24(,%rdi,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L16411
	movq	-8000(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L16404
.L16411:
	movq	48(%r15), %rax
	testq	%rax, %rax
	je	.L16412
	xorl	%esi, %esi
	movq	-4248(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L16404
.L16412:
	call	get_last_insn
	movl	$1, %edx
	movq	%rbx, %rsi
	movl	%r14d, %edi
	movq	%rax, -4272(%rbp)
	call	convert_to_mode
	movq	%rax, %r12
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L26918
.L16413:
	movq	-4264(%rbp), %rcx
	movq	-8000(%rbp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	-4248(%rbp), %rdx
	leaq	(%rcx,%rcx,4), %r8
	call	*insn_data+16(,%r8,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24818
	movq	-4272(%rbp), %rdi
	call	delete_insns_since
.L16404:
	movq	-4256(%rbp), %rdx
	movzbl	mode_wider_mode(%rdx), %r14d
	testl	%r14d, %r14d
	jne	.L16417
.L23758:
	testb	$2, target_flags+3(%rip)
	movq	-8000(%rbp), %r14
	setne	%r10b
	movq	8(%r14), %rsi
	movzbl	%r10b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	sizetype_tab(%rip), %r9
	movq	%rax, %r14
	movzbl	61(%r9), %esi
	shrb	$1, %sil
	movzbl	%sil, %edi
	movq	%rbx, %rsi
	call	copy_to_mode_reg
	cmpq	$0, fn.0(%rip)
	movq	%rax, %r15
	je	.L26919
.L16422:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	const_int_rtx+512(%rip), %rsi
	movq	integer_types+40(%rip), %rdi
	movq	%rax, %r12
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.0(%rip), %rcx
	movq	%rax, (%rbx)
	movq	(%r12), %rsi
	movq	8(%rcx), %rdi
	movq	(%rsi), %rdx
	movq	$0, (%rdx)
	call	build_pointer_type
	movq	fn.0(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	movq	%r12, %rcx
	movl	$53, %edi
	movq	fn.0(%rip), %r8
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%r8), %r15
	xorl	%r8d, %r8d
	movq	8(%r15), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	jne	.L26920
.L16290:
	cmpq	$0, -7984(%rbp)
	je	.L15865
	movq	-7984(%rbp), %rdi
	call	emit_label
	jmp	.L15865
.L26920:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
.L24818:
	call	emit_insn
	jmp	.L16290
.L26919:
	movl	$.LC7, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.0(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.0(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.0, %edi
	movq	%rax, fn.0(%rip)
	call	ggc_add_tree_root
	movq	fn.0(%rip), %r11
	xorl	%esi, %esi
	orb	$1, 49(%r11)
	movq	fn.0(%rip), %rdi
	orb	$8, 18(%rdi)
	movq	fn.0(%rip), %r12
	orb	$64, 50(%r12)
	movq	fn.0(%rip), %rbx
	orb	$2, 18(%rbx)
	movq	fn.0(%rip), %rdi
	call	make_decl_rtl
	movq	fn.0(%rip), %rdi
	call	assemble_external
	jmp	.L16422
.L26918:
	movq	%r12, %rdi
	movl	%r14d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L16413
	movq	%r12, %rsi
	movl	%r14d, %edi
	call	copy_to_mode_reg
	movq	%rax, %r12
	jmp	.L16413
.L16409:
	movq	-4256(%rbp), %r15
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L24817
.L26917:
	movq	mode_mask_array(,%rcx,8), %r12
	shrq	$1, %r12
	cmpq	%r12, 8(%rbx)
	jbe	.L16407
	jmp	.L16408
.L26916:
	movq	8(%rbx), %r14
	xorl	%r15d, %r15d
	movl	$17, %esi
.L16336:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23747
.L16333:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %r10
	cmpq	%rsi, %r10
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L16333
.L23747:
	testl	%edi, %edi
	je	.L16326
	movslq	%edi,%r12
	movq	%r12, %rdx
	salq	$4, %rdx
	addq	optab_table+240(%rip), %rdx
	cmpl	$1317, 8(%rdx)
	je	.L16335
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L16335
	movzbq	mode_size(%r12), %rsi
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r14
.L16335:
	movzbq	mode_size(%r12), %rsi
	cmpq	$1, %rsi
	ja	.L16336
.L16326:
	testq	%r14, %r14
	jne	.L25529
	movl	optimize_size(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L16339
	movq	ix86_cost(%rip), %r11
	mov	40(%r11), %r14d
	cmpq	%r14, %r15
	jae	.L16323
.L16340:
	movq	8(%rbx), %r10
	movq	-8000(%rbp), %r15
	leaq	-272(%rbp), %r12
	testb	$2, target_flags+3(%rip)
	movq	$clear_by_pieces_1, -232(%rbp)
	movq	$0, -224(%rbp)
	setne	%dl
	leaq	16(%r12), %rcx
	xorl	%esi, %esi
	movq	%r15, -272(%rbp)
	movq	%r10, -248(%rbp)
	movq	8(%r15), %r8
	movq	$0, -240(%rbp)
	movl	$0, -8012(%rbp)
	movzbl	%dl, %r9d 
	movq	%r8, -264(%rbp)
	movzwl	(%r8), %edx
	leaq	5(,%r9,4), %r15
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L16344
	cmpw	$99, %dx
	je	.L16344
	cmpw	$98, %dx
	je	.L16344
.L16343:
	movl	%esi, (%rcx)
	movl	$0, 20(%r12)
	leaq	56(%r12), %rdx
	movzwl	(%r8), %eax
	xorl	%ecx, %ecx
	cmpw	$96, %ax
	je	.L16346
	cmpw	$98, %ax
	je	.L16346
.L16345:
	movl	%ecx, (%rdx)
	movl	56(%r12), %eax
	testl	%eax, %eax
	je	.L16347
	movq	24(%r12), %rdi
	movq	%rdi, 32(%r12)
.L16347:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L16348
	movq	24(%r12), %r14
	movq	$0, -8008(%rbp)
	movl	$17, %esi
.L16361:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23750
.L16358:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L16358
.L23750:
	testl	%edi, %edi
	je	.L16351
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L16360
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L16360
	movzbq	mode_size(%rbx), %r9
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%r9
	addq	%rax, -8008(%rbp)
	movq	%rdx, %r14
.L16360:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L16361
.L16351:
	testq	%r14, %r14
	jne	.L25529
	cmpq	$2, -8008(%rbp)
	jbe	.L16348
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23752
.L16369:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rdx
	cmpq	%r15, %rdx
	cmovae	-8012(%rbp), %ecx
	movl	%ecx, -8012(%rbp)
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L16369
.L23752:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L16348
	movzwl	(%r8), %edx
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L16373
	cmpw	$54, %dx
	je	.L16373
	cmpw	$55, %dx
	je	.L16373
	cmpw	$58, %dx
	je	.L16373
	cmpw	$134, %dx
	je	.L16373
	cmpw	$56, %dx
	je	.L16373
	cmpw	$140, %dx
	je	.L16373
.L16348:
	cmpq	$1, %r15
	jbe	.L16376
.L16397:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23755
.L16383:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %rbx
	cmpq	%r15, %rbx
	cmovae	-8012(%rbp), %ecx
	movl	%ecx, -8012(%rbp)
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L16383
.L23755:
	movl	-8012(%rbp), %eax
	testl	%eax, %eax
	je	.L16376
	movslq	-8012(%rbp),%r15
	movq	%r15, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	movl	8(%rcx), %ebx
	cmpl	$1317, %ebx
	je	.L16385
	movl	-8012(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	jb	.L16385
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%r9
	leaq	(%r9,%r9,4), %r14
	cmpq	%rdx, 24(%r12)
	movq	insn_data+16(,%r14,8), %rsi
	movq	%rdx, %r14
	movq	%rsi, -4240(%rbp)
	jb	.L16385
	movl	56(%r12), %ecx
.L16395:
	testl	%ecx, %ecx
	je	.L16389
	subq	%rdx, 32(%r12)
.L16389:
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L16390
	movq	(%r12), %rdi
	movl	-8012(%rbp), %esi
	movl	$1, %r8d
	movq	8(%r12), %rdx
	movq	32(%r12), %rcx
	call	adjust_automodify_address_1
.L24816:
	movl	-8012(%rbp), %edx
	movq	%rax, %rbx
	movq	48(%r12), %rdi
	movq	32(%r12), %rsi
	call	*40(%r12)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	*-4240(%rbp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L16394
	addq	%r14, 32(%r12)
.L16394:
	movq	24(%r12), %r10
	movq	%r14, %rdx
	subq	%r14, %r10
	cmpq	%r14, %r10
	movq	%r10, 24(%r12)
	jae	.L16395
.L16385:
	movzbq	mode_size(%r15), %r15
	cmpq	$1, %r15
	ja	.L16397
.L16376:
	cmpq	$0, 24(%r12)
	je	.L16290
	jmp	.L25451
.L16390:
	movq	(%r12), %rdi
	movl	-8012(%rbp), %esi
	movl	$1, %ecx
	movq	32(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24816
.L16373:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, 8(%r12)
	jmp	.L16348
.L16346:
	movl	$1, %ecx
	jmp	.L16345
.L16344:
	movl	$1, %esi
	jmp	.L16343
.L16339:
	cmpq	$2, %r15
	ja	.L16323
	jmp	.L16340
.L16318:
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbx), %rdi
	movq	%rax, %r14
	call	protect_from_queue
	cmpq	8(%rbx), %r14
	movq	%rax, %r12
	je	.L26921
.L16320:
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r14, 8(%rax)
	movq	%r12, 16(%rax)
	jmp	.L16313
.L26921:
	cmpq	16(%rbx), %rax
	jne	.L16320
	jmp	.L16313
.L26915:
	cmpb	$51, 2(%rbx)
	je	.L16311
	movq	8(%rbx), %r14
	cmpw	$71, (%r14)
	je	.L26922
.L16311:
	cmpl	$66, %eax
	jne	.L16314
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%rbx), %rax
	movq	%rax, %r12
	je	.L16313
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r12, 8(%rax)
	jmp	.L16313
.L26922:
	movq	8(%r14), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r14)
	movq	%rax, %r12
	je	.L16312
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L16313
.L16312:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24815:
	movq	%rax, %rbx
	jmp	.L16313
.L16310:
	cmpq	$0, 16(%rbx)
	je	.L26923
	movq	24(%rbx), %rax
	testq	%rax, %rax
	jne	.L24815
	movq	8(%rbx), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%rbx), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	16(%rbx), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbx), %rbx
	jmp	.L16313
.L26923:
	movq	8(%rbx), %rdi
	call	copy_to_reg
	jmp	.L24815
.L16305:
	movq	-8088(%rbp), %r11
	xorl	%esi, %esi
	movq	8(%r11), %rdi
	call	protect_from_queue
	movq	-8088(%rbp), %rsi
	movq	%rax, %r14
	movq	16(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-8088(%rbp), %rdx
	movq	%rax, %r12
	cmpq	8(%rdx), %r14
	je	.L26924
.L16307:
	movq	-8088(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -8000(%rbp)
	movq	%r14, 8(%rax)
	movq	-8000(%rbp), %r9
	movq	%r12, 16(%r9)
	jmp	.L16300
.L26924:
	cmpq	16(%rdx), %rax
	jne	.L16307
	jmp	.L16300
.L26914:
	jne	.L16301
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-8088(%rbp), %rcx
	movq	%rax, %r12
	cmpq	8(%rcx), %rax
	je	.L16300
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -8000(%rbp)
	movq	%r12, 8(%rax)
	jmp	.L16300
.L16297:
	movq	-8088(%rbp), %rsi
	cmpq	$0, 16(%rsi)
	je	.L26925
	movq	-8088(%rbp), %r10
	movq	24(%r10), %r15
	testq	%r15, %r15
	movq	%r15, -8000(%rbp)
	jne	.L16300
	movq	-8088(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	-8088(%rbp), %r14
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	movq	-8088(%rbp), %rcx
	movq	8(%rcx), %rsi
	call	gen_move_insn
	movq	-8088(%rbp), %r12
	movq	%rax, %rdi
	movq	16(%r12), %rsi
	call	emit_insn_before
	movq	-8088(%rbp), %r8
	movq	24(%r8), %rdx
	movq	%rdx, -8000(%rbp)
	jmp	.L16300
.L26925:
	movq	8(%rsi), %rdi
	call	copy_to_reg
	movq	%rax, -8000(%rbp)
	jmp	.L16300
.L26913:
	movzbl	%al, %edx 
	movzbl	mode_size(%rdx), %edi
	cmpl	8(%rbx), %edi
	jne	.L16295
	movq	%rsi, %rdi
	movq	const_tiny_rtx(,%rdx,8), %rsi
	call	emit_move_insn
	jmp	.L16290
.L26912:
	movq	16(%rdx), %rax
	movl	$8, -7988(%rbp)
	testq	%rax, %rax
	je	.L16292
	movl	32(%rax), %eax
	jmp	.L24814
.L26911:
	movq	8(%rbx), %rsi
	movq	-7896(%rbp), %rdi
	negq	%rsi
	call	plus_constant_wide
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-7928(%rbp), %r12
	movq	-8088(%rbp), %rdi
	movl	$51, %esi
	movq	%rax, %rbx
	movq	8(%r12), %rdx
	call	adjust_address_1
	movq	%rax, -8088(%rbp)
	jmp	.L16289
.L26910:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L16275
.L26909:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r9
	orb	$1, 49(%r9)
	movq	fn.1(%rip), %r11
	orb	$8, 18(%r11)
	movq	fn.1(%rip), %rsi
	orb	$64, 50(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L16286
.L24503:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L16275
.L26908:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L16273
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L16273
.L26907:
	movq	-7944(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L16263
	jmp	.L16271
.L16268:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L24813
.L26906:
	movq	mode_mask_array(,%r15,8), %r11
	shrq	$1, %r11
	cmpq	%r11, 8(%rsi)
	jbe	.L16266
	jmp	.L16267
.L26905:
	movq	8(%rcx), %r12
	xorl	%r14d, %r14d
	movl	$17, %esi
.L16157:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23733
.L16154:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L16154
.L23733:
	testl	%edi, %edi
	je	.L16147
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L16156
	call	get_mode_alignment
	movl	$128, %r10d
	cmpl	%eax, %r10d
	jb	.L16156
	movzbq	mode_size(%rbx), %r8
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r8
	addq	%rax, %r14
	movq	%rdx, %r12
.L16156:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L16157
.L16147:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L16160
	movq	ix86_cost(%rip), %rdx
	mov	40(%rdx), %edi
	cmpq	%rdi, %r14
	jae	.L16144
.L16161:
	movq	-7944(%rbp), %r10
	movq	-7952(%rbp), %rsi
	movq	-7936(%rbp), %rbx
	movq	-7936(%rbp), %r11
	testb	$2, target_flags+3(%rip)
	movq	8(%r10), %r8
	movq	8(%rsi), %r12
	movq	$0, -1336(%rbp)
	movl	$0, -7964(%rbp)
	setne	%r14b
	movq	%r8, -1360(%rbp)
	movq	8(%rbx), %r9
	movq	%r11, -1392(%rbp)
	movzbl	%r14b, %ecx
	movq	%r9, -7960(%rbp)
	leal	5(,%rcx,4), %r14d
	movq	-7960(%rbp), %rax
	xorl	%ecx, %ecx
	movzwl	(%rax), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L16166
	cmpw	$99, %dx
	je	.L16166
	cmpw	$98, %dx
	je	.L16166
.L16165:
	movq	-7960(%rbp), %rdi
	movl	%ecx, -1376(%rbp)
	xorl	%edx, %edx
	movzwl	(%rdi), %eax
	cmpw	$96, %ax
	je	.L16168
	cmpw	$98, %ax
	je	.L16168
.L16167:
	movl	%edx, -1328(%rbp)
	movq	-7960(%rbp), %rax
	xorl	%ecx, %ecx
	movq	-7944(%rbp), %rdx
	movq	%rax, -1384(%rbp)
	movq	%rdx, -1368(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L16171
	cmpw	$99, %dx
	je	.L16171
	cmpw	$98, %dx
	je	.L16171
.L16170:
	movl	-1328(%rbp), %eax
	movl	%ecx, -1352(%rbp)
	movl	$0, -1348(%rbp)
	movl	$0, -1372(%rbp)
	testl	%eax, %eax
	je	.L16172
	movq	%r12, -1336(%rbp)
.L16172:
	movl	-1352(%rbp), %r11d
	movq	%r12, -1344(%rbp)
	testl	%r11d, %r11d
	je	.L16174
	movl	-1376(%rbp), %r9d
	testl	%r9d, %r9d
	jne	.L16173
.L16174:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L16187:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23736
.L16184:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %r10
	cmpq	%rsi, %r10
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L16184
.L23736:
	testl	%edi, %edi
	je	.L16177
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L16186
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L16186
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L16186:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L16187
.L16177:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L16173
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23738
.L16195:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %edx
	cmpl	%r14d, %edx
	cmovae	-7964(%rbp), %ecx
	movl	%ecx, -7964(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L16195
.L23738:
	movl	-1352(%rbp), %eax
	testl	%eax, %eax
	jne	.L16201
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L16199
	cmpw	$54, %dx
	je	.L16199
	cmpw	$55, %dx
	je	.L16199
	cmpw	$58, %dx
	je	.L16199
	cmpw	$134, %dx
	je	.L16199
	cmpw	$56, %dx
	je	.L16199
	cmpw	$140, %dx
	je	.L16199
.L16201:
	movl	-1376(%rbp), %r9d
	testl	%r9d, %r9d
	jne	.L16173
	movq	-7960(%rbp), %r10
	movzwl	(%r10), %edx
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L16203
	cmpw	$54, %dx
	je	.L16203
	cmpw	$55, %dx
	je	.L16203
	cmpw	$58, %dx
	je	.L16203
	cmpw	$134, %dx
	je	.L16203
	cmpw	$56, %dx
	je	.L16203
	cmpw	$140, %dx
	je	.L16203
.L16173:
	cmpl	$1, %r14d
	jbe	.L16206
.L16257:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23741
.L16213:
	movslq	%ecx,%r8
	movzbl	mode_size(%r8), %r12d
	cmpl	%r14d, %r12d
	cmovae	-7964(%rbp), %ecx
	movl	%ecx, -7964(%rbp)
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L16213
.L23741:
	movl	-7964(%rbp), %r14d
	testl	%r14d, %r14d
	je	.L16206
	movslq	-7964(%rbp),%r15
	movq	%r15, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	movl	8(%rcx), %ebx
	cmpl	$1317, %ebx
	je	.L16215
	movl	-7964(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L16215
	movslq	%ebx,%r11
	leaq	-1392(%rbp), %r12
	movq	$0, -7976(%rbp)
	leaq	(%r11,%r11,4), %rdx
	movq	insn_data+16(,%rdx,8), %rsi
	movzbq	mode_size(%r15), %rdx
	cmpq	%rdx, -1344(%rbp)
	movq	%rsi, -4208(%rbp)
	movq	%rdx, -6064(%rbp)
	jb	.L16215
	movl	-1328(%rbp), %ecx
.L16255:
	testl	%ecx, %ecx
	je	.L16219
	subq	%rdx, 56(%r12)
.L16219:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L16220
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L16221
	movl	-7964(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24809:
	movq	%rax, -7976(%rbp)
.L16220:
	movl	40(%r12), %r9d
	testl	%r9d, %r9d
	je	.L16223
	movq	24(%r12), %rdi
	movl	-7964(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24810:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L26926
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L16229
	movzbl	mode_size(%r15), %ebx
	leal	7(%rbx), %edx
	andl	$-8, %edx
.L16230:
	movq	cfun(%rip), %rcx
	andl	$33554432, %esi
	movq	16(%rcx), %r8
	leaq	8(%r8), %rdi
	movl	8(%r8), %ecx
	je	.L16231
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24811:
	leal	(%rax,%rcx), %esi
	movl	%esi, (%rdi)
	movq	%r15, %rdi
	salq	$4, %rdi
	addq	optab_table+384(%rip), %rdi
	movl	8(%rdi), %eax
	cmpl	$1317, %eax
	je	.L16233
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %r11
	movq	insn_data+24(,%r11,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L16234
	movq	%r14, %rdi
	movl	-7964(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L26927
.L16234:
	leaq	(%rbx,%rbx,4), %r9
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r9,8)
.L24812:
	movq	%rax, %rdi
	call	emit_insn
.L16253:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L16254
	movq	-6064(%rbp), %r14
	addq	%r14, 56(%r12)
.L16254:
	movq	48(%r12), %rsi
	movq	-6064(%rbp), %rdx
	subq	-6064(%rbp), %rsi
	cmpq	%rdx, %rsi
	movq	%rsi, 48(%r12)
	jae	.L16255
.L16215:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L16257
.L16206:
	cmpq	$0, -1344(%rbp)
	je	.L16275
	jmp	.L25518
.L26927:
	movl	-7964(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L16234
.L16233:
	movzbl	mode_size(%r15), %ebx
	cmpl	%edx, %ebx
	je	.L26928
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r8b
	movzbl	%r8b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r10b
	movzbl	%r10b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L16241:
	movl	-7964(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%ecx, %ecx
	testq	%rcx, %rcx
	movq	%rax, %rbx
	je	.L16250
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %edi
	testl	%edi, %edi
	jne	.L26929
.L16250:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L16253
.L26929:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L16250
.L26928:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L16241
.L16231:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24811
.L16229:
	movzbl	mode_size(%r15), %r10d
	leal	1(%r10), %edx
	andl	$-2, %edx
	jmp	.L16230
.L26926:
	movq	%rax, %rsi
	movq	-7976(%rbp), %rdi
	xorl	%eax, %eax
	call	*-4208(%rbp)
	jmp	.L24812
.L16223:
	movq	24(%r12), %rdi
	movl	-7964(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24810
.L16221:
	movl	-7964(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24809
.L16203:
	movq	-7960(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -1384(%rbp)
	jmp	.L16173
.L16199:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -1360(%rbp)
	jmp	.L16201
.L16171:
	movl	$1, %ecx
	jmp	.L16170
.L16168:
	movl	$1, %edx
	jmp	.L16167
.L16166:
	movl	$1, %ecx
	jmp	.L16165
.L16160:
	cmpq	$2, %r14
	ja	.L16144
	jmp	.L16161
.L16136:
	movq	-7928(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-7928(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-7928(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26930
.L16138:
	movq	-7928(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7952(%rbp)
	movq	%r12, 8(%rax)
	movq	-7952(%rbp), %rax
	movq	%rbx, 16(%rax)
	jmp	.L16131
.L26930:
	cmpq	16(%rcx), %rax
	jne	.L16138
	jmp	.L16131
.L26904:
	cmpb	$51, 2(%rdx)
	je	.L16129
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26931
.L16129:
	cmpl	$66, %eax
	jne	.L16132
	movq	-7928(%rbp), %r9
	xorl	%esi, %esi
	movq	8(%r9), %rdi
	call	protect_from_queue
	movq	-7928(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L16131
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -7952(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L16131
.L26931:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L16130
	movq	-7928(%rbp), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -7952(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L16131
.L16130:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24808:
	movq	%rax, -7952(%rbp)
	jmp	.L16131
.L16128:
	movq	-7928(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26932
	movq	-7928(%rbp), %rsi
	movq	24(%rsi), %r14
	testq	%r14, %r14
	movq	%r14, -7952(%rbp)
	jne	.L16131
	movq	-7928(%rbp), %rdi
	movq	8(%rdi), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	-7928(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r10
	movq	%r10, -7952(%rbp)
	jmp	.L16131
.L26932:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24808
.L16123:
	movq	-8080(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	%rax, %r12
	movq	-8080(%rbp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	-8080(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26933
.L16125:
	movq	-8080(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7944(%rbp)
	movq	%r12, 8(%rax)
	movq	-7944(%rbp), %r14
	movq	%rbx, 16(%r14)
	jmp	.L16118
.L26933:
	cmpq	16(%rcx), %rax
	jne	.L16125
	jmp	.L16118
.L26903:
	cmpb	$51, 2(%rdx)
	je	.L16116
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26934
.L16116:
	cmpl	$66, %eax
	jne	.L16119
	movq	-8080(%rbp), %r9
	xorl	%esi, %esi
	movq	8(%r9), %rdi
	call	protect_from_queue
	movq	-8080(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L16118
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -7944(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L16118
.L26934:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L16117
	movq	-8080(%rbp), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -7944(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L16118
.L16117:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24807:
	movq	%rax, -7944(%rbp)
	jmp	.L16118
.L16115:
	movq	-8080(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26935
	movq	-8080(%rbp), %r10
	movq	24(%r10), %rsi
	testq	%rsi, %rsi
	movq	%rsi, -7944(%rbp)
	jne	.L16118
	movq	-8080(%rbp), %rdx
	movq	8(%rdx), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	-8080(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdi
	movq	%rdi, -7944(%rbp)
	jmp	.L16118
.L26935:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24807
.L16110:
	movq	-8088(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-8088(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L26936
.L16112:
	movq	-8088(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7936(%rbp)
	movq	%r12, 8(%rax)
	movq	-7936(%rbp), %rsi
	movq	%rbx, 16(%rsi)
	jmp	.L16105
.L26936:
	cmpq	16(%rsi), %rax
	jne	.L16112
	jmp	.L16105
.L26902:
	jne	.L16106
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-8088(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L16105
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -7936(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L16105
.L16102:
	testq	%rsi, %rsi
	je	.L26937
	movq	-8088(%rbp), %r8
	movq	24(%r8), %rdi
	testq	%rdi, %rdi
	movq	%rdi, -7936(%rbp)
	jne	.L16105
	movq	-8088(%rbp), %r12
	movq	8(%r12), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdx
	movq	%rdx, -7936(%rbp)
	jmp	.L16105
.L26937:
	movq	-8088(%rbp), %r10
	movq	8(%r10), %rdi
	call	copy_to_reg
	movq	%rax, -7936(%rbp)
	jmp	.L16105
.L16095:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L16091
	movl	32(%rsi), %r15d
	jmp	.L16091
.L16094:
	cmpl	$7, %edx
	ja	.L16090
	jmp	.L16095
.L26901:
	movq	-7896(%rbp), %rbx
	movslq	32(%r14),%rcx
	cmpq	%rcx, 8(%rbx)
	jge	.L15890
	movq	-8088(%rbp), %rdx
	movq	-8080(%rbp), %r9
	movq	%rdx, -7880(%rbp)
	movq	%r9, -7888(%rbp)
	movq	16(%rdx), %rax
	movl	$8, %edx
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L15894
	movl	32(%rax), %edx
.L15894:
	movq	-8080(%rbp), %r12
	movq	16(%r12), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L15895
	cmpl	32(%rax), %edx
	jb	.L15896
.L15891:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L15892
	movl	32(%rcx), %r15d
.L15892:
	movq	-8088(%rbp), %rax
	cmpb	$51, 2(%rax)
	jne	.L25547
	movq	-8080(%rbp), %r8
	cmpb	$51, 2(%r8)
	jne	.L25546
	movq	-8088(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L15903
	cmpl	$66, %eax
	je	.L26938
.L15907:
	cmpl	$75, %eax
	je	.L15911
	cmpl	$78, %eax
	je	.L15911
.L15906:
	movq	-8080(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L15916
	cmpl	$66, %eax
	je	.L26939
.L15920:
	cmpl	$75, %eax
	je	.L15924
	cmpl	$78, %eax
	je	.L15924
.L15919:
	movq	-7896(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L15929
	cmpl	$66, %eax
	je	.L26940
.L15933:
	cmpl	$75, %eax
	je	.L15937
	cmpl	$78, %eax
	je	.L15937
.L15932:
	movq	-7880(%rbp), %r11
	cmpw	$66, (%r11)
	jne	.L25545
	movq	-7888(%rbp), %rbx
	cmpw	$66, (%rbx)
	jne	.L25544
	cmpq	$0, -7896(%rbp)
	je	.L25543
	movq	-7896(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L26941
.L15945:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -4176(%rbp)
	testl	%r12d, %r12d
	je	.L23730
.L16078:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L16064
	movq	-7896(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L26942
.L16068:
	testb	$2, target_flags+3(%rip)
	je	.L16069
	cmpw	$63, mode_bitsize(%r15,%r15)
.L24806:
	jbe	.L16064
.L16067:
	movslq	%edx,%r10
	leaq	(%r10,%r10,4), %rdi
	movq	%r10, -4184(%rbp)
	movq	insn_data+24(,%rdi,8), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L16071
	movq	-7880(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L16064
.L16071:
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L26943
.L16072:
	movq	72(%r14), %rax
	testq	%rax, %rax
	je	.L16073
	xorl	%esi, %esi
	movq	-4176(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L16064
.L16073:
	call	get_last_insn
	movl	$1, %edx
	movq	-7896(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -4192(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r14), %rax
	testq	%rax, %rax
	jne	.L26944
.L16074:
	movq	-4184(%rbp), %rdx
	movq	-7880(%rbp), %rdi
	xorl	%eax, %eax
	movq	-7888(%rbp), %rsi
	movq	-4176(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24505
	movq	-4192(%rbp), %rdi
	call	delete_insns_since
.L16064:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L16078
.L23730:
	testb	$2, target_flags+3(%rip)
	movq	-7880(%rbp), %r11
	movl	$0, volatile_ok(%rip)
	setne	%cl
	movq	8(%r11), %rsi
	movzbl	%cl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-7888(%rbp), %rbx
	testb	$2, target_flags+3(%rip)
	movq	%rax, %r14
	setne	%al
	movq	8(%rbx), %rsi
	movzbl	%al, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-7896(%rbp), %rsi
	movq	sizetype_tab(%rip), %r8
	movq	%rax, %rbx
	movzbl	61(%r8), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L26945
.L16087:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %r11
	movq	8(%rdx), %rdi
	movq	(%r11), %rbx
	movq	$0, (%rbx)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	movq	%r12, %rcx
	movl	$53, %edi
	movq	fn.1(%rip), %r8
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%r8), %r15
	xorl	%r8d, %r8d
	movq	8(%r15), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	je	.L15865
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	jmp	.L24829
.L26945:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r10
	orb	$1, 49(%r10)
	movq	fn.1(%rip), %rdi
	orb	$8, 18(%rdi)
	movq	fn.1(%rip), %r9
	orb	$64, 50(%r9)
	movq	fn.1(%rip), %rsi
	orb	$2, 18(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L16087
.L26944:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L16074
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L16074
.L26943:
	movq	-7888(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L16064
	jmp	.L16072
.L16069:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L24806
.L26942:
	movq	mode_mask_array(,%r15,8), %r9
	shrq	$1, %r9
	cmpq	%r9, 8(%rsi)
	jbe	.L16067
	jmp	.L16068
.L26941:
	movq	8(%rcx), %r12
	xorl	%r14d, %r14d
	movl	$17, %esi
.L15958:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23719
.L15955:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L15955
.L23719:
	testl	%edi, %edi
	je	.L15948
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L15957
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	jb	.L15957
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r14
	movq	%rdx, %r12
.L15957:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L15958
.L15948:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L15961
	movq	ix86_cost(%rip), %r11
	mov	40(%r11), %edi
	cmpq	%rdi, %r14
	jae	.L15945
.L15962:
	movq	-7896(%rbp), %r8
	movq	-7888(%rbp), %rsi
	movq	-7880(%rbp), %r10
	movq	-7880(%rbp), %r9
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r14b
	movq	8(%rsi), %r8
	movq	$0, -1256(%rbp)
	movl	$0, -7908(%rbp)
	movq	%r8, -1280(%rbp)
	movzbl	%r14b, %ecx
	movq	8(%r10), %rdx
	movq	%r9, -1312(%rbp)
	leal	5(,%rcx,4), %r14d
	xorl	%ecx, %ecx
	movq	%rdx, -7904(%rbp)
	movq	-7904(%rbp), %rbx
	movzwl	(%rbx), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L15967
	cmpw	$99, %dx
	je	.L15967
	cmpw	$98, %dx
	je	.L15967
.L15966:
	movq	-7904(%rbp), %rdi
	movl	%ecx, -1296(%rbp)
	xorl	%edx, %edx
	movzwl	(%rdi), %eax
	cmpw	$96, %ax
	je	.L15969
	cmpw	$98, %ax
	je	.L15969
.L15968:
	movq	-7904(%rbp), %r15
	movq	-7888(%rbp), %rax
	movl	%edx, -1248(%rbp)
	xorl	%ecx, %ecx
	movq	%r15, -1304(%rbp)
	movq	%rax, -1288(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L15972
	cmpw	$99, %dx
	je	.L15972
	cmpw	$98, %dx
	je	.L15972
.L15971:
	movl	-1248(%rbp), %ebx
	movl	%ecx, -1272(%rbp)
	movl	$0, -1268(%rbp)
	movl	$0, -1292(%rbp)
	testl	%ebx, %ebx
	je	.L15973
	movq	%r12, -1256(%rbp)
.L15973:
	movl	-1272(%rbp), %r9d
	movq	%r12, -1264(%rbp)
	testl	%r9d, %r9d
	je	.L15975
	movl	-1296(%rbp), %edx
	testl	%edx, %edx
	jne	.L15974
.L15975:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L15988:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23722
.L15985:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %r11
	cmpq	%rsi, %r11
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L15985
.L23722:
	testl	%edi, %edi
	je	.L15978
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L15987
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %esi
	cmpl	%eax, %esi
	jb	.L15987
	movzbq	mode_size(%rbx), %r9
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r9
	addq	%rax, %r15
	movq	%rdx, %r12
.L15987:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L15988
.L15978:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L15974
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23724
.L15996:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %ebx
	cmpl	%r14d, %ebx
	cmovae	-7908(%rbp), %ecx
	movl	%ecx, -7908(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L15996
.L23724:
	movl	-1272(%rbp), %eax
	testl	%eax, %eax
	jne	.L16002
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L16000
	cmpw	$54, %dx
	je	.L16000
	cmpw	$55, %dx
	je	.L16000
	cmpw	$58, %dx
	je	.L16000
	cmpw	$134, %dx
	je	.L16000
	cmpw	$56, %dx
	je	.L16000
	cmpw	$140, %dx
	je	.L16000
.L16002:
	movl	-1296(%rbp), %r8d
	testl	%r8d, %r8d
	jne	.L15974
	movq	-7904(%rbp), %rcx
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L16004
	cmpw	$54, %dx
	je	.L16004
	cmpw	$55, %dx
	je	.L16004
	cmpw	$58, %dx
	je	.L16004
	cmpw	$134, %dx
	je	.L16004
	cmpw	$56, %dx
	je	.L16004
	cmpw	$140, %dx
	je	.L16004
.L15974:
	cmpl	$1, %r14d
	jbe	.L16007
.L16058:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23727
.L16014:
	movslq	%ecx,%rsi
	movzbl	mode_size(%rsi), %edx
	cmpl	%r14d, %edx
	cmovae	-7908(%rbp), %ecx
	movl	%ecx, -7908(%rbp)
	movzbl	mode_wider_mode(%rsi), %ecx
	testl	%ecx, %ecx
	jne	.L16014
.L23727:
	movl	-7908(%rbp), %eax
	testl	%eax, %eax
	je	.L16007
	movslq	-7908(%rbp),%r15
	movq	%r15, %r14
	salq	$4, %r14
	addq	optab_table+240(%rip), %r14
	movl	8(%r14), %ebx
	cmpl	$1317, %ebx
	je	.L16016
	movl	-7908(%rbp), %edi
	movl	$128, %r12d
	call	get_mode_alignment
	cmpl	%eax, %r12d
	jb	.L16016
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%r10
	leaq	-1312(%rbp), %r12
	leaq	(%r10,%r10,4), %r9
	cmpq	%rdx, -1264(%rbp)
	movq	$0, -7920(%rbp)
	movq	insn_data+16(,%r9,8), %rdi
	movq	%rdx, -6056(%rbp)
	movq	%rdi, -4168(%rbp)
	jb	.L16016
	movl	-1248(%rbp), %ecx
.L16056:
	testl	%ecx, %ecx
	je	.L16020
	subq	%rdx, 56(%r12)
.L16020:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L16021
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L16022
	movl	-7908(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24802:
	movq	%rax, -7920(%rbp)
.L16021:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L16024
	movq	24(%r12), %rdi
	movl	-7908(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24803:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L26946
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L16030
	movzbl	mode_size(%r15), %ebx
	leal	7(%rbx), %edx
	andl	$-8, %edx
.L16031:
	movq	cfun(%rip), %rcx
	andl	$33554432, %esi
	movq	16(%rcx), %r11
	leaq	8(%r11), %rdi
	movl	8(%r11), %ecx
	je	.L16032
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24804:
	movq	%r15, %rsi
	leal	(%rax,%rcx), %r9d
	salq	$4, %rsi
	movl	%r9d, (%rdi)
	addq	optab_table+384(%rip), %rsi
	movl	8(%rsi), %eax
	cmpl	$1317, %eax
	je	.L16034
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rdi
	movq	insn_data+24(,%rdi,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L16035
	movq	%r14, %rdi
	movl	-7908(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L26947
.L16035:
	leaq	(%rbx,%rbx,4), %r10
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r10,8)
.L24805:
	movq	%rax, %rdi
	call	emit_insn
.L16054:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L16055
	movq	-6056(%rbp), %r14
	addq	%r14, 56(%r12)
.L16055:
	movq	48(%r12), %rsi
	movq	-6056(%rbp), %rdx
	subq	-6056(%rbp), %rsi
	cmpq	%rdx, %rsi
	movq	%rsi, 48(%r12)
	jae	.L16056
.L16016:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L16058
.L16007:
	cmpq	$0, -1264(%rbp)
	jmp	.L25553
.L26947:
	movl	-7908(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L16035
.L16034:
	movzbl	mode_size(%r15), %ebx
	cmpl	%edx, %ebx
	je	.L26948
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r11b
	movzbl	%r11b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r8b
	movzbl	%r8b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L16042:
	movl	-7908(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%ecx, %ecx
	testq	%rcx, %rcx
	movq	%rax, %rbx
	je	.L16051
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L26949
.L16051:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L16054
.L26949:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L16051
.L26948:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L16042
.L16032:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24804
.L16030:
	movzbl	mode_size(%r15), %r8d
	leal	1(%r8), %edx
	andl	$-2, %edx
	jmp	.L16031
.L26946:
	movq	%rax, %rsi
	movq	-7920(%rbp), %rdi
	xorl	%eax, %eax
	call	*-4168(%rbp)
	jmp	.L24805
.L16024:
	movq	24(%r12), %rdi
	movl	-7908(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24803
.L16022:
	movl	-7908(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24802
.L16004:
	movq	-7904(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -1304(%rbp)
	jmp	.L15974
.L16000:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -1280(%rbp)
	jmp	.L16002
.L15972:
	movl	$1, %ecx
	jmp	.L15971
.L15969:
	movl	$1, %edx
	jmp	.L15968
.L15967:
	movl	$1, %ecx
	jmp	.L15966
.L15961:
	cmpq	$2, %r14
	ja	.L15945
	jmp	.L15962
.L15937:
	movq	-7896(%rbp), %r8
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-7896(%rbp), %r9
	movq	%rax, %r12
	movq	16(%r9), %rdi
	call	protect_from_queue
	movq	-7896(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26950
.L15939:
	movq	-7896(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7896(%rbp)
	movq	%r12, 8(%rax)
	movq	-7896(%rbp), %rax
	movq	%rbx, 16(%rax)
	jmp	.L15932
.L26950:
	cmpq	16(%rcx), %rax
	jne	.L15939
	jmp	.L15932
.L26940:
	cmpb	$51, 2(%rdx)
	je	.L15930
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26951
.L15930:
	cmpl	$66, %eax
	jne	.L15933
	movq	-7896(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	movq	-7896(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L15932
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -7896(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L15932
.L26951:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L15931
	movq	-7896(%rbp), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -7896(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L15932
.L15931:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24801:
	movq	%rax, -7896(%rbp)
	jmp	.L15932
.L15929:
	movq	-7896(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26952
	movq	-7896(%rbp), %r14
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L24801
	movq	-7896(%rbp), %rdi
	movq	8(%rdi), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	-7896(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r10
	movq	%r10, -7896(%rbp)
	jmp	.L15932
.L26952:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24801
.L15924:
	movq	-8080(%rbp), %r8
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	%rax, %r12
	movq	-8080(%rbp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	-8080(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26953
.L15926:
	movq	-8080(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7888(%rbp)
	movq	%r12, 8(%rax)
	movq	-7888(%rbp), %r14
	movq	%rbx, 16(%r14)
	jmp	.L15919
.L26953:
	cmpq	16(%rcx), %rax
	jne	.L15926
	jmp	.L15919
.L26939:
	cmpb	$51, 2(%rdx)
	je	.L15917
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26954
.L15917:
	cmpl	$66, %eax
	jne	.L15920
	movq	-8080(%rbp), %r9
	xorl	%esi, %esi
	movq	8(%r9), %rdi
	call	protect_from_queue
	movq	-8080(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L15919
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -7888(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L15919
.L26954:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L15918
	movq	-8080(%rbp), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -7888(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L15919
.L15918:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24800:
	movq	%rax, -7888(%rbp)
	jmp	.L15919
.L15916:
	movq	-8080(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26955
	movq	-8080(%rbp), %r10
	movq	24(%r10), %rsi
	testq	%rsi, %rsi
	movq	%rsi, -7888(%rbp)
	jne	.L15919
	movq	-8080(%rbp), %rbx
	movq	8(%rbx), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	-8080(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdi
	movq	%rdi, -7888(%rbp)
	jmp	.L15919
.L26955:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24800
.L15911:
	movq	-8088(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-8088(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L26956
.L15913:
	movq	-8088(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7880(%rbp)
	movq	%r12, 8(%rax)
	movq	-7880(%rbp), %rsi
	movq	%rbx, 16(%rsi)
	jmp	.L15906
.L26956:
	cmpq	16(%rsi), %rax
	jne	.L15913
	jmp	.L15906
.L26938:
	jne	.L15907
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-8088(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L15906
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -7880(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L15906
.L15903:
	testq	%rsi, %rsi
	je	.L26957
	movq	-8088(%rbp), %r11
	movq	24(%r11), %rdi
	testq	%rdi, %rdi
	movq	%rdi, -7880(%rbp)
	jne	.L15906
	movq	-8088(%rbp), %r12
	movq	8(%r12), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rcx
	movq	%rcx, -7880(%rbp)
	jmp	.L15906
.L26957:
	movq	-8088(%rbp), %r10
	movq	8(%r10), %rdi
	call	copy_to_reg
	movq	%rax, -7880(%rbp)
	jmp	.L15906
.L15896:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L15892
	movl	32(%rsi), %r15d
	jmp	.L15892
.L15895:
	cmpl	$7, %edx
	ja	.L15891
	jmp	.L15896
.L15880:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L26958
.L15882:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -8088(%rbp)
	movq	%r12, 8(%rax)
	movq	-8088(%rbp), %rax
	movq	%rbx, 16(%rax)
	jmp	.L15875
.L26958:
	cmpq	16(%r13), %rax
	jne	.L15882
	jmp	.L15875
.L26871:
	jne	.L15876
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L15875
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -8088(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L15875
.L15872:
	cmpq	$0, 16(%r13)
	je	.L26959
	movq	24(%r13), %r15
	testq	%r15, %r15
	movq	%r15, -8088(%rbp)
	jne	.L15875
	movq	8(%r13), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rsi
	movq	%rsi, -8088(%rbp)
	jmp	.L15875
.L26959:
	movq	8(%r13), %rdi
	call	copy_to_reg
	movq	%rax, -8088(%rbp)
	jmp	.L15875
.L26870:
	movq	144(%r14), %rax
	testq	%rax, %rax
	je	.L15867
	cmpq	%rax, %r13
	jne	.L15867
	jmp	.L15865
.L26869:
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L15865
	jmp	.L15866
.L15864:
	movq	-8080(%rbp), %rdx
	cmpb	$0, 2(%rdx)
	jne	.L15863
	cmpb	$0, 16(%r14)
	je	.L15863
	movq	8(%r14), %rdx
	movzbl	2(%r13), %edi
	movzbl	61(%rdx), %r9d
	shrb	$1, %r9b
	movzbl	%r9b, %esi
	cmpl	%esi, %edi
	je	.L15863
	movzbl	17(%rdx), %ecx
	movq	-8080(%rbp), %rdx
	shrb	$5, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, -8080(%rbp)
	jmp	.L15863
.L24361:
	movq	-8080(%rbp), %rdi
	movzwl	(%rdi), %edx
	jmp	.L15786
.L24366:
	movq	-8080(%rbp), %rbx
	movzwl	(%rbx), %edx
	jmp	.L15786
.L26868:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	%r14, %rdi
	movzbl	2(%r13), %edx
	movq	%rax, %rsi
	jmp	.L24799
.L15825:
	xorl	%r11d, %r11d
	testl	%r11d, %r11d
	je	.L24362
	movl	(%r13), %ecx
	movl	%ecx, %r9d
	andl	$134283263, %r9d
	cmpl	$66, %r9d
	je	.L26960
.L15841:
	andl	$268500991, %ecx
	cmpl	$268435519, %ecx
	je	.L25613
	movzbl	2(%r13), %edx
	xorl	%ecx, %ecx
	movq	%r14, %rdi
	movq	%r13, %rsi
	call	expand_expr
	cmpw	$61, (%r13)
	movq	%rax, -8080(%rbp)
	je	.L26961
.L15861:
	movl	(%r13), %eax
	andl	$134283263, %eax
	cmpl	$134217794, %eax
	je	.L24365
	movq	-8080(%rbp), %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L24366
	movq	-8080(%rbp), %rsi
	movzwl	(%rsi), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L15862
	cmpw	$54, %dx
	je	.L15862
	cmpw	$55, %dx
	je	.L15862
	cmpw	$58, %dx
	je	.L15862
	cmpw	$134, %dx
	je	.L15862
	cmpw	$56, %dx
	je	.L15862
	cmpw	$140, %dx
	je	.L15862
	xorl	%r8d, %r8d
	testl	%r8d, %r8d
	je	.L15786
.L15862:
	movl	$1, -7868(%rbp)
	jmp	.L15786
.L24365:
	movq	-8080(%rbp), %rcx
	movzwl	(%rcx), %edx
	jmp	.L15786
.L26961:
	cmpl	$52, 8(%r13)
	jbe	.L24364
	jmp	.L15861
.L26960:
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L15841
	movq	%r13, %rsi
	xorl	%ecx, %ecx
	movzbl	%al, %edx
	movq	%r14, %rdi
	call	expand_expr
	movq	%rax, -8080(%rbp)
	movq	%rax, %rsi
	movzbl	2(%rax), %eax
	cmpb	$51, %al
	je	.L15842
	testb	%al, %al
	je	.L15842
	cmpq	%r13, %rsi
	je	.L15844
	movq	%rsi, %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L26962
.L15843:
	movq	-8080(%rbp), %rdi
	call	copy_to_reg
	movq	%rax, -8080(%rbp)
.L15842:
	movl	$1, -7868(%rbp)
	jmp	.L24361
.L26962:
	movq	-8080(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L15843
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L15843
.L15844:
	movl	$1, %r12d
	jmp	.L15843
.L24362:
	movl	(%r13), %ecx
	jmp	.L15841
.L15834:
	movl	$1, %ebx
	jmp	.L15828
.L15835:
	xorl	%ebx, %ebx
	jmp	.L15828
.L15832:
	movq	8(%r13), %rdi
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L15834
	movq	16(%r13), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L15828
	jmp	.L15834
.L26867:
	cmpb	$51, 2(%r13)
	jne	.L15787
	call	gen_label_rtx
	movq	%rax, %r15
	call	gen_label_rtx
	movq	cfun(%rip), %rbx
	movq	%rax, -4160(%rbp)
	movq	16(%rbx), %r8
	movq	40(%r8), %rbx
	testq	%rbx, %rbx
	je	.L23712
.L15793:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26963
	call	emit_insn
	movq	%rax, 16(%rbx)
.L15792:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %r11
	movq	16(%rdx), %r12
	testq	%r11, %r11
	movq	%r11, %rbx
	movq	%r11, 40(%r12)
	jne	.L15793
.L23712:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L15795
	cmpl	$66, %eax
	je	.L26964
.L15799:
	cmpl	$75, %eax
	je	.L15803
	cmpl	$78, %eax
	je	.L15803
.L15798:
	call	do_pending_stack_adjust
	movq	cfun(%rip), %r10
	movq	%r15, %rsi
	movq	16(%r10), %rbx
	incl	4(%rbx)
	movq	32(%r14), %rdi
	call	jumpifnot
	call	start_cleanup_deferral
	movq	40(%r14), %rdi
	movq	-8088(%rbp), %rsi
	xorl	%edx, %edx
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %r8
	movq	16(%r8), %rdi
	movq	40(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L23714
.L15813:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26965
	call	emit_insn
	movq	%rax, 16(%rbx)
.L15812:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %r12
	movq	16(%rdx), %r9
	testq	%r12, %r12
	movq	%r12, %rbx
	movq	%r12, 40(%r9)
	jne	.L15813
.L23714:
	movq	-4160(%rbp), %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r15, %rdi
	call	emit_label
	call	start_cleanup_deferral
	movq	48(%r14), %rdi
	movq	-8088(%rbp), %rsi
	xorl	%edx, %edx
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %r15
	movq	16(%r15), %r14
	movq	40(%r14), %rbx
	testq	%rbx, %rbx
	je	.L23716
.L15820:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26966
	call	emit_insn
	movq	%rax, 16(%rbx)
.L15819:
	movq	cfun(%rip), %rcx
	movq	40(%rbx), %rdi
	movq	16(%rcx), %r10
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%r10)
	jne	.L15820
.L23716:
	movq	-4160(%rbp), %rdi
	jmp	.L25109
.L26966:
	movq	8(%rdi), %r8
	movq	8(%r8), %rsi
	movq	%rsi, 16(%rbx)
	call	emit_insn
	jmp	.L15819
.L26965:
	movq	8(%rdi), %r11
	movq	8(%r11), %rcx
	movq	%rcx, 16(%rbx)
	call	emit_insn
	jmp	.L15812
.L15803:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L26967
.L15805:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -8088(%rbp)
	movq	%r12, 8(%rax)
	movq	-8088(%rbp), %rax
	movq	%rbx, 16(%rax)
	jmp	.L15798
.L26967:
	cmpq	16(%r13), %rax
	jne	.L15805
	jmp	.L15798
.L26964:
	jne	.L15799
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L15798
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -8088(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L15798
.L15795:
	cmpq	$0, 16(%r13)
	je	.L26968
	movq	24(%r13), %r9
	testq	%r9, %r9
	movq	%r9, -8088(%rbp)
	jne	.L15798
	movq	8(%r13), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rax
.L24798:
	movq	%rax, -8088(%rbp)
	jmp	.L15798
.L26968:
	movq	8(%r13), %rdi
	call	copy_to_reg
	jmp	.L24798
.L26963:
	movq	8(%rdi), %rcx
	movq	8(%rcx), %r10
	movq	%r10, 16(%rbx)
	call	emit_insn
	jmp	.L15792
.L26866:
	movq	32(%r14), %rdi
	movq	const_int_rtx+512(%rip), %rsi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	call	expand_expr
	movq	cfun(%rip), %r11
	movq	16(%r11), %rcx
	movq	40(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L23852
.L15783:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26969
	call	emit_insn
	movq	%rax, 16(%rbx)
.L15782:
	movq	cfun(%rip), %rsi
	movq	40(%rbx), %r9
	movq	16(%rsi), %rdi
	testq	%r9, %r9
	movq	%r9, %rbx
	movq	%r9, 40(%rdi)
	jne	.L15783
	jmp	.L23852
.L26969:
	movq	8(%rdi), %rdx
	movq	8(%rdx), %r12
	movq	%r12, 16(%rbx)
	call	emit_insn
	jmp	.L15782
.L15772:
	movq	-7864(%rbp), %rax
	cmpb	$51, 2(%rax)
	je	.L14879
	cmpw	$61, (%rax)
	je	.L26970
.L15775:
	movq	-7864(%rbp), %rdi
	call	copy_to_reg
	jmp	.L14879
.L26970:
	cmpl	$52, 8(%rax)
	jbe	.L14879
	jmp	.L15775
.L14980:
	movq	-7864(%rbp), %rdi
	movq	-7856(%rbp), %rsi
	call	convert_move
	jmp	.L14959
.L14979:
	cmpb	$51, %al
	je	.L26971
.L14983:
	movq	-7864(%rbp), %rsi
	cmpw	$39, (%rsi)
	je	.L26972
	cmpb	$51, %al
	je	.L26973
	movq	-7864(%rbp), %rdi
	movq	-7856(%rbp), %rsi
	jmp	.L24797
.L26973:
	movq	-7864(%rbp), %rdi
	movq	-7856(%rbp), %rcx
	movq	%rdi, -7816(%rbp)
	movq	%rcx, -7824(%rbp)
	movq	%r14, %rdi
	call	expr_size
	movl	$8, %edx
	movq	-7864(%rbp), %rsi
	movq	%rax, %r14
	movq	16(%rsi), %rcx
	testq	%rcx, %rcx
	je	.L15574
	movl	32(%rcx), %edx
.L15574:
	movq	-7856(%rbp), %r10
	movq	16(%r10), %rax
	testq	%rax, %rax
	je	.L15575
	cmpl	32(%rax), %edx
	jb	.L15576
.L15571:
	testq	%rax, %rax
	movl	$8, -7804(%rbp)
	je	.L15572
	movl	32(%rax), %eax
.L24788:
	movl	%eax, -7804(%rbp)
.L15572:
	movq	-7864(%rbp), %rbx
	cmpb	$51, 2(%rbx)
	jne	.L25547
	movq	-7856(%rbp), %r11
	cmpb	$51, 2(%r11)
	jne	.L25546
	movq	-7864(%rbp), %rsi
	movzwl	(%rsi), %eax
	cmpl	$71, %eax
	je	.L15583
	cmpl	$66, %eax
	je	.L26974
.L15587:
	cmpl	$75, %eax
	je	.L15591
	cmpl	$78, %eax
	je	.L15591
.L15586:
	movq	-7856(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L15596
	cmpl	$66, %eax
	je	.L26975
.L15600:
	cmpl	$75, %eax
	je	.L15604
	cmpl	$78, %eax
	je	.L15604
.L15599:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L15609
	cmpl	$66, %eax
	je	.L26976
.L15613:
	cmpl	$75, %eax
	je	.L15617
	cmpl	$78, %eax
	je	.L15617
.L15612:
	movq	-7816(%rbp), %r10
	cmpw	$66, (%r10)
	jne	.L25545
	movq	-7824(%rbp), %r11
	cmpw	$66, (%r11)
	jne	.L25544
	testq	%r14, %r14
	je	.L25543
	cmpw	$54, (%r14)
	je	.L26977
.L15625:
	shrl	$3, -7804(%rbp)
	xorl	%edi, %edi
	mov	-7804(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -4128(%rbp)
	testl	%r12d, %r12d
	je	.L23708
.L15758:
	movslq	%r12d,%rsi
	movl	movstr_optab(,%rsi,4), %edx
	movq	%rsi, -4136(%rbp)
	cmpl	$1317, %edx
	je	.L15744
	cmpw	$54, (%r14)
	je	.L26978
.L15748:
	testb	$2, target_flags+3(%rip)
	je	.L15749
	movq	-4136(%rbp), %r8
	cmpw	$63, mode_bitsize(%r8,%r8)
.L24795:
	jbe	.L15744
.L15747:
	movslq	%edx,%r11
	leaq	(%r11,%r11,4), %rcx
	movq	%r11, -4144(%rbp)
	movq	insn_data+24(,%rcx,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L15751
	movq	-7816(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L15744
.L15751:
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L26979
.L15752:
	movq	72(%r15), %rax
	testq	%rax, %rax
	je	.L15753
	xorl	%esi, %esi
	movq	-4128(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L15744
.L15753:
	call	get_last_insn
	movl	$1, %edx
	movq	%r14, %rsi
	movl	%r12d, %edi
	movq	%rax, -4152(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r15), %rax
	testq	%rax, %rax
	jne	.L26980
.L15754:
	movq	-4144(%rbp), %rdx
	movq	-7816(%rbp), %rdi
	xorl	%eax, %eax
	movq	-7824(%rbp), %rsi
	movq	-4128(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24501
	movq	-4152(%rbp), %rdi
	call	delete_insns_since
.L15744:
	movq	-4136(%rbp), %rbx
	movzbl	mode_wider_mode(%rbx), %r12d
	testl	%r12d, %r12d
	jne	.L15758
.L23708:
	testb	$2, target_flags+3(%rip)
	movq	-7816(%rbp), %r15
	movl	$0, volatile_ok(%rip)
	setne	%r8b
	movq	8(%r15), %rsi
	movzbl	%r8b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%sil
	movq	%rax, %r15
	movq	-7824(%rbp), %rax
	movzbl	%sil, %edi
	movq	8(%rax), %rsi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%r14, %rsi
	movq	sizetype_tab(%rip), %rdi
	movq	%rax, %rbx
	movzbl	61(%rdi), %r9d
	shrb	$1, %r9b
	movzbl	%r9b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r14
	je	.L26981
.L15767:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r15, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r14, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %rdi
	movq	(%rdi), %r9
	movq	8(%rdx), %rdi
	movq	$0, (%r9)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %rbx
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%rbx), %r14
	movq	8(%r14), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r15)
	je	.L14959
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r15, %rdx
.L24796:
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L14959
.L26981:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r12
	xorl	%esi, %esi
	orb	$1, 49(%r12)
	movq	fn.1(%rip), %r11
	orb	$8, 18(%r11)
	movq	fn.1(%rip), %rcx
	orb	$64, 50(%rcx)
	movq	fn.1(%rip), %r10
	orb	$2, 18(%r10)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L15767
.L24501:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L14959
.L26980:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L15754
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L15754
.L26979:
	movq	-7824(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L15744
	jmp	.L15752
.L15749:
	movq	-4136(%rbp), %r10
	cmpw	$31, mode_bitsize(%r10,%r10)
	jmp	.L24795
.L26978:
	movq	mode_mask_array(,%rsi,8), %r15
	shrq	$1, %r15
	cmpq	%r15, 8(%r14)
	jbe	.L15747
	jmp	.L15748
.L26977:
	movq	8(%r14), %r12
	xorl	%r15d, %r15d
	movl	$17, %esi
.L15638:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23697
.L15635:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L15635
.L23697:
	testl	%edi, %edi
	je	.L15628
	movslq	%edi,%rbx
	movq	%rbx, %r8
	salq	$4, %r8
	addq	optab_table+240(%rip), %r8
	cmpl	$1317, 8(%r8)
	je	.L15637
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L15637
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L15637:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L15638
.L15628:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L15641
	movq	ix86_cost(%rip), %r10
	mov	40(%r10), %ecx
	cmpq	%rcx, %r15
	jae	.L15625
.L15642:
	movq	-7824(%rbp), %rsi
	testb	$2, target_flags+3(%rip)
	movq	-7816(%rbp), %r9
	movq	8(%r14), %r12
	setne	%r14b
	movq	-7816(%rbp), %rdi
	xorl	%ecx, %ecx
	movq	8(%rsi), %r8
	movq	$0, -1176(%rbp)
	movl	$0, -7836(%rbp)
	movq	%r8, -1200(%rbp)
	movzbl	%r14b, %edx
	movq	8(%r9), %rbx
	leal	5(,%rdx,4), %r14d
	movq	%rdi, -1232(%rbp)
	movzwl	(%rbx), %edx
	movq	%rbx, -7832(%rbp)
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L15647
	cmpw	$99, %dx
	je	.L15647
	cmpw	$98, %dx
	je	.L15647
.L15646:
	movl	%ecx, -1216(%rbp)
	xorl	%edx, %edx
	movq	-7832(%rbp), %rcx
	movzwl	(%rcx), %eax
	cmpw	$96, %ax
	je	.L15649
	cmpw	$98, %ax
	je	.L15649
.L15648:
	movq	-7832(%rbp), %r15
	movq	-7824(%rbp), %rax
	movl	%edx, -1168(%rbp)
	xorl	%ecx, %ecx
	movq	%r15, -1224(%rbp)
	movq	%rax, -1208(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L15652
	cmpw	$99, %dx
	je	.L15652
	cmpw	$98, %dx
	je	.L15652
.L15651:
	movl	-1168(%rbp), %r11d
	movl	%ecx, -1192(%rbp)
	movl	$0, -1188(%rbp)
	movl	$0, -1212(%rbp)
	testl	%r11d, %r11d
	je	.L15653
	movq	%r12, -1176(%rbp)
.L15653:
	movl	-1192(%rbp), %ebx
	movq	%r12, -1184(%rbp)
	testl	%ebx, %ebx
	je	.L15655
	movl	-1216(%rbp), %edi
	testl	%edi, %edi
	jne	.L15654
.L15655:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L15668:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23700
.L15665:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L15665
.L23700:
	testl	%edi, %edi
	je	.L15658
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L15667
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L15667
	movzbq	mode_size(%rbx), %r10
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r10
	addq	%rax, %r15
	movq	%rdx, %r12
.L15667:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L15668
.L15658:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L15654
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23702
.L15676:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %r11d
	cmpl	%r14d, %r11d
	cmovae	-7836(%rbp), %ecx
	movl	%ecx, -7836(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L15676
.L23702:
	movl	-1192(%rbp), %eax
	testl	%eax, %eax
	jne	.L15682
	movzwl	(%r8), %edx
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L15680
	cmpw	$54, %dx
	je	.L15680
	cmpw	$55, %dx
	je	.L15680
	cmpw	$58, %dx
	je	.L15680
	cmpw	$134, %dx
	je	.L15680
	cmpw	$56, %dx
	je	.L15680
	cmpw	$140, %dx
	je	.L15680
.L15682:
	movl	-1216(%rbp), %eax
	testl	%eax, %eax
	jne	.L15654
	movq	-7832(%rbp), %r9
	movzwl	(%r9), %edx
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L15684
	cmpw	$54, %dx
	je	.L15684
	cmpw	$55, %dx
	je	.L15684
	cmpw	$58, %dx
	je	.L15684
	cmpw	$134, %dx
	je	.L15684
	cmpw	$56, %dx
	je	.L15684
	cmpw	$140, %dx
	je	.L15684
.L15654:
	cmpl	$1, %r14d
	jbe	.L15687
.L15738:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23705
.L15694:
	movslq	%ecx,%rsi
	movzbl	mode_size(%rsi), %edx
	cmpl	%r14d, %edx
	cmovae	-7836(%rbp), %ecx
	movl	%ecx, -7836(%rbp)
	movzbl	mode_wider_mode(%rsi), %ecx
	testl	%ecx, %ecx
	jne	.L15694
.L23705:
	movl	-7836(%rbp), %eax
	testl	%eax, %eax
	je	.L15687
	movslq	-7836(%rbp),%r15
	movq	%r15, %r14
	salq	$4, %r14
	addq	optab_table+240(%rip), %r14
	movl	8(%r14), %ebx
	cmpl	$1317, %ebx
	je	.L15696
	movl	-7836(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	jb	.L15696
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%r10
	movq	$0, -7848(%rbp)
	leaq	(%r10,%r10,4), %rcx
	cmpq	%rdx, -1184(%rbp)
	movq	insn_data+16(,%rcx,8), %r12
	movq	%rdx, -6048(%rbp)
	movq	%r12, -4120(%rbp)
	leaq	-1232(%rbp), %r12
	jb	.L15696
	movl	-1168(%rbp), %ecx
.L15736:
	testl	%ecx, %ecx
	je	.L15700
	subq	%rdx, 56(%r12)
.L15700:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L15701
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L15702
	movl	-7836(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24791:
	movq	%rax, -7848(%rbp)
.L15701:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L15704
	movq	24(%r12), %rdi
	movl	-7836(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24792:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L26982
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L15710
	movzbl	mode_size(%r15), %r11d
	leal	7(%r11), %edx
	andl	$-8, %edx
.L15711:
	movq	cfun(%rip), %rdi
	andl	$33554432, %esi
	movq	16(%rdi), %r9
	leaq	8(%r9), %rdi
	movl	8(%r9), %ecx
	je	.L15712
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24793:
	movq	%r15, %rsi
	leal	(%rax,%rcx), %r8d
	salq	$4, %rsi
	movl	%r8d, (%rdi)
	addq	optab_table+384(%rip), %rsi
	movl	8(%rsi), %eax
	cmpl	$1317, %eax
	je	.L15714
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rcx
	movq	insn_data+24(,%rcx,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L15715
	movq	%r14, %rdi
	movl	-7836(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L26983
.L15715:
	leaq	(%rbx,%rbx,4), %r10
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r10,8)
.L24794:
	movq	%rax, %rdi
	call	emit_insn
.L15734:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L15735
	movq	-6048(%rbp), %r14
	addq	%r14, 56(%r12)
.L15735:
	movq	48(%r12), %rsi
	movq	-6048(%rbp), %rdx
	subq	-6048(%rbp), %rsi
	cmpq	%rdx, %rsi
	movq	%rsi, 48(%r12)
	jae	.L15736
.L15696:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L15738
.L15687:
	cmpq	$0, -1184(%rbp)
.L25554:
	je	.L14959
	jmp	.L25518
.L26983:
	movl	-7836(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L15715
.L15714:
	movzbl	mode_size(%r15), %r11d
	cmpl	%edx, %r11d
	je	.L26984
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r9b
	movzbl	%r9b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L15722:
	movl	-7836(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%edi, %edi
	testq	%rdi, %rdi
	movq	%rax, %rbx
	je	.L15731
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L26985
.L15731:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L15734
.L26985:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L15731
.L26984:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L15722
.L15712:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24793
.L15710:
	movzbl	mode_size(%r15), %ebx
	leal	1(%rbx), %edx
	andl	$-2, %edx
	jmp	.L15711
.L26982:
	movq	%rax, %rsi
	movq	-7848(%rbp), %rdi
	xorl	%eax, %eax
	call	*-4120(%rbp)
	jmp	.L24794
.L15704:
	movq	24(%r12), %rdi
	movl	-7836(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24792
.L15702:
	movl	-7836(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24791
.L15684:
	movq	-7832(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -1224(%rbp)
	jmp	.L15654
.L15680:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -1200(%rbp)
	jmp	.L15682
.L15652:
	movl	$1, %ecx
	jmp	.L15651
.L15649:
	movl	$1, %edx
	jmp	.L15648
.L15647:
	movl	$1, %ecx
	jmp	.L15646
.L15641:
	cmpq	$2, %r15
	ja	.L15625
	jmp	.L15642
.L15617:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L26986
.L15619:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L15612
.L26986:
	cmpq	16(%r14), %rax
	jne	.L15619
	jmp	.L15612
.L26976:
	cmpb	$51, 2(%r14)
	je	.L15610
	movq	8(%r14), %r12
	cmpw	$71, (%r12)
	je	.L26987
.L15610:
	cmpl	$66, %eax
	jne	.L15613
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L15612
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%rbx, 8(%rax)
	jmp	.L15612
.L26987:
	movq	8(%r12), %rsi
	movq	%r14, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L15611
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L15612
.L15611:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24790:
	movq	%rax, %r14
	jmp	.L15612
.L15609:
	cmpq	$0, 16(%r14)
	je	.L26988
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L24790
	movq	8(%r14), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L15612
.L26988:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L24790
.L15604:
	movq	-7856(%rbp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-7856(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-7856(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L26989
.L15606:
	movq	-7856(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7824(%rbp)
	movq	%r12, 8(%rax)
	movq	-7824(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L15599
.L26989:
	cmpq	16(%rcx), %rax
	jne	.L15606
	jmp	.L15599
.L26975:
	cmpb	$51, 2(%rdx)
	je	.L15597
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L26990
.L15597:
	cmpl	$66, %eax
	jne	.L15600
	movq	-7856(%rbp), %r11
	xorl	%esi, %esi
	movq	8(%r11), %rdi
	call	protect_from_queue
	movq	-7856(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L15599
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -7824(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L15599
.L26990:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L15598
	movq	-7856(%rbp), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -7824(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L15599
.L15598:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24789:
	movq	%rax, -7824(%rbp)
	jmp	.L15599
.L15596:
	movq	-7856(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L26991
	movq	-7856(%rbp), %rax
	movq	24(%rax), %r8
	testq	%r8, %r8
	movq	%r8, -7824(%rbp)
	jne	.L15599
	movq	-7856(%rbp), %rsi
	movq	8(%rsi), %r12
	movzbl	2(%r12), %edi
	call	gen_reg_rtx
	movq	-7856(%rbp), %r15
	movq	%rax, %rdi
	movq	8(%r15), %rsi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r9
	movq	%r9, -7824(%rbp)
	jmp	.L15599
.L26991:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24789
.L15591:
	movq	-7864(%rbp), %r12
	xorl	%esi, %esi
	movq	8(%r12), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-7864(%rbp), %rdx
	movq	%rax, %r12
	movq	16(%rdx), %rdi
	call	protect_from_queue
	movq	-7864(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L26992
.L15593:
	movq	-7864(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7816(%rbp)
	movq	%r12, 8(%rax)
	movq	-7816(%rbp), %r8
	movq	%rbx, 16(%r8)
	jmp	.L15586
.L26992:
	cmpq	16(%rsi), %rax
	jne	.L15593
	jmp	.L15586
.L26974:
	jne	.L15587
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, %rbx
	movq	-7864(%rbp), %rax
	cmpq	8(%rax), %rbx
	je	.L15586
	movq	%rax, %rdi
	call	copy_rtx
	movq	%rax, -7816(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L15586
.L15583:
	testq	%rcx, %rcx
	je	.L26993
	movq	-7864(%rbp), %r15
	movq	24(%r15), %r9
	testq	%r9, %r9
	movq	%r9, -7816(%rbp)
	jne	.L15586
	movq	-7864(%rbp), %r12
	movq	8(%r12), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rcx
	movq	%rcx, -7816(%rbp)
	jmp	.L15586
.L26993:
	movq	-7864(%rbp), %rax
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rax, -7816(%rbp)
	jmp	.L15586
.L15576:
	testq	%rcx, %rcx
	movl	$8, -7804(%rbp)
	je	.L15572
	movl	32(%rcx), %eax
	jmp	.L24788
.L15575:
	cmpl	$7, %edx
	ja	.L15571
	jmp	.L15576
.L26972:
	movq	8(%r14), %rdi
	call	int_size_in_bytes
	movl	%eax, -4084(%rbp)
	movq	-7864(%rbp), %rax
	cmpw	$39, (%rax)
	jne	.L25561
	movq	-7864(%rbp), %r8
	movq	8(%r8), %rcx
	movq	8(%rcx), %r15
	movl	(%rcx), %r14d
	cmpq	$0, 8(%r15)
	movslq	%r14d,%rdi
	sete	%r11b
	leaq	15(,%rdi,8), %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	leaq	32(%rsp), %r12
	movzbl	%r11b, %r10d
	movq	%r12, -4096(%rbp)
	movl	%r10d, -7800(%rbp)
	movl	-7800(%rbp), %eax
	cmpl	%r14d, %eax
	movl	%eax, -7792(%rbp)
	jge	.L23691
.L15555:
	movslq	-7792(%rbp),%r14
	movq	8(%rcx,%r14,8), %rsi
	movq	%r14, -4104(%rbp)
	movl	-4084(%rbp), %ecx
	movq	8(%rsi), %rax
	movq	16(%rsi), %r9
	testl	%ecx, %ecx
	movzbl	2(%rax), %r14d
	movq	8(%r9), %r15
	movslq	%r14d,%rdx
	movzbl	mode_size(%rdx), %ebx
	movq	%rdx, -4112(%rbp)
	movl	%ebx, -7796(%rbp)
	js	.L15528
	movslq	-4084(%rbp),%r12
	mov	%ebx, %edi
	leaq	(%rdi,%r15), %rbx
	cmpq	%r12, %rbx
	jle	.L15528
	movl	-4084(%rbp), %r10d
	subl	%r15d, %r10d
	movl	%r10d, -7796(%rbp)
	je	.L25560
.L15528:
	movq	-7856(%rbp), %r12
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L24536
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L15532
	cmpw	$54, %dx
	je	.L15532
	cmpw	$55, %dx
	je	.L15532
	cmpw	$58, %dx
	je	.L15532
	cmpw	$134, %dx
	je	.L15532
	cmpw	$56, %dx
	je	.L15532
	cmpw	$140, %dx
	je	.L15532
.L15531:
	movq	-7856(%rbp), %rcx
	movl	%r14d, %edi
	movzbl	2(%rcx), %eax
	testb	%al, %al
	je	.L24786
	movzbl	%al, %edi
.L24786:
	call	gen_reg_rtx
	movq	-7856(%rbp), %rsi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	emit_move_insn
	movzwl	(%r12), %edx
.L15530:
	cmpw	$66, %dx
	je	.L24536
.L15535:
	cmpw	$65, %dx
	je	.L26994
	leal	-67(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L15552
	cmpw	$54, %dx
	je	.L15552
	cmpw	$55, %dx
	je	.L15552
	cmpw	$58, %dx
	je	.L15552
	cmpw	$134, %dx
	je	.L15552
	cmpw	$56, %dx
	je	.L15552
	cmpw	$140, %dx
	je	.L15552
	cmpw	$61, %dx
	je	.L26995
.L15551:
	movl	-7796(%rbp), %edx
	movslq	-4084(%rbp),%r10
	movq	%r12, %rdi
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r14d, %r9d
	movl	%r14d, (%rsp)
	sall	$3, %edx
	mov	%edx, %esi
	movq	%r10, 8(%rsp)
	leaq	0(,%r15,8), %rdx
	call	extract_bit_field
.L24787:
	movq	-4104(%rbp), %r12
	movq	-4096(%rbp), %r11
	movq	%rax, (%r11,%r12,8)
.L15526:
	movq	-7864(%rbp), %r8
	incl	-7792(%rbp)
	movl	-7792(%rbp), %eax
	movq	8(%r8), %rcx
	cmpl	(%rcx), %eax
	jl	.L15555
.L23691:
	movq	cfun(%rip), %r15
	movq	16(%r15), %r9
	movq	40(%r9), %rbx
	testq	%rbx, %rbx
	je	.L23693
.L15561:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L26996
	call	emit_insn
	movq	%rax, 16(%rbx)
.L15560:
	movq	cfun(%rip), %r10
	movq	40(%rbx), %r14
	movq	16(%r10), %rdi
	testq	%r14, %r14
	movq	%r14, %rbx
	movq	%r14, 40(%rdi)
	jne	.L15561
	movq	-7864(%rbp), %rbx
	movq	8(%rbx), %rcx
.L23693:
	movl	-7800(%rbp), %r11d
	cmpl	(%rcx), %r11d
	jge	.L14959
.L15567:
	movslq	-7800(%rbp),%r9
	movq	-4096(%rbp), %r8
	salq	$3, %r9
	movq	8(%r9,%rcx), %r15
	movq	(%r8,%r9), %rsi
	movq	8(%r15), %rdi
	call	emit_move_insn
	movq	-7864(%rbp), %rax
	incl	-7800(%rbp)
	movl	-7800(%rbp), %edx
	movq	8(%rax), %r12
	cmpl	(%r12), %edx
	movq	%r12, %rcx
	jl	.L15567
	jmp	.L14959
.L26996:
	movq	8(%rdi), %rsi
	movq	8(%rsi), %rcx
	movq	%rcx, 16(%rbx)
	call	emit_insn
	jmp	.L15560
.L26995:
	movzbl	2(%r12), %esi
	cmpl	%r14d, %esi
	jne	.L15551
.L15552:
	movq	-4104(%rbp), %rdi
	movq	-4096(%rbp), %r14
	movq	%r12, (%r14,%rdi,8)
	jmp	.L15526
.L26994:
	testq	%r15, %r15
	jne	.L24359
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %r8
	movzbl	mode_size(%r8), %ebx
	cmpl	%ebx, -7796(%rbp)
	je	.L15541
.L15542:
	movzbq	2(%rdx), %rcx
	movzbq	mode_size(%rcx), %r9
	cmpq	%r9, %r15
	je	.L26997
.L15540:
	testq	%r15, %r15
	jne	.L22779
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbx
	movzbq	mode_size(%rbx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %r15
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r15, %rdi
	movl	%r14d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	jmp	.L24787
.L26997:
	movq	16(%r12), %rdx
	movzbq	2(%rdx), %rdi
	movzbl	mode_size(%rdi), %esi
	cmpl	%esi, -7796(%rbp)
	jne	.L15540
.L15541:
	xorl	%r10d, %r10d
	movq	-4104(%rbp), %r11
	movq	-4096(%rbp), %rax
	testq	%r15, %r15
	setne	%r10b
	leaq	(%rax,%r11,8), %rbx
	movq	8(%r12,%r10,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L15526
	cmpw	$54, %dx
	je	.L15526
	cmpw	$55, %dx
	je	.L15526
	cmpw	$58, %dx
	je	.L15526
	cmpw	$134, %dx
	je	.L15526
	cmpw	$56, %dx
	je	.L15526
	cmpw	$140, %dx
	je	.L15526
	cmpw	$61, %dx
	je	.L26998
.L15546:
	movslq	-4084(%rbp),%r8
	movl	-7796(%rbp), %r9d
	movl	%r14d, (%rsp)
	xorl	%edx, %edx
	movl	$1, %ecx
	sall	$3, %r9d
	movq	%r8, 8(%rsp)
	mov	%r9d, %esi
	xorl	%r8d, %r8d
	movq	(%rbx), %rdi
	movl	%r14d, %r9d
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L15526
.L26998:
	movzbl	2(%rcx), %r12d
	cmpl	%r14d, %r12d
	jne	.L15546
	jmp	.L15526
.L24359:
	movq	8(%r12), %rdx
	jmp	.L15542
.L24536:
	movl	%r14d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L15536
	cmpl	%eax, 32(%rdx)
	jae	.L15537
.L24358:
	movzwl	(%r12), %edx
	jmp	.L15535
.L15537:
	movl	%r14d, %edi
	leaq	0(,%r15,8), %rbx
	call	get_mode_alignment
	mov	%eax, %edi
	movq	%rbx, %rax
	cqto
	idivq	%rdi
	testq	%rdx, %rdx
	jne	.L24358
	movq	-4112(%rbp), %rax
	movzbl	mode_size(%rax), %edx
	cmpl	%edx, -7796(%rbp)
	jne	.L24358
	movl	%r14d, %edi
	call	gen_reg_rtx
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-4104(%rbp), %r11
	movq	-4096(%rbp), %r10
	movq	%r12, %rdi
	movl	%r14d, %esi
	movq	%r15, %rdx
	leaq	(%r10,%r11,8), %rbx
	movq	%rax, (%rbx)
	call	adjust_address_1
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L15526
.L15536:
	cmpl	$8, %eax
	ja	.L24358
	jmp	.L15537
.L15532:
	movq	-7856(%rbp), %r9
	movzbl	2(%r9), %ecx
	movzbl	%cl, %r8d
	cmpl	%r14d, %r8d
	je	.L15530
	testb	%cl, %cl
	je	.L15530
	jmp	.L15531
.L26971:
	cmpb	$29, 16(%r14)
	jne	.L14983
	movq	%r14, %rdi
	call	expr_size
	cmpw	$54, (%rax)
	movq	%rax, -7672(%rbp)
	je	.L26999
.L14984:
	movq	sizetype_tab(%rip), %rdi
	movq	-7672(%rbp), %rsi
	call	make_tree
	xorl	%esi, %esi
	movslq	32(%r14),%rdi
	movq	%rax, %r15
	call	size_int_wide
	movq	%r15, %rsi
	movl	$78, %edi
	movq	%rax, %rdx
	call	size_binop
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	movq	%rax, -4008(%rbp)
	call	expand_expr
	xorl	%edx, %edx
	movl	ptr_mode(%rip), %edi
	movq	%rax, %rsi
	movq	$0, -7760(%rbp)
	call	convert_to_mode
	movl	$8, %edx
	movq	-7856(%rbp), %rcx
	movq	-7864(%rbp), %r12
	movq	%rax, -7704(%rbp)
	movq	%rax, -7728(%rbp)
	movq	%rcx, -7720(%rbp)
	movq	%r12, -7712(%rbp)
	movq	16(%r12), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L15187
	movl	32(%rax), %edx
.L15187:
	movq	-7856(%rbp), %r14
	movq	16(%r14), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L15188
	cmpl	32(%rax), %edx
	jb	.L15189
.L15184:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L15185
	movl	32(%rcx), %r15d
.L15185:
	movq	-7864(%rbp), %rax
	cmpb	$51, 2(%rax)
	jne	.L25547
	movq	-7856(%rbp), %rdi
	cmpb	$51, 2(%rdi)
	jne	.L25546
	movq	-7864(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L15196
	cmpl	$66, %eax
	je	.L27000
.L15200:
	cmpl	$75, %eax
	je	.L15204
	cmpl	$78, %eax
	je	.L15204
.L15199:
	movq	-7856(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L15209
	cmpl	$66, %eax
	je	.L27001
.L15213:
	cmpl	$75, %eax
	je	.L15217
	cmpl	$78, %eax
	je	.L15217
.L15212:
	movq	-7704(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L15222
	cmpl	$66, %eax
	je	.L27002
.L15226:
	cmpl	$75, %eax
	je	.L15230
	cmpl	$78, %eax
	je	.L15230
.L15225:
	movq	-7712(%rbp), %rdx
	cmpw	$66, (%rdx)
	jne	.L25545
	movq	-7720(%rbp), %r11
	cmpw	$66, (%r11)
	jne	.L25544
	cmpq	$0, -7728(%rbp)
	je	.L25543
	movq	-7728(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L27003
.L15238:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -4024(%rbp)
	testl	%r12d, %r12d
	je	.L23675
.L15371:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L15357
	movq	-7728(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L27004
.L15361:
	testb	$2, target_flags+3(%rip)
	je	.L15362
	cmpw	$63, mode_bitsize(%r15,%r15)
.L24780:
	jbe	.L15357
.L15360:
	movslq	%edx,%rsi
	leaq	(%rsi,%rsi,4), %rcx
	movq	%rsi, -4032(%rbp)
	movq	insn_data+24(,%rcx,8), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L15364
	movq	-7712(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L15357
.L15364:
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L27005
.L15365:
	movq	72(%r14), %rax
	testq	%rax, %rax
	je	.L15366
	xorl	%esi, %esi
	movq	-4024(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L15357
.L15366:
	call	get_last_insn
	movl	$1, %edx
	movq	-7728(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -4040(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r14), %rax
	testq	%rax, %rax
	jne	.L27006
.L15367:
	movq	-4032(%rbp), %rdx
	movq	-7712(%rbp), %rdi
	xorl	%eax, %eax
	movq	-7720(%rbp), %rsi
	movq	-4024(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24499
	movq	-4040(%rbp), %rdi
	call	delete_insns_since
.L15357:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L15371
.L23675:
	testb	$2, target_flags+3(%rip)
	movq	-7712(%rbp), %r8
	movl	$0, volatile_ok(%rip)
	setne	%r10b
	movq	8(%r8), %rsi
	movzbl	%r10b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%bl
	movq	%rax, %r14
	movq	-7720(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%bl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-7728(%rbp), %rsi
	movq	sizetype_tab(%rip), %r9
	movq	%rax, %rbx
	movzbl	61(%r9), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L27007
.L15380:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %r8
	movq	8(%rdx), %rdi
	movq	(%r8), %rbx
	movq	$0, (%rbx)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r9
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r9), %r15
	movq	8(%r15), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	jne	.L27008
.L15369:
	movq	-7704(%rbp), %rbx
	cmpw	$54, (%rbx)
	je	.L27009
	movq	sizetype_tab(%rip), %r10
	movq	-7704(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	optab_table+16(%rip), %rsi
	movq	-7672(%rbp), %rdx
	xorl	%r9d, %r9d
	movzbl	61(%r10), %r12d
	movl	$3, (%rsp)
	shrb	$1, %r12b
	movzbl	%r12b, %edi
	call	expand_binop
	movq	-4008(%rbp), %rdi
	movq	%rax, %rbx
	call	highest_pow2_factor
	movq	-7704(%rbp), %rsi
	movq	-7864(%rbp), %rdi
	movq	%rax, %rdx
	call	offset_address
	movq	%rax, -7864(%rbp)
	call	gen_label_rtx
	xorl	%r9d, %r9d
	movq	%rax, -7760(%rbp)
	movq	const_int_rtx+512(%rip), %rsi
	movq	%rbx, %rdi
	movzbl	2(%rbx), %r8d
	movl	$107, %edx
	xorl	%ecx, %ecx
	movq	%rax, (%rsp)
	call	emit_cmp_and_jump_insns
.L15383:
	cmpq	const_int_rtx+512(%rip), %rbx
	je	.L15384
	movq	-7864(%rbp), %rdx
	cmpw	$66, (%rdx)
	movq	%rdx, -7776(%rbp)
	je	.L27010
	movq	-7864(%rbp), %rax
	movzbl	2(%rax), %edi
	call	get_mode_alignment
.L24781:
	movl	%eax, -7764(%rbp)
.L15386:
	movq	-7864(%rbp), %rsi
	movzbl	2(%rsi), %eax
	cmpb	$51, %al
	je	.L15389
	cmpw	$54, (%rbx)
	je	.L27011
.L15389:
	movq	-7864(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L15391
	cmpl	$66, %eax
	je	.L27012
.L15395:
	cmpl	$75, %eax
	je	.L15399
	cmpl	$78, %eax
	je	.L15399
.L15394:
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L15404
	cmpl	$66, %eax
	je	.L27013
.L15408:
	cmpl	$75, %eax
	je	.L15412
	cmpl	$78, %eax
	je	.L15412
.L15407:
	cmpw	$54, (%rbx)
	je	.L27014
.L15417:
	shrl	$3, -7764(%rbp)
	xorl	%edi, %edi
	mov	-7764(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r14d
	movq	%rax, -4056(%rbp)
	testl	%r14d, %r14d
	je	.L23689
.L15511:
	movslq	%r14d,%rcx
	movl	clrstr_optab(,%rcx,4), %edx
	movq	%rcx, -4064(%rbp)
	cmpl	$1317, %edx
	je	.L15498
	cmpw	$54, (%rbx)
	je	.L27015
.L15502:
	testb	$2, target_flags+3(%rip)
	je	.L15503
	movq	-4064(%rbp), %rax
	cmpw	$63, mode_bitsize(%rax,%rax)
.L24784:
	jbe	.L15498
.L15501:
	movslq	%edx,%r15
	leaq	(%r15,%r15,4), %r11
	movq	%r15, -4072(%rbp)
	movq	insn_data+24(,%r11,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L15505
	movq	-7776(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L15498
.L15505:
	movq	48(%r15), %rax
	testq	%rax, %rax
	je	.L15506
	xorl	%esi, %esi
	movq	-4056(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L15498
.L15506:
	call	get_last_insn
	movl	$1, %edx
	movq	%rbx, %rsi
	movl	%r14d, %edi
	movq	%rax, -4080(%rbp)
	call	convert_to_mode
	movq	%rax, %r12
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L27016
.L15507:
	movq	-4072(%rbp), %rcx
	movq	-7776(%rbp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	-4056(%rbp), %rdx
	leaq	(%rcx,%rcx,4), %r8
	call	*insn_data+16(,%r8,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24785
	movq	-4080(%rbp), %rdi
	call	delete_insns_since
.L15498:
	movq	-4064(%rbp), %rdx
	movzbl	mode_wider_mode(%rdx), %r14d
	testl	%r14d, %r14d
	jne	.L15511
.L23689:
	testb	$2, target_flags+3(%rip)
	movq	-7776(%rbp), %r14
	setne	%r12b
	movq	8(%r14), %rsi
	movzbl	%r12b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	sizetype_tab(%rip), %rsi
	movq	%rax, %r14
	movzbl	61(%rsi), %r9d
	movq	%rbx, %rsi
	shrb	$1, %r9b
	movzbl	%r9b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.0(%rip)
	movq	%rax, %r15
	je	.L27017
.L15516:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	const_int_rtx+512(%rip), %rsi
	movq	integer_types+40(%rip), %rdi
	movq	%rax, %r12
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.0(%rip), %rcx
	movq	%rax, (%rbx)
	movq	(%r12), %r9
	movq	8(%rcx), %rdi
	movq	(%r9), %rdx
	movq	$0, (%rdx)
	call	build_pointer_type
	movq	fn.0(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	movq	%r12, %rcx
	movl	$53, %edi
	movq	fn.0(%rip), %r8
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%r8), %r15
	xorl	%r8d, %r8d
	movq	8(%r15), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	jne	.L27018
.L15384:
	cmpq	$0, -7760(%rbp)
	je	.L14959
	movq	-7760(%rbp), %rdi
	call	emit_label
	jmp	.L14959
.L27018:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
.L24785:
	call	emit_insn
	jmp	.L15384
.L27017:
	movl	$.LC7, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.0(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.0(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.0, %edi
	movq	%rax, fn.0(%rip)
	call	ggc_add_tree_root
	movq	fn.0(%rip), %r11
	xorl	%esi, %esi
	orb	$1, 49(%r11)
	movq	fn.0(%rip), %r10
	orb	$8, 18(%r10)
	movq	fn.0(%rip), %rdi
	orb	$64, 50(%rdi)
	movq	fn.0(%rip), %rbx
	orb	$2, 18(%rbx)
	movq	fn.0(%rip), %rdi
	call	make_decl_rtl
	movq	fn.0(%rip), %rdi
	call	assemble_external
	jmp	.L15516
.L27016:
	movq	%r12, %rdi
	movl	%r14d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L15507
	movq	%r12, %rsi
	movl	%r14d, %edi
	call	copy_to_mode_reg
	movq	%rax, %r12
	jmp	.L15507
.L15503:
	movq	-4064(%rbp), %r10
	cmpw	$31, mode_bitsize(%r10,%r10)
	jmp	.L24784
.L27015:
	movq	mode_mask_array(,%rcx,8), %r12
	shrq	$1, %r12
	cmpq	%r12, 8(%rbx)
	jbe	.L15501
	jmp	.L15502
.L27014:
	movq	8(%rbx), %r14
	xorl	%r15d, %r15d
	movl	$17, %esi
.L15430:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23678
.L15427:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L15427
.L23678:
	testl	%edi, %edi
	je	.L15420
	movslq	%edi,%r12
	movq	%r12, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L15429
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L15429
	movzbq	mode_size(%r12), %r10
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%r10
	addq	%rax, %r15
	movq	%rdx, %r14
.L15429:
	movzbq	mode_size(%r12), %rsi
	cmpq	$1, %rsi
	ja	.L15430
.L15420:
	testq	%r14, %r14
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L15433
	movq	ix86_cost(%rip), %r11
	mov	40(%r11), %r12d
	cmpq	%r12, %r15
	jae	.L15417
.L15434:
	movq	8(%rbx), %r9
	movq	-7776(%rbp), %r15
	leaq	-272(%rbp), %r12
	testb	$2, target_flags+3(%rip)
	movq	$clear_by_pieces_1, -232(%rbp)
	movq	$0, -224(%rbp)
	setne	%dl
	xorl	%esi, %esi
	movq	%r15, -272(%rbp)
	movq	%r9, -248(%rbp)
	movq	8(%r15), %r8
	movq	$0, -240(%rbp)
	movl	$0, -7788(%rbp)
	movzbl	%dl, %ecx 
	movq	%r8, -264(%rbp)
	movzwl	(%r8), %edx
	leaq	5(,%rcx,4), %r15
	leaq	16(%r12), %rcx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L15438
	cmpw	$99, %dx
	je	.L15438
	cmpw	$98, %dx
	je	.L15438
.L15437:
	movl	%esi, (%rcx)
	movl	$0, 20(%r12)
	leaq	56(%r12), %rdx
	movzwl	(%r8), %eax
	xorl	%ecx, %ecx
	cmpw	$96, %ax
	je	.L15440
	cmpw	$98, %ax
	je	.L15440
.L15439:
	movl	%ecx, (%rdx)
	movl	56(%r12), %eax
	testl	%eax, %eax
	je	.L15441
	movq	24(%r12), %rsi
	movq	%rsi, 32(%r12)
.L15441:
	movl	16(%r12), %edi
	testl	%edi, %edi
	jne	.L15442
	movq	24(%r12), %r14
	movq	$0, -7784(%rbp)
	movl	$17, %esi
.L15455:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23681
.L15452:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %r11
	cmpq	%rsi, %r11
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L15452
.L23681:
	testl	%edi, %edi
	je	.L15445
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L15454
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L15454
	movzbq	mode_size(%rbx), %rsi
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, -7784(%rbp)
	movq	%rdx, %r14
.L15454:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L15455
.L15445:
	testq	%r14, %r14
	jne	.L25529
	cmpq	$2, -7784(%rbp)
	jbe	.L15442
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23683
.L15463:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%r15, %rdx
	cmovae	-7788(%rbp), %ecx
	movl	%ecx, -7788(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L15463
.L23683:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L15442
	movzwl	(%r8), %edx
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L15467
	cmpw	$54, %dx
	je	.L15467
	cmpw	$55, %dx
	je	.L15467
	cmpw	$58, %dx
	je	.L15467
	cmpw	$134, %dx
	je	.L15467
	cmpw	$56, %dx
	je	.L15467
	cmpw	$140, %dx
	je	.L15467
.L15442:
	cmpq	$1, %r15
	jbe	.L15470
.L15491:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23686
.L15477:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %r11
	cmpq	%r15, %r11
	cmovae	-7788(%rbp), %ecx
	movl	%ecx, -7788(%rbp)
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L15477
.L23686:
	movl	-7788(%rbp), %r15d
	testl	%r15d, %r15d
	je	.L15470
	movslq	-7788(%rbp),%r15
	movq	%r15, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	movl	8(%rcx), %ebx
	cmpl	$1317, %ebx
	je	.L15479
	movl	-7788(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	jb	.L15479
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rsi
	leaq	(%rsi,%rsi,4), %r9
	cmpq	%rdx, 24(%r12)
	movq	insn_data+16(,%r9,8), %r14
	movq	%r14, -4048(%rbp)
	movq	%rdx, %r14
	jb	.L15479
	movl	56(%r12), %ecx
.L15489:
	testl	%ecx, %ecx
	je	.L15483
	subq	%rdx, 32(%r12)
.L15483:
	movl	16(%r12), %ebx
	testl	%ebx, %ebx
	je	.L15484
	movq	(%r12), %rdi
	movl	-7788(%rbp), %esi
	movl	$1, %r8d
	movq	8(%r12), %rdx
	movq	32(%r12), %rcx
	call	adjust_automodify_address_1
.L24783:
	movl	-7788(%rbp), %edx
	movq	%rax, %rbx
	movq	48(%r12), %rdi
	movq	32(%r12), %rsi
	call	*40(%r12)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	*-4048(%rbp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L15488
	addq	%r14, 32(%r12)
.L15488:
	movq	24(%r12), %rdi
	movq	%r14, %rdx
	subq	%r14, %rdi
	cmpq	%r14, %rdi
	movq	%rdi, 24(%r12)
	jae	.L15489
.L15479:
	movzbq	mode_size(%r15), %r15
	cmpq	$1, %r15
	ja	.L15491
.L15470:
	cmpq	$0, 24(%r12)
	je	.L15384
	jmp	.L25451
.L15484:
	movq	(%r12), %rdi
	movl	-7788(%rbp), %esi
	movl	$1, %ecx
	movq	32(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24783
.L15467:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, 8(%r12)
	jmp	.L15442
.L15440:
	movl	$1, %ecx
	jmp	.L15439
.L15438:
	movl	$1, %esi
	jmp	.L15437
.L15433:
	cmpq	$2, %r15
	ja	.L15417
	jmp	.L15434
.L15412:
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbx), %rdi
	movq	%rax, %r14
	call	protect_from_queue
	cmpq	8(%rbx), %r14
	movq	%rax, %r12
	je	.L27019
.L15414:
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r14, 8(%rax)
	movq	%r12, 16(%rax)
	jmp	.L15407
.L27019:
	cmpq	16(%rbx), %rax
	jne	.L15414
	jmp	.L15407
.L27013:
	cmpb	$51, 2(%rbx)
	je	.L15405
	movq	8(%rbx), %r14
	cmpw	$71, (%r14)
	je	.L27020
.L15405:
	cmpl	$66, %eax
	jne	.L15408
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%rbx), %rax
	movq	%rax, %r12
	je	.L15407
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r12, 8(%rax)
	jmp	.L15407
.L27020:
	movq	8(%r14), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r14)
	movq	%rax, %r12
	je	.L15406
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L15407
.L15406:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24782:
	movq	%rax, %rbx
	jmp	.L15407
.L15404:
	cmpq	$0, 16(%rbx)
	je	.L27021
	movq	24(%rbx), %rax
	testq	%rax, %rax
	jne	.L24782
	movq	8(%rbx), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%rbx), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	16(%rbx), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbx), %rbx
	jmp	.L15407
.L27021:
	movq	8(%rbx), %rdi
	call	copy_to_reg
	jmp	.L24782
.L15399:
	movq	-7864(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-7864(%rbp), %r11
	movq	%rax, %r14
	movq	16(%r11), %rdi
	call	protect_from_queue
	movq	-7864(%rbp), %rdx
	movq	%rax, %r12
	cmpq	8(%rdx), %r14
	je	.L27022
.L15401:
	movq	-7864(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7776(%rbp)
	movq	%r14, 8(%rax)
	movq	-7776(%rbp), %rsi
	movq	%r12, 16(%rsi)
	jmp	.L15394
.L27022:
	cmpq	16(%rdx), %rax
	jne	.L15401
	jmp	.L15394
.L27012:
	jne	.L15395
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-7864(%rbp), %rcx
	movq	%rax, %r12
	cmpq	8(%rcx), %rax
	je	.L15394
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -7776(%rbp)
	movq	%r12, 8(%rax)
	jmp	.L15394
.L15391:
	movq	-7864(%rbp), %rsi
	cmpq	$0, 16(%rsi)
	je	.L27023
	movq	-7864(%rbp), %r9
	movq	24(%r9), %r15
	testq	%r15, %r15
	movq	%r15, -7776(%rbp)
	jne	.L15394
	movq	-7864(%rbp), %rax
	movq	8(%rax), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	-7864(%rbp), %r10
	movq	%rax, %rdi
	movq	%rax, 24(%r10)
	movq	-7864(%rbp), %r12
	movq	8(%r12), %rsi
	call	gen_move_insn
	movq	-7864(%rbp), %r14
	movq	%rax, %rdi
	movq	16(%r14), %rsi
	call	emit_insn_before
	movq	-7864(%rbp), %r8
	movq	24(%r8), %rdx
	movq	%rdx, -7776(%rbp)
	jmp	.L15394
.L27023:
	movq	8(%rsi), %rdi
	call	copy_to_reg
	movq	%rax, -7776(%rbp)
	jmp	.L15394
.L27011:
	movzbl	%al, %edx 
	movzbl	mode_size(%rdx), %edi
	cmpl	8(%rbx), %edi
	jne	.L15389
	movq	%rsi, %rdi
	movq	const_tiny_rtx(,%rdx,8), %rsi
	call	emit_move_insn
	jmp	.L15384
.L27010:
	movq	16(%rdx), %rax
	movl	$8, -7764(%rbp)
	testq	%rax, %rax
	je	.L15386
	movl	32(%rax), %eax
	jmp	.L24781
.L27009:
	movq	8(%rbx), %rsi
	movq	-7672(%rbp), %rdi
	negq	%rsi
	call	plus_constant_wide
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-7704(%rbp), %r14
	movq	-7864(%rbp), %rdi
	movl	$51, %esi
	movq	%rax, %rbx
	movq	8(%r14), %rdx
	call	adjust_address_1
	movq	%rax, -7864(%rbp)
	jmp	.L15383
.L27008:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L15369
.L27007:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %rsi
	orb	$1, 49(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %rcx
	orb	$8, 18(%rcx)
	movq	fn.1(%rip), %r11
	orb	$64, 50(%r11)
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L15380
.L24499:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L15369
.L27006:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L15367
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L15367
.L27005:
	movq	-7720(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L15357
	jmp	.L15365
.L15362:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L24780
.L27004:
	movq	mode_mask_array(,%r15,8), %r11
	shrq	$1, %r11
	cmpq	%r11, 8(%rsi)
	jbe	.L15360
	jmp	.L15361
.L27003:
	movq	8(%rcx), %r12
	xorl	%r14d, %r14d
	movl	$17, %esi
.L15251:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23664
.L15248:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %r9
	cmpq	%rsi, %r9
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L15248
.L23664:
	testl	%edi, %edi
	je	.L15241
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L15250
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L15250
	movzbq	mode_size(%rbx), %r8
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r8
	addq	%rax, %r14
	movq	%rdx, %r12
.L15250:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L15251
.L15241:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L15254
	movq	ix86_cost(%rip), %rdx
	mov	40(%rdx), %r10d
	cmpq	%r10, %r14
	jae	.L15238
.L15255:
	movq	-7728(%rbp), %r8
	movq	-7720(%rbp), %rsi
	movq	-7712(%rbp), %rdi
	movq	-7712(%rbp), %r9
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r14b
	movq	8(%rsi), %r8
	movq	$0, -1176(%rbp)
	movl	$0, -7740(%rbp)
	movq	%r8, -1200(%rbp)
	movzbl	%r14b, %ecx
	movq	8(%rdi), %rbx
	movq	%r9, -1232(%rbp)
	leal	5(,%rcx,4), %r14d
	xorl	%ecx, %ecx
	movq	%rbx, -7736(%rbp)
	movq	-7736(%rbp), %r11
	movzwl	(%r11), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L15260
	cmpw	$99, %dx
	je	.L15260
	cmpw	$98, %dx
	je	.L15260
.L15259:
	movq	-7736(%rbp), %r10
	movl	%ecx, -1216(%rbp)
	xorl	%edx, %edx
	movzwl	(%r10), %eax
	cmpw	$96, %ax
	je	.L15262
	cmpw	$98, %ax
	je	.L15262
.L15261:
	movl	%edx, -1168(%rbp)
	movq	-7720(%rbp), %rax
	xorl	%ecx, %ecx
	movq	-7736(%rbp), %rdx
	movq	%rax, -1208(%rbp)
	movq	%rdx, -1224(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L15265
	cmpw	$99, %dx
	je	.L15265
	cmpw	$98, %dx
	je	.L15265
.L15264:
	movl	-1168(%rbp), %r11d
	movl	%ecx, -1192(%rbp)
	movl	$0, -1188(%rbp)
	movl	$0, -1212(%rbp)
	testl	%r11d, %r11d
	je	.L15266
	movq	%r12, -1176(%rbp)
.L15266:
	movl	-1192(%rbp), %r9d
	movq	%r12, -1184(%rbp)
	testl	%r9d, %r9d
	je	.L15268
	movl	-1216(%rbp), %ebx
	testl	%ebx, %ebx
	jne	.L15267
.L15268:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L15281:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23667
.L15278:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L15278
.L23667:
	testl	%edi, %edi
	je	.L15271
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L15280
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L15280
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L15280:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L15281
.L15271:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L15267
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23669
.L15289:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %r9d
	cmpl	%r14d, %r9d
	cmovae	-7740(%rbp), %ecx
	movl	%ecx, -7740(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L15289
.L23669:
	movl	-1192(%rbp), %eax
	testl	%eax, %eax
	jne	.L15295
	movzwl	(%r8), %edx
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L15293
	cmpw	$54, %dx
	je	.L15293
	cmpw	$55, %dx
	je	.L15293
	cmpw	$58, %dx
	je	.L15293
	cmpw	$134, %dx
	je	.L15293
	cmpw	$56, %dx
	je	.L15293
	cmpw	$140, %dx
	je	.L15293
.L15295:
	movl	-1216(%rbp), %eax
	testl	%eax, %eax
	jne	.L15267
	movq	-7736(%rbp), %r10
	movzwl	(%r10), %edx
	leal	-67(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L15297
	cmpw	$54, %dx
	je	.L15297
	cmpw	$55, %dx
	je	.L15297
	cmpw	$58, %dx
	je	.L15297
	cmpw	$134, %dx
	je	.L15297
	cmpw	$56, %dx
	je	.L15297
	cmpw	$140, %dx
	je	.L15297
.L15267:
	cmpl	$1, %r14d
	jbe	.L15300
.L15351:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23672
.L15307:
	movslq	%ecx,%rdi
	movzbl	mode_size(%rdi), %edx
	cmpl	%r14d, %edx
	cmovae	-7740(%rbp), %ecx
	movl	%ecx, -7740(%rbp)
	movzbl	mode_wider_mode(%rdi), %ecx
	testl	%ecx, %ecx
	jne	.L15307
.L23672:
	movl	-7740(%rbp), %eax
	testl	%eax, %eax
	je	.L15300
	movslq	-7740(%rbp),%r15
	movq	%r15, %r14
	salq	$4, %r14
	addq	optab_table+240(%rip), %r14
	movl	8(%r14), %ebx
	cmpl	$1317, %ebx
	je	.L15309
	movl	-7740(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L15309
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rsi
	movq	$0, -7752(%rbp)
	leaq	(%rsi,%rsi,4), %r11
	cmpq	%rdx, -1184(%rbp)
	movq	insn_data+16(,%r11,8), %r12
	movq	%rdx, -6040(%rbp)
	movq	%r12, -4016(%rbp)
	leaq	-1232(%rbp), %r12
	jb	.L15309
	movl	-1168(%rbp), %ecx
.L15349:
	testl	%ecx, %ecx
	je	.L15313
	subq	%rdx, 56(%r12)
.L15313:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L15314
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L15315
	movl	-7740(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24776:
	movq	%rax, -7752(%rbp)
.L15314:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L15317
	movq	24(%r12), %rdi
	movl	-7740(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24777:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L27024
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L15323
	movzbl	mode_size(%r15), %r9d
	leal	7(%r9), %edx
	andl	$-8, %edx
.L15324:
	movq	cfun(%rip), %r10
	andl	$33554432, %esi
	movq	16(%r10), %r8
	leaq	8(%r8), %rdi
	movl	8(%r8), %ecx
	je	.L15325
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24778:
	leal	(%rax,%rcx), %r11d
	movl	%r11d, (%rdi)
	movq	%r15, %rdi
	salq	$4, %rdi
	addq	optab_table+384(%rip), %rdi
	movl	8(%rdi), %eax
	cmpl	$1317, %eax
	je	.L15327
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rcx
	movq	insn_data+24(,%rcx,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L15328
	movq	%r14, %rdi
	movl	-7740(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L27025
.L15328:
	leaq	(%rbx,%rbx,4), %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%rsi,8)
.L24779:
	movq	%rax, %rdi
	call	emit_insn
.L15347:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L15348
	movq	-6040(%rbp), %r14
	addq	%r14, 56(%r12)
.L15348:
	movq	48(%r12), %rdi
	movq	-6040(%rbp), %rdx
	subq	-6040(%rbp), %rdi
	cmpq	%rdx, %rdi
	movq	%rdi, 48(%r12)
	jae	.L15349
.L15309:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L15351
.L15300:
	cmpq	$0, -1184(%rbp)
	je	.L15369
	jmp	.L25518
.L27025:
	movl	-7740(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L15328
.L15327:
	movzbl	mode_size(%r15), %r9d
	cmpl	%edx, %r9d
	je	.L27026
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r8b
	movzbl	%r8b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L15335:
	movl	-7740(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%r10d, %r10d
	testq	%r10, %r10
	movq	%rax, %rbx
	je	.L15344
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L27027
.L15344:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L15347
.L27027:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L15344
.L27026:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L15335
.L15325:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24778
.L15323:
	movzbl	mode_size(%r15), %ebx
	leal	1(%rbx), %edx
	andl	$-2, %edx
	jmp	.L15324
.L27024:
	movq	%rax, %rsi
	movq	-7752(%rbp), %rdi
	xorl	%eax, %eax
	call	*-4016(%rbp)
	jmp	.L24779
.L15317:
	movq	24(%r12), %rdi
	movl	-7740(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24777
.L15315:
	movl	-7740(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24776
.L15297:
	movq	-7736(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -1224(%rbp)
	jmp	.L15267
.L15293:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -1200(%rbp)
	jmp	.L15295
.L15265:
	movl	$1, %ecx
	jmp	.L15264
.L15262:
	movl	$1, %edx
	jmp	.L15261
.L15260:
	movl	$1, %ecx
	jmp	.L15259
.L15254:
	cmpq	$2, %r14
	ja	.L15238
	jmp	.L15255
.L15230:
	movq	-7704(%rbp), %rbx
	xorl	%esi, %esi
	movq	8(%rbx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-7704(%rbp), %rcx
	movq	%rax, %r12
	movq	16(%rcx), %rdi
	call	protect_from_queue
	movq	-7704(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L27028
.L15232:
	movq	-7704(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7728(%rbp)
	movq	%r12, 8(%rax)
	movq	-7728(%rbp), %r14
	movq	%rbx, 16(%r14)
	jmp	.L15225
.L27028:
	cmpq	16(%rcx), %rax
	jne	.L15232
	jmp	.L15225
.L27002:
	cmpb	$51, 2(%rdx)
	je	.L15223
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L27029
.L15223:
	cmpl	$66, %eax
	jne	.L15226
	movq	-7704(%rbp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	movq	-7704(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L15225
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -7728(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L15225
.L27029:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L15224
	movq	-7704(%rbp), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -7728(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L15225
.L15224:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24775:
	movq	%rax, -7728(%rbp)
	jmp	.L15225
.L15222:
	movq	-7704(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L27030
	movq	-7704(%rbp), %rsi
	movq	24(%rsi), %rdi
	testq	%rdi, %rdi
	movq	%rdi, -7728(%rbp)
	jne	.L15225
	movq	-7704(%rbp), %r10
	movq	8(%r10), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	-7704(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r9
	movq	%r9, -7728(%rbp)
	jmp	.L15225
.L27030:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24775
.L15217:
	movq	-7856(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-7856(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-7856(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L27031
.L15219:
	movq	-7856(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7720(%rbp)
	movq	%r12, 8(%rax)
	movq	-7720(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L15212
.L27031:
	cmpq	16(%rcx), %rax
	jne	.L15219
	jmp	.L15212
.L27001:
	cmpb	$51, 2(%rdx)
	je	.L15210
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L27032
.L15210:
	cmpl	$66, %eax
	jne	.L15213
	movq	-7856(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	movq	-7856(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L15212
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -7720(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L15212
.L27032:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L15211
	movq	-7856(%rbp), %rax
	movzbl	2(%rax), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -7720(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L15212
.L15211:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24774:
	movq	%rax, -7720(%rbp)
	jmp	.L15212
.L15209:
	movq	-7856(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L27033
	movq	-7856(%rbp), %r9
	movq	24(%r9), %rsi
	testq	%rsi, %rsi
	movq	%rsi, -7720(%rbp)
	jne	.L15212
	movq	-7856(%rbp), %rdx
	movq	8(%rdx), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	-7856(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r8
	movq	%r8, -7720(%rbp)
	jmp	.L15212
.L27033:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24774
.L15204:
	movq	-7864(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-7864(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L27034
.L15206:
	movq	-7864(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7712(%rbp)
	movq	%r12, 8(%rax)
	movq	-7712(%rbp), %rsi
	movq	%rbx, 16(%rsi)
	jmp	.L15199
.L27034:
	cmpq	16(%rsi), %rax
	jne	.L15206
	jmp	.L15199
.L27000:
	jne	.L15200
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-7864(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L15199
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -7712(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L15199
.L15196:
	testq	%rsi, %rsi
	je	.L27035
	movq	-7864(%rbp), %r10
	movq	24(%r10), %r8
	testq	%r8, %r8
	movq	%r8, -7712(%rbp)
	jne	.L15199
	movq	-7864(%rbp), %r12
	movq	8(%r12), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdx
	movq	%rdx, -7712(%rbp)
	jmp	.L15199
.L27035:
	movq	-7864(%rbp), %r9
	movq	8(%r9), %rdi
	call	copy_to_reg
	movq	%rax, -7712(%rbp)
	jmp	.L15199
.L15189:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L15185
	movl	32(%rsi), %r15d
	jmp	.L15185
.L15188:
	cmpl	$7, %edx
	ja	.L15184
	jmp	.L15189
.L26999:
	movq	-7672(%rbp), %rdi
	movslq	32(%r14),%rcx
	cmpq	%rcx, 8(%rdi)
	jge	.L14984
	movq	-7864(%rbp), %rdx
	movq	-7856(%rbp), %r10
	movq	%rdx, -7656(%rbp)
	movq	%r10, -7664(%rbp)
	movq	16(%rdx), %rax
	movl	$8, %edx
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L14988
	movl	32(%rax), %edx
.L14988:
	movq	-7856(%rbp), %rbx
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L14989
	cmpl	32(%rax), %edx
	jb	.L14990
.L14985:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L14986
	movl	32(%rcx), %r15d
.L14986:
	movq	-7864(%rbp), %r12
	cmpb	$51, 2(%r12)
	jne	.L25547
	movq	-7856(%rbp), %r11
	cmpb	$51, 2(%r11)
	jne	.L25546
	movq	-7864(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L14997
	cmpl	$66, %eax
	je	.L27036
.L15001:
	cmpl	$75, %eax
	je	.L15005
	cmpl	$78, %eax
	je	.L15005
.L15000:
	movq	-7856(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L15010
	cmpl	$66, %eax
	je	.L27037
.L15014:
	cmpl	$75, %eax
	je	.L15018
	cmpl	$78, %eax
	je	.L15018
.L15013:
	movq	-7672(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L15023
	cmpl	$66, %eax
	je	.L27038
.L15027:
	cmpl	$75, %eax
	je	.L15031
	cmpl	$78, %eax
	je	.L15031
.L15026:
	movq	-7656(%rbp), %r9
	cmpw	$66, (%r9)
	jne	.L25545
	movq	-7664(%rbp), %r10
	cmpw	$66, (%r10)
	jne	.L25544
	cmpq	$0, -7672(%rbp)
	je	.L25543
	movq	-7672(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L27039
.L15039:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -3984(%rbp)
	testl	%r12d, %r12d
	je	.L23661
.L15172:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L15158
	movq	-7672(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L27040
.L15162:
	testb	$2, target_flags+3(%rip)
	je	.L15163
	cmpw	$63, mode_bitsize(%r15,%r15)
.L24773:
	jbe	.L15158
.L15161:
	movslq	%edx,%r10
	leaq	(%r10,%r10,4), %r8
	movq	%r10, -3992(%rbp)
	movq	insn_data+24(,%r8,8), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L15165
	movq	-7656(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L15158
.L15165:
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L27041
.L15166:
	movq	72(%r14), %rax
	testq	%rax, %rax
	je	.L15167
	xorl	%esi, %esi
	movq	-3984(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L15158
.L15167:
	call	get_last_insn
	movl	$1, %edx
	movq	-7672(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -4000(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r14), %rax
	testq	%rax, %rax
	jne	.L27042
.L15168:
	movq	-3992(%rbp), %rdx
	movq	-7656(%rbp), %rdi
	xorl	%eax, %eax
	movq	-7664(%rbp), %rsi
	movq	-3984(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24501
	movq	-4000(%rbp), %rdi
	call	delete_insns_since
.L15158:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L15172
.L23661:
	testb	$2, target_flags+3(%rip)
	movq	-7656(%rbp), %rcx
	movl	$0, volatile_ok(%rip)
	setne	%r14b
	movq	8(%rcx), %rsi
	movzbl	%r14b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%bl
	movq	%rax, %r14
	movq	-7664(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%bl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-7672(%rbp), %rsi
	movq	sizetype_tab(%rip), %r11
	movq	%rax, %rbx
	movzbl	61(%r11), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L27043
.L15181:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %rbx
	movq	8(%rdx), %rdi
	movq	(%rbx), %r11
	movq	$0, (%r11)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r15
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r15), %r10
	movq	8(%r10), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	je	.L14959
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	jmp	.L24796
.L27043:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r8
	orb	$1, 49(%r8)
	movq	fn.1(%rip), %r9
	orb	$8, 18(%r9)
	movq	fn.1(%rip), %rsi
	orb	$64, 50(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L15181
.L27042:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L15168
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L15168
.L27041:
	movq	-7664(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L15158
	jmp	.L15166
.L15163:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L24773
.L27040:
	movq	mode_mask_array(,%r15,8), %r9
	shrq	$1, %r9
	cmpq	%r9, 8(%rsi)
	jbe	.L15161
	jmp	.L15162
.L27039:
	movq	8(%rcx), %r12
	xorl	%r14d, %r14d
	movl	$17, %esi
.L15052:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23650
.L15049:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L15049
.L23650:
	testl	%edi, %edi
	je	.L15042
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L15051
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L15051
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r14
	movq	%rdx, %r12
.L15051:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L15052
.L15042:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L15055
	movq	ix86_cost(%rip), %r9
	mov	40(%r9), %ebx
	cmpq	%rbx, %r14
	jae	.L15039
.L15056:
	movq	-7672(%rbp), %r8
	movq	-7664(%rbp), %rdi
	movq	-7656(%rbp), %rdx
	movq	-7656(%rbp), %r10
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r14b
	movq	8(%rdi), %r8
	movq	$0, -1096(%rbp)
	movl	$0, -7684(%rbp)
	movq	%r8, -1120(%rbp)
	movzbl	%r14b, %ecx
	movq	8(%rdx), %r11
	movq	%r10, -1152(%rbp)
	leal	5(,%rcx,4), %r14d
	xorl	%ecx, %ecx
	movq	%r11, -7680(%rbp)
	movq	-7680(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L15061
	cmpw	$99, %dx
	je	.L15061
	cmpw	$98, %dx
	je	.L15061
.L15060:
	movq	-7680(%rbp), %rsi
	movl	%ecx, -1136(%rbp)
	xorl	%edx, %edx
	movzwl	(%rsi), %eax
	cmpw	$96, %ax
	je	.L15063
	cmpw	$98, %ax
	je	.L15063
.L15062:
	movq	-7680(%rbp), %r15
	movq	-7664(%rbp), %r9
	movl	%edx, -1088(%rbp)
	xorl	%ecx, %ecx
	movq	%r15, -1144(%rbp)
	movq	%r9, -1128(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L15066
	cmpw	$99, %dx
	je	.L15066
	cmpw	$98, %dx
	je	.L15066
.L15065:
	movl	-1088(%rbp), %eax
	movl	%ecx, -1112(%rbp)
	movl	$0, -1108(%rbp)
	movl	$0, -1132(%rbp)
	testl	%eax, %eax
	je	.L15067
	movq	%r12, -1096(%rbp)
.L15067:
	movl	-1112(%rbp), %eax
	movq	%r12, -1104(%rbp)
	testl	%eax, %eax
	je	.L15069
	movl	-1136(%rbp), %eax
	testl	%eax, %eax
	jne	.L15068
.L15069:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L15082:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23653
.L15079:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %r11
	cmpq	%rsi, %r11
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L15079
.L23653:
	testl	%edi, %edi
	je	.L15072
	movslq	%edi,%rbx
	movq	%rbx, %rdx
	salq	$4, %rdx
	addq	optab_table+240(%rip), %rdx
	cmpl	$1317, 8(%rdx)
	je	.L15081
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L15081
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L15081:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L15082
.L15072:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L15068
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23655
.L15090:
	movslq	%ecx,%rbx
	movzbl	mode_size(%rbx), %r9d
	cmpl	%r14d, %r9d
	cmovae	-7684(%rbp), %ecx
	movl	%ecx, -7684(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L15090
.L23655:
	movl	-1112(%rbp), %eax
	testl	%eax, %eax
	jne	.L15096
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L15094
	cmpw	$54, %dx
	je	.L15094
	cmpw	$55, %dx
	je	.L15094
	cmpw	$58, %dx
	je	.L15094
	cmpw	$134, %dx
	je	.L15094
	cmpw	$56, %dx
	je	.L15094
	cmpw	$140, %dx
	je	.L15094
.L15096:
	movl	-1136(%rbp), %r8d
	testl	%r8d, %r8d
	jne	.L15068
	movq	-7680(%rbp), %r11
	movzwl	(%r11), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L15098
	cmpw	$54, %dx
	je	.L15098
	cmpw	$55, %dx
	je	.L15098
	cmpw	$58, %dx
	je	.L15098
	cmpw	$134, %dx
	je	.L15098
	cmpw	$56, %dx
	je	.L15098
	cmpw	$140, %dx
	je	.L15098
.L15068:
	cmpl	$1, %r14d
	jbe	.L15101
.L15152:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23658
.L15108:
	movslq	%ecx,%r12
	movzbl	mode_size(%r12), %edx
	cmpl	%r14d, %edx
	cmovae	-7684(%rbp), %ecx
	movl	%ecx, -7684(%rbp)
	movzbl	mode_wider_mode(%r12), %ecx
	testl	%ecx, %ecx
	jne	.L15108
.L23658:
	movl	-7684(%rbp), %r14d
	testl	%r14d, %r14d
	je	.L15101
	movslq	-7684(%rbp),%r15
	movq	%r15, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	movl	8(%rcx), %ebx
	cmpl	$1317, %ebx
	je	.L15110
	movl	-7684(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L15110
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%r9
	leaq	-1152(%rbp), %r12
	leaq	(%r9,%r9,4), %rbx
	cmpq	%rdx, -1104(%rbp)
	movq	$0, -7696(%rbp)
	movq	insn_data+16(,%rbx,8), %rsi
	movq	%rdx, -6032(%rbp)
	movq	%rsi, -3976(%rbp)
	jb	.L15110
	movl	-1088(%rbp), %ecx
.L15150:
	testl	%ecx, %ecx
	je	.L15114
	subq	%rdx, 56(%r12)
.L15114:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L15115
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L15116
	movl	-7684(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24769:
	movq	%rax, -7696(%rbp)
.L15115:
	movl	40(%r12), %r8d
	testl	%r8d, %r8d
	je	.L15118
	movq	24(%r12), %rdi
	movl	-7684(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24770:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L27044
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L15124
	movzbl	mode_size(%r15), %r10d
	leal	7(%r10), %edx
	andl	$-8, %edx
.L15125:
	movq	cfun(%rip), %rcx
	andl	$33554432, %esi
	movq	16(%rcx), %rbx
	leaq	8(%rbx), %rdi
	movl	8(%rbx), %ecx
	je	.L15126
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24771:
	leal	(%rax,%rcx), %esi
	movl	%esi, (%rdi)
	movq	%r15, %rdi
	salq	$4, %rdi
	addq	optab_table+384(%rip), %rdi
	movl	8(%rdi), %eax
	cmpl	$1317, %eax
	je	.L15128
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %r9
	movq	insn_data+24(,%r9,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L15129
	movq	%r14, %rdi
	movl	-7684(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L27045
.L15129:
	leaq	(%rbx,%rbx,4), %r8
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r8,8)
.L24772:
	movq	%rax, %rdi
	call	emit_insn
.L15148:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L15149
	movq	-6032(%rbp), %r14
	addq	%r14, 56(%r12)
.L15149:
	movq	48(%r12), %rsi
	movq	-6032(%rbp), %rdx
	subq	-6032(%rbp), %rsi
	cmpq	%rdx, %rsi
	movq	%rsi, 48(%r12)
	jae	.L15150
.L15110:
	movzbl	mode_size(%r15), %r14d
	cmpl	$1, %r14d
	ja	.L15152
.L15101:
	cmpq	$0, -1104(%rbp)
	jmp	.L25554
.L27045:
	movl	-7684(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L15129
.L15128:
	movzbl	mode_size(%r15), %r10d
	cmpl	%edx, %r10d
	je	.L27046
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r11b
	movzbl	%r11b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L15136:
	movl	-7684(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%ecx, %ecx
	testq	%rcx, %rcx
	movq	%rax, %rbx
	je	.L15145
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %edi
	testl	%edi, %edi
	jne	.L27047
.L15145:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L15148
.L27047:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L15145
.L27046:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L15136
.L15126:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24771
.L15124:
	movzbl	mode_size(%r15), %r11d
	leal	1(%r11), %edx
	andl	$-2, %edx
	jmp	.L15125
.L27044:
	movq	%rax, %rsi
	movq	-7696(%rbp), %rdi
	xorl	%eax, %eax
	call	*-3976(%rbp)
	jmp	.L24772
.L15118:
	movq	24(%r12), %rdi
	movl	-7684(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24770
.L15116:
	movl	-7684(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24769
.L15098:
	movq	-7680(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -1144(%rbp)
	jmp	.L15068
.L15094:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -1120(%rbp)
	jmp	.L15096
.L15066:
	movl	$1, %ecx
	jmp	.L15065
.L15063:
	movl	$1, %edx
	jmp	.L15062
.L15061:
	movl	$1, %ecx
	jmp	.L15060
.L15055:
	cmpq	$2, %r14
	ja	.L15039
	jmp	.L15056
.L15031:
	movq	-7672(%rbp), %rbx
	xorl	%esi, %esi
	movq	8(%rbx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-7672(%rbp), %r11
	movq	%rax, %r12
	movq	16(%r11), %rdi
	call	protect_from_queue
	movq	-7672(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L27048
.L15033:
	movq	-7672(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7672(%rbp)
	movq	%r12, 8(%rax)
	movq	-7672(%rbp), %r14
	movq	%rbx, 16(%r14)
	jmp	.L15026
.L27048:
	cmpq	16(%rcx), %rax
	jne	.L15033
	jmp	.L15026
.L27038:
	cmpb	$51, 2(%rdx)
	je	.L15024
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L27049
.L15024:
	cmpl	$66, %eax
	jne	.L15027
	movq	-7672(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	movq	-7672(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L15026
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -7672(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L15026
.L27049:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L15025
	movq	-7672(%rbp), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -7672(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L15026
.L15025:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24768:
	movq	%rax, -7672(%rbp)
	jmp	.L15026
.L15023:
	movq	-7672(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L27050
	movq	-7672(%rbp), %rdi
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.L24768
	movq	-7672(%rbp), %r8
	movq	8(%r8), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	-7672(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rax
	movq	%rax, -7672(%rbp)
	jmp	.L15026
.L27050:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24768
.L15018:
	movq	-7856(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-7856(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-7856(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L27051
.L15020:
	movq	-7856(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7664(%rbp)
	movq	%r12, 8(%rax)
	movq	-7664(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L15013
.L27051:
	cmpq	16(%rcx), %rax
	jne	.L15020
	jmp	.L15013
.L27037:
	cmpb	$51, 2(%rdx)
	je	.L15011
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L27052
.L15011:
	cmpl	$66, %eax
	jne	.L15014
	movq	-7856(%rbp), %r11
	xorl	%esi, %esi
	movq	8(%r11), %rdi
	call	protect_from_queue
	movq	-7856(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L15013
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -7664(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L15013
.L27052:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L15012
	movq	-7856(%rbp), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -7664(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L15013
.L15012:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24767:
	movq	%rax, -7664(%rbp)
	jmp	.L15013
.L15010:
	movq	-7856(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L27053
	movq	-7856(%rbp), %rax
	movq	24(%rax), %rsi
	testq	%rsi, %rsi
	movq	%rsi, -7664(%rbp)
	jne	.L15013
	movq	-7856(%rbp), %rdx
	movq	8(%rdx), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	-7856(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r8
	movq	%r8, -7664(%rbp)
	jmp	.L15013
.L27053:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24767
.L15005:
	movq	-7864(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-7864(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L27054
.L15007:
	movq	-7864(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -7656(%rbp)
	movq	%r12, 8(%rax)
	movq	-7656(%rbp), %rsi
	movq	%rbx, 16(%rsi)
	jmp	.L15000
.L27054:
	cmpq	16(%rsi), %rax
	jne	.L15007
	jmp	.L15000
.L27036:
	jne	.L15001
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-7864(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L15000
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -7656(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L15000
.L14997:
	testq	%rsi, %rsi
	je	.L27055
	movq	-7864(%rbp), %r9
	movq	24(%r9), %r8
	testq	%r8, %r8
	movq	%r8, -7656(%rbp)
	jne	.L15000
	movq	-7864(%rbp), %r12
	movq	8(%r12), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rcx
	movq	%rcx, -7656(%rbp)
	jmp	.L15000
.L27055:
	movq	-7864(%rbp), %rax
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rax, -7656(%rbp)
	jmp	.L15000
.L14990:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L14986
	movl	32(%rsi), %r15d
	jmp	.L14986
.L14989:
	cmpl	$7, %edx
	ja	.L14985
	jmp	.L14990
.L14974:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L27056
.L14976:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -7864(%rbp)
	movq	%r12, 8(%rax)
	movq	-7864(%rbp), %r15
	movq	%rbx, 16(%r15)
	jmp	.L14969
.L27056:
	cmpq	16(%r13), %rax
	jne	.L14976
	jmp	.L14969
.L26865:
	jne	.L14970
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L14969
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -7864(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L14969
.L14966:
	cmpq	$0, 16(%r13)
	je	.L27057
	movq	24(%r13), %r11
	testq	%r11, %r11
	movq	%r11, -7864(%rbp)
	jne	.L14969
	movq	8(%r13), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rax
	movq	%rax, -7864(%rbp)
	jmp	.L14969
.L27057:
	movq	8(%r13), %rdi
	call	copy_to_reg
	movq	%rax, -7864(%rbp)
	jmp	.L14969
.L26864:
	movq	144(%r14), %rax
	testq	%rax, %rax
	je	.L14961
	cmpq	%rax, %r13
	jne	.L14961
	jmp	.L14959
.L26863:
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L14959
	jmp	.L14960
.L14958:
	movq	-7856(%rbp), %rdx
	cmpb	$0, 2(%rdx)
	jne	.L14957
	cmpb	$0, 16(%r14)
	je	.L14957
	movq	8(%r14), %rdx
	movzbl	2(%r13), %edi
	movzbl	61(%rdx), %r10d
	shrb	$1, %r10b
	movzbl	%r10b, %esi
	cmpl	%esi, %edi
	je	.L14957
	movzbl	17(%rdx), %ecx
	movq	-7856(%rbp), %rdx
	shrb	$5, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, -7856(%rbp)
	jmp	.L14957
.L24350:
	movq	-7856(%rbp), %r8
	movzwl	(%r8), %edx
	jmp	.L14880
.L26862:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	%r14, %rdi
	movzbl	2(%r13), %edx
	movq	%rax, %rsi
	jmp	.L24766
.L14919:
	xorl	%ecx, %ecx
	testl	%ecx, %ecx
	je	.L24351
	movl	(%r13), %ecx
	movl	%ecx, %r10d
	andl	$134283263, %r10d
	cmpl	$66, %r10d
	je	.L27058
.L14935:
	andl	$268500991, %ecx
	cmpl	$268435519, %ecx
	je	.L27059
	movzbl	2(%r13), %edx
	xorl	%ecx, %ecx
	movq	%r14, %rdi
	movq	%r13, %rsi
	call	expand_expr
	cmpw	$61, (%r13)
	movq	%rax, -7856(%rbp)
	je	.L27060
.L14955:
	movl	(%r13), %eax
	andl	$134283263, %eax
	cmpl	$134217794, %eax
	je	.L24354
	movq	-7856(%rbp), %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L24355
	movq	-7856(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L14956
	cmpw	$54, %dx
	je	.L14956
	cmpw	$55, %dx
	je	.L14956
	cmpw	$58, %dx
	je	.L14956
	cmpw	$134, %dx
	je	.L14956
	cmpw	$56, %dx
	je	.L14956
	cmpw	$140, %dx
	je	.L14956
	xorl	%esi, %esi
	testl	%esi, %esi
	je	.L14880
.L14956:
	movl	$1, -7644(%rbp)
	jmp	.L14880
.L24354:
	movq	-7856(%rbp), %rcx
	movzwl	(%rcx), %edx
	jmp	.L14880
.L27060:
	cmpl	$52, 8(%r13)
	ja	.L14955
.L24353:
	movq	-7856(%rbp), %r9
	movzwl	(%r9), %edx
	jmp	.L14880
.L27059:
	xorl	%r15d, %r15d
	xorl	%edx, %edx
	testl	%r15d, %r15d
	jne	.L14941
	movq	8(%r14), %rsi
	movzbl	16(%rsi), %eax
	cmpb	$6, %al
	je	.L14942
	cmpb	$10, %al
	je	.L14942
	cmpb	$11, %al
	je	.L14942
	cmpb	$12, %al
	je	.L14942
.L14941:
	movq	%rdx, %rsi
	xorl	%ecx, %ecx
	movq	%r14, %rdi
	xorl	%edx, %edx
	call	expand_expr
	movzwl	(%rax), %edx
	movq	%rax, %rbx
	cmpw	$66, %dx
	je	.L27061
.L14944:
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L14947
	cmpw	$54, %dx
	je	.L14947
	cmpw	$55, %dx
	je	.L14947
	cmpw	$58, %dx
	je	.L14947
	cmpw	$134, %dx
	je	.L14947
	cmpw	$56, %dx
	je	.L14947
	cmpw	$140, %dx
	je	.L14947
.L14946:
	movzbl	3(%r13), %edx
	movq	8(%r13), %rdi
	movq	%rbx, %rsi
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L14879
	movzbl	2(%rbx), %edx
	movzbl	2(%r13), %eax
	cmpb	%al, %dl
	je	.L14879
	testb	%dl, %dl
	je	.L14949
	movq	%rbx, %rsi
	movzbl	%al, %edi
	call	gen_lowpart_SUBREG
	movzbl	3(%rax), %ebx
	orb	$16, %bl
	movb	%bl, 3(%rax)
	andb	$-5, %bl
	movzbl	3(%r13), %r10d
	andb	$4, %r10b
	orb	%r10b, %bl
	movb	%bl, 3(%rax)
	jmp	.L14879
.L14949:
	movq	8(%r13), %r15
	movzbl	3(%r13), %ecx
	movzbl	%al, %edi
	movq	%rbx, %rdx
	movzbl	2(%r15), %esi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	jmp	.L14879
.L14947:
	cmpb	$0, 2(%rbx)
	jne	.L14946
	movq	8(%r14), %rcx
	movzbl	2(%r13), %edi
	movzbl	61(%rcx), %edx
	movzbl	3(%r13), %ecx
	shrb	$1, %dl
	shrb	$2, %cl
	movzbl	%dl, %esi
	andl	$1, %ecx
	movq	%rbx, %rdx
	call	convert_modes
	movzbl	3(%r13), %ecx
	movzbl	2(%r13), %esi
	movq	8(%r13), %r14
	movq	%rax, %rdx
	movzbl	2(%r14), %edi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, %rbx
	jmp	.L14946
.L27061:
	xorl	%r8d, %r8d
	testl	%r8d, %r8d
	je	.L14944
	testb	$8, 3(%rax)
	jne	.L14945
	movq	8(%r13), %rdi
	movq	8(%rax), %rsi
	call	reg_mentioned_p
	testl	%eax, %eax
	je	.L24352
.L14945:
	movq	%rbx, %rdi
	call	copy_to_reg
	movq	%rax, %rbx
.L24352:
	movzwl	(%rbx), %edx
	jmp	.L14944
.L14942:
	cmpq	$0, 8(%rsi)
	jne	.L14941
	movzbl	3(%r13), %ecx
	movzbl	17(%rsi), %r11d
	movl	$1, %edi
	movl	%ecx, %r12d
	shrb	$5, %r11b
	shrb	$2, %r12b
	andl	$1, %r11d
	andl	%r12d, %edi
	cmpl	%edi, %r11d
	je	.L14943
	call	signed_or_unsigned_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	convert
	movzbl	3(%r13), %ecx
	movq	%rax, %r14
.L14943:
	movq	8(%r13), %rsi
	shrb	$2, %cl
	movzbl	2(%rsi), %edi
	movl	$1, %esi
	andl	%ecx, %esi
	call	type_for_mode
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	convert
	movq	8(%r13), %rdx
	movq	%rax, %r14
	jmp	.L14941
.L27058:
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L14935
	movzbl	%al, %edx
	xorl	%ecx, %ecx
	movq	%r14, %rdi
	movq	%r13, %rsi
	call	expand_expr
	movq	%rax, -7856(%rbp)
	movq	%rax, %rdx
	movzbl	2(%rax), %eax
	cmpb	$51, %al
	je	.L14936
	testb	%al, %al
	je	.L14936
	cmpq	%r13, %rdx
	je	.L14938
	movq	%rdx, %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L27062
.L14937:
	movq	-7856(%rbp), %rdi
	call	copy_to_reg
	movq	%rax, -7856(%rbp)
.L14936:
	movl	$1, -7644(%rbp)
	jmp	.L24353
.L27062:
	movq	-7856(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L14937
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L14937
.L14938:
	movl	$1, %r12d
	jmp	.L14937
.L24351:
	movl	(%r13), %ecx
	jmp	.L14935
.L14928:
	movl	$1, %ebx
	jmp	.L14922
.L14929:
	xorl	%ebx, %ebx
	jmp	.L14922
.L14926:
	movq	8(%r13), %rdi
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L14928
	movq	16(%r13), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L14922
	jmp	.L14928
.L26861:
	cmpb	$51, 2(%r13)
	jne	.L14881
	call	gen_label_rtx
	movq	%rax, %r15
	call	gen_label_rtx
	movq	cfun(%rip), %rbx
	movq	%rax, -3968(%rbp)
	movq	16(%rbx), %r11
	movq	40(%r11), %rbx
	testq	%rbx, %rbx
	je	.L23643
.L14887:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L27063
	call	emit_insn
	movq	%rax, 16(%rbx)
.L14886:
	movq	cfun(%rip), %r9
	movq	40(%rbx), %rdi
	movq	16(%r9), %r8
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%r8)
	jne	.L14887
.L23643:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L14889
	cmpl	$66, %eax
	je	.L27064
.L14893:
	cmpl	$75, %eax
	je	.L14897
	cmpl	$78, %eax
	je	.L14897
.L14892:
	call	do_pending_stack_adjust
	movq	cfun(%rip), %rdx
	movq	%r15, %rsi
	movq	16(%rdx), %r12
	incl	4(%r12)
	movq	32(%r14), %rdi
	call	jumpifnot
	call	start_cleanup_deferral
	movq	40(%r14), %rdi
	movq	-7864(%rbp), %rsi
	xorl	%edx, %edx
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %rbx
	movq	16(%rbx), %r11
	movq	40(%r11), %rbx
	testq	%rbx, %rbx
	je	.L23645
.L14907:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L27065
	call	emit_insn
	movq	%rax, 16(%rbx)
.L14906:
	movq	cfun(%rip), %r10
	movq	40(%rbx), %rdi
	movq	16(%r10), %rcx
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%rcx)
	jne	.L14907
.L23645:
	movq	-3968(%rbp), %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r15, %rdi
	call	emit_label
	call	start_cleanup_deferral
	movq	48(%r14), %rdi
	movq	-7864(%rbp), %rsi
	xorl	%edx, %edx
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %r15
	movq	16(%r15), %r14
	movq	40(%r14), %rbx
	testq	%rbx, %rbx
	je	.L23647
.L14914:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L27066
	call	emit_insn
	movq	%rax, 16(%rbx)
.L14913:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %r12
	movq	16(%rdx), %r8
	testq	%r12, %r12
	movq	%r12, %rbx
	movq	%r12, 40(%r8)
	jne	.L14914
.L23647:
	movq	-3968(%rbp), %rdi
	call	emit_label
	movq	cfun(%rip), %r9
	movq	16(%r9), %rbx
	decl	4(%rbx)
	jmp	.L14879
.L27066:
	movq	8(%rdi), %r11
	movq	8(%r11), %rsi
	movq	%rsi, 16(%rbx)
	call	emit_insn
	jmp	.L14913
.L27065:
	movq	8(%rdi), %r9
	movq	8(%r9), %r8
	movq	%r8, 16(%rbx)
	call	emit_insn
	jmp	.L14906
.L14897:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L27067
.L14899:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -7864(%rbp)
	movq	%r12, 8(%rax)
	movq	-7864(%rbp), %rax
	movq	%rbx, 16(%rax)
	jmp	.L14892
.L27067:
	cmpq	16(%r13), %rax
	jne	.L14899
	jmp	.L14892
.L27064:
	jne	.L14893
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L14892
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, -7864(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L14892
.L14889:
	cmpq	$0, 16(%r13)
	je	.L27068
	movq	24(%r13), %rcx
	testq	%rcx, %rcx
	movq	%rcx, -7864(%rbp)
	jne	.L14892
	movq	8(%r13), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r10
	movq	%r10, -7864(%rbp)
	jmp	.L14892
.L27068:
	movq	8(%r13), %rdi
	call	copy_to_reg
	movq	%rax, -7864(%rbp)
	jmp	.L14892
.L27063:
	movq	8(%rdi), %rdx
	movq	8(%rdx), %r12
	movq	%r12, 16(%rbx)
	call	emit_insn
	jmp	.L14886
.L26860:
	movq	32(%r14), %rdi
	movq	const_int_rtx+512(%rip), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	cfun(%rip), %rdx
	movq	16(%rdx), %r12
	movq	40(%r12), %rbx
	testq	%rbx, %rbx
	je	.L23641
.L14877:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L27069
	call	emit_insn
	movq	%rax, 16(%rbx)
.L14876:
	movq	cfun(%rip), %rsi
	movq	40(%rbx), %rcx
	movq	16(%rsi), %r10
	testq	%rcx, %rcx
	movq	%rcx, %rbx
	movq	%rcx, 40(%r10)
	jne	.L14877
.L23641:
	movq	40(%r14), %rdi
	movq	%r13, %rsi
	xorl	%edx, %edx
	call	store_expr
	jmp	.L14879
.L27069:
	movq	8(%rdi), %r9
	movq	8(%r9), %r8
	movq	%r8, 16(%rbx)
	call	emit_insn
	jmp	.L14876
.L26859:
	cmpl	$52, 8(%r13)
	ja	.L14870
	movl	-2716(%rbp), %edi
	call	gen_reg_rtx
	movq	%rax, %r13
	jmp	.L14870
.L26858:
	cmpw	$66, (%r15)
	jne	.L14869
	xorl	%esi, %esi
	movq	%r15, %rdi
	movq	%r14, %rdx
	movl	$rtx_addr_varies_p, %ecx
	call	true_dependence
	testl	%eax, %eax
	jne	.L14794
	jmp	.L14869
.L26857:
	movq	8(%r15), %r15
	cmpw	$61, (%r15)
	jne	.L14866
	cmpl	$52, 8(%r15)
	ja	.L14866
.L24497:
	xorl	%r12d, %r12d
	jmp	.L14794
.L14846:
	movq	32(%rbx), %rsi
	movq	%r14, %rdi
.L24765:
	xorl	%edx, %edx
	call	safe_from_p
	movl	%eax, %r12d
	jmp	.L14794
.L14819:
	movq	32(%rbx), %rsi
	xorl	%edx, %edx
	movq	%r14, %rdi
	xorl	%r12d, %r12d
	call	safe_from_p
	testl	%eax, %eax
	je	.L14794
	movq	%r14, %rdi
	movq	40(%rbx), %rsi
.L25106:
	xorl	%edx, %edx
	call	safe_from_p
	testl	%eax, %eax
	je	.L14794
	jmp	.L14869
.L14822:
	movzbl	%dl, %eax
	subl	$41, %eax
	cmpl	$80, %eax
	ja	.L14823
	mov	%eax, %esi
	jmp	*.L14854(,%rsi,8)
	.section	.rodata
	.align 8
	.align 4
.L14854:
	.quad	.L14833
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14851
	.quad	.L14839
	.quad	.L23173
	.quad	.L14845
	.quad	.L14846
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14823
	.quad	.L14847
	.quad	.L14823
	.quad	.L14843
	.quad	.L14824
	.text
.L14824:
	movq	32(%rbx), %rdi
	call	staticp
	testl	%eax, %eax
	jne	.L14869
	testb	$4, 18(%rbx)
	jne	.L14869
	movq	32(%rbx), %rsi
	xorl	%edx, %edx
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L14869
	movq	32(%rbx), %rbx
	movzbq	16(%rbx), %r11
	cmpb	$100, tree_code_type(%r11)
	je	.L27070
.L14823:
	testq	%r15, %r15
	jne	.L24265
	movzbl	16(%rbx), %edi
	xorl	%r12d, %r12d
	call	first_rtl_op
	cmpl	%eax, %r12d
	movl	%eax, -3956(%rbp)
	jge	.L23639
.L14861:
	movslq	%r12d,%rdi
	movq	32(%rbx,%rdi,8), %rsi
	testq	%rsi, %rsi
	jne	.L27071
.L14858:
	incl	%r12d
	cmpl	-3956(%rbp), %r12d
	jl	.L14861
.L23639:
	cmpb	$-110, 16(%rbx)
	jbe	.L14803
	movq	%r14, %rdi
	movq	%rbx, %rsi
	xorl	%r12d, %r12d
	call	*lang_hooks+80(%rip)
	testl	%eax, %eax
	je	.L14794
	jmp	.L14803
.L27071:
	xorl	%edx, %edx
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L14858
	jmp	.L24497
.L27070:
	movq	144(%rbx), %rax
	testq	%rax, %rax
	je	.L24497
	cmpw	$66, (%rax)
	jne	.L24497
	movq	8(%rax), %r15
	jmp	.L14823
.L14833:
	cmpw	$66, (%r14)
	jne	.L14823
	movq	%rbx, %rdi
	call	get_alias_set
	xorl	%edi, %edi
	movq	%rax, %rsi
	movq	16(%r14), %rax
	testq	%rax, %rax
	je	.L14838
	movq	(%rax), %rdi
.L14838:
	call	alias_sets_conflict_p
	xorl	%r12d, %r12d
	testl	%eax, %eax
	jne	.L14794
	jmp	.L14823
.L14851:
	movq	%r14, %rdi
	movq	40(%rbx), %rsi
	jmp	.L24765
.L14839:
	movzwl	(%r14), %eax
	cmpw	$61, %ax
	je	.L27072
.L14842:
	cmpw	$66, %ax
	jne	.L14823
	jmp	.L24497
.L27072:
	cmpl	$52, 8(%r14)
	jbe	.L24497
	jmp	.L14842
.L14845:
	movq	48(%rbx), %r15
	jmp	.L14823
.L14847:
	movq	48(%rbx), %r15
	testq	%r15, %r15
	jne	.L24265
	movzbl	18(%rbx), %eax
	movl	$1, %r12d
	testb	$16, %al
	jne	.L14794
	movq	32(%rbx), %rsi
	orb	$16, %al
	xorl	%edx, %edx
	movb	%al, 18(%rbx)
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L14850
	andb	$-17, 18(%rbx)
	jmp	.L24497
.L14850:
	movq	save_expr_list.2(%rip), %rdx
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	tree_cons
	movq	%rax, save_expr_list.2(%rip)
	jmp	.L14869
.L14843:
	cmpq	$0, 32(%rbx)
	jne	.L24497
	movq	40(%rbx), %r15
	jmp	.L14823
.L14809:
	cmpb	$2, %dl
	je	.L27073
	testb	%dl, %dl
	sete	%bl
	movzbl	%bl, %r12d
	jmp	.L14794
.L27073:
	movq	32(%rbx), %rsi
	xorl	%r12d, %r12d
	testq	%rsi, %rsi
	jne	.L27074
.L14812:
	movq	(%rbx), %rsi
	movq	%r14, %rdi
	testq	%rsi, %rsi
	jne	.L25106
	jmp	.L14869
.L27074:
	xorl	%edx, %edx
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L14794
	jmp	.L14812
.L26856:
	xorl	%edx, %edx
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	$0, save_expr_list.2(%rip)
	call	safe_from_p
	movq	save_expr_list.2(%rip), %rdx
	movl	%eax, %r12d
	testq	%rdx, %rdx
	je	.L14794
.L14802:
	movq	24(%rdx), %r14
	andb	$-17, 18(%r14)
	movq	(%rdx), %rdx
	testq	%rdx, %rdx
	jne	.L14802
	jmp	.L14794
.L26855:
	movq	8(%r13), %r14
	cmpw	$61, (%r14)
	jne	.L14795
	cmpl	$52, 8(%r14)
	jbe	.L24497
	jmp	.L14795
.L26854:
	movq	8(%r13), %rax
	movq	global_rtl+72(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L14869
	cmpw	$75, (%rax)
	jne	.L14790
	cmpq	%rdx, 8(%rax)
	jne	.L14790
	jmp	.L14869
.L26853:
	movq	112(%rax), %rax
	testq	%rax, %rax
	je	.L14793
	cmpb	$25, 16(%rax)
	jne	.L14793
	jmp	.L14792
	.p2align 6,,7
.L11787:
	cmpl	$2, ix86_branch_cost(%rip)
	jle	.L11788
	movq	-6920(%rbp), %r14
	movq	40(%r14), %rdi
	call	integer_pow2p
.L24659:
	testl	%eax, %eax
	je	.L11786
	movq	-9552(%rbp), %rsi
	movq	32(%rsi), %r11
	movzbq	16(%r11), %r10
	cmpb	$60, tree_code_type(%r10)
	jne	.L11786
	movq	-6920(%rbp), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$59, %al
	je	.L27075
	cmpb	$60, %al
	je	.L27076
	cmpb	$86, %al
	je	.L27077
	movq	optab_table+160(%rip), %rcx
	movq	%rcx, -6936(%rbp)
.L11791:
	movq	-9552(%rbp), %rdx
	movq	-6928(%rbp), %r15
	cmpq	40(%rdx), %r15
	je	.L27078
.L11800:
	movq	-6928(%rbp), %rsi
	xorl	%r14d, %r14d
	movq	%r13, %r12
	testq	%r13, %r13
	movq	%rsi, -6944(%rbp)
	je	.L11880
	movq	8(%rsi), %rax
	testq	%rax, %rax
	je	.L11805
	movq	32(%rax), %rdx
	testq	%rdx, %rdx
	je	.L11805
	cmpb	$25, 16(%rdx)
	je	.L11805
	cmpb	$18, 16(%rax)
	je	.L27079
.L11806:
	cmpb	$51, 2(%r13)
	je	.L11880
.L11805:
	movzwl	(%r13), %eax
	cmpw	$66, %ax
	movl	%eax, %ecx
	je	.L27080
.L11803:
	cmpw	$63, %cx
	je	.L27081
.L11808:
	movl	$1, %eax
	testl	%eax, %eax
	jne	.L27082
	movq	-6928(%rbp), %r9
	movzbl	16(%r9), %esi
	movl	%esi, %edx
	movzbl	%dl, %r11d 
	movsbl	tree_code_type(%r11),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L11816
	mov	%eax, %ebx
	jmp	*.L11874(,%rbx,8)
	.section	.rodata
	.align 8
	.align 4
.L11874:
	.quad	.L11830
	.quad	.L11832
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11832
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11880
	.quad	.L11817
	.quad	.L11835
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11835
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11816
	.quad	.L11822
	.text
.L11817:
	movq	-6928(%rbp), %rax
	movq	144(%rax), %rdx
	testq	%rdx, %rdx
	movq	%rdx, %r14
	jne	.L24262
	xorl	%r14d, %r14d
.L11816:
	testq	%r14, %r14
	movl	$1, %ebx
	je	.L11807
.L24262:
	cmpw	$63, (%r14)
	je	.L27083
.L11877:
	movq	%r12, %rdi
	movq	%r14, %rsi
	xorl	%ebx, %ebx
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L11807
	cmpw	$66, (%r12)
	je	.L27084
.L11880:
	movl	$1, %ebx
.L11807:
	xorl	%esi, %esi
	movq	-9552(%rbp), %r15
	movl	-2716(%rbp), %edx
	testl	%ebx, %ebx
	cmovne	%r13, %rsi
	xorl	%ecx, %ecx
	cmpl	$1, ix86_branch_cost(%rip)
	setle	%cl
	movq	32(%r15), %rdi
	call	do_store_flag
	testq	%rax, %rax
	movq	%rax, -6960(%rbp)
	jne	.L27085
.L11962:
	movq	-9552(%rbp), %rax
	movq	-6928(%rbp), %rsi
	cmpq	40(%rax), %rsi
	jne	.L11786
	movq	32(%rax), %rdi
	call	invert_truthvalue
	movq	-9552(%rbp), %r10
	movq	%rax, 32(%r10)
	jmp	.L11786
.L27085:
	movq	-6920(%rbp), %r9
	movq	40(%r9), %rdi
	call	integer_onep
	testl	%eax, %eax
	jne	.L11881
	movq	-6928(%rbp), %rax
	xorl	%r14d, %r14d
	movq	%r13, %rbx
	testq	%r13, %r13
	movq	%rax, -6952(%rbp)
	je	.L11961
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L11886
	movq	32(%rax), %rdx
	testq	%rdx, %rdx
	je	.L11886
	cmpb	$25, 16(%rdx)
	je	.L11886
	cmpb	$18, 16(%rax)
	je	.L27086
.L11887:
	cmpb	$51, 2(%r13)
	je	.L11961
.L11886:
	movzwl	(%r13), %eax
	cmpw	$66, %ax
	movl	%eax, %ecx
	je	.L27087
.L11884:
	cmpw	$63, %cx
	je	.L27088
.L11889:
	movl	$1, %eax
	testl	%eax, %eax
	jne	.L27089
	movq	-6928(%rbp), %rax
	movzbl	16(%rax), %edx
	movzbl	%dl, %r8d 
	movsbl	tree_code_type(%r8),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L11897
	mov	%eax, %edi
	jmp	*.L11955(,%rdi,8)
	.section	.rodata
	.align 8
	.align 4
.L11955:
	.quad	.L11911
	.quad	.L11913
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11913
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11961
	.quad	.L11898
	.quad	.L11916
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11916
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11897
	.quad	.L11903
	.text
.L11898:
	movq	-6928(%rbp), %r14
	movq	144(%r14), %rdx
	testq	%rdx, %rdx
	movq	%rdx, %r14
	jne	.L24263
	xorl	%r14d, %r14d
.L11897:
	testq	%r14, %r14
	movl	$1, %r12d
	je	.L11888
.L24263:
	cmpw	$63, (%r14)
	je	.L27090
.L11958:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	xorl	%r12d, %r12d
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L11888
	cmpw	$66, (%rbx)
	je	.L27091
.L11961:
	movl	$1, %r12d
.L11888:
	movq	-6920(%rbp), %rax
	xorl	%r14d, %r14d
	testl	%r12d, %r12d
	cmovne	%r13, %r14
	movq	40(%rax), %rdi
	call	tree_log2
	xorl	%esi, %esi
	movslq	%eax,%rdi
	call	build_int_2_wide
	xorl	%r9d, %r9d
	movq	%r14, %r8
	movl	-2716(%rbp), %esi
	movq	-6960(%rbp), %rdx
	movq	%rax, %rcx
	movl	$82, %edi
	call	expand_shift
	movq	%rax, -6960(%rbp)
.L11881:
	cmpq	$0, -6960(%rbp)
	je	.L11962
	movq	-6928(%rbp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movl	-2516(%rbp), %r9d
	movq	%r13, %r8
	movl	-2716(%rbp), %edi
	movq	-6936(%rbp), %rsi
	movq	%rax, %rdx
	movq	-6960(%rbp), %rcx
	movl	$3, (%rsp)
	call	expand_binop
	jmp	.L23191
.L27091:
	cmpw	$66, (%r14)
	jne	.L11961
	xorl	%esi, %esi
	movq	%r14, %rdi
	movq	%rbx, %rdx
	movl	$rtx_addr_varies_p, %ecx
	call	true_dependence
	testl	%eax, %eax
	jne	.L11888
	jmp	.L11961
.L27090:
	movq	8(%r14), %r14
	cmpw	$61, (%r14)
	jne	.L11958
	cmpl	$52, 8(%r14)
	ja	.L11958
.L24483:
	xorl	%r12d, %r12d
	jmp	.L11888
.L11911:
	movq	-6928(%rbp), %r12
	movq	%rbx, %rdi
	movq	32(%r12), %rsi
.L24663:
	xorl	%edx, %edx
	call	safe_from_p
	movl	%eax, %r12d
	jmp	.L11888
.L11913:
	movq	-6928(%rbp), %r15
	xorl	%edx, %edx
	movq	%rbx, %rdi
	xorl	%r12d, %r12d
	movq	32(%r15), %rsi
	call	safe_from_p
	testl	%eax, %eax
	je	.L11888
	movq	-6928(%rbp), %r9
	movq	%rbx, %rdi
	movq	40(%r9), %rsi
.L25103:
	xorl	%edx, %edx
	call	safe_from_p
	testl	%eax, %eax
	je	.L11888
	jmp	.L11961
.L11916:
	movzbl	%dl, %eax
	subl	$41, %eax
	cmpl	$80, %eax
	ja	.L11917
	mov	%eax, %esi
	jmp	*.L11946(,%rsi,8)
	.section	.rodata
	.align 8
	.align 4
.L11946:
	.quad	.L11927
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11943
	.quad	.L11931
	.quad	.L23173
	.quad	.L11937
	.quad	.L11938
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11917
	.quad	.L11939
	.quad	.L11917
	.quad	.L11935
	.quad	.L11918
	.text
.L11918:
	movq	-6928(%rbp), %r8
	movq	32(%r8), %rdi
	call	staticp
	testl	%eax, %eax
	jne	.L11961
	movq	-6928(%rbp), %rsi
	testb	$4, 18(%rsi)
	jne	.L11961
	movq	32(%rsi), %rsi
	xorl	%edx, %edx
	movq	%rbx, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11961
	movq	-6928(%rbp), %rax
	movq	32(%rax), %rdx
	movq	%rdx, -6952(%rbp)
	movzbq	16(%rdx), %rdi
	cmpb	$100, tree_code_type(%rdi)
	je	.L27092
.L11917:
	testq	%r14, %r14
	jne	.L24263
	movq	-6952(%rbp), %r8
	xorl	%r12d, %r12d
	movzbl	16(%r8), %edi
	call	first_rtl_op
	cmpl	%eax, %r12d
	movl	%eax, %r15d
	jge	.L23424
.L11953:
	movq	-6952(%rbp), %rdi
	movslq	%r12d,%rdx
	movq	32(%rdi,%rdx,8), %rsi
	testq	%rsi, %rsi
	jne	.L27093
.L11950:
	incl	%r12d
	cmpl	%r15d, %r12d
	jl	.L11953
.L23424:
	movq	-6952(%rbp), %rcx
	cmpb	$-110, 16(%rcx)
	jbe	.L11897
	movq	%rbx, %rdi
	movq	%rcx, %rsi
	xorl	%r12d, %r12d
	call	*lang_hooks+80(%rip)
	testl	%eax, %eax
	je	.L11888
	jmp	.L11897
.L27093:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11950
	jmp	.L24483
.L27092:
	movq	144(%rdx), %rax
	testq	%rax, %rax
	je	.L24483
	cmpw	$66, (%rax)
	jne	.L24483
	movq	8(%rax), %r14
	jmp	.L11917
.L11927:
	cmpw	$66, (%rbx)
	jne	.L11917
	movq	-6928(%rbp), %rdi
	call	get_alias_set
	xorl	%edi, %edi
	movq	%rax, %rsi
	movq	16(%rbx), %rax
	testq	%rax, %rax
	je	.L11930
	movq	(%rax), %rdi
.L11930:
	call	alias_sets_conflict_p
	xorl	%r12d, %r12d
	testl	%eax, %eax
	jne	.L11888
	jmp	.L11917
.L11943:
	movq	-6928(%rbp), %r9
	movq	%rbx, %rdi
	movq	40(%r9), %rsi
	jmp	.L24663
.L11931:
	movzwl	(%rbx), %eax
	cmpw	$61, %ax
	je	.L27094
.L11934:
	cmpw	$66, %ax
	jne	.L11917
	jmp	.L24483
.L27094:
	cmpl	$52, 8(%rbx)
	jbe	.L24483
	jmp	.L11934
.L11937:
	movq	-6928(%rbp), %r10
	movq	48(%r10), %r14
	jmp	.L11917
.L11938:
	movq	%rbx, %rdi
	movq	-6928(%rbp), %rbx
	movq	32(%rbx), %rsi
	jmp	.L24663
.L11939:
	movq	-6928(%rbp), %rcx
	movq	48(%rcx), %r14
	testq	%r14, %r14
	jne	.L24263
	movzbl	18(%rcx), %eax
	movl	$1, %r12d
	testb	$16, %al
	jne	.L11888
	movq	-6928(%rbp), %r12
	orb	$16, %al
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movb	%al, 18(%r12)
	movq	-6928(%rbp), %r11
	movq	32(%r11), %rsi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11942
	movq	-6928(%rbp), %r15
	andb	$-17, 18(%r15)
	jmp	.L24483
.L11942:
	movq	-6928(%rbp), %rdi
	movq	save_expr_list.2(%rip), %rdx
	xorl	%esi, %esi
	call	tree_cons
	movq	%rax, save_expr_list.2(%rip)
	jmp	.L11961
.L11935:
	movq	-6928(%rbp), %r14
	cmpq	$0, 32(%r14)
	jne	.L24483
	movq	-6928(%rbp), %rcx
	movq	40(%rcx), %r14
	jmp	.L11917
.L11903:
	cmpb	$2, %dl
	je	.L27095
	testb	%dl, %dl
	sete	%r11b
	movzbl	%r11b, %r12d
	jmp	.L11888
.L27095:
	movq	-6928(%rbp), %rcx
	xorl	%r12d, %r12d
	movq	32(%rcx), %rsi
	testq	%rsi, %rsi
	jne	.L27096
.L11906:
	movq	-6928(%rbp), %r10
	movq	%rbx, %rdi
	movq	(%r10), %rsi
	testq	%rsi, %rsi
	jne	.L25103
	jmp	.L11961
.L27096:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L11888
	jmp	.L11906
.L27089:
	movq	-6928(%rbp), %rsi
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	$0, save_expr_list.2(%rip)
	call	safe_from_p
	movq	save_expr_list.2(%rip), %rdx
	movl	%eax, %r12d
	testq	%rdx, %rdx
	je	.L11888
.L11896:
	movq	24(%rdx), %rbx
	andb	$-17, 18(%rbx)
	movq	(%rdx), %rdx
	testq	%rdx, %rdx
	jne	.L11896
	jmp	.L11888
.L27088:
	movq	8(%r13), %rbx
	cmpw	$61, (%rbx)
	jne	.L11889
	cmpl	$52, 8(%rbx)
	jbe	.L24483
	jmp	.L11889
.L27087:
	movq	8(%r13), %rax
	movq	global_rtl+72(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L11961
	cmpw	$75, (%rax)
	jne	.L11884
	cmpq	%rdx, 8(%rax)
	jne	.L11884
	jmp	.L11961
.L27086:
	movq	112(%rax), %rax
	testq	%rax, %rax
	je	.L11887
	cmpb	$25, 16(%rax)
	jne	.L11887
	jmp	.L11886
.L27084:
	cmpw	$66, (%r14)
	jne	.L11880
	xorl	%esi, %esi
	movq	%r14, %rdi
	movq	%r12, %rdx
	movl	$rtx_addr_varies_p, %ecx
	call	true_dependence
	testl	%eax, %eax
	jne	.L11807
	jmp	.L11880
.L27083:
	movq	8(%r14), %r14
	cmpw	$61, (%r14)
	jne	.L11877
	cmpl	$52, 8(%r14)
	ja	.L11877
.L24482:
	xorl	%ebx, %ebx
	jmp	.L11807
.L11830:
	movq	%r12, %rdi
	movq	-6928(%rbp), %r12
	movq	32(%r12), %rsi
.L24662:
	xorl	%edx, %edx
	call	safe_from_p
	movl	%eax, %ebx
	jmp	.L11807
.L11832:
	movq	-6928(%rbp), %rcx
	xorl	%edx, %edx
	movq	%r12, %rdi
	xorl	%ebx, %ebx
	movq	32(%rcx), %rsi
	call	safe_from_p
	testl	%eax, %eax
	je	.L11807
	movq	-6928(%rbp), %r15
	movq	%r12, %rdi
	movq	40(%r15), %rsi
.L25102:
	xorl	%edx, %edx
	call	safe_from_p
	testl	%eax, %eax
	je	.L11807
	jmp	.L11880
.L11835:
	movzbl	%sil, %eax
	subl	$41, %eax
	cmpl	$80, %eax
	ja	.L11836
	mov	%eax, %r10d
	jmp	*.L11865(,%r10,8)
	.section	.rodata
	.align 8
	.align 4
.L11865:
	.quad	.L11846
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11862
	.quad	.L11850
	.quad	.L23173
	.quad	.L11856
	.quad	.L11857
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11836
	.quad	.L11858
	.quad	.L11836
	.quad	.L11854
	.quad	.L11837
	.text
.L11837:
	movq	-6928(%rbp), %r11
	movq	32(%r11), %rdi
	call	staticp
	testl	%eax, %eax
	jne	.L11880
	movq	-6928(%rbp), %rbx
	testb	$4, 18(%rbx)
	jne	.L11880
	movq	32(%rbx), %rsi
	xorl	%edx, %edx
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11880
	movq	-6928(%rbp), %rbx
	movq	32(%rbx), %rsi
	movq	%rsi, -6944(%rbp)
	movzbq	16(%rsi), %r9
	cmpb	$100, tree_code_type(%r9)
	je	.L27097
.L11836:
	testq	%r14, %r14
	jne	.L24262
	movq	-6944(%rbp), %rcx
	xorl	%ebx, %ebx
	movzbl	16(%rcx), %edi
	call	first_rtl_op
	cmpl	%eax, %ebx
	movl	%eax, %r15d
	jge	.L23420
.L11872:
	movq	-6944(%rbp), %r10
	movslq	%ebx,%r11
	movq	32(%r10,%r11,8), %rsi
	testq	%rsi, %rsi
	jne	.L27098
.L11869:
	incl	%ebx
	cmpl	%r15d, %ebx
	jl	.L11872
.L23420:
	movq	-6944(%rbp), %rcx
	cmpb	$-110, 16(%rcx)
	jbe	.L11816
	movq	%r12, %rdi
	movq	%rcx, %rsi
	xorl	%ebx, %ebx
	call	*lang_hooks+80(%rip)
	testl	%eax, %eax
	je	.L11807
	jmp	.L11816
.L27098:
	xorl	%edx, %edx
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11869
	jmp	.L24482
.L27097:
	movq	144(%rsi), %rax
	testq	%rax, %rax
	je	.L24482
	cmpw	$66, (%rax)
	jne	.L24482
	movq	8(%rax), %r14
	jmp	.L11836
.L11846:
	cmpw	$66, (%r12)
	jne	.L11836
	movq	-6928(%rbp), %rdi
	call	get_alias_set
	xorl	%edi, %edi
	movq	%rax, %rsi
	movq	16(%r12), %rax
	testq	%rax, %rax
	je	.L11849
	movq	(%rax), %rdi
.L11849:
	call	alias_sets_conflict_p
	xorl	%ebx, %ebx
	testl	%eax, %eax
	jne	.L11807
	jmp	.L11836
.L11862:
	movq	%r12, %rdi
	movq	-6928(%rbp), %r12
	movq	40(%r12), %rsi
	jmp	.L24662
.L11850:
	movzwl	(%r12), %eax
	cmpw	$61, %ax
	je	.L27099
.L11853:
	cmpw	$66, %ax
	jne	.L11836
	jmp	.L24482
.L27099:
	cmpl	$52, 8(%r12)
	jbe	.L24482
	jmp	.L11853
.L11856:
	movq	-6928(%rbp), %rdx
	movq	48(%rdx), %r14
	jmp	.L11836
.L11857:
	movq	-6928(%rbp), %rax
	movq	%r12, %rdi
	movq	32(%rax), %rsi
	jmp	.L24662
.L11858:
	movq	-6928(%rbp), %rsi
	movq	48(%rsi), %r14
	testq	%r14, %r14
	jne	.L24262
	movzbl	18(%rsi), %eax
	movl	$1, %ebx
	testb	$16, %al
	jne	.L11807
	movq	-6928(%rbp), %r8
	orb	$16, %al
	xorl	%edx, %edx
	movq	%r12, %rdi
	movq	32(%r8), %rsi
	movb	%al, 18(%r8)
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11861
	movq	-6928(%rbp), %rdi
	andb	$-17, 18(%rdi)
	jmp	.L24482
.L11861:
	movq	-6928(%rbp), %rdi
	movq	save_expr_list.2(%rip), %rdx
	xorl	%esi, %esi
	call	tree_cons
	movq	%rax, save_expr_list.2(%rip)
	jmp	.L11880
.L11854:
	movq	-6928(%rbp), %r14
	cmpq	$0, 32(%r14)
	jne	.L24482
	movq	-6928(%rbp), %rsi
	movq	40(%rsi), %r14
	jmp	.L11836
.L11822:
	cmpb	$2, %sil
	je	.L27100
	xorl	%ebx, %ebx
	testb	%sil, %sil
	sete	%bl
	jmp	.L11807
.L27100:
	movq	-6928(%rbp), %r8
	xorl	%ebx, %ebx
	movq	32(%r8), %rsi
	testq	%rsi, %rsi
	jne	.L27101
.L11825:
	movq	-6928(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%r12, %rdi
	testq	%rsi, %rsi
	jne	.L25102
	jmp	.L11880
.L27101:
	xorl	%edx, %edx
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L11807
	jmp	.L11825
.L27082:
	movq	-6928(%rbp), %rsi
	xorl	%edx, %edx
	movq	%r12, %rdi
	movq	$0, save_expr_list.2(%rip)
	call	safe_from_p
	movq	save_expr_list.2(%rip), %rdx
	movl	%eax, %ebx
	testq	%rdx, %rdx
	je	.L11807
.L11815:
	movq	24(%rdx), %r10
	andb	$-17, 18(%r10)
	movq	(%rdx), %rdx
	testq	%rdx, %rdx
	jne	.L11815
	jmp	.L11807
.L27081:
	movq	8(%r13), %r12
	cmpw	$61, (%r12)
	jne	.L11808
	cmpl	$52, 8(%r12)
	jbe	.L24482
	jmp	.L11808
.L27080:
	movq	8(%r13), %rax
	movq	global_rtl+72(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L11880
	cmpw	$75, (%rax)
	jne	.L11803
	cmpq	%rdx, 8(%rax)
	jne	.L11803
	jmp	.L11880
.L27079:
	movq	112(%rax), %rax
	testq	%rax, %rax
	je	.L11806
	cmpb	$25, 16(%rax)
	jne	.L11806
	jmp	.L11805
.L27078:
	movq	32(%rdx), %rdi
	call	invert_truthvalue
	movq	-9552(%rbp), %r14
	movq	%rax, 32(%r14)
	jmp	.L11800
.L27077:
	movq	optab_table+152(%rip), %rsi
.L24660:
	movq	%rsi, -6936(%rbp)
	jmp	.L11791
.L27076:
	movl	flag_trapv(%rip), %eax
	testl	%eax, %eax
	je	.L11796
	movq	-6920(%rbp), %r8
	movq	8(%r8), %rbx
	testb	$32, 17(%rbx)
	jne	.L11796
	movq	optab_table+24(%rip), %rdi
	movq	%rdi, -6936(%rbp)
	jmp	.L11791
.L11796:
	movq	optab_table+16(%rip), %rbx
.L24661:
	movq	%rbx, -6936(%rbp)
	jmp	.L11791
.L27075:
	movl	flag_trapv(%rip), %r9d
	testl	%r9d, %r9d
	je	.L11792
	movq	8(%rcx), %r12
	testb	$32, 17(%r12)
	jne	.L11792
	movq	optab_table+8(%rip), %rbx
	jmp	.L24661
.L11792:
	movq	optab_table(%rip), %rsi
	jmp	.L24660
	.p2align 6,,7
.L11788:
	movq	-6920(%rbp), %rdx
	movq	40(%rdx), %rdi
	call	integer_onep
	jmp	.L24659
.L26083:
	movl	$.LC0, %edi
	movl	$8197, %esi
	jmp	.L25123
.L26082:
	cmpl	$52, 8(%rbx)
	jbe	.L24312
	movq	-6928(%rbp), %r12
	movq	global_trees(%rip), %rdi
.L11769:
	movzbl	16(%r12), %esi
	leal	-114(%rsi), %r15d
	cmpb	$2, %r15b
	ja	.L11770
	movq	32(%r12), %rcx
	cmpq	%rdi, %rcx
	je	.L11770
	movq	8(%r12), %r10
	movq	8(%rcx), %rdx
	movzbl	61(%r10), %r13d
	movzbl	61(%rdx), %r14d
	andb	$-2, %r13b
	andb	$-2, %r14b
	cmpb	%r14b, %r13b
	jne	.L11770
	movq	%rcx, %r12
	jmp	.L11769
.L11770:
	movzbl	%sil, %r11d
	subl	$34, %r11d
	cmpl	$1, %r11d
	ja	.L11779
	movq	144(%r12), %rax
	testq	%rax, %rax
	je	.L27102
.L11778:
	cmpq	%rax, %rbx
	je	.L11688
.L24313:
	movq	-2712(%rbp), %r8
	movzbl	17(%r8), %edx
	jmp	.L11687
.L11688:
	movzbl	2(%rbx), %esi
	cmpl	-2716(%rbp), %esi
	je	.L27103
.L24314:
	movq	-2712(%rbp), %rdi
	movzbl	17(%rdi), %edx
	jmp	.L11687
.L27103:
	movl	-2716(%rbp), %edi
	call	can_conditionally_move_p
	testl	%eax, %eax
	je	.L24315
	movzwl	(%rbx), %eax
	cmpw	$61, %ax
	je	.L11781
	movq	-2712(%rbp), %r9
	movzbl	17(%r9), %edx
	testb	$4, %dl
	je	.L11687
.L11781:
	cmpw	$66, %ax
	je	.L27104
.L11782:
	movq	%rbx, %r13
	jmp	.L11686
.L27104:
	movq	-2712(%rbp), %rax
	movzbl	17(%rax), %edx
	testb	$4, %dl
	je	.L11687
	jmp	.L11782
.L24315:
	movzwl	(%rbx), %eax
	jmp	.L11781
.L27102:
	movq	%r12, %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	144(%r12), %rax
	jmp	.L11778
.L11779:
	xorl	%eax, %eax
	jmp	.L11778
.L24312:
	movq	-2712(%rbp), %rbx
	movzbl	17(%rbx), %edx
	jmp	.L11687
.L26081:
	cmpw	$66, (%r15)
	jne	.L11768
	xorl	%esi, %esi
	movq	%r15, %rdi
	movq	%r14, %rdx
	movl	$rtx_addr_varies_p, %ecx
	call	true_dependence
	testl	%eax, %eax
	jne	.L11693
	jmp	.L11768
.L26080:
	movq	8(%r15), %r15
	cmpw	$61, (%r15)
	jne	.L11765
	cmpl	$52, 8(%r15)
	ja	.L11765
.L24481:
	xorl	%r13d, %r13d
	jmp	.L11693
.L11745:
	movq	32(%r12), %rsi
	movq	%r14, %rdi
.L24658:
	xorl	%edx, %edx
	call	safe_from_p
	movl	%eax, %r13d
	jmp	.L11693
.L11718:
	movq	32(%r12), %rsi
	xorl	%edx, %edx
	movq	%r14, %rdi
	xorl	%r13d, %r13d
	call	safe_from_p
	testl	%eax, %eax
	je	.L11693
	movq	%r14, %rdi
	movq	40(%r12), %rsi
.L25101:
	xorl	%edx, %edx
	call	safe_from_p
	testl	%eax, %eax
	je	.L11693
	jmp	.L11768
.L11721:
	movzbl	%dl, %eax
	subl	$41, %eax
	cmpl	$80, %eax
	ja	.L11722
	mov	%eax, %r8d
	jmp	*.L11753(,%r8,8)
	.section	.rodata
	.align 8
	.align 4
.L11753:
	.quad	.L11732
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11750
	.quad	.L11738
	.quad	.L23173
	.quad	.L11744
	.quad	.L11745
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11722
	.quad	.L11746
	.quad	.L11722
	.quad	.L11742
	.quad	.L11723
	.text
.L11723:
	movq	32(%r12), %rdi
	call	staticp
	testl	%eax, %eax
	jne	.L11768
	testb	$4, 18(%r12)
	jne	.L11768
	movq	32(%r12), %rsi
	xorl	%edx, %edx
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11768
	movq	32(%r12), %r12
	movzbq	16(%r12), %rcx
	cmpb	$100, tree_code_type(%rcx)
	je	.L27105
.L11722:
	testq	%r15, %r15
	jne	.L24261
	movzbl	16(%r12), %edi
	xorl	%r13d, %r13d
	call	first_rtl_op
	cmpl	%eax, %r13d
	movl	%eax, -3380(%rbp)
	jge	.L23416
.L11760:
	movslq	%r13d,%rdi
	movq	32(%r12,%rdi,8), %rsi
	testq	%rsi, %rsi
	jne	.L27106
.L11757:
	incl	%r13d
	cmpl	-3380(%rbp), %r13d
	jl	.L11760
.L23416:
	cmpb	$-110, 16(%r12)
	jbe	.L11702
	movq	%r14, %rdi
	movq	%r12, %rsi
	xorl	%r13d, %r13d
	call	*lang_hooks+80(%rip)
	testl	%eax, %eax
	je	.L11693
	jmp	.L11702
.L27106:
	xorl	%edx, %edx
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11757
	jmp	.L24481
.L27105:
	movq	144(%r12), %rax
	testq	%rax, %rax
	je	.L24481
	cmpw	$66, (%rax)
	jne	.L24481
	movq	8(%rax), %r15
	jmp	.L11722
.L11732:
	cmpw	$66, (%r14)
	jne	.L11722
	movq	%r12, %rdi
	call	get_alias_set
	xorl	%edi, %edi
	movq	%rax, %rsi
	movq	16(%r14), %rax
	testq	%rax, %rax
	je	.L11737
	movq	(%rax), %rdi
.L11737:
	call	alias_sets_conflict_p
	xorl	%r13d, %r13d
	testl	%eax, %eax
	jne	.L11693
	jmp	.L11722
.L11750:
	movq	%r14, %rdi
	movq	40(%r12), %rsi
	jmp	.L24658
.L11738:
	movzwl	(%r14), %eax
	cmpw	$61, %ax
	je	.L27107
.L11741:
	cmpw	$66, %ax
	jne	.L11722
	jmp	.L24481
.L27107:
	cmpl	$52, 8(%r14)
	jbe	.L24481
	jmp	.L11741
.L11744:
	movq	48(%r12), %r15
	jmp	.L11722
.L11746:
	movq	48(%r12), %r15
	testq	%r15, %r15
	jne	.L24261
	movzbl	18(%r12), %eax
	movl	$1, %r13d
	testb	$16, %al
	jne	.L11693
	movq	32(%r12), %rsi
	orb	$16, %al
	xorl	%edx, %edx
	movb	%al, 18(%r12)
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11749
	andb	$-17, 18(%r12)
	jmp	.L24481
.L11749:
	movq	save_expr_list.2(%rip), %rdx
	movq	%r12, %rdi
	xorl	%esi, %esi
	call	tree_cons
	movq	%rax, save_expr_list.2(%rip)
	jmp	.L11768
.L11742:
	cmpq	$0, 32(%r12)
	jne	.L24481
	movq	40(%r12), %r15
	jmp	.L11722
.L11708:
	cmpb	$2, %dl
	je	.L27108
	testb	%dl, %dl
	sete	%r12b
	movzbl	%r12b, %r13d
	jmp	.L11693
.L27108:
	movq	32(%r12), %rsi
	xorl	%r13d, %r13d
	testq	%rsi, %rsi
	jne	.L27109
.L11711:
	movq	(%r12), %rsi
	movq	%r14, %rdi
	testq	%rsi, %rsi
	jne	.L25101
	jmp	.L11768
.L27109:
	xorl	%edx, %edx
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L11693
	jmp	.L11711
	.p2align 6,,7
.L26079:
	xorl	%edx, %edx
	movq	%r14, %rdi
	movq	%r12, %rsi
	movq	$0, save_expr_list.2(%rip)
	call	safe_from_p
	movq	save_expr_list.2(%rip), %rdx
	movl	%eax, %r13d
	testq	%rdx, %rdx
	je	.L11693
.L11701:
	movq	24(%rdx), %rsi
	andb	$-17, 18(%rsi)
	movq	(%rdx), %rdx
	testq	%rdx, %rdx
	jne	.L11701
	jmp	.L11693
.L26078:
	movq	8(%rbx), %r14
	cmpw	$61, (%r14)
	jne	.L11694
	cmpl	$52, 8(%r14)
	jbe	.L24481
	jmp	.L11694
	.p2align 6,,7
.L26077:
	movq	8(%rbx), %rax
	movq	global_rtl+72(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L11768
	cmpw	$75, (%rax)
	jne	.L11689
	cmpq	%rdx, 8(%rax)
	jne	.L11689
	jmp	.L11768
.L26076:
	movq	112(%rax), %rax
	testq	%rax, %rax
	je	.L11692
	cmpb	$25, 16(%rax)
	jne	.L11692
	jmp	.L11691
	.p2align 6,,7
.L26075:
	movq	32(%rdx), %rsi
	movq	40(%rcx), %rdi
	xorl	%edx, %edx
	call	operand_equal_p
	testl	%eax, %eax
	je	.L11679
	movq	-9552(%rbp), %rdx
	movq	-9552(%rbp), %rdi
	movq	40(%rdx), %r13
	movq	%r13, -6928(%rbp)
	movq	48(%rdi), %rax
.L24656:
	movq	%rax, -6912(%rbp)
	jmp	.L11679
.L26074:
	movq	32(%rdx), %rsi
	movq	48(%rcx), %rdi
	xorl	%edx, %edx
	call	operand_equal_p
	testl	%eax, %eax
	je	.L11682
	movq	-9552(%rbp), %rcx
	movq	-9552(%rbp), %r15
	movq	48(%rcx), %r8
	movq	%r8, -6928(%rbp)
	movq	40(%r15), %rax
	jmp	.L24656
.L26073:
	movq	32(%rdx), %rsi
	movq	40(%rcx), %rdi
	xorl	%edx, %edx
	call	operand_equal_p
	testl	%eax, %eax
	je	.L11680
	movq	-9552(%rbp), %rax
	movq	-9552(%rbp), %r11
	movq	40(%rax), %r9
	movq	%r9, -6928(%rbp)
	movq	48(%r11), %rax
.L24657:
	movq	%rax, -6920(%rbp)
	jmp	.L11679
.L26072:
	movq	32(%rdx), %rsi
	movq	48(%rcx), %rdi
	xorl	%edx, %edx
	call	operand_equal_p
	testl	%eax, %eax
	je	.L11678
	movq	-9552(%rbp), %r10
	movq	-9552(%rbp), %r13
	movq	48(%r10), %rdx
	movq	%rdx, -6928(%rbp)
	movq	40(%r13), %rax
	jmp	.L24657
.L26071:
	movq	-9552(%rbp), %r15
	movq	48(%r15), %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L11674
	movq	-9552(%rbp), %rcx
	movq	32(%rcx), %rdi
	movzbq	16(%rdi), %r8
	cmpb	$60, tree_code_type(%r8)
	jne	.L11674
	movl	-6220(%rbp), %eax
	testl	%eax, %eax
	je	.L11675
.L25121:
	movq	const_int_rtx+512(%rip), %rsi
	xorl	%edx, %edx
	movl	%r14d, %ecx
	call	expand_expr
	jmp	.L25052
.L11675:
	movl	-2716(%rbp), %edx
	movl	%r14d, %ecx
	movq	%r13, %rsi
	call	expand_expr
	movzbl	2(%rax), %r14d
	movq	%rax, %rbx
	cmpl	-2716(%rbp), %r14d
	je	.L25059
	testq	%r13, %r13
	jne	.L11677
	movl	-2716(%rbp), %edi
	jmp	.L25538
	.p2align 6,,7
.L26070:
	movq	48(%rax), %rax
	cmpb	$115, 16(%rax)
	jne	.L11668
	movq	32(%rdx), %r12
	movq	32(%rax), %rsi
	movq	%rsi, -3376(%rbp)
	movq	8(%rsi), %rcx
	cmpq	%rcx, 8(%r12)
	jne	.L11668
	movzbq	16(%r12), %rdx
	cmpb	$50, tree_code_type(%rdx)
	je	.L27110
.L11671:
	movq	-3376(%rbp), %rdx
	movzbq	16(%rdx), %r10
	cmpb	$50, tree_code_type(%r10)
	je	.L27111
.L11672:
	movzbq	16(%r12), %r11
	cmpb	$49, tree_code_type(%r11)
	je	.L27112
.L11673:
	movq	-3376(%rbp), %rcx
	movzbq	16(%rcx), %r9
	cmpb	$49, tree_code_type(%r9)
	jne	.L11668
	movq	32(%rcx), %rsi
	xorl	%edx, %edx
	movq	%r12, %rdi
	call	operand_equal_p
	testl	%eax, %eax
	je	.L11668
.L11670:
	movq	-9552(%rbp), %rax
	movq	8(%r12), %rsi
	movl	$51, %edi
	movq	-3376(%rbp), %r8
	movq	%r12, %rcx
	movq	32(%rax), %rdx
	xorl	%eax, %eax
	call	build
	movq	-2712(%rbp), %rsi
	movl	$115, %edi
	movq	%rax, %rdx
	call	build1
	jmp	.L25097
.L27112:
	movq	-3376(%rbp), %rdi
	movq	32(%r12), %rsi
	xorl	%edx, %edx
	call	operand_equal_p
	testl	%eax, %eax
	jne	.L11670
	jmp	.L11673
.L27111:
	movq	32(%rdx), %rsi
	movq	%r12, %rdi
	xorl	%edx, %edx
	call	operand_equal_p
	testl	%eax, %eax
	jne	.L11670
	jmp	.L11672
.L27110:
	movq	-3376(%rbp), %rdi
	movq	32(%r12), %rsi
	xorl	%edx, %edx
	call	operand_equal_p
	testl	%eax, %eax
	jne	.L11670
	jmp	.L11671
	.p2align 6,,7
.L8956:
	movq	-9552(%rbp), %r9
	movl	$2, %edi
	xorl	%esi, %esi
	movq	32(%r9), %rbx
	call	expand_start_bindings_and_block
	movq	-9552(%rbp), %rdx
	movq	48(%rdx), %rdi
	testq	%rdi, %rdi
	je	.L8957
	testb	$1, 18(%rdi)
	je	.L27113
.L8957:
	testq	%rbx, %rbx
	je	.L23268
.L8962:
	cmpq	$0, 144(%rbx)
	je	.L27114
.L8961:
	movq	%rbx, %rdi
	call	expand_decl_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L8962
.L23268:
	movq	-9552(%rbp), %rax
	movq	%r13, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	movq	40(%rax), %rdi
	call	expand_expr
	movq	-9552(%rbp), %r8
	movq	%rax, %r13
	movq	32(%r8), %rdi
.L25064:
	xorl	%esi, %esi
	xorl	%edx, %edx
	call	expand_end_bindings
	jmp	.L7871
.L27114:
	movq	%rbx, %rdi
	call	expand_decl
	jmp	.L8961
.L27113:
	call	insert_block
	jmp	.L8957
.L9619:
	movq	-9552(%rbp), %rdx
	movq	32(%rdx), %rax
	cmpb	$121, 16(%rax)
	je	.L27115
.L9620:
	movq	-9552(%rbp), %rdi
	movl	-6220(%rbp), %edx
	movq	%r13, %rsi
	call	expand_call
	jmp	.L23191
.L27115:
	movq	32(%rax), %rax
	cmpb	$30, 16(%rax)
	jne	.L9620
	movzbl	51(%rax), %r10d
	andb	$96, %r10b
	je	.L9620
	cmpb	$32, %r10b
	movq	%rdx, %rdi
	je	.L25077
	movq	-9552(%rbp), %rdi
	movq	-9560(%rbp), %rdx
	movq	%r13, %rsi
	movl	-6220(%rbp), %r8d
	movl	%r15d, %ecx
	call	expand_builtin
	jmp	.L23191
	.p2align 6,,7
.L25077:
	movq	%rbx, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	call	*lang_expand_expr(%rip)
	jmp	.L23191
.L9615:
	movq	-9552(%rbp), %rcx
	movq	48(%rcx), %rdx
	testq	%rdx, %rdx
	jne	.L25062
	movq	32(%rcx), %rdi
	movq	%r13, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	call	expand_expr
	xorl	%edi, %edi
	movq	-9552(%rbp), %r13
	movq	40(%r13), %rsi
	movq	%rax, 48(%r13)
	call	expand_decl_cleanup
	movq	48(%r13), %rdx
	movq	$0, 40(%r13)
	jmp	.L25062
.L9617:
	xorl	%esi, %esi
	movl	$2, %edi
	call	expand_start_bindings_and_block
	movq	cfun(%rip), %rdi
	movq	%r13, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	movl	328(%rdi), %eax
	movl	%eax, 336(%rdi)
	movq	-9552(%rbp), %rax
	movq	32(%rax), %rdi
	call	expand_expr
	movl	-6220(%rbp), %r15d
	movq	%rax, %r13
	testl	%r15d, %r15d
	je	.L27116
.L9618:
	movq	%r13, %rdi
	call	preserve_temp_slots
	xorl	%edi, %edi
	jmp	.L25064
.L27116:
	movq	%rax, %rdi
	call	force_not_mem
	movq	%rax, %r13
	jmp	.L9618
.L8909:
	movq	placeholder_list(%rip), %r12
	movq	-9552(%rbp), %r13
	movq	$0, -2528(%rbp)
	leaq	-2528(%rbp), %r9
	testq	%r12, %r12
	movq	8(%r13), %rax
	movq	%r12, %r8
	je	.L23262
	movq	128(%rax), %rsi
.L8944:
	movq	24(%r8), %rdi
	testq	%rdi, %rdi
	movq	%rdi, %rdx
	je	.L23264
.L8929:
	movq	8(%rdi), %r10
	cmpq	%rsi, 128(%r10)
	je	.L27117
	movzbl	16(%rdi), %eax
	cmpb	$47, %al
	je	.L8925
	cmpb	$51, %al
	je	.L8925
	movzbl	%al, %ecx 
	movzbl	tree_code_type(%rcx), %eax
	cmpb	$114, %al
	je	.L8928
	cmpb	$49, %al
	je	.L8928
	cmpb	$50, %al
	je	.L8928
	cmpb	$101, %al
	je	.L8928
	xorl	%edi, %edi
.L8924:
	testq	%rdi, %rdi
	jne	.L8929
.L23264:
	testq	%rdx, %rdx
	je	.L23266
.L8943:
	movq	8(%rdx), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$13, %al
	je	.L8935
	cmpb	$15, %al
	je	.L8935
.L8932:
	movzbl	16(%rdx), %eax
	cmpb	$47, %al
	je	.L8939
	cmpb	$51, %al
	je	.L8939
	movzbl	%al, %r11d 
	movzbl	tree_code_type(%r11), %eax
	cmpb	$114, %al
	je	.L8942
	cmpb	$49, %al
	je	.L8942
	cmpb	$50, %al
	je	.L8942
	cmpb	$101, %al
	je	.L8942
	xorl	%edx, %edx
.L8938:
	testq	%rdx, %rdx
	jne	.L8943
.L23266:
	movq	(%r8), %r8
	testq	%r8, %r8
	jne	.L8944
.L23262:
	xorl	%edi, %edi
.L8922:
	testq	%rdi, %rdi
	je	.L27118
	movq	-2528(%rbp), %r9
	movq	%rbx, %rsi
	movl	%r14d, %ecx
	movq	(%r9), %rdx
	movq	%rdx, placeholder_list(%rip)
	movl	%r15d, %edx
	call	expand_expr
	movq	%r12, placeholder_list(%rip)
	movq	%rax, %r13
	jmp	.L7871
.L27118:
	movl	$.LC0, %edi
	movl	$6510, %esi
	jmp	.L25123
	.p2align 6,,7
.L8942:
	movq	32(%rdx), %rdx
	jmp	.L8938
.L8939:
	movq	40(%rdx), %rdx
	jmp	.L8938
.L8935:
	movq	8(%rcx), %rdi
	cmpq	%rsi, 128(%rdi)
	jne	.L8932
	testq	%r9, %r9
	je	.L8936
	movq	%r8, (%r9)
.L8936:
	movl	$41, %edi
	call	build1
	movq	%rax, %rdi
	jmp	.L8922
	.p2align 6,,7
.L8928:
	movq	32(%rdi), %rdi
	jmp	.L8924
.L8925:
	movq	40(%rdi), %rdi
	jmp	.L8924
.L27117:
	testq	%r9, %r9
	je	.L8922
	movq	%r8, (%r9)
	jmp	.L8922
.L8946:
	movq	-9552(%rbp), %rsi
	movq	placeholder_list(%rip), %rdx
	movq	40(%rsi), %rdi
	xorl	%esi, %esi
	call	tree_cons
	movl	%r14d, %ecx
	movl	%r15d, %edx
	movq	%rax, placeholder_list(%rip)
	movq	%rbx, %rsi
	movq	-9552(%rbp), %rax
	movq	32(%rax), %rdi
	call	expand_expr
	movq	placeholder_list(%rip), %r15
	movq	%rax, %r13
	movq	(%r15), %r8
	movq	%r8, placeholder_list(%rip)
	jmp	.L7871
.L10784:
	movl	-2516(%rbp), %eax
	testl	%eax, %eax
	jne	.L10785
	movl	flag_trapv(%rip), %eax
	testl	%eax, %eax
	je	.L10785
	movslq	-2716(%rbp),%rbx
	cmpl	$1, mode_class(,%rbx,4)
	je	.L27119
.L10785:
	movq	optab_table(%rip), %rax
	movq	%rax, -9568(%rbp)
.L10786:
	movq	-9552(%rbp), %rbx
	movq	32(%rbx), %rdi
	cmpb	$59, 16(%rdi)
	movq	%rdi, %rdx
	je	.L27120
	movq	-9552(%rbp), %rdx
	movq	40(%rdx), %r15
	movq	%r15, -9576(%rbp)
.L10787:
	cmpl	$1, %r14d
	je	.L10790
	cmpl	$3, %r14d
	je	.L10790
	movl	-2716(%rbp), %r12d
	cmpl	ptr_mode(%rip), %r12d
	je	.L27121
.L10789:
	cmpl	$1, %r14d
	je	.L10848
	cmpl	$3, %r14d
	je	.L10848
.L10849:
	movq	-9560(%rbp), %r12
	xorl	%r15d, %r15d
	movq	-9576(%rbp), %r14
	testq	%r12, %r12
	je	.L23190
	movq	8(%r14), %rax
	testq	%rax, %rax
	je	.L23113
	movq	32(%rax), %rdx
	testq	%rdx, %rdx
	je	.L23113
	cmpb	$25, 16(%rdx)
	je	.L23113
	cmpb	$18, 16(%rax)
	je	.L27122
.L23114:
	movq	-9560(%rbp), %r9
	cmpb	$51, 2(%r9)
	je	.L23190
.L23113:
	movq	-9560(%rbp), %rcx
	movzwl	(%rcx), %edx
	cmpw	$66, %dx
	je	.L27123
.L23111:
	cmpw	$63, %dx
	je	.L27124
.L23116:
	movl	$1, %eax
	testl	%eax, %eax
	jne	.L27125
	movq	-9576(%rbp), %rax
	movzbl	16(%rax), %edx
	movzbl	%dl, %esi 
	movsbl	tree_code_type(%rsi),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L23124
	mov	%eax, %r11d
	jmp	*.L23184(,%r11,8)
	.section	.rodata
	.align 8
	.align 4
.L23184:
	.quad	.L23167
	.quad	.L23140
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23140
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23190
	.quad	.L23125
	.quad	.L23143
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23143
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23124
	.quad	.L23130
	.text
.L23125:
	movq	-9576(%rbp), %rbx
	movq	144(%rbx), %rdx
	testq	%rdx, %rdx
	movq	%rdx, %r15
	jne	.L24267
	xorl	%r15d, %r15d
.L23124:
	testq	%r15, %r15
	movl	$1, %ebx
	je	.L23115
.L24267:
	cmpw	$63, (%r15)
	je	.L27126
.L23187:
	movq	%r12, %rdi
	movq	%r15, %rsi
	xorl	%ebx, %ebx
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L23115
	cmpw	$66, (%r12)
	je	.L27127
.L23190:
	movl	$1, %ebx
.L23115:
	movq	-9552(%rbp), %r9
	testl	%ebx, %ebx
	movl	$0, %r12d
	cmovne	-9560(%rbp), %r12
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	32(%r9), %rdi
	movq	%r12, %rsi
	call	expand_expr
	movq	-9552(%rbp), %r8
	movq	%rax, %r12
	movq	40(%r8), %rdi
.L25050:
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	%rax, %rbx
.L10823:
	movl	-2716(%rbp), %edi
	movq	-9568(%rbp), %rsi
	movq	%r12, %rdx
	movl	-2516(%rbp), %r9d
	movq	%rbx, %rcx
	movq	%r13, %r8
	movl	$3, (%rsp)
	call	expand_binop
	testq	%rax, %rax
	jne	.L23191
	movl	$.LC0, %edi
	movl	$8870, %esi
	jmp	.L25123
.L27127:
	cmpw	$66, (%r15)
	jne	.L23190
	xorl	%esi, %esi
	movq	%r15, %rdi
	movq	%r12, %rdx
	movl	$rtx_addr_varies_p, %ecx
	call	true_dependence
	testl	%eax, %eax
	jne	.L23115
	jmp	.L23190
	.p2align 6,,7
.L27126:
	movq	8(%r15), %r15
	cmpw	$61, (%r15)
	jne	.L23187
	cmpl	$52, 8(%r15)
	ja	.L23187
.L24530:
	xorl	%ebx, %ebx
	jmp	.L23115
.L23167:
	movq	-9576(%rbp), %r14
	movq	%r12, %rdi
	movq	32(%r14), %rsi
.L25049:
	xorl	%edx, %edx
	call	safe_from_p
	movl	%eax, %ebx
	jmp	.L23115
.L23140:
	movq	-9576(%rbp), %rcx
	xorl	%edx, %edx
	movq	%r12, %rdi
	xorl	%ebx, %ebx
	movq	32(%rcx), %rsi
	call	safe_from_p
	testl	%eax, %eax
	je	.L23115
	movq	%r12, %rdi
	movq	-9576(%rbp), %r12
	movq	40(%r12), %rsi
.L25067:
	xorl	%edx, %edx
	call	safe_from_p
	testl	%eax, %eax
	je	.L23115
	jmp	.L23190
	.p2align 6,,7
.L23143:
	movzbl	%dl, %eax
	subl	$41, %eax
	cmpl	$80, %eax
	ja	.L23144
	mov	%eax, %r8d
	jmp	*.L23175(,%r8,8)
	.section	.rodata
	.align 8
	.align 4
.L23175:
	.quad	.L23154
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23172
	.quad	.L23160
	.quad	.L23173
	.quad	.L23166
	.quad	.L23167
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23144
	.quad	.L23168
	.quad	.L23144
	.quad	.L23164
	.quad	.L23145
	.text
.L23145:
	movq	-9576(%rbp), %r9
	movq	32(%r9), %rdi
	call	staticp
	testl	%eax, %eax
	jne	.L23190
	movq	-9576(%rbp), %rbx
	testb	$4, 18(%rbx)
	jne	.L23190
	movq	32(%rbx), %rsi
	xorl	%edx, %edx
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L23190
	movq	-9576(%rbp), %rax
	movq	32(%rax), %r14
	movzbq	16(%r14), %r10
	cmpb	$100, tree_code_type(%r10)
	je	.L27128
.L23144:
	testq	%r15, %r15
	jne	.L24267
	movzbl	16(%r14), %edi
	xorl	%ebx, %ebx
	call	first_rtl_op
	cmpl	%eax, %ebx
	movl	%eax, -5892(%rbp)
	jge	.L24237
.L23182:
	movslq	%ebx,%rdi
	movq	32(%r14,%rdi,8), %rsi
	testq	%rsi, %rsi
	jne	.L27129
.L23179:
	incl	%ebx
	cmpl	-5892(%rbp), %ebx
	jl	.L23182
.L24237:
	cmpb	$-110, 16(%r14)
	jbe	.L23124
	movq	%r12, %rdi
	movq	%r14, %rsi
	xorl	%ebx, %ebx
	call	*lang_hooks+80(%rip)
	testl	%eax, %eax
	je	.L23115
	jmp	.L23124
.L27129:
	xorl	%edx, %edx
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L23179
	jmp	.L24530
.L27128:
	movq	144(%r14), %rax
	testq	%rax, %rax
	je	.L24530
	cmpw	$66, (%rax)
	jne	.L24530
	movq	8(%rax), %r15
	jmp	.L23144
.L23154:
	cmpw	$66, (%r12)
	jne	.L23144
	movq	-9576(%rbp), %rdi
	call	get_alias_set
	xorl	%edi, %edi
	movq	%rax, %rsi
	movq	16(%r12), %rax
	testq	%rax, %rax
	je	.L23159
	movq	(%rax), %rdi
.L23159:
	call	alias_sets_conflict_p
	xorl	%ebx, %ebx
	testl	%eax, %eax
	jne	.L23115
	jmp	.L23144
.L23172:
	movq	-9576(%rbp), %rcx
	movq	%r12, %rdi
	movq	40(%rcx), %rsi
	jmp	.L25049
.L23160:
	movzwl	(%r12), %eax
	cmpw	$61, %ax
	je	.L27130
.L23163:
	cmpw	$66, %ax
	jne	.L23144
	jmp	.L24530
.L27130:
	cmpl	$52, 8(%r12)
	jbe	.L24530
	jmp	.L23163
.L23166:
	movq	-9576(%rbp), %rdx
	movq	48(%rdx), %r15
	jmp	.L23144
.L23168:
	movq	-9576(%rbp), %rsi
	movq	48(%rsi), %r15
	testq	%r15, %r15
	jne	.L24267
	movzbl	18(%rsi), %eax
	movl	$1, %ebx
	testb	$16, %al
	jne	.L23115
	movq	-9576(%rbp), %rbx
	orb	$16, %al
	xorl	%edx, %edx
	movq	%r12, %rdi
	movq	32(%rbx), %rsi
	movb	%al, 18(%rbx)
	call	safe_from_p
	testl	%eax, %eax
	jne	.L23171
	movq	-9576(%rbp), %r15
	andb	$-17, 18(%r15)
	jmp	.L24530
.L23171:
	movq	-9576(%rbp), %rdi
	movq	save_expr_list.2(%rip), %rdx
	xorl	%esi, %esi
	call	tree_cons
	movq	%rax, save_expr_list.2(%rip)
	jmp	.L23190
.L23164:
	movq	-9576(%rbp), %rsi
	cmpq	$0, 32(%rsi)
	jne	.L24530
	movq	-9576(%rbp), %r11
	movq	40(%r11), %r15
	jmp	.L23144
	.p2align 6,,7
.L23130:
	cmpb	$2, %dl
	je	.L27131
	xorl	%ebx, %ebx
	testb	%dl, %dl
	sete	%bl
	jmp	.L23115
.L27131:
	movq	-9576(%rbp), %r15
	xorl	%ebx, %ebx
	movq	32(%r15), %rsi
	testq	%rsi, %rsi
	jne	.L27132
.L23133:
	movq	-9576(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%r12, %rdi
	testq	%rsi, %rsi
	jne	.L25067
	jmp	.L23190
.L27132:
	xorl	%edx, %edx
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L23115
	jmp	.L23133
	.p2align 6,,7
.L27125:
	movq	-9576(%rbp), %rsi
	xorl	%edx, %edx
	movq	%r12, %rdi
	movq	$0, save_expr_list.2(%rip)
	call	safe_from_p
	movq	save_expr_list.2(%rip), %rdx
	movl	%eax, %ebx
	testq	%rdx, %rdx
	je	.L23115
.L23123:
	movq	24(%rdx), %r14
	andb	$-17, 18(%r14)
	movq	(%rdx), %rdx
	testq	%rdx, %rdx
	jne	.L23123
	jmp	.L23115
.L27124:
	movq	-9560(%rbp), %r10
	movq	8(%r10), %r12
	cmpw	$61, (%r12)
	jne	.L23116
	cmpl	$52, 8(%r12)
	jbe	.L24530
	jmp	.L23116
.L27123:
	movq	8(%rcx), %rax
	movq	global_rtl+72(%rip), %rcx
	cmpq	%rcx, %rax
	je	.L23190
	cmpw	$75, (%rax)
	jne	.L23111
	cmpq	%rcx, 8(%rax)
	jne	.L23111
	jmp	.L23190
.L27122:
	movq	112(%rax), %rax
	testq	%rax, %rax
	je	.L23114
	cmpb	$25, 16(%rax)
	jne	.L23114
	jmp	.L23113
	.p2align 6,,7
.L10848:
	movl	-2716(%rbp), %eax
	cmpl	ptr_mode(%rip), %eax
	jne	.L10849
	movq	-9560(%rbp), %r12
	movq	-9576(%rbp), %rdx
	xorl	%r13d, %r13d
	testq	%r12, %r12
	movq	%rdx, -6848(%rbp)
	je	.L10930
	movq	8(%rdx), %rax
	testq	%rax, %rax
	je	.L10853
	movq	32(%rax), %rdx
	testq	%rdx, %rdx
	je	.L10853
	cmpb	$25, 16(%rdx)
	je	.L10853
	cmpb	$18, 16(%rax)
	je	.L27133
.L10854:
	movq	-9560(%rbp), %rsi
	cmpb	$51, 2(%rsi)
	je	.L10930
.L10853:
	movq	-9560(%rbp), %rbx
	movzwl	(%rbx), %eax
	cmpw	$66, %ax
	movl	%eax, %ecx
	je	.L27134
.L10851:
	cmpw	$63, %cx
	je	.L27135
.L10856:
	movl	$1, %eax
	testl	%eax, %eax
	jne	.L27136
	movq	-9576(%rbp), %r9
	movzbl	16(%r9), %edx
	movzbl	%dl, %r11d 
	movsbl	tree_code_type(%r11),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L10864
	mov	%eax, %ecx
	jmp	*.L10924(,%rcx,8)
	.section	.rodata
	.align 8
	.align 4
.L10924:
	.quad	.L10878
	.quad	.L10880
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10880
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10930
	.quad	.L10865
	.quad	.L10883
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10883
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10864
	.quad	.L10870
	.text
.L10865:
	movq	-9576(%rbp), %rdi
	movq	144(%rdi), %r15
	testq	%r15, %r15
	movq	%r15, %r13
	jne	.L24253
	xorl	%r13d, %r13d
.L10864:
	testq	%r13, %r13
	movl	$1, %ebx
	je	.L10855
.L24253:
	cmpw	$63, (%r13)
	je	.L27137
.L10927:
	movq	%r12, %rdi
	movq	%r13, %rsi
	xorl	%ebx, %ebx
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L10855
	cmpw	$66, (%r12)
	je	.L27138
.L10930:
	movl	$1, %ebx
.L10855:
	movq	-9552(%rbp), %r15
	testl	%ebx, %ebx
	movl	$0, %r9d
	cmovne	-9560(%rbp), %r9
	movl	%r14d, %ecx
	xorl	%edx, %edx
	movq	32(%r15), %rdi
	movq	%r9, %rsi
	call	expand_expr
	movl	%r14d, %ecx
	xorl	%edx, %edx
	movq	40(%r15), %rdi
	xorl	%esi, %esi
	movq	%rax, %r12
	call	expand_expr
	movq	%rax, %rbx
.L10824:
	cmpw	$75, (%r12)
	je	.L27139
.L24246:
	movq	%rbx, %r13
	movq	%r12, %rbx
.L10931:
	cmpw	$75, (%r13)
	je	.L27140
.L24248:
	movq	%r13, %rcx
.L10933:
	movzwl	(%rbx), %edx
	leal	-67(%rdx), %r13d
	cmpw	$1, %r13w
	jbe	.L10942
	cmpw	$54, %dx
	je	.L10942
	cmpw	$55, %dx
	je	.L10942
	cmpw	$58, %dx
	je	.L10942
	cmpw	$134, %dx
	je	.L10942
	cmpw	$56, %dx
	je	.L10942
	cmpw	$140, %dx
	je	.L10942
	cmpw	$78, (%rcx)
	je	.L10942
	movq	%rbx, %r12
	movq	%rcx, %rbx
.L10941:
	movl	-2716(%rbp), %esi
	movl	$75, %edi
	movq	%r12, %rdx
	movq	%rbx, %rcx
	call	simplify_binary_operation
	testq	%rax, %rax
	movq	%rax, %r13
	jne	.L7871
	movl	-2716(%rbp), %esi
	movl	$75, %edi
	movq	%r12, %rdx
	movq	%rbx, %rcx
.L25080:
	call	gen_rtx_fmt_ee
	jmp	.L23191
.L10942:
	movq	%rcx, %r12
	jmp	.L10941
.L27140:
	movq	16(%r13), %rdi
	movzwl	(%rdi), %edx
	leal	-67(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L10934
	cmpw	$54, %dx
	je	.L10934
	cmpw	$55, %dx
	je	.L10934
	cmpw	$58, %dx
	je	.L10934
	cmpw	$134, %dx
	je	.L10934
	cmpw	$56, %dx
	je	.L10934
	cmpw	$140, %dx
	jne	.L24248
.L10934:
	movq	const_int_rtx+512(%rip), %r12
	movl	-2716(%rbp), %esi
	movl	$75, %edi
	movq	8(%r13), %rdx
	movq	%rbx, %rcx
	movq	%r12, -2584(%rbp)
	call	simplify_binary_operation
	testq	%rax, %rax
	jne	.L10936
	cmpw	$78, (%rbx)
	je	.L27141
	movl	$75, %edi
	movl	-2716(%rbp), %esi
	movq	8(%r13), %rdx
	movq	%rbx, %rcx
.L24642:
	call	gen_rtx_fmt_ee
.L10936:
	movq	%rax, %rdi
	leaq	-2584(%rbp), %rsi
	call	eliminate_constant_term
	movq	16(%r13), %rcx
	movl	-2716(%rbp), %esi
	movq	-2584(%rbp), %rdx
	movl	$75, %edi
	movq	%rax, %rbx
	call	simplify_binary_operation
	testq	%rax, %rax
	movq	%rax, %rcx
	jne	.L10933
	movq	16(%r13), %rcx
	movq	-2584(%rbp), %rdx
	movl	$75, %edi
	movl	-2716(%rbp), %esi
	call	gen_rtx_fmt_ee
	movq	%rax, %rcx
	jmp	.L10933
.L27141:
	movl	-2716(%rbp), %esi
	movq	8(%r13), %rcx
	movl	$75, %edi
	movq	%rbx, %rdx
	jmp	.L24642
.L27139:
	movq	16(%r12), %rsi
	movzwl	(%rsi), %edx
	leal	-67(%rdx), %r14d
	cmpw	$1, %r14w
	jbe	.L10932
	cmpw	$54, %dx
	je	.L10932
	cmpw	$55, %dx
	je	.L10932
	cmpw	$58, %dx
	je	.L10932
	cmpw	$134, %dx
	je	.L10932
	cmpw	$56, %dx
	je	.L10932
	cmpw	$140, %dx
	jne	.L24246
.L10932:
	movq	%r12, %r13
	jmp	.L10931
.L27138:
	cmpw	$66, (%r13)
	jne	.L10930
	xorl	%esi, %esi
	movq	%r13, %rdi
	movq	%r12, %rdx
	movl	$rtx_addr_varies_p, %ecx
	call	true_dependence
	testl	%eax, %eax
	jne	.L10855
	jmp	.L10930
.L27137:
	movq	8(%r13), %r13
	cmpw	$61, (%r13)
	jne	.L10927
	cmpl	$52, 8(%r13)
	ja	.L10927
.L24473:
	xorl	%ebx, %ebx
	jmp	.L10855
.L10878:
	movq	-9576(%rbp), %rbx
	movq	%r12, %rdi
	movq	32(%rbx), %rsi
.L24641:
	xorl	%edx, %edx
	call	safe_from_p
	movl	%eax, %ebx
	jmp	.L10855
.L10880:
	movq	-9576(%rbp), %rax
	xorl	%edx, %edx
	movq	%r12, %rdi
	xorl	%ebx, %ebx
	movq	32(%rax), %rsi
	call	safe_from_p
	testl	%eax, %eax
	je	.L10855
	movq	-9576(%rbp), %r8
	movq	%r12, %rdi
	movq	40(%r8), %rsi
.L25089:
	xorl	%edx, %edx
	call	safe_from_p
	testl	%eax, %eax
	je	.L10855
	jmp	.L10930
.L10883:
	movzbl	%dl, %eax
	subl	$41, %eax
	cmpl	$80, %eax
	ja	.L10884
	mov	%eax, %esi
	jmp	*.L10915(,%rsi,8)
	.section	.rodata
	.align 8
	.align 4
.L10915:
	.quad	.L10894
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10912
	.quad	.L10900
	.quad	.L23173
	.quad	.L10906
	.quad	.L10907
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10884
	.quad	.L10908
	.quad	.L10884
	.quad	.L10904
	.quad	.L10885
	.text
.L10885:
	movq	-9576(%rbp), %r10
	movq	32(%r10), %rdi
	call	staticp
	testl	%eax, %eax
	jne	.L10930
	movq	-9576(%rbp), %rcx
	testb	$4, 18(%rcx)
	jne	.L10930
	movq	32(%rcx), %rsi
	xorl	%edx, %edx
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L10930
	movq	-9576(%rbp), %r9
	movq	32(%r9), %rbx
	movq	%rbx, -6848(%rbp)
	movzbq	16(%rbx), %r11
	cmpb	$100, tree_code_type(%r11)
	je	.L27142
.L10884:
	testq	%r13, %r13
	jne	.L24253
	movq	-6848(%rbp), %r8
	xorl	%ebx, %ebx
	movzbl	16(%r8), %edi
	call	first_rtl_op
	cmpl	%eax, %ebx
	movl	%eax, %r15d
	jge	.L23382
.L10922:
	movq	-6848(%rbp), %r10
	movslq	%ebx,%r11
	movq	32(%r10,%r11,8), %rsi
	testq	%rsi, %rsi
	jne	.L27143
.L10919:
	incl	%ebx
	cmpl	%r15d, %ebx
	jl	.L10922
.L23382:
	movq	-6848(%rbp), %rcx
	cmpb	$-110, 16(%rcx)
	jbe	.L10864
	movq	%r12, %rdi
	movq	%rcx, %rsi
	xorl	%ebx, %ebx
	call	*lang_hooks+80(%rip)
	testl	%eax, %eax
	je	.L10855
	jmp	.L10864
.L27143:
	xorl	%edx, %edx
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L10919
	jmp	.L24473
.L27142:
	movq	144(%rbx), %rax
	testq	%rax, %rax
	je	.L24473
	cmpw	$66, (%rax)
	jne	.L24473
	movq	8(%rax), %r13
	jmp	.L10884
.L10894:
	cmpw	$66, (%r12)
	jne	.L10884
	movq	-9576(%rbp), %rdi
	call	get_alias_set
	xorl	%edi, %edi
	movq	%rax, %rsi
	movq	16(%r12), %rax
	testq	%rax, %rax
	je	.L10899
	movq	(%rax), %rdi
.L10899:
	call	alias_sets_conflict_p
	xorl	%ebx, %ebx
	testl	%eax, %eax
	jne	.L10855
	jmp	.L10884
.L10912:
	movq	-9576(%rbp), %rax
	movq	%r12, %rdi
	movq	40(%rax), %rsi
	jmp	.L24641
.L10900:
	movzwl	(%r12), %eax
	cmpw	$61, %ax
	je	.L27144
.L10903:
	cmpw	$66, %ax
	jne	.L10884
	jmp	.L24473
.L27144:
	cmpl	$52, 8(%r12)
	jbe	.L24473
	jmp	.L10903
.L10906:
	movq	-9576(%rbp), %rdi
	movq	48(%rdi), %r13
	jmp	.L10884
.L10907:
	movq	%r12, %rdi
	movq	-9576(%rbp), %r12
	movq	32(%r12), %rsi
	jmp	.L24641
.L10908:
	movq	-9576(%rbp), %rbx
	movq	48(%rbx), %r13
	testq	%r13, %r13
	jne	.L24253
	movzbl	18(%rbx), %eax
	movl	$1, %ebx
	testb	$16, %al
	jne	.L10855
	movq	-9576(%rbp), %r13
	orb	$16, %al
	movq	%r12, %rdi
	movb	%al, 18(%r13)
	movq	-9576(%rbp), %rdx
	movq	32(%rdx), %rsi
	xorl	%edx, %edx
	call	safe_from_p
	testl	%eax, %eax
	jne	.L10911
	movq	-9576(%rbp), %rbx
	andb	$-17, 18(%rbx)
	jmp	.L24473
.L10911:
	movq	-9576(%rbp), %rdi
	movq	save_expr_list.2(%rip), %rdx
	xorl	%esi, %esi
	call	tree_cons
	movq	%rax, save_expr_list.2(%rip)
	jmp	.L10930
.L10904:
	movq	-9576(%rbp), %rcx
	cmpq	$0, 32(%rcx)
	jne	.L24473
	movq	-9576(%rbp), %r15
	movq	40(%r15), %r13
	jmp	.L10884
.L10870:
	cmpb	$2, %dl
	je	.L27145
	xorl	%ebx, %ebx
	testb	%dl, %dl
	sete	%bl
	jmp	.L10855
.L27145:
	movq	-9576(%rbp), %rdx
	xorl	%ebx, %ebx
	movq	32(%rdx), %rsi
	testq	%rsi, %rsi
	jne	.L27146
.L10873:
	movq	-9576(%rbp), %r13
	movq	%r12, %rdi
	movq	(%r13), %rsi
	testq	%rsi, %rsi
	jne	.L25089
	jmp	.L10930
.L27146:
	xorl	%edx, %edx
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L10855
	jmp	.L10873
.L27136:
	movq	-9576(%rbp), %rsi
	xorl	%edx, %edx
	movq	%r12, %rdi
	movq	$0, save_expr_list.2(%rip)
	call	safe_from_p
	movq	save_expr_list.2(%rip), %rdx
	movl	%eax, %ebx
	testq	%rdx, %rdx
	je	.L10855
.L10863:
	movq	24(%rdx), %r12
	andb	$-17, 18(%r12)
	movq	(%rdx), %rdx
	testq	%rdx, %rdx
	jne	.L10863
	jmp	.L10855
.L27135:
	movq	-9560(%rbp), %r10
	movq	8(%r10), %r12
	cmpw	$61, (%r12)
	jne	.L10856
	cmpl	$52, 8(%r12)
	jbe	.L24473
	jmp	.L10856
.L27134:
	movq	8(%rbx), %rax
	movq	global_rtl+72(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L10930
	cmpw	$75, (%rax)
	jne	.L10851
	cmpq	%rdx, 8(%rax)
	jne	.L10851
	jmp	.L10930
.L27133:
	movq	112(%rax), %rax
	testq	%rax, %rax
	je	.L10854
	cmpb	$25, 16(%rax)
	jne	.L10854
	jmp	.L10853
	.p2align 6,,7
.L27121:
	movl	-2516(%rbp), %eax
	testl	%eax, %eax
	jne	.L10790
	movl	flag_trapv(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L10789
.L10790:
	movq	-9552(%rbp), %rax
	movq	32(%rax), %rdi
	cmpb	$25, 16(%rdi)
	je	.L27147
.L10791:
	movq	-9576(%rbp), %rcx
	cmpb	$25, 16(%rcx)
	jne	.L10789
	movslq	-2716(%rbp),%r12
	cmpw	$32, mode_bitsize(%r12,%r12)
	ja	.L10789
	testb	$2, 17(%rdi)
	je	.L10789
	xorl	%eax, %eax
	movq	-9560(%rbp), %rsi
	cmpl	$3, %r14d
	sete	%al
	xorl	%edx, %edx
	leal	1(%rax,%rax), %ecx
	call	expand_expr
	movzwl	(%rax), %edx
	movq	%rax, %r12
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L10821
	cmpw	$54, %dx
	je	.L10821
	cmpw	$55, %dx
	je	.L10821
	cmpw	$58, %dx
	je	.L10821
	cmpw	$134, %dx
	je	.L10821
	cmpw	$56, %dx
	je	.L10821
	cmpw	$140, %dx
	je	.L10821
	movq	-9552(%rbp), %r11
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	%r14d, %ecx
	movq	40(%r11), %rdi
	call	expand_expr
	cmpl	$1, %r14d
	movq	%rax, %rbx
	je	.L10824
	cmpl	$3, %r14d
	je	.L10824
	jmp	.L10823
.L10821:
	movq	-9552(%rbp), %rsi
	movq	32(%rsi), %r8
	movq	40(%rsi), %r15
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	movzbl	61(%rdi), %r9d
	movq	32(%r15), %rdi
	shrb	$1, %r9b
	movzbl	%r9b, %edx
	call	immed_double_const
	movq	%r12, %rdi
.L25621:
	movq	8(%rax), %rsi
	call	plus_constant_wide
	cmpl	$1, %r14d
	movq	%rax, %r12
	je	.L24244
	cmpl	$3, %r14d
	je	.L24244
	xorl	%r15d, %r15d
	testq	%r13, %r13
	je	.L10826
	movl	(%r13), %eax
	andl	$67174399, %eax
	cmpl	$61, %eax
	je	.L27148
.L10826:
	xorl	%ebx, %ebx
.L10828:
	movzwl	(%r12), %ecx
	leal	-75(%rcx), %r14d
	cmpw	$1, %r14w
	ja	.L10829
	movq	pic_offset_table_rtx(%rip), %r10
	cmpq	%r10, 8(%r12)
	je	.L27149
.L10829:
	cmpw	$75, %cx
	je	.L27150
	cmpw	$76, %cx
	je	.L27151
	cmpw	$78, %cx
	je	.L27152
.L10834:
	testq	%r15, %r15
	je	.L10840
	movq	16(%r12), %r14
	movzwl	(%r14), %edx
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L10841
	cmpw	$54, %dx
	je	.L10841
	cmpw	$55, %dx
	je	.L10841
	cmpw	$58, %dx
	je	.L10841
	cmpw	$134, %dx
	je	.L10841
	cmpw	$56, %dx
	je	.L10841
	cmpw	$140, %dx
	je	.L10841
	cmpw	$61, %dx
	je	.L27153
.L10842:
	xorl	%ebx, %ebx
.L10841:
	cmpq	optab_table+16(%rip), %r15
	je	.L27154
.L10843:
	cmpq	optab_table(%rip), %r15
	je	.L27155
.L10844:
	movq	8(%r12), %rdi
	movq	%rbx, %rsi
	call	force_operand
	movq	%r14, %rdi
	movq	%rax, %rbx
.L24639:
	xorl	%esi, %esi
	call	force_operand
	xorl	%r9d, %r9d
	movq	%r13, %r8
	movzbl	2(%r12), %edi
	movq	%rax, %rcx
	movq	%r15, %rsi
	movq	%rbx, %rdx
	movl	$3, (%rsp)
	call	expand_binop
.L24640:
	movq	%rax, %rbx
	jmp	.L25059
.L27155:
	cmpw	$54, (%r14)
	jne	.L10844
	movq	8(%r12), %rdx
	cmpw	$75, (%rdx)
	jne	.L10844
	movq	8(%rdx), %rax
	cmpw	$61, (%rax)
	jne	.L10844
	movl	8(%rax), %eax
	cmpl	$52, %eax
	jbe	.L10844
	cmpl	$57, %eax
	ja	.L10844
	movzbl	2(%r12), %edi
	movq	%rbx, %r8
	movq	%r15, %rsi
	movl	$3, (%rsp)
	movq	%r14, %rcx
	xorl	%r9d, %r9d
	movq	8(%rdx), %rdx
	call	expand_binop
	movq	8(%r12), %rdx
	movq	%rax, %rbx
	movq	16(%rdx), %rdi
	jmp	.L24639
.L27154:
	cmpw	$54, %dx
	jne	.L10843
	movzbl	2(%r12), %edi
	movq	%r14, %rsi
	movq	optab_table(%rip), %r15
	call	negate_rtx
	movq	%rax, %r14
	jmp	.L10843
.L27153:
	cmpq	%rbx, %r14
	jne	.L10841
	jmp	.L10842
.L10840:
	cmpw	$63, %cx
	je	.L27156
.L10845:
	movq	%r12, %rbx
	jmp	.L25059
.L27156:
	movq	8(%r12), %rdi
	cmpw	$66, (%rdi)
	jne	.L10845
	movzbq	2(%rdi), %rax
	movzbq	2(%r12), %rbx
	movzbl	mode_size(%rax), %r13d
	cmpb	%r13b, mode_size(%rbx)
	jbe	.L10845
	xorl	%esi, %esi
	call	force_operand
	movq	8(%r12), %r14
	movq	%rax, %rsi
	movzbl	2(%r14), %edi
	call	force_reg
	movl	16(%r12), %ecx
	movq	8(%r12), %r8
	movzbl	2(%r12), %edi
	movq	%rax, %rsi
	movzbl	2(%r8), %edx
	call	simplify_gen_subreg
	movq	%rax, %r12
	jmp	.L10845
.L27152:
	movq	16(%r12), %r14
	movzwl	(%r14), %edx
	leal	-67(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L10838
	cmpw	$54, %dx
	je	.L10838
	cmpw	$55, %dx
	je	.L10838
	cmpw	$58, %dx
	je	.L10838
	cmpw	$134, %dx
	je	.L10838
	cmpw	$56, %dx
	je	.L10838
	cmpw	$140, %dx
	je	.L10838
	cmpw	$61, %dx
	je	.L27157
.L10839:
	xorl	%ebx, %ebx
.L10838:
	movq	8(%r12), %rdi
	movq	%rbx, %rsi
	call	force_operand
	xorl	%esi, %esi
	movq	%r14, %rdi
	movq	%rax, %r15
	call	force_operand
	movl	$1, %r8d
	movzbl	2(%r12), %edi
	movq	%r15, %rsi
	movq	%rax, %rdx
	movq	%r13, %rcx
	call	expand_mult
	jmp	.L24640
.L27157:
	cmpq	%rbx, %r14
	jne	.L10838
	jmp	.L10839
.L27151:
	movq	optab_table+16(%rip), %r15
	jmp	.L10834
.L27150:
	movq	optab_table(%rip), %r15
	jmp	.L10834
.L27149:
	movq	16(%r12), %r9
	movzwl	(%r9), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L10830
	cmpw	$58, %dx
	jne	.L10829
.L10830:
	testq	%rbx, %rbx
	je	.L27158
.L10831:
	movq	%rbx, %rdi
	movq	%r12, %rsi
	call	emit_move_insn
	jmp	.L25059
.L27158:
	movzbl	2(%r12), %edi
	call	gen_reg_rtx
	movq	%rax, %rbx
	jmp	.L10831
.L27148:
	cmpl	$52, 8(%r13)
	jbe	.L10826
	call	preserve_subexpressions_p
	movq	%r13, %rbx
	testl	%eax, %eax
	je	.L10828
	jmp	.L10826
	.p2align 6,,7
.L24244:
	movq	%r12, %r13
	jmp	.L7871
.L27147:
	movslq	-2716(%rbp),%r11
	cmpw	$64, mode_bitsize(%r11,%r11)
	ja	.L10791
	movq	-9576(%rbp), %rsi
	testb	$2, 17(%rsi)
	je	.L10791
	movq	%rsi, %rdi
	xorl	%edx, %edx
	movl	$1, %ecx
	movq	-9560(%rbp), %rsi
	call	expand_expr
	movq	-9552(%rbp), %rdx
	movq	%rax, %r15
	movq	40(%rdx), %rsi
	movq	32(%rdx), %r9
	movq	8(%rsi), %r8
	xorl	%esi, %esi
	movzbl	61(%r8), %edi
	shrb	$1, %dil
	movzbl	%dil, %edx
	movq	32(%r9), %rdi
	call	immed_double_const
	movq	%r15, %rdi
	jmp	.L25621
	.p2align 6,,7
.L27120:
	movq	40(%rdi), %r11
	cmpb	$25, 16(%r11)
	je	.L27159
	movq	-9552(%rbp), %rcx
	movq	40(%rcx), %r10
	movq	%r10, -9576(%rbp)
	jmp	.L10787
.L27159:
	movq	40(%rbx), %rsi
	movq	%rsi, -9576(%rbp)
	movq	%rsi, %rcx
	cmpb	$120, 16(%rsi)
	jne	.L10787
	movq	40(%rsi), %rax
	cmpq	global_rtl+24(%rip), %rax
	je	.L10788
	cmpq	global_rtl+16(%rip), %rax
	je	.L10788
	cmpq	global_rtl+40(%rip), %rax
	jne	.L10787
.L10788:
	movq	32(%rdx), %rsi
	movq	-9552(%rbp), %r8
	movq	%rsi, 40(%r8)
	movq	%rcx, 32(%rdx)
	movq	40(%r8), %r9
	movq	%r9, -9576(%rbp)
	jmp	.L10787
	.p2align 6,,7
.L27119:
	movq	optab_table+8(%rip), %rdi
	movq	%rdi, -9568(%rbp)
	jmp	.L10786
	.p2align 6,,7
.L10944:
	cmpl	$1, %r14d
	je	.L10946
	cmpl	$3, %r14d
	je	.L10946
.L10945:
	movq	-9552(%rbp), %r10
	movq	40(%r10), %rbx
	movq	%rbx, -9576(%rbp)
	cmpb	$25, 16(%rbx)
	je	.L27160
.L10949:
	movl	-2516(%rbp), %ecx
	testl	%ecx, %ecx
	jne	.L10953
	movl	flag_trapv(%rip), %edi
	testl	%edi, %edi
	je	.L10953
	movslq	-2716(%rbp),%r12
	cmpl	$1, mode_class(,%r12,4)
	je	.L27161
.L10953:
	movq	optab_table+16(%rip), %rbx
	movq	%rbx, -9568(%rbp)
	jmp	.L10849
.L27161:
	movq	optab_table+24(%rip), %rdx
	movq	%rdx, -9568(%rbp)
	jmp	.L10849
.L27160:
	movq	-2712(%rbp), %rsi
	movl	$77, %edi
	movq	%rbx, %rdx
	call	build1
	movq	%rax, %rdi
	call	fold
	movq	-2712(%rbp), %rsi
	movq	%rax, %rcx
	testb	$32, 17(%rsi)
	jne	.L24304
	testb	$8, 18(%rax)
	je	.L27162
	movq	-9552(%rbp), %rsi
	movq	40(%rsi), %r14
	movq	%r14, -9576(%rbp)
	jmp	.L10949
.L27162:
	movq	-9552(%rbp), %r11
	movl	$59, %edi
	xorl	%eax, %eax
	movq	32(%r11), %rdx
	call	build
	movq	%rax, -9552(%rbp)
	jmp	.L10784
	.p2align 6,,7
.L24304:
	movq	-9552(%rbp), %r9
	movq	40(%r9), %r15
	movq	%r15, -9576(%rbp)
	jmp	.L10949
.L10946:
	movq	-9552(%rbp), %rdx
	movq	32(%rdx), %rdi
	call	really_constant_p
	testl	%eax, %eax
	je	.L10945
	movq	-9552(%rbp), %rbx
	movq	40(%rbx), %rdi
	call	really_constant_p
	testl	%eax, %eax
	je	.L10945
	movq	-9552(%rbp), %r8
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	%r14d, %ecx
	movq	32(%r8), %rdi
	call	expand_expr
	movl	%r14d, %ecx
	xorl	%edx, %edx
	movq	%rax, %rbx
	xorl	%esi, %esi
	movq	-9552(%rbp), %rax
	movq	40(%rax), %rdi
	call	expand_expr
	cmpw	$54, (%rax)
	movq	%rax, %rcx
	je	.L27163
	movl	-2716(%rbp), %esi
	movl	$76, %edi
	movq	%rbx, %rdx
	jmp	.L25080
.L27163:
	movq	8(%rax), %rsi
	movq	%rbx, %rdi
	negq	%rsi
	call	plus_constant_wide
	jmp	.L23191
	.p2align 6,,7
.L10955:
	movq	-9552(%rbp), %rax
	movq	32(%rax), %rdx
	cmpb	$25, 16(%rdx)
	je	.L27164
.L10956:
	decl	%r14d
	je	.L27165
.L10957:
	movq	-9560(%rbp), %r14
	movq	-9552(%rbp), %rdi
	xorl	%r15d, %r15d
	testq	%r14, %r14
	movq	40(%rdi), %rbx
	je	.L11060
	movq	8(%rbx), %rax
	testq	%rax, %rax
	je	.L10983
	movq	32(%rax), %rdx
	testq	%rdx, %rdx
	je	.L10983
	cmpb	$25, 16(%rdx)
	je	.L10983
	cmpb	$18, 16(%rax)
	je	.L27166
.L10984:
	movq	-9560(%rbp), %r9
	cmpb	$51, 2(%r9)
	je	.L11060
.L10983:
	movq	-9560(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpw	$66, %ax
	movl	%eax, %ecx
	je	.L27167
.L10981:
	cmpw	$63, %cx
	je	.L27168
.L10986:
	movl	$1, %eax
	testl	%eax, %eax
	jne	.L27169
	movzbl	16(%rbx), %edx
	movzbl	%dl, %r12d 
	movsbl	tree_code_type(%r12),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L10994
	mov	%eax, %ecx
	jmp	*.L11054(,%rcx,8)
	.section	.rodata
	.align 8
	.align 4
.L11054:
	.quad	.L11037
	.quad	.L11010
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L11010
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L11060
	.quad	.L10995
	.quad	.L11013
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L11013
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L10994
	.quad	.L11000
	.text
.L10995:
	movq	144(%rbx), %r8
	testq	%r8, %r8
	movq	%r8, %r15
	jne	.L24254
	xorl	%r15d, %r15d
.L10994:
	testq	%r15, %r15
	movl	$1, %r12d
	je	.L10985
.L24254:
	cmpw	$63, (%r15)
	je	.L27170
.L11057:
	movq	%r14, %rdi
	movq	%r15, %rsi
	xorl	%r12d, %r12d
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L10985
	cmpw	$66, (%r14)
	je	.L27171
.L11060:
	movl	$1, %r12d
.L10985:
	testl	%r12d, %r12d
	movl	$0, %ebx
	cmovne	-9560(%rbp), %rbx
	movq	%rbx, -9560(%rbp)
	movq	-9552(%rbp), %rbx
	movq	32(%rbx), %rcx
	cmpb	$115, 16(%rcx)
	je	.L27172
.L11061:
	movq	-9552(%rbp), %r8
	movq	-9560(%rbp), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movq	32(%r8), %rdi
	call	expand_expr
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	-9552(%rbp), %rcx
	movq	%rax, %r14
	movq	40(%rcx), %rdi
	xorl	%ecx, %ecx
	call	expand_expr
	movl	-2516(%rbp), %r8d
	movq	%r13, %rcx
	movl	-2716(%rbp), %edi
	movq	%r14, %rsi
	movq	%rax, %rdx
	call	expand_mult
	jmp	.L23191
.L27172:
	movq	-2712(%rbp), %rax
	cmpb	$6, 16(%rax)
	jne	.L11061
	movq	32(%rcx), %r12
	movq	8(%rcx), %r15
	movq	8(%r12), %rsi
	movzwl	60(%r15), %edi
	movzwl	60(%rsi), %r9d
	andl	$511, %edi
	andl	$511, %r9d
	cmpl	%edi, %r9d
	jge	.L11061
	movq	40(%rbx), %rax
	movq	%rax, -9576(%rbp)
	cmpb	$25, 16(%rax)
	je	.L27173
.L11063:
	movq	-9576(%rbp), %rbx
	cmpb	$115, 16(%rbx)
	jne	.L11061
	movq	32(%rbx), %rdi
	movq	-9552(%rbp), %r9
	movq	8(%rdi), %rsi
	movq	32(%r9), %rdi
	movq	32(%rdi), %rdx
	movzwl	60(%rsi), %ebx
	movq	8(%rdx), %rcx
	andl	$511, %ebx
	movzwl	60(%rcx), %r11d
	andl	$511, %r11d
	cmpl	%r11d, %ebx
	jne	.L11061
	movzbl	17(%rsi), %eax
	movzbl	17(%rcx), %r15d
	shrb	$5, %al
	shrb	$5, %r15b
	andl	$1, %eax
	andl	$1, %r15d
	cmpl	%r15d, %eax
	jne	.L11061
.L11062:
	movq	32(%rdi), %r14
	movq	8(%r14), %rcx
	movzbl	61(%rcx), %r8d
	shrb	$1, %r8b
	testb	$32, 17(%rcx)
	movzbl	%r8b, %r14d
	je	.L11064
	movq	optab_table+64(%rip), %rbx
.L11065:
	movq	32(%rdi), %r11
	movq	8(%r11), %r10
	testb	$32, 17(%r10)
	je	.L11066
	movq	optab_table+72(%rip), %rdx
	movq	%rdx, -9568(%rbp)
.L11067:
	movslq	%r14d,%r12
	movzbl	mode_wider_mode(%r12), %r15d
	cmpl	%r15d, -2716(%rbp)
	jne	.L11061
	movslq	-2716(%rbp),%rax
	movq	-9568(%rbp), %rsi
	salq	$4, %rax
	cmpl	$1317, 8(%rsi,%rax)
	je	.L11069
	movq	32(%rdi), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	-9552(%rbp), %rbx
	movq	%rax, %r12
	movq	40(%rbx), %rdi
	cmpb	$25, 16(%rdi)
	je	.L25050
	movq	32(%rdi), %rdi
	jmp	.L25050
.L11069:
	cmpl	$1317, 8(%rbx,%rax)
	je	.L11061
	cmpl	word_mode(%rip), %r14d
	jne	.L11061
	movq	32(%rdi), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	%rax, %r15
	movq	-9552(%rbp), %rax
	movq	40(%rax), %rdi
	cmpb	$25, 16(%rdi)
	je	.L27174
	movq	32(%rdi), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
.L24646:
	movl	-2516(%rbp), %r9d
	movl	-2716(%rbp), %edi
	movq	%r15, %rdx
	movq	%r13, %r8
	movq	%rax, %rcx
	movq	%rbx, %rsi
	movq	%rax, %r12
	movl	$3, (%rsp)
	call	expand_binop
	movl	%r14d, %edi
	movq	%rax, %r13
	movq	%rax, %rsi
	call	gen_highpart
	movq	%r13, %rsi
	movl	%r14d, %edi
	movq	%rax, %rbx
	call	gen_highpart
	movl	-2516(%rbp), %r9d
	movq	%r15, %rdx
	movl	%r14d, %edi
	movq	%rbx, %rsi
	movq	%r12, %rcx
	movq	%rax, %r8
	call	expand_mult_highpart_adjust
	movq	%r13, %rsi
	movl	%r14d, %edi
	movq	%rax, %r15
	call	gen_highpart
	movq	%rax, %rdi
	movq	%r15, %rsi
.L25058:
	call	emit_move_insn
	jmp	.L7871
.L27174:
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movl	-2716(%rbp), %esi
	movl	%r14d, %edi
	movl	-2516(%rbp), %ecx
	movq	%rax, %rdx
	call	convert_modes
	jmp	.L24646
.L11066:
	movq	optab_table+64(%rip), %r9
	movq	%r9, -9568(%rbp)
	jmp	.L11067
.L11064:
	movq	optab_table+72(%rip), %rbx
	jmp	.L11065
.L27173:
	movq	%rax, %rdi
	call	int_fits_type_p
	testl	%eax, %eax
	je	.L24306
	movq	40(%rbx), %rdx
	movq	8(%rdx), %rcx
	movzbl	61(%rcx), %esi
	shrb	$1, %sil
	andl	$127, %esi
	cmpw	$64, mode_bitsize(%rsi,%rsi)
	jbe	.L27175
	movq	-9552(%rbp), %r12
	movq	32(%r12), %rdi
	jmp	.L11062
.L27175:
	movq	32(%rdx), %rdi
	call	exact_log2_wide
	testl	%eax, %eax
	js	.L24308
	movq	40(%rbx), %r8
	movq	%r8, -9576(%rbp)
	jmp	.L11063
.L24308:
	movq	-9552(%rbp), %rsi
	movq	32(%rsi), %rdi
	jmp	.L11062
.L24306:
	movq	-9552(%rbp), %r10
	movq	40(%r10), %r14
	movq	%r14, -9576(%rbp)
	jmp	.L11063
.L27171:
	cmpw	$66, (%r15)
	jne	.L11060
	xorl	%esi, %esi
	movq	%r15, %rdi
	movq	%r14, %rdx
	movl	$rtx_addr_varies_p, %ecx
	call	true_dependence
	testl	%eax, %eax
	jne	.L10985
	jmp	.L11060
	.p2align 6,,7
.L27170:
	movq	8(%r15), %r15
	cmpw	$61, (%r15)
	jne	.L11057
	cmpl	$52, 8(%r15)
	ja	.L11057
.L24474:
	xorl	%r12d, %r12d
	jmp	.L10985
.L11037:
	movq	32(%rbx), %rsi
	movq	%r14, %rdi
.L24645:
	xorl	%edx, %edx
	call	safe_from_p
	movl	%eax, %r12d
	jmp	.L10985
.L11010:
	movq	32(%rbx), %rsi
	xorl	%edx, %edx
	movq	%r14, %rdi
	xorl	%r12d, %r12d
	call	safe_from_p
	testl	%eax, %eax
	je	.L10985
	movq	%r14, %rdi
	movq	40(%rbx), %rsi
.L25090:
	xorl	%edx, %edx
	call	safe_from_p
	testl	%eax, %eax
	je	.L10985
	jmp	.L11060
.L11013:
	movzbl	%dl, %eax
	subl	$41, %eax
	cmpl	$80, %eax
	ja	.L11014
	mov	%eax, %r10d
	jmp	*.L11045(,%r10,8)
	.section	.rodata
	.align 8
	.align 4
.L11045:
	.quad	.L11024
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11042
	.quad	.L11030
	.quad	.L23173
	.quad	.L11036
	.quad	.L11037
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11014
	.quad	.L11038
	.quad	.L11014
	.quad	.L11034
	.quad	.L11015
	.text
.L11015:
	movq	32(%rbx), %rdi
	call	staticp
	testl	%eax, %eax
	jne	.L11060
	testb	$4, 18(%rbx)
	jne	.L11060
	movq	32(%rbx), %rsi
	xorl	%edx, %edx
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11060
	movq	32(%rbx), %rbx
	movzbq	16(%rbx), %r11
	cmpb	$100, tree_code_type(%r11)
	je	.L27176
.L11014:
	testq	%r15, %r15
	jne	.L24254
	movzbl	16(%rbx), %edi
	xorl	%r12d, %r12d
	call	first_rtl_op
	cmpl	%eax, %r12d
	movl	%eax, -3340(%rbp)
	jge	.L23386
.L11052:
	movslq	%r12d,%rdx
	movq	32(%rbx,%rdx,8), %rsi
	testq	%rsi, %rsi
	jne	.L27177
.L11049:
	incl	%r12d
	cmpl	-3340(%rbp), %r12d
	jl	.L11052
.L23386:
	cmpb	$-110, 16(%rbx)
	jbe	.L10994
	movq	%r14, %rdi
	movq	%rbx, %rsi
	xorl	%r12d, %r12d
	call	*lang_hooks+80(%rip)
	testl	%eax, %eax
	je	.L10985
	jmp	.L10994
.L27177:
	xorl	%edx, %edx
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11049
	jmp	.L24474
.L27176:
	movq	144(%rbx), %rax
	testq	%rax, %rax
	je	.L24474
	cmpw	$66, (%rax)
	jne	.L24474
	movq	8(%rax), %r15
	jmp	.L11014
.L11024:
	cmpw	$66, (%r14)
	jne	.L11014
	movq	%rbx, %rdi
	call	get_alias_set
	xorl	%edi, %edi
	movq	%rax, %rsi
	movq	16(%r14), %rax
	testq	%rax, %rax
	je	.L11029
	movq	(%rax), %rdi
.L11029:
	call	alias_sets_conflict_p
	xorl	%r12d, %r12d
	testl	%eax, %eax
	jne	.L10985
	jmp	.L11014
.L11042:
	movq	%r14, %rdi
	movq	40(%rbx), %rsi
	jmp	.L24645
.L11030:
	movzwl	(%r14), %eax
	cmpw	$61, %ax
	je	.L27178
.L11033:
	cmpw	$66, %ax
	jne	.L11014
	jmp	.L24474
.L27178:
	cmpl	$52, 8(%r14)
	jbe	.L24474
	jmp	.L11033
.L11036:
	movq	48(%rbx), %r15
	jmp	.L11014
.L11038:
	movq	48(%rbx), %r15
	testq	%r15, %r15
	jne	.L24254
	movzbl	18(%rbx), %eax
	movl	$1, %r12d
	testb	$16, %al
	jne	.L10985
	movq	32(%rbx), %rsi
	orb	$16, %al
	xorl	%edx, %edx
	movb	%al, 18(%rbx)
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11041
	andb	$-17, 18(%rbx)
	jmp	.L24474
.L11041:
	movq	save_expr_list.2(%rip), %rdx
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	tree_cons
	movq	%rax, save_expr_list.2(%rip)
	jmp	.L11060
.L11034:
	cmpq	$0, 32(%rbx)
	jne	.L24474
	movq	40(%rbx), %r15
	jmp	.L11014
.L11000:
	cmpb	$2, %dl
	je	.L27179
	testb	%dl, %dl
	sete	%r14b
	movzbl	%r14b, %r12d
	jmp	.L10985
.L27179:
	movq	32(%rbx), %rsi
	xorl	%r12d, %r12d
	testq	%rsi, %rsi
	jne	.L27180
.L11003:
	movq	(%rbx), %rsi
	movq	%r14, %rdi
	testq	%rsi, %rsi
	jne	.L25090
	jmp	.L11060
.L27180:
	xorl	%edx, %edx
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L10985
	jmp	.L11003
	.p2align 6,,7
.L27169:
	xorl	%edx, %edx
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	$0, save_expr_list.2(%rip)
	call	safe_from_p
	movq	save_expr_list.2(%rip), %rdx
	movl	%eax, %r12d
	testq	%rdx, %rdx
	je	.L10985
.L10993:
	movq	24(%rdx), %r15
	andb	$-17, 18(%r15)
	movq	(%rdx), %rdx
	testq	%rdx, %rdx
	jne	.L10993
	jmp	.L10985
.L27168:
	movq	-9560(%rbp), %rsi
	movq	8(%rsi), %r14
	cmpw	$61, (%r14)
	jne	.L10986
	cmpl	$52, 8(%r14)
	jbe	.L24474
	jmp	.L10986
	.p2align 6,,7
.L27167:
	movq	8(%rdx), %rax
	movq	global_rtl+72(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L11060
	cmpw	$75, (%rax)
	jne	.L10981
	cmpq	%rdx, 8(%rax)
	jne	.L10981
	jmp	.L11060
.L27166:
	movq	112(%rax), %rax
	testq	%rax, %rax
	je	.L10984
	cmpb	$25, 16(%rax)
	jne	.L10984
	jmp	.L10983
	.p2align 6,,7
.L27165:
	movl	-2716(%rbp), %eax
	cmpl	ptr_mode(%rip), %eax
	jne	.L10957
	movq	-9552(%rbp), %r11
	xorl	%esi, %esi
	movq	40(%r11), %rdi
	call	host_integerp
	testl	%eax, %eax
	je	.L10957
	movq	-9552(%rbp), %r13
	movq	-9560(%rbp), %rsi
	xorl	%edx, %edx
	movl	$1, %ecx
	movq	32(%r13), %rdi
	call	expand_expr
	movq	%rax, %r13
	movzwl	(%rax), %eax
	cmpw	$61, %ax
	movl	%eax, %ecx
	je	.L10979
	subl	$75, %eax
	xorl	%r14d, %r14d
	xorl	%ebx, %ebx
	cmpw	$1, %ax
	ja	.L10962
	movq	pic_offset_table_rtx(%rip), %r15
	cmpq	%r15, 8(%r13)
	je	.L27181
.L10962:
	cmpw	$75, %cx
	je	.L27182
	cmpw	$76, %cx
	je	.L27183
	cmpw	$78, %cx
	je	.L27184
.L10967:
	testq	%r14, %r14
	je	.L10973
	cmpq	optab_table+16(%rip), %r14
	movq	16(%r13), %r12
	movzwl	(%r12), %eax
	je	.L27185
.L10976:
	cmpq	optab_table(%rip), %r14
	je	.L27186
.L10977:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	force_operand
	movq	%r12, %rdi
	movq	%rax, %rbx
.L24643:
	xorl	%esi, %esi
	call	force_operand
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movzbl	2(%r13), %edi
	movq	%rax, %rcx
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movl	$3, (%rsp)
	call	expand_binop
.L24644:
	movq	%rax, %rbx
.L10965:
	cmpw	$61, (%rbx)
	movq	%rbx, %r13
	je	.L10979
	movl	-2716(%rbp), %edi
	movq	%rbx, %rsi
	call	copy_to_mode_reg
	movq	%rax, %r13
.L10979:
	movq	-9552(%rbp), %rax
	xorl	%esi, %esi
	movq	40(%rax), %rdi
	call	tree_low_cst
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	gen_rtx_CONST_INT
	movq	%r13, %rdx
	movl	-2716(%rbp), %esi
	movq	%rax, %rcx
	movl	$78, %edi
	jmp	.L25080
.L27186:
	cmpw	$54, (%r12)
	jne	.L10977
	movq	8(%r13), %rdx
	cmpw	$75, (%rdx)
	jne	.L10977
	movq	8(%rdx), %rax
	cmpw	$61, (%rax)
	jne	.L10977
	movl	8(%rax), %eax
	cmpl	$52, %eax
	jbe	.L10977
	cmpl	$57, %eax
	ja	.L10977
	movzbl	2(%r13), %edi
	movq	%r12, %rcx
	movq	%r14, %rsi
	movl	$3, (%rsp)
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	8(%rdx), %rdx
	call	expand_binop
	movq	8(%r13), %rcx
	movq	%rax, %rbx
	movq	16(%rcx), %rdi
	jmp	.L24643
.L27185:
	cmpw	$54, %ax
	jne	.L10976
	movzbl	2(%r13), %edi
	movq	%r12, %rsi
	movq	optab_table(%rip), %r14
	call	negate_rtx
	movq	%rax, %r12
	jmp	.L10976
.L10973:
	cmpw	$63, %cx
	je	.L27187
.L10978:
	movq	%r13, %rbx
	jmp	.L10965
.L27187:
	movq	8(%r13), %rdi
	cmpw	$66, (%rdi)
	jne	.L10978
	movzbq	2(%rdi), %r10
	movzbq	2(%r13), %r8
	movzbl	mode_size(%r10), %ebx
	cmpb	%bl, mode_size(%r8)
	jbe	.L10978
	xorl	%esi, %esi
	call	force_operand
	movq	8(%r13), %rdx
	movq	%rax, %rsi
	movzbl	2(%rdx), %edi
	call	force_reg
	movl	16(%r13), %ecx
	movq	8(%r13), %r11
	movzbl	2(%r13), %edi
	movq	%rax, %rsi
	movzbl	2(%r11), %edx
	call	simplify_gen_subreg
	movq	%rax, %r13
	jmp	.L10978
.L27184:
	movq	16(%r13), %r12
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	force_operand
	xorl	%esi, %esi
	movq	%r12, %rdi
	movq	%rax, %r14
	call	force_operand
	movl	$1, %r8d
	movzbl	2(%r13), %edi
	movq	%r14, %rsi
	movq	%rax, %rdx
	xorl	%ecx, %ecx
	call	expand_mult
	jmp	.L24644
.L27183:
	movq	optab_table+16(%rip), %r14
	jmp	.L10967
.L27182:
	movq	optab_table(%rip), %r14
	jmp	.L10967
.L27181:
	movq	16(%r13), %rsi
	movzwl	(%rsi), %edx
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L10963
	cmpw	$58, %dx
	jne	.L10962
.L10963:
	testq	%rbx, %rbx
	je	.L27188
.L10964:
	movq	%rbx, %rdi
	movq	%r13, %rsi
	call	emit_move_insn
	jmp	.L10965
.L27188:
	movzbl	2(%r13), %edi
	call	gen_reg_rtx
	movq	%rax, %rbx
	jmp	.L10964
	.p2align 6,,7
.L27164:
	movq	40(%rax), %r10
	movq	%rdx, 40(%rax)
	movq	%r10, 32(%rax)
	jmp	.L10956
.L11167:
	movq	-9560(%rbp), %r15
	movq	-9552(%rbp), %rax
	testq	%r15, %r15
	movq	40(%rax), %rbx
	movq	$0, -6864(%rbp)
	je	.L11248
	movq	8(%rbx), %rax
	testq	%rax, %rax
	je	.L11171
	movq	32(%rax), %rdx
	testq	%rdx, %rdx
	je	.L11171
	cmpb	$25, 16(%rdx)
	je	.L11171
	cmpb	$18, 16(%rax)
	je	.L27189
.L11172:
	movq	-9560(%rbp), %r10
	cmpb	$51, 2(%r10)
	je	.L11248
.L11171:
	movq	-9560(%rbp), %rsi
	movzwl	(%rsi), %eax
	cmpw	$66, %ax
	movl	%eax, %ecx
	je	.L27190
.L11169:
	cmpw	$63, %cx
	je	.L27191
.L11174:
	movl	$1, %eax
	testl	%eax, %eax
	jne	.L27192
	movzbl	16(%rbx), %edx
	movzbl	%dl, %r9d 
	movsbl	tree_code_type(%r9),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L11182
	mov	%eax, %esi
	jmp	*.L11242(,%rsi,8)
	.section	.rodata
	.align 8
	.align 4
.L11242:
	.quad	.L11225
	.quad	.L11198
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11198
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11248
	.quad	.L11183
	.quad	.L11201
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11201
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11182
	.quad	.L11188
	.text
.L11183:
	movq	144(%rbx), %r14
	testq	%r14, %r14
	movq	%r14, -6864(%rbp)
	jne	.L24256
	movq	$0, -6864(%rbp)
.L11182:
	cmpq	$0, -6864(%rbp)
	movl	$1, %r14d
	je	.L11173
.L24256:
	movq	-6864(%rbp), %rax
	cmpw	$63, (%rax)
	je	.L27193
.L11245:
	movq	-6864(%rbp), %rsi
	movq	%r15, %rdi
	xorl	%r14d, %r14d
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L11173
	cmpw	$66, (%r15)
	je	.L27194
.L11248:
	movl	$1, %r14d
.L11173:
	movq	-9552(%rbp), %rsi
	testl	%r14d, %r14d
	movl	$0, %edx
	cmovne	-9560(%rbp), %rdx
	xorl	%ecx, %ecx
	movq	32(%rsi), %rdi
	movq	%rdx, %rsi
	xorl	%edx, %edx
	call	expand_expr
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	-9552(%rbp), %r14
	xorl	%esi, %esi
	movq	%rax, %rbx
	movq	40(%r14), %rdi
	call	expand_expr
	movl	$1, %edi
	movl	-2516(%rbp), %r15d
	movl	%r15d, (%rsp)
.L25081:
	movl	-2716(%rbp), %edx
	movl	%r12d, %esi
	movq	%rbx, %rcx
	movq	%rax, %r8
	movq	%r13, %r9
	call	expand_divmod
	jmp	.L23191
.L27194:
	movq	-6864(%rbp), %rcx
	cmpw	$66, (%rcx)
	jne	.L11248
	movq	%rcx, %rdi
	xorl	%esi, %esi
	movq	%r15, %rdx
	movl	$rtx_addr_varies_p, %ecx
	call	true_dependence
	testl	%eax, %eax
	jne	.L11173
	jmp	.L11248
	.p2align 6,,7
.L27193:
	movq	8(%rax), %rdx
	cmpw	$61, (%rdx)
	movq	%rdx, -6864(%rbp)
	jne	.L11245
	cmpl	$52, 8(%rdx)
	ja	.L11245
.L24476:
	xorl	%r14d, %r14d
	jmp	.L11173
.L11225:
	movq	32(%rbx), %rsi
	movq	%r15, %rdi
.L24649:
	xorl	%edx, %edx
	call	safe_from_p
	movl	%eax, %r14d
	jmp	.L11173
.L11198:
	movq	32(%rbx), %rsi
	xorl	%edx, %edx
	movq	%r15, %rdi
	xorl	%r14d, %r14d
	call	safe_from_p
	testl	%eax, %eax
	je	.L11173
	movq	%r15, %rdi
	movq	40(%rbx), %rsi
.L25092:
	xorl	%edx, %edx
	call	safe_from_p
	testl	%eax, %eax
	je	.L11173
	jmp	.L11248
.L11201:
	movzbl	%dl, %eax
	subl	$41, %eax
	cmpl	$80, %eax
	ja	.L11202
	mov	%eax, %ecx
	jmp	*.L11233(,%rcx,8)
	.section	.rodata
	.align 8
	.align 4
.L11233:
	.quad	.L11212
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11230
	.quad	.L11218
	.quad	.L23173
	.quad	.L11224
	.quad	.L11225
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11202
	.quad	.L11226
	.quad	.L11202
	.quad	.L11222
	.quad	.L11203
	.text
.L11203:
	movq	32(%rbx), %rdi
	call	staticp
	testl	%eax, %eax
	jne	.L11248
	testb	$4, 18(%rbx)
	jne	.L11248
	movq	32(%rbx), %rsi
	xorl	%edx, %edx
	movq	%r15, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11248
	movq	32(%rbx), %rbx
	movzbq	16(%rbx), %r8
	cmpb	$100, tree_code_type(%r8)
	je	.L27195
.L11202:
	cmpq	$0, -6864(%rbp)
	jne	.L24256
	movzbl	16(%rbx), %edi
	xorl	%r14d, %r14d
	call	first_rtl_op
	cmpl	%eax, %r14d
	movl	%eax, -3348(%rbp)
	jge	.L23394
.L11240:
	movslq	%r14d,%r9
	movq	32(%rbx,%r9,8), %rsi
	testq	%rsi, %rsi
	jne	.L27196
.L11237:
	incl	%r14d
	cmpl	-3348(%rbp), %r14d
	jl	.L11240
.L23394:
	cmpb	$-110, 16(%rbx)
	jbe	.L11182
	movq	%r15, %rdi
	movq	%rbx, %rsi
	xorl	%r14d, %r14d
	call	*lang_hooks+80(%rip)
	testl	%eax, %eax
	je	.L11173
	jmp	.L11182
.L27196:
	xorl	%edx, %edx
	movq	%r15, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11237
	jmp	.L24476
.L27195:
	movq	144(%rbx), %rax
	testq	%rax, %rax
	je	.L24476
	cmpw	$66, (%rax)
	jne	.L24476
	movq	8(%rax), %rdi
	movq	%rdi, -6864(%rbp)
	jmp	.L11202
.L11212:
	cmpw	$66, (%r15)
	jne	.L11202
	movq	%rbx, %rdi
	call	get_alias_set
	xorl	%edi, %edi
	movq	%rax, %rsi
	movq	16(%r15), %rax
	testq	%rax, %rax
	je	.L11217
	movq	(%rax), %rdi
.L11217:
	call	alias_sets_conflict_p
	xorl	%r14d, %r14d
	testl	%eax, %eax
	jne	.L11173
	jmp	.L11202
.L11230:
	movq	%r15, %rdi
	movq	40(%rbx), %rsi
	jmp	.L24649
.L11218:
	movzwl	(%r15), %eax
	cmpw	$61, %ax
	je	.L27197
.L11221:
	cmpw	$66, %ax
	jne	.L11202
	jmp	.L24476
.L27197:
	cmpl	$52, 8(%r15)
	jbe	.L24476
	jmp	.L11221
.L11224:
	movq	48(%rbx), %r10
	movq	%r10, -6864(%rbp)
	jmp	.L11202
.L11226:
	movq	48(%rbx), %r11
	testq	%r11, %r11
	movq	%r11, -6864(%rbp)
	jne	.L24256
	movzbl	18(%rbx), %eax
	movl	$1, %r14d
	testb	$16, %al
	jne	.L11173
	movq	32(%rbx), %rsi
	orb	$16, %al
	xorl	%edx, %edx
	movb	%al, 18(%rbx)
	movq	%r15, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11229
	andb	$-17, 18(%rbx)
	jmp	.L24476
.L11229:
	movq	save_expr_list.2(%rip), %rdx
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	tree_cons
	movq	%rax, save_expr_list.2(%rip)
	jmp	.L11248
.L11222:
	cmpq	$0, 32(%rbx)
	jne	.L24476
	movq	40(%rbx), %rax
	movq	%rax, -6864(%rbp)
	jmp	.L11202
.L11188:
	cmpb	$2, %dl
	je	.L27198
	testb	%dl, %dl
	sete	%dl
	movzbl	%dl, %r14d
	jmp	.L11173
.L27198:
	movq	32(%rbx), %rsi
	xorl	%r14d, %r14d
	testq	%rsi, %rsi
	jne	.L27199
.L11191:
	movq	(%rbx), %rsi
	movq	%r15, %rdi
	testq	%rsi, %rsi
	jne	.L25092
	jmp	.L11248
.L27199:
	xorl	%edx, %edx
	movq	%r15, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L11173
	jmp	.L11191
	.p2align 6,,7
.L27192:
	xorl	%edx, %edx
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	$0, save_expr_list.2(%rip)
	call	safe_from_p
	movq	save_expr_list.2(%rip), %rdx
	movl	%eax, %r14d
	testq	%rdx, %rdx
	je	.L11173
.L11181:
	movq	24(%rdx), %r15
	andb	$-17, 18(%r15)
	movq	(%rdx), %rdx
	testq	%rdx, %rdx
	jne	.L11181
	jmp	.L11173
.L27191:
	movq	-9560(%rbp), %r11
	movq	8(%r11), %r15
	cmpw	$61, (%r15)
	jne	.L11174
	cmpl	$52, 8(%r15)
	jbe	.L24476
	jmp	.L11174
	.p2align 6,,7
.L27190:
	movq	8(%rsi), %rax
	movq	global_rtl+72(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L11248
	cmpw	$75, (%rax)
	jne	.L11169
	cmpq	%rdx, 8(%rax)
	jne	.L11169
	jmp	.L11248
.L27189:
	movq	112(%rax), %rax
	testq	%rax, %rax
	je	.L11172
	cmpb	$25, 16(%rax)
	jne	.L11172
	jmp	.L11171
	.p2align 6,,7
.L11162:
	movl	flag_unsafe_math_optimizations(%rip), %r12d
	testl	%r12d, %r12d
	je	.L11163
	movl	optimize(%rip), %r14d
	testl	%r14d, %r14d
	je	.L11163
	movl	optimize_size(%rip), %edx
	testl	%edx, %edx
	jne	.L11163
	movq	-2712(%rbp), %rbx
	cmpb	$7, 16(%rbx)
	je	.L27200
.L11163:
	movq	optab_table+80(%rip), %rsi
.L25048:
	movq	-9552(%rbp), %r9
	movq	%rsi, -9568(%rbp)
	movq	40(%r9), %r11
	movq	%r11, -9576(%rbp)
	jmp	.L10849
.L27200:
	movq	-9552(%rbp), %rbx
	movq	32(%rbx), %rdi
	call	real_onep
	testl	%eax, %eax
	jne	.L11163
	movq	dconst1(%rip), %rdi
	movq	dconst1+8(%rip), %r8
	movq	dconst1+16(%rip), %rcx
	movq	%rdi, (%rsp)
	movq	%r8, 8(%rsp)
	movq	-2712(%rbp), %rdi
	movq	%rcx, 16(%rsp)
	call	build_real
	movq	40(%rbx), %rcx
	movq	-2712(%rbp), %rsi
	movq	%rax, %rdx
	movl	$70, %edi
	xorl	%eax, %eax
	call	build
	movq	32(%rbx), %rdx
	movq	-2712(%rbp), %rsi
	movq	%rax, %rcx
	movl	$61, %edi
	xorl	%eax, %eax
	call	build
	movl	%r15d, %edx
	movq	%r13, %rsi
	movl	-2516(%rbp), %ecx
	movq	%rax, %rdi
	jmp	.L25083
	.p2align 6,,7
.L11080:
	movq	-9560(%rbp), %r15
	movq	-9552(%rbp), %rdi
	testq	%r15, %r15
	movq	40(%rdi), %rbx
	movq	$0, -6856(%rbp)
	je	.L11161
	movq	8(%rbx), %rax
	testq	%rax, %rax
	je	.L11084
	movq	32(%rax), %rdx
	testq	%rdx, %rdx
	je	.L11084
	cmpb	$25, 16(%rdx)
	je	.L11084
	cmpb	$18, 16(%rax)
	je	.L27201
.L11085:
	movq	-9560(%rbp), %r10
	cmpb	$51, 2(%r10)
	je	.L11161
.L11084:
	movq	-9560(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpw	$66, %ax
	movl	%eax, %ecx
	je	.L27202
.L11082:
	cmpw	$63, %cx
	je	.L27203
.L11087:
	movl	$1, %eax
	testl	%eax, %eax
	jne	.L27204
	movzbl	16(%rbx), %edx
	movzbl	%dl, %esi 
	movsbl	tree_code_type(%rsi),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L11095
	mov	%eax, %r14d
	jmp	*.L11155(,%r14,8)
	.section	.rodata
	.align 8
	.align 4
.L11155:
	.quad	.L11138
	.quad	.L11111
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11111
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11161
	.quad	.L11096
	.quad	.L11114
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11114
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11095
	.quad	.L11101
	.text
.L11096:
	movq	144(%rbx), %rdx
	testq	%rdx, %rdx
	movq	%rdx, -6856(%rbp)
	jne	.L24255
	movq	$0, -6856(%rbp)
.L11095:
	cmpq	$0, -6856(%rbp)
	movl	$1, %r14d
	je	.L11086
.L24255:
	movq	-6856(%rbp), %rcx
	cmpw	$63, (%rcx)
	je	.L27205
.L11158:
	movq	-6856(%rbp), %rsi
	movq	%r15, %rdi
	xorl	%r14d, %r14d
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L11086
	cmpw	$66, (%r15)
	je	.L27206
.L11161:
	movl	$1, %r14d
.L11086:
	testl	%r14d, %r14d
	movl	$0, %esi
	movq	-9552(%rbp), %r9
	cmovne	-9560(%rbp), %rsi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rsi, -9560(%rbp)
	movq	-9560(%rbp), %rsi
	movq	32(%r9), %rdi
	call	expand_expr
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	-9552(%rbp), %r11
	xorl	%esi, %esi
	movq	%rax, %rbx
	movq	40(%r11), %rdi
	call	expand_expr
	xorl	%edi, %edi
	movl	-2516(%rbp), %r15d
	movl	%r15d, (%rsp)
	jmp	.L25081
.L27206:
	movq	-6856(%rbp), %rsi
	cmpw	$66, (%rsi)
	jne	.L11161
	movq	%rsi, %rdi
	movq	%r15, %rdx
	movl	$rtx_addr_varies_p, %ecx
	xorl	%esi, %esi
	call	true_dependence
	testl	%eax, %eax
	jne	.L11086
	jmp	.L11161
	.p2align 6,,7
.L27205:
	movq	8(%rcx), %rbx
	cmpw	$61, (%rbx)
	movq	%rbx, -6856(%rbp)
	jne	.L11158
	cmpl	$52, 8(%rbx)
	ja	.L11158
.L24475:
	xorl	%r14d, %r14d
	jmp	.L11086
.L11138:
	movq	32(%rbx), %rsi
	movq	%r15, %rdi
.L24648:
	xorl	%edx, %edx
	call	safe_from_p
	movl	%eax, %r14d
	jmp	.L11086
.L11111:
	movq	32(%rbx), %rsi
	xorl	%edx, %edx
	movq	%r15, %rdi
	xorl	%r14d, %r14d
	call	safe_from_p
	testl	%eax, %eax
	je	.L11086
	movq	%r15, %rdi
	movq	40(%rbx), %rsi
.L25091:
	xorl	%edx, %edx
	call	safe_from_p
	testl	%eax, %eax
	je	.L11086
	jmp	.L11161
.L11114:
	movzbl	%dl, %eax
	subl	$41, %eax
	cmpl	$80, %eax
	ja	.L11115
	mov	%eax, %ecx
	jmp	*.L11146(,%rcx,8)
	.section	.rodata
	.align 8
	.align 4
.L11146:
	.quad	.L11125
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11143
	.quad	.L11131
	.quad	.L23173
	.quad	.L11137
	.quad	.L11138
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11115
	.quad	.L11139
	.quad	.L11115
	.quad	.L11135
	.quad	.L11116
	.text
.L11116:
	movq	32(%rbx), %rdi
	call	staticp
	testl	%eax, %eax
	jne	.L11161
	testb	$4, 18(%rbx)
	jne	.L11161
	movq	32(%rbx), %rsi
	xorl	%edx, %edx
	movq	%r15, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11161
	movq	32(%rbx), %rbx
	movzbq	16(%rbx), %r8
	cmpb	$100, tree_code_type(%r8)
	je	.L27207
.L11115:
	cmpq	$0, -6856(%rbp)
	jne	.L24255
	movzbl	16(%rbx), %edi
	xorl	%r14d, %r14d
	call	first_rtl_op
	cmpl	%eax, %r14d
	movl	%eax, -3344(%rbp)
	jge	.L23390
.L11153:
	movslq	%r14d,%r10
	movq	32(%rbx,%r10,8), %rsi
	testq	%rsi, %rsi
	jne	.L27208
.L11150:
	incl	%r14d
	cmpl	-3344(%rbp), %r14d
	jl	.L11153
.L23390:
	cmpb	$-110, 16(%rbx)
	jbe	.L11095
	movq	%r15, %rdi
	movq	%rbx, %rsi
	xorl	%r14d, %r14d
	call	*lang_hooks+80(%rip)
	testl	%eax, %eax
	je	.L11086
	jmp	.L11095
.L27208:
	xorl	%edx, %edx
	movq	%r15, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11150
	jmp	.L24475
.L27207:
	movq	144(%rbx), %rax
	testq	%rax, %rax
	je	.L24475
	cmpw	$66, (%rax)
	jne	.L24475
	movq	8(%rax), %rax
.L24647:
	movq	%rax, -6856(%rbp)
	jmp	.L11115
.L11125:
	cmpw	$66, (%r15)
	jne	.L11115
	movq	%rbx, %rdi
	call	get_alias_set
	xorl	%edi, %edi
	movq	%rax, %rsi
	movq	16(%r15), %rax
	testq	%rax, %rax
	je	.L11130
	movq	(%rax), %rdi
.L11130:
	call	alias_sets_conflict_p
	xorl	%r14d, %r14d
	testl	%eax, %eax
	jne	.L11086
	jmp	.L11115
.L11143:
	movq	%r15, %rdi
	movq	40(%rbx), %rsi
	jmp	.L24648
.L11131:
	movzwl	(%r15), %eax
	cmpw	$61, %ax
	je	.L27209
.L11134:
	cmpw	$66, %ax
	jne	.L11115
	jmp	.L24475
.L27209:
	cmpl	$52, 8(%r15)
	jbe	.L24475
	jmp	.L11134
.L11137:
	movq	48(%rbx), %rax
	jmp	.L24647
.L11139:
	movq	48(%rbx), %rdi
	testq	%rdi, %rdi
	movq	%rdi, -6856(%rbp)
	jne	.L24255
	movzbl	18(%rbx), %eax
	movl	$1, %r14d
	testb	$16, %al
	jne	.L11086
	movq	32(%rbx), %rsi
	orb	$16, %al
	xorl	%edx, %edx
	movb	%al, 18(%rbx)
	movq	%r15, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11142
	andb	$-17, 18(%rbx)
	jmp	.L24475
.L11142:
	movq	save_expr_list.2(%rip), %rdx
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	tree_cons
	movq	%rax, save_expr_list.2(%rip)
	jmp	.L11161
.L11135:
	cmpq	$0, 32(%rbx)
	jne	.L24475
	movq	40(%rbx), %rax
	movq	%rax, -6856(%rbp)
	jmp	.L11115
.L11101:
	cmpb	$2, %dl
	je	.L27210
	testb	%dl, %dl
	sete	%bl
	movzbl	%bl, %r14d
	jmp	.L11086
.L27210:
	movq	32(%rbx), %rsi
	xorl	%r14d, %r14d
	testq	%rsi, %rsi
	jne	.L27211
.L11104:
	movq	(%rbx), %rsi
	movq	%r15, %rdi
	testq	%rsi, %rsi
	jne	.L25091
	jmp	.L11161
.L27211:
	xorl	%edx, %edx
	movq	%r15, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L11086
	jmp	.L11104
	.p2align 6,,7
.L27204:
	xorl	%edx, %edx
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	$0, save_expr_list.2(%rip)
	call	safe_from_p
	movq	save_expr_list.2(%rip), %rdx
	movl	%eax, %r14d
	testq	%rdx, %rdx
	je	.L11086
.L11094:
	movq	24(%rdx), %r9
	andb	$-17, 18(%r9)
	movq	(%rdx), %rdx
	testq	%rdx, %rdx
	jne	.L11094
	jmp	.L11086
.L27203:
	movq	-9560(%rbp), %r11
	movq	8(%r11), %r15
	cmpw	$61, (%r15)
	jne	.L11087
	cmpl	$52, 8(%r15)
	jbe	.L24475
	jmp	.L11087
	.p2align 6,,7
.L27202:
	movq	8(%rdx), %rax
	movq	global_rtl+72(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L11161
	cmpw	$75, (%rax)
	jne	.L11082
	cmpq	%rdx, 8(%rax)
	jne	.L11082
	jmp	.L11161
.L27201:
	movq	112(%rax), %rax
	testq	%rax, %rax
	je	.L11085
	cmpb	$25, 16(%rax)
	jne	.L11085
	jmp	.L11084
	.p2align 6,,7
.L11252:
	movq	-9552(%rbp), %r12
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movq	32(%r12), %rdi
	call	expand_expr
	testq	%r13, %r13
	movq	%rax, %rbx
	je	.L27212
.L11253:
	movl	-2516(%rbp), %edx
	movq	%r13, %rdi
	movq	%rbx, %rsi
	call	expand_fix
	jmp	.L7871
.L27212:
	movl	-2716(%rbp), %edi
	call	gen_reg_rtx
	movq	%rax, %r13
	jmp	.L11253
.L11251:
	movl	$.LC0, %edi
	movl	$7833, %esi
	jmp	.L25123
.L11254:
	movq	-9552(%rbp), %rbx
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movq	32(%rbx), %rdi
	call	expand_expr
	testq	%r13, %r13
	movq	%rax, %rbx
	je	.L27213
.L11255:
	cmpb	$0, 2(%rbx)
	je	.L27214
.L11256:
	movq	-9552(%rbp), %r9
	movq	%r13, %rdi
	movq	%rbx, %rsi
	movq	32(%r9), %r11
	movq	8(%r11), %r10
	movzbl	17(%r10), %edx
	shrb	$5, %dl
	andl	$1, %edx
	call	expand_float
	jmp	.L7871
.L27214:
	movq	-9552(%rbp), %rax
	movq	%rbx, %rsi
	movq	32(%rax), %rdi
	movq	8(%rdi), %r8
	movzbl	61(%r8), %ecx
	shrb	$1, %cl
	movzbl	%cl, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L11256
.L27213:
	movl	-2716(%rbp), %edi
	call	gen_reg_rtx
	movq	%rax, %r13
	jmp	.L11255
.L11257:
	movq	-9552(%rbp), %r14
	movq	-9560(%rbp), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movq	32(%r14), %rdi
	call	expand_expr
	movl	-2516(%rbp), %r15d
	movq	%rax, %rdx
	testl	%r15d, %r15d
	jne	.L11260
	movl	flag_trapv(%rip), %esi
	testl	%esi, %esi
	je	.L11260
	movslq	-2716(%rbp),%r12
	cmpl	$1, mode_class(,%r12,4)
	je	.L27215
.L11260:
	movq	optab_table+256(%rip), %rsi
.L11261:
	movl	-2716(%rbp), %edi
	movq	%r13, %rcx
	xorl	%r8d, %r8d
	call	expand_unop
	testq	%rax, %rax
	movq	%rax, %r13
	jne	.L7871
	movl	$.LC0, %edi
	movl	$7862, %esi
	jmp	.L25123
	.p2align 6,,7
.L27215:
	movq	optab_table+264(%rip), %rsi
	jmp	.L11261
	.p2align 6,,7
.L11345:
	testq	%rbx, %rbx
	movq	%rbx, %r13
	je	.L11347
	movq	-9552(%rbp), %r15
	movq	%rbx, -6880(%rbp)
	movq	40(%r15), %r14
	movq	$0, -6888(%rbp)
	movq	8(%r14), %rax
	testq	%rax, %rax
	je	.L11350
	movq	32(%rax), %rdx
	testq	%rdx, %rdx
	je	.L11350
	cmpb	$25, 16(%rdx)
	je	.L11350
	cmpb	$18, 16(%rax)
	je	.L27216
.L11351:
	cmpb	$51, 2(%rbx)
	je	.L11427
.L11350:
	movzwl	(%rbx), %eax
	cmpw	$66, %ax
	movl	%eax, %ecx
	je	.L27217
.L11348:
	cmpw	$63, %cx
	je	.L27218
.L11353:
	movl	$1, %eax
	testl	%eax, %eax
	jne	.L27219
	movzbl	16(%r14), %edx
	movzbl	%dl, %r8d 
	movsbl	tree_code_type(%r8),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L11361
	mov	%eax, %ecx
	jmp	*.L11421(,%rcx,8)
	.section	.rodata
	.align 8
	.align 4
.L11421:
	.quad	.L11404
	.quad	.L11377
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11377
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11427
	.quad	.L11362
	.quad	.L11380
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11380
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11361
	.quad	.L11367
	.text
.L11362:
	movq	144(%r14), %r10
	testq	%r10, %r10
	movq	%r10, -6888(%rbp)
	jne	.L24258
	movq	$0, -6888(%rbp)
.L11361:
	cmpq	$0, -6888(%rbp)
	movl	$1, %r15d
	je	.L11352
.L24258:
	movq	-6888(%rbp), %rcx
	cmpw	$63, (%rcx)
	je	.L27220
.L11424:
	movq	-6880(%rbp), %rdi
	movq	-6888(%rbp), %rsi
	xorl	%r15d, %r15d
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L11352
	movq	-6880(%rbp), %rax
	cmpw	$66, (%rax)
	je	.L27221
.L11427:
	movl	$1, %r15d
.L11352:
	testl	%r15d, %r15d
	je	.L11347
	movl	(%rbx), %eax
	andl	$134283263, %eax
	cmpl	$134217794, %eax
	je	.L11347
	movzbl	2(%rbx), %r14d
	cmpl	-2716(%rbp), %r14d
	je	.L27222
.L11347:
	movl	-2716(%rbp), %edi
	call	gen_reg_rtx
	movq	%rax, %r13
.L11346:
	movq	-9552(%rbp), %rbx
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movq	40(%rbx), %rdi
	call	expand_expr
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	-9552(%rbp), %r10
	movq	%r13, %rsi
	movq	%rax, %r14
	movq	32(%r10), %rdi
	call	expand_expr
	movq	-2712(%rbp), %rcx
	movq	%rax, %rbx
	testb	$32, 17(%rcx)
	je	.L11428
	cmpl	$78, %r12d
	je	.L27223
	movq	optab_table+232(%rip), %rsi
.L11429:
	movl	-2716(%rbp), %edi
	movl	-2516(%rbp), %r9d
	movq	%rbx, %rdx
	movq	%r14, %rcx
	movq	%r13, %r8
	movl	$2, (%rsp)
	call	expand_binop
	testq	%rax, %rax
	jne	.L23191
	cmpw	$66, (%r13)
	je	.L27224
.L11435:
	cmpq	%rbx, %r13
	je	.L11436
	movq	%r13, %rdi
	movq	%rbx, %rsi
	call	emit_move_insn
.L11436:
	call	gen_label_rtx
	movslq	-2716(%rbp),%rdi
	movq	%rax, %rbx
	cmpl	$1, mode_class(,%rdi,4)
	je	.L27225
.L11437:
	movq	-9552(%rbp), %rax
	xorl	%r9d, %r9d
	movl	-2716(%rbp), %r8d
	movq	%r13, %rdi
	movq	%r14, %rsi
	movq	40(%rax), %rdx
	movq	8(%rdx), %r15
	movzbl	17(%r15), %ecx
	movq	%rbx, 8(%rsp)
	movq	$0, (%rsp)
	shrb	$5, %cl
	andl	$1, %ecx
	cmpl	$79, %r12d
	setne	%r9b
	leal	104(%r9,%r9), %edx
	xorl	%r9d, %r9d
	call	do_compare_rtx_and_jump
.L11440:
	movq	%r13, %rdi
	movq	%r14, %rsi
.L25118:
	call	emit_move_insn
	movq	%rbx, %rdi
.L25057:
	call	emit_label
	jmp	.L7871
.L27225:
	movl	-2716(%rbp), %esi
	xorl	%edx, %edx
	movl	$104, %edi
	call	can_compare_p
	testl	%eax, %eax
	jne	.L11437
	cmpl	$79, %r12d
	je	.L27226
	movq	-2712(%rbp), %r11
	movl	-2716(%rbp), %edi
	movq	%r14, %rdx
	movq	%r13, %rcx
	movzbl	17(%r11), %esi
	shrb	$5, %sil
	andl	$1, %esi
.L24653:
	xorl	%r8d, %r8d
	movq	%rbx, %r9
	call	do_jump_by_parts_greater_rtx
	jmp	.L11440
.L27226:
	movq	-2712(%rbp), %r12
	movl	-2716(%rbp), %edi
	movq	%r13, %rdx
	movq	%r14, %rcx
	movzbl	17(%r12), %esi
	shrb	$5, %sil
	andl	$1, %esi
	jmp	.L24653
	.p2align 6,,7
.L27224:
	movl	-2716(%rbp), %edi
	call	gen_reg_rtx
	movq	%rax, %r13
	jmp	.L11435
.L27223:
	movq	optab_table+224(%rip), %rsi
	jmp	.L11429
.L11428:
	cmpl	$78, %r12d
	je	.L27227
	movq	optab_table+216(%rip), %rsi
	jmp	.L11429
.L27227:
	movq	optab_table+208(%rip), %rsi
	jmp	.L11429
.L27222:
	cmpw	$61, (%rbx)
	jne	.L11346
	cmpl	$52, 8(%rbx)
	ja	.L11346
	jmp	.L11347
.L27221:
	movq	-6888(%rbp), %rdx
	cmpw	$66, (%rdx)
	jne	.L11427
	movq	%rdx, %rdi
	xorl	%esi, %esi
	movl	$rtx_addr_varies_p, %ecx
	movq	%rax, %rdx
	call	true_dependence
	testl	%eax, %eax
	jne	.L11352
	jmp	.L11427
	.p2align 6,,7
.L27220:
	movq	8(%rcx), %rsi
	cmpw	$61, (%rsi)
	movq	%rsi, -6888(%rbp)
	jne	.L11424
	cmpl	$52, 8(%rsi)
	ja	.L11424
.L24478:
	xorl	%r15d, %r15d
	jmp	.L11352
.L11404:
	movq	-6880(%rbp), %rdi
	movq	32(%r14), %rsi
.L24652:
	xorl	%edx, %edx
	call	safe_from_p
	movl	%eax, %r15d
	jmp	.L11352
.L11377:
	movq	-6880(%rbp), %rdi
	movq	32(%r14), %rsi
	xorl	%edx, %edx
	xorl	%r15d, %r15d
	call	safe_from_p
	testl	%eax, %eax
	je	.L11352
	movq	-6880(%rbp), %rdi
	movq	40(%r14), %rsi
.L25094:
	xorl	%edx, %edx
	call	safe_from_p
	testl	%eax, %eax
	je	.L11352
	jmp	.L11427
.L11380:
	movzbl	%dl, %eax
	subl	$41, %eax
	cmpl	$80, %eax
	ja	.L11381
	mov	%eax, %r11d
	jmp	*.L11412(,%r11,8)
	.section	.rodata
	.align 8
	.align 4
.L11412:
	.quad	.L11391
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11409
	.quad	.L11397
	.quad	.L23173
	.quad	.L11403
	.quad	.L11404
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11381
	.quad	.L11405
	.quad	.L11381
	.quad	.L11401
	.quad	.L11382
	.text
.L11382:
	movq	32(%r14), %rdi
	call	staticp
	testl	%eax, %eax
	jne	.L11427
	testb	$4, 18(%r14)
	jne	.L11427
	movq	-6880(%rbp), %rdi
	movq	32(%r14), %rsi
	xorl	%edx, %edx
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11427
	movq	32(%r14), %r14
	movzbq	16(%r14), %r9
	cmpb	$100, tree_code_type(%r9)
	je	.L27228
.L11381:
	cmpq	$0, -6888(%rbp)
	jne	.L24258
	movzbl	16(%r14), %edi
	xorl	%r15d, %r15d
	call	first_rtl_op
	cmpl	%eax, %r15d
	movl	%eax, -3356(%rbp)
	jge	.L23402
.L11419:
	movslq	%r15d,%r8
	movq	32(%r14,%r8,8), %rsi
	testq	%rsi, %rsi
	jne	.L27229
.L11416:
	incl	%r15d
	cmpl	-3356(%rbp), %r15d
	jl	.L11419
.L23402:
	cmpb	$-110, 16(%r14)
	jbe	.L11361
	movq	-6880(%rbp), %rdi
	movq	%r14, %rsi
	xorl	%r15d, %r15d
	call	*lang_hooks+80(%rip)
	testl	%eax, %eax
	je	.L11352
	jmp	.L11361
.L27229:
	movq	-6880(%rbp), %rdi
	xorl	%edx, %edx
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11416
	jmp	.L24478
.L27228:
	movq	144(%r14), %rax
	testq	%rax, %rax
	je	.L24478
	cmpw	$66, (%rax)
	jne	.L24478
	movq	8(%rax), %rax
.L24651:
	movq	%rax, -6888(%rbp)
	jmp	.L11381
.L11391:
	movq	-6880(%rbp), %rax
	cmpw	$66, (%rax)
	jne	.L11381
	movq	%r14, %rdi
	call	get_alias_set
	xorl	%edi, %edi
	movq	-6880(%rbp), %r15
	movq	%rax, %rsi
	movq	16(%r15), %rax
	testq	%rax, %rax
	je	.L11396
	movq	(%rax), %rdi
.L11396:
	call	alias_sets_conflict_p
	xorl	%r15d, %r15d
	testl	%eax, %eax
	jne	.L11352
	jmp	.L11381
.L11409:
	movq	-6880(%rbp), %rdi
	movq	40(%r14), %rsi
	jmp	.L24652
.L11397:
	movq	-6880(%rbp), %rcx
	movzwl	(%rcx), %eax
	cmpw	$61, %ax
	je	.L27230
.L11400:
	cmpw	$66, %ax
	jne	.L11381
	jmp	.L24478
.L27230:
	cmpl	$52, 8(%rcx)
	jbe	.L24478
	jmp	.L11400
.L11403:
	movq	48(%r14), %rax
	jmp	.L24651
.L11405:
	movq	48(%r14), %rsi
	testq	%rsi, %rsi
	movq	%rsi, -6888(%rbp)
	jne	.L24258
	movzbl	18(%r14), %eax
	movl	$1, %r15d
	testb	$16, %al
	jne	.L11352
	orb	$16, %al
	movq	32(%r14), %rsi
	xorl	%edx, %edx
	movb	%al, 18(%r14)
	movq	-6880(%rbp), %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11408
	andb	$-17, 18(%r14)
	jmp	.L24478
.L11408:
	movq	save_expr_list.2(%rip), %rdx
	movq	%r14, %rdi
	xorl	%esi, %esi
	call	tree_cons
	movq	%rax, save_expr_list.2(%rip)
	jmp	.L11427
.L11401:
	cmpq	$0, 32(%r14)
	jne	.L24478
	movq	40(%r14), %rdx
	movq	%rdx, -6888(%rbp)
	jmp	.L11381
.L11367:
	cmpb	$2, %dl
	je	.L27231
	testb	%dl, %dl
	sete	%dil
	movzbl	%dil, %r15d
	jmp	.L11352
.L27231:
	movq	32(%r14), %rsi
	xorl	%r15d, %r15d
	testq	%rsi, %rsi
	jne	.L27232
.L11370:
	movq	(%r14), %rsi
	testq	%rsi, %rsi
	je	.L11427
	movq	-6880(%rbp), %rdi
	jmp	.L25094
.L27232:
	movq	-6880(%rbp), %rdi
	xorl	%edx, %edx
	call	safe_from_p
	testl	%eax, %eax
	je	.L11352
	jmp	.L11370
	.p2align 6,,7
.L27219:
	movq	-6880(%rbp), %rdi
	xorl	%edx, %edx
	movq	%r14, %rsi
	movq	$0, save_expr_list.2(%rip)
	call	safe_from_p
	movq	save_expr_list.2(%rip), %rdx
	movl	%eax, %r15d
	testq	%rdx, %rdx
	je	.L11352
.L11360:
	movq	24(%rdx), %r14
	andb	$-17, 18(%r14)
	movq	(%rdx), %rdx
	testq	%rdx, %rdx
	jne	.L11360
	jmp	.L11352
.L27218:
	movq	8(%rbx), %rdx
	cmpw	$61, (%rdx)
	movq	%rdx, -6880(%rbp)
	jne	.L11353
	cmpl	$52, 8(%rdx)
	jbe	.L24478
	jmp	.L11353
.L27217:
	movq	8(%rbx), %rax
	movq	global_rtl+72(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L11427
	cmpw	$75, (%rax)
	jne	.L11348
	cmpq	%rdx, 8(%rax)
	jne	.L11348
	jmp	.L11427
.L27216:
	movq	112(%rax), %rax
	testq	%rax, %rax
	je	.L11351
	cmpb	$25, 16(%rax)
	jne	.L11351
	jmp	.L11350
	.p2align 6,,7
.L11263:
	movq	-9552(%rbp), %rbx
	movq	-9560(%rbp), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movq	32(%rbx), %rdi
	call	expand_expr
	movslq	-2716(%rbp),%rdx
	movq	%rax, -6872(%rbp)
	movl	mode_class(,%rdx,4), %eax
	subl	$5, %eax
	cmpl	$1, %eax
	jbe	.L27233
	movq	-2712(%rbp), %r8
	testb	$32, 17(%r8)
	je	.L11265
	movq	-6872(%rbp), %r13
	jmp	.L7871
.L11265:
	movq	-9552(%rbp), %rcx
	xorl	%r15d, %r15d
	movq	%r13, %r14
	testq	%r13, %r13
	movq	32(%rcx), %rbx
	je	.L11343
	movq	8(%rbx), %rax
	testq	%rax, %rax
	je	.L11268
	movq	32(%rax), %rdx
	testq	%rdx, %rdx
	je	.L11268
	cmpb	$25, 16(%rdx)
	je	.L11268
	cmpb	$18, 16(%rax)
	je	.L27234
.L11269:
	cmpb	$51, 2(%r13)
	je	.L11343
.L11268:
	movzwl	(%r13), %eax
	cmpw	$66, %ax
	movl	%eax, %ecx
	je	.L27235
.L11266:
	cmpw	$63, %cx
	je	.L27236
.L11271:
	movl	$1, %eax
	testl	%eax, %eax
	jne	.L27237
	movzbl	16(%rbx), %edx
	movzbl	%dl, %r10d 
	movsbl	tree_code_type(%r10),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L11279
	mov	%eax, %r11d
	jmp	*.L11337(,%r11,8)
	.section	.rodata
	.align 8
	.align 4
.L11337:
	.quad	.L11320
	.quad	.L11295
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11295
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11343
	.quad	.L11280
	.quad	.L11298
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11298
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11279
	.quad	.L11285
	.text
.L11280:
	movq	144(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %r15
	jne	.L24257
	xorl	%r15d, %r15d
.L11279:
	testq	%r15, %r15
	movl	$1, %r12d
	je	.L11270
.L24257:
	cmpw	$63, (%r15)
	je	.L27238
.L11340:
	movq	%r14, %rdi
	movq	%r15, %rsi
	xorl	%r12d, %r12d
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L11270
	cmpw	$66, (%r14)
	je	.L27239
.L11343:
	movl	$1, %r12d
.L11270:
	movl	-2516(%rbp), %ecx
	movl	-2716(%rbp), %edi
	movq	%r13, %rdx
	movq	-6872(%rbp), %rsi
	movl	%r12d, %r8d
	call	expand_abs
	jmp	.L23191
.L27239:
	cmpw	$66, (%r15)
	jne	.L11343
	xorl	%esi, %esi
	movq	%r15, %rdi
	movq	%r14, %rdx
	movl	$rtx_addr_varies_p, %ecx
	call	true_dependence
	testl	%eax, %eax
	jne	.L11270
	jmp	.L11343
.L27238:
	movq	8(%r15), %r15
	cmpw	$61, (%r15)
	jne	.L11340
	cmpl	$52, 8(%r15)
	ja	.L11340
.L24477:
	xorl	%r12d, %r12d
	jmp	.L11270
.L11320:
	movq	32(%rbx), %rsi
	movq	%r14, %rdi
.L24650:
	xorl	%edx, %edx
	call	safe_from_p
	movl	%eax, %r12d
	jmp	.L11270
.L11295:
	movq	32(%rbx), %rsi
	xorl	%edx, %edx
	movq	%r14, %rdi
	xorl	%r12d, %r12d
	call	safe_from_p
	testl	%eax, %eax
	je	.L11270
	movq	%r14, %rdi
	movq	40(%rbx), %rsi
.L25093:
	xorl	%edx, %edx
	call	safe_from_p
	testl	%eax, %eax
	je	.L11270
	jmp	.L11343
.L11298:
	movzbl	%dl, %eax
	subl	$41, %eax
	cmpl	$80, %eax
	ja	.L11299
	mov	%eax, %esi
	jmp	*.L11328(,%rsi,8)
	.section	.rodata
	.align 8
	.align 4
.L11328:
	.quad	.L11309
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11325
	.quad	.L11313
	.quad	.L23173
	.quad	.L11319
	.quad	.L11320
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11299
	.quad	.L11321
	.quad	.L11299
	.quad	.L11317
	.quad	.L11300
	.text
.L11300:
	movq	32(%rbx), %rdi
	call	staticp
	testl	%eax, %eax
	jne	.L11343
	testb	$4, 18(%rbx)
	jne	.L11343
	movq	32(%rbx), %rsi
	xorl	%edx, %edx
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11343
	movq	32(%rbx), %rbx
	movzbq	16(%rbx), %r12
	cmpb	$100, tree_code_type(%r12)
	je	.L27240
.L11299:
	testq	%r15, %r15
	jne	.L24257
	movzbl	16(%rbx), %edi
	xorl	%r12d, %r12d
	call	first_rtl_op
	cmpl	%eax, %r12d
	movl	%eax, -3352(%rbp)
	jge	.L23398
.L11335:
	movslq	%r12d,%rdx
	movq	32(%rbx,%rdx,8), %rsi
	testq	%rsi, %rsi
	jne	.L27241
.L11332:
	incl	%r12d
	cmpl	-3352(%rbp), %r12d
	jl	.L11335
.L23398:
	cmpb	$-110, 16(%rbx)
	jbe	.L11279
	movq	%r14, %rdi
	movq	%rbx, %rsi
	xorl	%r12d, %r12d
	call	*lang_hooks+80(%rip)
	testl	%eax, %eax
	je	.L11270
	jmp	.L11279
.L27241:
	xorl	%edx, %edx
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11332
	jmp	.L24477
.L27240:
	movq	144(%rbx), %rax
	testq	%rax, %rax
	je	.L24477
	cmpw	$66, (%rax)
	jne	.L24477
	movq	8(%rax), %r15
	jmp	.L11299
.L11309:
	cmpw	$66, (%r14)
	jne	.L11299
	movq	%rbx, %rdi
	call	get_alias_set
	xorl	%edi, %edi
	movq	%rax, %rsi
	movq	16(%r14), %rax
	testq	%rax, %rax
	je	.L11312
	movq	(%rax), %rdi
.L11312:
	call	alias_sets_conflict_p
	xorl	%r12d, %r12d
	testl	%eax, %eax
	jne	.L11270
	jmp	.L11299
.L11325:
	movq	%r14, %rdi
	movq	40(%rbx), %rsi
	jmp	.L24650
.L11313:
	movzwl	(%r14), %eax
	cmpw	$61, %ax
	je	.L27242
.L11316:
	cmpw	$66, %ax
	jne	.L11299
	jmp	.L24477
.L27242:
	cmpl	$52, 8(%r14)
	jbe	.L24477
	jmp	.L11316
.L11319:
	movq	48(%rbx), %r15
	jmp	.L11299
.L11321:
	movq	48(%rbx), %r15
	testq	%r15, %r15
	jne	.L24257
	movzbl	18(%rbx), %eax
	movl	$1, %r12d
	testb	$16, %al
	jne	.L11270
	movq	32(%rbx), %rsi
	orb	$16, %al
	xorl	%edx, %edx
	movb	%al, 18(%rbx)
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11324
	andb	$-17, 18(%rbx)
	jmp	.L24477
.L11324:
	movq	save_expr_list.2(%rip), %rdx
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	tree_cons
	movq	%rax, save_expr_list.2(%rip)
	jmp	.L11343
.L11317:
	cmpq	$0, 32(%rbx)
	jne	.L24477
	movq	40(%rbx), %r15
	jmp	.L11299
.L11285:
	cmpb	$2, %dl
	je	.L27243
	testb	%dl, %dl
	sete	%r9b
	movzbl	%r9b, %r12d
	jmp	.L11270
.L27243:
	movq	32(%rbx), %rsi
	xorl	%r12d, %r12d
	testq	%rsi, %rsi
	jne	.L27244
.L11288:
	movq	(%rbx), %rsi
	movq	%r14, %rdi
	testq	%rsi, %rsi
	jne	.L25093
	jmp	.L11343
.L27244:
	xorl	%edx, %edx
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L11270
	jmp	.L11288
	.p2align 6,,7
.L27237:
	xorl	%edx, %edx
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	$0, save_expr_list.2(%rip)
	call	safe_from_p
	movq	save_expr_list.2(%rip), %rdx
	movl	%eax, %r12d
	testq	%rdx, %rdx
	je	.L11270
.L11278:
	movq	24(%rdx), %rdi
	andb	$-17, 18(%rdi)
	movq	(%rdx), %rdx
	testq	%rdx, %rdx
	jne	.L11278
	jmp	.L11270
	.p2align 6,,7
.L27236:
	movq	8(%r13), %r14
	cmpw	$61, (%r14)
	jne	.L11271
	cmpl	$52, 8(%r14)
	jbe	.L24477
	jmp	.L11271
	.p2align 6,,7
.L27235:
	movq	8(%r13), %rax
	movq	global_rtl+72(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L11343
	cmpw	$75, (%rax)
	jne	.L11266
	cmpq	%rdx, 8(%rax)
	jne	.L11266
	jmp	.L11343
.L27234:
	movq	112(%rax), %rax
	testq	%rax, %rax
	je	.L11269
	cmpb	$25, 16(%rax)
	jne	.L11269
	jmp	.L11268
	.p2align 6,,7
.L27233:
	movl	-2516(%rbp), %ecx
	movl	-2716(%rbp), %edi
	movq	%r13, %rdx
	movq	-6872(%rbp), %rsi
	call	expand_complex_abs
	jmp	.L23191
.L11445:
	movq	-9552(%rbp), %r8
	movq	-9560(%rbp), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movq	32(%r8), %rdi
	call	expand_expr
	movl	$1, %r8d
	movq	%r13, %rcx
	movl	-2716(%rbp), %edi
	movq	optab_table+296(%rip), %rsi
	movq	%rax, %rdx
	call	expand_unop
	testq	%rax, %rax
	movq	%rax, %r13
	jne	.L7871
	movl	$.LC0, %edi
	movl	$7950, %esi
	jmp	.L25123
	.p2align 6,,7
.L11456:
	movq	-9560(%rbp), %r15
	movq	-9552(%rbp), %rax
	testq	%r15, %r15
	movq	40(%rax), %rbx
	movq	$0, -6896(%rbp)
	je	.L11537
	movq	8(%rbx), %rax
	testq	%rax, %rax
	je	.L11460
	movq	32(%rax), %rdx
	testq	%rdx, %rdx
	je	.L11460
	cmpb	$25, 16(%rdx)
	je	.L11460
	cmpb	$18, 16(%rax)
	je	.L27245
.L11461:
	movq	-9560(%rbp), %rdx
	cmpb	$51, 2(%rdx)
	je	.L11537
.L11460:
	movq	-9560(%rbp), %rsi
	movzwl	(%rsi), %eax
	cmpw	$66, %ax
	movl	%eax, %ecx
	je	.L27246
.L11458:
	cmpw	$63, %cx
	je	.L27247
.L11463:
	movl	$1, %eax
	testl	%eax, %eax
	jne	.L27248
	movzbl	16(%rbx), %edx
	movzbl	%dl, %r8d 
	movsbl	tree_code_type(%r8),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L11471
	mov	%eax, %r14d
	jmp	*.L11531(,%r14,8)
	.section	.rodata
	.align 8
	.align 4
.L11531:
	.quad	.L11514
	.quad	.L11487
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11487
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11537
	.quad	.L11472
	.quad	.L11490
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11490
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11471
	.quad	.L11477
	.text
.L11472:
	movq	144(%rbx), %rcx
	testq	%rcx, %rcx
	movq	%rcx, -6896(%rbp)
	jne	.L24259
	movq	$0, -6896(%rbp)
.L11471:
	cmpq	$0, -6896(%rbp)
	movl	$1, %r14d
	je	.L11462
.L24259:
	movq	-6896(%rbp), %rax
	cmpw	$63, (%rax)
	je	.L27249
.L11534:
	movq	-6896(%rbp), %rsi
	movq	%r15, %rdi
	xorl	%r14d, %r14d
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L11462
	cmpw	$66, (%r15)
	je	.L27250
.L11537:
	movl	$1, %r14d
.L11462:
	movq	-9552(%rbp), %r15
	testl	%r14d, %r14d
	movl	$0, %ebx
	cmovne	-9560(%rbp), %rbx
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	32(%r15), %rdi
	movq	%rbx, %rsi
	call	expand_expr
	movl	-2516(%rbp), %r9d
	movq	%r13, %r8
	movl	%r12d, %edi
	movl	-2716(%rbp), %esi
	movq	%rax, %rdx
	movq	40(%r15), %rcx
	jmp	.L25076
.L27250:
	movq	-6896(%rbp), %rcx
	cmpw	$66, (%rcx)
	jne	.L11537
	movq	%rcx, %rdi
	xorl	%esi, %esi
	movq	%r15, %rdx
	movl	$rtx_addr_varies_p, %ecx
	call	true_dependence
	testl	%eax, %eax
	jne	.L11462
	jmp	.L11537
	.p2align 6,,7
.L27249:
	movq	8(%rax), %rdx
	cmpw	$61, (%rdx)
	movq	%rdx, -6896(%rbp)
	jne	.L11534
	cmpl	$52, 8(%rdx)
	ja	.L11534
.L24479:
	xorl	%r14d, %r14d
	jmp	.L11462
.L11514:
	movq	32(%rbx), %rsi
	movq	%r15, %rdi
.L24654:
	xorl	%edx, %edx
	call	safe_from_p
	movl	%eax, %r14d
	jmp	.L11462
.L11487:
	movq	32(%rbx), %rsi
	xorl	%edx, %edx
	movq	%r15, %rdi
	xorl	%r14d, %r14d
	call	safe_from_p
	testl	%eax, %eax
	je	.L11462
	movq	%r15, %rdi
	movq	40(%rbx), %rsi
.L25095:
	xorl	%edx, %edx
	call	safe_from_p
	testl	%eax, %eax
	je	.L11462
	jmp	.L11537
.L11490:
	movzbl	%dl, %eax
	subl	$41, %eax
	cmpl	$80, %eax
	ja	.L11491
	mov	%eax, %edi
	jmp	*.L11522(,%rdi,8)
	.section	.rodata
	.align 8
	.align 4
.L11522:
	.quad	.L11501
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11519
	.quad	.L11507
	.quad	.L23173
	.quad	.L11513
	.quad	.L11514
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11491
	.quad	.L11515
	.quad	.L11491
	.quad	.L11511
	.quad	.L11492
	.text
.L11492:
	movq	32(%rbx), %rdi
	call	staticp
	testl	%eax, %eax
	jne	.L11537
	testb	$4, 18(%rbx)
	jne	.L11537
	movq	32(%rbx), %rsi
	xorl	%edx, %edx
	movq	%r15, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11537
	movq	32(%rbx), %rbx
	movzbq	16(%rbx), %r11
	cmpb	$100, tree_code_type(%r11)
	je	.L27251
.L11491:
	cmpq	$0, -6896(%rbp)
	jne	.L24259
	movzbl	16(%rbx), %edi
	xorl	%r14d, %r14d
	call	first_rtl_op
	cmpl	%eax, %r14d
	movl	%eax, -3360(%rbp)
	jge	.L23406
.L11529:
	movslq	%r14d,%rcx
	movq	32(%rbx,%rcx,8), %rsi
	testq	%rsi, %rsi
	jne	.L27252
.L11526:
	incl	%r14d
	cmpl	-3360(%rbp), %r14d
	jl	.L11529
.L23406:
	cmpb	$-110, 16(%rbx)
	jbe	.L11471
	movq	%r15, %rdi
	movq	%rbx, %rsi
	xorl	%r14d, %r14d
	call	*lang_hooks+80(%rip)
	testl	%eax, %eax
	je	.L11462
	jmp	.L11471
.L27252:
	xorl	%edx, %edx
	movq	%r15, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11526
	jmp	.L24479
.L27251:
	movq	144(%rbx), %rax
	testq	%rax, %rax
	je	.L24479
	cmpw	$66, (%rax)
	jne	.L24479
	movq	8(%rax), %r9
	movq	%r9, -6896(%rbp)
	jmp	.L11491
.L11501:
	cmpw	$66, (%r15)
	jne	.L11491
	movq	%rbx, %rdi
	call	get_alias_set
	xorl	%edi, %edi
	movq	%rax, %rsi
	movq	16(%r15), %rax
	testq	%rax, %rax
	je	.L11506
	movq	(%rax), %rdi
.L11506:
	call	alias_sets_conflict_p
	xorl	%r14d, %r14d
	testl	%eax, %eax
	jne	.L11462
	jmp	.L11491
.L11519:
	movq	%r15, %rdi
	movq	40(%rbx), %rsi
	jmp	.L24654
.L11507:
	movzwl	(%r15), %eax
	cmpw	$61, %ax
	je	.L27253
.L11510:
	cmpw	$66, %ax
	jne	.L11491
	jmp	.L24479
.L27253:
	cmpl	$52, 8(%r15)
	jbe	.L24479
	jmp	.L11510
.L11513:
	movq	48(%rbx), %rdx
	movq	%rdx, -6896(%rbp)
	jmp	.L11491
.L11515:
	movq	48(%rbx), %r8
	testq	%r8, %r8
	movq	%r8, -6896(%rbp)
	jne	.L24259
	movzbl	18(%rbx), %eax
	movl	$1, %r14d
	testb	$16, %al
	jne	.L11462
	movq	32(%rbx), %rsi
	orb	$16, %al
	xorl	%edx, %edx
	movb	%al, 18(%rbx)
	movq	%r15, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11518
	andb	$-17, 18(%rbx)
	jmp	.L24479
.L11518:
	movq	save_expr_list.2(%rip), %rdx
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	tree_cons
	movq	%rax, save_expr_list.2(%rip)
	jmp	.L11537
.L11511:
	cmpq	$0, 32(%rbx)
	jne	.L24479
	movq	40(%rbx), %rax
	movq	%rax, -6896(%rbp)
	jmp	.L11491
.L11477:
	cmpb	$2, %dl
	je	.L27254
	testb	%dl, %dl
	sete	%r10b
	movzbl	%r10b, %r14d
	jmp	.L11462
.L27254:
	movq	32(%rbx), %rsi
	xorl	%r14d, %r14d
	testq	%rsi, %rsi
	jne	.L27255
.L11480:
	movq	(%rbx), %rsi
	movq	%r15, %rdi
	testq	%rsi, %rsi
	jne	.L25095
	jmp	.L11537
.L27255:
	xorl	%edx, %edx
	movq	%r15, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L11462
	jmp	.L11480
	.p2align 6,,7
.L27248:
	xorl	%edx, %edx
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	$0, save_expr_list.2(%rip)
	call	safe_from_p
	movq	save_expr_list.2(%rip), %rdx
	movl	%eax, %r14d
	testq	%rdx, %rdx
	je	.L11462
.L11470:
	movq	24(%rdx), %r15
	andb	$-17, 18(%r15)
	movq	(%rdx), %rdx
	testq	%rdx, %rdx
	jne	.L11470
	jmp	.L11462
.L27247:
	movq	-9560(%rbp), %rsi
	movq	8(%rsi), %r15
	cmpw	$61, (%r15)
	jne	.L11463
	cmpl	$52, 8(%r15)
	jbe	.L24479
	jmp	.L11463
	.p2align 6,,7
.L27246:
	movq	8(%rsi), %rax
	movq	global_rtl+72(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L11537
	cmpw	$75, (%rax)
	jne	.L11458
	cmpq	%rdx, 8(%rax)
	jne	.L11458
	jmp	.L11537
.L27245:
	movq	112(%rax), %rax
	testq	%rax, %rax
	je	.L11461
	cmpb	$25, 16(%rax)
	jne	.L11461
	jmp	.L11460
	.p2align 6,,7
.L11443:
	movq	-9552(%rbp), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movq	32(%rsi), %rdi
	movq	-9560(%rbp), %rsi
	call	expand_expr
	movl	$1, %r8d
	movq	%r13, %rcx
	movl	-2716(%rbp), %edi
	movq	optab_table+288(%rip), %rsi
	movq	%rax, %rdx
	call	expand_unop
	testq	%rax, %rax
	movq	%rax, %r13
	jne	.L7871
	movl	$.LC0, %edi
	movl	$7943, %esi
	jmp	.L25123
	.p2align 6,,7
.L11562:
	movl	-6220(%rbp), %r11d
	testl	%r11d, %r11d
	jne	.L11563
	testq	%r13, %r13
	je	.L11564
	movq	-9552(%rbp), %rdi
	xorl	%r14d, %r14d
	movq	%r13, %r12
	movq	%rdi, -6904(%rbp)
	movq	8(%rdi), %rax
	testq	%rax, %rax
	je	.L11567
	movq	32(%rax), %rdx
	testq	%rdx, %rdx
	je	.L11567
	cmpb	$25, 16(%rdx)
	je	.L11567
	cmpb	$18, 16(%rax)
	je	.L27256
.L11568:
	cmpb	$51, 2(%r13)
	je	.L11644
.L11567:
	movzwl	(%r13), %eax
	cmpw	$66, %ax
	movl	%eax, %ecx
	je	.L27257
.L11565:
	cmpw	$63, %cx
	je	.L27258
.L11570:
	movl	$1, %eax
	testl	%eax, %eax
	jne	.L27259
	movq	-9552(%rbp), %rax
	movzbl	16(%rax), %edx
	movzbl	%dl, %r8d 
	movsbl	tree_code_type(%r8),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L11578
	mov	%eax, %ecx
	jmp	*.L11638(,%rcx,8)
	.section	.rodata
	.align 8
	.align 4
.L11638:
	.quad	.L11592
	.quad	.L11594
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11594
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11644
	.quad	.L11579
	.quad	.L11597
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11597
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11578
	.quad	.L11584
	.text
.L11579:
	movq	-9552(%rbp), %rsi
	movq	144(%rsi), %rdx
	testq	%rdx, %rdx
	movq	%rdx, %r14
	jne	.L24260
	xorl	%r14d, %r14d
.L11578:
	testq	%r14, %r14
	movl	$1, %ebx
	je	.L11569
.L24260:
	cmpw	$63, (%r14)
	je	.L27260
.L11641:
	movq	%r12, %rdi
	movq	%r14, %rsi
	xorl	%ebx, %ebx
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L11569
	cmpw	$66, (%r12)
	je	.L27261
.L11644:
	movl	$1, %ebx
.L11569:
	testl	%ebx, %ebx
	je	.L11564
	movl	optimize(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L11563
	cmpw	$61, (%r13)
	je	.L27262
.L11563:
	testq	%r13, %r13
	jne	.L27263
.L11647:
	call	gen_label_rtx
	movq	-9552(%rbp), %rdi
	movq	%rax, %rsi
	movq	%rax, %rbx
	call	jumpifnot
	testq	%r13, %r13
	jne	.L27264
.L11648:
	movq	%rbx, %rdi
	call	emit_label
	movl	-6220(%rbp), %r15d
	testl	%r15d, %r15d
	je	.L7871
	jmp	.L25052
.L27264:
	movq	%r13, %rdi
	call	emit_0_to_1_insn
	jmp	.L11648
.L27263:
	movq	%r13, %rdi
	call	emit_clr_insn
	jmp	.L11647
.L27262:
	cmpl	$52, 8(%r13)
	ja	.L11563
.L11564:
	testl	%r15d, %r15d
	cmove	-2716(%rbp), %r15d
	movl	%r15d, %edi
	movl	%r15d, -2716(%rbp)
	call	gen_reg_rtx
	movq	%rax, %r13
	jmp	.L11563
.L27261:
	cmpw	$66, (%r14)
	jne	.L11644
	xorl	%esi, %esi
	movq	%r14, %rdi
	movq	%r12, %rdx
	movl	$rtx_addr_varies_p, %ecx
	call	true_dependence
	testl	%eax, %eax
	jne	.L11569
	jmp	.L11644
	.p2align 6,,7
.L27260:
	movq	8(%r14), %r14
	cmpw	$61, (%r14)
	jne	.L11641
	cmpl	$52, 8(%r14)
	ja	.L11641
.L24480:
	xorl	%ebx, %ebx
	jmp	.L11569
.L11592:
	movq	-9552(%rbp), %rbx
	movq	%r12, %rdi
	movq	32(%rbx), %rsi
.L24655:
	xorl	%edx, %edx
	call	safe_from_p
	movl	%eax, %ebx
	jmp	.L11569
.L11594:
	movq	-9552(%rbp), %r11
	xorl	%edx, %edx
	movq	%r12, %rdi
	xorl	%ebx, %ebx
	movq	32(%r11), %rsi
	call	safe_from_p
	testl	%eax, %eax
	je	.L11569
	movq	%r12, %rdi
	movq	-9552(%rbp), %r12
	movq	40(%r12), %rsi
.L25096:
	xorl	%edx, %edx
	call	safe_from_p
	testl	%eax, %eax
	je	.L11569
	jmp	.L11644
.L11597:
	movzbl	%dl, %eax
	subl	$41, %eax
	cmpl	$80, %eax
	ja	.L11598
	mov	%eax, %edi
	jmp	*.L11629(,%rdi,8)
	.section	.rodata
	.align 8
	.align 4
.L11629:
	.quad	.L11608
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11626
	.quad	.L11614
	.quad	.L23173
	.quad	.L11620
	.quad	.L11621
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11598
	.quad	.L11622
	.quad	.L11598
	.quad	.L11618
	.quad	.L11599
	.text
.L11599:
	movq	-9552(%rbp), %r9
	movq	32(%r9), %rdi
	call	staticp
	testl	%eax, %eax
	jne	.L11644
	movq	-9552(%rbp), %rbx
	testb	$4, 18(%rbx)
	jne	.L11644
	movq	32(%rbx), %rsi
	xorl	%edx, %edx
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11644
	movq	-9552(%rbp), %rax
	movq	32(%rax), %rsi
	movq	%rsi, -6904(%rbp)
	movzbq	16(%rsi), %r8
	cmpb	$100, tree_code_type(%r8)
	je	.L27265
.L11598:
	testq	%r14, %r14
	jne	.L24260
	movq	-6904(%rbp), %r9
	xorl	%ebx, %ebx
	movzbl	16(%r9), %edi
	call	first_rtl_op
	cmpl	%eax, %ebx
	movl	%eax, -3364(%rbp)
	jge	.L23410
.L11636:
	movq	-6904(%rbp), %rdi
	movslq	%ebx,%r8
	movq	32(%rdi,%r8,8), %rsi
	testq	%rsi, %rsi
	jne	.L27266
.L11633:
	incl	%ebx
	cmpl	-3364(%rbp), %ebx
	jl	.L11636
.L23410:
	movq	-6904(%rbp), %rcx
	cmpb	$-110, 16(%rcx)
	jbe	.L11578
	movq	%r12, %rdi
	movq	%rcx, %rsi
	xorl	%ebx, %ebx
	call	*lang_hooks+80(%rip)
	testl	%eax, %eax
	je	.L11569
	jmp	.L11578
.L27266:
	xorl	%edx, %edx
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11633
	jmp	.L24480
.L27265:
	movq	144(%rsi), %rax
	testq	%rax, %rax
	je	.L24480
	cmpw	$66, (%rax)
	jne	.L24480
	movq	8(%rax), %r14
	jmp	.L11598
.L11608:
	cmpw	$66, (%r12)
	jne	.L11598
	movq	-9552(%rbp), %rdi
	call	get_alias_set
	xorl	%edi, %edi
	movq	%rax, %rsi
	movq	16(%r12), %rax
	testq	%rax, %rax
	je	.L11613
	movq	(%rax), %rdi
.L11613:
	call	alias_sets_conflict_p
	xorl	%ebx, %ebx
	testl	%eax, %eax
	jne	.L11569
	jmp	.L11598
.L11626:
	movq	-9552(%rbp), %r11
	movq	%r12, %rdi
	movq	40(%r11), %rsi
	jmp	.L24655
.L11614:
	movzwl	(%r12), %eax
	cmpw	$61, %ax
	je	.L27267
.L11617:
	cmpw	$66, %ax
	jne	.L11598
	jmp	.L24480
.L27267:
	cmpl	$52, 8(%r12)
	jbe	.L24480
	jmp	.L11617
.L11620:
	movq	-9552(%rbp), %rdx
	movq	48(%rdx), %r14
	jmp	.L11598
.L11621:
	movq	-9552(%rbp), %r14
	movq	%r12, %rdi
	movq	32(%r14), %rsi
	jmp	.L24655
.L11622:
	movq	-9552(%rbp), %rsi
	movq	48(%rsi), %r14
	testq	%r14, %r14
	jne	.L24260
	movzbl	18(%rsi), %eax
	movl	$1, %ebx
	testb	$16, %al
	jne	.L11569
	movq	-9552(%rbp), %r10
	orb	$16, %al
	xorl	%edx, %edx
	movq	%r12, %rdi
	movq	32(%r10), %rsi
	movb	%al, 18(%r10)
	call	safe_from_p
	testl	%eax, %eax
	jne	.L11625
	movq	-9552(%rbp), %rbx
	andb	$-17, 18(%rbx)
	jmp	.L24480
.L11625:
	movq	-9552(%rbp), %rdi
	movq	save_expr_list.2(%rip), %rdx
	xorl	%esi, %esi
	call	tree_cons
	movq	%rax, save_expr_list.2(%rip)
	jmp	.L11644
.L11618:
	movq	-9552(%rbp), %rcx
	cmpq	$0, 32(%rcx)
	jne	.L24480
	movq	-9552(%rbp), %rsi
	movq	40(%rsi), %r14
	jmp	.L11598
.L11584:
	cmpb	$2, %dl
	je	.L27268
	xorl	%ebx, %ebx
	testb	%dl, %dl
	sete	%bl
	jmp	.L11569
.L27268:
	movq	-9552(%rbp), %r14
	xorl	%ebx, %ebx
	movq	32(%r14), %rsi
	testq	%rsi, %rsi
	jne	.L27269
.L11587:
	movq	-9552(%rbp), %r10
	movq	%r12, %rdi
	movq	(%r10), %rsi
	testq	%rsi, %rsi
	jne	.L25096
	jmp	.L11644
.L27269:
	xorl	%edx, %edx
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L11569
	jmp	.L11587
	.p2align 6,,7
.L27259:
	movq	-9552(%rbp), %rsi
	xorl	%edx, %edx
	movq	%r12, %rdi
	movq	$0, save_expr_list.2(%rip)
	call	safe_from_p
	movq	save_expr_list.2(%rip), %rdx
	movl	%eax, %ebx
	testq	%rdx, %rdx
	je	.L11569
.L11577:
	movq	24(%rdx), %r9
	andb	$-17, 18(%r9)
	movq	(%rdx), %rdx
	testq	%rdx, %rdx
	jne	.L11577
	jmp	.L11569
.L27258:
	movq	8(%r13), %r12
	cmpw	$61, (%r12)
	jne	.L11570
	cmpl	$52, 8(%r12)
	jbe	.L24480
	jmp	.L11570
	.p2align 6,,7
.L27257:
	movq	8(%r13), %rax
	movq	global_rtl+72(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L11644
	cmpw	$75, (%rax)
	jne	.L11565
	cmpq	%rdx, 8(%rax)
	jne	.L11565
	jmp	.L11644
.L27256:
	movq	112(%rax), %rax
	testq	%rax, %rax
	je	.L11568
	cmpb	$25, 16(%rax)
	jne	.L11568
	jmp	.L11567
	.p2align 6,,7
.L11448:
	movq	optab_table+144(%rip), %r10
	movq	-9552(%rbp), %rcx
	movq	%r10, -9568(%rbp)
	movq	40(%rcx), %r14
	movq	%r14, -9576(%rbp)
	jmp	.L10849
.L11450:
	movq	optab_table+152(%rip), %rbx
	movq	-9552(%rbp), %r12
	movq	%rbx, -9568(%rbp)
	movq	40(%r12), %rdi
	movq	%rdi, -9576(%rbp)
	jmp	.L10849
.L11452:
	movq	optab_table+160(%rip), %rsi
	jmp	.L25048
.L11651:
	movq	-9552(%rbp), %rax
	movq	%r13, %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movq	32(%rax), %rdi
	call	expand_expr
	movl	$1, %r9d
	movq	%r13, %r8
	movl	-2716(%rbp), %edi
	movq	optab_table+160(%rip), %rsi
	movq	%rax, %rdx
	movq	const_int_rtx+520(%rip), %rcx
	movl	$3, (%rsp)
	call	expand_binop
	testq	%rax, %rax
	movq	%rax, %r13
	jne	.L7871
	movl	$.LC0, %edi
	movl	$8081, %esi
	jmp	.L25123
	.p2align 6,,7
.L11550:
	movl	-2716(%rbp), %edx
	movq	-9552(%rbp), %rdi
	testl	%r15d, %r15d
	movq	%r13, %rsi
	cmovne	%r15d, %edx
	xorl	%ecx, %ecx
	call	do_store_flag
	testq	%rax, %rax
	jne	.L23191
	cmpl	$102, %r12d
	jne	.L11562
	movq	-9552(%rbp), %r12
	movq	40(%r12), %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L11562
	testq	%rbx, %rbx
	je	.L11562
	cmpw	$61, (%rbx)
	jne	.L11562
	movq	-9552(%rbp), %r10
	movq	32(%r10), %rdi
	movq	8(%rdi), %r14
	movzbl	61(%r14), %esi
	shrb	$1, %sil
	cmpb	2(%rbx), %sil
	jne	.L11562
	movq	%rbx, %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	cmpw	$54, (%rax)
	movq	%rax, %rsi
	je	.L27270
	cmpq	%rbx, %rax
	je	.L24250
	movzbl	2(%rax), %edi
	testl	%edi, %edi
	jne	.L11559
	movl	-2716(%rbp), %edi
	testl	%r15d, %r15d
	cmovne	%r15d, %edi
.L11559:
	call	copy_to_mode_reg
	movq	%rax, %r13
.L11558:
	call	gen_label_rtx
	movl	-2516(%rbp), %r9d
	xorl	%ecx, %ecx
	movzbl	2(%r13), %r8d
	movq	const_int_rtx+512(%rip), %rsi
	movq	%r13, %rdi
	movl	$103, %edx
	movq	%rax, %rbx
	movq	%rax, (%rsp)
	call	emit_cmp_and_jump_insns
	movq	%r13, %rdi
	movq	const_int_rtx+520(%rip), %rsi
	jmp	.L25118
.L24250:
	movq	%rbx, %r13
	jmp	.L11558
.L27270:
	cmpq	$0, 8(%rax)
	je	.L11556
	movq	const_int_rtx+520(%rip), %rsi
	movq	%r13, %rdi
	jmp	.L25058
.L11556:
	movq	%r13, %rdi
	movq	const_int_rtx+512(%rip), %rsi
	jmp	.L25058
	.p2align 6,,7
.L9598:
	movq	-9552(%rbp), %rax
	xorl	%esi, %esi
	movq	40(%rax), %rdi
	movq	32(%rax), %rbx
	movq	%rdi, -3016(%rbp)
	movq	8(%rdi), %rdx
	movzbl	17(%rdx), %r14d
	xorl	%edx, %edx
	shrb	$5, %r14b
	movl	%r14d, %r9d
	andl	$1, %r9d
	movl	%r9d, -3020(%rbp)
	movq	8(%rbx), %r12
	movq	24(%r12), %rcx
	movq	104(%rcx), %r12
	movq	112(%rcx), %r14
	xorl	%ecx, %ecx
	call	expand_expr
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, -3032(%rbp)
	movq	%r12, %rdi
	call	expand_expr
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%r14, %rdi
	movq	%rax, -3040(%rbp)
	call	expand_expr
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rbx, %rdi
	xorl	%esi, %esi
	movq	%rax, -3048(%rbp)
	call	expand_expr
	movq	-3016(%rbp), %r11
	movq	8(%rax), %rsi
	movq	%rsi, -3056(%rbp)
	movq	8(%r11), %r10
	movzbl	61(%r10), %edi
	shrb	$1, %dil
	movzbl	%dil, %ebx
	movl	%ebx, -3060(%rbp)
	cmpb	$25, 16(%r14)
	je	.L27271
.L9601:
	movq	-3016(%rbp), %rsi
	cmpb	$25, 16(%rsi)
	je	.L27272
.L9602:
	cmpb	$25, 16(%r14)
	je	.L27273
.L9599:
	testq	%r13, %r13
	je	.L27274
.L9603:
	call	gen_label_rtx
	movq	%rax, %r15
	call	gen_label_rtx
	movq	-3032(%rbp), %rbx
	movq	%rax, %r14
	movzwl	(%rbx), %eax
	cmpw	$54, %ax
	je	.L27275
.L9607:
	movq	-3032(%rbp), %r12
	movq	-3040(%rbp), %rsi
	movl	$107, %edx
	movl	-3020(%rbp), %r9d
	xorl	%ecx, %ecx
	movzbl	2(%r12), %r8d
	movq	%r12, %rdi
	movq	%r14, (%rsp)
	call	emit_cmp_and_jump_insns
	movzwl	(%r12), %eax
.L9606:
	cmpw	$54, %ax
	je	.L27276
.L9609:
	movq	-3032(%rbp), %rsi
	movl	-3020(%rbp), %r9d
	movl	$105, %edx
	xorl	%ecx, %ecx
	movzbl	2(%rsi), %r8d
	movq	%rsi, %rdi
	movq	%r14, (%rsp)
	movq	-3048(%rbp), %rsi
	call	emit_cmp_and_jump_insns
.L9608:
	movq	-3040(%rbp), %rdx
	cmpw	$54, (%rdx)
	je	.L27277
	xorl	%edi, %edi
	movq	$-257, %rsi
	call	gen_rtx_CONST_INT
	movl	-3020(%rbp), %r9d
	xorl	%r8d, %r8d
	movl	-3060(%rbp), %edi
	movq	optab_table+144(%rip), %rsi
	movq	%rax, %rcx
	movq	-3040(%rbp), %rdx
	movl	$3, (%rsp)
	call	expand_binop
.L9611:
	movq	-3032(%rbp), %rdx
	movl	-3020(%rbp), %r9d
	xorl	%r8d, %r8d
	movl	-3060(%rbp), %edi
	movq	optab_table+16(%rip), %rsi
	movq	%rax, %rcx
	movl	$3, (%rsp)
	call	expand_binop
	movl	$8, %esi
	xorl	%edi, %edi
	movq	%rax, %rbx
	call	gen_rtx_CONST_INT
	xorl	%r9d, %r9d
	movl	-3020(%rbp), %edx
	movq	%rbx, %rcx
	xorl	%edi, %edi
	movq	%rax, %r8
	movl	$62, %esi
	movl	%edx, (%rsp)
	movl	-3060(%rbp), %edx
	call	expand_divmod
	movl	$8, %esi
	xorl	%edi, %edi
	call	gen_rtx_CONST_INT
	movq	-3032(%rbp), %rcx
	movl	-3060(%rbp), %edx
	movl	-3020(%rbp), %r9d
	movl	$1, %edi
	movl	$66, %esi
	movq	%rax, %r8
	movl	%r9d, (%rsp)
	xorl	%r9d, %r9d
	call	expand_divmod
	movl	-3020(%rbp), %r9d
	xorl	%r8d, %r8d
	movq	-3056(%rbp), %rcx
	movl	-3060(%rbp), %edi
	movq	%rbx, %rdx
	movq	optab_table(%rip), %rsi
	movq	%rax, %r12
	movl	$3, (%rsp)
	call	expand_binop
	movl	byte_mode(%rip), %edi
	movq	%rax, %rsi
	call	memory_address
	movl	byte_mode(%rip), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	movq	%r12, %rsi
	movq	-3016(%rbp), %r8
	movq	%rax, %rbx
	movq	8(%r8), %rdi
	call	make_tree
	movl	$1, %r9d
	xorl	%r8d, %r8d
	movl	byte_mode(%rip), %esi
	movq	%rax, %rcx
	movl	$83, %edi
	movq	%rbx, %rdx
	call	expand_shift
	movl	$1, %r9d
	movq	optab_table+144(%rip), %rsi
	movzbl	2(%r13), %ecx
	movl	byte_mode(%rip), %edi
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movl	$3, (%rsp)
	cmpl	%edi, %ecx
	movq	const_int_rtx+520(%rip), %rcx
	cmove	%r13, %r8
	call	expand_binop
	cmpq	%r13, %rax
	movq	%rax, %rsi
	je	.L9614
	movq	%r13, %rdi
	movl	$1, %edx
	call	convert_move
.L9614:
	movq	%r15, %rdi
	call	emit_jump
	movq	%r14, %rdi
	call	emit_label
	movq	const_int_rtx+512(%rip), %rsi
	movq	%r13, %rdi
	call	emit_move_insn
	movq	%r15, %rdi
	jmp	.L25057
.L27277:
	movq	8(%rdx), %rsi
	xorl	%edi, %edi
	andq	$-257, %rsi
	call	gen_rtx_CONST_INT
	jmp	.L9611
.L27276:
	movq	-3048(%rbp), %r11
	cmpw	$54, (%r11)
	jne	.L9609
	jmp	.L9608
.L27275:
	movq	-3040(%rbp), %r10
	cmpw	$54, (%r10)
	jne	.L9607
	jmp	.L9606
.L27274:
	testl	%r15d, %r15d
	cmove	-2716(%rbp), %r15d
	movl	%r15d, %edi
	movl	%r15d, -2716(%rbp)
	call	gen_reg_rtx
	movq	%rax, %r13
	jmp	.L9603
.L27273:
	movq	-3016(%rbp), %rax
	cmpb	$25, 16(%rax)
	jne	.L9599
	movq	%r14, %rdi
	movq	%rax, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L25052
	jmp	.L9599
.L27272:
	cmpb	$25, 16(%r12)
	jne	.L9602
	movq	%rsi, %rdi
	movq	%r12, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L25052
	jmp	.L9602
.L27271:
	cmpb	$25, 16(%r12)
	jne	.L9601
	movq	%r14, %rdi
	movq	%r12, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L25052
	jmp	.L9601
	.p2align 6,,7
.L10557:
	movq	-9552(%rbp), %rax
	movl	-2716(%rbp), %edx
	xorl	%esi, %esi
	movl	%r14d, %ecx
	movq	32(%rax), %rdi
	call	expand_expr
	movl	$127, %esi
	movq	-2712(%rbp), %rdi
	movzbl	2(%rax), %edx
	movq	%rax, %rbx
	movzbl	61(%rdi), %ecx
	movl	%ecx, %r12d
	shrb	$1, %r12b
	andl	%r12d, %esi
	cmpb	%r12b, %dl
	je	.L24240
	movl	%ecx, %r11d
	andb	$-2, %r11b
	cmpb	$102, %r11b
	je	.L10560
	cmpb	$51, %dl
	je	.L10560
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %edi
	je	.L10561
	movslq	%esi,%r9
	cmpb	$8, mode_size(%r9)
.L24635:
	ja	.L10560
	andl	$33554432, %edi
	je	.L10563
	movzbl	%dl, %r8d 
	cmpb	$8, mode_size(%r8)
.L24636:
	ja	.L10560
	shrb	$1, %cl
	movq	%rbx, %rsi
	movzbl	%cl, %edi
	call	gen_lowpart
	movq	%rax, %r13
.L10559:
	cmpw	$66, (%r13)
	jne	.L7871
	movq	%r13, %rdi
	call	copy_rtx
	movq	-2712(%rbp), %rcx
	movq	%rax, %rbx
	testb	$2, 18(%rcx)
	je	.L10578
	movq	16(%rax), %rax
	movl	64(%rcx), %esi
	testq	%rax, %rax
	je	.L10574
	cmpl	%esi, 32(%rax)
	ja	.L10575
.L10573:
	movq	%rbx, %rdi
	call	set_mem_align
.L10578:
	movq	-2712(%rbp), %r12
	movq	%rbx, %rdi
	xorl	%edx, %edx
	movl	$1, %r8d
	movzbl	61(%r12), %ecx
	shrb	$1, %cl
	movzbl	%cl, %esi
	movl	$1, %ecx
	call	adjust_address_1
	jmp	.L23191
.L10575:
	testq	%rax, %rax
	movl	$8, %esi
	je	.L10573
	movl	32(%rax), %esi
	jmp	.L10573
.L10574:
	cmpl	$7, %esi
	ja	.L10573
	jmp	.L10575
	.p2align 6,,7
.L10560:
	cmpw	$66, (%rbx)
	je	.L24240
	movq	-9552(%rbp), %r15
	testb	$4, 17(%r15)
	movq	32(%r15), %rdx
	movq	8(%rdx), %rcx
	jne	.L27278
	testq	%r13, %r13
	je	.L24301
	movzbl	61(%rcx), %edx
	movl	%edx, %r10d
	shrb	$1, %r10b
	cmpb	2(%r13), %r10b
	je	.L10568
.L10569:
	shrb	$1, %dl
	movzbl	%dl, %edi
	xorl	%edx, %edx
	movslq	%edi,%r13
	movzbq	mode_size(%r13), %rsi
	call	assign_stack_temp_for_type
	movq	%rax, %r13
.L10568:
	movq	%r13, %rdi
	movq	%rbx, %rsi
	call	emit_move_insn
	jmp	.L10559
.L24301:
	movzbl	61(%rcx), %edx
	jmp	.L10569
.L27278:
	movl	$.LC0, %edi
	movl	$7418, %esi
	jmp	.L25123
	.p2align 6,,7
.L24240:
	movq	%rbx, %r13
	jmp	.L10559
.L10563:
	movzbl	%dl, %esi 
	cmpb	$4, mode_size(%rsi)
	jmp	.L24636
.L10561:
	movslq	%esi,%r14
	cmpb	$4, mode_size(%r14)
	jmp	.L24635
.L7984:
	movq	-9552(%rbp), %rdi
	call	decl_function_context
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L7985
	movq	current_function_decl(%rip), %r12
	movq	-9552(%rbp), %rbx
	movq	%r12, 40(%rbx)
.L7985:
	cmpq	current_function_decl(%rip), %rdi
	je	.L7987
	cmpq	inline_function_decl(%rip), %rdi
	je	.L7987
.L7986:
	testq	%rdi, %rdi
	jne	.L27279
	movq	-9552(%rbp), %r15
	movq	48(%r15), %rdx
	testq	%rdx, %rdx
	jne	.L7992
	movl	-2716(%rbp), %edi
	testl	%edi, %edi
	jne	.L7993
	movq	const_int_rtx+512(%rip), %r14
.L7994:
	movq	-9552(%rbp), %rax
	movq	%r14, 48(%rax)
	movl	optimize(%rip), %eax
	testl	%eax, %eax
	jne	.L24277
	cmpw	$61, (%r14)
	je	.L27280
.L7998:
	movq	const_int_rtx+512(%rip), %rsi
	cmpq	%rsi, %r14
	je	.L27281
	movq	-9552(%rbp), %r10
	xorl	%r12d, %r12d
	movq	32(%r10), %r13
	movl	$0, -6224(%rbp)
	movzbl	16(%r13), %eax
	cmpb	$47, %al
	je	.L27282
	cmpb	$51, %al
	je	.L27283
.L8011:
	movzwl	(%r14), %eax
	subl	$66, %eax
	cmpl	$12, %eax
	ja	.L8059
	mov	%eax, %ecx
	jmp	*.L8060(,%rcx,8)
	.section	.rodata
	.align 8
	.align 4
.L8060:
	.quad	.L8053
	.quad	.L8059
	.quad	.L8059
	.quad	.L8059
	.quad	.L8059
	.quad	.L8058
	.quad	.L8059
	.quad	.L8059
	.quad	.L8059
	.quad	.L8056
	.quad	.L8056
	.quad	.L8059
	.quad	.L8056
	.text
.L8053:
	movq	8(%r14), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L8052:
	testl	%ebx, %ebx
	je	.L8049
	movzbl	2(%r14), %eax
	cmpb	$51, %al
	je	.L8061
	testb	%al, %al
	jne	.L27284
.L8061:
	movzbl	2(%r14), %edx
	movq	%r13, %rdi
	xorl	%esi, %esi
.L24549:
	xorl	%ecx, %ecx
	call	expand_expr
	testb	$8, 3(%r14)
	movq	%rax, -6432(%rbp)
	jne	.L24284
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L24279
	movl	$1, -6224(%rbp)
.L24284:
	movq	-6432(%rbp), %rcx
	movzwl	(%rcx), %edx
.L8010:
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L8088
	cmpw	$54, %dx
	je	.L8088
	cmpw	$55, %dx
	je	.L8088
	cmpw	$58, %dx
	je	.L8088
	cmpw	$134, %dx
	je	.L8088
	cmpw	$56, %dx
	je	.L8088
	cmpw	$140, %dx
	je	.L8088
.L8087:
	movq	-6432(%rbp), %rdi
	movq	%r14, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	je	.L8090
	cmpq	%r14, -6432(%rbp)
	je	.L8089
	movq	-6432(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L27285
.L8090:
	movzbl	16(%r13), %eax
	testb	%al, %al
	je	.L8089
	testl	%r12d, %r12d
	jne	.L8089
	movzbl	%al, %r11d 
	cmpb	$100, tree_code_type(%r11)
	je	.L27286
.L8091:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L8096
	cmpl	$66, %eax
	je	.L27287
.L8100:
	cmpl	$75, %eax
	je	.L8104
	cmpl	$78, %eax
	je	.L8104
.L8099:
	movq	-6432(%rbp), %r15
	movzbl	2(%r14), %ecx
	movzbl	2(%r15), %eax
	cmpb	%cl, %al
	je	.L8109
	testb	%al, %al
	je	.L8109
	movq	8(%r13), %r8
	movl	-6224(%rbp), %eax
	movzbl	17(%r8), %r13d
	shrb	$5, %r13b
	movl	%r13d, %edx
	andl	$1, %edx
	testl	%eax, %eax
	je	.L8110
	movq	-6432(%rbp), %rsi
	movzbl	%cl, %edi
	call	convert_to_mode
	movq	%r14, %rdi
	movq	%rax, %rsi
	movq	%rax, -6432(%rbp)
.L24582:
	call	emit_move_insn
.L8089:
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L8000
	movl	-6224(%rbp), %r15d
	testl	%r15d, %r15d
	je	.L8902
	movq	-6432(%rbp), %rbx
	cmpw	$66, (%rbx)
	je	.L8902
.L8000:
	movq	-9552(%rbp), %r14
	orb	$1, 18(%r14)
	movq	48(%r14), %rdx
.L7992:
	cmpw	$61, (%rdx)
	jne	.L25062
	movzbl	2(%rdx), %esi
	cmpl	-2716(%rbp), %esi
	je	.L25062
	movq	-2712(%rbp), %rdi
	movl	-2716(%rbp), %esi
	leaq	-2516(%rbp), %rdx
	xorl	%ecx, %ecx
	call	promote_mode
	movq	-9552(%rbp), %r10
	movl	-2716(%rbp), %edi
	movq	48(%r10), %rsi
	jmp	.L25065
.L8902:
	cmpb	$51, 2(%r14)
	je	.L8000
	cmpw	$61, (%r14)
	je	.L27288
.L8905:
	movq	%r14, %rdi
	call	copy_to_reg
	jmp	.L8000
.L27288:
	cmpl	$52, 8(%r14)
	jbe	.L8000
	jmp	.L8905
.L8110:
	movq	-6432(%rbp), %rsi
	movq	%r14, %rdi
	call	convert_move
	jmp	.L8089
.L8109:
	cmpb	$51, %al
	je	.L27289
.L8113:
	cmpw	$39, (%r14)
	je	.L27290
	cmpb	$51, %al
	je	.L27291
	movq	%r14, %rdi
	movq	-6432(%rbp), %rsi
	jmp	.L24582
.L27291:
	movq	-6432(%rbp), %r8
	movq	%r13, %rdi
	movq	%r14, -6392(%rbp)
	movq	%r8, -6400(%rbp)
	call	expr_size
	movl	$8, %edx
	movq	16(%r14), %rcx
	movq	%rax, %r13
	testq	%rcx, %rcx
	je	.L8704
	movl	32(%rcx), %edx
.L8704:
	movq	-6432(%rbp), %r9
	movq	16(%r9), %rax
	testq	%rax, %rax
	je	.L8705
	cmpl	32(%rax), %edx
	jb	.L8706
.L8701:
	testq	%rax, %rax
	movl	$8, -6380(%rbp)
	je	.L8702
	movl	32(%rax), %eax
	movl	%eax, -6380(%rbp)
.L8702:
	cmpb	$51, 2(%r14)
	jne	.L25547
	movq	-6432(%rbp), %rsi
	cmpb	$51, 2(%rsi)
	jne	.L25546
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L8713
	cmpl	$66, %eax
	je	.L27292
.L8717:
	cmpl	$75, %eax
	je	.L8721
	cmpl	$78, %eax
	je	.L8721
.L8716:
	movq	-6432(%rbp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L8726
	cmpl	$66, %eax
	je	.L27293
.L8730:
	cmpl	$75, %eax
	je	.L8734
	cmpl	$78, %eax
	je	.L8734
.L8729:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L8739
	cmpl	$66, %eax
	je	.L27294
.L8743:
	cmpl	$75, %eax
	je	.L8747
	cmpl	$78, %eax
	je	.L8747
.L8742:
	movq	-6392(%rbp), %rbx
	cmpw	$66, (%rbx)
	jne	.L25545
	movq	-6400(%rbp), %r10
	cmpw	$66, (%r10)
	jne	.L25544
	testq	%r13, %r13
	je	.L25543
	cmpw	$54, (%r13)
	je	.L27295
.L8755:
	shrl	$3, -6380(%rbp)
	xorl	%edi, %edi
	mov	-6380(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -2888(%rbp)
	testl	%r12d, %r12d
	je	.L23260
.L8888:
	movslq	%r12d,%rsi
	movl	movstr_optab(,%rsi,4), %edx
	movq	%rsi, -2896(%rbp)
	cmpl	$1317, %edx
	je	.L8874
	cmpw	$54, (%r13)
	je	.L27296
.L8878:
	testb	$2, target_flags+3(%rip)
	je	.L8879
	movq	-2896(%rbp), %rsi
	cmpw	$63, mode_bitsize(%rsi,%rsi)
.L24580:
	jbe	.L8874
.L8877:
	movslq	%edx,%rdi
	leaq	(%rdi,%rdi,4), %rcx
	movq	%rdi, -2904(%rbp)
	movq	insn_data+24(,%rcx,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L8881
	movq	-6392(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L8874
.L8881:
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L27297
.L8882:
	movq	72(%r15), %rax
	testq	%rax, %rax
	je	.L8883
	xorl	%esi, %esi
	movq	-2888(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L8874
.L8883:
	call	get_last_insn
	movl	$1, %edx
	movq	%r13, %rsi
	movl	%r12d, %edi
	movq	%rax, -2912(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r15), %rax
	testq	%rax, %rax
	jne	.L27298
.L8884:
	movq	-2904(%rbp), %rdx
	movq	-6392(%rbp), %rdi
	xorl	%eax, %eax
	movq	-6400(%rbp), %rsi
	movq	-2888(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24462
	movq	-2912(%rbp), %rdi
	call	delete_insns_since
.L8874:
	movq	-2896(%rbp), %r11
	movzbl	mode_wider_mode(%r11), %r12d
	testl	%r12d, %r12d
	jne	.L8888
.L23260:
	testb	$2, target_flags+3(%rip)
	movq	-6392(%rbp), %r15
	movl	$0, volatile_ok(%rip)
	setne	%sil
	movzbl	%sil, %edi
	movq	8(%r15), %rsi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%bl
	movq	%rax, %r15
	movq	-6400(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%bl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%r13, %rsi
	movq	sizetype_tab(%rip), %r8
	movq	%rax, %rbx
	movzbl	61(%r8), %r9d
	shrb	$1, %r9b
	movzbl	%r9b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r13
	je	.L27299
.L8897:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r15, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r13, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %r8
	movq	8(%rdx), %rdi
	movq	(%r8), %r9
	movq	$0, (%r9)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r11
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r11), %r13
	movq	8(%r13), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r15)
	je	.L8089
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r15, %rdx
.L24581:
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L8089
.L27299:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r12
	xorl	%esi, %esi
	orb	$1, 49(%r12)
	movq	fn.1(%rip), %rdi
	orb	$8, 18(%rdi)
	movq	fn.1(%rip), %rcx
	orb	$64, 50(%rcx)
	movq	fn.1(%rip), %r10
	orb	$2, 18(%r10)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L8897
.L24462:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L8089
.L27298:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L8884
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L8884
.L27297:
	movq	-6400(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L8874
	jmp	.L8882
.L8879:
	movq	-2896(%rbp), %r10
	cmpw	$31, mode_bitsize(%r10,%r10)
	jmp	.L24580
.L27296:
	movq	mode_mask_array(,%rsi,8), %r15
	shrq	$1, %r15
	cmpq	%r15, 8(%r13)
	jbe	.L8877
	jmp	.L8878
.L27295:
	movq	8(%r13), %r12
	xorl	%r15d, %r15d
	movl	$17, %esi
.L8768:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23249
.L8765:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %r8
	cmpq	%rsi, %r8
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L8765
.L23249:
	testl	%edi, %edi
	je	.L8758
	movslq	%edi,%rbx
	movq	%rbx, %r9
	salq	$4, %r9
	addq	optab_table+240(%rip), %r9
	cmpl	$1317, 8(%r9)
	je	.L8767
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L8767
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L8767:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L8768
.L8758:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L8771
	movq	ix86_cost(%rip), %rbx
	mov	40(%rbx), %edx
	cmpq	%rdx, %r15
	jae	.L8755
.L8772:
	movq	-6400(%rbp), %rsi
	movq	-6392(%rbp), %rdi
	movq	8(%r13), %r12
	movq	-6392(%rbp), %r9
	testb	$2, target_flags+3(%rip)
	movq	8(%rsi), %r8
	setne	%r13b
	movq	$0, -152(%rbp)
	movl	$0, -6412(%rbp)
	movq	%r8, -176(%rbp)
	movq	8(%rdi), %r11
	movq	%r9, -208(%rbp)
	movzbl	%r13b, %ecx
	leal	5(,%rcx,4), %r13d
	xorl	%ecx, %ecx
	movzwl	(%r11), %edx
	movq	%r11, -6408(%rbp)
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L8777
	cmpw	$99, %dx
	je	.L8777
	cmpw	$98, %dx
	je	.L8777
.L8776:
	movq	-6408(%rbp), %rbx
	movl	%ecx, -192(%rbp)
	xorl	%edx, %edx
	movzwl	(%rbx), %eax
	cmpw	$96, %ax
	je	.L8779
	cmpw	$98, %ax
	je	.L8779
.L8778:
	movl	%edx, -144(%rbp)
	movq	-6400(%rbp), %rax
	xorl	%ecx, %ecx
	movq	-6408(%rbp), %rdx
	movq	%rax, -184(%rbp)
	movq	%rdx, -200(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L8782
	cmpw	$99, %dx
	je	.L8782
	cmpw	$98, %dx
	je	.L8782
.L8781:
	movl	-144(%rbp), %r10d
	movl	%ecx, -168(%rbp)
	movl	$0, -164(%rbp)
	movl	$0, -188(%rbp)
	testl	%r10d, %r10d
	je	.L8783
	movq	%r12, -152(%rbp)
.L8783:
	movl	-168(%rbp), %r11d
	movq	%r12, -160(%rbp)
	testl	%r11d, %r11d
	je	.L8785
	movl	-192(%rbp), %r9d
	testl	%r9d, %r9d
	jne	.L8784
.L8785:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L8798:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23252
.L8795:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L8795
.L23252:
	testl	%edi, %edi
	je	.L8788
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L8797
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L8797
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L8797:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L8798
.L8788:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L8784
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23254
.L8806:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %r10d
	cmpl	%r13d, %r10d
	cmovae	-6412(%rbp), %ecx
	movl	%ecx, -6412(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L8806
.L23254:
	movl	-168(%rbp), %eax
	testl	%eax, %eax
	jne	.L8812
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L8810
	cmpw	$54, %dx
	je	.L8810
	cmpw	$55, %dx
	je	.L8810
	cmpw	$58, %dx
	je	.L8810
	cmpw	$134, %dx
	je	.L8810
	cmpw	$56, %dx
	je	.L8810
	cmpw	$140, %dx
	je	.L8810
.L8812:
	movl	-192(%rbp), %eax
	testl	%eax, %eax
	jne	.L8784
	movq	-6408(%rbp), %rbx
	movzwl	(%rbx), %edx
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L8814
	cmpw	$54, %dx
	je	.L8814
	cmpw	$55, %dx
	je	.L8814
	cmpw	$58, %dx
	je	.L8814
	cmpw	$134, %dx
	je	.L8814
	cmpw	$56, %dx
	je	.L8814
	cmpw	$140, %dx
	je	.L8814
.L8784:
	cmpl	$1, %r13d
	jbe	.L8817
.L8868:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23257
.L8824:
	movslq	%ecx,%r8
	movzbl	mode_size(%r8), %edx
	cmpl	%r13d, %edx
	cmovae	-6412(%rbp), %ecx
	movl	%ecx, -6412(%rbp)
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L8824
.L23257:
	movl	-6412(%rbp), %eax
	testl	%eax, %eax
	je	.L8817
	movslq	-6412(%rbp),%r15
	movq	%r15, %r13
	salq	$4, %r13
	addq	optab_table+240(%rip), %r13
	movl	8(%r13), %ebx
	cmpl	$1317, %ebx
	je	.L8826
	movl	-6412(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L8826
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%rsi
	movq	$0, -6424(%rbp)
	leaq	(%rsi,%rsi,4), %rdi
	cmpq	%rdx, -160(%rbp)
	movq	insn_data+16(,%rdi,8), %r12
	movq	%rdx, -5920(%rbp)
	movq	%r12, -2880(%rbp)
	leaq	-208(%rbp), %r12
	jb	.L8826
	movl	-144(%rbp), %ecx
.L8866:
	testl	%ecx, %ecx
	je	.L8830
	subq	%rdx, 56(%r12)
.L8830:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L8831
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L8832
	movl	-6412(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24576:
	movq	%rax, -6424(%rbp)
.L8831:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L8834
	movq	24(%r12), %rdi
	movl	-6412(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24577:
	cmpq	$0, (%r12)
	movq	%rax, %r13
	jne	.L27300
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L8840
	movzbl	mode_size(%r15), %r10d
	leal	7(%r10), %edx
	andl	$-8, %edx
.L8841:
	movq	cfun(%rip), %rbx
	andl	$33554432, %esi
	movq	16(%rbx), %r9
	leaq	8(%r9), %rdi
	movl	8(%r9), %ecx
	je	.L8842
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24578:
	movq	%r15, %r8
	leal	(%rax,%rcx), %esi
	salq	$4, %r8
	movl	%esi, (%rdi)
	addq	optab_table+384(%rip), %r8
	movl	8(%r8), %eax
	cmpl	$1317, %eax
	je	.L8844
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rcx
	movq	insn_data+24(,%rcx,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L8845
	movq	%r13, %rdi
	movl	-6412(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L27301
.L8845:
	leaq	(%rbx,%rbx,4), %r10
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r10,8)
.L24579:
	movq	%rax, %rdi
	call	emit_insn
.L8864:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L8865
	movq	-5920(%rbp), %r13
	addq	%r13, 56(%r12)
.L8865:
	movq	48(%r12), %rbx
	movq	-5920(%rbp), %rdx
	subq	-5920(%rbp), %rbx
	cmpq	%rdx, %rbx
	movq	%rbx, 48(%r12)
	jae	.L8866
.L8826:
	movzbl	mode_size(%r15), %r13d
	cmpl	$1, %r13d
	ja	.L8868
.L8817:
	cmpq	$0, -160(%rbp)
.L25559:
	je	.L8089
	jmp	.L25518
.L27301:
	movl	-6412(%rbp), %edi
	movq	%r13, %rsi
	call	force_reg
	movq	%rax, %r13
	jmp	.L8845
.L8844:
	movzbl	mode_size(%r15), %edi
	cmpl	%edx, %edi
	je	.L27302
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r9b
	movzbl	%r9b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r11b
	movzbl	%r11b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L8852:
	movl	-6412(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%r8d, %r8d
	testq	%r8, %r8
	movq	%rax, %rbx
	je	.L8861
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L27303
.L8861:
	movq	%rbx, %rdi
	movq	%r13, %rsi
	call	emit_move_insn
	jmp	.L8864
.L27303:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L8861
.L27302:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L8852
.L8842:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24578
.L8840:
	movzbl	mode_size(%r15), %r11d
	leal	1(%r11), %edx
	andl	$-2, %edx
	jmp	.L8841
.L27300:
	movq	%rax, %rsi
	movq	-6424(%rbp), %rdi
	xorl	%eax, %eax
	call	*-2880(%rbp)
	jmp	.L24579
.L8834:
	movq	24(%r12), %rdi
	movl	-6412(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24577
.L8832:
	movl	-6412(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24576
.L8814:
	movq	-6408(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -200(%rbp)
	jmp	.L8784
.L8810:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -176(%rbp)
	jmp	.L8812
.L8782:
	movl	$1, %ecx
	jmp	.L8781
.L8779:
	movl	$1, %edx
	jmp	.L8778
.L8777:
	movl	$1, %ecx
	jmp	.L8776
.L8771:
	cmpq	$2, %r15
	ja	.L8755
	jmp	.L8772
.L8747:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L27304
.L8749:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L8742
.L27304:
	cmpq	16(%r13), %rax
	jne	.L8749
	jmp	.L8742
.L27294:
	cmpb	$51, 2(%r13)
	je	.L8740
	movq	8(%r13), %r12
	cmpw	$71, (%r12)
	je	.L27305
.L8740:
	cmpl	$66, %eax
	jne	.L8743
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L8742
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	movq	%rbx, 8(%rax)
	jmp	.L8742
.L27305:
	movq	8(%r12), %rsi
	movq	%r13, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L8741
	movzbl	2(%r13), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L8742
.L8741:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24575:
	movq	%rax, %r13
	jmp	.L8742
.L8739:
	cmpq	$0, 16(%r13)
	je	.L27306
	movq	24(%r13), %rax
	testq	%rax, %rax
	jne	.L24575
	movq	8(%r13), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L8742
.L27306:
	movq	8(%r13), %rdi
	call	copy_to_reg
	jmp	.L24575
.L8734:
	movq	-6432(%rbp), %r8
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	%rax, %r12
	movq	-6432(%rbp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	-6432(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L27307
.L8736:
	movq	-6432(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -6400(%rbp)
	movq	%r12, 8(%rax)
	movq	-6400(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L8729
.L27307:
	cmpq	16(%rsi), %rax
	jne	.L8736
	jmp	.L8729
.L27293:
	cmpb	$51, 2(%rbx)
	je	.L8727
	movq	8(%rbx), %r12
	cmpw	$71, (%r12)
	je	.L27308
.L8727:
	cmpl	$66, %eax
	jne	.L8730
	movq	-6432(%rbp), %r12
	xorl	%esi, %esi
	movq	8(%r12), %rdi
	call	protect_from_queue
	movq	-6432(%rbp), %rdx
	movq	%rax, %rbx
	cmpq	8(%rdx), %rax
	je	.L8729
	movq	%rdx, %rdi
	call	copy_rtx
	movq	%rax, -6400(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L8729
.L27308:
	movq	8(%r12), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L8728
	movq	-6432(%rbp), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -6400(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L8729
.L8728:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24574:
	movq	%rax, -6400(%rbp)
	jmp	.L8729
.L8726:
	movq	-6432(%rbp), %rdx
	cmpq	$0, 16(%rdx)
	je	.L27309
	movq	-6432(%rbp), %r15
	movq	24(%r15), %r9
	testq	%r9, %r9
	movq	%r9, -6400(%rbp)
	jne	.L8729
	movq	-6432(%rbp), %r12
	movq	8(%r12), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rcx
	movq	%rcx, -6400(%rbp)
	jmp	.L8729
.L27309:
	movq	8(%rdx), %rdi
	call	copy_to_reg
	jmp	.L24574
.L8721:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L27310
.L8723:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -6392(%rbp)
	movq	%r12, 8(%rax)
	movq	-6392(%rbp), %rcx
	movq	%rbx, 16(%rcx)
	jmp	.L8716
.L27310:
	cmpq	16(%r14), %rax
	jne	.L8723
	jmp	.L8716
.L27292:
	jne	.L8717
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L8716
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -6392(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L8716
.L8713:
	testq	%rcx, %rcx
	je	.L27311
	movq	24(%r14), %rdx
	testq	%rdx, %rdx
	movq	%rdx, -6392(%rbp)
	jne	.L8716
	movq	8(%r14), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rbx
	movq	%rbx, -6392(%rbp)
	jmp	.L8716
.L27311:
	movq	8(%r14), %rdi
	call	copy_to_reg
	movq	%rax, -6392(%rbp)
	jmp	.L8716
.L8706:
	testq	%rcx, %rcx
	movl	$8, -6380(%rbp)
	je	.L8702
	movl	32(%rcx), %r15d
	movl	%r15d, -6380(%rbp)
	jmp	.L8702
.L8705:
	cmpl	$7, %edx
	ja	.L8701
	jmp	.L8706
.L27290:
	movq	8(%r13), %rdi
	call	int_size_in_bytes
	cmpw	$39, (%r14)
	movl	%eax, -2844(%rbp)
	jne	.L25561
	movq	8(%r14), %rcx
	movq	8(%rcx), %r11
	movl	(%rcx), %r9d
	cmpq	$0, 8(%r11)
	movslq	%r9d,%rbx
	sete	%r10b
	leaq	15(,%rbx,8), %r12
	andq	$-16, %r12
	subq	%r12, %rsp
	leaq	32(%rsp), %r13
	movzbl	%r10b, %edi
	movq	%r13, -2856(%rbp)
	movl	%edi, -6376(%rbp)
	movl	-6376(%rbp), %eax
	cmpl	%r9d, %eax
	movl	%eax, -6368(%rbp)
	jge	.L23243
.L8685:
	movslq	-6368(%rbp),%r13
	movl	-2844(%rbp), %esi
	testl	%esi, %esi
	movq	8(%rcx,%r13,8), %r15
	movq	%r13, -2864(%rbp)
	movq	8(%r15), %rcx
	movq	16(%r15), %rdx
	movzbl	2(%rcx), %r13d
	movq	8(%rdx), %r15
	movslq	%r13d,%r8
	movzbl	mode_size(%r8), %ebx
	movq	%r8, -2872(%rbp)
	movl	%ebx, -6372(%rbp)
	js	.L8658
	movslq	-2844(%rbp),%r12
	mov	%ebx, %edi
	leaq	(%rdi,%r15), %rbx
	cmpq	%r12, %rbx
	jle	.L8658
	movl	-2844(%rbp), %eax
	subl	%r15d, %eax
	movl	%eax, -6372(%rbp)
	je	.L25560
.L8658:
	movq	-6432(%rbp), %r12
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L24531
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L8662
	cmpw	$54, %dx
	je	.L8662
	cmpw	$55, %dx
	je	.L8662
	cmpw	$58, %dx
	je	.L8662
	cmpw	$134, %dx
	je	.L8662
	cmpw	$56, %dx
	je	.L8662
	cmpw	$140, %dx
	je	.L8662
.L8661:
	movq	-6432(%rbp), %r8
	movl	%r13d, %edi
	movzbl	2(%r8), %eax
	testb	%al, %al
	je	.L24572
	movzbl	%al, %edi
.L24572:
	call	gen_reg_rtx
	movq	-6432(%rbp), %rsi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	emit_move_insn
	movzwl	(%r12), %edx
.L8660:
	cmpw	$66, %dx
	je	.L24531
.L8665:
	cmpw	$65, %dx
	je	.L27312
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L8682
	cmpw	$54, %dx
	je	.L8682
	cmpw	$55, %dx
	je	.L8682
	cmpw	$58, %dx
	je	.L8682
	cmpw	$134, %dx
	je	.L8682
	cmpw	$56, %dx
	je	.L8682
	cmpw	$140, %dx
	je	.L8682
	cmpw	$61, %dx
	je	.L27313
.L8681:
	movslq	-2844(%rbp),%rdi
	movl	-6372(%rbp), %r10d
	leaq	0(,%r15,8), %rdx
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r13d, %r9d
	movl	%r13d, (%rsp)
	sall	$3, %r10d
	movq	%rdi, 8(%rsp)
	mov	%r10d, %esi
	movq	%r12, %rdi
	call	extract_bit_field
.L24573:
	movq	-2864(%rbp), %r12
	movq	-2856(%rbp), %r11
	movq	%rax, (%r11,%r12,8)
.L8656:
	incl	-6368(%rbp)
	movq	8(%r14), %rcx
	movl	-6368(%rbp), %eax
	cmpl	(%rcx), %eax
	jl	.L8685
.L23243:
	movq	cfun(%rip), %r9
	movq	16(%r9), %r8
	movq	40(%r8), %rbx
	testq	%rbx, %rbx
	je	.L23245
.L8691:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L27314
	call	emit_insn
	movq	%rax, 16(%rbx)
.L8690:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %rcx
	movq	16(%rdx), %r13
	testq	%rcx, %rcx
	movq	%rcx, %rbx
	movq	%rcx, 40(%r13)
	jne	.L8691
	movq	8(%r14), %rcx
.L23245:
	movl	-6376(%rbp), %ebx
	cmpl	(%rcx), %ebx
	jge	.L8089
.L8697:
	movslq	-6376(%rbp),%r12
	movq	-2856(%rbp), %r11
	salq	$3, %r12
	movq	8(%r12,%rcx), %rax
	movq	(%r11,%r12), %rsi
	movq	8(%rax), %rdi
	call	emit_move_insn
	incl	-6376(%rbp)
	movq	8(%r14), %r10
	movl	-6376(%rbp), %edi
	cmpl	(%r10), %edi
	movq	%r10, %rcx
	jl	.L8697
	jmp	.L8089
.L27314:
	movq	8(%rdi), %rsi
	movq	8(%rsi), %r15
	movq	%r15, 16(%rbx)
	call	emit_insn
	jmp	.L8690
.L27313:
	movzbl	2(%r12), %ecx
	cmpl	%r13d, %ecx
	jne	.L8681
.L8682:
	movq	-2864(%rbp), %rdx
	movq	-2856(%rbp), %r13
	movq	%r12, (%r13,%rdx,8)
	jmp	.L8656
.L27312:
	testq	%r15, %r15
	jne	.L24288
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %rsi
	movzbl	mode_size(%rsi), %ebx
	cmpl	%ebx, -6372(%rbp)
	je	.L8671
.L8672:
	movzbq	2(%rdx), %r9
	movzbq	mode_size(%r9), %r8
	cmpq	%r8, %r15
	je	.L27315
.L8670:
	testq	%r15, %r15
	jne	.L22779
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbx
	movzbq	mode_size(%rbx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %r15
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r15, %rdi
	movl	%r13d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	jmp	.L24573
.L27315:
	movq	16(%r12), %rdi
	movzbq	2(%rdi), %rdx
	movzbl	mode_size(%rdx), %ecx
	cmpl	%ecx, -6372(%rbp)
	jne	.L8670
.L8671:
	xorl	%r10d, %r10d
	movq	-2864(%rbp), %r11
	movq	-2856(%rbp), %rax
	testq	%r15, %r15
	setne	%r10b
	leaq	(%rax,%r11,8), %rbx
	movq	8(%r12,%r10,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L8656
	cmpw	$54, %dx
	je	.L8656
	cmpw	$55, %dx
	je	.L8656
	cmpw	$58, %dx
	je	.L8656
	cmpw	$134, %dx
	je	.L8656
	cmpw	$56, %dx
	je	.L8656
	cmpw	$140, %dx
	je	.L8656
	cmpw	$61, %dx
	je	.L27316
.L8676:
	movslq	-2844(%rbp),%r8
	movl	-6372(%rbp), %r9d
	movl	%r13d, (%rsp)
	xorl	%edx, %edx
	movl	$1, %ecx
	sall	$3, %r9d
	movq	%r8, 8(%rsp)
	mov	%r9d, %esi
	xorl	%r8d, %r8d
	movq	(%rbx), %rdi
	movl	%r13d, %r9d
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L8656
.L27316:
	movzbl	2(%rcx), %r12d
	cmpl	%r13d, %r12d
	jne	.L8676
	jmp	.L8656
.L24288:
	movq	8(%r12), %rdx
	jmp	.L8672
.L24531:
	movl	%r13d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L8666
	cmpl	%eax, 32(%rdx)
	jae	.L8667
.L24287:
	movzwl	(%r12), %edx
	jmp	.L8665
.L8667:
	movl	%r13d, %edi
	leaq	0(,%r15,8), %rbx
	call	get_mode_alignment
	mov	%eax, %ecx
	movq	%rbx, %rax
	cqto
	idivq	%rcx
	testq	%rdx, %rdx
	jne	.L24287
	movq	-2872(%rbp), %rdi
	movzbl	mode_size(%rdi), %edx
	cmpl	%edx, -6372(%rbp)
	jne	.L24287
	movl	%r13d, %edi
	call	gen_reg_rtx
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-2864(%rbp), %r11
	movq	-2856(%rbp), %r10
	movq	%r12, %rdi
	movl	%r13d, %esi
	movq	%r15, %rdx
	leaq	(%r10,%r11,8), %rbx
	movq	%rax, (%rbx)
	call	adjust_address_1
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L8656
.L8666:
	cmpl	$8, %eax
	ja	.L24287
	jmp	.L8667
.L8662:
	movq	-6432(%rbp), %rsi
	movzbl	2(%rsi), %ecx
	movzbl	%cl, %r11d
	cmpl	%r13d, %r11d
	je	.L8660
	testb	%cl, %cl
	je	.L8660
	jmp	.L8661
.L27289:
	cmpb	$29, 16(%r13)
	jne	.L8113
	movq	%r13, %rdi
	call	expr_size
	cmpw	$54, (%rax)
	movq	%rax, -6248(%rbp)
	je	.L27317
.L8114:
	movq	sizetype_tab(%rip), %rdi
	movq	-6248(%rbp), %rsi
	call	make_tree
	xorl	%esi, %esi
	movslq	32(%r13),%rdi
	movq	%rax, %r15
	call	size_int_wide
	movq	%r15, %rsi
	movl	$78, %edi
	movq	%rax, %rdx
	call	size_binop
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	movq	%rax, -2768(%rbp)
	call	expand_expr
	xorl	%edx, %edx
	movl	ptr_mode(%rip), %edi
	movq	%rax, %rsi
	movq	$0, -6336(%rbp)
	call	convert_to_mode
	movl	$8, %edx
	movq	-6432(%rbp), %r12
	movq	%rax, -6280(%rbp)
	movq	%r14, -6288(%rbp)
	movq	%rax, -6304(%rbp)
	movq	%r12, -6296(%rbp)
	movq	16(%r14), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L8317
	movl	32(%rax), %edx
.L8317:
	movq	-6432(%rbp), %r13
	movq	16(%r13), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L8318
	cmpl	32(%rax), %edx
	jb	.L8319
.L8314:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L8315
	movl	32(%rcx), %r15d
.L8315:
	cmpb	$51, 2(%r14)
	jne	.L25547
	movq	-6432(%rbp), %rax
	cmpb	$51, 2(%rax)
	jne	.L25546
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L8326
	cmpl	$66, %eax
	je	.L27318
.L8330:
	cmpl	$75, %eax
	je	.L8334
	cmpl	$78, %eax
	je	.L8334
.L8329:
	movq	-6432(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L8339
	cmpl	$66, %eax
	je	.L27319
.L8343:
	cmpl	$75, %eax
	je	.L8347
	cmpl	$78, %eax
	je	.L8347
.L8342:
	movq	-6280(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L8352
	cmpl	$66, %eax
	je	.L27320
.L8356:
	cmpl	$75, %eax
	je	.L8360
	cmpl	$78, %eax
	je	.L8360
.L8355:
	movq	-6288(%rbp), %r10
	cmpw	$66, (%r10)
	jne	.L25545
	movq	-6296(%rbp), %rax
	cmpw	$66, (%rax)
	jne	.L25544
	cmpq	$0, -6304(%rbp)
	je	.L25543
	movq	-6304(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L27321
.L8368:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -2784(%rbp)
	testl	%r12d, %r12d
	je	.L23227
.L8501:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L8487
	movq	-6304(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L27322
.L8491:
	testb	$2, target_flags+3(%rip)
	je	.L8492
	cmpw	$63, mode_bitsize(%r15,%r15)
.L24566:
	jbe	.L8487
.L8490:
	movslq	%edx,%r11
	leaq	(%r11,%r11,4), %rcx
	movq	%r11, -2792(%rbp)
	movq	insn_data+24(,%rcx,8), %r13
	movq	(%r13), %rax
	testq	%rax, %rax
	je	.L8494
	movq	-6288(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L8487
.L8494:
	movq	24(%r13), %rax
	testq	%rax, %rax
	jne	.L27323
.L8495:
	movq	72(%r13), %rax
	testq	%rax, %rax
	je	.L8496
	xorl	%esi, %esi
	movq	-2784(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L8487
.L8496:
	call	get_last_insn
	movl	$1, %edx
	movq	-6304(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -2800(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r13), %rax
	testq	%rax, %rax
	jne	.L27324
.L8497:
	movq	-2792(%rbp), %rdx
	movq	-6288(%rbp), %rdi
	xorl	%eax, %eax
	movq	-6296(%rbp), %rsi
	movq	-2784(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24460
	movq	-2800(%rbp), %rdi
	call	delete_insns_since
.L8487:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L8501
.L23227:
	testb	$2, target_flags+3(%rip)
	movq	-6288(%rbp), %r9
	movl	$0, volatile_ok(%rip)
	setne	%sil
	movzbl	%sil, %edi
	movq	8(%r9), %rsi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%r8b
	movq	%rax, %r13
	movq	-6296(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%r8b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-6304(%rbp), %rsi
	movq	sizetype_tab(%rip), %rdi
	movq	%rax, %rbx
	movzbl	61(%rdi), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L27325
.L8510:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r13, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %r8
	movq	(%r8), %rdi
	movq	$0, (%rdi)
	movq	8(%rdx), %rdi
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r15
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r15), %rbx
	movq	8(%rbx), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r13)
	jne	.L27326
.L8499:
	movq	-6280(%rbp), %rbx
	cmpw	$54, (%rbx)
	je	.L27327
	movq	sizetype_tab(%rip), %r9
	movq	-6280(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	optab_table+16(%rip), %rsi
	movq	-6248(%rbp), %rdx
	movzbl	61(%r9), %r13d
	xorl	%r9d, %r9d
	movl	$3, (%rsp)
	shrb	$1, %r13b
	movzbl	%r13b, %edi
	call	expand_binop
	movq	-2768(%rbp), %rdi
	movq	%rax, %rbx
	call	highest_pow2_factor
	movq	-6280(%rbp), %rsi
	movq	%r14, %rdi
	movq	%rax, %rdx
	call	offset_address
	movq	%rax, %r14
	call	gen_label_rtx
	xorl	%r9d, %r9d
	movq	%rax, -6336(%rbp)
	movq	const_int_rtx+512(%rip), %rsi
	movq	%rbx, %rdi
	movzbl	2(%rbx), %r8d
	movl	$107, %edx
	xorl	%ecx, %ecx
	movq	%rax, (%rsp)
	call	emit_cmp_and_jump_insns
.L8513:
	cmpq	const_int_rtx+512(%rip), %rbx
	je	.L8514
	cmpw	$66, (%r14)
	movq	%r14, -6352(%rbp)
	je	.L27328
	movzbl	2(%r14), %edi
	call	get_mode_alignment
.L24567:
	movl	%eax, -6340(%rbp)
.L8516:
	movzbl	2(%r14), %eax
	cmpb	$51, %al
	je	.L8519
	cmpw	$54, (%rbx)
	je	.L27329
.L8519:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L8521
	cmpl	$66, %eax
	je	.L27330
.L8525:
	cmpl	$75, %eax
	je	.L8529
	cmpl	$78, %eax
	je	.L8529
.L8524:
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L8534
	cmpl	$66, %eax
	je	.L27331
.L8538:
	cmpl	$75, %eax
	je	.L8542
	cmpl	$78, %eax
	je	.L8542
.L8537:
	cmpw	$54, (%rbx)
	je	.L27332
.L8547:
	shrl	$3, -6340(%rbp)
	xorl	%edi, %edi
	mov	-6340(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r13d
	movq	%rax, -2816(%rbp)
	testl	%r13d, %r13d
	je	.L23241
.L8641:
	movslq	%r13d,%rcx
	movl	clrstr_optab(,%rcx,4), %edx
	movq	%rcx, -2824(%rbp)
	cmpl	$1317, %edx
	je	.L8628
	cmpw	$54, (%rbx)
	je	.L27333
.L8632:
	testb	$2, target_flags+3(%rip)
	je	.L8633
	movq	-2824(%rbp), %rax
	cmpw	$63, mode_bitsize(%rax,%rax)
.L24570:
	jbe	.L8628
.L8631:
	movslq	%edx,%r15
	leaq	(%r15,%r15,4), %r11
	movq	%r15, -2832(%rbp)
	movq	insn_data+24(,%r11,8), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.L8635
	movq	-6352(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L8628
.L8635:
	movq	48(%r15), %rax
	testq	%rax, %rax
	je	.L8636
	xorl	%esi, %esi
	movq	-2816(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L8628
.L8636:
	call	get_last_insn
	movl	$1, %edx
	movq	%rbx, %rsi
	movl	%r13d, %edi
	movq	%rax, -2840(%rbp)
	call	convert_to_mode
	movq	%rax, %r12
	movq	24(%r15), %rax
	testq	%rax, %rax
	jne	.L27334
.L8637:
	movq	-2832(%rbp), %rsi
	movq	-6352(%rbp), %rdi
	xorl	%eax, %eax
	movq	-2816(%rbp), %rdx
	leaq	(%rsi,%rsi,4), %r8
	movq	%r12, %rsi
	call	*insn_data+16(,%r8,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24571
	movq	-2840(%rbp), %rdi
	call	delete_insns_since
.L8628:
	movq	-2824(%rbp), %rdx
	movzbl	mode_wider_mode(%rdx), %r13d
	testl	%r13d, %r13d
	jne	.L8641
.L23241:
	testb	$2, target_flags+3(%rip)
	movq	-6352(%rbp), %r13
	setne	%r12b
	movq	8(%r13), %rsi
	movzbl	%r12b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%rbx, %rsi
	movq	sizetype_tab(%rip), %r9
	movq	%rax, %r13
	movzbl	61(%r9), %ecx
	shrb	$1, %cl
	movzbl	%cl, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.0(%rip)
	movq	%rax, %r15
	je	.L27335
.L8646:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r13, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	const_int_rtx+512(%rip), %rsi
	movq	integer_types+40(%rip), %rdi
	movq	%rax, %r12
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.0(%rip), %rsi
	movq	%rax, (%rbx)
	movq	(%r12), %rcx
	movq	8(%rsi), %rdi
	movq	(%rcx), %rdx
	movq	$0, (%rdx)
	call	build_pointer_type
	movq	fn.0(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	movq	%r12, %rcx
	movl	$53, %edi
	movq	fn.0(%rip), %r8
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%r8), %r15
	xorl	%r8d, %r8d
	movq	8(%r15), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r13)
	jne	.L27336
.L8514:
	cmpq	$0, -6336(%rbp)
	je	.L8089
	movq	-6336(%rbp), %rdi
	call	emit_label
	jmp	.L8089
.L27336:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r13, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
.L24571:
	call	emit_insn
	jmp	.L8514
.L27335:
	movl	$.LC7, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.0(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.0(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.0, %edi
	movq	%rax, fn.0(%rip)
	call	ggc_add_tree_root
	movq	fn.0(%rip), %r11
	xorl	%esi, %esi
	orb	$1, 49(%r11)
	movq	fn.0(%rip), %r10
	orb	$8, 18(%r10)
	movq	fn.0(%rip), %rdi
	orb	$64, 50(%rdi)
	movq	fn.0(%rip), %rbx
	orb	$2, 18(%rbx)
	movq	fn.0(%rip), %rdi
	call	make_decl_rtl
	movq	fn.0(%rip), %rdi
	call	assemble_external
	jmp	.L8646
.L27334:
	movq	%r12, %rdi
	movl	%r13d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L8637
	movq	%r12, %rsi
	movl	%r13d, %edi
	call	copy_to_mode_reg
	movq	%rax, %r12
	jmp	.L8637
.L8633:
	movq	-2824(%rbp), %r10
	cmpw	$31, mode_bitsize(%r10,%r10)
	jmp	.L24570
.L27333:
	movq	mode_mask_array(,%rcx,8), %r12
	shrq	$1, %r12
	cmpq	%r12, 8(%rbx)
	jbe	.L8631
	jmp	.L8632
.L27332:
	movq	8(%rbx), %r13
	xorl	%r15d, %r15d
	movl	$17, %esi
.L8560:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23230
.L8557:
	movslq	%ecx,%r8
	movzbq	mode_size(%r8), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L8557
.L23230:
	testl	%edi, %edi
	je	.L8550
	movslq	%edi,%r12
	movq	%r12, %r9
	salq	$4, %r9
	addq	optab_table+240(%rip), %r9
	cmpl	$1317, 8(%r9)
	je	.L8559
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L8559
	movzbq	mode_size(%r12), %rsi
	movq	%r13, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r13
.L8559:
	movzbq	mode_size(%r12), %rsi
	cmpq	$1, %rsi
	ja	.L8560
.L8550:
	testq	%r13, %r13
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L8563
	movq	ix86_cost(%rip), %rcx
	mov	40(%rcx), %r11d
	cmpq	%r11, %r15
	jae	.L8547
.L8564:
	movq	8(%rbx), %r12
	movq	-6352(%rbp), %r15
	movq	$0, -224(%rbp)
	testb	$2, target_flags+3(%rip)
	movq	$clear_by_pieces_1, -232(%rbp)
	setne	%cl
	xorl	%esi, %esi
	movq	%r12, -248(%rbp)
	movq	%r15, -272(%rbp)
	leaq	-272(%rbp), %r12
	movq	8(%r15), %r8
	movq	$0, -240(%rbp)
	movl	$0, -6364(%rbp)
	movzbl	%cl, %edx 
	leaq	16(%r12), %rcx
	leaq	5(,%rdx,4), %r15
	movq	%r8, -264(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L8568
	cmpw	$99, %dx
	je	.L8568
	cmpw	$98, %dx
	je	.L8568
.L8567:
	movl	%esi, (%rcx)
	movl	$0, 20(%r12)
	leaq	56(%r12), %rdx
	movzwl	(%r8), %eax
	xorl	%ecx, %ecx
	cmpw	$96, %ax
	je	.L8570
	cmpw	$98, %ax
	je	.L8570
.L8569:
	movl	%ecx, (%rdx)
	movl	56(%r12), %eax
	testl	%eax, %eax
	je	.L8571
	movq	24(%r12), %r9
	movq	%r9, 32(%r12)
.L8571:
	movl	16(%r12), %edi
	testl	%edi, %edi
	jne	.L8572
	movq	24(%r12), %r13
	movq	$0, -6360(%rbp)
	movl	$17, %esi
.L8585:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23233
.L8582:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %r11
	cmpq	%rsi, %r11
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L8582
.L23233:
	testl	%edi, %edi
	je	.L8575
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L8584
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L8584
	movzbq	mode_size(%rbx), %r9
	movq	%r13, %rax
	xorl	%edx, %edx
	divq	%r9
	addq	%rax, -6360(%rbp)
	movq	%rdx, %r13
.L8584:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L8585
.L8575:
	testq	%r13, %r13
	jne	.L25529
	cmpq	$2, -6360(%rbp)
	jbe	.L8572
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23235
.L8593:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%r15, %rdx
	cmovae	-6364(%rbp), %ecx
	movl	%ecx, -6364(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L8593
.L23235:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L8572
	movzwl	(%r8), %edx
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L8597
	cmpw	$54, %dx
	je	.L8597
	cmpw	$55, %dx
	je	.L8597
	cmpw	$58, %dx
	je	.L8597
	cmpw	$134, %dx
	je	.L8597
	cmpw	$56, %dx
	je	.L8597
	cmpw	$140, %dx
	je	.L8597
.L8572:
	cmpq	$1, %r15
	jbe	.L8600
.L8621:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23238
.L8607:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %r11
	cmpq	%r15, %r11
	cmovae	-6364(%rbp), %ecx
	movl	%ecx, -6364(%rbp)
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L8607
.L23238:
	movl	-6364(%rbp), %r15d
	testl	%r15d, %r15d
	je	.L8600
	movslq	-6364(%rbp),%r15
	movq	%r15, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	movl	8(%rsi), %ebx
	cmpl	$1317, %ebx
	je	.L8609
	movl	-6364(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	jb	.L8609
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%r9
	leaq	(%r9,%r9,4), %rcx
	cmpq	%rdx, 24(%r12)
	movq	insn_data+16(,%rcx,8), %r13
	movq	%r13, -2808(%rbp)
	movq	%rdx, %r13
	jb	.L8609
	movl	56(%r12), %ecx
.L8619:
	testl	%ecx, %ecx
	je	.L8613
	subq	%rdx, 32(%r12)
.L8613:
	movl	16(%r12), %ebx
	testl	%ebx, %ebx
	je	.L8614
	movq	(%r12), %rdi
	movl	-6364(%rbp), %esi
	movl	$1, %r8d
	movq	8(%r12), %rdx
	movq	32(%r12), %rcx
	call	adjust_automodify_address_1
.L24569:
	movl	-6364(%rbp), %edx
	movq	%rax, %rbx
	movq	48(%r12), %rdi
	movq	32(%r12), %rsi
	call	*40(%r12)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	*-2808(%rbp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L8618
	addq	%r13, 32(%r12)
.L8618:
	movq	24(%r12), %rdi
	movq	%r13, %rdx
	subq	%r13, %rdi
	cmpq	%r13, %rdi
	movq	%rdi, 24(%r12)
	jae	.L8619
.L8609:
	movzbq	mode_size(%r15), %r15
	cmpq	$1, %r15
	ja	.L8621
.L8600:
	cmpq	$0, 24(%r12)
	je	.L8514
	jmp	.L25451
.L8614:
	movq	(%r12), %rdi
	movl	-6364(%rbp), %esi
	movl	$1, %ecx
	movq	32(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24569
.L8597:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, 8(%r12)
	jmp	.L8572
.L8570:
	movl	$1, %ecx
	jmp	.L8569
.L8568:
	movl	$1, %esi
	jmp	.L8567
.L8563:
	cmpq	$2, %r15
	ja	.L8547
	jmp	.L8564
.L8542:
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbx), %rdi
	movq	%rax, %r13
	call	protect_from_queue
	cmpq	8(%rbx), %r13
	movq	%rax, %r12
	je	.L27337
.L8544:
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r13, 8(%rax)
	movq	%r12, 16(%rax)
	jmp	.L8537
.L27337:
	cmpq	16(%rbx), %rax
	jne	.L8544
	jmp	.L8537
.L27331:
	cmpb	$51, 2(%rbx)
	je	.L8535
	movq	8(%rbx), %r13
	cmpw	$71, (%r13)
	je	.L27338
.L8535:
	cmpl	$66, %eax
	jne	.L8538
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%rbx), %rax
	movq	%rax, %r12
	je	.L8537
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r12, 8(%rax)
	jmp	.L8537
.L27338:
	movq	8(%r13), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r13)
	movq	%rax, %r12
	je	.L8536
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L8537
.L8536:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24568:
	movq	%rax, %rbx
	jmp	.L8537
.L8534:
	cmpq	$0, 16(%rbx)
	je	.L27339
	movq	24(%rbx), %rax
	testq	%rax, %rax
	jne	.L24568
	movq	8(%rbx), %r12
	movzbl	2(%r12), %edi
	call	gen_reg_rtx
	movq	8(%rbx), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	16(%rbx), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbx), %rbx
	jmp	.L8537
.L27339:
	movq	8(%rbx), %rdi
	call	copy_to_reg
	jmp	.L24568
.L8529:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r13
	call	protect_from_queue
	cmpq	8(%r14), %r13
	movq	%rax, %r12
	je	.L27340
.L8531:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -6352(%rbp)
	movq	%r13, 8(%rax)
	movq	-6352(%rbp), %rax
	movq	%r12, 16(%rax)
	jmp	.L8524
.L27340:
	cmpq	16(%r14), %rax
	jne	.L8531
	jmp	.L8524
.L27330:
	jne	.L8525
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %r12
	je	.L8524
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -6352(%rbp)
	movq	%r12, 8(%rax)
	jmp	.L8524
.L8521:
	cmpq	$0, 16(%r14)
	je	.L27341
	movq	24(%r14), %r10
	testq	%r10, %r10
	movq	%r10, -6352(%rbp)
	jne	.L8524
	movq	8(%r14), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r11
	movq	%r11, -6352(%rbp)
	jmp	.L8524
.L27341:
	movq	8(%r14), %rdi
	call	copy_to_reg
	movq	%rax, -6352(%rbp)
	jmp	.L8524
.L27329:
	movzbl	%al, %edx 
	movzbl	mode_size(%rdx), %esi
	cmpl	8(%rbx), %esi
	jne	.L8519
	movq	const_tiny_rtx(,%rdx,8), %rsi
	movq	%r14, %rdi
	call	emit_move_insn
	jmp	.L8514
.L27328:
	movq	16(%r14), %rax
	movl	$8, -6340(%rbp)
	testq	%rax, %rax
	je	.L8516
	movl	32(%rax), %eax
	jmp	.L24567
.L27327:
	movq	8(%rbx), %rsi
	movq	-6248(%rbp), %rdi
	negq	%rsi
	call	plus_constant_wide
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r14, %rdi
	movl	$51, %esi
	movq	%rax, %rbx
	movq	-6280(%rbp), %r14
	movq	8(%r14), %rdx
	call	adjust_address_1
	movq	%rax, %r14
	jmp	.L8513
.L27326:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r13, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L8499
.L27325:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r12
	xorl	%esi, %esi
	orb	$1, 49(%r12)
	movq	fn.1(%rip), %r11
	orb	$8, 18(%r11)
	movq	fn.1(%rip), %rcx
	orb	$64, 50(%rcx)
	movq	fn.1(%rip), %r10
	orb	$2, 18(%r10)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L8510
.L24460:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L8499
.L27324:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L8497
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L8497
.L27323:
	movq	-6296(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L8487
	jmp	.L8495
.L8492:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L24566
.L27322:
	movq	mode_mask_array(,%r15,8), %r10
	shrq	$1, %r10
	cmpq	%r10, 8(%rsi)
	jbe	.L8490
	jmp	.L8491
.L27321:
	movq	8(%rcx), %r12
	xorl	%r13d, %r13d
	movl	$17, %esi
.L8381:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23216
.L8378:
	movslq	%ecx,%r8
	movzbq	mode_size(%r8), %r11
	cmpq	%rsi, %r11
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L8378
.L23216:
	testl	%edi, %edi
	je	.L8371
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L8380
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L8380
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r13
	movq	%rdx, %r12
.L8380:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L8381
.L8371:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L8384
	movq	ix86_cost(%rip), %r10
	mov	40(%r10), %edx
	cmpq	%rdx, %r13
	jae	.L8368
.L8385:
	movq	-6304(%rbp), %r8
	movq	-6296(%rbp), %rsi
	movq	-6288(%rbp), %r9
	movq	-6288(%rbp), %r11
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r13b
	movq	8(%rsi), %r8
	movq	$0, -152(%rbp)
	movl	$0, -6316(%rbp)
	movq	%r8, -176(%rbp)
	movzbl	%r13b, %ecx
	movq	8(%r9), %rdi
	movq	%r11, -208(%rbp)
	leal	5(,%rcx,4), %r13d
	xorl	%ecx, %ecx
	movq	%rdi, -6312(%rbp)
	movq	-6312(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L8390
	cmpw	$99, %dx
	je	.L8390
	cmpw	$98, %dx
	je	.L8390
.L8389:
	movq	-6312(%rbp), %rbx
	movl	%ecx, -192(%rbp)
	xorl	%edx, %edx
	movzwl	(%rbx), %eax
	cmpw	$96, %ax
	je	.L8392
	cmpw	$98, %ax
	je	.L8392
.L8391:
	movl	%edx, -144(%rbp)
	movq	-6312(%rbp), %r15
	xorl	%ecx, %ecx
	movq	-6296(%rbp), %rdx
	movq	%r15, -200(%rbp)
	movq	%rdx, -184(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L8395
	cmpw	$99, %dx
	je	.L8395
	cmpw	$98, %dx
	je	.L8395
.L8394:
	movl	-144(%rbp), %eax
	movl	%ecx, -168(%rbp)
	movl	$0, -164(%rbp)
	movl	$0, -188(%rbp)
	testl	%eax, %eax
	je	.L8396
	movq	%r12, -152(%rbp)
.L8396:
	movl	-168(%rbp), %r11d
	movq	%r12, -160(%rbp)
	testl	%r11d, %r11d
	je	.L8398
	movl	-192(%rbp), %edi
	testl	%edi, %edi
	jne	.L8397
.L8398:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L8411:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23219
.L8408:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L8408
.L23219:
	testl	%edi, %edi
	je	.L8401
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L8410
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %esi
	cmpl	%eax, %esi
	jb	.L8410
	movzbq	mode_size(%rbx), %r11
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r11
	addq	%rax, %r15
	movq	%rdx, %r12
.L8410:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L8411
.L8401:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L8397
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23221
.L8419:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %edx
	cmpl	%r13d, %edx
	cmovae	-6316(%rbp), %ecx
	movl	%ecx, -6316(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L8419
.L23221:
	movl	-168(%rbp), %eax
	testl	%eax, %eax
	jne	.L8425
	movzwl	(%r8), %edx
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L8423
	cmpw	$54, %dx
	je	.L8423
	cmpw	$55, %dx
	je	.L8423
	cmpw	$58, %dx
	je	.L8423
	cmpw	$134, %dx
	je	.L8423
	cmpw	$56, %dx
	je	.L8423
	cmpw	$140, %dx
	je	.L8423
.L8425:
	movl	-192(%rbp), %eax
	testl	%eax, %eax
	jne	.L8397
	movq	-6312(%rbp), %r9
	movzwl	(%r9), %edx
	leal	-67(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L8427
	cmpw	$54, %dx
	je	.L8427
	cmpw	$55, %dx
	je	.L8427
	cmpw	$58, %dx
	je	.L8427
	cmpw	$134, %dx
	je	.L8427
	cmpw	$56, %dx
	je	.L8427
	cmpw	$140, %dx
	je	.L8427
.L8397:
	cmpl	$1, %r13d
	jbe	.L8430
.L8481:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23224
.L8437:
	movslq	%ecx,%rbx
	movzbl	mode_size(%rbx), %esi
	cmpl	%r13d, %esi
	cmovae	-6316(%rbp), %ecx
	movl	%ecx, -6316(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L8437
.L23224:
	movl	-6316(%rbp), %eax
	testl	%eax, %eax
	je	.L8430
	movslq	-6316(%rbp),%r15
	movq	%r15, %r13
	salq	$4, %r13
	addq	optab_table+240(%rip), %r13
	movl	8(%r13), %ebx
	cmpl	$1317, %ebx
	je	.L8439
	movl	-6316(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L8439
	movzbq	mode_size(%r15), %rdx
	movslq	%ebx,%r11
	movq	$0, -6328(%rbp)
	leaq	(%r11,%r11,4), %r10
	cmpq	%rdx, -160(%rbp)
	movq	insn_data+16(,%r10,8), %r12
	movq	%rdx, -5912(%rbp)
	movq	%r12, -2776(%rbp)
	leaq	-208(%rbp), %r12
	jb	.L8439
	movl	-144(%rbp), %ecx
.L8479:
	testl	%ecx, %ecx
	je	.L8443
	subq	%rdx, 56(%r12)
.L8443:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L8444
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L8445
	movl	-6316(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24562:
	movq	%rax, -6328(%rbp)
.L8444:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L8447
	movq	24(%r12), %rdi
	movl	-6316(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24563:
	cmpq	$0, (%r12)
	movq	%rax, %r13
	jne	.L27342
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L8453
	movzbl	mode_size(%r15), %edi
	leal	7(%rdi), %edx
	andl	$-8, %edx
.L8454:
	movq	cfun(%rip), %rbx
	andl	$33554432, %esi
	movq	16(%rbx), %r9
	leaq	8(%r9), %rdi
	movl	8(%r9), %ecx
	je	.L8455
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24564:
	movq	%r15, %rsi
	leal	(%rax,%rcx), %r10d
	salq	$4, %rsi
	movl	%r10d, (%rdi)
	addq	optab_table+384(%rip), %rsi
	movl	8(%rsi), %eax
	cmpl	$1317, %eax
	je	.L8457
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rcx
	movq	insn_data+24(,%rcx,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L8458
	movq	%r13, %rdi
	movl	-6316(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L27343
.L8458:
	leaq	(%rbx,%rbx,4), %r11
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r11,8)
.L24565:
	movq	%rax, %rdi
	call	emit_insn
.L8477:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L8478
	movq	-5912(%rbp), %r13
	addq	%r13, 56(%r12)
.L8478:
	movq	48(%r12), %rbx
	movq	-5912(%rbp), %rdx
	subq	-5912(%rbp), %rbx
	cmpq	%rdx, %rbx
	movq	%rbx, 48(%r12)
	jae	.L8479
.L8439:
	movzbl	mode_size(%r15), %r13d
	cmpl	$1, %r13d
	ja	.L8481
.L8430:
	cmpq	$0, -160(%rbp)
	je	.L8499
	jmp	.L25518
.L27343:
	movl	-6316(%rbp), %edi
	movq	%r13, %rsi
	call	force_reg
	movq	%rax, %r13
	jmp	.L8458
.L8457:
	movzbl	mode_size(%r15), %edi
	cmpl	%edx, %edi
	je	.L27344
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r9b
	movzbl	%r9b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r8b
	movzbl	%r8b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L8465:
	movl	-6316(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%esi, %esi
	testq	%rsi, %rsi
	movq	%rax, %rbx
	je	.L8474
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L27345
.L8474:
	movq	%rbx, %rdi
	movq	%r13, %rsi
	call	emit_move_insn
	jmp	.L8477
.L27345:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L8474
.L27344:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L8465
.L8455:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24564
.L8453:
	movzbl	mode_size(%r15), %r8d
	leal	1(%r8), %edx
	andl	$-2, %edx
	jmp	.L8454
.L27342:
	movq	%rax, %rsi
	movq	-6328(%rbp), %rdi
	xorl	%eax, %eax
	call	*-2776(%rbp)
	jmp	.L24565
.L8447:
	movq	24(%r12), %rdi
	movl	-6316(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24563
.L8445:
	movl	-6316(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24562
.L8427:
	movq	-6312(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -200(%rbp)
	jmp	.L8397
.L8423:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -176(%rbp)
	jmp	.L8425
.L8395:
	movl	$1, %ecx
	jmp	.L8394
.L8392:
	movl	$1, %edx
	jmp	.L8391
.L8390:
	movl	$1, %ecx
	jmp	.L8389
.L8384:
	cmpq	$2, %r13
	ja	.L8368
	jmp	.L8385
.L8360:
	movq	-6280(%rbp), %r11
	xorl	%esi, %esi
	movq	8(%r11), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-6280(%rbp), %r8
	movq	%rax, %r12
	movq	16(%r8), %rdi
	call	protect_from_queue
	movq	-6280(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L27346
.L8362:
	movq	-6280(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -6304(%rbp)
	movq	%r12, 8(%rax)
	movq	-6304(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L8355
.L27346:
	cmpq	16(%rcx), %rax
	jne	.L8362
	jmp	.L8355
.L27320:
	cmpb	$51, 2(%rdx)
	je	.L8353
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L27347
.L8353:
	cmpl	$66, %eax
	jne	.L8356
	movq	-6280(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	movq	-6280(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L8355
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -6304(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L8355
.L27347:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L8354
	movq	-6280(%rbp), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -6304(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L8355
.L8354:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24561:
	movq	%rax, -6304(%rbp)
	jmp	.L8355
.L8352:
	movq	-6280(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L27348
	movq	-6280(%rbp), %rbx
	movq	24(%rbx), %r9
	testq	%r9, %r9
	movq	%r9, -6304(%rbp)
	jne	.L8355
	movq	-6280(%rbp), %rsi
	movq	8(%rsi), %r12
	movzbl	2(%r12), %edi
	call	gen_reg_rtx
	movq	-6280(%rbp), %r13
	movq	%rax, %rdi
	movq	8(%r13), %rsi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rdx
	movq	%rdx, -6304(%rbp)
	jmp	.L8355
.L27348:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24561
.L8347:
	movq	-6432(%rbp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-6432(%rbp), %r11
	movq	%rax, %r12
	movq	16(%r11), %rdi
	call	protect_from_queue
	movq	-6432(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L27349
.L8349:
	movq	-6432(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -6296(%rbp)
	movq	%r12, 8(%rax)
	movq	-6296(%rbp), %r9
	movq	%rbx, 16(%r9)
	jmp	.L8342
.L27349:
	cmpq	16(%rcx), %rax
	jne	.L8349
	jmp	.L8342
.L27319:
	cmpb	$51, 2(%rdx)
	je	.L8340
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L27350
.L8340:
	cmpl	$66, %eax
	jne	.L8343
	movq	-6432(%rbp), %r8
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	call	protect_from_queue
	movq	-6432(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L8342
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -6296(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L8342
.L27350:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L8341
	movq	-6432(%rbp), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -6296(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L8342
.L8341:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24560:
	movq	%rax, -6296(%rbp)
	jmp	.L8342
.L8339:
	movq	-6432(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L27351
	movq	-6432(%rbp), %r12
	movq	24(%r12), %rbx
	testq	%rbx, %rbx
	movq	%rbx, -6296(%rbp)
	jne	.L8342
	movq	-6432(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	-6432(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r13
	movq	%r13, -6296(%rbp)
	jmp	.L8342
.L27351:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24560
.L8334:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L27352
.L8336:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -6288(%rbp)
	movq	%r12, 8(%rax)
	movq	-6288(%rbp), %rcx
	movq	%rbx, 16(%rcx)
	jmp	.L8329
.L27352:
	cmpq	16(%r14), %rax
	jne	.L8336
	jmp	.L8329
.L27318:
	jne	.L8330
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L8329
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -6288(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L8329
.L8326:
	testq	%rsi, %rsi
	je	.L27353
	movq	24(%r14), %rdi
	testq	%rdi, %rdi
	movq	%rdi, -6288(%rbp)
	jne	.L8329
	movq	8(%r14), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rax
.L24559:
	movq	%rax, -6288(%rbp)
	jmp	.L8329
.L27353:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L24559
.L8319:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L8315
	movl	32(%rsi), %r15d
	jmp	.L8315
.L8318:
	cmpl	$7, %edx
	ja	.L8314
	jmp	.L8319
.L27317:
	movq	-6248(%rbp), %rax
	movslq	32(%r13),%rsi
	cmpq	%rsi, 8(%rax)
	jge	.L8114
	movq	-6432(%rbp), %r9
	movq	%r14, -6232(%rbp)
	movl	$8, %edx
	movq	%r9, -6240(%rbp)
	movq	16(%r14), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L8118
	movl	32(%rax), %edx
.L8118:
	movq	-6432(%rbp), %r10
	movq	16(%r10), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L8119
	cmpl	32(%rax), %edx
	jb	.L8120
.L8115:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L8116
	movl	32(%rcx), %r15d
.L8116:
	cmpb	$51, 2(%r14)
	jne	.L25547
	movq	-6432(%rbp), %rcx
	cmpb	$51, 2(%rcx)
	jne	.L25546
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L8127
	cmpl	$66, %eax
	je	.L27354
.L8131:
	cmpl	$75, %eax
	je	.L8135
	cmpl	$78, %eax
	je	.L8135
.L8130:
	movq	-6432(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L8140
	cmpl	$66, %eax
	je	.L27355
.L8144:
	cmpl	$75, %eax
	je	.L8148
	cmpl	$78, %eax
	je	.L8148
.L8143:
	movq	-6248(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L8153
	cmpl	$66, %eax
	je	.L27356
.L8157:
	cmpl	$75, %eax
	je	.L8161
	cmpl	$78, %eax
	je	.L8161
.L8156:
	movq	-6232(%rbp), %rdx
	cmpw	$66, (%rdx)
	jne	.L25545
	movq	-6240(%rbp), %rdi
	cmpw	$66, (%rdi)
	jne	.L25544
	cmpq	$0, -6248(%rbp)
	je	.L25543
	movq	-6248(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L27357
.L8169:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -2744(%rbp)
	testl	%r12d, %r12d
	je	.L23213
.L8302:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L8288
	movq	-6248(%rbp), %rsi
	cmpw	$54, (%rsi)
	je	.L27358
.L8292:
	testb	$2, target_flags+3(%rip)
	je	.L8293
	cmpw	$63, mode_bitsize(%r15,%r15)
.L24558:
	jbe	.L8288
.L8291:
	movslq	%edx,%r11
	leaq	(%r11,%r11,4), %r8
	movq	%r11, -2752(%rbp)
	movq	insn_data+24(,%r8,8), %r13
	movq	(%r13), %rax
	testq	%rax, %rax
	je	.L8295
	movq	-6232(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L8288
.L8295:
	movq	24(%r13), %rax
	testq	%rax, %rax
	jne	.L27359
.L8296:
	movq	72(%r13), %rax
	testq	%rax, %rax
	je	.L8297
	xorl	%esi, %esi
	movq	-2744(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L8288
.L8297:
	call	get_last_insn
	movl	$1, %edx
	movq	-6248(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -2760(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r13), %rax
	testq	%rax, %rax
	jne	.L27360
.L8298:
	movq	-2752(%rbp), %rdx
	movq	-6232(%rbp), %rdi
	xorl	%eax, %eax
	movq	-6240(%rbp), %rsi
	movq	-2744(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24462
	movq	-2760(%rbp), %rdi
	call	delete_insns_since
.L8288:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L8302
.L23213:
	testb	$2, target_flags+3(%rip)
	movq	-6232(%rbp), %rcx
	movl	$0, volatile_ok(%rip)
	setne	%r13b
	movq	8(%rcx), %rsi
	movzbl	%r13b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testb	$2, target_flags+3(%rip)
	setne	%bl
	movq	%rax, %r13
	movq	-6240(%rbp), %rax
	movq	8(%rax), %rsi
	movzbl	%bl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-6248(%rbp), %rsi
	movq	sizetype_tab(%rip), %r9
	movq	%rax, %rbx
	movzbl	61(%r9), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r15
	je	.L27361
.L8311:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r13, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r15, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %rbx
	movq	8(%rdx), %rdi
	movq	(%rbx), %r9
	movq	$0, (%r9)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %r15
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r15), %r11
	movq	8(%r11), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r13)
	je	.L8089
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r13, %rdx
	jmp	.L24581
.L27361:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r8
	orb	$1, 49(%r8)
	movq	fn.1(%rip), %r10
	orb	$8, 18(%r10)
	movq	fn.1(%rip), %rsi
	orb	$64, 50(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L8311
.L27360:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L8298
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L8298
.L27359:
	movq	-6240(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L8288
	jmp	.L8296
.L8293:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L24558
.L27358:
	movq	mode_mask_array(,%r15,8), %r10
	shrq	$1, %r10
	cmpq	%r10, 8(%rsi)
	jbe	.L8291
	jmp	.L8292
.L27357:
	movq	8(%rcx), %r12
	xorl	%r13d, %r13d
	movl	$17, %esi
.L8182:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23202
.L8179:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L8179
.L23202:
	testl	%edi, %edi
	je	.L8172
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L8181
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	jb	.L8181
	movzbq	mode_size(%rbx), %r9
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r9
	addq	%rax, %r13
	movq	%rdx, %r12
.L8181:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L8182
.L8172:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L8185
	movq	ix86_cost(%rip), %rdx
	mov	40(%rdx), %r10d
	cmpq	%r10, %r13
	jae	.L8169
.L8186:
	movq	-6248(%rbp), %r8
	movq	-6240(%rbp), %rsi
	movq	-6232(%rbp), %rbx
	movq	-6232(%rbp), %rdi
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r13b
	movq	8(%rsi), %r8
	movq	$0, -72(%rbp)
	movl	$0, -6260(%rbp)
	movq	%r8, -96(%rbp)
	movzbl	%r13b, %ecx
	movq	8(%rbx), %r11
	movq	%rdi, -128(%rbp)
	leal	5(,%rcx,4), %r13d
	xorl	%ecx, %ecx
	movq	%r11, -6256(%rbp)
	movq	-6256(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L8191
	cmpw	$99, %dx
	je	.L8191
	cmpw	$98, %dx
	je	.L8191
.L8190:
	movq	-6256(%rbp), %r9
	movl	%ecx, -112(%rbp)
	xorl	%edx, %edx
	movzwl	(%r9), %eax
	cmpw	$96, %ax
	je	.L8193
	cmpw	$98, %ax
	je	.L8193
.L8192:
	movl	%edx, -64(%rbp)
	movq	-6256(%rbp), %r15
	xorl	%ecx, %ecx
	movq	-6240(%rbp), %rdx
	movq	%r15, -120(%rbp)
	movq	%rdx, -104(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L8196
	cmpw	$99, %dx
	je	.L8196
	cmpw	$98, %dx
	je	.L8196
.L8195:
	movl	-64(%rbp), %eax
	movl	%ecx, -88(%rbp)
	movl	$0, -84(%rbp)
	movl	$0, -108(%rbp)
	testl	%eax, %eax
	je	.L8197
	movq	%r12, -72(%rbp)
.L8197:
	movl	-88(%rbp), %eax
	movq	%r12, -80(%rbp)
	testl	%eax, %eax
	je	.L8199
	movl	-112(%rbp), %eax
	testl	%eax, %eax
	jne	.L8198
.L8199:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L8212:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23205
.L8209:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L8209
.L23205:
	testl	%edi, %edi
	je	.L8202
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L8211
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L8211
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r15
	movq	%rdx, %r12
.L8211:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L8212
.L8202:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, %r15
	jbe	.L8198
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23207
.L8220:
	movslq	%ecx,%r10
	movzbl	mode_size(%r10), %edx
	cmpl	%r13d, %edx
	cmovae	-6260(%rbp), %ecx
	movl	%ecx, -6260(%rbp)
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L8220
.L23207:
	movl	-88(%rbp), %eax
	testl	%eax, %eax
	jne	.L8226
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L8224
	cmpw	$54, %dx
	je	.L8224
	cmpw	$55, %dx
	je	.L8224
	cmpw	$58, %dx
	je	.L8224
	cmpw	$134, %dx
	je	.L8224
	cmpw	$56, %dx
	je	.L8224
	cmpw	$140, %dx
	je	.L8224
.L8226:
	movl	-112(%rbp), %r8d
	testl	%r8d, %r8d
	jne	.L8198
	movq	-6256(%rbp), %rbx
	movzwl	(%rbx), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L8228
	cmpw	$54, %dx
	je	.L8228
	cmpw	$55, %dx
	je	.L8228
	cmpw	$58, %dx
	je	.L8228
	cmpw	$134, %dx
	je	.L8228
	cmpw	$56, %dx
	je	.L8228
	cmpw	$140, %dx
	je	.L8228
.L8198:
	cmpl	$1, %r13d
	jbe	.L8231
.L8282:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23210
.L8238:
	movslq	%ecx,%rdi
	movzbl	mode_size(%rdi), %r12d
	cmpl	%r13d, %r12d
	cmovae	-6260(%rbp), %ecx
	movl	%ecx, -6260(%rbp)
	movzbl	mode_wider_mode(%rdi), %ecx
	testl	%ecx, %ecx
	jne	.L8238
.L23210:
	movl	-6260(%rbp), %r13d
	testl	%r13d, %r13d
	je	.L8231
	movslq	-6260(%rbp),%r15
	movq	%r15, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	movl	8(%rcx), %ebx
	cmpl	$1317, %ebx
	je	.L8240
	movl	-6260(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r9d
	cmpl	%eax, %r9d
	jb	.L8240
	movslq	%ebx,%rdx
	leaq	-128(%rbp), %r12
	movq	$0, -6272(%rbp)
	leaq	(%rdx,%rdx,4), %r10
	movzbq	mode_size(%r15), %rdx
	cmpq	%rdx, -80(%rbp)
	movq	insn_data+16(,%r10,8), %rsi
	movq	%rdx, -5904(%rbp)
	movq	%rsi, -2736(%rbp)
	jb	.L8240
	movl	-64(%rbp), %ecx
.L8280:
	testl	%ecx, %ecx
	je	.L8244
	subq	%rdx, 56(%r12)
.L8244:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L8245
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L8246
	movl	-6260(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24554:
	movq	%rax, -6272(%rbp)
.L8245:
	movl	40(%r12), %r8d
	testl	%r8d, %r8d
	je	.L8248
	movq	24(%r12), %rdi
	movl	-6260(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24555:
	cmpq	$0, (%r12)
	movq	%rax, %r13
	jne	.L27362
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L8254
	movzbl	mode_size(%r15), %r11d
	leal	7(%r11), %edx
	andl	$-8, %edx
.L8255:
	movq	cfun(%rip), %rdi
	andl	$33554432, %esi
	movq	16(%rdi), %r9
	leaq	8(%r9), %rdi
	movl	8(%r9), %ecx
	je	.L8256
	movzbl	mode_size(%r15), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24556:
	leal	(%rax,%rcx), %esi
	movq	%r15, %rcx
	salq	$4, %rcx
	movl	%esi, (%rdi)
	addq	optab_table+384(%rip), %rcx
	movl	8(%rcx), %eax
	cmpl	$1317, %eax
	je	.L8258
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rdx
	movq	insn_data+24(,%rdx,8), %r10
	movq	(%r10), %rax
	testq	%rax, %rax
	je	.L8259
	movq	%r13, %rdi
	movl	-6260(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L27363
.L8259:
	leaq	(%rbx,%rbx,4), %r8
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r8,8)
.L24557:
	movq	%rax, %rdi
	call	emit_insn
.L8278:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L8279
	movq	-5904(%rbp), %r13
	addq	%r13, 56(%r12)
.L8279:
	movq	48(%r12), %rsi
	movq	-5904(%rbp), %rdx
	subq	-5904(%rbp), %rsi
	cmpq	%rdx, %rsi
	movq	%rsi, 48(%r12)
	jae	.L8280
.L8240:
	movzbl	mode_size(%r15), %r13d
	cmpl	$1, %r13d
	ja	.L8282
.L8231:
	cmpq	$0, -80(%rbp)
	jmp	.L25559
.L27363:
	movl	-6260(%rbp), %edi
	movq	%r13, %rsi
	call	force_reg
	movq	%rax, %r13
	jmp	.L8259
.L8258:
	movzbl	mode_size(%r15), %r11d
	cmpl	%edx, %r11d
	je	.L27364
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r9b
	movzbl	%r9b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L8266:
	movl	-6260(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%edi, %edi
	testq	%rdi, %rdi
	movq	%rax, %rbx
	je	.L8275
	xorl	%esi, %esi
	movq	%rax, %rdi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %ecx
	testl	%ecx, %ecx
	jne	.L27365
.L8275:
	movq	%rbx, %rdi
	movq	%r13, %rsi
	call	emit_move_insn
	jmp	.L8278
.L27365:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L8275
.L27364:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L8266
.L8256:
	movzbl	mode_size(%r15), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24556
.L8254:
	movzbl	mode_size(%r15), %ebx
	leal	1(%rbx), %edx
	andl	$-2, %edx
	jmp	.L8255
.L27362:
	movq	%rax, %rsi
	movq	-6272(%rbp), %rdi
	xorl	%eax, %eax
	call	*-2736(%rbp)
	jmp	.L24557
.L8248:
	movq	24(%r12), %rdi
	movl	-6260(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24555
.L8246:
	movl	-6260(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24554
.L8228:
	movq	-6256(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -120(%rbp)
	jmp	.L8198
.L8224:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -96(%rbp)
	jmp	.L8226
.L8196:
	movl	$1, %ecx
	jmp	.L8195
.L8193:
	movl	$1, %edx
	jmp	.L8192
.L8191:
	movl	$1, %ecx
	jmp	.L8190
.L8185:
	cmpq	$2, %r13
	ja	.L8169
	jmp	.L8186
.L8161:
	movq	-6248(%rbp), %r13
	xorl	%esi, %esi
	movq	8(%r13), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-6248(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-6248(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L27366
.L8163:
	movq	-6248(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -6248(%rbp)
	movq	%r12, 8(%rax)
	movq	-6248(%rbp), %r8
	movq	%rbx, 16(%r8)
	jmp	.L8156
.L27366:
	cmpq	16(%rcx), %rax
	jne	.L8163
	jmp	.L8156
.L27356:
	cmpb	$51, 2(%rdx)
	je	.L8154
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L27367
.L8154:
	cmpl	$66, %eax
	jne	.L8157
	movq	-6248(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	movq	-6248(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L8156
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -6248(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L8156
.L27367:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L8155
	movq	-6248(%rbp), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -6248(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L8156
.L8155:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24553:
	movq	%rax, -6248(%rbp)
	jmp	.L8156
.L8153:
	movq	-6248(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L27368
	movq	-6248(%rbp), %rsi
	movq	24(%rsi), %rax
	testq	%rax, %rax
	jne	.L24553
	movq	-6248(%rbp), %r10
	movq	8(%r10), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	-6248(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rax
	movq	%rax, -6248(%rbp)
	jmp	.L8156
.L27368:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24553
.L8148:
	movq	-6432(%rbp), %r8
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-6432(%rbp), %r13
	movq	%rax, %r12
	movq	16(%r13), %rdi
	call	protect_from_queue
	movq	-6432(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L27369
.L8150:
	movq	-6432(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -6240(%rbp)
	movq	%r12, 8(%rax)
	movq	-6240(%rbp), %rax
	movq	%rbx, 16(%rax)
	jmp	.L8143
.L27369:
	cmpq	16(%rcx), %rax
	jne	.L8150
	jmp	.L8143
.L27355:
	cmpb	$51, 2(%rdx)
	je	.L8141
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L27370
.L8141:
	cmpl	$66, %eax
	jne	.L8144
	movq	-6432(%rbp), %r12
	xorl	%esi, %esi
	movq	8(%r12), %rdi
	call	protect_from_queue
	movq	-6432(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L8143
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -6240(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L8143
.L27370:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L8142
	movq	-6432(%rbp), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -6240(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L8143
.L8142:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24552:
	movq	%rax, -6240(%rbp)
	jmp	.L8143
.L8140:
	movq	-6432(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L27371
	movq	-6432(%rbp), %r9
	movq	24(%r9), %rsi
	testq	%rsi, %rsi
	movq	%rsi, -6240(%rbp)
	jne	.L8143
	movq	-6432(%rbp), %rdi
	movq	8(%rdi), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	-6432(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r10
	movq	%r10, -6240(%rbp)
	jmp	.L8143
.L27371:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24552
.L8135:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L27372
.L8137:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -6232(%rbp)
	movq	%r12, 8(%rax)
	movq	-6232(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L8130
.L27372:
	cmpq	16(%r14), %rax
	jne	.L8137
	jmp	.L8130
.L27354:
	jne	.L8131
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L8130
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, -6232(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L8130
.L8127:
	testq	%rsi, %rsi
	je	.L27373
	movq	24(%r14), %rdx
	testq	%rdx, %rdx
	movq	%rdx, -6232(%rbp)
	jne	.L8130
	movq	8(%r14), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rax
.L24551:
	movq	%rax, -6232(%rbp)
	jmp	.L8130
.L27373:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L24551
.L8120:
	testq	%rsi, %rsi
	movl	$8, %r15d
	je	.L8116
	movl	32(%rsi), %r15d
	jmp	.L8116
.L8119:
	cmpl	$7, %edx
	ja	.L8115
	jmp	.L8120
.L8104:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L27374
.L8106:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L8099
.L27374:
	cmpq	16(%r14), %rax
	jne	.L8106
	jmp	.L8099
.L27287:
	jne	.L8100
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L8099
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%rbx, 8(%rax)
	jmp	.L8099
.L8096:
	cmpq	$0, 16(%r14)
	je	.L27375
	movq	24(%r14), %rax
	testq	%rax, %rax
	je	.L8108
.L24550:
	movq	%rax, %r14
	jmp	.L8099
.L8108:
	movq	8(%r14), %r12
	movzbl	2(%r12), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L8099
.L27375:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L24550
.L27286:
	movq	144(%r13), %rax
	testq	%rax, %rax
	je	.L8091
	cmpq	%rax, %r14
	jne	.L8091
	jmp	.L8089
.L27285:
	movq	%r14, %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L8089
	jmp	.L8090
	.p2align 6,,7
.L8088:
	movq	-6432(%rbp), %rdx
	cmpb	$0, 2(%rdx)
	jne	.L8087
	cmpb	$0, 16(%r13)
	je	.L8087
	movq	8(%r13), %rdx
	movzbl	2(%r14), %edi
	movzbl	61(%rdx), %ebx
	shrb	$1, %bl
	movzbl	%bl, %esi
	cmpl	%esi, %edi
	je	.L8087
	movzbl	17(%rdx), %ecx
	movq	-6432(%rbp), %rdx
	shrb	$5, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, -6432(%rbp)
	jmp	.L8087
.L24279:
	movq	-6432(%rbp), %rsi
	movzwl	(%rsi), %edx
	jmp	.L8010
.L27284:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	%r13, %rdi
	movzbl	2(%r14), %edx
	movq	%rax, %rsi
	jmp	.L24549
	.p2align 6,,7
.L8049:
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L24280
	movl	(%r14), %ecx
	movl	%ecx, %r11d
	andl	$134283263, %r11d
	cmpl	$66, %r11d
	je	.L27376
.L8065:
	andl	$268500991, %ecx
	cmpl	$268435519, %ecx
	je	.L27377
	movzbl	2(%r14), %edx
	xorl	%ecx, %ecx
	movq	%r13, %rdi
	movq	%r14, %rsi
	call	expand_expr
	cmpw	$61, (%r14)
	movq	%rax, -6432(%rbp)
	je	.L27378
.L8085:
	movl	(%r14), %eax
	andl	$134283263, %eax
	cmpl	$134217794, %eax
	je	.L24283
	movq	-6432(%rbp), %rdi
	movq	%r14, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L24284
	movq	-6432(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L8086
	cmpw	$54, %dx
	je	.L8086
	cmpw	$55, %dx
	je	.L8086
	cmpw	$58, %dx
	je	.L8086
	cmpw	$134, %dx
	je	.L8086
	cmpw	$56, %dx
	je	.L8086
	cmpw	$140, %dx
	je	.L8086
	xorl	%r8d, %r8d
	testl	%r8d, %r8d
	je	.L8010
.L8086:
	movl	$1, -6224(%rbp)
	jmp	.L8010
.L24283:
	movq	-6432(%rbp), %r10
	movzwl	(%r10), %edx
	jmp	.L8010
.L27378:
	cmpl	$52, 8(%r14)
	ja	.L8085
.L24282:
	movq	-6432(%rbp), %r9
	movzwl	(%r9), %edx
	jmp	.L8010
	.p2align 6,,7
.L27377:
	xorl	%r12d, %r12d
	xorl	%edx, %edx
	testl	%r12d, %r12d
	jne	.L8071
	movq	8(%r13), %rsi
	movzbl	16(%rsi), %eax
	cmpb	$6, %al
	je	.L8072
	cmpb	$10, %al
	je	.L8072
	cmpb	$11, %al
	je	.L8072
	cmpb	$12, %al
	je	.L8072
.L8071:
	movq	%rdx, %rsi
	xorl	%ecx, %ecx
	movq	%r13, %rdi
	xorl	%edx, %edx
	call	expand_expr
	movzwl	(%rax), %edx
	movq	%rax, %rbx
	cmpw	$66, %dx
	je	.L27379
.L8074:
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L8077
	cmpw	$54, %dx
	je	.L8077
	cmpw	$55, %dx
	je	.L8077
	cmpw	$58, %dx
	je	.L8077
	cmpw	$134, %dx
	je	.L8077
	cmpw	$56, %dx
	je	.L8077
	cmpw	$140, %dx
	je	.L8077
.L8076:
	movzbl	3(%r14), %edx
	movq	8(%r14), %rdi
	movq	%rbx, %rsi
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L8000
	movzbl	2(%rbx), %edx
	movzbl	2(%r14), %eax
	cmpb	%al, %dl
	je	.L8000
	testb	%dl, %dl
	je	.L8079
	movq	%rbx, %rsi
	movzbl	%al, %edi
	call	gen_lowpart_SUBREG
	movzbl	3(%rax), %ebx
	orb	$16, %bl
	movb	%bl, 3(%rax)
	andb	$-5, %bl
	movzbl	3(%r14), %r11d
	andb	$4, %r11b
	orb	%r11b, %bl
	movb	%bl, 3(%rax)
	jmp	.L8000
.L8079:
	movq	8(%r14), %r12
	movzbl	3(%r14), %ecx
	movzbl	%al, %edi
	movq	%rbx, %rdx
	movzbl	2(%r12), %esi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	jmp	.L8000
	.p2align 6,,7
.L8077:
	cmpb	$0, 2(%rbx)
	jne	.L8076
	movq	8(%r13), %rcx
	movzbl	2(%r14), %edi
	movzbl	61(%rcx), %edx
	movzbl	3(%r14), %ecx
	shrb	$1, %dl
	shrb	$2, %cl
	movzbl	%dl, %esi
	andl	$1, %ecx
	movq	%rbx, %rdx
	call	convert_modes
	movzbl	3(%r14), %ecx
	movzbl	2(%r14), %esi
	movq	8(%r14), %r13
	movq	%rax, %rdx
	movzbl	2(%r13), %edi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, %rbx
	jmp	.L8076
.L27379:
	xorl	%r9d, %r9d
	testl	%r9d, %r9d
	je	.L8074
	testb	$8, 3(%rax)
	jne	.L8075
	movq	8(%r14), %rdi
	movq	8(%rax), %rsi
	call	reg_mentioned_p
	testl	%eax, %eax
	je	.L24281
.L8075:
	movq	%rbx, %rdi
	call	copy_to_reg
	movq	%rax, %rbx
.L24281:
	movzwl	(%rbx), %edx
	jmp	.L8074
.L8072:
	cmpq	$0, 8(%rsi)
	jne	.L8071
	movzbl	3(%r14), %ecx
	movzbl	17(%rsi), %r15d
	movl	$1, %edi
	movl	%ecx, %r8d
	shrb	$5, %r15b
	shrb	$2, %r8b
	andl	$1, %r15d
	andl	%r8d, %edi
	cmpl	%edi, %r15d
	je	.L8073
	call	signed_or_unsigned_type
	movq	%r13, %rsi
	movq	%rax, %rdi
	call	convert
	movzbl	3(%r14), %ecx
	movq	%rax, %r13
.L8073:
	movq	8(%r14), %rsi
	shrb	$2, %cl
	movzbl	2(%rsi), %edi
	movl	$1, %esi
	andl	%ecx, %esi
	call	type_for_mode
	movq	%r13, %rsi
	movq	%rax, %rdi
	call	convert
	movq	8(%r14), %rdx
	movq	%rax, %r13
	jmp	.L8071
.L27376:
	movzbl	2(%r14), %eax
	cmpb	$51, %al
	je	.L8065
	movzbl	%al, %edx
	xorl	%ecx, %ecx
	movq	%r13, %rdi
	movq	%r14, %rsi
	call	expand_expr
	movq	%rax, -6432(%rbp)
	movq	%rax, %rdx
	movzbl	2(%rax), %eax
	cmpb	$51, %al
	je	.L8066
	testb	%al, %al
	je	.L8066
	cmpq	%r14, %rdx
	je	.L8068
	movq	%rdx, %rdi
	movq	%r14, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L27380
.L8067:
	movq	-6432(%rbp), %rdi
	call	copy_to_reg
	movq	%rax, -6432(%rbp)
.L8066:
	movl	$1, -6224(%rbp)
	jmp	.L24282
.L27380:
	movq	-6432(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L8067
	movq	%r14, %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L8067
.L8068:
	movl	$1, %r12d
	jmp	.L8067
	.p2align 6,,7
.L24280:
	movl	(%r14), %ecx
	jmp	.L8065
.L8058:
	movl	$1, %ebx
	jmp	.L8052
	.p2align 6,,7
.L8059:
	xorl	%ebx, %ebx
	jmp	.L8052
.L8056:
	movq	8(%r14), %rdi
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L8058
	movq	16(%r14), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L8052
	jmp	.L8058
	.p2align 6,,7
.L27283:
	cmpb	$51, 2(%r14)
	jne	.L8011
	call	gen_label_rtx
	movq	%rax, %r15
	call	gen_label_rtx
	movq	cfun(%rip), %r9
	movq	%rax, -2728(%rbp)
	movq	16(%r9), %rsi
	movq	40(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L23195
.L8017:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L27381
	call	emit_insn
	movq	%rax, 16(%rbx)
.L8016:
	movq	cfun(%rip), %r12
	movq	40(%rbx), %rdi
	movq	16(%r12), %r11
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%r11)
	jne	.L8017
.L23195:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L8019
	cmpl	$66, %eax
	je	.L27382
.L8023:
	cmpl	$75, %eax
	je	.L8027
	cmpl	$78, %eax
	je	.L8027
.L8022:
	call	do_pending_stack_adjust
	movq	cfun(%rip), %r9
	movq	16(%r9), %rsi
	incl	4(%rsi)
	movq	%r15, %rsi
	movq	32(%r13), %rdi
	call	jumpifnot
	call	start_cleanup_deferral
	movq	40(%r13), %rdi
	xorl	%edx, %edx
	movq	%r14, %rsi
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %rdx
	movq	16(%rdx), %r8
	movq	40(%r8), %rbx
	testq	%rbx, %rbx
	je	.L23197
.L8037:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L27383
	call	emit_insn
	movq	%rax, 16(%rbx)
.L8036:
	movq	cfun(%rip), %r12
	movq	40(%rbx), %rdi
	movq	16(%r12), %r11
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%r11)
	jne	.L8037
.L23197:
	movq	-2728(%rbp), %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r15, %rdi
	call	emit_label
	call	start_cleanup_deferral
	movq	48(%r13), %rdi
	movq	%r14, %rsi
	xorl	%edx, %edx
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %r14
	movq	16(%r14), %r13
	movq	40(%r13), %rbx
	testq	%rbx, %rbx
	je	.L23199
.L8044:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L27384
	call	emit_insn
	movq	%rax, 16(%rbx)
.L8043:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %rsi
	movq	16(%rdx), %r9
	testq	%rsi, %rsi
	movq	%rsi, %rbx
	movq	%rsi, 40(%r9)
	jne	.L8044
.L23199:
	movq	-2728(%rbp), %rdi
	call	emit_label
	movq	cfun(%rip), %r10
	movq	16(%r10), %rbx
	decl	4(%rbx)
	jmp	.L8000
.L27384:
	movq	8(%rdi), %r8
	movq	8(%r8), %r15
	movq	%r15, 16(%rbx)
	call	emit_insn
	jmp	.L8043
.L27383:
	movq	8(%rdi), %rcx
	movq	8(%rcx), %r10
	movq	%r10, 16(%rbx)
	call	emit_insn
	jmp	.L8036
.L8027:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L27385
.L8029:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L8022
.L27385:
	cmpq	16(%r14), %rax
	jne	.L8029
	jmp	.L8022
.L27382:
	jne	.L8023
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L8022
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%rbx, 8(%rax)
	jmp	.L8022
.L8019:
	cmpq	$0, 16(%r14)
	je	.L27386
	movq	24(%r14), %rax
	testq	%rax, %rax
	je	.L8031
.L24548:
	movq	%rax, %r14
	jmp	.L8022
.L8031:
	movq	8(%r14), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L8022
.L27386:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L24548
.L27381:
	movq	8(%rdi), %rcx
	movq	8(%rcx), %r10
	movq	%r10, 16(%rbx)
	call	emit_insn
	jmp	.L8016
	.p2align 6,,7
.L27282:
	movq	32(%r13), %rdi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	cfun(%rip), %rdi
	movq	16(%rdi), %r15
	movq	40(%r15), %rbx
	testq	%rbx, %rbx
	je	.L23193
.L8007:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L27387
	call	emit_insn
	movq	%rax, 16(%rbx)
.L8006:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %r12
	movq	16(%rdx), %r8
	testq	%r12, %r12
	movq	%r12, %rbx
	movq	%r12, 40(%r8)
	jne	.L8007
.L23193:
	movq	40(%r13), %rdi
	movq	%r14, %rsi
	xorl	%edx, %edx
	call	store_expr
	jmp	.L8000
.L27387:
	movq	8(%rdi), %r11
	movq	8(%r11), %rcx
	movq	%rcx, 16(%rbx)
	call	emit_insn
	jmp	.L8006
.L27281:
	movq	-9552(%rbp), %rbx
	movq	%r14, %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movq	32(%rbx), %rdi
	call	expand_expr
	jmp	.L8000
.L27280:
	movq	cfun(%rip), %r12
	movl	$3, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	movq	208(%r12), %rcx
	call	gen_rtx_fmt_ee
	movq	%rax, 208(%r12)
.L24277:
	movzwl	(%r14), %eax
	cmpw	$61, %ax
	jne	.L7998
	movzbl	2(%r14), %edx
	cmpl	-2716(%rbp), %edx
	je	.L7998
	movq	-9552(%rbp), %r9
	movl	-2716(%rbp), %edi
	movq	48(%r9), %rsi
	call	gen_lowpart_SUBREG
	movzbl	3(%rax), %r8d
	movq	%rax, %r14
	orb	$16, %r8b
	movb	%r8b, 3(%rax)
	andb	$-5, %r8b
	movzbl	-2516(%rbp), %esi
	andb	$1, %sil
	salb	$2, %sil
	orb	%sil, %r8b
	movb	%r8b, 3(%rax)
	jmp	.L7998
	.p2align 6,,7
.L7993:
	movq	-2712(%rbp), %rbx
	movl	$1, %esi
	xorl	%edx, %edx
	movzbl	17(%rbx), %ecx
	movzbl	62(%rbx), %r13d
	movl	%ecx, %r11d
	shrb	$5, %r13b
	shrb	$3, %cl
	shrb	$4, %r11b
	andl	$1, %ecx
	andl	$1, %r13d
	andl	%r11d, %esi
	addl	%ecx, %ecx
	sall	$2, %r13d
	orl	%ecx, %esi
	orl	%r13d, %esi
	cmpb	$20, 16(%rbx)
	je	.L27388
.L7996:
	leal	0(,%rdx,8), %r14d
	movq	-2712(%rbp), %rdi
	orl	%r14d, %esi
	orl	$1, %esi
	call	build_qualified_type
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	movl	$3, %esi
	call	assign_temp
	movq	%rax, %r14
	jmp	.L7994
.L27388:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %edx
	jmp	.L7996
.L27279:
	call	find_function_data
	movq	-9552(%rbp), %rsi
	movq	48(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L7991
	cmpw	$61, (%rbx)
	je	.L27389
.L7989:
	testq	%rbx, %rbx
	je	.L7991
	cmpw	$66, (%rbx)
	jne	.L7991
	movq	8(%rbx), %rdi
	movq	-9552(%rbp), %rsi
	call	fix_lexical_addr
	movq	%rbx, %rdi
	movq	%rax, %rsi
	jmp	.L25071
.L7991:
	movl	$.LC0, %edi
	movl	$6437, %esi
	jmp	.L25123
	.p2align 6,,7
.L27389:
	movq	%rsi, %rdi
	call	put_var_into_stack
	movq	-9552(%rbp), %r10
	movq	48(%r10), %rbx
	jmp	.L7989
.L7987:
	xorl	%edi, %edi
	jmp	.L7986
.L8908:
	movq	-9552(%rbp), %r11
	movq	%r13, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	movq	32(%r11), %rdi
	call	expand_expr
	movq	-9552(%rbp), %r12
	movq	%rax, %r13
	movq	32(%r12), %rdi
	call	unsave_expr_now
	movq	%rax, 32(%r12)
	jmp	.L7871
.L8963:
	movq	-9552(%rbp), %r15
	movq	32(%r15), %rdi
	testq	%rdi, %rdi
	je	.L8964
	cmpq	%rdx, %rdi
	je	.L27390
	call	emit_insns
	movq	-9552(%rbp), %rbx
	movq	const_int_rtx+512(%rip), %rsi
	movq	%rsi, 32(%rbx)
.L8964:
	movq	-9552(%rbp), %r12
	movq	40(%r12), %rdi
	call	preserve_rtl_expr_result
	movq	-9552(%rbp), %rdi
	call	free_temps_for_rtl_expr
	movq	-9552(%rbp), %r14
	movq	40(%r14), %r13
	jmp	.L7871
.L27390:
	movl	$.LC0, %edi
	movl	$6603, %esi
	jmp	.L25123
	.p2align 6,,7
.L22672:
	movq	-9552(%rbp), %r10
	movq	32(%r10), %rdi
	cmpb	$30, 16(%rdi)
	je	.L27391
.L22673:
	movzbl	16(%rdi), %eax
	testb	%al, %al
	je	.L25052
	cmpq	$0, cfun(%rip)
	jne	.L22697
	cmpb	$46, %al
	je	.L22698
	movzbl	%al, %r9d 
	cmpb	$99, tree_code_type(%r9)
	je	.L22698
.L22697:
	movq	-9552(%rbp), %rax
	movl	-6220(%rbp), %ecx
	xorl	%esi, %esi
	addq	$32, %rax
	testl	%ecx, %ecx
	je	.L22709
	movq	const_int_rtx+512(%rip), %rsi
.L22709:
	xorl	%ecx, %ecx
	movq	(%rax), %rdi
	cmpl	$3, %r14d
	sete	%cl
	xorl	%edx, %edx
	addl	$2, %ecx
	call	expand_expr
	movl	-6220(%rbp), %edi
	movq	%rax, %r15
	testl	%edi, %edi
	je	.L22712
	movq	%rax, %r13
	jmp	.L7871
.L22712:
	movzwl	(%rax), %eax
	cmpl	$71, %eax
	je	.L22713
	cmpl	$66, %eax
	je	.L27392
.L22717:
	cmpl	$75, %eax
	je	.L22721
	cmpl	$78, %eax
	je	.L22721
.L22716:
	movzwl	(%r15), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L22727
	cmpw	$54, %dx
	je	.L22727
	cmpw	$55, %dx
	je	.L22727
	cmpw	$58, %dx
	je	.L22727
	cmpw	$134, %dx
	je	.L22727
	cmpw	$56, %dx
	je	.L22727
	cmpw	$140, %dx
	je	.L22727
	cmpw	$61, %dx
	je	.L22730
	cmpw	$63, %dx
	je	.L22730
	cmpw	$65, %dx
	je	.L22730
	cmpw	$70, %dx
	je	.L22730
	cmpw	$39, %dx
	je	.L22730
.L22728:
	cmpw	$66, %dx
	jne	.L27393
	movq	%r15, %rdi
	call	mark_temp_addr_taken
	cmpl	$1, %r14d
	je	.L22829
	cmpl	$3, %r14d
	je	.L22829
	testq	%r13, %r13
	movq	8(%r15), %r12
	movq	$0, -9544(%rbp)
	je	.L23052
	movl	(%r13), %eax
	andl	$67174399, %eax
	cmpl	$61, %eax
	je	.L27394
.L23052:
	xorl	%ebx, %ebx
.L23054:
	movzwl	(%r12), %ecx
	leal	-75(%rcx), %r10d
	cmpw	$1, %r10w
	ja	.L23055
	movq	pic_offset_table_rtx(%rip), %rax
	cmpq	%rax, 8(%r12)
	je	.L27395
.L23055:
	cmpw	$75, %cx
	je	.L27396
	cmpw	$76, %cx
	je	.L27397
	cmpw	$78, %cx
	je	.L27398
.L23060:
	cmpq	$0, -9544(%rbp)
	je	.L23066
	movq	16(%r12), %r15
	movzwl	(%r15), %edx
	leal	-67(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L23067
	cmpw	$54, %dx
	je	.L23067
	cmpw	$55, %dx
	je	.L23067
	cmpw	$58, %dx
	je	.L23067
	cmpw	$134, %dx
	je	.L23067
	cmpw	$56, %dx
	je	.L23067
	cmpw	$140, %dx
	je	.L23067
	cmpw	$61, %dx
	je	.L27399
.L23068:
	xorl	%ebx, %ebx
.L23067:
	movq	-9544(%rbp), %r9
	cmpq	optab_table+16(%rip), %r9
	je	.L27400
.L23069:
	movq	-9544(%rbp), %r10
	cmpq	optab_table(%rip), %r10
	je	.L27401
.L23070:
	movq	8(%r12), %rdi
	movq	%rbx, %rsi
	call	force_operand
	movq	%r15, %rdi
	movq	%rax, %rbx
.L25044:
	xorl	%esi, %esi
	call	force_operand
	xorl	%r9d, %r9d
	movq	%r13, %r8
	movzbl	2(%r12), %edi
	movq	-9544(%rbp), %rsi
	movq	%rax, %rcx
	movq	%rbx, %rdx
	movl	$3, (%rsp)
	call	expand_binop
.L25045:
	movq	%rax, %rbx
.L23058:
	movq	%rbx, %r13
.L22694:
	movl	flag_force_addr(%rip), %r12d
	testl	%r12d, %r12d
	je	.L23072
	cmpw	$61, (%r13)
	je	.L23072
	cmpl	$2, %r14d
	je	.L23072
	cmpl	$3, %r14d
	je	.L23072
	decl	%r14d
	je	.L23072
	testb	$2, target_flags+3(%rip)
	movq	%r13, %rsi
	setne	%r14b
	movzbl	%r14b, %edi
	addl	$4, %edi
	call	force_reg
	movq	%rax, %r13
.L23072:
	movl	(%r13), %eax
	andl	$134283263, %eax
	cmpl	$61, %eax
	jne	.L7871
	movq	-2712(%rbp), %rdi
	movq	8(%rdi), %rcx
	movq	%r13, %rdi
	movl	64(%rcx), %esi
	jmp	.L25066
.L27401:
	cmpw	$54, (%r15)
	jne	.L23070
	movq	8(%r12), %rdx
	cmpw	$75, (%rdx)
	jne	.L23070
	movq	8(%rdx), %rax
	cmpw	$61, (%rax)
	jne	.L23070
	movl	8(%rax), %eax
	cmpl	$52, %eax
	jbe	.L23070
	cmpl	$57, %eax
	ja	.L23070
	movzbl	2(%r12), %edi
	movq	-9544(%rbp), %rsi
	movq	%rbx, %r8
	movl	$3, (%rsp)
	movq	%r15, %rcx
	xorl	%r9d, %r9d
	movq	8(%rdx), %rdx
	call	expand_binop
	movq	8(%r12), %rsi
	movq	%rax, %rbx
	movq	16(%rsi), %rdi
	jmp	.L25044
.L27400:
	cmpw	$54, %dx
	jne	.L23069
	movq	optab_table(%rip), %rdx
	movq	%r15, %rsi
	movq	%rdx, -9544(%rbp)
	movzbl	2(%r12), %edi
	call	negate_rtx
	movq	%rax, %r15
	jmp	.L23069
.L27399:
	cmpq	%rbx, %r15
	jne	.L23067
	jmp	.L23068
.L23066:
	cmpw	$63, %cx
	je	.L27402
.L23071:
	movq	%r12, %rbx
	jmp	.L23058
.L27402:
	movq	8(%r12), %rdi
	cmpw	$66, (%rdi)
	jne	.L23071
	movzbq	2(%rdi), %rax
	movzbq	2(%r12), %rbx
	movzbl	mode_size(%rax), %r13d
	cmpb	%r13b, mode_size(%rbx)
	jbe	.L23071
	xorl	%esi, %esi
	call	force_operand
	movq	8(%r12), %r11
	movq	%rax, %rsi
	movzbl	2(%r11), %edi
	call	force_reg
	movl	16(%r12), %ecx
	movq	8(%r12), %r15
	movzbl	2(%r12), %edi
	movq	%rax, %rsi
	movzbl	2(%r15), %edx
	call	simplify_gen_subreg
	movq	%rax, %r12
	jmp	.L23071
.L27398:
	movq	16(%r12), %r15
	movzwl	(%r15), %edx
	leal	-67(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L23064
	cmpw	$54, %dx
	je	.L23064
	cmpw	$55, %dx
	je	.L23064
	cmpw	$58, %dx
	je	.L23064
	cmpw	$134, %dx
	je	.L23064
	cmpw	$56, %dx
	je	.L23064
	cmpw	$140, %dx
	je	.L23064
	cmpw	$61, %dx
	je	.L27403
.L23065:
	xorl	%ebx, %ebx
.L23064:
	movq	8(%r12), %rdi
	movq	%rbx, %rsi
	call	force_operand
	xorl	%esi, %esi
	movq	%r15, %rdi
	movq	%rax, %rbx
	call	force_operand
	movl	$1, %r8d
	movzbl	2(%r12), %edi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movq	%r13, %rcx
	call	expand_mult
	jmp	.L25045
.L27403:
	cmpq	%rbx, %r15
	jne	.L23064
	jmp	.L23065
.L27397:
	movq	optab_table+16(%rip), %r11
	movq	%r11, -9544(%rbp)
	jmp	.L23060
.L27396:
	movq	optab_table(%rip), %r15
	movq	%r15, -9544(%rbp)
	jmp	.L23060
.L27395:
	movq	16(%r12), %rsi
	movzwl	(%rsi), %edx
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L23056
	cmpw	$58, %dx
	jne	.L23055
.L23056:
	testq	%rbx, %rbx
	je	.L27404
.L23057:
	movq	%rbx, %rdi
	movq	%r12, %rsi
	call	emit_move_insn
	jmp	.L23058
.L27404:
	movzbl	2(%r12), %edi
	call	gen_reg_rtx
	movq	%rax, %rbx
	jmp	.L23057
.L27394:
	cmpl	$52, 8(%r13)
	jbe	.L23052
	call	preserve_subexpressions_p
	movq	%r13, %rbx
	testl	%eax, %eax
	je	.L23054
	jmp	.L23052
	.p2align 6,,7
.L22829:
	movq	8(%r15), %r13
	jmp	.L7871
.L27393:
	movl	$.LC0, %edi
	movl	$8635, %esi
	jmp	.L25123
.L22730:
	movq	-9552(%rbp), %rdx
	movq	32(%rdx), %rdi
	cmpb	$118, 16(%rdi)
	je	.L27405
	movq	8(%rdi), %rbx
	movl	$1, %esi
	movl	$1, %edx
	movl	$1, %ecx
	movq	%rbx, %rdi
	call	assign_temp
	cmpw	$39, (%r15)
	movq	%rax, -5760(%rbp)
	je	.L27406
	movq	-5760(%rbp), %rdi
	movq	%r15, %rsi
.L25042:
	call	emit_move_insn
.L22826:
	movq	-5760(%rbp), %r15
.L25043:
	movzwl	(%r15), %edx
	jmp	.L22728
.L27406:
	movq	%rbx, %rdi
	call	int_size_in_bytes
	cmpw	$39, (%r15)
	movl	%eax, -5764(%rbp)
	jne	.L27407
	movq	8(%r15), %rcx
	movq	8(%rcx), %r8
	movl	(%rcx), %r9d
	cmpq	$0, 8(%r8)
	movslq	%r9d,%r10
	sete	%r11b
	leaq	15(,%r10,8), %rsi
	andq	$-16, %rsi
	subq	%rsi, %rsp
	leaq	32(%rsp), %rdi
	movzbl	%r11b, %ebx
	movq	%rdi, -5776(%rbp)
	movl	%ebx, -9524(%rbp)
	movl	-9524(%rbp), %eax
	cmpl	%r9d, %eax
	movl	%eax, -9500(%rbp)
	jl	.L22741
.L24222:
	movq	cfun(%rip), %r9
	movq	16(%r9), %r12
	movq	40(%r12), %rbx
	testq	%rbx, %rbx
	je	.L24224
.L22747:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L27408
	call	emit_insn
	movq	%rax, 16(%rbx)
.L22746:
	movq	cfun(%rip), %r8
	movq	40(%rbx), %rdi
	movq	16(%r8), %r11
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%r11)
	jne	.L22747
.L24224:
	movq	-5760(%rbp), %rsi
	cmpw	$39, (%rsi)
	movq	%rsi, -9520(%rbp)
	je	.L27409
	movq	-5760(%rbp), %rsi
	movzwl	(%rsi), %eax
	subl	$65, %eax
	cmpw	$1, %ax
	ja	.L27410
.L22800:
	movq	8(%r15), %rax
	movl	-9524(%rbp), %ecx
	cmpl	(%rax), %ecx
	jge	.L24231
	movslq	-5764(%rbp),%r10
	movq	%r10, -5856(%rbp)
.L22817:
	movslq	-9524(%rbp),%rsi
	movq	-5776(%rbp), %r8
	movq	-9520(%rbp), %rdi
	movq	%rsi, %r9
	movq	%rsi, -5832(%rbp)
	salq	$3, %r9
	movq	(%r8,%r9), %r11
	movq	8(%r9,%rax), %r12
	movzbl	2(%r11), %eax
	movq	16(%r12), %rdx
	movq	8(%rdx), %r12
	movq	%rdi, -9536(%rbp)
	movl	%eax, -5836(%rbp)
	cltq
	movzbl	mode_size(%rax), %edx
	movq	%rax, -5848(%rbp)
	movl	-5764(%rbp), %eax
	testl	%eax, %eax
	movl	%edx, -9528(%rbp)
	js	.L22806
	movl	-5764(%rbp), %ebx
	mov	%edx, %r10d
	leaq	(%r10,%r12), %rcx
	subl	%r12d, %ebx
	cmpq	-5856(%rbp), %rcx
	cmovle	-9528(%rbp), %ebx
	movl	%ebx, -9528(%rbp)
.L22806:
	movq	-9520(%rbp), %rbx
	cmpw	$65, (%rbx)
	je	.L27411
.L22808:
	movq	-9536(%rbp), %rsi
	cmpw	$66, (%rsi)
	je	.L27412
.L22813:
	movl	-9528(%rbp), %edi
	movq	-5832(%rbp), %rax
	leaq	0(,%r12,8), %rdx
	movq	-5776(%rbp), %r10
	movslq	-5764(%rbp),%r9
	movl	-5836(%rbp), %ecx
	sall	$3, %edi
	mov	%edi, %esi
	movq	(%r10,%rax,8), %r8
	movq	-9536(%rbp), %rdi
	call	store_bit_field
.L22804:
	incl	-9524(%rbp)
	movq	8(%r15), %rax
	movl	-9524(%rbp), %esi
	cmpl	(%rax), %esi
	jl	.L22817
.L24231:
	movq	cfun(%rip), %rdx
	movq	16(%rdx), %r15
	movq	40(%r15), %rbx
	testq	%rbx, %rbx
	je	.L24233
.L22823:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L27413
	call	emit_insn
	movq	%rax, 16(%rbx)
.L22822:
	movq	cfun(%rip), %r9
	movq	40(%rbx), %r8
	movq	16(%r9), %r12
	testq	%r8, %r8
	movq	%r8, %rbx
	movq	%r8, 40(%r12)
	jne	.L22823
.L24233:
	movq	-9520(%rbp), %rcx
	cmpw	$61, (%rcx)
	jne	.L22826
	movq	-5760(%rbp), %rdi
	movq	%rcx, %rsi
	jmp	.L25042
.L27413:
	movq	8(%rdi), %r11
	movq	8(%r11), %rcx
	movq	%rcx, 16(%rbx)
	call	emit_insn
	jmp	.L22822
.L27412:
	movl	-5836(%rbp), %edi
	call	get_mode_alignment
	movq	-9536(%rbp), %rbx
	movq	16(%rbx), %rdx
	testq	%rdx, %rdx
	je	.L22814
	cmpl	%eax, 32(%rdx)
	jb	.L22813
.L22815:
	movl	-5836(%rbp), %edi
	leaq	0(,%r12,8), %rbx
	call	get_mode_alignment
	mov	%eax, %ecx
	movq	%rbx, %rax
	cqto
	idivq	%rcx
	testq	%rdx, %rdx
	jne	.L22813
	movq	-5848(%rbp), %r8
	movzbl	mode_size(%r8), %r11d
	cmpl	%r11d, -9528(%rbp)
	jne	.L22813
	movq	-9536(%rbp), %rdi
	movl	-5836(%rbp), %esi
	movq	%r12, %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	movq	-5776(%rbp), %r12
	movq	-5832(%rbp), %r9
	movq	%rax, %rdi
	movq	(%r12,%r9,8), %rsi
	call	emit_move_insn
	jmp	.L22804
.L22814:
	cmpl	$8, %eax
	ja	.L22813
	jmp	.L22815
.L27411:
	movq	8(%rbx), %r8
	mov	-9528(%rbp), %r9d
	movzbq	2(%r8), %rdi
	movq	%r8, -9536(%rbp)
	leaq	(%r9,%r12), %r11
	movzbq	mode_size(%rdi), %rdx
	cmpq	%rdx, %r11
	jle	.L22808
	cmpq	%rdx, %r12
	jl	.L22811
	subq	%rdx, %r12
	movq	-9520(%rbp), %rdx
	movq	16(%rdx), %rax
	movq	%rax, -9536(%rbp)
	jmp	.L22808
.L22811:
	movl	$.LC0, %edi
	movl	$2142, %esi
.L25533:
	movl	$.LC20, %edx
	jmp	.L25086
.L27410:
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	const_int_rtx+512(%rip), %rsi
	movq	%rax, %rdi
	movq	%rax, -9520(%rbp)
	call	emit_move_insn
	jmp	.L22800
.L27409:
	movq	%rsi, %rdi
	movq	%r15, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L22826
	movq	-5760(%rbp), %rcx
	movslq	-5764(%rbp),%rbx
	xorl	%edx, %edx
	movzbl	2(%rcx), %edi
	movq	%rbx, %rsi
	movq	%rbx, -5792(%rbp)
	call	assign_stack_temp
	movl	-5764(%rbp), %edx
	movq	%r15, %rsi
	movq	%rax, %rdi
	movq	%rax, -5784(%rbp)
	call	emit_group_store
	movq	-5760(%rbp), %r15
	cmpw	$39, (%r15)
	jne	.L25561
	movq	-5760(%rbp), %rsi
	movq	8(%rsi), %rcx
	movq	8(%rcx), %r8
	movl	(%rcx), %r12d
	movq	%rcx, %rsi
	cmpq	$0, 8(%r8)
	movslq	%r12d,%r10
	sete	%r11b
	leaq	15(,%r10,8), %r9
	andq	$-16, %r9
	subq	%r9, %rsp
	leaq	32(%rsp), %rdx
	movzbl	%r11b, %edi
	movq	%rdx, -5800(%rbp)
	movl	%edi, -9512(%rbp)
	movl	-9512(%rbp), %eax
	cmpl	%r12d, %eax
	movl	%eax, -9504(%rbp)
	jge	.L24226
.L22786:
	movslq	-9504(%rbp),%r10
	movl	-5764(%rbp), %ecx
	testl	%ecx, %ecx
	movq	8(%rsi,%r10,8), %r9
	movq	%r10, -5808(%rbp)
	movq	8(%r9), %rax
	movq	16(%r9), %rdx
	movzbl	2(%rax), %r15d
	movq	8(%rdx), %rbx
	movq	%rbx, -5816(%rbp)
	movslq	%r15d,%r12
	movzbl	mode_size(%r12), %ebx
	movq	%r12, -5824(%rbp)
	movl	%ebx, -9508(%rbp)
	js	.L22759
	mov	%ebx, %edi
	addq	-5816(%rbp), %rdi
	cmpq	-5792(%rbp), %rdi
	jle	.L22759
	movl	-5764(%rbp), %r11d
	subl	-5816(%rbp), %r11d
	movl	%r11d, -9508(%rbp)
	je	.L25560
.L22759:
	movq	-5784(%rbp), %r12
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L24543
	leal	-67(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L22763
	cmpw	$54, %dx
	je	.L22763
	cmpw	$55, %dx
	je	.L22763
	cmpw	$58, %dx
	je	.L22763
	cmpw	$134, %dx
	je	.L22763
	cmpw	$56, %dx
	je	.L22763
	cmpw	$140, %dx
	je	.L22763
.L22762:
	movq	-5784(%rbp), %rcx
	movl	%r15d, %edi
	movzbl	2(%rcx), %eax
	testb	%al, %al
	je	.L25040
	movzbl	%al, %edi
.L25040:
	call	gen_reg_rtx
	movq	-5784(%rbp), %rsi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	emit_move_insn
	movzwl	(%r12), %edx
.L22761:
	cmpw	$66, %dx
	je	.L24543
.L22766:
	cmpw	$65, %dx
	je	.L27414
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L22783
	cmpw	$54, %dx
	je	.L22783
	cmpw	$55, %dx
	je	.L22783
	cmpw	$58, %dx
	je	.L22783
	cmpw	$134, %dx
	je	.L22783
	cmpw	$56, %dx
	je	.L22783
	cmpw	$140, %dx
	je	.L22783
	cmpw	$61, %dx
	je	.L27415
.L22782:
	movl	-9508(%rbp), %eax
	movq	-5792(%rbp), %rdi
	movl	$1, %ecx
	movq	-5816(%rbp), %rdx
	xorl	%r8d, %r8d
	movl	%r15d, %r9d
	movl	%r15d, (%rsp)
	sall	$3, %eax
	movq	%rdi, 8(%rsp)
	movq	%r12, %rdi
	mov	%eax, %esi
	salq	$3, %rdx
	call	extract_bit_field
.L25041:
	movq	-5808(%rbp), %r11
	movq	-5800(%rbp), %r12
	movq	%rax, (%r12,%r11,8)
.L22757:
	movq	-5760(%rbp), %r8
	incl	-9504(%rbp)
	movl	-9504(%rbp), %eax
	movq	8(%r8), %rcx
	cmpl	(%rcx), %eax
	movq	%rcx, %rsi
	jl	.L22786
.L24226:
	movq	cfun(%rip), %rbx
	movq	16(%rbx), %r9
	movq	40(%r9), %rbx
	testq	%rbx, %rbx
	je	.L24228
.L22792:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L27416
	call	emit_insn
	movq	%rax, 16(%rbx)
.L22791:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %r10
	movq	16(%rdx), %r15
	testq	%r10, %r10
	movq	%r10, %rbx
	movq	%r10, 40(%r15)
	jne	.L22792
	movq	-5760(%rbp), %rdi
	movq	8(%rdi), %rcx
.L24228:
	movl	-9512(%rbp), %eax
	cmpl	(%rcx), %eax
	jge	.L22826
.L22798:
	movslq	-9512(%rbp),%rbx
	movq	-5800(%rbp), %r9
	salq	$3, %rbx
	movq	8(%rbx,%rcx), %rsi
	movq	8(%rsi), %rdi
	movq	(%r9,%rbx), %rsi
	call	emit_move_insn
	movq	-5760(%rbp), %r8
	incl	-9512(%rbp)
	movl	-9512(%rbp), %r12d
	movq	8(%r8), %r11
	cmpl	(%r11), %r12d
	movq	%r11, %rcx
	jl	.L22798
	jmp	.L22826
.L27416:
	movq	8(%rdi), %rsi
	movq	8(%rsi), %rcx
	movq	%rcx, 16(%rbx)
	call	emit_insn
	jmp	.L22791
.L27415:
	movzbl	2(%r12), %r10d
	cmpl	%r15d, %r10d
	jne	.L22782
.L22783:
	movq	-5808(%rbp), %rdx
	movq	-5800(%rbp), %r15
	movq	%r12, (%r15,%rdx,8)
	jmp	.L22757
.L27414:
	cmpq	$0, -5816(%rbp)
	jne	.L24458
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %rsi
	movzbl	mode_size(%rsi), %r8d
	cmpl	%r8d, -9508(%rbp)
	je	.L22772
.L22773:
	movzbq	2(%rdx), %rcx
	movzbq	mode_size(%rcx), %rbx
	cmpq	%rbx, -5816(%rbp)
	je	.L27417
.L22771:
	cmpq	$0, -5816(%rbp)
	jne	.L22779
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbx
	movzbq	mode_size(%rbx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %rbx
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%rbx, %rdi
	movl	%r15d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	jmp	.L25041
.L27417:
	movq	16(%r12), %rdx
	movzbq	2(%rdx), %r10
	movzbl	mode_size(%r10), %r9d
	cmpl	%r9d, -9508(%rbp)
	jne	.L22771
.L22772:
	xorl	%edi, %edi
	movq	-5808(%rbp), %r11
	movq	-5800(%rbp), %rax
	cmpq	$0, -5816(%rbp)
	setne	%dil
	leaq	(%rax,%r11,8), %rbx
	movq	8(%r12,%rdi,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L22757
	cmpw	$54, %dx
	je	.L22757
	cmpw	$55, %dx
	je	.L22757
	cmpw	$58, %dx
	je	.L22757
	cmpw	$134, %dx
	je	.L22757
	cmpw	$56, %dx
	je	.L22757
	cmpw	$140, %dx
	je	.L22757
	cmpw	$61, %dx
	je	.L27418
.L22777:
	movq	-5792(%rbp), %rcx
	movl	-9508(%rbp), %r9d
	movl	%r15d, (%rsp)
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	movq	%rcx, 8(%rsp)
	sall	$3, %r9d
	movl	$1, %ecx
	movq	(%rbx), %rdi
	mov	%r9d, %esi
	movl	%r15d, %r9d
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L22757
.L27418:
	movzbl	2(%rcx), %r8d
	cmpl	%r15d, %r8d
	jne	.L22777
	jmp	.L22757
.L24458:
	movq	8(%r12), %rdx
	jmp	.L22773
.L24543:
	movl	%r15d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L22767
	cmpl	%eax, 32(%rdx)
	jae	.L22768
.L24457:
	movzwl	(%r12), %edx
	jmp	.L22766
.L22768:
	movq	-5816(%rbp), %rbx
	movl	%r15d, %edi
	call	get_mode_alignment
	mov	%eax, %r10d
	salq	$3, %rbx
	movq	%rbx, %rax
	cqto
	idivq	%r10
	testq	%rdx, %rdx
	jne	.L24457
	movq	-5824(%rbp), %rax
	movzbl	mode_size(%rax), %edx
	cmpl	%edx, -9508(%rbp)
	jne	.L24457
	movl	%r15d, %edi
	call	gen_reg_rtx
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-5800(%rbp), %rdi
	movq	-5808(%rbp), %r11
	movl	%r15d, %esi
	movq	-5816(%rbp), %rdx
	leaq	(%rdi,%r11,8), %rbx
	movq	%r12, %rdi
	movq	%rax, (%rbx)
	call	adjust_address_1
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L22757
.L22767:
	cmpl	$8, %eax
	ja	.L24457
	jmp	.L22768
.L22763:
	movq	-5784(%rbp), %rbx
	movzbl	2(%rbx), %ecx
	movzbl	%cl, %esi
	cmpl	%r15d, %esi
	je	.L22761
	testb	%cl, %cl
	je	.L22761
	jmp	.L22762
.L27408:
	movq	8(%rdi), %r10
	movq	8(%r10), %rsi
	movq	%rsi, 16(%rbx)
	call	emit_insn
	jmp	.L22746
.L22741:
	movslq	-9500(%rbp),%rbx
	salq	$3, %rbx
	movq	8(%rbx,%rcx), %rdx
	movq	8(%rdx), %r12
	movzbl	2(%r12), %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	-5776(%rbp), %rcx
	movq	%rax, %rdi
	movq	%rax, (%rcx,%rbx)
	call	emit_move_insn
	incl	-9500(%rbp)
	movq	8(%r15), %rcx
	movl	-9500(%rbp), %eax
	cmpl	(%rcx), %eax
	jl	.L22741
	jmp	.L24222
.L27407:
	movl	$.LC0, %edi
	movl	$2063, %esi
	jmp	.L25533
.L27405:
	call	put_var_into_stack
	movq	-9552(%rbp), %r15
	movq	32(%r15), %r12
	movq	48(%r12), %r15
	jmp	.L25043
	.p2align 6,,7
.L22727:
	movq	-9552(%rbp), %rax
	movq	%r15, %rsi
	movq	32(%rax), %r8
	movq	8(%r8), %r11
	movzbl	61(%r11), %ebx
	shrb	$1, %bl
	movzbl	%bl, %edi
	call	force_const_mem
	movq	%rax, %r15
	jmp	.L25043
.L22721:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r15), %r12
	movq	%rax, %rbx
	je	.L27419
.L22723:
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, %r15
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L22716
.L27419:
	cmpq	16(%r15), %rax
	jne	.L22723
	jmp	.L22716
.L27392:
	jne	.L22717
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r15), %rax
	movq	%rax, %rbx
	je	.L22716
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, %r15
	movq	%rbx, 8(%rax)
	jmp	.L22716
	.p2align 6,,7
.L22713:
	cmpq	$0, 16(%r15)
	je	.L27420
	movq	24(%r15), %rax
	testq	%rax, %rax
	je	.L22725
.L25039:
	movq	%rax, %r15
	jmp	.L22716
.L22725:
	movq	8(%r15), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L22716
.L27420:
	movq	8(%r15), %rdi
	call	copy_to_reg
	jmp	.L25039
	.p2align 6,,7
.L22698:
	xorl	%esi, %esi
	call	output_constant_def
	movq	8(%rax), %r13
	jmp	.L22694
.L27391:
	call	decl_function_context
	testq	%rax, %rax
	je	.L24454
	movq	-9552(%rbp), %rcx
	movq	32(%rcx), %rdi
	testb	$4, 49(%rdi)
	jne	.L22673
	testb	$4, 18(%rcx)
	jne	.L22673
	call	trampoline_address
	testq	%r13, %r13
	movq	$0, -9496(%rbp)
	movq	%rax, %r12
	movq	%r13, -5752(%rbp)
	je	.L22674
	movl	(%r13), %eax
	andl	$67174399, %eax
	cmpl	$61, %eax
	je	.L27421
.L22674:
	xorl	%r13d, %r13d
.L22676:
	movzwl	(%r12), %ecx
	leal	-75(%rcx), %ebx
	cmpw	$1, %bx
	ja	.L22677
	movq	pic_offset_table_rtx(%rip), %r15
	cmpq	%r15, 8(%r12)
	je	.L27422
.L22677:
	cmpw	$75, %cx
	je	.L27423
	cmpw	$76, %cx
	je	.L27424
	cmpw	$78, %cx
	je	.L27425
.L22682:
	cmpq	$0, -9496(%rbp)
	je	.L22688
	movq	16(%r12), %r15
	movzwl	(%r15), %edx
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L22689
	cmpw	$54, %dx
	je	.L22689
	cmpw	$55, %dx
	je	.L22689
	cmpw	$58, %dx
	je	.L22689
	cmpw	$134, %dx
	je	.L22689
	cmpw	$56, %dx
	je	.L22689
	cmpw	$140, %dx
	je	.L22689
	cmpw	$61, %dx
	je	.L27426
.L22690:
	xorl	%r13d, %r13d
.L22689:
	movq	-9496(%rbp), %rax
	cmpq	optab_table+16(%rip), %rax
	je	.L27427
.L22691:
	movq	-9496(%rbp), %rsi
	cmpq	optab_table(%rip), %rsi
	je	.L27428
.L22692:
	movq	8(%r12), %rdi
	movq	%r13, %rsi
	call	force_operand
	movq	%r15, %rdi
	movq	%rax, %rbx
.L25046:
	xorl	%esi, %esi
	call	force_operand
	xorl	%r9d, %r9d
	movq	-5752(%rbp), %r8
	movzbl	2(%r12), %edi
	movq	-9496(%rbp), %rsi
	movq	%rax, %rcx
	movq	%rbx, %rdx
	movl	$3, (%rsp)
	call	expand_binop
.L25047:
	movq	%rax, %r13
	jmp	.L22694
.L27428:
	cmpw	$54, (%r15)
	jne	.L22692
	movq	8(%r12), %rdx
	cmpw	$75, (%rdx)
	jne	.L22692
	movq	8(%rdx), %rax
	cmpw	$61, (%rax)
	jne	.L22692
	movl	8(%rax), %eax
	cmpl	$52, %eax
	jbe	.L22692
	cmpl	$57, %eax
	ja	.L22692
	movzbl	2(%r12), %edi
	movq	%r15, %rcx
	movq	%r13, %r8
	movl	$3, (%rsp)
	xorl	%r9d, %r9d
	movq	8(%rdx), %rdx
	call	expand_binop
	movq	8(%r12), %r10
	movq	%rax, %rbx
	movq	16(%r10), %rdi
	jmp	.L25046
.L27427:
	cmpw	$54, %dx
	jne	.L22691
	movq	optab_table(%rip), %rsi
	movq	%rsi, -9496(%rbp)
	movq	%r15, %rsi
	movzbl	2(%r12), %edi
	call	negate_rtx
	movq	%rax, %r15
	jmp	.L22691
.L27426:
	cmpq	%r13, %r15
	jne	.L22689
	jmp	.L22690
.L22688:
	cmpw	$63, %cx
	je	.L27429
.L22693:
	movq	%r12, %r13
	jmp	.L22694
.L27429:
	movq	8(%r12), %rdi
	cmpw	$66, (%rdi)
	jne	.L22693
	movzbq	2(%rdi), %r11
	movzbq	2(%r12), %r15
	movzbl	mode_size(%r11), %ebx
	cmpb	%bl, mode_size(%r15)
	jbe	.L22693
	xorl	%esi, %esi
	call	force_operand
	movq	8(%r12), %rdx
	movq	%rax, %rsi
	movzbl	2(%rdx), %edi
	call	force_reg
	movl	16(%r12), %ecx
	movq	8(%r12), %r8
	movzbl	2(%r12), %edi
	movq	%rax, %rsi
	movzbl	2(%r8), %edx
	call	simplify_gen_subreg
	movq	%rax, %r12
	jmp	.L22693
.L27425:
	movq	16(%r12), %r15
	movzwl	(%r15), %edx
	leal	-67(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L22686
	cmpw	$54, %dx
	je	.L22686
	cmpw	$55, %dx
	je	.L22686
	cmpw	$58, %dx
	je	.L22686
	cmpw	$134, %dx
	je	.L22686
	cmpw	$56, %dx
	je	.L22686
	cmpw	$140, %dx
	je	.L22686
	cmpw	$61, %dx
	je	.L27430
.L22687:
	xorl	%r13d, %r13d
.L22686:
	movq	8(%r12), %rdi
	movq	%r13, %rsi
	call	force_operand
	xorl	%esi, %esi
	movq	%r15, %rdi
	movq	%rax, %r13
	call	force_operand
	movl	$1, %r8d
	movzbl	2(%r12), %edi
	movq	-5752(%rbp), %rcx
	movq	%r13, %rsi
	movq	%rax, %rdx
	call	expand_mult
	jmp	.L25047
.L27430:
	cmpq	%r13, %r15
	jne	.L22686
	jmp	.L22687
.L27424:
	movq	optab_table+16(%rip), %r9
	movq	%r9, -9496(%rbp)
	jmp	.L22682
.L27423:
	movq	optab_table(%rip), %rdx
	movq	%rdx, -9496(%rbp)
	jmp	.L22682
.L27422:
	movq	16(%r12), %r8
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L22678
	cmpw	$58, %dx
	jne	.L22677
.L22678:
	testq	%r13, %r13
	je	.L27431
.L22679:
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	emit_move_insn
	jmp	.L22694
.L27431:
	movzbl	2(%r12), %edi
	call	gen_reg_rtx
	movq	%rax, %r13
	jmp	.L22679
.L27421:
	cmpl	$52, 8(%r13)
	jbe	.L22674
	call	preserve_subexpressions_p
	testl	%eax, %eax
	je	.L22676
	jmp	.L22674
	.p2align 6,,7
.L24454:
	movq	-9552(%rbp), %r12
	movq	32(%r12), %rdi
	jmp	.L22673
	.p2align 6,,7
.L9626:
	movq	-9552(%rbp), %r12
	movq	32(%r12), %rdi
	cmpq	global_trees(%rip), %rdi
	je	.L25062
	movq	-2712(%rbp), %rbx
	cmpb	$21, 16(%rbx)
	je	.L27432
	movq	8(%rdi), %r8
	movzbl	61(%r8), %ebx
	shrb	$1, %bl
	movzbl	%bl, %ecx
	cmpl	%ecx, -2716(%rbp)
	je	.L27433
	movl	-2716(%rbp), %edx
	xorl	%esi, %esi
	movl	%r14d, %ecx
	call	expand_expr
	movzbl	2(%rax), %edi
	movq	%rax, %r12
	cmpl	-2716(%rbp), %edi
	je	.L24244
	movzwl	(%rax), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L10547
	cmpw	$54, %dx
	je	.L10547
	cmpw	$55, %dx
	je	.L10547
	cmpw	$58, %dx
	je	.L10547
	cmpw	$134, %dx
	je	.L10547
	cmpw	$56, %dx
	je	.L10547
	cmpw	$140, %dx
	je	.L10547
	cmpl	$3, %r14d
	je	.L27434
	testq	%r13, %r13
	jne	.L10555
	movq	-9552(%rbp), %r8
	movl	-2716(%rbp), %edi
	movq	%rax, %rsi
	movq	32(%r8), %rdx
	movq	8(%rdx), %rbx
	movzbl	17(%rbx), %edx
	shrb	$5, %dl
	andl	$1, %edx
	call	convert_to_mode
	jmp	.L23191
.L10555:
	movq	-9552(%rbp), %r10
	movq	%r13, %rdi
	movq	32(%r10), %r15
	movq	8(%r15), %rsi
	movzbl	17(%rsi), %edx
	movq	%rax, %rsi
	shrb	$5, %dl
	andl	$1, %edx
	jmp	.L25060
.L27434:
	movl	-2516(%rbp), %eax
	movl	-2716(%rbp), %esi
	movq	%r12, %rdx
	testl	%eax, %eax
	setne	%r14b
	movzbl	%r14b, %edi
	addl	$120, %edi
	call	gen_rtx_fmt_e
	jmp	.L23191
	.p2align 6,,7
.L10547:
	movq	-9552(%rbp), %rcx
	movq	32(%rcx), %r9
	movq	8(%r9), %rdx
	movzbl	61(%rdx), %r13d
	shrb	$1, %r13b
	cmpl	$3, %r14d
	movzbl	%r13b, %ebx
	je	.L27435
	movzbl	17(%rdx), %ecx
	movl	-2716(%rbp), %edi
	movl	%ebx, %esi
	movq	%r12, %rdx
	shrb	$5, %cl
	andl	$1, %ecx
	jmp	.L25084
.L27435:
	movl	-2716(%rbp), %edi
	movl	%ebx, %esi
	call	subreg_lowpart_offset
	movl	%ebx, %edx
	movq	%r12, %rsi
	movl	-2716(%rbp), %edi
	movl	%eax, %ecx
	call	simplify_gen_subreg
	jmp	.L23191
.L27433:
	movq	%r13, %rsi
	xorl	%edx, %edx
	movl	%r14d, %ecx
	call	expand_expr
	movq	%rax, %r13
	movq	-9552(%rbp), %rax
	movq	32(%rax), %r10
	movq	8(%r10), %r15
	movzbl	17(%r15), %esi
	shrb	$5, %sil
	andl	$1, %esi
	cmpl	-2516(%rbp), %esi
	je	.L7871
	cmpw	$63, (%r13)
	jne	.L7871
	andb	$-17, 3(%r13)
	jmp	.L7871
	.p2align 6,,7
.L27432:
	cmpl	$51, -2716(%rbp)
	movq	8(%rdi), %rbx
	je	.L27436
.L9629:
	testq	%r13, %r13
	je	.L27437
.L9630:
	movzwl	(%r13), %eax
	cmpw	$66, %ax
	je	.L27438
	cmpw	$61, %ax
	jne	.L10539
	movq	-9552(%rbp), %rdi
	movq	32(%rdi), %r10
	movq	8(%r10), %rdi
	call	int_size_in_bytes
	movslq	-2716(%rbp),%r15
	salq	$3, %rax
	movzwq	mode_bitsize(%r15,%r15), %rsi
	cmpq	%rsi, %rax
	jl	.L27439
.L10541:
	movzbl	61(%rbx), %edx
	movq	-2712(%rbp), %r9
	movq	%r13, %rdi
	movq	-9552(%rbp), %r14
	movl	$0, (%rsp)
	movl	$0, 16(%rsp)
	movq	%r9, 8(%rsp)
	xorl	%r9d, %r9d
	movq	32(%r14), %r8
	shrb	$1, %dl
	movzbl	%dl, %ecx
	xorl	%edx, %edx
	call	store_field
	jmp	.L7871
.L27439:
	movq	-9552(%rbp), %r11
	movq	32(%r11), %r12
	movq	8(%r12), %rdi
	call	int_size_in_bytes
	leaq	0(,%rax,8), %rsi
	jmp	.L10541
.L10539:
	movl	$.LC0, %edi
	movl	$7344, %esi
	jmp	.L25123
.L27438:
	movzbl	61(%rbx), %ecx
	movq	-9552(%rbp), %rsi
	xorl	%edx, %edx
	movq	%r13, %rdi
	movl	$1, %r8d
	xorl	%r12d, %r12d
	movq	32(%rsi), %r14
	shrb	$1, %cl
	movzbl	%cl, %esi
	movl	$1, %ecx
	call	adjust_address_1
	movl	$0, -6556(%rbp)
	movq	%rax, %r15
	movzbl	16(%r14), %eax
	cmpb	$47, %al
	je	.L27440
	cmpb	$51, %al
	je	.L27441
.L9642:
	movzwl	(%r15), %eax
	subl	$66, %eax
	cmpl	$12, %eax
	ja	.L9690
	mov	%eax, %ebx
	jmp	*.L9691(,%rbx,8)
	.section	.rodata
	.align 8
	.align 4
.L9691:
	.quad	.L9684
	.quad	.L9690
	.quad	.L9690
	.quad	.L9690
	.quad	.L9690
	.quad	.L9689
	.quad	.L9690
	.quad	.L9690
	.quad	.L9690
	.quad	.L9687
	.quad	.L9687
	.quad	.L9690
	.quad	.L9687
	.text
.L9684:
	movq	8(%r15), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L9683:
	testl	%ebx, %ebx
	je	.L9680
	movzbl	2(%r15), %eax
	cmpb	$51, %al
	je	.L9692
	testb	%al, %al
	jne	.L27442
.L9692:
	movzbl	2(%r15), %edx
	movq	%r14, %rdi
	xorl	%esi, %esi
.L24602:
	xorl	%ecx, %ecx
	call	expand_expr
	testb	$8, 3(%r15)
	movq	%rax, -6840(%rbp)
	jne	.L24296
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L24291
	movl	$1, -6556(%rbp)
.L24294:
	movq	-6840(%rbp), %r8
	movzwl	(%r8), %edx
.L9641:
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L9719
	cmpw	$54, %dx
	je	.L9719
	cmpw	$55, %dx
	je	.L9719
	cmpw	$58, %dx
	je	.L9719
	cmpw	$134, %dx
	je	.L9719
	cmpw	$56, %dx
	je	.L9719
	cmpw	$140, %dx
	je	.L9719
.L9718:
	movq	-6840(%rbp), %rdi
	movq	%r15, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	je	.L9721
	cmpq	%r15, -6840(%rbp)
	je	.L9720
	movq	-6840(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L27443
.L9721:
	movzbl	16(%r14), %eax
	testb	%al, %al
	je	.L9720
	testl	%r12d, %r12d
	jne	.L9720
	movzbl	%al, %r12d 
	cmpb	$100, tree_code_type(%r12)
	je	.L27444
.L9722:
	movzwl	(%r15), %eax
	cmpl	$71, %eax
	je	.L9727
	cmpl	$66, %eax
	je	.L27445
.L9731:
	cmpl	$75, %eax
	je	.L9735
	cmpl	$78, %eax
	je	.L9735
.L9730:
	movq	-6840(%rbp), %rdi
	movzbl	2(%r15), %ecx
	movzbl	2(%rdi), %eax
	cmpb	%cl, %al
	je	.L9740
	testb	%al, %al
	je	.L9740
	movq	8(%r14), %rsi
	movl	-6556(%rbp), %r14d
	movzbl	17(%rsi), %r8d
	shrb	$5, %r8b
	movl	%r8d, %edx
	andl	$1, %edx
	testl	%r14d, %r14d
	je	.L9741
	movq	-6840(%rbp), %rsi
	movzbl	%cl, %edi
	call	convert_to_mode
	movq	%r15, %rdi
	movq	%rax, %rsi
	movq	%rax, -6840(%rbp)
.L24634:
	call	emit_move_insn
.L9720:
	xorl	%esi, %esi
	testl	%esi, %esi
	je	.L7871
	movl	-6556(%rbp), %eax
	testl	%eax, %eax
	je	.L10533
	movq	-6840(%rbp), %rax
	cmpw	$66, (%rax)
	jne	.L7871
.L10533:
	cmpb	$51, 2(%r15)
	je	.L7871
	cmpw	$61, (%r15)
	je	.L27446
.L10536:
	movq	%r15, %rdi
	call	copy_to_reg
	jmp	.L7871
.L27446:
	cmpl	$52, 8(%r15)
	ja	.L10536
	jmp	.L7871
.L9741:
	movq	-6840(%rbp), %rsi
	movq	%r15, %rdi
	call	convert_move
	jmp	.L9720
.L9740:
	cmpb	$51, %al
	je	.L27447
.L9744:
	cmpw	$39, (%r15)
	je	.L27448
	cmpb	$51, %al
	je	.L27449
	movq	%r15, %rdi
	movq	-6840(%rbp), %rsi
	jmp	.L24634
.L27449:
	movq	-6840(%rbp), %rdx
	movq	%r14, %rdi
	movq	%r15, -6784(%rbp)
	movq	%rdx, -6792(%rbp)
	call	expr_size
	movl	$8, %edx
	movq	16(%r15), %rcx
	movq	%rax, %r14
	testq	%rcx, %rcx
	je	.L10335
	movl	32(%rcx), %edx
.L10335:
	movq	-6840(%rbp), %r10
	movq	16(%r10), %rax
	testq	%rax, %rax
	je	.L10336
	cmpl	32(%rax), %edx
	jb	.L10337
.L10332:
	testq	%rax, %rax
	movl	$8, -6776(%rbp)
	je	.L10333
	movl	32(%rax), %eax
	movl	%eax, -6776(%rbp)
.L10333:
	cmpb	$51, 2(%r15)
	jne	.L25547
	movq	-6840(%rbp), %rsi
	cmpb	$51, 2(%rsi)
	jne	.L25546
	movzwl	(%r15), %eax
	cmpl	$71, %eax
	je	.L10344
	cmpl	$66, %eax
	je	.L27450
.L10348:
	cmpl	$75, %eax
	je	.L10352
	cmpl	$78, %eax
	je	.L10352
.L10347:
	movq	-6840(%rbp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L10357
	cmpl	$66, %eax
	je	.L27451
.L10361:
	cmpl	$75, %eax
	je	.L10365
	cmpl	$78, %eax
	je	.L10365
.L10360:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L10370
	cmpl	$66, %eax
	je	.L27452
.L10374:
	cmpl	$75, %eax
	je	.L10378
	cmpl	$78, %eax
	je	.L10378
.L10373:
	movq	-6784(%rbp), %r9
	cmpw	$66, (%r9)
	jne	.L25545
	movq	-6792(%rbp), %rax
	cmpw	$66, (%rax)
	jne	.L25544
	testq	%r14, %r14
	je	.L25543
	cmpw	$54, (%r14)
	je	.L27453
.L10386:
	shrl	$3, -6776(%rbp)
	xorl	%edi, %edi
	mov	-6776(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -3304(%rbp)
	testl	%r12d, %r12d
	je	.L23378
.L10519:
	movslq	%r12d,%rax
	movl	movstr_optab(,%rax,4), %edx
	movq	%rax, -3312(%rbp)
	cmpl	$1317, %edx
	je	.L10505
	cmpw	$54, (%r14)
	je	.L27454
.L10509:
	testb	$2, target_flags+3(%rip)
	je	.L10510
	movq	-3312(%rbp), %rax
	cmpw	$63, mode_bitsize(%rax,%rax)
.L24632:
	jbe	.L10505
.L10508:
	movslq	%edx,%r8
	leaq	(%r8,%r8,4), %r9
	movq	%r8, -3320(%rbp)
	movq	insn_data+24(,%r9,8), %rdx
	movq	(%rdx), %rax
	movq	%rdx, -3328(%rbp)
	testq	%rax, %rax
	je	.L10512
	movq	-6784(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L10505
.L10512:
	movq	-3328(%rbp), %rsi
	movq	24(%rsi), %rax
	testq	%rax, %rax
	jne	.L27455
.L10513:
	movq	-3328(%rbp), %r10
	movq	72(%r10), %rax
	testq	%rax, %rax
	je	.L10514
	xorl	%esi, %esi
	movq	-3304(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L10505
.L10514:
	call	get_last_insn
	movl	$1, %edx
	movq	%r14, %rsi
	movl	%r12d, %edi
	movq	%rax, -3336(%rbp)
	call	convert_to_mode
	movq	-3328(%rbp), %rdi
	movq	%rax, %rbx
	movq	48(%rdi), %rax
	testq	%rax, %rax
	jne	.L27456
.L10515:
	movq	-3320(%rbp), %r11
	movq	-6784(%rbp), %rdi
	xorl	%eax, %eax
	movq	-6792(%rbp), %rsi
	movq	%rbx, %rdx
	movq	-3304(%rbp), %rcx
	leaq	(%r11,%r11,4), %r12
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24472
	movq	-3336(%rbp), %rdi
	call	delete_insns_since
.L10505:
	movq	-3312(%rbp), %rax
	movzbl	mode_wider_mode(%rax), %r12d
	testl	%r12d, %r12d
	jne	.L10519
.L23378:
	testb	$2, target_flags+3(%rip)
	movq	-6784(%rbp), %r8
	movl	$0, volatile_ok(%rip)
	setne	%sil
	movzbl	%sil, %edi
	movq	8(%r8), %rsi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-6792(%rbp), %r9
	testb	$2, target_flags+3(%rip)
	setne	%bl
	movq	%rax, -6832(%rbp)
	movq	8(%r9), %rsi
	movzbl	%bl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%r14, %rsi
	movq	sizetype_tab(%rip), %rdx
	movq	%rax, %rbx
	movzbl	61(%rdx), %ecx
	shrb	$1, %cl
	movzbl	%cl, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r14
	je	.L27457
.L10528:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	-6832(%rbp), %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r14, %rsi
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%rbx)
	movq	(%r12), %r8
	movq	8(%rdx), %rdi
	movq	(%r8), %rbx
	movq	$0, (%rbx)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movl	$53, %edi
	movq	fn.1(%rip), %r9
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%r9), %rcx
	movq	8(%rcx), %rsi
	movq	%r12, %rcx
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	movq	-6832(%rbp), %r14
	testb	$4, 3(%r14)
	je	.L9720
	movl	$49, %edi
	xorl	%esi, %esi
	movq	-6832(%rbp), %rdx
.L24633:
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L9720
.L27457:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r11
	xorl	%esi, %esi
	orb	$1, 49(%r11)
	movq	fn.1(%rip), %r12
	orb	$8, 18(%r12)
	movq	fn.1(%rip), %rdi
	orb	$64, 50(%rdi)
	movq	fn.1(%rip), %r10
	orb	$2, 18(%r10)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L10528
.L24472:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L9720
.L27456:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L10515
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L10515
.L27455:
	movq	-6792(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L10505
	jmp	.L10513
.L10510:
	movq	-3312(%rbp), %rbx
	cmpw	$31, mode_bitsize(%rbx,%rbx)
	jmp	.L24632
.L27454:
	movq	mode_mask_array(,%rax,8), %rdi
	shrq	$1, %rdi
	cmpq	%rdi, 8(%r14)
	jbe	.L10508
	jmp	.L10509
.L27453:
	movq	8(%r14), %r12
	xorl	%r8d, %r8d
	movl	$17, %esi
.L10399:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23367
.L10396:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L10396
.L23367:
	testl	%edi, %edi
	je	.L10389
	movslq	%edi,%rbx
	movq	%rbx, %r10
	salq	$4, %r10
	addq	optab_table+240(%rip), %r10
	cmpl	$1317, 8(%r10)
	je	.L10398
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L10398
	movzbq	mode_size(%rbx), %r11
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r11
	addq	%rax, %r8
	movq	%rdx, %r12
.L10398:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L10399
.L10389:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %r9d
	testl	%r9d, %r9d
	jne	.L10402
	movq	ix86_cost(%rip), %rbx
	mov	40(%rbx), %r12d
	cmpq	%r12, %r8
	jae	.L10386
.L10403:
	movq	-6792(%rbp), %r11
	testb	$2, target_flags+3(%rip)
	movq	-6784(%rbp), %rcx
	movq	8(%r14), %r12
	setne	%r14b
	movq	-6784(%rbp), %rsi
	movq	8(%r11), %r8
	movq	$0, -456(%rbp)
	movl	$0, -6812(%rbp)
	movq	%r8, -480(%rbp)
	movzbl	%r14b, %edx
	movq	8(%rcx), %rdi
	leal	5(,%rdx,4), %r14d
	movq	%rsi, -512(%rbp)
	xorl	%ecx, %ecx
	movzwl	(%rdi), %edx
	movq	%rdi, -6800(%rbp)
	leal	-96(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L10408
	cmpw	$99, %dx
	je	.L10408
	cmpw	$98, %dx
	je	.L10408
.L10407:
	movq	-6800(%rbp), %r9
	movl	%ecx, -496(%rbp)
	xorl	%edx, %edx
	movzwl	(%r9), %eax
	cmpw	$96, %ax
	je	.L10410
	cmpw	$98, %ax
	je	.L10410
.L10409:
	movq	-6800(%rbp), %rdi
	movq	-6792(%rbp), %r10
	movl	%edx, -448(%rbp)
	xorl	%ecx, %ecx
	movq	%rdi, -504(%rbp)
	movq	%r10, -488(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L10413
	cmpw	$99, %dx
	je	.L10413
	cmpw	$98, %dx
	je	.L10413
.L10412:
	movl	-448(%rbp), %eax
	movl	%ecx, -472(%rbp)
	movl	$0, -468(%rbp)
	movl	$0, -492(%rbp)
	testl	%eax, %eax
	je	.L10414
	movq	%r12, -456(%rbp)
.L10414:
	movl	-472(%rbp), %esi
	movq	%r12, -464(%rbp)
	testl	%esi, %esi
	je	.L10416
	movl	-496(%rbp), %ecx
	testl	%ecx, %ecx
	jne	.L10415
.L10416:
	movq	$0, -6808(%rbp)
	movl	$17, %esi
.L10429:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23370
.L10426:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L10426
.L23370:
	testl	%edi, %edi
	je	.L10419
	movslq	%edi,%rbx
	movq	%rbx, %r9
	salq	$4, %r9
	addq	optab_table+240(%rip), %r9
	cmpl	$1317, 8(%r9)
	je	.L10428
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L10428
	movzbq	mode_size(%rbx), %rdi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rdi
	addq	%rax, -6808(%rbp)
	movq	%rdx, %r12
.L10428:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L10429
.L10419:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, -6808(%rbp)
	jbe	.L10415
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23372
.L10437:
	movslq	%ecx,%rbx
	movzbl	mode_size(%rbx), %esi
	cmpl	%r14d, %esi
	cmovae	-6812(%rbp), %ecx
	movl	%ecx, -6812(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L10437
.L23372:
	movl	-472(%rbp), %eax
	testl	%eax, %eax
	jne	.L10443
	movzwl	(%r8), %edx
	leal	-67(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L10441
	cmpw	$54, %dx
	je	.L10441
	cmpw	$55, %dx
	je	.L10441
	cmpw	$58, %dx
	je	.L10441
	cmpw	$134, %dx
	je	.L10441
	cmpw	$56, %dx
	je	.L10441
	cmpw	$140, %dx
	je	.L10441
.L10443:
	movl	-496(%rbp), %r11d
	testl	%r11d, %r11d
	jne	.L10415
	movq	-6800(%rbp), %r8
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L10445
	cmpw	$54, %dx
	je	.L10445
	cmpw	$55, %dx
	je	.L10445
	cmpw	$58, %dx
	je	.L10445
	cmpw	$134, %dx
	je	.L10445
	cmpw	$56, %dx
	je	.L10445
	cmpw	$140, %dx
	je	.L10445
.L10415:
	cmpl	$1, %r14d
	jbe	.L10448
.L10499:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23375
.L10455:
	movslq	%ecx,%r12
	movzbl	mode_size(%r12), %edx
	cmpl	%r14d, %edx
	cmovae	-6812(%rbp), %ecx
	movl	%ecx, -6812(%rbp)
	movzbl	mode_wider_mode(%r12), %ecx
	testl	%ecx, %ecx
	jne	.L10455
.L23375:
	movl	-6812(%rbp), %r14d
	testl	%r14d, %r14d
	je	.L10448
	movslq	-6812(%rbp),%rdi
	movq	%rdi, %r10
	movq	%rdi, -3288(%rbp)
	salq	$4, %r10
	addq	optab_table+240(%rip), %r10
	movl	8(%r10), %ebx
	cmpl	$1317, %ebx
	je	.L10457
	movl	-6812(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %esi
	cmpl	%eax, %esi
	jb	.L10457
	movq	-3288(%rbp), %rax
	movslq	%ebx,%r11
	leaq	-512(%rbp), %r12
	leaq	(%r11,%r11,4), %rcx
	movq	$0, -6824(%rbp)
	movq	insn_data+16(,%rcx,8), %rbx
	movzbq	mode_size(%rax), %rdx
	cmpq	%rdx, -464(%rbp)
	movq	%rbx, -3296(%rbp)
	movq	%rdx, -5952(%rbp)
	jb	.L10457
	movl	-448(%rbp), %ecx
.L10497:
	testl	%ecx, %ecx
	je	.L10461
	subq	%rdx, 56(%r12)
.L10461:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L10462
	movl	16(%r12), %r9d
	testl	%r9d, %r9d
	je	.L10463
	movl	-6812(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24628:
	movq	%rax, -6824(%rbp)
.L10462:
	movl	40(%r12), %r8d
	testl	%r8d, %r8d
	je	.L10465
	movq	24(%r12), %rdi
	movl	-6812(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24629:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L27458
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L10471
	movq	-3288(%rbp), %rdi
	movzbl	mode_size(%rdi), %r10d
	leal	7(%r10), %edx
	andl	$-8, %edx
.L10472:
	movq	cfun(%rip), %rcx
	andl	$33554432, %esi
	movq	16(%rcx), %r11
	leaq	8(%r11), %rdi
	movl	8(%r11), %ecx
	je	.L10473
	movq	-3288(%rbp), %rsi
	movzbl	mode_size(%rsi), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24630:
	movq	-3288(%rbp), %r8
	leal	(%rax,%rcx), %r10d
	movl	%r10d, (%rdi)
	salq	$4, %r8
	addq	optab_table+384(%rip), %r8
	movl	8(%r8), %eax
	cmpl	$1317, %eax
	je	.L10475
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rdx
	movq	insn_data+24(,%rdx,8), %rdi
	movq	(%rdi), %rax
	testq	%rax, %rax
	je	.L10476
	movq	%r14, %rdi
	movl	-6812(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L27459
.L10476:
	leaq	(%rbx,%rbx,4), %r11
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r11,8)
.L24631:
	movq	%rax, %rdi
	call	emit_insn
.L10495:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L10496
	movq	-5952(%rbp), %r14
	addq	%r14, 56(%r12)
.L10496:
	movq	48(%r12), %r10
	movq	-5952(%rbp), %rdx
	subq	-5952(%rbp), %r10
	cmpq	%rdx, %r10
	movq	%r10, 48(%r12)
	jae	.L10497
.L10457:
	movq	-3288(%rbp), %r12
	movzbl	mode_size(%r12), %r14d
	cmpl	$1, %r14d
	ja	.L10499
.L10448:
	cmpq	$0, -464(%rbp)
.L25558:
	je	.L9720
	jmp	.L25518
.L27459:
	movl	-6812(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L10476
.L10475:
	movq	-3288(%rbp), %rax
	movzbl	mode_size(%rax), %ebx
	cmpl	%edx, %ebx
	je	.L27460
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r8b
	movzbl	%r8b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r9b
	movzbl	%r9b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L10483:
	movl	-6812(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%esi, %esi
	testq	%rsi, %rsi
	movq	%rax, %rbx
	je	.L10492
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L27461
.L10492:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L10495
.L27461:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L10492
.L27460:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%cl
	movzbl	%cl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L10483
.L10473:
	movq	-3288(%rbp), %r9
	movzbl	mode_size(%r9), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24630
.L10471:
	movq	-3288(%rbp), %rdx
	movzbl	mode_size(%rdx), %ebx
	leal	1(%rbx), %edx
	andl	$-2, %edx
	jmp	.L10472
.L27458:
	movq	%rax, %rsi
	movq	-6824(%rbp), %rdi
	xorl	%eax, %eax
	call	*-3296(%rbp)
	jmp	.L24631
.L10465:
	movq	24(%r12), %rdi
	movl	-6812(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24629
.L10463:
	movl	-6812(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24628
.L10445:
	movq	-6800(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -504(%rbp)
	jmp	.L10415
.L10441:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -480(%rbp)
	jmp	.L10443
.L10413:
	movl	$1, %ecx
	jmp	.L10412
.L10410:
	movl	$1, %edx
	jmp	.L10409
.L10408:
	movl	$1, %ecx
	jmp	.L10407
.L10402:
	cmpq	$2, %r8
	ja	.L10386
	jmp	.L10403
.L10378:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L27462
.L10380:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L10373
.L27462:
	cmpq	16(%r14), %rax
	jne	.L10380
	jmp	.L10373
.L27452:
	cmpb	$51, 2(%r14)
	je	.L10371
	movq	8(%r14), %r12
	cmpw	$71, (%r12)
	je	.L27463
.L10371:
	cmpl	$66, %eax
	jne	.L10374
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L10373
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%rbx, 8(%rax)
	jmp	.L10373
.L27463:
	movq	8(%r12), %rsi
	movq	%r14, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L10372
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L10373
.L10372:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24627:
	movq	%rax, %r14
	jmp	.L10373
.L10370:
	cmpq	$0, 16(%r14)
	je	.L27464
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L24627
	movq	8(%r14), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L10373
.L27464:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L24627
.L10365:
	movq	-6840(%rbp), %rbx
	xorl	%esi, %esi
	movq	8(%rbx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-6840(%rbp), %rdx
	movq	%rax, %r12
	movq	16(%rdx), %rdi
	call	protect_from_queue
	movq	-6840(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L27465
.L10367:
	movq	-6840(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -6792(%rbp)
	movq	%r12, 8(%rax)
	movq	-6792(%rbp), %r10
	movq	%rbx, 16(%r10)
	jmp	.L10360
.L27465:
	cmpq	16(%rsi), %rax
	jne	.L10367
	jmp	.L10360
.L27451:
	cmpb	$51, 2(%rbx)
	je	.L10358
	movq	8(%rbx), %r12
	cmpw	$71, (%r12)
	je	.L27466
.L10358:
	cmpl	$66, %eax
	jne	.L10361
	movq	-6840(%rbp), %r9
	xorl	%esi, %esi
	movq	8(%r9), %rdi
	call	protect_from_queue
	movq	-6840(%rbp), %rdx
	movq	%rax, %rbx
	cmpq	8(%rdx), %rax
	je	.L10360
	movq	%rdx, %rdi
	call	copy_rtx
	movq	%rax, -6792(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L10360
.L27466:
	movq	8(%r12), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L10359
	movq	-6840(%rbp), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -6792(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L10360
.L10359:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24626:
	movq	%rax, -6792(%rbp)
	jmp	.L10360
.L10357:
	movq	-6840(%rbp), %rdx
	cmpq	$0, 16(%rdx)
	je	.L27467
	movq	-6840(%rbp), %rsi
	movq	24(%rsi), %rdi
	testq	%rdi, %rdi
	movq	%rdi, -6792(%rbp)
	jne	.L10360
	movq	-6840(%rbp), %r12
	movq	8(%r12), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rcx
	movq	%rcx, -6792(%rbp)
	jmp	.L10360
.L27467:
	movq	8(%rdx), %rdi
	call	copy_to_reg
	jmp	.L24626
.L10352:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r15), %r12
	movq	%rax, %rbx
	je	.L27468
.L10354:
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, -6784(%rbp)
	movq	%r12, 8(%rax)
	movq	-6784(%rbp), %rcx
	movq	%rbx, 16(%rcx)
	jmp	.L10347
.L27468:
	cmpq	16(%r15), %rax
	jne	.L10354
	jmp	.L10347
.L27450:
	jne	.L10348
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r15), %rax
	movq	%rax, %rbx
	je	.L10347
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, -6784(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L10347
.L10344:
	testq	%rcx, %rcx
	je	.L27469
	movq	24(%r15), %r11
	testq	%r11, %r11
	movq	%r11, -6784(%rbp)
	jne	.L10347
	movq	8(%r15), %r12
	movzbl	2(%r12), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %rax
	movq	%rax, -6784(%rbp)
	jmp	.L10347
.L27469:
	movq	8(%r15), %rdi
	call	copy_to_reg
	movq	%rax, -6784(%rbp)
	jmp	.L10347
.L10337:
	testq	%rcx, %rcx
	movl	$8, -6776(%rbp)
	je	.L10333
	movl	32(%rcx), %edi
	movl	%edi, -6776(%rbp)
	jmp	.L10333
.L10336:
	cmpl	$7, %edx
	ja	.L10332
	jmp	.L10337
.L27448:
	movq	8(%r14), %rdi
	call	int_size_in_bytes
	cmpw	$39, (%r15)
	movl	%eax, -3244(%rbp)
	jne	.L25561
	movq	8(%r15), %rcx
	movq	8(%rcx), %r8
	movl	(%rcx), %r14d
	cmpq	$0, 8(%r8)
	movslq	%r14d,%rdi
	sete	%r11b
	leaq	15(,%rdi,8), %rbx
	andq	$-16, %rbx
	subq	%rbx, %rsp
	leaq	32(%rsp), %r12
	movzbl	%r11b, %edx
	movq	%r12, -3256(%rbp)
	movl	%edx, -6772(%rbp)
	movl	-6772(%rbp), %eax
	cmpl	%r14d, %eax
	movl	%eax, -6764(%rbp)
	jge	.L23361
.L10316:
	movslq	-6764(%rbp),%r12
	movq	8(%rcx,%r12,8), %rsi
	movq	%r12, -3264(%rbp)
	movq	8(%rsi), %rax
	movq	16(%rsi), %r10
	movzbl	2(%rax), %r14d
	movq	8(%r10), %rcx
	movl	-3244(%rbp), %eax
	movq	%rcx, -3272(%rbp)
	movslq	%r14d,%r9
	testl	%eax, %eax
	movzbl	mode_size(%r9), %ebx
	movq	%r9, -3280(%rbp)
	movl	%ebx, -6768(%rbp)
	js	.L10289
	mov	%ebx, %edi
	movslq	-3244(%rbp),%rbx
	addq	-3272(%rbp), %rdi
	cmpq	%rbx, %rdi
	jle	.L10289
	movl	-3244(%rbp), %edx
	subl	-3272(%rbp), %edx
	movl	%edx, -6768(%rbp)
	je	.L25560
.L10289:
	movq	-6840(%rbp), %r12
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L24532
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L10293
	cmpw	$54, %dx
	je	.L10293
	cmpw	$55, %dx
	je	.L10293
	cmpw	$58, %dx
	je	.L10293
	cmpw	$134, %dx
	je	.L10293
	cmpw	$56, %dx
	je	.L10293
	cmpw	$140, %dx
	je	.L10293
.L10292:
	movq	-6840(%rbp), %rcx
	movl	%r14d, %edi
	movzbl	2(%rcx), %eax
	testb	%al, %al
	je	.L24624
	movzbl	%al, %edi
.L24624:
	call	gen_reg_rtx
	movq	-6840(%rbp), %rsi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	emit_move_insn
	movzwl	(%r12), %edx
.L10291:
	cmpw	$66, %dx
	je	.L24532
.L10296:
	cmpw	$65, %dx
	je	.L27470
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L10313
	cmpw	$54, %dx
	je	.L10313
	cmpw	$55, %dx
	je	.L10313
	cmpw	$58, %dx
	je	.L10313
	cmpw	$134, %dx
	je	.L10313
	cmpw	$56, %dx
	je	.L10313
	cmpw	$140, %dx
	je	.L10313
	cmpw	$61, %dx
	je	.L27471
.L10312:
	movl	-6768(%rbp), %eax
	movq	-3272(%rbp), %rdx
	movq	%r12, %rdi
	movslq	-3244(%rbp),%r11
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r14d, %r9d
	movl	%r14d, (%rsp)
	sall	$3, %eax
	salq	$3, %rdx
	mov	%eax, %esi
	movq	%r11, 8(%rsp)
	call	extract_bit_field
.L24625:
	movq	-3264(%rbp), %r8
	movq	-3256(%rbp), %r12
	movq	%rax, (%r12,%r8,8)
.L10287:
	incl	-6764(%rbp)
	movq	8(%r15), %rcx
	movl	-6764(%rbp), %edx
	cmpl	(%rcx), %edx
	jl	.L10316
.L23361:
	movq	cfun(%rip), %rbx
	movq	16(%rbx), %r9
	movq	40(%r9), %rbx
	testq	%rbx, %rbx
	je	.L23363
.L10322:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L27472
	call	emit_insn
	movq	%rax, 16(%rbx)
.L10321:
	movq	cfun(%rip), %rdi
	movq	40(%rbx), %rsi
	movq	16(%rdi), %r14
	testq	%rsi, %rsi
	movq	%rsi, %rbx
	movq	%rsi, 40(%r14)
	jne	.L10322
	movq	8(%r15), %rcx
.L23363:
	movl	-6772(%rbp), %r11d
	cmpl	(%rcx), %r11d
	jge	.L9720
.L10328:
	movslq	-6772(%rbp),%r9
	movq	-3256(%rbp), %r8
	salq	$3, %r9
	movq	8(%r9,%rcx), %rbx
	movq	(%r8,%r9), %rsi
	movq	8(%rbx), %rdi
	call	emit_move_insn
	incl	-6772(%rbp)
	movq	8(%r15), %r12
	movl	-6772(%rbp), %eax
	cmpl	(%r12), %eax
	movq	%r12, %rcx
	jl	.L10328
	jmp	.L9720
.L27472:
	movq	8(%rdi), %r10
	movq	8(%r10), %rcx
	movq	%rcx, 16(%rbx)
	call	emit_insn
	jmp	.L10321
.L27471:
	movzbl	2(%r12), %esi
	cmpl	%r14d, %esi
	jne	.L10312
.L10313:
	movq	-3264(%rbp), %rdi
	movq	-3256(%rbp), %r14
	movq	%r12, (%r14,%rdi,8)
	jmp	.L10287
.L27470:
	cmpq	$0, -3272(%rbp)
	jne	.L24300
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %r8
	movzbl	mode_size(%r8), %ebx
	cmpl	%ebx, -6768(%rbp)
	je	.L10302
.L10303:
	movzbq	2(%rdx), %rcx
	movzbq	mode_size(%rcx), %r9
	cmpq	%r9, -3272(%rbp)
	je	.L27473
.L10301:
	cmpq	$0, -3272(%rbp)
	jne	.L22779
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbx
	movzbq	mode_size(%rbx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %rbx
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%rbx, %rdi
	movl	%r14d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	jmp	.L24625
.L27473:
	movq	16(%r12), %rdi
	movzbq	2(%rdi), %rsi
	movzbl	mode_size(%rsi), %r10d
	cmpl	%r10d, -6768(%rbp)
	jne	.L10301
.L10302:
	xorl	%r11d, %r11d
	movq	-3264(%rbp), %rdx
	movq	-3256(%rbp), %rax
	cmpq	$0, -3272(%rbp)
	setne	%r11b
	leaq	(%rax,%rdx,8), %rbx
	movq	8(%r12,%r11,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L10287
	cmpw	$54, %dx
	je	.L10287
	cmpw	$55, %dx
	je	.L10287
	cmpw	$58, %dx
	je	.L10287
	cmpw	$134, %dx
	je	.L10287
	cmpw	$56, %dx
	je	.L10287
	cmpw	$140, %dx
	je	.L10287
	cmpw	$61, %dx
	je	.L27474
.L10307:
	movslq	-3244(%rbp),%r9
	movl	-6768(%rbp), %ecx
	movl	%r14d, (%rsp)
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	sall	$3, %ecx
	movq	%r9, 8(%rsp)
	mov	%ecx, %esi
	movl	%r14d, %r9d
	movq	(%rbx), %rdi
	movl	$1, %ecx
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L10287
.L27474:
	movzbl	2(%rcx), %r8d
	cmpl	%r14d, %r8d
	jne	.L10307
	jmp	.L10287
.L24300:
	movq	8(%r12), %rdx
	jmp	.L10303
.L24532:
	movl	%r14d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L10297
	cmpl	%eax, 32(%rdx)
	jae	.L10298
.L24299:
	movzwl	(%r12), %edx
	jmp	.L10296
.L10298:
	movq	-3272(%rbp), %rbx
	movl	%r14d, %edi
	call	get_mode_alignment
	mov	%eax, %esi
	salq	$3, %rbx
	movq	%rbx, %rax
	cqto
	idivq	%rsi
	testq	%rdx, %rdx
	jne	.L24299
	movq	-3280(%rbp), %rax
	movzbl	mode_size(%rax), %edi
	cmpl	%edi, -6768(%rbp)
	jne	.L24299
	movl	%r14d, %edi
	call	gen_reg_rtx
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-3264(%rbp), %rdx
	movq	-3256(%rbp), %r11
	movq	%r12, %rdi
	movl	%r14d, %esi
	leaq	(%r11,%rdx,8), %rbx
	movq	-3272(%rbp), %rdx
	movq	%rax, (%rbx)
	call	adjust_address_1
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L10287
.L10297:
	cmpl	$8, %eax
	ja	.L24299
	jmp	.L10298
.L10293:
	movq	-6840(%rbp), %r9
	movzbl	2(%r9), %ecx
	movzbl	%cl, %r8d
	cmpl	%r14d, %r8d
	je	.L10291
	testb	%cl, %cl
	je	.L10291
	jmp	.L10292
.L27447:
	cmpb	$29, 16(%r14)
	jne	.L9744
	movq	%r14, %rdi
	call	expr_size
	cmpw	$54, (%rax)
	movq	%rax, -6584(%rbp)
	je	.L27475
.L9745:
	movq	sizetype_tab(%rip), %rdi
	movq	-6584(%rbp), %rsi
	call	make_tree
	xorl	%esi, %esi
	movslq	32(%r14),%rdi
	movq	%rax, %r12
	call	size_int_wide
	movq	%r12, %rsi
	movl	$78, %edi
	movq	%rax, %rdx
	call	size_binop
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	movq	%rax, -3136(%rbp)
	call	expand_expr
	xorl	%edx, %edx
	movl	ptr_mode(%rip), %edi
	movq	%rax, %rsi
	movq	$0, -6712(%rbp)
	call	convert_to_mode
	movl	$8, %edx
	movq	-6840(%rbp), %r14
	movq	%rax, -6632(%rbp)
	movq	%r15, -6648(%rbp)
	movq	%rax, -6664(%rbp)
	movq	%r14, -6656(%rbp)
	movq	16(%r15), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L9948
	movl	32(%rax), %edx
.L9948:
	movq	-6840(%rbp), %rdi
	movq	16(%rdi), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L9949
	cmpl	32(%rax), %edx
	jb	.L9950
.L9945:
	testq	%rcx, %rcx
	movl	$8, -6636(%rbp)
	je	.L9946
	movl	32(%rcx), %r11d
	movl	%r11d, -6636(%rbp)
.L9946:
	cmpb	$51, 2(%r15)
	jne	.L25547
	movq	-6840(%rbp), %rdx
	cmpb	$51, 2(%rdx)
	jne	.L25546
	movzwl	(%r15), %eax
	cmpl	$71, %eax
	je	.L9957
	cmpl	$66, %eax
	je	.L27476
.L9961:
	cmpl	$75, %eax
	je	.L9965
	cmpl	$78, %eax
	je	.L9965
.L9960:
	movq	-6840(%rbp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L9970
	cmpl	$66, %eax
	je	.L27477
.L9974:
	cmpl	$75, %eax
	je	.L9978
	cmpl	$78, %eax
	je	.L9978
.L9973:
	movq	-6632(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L9983
	cmpl	$66, %eax
	je	.L27478
.L9987:
	cmpl	$75, %eax
	je	.L9991
	cmpl	$78, %eax
	je	.L9991
.L9986:
	movq	-6648(%rbp), %rsi
	cmpw	$66, (%rsi)
	jne	.L25545
	movq	-6656(%rbp), %r8
	cmpw	$66, (%r8)
	jne	.L25544
	cmpq	$0, -6664(%rbp)
	je	.L25543
	movq	-6664(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L27479
.L9999:
	shrl	$3, -6636(%rbp)
	xorl	%edi, %edi
	mov	-6636(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -3160(%rbp)
	testl	%r12d, %r12d
	je	.L23345
.L10132:
	movslq	%r12d,%rax
	movl	movstr_optab(,%rax,4), %edx
	movq	%rax, -3168(%rbp)
	cmpl	$1317, %edx
	je	.L10118
	movq	-6664(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L27480
.L10122:
	testb	$2, target_flags+3(%rip)
	je	.L10123
	movq	-3168(%rbp), %rcx
	cmpw	$63, mode_bitsize(%rcx,%rcx)
.L24617:
	jbe	.L10118
.L10121:
	movslq	%edx,%rax
	leaq	(%rax,%rax,4), %r11
	movq	%rax, -3176(%rbp)
	movq	insn_data+24(,%r11,8), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L10125
	movq	-6648(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L10118
.L10125:
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L27481
.L10126:
	movq	72(%r14), %rax
	testq	%rax, %rax
	je	.L10127
	xorl	%esi, %esi
	movq	-3160(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L10118
.L10127:
	call	get_last_insn
	movl	$1, %edx
	movq	-6664(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -3184(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r14), %rax
	testq	%rax, %rax
	jne	.L27482
.L10128:
	movq	-3176(%rbp), %rsi
	movq	-6648(%rbp), %rdi
	xorl	%eax, %eax
	movq	%rbx, %rdx
	movq	-3160(%rbp), %rcx
	leaq	(%rsi,%rsi,4), %r9
	movq	-6656(%rbp), %rsi
	call	*insn_data+16(,%r9,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24470
	movq	-3184(%rbp), %rdi
	call	delete_insns_since
.L10118:
	movq	-3168(%rbp), %rdx
	movzbl	mode_wider_mode(%rdx), %r12d
	testl	%r12d, %r12d
	jne	.L10132
.L23345:
	testb	$2, target_flags+3(%rip)
	movq	-6648(%rbp), %r14
	movl	$0, volatile_ok(%rip)
	setne	%cl
	movq	8(%r14), %rsi
	movzbl	%cl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-6656(%rbp), %r10
	testb	$2, target_flags+3(%rip)
	setne	%r8b
	movq	%rax, %r14
	movq	8(%r10), %rsi
	movzbl	%r8b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-6664(%rbp), %rsi
	movq	sizetype_tab(%rip), %rdi
	movq	%rax, %rbx
	movzbl	61(%rdi), %r12d
	shrb	$1, %r12b
	movzbl	%r12b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, -6704(%rbp)
	je	.L27483
.L10141:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	-6704(%rbp), %rsi
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %r10
	movq	%rax, (%rbx)
	movq	(%r12), %rcx
	movq	8(%r10), %rdi
	movq	(%rcx), %r8
	movq	$0, (%r8)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r12, %rcx
	movq	fn.1(%rip), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%rdi), %rbx
	movl	$53, %edi
	movq	8(%rbx), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	jne	.L27484
.L10130:
	movq	-6632(%rbp), %rdx
	cmpw	$54, (%rdx)
	je	.L27485
	movq	sizetype_tab(%rip), %r14
	movq	-6632(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	optab_table+16(%rip), %rsi
	movq	-6584(%rbp), %rdx
	xorl	%r9d, %r9d
	movzbl	61(%r14), %r12d
	movl	$3, (%rsp)
	shrb	$1, %r12b
	movzbl	%r12b, %edi
	call	expand_binop
	movq	-3136(%rbp), %rdi
	movq	%rax, %rbx
	call	highest_pow2_factor
	movq	-6632(%rbp), %rsi
	movq	%r15, %rdi
	movq	%rax, %rdx
	call	offset_address
	movq	%rax, %r15
	call	gen_label_rtx
	xorl	%r9d, %r9d
	movq	%rax, -6712(%rbp)
	movq	const_int_rtx+512(%rip), %rsi
	movq	%rbx, %rdi
	movzbl	2(%rbx), %r8d
	movl	$107, %edx
	xorl	%ecx, %ecx
	movq	%rax, (%rsp)
	call	emit_cmp_and_jump_insns
.L10144:
	cmpq	const_int_rtx+512(%rip), %rbx
	je	.L10145
	cmpw	$66, (%r15)
	movq	%r15, -6728(%rbp)
	je	.L27486
	movzbl	2(%r15), %edi
	call	get_mode_alignment
.L24618:
	movl	%eax, -6716(%rbp)
.L10147:
	movzbl	2(%r15), %eax
	cmpb	$51, %al
	je	.L10150
	cmpw	$54, (%rbx)
	je	.L27487
.L10150:
	movzwl	(%r15), %eax
	cmpl	$71, %eax
	je	.L10152
	cmpl	$66, %eax
	je	.L27488
.L10156:
	cmpl	$75, %eax
	je	.L10160
	cmpl	$78, %eax
	je	.L10160
.L10155:
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L10165
	cmpl	$66, %eax
	je	.L27489
.L10169:
	cmpl	$75, %eax
	je	.L10173
	cmpl	$78, %eax
	je	.L10173
.L10168:
	cmpw	$54, (%rbx)
	je	.L27490
.L10178:
	shrl	$3, -6716(%rbp)
	xorl	%edi, %edi
	mov	-6716(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r14d
	movq	%rax, -3208(%rbp)
	testl	%r14d, %r14d
	je	.L23359
.L10272:
	movslq	%r14d,%rsi
	movl	clrstr_optab(,%rsi,4), %edx
	movq	%rsi, -3216(%rbp)
	cmpl	$1317, %edx
	je	.L10259
	cmpw	$54, (%rbx)
	je	.L27491
.L10263:
	testb	$2, target_flags+3(%rip)
	je	.L10264
	movq	-3216(%rbp), %r8
	cmpw	$63, mode_bitsize(%r8,%r8)
.L24622:
	jbe	.L10259
.L10262:
	movslq	%edx,%rax
	leaq	(%rax,%rax,4), %rcx
	movq	%rax, -3224(%rbp)
	movq	insn_data+24(,%rcx,8), %rsi
	movq	(%rsi), %rax
	movq	%rsi, -3232(%rbp)
	testq	%rax, %rax
	je	.L10266
	movq	-6728(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L10259
.L10266:
	movq	-3232(%rbp), %rdi
	movq	48(%rdi), %rax
	testq	%rax, %rax
	je	.L10267
	xorl	%esi, %esi
	movq	-3208(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L10259
.L10267:
	call	get_last_insn
	movl	$1, %edx
	movq	%rbx, %rsi
	movl	%r14d, %edi
	movq	%rax, -3240(%rbp)
	call	convert_to_mode
	movq	-3232(%rbp), %rdx
	movq	%rax, %r12
	movq	24(%rdx), %rax
	testq	%rax, %rax
	jne	.L27492
.L10268:
	movq	-3224(%rbp), %r11
	movq	-6728(%rbp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	-3208(%rbp), %rdx
	leaq	(%r11,%r11,4), %r14
	call	*insn_data+16(,%r14,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24623
	movq	-3240(%rbp), %rdi
	call	delete_insns_since
.L10259:
	movq	-3216(%rbp), %r12
	movzbl	mode_wider_mode(%r12), %r14d
	testl	%r14d, %r14d
	jne	.L10272
.L23359:
	testb	$2, target_flags+3(%rip)
	movq	-6728(%rbp), %r10
	setne	%sil
	movzbl	%sil, %edi
	movq	8(%r10), %rsi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%rbx, %rsi
	movq	sizetype_tab(%rip), %r9
	movq	%rax, %r14
	movzbl	61(%r9), %r8d
	shrb	$1, %r8b
	movzbl	%r8b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.0(%rip)
	movq	%rax, -6760(%rbp)
	je	.L27493
.L10277:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	const_int_rtx+512(%rip), %rsi
	movq	integer_types+40(%rip), %rdi
	movq	%rax, %r12
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	-6760(%rbp), %rsi
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.0(%rip), %r9
	movq	%rax, (%rbx)
	movq	(%r12), %rsi
	movq	8(%r9), %rdi
	movq	(%rsi), %r10
	movq	$0, (%r10)
	call	build_pointer_type
	movq	fn.0(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	movq	%r12, %rcx
	movl	$53, %edi
	movq	fn.0(%rip), %r8
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%r8), %r11
	xorl	%r8d, %r8d
	movq	8(%r11), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	jne	.L27494
.L10145:
	cmpq	$0, -6712(%rbp)
	je	.L9720
	movq	-6712(%rbp), %rdi
	call	emit_label
	jmp	.L9720
.L27494:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
.L24623:
	call	emit_insn
	jmp	.L10145
.L27493:
	movl	$.LC7, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.0(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.0(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.0, %edi
	movq	%rax, fn.0(%rip)
	call	ggc_add_tree_root
	movq	fn.0(%rip), %rdx
	xorl	%esi, %esi
	orb	$1, 49(%rdx)
	movq	fn.0(%rip), %rdi
	orb	$8, 18(%rdi)
	movq	fn.0(%rip), %rcx
	orb	$64, 50(%rcx)
	movq	fn.0(%rip), %rbx
	orb	$2, 18(%rbx)
	movq	fn.0(%rip), %rdi
	call	make_decl_rtl
	movq	fn.0(%rip), %rdi
	call	assemble_external
	jmp	.L10277
.L27492:
	movq	%r12, %rdi
	movl	%r14d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L10268
	movq	%r12, %rsi
	movl	%r14d, %edi
	call	copy_to_mode_reg
	movq	%rax, %r12
	jmp	.L10268
.L10264:
	movq	-3216(%rbp), %r9
	cmpw	$31, mode_bitsize(%r9,%r9)
	jmp	.L24622
.L27491:
	movq	mode_mask_array(,%rsi,8), %r12
	shrq	$1, %r12
	cmpq	%r12, 8(%rbx)
	jbe	.L10262
	jmp	.L10263
.L27490:
	movq	8(%rbx), %r14
	xorl	%r8d, %r8d
	movl	$17, %esi
.L10191:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23348
.L10188:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %r12
	cmpq	%rsi, %r12
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L10188
.L23348:
	testl	%edi, %edi
	je	.L10181
	movslq	%edi,%r12
	movq	%r12, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L10190
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L10190
	movzbq	mode_size(%r12), %r9
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%r9
	addq	%rax, %r8
	movq	%rdx, %r14
.L10190:
	movzbq	mode_size(%r12), %rsi
	cmpq	$1, %rsi
	ja	.L10191
.L10181:
	testq	%r14, %r14
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L10194
	movq	ix86_cost(%rip), %rdx
	mov	40(%rdx), %esi
	cmpq	%rsi, %r8
	jae	.L10178
.L10195:
	movq	8(%rbx), %r8
	movq	-6728(%rbp), %rdi
	xorl	%ecx, %ecx
	movq	$clear_by_pieces_1, -232(%rbp)
	movq	$0, -224(%rbp)
	testb	$2, target_flags+3(%rip)
	setne	%cl
	leaq	-272(%rbp), %r12
	xorl	%esi, %esi
	movq	%r8, -248(%rbp)
	movq	%rdi, -272(%rbp)
	movq	8(%rdi), %r8
	movq	$0, -240(%rbp)
	movl	$0, -6740(%rbp)
	movq	%r8, -264(%rbp)
	leaq	5(,%rcx,4), %r10
	movzwl	(%r8), %edx
	movq	%r10, -6752(%rbp)
	leaq	16(%r12), %rcx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L10199
	cmpw	$99, %dx
	je	.L10199
	cmpw	$98, %dx
	je	.L10199
.L10198:
	movl	%esi, (%rcx)
	movl	$0, 20(%r12)
	leaq	56(%r12), %rdx
	movzwl	(%r8), %eax
	xorl	%ecx, %ecx
	cmpw	$96, %ax
	je	.L10201
	cmpw	$98, %ax
	je	.L10201
.L10200:
	movl	%ecx, (%rdx)
	movl	56(%r12), %eax
	testl	%eax, %eax
	je	.L10202
	movq	24(%r12), %r14
	movq	%r14, 32(%r12)
.L10202:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L10203
	movq	24(%r12), %r14
	movq	$0, -6736(%rbp)
	movl	$17, %esi
.L10216:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23351
.L10213:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %r9
	cmpq	%rsi, %r9
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L10213
.L23351:
	testl	%edi, %edi
	je	.L10206
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L10215
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %edx
	cmpl	%eax, %edx
	jb	.L10215
	movzbq	mode_size(%rbx), %rdi
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%rdi
	addq	%rax, -6736(%rbp)
	movq	%rdx, %r14
.L10215:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L10216
.L10206:
	testq	%r14, %r14
	jne	.L25529
	cmpq	$2, -6736(%rbp)
	jbe	.L10203
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23353
.L10224:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %r14
	cmpq	-6752(%rbp), %r14
	cmovae	-6740(%rbp), %ecx
	movl	%ecx, -6740(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L10224
.L23353:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L10203
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L10228
	cmpw	$54, %dx
	je	.L10228
	cmpw	$55, %dx
	je	.L10228
	cmpw	$58, %dx
	je	.L10228
	cmpw	$134, %dx
	je	.L10228
	cmpw	$56, %dx
	je	.L10228
	cmpw	$140, %dx
	je	.L10228
.L10203:
	cmpq	$1, -6752(%rbp)
	jbe	.L10231
.L10252:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23356
.L10238:
	movslq	%ecx,%r8
	movzbq	mode_size(%r8), %r9
	cmpq	-6752(%rbp), %r9
	cmovae	-6740(%rbp), %ecx
	movl	%ecx, -6740(%rbp)
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L10238
.L23356:
	movl	-6740(%rbp), %eax
	testl	%eax, %eax
	je	.L10231
	movslq	-6740(%rbp),%rsi
	movq	%rsi, -3192(%rbp)
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	movl	8(%rsi), %ebx
	cmpl	$1317, %ebx
	je	.L10240
	movl	-6740(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r10d
	cmpl	%eax, %r10d
	jb	.L10240
	movslq	%ebx,%rdi
	movq	-3192(%rbp), %rax
	leaq	(%rdi,%rdi,4), %rcx
	movq	insn_data+16(,%rcx,8), %rdx
	movq	%rdx, -3200(%rbp)
	movzbq	mode_size(%rax), %rdx
	cmpq	%rdx, 24(%r12)
	movq	%rdx, %r14
	jb	.L10240
	movl	56(%r12), %ecx
.L10250:
	testl	%ecx, %ecx
	je	.L10244
	subq	%rdx, 32(%r12)
.L10244:
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L10245
	movq	(%r12), %rdi
	movl	-6740(%rbp), %esi
	movl	$1, %r8d
	movq	8(%r12), %rdx
	movq	32(%r12), %rcx
	call	adjust_automodify_address_1
.L24621:
	movl	-6740(%rbp), %edx
	movq	%rax, %rbx
	movq	48(%r12), %rdi
	movq	32(%r12), %rsi
	call	*40(%r12)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	*-3200(%rbp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L10249
	addq	%r14, 32(%r12)
.L10249:
	movq	24(%r12), %rbx
	movq	%r14, %rdx
	subq	%r14, %rbx
	cmpq	%r14, %rbx
	movq	%rbx, 24(%r12)
	jae	.L10250
.L10240:
	movq	-3192(%rbp), %r11
	movzbq	mode_size(%r11), %r14
	cmpq	$1, %r14
	movq	%r14, -6752(%rbp)
	ja	.L10252
.L10231:
	cmpq	$0, 24(%r12)
	je	.L10145
	jmp	.L25451
.L10245:
	movq	(%r12), %rdi
	movl	-6740(%rbp), %esi
	movl	$1, %ecx
	movq	32(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24621
.L10228:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, 8(%r12)
	jmp	.L10203
.L10201:
	movl	$1, %ecx
	jmp	.L10200
.L10199:
	movl	$1, %esi
	jmp	.L10198
.L10194:
	cmpq	$2, %r8
	ja	.L10178
	jmp	.L10195
.L10173:
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbx), %rdi
	movq	%rax, %r14
	call	protect_from_queue
	cmpq	8(%rbx), %r14
	movq	%rax, %r12
	je	.L27495
.L10175:
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r14, 8(%rax)
	movq	%r12, 16(%rax)
	jmp	.L10168
.L27495:
	cmpq	16(%rbx), %rax
	jne	.L10175
	jmp	.L10168
.L27489:
	cmpb	$51, 2(%rbx)
	je	.L10166
	movq	8(%rbx), %r14
	cmpw	$71, (%r14)
	je	.L27496
.L10166:
	cmpl	$66, %eax
	jne	.L10169
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%rbx), %rax
	movq	%rax, %r12
	je	.L10168
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r12, 8(%rax)
	jmp	.L10168
.L27496:
	movq	8(%r14), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r14)
	movq	%rax, %r12
	je	.L10167
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L10168
.L10167:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24620:
	movq	%rax, %rbx
	jmp	.L10168
.L10165:
	cmpq	$0, 16(%rbx)
	je	.L27497
	movq	24(%rbx), %rax
	testq	%rax, %rax
	jne	.L24620
	movq	8(%rbx), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%rbx), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	16(%rbx), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbx), %rbx
	jmp	.L10168
.L27497:
	movq	8(%rbx), %rdi
	call	copy_to_reg
	jmp	.L24620
.L10160:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, %r14
	call	protect_from_queue
	cmpq	8(%r15), %r14
	movq	%rax, %r12
	je	.L27498
.L10162:
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, -6728(%rbp)
	movq	%r14, 8(%rax)
	movq	-6728(%rbp), %rax
	movq	%r12, 16(%rax)
	jmp	.L10155
.L27498:
	cmpq	16(%r15), %rax
	jne	.L10162
	jmp	.L10155
.L27488:
	jne	.L10156
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r15), %rax
	movq	%rax, %r12
	je	.L10155
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, -6728(%rbp)
	movq	%r12, 8(%rax)
	jmp	.L10155
.L10152:
	cmpq	$0, 16(%r15)
	je	.L27499
	movq	24(%r15), %r9
	testq	%r9, %r9
	movq	%r9, -6728(%rbp)
	jne	.L10155
	movq	8(%r15), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %rax
.L24619:
	movq	%rax, -6728(%rbp)
	jmp	.L10155
.L27499:
	movq	8(%r15), %rdi
	call	copy_to_reg
	jmp	.L24619
.L27487:
	movzbl	%al, %edx 
	movzbl	mode_size(%rdx), %r11d
	cmpl	8(%rbx), %r11d
	jne	.L10150
	movq	const_tiny_rtx(,%rdx,8), %rsi
	movq	%r15, %rdi
	call	emit_move_insn
	jmp	.L10145
.L27486:
	movq	16(%r15), %rax
	movl	$8, -6716(%rbp)
	testq	%rax, %rax
	je	.L10147
	movl	32(%rax), %eax
	jmp	.L24618
.L27485:
	movq	8(%rdx), %rsi
	movq	-6584(%rbp), %rdi
	negq	%rsi
	call	plus_constant_wide
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r15, %rdi
	movl	$51, %esi
	movq	%rax, %rbx
	movq	-6632(%rbp), %r15
	movq	8(%r15), %rdx
	call	adjust_address_1
	movq	%rax, %r15
	jmp	.L10144
.L27484:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L10130
.L27483:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %rdx
	orb	$1, 49(%rdx)
	movq	fn.1(%rip), %rsi
	orb	$8, 18(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %r9
	orb	$64, 50(%r9)
	movq	fn.1(%rip), %r11
	orb	$2, 18(%r11)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L10141
.L24470:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L10130
.L27482:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L10128
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L10128
.L27481:
	movq	-6656(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L10118
	jmp	.L10126
.L10123:
	movq	-3168(%rbp), %rbx
	cmpw	$31, mode_bitsize(%rbx,%rbx)
	jmp	.L24617
.L27480:
	movq	mode_mask_array(,%rax,8), %r10
	shrq	$1, %r10
	cmpq	%r10, 8(%rcx)
	jbe	.L10121
	jmp	.L10122
.L27479:
	movq	8(%rcx), %r12
	xorl	%r14d, %r14d
	movl	$17, %esi
.L10012:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23334
.L10009:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L10009
.L23334:
	testl	%edi, %edi
	je	.L10002
	movslq	%edi,%rbx
	movq	%rbx, %r10
	salq	$4, %r10
	addq	optab_table+240(%rip), %r10
	cmpl	$1317, 8(%r10)
	je	.L10011
	call	get_mode_alignment
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L10011
	movzbq	mode_size(%rbx), %r11
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r11
	addq	%rax, %r14
	movq	%rdx, %r12
.L10011:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L10012
.L10002:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L10015
	movq	ix86_cost(%rip), %rsi
	mov	40(%rsi), %edx
	cmpq	%rdx, %r14
	jae	.L9999
.L10016:
	movq	-6664(%rbp), %r8
	movq	-6656(%rbp), %r11
	movq	-6648(%rbp), %rdi
	movq	-6648(%rbp), %r10
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r14b
	movq	8(%r11), %r8
	movq	$0, -456(%rbp)
	movl	$0, -6684(%rbp)
	movq	%r8, -480(%rbp)
	movzbl	%r14b, %ecx
	movq	8(%rdi), %rbx
	movq	%r10, -512(%rbp)
	leal	5(,%rcx,4), %r14d
	xorl	%ecx, %ecx
	movq	%rbx, -6672(%rbp)
	movq	-6672(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-96(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L10021
	cmpw	$99, %dx
	je	.L10021
	cmpw	$98, %dx
	je	.L10021
.L10020:
	movq	-6672(%rbp), %rsi
	movl	%ecx, -496(%rbp)
	xorl	%edx, %edx
	movzwl	(%rsi), %eax
	cmpw	$96, %ax
	je	.L10023
	cmpw	$98, %ax
	je	.L10023
.L10022:
	movl	%edx, -448(%rbp)
	movq	-6672(%rbp), %rax
	xorl	%ecx, %ecx
	movq	-6656(%rbp), %rdx
	movq	%rax, -504(%rbp)
	movq	%rdx, -488(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L10026
	cmpw	$99, %dx
	je	.L10026
	cmpw	$98, %dx
	je	.L10026
.L10025:
	movl	-448(%rbp), %eax
	movl	%ecx, -472(%rbp)
	movl	$0, -468(%rbp)
	movl	$0, -492(%rbp)
	testl	%eax, %eax
	je	.L10027
	movq	%r12, -456(%rbp)
.L10027:
	movl	-472(%rbp), %eax
	movq	%r12, -464(%rbp)
	testl	%eax, %eax
	je	.L10029
	movl	-496(%rbp), %r10d
	testl	%r10d, %r10d
	jne	.L10028
.L10029:
	movq	$0, -6680(%rbp)
	movl	$17, %esi
.L10042:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23337
.L10039:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %r11
	cmpq	%rsi, %r11
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L10039
.L23337:
	testl	%edi, %edi
	je	.L10032
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L10041
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movq	-9592(%rbp), %r8
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L10041
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, -6680(%rbp)
	movq	%rdx, %r12
.L10041:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L10042
.L10032:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, -6680(%rbp)
	jbe	.L10028
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23339
.L10050:
	movslq	%ecx,%r10
	movzbl	mode_size(%r10), %edx
	cmpl	%r14d, %edx
	cmovae	-6684(%rbp), %ecx
	movl	%ecx, -6684(%rbp)
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L10050
.L23339:
	movl	-472(%rbp), %eax
	testl	%eax, %eax
	jne	.L10056
	movzwl	(%r8), %edx
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L10054
	cmpw	$54, %dx
	je	.L10054
	cmpw	$55, %dx
	je	.L10054
	cmpw	$58, %dx
	je	.L10054
	cmpw	$134, %dx
	je	.L10054
	cmpw	$56, %dx
	je	.L10054
	cmpw	$140, %dx
	je	.L10054
.L10056:
	movl	-496(%rbp), %r8d
	testl	%r8d, %r8d
	jne	.L10028
	movq	-6672(%rbp), %rcx
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L10058
	cmpw	$54, %dx
	je	.L10058
	cmpw	$55, %dx
	je	.L10058
	cmpw	$58, %dx
	je	.L10058
	cmpw	$134, %dx
	je	.L10058
	cmpw	$56, %dx
	je	.L10058
	cmpw	$140, %dx
	je	.L10058
.L10028:
	cmpl	$1, %r14d
	jbe	.L10061
.L10112:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23342
.L10068:
	movslq	%ecx,%rdi
	movzbl	mode_size(%rdi), %r12d
	cmpl	%r14d, %r12d
	cmovae	-6684(%rbp), %ecx
	movl	%ecx, -6684(%rbp)
	movzbl	mode_wider_mode(%rdi), %ecx
	testl	%ecx, %ecx
	jne	.L10068
.L23342:
	movl	-6684(%rbp), %r14d
	testl	%r14d, %r14d
	je	.L10061
	movslq	-6684(%rbp),%rsi
	movq	%rsi, %r9
	movq	%rsi, -3144(%rbp)
	salq	$4, %r9
	addq	optab_table+240(%rip), %r9
	movl	8(%r9), %ebx
	cmpl	$1317, %ebx
	je	.L10070
	movl	-6684(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r10d
	cmpl	%eax, %r10d
	jb	.L10070
	movslq	%ebx,%r8
	movq	-3144(%rbp), %rax
	leaq	-512(%rbp), %r12
	leaq	(%r8,%r8,4), %rbx
	movq	$0, -6696(%rbp)
	movq	insn_data+16(,%rbx,8), %rdx
	movq	%rdx, -3152(%rbp)
	movzbq	mode_size(%rax), %rdx
	cmpq	%rdx, -464(%rbp)
	movq	%rdx, -5944(%rbp)
	jb	.L10070
	movl	-448(%rbp), %ecx
.L10110:
	testl	%ecx, %ecx
	je	.L10074
	subq	%rdx, 56(%r12)
.L10074:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L10075
	movl	16(%r12), %r11d
	testl	%r11d, %r11d
	je	.L10076
	movl	-6684(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24613:
	movq	%rax, -6696(%rbp)
.L10075:
	movl	40(%r12), %ecx
	testl	%ecx, %ecx
	je	.L10078
	movq	24(%r12), %rdi
	movl	-6684(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24614:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L27500
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L10084
	movq	-3144(%rbp), %r9
	movzbl	mode_size(%r9), %edi
	leal	7(%rdi), %edx
	andl	$-8, %edx
.L10085:
	movq	cfun(%rip), %r8
	andl	$33554432, %esi
	movq	16(%r8), %rbx
	leaq	8(%rbx), %rdi
	movl	8(%rbx), %ecx
	je	.L10086
	movq	-3144(%rbp), %rsi
	movzbl	mode_size(%rsi), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24615:
	leal	(%rax,%rcx), %r9d
	movq	-3144(%rbp), %rcx
	movl	%r9d, (%rdi)
	salq	$4, %rcx
	addq	optab_table+384(%rip), %rcx
	movl	8(%rcx), %eax
	cmpl	$1317, %eax
	je	.L10088
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rdi
	movq	insn_data+24(,%rdi,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L10089
	movq	%r14, %rdi
	movl	-6684(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L27501
.L10089:
	leaq	(%rbx,%rbx,4), %r10
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r10,8)
.L24616:
	movq	%rax, %rdi
	call	emit_insn
.L10108:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L10109
	movq	-5944(%rbp), %r14
	addq	%r14, 56(%r12)
.L10109:
	movq	48(%r12), %rdi
	movq	-5944(%rbp), %rdx
	subq	-5944(%rbp), %rdi
	cmpq	%rdx, %rdi
	movq	%rdi, 48(%r12)
	jae	.L10110
.L10070:
	movq	-3144(%rbp), %r12
	movzbl	mode_size(%r12), %r14d
	cmpl	$1, %r14d
	ja	.L10112
.L10061:
	cmpq	$0, -464(%rbp)
	je	.L10130
	jmp	.L25518
.L27501:
	movl	-6684(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L10089
.L10088:
	movq	-3144(%rbp), %rax
	movzbl	mode_size(%rax), %ebx
	cmpl	%edx, %ebx
	je	.L27502
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r9b
	movzbl	%r9b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r11b
	movzbl	%r11b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L10096:
	movl	-6684(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%esi, %esi
	testq	%rsi, %rsi
	movq	%rax, %rbx
	je	.L10105
	xorl	%esi, %esi
	movl	$1, %edx
	movq	%rax, %rdi
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %edx
	testl	%edx, %edx
	jne	.L27503
.L10105:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L10108
.L27503:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L10105
.L27502:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%r8b
	movzbl	%r8b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L10096
.L10086:
	movq	-3144(%rbp), %r11
	movzbl	mode_size(%r11), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24615
.L10084:
	movq	-3144(%rbp), %rax
	movzbl	mode_size(%rax), %r10d
	leal	1(%r10), %edx
	andl	$-2, %edx
	jmp	.L10085
.L27500:
	movq	%rax, %rsi
	movq	-6696(%rbp), %rdi
	xorl	%eax, %eax
	call	*-3152(%rbp)
	jmp	.L24616
.L10078:
	movq	24(%r12), %rdi
	movl	-6684(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24614
.L10076:
	movl	-6684(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24613
.L10058:
	movq	-6672(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -504(%rbp)
	jmp	.L10028
.L10054:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -480(%rbp)
	jmp	.L10056
.L10026:
	movl	$1, %ecx
	jmp	.L10025
.L10023:
	movl	$1, %edx
	jmp	.L10022
.L10021:
	movl	$1, %ecx
	jmp	.L10020
.L10015:
	cmpq	$2, %r14
	ja	.L9999
	jmp	.L10016
.L9991:
	movq	-6632(%rbp), %r10
	xorl	%esi, %esi
	movq	8(%r10), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-6632(%rbp), %rbx
	movq	%rax, %r12
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	-6632(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L27504
.L9993:
	movq	-6632(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -6664(%rbp)
	movq	%r12, 8(%rax)
	movq	-6664(%rbp), %rcx
	movq	%rbx, 16(%rcx)
	jmp	.L9986
.L27504:
	cmpq	16(%rcx), %rax
	jne	.L9993
	jmp	.L9986
.L27478:
	cmpb	$51, 2(%rdx)
	je	.L9984
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L27505
.L9984:
	cmpl	$66, %eax
	jne	.L9987
	movq	-6632(%rbp), %r9
	xorl	%esi, %esi
	movq	8(%r9), %rdi
	call	protect_from_queue
	movq	-6632(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L9986
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -6664(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L9986
.L27505:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L9985
	movq	-6632(%rbp), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -6664(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L9986
.L9985:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24612:
	movq	%rax, -6664(%rbp)
	jmp	.L9986
.L9983:
	movq	-6632(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L27506
	movq	-6632(%rbp), %rdi
	movq	24(%rdi), %r12
	testq	%r12, %r12
	movq	%r12, -6664(%rbp)
	jne	.L9986
	movq	-6632(%rbp), %rax
	movq	8(%rax), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	-6632(%rbp), %r14
	movq	%rax, %rdi
	movq	8(%r14), %rsi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r11
	movq	%r11, -6664(%rbp)
	jmp	.L9986
.L27506:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24612
.L9978:
	movq	-6840(%rbp), %r12
	xorl	%esi, %esi
	movq	8(%r12), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	-6840(%rbp), %r14
	movq	%rax, %r12
	movq	16(%r14), %rdi
	call	protect_from_queue
	movq	-6840(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L27507
.L9980:
	movq	-6840(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -6656(%rbp)
	movq	%r12, 8(%rax)
	movq	-6656(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L9973
.L27507:
	cmpq	16(%rsi), %rax
	jne	.L9980
	jmp	.L9973
.L27477:
	cmpb	$51, 2(%rbx)
	je	.L9971
	movq	8(%rbx), %r12
	cmpw	$71, (%r12)
	je	.L27508
.L9971:
	cmpl	$66, %eax
	jne	.L9974
	movq	-6840(%rbp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	movq	-6840(%rbp), %rdx
	movq	%rax, %rbx
	cmpq	8(%rdx), %rax
	je	.L9973
	movq	%rdx, %rdi
	call	copy_rtx
	movq	%rax, -6656(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L9973
.L27508:
	movq	8(%r12), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L9972
	movq	-6840(%rbp), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -6656(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L9973
.L9972:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24611:
	movq	%rax, -6656(%rbp)
	jmp	.L9973
.L9970:
	movq	-6840(%rbp), %rdx
	cmpq	$0, 16(%rdx)
	je	.L27509
	movq	-6840(%rbp), %rax
	movq	24(%rax), %r11
	testq	%r11, %r11
	movq	%r11, -6656(%rbp)
	jne	.L9973
	movq	-6840(%rbp), %r14
	movq	8(%r14), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rdx
	movq	%rdx, -6656(%rbp)
	jmp	.L9973
.L27509:
	movq	8(%rdx), %rdi
	call	copy_to_reg
	jmp	.L24611
.L9965:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r15), %r12
	movq	%rax, %rbx
	je	.L27510
.L9967:
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, -6648(%rbp)
	movq	%r12, 8(%rax)
	movq	-6648(%rbp), %rsi
	movq	%rbx, 16(%rsi)
	jmp	.L9960
.L27510:
	cmpq	16(%r15), %rax
	jne	.L9967
	jmp	.L9960
.L27476:
	jne	.L9961
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r15), %rax
	movq	%rax, %rbx
	je	.L9960
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, -6648(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L9960
.L9957:
	testq	%rsi, %rsi
	je	.L27511
	movq	24(%r15), %r8
	testq	%r8, %r8
	movq	%r8, -6648(%rbp)
	jne	.L9960
	movq	8(%r15), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %rbx
	movq	%rbx, -6648(%rbp)
	jmp	.L9960
.L27511:
	movq	8(%r15), %rdi
	call	copy_to_reg
	movq	%rax, -6648(%rbp)
	jmp	.L9960
.L9950:
	testq	%rsi, %rsi
	movl	$8, -6636(%rbp)
	je	.L9946
	movl	32(%rsi), %eax
	movl	%eax, -6636(%rbp)
	jmp	.L9946
.L9949:
	cmpl	$7, %edx
	ja	.L9945
	jmp	.L9950
.L27475:
	movq	-6584(%rbp), %rax
	movslq	32(%r14),%r9
	cmpq	%r9, 8(%rax)
	jge	.L9745
	movq	-6840(%rbp), %rcx
	movq	%r15, -6568(%rbp)
	movl	$8, %edx
	movq	%rcx, -6576(%rbp)
	movq	16(%r15), %rax
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L9749
	movl	32(%rax), %edx
.L9749:
	movq	-6840(%rbp), %rbx
	movq	16(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.L9750
	cmpl	32(%rax), %edx
	jb	.L9751
.L9746:
	testq	%rcx, %rcx
	movl	$8, -6560(%rbp)
	je	.L9747
	movl	32(%rcx), %r10d
	movl	%r10d, -6560(%rbp)
.L9747:
	cmpb	$51, 2(%r15)
	jne	.L25547
	movq	-6840(%rbp), %r12
	cmpb	$51, 2(%r12)
	jne	.L25546
	movzwl	(%r15), %eax
	cmpl	$71, %eax
	je	.L9758
	cmpl	$66, %eax
	je	.L27512
.L9762:
	cmpl	$75, %eax
	je	.L9766
	cmpl	$78, %eax
	je	.L9766
.L9761:
	movq	-6840(%rbp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$71, %eax
	je	.L9771
	cmpl	$66, %eax
	je	.L27513
.L9775:
	cmpl	$75, %eax
	je	.L9779
	cmpl	$78, %eax
	je	.L9779
.L9774:
	movq	-6584(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L9784
	cmpl	$66, %eax
	je	.L27514
.L9788:
	cmpl	$75, %eax
	je	.L9792
	cmpl	$78, %eax
	je	.L9792
.L9787:
	movq	-6568(%rbp), %r14
	cmpw	$66, (%r14)
	jne	.L25545
	movq	-6576(%rbp), %r11
	cmpw	$66, (%r11)
	jne	.L25544
	cmpq	$0, -6584(%rbp)
	je	.L25543
	movq	-6584(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L27515
.L9800:
	shrl	$3, -6560(%rbp)
	xorl	%edi, %edi
	mov	-6560(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -3104(%rbp)
	testl	%r12d, %r12d
	je	.L23331
.L9933:
	movslq	%r12d,%rax
	movl	movstr_optab(,%rax,4), %edx
	movq	%rax, -3112(%rbp)
	cmpl	$1317, %edx
	je	.L9919
	movq	-6584(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L27516
.L9923:
	testb	$2, target_flags+3(%rip)
	je	.L9924
	movq	-3112(%rbp), %rcx
	cmpw	$63, mode_bitsize(%rcx,%rcx)
.L24610:
	jbe	.L9919
.L9922:
	movslq	%edx,%rax
	leaq	(%rax,%rax,4), %r11
	movq	%rax, -3120(%rbp)
	movq	insn_data+24(,%r11,8), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L9926
	movq	-6568(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L9919
.L9926:
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L27517
.L9927:
	movq	72(%r14), %rax
	testq	%rax, %rax
	je	.L9928
	xorl	%esi, %esi
	movq	-3104(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L9919
.L9928:
	call	get_last_insn
	movl	$1, %edx
	movq	-6584(%rbp), %rsi
	movl	%r12d, %edi
	movq	%rax, -3128(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r14), %rax
	testq	%rax, %rax
	jne	.L27518
.L9929:
	movq	-3120(%rbp), %rsi
	movq	-6568(%rbp), %rdi
	xorl	%eax, %eax
	movq	%rbx, %rdx
	movq	-3104(%rbp), %rcx
	leaq	(%rsi,%rsi,4), %r14
	movq	-6576(%rbp), %rsi
	call	*insn_data+16(,%r14,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L24472
	movq	-3128(%rbp), %rdi
	call	delete_insns_since
.L9919:
	movq	-3112(%rbp), %rdx
	movzbl	mode_wider_mode(%rdx), %r12d
	testl	%r12d, %r12d
	jne	.L9933
.L23331:
	testb	$2, target_flags+3(%rip)
	movq	-6568(%rbp), %r10
	movl	$0, volatile_ok(%rip)
	setne	%cl
	movq	8(%r10), %rsi
	movzbl	%cl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-6576(%rbp), %rbx
	testb	$2, target_flags+3(%rip)
	setne	%r9b
	movq	%rax, %r14
	movq	8(%rbx), %rsi
	movzbl	%r9b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-6584(%rbp), %rsi
	movq	sizetype_tab(%rip), %r12
	movq	%rax, %rbx
	movzbl	61(%r12), %r8d
	shrb	$1, %r8b
	movzbl	%r8b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, -6624(%rbp)
	je	.L27519
.L9942:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%rax, (%r12)
	movq	%rax, %rbx
	movq	-6624(%rbp), %rsi
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %r9
	movq	%rax, (%rbx)
	movq	(%r12), %rcx
	movq	8(%r9), %rdi
	movq	(%rcx), %r10
	movq	$0, (%r10)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	movq	%r12, %rcx
	movl	$53, %edi
	movq	fn.1(%rip), %rbx
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%rbx), %r8
	movq	8(%r8), %rsi
	xorl	%r8d, %r8d
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	je	.L9720
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	jmp	.L24633
.L27519:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %rdx
	orb	$1, 49(%rdx)
	movq	fn.1(%rip), %rsi
	orb	$8, 18(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %r11
	orb	$64, 50(%r11)
	movq	fn.1(%rip), %rdi
	orb	$2, 18(%rdi)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L9942
.L27518:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L9929
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L9929
.L27517:
	movq	-6576(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L9919
	jmp	.L9927
.L9924:
	movq	-3112(%rbp), %rdi
	cmpw	$31, mode_bitsize(%rdi,%rdi)
	jmp	.L24610
.L27516:
	movq	mode_mask_array(,%rax,8), %r9
	shrq	$1, %r9
	cmpq	%r9, 8(%rcx)
	jbe	.L9922
	jmp	.L9923
.L27515:
	movq	8(%rcx), %r12
	xorl	%r14d, %r14d
	movl	$17, %esi
.L9813:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23320
.L9810:
	movslq	%ecx,%r8
	movzbq	mode_size(%r8), %r9
	cmpq	%rsi, %r9
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L9810
.L23320:
	testl	%edi, %edi
	je	.L9803
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L9812
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L9812
	movzbq	mode_size(%rbx), %r10
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r10
	addq	%rax, %r14
	movq	%rdx, %r12
.L9812:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L9813
.L9803:
	testq	%r12, %r12
	jne	.L25529
	movl	optimize_size(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L9816
	movq	ix86_cost(%rip), %r11
	mov	40(%r11), %edx
	cmpq	%rdx, %r14
	jae	.L9800
.L9817:
	movq	-6584(%rbp), %r8
	movq	-6576(%rbp), %rbx
	movq	-6568(%rbp), %r10
	movq	-6568(%rbp), %rsi
	testb	$2, target_flags+3(%rip)
	movq	8(%r8), %r12
	setne	%r14b
	movq	8(%rbx), %r8
	movq	$0, -376(%rbp)
	movl	$0, -6604(%rbp)
	movq	%r8, -400(%rbp)
	movzbl	%r14b, %ecx
	movq	8(%r10), %rdi
	movq	%rsi, -432(%rbp)
	leal	5(,%rcx,4), %r14d
	xorl	%ecx, %ecx
	movq	%rdi, -6592(%rbp)
	movq	-6592(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-96(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L9822
	cmpw	$99, %dx
	je	.L9822
	cmpw	$98, %dx
	je	.L9822
.L9821:
	movq	-6592(%rbp), %r11
	movl	%ecx, -416(%rbp)
	xorl	%edx, %edx
	movzwl	(%r11), %eax
	cmpw	$96, %ax
	je	.L9824
	cmpw	$98, %ax
	je	.L9824
.L9823:
	movl	%edx, -368(%rbp)
	movq	-6592(%rbp), %rax
	xorl	%ecx, %ecx
	movq	-6576(%rbp), %rdx
	movq	%rax, -424(%rbp)
	movq	%rdx, -408(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L9827
	cmpw	$99, %dx
	je	.L9827
	cmpw	$98, %dx
	je	.L9827
.L9826:
	movl	-368(%rbp), %esi
	movl	%ecx, -392(%rbp)
	movl	$0, -388(%rbp)
	movl	$0, -412(%rbp)
	testl	%esi, %esi
	je	.L9828
	movq	%r12, -376(%rbp)
.L9828:
	movl	-392(%rbp), %edi
	movq	%r12, -384(%rbp)
	testl	%edi, %edi
	je	.L9830
	movl	-416(%rbp), %r10d
	testl	%r10d, %r10d
	jne	.L9829
.L9830:
	movq	$0, -6600(%rbp)
	movl	$17, %esi
.L9843:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L23323
.L9840:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %r11
	cmpq	%rsi, %r11
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L9840
.L23323:
	testl	%edi, %edi
	je	.L9833
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L9842
	movq	%r8, -9592(%rbp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	-9592(%rbp), %r8
	jb	.L9842
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, -6600(%rbp)
	movq	%rdx, %r12
.L9842:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L9843
.L9833:
	testq	%r12, %r12
	jne	.L25529
	cmpq	$2, -6600(%rbp)
	jbe	.L9829
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23325
.L9851:
	movslq	%ecx,%rdi
	movzbl	mode_size(%rdi), %edx
	cmpl	%r14d, %edx
	cmovae	-6604(%rbp), %ecx
	movl	%ecx, -6604(%rbp)
	movzbl	mode_wider_mode(%rdi), %ecx
	testl	%ecx, %ecx
	jne	.L9851
.L23325:
	movl	-392(%rbp), %eax
	testl	%eax, %eax
	jne	.L9857
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L9855
	cmpw	$54, %dx
	je	.L9855
	cmpw	$55, %dx
	je	.L9855
	cmpw	$58, %dx
	je	.L9855
	cmpw	$134, %dx
	je	.L9855
	cmpw	$56, %dx
	je	.L9855
	cmpw	$140, %dx
	je	.L9855
.L9857:
	movl	-416(%rbp), %ebx
	testl	%ebx, %ebx
	jne	.L9829
	movq	-6592(%rbp), %rcx
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L9859
	cmpw	$54, %dx
	je	.L9859
	cmpw	$55, %dx
	je	.L9859
	cmpw	$58, %dx
	je	.L9859
	cmpw	$134, %dx
	je	.L9859
	cmpw	$56, %dx
	je	.L9859
	cmpw	$140, %dx
	je	.L9859
.L9829:
	cmpl	$1, %r14d
	jbe	.L9862
.L9913:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L23328
.L9869:
	movslq	%ecx,%r8
	movzbl	mode_size(%r8), %r12d
	cmpl	%r14d, %r12d
	cmovae	-6604(%rbp), %ecx
	movl	%ecx, -6604(%rbp)
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L9869
.L23328:
	movl	-6604(%rbp), %r14d
	testl	%r14d, %r14d
	je	.L9862
	movslq	-6604(%rbp),%rsi
	movq	%rsi, %r9
	movq	%rsi, -3088(%rbp)
	salq	$4, %r9
	addq	optab_table+240(%rip), %r9
	movl	8(%r9), %ebx
	cmpl	$1317, %ebx
	je	.L9871
	movl	-6604(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L9871
	movslq	%ebx,%r11
	movq	-3088(%rbp), %rax
	leaq	-432(%rbp), %r12
	leaq	(%r11,%r11,4), %r10
	movq	$0, -6616(%rbp)
	movq	insn_data+16(,%r10,8), %rdx
	movq	%rdx, -3096(%rbp)
	movzbq	mode_size(%rax), %rdx
	cmpq	%rdx, -384(%rbp)
	movq	%rdx, -5936(%rbp)
	jb	.L9871
	movl	-368(%rbp), %ecx
.L9911:
	testl	%ecx, %ecx
	je	.L9875
	subq	%rdx, 56(%r12)
.L9875:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L9876
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L9877
	movl	-6604(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24606:
	movq	%rax, -6616(%rbp)
.L9876:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L9879
	movq	24(%r12), %rdi
	movl	-6604(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L24607:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L27520
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L9885
	movq	-3088(%rbp), %rcx
	movzbl	mode_size(%rcx), %ebx
	leal	7(%rbx), %edx
	andl	$-8, %edx
.L9886:
	movq	cfun(%rip), %rdi
	andl	$33554432, %esi
	movq	16(%rdi), %r10
	leaq	8(%r10), %rdi
	movl	8(%r10), %ecx
	je	.L9887
	movq	-3088(%rbp), %rsi
	movzbl	mode_size(%rsi), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L24608:
	movq	-3088(%rbp), %rbx
	leal	(%rax,%rcx), %r8d
	movl	%r8d, (%rdi)
	salq	$4, %rbx
	addq	optab_table+384(%rip), %rbx
	movl	8(%rbx), %eax
	cmpl	$1317, %eax
	je	.L9889
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rcx
	movq	insn_data+24(,%rcx,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L9890
	movq	%r14, %rdi
	movl	-6604(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L27521
.L9890:
	leaq	(%rbx,%rbx,4), %r9
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r9,8)
.L24609:
	movq	%rax, %rdi
	call	emit_insn
.L9909:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L9910
	movq	-5936(%rbp), %r14
	addq	%r14, 56(%r12)
.L9910:
	movq	48(%r12), %r8
	movq	-5936(%rbp), %rdx
	subq	-5936(%rbp), %r8
	cmpq	%rdx, %r8
	movq	%r8, 48(%r12)
	jae	.L9911
.L9871:
	movq	-3088(%rbp), %r12
	movzbl	mode_size(%r12), %r14d
	cmpl	$1, %r14d
	ja	.L9913
.L9862:
	cmpq	$0, -384(%rbp)
	jmp	.L25558
.L27521:
	movl	-6604(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L9890
.L9889:
	movq	-3088(%rbp), %rax
	movzbl	mode_size(%rax), %r10d
	cmpl	%edx, %r10d
	je	.L27522
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r11b
	movzbl	%r11b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L9897:
	movl	-6604(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%esi, %esi
	testq	%rsi, %rsi
	movq	%rax, %rbx
	je	.L9906
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L27523
.L9906:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L9909
.L27523:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L9906
.L27522:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	setne	%dil
	movzbl	%dil, %esi
	movl	$96, %edi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L9897
.L9887:
	movq	-3088(%rbp), %r11
	movzbl	mode_size(%r11), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L24608
.L9885:
	movq	-3088(%rbp), %r9
	movzbl	mode_size(%r9), %r8d
	leal	1(%r8), %edx
	andl	$-2, %edx
	jmp	.L9886
.L27520:
	movq	%rax, %rsi
	movq	-6616(%rbp), %rdi
	xorl	%eax, %eax
	call	*-3096(%rbp)
	jmp	.L24609
.L9879:
	movq	24(%r12), %rdi
	movl	-6604(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24607
.L9877:
	movl	-6604(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L24606
.L9859:
	movq	-6592(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -424(%rbp)
	jmp	.L9829
.L9855:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -400(%rbp)
	jmp	.L9857
.L9827:
	movl	$1, %ecx
	jmp	.L9826
.L9824:
	movl	$1, %edx
	jmp	.L9823
.L9822:
	movl	$1, %ecx
	jmp	.L9821
.L9816:
	cmpq	$2, %r14
	ja	.L9800
	jmp	.L9817
.L9792:
	movq	-6584(%rbp), %rbx
	xorl	%esi, %esi
	movq	8(%rbx), %rdi
	call	protect_from_queue
	movq	-6584(%rbp), %rsi
	movq	%rax, %r12
	movq	16(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-6584(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L27524
.L9794:
	movq	-6584(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -6584(%rbp)
	movq	%r12, 8(%rax)
	movq	-6584(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L9787
.L27524:
	cmpq	16(%rcx), %rax
	jne	.L9794
	jmp	.L9787
.L27514:
	cmpb	$51, 2(%rdx)
	je	.L9785
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L27525
.L9785:
	cmpl	$66, %eax
	jne	.L9788
	movq	-6584(%rbp), %r9
	xorl	%esi, %esi
	movq	8(%r9), %rdi
	call	protect_from_queue
	movq	-6584(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L9787
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -6584(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L9787
.L27525:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L9786
	movq	-6584(%rbp), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -6584(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L9787
.L9786:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24605:
	movq	%rax, -6584(%rbp)
	jmp	.L9787
.L9784:
	movq	-6584(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L27526
	movq	-6584(%rbp), %rcx
	movq	24(%rcx), %rax
	testq	%rax, %rax
	jne	.L24605
	movq	-6584(%rbp), %r10
	movq	8(%r10), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	-6584(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rax
	movq	%rax, -6584(%rbp)
	jmp	.L9787
.L27526:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L24605
.L9779:
	movq	-6840(%rbp), %rbx
	xorl	%esi, %esi
	movq	8(%rbx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	%rax, %r12
	movq	-6840(%rbp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	-6840(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L27527
.L9781:
	movq	-6840(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -6576(%rbp)
	movq	%r12, 8(%rax)
	movq	-6576(%rbp), %rcx
	movq	%rbx, 16(%rcx)
	jmp	.L9774
.L27527:
	cmpq	16(%rsi), %rax
	jne	.L9781
	jmp	.L9774
.L27513:
	cmpb	$51, 2(%rbx)
	je	.L9772
	movq	8(%rbx), %r12
	cmpw	$71, (%r12)
	je	.L27528
.L9772:
	cmpl	$66, %eax
	jne	.L9775
	movq	-6840(%rbp), %rsi
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-6840(%rbp), %rdx
	movq	%rax, %rbx
	cmpq	8(%rdx), %rax
	je	.L9774
	movq	%rdx, %rdi
	call	copy_rtx
	movq	%rax, -6576(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L9774
.L27528:
	movq	8(%r12), %rsi
	movq	%rbx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L9773
	movq	-6840(%rbp), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -6576(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L9774
.L9773:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L24604:
	movq	%rax, -6576(%rbp)
	jmp	.L9774
.L9771:
	movq	-6840(%rbp), %rdx
	cmpq	$0, 16(%rdx)
	je	.L27529
	movq	-6840(%rbp), %r10
	movq	24(%r10), %rdx
	testq	%rdx, %rdx
	movq	%rdx, -6576(%rbp)
	jne	.L9774
	movq	-6840(%rbp), %r14
	movq	8(%r14), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r12
	movq	%r12, -6576(%rbp)
	jmp	.L9774
.L27529:
	movq	8(%rdx), %rdi
	call	copy_to_reg
	jmp	.L24604
.L9766:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r15), %r12
	movq	%rax, %rbx
	je	.L27530
.L9768:
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, -6568(%rbp)
	movq	%r12, 8(%rax)
	movq	-6568(%rbp), %r11
	movq	%rbx, 16(%r11)
	jmp	.L9761
.L27530:
	cmpq	16(%r15), %rax
	jne	.L9768
	jmp	.L9761
.L27512:
	jne	.L9762
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r15), %rax
	movq	%rax, %rbx
	je	.L9761
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, -6568(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L9761
.L9758:
	testq	%rsi, %rsi
	je	.L27531
	movq	24(%r15), %rdi
	testq	%rdi, %rdi
	movq	%rdi, -6568(%rbp)
	jne	.L9761
	movq	8(%r15), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r14
	movq	%r14, -6568(%rbp)
	jmp	.L9761
.L27531:
	movq	8(%r15), %rdi
	call	copy_to_reg
	movq	%rax, -6568(%rbp)
	jmp	.L9761
.L9751:
	testq	%rsi, %rsi
	movl	$8, -6560(%rbp)
	je	.L9747
	movl	32(%rsi), %edx
	movl	%edx, -6560(%rbp)
	jmp	.L9747
.L9750:
	cmpl	$7, %edx
	ja	.L9746
	jmp	.L9751
.L9735:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r15), %r12
	movq	%rax, %rbx
	je	.L27532
.L9737:
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, %r15
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L9730
.L27532:
	cmpq	16(%r15), %rax
	jne	.L9737
	jmp	.L9730
.L27445:
	jne	.L9731
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r15), %rax
	movq	%rax, %rbx
	je	.L9730
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, %r15
	movq	%rbx, 8(%rax)
	jmp	.L9730
.L9727:
	cmpq	$0, 16(%r15)
	je	.L27533
	movq	24(%r15), %rax
	testq	%rax, %rax
	je	.L9739
.L24603:
	movq	%rax, %r15
	jmp	.L9730
.L9739:
	movq	8(%r15), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L9730
.L27533:
	movq	8(%r15), %rdi
	call	copy_to_reg
	jmp	.L24603
.L27444:
	movq	144(%r14), %rax
	testq	%rax, %rax
	je	.L9722
	cmpq	%rax, %r15
	jne	.L9722
	jmp	.L9720
.L27443:
	movq	%r15, %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L9720
	jmp	.L9721
.L9719:
	movq	-6840(%rbp), %rdx
	cmpb	$0, 2(%rdx)
	jne	.L9718
	cmpb	$0, 16(%r14)
	je	.L9718
	movq	8(%r14), %rdx
	movzbl	2(%r15), %edi
	movzbl	61(%rdx), %r10d
	shrb	$1, %r10b
	movzbl	%r10b, %esi
	cmpl	%esi, %edi
	je	.L9718
	movzbl	17(%rdx), %ecx
	movq	-6840(%rbp), %rdx
	shrb	$5, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, -6840(%rbp)
	jmp	.L9718
.L24291:
	movq	-6840(%rbp), %rcx
	movzwl	(%rcx), %edx
	jmp	.L9641
.L24296:
	movq	-6840(%rbp), %r9
	movzwl	(%r9), %edx
	jmp	.L9641
.L27442:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	%r14, %rdi
	movzbl	2(%r15), %edx
	movq	%rax, %rsi
	jmp	.L24602
.L9680:
	xorl	%r8d, %r8d
	testl	%r8d, %r8d
	je	.L24292
	movl	(%r15), %ecx
	movl	%ecx, %r9d
	andl	$134283263, %r9d
	cmpl	$66, %r9d
	je	.L27534
.L9696:
	andl	$268500991, %ecx
	cmpl	$268435519, %ecx
	je	.L27535
	movzbl	2(%r15), %edx
	xorl	%ecx, %ecx
	movq	%r14, %rdi
	movq	%r15, %rsi
	call	expand_expr
	cmpw	$61, (%r15)
	movq	%rax, -6840(%rbp)
	je	.L27536
.L9716:
	movl	(%r15), %eax
	andl	$134283263, %eax
	cmpl	$134217794, %eax
	je	.L24295
	movq	-6840(%rbp), %rdi
	movq	%r15, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L24296
	movq	-6840(%rbp), %rax
	movzwl	(%rax), %edx
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L9717
	cmpw	$54, %dx
	je	.L9717
	cmpw	$55, %dx
	je	.L9717
	cmpw	$58, %dx
	je	.L9717
	cmpw	$134, %dx
	je	.L9717
	cmpw	$56, %dx
	je	.L9717
	cmpw	$140, %dx
	je	.L9717
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L9641
.L9717:
	movl	$1, -6556(%rbp)
	jmp	.L9641
.L24295:
	movq	-6840(%rbp), %rsi
	movzwl	(%rsi), %edx
	jmp	.L9641
.L27536:
	cmpl	$52, 8(%r15)
	jbe	.L24294
	jmp	.L9716
.L27535:
	xorl	%r10d, %r10d
	xorl	%edx, %edx
	testl	%r10d, %r10d
	jne	.L9702
	movq	8(%r14), %rsi
	movzbl	16(%rsi), %eax
	cmpb	$6, %al
	je	.L9703
	cmpb	$10, %al
	je	.L9703
	cmpb	$11, %al
	je	.L9703
	cmpb	$12, %al
	je	.L9703
.L9702:
	movq	%rdx, %rsi
	xorl	%ecx, %ecx
	movq	%r14, %rdi
	xorl	%edx, %edx
	call	expand_expr
	movzwl	(%rax), %edx
	movq	%rax, %rbx
	cmpw	$66, %dx
	je	.L27537
.L9705:
	leal	-67(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L9708
	cmpw	$54, %dx
	je	.L9708
	cmpw	$55, %dx
	je	.L9708
	cmpw	$58, %dx
	je	.L9708
	cmpw	$134, %dx
	je	.L9708
	cmpw	$56, %dx
	je	.L9708
	cmpw	$140, %dx
	je	.L9708
.L9707:
	movzbl	3(%r15), %edx
	movq	8(%r15), %rdi
	movq	%rbx, %rsi
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	xorl	%r9d, %r9d
	testl	%r9d, %r9d
	je	.L7871
	movzbl	2(%rbx), %edx
	movzbl	2(%r15), %eax
	cmpb	%al, %dl
	je	.L7871
	testb	%dl, %dl
	je	.L9710
	movq	%rbx, %rsi
	movzbl	%al, %edi
	call	gen_lowpart_SUBREG
	movzbl	3(%rax), %ebx
	orb	$16, %bl
	movb	%bl, 3(%rax)
	andb	$-5, %bl
	movzbl	3(%r15), %r10d
	andb	$4, %r10b
	orb	%r10b, %bl
	movb	%bl, 3(%rax)
	jmp	.L7871
.L9710:
	movq	8(%r15), %r12
	movzbl	3(%r15), %ecx
	movzbl	%al, %edi
	movq	%rbx, %rdx
	movzbl	2(%r12), %esi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	jmp	.L7871
.L9708:
	cmpb	$0, 2(%rbx)
	jne	.L9707
	movq	8(%r14), %rsi
	movzbl	3(%r15), %ecx
	movq	%rbx, %rdx
	movzbl	2(%r15), %edi
	movzbl	61(%rsi), %r8d
	shrb	$2, %cl
	andl	$1, %ecx
	shrb	$1, %r8b
	movzbl	%r8b, %esi
	call	convert_modes
	movzbl	3(%r15), %ecx
	movzbl	2(%r15), %esi
	movq	8(%r15), %r14
	movq	%rax, %rdx
	movzbl	2(%r14), %edi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, %rbx
	jmp	.L9707
.L27537:
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L9705
	testb	$8, 3(%rax)
	jne	.L9706
	movq	8(%r15), %rdi
	movq	8(%rax), %rsi
	call	reg_mentioned_p
	testl	%eax, %eax
	je	.L24293
.L9706:
	movq	%rbx, %rdi
	call	copy_to_reg
	movq	%rax, %rbx
.L24293:
	movzwl	(%rbx), %edx
	jmp	.L9705
.L9703:
	cmpq	$0, 8(%rsi)
	jne	.L9702
	movzbl	3(%r15), %ecx
	movzbl	17(%rsi), %r12d
	movl	$1, %edi
	movl	%ecx, %edx
	shrb	$5, %r12b
	shrb	$2, %dl
	andl	$1, %r12d
	andl	%edx, %edi
	cmpl	%edi, %r12d
	je	.L9704
	call	signed_or_unsigned_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	convert
	movzbl	3(%r15), %ecx
	movq	%rax, %r14
.L9704:
	movq	8(%r15), %r11
	shrb	$2, %cl
	movl	$1, %esi
	andl	%ecx, %esi
	movzbl	2(%r11), %edi
	call	type_for_mode
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	convert
	movq	8(%r15), %rdx
	movq	%rax, %r14
	jmp	.L9702
.L27534:
	movzbl	2(%r15), %eax
	cmpb	$51, %al
	je	.L9696
	movq	%r15, %rsi
	xorl	%ecx, %ecx
	movzbl	%al, %edx
	movq	%r14, %rdi
	call	expand_expr
	movq	%rax, -6840(%rbp)
	movq	%rax, %rsi
	movzbl	2(%rax), %eax
	cmpb	$51, %al
	je	.L9697
	testb	%al, %al
	je	.L9697
	cmpq	%r15, %rsi
	je	.L9699
	movq	%rsi, %rdi
	movq	%r15, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L27538
.L9698:
	movq	-6840(%rbp), %rdi
	call	copy_to_reg
	movq	%rax, -6840(%rbp)
.L9697:
	movl	$1, -6556(%rbp)
	jmp	.L24291
.L27538:
	movq	-6840(%rbp), %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L9698
	movq	%r15, %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L9698
.L9699:
	movl	$1, %r12d
	jmp	.L9698
.L24292:
	movl	(%r15), %ecx
	jmp	.L9696
.L9689:
	movl	$1, %ebx
	jmp	.L9683
.L9690:
	xorl	%ebx, %ebx
	jmp	.L9683
.L9687:
	movq	8(%r15), %rdi
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L9689
	movq	16(%r15), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L9683
	jmp	.L9689
.L27441:
	cmpb	$51, 2(%r15)
	jne	.L9642
	call	gen_label_rtx
	movq	%rax, -3072(%rbp)
	call	gen_label_rtx
	movq	cfun(%rip), %rbx
	movq	%rax, -3080(%rbp)
	movq	16(%rbx), %rcx
	movq	40(%rcx), %rbx
	testq	%rbx, %rbx
	je	.L23313
.L9648:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L27539
	call	emit_insn
	movq	%rax, 16(%rbx)
.L9647:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %r9
	movq	16(%rdx), %r10
	testq	%r9, %r9
	movq	%r9, %rbx
	movq	%r9, 40(%r10)
	jne	.L9648
.L23313:
	movzwl	(%r15), %eax
	cmpl	$71, %eax
	je	.L9650
	cmpl	$66, %eax
	je	.L27540
.L9654:
	cmpl	$75, %eax
	je	.L9658
	cmpl	$78, %eax
	je	.L9658
.L9653:
	call	do_pending_stack_adjust
	movq	cfun(%rip), %rbx
	movq	-3072(%rbp), %rsi
	movq	16(%rbx), %rcx
	incl	4(%rcx)
	movq	32(%r14), %rdi
	call	jumpifnot
	call	start_cleanup_deferral
	movq	40(%r14), %rdi
	xorl	%edx, %edx
	movq	%r15, %rsi
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %r11
	movq	16(%r11), %rdi
	movq	40(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L23315
.L9668:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L27541
	call	emit_insn
	movq	%rax, 16(%rbx)
.L9667:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %r9
	movq	16(%rdx), %r10
	testq	%r9, %r9
	movq	%r9, %rbx
	movq	%r9, 40(%r10)
	jne	.L9668
.L23315:
	movq	-3080(%rbp), %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	-3072(%rbp), %rdi
	call	emit_label
	call	start_cleanup_deferral
	movq	48(%r14), %rdi
	movq	%r15, %rsi
	xorl	%edx, %edx
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %r15
	movq	16(%r15), %r14
	movq	40(%r14), %rbx
	testq	%rbx, %rbx
	je	.L23317
.L9675:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L27542
	call	emit_insn
	movq	%rax, 16(%rbx)
.L9674:
	movq	cfun(%rip), %rsi
	movq	40(%rbx), %rdi
	movq	16(%rsi), %rcx
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%rcx)
	jne	.L9675
.L23317:
	movq	-3080(%rbp), %rdi
	jmp	.L25061
.L27542:
	movq	8(%rdi), %r11
	movq	8(%r11), %r12
	movq	%r12, 16(%rbx)
	call	emit_insn
	jmp	.L9674
.L27541:
	movq	8(%rdi), %r8
	movq	8(%r8), %rsi
	movq	%rsi, 16(%rbx)
	call	emit_insn
	jmp	.L9667
.L9658:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r15), %r12
	movq	%rax, %rbx
	je	.L27543
.L9660:
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, %r15
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L9653
.L27543:
	cmpq	16(%r15), %rax
	jne	.L9660
	jmp	.L9653
.L27540:
	jne	.L9654
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r15), %rax
	movq	%rax, %rbx
	je	.L9653
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, %r15
	movq	%rbx, 8(%rax)
	jmp	.L9653
.L9650:
	cmpq	$0, 16(%r15)
	je	.L27544
	movq	24(%r15), %rax
	testq	%rax, %rax
	je	.L9662
.L24601:
	movq	%rax, %r15
	jmp	.L9653
.L9662:
	movq	8(%r15), %r12
	movzbl	2(%r12), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L9653
.L27544:
	movq	8(%r15), %rdi
	call	copy_to_reg
	jmp	.L24601
.L27539:
	movq	8(%rdi), %r8
	movq	8(%r8), %rsi
	movq	%rsi, 16(%rbx)
	call	emit_insn
	jmp	.L9647
.L27440:
	movq	32(%r14), %rdi
	movq	const_int_rtx+512(%rip), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	cfun(%rip), %r9
	movq	16(%r9), %r8
	movq	40(%r8), %rbx
	testq	%rbx, %rbx
	je	.L23311
.L9638:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L27545
	call	emit_insn
	movq	%rax, 16(%rbx)
.L9637:
	movq	cfun(%rip), %r11
	movq	40(%rbx), %rdi
	movq	16(%r11), %r12
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%r12)
	jne	.L9638
.L23311:
	movq	40(%r14), %rdi
	movq	%r15, %rsi
	xorl	%edx, %edx
	call	store_expr
	jmp	.L7871
.L27545:
	movq	8(%rdi), %r10
	movq	8(%r10), %rdx
	movq	%rdx, 16(%rbx)
	call	emit_insn
	jmp	.L9637
	.p2align 6,,7
.L27437:
	movq	-2712(%rbp), %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	movl	$1, %ecx
	call	assign_temp
	movq	%rax, %r13
	jmp	.L9630
.L27436:
	movzbl	61(%rbx), %r11d
	andb	$-2, %r11b
	cmpb	$102, %r11b
	jne	.L9629
	movq	%r13, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	call	expand_expr
	movq	%rax, %rdi
	call	copy_rtx
	xorl	%edx, %edx
	movq	-9552(%rbp), %rsi
	movq	%rax, %r13
	movq	%rax, %rdi
	jmp	.L25063
	.p2align 6,,7
.L23078:
	movl	$.LC0, %edi
	movl	$8704, %esi
	jmp	.L25123
.L23107:
	movl	$.LC0, %edi
	movl	$8853, %esi
	jmp	.L25123
.L23079:
	movq	-9552(%rbp), %r9
	xorl	%ecx, %ecx
	movq	8(%r9), %rsi
	movq	32(%r9), %rdi
	movq	8(%rsi), %r10
	xorl	%esi, %esi
	movzbl	61(%r10), %edx
	shrb	$1, %dl
	movzbl	%dl, %ebx
	xorl	%edx, %edx
	call	expand_expr
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	-9552(%rbp), %r8
	xorl	%esi, %esi
	movq	%rax, %r12
	movq	40(%r8), %rdi
	call	expand_expr
	testq	%r13, %r13
	movq	%rax, %r14
	je	.L27546
.L23080:
	call	start_sequence
	movl	%ebx, %edi
	movq	%r13, %rsi
	call	gen_realpart
	movq	%r12, %rsi
	movq	%rax, %rdi
	call	emit_move_insn
	movq	%r13, %rsi
	movl	%ebx, %edi
	call	gen_imagpart
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	emit_move_insn
	call	get_insns
	movq	%rax, %rbx
	call	end_sequence
	cmpw	$65, (%r13)
	je	.L23092
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	%r12, %rdx
	movq	%r14, %rcx
.L25051:
	xorl	%r8d, %r8d
	call	emit_no_conflict_block
	jmp	.L7871
.L23092:
	movq	%rbx, %rdi
	call	emit_insns
	jmp	.L7871
.L27546:
	movq	-9552(%rbp), %rax
	movq	8(%rax), %r15
	movzbl	61(%r15), %r13d
	shrb	$1, %r13b
	movzbl	%r13b, %edi
	call	gen_reg_rtx
	movq	%rax, %r13
	jmp	.L23080
.L23085:
	movq	-9552(%rbp), %r14
	xorl	%esi, %esi
	xorl	%edx, %edx
	movq	8(%r14), %rdi
	movq	8(%rdi), %r12
	movq	32(%r14), %rdi
	movzbl	61(%r12), %ecx
	shrb	$1, %cl
	movzbl	%cl, %r12d
	xorl	%ecx, %ecx
	call	expand_expr
	testq	%r13, %r13
	movq	%rax, %r14
	je	.L27547
.L23086:
	call	start_sequence
	movl	%r12d, %edi
	movq	%r13, %rsi
	call	gen_realpart
	movq	%r14, %rsi
	movl	%r12d, %edi
	movq	%rax, %r15
	call	gen_realpart
	movq	%rax, %rsi
	movq	%r15, %rdi
	call	emit_move_insn
	movq	%r13, %rsi
	movl	%r12d, %edi
	call	gen_imagpart
	movq	%r14, %rsi
	movl	%r12d, %edi
	movq	%rax, %rbx
	call	gen_imagpart
	movl	-2516(%rbp), %r8d
	movq	%rax, %rdx
	testl	%r8d, %r8d
	jne	.L23089
	movl	flag_trapv(%rip), %eax
	testl	%eax, %eax
	je	.L23089
	movslq	%r12d,%r9
	cmpl	$1, mode_class(,%r9,4)
	je	.L27548
.L23089:
	movq	optab_table+256(%rip), %rsi
.L23090:
	xorl	%r8d, %r8d
	movl	%r12d, %edi
	movq	%rbx, %rcx
	call	expand_unop
	cmpq	%rbx, %rax
	movq	%rax, %rsi
	je	.L23091
	movq	%rbx, %rdi
	call	emit_move_insn
.L23091:
	call	get_insns
	movq	%rax, %rbx
	call	end_sequence
	cmpw	$65, (%r13)
	je	.L23092
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	%r14, %rdx
	xorl	%ecx, %ecx
	jmp	.L25051
.L27548:
	movq	optab_table+264(%rip), %rsi
	jmp	.L23090
.L27547:
	movl	-2716(%rbp), %edi
	call	gen_reg_rtx
	movq	%rax, %r13
	jmp	.L23086
.L23083:
	movq	-9552(%rbp), %rbx
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movq	32(%rbx), %rdi
	call	expand_expr
	movl	-2716(%rbp), %edi
	movq	%rax, %rsi
	call	gen_realpart
	jmp	.L23191
.L23084:
	movq	-9552(%rbp), %r11
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movq	32(%r11), %rdi
	call	expand_expr
	movl	-2716(%rbp), %edi
	movq	%rax, %rsi
	call	gen_imagpart
	jmp	.L23191
.L22669:
	movq	-9552(%rbp), %rdi
	xorl	%esi, %esi
.L25085:
	movl	-6220(%rbp), %edx
	call	expand_increment
	jmp	.L23191
.L22671:
	movl	-6220(%rbp), %esi
	testl	%esi, %esi
	sete	%dil
	movzbl	%dil, %esi
	movq	-9552(%rbp), %rdi
	jmp	.L25085
.L23105:
	movq	-9552(%rbp), %r8
	movq	-2712(%rbp), %rsi
	movq	32(%r8), %rdi
	call	expand_builtin_va_arg
	jmp	.L23191
.L23094:
	movq	-9552(%rbp), %rdx
	movq	40(%rdx), %r14
	call	expand_eh_region_start
	movq	-9552(%rbp), %r10
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movq	32(%r10), %rdi
	call	expand_expr
	movq	%r14, %rdi
	movq	%rax, %r13
	call	expand_eh_region_end_cleanup
	jmp	.L7871
.L23095:
	movq	-9552(%rbp), %rbx
	movq	40(%rbx), %r11
	movq	32(%rbx), %r12
	movq	%r11, -5864(%rbp)
	call	gen_label_rtx
	movq	%rax, -5872(%rbp)
	call	gen_label_rtx
	testb	$2, target_flags+3(%rip)
	movq	%rax, -5880(%rbp)
	setne	%al
	movzbl	%al, %edi
	addl	$4, %edi
	call	gen_reg_rtx
	movq	-5872(%rbp), %rdx
	movq	global_trees+216(%rip), %rsi
	movq	%rax, %rcx
	movq	%rax, -5888(%rbp)
	movl	$136, %edi
	xorl	%eax, %eax
	call	build
	xorl	%esi, %esi
	movl	$2, %edi
	orb	$1, 17(%rax)
	movq	%rax, %rbx
	call	expand_start_bindings_and_block
	movq	cfun(%rip), %rsi
	xorl	%edi, %edi
	movl	328(%rsi), %eax
	movl	%eax, 336(%rsi)
	movq	%rbx, %rsi
	call	expand_decl_cleanup
	movl	%r14d, %ecx
	movl	%r15d, %edx
	movq	%r13, %rsi
	movq	%r12, %rdi
	call	expand_expr
	movq	%rax, %rdi
	movq	%rax, %r13
	call	preserve_temp_slots
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%edi, %edi
	call	expand_end_bindings
	movq	-5880(%rbp), %rdi
	call	emit_jump
	movq	-5872(%rbp), %rdi
	call	emit_label
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	-5864(%rbp), %rdi
	movq	const_int_rtx+512(%rip), %rsi
	call	expand_expr
	movq	-5888(%rbp), %rdi
	call	emit_indirect_jump
	movq	-5880(%rbp), %rdi
	jmp	.L25057
.L23100:
	movq	-9552(%rbp), %rdi
	movq	32(%rdi), %r15
	movq	40(%rdi), %r12
	call	gen_label_rtx
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rdx
	movl	$67, %edi
	setne	%cl
	movq	%rax, %r13
	movzbl	%cl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_u00
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	movq	%r15, %rdi
	call	emit_jump
	movq	%r13, %rdi
	jmp	.L25122
.L8947:
	movq	-9552(%rbp), %rbx
	movq	32(%rbx), %rdi
	cmpb	$31, 16(%rdi)
	je	.L25119
	call	expand_computed_goto
	jmp	.L25052
.L25119:
	call	expand_goto
	jmp	.L25052
.L22665:
	movq	-9552(%rbp), %r13
	movq	32(%r13), %rdi
	testq	%rdi, %rdi
	jne	.L22666
	call	expand_null_return
	jmp	.L25052
.L22666:
	call	expand_return
	jmp	.L25052
.L8950:
	movq	-9552(%rbp), %r14
	movq	32(%r14), %rdi
	call	invert_truthvalue
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	expand_exit_loop_if_false
	jmp	.L25052
.L8955:
	call	push_temp_slots
	movl	$1, %edi
	call	expand_start_loop
	movl	$1, %edx
	xorl	%esi, %esi
	movq	-9552(%rbp), %rcx
	movq	32(%rcx), %rdi
	call	expand_expr_stmt_value
	call	expand_end_loop
	call	pop_temp_slots
	jmp	.L25052
.L8951:
	movq	-9552(%rbp), %r12
	movq	40(%r12), %rdi
	testq	%rdi, %rdi
	jne	.L27549
.L8952:
	call	do_pending_stack_adjust
	movq	-9552(%rbp), %r13
	movq	32(%r13), %rdi
	call	label_rtx
	movq	%rax, %rdi
	jmp	.L25122
.L27549:
	xorl	%esi, %esi
	movl	$1, %edx
	call	expand_expr_stmt_value
	jmp	.L8952
.L8953:
	movq	-9552(%rbp), %r10
	cmpq	$0, 40(%r10)
	jne	.L27550
.L8954:
	movq	-9552(%rbp), %rdi
	movq	32(%rdi), %r11
	movq	32(%r11), %rdi
	jmp	.L25119
.L27550:
	movl	$.LC17, %edi
	xorl	%eax, %eax
	call	sorry
	jmp	.L8954
.L7982:
	movq	-9552(%rbp), %r8
	movq	input_filename(%rip), %rbx
	movl	lineno(%rip), %r12d
	movq	40(%r8), %rsi
	movq	32(%rsi), %rdi
	movl	24(%r8), %esi
	sarl	$12, %esi
	movq	%rdi, input_filename(%rip)
	testb	$8, 18(%r8)
	movl	%esi, lineno(%rip)
	jne	.L27551
.L7983:
	movq	-9552(%rbp), %r9
	movq	%r13, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	movq	32(%r9), %rdi
	call	expand_expr
	movl	%r12d, lineno(%rip)
	movq	%rbx, input_filename(%rip)
	movq	%rax, %r13
	jmp	.L7871
.L27551:
	call	emit_line_note
	jmp	.L7983
	.p2align 6,,7
.L23108:
	movq	-9552(%rbp), %rdi
	jmp	.L25077
.L23106:
	movq	cfun(%rip), %rdi
	call	get_exception_pointer
	jmp	.L23191
.L25626:
	testb	$2, target_flags+3(%rip)
	je	.L7898
	movslq	-2716(%rbp),%rdi
	cmpb	$8, mode_size(%rdi)
.L24544:
	ja	.L7895
	jmp	.L7897
.L7898:
	movslq	-2716(%rbp),%r8
	cmpb	$4, mode_size(%r8)
	jmp	.L24544
.L25625:
	cmpl	$52, 8(%r13)
	ja	.L7895
	jmp	.L7896
.L25624:
	movq	-9552(%rbp), %r11
	movq	const_int_rtx+512(%rip), %rsi
	xorl	%edx, %edx
	movl	%r14d, %ecx
	movq	32(%r11), %rdi
	call	expand_expr
	movl	%r14d, %ecx
	xorl	%edx, %edx
	movq	-9552(%rbp), %rbx
	movq	const_int_rtx+512(%rip), %rsi
	movq	40(%rbx), %rdi
	call	expand_expr
	movq	-9552(%rbp), %rdx
	movq	48(%rdx), %rdi
	jmp	.L25121
.L25623:
	movq	-9552(%rbp), %rcx
	movq	32(%rcx), %rdi
.L25068:
	movq	const_int_rtx+512(%rip), %rsi
	xorl	%edx, %edx
	jmp	.L25099
.L7890:
	movq	-9552(%rbp), %rax
	movq	const_int_rtx+512(%rip), %rsi
	xorl	%edx, %edx
	movl	%r14d, %ecx
	movq	32(%rax), %rdi
	call	expand_expr
	movq	-9552(%rbp), %r15
	movq	40(%r15), %rdi
	jmp	.L25121
.L7887:
	movq	-9552(%rbp), %r12
	movq	32(%r12), %rdi
	jmp	.L25068
	.p2align 6,,7
.L7880:
	movq	-2712(%rbp), %r10
	cmpb	$5, 16(%r10)
	jne	.L7878
.L7879:
	movl	$1, -6220(%rbp)
	jmp	.L7878
.L25622:
	cmpl	$52, 8(%r13)
	jbe	.L7875
	call	preserve_subexpressions_p
	movq	%r13, -9560(%rbp)
	testl	%eax, %eax
	je	.L7877
	jmp	.L7875
.LFE9:
.Lfe9:
	.size	expand_expr,.Lfe9-expand_expr
	.align 2
	.p2align 4,,15
	.type	is_aligning_offset,@function
is_aligning_offset:
.LFB10:
	pushq	%rbp
.LCFI51:
	movq	%rsi, %rbp
	pushq	%rbx
.LCFI52:
	movq	%rdi, %rbx
	subq	$8, %rsp
.LCFI53:
	movzbl	16(%rdi), %edx
	leal	-114(%rdx), %ecx
	cmpb	$2, %cl
	ja	.L27574
	.p2align 4,,7
.L27556:
	movq	32(%rbx), %rbx
	movzbl	16(%rbx), %edx
	leal	-114(%rdx), %ecx
	cmpb	$2, %cl
	jbe	.L27556
	cmpb	$58, %dl
	je	.L27556
.L27571:
	cmpb	$88, %dl
	je	.L27575
.L27558:
	xorl	%eax, %eax
.L27552:
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	ret
.L27575:
	movq	40(%rbx), %rdi
	movl	$1, %esi
	call	host_integerp
	testl	%eax, %eax
	je	.L27558
	movq	40(%rbx), %rdi
	movl	$128, %esi
	call	compare_tree_int
	testl	%eax, %eax
	jle	.L27558
	movq	40(%rbx), %rdi
	movl	$1, %esi
	call	tree_low_cst
	leaq	1(%rax), %rdi
	call	exact_log2_wide
	movq	32(%rbx), %rdx
.L27559:
	movzbl	16(%rdx), %ecx
	leal	-114(%rcx), %ebx
	cmpb	$2, %bl
	ja	.L27576
	movq	32(%rdx), %rdx
	jmp	.L27559
.L27576:
	xorl	%eax, %eax
	cmpb	$77, %cl
	jne	.L27552
	movq	32(%rdx), %rcx
	movzbl	16(%rcx), %edx
	leal	-114(%rdx), %esi
	cmpb	$2, %sil
	ja	.L27573
.L27567:
	movq	32(%rcx), %rcx
	movzbl	16(%rcx), %edx
	leal	-114(%rdx), %edi
	cmpb	$2, %dil
	jbe	.L27567
.L27573:
	xorl	%eax, %eax
	cmpb	$121, %dl
	jne	.L27552
	movq	32(%rcx), %rdx
	cmpq	%rbp, %rdx
	je	.L27569
	cmpb	$57, 16(%rdx)
	jne	.L27552
	movq	8(%rbp), %r8
	cmpq	%r8, 8(%rdx)
	jne	.L27552
.L27569:
	movl	$1, %eax
	jmp	.L27552
	.p2align 6,,7
.L27574:
	cmpb	$58, %dl
	jne	.L27571
	jmp	.L27556
.LFE10:
.Lfe10:
	.size	is_aligning_offset,.Lfe10-is_aligning_offset
	.align 2
	.p2align 4,,15
.globl string_constant
	.type	string_constant,@function
string_constant:
.LFB11:
	pushq	%r12
.LCFI54:
	movq	global_trees(%rip), %r8
	movq	%rdi, %rcx
	pushq	%rbp
.LCFI55:
	movq	%rsi, %r12
	pushq	%rbx
.LCFI56:
	.p2align 4,,7
.L27578:
	movzbl	16(%rcx), %esi
	leal	-114(%rsi), %edx
	cmpb	$2, %dl
	ja	.L27579
	movq	32(%rcx), %rdi
	cmpq	%r8, %rdi
	je	.L27579
	movq	8(%rcx), %r9
	movq	8(%rdi), %rdx
	movzbl	61(%r9), %ebp
	movzbl	61(%rdx), %ebx
	andb	$-2, %bpl
	andb	$-2, %bl
	cmpb	%bl, %bpl
	jne	.L27579
	movq	%rdi, %rcx
	jmp	.L27578
.L27579:
	cmpb	$121, %sil
	je	.L27599
.L27583:
	cmpb	$59, %sil
	je	.L27600
.L27584:
	xorl	%eax, %eax
.L27577:
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret
.L27600:
	movq	32(%rcx), %rbp
	movq	40(%rcx), %rbx
	movq	global_trees(%rip), %rcx
	.p2align 4,,7
.L27586:
	movzbl	16(%rbp), %edi
	leal	-114(%rdi), %r8d
	cmpb	$2, %r8b
	ja	.L27587
	movq	32(%rbp), %rsi
	cmpq	%rcx, %rsi
	je	.L27587
	movq	8(%rbp), %r9
	movq	8(%rsi), %rdx
	movzbl	61(%r9), %r11d
	movzbl	61(%rdx), %r10d
	andb	$-2, %r11b
	andb	$-2, %r10b
	cmpb	%r10b, %r11b
	jne	.L27587
	movq	%rsi, %rbp
	jmp	.L27586
.L27587:
	movq	global_trees(%rip), %r8
	.p2align 4,,7
.L27591:
	movzbl	16(%rbx), %ecx
	leal	-114(%rcx), %esi
	cmpb	$2, %sil
	ja	.L27592
	movq	32(%rbx), %rsi
	cmpq	%r8, %rsi
	je	.L27592
	movq	8(%rbx), %r9
	movq	8(%rsi), %rdx
	movzbl	61(%r9), %r11d
	movzbl	61(%rdx), %r10d
	andb	$-2, %r11b
	andb	$-2, %r10b
	cmpb	%r10b, %r11b
	jne	.L27592
	movq	%rsi, %rbx
	jmp	.L27591
.L27592:
	cmpb	$121, %dil
	je	.L27601
.L27596:
	cmpb	$121, %cl
	jne	.L27584
	movq	32(%rbx), %rcx
	cmpb	$29, 16(%rcx)
	jne	.L27584
	movq	sizetype_tab(%rip), %rdi
	movq	%rbp, %rsi
	call	convert
	movq	%rax, (%r12)
	movq	32(%rbx), %rax
	jmp	.L27577
.L27601:
	movq	32(%rbp), %rdi
	cmpb	$29, 16(%rdi)
	jne	.L27596
	movq	sizetype_tab(%rip), %rdi
	movq	%rbx, %rsi
	call	convert
	movq	%rax, (%r12)
	movq	32(%rbp), %rax
	jmp	.L27577
	.p2align 6,,7
.L27599:
	movq	32(%rcx), %rdi
	cmpb	$29, 16(%rdi)
	jne	.L27583
	movq	global_trees+120(%rip), %rsi
	movq	%rsi, (%r12)
	movq	32(%rcx), %rax
	jmp	.L27577
.LFE11:
.Lfe11:
	.size	string_constant,.Lfe11-string_constant
	.align 2
	.p2align 4,,15
	.type	expand_increment,@function
expand_increment:
.LFB12:
	pushq	%rbp
.LCFI57:
	movq	%rsp, %rbp
.LCFI58:
	pushq	%r15
.LCFI59:
	pushq	%r14
.LCFI60:
	pushq	%r13
.LCFI61:
	pushq	%r12
.LCFI62:
	pushq	%rbx
.LCFI63:
	movq	%rdi, %rbx
	subq	$440, %rsp
.LCFI64:
	movq	optab_table(%rip), %r13
	movl	%edx, -176(%rbp)
	movl	%esi, -172(%rbp)
	movq	8(%rdi), %rdx
	movq	32(%rdi), %r14
	movl	$0, -340(%rbp)
	movl	$0, -332(%rbp)
	movzbl	61(%rdx), %ecx
	shrb	$1, %cl
	testl	%esi, %esi
	movzbl	%cl, %edx
	movl	%edx, -180(%rbp)
	je	.L27604
	movzbl	16(%r14), %edx
	cmpb	$40, %dl
	je	.L27604
	cmpb	$39, %dl
	je	.L28165
.L27603:
	leal	127(%rdx), %r8d
	cmpb	$1, %r8b
	jbe	.L28166
.L27605:
	call	get_last_insn
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%r14, %rdi
	movq	%rax, %r12
	call	expand_expr
	movq	%rax, -320(%rbp)
	movq	%rax, %rdx
	movl	(%rax), %eax
	andl	$268500991, %eax
	cmpl	$268435519, %eax
	je	.L28167
	movq	-320(%rbp), %rax
	movzwl	(%rax), %edx
	cmpw	$63, %dx
	je	.L28168
.L27609:
	cmpw	$63, %dx
	movl	$0, -336(%rbp)
	je	.L27616
	cmpw	$61, %dx
	je	.L27616
.L27615:
	movq	40(%rbx), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	%rax, %r15
	movzbl	16(%rbx), %eax
	cmpb	$-125, %al
	je	.L27618
	cmpb	$-127, %al
	je	.L27618
	movq	optab_table+16(%rip), %rax
.L27617:
	cmpq	%rax, %r13
	je	.L28169
.L27619:
	movl	flag_trapv(%rip), %r12d
	testl	%r12d, %r12d
	je	.L27620
	movq	8(%rbx), %rdx
	testb	$32, 17(%rdx)
	jne	.L27620
	cmpq	optab_table(%rip), %r13
	je	.L28170
	movq	optab_table+24(%rip), %rsi
.L27622:
	movq	%rsi, %r13
.L27620:
	movl	-172(%rbp), %edi
	testl	%edi, %edi
	jne	.L27623
	movslq	-180(%rbp),%r8
	salq	$4, %r8
	movl	8(%r13,%r8), %eax
	cmpl	$1317, %eax
	je	.L27623
	cltq
	movq	-320(%rbp), %rdi
	movl	-180(%rbp), %esi
	leaq	(%rax,%rax,4), %r9
	movq	insn_data+24(,%r9,8), %r12
	call	*(%r12)
	testl	%eax, %eax
	jne	.L28171
.L27623:
	movl	-336(%rbp), %eax
	testl	%eax, %eax
	jne	.L27626
	movl	-172(%rbp), %eax
	testl	%eax, %eax
	jne	.L27627
	movl	-340(%rbp), %eax
	testl	%eax, %eax
	je	.L27626
.L27627:
	movl	-332(%rbp), %eax
	testl	%eax, %eax
	je	.L27625
.L27626:
	movzbl	16(%rbx), %eax
	cmpb	$-125, %al
	je	.L27633
	cmpb	$-127, %al
	movl	$59, %edi
	je	.L27633
.L27632:
	movq	8(%rbx), %rsi
	movq	40(%rbx), %rcx
	movq	%r14, %rdx
	xorl	%eax, %eax
	call	build
	movzbl	16(%r14), %edx
	movq	%rax, %r15
	leal	-114(%rdx), %ebx
	cmpb	$1, %bl
	jbe	.L27637
.L28094:
	movl	-172(%rbp), %eax
	movl	$0, -344(%rbp)
	testl	%eax, %eax
	jne	.L27638
	movl	-176(%rbp), %eax
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	-172(%rbp), %eax
	movl	%eax, -344(%rbp)
.L27638:
	testb	%dl, %dl
	movq	$0, -448(%rbp)
	je	.L28172
	leal	-39(%rdx), %r10d
	cmpb	$1, %r10b
	jbe	.L27644
	cmpb	$43, %dl
	je	.L27644
	cmpb	$44, %dl
	je	.L27644
	cmpb	$53, 16(%r15)
	je	.L28173
.L27754:
	cmpq	$0, -448(%rbp)
	je	.L28174
.L28010:
	movzbl	16(%r14), %eax
	cmpb	$36, %al
	je	.L28175
.L28065:
	call	push_temp_slots
	movq	-448(%rbp), %rsi
	movl	-344(%rbp), %edx
	movq	%r15, %rdi
	call	store_expr
	movq	%rax, -448(%rbp)
	movq	%rax, %rdi
.L28150:
	call	preserve_temp_slots
	call	free_temp_slots
	call	pop_temp_slots
.L28153:
	movl	-344(%rbp), %eax
	testl	%eax, %eax
	movl	$0, %eax
	cmovne	-448(%rbp), %rax
.L28151:
	movq	%rax, -448(%rbp)
.L27642:
	movl	-172(%rbp), %r13d
	movq	-320(%rbp), %rdi
	testl	%r13d, %r13d
	cmove	-448(%rbp), %rdi
	movq	%rdi, -320(%rbp)
.L27602:
	movq	-320(%rbp), %rax
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
.L28175:
	movq	-448(%rbp), %r14
	movzwl	(%r14), %ecx
	cmpw	$61, %cx
	je	.L28012
	cmpw	$39, %cx
	je	.L28012
	cmpb	$36, %al
	jne	.L28065
	cmpb	$41, 16(%r15)
	jne	.L28065
	movq	cfun(%rip), %r14
	movzbl	424(%r14), %edi
	andb	$3, %dil
	decb	%dil
	jne	.L28065
	call	push_temp_slots
	movq	%r15, %rdi
	call	expr_size
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%r15, %rdi
	xorl	%esi, %esi
	movq	%rax, %r14
	call	expand_expr
	movq	%r14, %rsi
	movq	sizetype_tab(%rip), %rcx
	movq	%rax, %r15
	movzbl	61(%rcx), %r10d
	movzbl	17(%rcx), %edx
	shrb	$1, %r10b
	shrb	$5, %dl
	andl	$1, %edx
	movzbl	%r10b, %edi
	call	convert_to_mode
	movq	-448(%rbp), %r13
	movl	$3, %ecx
	movl	target_flags(%rip), %r9d
	movq	8(%r15), %r8
	movq	%rax, 16(%rsp)
	movq	sizetype_tab(%rip), %rbx
	movq	libfunc_table+96(%rip), %rdi
	andl	$33554432, %r9d
	movq	%r8, (%rsp)
	setne	%r12b
	xorl	%eax, %eax
	movzbl	%r12b, %r9d
	addl	$4, %r9d
	movl	%r9d, 8(%rsp)
	movzbl	61(%rbx), %edx
	shrb	$1, %dl
	movzbl	%dl, %esi
	xorl	%edx, %edx
	movl	%esi, 24(%rsp)
	movq	8(%r13), %r8
	xorl	%esi, %esi
	call	emit_library_call
.L28152:
	movq	-448(%rbp), %rdi
	jmp	.L28150
.L28012:
	call	push_temp_slots
	movq	-448(%rbp), %rax
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	movq	%r15, %rdi
	movzbl	2(%rax), %edx
	call	expand_expr
	movq	-448(%rbp), %rbx
	movq	%rax, -264(%rbp)
	cmpw	$39, (%rbx)
	je	.L28176
	movq	-448(%rbp), %rdi
	movq	-264(%rbp), %rsi
.L28164:
	call	emit_move_insn
	jmp	.L28152
.L28176:
	movq	8(%r15), %rdi
	call	int_size_in_bytes
	movq	-448(%rbp), %r11
	movl	%eax, -268(%rbp)
	cmpw	$39, (%r11)
	jne	.L28163
	movq	-448(%rbp), %r9
	movq	8(%r9), %rcx
	movq	8(%rcx), %rdx
	movl	(%rcx), %r8d
	cmpq	$0, 8(%rdx)
	movslq	%r8d,%rdi
	sete	%r13b
	leaq	15(,%rdi,8), %rsi
	andq	$-16, %rsi
	subq	%rsi, %rsp
	leaq	32(%rsp), %r10
	movzbl	%r13b, %r15d
	movq	%r10, -280(%rbp)
	movl	%r15d, -400(%rbp)
	movl	-400(%rbp), %eax
	cmpl	%r8d, %eax
	movl	%eax, -396(%rbp)
	jge	.L28121
.L28048:
	movslq	-396(%rbp),%rax
	movq	8(%rcx,%rax,8), %r14
	movq	%rax, -288(%rbp)
	movl	-268(%rbp), %eax
	movq	8(%r14), %rbx
	movq	16(%r14), %rcx
	testl	%eax, %eax
	movzbl	2(%rbx), %r13d
	movq	8(%rcx), %r14
	movslq	%r13d,%r12
	movq	%r12, -296(%rbp)
	movzbl	mode_size(%r12), %r15d
	js	.L28021
	movslq	-268(%rbp),%r11
	mov	%r15d, %r10d
	leaq	(%r10,%r14), %r8
	cmpq	%r11, %r8
	jle	.L28021
	movl	-268(%rbp), %r15d
	subl	%r14d, %r15d
	je	.L28162
.L28021:
	movq	-264(%rbp), %r12
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L28023
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L28025
	cmpw	$54, %dx
	je	.L28025
	cmpw	$55, %dx
	je	.L28025
	cmpw	$58, %dx
	je	.L28025
	cmpw	$134, %dx
	je	.L28025
	cmpw	$56, %dx
	je	.L28025
	cmpw	$140, %dx
	je	.L28025
.L28024:
	movq	-264(%rbp), %rdx
	movl	%r13d, %edi
	movzbl	2(%rdx), %eax
	testb	%al, %al
	je	.L28148
	movzbl	%al, %edi
.L28148:
	call	gen_reg_rtx
	movq	-264(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	emit_move_insn
.L28023:
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L28177
.L28028:
	cmpw	$65, %dx
	je	.L28178
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L28045
	cmpw	$54, %dx
	je	.L28045
	cmpw	$55, %dx
	je	.L28045
	cmpw	$58, %dx
	je	.L28045
	cmpw	$134, %dx
	je	.L28045
	cmpw	$56, %dx
	je	.L28045
	cmpw	$140, %dx
	je	.L28045
	cmpw	$61, %dx
	je	.L28179
.L28044:
	movslq	-268(%rbp),%rcx
	leal	0(,%r15,8), %r11d
	leaq	0(,%r14,8), %rdx
	mov	%r11d, %esi
	movq	%r12, %rdi
	xorl	%r8d, %r8d
	movl	%r13d, %r9d
	movl	%r13d, (%rsp)
	movq	%rcx, 8(%rsp)
	movl	$1, %ecx
	call	extract_bit_field
.L28149:
	movq	-288(%rbp), %r8
	movq	-280(%rbp), %r12
	movq	%rax, (%r12,%r8,8)
.L28019:
	movq	-448(%rbp), %r10
	incl	-396(%rbp)
	movl	-396(%rbp), %eax
	movq	8(%r10), %rcx
	cmpl	(%rcx), %eax
	jl	.L28048
.L28121:
	movq	cfun(%rip), %rdi
	movq	16(%rdi), %r15
	movq	40(%r15), %rbx
	testq	%rbx, %rbx
	je	.L28123
.L28054:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L28180
	call	emit_insn
	movq	%rax, 16(%rbx)
.L28053:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %rsi
	movq	16(%rdx), %r13
	testq	%rsi, %rsi
	movq	%rsi, %rbx
	movq	%rsi, 40(%r13)
	jne	.L28054
	movq	-448(%rbp), %rbx
	movq	8(%rbx), %rcx
.L28123:
	movl	-400(%rbp), %r11d
	cmpl	(%rcx), %r11d
	jge	.L28152
.L28060:
	movslq	-400(%rbp),%r15
	movq	-280(%rbp), %r10
	salq	$3, %r15
	movq	8(%r15,%rcx), %rax
	movq	(%r10,%r15), %rsi
	movq	8(%rax), %rdi
	call	emit_move_insn
	movq	-448(%rbp), %rcx
	incl	-400(%rbp)
	movl	-400(%rbp), %r12d
	movq	8(%rcx), %r8
	cmpl	(%r8), %r12d
	movq	%r8, %rcx
	jl	.L28060
	jmp	.L28152
	.p2align 6,,7
.L28180:
	movq	8(%rdi), %r9
	movq	8(%r9), %r14
	movq	%r14, 16(%rbx)
	call	emit_insn
	jmp	.L28053
.L28179:
	movzbl	2(%r12), %ebx
	cmpl	%r13d, %ebx
	jne	.L28044
.L28045:
	movq	-288(%rbp), %rdx
	movq	-280(%rbp), %r13
	movq	%r12, (%r13,%rdx,8)
	jmp	.L28019
.L28178:
	testq	%r14, %r14
	jne	.L28133
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %rdi
	movzbl	mode_size(%rdi), %esi
	cmpl	%esi, %r15d
	je	.L28034
.L28035:
	movzbq	2(%rdx), %rbx
	movzbq	mode_size(%rbx), %r9
	cmpq	%r9, %r14
	je	.L28181
.L28033:
	testq	%r14, %r14
	jne	.L28041
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%r9
	movzbq	mode_size(%r9), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %r14
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r14, %rdi
	movl	%r13d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	jmp	.L28149
.L28041:
	movl	$.LC0, %edi
	movl	$2028, %esi
.L28155:
	movl	$.LC12, %edx
.L28156:
	call	fancy_abort
.L28181:
	movq	16(%r12), %r11
	movzbq	2(%r11), %rcx
	movzbl	mode_size(%rcx), %edx
	cmpl	%edx, %r15d
	jne	.L28033
.L28034:
	xorl	%r8d, %r8d
	movq	-288(%rbp), %r10
	movq	-280(%rbp), %rax
	testq	%r14, %r14
	setne	%r8b
	leaq	(%rax,%r10,8), %rbx
	movq	8(%r12,%r8,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L28019
	cmpw	$54, %dx
	je	.L28019
	cmpw	$55, %dx
	je	.L28019
	cmpw	$58, %dx
	je	.L28019
	cmpw	$134, %dx
	je	.L28019
	cmpw	$56, %dx
	je	.L28019
	cmpw	$140, %dx
	je	.L28019
	cmpw	$61, %dx
	je	.L28182
.L28039:
	leal	0(,%r15,8), %edi
	movl	%r13d, (%rsp)
	xorl	%edx, %edx
	movslq	-268(%rbp),%r15
	mov	%edi, %esi
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r13d, %r9d
	movq	%r15, 8(%rsp)
	movq	(%rbx), %rdi
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L28019
.L28182:
	movzbl	2(%rcx), %r14d
	cmpl	%r13d, %r14d
	jne	.L28039
	jmp	.L28019
	.p2align 6,,7
.L28133:
	movq	8(%r12), %rdx
	jmp	.L28035
.L28177:
	movl	%r13d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L28029
	cmpl	%eax, 32(%rdx)
	jae	.L28030
.L28132:
	movzwl	(%r12), %edx
	jmp	.L28028
.L28030:
	movl	%r13d, %edi
	leaq	0(,%r14,8), %rbx
	call	get_mode_alignment
	mov	%eax, %ecx
	movq	%rbx, %rax
	cqto
	idivq	%rcx
	testq	%rdx, %rdx
	jne	.L28132
	movq	-296(%rbp), %rax
	movzbl	mode_size(%rax), %r11d
	cmpl	%r11d, %r15d
	jne	.L28132
	movl	%r13d, %edi
	call	gen_reg_rtx
	movl	$1, %ecx
	movq	%r14, %rdx
	movq	-280(%rbp), %r8
	movq	-288(%rbp), %r10
	movq	%r12, %rdi
	movl	%r13d, %esi
	leaq	(%r8,%r10,8), %r15
	movl	$1, %r8d
	movq	%rax, (%r15)
	call	adjust_address_1
	movq	(%r15), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L28019
.L28029:
	cmpl	$8, %eax
	ja	.L28132
	jmp	.L28030
	.p2align 6,,7
.L28025:
	movq	-264(%rbp), %r9
	movzbl	2(%r9), %edx
	movzbl	%dl, %edi
	cmpl	%r13d, %edi
	je	.L28023
	testb	%dl, %dl
	je	.L28023
	jmp	.L28024
.L28162:
	movl	$.LC0, %edi
	movl	$1978, %esi
	jmp	.L28155
.L28163:
	movl	$.LC0, %edi
	movl	$1953, %esi
	jmp	.L28155
	.p2align 6,,7
.L28174:
	movq	%r14, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4, %ecx
	call	expand_expr
	movq	%rax, -448(%rbp)
	jmp	.L28010
.L28173:
	movq	%r15, %rdi
	call	aggregate_value_p
	testl	%eax, %eax
	jne	.L27754
	movq	8(%r15), %rbx
	movq	32(%rbx), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L27754
	movzbl	16(%r14), %esi
	subb	$34, %sil
	cmpb	$1, %sil
	ja	.L27755
	movq	144(%r14), %rax
	testq	%rax, %rax
	je	.L28183
.L27756:
	cmpw	$61, (%rax)
	je	.L27754
.L27755:
	call	push_temp_slots
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movq	%r15, %rdi
	call	expand_expr
	cmpq	$0, -448(%rbp)
	movq	%rax, -368(%rbp)
	je	.L28184
.L27757:
	movq	-448(%rbp), %r8
	cmpw	$39, (%r8)
	je	.L28185
	movq	-448(%rbp), %rax
	cmpb	$51, 2(%rax)
	je	.L28186
	movq	-448(%rbp), %rdi
	movq	-368(%rbp), %rsi
	jmp	.L28164
.L28186:
	movq	%r15, %rdi
	movq	%rax, -360(%rbp)
	call	expr_size
	movl	$8, %edx
	movq	-448(%rbp), %rdi
	movq	%rax, %r13
	movq	16(%rdi), %rcx
	testq	%rcx, %rcx
	je	.L27812
	movl	32(%rcx), %edx
.L27812:
	movq	-368(%rbp), %r14
	movq	16(%r14), %rax
	testq	%rax, %rax
	je	.L27813
	cmpl	32(%rax), %edx
	jb	.L27814
.L27809:
	testq	%rax, %rax
	movl	$8, %r15d
	je	.L27810
	movl	32(%rax), %r15d
.L27810:
	movq	-448(%rbp), %rdx
	cmpb	$51, 2(%rdx)
	jne	.L28187
	movq	-368(%rbp), %rsi
	cmpb	$51, 2(%rsi)
	jne	.L28188
	movq	-448(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L27821
	cmpl	$66, %eax
	je	.L28189
.L27825:
	cmpl	$75, %eax
	je	.L27829
	cmpl	$78, %eax
	je	.L27829
.L27824:
	movq	-368(%rbp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L27834
	cmpl	$66, %eax
	je	.L28190
.L27838:
	cmpl	$75, %eax
	je	.L27842
	cmpl	$78, %eax
	je	.L27842
.L27837:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L27847
	cmpl	$66, %eax
	je	.L28191
.L27851:
	cmpl	$75, %eax
	je	.L27855
	cmpl	$78, %eax
	je	.L27855
.L27850:
	movq	-360(%rbp), %r11
	cmpw	$66, (%r11)
	jne	.L28192
	movq	-368(%rbp), %rax
	cmpw	$66, (%rax)
	jne	.L28193
	testq	%r13, %r13
	je	.L28194
	cmpw	$54, (%r13)
	je	.L28195
.L27863:
	shrl	$3, %r15d
	xorl	%edi, %edi
	mov	%r15d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %r12d
	movl	$1, volatile_ok(%rip)
	movq	%rax, -240(%rbp)
	testl	%r12d, %r12d
	je	.L28119
.L27996:
	movslq	%r12d,%r15
	movl	movstr_optab(,%r15,4), %edx
	cmpl	$1317, %edx
	je	.L27982
	cmpw	$54, (%r13)
	je	.L28196
.L27986:
	testb	$2, target_flags+3(%rip)
	je	.L27987
	cmpw	$63, mode_bitsize(%r15,%r15)
.L28147:
	jbe	.L27982
.L27985:
	movslq	%edx,%rdi
	leaq	(%rdi,%rdi,4), %rsi
	movq	%rdi, -248(%rbp)
	movq	insn_data+24(,%rsi,8), %r14
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.L27989
	movq	-360(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L27982
.L27989:
	movq	24(%r14), %rax
	testq	%rax, %rax
	jne	.L28197
.L27990:
	movq	72(%r14), %rax
	testq	%rax, %rax
	je	.L27991
	xorl	%esi, %esi
	movq	-240(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L27982
.L27991:
	call	get_last_insn
	movl	$1, %edx
	movq	%r13, %rsi
	movl	%r12d, %edi
	movq	%rax, -256(%rbp)
	call	convert_to_mode
	movq	%rax, %rbx
	movq	48(%r14), %rax
	testq	%rax, %rax
	jne	.L28198
.L27992:
	movq	-248(%rbp), %rdx
	movq	-360(%rbp), %rdi
	xorl	%eax, %eax
	movq	-368(%rbp), %rsi
	movq	-240(%rbp), %rcx
	leaq	(%rdx,%rdx,4), %r12
	movq	%rbx, %rdx
	call	*insn_data+16(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L28134
	movq	-256(%rbp), %rdi
	call	delete_insns_since
.L27982:
	movzbl	mode_wider_mode(%r15), %r12d
	testl	%r12d, %r12d
	jne	.L27996
.L28119:
	testb	$2, target_flags+3(%rip)
	movq	-360(%rbp), %rbx
	movl	$0, volatile_ok(%rip)
	setne	%r11b
	movq	8(%rbx), %rsi
	movzbl	%r11b, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	-368(%rbp), %r9
	testb	$2, target_flags+3(%rip)
	movq	%rax, %r14
	setne	%al
	movq	8(%r9), %rsi
	movzbl	%al, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%r13, %rsi
	movq	sizetype_tab(%rip), %rcx
	movq	%rax, %rbx
	movzbl	61(%rcx), %r15d
	shrb	$1, %r15b
	movzbl	%r15b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r13
	je	.L28199
.L28005:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r15
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r13, %rsi
	movq	%rax, (%r15)
	movq	%rax, %r12
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rdx
	movq	%rax, (%r12)
	movq	(%r15), %r9
	movq	8(%rdx), %rdi
	movq	(%r9), %rcx
	movq	$0, (%rcx)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r15, %rcx
	movq	fn.1(%rip), %r12
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	movq	8(%r12), %r13
	movq	8(%r13), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%r14)
	je	.L28152
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L28152
.L28199:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %rdi
	orb	$1, 49(%rdi)
	movq	fn.1(%rip), %rsi
	orb	$8, 18(%rsi)
	xorl	%esi, %esi
	movq	fn.1(%rip), %r10
	orb	$64, 50(%r10)
	movq	fn.1(%rip), %r8
	orb	$2, 18(%r8)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L28005
.L28134:
	call	emit_insn
	movl	$0, volatile_ok(%rip)
	jmp	.L28152
.L28198:
	movq	%rbx, %rdi
	movl	%r12d, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L27992
	movq	%rbx, %rsi
	movl	%r12d, %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L27992
.L28197:
	movq	-368(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L27982
	jmp	.L27990
.L27987:
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L28147
.L28196:
	movq	mode_mask_array(,%r15,8), %r14
	shrq	$1, %r14
	cmpq	%r14, 8(%r13)
	jbe	.L27985
	jmp	.L27986
.L28195:
	movq	8(%r13), %r12
	xorl	%r14d, %r14d
	movl	$17, %esi
.L27876:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L28108
.L27873:
	movslq	%ecx,%r8
	movzbq	mode_size(%r8), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L27873
.L28108:
	testl	%edi, %edi
	je	.L27866
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L27875
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L27875
	movzbq	mode_size(%rbx), %r10
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r10
	addq	%rax, %r14
	movq	%rdx, %r12
.L27875:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L27876
.L27866:
	testq	%r12, %r12
	jne	.L28161
	movl	optimize_size(%rip), %ebx
	testl	%ebx, %ebx
	jne	.L27879
	movq	ix86_cost(%rip), %r11
	mov	40(%r11), %r9d
	cmpq	%r9, %r14
	jae	.L27863
.L27880:
	movq	-368(%rbp), %rcx
	testb	$2, target_flags+3(%rip)
	movq	-360(%rbp), %rdi
	movq	8(%r13), %r12
	setne	%r13b
	movq	-360(%rbp), %rsi
	movq	8(%rcx), %r15
	xorl	%ecx, %ecx
	movq	$0, -72(%rbp)
	movl	$0, -380(%rbp)
	movq	%r15, -96(%rbp)
	movzbl	%r13b, %edx
	movq	8(%rdi), %r8
	leal	5(,%rdx,4), %r13d
	movq	%rsi, -128(%rbp)
	movzwl	(%r8), %edx
	movq	%r8, -376(%rbp)
	leal	-96(%rdx), %r14d
	cmpw	$1, %r14w
	jbe	.L27885
	cmpw	$99, %dx
	je	.L27885
	cmpw	$98, %dx
	je	.L27885
.L27884:
	movq	-376(%rbp), %r10
	movl	%ecx, -112(%rbp)
	xorl	%edx, %edx
	movzwl	(%r10), %eax
	cmpw	$96, %ax
	je	.L27887
	cmpw	$98, %ax
	je	.L27887
.L27886:
	movq	-376(%rbp), %r11
	movq	-368(%rbp), %r9
	movl	%edx, -64(%rbp)
	xorl	%ecx, %ecx
	movq	%r11, -120(%rbp)
	movq	%r9, -104(%rbp)
	movzwl	(%r15), %edx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L27890
	cmpw	$99, %dx
	je	.L27890
	cmpw	$98, %dx
	je	.L27890
.L27889:
	movl	-64(%rbp), %r14d
	movl	%ecx, -88(%rbp)
	movl	$0, -84(%rbp)
	movl	$0, -108(%rbp)
	testl	%r14d, %r14d
	je	.L27891
	movq	%r12, -72(%rbp)
.L27891:
	movl	-88(%rbp), %eax
	movq	%r12, -80(%rbp)
	testl	%eax, %eax
	je	.L27893
	movl	-112(%rbp), %r8d
	testl	%r8d, %r8d
	jne	.L27892
.L27893:
	xorl	%r14d, %r14d
	movl	$17, %esi
.L27906:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L28111
.L27903:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L27903
.L28111:
	testl	%edi, %edi
	je	.L27896
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L27905
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L27905
	movzbq	mode_size(%rbx), %r9
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%r9
	addq	%rax, %r14
	movq	%rdx, %r12
.L27905:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L27906
.L27896:
	testq	%r12, %r12
	jne	.L28161
	cmpq	$2, %r14
	jbe	.L27892
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L28113
.L27914:
	movslq	%ecx,%rbx
	movzbl	mode_size(%rbx), %r11d
	cmpl	%r13d, %r11d
	cmovae	-380(%rbp), %ecx
	movl	%ecx, -380(%rbp)
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L27914
.L28113:
	movl	-88(%rbp), %r14d
	testl	%r14d, %r14d
	jne	.L27920
	movzwl	(%r15), %edx
	leal	-67(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L27918
	cmpw	$54, %dx
	je	.L27918
	cmpw	$55, %dx
	je	.L27918
	cmpw	$58, %dx
	je	.L27918
	cmpw	$134, %dx
	je	.L27918
	cmpw	$56, %dx
	je	.L27918
	cmpw	$140, %dx
	je	.L27918
.L27920:
	movl	-112(%rbp), %eax
	testl	%eax, %eax
	jne	.L27892
	movq	-376(%rbp), %r10
	movzwl	(%r10), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L27922
	cmpw	$54, %dx
	je	.L27922
	cmpw	$55, %dx
	je	.L27922
	cmpw	$58, %dx
	je	.L27922
	cmpw	$134, %dx
	je	.L27922
	cmpw	$56, %dx
	je	.L27922
	cmpw	$140, %dx
	je	.L27922
.L27892:
	cmpl	$1, %r13d
	jbe	.L27925
.L27976:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L28116
.L27932:
	movslq	%ecx,%rsi
	movzbl	mode_size(%rsi), %edx
	cmpl	%r13d, %edx
	cmovae	-380(%rbp), %ecx
	movl	%ecx, -380(%rbp)
	movzbl	mode_wider_mode(%rsi), %ecx
	testl	%ecx, %ecx
	jne	.L27932
.L28116:
	movl	-380(%rbp), %eax
	testl	%eax, %eax
	je	.L27925
	movslq	-380(%rbp),%r14
	movq	%r14, %r13
	salq	$4, %r13
	addq	optab_table+240(%rip), %r13
	movl	8(%r13), %ebx
	cmpl	$1317, %ebx
	je	.L27934
	movl	-380(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L27934
	movzbq	mode_size(%r14), %rdx
	movslq	%ebx,%rcx
	movq	$0, -392(%rbp)
	cmpq	%rdx, -80(%rbp)
	leaq	(%rcx,%rcx,4), %r12
	movq	insn_data+16(,%r12,8), %r15
	leaq	-128(%rbp), %r12
	movq	%rdx, -328(%rbp)
	jb	.L27934
	movl	-64(%rbp), %ecx
.L27974:
	testl	%ecx, %ecx
	je	.L27938
	subq	%rdx, 56(%r12)
.L27938:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L27939
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L27940
	movl	-380(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L28143:
	movq	%rax, -392(%rbp)
.L27939:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L27942
	movq	24(%r12), %rdi
	movl	-380(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L28144:
	cmpq	$0, (%r12)
	movq	%rax, %r13
	jne	.L28200
	movl	target_flags(%rip), %esi
	testl	$33554432, %esi
	je	.L27948
	movzbl	mode_size(%r14), %r9d
	leal	7(%r9), %edx
	andl	$-8, %edx
.L27949:
	movq	cfun(%rip), %r8
	andl	$33554432, %esi
	movq	16(%r8), %r11
	leaq	8(%r11), %rdi
	movl	8(%r11), %ecx
	je	.L27950
	movzbl	mode_size(%r14), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L28145:
	movq	%r14, %r10
	leal	(%rax,%rcx), %esi
	salq	$4, %r10
	movl	%esi, (%rdi)
	addq	optab_table+384(%rip), %r10
	movl	8(%r10), %eax
	cmpl	$1317, %eax
	je	.L27952
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rdi
	movq	insn_data+24(,%rdi,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L27953
	movq	%r13, %rdi
	movl	-380(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L28201
.L27953:
	leaq	(%rbx,%rbx,4), %rcx
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%rcx,8)
.L28146:
	movq	%rax, %rdi
	call	emit_insn
.L27972:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L27973
	movq	-328(%rbp), %r13
	addq	%r13, 56(%r12)
.L27973:
	movq	48(%r12), %r10
	movq	-328(%rbp), %rdx
	subq	-328(%rbp), %r10
	cmpq	%rdx, %r10
	movq	%r10, 48(%r12)
	jae	.L27974
.L27934:
	movzbl	mode_size(%r14), %r13d
	cmpl	$1, %r13d
	ja	.L27976
.L27925:
	cmpq	$0, -80(%rbp)
	je	.L28152
	movl	$.LC0, %edi
	movl	$1503, %esi
	movl	$.LC10, %edx
	jmp	.L28156
.L28201:
	movl	-380(%rbp), %edi
	movq	%r13, %rsi
	call	force_reg
	movq	%rax, %r13
	jmp	.L27953
.L27952:
	movzbl	mode_size(%r14), %r9d
	cmpl	%edx, %r9d
	je	.L28202
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r11b
	movzbl	%r11b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L27960:
	movl	-380(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%r8d, %r8d
	testq	%r8, %r8
	movq	%rax, %rbx
	je	.L27969
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L28203
.L27969:
	movq	%rbx, %rdi
	movq	%r13, %rsi
	call	emit_move_insn
	jmp	.L27972
.L28203:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L27969
.L28202:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L27960
.L27950:
	movzbl	mode_size(%r14), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L28145
.L27948:
	movzbl	mode_size(%r14), %ebx
	leal	1(%rbx), %edx
	andl	$-2, %edx
	jmp	.L27949
.L28200:
	movq	%rax, %rsi
	movq	-392(%rbp), %rdi
	xorl	%eax, %eax
	call	*%r15
	jmp	.L28146
.L27942:
	movq	24(%r12), %rdi
	movl	-380(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L28144
.L27940:
	movl	-380(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L28143
.L27922:
	movq	-376(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -120(%rbp)
	jmp	.L27892
.L27918:
	movq	%r15, %rdi
	call	copy_addr_to_reg
	movq	%rax, -96(%rbp)
	jmp	.L27920
.L28161:
	movl	$.LC0, %edi
	movl	$1542, %esi
	movl	$.LC5, %edx
	jmp	.L28156
.L27890:
	movl	$1, %ecx
	jmp	.L27889
.L27887:
	movl	$1, %edx
	jmp	.L27886
.L27885:
	movl	$1, %ecx
	jmp	.L27884
.L27879:
	cmpq	$2, %r14
	ja	.L27863
	jmp	.L27880
.L28194:
	movl	$.LC0, %edi
	movl	$1648, %esi
.L28160:
	movl	$.LC9, %edx
	jmp	.L28156
.L28193:
	movl	$.LC0, %edi
	movl	$1646, %esi
	jmp	.L28160
.L28192:
	movl	$.LC0, %edi
	movl	$1644, %esi
	jmp	.L28160
.L27855:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r13), %r12
	movq	%rax, %rbx
	je	.L28204
.L27857:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L27850
.L28204:
	cmpq	16(%r13), %rax
	jne	.L27857
	jmp	.L27850
.L28191:
	cmpb	$51, 2(%r13)
	je	.L27848
	movq	8(%r13), %r12
	cmpw	$71, (%r12)
	je	.L28205
.L27848:
	cmpl	$66, %eax
	jne	.L27851
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L27850
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	movq	%rbx, 8(%rax)
	jmp	.L27850
.L28205:
	movq	8(%r12), %rsi
	movq	%r13, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L27849
	movzbl	2(%r13), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L27850
.L27849:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L28142:
	movq	%rax, %r13
	jmp	.L27850
.L27847:
	cmpq	$0, 16(%r13)
	je	.L28206
	movq	24(%r13), %rax
	testq	%rax, %rax
	jne	.L28142
	movq	8(%r13), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L27850
.L28206:
	movq	8(%r13), %rdi
	call	copy_to_reg
	jmp	.L28142
.L27842:
	movq	-368(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	movq	-368(%rbp), %rsi
	movq	%rax, %r12
	movq	16(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-368(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %r12
	je	.L28207
.L27844:
	movq	-368(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -368(%rbp)
	movq	%r12, 8(%rax)
	movq	-368(%rbp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L27837
.L28207:
	cmpq	16(%rcx), %rax
	jne	.L27844
	jmp	.L27837
.L28190:
	cmpb	$51, 2(%rdx)
	je	.L27835
	movq	8(%rdx), %r12
	cmpw	$71, (%r12)
	je	.L28208
.L27835:
	cmpl	$66, %eax
	jne	.L27838
	movq	-368(%rbp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	movq	-368(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L27837
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, -368(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L27837
.L28208:
	movq	8(%r12), %rsi
	movq	%rdx, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%r12)
	movq	%rax, %rbx
	je	.L27836
	movq	-368(%rbp), %rax
	movzbl	2(%rax), %edi
	call	gen_reg_rtx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	movq	%rax, -368(%rbp)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L27837
.L27836:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L28141:
	movq	%rax, -368(%rbp)
	jmp	.L27837
.L27834:
	movq	-368(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	.L28209
	movq	-368(%rbp), %rcx
	movq	24(%rcx), %rax
	testq	%rax, %rax
	jne	.L28141
	movq	-368(%rbp), %r10
	movq	8(%r10), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	-368(%rbp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r8
	movq	%r8, -368(%rbp)
	jmp	.L27837
.L28209:
	movq	8(%rax), %rdi
	call	copy_to_reg
	jmp	.L28141
.L27829:
	movq	-448(%rbp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	movq	-448(%rbp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %r12
	je	.L28210
.L27831:
	movq	-448(%rbp), %rdi
	call	copy_rtx
	movq	%rax, -360(%rbp)
	movq	%r12, 8(%rax)
	movq	-360(%rbp), %rcx
	movq	%rbx, 16(%rcx)
	jmp	.L27824
.L28210:
	cmpq	16(%rsi), %rax
	jne	.L27831
	jmp	.L27824
.L28189:
	jne	.L27825
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	-448(%rbp), %rcx
	movq	%rax, %rbx
	cmpq	8(%rcx), %rax
	je	.L27824
	movq	%rcx, %rdi
	call	copy_rtx
	movq	%rax, -360(%rbp)
	movq	%rbx, 8(%rax)
	jmp	.L27824
.L27821:
	testq	%rcx, %rcx
	je	.L28211
	movq	-448(%rbp), %r10
	movq	24(%r10), %rbx
	testq	%rbx, %rbx
	movq	%rbx, -360(%rbp)
	jne	.L27824
	movq	-448(%rbp), %r12
	movq	8(%r12), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r9
	movq	%r9, -360(%rbp)
	jmp	.L27824
.L28211:
	movq	-448(%rbp), %r8
	movq	8(%r8), %rdi
	call	copy_to_reg
	movq	%rax, -360(%rbp)
	jmp	.L27824
.L28188:
	movl	$.LC0, %edi
	movl	$1637, %esi
	jmp	.L28160
.L28187:
	movl	$.LC0, %edi
	movl	$1634, %esi
	jmp	.L28160
.L27814:
	testq	%rcx, %rcx
	movl	$8, %r15d
	je	.L27810
	movl	32(%rcx), %r15d
	jmp	.L27810
.L27813:
	cmpl	$7, %edx
	ja	.L27809
	jmp	.L27814
.L28185:
	movq	8(%r15), %rdi
	call	int_size_in_bytes
	movq	-448(%rbp), %r15
	movl	%eax, -204(%rbp)
	cmpw	$39, (%r15)
	jne	.L28163
	movq	-448(%rbp), %rax
	movq	8(%rax), %rcx
	movq	8(%rcx), %rdi
	movl	(%rcx), %r10d
	cmpq	$0, 8(%rdi)
	movslq	%r10d,%r13
	sete	%dl
	leaq	15(,%r13,8), %r11
	andq	$-16, %r11
	subq	%r11, %rsp
	leaq	32(%rsp), %r12
	movzbl	%dl, %r14d
	movq	%r12, -216(%rbp)
	movl	%r14d, -352(%rbp)
	movl	-352(%rbp), %r9d
	cmpl	%r10d, %r9d
	movl	%r9d, -348(%rbp)
	jge	.L28102
.L27793:
	movslq	-348(%rbp),%r9
	movq	8(%rcx,%r9,8), %r8
	movq	%r9, -224(%rbp)
	movl	-204(%rbp), %ecx
	movq	8(%r8), %r15
	movq	16(%r8), %rsi
	testl	%ecx, %ecx
	movzbl	2(%r15), %r13d
	movq	8(%rsi), %r14
	movslq	%r13d,%rbx
	movq	%rbx, -232(%rbp)
	movzbl	mode_size(%rbx), %r15d
	js	.L27766
	movslq	-204(%rbp),%r12
	mov	%r15d, %edx
	leaq	(%rdx,%r14), %r11
	cmpq	%r12, %r11
	jle	.L27766
	movl	-204(%rbp), %r15d
	subl	%r14d, %r15d
	je	.L28162
.L27766:
	movq	-368(%rbp), %r12
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L27768
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L27770
	cmpw	$54, %dx
	je	.L27770
	cmpw	$55, %dx
	je	.L27770
	cmpw	$58, %dx
	je	.L27770
	cmpw	$134, %dx
	je	.L27770
	cmpw	$56, %dx
	je	.L27770
	cmpw	$140, %dx
	je	.L27770
.L27769:
	movq	-368(%rbp), %rbx
	movl	%r13d, %edi
	movzbl	2(%rbx), %eax
	testb	%al, %al
	je	.L28139
	movzbl	%al, %edi
.L28139:
	call	gen_reg_rtx
	movq	-368(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	emit_move_insn
.L27768:
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L28212
.L27773:
	cmpw	$65, %dx
	je	.L28213
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L27790
	cmpw	$54, %dx
	je	.L27790
	cmpw	$55, %dx
	je	.L27790
	cmpw	$58, %dx
	je	.L27790
	cmpw	$134, %dx
	je	.L27790
	cmpw	$56, %dx
	je	.L27790
	cmpw	$140, %dx
	je	.L27790
	cmpw	$61, %dx
	je	.L28214
.L27789:
	movslq	-204(%rbp),%r10
	leal	0(,%r15,8), %r9d
	leaq	0(,%r14,8), %rdx
	mov	%r9d, %esi
	movq	%r12, %rdi
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r13d, %r9d
	movl	%r13d, (%rsp)
	movq	%r10, 8(%rsp)
	call	extract_bit_field
.L28140:
	movq	-224(%rbp), %r12
	movq	-216(%rbp), %r11
	movq	%rax, (%r11,%r12,8)
.L27764:
	movq	-448(%rbp), %rdx
	incl	-348(%rbp)
	movl	-348(%rbp), %eax
	movq	8(%rdx), %rcx
	cmpl	(%rcx), %eax
	jl	.L27793
.L28102:
	movq	cfun(%rip), %rdi
	movq	16(%rdi), %r15
	movq	40(%r15), %rbx
	testq	%rbx, %rbx
	je	.L28104
.L27799:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L28215
	call	emit_insn
	movq	%rax, 16(%rbx)
.L27798:
	movq	cfun(%rip), %r8
	movq	40(%rbx), %rsi
	movq	16(%r8), %r13
	testq	%rsi, %rsi
	movq	%rsi, %rbx
	movq	%rsi, 40(%r13)
	jne	.L27799
	movq	-448(%rbp), %rbx
	movq	8(%rbx), %rcx
.L28104:
	movl	-352(%rbp), %r10d
	cmpl	(%rcx), %r10d
	jge	.L28152
.L27805:
	movslq	-352(%rbp),%r15
	movq	-216(%rbp), %r12
	salq	$3, %r15
	movq	8(%r15,%rcx), %rax
	movq	(%r12,%r15), %rsi
	movq	8(%rax), %rdi
	call	emit_move_insn
	movq	-448(%rbp), %r11
	incl	-352(%rbp)
	movl	-352(%rbp), %r9d
	movq	8(%r11), %rcx
	cmpl	(%rcx), %r9d
	jl	.L27805
	jmp	.L28152
.L28215:
	movq	8(%rdi), %rcx
	movq	8(%rcx), %r14
	movq	%r14, 16(%rbx)
	call	emit_insn
	jmp	.L27798
.L28214:
	movzbl	2(%r12), %esi
	cmpl	%r13d, %esi
	jne	.L27789
.L27790:
	movq	-224(%rbp), %r8
	movq	-216(%rbp), %r13
	movq	%r12, (%r13,%r8,8)
	jmp	.L27764
.L28213:
	testq	%r14, %r14
	jne	.L28129
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %rcx
	movzbl	mode_size(%rcx), %edi
	cmpl	%edi, %r15d
	je	.L27779
.L27780:
	movzbq	2(%rdx), %rsi
	movzbq	mode_size(%rsi), %rbx
	cmpq	%rbx, %r14
	je	.L28216
.L27778:
	testq	%r14, %r14
	jne	.L28041
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rcx
	movzbq	mode_size(%rcx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %r14
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r14, %rdi
	movl	%r13d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	jmp	.L28140
.L28216:
	movq	16(%r12), %r9
	movzbq	2(%r9), %r10
	movzbl	mode_size(%r10), %r8d
	cmpl	%r8d, %r15d
	jne	.L27778
.L27779:
	xorl	%r11d, %r11d
	movq	-224(%rbp), %rdx
	movq	-216(%rbp), %rax
	testq	%r14, %r14
	setne	%r11b
	leaq	(%rax,%rdx,8), %rbx
	movq	8(%r12,%r11,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r14d
	cmpw	$1, %r14w
	jbe	.L27764
	cmpw	$54, %dx
	je	.L27764
	cmpw	$55, %dx
	je	.L27764
	cmpw	$58, %dx
	je	.L27764
	cmpw	$134, %dx
	je	.L27764
	cmpw	$56, %dx
	je	.L27764
	cmpw	$140, %dx
	je	.L27764
	cmpw	$61, %dx
	je	.L28217
.L27784:
	leal	0(,%r15,8), %edi
	movl	%r13d, (%rsp)
	xorl	%edx, %edx
	movslq	-204(%rbp),%r15
	mov	%edi, %esi
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r13d, %r9d
	movq	%r15, 8(%rsp)
	movq	(%rbx), %rdi
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L27764
.L28217:
	movzbl	2(%rcx), %r12d
	cmpl	%r13d, %r12d
	jne	.L27784
	jmp	.L27764
.L28129:
	movq	8(%r12), %rdx
	jmp	.L27780
.L28212:
	movl	%r13d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L27774
	cmpl	%eax, 32(%rdx)
	jae	.L27775
.L28128:
	movzwl	(%r12), %edx
	jmp	.L27773
.L27775:
	movl	%r13d, %edi
	leaq	0(,%r14,8), %rbx
	call	get_mode_alignment
	mov	%eax, %r8d
	movq	%rbx, %rax
	cqto
	idivq	%r8
	testq	%rdx, %rdx
	jne	.L28128
	movq	-232(%rbp), %r9
	movzbl	mode_size(%r9), %r10d
	cmpl	%r10d, %r15d
	jne	.L28128
	movl	%r13d, %edi
	call	gen_reg_rtx
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-224(%rbp), %rdx
	movq	-216(%rbp), %r11
	movq	%r12, %rdi
	movl	%r13d, %esi
	leaq	(%r11,%rdx,8), %r15
	movq	%r14, %rdx
	movq	%rax, (%r15)
	call	adjust_address_1
	movq	(%r15), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L27764
.L27774:
	cmpl	$8, %eax
	ja	.L28128
	jmp	.L27775
.L27770:
	movq	-368(%rbp), %rax
	movzbl	2(%rax), %edx
	movzbl	%dl, %ecx
	cmpl	%r13d, %ecx
	je	.L27768
	testb	%dl, %dl
	je	.L27768
	jmp	.L27769
.L28184:
	movq	%r14, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4, %ecx
	call	expand_expr
	movq	%rax, -448(%rbp)
	jmp	.L27757
.L28183:
	movq	%r14, %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	144(%r14), %rax
	jmp	.L27756
	.p2align 6,,7
.L27644:
	movl	$0, -160(%rbp)
	xorl	%ebx, %ebx
	movq	%r14, %r12
	call	push_temp_slots
	movq	global_trees+120(%rip), %rcx
	movq	global_trees+136(%rip), %r11
	movl	$0, -404(%rbp)
	leaq	-136(%rbp), %r13
	movq	$0, -168(%rbp)
	movq	%rcx, -424(%rbp)
	movq	%r11, -416(%rbp)
	movzbl	16(%r14), %eax
	cmpb	$39, %al
	je	.L28218
	cmpb	$40, %al
	je	.L28219
	movq	8(%r14), %rdx
	movzbl	61(%rdx), %esi
	movzbl	17(%rdx), %r11d
	shrb	$1, %sil
	shrb	$5, %r11b
	movzbl	%sil, %ecx
	movl	%r11d, %r10d
	andl	$1, %r10d
	movl	%ecx, -404(%rbp)
	cmpl	$51, -404(%rbp)
	movl	%r10d, -184(%rbp)
	je	.L28220
	movslq	-404(%rbp),%rdi
	movzwq	mode_bitsize(%rdi,%rdi), %rdx
	movq	%rdx, -136(%rbp)
.L27647:
	testq	%rbx, %rbx
	jne	.L28221
	.p2align 4,,7
.L27714:
	movzbl	16(%r12), %edx
	cmpb	$40, %dl
	je	.L28222
	cmpb	$39, %dl
	je	.L28223
	leal	-43(%rdx), %ebx
	cmpb	$1, %bl
	jbe	.L28224
	cmpb	$57, %dl
	jne	.L27672
	movq	-168(%rbp), %rax
	leaq	-168(%rbp), %r9
	movq	8(%r12), %rdx
	testq	%rax, %rax
	je	.L27673
	movq	(%rax), %r8
.L27674:
	testq	%r8, %r8
	je	.L28096
	movq	128(%rdx), %rsi
.L27707:
	movq	24(%r8), %rdi
	testq	%rdi, %rdi
	movq	%rdi, %rdx
	je	.L28098
	.p2align 4,,7
.L27692:
	movq	8(%rdi), %r10
	cmpq	%rsi, 128(%r10)
	je	.L28225
	movzbl	16(%rdi), %eax
	cmpb	$47, %al
	je	.L27688
	cmpb	$51, %al
	je	.L27688
	movzbl	%al, %r11d 
	movzbl	tree_code_type(%r11), %eax
	cmpb	$114, %al
	je	.L27691
	cmpb	$49, %al
	je	.L27691
	cmpb	$50, %al
	je	.L27691
	cmpb	$101, %al
	je	.L27691
	xorl	%edi, %edi
	.p2align 4,,7
.L27687:
	testq	%rdi, %rdi
	jne	.L27692
.L28098:
	testq	%rdx, %rdx
	je	.L28100
	.p2align 4,,7
.L27706:
	movq	8(%rdx), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$13, %al
	je	.L27698
	cmpb	$15, %al
	je	.L27698
.L27695:
	movzbl	16(%rdx), %eax
	cmpb	$47, %al
	je	.L27702
	cmpb	$51, %al
	je	.L27702
	movzbl	%al, %ecx 
	movzbl	tree_code_type(%rcx), %eax
	cmpb	$114, %al
	je	.L27705
	cmpb	$49, %al
	je	.L27705
	cmpb	$50, %al
	je	.L27705
	cmpb	$101, %al
	je	.L27705
	xorl	%edx, %edx
	.p2align 4,,7
.L27701:
	testq	%rdx, %rdx
	jne	.L27706
.L28100:
	movq	(%r8), %r8
	testq	%r8, %r8
	jne	.L27707
.L28096:
	xorl	%edi, %edi
.L27685:
	testq	%rdi, %rdi
	je	.L27656
	movq	%rdi, %r12
	jmp	.L27714
.L27656:
	movq	-424(%rbp), %rdi
	xorl	%esi, %esi
	call	host_integerp
	testl	%eax, %eax
	je	.L27715
	movq	sizetype_tab+24(%rip), %rdi
	movq	-424(%rbp), %rsi
	call	convert
	movq	global_trees+152(%rip), %rdx
	movl	$61, %edi
	movq	%rax, %rsi
	call	size_binop
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L27715
	movq	-416(%rbp), %rdx
	movl	$59, %edi
	call	size_binop
	testq	%rax, %rax
	movq	%rax, %rbx
	jne	.L28226
.L27715:
	movq	-416(%rbp), %rdi
	xorl	%esi, %esi
	call	tree_low_cst
	movq	%rax, -144(%rbp)
	movq	-424(%rbp), %rax
	movq	%rax, -152(%rbp)
.L27716:
	movl	-404(%rbp), %r11d
	testl	%r11d, %r11d
	movl	%r11d, -156(%rbp)
	jne	.L27718
	movl	-344(%rbp), %edi
	testl	%edi, %edi
	jne	.L28227
.L27718:
	movq	%r12, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	-152(%rbp), %rdi
	movq	%rax, %r13
	movq	%rax, -200(%rbp)
	testq	%rdi, %rdi
	jne	.L28228
.L27719:
	cmpw	$66, (%r13)
	je	.L28229
.L27729:
	movl	-160(%rbp), %eax
	testl	%eax, %eax
	je	.L27744
	cmpw	$66, (%r13)
	je	.L28230
.L27744:
	cmpb	$39, 16(%r14)
	je	.L28231
.L27746:
	cmpw	$66, (%r13)
	je	.L28232
.L27748:
	movq	%r14, %rdi
	call	get_alias_set
	movl	-344(%rbp), %r8d
	movl	-156(%rbp), %ecx
	movq	%rax, %rdi
	movq	-136(%rbp), %rsi
	movq	-144(%rbp), %rdx
	testl	%r8d, %r8d
	je	.L27750
	movq	8(%r14), %r9
	movzbl	61(%r9), %r10d
	shrb	$1, %r10b
	movzbl	%r10b, %r9d
.L27751:
	movl	-184(%rbp), %eax
	movq	%r15, %r8
	movl	%eax, (%rsp)
	movq	8(%r12), %r11
	movl	%edi, 16(%rsp)
	movq	%r13, %rdi
	movq	%r11, 8(%rsp)
	call	store_field
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	preserve_temp_slots
	call	free_temp_slots
	call	pop_temp_slots
	movl	-344(%rbp), %r12d
	testl	%r12d, %r12d
	jne	.L28233
	movq	$0, -448(%rbp)
	jmp	.L27642
.L28233:
	movq	8(%r14), %r13
	movq	8(%r15), %rdx
	movzbl	61(%r13), %ecx
	movzbl	61(%rdx), %r14d
	movq	%rbx, %rdx
	shrb	$1, %cl
	shrb	$1, %r14b
	movzbl	%cl, %edi
	movzbl	%r14b, %esi
	movzbl	17(%r13), %ecx
	shrb	$5, %cl
	andl	$1, %ecx
	call	convert_modes
	jmp	.L28151
.L27750:
	xorl	%r9d, %r9d
	jmp	.L27751
.L28232:
	movq	%r14, %rdi
	call	can_address_p
	testl	%eax, %eax
	jne	.L27748
	cmpq	-200(%rbp), %r13
	je	.L28234
.L27749:
	orb	$1, 3(%r13)
	jmp	.L27748
.L28234:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	jmp	.L27749
	.p2align 6,,7
.L28231:
	movq	40(%r14), %rsi
	testb	$16, 17(%rsi)
	je	.L27746
	cmpq	-200(%rbp), %r13
	je	.L28235
.L27747:
	orb	$4, 3(%r13)
	jmp	.L27746
.L28235:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	jmp	.L27747
	.p2align 6,,7
.L28230:
	cmpq	-200(%rbp), %r13
	je	.L28236
.L27745:
	orb	$8, 3(%r13)
	jmp	.L27744
.L28236:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	jmp	.L27745
	.p2align 6,,7
.L28229:
	movq	16(%r13), %rax
	xorl	%ebx, %ebx
	testq	%rax, %rax
	je	.L27731
	movq	8(%rax), %rbx
.L27731:
	movq	%r13, %rdi
	call	shallow_copy_rtx
	xorl	%edx, %edx
	movq	%r14, %rsi
	movq	%rax, %r13
	movq	%rax, %rdi
	call	set_mem_attributes
	movq	16(%r13), %rax
	testq	%rax, %rax
	je	.L27733
	cmpq	%rbx, 8(%rax)
.L28138:
	je	.L27729
	testq	%rax, %rax
	je	.L27729
	movq	16(%rax), %rsi
	testq	%rsi, %rsi
	je	.L27729
	movq	-144(%rbp), %rcx
	cmpq	$-1, %rcx
	leaq	7(%rcx), %rdi
	movq	%rcx, %rax
	cmovle	%rdi, %rax
	sarq	$3, %rax
	testq	%rax, %rax
	je	.L27729
	movq	8(%rsi), %rsi
	xorl	%edi, %edi
	subq	%rax, %rsi
	call	gen_rtx_CONST_INT
	movq	%r13, %rdi
	movq	%rax, %rsi
	call	set_mem_offset
	jmp	.L27729
	.p2align 6,,7
.L27733:
	testq	%rbx, %rbx
	jmp	.L28138
.L28228:
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	call	expand_expr
	cmpw	$66, (%r13)
	movq	%rax, -440(%rbp)
	jne	.L28237
	movq	-440(%rbp), %rbx
	movl	ptr_mode(%rip), %edi
	movzbl	2(%rbx), %ecx
	cmpl	%edi, %ecx
	je	.L27721
	movq	%rbx, %rsi
	xorl	%edx, %edx
	call	convert_to_mode
	movq	%rax, -440(%rbp)
.L27721:
	movl	(%r13), %eax
	andl	$16777215, %eax
	cmpl	$3342402, %eax
	je	.L28238
.L27722:
	movq	8(%r14), %rbx
	movq	-152(%rbp), %rdi
	call	highest_pow2_factor
	movq	-440(%rbp), %rsi
	movq	%r13, %rdi
	movl	64(%rbx), %r11d
	shrl	$3, %r11d
	mov	%r11d, %edx
	cmpq	%rax, %rdx
	cmovl	%rax, %rdx
	call	offset_address
	movq	%rax, %r13
	jmp	.L27719
.L28238:
	movq	8(%r13), %rsi
	cmpb	$0, 2(%rsi)
	je	.L27722
	movq	-136(%rbp), %rdx
	testq	%rdx, %rdx
	jle	.L27722
	movq	-144(%rbp), %rax
	movq	%rdx, %rbx
	cqto
	idivq	%rbx
	testq	%rdx, %rdx
	jne	.L27722
	movl	-156(%rbp), %edi
	call	get_mode_alignment
	movq	-136(%rbp), %rdx
	mov	%eax, %r9d
	movq	%rdx, %rax
	cqto
	idivq	%r9
	testq	%rdx, %rdx
	jne	.L27722
	movl	-156(%rbp), %edi
	call	get_mode_alignment
	movq	16(%r13), %rdx
	testq	%rdx, %rdx
	je	.L27723
	cmpl	%eax, 32(%rdx)
.L28137:
	jne	.L27722
	movq	-144(%rbp), %rdx
	movl	-156(%rbp), %esi
	movq	%r13, %rdi
	movl	$1, %ecx
	movl	$1, %r8d
	cmpq	$-1, %rdx
	leaq	7(%rdx), %r10
	cmovle	%r10, %rdx
	sarq	$3, %rdx
	call	adjust_address_1
	movq	$0, -144(%rbp)
	movq	%rax, %r13
	jmp	.L27722
.L27723:
	cmpl	$8, %eax
	jmp	.L28137
.L28237:
	movl	$.LC0, %edi
	movl	$3686, %esi
	movl	$.LC19, %edx
	jmp	.L28156
	.p2align 6,,7
.L28227:
	movq	%r12, %rdi
	call	stabilize_reference
	movq	%rax, %r12
	jmp	.L27718
.L28226:
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	host_integerp
	testl	%eax, %eax
	je	.L27715
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	tree_low_cst
	movq	$0, -152(%rbp)
	movq	%rax, -144(%rbp)
	jmp	.L27716
	.p2align 6,,7
.L27705:
	movq	32(%rdx), %rdx
	jmp	.L27701
	.p2align 6,,7
.L27702:
	movq	40(%rdx), %rdx
	jmp	.L27701
	.p2align 6,,7
.L27698:
	movq	8(%rcx), %rdi
	cmpq	%rsi, 128(%rdi)
	jne	.L27695
	testq	%r9, %r9
	je	.L27699
	movq	%r8, (%r9)
.L27699:
	movl	$41, %edi
	call	build1
	movq	%rax, %rdi
	jmp	.L27685
	.p2align 6,,7
.L27691:
	movq	32(%rdi), %rdi
	jmp	.L27687
	.p2align 6,,7
.L27688:
	movq	40(%rdi), %rdi
	jmp	.L27687
.L28225:
	testq	%r9, %r9
	je	.L27685
	movq	%r8, (%r9)
	jmp	.L27685
.L27673:
	movq	placeholder_list(%rip), %r8
	jmp	.L27674
.L27672:
	leal	-116(%rdx), %esi
	cmpb	$1, %sil
	jbe	.L27659
	leal	-114(%rdx), %ebx
	cmpb	$1, %bl
	ja	.L27656
	movq	32(%r12), %r9
	movq	8(%r12), %r10
	movq	8(%r9), %rdx
	movzbl	61(%r10), %r8d
	movzbl	61(%rdx), %r13d
	andb	$-2, %r8b
	andb	$-2, %r13b
	cmpb	%r13b, %r8b
	jne	.L27656
.L27659:
	testb	$8, 17(%r12)
	je	.L27713
	movl	$1, -160(%rbp)
.L27713:
	movq	32(%r12), %r12
	jmp	.L27714
.L28224:
	movq	32(%r12), %r13
	movq	40(%r12), %rbx
	movq	%r13, -192(%rbp)
	movq	8(%r13), %rdx
	xorl	%r13d, %r13d
	movq	24(%rdx), %rax
	testq	%rax, %rax
	je	.L27667
	movq	104(%rax), %r13
.L27667:
	movq	8(%rdx), %r9
	testq	%r13, %r13
	movq	40(%r9), %r8
	movq	%r8, -432(%rbp)
	jne	.L28239
.L27668:
	testb	$2, 17(%rbx)
	je	.L28240
.L27669:
	movq	-432(%rbp), %rax
	testb	$2, 17(%rax)
	je	.L28241
.L27670:
	movq	sizetype_tab(%rip), %rdi
	movq	%rbx, %rsi
	call	convert
	movq	-432(%rbp), %rdx
	movl	$61, %edi
	movq	%rax, %rsi
	call	size_binop
	movq	-424(%rbp), %rsi
	movl	$59, %edi
	movq	%rax, %rdx
	call	size_binop
	movq	%rax, -424(%rbp)
	jmp	.L27659
.L28241:
	movq	%rax, %rdi
	call	contains_placeholder_p
	testl	%eax, %eax
	je	.L27670
	movq	sizetype_tab(%rip), %rsi
	movq	-432(%rbp), %rdx
	movl	$58, %edi
	movq	-192(%rbp), %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, -432(%rbp)
	jmp	.L27670
.L28240:
	movq	%rbx, %rdi
	call	contains_placeholder_p
	testl	%eax, %eax
	je	.L27669
	movq	8(%rbx), %rsi
	movq	%rbx, %rdx
	movl	$58, %edi
	movq	%r12, %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %rbx
	jmp	.L27669
.L28239:
	movq	%r13, %rdi
	call	integer_zerop
	testl	%eax, %eax
	jne	.L27668
	movq	8(%rbx), %rsi
	movq	%rbx, %rdx
	movl	$60, %edi
	movq	%r13, %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	movq	%rax, %rbx
	jmp	.L27668
.L28223:
	movq	40(%r12), %r13
	movq	88(%r13), %rbx
	testq	%rbx, %rbx
	je	.L27656
	testb	$2, 17(%rbx)
	je	.L28242
.L27662:
	movq	-424(%rbp), %rsi
	movl	$59, %edi
	movq	%rbx, %rdx
	call	size_binop
	movq	-416(%rbp), %rsi
	movl	$59, %edi
	movq	%rax, -424(%rbp)
	movq	160(%r13), %rdx
.L28136:
	call	size_binop
	movq	%rax, -416(%rbp)
	jmp	.L27659
.L28242:
	movq	%rbx, %rdi
	call	contains_placeholder_p
	testl	%eax, %eax
	je	.L27662
	movq	sizetype_tab(%rip), %rsi
	movq	%rbx, %rdx
	movl	$58, %edi
	movq	%r12, %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %rbx
	jmp	.L27662
	.p2align 6,,7
.L28222:
	movq	-416(%rbp), %rsi
	movq	48(%r12), %rdx
	movl	$59, %edi
	jmp	.L28136
.L28221:
	movq	%rbx, %rdi
	movl	$1, %esi
	call	host_integerp
	testl	%eax, %eax
	jne	.L27653
	movl	$51, -404(%rbp)
	movq	$-1, (%r13)
	jmp	.L27714
.L27653:
	movq	%rbx, %rdi
	movl	$1, %esi
	call	tree_low_cst
	movq	%rax, (%r13)
	jmp	.L27714
.L28220:
	movq	32(%rdx), %rbx
	jmp	.L27647
.L28219:
	movzbl	17(%r14), %r9d
	movq	40(%r14), %rbx
	shrb	$5, %r9b
	movl	%r9d, %r8d
	andl	$1, %r8d
	movl	%r8d, -184(%rbp)
	jmp	.L27647
.L28218:
	movq	40(%r14), %rax
	testb	$16, 49(%rax)
	movq	40(%rax), %rbx
	jne	.L27646
	movzbl	48(%rax), %esi
	movl	%esi, -404(%rbp)
.L27646:
	movzbl	17(%rax), %edi
	shrb	$5, %dil
	movl	%edi, %edx
	andl	$1, %edx
	movl	%edx, -184(%rbp)
	jmp	.L27647
.L28172:
	movq	%r15, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	%rax, -448(%rbp)
	jmp	.L28153
	.p2align 6,,7
.L27637:
	movq	8(%r14), %rdi
	movq	%r15, %rsi
	call	convert
	movq	32(%r14), %r14
	movq	%rax, %r15
	movzbl	16(%r14), %edx
	leal	-114(%rdx), %r13d
	cmpb	$1, %r13b
	jbe	.L27637
	jmp	.L28094
.L27633:
	movl	$60, %edi
	jmp	.L27632
.L27625:
	movl	-172(%rbp), %esi
	testl	%esi, %esi
	je	.L28090
	movslq	-180(%rbp),%rdx
	salq	$4, %rdx
	movl	8(%r13,%rdx), %r14d
	cmpl	$1317, %r14d
	je	.L28076
	movslq	%r14d,%r8
	movq	-320(%rbp), %rdi
	movl	-180(%rbp), %esi
	leaq	(%r8,%r8,4), %r11
	movq	%r8, -304(%rbp)
	salq	$3, %r11
	movq	insn_data+24(%r11), %r12
	movq	%r11, -312(%rbp)
	call	*(%r12)
	testl	%eax, %eax
	jne	.L28243
.L28077:
	cmpl	$1317, %r14d
	je	.L28076
	movq	-320(%rbp), %rcx
	cmpw	$66, (%rcx)
	je	.L28244
.L28076:
	movl	-172(%rbp), %r12d
	testl	%r12d, %r12d
	jne	.L28245
.L28090:
	movq	-320(%rbp), %r14
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r12
.L28091:
	movq	8(%rbx), %rcx
	movl	-180(%rbp), %edi
	movq	%r13, %rsi
	movq	-320(%rbp), %r8
	movq	%r14, %rdx
	movzbl	17(%rcx), %r9d
	movq	%r15, %rcx
	movl	$3, (%rsp)
	shrb	$5, %r9b
	andl	$1, %r9d
	call	expand_binop
	cmpq	-320(%rbp), %rax
	movq	%rax, %rsi
	je	.L28092
	movq	-320(%rbp), %rdi
	call	emit_move_insn
.L28092:
	movq	%r12, -320(%rbp)
	jmp	.L27602
.L28245:
	movq	-320(%rbp), %rdi
	call	copy_to_reg
	movq	%rax, %r12
	movq	%rax, %r14
	jmp	.L28091
.L28244:
	movq	8(%rcx), %rdi
	movl	-180(%rbp), %esi
	call	general_operand
	testl	%eax, %eax
	je	.L28081
	testb	$2, target_flags+3(%rip)
	movq	-320(%rbp), %rcx
	setne	%bl
	movq	8(%rcx), %rsi
	movzbl	%bl, %edi
	addl	$4, %edi
	call	force_reg
.L28082:
	movq	-320(%rbp), %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
	movzbl	2(%rax), %edi
	movq	%rax, %rsi
	movq	%rax, %r12
	call	force_reg
	movl	-180(%rbp), %esi
	movq	%rax, %r13
	movq	-304(%rbp), %rax
	leaq	(%rax,%rax,4), %rdi
	leaq	0(,%rdi,8), %r14
	movq	%r15, %rdi
	movq	insn_data+24(%r14), %rbx
	call	*48(%rbx)
	testl	%eax, %eax
	je	.L28246
.L28087:
	movq	%r12, %rdi
	movq	%r13, %rsi
	call	gen_move_insn
	xorl	%ecx, %ecx
	movq	%r12, %rdx
	movq	cfun(%rip), %r9
	movzbl	2(%r12), %esi
	movl	$71, %edi
	movq	16(%r9), %rbx
	movq	%rax, %r9
	movq	40(%rbx), %r8
	movq	%r8, (%rsp)
	xorl	%r8d, %r8d
	call	gen_rtx_fmt_eeeee
	movq	%r15, %rdx
	movq	%r13, %rsi
	movq	%rax, 40(%rbx)
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(%r14)
	movq	%r13, %rdx
	movl	$71, %edi
	movq	cfun(%rip), %rsi
	movq	16(%rsi), %rbx
	movzbl	2(%r13), %esi
	movq	40(%rbx), %r11
	movq	%r11, (%rsp)
.L28154:
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	movq	%rax, %r9
	call	gen_rtx_fmt_eeeee
	movq	cfun(%rip), %r15
	movq	%rax, 40(%rbx)
	movq	16(%r15), %rdx
	movq	40(%rdx), %r13
	movq	%r13, -320(%rbp)
	jmp	.L27602
.L28246:
	movl	-180(%rbp), %edi
	movq	%r15, %rsi
	call	force_reg
	movq	%rax, %r15
	jmp	.L28087
.L28081:
	movq	-320(%rbp), %r10
	movq	8(%r10), %rdi
	call	copy_to_reg
	jmp	.L28082
	.p2align 6,,7
.L28243:
	movq	-320(%rbp), %rdi
	movl	-180(%rbp), %esi
	call	*24(%r12)
	testl	%eax, %eax
	je	.L28077
	movq	%r15, %rdi
	movl	-180(%rbp), %esi
	call	*48(%r12)
	testl	%eax, %eax
	je	.L28247
.L28078:
	movq	-320(%rbp), %rdi
	movq	-312(%rbp), %r14
	movq	%r15, %rdx
	xorl	%eax, %eax
	movq	%rdi, %rsi
	call	*insn_data+16(%r14)
	movq	-320(%rbp), %rdx
	movq	cfun(%rip), %r9
	movq	-320(%rbp), %r12
	movl	$71, %edi
	movq	16(%r9), %rbx
	movzbl	2(%r12), %esi
	movq	40(%rbx), %r15
	movq	%r15, (%rsp)
	jmp	.L28154
.L28247:
	movl	-180(%rbp), %edi
	movq	%r15, %rsi
	call	force_reg
	movq	%rax, %r15
	jmp	.L28078
	.p2align 6,,7
.L28171:
	movq	-320(%rbp), %rdi
	movl	-180(%rbp), %esi
	call	*24(%r12)
	testl	%eax, %eax
	je	.L27623
	movq	%r15, %rdi
	movl	-180(%rbp), %esi
	call	*48(%r12)
	testl	%eax, %eax
	movl	$1, %eax
	cmove	-340(%rbp), %eax
	movl	%eax, -340(%rbp)
	jmp	.L27623
.L28170:
	movq	optab_table+8(%rip), %rsi
	jmp	.L27622
.L28169:
	cmpw	$54, (%r15)
	jne	.L27619
	movq	8(%r15), %rsi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	optab_table(%rip), %r13
	movq	%rax, %r15
	jmp	.L27619
	.p2align 6,,7
.L27618:
	movq	optab_table+16(%rip), %r13
	movq	%r13, %rax
	jmp	.L27617
.L27616:
	call	get_last_insn
	cmpq	%rax, %r12
	movl	$1, %eax
	cmove	-336(%rbp), %eax
	movl	%eax, -336(%rbp)
	jmp	.L27615
.L28168:
	testb	$2, target_flags+3(%rip)
	je	.L27611
	movzbq	2(%rax), %r11
	cmpw	$63, mode_bitsize(%r11,%r11)
.L28135:
	ja	.L27609
	movl	-172(%rbp), %ecx
	testl	%ecx, %ecx
	jne	.L28248
	movl	$1, -332(%rbp)
	jmp	.L27609
.L28248:
	movq	-320(%rbp), %rdi
	call	copy_to_reg
	movzwl	(%rax), %edx
	movq	%rax, -320(%rbp)
	jmp	.L27609
.L27611:
	movq	-320(%rbp), %rsi
	movzbq	2(%rsi), %r15
	cmpw	$31, mode_bitsize(%r15,%r15)
	jmp	.L28135
.L28167:
	movl	-172(%rbp), %eax
	testl	%eax, %eax
	jne	.L28249
	movq	-320(%rbp), %r10
	movl	$1, -332(%rbp)
	movzwl	(%r10), %edx
	jmp	.L27609
.L28249:
	movq	8(%rdx), %rdi
	call	copy_to_reg
	movq	-320(%rbp), %r9
	movzwl	(%r9), %edx
	movq	%rax, 8(%r9)
	jmp	.L27609
.L28166:
	movq	%r14, %rdi
	call	save_expr
	movq	%rax, %r14
	jmp	.L27605
.L28165:
	movq	32(%r14), %rsi
	cmpb	$41, 16(%rsi)
	je	.L28250
.L27604:
	movq	%r14, %rdi
	call	stabilize_reference
	movq	%rax, %r14
	movzbl	16(%rax), %edx
	jmp	.L27603
.L28250:
	movq	40(%r14), %rdi
	testb	$16, 49(%rdi)
	je	.L27603
	jmp	.L27604
.LFE12:
.Lfe12:
	.size	expand_increment,.Lfe12-expand_increment
	.align 2
	.p2align 4,,15
.globl do_pending_stack_adjust
	.type	do_pending_stack_adjust,@function
do_pending_stack_adjust:
.LFB13:
	subq	$8, %rsp
.LCFI65:
	movq	cfun(%rip), %rdx
	movq	16(%rdx), %rax
	movl	4(%rax), %ecx
	testl	%ecx, %ecx
	jne	.L28251
	movl	(%rax), %eax
	testl	%eax, %eax
	jne	.L28254
.L28253:
	movq	16(%rdx), %rcx
	movl	$0, (%rcx)
.L28251:
	addq	$8, %rsp
	ret
	.p2align 6,,7
.L28254:
	movslq	%eax,%rsi
	xorl	%edi, %edi
	call	gen_rtx_CONST_INT
	movq	%rax, %rdi
	call	adjust_stack
	movq	cfun(%rip), %rdx
	jmp	.L28253
.LFE13:
.Lfe13:
	.size	do_pending_stack_adjust,.Lfe13-do_pending_stack_adjust
	.align 2
	.p2align 4,,15
.globl jumpifnot
	.type	jumpifnot,@function
jumpifnot:
.LFB14:
	xorl	%edx, %edx
	jmp	do_jump
.LFE14:
.Lfe14:
	.size	jumpifnot,.Lfe14-jumpifnot
	.align 2
	.p2align 4,,15
.globl jumpif
	.type	jumpif,@function
jumpif:
.LFB15:
	movq	%rsi, %rcx
	xorl	%esi, %esi
	movq	%rcx, %rdx
	jmp	do_jump
.LFE15:
.Lfe15:
	.size	jumpif,.Lfe15-jumpif
	.section	.rodata.str1.1
.LC21:
	.string	"do_jump"
	.text
	.align 2
	.p2align 4,,15
.globl do_jump
	.type	do_jump,@function
do_jump:
.LFB16:
	pushq	%r15
.LCFI66:
	movq	%rsi, %r15
	pushq	%r14
.LCFI67:
	movq	%rdx, %r14
	pushq	%r13
.LCFI68:
	pushq	%r12
.LCFI69:
	pushq	%rbp
.LCFI70:
	movq	%rdi, %rbp
	pushq	%rbx
.LCFI71:
	subq	$152, %rsp
.LCFI72:
	movq	cfun(%rip), %rcx
	movzbl	16(%rdi), %r12d
	movq	$0, 16(%rsp)
	movq	16(%rcx), %rdx
	movq	40(%rdx), %rbx
	testq	%rbx, %rbx
	je	.L28463
	.p2align 4,,7
.L28263:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L28495
	call	emit_insn
	movq	%rax, 16(%rbx)
.L28262:
	movq	cfun(%rip), %r9
	movq	40(%rbx), %rdi
	movq	16(%r9), %r8
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%r8)
	jne	.L28263
.L28463:
	cmpl	$122, %r12d
	ja	.L28274
	mov	%r12d, %ebx
	jmp	*.L28460(,%rbx,8)
	.section	.rodata
	.align 8
	.align 4
.L28460:
	.quad	.L28265
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28267
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28304
	.quad	.L28304
	.quad	.L28274
	.quad	.L28274
	.quad	.L28304
	.quad	.L28304
	.quad	.L28274
	.quad	.L28274
	.quad	.L28293
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28379
	.quad	.L28274
	.quad	.L28438
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28284
	.quad	.L28274
	.quad	.L28285
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28492
	.quad	.L28274
	.quad	.L28274
	.quad	.L28492
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28492
	.quad	.L28492
	.quad	.L28274
	.quad	.L28274
	.quad	.L28286
	.quad	.L28274
	.quad	.L28274
	.quad	.L28289
	.quad	.L28291
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28490
	.quad	.L28410
	.quad	.L28413
	.quad	.L28416
	.quad	.L28419
	.quad	.L28396
	.quad	.L28403
	.quad	.L28423
	.quad	.L28423
	.quad	.L28430
	.quad	.L28432
	.quad	.L28433
	.quad	.L28434
	.quad	.L28435
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28474
	.quad	.L28271
	.quad	.L28492
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28274
	.quad	.L28492
	.text
.L28267:
	movq	%rbp, %rdi
	call	integer_zerop
	testl	%eax, %eax
	cmove	%r14, %r15
.L28491:
	testq	%r15, %r15
	jne	.L28496
.L28265:
	cmpq	$0, 16(%rsp)
	jne	.L28497
.L28257:
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L28497:
	call	do_pending_stack_adjust
	movq	16(%rsp), %rdi
	call	emit_label
	jmp	.L28257
.L28496:
	movq	%r15, %rdi
	call	emit_jump
	jmp	.L28265
.L28304:
	movq	global_trees+136(%rip), %rax
	movq	global_trees+120(%rip), %r8
	movl	$0, 120(%rsp)
	movl	$0, 60(%rsp)
	movq	$0, 112(%rsp)
	xorl	%r12d, %r12d
	movq	%rbp, %rbx
	leaq	144(%rsp), %r13
	movq	%r8, 40(%rsp)
	movq	%rax, 48(%rsp)
	movzbl	16(%rbp), %eax
	cmpb	$39, %al
	je	.L28498
	cmpb	$40, %al
	je	.L28499
	movq	8(%rbp), %rdx
	movzbl	61(%rdx), %r10d
	movzbl	17(%rdx), %r8d
	shrb	$1, %r10b
	shrb	$5, %r8b
	movzbl	%r10b, %r9d
	movl	%r8d, %esi
	andl	$1, %esi
	movl	%r9d, 60(%rsp)
	cmpl	$51, 60(%rsp)
	movl	%esi, 108(%rsp)
	je	.L28500
	movslq	60(%rsp),%rdi
	movzwq	mode_bitsize(%rdi,%rdi), %rdx
	movq	%rdx, 144(%rsp)
.L28307:
	testq	%r12, %r12
	jne	.L28501
	.p2align 4,,7
.L28374:
	movzbl	16(%rbx), %edx
	cmpb	$40, %dl
	je	.L28502
	cmpb	$39, %dl
	je	.L28503
	leal	-43(%rdx), %r12d
	cmpb	$1, %r12b
	jbe	.L28504
	cmpb	$57, %dl
	jne	.L28332
	movq	112(%rsp), %rdx
	leaq	112(%rsp), %r8
	movq	8(%rbx), %rax
	testq	%rdx, %rdx
	je	.L28333
	movq	(%rdx), %rdi
.L28334:
	testq	%rdi, %rdi
	je	.L28467
	movq	128(%rax), %rsi
.L28367:
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	movq	%rbx, %rdx
	je	.L28469
	.p2align 4,,7
.L28352:
	movq	8(%rbx), %r9
	cmpq	%rsi, 128(%r9)
	je	.L28505
	movzbl	16(%rbx), %eax
	cmpb	$47, %al
	je	.L28348
	cmpb	$51, %al
	je	.L28348
	movzbl	%al, %r10d 
	movzbl	tree_code_type(%r10), %eax
	cmpb	$114, %al
	je	.L28351
	cmpb	$49, %al
	je	.L28351
	cmpb	$50, %al
	je	.L28351
	cmpb	$101, %al
	je	.L28351
	xorl	%ebx, %ebx
	.p2align 4,,7
.L28347:
	testq	%rbx, %rbx
	jne	.L28352
.L28469:
	testq	%rdx, %rdx
	je	.L28471
	.p2align 4,,7
.L28366:
	movq	8(%rdx), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$13, %al
	je	.L28358
	cmpb	$15, %al
	je	.L28358
.L28355:
	movzbl	16(%rdx), %eax
	cmpb	$47, %al
	je	.L28362
	cmpb	$51, %al
	je	.L28362
	movzbl	%al, %r12d 
	movzbl	tree_code_type(%r12), %eax
	cmpb	$114, %al
	je	.L28365
	cmpb	$49, %al
	je	.L28365
	cmpb	$50, %al
	je	.L28365
	cmpb	$101, %al
	je	.L28365
	xorl	%edx, %edx
	.p2align 4,,7
.L28361:
	testq	%rdx, %rdx
	jne	.L28366
.L28471:
	movq	(%rdi), %rdi
	testq	%rdi, %rdi
	jne	.L28367
.L28467:
	xorl	%ebx, %ebx
.L28345:
	testq	%rbx, %rbx
	jne	.L28374
.L28316:
	movq	40(%rsp), %rdi
	xorl	%esi, %esi
	call	host_integerp
	testl	%eax, %eax
	je	.L28375
	movq	sizetype_tab+24(%rip), %rdi
	movq	40(%rsp), %rsi
	call	convert
	movq	global_trees+152(%rip), %rdx
	movl	$61, %edi
	movq	%rax, %rsi
	call	size_binop
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L28375
	movq	48(%rsp), %rdx
	movl	$59, %edi
	call	size_binop
	testq	%rax, %rax
	movq	%rax, %rbx
	jne	.L28506
.L28375:
	movq	48(%rsp), %rdi
	xorl	%esi, %esi
	call	tree_low_cst
	movq	%rax, 136(%rsp)
	movq	40(%rsp), %rax
	movq	%rax, 128(%rsp)
.L28376:
	movl	60(%rsp), %eax
	movl	144(%rsp), %edi
	movl	108(%rsp), %esi
	movl	%eax, 124(%rsp)
	call	type_for_size
	testq	%rax, %rax
	je	.L28274
	cmpq	$0, 144(%rsp)
	js	.L28274
	movq	8(%rbp), %rbx
	movzwl	60(%rax), %r10d
	movzwl	60(%rbx), %r9d
	andl	$511, %r10d
	andl	$511, %r9d
	cmpl	%r9d, %r10d
	jge	.L28274
	movzbl	61(%rax), %r12d
	shrb	$1, %r12b
	andl	$127, %r12d
	salq	$4, %r12
	addq	optab_table+328(%rip), %r12
	cmpl	$1317, 8(%r12)
	je	.L28274
	movq	%rax, %rdi
.L28493:
	movq	%rbp, %rsi
	call	convert
.L28488:
	movq	%rax, %rdi
.L28478:
	movq	%r15, %rsi
	movq	%r14, %rdx
.L28480:
	call	do_jump
	jmp	.L28265
.L28274:
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movq	%rbp, %rdi
	call	expand_expr
	movq	%rax, %r12
	call	do_pending_stack_adjust
	movq	cfun(%rip), %rbx
	movq	16(%rbx), %r10
	movq	40(%r10), %rbx
	testq	%rbx, %rbx
	je	.L28473
	.p2align 4,,7
.L28448:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L28507
	call	emit_insn
	movq	%rax, 16(%rbx)
.L28447:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %r11
	movq	16(%rdx), %rcx
	testq	%r11, %r11
	movq	%r11, %rbx
	movq	%r11, 40(%rcx)
	jne	.L28448
.L28473:
	movzwl	(%r12), %edx
	cmpw	$54, %dx
	je	.L28451
	movl	(%r12), %eax
	andl	$16777215, %eax
	cmpl	$55, %eax
	je	.L28451
	cmpw	$67, %dx
	je	.L28451
	movzbl	2(%r12), %esi
	movslq	%esi,%rdi
	cmpl	$1, mode_class(,%rdi,4)
	je	.L28508
.L28456:
	movzbl	2(%r12), %eax
	testb	%al, %al
	je	.L28458
	movq	8(%rbp), %rsi
	movzbl	%al, %r8d
	movq	%r12, %rdi
	movslq	%r8d,%r9
	movl	$102, %edx
	movzbl	17(%rsi), %ecx
	movq	const_tiny_rtx(,%r9,8), %rsi
	movq	%r14, 8(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, (%rsp)
	shrb	$5, %cl
	andl	$1, %ecx
	call	do_compare_rtx_and_jump
	jmp	.L28265
.L28508:
	xorl	%edx, %edx
	movl	$102, %edi
	call	can_compare_p
	testl	%eax, %eax
	jne	.L28456
	movq	%r12, %rdi
	movq	%r14, %rsi
	movq	%r15, %rdx
	call	do_jump_by_parts_equality_rtx
	jmp	.L28265
	.p2align 6,,7
.L28451:
	cmpq	const_int_rtx+512(%rip), %r12
	cmovne	%r14, %r15
	jmp	.L28491
.L28507:
	movq	8(%rdi), %r8
	movq	8(%r8), %r13
	movq	%r13, 16(%rbx)
	call	emit_insn
	jmp	.L28447
.L28506:
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	host_integerp
	testl	%eax, %eax
	je	.L28375
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	tree_low_cst
	movq	$0, 128(%rsp)
	movq	%rax, 136(%rsp)
	jmp	.L28376
	.p2align 6,,7
.L28365:
	movq	32(%rdx), %rdx
	jmp	.L28361
	.p2align 6,,7
.L28362:
	movq	40(%rdx), %rdx
	jmp	.L28361
	.p2align 6,,7
.L28358:
	movq	8(%rcx), %rbx
	cmpq	%rsi, 128(%rbx)
	jne	.L28355
	testq	%r8, %r8
	je	.L28359
	movq	%rdi, (%r8)
.L28359:
	movl	$41, %edi
	call	build1
	movq	%rax, %rbx
	jmp	.L28345
	.p2align 6,,7
.L28351:
	movq	32(%rbx), %rbx
	jmp	.L28347
	.p2align 6,,7
.L28348:
	movq	40(%rbx), %rbx
	jmp	.L28347
.L28505:
	testq	%r8, %r8
	je	.L28345
	movq	%rdi, (%r8)
	jmp	.L28345
.L28333:
	movq	placeholder_list(%rip), %rdi
	jmp	.L28334
.L28332:
	leal	-116(%rdx), %esi
	cmpb	$1, %sil
	jbe	.L28319
	leal	-114(%rdx), %r8d
	cmpb	$1, %r8b
	ja	.L28316
	movq	32(%rbx), %r11
	movq	8(%rbx), %rcx
	movq	8(%r11), %rdx
	movzbl	61(%rcx), %r13d
	movzbl	61(%rdx), %edi
	andb	$-2, %r13b
	andb	$-2, %dil
	cmpb	%dil, %r13b
	jne	.L28316
.L28319:
	testb	$8, 17(%rbx)
	je	.L28373
	movl	$1, 120(%rsp)
.L28373:
	movq	32(%rbx), %rbx
	jmp	.L28374
.L28504:
	movq	32(%rbx), %r13
	movq	40(%rbx), %r12
	movq	%r13, 96(%rsp)
	movq	8(%r13), %rdx
	xorl	%r13d, %r13d
	movq	24(%rdx), %rax
	testq	%rax, %rax
	je	.L28327
	movq	104(%rax), %r13
.L28327:
	movq	8(%rdx), %rcx
	testq	%r13, %r13
	movq	40(%rcx), %r11
	movq	%r11, 32(%rsp)
	jne	.L28509
.L28328:
	testb	$2, 17(%r12)
	je	.L28510
.L28329:
	movq	32(%rsp), %rdx
	testb	$2, 17(%rdx)
	je	.L28511
.L28330:
	movq	sizetype_tab(%rip), %rdi
	movq	%r12, %rsi
	call	convert
	movq	32(%rsp), %rdx
	movl	$61, %edi
	movq	%rax, %rsi
	call	size_binop
	movq	40(%rsp), %rsi
	movl	$59, %edi
	movq	%rax, %rdx
	call	size_binop
	movq	%rax, 40(%rsp)
	jmp	.L28319
.L28511:
	movq	%rdx, %rdi
	call	contains_placeholder_p
	testl	%eax, %eax
	je	.L28330
	movq	sizetype_tab(%rip), %rsi
	movq	32(%rsp), %rdx
	movl	$58, %edi
	movq	96(%rsp), %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, 32(%rsp)
	jmp	.L28330
.L28510:
	movq	%r12, %rdi
	call	contains_placeholder_p
	testl	%eax, %eax
	je	.L28329
	movq	8(%r12), %rsi
	movq	%r12, %rdx
	movl	$58, %edi
	movq	%rbx, %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %r12
	jmp	.L28329
.L28509:
	movq	%r13, %rdi
	call	integer_zerop
	testl	%eax, %eax
	jne	.L28328
	movq	8(%r12), %rsi
	movq	%r12, %rdx
	movl	$60, %edi
	movq	%r13, %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	movq	%rax, %r12
	jmp	.L28328
	.p2align 6,,7
.L28503:
	movq	40(%rbx), %r13
	movq	88(%r13), %r12
	testq	%r12, %r12
	je	.L28316
	testb	$2, 17(%r12)
	je	.L28512
.L28322:
	movq	40(%rsp), %rsi
	movl	$59, %edi
	movq	%r12, %rdx
	call	size_binop
	movq	48(%rsp), %rsi
	movl	$59, %edi
	movq	%rax, 40(%rsp)
	movq	160(%r13), %rdx
.L28475:
	call	size_binop
	movq	%rax, 48(%rsp)
	jmp	.L28319
.L28512:
	movq	%r12, %rdi
	call	contains_placeholder_p
	testl	%eax, %eax
	je	.L28322
	movq	sizetype_tab(%rip), %rsi
	movq	%r12, %rdx
	movl	$58, %edi
	movq	%rbx, %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %r12
	jmp	.L28322
	.p2align 6,,7
.L28502:
	movq	48(%rsp), %rsi
	movq	48(%rbx), %rdx
	movl	$59, %edi
	jmp	.L28475
.L28501:
	movq	%r12, %rdi
	movl	$1, %esi
	call	host_integerp
	testl	%eax, %eax
	jne	.L28313
	movl	$51, 60(%rsp)
	movq	$-1, (%r13)
	jmp	.L28374
.L28313:
	movq	%r12, %rdi
	movl	$1, %esi
	call	tree_low_cst
	movq	%rax, (%r13)
	jmp	.L28374
.L28500:
	movq	32(%rdx), %r12
	jmp	.L28307
.L28499:
	movzbl	17(%rbp), %ecx
	movq	40(%rbp), %r12
	shrb	$5, %cl
	movl	%ecx, %r11d
	andl	$1, %r11d
	movl	%r11d, 108(%rsp)
	jmp	.L28307
.L28498:
	movq	40(%rbp), %rax
	testb	$16, 49(%rax)
	movq	40(%rax), %r12
	jne	.L28306
	movzbl	48(%rax), %r9d
	movl	%r9d, 60(%rsp)
.L28306:
	movzbl	17(%rax), %edi
	shrb	$5, %dil
	movl	%edi, %r10d
	andl	$1, %r10d
	movl	%r10d, 108(%rsp)
	jmp	.L28307
.L28293:
	call	push_temp_slots
	movq	const_int_rtx+512(%rip), %rsi
	movq	32(%rbp), %rdi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	xorl	%edi, %edi
	call	preserve_temp_slots
	call	free_temp_slots
	call	pop_temp_slots
	movq	cfun(%rip), %r11
	movq	16(%r11), %rdi
	movq	40(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L28465
.L28299:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L28513
	call	emit_insn
	movq	%rax, 16(%rbx)
.L28298:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %rcx
	movq	16(%rdx), %rsi
	testq	%rcx, %rcx
	movq	%rcx, %rbx
	movq	%rcx, 40(%rsi)
	jne	.L28299
.L28465:
	call	do_pending_stack_adjust
	movq	40(%rbp), %rdi
	jmp	.L28478
.L28513:
	movq	8(%rdi), %r13
	movq	8(%r13), %r12
	movq	%r12, 16(%rbx)
	call	emit_insn
	jmp	.L28298
.L28379:
	movq	40(%rbp), %rdi
	call	integer_onep
	testl	%eax, %eax
	je	.L28380
	movq	48(%rbp), %rdi
	call	integer_zerop
	testl	%eax, %eax
	jne	.L28492
.L28380:
	movq	40(%rbp), %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L28382
	movq	48(%rbp), %rdi
	call	integer_onep
	testl	%eax, %eax
	jne	.L28490
.L28382:
	call	gen_label_rtx
	movq	%rax, %r13
	call	gen_label_rtx
	xorl	%edx, %edx
	movq	%rax, 16(%rsp)
	movq	%r13, %rsi
	movq	32(%rbp), %rdi
	call	do_jump
	call	start_cleanup_deferral
	movq	16(%rsp), %rsi
	movq	16(%rsp), %rdx
	testq	%r15, %r15
	movq	40(%rbp), %rdi
	cmovne	%r15, %rsi
	testq	%r14, %r14
	cmovne	%r14, %rdx
	call	do_jump
	call	do_pending_stack_adjust
	movq	%r13, %rdi
	call	emit_label
	movq	48(%rbp), %rdi
	movq	16(%rsp), %rdx
	movq	16(%rsp), %rsi
	testq	%r15, %r15
	cmovne	%r15, %rsi
	testq	%r14, %r14
	cmovne	%r14, %rdx
.L28481:
	call	do_jump
	call	end_cleanup_deferral
	jmp	.L28265
.L28490:
	movq	32(%rbp), %rdi
	movq	%r14, %rsi
	movq	%r15, %rdx
	jmp	.L28480
.L28492:
	movq	32(%rbp), %rdi
	jmp	.L28478
.L28438:
	movq	32(%rbp), %rax
	cmpb	$121, 16(%rax)
	jne	.L28274
	movq	32(%rax), %rax
	movq	40(%rbp), %rdx
	cmpb	$30, 16(%rax)
	jne	.L28274
	testb	$96, 51(%rax)
	je	.L28274
	cmpl	$102, 56(%rax)
	jne	.L28274
	testq	%rdx, %rdx
	je	.L28274
	cmpq	$0, (%rdx)
	je	.L28274
	movq	%rbp, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	call	expand_builtin_expect_jump
	testq	%rax, %rax
	movq	%rax, %rdi
	je	.L28274
	call	emit_insn
	jmp	.L28257
	.p2align 6,,7
.L28284:
	movq	40(%rbp), %rdi
	movq	placeholder_list(%rip), %rdx
	xorl	%esi, %esi
	call	tree_cons
	movq	%r14, %rdx
	movq	%r15, %rsi
	movq	32(%rbp), %rdi
	movq	%rax, placeholder_list(%rip)
	call	do_jump
	movq	placeholder_list(%rip), %r14
	movq	(%r14), %rbp
	movq	%rbp, placeholder_list(%rip)
	jmp	.L28265
.L28285:
	movq	8(%rbp), %rsi
	movq	32(%rbp), %rdx
	movl	$102, %edi
	movq	40(%rbp), %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
.L28487:
	movl	$102, %esi
	movl	$102, %edx
.L28486:
	movq	%r15, %rcx
	movq	%r14, %r8
.L28476:
	call	do_compare_and_jump
	jmp	.L28265
.L28286:
	movq	40(%rbp), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L28274
	movq	8(%rbp), %rsi
	movzwl	60(%rsi), %ecx
	andl	$511, %ecx
	cmpl	$64, %ecx
	jg	.L28274
	call	tree_floor_log2
	testl	%eax, %eax
	js	.L28274
	leal	1(%rax), %edi
	xorl	%edx, %edx
	movl	$1, %esi
	call	mode_for_size
	cmpl	$51, %eax
	movl	%eax, %edi
	je	.L28274
	movl	$1, %esi
	call	type_for_mode
	testq	%rax, %rax
	movq	%rax, %rdi
	je	.L28274
	movq	8(%rbp), %rbx
	movzwl	60(%rax), %r9d
	movzwl	60(%rbx), %r8d
	andl	$511, %r9d
	andl	$511, %r8d
	cmpl	%r8d, %r9d
	jge	.L28274
	movzbl	61(%rax), %r10d
	shrb	$1, %r10b
	andl	$127, %r10d
	salq	$4, %r10
	addq	optab_table+328(%rip), %r10
	cmpl	$1317, 8(%r10)
	je	.L28274
	jmp	.L28493
	.p2align 6,,7
.L28289:
	testq	%r15, %r15
	je	.L28514
.L28290:
	movq	32(%rbp), %rdi
	movq	%r15, %rsi
	xorl	%edx, %edx
.L28483:
	call	do_jump
	call	start_cleanup_deferral
	movq	40(%rbp), %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	jmp	.L28481
.L28514:
	call	gen_label_rtx
	movq	%rax, 16(%rsp)
	movq	%rax, %r15
	jmp	.L28290
.L28291:
	testq	%r14, %r14
	je	.L28515
.L28292:
	movq	32(%rbp), %rdi
	xorl	%esi, %esi
	movq	%r14, %rdx
	jmp	.L28483
.L28515:
	call	gen_label_rtx
	movq	%rax, 16(%rsp)
	movq	%rax, %r14
	jmp	.L28292
.L28410:
	movq	32(%rbp), %r12
	movq	8(%r12), %r13
	movzbl	61(%r13), %ebx
	shrb	$1, %bl
	movzbl	%bl, %esi
	movslq	%esi,%r10
	cmpl	$1, mode_class(,%r10,4)
	je	.L28516
.L28411:
	movq	%rbp, %rdi
	movl	$107, %esi
	movl	$111, %edx
	jmp	.L28486
.L28516:
	xorl	%edx, %edx
	movl	$107, %edi
	call	can_compare_p
	testl	%eax, %eax
	jne	.L28411
	movq	%rbp, %rdi
	movl	$1, %esi
.L28484:
	movq	%r15, %rdx
	movq	%r14, %rcx
.L28477:
	call	do_jump_by_parts_greater
	jmp	.L28265
.L28413:
	movq	32(%rbp), %rcx
	movq	8(%rcx), %r11
	movzbl	61(%r11), %edx
	shrb	$1, %dl
	movzbl	%dl, %esi
	movslq	%esi,%r8
	cmpl	$1, mode_class(,%r8,4)
	je	.L28517
.L28414:
	movq	%rbp, %rdi
	movl	$106, %esi
	movl	$110, %edx
	jmp	.L28486
.L28517:
	xorl	%edx, %edx
	movl	$106, %edi
	call	can_compare_p
	testl	%eax, %eax
	jne	.L28414
	movq	%rbp, %rdi
	xorl	%esi, %esi
.L28485:
	movq	%r14, %rdx
	movq	%r15, %rcx
	jmp	.L28477
.L28416:
	movq	32(%rbp), %r10
	movq	8(%r10), %rsi
	movzbl	61(%rsi), %r9d
	shrb	$1, %r9b
	movzbl	%r9b, %esi
	movslq	%esi,%rdi
	cmpl	$1, mode_class(,%rdi,4)
	je	.L28518
.L28417:
	movq	%rbp, %rdi
	movl	$105, %esi
	movl	$109, %edx
	jmp	.L28486
.L28518:
	xorl	%edx, %edx
	movl	$105, %edi
	call	can_compare_p
	testl	%eax, %eax
	jne	.L28417
	movq	%rbp, %rdi
	xorl	%esi, %esi
	jmp	.L28484
	.p2align 6,,7
.L28419:
	movq	32(%rbp), %r8
	movq	8(%r8), %r12
	movzbl	61(%r12), %r13d
	shrb	$1, %r13b
	movzbl	%r13b, %esi
	movslq	%esi,%rbx
	cmpl	$1, mode_class(,%rbx,4)
	je	.L28519
.L28420:
	movq	%rbp, %rdi
	movl	$104, %esi
	movl	$108, %edx
	jmp	.L28486
.L28519:
	xorl	%edx, %edx
	movl	$104, %edi
	call	can_compare_p
	testl	%eax, %eax
	jne	.L28420
	movq	%rbp, %rdi
	movl	$1, %esi
	jmp	.L28485
	.p2align 6,,7
.L28396:
	movq	32(%rbp), %rdi
	movq	8(%rdi), %r8
	movzbl	61(%r8), %esi
	movq	%r8, 88(%rsp)
	shrb	$1, %sil
	andl	$127, %esi
	movl	mode_class(,%rsi,4), %eax
	subl	$5, %eax
	cmpl	$1, %eax
	ja	.L28397
	call	save_expr
	movq	40(%rbp), %rdi
	movq	%rax, %r12
	call	save_expr
	movq	%r12, %rdx
	movl	$127, %edi
	movq	%rax, %r13
	movq	88(%rsp), %rax
	movq	8(%rax), %rsi
	call	build1
	movq	%rax, %rdi
	call	fold
	movq	%r13, %rdx
	movq	88(%rsp), %rcx
	movl	$127, %edi
	movq	%rax, %rbx
	movq	8(%rcx), %rsi
	call	build1
	movq	%rax, %rdi
	call	fold
	movq	%rbx, %rdx
	movq	8(%rbp), %rsi
	movq	%rax, %rcx
	movl	$101, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	movq	%r12, %rdx
	movq	88(%rsp), %r11
	movq	%rax, 80(%rsp)
	movl	$128, %edi
	movq	8(%r11), %rsi
	call	build1
	movq	%rax, %rdi
	call	fold
	movq	88(%rsp), %rdx
	movl	$128, %edi
	movq	%rax, %r12
	movq	8(%rdx), %rsi
	movq	%r13, %rdx
	call	build1
	movq	%rax, %rdi
	call	fold
	movq	%r12, %rdx
	movq	8(%rbp), %rsi
	movq	%rax, %rcx
	movl	$101, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	movq	80(%rsp), %rdx
	movq	8(%rbp), %rsi
	movq	%rax, %rcx
	movl	$91, %edi
.L28494:
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	jmp	.L28488
.L28397:
	movq	40(%rbp), %rdi
	call	integer_zerop
	testl	%eax, %eax
	jne	.L28490
	movq	88(%rsp), %r10
	movzbl	61(%r10), %r9d
	shrb	$1, %r9b
	movzbl	%r9b, %esi
	movslq	%esi,%rdi
	cmpl	$1, mode_class(,%rdi,4)
	je	.L28520
.L28401:
	movq	%rbp, %rdi
	movl	$103, %esi
	movl	$103, %edx
	jmp	.L28486
.L28520:
	xorl	%edx, %edx
	movl	$103, %edi
	call	can_compare_p
	testl	%eax, %eax
	jne	.L28401
	movq	%rbp, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
.L28479:
	call	do_jump_by_parts_equality
	jmp	.L28265
	.p2align 6,,7
.L28403:
	movq	32(%rbp), %rdi
	movq	8(%rdi), %r13
	movzbl	61(%r13), %ebx
	movq	%r13, 72(%rsp)
	shrb	$1, %bl
	andl	$127, %ebx
	movl	mode_class(,%rbx,4), %eax
	subl	$5, %eax
	cmpl	$1, %eax
	ja	.L28404
	call	save_expr
	movq	40(%rbp), %rdi
	movq	%rax, %r12
	call	save_expr
	movq	%r12, %rdx
	movq	72(%rsp), %rcx
	movl	$127, %edi
	movq	%rax, %r13
	movq	8(%rcx), %rsi
	call	build1
	movq	%rax, %rdi
	call	fold
	movq	%r13, %rdx
	movq	72(%rsp), %r11
	movl	$127, %edi
	movq	%rax, %rbx
	movq	8(%r11), %rsi
	call	build1
	movq	%rax, %rdi
	call	fold
	movq	%rbx, %rdx
	movq	8(%rbp), %rsi
	movq	%rax, %rcx
	movl	$102, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	movq	72(%rsp), %rdx
	movl	$128, %edi
	movq	%rax, 64(%rsp)
	movq	8(%rdx), %rsi
	movq	%r12, %rdx
	call	build1
	movq	%rax, %rdi
	call	fold
	movq	%r13, %rdx
	movq	72(%rsp), %r8
	movl	$128, %edi
	movq	%rax, %r12
	movq	8(%r8), %rsi
	call	build1
	movq	%rax, %rdi
	call	fold
	movq	%r12, %rdx
	movq	8(%rbp), %rsi
	movq	%rax, %rcx
	movl	$102, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	movq	64(%rsp), %rdx
	movq	8(%rbp), %rsi
	movq	%rax, %rcx
	movl	$92, %edi
	jmp	.L28494
.L28404:
	movq	40(%rbp), %rdi
	call	integer_zerop
	testl	%eax, %eax
	jne	.L28492
	movq	72(%rsp), %rsi
	movzbl	61(%rsi), %r9d
	shrb	$1, %r9b
	movzbl	%r9b, %esi
	movslq	%esi,%rdi
	cmpl	$1, mode_class(,%rdi,4)
	je	.L28521
.L28408:
	movq	%rbp, %rdi
	jmp	.L28487
.L28521:
	xorl	%edx, %edx
	movl	$102, %edi
	call	can_compare_p
	testl	%eax, %eax
	jne	.L28408
	movq	%rbp, %rdi
	movq	%r14, %rsi
	movq	%r15, %rdx
	jmp	.L28479
	.p2align 6,,7
.L28423:
	cmpl	$103, %r12d
	je	.L28522
	movl	$113, %r13d
	movl	$112, %r12d
.L28425:
	movq	32(%rbp), %rcx
	movl	%r13d, %edi
	movq	8(%rcx), %r11
	movl	$0, 28(%rsp)
	movzbl	61(%r11), %edx
	shrb	$1, %dl
	movzbl	%dl, %ebx
	xorl	%edx, %edx
	movl	%ebx, %esi
	call	can_compare_p
	testl	%eax, %eax
	je	.L28523
.L28426:
	movl	28(%rsp), %eax
	testl	%eax, %eax
	jne	.L28428
	movq	%rbp, %rdi
	movl	%r13d, %esi
	movl	%r13d, %edx
	jmp	.L28486
.L28428:
	movq	%rbp, %rdi
	movl	%r12d, %esi
	movl	%r12d, %edx
	movq	%r14, %rcx
	movq	%r15, %r8
	jmp	.L28476
.L28523:
	xorl	%edx, %edx
	movl	%r12d, %edi
	movl	%ebx, %esi
	call	can_compare_p
	testl	%eax, %eax
	jne	.L28427
	cmpl	$112, %r12d
	jne	.L28426
.L28427:
	movl	$1, 28(%rsp)
	jmp	.L28426
.L28522:
	movl	$112, %r13d
	movl	$113, %r12d
	jmp	.L28425
.L28430:
	movl	$118, %ebx
	movl	$97, 24(%rsp)
.L28431:
	movq	32(%rbp), %rsi
	xorl	%edx, %edx
	movq	8(%rsi), %r9
	movzbl	61(%r9), %edi
	shrb	$1, %dil
	movzbl	%dil, %esi
	movl	%ebx, %edi
	call	can_compare_p
	testl	%eax, %eax
	je	.L28436
	movq	%rbp, %rdi
	movl	%ebx, %esi
	movl	%ebx, %edx
	jmp	.L28486
.L28436:
	movq	32(%rbp), %rdi
	call	save_expr
	movq	40(%rbp), %rdi
	movq	%rax, %r12
	call	save_expr
	movq	%r12, %rdx
	movq	8(%rbp), %rsi
	movq	%rax, %rcx
	movq	%rax, %rbx
	movl	$103, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	movq	%rbx, %rcx
	movq	%r12, %rdx
	movq	8(%rbp), %rsi
	movl	24(%rsp), %edi
	movq	%rax, %r13
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	movq	%r13, %rdx
	movq	8(%rbp), %rsi
	movq	%rax, %rcx
	movl	$92, %edi
	xorl	%eax, %eax
	call	build
	jmp	.L28488
.L28432:
	movl	$117, %ebx
	movl	$98, 24(%rsp)
	jmp	.L28431
.L28433:
	movl	$116, %ebx
	movl	$99, 24(%rsp)
	jmp	.L28431
.L28434:
	movl	$115, %ebx
	movl	$100, 24(%rsp)
	jmp	.L28431
.L28435:
	movl	$114, %ebx
	movl	$101, 24(%rsp)
	jmp	.L28431
.L28474:
	movq	32(%rbp), %rcx
.L28275:
	movq	8(%rbp), %rdx
	movq	8(%rcx), %r13
	movzwl	60(%rdx), %r12d
	movzwl	60(%r13), %r11d
	andl	$511, %r12d
	andl	$511, %r11d
	cmpl	%r11d, %r12d
	jl	.L28274
	jmp	.L28492
.L28271:
	movq	32(%rbp), %rcx
	movzbl	16(%rcx), %edx
	leal	-39(%rdx), %r10d
	cmpb	$1, %r10b
	jbe	.L28274
	cmpb	$43, %dl
	je	.L28274
	cmpb	$44, %dl
	je	.L28274
	jmp	.L28275
	.p2align 6,,7
.L28495:
	movq	8(%rdi), %rsi
	movq	8(%rsi), %rdx
	movq	%rdx, 16(%rbx)
	call	emit_insn
	jmp	.L28262
.L28458:
	movl	$.LC0, %edi
	movl	$9720, %esi
	movl	$.LC21, %edx
	call	fancy_abort
.LFE16:
.Lfe16:
	.size	do_jump,.Lfe16-do_jump
	.align 2
	.p2align 4,,15
	.type	do_jump_by_parts_greater,@function
do_jump_by_parts_greater:
.LFB17:
	pushq	%r15
.LCFI73:
	movq	%rcx, %r15
	movslq	%esi,%rcx
	pushq	%r14
.LCFI74:
	movq	%rdx, %r14
	xorl	%edx, %edx
	pushq	%r13
.LCFI75:
	pushq	%r12
.LCFI76:
	movl	%esi, %r12d
	xorl	%esi, %esi
	pushq	%rbx
.LCFI77:
	movq	%rdi, %rbx
	movq	32(%rdi,%rcx,8), %rdi
	xorl	%ecx, %ecx
	call	expand_expr
	xorl	%edx, %edx
	testl	%r12d, %r12d
	sete	%dl
	movq	%rax, %r13
	xorl	%ecx, %ecx
	xorl	%esi, %esi
	movq	32(%rbx,%rdx,8), %rdi
	xorl	%edx, %edx
	call	expand_expr
	movq	%r15, %r9
	movq	%r14, %r8
	movq	32(%rbx), %rsi
	movq	%rax, %rcx
	movq	8(%rsi), %rdx
	movzbl	61(%rdx), %ebx
	movzbl	17(%rdx), %esi
	movq	%r13, %rdx
	shrb	$1, %bl
	shrb	$5, %sil
	movzbl	%bl, %edi
	andl	$1, %esi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	do_jump_by_parts_greater_rtx
.LFE17:
.Lfe17:
	.size	do_jump_by_parts_greater,.Lfe17-do_jump_by_parts_greater
	.align 2
	.p2align 4,,15
.globl do_jump_by_parts_greater_rtx
	.type	do_jump_by_parts_greater_rtx,@function
do_jump_by_parts_greater_rtx:
.LFB18:
	pushq	%r15
.LCFI78:
	pushq	%r14
.LCFI79:
	pushq	%r13
.LCFI80:
	movq	%r8, %r13
	pushq	%r12
.LCFI81:
	pushq	%rbp
.LCFI82:
	pushq	%rbx
.LCFI83:
	subq	$56, %rsp
.LCFI84:
	testb	$2, target_flags+3(%rip)
	movl	%edi, 52(%rsp)
	movl	%esi, 48(%rsp)
	movq	%rdx, 40(%rsp)
	movq	%rcx, 32(%rsp)
	movq	%r9, 16(%rsp)
	je	.L28530
	movslq	52(%rsp),%rdx
	movzbl	mode_size(%rdx), %r15d
	sarl	$3, %r15d
.L28531:
	cmpq	$0, 16(%rsp)
	movq	$0, 24(%rsp)
	je	.L28535
	testq	%r13, %r13
	jne	.L28534
.L28535:
	call	gen_label_rtx
	movq	%rax, 24(%rsp)
.L28534:
	cmpq	$0, 16(%rsp)
	movq	24(%rsp), %rcx
	cmovne	16(%rsp), %rcx
	testq	%r13, %r13
	cmove	24(%rsp), %r13
	xorl	%r14d, %r14d
	cmpl	%r15d, %r14d
	movq	%rcx, 16(%rsp)
	jge	.L28550
	leal	-1(%r15), %ebx
	.p2align 4,,7
.L28546:
	movq	40(%rsp), %rdi
	movl	52(%rsp), %edx
	movl	%ebx, %esi
	call	operand_subword_force
	movl	52(%rsp), %edx
	movl	%ebx, %esi
	movq	32(%rsp), %rdi
	movq	%rax, %r12
	call	operand_subword_force
	xorl	%ecx, %ecx
	movq	%rax, %rbp
	movl	48(%rsp), %eax
	testl	%eax, %eax
	jne	.L28545
	testl	%r14d, %r14d
	jle	.L28544
.L28545:
	movl	$1, %ecx
.L28544:
	movq	16(%rsp), %rsi
	movl	word_mode(%rip), %r8d
	xorl	%r9d, %r9d
	movq	%r12, %rdi
	movl	$105, %edx
	movq	$0, (%rsp)
	incl	%r14d
	decl	%ebx
	movq	%rsi, 8(%rsp)
	movq	%rbp, %rsi
	call	do_compare_rtx_and_jump
	movl	48(%rsp), %ecx
	movl	word_mode(%rip), %r8d
	xorl	%r9d, %r9d
	movq	%r12, %rdi
	movq	%rbp, %rsi
	movl	$102, %edx
	movq	$0, (%rsp)
	movq	%r13, 8(%rsp)
	call	do_compare_rtx_and_jump
	cmpl	%r15d, %r14d
	jl	.L28546
.L28550:
	testq	%r13, %r13
	jne	.L28551
.L28547:
	cmpq	$0, 24(%rsp)
	jne	.L28552
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L28552:
	movq	24(%rsp), %rdi
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	emit_label
.L28551:
	movq	%r13, %rdi
	call	emit_jump
	jmp	.L28547
.L28530:
	movslq	52(%rsp),%rdx
	movzbl	mode_size(%rdx), %r15d
	sarl	$2, %r15d
	jmp	.L28531
.LFE18:
.Lfe18:
	.size	do_jump_by_parts_greater_rtx,.Lfe18-do_jump_by_parts_greater_rtx
	.align 2
	.p2align 4,,15
	.type	do_jump_by_parts_equality,@function
do_jump_by_parts_equality:
.LFB19:
	pushq	%r15
.LCFI85:
	xorl	%ecx, %ecx
	movq	%rsi, %r15
	pushq	%r14
.LCFI86:
	xorl	%esi, %esi
	movq	%rdi, %r14
	pushq	%r13
.LCFI87:
	pushq	%r12
.LCFI88:
	pushq	%rbp
.LCFI89:
	pushq	%rbx
.LCFI90:
	subq	$56, %rsp
.LCFI91:
	movq	%rdx, 48(%rsp)
	xorl	%edx, %edx
	movq	32(%rdi), %rdi
	call	expand_expr
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, 40(%rsp)
	xorl	%esi, %esi
	movq	40(%r14), %rdi
	call	expand_expr
	movq	%rax, 32(%rsp)
	movq	32(%r14), %rdx
	movq	8(%rdx), %rcx
	movzbl	61(%rcx), %edx
	shrb	$1, %dl
	testb	$2, target_flags+3(%rip)
	movzbl	%dl, %r13d
	je	.L28554
	movslq	%r13d,%rbx
	movzbl	mode_size(%rbx), %r12d
	sarl	$3, %r12d
.L28555:
	testq	%r15, %r15
	movq	$0, 24(%rsp)
	je	.L28568
.L28558:
	xorl	%ebp, %ebp
	cmpl	%r12d, %ebp
	jl	.L28563
.L28567:
	cmpq	$0, 48(%rsp)
	je	.L28564
	movq	48(%rsp), %rdi
	call	emit_jump
.L28564:
	cmpq	$0, 24(%rsp)
	jne	.L28569
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L28569:
	movq	24(%rsp), %rdi
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	emit_label
	.p2align 6,,7
.L28563:
	movq	40(%rsp), %rdi
	movl	%ebp, %esi
	movl	%r13d, %edx
	call	operand_subword_force
	movl	%r13d, %edx
	movl	%ebp, %esi
	movq	32(%rsp), %rdi
	movq	%rax, %rbx
	incl	%ebp
	call	operand_subword_force
	xorl	%r9d, %r9d
	movl	word_mode(%rip), %r8d
	movq	8(%r14), %rdi
	movq	%rax, %rsi
	movl	$103, %edx
	movzbl	17(%rdi), %ecx
	movq	%rbx, %rdi
	movq	$0, 8(%rsp)
	movq	%r15, (%rsp)
	shrb	$5, %cl
	andl	$1, %ecx
	call	do_compare_rtx_and_jump
	cmpl	%r12d, %ebp
	jl	.L28563
	jmp	.L28567
.L28568:
	call	gen_label_rtx
	movq	%rax, 24(%rsp)
	movq	%rax, %r15
	jmp	.L28558
	.p2align 6,,7
.L28554:
	movslq	%r13d,%rsi
	movzbl	mode_size(%rsi), %r12d
	sarl	$2, %r12d
	jmp	.L28555
.LFE19:
.Lfe19:
	.size	do_jump_by_parts_equality,.Lfe19-do_jump_by_parts_equality
	.align 2
	.p2align 4,,15
.globl do_jump_by_parts_equality_rtx
	.type	do_jump_by_parts_equality_rtx,@function
do_jump_by_parts_equality_rtx:
.LFB20:
	pushq	%r15
.LCFI92:
	movq	%rdx, %r15
	pushq	%r14
.LCFI93:
	movq	%rsi, %r14
	pushq	%r13
.LCFI94:
	pushq	%r12
.LCFI95:
	pushq	%rbp
.LCFI96:
	movq	%rdi, %rbp
	pushq	%rbx
.LCFI97:
	subq	$24, %rsp
.LCFI98:
	testb	$2, target_flags+3(%rip)
	je	.L28571
	movzbq	2(%rdi), %rdx
	movzbl	mode_size(%rdx), %r12d
	sarl	$3, %r12d
.L28572:
	movl	word_mode(%rip), %edi
	movq	$0, 16(%rsp)
	movl	$1, %r13d
	call	gen_reg_rtx
	xorl	%esi, %esi
	movq	%rbp, %rdi
	movzbl	2(%rbp), %edx
	movq	%rax, %rbx
	call	operand_subword_force
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	cmpl	%r12d, %r13d
	jge	.L28576
	testq	%rbx, %rbx
	jne	.L28580
.L28581:
	testq	%r14, %r14
	je	.L28593
.L28582:
	xorl	%ebx, %ebx
	cmpl	%r12d, %ebx
	jl	.L28587
.L28592:
	testq	%r15, %r15
	je	.L28588
	movq	%r15, %rdi
	call	emit_jump
.L28588:
	cmpq	$0, 16(%rsp)
	jne	.L28594
.L28570:
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L28594:
	movq	16(%rsp), %rdi
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	emit_label
	.p2align 6,,7
.L28587:
	movzbl	2(%rbp), %edx
	movl	%ebx, %esi
	movq	%rbp, %rdi
	incl	%ebx
	call	operand_subword_force
	xorl	%r9d, %r9d
	movl	word_mode(%rip), %r8d
	movq	const_int_rtx+512(%rip), %rsi
	movq	%rax, %rdi
	movl	$103, %edx
	movl	$1, %ecx
	movq	%r14, (%rsp)
	movq	$0, 8(%rsp)
	call	do_compare_rtx_and_jump
	cmpl	%r12d, %ebx
	jl	.L28587
	jmp	.L28592
.L28593:
	call	gen_label_rtx
	movq	%rax, 16(%rsp)
	movq	%rax, %r14
	jmp	.L28582
	.p2align 6,,7
.L28580:
	movzbl	2(%rbp), %edx
	movl	%r13d, %esi
	movq	%rbp, %rdi
	incl	%r13d
	call	operand_subword_force
	movl	$1, %r9d
	movq	%rbx, %r8
	movl	word_mode(%rip), %edi
	movq	optab_table+152(%rip), %rsi
	movq	%rbx, %rdx
	movq	%rax, %rcx
	movl	$2, (%rsp)
	call	expand_binop
	cmpl	%r12d, %r13d
	movq	%rax, %rbx
	jge	.L28576
	testq	%rax, %rax
	jne	.L28580
	jmp	.L28581
	.p2align 6,,7
.L28576:
	testq	%rbx, %rbx
	je	.L28581
	movq	const_int_rtx+512(%rip), %rsi
	movl	word_mode(%rip), %r8d
	movq	%rbx, %rdi
	movl	$103, %edx
	movl	$1, %ecx
	xorl	%r9d, %r9d
	movq	%r14, (%rsp)
	movq	%r15, 8(%rsp)
	call	do_compare_rtx_and_jump
	jmp	.L28570
	.p2align 6,,7
.L28571:
	movzbq	2(%rdi), %rdx
	movzbl	mode_size(%rdx), %r12d
	sarl	$2, %r12d
	jmp	.L28572
.LFE20:
.Lfe20:
	.size	do_jump_by_parts_equality_rtx,.Lfe20-do_jump_by_parts_equality_rtx
	.align 2
	.p2align 4,,15
.globl do_compare_rtx_and_jump
	.type	do_compare_rtx_and_jump,@function
do_compare_rtx_and_jump:
.LFB21:
	pushq	%r15
.LCFI99:
	pushq	%r14
.LCFI100:
	movl	%r8d, %r14d
	pushq	%r13
.LCFI101:
	movl	%edx, %r13d
	pushq	%r12
.LCFI102:
	pushq	%rbp
.LCFI103:
	movq	%rdi, %rbp
	pushq	%rbx
.LCFI104:
	movq	%rsi, %rbx
	subq	$40, %rsp
.LCFI105:
	movq	104(%rsp), %rdi
	movl	%ecx, 36(%rsp)
	movq	%r9, 24(%rsp)
	movq	96(%rsp), %r12
	movl	$0, 20(%rsp)
	testq	%rdi, %rdi
	je	.L28613
	movq	%r12, %r15
	movq	%rdi, %r12
.L28596:
	movq	%rbp, %rdi
	movq	%rbx, %rsi
	call	swap_commutative_operands_p
	testl	%eax, %eax
	jne	.L28614
	movq	%rbx, %rax
	movq	%rbp, %rbx
	movq	%rax, %rbp
.L28597:
	movl	flag_force_mem(%rip), %eax
	testl	%eax, %eax
	jne	.L28615
.L28598:
	call	do_pending_stack_adjust
	cmpw	$54, (%rbx)
	je	.L28616
.L28599:
	testq	%r12, %r12
	je	.L28617
.L28604:
	movq	24(%rsp), %rcx
	movl	36(%rsp), %r9d
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	movl	%r13d, %edx
	movl	%r14d, %r8d
	movq	%r12, (%rsp)
	call	emit_cmp_and_jump_insns
	testq	%r15, %r15
	jne	.L28618
.L28605:
	movl	20(%rsp), %edx
	testl	%edx, %edx
	jne	.L28619
.L28595:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
	.p2align 6,,7
.L28619:
	addq	$40, %rsp
	movq	%r12, %rdi
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	emit_label
	.p2align 6,,7
.L28618:
	movq	%r15, %rdi
	call	emit_jump
	jmp	.L28605
	.p2align 6,,7
.L28617:
	movl	$1, 20(%rsp)
	call	gen_label_rtx
	movq	%rax, %r12
	jmp	.L28604
	.p2align 6,,7
.L28616:
	cmpw	$54, (%rbp)
	jne	.L28599
	movl	%r13d, %edi
	movl	%r14d, %esi
	movq	%rbx, %rdx
	movq	%rbp, %rcx
	call	simplify_relational_operation
	testq	%rax, %rax
	je	.L28599
	cmpq	const_true_rtx(%rip), %rax
	je	.L28620
	testq	%r15, %r15
	je	.L28595
	movq	%r15, %rdi
.L28612:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	emit_jump
.L28620:
	testq	%r12, %r12
	movq	%r12, %rdi
	jne	.L28612
	jmp	.L28595
	.p2align 6,,7
.L28615:
	movq	%rbx, %rdi
	call	force_not_mem
	movq	%rbp, %rdi
	movq	%rax, %rbx
	call	force_not_mem
	movq	%rax, %rbp
	jmp	.L28598
	.p2align 6,,7
.L28614:
	movl	%r13d, %edi
	call	swap_condition
	movl	%eax, %r13d
	jmp	.L28597
	.p2align 6,,7
.L28613:
	movslq	%r8d,%rdx
	movl	mode_class(,%rdx,4), %eax
	cmpl	$2, %eax
	je	.L28610
	cmpl	$6, %eax
	je	.L28610
	cmpl	$8, %eax
	je	.L28610
	movl	%r13d, %edi
	xorl	%r15d, %r15d
	call	reverse_condition
	movl	%eax, %r13d
	jmp	.L28596
	.p2align 6,,7
.L28610:
	movq	%r12, %r15
	xorl	%r12d, %r12d
	jmp	.L28596
.LFE21:
.Lfe21:
	.size	do_compare_rtx_and_jump,.Lfe21-do_compare_rtx_and_jump
	.align 2
	.p2align 4,,15
	.type	do_compare_and_jump,@function
do_compare_and_jump:
.LFB22:
	pushq	%r15
.LCFI106:
	movq	%rcx, %r15
	xorl	%ecx, %ecx
	pushq	%r14
.LCFI107:
	pushq	%r13
.LCFI108:
	pushq	%r12
.LCFI109:
	movl	%esi, %r12d
	xorl	%esi, %esi
	pushq	%rbp
.LCFI110:
	movq	%rdi, %rbp
	pushq	%rbx
.LCFI111:
	movl	%edx, %ebx
	xorl	%edx, %edx
	subq	$40, %rsp
.LCFI112:
	movq	%r8, 32(%rsp)
	movq	32(%rdi), %rdi
	call	expand_expr
	movq	32(%rbp), %rdx
	movq	%rax, %r14
	cmpb	$0, 16(%rdx)
	jne	.L28640
.L28621:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
	.p2align 6,,7
.L28640:
	movq	40(%rbp), %rdi
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	call	expand_expr
	movq	%rax, 24(%rsp)
	movq	40(%rbp), %rcx
	movzbl	16(%rcx), %esi
	testb	%sil, %sil
	je	.L28621
	movq	32(%rbp), %r8
	movq	8(%r8), %rdi
	movzbl	61(%rdi), %edx
	shrb	$1, %dl
	cmpb	$25, 16(%r8)
	movzbl	%dl, %r13d
	je	.L28641
.L28624:
	movzbl	17(%rdi), %r11d
	shrb	$5, %r11b
	movl	%r11d, %r10d
	andl	$1, %r10d
	cmovne	%ebx, %r12d
	movl	%r10d, 20(%rsp)
	movq	cfun(%rip), %rbx
	movq	16(%rbx), %rdi
	movq	40(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L28638
	.p2align 4,,7
.L28633:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L28642
	call	emit_insn
	movq	%rax, 16(%rbx)
.L28632:
	movq	cfun(%rip), %rcx
	movq	40(%rbx), %rsi
	movq	16(%rcx), %r9
	testq	%rsi, %rsi
	movq	%rsi, %rbx
	movq	%rsi, 40(%r9)
	jne	.L28633
.L28638:
	cmpl	$51, %r13d
	je	.L28643
	xorl	%eax, %eax
.L28636:
	movq	32(%rsp), %rbp
	movq	24(%rsp), %rsi
	movq	%r14, %rdi
	movl	20(%rsp), %ecx
	movl	%r12d, %edx
	movl	%r13d, %r8d
	movq	%rax, %r9
	movq	%r15, (%rsp)
	movq	%rbp, 8(%rsp)
	call	do_compare_rtx_and_jump
	jmp	.L28621
.L28643:
	movq	32(%rbp), %rdi
	call	expr_size
	jmp	.L28636
	.p2align 6,,7
.L28642:
	movq	8(%rdi), %rdx
	movq	8(%rdx), %r8
	movq	%r8, 16(%rbx)
	call	emit_insn
	jmp	.L28632
.L28641:
	cmpb	$25, %sil
	je	.L28644
	movq	8(%rcx), %rcx
.L28625:
	movq	%rcx, %rdi
	movzbl	61(%rcx), %ecx
	shrb	$1, %cl
	movzbl	%cl, %r13d
	jmp	.L28624
.L28644:
	movq	8(%rcx), %rcx
	movslq	%r13d,%r9
	movzbl	61(%rcx), %eax
	shrb	$1, %al
	andl	$127, %eax
	movzwl	mode_bitsize(%rax,%rax), %esi
	cmpw	%si, mode_bitsize(%r9,%r9)
	jbe	.L28624
	jmp	.L28625
.LFE22:
.Lfe22:
	.size	do_compare_and_jump,.Lfe22-do_compare_and_jump
	.section	.rodata.str1.1
.LC22:
	.string	"do_store_flag"
	.text
	.align 2
	.p2align 4,,15
	.type	do_store_flag,@function
do_store_flag:
.LFB23:
	pushq	%r15
.LCFI113:
	movq	%rdi, %r8
	pushq	%r14
.LCFI114:
	movl	%ecx, %r14d
	pushq	%r13
.LCFI115:
	movq	%rsi, %r13
	pushq	%r12
.LCFI116:
	pushq	%rbp
.LCFI117:
	pushq	%rbx
.LCFI118:
	subq	$72, %rsp
.LCFI119:
	movl	%edx, 68(%rsp)
	movl	$0, 52(%rsp)
	movq	%rsi, 24(%rsp)
	cmpb	$96, 16(%rdi)
	je	.L28961
.L28646:
	movq	32(%r8), %rbx
	movq	global_trees(%rip), %rcx
	movq	40(%r8), %r12
	cmpq	%rcx, %rbx
	je	.L28648
	cmpq	%rcx, %r12
	je	.L28648
	movq	8(%rbx), %r15
	xorl	%ebp, %ebp
	movzbl	61(%r15), %edi
	movzbl	17(%r15), %edx
	shrb	$1, %dil
	shrb	$5, %dl
	movzbl	%dil, %esi
	movl	%esi, 64(%rsp)
	movl	%edx, %esi
	andl	$1, %esi
	cmpl	$51, 64(%rsp)
	movl	%esi, 60(%rsp)
	je	.L28645
	.p2align 4,,7
.L28650:
	movzbl	16(%rbx), %esi
	leal	-114(%rsi), %ebp
	cmpb	$2, %bpl
	ja	.L28655
	movq	32(%rbx), %rdi
	cmpq	%rcx, %rdi
	je	.L28655
	movq	8(%rbx), %rdx
	movq	8(%rdi), %r11
	movzbl	61(%rdx), %r10d
	movzbl	61(%r11), %r9d
	andb	$-2, %r10b
	andb	$-2, %r9b
	cmpb	%r9b, %r10b
	jne	.L28655
	movq	%rdi, %rbx
	jmp	.L28650
	.p2align 6,,7
.L28655:
	movzbl	16(%r12), %edi
	subb	$114, %dil
	cmpb	$2, %dil
	ja	.L28656
	movq	32(%r12), %rdi
	cmpq	%rcx, %rdi
	je	.L28656
	movq	8(%r12), %r11
	movq	8(%rdi), %r10
	movzbl	61(%r11), %r9d
	movzbl	61(%r10), %ebp
	andb	$-2, %r9b
	andb	$-2, %bpl
	cmpb	%bpl, %r9b
	jne	.L28656
	movq	%rdi, %r12
	jmp	.L28655
.L28656:
	movzbl	16(%r8), %eax
	subl	$97, %eax
	cmpl	$12, %eax
	ja	.L28694
	mov	%eax, %ecx
	jmp	*.L28695(,%rcx,8)
	.section	.rodata
	.align 8
	.align 4
.L28695:
	.quad	.L28663
	.quad	.L28670
	.quad	.L28675
	.quad	.L28680
	.quad	.L28661
	.quad	.L28662
	.quad	.L28687
	.quad	.L28688
	.quad	.L28689
	.quad	.L28690
	.quad	.L28691
	.quad	.L28692
	.quad	.L28693
	.text
.L28661:
	movl	$103, 20(%rsp)
.L28660:
	leal	-25(%rsi), %r9d
	cmpb	$1, %r9b
	jbe	.L28963
	movq	%r12, %r10
	movq	%rbx, %r12
	movq	%r10, %rbx
.L28696:
	movl	20(%rsp), %eax
	subl	$102, %eax
	cmpl	$1, %eax
	ja	.L28697
	cmpb	$88, 16(%r12)
	je	.L28964
.L28697:
	movl	20(%rsp), %edi
	movl	64(%rsp), %esi
	movl	$2, %edx
	xorl	%ebp, %ebp
	call	can_compare_p
	testl	%eax, %eax
	je	.L28645
	movslq	20(%rsp),%rdx
	movl	setcc_gen_code(,%rdx,4), %eax
	cmpl	$1317, %eax
	je	.L28792
	testl	%r14d, %r14d
	je	.L28791
	cltq
	leaq	(%rax,%rax,4), %r9
	movq	insn_data+24(,%r9,8), %rbp
	movzwl	16(%rbp), %edi
	cmpl	68(%rsp), %edi
	je	.L28791
.L28792:
	cmpl	$107, 20(%rsp)
	je	.L28965
.L28795:
	testl	%r14d, %r14d
	jne	.L28793
	cmpl	$104, 20(%rsp)
	je	.L28966
.L28793:
	movl	ix86_branch_cost(%rip), %eax
	testl	%eax, %eax
	js	.L28797
	testl	%r14d, %r14d
	jne	.L28797
	movl	20(%rsp), %eax
	subl	$102, %eax
	cmpl	$1, %eax
	ja	.L28797
	cmpb	$7, 16(%r15)
	je	.L28797
	movslq	64(%rsp),%rdx
	salq	$4, %rdx
	movq	%rdx, %r15
	addq	optab_table+272(%rip), %r15
	cmpl	$1317, 8(%r15)
	je	.L28967
.L28791:
	testq	%r13, %r13
	je	.L28802
	movl	(%r13), %eax
	andl	$67174399, %eax
	cmpl	$61, %eax
	je	.L28968
.L28802:
	xorl	%edx, %edx
.L28804:
	testq	%rdx, %rdx
	je	.L28801
	movzbl	2(%r13), %r11d
	cmpl	64(%rsp), %r11d
	je	.L28969
.L28801:
	movq	$0, 24(%rsp)
.L28800:
	movq	24(%rsp), %rsi
	movq	%r12, %rdi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rbx, %rdi
	xorl	%esi, %esi
	movq	%rax, %r12
	call	expand_expr
	testq	%r13, %r13
	movq	%rax, %rbx
	je	.L28970
.L28885:
	movzwl	(%r12), %eax
	subl	$66, %eax
	cmpl	$12, %eax
	ja	.L28897
	mov	%eax, %r15d
	jmp	*.L28898(,%r15,8)
	.section	.rodata
	.align 8
	.align 4
.L28898:
	.quad	.L28891
	.quad	.L28897
	.quad	.L28897
	.quad	.L28897
	.quad	.L28897
	.quad	.L28896
	.quad	.L28897
	.quad	.L28897
	.quad	.L28897
	.quad	.L28894
	.quad	.L28894
	.quad	.L28897
	.quad	.L28894
	.text
.L28891:
	movq	8(%r12), %rdi
	call	queued_subexp_p
	movl	%eax, %ebp
.L28890:
	testl	%ebp, %ebp
	jne	.L28971
	movq	%r12, %r14
.L28887:
	movzwl	(%rbx), %eax
	subl	$66, %eax
	cmpl	$12, %eax
	ja	.L28910
	mov	%eax, %r11d
	jmp	*.L28911(,%r11,8)
	.section	.rodata
	.align 8
	.align 4
.L28911:
	.quad	.L28904
	.quad	.L28910
	.quad	.L28910
	.quad	.L28910
	.quad	.L28910
	.quad	.L28909
	.quad	.L28910
	.quad	.L28910
	.quad	.L28910
	.quad	.L28907
	.quad	.L28907
	.quad	.L28910
	.quad	.L28907
	.text
.L28904:
	movq	8(%rbx), %rdi
	call	queued_subexp_p
	movl	%eax, %ebp
.L28903:
	testl	%ebp, %ebp
	jne	.L28972
	movq	%rbx, %rcx
.L28900:
	movl	20(%rsp), %esi
	movl	64(%rsp), %r8d
	movq	%r13, %rdi
	movl	60(%rsp), %r9d
	movq	%r14, %rdx
	movl	$1, (%rsp)
	call	emit_store_flag
	testq	%rax, %rax
	movq	%rax, %rbp
	je	.L28912
	movl	52(%rsp), %ebx
	testl	%ebx, %ebx
	jne	.L28973
	.p2align 4,,7
.L28645:
	addq	$72, %rsp
	movq	%rbp, %rax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L28973:
	movl	68(%rsp), %edi
	movq	optab_table+160(%rip), %rsi
	movq	%rax, %rdx
	movq	const_int_rtx+520(%rip), %rcx
	movq	%rax, %r8
	xorl	%r9d, %r9d
	movl	$3, (%rsp)
	call	expand_binop
.L28956:
	movq	%rax, %rbp
	jmp	.L28645
.L28912:
	cmpw	$61, (%r13)
	je	.L28974
.L28915:
	movzbl	2(%r13), %edi
	call	gen_reg_rtx
	movq	%rax, %r13
.L28914:
	movl	52(%rsp), %eax
	testl	%eax, %eax
	je	.L28918
	movq	const_int_rtx+512(%rip), %rsi
.L28919:
	movq	%r13, %rdi
	call	emit_move_insn
	movq	%rbx, %rsi
	movq	%r12, %rdi
	call	swap_commutative_operands_p
	testl	%eax, %eax
	jne	.L28975
	movq	%rbx, %rcx
	movq	%r12, %rbx
	movq	%rcx, %r12
.L28920:
	movl	flag_force_mem(%rip), %eax
	testl	%eax, %eax
	jne	.L28976
.L28921:
	call	do_pending_stack_adjust
	cmpw	$54, (%rbx)
	je	.L28977
.L28922:
	movl	20(%rsp), %edx
	movl	64(%rsp), %r8d
	movq	%rbx, %rdi
	movl	60(%rsp), %r9d
	movq	%r12, %rsi
	xorl	%ecx, %ecx
	call	emit_cmp_insn
	movl	20(%rsp), %edi
	movq	global_rtl+8(%rip), %rdx
	xorl	%esi, %esi
	movq	const_int_rtx+512(%rip), %rcx
	call	gen_rtx_fmt_ee
.L28923:
	movzwl	(%rax), %edx
	cmpw	$54, %dx
	je	.L28978
	movzwl	%dx, %r14d
	call	gen_label_rtx
	movslq	%r14d,%r12
	movq	%rax, %rbp
	movq	bcc_gen_fctn(,%r12,8), %rax
	testq	%rax, %rax
	je	.L28979
	movq	%rbp, %rdi
	call	*%rax
	movq	%rax, %rdi
	call	emit_jump_insn
	movl	52(%rsp), %eax
	testl	%eax, %eax
	je	.L28932
	movq	const_int_rtx+520(%rip), %rsi
.L28933:
	movq	%r13, %rdi
	call	emit_move_insn
	movq	%rbp, %rdi
	movq	%r13, %rbp
	call	emit_label
	jmp	.L28645
.L28932:
	movq	const_int_rtx+512(%rip), %rsi
	jmp	.L28933
.L28979:
	movl	$.LC0, %edi
	movl	$10431, %esi
.L28960:
	movl	$.LC22, %edx
.L28957:
	call	fancy_abort
.L28978:
	movq	const_int_rtx+512(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L28980
	movl	52(%rsp), %eax
	testl	%eax, %eax
	je	.L28925
.L28927:
	movq	%rdx, %rbp
	jmp	.L28645
.L28925:
	movq	const_int_rtx+520(%rip), %rbp
	jmp	.L28645
.L28980:
	movl	52(%rsp), %eax
	testl	%eax, %eax
	je	.L28927
	jmp	.L28925
.L28977:
	cmpw	$54, (%r12)
	jne	.L28922
	movl	20(%rsp), %edi
	movl	64(%rsp), %esi
	movq	%rbx, %rdx
	movq	%r12, %rcx
	call	simplify_relational_operation
	testq	%rax, %rax
	jne	.L28923
	jmp	.L28922
.L28976:
	movq	%rbx, %rdi
	call	force_not_mem
	movq	%r12, %rdi
	movq	%rax, %rbx
	call	force_not_mem
	movq	%rax, %r12
	jmp	.L28921
.L28975:
	movl	20(%rsp), %edi
	call	swap_condition
	movl	%eax, 20(%rsp)
	jmp	.L28920
.L28918:
	movq	const_int_rtx+520(%rip), %rsi
	jmp	.L28919
.L28974:
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	reg_mentioned_p
	testl	%eax, %eax
	jne	.L28915
	movq	%r13, %rdi
	movq	%rbx, %rsi
	call	reg_mentioned_p
	testl	%eax, %eax
	je	.L28914
	jmp	.L28915
	.p2align 6,,7
.L28972:
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rcx
	jmp	.L28900
.L28909:
	movl	$1, %ebp
	jmp	.L28903
.L28910:
	xorl	%ebp, %ebp
	jmp	.L28903
.L28907:
	movq	8(%rbx), %rdi
	xorl	%ebp, %ebp
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L28909
	movq	16(%rbx), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L28903
	jmp	.L28909
	.p2align 6,,7
.L28971:
	movq	%r12, %rdi
	call	copy_rtx
	movq	%rax, %r14
	jmp	.L28887
.L28896:
	movl	$1, %ebp
	jmp	.L28890
.L28897:
	xorl	%ebp, %ebp
	jmp	.L28890
.L28894:
	movq	8(%r12), %rdi
	xorl	%ebp, %ebp
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L28896
	movq	16(%r12), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L28890
	jmp	.L28896
	.p2align 6,,7
.L28970:
	movl	68(%rsp), %edi
	call	gen_reg_rtx
	movq	%rax, %r13
	jmp	.L28885
.L28969:
	testq	%r13, %r13
	movq	%r13, %r14
	movq	%rbx, %r15
	movq	$0, 32(%rsp)
	je	.L28884
	movq	8(%rbx), %rax
	testq	%rax, %rax
	je	.L28807
	movq	32(%rax), %rdx
	testq	%rdx, %rdx
	je	.L28807
	cmpb	$25, 16(%rdx)
	je	.L28807
	cmpb	$18, 16(%rax)
	je	.L28981
.L28808:
	cmpb	$51, 2(%r13)
	je	.L28884
.L28807:
	movzwl	(%r13), %ecx
	cmpw	$66, %cx
	je	.L28982
.L28805:
	cmpw	$63, %cx
	je	.L28983
.L28810:
	movl	$1, %eax
	testl	%eax, %eax
	jne	.L28984
	movzbl	16(%rbx), %edx
	movzbl	%dl, %r8d 
	movsbl	tree_code_type(%r8),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L28818
	mov	%eax, %esi
	jmp	*.L28878(,%rsi,8)
	.section	.rodata
	.align 8
	.align 4
.L28878:
	.quad	.L28861
	.quad	.L28834
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28834
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28884
	.quad	.L28819
	.quad	.L28837
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28837
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28818
	.quad	.L28824
	.text
.L28819:
	movq	144(%rbx), %rdx
	testq	%rdx, %rdx
	movq	%rdx, 32(%rsp)
	jne	.L28947
	movq	$0, 32(%rsp)
.L28818:
	cmpq	$0, 32(%rsp)
	movl	$1, %ebp
	je	.L28809
.L28947:
	movq	32(%rsp), %rax
	cmpw	$63, (%rax)
	je	.L28985
.L28881:
	movq	32(%rsp), %rsi
	movq	%r14, %rdi
	xorl	%ebp, %ebp
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L28809
	cmpw	$66, (%r14)
	je	.L28986
.L28884:
	movl	$1, %ebp
.L28809:
	testl	%ebp, %ebp
	jne	.L28800
	jmp	.L28801
.L28986:
	movq	32(%rsp), %rax
	cmpw	$66, (%rax)
	jne	.L28884
	xorl	%esi, %esi
	movq	%rax, %rdi
	movq	%r14, %rdx
	movl	$rtx_addr_varies_p, %ecx
	call	true_dependence
	testl	%eax, %eax
	jne	.L28809
	jmp	.L28884
	.p2align 6,,7
.L28985:
	movq	8(%rax), %rdx
	cmpw	$61, (%rdx)
	movq	%rdx, 32(%rsp)
	jne	.L28881
	cmpl	$52, 8(%rdx)
	ja	.L28881
.L28950:
	xorl	%ebp, %ebp
	jmp	.L28809
.L28861:
	movq	32(%rbx), %rsi
	movq	%r14, %rdi
.L28955:
	xorl	%edx, %edx
	call	safe_from_p
	movl	%eax, %ebp
	jmp	.L28809
.L28834:
	movq	32(%rbx), %rsi
	xorl	%edx, %edx
	movq	%r14, %rdi
	xorl	%ebp, %ebp
	call	safe_from_p
	testl	%eax, %eax
	je	.L28809
	movq	%r14, %rdi
	movq	40(%rbx), %rsi
.L28959:
	xorl	%edx, %edx
	call	safe_from_p
	testl	%eax, %eax
	je	.L28809
	jmp	.L28884
	.p2align 6,,7
.L28837:
	movzbl	%dl, %eax
	subl	$41, %eax
	cmpl	$80, %eax
	ja	.L28838
	mov	%eax, %edi
	jmp	*.L28869(,%rdi,8)
	.section	.rodata
	.align 8
	.align 4
.L28869:
	.quad	.L28848
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28866
	.quad	.L28854
	.quad	.L28867
	.quad	.L28860
	.quad	.L28861
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28838
	.quad	.L28862
	.quad	.L28838
	.quad	.L28858
	.quad	.L28839
	.text
.L28839:
	movq	32(%rbx), %rdi
	call	staticp
	testl	%eax, %eax
	jne	.L28884
	testb	$4, 18(%rbx)
	jne	.L28884
	movq	32(%rbx), %rsi
	xorl	%edx, %edx
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L28884
	movq	32(%rbx), %r15
	movzbq	16(%r15), %rbp
	cmpb	$100, tree_code_type(%rbp)
	je	.L28987
.L28838:
	cmpq	$0, 32(%rsp)
	jne	.L28947
	movzbl	16(%r15), %edi
	xorl	%ebp, %ebp
	call	first_rtl_op
	cmpl	%eax, %ebp
	movl	%eax, 56(%rsp)
	jge	.L28941
.L28876:
	movslq	%ebp,%r10
	movq	32(%r15,%r10,8), %rsi
	testq	%rsi, %rsi
	jne	.L28988
.L28873:
	incl	%ebp
	cmpl	56(%rsp), %ebp
	jl	.L28876
.L28941:
	cmpb	$-110, 16(%r15)
	jbe	.L28818
	movq	%r14, %rdi
	movq	%r15, %rsi
	xorl	%ebp, %ebp
	call	*lang_hooks+80(%rip)
	testl	%eax, %eax
	je	.L28809
	jmp	.L28818
.L28988:
	xorl	%edx, %edx
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L28873
	jmp	.L28950
.L28987:
	movq	144(%r15), %rax
	testq	%rax, %rax
	je	.L28950
	cmpw	$66, (%rax)
	jne	.L28950
	movq	8(%rax), %rax
.L28954:
	movq	%rax, 32(%rsp)
	jmp	.L28838
.L28848:
	cmpw	$66, (%r14)
	jne	.L28838
	movq	%rbx, %rdi
	call	get_alias_set
	xorl	%edi, %edi
	movq	%rax, %rsi
	movq	16(%r14), %rax
	testq	%rax, %rax
	je	.L28853
	movq	(%rax), %rdi
.L28853:
	call	alias_sets_conflict_p
	xorl	%ebp, %ebp
	testl	%eax, %eax
	jne	.L28809
	jmp	.L28838
.L28866:
	movq	%r14, %rdi
	movq	40(%rbx), %rsi
	jmp	.L28955
.L28854:
	movzwl	(%r14), %eax
	cmpw	$61, %ax
	je	.L28989
.L28857:
	cmpw	$66, %ax
	jne	.L28838
	jmp	.L28950
.L28989:
	cmpl	$52, 8(%r14)
	jbe	.L28950
	jmp	.L28857
.L28867:
	movl	$.LC0, %edi
	movl	$5724, %esi
	movl	$.LC18, %edx
	jmp	.L28957
.L28860:
	movq	48(%rbx), %rax
	jmp	.L28954
.L28862:
	movq	48(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, 32(%rsp)
	jne	.L28947
	movzbl	18(%rbx), %eax
	movl	$1, %ebp
	testb	$16, %al
	jne	.L28809
	movq	32(%rbx), %rsi
	orb	$16, %al
	xorl	%edx, %edx
	movb	%al, 18(%rbx)
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L28865
	andb	$-17, 18(%rbx)
	jmp	.L28950
.L28865:
	movq	save_expr_list.2(%rip), %rdx
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	tree_cons
	movq	%rax, save_expr_list.2(%rip)
	jmp	.L28884
.L28858:
	cmpq	$0, 32(%rbx)
	jne	.L28950
	movq	40(%rbx), %r9
	movq	%r9, 32(%rsp)
	jmp	.L28838
	.p2align 6,,7
.L28824:
	cmpb	$2, %dl
	je	.L28990
	testb	%dl, %dl
	sete	%r14b
	movzbl	%r14b, %ebp
	jmp	.L28809
.L28990:
	movq	32(%rbx), %rsi
	xorl	%ebp, %ebp
	testq	%rsi, %rsi
	jne	.L28991
.L28827:
	movq	(%rbx), %rsi
	movq	%r14, %rdi
	testq	%rsi, %rsi
	jne	.L28959
	jmp	.L28884
.L28991:
	xorl	%edx, %edx
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L28809
	jmp	.L28827
	.p2align 6,,7
.L28984:
	xorl	%edx, %edx
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	$0, save_expr_list.2(%rip)
	call	safe_from_p
	movq	save_expr_list.2(%rip), %rdx
	movl	%eax, %ebp
	testq	%rdx, %rdx
	je	.L28809
.L28817:
	movq	24(%rdx), %rcx
	andb	$-17, 18(%rcx)
	movq	(%rdx), %rdx
	testq	%rdx, %rdx
	jne	.L28817
	jmp	.L28809
.L28983:
	movq	8(%r13), %r14
	cmpw	$61, (%r14)
	jne	.L28810
	cmpl	$52, 8(%r14)
	jbe	.L28950
	jmp	.L28810
.L28982:
	movq	8(%r13), %rax
	movq	global_rtl+72(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L28884
	cmpw	$75, (%rax)
	jne	.L28805
	cmpq	%rdx, 8(%rax)
	jne	.L28805
	jmp	.L28884
	.p2align 6,,7
.L28981:
	movq	112(%rax), %rax
	testq	%rax, %rax
	je	.L28808
	cmpb	$25, 16(%rax)
	jne	.L28808
	jmp	.L28807
	.p2align 6,,7
.L28968:
	cmpl	$52, 8(%r13)
	jbe	.L28802
	call	preserve_subexpressions_p
	movq	%r13, %rdx
	testl	%eax, %eax
	je	.L28804
	jmp	.L28802
.L28967:
	movq	%rdx, %r10
	addq	optab_table+296(%rip), %r10
	cmpl	$1317, 8(%r10)
	jne	.L28791
.L28797:
	xorl	%ebp, %ebp
	jmp	.L28645
.L28966:
	movq	%rbx, %rdi
	call	integer_zerop
	testl	%eax, %eax
	jne	.L28791
	jmp	.L28793
.L28965:
	movq	%rbx, %rdi
	call	integer_zerop
	testl	%eax, %eax
	jne	.L28791
	jmp	.L28795
.L28964:
	movq	%rbx, %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L28697
	movq	40(%r12), %rdi
	call	integer_pow2p
	testl	%eax, %eax
	je	.L28697
	movq	40(%r12), %rdi
	movq	32(%r12), %rbx
	call	tree_log2
	movl	%eax, 48(%rsp)
	cmpb	$83, 16(%rbx)
	je	.L28992
.L28698:
	testq	%r13, %r13
	je	.L28701
	movl	(%r13), %eax
	andl	$67174399, %eax
	cmpl	$61, %eax
	je	.L28993
.L28701:
	xorl	%edx, %edx
.L28703:
	testq	%rdx, %rdx
	je	.L28700
	movzbl	2(%r13), %ecx
	cmpl	64(%rsp), %ecx
	je	.L28994
.L28700:
	movq	$0, 24(%rsp)
.L28699:
	movq	24(%rsp), %rsi
	movq	%rbx, %rdi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movl	48(%rsp), %ebx
	movq	%rax, %rbp
	testl	%ebx, %ebx
	jne	.L28995
.L28784:
	movzbl	2(%rbp), %r12d
	cmpl	68(%rsp), %r12d
	je	.L28785
	movl	68(%rsp), %edi
	movq	%rbp, %rsi
	movl	$1, %edx
	call	convert_to_mode
	movq	%rax, %rbp
.L28785:
	cmpl	$103, 20(%rsp)
	je	.L28996
.L28788:
	cmpl	$102, 20(%rsp)
	je	.L28997
.L28786:
	movzwl	60(%r15), %esi
	andl	$511, %esi
	decl	%esi
	cmpl	%esi, 48(%rsp)
	je	.L28645
	movl	68(%rsp), %edi
	movq	const_int_rtx+520(%rip), %rdx
	movq	%rbp, %rsi
	movq	24(%rsp), %rcx
	call	expand_and
	jmp	.L28956
.L28997:
	movl	52(%rsp), %r13d
	testl	%r13d, %r13d
	je	.L28786
.L28787:
	movl	68(%rsp), %edi
	movq	optab_table+160(%rip), %rsi
	movq	%rbp, %rdx
	movq	const_int_rtx+520(%rip), %rcx
	movq	24(%rsp), %r8
	movl	$1, %r9d
	movl	$3, (%rsp)
	call	expand_binop
	movq	%rax, %rbp
	jmp	.L28786
.L28996:
	movl	52(%rsp), %r14d
	testl	%r14d, %r14d
	je	.L28787
	jmp	.L28788
.L28995:
	movslq	48(%rsp),%rdi
	xorl	%esi, %esi
	call	size_int_wide
	movl	$1, %r9d
	movq	24(%rsp), %r8
	movl	64(%rsp), %esi
	movq	%rbp, %rdx
	movq	%rax, %rcx
	movl	$83, %edi
	call	expand_shift
	movq	%rax, %rbp
	jmp	.L28784
.L28994:
	xorl	%r14d, %r14d
	movq	%r13, %r12
	movq	%rbx, 40(%rsp)
	testq	%r13, %r13
	je	.L28783
	movq	8(%rbx), %rax
	testq	%rax, %rax
	je	.L28706
	movq	32(%rax), %rdx
	testq	%rdx, %rdx
	je	.L28706
	cmpb	$25, 16(%rdx)
	je	.L28706
	cmpb	$18, 16(%rax)
	je	.L28998
.L28707:
	cmpb	$51, 2(%r13)
	je	.L28783
.L28706:
	movzwl	(%r13), %eax
	cmpw	$66, %ax
	je	.L28999
.L28704:
	cmpw	$63, %ax
	je	.L29000
.L28709:
	movl	$1, %eax
	testl	%eax, %eax
	jne	.L29001
	movzbl	16(%rbx), %edx
	movzbl	%dl, %r8d 
	movsbl	tree_code_type(%r8),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L28717
	mov	%eax, %esi
	jmp	*.L28777(,%rsi,8)
	.section	.rodata
	.align 8
	.align 4
.L28777:
	.quad	.L28760
	.quad	.L28733
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28733
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28783
	.quad	.L28718
	.quad	.L28736
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28736
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28717
	.quad	.L28723
	.text
.L28718:
	movq	144(%rbx), %rax
	testq	%rax, %rax
	movq	%rax, %r14
	jne	.L28946
	xorl	%r14d, %r14d
.L28717:
	testq	%r14, %r14
	movl	$1, %ebp
	je	.L28708
.L28946:
	cmpw	$63, (%r14)
	je	.L29002
.L28780:
	movq	%r12, %rdi
	movq	%r14, %rsi
	xorl	%ebp, %ebp
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L28708
	cmpw	$66, (%r12)
	je	.L29003
.L28783:
	movl	$1, %ebp
.L28708:
	testl	%ebp, %ebp
	jne	.L28699
	jmp	.L28700
.L29003:
	cmpw	$66, (%r14)
	jne	.L28783
	xorl	%esi, %esi
	movq	%r14, %rdi
	movq	%r12, %rdx
	movl	$rtx_addr_varies_p, %ecx
	call	true_dependence
	testl	%eax, %eax
	jne	.L28708
	jmp	.L28783
.L29002:
	movq	8(%r14), %r14
	cmpw	$61, (%r14)
	jne	.L28780
	cmpl	$52, 8(%r14)
	ja	.L28780
.L28949:
	xorl	%ebp, %ebp
	jmp	.L28708
.L28760:
	movq	32(%rbx), %rsi
	movq	%r12, %rdi
.L28953:
	xorl	%edx, %edx
	call	safe_from_p
	movl	%eax, %ebp
	jmp	.L28708
.L28733:
	movq	32(%rbx), %rsi
	xorl	%edx, %edx
	movq	%r12, %rdi
	xorl	%ebp, %ebp
	call	safe_from_p
	testl	%eax, %eax
	je	.L28708
	movq	%r12, %rdi
	movq	40(%rbx), %rsi
.L28958:
	xorl	%edx, %edx
	call	safe_from_p
	testl	%eax, %eax
	je	.L28708
	jmp	.L28783
.L28736:
	movzbl	%dl, %eax
	subl	$41, %eax
	cmpl	$80, %eax
	ja	.L28737
	mov	%eax, %edi
	jmp	*.L28768(,%rdi,8)
	.section	.rodata
	.align 8
	.align 4
.L28768:
	.quad	.L28747
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28765
	.quad	.L28753
	.quad	.L28867
	.quad	.L28759
	.quad	.L28760
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28737
	.quad	.L28761
	.quad	.L28737
	.quad	.L28757
	.quad	.L28738
	.text
.L28738:
	movq	32(%rbx), %rdi
	call	staticp
	testl	%eax, %eax
	jne	.L28783
	testb	$4, 18(%rbx)
	jne	.L28783
	movq	32(%rbx), %rsi
	xorl	%edx, %edx
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L28783
	movq	32(%rbx), %r9
	movq	%r9, 40(%rsp)
	movzbq	16(%r9), %rbp
	cmpb	$100, tree_code_type(%rbp)
	je	.L29004
.L28737:
	testq	%r14, %r14
	jne	.L28946
	movq	40(%rsp), %r11
	xorl	%ebp, %ebp
	movzbl	16(%r11), %edi
	call	first_rtl_op
	cmpl	%eax, %ebp
	movl	%eax, %r13d
	jge	.L28937
.L28775:
	movq	40(%rsp), %rcx
	movslq	%ebp,%r8
	movq	32(%rcx,%r8,8), %rsi
	testq	%rsi, %rsi
	jne	.L29005
.L28772:
	incl	%ebp
	cmpl	%r13d, %ebp
	jl	.L28775
.L28937:
	movq	40(%rsp), %rax
	cmpb	$-110, 16(%rax)
	jbe	.L28717
	movq	%r12, %rdi
	movq	%rax, %rsi
	xorl	%ebp, %ebp
	call	*lang_hooks+80(%rip)
	testl	%eax, %eax
	je	.L28708
	jmp	.L28717
.L29005:
	xorl	%edx, %edx
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L28772
	jmp	.L28949
.L29004:
	movq	40(%rsp), %r10
	movq	144(%r10), %rax
	testq	%rax, %rax
	je	.L28949
	cmpw	$66, (%rax)
	jne	.L28949
	movq	8(%rax), %r14
	jmp	.L28737
.L28747:
	cmpw	$66, (%r12)
	jne	.L28737
	movq	%rbx, %rdi
	call	get_alias_set
	xorl	%edi, %edi
	movq	%rax, %rsi
	movq	16(%r12), %rax
	testq	%rax, %rax
	je	.L28752
	movq	(%rax), %rdi
.L28752:
	call	alias_sets_conflict_p
	xorl	%ebp, %ebp
	testl	%eax, %eax
	jne	.L28708
	jmp	.L28737
.L28765:
	movq	%r12, %rdi
	movq	40(%rbx), %rsi
	jmp	.L28953
.L28753:
	movzwl	(%r12), %eax
	cmpw	$61, %ax
	je	.L29006
.L28756:
	cmpw	$66, %ax
	jne	.L28737
	jmp	.L28949
.L29006:
	cmpl	$52, 8(%r12)
	jbe	.L28949
	jmp	.L28756
.L28759:
	movq	48(%rbx), %r14
	jmp	.L28737
.L28761:
	movq	48(%rbx), %r14
	testq	%r14, %r14
	jne	.L28946
	movzbl	18(%rbx), %eax
	movl	$1, %ebp
	testb	$16, %al
	jne	.L28708
	movq	32(%rbx), %rsi
	orb	$16, %al
	xorl	%edx, %edx
	movb	%al, 18(%rbx)
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L28764
	andb	$-17, 18(%rbx)
	jmp	.L28949
.L28764:
	movq	save_expr_list.2(%rip), %rdx
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	tree_cons
	movq	%rax, save_expr_list.2(%rip)
	jmp	.L28783
.L28757:
	cmpq	$0, 32(%rbx)
	jne	.L28949
	movq	40(%rbx), %r14
	jmp	.L28737
.L28723:
	cmpb	$2, %dl
	je	.L29007
	testb	%dl, %dl
	sete	%dl
	movzbl	%dl, %ebp
	jmp	.L28708
.L29007:
	movq	32(%rbx), %rsi
	xorl	%ebp, %ebp
	testq	%rsi, %rsi
	jne	.L29008
.L28726:
	movq	(%rbx), %rsi
	movq	%r12, %rdi
	testq	%rsi, %rsi
	jne	.L28958
	jmp	.L28783
.L29008:
	xorl	%edx, %edx
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L28708
	jmp	.L28726
.L29001:
	xorl	%edx, %edx
	movq	%r12, %rdi
	movq	%rbx, %rsi
	movq	$0, save_expr_list.2(%rip)
	call	safe_from_p
	movq	save_expr_list.2(%rip), %rdx
	movl	%eax, %ebp
	testq	%rdx, %rdx
	je	.L28708
.L28716:
	movq	24(%rdx), %r13
	andb	$-17, 18(%r13)
	movq	(%rdx), %rdx
	testq	%rdx, %rdx
	jne	.L28716
	jmp	.L28708
.L29000:
	movq	8(%r13), %r12
	cmpw	$61, (%r12)
	jne	.L28709
	cmpl	$52, 8(%r12)
	jbe	.L28949
	jmp	.L28709
.L28999:
	movq	8(%r13), %rdx
	movq	global_rtl+72(%rip), %rcx
	cmpq	%rcx, %rdx
	je	.L28783
	cmpw	$75, (%rdx)
	jne	.L28704
	cmpq	%rcx, 8(%rdx)
	jne	.L28704
	jmp	.L28783
.L28998:
	movq	112(%rax), %rax
	testq	%rax, %rax
	je	.L28707
	cmpb	$25, 16(%rax)
	jne	.L28707
	jmp	.L28706
	.p2align 6,,7
.L28993:
	cmpl	$52, 8(%r13)
	jbe	.L28701
	call	preserve_subexpressions_p
	movq	%r13, %rdx
	testl	%eax, %eax
	je	.L28703
	jmp	.L28701
	.p2align 6,,7
.L28992:
	movq	40(%rbx), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L28698
	cmpq	$0, 40(%rdi)
	jne	.L28698
	movzwl	60(%r15), %eax
	andl	$511, %eax
	cmpl	%eax, 48(%rsp)
	jge	.L28698
	movl	48(%rsp), %r12d
	subl	%eax, %r12d
	movslq	%r12d,%rsi
	call	compare_tree_int
	testl	%eax, %eax
	jns	.L28698
	movq	40(%rbx), %r11
	movl	32(%r11), %r14d
	addl	%r14d, 48(%rsp)
	movq	32(%rbx), %rbx
	jmp	.L28698
	.p2align 6,,7
.L28963:
	movl	20(%rsp), %edi
	call	swap_condition
	movl	%eax, 20(%rsp)
	jmp	.L28696
.L28663:
	movq	%r12, %rdi
	call	integer_onep
	testl	%eax, %eax
	je	.L28664
	xorl	%r8d, %r8d
	movq	global_trees+88(%rip), %r12
	cmpl	$0, 60(%rsp)
	setne	%r8b
	leal	106(,%r8,4), %eax
.L28951:
	movl	%eax, 20(%rsp)
.L28952:
	movzbl	16(%rbx), %esi
	jmp	.L28660
.L28664:
	xorl	%esi, %esi
	cmpl	$0, 60(%rsp)
	setne	%sil
	leal	107(,%rsi,4), %eax
	jmp	.L28951
.L28670:
	movl	60(%rsp), %eax
	testl	%eax, %eax
	je	.L29009
	movl	$110, 20(%rsp)
	jmp	.L28660
.L29009:
	movq	%r12, %rdi
	call	integer_all_onesp
	testl	%eax, %eax
	je	.L28671
	movq	global_trees+88(%rip), %r12
	movl	$107, 20(%rsp)
	jmp	.L28952
.L28671:
	movl	$106, 20(%rsp)
	jmp	.L28952
.L28675:
	movl	60(%rsp), %edx
	testl	%edx, %edx
	je	.L29010
	movl	$109, 20(%rsp)
	jmp	.L28660
.L29010:
	movq	%r12, %rdi
	call	integer_all_onesp
	testl	%eax, %eax
	je	.L28676
	movq	global_trees+88(%rip), %r12
	movl	$104, 20(%rsp)
	jmp	.L28952
.L28676:
	movl	$105, 20(%rsp)
	jmp	.L28952
.L28680:
	movq	%r12, %rdi
	call	integer_onep
	testl	%eax, %eax
	je	.L28681
	xorl	%edi, %edi
	movq	global_trees+88(%rip), %r12
	cmpl	$0, 60(%rsp)
	setne	%dil
	leal	105(,%rdi,4), %eax
	jmp	.L28951
.L28681:
	xorl	%ebp, %ebp
	cmpl	$0, 60(%rsp)
	setne	%bpl
	leal	104(,%rbp,4), %eax
	jmp	.L28951
.L28662:
	movl	$102, 20(%rsp)
	jmp	.L28660
.L28687:
	movl	$112, 20(%rsp)
	jmp	.L28660
.L28688:
	movl	$113, 20(%rsp)
	jmp	.L28660
.L28689:
	movl	$118, 20(%rsp)
	jmp	.L28660
.L28690:
	movl	$117, 20(%rsp)
	jmp	.L28660
.L28691:
	movl	$116, 20(%rsp)
	jmp	.L28660
.L28692:
	movl	$115, 20(%rsp)
	jmp	.L28660
.L28693:
	movl	$114, 20(%rsp)
	jmp	.L28660
.L28694:
	movl	$.LC0, %edi
	movl	$10281, %esi
	jmp	.L28960
	.p2align 6,,7
.L28648:
	movq	const_int_rtx+512(%rip), %rbp
	jmp	.L28645
.L28961:
	movl	$1, 52(%rsp)
	movq	32(%rdi), %r8
	jmp	.L28646
.LFE23:
.Lfe23:
	.size	do_store_flag,.Lfe23-do_store_flag
	.align 2
	.p2align 4,,15
.globl init_expr_once
	.type	init_expr_once,@function
init_expr_once:
.LFB24:
	pushq	%r15
.LCFI120:
	pushq	%r14
.LCFI121:
	xorl	%r14d, %r14d
	pushq	%r13
.LCFI122:
	pushq	%r12
.LCFI123:
	pushq	%rbp
.LCFI124:
	pushq	%rbx
.LCFI125:
	subq	$40, %rsp
.LCFI126:
	call	start_sequence
	movq	global_rtl+16(%rip), %rsi
	xorl	%edi, %edi
	call	gen_rtx_MEM
	movq	global_rtl+24(%rip), %rsi
	xorl	%edi, %edi
	movq	%rax, 16(%rsp)
	call	gen_rtx_MEM
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movl	$47, %edi
	xorl	%esi, %esi
	movq	%rax, 8(%rsp)
	call	gen_rtx_fmt_ee
	movq	%rax, %rdi
	call	emit_insn
	movq	%rax, 24(%rsp)
	movq	32(%rax), %rbx
	.p2align 4,,7
.L29038:
	movq	16(%rsp), %rdx
	movslq	%r14d,%rbp
	testl	%r14d, %r14d
	movb	$0, direct_store(%rbp)
	movb	$0, direct_load(%rbp)
	movb	%r14b, 2(%rdx)
	movq	8(%rsp), %rdx
	movb	%r14b, 2(%rdx)
	je	.L29024
	cmpl	$51, %r14d
	je	.L29024
	xorl	%r13d, %r13d
	cmpb	$0, direct_load(%rbp)
	je	.L29037
	cmpb	$0, direct_store(%rbp)
	jne	.L29024
	.p2align 4,,7
.L29037:
	movl	%r13d, %edi
	movl	%r14d, %esi
	call	ix86_hard_regno_mode_ok
	testl	%eax, %eax
	jne	.L29042
.L29029:
	incl	%r13d
	cmpl	$52, %r13d
	jg	.L29024
	cmpb	$0, direct_load(%rbp)
	je	.L29037
	cmpb	$0, direct_store(%rbp)
	je	.L29037
	.p2align 4,,7
.L29024:
	incl	%r14d
	cmpl	$58, %r14d
	jle	.L29038
	call	end_sequence
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
	.p2align 6,,7
.L29042:
	movl	%r14d, %edi
	movl	%r13d, %esi
	leaq	36(%rsp), %r15
	call	gen_rtx_REG
	movq	%r15, %rdx
	movq	%rbx, %rdi
	movq	16(%rsp), %rcx
	movq	%rax, %r12
	movq	%rax, 8(%rbx)
	movq	%rcx, 16(%rbx)
	movq	24(%rsp), %rsi
	call	recog
	testl	%eax, %eax
	js	.L29033
	movb	$1, direct_load(%rbp)
.L29033:
	movq	8(%rsp), %rsi
	movq	%rbx, %rdi
	movq	%r15, %rdx
	movq	%r12, 8(%rbx)
	movq	%rsi, 16(%rbx)
	movq	24(%rsp), %rsi
	call	recog
	testl	%eax, %eax
	js	.L29034
	movb	$1, direct_load(%rbp)
.L29034:
	movq	%r12, 16(%rbx)
	movq	%r15, %rdx
	movq	16(%rsp), %rdi
	movq	%rdi, 8(%rbx)
	movq	24(%rsp), %rsi
	movq	%rbx, %rdi
	call	recog
	testl	%eax, %eax
	js	.L29035
	movb	$1, direct_store(%rbp)
.L29035:
	movq	%r12, 16(%rbx)
	movq	%rbx, %rdi
	movq	%r15, %rdx
	movq	8(%rsp), %r8
	movq	%r8, 8(%rbx)
	movq	24(%rsp), %rsi
	call	recog
	testl	%eax, %eax
	js	.L29029
	movb	$1, direct_store(%rbp)
	jmp	.L29029
.LFE24:
.Lfe24:
	.size	init_expr_once,.Lfe24-init_expr_once
	.align 2
	.p2align 4,,15
.globl init_expr
	.type	init_expr,@function
init_expr:
.LFB25:
	pushq	%rbx
.LCFI127:
	movl	$48, %edi
	movq	cfun(%rip), %rbx
	call	xmalloc
	movq	cfun(%rip), %rcx
	movq	%rax, 16(%rbx)
	movq	16(%rcx), %rdx
	movq	$0, 40(%rdx)
	movl	$0, (%rdx)
	movl	$0, 8(%rdx)
	movl	$0, 4(%rdx)
	movq	$0, 16(%rdx)
	movq	$0, 24(%rdx)
	movq	$0, 32(%rdx)
	popq	%rbx
	ret
.LFE25:
.Lfe25:
	.size	init_expr,.Lfe25-init_expr
	.align 2
	.p2align 4,,15
.globl mark_expr_status
	.type	mark_expr_status,@function
mark_expr_status:
.LFB26:
	subq	$24, %rsp
.LCFI128:
	testq	%rdi, %rdi
	movq	%rbp, 16(%rsp)
.LCFI129:
	movq	%rbx, 8(%rsp)
.LCFI130:
	movq	%rdi, %rbp
	je	.L29044
	movq	16(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L29046
	movq	%rbx, %rdi
	call	ggc_set_mark
	testl	%eax, %eax
	je	.L29052
.L29046:
	movq	24(%rbp), %rbx
	testq	%rbx, %rbx
	je	.L29048
	movq	%rbx, %rdi
	call	ggc_set_mark
	testl	%eax, %eax
	je	.L29053
.L29048:
	movq	32(%rbp), %rbx
	testq	%rbx, %rbx
	je	.L29044
	movq	%rbx, %rdi
	call	ggc_set_mark
	testl	%eax, %eax
	je	.L29054
.L29044:
	movq	8(%rsp), %rbx
	movq	16(%rsp), %rbp
	addq	$24, %rsp
	ret
	.p2align 6,,7
.L29054:
	movq	%rbx, %rdi
	movq	16(%rsp), %rbp
	movq	8(%rsp), %rbx
	addq	$24, %rsp
	jmp	ggc_mark_rtx_children
	.p2align 6,,7
.L29053:
	movq	%rbx, %rdi
	call	ggc_mark_rtx_children
	jmp	.L29048
	.p2align 6,,7
.L29052:
	movq	%rbx, %rdi
	call	ggc_mark_rtx_children
	jmp	.L29046
.LFE26:
.Lfe26:
	.size	mark_expr_status,.Lfe26-mark_expr_status
	.align 2
	.p2align 4,,15
.globl free_expr_status
	.type	free_expr_status,@function
free_expr_status:
.LFB27:
	pushq	%rbx
.LCFI131:
	movq	%rdi, %rbx
	movq	16(%rdi), %rdi
	call	free
	movq	$0, 16(%rbx)
	popq	%rbx
	ret
.LFE27:
.Lfe27:
	.size	free_expr_status,.Lfe27-free_expr_status
	.section	.rodata.str1.1
.LC23:
	.string	"finish_expr_for_function"
	.text
	.align 2
	.p2align 4,,15
.globl finish_expr_for_function
	.type	finish_expr_for_function,@function
finish_expr_for_function:
.LFB28:
	subq	$8, %rsp
.LCFI132:
	movq	cfun(%rip), %rcx
	movq	16(%rcx), %rdx
	cmpq	$0, 40(%rdx)
	jne	.L29058
	addq	$8, %rsp
	ret
.L29058:
	movl	$.LC0, %edi
	movl	$313, %esi
	movl	$.LC23, %edx
	call	fancy_abort
.LFE28:
.Lfe28:
	.size	finish_expr_for_function,.Lfe28-finish_expr_for_function
	.align 2
	.p2align 4,,15
.globl protect_from_queue
	.type	protect_from_queue,@function
protect_from_queue:
.LFB29:
	subq	$24, %rsp
.LCFI133:
	movq	%rbx, (%rsp)
.LCFI134:
	movq	%rbp, 8(%rsp)
.LCFI135:
	movq	%r12, 16(%rsp)
.LCFI136:
	movzwl	(%rdi), %eax
	movq	%rdi, %rbx
	cmpl	$71, %eax
	je	.L29061
	cmpl	$66, %eax
	je	.L29074
.L29064:
	cmpl	$75, %eax
	je	.L29069
	cmpl	$78, %eax
	je	.L29069
.L29060:
	movq	%rbx, %rax
	movq	8(%rsp), %rbp
	movq	16(%rsp), %r12
	movq	(%rsp), %rbx
	addq	$24, %rsp
	ret
	.p2align 6,,7
.L29069:
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbx), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%rbx), %r12
	movq	%rax, %rbp
	je	.L29075
.L29071:
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%r12, 8(%rax)
	movq	%rbp, 16(%rax)
	jmp	.L29060
.L29075:
	cmpq	16(%rbx), %rax
	jne	.L29071
	jmp	.L29060
	.p2align 6,,7
.L29074:
	cmpb	$51, 2(%rdi)
	je	.L29062
	movq	8(%rdi), %rbp
	cmpw	$71, (%rbp)
	je	.L29076
.L29062:
	cmpl	$66, %eax
	jne	.L29064
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%rbx), %rax
	movq	%rax, %rbp
	je	.L29060
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	movq	%rbp, 8(%rax)
	jmp	.L29060
.L29076:
	testl	%esi, %esi
	jne	.L29062
	movq	8(%rbp), %rsi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%rbp)
	movq	%rax, %r12
	je	.L29063
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L29060
.L29063:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	8(%rsp), %rbp
	movq	(%rsp), %rbx
	movq	%r12, %rdi
	movq	%rax, %rsi
	movq	16(%rsp), %r12
	addq	$24, %rsp
	jmp	replace_equiv_address
	.p2align 6,,7
.L29061:
	cmpq	$0, 16(%rdi)
	je	.L29077
	movq	24(%rdi), %rdi
	testq	%rdi, %rdi
	je	.L29073
	movq	%rdi, %rbx
	jmp	.L29060
.L29073:
	movq	8(%rbx), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%rbx), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	16(%rbx), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbx), %rbx
	jmp	.L29060
.L29077:
	movq	8(%rdi), %rdi
	movq	(%rsp), %rbx
	movq	8(%rsp), %rbp
	movq	16(%rsp), %r12
	addq	$24, %rsp
	jmp	copy_to_reg
.LFE29:
.Lfe29:
	.size	protect_from_queue,.Lfe29-protect_from_queue
	.align 2
	.p2align 4,,15
.globl queued_subexp_p
	.type	queued_subexp_p,@function
queued_subexp_p:
.LFB30:
	subq	$16, %rsp
.LCFI137:
	movq	%rbx, (%rsp)
.LCFI138:
	movq	%rbp, 8(%rsp)
.LCFI139:
	movq	%rdi, %rbx
.L29082:
	movzwl	(%rbx), %eax
	subl	$66, %eax
	cmpl	$12, %eax
	ja	.L29088
	mov	%eax, %edx
	jmp	*.L29089(,%rdx,8)
	.section	.rodata
	.align 8
	.align 4
.L29089:
	.quad	.L29081
	.quad	.L29088
	.quad	.L29088
	.quad	.L29088
	.quad	.L29088
	.quad	.L29087
	.quad	.L29088
	.quad	.L29088
	.quad	.L29088
	.quad	.L29085
	.quad	.L29085
	.quad	.L29088
	.quad	.L29085
	.text
	.p2align 6,,7
.L29081:
	movq	8(%rbx), %rbx
	jmp	.L29082
	.p2align 6,,7
.L29087:
	movl	$1, %ebp
.L29078:
	movl	%ebp, %eax
	movq	(%rsp), %rbx
	movq	8(%rsp), %rbp
	addq	$16, %rsp
	ret
	.p2align 6,,7
.L29088:
	xorl	%ebp, %ebp
	jmp	.L29078
	.p2align 6,,7
.L29085:
	movq	8(%rbx), %rdi
	xorl	%ebp, %ebp
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L29087
	movq	16(%rbx), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L29087
	jmp	.L29078
.LFE30:
.Lfe30:
	.size	queued_subexp_p,.Lfe30-queued_subexp_p
	.align 2
	.p2align 4,,15
.globl emit_queue
	.type	emit_queue,@function
emit_queue:
.LFB31:
	movq	cfun(%rip), %rcx
	pushq	%rbx
.LCFI140:
	movq	16(%rcx), %rdx
	movq	40(%rdx), %rbx
	testq	%rbx, %rbx
	je	.L29098
	.p2align 4,,7
.L29096:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L29099
	call	emit_insn
	movq	%rax, 16(%rbx)
.L29095:
	movq	cfun(%rip), %r9
	movq	40(%rbx), %rdi
	movq	16(%r9), %r8
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%r8)
	jne	.L29096
.L29098:
	popq	%rbx
	ret
	.p2align 6,,7
.L29099:
	movq	8(%rdi), %rsi
	movq	8(%rsi), %rdx
	movq	%rdx, 16(%rbx)
	call	emit_insn
	jmp	.L29095
.LFE31:
.Lfe31:
	.size	emit_queue,.Lfe31-emit_queue
	.align 2
	.p2align 4,,15
.globl move_by_pieces
	.type	move_by_pieces,@function
move_by_pieces:
.LFB32:
	pushq	%r15
.LCFI141:
	pushq	%r14
.LCFI142:
	pushq	%r13
.LCFI143:
	pushq	%r12
.LCFI144:
	movq	%rdx, %r12
	pushq	%rbp
.LCFI145:
	pushq	%rbx
.LCFI146:
	subq	$120, %rsp
.LCFI147:
	testb	$2, target_flags+3(%rip)
	movq	8(%rsi), %r8
	setne	%cl
	movq	$0, 88(%rsp)
	xorl	%r14d, %r14d
	testq	%rdi, %rdi
	movq	%r8, 64(%rsp)
	movzbl	%cl, %edx
	leal	5(,%rdx,4), %ebp
	je	.L29103
	movq	8(%rdi), %r15
	xorl	%ecx, %ecx
	movq	%rdi, 32(%rsp)
	movzwl	(%r15), %edx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L29105
	cmpw	$99, %dx
	je	.L29105
	cmpw	$98, %dx
	je	.L29105
.L29104:
	movl	%ecx, 48(%rsp)
	xorl	%edx, %edx
	movzwl	(%r15), %eax
	cmpw	$96, %ax
	je	.L29107
	cmpw	$98, %ax
	je	.L29107
.L29106:
	movl	%edx, 96(%rsp)
.L29108:
	movq	%rsi, 56(%rsp)
	movq	%r15, 40(%rsp)
	xorl	%ecx, %ecx
	movzwl	(%r8), %edx
	leal	-96(%rdx), %esi
	cmpw	$1, %si
	jbe	.L29110
	cmpw	$99, %dx
	je	.L29110
	cmpw	$98, %dx
	je	.L29110
.L29109:
	movl	96(%rsp), %eax
	movl	%ecx, 72(%rsp)
	movl	$0, 76(%rsp)
	movl	$0, 52(%rsp)
	testl	%eax, %eax
	je	.L29111
	movq	%r12, 88(%rsp)
.L29111:
	movl	72(%rsp), %eax
	movq	%r12, 80(%rsp)
	testl	%eax, %eax
	je	.L29113
	movl	48(%rsp), %eax
	testl	%eax, %eax
	jne	.L29112
.L29113:
	xorl	%r13d, %r13d
	movl	$17, %esi
	.p2align 4,,7
.L29126:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L29200
	.p2align 4,,7
.L29123:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L29123
.L29200:
	testl	%edi, %edi
	je	.L29116
	movslq	%edi,%rbx
	movq	%rbx, %r10
	salq	$4, %r10
	addq	optab_table+240(%rip), %r10
	cmpl	$1317, 8(%r10)
	je	.L29125
	movq	%r8, 8(%rsp)
	call	get_mode_alignment
	movq	8(%rsp), %r8
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L29125
	movzbq	mode_size(%rbx), %rcx
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rcx
	addq	%rax, %r13
	movq	%rdx, %r12
.L29125:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L29126
.L29116:
	testq	%r12, %r12
	jne	.L29213
	cmpq	$2, %r13
	jbe	.L29112
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L29202
.L29134:
	movslq	%ecx,%r13
	movzbl	mode_size(%r13), %ebx
	cmpl	%ebp, %ebx
	cmovb	%ecx, %r14d
	movzbl	mode_wider_mode(%r13), %ecx
	testl	%ecx, %ecx
	jne	.L29134
.L29202:
	movl	72(%rsp), %eax
	testl	%eax, %eax
	jne	.L29140
	movzwl	(%r8), %edx
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L29138
	cmpw	$54, %dx
	je	.L29138
	cmpw	$55, %dx
	je	.L29138
	cmpw	$58, %dx
	je	.L29138
	cmpw	$134, %dx
	je	.L29138
	cmpw	$56, %dx
	je	.L29138
	cmpw	$140, %dx
	je	.L29138
.L29140:
	movl	48(%rsp), %eax
	testl	%eax, %eax
	jne	.L29112
	movzwl	(%r15), %edx
	leal	-67(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L29142
	cmpw	$54, %dx
	je	.L29142
	cmpw	$55, %dx
	je	.L29142
	cmpw	$58, %dx
	je	.L29142
	cmpw	$134, %dx
	je	.L29142
	cmpw	$56, %dx
	je	.L29142
	cmpw	$140, %dx
	je	.L29142
.L29112:
	cmpl	$1, %ebp
	jbe	.L29145
	.p2align 4,,7
.L29196:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L29205
	.p2align 4,,7
.L29152:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %r9d
	cmpl	%ebp, %r9d
	cmovb	%ecx, %r14d
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L29152
.L29205:
	testl	%r14d, %r14d
	je	.L29145
	movslq	%r14d,%r12
	movq	%r12, %rbp
	salq	$4, %rbp
	addq	optab_table+240(%rip), %rbp
	movl	8(%rbp), %ebx
	cmpl	$1317, %ebx
	je	.L29154
	movl	%r14d, %edi
	call	get_mode_alignment
	movl	$128, %r10d
	cmpl	%eax, %r10d
	jb	.L29154
	movslq	%ebx,%r11
	leaq	32(%rsp), %rbp
	movq	$0, 16(%rsp)
	leaq	(%r11,%r11,4), %rdi
	movq	insn_data+16(,%rdi,8), %rdx
	movq	%rdx, 24(%rsp)
	movzbq	mode_size(%r12), %rdx
	cmpq	%rdx, 80(%rsp)
	movq	%rdx, %r15
	jb	.L29154
	movl	96(%rsp), %ecx
	.p2align 4,,7
.L29194:
	testl	%ecx, %ecx
	je	.L29158
	subq	%rdx, 56(%rbp)
.L29158:
	movq	(%rbp), %rdi
	testq	%rdi, %rdi
	je	.L29159
	movl	16(%rbp), %eax
	testl	%eax, %eax
	je	.L29160
	movq	8(%rbp), %rdx
	movq	56(%rbp), %rcx
	movl	%r14d, %esi
	movl	$1, %r8d
	call	adjust_automodify_address_1
.L29207:
	movq	%rax, 16(%rsp)
.L29159:
	movl	40(%rbp), %ecx
	testl	%ecx, %ecx
	je	.L29162
	movq	24(%rbp), %rdi
	movq	32(%rbp), %rdx
	movl	%r14d, %esi
	movq	56(%rbp), %rcx
	movl	$1, %r8d
	call	adjust_automodify_address_1
.L29208:
	cmpq	$0, (%rbp)
	movq	%rax, %r13
	jne	.L29214
	movl	target_flags(%rip), %ecx
	testl	$33554432, %ecx
	je	.L29168
	movzbl	mode_size(%r12), %ebx
	leal	7(%rbx), %edx
	andl	$-8, %edx
.L29169:
	movq	cfun(%rip), %r9
	andl	$33554432, %ecx
	movq	16(%r9), %r8
	leaq	8(%r8), %rdi
	movl	8(%r8), %esi
	je	.L29170
	movzbl	mode_size(%r12), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L29209:
	movq	%r12, %r10
	leal	(%rax,%rsi), %r11d
	salq	$4, %r10
	movl	%r11d, (%rdi)
	addq	optab_table+384(%rip), %r10
	movl	8(%r10), %eax
	cmpl	$1317, %eax
	je	.L29172
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rdi
	movq	insn_data+24(,%rdi,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L29173
	movq	%r13, %rdi
	movl	%r14d, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L29215
.L29173:
	leaq	(%rbx,%rbx,4), %rcx
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%rcx,8)
.L29211:
	movq	%rax, %rdi
	call	emit_insn
.L29192:
	movl	64(%rbp), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L29193
	addq	%r15, 56(%rbp)
.L29193:
	movq	48(%rbp), %r13
	movq	%r15, %rdx
	subq	%r15, %r13
	cmpq	%r15, %r13
	movq	%r13, 48(%rbp)
	jae	.L29194
	.p2align 4,,7
.L29154:
	movzbl	mode_size(%r12), %ebp
	cmpl	$1, %ebp
	ja	.L29196
.L29145:
	cmpq	$0, 80(%rsp)
	jne	.L29216
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L29216:
	movl	$.LC0, %edi
	movl	$1503, %esi
	movl	$.LC10, %edx
.L29212:
	call	fancy_abort
	.p2align 6,,7
.L29215:
	movq	%r13, %rsi
	movl	%r14d, %edi
	call	force_reg
	movq	%rax, %r13
	jmp	.L29173
.L29172:
	movzbl	mode_size(%r12), %ebx
	cmpl	%edx, %ebx
	je	.L29217
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r9b
	movzbl	%r9b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r8b
	movzbl	%r8b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L29210:
	movq	%rax, %rsi
	movl	%r14d, %edi
	call	gen_rtx_MEM
	xorl	%esi, %esi
	testq	%rsi, %rsi
	movq	%rax, %rbx
	je	.L29189
	xorl	%esi, %esi
	movq	%rax, %rdi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %r10d
	testl	%r10d, %r10d
	jne	.L29218
.L29189:
	movq	%rbx, %rdi
	movq	%r13, %rsi
	call	emit_move_insn
	jmp	.L29192
.L29218:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L29189
.L29217:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L29210
.L29170:
	movzbl	mode_size(%r12), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L29209
.L29168:
	movzbl	mode_size(%r12), %esi
	leal	1(%rsi), %edx
	andl	$-2, %edx
	jmp	.L29169
.L29214:
	movq	%rax, %rsi
	movq	16(%rsp), %rdi
	xorl	%eax, %eax
	call	*24(%rsp)
	jmp	.L29211
	.p2align 6,,7
.L29162:
	movq	24(%rbp), %rdi
	movq	56(%rbp), %rdx
	movl	%r14d, %esi
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L29208
.L29160:
	movq	56(%rbp), %rdx
	movl	%r14d, %esi
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L29207
.L29142:
	movq	%r15, %rdi
	call	copy_addr_to_reg
	movq	%rax, 40(%rsp)
	jmp	.L29112
.L29138:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, 64(%rsp)
	jmp	.L29140
.L29213:
	movl	$.LC0, %edi
	movl	$1542, %esi
	movl	$.LC5, %edx
	jmp	.L29212
	.p2align 6,,7
.L29110:
	movl	$1, %ecx
	jmp	.L29109
.L29107:
	movl	$1, %edx
	jmp	.L29106
.L29105:
	movl	$1, %ecx
	jmp	.L29104
.L29103:
	xorl	%r15d, %r15d
	movq	$0, 32(%rsp)
	movl	$1, 48(%rsp)
	movl	$1, 96(%rsp)
	jmp	.L29108
.LFE32:
.Lfe32:
	.size	move_by_pieces,.Lfe32-move_by_pieces
	.align 2
	.p2align 4,,15
.globl emit_block_move
	.type	emit_block_move,@function
emit_block_move:
.LFB33:
	pushq	%r15
.LCFI148:
	movq	%rdx, %r15
	movl	$8, %edx
	pushq	%r14
.LCFI149:
	pushq	%r13
.LCFI150:
	pushq	%r12
.LCFI151:
	pushq	%rbp
.LCFI152:
	pushq	%rbx
.LCFI153:
	subq	$168, %rsp
.LCFI154:
	movq	%rdi, 48(%rsp)
	movq	%rsi, 40(%rsp)
	movq	$0, 24(%rsp)
	movq	16(%rdi), %rcx
	testq	%rcx, %rcx
	je	.L29279
	movl	32(%rcx), %edx
.L29279:
	movq	40(%rsp), %rsi
	movq	16(%rsi), %rax
	testq	%rax, %rax
	je	.L29280
	cmpl	32(%rax), %edx
	jb	.L29281
.L29276:
	testq	%rax, %rax
	movl	$8, %r14d
	je	.L29277
	movl	32(%rax), %r14d
.L29277:
	movq	48(%rsp), %rax
	cmpb	$51, 2(%rax)
	jne	.L29502
	movq	40(%rsp), %rdx
	cmpb	$51, 2(%rdx)
	jne	.L29503
	movq	48(%rsp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$71, %eax
	je	.L29288
	cmpl	$66, %eax
	je	.L29504
.L29292:
	cmpl	$75, %eax
	je	.L29296
	cmpl	$78, %eax
	je	.L29296
.L29291:
	movq	40(%rsp), %rsi
	movzwl	(%rsi), %eax
	cmpl	$71, %eax
	je	.L29301
	cmpl	$66, %eax
	je	.L29505
.L29305:
	cmpl	$75, %eax
	je	.L29309
	cmpl	$78, %eax
	je	.L29309
.L29304:
	movzwl	(%r15), %eax
	cmpl	$71, %eax
	je	.L29314
	cmpl	$66, %eax
	je	.L29506
.L29318:
	cmpl	$75, %eax
	je	.L29322
	cmpl	$78, %eax
	je	.L29322
.L29317:
	movq	48(%rsp), %rdx
	cmpw	$66, (%rdx)
	jne	.L29507
	movq	40(%rsp), %rcx
	cmpw	$66, (%rcx)
	jne	.L29508
	testq	%r15, %r15
	je	.L29509
	cmpw	$54, (%r15)
	je	.L29510
.L29330:
	shrl	$3, %r14d
	xorl	%edi, %edi
	mov	%r14d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %ebx
	movl	$1, volatile_ok(%rip)
	movq	%rax, 64(%rsp)
	testl	%ebx, %ebx
	je	.L29486
	.p2align 4,,7
.L29462:
	movslq	%ebx,%r12
	movl	movstr_optab(,%r12,4), %edx
	cmpl	$1317, %edx
	je	.L29449
	cmpw	$54, (%r15)
	je	.L29511
.L29453:
	testb	$2, target_flags+3(%rip)
	je	.L29454
	cmpw	$63, mode_bitsize(%r12,%r12)
.L29495:
	jbe	.L29449
.L29452:
	movslq	%edx,%r13
	leaq	(%r13,%r13,4), %rcx
	movq	insn_data+24(,%rcx,8), %rbp
	movq	(%rbp), %rax
	testq	%rax, %rax
	je	.L29456
	movq	48(%rsp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L29449
.L29456:
	movq	24(%rbp), %rax
	testq	%rax, %rax
	jne	.L29512
.L29457:
	movq	72(%rbp), %rax
	testq	%rax, %rax
	je	.L29458
	xorl	%esi, %esi
	movq	64(%rsp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L29449
.L29458:
	call	get_last_insn
	movl	$1, %edx
	movq	%r15, %rsi
	movl	%ebx, %edi
	movq	%rax, 56(%rsp)
	call	convert_to_mode
	movq	%rax, %r14
	movq	48(%rbp), %rax
	testq	%rax, %rax
	jne	.L29513
.L29459:
	leaq	(%r13,%r13,4), %rbp
	xorl	%eax, %eax
	movq	48(%rsp), %rdi
	movq	40(%rsp), %rsi
	movq	%r14, %rdx
	movq	64(%rsp), %rcx
	call	*insn_data+16(,%rbp,8)
	testq	%rax, %rax
	jne	.L29487
	movq	56(%rsp), %rdi
	call	delete_insns_since
.L29449:
	movzbl	mode_wider_mode(%r12), %ebx
	testl	%ebx, %ebx
	jne	.L29462
.L29486:
	testb	$2, target_flags+3(%rip)
	movq	48(%rsp), %r9
	movl	$0, volatile_ok(%rip)
	setne	%al
	movq	8(%r9), %rsi
	movzbl	%al, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	40(%rsp), %rbx
	testb	$2, target_flags+3(%rip)
	setne	%sil
	movq	%rax, %rbp
	movzbl	%sil, %edi
	movq	8(%rbx), %rsi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%r15, %rsi
	movq	sizetype_tab(%rip), %rdx
	movq	%rax, %rbx
	movzbl	61(%rdx), %r12d
	shrb	$1, %r12b
	movzbl	%r12b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.1(%rip)
	movq	%rax, %r13
	je	.L29514
.L29471:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%rbp, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %r14
	call	build_pointer_type
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r13, %rsi
	movq	%rax, (%r14)
	movq	%rax, %r15
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.1(%rip), %rcx
	movq	%rax, (%r15)
	movq	(%r14), %rdx
	movq	8(%rcx), %rdi
	movq	(%rdx), %r12
	movq	$0, (%r12)
	call	build_pointer_type
	movq	fn.1(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	movq	%r14, %rcx
	movl	$53, %edi
	movq	fn.1(%rip), %r13
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%r13), %r8
	movq	8(%r8), %rsi
	xorl	%r8d, %r8d
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%rbp)
	movq	%rax, 24(%rsp)
	jne	.L29515
.L29446:
	movq	24(%rsp), %rax
.L29275:
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L29515:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%rbp, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L29446
.L29514:
	movl	$.LC11, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.1(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.1(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.1, %edi
	movq	%rax, fn.1(%rip)
	call	ggc_add_tree_root
	movq	fn.1(%rip), %r11
	xorl	%esi, %esi
	orb	$1, 49(%r11)
	movq	fn.1(%rip), %r10
	orb	$8, 18(%r10)
	movq	fn.1(%rip), %rdi
	orb	$64, 50(%rdi)
	movq	fn.1(%rip), %r15
	orb	$2, 18(%r15)
	movq	fn.1(%rip), %rdi
	call	make_decl_rtl
	movq	fn.1(%rip), %rdi
	call	assemble_external
	jmp	.L29471
.L29487:
	movq	%rax, %rdi
	call	emit_insn
	xorl	%eax, %eax
	movl	$0, volatile_ok(%rip)
	jmp	.L29275
.L29513:
	movq	%r14, %rdi
	movl	%ebx, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L29459
	movq	%r14, %rsi
	movl	%ebx, %edi
	call	copy_to_mode_reg
	movq	%rax, %r14
	jmp	.L29459
.L29512:
	movq	40(%rsp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L29449
	jmp	.L29457
.L29454:
	cmpw	$31, mode_bitsize(%r12,%r12)
	jmp	.L29495
.L29511:
	movq	mode_mask_array(,%r12,8), %r14
	shrq	$1, %r14
	cmpq	%r14, 8(%r15)
	jbe	.L29452
	jmp	.L29453
.L29510:
	movq	8(%r15), %rbp
	xorl	%r12d, %r12d
	movl	$17, %esi
	movl	$128, %r13d
	.p2align 4,,7
.L29343:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L29475
	.p2align 4,,7
.L29340:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %r8
	cmpq	%rsi, %r8
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L29340
.L29475:
	testl	%edi, %edi
	je	.L29333
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L29342
	call	get_mode_alignment
	cmpl	%eax, %r13d
	jb	.L29342
	movzbq	mode_size(%rbx), %r9
	movq	%rbp, %rax
	xorl	%edx, %edx
	divq	%r9
	addq	%rax, %r12
	movq	%rdx, %rbp
.L29342:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L29343
.L29333:
	testq	%rbp, %rbp
	jne	.L29501
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L29346
	movq	ix86_cost(%rip), %r11
	mov	40(%r11), %r10d
	cmpq	%r10, %r12
	jae	.L29330
.L29347:
	movq	40(%rsp), %rdx
	testb	$2, target_flags+3(%rip)
	movq	8(%r15), %r12
	movq	48(%rsp), %rcx
	setne	%r15b
	movq	8(%rdx), %r8
	movq	$0, 136(%rsp)
	movzbl	%r15b, %r14d
	movq	%r8, 112(%rsp)
	movq	8(%rcx), %r15
	movq	%rcx, 80(%rsp)
	leal	5(,%r14,4), %ebp
	xorl	%ecx, %ecx
	xorl	%r14d, %r14d
	movzwl	(%r15), %edx
	leal	-96(%rdx), %r13d
	cmpw	$1, %r13w
	jbe	.L29352
	cmpw	$99, %dx
	je	.L29352
	cmpw	$98, %dx
	je	.L29352
.L29351:
	movl	%ecx, 96(%rsp)
	xorl	%edx, %edx
	movzwl	(%r15), %eax
	cmpw	$96, %ax
	je	.L29354
	cmpw	$98, %ax
	je	.L29354
.L29353:
	movq	40(%rsp), %rsi
	movl	%edx, 144(%rsp)
	movq	%r15, 88(%rsp)
	xorl	%ecx, %ecx
	movq	%rsi, 104(%rsp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L29357
	cmpw	$99, %dx
	je	.L29357
	cmpw	$98, %dx
	je	.L29357
.L29356:
	movl	144(%rsp), %edi
	movl	%ecx, 120(%rsp)
	movl	$0, 124(%rsp)
	movl	$0, 100(%rsp)
	testl	%edi, %edi
	je	.L29358
	movq	%r12, 136(%rsp)
.L29358:
	movl	120(%rsp), %r9d
	movq	%r12, 128(%rsp)
	testl	%r9d, %r9d
	je	.L29360
	movl	96(%rsp), %eax
	testl	%eax, %eax
	jne	.L29359
.L29360:
	xorl	%r13d, %r13d
	movl	$17, %esi
.L29373:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L29478
	.p2align 4,,7
.L29370:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %r11
	cmpq	%rsi, %r11
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L29370
.L29478:
	testl	%edi, %edi
	je	.L29363
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L29372
	movq	%r8, 8(%rsp)
	call	get_mode_alignment
	movl	$128, %r8d
	cmpl	%eax, %r8d
	movq	8(%rsp), %r8
	jb	.L29372
	movzbq	mode_size(%rbx), %rsi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r13
	movq	%rdx, %r12
.L29372:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L29373
.L29363:
	testq	%r12, %r12
	jne	.L29501
	cmpq	$2, %r13
	jbe	.L29359
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L29480
.L29381:
	movslq	%ecx,%r13
	movzbl	mode_size(%r13), %edx
	cmpl	%ebp, %edx
	cmovb	%ecx, %r14d
	movzbl	mode_wider_mode(%r13), %ecx
	testl	%ecx, %ecx
	jne	.L29381
.L29480:
	movl	120(%rsp), %ebx
	testl	%ebx, %ebx
	jne	.L29387
	movzwl	(%r8), %edx
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L29385
	cmpw	$54, %dx
	je	.L29385
	cmpw	$55, %dx
	je	.L29385
	cmpw	$58, %dx
	je	.L29385
	cmpw	$134, %dx
	je	.L29385
	cmpw	$56, %dx
	je	.L29385
	cmpw	$140, %dx
	je	.L29385
.L29387:
	movl	96(%rsp), %eax
	testl	%eax, %eax
	jne	.L29359
	movzwl	(%r15), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L29389
	cmpw	$54, %dx
	je	.L29389
	cmpw	$55, %dx
	je	.L29389
	cmpw	$58, %dx
	je	.L29389
	cmpw	$134, %dx
	je	.L29389
	cmpw	$56, %dx
	je	.L29389
	cmpw	$140, %dx
	je	.L29389
.L29359:
	cmpl	$1, %ebp
	jbe	.L29392
.L29443:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L29483
	.p2align 4,,7
.L29399:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %r11d
	cmpl	%ebp, %r11d
	cmovb	%ecx, %r14d
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L29399
.L29483:
	testl	%r14d, %r14d
	je	.L29392
	movslq	%r14d,%r12
	movq	%r12, %rbp
	salq	$4, %rbp
	addq	optab_table+240(%rip), %rbp
	movl	8(%rbp), %ebx
	cmpl	$1317, %ebx
	je	.L29401
	movl	%r14d, %edi
	call	get_mode_alignment
	movl	$128, %ecx
	cmpl	%eax, %ecx
	jb	.L29401
	movzbq	mode_size(%r12), %rdx
	movslq	%ebx,%rsi
	leaq	80(%rsp), %rbp
	leaq	(%rsi,%rsi,4), %rdi
	cmpq	%rdx, 128(%rsp)
	movq	$0, 32(%rsp)
	movq	insn_data+16(,%rdi,8), %r8
	movq	%rdx, %r15
	movq	%r8, 72(%rsp)
	jb	.L29401
	movl	144(%rsp), %ecx
.L29441:
	testl	%ecx, %ecx
	je	.L29405
	subq	%rdx, 56(%rbp)
.L29405:
	movq	(%rbp), %rdi
	testq	%rdi, %rdi
	je	.L29406
	movl	16(%rbp), %r13d
	testl	%r13d, %r13d
	je	.L29407
	movq	8(%rbp), %rdx
	movq	56(%rbp), %rcx
	movl	%r14d, %esi
	movl	$1, %r8d
	call	adjust_automodify_address_1
.L29490:
	movq	%rax, 32(%rsp)
.L29406:
	movl	40(%rbp), %ebx
	testl	%ebx, %ebx
	je	.L29409
	movq	24(%rbp), %rdi
	movq	32(%rbp), %rdx
	movl	%r14d, %esi
	movq	56(%rbp), %rcx
	movl	$1, %r8d
	call	adjust_automodify_address_1
.L29491:
	cmpq	$0, (%rbp)
	movq	%rax, %r13
	jne	.L29516
	movl	target_flags(%rip), %ecx
	testl	$33554432, %ecx
	je	.L29415
	movzbl	mode_size(%r12), %r9d
	leal	7(%r9), %edx
	andl	$-8, %edx
.L29416:
	movq	cfun(%rip), %r8
	andl	$33554432, %ecx
	movq	16(%r8), %r11
	leaq	8(%r11), %rdi
	movl	8(%r11), %esi
	je	.L29417
	movzbl	mode_size(%r12), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L29492:
	movq	%r12, %rcx
	leal	(%rax,%rsi), %ebx
	salq	$4, %rcx
	movl	%ebx, (%rdi)
	addq	optab_table+384(%rip), %rcx
	movl	8(%rcx), %eax
	cmpl	$1317, %eax
	je	.L29419
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rdi
	movq	insn_data+24(,%rdi,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L29420
	movq	%r13, %rdi
	movl	%r14d, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L29517
.L29420:
	leaq	(%rbx,%rbx,4), %rsi
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%rsi,8)
.L29494:
	movq	%rax, %rdi
	call	emit_insn
.L29439:
	movl	64(%rbp), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L29440
	addq	%r15, 56(%rbp)
.L29440:
	movq	48(%rbp), %r13
	movq	%r15, %rdx
	subq	%r15, %r13
	cmpq	%r15, %r13
	movq	%r13, 48(%rbp)
	jae	.L29441
.L29401:
	movzbl	mode_size(%r12), %ebp
	cmpl	$1, %ebp
	ja	.L29443
.L29392:
	cmpq	$0, 128(%rsp)
	je	.L29446
	movl	$.LC0, %edi
	movl	$1503, %esi
	movl	$.LC10, %edx
.L29496:
	call	fancy_abort
.L29517:
	movq	%r13, %rsi
	movl	%r14d, %edi
	call	force_reg
	movq	%rax, %r13
	jmp	.L29420
.L29419:
	movzbl	mode_size(%r12), %r9d
	cmpl	%edx, %r9d
	je	.L29518
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r11b
	movzbl	%r11b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r10b
	movzbl	%r10b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L29493:
	movq	%rax, %rsi
	movl	%r14d, %edi
	call	gen_rtx_MEM
	xorl	%r8d, %r8d
	testq	%r8, %r8
	movq	%rax, %rbx
	je	.L29436
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L29519
.L29436:
	movq	%rbx, %rdi
	movq	%r13, %rsi
	call	emit_move_insn
	jmp	.L29439
.L29519:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L29436
.L29518:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L29493
.L29417:
	movzbl	mode_size(%r12), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L29492
.L29415:
	movzbl	mode_size(%r12), %r10d
	leal	1(%r10), %edx
	andl	$-2, %edx
	jmp	.L29416
.L29516:
	movq	%rax, %rsi
	movq	32(%rsp), %rdi
	xorl	%eax, %eax
	call	*72(%rsp)
	jmp	.L29494
.L29409:
	movq	24(%rbp), %rdi
	movq	56(%rbp), %rdx
	movl	%r14d, %esi
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L29491
.L29407:
	movq	56(%rbp), %rdx
	movl	%r14d, %esi
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L29490
.L29389:
	movq	%r15, %rdi
	call	copy_addr_to_reg
	movq	%rax, 88(%rsp)
	jmp	.L29359
.L29385:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, 112(%rsp)
	jmp	.L29387
.L29501:
	movl	$.LC0, %edi
	movl	$1542, %esi
	movl	$.LC5, %edx
	jmp	.L29496
	.p2align 6,,7
.L29357:
	movl	$1, %ecx
	jmp	.L29356
.L29354:
	movl	$1, %edx
	jmp	.L29353
.L29352:
	movl	$1, %ecx
	jmp	.L29351
.L29346:
	cmpq	$2, %r12
	ja	.L29330
	jmp	.L29347
.L29509:
	movl	$.LC0, %edi
	movl	$1648, %esi
.L29500:
	movl	$.LC9, %edx
	jmp	.L29496
.L29508:
	movl	$.LC0, %edi
	movl	$1646, %esi
	jmp	.L29500
.L29507:
	movl	$.LC0, %edi
	movl	$1644, %esi
	jmp	.L29500
	.p2align 6,,7
.L29322:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, %rbp
	call	protect_from_queue
	cmpq	8(%r15), %rbp
	movq	%rax, %rbx
	je	.L29520
.L29324:
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, %r15
	movq	%rbp, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L29317
.L29520:
	cmpq	16(%r15), %rax
	jne	.L29324
	jmp	.L29317
	.p2align 6,,7
.L29506:
	cmpb	$51, 2(%r15)
	je	.L29315
	movq	8(%r15), %rbx
	cmpw	$71, (%rbx)
	je	.L29521
.L29315:
	cmpl	$66, %eax
	jne	.L29318
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r15), %rax
	movq	%rax, %rbx
	je	.L29317
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, %r15
	movq	%rbx, 8(%rax)
	jmp	.L29317
.L29521:
	movq	8(%rbx), %rsi
	movq	%r15, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%rbx)
	movq	%rax, %rbp
	je	.L29316
	movzbl	2(%r15), %edi
	call	gen_reg_rtx
	movq	%rbp, %rsi
	movq	%rax, %rdi
	movq	%rax, %r15
	call	gen_move_insn
	movq	16(%rbx), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L29317
.L29316:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbp, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L29489:
	movq	%rax, %r15
	jmp	.L29317
.L29314:
	cmpq	$0, 16(%r15)
	je	.L29522
	movq	24(%r15), %rdx
	testq	%rdx, %rdx
	je	.L29326
	movq	%rdx, %r15
	jmp	.L29317
.L29326:
	movq	8(%r15), %r13
	movzbl	2(%r13), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L29317
.L29522:
	movq	8(%r15), %rdi
	call	copy_to_reg
	jmp	.L29489
.L29309:
	movq	40(%rsp), %rbx
	xorl	%esi, %esi
	movq	8(%rbx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	40(%rsp), %rcx
	movq	%rax, %rbp
	movq	16(%rcx), %rdi
	call	protect_from_queue
	movq	40(%rsp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rbp
	je	.L29523
.L29311:
	movq	40(%rsp), %rdi
	call	copy_rtx
	movq	%rax, 40(%rsp)
	movq	%rbp, 8(%rax)
	movq	40(%rsp), %rsi
	movq	%rbx, 16(%rsi)
	jmp	.L29304
.L29523:
	cmpq	16(%rsi), %rax
	jne	.L29311
	jmp	.L29304
	.p2align 6,,7
.L29505:
	cmpb	$51, 2(%rsi)
	je	.L29302
	movq	8(%rsi), %rbx
	cmpw	$71, (%rbx)
	je	.L29524
.L29302:
	cmpl	$66, %eax
	jne	.L29305
	movq	40(%rsp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	movq	40(%rsp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L29304
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, 40(%rsp)
	movq	%rbx, 8(%rax)
	jmp	.L29304
.L29524:
	movq	%rsi, %rdi
	movq	8(%rbx), %rsi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%rbx)
	movq	%rax, %rbp
	je	.L29303
	movq	40(%rsp), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	%rbp, %rsi
	movq	%rax, %rdi
	movq	%rax, 40(%rsp)
	call	gen_move_insn
	movq	16(%rbx), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L29304
.L29303:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbp, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L29488:
	movq	%rax, 40(%rsp)
	jmp	.L29304
.L29301:
	movq	40(%rsp), %rdx
	cmpq	$0, 16(%rdx)
	je	.L29525
	movq	40(%rsp), %rbp
	movq	24(%rbp), %rsi
	testq	%rsi, %rsi
	je	.L29313
	movq	%rsi, 40(%rsp)
	jmp	.L29304
.L29313:
	movq	40(%rsp), %r12
	movq	8(%r12), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	40(%rsp), %r10
	movq	%rax, %rdi
	movq	8(%r10), %rsi
	movq	%rax, 24(%r10)
	call	gen_move_insn
	movq	40(%rsp), %r9
	movq	%rax, %rdi
	movq	16(%r9), %rsi
	call	emit_insn_before
	movq	40(%rsp), %rdi
	movq	24(%rdi), %r8
	movq	%r8, 40(%rsp)
	jmp	.L29304
.L29525:
	movq	8(%rdx), %rdi
	call	copy_to_reg
	jmp	.L29488
.L29296:
	movq	48(%rsp), %rbx
	xorl	%esi, %esi
	movq	8(%rbx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	48(%rsp), %rcx
	movq	%rax, %rbp
	movq	16(%rcx), %rdi
	call	protect_from_queue
	movq	48(%rsp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rbp
	je	.L29526
.L29298:
	movq	48(%rsp), %rdi
	call	copy_rtx
	movq	%rax, 48(%rsp)
	movq	%rbp, 8(%rax)
	movq	48(%rsp), %rsi
	movq	%rbx, 16(%rsi)
	jmp	.L29291
.L29526:
	cmpq	16(%rsi), %rax
	jne	.L29298
	jmp	.L29291
	.p2align 6,,7
.L29504:
	jne	.L29292
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	48(%rsp), %rsi
	movq	%rax, %rbx
	cmpq	8(%rsi), %rax
	je	.L29291
	movq	%rsi, %rdi
	call	copy_rtx
	movq	%rax, 48(%rsp)
	movq	%rbx, 8(%rax)
	jmp	.L29291
	.p2align 6,,7
.L29288:
	testq	%rcx, %rcx
	je	.L29527
	movq	48(%rsp), %r8
	movq	24(%r8), %rdi
	testq	%rdi, %rdi
	je	.L29300
	movq	%rdi, 48(%rsp)
	jmp	.L29291
.L29300:
	movq	48(%rsp), %r13
	movq	8(%r13), %r12
	movzbl	2(%r12), %edi
	call	gen_reg_rtx
	movq	48(%rsp), %r11
	movq	%rax, %rdi
	movq	8(%r11), %rsi
	movq	%rax, 24(%r11)
	call	gen_move_insn
	movq	48(%rsp), %r10
	movq	%rax, %rdi
	movq	16(%r10), %rsi
	call	emit_insn_before
	movq	48(%rsp), %r9
	movq	24(%r9), %rdi
	movq	%rdi, 48(%rsp)
	jmp	.L29291
.L29527:
	movq	48(%rsp), %rbp
	movq	8(%rbp), %rdi
	call	copy_to_reg
	movq	%rax, 48(%rsp)
	jmp	.L29291
.L29503:
	movl	$.LC0, %edi
	movl	$1637, %esi
	jmp	.L29500
.L29502:
	movl	$.LC0, %edi
	movl	$1634, %esi
	jmp	.L29500
	.p2align 6,,7
.L29281:
	testq	%rcx, %rcx
	movl	$8, %r14d
	je	.L29277
	movl	32(%rcx), %r14d
	jmp	.L29277
.L29280:
	cmpl	$7, %edx
	ja	.L29276
	jmp	.L29281
.LFE33:
.Lfe33:
	.size	emit_block_move,.Lfe33-emit_block_move
	.align 2
	.p2align 4,,15
.globl move_block_to_reg
	.type	move_block_to_reg,@function
move_block_to_reg:
.LFB34:
	pushq	%r15
.LCFI155:
	movl	%edi, %r15d
	pushq	%r14
.LCFI156:
	movq	%rsi, %r14
	pushq	%r13
.LCFI157:
	movl	%ecx, %r13d
	pushq	%r12
.LCFI158:
	movl	%edx, %r12d
	pushq	%rbp
.LCFI159:
	pushq	%rbx
.LCFI160:
	subq	$8, %rsp
.LCFI161:
	testl	%edx, %edx
	je	.L29528
	xorl	%ebp, %ebp
	cmpl	%edx, %ebp
	jl	.L29535
.L29528:
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
	.p2align 6,,7
.L29535:
	movl	word_mode(%rip), %edi
	leal	0(%rbp,%r15), %esi
	call	gen_rtx_REG
	movl	%r13d, %edx
	movl	%ebp, %esi
	movq	%r14, %rdi
	movq	%rax, %rbx
	incl	%ebp
	call	operand_subword_force
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	cmpl	%r12d, %ebp
	jl	.L29535
	jmp	.L29528
.LFE34:
.Lfe34:
	.size	move_block_to_reg,.Lfe34-move_block_to_reg
	.section	.rodata.str1.1
.LC24:
	.string	"move_block_from_reg"
	.text
	.align 2
	.p2align 4,,15
.globl move_block_from_reg
	.type	move_block_from_reg,@function
move_block_from_reg:
.LFB35:
	pushq	%r14
.LCFI162:
	testl	%edx, %edx
	movl	%edi, %r14d
	pushq	%r13
.LCFI163:
	movq	%rsi, %r13
	pushq	%r12
.LCFI164:
	movl	%edx, %r12d
	pushq	%rbp
.LCFI165:
	pushq	%rbx
.LCFI166:
	je	.L29537
	testb	$2, target_flags+3(%rip)
	je	.L29540
	cmpl	$8, %ecx
.L29555:
	jg	.L29542
	xorl	%edx, %edx
	leal	0(,%rcx,8), %edi
	movl	$1, %esi
	call	mode_for_size
	cmpl	$51, %eax
	movl	%eax, %ebp
	jne	.L29556
.L29542:
	xorl	%ebp, %ebp
	cmpl	%r12d, %ebp
	jl	.L29553
.L29537:
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	ret
	.p2align 6,,7
.L29553:
	movq	%r13, %rdi
	movl	%ebp, %esi
	movl	$1, %edx
	movl	$51, %ecx
	call	operand_subword
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L29557
	movl	word_mode(%rip), %edi
	leal	0(%rbp,%r14), %esi
	incl	%ebp
	call	gen_rtx_REG
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	cmpl	%r12d, %ebp
	jl	.L29553
	jmp	.L29537
.L29556:
	movq	%r13, %rdi
	movl	%eax, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	movl	%r14d, %esi
	movl	%ebp, %edi
	movq	%rax, %r12
	call	gen_rtx_REG
	popq	%rbx
	popq	%rbp
	movq	%r12, %rdi
	movq	%rax, %rsi
	popq	%r12
	popq	%r13
	popq	%r14
	jmp	emit_move_insn
	.p2align 6,,7
.L29540:
	cmpl	$4, %ecx
	jmp	.L29555
.L29557:
	movl	$.LC0, %edi
	movl	$1928, %esi
	movl	$.LC24, %edx
	call	fancy_abort
.LFE35:
.Lfe35:
	.size	move_block_from_reg,.Lfe35-move_block_from_reg
	.align 2
	.p2align 4,,15
.globl emit_group_load
	.type	emit_group_load,@function
emit_group_load:
.LFB36:
	pushq	%rbp
.LCFI167:
	movq	%rsp, %rbp
.LCFI168:
	pushq	%r15
.LCFI169:
	pushq	%r14
.LCFI170:
	pushq	%r13
.LCFI171:
	pushq	%r12
.LCFI172:
	pushq	%rbx
.LCFI173:
	subq	$72, %rsp
.LCFI174:
	cmpw	$39, (%rdi)
	movl	%edx, -60(%rbp)
	movq	%rdi, -48(%rbp)
	movq	%rsi, -56(%rbp)
	jne	.L29619
	movq	-48(%rbp), %rsi
	movq	8(%rsi), %rcx
	movq	8(%rcx), %r10
	movq	%rcx, %rsi
	cmpq	$0, 8(%r10)
	sete	%r9b
	movzbl	%r9b, %ebx
	movl	%ebx, -96(%rbp)
	movl	-96(%rbp), %eax
	movl	(%rcx), %ebx
	movslq	%ebx,%r8
	movl	%eax, -92(%rbp)
	leaq	15(,%r8,8), %rdi
	andq	$-16, %rdi
	subq	%rdi, %rsp
	cmpl	%ebx, %eax
	leaq	16(%rsp), %rdx
	movq	%rdx, -72(%rbp)
	jge	.L29607
	.p2align 4,,7
.L29593:
	movslq	-92(%rbp),%r14
	movl	-60(%rbp), %eax
	testl	%eax, %eax
	movq	8(%rsi,%r14,8), %r12
	movq	%r14, -80(%rbp)
	movq	8(%r12), %r13
	movq	16(%r12), %rcx
	movzbl	2(%r13), %r14d
	movq	8(%rcx), %r13
	movslq	%r14d,%r11
	movq	%r11, -88(%rbp)
	movzbl	mode_size(%r11), %r15d
	js	.L29566
	movslq	-60(%rbp),%rdi
	mov	%r15d, %r8d
	leaq	(%r8,%r13), %rdx
	cmpq	%rdi, %rdx
	jle	.L29566
	movl	-60(%rbp), %r15d
	subl	%r13d, %r15d
	je	.L29620
.L29566:
	movq	-56(%rbp), %r12
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L29616
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L29570
	cmpw	$54, %dx
	je	.L29570
	cmpw	$55, %dx
	je	.L29570
	cmpw	$58, %dx
	je	.L29570
	cmpw	$134, %dx
	je	.L29570
	cmpw	$56, %dx
	je	.L29570
	cmpw	$140, %dx
	je	.L29570
	.p2align 4,,7
.L29569:
	movq	-56(%rbp), %rsi
	movl	%r14d, %edi
	movzbl	2(%rsi), %eax
	testb	%al, %al
	je	.L29617
	movzbl	%al, %edi
.L29617:
	call	gen_reg_rtx
	movq	-56(%rbp), %rsi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	emit_move_insn
	movzwl	(%r12), %edx
.L29568:
	cmpw	$66, %dx
	je	.L29616
.L29573:
	cmpw	$65, %dx
	je	.L29621
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L29590
	cmpw	$54, %dx
	je	.L29590
	cmpw	$55, %dx
	je	.L29590
	cmpw	$58, %dx
	je	.L29590
	cmpw	$134, %dx
	je	.L29590
	cmpw	$56, %dx
	je	.L29590
	cmpw	$140, %dx
	je	.L29590
	cmpw	$61, %dx
	je	.L29622
.L29589:
	leal	0(,%r15,8), %edx
	movq	%r12, %rdi
	xorl	%r8d, %r8d
	movslq	-60(%rbp),%r15
	mov	%edx, %esi
	movl	$1, %ecx
	leaq	0(,%r13,8), %rdx
	movl	%r14d, %r9d
	movl	%r14d, (%rsp)
	movq	%r15, 8(%rsp)
	call	extract_bit_field
	movq	-72(%rbp), %r12
	movq	-80(%rbp), %r8
	movq	%rax, (%r12,%r8,8)
	.p2align 4,,7
.L29564:
	movq	-48(%rbp), %r9
	incl	-92(%rbp)
	movl	-92(%rbp), %eax
	movq	8(%r9), %rcx
	cmpl	(%rcx), %eax
	movq	%rcx, %rsi
	jl	.L29593
.L29607:
	movq	cfun(%rip), %rbx
	movq	16(%rbx), %r14
	movq	40(%r14), %rbx
	testq	%rbx, %rbx
	je	.L29609
	.p2align 4,,7
.L29599:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L29623
	call	emit_insn
	movq	%rax, 16(%rbx)
.L29598:
	movq	cfun(%rip), %rcx
	movq	40(%rbx), %rsi
	movq	16(%rcx), %r11
	testq	%rsi, %rsi
	movq	%rsi, %rbx
	movq	%rsi, 40(%r11)
	jne	.L29599
	movq	-48(%rbp), %rdi
	movq	8(%rdi), %rcx
.L29609:
	movl	-96(%rbp), %r12d
	movq	%rcx, %rdx
	cmpl	(%rcx), %r12d
	jl	.L29605
.L29611:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
	.p2align 6,,7
.L29605:
	movslq	-96(%rbp),%r9
	movq	-72(%rbp), %r15
	salq	$3, %r9
	movq	8(%r9,%rdx), %rax
	movq	(%r15,%r9), %rsi
	movq	8(%rax), %rdi
	call	emit_move_insn
	movq	-48(%rbp), %r8
	incl	-96(%rbp)
	movl	-96(%rbp), %eax
	movq	8(%r8), %rdx
	cmpl	(%rdx), %eax
	jl	.L29605
	jmp	.L29611
	.p2align 6,,7
.L29623:
	movq	8(%rdi), %r10
	movq	8(%r10), %r13
	movq	%r13, 16(%rbx)
	call	emit_insn
	jmp	.L29598
.L29622:
	movzbl	2(%r12), %r11d
	cmpl	%r14d, %r11d
	jne	.L29589
	.p2align 4,,7
.L29590:
	movq	-80(%rbp), %rdi
	movq	-72(%rbp), %rcx
	movq	%r12, (%rcx,%rdi,8)
	jmp	.L29564
	.p2align 6,,7
.L29621:
	testq	%r13, %r13
	jne	.L29615
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %r9
	movzbl	mode_size(%r9), %ebx
	cmpl	%ebx, %r15d
	je	.L29579
.L29580:
	movzbq	2(%rdx), %rsi
	movzbq	mode_size(%rsi), %r10
	cmpq	%r10, %r13
	je	.L29624
.L29578:
	testq	%r13, %r13
	jne	.L29586
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%r10
	movzbq	mode_size(%r10), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %r13
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movl	%r14d, %esi
	movq	%r13, %rdi
	xorl	%edx, %edx
	call	adjust_address_1
	movq	-72(%rbp), %r14
	movq	-80(%rbp), %rbx
	movq	%rax, (%r14,%rbx,8)
	jmp	.L29564
.L29586:
	movl	$.LC0, %edi
	movl	$2028, %esi
.L29618:
	movl	$.LC12, %edx
	call	fancy_abort
.L29624:
	movq	16(%r12), %rdi
	movzbq	2(%rdi), %rcx
	movzbl	mode_size(%rcx), %r11d
	cmpl	%r11d, %r15d
	jne	.L29578
.L29579:
	xorl	%r8d, %r8d
	movq	-72(%rbp), %rdx
	movq	-80(%rbp), %rax
	testq	%r13, %r13
	setne	%r8b
	leaq	(%rdx,%rax,8), %rbx
	movq	8(%r12,%r8,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L29564
	cmpw	$54, %dx
	je	.L29564
	cmpw	$55, %dx
	je	.L29564
	cmpw	$58, %dx
	je	.L29564
	cmpw	$134, %dx
	je	.L29564
	cmpw	$56, %dx
	je	.L29564
	cmpw	$140, %dx
	je	.L29564
	cmpw	$61, %dx
	je	.L29625
.L29584:
	leal	0(,%r15,8), %r9d
	movl	%r14d, (%rsp)
	xorl	%edx, %edx
	movslq	-60(%rbp),%r15
	mov	%r9d, %esi
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r14d, %r9d
	movq	%r15, 8(%rsp)
	movq	(%rbx), %rdi
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L29564
.L29625:
	movzbl	2(%rcx), %r13d
	cmpl	%r14d, %r13d
	jne	.L29584
	jmp	.L29564
	.p2align 6,,7
.L29615:
	movq	8(%r12), %rdx
	jmp	.L29580
	.p2align 6,,7
.L29616:
	movl	%r14d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L29574
	cmpl	%eax, 32(%rdx)
	jae	.L29575
.L29614:
	movzwl	(%r12), %edx
	jmp	.L29573
	.p2align 6,,7
.L29575:
	movl	%r14d, %edi
	leaq	0(,%r13,8), %rbx
	call	get_mode_alignment
	mov	%eax, %ecx
	movq	%rbx, %rax
	cqto
	idivq	%rcx
	testq	%rdx, %rdx
	jne	.L29614
	movq	-88(%rbp), %rax
	movzbl	mode_size(%rax), %edi
	cmpl	%edi, %r15d
	jne	.L29614
	movl	%r14d, %edi
	call	gen_reg_rtx
	movl	$1, %ecx
	movl	%r14d, %esi
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %r8
	movq	%r12, %rdi
	leaq	(%r8,%rdx,8), %r15
	movl	$1, %r8d
	movq	%r13, %rdx
	movq	%rax, (%r15)
	call	adjust_address_1
	movq	(%r15), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L29564
	.p2align 6,,7
.L29574:
	cmpl	$8, %eax
	ja	.L29614
	jmp	.L29575
	.p2align 6,,7
.L29570:
	movq	-56(%rbp), %r10
	movzbl	2(%r10), %ecx
	movzbl	%cl, %r9d
	cmpl	%r14d, %r9d
	je	.L29568
	testb	%cl, %cl
	je	.L29568
	jmp	.L29569
.L29620:
	movl	$.LC0, %edi
	movl	$1978, %esi
	jmp	.L29618
.L29619:
	movl	$.LC0, %edi
	movl	$1953, %esi
	jmp	.L29618
.LFE36:
.Lfe36:
	.size	emit_group_load,.Lfe36-emit_group_load
	.align 2
	.p2align 4,,15
.globl emit_group_store
	.type	emit_group_store,@function
emit_group_store:
.LFB37:
	pushq	%rbp
.LCFI175:
	movq	%rsp, %rbp
.LCFI176:
	pushq	%r15
.LCFI177:
	pushq	%r14
.LCFI178:
	pushq	%r13
.LCFI179:
	pushq	%r12
.LCFI180:
	pushq	%rbx
.LCFI181:
	subq	$136, %rsp
.LCFI182:
	cmpw	$39, (%rsi)
	movl	%edx, -60(%rbp)
	movq	%rdi, -48(%rbp)
	movq	%rsi, -56(%rbp)
	jne	.L29742
	movq	-56(%rbp), %r9
	movq	8(%r9), %rcx
	movq	8(%rcx), %r8
	cmpq	$0, 8(%r8)
	sete	%dil
	movzbl	%dil, %esi
	movl	%esi, -156(%rbp)
	movl	-156(%rbp), %r13d
	movl	(%rcx), %esi
	movslq	%esi,%rbx
	leaq	15(,%rbx,8), %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	cmpl	%esi, %r13d
	leaq	16(%rsp), %rax
	movq	%rax, -72(%rbp)
	jl	.L29634
.L29720:
	movq	cfun(%rip), %r15
	movq	16(%r15), %r13
	movq	40(%r13), %rbx
	testq	%rbx, %rbx
	je	.L29722
	.p2align 4,,7
.L29640:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L29743
	call	emit_insn
	movq	%rax, 16(%rbx)
.L29639:
	movq	cfun(%rip), %r9
	movq	40(%rbx), %rdi
	movq	16(%r9), %r8
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%r8)
	jne	.L29640
.L29722:
	movq	-48(%rbp), %rcx
	cmpw	$39, (%rcx)
	movq	%rcx, -152(%rbp)
	je	.L29744
	movq	-48(%rbp), %rdx
	movzwl	(%rdx), %eax
	subl	$65, %eax
	cmpw	$1, %ax
	ja	.L29745
.L29693:
	movq	-56(%rbp), %r15
	movl	-156(%rbp), %edi
	movq	8(%r15), %rax
	cmpl	(%rax), %edi
	jge	.L29729
	movslq	-60(%rbp),%r13
	movq	%r13, -136(%rbp)
	.p2align 4,,7
.L29710:
	movslq	-156(%rbp),%r10
	movq	-72(%rbp), %r8
	movq	-152(%rbp), %r14
	movq	%r10, %rbx
	movq	%r10, -120(%rbp)
	salq	$3, %rbx
	movq	(%r8,%rbx), %rcx
	movq	8(%rbx,%rax), %r9
	movl	-60(%rbp), %eax
	movzbl	2(%rcx), %r15d
	movq	16(%r9), %rdx
	testl	%eax, %eax
	movq	8(%rdx), %r12
	movslq	%r15d,%rsi
	movq	%rsi, -128(%rbp)
	movzbl	mode_size(%rsi), %r13d
	js	.L29699
	movl	-60(%rbp), %r11d
	mov	%r13d, %esi
	leaq	(%rsi,%r12), %rdi
	subl	%r12d, %r11d
	cmpq	-136(%rbp), %rdi
	cmovg	%r11d, %r13d
.L29699:
	movq	-152(%rbp), %rdx
	cmpw	$65, (%rdx)
	je	.L29746
.L29701:
	cmpw	$66, (%r14)
	je	.L29747
.L29706:
	leal	0(,%r13,8), %edi
	movslq	-60(%rbp),%r9
	leaq	0(,%r12,8), %rdx
	mov	%edi, %esi
	movq	-72(%rbp), %r13
	movl	%r15d, %ecx
	movq	%r14, %rdi
	movq	-120(%rbp), %r14
	movq	(%r13,%r14,8), %r8
	call	store_bit_field
.L29697:
	movq	-56(%rbp), %rcx
	incl	-156(%rbp)
	movl	-156(%rbp), %esi
	movq	8(%rcx), %rax
	cmpl	(%rax), %esi
	jl	.L29710
.L29729:
	movq	cfun(%rip), %rbx
	movq	16(%rbx), %r8
	movq	40(%r8), %rbx
	testq	%rbx, %rbx
	je	.L29731
	.p2align 4,,7
.L29716:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L29748
	call	emit_insn
	movq	%rax, 16(%rbx)
.L29715:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %r11
	movq	16(%rdx), %r12
	testq	%r11, %r11
	movq	%r11, %rbx
	movq	%r11, 40(%r12)
	jne	.L29716
.L29731:
	movq	-152(%rbp), %rbx
	cmpw	$61, (%rbx)
	je	.L29749
.L29626:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
.L29749:
	movq	-48(%rbp), %rdi
	movq	%rbx, %rsi
	call	emit_move_insn
	jmp	.L29626
	.p2align 6,,7
.L29748:
	movq	8(%rdi), %r10
	movq	8(%r10), %r9
	movq	%r9, 16(%rbx)
	call	emit_insn
	jmp	.L29715
	.p2align 6,,7
.L29747:
	movl	%r15d, %edi
	call	get_mode_alignment
	movq	16(%r14), %rdx
	testq	%rdx, %rdx
	je	.L29707
	cmpl	%eax, 32(%rdx)
	jb	.L29706
.L29708:
	movl	%r15d, %edi
	leaq	0(,%r12,8), %rbx
	call	get_mode_alignment
	mov	%eax, %r10d
	movq	%rbx, %rax
	cqto
	idivq	%r10
	testq	%rdx, %rdx
	jne	.L29706
	movq	-128(%rbp), %r11
	movzbl	mode_size(%r11), %edx
	cmpl	%edx, %r13d
	jne	.L29706
	movq	%r14, %rdi
	movl	%r15d, %esi
	movq	%r12, %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	movq	-72(%rbp), %r12
	movq	-120(%rbp), %r15
	movq	%rax, %rdi
	movq	(%r12,%r15,8), %rsi
	call	emit_move_insn
	jmp	.L29697
	.p2align 6,,7
.L29707:
	cmpl	$8, %eax
	ja	.L29706
	jmp	.L29708
	.p2align 6,,7
.L29746:
	movq	8(%rdx), %r8
	mov	%r13d, %ebx
	leaq	(%rbx,%r12), %rcx
	movzbq	2(%r8), %r14
	movzbq	mode_size(%r14), %rdx
	movq	%r8, %r14
	cmpq	%rdx, %rcx
	jle	.L29701
	cmpq	%rdx, %r12
	jl	.L29704
	movq	-152(%rbp), %rax
	subq	%rdx, %r12
	movq	16(%rax), %r14
	jmp	.L29701
.L29704:
	movl	$.LC0, %edi
	movl	$2142, %esi
.L29739:
	movl	$.LC20, %edx
.L29738:
	call	fancy_abort
	.p2align 6,,7
.L29745:
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	const_int_rtx+512(%rip), %rsi
	movq	%rax, %rdi
	movq	%rax, -152(%rbp)
	call	emit_move_insn
	jmp	.L29693
.L29744:
	movq	-56(%rbp), %rsi
	movq	%rcx, %rdi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L29626
	movq	-152(%rbp), %r14
	movslq	-60(%rbp),%rbx
	xorl	%edx, %edx
	movzbl	2(%r14), %edi
	movq	%rbx, %rsi
	movq	%rbx, -88(%rbp)
	call	assign_stack_temp
	movl	-60(%rbp), %edx
	movq	-56(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, -80(%rbp)
	call	emit_group_store
	cmpw	$39, (%r14)
	jne	.L29750
	movq	-152(%rbp), %rsi
	movq	8(%rsi), %rcx
	movq	8(%rcx), %rdx
	movl	(%rcx), %r10d
	movq	%rcx, %rsi
	cmpq	$0, 8(%rdx)
	movslq	%r10d,%r11
	sete	%r15b
	leaq	15(,%r11,8), %r12
	andq	$-16, %r12
	subq	%r12, %rsp
	leaq	16(%rsp), %rax
	movzbl	%r15b, %r13d
	movq	%rax, -96(%rbp)
	movl	%r13d, -144(%rbp)
	movl	-144(%rbp), %eax
	cmpl	%r10d, %eax
	movl	%eax, -140(%rbp)
	jge	.L29724
.L29679:
	movslq	-140(%rbp),%r14
	movl	-60(%rbp), %eax
	testl	%eax, %eax
	movq	8(%rsi,%r14,8), %r8
	movq	%r14, -104(%rbp)
	movq	8(%r8), %r9
	movq	16(%r8), %rcx
	movzbl	2(%r9), %r14d
	movq	8(%rcx), %r13
	movslq	%r14d,%rdi
	movq	%rdi, -112(%rbp)
	movzbl	mode_size(%rdi), %r15d
	js	.L29652
	mov	%r15d, %r10d
	leaq	(%r10,%r13), %rbx
	cmpq	-88(%rbp), %rbx
	jle	.L29652
	movl	-60(%rbp), %r15d
	subl	%r13d, %r15d
	je	.L29751
.L29652:
	movq	-80(%rbp), %r12
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L29736
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L29656
	cmpw	$54, %dx
	je	.L29656
	cmpw	$55, %dx
	je	.L29656
	cmpw	$58, %dx
	je	.L29656
	cmpw	$134, %dx
	je	.L29656
	cmpw	$56, %dx
	je	.L29656
	cmpw	$140, %dx
	je	.L29656
.L29655:
	movq	-80(%rbp), %r12
	movl	%r14d, %edi
	movzbl	2(%r12), %eax
	testb	%al, %al
	je	.L29737
	movzbl	%al, %edi
.L29737:
	call	gen_reg_rtx
	movq	-80(%rbp), %rsi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	emit_move_insn
	movzwl	(%r12), %edx
.L29654:
	cmpw	$66, %dx
	je	.L29736
.L29659:
	cmpw	$65, %dx
	je	.L29752
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L29676
	cmpw	$54, %dx
	je	.L29676
	cmpw	$55, %dx
	je	.L29676
	cmpw	$58, %dx
	je	.L29676
	cmpw	$134, %dx
	je	.L29676
	cmpw	$56, %dx
	je	.L29676
	cmpw	$140, %dx
	je	.L29676
	cmpw	$61, %dx
	je	.L29753
.L29675:
	movq	-88(%rbp), %r11
	leal	0(,%r15,8), %eax
	movl	%r14d, %r9d
	mov	%eax, %esi
	leaq	0(,%r13,8), %rdx
	movq	%r12, %rdi
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r14d, (%rsp)
	movq	%r11, 8(%rsp)
	call	extract_bit_field
	movq	-96(%rbp), %r9
	movq	-104(%rbp), %r10
	movq	%rax, (%r9,%r10,8)
.L29650:
	movq	-48(%rbp), %r12
	incl	-140(%rbp)
	movl	-140(%rbp), %eax
	movq	8(%r12), %rcx
	cmpl	(%rcx), %eax
	movq	%rcx, %rsi
	jl	.L29679
.L29724:
	movq	cfun(%rip), %r14
	movq	16(%r14), %rdi
	movq	40(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L29726
.L29685:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L29754
	call	emit_insn
	movq	%rax, 16(%rbx)
.L29684:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %rsi
	movq	16(%rdx), %rcx
	testq	%rsi, %rsi
	movq	%rsi, %rbx
	movq	%rsi, 40(%rcx)
	jne	.L29685
	movq	-48(%rbp), %rbx
	movq	8(%rbx), %rcx
.L29726:
	movl	-144(%rbp), %r8d
	cmpl	(%rcx), %r8d
	jge	.L29626
.L29691:
	movslq	-144(%rbp),%r14
	movq	-96(%rbp), %r12
	salq	$3, %r14
	movq	8(%r14,%rcx), %rax
	movq	(%r12,%r14), %rsi
	movq	8(%rax), %rdi
	call	emit_move_insn
	movq	-48(%rbp), %r11
	incl	-144(%rbp)
	movl	-144(%rbp), %r9d
	movq	8(%r11), %r10
	cmpl	(%r10), %r9d
	movq	%r10, %rcx
	jl	.L29691
	jmp	.L29626
.L29754:
	movq	8(%rdi), %r13
	movq	8(%r13), %r15
	movq	%r15, 16(%rbx)
	call	emit_insn
	jmp	.L29684
.L29753:
	movzbl	2(%r12), %ecx
	cmpl	%r14d, %ecx
	jne	.L29675
.L29676:
	movq	-104(%rbp), %r8
	movq	-96(%rbp), %rdx
	movq	%r12, (%rdx,%r8,8)
	jmp	.L29650
.L29752:
	testq	%r13, %r13
	jne	.L29735
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %r11
	movzbl	mode_size(%r11), %r10d
	cmpl	%r10d, %r15d
	je	.L29665
.L29666:
	movzbq	2(%rdx), %rdi
	movzbq	mode_size(%rdi), %rsi
	cmpq	%rsi, %r13
	je	.L29755
.L29664:
	testq	%r13, %r13
	jne	.L29672
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbx
	movzbq	mode_size(%rbx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %r13
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movl	%r14d, %esi
	movq	%r13, %rdi
	xorl	%edx, %edx
	call	adjust_address_1
	movq	-96(%rbp), %r14
	movq	-104(%rbp), %r15
	movq	%rax, (%r14,%r15,8)
	jmp	.L29650
.L29672:
	movl	$.LC0, %edi
	movl	$2028, %esi
.L29741:
	movl	$.LC12, %edx
	jmp	.L29738
.L29755:
	movq	16(%r12), %r8
	movzbq	2(%r8), %rdx
	movzbl	mode_size(%rdx), %ecx
	cmpl	%ecx, %r15d
	jne	.L29664
.L29665:
	xorl	%r9d, %r9d
	movq	-104(%rbp), %r11
	movq	-96(%rbp), %r10
	testq	%r13, %r13
	setne	%r9b
	leaq	(%r10,%r11,8), %rbx
	movq	8(%r12,%r9,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r13d
	cmpw	$1, %r13w
	jbe	.L29650
	cmpw	$54, %dx
	je	.L29650
	cmpw	$55, %dx
	je	.L29650
	cmpw	$58, %dx
	je	.L29650
	cmpw	$134, %dx
	je	.L29650
	cmpw	$56, %dx
	je	.L29650
	cmpw	$140, %dx
	je	.L29650
	cmpw	$61, %dx
	je	.L29756
.L29670:
	movq	-88(%rbp), %rax
	leal	0(,%r15,8), %edi
	movl	%r14d, (%rsp)
	mov	%edi, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r14d, %r9d
	movq	%rax, 8(%rsp)
	movq	(%rbx), %rdi
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L29650
.L29756:
	movzbl	2(%rcx), %r12d
	cmpl	%r14d, %r12d
	jne	.L29670
	jmp	.L29650
	.p2align 6,,7
.L29735:
	movq	8(%r12), %rdx
	jmp	.L29666
.L29736:
	movl	%r14d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L29660
	cmpl	%eax, 32(%rdx)
	jae	.L29661
.L29734:
	movzwl	(%r12), %edx
	jmp	.L29659
.L29661:
	movl	%r14d, %edi
	leaq	0(,%r13,8), %rbx
	call	get_mode_alignment
	mov	%eax, %ecx
	movq	%rbx, %rax
	cqto
	idivq	%rcx
	testq	%rdx, %rdx
	jne	.L29734
	movq	-112(%rbp), %r8
	movzbl	mode_size(%r8), %edx
	cmpl	%edx, %r15d
	jne	.L29734
	movl	%r14d, %edi
	call	gen_reg_rtx
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-104(%rbp), %rbx
	movq	-96(%rbp), %r9
	movq	%r12, %rdi
	movl	%r14d, %esi
	movq	%r13, %rdx
	leaq	(%r9,%rbx,8), %r15
	movq	%rax, (%r15)
	call	adjust_address_1
	movq	(%r15), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L29650
	.p2align 6,,7
.L29660:
	cmpl	$8, %eax
	ja	.L29734
	jmp	.L29661
.L29656:
	movq	-80(%rbp), %rax
	movzbl	2(%rax), %ecx
	movzbl	%cl, %esi
	cmpl	%r14d, %esi
	je	.L29654
	testb	%cl, %cl
	je	.L29654
	jmp	.L29655
.L29751:
	movl	$.LC0, %edi
	movl	$1978, %esi
	jmp	.L29741
.L29750:
	movl	$.LC0, %edi
	movl	$1953, %esi
	jmp	.L29741
	.p2align 6,,7
.L29743:
	movq	8(%rdi), %rsi
	movq	8(%rsi), %rdx
	movq	%rdx, 16(%rbx)
	call	emit_insn
	jmp	.L29639
	.p2align 6,,7
.L29634:
	movslq	%r13d,%r12
	incl	%r13d
	salq	$3, %r12
	movq	8(%r12,%rcx), %r11
	movq	8(%r11), %r14
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	-72(%rbp), %rcx
	movq	%rax, %rdi
	movq	%rax, (%rcx,%r12)
	call	emit_move_insn
	movq	-56(%rbp), %r10
	movq	8(%r10), %rcx
	cmpl	(%rcx), %r13d
	jl	.L29634
	jmp	.L29720
.L29742:
	movl	$.LC0, %edi
	movl	$2063, %esi
	jmp	.L29739
.LFE37:
.Lfe37:
	.size	emit_group_store,.Lfe37-emit_group_store
	.align 2
	.p2align 4,,15
.globl copy_blkmode_from_reg
	.type	copy_blkmode_from_reg,@function
copy_blkmode_from_reg:
.LFB38:
	pushq	%r15
.LCFI183:
	pushq	%r14
.LCFI184:
	movq	%rdi, %r14
	movq	%rdx, %rdi
	pushq	%r13
.LCFI185:
	movq	%rsi, %r13
	pushq	%r12
.LCFI186:
	pushq	%rbp
.LCFI187:
	pushq	%rbx
.LCFI188:
	movq	%rdx, %rbx
	subq	$40, %rsp
.LCFI189:
	call	int_size_in_bytes
	movl	target_flags(%rip), %esi
	movq	$0, 32(%rsp)
	movq	%rax, %r15
	movq	$0, 24(%rsp)
	movl	64(%rbx), %eax
	testl	$33554432, %esi
	movl	%esi, %edx
	je	.L29760
	cmpl	$63, %eax
.L29815:
	ja	.L29758
	mov	%eax, %r12d
.L29759:
	testq	%r14, %r14
	jne	.L29764
	movzbl	17(%rbx), %edi
	movzbl	62(%rbx), %ecx
	movl	$1, %esi
	xorl	%edx, %edx
	movl	%edi, %eax
	shrb	$5, %cl
	shrb	$3, %dil
	shrb	$4, %al
	andl	$1, %edi
	andl	$1, %ecx
	andl	%eax, %esi
	addl	%edi, %edi
	sall	$2, %ecx
	orl	%edi, %esi
	orl	%ecx, %esi
	cmpb	$20, 16(%rbx)
	je	.L29819
.L29766:
	leal	0(,%rdx,8), %ebp
	movq	%rbx, %rdi
	orl	%ebp, %esi
	orl	$1, %esi
	call	build_qualified_type
	movl	$1, %ecx
	movl	$1, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	call	assign_temp
	movq	%rax, %rdi
	movq	%rax, %r14
	call	preserve_temp_slots
.L29764:
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L29772
	testb	$2, target_flags+3(%rip)
	je	.L29768
	movzbl	%al, %esi 
	cmpb	$7, mode_size(%rsi)
.L29816:
	ja	.L29772
	movzbl	17(%rbx), %edx
	movl	word_mode(%rip), %edi
	movq	%r13, %rsi
	shrb	$5, %dl
	andl	$1, %edx
	call	convert_to_mode
	movq	%rax, %r13
.L29772:
	xorl	%ebx, %ebx
	leaq	0(,%r15,8), %r9
	xorl	%ebp, %ebp
	cmpq	%r9, %rbx
	jae	.L29814
	.p2align 4,,7
.L29812:
	movl	target_flags(%rip), %ecx
	testl	$33554432, %ecx
	movl	%ecx, %eax
	je	.L29783
	testl	$63, %ebp 
.L29817:
	je	.L29782
	testq	%rbp, %rbp
	jne	.L29781
.L29782:
	testl	$33554432, %eax
	je	.L29787
	movq	%rbp, %rsi
	shrq	$6, %rsi
.L29788:
	movzbl	2(%r13), %edx
	movq	%r13, %rdi
	call	operand_subword_force
	movl	target_flags(%rip), %ecx
	movq	%rax, 24(%rsp)
.L29781:
	testl	$33554432, %ecx
	je	.L29790
	testl	$63, %ebx 
.L29818:
	jne	.L29789
	andl	$33554432, %ecx
	je	.L29794
	movq	%rbx, %rsi
	shrq	$6, %rsi
.L29795:
	movl	$51, %ecx
	movq	%r14, %rdi
	movl	$1, %edx
	call	operand_subword
	movl	target_flags(%rip), %ecx
	movq	%rax, 32(%rsp)
.L29789:
	testl	$33554432, %ecx
	je	.L29804
	movq	%rbp, %rdx
	andl	$63, %edx
.L29805:
	movl	word_mode(%rip), %r9d
	movq	24(%rsp), %rdi
	andl	$33554432, %ecx
	movl	$32, %r11d
	movl	$64, %r10d
	movq	%r12, %rsi
	cmove	%r11, %r10
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r9d, (%rsp)
	movq	%r10, 8(%rsp)
	call	extract_bit_field
	movl	target_flags(%rip), %ecx
	testl	$33554432, %ecx
	je	.L29808
	movq	%rbx, %rdx
	andl	$63, %edx
.L29809:
	andl	$33554432, %ecx
	movl	$32, %edi
	movl	$64, %r9d
	cmove	%rdi, %r9
	movl	word_mode(%rip), %ecx
	movq	%r12, %rsi
	movq	32(%rsp), %rdi
	movq	%rax, %r8
	addq	%r12, %rbx
	addq	%r12, %rbp
	call	store_bit_field
	leaq	0(,%r15,8), %rdx
	cmpq	%rdx, %rbx
	jb	.L29812
.L29814:
	addq	$40, %rsp
	movq	%r14, %rax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
	.p2align 6,,7
.L29808:
	movq	%rbx, %rdx
	andl	$31, %edx
	jmp	.L29809
	.p2align 6,,7
.L29804:
	movq	%rbp, %rdx
	andl	$31, %edx
	jmp	.L29805
	.p2align 6,,7
.L29794:
	movq	%rbx, %rsi
	shrq	$5, %rsi
	jmp	.L29795
	.p2align 6,,7
.L29790:
	testl	$31, %ebx 
	jmp	.L29818
	.p2align 6,,7
.L29787:
	movq	%rbp, %rsi
	shrq	$5, %rsi
	jmp	.L29788
	.p2align 6,,7
.L29783:
	testl	$31, %ebp 
	jmp	.L29817
.L29768:
	movzbl	%al, %r8d 
	cmpb	$3, mode_size(%r8)
	jmp	.L29816
.L29819:
	cmpq	$0, 8(%rbx)
	movl	$1, %eax
	cmovne	%eax, %edx
	jmp	.L29766
.L29758:
	andl	$33554432, %edx
	movl	$64, %r12d
	movl	$32, %edx
	cmove	%rdx, %r12
	jmp	.L29759
.L29760:
	cmpl	$31, %eax
	jmp	.L29815
.LFE38:
.Lfe38:
	.size	copy_blkmode_from_reg,.Lfe38-copy_blkmode_from_reg
	.section	.rodata.str1.1
.LC25:
	.string	"use_reg"
	.text
	.align 2
	.p2align 4,,15
.globl use_reg
	.type	use_reg,@function
use_reg:
.LFB39:
	pushq	%rbx
.LCFI190:
	movq	%rsi, %rax
	cmpw	$61, (%rsi)
	movq	%rdi, %rbx
	jne	.L29822
	cmpl	$52, 8(%rsi)
	ja	.L29822
	movl	$48, %edi
	xorl	%esi, %esi
	movq	%rax, %rdx
	call	gen_rtx_fmt_e
	movq	(%rbx), %rcx
	xorl	%esi, %esi
	movl	$3, %edi
	movq	%rax, %rdx
	call	gen_rtx_fmt_ee
	movq	%rax, (%rbx)
	popq	%rbx
	ret
.L29822:
	movl	$.LC0, %edi
	movl	$2261, %esi
	movl	$.LC25, %edx
	call	fancy_abort
.LFE39:
.Lfe39:
	.size	use_reg,.Lfe39-use_reg
	.section	.rodata.str1.1
.LC26:
	.string	"use_regs"
	.text
	.align 2
	.p2align 4,,15
.globl use_regs
	.type	use_regs,@function
use_regs:
.LFB40:
	pushq	%r13
.LCFI191:
	movl	%esi, %r13d
	pushq	%r12
.LCFI192:
	movq	%rdi, %r12
	pushq	%rbp
.LCFI193:
	movl	%edx, %ebp
	pushq	%rbx
.LCFI194:
	leal	0(%rbp,%r13), %edx
	subq	$8, %rsp
.LCFI195:
	cmpl	$53, %edx
	jg	.L29836
	xorl	%ebx, %ebx
	cmpl	%ebp, %ebx
	jl	.L29832
.L29834:
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret
	.p2align 6,,7
.L29832:
	leal	(%rbx,%r13), %esi
	movslq	%esi,%rdx
	movl	reg_raw_mode(,%rdx,4), %edi
	call	gen_rtx_REG
	cmpw	$61, (%rax)
	jne	.L29830
	cmpl	$52, 8(%rax)
	ja	.L29830
	xorl	%esi, %esi
	movl	$48, %edi
	movq	%rax, %rdx
	call	gen_rtx_fmt_e
	incl	%ebx
	movq	(%r12), %rcx
	xorl	%esi, %esi
	movl	$3, %edi
	movq	%rax, %rdx
	call	gen_rtx_fmt_ee
	cmpl	%ebp, %ebx
	movq	%rax, (%r12)
	jl	.L29832
	jmp	.L29834
.L29830:
	movl	$.LC0, %edi
	movl	$2261, %esi
	movl	$.LC25, %edx
.L29835:
	call	fancy_abort
.L29836:
	movl	$.LC0, %edi
	movl	$2280, %esi
	movl	$.LC26, %edx
	jmp	.L29835
.LFE40:
.Lfe40:
	.size	use_regs,.Lfe40-use_regs
	.align 2
	.p2align 4,,15
.globl use_group_regs
	.type	use_group_regs,@function
use_group_regs:
.LFB41:
	pushq	%r12
.LCFI196:
	movq	%rsi, %r12
	pushq	%rbp
.LCFI197:
	movq	%rdi, %rbp
	pushq	%rbx
.LCFI198:
	movq	8(%rsi), %rdx
	xorl	%ebx, %ebx
	cmpl	(%rdx), %ebx
	movq	%rdx, %rcx
	jge	.L29848
	.p2align 4,,7
.L29846:
	movslq	%ebx,%rdi
	movq	8(%rdx,%rdi,8), %rsi
	movq	8(%rsi), %rdx
	testq	%rdx, %rdx
	je	.L29840
	cmpw	$61, (%rdx)
	je	.L29849
.L29840:
	incl	%ebx
	movq	%rcx, %rdx
	cmpl	(%rcx), %ebx
	jl	.L29846
.L29848:
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret
	.p2align 6,,7
.L29849:
	cmpl	$52, 8(%rdx)
	ja	.L29850
	movl	$48, %edi
	xorl	%esi, %esi
	call	gen_rtx_fmt_e
	movq	(%rbp), %rcx
	xorl	%esi, %esi
	movl	$3, %edi
	movq	%rax, %rdx
	call	gen_rtx_fmt_ee
	movq	%rax, (%rbp)
	movq	8(%r12), %rcx
	jmp	.L29840
.L29850:
	movl	$.LC0, %edi
	movl	$2261, %esi
	movl	$.LC25, %edx
	call	fancy_abort
.LFE41:
.Lfe41:
	.size	use_group_regs,.Lfe41-use_group_regs
	.section	.rodata.str1.1
.LC27:
	.string	"can_store_by_pieces"
	.text
	.align 2
	.p2align 4,,15
.globl can_store_by_pieces
	.type	can_store_by_pieces,@function
can_store_by_pieces:
.LFB42:
	pushq	%r15
.LCFI199:
	pushq	%r14
.LCFI200:
	xorl	%r14d, %r14d
	pushq	%r13
.LCFI201:
	movl	$128, %r13d
	pushq	%r12
.LCFI202:
	xorl	%r12d, %r12d
	pushq	%rbp
.LCFI203:
	movq	%rdi, %rbp
	pushq	%rbx
.LCFI204:
	subq	$24, %rsp
.LCFI205:
	movq	%rsi, 8(%rsp)
	movq	%rdi, 16(%rsp)
	movq	%rdx, (%rsp)
	movl	$17, %esi
.L29865:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L29900
	.p2align 4,,7
.L29862:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L29862
.L29900:
	testl	%edi, %edi
	je	.L29855
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L29864
	call	get_mode_alignment
	cmpl	%eax, %r13d
	jb	.L29864
	movzbq	mode_size(%rbx), %r8
	movq	%rbp, %rax
	xorl	%edx, %edx
	divq	%r8
	addq	%rax, %r12
	movq	%rdx, %rbp
.L29864:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L29865
.L29855:
	testq	%rbp, %rbp
	jne	.L29908
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L29868
	movq	ix86_cost(%rip), %rbp
	mov	40(%rbp), %ebx
	cmpq	%rbx, %r12
	jae	.L29869
.L29852:
	xorl	%r15d, %r15d
.L29897:
	xorl	%ebp, %ebp
	movq	16(%rsp), %r13
	testb	$2, target_flags+3(%rip)
	setne	%dl
	movzbl	%dl, %r9d 
	leaq	5(,%r9,4), %rsi
	cmpq	$1, %rsi
	jbe	.L29878
	.p2align 4,,7
.L29895:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L29905
	.p2align 4,,7
.L29885:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %r11
	cmpq	%rsi, %r11
	cmovb	%ecx, %ebp
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L29885
.L29905:
	testl	%ebp, %ebp
	je	.L29878
	movslq	%ebp,%r12
	movq	%r12, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L29887
	movl	%ebp, %edi
	call	get_mode_alignment
	movl	$128, %esi
	cmpl	%eax, %esi
	jb	.L29887
	movzbq	mode_size(%r12), %rax
	cmpq	%rax, %r13
	movq	%rax, %rbx
	jae	.L29894
	.p2align 4,,7
.L29887:
	movzbq	mode_size(%r12), %rsi
	cmpq	$1, %rsi
	ja	.L29895
.L29878:
	testq	%r13, %r13
	jne	.L29909
	incl	%r15d
	testl	%r15d, %r15d
	jle	.L29897
	movl	$1, %eax
.L29851:
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L29909:
	movl	$.LC0, %edi
	movl	$2378, %esi
	movl	$.LC27, %edx
.L29907:
	call	fancy_abort
	.p2align 6,,7
.L29894:
	movq	%r14, %r9
	movq	(%rsp), %rdi
	movl	%ebp, %edx
	subq	%rax, %r9
	testl	%r15d, %r15d
	cmovne	%r9, %r14
	movq	%r14, %rsi
	call	*8(%rsp)
	movq	%rbx, %rax
	testl	%r15d, %r15d
	leaq	(%rbx,%r14), %rdi
	cmove	%rdi, %r14
	subq	%rbx, %r13
	cmpq	%rbx, %r13
	jae	.L29894
	jmp	.L29887
.L29869:
	xorl	%eax, %eax
	jmp	.L29851
.L29868:
	cmpq	$2, %r12
	jbe	.L29852
	jmp	.L29869
.L29908:
	movl	$.LC0, %edi
	movl	$1542, %esi
	movl	$.LC5, %edx
	jmp	.L29907
.LFE42:
.Lfe42:
	.size	can_store_by_pieces,.Lfe42-can_store_by_pieces
	.section	.rodata.str1.1
.LC28:
	.string	"store_by_pieces"
	.text
	.align 2
	.p2align 4,,15
.globl store_by_pieces
	.type	store_by_pieces,@function
store_by_pieces:
.LFB43:
	pushq	%r15
.LCFI206:
	movq	%rsi, %r15
	pushq	%r14
.LCFI207:
	movl	$128, %r14d
	pushq	%r13
.LCFI208:
	movq	%rdi, %r13
	pushq	%r12
.LCFI209:
	xorl	%r12d, %r12d
	pushq	%rbp
.LCFI210:
	movq	%rsi, %rbp
	movl	$17, %esi
	pushq	%rbx
.LCFI211:
	subq	$104, %rsp
.LCFI212:
	movq	%rdx, 24(%rsp)
	movq	%rcx, 16(%rsp)
	.p2align 4,,7
.L29924:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L30003
	.p2align 4,,7
.L29921:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L29921
.L30003:
	testl	%edi, %edi
	je	.L29914
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L29923
	call	get_mode_alignment
	cmpl	%eax, %r14d
	jb	.L29923
	movzbq	mode_size(%rbx), %r8
	movq	%rbp, %rax
	xorl	%edx, %edx
	divq	%r8
	addq	%rax, %r12
	movq	%rdx, %rbp
.L29923:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L29924
.L29914:
	testq	%rbp, %rbp
	jne	.L30015
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L29927
	movq	ix86_cost(%rip), %rbp
	mov	40(%rbp), %ebx
	cmpq	%rbx, %r12
	jae	.L29928
.L29911:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L29929
	cmpl	$66, %eax
	je	.L30016
.L29933:
	cmpl	$75, %eax
	je	.L29937
	cmpl	$78, %eax
	je	.L29937
.L29932:
	movq	16(%rsp), %r12
	movq	24(%rsp), %r14
	movq	%r13, 32(%rsp)
	testb	$2, target_flags+3(%rip)
	movq	%r15, 56(%rsp)
	setne	%dl
	xorl	%esi, %esi
	movq	%r12, 80(%rsp)
	movq	%r14, 72(%rsp)
	leaq	32(%rsp), %r12
	movq	8(%r13), %r15
	leaq	16(%r12), %rcx
	movq	$0, 64(%rsp)
	xorl	%r13d, %r13d
	movzbl	%dl, %r11d 
	movq	%r15, 40(%rsp)
	leaq	5(,%r11,4), %rbp
	movzwl	(%r15), %edx
	leal	-96(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L29945
	cmpw	$99, %dx
	je	.L29945
	cmpw	$98, %dx
	je	.L29945
.L29944:
	movl	%esi, (%rcx)
	movl	$0, 20(%r12)
	leaq	56(%r12), %rdx
	movzwl	(%r15), %eax
	xorl	%ecx, %ecx
	cmpw	$96, %ax
	je	.L29947
	cmpw	$98, %ax
	je	.L29947
.L29946:
	movl	%ecx, (%rdx)
	movl	56(%r12), %ecx
	testl	%ecx, %ecx
	je	.L29948
	movq	24(%r12), %rsi
	movq	%rsi, 32(%r12)
.L29948:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L29949
	movq	24(%r12), %r14
	movq	$0, 8(%rsp)
	movl	$17, %esi
.L29962:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L30006
	.p2align 4,,7
.L29959:
	movslq	%ecx,%r8
	movzbq	mode_size(%r8), %rbx
	cmpq	%rsi, %rbx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L29959
.L30006:
	testl	%edi, %edi
	je	.L29952
	movslq	%edi,%rbx
	movq	%rbx, %r9
	salq	$4, %r9
	addq	optab_table+240(%rip), %r9
	cmpl	$1317, 8(%r9)
	je	.L29961
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L29961
	movzbq	mode_size(%rbx), %rcx
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%rcx
	addq	%rax, 8(%rsp)
	movq	%rdx, %r14
.L29961:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L29962
.L29952:
	testq	%r14, %r14
	jne	.L30015
	cmpq	$2, 8(%rsp)
	jbe	.L29949
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L30008
.L29970:
	movslq	%ecx,%r14
	movzbq	mode_size(%r14), %rdx
	cmpq	%rbp, %rdx
	cmovb	%ecx, %r13d
	movzbl	mode_wider_mode(%r14), %ecx
	testl	%ecx, %ecx
	jne	.L29970
.L30008:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L29949
	movzwl	(%r15), %edx
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L29974
	cmpw	$54, %dx
	je	.L29974
	cmpw	$55, %dx
	je	.L29974
	cmpw	$58, %dx
	je	.L29974
	cmpw	$134, %dx
	je	.L29974
	cmpw	$56, %dx
	je	.L29974
	cmpw	$140, %dx
	je	.L29974
.L29949:
	cmpq	$1, %rbp
	jbe	.L29977
	.p2align 4,,7
.L29998:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L30011
	.p2align 4,,7
.L29984:
	movslq	%ecx,%r15
	movzbq	mode_size(%r15), %r8
	cmpq	%rbp, %r8
	cmovb	%ecx, %r13d
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L29984
.L30011:
	testl	%r13d, %r13d
	je	.L29977
	movslq	%r13d,%r14
	movq	%r14, %rbp
	salq	$4, %rbp
	addq	optab_table+240(%rip), %rbp
	movl	8(%rbp), %ebx
	cmpl	$1317, %ebx
	je	.L29986
	movl	%r13d, %edi
	call	get_mode_alignment
	movl	$128, %r9d
	cmpl	%eax, %r9d
	jb	.L29986
	movzbq	mode_size(%r14), %rdx
	movslq	%ebx,%rdi
	cmpq	%rdx, 24(%r12)
	leaq	(%rdi,%rdi,4), %rbx
	movq	insn_data+16(,%rbx,8), %r15
	movq	%rdx, %rbp
	jb	.L29986
	movl	56(%r12), %ecx
	.p2align 4,,7
.L29996:
	testl	%ecx, %ecx
	je	.L29990
	subq	%rdx, 32(%r12)
.L29990:
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L29991
	movq	(%r12), %rdi
	movq	8(%r12), %rdx
	movl	%r13d, %esi
	movq	32(%r12), %rcx
	movl	$1, %r8d
	call	adjust_automodify_address_1
.L30013:
	movl	%r13d, %edx
	movq	%rax, %rbx
	movq	48(%r12), %rdi
	movq	32(%r12), %rsi
	call	*40(%r12)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	*%r15
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L29995
	addq	%rbp, 32(%r12)
.L29995:
	movq	24(%r12), %r10
	movq	%rbp, %rdx
	subq	%rbp, %r10
	cmpq	%rbp, %r10
	movq	%r10, 24(%r12)
	jae	.L29996
	.p2align 4,,7
.L29986:
	movzbq	mode_size(%r14), %rbp
	cmpq	$1, %rbp
	ja	.L29998
.L29977:
	cmpq	$0, 24(%r12)
	jne	.L30017
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L30017:
	movl	$.LC0, %edi
	movl	$2524, %esi
	movl	$.LC6, %edx
.L30014:
	call	fancy_abort
	.p2align 6,,7
.L29991:
	movq	(%r12), %rdi
	movq	32(%r12), %rdx
	movl	%r13d, %esi
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L30013
.L29974:
	movq	%r15, %rdi
	call	copy_addr_to_reg
	movq	%rax, 8(%r12)
	jmp	.L29949
.L30015:
	movl	$.LC0, %edi
	movl	$1542, %esi
	movl	$.LC5, %edx
	jmp	.L30014
	.p2align 6,,7
.L29947:
	movl	$1, %ecx
	jmp	.L29946
.L29945:
	movl	$1, %esi
	jmp	.L29944
.L29937:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %rbx
	call	protect_from_queue
	cmpq	8(%r13), %rbx
	movq	%rax, %rbp
	je	.L30018
.L29939:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	movq	%rbx, 8(%rax)
	movq	%rbp, 16(%rax)
	jmp	.L29932
.L30018:
	cmpq	16(%r13), %rax
	jne	.L29939
	jmp	.L29932
	.p2align 6,,7
.L30016:
	jne	.L29933
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L29932
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	movq	%rbx, 8(%rax)
	jmp	.L29932
	.p2align 6,,7
.L29929:
	cmpq	$0, 16(%r13)
	je	.L30019
	movq	24(%r13), %rdi
	testq	%rdi, %rdi
	je	.L29941
	movq	%rdi, %r13
	jmp	.L29932
.L29941:
	movq	8(%r13), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L29932
.L30019:
	movq	8(%r13), %rdi
	call	copy_to_reg
	movq	%rax, %r13
	jmp	.L29932
.L29928:
	movl	$.LC0, %edi
	movl	$2400, %esi
	movl	$.LC28, %edx
	jmp	.L30014
	.p2align 6,,7
.L29927:
	cmpq	$2, %r12
	jbe	.L29911
	jmp	.L29928
.LFE43:
.Lfe43:
	.size	store_by_pieces,.Lfe43-store_by_pieces
	.align 2
	.p2align 4,,15
.globl clear_storage
	.type	clear_storage,@function
clear_storage:
.LFB44:
	pushq	%r15
.LCFI213:
	movq	%rsi, %r15
	pushq	%r14
.LCFI214:
	pushq	%r13
.LCFI215:
	pushq	%r12
.LCFI216:
	pushq	%rbp
.LCFI217:
	pushq	%rbx
.LCFI218:
	subq	$120, %rsp
.LCFI219:
	cmpw	$66, (%rdi)
	movq	%rdi, 24(%rsp)
	movq	$0, 8(%rsp)
	je	.L30304
	movq	24(%rsp), %rdx
	movzbl	2(%rdx), %edi
	call	get_mode_alignment
	movl	%eax, %r14d
.L30153:
	movq	24(%rsp), %rcx
	movzbl	2(%rcx), %eax
	cmpb	$51, %al
	je	.L30156
	cmpw	$54, (%r15)
	je	.L30305
.L30156:
	movq	24(%rsp), %rsi
	movzwl	(%rsi), %eax
	cmpl	$71, %eax
	je	.L30158
	cmpl	$66, %eax
	je	.L30306
.L30162:
	cmpl	$75, %eax
	je	.L30166
	cmpl	$78, %eax
	je	.L30166
.L30161:
	movzwl	(%r15), %eax
	cmpl	$71, %eax
	je	.L30171
	cmpl	$66, %eax
	je	.L30307
.L30175:
	cmpl	$75, %eax
	je	.L30179
	cmpl	$78, %eax
	je	.L30179
.L30174:
	cmpw	$54, (%r15)
	je	.L30308
.L30184:
	shrl	$3, %r14d
	xorl	%edi, %edi
	mov	%r14d, %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %ebx
	movq	%rax, 40(%rsp)
	testl	%ebx, %ebx
	je	.L30297
	.p2align 4,,7
.L30277:
	movslq	%ebx,%r12
	movl	clrstr_optab(,%r12,4), %edx
	cmpl	$1317, %edx
	je	.L30265
	cmpw	$54, (%r15)
	je	.L30309
.L30269:
	testb	$2, target_flags+3(%rip)
	je	.L30270
	cmpw	$63, mode_bitsize(%r12,%r12)
.L30301:
	jbe	.L30265
.L30268:
	movslq	%edx,%r13
	leaq	(%r13,%r13,4), %r14
	movq	insn_data+24(,%r14,8), %rbp
	movq	(%rbp), %rax
	testq	%rax, %rax
	je	.L30272
	movq	24(%rsp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L30265
.L30272:
	movq	48(%rbp), %rax
	testq	%rax, %rax
	je	.L30273
	xorl	%esi, %esi
	movq	40(%rsp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L30265
.L30273:
	call	get_last_insn
	movl	$1, %edx
	movq	%r15, %rsi
	movl	%ebx, %edi
	movq	%rax, 32(%rsp)
	call	convert_to_mode
	movq	%rax, %r14
	movq	24(%rbp), %rax
	testq	%rax, %rax
	jne	.L30310
.L30274:
	leaq	(%r13,%r13,4), %r8
	xorl	%eax, %eax
	movq	24(%rsp), %rdi
	movq	%r14, %rsi
	movq	40(%rsp), %rdx
	call	*insn_data+16(,%r8,8)
	testq	%rax, %rax
	jne	.L30298
	movq	32(%rsp), %rdi
	call	delete_insns_since
.L30265:
	movzbl	mode_wider_mode(%r12), %ebx
	testl	%ebx, %ebx
	jne	.L30277
.L30297:
	testb	$2, target_flags+3(%rip)
	movq	24(%rsp), %rdx
	setne	%al
	movq	8(%rdx), %rsi
	movzbl	%al, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movq	%r15, %rsi
	movq	sizetype_tab(%rip), %rcx
	movq	%rax, %rbp
	movzbl	61(%rcx), %r12d
	shrb	$1, %r12b
	movzbl	%r12b, %edi
	call	copy_to_mode_reg
	cmpq	$0, fn.0(%rip)
	movq	%rax, %r13
	je	.L30311
.L30282:
	movq	global_trees+216(%rip), %rdi
	call	build_pointer_type
	movq	%rbp, %rsi
	movq	%rax, %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	const_int_rtx+512(%rip), %rsi
	movq	integer_types+40(%rip), %rdi
	movq	%rax, %r14
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%r13, %rsi
	movq	%rax, (%r14)
	movq	%rax, %r12
	movq	sizetype_tab(%rip), %rdi
	call	make_tree
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	fn.0(%rip), %rbx
	movq	%rax, (%r12)
	movq	(%r14), %r8
	movq	8(%rbx), %rdi
	movq	(%r8), %r13
	movq	$0, (%r13)
	call	build_pointer_type
	movq	fn.0(%rip), %rdx
	movl	$121, %edi
	movq	%rax, %rsi
	call	build1
	xorl	%r8d, %r8d
	movq	%r14, %rcx
	movq	fn.0(%rip), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%rdi), %r11
	movl	$53, %edi
	movq	8(%r11), %rsi
	call	build
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orb	$1, 17(%rax)
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	testb	$4, 3(%rbp)
	movq	%rax, 8(%rsp)
	jne	.L30312
.L30157:
	movq	8(%rsp), %rax
.L30151:
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L30312:
	movl	$49, %edi
	xorl	%esi, %esi
	movq	%rbp, %rdx
	call	gen_rtx_fmt_e
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L30157
.L30311:
	movl	$.LC7, %edi
	call	get_identifier
	movq	global_trees+216(%rip), %rdi
	movq	%rax, fn.0(%rip)
	call	build_pointer_type
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	build_function_type
	movq	fn.0(%rip), %rsi
	movl	$30, %edi
	movq	%rax, %rdx
	call	build_decl
	movl	$1, %esi
	movl	$fn.0, %edi
	movq	%rax, fn.0(%rip)
	call	ggc_add_tree_root
	movq	fn.0(%rip), %r10
	orb	$1, 49(%r10)
	movq	fn.0(%rip), %r9
	orb	$8, 18(%r9)
	movq	fn.0(%rip), %r15
	orb	$64, 50(%r15)
	movq	fn.0(%rip), %rsi
	orb	$2, 18(%rsi)
	xorl	%esi, %esi
	movq	fn.0(%rip), %rdi
	call	make_decl_rtl
	movq	fn.0(%rip), %rdi
	call	assemble_external
	jmp	.L30282
.L30298:
	movq	%rax, %rdi
	call	emit_insn
	xorl	%eax, %eax
	jmp	.L30151
.L30310:
	movq	%r14, %rdi
	movl	%ebx, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L30274
	movq	%r14, %rsi
	movl	%ebx, %edi
	call	copy_to_mode_reg
	movq	%rax, %r14
	jmp	.L30274
	.p2align 6,,7
.L30270:
	cmpw	$31, mode_bitsize(%r12,%r12)
	jmp	.L30301
.L30309:
	movq	mode_mask_array(,%r12,8), %r13
	shrq	$1, %r13
	cmpq	%r13, 8(%r15)
	jbe	.L30268
	jmp	.L30269
.L30308:
	movq	8(%r15), %rbp
	xorl	%r12d, %r12d
	movl	$17, %esi
	movl	$128, %r13d
	.p2align 4,,7
.L30197:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L30286
	.p2align 4,,7
.L30194:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L30194
.L30286:
	testl	%edi, %edi
	je	.L30187
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L30196
	call	get_mode_alignment
	cmpl	%eax, %r13d
	jb	.L30196
	movzbq	mode_size(%rbx), %r8
	movq	%rbp, %rax
	xorl	%edx, %edx
	divq	%r8
	addq	%rax, %r12
	movq	%rdx, %rbp
.L30196:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L30197
.L30187:
	testq	%rbp, %rbp
	jne	.L30303
	movl	optimize_size(%rip), %eax
	testl	%eax, %eax
	jne	.L30200
	movq	ix86_cost(%rip), %r10
	mov	40(%r10), %r9d
	cmpq	%r9, %r12
	jae	.L30184
.L30201:
	movq	8(%r15), %r12
	movq	24(%rsp), %r13
	movq	$0, 96(%rsp)
	movq	$clear_by_pieces_1, 88(%rsp)
	testb	$2, target_flags+3(%rip)
	setne	%cl
	xorl	%esi, %esi
	movq	%r12, 72(%rsp)
	movq	%r13, 48(%rsp)
	leaq	48(%rsp), %r12
	movq	8(%r13), %r15
	movq	$0, 80(%rsp)
	xorl	%r13d, %r13d
	movzbl	%cl, %r11d 
	leaq	16(%r12), %rcx
	movq	%r15, 56(%rsp)
	leaq	5(,%r11,4), %rbp
	movzwl	(%r15), %edx
	leal	-96(%rdx), %r14d
	cmpw	$1, %r14w
	jbe	.L30205
	cmpw	$99, %dx
	je	.L30205
	cmpw	$98, %dx
	je	.L30205
.L30204:
	movl	%esi, (%rcx)
	movl	$0, 20(%r12)
	leaq	56(%r12), %rdx
	movzwl	(%r15), %eax
	xorl	%ecx, %ecx
	cmpw	$96, %ax
	je	.L30207
	cmpw	$98, %ax
	je	.L30207
.L30206:
	movl	%ecx, (%rdx)
	movl	56(%r12), %ebx
	testl	%ebx, %ebx
	je	.L30208
	movq	24(%r12), %rdx
	movq	%rdx, 32(%r12)
.L30208:
	movl	16(%r12), %esi
	testl	%esi, %esi
	jne	.L30209
	movq	24(%r12), %r14
	movq	$0, 16(%rsp)
	movl	$17, %esi
.L30222:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L30289
	.p2align 4,,7
.L30219:
	movslq	%ecx,%r8
	movzbq	mode_size(%r8), %r9
	cmpq	%rsi, %r9
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L30219
.L30289:
	testl	%edi, %edi
	je	.L30212
	movslq	%edi,%rbx
	movq	%rbx, %r10
	salq	$4, %r10
	addq	optab_table+240(%rip), %r10
	cmpl	$1317, 8(%r10)
	je	.L30221
	call	get_mode_alignment
	movl	$128, %edi
	cmpl	%eax, %edi
	jb	.L30221
	movzbq	mode_size(%rbx), %rcx
	movq	%r14, %rax
	xorl	%edx, %edx
	divq	%rcx
	addq	%rax, 16(%rsp)
	movq	%rdx, %r14
.L30221:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L30222
.L30212:
	testq	%r14, %r14
	jne	.L30303
	cmpq	$2, 16(%rsp)
	jbe	.L30209
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L30291
.L30230:
	movslq	%ecx,%rbx
	movzbq	mode_size(%rbx), %rdx
	cmpq	%rbp, %rdx
	cmovb	%ecx, %r13d
	movzbl	mode_wider_mode(%rbx), %ecx
	testl	%ecx, %ecx
	jne	.L30230
.L30291:
	movl	16(%r12), %eax
	testl	%eax, %eax
	jne	.L30209
	movzwl	(%r15), %edx
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L30234
	cmpw	$54, %dx
	je	.L30234
	cmpw	$55, %dx
	je	.L30234
	cmpw	$58, %dx
	je	.L30234
	cmpw	$134, %dx
	je	.L30234
	cmpw	$56, %dx
	je	.L30234
	cmpw	$140, %dx
	je	.L30234
.L30209:
	cmpq	$1, %rbp
	jbe	.L30237
.L30258:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L30294
	.p2align 4,,7
.L30244:
	movslq	%ecx,%r15
	movzbq	mode_size(%r15), %r8
	cmpq	%rbp, %r8
	cmovb	%ecx, %r13d
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L30244
.L30294:
	testl	%r13d, %r13d
	je	.L30237
	movslq	%r13d,%r14
	movq	%r14, %rbp
	salq	$4, %rbp
	addq	optab_table+240(%rip), %rbp
	movl	8(%rbp), %ebx
	cmpl	$1317, %ebx
	je	.L30246
	movl	%r13d, %edi
	call	get_mode_alignment
	movl	$128, %r9d
	cmpl	%eax, %r9d
	jb	.L30246
	movzbq	mode_size(%r14), %rdx
	movslq	%ebx,%rdi
	cmpq	%rdx, 24(%r12)
	leaq	(%rdi,%rdi,4), %r10
	movq	insn_data+16(,%r10,8), %r15
	movq	%rdx, %rbp
	jb	.L30246
	movl	56(%r12), %ecx
.L30256:
	testl	%ecx, %ecx
	je	.L30250
	subq	%rdx, 32(%r12)
.L30250:
	movl	16(%r12), %r11d
	testl	%r11d, %r11d
	je	.L30251
	movq	(%r12), %rdi
	movq	8(%r12), %rdx
	movl	%r13d, %esi
	movq	32(%r12), %rcx
	movl	$1, %r8d
	call	adjust_automodify_address_1
.L30300:
	movl	%r13d, %edx
	movq	%rax, %rbx
	movq	48(%r12), %rdi
	movq	32(%r12), %rsi
	call	*40(%r12)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	*%r15
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L30255
	addq	%rbp, 32(%r12)
.L30255:
	movq	24(%r12), %rbx
	movq	%rbp, %rdx
	subq	%rbp, %rbx
	cmpq	%rbp, %rbx
	movq	%rbx, 24(%r12)
	jae	.L30256
.L30246:
	movzbq	mode_size(%r14), %rbp
	cmpq	$1, %rbp
	ja	.L30258
.L30237:
	cmpq	$0, 24(%r12)
	je	.L30157
	movl	$.LC0, %edi
	movl	$2524, %esi
	movl	$.LC6, %edx
.L30302:
	call	fancy_abort
	.p2align 6,,7
.L30251:
	movq	(%r12), %rdi
	movq	32(%r12), %rdx
	movl	%r13d, %esi
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L30300
.L30234:
	movq	%r15, %rdi
	call	copy_addr_to_reg
	movq	%rax, 8(%r12)
	jmp	.L30209
.L30303:
	movl	$.LC0, %edi
	movl	$1542, %esi
	movl	$.LC5, %edx
	jmp	.L30302
	.p2align 6,,7
.L30207:
	movl	$1, %ecx
	jmp	.L30206
.L30205:
	movl	$1, %esi
	jmp	.L30204
.L30200:
	cmpq	$2, %r12
	ja	.L30184
	jmp	.L30201
.L30179:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, %rbp
	call	protect_from_queue
	cmpq	8(%r15), %rbp
	movq	%rax, %rbx
	je	.L30313
.L30181:
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, %r15
	movq	%rbp, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L30174
.L30313:
	cmpq	16(%r15), %rax
	jne	.L30181
	jmp	.L30174
	.p2align 6,,7
.L30307:
	cmpb	$51, 2(%r15)
	je	.L30172
	movq	8(%r15), %rbx
	cmpw	$71, (%rbx)
	je	.L30314
.L30172:
	cmpl	$66, %eax
	jne	.L30175
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r15), %rax
	movq	%rax, %rbx
	je	.L30174
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, %r15
	movq	%rbx, 8(%rax)
	jmp	.L30174
.L30314:
	movq	8(%rbx), %rsi
	movq	%r15, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%rbx)
	movq	%rax, %rbp
	je	.L30173
	movzbl	2(%r15), %edi
	call	gen_reg_rtx
	movq	%rbp, %rsi
	movq	%rax, %rdi
	movq	%rax, %r15
	call	gen_move_insn
	movq	16(%rbx), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L30174
.L30173:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%rbp, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L30299:
	movq	%rax, %r15
	jmp	.L30174
.L30171:
	cmpq	$0, 16(%r15)
	je	.L30315
	movq	24(%r15), %rsi
	testq	%rsi, %rsi
	je	.L30183
	movq	%rsi, %r15
	jmp	.L30174
.L30183:
	movq	8(%r15), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L30174
.L30315:
	movq	8(%r15), %rdi
	call	copy_to_reg
	jmp	.L30299
.L30166:
	movq	24(%rsp), %rsi
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	%rax, %rbp
	movq	24(%rsp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	%rax, %rbx
	movq	24(%rsp), %rax
	cmpq	8(%rax), %rbp
	je	.L30316
.L30168:
	movq	24(%rsp), %rdi
	call	copy_rtx
	movq	%rax, 24(%rsp)
	movq	%rbp, 8(%rax)
	movq	24(%rsp), %rdi
	movq	%rbx, 16(%rdi)
	jmp	.L30161
.L30316:
	cmpq	16(%rax), %rbx
	jne	.L30168
	jmp	.L30161
	.p2align 6,,7
.L30306:
	jne	.L30162
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, %rbx
	movq	24(%rsp), %rax
	cmpq	8(%rax), %rbx
	je	.L30161
	movq	%rax, %rdi
	call	copy_rtx
	movq	%rax, 24(%rsp)
	movq	%rbx, 8(%rax)
	jmp	.L30161
	.p2align 6,,7
.L30158:
	movq	24(%rsp), %rsi
	cmpq	$0, 16(%rsi)
	je	.L30317
	movq	24(%rsp), %rdx
	movq	24(%rdx), %rdi
	testq	%rdi, %rdi
	je	.L30170
	movq	%rdi, 24(%rsp)
	jmp	.L30161
.L30170:
	movq	24(%rsp), %r13
	movq	8(%r13), %r12
	movzbl	2(%r12), %edi
	call	gen_reg_rtx
	movq	24(%rsp), %r11
	movq	%rax, %rdi
	movq	%rax, 24(%r11)
	movq	24(%rsp), %r10
	movq	8(%r10), %rsi
	call	gen_move_insn
	movq	24(%rsp), %r9
	movq	%rax, %rdi
	movq	16(%r9), %rsi
	call	emit_insn_before
	movq	24(%rsp), %r8
	movq	24(%r8), %rbp
	movq	%rbp, 24(%rsp)
	jmp	.L30161
.L30317:
	movq	8(%rsi), %rdi
	call	copy_to_reg
	movq	%rax, 24(%rsp)
	jmp	.L30161
.L30305:
	movzbl	%al, %edx 
	movzbl	mode_size(%rdx), %ebx
	cmpl	8(%r15), %ebx
	jne	.L30156
	movq	24(%rsp), %rdi
	movq	const_tiny_rtx(,%rdx,8), %rsi
	call	emit_move_insn
	jmp	.L30157
	.p2align 6,,7
.L30304:
	movq	16(%rdi), %rax
	movl	$8, %r14d
	testq	%rax, %rax
	je	.L30153
	movl	32(%rax), %r14d
	jmp	.L30153
.LFE44:
.Lfe44:
	.size	clear_storage,.Lfe44-clear_storage
	.align 2
	.p2align 4,,15
.globl push_block
	.type	push_block,@function
push_block:
.LFB45:
	pushq	%r12
.LCFI220:
	movq	%rdi, %rcx
	movl	%edx, %r12d
	pushq	%rbp
.LCFI221:
	movq	%rcx, %rdx
	movl	$1, %ecx
	pushq	%rbx
.LCFI222:
	movl	%esi, %ebx
	subq	$16, %rsp
.LCFI223:
	movl	ptr_mode(%rip), %esi
	testb	$2, target_flags+3(%rip)
	setne	%al
	movzbl	%al, %edi
	addl	$4, %edi
	call	convert_modes
	movzwl	(%rax), %edx
	movq	%rax, %rcx
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L30324
	cmpw	$54, %dx
	je	.L30324
	cmpw	$55, %dx
	je	.L30324
	cmpw	$58, %dx
	je	.L30324
	cmpw	$134, %dx
	je	.L30324
	cmpw	$56, %dx
	je	.L30324
	cmpw	$140, %dx
	je	.L30324
	cmpw	$61, %dx
	je	.L30360
.L30326:
	testb	$2, target_flags+3(%rip)
	movq	%rcx, %rsi
	setne	%dl
	movzbl	%dl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	testl	%ebx, %ebx
	movq	%rax, %rbp
	jne	.L30361
.L30332:
	movq	%rbp, %rdi
	.p2align 4,,7
.L30359:
	call	anti_adjust_stack
	testl	%ebx, %ebx
	movq	global_rtl+72(%rip), %rax
	je	.L30337
	testl	%r12d, %r12d
	jne	.L30362
.L30337:
	movl	class_narrowest_mode+4(%rip), %edi
	movq	%rax, %rsi
	addq	$16, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	jmp	memory_address
	.p2align 6,,7
.L30362:
	movslq	%ebx,%rsi
	movq	%rax, %rdi
	call	plus_constant_wide
	jmp	.L30337
.L30361:
	xorl	%edi, %edi
	movslq	%ebx,%rsi
	call	gen_rtx_CONST_INT
	movq	%rbp, %r8
	movq	%rbp, %rdx
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	movl	$3, (%rsp)
	setne	%sil
	xorl	%r9d, %r9d
	movzbl	%sil, %edi
	movq	optab_table(%rip), %rsi
	addl	$4, %edi
	call	expand_binop
	movq	%rax, %rbp
	jmp	.L30332
.L30360:
	testl	%ebx, %ebx
	movq	%rax, %rdi
	jne	.L30326
	jmp	.L30359
	.p2align 6,,7
.L30324:
	movq	%rcx, %rdi
	movslq	%ebx,%rsi
	call	plus_constant_wide
	movq	%rax, %rdi
	jmp	.L30359
.LFE45:
.Lfe45:
	.size	push_block,.Lfe45-push_block
	.section	.rodata.str1.1
.LC29:
	.string	"emit_push_insn"
	.text
	.align 2
	.p2align 4,,15
.globl emit_push_insn
	.type	emit_push_insn,@function
emit_push_insn:
.LFB46:
	pushq	%rbp
.LCFI224:
	movq	%rsp, %rbp
.LCFI225:
	pushq	%r15
.LCFI226:
	movq	%rdi, %r15
	pushq	%r14
.LCFI227:
	pushq	%r13
.LCFI228:
	pushq	%r12
.LCFI229:
	pushq	%rbx
.LCFI230:
	subq	$424, %rsp
.LCFI231:
	movq	40(%rbp), %r13
	movl	%r9d, -232(%rbp)
	movl	%esi, -212(%rbp)
	movq	%rdx, -224(%rbp)
	movq	%rcx, -328(%rbp)
	movl	%r8d, -228(%rbp)
	movzwl	(%rdi), %eax
	cmpl	$71, %eax
	je	.L30391
	cmpl	$66, %eax
	je	.L30925
.L30395:
	cmpl	$75, %eax
	je	.L30399
	cmpl	$78, %eax
	je	.L30399
.L30394:
	cmpl	$51, -212(%rbp)
	movq	%r15, -376(%rbp)
	je	.L30926
	movl	-232(%rbp), %eax
	testl	%eax, %eax
	jle	.L30737
	movl	target_flags(%rip), %edx
	testl	$33554432, %edx
	je	.L30738
	movslq	-212(%rbp),%rbx
	movzbl	mode_size(%rbx), %r12d
	sarl	$3, %r12d
.L30739:
	movl	$64, %ecx
	andl	$33554432, %edx
	movl	$32, %eax
	cmove	%eax, %ecx
	je	.L30744
	sarl	$6, %ecx
.L30911:
	movl	-232(%rbp), %eax
	cltd
	idivl	%ecx
	movl	24(%rbp), %eax
	testl	%eax, %eax
	movl	%edx, %ebx
	movl	8(%r13), %edx
	movl	%edx, -268(%rbp)
	je	.L30748
	cmpq	$0, 32(%rbp)
	je	.L30927
.L30749:
	movl	-232(%rbp), %r14d
	movl	48(%rbp), %edi
	xorl	%r13d, %r13d
	movq	-376(%rbp), %rsi
	subl	%ebx, %r14d
	testl	%edi, %edi
	cmovne	%r14d, %r13d
	cmpw	$61, (%rsi)
	je	.L30928
.L30753:
	decl	%r12d
	cmpl	%r14d, %r12d
	jl	.L30707
	subl	%r14d, %r13d
	leal	(%rbx,%r14), %r15d
	leal	(%r13,%r12), %r13d
	.p2align 4,,7
.L30762:
	cmpl	%r15d, %r12d
	jl	.L30756
	testb	$2, target_flags+3(%rip)
	je	.L30759
	movl	-268(%rbp), %r8d
	leal	(%r8,%r13,8), %eax
.L30912:
	movslq	%eax,%rsi
	xorl	%edi, %edi
	call	gen_rtx_CONST_INT
	movl	-212(%rbp), %edx
	movl	%r12d, %esi
	movq	-376(%rbp), %rdi
	movq	%rax, %rbx
	call	operand_subword_force
	xorl	%r9d, %r9d
	movl	-228(%rbp), %r8d
	movq	%rax, %rdi
	movq	56(%rbp), %r11
	movl	word_mode(%rip), %esi
	movq	32(%rbp), %rax
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movq	$0, (%rsp)
	movl	$0, 8(%rsp)
	movq	%rbx, 24(%rsp)
	movq	%r11, 40(%rsp)
	movq	%rax, 16(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	call	emit_push_insn
.L30756:
	decl	%r12d
	decl	%r13d
	cmpl	%r14d, %r12d
	jge	.L30762
.L30707:
	movl	-232(%rbp), %r13d
	testl	%r13d, %r13d
	jle	.L30797
	cmpq	$0, 16(%rbp)
	je	.L30797
	movq	16(%rbp), %rsi
	cmpw	$39, (%rsi)
	je	.L30929
	movl	-232(%rbp), %r12d
	movq	16(%rbp), %r14
	testl	%r12d, %r12d
	movl	8(%r14), %r13d
	je	.L30797
	xorl	%r12d, %r12d
	cmpl	-232(%rbp), %r12d
	jl	.L30855
	.p2align 4,,7
.L30797:
	movl	24(%rbp), %r10d
	testl	%r10d, %r10d
	je	.L30856
	cmpq	$0, 32(%rbp)
	je	.L30930
.L30856:
	cmpq	$0, 56(%rbp)
	je	.L30386
	cmpq	$0, 32(%rbp)
	je	.L30931
.L30386:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
.L30931:
	movq	56(%rbp), %rdi
	call	anti_adjust_stack
	jmp	.L30386
.L30930:
	movl	$1, %edi
	cmpl	$2, %edi
	jne	.L30856
	movslq	24(%rbp),%rsi
	xorl	%edi, %edi
	call	gen_rtx_CONST_INT
	movq	%rax, %rdi
	call	anti_adjust_stack
	jmp	.L30856
	.p2align 6,,7
.L30855:
	movl	word_mode(%rip), %edi
	leal	(%r12,%r13), %esi
	call	gen_rtx_REG
	movl	-212(%rbp), %edx
	movl	%r12d, %esi
	movq	-376(%rbp), %rdi
	movq	%rax, %r15
	incl	%r12d
	call	operand_subword_force
	movq	%r15, %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	cmpl	-232(%rbp), %r12d
	jl	.L30855
	jmp	.L30797
.L30929:
	movq	8(%rsi), %rcx
	movq	8(%rcx), %r10
	movl	(%rcx), %r9d
	movq	%rcx, %rsi
	cmpq	$0, 8(%r10)
	movslq	%r9d,%r8
	sete	%dil
	leaq	15(,%r8,8), %r15
	andq	$-16, %r15
	subq	%r15, %rsp
	leaq	48(%rsp), %rbx
	movzbl	%dil, %edx
	movq	%rbx, -280(%rbp)
	movl	%edx, -384(%rbp)
	movl	-384(%rbp), %eax
	cmpl	%r9d, %eax
	movl	%eax, -380(%rbp)
	jge	.L30886
	.p2align 4,,7
.L30833:
	movslq	-380(%rbp),%r12
	movq	8(%rsi,%r12,8), %r11
	movq	%r12, -288(%rbp)
	movq	8(%r11), %rax
	movq	16(%r11), %rcx
	movzbl	2(%rax), %r15d
	movq	8(%rcx), %r13
	movslq	%r15d,%rsi
	movq	%rsi, -296(%rbp)
	movzbl	mode_size(%rsi), %r14d
	movl	$-1, %esi
	testl	%esi, %esi
	js	.L30806
	mov	%r14d, %r9d
	addq	%r13, %r9
	js	.L30806
	movl	%r13d, %r14d
	xorl	%esi, %r14d
	je	.L30932
.L30806:
	movq	-376(%rbp), %r12
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L30808
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L30810
	cmpw	$54, %dx
	je	.L30810
	cmpw	$55, %dx
	je	.L30810
	cmpw	$58, %dx
	je	.L30810
	cmpw	$134, %dx
	je	.L30810
	cmpw	$56, %dx
	je	.L30810
	cmpw	$140, %dx
	je	.L30810
.L30809:
	movq	-376(%rbp), %r10
	movl	%r15d, %edi
	movzbl	2(%r10), %eax
	testb	%al, %al
	je	.L30915
	movzbl	%al, %edi
.L30915:
	call	gen_reg_rtx
	movq	-376(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	emit_move_insn
.L30808:
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L30933
.L30813:
	cmpw	$65, %dx
	je	.L30934
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L30830
	cmpw	$54, %dx
	je	.L30830
	cmpw	$55, %dx
	je	.L30830
	cmpw	$58, %dx
	je	.L30830
	cmpw	$134, %dx
	je	.L30830
	cmpw	$56, %dx
	je	.L30830
	cmpw	$140, %dx
	je	.L30830
	cmpw	$61, %dx
	je	.L30935
.L30829:
	leal	0(,%r14,8), %edx
	movq	%r12, %rdi
	movl	$1, %ecx
	mov	%edx, %esi
	xorl	%r8d, %r8d
	movl	%r15d, %r9d
	leaq	0(,%r13,8), %rdx
	movl	%r15d, (%rsp)
	movq	$-1, 8(%rsp)
	call	extract_bit_field
.L30916:
	movq	-288(%rbp), %r13
	movq	-280(%rbp), %r11
	movq	%rax, (%r11,%r13,8)
.L30804:
	movq	16(%rbp), %r9
	incl	-380(%rbp)
	movl	-380(%rbp), %eax
	movq	8(%r9), %rcx
	cmpl	(%rcx), %eax
	movq	%rcx, %rsi
	jl	.L30833
.L30886:
	movq	cfun(%rip), %r12
	movq	16(%r12), %r8
	movq	40(%r8), %rbx
	testq	%rbx, %rbx
	je	.L30888
	.p2align 4,,7
.L30839:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L30936
	call	emit_insn
	movq	%rax, 16(%rbx)
.L30838:
	movq	cfun(%rip), %r15
	movq	40(%rbx), %rdi
	movq	16(%r15), %rsi
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%rsi)
	jne	.L30839
	movq	16(%rbp), %rax
	movq	8(%rax), %rcx
.L30888:
	movl	-384(%rbp), %ebx
	cmpl	(%rcx), %ebx
	jge	.L30797
	.p2align 4,,7
.L30845:
	movslq	-384(%rbp),%r9
	salq	$3, %r9
	movq	8(%r9,%rcx), %r8
	movq	-280(%rbp), %rcx
	movq	8(%r8), %rdi
	movq	(%rcx,%r9), %rsi
	call	emit_move_insn
	movq	16(%rbp), %r13
	incl	-384(%rbp)
	movl	-384(%rbp), %edx
	movq	8(%r13), %r11
	cmpl	(%r11), %edx
	movq	%r11, %rcx
	jl	.L30845
	jmp	.L30797
.L30936:
	movq	8(%rdi), %r10
	movq	8(%r10), %r14
	movq	%r14, 16(%rbx)
	call	emit_insn
	jmp	.L30838
.L30935:
	movzbl	2(%r12), %esi
	cmpl	%r15d, %esi
	jne	.L30829
	.p2align 4,,7
.L30830:
	movq	-288(%rbp), %rcx
	movq	-280(%rbp), %r15
	movq	%r12, (%r15,%rcx,8)
	jmp	.L30804
.L30934:
	testq	%r13, %r13
	jne	.L30894
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %rdi
	movzbl	mode_size(%rdi), %r8d
	cmpl	%r8d, %r14d
	je	.L30819
.L30820:
	movzbq	2(%rdx), %rsi
	movzbq	mode_size(%rsi), %r10
	cmpq	%r10, %r13
	je	.L30937
.L30818:
	testq	%r13, %r13
	jne	.L30826
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbx
	movzbq	mode_size(%rbx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %r14
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r14, %rdi
	movl	%r15d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	jmp	.L30916
.L30826:
	movl	$.LC0, %edi
	movl	$2028, %esi
.L30917:
	movl	$.LC12, %edx
.L30918:
	call	fancy_abort
.L30937:
	movq	16(%r12), %r11
	movzbq	2(%r11), %rdx
	movzbl	mode_size(%rdx), %ecx
	cmpl	%ecx, %r14d
	jne	.L30818
.L30819:
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rax
	movq	-280(%rbp), %r8
	testq	%r13, %r13
	setne	%r9b
	leaq	(%r8,%rax,8), %rbx
	movq	8(%r12,%r9,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r13d
	cmpw	$1, %r13w
	jbe	.L30804
	cmpw	$54, %dx
	je	.L30804
	cmpw	$55, %dx
	je	.L30804
	cmpw	$58, %dx
	je	.L30804
	cmpw	$134, %dx
	je	.L30804
	cmpw	$56, %dx
	je	.L30804
	cmpw	$140, %dx
	je	.L30804
	cmpw	$61, %dx
	je	.L30938
.L30824:
	leal	0(,%r14,8), %edi
	movl	%r15d, (%rsp)
	movq	$-1, 8(%rsp)
	mov	%edi, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	movq	(%rbx), %rdi
	xorl	%r8d, %r8d
	movl	%r15d, %r9d
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L30804
.L30938:
	movzbl	2(%rcx), %r12d
	cmpl	%r15d, %r12d
	jne	.L30824
	jmp	.L30804
	.p2align 6,,7
.L30894:
	movq	8(%r12), %rdx
	jmp	.L30820
.L30933:
	movl	%r15d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L30814
	cmpl	%eax, 32(%rdx)
	jae	.L30815
.L30893:
	movzwl	(%r12), %edx
	jmp	.L30813
.L30815:
	movl	%r15d, %edi
	leaq	0(,%r13,8), %rbx
	call	get_mode_alignment
	mov	%eax, %ecx
	movq	%rbx, %rax
	cqto
	idivq	%rcx
	testq	%rdx, %rdx
	jne	.L30893
	movq	-296(%rbp), %r11
	movzbl	mode_size(%r11), %edx
	cmpl	%edx, %r14d
	jne	.L30893
	movl	%r15d, %edi
	call	gen_reg_rtx
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-288(%rbp), %rbx
	movq	-280(%rbp), %r9
	movq	%r12, %rdi
	movl	%r15d, %esi
	movq	%r13, %rdx
	leaq	(%r9,%rbx,8), %r14
	movq	%rax, (%r14)
	call	adjust_address_1
	movq	(%r14), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L30804
	.p2align 6,,7
.L30814:
	cmpl	$8, %eax
	ja	.L30893
	jmp	.L30815
	.p2align 6,,7
.L30810:
	movq	-376(%rbp), %rdi
	movzbl	2(%rdi), %edx
	movzbl	%dl, %r8d
	cmpl	%r15d, %r8d
	je	.L30808
	testb	%dl, %dl
	je	.L30808
	jmp	.L30809
.L30932:
	movl	$.LC0, %edi
	movl	$1978, %esi
	jmp	.L30917
	.p2align 6,,7
.L30759:
	movl	-268(%rbp), %r10d
	leal	(%r10,%r13,4), %eax
	jmp	.L30912
.L30928:
	cmpl	$52, 8(%rsi)
	ja	.L30753
	movzbq	2(%rsi), %rcx
	cmpl	$1, mode_class(,%rcx,4)
	je	.L30753
	movq	%rsi, %rdi
	call	copy_to_reg
	movq	%rax, -376(%rbp)
	jmp	.L30753
.L30927:
	movl	$1, %ecx
	testl	%ecx, %ecx
	je	.L30748
	cmpl	$2, %ecx
	je	.L30748
	movslq	24(%rbp),%rsi
	xorl	%edi, %edi
	call	gen_rtx_CONST_INT
	movq	%rax, %rdi
	call	anti_adjust_stack
.L30748:
	cmpq	$0, 32(%rbp)
	movl	$0, %eax
	cmove	%eax, %ebx
	jmp	.L30749
.L30744:
	cmpl	$-1, %ecx
	leal	31(%rcx), %esi
	cmovle	%esi, %ecx
	sarl	$5, %ecx
	jmp	.L30911
.L30738:
	movslq	-212(%rbp),%r15
	movzbl	mode_size(%r15), %r12d
	sarl	$2, %r12d
	jmp	.L30739
.L30737:
	movl	24(%rbp), %r12d
	testl	%r12d, %r12d
	je	.L30764
	cmpq	$0, 32(%rbp)
	je	.L30939
.L30765:
	cmpw	$54, (%r13)
	je	.L30940
	testb	$2, target_flags+3(%rip)
	movq	32(%rbp), %rdx
	movl	$75, %edi
	setne	%r14b
	movq	%r13, %rcx
	movzbl	%r14b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L30914:
	movl	-212(%rbp), %edi
	movq	%rax, %rsi
	call	memory_address
	movl	-212(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	cmpq	$0, -224(%rbp)
	movq	%rax, %rbx
	je	.L30796
	movq	-224(%rbp), %rsi
	movq	%rax, %rdi
	movl	$1, %edx
	call	set_mem_attributes
.L30919:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
.L30796:
	movq	-376(%rbp), %rsi
	movq	%rbx, %rdi
	call	emit_move_insn
	jmp	.L30707
.L30940:
	movq	32(%rbp), %rdi
	movq	8(%r13), %rsi
	call	plus_constant_wide
	jmp	.L30914
.L30939:
	movl	$1, %ecx
	testl	%ecx, %ecx
	je	.L30764
	cmpl	$2, %ecx
	je	.L30764
	movslq	24(%rbp),%rsi
	xorl	%edi, %edi
	call	gen_rtx_CONST_INT
	movq	%rax, %rdi
	call	anti_adjust_stack
.L30764:
	cmpq	$0, 32(%rbp)
	jne	.L30765
	movl	target_flags(%rip), %eax
	testl	$6144, %eax
	jne	.L30765
	testl	$33554432, %eax
	movq	-376(%rbp), %r12
	je	.L30766
	movslq	-212(%rbp),%rdx
	movzbl	mode_size(%rdx), %r14d
	leal	7(%r14), %ecx
	andl	$-8, %ecx
.L30767:
	movq	cfun(%rip), %rbx
	testb	$2, target_flags+3(%rip)
	movq	16(%rbx), %r9
	leaq	8(%r9), %rdi
	movl	8(%r9), %esi
	je	.L30768
	movzbl	mode_size(%rdx), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L30913:
	movq	%rdx, %r15
	leal	(%rax,%rsi), %r8d
	salq	$4, %r15
	movl	%r8d, (%rdi)
	addq	optab_table+384(%rip), %r15
	movl	8(%r15), %eax
	cmpl	$1317, %eax
	je	.L30770
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rdx
	movq	insn_data+24(,%rdx,8), %rsi
	movq	(%rsi), %rax
	testq	%rax, %rax
	je	.L30771
	movq	-376(%rbp), %rdi
	movl	-212(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L30941
.L30771:
	leaq	(%rbx,%rbx,4), %rcx
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%rcx,8)
.L30895:
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L30707
.L30941:
	movl	-212(%rbp), %edi
	movq	-376(%rbp), %rsi
	call	force_reg
	movq	%rax, %r12
	jmp	.L30771
.L30770:
	movzbl	mode_size(%rdx), %edi
	cmpl	%ecx, %edi
	je	.L30942
	mov	%ecx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r11b
	movzbl	%r11b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L30778:
	movl	-212(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	cmpq	$0, -224(%rbp)
	movq	%rax, %rbx
	je	.L30796
	movq	-224(%rbp), %rsi
	movq	%rax, %rdi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %r12d
	testl	%r12d, %r12d
	je	.L30796
	jmp	.L30919
.L30942:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%r10b
	movzbl	%r10b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L30778
.L30768:
	movzbl	mode_size(%rdx), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L30913
.L30766:
	movslq	-212(%rbp),%rdx
	movzbl	mode_size(%rdx), %r13d
	leal	1(%r13), %ecx
	andl	$-2, %ecx
	jmp	.L30767
	.p2align 6,,7
.L30926:
	movl	target_flags(%rip), %edx
	movl	%edx, %eax
	testl	$33554432, %eax
	je	.L30405
	movl	-232(%rbp), %edx
	sall	$3, %edx
.L30406:
	testl	$33554432, %eax
	je	.L30407
	cmpl	$-1, %edx
	leal	7(%rdx), %ecx
	movl	%edx, %ebx
	cmovg	%edx, %ecx
	andl	$-8, %ecx
	subl	%ecx, %ebx
	movl	%ebx, %eax
.L30408:
	cmpq	$0, -328(%rbp)
	je	.L30943
	movl	%edx, %ebx
	subl	%eax, %ebx
	movl	-232(%rbp), %eax
	testl	%eax, %eax
	jne	.L30944
.L30412:
	movl	48(%rbp), %r8d
	xorl	%r14d, %r14d
	testl	%r8d, %r8d
	cmovne	%ebx, %r14d
	cmpq	$0, 32(%rbp)
	je	.L30945
.L30415:
	movl	-232(%rbp), %eax
	testl	%eax, %eax
	je	.L30535
	movq	-328(%rbp), %r12
	cmpw	$54, (%r12)
	je	.L30946
	movslq	%ebx,%rsi
	xorl	%edi, %edi
	call	gen_rtx_CONST_INT
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	-328(%rbp), %rdx
	movq	optab_table+16(%rip), %rsi
	movq	%rax, %rcx
	movzbl	2(%rdx), %edi
	movq	-328(%rbp), %rdx
	movl	$3, (%rsp)
	call	expand_binop
.L30902:
	movq	%rax, -328(%rbp)
.L30535:
	cmpq	$0, 32(%rbp)
	je	.L30947
	cmpw	$54, (%r13)
	je	.L30948
	testb	$2, target_flags+3(%rip)
	movq	32(%rbp), %rdx
	movl	$75, %edi
	setne	%r12b
	movq	%r13, %rcx
	movzbl	%r12b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movslq	%r14d,%rsi
	movq	%rax, %rdi
.L30904:
	call	plus_constant_wide
	movl	$51, %edi
	movq	%rax, %rsi
	call	memory_address
	movq	%rax, -368(%rbp)
.L30582:
	movq	-368(%rbp), %rsi
	movl	$51, %edi
	call	gen_rtx_MEM
	cmpq	$0, -224(%rbp)
	movq	%rax, -240(%rbp)
	je	.L30589
	movq	-224(%rbp), %rsi
	movq	%rax, %rdi
	movl	$1, %edx
	call	set_mem_attributes
	movq	-240(%rbp), %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
.L30590:
	movq	-328(%rbp), %rdx
	cmpw	$54, (%rdx)
	je	.L30949
.L30591:
	shrl	$3, -228(%rbp)
	xorl	%edi, %edi
	mov	-228(%rbp), %esi
	call	gen_rtx_CONST_INT
	movl	class_narrowest_mode+4(%rip), %ebx
	movq	%rax, -256(%rbp)
	testl	%ebx, %ebx
	je	.L30883
	.p2align 4,,7
.L30724:
	movslq	%ebx,%r12
	movl	movstr_optab(,%r12,4), %edx
	cmpl	$1317, %edx
	je	.L30711
	movq	-328(%rbp), %rcx
	cmpw	$54, (%rcx)
	je	.L30950
.L30715:
	testb	$2, target_flags+3(%rip)
	je	.L30716
	cmpw	$63, mode_bitsize(%r12,%r12)
.L30910:
	jbe	.L30711
.L30714:
	movslq	%edx,%r14
	leaq	(%r14,%r14,4), %r9
	movq	insn_data+24(,%r9,8), %r13
	movq	(%r13), %rax
	testq	%rax, %rax
	je	.L30718
	movq	-240(%rbp), %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L30711
.L30718:
	movq	24(%r13), %rax
	testq	%rax, %rax
	jne	.L30951
.L30719:
	movq	72(%r13), %rax
	testq	%rax, %rax
	je	.L30720
	xorl	%esi, %esi
	movq	-256(%rbp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L30711
.L30720:
	movq	-328(%rbp), %rsi
	movl	%ebx, %edi
	movl	$1, %edx
	call	convert_to_mode
	movq	%rax, -360(%rbp)
	call	get_last_insn
	movq	%rax, -264(%rbp)
	movq	48(%r13), %rax
	testq	%rax, %rax
	jne	.L30952
.L30721:
	leaq	(%r14,%r14,4), %rbx
	xorl	%eax, %eax
	movq	-240(%rbp), %rdi
	movq	%r15, %rsi
	movq	-360(%rbp), %rdx
	movq	-256(%rbp), %rcx
	call	*insn_data+16(,%rbx,8)
	testq	%rax, %rax
	jne	.L30895
	movq	-264(%rbp), %rdi
	call	delete_insns_since
.L30711:
	movzbl	mode_wider_mode(%r12), %ebx
	testl	%ebx, %ebx
	jne	.L30724
.L30883:
	testb	$16, target_flags+1(%rip)
	je	.L30953
.L30725:
	movq	cfun(%rip), %r9
	movq	sizetype_tab(%rip), %r14
	movq	-328(%rbp), %rsi
	movq	16(%r9), %r13
	incl	4(%r13)
	movzbl	61(%r14), %eax
	movzbl	17(%r14), %edx
	shrb	$1, %al
	shrb	$5, %dl
	andl	$1, %edx
	movzbl	%al, %edi
	call	convert_to_mode
	movl	$3, %ecx
	movq	sizetype_tab(%rip), %rdi
	movl	target_flags(%rip), %r11d
	movq	8(%r15), %r8
	movq	%rax, 16(%rsp)
	andl	$33554432, %r11d
	movq	%r8, (%rsp)
	setne	%r10b
	movq	-368(%rbp), %r8
	xorl	%eax, %eax
	movzbl	%r10b, %r9d
	addl	$4, %r9d
	movl	%r9d, 8(%rsp)
	movzbl	61(%rdi), %edx
	movq	libfunc_table+88(%rip), %rdi
	shrb	$1, %dl
	movzbl	%dl, %esi
	xorl	%edx, %edx
	movl	%esi, 24(%rsp)
	xorl	%esi, %esi
	call	emit_library_call
	movq	cfun(%rip), %r12
	movq	16(%r12), %r15
	decl	4(%r15)
	jmp	.L30707
.L30953:
	movq	global_rtl+64(%rip), %rdi
	movq	-368(%rbp), %rsi
	call	reg_mentioned_p
	testl	%eax, %eax
	jne	.L30727
	movq	global_rtl+72(%rip), %rdi
	movq	-368(%rbp), %rsi
	call	reg_mentioned_p
	testl	%eax, %eax
	je	.L30725
.L30727:
	movq	-368(%rbp), %rdi
	call	copy_to_reg
	movq	%rax, -368(%rbp)
	jmp	.L30725
.L30952:
	movq	-360(%rbp), %rdi
	movl	%ebx, %esi
	call	*%rax
	testl	%eax, %eax
	jne	.L30721
	movq	-360(%rbp), %rsi
	movl	%ebx, %edi
	call	copy_to_mode_reg
	movq	%rax, -360(%rbp)
	jmp	.L30721
.L30951:
	movq	%r15, %rdi
	movl	$51, %esi
	call	*%rax
	testl	%eax, %eax
	je	.L30711
	jmp	.L30719
.L30716:
	cmpw	$31, mode_bitsize(%r12,%r12)
	jmp	.L30910
.L30950:
	movq	mode_mask_array(,%r12,8), %r13
	shrq	$1, %r13
	cmpq	%r13, 8(%rcx)
	jbe	.L30714
	jmp	.L30715
.L30949:
	mov	8(%rdx), %r12d
	xorl	%r13d, %r13d
	movl	$17, %esi
	movl	$128, %r14d
	.p2align 4,,7
.L30604:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L30872
	.p2align 4,,7
.L30601:
	movslq	%ecx,%r11
	movzbq	mode_size(%r11), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r11), %ecx
	testl	%ecx, %ecx
	jne	.L30601
.L30872:
	testl	%edi, %edi
	je	.L30594
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L30603
	call	get_mode_alignment
	cmpl	%eax, %r14d
	jb	.L30603
	movzbq	mode_size(%rbx), %rdi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rdi
	addq	%rax, %r13
	movq	%rdx, %r12
.L30603:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L30604
.L30594:
	testq	%r12, %r12
	jne	.L30923
	movl	optimize_size(%rip), %r14d
	testl	%r14d, %r14d
	jne	.L30607
	movq	ix86_cost(%rip), %rbx
	mov	40(%rbx), %r8d
	cmpq	%r8, %r13
	jae	.L30591
.L30608:
	testb	$2, target_flags+3(%rip)
	movq	8(%r15), %r8
	setne	%r12b
	movq	-328(%rbp), %r11
	cmpq	$0, -240(%rbp)
	movq	8(%r11), %r13
	movq	%r8, -176(%rbp)
	movq	$0, -152(%rbp)
	movzbl	%r12b, %r10d
	movl	$0, -340(%rbp)
	leal	5(,%r10,4), %r12d
	je	.L30611
	movq	-240(%rbp), %rcx
	movq	-240(%rbp), %rdi
	movq	8(%rcx), %r9
	xorl	%ecx, %ecx
	movq	%rdi, -208(%rbp)
	movzwl	(%r9), %edx
	movq	%r9, -336(%rbp)
	leal	-96(%rdx), %esi
	cmpw	$1, %si
	jbe	.L30613
	cmpw	$99, %dx
	je	.L30613
	cmpw	$98, %dx
	je	.L30613
.L30612:
	movq	-336(%rbp), %r14
	movl	%ecx, -192(%rbp)
	xorl	%edx, %edx
	movzwl	(%r14), %eax
	cmpw	$96, %ax
	je	.L30615
	cmpw	$98, %ax
	je	.L30615
.L30614:
	movl	%edx, -144(%rbp)
.L30616:
	movq	-336(%rbp), %rdx
	movq	%r15, -184(%rbp)
	xorl	%ecx, %ecx
	movq	%rdx, -200(%rbp)
	movzwl	(%r8), %edx
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L30618
	cmpw	$99, %dx
	je	.L30618
	cmpw	$98, %dx
	je	.L30618
.L30617:
	movl	-144(%rbp), %ebx
	movl	%ecx, -168(%rbp)
	movl	$0, -164(%rbp)
	movl	$0, -188(%rbp)
	testl	%ebx, %ebx
	je	.L30619
	movq	%r13, -152(%rbp)
.L30619:
	movl	-168(%rbp), %r10d
	movq	%r13, -160(%rbp)
	testl	%r10d, %r10d
	je	.L30621
	movl	-192(%rbp), %r11d
	testl	%r11d, %r11d
	jne	.L30620
.L30621:
	xorl	%r14d, %r14d
	movl	$17, %esi
	movl	$128, %r15d
.L30634:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L30875
	.p2align 4,,7
.L30631:
	movslq	%ecx,%r9
	movzbq	mode_size(%r9), %rdx
	cmpq	%rsi, %rdx
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L30631
.L30875:
	testl	%edi, %edi
	je	.L30624
	movslq	%edi,%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	addq	optab_table+240(%rip), %rsi
	cmpl	$1317, 8(%rsi)
	je	.L30633
	movq	%r8, -392(%rbp)
	call	get_mode_alignment
	movq	-392(%rbp), %r8
	cmpl	%eax, %r15d
	jb	.L30633
	movzbq	mode_size(%rbx), %rcx
	movq	%r13, %rax
	xorl	%edx, %edx
	divq	%rcx
	addq	%rax, %r14
	movq	%rdx, %r13
.L30633:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L30634
.L30624:
	testq	%r13, %r13
	jne	.L30923
	cmpq	$2, %r14
	jbe	.L30620
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L30877
.L30642:
	movslq	%ecx,%r14
	movzbl	mode_size(%r14), %r15d
	cmpl	%r12d, %r15d
	cmovae	-340(%rbp), %ecx
	movl	%ecx, -340(%rbp)
	movzbl	mode_wider_mode(%r14), %ecx
	testl	%ecx, %ecx
	jne	.L30642
.L30877:
	movl	-168(%rbp), %eax
	testl	%eax, %eax
	jne	.L30648
	movzwl	(%r8), %edx
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L30646
	cmpw	$54, %dx
	je	.L30646
	cmpw	$55, %dx
	je	.L30646
	cmpw	$58, %dx
	je	.L30646
	cmpw	$134, %dx
	je	.L30646
	cmpw	$56, %dx
	je	.L30646
	cmpw	$140, %dx
	je	.L30646
.L30648:
	movl	-192(%rbp), %r8d
	testl	%r8d, %r8d
	jne	.L30620
	movq	-336(%rbp), %r11
	movzwl	(%r11), %edx
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L30650
	cmpw	$54, %dx
	je	.L30650
	cmpw	$55, %dx
	je	.L30650
	cmpw	$58, %dx
	je	.L30650
	cmpw	$134, %dx
	je	.L30650
	cmpw	$56, %dx
	je	.L30650
	cmpw	$140, %dx
	je	.L30650
.L30620:
	cmpl	$1, %r12d
	jbe	.L30653
.L30704:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L30880
	.p2align 4,,7
.L30660:
	movslq	%ecx,%r9
	movzbl	mode_size(%r9), %edx
	cmpl	%r12d, %edx
	cmovae	-340(%rbp), %ecx
	movl	%ecx, -340(%rbp)
	movzbl	mode_wider_mode(%r9), %ecx
	testl	%ecx, %ecx
	jne	.L30660
.L30880:
	movl	-340(%rbp), %eax
	testl	%eax, %eax
	je	.L30653
	movslq	-340(%rbp),%r13
	movq	%r13, %r12
	salq	$4, %r12
	addq	optab_table+240(%rip), %r12
	movl	8(%r12), %ebx
	cmpl	$1317, %ebx
	je	.L30662
	movl	-340(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %esi
	cmpl	%eax, %esi
	jb	.L30662
	movzbq	mode_size(%r13), %rdx
	movslq	%ebx,%r14
	leaq	-208(%rbp), %r12
	leaq	(%r14,%r14,4), %rcx
	cmpq	%rdx, -160(%rbp)
	movq	$0, -352(%rbp)
	movq	insn_data+16(,%rcx,8), %rdi
	movq	%rdx, %r15
	movq	%rdi, -248(%rbp)
	jb	.L30662
	movl	-144(%rbp), %ecx
.L30702:
	testl	%ecx, %ecx
	je	.L30666
	subq	%rdx, 56(%r12)
.L30666:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L30667
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L30668
	movl	-340(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L30905:
	movq	%rax, -352(%rbp)
.L30667:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L30670
	movq	24(%r12), %rdi
	movl	-340(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L30906:
	cmpq	$0, (%r12)
	movq	%rax, %r14
	jne	.L30954
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %esi
	je	.L30676
	movzbl	mode_size(%r13), %ebx
	leal	7(%rbx), %edx
	andl	$-8, %edx
.L30677:
	movq	cfun(%rip), %r11
	andl	$33554432, %esi
	movq	16(%r11), %r10
	leaq	8(%r10), %rdi
	movl	8(%r10), %ecx
	je	.L30678
	movzbl	mode_size(%r13), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L30907:
	movq	%r13, %r9
	leal	(%rax,%rcx), %esi
	salq	$4, %r9
	movl	%esi, (%rdi)
	addq	optab_table+384(%rip), %r9
	movl	8(%r9), %eax
	cmpl	$1317, %eax
	je	.L30680
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rdi
	movq	insn_data+24(,%rdi,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L30681
	movq	%r14, %rdi
	movl	-340(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L30955
.L30681:
	leaq	(%rbx,%rbx,4), %rcx
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%rcx,8)
.L30909:
	movq	%rax, %rdi
	call	emit_insn
.L30700:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L30701
	addq	%r15, 56(%r12)
.L30701:
	movq	48(%r12), %r14
	movq	%r15, %rdx
	subq	%r15, %r14
	cmpq	%r15, %r14
	movq	%r14, 48(%r12)
	jae	.L30702
.L30662:
	movzbl	mode_size(%r13), %r12d
	cmpl	$1, %r12d
	ja	.L30704
.L30653:
	cmpq	$0, -160(%rbp)
.L30924:
	je	.L30707
	movl	$.LC0, %edi
	movl	$1503, %esi
	movl	$.LC10, %edx
	jmp	.L30918
	.p2align 6,,7
.L30955:
	movl	-340(%rbp), %edi
	movq	%r14, %rsi
	call	force_reg
	movq	%rax, %r14
	jmp	.L30681
.L30680:
	movzbl	mode_size(%r13), %ebx
	cmpl	%edx, %ebx
	je	.L30956
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r10b
	movzbl	%r10b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r8b
	movzbl	%r8b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L30908:
	movl	-340(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%r11d, %r11d
	testq	%r11, %r11
	movq	%rax, %rbx
	je	.L30697
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L30957
.L30697:
	movq	%rbx, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
	jmp	.L30700
.L30957:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L30697
.L30956:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L30908
.L30678:
	movzbl	mode_size(%r13), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L30907
.L30676:
	movzbl	mode_size(%r13), %r8d
	leal	1(%r8), %edx
	andl	$-2, %edx
	jmp	.L30677
.L30954:
	movq	%rax, %rsi
	movq	-352(%rbp), %rdi
	xorl	%eax, %eax
	call	*-248(%rbp)
	jmp	.L30909
.L30670:
	movq	24(%r12), %rdi
	movl	-340(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L30906
.L30668:
	movl	-340(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L30905
.L30650:
	movq	-336(%rbp), %rdi
	call	copy_addr_to_reg
	movq	%rax, -200(%rbp)
	jmp	.L30620
.L30646:
	movq	%r8, %rdi
	call	copy_addr_to_reg
	movq	%rax, -176(%rbp)
	jmp	.L30648
.L30923:
	movl	$.LC0, %edi
	movl	$1542, %esi
	movl	$.LC5, %edx
	jmp	.L30918
	.p2align 6,,7
.L30618:
	movl	$1, %ecx
	jmp	.L30617
.L30615:
	movl	$1, %edx
	jmp	.L30614
.L30613:
	movl	$1, %ecx
	jmp	.L30612
.L30611:
	movq	$0, -336(%rbp)
	movq	$0, -208(%rbp)
	movl	$1, -192(%rbp)
	movl	$1, -144(%rbp)
	jmp	.L30616
.L30607:
	cmpq	$2, %r13
	ja	.L30591
	jmp	.L30608
.L30589:
	movq	-240(%rbp), %rdi
	movl	-228(%rbp), %esi
	call	set_mem_align
	jmp	.L30590
.L30948:
	movslq	%r14d,%rsi
	movq	32(%rbp), %rdi
	addq	8(%r13), %rsi
	jmp	.L30904
.L30947:
	movl	$1, %eax
	movq	-328(%rbp), %rdx
	movl	ptr_mode(%rip), %esi
	cmpl	$2, %eax
	movl	$1, %ecx
	sete	%dil
	testb	$2, target_flags+3(%rip)
	setne	%r9b
	movzbl	%dil, %r12d
	movzbl	%r9b, %edi
	addl	$4, %edi
	call	convert_modes
	movzwl	(%rax), %edx
	movq	%rax, %rcx
	leal	-67(%rdx), %r14d
	cmpw	$1, %r14w
	jbe	.L30544
	cmpw	$54, %dx
	je	.L30544
	cmpw	$55, %dx
	je	.L30544
	cmpw	$58, %dx
	je	.L30544
	cmpw	$134, %dx
	je	.L30544
	cmpw	$56, %dx
	je	.L30544
	cmpw	$140, %dx
	je	.L30544
	cmpw	$61, %dx
	je	.L30958
.L30546:
	testb	$2, target_flags+3(%rip)
	movq	%rcx, %rsi
	setne	%bl
	movzbl	%bl, %edi
	addl	$4, %edi
	call	copy_to_mode_reg
	movl	24(%rbp), %r8d
	movq	%rax, %rbx
	testl	%r8d, %r8d
	jne	.L30959
.L30552:
	movq	%rbx, %rdi
.L30903:
	call	anti_adjust_stack
	movl	24(%rbp), %r13d
	movq	global_rtl+72(%rip), %rax
	testl	%r13d, %r13d
	je	.L30559
	testl	%r12d, %r12d
	jne	.L30960
.L30559:
	movl	class_narrowest_mode+4(%rip), %edi
	movq	%rax, %rsi
	call	memory_address
	movl	$0, 24(%rbp)
	movq	%rax, -368(%rbp)
	jmp	.L30582
.L30960:
	movslq	24(%rbp),%rsi
	movq	%rax, %rdi
	call	plus_constant_wide
	jmp	.L30559
.L30959:
	movslq	24(%rbp),%rsi
	xorl	%edi, %edi
	call	gen_rtx_CONST_INT
	movq	%rbx, %r8
	movq	%rbx, %rdx
	testb	$2, target_flags+3(%rip)
	movq	optab_table(%rip), %rsi
	movq	%rax, %rcx
	setne	%r10b
	movl	$3, (%rsp)
	xorl	%r9d, %r9d
	movzbl	%r10b, %edi
	addl	$4, %edi
	call	expand_binop
	movq	%rax, %rbx
	jmp	.L30552
.L30958:
	movl	24(%rbp), %eax
	testl	%eax, %eax
	jne	.L30546
	movq	%rcx, %rdi
	jmp	.L30903
	.p2align 6,,7
.L30544:
	movslq	24(%rbp),%rsi
	movq	%rcx, %rdi
	call	plus_constant_wide
	movq	%rax, %rdi
	jmp	.L30903
.L30946:
	movq	-328(%rbp), %rcx
	movslq	%ebx,%r11
	xorl	%edi, %edi
	movq	8(%rcx), %rsi
	subq	%r11, %rsi
	call	gen_rtx_CONST_INT
	jmp	.L30902
.L30945:
	testl	$6144, target_flags(%rip)
	jne	.L30415
	movq	-328(%rbp), %rax
	cmpw	$54, (%rax)
	jne	.L30415
	testl	%r14d, %r14d
	jne	.L30415
	movl	8(%rax), %eax
	xorl	%r9d, %r9d
	movl	$17, %esi
	movl	%eax, %r8d
	subl	%ebx, %r8d
.L30428:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L30860
.L30425:
	movslq	%ecx,%r10
	movzbq	mode_size(%r10), %r11
	cmpq	%rsi, %r11
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r10), %ecx
	testl	%ecx, %ecx
	jne	.L30425
.L30860:
	testl	%edi, %edi
	je	.L30418
	movslq	%edi,%r12
	movq	%r12, %rdx
	salq	$4, %rdx
	addq	optab_table+240(%rip), %rdx
	cmpl	$1317, 8(%rdx)
	je	.L30427
	movq	%r8, -392(%rbp)
	movq	%r9, -400(%rbp)
	call	get_mode_alignment
	movl	$128, %r9d
	movq	-392(%rbp), %r8
	cmpl	%eax, %r9d
	movq	-400(%rbp), %r9
	jb	.L30427
	movzbq	mode_size(%r12), %rsi
	movq	%r8, %rax
	xorl	%edx, %edx
	divq	%rsi
	addq	%rax, %r9
	movq	%rdx, %r8
.L30427:
	movzbq	mode_size(%r12), %rsi
	cmpq	$1, %rsi
	ja	.L30428
.L30418:
	testq	%r8, %r8
	jne	.L30923
	movl	optimize_size(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L30431
	movq	ix86_cost(%rip), %r10
	mov	40(%r10), %r8d
	cmpq	%r8, %r9
	jae	.L30415
.L30432:
	movl	target_flags(%rip), %ecx
	movq	-328(%rbp), %r11
	testl	$33554432, %ecx
	movq	8(%r11), %rdx
	je	.L30433
	leaq	7(%rdx), %rax
	andq	$-8, %rax
.L30897:
	cmpq	%rdx, %rax
	jne	.L30415
	movl	24(%rbp), %r13d
	testl	%r13d, %r13d
	je	.L30435
	cmpq	$0, 32(%rbp)
	je	.L30961
.L30435:
	movslq	%ebx,%r9
	movq	%rdx, %r12
	movq	8(%r15), %r14
	subq	%r9, %r12
	movq	%r15, -104(%rbp)
	movq	$0, -72(%rbp)
	andl	$33554432, %ecx
	movq	$0, -128(%rbp)
	movl	$1, -112(%rbp)
	setne	%dl
	movq	%r14, -96(%rbp)
	movl	$1, -64(%rbp)
	movq	$0, -120(%rbp)
	xorl	%ecx, %ecx
	movl	$0, -308(%rbp)
	movzbl	%dl, %ebx
	movzwl	(%r14), %edx
	leal	5(,%rbx,4), %r13d
	leal	-96(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L30445
	cmpw	$99, %dx
	je	.L30445
	cmpw	$98, %dx
	je	.L30445
.L30444:
	movl	-64(%rbp), %eax
	movl	%ecx, -88(%rbp)
	movl	$0, -84(%rbp)
	movl	$0, -108(%rbp)
	testl	%eax, %eax
	je	.L30446
	movq	%r12, -72(%rbp)
.L30446:
	movl	-88(%rbp), %edi
	movq	%r12, -80(%rbp)
	testl	%edi, %edi
	je	.L30448
	movl	-112(%rbp), %esi
	testl	%esi, %esi
	jne	.L30447
.L30448:
	xorl	%r15d, %r15d
	movl	$17, %esi
.L30461:
	movl	class_narrowest_mode+4(%rip), %ecx
	xorl	%edi, %edi
	testl	%ecx, %ecx
	je	.L30863
.L30458:
	movslq	%ecx,%r8
	movzbq	mode_size(%r8), %r10
	cmpq	%rsi, %r10
	cmovb	%ecx, %edi
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L30458
.L30863:
	testl	%edi, %edi
	je	.L30451
	movslq	%edi,%rbx
	movq	%rbx, %rcx
	salq	$4, %rcx
	addq	optab_table+240(%rip), %rcx
	cmpl	$1317, 8(%rcx)
	je	.L30460
	call	get_mode_alignment
	movl	$128, %r11d
	cmpl	%eax, %r11d
	jb	.L30460
	movzbq	mode_size(%rbx), %rdi
	movq	%r12, %rax
	xorl	%edx, %edx
	divq	%rdi
	addq	%rax, %r15
	movq	%rdx, %r12
.L30460:
	movzbq	mode_size(%rbx), %rsi
	cmpq	$1, %rsi
	ja	.L30461
.L30451:
	testq	%r12, %r12
	jne	.L30923
	cmpq	$2, %r15
	jbe	.L30447
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L30865
.L30469:
	movslq	%ecx,%r15
	movzbl	mode_size(%r15), %ebx
	cmpl	%r13d, %ebx
	cmovae	-308(%rbp), %ecx
	movl	%ecx, -308(%rbp)
	movzbl	mode_wider_mode(%r15), %ecx
	testl	%ecx, %ecx
	jne	.L30469
.L30865:
	movl	-88(%rbp), %eax
	testl	%eax, %eax
	jne	.L30475
	movzwl	(%r14), %edx
	leal	-67(%rdx), %esi
	cmpw	$1, %si
	jbe	.L30473
	cmpw	$54, %dx
	je	.L30473
	cmpw	$55, %dx
	je	.L30473
	cmpw	$58, %dx
	je	.L30473
	cmpw	$134, %dx
	je	.L30473
	cmpw	$56, %dx
	je	.L30473
	cmpw	$140, %dx
	je	.L30473
.L30475:
	movl	-112(%rbp), %eax
	testl	%eax, %eax
	jne	.L30447
	movl	0, %edx
	leal	-67(%rdx), %r14d
	cmpw	$1, %r14w
	jbe	.L30477
	cmpw	$54, %dx
	je	.L30477
	cmpw	$55, %dx
	je	.L30477
	cmpw	$58, %dx
	je	.L30477
	cmpw	$134, %dx
	je	.L30477
	cmpw	$56, %dx
	je	.L30477
	cmpw	$140, %dx
	je	.L30477
.L30447:
	cmpl	$1, %r13d
	jbe	.L30480
.L30531:
	movl	class_narrowest_mode+4(%rip), %ecx
	testl	%ecx, %ecx
	je	.L30868
.L30487:
	movslq	%ecx,%r8
	movzbl	mode_size(%r8), %edx
	cmpl	%r13d, %edx
	cmovae	-308(%rbp), %ecx
	movl	%ecx, -308(%rbp)
	movzbl	mode_wider_mode(%r8), %ecx
	testl	%ecx, %ecx
	jne	.L30487
.L30868:
	movl	-308(%rbp), %eax
	testl	%eax, %eax
	je	.L30480
	movslq	-308(%rbp),%r14
	movq	%r14, %r13
	salq	$4, %r13
	addq	optab_table+240(%rip), %r13
	movl	8(%r13), %ebx
	cmpl	$1317, %ebx
	je	.L30489
	movl	-308(%rbp), %edi
	call	get_mode_alignment
	movl	$128, %r10d
	cmpl	%eax, %r10d
	jb	.L30489
	movzbq	mode_size(%r14), %rdx
	movslq	%ebx,%r11
	leaq	-128(%rbp), %r12
	cmpq	%rdx, -80(%rbp)
	leaq	(%r11,%r11,4), %rcx
	movq	$0, -320(%rbp)
	movq	insn_data+16(,%rcx,8), %r15
	movq	%rdx, -304(%rbp)
	jb	.L30489
	movl	-64(%rbp), %ecx
.L30529:
	testl	%ecx, %ecx
	je	.L30493
	subq	%rdx, 56(%r12)
.L30493:
	movq	(%r12), %rdi
	testq	%rdi, %rdi
	je	.L30494
	movl	16(%r12), %eax
	testl	%eax, %eax
	je	.L30495
	movl	-308(%rbp), %esi
	movq	8(%r12), %rdx
	movl	$1, %r8d
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L30898:
	movq	%rax, -320(%rbp)
.L30494:
	movl	40(%r12), %eax
	testl	%eax, %eax
	je	.L30497
	movq	24(%r12), %rdi
	movl	-308(%rbp), %esi
	movl	$1, %r8d
	movq	32(%r12), %rdx
	movq	56(%r12), %rcx
	call	adjust_automodify_address_1
.L30899:
	cmpq	$0, (%r12)
	movq	%rax, %r13
	jne	.L30962
	movl	target_flags(%rip), %r9d
	testl	$33554432, %r9d
	movl	%r9d, %esi
	je	.L30503
	movzbl	mode_size(%r14), %edi
	leal	7(%rdi), %edx
	andl	$-8, %edx
.L30504:
	movq	cfun(%rip), %r10
	andl	$33554432, %esi
	movq	16(%r10), %r8
	leaq	8(%r8), %rdi
	movl	8(%r8), %ecx
	je	.L30505
	movzbl	mode_size(%r14), %eax
	addl	$7, %eax
	andl	$-8, %eax
.L30900:
	movq	%r14, %rsi
	leal	(%rax,%rcx), %r11d
	salq	$4, %rsi
	movl	%r11d, (%rdi)
	addq	optab_table+384(%rip), %rsi
	movl	8(%rsi), %eax
	cmpl	$1317, %eax
	je	.L30507
	movslq	%eax,%rbx
	leaq	(%rbx,%rbx,4), %rcx
	movq	insn_data+24(,%rcx,8), %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.L30508
	movq	%r13, %rdi
	movl	-308(%rbp), %esi
	call	*%rax
	testl	%eax, %eax
	je	.L30963
.L30508:
	leaq	(%rbx,%rbx,4), %r9
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	*insn_data+16(,%r9,8)
.L30901:
	movq	%rax, %rdi
	call	emit_insn
.L30527:
	movl	64(%r12), %eax
	testl	%eax, %eax
	movl	%eax, %ecx
	jne	.L30528
	movq	-304(%rbp), %r13
	addq	%r13, 56(%r12)
.L30528:
	movq	48(%r12), %rsi
	movq	-304(%rbp), %rdx
	subq	-304(%rbp), %rsi
	cmpq	%rdx, %rsi
	movq	%rsi, 48(%r12)
	jae	.L30529
.L30489:
	movzbl	mode_size(%r14), %r13d
	cmpl	$1, %r13d
	ja	.L30531
.L30480:
	cmpq	$0, -80(%rbp)
	jmp	.L30924
.L30963:
	movl	-308(%rbp), %edi
	movq	%r13, %rsi
	call	force_reg
	movq	%rax, %r13
	jmp	.L30508
.L30507:
	movzbl	mode_size(%r14), %edi
	cmpl	%edx, %edi
	je	.L30964
	mov	%edx, %esi
	xorl	%edi, %edi
	negq	%rsi
	call	gen_rtx_CONST_INT
	movq	global_rtl+16(%rip), %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r8b
	movzbl	%r8b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	global_rtl+16(%rip), %rdx
	movl	$100, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
.L30515:
	movl	-308(%rbp), %edi
	movq	%rax, %rsi
	call	gen_rtx_MEM
	xorl	%r10d, %r10d
	testq	%r10, %r10
	movq	%rax, %rbx
	je	.L30524
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %edx
	call	set_mem_attributes
	movl	flag_optimize_sibling_calls(%rip), %eax
	testl	%eax, %eax
	jne	.L30965
.L30524:
	movq	%rbx, %rdi
	movq	%r13, %rsi
	call	emit_move_insn
	jmp	.L30527
.L30965:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	set_mem_alias_set
	jmp	.L30524
.L30964:
	testb	$2, target_flags+3(%rip)
	movq	global_rtl+16(%rip), %rdx
	movl	$96, %edi
	setne	%al
	movzbl	%al, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_e
	jmp	.L30515
	.p2align 6,,7
.L30505:
	movzbl	mode_size(%r14), %eax
	incl	%eax
	andl	$-2, %eax
	jmp	.L30900
.L30503:
	movzbl	mode_size(%r14), %ebx
	leal	1(%rbx), %edx
	andl	$-2, %edx
	jmp	.L30504
.L30962:
	movq	%rax, %rsi
	movq	-320(%rbp), %rdi
	xorl	%eax, %eax
	call	*%r15
	jmp	.L30901
.L30497:
	movq	24(%r12), %rdi
	movl	-308(%rbp), %esi
	movl	$1, %ecx
	movq	56(%r12), %rdx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L30899
.L30495:
	movl	-308(%rbp), %esi
	movq	56(%r12), %rdx
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	jmp	.L30898
.L30477:
	xorl	%edi, %edi
	call	copy_addr_to_reg
	movq	%rax, -120(%rbp)
	jmp	.L30447
.L30473:
	movq	%r14, %rdi
	call	copy_addr_to_reg
	movq	%rax, -96(%rbp)
	jmp	.L30475
	.p2align 6,,7
.L30445:
	movl	$1, %ecx
	jmp	.L30444
.L30961:
	movl	$1, %esi
	testl	%esi, %esi
	je	.L30435
	cmpl	$2, %esi
	je	.L30435
	movslq	24(%rbp),%rsi
	xorl	%edi, %edi
	call	gen_rtx_CONST_INT
	movq	%rax, %rdi
	call	anti_adjust_stack
	movq	-328(%rbp), %r14
	movl	target_flags(%rip), %ecx
	movq	8(%r14), %rdx
	jmp	.L30435
	.p2align 6,,7
.L30433:
	leaq	1(%rdx), %rax
	andq	$-2, %rax
	jmp	.L30897
.L30431:
	cmpq	$2, %r9
	ja	.L30415
	jmp	.L30432
	.p2align 6,,7
.L30944:
	movq	-376(%rbp), %rdi
	movslq	%ebx,%rdx
	movl	$51, %esi
	movl	$1, %ecx
	movl	$1, %r8d
	call	adjust_address_1
	movq	%rax, %r15
	jmp	.L30412
.L30943:
	movl	$.LC0, %edi
	movl	$3301, %esi
	movl	$.LC29, %edx
	jmp	.L30918
	.p2align 6,,7
.L30407:
	cmpl	$-1, %edx
	leal	3(%rdx), %esi
	movl	%edx, %edi
	cmovg	%edx, %esi
	andl	$-4, %esi
	subl	%esi, %edi
	movl	%edi, %eax
	jmp	.L30408
.L30405:
	movl	-232(%rbp), %edx
	sall	$2, %edx
	jmp	.L30406
.L30399:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r15), %r12
	movq	%rax, %rbx
	je	.L30966
.L30401:
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, %r15
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L30394
.L30966:
	cmpq	16(%r15), %rax
	jne	.L30401
	jmp	.L30394
	.p2align 6,,7
.L30925:
	cmpb	$51, 2(%rdi)
	je	.L30392
	movq	8(%rdi), %rbx
	cmpw	$71, (%rbx)
	je	.L30967
.L30392:
	cmpl	$66, %eax
	jne	.L30395
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r15), %rax
	movq	%rax, %rbx
	je	.L30394
	movq	%r15, %rdi
	call	copy_rtx
	movq	%rax, %r15
	movq	%rbx, 8(%rax)
	jmp	.L30394
.L30967:
	movq	8(%rbx), %rsi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%rbx)
	movq	%rax, %r12
	je	.L30393
	movzbl	2(%r15), %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r15
	call	gen_move_insn
	movq	16(%rbx), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L30394
.L30393:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L30896:
	movq	%rax, %r15
	jmp	.L30394
.L30391:
	cmpq	$0, 16(%rdi)
	je	.L30968
	movq	24(%rdi), %rdi
	testq	%rdi, %rdi
	je	.L30403
	movq	%rdi, %r15
	jmp	.L30394
.L30403:
	movq	8(%r15), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L30394
.L30968:
	movq	8(%rdi), %rdi
	call	copy_to_reg
	jmp	.L30896
.LFE46:
.Lfe46:
	.size	emit_push_insn,.Lfe46-emit_push_insn
	.align 2
	.p2align 4,,15
.globl expand_assignment
	.type	expand_assignment,@function
expand_assignment:
.LFB47:
	pushq	%rbp
.LCFI232:
	movq	%rsp, %rbp
.LCFI233:
	pushq	%r15
.LCFI234:
	movq	%rdi, %r15
	pushq	%r14
.LCFI235:
	xorl	%r14d, %r14d
	pushq	%r13
.LCFI236:
	pushq	%r12
.LCFI237:
	pushq	%rbx
.LCFI238:
	subq	$312, %rsp
.LCFI239:
	movl	%edx, -84(%rbp)
	movq	%rsi, -272(%rbp)
	movzbl	16(%rdi), %edx
	testb	%dl, %dl
	je	.L31457
	leal	-39(%rdx), %ecx
	cmpb	$1, %cl
	jbe	.L30977
	cmpb	$43, %dl
	je	.L30977
	cmpb	$44, %dl
	je	.L30977
	movq	-272(%rbp), %rax
	cmpb	$53, 16(%rax)
	je	.L31458
.L31087:
	testq	%r14, %r14
	je	.L31459
.L31145:
	movzbl	16(%r15), %edx
	cmpb	$36, %dl
	je	.L31460
.L31200:
	call	push_temp_slots
	movq	-272(%rbp), %rcx
	movl	$0, -276(%rbp)
	xorl	%r12d, %r12d
	movzbl	16(%rcx), %eax
	cmpb	$47, %al
	je	.L31461
	cmpb	$51, %al
	je	.L31462
.L31217:
	movzwl	(%r14), %eax
	subl	$66, %eax
	cmpl	$12, %eax
	ja	.L31265
	mov	%eax, %r13d
	jmp	*.L31266(,%r13,8)
	.section	.rodata
	.align 8
	.align 4
.L31266:
	.quad	.L31259
	.quad	.L31265
	.quad	.L31265
	.quad	.L31265
	.quad	.L31265
	.quad	.L31264
	.quad	.L31265
	.quad	.L31265
	.quad	.L31265
	.quad	.L31262
	.quad	.L31262
	.quad	.L31265
	.quad	.L31262
	.text
.L31259:
	movq	8(%r14), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L31258:
	testl	%ebx, %ebx
	je	.L31255
	movzbl	2(%r14), %eax
	cmpb	$51, %al
	je	.L31267
	testb	%al, %al
	jne	.L31463
.L31267:
	movzbl	2(%r14), %edx
	movq	-272(%rbp), %rdi
	xorl	%esi, %esi
.L31442:
	xorl	%ecx, %ecx
	call	expand_expr
	testb	$8, 3(%r14)
	movq	%rax, %r13
	jne	.L31431
	movl	-84(%rbp), %eax
	testl	%eax, %eax
	je	.L31431
.L31272:
	movl	$1, -276(%rbp)
.L31431:
	movzwl	(%r13), %edx
.L31216:
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L31294
	cmpw	$54, %dx
	je	.L31294
	cmpw	$55, %dx
	je	.L31294
	cmpw	$58, %dx
	je	.L31294
	cmpw	$134, %dx
	je	.L31294
	cmpw	$56, %dx
	je	.L31294
	cmpw	$140, %dx
	je	.L31294
.L31293:
	movq	%r13, %rdi
	movq	%r14, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	je	.L31296
	cmpq	%r14, %r13
	je	.L31295
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L31464
.L31296:
	movq	-272(%rbp), %rdx
	movzbl	16(%rdx), %eax
	testb	%al, %al
	je	.L31295
	testl	%r12d, %r12d
	jne	.L31295
	movzbl	%al, %ecx 
	cmpb	$100, tree_code_type(%rcx)
	je	.L31465
.L31297:
	movzwl	(%r14), %eax
	cmpl	$71, %eax
	je	.L31302
	cmpl	$66, %eax
	je	.L31466
.L31306:
	cmpl	$75, %eax
	je	.L31310
	cmpl	$78, %eax
	je	.L31310
.L31305:
	movzbl	2(%r13), %eax
	movzbl	2(%r14), %ecx
	cmpb	%cl, %al
	je	.L31315
	testb	%al, %al
	je	.L31315
	movq	-272(%rbp), %rax
	movl	-276(%rbp), %r11d
	movq	8(%rax), %rsi
	movzbl	17(%rsi), %r15d
	shrb	$5, %r15b
	movl	%r15d, %edx
	andl	$1, %edx
	testl	%r11d, %r11d
	je	.L31316
	movq	%r13, %rsi
	movzbl	%cl, %edi
	call	convert_to_mode
	movq	%rax, %r13
.L31377:
	movq	%r14, %rdi
	movq	%r13, %rsi
	call	emit_move_insn
.L31295:
	movl	-84(%rbp), %eax
	testl	%eax, %eax
	jne	.L31379
.L31446:
	xorl	%r13d, %r13d
.L31215:
	movq	%r13, %rdi
	xorl	%r14d, %r14d
	call	preserve_temp_slots
	call	free_temp_slots
	call	pop_temp_slots
	movl	-84(%rbp), %edx
	testl	%edx, %edx
	cmovne	%r13, %r14
.L30972:
	leaq	-40(%rbp), %rsp
	movq	%r14, %rax
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
.L31379:
	movl	-276(%rbp), %eax
	testl	%eax, %eax
	je	.L31381
	cmpw	$66, (%r13)
	jne	.L31215
.L31381:
	cmpb	$51, 2(%r14)
	je	.L31383
	cmpw	$61, (%r14)
	je	.L31467
.L31384:
	movq	%r14, %rdi
	call	copy_to_reg
.L31447:
	movq	%rax, %r13
	jmp	.L31215
.L31467:
	cmpl	$52, 8(%r14)
	ja	.L31384
.L31383:
	movq	%r14, %r13
	jmp	.L31215
.L31316:
	movq	%r14, %rdi
	movq	%r13, %rsi
	call	convert_move
	jmp	.L31295
	.p2align 6,,7
.L31315:
	cmpb	$51, %al
	je	.L31468
.L31319:
	cmpw	$39, (%r14)
	je	.L31469
	cmpb	$51, %al
	jne	.L31377
	movq	-272(%rbp), %rdi
	call	expr_size
	movq	%r13, %rsi
	movq	%r14, %rdi
	movq	%rax, %rdx
.L31445:
	call	emit_block_move
	jmp	.L31295
.L31469:
	movq	-272(%rbp), %r12
	movq	8(%r12), %rdi
	call	int_size_in_bytes
	cmpw	$39, (%r14)
	movl	%eax, -204(%rbp)
	jne	.L31455
	movq	8(%r14), %rcx
	movq	8(%rcx), %rbx
	movl	(%rcx), %r11d
	cmpq	$0, 8(%rbx)
	movslq	%r11d,%r8
	sete	%r15b
	leaq	15(,%r8,8), %rsi
	andq	$-16, %rsi
	subq	%rsi, %rsp
	leaq	32(%rsp), %rdx
	movzbl	%r15b, %r9d
	movq	%rdx, -216(%rbp)
	movl	%r9d, -288(%rbp)
	movl	-288(%rbp), %eax
	cmpl	%r11d, %eax
	movl	%eax, -280(%rbp)
	jge	.L31413
.L31362:
	movslq	-280(%rbp),%rsi
	movq	8(%rcx,%rsi,8), %r11
	movq	%rsi, -224(%rbp)
	movl	-204(%rbp), %ecx
	movq	8(%r11), %rax
	movq	16(%r11), %r12
	testl	%ecx, %ecx
	movzbl	2(%rax), %r15d
	movq	8(%r12), %rdi
	movq	%rdi, -232(%rbp)
	movslq	%r15d,%r10
	movzbl	mode_size(%r10), %eax
	movq	%r10, -240(%rbp)
	movl	%eax, -284(%rbp)
	js	.L31335
	mov	%eax, %edx
	movslq	-204(%rbp),%r8
	addq	-232(%rbp), %rdx
	cmpq	%r8, %rdx
	jle	.L31335
	movl	-204(%rbp), %r9d
	subl	-232(%rbp), %r9d
	movl	%r9d, -284(%rbp)
	je	.L31456
.L31335:
	movzwl	(%r13), %edx
	movq	%r13, %r12
	cmpw	$66, %dx
	je	.L31436
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L31339
	cmpw	$54, %dx
	je	.L31339
	cmpw	$55, %dx
	je	.L31339
	cmpw	$58, %dx
	je	.L31339
	cmpw	$134, %dx
	je	.L31339
	cmpw	$56, %dx
	je	.L31339
	cmpw	$140, %dx
	je	.L31339
.L31338:
	movzbl	2(%r13), %eax
	movl	%r15d, %edi
	testb	%al, %al
	je	.L31444
	movzbl	%al, %edi
.L31444:
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	emit_move_insn
	movzwl	(%r12), %edx
.L31337:
	cmpw	$66, %dx
	je	.L31436
.L31342:
	cmpw	$65, %dx
	je	.L31470
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L31359
	cmpw	$54, %dx
	je	.L31359
	cmpw	$55, %dx
	je	.L31359
	cmpw	$58, %dx
	je	.L31359
	cmpw	$134, %dx
	je	.L31359
	cmpw	$56, %dx
	je	.L31359
	cmpw	$140, %dx
	je	.L31359
	cmpw	$61, %dx
	je	.L31471
.L31358:
	movl	-284(%rbp), %eax
	movq	-232(%rbp), %rdx
	movq	%r12, %rdi
	movslq	-204(%rbp),%r10
	movl	%r15d, %r9d
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r15d, (%rsp)
	sall	$3, %eax
	salq	$3, %rdx
	mov	%eax, %esi
	movq	%r10, 8(%rsp)
	call	extract_bit_field
	movq	-216(%rbp), %r12
	movq	-224(%rbp), %r9
	movq	%rax, (%r12,%r9,8)
.L31333:
	incl	-280(%rbp)
	movq	8(%r14), %rcx
	movl	-280(%rbp), %eax
	cmpl	(%rcx), %eax
	jl	.L31362
.L31413:
	movq	cfun(%rip), %r15
	movq	16(%r15), %rdx
	movq	40(%rdx), %rbx
	testq	%rbx, %rbx
	je	.L31415
.L31368:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L31472
	call	emit_insn
	movq	%rax, 16(%rbx)
.L31367:
	movq	cfun(%rip), %r8
	movq	40(%rbx), %rdi
	movq	16(%r8), %rsi
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%rsi)
	jne	.L31368
	movq	8(%r14), %rcx
.L31415:
	movl	-288(%rbp), %ebx
	cmpl	(%rcx), %ebx
	jge	.L31295
.L31374:
	movslq	-288(%rbp),%r10
	movq	-216(%rbp), %r9
	salq	$3, %r10
	movq	8(%r10,%rcx), %rax
	movq	(%r9,%r10), %rsi
	movq	8(%rax), %rdi
	call	emit_move_insn
	incl	-288(%rbp)
	movq	8(%r14), %r12
	movl	-288(%rbp), %eax
	cmpl	(%r12), %eax
	movq	%r12, %rcx
	jl	.L31374
	jmp	.L31295
.L31472:
	movq	8(%rdi), %r11
	movq	8(%r11), %rcx
	movq	%rcx, 16(%rbx)
	call	emit_insn
	jmp	.L31367
.L31471:
	movzbl	2(%r12), %r11d
	cmpl	%r15d, %r11d
	jne	.L31358
.L31359:
	movq	-224(%rbp), %r8
	movq	-216(%rbp), %rsi
	movq	%r12, (%rsi,%r8,8)
	jmp	.L31333
.L31470:
	cmpq	$0, -232(%rbp)
	jne	.L31435
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %rbx
	movzbl	mode_size(%rbx), %r9d
	cmpl	%r9d, -284(%rbp)
	je	.L31348
.L31349:
	movzbq	2(%rdx), %r10
	movzbq	mode_size(%r10), %rdx
	cmpq	%rdx, -232(%rbp)
	je	.L31473
.L31347:
	cmpq	$0, -232(%rbp)
	jne	.L31355
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rcx
	movzbq	mode_size(%rcx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %rbx
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%rbx, %rdi
	movl	%r15d, %esi
	xorl	%edx, %edx
	call	adjust_address_1
	movq	-216(%rbp), %r15
	movq	-224(%rbp), %rbx
	movq	%rax, (%r15,%rbx,8)
	jmp	.L31333
.L31355:
	movl	$.LC0, %edi
	movl	$2028, %esi
.L31450:
	movl	$.LC12, %edx
.L31451:
	call	fancy_abort
.L31473:
	movq	16(%r12), %r11
	movzbq	2(%r11), %rcx
	movzbl	mode_size(%rcx), %edi
	cmpl	%edi, -284(%rbp)
	jne	.L31347
.L31348:
	xorl	%esi, %esi
	movq	-224(%rbp), %rax
	movq	-216(%rbp), %r8
	cmpq	$0, -232(%rbp)
	setne	%sil
	leaq	(%r8,%rax,8), %rbx
	movq	8(%r12,%rsi,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L31333
	cmpw	$54, %dx
	je	.L31333
	cmpw	$55, %dx
	je	.L31333
	cmpw	$58, %dx
	je	.L31333
	cmpw	$134, %dx
	je	.L31333
	cmpw	$56, %dx
	je	.L31333
	cmpw	$140, %dx
	je	.L31333
	cmpw	$61, %dx
	je	.L31474
.L31353:
	movslq	-204(%rbp),%rdx
	movl	-284(%rbp), %r10d
	movl	%r15d, (%rsp)
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r15d, %r9d
	sall	$3, %r10d
	movq	%rdx, 8(%rsp)
	mov	%r10d, %esi
	xorl	%edx, %edx
	movq	(%rbx), %rdi
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L31333
.L31474:
	movzbl	2(%rcx), %r9d
	cmpl	%r15d, %r9d
	jne	.L31353
	jmp	.L31333
.L31435:
	movq	8(%r12), %rdx
	jmp	.L31349
.L31436:
	movl	%r15d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L31343
	cmpl	%eax, 32(%rdx)
	jae	.L31344
.L31434:
	movzwl	(%r12), %edx
	jmp	.L31342
.L31344:
	movq	-232(%rbp), %rbx
	movl	%r15d, %edi
	call	get_mode_alignment
	mov	%eax, %ecx
	salq	$3, %rbx
	movq	%rbx, %rax
	cqto
	idivq	%rcx
	testq	%rdx, %rdx
	jne	.L31434
	movq	-240(%rbp), %rax
	movzbl	mode_size(%rax), %r11d
	cmpl	%r11d, -284(%rbp)
	jne	.L31434
	movl	%r15d, %edi
	call	gen_reg_rtx
	movl	$1, %ecx
	movq	-232(%rbp), %rdx
	movq	-224(%rbp), %r8
	movq	-216(%rbp), %rsi
	movq	%r12, %rdi
	leaq	(%rsi,%r8,8), %rbx
	movl	$1, %r8d
	movl	%r15d, %esi
	movq	%rax, (%rbx)
	call	adjust_address_1
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L31333
.L31343:
	cmpl	$8, %eax
	ja	.L31434
	jmp	.L31344
	.p2align 6,,7
.L31339:
	movzbl	2(%r13), %ecx
	movzbl	%cl, %r10d
	cmpl	%r15d, %r10d
	je	.L31337
	testb	%cl, %cl
	je	.L31337
	jmp	.L31338
.L31456:
	movl	$.LC0, %edi
	movl	$1978, %esi
	jmp	.L31450
.L31455:
	movl	$.LC0, %edi
	movl	$1953, %esi
	jmp	.L31450
.L31468:
	movq	-272(%rbp), %rcx
	cmpb	$29, 16(%rcx)
	jne	.L31319
	movq	%rcx, %rdi
	call	expr_size
	cmpw	$54, (%rax)
	movq	%rax, %r12
	je	.L31475
.L31320:
	movq	sizetype_tab(%rip), %rdi
	movq	%r12, %rsi
	call	make_tree
	xorl	%esi, %esi
	movq	-272(%rbp), %rbx
	movq	%rax, %r15
	movslq	32(%rbx),%rdi
	call	size_int_wide
	movq	%r15, %rsi
	movl	$78, %edi
	movq	%rax, %rdx
	xorl	%r15d, %r15d
	call	size_binop
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	movq	%rax, -200(%rbp)
	call	expand_expr
	xorl	%edx, %edx
	movl	ptr_mode(%rip), %edi
	movq	%rax, %rsi
	call	convert_to_mode
	movq	%r13, %rsi
	movq	%r14, %rdi
	movq	%rax, %rbx
	movq	%rax, %rdx
	call	emit_block_move
	cmpw	$54, (%rbx)
	je	.L31476
	movq	sizetype_tab(%rip), %rdi
	movq	optab_table+16(%rip), %rsi
	movq	%rbx, %rcx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movzbl	61(%rdi), %r10d
	movl	$3, (%rsp)
	shrb	$1, %r10b
	movzbl	%r10b, %edi
	call	expand_binop
	movq	-200(%rbp), %rdi
	movq	%rax, %r12
	call	highest_pow2_factor
	movq	%rbx, %rsi
	movq	%r14, %rdi
	movq	%rax, %rdx
	call	offset_address
	movq	%rax, %r14
	call	gen_label_rtx
	xorl	%r9d, %r9d
	movzbl	2(%r12), %r8d
	movq	const_int_rtx+512(%rip), %rsi
	movq	%r12, %rdi
	movl	$107, %edx
	xorl	%ecx, %ecx
	movq	%rax, %r15
	movq	%rax, (%rsp)
	call	emit_cmp_and_jump_insns
.L31323:
	cmpq	const_int_rtx+512(%rip), %r12
	je	.L31324
	movq	%r14, %rdi
	movq	%r12, %rsi
	call	clear_storage
.L31324:
	testq	%r15, %r15
	je	.L31295
	movq	%r15, %rdi
	call	emit_label
	jmp	.L31295
.L31476:
	movq	8(%rbx), %rsi
	movq	%r12, %rdi
	negq	%rsi
	call	plus_constant_wide
	movl	$1, %r8d
	movl	$1, %ecx
	movq	8(%rbx), %rdx
	movq	%r14, %rdi
	movl	$51, %esi
	movq	%rax, %r12
	call	adjust_address_1
	movq	%rax, %r14
	jmp	.L31323
.L31475:
	movq	-272(%rbp), %r9
	movslq	32(%r9),%r8
	cmpq	%r8, 8(%rax)
	jge	.L31320
	movq	%r14, %rdi
	movq	%r13, %rsi
	movq	%rax, %rdx
	jmp	.L31445
.L31310:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L31477
.L31312:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L31305
.L31477:
	cmpq	16(%r14), %rax
	jne	.L31312
	jmp	.L31305
.L31466:
	jne	.L31306
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L31305
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%rbx, 8(%rax)
	jmp	.L31305
.L31302:
	cmpq	$0, 16(%r14)
	je	.L31478
	movq	24(%r14), %rax
	testq	%rax, %rax
	je	.L31314
.L31443:
	movq	%rax, %r14
	jmp	.L31305
.L31314:
	movq	8(%r14), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L31305
.L31478:
	movq	8(%r14), %rdi
	call	copy_to_reg
	jmp	.L31443
.L31465:
	movq	144(%rdx), %rax
	testq	%rax, %rax
	je	.L31297
	cmpq	%rax, %r14
	jne	.L31297
	jmp	.L31295
	.p2align 6,,7
.L31464:
	movq	%r14, %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L31295
	jmp	.L31296
.L31294:
	cmpb	$0, 2(%r13)
	jne	.L31293
	movq	-272(%rbp), %rcx
	cmpb	$0, 16(%rcx)
	je	.L31293
	movq	8(%rcx), %rdx
	movzbl	2(%r14), %edi
	movzbl	61(%rdx), %r10d
	shrb	$1, %r10b
	movzbl	%r10b, %esi
	cmpl	%esi, %edi
	je	.L31293
	movzbl	17(%rdx), %ecx
	movq	%r13, %rdx
	shrb	$5, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, %r13
	jmp	.L31293
.L31463:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	-272(%rbp), %rdi
	movzbl	2(%r14), %edx
	movq	%rax, %rsi
	jmp	.L31442
.L31255:
	movl	-84(%rbp), %r11d
	testl	%r11d, %r11d
	je	.L31427
	movl	(%r14), %ecx
	movl	%ecx, %r15d
	andl	$134283263, %r15d
	cmpl	$66, %r15d
	je	.L31479
.L31271:
	andl	$268500991, %ecx
	cmpl	$268435519, %ecx
	je	.L31480
	movzbl	2(%r14), %edx
	movq	-272(%rbp), %rdi
	xorl	%ecx, %ecx
	movq	%r14, %rsi
	call	expand_expr
	cmpw	$61, (%r14)
	movq	%rax, %r13
	je	.L31481
.L31291:
	movl	(%r14), %eax
	andl	$134283263, %eax
	cmpl	$134217794, %eax
	je	.L31431
	movq	%r13, %rdi
	movq	%r14, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L31431
	movzwl	(%r13), %edx
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L31292
	cmpw	$54, %dx
	je	.L31292
	cmpw	$55, %dx
	je	.L31292
	cmpw	$58, %dx
	je	.L31292
	cmpw	$134, %dx
	je	.L31292
	cmpw	$56, %dx
	je	.L31292
	cmpw	$140, %dx
	je	.L31292
	movl	-84(%rbp), %ebx
	testl	%ebx, %ebx
	je	.L31216
.L31292:
	movl	$1, -276(%rbp)
	jmp	.L31216
.L31481:
	cmpl	$52, 8(%r14)
	jbe	.L31431
	jmp	.L31291
.L31480:
	movl	-84(%rbp), %esi
	xorl	%edx, %edx
	testl	%esi, %esi
	jne	.L31277
	movq	-272(%rbp), %r12
	movq	8(%r12), %rsi
	movzbl	16(%rsi), %eax
	cmpb	$6, %al
	je	.L31278
	cmpb	$10, %al
	je	.L31278
	cmpb	$11, %al
	je	.L31278
	cmpb	$12, %al
	je	.L31278
.L31277:
	movq	-272(%rbp), %rdi
	movq	%rdx, %rsi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	call	expand_expr
	movzwl	(%rax), %edx
	movq	%rax, %r13
	cmpw	$66, %dx
	je	.L31482
.L31280:
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L31283
	cmpw	$54, %dx
	je	.L31283
	cmpw	$55, %dx
	je	.L31283
	cmpw	$58, %dx
	je	.L31283
	cmpw	$134, %dx
	je	.L31283
	cmpw	$56, %dx
	je	.L31283
	cmpw	$140, %dx
	je	.L31283
.L31282:
	movzbl	3(%r14), %edx
	movq	8(%r14), %rdi
	movq	%r13, %rsi
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	movl	-84(%rbp), %r15d
	testl	%r15d, %r15d
	je	.L31446
	movzbl	2(%r13), %edx
	movzbl	2(%r14), %eax
	cmpb	%al, %dl
	je	.L31284
	testb	%dl, %dl
	je	.L31285
	movq	%r13, %rsi
	movzbl	%al, %edi
	call	gen_lowpart_SUBREG
	movzbl	3(%rax), %esi
	movq	%rax, %r13
	orb	$16, %sil
	movb	%sil, 3(%rax)
	andb	$-5, %sil
	movzbl	3(%r14), %r12d
	andb	$4, %r12b
	orb	%r12b, %sil
	movb	%sil, 3(%rax)
.L31284:
	movl	-84(%rbp), %r14d
	testl	%r14d, %r14d
	jne	.L31215
	jmp	.L31446
.L31285:
	movq	8(%r14), %r8
	movzbl	3(%r14), %ecx
	movq	%r13, %rdx
	movzbl	%al, %edi
	movzbl	2(%r8), %esi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, %r13
	jmp	.L31284
	.p2align 6,,7
.L31283:
	cmpb	$0, 2(%r13)
	jne	.L31282
	movq	-272(%rbp), %rax
	movzbl	2(%r14), %edi
	movq	%r13, %rdx
	movq	8(%rax), %r11
	movzbl	61(%r11), %ecx
	shrb	$1, %cl
	movzbl	%cl, %esi
	movzbl	3(%r14), %ecx
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	movzbl	3(%r14), %ecx
	movzbl	2(%r14), %esi
	movq	8(%r14), %r10
	movq	%rax, %rdx
	movzbl	2(%r10), %edi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, %r13
	jmp	.L31282
.L31482:
	movl	-84(%rbp), %edi
	testl	%edi, %edi
	je	.L31280
	testb	$8, 3(%rax)
	jne	.L31281
	movq	8(%r14), %rdi
	movq	8(%rax), %rsi
	call	reg_mentioned_p
	testl	%eax, %eax
	je	.L31428
.L31281:
	movq	%r13, %rdi
	call	copy_to_reg
	movq	%rax, %r13
.L31428:
	movzwl	(%r13), %edx
	jmp	.L31280
	.p2align 6,,7
.L31278:
	cmpq	$0, 8(%rsi)
	jne	.L31277
	movzbl	3(%r14), %ecx
	movzbl	17(%rsi), %r8d
	movl	$1, %edi
	movl	%ecx, %r9d
	shrb	$5, %r8b
	shrb	$2, %r9b
	andl	$1, %r8d
	andl	%r9d, %edi
	cmpl	%edi, %r8d
	je	.L31279
	call	signed_or_unsigned_type
	movq	-272(%rbp), %rsi
	movq	%rax, %rdi
	call	convert
	movzbl	3(%r14), %ecx
	movq	%rax, -272(%rbp)
.L31279:
	movq	8(%r14), %rdx
	shrb	$2, %cl
	movl	$1, %esi
	andl	%ecx, %esi
	movzbl	2(%rdx), %edi
	call	type_for_mode
	movq	-272(%rbp), %rsi
	movq	%rax, %rdi
	call	convert
	movq	%rax, -272(%rbp)
	movq	8(%r14), %rdx
	jmp	.L31277
	.p2align 6,,7
.L31479:
	movzbl	2(%r14), %eax
	cmpb	$51, %al
	je	.L31271
	movq	-272(%rbp), %rdi
	xorl	%ecx, %ecx
	movzbl	%al, %edx
	movq	%r14, %rsi
	call	expand_expr
	movq	%rax, %r13
	movzbl	2(%rax), %eax
	cmpb	$51, %al
	je	.L31272
	testb	%al, %al
	je	.L31272
	cmpq	%r14, %r13
	je	.L31274
	movq	%r13, %rdi
	movq	%r14, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L31483
.L31273:
	movq	%r13, %rdi
	call	copy_to_reg
	movq	%rax, %r13
	jmp	.L31272
.L31483:
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L31273
	movq	%r14, %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L31273
.L31274:
	movl	$1, %r12d
	jmp	.L31273
	.p2align 6,,7
.L31427:
	movl	(%r14), %ecx
	jmp	.L31271
.L31264:
	movl	$1, %ebx
	jmp	.L31258
.L31265:
	xorl	%ebx, %ebx
	jmp	.L31258
.L31262:
	movq	8(%r14), %rdi
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L31264
	movq	16(%r14), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L31258
	jmp	.L31264
	.p2align 6,,7
.L31462:
	cmpb	$51, 2(%r14)
	jne	.L31217
	call	gen_label_rtx
	movq	%rax, %r15
	call	gen_label_rtx
	movq	cfun(%rip), %r8
	movq	%rax, -192(%rbp)
	movq	16(%r8), %r12
	movq	40(%r12), %rbx
	testq	%rbx, %rbx
	je	.L31407
.L31223:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L31484
	call	emit_insn
	movq	%rax, 16(%rbx)
.L31222:
	movq	cfun(%rip), %r11
	movq	40(%rbx), %r10
	movq	16(%r11), %rcx
	testq	%r10, %r10
	movq	%r10, %rbx
	movq	%r10, 40(%rcx)
	jne	.L31223
.L31407:
	movzwl	(%r14), %eax
	movq	%r14, %r13
	cmpl	$71, %eax
	je	.L31225
	cmpl	$66, %eax
	je	.L31485
.L31229:
	cmpl	$75, %eax
	je	.L31233
	cmpl	$78, %eax
	je	.L31233
.L31228:
	call	do_pending_stack_adjust
	movq	cfun(%rip), %r8
	movq	-272(%rbp), %rbx
	movq	%r15, %rsi
	movq	16(%r8), %r12
	incl	4(%r12)
	movq	32(%rbx), %rdi
	call	jumpifnot
	call	start_cleanup_deferral
	movq	-272(%rbp), %rax
	xorl	%edx, %edx
	movq	%r13, %rsi
	movq	40(%rax), %rdi
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %rdi
	movq	16(%rdi), %r14
	movq	40(%r14), %rbx
	testq	%rbx, %rbx
	je	.L31409
.L31243:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L31486
	call	emit_insn
	movq	%rax, 16(%rbx)
.L31242:
	movq	cfun(%rip), %r11
	movq	40(%rbx), %r10
	movq	16(%r11), %rcx
	testq	%r10, %r10
	movq	%r10, %rbx
	movq	%r10, 40(%rcx)
	jne	.L31243
.L31409:
	movq	-192(%rbp), %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r15, %rdi
	call	emit_label
	call	start_cleanup_deferral
	movq	-272(%rbp), %r14
	movq	%r13, %rsi
	xorl	%edx, %edx
	movq	48(%r14), %rdi
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %rsi
	movq	16(%rsi), %r15
	movq	40(%r15), %rbx
	testq	%rbx, %rbx
	je	.L31411
.L31250:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L31487
	call	emit_insn
	movq	%rax, 16(%rbx)
.L31249:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %rdi
	movq	16(%rdx), %r9
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%r9)
	jne	.L31250
.L31411:
	movq	-192(%rbp), %rdi
	movl	$0, %ebx
	call	emit_label
	movl	-84(%rbp), %eax
	movq	cfun(%rip), %rcx
	movq	16(%rcx), %r10
	decl	4(%r10)
	testl	%eax, %eax
	cmove	%rbx, %r13
	jmp	.L31215
	.p2align 6,,7
.L31487:
	movq	8(%rdi), %r8
	movq	8(%r8), %r12
	movq	%r12, 16(%rbx)
	call	emit_insn
	jmp	.L31249
.L31486:
	movq	8(%rdi), %rdx
	movq	8(%rdx), %r9
	movq	%r9, 16(%rbx)
	call	emit_insn
	jmp	.L31242
.L31233:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, %r12
	call	protect_from_queue
	cmpq	8(%r14), %r12
	movq	%rax, %rbx
	je	.L31488
.L31235:
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r13
	movq	%r12, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L31228
.L31488:
	cmpq	16(%r14), %rax
	jne	.L31235
	jmp	.L31228
.L31485:
	jne	.L31229
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r14), %rax
	movq	%rax, %rbx
	je	.L31228
	movq	%r14, %rdi
	call	copy_rtx
	movq	%rax, %r13
	movq	%rbx, 8(%rax)
	jmp	.L31228
.L31225:
	cmpq	$0, 16(%r14)
	je	.L31489
	movq	24(%r14), %rsi
	testq	%rsi, %rsi
	movq	%rsi, %r13
	jne	.L31228
	movq	8(%r14), %r13
	movzbl	2(%r13), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r13
	jmp	.L31228
.L31489:
	movq	8(%r14), %rdi
	call	copy_to_reg
	movq	%rax, %r13
	jmp	.L31228
	.p2align 6,,7
.L31484:
	movq	8(%rdi), %rdx
	movq	8(%rdx), %r9
	movq	%r9, 16(%rbx)
	call	emit_insn
	jmp	.L31222
.L31461:
	movq	32(%rcx), %rdi
	movq	const_int_rtx+512(%rip), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	cfun(%rip), %rcx
	movq	16(%rcx), %r10
	movq	40(%r10), %rbx
	testq	%rbx, %rbx
	je	.L31405
.L31213:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L31490
	call	emit_insn
	movq	%rax, 16(%rbx)
.L31212:
	movq	cfun(%rip), %rdi
	movq	40(%rbx), %rsi
	movq	16(%rdi), %r13
	testq	%rsi, %rsi
	movq	%rsi, %rbx
	movq	%rsi, 40(%r13)
	jne	.L31213
.L31405:
	movq	-272(%rbp), %rbx
	movl	-84(%rbp), %edx
	movq	%r14, %rsi
	movq	40(%rbx), %rdi
	call	store_expr
	jmp	.L31447
.L31490:
	movq	8(%rdi), %r11
	movq	8(%r11), %r15
	movq	%r15, 16(%rbx)
	call	emit_insn
	jmp	.L31212
.L31460:
	movzwl	(%r14), %eax
	cmpw	$61, %ax
	je	.L31147
	cmpw	$39, %ax
	je	.L31147
	cmpb	$36, %dl
	jne	.L31200
	movq	-272(%rbp), %rax
	cmpb	$41, 16(%rax)
	jne	.L31200
	movq	cfun(%rip), %r10
	movzbl	424(%r10), %edx
	andb	$3, %dl
	decb	%dl
	jne	.L31200
	call	push_temp_slots
	movq	-272(%rbp), %rdi
	call	expr_size
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	-272(%rbp), %rdi
	xorl	%esi, %esi
	movq	%rax, %r12
	call	expand_expr
	movq	%r12, %rsi
	movq	sizetype_tab(%rip), %r8
	movq	%rax, %r13
	movzbl	61(%r8), %r9d
	movzbl	17(%r8), %edx
	shrb	$1, %r9b
	shrb	$5, %dl
	movzbl	%r9b, %edi
	andl	$1, %edx
	call	convert_to_mode
	movq	sizetype_tab(%rip), %r15
	movq	8(%r13), %rsi
	movl	target_flags(%rip), %ebx
	movq	%rax, 16(%rsp)
	movq	%rsi, (%rsp)
	andl	$33554432, %ebx
	setne	%dil
	xorl	%eax, %eax
	xorl	%esi, %esi
	xorl	%edx, %edx
	movzbl	%dil, %r9d
	movq	libfunc_table+96(%rip), %rdi
	addl	$4, %r9d
	movl	%r9d, 8(%rsp)
	movzbl	61(%r15), %ecx
	shrb	$1, %cl
	movzbl	%cl, %r13d
	movl	$3, %ecx
	movl	%r13d, 24(%rsp)
	movq	8(%r14), %r8
	call	emit_library_call
.L31448:
	movq	%r14, %rdi
	call	preserve_temp_slots
	call	free_temp_slots
	call	pop_temp_slots
.L31449:
	movl	-84(%rbp), %eax
	movl	$0, %edx
	testl	%eax, %eax
	cmove	%rdx, %r14
	jmp	.L30972
.L31147:
	call	push_temp_slots
	movzbl	2(%r14), %edx
	movq	-272(%rbp), %rdi
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	call	expand_expr
	cmpw	$39, (%r14)
	movq	%rax, -152(%rbp)
	je	.L31491
	movq	%r14, %rdi
	movq	-152(%rbp), %rsi
.L31452:
	call	emit_move_insn
	jmp	.L31448
.L31491:
	movq	-272(%rbp), %rax
	movq	8(%rax), %rdi
	call	int_size_in_bytes
	cmpw	$39, (%r14)
	movl	%eax, -156(%rbp)
	jne	.L31455
	movq	8(%r14), %rcx
	movq	8(%rcx), %r10
	movl	(%rcx), %edi
	cmpq	$0, 8(%r10)
	movslq	%edi,%r8
	sete	%r9b
	leaq	15(,%r8,8), %r13
	andq	$-16, %r13
	subq	%r13, %rsp
	leaq	32(%rsp), %rdx
	movzbl	%r9b, %r15d
	movq	%rdx, -168(%rbp)
	movl	%r15d, -264(%rbp)
	movl	-264(%rbp), %eax
	cmpl	%edi, %eax
	movl	%eax, -256(%rbp)
	jge	.L31400
.L31183:
	movslq	-256(%rbp),%rax
	movq	8(%rcx,%rax,8), %r11
	movq	%rax, -176(%rbp)
	movl	-156(%rbp), %ecx
	movq	8(%r11), %rsi
	movq	16(%r11), %r12
	testl	%ecx, %ecx
	movzbl	2(%rsi), %r13d
	movq	8(%r12), %r15
	movslq	%r13d,%rbx
	movzbl	mode_size(%rbx), %eax
	movq	%rbx, -184(%rbp)
	movl	%eax, -260(%rbp)
	js	.L31156
	movslq	-156(%rbp),%rdi
	mov	%eax, %r8d
	leaq	(%r8,%r15), %rdx
	cmpq	%rdi, %rdx
	jle	.L31156
	movl	-156(%rbp), %r9d
	subl	%r15d, %r9d
	movl	%r9d, -260(%rbp)
	je	.L31456
.L31156:
	movq	-152(%rbp), %r12
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L31158
	leal	-67(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L31160
	cmpw	$54, %dx
	je	.L31160
	cmpw	$55, %dx
	je	.L31160
	cmpw	$58, %dx
	je	.L31160
	cmpw	$134, %dx
	je	.L31160
	cmpw	$56, %dx
	je	.L31160
	cmpw	$140, %dx
	je	.L31160
.L31159:
	movq	-152(%rbp), %r12
	movl	%r13d, %edi
	movzbl	2(%r12), %eax
	testb	%al, %al
	je	.L31441
	movzbl	%al, %edi
.L31441:
	call	gen_reg_rtx
	movq	-152(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	emit_move_insn
.L31158:
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L31492
.L31163:
	cmpw	$65, %dx
	je	.L31493
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L31180
	cmpw	$54, %dx
	je	.L31180
	cmpw	$55, %dx
	je	.L31180
	cmpw	$58, %dx
	je	.L31180
	cmpw	$134, %dx
	je	.L31180
	cmpw	$56, %dx
	je	.L31180
	cmpw	$140, %dx
	je	.L31180
	cmpw	$61, %dx
	je	.L31494
.L31179:
	movslq	-156(%rbp),%r9
	movl	-260(%rbp), %eax
	leaq	0(,%r15,8), %rdx
	movq	%r12, %rdi
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r13d, (%rsp)
	sall	$3, %eax
	movq	%r9, 8(%rsp)
	mov	%eax, %esi
	movl	%r13d, %r9d
	call	extract_bit_field
	movq	-168(%rbp), %r12
	movq	-176(%rbp), %rdx
	movq	%rax, (%r12,%rdx,8)
.L31154:
	incl	-256(%rbp)
	movq	8(%r14), %rcx
	movl	-256(%rbp), %eax
	cmpl	(%rcx), %eax
	jl	.L31183
.L31400:
	movq	cfun(%rip), %r13
	movq	16(%r13), %r10
	movq	40(%r10), %rbx
	testq	%rbx, %rbx
	je	.L31402
.L31189:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L31495
	call	emit_insn
	movq	%rax, 16(%rbx)
.L31188:
	movq	cfun(%rip), %rdi
	movq	40(%rbx), %r11
	movq	16(%rdi), %rsi
	testq	%r11, %r11
	movq	%r11, %rbx
	movq	%r11, 40(%rsi)
	jne	.L31189
	movq	8(%r14), %rcx
.L31402:
	movl	-264(%rbp), %ebx
	cmpl	(%rcx), %ebx
	jge	.L31448
.L31195:
	movslq	-264(%rbp),%r12
	movq	-168(%rbp), %r8
	salq	$3, %r12
	movq	8(%r12,%rcx), %r9
	movq	(%r8,%r12), %rsi
	movq	8(%r9), %rdi
	call	emit_move_insn
	incl	-264(%rbp)
	movq	8(%r14), %rcx
	movl	-264(%rbp), %eax
	cmpl	(%rcx), %eax
	jl	.L31195
	jmp	.L31448
	.p2align 6,,7
.L31495:
	movq	8(%rdi), %r15
	movq	8(%r15), %rcx
	movq	%rcx, 16(%rbx)
	call	emit_insn
	jmp	.L31188
.L31494:
	movzbl	2(%r12), %esi
	cmpl	%r13d, %esi
	jne	.L31179
.L31180:
	movq	-176(%rbp), %r8
	movq	-168(%rbp), %rdi
	movq	%r12, (%rdi,%r8,8)
	jmp	.L31154
.L31493:
	testq	%r15, %r15
	jne	.L31424
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %r10
	movzbl	mode_size(%r10), %r9d
	cmpl	%r9d, -260(%rbp)
	je	.L31169
.L31170:
	movzbq	2(%rdx), %rbx
	movzbq	mode_size(%rbx), %rcx
	cmpq	%rcx, %r15
	je	.L31496
.L31168:
	testq	%r15, %r15
	jne	.L31355
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbx
	movzbq	mode_size(%rbx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %r15
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movl	%r13d, %esi
	movq	%r15, %rdi
	xorl	%edx, %edx
	call	adjust_address_1
	movq	-168(%rbp), %r13
	movq	-176(%rbp), %rcx
	movq	%rax, (%r13,%rcx,8)
	jmp	.L31154
.L31496:
	movq	16(%r12), %rdi
	movzbq	2(%rdi), %rsi
	movzbl	mode_size(%rsi), %r11d
	cmpl	%r11d, -260(%rbp)
	jne	.L31168
.L31169:
	xorl	%r8d, %r8d
	movq	-168(%rbp), %rdx
	movq	-176(%rbp), %rax
	testq	%r15, %r15
	setne	%r8b
	leaq	(%rdx,%rax,8), %rbx
	movq	8(%r12,%r8,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L31154
	cmpw	$54, %dx
	je	.L31154
	cmpw	$55, %dx
	je	.L31154
	cmpw	$58, %dx
	je	.L31154
	cmpw	$134, %dx
	je	.L31154
	cmpw	$56, %dx
	je	.L31154
	cmpw	$140, %dx
	je	.L31154
	cmpw	$61, %dx
	je	.L31497
.L31174:
	movslq	-156(%rbp),%r9
	movl	-260(%rbp), %r10d
	movl	%r13d, (%rsp)
	xorl	%edx, %edx
	movl	$1, %ecx
	xorl	%r8d, %r8d
	sall	$3, %r10d
	movq	%r9, 8(%rsp)
	mov	%r10d, %esi
	movl	%r13d, %r9d
	movq	(%rbx), %rdi
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L31154
.L31497:
	movzbl	2(%rcx), %r12d
	cmpl	%r13d, %r12d
	jne	.L31174
	jmp	.L31154
	.p2align 6,,7
.L31424:
	movq	8(%r12), %rdx
	jmp	.L31170
.L31492:
	movl	%r13d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L31164
	cmpl	%eax, 32(%rdx)
	jae	.L31165
.L31423:
	movzwl	(%r12), %edx
	jmp	.L31163
.L31165:
	movl	%r13d, %edi
	leaq	0(,%r15,8), %rbx
	call	get_mode_alignment
	mov	%eax, %esi
	movq	%rbx, %rax
	cqto
	idivq	%rsi
	testq	%rdx, %rdx
	jne	.L31423
	movq	-184(%rbp), %rax
	movzbl	mode_size(%rax), %edi
	cmpl	%edi, -260(%rbp)
	jne	.L31423
	movl	%r13d, %edi
	call	gen_reg_rtx
	movl	$1, %ecx
	movl	%r13d, %esi
	movq	-176(%rbp), %rdx
	movq	-168(%rbp), %r8
	movq	%r12, %rdi
	leaq	(%r8,%rdx,8), %rbx
	movl	$1, %r8d
	movq	%r15, %rdx
	movq	%rax, (%rbx)
	call	adjust_address_1
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L31154
.L31164:
	cmpl	$8, %eax
	ja	.L31423
	jmp	.L31165
	.p2align 6,,7
.L31160:
	movq	-152(%rbp), %rbx
	movzbl	2(%rbx), %edx
	movzbl	%dl, %ecx
	cmpl	%r13d, %ecx
	je	.L31158
	testb	%dl, %dl
	je	.L31158
	jmp	.L31159
.L31459:
	movq	%r15, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4, %ecx
	call	expand_expr
	movq	%rax, %r14
	jmp	.L31145
.L31458:
	movq	%rax, %rdi
	call	aggregate_value_p
	testl	%eax, %eax
	jne	.L31087
	movq	-272(%rbp), %rax
	movq	8(%rax), %rcx
	movq	32(%rcx), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L31087
	movzbl	16(%r15), %r8d
	subb	$34, %r8b
	cmpb	$1, %r8b
	ja	.L31088
	movq	144(%r15), %rax
	testq	%rax, %rax
	je	.L31498
.L31089:
	cmpw	$61, (%rax)
	je	.L31087
.L31088:
	call	push_temp_slots
	movq	-272(%rbp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	testq	%r14, %r14
	movq	%rax, -112(%rbp)
	je	.L31499
.L31090:
	cmpw	$39, (%r14)
	je	.L31500
	cmpb	$51, 2(%r14)
	je	.L31501
	movq	-112(%rbp), %rsi
	movq	%r14, %rdi
	jmp	.L31452
.L31501:
	movq	-272(%rbp), %rdi
	call	expr_size
	movq	-112(%rbp), %rsi
	movq	%r14, %rdi
	movq	%rax, %rdx
	call	emit_block_move
	jmp	.L31448
.L31500:
	movq	-272(%rbp), %r9
	movq	8(%r9), %rdi
	call	int_size_in_bytes
	cmpw	$39, (%r14)
	movl	%eax, -116(%rbp)
	jne	.L31455
	movq	8(%r14), %rcx
	movq	8(%rcx), %rdx
	movl	(%rcx), %ebx
	cmpq	$0, 8(%rdx)
	movslq	%ebx,%r13
	sete	%sil
	leaq	15(,%r13,8), %r12
	andq	$-16, %r12
	subq	%r12, %rsp
	leaq	32(%rsp), %r10
	movzbl	%sil, %r15d
	movq	%r10, -128(%rbp)
	movl	%r15d, -252(%rbp)
	movl	-252(%rbp), %eax
	cmpl	%ebx, %eax
	movl	%eax, -244(%rbp)
	jge	.L31395
.L31126:
	movslq	-244(%rbp),%r9
	movl	-116(%rbp), %r11d
	testl	%r11d, %r11d
	movq	8(%rcx,%r9,8), %r8
	movq	%r9, -136(%rbp)
	movq	8(%r8), %rax
	movq	16(%r8), %rcx
	movzbl	2(%rax), %r13d
	movq	8(%rcx), %r15
	movslq	%r13d,%rdi
	movzbl	mode_size(%rdi), %eax
	movq	%rdi, -144(%rbp)
	movl	%eax, -248(%rbp)
	js	.L31099
	movslq	-116(%rbp),%rbx
	mov	%eax, %r12d
	leaq	(%r12,%r15), %r10
	cmpq	%rbx, %r10
	jle	.L31099
	movl	-116(%rbp), %esi
	subl	%r15d, %esi
	movl	%esi, -248(%rbp)
	je	.L31456
.L31099:
	movq	-112(%rbp), %r12
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L31101
	leal	-67(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L31103
	cmpw	$54, %dx
	je	.L31103
	cmpw	$55, %dx
	je	.L31103
	cmpw	$58, %dx
	je	.L31103
	cmpw	$134, %dx
	je	.L31103
	cmpw	$56, %dx
	je	.L31103
	cmpw	$140, %dx
	je	.L31103
.L31102:
	movq	-112(%rbp), %rcx
	movl	%r13d, %edi
	movzbl	2(%rcx), %eax
	testb	%al, %al
	je	.L31440
	movzbl	%al, %edi
.L31440:
	call	gen_reg_rtx
	movq	-112(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	emit_move_insn
.L31101:
	movzwl	(%r12), %edx
	cmpw	$66, %dx
	je	.L31502
.L31106:
	cmpw	$65, %dx
	je	.L31503
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L31123
	cmpw	$54, %dx
	je	.L31123
	cmpw	$55, %dx
	je	.L31123
	cmpw	$58, %dx
	je	.L31123
	cmpw	$134, %dx
	je	.L31123
	cmpw	$56, %dx
	je	.L31123
	cmpw	$140, %dx
	je	.L31123
	cmpw	$61, %dx
	je	.L31504
.L31122:
	movl	-248(%rbp), %eax
	movslq	-116(%rbp),%r11
	leaq	0(,%r15,8), %rdx
	movq	%r12, %rdi
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r13d, %r9d
	movl	%r13d, (%rsp)
	sall	$3, %eax
	mov	%eax, %esi
	movq	%r11, 8(%rsp)
	call	extract_bit_field
	movq	-128(%rbp), %r12
	movq	-136(%rbp), %rdx
	movq	%rax, (%r12,%rdx,8)
.L31097:
	incl	-244(%rbp)
	movq	8(%r14), %rcx
	movl	-244(%rbp), %eax
	cmpl	(%rcx), %eax
	jl	.L31126
.L31395:
	movq	cfun(%rip), %r13
	movq	16(%r13), %rdi
	movq	40(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L31397
.L31132:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L31505
	call	emit_insn
	movq	%rax, 16(%rbx)
.L31131:
	movq	cfun(%rip), %r10
	movq	40(%rbx), %rcx
	movq	16(%r10), %r9
	testq	%rcx, %rcx
	movq	%rcx, %rbx
	movq	%rcx, 40(%r9)
	jne	.L31132
	movq	8(%r14), %rcx
.L31397:
	movl	-252(%rbp), %ebx
	cmpl	(%rcx), %ebx
	jge	.L31448
.L31138:
	movslq	-252(%rbp),%r11
	movq	-128(%rbp), %r12
	salq	$3, %r11
	movq	8(%r11,%rcx), %rsi
	movq	8(%rsi), %rdi
	movq	(%r12,%r11), %rsi
	call	emit_move_insn
	incl	-252(%rbp)
	movq	8(%r14), %rcx
	movl	-252(%rbp), %eax
	cmpl	(%rcx), %eax
	jl	.L31138
	jmp	.L31448
.L31505:
	movq	8(%rdi), %r15
	movq	8(%r15), %r8
	movq	%r8, 16(%rbx)
	call	emit_insn
	jmp	.L31131
.L31504:
	movzbl	2(%r12), %r10d
	cmpl	%r13d, %r10d
	jne	.L31122
.L31123:
	movq	-136(%rbp), %rsi
	movq	-128(%rbp), %rbx
	movq	%r12, (%rbx,%rsi,8)
	jmp	.L31097
.L31503:
	testq	%r15, %r15
	jne	.L31420
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %rdi
	movzbl	mode_size(%rdi), %r11d
	cmpl	%r11d, -248(%rbp)
	je	.L31112
.L31113:
	movzbq	2(%rdx), %rcx
	movzbq	mode_size(%rcx), %r8
	cmpq	%r8, %r15
	je	.L31506
.L31111:
	testq	%r15, %r15
	jne	.L31355
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%rcx
	movzbq	mode_size(%rcx), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %r15
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movl	%r13d, %esi
	movq	%r15, %rdi
	xorl	%edx, %edx
	call	adjust_address_1
	movq	-128(%rbp), %r13
	movq	-136(%rbp), %r8
	movq	%rax, (%r13,%r8,8)
	jmp	.L31097
.L31506:
	movq	16(%r12), %rbx
	movzbq	2(%rbx), %r10
	movzbl	mode_size(%r10), %r9d
	cmpl	%r9d, -248(%rbp)
	jne	.L31111
.L31112:
	xorl	%esi, %esi
	movq	-128(%rbp), %rdx
	movq	-136(%rbp), %rax
	testq	%r15, %r15
	setne	%sil
	leaq	(%rdx,%rax,8), %rbx
	movq	8(%r12,%rsi,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L31097
	cmpw	$54, %dx
	je	.L31097
	cmpw	$55, %dx
	je	.L31097
	cmpw	$58, %dx
	je	.L31097
	cmpw	$134, %dx
	je	.L31097
	cmpw	$56, %dx
	je	.L31097
	cmpw	$140, %dx
	je	.L31097
	cmpw	$61, %dx
	je	.L31507
.L31117:
	movl	-248(%rbp), %edi
	movslq	-116(%rbp),%r11
	movl	%r13d, (%rsp)
	xorl	%edx, %edx
	movl	$1, %ecx
	xorl	%r8d, %r8d
	movl	%r13d, %r9d
	sall	$3, %edi
	mov	%edi, %esi
	movq	%r11, 8(%rsp)
	movq	(%rbx), %rdi
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L31097
.L31507:
	movzbl	2(%rcx), %r12d
	cmpl	%r13d, %r12d
	jne	.L31117
	jmp	.L31097
.L31420:
	movq	8(%r12), %rdx
	jmp	.L31113
.L31502:
	movl	%r13d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L31107
	cmpl	%eax, 32(%rdx)
	jae	.L31108
.L31419:
	movzwl	(%r12), %edx
	jmp	.L31106
.L31108:
	movl	%r13d, %edi
	leaq	0(,%r15,8), %rbx
	call	get_mode_alignment
	mov	%eax, %r10d
	movq	%rbx, %rax
	cqto
	idivq	%r10
	testq	%rdx, %rdx
	jne	.L31419
	movq	-144(%rbp), %rax
	movzbl	mode_size(%rax), %ebx
	cmpl	%ebx, -248(%rbp)
	jne	.L31419
	movl	%r13d, %edi
	call	gen_reg_rtx
	movl	$1, %r8d
	movl	$1, %ecx
	movq	-136(%rbp), %rdx
	movq	-128(%rbp), %rsi
	movq	%r12, %rdi
	leaq	(%rsi,%rdx,8), %rbx
	movq	%r15, %rdx
	movl	%r13d, %esi
	movq	%rax, (%rbx)
	call	adjust_address_1
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L31097
.L31107:
	cmpl	$8, %eax
	ja	.L31419
	jmp	.L31108
.L31103:
	movq	-112(%rbp), %r8
	movzbl	2(%r8), %edx
	movzbl	%dl, %edi
	cmpl	%r13d, %edi
	je	.L31101
	testb	%dl, %dl
	je	.L31101
	jmp	.L31102
.L31499:
	movq	%r15, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4, %ecx
	call	expand_expr
	movq	%rax, %r14
	jmp	.L31090
.L31498:
	movq	%r15, %rdi
	xorl	%esi, %esi
	call	make_decl_rtl
	movq	144(%r15), %rax
	jmp	.L31089
	.p2align 6,,7
.L30977:
	movl	$0, -72(%rbp)
	xorl	%ebx, %ebx
	movq	%r15, %r12
	call	push_temp_slots
	movq	global_trees+136(%rip), %rax
	movq	global_trees+120(%rip), %rdx
	movl	$0, -292(%rbp)
	leaq	-48(%rbp), %r13
	movq	$0, -80(%rbp)
	movq	%rdx, -312(%rbp)
	movq	%rax, -304(%rbp)
	movzbl	16(%r15), %eax
	cmpb	$39, %al
	je	.L31508
	cmpb	$40, %al
	je	.L31509
	movq	8(%r15), %rdx
	movzbl	61(%rdx), %esi
	movzbl	17(%rdx), %r11d
	shrb	$1, %sil
	shrb	$5, %r11b
	movzbl	%sil, %r14d
	movl	%r11d, %r10d
	andl	$1, %r10d
	movl	%r14d, -292(%rbp)
	cmpl	$51, -292(%rbp)
	movl	%r10d, -88(%rbp)
	je	.L31510
	movslq	-292(%rbp),%rcx
	movzwq	mode_bitsize(%rcx,%rcx), %rdx
	movq	%rdx, -48(%rbp)
.L30980:
	testq	%rbx, %rbx
	jne	.L31511
	.p2align 4,,7
.L31047:
	movzbl	16(%r12), %edx
	cmpb	$40, %dl
	je	.L31512
	cmpb	$39, %dl
	je	.L31513
	leal	-43(%rdx), %ebx
	cmpb	$1, %bl
	jbe	.L31514
	cmpb	$57, %dl
	jne	.L31005
	movq	-80(%rbp), %rax
	leaq	-80(%rbp), %r9
	movq	8(%r12), %rdx
	testq	%rax, %rax
	je	.L31006
	movq	(%rax), %r8
.L31007:
	testq	%r8, %r8
	je	.L31389
	movq	128(%rdx), %rsi
.L31040:
	movq	24(%r8), %rdi
	testq	%rdi, %rdi
	movq	%rdi, %rdx
	je	.L31391
	.p2align 4,,7
.L31025:
	movq	8(%rdi), %r10
	cmpq	%rsi, 128(%r10)
	je	.L31515
	movzbl	16(%rdi), %eax
	cmpb	$47, %al
	je	.L31021
	cmpb	$51, %al
	je	.L31021
	movzbl	%al, %r11d 
	movzbl	tree_code_type(%r11), %eax
	cmpb	$114, %al
	je	.L31024
	cmpb	$49, %al
	je	.L31024
	cmpb	$50, %al
	je	.L31024
	cmpb	$101, %al
	je	.L31024
	xorl	%edi, %edi
	.p2align 4,,7
.L31020:
	testq	%rdi, %rdi
	jne	.L31025
.L31391:
	testq	%rdx, %rdx
	je	.L31393
	.p2align 4,,7
.L31039:
	movq	8(%rdx), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$13, %al
	je	.L31031
	cmpb	$15, %al
	je	.L31031
.L31028:
	movzbl	16(%rdx), %eax
	cmpb	$47, %al
	je	.L31035
	cmpb	$51, %al
	je	.L31035
	movzbl	%al, %ecx 
	movzbl	tree_code_type(%rcx), %eax
	cmpb	$114, %al
	je	.L31038
	cmpb	$49, %al
	je	.L31038
	cmpb	$50, %al
	je	.L31038
	cmpb	$101, %al
	je	.L31038
	xorl	%edx, %edx
	.p2align 4,,7
.L31034:
	testq	%rdx, %rdx
	jne	.L31039
.L31393:
	movq	(%r8), %r8
	testq	%r8, %r8
	jne	.L31040
.L31389:
	xorl	%edi, %edi
.L31018:
	testq	%rdi, %rdi
	je	.L30989
	movq	%rdi, %r12
	jmp	.L31047
.L30989:
	movq	-312(%rbp), %rdi
	xorl	%esi, %esi
	call	host_integerp
	testl	%eax, %eax
	je	.L31048
	movq	sizetype_tab+24(%rip), %rdi
	movq	-312(%rbp), %rsi
	call	convert
	movq	global_trees+152(%rip), %rdx
	movl	$61, %edi
	movq	%rax, %rsi
	call	size_binop
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L31048
	movq	-304(%rbp), %rdx
	movl	$59, %edi
	call	size_binop
	testq	%rax, %rax
	movq	%rax, %rbx
	jne	.L31516
.L31048:
	movq	-304(%rbp), %rdi
	xorl	%esi, %esi
	call	tree_low_cst
	movq	%rax, -56(%rbp)
	movq	-312(%rbp), %rax
	movq	%rax, -64(%rbp)
.L31049:
	movl	-292(%rbp), %r10d
	testl	%r10d, %r10d
	movl	%r10d, -68(%rbp)
	jne	.L31051
	movl	-84(%rbp), %r11d
	testl	%r11d, %r11d
	jne	.L31517
.L31051:
	movq	%r12, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	-64(%rbp), %rdi
	movq	%rax, %r13
	movq	%rax, -104(%rbp)
	testq	%rdi, %rdi
	jne	.L31518
.L31052:
	cmpw	$66, (%r13)
	je	.L31519
.L31062:
	movl	-72(%rbp), %eax
	testl	%eax, %eax
	je	.L31077
	cmpw	$66, (%r13)
	je	.L31520
.L31077:
	cmpb	$39, 16(%r15)
	je	.L31521
.L31079:
	cmpw	$66, (%r13)
	je	.L31522
.L31081:
	movq	%r15, %rdi
	call	get_alias_set
	movl	-84(%rbp), %r9d
	movl	-68(%rbp), %ecx
	movq	%rax, %rdi
	movq	-48(%rbp), %rsi
	movq	-56(%rbp), %rdx
	testl	%r9d, %r9d
	je	.L31083
	movq	8(%r15), %r10
	movzbl	61(%r10), %ebx
	shrb	$1, %bl
	movzbl	%bl, %r9d
.L31084:
	movl	-88(%rbp), %eax
	movq	-272(%rbp), %r8
	movl	%eax, (%rsp)
	movq	8(%r12), %r14
	movl	%edi, 16(%rsp)
	movq	%r13, %rdi
	movq	%r14, 8(%rsp)
	call	store_field
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	preserve_temp_slots
	call	free_temp_slots
	call	pop_temp_slots
	movl	-84(%rbp), %r12d
	testl	%r12d, %r12d
	jne	.L31523
	xorl	%r14d, %r14d
	jmp	.L30972
.L31523:
	movq	-272(%rbp), %rdx
	movq	8(%r15), %r13
	movq	8(%rdx), %rsi
	movzbl	61(%r13), %r11d
	movq	%rbx, %rdx
	movzbl	17(%r13), %ecx
	movzbl	61(%rsi), %r15d
	shrb	$1, %r11b
	shrb	$5, %cl
	movzbl	%r11b, %edi
	andl	$1, %ecx
	shrb	$1, %r15b
	movzbl	%r15b, %esi
	call	convert_modes
	movq	%rax, %r14
	jmp	.L30972
.L31083:
	xorl	%r9d, %r9d
	jmp	.L31084
.L31522:
	movq	%r15, %rdi
	call	can_address_p
	testl	%eax, %eax
	jne	.L31081
	cmpq	-104(%rbp), %r13
	je	.L31524
.L31082:
	orb	$1, 3(%r13)
	jmp	.L31081
.L31524:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	jmp	.L31082
	.p2align 6,,7
.L31521:
	movq	40(%r15), %r8
	testb	$16, 17(%r8)
	je	.L31079
	cmpq	-104(%rbp), %r13
	je	.L31525
.L31080:
	orb	$4, 3(%r13)
	jmp	.L31079
.L31525:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	jmp	.L31080
	.p2align 6,,7
.L31520:
	cmpq	-104(%rbp), %r13
	je	.L31526
.L31078:
	orb	$8, 3(%r13)
	jmp	.L31077
.L31526:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	jmp	.L31078
	.p2align 6,,7
.L31519:
	movq	16(%r13), %rax
	xorl	%ebx, %ebx
	testq	%rax, %rax
	je	.L31064
	movq	8(%rax), %rbx
.L31064:
	movq	%r13, %rdi
	call	shallow_copy_rtx
	xorl	%edx, %edx
	movq	%r15, %rsi
	movq	%rax, %r13
	movq	%rax, %rdi
	call	set_mem_attributes
	movq	16(%r13), %rax
	testq	%rax, %rax
	je	.L31066
	cmpq	%rbx, 8(%rax)
.L31439:
	je	.L31062
	testq	%rax, %rax
	je	.L31062
	movq	16(%rax), %rsi
	testq	%rsi, %rsi
	je	.L31062
	movq	-56(%rbp), %r11
	cmpq	$-1, %r11
	leaq	7(%r11), %r14
	movq	%r11, %rax
	cmovle	%r14, %rax
	sarq	$3, %rax
	testq	%rax, %rax
	je	.L31062
	movq	8(%rsi), %rsi
	xorl	%edi, %edi
	subq	%rax, %rsi
	call	gen_rtx_CONST_INT
	movq	%r13, %rdi
	movq	%rax, %rsi
	call	set_mem_offset
	jmp	.L31062
	.p2align 6,,7
.L31066:
	testq	%rbx, %rbx
	jmp	.L31439
.L31518:
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	call	expand_expr
	cmpw	$66, (%r13)
	movq	%rax, %r14
	jne	.L31527
	movzbl	2(%rax), %ecx
	movl	ptr_mode(%rip), %edi
	cmpl	%edi, %ecx
	je	.L31054
	movq	%rax, %rsi
	xorl	%edx, %edx
	call	convert_to_mode
	movq	%rax, %r14
.L31054:
	movl	(%r13), %eax
	andl	$16777215, %eax
	cmpl	$3342402, %eax
	je	.L31528
.L31055:
	movq	8(%r15), %rbx
	movq	-64(%rbp), %rdi
	call	highest_pow2_factor
	movq	%r14, %rsi
	movq	%r13, %rdi
	movl	64(%rbx), %r10d
	shrl	$3, %r10d
	mov	%r10d, %edx
	cmpq	%rax, %rdx
	cmovl	%rax, %rdx
	call	offset_address
	movq	%rax, %r13
	jmp	.L31052
.L31528:
	movq	8(%r13), %r8
	cmpb	$0, 2(%r8)
	je	.L31055
	movq	-48(%rbp), %rdx
	testq	%rdx, %rdx
	jle	.L31055
	movq	-56(%rbp), %rax
	movq	%rdx, %r9
	cqto
	idivq	%r9
	testq	%rdx, %rdx
	jne	.L31055
	movl	-68(%rbp), %edi
	call	get_mode_alignment
	movq	-48(%rbp), %rdx
	mov	%eax, %ebx
	movq	%rdx, %rax
	cqto
	idivq	%rbx
	testq	%rdx, %rdx
	jne	.L31055
	movl	-68(%rbp), %edi
	call	get_mode_alignment
	movq	16(%r13), %rdx
	testq	%rdx, %rdx
	je	.L31056
	cmpl	%eax, 32(%rdx)
.L31438:
	jne	.L31055
	movq	-56(%rbp), %rdx
	movl	-68(%rbp), %esi
	movl	$1, %ecx
	movl	$1, %r8d
	cmpq	$-1, %rdx
	leaq	7(%rdx), %rdi
	cmovle	%rdi, %rdx
	movq	%r13, %rdi
	sarq	$3, %rdx
	call	adjust_address_1
	movq	$0, -56(%rbp)
	movq	%rax, %r13
	jmp	.L31055
.L31056:
	cmpl	$8, %eax
	jmp	.L31438
.L31527:
	movl	$.LC0, %edi
	movl	$3686, %esi
	movl	$.LC19, %edx
	jmp	.L31451
	.p2align 6,,7
.L31517:
	movq	%r12, %rdi
	call	stabilize_reference
	movq	%rax, %r12
	jmp	.L31051
.L31516:
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	host_integerp
	testl	%eax, %eax
	je	.L31048
	movq	%rbx, %rdi
	xorl	%esi, %esi
	call	tree_low_cst
	movq	$0, -64(%rbp)
	movq	%rax, -56(%rbp)
	jmp	.L31049
	.p2align 6,,7
.L31038:
	movq	32(%rdx), %rdx
	jmp	.L31034
	.p2align 6,,7
.L31035:
	movq	40(%rdx), %rdx
	jmp	.L31034
	.p2align 6,,7
.L31031:
	movq	8(%rcx), %r14
	cmpq	%rsi, 128(%r14)
	jne	.L31028
	testq	%r9, %r9
	je	.L31032
	movq	%r8, (%r9)
.L31032:
	movl	$41, %edi
	call	build1
	movq	%rax, %rdi
	jmp	.L31018
	.p2align 6,,7
.L31024:
	movq	32(%rdi), %rdi
	jmp	.L31020
	.p2align 6,,7
.L31021:
	movq	40(%rdi), %rdi
	jmp	.L31020
.L31515:
	testq	%r9, %r9
	je	.L31018
	movq	%r8, (%r9)
	jmp	.L31018
.L31006:
	movq	placeholder_list(%rip), %r8
	jmp	.L31007
.L31005:
	leal	-116(%rdx), %r8d
	cmpb	$1, %r8b
	jbe	.L30992
	leal	-114(%rdx), %r9d
	cmpb	$1, %r9b
	ja	.L30989
	movq	32(%r12), %r13
	movq	8(%r12), %rdi
	movq	8(%r13), %rdx
	movzbl	61(%rdi), %ebx
	movzbl	61(%rdx), %esi
	andb	$-2, %bl
	andb	$-2, %sil
	cmpb	%sil, %bl
	jne	.L30989
.L30992:
	testb	$8, 17(%r12)
	je	.L31046
	movl	$1, -72(%rbp)
.L31046:
	movq	32(%r12), %r12
	jmp	.L31047
.L31514:
	movq	32(%r12), %r13
	movq	40(%r12), %rbx
	movq	%r13, -96(%rbp)
	movq	8(%r13), %rdx
	xorl	%r13d, %r13d
	movq	24(%rdx), %rax
	testq	%rax, %rax
	je	.L31000
	movq	104(%rax), %r13
.L31000:
	movq	8(%rdx), %rdi
	testq	%r13, %r13
	movq	40(%rdi), %r14
	jne	.L31529
.L31001:
	testb	$2, 17(%rbx)
	je	.L31530
.L31002:
	testb	$2, 17(%r14)
	je	.L31531
.L31003:
	movq	sizetype_tab(%rip), %rdi
	movq	%rbx, %rsi
	call	convert
	movq	%r14, %rdx
	movl	$61, %edi
	movq	%rax, %rsi
	call	size_binop
	movq	-312(%rbp), %rsi
	movl	$59, %edi
	movq	%rax, %rdx
	call	size_binop
	movq	%rax, -312(%rbp)
	jmp	.L30992
.L31531:
	movq	%r14, %rdi
	call	contains_placeholder_p
	testl	%eax, %eax
	je	.L31003
	movq	sizetype_tab(%rip), %rsi
	movq	-96(%rbp), %rcx
	movq	%r14, %rdx
	movl	$58, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %r14
	jmp	.L31003
.L31530:
	movq	%rbx, %rdi
	call	contains_placeholder_p
	testl	%eax, %eax
	je	.L31002
	movq	8(%rbx), %rsi
	movq	%rbx, %rdx
	movl	$58, %edi
	movq	%r12, %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %rbx
	jmp	.L31002
.L31529:
	movq	%r13, %rdi
	call	integer_zerop
	testl	%eax, %eax
	jne	.L31001
	movq	8(%rbx), %rsi
	movq	%rbx, %rdx
	movl	$60, %edi
	movq	%r13, %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	movq	%rax, %rbx
	jmp	.L31001
.L31513:
	movq	40(%r12), %r13
	movq	88(%r13), %rbx
	testq	%rbx, %rbx
	je	.L30989
	testb	$2, 17(%rbx)
	je	.L31532
.L30995:
	movq	-312(%rbp), %rsi
	movl	$59, %edi
	movq	%rbx, %rdx
	call	size_binop
	movq	-304(%rbp), %rsi
	movl	$59, %edi
	movq	%rax, -312(%rbp)
	movq	160(%r13), %rdx
.L31437:
	call	size_binop
	movq	%rax, -304(%rbp)
	jmp	.L30992
.L31532:
	movq	%rbx, %rdi
	call	contains_placeholder_p
	testl	%eax, %eax
	je	.L30995
	movq	sizetype_tab(%rip), %rsi
	movq	%rbx, %rdx
	movl	$58, %edi
	movq	%r12, %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %rbx
	jmp	.L30995
	.p2align 6,,7
.L31512:
	movq	-304(%rbp), %rsi
	movq	48(%r12), %rdx
	movl	$59, %edi
	jmp	.L31437
.L31511:
	movq	%rbx, %rdi
	movl	$1, %esi
	call	host_integerp
	testl	%eax, %eax
	jne	.L30986
	movl	$51, -292(%rbp)
	movq	$-1, (%r13)
	jmp	.L31047
.L30986:
	movq	%rbx, %rdi
	movl	$1, %esi
	call	tree_low_cst
	movq	%rax, (%r13)
	jmp	.L31047
.L31510:
	movq	32(%rdx), %rbx
	jmp	.L30980
.L31509:
	movzbl	17(%r15), %r9d
	movq	40(%r15), %rbx
	shrb	$5, %r9b
	movl	%r9d, %r8d
	andl	$1, %r8d
	movl	%r8d, -88(%rbp)
	jmp	.L30980
.L31508:
	movq	40(%r15), %rax
	testb	$16, 49(%rax)
	movq	40(%rax), %rbx
	jne	.L30979
	movzbl	48(%rax), %esi
	movl	%esi, -292(%rbp)
.L30979:
	movzbl	17(%rax), %edi
	shrb	$5, %dil
	movl	%edi, %ecx
	andl	$1, %ecx
	movl	%ecx, -88(%rbp)
	jmp	.L30980
.L31457:
	movq	%rsi, %rdi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%esi, %esi
	call	expand_expr
	movq	%rax, %r14
	jmp	.L31449
.LFE47:
.Lfe47:
	.size	expand_assignment,.Lfe47-expand_assignment
	.align 2
	.p2align 4,,15
.globl store_expr
	.type	store_expr,@function
store_expr:
.LFB48:
	pushq	%rbp
.LCFI240:
	movq	%rsp, %rbp
.LCFI241:
	pushq	%r15
.LCFI242:
	pushq	%r14
.LCFI243:
	pushq	%r13
.LCFI244:
	movq	%rsi, %r13
	pushq	%r12
.LCFI245:
	movq	%rdi, %r12
	pushq	%rbx
.LCFI246:
	subq	$120, %rsp
.LCFI247:
	movl	%edx, -44(%rbp)
	.p2align 4,,7
.L31542:
	movl	$0, -116(%rbp)
	xorl	%r15d, %r15d
	movzbl	16(%r12), %eax
	cmpb	$47, %al
	jne	.L31534
	movq	32(%r12), %rdi
	movq	const_int_rtx+512(%rip), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	call	expand_expr
	movq	cfun(%rip), %rcx
	movq	16(%rcx), %rdx
	movq	40(%rdx), %rbx
	testq	%rbx, %rbx
	je	.L31714
	.p2align 4,,7
.L31540:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L31744
	call	emit_insn
	movq	%rax, 16(%rbx)
.L31539:
	movq	cfun(%rip), %r9
	movq	40(%rbx), %rdi
	movq	16(%r9), %r8
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%r8)
	jne	.L31540
.L31714:
	movq	40(%r12), %r12
	jmp	.L31542
	.p2align 6,,7
.L31744:
	movq	8(%rdi), %rsi
	movq	8(%rsi), %rdx
	movq	%rdx, 16(%rbx)
	call	emit_insn
	jmp	.L31539
.L31534:
	cmpb	$51, %al
	je	.L31745
.L31544:
	movzwl	(%r13), %eax
	subl	$66, %eax
	cmpl	$12, %eax
	ja	.L31592
	mov	%eax, %r14d
	jmp	*.L31593(,%r14,8)
	.section	.rodata
	.align 8
	.align 4
.L31593:
	.quad	.L31586
	.quad	.L31592
	.quad	.L31592
	.quad	.L31592
	.quad	.L31592
	.quad	.L31591
	.quad	.L31592
	.quad	.L31592
	.quad	.L31592
	.quad	.L31589
	.quad	.L31589
	.quad	.L31592
	.quad	.L31589
	.text
.L31586:
	movq	8(%r13), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L31585:
	testl	%ebx, %ebx
	je	.L31582
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L31594
	testb	%al, %al
	jne	.L31746
.L31594:
	movzbl	2(%r13), %edx
	movq	%r12, %rdi
	xorl	%esi, %esi
.L31739:
	xorl	%ecx, %ecx
	call	expand_expr
	testb	$8, 3(%r13)
	movq	%rax, %r14
	jne	.L31732
	movl	-44(%rbp), %ecx
	testl	%ecx, %ecx
	je	.L31732
.L31599:
	movl	$1, -116(%rbp)
.L31732:
	movzwl	(%r14), %edx
.L31543:
	leal	-67(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L31621
	cmpw	$54, %dx
	je	.L31621
	cmpw	$55, %dx
	je	.L31621
	cmpw	$58, %dx
	je	.L31621
	cmpw	$134, %dx
	je	.L31621
	cmpw	$56, %dx
	je	.L31621
	cmpw	$140, %dx
	je	.L31621
.L31620:
	movq	%r14, %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	je	.L31623
	cmpq	%r13, %r14
	je	.L31622
	movq	%r14, %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L31747
.L31623:
	movzbl	16(%r12), %eax
	testb	%al, %al
	je	.L31622
	testl	%r15d, %r15d
	jne	.L31622
	movzbl	%al, %edx 
	cmpb	$100, tree_code_type(%rdx)
	je	.L31748
.L31624:
	movzwl	(%r13), %eax
	cmpl	$71, %eax
	je	.L31629
	cmpl	$66, %eax
	je	.L31749
.L31633:
	cmpl	$75, %eax
	je	.L31637
	cmpl	$78, %eax
	je	.L31637
.L31632:
	movzbl	2(%r14), %eax
	movzbl	2(%r13), %ecx
	cmpb	%cl, %al
	je	.L31642
	testb	%al, %al
	je	.L31642
	movq	8(%r12), %r9
	movl	-116(%rbp), %edi
	movzbl	17(%r9), %r12d
	shrb	$5, %r12b
	movl	%r12d, %edx
	andl	$1, %edx
	testl	%edi, %edi
	je	.L31643
	movq	%r14, %rsi
	movzbl	%cl, %edi
	call	convert_to_mode
	movq	%rax, %r14
.L31704:
	movq	%r13, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
.L31622:
	movl	-44(%rbp), %edi
	testl	%edi, %edi
	jne	.L31706
.L31742:
	xorl	%r14d, %r14d
.L31533:
	leaq	-40(%rbp), %rsp
	movq	%r14, %rax
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
.L31706:
	movl	-116(%rbp), %eax
	testl	%eax, %eax
	je	.L31708
	cmpw	$66, (%r14)
	jne	.L31533
.L31708:
	cmpb	$51, 2(%r13)
	je	.L31710
	cmpw	$61, (%r13)
	je	.L31750
.L31711:
	movq	%r13, %rdi
	call	copy_to_reg
	movq	%rax, %r14
	jmp	.L31533
.L31750:
	cmpl	$52, 8(%r13)
	ja	.L31711
.L31710:
	movq	%r13, %r14
	jmp	.L31533
.L31643:
	movq	%r13, %rdi
	movq	%r14, %rsi
	call	convert_move
	jmp	.L31622
.L31642:
	cmpb	$51, %al
	je	.L31751
.L31646:
	cmpw	$39, (%r13)
	je	.L31752
	cmpb	$51, %al
	jne	.L31704
	movq	%r12, %rdi
	call	expr_size
	movq	%r14, %rsi
	movq	%r13, %rdi
	movq	%rax, %rdx
.L31741:
	call	emit_block_move
	jmp	.L31622
.L31752:
	movq	8(%r12), %rdi
	call	int_size_in_bytes
	cmpw	$39, (%r13)
	movl	%eax, -76(%rbp)
	jne	.L31753
	movq	8(%r13), %rcx
	movq	8(%rcx), %r12
	movl	(%rcx), %r15d
	cmpq	$0, 8(%r12)
	movslq	%r15d,%rdx
	sete	%dil
	leaq	15(,%rdx,8), %r8
	andq	$-16, %r8
	subq	%r8, %rsp
	leaq	16(%rsp), %rbx
	movzbl	%dil, %esi
	movq	%rbx, -88(%rbp)
	movl	%esi, -140(%rbp)
	movl	-140(%rbp), %eax
	cmpl	%r15d, %eax
	movl	%eax, -132(%rbp)
	jge	.L31722
.L31689:
	movslq	-132(%rbp),%r15
	movl	-76(%rbp), %r9d
	testl	%r9d, %r9d
	movq	8(%rcx,%r15,8), %rbx
	movq	%r15, -96(%rbp)
	movq	8(%rbx), %rax
	movq	16(%rbx), %rcx
	movzbl	2(%rax), %r15d
	movq	8(%rcx), %r11
	movq	%r11, -104(%rbp)
	movslq	%r15d,%r10
	movzbl	mode_size(%r10), %eax
	movq	%r10, -112(%rbp)
	movl	%eax, -136(%rbp)
	js	.L31662
	mov	%eax, %edx
	movslq	-76(%rbp),%r8
	addq	-104(%rbp), %rdx
	cmpq	%r8, %rdx
	jle	.L31662
	movl	-76(%rbp), %esi
	subl	-104(%rbp), %esi
	movl	%esi, -136(%rbp)
	je	.L31754
.L31662:
	movzwl	(%r14), %edx
	movq	%r14, %r12
	cmpw	$66, %dx
	je	.L31737
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L31666
	cmpw	$54, %dx
	je	.L31666
	cmpw	$55, %dx
	je	.L31666
	cmpw	$58, %dx
	je	.L31666
	cmpw	$134, %dx
	je	.L31666
	cmpw	$56, %dx
	je	.L31666
	cmpw	$140, %dx
	je	.L31666
.L31665:
	movzbl	2(%r14), %eax
	movl	%r15d, %edi
	testb	%al, %al
	je	.L31740
	movzbl	%al, %edi
.L31740:
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	emit_move_insn
	movzwl	(%r12), %edx
.L31664:
	cmpw	$66, %dx
	je	.L31737
.L31669:
	cmpw	$65, %dx
	je	.L31755
	leal	-67(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L31686
	cmpw	$54, %dx
	je	.L31686
	cmpw	$55, %dx
	je	.L31686
	cmpw	$58, %dx
	je	.L31686
	cmpw	$134, %dx
	je	.L31686
	cmpw	$56, %dx
	je	.L31686
	cmpw	$140, %dx
	je	.L31686
	cmpw	$61, %dx
	je	.L31756
.L31685:
	movslq	-76(%rbp),%rdi
	movl	-136(%rbp), %eax
	movl	$1, %ecx
	movq	-104(%rbp), %rdx
	xorl	%r8d, %r8d
	movl	%r15d, %r9d
	movl	%r15d, (%rsp)
	sall	$3, %eax
	mov	%eax, %esi
	movq	%rdi, 8(%rsp)
	salq	$3, %rdx
	movq	%r12, %rdi
	call	extract_bit_field
	movq	-88(%rbp), %r12
	movq	-96(%rbp), %rsi
	movq	%rax, (%r12,%rsi,8)
.L31660:
	incl	-132(%rbp)
	movq	8(%r13), %rcx
	movl	-132(%rbp), %eax
	cmpl	(%rcx), %eax
	jl	.L31689
.L31722:
	movq	cfun(%rip), %r15
	movq	16(%r15), %r9
	movq	40(%r9), %rbx
	testq	%rbx, %rbx
	je	.L31724
.L31695:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L31757
	call	emit_insn
	movq	%rax, 16(%rbx)
.L31694:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %rcx
	movq	16(%rdx), %r8
	testq	%rcx, %rcx
	movq	%rcx, %rbx
	movq	%rcx, 40(%r8)
	jne	.L31695
	movq	8(%r13), %rcx
.L31724:
	movl	-140(%rbp), %ebx
	cmpl	(%rcx), %ebx
	jge	.L31622
.L31701:
	movslq	-140(%rbp),%r15
	movq	-88(%rbp), %r9
	salq	$3, %r15
	movq	8(%r15,%rcx), %rsi
	movq	8(%rsi), %rdi
	movq	(%r9,%r15), %rsi
	call	emit_move_insn
	incl	-140(%rbp)
	movq	8(%r13), %r12
	movl	-140(%rbp), %eax
	cmpl	(%r12), %eax
	movq	%r12, %rcx
	jl	.L31701
	jmp	.L31622
.L31757:
	movq	8(%rdi), %r11
	movq	8(%r11), %r10
	movq	%r10, 16(%rbx)
	call	emit_insn
	jmp	.L31694
.L31756:
	movzbl	2(%r12), %ebx
	cmpl	%r15d, %ebx
	jne	.L31685
.L31686:
	movq	-96(%rbp), %rdx
	movq	-88(%rbp), %r8
	movq	%r12, (%r8,%rdx,8)
	jmp	.L31660
.L31755:
	cmpq	$0, -104(%rbp)
	jne	.L31736
	movq	8(%r12), %rdx
	movzbq	2(%rdx), %rdi
	movzbl	mode_size(%rdi), %esi
	cmpl	%esi, -136(%rbp)
	je	.L31675
.L31676:
	movzbq	2(%rdx), %r10
	movzbq	mode_size(%r10), %r9
	cmpq	%r9, -104(%rbp)
	je	.L31758
.L31674:
	cmpq	$0, -104(%rbp)
	jne	.L31682
	movzbl	2(%r12), %edi
	xorl	%edx, %edx
	movslq	%edi,%r11
	movzbq	mode_size(%r11), %rsi
	call	assign_stack_temp
	movq	%r12, %rsi
	movq	%rax, %rbx
	movq	%rax, %rdi
	call	emit_move_insn
	movl	$1, %r8d
	movl	$1, %ecx
	movl	%r15d, %esi
	movq	%rbx, %rdi
	xorl	%edx, %edx
	call	adjust_address_1
	movq	-88(%rbp), %r15
	movq	-96(%rbp), %r10
	movq	%rax, (%r15,%r10,8)
	jmp	.L31660
.L31682:
	movl	$.LC0, %edi
	movl	$2028, %esi
.L31743:
	movl	$.LC12, %edx
	call	fancy_abort
	.p2align 6,,7
.L31758:
	movq	16(%r12), %rbx
	movzbq	2(%rbx), %rcx
	movzbl	mode_size(%rcx), %r11d
	cmpl	%r11d, -136(%rbp)
	jne	.L31674
.L31675:
	xorl	%r8d, %r8d
	movq	-88(%rbp), %rdx
	movq	-96(%rbp), %rax
	cmpq	$0, -104(%rbp)
	setne	%r8b
	leaq	(%rdx,%rax,8), %rbx
	movq	8(%r12,%r8,8), %rcx
	movq	%rcx, (%rbx)
	movzwl	(%rcx), %edx
	leal	-67(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L31660
	cmpw	$54, %dx
	je	.L31660
	cmpw	$55, %dx
	je	.L31660
	cmpw	$58, %dx
	je	.L31660
	cmpw	$134, %dx
	je	.L31660
	cmpw	$56, %dx
	je	.L31660
	cmpw	$140, %dx
	je	.L31660
	cmpw	$61, %dx
	je	.L31759
.L31680:
	movslq	-76(%rbp),%rdi
	movl	-136(%rbp), %r9d
	movl	%r15d, (%rsp)
	xorl	%edx, %edx
	movl	$1, %ecx
	xorl	%r8d, %r8d
	sall	$3, %r9d
	movq	%rdi, 8(%rsp)
	mov	%r9d, %esi
	movq	(%rbx), %rdi
	movl	%r15d, %r9d
	call	extract_bit_field
	movq	%rax, (%rbx)
	jmp	.L31660
.L31759:
	movzbl	2(%rcx), %esi
	cmpl	%r15d, %esi
	jne	.L31680
	jmp	.L31660
	.p2align 6,,7
.L31736:
	movq	8(%r12), %rdx
	jmp	.L31676
.L31737:
	movl	%r15d, %edi
	call	get_mode_alignment
	movq	16(%r12), %rdx
	testq	%rdx, %rdx
	je	.L31670
	cmpl	%eax, 32(%rdx)
	jae	.L31671
.L31735:
	movzwl	(%r12), %edx
	jmp	.L31669
.L31671:
	movq	-104(%rbp), %rbx
	movl	%r15d, %edi
	call	get_mode_alignment
	mov	%eax, %r11d
	salq	$3, %rbx
	movq	%rbx, %rax
	cqto
	idivq	%r11
	testq	%rdx, %rdx
	jne	.L31735
	movq	-112(%rbp), %rbx
	movzbl	mode_size(%rbx), %ecx
	cmpl	%ecx, -136(%rbp)
	jne	.L31735
	movl	%r15d, %edi
	call	gen_reg_rtx
	movl	$1, %ecx
	movl	%r15d, %esi
	movq	-96(%rbp), %rdx
	movq	-88(%rbp), %r8
	movq	%r12, %rdi
	leaq	(%r8,%rdx,8), %rbx
	movl	$1, %r8d
	movq	-104(%rbp), %rdx
	movq	%rax, (%rbx)
	call	adjust_address_1
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	jmp	.L31660
	.p2align 6,,7
.L31670:
	cmpl	$8, %eax
	ja	.L31735
	jmp	.L31671
.L31666:
	movzbl	2(%r14), %ecx
	movzbl	%cl, %r9d
	cmpl	%r15d, %r9d
	je	.L31664
	testb	%cl, %cl
	je	.L31664
	jmp	.L31665
.L31754:
	movl	$.LC0, %edi
	movl	$1978, %esi
	jmp	.L31743
.L31753:
	movl	$.LC0, %edi
	movl	$1953, %esi
	jmp	.L31743
	.p2align 6,,7
.L31751:
	cmpb	$29, 16(%r12)
	jne	.L31646
	movq	%r12, %rdi
	call	expr_size
	cmpw	$54, (%rax)
	movq	%rax, %r15
	je	.L31760
.L31647:
	movq	sizetype_tab(%rip), %rdi
	movq	%r15, %rsi
	call	make_tree
	xorl	%esi, %esi
	movslq	32(%r12),%rdi
	movq	%rax, %rbx
	call	size_int_wide
	movq	%rbx, %rsi
	movl	$78, %edi
	movq	%rax, %rdx
	call	size_binop
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	movq	%rax, -72(%rbp)
	call	expand_expr
	xorl	%edx, %edx
	movl	ptr_mode(%rip), %edi
	movq	%rax, %rsi
	movq	$0, -128(%rbp)
	call	convert_to_mode
	movq	%r14, %rsi
	movq	%r13, %rdi
	movq	%rax, %rbx
	movq	%rax, %rdx
	call	emit_block_move
	cmpw	$54, (%rbx)
	je	.L31761
	movq	sizetype_tab(%rip), %rcx
	movq	optab_table+16(%rip), %rsi
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%r15, %rdx
	movzbl	61(%rcx), %r11d
	movq	%rbx, %rcx
	movl	$3, (%rsp)
	shrb	$1, %r11b
	movzbl	%r11b, %edi
	call	expand_binop
	movq	-72(%rbp), %rdi
	movq	%rax, %r12
	call	highest_pow2_factor
	movq	%rbx, %rsi
	movq	%r13, %rdi
	movq	%rax, %rdx
	call	offset_address
	movq	%rax, %r13
	call	gen_label_rtx
	xorl	%r9d, %r9d
	movq	%rax, -128(%rbp)
	movq	const_int_rtx+512(%rip), %rsi
	movq	%r12, %rdi
	movzbl	2(%r12), %r8d
	movl	$107, %edx
	xorl	%ecx, %ecx
	movq	%rax, (%rsp)
	call	emit_cmp_and_jump_insns
.L31650:
	cmpq	const_int_rtx+512(%rip), %r12
	je	.L31651
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	clear_storage
.L31651:
	cmpq	$0, -128(%rbp)
	je	.L31622
	movq	-128(%rbp), %rdi
	call	emit_label
	jmp	.L31622
.L31761:
	movq	8(%rbx), %rsi
	movq	%r15, %rdi
	negq	%rsi
	call	plus_constant_wide
	movl	$1, %r8d
	movl	$1, %ecx
	movq	8(%rbx), %rdx
	movq	%r13, %rdi
	movl	$51, %esi
	movq	%rax, %r12
	call	adjust_address_1
	movq	%rax, %r13
	jmp	.L31650
.L31760:
	movslq	32(%r12),%r10
	cmpq	%r10, 8(%rax)
	jge	.L31647
	movq	%r13, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	jmp	.L31741
	.p2align 6,,7
.L31637:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r15
	call	protect_from_queue
	cmpq	8(%r13), %r15
	movq	%rax, %rbx
	je	.L31762
.L31639:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	movq	%r15, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L31632
.L31762:
	cmpq	16(%r13), %rax
	jne	.L31639
	jmp	.L31632
	.p2align 6,,7
.L31749:
	jne	.L31633
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L31632
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r13
	movq	%rbx, 8(%rax)
	jmp	.L31632
	.p2align 6,,7
.L31629:
	cmpq	$0, 16(%r13)
	je	.L31763
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L31641
	movq	%rsi, %r13
	jmp	.L31632
.L31641:
	movq	8(%r13), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L31632
.L31763:
	movq	8(%r13), %rdi
	call	copy_to_reg
	movq	%rax, %r13
	jmp	.L31632
.L31748:
	movq	144(%r12), %rax
	testq	%rax, %rax
	je	.L31624
	cmpq	%rax, %r13
	jne	.L31624
	jmp	.L31622
	.p2align 6,,7
.L31747:
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	je	.L31622
	jmp	.L31623
	.p2align 6,,7
.L31621:
	cmpb	$0, 2(%r14)
	jne	.L31620
	cmpb	$0, 16(%r12)
	je	.L31620
	movq	8(%r12), %rdx
	movzbl	2(%r13), %edi
	movzbl	61(%rdx), %r8d
	shrb	$1, %r8b
	movzbl	%r8b, %esi
	cmpl	%esi, %edi
	je	.L31620
	movzbl	17(%rdx), %ecx
	movq	%r14, %rdx
	shrb	$5, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, %r14
	jmp	.L31620
.L31746:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	%r12, %rdi
	movzbl	2(%r13), %edx
	movq	%rax, %rsi
	jmp	.L31739
.L31582:
	movl	-44(%rbp), %eax
	testl	%eax, %eax
	je	.L31728
	movl	(%r13), %ecx
	movl	%ecx, %edx
	andl	$134283263, %edx
	cmpl	$66, %edx
	je	.L31764
.L31598:
	andl	$268500991, %ecx
	cmpl	$268435519, %ecx
	je	.L31765
	movzbl	2(%r13), %edx
	xorl	%ecx, %ecx
	movq	%r12, %rdi
	movq	%r13, %rsi
	call	expand_expr
	cmpw	$61, (%r13)
	movq	%rax, %r14
	je	.L31766
.L31618:
	movl	(%r13), %eax
	andl	$134283263, %eax
	cmpl	$134217794, %eax
	je	.L31732
	movq	%r14, %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L31732
	movzwl	(%r14), %edx
	leal	-67(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L31619
	cmpw	$54, %dx
	je	.L31619
	cmpw	$55, %dx
	je	.L31619
	cmpw	$58, %dx
	je	.L31619
	cmpw	$134, %dx
	je	.L31619
	cmpw	$56, %dx
	je	.L31619
	cmpw	$140, %dx
	je	.L31619
	movl	-44(%rbp), %eax
	testl	%eax, %eax
	je	.L31543
.L31619:
	movl	$1, -116(%rbp)
	jmp	.L31543
.L31766:
	cmpl	$52, 8(%r13)
	jbe	.L31732
	jmp	.L31618
.L31765:
	movl	-44(%rbp), %eax
	xorl	%edx, %edx
	testl	%eax, %eax
	jne	.L31604
	movq	8(%r12), %rsi
	movzbl	16(%rsi), %eax
	cmpb	$6, %al
	je	.L31605
	cmpb	$10, %al
	je	.L31605
	cmpb	$11, %al
	je	.L31605
	cmpb	$12, %al
	je	.L31605
.L31604:
	movq	%rdx, %rsi
	xorl	%ecx, %ecx
	movq	%r12, %rdi
	xorl	%edx, %edx
	call	expand_expr
	movzwl	(%rax), %edx
	movq	%rax, %r14
	cmpw	$66, %dx
	je	.L31767
.L31607:
	leal	-67(%rdx), %edi
	cmpw	$1, %di
	jbe	.L31610
	cmpw	$54, %dx
	je	.L31610
	cmpw	$55, %dx
	je	.L31610
	cmpw	$58, %dx
	je	.L31610
	cmpw	$134, %dx
	je	.L31610
	cmpw	$56, %dx
	je	.L31610
	cmpw	$140, %dx
	je	.L31610
.L31609:
	movzbl	3(%r13), %edx
	movq	8(%r13), %rdi
	movq	%r14, %rsi
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	movl	-44(%rbp), %eax
	testl	%eax, %eax
	je	.L31742
	movzbl	2(%r14), %edx
	movzbl	2(%r13), %eax
	cmpb	%al, %dl
	je	.L31611
	testb	%dl, %dl
	je	.L31612
	movq	%r14, %rsi
	movzbl	%al, %edi
	call	gen_lowpart_SUBREG
	movzbl	3(%rax), %r11d
	movq	%rax, %r14
	orb	$16, %r11b
	movb	%r11b, 3(%rax)
	andb	$-5, %r11b
	movzbl	3(%r13), %eax
	andb	$4, %al
	orb	%al, %r11b
	movb	%r11b, 3(%r14)
.L31611:
	movl	-44(%rbp), %eax
	testl	%eax, %eax
	jne	.L31533
	jmp	.L31742
.L31612:
	movq	8(%r13), %r15
	movzbl	3(%r13), %ecx
	movq	%r14, %rdx
	movzbl	%al, %edi
	movzbl	2(%r15), %esi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, %r14
	jmp	.L31611
.L31610:
	cmpb	$0, 2(%r14)
	jne	.L31609
	movq	8(%r12), %r10
	movzbl	3(%r13), %ecx
	movq	%r14, %rdx
	movzbl	2(%r13), %edi
	movzbl	61(%r10), %r9d
	shrb	$2, %cl
	andl	$1, %ecx
	shrb	$1, %r9b
	movzbl	%r9b, %esi
	call	convert_modes
	movzbl	3(%r13), %ecx
	movzbl	2(%r13), %esi
	movq	8(%r13), %r12
	movq	%rax, %rdx
	movzbl	2(%r12), %edi
	shrb	$2, %cl
	andl	$1, %ecx
	call	convert_modes
	movq	%rax, %r14
	jmp	.L31609
.L31767:
	movl	-44(%rbp), %eax
	testl	%eax, %eax
	je	.L31607
	testb	$8, 3(%r14)
	jne	.L31608
	movq	8(%r13), %rdi
	movq	8(%r14), %rsi
	call	reg_mentioned_p
	testl	%eax, %eax
	je	.L31729
.L31608:
	movq	%r14, %rdi
	call	copy_to_reg
	movq	%rax, %r14
.L31729:
	movzwl	(%r14), %edx
	jmp	.L31607
.L31605:
	cmpq	$0, 8(%rsi)
	jne	.L31604
	movzbl	3(%r13), %ecx
	movzbl	17(%rsi), %ebx
	movl	$1, %edi
	movl	%ecx, %r8d
	shrb	$5, %bl
	shrb	$2, %r8b
	andl	$1, %ebx
	andl	%r8d, %edi
	cmpl	%edi, %ebx
	je	.L31606
	call	signed_or_unsigned_type
	movq	%r12, %rsi
	movq	%rax, %rdi
	call	convert
	movzbl	3(%r13), %ecx
	movq	%rax, %r12
.L31606:
	movq	8(%r13), %rsi
	shrb	$2, %cl
	movzbl	2(%rsi), %edi
	movl	$1, %esi
	andl	%ecx, %esi
	call	type_for_mode
	movq	%r12, %rsi
	movq	%rax, %rdi
	call	convert
	movq	8(%r13), %rdx
	movq	%rax, %r12
	jmp	.L31604
.L31764:
	movzbl	2(%r13), %eax
	cmpb	$51, %al
	je	.L31598
	xorl	%ecx, %ecx
	movzbl	%al, %edx
	movq	%r12, %rdi
	movq	%r13, %rsi
	call	expand_expr
	movq	%rax, %r14
	movzbl	2(%rax), %eax
	cmpb	$51, %al
	je	.L31599
	testb	%al, %al
	je	.L31599
	cmpq	%r13, %r14
	je	.L31601
	movq	%r14, %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L31768
.L31600:
	movq	%r14, %rdi
	call	copy_to_reg
	movq	%rax, %r14
	jmp	.L31599
.L31768:
	movq	%r14, %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L31600
	movq	%r13, %rdi
	call	side_effects_p
	testl	%eax, %eax
	jne	.L31600
.L31601:
	movl	$1, %r15d
	jmp	.L31600
	.p2align 6,,7
.L31728:
	movl	(%r13), %ecx
	jmp	.L31598
.L31591:
	movl	$1, %ebx
	jmp	.L31585
.L31592:
	xorl	%ebx, %ebx
	jmp	.L31585
.L31589:
	movq	8(%r13), %rdi
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L31591
	movq	16(%r13), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L31585
	jmp	.L31591
	.p2align 6,,7
.L31745:
	cmpb	$51, 2(%r13)
	jne	.L31544
	call	gen_label_rtx
	movq	%rax, -56(%rbp)
	call	gen_label_rtx
	movq	cfun(%rip), %rbx
	movq	%rax, -64(%rbp)
	movq	16(%rbx), %r10
	movq	40(%r10), %rbx
	testq	%rbx, %rbx
	je	.L31716
.L31550:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L31769
	call	emit_insn
	movq	%rax, 16(%rbx)
.L31549:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %r15
	movq	16(%rdx), %rcx
	testq	%r15, %r15
	movq	%r15, %rbx
	movq	%r15, 40(%rcx)
	jne	.L31550
.L31716:
	movzwl	(%r13), %eax
	movq	%r13, %r14
	cmpl	$71, %eax
	je	.L31552
	cmpl	$66, %eax
	je	.L31770
.L31556:
	cmpl	$75, %eax
	je	.L31560
	cmpl	$78, %eax
	je	.L31560
.L31555:
	call	do_pending_stack_adjust
	movq	cfun(%rip), %r9
	movq	-56(%rbp), %rsi
	movq	16(%r9), %r8
	incl	4(%r8)
	movq	32(%r12), %rdi
	call	jumpifnot
	call	start_cleanup_deferral
	movq	40(%r12), %rdi
	movq	%r14, %rsi
	xorl	%edx, %edx
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %rdi
	movq	16(%rdi), %rsi
	movq	40(%rsi), %rbx
	testq	%rbx, %rbx
	je	.L31718
.L31570:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L31771
	call	emit_insn
	movq	%rax, 16(%rbx)
.L31569:
	movq	cfun(%rip), %rdx
	movq	40(%rbx), %r15
	movq	16(%rdx), %rcx
	testq	%r15, %r15
	movq	%r15, %rbx
	movq	%r15, 40(%rcx)
	jne	.L31570
.L31718:
	movq	-64(%rbp), %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	-56(%rbp), %rdi
	call	emit_label
	call	start_cleanup_deferral
	movq	48(%r12), %rdi
	xorl	%edx, %edx
	movq	%r14, %rsi
	call	store_expr
	call	end_cleanup_deferral
	movq	cfun(%rip), %rbx
	movq	16(%rbx), %r12
	movq	40(%r12), %rbx
	testq	%rbx, %rbx
	je	.L31720
.L31577:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L31772
	call	emit_insn
	movq	%rax, 16(%rbx)
.L31576:
	movq	cfun(%rip), %r9
	movq	40(%rbx), %rdi
	movq	16(%r9), %r8
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%r8)
	jne	.L31577
.L31720:
	movq	-64(%rbp), %rdi
	call	emit_label
	movl	$0, %r10d
	movl	-44(%rbp), %eax
	movq	cfun(%rip), %r15
	movq	16(%r15), %r11
	decl	4(%r11)
	testl	%eax, %eax
	cmove	%r10, %r14
	jmp	.L31533
.L31772:
	movq	8(%rdi), %rsi
	movq	8(%rsi), %r13
	movq	%r13, 16(%rbx)
	call	emit_insn
	jmp	.L31576
.L31771:
	movq	8(%rdi), %r11
	movq	8(%r11), %r10
	movq	%r10, 16(%rbx)
	call	emit_insn
	jmp	.L31569
.L31560:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, %r15
	call	protect_from_queue
	cmpq	8(%r13), %r15
	movq	%rax, %rbx
	je	.L31773
.L31562:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%r15, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L31555
.L31773:
	cmpq	16(%r13), %rax
	jne	.L31562
	jmp	.L31555
	.p2align 6,,7
.L31770:
	jne	.L31556
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r13), %rax
	movq	%rax, %rbx
	je	.L31555
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %r14
	movq	%rbx, 8(%rax)
	jmp	.L31555
	.p2align 6,,7
.L31552:
	cmpq	$0, 16(%r13)
	je	.L31774
	movq	24(%r13), %rax
	testq	%rax, %rax
	je	.L31564
.L31738:
	movq	%rax, %r14
	jmp	.L31555
.L31564:
	movq	8(%r13), %r13
	movzbl	2(%r13), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L31555
.L31774:
	movq	8(%r13), %rdi
	call	copy_to_reg
	jmp	.L31738
	.p2align 6,,7
.L31769:
	movq	8(%rdi), %r14
	movq	8(%r14), %r11
	movq	%r11, 16(%rbx)
	call	emit_insn
	jmp	.L31549
.LFE48:
.Lfe48:
	.size	store_expr,.Lfe48-store_expr
	.align 2
	.p2align 4,,15
.globl get_inner_reference
	.type	get_inner_reference,@function
get_inner_reference:
.LFB49:
	pushq	%r15
.LCFI248:
	pushq	%r14
.LCFI249:
	pushq	%r13
.LCFI250:
	pushq	%r12
.LCFI251:
	movq	%rsi, %r12
	pushq	%rbp
.LCFI252:
	xorl	%ebp, %ebp
	pushq	%rbx
.LCFI253:
	movq	%rdi, %rbx
	subq	$56, %rsp
.LCFI254:
	movq	global_trees+120(%rip), %r14
	movq	%rdx, 40(%rsp)
	movq	%rcx, 32(%rsp)
	movq	%r8, 24(%rsp)
	movq	global_trees+136(%rip), %rdx
	movl	$0, 20(%rsp)
	movq	$0, 48(%rsp)
	movq	%r9, %rcx
	movq	%rdx, 8(%rsp)
	movzbl	16(%rdi), %eax
	cmpb	$39, %al
	je	.L31939
	cmpb	$40, %al
	je	.L31940
	movq	8(%rdi), %r8
	movzbl	61(%r8), %r9d
	movzbl	17(%r8), %edi
	shrb	$1, %r9b
	shrb	$5, %dil
	movzbl	%r9b, %edx
	andl	$1, %edi
	movl	%edx, 20(%rsp)
	movl	%edi, (%rcx)
	cmpl	$51, 20(%rsp)
	je	.L31941
	movslq	20(%rsp),%r11
	movzwq	mode_bitsize(%r11,%r11), %r10
	movq	%r10, (%rsi)
.L31861:
	testq	%rbp, %rbp
	jne	.L31942
	.p2align 4,,7
.L31928:
	movzbl	16(%rbx), %edx
	cmpb	$40, %dl
	je	.L31943
	cmpb	$39, %dl
	je	.L31944
	leal	-43(%rdx), %ebp
	cmpb	$1, %bpl
	jbe	.L31945
	cmpb	$57, %dl
	jne	.L31886
	movq	48(%rsp), %rax
	leaq	48(%rsp), %r9
	movq	8(%rbx), %rdx
	testq	%rax, %rax
	je	.L31887
	movq	(%rax), %r8
.L31888:
	testq	%r8, %r8
	je	.L31932
	movq	128(%rdx), %rsi
.L31921:
	movq	24(%r8), %rdi
	testq	%rdi, %rdi
	movq	%rdi, %rdx
	je	.L31934
	.p2align 4,,7
.L31906:
	movq	8(%rdi), %r12
	cmpq	%rsi, 128(%r12)
	je	.L31946
	movzbl	16(%rdi), %eax
	cmpb	$47, %al
	je	.L31902
	cmpb	$51, %al
	je	.L31902
	movzbl	%al, %r13d 
	movzbl	tree_code_type(%r13), %eax
	cmpb	$114, %al
	je	.L31905
	cmpb	$49, %al
	je	.L31905
	cmpb	$50, %al
	je	.L31905
	cmpb	$101, %al
	je	.L31905
	xorl	%edi, %edi
	.p2align 4,,7
.L31901:
	testq	%rdi, %rdi
	jne	.L31906
.L31934:
	testq	%rdx, %rdx
	je	.L31936
	.p2align 4,,7
.L31920:
	movq	8(%rdx), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$13, %al
	je	.L31912
	cmpb	$15, %al
	je	.L31912
.L31909:
	movzbl	16(%rdx), %eax
	cmpb	$47, %al
	je	.L31916
	cmpb	$51, %al
	je	.L31916
	movzbl	%al, %edi 
	movzbl	tree_code_type(%rdi), %eax
	cmpb	$114, %al
	je	.L31919
	cmpb	$49, %al
	je	.L31919
	cmpb	$50, %al
	je	.L31919
	cmpb	$101, %al
	je	.L31919
	xorl	%edx, %edx
	.p2align 4,,7
.L31915:
	testq	%rdx, %rdx
	jne	.L31920
.L31936:
	movq	(%r8), %r8
	testq	%r8, %r8
	jne	.L31921
.L31932:
	xorl	%edi, %edi
.L31899:
	testq	%rdi, %rdi
	je	.L31870
	movq	%rdi, %rbx
	jmp	.L31928
.L31870:
	xorl	%esi, %esi
	movq	%r14, %rdi
	call	host_integerp
	testl	%eax, %eax
	je	.L31929
	movq	sizetype_tab+24(%rip), %rdi
	movq	%r14, %rsi
	call	convert
	movq	global_trees+152(%rip), %rdx
	movl	$61, %edi
	movq	%rax, %rsi
	call	size_binop
	testq	%rax, %rax
	movq	%rax, %rsi
	je	.L31929
	movq	8(%rsp), %rdx
	movl	$59, %edi
	call	size_binop
	testq	%rax, %rax
	movq	%rax, %rbp
	jne	.L31947
.L31929:
	movq	8(%rsp), %rdi
	xorl	%esi, %esi
	call	tree_low_cst
	movq	32(%rsp), %r13
	movq	40(%rsp), %r15
	movq	%r14, (%r13)
	movq	%rax, (%r15)
.L31930:
	movl	20(%rsp), %eax
	movq	24(%rsp), %rdi
	movl	%eax, (%rdi)
	addq	$56, %rsp
	movq	%rbx, %rax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L31947:
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	host_integerp
	testl	%eax, %eax
	je	.L31929
	movq	%rbp, %rdi
	xorl	%esi, %esi
	call	tree_low_cst
	movq	32(%rsp), %r14
	movq	40(%rsp), %r12
	movq	$0, (%r14)
	movq	%rax, (%r12)
	jmp	.L31930
	.p2align 6,,7
.L31919:
	movq	32(%rdx), %rdx
	jmp	.L31915
	.p2align 6,,7
.L31916:
	movq	40(%rdx), %rdx
	jmp	.L31915
	.p2align 6,,7
.L31912:
	movq	8(%rcx), %r15
	cmpq	%rsi, 128(%r15)
	jne	.L31909
	testq	%r9, %r9
	je	.L31913
	movq	%r8, (%r9)
.L31913:
	movl	$41, %edi
	call	build1
	movq	%rax, %rdi
	jmp	.L31899
	.p2align 6,,7
.L31905:
	movq	32(%rdi), %rdi
	jmp	.L31901
	.p2align 6,,7
.L31902:
	movq	40(%rdi), %rdi
	jmp	.L31901
.L31946:
	testq	%r9, %r9
	je	.L31899
	movq	%r8, (%r9)
	jmp	.L31899
.L31887:
	movq	placeholder_list(%rip), %r8
	jmp	.L31888
.L31886:
	leal	-116(%rdx), %r8d
	cmpb	$1, %r8b
	jbe	.L31873
	leal	-114(%rdx), %r9d
	cmpb	$1, %r9b
	ja	.L31870
	movq	32(%rbx), %r11
	movq	8(%rbx), %rbp
	movq	8(%r11), %rdx
	movzbl	61(%rbp), %r10d
	movzbl	61(%rdx), %ecx
	andb	$-2, %r10b
	andb	$-2, %cl
	cmpb	%cl, %r10b
	jne	.L31870
.L31873:
	testb	$8, 17(%rbx)
	je	.L31927
	movq	112(%rsp), %rsi
	movl	$1, (%rsi)
.L31927:
	movq	32(%rbx), %rbx
	jmp	.L31928
.L31945:
	movq	32(%rbx), %r15
	xorl	%r12d, %r12d
	movq	40(%rbx), %rbp
	movq	8(%r15), %rdx
	movq	24(%rdx), %rax
	testq	%rax, %rax
	je	.L31881
	movq	104(%rax), %r12
.L31881:
	movq	8(%rdx), %rsi
	testq	%r12, %r12
	movq	40(%rsi), %r13
	jne	.L31948
.L31882:
	testb	$2, 17(%rbp)
	je	.L31949
.L31883:
	testb	$2, 17(%r13)
	je	.L31950
.L31884:
	movq	sizetype_tab(%rip), %rdi
	movq	%rbp, %rsi
	call	convert
	movq	%r13, %rdx
	movl	$61, %edi
	movq	%rax, %rsi
	call	size_binop
	movq	%r14, %rsi
	movl	$59, %edi
	movq	%rax, %rdx
	call	size_binop
	movq	%rax, %r14
	jmp	.L31873
.L31950:
	movq	%r13, %rdi
	call	contains_placeholder_p
	testl	%eax, %eax
	je	.L31884
	movq	sizetype_tab(%rip), %rsi
	movq	%r13, %rdx
	movl	$58, %edi
	movq	%r15, %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %r13
	jmp	.L31884
.L31949:
	movq	%rbp, %rdi
	call	contains_placeholder_p
	testl	%eax, %eax
	je	.L31883
	movq	8(%rbp), %rsi
	movq	%rbp, %rdx
	movl	$58, %edi
	movq	%rbx, %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %rbp
	jmp	.L31883
.L31948:
	movq	%r12, %rdi
	call	integer_zerop
	testl	%eax, %eax
	jne	.L31882
	movq	8(%rbp), %rsi
	movq	%rbp, %rdx
	movl	$60, %edi
	movq	%r12, %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	movq	%rax, %rbp
	jmp	.L31882
.L31944:
	movq	40(%rbx), %r12
	movq	88(%r12), %rbp
	testq	%rbp, %rbp
	je	.L31870
	testb	$2, 17(%rbp)
	je	.L31951
.L31876:
	movq	%r14, %rsi
	movl	$59, %edi
	movq	%rbp, %rdx
	call	size_binop
	movq	160(%r12), %rdx
	movq	8(%rsp), %rsi
	movq	%rax, %r14
	movl	$59, %edi
.L31938:
	call	size_binop
	movq	%rax, 8(%rsp)
	jmp	.L31873
.L31951:
	movq	%rbp, %rdi
	call	contains_placeholder_p
	testl	%eax, %eax
	je	.L31876
	movq	sizetype_tab(%rip), %rsi
	movq	%rbp, %rdx
	movl	$58, %edi
	movq	%rbx, %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %rbp
	jmp	.L31876
	.p2align 6,,7
.L31943:
	movq	8(%rsp), %rsi
	movq	48(%rbx), %rdx
	movl	$59, %edi
	jmp	.L31938
.L31942:
	movq	%rbp, %rdi
	movl	$1, %esi
	call	host_integerp
	testl	%eax, %eax
	jne	.L31867
	movl	$51, 20(%rsp)
	movq	$-1, (%r12)
	jmp	.L31928
.L31867:
	movq	%rbp, %rdi
	movl	$1, %esi
	call	tree_low_cst
	movq	%rax, (%r12)
	jmp	.L31928
.L31941:
	movq	8(%rbx), %rcx
	movq	32(%rcx), %rbp
	jmp	.L31861
.L31940:
	movq	40(%rdi), %rbp
	movzbl	17(%rdi), %eax
.L31937:
	shrb	$5, %al
	andl	$1, %eax
	movl	%eax, (%rcx)
	jmp	.L31861
.L31939:
	movq	40(%rdi), %rax
	testb	$16, 49(%rax)
	movq	40(%rax), %rbp
	jne	.L31860
	movzbl	48(%rax), %esi
	movl	%esi, 20(%rsp)
.L31860:
	movzbl	17(%rax), %eax
	jmp	.L31937
.LFE49:
.Lfe49:
	.size	get_inner_reference,.Lfe49-get_inner_reference
	.align 2
	.p2align 4,,15
.globl handled_component_p
	.type	handled_component_p,@function
handled_component_p:
.LFB50:
	movzbl	16(%rdi), %eax
	subl	$39, %eax
	cmpl	$78, %eax
	ja	.L31962
	mov	%eax, %edx
	jmp	*.L31963(,%rdx,8)
	.section	.rodata
	.align 8
	.align 4
.L31963:
	.quad	.L31959
	.quad	.L31959
	.quad	.L31962
	.quad	.L31962
	.quad	.L31959
	.quad	.L31959
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31962
	.quad	.L31961
	.quad	.L31961
	.quad	.L31959
	.quad	.L31959
	.text
	.p2align 6,,7
.L31959:
	movl	$1, %eax
	ret
	.p2align 6,,7
.L31962:
	xorl	%eax, %eax
	ret
	.p2align 6,,7
.L31961:
	movq	32(%rdi), %r8
	movq	8(%rdi), %r9
	movq	8(%r8), %rdi
	movzbl	61(%r9), %esi
	movzbl	61(%rdi), %ecx
	andb	$-2, %sil
	andb	$-2, %cl
	cmpb	%cl, %sil
	sete	%dl
	movzbl	%dl, %eax
	ret
.LFE50:
.Lfe50:
	.size	handled_component_p,.Lfe50-handled_component_p
	.align 2
	.p2align 4,,15
.globl force_operand
	.type	force_operand,@function
force_operand:
.LFB51:
	pushq	%r14
.LCFI255:
	movq	%rsi, %r14
	pushq	%r13
.LCFI256:
	xorl	%r13d, %r13d
	pushq	%r12
.LCFI257:
	pushq	%rbp
.LCFI258:
	movq	%rdi, %rbp
	pushq	%rbx
.LCFI259:
	movq	%rsi, %rbx
	subq	$16, %rsp
.LCFI260:
	testq	%rsi, %rsi
	je	.L31965
	movl	(%rsi), %eax
	andl	$67174399, %eax
	cmpl	$61, %eax
	je	.L31986
.L31965:
	xorl	%ebx, %ebx
.L31967:
	movl	(%rbp), %edx
	leal	-75(%rdx), %ecx
	cmpw	$1, %cx
	ja	.L31968
	movq	pic_offset_table_rtx(%rip), %rcx
	cmpq	%rcx, 8(%rbp)
	je	.L31987
.L31968:
	cmpw	$75, %dx
	je	.L31988
	cmpw	$76, %dx
	je	.L31989
	cmpw	$78, %dx
	je	.L31990
.L31972:
	testq	%r13, %r13
	je	.L31979
	movq	16(%rbp), %r12
	movzwl	(%r12), %edx
	leal	-67(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L31980
	cmpw	$54, %dx
	je	.L31980
	cmpw	$55, %dx
	je	.L31980
	cmpw	$58, %dx
	je	.L31980
	cmpw	$134, %dx
	je	.L31980
	cmpw	$56, %dx
	je	.L31980
	cmpw	$140, %dx
	je	.L31980
	cmpw	$61, %dx
	je	.L31991
.L31981:
	xorl	%ebx, %ebx
	.p2align 4,,7
.L31980:
	cmpq	optab_table+16(%rip), %r13
	je	.L31992
.L31982:
	cmpq	optab_table(%rip), %r13
	je	.L31993
.L31983:
	movq	8(%rbp), %rdi
	movq	%rbx, %rsi
	call	force_operand
	movq	%r12, %rdi
	movq	%rax, %rbx
.L31985:
	xorl	%esi, %esi
	call	force_operand
	xorl	%r9d, %r9d
	movq	%r14, %r8
	movzbl	2(%rbp), %edi
	movq	%rbx, %rdx
	movq	%rax, %rcx
	movq	%r13, %rsi
	movl	$3, (%rsp)
	call	expand_binop
	movq	%rax, %rbx
.L31964:
	addq	$16, %rsp
	movq	%rbx, %rax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	ret
	.p2align 6,,7
.L31993:
	cmpw	$54, (%r12)
	jne	.L31983
	movq	8(%rbp), %rax
	cmpw	$75, (%rax)
	jne	.L31983
	movq	8(%rax), %rdx
	cmpw	$61, (%rdx)
	jne	.L31983
	movl	8(%rdx), %edx
	cmpl	$52, %edx
	jbe	.L31983
	cmpl	$57, %edx
	ja	.L31983
	movzbl	2(%rbp), %edi
	movq	%rbx, %r8
	movq	%r13, %rsi
	movl	$3, (%rsp)
	movq	%r12, %rcx
	xorl	%r9d, %r9d
	movq	8(%rax), %rdx
	call	expand_binop
	movq	8(%rbp), %rdx
	movq	%rax, %rbx
	movq	16(%rdx), %rdi
	jmp	.L31985
	.p2align 6,,7
.L31992:
	cmpw	$54, %dx
	jne	.L31982
	movzbl	2(%rbp), %edi
	movq	%r12, %rsi
	movq	optab_table(%rip), %r13
	call	negate_rtx
	movq	%rax, %r12
	jmp	.L31982
.L31991:
	cmpq	%rbx, %r12
	jne	.L31980
	jmp	.L31981
	.p2align 6,,7
.L31979:
	cmpw	$63, %dx
	je	.L31994
.L31984:
	movq	%rbp, %rbx
	jmp	.L31964
	.p2align 6,,7
.L31994:
	movq	8(%rbp), %rdi
	cmpw	$66, (%rdi)
	jne	.L31984
	movzbq	2(%rdi), %rax
	movzbq	2(%rbp), %r10
	movzbl	mode_size(%rax), %ebx
	cmpb	%bl, mode_size(%r10)
	jbe	.L31984
	xorl	%esi, %esi
	call	force_operand
	movq	8(%rbp), %r12
	movq	%rax, %rsi
	movzbl	2(%r12), %edi
	call	force_reg
	movl	16(%rbp), %ecx
	movq	8(%rbp), %r11
	movzbl	2(%rbp), %edi
	movq	%rax, %rsi
	movzbl	2(%r11), %edx
	call	simplify_gen_subreg
	movq	%rax, %rbp
	jmp	.L31984
	.p2align 6,,7
.L31990:
	movq	16(%rbp), %r13
	movzwl	(%r13), %edx
	leal	-67(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L31976
	cmpw	$54, %dx
	je	.L31976
	cmpw	$55, %dx
	je	.L31976
	cmpw	$58, %dx
	je	.L31976
	cmpw	$134, %dx
	je	.L31976
	cmpw	$56, %dx
	je	.L31976
	cmpw	$140, %dx
	je	.L31976
	cmpw	$61, %dx
	je	.L31995
.L31977:
	xorl	%ebx, %ebx
	.p2align 4,,7
.L31976:
	movq	8(%rbp), %rdi
	movq	%rbx, %rsi
	call	force_operand
	xorl	%esi, %esi
	movq	%r13, %rdi
	movzbl	2(%rbp), %ebx
	movq	%rax, %r12
	call	force_operand
	addq	$16, %rsp
	movq	%r12, %rsi
	movq	%r14, %rcx
	movq	%rax, %rdx
	movl	$1, %r8d
	movl	%ebx, %edi
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	jmp	expand_mult
.L31995:
	cmpq	%rbx, %r13
	jne	.L31976
	jmp	.L31977
	.p2align 6,,7
.L31989:
	movq	optab_table+16(%rip), %r13
	jmp	.L31972
	.p2align 6,,7
.L31988:
	movq	optab_table(%rip), %r13
	jmp	.L31972
	.p2align 6,,7
.L31987:
	movq	16(%rbp), %rdi
	movzwl	(%rdi), %ecx
	leal	-67(%rcx), %esi
	cmpw	$1, %si
	jbe	.L31969
	cmpw	$58, %cx
	jne	.L31968
.L31969:
	testq	%rbx, %rbx
	je	.L31996
.L31970:
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	emit_move_insn
	jmp	.L31964
.L31996:
	movzbl	2(%rbp), %edi
	call	gen_reg_rtx
	movq	%rax, %rbx
	jmp	.L31970
	.p2align 6,,7
.L31986:
	cmpl	$52, 8(%rsi)
	jbe	.L31965
	call	preserve_subexpressions_p
	testl	%eax, %eax
	je	.L31967
	jmp	.L31965
.LFE51:
.Lfe51:
	.size	force_operand,.Lfe51-force_operand
	.align 2
	.p2align 4,,15
.globl safe_from_p
	.type	safe_from_p,@function
safe_from_p:
.LFB52:
	pushq	%r14
.LCFI261:
	pushq	%r13
.LCFI262:
	pushq	%r12
.LCFI263:
	pushq	%rbp
.LCFI264:
	movq	%rsi, %rbp
	pushq	%rbx
.LCFI265:
	movq	%rdi, %rbx
.L32005:
	xorl	%r13d, %r13d
	testq	%rbx, %rbx
	je	.L32077
	testl	%edx, %edx
	je	.L32000
	movq	8(%rbp), %rax
	testq	%rax, %rax
	je	.L32000
	movq	32(%rax), %rcx
	testq	%rcx, %rcx
	je	.L32000
	cmpb	$25, 16(%rcx)
	je	.L32000
	cmpb	$18, 16(%rax)
	je	.L32085
.L32001:
	cmpb	$51, 2(%rbx)
	je	.L32077
	.p2align 4,,7
.L32000:
	movzwl	(%rbx), %ecx
	cmpw	$66, %cx
	movl	%ecx, %esi
	je	.L32086
.L31998:
	cmpw	$63, %si
	je	.L32087
.L32002:
	testl	%edx, %edx
	jne	.L32088
	movzbl	16(%rbp), %edx
	movzbl	%dl, %esi 
	movsbl	tree_code_type(%rsi),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L32011
	mov	%eax, %edi
	jmp	*.L32071(,%rdi,8)
	.section	.rodata
	.align 8
	.align 4
.L32071:
	.quad	.L32054
	.quad	.L32027
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32027
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32077
	.quad	.L32012
	.quad	.L32030
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32030
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32011
	.quad	.L32017
	.text
	.p2align 6,,7
.L32012:
	movq	144(%rbp), %rax
	testq	%rax, %rax
	movq	%rax, %r13
	jne	.L32082
	xorl	%r13d, %r13d
.L32011:
	testq	%r13, %r13
	movl	$1, %r12d
	je	.L31997
.L32082:
	cmpw	$63, (%r13)
	je	.L32089
.L32074:
	movq	%rbx, %rdi
	movq	%r13, %rsi
	xorl	%r12d, %r12d
	call	rtx_equal_p
	testl	%eax, %eax
	jne	.L31997
	cmpw	$66, (%rbx)
	je	.L32090
.L32077:
	movl	$1, %r12d
.L31997:
	popq	%rbx
	popq	%rbp
	movl	%r12d, %eax
	popq	%r12
	popq	%r13
	popq	%r14
	ret
.L32090:
	cmpw	$66, (%r13)
	jne	.L32077
	xorl	%esi, %esi
	movq	%r13, %rdi
	movq	%rbx, %rdx
	movl	$rtx_addr_varies_p, %ecx
	call	true_dependence
	testl	%eax, %eax
	je	.L32077
	jmp	.L31997
	.p2align 6,,7
.L32089:
	movq	8(%r13), %r13
	cmpw	$61, (%r13)
	jne	.L32074
	cmpl	$52, 8(%r13)
	ja	.L32074
.L32083:
	xorl	%r12d, %r12d
	jmp	.L31997
	.p2align 6,,7
.L32054:
	movq	32(%rbp), %rbp
.L32084:
	xorl	%edx, %edx
	jmp	.L32005
	.p2align 6,,7
.L32027:
	movq	32(%rbp), %rsi
	xorl	%edx, %edx
	movq	%rbx, %rdi
	xorl	%r12d, %r12d
	call	safe_from_p
	testl	%eax, %eax
	je	.L31997
	movq	40(%rbp), %rsi
	xorl	%edx, %edx
	movq	%rbx, %rdi
	call	safe_from_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r12d
	jmp	.L31997
	.p2align 6,,7
.L32030:
	movzbl	%dl, %eax
	subl	$41, %eax
	cmpl	$80, %eax
	ja	.L32031
	mov	%eax, %r8d
	jmp	*.L32062(,%r8,8)
	.section	.rodata
	.align 8
	.align 4
.L32062:
	.quad	.L32041
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32059
	.quad	.L32047
	.quad	.L32060
	.quad	.L32053
	.quad	.L32054
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32031
	.quad	.L32055
	.quad	.L32031
	.quad	.L32051
	.quad	.L32032
	.text
.L32032:
	movq	32(%rbp), %rdi
	call	staticp
	testl	%eax, %eax
	jne	.L32077
	testb	$4, 18(%rbp)
	jne	.L32077
	movq	32(%rbp), %rsi
	xorl	%edx, %edx
	movq	%rbx, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L32077
	movq	32(%rbp), %rbp
	movzbq	16(%rbp), %rcx
	cmpb	$100, tree_code_type(%rcx)
	je	.L32091
.L32031:
	testq	%r13, %r13
	jne	.L32082
	movzbl	16(%rbp), %edi
	xorl	%r12d, %r12d
	call	first_rtl_op
	cmpl	%eax, %r12d
	movl	%eax, %r14d
	jge	.L32081
.L32069:
	movslq	%r12d,%r9
	movq	32(%rbp,%r9,8), %rsi
	testq	%rsi, %rsi
	jne	.L32092
.L32066:
	incl	%r12d
	cmpl	%r14d, %r12d
	jl	.L32069
.L32081:
	cmpb	$-110, 16(%rbp)
	jbe	.L32011
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	xorl	%r12d, %r12d
	call	*lang_hooks+80(%rip)
	testl	%eax, %eax
	je	.L31997
	jmp	.L32011
	.p2align 6,,7
.L32092:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L32066
	jmp	.L32083
.L32091:
	movq	144(%rbp), %rax
	testq	%rax, %rax
	je	.L32083
	cmpw	$66, (%rax)
	jne	.L32083
	movq	8(%rax), %r13
	jmp	.L32031
	.p2align 6,,7
.L32041:
	cmpw	$66, %cx
	jne	.L32031
	movq	%rbp, %rdi
	call	get_alias_set
	xorl	%edi, %edi
	movq	%rax, %rsi
	movq	16(%rbx), %rax
	testq	%rax, %rax
	je	.L32046
	movq	(%rax), %rdi
.L32046:
	call	alias_sets_conflict_p
	xorl	%r12d, %r12d
	testl	%eax, %eax
	jne	.L31997
	jmp	.L32031
	.p2align 6,,7
.L32059:
	movq	40(%rbp), %rbp
	jmp	.L32084
.L32047:
	cmpw	$61, %cx
	je	.L32093
.L32050:
	cmpw	$66, %cx
	jne	.L32031
	jmp	.L32083
.L32093:
	cmpl	$52, 8(%rbx)
	jbe	.L32083
	jmp	.L32050
.L32053:
	movq	48(%rbp), %r13
	jmp	.L32031
.L32055:
	movq	48(%rbp), %r13
	testq	%r13, %r13
	jne	.L32082
	movzbl	18(%rbp), %eax
	movl	$1, %r12d
	testb	$16, %al
	jne	.L31997
	movq	32(%rbp), %rsi
	orb	$16, %al
	xorl	%edx, %edx
	movb	%al, 18(%rbp)
	movq	%rbx, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L32058
	andb	$-17, 18(%rbp)
	jmp	.L32083
.L32058:
	movq	save_expr_list.2(%rip), %rdx
	movq	%rbp, %rdi
	xorl	%esi, %esi
	call	tree_cons
	movq	%rax, save_expr_list.2(%rip)
	jmp	.L32077
	.p2align 6,,7
.L32051:
	cmpq	$0, 32(%rbp)
	jne	.L32083
	movq	40(%rbp), %r13
	jmp	.L32031
	.p2align 6,,7
.L32017:
	cmpb	$2, %dl
	je	.L32094
	testb	%dl, %dl
	sete	%dl
	movzbl	%dl, %r12d
	jmp	.L31997
.L32094:
	movq	32(%rbp), %rsi
	xorl	%r12d, %r12d
	testq	%rsi, %rsi
	jne	.L32095
.L32020:
	movq	(%rbp), %rsi
	testq	%rsi, %rsi
	je	.L32077
	xorl	%edx, %edx
	movq	%rbx, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L31997
	jmp	.L32077
.L32095:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L32020
	jmp	.L31997
.L32088:
	xorl	%edx, %edx
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	movq	$0, save_expr_list.2(%rip)
	call	safe_from_p
	movq	save_expr_list.2(%rip), %rdx
	movl	%eax, %r12d
	testq	%rdx, %rdx
	je	.L31997
.L32010:
	movq	24(%rdx), %rcx
	andb	$-17, 18(%rcx)
	movq	(%rdx), %rdx
	testq	%rdx, %rdx
	jne	.L32010
	jmp	.L31997
	.p2align 6,,7
.L32087:
	movq	8(%rbx), %rbx
	movzwl	(%rbx), %ecx
	cmpw	$61, %cx
	jne	.L32002
	cmpl	$52, 8(%rbx)
	ja	.L32002
	jmp	.L32083
	.p2align 6,,7
.L32086:
	movq	8(%rbx), %rax
	movq	global_rtl+72(%rip), %rdi
	cmpq	%rdi, %rax
	je	.L32077
	cmpw	$75, (%rax)
	jne	.L31998
	cmpq	%rdi, 8(%rax)
	jne	.L31998
	jmp	.L32077
	.p2align 6,,7
.L32085:
	movq	112(%rax), %rax
	testq	%rax, %rax
	je	.L32001
	cmpb	$25, 16(%rax)
	jne	.L32001
	jmp	.L32000
.L32060:
	movl	$.LC0, %edi
	movl	$5724, %esi
	movl	$.LC18, %edx
	call	fancy_abort
.LFE52:
.Lfe52:
	.size	safe_from_p,.Lfe52-safe_from_p
	.align 2
	.p2align 4,,15
.globl find_placeholder
	.type	find_placeholder,@function
find_placeholder:
.LFB53:
	testq	%rsi, %rsi
	movq	%rsi, %r8
	movq	8(%rdi), %rdx
	je	.L32111
	movq	(%rsi), %rax
	testq	%rax, %rax
	je	.L32111
	movq	(%rax), %rdi
.L32112:
	testq	%rdi, %rdi
	je	.L32146
	movq	128(%rdx), %rsi
.L32144:
	movq	24(%rdi), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rdx
	je	.L32148
	.p2align 4,,7
.L32129:
	movq	8(%rcx), %r9
	cmpq	%rsi, 128(%r9)
	je	.L32151
	movzbl	16(%rcx), %eax
	cmpb	$47, %al
	je	.L32125
	cmpb	$51, %al
	je	.L32125
	movzbl	%al, %r9d 
	movzbl	tree_code_type(%r9), %eax
	cmpb	$114, %al
	je	.L32128
	cmpb	$49, %al
	je	.L32128
	cmpb	$50, %al
	je	.L32128
	cmpb	$101, %al
	je	.L32128
	xorl	%ecx, %ecx
	.p2align 4,,7
.L32124:
	testq	%rcx, %rcx
	jne	.L32129
.L32148:
	testq	%rdx, %rdx
	je	.L32150
	.p2align 4,,7
.L32143:
	movq	8(%rdx), %rcx
	movzbl	16(%rcx), %eax
	cmpb	$13, %al
	je	.L32135
	cmpb	$15, %al
	je	.L32135
.L32132:
	movzbl	16(%rdx), %eax
	cmpb	$47, %al
	je	.L32139
	cmpb	$51, %al
	je	.L32139
	movzbl	%al, %ecx 
	movzbl	tree_code_type(%rcx), %eax
	cmpb	$114, %al
	je	.L32142
	cmpb	$49, %al
	je	.L32142
	cmpb	$50, %al
	je	.L32142
	cmpb	$101, %al
	je	.L32142
	xorl	%edx, %edx
	.p2align 4,,7
.L32138:
	testq	%rdx, %rdx
	jne	.L32143
.L32150:
	movq	(%rdi), %rdi
	testq	%rdi, %rdi
	jne	.L32144
.L32146:
	xorl	%ecx, %ecx
.L32110:
	movq	%rcx, %rax
	ret
	.p2align 6,,7
.L32142:
	movq	32(%rdx), %rdx
	jmp	.L32138
	.p2align 6,,7
.L32139:
	movq	40(%rdx), %rdx
	jmp	.L32138
	.p2align 6,,7
.L32135:
	movq	8(%rcx), %r10
	cmpq	%rsi, 128(%r10)
	jne	.L32132
	testq	%r8, %r8
	je	.L32136
	movq	%rdi, (%r8)
.L32136:
	movl	$41, %edi
	jmp	build1
	.p2align 6,,7
.L32128:
	movq	32(%rcx), %rcx
	jmp	.L32124
	.p2align 6,,7
.L32125:
	movq	40(%rcx), %rcx
	jmp	.L32124
.L32151:
	testq	%r8, %r8
	je	.L32110
	movq	%rdi, (%r8)
	jmp	.L32110
.L32111:
	movq	placeholder_list(%rip), %rdi
	jmp	.L32112
.LFE53:
.Lfe53:
	.size	find_placeholder,.Lfe53-find_placeholder
	.align 2
	.p2align 4,,15
.globl init_pending_stack_adjust
	.type	init_pending_stack_adjust,@function
init_pending_stack_adjust:
.LFB54:
	movq	cfun(%rip), %rcx
	movq	16(%rcx), %rdx
	movl	$0, (%rdx)
	ret
.LFE54:
.Lfe54:
	.size	init_pending_stack_adjust,.Lfe54-init_pending_stack_adjust
	.align 2
	.p2align 4,,15
.globl clear_pending_stack_adjust
	.type	clear_pending_stack_adjust,@function
clear_pending_stack_adjust:
.LFB55:
	movl	optimize(%rip), %eax
	testl	%eax, %eax
	jle	.L32153
	movl	flag_omit_frame_pointer(%rip), %eax
	testl	%eax, %eax
	je	.L32155
	movq	cfun(%rip), %rdx
	testb	$64, 424(%rdx)
	je	.L32153
.L32155:
	movq	current_function_decl(%rip), %rcx
	testb	$8, 49(%rcx)
	je	.L32156
	movl	flag_no_inline(%rip), %esi
	testl	%esi, %esi
	je	.L32153
.L32156:
	movl	flag_inline_functions(%rip), %edi
	testl	%edi, %edi
	jne	.L32153
	movq	cfun(%rip), %r9
	movq	16(%r9), %r8
	movl	8(%r8), %eax
	subl	(%r8), %eax
	movl	$0, (%r8)
	movl	%eax, 8(%r8)
.L32153:
	ret
.LFE55:
.Lfe55:
	.size	clear_pending_stack_adjust,.Lfe55-clear_pending_stack_adjust
	.align 2
	.p2align 4,,15
.globl compare_from_rtx
	.type	compare_from_rtx,@function
compare_from_rtx:
.LFB56:
	pushq	%r15
.LCFI266:
	movl	%ecx, %r15d
	pushq	%r14
.LCFI267:
	movl	%r8d, %r14d
	pushq	%r13
.LCFI268:
	movq	%r9, %r13
	pushq	%r12
.LCFI269:
	movl	%edx, %r12d
	pushq	%rbp
.LCFI270:
	movq	%rdi, %rbp
	pushq	%rbx
.LCFI271:
	movq	%rsi, %rbx
	subq	$8, %rsp
.LCFI272:
	call	swap_commutative_operands_p
	testl	%eax, %eax
	jne	.L32163
	movq	%rbx, %rax
	movq	%rbp, %rbx
	movq	%rax, %rbp
.L32158:
	movl	flag_force_mem(%rip), %eax
	testl	%eax, %eax
	jne	.L32164
.L32159:
	call	do_pending_stack_adjust
	cmpw	$54, (%rbx)
	jne	.L32160
	cmpw	$54, (%rbp)
	je	.L32165
.L32160:
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	movl	%r12d, %edx
	movq	%r13, %rcx
	movl	%r14d, %r8d
	movl	%r15d, %r9d
	call	emit_cmp_insn
	movq	global_rtl+8(%rip), %rdx
	movq	const_int_rtx+512(%rip), %rcx
	movl	%r12d, %edi
	addq	$8, %rsp
	xorl	%esi, %esi
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_rtx_fmt_ee
.L32165:
	movl	%r12d, %edi
	movl	%r14d, %esi
	movq	%rbx, %rdx
	movq	%rbp, %rcx
	call	simplify_relational_operation
	testq	%rax, %rax
	je	.L32160
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
	.p2align 6,,7
.L32164:
	movq	%rbx, %rdi
	call	force_not_mem
	movq	%rbp, %rdi
	movq	%rax, %rbx
	call	force_not_mem
	movq	%rax, %rbp
	jmp	.L32159
	.p2align 6,,7
.L32163:
	movl	%r12d, %edi
	call	swap_condition
	movl	%eax, %r12d
	jmp	.L32158
.LFE56:
.Lfe56:
	.size	compare_from_rtx,.Lfe56-compare_from_rtx
	.align 2
	.p2align 4,,15
.globl case_values_threshold
	.type	case_values_threshold,@function
case_values_threshold:
.LFB57:
	movl	$5, %eax
	ret
.LFE57:
.Lfe57:
	.size	case_values_threshold,.Lfe57-case_values_threshold
	.align 2
	.p2align 4,,15
.globl try_casesi
	.type	try_casesi,@function
try_casesi:
.LFB58:
	xorl	%eax, %eax
	ret
.LFE58:
.Lfe58:
	.size	try_casesi,.Lfe58-try_casesi
	.align 2
	.p2align 4,,15
.globl try_tablejump
	.type	try_tablejump,@function
try_tablejump:
.LFB59:
	pushq	%r15
.LCFI273:
	movq	%r9, %r15
	pushq	%r14
.LCFI274:
	movq	%rcx, %r14
	pushq	%r13
.LCFI275:
	pushq	%r12
.LCFI276:
	pushq	%rbp
.LCFI277:
	movq	%rdi, %rbp
	pushq	%rbx
.LCFI278:
	movq	%rdx, %rbx
	subq	$24, %rsp
.LCFI279:
	movq	%r8, 16(%rsp)
	call	convert
	movq	%rbx, %rsi
	movq	%rbp, %rdi
	movq	%rax, %r13
	call	convert
	movq	%r13, %rdx
	movq	%rbp, %rsi
	movq	%rax, %rcx
	movl	$60, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	call	expand_expr
	movq	cfun(%rip), %rcx
	movq	%rax, %r12
	movq	16(%rcx), %rdx
	movq	40(%rdx), %rbx
	testq	%rbx, %rbx
	je	.L32308
	.p2align 4,,7
.L32247:
	movq	32(%rbx), %rdi
	cmpw	$24, (%rdi)
	je	.L32311
	call	emit_insn
	movq	%rax, 16(%rbx)
.L32246:
	movq	cfun(%rip), %r9
	movq	40(%rbx), %rdi
	movq	16(%r9), %r8
	testq	%rdi, %rdi
	movq	%rdi, %rbx
	movq	%rdi, 40(%r8)
	jne	.L32247
.L32308:
	movzwl	(%r12), %eax
	cmpl	$71, %eax
	je	.L32249
	cmpl	$66, %eax
	je	.L32312
.L32253:
	cmpl	$75, %eax
	je	.L32257
	cmpl	$78, %eax
	je	.L32257
.L32252:
	call	do_pending_stack_adjust
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movq	%r14, %rdi
	movzbl	61(%rbp), %r13d
	call	expand_expr
	movzbl	61(%rbp), %ecx
	movq	8(%r14), %rbp
	movq	%rax, %rdx
	movzbl	61(%rbp), %r11d
	shrb	$1, %r13b
	shrb	$1, %cl
	movzbl	%r13b, %ebx
	movzbl	%cl, %edi
	movzbl	17(%rbp), %ecx
	shrb	$1, %r11b
	movzbl	%r11b, %esi
	shrb	$5, %cl
	andl	$1, %ecx
	call	convert_modes
	movl	$1, %r9d
	movl	%ebx, %r8d
	movq	%rax, %rsi
	movl	$109, %edx
	xorl	%ecx, %ecx
	movq	%r12, %rdi
	movq	%r15, (%rsp)
	call	emit_cmp_and_jump_insns
	movl	target_flags(%rip), %eax
	testl	$33554432, %eax
	movl	%eax, %edx
	je	.L32263
	cmpl	$5, %ebx
.L32310:
	je	.L32262
	andl	$33554432, %edx
	movq	%r12, %rsi
	movl	$1, %edx
	setne	%al
	movzbl	%al, %edi
	addl	$4, %edi
	call	convert_to_mode
	movq	%rax, %r12
	movl	target_flags(%rip), %eax
.L32262:
	testl	$33554432, %eax
	je	.L32280
	movl	flag_pic(%rip), %r14d
	testl	%r14d, %r14d
	je	.L32278
.L32280:
	movl	$4, %eax
.L32279:
	movzbq	mode_size(%rax), %rsi
	xorl	%edi, %edi
	call	gen_rtx_CONST_INT
	movl	$78, %edi
	testb	$2, target_flags+3(%rip)
	setne	%dl
	movq	%rax, %rcx
	movzbl	%dl, %esi
	movq	%r12, %rdx
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	movq	16(%rsp), %rdx
	movl	$67, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %r12
	setne	%bl
	movzbl	%bl, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_u00
	movq	%r12, %rdx
	movl	$75, %edi
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rcx
	setne	%r15b
	movzbl	%r15b, %esi
	addl	$4, %esi
	call	gen_rtx_fmt_ee
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rsi
	je	.L32292
	movl	flag_pic(%rip), %edi
	testl	%edi, %edi
	je	.L32290
.L32292:
	movl	$4, %edi
.L32291:
	call	memory_address_noforce
	testb	$2, target_flags+3(%rip)
	movq	%rax, %r12
	je	.L32298
	movl	flag_pic(%rip), %esi
	testl	%esi, %esi
	je	.L32296
.L32298:
	movl	$4, %edi
.L32297:
	call	gen_reg_rtx
	testb	$2, target_flags+3(%rip)
	movq	%rax, %rbx
	je	.L32304
	movl	flag_pic(%rip), %r8d
	testl	%r8d, %r8d
	je	.L32302
.L32304:
	movl	$4, %edi
.L32303:
	movq	%r12, %rsi
	call	gen_rtx_MEM
	xorl	%edx, %edx
	movq	%rbx, %rdi
	orb	$4, 3(%rax)
	movq	%rax, %rsi
	call	convert_move
	movq	16(%rsp), %rsi
	movq	%rbx, %rdi
	call	gen_tablejump
	movq	%rax, %rdi
	call	emit_jump_insn
	movl	flag_pic(%rip), %r9d
	testl	%r9d, %r9d
	je	.L32313
.L32306:
	addq	$24, %rsp
	movl	$1, %eax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L32313:
	call	emit_barrier
	jmp	.L32306
.L32302:
	movl	$5, %edi
	jmp	.L32303
.L32296:
	movl	$5, %edi
	jmp	.L32297
.L32290:
	movl	$5, %edi
	jmp	.L32291
.L32278:
	movl	$5, %eax
	jmp	.L32279
.L32263:
	cmpl	$4, %ebx
	jmp	.L32310
.L32257:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, %r13
	call	protect_from_queue
	cmpq	8(%r12), %r13
	movq	%rax, %rbx
	je	.L32314
.L32259:
	movq	%r12, %rdi
	call	copy_rtx
	movq	%rax, %r12
	movq	%r13, 8(%rax)
	movq	%rbx, 16(%rax)
	jmp	.L32252
.L32314:
	cmpq	16(%r12), %rax
	jne	.L32259
	jmp	.L32252
	.p2align 6,,7
.L32312:
	cmpb	$51, 2(%r12)
	je	.L32250
	movq	8(%r12), %rbx
	cmpw	$71, (%rbx)
	je	.L32315
.L32250:
	cmpl	$66, %eax
	jne	.L32253
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	cmpq	8(%r12), %rax
	movq	%rax, %rbx
	je	.L32252
	movq	%r12, %rdi
	call	copy_rtx
	movq	%rax, %r12
	movq	%rbx, 8(%rax)
	jmp	.L32252
.L32315:
	movq	8(%rbx), %rsi
	movq	%r12, %rdi
	call	replace_equiv_address_nv
	cmpq	$0, 16(%rbx)
	movq	%rax, %r13
	je	.L32251
	movzbl	2(%r12), %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	gen_move_insn
	movq	16(%rbx), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L32252
.L32251:
	movq	8(%rax), %rdi
	call	copy_to_reg
	movq	%r13, %rdi
	movq	%rax, %rsi
	call	replace_equiv_address
.L32309:
	movq	%rax, %r12
	jmp	.L32252
.L32249:
	cmpq	$0, 16(%r12)
	je	.L32316
	movq	24(%r12), %rax
	testq	%rax, %rax
	jne	.L32309
	movq	8(%r12), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L32252
.L32316:
	movq	8(%r12), %rdi
	call	copy_to_reg
	jmp	.L32309
	.p2align 6,,7
.L32311:
	movq	8(%rdi), %rsi
	movq	8(%rsi), %rdx
	movq	%rdx, 16(%rbx)
	call	emit_insn
	jmp	.L32246
.LFE59:
.Lfe59:
	.size	try_tablejump,.Lfe59-try_tablejump
	.comm	cse_not_expected,4,4
	.comm	movstr_optab,236,32
	.comm	clrstr_optab,236,32
	.align 2
	.p2align 4,,15
	.type	clear_by_pieces_1,@function
clear_by_pieces_1:
.LFB60:
	movq	const_int_rtx+512(%rip), %rax
	ret
.LFE60:
.Lfe60:
	.size	clear_by_pieces_1,.Lfe60-clear_by_pieces_1
	.align 2
	.p2align 4,,15
	.type	is_zeros_p,@function
is_zeros_p:
.LFB61:
	pushq	%rbp
.LCFI280:
	pushq	%rbx
.LCFI281:
	movq	%rdi, %rbx
	subq	$8, %rsp
.LCFI282:
	.p2align 4,,7
.L31781:
	movzbl	16(%rbx), %eax
	cmpl	$28, %eax
	je	.L31786
	cmpl	$28, %eax
	jbe	.L32324
	cmpl	$46, %eax
	je	.L31793
	cmpl	$46, %eax
	jb	.L31801
	subl	$114, %eax
	cmpl	$3, %eax
	ja	.L31801
	movq	32(%rbx), %rbx
	jmp	.L31781
.L31801:
	xorl	%ebp, %ebp
.L31775:
	addq	$8, %rsp
	movl	%ebp, %eax
	popq	%rbx
	popq	%rbp
	ret
.L31793:
	movq	8(%rbx), %rax
	testq	%rax, %rax
	je	.L31794
	cmpb	$19, 16(%rax)
	je	.L32325
.L31794:
	movq	40(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L31800
.L32320:
	movl	$1, %ebp
	jmp	.L31775
.L31800:
	movq	32(%rbx), %rdi
	call	is_zeros_p
	testl	%eax, %eax
	je	.L31801
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L31800
	jmp	.L32320
.L32325:
	cmpq	$0, 40(%rbx)
.L32323:
	sete	%dl
	movzbl	%dl, %ebp
	jmp	.L31775
.L32324:
	cmpl	$26, %eax
	je	.L31785
	cmpl	$26, %eax
	ja	.L31783
	cmpl	$25, %eax
	jne	.L31801
	addq	$8, %rsp
	movq	%rbx, %rdi
	popq	%rbx
	popq	%rbp
	jmp	integer_zerop
.L31783:
	movq	32(%rbx), %rdi
	xorl	%ebp, %ebp
	call	is_zeros_p
	testl	%eax, %eax
	je	.L31775
	movq	40(%rbx), %rdi
	call	is_zeros_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %ebp
	jmp	.L31775
.L31785:
	leaq	32(%rbx), %rsi
	movl	$dconst0, %edi
	movl	$24, %ecx
	cld
	repz
	cmpsb
	jmp	.L32323
.L31786:
	movq	32(%rbx), %rbx
	testq	%rbx, %rbx
	je	.L32320
.L31792:
	movq	32(%rbx), %rdi
	call	is_zeros_p
	testl	%eax, %eax
	je	.L31801
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L31792
	jmp	.L32320
.LFE61:
.Lfe61:
	.size	is_zeros_p,.Lfe61-is_zeros_p
	.align 2
	.p2align 4,,15
	.type	mostly_zeros_p,@function
mostly_zeros_p:
.LFB62:
	pushq	%r13
.LCFI283:
	pushq	%r12
.LCFI284:
	pushq	%rbp
.LCFI285:
	movq	%rdi, %rbp
	pushq	%rbx
.LCFI286:
	subq	$8, %rsp
.LCFI287:
	movzbl	16(%rdi), %eax
	cmpb	$46, %al
	je	.L32337
	movzbl	%al, %eax
	cmpl	$28, %eax
	je	.L31824
	cmpl	$28, %eax
	ja	.L31841
	cmpl	$26, %eax
	je	.L31823
	cmpl	$26, %eax
	ja	.L31821
	cmpl	$25, %eax
	je	.L31820
.L31839:
	xorl	%ebx, %ebx
.L31819:
	movl	%ebx, %eax
.L31804:
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret
.L31820:
	call	integer_zerop
.L32335:
	movl	%eax, %ebx
	jmp	.L31819
.L31821:
	movq	32(%rdi), %rdi
	xorl	%ebx, %ebx
	call	is_zeros_p
	testl	%eax, %eax
	je	.L31819
	movq	40(%rbp), %rdi
	call	is_zeros_p
	testl	%eax, %eax
	je	.L31819
	.p2align 4,,7
.L32331:
	movl	$1, %ebx
	jmp	.L31819
.L31823:
	leaq	32(%rdi), %rsi
	movl	$24, %ecx
	movl	$dconst0, %edi
	cld
	repz
	cmpsb
.L32334:
	sete	%sil
	movzbl	%sil, %ebx
	jmp	.L31819
	.p2align 6,,7
.L31841:
	cmpl	$46, %eax
	je	.L31831
	cmpl	$46, %eax
	jb	.L31839
	subl	$114, %eax
	cmpl	$3, %eax
	ja	.L31839
	movq	32(%rdi), %rdi
	call	is_zeros_p
	jmp	.L32335
.L31831:
	movq	8(%rdi), %rax
	testq	%rax, %rax
	je	.L31832
	cmpb	$19, 16(%rax)
	je	.L32338
.L31832:
	movq	40(%rbp), %rbx
	testq	%rbx, %rbx
	je	.L32331
	.p2align 4,,7
.L31838:
	movq	32(%rbx), %rdi
	call	is_zeros_p
	testl	%eax, %eax
	je	.L31839
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L31838
	jmp	.L32331
.L32338:
	cmpq	$0, 40(%rdi)
	jmp	.L32334
	.p2align 6,,7
.L31824:
	movq	32(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L32331
	.p2align 4,,7
.L31830:
	movq	32(%rbx), %rdi
	call	is_zeros_p
	testl	%eax, %eax
	je	.L31839
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L31830
	jmp	.L32331
	.p2align 6,,7
.L32337:
	movq	8(%rdi), %rax
	xorl	%r13d, %r13d
	xorl	%r12d, %r12d
	movq	40(%rdi), %rbx
	testq	%rax, %rax
	je	.L31806
	cmpb	$19, 16(%rax)
	je	.L32339
.L31806:
	testq	%rbx, %rbx
	jne	.L31813
.L32327:
	leal	0(,%r12,4), %edx
	leal	(%r13,%r13,2), %ecx
	cmpl	%ecx, %edx
	setge	%al
.L32336:
	movzbl	%al, %eax
	jmp	.L31804
	.p2align 6,,7
.L31813:
	movq	32(%rbx), %rdi
	call	mostly_zeros_p
	movq	(%rbx), %rbx
	leal	1(%r12), %ecx
	testl	%eax, %eax
	cmovne	%ecx, %r12d
	incl	%r13d
	testq	%rbx, %rbx
	jne	.L31813
	jmp	.L32327
.L32339:
	testq	%rbx, %rbx
	sete	%al
	jmp	.L32336
.LFE62:
.Lfe62:
	.size	mostly_zeros_p,.Lfe62-mostly_zeros_p
	.local	direct_load
	.comm	direct_load,59,32
	.local	direct_store
	.comm	direct_store,59,32
	.section	.eh_frame,"aw",@progbits
.Lframe1:
	.long	.LECIE1-.LSCIE1
.LSCIE1:
	.long	0x0
	.byte	0x1
	.string	""
	.uleb128 0x1
	.sleb128 -8
	.byte	0x10
	.byte	0xc
	.uleb128 0x7
	.uleb128 0x8
	.byte	0x90
	.uleb128 0x1
	.align 8
.LECIE1:
.LSFDE1:
	.long	.LEFDE1-.LASFDE1
.LASFDE1:
	.long	.LASFDE1-.Lframe1
	.quad	.LFB1
	.quad	.LFE1-.LFB1
	.byte	0x4
	.long	.LCFI0-.LFB1
	.byte	0xe
	.uleb128 0x10
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI1-.LCFI0
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI2-.LCFI1
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI3-.LCFI2
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI4-.LCFI3
	.byte	0xe
	.uleb128 0x30
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8e
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI5-.LCFI4
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI6-.LCFI5
	.byte	0xe
	.uleb128 0x60
	.byte	0x83
	.uleb128 0x7
	.align 8
.LEFDE1:
.LSFDE3:
	.long	.LEFDE3-.LASFDE3
.LASFDE3:
	.long	.LASFDE3-.Lframe1
	.quad	.LFB2
	.quad	.LFE2-.LFB2
	.align 8
.LEFDE3:
.LSFDE5:
	.long	.LEFDE5-.LASFDE5
.LASFDE5:
	.long	.LASFDE5-.Lframe1
	.quad	.LFB3
	.quad	.LFE3-.LFB3
	.byte	0x4
	.long	.LCFI7-.LFB3
	.byte	0xe
	.uleb128 0x10
	.byte	0x8d
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI8-.LCFI7
	.byte	0xe
	.uleb128 0x18
	.byte	0x8c
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI9-.LCFI8
	.byte	0xe
	.uleb128 0x20
	.byte	0x86
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI10-.LCFI9
	.byte	0xe
	.uleb128 0x28
	.byte	0x83
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI11-.LCFI10
	.byte	0xe
	.uleb128 0x30
	.align 8
.LEFDE5:
.LSFDE7:
	.long	.LEFDE7-.LASFDE7
.LASFDE7:
	.long	.LASFDE7-.Lframe1
	.quad	.LFB4
	.quad	.LFE4-.LFB4
	.byte	0x4
	.long	.LCFI12-.LFB4
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI13-.LCFI12
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI14-.LCFI13
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI15-.LCFI14
	.byte	0xe
	.uleb128 0x28
	.byte	0x86
	.uleb128 0x5
	.byte	0x8c
	.uleb128 0x4
	.byte	0x8d
	.uleb128 0x3
	.byte	0x8e
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI16-.LCFI15
	.byte	0xe
	.uleb128 0x30
	.byte	0x83
	.uleb128 0x6
	.align 8
.LEFDE7:
.LSFDE9:
	.long	.LEFDE9-.LASFDE9
.LASFDE9:
	.long	.LASFDE9-.Lframe1
	.quad	.LFB5
	.quad	.LFE5-.LFB5
	.byte	0x4
	.long	.LCFI17-.LFB5
	.byte	0xe
	.uleb128 0x10
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI18-.LCFI17
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI19-.LCFI18
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI20-.LCFI19
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI21-.LCFI20
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI22-.LCFI21
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI23-.LCFI22
	.byte	0xe
	.uleb128 0x50
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8e
	.uleb128 0x3
	.align 8
.LEFDE9:
.LSFDE11:
	.long	.LEFDE11-.LASFDE11
.LASFDE11:
	.long	.LASFDE11-.Lframe1
	.quad	.LFB6
	.quad	.LFE6-.LFB6
	.byte	0x4
	.long	.LCFI24-.LFB6
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI25-.LCFI24
	.byte	0xd
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI31-.LCFI25
	.byte	0x83
	.uleb128 0x7
	.byte	0x8c
	.uleb128 0x6
	.byte	0x8d
	.uleb128 0x5
	.byte	0x8e
	.uleb128 0x4
	.byte	0x8f
	.uleb128 0x3
	.align 8
.LEFDE11:
.LSFDE13:
	.long	.LEFDE13-.LASFDE13
.LASFDE13:
	.long	.LASFDE13-.Lframe1
	.quad	.LFB7
	.quad	.LFE7-.LFB7
	.byte	0x4
	.long	.LCFI32-.LFB7
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI33-.LCFI32
	.byte	0xd
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI34-.LCFI33
	.byte	0x8f
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI35-.LCFI34
	.byte	0x8e
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI36-.LCFI35
	.byte	0x8d
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI37-.LCFI36
	.byte	0x8c
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI38-.LCFI37
	.byte	0x83
	.uleb128 0x7
	.align 8
.LEFDE13:
.LSFDE15:
	.long	.LEFDE15-.LASFDE15
.LASFDE15:
	.long	.LASFDE15-.Lframe1
	.quad	.LFB8
	.quad	.LFE8-.LFB8
	.byte	0x4
	.long	.LCFI40-.LFB8
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI42-.LCFI40
	.byte	0x83
	.uleb128 0x3
	.byte	0x86
	.uleb128 0x2
	.align 8
.LEFDE15:
.LSFDE17:
	.long	.LEFDE17-.LASFDE17
.LASFDE17:
	.long	.LASFDE17-.Lframe1
	.quad	.LFB9
	.quad	.LFE9-.LFB9
	.byte	0x4
	.long	.LCFI43-.LFB9
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI44-.LCFI43
	.byte	0xd
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI45-.LCFI44
	.byte	0x8f
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI46-.LCFI45
	.byte	0x8e
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI47-.LCFI46
	.byte	0x8d
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI50-.LCFI47
	.byte	0x83
	.uleb128 0x7
	.byte	0x8c
	.uleb128 0x6
	.align 8
.LEFDE17:
.LSFDE19:
	.long	.LEFDE19-.LASFDE19
.LASFDE19:
	.long	.LASFDE19-.Lframe1
	.quad	.LFB10
	.quad	.LFE10-.LFB10
	.byte	0x4
	.long	.LCFI51-.LFB10
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI52-.LCFI51
	.byte	0xe
	.uleb128 0x18
	.byte	0x83
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI53-.LCFI52
	.byte	0xe
	.uleb128 0x20
	.align 8
.LEFDE19:
.LSFDE21:
	.long	.LEFDE21-.LASFDE21
.LASFDE21:
	.long	.LASFDE21-.Lframe1
	.quad	.LFB11
	.quad	.LFE11-.LFB11
	.byte	0x4
	.long	.LCFI54-.LFB11
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI55-.LCFI54
	.byte	0xe
	.uleb128 0x18
	.byte	0x86
	.uleb128 0x3
	.byte	0x8c
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI56-.LCFI55
	.byte	0xe
	.uleb128 0x20
	.byte	0x83
	.uleb128 0x4
	.align 8
.LEFDE21:
.LSFDE23:
	.long	.LEFDE23-.LASFDE23
.LASFDE23:
	.long	.LASFDE23-.Lframe1
	.quad	.LFB12
	.quad	.LFE12-.LFB12
	.byte	0x4
	.long	.LCFI57-.LFB12
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI58-.LCFI57
	.byte	0xd
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI63-.LCFI58
	.byte	0x83
	.uleb128 0x7
	.byte	0x8c
	.uleb128 0x6
	.byte	0x8d
	.uleb128 0x5
	.byte	0x8e
	.uleb128 0x4
	.byte	0x8f
	.uleb128 0x3
	.align 8
.LEFDE23:
.LSFDE25:
	.long	.LEFDE25-.LASFDE25
.LASFDE25:
	.long	.LASFDE25-.Lframe1
	.quad	.LFB13
	.quad	.LFE13-.LFB13
	.byte	0x4
	.long	.LCFI65-.LFB13
	.byte	0xe
	.uleb128 0x10
	.align 8
.LEFDE25:
.LSFDE27:
	.long	.LEFDE27-.LASFDE27
.LASFDE27:
	.long	.LASFDE27-.Lframe1
	.quad	.LFB14
	.quad	.LFE14-.LFB14
	.align 8
.LEFDE27:
.LSFDE29:
	.long	.LEFDE29-.LASFDE29
.LASFDE29:
	.long	.LASFDE29-.Lframe1
	.quad	.LFB15
	.quad	.LFE15-.LFB15
	.align 8
.LEFDE29:
.LSFDE31:
	.long	.LEFDE31-.LASFDE31
.LASFDE31:
	.long	.LASFDE31-.Lframe1
	.quad	.LFB16
	.quad	.LFE16-.LFB16
	.byte	0x4
	.long	.LCFI66-.LFB16
	.byte	0xe
	.uleb128 0x10
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI67-.LCFI66
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI68-.LCFI67
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI69-.LCFI68
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI70-.LCFI69
	.byte	0xe
	.uleb128 0x30
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI71-.LCFI70
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI72-.LCFI71
	.byte	0xe
	.uleb128 0xd0
	.byte	0x83
	.uleb128 0x7
	.align 8
.LEFDE31:
.LSFDE33:
	.long	.LEFDE33-.LASFDE33
.LASFDE33:
	.long	.LASFDE33-.Lframe1
	.quad	.LFB17
	.quad	.LFE17-.LFB17
	.byte	0x4
	.long	.LCFI73-.LFB17
	.byte	0xe
	.uleb128 0x10
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI74-.LCFI73
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI75-.LCFI74
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI76-.LCFI75
	.byte	0xe
	.uleb128 0x28
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI77-.LCFI76
	.byte	0xe
	.uleb128 0x30
	.byte	0x83
	.uleb128 0x6
	.align 8
.LEFDE33:
.LSFDE35:
	.long	.LEFDE35-.LASFDE35
.LASFDE35:
	.long	.LASFDE35-.Lframe1
	.quad	.LFB18
	.quad	.LFE18-.LFB18
	.byte	0x4
	.long	.LCFI78-.LFB18
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI79-.LCFI78
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI80-.LCFI79
	.byte	0xe
	.uleb128 0x20
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI81-.LCFI80
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI82-.LCFI81
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI83-.LCFI82
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI84-.LCFI83
	.byte	0xe
	.uleb128 0x70
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.align 8
.LEFDE35:
.LSFDE37:
	.long	.LEFDE37-.LASFDE37
.LASFDE37:
	.long	.LASFDE37-.Lframe1
	.quad	.LFB19
	.quad	.LFE19-.LFB19
	.byte	0x4
	.long	.LCFI85-.LFB19
	.byte	0xe
	.uleb128 0x10
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI86-.LCFI85
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI87-.LCFI86
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI88-.LCFI87
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI89-.LCFI88
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI90-.LCFI89
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI91-.LCFI90
	.byte	0xe
	.uleb128 0x70
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.align 8
.LEFDE37:
.LSFDE39:
	.long	.LEFDE39-.LASFDE39
.LASFDE39:
	.long	.LASFDE39-.Lframe1
	.quad	.LFB20
	.quad	.LFE20-.LFB20
	.byte	0x4
	.long	.LCFI92-.LFB20
	.byte	0xe
	.uleb128 0x10
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI93-.LCFI92
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI94-.LCFI93
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI95-.LCFI94
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI96-.LCFI95
	.byte	0xe
	.uleb128 0x30
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI97-.LCFI96
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI98-.LCFI97
	.byte	0xe
	.uleb128 0x50
	.byte	0x83
	.uleb128 0x7
	.align 8
.LEFDE39:
.LSFDE41:
	.long	.LEFDE41-.LASFDE41
.LASFDE41:
	.long	.LASFDE41-.Lframe1
	.quad	.LFB21
	.quad	.LFE21-.LFB21
	.byte	0x4
	.long	.LCFI99-.LFB21
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI100-.LCFI99
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI101-.LCFI100
	.byte	0xe
	.uleb128 0x20
	.byte	0x8d
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI102-.LCFI101
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI103-.LCFI102
	.byte	0xe
	.uleb128 0x30
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI104-.LCFI103
	.byte	0xe
	.uleb128 0x38
	.byte	0x83
	.uleb128 0x7
	.byte	0x4
	.long	.LCFI105-.LCFI104
	.byte	0xe
	.uleb128 0x60
	.align 8
.LEFDE41:
.LSFDE43:
	.long	.LEFDE43-.LASFDE43
.LASFDE43:
	.long	.LASFDE43-.Lframe1
	.quad	.LFB22
	.quad	.LFE22-.LFB22
	.byte	0x4
	.long	.LCFI106-.LFB22
	.byte	0xe
	.uleb128 0x10
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI107-.LCFI106
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI108-.LCFI107
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI109-.LCFI108
	.byte	0xe
	.uleb128 0x28
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8e
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI110-.LCFI109
	.byte	0xe
	.uleb128 0x30
	.byte	0x86
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI111-.LCFI110
	.byte	0xe
	.uleb128 0x38
	.byte	0x83
	.uleb128 0x7
	.byte	0x4
	.long	.LCFI112-.LCFI111
	.byte	0xe
	.uleb128 0x60
	.align 8
.LEFDE43:
.LSFDE45:
	.long	.LEFDE45-.LASFDE45
.LASFDE45:
	.long	.LASFDE45-.Lframe1
	.quad	.LFB23
	.quad	.LFE23-.LFB23
	.byte	0x4
	.long	.LCFI113-.LFB23
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI114-.LCFI113
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI115-.LCFI114
	.byte	0xe
	.uleb128 0x20
	.byte	0x8d
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI116-.LCFI115
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI117-.LCFI116
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI118-.LCFI117
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI119-.LCFI118
	.byte	0xe
	.uleb128 0x80
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.align 8
.LEFDE45:
.LSFDE47:
	.long	.LEFDE47-.LASFDE47
.LASFDE47:
	.long	.LASFDE47-.Lframe1
	.quad	.LFB24
	.quad	.LFE24-.LFB24
	.byte	0x4
	.long	.LCFI120-.LFB24
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI121-.LCFI120
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI122-.LCFI121
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI123-.LCFI122
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI124-.LCFI123
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI125-.LCFI124
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI126-.LCFI125
	.byte	0xe
	.uleb128 0x60
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.align 8
.LEFDE47:
.LSFDE49:
	.long	.LEFDE49-.LASFDE49
.LASFDE49:
	.long	.LASFDE49-.Lframe1
	.quad	.LFB25
	.quad	.LFE25-.LFB25
	.byte	0x4
	.long	.LCFI127-.LFB25
	.byte	0xe
	.uleb128 0x10
	.byte	0x83
	.uleb128 0x2
	.align 8
.LEFDE49:
.LSFDE51:
	.long	.LEFDE51-.LASFDE51
.LASFDE51:
	.long	.LASFDE51-.Lframe1
	.quad	.LFB26
	.quad	.LFE26-.LFB26
	.byte	0x4
	.long	.LCFI128-.LFB26
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI130-.LCFI128
	.byte	0x83
	.uleb128 0x3
	.byte	0x86
	.uleb128 0x2
	.align 8
.LEFDE51:
.LSFDE53:
	.long	.LEFDE53-.LASFDE53
.LASFDE53:
	.long	.LASFDE53-.Lframe1
	.quad	.LFB27
	.quad	.LFE27-.LFB27
	.byte	0x4
	.long	.LCFI131-.LFB27
	.byte	0xe
	.uleb128 0x10
	.byte	0x83
	.uleb128 0x2
	.align 8
.LEFDE53:
.LSFDE55:
	.long	.LEFDE55-.LASFDE55
.LASFDE55:
	.long	.LASFDE55-.Lframe1
	.quad	.LFB28
	.quad	.LFE28-.LFB28
	.byte	0x4
	.long	.LCFI132-.LFB28
	.byte	0xe
	.uleb128 0x10
	.align 8
.LEFDE55:
.LSFDE57:
	.long	.LEFDE57-.LASFDE57
.LASFDE57:
	.long	.LASFDE57-.Lframe1
	.quad	.LFB29
	.quad	.LFE29-.LFB29
	.byte	0x4
	.long	.LCFI133-.LFB29
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI136-.LCFI133
	.byte	0x8c
	.uleb128 0x2
	.byte	0x86
	.uleb128 0x3
	.byte	0x83
	.uleb128 0x4
	.align 8
.LEFDE57:
.LSFDE59:
	.long	.LEFDE59-.LASFDE59
.LASFDE59:
	.long	.LASFDE59-.Lframe1
	.quad	.LFB30
	.quad	.LFE30-.LFB30
	.byte	0x4
	.long	.LCFI137-.LFB30
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI139-.LCFI137
	.byte	0x86
	.uleb128 0x2
	.byte	0x83
	.uleb128 0x3
	.align 8
.LEFDE59:
.LSFDE61:
	.long	.LEFDE61-.LASFDE61
.LASFDE61:
	.long	.LASFDE61-.Lframe1
	.quad	.LFB31
	.quad	.LFE31-.LFB31
	.byte	0x4
	.long	.LCFI140-.LFB31
	.byte	0xe
	.uleb128 0x10
	.byte	0x83
	.uleb128 0x2
	.align 8
.LEFDE61:
.LSFDE63:
	.long	.LEFDE63-.LASFDE63
.LASFDE63:
	.long	.LASFDE63-.Lframe1
	.quad	.LFB32
	.quad	.LFE32-.LFB32
	.byte	0x4
	.long	.LCFI141-.LFB32
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI142-.LCFI141
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI143-.LCFI142
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI144-.LCFI143
	.byte	0xe
	.uleb128 0x28
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI145-.LCFI144
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI146-.LCFI145
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI147-.LCFI146
	.byte	0xe
	.uleb128 0xb0
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.align 8
.LEFDE63:
.LSFDE65:
	.long	.LEFDE65-.LASFDE65
.LASFDE65:
	.long	.LASFDE65-.Lframe1
	.quad	.LFB33
	.quad	.LFE33-.LFB33
	.byte	0x4
	.long	.LCFI148-.LFB33
	.byte	0xe
	.uleb128 0x10
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI149-.LCFI148
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI150-.LCFI149
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI151-.LCFI150
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI152-.LCFI151
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI153-.LCFI152
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI154-.LCFI153
	.byte	0xe
	.uleb128 0xe0
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8e
	.uleb128 0x3
	.align 8
.LEFDE65:
.LSFDE67:
	.long	.LEFDE67-.LASFDE67
.LASFDE67:
	.long	.LASFDE67-.Lframe1
	.quad	.LFB34
	.quad	.LFE34-.LFB34
	.byte	0x4
	.long	.LCFI155-.LFB34
	.byte	0xe
	.uleb128 0x10
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI156-.LCFI155
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI157-.LCFI156
	.byte	0xe
	.uleb128 0x20
	.byte	0x8d
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI158-.LCFI157
	.byte	0xe
	.uleb128 0x28
	.byte	0x8c
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI159-.LCFI158
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI160-.LCFI159
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI161-.LCFI160
	.byte	0xe
	.uleb128 0x40
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.align 8
.LEFDE67:
.LSFDE69:
	.long	.LEFDE69-.LASFDE69
.LASFDE69:
	.long	.LASFDE69-.Lframe1
	.quad	.LFB35
	.quad	.LFE35-.LFB35
	.byte	0x4
	.long	.LCFI162-.LFB35
	.byte	0xe
	.uleb128 0x10
	.byte	0x8e
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI163-.LCFI162
	.byte	0xe
	.uleb128 0x18
	.byte	0x8d
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI164-.LCFI163
	.byte	0xe
	.uleb128 0x20
	.byte	0x8c
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI165-.LCFI164
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI166-.LCFI165
	.byte	0xe
	.uleb128 0x30
	.byte	0x83
	.uleb128 0x6
	.byte	0x86
	.uleb128 0x5
	.align 8
.LEFDE69:
.LSFDE71:
	.long	.LEFDE71-.LASFDE71
.LASFDE71:
	.long	.LASFDE71-.Lframe1
	.quad	.LFB36
	.quad	.LFE36-.LFB36
	.byte	0x4
	.long	.LCFI167-.LFB36
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI168-.LCFI167
	.byte	0xd
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI174-.LCFI168
	.byte	0x83
	.uleb128 0x7
	.byte	0x8c
	.uleb128 0x6
	.byte	0x8d
	.uleb128 0x5
	.byte	0x8e
	.uleb128 0x4
	.byte	0x8f
	.uleb128 0x3
	.align 8
.LEFDE71:
.LSFDE73:
	.long	.LEFDE73-.LASFDE73
.LASFDE73:
	.long	.LASFDE73-.Lframe1
	.quad	.LFB37
	.quad	.LFE37-.LFB37
	.byte	0x4
	.long	.LCFI175-.LFB37
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI176-.LCFI175
	.byte	0xd
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI182-.LCFI176
	.byte	0x83
	.uleb128 0x7
	.byte	0x8c
	.uleb128 0x6
	.byte	0x8d
	.uleb128 0x5
	.byte	0x8e
	.uleb128 0x4
	.byte	0x8f
	.uleb128 0x3
	.align 8
.LEFDE73:
.LSFDE75:
	.long	.LEFDE75-.LASFDE75
.LASFDE75:
	.long	.LASFDE75-.Lframe1
	.quad	.LFB38
	.quad	.LFE38-.LFB38
	.byte	0x4
	.long	.LCFI183-.LFB38
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI184-.LCFI183
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI185-.LCFI184
	.byte	0xe
	.uleb128 0x20
	.byte	0x8d
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI186-.LCFI185
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI187-.LCFI186
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI188-.LCFI187
	.byte	0xe
	.uleb128 0x38
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI189-.LCFI188
	.byte	0xe
	.uleb128 0x60
	.align 8
.LEFDE75:
.LSFDE77:
	.long	.LEFDE77-.LASFDE77
.LASFDE77:
	.long	.LASFDE77-.Lframe1
	.quad	.LFB39
	.quad	.LFE39-.LFB39
	.byte	0x4
	.long	.LCFI190-.LFB39
	.byte	0xe
	.uleb128 0x10
	.byte	0x83
	.uleb128 0x2
	.align 8
.LEFDE77:
.LSFDE79:
	.long	.LEFDE79-.LASFDE79
.LASFDE79:
	.long	.LASFDE79-.Lframe1
	.quad	.LFB40
	.quad	.LFE40-.LFB40
	.byte	0x4
	.long	.LCFI191-.LFB40
	.byte	0xe
	.uleb128 0x10
	.byte	0x8d
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI192-.LCFI191
	.byte	0xe
	.uleb128 0x18
	.byte	0x8c
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI193-.LCFI192
	.byte	0xe
	.uleb128 0x20
	.byte	0x86
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI194-.LCFI193
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI195-.LCFI194
	.byte	0xe
	.uleb128 0x30
	.byte	0x83
	.uleb128 0x5
	.align 8
.LEFDE79:
.LSFDE81:
	.long	.LEFDE81-.LASFDE81
.LASFDE81:
	.long	.LASFDE81-.Lframe1
	.quad	.LFB41
	.quad	.LFE41-.LFB41
	.byte	0x4
	.long	.LCFI196-.LFB41
	.byte	0xe
	.uleb128 0x10
	.byte	0x8c
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI197-.LCFI196
	.byte	0xe
	.uleb128 0x18
	.byte	0x86
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI198-.LCFI197
	.byte	0xe
	.uleb128 0x20
	.byte	0x83
	.uleb128 0x4
	.align 8
.LEFDE81:
.LSFDE83:
	.long	.LEFDE83-.LASFDE83
.LASFDE83:
	.long	.LASFDE83-.Lframe1
	.quad	.LFB42
	.quad	.LFE42-.LFB42
	.byte	0x4
	.long	.LCFI199-.LFB42
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI200-.LCFI199
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI201-.LCFI200
	.byte	0xe
	.uleb128 0x20
	.byte	0x8d
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI202-.LCFI201
	.byte	0xe
	.uleb128 0x28
	.byte	0x8c
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI203-.LCFI202
	.byte	0xe
	.uleb128 0x30
	.byte	0x86
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI204-.LCFI203
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI205-.LCFI204
	.byte	0xe
	.uleb128 0x50
	.byte	0x83
	.uleb128 0x7
	.align 8
.LEFDE83:
.LSFDE85:
	.long	.LEFDE85-.LASFDE85
.LASFDE85:
	.long	.LASFDE85-.Lframe1
	.quad	.LFB43
	.quad	.LFE43-.LFB43
	.byte	0x4
	.long	.LCFI206-.LFB43
	.byte	0xe
	.uleb128 0x10
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI207-.LCFI206
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI208-.LCFI207
	.byte	0xe
	.uleb128 0x20
	.byte	0x8d
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI209-.LCFI208
	.byte	0xe
	.uleb128 0x28
	.byte	0x8c
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI210-.LCFI209
	.byte	0xe
	.uleb128 0x30
	.byte	0x86
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI211-.LCFI210
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI212-.LCFI211
	.byte	0xe
	.uleb128 0xa0
	.byte	0x83
	.uleb128 0x7
	.align 8
.LEFDE85:
.LSFDE87:
	.long	.LEFDE87-.LASFDE87
.LASFDE87:
	.long	.LASFDE87-.Lframe1
	.quad	.LFB44
	.quad	.LFE44-.LFB44
	.byte	0x4
	.long	.LCFI213-.LFB44
	.byte	0xe
	.uleb128 0x10
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI214-.LCFI213
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI215-.LCFI214
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI216-.LCFI215
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI217-.LCFI216
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI218-.LCFI217
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI219-.LCFI218
	.byte	0xe
	.uleb128 0xb0
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8e
	.uleb128 0x3
	.align 8
.LEFDE87:
.LSFDE89:
	.long	.LEFDE89-.LASFDE89
.LASFDE89:
	.long	.LASFDE89-.Lframe1
	.quad	.LFB45
	.quad	.LFE45-.LFB45
	.byte	0x4
	.long	.LCFI220-.LFB45
	.byte	0xe
	.uleb128 0x10
	.byte	0x8c
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI221-.LCFI220
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI222-.LCFI221
	.byte	0xe
	.uleb128 0x20
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI223-.LCFI222
	.byte	0xe
	.uleb128 0x30
	.align 8
.LEFDE89:
.LSFDE91:
	.long	.LEFDE91-.LASFDE91
.LASFDE91:
	.long	.LASFDE91-.Lframe1
	.quad	.LFB46
	.quad	.LFE46-.LFB46
	.byte	0x4
	.long	.LCFI224-.LFB46
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI225-.LCFI224
	.byte	0xd
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI226-.LCFI225
	.byte	0x8f
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI231-.LCFI226
	.byte	0x83
	.uleb128 0x7
	.byte	0x8c
	.uleb128 0x6
	.byte	0x8d
	.uleb128 0x5
	.byte	0x8e
	.uleb128 0x4
	.align 8
.LEFDE91:
.LSFDE93:
	.long	.LEFDE93-.LASFDE93
.LASFDE93:
	.long	.LASFDE93-.Lframe1
	.quad	.LFB47
	.quad	.LFE47-.LFB47
	.byte	0x4
	.long	.LCFI232-.LFB47
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI233-.LCFI232
	.byte	0xd
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI234-.LCFI233
	.byte	0x8f
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI235-.LCFI234
	.byte	0x8e
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI239-.LCFI235
	.byte	0x83
	.uleb128 0x7
	.byte	0x8c
	.uleb128 0x6
	.byte	0x8d
	.uleb128 0x5
	.align 8
.LEFDE93:
.LSFDE95:
	.long	.LEFDE95-.LASFDE95
.LASFDE95:
	.long	.LASFDE95-.Lframe1
	.quad	.LFB48
	.quad	.LFE48-.LFB48
	.byte	0x4
	.long	.LCFI240-.LFB48
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI241-.LCFI240
	.byte	0xd
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI244-.LCFI241
	.byte	0x8d
	.uleb128 0x5
	.byte	0x8e
	.uleb128 0x4
	.byte	0x8f
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI245-.LCFI244
	.byte	0x8c
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI247-.LCFI245
	.byte	0x83
	.uleb128 0x7
	.align 8
.LEFDE95:
.LSFDE97:
	.long	.LEFDE97-.LASFDE97
.LASFDE97:
	.long	.LASFDE97-.Lframe1
	.quad	.LFB49
	.quad	.LFE49-.LFB49
	.byte	0x4
	.long	.LCFI248-.LFB49
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI249-.LCFI248
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI250-.LCFI249
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI251-.LCFI250
	.byte	0xe
	.uleb128 0x28
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI252-.LCFI251
	.byte	0xe
	.uleb128 0x30
	.byte	0x86
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI253-.LCFI252
	.byte	0xe
	.uleb128 0x38
	.byte	0x83
	.uleb128 0x7
	.byte	0x4
	.long	.LCFI254-.LCFI253
	.byte	0xe
	.uleb128 0x70
	.align 8
.LEFDE97:
.LSFDE99:
	.long	.LEFDE99-.LASFDE99
.LASFDE99:
	.long	.LASFDE99-.Lframe1
	.quad	.LFB50
	.quad	.LFE50-.LFB50
	.align 8
.LEFDE99:
.LSFDE101:
	.long	.LEFDE101-.LASFDE101
.LASFDE101:
	.long	.LASFDE101-.Lframe1
	.quad	.LFB51
	.quad	.LFE51-.LFB51
	.byte	0x4
	.long	.LCFI255-.LFB51
	.byte	0xe
	.uleb128 0x10
	.byte	0x8e
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI256-.LCFI255
	.byte	0xe
	.uleb128 0x18
	.byte	0x8d
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI257-.LCFI256
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI258-.LCFI257
	.byte	0xe
	.uleb128 0x28
	.byte	0x86
	.uleb128 0x5
	.byte	0x8c
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI259-.LCFI258
	.byte	0xe
	.uleb128 0x30
	.byte	0x83
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI260-.LCFI259
	.byte	0xe
	.uleb128 0x40
	.align 8
.LEFDE101:
.LSFDE103:
	.long	.LEFDE103-.LASFDE103
.LASFDE103:
	.long	.LASFDE103-.Lframe1
	.quad	.LFB52
	.quad	.LFE52-.LFB52
	.byte	0x4
	.long	.LCFI261-.LFB52
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI262-.LCFI261
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI263-.LCFI262
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI264-.LCFI263
	.byte	0xe
	.uleb128 0x28
	.byte	0x86
	.uleb128 0x5
	.byte	0x8c
	.uleb128 0x4
	.byte	0x8d
	.uleb128 0x3
	.byte	0x8e
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI265-.LCFI264
	.byte	0xe
	.uleb128 0x30
	.byte	0x83
	.uleb128 0x6
	.align 8
.LEFDE103:
.LSFDE105:
	.long	.LEFDE105-.LASFDE105
.LASFDE105:
	.long	.LASFDE105-.Lframe1
	.quad	.LFB53
	.quad	.LFE53-.LFB53
	.align 8
.LEFDE105:
.LSFDE107:
	.long	.LEFDE107-.LASFDE107
.LASFDE107:
	.long	.LASFDE107-.Lframe1
	.quad	.LFB54
	.quad	.LFE54-.LFB54
	.align 8
.LEFDE107:
.LSFDE109:
	.long	.LEFDE109-.LASFDE109
.LASFDE109:
	.long	.LASFDE109-.Lframe1
	.quad	.LFB55
	.quad	.LFE55-.LFB55
	.align 8
.LEFDE109:
.LSFDE111:
	.long	.LEFDE111-.LASFDE111
.LASFDE111:
	.long	.LASFDE111-.Lframe1
	.quad	.LFB56
	.quad	.LFE56-.LFB56
	.byte	0x4
	.long	.LCFI266-.LFB56
	.byte	0xe
	.uleb128 0x10
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI267-.LCFI266
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI268-.LCFI267
	.byte	0xe
	.uleb128 0x20
	.byte	0x8d
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI269-.LCFI268
	.byte	0xe
	.uleb128 0x28
	.byte	0x8c
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI270-.LCFI269
	.byte	0xe
	.uleb128 0x30
	.byte	0x86
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI271-.LCFI270
	.byte	0xe
	.uleb128 0x38
	.byte	0x83
	.uleb128 0x7
	.byte	0x4
	.long	.LCFI272-.LCFI271
	.byte	0xe
	.uleb128 0x40
	.align 8
.LEFDE111:
.LSFDE113:
	.long	.LEFDE113-.LASFDE113
.LASFDE113:
	.long	.LASFDE113-.Lframe1
	.quad	.LFB57
	.quad	.LFE57-.LFB57
	.align 8
.LEFDE113:
.LSFDE115:
	.long	.LEFDE115-.LASFDE115
.LASFDE115:
	.long	.LASFDE115-.Lframe1
	.quad	.LFB58
	.quad	.LFE58-.LFB58
	.align 8
.LEFDE115:
.LSFDE117:
	.long	.LEFDE117-.LASFDE117
.LASFDE117:
	.long	.LASFDE117-.Lframe1
	.quad	.LFB59
	.quad	.LFE59-.LFB59
	.byte	0x4
	.long	.LCFI273-.LFB59
	.byte	0xe
	.uleb128 0x10
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI274-.LCFI273
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI275-.LCFI274
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI276-.LCFI275
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI277-.LCFI276
	.byte	0xe
	.uleb128 0x30
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI278-.LCFI277
	.byte	0xe
	.uleb128 0x38
	.byte	0x83
	.uleb128 0x7
	.byte	0x4
	.long	.LCFI279-.LCFI278
	.byte	0xe
	.uleb128 0x50
	.align 8
.LEFDE117:
.LSFDE119:
	.long	.LEFDE119-.LASFDE119
.LASFDE119:
	.long	.LASFDE119-.Lframe1
	.quad	.LFB60
	.quad	.LFE60-.LFB60
	.align 8
.LEFDE119:
.LSFDE121:
	.long	.LEFDE121-.LASFDE121
.LASFDE121:
	.long	.LASFDE121-.Lframe1
	.quad	.LFB61
	.quad	.LFE61-.LFB61
	.byte	0x4
	.long	.LCFI280-.LFB61
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI281-.LCFI280
	.byte	0xe
	.uleb128 0x18
	.byte	0x83
	.uleb128 0x3
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI282-.LCFI281
	.byte	0xe
	.uleb128 0x20
	.align 8
.LEFDE121:
.LSFDE123:
	.long	.LEFDE123-.LASFDE123
.LASFDE123:
	.long	.LASFDE123-.Lframe1
	.quad	.LFB62
	.quad	.LFE62-.LFB62
	.byte	0x4
	.long	.LCFI283-.LFB62
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI284-.LCFI283
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI285-.LCFI284
	.byte	0xe
	.uleb128 0x20
	.byte	0x86
	.uleb128 0x4
	.byte	0x8c
	.uleb128 0x3
	.byte	0x8d
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI286-.LCFI285
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI287-.LCFI286
	.byte	0xe
	.uleb128 0x30
	.byte	0x83
	.uleb128 0x5
	.align 8
.LEFDE123:
	.ident	"GCC: (GNU) 3.2"
