	.file	"expr.i"
.globl do_preexpand_calls
	.data
	.align 4
	.type	do_preexpand_calls,@object
	.size	do_preexpand_calls,4
do_preexpand_calls:
	.long	1
	.text
	.align 2
	.p2align 4,,15
.globl convert_move
	.type	convert_move,@function
convert_move:
.LFB1:
	pushq	%r15
.LCFI0:
	pushq	%r14
.LCFI1:
	pushq	%r13
.LCFI2:
	pushq	%r12
.LCFI3:
	pushq	%rbp
.LCFI4:
	movq	%rsi, %rbp
	pushq	%rbx
.LCFI5:
	subq	$56, %rsp
.LCFI6:
	movq	%rdi, 24(%rsp)
	movl	%edx, 36(%rsp)
	.p2align 4,,7
.L75:
	movq	24(%rsp), %rdi
	movzbl	2(%rbp), %r13d
	xorl	%esi, %esi
	movzbl	2(%rdi), %r12d
	movslq	%r13d,%rbx
	movslq	%r12d,%r15
	cmpl	$2, mode_class(,%r15,4)
	sete	%sil
	cmpl	$2, mode_class(,%rbx,4)
	sete	%cl
	movl	%esi, 52(%rsp)
	movzbl	%cl, %edx
	movl	%edx, 48(%rsp)
	xorl	%edx, %edx
	cmpl	$0, 36(%rsp)
	setne	%dl
	addl	$99, %edx
	movl	%edx, 20(%rsp)
	movq	24(%rsp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$59, %eax
	je	.L4
	cmpl	$55, %eax
	je	.L138
.L8:
	cmpl	$63, %eax
	je	.L11
	cmpl	$66, %eax
	je	.L11
.L7:
	movzwl	(%rbp), %eax
	cmpl	$59, %eax
	je	.L14
	cmpl	$55, %eax
	je	.L139
.L18:
	cmpl	$63, %eax
	je	.L21
	cmpl	$66, %eax
	je	.L21
.L17:
	movl	48(%rsp), %r11d
	cmpl	%r11d, 52(%rsp)
	jne	.L115
	movl	(%rbp), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L140
.L25:
	movq	24(%rsp), %rbx
	movl	(%rbx), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L115
	cmpl	%r13d, %r12d
	je	.L28
	testl	%r13d, %r13d
	jne	.L27
	movl	(%rbp), %edx
	leal	-56(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L28
	cmpw	$46, %dx
	je	.L28
	cmpw	$47, %dx
	je	.L28
	cmpw	$49, %dx
	je	.L28
	cmpw	$113, %dx
	je	.L28
.L27:
	movl	52(%rsp), %eax
	testl	%eax, %eax
	jne	.L141
	movslq	%r13d,%rbx
	movl	mode_size(,%r15,4), %ecx
	leaq	0(,%rbx,4), %r14
	movq	%rbx, 40(%rsp)
	movl	mode_size(%r14), %eax
	leal	0(,%rcx,8), %edx
	sall	$3, %eax
	cmpl	%edx, %eax
	jge	.L69
	cmpl	$32, %edx
	jg	.L142
.L69:
	movq	40(%rsp), %r14
	movl	mode_size(,%r14,4), %eax
	sall	$3, %eax
	cmpl	$32, %eax
	jg	.L143
	cmpl	$3, %r12d
	je	.L144
	cmpl	$3, %r13d
	je	.L145
.L93:
	movl	mode_size(,%r15,4), %r8d
	movl	mode_size(,%rbx,4), %eax
	sall	$3, %r8d
	sall	$3, %eax
	cmpl	%eax, %r8d
	jge	.L96
	movl	(%rbp), %eax
	andl	$134283263, %eax
	cmpl	$55, %eax
	je	.L146
.L98:
	movl	(%rbp), %eax
	cmpw	$51, %ax
	je	.L97
	cmpw	$53, %ax
	je	.L97
.L96:
	movl	mode_size(,%r15,4), %esi
	movl	mode_size(,%rbx,4), %eax
	sall	$3, %esi
	sall	$3, %eax
	cmpl	%eax, %esi
	jg	.L147
	cmpl	$6, %r13d
	jne	.L111
	cmpl	$4, %r12d
	je	.L124
	cmpl	$2, %r12d
	je	.L124
	cmpl	$1, %r12d
	je	.L124
.L111:
	cmpl	$4, %r13d
	jne	.L113
	cmpl	$2, %r12d
	je	.L125
	cmpl	$1, %r12d
	je	.L125
.L113:
	cmpl	$2, %r13d
	jne	.L114
	cmpl	$1, %r12d
	jne	.L114
	movl	$2, %edi
.L121:
	movq	%rbp, %rsi
	call	force_reg
.L122:
	movq	%rax, %rbp
	jmp	.L75
.L114:
	movl	mode_size(,%r15,4), %r9d
	movl	mode_size(,%rbx,4), %eax
	sall	$3, %r9d
	sall	$3, %eax
	cmpl	%eax, %r9d
	jge	.L115
	movl	%r12d, %edi
	movq	%rbp, %rsi
	call	gen_lowpart
	movl	%r12d, %edi
	movq	%rax, %rsi
	call	force_reg
.L126:
	movq	%rax, %rsi
	movq	24(%rsp), %rdi
.L129:
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	emit_move_insn
.L125:
	movl	$4, %edi
	jmp	.L121
.L124:
	movl	$6, %edi
	jmp	.L121
.L147:
	movl	36(%rsp), %edx
	xorl	%eax, %eax
	movl	%r12d, %edi
	movl	%r13d, %esi
	call	can_extend_p
	cmpl	$210, %eax
	movl	%eax, %ebx
	jne	.L137
	testl	%r13d, %r13d
	movl	%r13d, %ebx
	je	.L115
.L108:
	movl	36(%rsp), %edx
	xorl	%eax, %eax
	movl	%r12d, %edi
	movl	%ebx, %esi
	call	can_extend_p
	cmpl	$210, %eax
	je	.L105
	movl	36(%rsp), %edx
	xorl	%eax, %eax
	movl	%ebx, %edi
	movl	%r13d, %esi
	call	can_extend_p
	cmpl	$210, %eax
	jne	.L120
.L105:
	movslq	%ebx,%rdi
	movl	mode_wider_mode(,%rdi,4), %ebx
	testl	%ebx, %ebx
	jne	.L108
	jmp	.L115
.L120:
	movl	36(%rsp), %edx
	movl	%ebx, %edi
	movq	%rbp, %rsi
	xorl	%eax, %eax
	call	convert_to_mode
	jmp	.L122
.L137:
	movl	optimize(%rip), %eax
	testl	%eax, %eax
	jle	.L101
	cmpw	$53, (%rbp)
	je	.L148
.L101:
	movl	%ebx, %edi
	movq	24(%rsp), %rsi
	movq	%rbp, %rdx
.L127:
	movl	20(%rsp), %ecx
.L128:
	addq	$56, %rsp
	xorl	%eax, %eax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	emit_unop_insn
.L148:
	movq	%rbp, %rsi
	movl	%r13d, %edi
	call	force_reg
	movq	%rax, %rbp
	jmp	.L101
	.p2align 6,,7
.L97:
	movl	%r12d, %edi
	movq	%rbp, %rsi
	call	gen_lowpart
	jmp	.L126
	.p2align 6,,7
.L146:
	cmpb	$0, direct_load(%r15)
	je	.L98
	movq	8(%rbp), %rdi
	xorl	%eax, %eax
	call	mode_dependent_address_p
	testl	%eax, %eax
	jne	.L98
	jmp	.L97
	.p2align 6,,7
.L145:
	cmpl	$4, %r12d
	je	.L115
	movl	36(%rsp), %edx
	movq	%rbp, %rsi
	movl	$4, %edi
	xorl	%eax, %eax
	movl	$4, %r13d
	movl	$4, %ebx
	call	convert_to_mode
	movq	%rax, %rbp
	jmp	.L93
.L144:
	cmpl	$4, %r13d
	je	.L115
	movl	36(%rsp), %edx
	movl	$4, %edi
	movq	%rbp, %rsi
	xorl	%eax, %eax
	call	convert_to_mode
	jmp	.L115
.L143:
	movl	word_mode(%rip), %edi
	movq	%rbp, %rsi
	call	gen_lowpart
	movl	$0, 36(%rsp)
	movq	%rax, %rbp
	jmp	.L75
.L142:
	movl	%ecx, %edi
	movl	36(%rsp), %edx
	leal	6(%rcx), %esi
	addl	$3, %edi
	movl	%edi, %r15d
	movl	%r12d, %edi
	cmovs	%esi, %r15d
	xorl	%eax, %eax
	movl	%r13d, %esi
	call	can_extend_p
	sarl	$2, %r15d
	cmpl	$210, %eax
	movl	%eax, %ebx
	jne	.L137
	movl	mode_size(%r14), %eax
	sall	$3, %eax
	cmpl	$31, %eax
	jg	.L73
	movl	word_mode(%rip), %esi
	movl	36(%rsp), %edx
	xorl	%eax, %eax
	movl	%r12d, %edi
	call	can_extend_p
	cmpl	$210, %eax
	movl	%eax, %ebx
	jne	.L149
.L73:
	call	start_sequence
	movq	40(%rsp), %r9
	movl	%r13d, %ebx
	movl	mode_size(,%r9,4), %eax
	sall	$3, %eax
	cmpl	$31, %eax
	jg	.L77
	movl	word_mode(%rip), %ebx
.L77:
	movl	36(%rsp), %edx
	movl	%ebx, %edi
	movq	%rbp, %rsi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	24(%rsp), %rsi
	movl	%ebx, %edi
	movq	%rax, %r14
	call	gen_lowpart
	movq	%r14, %rsi
	movq	%rax, %rdi
	call	emit_move_insn
	movl	36(%rsp), %r13d
	testl	%r13d, %r13d
	je	.L80
	movq	const0_rtx(%rip), %r14
	movslq	%ebx,%r13
.L79:
	movl	mode_size(,%r13,4), %eax
	cmpl	$-1, %eax
	leal	3(%rax), %r11d
	movl	%eax, %ebx
	cmovle	%r11d, %ebx
	sarl	$2, %ebx
	cmpl	%r15d, %ebx
	jge	.L117
	movl	%r15d, %ecx
	subl	%ebx, %ecx
	leal	-1(%rcx), %r13d
	movl	%ecx, %ebx
.L89:
	movq	24(%rsp), %rdi
	movl	%r13d, %esi
	movl	$1, %edx
	movl	%r12d, %ecx
	call	operand_subword
	testq	%rax, %rax
	je	.L115
	cmpq	%rax, %r14
	je	.L85
	movq	%rax, %rdi
	movq	%r14, %rsi
	call	emit_move_insn
.L85:
	decl	%r13d
	decl	%ebx
	jne	.L89
.L117:
	call	get_insns
	movq	%rax, %r15
	call	end_sequence
	movl	20(%rsp), %edi
	movl	%r12d, %esi
	movq	%rbp, %rdx
	xorl	%eax, %eax
	call	gen_rtx
	xorl	%ecx, %ecx
	movq	%rbp, %rdx
	movq	24(%rsp), %rsi
	movq	%r15, %rdi
	movq	%rax, %r8
	addq	$56, %rsp
	xorl	%eax, %eax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	emit_no_conflict_block
.L80:
	movslq	%ebx,%r13
	movl	mode_size(,%r13,4), %r10d
	leal	-1(,%r10,8), %edi
	call	size_int
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	%rax, %rcx
	movq	%r14, %rdx
	movl	$78, %edi
	movl	%ebx, %esi
	xorl	%eax, %eax
	call	expand_shift
	movl	$1, %edx
	movl	word_mode(%rip), %edi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%rax, %r14
	jmp	.L79
.L149:
	movl	word_mode(%rip), %edi
	movq	24(%rsp), %rsi
	call	gen_lowpart
	movl	36(%rsp), %edx
	movq	%rbp, %rsi
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	convert_move
	movl	word_mode(%rip), %edi
	movq	24(%rsp), %rsi
	call	gen_lowpart
	movq	24(%rsp), %rsi
	movl	%ebx, %edi
	movq	%rax, %rdx
	jmp	.L127
	.p2align 6,,7
.L141:
	cmpl	$8, %r13d
	je	.L150
.L31:
	cmpl	$9, %r13d
	je	.L151
.L33:
	cmpl	$11, %r13d
	je	.L152
.L35:
	xorl	%edi, %edi
	cmpl	$9, %r13d
	je	.L45
	cmpl	$9, %r13d
	ja	.L67
	cmpl	$8, %r13d
	je	.L37
.L36:
	testq	%rdi, %rdi
	je	.L115
	xorl	%eax, %eax
	movl	$1, %esi
	movl	%r12d, %edx
	movl	$1, %ecx
	movq	%rbp, %r8
	movl	%r13d, %r9d
	call	emit_library_call
	movl	%r12d, %edi
	xorl	%eax, %eax
	call	hard_libcall_value
	jmp	.L126
.L37:
	cmpl	$10, %r12d
	je	.L40
	cmpl	$10, %r12d
	ja	.L44
	cmpl	$9, %r12d
	jne	.L36
	movq	extendsfdf2_libfunc(%rip), %rdi
	jmp	.L36
	.p2align 6,,7
.L44:
	cmpl	$11, %r12d
	jne	.L36
	movq	extendsftf2_libfunc(%rip), %rdi
	jmp	.L36
	.p2align 6,,7
.L40:
	movq	extendsfxf2_libfunc(%rip), %rdi
	jmp	.L36
	.p2align 6,,7
.L67:
	cmpl	$10, %r13d
	je	.L53
	cmpl	$11, %r13d
	jne	.L36
	cmpl	$8, %r12d
	je	.L61
	cmpl	$9, %r12d
	jne	.L36
	movq	trunctfdf2_libfunc(%rip), %rdi
	jmp	.L36
	.p2align 6,,7
.L61:
	movq	trunctfsf2_libfunc(%rip), %rdi
	jmp	.L36
.L53:
	cmpl	$8, %r12d
	je	.L55
	cmpl	$9, %r12d
	jne	.L36
	movq	truncxfdf2_libfunc(%rip), %rdi
	jmp	.L36
.L55:
	movq	truncxfsf2_libfunc(%rip), %rdi
	jmp	.L36
.L45:
	cmpl	$10, %r12d
	je	.L48
	cmpl	$10, %r12d
	ja	.L52
	cmpl	$8, %r12d
	jne	.L36
	movq	truncdfsf2_libfunc(%rip), %rdi
	jmp	.L36
.L52:
	cmpl	$11, %r12d
	jne	.L36
	movq	extenddftf2_libfunc(%rip), %rdi
	jmp	.L36
.L48:
	movq	extenddfxf2_libfunc(%rip), %rdi
	jmp	.L36
.L152:
	cmpl	$8, %r12d
	movl	$112, %edi
	je	.L134
	cmpl	$9, %r12d
	jne	.L35
	movl	$113, %edi
.L134:
	movq	24(%rsp), %rsi
	movq	%rbp, %rdx
	xorl	%ecx, %ecx
	jmp	.L128
.L151:
	cmpl	$11, %r12d
	movl	$110, %edi
	je	.L134
	cmpl	$8, %r12d
	movl	$111, %edi
	jne	.L33
	jmp	.L134
	.p2align 6,,7
.L150:
	cmpl	$9, %r12d
	movl	$108, %edi
	je	.L134
	cmpl	$11, %r12d
	movl	$109, %edi
	jne	.L31
	jmp	.L134
	.p2align 6,,7
.L28:
	movq	24(%rsp), %rdi
	movq	%rbp, %rsi
	jmp	.L129
	.p2align 6,,7
.L140:
	movq	8(%rbp), %rdx
	movl	mode_size(,%r15,4), %eax
	movzbq	2(%rdx), %r14
	cmpl	%eax, mode_size(,%r14,4)
	jl	.L25
	movzbl	3(%rbp), %ecx
	shrb	$2, %cl
	andl	$1, %ecx
	cmpl	36(%rsp), %ecx
	jne	.L25
	movq	%rbp, %rsi
	movl	%r12d, %edi
	movl	%r12d, %r13d
	call	gen_lowpart
	movq	%rax, %rbp
	jmp	.L25
	.p2align 6,,7
.L21:
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbp), %rdi
	movq	%rax, 8(%rbp)
	call	protect_from_queue
	movq	%rax, 16(%rbp)
	jmp	.L17
	.p2align 6,,7
.L139:
	movzbl	2(%rbp), %edx
	cmpb	$16, %dl
	je	.L15
	movq	8(%rbp), %r14
	cmpw	$59, (%r14)
	je	.L153
.L15:
	cmpl	$55, %eax
	jne	.L18
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbp)
	jmp	.L17
.L153:
	movq	8(%r14), %r9
	movq	%r9, 8(%rbp)
	cmpq	$0, 16(%r14)
	je	.L17
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%rbp, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %rbp
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L17
	.p2align 6,,7
.L14:
	cmpq	$0, 16(%rbp)
	jne	.L22
	movq	8(%rbp), %rbp
	jmp	.L17
	.p2align 6,,7
.L22:
	movq	24(%rbp), %rsi
	testq	%rsi, %rsi
	je	.L23
	movq	%rsi, %rbp
	jmp	.L17
.L23:
	movq	8(%rbp), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbp)
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbp), %rbp
	jmp	.L17
	.p2align 6,,7
.L11:
	movq	24(%rsp), %r11
	xorl	%esi, %esi
	movq	8(%r11), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	24(%rsp), %r10
	movq	16(%r10), %rdi
	movq	%rax, 8(%r10)
	call	protect_from_queue
	movq	24(%rsp), %r9
	movq	%rax, 16(%r9)
	jmp	.L7
	.p2align 6,,7
.L138:
	jne	.L8
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	24(%rsp), %r8
	movq	%rax, 8(%r8)
	jmp	.L7
	.p2align 6,,7
.L4:
	movq	24(%rsp), %rax
	cmpq	$0, 16(%rax)
	jne	.L12
	movq	8(%rax), %r14
	movq	%r14, 24(%rsp)
	jmp	.L7
	.p2align 6,,7
.L12:
	movq	24(%rsp), %rdx
	movq	24(%rdx), %rdi
	testq	%rdi, %rdi
	je	.L13
	movq	%rdi, 24(%rsp)
	jmp	.L7
.L13:
	movq	24(%rsp), %rdi
	movq	8(%rdi), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	24(%rsp), %r8
	movq	%rax, %rdi
	movq	8(%r8), %rsi
	movq	%rax, 24(%r8)
	call	gen_move_insn
	movq	%rax, %rdi
	movq	24(%rsp), %rax
	movq	16(%rax), %rsi
	call	emit_insn_before
	movq	24(%rsp), %rbx
	movq	24(%rbx), %rcx
	movq	%rcx, 24(%rsp)
	jmp	.L7
.L115:
	xorl	%eax, %eax
	call	abort
.LFE1:
.Lfe1:
	.size	convert_move,.Lfe1-convert_move
	.align 2
	.p2align 4,,15
.globl convert_to_mode
	.type	convert_to_mode,@function
convert_to_mode:
.LFB2:
	subq	$24, %rsp
.LCFI7:
	movq	%rbx, (%rsp)
.LCFI8:
	movq	%rbp, 8(%rsp)
.LCFI9:
	movq	%r12, 16(%rsp)
.LCFI10:
	movl	(%rsi), %eax
	movl	%edi, %ebx
	movq	%rsi, %rbp
	movl	%edx, %r12d
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L165
.L155:
	movzbl	2(%rbp), %esi
	movzbl	%sil, %edi
	cmpl	%edi, %ebx
	je	.L154
	testl	%r12d, %r12d
	je	.L163
	movslq	%ebx,%rax
	salq	$2, %rax
	cmpl	$1, mode_class(%rax)
	je	.L166
.L163:
	movl	(%rbp), %edx
.L157:
	cmpw	$46, %dx
	je	.L159
.L164:
	movslq	%ebx,%rdi
	leaq	0(,%rdi,4), %rcx
	cmpl	$1, mode_class(%rcx)
	je	.L167
.L158:
	movl	%ebx, %edi
	call	gen_reg_rtx
	movl	%r12d, %edx
	movq	%rbp, %rsi
	movq	%rax, %rbx
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	convert_move
	movq	%rbx, %rbp
.L154:
	movq	%rbp, %rax
	movq	(%rsp), %rbx
	movq	16(%rsp), %r12
	movq	8(%rsp), %rbp
	addq	$24, %rsp
	ret
	.p2align 6,,7
.L167:
	movl	%esi, %eax
	movzbl	%al, %r9d 
	leaq	0(,%r9,4), %rax
	cmpl	$1, mode_class(%rax)
	jne	.L158
	cmpw	$47, %dx
	je	.L159
	movl	mode_size(%rax), %eax
	cmpl	%eax, mode_size(%rcx)
	jg	.L158
	movl	(%rbp), %eax
	andl	$134283263, %eax
	cmpl	$55, %eax
	je	.L168
.L160:
	cmpw	$51, %dx
	jne	.L158
	.p2align 4,,7
.L159:
	movl	%ebx, %edi
	movq	%rbp, %rsi
	movq	16(%rsp), %r12
	movq	(%rsp), %rbx
	movq	8(%rsp), %rbp
	addq	$24, %rsp
	jmp	gen_lowpart
.L168:
	cmpb	$0, direct_load(%rdi)
	je	.L160
	jmp	.L159
	.p2align 6,,7
.L166:
	movl	mode_size(%rax), %eax
	sall	$3, %eax
	cmpl	$64, %eax
	jne	.L163
	movl	(%rbp), %edx
	cmpw	$46, %dx
	jne	.L164
	movl	8(%rbp), %edi
	testl	%edi, %edi
	jns	.L157
	movl	%ebx, %edx
	movq	8(%rsp), %rbp
	movq	16(%rsp), %r12
	movq	(%rsp), %rbx
	xorl	%esi, %esi
	addq	$24, %rsp
	jmp	immed_double_const
	.p2align 6,,7
.L165:
	movq	8(%rsi), %r8
	movslq	%edi,%rdx
	movl	mode_size(,%rdx,4), %eax
	movzbq	2(%r8), %rcx
	cmpl	%eax, mode_size(,%rcx,4)
	jl	.L155
	movzbl	3(%rsi), %ecx
	shrb	$2, %cl
	andl	$1, %ecx
	cmpl	%r12d, %ecx
	jne	.L155
	call	gen_lowpart
	movq	%rax, %rbp
	jmp	.L155
.LFE2:
.Lfe2:
	.size	convert_to_mode,.Lfe2-convert_to_mode
	.align 2
	.p2align 4,,15
.globl emit_move_insn
	.type	emit_move_insn,@function
emit_move_insn:
.LFB3:
	pushq	%r15
.LCFI11:
	pushq	%r14
.LCFI12:
	movq	%rdi, %r14
	pushq	%r13
.LCFI13:
	pushq	%r12
.LCFI14:
	movq	%rsi, %r12
	pushq	%rbp
.LCFI15:
	pushq	%rbx
.LCFI16:
	subq	$24, %rsp
.LCFI17:
	movzbl	2(%rdi), %r13d
	movslq	%r13d,%r15
	movl	mode_class(,%r15,4), %eax
	movl	%eax, 20(%rsp)
	movzwl	(%rdi), %eax
	cmpl	$59, %eax
	je	.L170
	cmpl	$55, %eax
	je	.L242
.L174:
	cmpl	$63, %eax
	je	.L177
	cmpl	$66, %eax
	je	.L177
.L173:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L180
	cmpl	$55, %eax
	je	.L243
.L184:
	cmpl	$63, %eax
	je	.L187
	cmpl	$66, %eax
	je	.L187
.L183:
	cmpl	$16, %r13d
	je	.L221
	movzbl	2(%r12), %edx
	movzbl	%dl, %ebx
	cmpl	%r13d, %ebx
	je	.L190
	testb	%dl, %dl
	jne	.L221
.L190:
	movzwl	(%r12), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L193
	cmpw	$46, %dx
	je	.L193
	cmpw	$47, %dx
	je	.L239
	cmpw	$49, %dx
	je	.L193
	cmpw	$113, %dx
	je	.L193
	.p2align 4,,7
.L192:
	cmpw	$55, (%r14)
	je	.L244
.L194:
	cmpw	$55, (%r12)
	je	.L245
.L197:
	cmpl	$16, %r13d
	je	.L221
	movl	20(%rsp), %ebx
	subl	$5, %ebx
	cmpl	$1, %ebx
	jbe	.L246
.L200:
	movq	mov_optab(%rip), %rdx
	movq	%r15, %rcx
	salq	$4, %rcx
	movl	8(%rdx,%rcx), %eax
	cmpl	$210, %eax
	jne	.L247
	cmpl	$1, %ebx
	ja	.L207
	cmpl	$16, 4(%rsp)
	je	.L207
	movslq	4(%rsp),%rbx
	movq	%rbx, %rsi
	salq	$4, %rsi
	cmpl	$210, 8(%rdx,%rsi)
	je	.L207
	movzbl	2(%r14), %esi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	push_operand
	movl	%eax, %r13d
	call	get_last_insn
	cmpw	$51, (%r14)
	movq	%rax, %r15
	je	.L248
.L208:
	testl	%r13d, %r13d
	je	.L211
	movl	4(%rsp), %esi
	movq	%r14, %rdi
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	change_address
.L240:
	movl	4(%rsp), %edi
	movq	%r12, %rsi
	movq	%rax, %rbp
	call	gen_highpart
	movq	%rbp, %rdi
	movq	%rbx, %rdx
	salq	$4, %rdx
	movq	%rax, %rsi
	addq	mov_optab(%rip), %rdx
	xorl	%eax, %eax
	movslq	8(%rdx),%r8
	call	*insn_gen_function(,%r8,8)
	movq	%rax, %rdi
	call	emit_insn
	testl	%r13d, %r13d
	je	.L215
	movl	4(%rsp), %esi
	movq	%r14, %rdi
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	change_address
.L241:
	movl	4(%rsp), %edi
	movq	%r12, %rsi
	movq	%rax, %r14
	salq	$4, %rbx
	call	gen_lowpart
	movq	%r14, %rdi
	addq	mov_optab(%rip), %rbx
	movq	%rax, %rsi
	xorl	%eax, %eax
	movslq	8(%rbx),%r12
	call	*insn_gen_function(,%r12,8)
	movq	%rax, %rdi
	call	emit_insn
	testq	%r15, %r15
	je	.L217
	movq	24(%r15), %rbp
.L218:
	call	get_last_insn
	movq	%rbp, %rdx
	movl	$6, %esi
	movq	56(%rax), %rcx
	movq	%rax, %r15
	movl	$3, %edi
	xorl	%eax, %eax
	call	gen_rtx
	movq	%r15, %rdx
	movl	$7, %esi
	movq	%rax, 56(%r15)
	movl	$3, %edi
	xorl	%eax, %eax
	movq	56(%rbp), %rcx
	call	gen_rtx
	movq	%rax, 56(%rbp)
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	get_last_insn
.L217:
	call	get_insns
	movq	%rax, %rbp
	jmp	.L218
.L215:
	movl	4(%rsp), %edi
	movq	%r14, %rsi
	call	gen_lowpart
	jmp	.L241
.L211:
	movl	4(%rsp), %edi
	movq	%r14, %rsi
	call	gen_highpart
	jmp	.L240
.L248:
	movl	$42, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L208
	.p2align 6,,7
.L207:
	cmpl	$4, mode_size(,%r15,4)
	jle	.L221
	call	get_last_insn
	xorl	%ebp, %ebp
	xorl	%ebx, %ebx
	movq	%rax, 8(%rsp)
	.p2align 4,,7
.L222:
	movl	mode_size(,%r15,4), %eax
	leal	6(%rax), %r9d
	addl	$3, %eax
	cmovs	%r9d, %eax
	sarl	$2, %eax
	cmpl	%eax, %ebx
	jge	.L249
	movq	%r14, %rdi
	movl	%ebx, %esi
	movl	$1, %edx
	movl	%r13d, %ecx
	call	operand_subword
	movl	%r13d, %ecx
	movl	$1, %edx
	movq	%r12, %rdi
	movl	%ebx, %esi
	movq	%rax, %rbp
	call	operand_subword
	testq	%rax, %rax
	jne	.L229
	movzwl	(%r12), %edx
	leal	-56(%rdx), %edi
	cmpw	$1, %di
	jbe	.L228
	cmpw	$46, %dx
	je	.L228
	cmpw	$47, %dx
	je	.L228
	cmpw	$49, %dx
	je	.L228
	cmpw	$113, %dx
	je	.L228
	movq	%r12, %rdi
	movl	%ebx, %esi
	movl	%r13d, %edx
	call	operand_subword_force
	.p2align 4,,7
.L229:
	testq	%rbp, %rbp
	je	.L221
	testq	%rax, %rax
	je	.L221
	movq	%rbp, %rdi
	movq	%rax, %rsi
	incl	%ebx
	call	emit_move_insn
	movq	%rax, %rbp
	jmp	.L222
	.p2align 6,,7
.L228:
	movl	%r13d, %edi
	movq	%r12, %rsi
	call	force_const_mem
	movl	%r13d, %ecx
	movl	$1, %edx
	movq	%rax, %rdi
	movl	%ebx, %esi
	movq	%rax, %r12
	call	operand_subword
	jmp	.L229
.L249:
	cmpq	$0, 8(%rsp)
	je	.L235
	movq	8(%rsp), %rbx
	movq	24(%rbx), %r12
.L236:
	call	get_last_insn
	movq	%r12, %rdx
	movl	$6, %esi
	movq	56(%rax), %rcx
	movq	%rax, %r13
	movl	$3, %edi
	xorl	%eax, %eax
	call	gen_rtx
	movq	%r13, %rdx
	movl	$7, %esi
	movq	%rax, 56(%r13)
	movl	$3, %edi
	xorl	%eax, %eax
	movq	56(%r12), %rcx
	call	gen_rtx
	movq	%rax, 56(%r12)
	addq	$24, %rsp
	movq	%rbp, %rax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L235:
	call	get_insns
	movq	%rax, %r12
	jmp	.L236
	.p2align 6,,7
.L247:
	movslq	%eax,%r13
	movq	%r14, %rdi
	movq	%r12, %rsi
	xorl	%eax, %eax
	call	*insn_gen_function(,%r13,8)
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	movq	%rax, %rdi
	jmp	emit_insn
.L246:
	movl	mode_unit_size(,%r15,4), %edi
	sall	$3, %edi
	cmpl	$5, 20(%rsp)
	setne	%r11b
	xorl	%eax, %eax
	xorl	%edx, %edx
	movzbl	%r11b, %esi
	incl	%esi
	call	mode_for_size
	movl	%eax, 4(%rsp)
	jmp	.L200
.L245:
	movzbl	2(%r12), %edi
	movq	8(%r12), %rsi
	xorl	%eax, %eax
	call	memory_address_p
	testl	%eax, %eax
	je	.L198
	movl	flag_force_addr(%rip), %r8d
	testl	%r8d, %r8d
	je	.L197
	movq	8(%r12), %r10
	movzwl	(%r10), %edx
	leal	-56(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L198
	cmpw	$46, %dx
	je	.L198
	cmpw	$47, %dx
	je	.L198
	cmpw	$49, %dx
	je	.L198
	cmpw	$113, %dx
	jne	.L197
.L198:
	movq	8(%r12), %rdx
	movq	%r12, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	change_address
	movq	%rax, %r12
	jmp	.L197
.L244:
	movzbl	2(%r14), %edi
	movq	8(%r14), %rsi
	xorl	%eax, %eax
	call	memory_address_p
	testl	%eax, %eax
	je	.L250
.L196:
	movl	flag_force_addr(%rip), %eax
	testl	%eax, %eax
	je	.L194
	movq	8(%r14), %rbp
	movl	(%rbp), %edx
	leal	-56(%rdx), %edi
	cmpw	$1, %di
	jbe	.L195
	cmpw	$46, %dx
	je	.L195
	cmpw	$47, %dx
	je	.L195
	cmpw	$49, %dx
	je	.L195
	cmpw	$113, %dx
	jne	.L194
.L195:
	movq	8(%r14), %rdx
	movq	%r14, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	change_address
	movq	%rax, %r14
	jmp	.L194
.L250:
	movzbl	2(%r14), %esi
	xorl	%eax, %eax
	movq	%r14, %rdi
	call	push_operand
	testl	%eax, %eax
	je	.L195
	jmp	.L196
	.p2align 6,,7
.L193:
	cmpw	$47, %dx
	jne	.L192
.L239:
	cmpb	$0, 2(%r12)
	je	.L192
	movq	%r12, %rsi
	movl	%r13d, %edi
	call	force_const_mem
	movq	%rax, %r12
	jmp	.L192
.L187:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L183
.L243:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L181
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L251
.L181:
	cmpl	$55, %eax
	jne	.L184
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L183
.L251:
	movq	8(%rbp), %rcx
	movq	%rcx, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L183
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L183
	.p2align 6,,7
.L180:
	cmpq	$0, 16(%r12)
	jne	.L188
	movq	8(%r12), %r12
	jmp	.L183
.L188:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L189
	movq	%rsi, %r12
	jmp	.L183
.L189:
	movq	8(%r12), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L183
.L177:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L173
.L242:
	jne	.L174
	movq	8(%rdi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L173
.L170:
	cmpq	$0, 16(%rdi)
	jne	.L178
	movq	8(%rdi), %r14
	jmp	.L173
.L178:
	movq	24(%rdi), %rdi
	testq	%rdi, %rdi
	je	.L179
	movq	%rdi, %r14
	jmp	.L173
.L179:
	movq	8(%r14), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L173
.L221:
	xorl	%eax, %eax
	call	abort
.LFE3:
.Lfe3:
	.size	emit_move_insn,.Lfe3-emit_move_insn
	.align 2
	.p2align 4,,15
.globl emit_library_call
	.type	emit_library_call,@function
emit_library_call:
.LFB4:
	pushq	%rbp
.LCFI18:
	movq	%rsp, %rbp
.LCFI19:
	pushq	%r15
.LCFI20:
	pushq	%r14
.LCFI21:
	leaq	-112(%rbp), %r15
	pushq	%r13
.LCFI22:
	pushq	%r12
.LCFI23:
	pushq	%rbx
.LCFI24:
	subq	$248, %rsp
.LCFI25:
	movl	$0, -216(%rbp)
	movq	$0, -56(%rbp)
	movl	inhibit_defer_pop(%rip), %eax
	movl	$0, -220(%rbp)
	movq	-132(%rbp), %rsi
	movl	-124(%rbp), %ebx
	movl	-120(%rbp), %ecx
	movl	%edi, -132(%rbp)
	movl	$0, -64(%rbp)
	movl	%eax, -164(%rbp)
	movq	%rsi, -176(%rbp)
	movl	-116(%rbp), %eax
	movl	%ebx, -212(%rbp)
	movl	%ecx, -148(%rbp)
	movl	%eax, -152(%rbp)
	movslq	-152(%rbp),%rdx
	salq	$6, %rdx
	subq	%rdx, %rsp
	leaq	32(%rsp), %rax
	movq	%rax, -160(%rbp)
	movl	-152(%rbp), %eax
	cmpl	%eax, -220(%rbp)
	jge	.L495
	.p2align 4,,7
.L305:
	movq	(%r15), %rdi
	addq	$12, %r15
	movl	-4(%r15), %r12d
	cmpl	$16, %r12d
	je	.L532
	movzbl	2(%rdi), %edx
	movzbl	%dl, %r8d
	cmpl	%r12d, %r8d
	je	.L257
	testb	%dl, %dl
	jne	.L532
.L257:
	movzwl	(%rdi), %edx
	cmpw	$51, %dx
	je	.L259
	cmpw	$55, %dx
	je	.L259
	leal	-56(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L261
	cmpw	$46, %dx
	je	.L261
	cmpw	$47, %dx
	je	.L516
	cmpw	$49, %dx
	je	.L261
	cmpw	$113, %dx
	je	.L261
.L260:
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	force_operand
	movq	%rax, %rdi
	.p2align 4,,7
.L259:
	movslq	-216(%rbp),%r13
	movq	%r13, %rax
	salq	$6, %rax
	addq	-160(%rbp), %rax
	cmpl	$11, %r12d
	movq	%rdi, (%rax)
	movl	%r12d, 8(%rax)
	je	.L532
	movl	target_flags(%rip), %edi
	leaq	16(%rax), %rbx
	testl	$32, %edi
	movl	%edi, %edx
	je	.L265
	movslq	%r12d,%r10
	cmpl	$4, mode_unit_size(,%r10,4)
	jle	.L265
	testl	$1, -220(%rbp)
	jne	.L265
	movl	-220(%rbp), %eax
	incl	%eax
	cmpl	$5, %eax
	.p2align 4,,7
.L518:
	jg	.L263
	andl	$32, %edx
	je	.L273
	movslq	%r12d,%r11
	cmpl	$4, mode_unit_size(,%r11,4)
	jle	.L273
	movl	-220(%rbp), %edx
	movl	-220(%rbp), %eax
	addl	$9, %edx
	addl	$8, %eax
	testl	$1, -220(%rbp)
	cmovne	%eax, %edx
.L274:
	movl	$51, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L264:
	movq	-160(%rbp), %rdx
	movq	%r13, %r14
	movq	%rax, (%rbx)
	salq	$6, %r14
	movq	16(%rdx,%r14), %rax
	testq	%rax, %rax
	je	.L277
	cmpw	$2, (%rax)
	je	.L532
.L277:
	movq	-160(%rbp), %rcx
	movq	%r13, %rbx
	salq	$6, %rbx
	leaq	24(%rcx,%rbx), %r14
	movl	target_flags(%rip), %ecx
	testl	$32, %ecx
	movl	%ecx, %edx
	je	.L280
	movslq	%r12d,%rsi
	cmpl	$4, mode_unit_size(,%rsi,4)
	jle	.L280
	testl	$1, -220(%rbp)
	jne	.L280
	movl	-220(%rbp), %eax
	incl	%eax
	cmpl	$5, %eax
	.p2align 4,,7
.L519:
	jg	.L278
	andl	$32, %edx
	je	.L284
	movslq	%r12d,%r8
	cmpl	$4, mode_unit_size(,%r8,4)
	jle	.L284
	movl	-220(%rbp), %eax
	movl	-220(%rbp), %ebx
	xorl	$1, %eax
	andl	$1, %eax
	addl	%eax, %ebx
.L285:
	cmpl	$16, %r12d
	je	.L533
	movslq	%r12d,%rdx
	movl	mode_size(,%rdx,4), %eax
	leal	6(%rax), %r11d
	addl	$3, %eax
	cmovs	%r11d, %eax
	sarl	$2, %eax
	leal	-6(%rax,%rbx), %r10d
	testl	%r10d, %r10d
	jle	.L278
.L287:
	andl	$32, %ecx
	je	.L290
	movslq	%r12d,%rcx
	cmpl	$4, mode_unit_size(,%rcx,4)
	jle	.L290
	testl	$1, -220(%rbp)
	jne	.L290
	movl	$5, %eax
	.p2align 4,,7
.L520:
	subl	-220(%rbp), %eax
.L279:
	movl	%eax, (%r14)
	salq	$6, %r13
	xorl	%edx, %edx
	movq	-160(%rbp), %rax
	leaq	(%rax,%r13), %rbx
	cmpq	$0, 16(%rbx)
	je	.L294
	movl	24(%rbx), %r13d
	movl	$1, %eax
	testl	%r13d, %r13d
	cmove	%eax, %edx
.L294:
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	leaq	32(%rbx), %r9
	leaq	48(%rbx), %r14
	movl	%r12d, %edi
	leaq	-64(%rbp), %r8
	movq	%r14, (%rsp)
	call	locate_and_pad_parm
	cmpq	$0, 56(%rbx)
	jne	.L532
	movl	48(%rbx), %eax
	addl	%eax, -64(%rbp)
	cmpq	$0, 16(%rbx)
	je	.L532
	movl	24(%rbx), %esi
	testl	%esi, %esi
	jne	.L532
	testb	$32, target_flags(%rip)
	je	.L299
	movslq	%r12d,%rbx
	cmpl	$4, mode_unit_size(,%rbx,4)
	jle	.L299
	movl	-220(%rbp), %eax
	movl	-220(%rbp), %ebx
	xorl	$1, %eax
	andl	$1, %eax
	addl	%eax, %ebx
.L300:
	cmpl	$16, %r12d
	je	.L301
	movslq	%r12d,%r8
	movl	mode_size(,%r8,4), %eax
.L521:
	leal	6(%rax), %edi
	movl	-152(%rbp), %r12d
	addl	$3, %eax
	cmovs	%edi, %eax
	incl	-216(%rbp)
	sarl	$2, %eax
	cmpl	%r12d, -216(%rbp)
	leal	(%rax,%rbx), %r9d
	movl	%r9d, -220(%rbp)
	jl	.L305
.L495:
	movq	-176(%rbp), %rdi
	xorl	%eax, %eax
	call	assemble_external_libcall
	movl	-64(%rbp), %eax
	leal	14(%rax), %r15d
	addl	$7, %eax
	cmovns	%eax, %r15d
	movl	$24, %eax
	andl	$-8, %r15d
	cmpl	$23, %r15d
	cmovg	%r15d, %eax
	cmpl	current_function_outgoing_args_size(%rip), %eax
	movl	%eax, -64(%rbp)
	jle	.L308
	movl	%eax, current_function_outgoing_args_size(%rip)
.L308:
	xorl	%edx, %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	movl	$0, -64(%rbp)
	call	gen_rtx
	movzwl	(%rax), %edx
	movq	%rax, %rcx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L310
	cmpw	$46, %dx
	je	.L310
	cmpw	$47, %dx
	je	.L310
	cmpw	$49, %dx
	je	.L310
	cmpw	$113, %dx
	je	.L310
	cmpw	$51, %dx
	movq	%rax, %rdi
	je	.L522
	movq	%rax, %rsi
	movl	$4, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
.L523:
	movq	%rax, %rdi
.L522:
	xorl	%eax, %eax
	call	anti_adjust_stack
	xorl	%r11d, %r11d
	movq	virtual_outgoing_args_rtx(%rip), %rsi
	testl	%r11d, %r11d
	je	.L315
	jne	.L534
.L315:
	movl	class_narrowest_mode+4(%rip), %edi
	call	memory_address
	movl	$0, -224(%rbp)
	movl	$0, -228(%rbp)
	movq	%rax, -184(%rbp)
	movl	-152(%rbp), %eax
	cmpl	%eax, -224(%rbp)
	jge	.L497
	.p2align 4,,7
.L462:
	movslq	-228(%rbp),%rcx
	salq	$6, %rcx
	addq	-160(%rbp), %rcx
	movl	8(%rcx), %eax
	movq	16(%rcx), %rdx
	movq	(%rcx), %r12
	movl	%eax, -196(%rbp)
	testq	%rdx, %rdx
	movq	%rdx, -192(%rbp)
	movl	24(%rcx), %eax
	movl	%eax, -200(%rbp)
	je	.L322
	testl	%eax, %eax
	je	.L321
.L322:
	movslq	-224(%rbp),%r13
	movq	-160(%rbp), %r14
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	xorl	%r15d, %r15d
	movl	$0, -236(%rbp)
	salq	$6, %r13
	movl	32(%r13,%r14), %edx
	call	gen_rtx
	cmpl	$16, -196(%rbp)
	movq	%rax, %r14
	je	.L323
	movslq	-196(%rbp),%rsi
	movl	$2, -232(%rbp)
	movl	mode_size(,%rsi,4), %eax
	sall	$3, %eax
	cmpl	$31, %eax
	jle	.L327
.L323:
	movl	$1, -232(%rbp)
.L327:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L331
	cmpl	$55, %eax
	je	.L535
.L335:
	cmpl	$63, %eax
	je	.L338
	cmpl	$66, %eax
	je	.L338
.L334:
	cmpl	$16, -196(%rbp)
	movq	%r12, -248(%rbp)
	je	.L536
	movl	-200(%rbp), %esi
	testl	%esi, %esi
	jle	.L434
	movslq	-196(%rbp),%r15
	movl	8(%r14), %r13d
	movl	mode_size(,%r15,4), %eax
	cmpl	$-1, %eax
	leal	3(%rax), %edi
	movl	%eax, %r15d
	cmovle	%edi, %r15d
	xorl	%ebx, %ebx
	sarl	$2, %r15d
	testl	%ebx, %ebx
	je	.L436
	cmpq	$0, -184(%rbp)
	je	.L537
.L437:
	movq	-248(%rbp), %r9
	movl	-200(%rbp), %r12d
	movzwl	(%r9), %edx
	subl	%ebx, %r12d
	leal	-56(%rdx), %r10d
	movl	%edx, %ecx
	cmpw	$1, %r10w
	jbe	.L439
	cmpw	$46, %dx
	je	.L439
	cmpw	$47, %dx
	je	.L439
	cmpw	$49, %dx
	je	.L439
	cmpw	$113, %dx
	je	.L439
	.p2align 4,,7
.L438:
	cmpw	$51, %dx
	je	.L538
.L440:
	cmpl	%r15d, %r12d
	jge	.L431
	leal	(%rbx,%r12), %r14d
	leal	(%r13,%r12,4), %r13d
	.p2align 4,,7
.L446:
	cmpl	%r14d, %r12d
	jge	.L539
.L443:
	incl	%r12d
	addl	$4, %r13d
	cmpl	%r15d, %r12d
	jl	.L446
.L431:
	movl	-200(%rbp), %ebx
	testl	%ebx, %ebx
	jle	.L451
	movq	-248(%rbp), %rsi
	movq	-192(%rbp), %rax
	movzwl	(%rsi), %edx
	movl	8(%rax), %r13d
	leal	-56(%rdx), %r14d
	cmpw	$1, %r14w
	jbe	.L453
	cmpw	$46, %dx
	je	.L453
	cmpw	$47, %dx
	je	.L517
	cmpw	$49, %dx
	je	.L453
	cmpw	$113, %dx
	je	.L453
	.p2align 4,,7
.L452:
	xorl	%r12d, %r12d
	cmpl	-200(%rbp), %r12d
	jl	.L458
.L451:
	xorl	%r13d, %r13d
	testl	%r13d, %r13d
	je	.L321
	cmpq	$0, -184(%rbp)
	je	.L540
.L321:
	incl	-224(%rbp)
	incl	inhibit_defer_pop(%rip)
	incl	-228(%rbp)
	movl	-152(%rbp), %edi
	cmpl	%edi, -224(%rbp)
	jl	.L462
.L497:
	movl	-152(%rbp), %r8d
	xorl	%r12d, %r12d
	testl	%r8d, %r8d
	jle	.L511
	movl	-152(%rbp), %ebx
	.p2align 4,,7
.L468:
	movslq	%r12d,%r10
	salq	$6, %r10
	addq	-160(%rbp), %r10
	movq	16(%r10), %rdi
	movq	(%r10), %rsi
	movl	24(%r10), %eax
	testq	%rdi, %rdi
	je	.L467
	testl	%eax, %eax
	je	.L541
.L467:
	incl	inhibit_defer_pop(%rip)
	incl	%r12d
	decl	%ebx
	jne	.L468
.L511:
	movl	-212(%rbp), %edx
	testl	%edx, %edx
	jne	.L469
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L473
.L469:
	call	start_sequence
	xorl	%ebx, %ebx
	cmpl	-152(%rbp), %ebx
	jge	.L514
	.p2align 4,,7
.L480:
	movq	-160(%rbp), %r12
	movslq	%ebx,%r11
	salq	$6, %r11
	movq	16(%r11,%r12), %rdx
	testq	%rdx, %rdx
	jne	.L542
.L477:
	incl	%ebx
	cmpl	-152(%rbp), %ebx
	jl	.L480
.L514:
	call	get_insns
	movq	%rax, -144(%rbp)
	call	end_sequence
	movq	-176(%rbp), %rdi
	xorl	%esi, %esi
	leaq	-144(%rbp), %rdx
	xorl	%eax, %eax
	call	prepare_call_address
	movq	-176(%rbp), %rcx
	incl	inhibit_defer_pop(%rip)
	movq	%rax, %r13
	movq	8(%rcx), %rdi
	call	get_identifier
	movl	target_flags(%rip), %edx
	movq	%rax, %r12
	testl	$32, %edx
	je	.L483
	cmpl	$4, mode_unit_size(%rip)
	jle	.L483
	testl	$1, -220(%rbp)
	jne	.L483
	movl	-220(%rbp), %eax
	incl	%eax
	cmpl	$5, %eax
.L531:
	jg	.L481
	movq	void_type_node(%rip), %rax
	testq	%rax, %rax
	je	.L487
	testb	$8, 17(%rax)
	jne	.L481
.L487:
	andl	$32, %edx
	je	.L488
	cmpl	$4, mode_unit_size(%rip)
	jle	.L488
	movl	-220(%rbp), %edx
	movl	-220(%rbp), %eax
	addl	$9, %edx
	addl	$8, %eax
	testl	$1, -220(%rbp)
	cmovne	%eax, %edx
.L489:
	movl	$51, %edi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, %rbx
.L482:
	movl	-148(%rbp), %r14d
	testl	%r14d, %r14d
	jne	.L543
	xorl	%r9d, %r9d
.L493:
	movl	-164(%rbp), %eax
	movq	-144(%rbp), %rsi
	movq	%r13, %rdi
	movl	-64(%rbp), %edx
	movq	%rbx, %r8
	xorl	%ecx, %ecx
	incl	%eax
	movq	%rsi, 8(%rsp)
	movq	%r12, %rsi
	movl	%eax, (%rsp)
	movl	-212(%rbp), %eax
	movl	%eax, 16(%rsp)
	xorl	%eax, %eax
	call	emit_call_1
	decl	inhibit_defer_pop(%rip)
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	leave
	ret
.L543:
	movl	-148(%rbp), %edi
	xorl	%eax, %eax
	call	hard_libcall_value
	movq	%rax, %r9
	jmp	.L493
.L488:
	movl	-220(%rbp), %edx
	addl	$8, %edx
	jmp	.L489
.L481:
	xorl	%ebx, %ebx
	jmp	.L482
.L483:
	cmpl	$5, -220(%rbp)
	jmp	.L531
	.p2align 6,,7
.L542:
	movl	$41, %edi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L477
	.p2align 6,,7
.L473:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r9
	movq	%rax, 16(%rbx)
	testq	%r9, %r9
	movq	%r9, pending_chain(%rip)
	movq	%r9, %rbx
	jne	.L473
	jmp	.L469
.L541:
	call	emit_move_insn
	jmp	.L467
.L540:
	cmpl	$2, -232(%rbp)
	jne	.L321
	movl	$46, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	anti_adjust_stack
	jmp	.L321
	.p2align 6,,7
.L458:
	movl	word_mode(%rip), %esi
	leal	(%r12,%r13), %edx
	movl	$51, %edi
	xorl	%eax, %eax
	call	gen_rtx
	movl	-196(%rbp), %edx
	movl	%r12d, %esi
	movq	-248(%rbp), %rdi
	movq	%rax, %r15
	incl	%r12d
	call	operand_subword_force
	movq	%r15, %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	cmpl	-200(%rbp), %r12d
	jl	.L458
	jmp	.L451
	.p2align 6,,7
.L453:
	cmpw	$47, %dx
	jne	.L452
.L517:
	movq	-248(%rbp), %rdx
	cmpb	$0, 2(%rdx)
	je	.L452
	movl	-196(%rbp), %edi
	movq	%rdx, %rsi
	call	force_const_mem
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	validize_mem
	movq	%rax, -248(%rbp)
	jmp	.L452
	.p2align 6,,7
.L539:
	movq	-248(%rbp), %rdi
	movl	-196(%rbp), %edx
	movl	%r12d, %esi
	call	operand_subword_force
	movl	%r13d, %edx
	xorl	%esi, %esi
	movq	%rax, %rbx
	movl	$46, %edi
	xorl	%eax, %eax
	call	gen_rtx
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	-184(%rbp), %r11
	movl	word_mode(%rip), %esi
	movq	%rax, 24(%rsp)
	movq	%rbx, %rdi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	$0, (%rsp)
	movl	$0, 8(%rsp)
	movq	%r11, 16(%rsp)
	call	emit_push_insn
	jmp	.L443
.L538:
	movq	-248(%rbp), %rsi
	cmpl	$63, 8(%rsi)
	jg	.L440
	movzbq	2(%rsi), %rdx
	cmpl	$1, mode_class(,%rdx,4)
	je	.L440
	movq	%rsi, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	movq	%rax, -248(%rbp)
	jmp	.L440
	.p2align 6,,7
.L439:
	cmpw	$47, %cx
	jne	.L438
	movq	-248(%rbp), %rcx
	cmpb	$0, 2(%rcx)
	je	.L438
	movl	-196(%rbp), %edi
	movq	%rcx, %rsi
	call	force_const_mem
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	validize_mem
	movq	%rax, -248(%rbp)
	movzwl	(%rax), %edx
	jmp	.L438
.L537:
	movl	-232(%rbp), %r8d
	testl	%r8d, %r8d
	je	.L436
	cmpl	$2, -232(%rbp)
	je	.L436
	movl	$46, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	anti_adjust_stack
.L436:
	cmpq	$0, -184(%rbp)
	movl	$0, %eax
	cmove	%eax, %ebx
	jmp	.L437
.L434:
	xorl	%r12d, %r12d
	testl	%r12d, %r12d
	je	.L448
	cmpq	$0, -184(%rbp)
	je	.L544
.L448:
	cmpw	$46, (%r14)
	je	.L545
	movq	-184(%rbp), %rdx
	movl	$63, %edi
	movl	$4, %esi
	movq	%r14, %rcx
	xorl	%eax, %eax
	call	gen_rtx
.L530:
	movl	-196(%rbp), %edi
	movq	%rax, %rsi
	call	memory_address
	movl	-196(%rbp), %esi
	movl	$55, %edi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	gen_rtx
	movq	-248(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_move_insn
	jmp	.L431
.L545:
	movq	-184(%rbp), %rdi
	movl	8(%r14), %esi
	call	plus_constant_wide
	jmp	.L530
.L544:
	movl	-232(%rbp), %ecx
	testl	%ecx, %ecx
	je	.L448
	cmpl	$2, -232(%rbp)
	je	.L448
	movl	$46, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	anti_adjust_stack
	jmp	.L448
	.p2align 6,,7
.L536:
	movl	-200(%rbp), %esi
	sall	$2, %esi
	cmpl	$-1, %esi
	leal	3(%rsi), %edi
	movl	%esi, %r9d
	cmovg	%esi, %edi
	andl	$-4, %edi
	subl	%edi, %r9d
	testq	%r15, %r15
	je	.L532
	movl	-200(%rbp), %eax
	movl	%esi, %ebx
	subl	%r9d, %ebx
	testl	%eax, %eax
	jne	.L546
.L345:
	cmpq	$0, -184(%rbp)
	je	.L547
	cmpw	$46, (%r14)
	je	.L548
	movq	-184(%rbp), %rdx
	movl	$63, %edi
	movl	$4, %esi
	movq	%r14, %rcx
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, %rdi
.L526:
	movl	%ebx, %esi
	call	plus_constant_wide
	movl	$16, %edi
	movq	%rax, %rsi
.L527:
	call	memory_address
	cmpw	$46, (%r15)
	movq	%rax, %rbx
	je	.L549
.L360:
	movq	%rbx, %rdx
	movl	$55, %edi
	movl	$16, %esi
	xorl	%eax, %eax
	call	gen_rtx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %r13
	movl	$46, %edi
	xorl	%eax, %eax
	call	gen_rtx
	movq	%r15, %rdx
	movq	%r12, %rsi
	movq	%r13, %rdi
	movq	%rax, %rcx
	call	gen_movstrsi
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L431
.L549:
	xorl	%r11d, %r11d
	movl	$8, %r10d
	movl	8(%r15), %edi
	cmpl	$8, -236(%rbp)
	movl	$9, %esi
	movl	class_narrowest_mode+4(%rip), %r8d
	cmovl	-236(%rbp), %r10d
	movq	mov_optab(%rip), %r9
	movl	$8, %r13d
	.p2align 4,,7
.L374:
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	testl	%r8d, %r8d
	je	.L500
	.p2align 4,,7
.L370:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%esi, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L370
.L500:
	testl	%ecx, %ecx
	je	.L363
	movslq	%ecx,%rcx
	movq	%rcx, %rsi
	salq	$4, %rsi
	cmpl	$210, 8(%r9,%rsi)
	je	.L372
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r13d, %eax
	cmpl	%eax, %r10d
	jl	.L372
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r11d
	movl	%edx, %edi
.L372:
	movl	mode_size(,%rcx,4), %esi
	cmpl	$1, %esi
	jg	.L374
.L363:
	decl	%r11d
	jg	.L360
	movq	%rbx, %rdx
	movl	$55, %edi
	xorl	%eax, %eax
	movl	$16, %esi
	movl	$9, %ebx
	call	gen_rtx
	xorl	%ecx, %ecx
	movq	8(%r12), %rdi
	movq	8(%rax), %r13
	movl	8(%r15), %r10d
	movq	%r12, -104(%rbp)
	movl	$0, -76(%rbp)
	movq	%rax, -128(%rbp)
	movq	%rdi, -96(%rbp)
	movq	%r13, -120(%rbp)
	movzwl	(%r13), %edx
	leal	-85(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L377
	cmpw	$88, %dx
	je	.L377
	cmpw	$87, %dx
	je	.L377
.L376:
	movl	%ecx, -112(%rbp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L379
	cmpw	$88, %dx
	je	.L379
	cmpw	$87, %dx
	je	.L379
.L378:
	movl	%ecx, -88(%rbp)
	movl	$0, -84(%rbp)
	movl	$0, -108(%rbp)
	movzwl	(%r13), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L381
	cmpw	$87, %ax
	je	.L381
.L380:
	testl	%edx, %edx
	movl	%edx, -72(%rbp)
	je	.L382
	movl	%r10d, -76(%rbp)
.L382:
	movl	-88(%rbp), %r15d
	movl	%r10d, -80(%rbp)
	testl	%r15d, %r15d
	je	.L384
	movl	-112(%rbp), %eax
	testl	%eax, %eax
	jne	.L383
.L384:
	xorl	%r12d, %r12d
	movl	$8, %r11d
	movl	$9, %esi
	cmpl	$8, -236(%rbp)
	movl	class_narrowest_mode+4(%rip), %r8d
	movl	$8, %r14d
	cmovl	-236(%rbp), %r11d
	movq	mov_optab(%rip), %r9
.L398:
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	testl	%r8d, %r8d
	je	.L503
.L394:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%esi, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L394
.L503:
	testl	%ecx, %ecx
	je	.L387
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r9,%rdx)
	je	.L396
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r14d, %eax
	cmpl	%eax, %r11d
	jl	.L396
	movl	%r10d, %eax
	movl	%edx, %r10d
	xorl	%edx, %edx
	divl	%r10d
	addl	%eax, %r12d
	movl	%edx, %r10d
.L396:
	movl	mode_size(,%rcx,4), %esi
	cmpl	$1, %esi
	jg	.L398
.L387:
	cmpl	$2, %r12d
	jle	.L383
	testl	%r15d, %r15d
	jne	.L400
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L401
	cmpw	$46, %dx
	je	.L401
	cmpw	$47, %dx
	je	.L401
	cmpw	$49, %dx
	je	.L401
	cmpw	$113, %dx
	je	.L401
.L400:
	movl	-112(%rbp), %eax
	testl	%eax, %eax
	jne	.L383
	movzwl	(%r13), %edx
	leal	-56(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L403
	cmpw	$46, %dx
	je	.L403
	cmpw	$47, %dx
	je	.L403
	cmpw	$49, %dx
	je	.L403
	cmpw	$113, %dx
	je	.L403
.L383:
	cmpl	$8, -236(%rbp)
	movl	$8, %eax
	cmovl	-236(%rbp), %eax
	cmpl	$1, %ebx
	movl	%eax, -236(%rbp)
	jle	.L406
.L428:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r13d, %r13d
	testl	%edx, %edx
	je	.L506
.L413:
	movslq	%edx,%r11
	salq	$2, %r11
	cmpl	%ebx, mode_size(%r11)
	cmovl	%edx, %r13d
	movl	mode_wider_mode(%r11), %edx
	testl	%edx, %edx
	jne	.L413
.L506:
	testl	%r13d, %r13d
	je	.L406
	movslq	%r13d,%r15
	movq	%r15, %rbx
	salq	$4, %rbx
	addq	mov_optab(%rip), %rbx
	movl	8(%rbx), %edx
	cmpl	$210, %edx
	je	.L415
	movl	mode_size(,%r15,4), %r12d
	movl	$8, %eax
	cmpl	$9, %r12d
	cmovl	%r12d, %eax
	cmpl	%eax, -236(%rbp)
	jl	.L415
	movslq	%edx,%r14
	cmpl	%r12d, -80(%rbp)
	leaq	-128(%rbp), %rbx
	movq	insn_gen_function(,%r14,8), %rcx
	movq	%rcx, -208(%rbp)
	jl	.L415
	movl	-72(%rbp), %edx
.L426:
	testl	%edx, %edx
	je	.L420
	subl	%r12d, 52(%rbx)
.L420:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L421
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L528:
	movq	%rax, %r14
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L423
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L529:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*-208(%rbp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L425
	addl	%r12d, 52(%rbx)
.L425:
	movl	48(%rbx), %eax
	subl	%r12d, %eax
	cmpl	%r12d, %eax
	movl	%eax, 48(%rbx)
	jge	.L426
.L415:
	movl	mode_size(,%r15,4), %ebx
	cmpl	$1, %ebx
	jg	.L428
.L406:
	movl	-80(%rbp), %eax
	testl	%eax, %eax
	je	.L431
	jmp	.L532
	.p2align 6,,7
.L423:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L529
.L421:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L528
.L403:
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, -120(%rbp)
	jmp	.L383
.L401:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, -96(%rbp)
	jmp	.L400
.L381:
	movl	$1, %edx
	jmp	.L380
.L379:
	movl	$1, %ecx
	jmp	.L378
.L377:
	movl	$1, %ecx
	jmp	.L376
.L548:
	addl	8(%r14), %ebx
	movq	-184(%rbp), %rdi
	jmp	.L526
.L547:
	movzwl	(%r15), %edx
	cmpl	$2, -232(%rbp)
	sete	%r11b
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	movzbl	%r11b, %r13d
	jbe	.L350
	cmpw	$46, %dx
	je	.L350
	cmpw	$47, %dx
	je	.L350
	cmpw	$49, %dx
	je	.L350
	cmpw	$113, %dx
	je	.L350
	cmpw	$51, %dx
	je	.L550
.L352:
	xorl	%eax, %eax
	movl	$4, %edi
	movq	%r15, %rsi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	xorl	%eax, %eax
	testl	%eax, %eax
	jne	.L551
.L354:
	movq	%rbx, %rdi
.L525:
	xorl	%eax, %eax
	call	anti_adjust_stack
	xorl	%ecx, %ecx
	movq	virtual_outgoing_args_rtx(%rip), %rsi
	testl	%ecx, %ecx
	je	.L355
	testl	%r13d, %r13d
	jne	.L552
.L355:
	movl	class_narrowest_mode+4(%rip), %edi
	jmp	.L527
.L552:
	movq	%rsi, %rdi
	xorl	%esi, %esi
	call	plus_constant_wide
	movq	%rax, %rsi
	jmp	.L355
.L551:
	movl	$46, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	call	gen_rtx
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	movq	add_optab(%rip), %rsi
	movq	%rax, %rcx
	movq	%rbx, %rdx
	movl	$4, %edi
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	movq	%rax, %rbx
	jmp	.L354
.L550:
	xorl	%edx, %edx
	movq	%r15, %rdi
	testl	%edx, %edx
	jne	.L352
	jmp	.L525
	.p2align 6,,7
.L350:
	movq	%r15, %rdi
	xorl	%esi, %esi
	call	plus_constant_wide
	movq	%rax, %rdi
	jmp	.L525
.L546:
	movq	-248(%rbp), %r12
	movl	%ebx, %esi
	movq	8(%r12), %rdi
	call	plus_constant_wide
	movl	$16, %esi
	movq	-248(%rbp), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	movq	%rax, %r12
	movl	-200(%rbp), %eax
	testl	%eax, %eax
	je	.L345
	cmpw	$46, 0
	je	.L553
	movl	$46, %edi
	xorl	%esi, %esi
	movl	%ebx, %edx
	xorl	%eax, %eax
	call	gen_rtx
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movzbl	2, %edi
	movq	sub_optab(%rip), %rsi
	movq	%rax, %rcx
	xorl	%edx, %edx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
.L524:
	movq	%rax, %r15
	jmp	.L345
.L553:
	movl	8, %edx
	movl	$46, %edi
	xorl	%esi, %esi
	xorl	%eax, %eax
	subl	%ebx, %edx
	call	gen_rtx
	jmp	.L524
	.p2align 6,,7
.L338:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L334
.L535:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L332
	movq	8(%r12), %r13
	cmpw	$59, (%r13)
	je	.L554
.L332:
	cmpl	$55, %eax
	jne	.L335
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L334
.L554:
	movq	8(%r13), %rbx
	movq	%rbx, 8(%r12)
	cmpq	$0, 16(%r13)
	je	.L334
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r12
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L334
	.p2align 6,,7
.L331:
	cmpq	$0, 16(%r12)
	jne	.L339
	movq	8(%r12), %r12
	jmp	.L334
.L339:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L340
	movq	%rsi, %r12
	jmp	.L334
.L340:
	movq	8(%r12), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L334
.L534:
	movq	%rsi, %rdi
	xorl	%esi, %esi
	call	plus_constant_wide
	movq	%rax, %rsi
	jmp	.L315
.L310:
	movq	%rcx, %rdi
	xorl	%esi, %esi
	call	plus_constant_wide
	jmp	.L523
.L301:
	xorl	%edi, %edi
	call	int_size_in_bytes
	jmp	.L521
	.p2align 6,,7
.L299:
	movl	-220(%rbp), %ebx
	jmp	.L300
	.p2align 6,,7
.L290:
	movl	$6, %eax
	jmp	.L520
	.p2align 6,,7
.L278:
	xorl	%eax, %eax
	jmp	.L279
.L533:
	xorl	%edi, %edi
	call	int_size_in_bytes
	leal	6(%rax), %edi
	addl	$3, %eax
	cmovs	%edi, %eax
	sarl	$2, %eax
	leal	-6(%rax,%rbx), %r9d
	testl	%r9d, %r9d
	jle	.L278
	movl	target_flags(%rip), %ecx
	jmp	.L287
	.p2align 6,,7
.L284:
	movl	-220(%rbp), %ebx
	jmp	.L285
	.p2align 6,,7
.L280:
	cmpl	$5, -220(%rbp)
	jmp	.L519
	.p2align 6,,7
.L273:
	movl	-220(%rbp), %edx
	addl	$8, %edx
	jmp	.L274
	.p2align 6,,7
.L263:
	xorl	%eax, %eax
	jmp	.L264
	.p2align 6,,7
.L265:
	cmpl	$5, -220(%rbp)
	jmp	.L518
	.p2align 6,,7
.L261:
	cmpw	$47, %dx
	jne	.L259
.L516:
	cmpb	$0, 2(%rdi)
	je	.L259
	jmp	.L260
.L532:
	xorl	%eax, %eax
	call	abort
.LFE4:
.Lfe4:
	.size	emit_library_call,.Lfe4-emit_library_call
	.align 2
	.p2align 4,,15
.globl force_operand
	.type	force_operand,@function
force_operand:
.LFB5:
	pushq	%r14
.LCFI26:
	movq	%rsi, %r14
	pushq	%r13
.LCFI27:
	xorl	%r13d, %r13d
	pushq	%r12
.LCFI28:
	pushq	%rbp
.LCFI29:
	movq	%rdi, %rbp
	pushq	%rbx
.LCFI30:
	subq	$16, %rsp
.LCFI31:
	testq	%rsi, %rsi
	je	.L557
	cmpw	$51, (%rsi)
	je	.L573
.L557:
	xorl	%ebx, %ebx
.L558:
	movl	(%rbp), %eax
	cmpw	$63, %ax
	je	.L574
	cmpw	$64, %ax
	je	.L575
	cmpw	$66, %ax
	je	.L576
.L560:
	testq	%r13, %r13
	je	.L567
	movq	16(%rbp), %r12
	movzwl	(%r12), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L568
	cmpw	$46, %dx
	je	.L568
	cmpw	$47, %dx
	je	.L568
	cmpw	$49, %dx
	je	.L568
	cmpw	$113, %dx
	je	.L568
	cmpw	$51, %dx
	je	.L577
.L569:
	xorl	%ebx, %ebx
	.p2align 4,,7
.L568:
	cmpq	sub_optab(%rip), %r13
	je	.L578
.L570:
	cmpq	add_optab(%rip), %r13
	je	.L579
.L571:
	movq	8(%rbp), %rdi
	movq	%rbx, %rsi
	xorl	%eax, %eax
	call	force_operand
	xorl	%esi, %esi
	movq	%r12, %rdi
	movq	%rax, %rbx
	xorl	%eax, %eax
	call	force_operand
.L572:
	movzbl	2(%rbp), %edi
	movq	%rax, %rcx
	movq	%r13, %rsi
	movq	%rbx, %rdx
	movq	%r14, %r8
	xorl	%r9d, %r9d
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
.L556:
	addq	$16, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	ret
	.p2align 6,,7
.L579:
	cmpw	$46, (%r12)
	jne	.L571
	movq	8(%rbp), %rax
	cmpw	$63, (%rax)
	jne	.L571
	movq	8(%rax), %rdx
	cmpw	$51, (%rdx)
	jne	.L571
	movl	8(%rdx), %edx
	cmpl	$63, %edx
	jle	.L571
	cmpl	$67, %edx
	jg	.L571
	movzbl	2(%rbp), %edi
	movq	%r13, %rsi
	movq	%rbx, %r8
	movl	$3, (%rsp)
	movq	%r12, %rcx
	xorl	%r9d, %r9d
	movq	8(%rax), %rdx
	xorl	%eax, %eax
	call	expand_binop
	xorl	%esi, %esi
	movq	8(%rbp), %rdx
	movq	%rax, %rbx
	xorl	%eax, %eax
	movq	16(%rdx), %rdi
	call	force_operand
	jmp	.L572
	.p2align 6,,7
.L578:
	cmpw	$46, %dx
	jne	.L570
	movzbl	2(%rbp), %edi
	movq	%r12, %rsi
	xorl	%eax, %eax
	movq	add_optab(%rip), %r13
	call	negate_rtx
	movq	%rax, %r12
	jmp	.L570
.L577:
	cmpq	%rbx, %r12
	jne	.L568
	jmp	.L569
	.p2align 6,,7
.L567:
	movq	%rbp, %rax
	jmp	.L556
	.p2align 6,,7
.L576:
	movq	16(%rbp), %r13
	movzwl	(%r13), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L564
	cmpw	$46, %dx
	je	.L564
	cmpw	$47, %dx
	je	.L564
	cmpw	$49, %dx
	je	.L564
	cmpw	$113, %dx
	je	.L564
	cmpw	$51, %dx
	je	.L580
.L565:
	xorl	%ebx, %ebx
	.p2align 4,,7
.L564:
	movq	8(%rbp), %rdi
	movq	%rbx, %rsi
	xorl	%eax, %eax
	call	force_operand
	xorl	%esi, %esi
	movq	%r13, %rdi
	movzbl	2(%rbp), %ebx
	movq	%rax, %r12
	xorl	%eax, %eax
	call	force_operand
	addq	$16, %rsp
	xorl	%r8d, %r8d
	movq	%r12, %rsi
	movq	%r14, %rcx
	movq	%rax, %rdx
	xorl	%eax, %eax
	movl	%ebx, %edi
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	jmp	expand_mult
.L580:
	cmpq	%rbx, %r13
	jne	.L564
	jmp	.L565
	.p2align 6,,7
.L575:
	movq	sub_optab(%rip), %r13
	jmp	.L560
	.p2align 6,,7
.L574:
	movq	add_optab(%rip), %r13
	jmp	.L560
	.p2align 6,,7
.L573:
	movq	%rsi, %rbx
	jmp	.L558
.LFE5:
.Lfe5:
	.size	force_operand,.Lfe5-force_operand
	.section	.rodata.str1.32,"aMS",@progbits,1
	.align 32
.LC0:
	.string	"prior parameter's size depends on `%s'"
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC1:
	.string	"aggregate value in COND_EXPR"
	.text
	.align 2
	.p2align 4,,15
.globl expand_expr
	.type	expand_expr,@function
expand_expr:
.LFB6:
	pushq	%r15
.LCFI32:
	movq	%rdi, %r15
	pushq	%r14
.LCFI33:
	movl	%edx, %r14d
	pushq	%r13
.LCFI34:
	movl	%ecx, %r13d
	pushq	%r12
.LCFI35:
	pushq	%rbp
.LCFI36:
	pushq	%rbx
.LCFI37:
	subq	$7640, %rsp
.LCFI38:
	movq	%rsi, 56(%rsp)
	movq	8(%rdi), %rdi
	movq	%rdi, 5424(%rsp)
	movzbl	17(%rdi), %ecx
	shrb	$6, %cl
	movl	%ecx, %edx
	andl	$1, %edx
	testq	%rsi, %rsi
	movl	%edx, 5416(%rsp)
	movzbl	44(%rdi), %eax
	movl	%eax, 5412(%rsp)
	movzbl	16(%r15), %r12d
	je	.L582
	cmpw	$51, (%rsi)
	je	.L15418
.L582:
	xorl	%ebx, %ebx
.L583:
	xorl	%esi, %esi
	movq	56(%rsp), %rbp
	cmpq	const0_rtx(%rip), %rbp
	sete	%sil
	testq	%rbx, %rbx
	movl	%esi, 5408(%rsp)
	je	.L584
	cmpl	$63, 8(%rbx)
	movl	$0, %r8d
	cmovle	%r8, %rbx
.L584:
	xorl	%eax, %eax
	call	preserve_subexpressions_p
	movl	5408(%rsp), %r10d
	testl	%eax, %eax
	movl	$0, %eax
	cmovne	%rax, %rbx
	testl	%r10d, %r10d
	je	.L586
	movq	%rax, 56(%rsp)
	xorl	%ebp, %ebp
.L586:
	movl	cse_not_expected(%rip), %eax
	testl	%eax, %eax
	jne	.L587
	cmpl	$16, 5412(%rsp)
	je	.L587
	cmpq	$0, 56(%rsp)
	je	.L587
	movq	56(%rsp), %rsi
	cmpw	$51, (%rsi)
	je	.L15419
.L588:
	movq	%rbx, 56(%rsp)
	.p2align 4,,7
.L587:
	movl	5408(%rsp), %r9d
	testl	%r9d, %r9d
	je	.L589
	testb	$16, 17(%r15)
	je	.L589
	movl	5412(%rsp), %r11d
	testl	%r11d, %r11d
	je	.L589
	cmpl	$16, 5412(%rsp)
	je	.L589
	movl	5412(%rsp), %edi
	call	gen_reg_rtx
	movl	%r13d, %ecx
	xorl	%edx, %edx
	movq	%rax, 56(%rsp)
	movq	%rax, %rsi
	movq	%r15, %rdi
	xorl	%eax, %eax
	call	expand_expr
	cmpq	56(%rsp), %rax
	je	.L581
	movq	56(%rsp), %rdi
	movq	%rax, %rsi
.L15253:
	call	emit_move_insn
	.p2align 4,,7
.L581:
	movq	56(%rsp), %rax
	addq	$7640, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
	.p2align 6,,7
.L589:
	cmpl	$121, %r12d
	ja	.L13648
	mov	%r12d, %edx
	jmp	*.L13649(,%rdx,8)
	.section	.rodata
	.align 8
	.align 4
.L13649:
	.quad	.L13647
	.quad	.L13648
	.quad	.L13648
	.quad	.L13648
	.quad	.L13648
	.quad	.L13648
	.quad	.L13648
	.quad	.L13648
	.quad	.L13648
	.quad	.L13648
	.quad	.L13648
	.quad	.L13648
	.quad	.L13648
	.quad	.L13648
	.quad	.L13648
	.quad	.L13648
	.quad	.L13648
	.quad	.L13648
	.quad	.L13648
	.quad	.L13648
	.quad	.L13648
	.quad	.L13648
	.quad	.L13648
	.quad	.L13648
	.quad	.L13648
	.quad	.L614
	.quad	.L616
	.quad	.L618
	.quad	.L618
	.quad	.L14867
	.quad	.L592
	.quad	.L615
	.quad	.L13648
	.quad	.L14867
	.quad	.L597
	.quad	.L14867
	.quad	.L13648
	.quad	.L2179
	.quad	.L2179
	.quad	.L2143
	.quad	.L2251
	.quad	.L15283
	.quad	.L2151
	.quad	.L1100
	.quad	.L3780
	.quad	.L10200
	.quad	.L8233
	.quad	.L8226
	.quad	.L3790
	.quad	.L1091
	.quad	.L2270
	.quad	.L13648
	.quad	.L2268
	.quad	.L3228
	.quad	.L3308
	.quad	.L3312
	.quad	.L3384
	.quad	.L3384
	.quad	.L3384
	.quad	.L3384
	.quad	.L3442
	.quad	.L3442
	.quad	.L3442
	.quad	.L3442
	.quad	.L3438
	.quad	.L3384
	.quad	.L3499
	.quad	.L15283
	.quad	.L15283
	.quad	.L15283
	.quad	.L3501
	.quad	.L13648
	.quad	.L3504
	.quad	.L3569
	.quad	.L3569
	.quad	.L3506
	.quad	.L3645
	.quad	.L3655
	.quad	.L3655
	.quad	.L3655
	.quad	.L3655
	.quad	.L3650
	.quad	.L3651
	.quad	.L3648
	.quad	.L13648
	.quad	.L3643
	.quad	.L3721
	.quad	.L3721
	.quad	.L3648
	.quad	.L3650
	.quad	.L3778
	.quad	.L3714
	.quad	.L3714
	.quad	.L3714
	.quad	.L3714
	.quad	.L3714
	.quad	.L3714
	.quad	.L2255
	.quad	.L13648
	.quad	.L13648
	.quad	.L13648
	.quad	.L2276
	.quad	.L2276
	.quad	.L2276
	.quad	.L621
	.quad	.L1098
	.quad	.L13620
	.quad	.L2276
	.quad	.L15283
	.quad	.L13632
	.quad	.L13640
	.quad	.L13638
	.quad	.L13639
	.quad	.L13617
	.quad	.L13617
	.quad	.L13619
	.quad	.L13619
	.quad	.L13648
	.quad	.L13648
	.quad	.L13648
	.quad	.L1089
	.quad	.L1090
	.text
.L592:
	movq	%r15, %rdi
	call	decl_function_context
	cmpq	current_function_decl(%rip), %rax
	movq	%rax, %rbp
	je	.L593
	testq	%rax, %rax
	je	.L593
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	find_function_data
	movq	576(%rax), %rsi
	movq	568(%rax), %rdi
	movq	%rax, %r12
	xorl	%eax, %eax
	call	push_obstacks
	xorl	%eax, %eax
	movq	%r15, %rdi
	call	label_rtx
	movq	400(%r12), %rcx
	xorl	%esi, %esi
	movq	%rax, %rdx
	movl	$2, %edi
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, 400(%r12)
	xorl	%eax, %eax
	call	pop_obstacks
.L594:
	movq	%r15, %rdi
	xorl	%eax, %eax
	call	label_rtx
	movl	$4, %esi
	movl	$56, %edi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	gen_rtx
	movl	$4, %esi
	movl	$55, %edi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	gen_rtx
	cmpq	current_function_decl(%rip), %rbp
	movq	%rax, 56(%rsp)
	je	.L581
	testq	%rbp, %rbp
	je	.L581
	movq	8(%rax), %rbp
	orb	$8, 3(%rbp)
	jmp	.L581
.L593:
	cmpl	$3, %r13d
	jne	.L594
	movq	%r15, %rdi
	xorl	%eax, %eax
	call	label_rtx
	movq	forced_labels(%rip), %rcx
	xorl	%esi, %esi
	movq	%rax, %rdx
	movl	$2, %edi
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, forced_labels(%rip)
	jmp	.L594
	.p2align 6,,7
.L13647:
	movq	const0_rtx(%rip), %rsi
	movq	%rsi, 56(%rsp)
	jmp	.L581
.L614:
	movl	24(%r15), %edi
	movl	28(%r15), %esi
	movl	5412(%rsp), %edx
	call	immed_double_const
	.p2align 4,,7
.L13703:
	movq	%rax, 56(%rsp)
	jmp	.L581
.L616:
	movq	%r15, %rdi
	xorl	%eax, %eax
	call	immed_real_const
	jmp	.L13703
.L618:
	movq	24(%r15), %rax
	testq	%rax, %rax
	je	.L15420
.L619:
	cmpw	$55, (%rax)
	jne	.L13703
	cmpl	$2, %r13d
	je	.L13703
	cmpl	$3, %r13d
	je	.L13703
	decl	%r13d
	je	.L13703
	movq	8(%rax), %rsi
	movl	5412(%rsp), %edi
	xorl	%eax, %eax
	call	memory_address_p
	testl	%eax, %eax
	je	.L15421
	movq	24(%r15), %rax
	jmp	.L13703
.L15421:
	movq	24(%r15), %rcx
	movq	8(%rcx), %rdi
	call	copy_rtx
	movq	24(%r15), %rdi
.L15409:
	xorl	%esi, %esi
.L15285:
	movq	%rax, %rdx
.L15265:
	xorl	%eax, %eax
	call	change_address
	jmp	.L13703
.L15420:
	movq	%r15, %rdi
	xorl	%eax, %eax
	call	output_constant_def
	movq	24(%r15), %rax
	jmp	.L619
.L615:
	movq	88(%r15), %rdi
	movq	56(%rsp), %rsi
.L15404:
	xorl	%edx, %edx
	xorl	%ecx, %ecx
.L15279:
	xorl	%eax, %eax
	call	expand_expr
	jmp	.L13703
.L597:
	cmpq	$0, 120(%r15)
	je	.L15422
.L602:
	orb	$1, 18(%r15)
	movq	%r15, %rdi
	call	decl_function_context
	testq	%rax, %rax
	je	.L14870
	cmpq	current_function_decl(%rip), %rax
	je	.L14870
	cmpq	inline_function_decl(%rip), %rax
	je	.L14870
	movq	120(%r15), %rcx
	cmpw	$55, (%rcx)
	je	.L15423
.L604:
	orb	$2, 53(%r15)
	xorl	%eax, %eax
	movq	%r15, %rdi
	call	mark_addressable
	movq	120(%r15), %rax
	cmpw	$55, (%rax)
	jne	.L15283
	movq	8(%rax), %rdi
	cmpw	$55, (%rdi)
	je	.L15424
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	fix_lexical_addr
.L607:
	movq	120(%r15), %rdi
.L15408:
	movl	5412(%rsp), %esi
	jmp	.L15285
.L15424:
	movq	8(%rdi), %rdi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	fix_lexical_addr
	movl	$4, %esi
	movl	$55, %edi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	gen_rtx
	jmp	.L607
.L15423:
	movq	8(%rcx), %rdi
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L603
	cmpw	$46, %dx
	je	.L603
	cmpw	$47, %dx
	je	.L603
	cmpw	$49, %dx
	je	.L603
	cmpw	$113, %dx
	jne	.L604
.L603:
	cmpw	$55, (%rcx)
	je	.L15425
.L608:
	cmpw	$55, (%rcx)
	je	.L15426
.L609:
	cmpw	$51, (%rcx)
	je	.L15427
.L3218:
	movq	%rcx, 56(%rsp)
	jmp	.L581
.L15427:
	movzbl	2(%rcx), %edx
	cmpl	5412(%rsp), %edx
	je	.L3218
	movzbl	52(%r15), %r9d
	cmpl	%edx, %r9d
	jne	.L15283
	movl	5412(%rsp), %esi
	movl	$53, %edi
	movq	%rcx, %rdx
.L15259:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	gen_rtx
	movzbl	5416(%rsp), %edi
	movq	%rax, 56(%rsp)
	movzbl	3(%rax), %r8d
	salb	$2, %dil
	orb	$16, %r8b
	andb	$-5, %r8b
	orb	%dil, %r8b
	movb	%r8b, 3(%rax)
	jmp	.L581
.L15426:
	cmpl	$2, %r13d
	je	.L609
	cmpl	$1, %r13d
	je	.L609
	cmpl	$3, %r13d
	je	.L609
	movzbl	52(%r15), %edi
	movq	8(%rcx), %rsi
	xorl	%eax, %eax
	call	memory_address_p
	testl	%eax, %eax
	je	.L14871
	movl	flag_force_addr(%rip), %esi
	testl	%esi, %esi
	je	.L14872
	movq	120(%r15), %rcx
	movq	8(%rcx), %r10
	movzwl	(%r10), %edx
	leal	-56(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L611
	cmpw	$46, %dx
	je	.L611
	cmpw	$47, %dx
	je	.L611
	cmpw	$49, %dx
	je	.L611
	cmpw	$113, %dx
	jne	.L609
.L611:
	movq	8(%rcx), %rdi
	call	copy_rtx
	movq	120(%r15), %rdi
	jmp	.L15409
.L14872:
	movq	120(%r15), %rcx
	jmp	.L609
.L14871:
	movq	120(%r15), %rcx
	jmp	.L611
.L15425:
	movq	8(%rcx), %rdx
	cmpw	$51, (%rdx)
	jne	.L608
	movzbl	2(%rcx), %esi
	movq	%rcx, %rdi
	jmp	.L15265
	.p2align 6,,7
.L14870:
	movq	120(%r15), %rcx
	jmp	.L603
.L15422:
	movq	%r15, %rdi
	movl	$.LC0, %esi
	xorl	%eax, %eax
	call	error_with_decl
	movslq	5412(%rsp),%r14
	movq	const_tiny_rtx(,%r14,8), %rax
	jmp	.L13703
.L14867:
	cmpq	$0, 120(%r15)
	jne	.L602
	jmp	.L15283
	.p2align 6,,7
.L2179:
	cmpl	$42, %r12d
	je	.L2180
	movq	32(%r15), %rax
	cmpb	$43, 16(%rax)
	je	.L15428
.L2180:
	movl	$0, 5560(%rsp)
	movl	$0, 2096(%rsp)
	xorl	%edx, %edx
	movzbl	16(%r15), %eax
	xorl	%ebp, %ebp
	leaq	5576(%rsp), %r12
	cmpb	$37, %al
	je	.L15429
	cmpb	$38, %al
	je	.L15430
	movq	8(%r15), %r9
	movzbl	44(%r9), %ecx
	movl	%ecx, 2096(%rsp)
	movslq	2096(%rsp),%r10
	movl	mode_size(,%r10,4), %eax
	sall	$3, %eax
	movl	%eax, 5580(%rsp)
	movq	8(%r15), %rdi
	movzbl	17(%rdi), %r8d
	shrb	$6, %r8b
	movl	%r8d, %r11d
	andl	$1, %r11d
	movl	%r11d, 5420(%rsp)
.L2189:
	testq	%rdx, %rdx
	je	.L2192
	cmpb	$25, 16(%rdx)
	je	.L2193
	movl	$16, 2096(%rsp)
	movl	$-1, 5580(%rsp)
.L2192:
	movl	$0, (%r12)
	.p2align 4,,7
.L2220:
	movzbl	16(%r15), %edx
	cmpb	$39, %dl
	je	.L15431
.L2198:
	leal	-37(%rdx), %ebx
	cmpb	$1, %bl
	ja	.L2199
	cmpb	$37, %dl
	je	.L15432
	movq	48(%r15), %rbx
.L2201:
	movzbl	16(%rbx), %eax
	cmpb	$53, %al
	je	.L15433
	cmpb	$25, %al
	je	.L15434
.L2210:
	testq	%rbp, %rbp
	je	.L2212
	movl	$8, %edi
	call	size_int
	movq	%rbx, %rsi
	movl	$58, %edi
	movq	%rax, %rdx
	call	size_binop
	movq	%rbp, %rsi
	movl	$53, %edi
.L15024:
	movq	%rax, %rdx
	call	size_binop
	movq	%rax, %rbp
.L2214:
	testb	$16, 17(%r15)
	je	.L2219
	movl	$1, 5560(%rsp)
.L2219:
	movq	32(%r15), %r15
	jmp	.L2220
	.p2align 6,,7
.L2212:
	movl	$8, %edi
	call	size_int
	movq	%rbx, %rsi
	movl	$58, %edi
	jmp	.L15024
.L15434:
	movl	24(%rbx), %eax
.L15025:
	addl	%eax, (%r12)
	jmp	.L2214
.L15433:
	movq	32(%rbx), %rsi
	cmpb	$25, 16(%rsi)
	je	.L15435
	movq	40(%rbx), %rax
	cmpb	$25, 16(%rax)
	jne	.L15283
	movq	%rsi, %rbx
.L2204:
	movl	24(%rax), %eax
	addl	%eax, (%r12)
	jmp	.L2210
.L15435:
	movq	40(%rbx), %rbx
	movq	%rsi, %rax
	jmp	.L2204
.L15432:
	movq	40(%r15), %rdx
	movq	72(%rdx), %rbx
	jmp	.L2201
	.p2align 6,,7
.L2199:
	cmpb	$42, %dl
	je	.L15436
.L2215:
	cmpb	$103, %dl
	je	.L2214
	leal	-101(%rdx), %r11d
	cmpb	$1, %r11b
	ja	.L2196
	movq	32(%r15), %rcx
	movq	8(%r15), %rdi
	movq	8(%rcx), %r10
	movzbl	44(%r10), %r8d
	cmpb	%r8b, 44(%rdi)
	je	.L2214
.L2196:
	movl	2096(%rsp), %eax
	testl	%eax, %eax
	jne	.L2221
	movl	(%r12), %eax
	movl	5580(%rsp), %edi
	cltd
	idivl	%edi
	testl	%edx, %edx
	movl	%edx, %ebx
	je	.L15437
.L2221:
	movl	2096(%rsp), %eax
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%r15, %rdi
	movl	$1, %ecx
	movq	%rbp, 5568(%rsp)
	movl	%eax, 5564(%rsp)
	xorl	%eax, %eax
	call	expand_expr
	movzwl	(%rax), %edx
	movq	%rax, %rbx
	leal	-56(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L2225
	cmpw	$46, %dx
	je	.L2225
	cmpw	$47, %dx
	je	.L2225
	cmpw	$49, %dx
	je	.L2225
	cmpw	$113, %dx
	je	.L2225
.L2224:
	movq	5568(%rsp), %rdi
	testq	%rdi, %rdi
	jne	.L15438
.L2229:
	cmpw	$55, (%rbx)
	je	.L15439
.L2231:
	movl	5564(%rsp), %eax
	testl	%eax, %eax
	je	.L2233
	cmpl	$16, %eax
	je	.L2234
	cltq
	cmpb	$0, direct_load(%rax)
	jne	.L2234
	cmpl	$2, %r13d
	je	.L2234
	cmpl	$1, %r13d
	je	.L2234
	cmpl	$3, %r13d
	je	.L2234
.L2233:
	movl	5412(%rsp), %ebp
	cmpl	$16, %ebp
	je	.L15440
.L2236:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	validize_mem
	movq	8(%r15), %rdi
	movq	%rax, %r13
	call	int_size_in_bytes
	movl	%ebp, %r9d
	movq	56(%rsp), %r8
	movl	%ebp, (%rsp)
	movl	5580(%rsp), %esi
	movl	5576(%rsp), %edx
	movq	8(%r15), %r14
	movl	5420(%rsp), %ecx
	movq	%r13, %rdi
	movl	48(%r14), %r15d
	movl	%eax, 16(%rsp)
	xorl	%eax, %eax
	shrl	$3, %r15d
	movl	%r15d, 8(%rsp)
	call	extract_bit_field
	cmpl	$16, 5412(%rsp)
	movq	%rax, 56(%rsp)
	jne	.L581
	movl	5580(%rsp), %esi
	movl	%ebp, %edi
	cmpl	$-1, %esi
	leal	7(%rsi), %ebx
	cmovle	%ebx, %esi
	xorl	%edx, %edx
	sarl	$3, %esi
	call	assign_stack_temp
	movq	56(%rsp), %rsi
	movq	%rax, %r12
	movq	%rax, %rdi
	call	emit_move_insn
	movq	%r12, %rdi
	call	copy_rtx
	movq	%rax, 56(%rsp)
	movb	$16, 2(%rax)
	jmp	.L581
.L15440:
	movl	5580(%rsp), %edi
	xorl	%eax, %eax
	movl	$1, %esi
	movl	$1, %edx
	call	mode_for_size
	cmpl	$16, %eax
	movl	%eax, %ebp
	jne	.L2236
	jmp	.L15283
	.p2align 6,,7
.L2234:
	movzwl	(%rbx), %eax
	cmpw	$51, %ax
	je	.L2233
	cmpw	$53, %ax
	je	.L2233
	leal	-1(%r13), %edx
	cmpl	$2, %edx
	ja	.L2240
	movl	5576(%rsp), %esi
	movq	8(%rbx), %rdi
	cmpl	$-1, %esi
	leal	7(%rsi), %r11d
	cmovle	%r11d, %esi
	sarl	$3, %esi
	call	plus_constant_wide
	movl	$55, %edi
	movl	5564(%rsp), %esi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	gen_rtx
.L15027:
	movzbl	3(%rax), %esi
	movq	%rax, %rbx
	orb	$16, %sil
	movl	%esi, %edi
	movb	%sil, 3(%rax)
	andb	$-9, %sil
	shrb	$3, %dil
	andl	$1, %edi
	orl	5560(%rsp), %edi
	andb	$1, %dil
	salb	$3, %dil
	orb	%dil, %sil
	movb	%sil, 3(%rax)
	movl	5564(%rsp), %eax
	cmpl	%eax, 5412(%rsp)
	je	.L15258
	cmpl	$16, %eax
	je	.L15258
	cmpl	%r14d, %eax
	je	.L15258
	cmpq	$0, 56(%rsp)
	je	.L15441
.L2248:
	movq	56(%rsp), %rdi
	movl	5420(%rsp), %edx
	movq	%rbx, %rsi
.L15250:
	xorl	%eax, %eax
	call	convert_move
	jmp	.L581
.L15441:
	testl	%r14d, %r14d
	cmove	5412(%rsp), %r14d
	movl	%r14d, %edi
	movl	%r14d, 5412(%rsp)
	call	gen_reg_rtx
	movq	%rax, 56(%rsp)
	jmp	.L2248
	.p2align 6,,7
.L15258:
	movq	%rbx, 56(%rsp)
	jmp	.L581
.L2240:
	movl	5576(%rsp), %esi
	movq	8(%rbx), %rdi
	cmpl	$-1, %esi
	leal	7(%rsi), %r8d
	cmovle	%r8d, %esi
	sarl	$3, %esi
	call	plus_constant_wide
	movq	%rbx, %rdi
	movl	5564(%rsp), %esi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15027
.L15439:
	movl	5560(%rsp), %r9d
	testl	%r9d, %r9d
	je	.L2231
	testb	$8, 3(%rbx)
	jne	.L2231
	movq	%rbx, %rdi
	call	copy_rtx
	movq	%rax, %rbx
	orb	$8, 3(%rax)
	jmp	.L2231
.L15438:
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	cmpw	$55, (%rbx)
	movq	%rax, %rsi
	jne	.L15283
	movl	$4, %edi
	call	force_reg
	movq	8(%rbx), %rdx
	movl	$4, %esi
	movq	%rax, %rcx
	movl	$63, %edi
	xorl	%eax, %eax
	call	gen_rtx
	xorl	%esi, %esi
	movq	%rbx, %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	movq	%rax, %rbx
	jmp	.L2229
.L2225:
	movq	8(%r15), %rbp
	cmpw	$47, %dx
	movzbl	44(%rbp), %edi
	je	.L15442
.L2227:
	movq	%rbx, %rsi
	call	force_reg
.L15026:
	movq	%rax, %rbx
	jmp	.L2224
.L15442:
	cmpb	$0, 2(%rbx)
	je	.L2227
	movq	%rbx, %rsi
	call	force_const_mem
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	validize_mem
	jmp	.L15026
.L15437:
	xorl	%edx, %edx
	xorl	%eax, %eax
	movl	$1, %esi
	call	mode_for_size
	cmpl	$16, %eax
	cmovne	%eax, %ebx
	movl	%ebx, 2096(%rsp)
	jmp	.L2221
	.p2align 6,,7
.L15436:
	movq	40(%r15), %rcx
	cmpb	$25, 16(%rcx)
	jne	.L2215
	movq	8(%r15), %rsi
	movq	32(%rsi), %rax
	cmpb	$25, 16(%rax)
	jne	.L2215
	movl	24(%rax), %eax
	imull	24(%rcx), %eax
	jmp	.L15025
	.p2align 6,,7
.L15431:
	movl	flag_volatile(%rip), %eax
	testl	%eax, %eax
	je	.L2198
	movl	$1, 5560(%rsp)
	movzbl	16(%r15), %edx
	jmp	.L2198
.L2193:
	movl	24(%rdx), %eax
	movl	%eax, 5580(%rsp)
	jmp	.L2192
.L15430:
	movzbl	17(%r15), %esi
	movq	40(%r15), %rdx
	shrb	$6, %sil
	movl	%esi, %ebx
	andl	$1, %ebx
	movl	%ebx, 5420(%rsp)
	jmp	.L2189
.L15429:
	movq	40(%r15), %rax
	testb	$16, 53(%rax)
	movq	40(%rax), %rdx
	jne	.L2188
	movzbl	52(%rax), %r10d
	movl	%r10d, 2096(%rsp)
.L2188:
	movzbl	17(%rax), %r9d
	shrb	$6, %r9b
	movl	%r9d, %ecx
	andl	$1, %ecx
	movl	%ecx, 5420(%rsp)
	jmp	.L2189
.L15428:
	movq	40(%rax), %rax
	testq	%rax, %rax
	je	.L2180
	movq	40(%r15), %r8
.L2186:
	cmpq	%r8, 24(%rax)
	je	.L14914
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L2186
	jmp	.L2180
.L14914:
	movq	32(%rax), %rdi
.L15405:
	movq	56(%rsp), %rsi
	movl	%r14d, %edx
.L15403:
	movl	%r13d, %ecx
	jmp	.L15279
.L2143:
	movq	32(%r15), %rbx
	cmpb	$104, 16(%rbx)
	je	.L15443
.L2144:
	movq	%rbx, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$1, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movl	5412(%rsp), %edi
	movq	%rax, %rsi
	call	memory_address
.L2145:
	movl	5412(%rsp), %esi
	movq	%rax, %rdx
	movl	$55, %edi
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, 56(%rsp)
	movq	32(%r15), %rdx
	movzbl	16(%rdx), %eax
	cmpb	$53, %al
	je	.L2147
	cmpb	$104, %al
	je	.L15444
.L2148:
	movq	8(%r15), %r8
	movzbl	16(%r8), %eax
	cmpb	$18, %al
	je	.L2147
	cmpb	$21, %al
	je	.L2147
	cmpb	$22, %al
	je	.L2147
	cmpb	$106, 16(%rbx)
	je	.L15445
.L15417:
	xorl	%eax, %eax
	testb	$16, 17(%r15)
	jne	.L2253
	movl	flag_volatile(%rip), %r10d
	testl	%r10d, %r10d
	je	.L2252
.L2253:
	movl	$1, %eax
.L2252:
	movq	56(%rsp), %rcx
	leal	0(,%rax,8), %r9d
	movzbl	3(%rcx), %ebp
	andb	$-9, %bpl
	orb	%r9b, %bpl
	movb	%bpl, 3(%rcx)
	jmp	.L581
.L15445:
	movq	32(%rbx), %rax
	testq	%rax, %rax
	je	.L15417
	movq	8(%rax), %rdi
	movzbl	16(%rdi), %eax
	cmpb	$18, %al
	je	.L2147
	cmpb	$21, %al
	je	.L2147
	cmpb	$22, %al
	jne	.L15417
.L2147:
	movq	56(%rsp), %rax
	orb	$16, 3(%rax)
	jmp	.L15417
.L15444:
	movq	32(%rdx), %rcx
	cmpb	$53, 16(%rcx)
	jne	.L2148
	jmp	.L2147
.L15443:
	cmpq	$0, 48(%rbx)
	jne	.L2144
	movq	32(%rbx), %rdi
	cmpb	$0, 16(%rdi)
	je	.L2144
	movq	8(%rbx), %rsi
	cmpb	$4, 44(%rsi)
	jne	.L2144
	movq	8(%rdi), %r11
	cmpb	$4, 44(%r11)
	jne	.L2144
	xorl	%edx, %edx
	movl	$1, %ecx
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movl	5412(%rsp), %edi
	movq	%rax, %rsi
	call	memory_address
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	copy_all_regs
	movq	%rax, 48(%rbx)
	jmp	.L2145
	.p2align 6,,7
.L2251:
	movq	32(%r15), %rsi
	movl	$106, %edi
	xorl	%edx, %edx
	call	build_unary_op
	movq	40(%r15), %rcx
	movq	5424(%rsp), %rsi
	movq	%rax, %rdx
	movl	$53, %edi
	xorl	%eax, %eax
	call	build
	movl	$1, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movl	5412(%rsp), %edi
	movq	%rax, %rsi
	call	memory_address
	movl	5412(%rsp), %esi
	movl	$55, %edi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, 56(%rsp)
	orb	$16, 3(%rax)
	jmp	.L15417
.L2151:
	movq	40(%r15), %r8
	cmpb	$25, 16(%r8)
	je	.L15446
.L2153:
	movzbl	17(%r15), %edx
	movq	5424(%rsp), %rdi
	movl	%edx, %r9d
	shrb	$4, %dl
	shrb	$5, %r9b
	andl	$1, %edx
	movl	%r9d, %esi
	andl	$1, %esi
	call	build_type_variant
	movq	%rax, %rdi
	movq	%rax, %r12
	call	build_pointer_type
	movq	32(%r15), %rdx
	movl	$106, %edi
	movq	%rax, %rsi
	call	build1
	movq	40(%r15), %rbx
	movq	%rax, %rbp
	movq	8(%rbx), %r10
	cmpb	$32, 45(%r10)
	je	.L2154
	movl	$32, %edi
	xorl	%esi, %esi
	call	type_for_size
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	convert
	movq	%rax, %rbx
.L2154:
	andb	$-2, 17(%rbp)
	movq	5424(%rsp), %rdi
	call	size_in_bytes
	movq	%rbx, %rdx
	movq	56(%r12), %rsi
	movq	%rax, %rcx
	movl	$55, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	movq	%rbp, %rdx
	movq	56(%r12), %rsi
	movq	%rax, %rcx
	movl	$53, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	movq	5424(%rsp), %rsi
	movl	$39, %edi
	movq	%rax, %rdx
	call	build1
	movzbl	17(%r15), %r11d
	movzbl	17(%rax), %ebx
	movq	%rax, %rdi
	andb	$1, %r11b
	andb	$-2, %bl
	orb	%r11b, %bl
	movb	%bl, 17(%rax)
	andb	$-17, %bl
	movzbl	17(%r15), %esi
	andb	$16, %sil
	orb	%sil, %bl
	movb	%bl, 17(%rax)
	andb	$-33, %bl
	movzbl	17(%r15), %r12d
	andb	$32, %r12b
	orb	%r12b, %bl
	movb	%bl, 17(%rax)
	jmp	.L15405
.L15446:
	movq	5424(%rsp), %rdx
	movq	32(%rdx), %rbp
	cmpb	$25, 16(%rbp)
	jne	.L2153
	movq	32(%r15), %rbp
	cmpb	$28, 16(%rbp)
	movq	%rbp, %rcx
	je	.L15447
.L2155:
	movzwl	16(%rcx), %eax
	andl	$511, %eax
	cmpw	$43, %ax
	je	.L15448
	movzbl	17(%rcx), %ebx
	andb	$33, %bl
	cmpb	$32, %bl
	jne	.L2179
	movq	8(%rcx), %rsi
	cmpb	$18, 16(%rsi)
	jne	.L2179
	cmpb	$33, 16(%rcx)
	jne	.L2179
	movq	88(%rcx), %rax
	testq	%rax, %rax
	je	.L2179
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	jle	.L2179
	cmpb	$0, 16(%rax)
	je	.L2179
	movq	40(%r15), %rdi
	call	fold
	cmpb	$25, 16(%rax)
	jne	.L2179
	movl	28(%rax), %r8d
	testl	%r8d, %r8d
	jne	.L2179
	movq	32(%r15), %rdi
	movl	24(%rax), %ecx
	movq	88(%rdi), %rdx
	movzbl	16(%rdx), %eax
	cmpb	$43, %al
	je	.L15449
	cmpb	$28, %al
	jne	.L2179
	cmpl	32(%rdx), %ecx
	jge	.L2179
	movslq	%ecx,%r14
	movl	$46, %edi
	xorl	%esi, %esi
	addq	40(%rdx), %r14
	xorl	%eax, %eax
	movsbl	(%r14),%edx
	call	gen_rtx
	xorl	%edx, %edx
	movl	5412(%rsp), %edi
	movq	%rax, %rsi
.L15271:
	xorl	%eax, %eax
	call	convert_to_mode
	jmp	.L13703
.L15449:
	movq	40(%rdx), %rdx
	testq	%rdx, %rdx
	je	.L2179
	leal	-1(%rcx), %eax
	cmpl	$-1, %eax
	je	.L2171
.L2174:
	movq	(%rdx), %rdx
	testq	%rdx, %rdx
	je	.L2179
	decl	%eax
	cmpl	$-1, %eax
	jne	.L2174
.L2171:
	testq	%rdx, %rdx
	je	.L2179
	movq	32(%rdx), %rdi
	call	fold
.L15407:
	movq	%rax, %rdi
	jmp	.L15405
	.p2align 6,,7
.L15448:
	movq	40(%r15), %rdi
	call	fold
	cmpb	$25, 16(%rax)
	jne	.L2179
	movl	28(%rax), %ebp
	testl	%ebp, %ebp
	jne	.L2179
	movq	32(%r15), %r9
	movl	24(%rax), %ecx
	movq	40(%r9), %rdx
	testq	%rdx, %rdx
	je	.L2179
	leal	-1(%rcx), %eax
	cmpl	$-1, %eax
	je	.L2171
.L2164:
	movq	(%rdx), %rdx
	testq	%rdx, %rdx
	je	.L2179
	decl	%eax
	cmpl	$-1, %eax
	jne	.L2164
	jmp	.L2171
	.p2align 6,,7
.L15447:
	movl	28(%r8), %eax
	testl	%eax, %eax
	jne	.L2155
	movl	24(%r8), %edx
	cmpl	32(%rbp), %edx
	jge	.L2155
	movq	8(%rbp), %r8
	movq	8(%r8), %rax
	cmpq	integer_type_node(%rip), %rax
	je	.L15450
	cmpq	char_type_node(%rip), %rax
	jne	.L2155
	movslq	%edx,%r10
	xorl	%esi, %esi
	addq	40(%rbp), %r10
	movsbl	(%r10),%edi
	call	build_int_2_wide
	movq	integer_type_node(%rip), %rdi
	movq	%rax, %rsi
	movq	%rdi, 8(%rax)
	movq	8(%rbp), %rdx
	movq	8(%rdx), %rdi
	call	convert
	jmp	.L15407
.L15450:
	movslq	%edx,%rcx
	xorl	%esi, %esi
	salq	$2, %rcx
	addq	40(%rbp), %rcx
	movl	(%rcx), %edi
	call	build_int_2_wide
	movq	integer_type_node(%rip), %r15
	movq	%rax, %rdi
	movq	%r15, 8(%rax)
	jmp	.L15405
	.p2align 6,,7
.L1100:
	testb	$4, 18(%r15)
	je	.L1101
	cmpl	$16, 5412(%rsp)
	je	.L1102
	testb	$8, 17(%r15)
	je	.L1101
.L1102:
	xorl	%eax, %eax
	movq	%r15, %rdi
	call	output_constant_def
	leal	-1(%r13), %ecx
	cmpl	$2, %ecx
	movq	%rax, 56(%rsp)
	jbe	.L581
	movq	56(%rsp), %rax
	movzbl	2(%rax), %edi
	movq	8(%rax), %rsi
	xorl	%eax, %eax
	call	memory_address_p
	testl	%eax, %eax
	jne	.L581
	movq	56(%rsp), %rdi
	xorl	%esi, %esi
	movq	8(%rdi), %rdx
	jmp	.L15265
	.p2align 6,,7
.L1101:
	movl	5408(%rsp), %eax
	testl	%eax, %eax
	je	.L1104
	movq	40(%r15), %rbx
	testq	%rbx, %rbx
	jne	.L1109
.L13752:
	movq	const0_rtx(%rip), %rbx
	jmp	.L15258
.L1109:
	movq	32(%rbx), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1109
	jmp	.L13752
.L1104:
	cmpq	$0, 56(%rsp)
	je	.L1112
	movq	56(%rsp), %rbp
	xorl	%r12d, %r12d
	movl	(%rbp), %eax
	cmpw	$53, %ax
	je	.L15451
	movl	%eax, %ecx
.L1115:
	cmpw	$55, %cx
	je	.L15452
.L1117:
	movzbl	16(%r15), %edx
	movzbl	%dl, %r14d 
	salq	$3, %r14
	addq	tree_code_type(%rip), %r14
	movq	(%r14), %rsi
	movsbl	(%rsi),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L1119
	mov	%eax, %r13d
	jmp	*.L1158(,%r13,8)
	.section	.rodata
	.align 8
	.align 4
.L1158:
	.quad	.L1128
	.quad	.L1130
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1130
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1164
	.quad	.L1120
	.quad	.L1133
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1133
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1119
	.quad	.L1122
	.text
.L1120:
	movq	120(%r15), %r12
.L1119:
	movl	$1, %ebx
.L15005:
	testq	%r12, %r12
	je	.L1114
.L14852:
	cmpw	$53, (%r12)
	je	.L15453
.L1161:
	xorl	%eax, %eax
	movq	%rbp, %rdi
	movq	%r12, %rsi
	call	rtx_equal_p
	xorl	%ebx, %ebx
	testl	%eax, %eax
	jne	.L1114
	cmpw	$55, (%rbp)
	je	.L15454
.L1164:
	movl	$1, %ebx
.L1114:
	testl	%ebx, %ebx
	jne	.L1111
.L1112:
	cmpl	$16, 5412(%rsp)
	je	.L1165
	testb	$8, 17(%r15)
	je	.L15455
.L1165:
	movq	5424(%rsp), %rdi
	call	int_size_in_bytes
	xorl	%edx, %edx
	movl	5412(%rsp), %edi
	movl	%eax, %esi
	call	assign_stack_temp
	cmpq	$0, 56(%rsp)
	movq	%rax, %r10
	je	.L1167
	movq	56(%rsp), %r9
	movzbl	3(%rax), %ebp
	movzbl	3(%r9), %r12d
	andb	$-17, %bpl
	andb	$16, %r12b
	orb	%r12b, %bpl
	movb	%bpl, 3(%rax)
.L1167:
	movq	%r10, 56(%rsp)
.L1111:
	movq	8(%r15), %r11
	movq	%r11, 5256(%rsp)
	movzbl	16(%r11), %edx
	leal	-21(%rdx), %edi
	cmpb	$1, %dil
	ja	.L1168
	cmpb	$22, %dl
	je	.L1173
	movq	56(%rsp), %rax
	cmpw	$51, (%rax)
	je	.L15456
.L1171:
	movq	40(%r15), %rdi
	call	list_length
	movq	5256(%rsp), %rcx
	movl	%eax, %r14d
	movq	24(%rcx), %rdi
	call	list_length
	cmpl	%eax, %r14d
	je	.L1173
	movq	5256(%rsp), %rdi
	call	int_size_in_bytes
	movq	56(%rsp), %r10
	cmpb	$16, 2(%r10)
	je	.L15457
	movq	56(%rsp), %rdi
.L15007:
	movq	const0_rtx(%rip), %rsi
	call	emit_move_insn
.L1170:
	movq	40(%r15), %r13
	testq	%r13, %r13
	movq	%r13, 2248(%rsp)
	je	.L581
.L1656:
	movq	2248(%rsp), %r15
	movq	24(%r15), %rdx
	testq	%rdx, %rdx
	je	.L1180
	movq	40(%rdx), %rbx
	testb	$16, 53(%rdx)
	movl	$0, %eax
	movl	24(%rbx), %ebp
	movzbl	52(%rdx), %ebx
	cmovne	%eax, %ebx
	movq	72(%rdx), %rax
	cmpb	$25, 16(%rax)
	jne	.L15283
	movq	2248(%rsp), %r12
	movq	5256(%rsp), %rdx
	movl	24(%rax), %r14d
	movq	32(%r12), %r8
	movq	%rdx, %rdi
	movq	%r8, 5248(%rsp)
	movl	48(%rdx), %r12d
	call	int_size_in_bytes
	movl	%eax, %r15d
	movl	$0, 2244(%rsp)
	shrl	$3, %r12d
	cmpl	$31, %ebp
	jg	.L1185
	movl	$1, %eax
	movl	%ebp, %ecx
	sall	%cl, %eax
	decl	%eax
	movl	%eax, 2244(%rsp)
.L1185:
	cmpl	$16, %ebx
	je	.L15458
.L1186:
	testl	%ebx, %ebx
	je	.L1191
	cmpl	$16, %ebx
	je	.L1192
	movslq	%ebx,%r10
	cmpb	$0, direct_store(%r10)
	je	.L1191
.L1192:
	movq	56(%rsp), %rsi
	movzwl	(%rsi), %eax
	cmpw	$51, %ax
	je	.L1191
	cmpw	$53, %ax
	je	.L1191
	movq	56(%rsp), %r12
	xorl	%r13d, %r13d
	testl	%r13d, %r13d
	movq	8(%r12), %rdi
	je	.L1198
	movzwl	(%rdi), %edx
	cmpw	$51, %dx
	je	.L1198
	leal	-56(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L1198
	cmpw	$46, %dx
	je	.L1198
	cmpw	$47, %dx
	je	.L1198
	cmpw	$49, %dx
	je	.L1198
	cmpw	$113, %dx
	je	.L1198
	cmpw	$63, %dx
	je	.L15459
.L1199:
	xorl	%eax, %eax
	call	copy_to_reg
	movq	%rax, %rdi
.L1198:
	cmpl	$-1, %r14d
	leal	7(%r14), %r11d
	cmovle	%r11d, %r14d
	sarl	$3, %r14d
	movl	%r14d, %esi
	call	plus_constant_wide
	movl	%ebx, %esi
	movq	56(%rsp), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	xorl	%edx, %edx
	orb	$16, 3(%rax)
	movq	%rax, %r12
	testl	%edx, %edx
	movq	5248(%rsp), %rcx
	setne	%dil
	xorl	%r14d, %r14d
	movzbl	16(%rcx), %eax
	movzbl	%dil, %ebp
	cmpb	$44, %al
	je	.L15460
	cmpb	$48, %al
	je	.L15461
.L1210:
	testl	%ebp, %ebp
	je	.L1237
	cmpw	$55, (%r12)
	je	.L15462
.L1237:
	movzwl	(%r12), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L1245
	mov	%eax, %r8d
	jmp	*.L1254(,%r8,8)
	.section	.rodata
	.align 8
	.align 4
.L1254:
	.quad	.L1248
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1253
	.quad	.L1245
	.quad	.L1245
	.quad	.L1245
	.quad	.L1251
	.quad	.L1251
	.quad	.L1245
	.quad	.L1251
	.text
.L1248:
	movq	8(%r12), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %ebx
.L1247:
	testl	%ebx, %ebx
	je	.L1244
	movzbl	2(%r12), %eax
	cmpb	$16, %al
	je	.L1256
	testb	%al, %al
	jne	.L15463
.L1256:
	movzbl	2(%r12), %edx
	movq	5248(%rsp), %rdi
	xorl	%esi, %esi
.L15008:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L15289:
	movq	%rax, %r13
.L1263:
	movl	$1, %r14d
.L1209:
	cmpq	%r12, %r13
	je	.L1180
	movq	5248(%rsp), %rdi
	cmpb	$0, 16(%rdi)
	je	.L1180
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L1265
	cmpl	$55, %eax
	je	.L15464
.L1269:
	cmpl	$63, %eax
	je	.L1272
	cmpl	$66, %eax
	je	.L1272
.L1268:
	movzbl	2(%r13), %eax
	movzbl	2(%r12), %ecx
	cmpb	%cl, %al
	je	.L1275
	testb	%al, %al
	je	.L1275
	movq	5248(%rsp), %rax
	movq	8(%rax), %rsi
	movzbl	17(%rsi), %r10d
	shrb	$6, %r10b
	movl	%r10d, %edx
	andl	$1, %edx
	testl	%r14d, %r14d
	je	.L1276
	movzbl	%cl, %edi
	movq	%r13, %rsi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%r12, %rdi
	movq	%rax, %rsi
.L15014:
	call	emit_move_insn
.L1180:
	movq	2248(%rsp), %rcx
	movq	(%rcx), %r13
	testq	%r13, %r13
	movq	%r13, 2248(%rsp)
	jne	.L1656
	jmp	.L581
.L1276:
	movq	%r12, %rdi
	movq	%r13, %rsi
.L15015:
	xorl	%eax, %eax
	call	convert_move
	jmp	.L1180
.L1275:
	cmpb	$16, %al
	je	.L15465
.L1531:
	movq	%r12, %rdi
	movq	%r13, %rsi
	jmp	.L15014
.L15465:
	movq	5248(%rsp), %rsi
	cmpb	$28, 16(%rsi)
	je	.L15466
	cmpb	$16, %al
	jne	.L1531
	movq	5248(%rsp), %rdi
	xorl	%eax, %eax
	call	expr_size
	movq	5248(%rsp), %r9
	movq	%rax, %r14
	movq	8(%r9), %rsi
	movl	48(%rsi), %r15d
	shrl	$3, %r15d
	cmpb	$16, 2(%r12)
	jne	.L15283
	cmpb	$16, 2(%r13)
	jne	.L15283
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L1534
	cmpl	$55, %eax
	je	.L15467
.L1538:
	cmpl	$63, %eax
	je	.L1541
	cmpl	$66, %eax
	je	.L1541
.L1537:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L1544
	cmpl	$55, %eax
	je	.L15468
.L1548:
	cmpl	$63, %eax
	je	.L1551
	cmpl	$66, %eax
	je	.L1551
.L1547:
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L1554
	cmpl	$55, %eax
	je	.L15469
.L1558:
	cmpl	$63, %eax
	je	.L1561
	cmpl	$66, %eax
	je	.L1561
.L1557:
	cmpw	$55, (%r12)
	jne	.L15283
	cmpw	$55, (%r13)
	jne	.L15283
	testq	%r14, %r14
	je	.L15283
	cmpw	$46, (%r14)
	je	.L15470
.L1567:
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	movl	%r15d, %edx
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 5160(%rsp)
	testl	%ebp, %ebp
	je	.L13798
.L1653:
	movslq	%ebp,%rdx
	movq	%rdx, %rax
	movq	%rdx, 5152(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L1641
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L1645
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r14)
	ja	.L1641
.L1645:
	movslq	%edx,%rdi
	leaq	(%rdi,%rdi,4), %r15
	movq	%rdi, 5144(%rsp)
	salq	$4, %r15
	movq	insn_operand_predicate(%r15), %rdx
	testq	%rdx, %rdx
	jne	.L15471
.L1646:
	movq	insn_operand_predicate+8(%r15), %rdx
	testq	%rdx, %rdx
	jne	.L15472
.L1647:
	movq	insn_operand_predicate+24(%r15), %rdx
	testq	%rdx, %rdx
	je	.L1648
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	5160(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L1641
.L1648:
	call	get_last_insn
	movl	$1, %edx
	movq	%r14, %rsi
	movq	%rax, 5136(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r15), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15473
.L1649:
	movq	5144(%rsp), %rbp
	movq	%r12, %rdi
	xorl	%eax, %eax
	movq	%r13, %rsi
	movq	%rbx, %rdx
	movq	5160(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14910
	movq	5136(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L1641:
	movq	5152(%rsp), %r8
	movl	mode_wider_mode(,%r8,4), %ebp
	testl	%ebp, %ebp
	jne	.L1653
.L13798:
	movl	$4, %edi
	movq	%r14, %rsi
.L15013:
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%r13), %r14
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%r14, (%rsp)
	movq	8(%r12), %r8
	call	emit_library_call
	jmp	.L1180
.L14910:
	call	emit_insn
	jmp	.L1180
.L15473:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L1649
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L1649
.L15472:
	xorl	%eax, %eax
	movq	%r13, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L1641
	jmp	.L1647
.L15471:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L1641
	jmp	.L1646
.L15470:
	movl	8(%r14), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, %r15d
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	%r15d, %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L1581:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13789
.L1577:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L1577
.L13789:
	testl	%ecx, %ecx
	je	.L1570
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L1579
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L1579
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L1579:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L1581
.L1570:
	decl	%r9d
	jg	.L1567
	movq	8(%r12), %rbx
	movq	8(%r13), %rdi
	xorl	%ecx, %ecx
	movq	%r13, 7400(%rsp)
	movl	$0, 7428(%rsp)
	movq	%r12, 7376(%rsp)
	movl	%r10d, %r14d
	movl	$9, 2180(%rsp)
	movq	%rbx, 7384(%rsp)
	movq	%rdi, 7408(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r13d
	cmpw	$1, %r13w
	jbe	.L1584
	cmpw	$88, %dx
	je	.L1584
	cmpw	$87, %dx
	je	.L1584
.L1583:
	movl	%ecx, 7392(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L1586
	cmpw	$88, %dx
	je	.L1586
	cmpw	$87, %dx
	je	.L1586
.L1585:
	movl	%ecx, 7416(%rsp)
	movl	$0, 7420(%rsp)
	movl	$0, 7396(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L1588
	cmpw	$87, %ax
	je	.L1588
.L1587:
	testl	%edx, %edx
	movl	%edx, 7432(%rsp)
	je	.L1589
	movl	%r10d, 7428(%rsp)
.L1589:
	movl	7416(%rsp), %eax
	movl	%r10d, 7424(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L1591
	movl	7392(%rsp), %eax
	testl	%eax, %eax
	jne	.L1590
.L1591:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, %r15d
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	%r15d, %ebp
.L1605:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13792
.L1601:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L1601
.L13792:
	testl	%ecx, %ecx
	je	.L1594
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L1603
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L1603
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L1603:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L1605
.L1594:
	cmpl	$2, %r9d
	jle	.L1590
	testl	%r10d, %r10d
	jne	.L1607
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L1608
	cmpw	$46, %dx
	je	.L1608
	cmpw	$47, %dx
	je	.L1608
	cmpw	$49, %dx
	je	.L1608
	cmpw	$113, %dx
	je	.L1608
.L1607:
	movl	7392(%rsp), %eax
	testl	%eax, %eax
	jne	.L1590
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L1610
	cmpw	$46, %dx
	je	.L1610
	cmpw	$47, %dx
	je	.L1610
	cmpw	$49, %dx
	je	.L1610
	cmpw	$113, %dx
	je	.L1610
.L1590:
	cmpl	$8, %r15d
	movl	$8, %eax
	cmovge	%eax, %r15d
	cmpl	$1, 2180(%rsp)
	jle	.L1613
.L1635:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L13795
.L1620:
	movslq	%edx,%rbx
	movl	2180(%rsp), %eax
	salq	$2, %rbx
	cmpl	%eax, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L1620
.L13795:
	testl	%r12d, %r12d
	je	.L1613
	movslq	%r12d,%r13
	movq	%r13, %rsi
	salq	$4, %rsi
	addq	mov_optab(%rip), %rsi
	movl	8(%rsi), %edx
	cmpl	$210, %edx
	je	.L1622
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, %r15d
	jl	.L1622
	movslq	%edx,%r11
	cmpl	%ebp, 7424(%rsp)
	leaq	7376(%rsp), %rbx
	movq	insn_gen_function(,%r11,8), %r9
	movq	%r9, 5168(%rsp)
	jl	.L1622
	movl	7432(%rsp), %edx
.L1633:
	testl	%edx, %edx
	je	.L1627
	subl	%ebp, 52(%rbx)
.L1627:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L1628
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15012:
	movq	%rax, %r14
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L1630
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L1631:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*5168(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L1632
	addl	%ebp, 52(%rbx)
.L1632:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L1633
.L1622:
	movl	mode_size(,%r13,4), %r10d
	movl	%r10d, 2180(%rsp)
	decl	%r10d
	jg	.L1635
.L1613:
	movl	7424(%rsp), %r15d
	testl	%r15d, %r15d
.L15372:
	je	.L1180
	jmp	.L15283
.L1630:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L1631
.L1628:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15012
.L1610:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7384(%rsp)
	jmp	.L1590
.L1608:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7408(%rsp)
	jmp	.L1607
.L1588:
	movl	$1, %edx
	jmp	.L1587
.L1586:
	movl	$1, %ecx
	jmp	.L1585
.L1584:
	movl	$1, %ecx
	jmp	.L1583
.L1561:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L1557
.L15469:
	movzbl	2(%r14), %edx
	cmpb	$16, %dl
	je	.L1555
	movq	8(%r14), %rbp
	cmpw	$59, (%rbp)
	je	.L15474
.L1555:
	cmpl	$55, %eax
	jne	.L1558
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L1557
.L15474:
	movq	8(%rbp), %r8
	movq	%r8, 8(%r14)
	cmpq	$0, 16(%rbp)
	je	.L1557
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r14
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L1557
.L1554:
	cmpq	$0, 16(%r14)
	jne	.L1562
	movq	8(%r14), %r14
	jmp	.L1557
.L1562:
	movq	24(%r14), %rsi
	testq	%rsi, %rsi
	je	.L1563
	movq	%rsi, %r14
	jmp	.L1557
.L1563:
	movq	8(%r14), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L1557
.L1551:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L1547
.L15468:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L1545
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L15475
.L1545:
	cmpl	$55, %eax
	jne	.L1548
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L1547
.L15475:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L1547
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L1547
.L1544:
	cmpq	$0, 16(%r13)
	jne	.L1552
	movq	8(%r13), %r13
	jmp	.L1547
.L1552:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L1553
	movq	%rsi, %r13
	jmp	.L1547
.L1553:
	movq	8(%r13), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L1547
.L1541:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L1537
.L15467:
	jne	.L1538
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L1537
.L1534:
	cmpq	$0, 16(%r12)
	jne	.L1542
	movq	8(%r12), %r12
	jmp	.L1537
.L1542:
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	je	.L1543
	movq	%rdi, %r12
	jmp	.L1537
.L1543:
	movq	8(%r12), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L1537
.L15466:
	xorl	%eax, %eax
	movq	%rsi, %rdi
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, 2232(%rsp)
	je	.L15476
.L1280:
	movl	$8, %edi
	call	size_int
	movq	5248(%rsp), %rdi
	movq	%rax, %rdx
	movq	8(%rdi), %r9
	movl	$57, %edi
	movq	32(%r9), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	5248(%rsp), %rbx
	movq	%rax, %rbp
	movl	32(%rbx), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%rbp, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	expand_expr
	movq	5248(%rsp), %rsi
	movq	$0, 2184(%rsp)
	movq	%rax, 2208(%rsp)
	movq	%rax, %r15
	movq	8(%rsi), %rcx
	movl	48(%rcx), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r12)
	movl	%eax, 2204(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r13)
	jne	.L15283
	movq	%r12, 2216(%rsp)
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L1406
	cmpl	$55, %eax
	je	.L15477
	cmpl	$63, %eax
	je	.L1413
	cmpl	$66, %eax
	je	.L1413
.L1409:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L1416
	cmpl	$55, %eax
	je	.L15478
.L1420:
	cmpl	$63, %eax
	je	.L1423
	cmpl	$66, %eax
	je	.L1423
.L1419:
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L1426
	cmpl	$55, %eax
	je	.L15479
.L1430:
	cmpl	$63, %eax
	je	.L1433
	cmpl	$66, %eax
	je	.L1433
.L1429:
	movq	2216(%rsp), %rdi
	cmpw	$55, (%rdi)
	jne	.L15283
	cmpw	$55, (%r13)
	jne	.L15283
	cmpq	$0, 2208(%rsp)
	je	.L15283
	movq	2208(%rsp), %rax
	cmpw	$46, (%rax)
	je	.L15480
.L1439:
	movl	2204(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 5200(%rsp)
	testl	%ebp, %ebp
	je	.L13786
.L1525:
	movslq	%ebp,%rdx
	movq	%rdx, %rax
	movq	%rdx, 5192(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L1513
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L1517
	movq	2208(%rsp), %r8
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r8)
	ja	.L1513
.L1517:
	movslq	%edx,%r10
	leaq	(%r10,%r10,4), %r14
	movq	%r10, 5184(%rsp)
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15481
.L1518:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15482
.L1519:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L1520
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	5200(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L1513
.L1520:
	call	get_last_insn
	movl	$1, %edx
	movq	2208(%rsp), %rsi
	movq	%rax, 5176(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15483
.L1521:
	movq	5184(%rsp), %r14
	movq	2216(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r13, %rsi
	movq	%rbx, %rdx
	movq	5200(%rsp), %rcx
	call	*insn_gen_function(,%r14,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14909
	movq	5176(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L1513:
	movq	5192(%rsp), %rcx
	movl	mode_wider_mode(,%rcx,4), %ebp
	testl	%ebp, %ebp
	jne	.L1525
.L13786:
	movq	2208(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movq	2216(%rsp), %rbp
	movq	8(%r13), %rbx
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	movl	$3, %ecx
	xorl	%eax, %eax
	movq	%rbx, (%rsp)
	movq	8(%rbp), %r8
	call	emit_library_call
.L1523:
	cmpw	$46, (%r15)
	je	.L15484
	movq	8(%r12), %rsi
	movl	$4, %edi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movl	$4, %edi
	movq	%r15, %rcx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	2232(%rsp), %rdx
	movl	$4, %edi
	movq	%r15, %rcx
	movq	%rax, %rbp
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 2184(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L1527:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L1528
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%rbp, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L1528:
	cmpq	$0, 2184(%rsp)
	je	.L1180
	movq	2184(%rsp), %rdi
	call	emit_label
	jmp	.L1180
.L15484:
	movq	5248(%rsp), %r15
	movq	8(%r12), %rdi
	movl	32(%r15), %esi
	call	plus_constant_wide
	movq	2232(%rsp), %rdi
	movq	5248(%rsp), %r12
	movq	%rax, %rbp
	movl	32(%r12), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L1527
.L14909:
	call	emit_insn
	jmp	.L1523
.L15483:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L1521
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L1521
.L15482:
	xorl	%eax, %eax
	movq	%r13, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L1513
	jmp	.L1519
.L15481:
	xorl	%eax, %eax
	movq	2216(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L1513
	jmp	.L1518
.L15480:
	movl	8(%rax), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 2204(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	2204(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L1453:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13777
.L1449:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L1449
.L13777:
	testl	%ecx, %ecx
	je	.L1442
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L1451
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L1451
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L1451:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L1453
.L1442:
	decl	%r9d
	jg	.L1439
	movq	2216(%rsp), %rdx
	movq	8(%r13), %rdi
	xorl	%ecx, %ecx
	movl	%r10d, %r14d
	movq	8(%rdx), %rbx
	movq	%r13, 7400(%rsp)
	movq	%rdx, 7376(%rsp)
	movl	$0, 7428(%rsp)
	movq	%rdi, 7408(%rsp)
	movl	$9, 2200(%rsp)
	movq	%rbx, 7384(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r13d
	cmpw	$1, %r13w
	jbe	.L1456
	cmpw	$88, %dx
	je	.L1456
	cmpw	$87, %dx
	je	.L1456
.L1455:
	movl	%ecx, 7392(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L1458
	cmpw	$88, %dx
	je	.L1458
	cmpw	$87, %dx
	je	.L1458
.L1457:
	movl	%ecx, 7416(%rsp)
	movl	$0, 7420(%rsp)
	movl	$0, 7396(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L1460
	cmpw	$87, %ax
	je	.L1460
.L1459:
	testl	%edx, %edx
	movl	%edx, 7432(%rsp)
	je	.L1461
	movl	%r10d, 7428(%rsp)
.L1461:
	movl	7416(%rsp), %eax
	movl	%r10d, 7424(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L1463
	movl	7392(%rsp), %eax
	testl	%eax, %eax
	jne	.L1462
.L1463:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 2204(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r13d
	cmovl	2204(%rsp), %ebp
.L1477:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13780
.L1473:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L1473
.L13780:
	testl	%ecx, %ecx
	je	.L1466
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L1475
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r13d, %eax
	cmpl	%eax, %ebp
	jl	.L1475
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L1475:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L1477
.L1466:
	cmpl	$2, %r9d
	jle	.L1462
	testl	%r10d, %r10d
	jne	.L1479
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L1480
	cmpw	$46, %dx
	je	.L1480
	cmpw	$47, %dx
	je	.L1480
	cmpw	$49, %dx
	je	.L1480
	cmpw	$113, %dx
	je	.L1480
.L1479:
	movl	7392(%rsp), %ebp
	testl	%ebp, %ebp
	jne	.L1462
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L1482
	cmpw	$46, %dx
	je	.L1482
	cmpw	$47, %dx
	je	.L1482
	cmpw	$49, %dx
	je	.L1482
	cmpw	$113, %dx
	je	.L1482
.L1462:
	cmpl	$8, 2204(%rsp)
	movl	$8, %eax
	cmovl	2204(%rsp), %eax
	cmpl	$1, 2200(%rsp)
	movl	%eax, 2204(%rsp)
	jle	.L1485
.L1507:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r13d, %r13d
	testl	%edx, %edx
	je	.L13783
.L1492:
	movslq	%edx,%rbx
	movl	2200(%rsp), %esi
	salq	$2, %rbx
	cmpl	%esi, mode_size(%rbx)
	cmovl	%edx, %r13d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L1492
.L13783:
	testl	%r13d, %r13d
	je	.L1485
	movslq	%r13d,%r14
	movq	%r14, %r9
	salq	$4, %r9
	addq	mov_optab(%rip), %r9
	movl	8(%r9), %edx
	cmpl	$210, %edx
	je	.L1494
	movl	mode_size(,%r14,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 2204(%rsp)
	jl	.L1494
	movslq	%edx,%r11
	cmpl	%ebp, 7424(%rsp)
	leaq	7376(%rsp), %rbx
	movq	insn_gen_function(,%r11,8), %rdi
	movq	%rdi, 5208(%rsp)
	jl	.L1494
	movl	7432(%rsp), %edx
.L1505:
	testl	%edx, %edx
	je	.L1499
	subl	%ebp, 52(%rbx)
.L1499:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L1500
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15011:
	movq	%rax, 2192(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L1502
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L1503:
	movq	%rax, %rsi
	movq	2192(%rsp), %rdi
	xorl	%eax, %eax
	call	*5208(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L1504
	addl	%ebp, 52(%rbx)
.L1504:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L1505
.L1494:
	movl	mode_size(,%r14,4), %r13d
	movl	%r13d, 2200(%rsp)
	decl	%r13d
	jg	.L1507
.L1485:
	movl	7424(%rsp), %eax
	testl	%eax, %eax
	je	.L1523
	jmp	.L15283
.L1502:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L1503
.L1500:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15011
.L1482:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7384(%rsp)
	jmp	.L1462
.L1480:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7408(%rsp)
	jmp	.L1479
.L1460:
	movl	$1, %edx
	jmp	.L1459
.L1458:
	movl	$1, %ecx
	jmp	.L1457
.L1456:
	movl	$1, %ecx
	jmp	.L1455
.L1433:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L1429
.L15479:
	movzbl	2(%r15), %edx
	cmpb	$16, %dl
	je	.L1427
	movq	8(%r15), %rbp
	cmpw	$59, (%rbp)
	je	.L15485
.L1427:
	cmpl	$55, %eax
	jne	.L1430
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L1429
.L15485:
	movq	8(%rbp), %rcx
	movq	%rcx, 8(%r15)
	cmpq	$0, 16(%rbp)
	je	.L1429
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r15, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r14, 2208(%rsp)
	jmp	.L1429
.L1426:
	cmpq	$0, 16(%r15)
	jne	.L1434
	movq	8(%r15), %rbp
	movq	%rbp, 2208(%rsp)
	jmp	.L1429
.L1434:
	movq	24(%r15), %rbx
	testq	%rbx, %rbx
	movq	%rbx, 2208(%rsp)
	jne	.L1429
	movq	8(%r15), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %rsi
	movq	%rsi, 2208(%rsp)
	jmp	.L1429
.L1423:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L1419
.L15478:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L1417
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L15486
.L1417:
	cmpl	$55, %eax
	jne	.L1420
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L1419
.L15486:
	movq	8(%rbp), %r11
	movq	%r11, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L1419
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L1419
.L1416:
	cmpq	$0, 16(%r13)
	jne	.L1424
	movq	8(%r13), %r13
	jmp	.L1419
.L1424:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L1425
	movq	%rsi, %r13
	jmp	.L1419
.L1425:
	movq	8(%r13), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L1419
.L1413:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L1409
.L15477:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L1409
.L1406:
	cmpq	$0, 16(%r12)
	jne	.L1414
	movq	8(%r12), %rax
	movq	%rax, 2216(%rsp)
	jmp	.L1409
.L1414:
	movq	24(%r12), %r8
	testq	%r8, %r8
	movq	%r8, 2216(%rsp)
	jne	.L1409
	movq	8(%r12), %r14
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdx
	movq	%rdx, 2216(%rsp)
	jmp	.L1409
.L15476:
	movq	5248(%rsp), %rdi
	movq	2232(%rsp), %rcx
	movl	32(%rdi), %eax
	cmpl	%eax, 8(%rcx)
	jge	.L1280
	movq	8(%rdi), %rbx
	movl	48(%rbx), %r15d
	shrl	$3, %r15d
	cmpb	$16, 2(%r12)
	jne	.L15283
	cmpb	$16, 2(%r13)
	jne	.L15283
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L1283
	cmpl	$55, %eax
	je	.L15487
.L1287:
	cmpl	$63, %eax
	je	.L1290
	cmpl	$66, %eax
	je	.L1290
.L1286:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L1293
	cmpl	$55, %eax
	je	.L15488
.L1297:
	cmpl	$63, %eax
	je	.L1300
	cmpl	$66, %eax
	je	.L1300
.L1296:
	movq	2232(%rsp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$59, %eax
	je	.L1303
	cmpl	$55, %eax
	je	.L15489
.L1307:
	cmpl	$63, %eax
	je	.L1310
	cmpl	$66, %eax
	je	.L1310
.L1306:
	cmpw	$55, (%r12)
	jne	.L15283
	cmpw	$55, (%r13)
	jne	.L15283
	cmpq	$0, 2232(%rsp)
	je	.L15283
	movq	2232(%rsp), %rbx
	cmpw	$46, (%rbx)
	je	.L15490
.L1316:
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	movl	%r15d, %edx
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 5232(%rsp)
	testl	%ebp, %ebp
	je	.L13774
.L1402:
	movslq	%ebp,%r14
	movq	%r14, %rax
	movq	%r14, 5224(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L1390
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L1394
	movq	2232(%rsp), %r11
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r11)
	ja	.L1390
.L1394:
	movslq	%edx,%r15
	leaq	(%r15,%r15,4), %r14
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15491
.L1395:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15492
.L1396:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L1397
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	5232(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L1390
.L1397:
	call	get_last_insn
	movl	$1, %edx
	movq	2232(%rsp), %rsi
	movq	%rax, 5216(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15493
.L1398:
	movq	%r12, %rdi
	xorl	%eax, %eax
	movq	%r13, %rsi
	movq	%rbx, %rdx
	movq	5232(%rsp), %rcx
	call	*insn_gen_function(,%r15,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14910
	movq	5216(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L1390:
	movq	5224(%rsp), %r10
	movl	mode_wider_mode(,%r10,4), %ebp
	testl	%ebp, %ebp
	jne	.L1402
.L13774:
	movq	2232(%rsp), %rsi
	movl	$4, %edi
	jmp	.L15013
.L15493:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L1398
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L1398
.L15492:
	xorl	%eax, %eax
	movq	%r13, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L1390
	jmp	.L1396
.L15491:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L1390
	jmp	.L1395
.L15490:
	movl	8(%rbx), %r10d
	xorl	%r9d, %r9d
	movl	$9, %r8d
	movl	$8, %ebx
	cmpl	$8, %r15d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	%r15d, %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L1330:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13765
.L1326:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L1326
.L13765:
	testl	%ecx, %ecx
	je	.L1319
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L1328
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L1328
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L1328:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L1330
.L1319:
	decl	%r9d
	jg	.L1316
	movq	8(%r12), %rbx
	movq	8(%r13), %rdi
	xorl	%ecx, %ecx
	movq	%r12, 7440(%rsp)
	movl	$0, 7492(%rsp)
	movq	%r13, 7464(%rsp)
	movl	%r10d, %r14d
	movl	$9, 2228(%rsp)
	movq	%rbx, 7448(%rsp)
	movq	%rdi, 7472(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L1333
	cmpw	$88, %dx
	je	.L1333
	cmpw	$87, %dx
	je	.L1333
.L1332:
	movl	%ecx, 7456(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r13d
	cmpw	$1, %r13w
	jbe	.L1335
	cmpw	$88, %dx
	je	.L1335
	cmpw	$87, %dx
	je	.L1335
.L1334:
	movl	%ecx, 7480(%rsp)
	movl	$0, 7484(%rsp)
	movl	$0, 7460(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L1337
	cmpw	$87, %ax
	je	.L1337
.L1336:
	testl	%edx, %edx
	movl	%edx, 7496(%rsp)
	je	.L1338
	movl	%r10d, 7492(%rsp)
.L1338:
	movl	7480(%rsp), %eax
	movl	%r10d, 7488(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L1340
	movl	7456(%rsp), %r9d
	testl	%r9d, %r9d
	jne	.L1339
.L1340:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, %r15d
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	%r15d, %ebp
.L1354:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13768
.L1350:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L1350
.L13768:
	testl	%ecx, %ecx
	je	.L1343
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L1352
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L1352
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L1352:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L1354
.L1343:
	cmpl	$2, %r9d
	jle	.L1339
	testl	%r10d, %r10d
	jne	.L1356
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L1357
	cmpw	$46, %dx
	je	.L1357
	cmpw	$47, %dx
	je	.L1357
	cmpw	$49, %dx
	je	.L1357
	cmpw	$113, %dx
	je	.L1357
.L1356:
	movl	7456(%rsp), %r10d
	testl	%r10d, %r10d
	jne	.L1339
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L1359
	cmpw	$46, %dx
	je	.L1359
	cmpw	$47, %dx
	je	.L1359
	cmpw	$49, %dx
	je	.L1359
	cmpw	$113, %dx
	je	.L1359
.L1339:
	cmpl	$8, %r15d
	movl	$8, %eax
	cmovge	%eax, %r15d
	cmpl	$1, 2228(%rsp)
	jle	.L1362
.L1384:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L13771
.L1369:
	movslq	%edx,%rsi
	movl	2228(%rsp), %eax
	salq	$2, %rsi
	cmpl	%eax, mode_size(%rsi)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rsi), %edx
	testl	%edx, %edx
	jne	.L1369
.L13771:
	testl	%r12d, %r12d
	je	.L1362
	movslq	%r12d,%r13
	movq	%r13, %rbx
	salq	$4, %rbx
	addq	mov_optab(%rip), %rbx
	movl	8(%rbx), %edx
	cmpl	$210, %edx
	je	.L1371
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, %r15d
	jl	.L1371
	movslq	%edx,%rdi
	cmpl	%ebp, 7488(%rsp)
	leaq	7440(%rsp), %rbx
	movq	insn_gen_function(,%rdi,8), %r8
	movq	%r8, 5240(%rsp)
	jl	.L1371
	movl	7496(%rsp), %edx
.L1382:
	testl	%edx, %edx
	je	.L1376
	subl	%ebp, 52(%rbx)
.L1376:
	movl	16(%rbx), %r9d
	testl	%r9d, %r9d
	je	.L1377
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15010:
	movl	40(%rbx), %edx
	movq	%rax, %r14
	testl	%edx, %edx
	je	.L1379
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L1380:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*5240(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L1381
	addl	%ebp, 52(%rbx)
.L1381:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L1382
.L1371:
	movl	mode_size(,%r13,4), %ebp
	movl	%ebp, 2228(%rsp)
	decl	%ebp
	jg	.L1384
.L1362:
	movl	7488(%rsp), %r15d
	testl	%r15d, %r15d
	jmp	.L15372
.L1379:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L1380
.L1377:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15010
.L1359:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7448(%rsp)
	jmp	.L1339
.L1357:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7472(%rsp)
	jmp	.L1356
.L1337:
	movl	$1, %edx
	jmp	.L1336
.L1335:
	movl	$1, %ecx
	jmp	.L1334
.L1333:
	movl	$1, %ecx
	jmp	.L1332
.L1310:
	movq	2232(%rsp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	2232(%rsp), %r10
	movq	%rax, 8(%r10)
	movq	2232(%rsp), %r11
	movq	16(%r11), %rdi
	call	protect_from_queue
	movq	2232(%rsp), %r9
	movq	%rax, 16(%r9)
	jmp	.L1306
.L15489:
	movq	%rdx, %rcx
	movzbl	2(%rdx), %edx
	cmpb	$16, %dl
	je	.L1304
	movq	8(%rcx), %rbp
	cmpw	$59, (%rbp)
	je	.L15494
.L1304:
	cmpl	$55, %eax
	jne	.L1307
	movq	2232(%rsp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L1306
.L15494:
	movq	8(%rbp), %r8
	movq	%r8, 8(%rcx)
	cmpq	$0, 16(%rbp)
	je	.L1306
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	2232(%rsp), %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L15009:
	movq	%rbx, 2232(%rsp)
	jmp	.L1306
.L1303:
	movq	2232(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L1311
	movq	8(%rcx), %rbx
	jmp	.L15009
.L1311:
	movq	2232(%rsp), %rcx
	movq	24(%rcx), %rsi
	testq	%rsi, %rsi
	je	.L1312
	movq	%rsi, 2232(%rsp)
	jmp	.L1306
.L1312:
	movq	2232(%rsp), %r14
	movq	8(%r14), %rbp
	movzbl	2(%rbp), %edi
	call	gen_reg_rtx
	movq	2232(%rsp), %rdx
	movq	%rax, %rdi
	movq	8(%rdx), %rsi
	movq	%rax, 24(%rdx)
	call	gen_move_insn
	movq	2232(%rsp), %rbx
	movq	%rax, %rdi
	movq	16(%rbx), %rsi
	call	emit_insn_before
	movq	2232(%rsp), %rsi
	movq	24(%rsi), %rdi
	movq	%rdi, 2232(%rsp)
	jmp	.L1306
.L1300:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L1296
.L15488:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L1294
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L15495
.L1294:
	cmpl	$55, %eax
	jne	.L1297
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L1296
.L15495:
	movq	8(%rbp), %r14
	movq	%r14, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L1296
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L1296
.L1293:
	cmpq	$0, 16(%r13)
	jne	.L1301
	movq	8(%r13), %r13
	jmp	.L1296
.L1301:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L1302
	movq	%rsi, %r13
	jmp	.L1296
.L1302:
	movq	8(%r13), %rbp
	movzbl	2(%rbp), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L1296
.L1290:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L1286
.L15487:
	jne	.L1287
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L1286
.L1283:
	cmpq	$0, 16(%r12)
	jne	.L1291
	movq	8(%r12), %r12
	jmp	.L1286
.L1291:
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	je	.L1292
	movq	%rdi, %r12
	jmp	.L1286
.L1292:
	movq	8(%r12), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L1286
	.p2align 6,,7
.L1272:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L1268
.L15464:
	jne	.L1269
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L1268
	.p2align 6,,7
.L1265:
	cmpq	$0, 16(%r12)
	jne	.L1273
	movq	8(%r12), %r12
	jmp	.L1268
.L1273:
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	je	.L1274
	movq	%rdi, %r12
	jmp	.L1268
.L1274:
	movq	8(%r12), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L1268
	.p2align 6,,7
.L15463:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	5248(%rsp), %rdi
	movzbl	2(%r12), %edx
	movq	%rax, %rsi
	jmp	.L15008
.L1244:
	movl	(%r12), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L15496
	movzbl	2(%r12), %edx
	movq	5248(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	%r12, %rsi
	call	expand_expr
	cmpw	$51, (%r12)
	movq	%rax, %r13
	je	.L15497
.L1262:
	movzwl	(%r13), %edx
	leal	-56(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L1263
	cmpw	$46, %dx
	je	.L1263
	cmpw	$47, %dx
	je	.L1263
	cmpw	$49, %dx
	je	.L1263
	cmpw	$113, %dx
	jne	.L1209
	jmp	.L1263
	.p2align 6,,7
.L15497:
	cmpl	$63, 8(%r12)
	jle	.L1209
	jmp	.L1262
.L15496:
	movq	5248(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	8(%r12), %rdi
	movzbl	3(%r12), %edx
	movq	%rax, %rsi
	shrb	$2, %dl
	andl	$1, %edx
	jmp	.L15015
.L1253:
	movl	$1, %ebx
	jmp	.L1247
.L1245:
	xorl	%ebx, %ebx
	jmp	.L1247
.L1251:
	movq	8(%r12), %rdi
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L1253
	movq	16(%r12), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L1247
	jmp	.L1253
.L15462:
	movzbl	2(%r12), %eax
	cmpb	$16, %al
	je	.L1237
	movl	cse_not_expected(%rip), %r14d
	movq	5248(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	%al, %edx
	testl	%r14d, %r14d
	cmove	%r12, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	call	expand_expr
	movq	%rax, %r13
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L1263
	testb	%al, %al
	je	.L1263
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L15289
	.p2align 6,,7
.L15461:
	cmpb	$16, 2(%r12)
	jne	.L1210
	call	gen_label_rtx
	movq	%rax, %r13
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r14
	testq	%rbx, %rbx
	jne	.L1214
.L13758:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L1216
	cmpl	$55, %eax
	je	.L15498
.L1220:
	cmpl	$63, %eax
	je	.L1223
	cmpl	$66, %eax
	je	.L1223
.L1219:
	movq	5248(%rsp), %r15
	xorl	%eax, %eax
	movq	%r13, %rsi
	incl	inhibit_defer_pop(%rip)
	movq	32(%r15), %rdi
	call	jumpifnot
	movq	5248(%rsp), %rax
	movq	%r12, %rsi
	movl	%ebp, %edx
	movq	40(%rax), %rdi
	xorl	%eax, %eax
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L1229
.L13760:
	movq	%r14, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r13, %rdi
	call	emit_label
	xorl	%eax, %eax
	movl	%ebp, %edx
	movq	5248(%rsp), %r13
	movq	%r12, %rsi
	movq	48(%r13), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L1234
.L13762:
	movq	%r14, %rdi
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L1180
.L1234:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rbp
	movq	%rax, 16(%rbx)
	testq	%rbp, %rbp
	movq	%rbp, pending_chain(%rip)
	movq	%rbp, %rbx
	jne	.L1234
	jmp	.L13762
	.p2align 6,,7
.L1229:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdx
	movq	%rax, 16(%rbx)
	testq	%rdx, %rdx
	movq	%rdx, pending_chain(%rip)
	movq	%rdx, %rbx
	jne	.L1229
	jmp	.L13760
.L1223:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L1219
.L15498:
	jne	.L1220
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L1219
.L1216:
	cmpq	$0, 16(%r12)
	jne	.L1224
	movq	8(%r12), %r12
	jmp	.L1219
.L1224:
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	je	.L1225
	movq	%rdi, %r12
	jmp	.L1219
.L1225:
	movq	8(%r12), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L1219
	.p2align 6,,7
.L1214:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rsi
	movq	%rax, 16(%rbx)
	testq	%rsi, %rsi
	movq	%rsi, pending_chain(%rip)
	movq	%rsi, %rbx
	jne	.L1214
	jmp	.L13758
	.p2align 6,,7
.L15460:
	movq	32(%rcx), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L1206
.L13756:
	movq	5248(%rsp), %r10
	movq	%r12, %rsi
	movl	%ebp, %edx
	xorl	%eax, %eax
	movq	40(%r10), %rdi
	call	store_expr
	jmp	.L1180
.L1206:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rcx
	movq	%rax, 16(%rbx)
	testq	%rcx, %rcx
	movq	%rcx, pending_chain(%rip)
	movq	%rcx, %rbx
	jne	.L1206
	jmp	.L13756
.L15459:
	movq	16(%rdi), %r9
	cmpw	$46, (%r9)
	jne	.L1199
	movq	8(%rdi), %rax
	cmpq	virtual_incoming_args_rtx(%rip), %rax
	je	.L1198
	cmpq	virtual_stack_vars_rtx(%rip), %rax
	jne	.L1199
	jmp	.L1198
	.p2align 6,,7
.L1191:
	movq	5248(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movl	%r12d, %r9d
	movl	%ebx, %ecx
	movq	56(%rsp), %rdi
	movq	%rax, %r8
	movq	%rax, %r13
	movl	%ebp, %esi
	movl	%r14d, %edx
	xorl	%eax, %eax
	movl	%r15d, (%rsp)
	call	store_bit_field
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L1180
	movl	2244(%rsp), %eax
	testl	%eax, %eax
	je	.L1194
	movq	56(%rsp), %rbx
	movl	(%rbx), %eax
	andl	$134283263, %eax
	cmpl	$134217783, %eax
	je	.L1194
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L1195
	movl	2244(%rsp), %edx
	xorl	%esi, %esi
	movl	$46, %edi
	call	gen_rtx
	xorl	%edx, %edx
	movq	%r13, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	expand_and
	jmp	.L1180
.L1195:
	movzbl	2(%r13), %r14d
	movl	$0, %edx
	testl	%r14d, %r14d
	cmove	%edx, %r14d
	xorl	%esi, %esi
	movslq	%r14d,%r15
	movl	mode_size(,%r15,4), %edi
	sall	$3, %edi
	subl	%ebp, %edi
	call	build_int_2_wide
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	%rax, %rbp
	movl	%r14d, %esi
	movq	%r13, %rdx
	movq	%rax, %rcx
	movl	$77, %edi
	xorl	%eax, %eax
	call	expand_shift
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movl	$78, %edi
	movl	%r14d, %esi
	movq	%rbp, %rcx
	xorl	%eax, %eax
	call	expand_shift
	jmp	.L1180
.L1194:
	movq	56(%rsp), %rdi
	movl	%ebp, %esi
	movl	%r14d, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	xorl	%eax, %eax
	movl	$0, (%rsp)
	movl	%r12d, 8(%rsp)
	movl	%r15d, 16(%rsp)
	call	extract_bit_field
	jmp	.L1180
.L15458:
	movq	56(%rsp), %r9
	movzwl	(%r9), %eax
	cmpw	$51, %ax
	je	.L1187
	cmpw	$53, %ax
	jne	.L1186
.L1187:
	movq	56(%rsp), %rcx
	xorl	%edx, %edx
	movzbl	2(%rcx), %edi
	movslq	%edi,%r11
	movl	mode_size(,%r11,4), %esi
	call	assign_stack_temp
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	copy_rtx
	movq	56(%rsp), %rdx
	movb	$16, 2(%rax)
	movq	%rax, %r13
	movzbq	2(%rdx), %rdi
	movl	mode_size(,%rdi,4), %eax
	sall	$3, %eax
	cmpl	%eax, %ebp
	je	.L1188
	movq	%rbx, %rdi
	movq	%rdx, %rsi
	call	emit_move_insn
.L1188:
	movq	5248(%rsp), %r8
	movq	%r13, %rdi
	movl	%ebp, %esi
	movl	%r14d, %edx
	movl	$16, %ecx
	xorl	%r9d, %r9d
	xorl	%eax, %eax
	movl	$0, (%rsp)
	movl	%r12d, 8(%rsp)
	movl	%r15d, 16(%rsp)
	call	store_field
	movq	%rbx, %rsi
	movq	56(%rsp), %rdi
	jmp	.L15014
.L15457:
	xorl	%esi, %esi
	movl	%eax, %edx
	movl	$46, %edi
	xorl	%eax, %eax
	call	gen_rtx
	movl	$4, %r9d
	movl	$3, %ecx
	movq	%rax, 16(%rsp)
	movq	const0_rtx(%rip), %rsi
	movl	$4, 8(%rsp)
	movq	56(%rsp), %rax
	movl	$4, 24(%rsp)
	movq	memset_libfunc(%rip), %rdi
	xorl	%edx, %edx
	movq	%rsi, (%rsp)
	xorl	%esi, %esi
	movq	8(%rax), %r8
	xorl	%eax, %eax
	call	emit_library_call
	jmp	.L1170
.L1173:
	movq	56(%rsp), %rdx
	movl	$42, %edi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L1170
.L15456:
	testb	$4, 18(%r15)
	je	.L1171
	movq	%rax, %rdi
	jmp	.L15007
.L1168:
	cmpb	$18, %dl
	jne	.L15283
	movq	5256(%rsp), %rsi
	movq	24(%rsi), %r11
	movq	8(%rsi), %r12
	movq	88(%r11), %r10
	movq	96(%r11), %r9
	movl	24(%r10), %ebx
	movl	24(%r9), %ebp
	movq	%r12, 5128(%rsp)
	movq	40(%r15), %rdi
	subl	%ebx, %ebp
	call	list_length
	leal	1(%rbp), %edx
	cmpl	%edx, %eax
	jl	.L1660
	movq	56(%rsp), %rax
	cmpw	$51, (%rax)
	je	.L15499
.L1659:
	movq	56(%rsp), %rdx
	movl	$42, %edi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, %rdi
	call	emit_insn
.L1664:
	movq	40(%r15), %rdx
	movl	$0, 2176(%rsp)
	testq	%rdx, %rdx
	movq	%rdx, 2168(%rsp)
	je	.L581
.L2140:
	movq	5128(%rsp), %r15
	movq	2168(%rsp), %r9
	movq	5256(%rsp), %r13
	movzbl	44(%r15), %ebx
	movq	32(%r15), %rcx
	movq	32(%r9), %rsi
	movl	2176(%rsp), %r15d
	movq	%r13, %rdi
	imull	24(%rcx), %r15d
	movslq	%ebx,%r12
	movq	%rsi, 5120(%rsp)
	movl	48(%r13), %r14d
	movl	mode_size(,%r12,4), %eax
	shrl	$3, %r14d
	leal	0(,%rax,8), %ebp
	call	int_size_in_bytes
	movl	$0, 2164(%rsp)
	cmpl	$31, %ebp
	movl	%eax, 5116(%rsp)
	jg	.L1669
	movl	$1, %eax
	movl	%ebp, %ecx
	sall	%cl, %eax
	decl	%eax
	movl	%eax, 2164(%rsp)
.L1669:
	cmpl	$16, %ebx
	je	.L15500
.L1670:
	testl	%ebx, %ebx
	je	.L1675
	cmpl	$16, %ebx
	je	.L1676
	cmpb	$0, direct_store(%r12)
	je	.L1675
.L1676:
	movq	56(%rsp), %rdi
	movzwl	(%rdi), %eax
	cmpw	$51, %ax
	je	.L1675
	cmpw	$53, %ax
	je	.L1675
	movq	56(%rsp), %r10
	xorl	%r11d, %r11d
	testl	%r11d, %r11d
	movq	8(%r10), %rdi
	je	.L1682
	movzwl	(%rdi), %edx
	cmpw	$51, %dx
	je	.L1682
	leal	-56(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L1682
	cmpw	$46, %dx
	je	.L1682
	cmpw	$47, %dx
	je	.L1682
	cmpw	$49, %dx
	je	.L1682
	cmpw	$113, %dx
	je	.L1682
	cmpw	$63, %dx
	je	.L15501
.L1683:
	xorl	%eax, %eax
	call	copy_to_reg
	movq	%rax, %rdi
.L1682:
	cmpl	$-1, %r15d
	leal	7(%r15), %r8d
	cmovle	%r8d, %r15d
	sarl	$3, %r15d
	movl	%r15d, %esi
	call	plus_constant_wide
	movl	%ebx, %esi
	movq	56(%rsp), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	xorl	%edi, %edi
	orb	$16, 3(%rax)
	movq	%rax, %r12
	testl	%edi, %edi
	movq	5120(%rsp), %rdx
	setne	%bl
	xorl	%r14d, %r14d
	movzbl	16(%rdx), %eax
	movzbl	%bl, %ebp
	cmpb	$44, %al
	je	.L15502
	cmpb	$48, %al
	je	.L15503
.L1694:
	testl	%ebp, %ebp
	je	.L1721
	cmpw	$55, (%r12)
	je	.L15504
.L1721:
	movzwl	(%r12), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L1729
	mov	%eax, %r10d
	jmp	*.L1738(,%r10,8)
	.section	.rodata
	.align 8
	.align 4
.L1738:
	.quad	.L1732
	.quad	.L1729
	.quad	.L1729
	.quad	.L1729
	.quad	.L1737
	.quad	.L1729
	.quad	.L1729
	.quad	.L1729
	.quad	.L1735
	.quad	.L1735
	.quad	.L1729
	.quad	.L1735
	.text
.L1732:
	movq	8(%r12), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %ebx
.L1731:
	testl	%ebx, %ebx
	je	.L1728
	movzbl	2(%r12), %eax
	cmpb	$16, %al
	je	.L1740
	testb	%al, %al
	jne	.L15505
.L1740:
	movzbl	2(%r12), %edx
	movq	5120(%rsp), %rdi
	xorl	%esi, %esi
.L15016:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L15290:
	movq	%rax, %r13
.L1747:
	movl	$1, %r14d
.L1693:
	cmpq	%r12, %r13
	je	.L1667
	movq	5120(%rsp), %rdx
	cmpb	$0, 16(%rdx)
	je	.L1667
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L1749
	cmpl	$55, %eax
	je	.L15506
.L1753:
	cmpl	$63, %eax
	je	.L1756
	cmpl	$66, %eax
	je	.L1756
.L1752:
	movzbl	2(%r13), %eax
	movzbl	2(%r12), %ecx
	cmpb	%cl, %al
	je	.L1759
	testb	%al, %al
	je	.L1759
	movq	5120(%rsp), %rax
	movq	8(%rax), %rsi
	movzbl	17(%rsi), %edi
	shrb	$6, %dil
	movl	%edi, %edx
	andl	$1, %edx
	testl	%r14d, %r14d
	je	.L1760
	movzbl	%cl, %edi
	movq	%r13, %rsi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%r12, %rdi
	movq	%rax, %rsi
.L15022:
	call	emit_move_insn
.L1667:
	movq	2168(%rsp), %r12
	movq	(%r12), %r13
	incl	2176(%rsp)
	testq	%r13, %r13
	movq	%r13, 2168(%rsp)
	jne	.L2140
	jmp	.L581
.L1760:
	movq	%r12, %rdi
	movq	%r13, %rsi
.L15023:
	xorl	%eax, %eax
	call	convert_move
	jmp	.L1667
.L1759:
	cmpb	$16, %al
	je	.L15507
.L2015:
	movq	%r12, %rdi
	movq	%r13, %rsi
	jmp	.L15022
.L15507:
	movq	5120(%rsp), %rdx
	cmpb	$28, 16(%rdx)
	je	.L15508
	cmpb	$16, %al
	jne	.L2015
	movq	5120(%rsp), %rdi
	xorl	%eax, %eax
	call	expr_size
	movq	5120(%rsp), %rsi
	movq	%rax, %r14
	movq	8(%rsi), %rbx
	movl	48(%rbx), %r15d
	shrl	$3, %r15d
	cmpb	$16, 2(%r12)
	jne	.L15283
	cmpb	$16, 2(%r13)
	jne	.L15283
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L2018
	cmpl	$55, %eax
	je	.L15509
.L2022:
	cmpl	$63, %eax
	je	.L2025
	cmpl	$66, %eax
	je	.L2025
.L2021:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L2028
	cmpl	$55, %eax
	je	.L15510
.L2032:
	cmpl	$63, %eax
	je	.L2035
	cmpl	$66, %eax
	je	.L2035
.L2031:
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L2038
	cmpl	$55, %eax
	je	.L15511
.L2042:
	cmpl	$63, %eax
	je	.L2045
	cmpl	$66, %eax
	je	.L2045
.L2041:
	cmpw	$55, (%r12)
	jne	.L15283
	cmpw	$55, (%r13)
	jne	.L15283
	testq	%r14, %r14
	je	.L15283
	cmpw	$46, (%r14)
	je	.L15512
.L2051:
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	movl	%r15d, %edx
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 5024(%rsp)
	testl	%ebp, %ebp
	je	.L13843
.L2137:
	movslq	%ebp,%rdx
	movq	%rdx, %rax
	movq	%rdx, 5016(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L2125
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L2129
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r14)
	ja	.L2125
.L2129:
	movslq	%edx,%r10
	leaq	(%r10,%r10,4), %r15
	movq	%r10, 5008(%rsp)
	salq	$4, %r15
	movq	insn_operand_predicate(%r15), %rdx
	testq	%rdx, %rdx
	jne	.L15513
.L2130:
	movq	insn_operand_predicate+8(%r15), %rdx
	testq	%rdx, %rdx
	jne	.L15514
.L2131:
	movq	insn_operand_predicate+24(%r15), %rdx
	testq	%rdx, %rdx
	je	.L2132
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	5024(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L2125
.L2132:
	call	get_last_insn
	movl	$1, %edx
	movq	%r14, %rsi
	movq	%rax, 5000(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r15), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15515
.L2133:
	movq	5008(%rsp), %r9
	movq	%r12, %rdi
	xorl	%eax, %eax
	movq	%r13, %rsi
	movq	%rbx, %rdx
	movq	5024(%rsp), %rcx
	call	*insn_gen_function(,%r9,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14913
	movq	5000(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L2125:
	movq	5016(%rsp), %rbx
	movl	mode_wider_mode(,%rbx,4), %ebp
	testl	%ebp, %ebp
	jne	.L2137
.L13843:
	movl	$4, %edi
	movq	%r14, %rsi
.L15021:
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%r13), %r14
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%r14, (%rsp)
	movq	8(%r12), %r8
	call	emit_library_call
	jmp	.L1667
.L14913:
	call	emit_insn
	jmp	.L1667
.L15515:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L2133
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L2133
.L15514:
	xorl	%eax, %eax
	movq	%r13, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L2125
	jmp	.L2131
.L15513:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L2125
	jmp	.L2130
.L15512:
	movl	8(%r14), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, %r15d
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	%r15d, %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L2065:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13834
.L2061:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L2061
.L13834:
	testl	%ecx, %ecx
	je	.L2054
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L2063
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L2063
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L2063:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L2065
.L2054:
	decl	%r9d
	jg	.L2051
	movq	8(%r12), %rbx
	movq	8(%r13), %rdi
	xorl	%ecx, %ecx
	movl	$0, 7492(%rsp)
	movq	%r12, 7440(%rsp)
	movq	%r13, 7464(%rsp)
	movl	%r10d, %r14d
	movl	$9, 2100(%rsp)
	movq	%rbx, 7448(%rsp)
	movq	%rdi, 7472(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L2068
	cmpw	$88, %dx
	je	.L2068
	cmpw	$87, %dx
	je	.L2068
.L2067:
	movl	%ecx, 7456(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r13d
	cmpw	$1, %r13w
	jbe	.L2070
	cmpw	$88, %dx
	je	.L2070
	cmpw	$87, %dx
	je	.L2070
.L2069:
	movl	%ecx, 7480(%rsp)
	movl	$0, 7484(%rsp)
	movl	$0, 7460(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L2072
	cmpw	$87, %ax
	je	.L2072
.L2071:
	testl	%edx, %edx
	movl	%edx, 7496(%rsp)
	je	.L2073
	movl	%r10d, 7492(%rsp)
.L2073:
	movl	7480(%rsp), %eax
	movl	%r10d, 7488(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L2075
	movl	7456(%rsp), %eax
	testl	%eax, %eax
	jne	.L2074
.L2075:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, %r15d
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	%r15d, %ebp
.L2089:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13837
.L2085:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L2085
.L13837:
	testl	%ecx, %ecx
	je	.L2078
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L2087
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L2087
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L2087:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L2089
.L2078:
	cmpl	$2, %r9d
	jle	.L2074
	testl	%r10d, %r10d
	jne	.L2091
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L2092
	cmpw	$46, %dx
	je	.L2092
	cmpw	$47, %dx
	je	.L2092
	cmpw	$49, %dx
	je	.L2092
	cmpw	$113, %dx
	je	.L2092
.L2091:
	movl	7456(%rsp), %r9d
	testl	%r9d, %r9d
	jne	.L2074
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L2094
	cmpw	$46, %dx
	je	.L2094
	cmpw	$47, %dx
	je	.L2094
	cmpw	$49, %dx
	je	.L2094
	cmpw	$113, %dx
	je	.L2094
.L2074:
	cmpl	$8, %r15d
	movl	$8, %eax
	cmovge	%eax, %r15d
	cmpl	$1, 2100(%rsp)
	jle	.L2097
.L2119:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L13840
.L2104:
	movslq	%edx,%rbx
	movl	2100(%rsp), %esi
	salq	$2, %rbx
	cmpl	%esi, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L2104
.L13840:
	testl	%r12d, %r12d
	je	.L2097
	movslq	%r12d,%r13
	movq	%r13, %r11
	salq	$4, %r11
	addq	mov_optab(%rip), %r11
	movl	8(%r11), %edx
	cmpl	$210, %edx
	je	.L2106
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, %r15d
	jl	.L2106
	movslq	%edx,%r8
	cmpl	%ebp, 7488(%rsp)
	leaq	7440(%rsp), %rbx
	movq	insn_gen_function(,%r8,8), %rcx
	movq	%rcx, 5032(%rsp)
	jl	.L2106
	movl	7496(%rsp), %edx
.L2117:
	testl	%edx, %edx
	je	.L2111
	subl	%ebp, 52(%rbx)
.L2111:
	movl	16(%rbx), %edi
	testl	%edi, %edi
	je	.L2112
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15020:
	movq	%rax, %r14
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L2114
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L2115:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*5032(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L2116
	addl	%ebp, 52(%rbx)
.L2116:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L2117
.L2106:
	movl	mode_size(,%r13,4), %ebp
	movl	%ebp, 2100(%rsp)
	decl	%ebp
	jg	.L2119
.L2097:
	movl	7488(%rsp), %r15d
	testl	%r15d, %r15d
.L15373:
	je	.L1667
	jmp	.L15283
.L2114:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L2115
.L2112:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15020
.L2094:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7448(%rsp)
	jmp	.L2074
.L2092:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7472(%rsp)
	jmp	.L2091
.L2072:
	movl	$1, %edx
	jmp	.L2071
.L2070:
	movl	$1, %ecx
	jmp	.L2069
.L2068:
	movl	$1, %ecx
	jmp	.L2067
.L2045:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L2041
.L15511:
	movzbl	2(%r14), %edx
	cmpb	$16, %dl
	je	.L2039
	movq	8(%r14), %rbp
	cmpw	$59, (%rbp)
	je	.L15516
.L2039:
	cmpl	$55, %eax
	jne	.L2042
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L2041
.L15516:
	movq	8(%rbp), %rcx
	movq	%rcx, 8(%r14)
	cmpq	$0, 16(%rbp)
	je	.L2041
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r14
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L2041
.L2038:
	cmpq	$0, 16(%r14)
	jne	.L2046
	movq	8(%r14), %r14
	jmp	.L2041
.L2046:
	movq	24(%r14), %rsi
	testq	%rsi, %rsi
	je	.L2047
	movq	%rsi, %r14
	jmp	.L2041
.L2047:
	movq	8(%r14), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L2041
.L2035:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L2031
.L15510:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L2029
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L15517
.L2029:
	cmpl	$55, %eax
	jne	.L2032
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L2031
.L15517:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L2031
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L2031
.L2028:
	cmpq	$0, 16(%r13)
	jne	.L2036
	movq	8(%r13), %r13
	jmp	.L2031
.L2036:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L2037
	movq	%rsi, %r13
	jmp	.L2031
.L2037:
	movq	8(%r13), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L2031
.L2025:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L2021
.L15509:
	jne	.L2022
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L2021
.L2018:
	cmpq	$0, 16(%r12)
	jne	.L2026
	movq	8(%r12), %r12
	jmp	.L2021
.L2026:
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	je	.L2027
	movq	%rdi, %r12
	jmp	.L2021
.L2027:
	movq	8(%r12), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L2021
.L15508:
	xorl	%eax, %eax
	movq	%rdx, %rdi
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, 2152(%rsp)
	je	.L15518
.L1764:
	movl	$8, %edi
	call	size_int
	movl	$57, %edi
	movq	5120(%rsp), %rsi
	movq	%rax, %rdx
	movq	8(%rsi), %rbx
	movq	32(%rbx), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	5120(%rsp), %r9
	movq	%rax, %r15
	movl	32(%r9), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%r15, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movq	5120(%rsp), %rbp
	movq	$0, 2104(%rsp)
	movq	%rax, 2128(%rsp)
	movq	%rax, %r15
	movq	8(%rbp), %r10
	movl	48(%r10), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r12)
	movl	%eax, 2124(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r13)
	jne	.L15283
	movq	%r12, 2136(%rsp)
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L1890
	cmpl	$55, %eax
	je	.L15519
	cmpl	$63, %eax
	je	.L1897
	cmpl	$66, %eax
	je	.L1897
.L1893:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L1900
	cmpl	$55, %eax
	je	.L15520
.L1904:
	cmpl	$63, %eax
	je	.L1907
	cmpl	$66, %eax
	je	.L1907
.L1903:
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L1910
	cmpl	$55, %eax
	je	.L15521
.L1914:
	cmpl	$63, %eax
	je	.L1917
	cmpl	$66, %eax
	je	.L1917
.L1913:
	movq	2136(%rsp), %rax
	cmpw	$55, (%rax)
	jne	.L15283
	cmpw	$55, (%r13)
	jne	.L15283
	cmpq	$0, 2128(%rsp)
	je	.L15283
	movq	2128(%rsp), %rax
	cmpw	$46, (%rax)
	je	.L15522
.L1923:
	movl	2124(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 5064(%rsp)
	testl	%ebp, %ebp
	je	.L13831
.L2009:
	movslq	%ebp,%rdx
	movq	%rdx, %rax
	movq	%rdx, 5056(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L1997
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L2001
	movq	2128(%rsp), %r14
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r14)
	ja	.L1997
.L2001:
	movslq	%edx,%rcx
	leaq	(%rcx,%rcx,4), %r14
	movq	%rcx, 5048(%rsp)
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15523
.L2002:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15524
.L2003:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L2004
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	5064(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L1997
.L2004:
	call	get_last_insn
	movl	$1, %edx
	movq	2128(%rsp), %rsi
	movq	%rax, 5040(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15525
.L2005:
	movq	5048(%rsp), %rbp
	movq	2136(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r13, %rsi
	movq	%rbx, %rdx
	movq	5064(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14912
	movq	5040(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L1997:
	movq	5056(%rsp), %r10
	movl	mode_wider_mode(,%r10,4), %ebp
	testl	%ebp, %ebp
	jne	.L2009
.L13831:
	movq	2128(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$3, %ecx
	xorl	%edx, %edx
	movq	8(%r13), %r9
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	2136(%rsp), %r13
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%eax, %eax
	movq	%r9, (%rsp)
	movl	$4, %r9d
	movq	8(%r13), %r8
	call	emit_library_call
.L2007:
	cmpw	$46, (%r15)
	je	.L15526
	movq	8(%r12), %rsi
	movl	$4, %edi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movl	$4, %edi
	movq	%r15, %rcx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	2152(%rsp), %rdx
	movl	$4, %edi
	movq	%r15, %rcx
	movq	%rax, %rbp
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 2104(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L2011:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L2012
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%rbp, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L2012:
	cmpq	$0, 2104(%rsp)
	je	.L1667
	movq	2104(%rsp), %rdi
	call	emit_label
	jmp	.L1667
.L15526:
	movq	5120(%rsp), %r15
	movq	8(%r12), %rdi
	movl	32(%r15), %esi
	call	plus_constant_wide
	movq	2152(%rsp), %rdi
	movq	5120(%rsp), %r12
	movq	%rax, %rbp
	movl	32(%r12), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L2011
.L14912:
	call	emit_insn
	jmp	.L2007
.L15525:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L2005
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L2005
.L15524:
	xorl	%eax, %eax
	movq	%r13, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L1997
	jmp	.L2003
.L15523:
	xorl	%eax, %eax
	movq	2136(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L1997
	jmp	.L2002
.L15522:
	movl	8(%rax), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 2124(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	2124(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L1937:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13822
.L1933:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L1933
.L13822:
	testl	%ecx, %ecx
	je	.L1926
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L1935
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L1935
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L1935:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L1937
.L1926:
	decl	%r9d
	jg	.L1923
	movq	2136(%rsp), %r11
	movq	8(%r13), %rdi
	xorl	%ecx, %ecx
	movl	%r10d, %r14d
	movq	8(%r11), %rbx
	movq	%r13, 7464(%rsp)
	movq	%r11, 7440(%rsp)
	movl	$0, 7492(%rsp)
	movq	%rdi, 7472(%rsp)
	movl	$9, 2120(%rsp)
	movq	%rbx, 7448(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r13d
	cmpw	$1, %r13w
	jbe	.L1940
	cmpw	$88, %dx
	je	.L1940
	cmpw	$87, %dx
	je	.L1940
.L1939:
	movl	%ecx, 7456(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L1942
	cmpw	$88, %dx
	je	.L1942
	cmpw	$87, %dx
	je	.L1942
.L1941:
	movl	%ecx, 7480(%rsp)
	movl	$0, 7484(%rsp)
	movl	$0, 7460(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L1944
	cmpw	$87, %ax
	je	.L1944
.L1943:
	testl	%edx, %edx
	movl	%edx, 7496(%rsp)
	je	.L1945
	movl	%r10d, 7492(%rsp)
.L1945:
	movl	7480(%rsp), %eax
	movl	%r10d, 7488(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L1947
	movl	7456(%rsp), %eax
	testl	%eax, %eax
	jne	.L1946
.L1947:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 2124(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r13d
	cmovl	2124(%rsp), %ebp
.L1961:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13825
.L1957:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L1957
.L13825:
	testl	%ecx, %ecx
	je	.L1950
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L1959
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r13d, %eax
	cmpl	%eax, %ebp
	jl	.L1959
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L1959:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L1961
.L1950:
	cmpl	$2, %r9d
	jle	.L1946
	testl	%r10d, %r10d
	jne	.L1963
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L1964
	cmpw	$46, %dx
	je	.L1964
	cmpw	$47, %dx
	je	.L1964
	cmpw	$49, %dx
	je	.L1964
	cmpw	$113, %dx
	je	.L1964
.L1963:
	movl	7456(%rsp), %eax
	testl	%eax, %eax
	jne	.L1946
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L1966
	cmpw	$46, %dx
	je	.L1966
	cmpw	$47, %dx
	je	.L1966
	cmpw	$49, %dx
	je	.L1966
	cmpw	$113, %dx
	je	.L1966
.L1946:
	cmpl	$8, 2124(%rsp)
	movl	$8, %eax
	cmovl	2124(%rsp), %eax
	cmpl	$1, 2120(%rsp)
	movl	%eax, 2124(%rsp)
	jle	.L1969
.L1991:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r13d, %r13d
	testl	%edx, %edx
	je	.L13828
.L1976:
	movslq	%edx,%r9
	movl	2120(%rsp), %ebx
	salq	$2, %r9
	cmpl	%ebx, mode_size(%r9)
	cmovl	%edx, %r13d
	movl	mode_wider_mode(%r9), %edx
	testl	%edx, %edx
	jne	.L1976
.L13828:
	testl	%r13d, %r13d
	je	.L1969
	movslq	%r13d,%r14
	movq	%r14, %rsi
	salq	$4, %rsi
	addq	mov_optab(%rip), %rsi
	movl	8(%rsi), %edx
	cmpl	$210, %edx
	je	.L1978
	movl	mode_size(,%r14,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 2124(%rsp)
	jl	.L1978
	movslq	%edx,%rdi
	cmpl	%ebp, 7488(%rsp)
	leaq	7440(%rsp), %rbx
	movq	insn_gen_function(,%rdi,8), %r8
	movq	%r8, 5072(%rsp)
	jl	.L1978
	movl	7496(%rsp), %edx
.L1989:
	testl	%edx, %edx
	je	.L1983
	subl	%ebp, 52(%rbx)
.L1983:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L1984
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15019:
	movq	%rax, 2112(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L1986
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L1987:
	movq	%rax, %rsi
	movq	2112(%rsp), %rdi
	xorl	%eax, %eax
	call	*5072(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L1988
	addl	%ebp, 52(%rbx)
.L1988:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L1989
.L1978:
	movl	mode_size(,%r14,4), %eax
	movl	%eax, 2120(%rsp)
	decl	%eax
	jg	.L1991
.L1969:
	movl	7488(%rsp), %r11d
	testl	%r11d, %r11d
	je	.L2007
	jmp	.L15283
.L1986:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L1987
.L1984:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15019
.L1966:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7448(%rsp)
	jmp	.L1946
.L1964:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7472(%rsp)
	jmp	.L1963
.L1944:
	movl	$1, %edx
	jmp	.L1943
.L1942:
	movl	$1, %ecx
	jmp	.L1941
.L1940:
	movl	$1, %ecx
	jmp	.L1939
.L1917:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L1913
.L15521:
	movzbl	2(%r15), %edx
	cmpb	$16, %dl
	je	.L1911
	movq	8(%r15), %rbp
	cmpw	$59, (%rbp)
	je	.L15527
.L1911:
	cmpl	$55, %eax
	jne	.L1914
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L1913
.L15527:
	movq	8(%rbp), %r10
	movq	%r10, 8(%r15)
	cmpq	$0, 16(%rbp)
	je	.L1913
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r15, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r14, 2128(%rsp)
	jmp	.L1913
.L1910:
	cmpq	$0, 16(%r15)
	jne	.L1918
	movq	8(%r15), %rbp
	movq	%rbp, 2128(%rsp)
	jmp	.L1913
.L1918:
	movq	24(%r15), %r9
	testq	%r9, %r9
	movq	%r9, 2128(%rsp)
	jne	.L1913
	movq	8(%r15), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %rbx
	movq	%rbx, 2128(%rsp)
	jmp	.L1913
.L1907:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L1903
.L15520:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L1901
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L15528
.L1901:
	cmpl	$55, %eax
	jne	.L1904
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L1903
.L15528:
	movq	8(%rbp), %r8
	movq	%r8, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L1903
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L1903
.L1900:
	cmpq	$0, 16(%r13)
	jne	.L1908
	movq	8(%r13), %r13
	jmp	.L1903
.L1908:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L1909
	movq	%rsi, %r13
	jmp	.L1903
.L1909:
	movq	8(%r13), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L1903
.L1897:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L1893
.L15519:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L1893
.L1890:
	cmpq	$0, 16(%r12)
	jne	.L1898
	movq	8(%r12), %rax
	movq	%rax, 2136(%rsp)
	jmp	.L1893
.L1898:
	movq	24(%r12), %r11
	testq	%r11, %r11
	movq	%r11, 2136(%rsp)
	jne	.L1893
	movq	8(%r12), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdi
	movq	%rdi, 2136(%rsp)
	jmp	.L1893
.L15518:
	movq	5120(%rsp), %rcx
	movq	2152(%rsp), %r9
	movl	32(%rcx), %eax
	cmpl	%eax, 8(%r9)
	jge	.L1764
	movq	8(%rcx), %r11
	movl	48(%r11), %r15d
	shrl	$3, %r15d
	cmpb	$16, 2(%r12)
	jne	.L15283
	cmpb	$16, 2(%r13)
	jne	.L15283
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L1767
	cmpl	$55, %eax
	je	.L15529
.L1771:
	cmpl	$63, %eax
	je	.L1774
	cmpl	$66, %eax
	je	.L1774
.L1770:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L1777
	cmpl	$55, %eax
	je	.L15530
.L1781:
	cmpl	$63, %eax
	je	.L1784
	cmpl	$66, %eax
	je	.L1784
.L1780:
	movq	2152(%rsp), %rsi
	movzwl	(%rsi), %eax
	cmpl	$59, %eax
	je	.L1787
	cmpl	$55, %eax
	je	.L15531
.L1791:
	cmpl	$63, %eax
	je	.L1794
	cmpl	$66, %eax
	je	.L1794
.L1790:
	cmpw	$55, (%r12)
	jne	.L15283
	cmpw	$55, (%r13)
	jne	.L15283
	cmpq	$0, 2152(%rsp)
	je	.L15283
	movq	2152(%rsp), %rdi
	cmpw	$46, (%rdi)
	je	.L15532
.L1800:
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	movl	%r15d, %edx
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 5096(%rsp)
	testl	%ebp, %ebp
	je	.L13819
.L1886:
	movslq	%ebp,%r15
	movq	%r15, %rax
	movq	%r15, 5088(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L1874
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L1878
	movq	2152(%rsp), %r8
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r8)
	ja	.L1874
.L1878:
	movslq	%edx,%r15
	leaq	(%r15,%r15,4), %r14
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15533
.L1879:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15534
.L1880:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L1881
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	5096(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L1874
.L1881:
	call	get_last_insn
	movl	$1, %edx
	movq	2152(%rsp), %rsi
	movq	%rax, 5080(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15535
.L1882:
	movq	%r12, %rdi
	xorl	%eax, %eax
	movq	%r13, %rsi
	movq	%rbx, %rdx
	movq	5096(%rsp), %rcx
	call	*insn_gen_function(,%r15,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14913
	movq	5080(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L1874:
	movq	5088(%rsp), %r14
	movl	mode_wider_mode(,%r14,4), %ebp
	testl	%ebp, %ebp
	jne	.L1886
.L13819:
	movq	2152(%rsp), %rsi
	movl	$4, %edi
	jmp	.L15021
.L15535:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L1882
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L1882
.L15534:
	xorl	%eax, %eax
	movq	%r13, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L1874
	jmp	.L1880
.L15533:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L1874
	jmp	.L1879
.L15532:
	movl	8(%rdi), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, %r15d
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	%r15d, %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L1814:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13810
.L1810:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L1810
.L13810:
	testl	%ecx, %ecx
	je	.L1803
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L1812
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L1812
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L1812:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L1814
.L1803:
	decl	%r9d
	jg	.L1800
	movq	8(%r12), %rbx
	movq	8(%r13), %rdi
	xorl	%ecx, %ecx
	movq	%r12, 7376(%rsp)
	movl	$0, 7428(%rsp)
	movq	%r13, 7400(%rsp)
	movl	%r10d, %r14d
	movl	$9, 2148(%rsp)
	movq	%rbx, 7384(%rsp)
	movq	%rdi, 7408(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L1817
	cmpw	$88, %dx
	je	.L1817
	cmpw	$87, %dx
	je	.L1817
.L1816:
	movl	%ecx, 7392(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r13d
	cmpw	$1, %r13w
	jbe	.L1819
	cmpw	$88, %dx
	je	.L1819
	cmpw	$87, %dx
	je	.L1819
.L1818:
	movl	%ecx, 7416(%rsp)
	movl	$0, 7420(%rsp)
	movl	$0, 7396(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L1821
	cmpw	$87, %ax
	je	.L1821
.L1820:
	testl	%edx, %edx
	movl	%edx, 7432(%rsp)
	je	.L1822
	movl	%r10d, 7428(%rsp)
.L1822:
	movl	7416(%rsp), %eax
	movl	%r10d, 7424(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L1824
	movl	7392(%rsp), %ecx
	testl	%ecx, %ecx
	jne	.L1823
.L1824:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, %r15d
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	%r15d, %ebp
.L1838:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13813
.L1834:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L1834
.L13813:
	testl	%ecx, %ecx
	je	.L1827
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L1836
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L1836
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L1836:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L1838
.L1827:
	cmpl	$2, %r9d
	jle	.L1823
	testl	%r10d, %r10d
	jne	.L1840
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L1841
	cmpw	$46, %dx
	je	.L1841
	cmpw	$47, %dx
	je	.L1841
	cmpw	$49, %dx
	je	.L1841
	cmpw	$113, %dx
	je	.L1841
.L1840:
	movl	7392(%rsp), %ebp
	testl	%ebp, %ebp
	jne	.L1823
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L1843
	cmpw	$46, %dx
	je	.L1843
	cmpw	$47, %dx
	je	.L1843
	cmpw	$49, %dx
	je	.L1843
	cmpw	$113, %dx
	je	.L1843
.L1823:
	cmpl	$8, %r15d
	movl	$8, %eax
	cmovge	%eax, %r15d
	cmpl	$1, 2148(%rsp)
	jle	.L1846
.L1868:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L13816
.L1853:
	movslq	%edx,%rbx
	movl	2148(%rsp), %eax
	salq	$2, %rbx
	cmpl	%eax, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L1853
.L13816:
	testl	%r12d, %r12d
	je	.L1846
	movslq	%r12d,%r13
	movq	%r13, %rsi
	salq	$4, %rsi
	addq	mov_optab(%rip), %rsi
	movl	8(%rsi), %edx
	cmpl	$210, %edx
	je	.L1855
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, %r15d
	jl	.L1855
	movslq	%edx,%rdi
	cmpl	%ebp, 7424(%rsp)
	leaq	7376(%rsp), %rbx
	movq	insn_gen_function(,%rdi,8), %r11
	movq	%r11, 5104(%rsp)
	jl	.L1855
	movl	7432(%rsp), %edx
.L1866:
	testl	%edx, %edx
	je	.L1860
	subl	%ebp, 52(%rbx)
.L1860:
	movl	16(%rbx), %ecx
	testl	%ecx, %ecx
	je	.L1861
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15018:
	movq	%rax, %r14
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L1863
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L1864:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*5104(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L1865
	addl	%ebp, 52(%rbx)
.L1865:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L1866
.L1855:
	movl	mode_size(,%r13,4), %edx
	movl	%edx, 2148(%rsp)
	decl	%edx
	jg	.L1868
.L1846:
	movl	7424(%rsp), %eax
	testl	%eax, %eax
	jmp	.L15373
.L1863:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L1864
.L1861:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15018
.L1843:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7384(%rsp)
	jmp	.L1823
.L1841:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7408(%rsp)
	jmp	.L1840
.L1821:
	movl	$1, %edx
	jmp	.L1820
.L1819:
	movl	$1, %ecx
	jmp	.L1818
.L1817:
	movl	$1, %ecx
	jmp	.L1816
.L1794:
	movq	2152(%rsp), %r8
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	2152(%rsp), %rbp
	movq	16(%rbp), %rdi
	movq	%rax, 8(%rbp)
	call	protect_from_queue
	movq	%rax, 16(%rbp)
	jmp	.L1790
.L15531:
	movzbl	2(%rsi), %edx
	cmpb	$16, %dl
	je	.L1788
	movq	8(%rsi), %rbp
	cmpw	$59, (%rbp)
	je	.L15536
.L1788:
	cmpl	$55, %eax
	jne	.L1791
	movq	2152(%rsp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	movq	2152(%rsp), %rbx
	movq	%rax, 8(%rbx)
	jmp	.L1790
.L15536:
	movq	8(%rbp), %r10
	movq	%r10, 8(%rsi)
	cmpq	$0, 16(%rbp)
	je	.L1790
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	2152(%rsp), %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r14, 2152(%rsp)
	jmp	.L1790
.L1787:
	movq	2152(%rsp), %rsi
	cmpq	$0, 16(%rsi)
	jne	.L1795
	movq	8(%rsi), %rax
	movq	%rax, 2152(%rsp)
	jmp	.L1790
.L1795:
	movq	2152(%rsp), %rdi
	movq	24(%rdi), %rsi
	testq	%rsi, %rsi
	je	.L15537
.L15017:
	movq	%rsi, 2152(%rsp)
	jmp	.L1790
.L15537:
	movq	2152(%rsp), %r11
	movq	8(%r11), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	2152(%rsp), %r9
	movq	%rax, %rdi
	movq	8(%r9), %rsi
	movq	%rax, 24(%r9)
	call	gen_move_insn
	movq	2152(%rsp), %r14
	movq	%rax, %rdi
	movq	16(%r14), %rsi
	call	emit_insn_before
	movq	24(%r14), %rsi
	jmp	.L15017
.L1784:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L1780
.L15530:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L1778
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L15538
.L1778:
	cmpl	$55, %eax
	jne	.L1781
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L1780
.L15538:
	movq	8(%rbp), %r14
	movq	%r14, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L1780
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L1780
.L1777:
	cmpq	$0, 16(%r13)
	jne	.L1785
	movq	8(%r13), %r13
	jmp	.L1780
.L1785:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L1786
	movq	%rsi, %r13
	jmp	.L1780
.L1786:
	movq	8(%r13), %rbp
	movzbl	2(%rbp), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L1780
.L1774:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L1770
.L15529:
	jne	.L1771
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L1770
.L1767:
	cmpq	$0, 16(%r12)
	jne	.L1775
	movq	8(%r12), %r12
	jmp	.L1770
.L1775:
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	je	.L1776
	movq	%rdi, %r12
	jmp	.L1770
.L1776:
	movq	8(%r12), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L1770
	.p2align 6,,7
.L1756:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L1752
.L15506:
	jne	.L1753
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L1752
	.p2align 6,,7
.L1749:
	cmpq	$0, 16(%r12)
	jne	.L1757
	movq	8(%r12), %r12
	jmp	.L1752
.L1757:
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	je	.L1758
	movq	%rdi, %r12
	jmp	.L1752
.L1758:
	movq	8(%r12), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L1752
	.p2align 6,,7
.L15505:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	5120(%rsp), %rdi
	movzbl	2(%r12), %edx
	movq	%rax, %rsi
	jmp	.L15016
.L1728:
	movl	(%r12), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L15539
	movzbl	2(%r12), %edx
	movq	5120(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	%r12, %rsi
	call	expand_expr
	cmpw	$51, (%r12)
	movq	%rax, %r13
	je	.L15540
.L1746:
	movzwl	(%r13), %edx
	leal	-56(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L1747
	cmpw	$46, %dx
	je	.L1747
	cmpw	$47, %dx
	je	.L1747
	cmpw	$49, %dx
	je	.L1747
	cmpw	$113, %dx
	jne	.L1693
	jmp	.L1747
	.p2align 6,,7
.L15540:
	cmpl	$63, 8(%r12)
	jle	.L1693
	jmp	.L1746
.L15539:
	movq	5120(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	8(%r12), %rdi
	movzbl	3(%r12), %edx
	movq	%rax, %rsi
	shrb	$2, %dl
	andl	$1, %edx
	jmp	.L15023
.L1737:
	movl	$1, %ebx
	jmp	.L1731
.L1729:
	xorl	%ebx, %ebx
	jmp	.L1731
.L1735:
	movq	8(%r12), %rdi
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L1737
	movq	16(%r12), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L1731
	jmp	.L1737
	.p2align 6,,7
.L15504:
	movzbl	2(%r12), %eax
	cmpb	$16, %al
	je	.L1721
	movl	cse_not_expected(%rip), %r14d
	movq	5120(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	%al, %edx
	testl	%r14d, %r14d
	cmove	%r12, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	call	expand_expr
	movq	%rax, %r13
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L1747
	testb	%al, %al
	je	.L1747
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L15290
	.p2align 6,,7
.L15503:
	cmpb	$16, 2(%r12)
	jne	.L1694
	call	gen_label_rtx
	movq	%rax, %r13
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r14
	testq	%rbx, %rbx
	jne	.L1698
.L13803:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L1700
	cmpl	$55, %eax
	je	.L15541
.L1704:
	cmpl	$63, %eax
	je	.L1707
	cmpl	$66, %eax
	je	.L1707
.L1703:
	movq	5120(%rsp), %r15
	xorl	%eax, %eax
	movq	%r13, %rsi
	incl	inhibit_defer_pop(%rip)
	movq	32(%r15), %rdi
	call	jumpifnot
	movq	40(%r15), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movl	%ebp, %edx
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L1713
.L13805:
	movq	%r14, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r13, %rdi
	call	emit_label
	xorl	%eax, %eax
	movl	%ebp, %edx
	movq	5120(%rsp), %r13
	movq	%r12, %rsi
	movq	48(%r13), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L1718
.L13807:
	movq	%r14, %rdi
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L1667
.L1718:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rbp
	movq	%rax, 16(%rbx)
	testq	%rbp, %rbp
	movq	%rbp, pending_chain(%rip)
	movq	%rbp, %rbx
	jne	.L1718
	jmp	.L13807
	.p2align 6,,7
.L1713:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r11
	movq	%rax, 16(%rbx)
	testq	%r11, %r11
	movq	%r11, pending_chain(%rip)
	movq	%r11, %rbx
	jne	.L1713
	jmp	.L13805
.L1707:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L1703
.L15541:
	jne	.L1704
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L1703
.L1700:
	cmpq	$0, 16(%r12)
	jne	.L1708
	movq	8(%r12), %r12
	jmp	.L1703
.L1708:
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	je	.L1709
	movq	%rdi, %r12
	jmp	.L1703
.L1709:
	movq	8(%r12), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L1703
	.p2align 6,,7
.L1698:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r9
	movq	%rax, 16(%rbx)
	testq	%r9, %r9
	movq	%r9, pending_chain(%rip)
	movq	%r9, %rbx
	jne	.L1698
	jmp	.L13803
	.p2align 6,,7
.L15502:
	movq	32(%rdx), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L1690
.L13801:
	movq	5120(%rsp), %rax
	movq	%r12, %rsi
	movl	%ebp, %edx
	movq	40(%rax), %rdi
	xorl	%eax, %eax
	call	store_expr
	jmp	.L1667
.L1690:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rsi
	movq	%rax, 16(%rbx)
	testq	%rsi, %rsi
	movq	%rsi, pending_chain(%rip)
	movq	%rsi, %rbx
	jne	.L1690
	jmp	.L13801
.L15501:
	movq	16(%rdi), %rdx
	cmpw	$46, (%rdx)
	jne	.L1683
	movq	8(%rdi), %rax
	cmpq	virtual_incoming_args_rtx(%rip), %rax
	je	.L1682
	cmpq	virtual_stack_vars_rtx(%rip), %rax
	jne	.L1683
	jmp	.L1682
	.p2align 6,,7
.L1675:
	movq	5120(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movl	%r14d, %r9d
	movl	%ebx, %ecx
	movl	5116(%rsp), %r8d
	movq	56(%rsp), %rdi
	movl	%r15d, %edx
	movq	%rax, %r13
	movl	%ebp, %esi
	movl	%r8d, (%rsp)
	movq	%rax, %r8
	xorl	%eax, %eax
	call	store_bit_field
	xorl	%edx, %edx
	testl	%edx, %edx
	je	.L1667
	movl	2164(%rsp), %esi
	testl	%esi, %esi
	je	.L1678
	movq	56(%rsp), %r9
	movl	(%r9), %eax
	andl	$134283263, %eax
	cmpl	$134217783, %eax
	je	.L1678
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L1679
	movl	2164(%rsp), %edx
	xorl	%esi, %esi
	movl	$46, %edi
	call	gen_rtx
	xorl	%edx, %edx
	movq	%r13, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	expand_and
	jmp	.L1667
.L1679:
	movzbl	2(%r13), %r14d
	movl	$0, %r15d
	testl	%r14d, %r14d
	cmove	%r15d, %r14d
	xorl	%esi, %esi
	movslq	%r14d,%rcx
	movl	mode_size(,%rcx,4), %edi
	sall	$3, %edi
	subl	%ebp, %edi
	call	build_int_2_wide
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	%rax, %rbp
	movl	%r14d, %esi
	movq	%r13, %rdx
	movq	%rax, %rcx
	movl	$77, %edi
	xorl	%eax, %eax
	call	expand_shift
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movl	$78, %edi
	movl	%r14d, %esi
	movq	%rbp, %rcx
	xorl	%eax, %eax
	call	expand_shift
	jmp	.L1667
.L1678:
	movl	5116(%rsp), %r13d
	movq	56(%rsp), %rdi
	movl	%ebp, %esi
	movl	%r15d, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	xorl	%eax, %eax
	movl	$0, (%rsp)
	movl	%r14d, 8(%rsp)
	movl	%r13d, 16(%rsp)
	call	extract_bit_field
	jmp	.L1667
.L15500:
	movq	56(%rsp), %r11
	movzwl	(%r11), %eax
	cmpw	$51, %ax
	je	.L1671
	cmpw	$53, %ax
	jne	.L1670
.L1671:
	movq	56(%rsp), %r12
	xorl	%edx, %edx
	movzbl	2(%r12), %edi
	movslq	%edi,%rbx
	movl	mode_size(,%rbx,4), %esi
	call	assign_stack_temp
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	copy_rtx
	movq	56(%rsp), %rdx
	movb	$16, 2(%rax)
	movq	%rax, %r12
	movzbq	2(%rdx), %r10
	movl	mode_size(,%r10,4), %eax
	sall	$3, %eax
	cmpl	%eax, %ebp
	je	.L1672
	movq	%rbx, %rdi
	movq	%rdx, %rsi
	call	emit_move_insn
.L1672:
	movl	5116(%rsp), %eax
	movq	5120(%rsp), %r8
	movq	%r12, %rdi
	movl	%ebp, %esi
	movl	%r15d, %edx
	movl	$16, %ecx
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	%r14d, 8(%rsp)
	movl	%eax, 16(%rsp)
	xorl	%eax, %eax
	call	store_field
	movq	%rbx, %rsi
	movq	56(%rsp), %rdi
	jmp	.L15022
.L15499:
	testb	$4, 18(%r15)
	je	.L1659
.L1660:
	movq	56(%rsp), %rdi
	cmpb	$16, 2(%rdi)
	je	.L15542
	movq	56(%rsp), %rdi
	movq	const0_rtx(%rip), %rsi
	call	emit_move_insn
	jmp	.L1664
.L15542:
	xorl	%esi, %esi
	movl	$46, %edi
	xorl	%eax, %eax
	call	gen_rtx
	movl	$4, %r9d
	movq	56(%rsp), %r14
	movq	const0_rtx(%rip), %r8
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	movq	memset_libfunc(%rip), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	xorl	%eax, %eax
	movq	%r8, (%rsp)
	movq	8(%r14), %r8
	call	emit_library_call
	jmp	.L1664
.L15455:
	movl	5412(%rsp), %edi
	call	gen_reg_rtx
	movq	%rax, 56(%rsp)
	jmp	.L1111
.L15454:
	cmpw	$55, (%r12)
	jne	.L1164
	testb	$32, 17(%r15)
.L15287:
	je	.L1114
	jmp	.L1164
	.p2align 6,,7
.L15453:
	movq	8(%r12), %r12
	cmpw	$51, (%r12)
	jne	.L1161
	cmpl	$63, 8(%r12)
	jg	.L1161
.L14907:
	xorl	%ebx, %ebx
	jmp	.L1114
.L1128:
	movq	32(%r15), %rsi
	movq	%rbp, %rdi
.L15286:
	xorl	%eax, %eax
	call	safe_from_p
.L15006:
	movl	%eax, %ebx
	jmp	.L1114
.L1130:
	movq	32(%r15), %rsi
	xorl	%eax, %eax
	movq	%rbp, %rdi
	xorl	%ebx, %ebx
	call	safe_from_p
	testl	%eax, %eax
	je	.L1114
	movq	%rbp, %rdi
	movq	40(%r15), %rsi
.L15288:
	xorl	%eax, %eax
	call	safe_from_p
	testl	%eax, %eax
	jmp	.L15287
	.p2align 6,,7
.L1133:
	movzbl	%dl, %eax
	subl	$39, %eax
	cmpl	$67, %eax
	ja	.L1134
	mov	%eax, %ebx
	jmp	*.L1149(,%rbx,8)
	.section	.rodata
	.align 8
	.align 4
.L1149:
	.quad	.L1136
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1147
	.quad	.L1138
	.quad	.L15283
	.quad	.L1145
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1134
	.quad	.L1146
	.quad	.L1143
	.quad	.L1135
	.text
.L1135:
	movq	32(%r15), %rdi
	call	staticp
	jmp	.L15006
.L1136:
	xorl	%ebx, %ebx
	cmpw	$55, %cx
	je	.L1114
.L1134:
	testq	%r12, %r12
	jne	.L14852
	movzbl	%dl, %r8d 
	xorl	%ebx, %ebx
	salq	$2, %r8
	addq	tree_code_length(%rip), %r8
	movl	(%r8), %r13d
	cmpl	%r13d, %ebx
	jge	.L1119
.L1157:
	movslq	%ebx,%rdx
	movq	32(%r15,%rdx,8), %rsi
	testq	%rsi, %rsi
	jne	.L15543
.L1154:
	incl	%ebx
	cmpl	%r13d, %ebx
	jl	.L1157
	jmp	.L1119
	.p2align 6,,7
.L15543:
	xorl	%eax, %eax
	movq	%rbp, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L1154
	jmp	.L14907
.L1147:
	movq	%rbp, %rdi
	movq	40(%r15), %rsi
	jmp	.L15286
.L1138:
	movq	48(%r15), %r12
	testq	%r12, %r12
	jne	.L14852
	cmpw	$51, %cx
	je	.L15544
.L1142:
	cmpw	$55, %cx
	jne	.L1134
	jmp	.L14907
.L15544:
	cmpl	$63, 8(%rbp)
	jle	.L14907
	jmp	.L1142
.L1145:
	movq	40(%r15), %r12
	jmp	.L1134
.L1146:
	movq	48(%r15), %r12
	jmp	.L1134
.L1143:
	movq	40(%r15), %r12
	xorl	%ebx, %ebx
	jmp	.L15005
	.p2align 6,,7
.L1122:
	cmpb	$3, %dl
	jne	.L14907
	movq	32(%r15), %rsi
	xorl	%ebx, %ebx
	testq	%rsi, %rsi
	jne	.L15545
.L1125:
	movq	(%r15), %rsi
	movq	%rbp, %rdi
	testq	%rsi, %rsi
	jne	.L15288
	jmp	.L1164
.L15545:
	xorl	%eax, %eax
	movq	%rbp, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L1114
	jmp	.L1125
	.p2align 6,,7
.L15452:
	movq	8(%rbp), %rax
	movq	virtual_outgoing_args_rtx(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L1164
	cmpw	$63, (%rax)
	jne	.L1117
	cmpq	%rdx, 8(%rax)
	jne	.L1117
	jmp	.L1164
	.p2align 6,,7
.L15451:
	movq	8(%rbp), %rbp
	movl	(%rbp), %ecx
	cmpw	$51, %cx
	jne	.L1115
	cmpl	$63, 8(%rbp)
	jg	.L1115
	jmp	.L14907
	.p2align 6,,7
.L3780:
	movq	32(%r15), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L3784
.L13944:
	leaq	40(%r15), %rax
	movq	56(%rsp), %rsi
	movl	5408(%rsp), %r15d
	testl	%r15d, %r15d
	je	.L3789
	movq	const0_rtx(%rip), %rsi
.L3789:
	movq	(%rax), %rdi
	jmp	.L15404
.L3784:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rsi
	movq	%rax, 16(%rbx)
	testq	%rsi, %rsi
	movq	%rsi, pending_chain(%rip)
	movq	%rsi, %rbx
	jne	.L3784
	jmp	.L13944
.L10200:
	movq	32(%r15), %r14
	movq	%r14, 3176(%rsp)
	movq	40(%r15), %rsi
	movq	$0, 320(%rsp)
	movq	%rsi, 2800(%rsp)
	movzbl	16(%r14), %edx
	movq	8(%r14), %rbx
	cmpb	$33, %dl
	je	.L10201
	cmpb	$35, %dl
	je	.L10201
	cmpb	$34, %dl
	je	.L10201
	movq	%r15, %rdi
	xorl	%eax, %eax
	call	preexpand_calls
	movq	3176(%rsp), %rdi
	movzbl	16(%rdi), %edx
.L10201:
	movl	5408(%rsp), %ecx
	testl	%ecx, %ecx
	je	.L10202
	cmpb	$37, %dl
	je	.L15546
.L10202:
	cmpq	$0, 128(%rbx)
	je	.L11191
	leal	-33(%rdx), %r10d
	cmpb	$1, %r10b
	jbe	.L11194
	cmpb	$50, %dl
	je	.L11194
	cmpb	$47, %dl
	je	.L11194
	cmpb	$37, %dl
	je	.L11194
	xorl	%eax, %eax
	cmpb	$42, %dl
	je	.L11194
.L11195:
	testl	%eax, %eax
	je	.L11192
	movq	2800(%rsp), %r11
	movzbl	16(%r11), %ecx
	leal	-33(%rcx), %esi
	cmpb	$1, %sil
	jbe	.L11197
	cmpb	$50, %cl
	je	.L11197
	cmpb	$47, %cl
	je	.L11197
	cmpb	$37, %cl
	je	.L11197
	xorl	%eax, %eax
	cmpb	$42, %cl
	je	.L11197
.L11198:
	testl	%eax, %eax
	jne	.L11191
.L11192:
	movq	3176(%rsp), %rdi
	call	stabilize_reference
	movq	%rax, 2928(%rsp)
	movq	128(%rbx), %rcx
	movq	$0, 544(%rsp)
	testq	%rcx, %rcx
	movq	%rcx, 600(%rsp)
	je	.L14619
.L11660:
	movq	600(%rsp), %rbx
	movq	32(%rbx), %rcx
	cmpb	$3, 16(%rcx)
	je	.L15547
	movq	8(%rcx), %rbp
	movq	2928(%rsp), %rdx
	movl	$37, %edi
	xorl	%eax, %eax
	movq	%rbp, %rsi
	call	build
	movq	%rbp, %rdi
	movq	%rax, %r12
	call	int_size_in_bytes
	xorl	%edx, %edx
	movzbl	44(%rbp), %edi
	movl	%eax, %esi
	call	assign_stack_temp
	movzbl	44(%rbp), %edi
	movq	8(%rax), %rsi
	movq	%rax, %rbx
	xorl	%eax, %eax
	call	memory_address_p
	testl	%eax, %eax
	je	.L15548
.L11205:
	movq	%rbp, %rsi
	xorl	%edx, %edx
	movl	$105, %edi
	movq	%rbx, %rcx
	xorl	%eax, %eax
	call	build
	movq	544(%rsp), %rdx
	movq	%r12, %rdi
	movq	%rax, %rsi
	xorl	%r12d, %r12d
	call	tree_cons
	movq	%rax, 544(%rsp)
	movq	32(%rax), %rdi
	movq	24(%rax), %r15
	movzbl	16(%r15), %eax
	movq	40(%rdi), %rbp
	cmpb	$44, %al
	je	.L15549
	cmpb	$48, %al
	je	.L15550
.L11214:
	xorl	%r13d, %r13d
	testl	%r13d, %r13d
	je	.L11241
	cmpw	$55, (%rbp)
	je	.L15551
.L11241:
	movzwl	(%rbp), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L11249
	mov	%eax, %esi
	jmp	*.L11258(,%rsi,8)
	.section	.rodata
	.align 8
	.align 4
.L11258:
	.quad	.L11252
	.quad	.L11249
	.quad	.L11249
	.quad	.L11249
	.quad	.L11257
	.quad	.L11249
	.quad	.L11249
	.quad	.L11249
	.quad	.L11255
	.quad	.L11255
	.quad	.L11249
	.quad	.L11255
	.text
.L11252:
	movq	8(%rbp), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %ebx
.L11251:
	testl	%ebx, %ebx
	je	.L11248
	movzbl	2(%rbp), %eax
	cmpb	$16, %al
	je	.L11260
	testb	%al, %al
	jne	.L15552
.L11260:
	movzbl	2(%rbp), %edx
	movq	%r15, %rdi
	xorl	%esi, %esi
.L15203:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L15363:
	movq	%rax, %r13
.L11267:
	movl	$1, %r12d
.L11213:
	cmpq	%rbp, %r13
	je	.L11201
	cmpb	$0, 16(%r15)
	je	.L11201
	movzwl	(%rbp), %eax
	cmpl	$59, %eax
	je	.L11269
	cmpl	$55, %eax
	je	.L15553
.L11273:
	cmpl	$63, %eax
	je	.L11276
	cmpl	$66, %eax
	je	.L11276
.L11272:
	movzbl	2(%r13), %eax
	movzbl	2(%rbp), %ecx
	cmpb	%cl, %al
	je	.L11279
	testb	%al, %al
	je	.L11279
	movq	8(%r15), %rdi
	movzbl	17(%rdi), %ebx
	shrb	$6, %bl
	movl	%ebx, %edx
	andl	$1, %edx
	testl	%r12d, %r12d
	je	.L11280
	movzbl	%cl, %edi
	movq	%r13, %rsi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%rbp, %rdi
	movq	%rax, %rsi
.L15209:
	call	emit_move_insn
.L11201:
	movq	600(%rsp), %r13
	movq	(%r13), %rbp
	testq	%rbp, %rbp
	movq	%rbp, 600(%rsp)
	jne	.L11660
.L14619:
	movq	544(%rsp), %r11
	movq	3176(%rsp), %rsi
	movq	%r11, 320(%rsp)
	movzbl	16(%rsi), %edx
.L11191:
	xorl	%ebx, %ebx
	movq	$0, 56(%rsp)
	cmpl	$0, 5408(%rsp)
	sete	%bl
	testb	%dl, %dl
	movl	%ebx, 2796(%rsp)
	je	.L15554
	leal	-37(%rdx), %r14d
	cmpb	$1, %r14b
	jbe	.L11665
	cmpb	$42, %dl
	je	.L15555
.L11664:
	cmpq	$0, 56(%rsp)
	je	.L15556
.L12181:
	cmpb	$35, %dl
	je	.L15557
	movq	2800(%rsp), %rax
	movzbl	16(%rax), %ecx
.L12182:
	cmpb	$44, %cl
	movl	$0, 540(%rsp)
	je	.L15558
	cmpb	$48, %cl
	je	.L15559
.L12191:
	movl	2796(%rsp), %r13d
	testl	%r13d, %r13d
	je	.L12218
	movq	56(%rsp), %rdi
	cmpw	$55, (%rdi)
	je	.L15560
.L12218:
	movq	56(%rsp), %r15
	movzwl	(%r15), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L12226
	mov	%eax, %edi
	jmp	*.L12235(,%rdi,8)
	.section	.rodata
	.align 8
	.align 4
.L12235:
	.quad	.L12229
	.quad	.L12226
	.quad	.L12226
	.quad	.L12226
	.quad	.L12234
	.quad	.L12226
	.quad	.L12226
	.quad	.L12226
	.quad	.L12232
	.quad	.L12232
	.quad	.L12226
	.quad	.L12232
	.text
.L12229:
	movq	56(%rsp), %r12
	xorl	%eax, %eax
	movq	8(%r12), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L12228:
	testl	%ebx, %ebx
	je	.L12225
	movq	56(%rsp), %rbx
	movzbl	2(%rbx), %eax
	cmpb	$16, %al
	je	.L12237
	testb	%al, %al
	jne	.L15561
.L12237:
	movq	56(%rsp), %rbx
	movq	2800(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	2(%rbx), %edx
.L15220:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L15366:
	movq	%rax, %r12
.L12244:
	movl	$1, 540(%rsp)
.L12190:
	cmpq	56(%rsp), %r12
	je	.L12245
	movq	2800(%rsp), %r10
	cmpb	$0, 16(%r10)
	je	.L12245
	movq	56(%rsp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$59, %eax
	je	.L12246
	cmpl	$55, %eax
	je	.L15562
.L12250:
	cmpl	$63, %eax
	je	.L12253
	cmpl	$66, %eax
	je	.L12253
.L12249:
	movq	56(%rsp), %rbx
	movzbl	2(%r12), %eax
	movzbl	2(%rbx), %ecx
	cmpb	%cl, %al
	je	.L12256
	testb	%al, %al
	je	.L12256
	movq	2800(%rsp), %rbp
	movl	540(%rsp), %eax
	movq	8(%rbp), %r10
	movzbl	17(%r10), %r8d
	shrb	$6, %r8b
	movl	%r8d, %edx
	andl	$1, %edx
	testl	%eax, %eax
	je	.L12257
	movzbl	%cl, %edi
	movq	%r12, %rsi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%rbx, %rdi
	movq	%rax, %r12
.L15227:
	movq	%r12, %rsi
	call	emit_move_insn
.L12245:
	movl	540(%rsp), %edx
	testl	%edx, %edx
	cmove	56(%rsp), %r12
.L12189:
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	preserve_temp_slots
	xorl	%eax, %eax
	call	free_temp_slots
	movq	%r12, 56(%rsp)
.L11663:
	cmpq	$0, 320(%rsp)
	je	.L581
.L13615:
	movq	320(%rsp), %r12
	xorl	%r13d, %r13d
	movq	24(%r12), %r14
	movq	32(%r12), %rdi
	movq	%rdi, 2568(%rsp)
	movzbl	16(%r14), %edx
	testb	%dl, %dl
	je	.L15563
	leal	-37(%rdx), %ebp
	cmpb	$1, %bpl
	jbe	.L12643
	cmpb	$42, %dl
	je	.L15564
.L12642:
	testq	%r13, %r13
	je	.L15565
.L13159:
	cmpb	$35, %dl
	je	.L15566
	movq	2568(%rsp), %rsi
	movzbl	16(%rsi), %eax
.L13160:
	cmpb	$44, %al
	movl	$0, 316(%rsp)
	je	.L15567
	cmpb	$48, %al
	je	.L15568
.L13169:
	xorl	%ecx, %ecx
	testl	%ecx, %ecx
	je	.L13196
	cmpw	$55, (%r13)
	je	.L15569
.L13196:
	movzwl	(%r13), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L13204
	mov	%eax, %r12d
	jmp	*.L13213(,%r12,8)
	.section	.rodata
	.align 8
	.align 4
.L13213:
	.quad	.L13207
	.quad	.L13204
	.quad	.L13204
	.quad	.L13204
	.quad	.L13212
	.quad	.L13204
	.quad	.L13204
	.quad	.L13204
	.quad	.L13210
	.quad	.L13210
	.quad	.L13204
	.quad	.L13210
	.text
.L13207:
	movq	8(%r13), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %ebx
.L13206:
	testl	%ebx, %ebx
	je	.L13203
	movzbl	2(%r13), %eax
	cmpb	$16, %al
	je	.L13215
	testb	%al, %al
	jne	.L15570
.L13215:
	movzbl	2(%r13), %edx
	movq	2568(%rsp), %rdi
	xorl	%esi, %esi
.L15238:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L15369:
	movq	%rax, %r12
.L13222:
	movl	$1, 316(%rsp)
.L13168:
	cmpq	%r13, %r12
	je	.L13223
	movq	2568(%rsp), %r15
	cmpb	$0, 16(%r15)
	je	.L13223
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L13224
	cmpl	$55, %eax
	je	.L15571
.L13228:
	cmpl	$63, %eax
	je	.L13231
	cmpl	$66, %eax
	je	.L13231
.L13227:
	movzbl	2(%r12), %eax
	movzbl	2(%r13), %ecx
	cmpb	%cl, %al
	je	.L13234
	testb	%al, %al
	je	.L13234
	movq	2568(%rsp), %r9
	movl	316(%rsp), %r8d
	movq	8(%r9), %rbx
	movzbl	17(%rbx), %edi
	shrb	$6, %dil
	movl	%edi, %edx
	andl	$1, %edx
	testl	%r8d, %r8d
	je	.L13235
	movq	%r12, %rsi
	movzbl	%cl, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%rax, %r12
.L13490:
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	emit_move_insn
.L13223:
	movl	316(%rsp), %edi
	testl	%edi, %edi
	cmove	%r13, %r12
.L13167:
	movq	%r12, %rdi
.L15244:
	xorl	%eax, %eax
	call	preserve_temp_slots
	xorl	%eax, %eax
	call	free_temp_slots
.L12641:
	movq	320(%rsp), %r12
	movq	(%r12), %r13
	testq	%r13, %r13
	movq	%r13, 320(%rsp)
	jne	.L13615
	jmp	.L581
.L13235:
	movq	%r13, %rdi
	movq	%r12, %rsi
	xorl	%eax, %eax
	call	convert_move
	jmp	.L13223
.L13234:
	cmpb	$16, %al
	jne	.L13490
	movq	2568(%rsp), %rdi
	cmpb	$28, 16(%rdi)
	je	.L15572
	cmpb	$16, %al
	jne	.L13490
	movq	2568(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, 216(%rsp)
	call	expr_size
	movq	%rax, %r14
	movq	2568(%rsp), %rax
	movq	8(%rax), %rbx
	movl	48(%rbx), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r13)
	movl	%eax, 212(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r13, 224(%rsp)
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L13493
	cmpl	$55, %eax
	je	.L15573
	cmpl	$63, %eax
	je	.L13500
	cmpl	$66, %eax
	je	.L13500
.L13496:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L13503
	cmpl	$55, %eax
	je	.L15574
.L13507:
	cmpl	$63, %eax
	je	.L13510
	cmpl	$66, %eax
	je	.L13510
.L13506:
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L13513
	cmpl	$55, %eax
	je	.L15575
.L13517:
	cmpl	$63, %eax
	je	.L13520
	cmpl	$66, %eax
	je	.L13520
.L13516:
	movq	224(%rsp), %rax
	cmpw	$55, (%rax)
	jne	.L15283
	movq	216(%rsp), %rdi
	cmpw	$55, (%rdi)
	jne	.L15283
	testq	%r14, %r14
	je	.L15283
	cmpw	$46, (%r14)
	je	.L15576
.L13526:
	movl	212(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 2360(%rsp)
	testl	%ebp, %ebp
	je	.L14841
.L13612:
	movslq	%ebp,%rax
	movq	%rax, 2352(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L13600
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L13604
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r14)
	ja	.L13600
.L13604:
	movslq	%edx,%r10
	leaq	(%r10,%r10,4), %r15
	movq	%r10, 2344(%rsp)
	salq	$4, %r15
	movq	insn_operand_predicate(%r15), %rdx
	testq	%rdx, %rdx
	jne	.L15577
.L13605:
	movq	insn_operand_predicate+8(%r15), %rdx
	testq	%rdx, %rdx
	jne	.L15578
.L13606:
	movq	insn_operand_predicate+24(%r15), %rdx
	testq	%rdx, %rdx
	je	.L13607
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	2360(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L13600
.L13607:
	call	get_last_insn
	movl	$1, %edx
	movq	%r14, %rsi
	movq	%rax, 2336(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r15), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15579
.L13608:
	movq	2344(%rsp), %rbp
	movq	224(%rsp), %rdi
	xorl	%eax, %eax
	movq	216(%rsp), %rsi
	movq	%rbx, %rdx
	movq	2360(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14993
	movq	2336(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L13600:
	movq	2352(%rsp), %rdx
	movl	mode_wider_mode(,%rdx,4), %ebp
	testl	%ebp, %ebp
	jne	.L13612
.L14841:
	movq	%r14, %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$3, %ecx
	xorl	%edx, %edx
	movq	216(%rsp), %rsi
	movq	memcpy_libfunc(%rip), %rdi
	movq	8(%rsi), %r14
	xorl	%esi, %esi
	movl	$4, 24(%rsp)
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movq	224(%rsp), %rax
	movq	%r14, (%rsp)
.L15243:
	movq	8(%rax), %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	call	emit_library_call
	jmp	.L13223
.L14993:
	call	emit_insn
	jmp	.L13223
	.p2align 6,,7
.L15579:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L13608
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L13608
	.p2align 6,,7
.L15578:
	xorl	%eax, %eax
	movq	216(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L13600
	jmp	.L13606
.L15577:
	xorl	%eax, %eax
	movq	224(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L13600
	jmp	.L13605
.L15576:
	movl	8(%r14), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 212(%rsp)
	movl	$9, %edi
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	212(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %r8d
.L13540:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14832
.L13536:
	movslq	%edx,%r15
	salq	$2, %r15
	cmpl	%edi, mode_size(%r15)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r15), %edx
	testl	%edx, %edx
	jne	.L13536
.L14832:
	testl	%ecx, %ecx
	je	.L13529
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L13538
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L13538
	movl	%r8d, %eax
	movl	%edx, %r8d
	xorl	%edx, %edx
	divl	%r8d
	addl	%eax, %r9d
	movl	%edx, %r8d
.L13538:
	movl	mode_size(,%rcx,4), %edi
	cmpl	$1, %edi
	jg	.L13540
.L13529:
	decl	%r9d
	jg	.L13526
	movq	216(%rsp), %rcx
	movq	224(%rsp), %r9
	movl	%r10d, %r14d
	movl	$9, %r15d
	movq	8(%r9), %rbx
	movq	8(%rcx), %rdi
	movq	%rcx, 5672(%rsp)
	movl	$0, 5700(%rsp)
	movq	%r9, 5648(%rsp)
	xorl	%ecx, %ecx
	movq	%rbx, 5656(%rsp)
	movq	%rdi, 5680(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L13543
	cmpw	$88, %dx
	je	.L13543
	cmpw	$87, %dx
	je	.L13543
.L13542:
	movl	%ecx, 5664(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L13545
	cmpw	$88, %dx
	je	.L13545
	cmpw	$87, %dx
	je	.L13545
.L13544:
	movl	%ecx, 5688(%rsp)
	movl	$0, 5692(%rsp)
	movl	$0, 5668(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L13547
	cmpw	$87, %ax
	je	.L13547
.L13546:
	testl	%edx, %edx
	movl	%edx, 5704(%rsp)
	je	.L13548
	movl	%r10d, 5700(%rsp)
.L13548:
	movl	%r10d, 5696(%rsp)
	movl	5688(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L13550
	movl	5664(%rsp), %eax
	testl	%eax, %eax
	jne	.L13549
.L13550:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 212(%rsp)
	movq	mov_optab(%rip), %r11
	cmovl	212(%rsp), %ebp
.L13564:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14835
.L13560:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L13560
.L14835:
	testl	%ecx, %ecx
	je	.L13553
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L13562
	movl	mode_size(,%rcx,4), %eax
	movl	$8, %r8d
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r8d, %eax
	cmpl	%eax, %ebp
	jl	.L13562
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L13562:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L13564
.L13553:
	cmpl	$2, %r9d
	jle	.L13549
	testl	%r10d, %r10d
	jne	.L13566
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L13567
	cmpw	$46, %dx
	je	.L13567
	cmpw	$47, %dx
	je	.L13567
	cmpw	$49, %dx
	je	.L13567
	cmpw	$113, %dx
	je	.L13567
.L13566:
	movl	5664(%rsp), %esi
	testl	%esi, %esi
	jne	.L13549
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %edi
	cmpw	$1, %di
	jbe	.L13569
	cmpw	$46, %dx
	je	.L13569
	cmpw	$47, %dx
	je	.L13569
	cmpw	$49, %dx
	je	.L13569
	cmpw	$113, %dx
	je	.L13569
.L13549:
	cmpl	$8, 212(%rsp)
	movl	$8, %eax
	cmovl	212(%rsp), %eax
	cmpl	$1, %r15d
	movl	%eax, 212(%rsp)
	jle	.L13572
.L13594:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r14d, %r14d
	testl	%edx, %edx
	je	.L14838
.L13579:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r15d, mode_size(%rbx)
	cmovl	%edx, %r14d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L13579
.L14838:
	testl	%r14d, %r14d
	je	.L13572
	movslq	%r14d,%r15
	movq	%r15, %r8
	salq	$4, %r8
	addq	mov_optab(%rip), %r8
	movl	8(%r8), %edx
	cmpl	$210, %edx
	je	.L13581
	movl	mode_size(,%r15,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 212(%rsp)
	jl	.L13581
	movslq	%edx,%r9
	cmpl	%ebp, 5696(%rsp)
	leaq	5648(%rsp), %rbx
	movq	insn_gen_function(,%r9,8), %rcx
	movq	%rcx, 2368(%rsp)
	jl	.L13581
	movl	5704(%rsp), %edx
.L13592:
	testl	%edx, %edx
	je	.L13586
	subl	%ebp, 52(%rbx)
.L13586:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L13587
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r14d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15242:
	movl	40(%rbx), %r11d
	movq	%rax, 200(%rsp)
	testl	%r11d, %r11d
	je	.L13589
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r14d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L13590:
	movq	%rax, %rsi
	movq	200(%rsp), %rdi
	xorl	%eax, %eax
	call	*2368(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L13591
	addl	%ebp, 52(%rbx)
.L13591:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L13592
.L13581:
	movl	mode_size(,%r15,4), %r15d
	cmpl	$1, %r15d
	jg	.L13594
.L13572:
	movl	5696(%rsp), %r15d
	testl	%r15d, %r15d
.L15402:
	je	.L13223
	jmp	.L15283
	.p2align 6,,7
.L13589:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r14d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L13590
.L13587:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r14d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15242
.L13569:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5656(%rsp)
	jmp	.L13549
.L13567:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5680(%rsp)
	jmp	.L13566
.L13547:
	movl	$1, %edx
	jmp	.L13546
.L13545:
	movl	$1, %ecx
	jmp	.L13544
.L13543:
	movl	$1, %ecx
	jmp	.L13542
.L13520:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L13516
.L15575:
	movzbl	2(%r14), %edx
	cmpb	$16, %dl
	je	.L13514
	movq	8(%r14), %rbp
	cmpw	$59, (%rbp)
	je	.L15580
.L13514:
	cmpl	$55, %eax
	jne	.L13517
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L13516
.L15580:
	movq	8(%rbp), %rbx
	movq	%rbx, 8(%r14)
	cmpq	$0, 16(%rbp)
	je	.L13516
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, %r15
	call	gen_move_insn
	movq	%r15, %r14
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L13516
	.p2align 6,,7
.L13513:
	cmpq	$0, 16(%r14)
	jne	.L13521
	movq	8(%r14), %r14
	jmp	.L13516
.L13521:
	movq	24(%r14), %rsi
	testq	%rsi, %rsi
	je	.L13522
	movq	%rsi, %r14
	jmp	.L13516
.L13522:
	movq	8(%r14), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L13516
.L13510:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L13506
.L15574:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L13504
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L15581
.L13504:
	cmpl	$55, %eax
	jne	.L13507
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L13506
.L15581:
	movq	8(%rbp), %r10
	movq	%r10, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L13506
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r15
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r15, 216(%rsp)
	jmp	.L13506
	.p2align 6,,7
.L13503:
	cmpq	$0, 16(%r12)
	jne	.L13511
	movq	8(%r12), %rbp
	movq	%rbp, 216(%rsp)
	jmp	.L13506
.L13511:
	movq	24(%r12), %rdx
	testq	%rdx, %rdx
	movq	%rdx, 216(%rsp)
	jne	.L13506
	movq	8(%r12), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rsi
	movq	%rsi, 216(%rsp)
	jmp	.L13506
.L13500:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L13496
.L15573:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L13496
	.p2align 6,,7
.L13493:
	cmpq	$0, 16(%r13)
	jne	.L13501
	movq	8(%r13), %r11
	movq	%r11, 224(%rsp)
	jmp	.L13496
.L13501:
	movq	24(%r13), %rdi
	testq	%rdi, %rdi
	movq	%rdi, 224(%rsp)
	jne	.L13496
	movq	8(%r13), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r8
	movq	%r8, 224(%rsp)
	jmp	.L13496
	.p2align 6,,7
.L15572:
	xorl	%eax, %eax
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, 288(%rsp)
	je	.L15582
.L13239:
	movl	$8, %edi
	call	size_int
	movq	2568(%rsp), %rdi
	movq	%rax, %rdx
	movq	8(%rdi), %r11
	movl	$57, %edi
	movq	32(%r11), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	2568(%rsp), %rbx
	movq	%rax, %r15
	movl	32(%rbx), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%r15, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	expand_expr
	movq	2568(%rsp), %r9
	movq	$0, 232(%rsp)
	movq	%rax, 256(%rsp)
	movq	%rax, %r15
	movq	8(%r9), %rsi
	movl	48(%rsi), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r13)
	movl	%eax, 252(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r13, 264(%rsp)
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L13365
	cmpl	$55, %eax
	je	.L15583
	cmpl	$63, %eax
	je	.L13372
	cmpl	$66, %eax
	je	.L13372
.L13368:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L13375
	cmpl	$55, %eax
	je	.L15584
.L13379:
	cmpl	$63, %eax
	je	.L13382
	cmpl	$66, %eax
	je	.L13382
.L13378:
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L13385
	cmpl	$55, %eax
	je	.L15585
.L13389:
	cmpl	$63, %eax
	je	.L13392
	cmpl	$66, %eax
	je	.L13392
.L13388:
	movq	264(%rsp), %rdi
	cmpw	$55, (%rdi)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 256(%rsp)
	je	.L15283
	movq	256(%rsp), %rsi
	cmpw	$46, (%rsi)
	je	.L15586
.L13398:
	movl	252(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 2400(%rsp)
	testl	%ebp, %ebp
	je	.L14829
.L13484:
	movslq	%ebp,%rcx
	movq	%rcx, %rax
	movq	%rcx, 2392(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L13472
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L13476
	movq	256(%rsp), %r14
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r14)
	ja	.L13472
.L13476:
	movslq	%edx,%r10
	leaq	(%r10,%r10,4), %r14
	movq	%r10, 2384(%rsp)
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15587
.L13477:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15588
.L13478:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L13479
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	2400(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L13472
.L13479:
	call	get_last_insn
	movl	$1, %edx
	movq	256(%rsp), %rsi
	movq	%rax, 2376(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15589
.L13480:
	movq	2384(%rsp), %rbp
	movq	264(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	2400(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14992
	movq	2376(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L13472:
	movq	2392(%rsp), %rdx
	movl	mode_wider_mode(,%rdx,4), %ebp
	testl	%ebp, %ebp
	jne	.L13484
.L14829:
	movq	256(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%r12), %rsi
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%edx, %edx
	movq	264(%rsp), %r12
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%eax, %eax
	movq	%rsi, (%rsp)
	xorl	%esi, %esi
	movq	8(%r12), %r8
	call	emit_library_call
.L13482:
	cmpw	$46, (%r15)
	je	.L15590
	movq	8(%r13), %rsi
	movl	$4, %edi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movl	$4, %edi
	movq	%r15, %rcx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	288(%rsp), %rdx
	movl	$4, %edi
	movq	%r15, %rcx
	movq	%rax, %r12
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 232(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L13486:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L13487
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%r12, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L13487:
	cmpq	$0, 232(%rsp)
	je	.L13223
	movq	232(%rsp), %rdi
	call	emit_label
	jmp	.L13223
.L15590:
	movq	2568(%rsp), %r9
	movq	8(%r13), %rdi
	movl	32(%r9), %esi
	call	plus_constant_wide
	movq	288(%rsp), %rdi
	movq	2568(%rsp), %r15
	movq	%rax, %r12
	movl	32(%r15), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L13486
.L14992:
	call	emit_insn
	jmp	.L13482
	.p2align 6,,7
.L15589:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L13480
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L13480
	.p2align 6,,7
.L15588:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L13472
	jmp	.L13478
.L15587:
	xorl	%eax, %eax
	movq	264(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L13472
	jmp	.L13477
.L15586:
	movl	8(%rsi), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 252(%rsp)
	movl	$9, %edi
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	252(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %r8d
.L13412:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14820
.L13408:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%edi, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L13408
.L14820:
	testl	%ecx, %ecx
	je	.L13401
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L13410
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L13410
	movl	%r8d, %eax
	movl	%edx, %r8d
	xorl	%edx, %edx
	divl	%r8d
	addl	%eax, %r9d
	movl	%edx, %r8d
.L13410:
	movl	mode_size(,%rcx,4), %edi
	cmpl	$1, %edi
	jg	.L13412
.L13401:
	decl	%r9d
	jg	.L13398
	movq	264(%rsp), %rcx
	movq	8(%r12), %rdi
	movl	%r10d, %r14d
	movq	8(%rcx), %rbx
	movq	%r12, 5672(%rsp)
	movq	%rcx, 5648(%rsp)
	movl	$0, 5700(%rsp)
	movq	%rdi, 5680(%rsp)
	xorl	%ecx, %ecx
	movl	$9, 248(%rsp)
	movq	%rbx, 5656(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L13415
	cmpw	$88, %dx
	je	.L13415
	cmpw	$87, %dx
	je	.L13415
.L13414:
	movl	%ecx, 5664(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L13417
	cmpw	$88, %dx
	je	.L13417
	cmpw	$87, %dx
	je	.L13417
.L13416:
	movl	%ecx, 5688(%rsp)
	movl	$0, 5692(%rsp)
	movl	$0, 5668(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L13419
	cmpw	$87, %ax
	je	.L13419
.L13418:
	testl	%edx, %edx
	movl	%edx, 5704(%rsp)
	je	.L13420
	movl	%r10d, 5700(%rsp)
.L13420:
	movl	5688(%rsp), %eax
	movl	%r10d, 5696(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L13422
	movl	5664(%rsp), %eax
	testl	%eax, %eax
	jne	.L13421
.L13422:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 252(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	252(%rsp), %ebp
.L13436:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14823
.L13432:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L13432
.L14823:
	testl	%ecx, %ecx
	je	.L13425
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L13434
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L13434
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L13434:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L13436
.L13425:
	cmpl	$2, %r9d
	jle	.L13421
	testl	%r10d, %r10d
	jne	.L13438
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L13439
	cmpw	$46, %dx
	je	.L13439
	cmpw	$47, %dx
	je	.L13439
	cmpw	$49, %dx
	je	.L13439
	cmpw	$113, %dx
	je	.L13439
.L13438:
	movl	5664(%rsp), %eax
	testl	%eax, %eax
	jne	.L13421
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L13441
	cmpw	$46, %dx
	je	.L13441
	cmpw	$47, %dx
	je	.L13441
	cmpw	$49, %dx
	je	.L13441
	cmpw	$113, %dx
	je	.L13441
.L13421:
	cmpl	$8, 252(%rsp)
	movl	$8, %eax
	cmovl	252(%rsp), %eax
	cmpl	$1, 248(%rsp)
	movl	%eax, 252(%rsp)
	jle	.L13444
.L13466:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14826
.L13451:
	movslq	%edx,%r9
	movl	248(%rsp), %eax
	salq	$2, %r9
	cmpl	%eax, mode_size(%r9)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%r9), %edx
	testl	%edx, %edx
	jne	.L13451
.L14826:
	testl	%r12d, %r12d
	je	.L13444
	movslq	%r12d,%r14
	movq	%r14, %rbx
	salq	$4, %rbx
	addq	mov_optab(%rip), %rbx
	movl	8(%rbx), %edx
	cmpl	$210, %edx
	je	.L13453
	movl	mode_size(,%r14,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 252(%rsp)
	jl	.L13453
	movslq	%edx,%rdi
	cmpl	%ebp, 5696(%rsp)
	leaq	5648(%rsp), %rbx
	movq	insn_gen_function(,%rdi,8), %r11
	movq	%r11, 2408(%rsp)
	jl	.L13453
	movl	5704(%rsp), %edx
.L13464:
	testl	%edx, %edx
	je	.L13458
	subl	%ebp, 52(%rbx)
.L13458:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L13459
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15241:
	movq	%rax, 240(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L13461
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L13462:
	movq	%rax, %rsi
	movq	240(%rsp), %rdi
	xorl	%eax, %eax
	call	*2408(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L13463
	addl	%ebp, 52(%rbx)
.L13463:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L13464
.L13453:
	movl	mode_size(,%r14,4), %r8d
	movl	%r8d, 248(%rsp)
	decl	%r8d
	jg	.L13466
.L13444:
	movl	5696(%rsp), %eax
	testl	%eax, %eax
	je	.L13482
	jmp	.L15283
	.p2align 6,,7
.L13461:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L13462
.L13459:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15241
.L13441:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5656(%rsp)
	jmp	.L13421
.L13439:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5680(%rsp)
	jmp	.L13438
.L13419:
	movl	$1, %edx
	jmp	.L13418
.L13417:
	movl	$1, %ecx
	jmp	.L13416
.L13415:
	movl	$1, %ecx
	jmp	.L13414
.L13392:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L13388
.L15585:
	movzbl	2(%r15), %edx
	cmpb	$16, %dl
	je	.L13386
	movq	8(%r15), %rbp
	cmpw	$59, (%rbp)
	je	.L15591
.L13386:
	cmpl	$55, %eax
	jne	.L13389
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L13388
.L15591:
	movq	8(%rbp), %rsi
	movq	%rsi, 8(%r15)
	cmpq	$0, 16(%rbp)
	je	.L13388
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r15, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r14, 256(%rsp)
	jmp	.L13388
.L13385:
	cmpq	$0, 16(%r15)
	jne	.L13393
	movq	8(%r15), %rax
	movq	%rax, 256(%rsp)
	jmp	.L13388
.L13393:
	movq	24(%r15), %r9
	testq	%r9, %r9
	movq	%r9, 256(%rsp)
	jne	.L13388
	movq	8(%r15), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %rbx
	movq	%rbx, 256(%rsp)
	jmp	.L13388
.L13382:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L13378
.L15584:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L13376
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L15592
.L13376:
	cmpl	$55, %eax
	jne	.L13379
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L13378
.L15592:
	movq	8(%rbp), %r10
	movq	%r10, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L13378
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L13378
.L13375:
	cmpq	$0, 16(%r12)
	jne	.L13383
	movq	8(%r12), %r12
	jmp	.L13378
.L13383:
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	je	.L13384
	movq	%rdi, %r12
	jmp	.L13378
.L13384:
	movq	8(%r12), %rbp
	movzbl	2(%rbp), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L13378
.L13372:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L13368
.L15583:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L13368
.L13365:
	cmpq	$0, 16(%r13)
	jne	.L13373
	movq	8(%r13), %rcx
	movq	%rcx, 264(%rsp)
	jmp	.L13368
.L13373:
	movq	24(%r13), %r8
	testq	%r8, %r8
	movq	%r8, 264(%rsp)
	jne	.L13368
	movq	8(%r13), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r14
	movq	%r14, 264(%rsp)
	jmp	.L13368
	.p2align 6,,7
.L15582:
	movq	2568(%rsp), %r8
	movq	288(%rsp), %rcx
	movl	32(%r8), %eax
	cmpl	%eax, 8(%rcx)
	jge	.L13239
	movq	%r12, 296(%rsp)
	movq	8(%r8), %r11
	movl	48(%r11), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r13)
	movl	%eax, 284(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r13, 304(%rsp)
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L13242
	cmpl	$55, %eax
	je	.L15593
	cmpl	$63, %eax
	je	.L13249
	cmpl	$66, %eax
	je	.L13249
.L13245:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L13252
	cmpl	$55, %eax
	je	.L15594
.L13256:
	cmpl	$63, %eax
	je	.L13259
	cmpl	$66, %eax
	je	.L13259
.L13255:
	movq	288(%rsp), %r8
	movzwl	(%r8), %eax
	cmpl	$59, %eax
	je	.L13262
	cmpl	$55, %eax
	je	.L15595
.L13266:
	cmpl	$63, %eax
	je	.L13269
	cmpl	$66, %eax
	je	.L13269
.L13265:
	movq	304(%rsp), %r9
	cmpw	$55, (%r9)
	jne	.L15283
	movq	296(%rsp), %rdi
	cmpw	$55, (%rdi)
	jne	.L15283
	cmpq	$0, 288(%rsp)
	je	.L15283
	movq	288(%rsp), %rax
	cmpw	$46, (%rax)
	je	.L15596
.L13275:
	movl	284(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 2432(%rsp)
	testl	%ebp, %ebp
	je	.L14817
.L13361:
	movslq	%ebp,%rax
	movq	%rax, 2424(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L13349
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L13353
	movq	288(%rsp), %r14
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r14)
	ja	.L13349
.L13353:
	movslq	%edx,%r15
	leaq	(%r15,%r15,4), %r14
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15597
.L13354:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15598
.L13355:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L13356
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	2432(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L13349
.L13356:
	call	get_last_insn
	movl	$1, %edx
	movq	288(%rsp), %rsi
	movq	%rax, 2416(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15599
.L13357:
	movq	304(%rsp), %rdi
	xorl	%eax, %eax
	movq	296(%rsp), %rsi
	movq	%rbx, %rdx
	movq	2432(%rsp), %rcx
	call	*insn_gen_function(,%r15,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14993
	movq	2416(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L13349:
	movq	2424(%rsp), %rdx
	movl	mode_wider_mode(,%rdx,4), %ebp
	testl	%ebp, %ebp
	jne	.L13361
.L14817:
	movq	288(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$3, %ecx
	xorl	%edx, %edx
	movq	296(%rsp), %r10
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	8(%r10), %rbp
	movl	$4, 24(%rsp)
	movq	%rax, 16(%rsp)
	movq	304(%rsp), %rax
	movl	$4, 8(%rsp)
	movq	%rbp, (%rsp)
	jmp	.L15243
.L15599:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L13357
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L13357
.L15598:
	xorl	%eax, %eax
	movq	296(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L13349
	jmp	.L13355
	.p2align 6,,7
.L15597:
	xorl	%eax, %eax
	movq	304(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L13349
	jmp	.L13354
.L15596:
	movl	8(%rax), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 284(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	284(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L13289:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14808
.L13285:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L13285
.L14808:
	testl	%ecx, %ecx
	je	.L13278
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L13287
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L13287
	movl	%edi, %eax
	movl	%edx, %r15d
	xorl	%edx, %edx
	divl	%r15d
	addl	%eax, %r9d
	movl	%edx, %edi
.L13287:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L13289
.L13278:
	decl	%r9d
	jg	.L13275
	movq	296(%rsp), %rcx
	movq	304(%rsp), %rbp
	movl	%r10d, %r14d
	movl	$9, %r15d
	movq	8(%rbp), %rbx
	movq	8(%rcx), %rdi
	movq	%rcx, 5608(%rsp)
	movl	$0, 5636(%rsp)
	movq	%rbp, 5584(%rsp)
	xorl	%ecx, %ecx
	movq	%rbx, 5592(%rsp)
	movq	%rdi, 5616(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L13292
	cmpw	$88, %dx
	je	.L13292
	cmpw	$87, %dx
	je	.L13292
.L13291:
	movl	%ecx, 5600(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L13294
	cmpw	$88, %dx
	je	.L13294
	cmpw	$87, %dx
	je	.L13294
.L13293:
	movl	%ecx, 5624(%rsp)
	movl	$0, 5628(%rsp)
	movl	$0, 5604(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L13296
	cmpw	$87, %ax
	je	.L13296
.L13295:
	testl	%edx, %edx
	movl	%edx, 5640(%rsp)
	je	.L13297
	movl	%r10d, 5636(%rsp)
.L13297:
	movl	%r10d, 5632(%rsp)
	movl	5624(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L13299
	movl	5600(%rsp), %eax
	testl	%eax, %eax
	jne	.L13298
.L13299:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 284(%rsp)
	movq	mov_optab(%rip), %r11
	cmovl	284(%rsp), %ebp
.L13313:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14811
.L13309:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L13309
.L14811:
	testl	%ecx, %ecx
	je	.L13302
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L13311
	movl	mode_size(,%rcx,4), %eax
	movl	$8, %r8d
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r8d, %eax
	cmpl	%eax, %ebp
	jl	.L13311
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L13311:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L13313
.L13302:
	cmpl	$2, %r9d
	jle	.L13298
	testl	%r10d, %r10d
	jne	.L13315
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L13316
	cmpw	$46, %dx
	je	.L13316
	cmpw	$47, %dx
	je	.L13316
	cmpw	$49, %dx
	je	.L13316
	cmpw	$113, %dx
	je	.L13316
.L13315:
	movl	5600(%rsp), %esi
	testl	%esi, %esi
	jne	.L13298
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L13318
	cmpw	$46, %dx
	je	.L13318
	cmpw	$47, %dx
	je	.L13318
	cmpw	$49, %dx
	je	.L13318
	cmpw	$113, %dx
	je	.L13318
.L13298:
	cmpl	$8, 284(%rsp)
	movl	$8, %eax
	cmovl	284(%rsp), %eax
	cmpl	$1, %r15d
	movl	%eax, 284(%rsp)
	jle	.L13321
.L13343:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r14d, %r14d
	testl	%edx, %edx
	je	.L14814
.L13328:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r15d, mode_size(%rbx)
	cmovl	%edx, %r14d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L13328
.L14814:
	testl	%r14d, %r14d
	je	.L13321
	movslq	%r14d,%r15
	movq	%r15, %rdi
	salq	$4, %rdi
	addq	mov_optab(%rip), %rdi
	movl	8(%rdi), %edx
	cmpl	$210, %edx
	je	.L13330
	movl	mode_size(,%r15,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 284(%rsp)
	jl	.L13330
	movslq	%edx,%rcx
	cmpl	%ebp, 5632(%rsp)
	leaq	5584(%rsp), %rbx
	movq	insn_gen_function(,%rcx,8), %r11
	movq	%r11, 2440(%rsp)
	jl	.L13330
	movl	5640(%rsp), %edx
.L13341:
	testl	%edx, %edx
	je	.L13335
	subl	%ebp, 52(%rbx)
.L13335:
	movl	16(%rbx), %r8d
	testl	%r8d, %r8d
	je	.L13336
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r14d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15240:
	movq	%rax, 272(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L13338
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r14d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L13339:
	movq	%rax, %rsi
	movq	272(%rsp), %rdi
	xorl	%eax, %eax
	call	*2440(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L13340
	addl	%ebp, 52(%rbx)
.L13340:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L13341
.L13330:
	movl	mode_size(,%r15,4), %r15d
	cmpl	$1, %r15d
	jg	.L13343
.L13321:
	movl	5632(%rsp), %r15d
	testl	%r15d, %r15d
	jmp	.L15402
.L13338:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r14d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L13339
.L13336:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r14d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15240
.L13318:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5592(%rsp)
	jmp	.L13298
.L13316:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5616(%rsp)
	jmp	.L13315
.L13296:
	movl	$1, %edx
	jmp	.L13295
.L13294:
	movl	$1, %ecx
	jmp	.L13293
.L13292:
	movl	$1, %ecx
	jmp	.L13291
.L13269:
	movq	288(%rsp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	288(%rsp), %rbp
	movq	16(%rbp), %rdi
	movq	%rax, 8(%rbp)
	call	protect_from_queue
	movq	%rax, 16(%rbp)
	jmp	.L13265
.L15595:
	movzbl	2(%r8), %edx
	cmpb	$16, %dl
	je	.L13263
	movq	8(%r8), %rbp
	cmpw	$59, (%rbp)
	je	.L15600
.L13263:
	cmpl	$55, %eax
	jne	.L13266
	movq	288(%rsp), %r11
	xorl	%esi, %esi
	movq	8(%r11), %rdi
	call	protect_from_queue
	movq	288(%rsp), %rcx
	movq	%rax, 8(%rcx)
	jmp	.L13265
.L15600:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r8)
	cmpq	$0, 16(%rbp)
	je	.L13265
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	288(%rsp), %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r14, 288(%rsp)
	jmp	.L13265
.L13262:
	movq	288(%rsp), %rsi
	cmpq	$0, 16(%rsi)
	jne	.L13270
	movq	8(%rsi), %rdx
	movq	%rdx, 288(%rsp)
	jmp	.L13265
.L13270:
	movq	288(%rsp), %r10
	movq	24(%r10), %rsi
	testq	%rsi, %rsi
	je	.L15601
.L15239:
	movq	%rsi, 288(%rsp)
	jmp	.L13265
.L15601:
	movq	288(%rsp), %rbx
	movq	8(%rbx), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	288(%rsp), %r8
	movq	%rax, %rdi
	movq	8(%r8), %rsi
	movq	%rax, 24(%r8)
	call	gen_move_insn
	movq	288(%rsp), %r15
	movq	%rax, %rdi
	movq	16(%r15), %rsi
	call	emit_insn_before
	movq	24(%r15), %rsi
	jmp	.L15239
.L13259:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L13255
.L15594:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L13253
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L15602
.L13253:
	cmpl	$55, %eax
	jne	.L13256
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L13255
.L15602:
	movq	8(%rbp), %r10
	movq	%r10, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L13255
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r15
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r15, 296(%rsp)
	jmp	.L13255
.L13252:
	cmpq	$0, 16(%r12)
	jne	.L13260
	movq	8(%r12), %r8
	movq	%r8, 296(%rsp)
	jmp	.L13255
.L13260:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	movq	%rsi, 296(%rsp)
	jne	.L13255
	movq	8(%r12), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rbx
	movq	%rbx, 296(%rsp)
	jmp	.L13255
.L13249:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L13245
.L15593:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L13245
.L13242:
	cmpq	$0, 16(%r13)
	jne	.L13250
	movq	8(%r13), %rax
	movq	%rax, 304(%rsp)
	jmp	.L13245
.L13250:
	movq	24(%r13), %rdx
	testq	%rdx, %rdx
	movq	%rdx, 304(%rsp)
	jne	.L13245
	movq	8(%r13), %r14
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rbp
	movq	%rbp, 304(%rsp)
	jmp	.L13245
	.p2align 6,,7
.L13231:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L13227
.L15571:
	jne	.L13228
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L13227
.L13224:
	cmpq	$0, 16(%r13)
	jne	.L13232
	movq	8(%r13), %r13
	jmp	.L13227
.L13232:
	movq	24(%r13), %rax
	testq	%rax, %rax
	je	.L13233
	movq	%rax, %r13
	jmp	.L13227
.L13233:
	movq	8(%r13), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L13227
.L15570:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	2568(%rsp), %rdi
	movzbl	2(%r13), %edx
	movq	%rax, %rsi
	jmp	.L15238
.L13203:
	movl	(%r13), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L15603
	movzbl	2(%r13), %edx
	movq	2568(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	%r13, %rsi
	call	expand_expr
	cmpw	$51, (%r13)
	movq	%rax, %r12
	je	.L15604
.L13221:
	movzwl	(%r12), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L13222
	cmpw	$46, %dx
	je	.L13222
	cmpw	$47, %dx
	je	.L13222
	cmpw	$49, %dx
	je	.L13222
	cmpw	$113, %dx
	jne	.L13168
	jmp	.L13222
.L15604:
	cmpl	$63, 8(%r13)
	jle	.L13168
	jmp	.L13221
.L15603:
	movq	2568(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	8(%r13), %rdi
	movzbl	3(%r13), %edx
	movq	%rax, %r12
	movq	%rax, %rsi
	xorl	%eax, %eax
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	jmp	.L13167
.L13212:
	movl	$1, %ebx
	jmp	.L13206
.L13204:
	xorl	%ebx, %ebx
	jmp	.L13206
.L13210:
	movq	8(%r13), %rdi
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L13212
	movq	16(%r13), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L13206
	jmp	.L13212
.L15569:
	movzbl	2(%r13), %eax
	cmpb	$16, %al
	je	.L13196
	movl	cse_not_expected(%rip), %r14d
	movq	2568(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	%al, %edx
	testl	%r14d, %r14d
	cmove	%r13, %rsi
	xorl	%eax, %eax
	call	expand_expr
	movq	%rax, %r12
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L13222
	testb	%al, %al
	je	.L13222
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L15369
	.p2align 6,,7
.L15568:
	cmpb	$16, 2(%r13)
	jne	.L13169
	call	gen_label_rtx
	movq	%rax, %rbp
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r14
	testq	%rbx, %rbx
	jne	.L13173
.L14801:
	movzwl	(%r13), %eax
	movq	%r13, %r12
	cmpl	$59, %eax
	je	.L13175
	cmpl	$55, %eax
	je	.L15605
.L13179:
	cmpl	$63, %eax
	je	.L13182
	cmpl	$66, %eax
	je	.L13182
.L13178:
	movq	2568(%rsp), %rax
	movq	%rbp, %rsi
	incl	inhibit_defer_pop(%rip)
	movq	32(%rax), %rdi
	xorl	%eax, %eax
	call	jumpifnot
	movq	2568(%rsp), %r11
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	40(%r11), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L13188
.L14803:
	movq	%r14, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%rbp, %rdi
	call	emit_label
	xorl	%eax, %eax
	xorl	%edx, %edx
	movq	2568(%rsp), %rbp
	movq	%r12, %rsi
	movq	48(%rbp), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L13193
.L14805:
	movq	%r14, %rdi
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L13167
.L13193:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r13
	movq	%rax, 16(%rbx)
	testq	%r13, %r13
	movq	%r13, pending_chain(%rip)
	movq	%r13, %rbx
	jne	.L13193
	jmp	.L14805
.L13188:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdx
	movq	%rax, 16(%rbx)
	testq	%rdx, %rdx
	movq	%rdx, pending_chain(%rip)
	movq	%rdx, %rbx
	jne	.L13188
	jmp	.L14803
.L13182:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L13178
.L15605:
	jne	.L13179
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L13178
	.p2align 6,,7
.L13175:
	cmpq	$0, 16(%r13)
	jne	.L13183
	movq	8(%r13), %r12
	jmp	.L13178
.L13183:
	movq	24(%r13), %rdi
	testq	%rdi, %rdi
	je	.L13184
	movq	%rdi, %r12
	jmp	.L13178
.L13184:
	movq	8(%r13), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	%rax, 24(%r12)
	movq	%rax, %rdi
	movq	8(%r13), %rsi
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r12
	jmp	.L13178
	.p2align 6,,7
.L13173:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r9
	movq	%rax, 16(%rbx)
	testq	%r9, %r9
	movq	%r9, pending_chain(%rip)
	movq	%r9, %rbx
	jne	.L13173
	jmp	.L14801
.L15567:
	movq	2568(%rsp), %r8
	movq	const0_rtx(%rip), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	32(%r8), %rdi
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L13165
.L14799:
	movq	2568(%rsp), %rbx
	movq	%r13, %rsi
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	40(%rbx), %rdi
	call	store_expr
	movq	%rax, %r12
	jmp	.L13167
.L13165:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdi
	movq	%rax, 16(%rbx)
	testq	%rdi, %rdi
	movq	%rdi, pending_chain(%rip)
	movq	%rdi, %rbx
	jne	.L13165
	jmp	.L14799
.L15566:
	movq	2568(%rsp), %rdx
	movzbl	16(%rdx), %eax
	cmpb	$39, %al
	jne	.L13160
	movl	current_function_returns_struct(%rip), %r14d
	testl	%r14d, %r14d
	je	.L13160
	movl	current_function_returns_pcc_struct(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L13160
	movq	%rdx, %rdi
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	expand_expr
	movq	2568(%rsp), %rdi
	movq	%rax, %r15
	xorl	%eax, %eax
	call	expr_size
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%r15), %r10
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%r10, (%rsp)
	movq	8(%r13), %r8
	call	emit_library_call
	movq	%r13, %rdi
	jmp	.L15244
	.p2align 6,,7
.L15565:
	xorl	%edx, %edx
	movq	%r14, %rdi
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movzbl	16(%r14), %edx
	movq	%rax, %r13
	jmp	.L13159
.L15564:
	movq	40(%r14), %r8
	cmpb	$25, 16(%r8)
	jne	.L12642
	movq	8(%r14), %rsi
	movq	32(%rsi), %r10
	cmpb	$25, 16(%r10)
	jne	.L12642
.L12643:
	xorl	%ecx, %ecx
	xorl	%ebp, %ebp
	movl	$0, 5432(%rsp)
	cmpb	$37, %dl
	movq	%r14, %r12
	leaq	5448(%rsp), %r13
	leaq	5432(%rsp), %r15
	movl	$0, 196(%rsp)
	je	.L15606
	cmpb	$38, %dl
	je	.L15607
	movq	8(%r14), %r9
	movzbl	44(%r9), %edi
	movl	%edi, 196(%rsp)
	movslq	196(%rsp),%rbx
	movl	mode_size(,%rbx,4), %eax
	sall	$3, %eax
	movl	%eax, 5452(%rsp)
	movq	8(%r14), %rsi
	movzbl	17(%rsi), %r10d
	shrb	$6, %r10b
	movl	%r10d, %r8d
	andl	$1, %r8d
	movl	%r8d, 2564(%rsp)
.L12646:
	testq	%rcx, %rcx
	je	.L12649
	cmpb	$25, 16(%rcx)
	je	.L12650
	movl	$16, 196(%rsp)
	movl	$-1, 5452(%rsp)
.L12649:
	movl	$0, (%r13)
	.p2align 4,,7
.L12677:
	movzbl	16(%r12), %edx
	cmpb	$39, %dl
	je	.L15608
.L12655:
	leal	-37(%rdx), %r11d
	cmpb	$1, %r11b
	ja	.L12656
	cmpb	$37, %dl
	je	.L15609
	movq	48(%r12), %rbx
.L12658:
	movzbl	16(%rbx), %eax
	cmpb	$53, %al
	je	.L15610
	cmpb	$25, %al
	je	.L15611
.L12667:
	testq	%rbp, %rbp
	je	.L12669
	movl	$8, %edi
	call	size_int
	movq	%rbx, %rsi
	movl	$58, %edi
	movq	%rax, %rdx
	call	size_binop
	movq	%rbp, %rsi
	movl	$53, %edi
.L15229:
	movq	%rax, %rdx
	call	size_binop
	movq	%rax, %rbp
.L12671:
	testb	$16, 17(%r12)
	je	.L12676
	movl	$1, (%r15)
.L12676:
	movq	32(%r12), %r12
	jmp	.L12677
	.p2align 6,,7
.L12669:
	movl	$8, %edi
	call	size_int
	movq	%rbx, %rsi
	movl	$58, %edi
	jmp	.L15229
.L15611:
	movl	24(%rbx), %eax
.L15230:
	addl	%eax, (%r13)
	jmp	.L12671
	.p2align 6,,7
.L15610:
	movq	32(%rbx), %rsi
	cmpb	$25, 16(%rsi)
	je	.L15612
	movq	40(%rbx), %rax
	cmpb	$25, 16(%rax)
	jne	.L15283
	movq	%rsi, %rbx
.L12661:
	movl	24(%rax), %eax
	addl	%eax, (%r13)
	jmp	.L12667
.L15612:
	movq	40(%rbx), %rbx
	movq	%rsi, %rax
	jmp	.L12661
	.p2align 6,,7
.L15609:
	movq	40(%r12), %rdx
	movq	72(%rdx), %rbx
	jmp	.L12658
	.p2align 6,,7
.L12656:
	cmpb	$42, %dl
	je	.L15613
.L12672:
	cmpb	$103, %dl
	je	.L12671
	leal	-101(%rdx), %r10d
	cmpb	$1, %r10b
	ja	.L12653
	movq	32(%r12), %r9
	movq	8(%r12), %rbx
	movq	8(%r9), %rdi
	movzbl	44(%rdi), %esi
	cmpb	%sil, 44(%rbx)
	je	.L12671
.L12653:
	movl	196(%rsp), %r15d
	testl	%r15d, %r15d
	jne	.L12678
	movl	(%r13), %eax
	movl	5452(%rsp), %edi
	cltd
	idivl	%edi
	testl	%edx, %edx
	movl	%edx, %ebx
	je	.L15614
.L12678:
	movl	196(%rsp), %r13d
	movq	%rbp, 5440(%rsp)
	testl	%r13d, %r13d
	movl	%r13d, 5436(%rsp)
	jne	.L12681
	xorl	%eax, %eax
	testl	%eax, %eax
	jne	.L15615
.L12681:
	movq	%r12, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	5440(%rsp), %rdi
	movq	%rax, %rbx
	testq	%rdi, %rdi
	jne	.L15616
.L12682:
	movl	5432(%rsp), %ebp
	testl	%ebp, %ebp
	je	.L12684
	cmpw	$55, (%rbx)
	je	.L15617
.L12684:
	xorl	%ecx, %ecx
	movl	5452(%rsp), %ebp
	movl	5448(%rsp), %r15d
	testl	%ecx, %ecx
	movl	5436(%rsp), %r13d
	je	.L12686
	movq	8(%r14), %r11
	movzbl	44(%r11), %r14d
	movl	%r14d, 192(%rsp)
.L12687:
	movq	8(%r12), %rdi
	movl	48(%rdi), %r12d
	call	int_size_in_bytes
	movl	$0, 188(%rsp)
	movl	%eax, 2560(%rsp)
	shrl	$3, %r12d
	cmpl	$31, %ebp
	jg	.L12688
	movl	$1, %eax
	movl	%ebp, %ecx
	sall	%cl, %eax
	decl	%eax
	movl	%eax, 188(%rsp)
.L12688:
	cmpl	$16, %r13d
	je	.L15618
.L12689:
	testl	%r13d, %r13d
	je	.L12694
	cmpl	$16, %r13d
	je	.L12695
	movslq	%r13d,%r10
	cmpb	$0, direct_store(%r10)
	je	.L12694
.L12695:
	movzwl	(%rbx), %eax
	cmpw	$51, %ax
	je	.L12694
	cmpw	$53, %ax
	je	.L12694
	movl	192(%rsp), %ebp
	movq	8(%rbx), %rdi
	testl	%ebp, %ebp
	je	.L12701
	movzwl	(%rdi), %edx
	cmpw	$51, %dx
	je	.L12701
	leal	-56(%rdx), %r14d
	cmpw	$1, %r14w
	jbe	.L12701
	cmpw	$46, %dx
	je	.L12701
	cmpw	$47, %dx
	je	.L12701
	cmpw	$49, %dx
	je	.L12701
	cmpw	$113, %dx
	je	.L12701
	cmpw	$63, %dx
	je	.L15619
.L12702:
	xorl	%eax, %eax
	call	copy_to_reg
	movq	%rax, %rdi
.L12701:
	cmpl	$-1, %r15d
	leal	7(%r15), %r12d
	cmovle	%r12d, %r15d
	sarl	$3, %r15d
	movl	%r15d, %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	%rbx, %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	orb	$16, 3(%rax)
	movq	%rax, %r14
	movl	$0, 184(%rsp)
	movl	192(%rsp), %r8d
	testl	%r8d, %r8d
	setne	%dl
	movzbl	%dl, %ebp
	movq	2568(%rsp), %rdx
	movzbl	16(%rdx), %eax
	cmpb	$44, %al
	je	.L15620
	cmpb	$48, %al
	je	.L15621
.L12713:
	testl	%ebp, %ebp
	je	.L12740
	cmpw	$55, (%r14)
	je	.L15622
.L12740:
	movzwl	(%r14), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L12748
	mov	%eax, %ebp
	jmp	*.L12757(,%rbp,8)
	.section	.rodata
	.align 8
	.align 4
.L12757:
	.quad	.L12751
	.quad	.L12748
	.quad	.L12748
	.quad	.L12748
	.quad	.L12756
	.quad	.L12748
	.quad	.L12748
	.quad	.L12748
	.quad	.L12754
	.quad	.L12754
	.quad	.L12748
	.quad	.L12754
	.text
.L12751:
	movq	8(%r14), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %ebx
.L12750:
	testl	%ebx, %ebx
	je	.L12747
	movzbl	2(%r14), %eax
	cmpb	$16, %al
	je	.L12759
	testb	%al, %al
	jne	.L15623
.L12759:
	movzbl	2(%r14), %edx
	movq	2568(%rsp), %rdi
	xorl	%esi, %esi
.L15231:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L15368:
	movq	%rax, %r12
.L12766:
	movl	$1, 184(%rsp)
.L12712:
	cmpq	%r14, %r12
	je	.L12767
	movq	2568(%rsp), %rax
	cmpb	$0, 16(%rax)
	je	.L12767
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L12768
	cmpl	$55, %eax
	je	.L15624
.L12772:
	cmpl	$63, %eax
	je	.L12775
	cmpl	$66, %eax
	je	.L12775
.L12771:
	movzbl	2(%r12), %eax
	movzbl	2(%r14), %ecx
	cmpb	%cl, %al
	je	.L12778
	testb	%al, %al
	je	.L12778
	movq	2568(%rsp), %rsi
	movl	184(%rsp), %eax
	movq	8(%rsi), %r10
	movzbl	17(%r10), %r8d
	shrb	$6, %r8b
	movl	%r8d, %edx
	andl	$1, %edx
	testl	%eax, %eax
	je	.L12779
	movq	%r12, %rsi
	movzbl	%cl, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%rax, %r12
.L13034:
	movq	%r14, %rdi
	movq	%r12, %rsi
	call	emit_move_insn
.L12767:
	movl	184(%rsp), %r13d
	testl	%r13d, %r13d
	cmove	%r14, %r12
.L12711:
	movq	%r12, %rbx
.L12692:
	movq	%rbx, %rdi
	jmp	.L15244
.L12779:
	movq	%r14, %rdi
	movq	%r12, %rsi
	xorl	%eax, %eax
	call	convert_move
	jmp	.L12767
.L12778:
	cmpb	$16, %al
	jne	.L13034
	movq	2568(%rsp), %rdx
	cmpb	$28, 16(%rdx)
	je	.L15625
	cmpb	$16, %al
	jne	.L13034
	movq	2568(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, 88(%rsp)
	call	expr_size
	movq	2568(%rsp), %rcx
	movq	%rax, %r13
	movq	8(%rcx), %rdi
	movl	48(%rdi), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r14)
	movl	%eax, 84(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r14, 96(%rsp)
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L13037
	cmpl	$55, %eax
	je	.L15626
	cmpl	$63, %eax
	je	.L13044
	cmpl	$66, %eax
	je	.L13044
.L13040:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L13047
	cmpl	$55, %eax
	je	.L15627
.L13051:
	cmpl	$63, %eax
	je	.L13054
	cmpl	$66, %eax
	je	.L13054
.L13050:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L13057
	cmpl	$55, %eax
	je	.L15628
.L13061:
	cmpl	$63, %eax
	je	.L13064
	cmpl	$66, %eax
	je	.L13064
.L13060:
	movq	96(%rsp), %rax
	cmpw	$55, (%rax)
	jne	.L15283
	movq	88(%rsp), %r11
	cmpw	$55, (%r11)
	jne	.L15283
	testq	%r13, %r13
	je	.L15283
	cmpw	$46, (%r13)
	je	.L15629
.L13070:
	movl	84(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 2472(%rsp)
	testl	%ebp, %ebp
	je	.L14797
.L13156:
	movslq	%ebp,%rax
	movq	%rax, 2464(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L13144
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L13148
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L13144
.L13148:
	movslq	%edx,%rcx
	leaq	(%rcx,%rcx,4), %r15
	movq	%rcx, 2456(%rsp)
	salq	$4, %r15
	movq	insn_operand_predicate(%r15), %rdx
	testq	%rdx, %rdx
	jne	.L15630
.L13149:
	movq	insn_operand_predicate+8(%r15), %rdx
	testq	%rdx, %rdx
	jne	.L15631
.L13150:
	movq	insn_operand_predicate+24(%r15), %rdx
	testq	%rdx, %rdx
	je	.L13151
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	2472(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L13144
.L13151:
	call	get_last_insn
	movl	$1, %edx
	movq	%r13, %rsi
	movq	%rax, 2448(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r15), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15632
.L13152:
	movq	2456(%rsp), %r15
	movq	96(%rsp), %rdi
	xorl	%eax, %eax
	movq	88(%rsp), %rsi
	movq	%rbx, %rdx
	movq	2472(%rsp), %rcx
	call	*insn_gen_function(,%r15,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14990
	movq	2448(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L13144:
	movq	2464(%rsp), %r11
	movl	mode_wider_mode(,%r11,4), %ebp
	testl	%ebp, %ebp
	jne	.L13156
.L14797:
	movl	$4, %edi
	movq	%r13, %rsi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$3, %ecx
	xorl	%esi, %esi
	movq	88(%rsp), %rdx
	movq	memcpy_libfunc(%rip), %rdi
	movq	8(%rdx), %rbp
	xorl	%edx, %edx
	movl	$4, 24(%rsp)
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movq	96(%rsp), %rax
	movq	%rbp, (%rsp)
.L15236:
	movq	8(%rax), %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	call	emit_library_call
	jmp	.L12767
.L14990:
	call	emit_insn
	jmp	.L12767
.L15632:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L13152
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L13152
.L15631:
	xorl	%eax, %eax
	movq	88(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L13144
	jmp	.L13150
.L15630:
	xorl	%eax, %eax
	movq	96(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L13144
	jmp	.L13149
.L15629:
	movl	8(%r13), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 84(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	84(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L13084:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14788
.L13080:
	movslq	%edx,%r15
	salq	$2, %r15
	cmpl	%r8d, mode_size(%r15)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r15), %edx
	testl	%edx, %edx
	jne	.L13080
.L14788:
	testl	%ecx, %ecx
	je	.L13073
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L13082
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L13082
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L13082:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L13084
.L13073:
	decl	%r9d
	jg	.L13070
	movq	96(%rsp), %rcx
	movq	88(%rsp), %r9
	movl	%r10d, %r13d
	movl	$9, %r15d
	movq	8(%rcx), %rbx
	movq	8(%r9), %rdi
	movq	%r9, 5608(%rsp)
	movq	%rcx, 5584(%rsp)
	movl	$0, 5636(%rsp)
	xorl	%ecx, %ecx
	movq	%rbx, 5592(%rsp)
	movq	%rdi, 5616(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L13087
	cmpw	$88, %dx
	je	.L13087
	cmpw	$87, %dx
	je	.L13087
.L13086:
	movl	%ecx, 5600(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L13089
	cmpw	$88, %dx
	je	.L13089
	cmpw	$87, %dx
	je	.L13089
.L13088:
	movl	%ecx, 5624(%rsp)
	movl	$0, 5628(%rsp)
	movl	$0, 5604(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L13091
	cmpw	$87, %ax
	je	.L13091
.L13090:
	testl	%edx, %edx
	movl	%edx, 5640(%rsp)
	je	.L13092
	movl	%r10d, 5636(%rsp)
.L13092:
	movl	5624(%rsp), %eax
	movl	%r10d, 5632(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L13094
	movl	5600(%rsp), %eax
	testl	%eax, %eax
	jne	.L13093
.L13094:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 84(%rsp)
	movq	mov_optab(%rip), %r11
	cmovl	84(%rsp), %ebp
.L13108:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14791
.L13104:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L13104
.L14791:
	testl	%ecx, %ecx
	je	.L13097
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L13106
	movl	mode_size(,%rcx,4), %eax
	movl	$8, %r8d
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r8d, %eax
	cmpl	%eax, %ebp
	jl	.L13106
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L13106:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L13108
.L13097:
	cmpl	$2, %r9d
	jle	.L13093
	testl	%r10d, %r10d
	jne	.L13110
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L13111
	cmpw	$46, %dx
	je	.L13111
	cmpw	$47, %dx
	je	.L13111
	cmpw	$49, %dx
	je	.L13111
	cmpw	$113, %dx
	je	.L13111
.L13110:
	movl	5600(%rsp), %eax
	testl	%eax, %eax
	jne	.L13093
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L13113
	cmpw	$46, %dx
	je	.L13113
	cmpw	$47, %dx
	je	.L13113
	cmpw	$49, %dx
	je	.L13113
	cmpw	$113, %dx
	je	.L13113
.L13093:
	cmpl	$8, 84(%rsp)
	movl	$8, %eax
	cmovl	84(%rsp), %eax
	cmpl	$1, %r15d
	movl	%eax, 84(%rsp)
	jle	.L13116
.L13138:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r13d, %r13d
	testl	%edx, %edx
	je	.L14794
.L13123:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r15d, mode_size(%rbx)
	cmovl	%edx, %r13d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L13123
.L14794:
	testl	%r13d, %r13d
	je	.L13116
	movslq	%r13d,%r15
	movq	%r15, %r8
	salq	$4, %r8
	addq	mov_optab(%rip), %r8
	movl	8(%r8), %edx
	cmpl	$210, %edx
	je	.L13125
	movl	mode_size(,%r15,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 84(%rsp)
	jl	.L13125
	movslq	%edx,%r9
	cmpl	%ebp, 5632(%rsp)
	leaq	5584(%rsp), %rbx
	movq	insn_gen_function(,%r9,8), %rdi
	movq	%rdi, 2480(%rsp)
	jl	.L13125
	movl	5640(%rsp), %edx
.L13136:
	testl	%edx, %edx
	je	.L13130
	subl	%ebp, 52(%rbx)
.L13130:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L13131
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15235:
	movq	%rax, 72(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L13133
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L13134:
	movq	%rax, %rsi
	movq	72(%rsp), %rdi
	xorl	%eax, %eax
	call	*2480(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L13135
	addl	%ebp, 52(%rbx)
.L13135:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L13136
.L13125:
	movl	mode_size(,%r15,4), %r15d
	cmpl	$1, %r15d
	jg	.L13138
.L13116:
	movl	5632(%rsp), %eax
	testl	%eax, %eax
.L15401:
	je	.L12767
	jmp	.L15283
.L13133:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L13134
.L13131:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15235
.L13113:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5592(%rsp)
	jmp	.L13093
.L13111:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5616(%rsp)
	jmp	.L13110
.L13091:
	movl	$1, %edx
	jmp	.L13090
.L13089:
	movl	$1, %ecx
	jmp	.L13088
.L13087:
	movl	$1, %ecx
	jmp	.L13086
.L13064:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L13060
.L15628:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L13058
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L15633
.L13058:
	cmpl	$55, %eax
	jne	.L13061
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L13060
.L15633:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L13060
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r15
	call	gen_move_insn
	movq	%r15, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L13060
.L13057:
	cmpq	$0, 16(%r13)
	jne	.L13065
	movq	8(%r13), %r13
	jmp	.L13060
.L13065:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L13066
	movq	%rsi, %r13
	jmp	.L13060
.L13066:
	movq	8(%r13), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L13060
.L13054:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L13050
.L15627:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L13048
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L15634
.L13048:
	cmpl	$55, %eax
	jne	.L13051
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L13050
.L15634:
	movq	8(%rbp), %rsi
	movq	%rsi, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L13050
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r15
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r15, 88(%rsp)
	jmp	.L13050
.L13047:
	cmpq	$0, 16(%r12)
	jne	.L13055
	movq	8(%r12), %rbp
	movq	%rbp, 88(%rsp)
	jmp	.L13050
.L13055:
	movq	24(%r12), %r9
	testq	%r9, %r9
	movq	%r9, 88(%rsp)
	jne	.L13050
	movq	8(%r12), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rbx
	movq	%rbx, 88(%rsp)
	jmp	.L13050
.L13044:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L13040
.L15626:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L13040
.L13037:
	cmpq	$0, 16(%r14)
	jne	.L13045
	movq	8(%r14), %rdx
	movq	%rdx, 96(%rsp)
	jmp	.L13040
.L13045:
	movq	24(%r14), %r11
	testq	%r11, %r11
	movq	%r11, 96(%rsp)
	jne	.L13040
	movq	8(%r14), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r8
	movq	%r8, 96(%rsp)
	jmp	.L13040
.L15625:
	xorl	%eax, %eax
	movq	%rdx, %rdi
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, 160(%rsp)
	je	.L15635
.L12783:
	movl	$8, %edi
	call	size_int
	movq	2568(%rsp), %rdi
	movq	%rax, %rdx
	movq	8(%rdi), %r9
	movl	$57, %edi
	movq	32(%r9), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	2568(%rsp), %rbx
	movq	%rax, %r15
	movl	32(%rbx), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%r15, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	expand_expr
	movq	$0, 104(%rsp)
	movq	%rax, 128(%rsp)
	movq	%rax, %r15
	movq	2568(%rsp), %rax
	movq	8(%rax), %rsi
	movl	48(%rsi), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r14)
	movl	%eax, 124(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r14, 136(%rsp)
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L12909
	cmpl	$55, %eax
	je	.L15636
	cmpl	$63, %eax
	je	.L12916
	cmpl	$66, %eax
	je	.L12916
.L12912:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L12919
	cmpl	$55, %eax
	je	.L15637
.L12923:
	cmpl	$63, %eax
	je	.L12926
	cmpl	$66, %eax
	je	.L12926
.L12922:
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L12929
	cmpl	$55, %eax
	je	.L15638
.L12933:
	cmpl	$63, %eax
	je	.L12936
	cmpl	$66, %eax
	je	.L12936
.L12932:
	movq	136(%rsp), %rdi
	cmpw	$55, (%rdi)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 128(%rsp)
	je	.L15283
	movq	128(%rsp), %rsi
	cmpw	$46, (%rsi)
	je	.L15639
.L12942:
	movl	124(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 2512(%rsp)
	testl	%ebp, %ebp
	je	.L14785
.L13028:
	movslq	%ebp,%r8
	movq	%r8, %rax
	movq	%r8, 2504(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L13016
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L13020
	movq	128(%rsp), %r13
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L13016
.L13020:
	movslq	%edx,%r10
	leaq	(%r10,%r10,4), %r13
	movq	%r10, 2496(%rsp)
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L15640
.L13021:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L15641
.L13022:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L13023
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	2512(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L13016
.L13023:
	call	get_last_insn
	movl	$1, %edx
	movq	128(%rsp), %rsi
	movq	%rax, 2488(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15642
.L13024:
	movq	2496(%rsp), %rbp
	movq	136(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	2512(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14989
	movq	2488(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L13016:
	movq	2504(%rsp), %rsi
	movl	mode_wider_mode(,%rsi,4), %ebp
	testl	%ebp, %ebp
	jne	.L13028
.L14785:
	movq	128(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movq	136(%rsp), %r9
	movl	$3, %ecx
	movq	8(%r12), %rbx
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%rbx, (%rsp)
	movq	8(%r9), %r8
	movl	$4, %r9d
	call	emit_library_call
.L13026:
	cmpw	$46, (%r15)
	je	.L15643
	movq	8(%r14), %rsi
	movl	$4, %edi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movl	$4, %edi
	movq	%r15, %rcx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	160(%rsp), %rdx
	movl	$4, %edi
	movq	%r15, %rcx
	movq	%rax, %r12
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 104(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L13030:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L13031
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%r12, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L13031:
	cmpq	$0, 104(%rsp)
	je	.L12767
	movq	104(%rsp), %rdi
	call	emit_label
	jmp	.L12767
.L15643:
	movq	2568(%rsp), %rax
	movq	8(%r14), %rdi
	movl	32(%rax), %esi
	call	plus_constant_wide
	movq	160(%rsp), %rdi
	movq	2568(%rsp), %r15
	movq	%rax, %r12
	movl	32(%r15), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L13030
.L14989:
	call	emit_insn
	jmp	.L13026
.L15642:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L13024
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L13024
.L15641:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L13016
	jmp	.L13022
.L15640:
	xorl	%eax, %eax
	movq	136(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L13016
	jmp	.L13021
.L15639:
	movl	8(%rsi), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 124(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	124(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L12956:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14776
.L12952:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L12952
.L14776:
	testl	%ecx, %ecx
	je	.L12945
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L12954
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L12954
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L12954:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L12956
.L12945:
	decl	%r9d
	jg	.L12942
	movq	136(%rsp), %rcx
	movq	8(%r12), %rdi
	movl	%r10d, %r13d
	movq	8(%rcx), %rbx
	movq	%r12, 5608(%rsp)
	movq	%rcx, 5584(%rsp)
	movl	$0, 5636(%rsp)
	movq	%rdi, 5616(%rsp)
	xorl	%ecx, %ecx
	movl	$9, 120(%rsp)
	movq	%rbx, 5592(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L12959
	cmpw	$88, %dx
	je	.L12959
	cmpw	$87, %dx
	je	.L12959
.L12958:
	movl	%ecx, 5600(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L12961
	cmpw	$88, %dx
	je	.L12961
	cmpw	$87, %dx
	je	.L12961
.L12960:
	movl	%ecx, 5624(%rsp)
	movl	$0, 5628(%rsp)
	movl	$0, 5604(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L12963
	cmpw	$87, %ax
	je	.L12963
.L12962:
	testl	%edx, %edx
	movl	%edx, 5640(%rsp)
	je	.L12964
	movl	%r10d, 5636(%rsp)
.L12964:
	movl	5624(%rsp), %eax
	movl	%r10d, 5632(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L12966
	movl	5600(%rsp), %ebp
	testl	%ebp, %ebp
	jne	.L12965
.L12966:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 124(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	124(%rsp), %ebp
.L12980:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14779
.L12976:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L12976
.L14779:
	testl	%ecx, %ecx
	je	.L12969
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L12978
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L12978
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L12978:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L12980
.L12969:
	cmpl	$2, %r9d
	jle	.L12965
	testl	%r10d, %r10d
	jne	.L12982
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L12983
	cmpw	$46, %dx
	je	.L12983
	cmpw	$47, %dx
	je	.L12983
	cmpw	$49, %dx
	je	.L12983
	cmpw	$113, %dx
	je	.L12983
.L12982:
	movl	5600(%rsp), %esi
	testl	%esi, %esi
	jne	.L12965
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L12985
	cmpw	$46, %dx
	je	.L12985
	cmpw	$47, %dx
	je	.L12985
	cmpw	$49, %dx
	je	.L12985
	cmpw	$113, %dx
	je	.L12985
.L12965:
	cmpl	$8, 124(%rsp)
	movl	$8, %eax
	cmovl	124(%rsp), %eax
	cmpl	$1, 120(%rsp)
	movl	%eax, 124(%rsp)
	jle	.L12988
.L13010:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14782
.L12995:
	movslq	%edx,%rbx
	movl	120(%rsp), %eax
	salq	$2, %rbx
	cmpl	%eax, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L12995
.L14782:
	testl	%r12d, %r12d
	je	.L12988
	movslq	%r12d,%r13
	movq	%r13, %rdi
	salq	$4, %rdi
	addq	mov_optab(%rip), %rdi
	movl	8(%rdi), %edx
	cmpl	$210, %edx
	je	.L12997
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 124(%rsp)
	jl	.L12997
	movslq	%edx,%rcx
	cmpl	%ebp, 5632(%rsp)
	leaq	5584(%rsp), %rbx
	movq	insn_gen_function(,%rcx,8), %rdx
	movq	%rdx, 2520(%rsp)
	jl	.L12997
	movl	5640(%rsp), %edx
.L13008:
	testl	%edx, %edx
	je	.L13002
	subl	%ebp, 52(%rbx)
.L13002:
	movl	16(%rbx), %r11d
	testl	%r11d, %r11d
	je	.L13003
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15234:
	movq	%rax, 112(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L13005
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L13006:
	movq	%rax, %rsi
	movq	112(%rsp), %rdi
	xorl	%eax, %eax
	call	*2520(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L13007
	addl	%ebp, 52(%rbx)
.L13007:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L13008
.L12997:
	movl	mode_size(,%r13,4), %r12d
	movl	%r12d, 120(%rsp)
	decl	%r12d
	jg	.L13010
.L12988:
	movl	5632(%rsp), %eax
	testl	%eax, %eax
	je	.L13026
	jmp	.L15283
.L13005:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L13006
.L13003:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15234
.L12985:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5592(%rsp)
	jmp	.L12965
.L12983:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5616(%rsp)
	jmp	.L12982
.L12963:
	movl	$1, %edx
	jmp	.L12962
.L12961:
	movl	$1, %ecx
	jmp	.L12960
.L12959:
	movl	$1, %ecx
	jmp	.L12958
.L12936:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L12932
.L15638:
	movzbl	2(%r15), %edx
	cmpb	$16, %dl
	je	.L12930
	movq	8(%r15), %rbp
	cmpw	$59, (%rbp)
	je	.L15644
.L12930:
	cmpl	$55, %eax
	jne	.L12933
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L12932
.L15644:
	movq	8(%rbp), %r10
	movq	%r10, 8(%r15)
	cmpq	$0, 16(%rbp)
	je	.L12932
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r15, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r13, 128(%rsp)
	jmp	.L12932
.L12929:
	cmpq	$0, 16(%r15)
	jne	.L12937
	movq	8(%r15), %rsi
	movq	%rsi, 128(%rsp)
	jmp	.L12932
.L12937:
	movq	24(%r15), %rax
	testq	%rax, %rax
	movq	%rax, 128(%rsp)
	jne	.L12932
	movq	8(%r15), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %rbx
	movq	%rbx, 128(%rsp)
	jmp	.L12932
.L12926:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L12922
.L15637:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L12920
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L15645
.L12920:
	cmpl	$55, %eax
	jne	.L12923
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L12922
.L15645:
	movq	8(%rbp), %r13
	movq	%r13, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L12922
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	%r13, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L12922
.L12919:
	cmpq	$0, 16(%r12)
	jne	.L12927
	movq	8(%r12), %r12
	jmp	.L12922
.L12927:
	movq	24(%r12), %rax
	testq	%rax, %rax
	je	.L12928
	movq	%rax, %r12
	jmp	.L12922
.L12928:
	movq	8(%r12), %rbp
	movzbl	2(%rbp), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L12922
.L12916:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L12912
.L15636:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L12912
.L12909:
	cmpq	$0, 16(%r14)
	jne	.L12917
	movq	8(%r14), %rdx
	movq	%rdx, 136(%rsp)
	jmp	.L12912
.L12917:
	movq	24(%r14), %rcx
	testq	%rcx, %rcx
	movq	%rcx, 136(%rsp)
	jne	.L12912
	movq	8(%r14), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r11
	movq	%r11, 136(%rsp)
	jmp	.L12912
.L15635:
	movq	2568(%rsp), %rcx
	movq	160(%rsp), %r9
	movl	32(%rcx), %eax
	cmpl	%eax, 8(%r9)
	jge	.L12783
	movq	%r12, 168(%rsp)
	movq	8(%rcx), %rbx
	movl	48(%rbx), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r14)
	movl	%eax, 156(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r14, 176(%rsp)
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L12786
	cmpl	$55, %eax
	je	.L15646
	cmpl	$63, %eax
	je	.L12793
	cmpl	$66, %eax
	je	.L12793
.L12789:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L12796
	cmpl	$55, %eax
	je	.L15647
.L12800:
	cmpl	$63, %eax
	je	.L12803
	cmpl	$66, %eax
	je	.L12803
.L12799:
	movq	160(%rsp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$59, %eax
	je	.L12806
	cmpl	$55, %eax
	je	.L15648
.L12810:
	cmpl	$63, %eax
	je	.L12813
	cmpl	$66, %eax
	je	.L12813
.L12809:
	movq	176(%rsp), %r8
	cmpw	$55, (%r8)
	jne	.L15283
	movq	168(%rsp), %r15
	cmpw	$55, (%r15)
	jne	.L15283
	cmpq	$0, 160(%rsp)
	je	.L15283
	movq	160(%rsp), %rdi
	cmpw	$46, (%rdi)
	je	.L15649
.L12819:
	movl	156(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 2544(%rsp)
	testl	%ebp, %ebp
	je	.L14773
.L12905:
	movslq	%ebp,%rax
	movq	%rax, 2536(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L12893
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L12897
	movq	160(%rsp), %r8
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r8)
	ja	.L12893
.L12897:
	movslq	%edx,%r15
	leaq	(%r15,%r15,4), %r13
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L15650
.L12898:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L15651
.L12899:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L12900
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	2544(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L12893
.L12900:
	call	get_last_insn
	movl	$1, %edx
	movq	160(%rsp), %rsi
	movq	%rax, 2528(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15652
.L12901:
	movq	176(%rsp), %rdi
	xorl	%eax, %eax
	movq	168(%rsp), %rsi
	movq	%rbx, %rdx
	movq	2544(%rsp), %rcx
	call	*insn_gen_function(,%r15,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14990
	movq	2528(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L12893:
	movq	2536(%rsp), %r13
	movl	mode_wider_mode(,%r13,4), %ebp
	testl	%ebp, %ebp
	jne	.L12905
.L14773:
	movq	160(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$3, %ecx
	xorl	%edx, %edx
	movq	168(%rsp), %r10
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	8(%r10), %rbp
	movl	$4, 24(%rsp)
	movq	%rax, 16(%rsp)
	movq	176(%rsp), %rax
	movl	$4, 8(%rsp)
	movq	%rbp, (%rsp)
	jmp	.L15236
.L15652:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L12901
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L12901
.L15651:
	xorl	%eax, %eax
	movq	168(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L12893
	jmp	.L12899
.L15650:
	xorl	%eax, %eax
	movq	176(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L12893
	jmp	.L12898
.L15649:
	movl	8(%rdi), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 156(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	156(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L12833:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14764
.L12829:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L12829
.L14764:
	testl	%ecx, %ecx
	je	.L12822
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L12831
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L12831
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L12831:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L12833
.L12822:
	decl	%r9d
	jg	.L12819
	movq	168(%rsp), %rcx
	movq	176(%rsp), %r11
	movl	%r10d, %r13d
	movl	$9, %r15d
	movq	8(%r11), %rbx
	movq	8(%rcx), %rdi
	movq	%rcx, 5672(%rsp)
	movl	$0, 5700(%rsp)
	movq	%r11, 5648(%rsp)
	xorl	%ecx, %ecx
	movq	%rbx, 5656(%rsp)
	movq	%rdi, 5680(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L12836
	cmpw	$88, %dx
	je	.L12836
	cmpw	$87, %dx
	je	.L12836
.L12835:
	movl	%ecx, 5664(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L12838
	cmpw	$88, %dx
	je	.L12838
	cmpw	$87, %dx
	je	.L12838
.L12837:
	movl	%ecx, 5688(%rsp)
	movl	$0, 5692(%rsp)
	movl	$0, 5668(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L12840
	cmpw	$87, %ax
	je	.L12840
.L12839:
	testl	%edx, %edx
	movl	%edx, 5704(%rsp)
	je	.L12841
	movl	%r10d, 5700(%rsp)
.L12841:
	movl	5688(%rsp), %eax
	movl	%r10d, 5696(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L12843
	movl	5664(%rsp), %eax
	testl	%eax, %eax
	jne	.L12842
.L12843:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 156(%rsp)
	movq	mov_optab(%rip), %r11
	cmovl	156(%rsp), %ebp
.L12857:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14767
.L12853:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L12853
.L14767:
	testl	%ecx, %ecx
	je	.L12846
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L12855
	movl	mode_size(,%rcx,4), %eax
	movl	$8, %r8d
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r8d, %eax
	cmpl	%eax, %ebp
	jl	.L12855
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L12855:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L12857
.L12846:
	cmpl	$2, %r9d
	jle	.L12842
	testl	%r10d, %r10d
	jne	.L12859
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L12860
	cmpw	$46, %dx
	je	.L12860
	cmpw	$47, %dx
	je	.L12860
	cmpw	$49, %dx
	je	.L12860
	cmpw	$113, %dx
	je	.L12860
.L12859:
	movl	5664(%rsp), %eax
	testl	%eax, %eax
	jne	.L12842
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L12862
	cmpw	$46, %dx
	je	.L12862
	cmpw	$47, %dx
	je	.L12862
	cmpw	$49, %dx
	je	.L12862
	cmpw	$113, %dx
	je	.L12862
.L12842:
	cmpl	$8, 156(%rsp)
	movl	$8, %eax
	cmovl	156(%rsp), %eax
	cmpl	$1, %r15d
	movl	%eax, 156(%rsp)
	jle	.L12865
.L12887:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r13d, %r13d
	testl	%edx, %edx
	je	.L14770
.L12872:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r15d, mode_size(%rbx)
	cmovl	%edx, %r13d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L12872
.L14770:
	testl	%r13d, %r13d
	je	.L12865
	movslq	%r13d,%r15
	movq	%r15, %rdi
	salq	$4, %rdi
	addq	mov_optab(%rip), %rdi
	movl	8(%rdi), %edx
	cmpl	$210, %edx
	je	.L12874
	movl	mode_size(,%r15,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 156(%rsp)
	jl	.L12874
	movslq	%edx,%r9
	cmpl	%ebp, 5696(%rsp)
	leaq	5648(%rsp), %rbx
	movq	insn_gen_function(,%r9,8), %rdx
	movq	%rdx, 2552(%rsp)
	jl	.L12874
	movl	5704(%rsp), %edx
.L12885:
	testl	%edx, %edx
	je	.L12879
	subl	%ebp, 52(%rbx)
.L12879:
	movl	16(%rbx), %ecx
	testl	%ecx, %ecx
	je	.L12880
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15233:
	movl	40(%rbx), %r11d
	movq	%rax, 144(%rsp)
	testl	%r11d, %r11d
	je	.L12882
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L12883:
	movq	%rax, %rsi
	movq	144(%rsp), %rdi
	xorl	%eax, %eax
	call	*2552(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L12884
	addl	%ebp, 52(%rbx)
.L12884:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L12885
.L12874:
	movl	mode_size(,%r15,4), %r15d
	cmpl	$1, %r15d
	jg	.L12887
.L12865:
	movl	5696(%rsp), %r15d
	testl	%r15d, %r15d
	jmp	.L15401
.L12882:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L12883
.L12880:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15233
.L12862:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5656(%rsp)
	jmp	.L12842
.L12860:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5680(%rsp)
	jmp	.L12859
.L12840:
	movl	$1, %edx
	jmp	.L12839
.L12838:
	movl	$1, %ecx
	jmp	.L12837
.L12836:
	movl	$1, %ecx
	jmp	.L12835
.L12813:
	movq	160(%rsp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	160(%rsp), %rbx
	movq	%rax, 8(%rbx)
	movq	160(%rsp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	160(%rsp), %r9
	movq	%rax, 16(%r9)
	jmp	.L12809
.L15648:
	movq	%rdx, %rcx
	movzbl	2(%rdx), %edx
	cmpb	$16, %dl
	je	.L12807
	movq	8(%rcx), %rbp
	cmpw	$59, (%rbp)
	je	.L15653
.L12807:
	cmpl	$55, %eax
	jne	.L12810
	movq	160(%rsp), %r15
	xorl	%esi, %esi
	movq	8(%r15), %rdi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L12809
.L15653:
	movq	8(%rbp), %rsi
	movq	%rsi, 8(%rcx)
	cmpq	$0, 16(%rbp)
	je	.L12809
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	160(%rsp), %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L15232:
	movq	%rbx, 160(%rsp)
	jmp	.L12809
.L12806:
	movq	160(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L12814
	movq	8(%rcx), %rbx
	jmp	.L15232
.L12814:
	movq	160(%rsp), %r11
	movq	24(%r11), %rsi
	testq	%rsi, %rsi
	je	.L12815
	movq	%rsi, 160(%rsp)
	jmp	.L12809
.L12815:
	movq	160(%rsp), %rsi
	movq	8(%rsi), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	160(%rsp), %rdx
	movq	%rax, %rdi
	movq	8(%rdx), %rsi
	movq	%rax, 24(%rdx)
	call	gen_move_insn
	movq	160(%rsp), %rbp
	movq	%rax, %rdi
	movq	16(%rbp), %rsi
	call	emit_insn_before
	movq	160(%rsp), %r13
	movq	24(%r13), %rdi
	movq	%rdi, 160(%rsp)
	jmp	.L12809
.L12803:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L12799
.L15647:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L12797
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L15654
.L12797:
	cmpl	$55, %eax
	jne	.L12800
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L12799
.L15654:
	movq	8(%rbp), %r11
	movq	%r11, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L12799
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r13, 168(%rsp)
	jmp	.L12799
.L12796:
	cmpq	$0, 16(%r12)
	jne	.L12804
	movq	8(%r12), %rbp
	movq	%rbp, 168(%rsp)
	jmp	.L12799
.L12804:
	movq	24(%r12), %rdx
	testq	%rdx, %rdx
	movq	%rdx, 168(%rsp)
	jne	.L12799
	movq	8(%r12), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r8
	movq	%r8, 168(%rsp)
	jmp	.L12799
.L12793:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L12789
.L15646:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L12789
.L12786:
	cmpq	$0, 16(%r14)
	jne	.L12794
	movq	8(%r14), %rdi
	movq	%rdi, 176(%rsp)
	jmp	.L12789
.L12794:
	movq	24(%r14), %r13
	testq	%r13, %r13
	movq	%r13, 176(%rsp)
	jne	.L12789
	movq	8(%r14), %r15
	movzbl	2(%r15), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rcx
	movq	%rcx, 176(%rsp)
	jmp	.L12789
	.p2align 6,,7
.L12775:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L12771
.L15624:
	jne	.L12772
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L12771
	.p2align 6,,7
.L12768:
	cmpq	$0, 16(%r14)
	jne	.L12776
	movq	8(%r14), %r14
	jmp	.L12771
.L12776:
	movq	24(%r14), %rax
	testq	%rax, %rax
	je	.L12777
	movq	%rax, %r14
	jmp	.L12771
.L12777:
	movq	8(%r14), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L12771
	.p2align 6,,7
.L15623:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	2568(%rsp), %rdi
	movzbl	2(%r14), %edx
	movq	%rax, %rsi
	jmp	.L15231
.L12747:
	movl	(%r14), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L15655
	movzbl	2(%r14), %edx
	movq	2568(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	%r14, %rsi
	call	expand_expr
	cmpw	$51, (%r14)
	movq	%rax, %r12
	je	.L15656
.L12765:
	movzwl	(%r12), %edx
	leal	-56(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L12766
	cmpw	$46, %dx
	je	.L12766
	cmpw	$47, %dx
	je	.L12766
	cmpw	$49, %dx
	je	.L12766
	cmpw	$113, %dx
	jne	.L12712
	jmp	.L12766
.L15656:
	cmpl	$63, 8(%r14)
	jle	.L12712
	jmp	.L12765
.L15655:
	movq	2568(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	8(%r14), %rdi
	movzbl	3(%r14), %edx
	movq	%rax, %r12
	movq	%rax, %rsi
	xorl	%eax, %eax
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	jmp	.L12711
.L12756:
	movl	$1, %ebx
	jmp	.L12750
.L12748:
	xorl	%ebx, %ebx
	jmp	.L12750
.L12754:
	movq	8(%r14), %rdi
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L12756
	movq	16(%r14), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L12750
	jmp	.L12756
.L15622:
	movzbl	2(%r14), %eax
	cmpb	$16, %al
	je	.L12740
	movl	cse_not_expected(%rip), %r15d
	movq	2568(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	%al, %edx
	testl	%r15d, %r15d
	cmove	%r14, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	call	expand_expr
	movq	%rax, %r12
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L12766
	testb	%al, %al
	je	.L12766
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L15368
.L15621:
	cmpb	$16, 2(%r14)
	jne	.L12713
	call	gen_label_rtx
	movq	%rax, %r13
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r15
	testq	%rbx, %rbx
	jne	.L12717
.L14757:
	movzwl	(%r14), %eax
	movq	%r14, %r12
	cmpl	$59, %eax
	je	.L12719
	cmpl	$55, %eax
	je	.L15657
.L12723:
	cmpl	$63, %eax
	je	.L12726
	cmpl	$66, %eax
	je	.L12726
.L12722:
	movq	2568(%rsp), %r14
	xorl	%eax, %eax
	movq	%r13, %rsi
	incl	inhibit_defer_pop(%rip)
	movq	32(%r14), %rdi
	call	jumpifnot
	movq	40(%r14), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movl	%ebp, %edx
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L12732
.L14759:
	movq	%r15, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r13, %rdi
	call	emit_label
	xorl	%eax, %eax
	movl	%ebp, %edx
	movq	2568(%rsp), %r13
	movq	%r12, %rsi
	movq	48(%r13), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L12737
.L14761:
	movq	%r15, %rdi
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L12711
.L12737:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rcx
	movq	%rax, 16(%rbx)
	testq	%rcx, %rcx
	movq	%rcx, pending_chain(%rip)
	movq	%rcx, %rbx
	jne	.L12737
	jmp	.L14761
.L12732:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdi
	movq	%rax, 16(%rbx)
	testq	%rdi, %rdi
	movq	%rdi, pending_chain(%rip)
	movq	%rdi, %rbx
	jne	.L12732
	jmp	.L14759
.L12726:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L12722
.L15657:
	jne	.L12723
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L12722
.L12719:
	cmpq	$0, 16(%r14)
	jne	.L12727
	movq	8(%r14), %r12
	jmp	.L12722
.L12727:
	movq	24(%r14), %rax
	testq	%rax, %rax
	je	.L12728
	movq	%rax, %r12
	jmp	.L12722
.L12728:
	movq	8(%r14), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	%rax, 24(%r12)
	movq	%rax, %rdi
	movq	8(%r14), %rsi
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r12
	jmp	.L12722
	.p2align 6,,7
.L12717:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r9
	movq	%rax, 16(%rbx)
	testq	%r9, %r9
	movq	%r9, pending_chain(%rip)
	movq	%r9, %rbx
	jne	.L12717
	jmp	.L14757
.L15620:
	movq	32(%rdx), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L12709
.L14755:
	movq	2568(%rsp), %rsi
	movl	%ebp, %edx
	xorl	%eax, %eax
	movq	40(%rsi), %rdi
	movq	%r14, %rsi
	call	store_expr
	movq	%rax, %r12
	jmp	.L12711
.L12709:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r10
	movq	%rax, 16(%rbx)
	testq	%r10, %r10
	movq	%r10, pending_chain(%rip)
	movq	%r10, %rbx
	jne	.L12709
	jmp	.L14755
.L15619:
	movq	16(%rdi), %r11
	cmpw	$46, (%r11)
	jne	.L12702
	movq	8(%rdi), %rax
	cmpq	virtual_incoming_args_rtx(%rip), %rax
	je	.L12701
	cmpq	virtual_stack_vars_rtx(%rip), %rax
	jne	.L12702
	jmp	.L12701
	.p2align 6,,7
.L12694:
	movq	2568(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movl	%r13d, %ecx
	movl	%r15d, %edx
	movl	2560(%rsp), %r9d
	movl	%ebp, %esi
	movq	%rax, %r8
	movq	%rax, %r14
	movq	%rbx, %rdi
	xorl	%eax, %eax
	movl	%r9d, (%rsp)
	movl	%r12d, %r9d
	call	store_bit_field
	movl	192(%rsp), %esi
	testl	%esi, %esi
	je	.L12696
	movl	188(%rsp), %edi
	testl	%edi, %edi
	je	.L12697
	movl	(%rbx), %eax
	andl	$134283263, %eax
	cmpl	$134217783, %eax
	je	.L12697
	movl	2564(%rsp), %ebx
	testl	%ebx, %ebx
	je	.L12698
	movl	188(%rsp), %edx
	xorl	%esi, %esi
	movl	$46, %edi
	xorl	%eax, %eax
	call	gen_rtx
	xorl	%edx, %edx
	movq	%r14, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	expand_and
.L15237:
	movq	%rax, %rbx
	jmp	.L12692
.L12698:
	movzbl	2(%r14), %r13d
	testl	%r13d, %r13d
	cmove	192(%rsp), %r13d
	xorl	%esi, %esi
	movslq	%r13d,%rcx
	movl	mode_size(,%rcx,4), %edi
	sall	$3, %edi
	subl	%ebp, %edi
	call	build_int_2_wide
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	%rax, %r15
	movl	%r13d, %esi
	movq	%r14, %rdx
	movq	%rax, %rcx
	movl	$77, %edi
	xorl	%eax, %eax
	call	expand_shift
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movl	$78, %edi
	movl	%r13d, %esi
	movq	%r15, %rcx
	xorl	%eax, %eax
	call	expand_shift
	jmp	.L15237
.L12697:
	movl	2560(%rsp), %eax
	movl	2564(%rsp), %ecx
	movq	%rbx, %rdi
	movl	192(%rsp), %r9d
	movl	%ebp, %esi
	movl	%r15d, %edx
	xorl	%r8d, %r8d
	movl	$0, (%rsp)
	movl	%r12d, 8(%rsp)
	movl	%eax, 16(%rsp)
	xorl	%eax, %eax
	call	extract_bit_field
	jmp	.L15237
.L12696:
	movq	const0_rtx(%rip), %rbx
	jmp	.L12692
.L15618:
	movzwl	(%rbx), %eax
	cmpw	$51, %ax
	je	.L12690
	cmpw	$53, %ax
	jne	.L12689
.L12690:
	movzbl	2(%rbx), %edi
	xorl	%edx, %edx
	movslq	%edi,%r8
	movl	mode_size(,%r8,4), %esi
	call	assign_stack_temp
	movq	%rax, %rdi
	movq	%rax, %r13
	call	copy_rtx
	movb	$16, 2(%rax)
	movq	%rax, %r14
	movzbq	2(%rbx), %rdx
	movl	mode_size(,%rdx,4), %eax
	sall	$3, %eax
	cmpl	%eax, %ebp
	je	.L12691
	movq	%r13, %rdi
	movq	%rbx, %rsi
	call	emit_move_insn
.L12691:
	movl	%r12d, 8(%rsp)
	movq	2568(%rsp), %r8
	movq	%r14, %rdi
	movl	2560(%rsp), %r12d
	movl	%ebp, %esi
	movl	%r15d, %edx
	movl	$16, %ecx
	xorl	%r9d, %r9d
	xorl	%eax, %eax
	movl	$0, (%rsp)
	movl	%r12d, 16(%rsp)
	call	store_field
	movq	%r13, %rsi
	movq	%rbx, %rdi
	call	emit_move_insn
	jmp	.L12692
.L12686:
	movl	$0, 192(%rsp)
	jmp	.L12687
.L15617:
	orb	$8, 3(%rbx)
	jmp	.L12684
.L15616:
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	cmpw	$55, (%rbx)
	jne	.L15283
	movl	$4, %edi
	movq	%rax, %rsi
	call	force_reg
	movq	8(%rbx), %rdx
	movl	$4, %esi
	movq	%rax, %rcx
	movl	$63, %edi
	xorl	%eax, %eax
	call	gen_rtx
	xorl	%esi, %esi
	movq	%rbx, %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	movq	%rax, %rbx
	jmp	.L12682
.L15615:
	movq	%r12, %rdi
	call	stabilize_reference
	movq	%rax, %r12
	jmp	.L12681
.L15614:
	xorl	%edx, %edx
	xorl	%eax, %eax
	movl	$1, %esi
	call	mode_for_size
	cmpl	$16, %eax
	cmovne	%eax, %ebx
	movl	%ebx, 196(%rsp)
	jmp	.L12678
	.p2align 6,,7
.L15613:
	movq	40(%r12), %rcx
	cmpb	$25, 16(%rcx)
	jne	.L12672
	movq	8(%r12), %r8
	movq	32(%r8), %rax
	cmpb	$25, 16(%rax)
	jne	.L12672
	movl	24(%rax), %eax
	imull	24(%rcx), %eax
	jmp	.L15230
	.p2align 6,,7
.L15608:
	movl	flag_volatile(%rip), %ecx
	testl	%ecx, %ecx
	je	.L12655
	movl	$1, (%r15)
	movzbl	16(%r12), %edx
	jmp	.L12655
.L12650:
	movl	24(%rcx), %eax
	movl	%eax, 5452(%rsp)
	jmp	.L12649
.L15607:
	movzbl	17(%r14), %edx
	movq	40(%r14), %rcx
	shrb	$6, %dl
	movl	%edx, %r11d
	andl	$1, %r11d
	movl	%r11d, 2564(%rsp)
	jmp	.L12646
.L15606:
	movq	40(%r14), %rax
	testb	$16, 53(%rax)
	movq	40(%rax), %rcx
	jne	.L12645
	movzbl	52(%rax), %ebx
	movl	%ebx, 196(%rsp)
.L12645:
	movzbl	17(%rax), %r9d
	shrb	$6, %r9b
	movl	%r9d, %edi
	andl	$1, %edi
	movl	%edi, 2564(%rsp)
	jmp	.L12646
.L15563:
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	jmp	.L12641
.L12257:
	movq	56(%rsp), %rdi
	movq	%r12, %rsi
	xorl	%eax, %eax
	call	convert_move
	jmp	.L12245
.L12256:
	cmpb	$16, %al
	je	.L15658
.L12512:
	movq	56(%rsp), %rdi
	jmp	.L15227
.L15658:
	movq	2800(%rsp), %rdi
	cmpb	$28, 16(%rdi)
	je	.L15659
	cmpb	$16, %al
	jne	.L12512
	movq	2800(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, 456(%rsp)
	call	expr_size
	movq	56(%rsp), %r15
	movq	2800(%rsp), %r9
	movq	%rax, %r13
	movq	8(%r9), %rdi
	movl	48(%rdi), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r15)
	movl	%eax, 452(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	56(%rsp), %rsi
	movq	%rsi, 464(%rsp)
	movzwl	(%rsi), %eax
	cmpl	$59, %eax
	je	.L12515
	cmpl	$55, %eax
	je	.L15660
	cmpl	$63, %eax
	je	.L12522
	cmpl	$66, %eax
	je	.L12522
.L12518:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L12525
	cmpl	$55, %eax
	je	.L15661
.L12529:
	cmpl	$63, %eax
	je	.L12532
	cmpl	$66, %eax
	je	.L12532
.L12528:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L12535
	cmpl	$55, %eax
	je	.L15662
.L12539:
	cmpl	$63, %eax
	je	.L12542
	cmpl	$66, %eax
	je	.L12542
.L12538:
	movq	464(%rsp), %rax
	cmpw	$55, (%rax)
	jne	.L15283
	movq	456(%rsp), %rcx
	cmpw	$55, (%rcx)
	jne	.L15283
	testq	%r13, %r13
	je	.L15283
	cmpw	$46, (%r13)
	je	.L15663
.L12548:
	movl	452(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 2592(%rsp)
	testl	%ebp, %ebp
	je	.L14751
.L12634:
	movslq	%ebp,%rax
	movq	%rax, 2584(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L12622
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L12626
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L12622
.L12626:
	movslq	%edx,%r15
	leaq	(%r15,%r15,4), %r14
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15664
.L12627:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15665
.L12628:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L12629
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	2592(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L12622
.L12629:
	call	get_last_insn
	movl	$1, %edx
	movq	%r13, %rsi
	movq	%rax, 2576(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15666
.L12630:
	movq	464(%rsp), %rdi
	xorl	%eax, %eax
	movq	456(%rsp), %rsi
	movq	%rbx, %rdx
	movq	2592(%rsp), %rcx
	call	*insn_gen_function(,%r15,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14987
	movq	2576(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L12622:
	movq	2584(%rsp), %rax
	movl	mode_wider_mode(,%rax,4), %ebp
	testl	%ebp, %ebp
	jne	.L12634
.L14751:
	movl	$4, %edi
	movq	%r13, %rsi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movq	464(%rsp), %rbx
	movl	$3, %ecx
	movq	456(%rsp), %r11
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movq	8(%r11), %r9
	movl	$4, 24(%rsp)
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movq	%r9, (%rsp)
.L15226:
	movq	8(%rbx), %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	call	emit_library_call
	jmp	.L12245
.L14987:
	call	emit_insn
	jmp	.L12245
.L15666:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L12630
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L12630
.L15665:
	xorl	%eax, %eax
	movq	456(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L12622
	jmp	.L12628
.L15664:
	xorl	%eax, %eax
	movq	464(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L12622
	jmp	.L12627
.L15663:
	movl	8(%r13), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 452(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	452(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L12562:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14742
.L12558:
	movslq	%edx,%r15
	salq	$2, %r15
	cmpl	%r8d, mode_size(%r15)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r15), %edx
	testl	%edx, %edx
	jne	.L12558
.L14742:
	testl	%ecx, %ecx
	je	.L12551
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L12560
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L12560
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L12560:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L12562
.L12551:
	decl	%r9d
	jg	.L12548
	movq	464(%rsp), %rdx
	movq	456(%rsp), %r11
	xorl	%ecx, %ecx
	movl	%r10d, %r13d
	movl	$9, %r14d
	movq	8(%rdx), %rbx
	movq	8(%r11), %rdi
	movq	%r11, 5800(%rsp)
	movl	$0, 5828(%rsp)
	movq	%rdx, 5776(%rsp)
	movq	%rbx, 5784(%rsp)
	movq	%rdi, 5808(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L12565
	cmpw	$88, %dx
	je	.L12565
	cmpw	$87, %dx
	je	.L12565
.L12564:
	movl	%ecx, 5792(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L12567
	cmpw	$88, %dx
	je	.L12567
	cmpw	$87, %dx
	je	.L12567
.L12566:
	movl	%ecx, 5816(%rsp)
	movl	$0, 5820(%rsp)
	movl	$0, 5796(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L12569
	cmpw	$87, %ax
	je	.L12569
.L12568:
	testl	%edx, %edx
	movl	%edx, 5832(%rsp)
	je	.L12570
	movl	%r10d, 5828(%rsp)
.L12570:
	movl	%r10d, 5824(%rsp)
	movl	5816(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L12572
	movl	5792(%rsp), %eax
	testl	%eax, %eax
	jne	.L12571
.L12572:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 452(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r15d
	cmovl	452(%rsp), %ebp
.L12586:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14745
.L12582:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L12582
.L14745:
	testl	%ecx, %ecx
	je	.L12575
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L12584
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r15d, %eax
	cmpl	%eax, %ebp
	jl	.L12584
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L12584:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L12586
.L12575:
	cmpl	$2, %r9d
	jle	.L12571
	testl	%r10d, %r10d
	jne	.L12588
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L12589
	cmpw	$46, %dx
	je	.L12589
	cmpw	$47, %dx
	je	.L12589
	cmpw	$49, %dx
	je	.L12589
	cmpw	$113, %dx
	je	.L12589
.L12588:
	movl	5792(%rsp), %eax
	testl	%eax, %eax
	jne	.L12571
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L12591
	cmpw	$46, %dx
	je	.L12591
	cmpw	$47, %dx
	je	.L12591
	cmpw	$49, %dx
	je	.L12591
	cmpw	$113, %dx
	je	.L12591
.L12571:
	cmpl	$8, 452(%rsp)
	movl	$8, %eax
	cmovl	452(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 452(%rsp)
	jle	.L12594
.L12616:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r13d, %r13d
	testl	%edx, %edx
	je	.L14748
.L12601:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r14d, mode_size(%rbx)
	cmovl	%edx, %r13d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L12601
.L14748:
	testl	%r13d, %r13d
	je	.L12594
	movslq	%r13d,%r14
	movq	%r14, %rcx
	salq	$4, %rcx
	addq	mov_optab(%rip), %rcx
	movl	8(%rcx), %edx
	cmpl	$210, %edx
	je	.L12603
	movl	mode_size(,%r14,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 452(%rsp)
	jl	.L12603
	movslq	%edx,%rdi
	cmpl	%ebp, 5824(%rsp)
	leaq	5776(%rsp), %rbx
	movq	insn_gen_function(,%rdi,8), %r15
	movq	%r15, 2600(%rsp)
	jl	.L12603
	movl	5832(%rsp), %edx
.L12614:
	testl	%edx, %edx
	je	.L12608
	subl	%ebp, 52(%rbx)
.L12608:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L12609
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15225:
	movq	%rax, %r15
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L12611
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L12612:
	movq	%rax, %rsi
	movq	%r15, %rdi
	xorl	%eax, %eax
	call	*2600(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L12613
	addl	%ebp, 52(%rbx)
.L12613:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L12614
.L12603:
	movl	mode_size(,%r14,4), %r14d
	cmpl	$1, %r14d
	jg	.L12616
.L12594:
	movl	5824(%rsp), %r14d
	testl	%r14d, %r14d
.L15400:
	je	.L12245
	jmp	.L15283
.L12611:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L12612
.L12609:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15225
.L12591:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5784(%rsp)
	jmp	.L12571
.L12589:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5808(%rsp)
	jmp	.L12588
.L12569:
	movl	$1, %edx
	jmp	.L12568
.L12567:
	movl	$1, %ecx
	jmp	.L12566
.L12565:
	movl	$1, %ecx
	jmp	.L12564
.L12542:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L12538
.L15662:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L12536
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L15667
.L12536:
	cmpl	$55, %eax
	jne	.L12539
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L12538
.L15667:
	movq	8(%rbp), %rsi
	movq	%rsi, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L12538
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L12538
.L12535:
	cmpq	$0, 16(%r13)
	jne	.L12543
	movq	8(%r13), %r13
	jmp	.L12538
.L12543:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L12544
	movq	%rsi, %r13
	jmp	.L12538
.L12544:
	movq	8(%r13), %rbp
	movzbl	2(%rbp), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L12538
.L12532:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L12528
.L15661:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L12526
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L15668
.L12526:
	cmpl	$55, %eax
	jne	.L12529
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L12528
.L15668:
	movq	8(%rbp), %r11
	movq	%r11, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L12528
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L15224:
	movq	%rbx, 456(%rsp)
	jmp	.L12528
.L12525:
	cmpq	$0, 16(%r12)
	jne	.L12533
	movq	8(%r12), %rbx
	jmp	.L15224
.L12533:
	movq	24(%r12), %r10
	testq	%r10, %r10
	movq	%r10, 456(%rsp)
	jne	.L12528
	movq	8(%r12), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rbx
	movq	%rbx, 456(%rsp)
	jmp	.L12528
.L12522:
	movq	56(%rsp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	56(%rsp), %rbx
	movq	16(%rbx), %rdi
	movq	%rax, 8(%rbx)
	call	protect_from_queue
	movq	56(%rsp), %r10
	movq	%rax, 16(%r10)
	jmp	.L12518
.L15660:
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	56(%rsp), %r11
	movq	%rax, 8(%r11)
	jmp	.L12518
.L12515:
	movq	56(%rsp), %rbx
	cmpq	$0, 16(%rbx)
	jne	.L12523
	movq	8(%rbx), %rax
	movq	%rax, 464(%rsp)
	jmp	.L12518
.L12523:
	movq	56(%rsp), %r14
	movq	24(%r14), %rsi
	testq	%rsi, %rsi
	movq	%rsi, 464(%rsp)
	jne	.L12518
	movq	56(%rsp), %rdi
	movq	8(%rdi), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	56(%rsp), %r15
	movq	%rax, %rdi
	movq	8(%r15), %rsi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	56(%rsp), %rcx
	movq	%rax, %rdi
	movq	16(%rcx), %rsi
	call	emit_insn_before
	movq	56(%rsp), %r8
	movq	24(%r8), %rbp
	movq	%rbp, 464(%rsp)
	jmp	.L12518
.L15659:
	xorl	%eax, %eax
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, %r15
	je	.L15669
.L12261:
	movl	$8, %edi
	call	size_int
	movq	2800(%rsp), %rdi
	movq	%rax, %rdx
	movq	8(%rdi), %r8
	movl	$57, %edi
	movq	32(%r8), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	2800(%rsp), %rbx
	movq	%rax, %rbp
	movl	32(%rbx), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%rbp, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	expand_expr
	movq	2800(%rsp), %rsi
	movq	$0, 472(%rsp)
	movq	%rax, 496(%rsp)
	movq	%rax, %r14
	movq	8(%rsi), %r10
	movl	48(%r10), %eax
	shrl	$3, %eax
	movl	%eax, 492(%rsp)
	movq	56(%rsp), %rax
	cmpb	$16, 2(%rax)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	56(%rsp), %rbx
	movq	%rbx, 504(%rsp)
	movzwl	(%rbx), %eax
	cmpl	$59, %eax
	je	.L12387
	cmpl	$55, %eax
	je	.L15670
	cmpl	$63, %eax
	je	.L12394
	cmpl	$66, %eax
	je	.L12394
.L12390:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L12397
	cmpl	$55, %eax
	je	.L15671
.L12401:
	cmpl	$63, %eax
	je	.L12404
	cmpl	$66, %eax
	je	.L12404
.L12400:
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L12407
	cmpl	$55, %eax
	je	.L15672
.L12411:
	cmpl	$63, %eax
	je	.L12414
	cmpl	$66, %eax
	je	.L12414
.L12410:
	movq	504(%rsp), %rbp
	cmpw	$55, (%rbp)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 496(%rsp)
	je	.L15283
	movq	496(%rsp), %rdi
	cmpw	$46, (%rdi)
	je	.L15673
.L12420:
	movl	492(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 2632(%rsp)
	testl	%ebp, %ebp
	je	.L14739
.L12506:
	movslq	%ebp,%r11
	movq	%r11, %rax
	movq	%r11, 2624(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L12494
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L12498
	movq	496(%rsp), %r13
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L12494
.L12498:
	movslq	%edx,%r10
	leaq	(%r10,%r10,4), %r13
	movq	%r10, 2616(%rsp)
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L15674
.L12499:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L15675
.L12500:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L12501
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	2632(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L12494
.L12501:
	call	get_last_insn
	movl	$1, %edx
	movq	496(%rsp), %rsi
	movq	%rax, 2608(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15676
.L12502:
	movq	%rbx, %rdx
	movq	504(%rsp), %rdi
	xorl	%eax, %eax
	movq	2616(%rsp), %rbx
	movq	%r12, %rsi
	movq	2632(%rsp), %rcx
	call	*insn_gen_function(,%rbx,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14986
	movq	2608(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L12494:
	movq	2624(%rsp), %rdx
	movl	mode_wider_mode(,%rdx,4), %ebp
	testl	%ebp, %ebp
	jne	.L12506
.L14739:
	movq	496(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%r12), %rsi
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%edx, %edx
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	movq	504(%rsp), %rax
	movq	%rsi, (%rsp)
	xorl	%esi, %esi
	movq	8(%rax), %r8
	xorl	%eax, %eax
	call	emit_library_call
.L12504:
	cmpw	$46, (%r14)
	je	.L15677
	movq	56(%rsp), %rcx
	movl	$4, %edi
	movq	8(%rcx), %rsi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movl	$4, %edi
	movq	%r14, %rcx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movl	$4, %edi
	movq	%r15, %rdx
	movq	%r14, %rcx
	movq	%rax, %r12
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 472(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L12508:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L12509
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%r12, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L12509:
	cmpq	$0, 472(%rsp)
	je	.L12245
	movq	472(%rsp), %rdi
	call	emit_label
	jmp	.L12245
.L15677:
	movq	56(%rsp), %r8
	movq	2800(%rsp), %rbp
	movq	8(%r8), %rdi
	movl	32(%rbp), %esi
	call	plus_constant_wide
	movq	%r15, %rdi
	movq	2800(%rsp), %r14
	movq	%rax, %r12
	movl	32(%r14), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L12508
.L14986:
	call	emit_insn
	jmp	.L12504
.L15676:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L12502
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L12502
.L15675:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L12494
	jmp	.L12500
.L15674:
	xorl	%eax, %eax
	movq	504(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L12494
	jmp	.L12499
.L15673:
	movl	8(%rdi), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 492(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	492(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L12434:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14730
.L12430:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L12430
.L14730:
	testl	%ecx, %ecx
	je	.L12423
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L12432
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L12432
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L12432:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L12434
.L12423:
	decl	%r9d
	jg	.L12420
	movq	504(%rsp), %rcx
	movq	8(%r12), %rdi
	movl	%r10d, %r13d
	movq	8(%rcx), %rbx
	movq	%r12, 5800(%rsp)
	movq	%rcx, 5776(%rsp)
	movl	$0, 5828(%rsp)
	movq	%rdi, 5808(%rsp)
	xorl	%ecx, %ecx
	movl	$9, 488(%rsp)
	movq	%rbx, 5784(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L12437
	cmpw	$88, %dx
	je	.L12437
	cmpw	$87, %dx
	je	.L12437
.L12436:
	movl	%ecx, 5792(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L12439
	cmpw	$88, %dx
	je	.L12439
	cmpw	$87, %dx
	je	.L12439
.L12438:
	movl	%ecx, 5816(%rsp)
	movl	$0, 5820(%rsp)
	movl	$0, 5796(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L12441
	cmpw	$87, %ax
	je	.L12441
.L12440:
	testl	%edx, %edx
	movl	%edx, 5832(%rsp)
	je	.L12442
	movl	%r10d, 5828(%rsp)
.L12442:
	movl	5816(%rsp), %eax
	movl	%r10d, 5824(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L12444
	movl	5792(%rsp), %r11d
	testl	%r11d, %r11d
	jne	.L12443
.L12444:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 492(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	492(%rsp), %ebp
.L12458:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14733
.L12454:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L12454
.L14733:
	testl	%ecx, %ecx
	je	.L12447
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L12456
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L12456
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L12456:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L12458
.L12447:
	cmpl	$2, %r9d
	jle	.L12443
	testl	%r10d, %r10d
	jne	.L12460
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L12461
	cmpw	$46, %dx
	je	.L12461
	cmpw	$47, %dx
	je	.L12461
	cmpw	$49, %dx
	je	.L12461
	cmpw	$113, %dx
	je	.L12461
.L12460:
	movl	5792(%rsp), %eax
	testl	%eax, %eax
	jne	.L12443
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L12463
	cmpw	$46, %dx
	je	.L12463
	cmpw	$47, %dx
	je	.L12463
	cmpw	$49, %dx
	je	.L12463
	cmpw	$113, %dx
	je	.L12463
.L12443:
	cmpl	$8, 492(%rsp)
	movl	$8, %eax
	cmovl	492(%rsp), %eax
	cmpl	$1, 488(%rsp)
	movl	%eax, 492(%rsp)
	jle	.L12466
.L12488:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14736
.L12473:
	movslq	%edx,%rbx
	movl	488(%rsp), %ebp
	salq	$2, %rbx
	cmpl	%ebp, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L12473
.L14736:
	testl	%r12d, %r12d
	je	.L12466
	movslq	%r12d,%r13
	movq	%r13, %r8
	salq	$4, %r8
	addq	mov_optab(%rip), %r8
	movl	8(%r8), %edx
	cmpl	$210, %edx
	je	.L12475
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 492(%rsp)
	jl	.L12475
	movslq	%edx,%rcx
	cmpl	%ebp, 5824(%rsp)
	leaq	5776(%rsp), %rbx
	movq	insn_gen_function(,%rcx,8), %rdi
	movq	%rdi, 2640(%rsp)
	jl	.L12475
	movl	5832(%rsp), %edx
.L12486:
	testl	%edx, %edx
	je	.L12480
	subl	%ebp, 52(%rbx)
.L12480:
	movl	16(%rbx), %r9d
	testl	%r9d, %r9d
	je	.L12481
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15223:
	movq	%rax, 480(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L12483
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L12484:
	movq	%rax, %rsi
	movq	480(%rsp), %rdi
	xorl	%eax, %eax
	call	*2640(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L12485
	addl	%ebp, 52(%rbx)
.L12485:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L12486
.L12475:
	movl	mode_size(,%r13,4), %r12d
	movl	%r12d, 488(%rsp)
	decl	%r12d
	jg	.L12488
.L12466:
	movl	5824(%rsp), %eax
	testl	%eax, %eax
	je	.L12504
	jmp	.L15283
.L12483:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L12484
.L12481:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15223
.L12463:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5784(%rsp)
	jmp	.L12443
.L12461:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5808(%rsp)
	jmp	.L12460
.L12441:
	movl	$1, %edx
	jmp	.L12440
.L12439:
	movl	$1, %ecx
	jmp	.L12438
.L12437:
	movl	$1, %ecx
	jmp	.L12436
.L12414:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L12410
.L15672:
	movzbl	2(%r14), %edx
	cmpb	$16, %dl
	je	.L12408
	movq	8(%r14), %rbp
	cmpw	$59, (%rbp)
	je	.L15678
.L12408:
	cmpl	$55, %eax
	jne	.L12411
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L12410
.L15678:
	movq	8(%rbp), %r10
	movq	%r10, 8(%r14)
	cmpq	$0, 16(%rbp)
	je	.L12410
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L15222:
	movq	%rbx, 496(%rsp)
	jmp	.L12410
.L12407:
	cmpq	$0, 16(%r14)
	jne	.L12415
	movq	8(%r14), %rdx
	movq	%rdx, 496(%rsp)
	jmp	.L12410
.L12415:
	movq	24(%r14), %rax
	testq	%rax, %rax
	movq	%rax, 496(%rsp)
	jne	.L12410
	movq	8(%r14), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rbx
	jmp	.L15222
.L12404:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L12400
.L15671:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L12398
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L15679
.L12398:
	cmpl	$55, %eax
	jne	.L12401
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L12400
.L15679:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L12400
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	%r13, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L12400
.L12397:
	cmpq	$0, 16(%r12)
	jne	.L12405
	movq	8(%r12), %r12
	jmp	.L12400
.L12405:
	movq	24(%r12), %rax
	testq	%rax, %rax
	je	.L12406
	movq	%rax, %r12
	jmp	.L12400
.L12406:
	movq	8(%r12), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L12400
.L12394:
	movq	56(%rsp), %r13
	xorl	%esi, %esi
	movq	8(%r13), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	56(%rsp), %r11
	movq	%rax, 8(%r11)
	movq	56(%rsp), %r9
	movq	16(%r9), %rdi
	call	protect_from_queue
	movq	56(%rsp), %rcx
	movq	%rax, 16(%rcx)
	jmp	.L12390
.L15670:
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbx)
	jmp	.L12390
.L12387:
	movq	56(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L12395
	movq	8(%rcx), %rdx
	movq	%rdx, 504(%rsp)
	jmp	.L12390
.L12395:
	movq	56(%rsp), %rax
	movq	24(%rax), %r10
	testq	%r10, %r10
	movq	%r10, 504(%rsp)
	jne	.L12390
	movq	56(%rsp), %r9
	movq	8(%r9), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	56(%rsp), %rcx
	movq	%rax, %rdi
	movq	8(%rcx), %rsi
	movq	%rax, 24(%rcx)
	call	gen_move_insn
	movq	56(%rsp), %rbx
	movq	%rax, %rdi
	movq	16(%rbx), %rsi
	call	emit_insn_before
	movq	56(%rsp), %rbp
	movq	24(%rbp), %rsi
	movq	%rsi, 504(%rsp)
	jmp	.L12390
.L15669:
	movq	2800(%rsp), %r8
	movl	32(%r8), %eax
	cmpl	%eax, 8(%r15)
	jge	.L12261
	movq	%r12, 520(%rsp)
	movq	56(%rsp), %rsi
	movq	8(%r8), %r13
	movl	48(%r13), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%rsi)
	movl	%eax, 516(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	56(%rsp), %rdx
	movq	%rdx, 528(%rsp)
	movzwl	(%rdx), %eax
	cmpl	$59, %eax
	je	.L12264
	cmpl	$55, %eax
	je	.L15680
	cmpl	$63, %eax
	je	.L12271
	cmpl	$66, %eax
	je	.L12271
.L12267:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L12274
	cmpl	$55, %eax
	je	.L15681
.L12278:
	cmpl	$63, %eax
	je	.L12281
	cmpl	$66, %eax
	je	.L12281
.L12277:
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L12284
	cmpl	$55, %eax
	je	.L15682
.L12288:
	cmpl	$63, %eax
	je	.L12291
	cmpl	$66, %eax
	je	.L12291
.L12287:
	movq	528(%rsp), %rdx
	cmpw	$55, (%rdx)
	jne	.L15283
	movq	520(%rsp), %rbp
	cmpw	$55, (%rbp)
	jne	.L15283
	testq	%r15, %r15
	je	.L15283
	cmpw	$46, (%r15)
	je	.L15683
.L12297:
	movl	516(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 2664(%rsp)
	testl	%ebp, %ebp
	je	.L14727
.L12383:
	movslq	%ebp,%rax
	movq	%rax, 2656(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L12371
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L12375
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r15)
	ja	.L12371
.L12375:
	movslq	%edx,%r14
	leaq	(%r14,%r14,4), %r13
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L15684
.L12376:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L15685
.L12377:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L12378
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	2664(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L12371
.L12378:
	call	get_last_insn
	movl	$1, %edx
	movq	%r15, %rsi
	movq	%rax, 2648(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15686
.L12379:
	movq	528(%rsp), %rdi
	xorl	%eax, %eax
	movq	520(%rsp), %rsi
	movq	%rbx, %rdx
	movq	2664(%rsp), %rcx
	call	*insn_gen_function(,%r14,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14987
	movq	2648(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L12371:
	movq	2656(%rsp), %r11
	movl	mode_wider_mode(,%r11,4), %ebp
	testl	%ebp, %ebp
	jne	.L12383
.L14727:
	movl	$4, %edi
	movq	%r15, %rsi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movq	528(%rsp), %rbx
	movl	$3, %ecx
	movq	520(%rsp), %rdx
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	8(%rdx), %r13
	xorl	%edx, %edx
	movl	$4, 24(%rsp)
	movl	$4, 8(%rsp)
	movq	%rax, 16(%rsp)
	movq	%r13, (%rsp)
	jmp	.L15226
.L15686:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L12379
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L12379
.L15685:
	xorl	%eax, %eax
	movq	520(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L12371
	jmp	.L12377
.L15684:
	xorl	%eax, %eax
	movq	528(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L12371
	jmp	.L12376
.L15683:
	movl	8(%r15), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 516(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	516(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L12311:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14718
.L12307:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L12307
.L14718:
	testl	%ecx, %ecx
	je	.L12300
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L12309
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L12309
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L12309:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L12311
.L12300:
	decl	%r9d
	jg	.L12297
	movq	520(%rsp), %rcx
	movq	528(%rsp), %r9
	movl	%r10d, %r13d
	movl	$9, %r14d
	movq	8(%r9), %rbx
	movq	8(%rcx), %rdi
	movq	%rcx, 5736(%rsp)
	movl	$0, 5764(%rsp)
	movq	%r9, 5712(%rsp)
	xorl	%ecx, %ecx
	movq	%rbx, 5720(%rsp)
	movq	%rdi, 5744(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L12314
	cmpw	$88, %dx
	je	.L12314
	cmpw	$87, %dx
	je	.L12314
.L12313:
	movl	%ecx, 5728(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L12316
	cmpw	$88, %dx
	je	.L12316
	cmpw	$87, %dx
	je	.L12316
.L12315:
	movl	%ecx, 5752(%rsp)
	movl	$0, 5756(%rsp)
	movl	$0, 5732(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L12318
	cmpw	$87, %ax
	je	.L12318
.L12317:
	testl	%edx, %edx
	movl	%edx, 5768(%rsp)
	je	.L12319
	movl	%r10d, 5764(%rsp)
.L12319:
	movl	%r10d, 5760(%rsp)
	movl	5752(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L12321
	movl	5728(%rsp), %eax
	testl	%eax, %eax
	jne	.L12320
.L12321:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 516(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r15d
	cmovl	516(%rsp), %ebp
.L12335:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14721
.L12331:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L12331
.L14721:
	testl	%ecx, %ecx
	je	.L12324
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L12333
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r15d, %eax
	cmpl	%eax, %ebp
	jl	.L12333
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L12333:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L12335
.L12324:
	cmpl	$2, %r9d
	jle	.L12320
	testl	%r10d, %r10d
	jne	.L12337
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L12338
	cmpw	$46, %dx
	je	.L12338
	cmpw	$47, %dx
	je	.L12338
	cmpw	$49, %dx
	je	.L12338
	cmpw	$113, %dx
	je	.L12338
.L12337:
	movl	5728(%rsp), %esi
	testl	%esi, %esi
	jne	.L12320
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L12340
	cmpw	$46, %dx
	je	.L12340
	cmpw	$47, %dx
	je	.L12340
	cmpw	$49, %dx
	je	.L12340
	cmpw	$113, %dx
	je	.L12340
.L12320:
	cmpl	$8, 516(%rsp)
	movl	$8, %eax
	cmovl	516(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 516(%rsp)
	jle	.L12343
.L12365:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r13d, %r13d
	testl	%edx, %edx
	je	.L14724
.L12350:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r14d, mode_size(%rbx)
	cmovl	%edx, %r13d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L12350
.L14724:
	testl	%r13d, %r13d
	je	.L12343
	movslq	%r13d,%r14
	movq	%r14, %r8
	salq	$4, %r8
	addq	mov_optab(%rip), %r8
	movl	8(%r8), %edx
	cmpl	$210, %edx
	je	.L12352
	movl	mode_size(,%r14,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 516(%rsp)
	jl	.L12352
	movslq	%edx,%r15
	cmpl	%ebp, 5760(%rsp)
	leaq	5712(%rsp), %rbx
	movq	insn_gen_function(,%r15,8), %rdi
	movq	%rdi, 2672(%rsp)
	jl	.L12352
	movl	5768(%rsp), %edx
.L12363:
	testl	%edx, %edx
	je	.L12357
	subl	%ebp, 52(%rbx)
.L12357:
	movl	16(%rbx), %ecx
	testl	%ecx, %ecx
	je	.L12358
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15221:
	movl	40(%rbx), %r9d
	movq	%rax, %r15
	testl	%r9d, %r9d
	je	.L12360
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L12361:
	movq	%rax, %rsi
	movq	%r15, %rdi
	xorl	%eax, %eax
	call	*2672(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L12362
	addl	%ebp, 52(%rbx)
.L12362:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L12363
.L12352:
	movl	mode_size(,%r14,4), %r14d
	cmpl	$1, %r14d
	jg	.L12365
.L12343:
	movl	5760(%rsp), %r14d
	testl	%r14d, %r14d
	jmp	.L15400
.L12360:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L12361
.L12358:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15221
.L12340:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5720(%rsp)
	jmp	.L12320
.L12338:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5744(%rsp)
	jmp	.L12337
.L12318:
	movl	$1, %edx
	jmp	.L12317
.L12316:
	movl	$1, %ecx
	jmp	.L12315
.L12314:
	movl	$1, %ecx
	jmp	.L12313
.L12291:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L12287
.L15682:
	movzbl	2(%r15), %edx
	cmpb	$16, %dl
	je	.L12285
	movq	8(%r15), %rbp
	cmpw	$59, (%rbp)
	je	.L15687
.L12285:
	cmpl	$55, %eax
	jne	.L12288
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L12287
.L15687:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r15)
	cmpq	$0, 16(%rbp)
	je	.L12287
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r15, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	%r13, %r15
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L12287
.L12284:
	cmpq	$0, 16(%r15)
	jne	.L12292
	movq	8(%r15), %r15
	jmp	.L12287
.L12292:
	movq	24(%r15), %rsi
	testq	%rsi, %rsi
	je	.L12293
	movq	%rsi, %r15
	jmp	.L12287
.L12293:
	movq	8(%r15), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L12287
.L12281:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L12277
.L15681:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L12275
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L15688
.L12275:
	cmpl	$55, %eax
	jne	.L12278
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L12277
.L15688:
	movq	8(%rbp), %r10
	movq	%r10, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L12277
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r13, 520(%rsp)
	jmp	.L12277
.L12274:
	cmpq	$0, 16(%r12)
	jne	.L12282
	movq	8(%r12), %rsi
	movq	%rsi, 520(%rsp)
	jmp	.L12277
.L12282:
	movq	24(%r12), %r9
	testq	%r9, %r9
	movq	%r9, 520(%rsp)
	jne	.L12277
	movq	8(%r12), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r14
	movq	%r14, 520(%rsp)
	jmp	.L12277
.L12271:
	movq	56(%rsp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L12267
.L15680:
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	56(%rsp), %r9
	movq	%rax, 8(%r9)
	jmp	.L12267
.L12264:
	movq	56(%rsp), %rsi
	cmpq	$0, 16(%rsi)
	jne	.L12272
	movq	8(%rsi), %r11
	movq	%r11, 528(%rsp)
	jmp	.L12267
.L12272:
	movq	56(%rsp), %rbx
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	movq	%rdi, 528(%rsp)
	jne	.L12267
	movq	56(%rsp), %r8
	movq	8(%r8), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	%rax, %rdi
	movq	56(%rsp), %rax
	movq	8(%rax), %rsi
	movq	%rdi, 24(%rax)
	call	gen_move_insn
	movq	56(%rsp), %rbp
	movq	%rax, %rdi
	movq	16(%rbp), %rsi
	call	emit_insn_before
	movq	24(%rbp), %rdx
	movq	%rdx, 528(%rsp)
	jmp	.L12267
	.p2align 6,,7
.L12253:
	movq	56(%rsp), %r9
	xorl	%esi, %esi
	movq	8(%r9), %rdi
	call	protect_from_queue
	movq	56(%rsp), %r13
	movq	%rax, 8(%r13)
	movq	56(%rsp), %rsi
	movq	16(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	56(%rsp), %rbp
	movq	%rax, 16(%rbp)
	jmp	.L12249
.L15562:
	jne	.L12250
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbx)
	jmp	.L12249
	.p2align 6,,7
.L12246:
	movq	56(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L12254
	movq	8(%rcx), %r15
	movq	%r15, 56(%rsp)
	jmp	.L12249
.L12254:
	movq	56(%rsp), %rdi
	movq	24(%rdi), %rax
	testq	%rax, %rax
	je	.L12255
	movq	%rax, 56(%rsp)
	jmp	.L12249
.L12255:
	movq	56(%rsp), %rax
	movq	8(%rax), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	56(%rsp), %rdx
	movq	%rax, %rdi
	movq	8(%rdx), %rsi
	movq	%rax, 24(%rdx)
	call	gen_move_insn
	movq	56(%rsp), %rbx
	movq	%rax, %rdi
	movq	16(%rbx), %rsi
	call	emit_insn_before
	movq	56(%rsp), %r14
	movq	24(%r14), %r11
	movq	%r11, 56(%rsp)
	jmp	.L12249
	.p2align 6,,7
.L15561:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	2800(%rsp), %rdi
	movzbl	2(%rbx), %edx
	movq	%rax, %rsi
	jmp	.L15220
.L12225:
	movq	56(%rsp), %rdx
	movl	(%rdx), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L15689
	movq	56(%rsp), %rcx
	movq	2800(%rsp), %rdi
	xorl	%eax, %eax
	movzbl	2(%rcx), %edx
	movq	%rcx, %rsi
	xorl	%ecx, %ecx
	call	expand_expr
	movq	56(%rsp), %rdx
	movq	%rax, %r12
	cmpw	$51, (%rdx)
	je	.L15690
.L12243:
	movzwl	(%r12), %edx
	leal	-56(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L12244
	cmpw	$46, %dx
	je	.L12244
	cmpw	$47, %dx
	je	.L12244
	cmpw	$49, %dx
	je	.L12244
	cmpw	$113, %dx
	jne	.L12190
	jmp	.L12244
.L15690:
	cmpl	$63, 8(%rdx)
	jle	.L12190
	jmp	.L12243
.L15689:
	movq	2800(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	%rax, %r12
	movq	56(%rsp), %rax
	movq	%r12, %rsi
	movzbl	3(%rax), %edx
	movq	8(%rax), %rdi
	xorl	%eax, %eax
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	jmp	.L12189
.L12234:
	movl	$1, %ebx
	jmp	.L12228
.L12226:
	xorl	%ebx, %ebx
	jmp	.L12228
.L12232:
	movq	56(%rsp), %r11
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	movq	8(%r11), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L12234
	movq	56(%rsp), %r14
	xorl	%eax, %eax
	movq	16(%r14), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L12228
	jmp	.L12234
.L15560:
	movzbl	2(%rdi), %eax
	cmpb	$16, %al
	je	.L12218
	movl	cse_not_expected(%rip), %r9d
	xorl	%esi, %esi
	movzbl	%al, %edx
	testl	%r9d, %r9d
	cmove	%rdi, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	movq	2800(%rsp), %rdi
	call	expand_expr
	movq	%rax, %r12
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L12244
	testb	%al, %al
	je	.L12244
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L15366
	.p2align 6,,7
.L15559:
	movq	56(%rsp), %rbp
	cmpb	$16, 2(%rbp)
	jne	.L12191
	call	gen_label_rtx
	movq	%rax, %rbp
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r13
	testq	%rbx, %rbx
	jne	.L12195
.L14711:
	movq	56(%rsp), %r12
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L12197
	cmpl	$55, %eax
	je	.L15691
.L12201:
	cmpl	$63, %eax
	je	.L12204
	cmpl	$66, %eax
	je	.L12204
.L12200:
	movq	2800(%rsp), %r8
	xorl	%eax, %eax
	movq	%rbp, %rsi
	incl	inhibit_defer_pop(%rip)
	movq	32(%r8), %rdi
	call	jumpifnot
	movq	2800(%rsp), %rcx
	movl	2796(%rsp), %edx
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	40(%rcx), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L12210
.L14713:
	movq	%r13, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%rbp, %rdi
	call	emit_label
	xorl	%eax, %eax
	movl	2796(%rsp), %edx
	movq	2800(%rsp), %rbp
	movq	%r12, %rsi
	movq	48(%rbp), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L12215
.L14715:
	movq	%r13, %rdi
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L12189
.L12215:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rsi
	movq	%rax, 16(%rbx)
	testq	%rsi, %rsi
	movq	%rsi, pending_chain(%rip)
	movq	%rsi, %rbx
	jne	.L12215
	jmp	.L14715
.L12210:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r10
	movq	%rax, 16(%rbx)
	testq	%r10, %r10
	movq	%r10, pending_chain(%rip)
	movq	%r10, %rbx
	jne	.L12210
	jmp	.L14713
.L12204:
	movq	56(%rsp), %r15
	xorl	%esi, %esi
	movq	8(%r15), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	56(%rsp), %r9
	movq	16(%r9), %rdi
	movq	%rax, 8(%r9)
	call	protect_from_queue
	movq	56(%rsp), %rsi
	movq	%rax, 16(%rsi)
	jmp	.L12200
.L15691:
	jne	.L12201
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	56(%rsp), %r12
	movq	%rax, 8(%r12)
	jmp	.L12200
.L12197:
	movq	56(%rsp), %rbx
	cmpq	$0, 16(%rbx)
	jne	.L12205
	movq	8(%rbx), %r12
	jmp	.L12200
.L12205:
	movq	56(%rsp), %r12
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	movq	%rdi, %r12
	jne	.L12200
	movq	56(%rsp), %rax
	movq	8(%rax), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	56(%rsp), %r14
	movq	%rax, %rdi
	movq	8(%r14), %rsi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	56(%rsp), %r11
	movq	%rax, %rdi
	movq	16(%r11), %rsi
	call	emit_insn_before
	movq	56(%rsp), %rbx
	movq	24(%rbx), %r12
	jmp	.L12200
	.p2align 6,,7
.L12195:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r10
	movq	%rax, 16(%rbx)
	testq	%r10, %r10
	movq	%r10, pending_chain(%rip)
	movq	%r10, %rbx
	jne	.L12195
	jmp	.L14711
.L15558:
	movq	2800(%rsp), %rdx
	movq	const0_rtx(%rip), %rsi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	32(%rdx), %rdi
	xorl	%edx, %edx
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L12187
.L14709:
	movq	2800(%rsp), %r8
	movq	56(%rsp), %rsi
	xorl	%eax, %eax
	movl	2796(%rsp), %edx
	movq	40(%r8), %rdi
	call	store_expr
	movq	%rax, %r12
	jmp	.L12189
.L12187:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rcx
	movq	%rax, 16(%rbx)
	testq	%rcx, %rcx
	movq	%rcx, pending_chain(%rip)
	movq	%rcx, %rbx
	jne	.L12187
	jmp	.L14709
.L15557:
	movq	2800(%rsp), %rbx
	movzbl	16(%rbx), %ecx
	cmpb	$39, %cl
	jne	.L12182
	movl	current_function_returns_struct(%rip), %r12d
	testl	%r12d, %r12d
	je	.L12182
	movl	current_function_returns_pcc_struct(%rip), %edi
	testl	%edi, %edi
	jne	.L12182
	movq	%rbx, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	2800(%rsp), %rdi
	movq	%rax, %r14
	xorl	%eax, %eax
	call	expr_size
	movl	$4, %r9d
	movq	56(%rsp), %rbx
	movq	8(%r14), %r11
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	movl	$3, %ecx
	xorl	%eax, %eax
	movq	%r11, (%rsp)
	movq	8(%rbx), %r8
	call	emit_library_call
.L15228:
	movq	56(%rsp), %rdi
	xorl	%eax, %eax
	call	preserve_temp_slots
	xorl	%eax, %eax
	call	free_temp_slots
	jmp	.L11663
.L15556:
	movq	3176(%rsp), %rdi
	xorl	%edx, %edx
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	3176(%rsp), %r15
	movq	%rax, 56(%rsp)
	movzbl	16(%r15), %edx
	jmp	.L12181
.L15555:
	movq	3176(%rsp), %rcx
	movq	40(%rcx), %r9
	cmpb	$25, 16(%r9)
	jne	.L11664
	movq	8(%rcx), %rdi
	movq	32(%rdi), %rcx
	cmpb	$25, 16(%rcx)
	jne	.L11664
.L11665:
	movq	3176(%rsp), %r12
	movl	$0, 5456(%rsp)
	xorl	%edx, %edx
	xorl	%r15d, %r15d
	xorl	%ebp, %ebp
	leaq	5472(%rsp), %r13
	leaq	5456(%rsp), %r14
	movzbl	16(%r12), %eax
	cmpb	$37, %al
	je	.L15692
	cmpb	$38, %al
	je	.L15693
	movq	3176(%rsp), %rdi
	movq	8(%rdi), %r10
	movzbl	44(%r10), %r15d
	movslq	%r15d,%r8
	movl	mode_size(,%r8,4), %eax
	sall	$3, %eax
	movl	%eax, 5476(%rsp)
	movq	8(%rdi), %rcx
	movzbl	17(%rcx), %r9d
	shrb	$6, %r9b
	movl	%r9d, %ebx
	andl	$1, %ebx
	movl	%ebx, 2792(%rsp)
.L11668:
	testq	%rdx, %rdx
	je	.L11671
	cmpb	$25, 16(%rdx)
	je	.L11672
	movl	$16, %r15d
	movl	$-1, 5476(%rsp)
.L11671:
	movl	$0, (%r13)
	.p2align 4,,7
.L11699:
	movzbl	16(%r12), %edx
	cmpb	$39, %dl
	je	.L15694
.L11677:
	leal	-37(%rdx), %esi
	cmpb	$1, %sil
	ja	.L11678
	cmpb	$37, %dl
	je	.L15695
	movq	48(%r12), %rbx
.L11680:
	movzbl	16(%rbx), %eax
	cmpb	$53, %al
	je	.L15696
	cmpb	$25, %al
	je	.L15697
.L11689:
	testq	%rbp, %rbp
	je	.L11691
	movl	$8, %edi
	call	size_int
	movq	%rbx, %rsi
	movl	$58, %edi
	movq	%rax, %rdx
	call	size_binop
	movq	%rbp, %rsi
	movl	$53, %edi
.L15211:
	movq	%rax, %rdx
	call	size_binop
	movq	%rax, %rbp
.L11693:
	testb	$16, 17(%r12)
	je	.L11698
	movl	$1, (%r14)
.L11698:
	movq	32(%r12), %r12
	jmp	.L11699
.L11691:
	movl	$8, %edi
	call	size_int
	movq	%rbx, %rsi
	movl	$58, %edi
	jmp	.L15211
.L15697:
	movl	24(%rbx), %eax
.L15212:
	addl	%eax, (%r13)
	jmp	.L11693
.L15696:
	movq	32(%rbx), %rsi
	cmpb	$25, 16(%rsi)
	je	.L15698
	movq	40(%rbx), %rax
	cmpb	$25, 16(%rax)
	jne	.L15283
	movq	%rsi, %rbx
.L11683:
	movl	24(%rax), %eax
	addl	%eax, (%r13)
	jmp	.L11689
.L15698:
	movq	40(%rbx), %rbx
	movq	%rsi, %rax
	jmp	.L11683
.L15695:
	movq	40(%r12), %rdx
	movq	72(%rdx), %rbx
	jmp	.L11680
.L11678:
	cmpb	$42, %dl
	je	.L15699
.L11694:
	cmpb	$103, %dl
	je	.L11693
	leal	-101(%rdx), %ebx
	cmpb	$1, %bl
	ja	.L11675
	movq	32(%r12), %r8
	movq	8(%r12), %rcx
	movq	8(%r8), %rdi
	movzbl	44(%rdi), %r9d
	cmpb	%r9b, 44(%rcx)
	je	.L11693
.L11675:
	testl	%r15d, %r15d
	jne	.L11700
	movl	(%r13), %eax
	movl	5476(%rsp), %edi
	cltd
	idivl	%edi
	testl	%edx, %edx
	movl	%edx, %ebx
	je	.L15700
.L11700:
	testl	%r15d, %r15d
	movl	%r15d, 5460(%rsp)
	movq	%rbp, 5464(%rsp)
	jne	.L11703
	movl	2796(%rsp), %eax
	testl	%eax, %eax
	jne	.L15701
.L11703:
	movq	%r12, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	5464(%rsp), %rdi
	movq	%rax, 56(%rsp)
	testq	%rdi, %rdi
	jne	.L15702
.L11704:
	movl	5456(%rsp), %eax
	testl	%eax, %eax
	je	.L11706
	movq	56(%rsp), %rsi
	cmpw	$55, (%rsi)
	je	.L15703
.L11706:
	movl	2796(%rsp), %eax
	movl	5476(%rsp), %ebp
	movl	5472(%rsp), %r14d
	movl	5460(%rsp), %ebx
	testl	%eax, %eax
	je	.L11708
	movq	3176(%rsp), %rax
	movq	8(%rax), %r10
	movzbl	44(%r10), %r13d
	movl	%r13d, 448(%rsp)
.L11709:
	movq	8(%r12), %rdi
	movl	48(%rdi), %r12d
	call	int_size_in_bytes
	movl	$0, 444(%rsp)
	movl	%eax, %r15d
	shrl	$3, %r12d
	cmpl	$31, %ebp
	jg	.L11710
	movl	$1, %eax
	movl	%ebp, %ecx
	sall	%cl, %eax
	decl	%eax
	movl	%eax, 444(%rsp)
.L11710:
	cmpl	$16, %ebx
	je	.L15704
.L11711:
	testl	%ebx, %ebx
	je	.L11716
	cmpl	$16, %ebx
	je	.L11717
	movslq	%ebx,%r9
	cmpb	$0, direct_store(%r9)
	je	.L11716
.L11717:
	movq	56(%rsp), %rdi
	movzwl	(%rdi), %eax
	cmpw	$51, %ax
	je	.L11716
	cmpw	$53, %ax
	je	.L11716
	movl	448(%rsp), %r13d
	movq	56(%rsp), %r10
	testl	%r13d, %r13d
	movq	8(%r10), %rdi
	je	.L11723
	movzwl	(%rdi), %edx
	cmpw	$51, %dx
	je	.L11723
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L11723
	cmpw	$46, %dx
	je	.L11723
	cmpw	$47, %dx
	je	.L11723
	cmpw	$49, %dx
	je	.L11723
	cmpw	$113, %dx
	je	.L11723
	cmpw	$63, %dx
	je	.L15705
.L11724:
	xorl	%eax, %eax
	call	copy_to_reg
	movq	%rax, %rdi
.L11723:
	cmpl	$-1, %r14d
	leal	7(%r14), %r9d
	cmovle	%r9d, %r14d
	sarl	$3, %r14d
	movl	%r14d, %esi
	call	plus_constant_wide
	movl	%ebx, %esi
	movq	56(%rsp), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	orb	$16, 3(%rax)
	movq	%rax, %r15
	movl	$0, 440(%rsp)
	movl	448(%rsp), %eax
	movq	2800(%rsp), %rdx
	testl	%eax, %eax
	movzbl	16(%rdx), %eax
	setne	%r11b
	cmpb	$44, %al
	movzbl	%r11b, %ebp
	je	.L15706
	cmpb	$48, %al
	je	.L15707
.L11735:
	testl	%ebp, %ebp
	je	.L11762
	cmpw	$55, (%r15)
	je	.L15708
.L11762:
	movzwl	(%r15), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L11770
	mov	%eax, %r12d
	jmp	*.L11779(,%r12,8)
	.section	.rodata
	.align 8
	.align 4
.L11779:
	.quad	.L11773
	.quad	.L11770
	.quad	.L11770
	.quad	.L11770
	.quad	.L11778
	.quad	.L11770
	.quad	.L11770
	.quad	.L11770
	.quad	.L11776
	.quad	.L11776
	.quad	.L11770
	.quad	.L11776
	.text
.L11773:
	movq	8(%r15), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %ebx
.L11772:
	testl	%ebx, %ebx
	je	.L11769
	movzbl	2(%r15), %eax
	cmpb	$16, %al
	je	.L11781
	testb	%al, %al
	jne	.L15709
.L11781:
	movzbl	2(%r15), %edx
	movq	2800(%rsp), %rdi
	xorl	%esi, %esi
.L15213:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L15365:
	movq	%rax, %r12
.L11788:
	movl	$1, 440(%rsp)
.L11734:
	cmpq	%r15, %r12
	je	.L11789
	movq	2800(%rsp), %rsi
	cmpb	$0, 16(%rsi)
	je	.L11789
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L11790
	cmpl	$55, %eax
	je	.L15710
.L11794:
	cmpl	$63, %eax
	je	.L11797
	cmpl	$66, %eax
	je	.L11797
.L11793:
	movzbl	2(%r12), %eax
	movzbl	2(%r15), %ecx
	cmpb	%cl, %al
	je	.L11800
	testb	%al, %al
	je	.L11800
	movq	2800(%rsp), %rax
	movl	440(%rsp), %r11d
	movq	8(%rax), %rdi
	movzbl	17(%rdi), %r9d
	shrb	$6, %r9b
	movl	%r9d, %edx
	andl	$1, %edx
	testl	%r11d, %r11d
	je	.L11801
	movq	%r12, %rsi
	movzbl	%cl, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%rax, %r12
.L12056:
	movq	%r15, %rdi
	movq	%r12, %rsi
	call	emit_move_insn
.L11789:
	movl	440(%rsp), %r9d
	testl	%r9d, %r9d
	cmove	%r15, %r12
.L11733:
	movq	%r12, 56(%rsp)
	jmp	.L15228
.L11801:
	movq	%r15, %rdi
	movq	%r12, %rsi
	xorl	%eax, %eax
	call	convert_move
	jmp	.L11789
	.p2align 6,,7
.L11800:
	cmpb	$16, %al
	jne	.L12056
	movq	2800(%rsp), %rdx
	cmpb	$28, 16(%rdx)
	je	.L15711
	cmpb	$16, %al
	jne	.L12056
	movq	2800(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, 344(%rsp)
	call	expr_size
	movq	%rax, %r13
	movq	2800(%rsp), %rax
	movq	8(%rax), %rbp
	movl	48(%rbp), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r15)
	movl	%eax, 340(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r15, 352(%rsp)
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L12059
	cmpl	$55, %eax
	je	.L15712
	cmpl	$63, %eax
	je	.L12066
	cmpl	$66, %eax
	je	.L12066
.L12062:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L12069
	cmpl	$55, %eax
	je	.L15713
.L12073:
	cmpl	$63, %eax
	je	.L12076
	cmpl	$66, %eax
	je	.L12076
.L12072:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L12079
	cmpl	$55, %eax
	je	.L15714
.L12083:
	cmpl	$63, %eax
	je	.L12086
	cmpl	$66, %eax
	je	.L12086
.L12082:
	movq	352(%rsp), %rax
	cmpw	$55, (%rax)
	jne	.L15283
	movq	344(%rsp), %r9
	cmpw	$55, (%r9)
	jne	.L15283
	testq	%r13, %r13
	je	.L15283
	cmpw	$46, (%r13)
	je	.L15715
.L12092:
	movl	340(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 2704(%rsp)
	testl	%ebp, %ebp
	je	.L14707
.L12178:
	movslq	%ebp,%rax
	movq	%rax, 2696(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L12166
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L12170
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L12166
.L12170:
	movslq	%edx,%r8
	leaq	(%r8,%r8,4), %r14
	movq	%r8, 2688(%rsp)
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15716
.L12171:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15717
.L12172:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L12173
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	2704(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L12166
.L12173:
	call	get_last_insn
	movl	$1, %edx
	movq	%r13, %rsi
	movq	%rax, 2680(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15718
.L12174:
	movq	2688(%rsp), %rbp
	movq	352(%rsp), %rdi
	xorl	%eax, %eax
	movq	344(%rsp), %rsi
	movq	%rbx, %rdx
	movq	2704(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14984
	movq	2680(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L12166:
	movq	2696(%rsp), %r10
	movl	mode_wider_mode(,%r10,4), %ebp
	testl	%ebp, %ebp
	jne	.L12178
.L14707:
	movq	%r13, %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$3, %ecx
	xorl	%edx, %edx
	movq	344(%rsp), %rsi
	movq	memcpy_libfunc(%rip), %rdi
	movq	8(%rsi), %r13
	xorl	%esi, %esi
	movl	$4, 24(%rsp)
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movq	352(%rsp), %rax
	movq	%r13, (%rsp)
.L15218:
	movq	8(%rax), %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	call	emit_library_call
	jmp	.L11789
.L14984:
	call	emit_insn
	jmp	.L11789
.L15718:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L12174
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L12174
.L15717:
	xorl	%eax, %eax
	movq	344(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L12166
	jmp	.L12172
.L15716:
	xorl	%eax, %eax
	movq	352(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L12166
	jmp	.L12171
.L15715:
	movl	8(%r13), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 340(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	340(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L12106:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14698
.L12102:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L12102
.L14698:
	testl	%ecx, %ecx
	je	.L12095
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L12104
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L12104
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L12104:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L12106
.L12095:
	decl	%r9d
	jg	.L12092
	movq	352(%rsp), %rdx
	movq	344(%rsp), %rcx
	movl	%r10d, %r13d
	movl	$9, %r14d
	movq	8(%rdx), %rbx
	movq	8(%rcx), %rdi
	movq	%rcx, 5736(%rsp)
	movl	$0, 5764(%rsp)
	movq	%rdx, 5712(%rsp)
	xorl	%ecx, %ecx
	movq	%rbx, 5720(%rsp)
	movq	%rdi, 5744(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L12109
	cmpw	$88, %dx
	je	.L12109
	cmpw	$87, %dx
	je	.L12109
.L12108:
	movl	%ecx, 5728(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L12111
	cmpw	$88, %dx
	je	.L12111
	cmpw	$87, %dx
	je	.L12111
.L12110:
	movl	%ecx, 5752(%rsp)
	movl	$0, 5756(%rsp)
	movl	$0, 5732(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L12113
	cmpw	$87, %ax
	je	.L12113
.L12112:
	testl	%edx, %edx
	movl	%edx, 5768(%rsp)
	je	.L12114
	movl	%r10d, 5764(%rsp)
.L12114:
	movl	5752(%rsp), %eax
	movl	%r10d, 5760(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L12116
	movl	5728(%rsp), %eax
	testl	%eax, %eax
	jne	.L12115
.L12116:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 340(%rsp)
	movq	mov_optab(%rip), %r11
	cmovl	340(%rsp), %ebp
.L12130:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14701
.L12126:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L12126
.L14701:
	testl	%ecx, %ecx
	je	.L12119
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L12128
	movl	mode_size(,%rcx,4), %eax
	movl	$8, %r8d
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r8d, %eax
	cmpl	%eax, %ebp
	jl	.L12128
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L12128:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L12130
.L12119:
	cmpl	$2, %r9d
	jle	.L12115
	testl	%r10d, %r10d
	jne	.L12132
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L12133
	cmpw	$46, %dx
	je	.L12133
	cmpw	$47, %dx
	je	.L12133
	cmpw	$49, %dx
	je	.L12133
	cmpw	$113, %dx
	je	.L12133
.L12132:
	movl	5728(%rsp), %esi
	testl	%esi, %esi
	jne	.L12115
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L12135
	cmpw	$46, %dx
	je	.L12135
	cmpw	$47, %dx
	je	.L12135
	cmpw	$49, %dx
	je	.L12135
	cmpw	$113, %dx
	je	.L12135
.L12115:
	cmpl	$8, 340(%rsp)
	movl	$8, %eax
	cmovl	340(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 340(%rsp)
	jle	.L12138
.L12160:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r13d, %r13d
	testl	%edx, %edx
	je	.L14704
.L12145:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r14d, mode_size(%rbx)
	cmovl	%edx, %r13d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L12145
.L14704:
	testl	%r13d, %r13d
	je	.L12138
	movslq	%r13d,%r14
	movq	%r14, %rdi
	salq	$4, %rdi
	addq	mov_optab(%rip), %rdi
	movl	8(%rdi), %edx
	cmpl	$210, %edx
	je	.L12147
	movl	mode_size(,%r14,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 340(%rsp)
	jl	.L12147
	movslq	%edx,%rcx
	cmpl	%ebp, 5760(%rsp)
	leaq	5712(%rsp), %rbx
	movq	insn_gen_function(,%rcx,8), %r11
	movq	%r11, 2712(%rsp)
	jl	.L12147
	movl	5768(%rsp), %edx
.L12158:
	testl	%edx, %edx
	je	.L12152
	subl	%ebp, 52(%rbx)
.L12152:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L12153
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15217:
	movl	40(%rbx), %edx
	movq	%rax, 328(%rsp)
	testl	%edx, %edx
	je	.L12155
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L12156:
	movq	%rax, %rsi
	movq	328(%rsp), %rdi
	xorl	%eax, %eax
	call	*2712(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L12157
	addl	%ebp, 52(%rbx)
.L12157:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L12158
.L12147:
	movl	mode_size(,%r14,4), %r14d
	cmpl	$1, %r14d
	jg	.L12160
.L12138:
	movl	5760(%rsp), %r14d
	testl	%r14d, %r14d
.L15399:
	je	.L11789
	jmp	.L15283
.L12155:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L12156
.L12153:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15217
.L12135:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5720(%rsp)
	jmp	.L12115
.L12133:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5744(%rsp)
	jmp	.L12132
.L12113:
	movl	$1, %edx
	jmp	.L12112
.L12111:
	movl	$1, %ecx
	jmp	.L12110
.L12109:
	movl	$1, %ecx
	jmp	.L12108
.L12086:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L12082
.L15714:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L12080
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L15719
.L12080:
	cmpl	$55, %eax
	jne	.L12083
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L12082
.L15719:
	movq	8(%rbp), %r11
	movq	%r11, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L12082
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L12082
.L12079:
	cmpq	$0, 16(%r13)
	jne	.L12087
	movq	8(%r13), %r13
	jmp	.L12082
.L12087:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L12088
	movq	%rsi, %r13
	jmp	.L12082
.L12088:
	movq	8(%r13), %rbp
	movzbl	2(%rbp), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L12082
.L12076:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L12072
.L15713:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L12070
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L15720
.L12070:
	cmpl	$55, %eax
	jne	.L12073
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L12072
.L15720:
	movq	8(%rbp), %r8
	movq	%r8, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L12072
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r14, 344(%rsp)
	jmp	.L12072
.L12069:
	cmpq	$0, 16(%r12)
	jne	.L12077
	movq	8(%r12), %r10
	movq	%r10, 344(%rsp)
	jmp	.L12072
.L12077:
	movq	24(%r12), %rdx
	testq	%rdx, %rdx
	movq	%rdx, 344(%rsp)
	jne	.L12072
	movq	8(%r12), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rsi
	movq	%rsi, 344(%rsp)
	jmp	.L12072
.L12066:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L12062
.L15712:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L12062
.L12059:
	cmpq	$0, 16(%r15)
	jne	.L12067
	movq	8(%r15), %r11
	movq	%r11, 352(%rsp)
	jmp	.L12062
.L12067:
	movq	24(%r15), %r9
	testq	%r9, %r9
	movq	%r9, 352(%rsp)
	jne	.L12062
	movq	8(%r15), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %rdi
	movq	%rdi, 352(%rsp)
	jmp	.L12062
.L15711:
	xorl	%eax, %eax
	movq	%rdx, %rdi
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, 416(%rsp)
	je	.L15721
.L11805:
	movl	$8, %edi
	call	size_int
	movq	2800(%rsp), %rdi
	movq	%rax, %rdx
	movq	8(%rdi), %r9
	movl	$57, %edi
	movq	32(%r9), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	2800(%rsp), %r11
	movq	%rax, %rbp
	movl	32(%r11), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%rbp, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	expand_expr
	movq	2800(%rsp), %rbx
	movq	$0, 360(%rsp)
	movq	%rax, 384(%rsp)
	movq	%rax, %r14
	movq	8(%rbx), %rsi
	movl	48(%rsi), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r15)
	movl	%eax, 380(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r15, 392(%rsp)
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L11931
	cmpl	$55, %eax
	je	.L15722
	cmpl	$63, %eax
	je	.L11938
	cmpl	$66, %eax
	je	.L11938
.L11934:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L11941
	cmpl	$55, %eax
	je	.L15723
.L11945:
	cmpl	$63, %eax
	je	.L11948
	cmpl	$66, %eax
	je	.L11948
.L11944:
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L11951
	cmpl	$55, %eax
	je	.L15724
.L11955:
	cmpl	$63, %eax
	je	.L11958
	cmpl	$66, %eax
	je	.L11958
.L11954:
	movq	392(%rsp), %rdi
	cmpw	$55, (%rdi)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 384(%rsp)
	je	.L15283
	movq	384(%rsp), %rsi
	cmpw	$46, (%rsi)
	je	.L15725
.L11964:
	movl	380(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 2744(%rsp)
	testl	%ebp, %ebp
	je	.L14695
.L12050:
	movslq	%ebp,%rcx
	movq	%rcx, %rax
	movq	%rcx, 2736(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L12038
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L12042
	movq	384(%rsp), %r8
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r8)
	ja	.L12038
.L12042:
	movslq	%edx,%r10
	leaq	(%r10,%r10,4), %r13
	movq	%r10, 2728(%rsp)
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L15726
.L12043:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L15727
.L12044:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L12045
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	2744(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L12038
.L12045:
	call	get_last_insn
	movl	$1, %edx
	movq	384(%rsp), %rsi
	movq	%rax, 2720(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15728
.L12046:
	movq	2728(%rsp), %r13
	movq	392(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	2744(%rsp), %rcx
	call	*insn_gen_function(,%r13,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14983
	movq	2720(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L12038:
	movq	2736(%rsp), %rdx
	movl	mode_wider_mode(,%rdx,4), %ebp
	testl	%ebp, %ebp
	jne	.L12050
.L14695:
	movq	384(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%r12), %rsi
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%edx, %edx
	movq	392(%rsp), %r12
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%eax, %eax
	movq	%rsi, (%rsp)
	xorl	%esi, %esi
	movq	8(%r12), %r8
	call	emit_library_call
.L12048:
	cmpw	$46, (%r14)
	je	.L15729
	movq	8(%r15), %rsi
	movl	$4, %edi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movl	$4, %edi
	movq	%r14, %rcx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	416(%rsp), %rdx
	movl	$4, %edi
	movq	%r14, %rcx
	movq	%rax, %r12
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 360(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L12052:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L12053
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%r12, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L12053:
	cmpq	$0, 360(%rsp)
	je	.L11789
	movq	360(%rsp), %rdi
	call	emit_label
	jmp	.L11789
.L15729:
	movq	2800(%rsp), %rbx
	movq	8(%r15), %rdi
	movl	32(%rbx), %esi
	call	plus_constant_wide
	movq	416(%rsp), %rdi
	movq	2800(%rsp), %r14
	movq	%rax, %r12
	movl	32(%r14), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L12052
.L14983:
	call	emit_insn
	jmp	.L12048
.L15728:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L12046
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L12046
.L15727:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L12038
	jmp	.L12044
.L15726:
	xorl	%eax, %eax
	movq	392(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L12038
	jmp	.L12043
.L15725:
	movl	8(%rsi), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 380(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	380(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L11978:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14686
.L11974:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L11974
.L14686:
	testl	%ecx, %ecx
	je	.L11967
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L11976
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L11976
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L11976:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L11978
.L11967:
	decl	%r9d
	jg	.L11964
	movq	392(%rsp), %rcx
	movq	8(%r12), %rdi
	movl	%r10d, %r13d
	movq	8(%rcx), %rbx
	movq	%r12, 5736(%rsp)
	movq	%rcx, 5712(%rsp)
	movl	$0, 5764(%rsp)
	movq	%rdi, 5744(%rsp)
	xorl	%ecx, %ecx
	movl	$9, 376(%rsp)
	movq	%rbx, 5720(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L11981
	cmpw	$88, %dx
	je	.L11981
	cmpw	$87, %dx
	je	.L11981
.L11980:
	movl	%ecx, 5728(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L11983
	cmpw	$88, %dx
	je	.L11983
	cmpw	$87, %dx
	je	.L11983
.L11982:
	movl	%ecx, 5752(%rsp)
	movl	$0, 5756(%rsp)
	movl	$0, 5732(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L11985
	cmpw	$87, %ax
	je	.L11985
.L11984:
	testl	%edx, %edx
	movl	%edx, 5768(%rsp)
	je	.L11986
	movl	%r10d, 5764(%rsp)
.L11986:
	movl	5752(%rsp), %eax
	movl	%r10d, 5760(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L11988
	movl	5728(%rsp), %eax
	testl	%eax, %eax
	jne	.L11987
.L11988:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 380(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	380(%rsp), %ebp
.L12002:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14689
.L11998:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L11998
.L14689:
	testl	%ecx, %ecx
	je	.L11991
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L12000
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L12000
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L12000:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L12002
.L11991:
	cmpl	$2, %r9d
	jle	.L11987
	testl	%r10d, %r10d
	jne	.L12004
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L12005
	cmpw	$46, %dx
	je	.L12005
	cmpw	$47, %dx
	je	.L12005
	cmpw	$49, %dx
	je	.L12005
	cmpw	$113, %dx
	je	.L12005
.L12004:
	movl	5728(%rsp), %eax
	testl	%eax, %eax
	jne	.L11987
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L12007
	cmpw	$46, %dx
	je	.L12007
	cmpw	$47, %dx
	je	.L12007
	cmpw	$49, %dx
	je	.L12007
	cmpw	$113, %dx
	je	.L12007
.L11987:
	cmpl	$8, 380(%rsp)
	movl	$8, %eax
	cmovl	380(%rsp), %eax
	cmpl	$1, 376(%rsp)
	movl	%eax, 380(%rsp)
	jle	.L12010
.L12032:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14692
.L12017:
	movslq	%edx,%rbx
	movl	376(%rsp), %eax
	salq	$2, %rbx
	cmpl	%eax, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L12017
.L14692:
	testl	%r12d, %r12d
	je	.L12010
	movslq	%r12d,%r13
	movq	%r13, %rbp
	salq	$4, %rbp
	addq	mov_optab(%rip), %rbp
	movl	8(%rbp), %edx
	cmpl	$210, %edx
	je	.L12019
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 380(%rsp)
	jl	.L12019
	movslq	%edx,%r9
	cmpl	%ebp, 5760(%rsp)
	leaq	5712(%rsp), %rbx
	movq	insn_gen_function(,%r9,8), %r11
	movq	%r11, 2752(%rsp)
	jl	.L12019
	movl	5768(%rsp), %edx
.L12030:
	testl	%edx, %edx
	je	.L12024
	subl	%ebp, 52(%rbx)
.L12024:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L12025
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15216:
	movq	%rax, 368(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L12027
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L12028:
	movq	%rax, %rsi
	movq	368(%rsp), %rdi
	xorl	%eax, %eax
	call	*2752(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L12029
	addl	%ebp, 52(%rbx)
.L12029:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L12030
.L12019:
	movl	mode_size(,%r13,4), %edi
	movl	%edi, 376(%rsp)
	decl	%edi
	jg	.L12032
.L12010:
	movl	5760(%rsp), %eax
	testl	%eax, %eax
	je	.L12048
	jmp	.L15283
.L12027:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L12028
.L12025:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15216
.L12007:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5720(%rsp)
	jmp	.L11987
.L12005:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5744(%rsp)
	jmp	.L12004
.L11985:
	movl	$1, %edx
	jmp	.L11984
.L11983:
	movl	$1, %ecx
	jmp	.L11982
.L11981:
	movl	$1, %ecx
	jmp	.L11980
.L11958:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L11954
.L15724:
	movzbl	2(%r14), %edx
	cmpb	$16, %dl
	je	.L11952
	movq	8(%r14), %rbp
	cmpw	$59, (%rbp)
	je	.L15730
.L11952:
	cmpl	$55, %eax
	jne	.L11955
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L11954
.L15730:
	movq	8(%rbp), %rbx
	movq	%rbx, 8(%r14)
	cmpq	$0, 16(%rbp)
	je	.L11954
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r13, 384(%rsp)
	jmp	.L11954
.L11951:
	cmpq	$0, 16(%r14)
	jne	.L11959
	movq	8(%r14), %rax
	movq	%rax, 384(%rsp)
	jmp	.L11954
.L11959:
	movq	24(%r14), %rbp
	testq	%rbp, %rbp
	movq	%rbp, 384(%rsp)
	jne	.L11954
	movq	8(%r14), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r11
	movq	%r11, 384(%rsp)
	jmp	.L11954
.L11948:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L11944
.L15723:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L11942
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L15731
.L11942:
	cmpl	$55, %eax
	jne	.L11945
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L11944
.L15731:
	movq	8(%rbp), %r10
	movq	%r10, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L11944
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	%r13, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L11944
.L11941:
	cmpq	$0, 16(%r12)
	jne	.L11949
	movq	8(%r12), %r12
	jmp	.L11944
.L11949:
	movq	24(%r12), %rax
	testq	%rax, %rax
	je	.L11950
	movq	%rax, %r12
	jmp	.L11944
.L11950:
	movq	8(%r12), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L11944
.L11938:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L11934
.L15722:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L11934
.L11931:
	cmpq	$0, 16(%r15)
	jne	.L11939
	movq	8(%r15), %rcx
	movq	%rcx, 392(%rsp)
	jmp	.L11934
.L11939:
	movq	24(%r15), %rdx
	testq	%rdx, %rdx
	movq	%rdx, 392(%rsp)
	jne	.L11934
	movq	8(%r15), %r13
	movzbl	2(%r13), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r8
	movq	%r8, 392(%rsp)
	jmp	.L11934
.L15721:
	movq	2800(%rsp), %rcx
	movq	416(%rsp), %r8
	movl	32(%rcx), %eax
	cmpl	%eax, 8(%r8)
	jge	.L11805
	movq	%r12, 424(%rsp)
	movq	8(%rcx), %rbx
	movl	48(%rbx), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r15)
	movl	%eax, 412(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r15, 432(%rsp)
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L11808
	cmpl	$55, %eax
	je	.L15732
	cmpl	$63, %eax
	je	.L11815
	cmpl	$66, %eax
	je	.L11815
.L11811:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L11818
	cmpl	$55, %eax
	je	.L15733
.L11822:
	cmpl	$63, %eax
	je	.L11825
	cmpl	$66, %eax
	je	.L11825
.L11821:
	movq	416(%rsp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$59, %eax
	je	.L11828
	cmpl	$55, %eax
	je	.L15734
.L11832:
	cmpl	$63, %eax
	je	.L11835
	cmpl	$66, %eax
	je	.L11835
.L11831:
	movq	432(%rsp), %rdi
	cmpw	$55, (%rdi)
	jne	.L15283
	movq	424(%rsp), %rbp
	cmpw	$55, (%rbp)
	jne	.L15283
	cmpq	$0, 416(%rsp)
	je	.L15283
	movq	416(%rsp), %rdi
	cmpw	$46, (%rdi)
	je	.L15735
.L11841:
	movl	412(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 2776(%rsp)
	testl	%ebp, %ebp
	je	.L14683
.L11927:
	movslq	%ebp,%rax
	movq	%rax, 2768(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L11915
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L11919
	movq	416(%rsp), %r8
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r8)
	ja	.L11915
.L11919:
	movslq	%edx,%r14
	leaq	(%r14,%r14,4), %r13
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L15736
.L11920:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L15737
.L11921:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L11922
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	2776(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L11915
.L11922:
	call	get_last_insn
	movl	$1, %edx
	movq	416(%rsp), %rsi
	movq	%rax, 2760(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15738
.L11923:
	movq	432(%rsp), %rdi
	xorl	%eax, %eax
	movq	424(%rsp), %rsi
	movq	%rbx, %rdx
	movq	2776(%rsp), %rcx
	call	*insn_gen_function(,%r14,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14984
	movq	2760(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L11915:
	movq	2768(%rsp), %rax
	movl	mode_wider_mode(,%rax,4), %ebp
	testl	%ebp, %ebp
	jne	.L11927
.L14683:
	movq	416(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$3, %ecx
	xorl	%edx, %edx
	movq	424(%rsp), %r10
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	8(%r10), %r13
	movl	$4, 24(%rsp)
	movq	%rax, 16(%rsp)
	movq	432(%rsp), %rax
	movl	$4, 8(%rsp)
	movq	%r13, (%rsp)
	jmp	.L15218
.L15738:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L11923
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L11923
.L15737:
	xorl	%eax, %eax
	movq	424(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L11915
	jmp	.L11921
.L15736:
	xorl	%eax, %eax
	movq	432(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L11915
	jmp	.L11920
.L15735:
	movl	8(%rdi), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 412(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	412(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L11855:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14674
.L11851:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L11851
.L14674:
	testl	%ecx, %ecx
	je	.L11844
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L11853
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L11853
	movl	%edi, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %edi
.L11853:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L11855
.L11844:
	decl	%r9d
	jg	.L11841
	movq	432(%rsp), %rdx
	movq	424(%rsp), %rcx
	movl	%r10d, %r13d
	movl	$9, %r14d
	movq	8(%rdx), %rbx
	movq	8(%rcx), %rdi
	movq	%rcx, 5800(%rsp)
	movl	$0, 5828(%rsp)
	movq	%rdx, 5776(%rsp)
	xorl	%ecx, %ecx
	movq	%rbx, 5784(%rsp)
	movq	%rdi, 5808(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L11858
	cmpw	$88, %dx
	je	.L11858
	cmpw	$87, %dx
	je	.L11858
.L11857:
	movl	%ecx, 5792(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L11860
	cmpw	$88, %dx
	je	.L11860
	cmpw	$87, %dx
	je	.L11860
.L11859:
	movl	%ecx, 5816(%rsp)
	movl	$0, 5820(%rsp)
	movl	$0, 5796(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L11862
	cmpw	$87, %ax
	je	.L11862
.L11861:
	testl	%edx, %edx
	movl	%edx, 5832(%rsp)
	je	.L11863
	movl	%r10d, 5828(%rsp)
.L11863:
	movl	5816(%rsp), %eax
	movl	%r10d, 5824(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L11865
	movl	5792(%rsp), %eax
	testl	%eax, %eax
	jne	.L11864
.L11865:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 412(%rsp)
	movq	mov_optab(%rip), %r11
	cmovl	412(%rsp), %ebp
.L11879:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14677
.L11875:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L11875
.L14677:
	testl	%ecx, %ecx
	je	.L11868
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L11877
	movl	mode_size(,%rcx,4), %eax
	movl	$8, %r8d
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r8d, %eax
	cmpl	%eax, %ebp
	jl	.L11877
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L11877:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L11879
.L11868:
	cmpl	$2, %r9d
	jle	.L11864
	testl	%r10d, %r10d
	jne	.L11881
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L11882
	cmpw	$46, %dx
	je	.L11882
	cmpw	$47, %dx
	je	.L11882
	cmpw	$49, %dx
	je	.L11882
	cmpw	$113, %dx
	je	.L11882
.L11881:
	movl	5792(%rsp), %esi
	testl	%esi, %esi
	jne	.L11864
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %edi
	cmpw	$1, %di
	jbe	.L11884
	cmpw	$46, %dx
	je	.L11884
	cmpw	$47, %dx
	je	.L11884
	cmpw	$49, %dx
	je	.L11884
	cmpw	$113, %dx
	je	.L11884
.L11864:
	cmpl	$8, 412(%rsp)
	movl	$8, %eax
	cmovl	412(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 412(%rsp)
	jle	.L11887
.L11909:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r13d, %r13d
	testl	%edx, %edx
	je	.L14680
.L11894:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r14d, mode_size(%rbx)
	cmovl	%edx, %r13d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L11894
.L14680:
	testl	%r13d, %r13d
	je	.L11887
	movslq	%r13d,%r14
	movq	%r14, %rbp
	salq	$4, %rbp
	addq	mov_optab(%rip), %rbp
	movl	8(%rbp), %edx
	cmpl	$210, %edx
	je	.L11896
	movl	mode_size(,%r14,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 412(%rsp)
	jl	.L11896
	movslq	%edx,%rcx
	cmpl	%ebp, 5824(%rsp)
	leaq	5776(%rsp), %rbx
	movq	insn_gen_function(,%rcx,8), %r11
	movq	%r11, 2784(%rsp)
	jl	.L11896
	movl	5832(%rsp), %edx
.L11907:
	testl	%edx, %edx
	je	.L11901
	subl	%ebp, 52(%rbx)
.L11901:
	movl	16(%rbx), %edx
	testl	%edx, %edx
	je	.L11902
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15215:
	movl	40(%rbx), %r9d
	movq	%rax, 400(%rsp)
	testl	%r9d, %r9d
	je	.L11904
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L11905:
	movq	%rax, %rsi
	movq	400(%rsp), %rdi
	xorl	%eax, %eax
	call	*2784(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L11906
	addl	%ebp, 52(%rbx)
.L11906:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L11907
.L11896:
	movl	mode_size(,%r14,4), %r14d
	cmpl	$1, %r14d
	jg	.L11909
.L11887:
	movl	5824(%rsp), %r14d
	testl	%r14d, %r14d
	jmp	.L15399
.L11904:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L11905
.L11902:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15215
.L11884:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5784(%rsp)
	jmp	.L11864
.L11882:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5808(%rsp)
	jmp	.L11881
.L11862:
	movl	$1, %edx
	jmp	.L11861
.L11860:
	movl	$1, %ecx
	jmp	.L11859
.L11858:
	movl	$1, %ecx
	jmp	.L11857
.L11835:
	movq	416(%rsp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	416(%rsp), %rbx
	movq	%rax, 8(%rbx)
	movq	416(%rsp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	416(%rsp), %r8
	movq	%rax, 16(%r8)
	jmp	.L11831
.L15734:
	movq	%rdx, %rcx
	movzbl	2(%rdx), %edx
	cmpb	$16, %dl
	je	.L11829
	movq	8(%rcx), %rbp
	cmpw	$59, (%rbp)
	je	.L15739
.L11829:
	cmpl	$55, %eax
	jne	.L11832
	movq	416(%rsp), %rbp
	xorl	%esi, %esi
	movq	8(%rbp), %rdi
	call	protect_from_queue
	movq	%rax, 8(%rbp)
	jmp	.L11831
.L15739:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%rcx)
	cmpq	$0, 16(%rbp)
	je	.L11831
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	416(%rsp), %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L15214:
	movq	%rbx, 416(%rsp)
	jmp	.L11831
.L11828:
	movq	416(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L11836
	movq	8(%rcx), %rbx
	jmp	.L15214
.L11836:
	movq	416(%rsp), %r14
	movq	24(%r14), %rsi
	testq	%rsi, %rsi
	je	.L11837
	movq	%rsi, 416(%rsp)
	jmp	.L11831
.L11837:
	movq	416(%rsp), %r9
	movq	8(%r9), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	416(%rsp), %rdx
	movq	%rax, %rdi
	movq	8(%rdx), %rsi
	movq	%rax, 24(%rdx)
	call	gen_move_insn
	movq	416(%rsp), %r11
	movq	%rax, %rdi
	movq	16(%r11), %rsi
	call	emit_insn_before
	movq	416(%rsp), %r13
	movq	24(%r13), %r10
	movq	%r10, 416(%rsp)
	jmp	.L11831
.L11825:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L11821
.L15733:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L11819
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L15740
.L11819:
	cmpl	$55, %eax
	jne	.L11822
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L11821
.L15740:
	movq	8(%rbp), %r10
	movq	%r10, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L11821
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r13, 424(%rsp)
	jmp	.L11821
.L11818:
	cmpq	$0, 16(%r12)
	jne	.L11826
	movq	8(%r12), %rsi
	movq	%rsi, 424(%rsp)
	jmp	.L11821
.L11826:
	movq	24(%r12), %rdx
	testq	%rdx, %rdx
	movq	%rdx, 424(%rsp)
	jne	.L11821
	movq	8(%r12), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r11
	movq	%r11, 424(%rsp)
	jmp	.L11821
.L11815:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L11811
.L15732:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L11811
.L11808:
	cmpq	$0, 16(%r15)
	jne	.L11816
	movq	8(%r15), %rcx
	movq	%rcx, 432(%rsp)
	jmp	.L11811
.L11816:
	movq	24(%r15), %r13
	testq	%r13, %r13
	movq	%r13, 432(%rsp)
	jne	.L11811
	movq	8(%r15), %r14
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %rbp
	movq	%rbp, 432(%rsp)
	jmp	.L11811
	.p2align 6,,7
.L11797:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L11793
.L15710:
	jne	.L11794
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L11793
	.p2align 6,,7
.L11790:
	cmpq	$0, 16(%r15)
	jne	.L11798
	movq	8(%r15), %r15
	jmp	.L11793
.L11798:
	movq	24(%r15), %rsi
	testq	%rsi, %rsi
	je	.L11799
	movq	%rsi, %r15
	jmp	.L11793
.L11799:
	movq	8(%r15), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L11793
	.p2align 6,,7
.L15709:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	2800(%rsp), %rdi
	movzbl	2(%r15), %edx
	movq	%rax, %rsi
	jmp	.L15213
.L11769:
	movl	(%r15), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L15741
	movzbl	2(%r15), %edx
	movq	2800(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	%r15, %rsi
	call	expand_expr
	cmpw	$51, (%r15)
	movq	%rax, %r12
	je	.L15742
.L11787:
	movzwl	(%r12), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L11788
	cmpw	$46, %dx
	je	.L11788
	cmpw	$47, %dx
	je	.L11788
	cmpw	$49, %dx
	je	.L11788
	cmpw	$113, %dx
	jne	.L11734
	jmp	.L11788
	.p2align 6,,7
.L15742:
	cmpl	$63, 8(%r15)
	jle	.L11734
	jmp	.L11787
.L15741:
	movq	2800(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	8(%r15), %rdi
	movzbl	3(%r15), %edx
	movq	%rax, %r12
	movq	%rax, %rsi
	xorl	%eax, %eax
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	jmp	.L11733
.L11778:
	movl	$1, %ebx
	jmp	.L11772
.L11770:
	xorl	%ebx, %ebx
	jmp	.L11772
.L11776:
	movq	8(%r15), %rdi
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L11778
	movq	16(%r15), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L11772
	jmp	.L11778
	.p2align 6,,7
.L15708:
	movzbl	2(%r15), %eax
	cmpb	$16, %al
	je	.L11762
	movl	cse_not_expected(%rip), %r14d
	movq	2800(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	%al, %edx
	testl	%r14d, %r14d
	cmove	%r15, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	call	expand_expr
	movq	%rax, %r12
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L11788
	testb	%al, %al
	je	.L11788
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L15365
	.p2align 6,,7
.L15707:
	cmpb	$16, 2(%r15)
	jne	.L11735
	call	gen_label_rtx
	movq	%rax, %r13
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r14
	testq	%rbx, %rbx
	jne	.L11739
.L14667:
	movzwl	(%r15), %eax
	movq	%r15, %r12
	cmpl	$59, %eax
	je	.L11741
	cmpl	$55, %eax
	je	.L15743
.L11745:
	cmpl	$63, %eax
	je	.L11748
	cmpl	$66, %eax
	je	.L11748
.L11744:
	movq	2800(%rsp), %r15
	xorl	%eax, %eax
	movq	%r13, %rsi
	incl	inhibit_defer_pop(%rip)
	movq	32(%r15), %rdi
	call	jumpifnot
	movq	40(%r15), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movl	%ebp, %edx
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L11754
.L14669:
	movq	%r14, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r13, %rdi
	call	emit_label
	xorl	%eax, %eax
	movl	%ebp, %edx
	movq	2800(%rsp), %r13
	movq	%r12, %rsi
	movq	48(%r13), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L11759
.L14671:
	movq	%r14, %rdi
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L11733
	.p2align 6,,7
.L11759:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rbp
	movq	%rax, 16(%rbx)
	testq	%rbp, %rbp
	movq	%rbp, pending_chain(%rip)
	movq	%rbp, %rbx
	jne	.L11759
	jmp	.L14671
	.p2align 6,,7
.L11754:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r8
	movq	%rax, 16(%rbx)
	testq	%r8, %r8
	movq	%r8, pending_chain(%rip)
	movq	%r8, %rbx
	jne	.L11754
	jmp	.L14669
.L11748:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L11744
.L15743:
	jne	.L11745
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L11744
.L11741:
	cmpq	$0, 16(%r15)
	jne	.L11749
	movq	8(%r15), %r12
	jmp	.L11744
.L11749:
	movq	24(%r15), %rax
	testq	%rax, %rax
	je	.L11750
	movq	%rax, %r12
	jmp	.L11744
.L11750:
	movq	8(%r15), %r15
	movzbl	2(%r15), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L11744
	.p2align 6,,7
.L11739:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rcx
	movq	%rax, 16(%rbx)
	testq	%rcx, %rcx
	movq	%rcx, pending_chain(%rip)
	movq	%rcx, %rbx
	jne	.L11739
	jmp	.L14667
	.p2align 6,,7
.L15706:
	movq	32(%rdx), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L11731
.L14665:
	movq	2800(%rsp), %rbx
	movq	%r15, %rsi
	movl	%ebp, %edx
	xorl	%eax, %eax
	movq	40(%rbx), %rdi
	call	store_expr
	movq	%rax, %r12
	jmp	.L11733
.L11731:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdi
	movq	%rax, 16(%rbx)
	testq	%rdi, %rdi
	movq	%rdi, pending_chain(%rip)
	movq	%rdi, %rbx
	jne	.L11731
	jmp	.L14665
.L15705:
	movq	16(%rdi), %rdx
	cmpw	$46, (%rdx)
	jne	.L11724
	movq	8(%rdi), %rax
	cmpq	virtual_incoming_args_rtx(%rip), %rax
	je	.L11723
	cmpq	virtual_stack_vars_rtx(%rip), %rax
	jne	.L11724
	jmp	.L11723
	.p2align 6,,7
.L11716:
	movq	2800(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movl	%r12d, %r9d
	movl	%ebx, %ecx
	movq	56(%rsp), %rdi
	movq	%rax, %r8
	movq	%rax, %r13
	movl	%ebp, %esi
	movl	%r14d, %edx
	xorl	%eax, %eax
	movl	%r15d, (%rsp)
	call	store_bit_field
	movl	448(%rsp), %eax
	testl	%eax, %eax
	je	.L11718
	movl	444(%rsp), %eax
	testl	%eax, %eax
	je	.L11719
	movq	56(%rsp), %rcx
	movl	(%rcx), %eax
	andl	$134283263, %eax
	cmpl	$134217783, %eax
	je	.L11719
	movl	2792(%rsp), %r14d
	testl	%r14d, %r14d
	je	.L11720
	movl	444(%rsp), %edx
	xorl	%esi, %esi
	movl	$46, %edi
	xorl	%eax, %eax
	call	gen_rtx
	xorl	%edx, %edx
	movq	%r13, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	expand_and
.L15219:
	movq	%rax, 56(%rsp)
	jmp	.L15228
.L11720:
	movzbl	2(%r13), %r12d
	testl	%r12d, %r12d
	cmove	448(%rsp), %r12d
	xorl	%esi, %esi
	movslq	%r12d,%r8
	movl	mode_size(,%r8,4), %edi
	sall	$3, %edi
	subl	%ebp, %edi
	call	build_int_2_wide
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	%rax, %r15
	movl	%r12d, %esi
	movq	%r13, %rdx
	movq	%rax, %rcx
	movl	$77, %edi
	xorl	%eax, %eax
	call	expand_shift
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movl	$78, %edi
	movl	%r12d, %esi
	movq	%r15, %rcx
	xorl	%eax, %eax
	call	expand_shift
	jmp	.L15219
.L11719:
	movq	56(%rsp), %rdi
	movl	2792(%rsp), %ecx
	movl	%ebp, %esi
	movl	448(%rsp), %r9d
	movl	%r14d, %edx
	xorl	%r8d, %r8d
	xorl	%eax, %eax
	movl	$0, (%rsp)
	movl	%r12d, 8(%rsp)
	movl	%r15d, 16(%rsp)
	call	extract_bit_field
	jmp	.L15219
.L11718:
	movq	const0_rtx(%rip), %rbp
	movq	%rbp, 56(%rsp)
	jmp	.L15228
.L15704:
	movq	56(%rsp), %rdx
	movzwl	(%rdx), %eax
	cmpw	$51, %ax
	je	.L11712
	cmpw	$53, %ax
	jne	.L11711
.L11712:
	movq	56(%rsp), %rbx
	xorl	%edx, %edx
	movzbl	2(%rbx), %edi
	movslq	%edi,%r11
	movl	mode_size(,%r11,4), %esi
	call	assign_stack_temp
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	copy_rtx
	movq	56(%rsp), %rdx
	movb	$16, 2(%rax)
	movq	%rax, %r13
	movzbq	2(%rdx), %rsi
	movl	mode_size(,%rsi,4), %eax
	sall	$3, %eax
	cmpl	%eax, %ebp
	je	.L11713
	movq	%rbx, %rdi
	movq	%rdx, %rsi
	call	emit_move_insn
.L11713:
	movq	2800(%rsp), %r8
	movq	%r13, %rdi
	movl	%ebp, %esi
	movl	%r14d, %edx
	movl	$16, %ecx
	xorl	%r9d, %r9d
	xorl	%eax, %eax
	movl	$0, (%rsp)
	movl	%r12d, 8(%rsp)
	movl	%r15d, 16(%rsp)
	call	store_field
	movq	%rbx, %rsi
	movq	56(%rsp), %rdi
	call	emit_move_insn
	jmp	.L15228
.L11708:
	movl	$0, 448(%rsp)
	jmp	.L11709
.L15703:
	orb	$8, 3(%rsi)
	jmp	.L11706
.L15702:
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	56(%rsp), %r15
	movq	%rax, %rsi
	cmpw	$55, (%r15)
	jne	.L15283
	movl	$4, %edi
	call	force_reg
	movq	56(%rsp), %rbp
	movl	$4, %esi
	movq	%rax, %rcx
	movl	$63, %edi
	xorl	%eax, %eax
	movq	8(%rbp), %rdx
	call	gen_rtx
	xorl	%esi, %esi
	movq	%rbp, %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	movq	%rax, 56(%rsp)
	jmp	.L11704
.L15701:
	movq	%r12, %rdi
	call	stabilize_reference
	movq	%rax, %r12
	jmp	.L11703
.L15700:
	xorl	%edx, %edx
	xorl	%eax, %eax
	movl	$1, %esi
	call	mode_for_size
	movl	%eax, %r15d
	cmpl	$16, %eax
	cmove	%ebx, %r15d
	jmp	.L11700
	.p2align 6,,7
.L15699:
	movq	40(%r12), %rcx
	cmpb	$25, 16(%rcx)
	jne	.L11694
	movq	8(%r12), %r11
	movq	32(%r11), %rax
	cmpb	$25, 16(%rax)
	jne	.L11694
	movl	24(%rax), %eax
	imull	24(%rcx), %eax
	jmp	.L15212
	.p2align 6,,7
.L15694:
	movl	flag_volatile(%rip), %eax
	testl	%eax, %eax
	je	.L11677
	movl	$1, (%r14)
	movzbl	16(%r12), %edx
	jmp	.L11677
.L11672:
	movl	24(%rdx), %eax
	movl	%eax, 5476(%rsp)
	jmp	.L11671
.L15693:
	movq	3176(%rsp), %rax
	movzbl	17(%rax), %r11d
	movq	40(%rax), %rdx
	shrb	$6, %r11b
	movl	%r11d, %esi
	andl	$1, %esi
	movl	%esi, 2792(%rsp)
	jmp	.L11668
.L15692:
	movq	40(%r12), %rax
	testb	$16, 53(%rax)
	movq	40(%rax), %rdx
	jne	.L11667
	movzbl	52(%rax), %r15d
.L11667:
	movzbl	17(%rax), %r10d
	shrb	$6, %r10b
	movl	%r10d, %r8d
	andl	$1, %r8d
	movl	%r8d, 2792(%rsp)
	jmp	.L11668
.L15554:
	movq	2800(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	%rax, 56(%rsp)
	jmp	.L11663
.L11280:
	movq	%rbp, %rdi
	movq	%r13, %rsi
.L15210:
	xorl	%eax, %eax
	call	convert_move
	jmp	.L11201
.L11279:
	cmpb	$16, %al
	je	.L15744
.L11535:
	movq	%rbp, %rdi
	movq	%r13, %rsi
	jmp	.L15209
.L15744:
	cmpb	$28, 16(%r15)
	je	.L15745
	cmpb	$16, %al
	jne	.L11535
	movq	%r15, %rdi
	xorl	%eax, %eax
	call	expr_size
	movq	8(%r15), %r11
	movq	%rax, %r14
	movl	48(%r11), %r15d
	shrl	$3, %r15d
	cmpb	$16, 2(%rbp)
	jne	.L15283
	cmpb	$16, 2(%r13)
	jne	.L15283
	movzwl	(%rbp), %eax
	cmpl	$59, %eax
	je	.L11538
	cmpl	$55, %eax
	je	.L15746
.L11542:
	cmpl	$63, %eax
	je	.L11545
	cmpl	$66, %eax
	je	.L11545
.L11541:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L11548
	cmpl	$55, %eax
	je	.L15747
.L11552:
	cmpl	$63, %eax
	je	.L11555
	cmpl	$66, %eax
	je	.L11555
.L11551:
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L11558
	cmpl	$55, %eax
	je	.L15748
.L11562:
	cmpl	$63, %eax
	je	.L11565
	cmpl	$66, %eax
	je	.L11565
.L11561:
	cmpw	$55, (%rbp)
	jne	.L15283
	cmpw	$55, (%r13)
	jne	.L15283
	testq	%r14, %r14
	je	.L15283
	cmpw	$46, (%r14)
	je	.L15749
.L11571:
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	movl	%r15d, %edx
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %r12d
	movq	%rax, 2832(%rsp)
	testl	%r12d, %r12d
	je	.L14663
.L11657:
	movslq	%r12d,%rax
	movq	%rax, 2824(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L11645
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L11649
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r14)
	ja	.L11645
.L11649:
	movslq	%edx,%rax
	leaq	(%rax,%rax,4), %r15
	movq	%rax, 2816(%rsp)
	salq	$4, %r15
	movq	insn_operand_predicate(%r15), %rdx
	testq	%rdx, %rdx
	jne	.L15750
.L11650:
	movq	insn_operand_predicate+8(%r15), %rdx
	testq	%rdx, %rdx
	jne	.L15751
.L11651:
	movq	insn_operand_predicate+24(%r15), %rdx
	testq	%rdx, %rdx
	je	.L11652
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	2832(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L11645
.L11652:
	call	get_last_insn
	movl	$1, %edx
	movq	%r14, %rsi
	movq	%rax, 2808(%rsp)
	movl	%r12d, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r15), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15752
.L11653:
	movq	2816(%rsp), %r12
	movq	%rbp, %rdi
	xorl	%eax, %eax
	movq	%r13, %rsi
	movq	%rbx, %rdx
	movq	2832(%rsp), %rcx
	call	*insn_gen_function(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14981
	movq	2808(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L11645:
	movq	2824(%rsp), %rdx
	movl	mode_wider_mode(,%rdx,4), %r12d
	testl	%r12d, %r12d
	jne	.L11657
.L14663:
	movl	$4, %edi
	movq	%r14, %rsi
.L15208:
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%r13), %r10
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%r10, (%rsp)
	movq	8(%rbp), %r8
	call	emit_library_call
	jmp	.L11201
.L14981:
	call	emit_insn
	jmp	.L11201
	.p2align 6,,7
.L15752:
	movq	%rax, %rdi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L11653
	movq	%rbx, %rsi
	movl	%r12d, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L11653
	.p2align 6,,7
.L15751:
	xorl	%eax, %eax
	movq	%r13, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L11645
	jmp	.L11651
.L15750:
	xorl	%eax, %eax
	movq	%rbp, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L11645
	jmp	.L11650
.L15749:
	movl	8(%r14), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, %r15d
	movl	$9, %edi
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	%r15d, %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	movl	%r10d, %r8d
.L11585:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14654
.L11581:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%edi, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L11581
.L14654:
	testl	%ecx, %ecx
	je	.L11574
	movslq	%ecx,%rcx
	movq	%rcx, %rdi
	salq	$4, %rdi
	cmpl	$210, 8(%r11,%rdi)
	je	.L11583
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebx
	jl	.L11583
	movl	%r8d, %eax
	movl	%edx, %r8d
	xorl	%edx, %edx
	divl	%r8d
	addl	%eax, %r9d
	movl	%edx, %r8d
.L11583:
	movl	mode_size(,%rcx,4), %edi
	cmpl	$1, %edi
	jg	.L11585
.L11574:
	decl	%r9d
	jg	.L11571
	movq	8(%rbp), %rbx
	movq	8(%r13), %rdi
	xorl	%ecx, %ecx
	movq	%rbp, 5840(%rsp)
	movl	$0, 5892(%rsp)
	movq	%r13, 5864(%rsp)
	movl	%r10d, %r12d
	movl	$9, %r14d
	movq	%rbx, 5848(%rsp)
	movq	%rdi, 5872(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L11588
	cmpw	$88, %dx
	je	.L11588
	cmpw	$87, %dx
	je	.L11588
.L11587:
	movl	%ecx, 5856(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r13d
	cmpw	$1, %r13w
	jbe	.L11590
	cmpw	$88, %dx
	je	.L11590
	cmpw	$87, %dx
	je	.L11590
.L11589:
	movl	%ecx, 5880(%rsp)
	movl	$0, 5884(%rsp)
	movl	$0, 5860(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L11592
	cmpw	$87, %ax
	je	.L11592
.L11591:
	testl	%edx, %edx
	movl	%edx, 5896(%rsp)
	je	.L11593
	movl	%r10d, 5892(%rsp)
.L11593:
	movl	%r10d, 5888(%rsp)
	movl	5880(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L11595
	movl	5856(%rsp), %eax
	testl	%eax, %eax
	jne	.L11594
.L11595:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, %r15d
	movq	mov_optab(%rip), %r11
	movl	$8, %r13d
	cmovl	%r15d, %ebp
.L11609:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14657
.L11605:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L11605
.L14657:
	testl	%ecx, %ecx
	je	.L11598
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L11607
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r13d, %eax
	cmpl	%eax, %ebp
	jl	.L11607
	movl	%r12d, %eax
	movl	%edx, %r12d
	xorl	%edx, %edx
	divl	%r12d
	addl	%eax, %r9d
	movl	%edx, %r12d
.L11607:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L11609
.L11598:
	cmpl	$2, %r9d
	jle	.L11594
	testl	%r10d, %r10d
	jne	.L11611
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L11612
	cmpw	$46, %dx
	je	.L11612
	cmpw	$47, %dx
	je	.L11612
	cmpw	$49, %dx
	je	.L11612
	cmpw	$113, %dx
	je	.L11612
.L11611:
	movl	5856(%rsp), %esi
	testl	%esi, %esi
	jne	.L11594
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L11614
	cmpw	$46, %dx
	je	.L11614
	cmpw	$47, %dx
	je	.L11614
	cmpw	$49, %dx
	je	.L11614
	cmpw	$113, %dx
	je	.L11614
.L11594:
	cmpl	$8, %r15d
	movl	$8, %eax
	cmovge	%eax, %r15d
	cmpl	$1, %r14d
	jle	.L11617
.L11639:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14660
.L11624:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r14d, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L11624
.L14660:
	testl	%r12d, %r12d
	je	.L11617
	movslq	%r12d,%r13
	movq	%r13, %r14
	salq	$4, %r14
	addq	mov_optab(%rip), %r14
	movl	8(%r14), %edx
	cmpl	$210, %edx
	je	.L11626
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, %r15d
	jl	.L11626
	movslq	%edx,%r9
	cmpl	%ebp, 5888(%rsp)
	leaq	5840(%rsp), %rbx
	movq	insn_gen_function(,%r9,8), %rcx
	movq	%rcx, 2840(%rsp)
	jl	.L11626
	movl	5896(%rsp), %edx
.L11637:
	testl	%edx, %edx
	je	.L11631
	subl	%ebp, 52(%rbx)
.L11631:
	movl	16(%rbx), %edi
	testl	%edi, %edi
	je	.L11632
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15207:
	movl	40(%rbx), %r8d
	movq	%rax, %r14
	testl	%r8d, %r8d
	je	.L11634
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L11635:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*2840(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L11636
	addl	%ebp, 52(%rbx)
.L11636:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L11637
.L11626:
	movl	mode_size(,%r13,4), %r14d
	cmpl	$1, %r14d
	jg	.L11639
.L11617:
	movl	5888(%rsp), %r15d
	testl	%r15d, %r15d
.L15398:
	je	.L11201
	jmp	.L15283
	.p2align 6,,7
.L11634:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L11635
.L11632:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15207
.L11614:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5848(%rsp)
	jmp	.L11594
.L11612:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5872(%rsp)
	jmp	.L11611
.L11592:
	movl	$1, %edx
	jmp	.L11591
.L11590:
	movl	$1, %ecx
	jmp	.L11589
.L11588:
	movl	$1, %ecx
	jmp	.L11587
.L11565:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L11561
.L15748:
	movzbl	2(%r14), %edx
	cmpb	$16, %dl
	je	.L11559
	movq	8(%r14), %r12
	cmpw	$59, (%r12)
	je	.L15753
.L11559:
	cmpl	$55, %eax
	jne	.L11562
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L11561
.L15753:
	movq	8(%r12), %r9
	movq	%r9, 8(%r14)
	cmpq	$0, 16(%r12)
	je	.L11561
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r14
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L11561
.L11558:
	cmpq	$0, 16(%r14)
	jne	.L11566
	movq	8(%r14), %r14
	jmp	.L11561
.L11566:
	movq	24(%r14), %rsi
	testq	%rsi, %rsi
	je	.L11567
	movq	%rsi, %r14
	jmp	.L11561
.L11567:
	movq	8(%r14), %r12
	movzbl	2(%r12), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L11561
.L11555:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L11551
.L15747:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L11549
	movq	8(%r13), %r12
	cmpw	$59, (%r12)
	je	.L15754
.L11549:
	cmpl	$55, %eax
	jne	.L11552
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L11551
.L15754:
	movq	8(%r12), %rdi
	movq	%rdi, 8(%r13)
	cmpq	$0, 16(%r12)
	je	.L11551
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r13
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L11551
.L11548:
	cmpq	$0, 16(%r13)
	jne	.L11556
	movq	8(%r13), %r13
	jmp	.L11551
.L11556:
	movq	24(%r13), %rax
	testq	%rax, %rax
	je	.L11557
	movq	%rax, %r13
	jmp	.L11551
.L11557:
	movq	8(%r13), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L11551
.L11545:
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbp), %rdi
	movq	%rax, 8(%rbp)
	call	protect_from_queue
	movq	%rax, 16(%rbp)
	jmp	.L11541
.L15746:
	jne	.L11542
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbp)
	jmp	.L11541
.L11538:
	cmpq	$0, 16(%rbp)
	jne	.L11546
	movq	8(%rbp), %rbp
	jmp	.L11541
.L11546:
	movq	24(%rbp), %rdi
	testq	%rdi, %rdi
	je	.L11547
	movq	%rdi, %rbp
	jmp	.L11541
.L11547:
	movq	8(%rbp), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbp)
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbp), %rbp
	jmp	.L11541
	.p2align 6,,7
.L15745:
	xorl	%eax, %eax
	movq	%r15, %rdi
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, 592(%rsp)
	je	.L15755
.L11284:
	movl	$8, %edi
	call	size_int
	movl	$57, %edi
	movq	8(%r15), %r8
	movq	%rax, %rdx
	movq	32(%r8), %rsi
	call	size_binop
	xorl	%esi, %esi
	movl	32(%r15), %edi
	movq	%rax, %r12
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%r12, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movq	$0, 552(%rsp)
	movq	%rax, 2888(%rsp)
	movq	%rax, 576(%rsp)
	movq	8(%r15), %rdx
	movl	48(%rdx), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%rbp)
	movl	%eax, 572(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r13)
	jne	.L15283
	movq	%rbp, 584(%rsp)
	movzwl	(%rbp), %eax
	cmpl	$59, %eax
	je	.L11410
	cmpl	$55, %eax
	je	.L15756
	cmpl	$63, %eax
	je	.L11417
	cmpl	$66, %eax
	je	.L11417
.L11413:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L11420
	cmpl	$55, %eax
	je	.L15757
.L11424:
	cmpl	$63, %eax
	je	.L11427
	cmpl	$66, %eax
	je	.L11427
.L11423:
	movq	2888(%rsp), %r8
	movzwl	(%r8), %eax
	cmpl	$59, %eax
	je	.L11430
	cmpl	$55, %eax
	je	.L15758
.L11434:
	cmpl	$63, %eax
	je	.L11437
	cmpl	$66, %eax
	je	.L11437
.L11433:
	movq	584(%rsp), %rsi
	cmpw	$55, (%rsi)
	jne	.L15283
	cmpw	$55, (%r13)
	jne	.L15283
	cmpq	$0, 576(%rsp)
	je	.L15283
	movq	576(%rsp), %r8
	cmpw	$46, (%r8)
	je	.L15759
.L11443:
	movl	572(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %r12d
	movq	%rax, 2872(%rsp)
	testl	%r12d, %r12d
	je	.L14651
.L11529:
	movslq	%r12d,%r14
	movq	%r14, %rax
	movq	%r14, 2864(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L11517
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L11521
	movq	576(%rsp), %rdi
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%rdi)
	ja	.L11517
.L11521:
	movslq	%edx,%r9
	leaq	(%r9,%r9,4), %r14
	movq	%r9, 2856(%rsp)
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15760
.L11522:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15761
.L11523:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L11524
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	2872(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L11517
.L11524:
	call	get_last_insn
	movl	$1, %edx
	movq	576(%rsp), %rsi
	movq	%rax, 2848(%rsp)
	movl	%r12d, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15762
.L11525:
	movq	2856(%rsp), %r12
	movq	584(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r13, %rsi
	movq	%rbx, %rdx
	movq	2872(%rsp), %rcx
	call	*insn_gen_function(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14980
	movq	2848(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L11517:
	movq	2864(%rsp), %rbx
	movl	mode_wider_mode(,%rbx,4), %r12d
	testl	%r12d, %r12d
	jne	.L11529
.L14651:
	movq	576(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movq	584(%rsp), %r10
	movq	8(%r13), %rsi
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%edx, %edx
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	movl	$3, %ecx
	xorl	%eax, %eax
	movq	%rsi, (%rsp)
	movq	8(%r10), %r8
	xorl	%esi, %esi
	call	emit_library_call
.L11527:
	movq	2888(%rsp), %r8
	cmpw	$46, (%r8)
	je	.L15763
	movq	8(%rbp), %rsi
	movl	$4, %edi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	2888(%rsp), %rcx
	movq	%rax, %rdx
	movl	$4, %edi
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	592(%rsp), %rdx
	movl	$4, %edi
	movq	2888(%rsp), %rcx
	movq	%rax, %rbp
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 552(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L11531:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L11532
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%rbp, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L11532:
	cmpq	$0, 552(%rsp)
	je	.L11201
	movq	552(%rsp), %rdi
	call	emit_label
	jmp	.L11201
.L15763:
	movq	8(%rbp), %rdi
	movl	32(%r15), %esi
	call	plus_constant_wide
	movq	592(%rsp), %rdi
	movl	32(%r15), %esi
	movq	%rax, %rbp
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L11531
.L14980:
	call	emit_insn
	jmp	.L11527
	.p2align 6,,7
.L15762:
	movq	%rax, %rdi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L11525
	movq	%rbx, %rsi
	movl	%r12d, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L11525
	.p2align 6,,7
.L15761:
	xorl	%eax, %eax
	movq	%r13, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L11517
	jmp	.L11523
.L15760:
	xorl	%eax, %eax
	movq	584(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L11517
	jmp	.L11522
.L15759:
	movl	8(%r8), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 572(%rsp)
	movl	$9, %edi
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	572(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	movl	%r10d, %r8d
.L11457:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14642
.L11453:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%edi, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L11453
.L14642:
	testl	%ecx, %ecx
	je	.L11446
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L11455
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebx
	jl	.L11455
	movl	%r8d, %eax
	movl	%edx, %r8d
	xorl	%edx, %edx
	divl	%r8d
	addl	%eax, %r9d
	movl	%edx, %r8d
.L11455:
	movl	mode_size(,%rcx,4), %edi
	cmpl	$1, %edi
	jg	.L11457
.L11446:
	decl	%r9d
	jg	.L11443
	movq	584(%rsp), %rax
	movq	8(%r13), %rdi
	xorl	%ecx, %ecx
	movl	%r10d, %r14d
	movq	8(%rax), %rbx
	movq	%r13, 5864(%rsp)
	movq	%rax, 5840(%rsp)
	movl	$0, 5892(%rsp)
	movq	%rdi, 5872(%rsp)
	movl	$9, 568(%rsp)
	movq	%rbx, 5848(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r13d
	cmpw	$1, %r13w
	jbe	.L11460
	cmpw	$88, %dx
	je	.L11460
	cmpw	$87, %dx
	je	.L11460
.L11459:
	movl	%ecx, 5856(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L11462
	cmpw	$88, %dx
	je	.L11462
	cmpw	$87, %dx
	je	.L11462
.L11461:
	movl	%ecx, 5880(%rsp)
	movl	$0, 5884(%rsp)
	movl	$0, 5860(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L11464
	cmpw	$87, %ax
	je	.L11464
.L11463:
	testl	%edx, %edx
	movl	%edx, 5896(%rsp)
	je	.L11465
	movl	%r10d, 5892(%rsp)
.L11465:
	movl	%r10d, 5888(%rsp)
	movl	5880(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L11467
	movl	5856(%rsp), %ecx
	testl	%ecx, %ecx
	jne	.L11466
.L11467:
	xorl	%r9d, %r9d
	movl	$8, %r12d
	movl	$9, %r8d
	cmpl	$8, 572(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r13d
	cmovl	572(%rsp), %r12d
.L11481:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14645
.L11477:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L11477
.L14645:
	testl	%ecx, %ecx
	je	.L11470
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L11479
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r13d, %eax
	cmpl	%eax, %r12d
	jl	.L11479
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L11479:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L11481
.L11470:
	cmpl	$2, %r9d
	jle	.L11466
	testl	%r10d, %r10d
	jne	.L11483
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L11484
	cmpw	$46, %dx
	je	.L11484
	cmpw	$47, %dx
	je	.L11484
	cmpw	$49, %dx
	je	.L11484
	cmpw	$113, %dx
	je	.L11484
.L11483:
	movl	5856(%rsp), %edi
	testl	%edi, %edi
	jne	.L11466
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L11486
	cmpw	$46, %dx
	je	.L11486
	cmpw	$47, %dx
	je	.L11486
	cmpw	$49, %dx
	je	.L11486
	cmpw	$113, %dx
	je	.L11486
.L11466:
	cmpl	$8, 572(%rsp)
	movl	$8, %eax
	cmovl	572(%rsp), %eax
	cmpl	$1, 568(%rsp)
	movl	%eax, 572(%rsp)
	jle	.L11489
.L11511:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r13d, %r13d
	testl	%edx, %edx
	je	.L14648
.L11496:
	movslq	%edx,%rbx
	movl	568(%rsp), %r10d
	salq	$2, %rbx
	cmpl	%r10d, mode_size(%rbx)
	cmovl	%edx, %r13d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L11496
.L14648:
	testl	%r13d, %r13d
	je	.L11489
	movslq	%r13d,%r14
	movq	%r14, %rsi
	salq	$4, %rsi
	addq	mov_optab(%rip), %rsi
	movl	8(%rsi), %edx
	cmpl	$210, %edx
	je	.L11498
	movl	mode_size(,%r14,4), %r12d
	movl	$8, %eax
	cmpl	$9, %r12d
	cmovl	%r12d, %eax
	cmpl	%eax, 572(%rsp)
	jl	.L11498
	movslq	%edx,%r11
	cmpl	%r12d, 5888(%rsp)
	leaq	5840(%rsp), %rbx
	movq	insn_gen_function(,%r11,8), %r8
	movq	%r8, 2880(%rsp)
	jl	.L11498
	movl	5896(%rsp), %edx
.L11509:
	testl	%edx, %edx
	je	.L11503
	subl	%r12d, 52(%rbx)
.L11503:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L11504
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15206:
	movl	40(%rbx), %ecx
	movq	%rax, 560(%rsp)
	testl	%ecx, %ecx
	je	.L11506
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L11507:
	movq	%rax, %rsi
	movq	560(%rsp), %rdi
	xorl	%eax, %eax
	call	*2880(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L11508
	addl	%r12d, 52(%rbx)
.L11508:
	movl	48(%rbx), %eax
	subl	%r12d, %eax
	cmpl	%r12d, %eax
	movl	%eax, 48(%rbx)
	jge	.L11509
.L11498:
	movl	mode_size(,%r14,4), %r13d
	movl	%r13d, 568(%rsp)
	decl	%r13d
	jg	.L11511
.L11489:
	movl	5888(%rsp), %edx
	testl	%edx, %edx
	je	.L11527
	jmp	.L15283
	.p2align 6,,7
.L11506:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L11507
.L11504:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15206
.L11486:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5848(%rsp)
	jmp	.L11466
.L11484:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5872(%rsp)
	jmp	.L11483
.L11464:
	movl	$1, %edx
	jmp	.L11463
.L11462:
	movl	$1, %ecx
	jmp	.L11461
.L11460:
	movl	$1, %ecx
	jmp	.L11459
.L11437:
	movq	2888(%rsp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	2888(%rsp), %r14
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L11433
.L15758:
	movzbl	2(%r8), %edx
	cmpb	$16, %dl
	je	.L11431
	movq	8(%r8), %r12
	cmpw	$59, (%r12)
	je	.L15764
.L11431:
	cmpl	$55, %eax
	jne	.L11434
	movq	2888(%rsp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	movq	2888(%rsp), %r12
	movq	%rax, 8(%r12)
	jmp	.L11433
.L15764:
	movq	8(%r12), %rsi
	movq	%rsi, 8(%r8)
	cmpq	$0, 16(%r12)
	je	.L11433
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	2888(%rsp), %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r14, 576(%rsp)
	jmp	.L11433
.L11430:
	movq	2888(%rsp), %rsi
	cmpq	$0, 16(%rsi)
	jne	.L11438
	movq	8(%rsi), %r8
	movq	%r8, 576(%rsp)
	jmp	.L11433
.L11438:
	movq	2888(%rsp), %r11
	movq	24(%r11), %rdi
	testq	%rdi, %rdi
	movq	%rdi, 576(%rsp)
	jne	.L11433
	movq	2888(%rsp), %r10
	movq	8(%r10), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	2888(%rsp), %rbx
	movq	%rax, %rdi
	movq	8(%rbx), %rsi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	2888(%rsp), %r12
	movq	%rax, %rdi
	movq	16(%r12), %rsi
	call	emit_insn_before
	movq	24(%r12), %rcx
	movq	%rcx, 576(%rsp)
	jmp	.L11433
.L11427:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L11423
.L15757:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L11421
	movq	8(%r13), %r12
	cmpw	$59, (%r12)
	je	.L15765
.L11421:
	cmpl	$55, %eax
	jne	.L11424
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L11423
.L15765:
	movq	8(%r12), %r9
	movq	%r9, 8(%r13)
	cmpq	$0, 16(%r12)
	je	.L11423
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r13
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L11423
.L11420:
	cmpq	$0, 16(%r13)
	jne	.L11428
	movq	8(%r13), %r13
	jmp	.L11423
.L11428:
	movq	24(%r13), %rax
	testq	%rax, %rax
	je	.L11429
	movq	%rax, %r13
	jmp	.L11423
.L11429:
	movq	8(%r13), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L11423
.L11417:
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbp), %rdi
	movq	%rax, 8(%rbp)
	call	protect_from_queue
	movq	%rax, 16(%rbp)
	jmp	.L11413
.L15756:
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbp)
	jmp	.L11413
.L11410:
	cmpq	$0, 16(%rbp)
	jne	.L11418
	movq	8(%rbp), %rdi
	movq	%rdi, 584(%rsp)
	jmp	.L11413
.L11418:
	movq	24(%rbp), %r11
	testq	%r11, %r11
	movq	%r11, 584(%rsp)
	jne	.L11413
	movq	8(%rbp), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbp)
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbp), %rcx
	movq	%rcx, 584(%rsp)
	jmp	.L11413
	.p2align 6,,7
.L15755:
	movq	592(%rsp), %r9
	movl	32(%r15), %eax
	cmpl	%eax, 8(%r9)
	jge	.L11284
	movq	8(%r15), %rdx
	movl	48(%rdx), %r15d
	shrl	$3, %r15d
	cmpb	$16, 2(%rbp)
	jne	.L15283
	cmpb	$16, 2(%r13)
	jne	.L15283
	movzwl	(%rbp), %eax
	cmpl	$59, %eax
	je	.L11287
	cmpl	$55, %eax
	je	.L15766
.L11291:
	cmpl	$63, %eax
	je	.L11294
	cmpl	$66, %eax
	je	.L11294
.L11290:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L11297
	cmpl	$55, %eax
	je	.L15767
.L11301:
	cmpl	$63, %eax
	je	.L11304
	cmpl	$66, %eax
	je	.L11304
.L11300:
	movq	592(%rsp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$59, %eax
	je	.L11307
	cmpl	$55, %eax
	je	.L15768
.L11311:
	cmpl	$63, %eax
	je	.L11314
	cmpl	$66, %eax
	je	.L11314
.L11310:
	cmpw	$55, (%rbp)
	jne	.L15283
	cmpw	$55, (%r13)
	jne	.L15283
	cmpq	$0, 592(%rsp)
	je	.L15283
	movq	592(%rsp), %rbx
	cmpw	$46, (%rbx)
	je	.L15769
.L11320:
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	movl	%r15d, %edx
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %r12d
	movq	%rax, 2912(%rsp)
	testl	%r12d, %r12d
	je	.L14639
.L11406:
	movslq	%r12d,%rax
	movq	%rax, 2904(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L11394
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L11398
	movq	592(%rsp), %r14
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r14)
	ja	.L11394
.L11398:
	movslq	%edx,%r15
	leaq	(%r15,%r15,4), %r14
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15770
.L11399:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15771
.L11400:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L11401
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	2912(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L11394
.L11401:
	call	get_last_insn
	movl	$1, %edx
	movq	592(%rsp), %rsi
	movq	%rax, 2896(%rsp)
	movl	%r12d, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15772
.L11402:
	movq	%rbp, %rdi
	xorl	%eax, %eax
	movq	%r13, %rsi
	movq	%rbx, %rdx
	movq	2912(%rsp), %rcx
	call	*insn_gen_function(,%r15,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14981
	movq	2896(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L11394:
	movq	2904(%rsp), %rax
	movl	mode_wider_mode(,%rax,4), %r12d
	testl	%r12d, %r12d
	jne	.L11406
.L14639:
	movq	592(%rsp), %rsi
	movl	$4, %edi
	jmp	.L15208
.L15772:
	movq	%rax, %rdi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L11402
	movq	%rbx, %rsi
	movl	%r12d, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L11402
.L15771:
	xorl	%eax, %eax
	movq	%r13, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L11394
	jmp	.L11400
.L15770:
	xorl	%eax, %eax
	movq	%rbp, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L11394
	jmp	.L11399
.L15769:
	movl	8(%rbx), %r10d
	xorl	%r9d, %r9d
	movl	$9, %r8d
	movl	$8, %ebx
	cmpl	$8, %r15d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	%r15d, %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	movl	%r10d, %edi
.L11334:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14630
.L11330:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L11330
.L14630:
	testl	%ecx, %ecx
	je	.L11323
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L11332
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebx
	jl	.L11332
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L11332:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L11334
.L11323:
	decl	%r9d
	jg	.L11320
	movq	8(%rbp), %rbx
	movq	8(%r13), %rdi
	xorl	%ecx, %ecx
	movq	%rbp, 5904(%rsp)
	movl	$0, 5956(%rsp)
	movq	%r13, 5928(%rsp)
	movl	%r10d, %r12d
	movl	$9, %r14d
	movq	%rbx, 5912(%rsp)
	movq	%rdi, 5936(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L11337
	cmpw	$88, %dx
	je	.L11337
	cmpw	$87, %dx
	je	.L11337
.L11336:
	movl	%ecx, 5920(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r13d
	cmpw	$1, %r13w
	jbe	.L11339
	cmpw	$88, %dx
	je	.L11339
	cmpw	$87, %dx
	je	.L11339
.L11338:
	movl	%ecx, 5944(%rsp)
	movl	$0, 5948(%rsp)
	movl	$0, 5924(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L11341
	cmpw	$87, %ax
	je	.L11341
.L11340:
	testl	%edx, %edx
	movl	%edx, 5960(%rsp)
	je	.L11342
	movl	%r10d, 5956(%rsp)
.L11342:
	movl	%r10d, 5952(%rsp)
	movl	5944(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L11344
	movl	5920(%rsp), %eax
	testl	%eax, %eax
	jne	.L11343
.L11344:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, %r15d
	movq	mov_optab(%rip), %r11
	movl	$8, %r13d
	cmovl	%r15d, %ebp
.L11358:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14633
.L11354:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L11354
.L14633:
	testl	%ecx, %ecx
	je	.L11347
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L11356
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r13d, %eax
	cmpl	%eax, %ebp
	jl	.L11356
	movl	%r12d, %eax
	movl	%edx, %r12d
	xorl	%edx, %edx
	divl	%r12d
	addl	%eax, %r9d
	movl	%edx, %r12d
.L11356:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L11358
.L11347:
	cmpl	$2, %r9d
	jle	.L11343
	testl	%r10d, %r10d
	jne	.L11360
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L11361
	cmpw	$46, %dx
	je	.L11361
	cmpw	$47, %dx
	je	.L11361
	cmpw	$49, %dx
	je	.L11361
	cmpw	$113, %dx
	je	.L11361
.L11360:
	movl	5920(%rsp), %eax
	testl	%eax, %eax
	jne	.L11343
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L11363
	cmpw	$46, %dx
	je	.L11363
	cmpw	$47, %dx
	je	.L11363
	cmpw	$49, %dx
	je	.L11363
	cmpw	$113, %dx
	je	.L11363
.L11343:
	cmpl	$8, %r15d
	movl	$8, %eax
	cmovge	%eax, %r15d
	cmpl	$1, %r14d
	jle	.L11366
.L11388:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14636
.L11373:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r14d, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L11373
.L14636:
	testl	%r12d, %r12d
	je	.L11366
	movslq	%r12d,%r13
	movq	%r13, %r9
	salq	$4, %r9
	addq	mov_optab(%rip), %r9
	movl	8(%r9), %edx
	cmpl	$210, %edx
	je	.L11375
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, %r15d
	jl	.L11375
	movslq	%edx,%rsi
	cmpl	%ebp, 5952(%rsp)
	leaq	5904(%rsp), %rbx
	movq	insn_gen_function(,%rsi,8), %r10
	movq	%r10, 2920(%rsp)
	jl	.L11375
	movl	5960(%rsp), %edx
.L11386:
	testl	%edx, %edx
	je	.L11380
	subl	%ebp, 52(%rbx)
.L11380:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L11381
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15205:
	movq	%rax, %r14
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L11383
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L11384:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*2920(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L11385
	addl	%ebp, 52(%rbx)
.L11385:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L11386
.L11375:
	movl	mode_size(,%r13,4), %r14d
	cmpl	$1, %r14d
	jg	.L11388
.L11366:
	movl	5952(%rsp), %r15d
	testl	%r15d, %r15d
	jmp	.L15398
.L11383:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L11384
.L11381:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15205
.L11363:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5912(%rsp)
	jmp	.L11343
.L11361:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5936(%rsp)
	jmp	.L11360
.L11341:
	movl	$1, %edx
	jmp	.L11340
.L11339:
	movl	$1, %ecx
	jmp	.L11338
.L11337:
	movl	$1, %ecx
	jmp	.L11336
.L11314:
	movq	592(%rsp), %rbx
	xorl	%esi, %esi
	movq	8(%rbx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	592(%rsp), %rcx
	movq	16(%rcx), %rdi
	movq	%rax, 8(%rcx)
	call	protect_from_queue
	movq	592(%rsp), %r11
	movq	%rax, 16(%r11)
	jmp	.L11310
.L15768:
	movzbl	2(%rbx), %edx
	cmpb	$16, %dl
	je	.L11308
	movq	8(%rbx), %r12
	cmpw	$59, (%r12)
	je	.L15773
.L11308:
	cmpl	$55, %eax
	jne	.L11311
	movq	592(%rsp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	movq	592(%rsp), %r12
	movq	%rax, 8(%r12)
	jmp	.L11310
.L15773:
	movq	8(%r12), %rsi
	movq	%rsi, 8(%rbx)
	cmpq	$0, 16(%r12)
	je	.L11310
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	592(%rsp), %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r14, 592(%rsp)
	jmp	.L11310
.L11307:
	movq	592(%rsp), %rbx
	cmpq	$0, 16(%rbx)
	jne	.L11315
	movq	8(%rbx), %rsi
.L15204:
	movq	%rsi, 592(%rsp)
	jmp	.L11310
.L11315:
	movq	592(%rsp), %r9
	movq	24(%r9), %rsi
	testq	%rsi, %rsi
	jne	.L15204
	movq	592(%rsp), %r14
	movq	8(%r14), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	592(%rsp), %r10
	movq	%rax, %rdi
	movq	8(%r10), %rsi
	movq	%rax, 24(%r10)
	call	gen_move_insn
	movq	592(%rsp), %r8
	movq	%rax, %rdi
	movq	16(%r8), %rsi
	call	emit_insn_before
	movq	592(%rsp), %rdx
	movq	24(%rdx), %rdi
	movq	%rdi, 592(%rsp)
	jmp	.L11310
.L11304:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L11300
.L15767:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L11298
	movq	8(%r13), %r12
	cmpw	$59, (%r12)
	je	.L15774
.L11298:
	cmpl	$55, %eax
	jne	.L11301
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L11300
.L15774:
	movq	8(%r12), %r8
	movq	%r8, 8(%r13)
	cmpq	$0, 16(%r12)
	je	.L11300
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r13
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L11300
.L11297:
	cmpq	$0, 16(%r13)
	jne	.L11305
	movq	8(%r13), %r13
	jmp	.L11300
.L11305:
	movq	24(%r13), %rax
	testq	%rax, %rax
	je	.L11306
	movq	%rax, %r13
	jmp	.L11300
.L11306:
	movq	8(%r13), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L11300
.L11294:
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbp), %rdi
	movq	%rax, 8(%rbp)
	call	protect_from_queue
	movq	%rax, 16(%rbp)
	jmp	.L11290
.L15766:
	jne	.L11291
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbp)
	jmp	.L11290
.L11287:
	cmpq	$0, 16(%rbp)
	jne	.L11295
	movq	8(%rbp), %rbp
	jmp	.L11290
.L11295:
	movq	24(%rbp), %rdi
	testq	%rdi, %rdi
	je	.L11296
	movq	%rdi, %rbp
	jmp	.L11290
.L11296:
	movq	8(%rbp), %r14
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	8(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbp)
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbp), %rbp
	jmp	.L11290
	.p2align 6,,7
.L11276:
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbp), %rdi
	movq	%rax, 8(%rbp)
	call	protect_from_queue
	movq	%rax, 16(%rbp)
	jmp	.L11272
.L15553:
	jne	.L11273
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbp)
	jmp	.L11272
	.p2align 6,,7
.L11269:
	cmpq	$0, 16(%rbp)
	jne	.L11277
	movq	8(%rbp), %rbp
	jmp	.L11272
.L11277:
	movq	24(%rbp), %rdi
	testq	%rdi, %rdi
	je	.L11278
	movq	%rdi, %rbp
	jmp	.L11272
.L11278:
	movq	8(%rbp), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbp)
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbp), %rbp
	jmp	.L11272
.L15552:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	%r15, %rdi
	movzbl	2(%rbp), %edx
	movq	%rax, %rsi
	jmp	.L15203
.L11248:
	movl	(%rbp), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L15775
	movzbl	2(%rbp), %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	%r15, %rdi
	movq	%rbp, %rsi
	call	expand_expr
	cmpw	$51, (%rbp)
	movq	%rax, %r13
	je	.L15776
.L11266:
	movzwl	(%r13), %edx
	leal	-56(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L11267
	cmpw	$46, %dx
	je	.L11267
	cmpw	$47, %dx
	je	.L11267
	cmpw	$49, %dx
	je	.L11267
	cmpw	$113, %dx
	jne	.L11213
	jmp	.L11267
.L15776:
	cmpl	$63, 8(%rbp)
	jle	.L11213
	jmp	.L11266
.L15775:
	movq	%r15, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	8(%rbp), %rdi
	movzbl	3(%rbp), %edx
	movq	%rax, %rsi
	shrb	$2, %dl
	andl	$1, %edx
	jmp	.L15210
.L11257:
	movl	$1, %ebx
	jmp	.L11251
.L11249:
	xorl	%ebx, %ebx
	jmp	.L11251
.L11255:
	movq	8(%rbp), %rdi
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L11257
	movq	16(%rbp), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L11251
	jmp	.L11257
.L15551:
	movzbl	2(%rbp), %eax
	cmpb	$16, %al
	je	.L11241
	movl	cse_not_expected(%rip), %r12d
	xorl	%esi, %esi
	movzbl	%al, %edx
	movq	%r15, %rdi
	testl	%r12d, %r12d
	cmove	%rbp, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	call	expand_expr
	movq	%rax, %r13
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L11267
	testb	%al, %al
	je	.L11267
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L15363
	.p2align 6,,7
.L15550:
	cmpb	$16, 2(%rbp)
	jne	.L11214
	call	gen_label_rtx
	movq	%rax, %r12
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r13
	testq	%rbx, %rbx
	jne	.L11218
.L14623:
	movzwl	(%rbp), %eax
	cmpl	$59, %eax
	je	.L11220
	cmpl	$55, %eax
	je	.L15777
.L11224:
	cmpl	$63, %eax
	je	.L11227
	cmpl	$66, %eax
	je	.L11227
.L11223:
	movq	32(%r15), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	incl	inhibit_defer_pop(%rip)
	call	jumpifnot
	movq	40(%r15), %rdi
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%rbp, %rsi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L11233
.L14625:
	movq	%r13, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r12, %rdi
	call	emit_label
	xorl	%eax, %eax
	xorl	%edx, %edx
	movq	48(%r15), %rdi
	movq	%rbp, %rsi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L11238
.L14627:
	movq	%r13, %rdi
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L11201
.L11238:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r15
	movq	%rax, 16(%rbx)
	testq	%r15, %r15
	movq	%r15, pending_chain(%rip)
	movq	%r15, %rbx
	jne	.L11238
	jmp	.L14627
	.p2align 6,,7
.L11233:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r10
	movq	%rax, 16(%rbx)
	testq	%r10, %r10
	movq	%r10, pending_chain(%rip)
	movq	%r10, %rbx
	jne	.L11233
	jmp	.L14625
.L11227:
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbp), %rdi
	movq	%rax, 8(%rbp)
	call	protect_from_queue
	movq	%rax, 16(%rbp)
	jmp	.L11223
.L15777:
	jne	.L11224
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbp)
	jmp	.L11223
	.p2align 6,,7
.L11220:
	cmpq	$0, 16(%rbp)
	jne	.L11228
	movq	8(%rbp), %rbp
	jmp	.L11223
.L11228:
	movq	24(%rbp), %rdi
	testq	%rdi, %rdi
	je	.L11229
	movq	%rdi, %rbp
	jmp	.L11223
.L11229:
	movq	8(%rbp), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbp)
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbp), %rbp
	jmp	.L11223
	.p2align 6,,7
.L11218:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r14
	movq	%rax, 16(%rbx)
	testq	%r14, %r14
	movq	%r14, pending_chain(%rip)
	movq	%r14, %rbx
	jne	.L11218
	jmp	.L14623
	.p2align 6,,7
.L15549:
	movq	32(%r15), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L11210
.L14621:
	movq	40(%r15), %rdi
	movq	%rbp, %rsi
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	store_expr
	jmp	.L11201
.L11210:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdx
	movq	%rax, 16(%rbx)
	testq	%rdx, %rdx
	movq	%rdx, pending_chain(%rip)
	movq	%rdx, %rbx
	jne	.L11210
	jmp	.L14621
.L15548:
	movzbl	44(%rbp), %esi
	movq	%rbx, %rdi
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	change_address
	movq	%rax, %rbx
	jmp	.L11205
.L15547:
	movq	2928(%rsp), %rdi
	movq	%rcx, %rsi
	xorl	%eax, %eax
	call	save_noncopied_parts
	movq	544(%rsp), %rdi
	movq	%rax, %rsi
	call	chainon
	movq	%rax, 544(%rsp)
	jmp	.L11201
.L11197:
	movl	$1, %eax
	jmp	.L11198
.L11194:
	movl	$1, %eax
	jmp	.L11195
.L15546:
	movq	2800(%rsp), %r11
	movzbl	16(%r11), %ecx
	cmpb	$81, %cl
	je	.L10203
	cmpb	$83, %cl
	jne	.L10202
.L10203:
	movq	2800(%rsp), %r8
	movq	3176(%rsp), %rax
	cmpq	%rax, 32(%r8)
	jne	.L10202
	movq	40(%r8), %rcx
	cmpb	$37, 16(%rcx)
	jne	.L10202
	movq	40(%rax), %r15
	movq	40(%r15), %r9
	cmpl	$1, 24(%r9)
	jne	.L10202
	movq	40(%rcx), %r10
	movq	40(%r10), %rbp
	cmpl	$1, 24(%rbp)
	jne	.L10202
	call	gen_label_rtx
	xorl	%edx, %edx
	movq	2800(%rsp), %r13
	movq	%rax, 3168(%rsp)
	movq	3168(%rsp), %rsi
	movzbl	16(%r13), %r12d
	movq	40(%r13), %rdi
	cmpb	$81, %r12b
	cmovne	%rdx, %rsi
	cmpb	$83, %r12b
	cmove	3168(%rsp), %rdx
	xorl	%eax, %eax
	call	do_jump
	movq	2800(%rsp), %rax
	movq	2800(%rsp), %rbx
	addq	$8, %rax
	cmpb	$81, 16(%rbx)
	je	.L15778
	movq	integer_zero_node(%rip), %rsi
.L10215:
	movq	(%rax), %rdi
	xorl	%r15d, %r15d
	call	convert
	movq	3176(%rsp), %r14
	movq	$0, 736(%rsp)
	movq	%rax, 3160(%rsp)
	movzbl	16(%r14), %edx
	testb	%dl, %dl
	je	.L15779
	leal	-37(%rdx), %esi
	cmpb	$1, %sil
	jbe	.L10219
	cmpb	$42, %dl
	je	.L15780
.L10218:
	cmpq	$0, 736(%rsp)
	je	.L15781
.L10735:
	cmpb	$35, %dl
	je	.L15782
	movq	3160(%rsp), %rbx
	movzbl	16(%rbx), %eax
.L10736:
	cmpb	$44, %al
	movl	$0, 836(%rsp)
	je	.L15783
	cmpb	$48, %al
	je	.L15784
.L10745:
	testl	%r15d, %r15d
	je	.L10772
	movq	736(%rsp), %rdi
	cmpw	$55, (%rdi)
	je	.L15785
.L10772:
	movq	736(%rsp), %r13
	movzwl	(%r13), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L10780
	mov	%eax, %ebx
	jmp	*.L10789(,%rbx,8)
	.section	.rodata
	.align 8
	.align 4
.L10789:
	.quad	.L10783
	.quad	.L10780
	.quad	.L10780
	.quad	.L10780
	.quad	.L10788
	.quad	.L10780
	.quad	.L10780
	.quad	.L10780
	.quad	.L10786
	.quad	.L10786
	.quad	.L10780
	.quad	.L10786
	.text
.L10783:
	movq	736(%rsp), %r8
	xorl	%eax, %eax
	movq	8(%r8), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L10782:
	testl	%ebx, %ebx
	je	.L10779
	movq	736(%rsp), %rbx
	movzbl	2(%rbx), %eax
	cmpb	$16, %al
	je	.L10791
	testb	%al, %al
	jne	.L15786
.L10791:
	movq	736(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	2(%rdi), %edx
	movq	3160(%rsp), %rdi
.L15194:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L15362:
	movq	%rax, %r12
.L10798:
	movl	$1, 836(%rsp)
.L10744:
	cmpq	736(%rsp), %r12
	je	.L10799
	movq	3160(%rsp), %r14
	cmpb	$0, 16(%r14)
	je	.L10799
	movq	736(%rsp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$59, %eax
	je	.L10800
	cmpl	$55, %eax
	je	.L15787
.L10804:
	cmpl	$63, %eax
	je	.L10807
	cmpl	$66, %eax
	je	.L10807
.L10803:
	movq	736(%rsp), %rbx
	movzbl	2(%r12), %eax
	movzbl	2(%rbx), %ecx
	cmpb	%cl, %al
	je	.L10810
	testb	%al, %al
	je	.L10810
	movq	3160(%rsp), %r11
	movl	836(%rsp), %edi
	movq	8(%r11), %rbp
	movzbl	17(%rbp), %r14d
	shrb	$6, %r14b
	movl	%r14d, %edx
	andl	$1, %edx
	testl	%edi, %edi
	je	.L10811
	movzbl	%cl, %edi
	movq	%r12, %rsi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%rbx, %rdi
	movq	%rax, %r12
.L15201:
	movq	%r12, %rsi
	call	emit_move_insn
.L10799:
	movl	836(%rsp), %r13d
	testl	%r13d, %r13d
	cmove	736(%rsp), %r12
.L10743:
	movq	%r12, %rdi
.L15202:
	xorl	%eax, %eax
	call	preserve_temp_slots
	xorl	%eax, %eax
	call	free_temp_slots
.L10217:
	xorl	%eax, %eax
	call	do_pending_stack_adjust
	movq	3168(%rsp), %rdi
	call	emit_label
.L15257:
	movq	const0_rtx(%rip), %r12
	movq	%r12, 56(%rsp)
	jmp	.L581
.L10811:
	movq	736(%rsp), %rdi
	movq	%r12, %rsi
	xorl	%eax, %eax
	call	convert_move
	jmp	.L10799
.L10810:
	cmpb	$16, %al
	je	.L15788
.L11066:
	movq	736(%rsp), %rdi
	jmp	.L15201
.L15788:
	movq	3160(%rsp), %rdi
	cmpb	$28, 16(%rdi)
	je	.L15789
	cmpb	$16, %al
	jne	.L11066
	movq	3160(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, 752(%rsp)
	call	expr_size
	movq	736(%rsp), %r15
	movq	3160(%rsp), %rbp
	movq	%rax, %r13
	movq	8(%rbp), %rdi
	movl	48(%rdi), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r15)
	movl	%eax, 748(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	736(%rsp), %rsi
	movq	%rsi, 760(%rsp)
	movzwl	(%rsi), %eax
	cmpl	$59, %eax
	je	.L11069
	cmpl	$55, %eax
	je	.L15790
	cmpl	$63, %eax
	je	.L11076
	cmpl	$66, %eax
	je	.L11076
.L11072:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L11079
	cmpl	$55, %eax
	je	.L15791
.L11083:
	cmpl	$63, %eax
	je	.L11086
	cmpl	$66, %eax
	je	.L11086
.L11082:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L11089
	cmpl	$55, %eax
	je	.L15792
.L11093:
	cmpl	$63, %eax
	je	.L11096
	cmpl	$66, %eax
	je	.L11096
.L11092:
	movq	760(%rsp), %rax
	cmpw	$55, (%rax)
	jne	.L15283
	movq	752(%rsp), %rcx
	cmpw	$55, (%rcx)
	jne	.L15283
	testq	%r13, %r13
	je	.L15283
	cmpw	$46, (%r13)
	je	.L15793
.L11102:
	movl	748(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 2952(%rsp)
	testl	%ebp, %ebp
	je	.L14617
.L11188:
	movslq	%ebp,%rax
	movq	%rax, 2944(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L11176
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L11180
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L11176
.L11180:
	movslq	%edx,%r15
	leaq	(%r15,%r15,4), %r14
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15794
.L11181:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15795
.L11182:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L11183
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	2952(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L11176
.L11183:
	call	get_last_insn
	movl	$1, %edx
	movq	%r13, %rsi
	movq	%rax, 2936(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15796
.L11184:
	movq	760(%rsp), %rdi
	xorl	%eax, %eax
	movq	752(%rsp), %rsi
	movq	%rbx, %rdx
	movq	2952(%rsp), %rcx
	call	*insn_gen_function(,%r15,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14978
	movq	2936(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L11176:
	movq	2944(%rsp), %r15
	movl	mode_wider_mode(,%r15,4), %ebp
	testl	%ebp, %ebp
	jne	.L11188
.L14617:
	movl	$4, %edi
	movq	%r13, %rsi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movq	760(%rsp), %rbx
	movl	$3, %ecx
	movq	752(%rsp), %r8
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movq	8(%r8), %rbp
	movl	$4, 24(%rsp)
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movq	%rbp, (%rsp)
.L15200:
	movq	8(%rbx), %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	call	emit_library_call
	jmp	.L10799
.L14978:
	call	emit_insn
	jmp	.L10799
.L15796:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L11184
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L11184
.L15795:
	xorl	%eax, %eax
	movq	752(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L11176
	jmp	.L11182
.L15794:
	xorl	%eax, %eax
	movq	760(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L11176
	jmp	.L11181
.L15793:
	movl	8(%r13), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 748(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	748(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L11116:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14608
.L11112:
	movslq	%edx,%r15
	salq	$2, %r15
	cmpl	%r8d, mode_size(%r15)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r15), %edx
	testl	%edx, %edx
	jne	.L11112
.L14608:
	testl	%ecx, %ecx
	je	.L11105
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L11114
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L11114
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L11114:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L11116
.L11105:
	decl	%r9d
	jg	.L11102
	movq	760(%rsp), %r9
	movq	752(%rsp), %r11
	xorl	%ecx, %ecx
	movl	%r10d, %r13d
	movl	$9, %r14d
	movq	8(%r9), %rbx
	movq	8(%r11), %rdi
	movq	%r11, 6056(%rsp)
	movl	$0, 6084(%rsp)
	movq	%r9, 6032(%rsp)
	movq	%rbx, 6040(%rsp)
	movq	%rdi, 6064(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L11119
	cmpw	$88, %dx
	je	.L11119
	cmpw	$87, %dx
	je	.L11119
.L11118:
	movl	%ecx, 6048(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L11121
	cmpw	$88, %dx
	je	.L11121
	cmpw	$87, %dx
	je	.L11121
.L11120:
	movl	%ecx, 6072(%rsp)
	movl	$0, 6076(%rsp)
	movl	$0, 6052(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L11123
	cmpw	$87, %ax
	je	.L11123
.L11122:
	testl	%edx, %edx
	movl	%edx, 6088(%rsp)
	je	.L11124
	movl	%r10d, 6084(%rsp)
.L11124:
	movl	%r10d, 6080(%rsp)
	movl	6072(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L11126
	movl	6048(%rsp), %edx
	testl	%edx, %edx
	jne	.L11125
.L11126:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 748(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r15d
	cmovl	748(%rsp), %ebp
.L11140:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14611
.L11136:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L11136
.L14611:
	testl	%ecx, %ecx
	je	.L11129
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L11138
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r15d, %eax
	cmpl	%eax, %ebp
	jl	.L11138
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L11138:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L11140
.L11129:
	cmpl	$2, %r9d
	jle	.L11125
	testl	%r10d, %r10d
	jne	.L11142
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L11143
	cmpw	$46, %dx
	je	.L11143
	cmpw	$47, %dx
	je	.L11143
	cmpw	$49, %dx
	je	.L11143
	cmpw	$113, %dx
	je	.L11143
.L11142:
	movl	6048(%rsp), %esi
	testl	%esi, %esi
	jne	.L11125
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L11145
	cmpw	$46, %dx
	je	.L11145
	cmpw	$47, %dx
	je	.L11145
	cmpw	$49, %dx
	je	.L11145
	cmpw	$113, %dx
	je	.L11145
.L11125:
	cmpl	$8, 748(%rsp)
	movl	$8, %eax
	cmovl	748(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 748(%rsp)
	jle	.L11148
.L11170:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r13d, %r13d
	testl	%edx, %edx
	je	.L14614
.L11155:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r14d, mode_size(%rbx)
	cmovl	%edx, %r13d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L11155
.L14614:
	testl	%r13d, %r13d
	je	.L11148
	movslq	%r13d,%r14
	movq	%r14, %rdi
	salq	$4, %rdi
	addq	mov_optab(%rip), %rdi
	movl	8(%rdi), %edx
	cmpl	$210, %edx
	je	.L11157
	movl	mode_size(,%r14,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 748(%rsp)
	jl	.L11157
	movslq	%edx,%r9
	cmpl	%ebp, 6080(%rsp)
	leaq	6032(%rsp), %rbx
	movq	insn_gen_function(,%r9,8), %r11
	movq	%r11, 2960(%rsp)
	jl	.L11157
	movl	6088(%rsp), %edx
.L11168:
	testl	%edx, %edx
	je	.L11162
	subl	%ebp, 52(%rbx)
.L11162:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L11163
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15199:
	movl	40(%rbx), %edx
	movq	%rax, %r15
	testl	%edx, %edx
	je	.L11165
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L11166:
	movq	%rax, %rsi
	movq	%r15, %rdi
	xorl	%eax, %eax
	call	*2960(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L11167
	addl	%ebp, 52(%rbx)
.L11167:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L11168
.L11157:
	movl	mode_size(,%r14,4), %r14d
	cmpl	$1, %r14d
	jg	.L11170
.L11148:
	movl	6080(%rsp), %r14d
	testl	%r14d, %r14d
.L15397:
	je	.L10799
	jmp	.L15283
.L11165:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L11166
.L11163:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15199
.L11145:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6040(%rsp)
	jmp	.L11125
.L11143:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6064(%rsp)
	jmp	.L11142
.L11123:
	movl	$1, %edx
	jmp	.L11122
.L11121:
	movl	$1, %ecx
	jmp	.L11120
.L11119:
	movl	$1, %ecx
	jmp	.L11118
.L11096:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L11092
.L15792:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L11090
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L15797
.L11090:
	cmpl	$55, %eax
	jne	.L11093
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L11092
.L15797:
	movq	8(%rbp), %rsi
	movq	%rsi, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L11092
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L11092
.L11089:
	cmpq	$0, 16(%r13)
	jne	.L11097
	movq	8(%r13), %r13
	jmp	.L11092
.L11097:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L11098
	movq	%rsi, %r13
	jmp	.L11092
.L11098:
	movq	8(%r13), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L11092
.L11086:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L11082
.L15791:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L11080
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L15798
.L11080:
	cmpl	$55, %eax
	jne	.L11083
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L11082
.L15798:
	movq	8(%rbp), %r11
	movq	%r11, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L11082
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L15198:
	movq	%rbx, 752(%rsp)
	jmp	.L11082
.L11079:
	cmpq	$0, 16(%r12)
	jne	.L11087
	movq	8(%r12), %rbx
	jmp	.L15198
.L11087:
	movq	24(%r12), %r9
	testq	%r9, %r9
	movq	%r9, 752(%rsp)
	jne	.L11082
	movq	8(%r12), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r10
	movq	%r10, 752(%rsp)
	jmp	.L11082
.L11076:
	movq	736(%rsp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	736(%rsp), %r10
	movq	16(%r10), %rdi
	movq	%rax, 8(%r10)
	call	protect_from_queue
	movq	736(%rsp), %r9
	movq	%rax, 16(%r9)
	jmp	.L11072
.L15790:
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	736(%rsp), %r11
	movq	%rax, 8(%r11)
	jmp	.L11072
.L11069:
	movq	736(%rsp), %rbx
	cmpq	$0, 16(%rbx)
	jne	.L11077
	movq	8(%rbx), %rax
	movq	%rax, 760(%rsp)
	jmp	.L11072
.L11077:
	movq	736(%rsp), %r14
	movq	24(%r14), %rsi
	testq	%rsi, %rsi
	movq	%rsi, 760(%rsp)
	jne	.L11072
	movq	736(%rsp), %rdi
	movq	8(%rdi), %rbp
	movzbl	2(%rbp), %edi
	call	gen_reg_rtx
	movq	736(%rsp), %r15
	movq	%rax, %rdi
	movq	8(%r15), %rsi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	736(%rsp), %rcx
	movq	%rax, %rdi
	movq	16(%rcx), %rsi
	call	emit_insn_before
	movq	736(%rsp), %r8
	movq	24(%r8), %rbx
	movq	%rbx, 760(%rsp)
	jmp	.L11072
.L15789:
	xorl	%eax, %eax
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, %r15
	je	.L15799
.L10815:
	movl	$8, %edi
	call	size_int
	movq	3160(%rsp), %rdi
	movq	%rax, %rdx
	movq	8(%rdi), %rbx
	movl	$57, %edi
	movq	32(%rbx), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	3160(%rsp), %r10
	movq	%rax, %rbp
	movl	32(%r10), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%rbp, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movq	736(%rsp), %r8
	movq	3160(%rsp), %r13
	movq	$0, 768(%rsp)
	movq	%rax, 792(%rsp)
	movq	%rax, %r14
	movq	8(%r13), %rcx
	movl	48(%rcx), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r8)
	movl	%eax, 788(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	736(%rsp), %rbx
	movq	%rbx, 800(%rsp)
	movzwl	(%rbx), %eax
	cmpl	$59, %eax
	je	.L10941
	cmpl	$55, %eax
	je	.L15800
	cmpl	$63, %eax
	je	.L10948
	cmpl	$66, %eax
	je	.L10948
.L10944:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L10951
	cmpl	$55, %eax
	je	.L15801
.L10955:
	cmpl	$63, %eax
	je	.L10958
	cmpl	$66, %eax
	je	.L10958
.L10954:
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L10961
	cmpl	$55, %eax
	je	.L15802
.L10965:
	cmpl	$63, %eax
	je	.L10968
	cmpl	$66, %eax
	je	.L10968
.L10964:
	movq	800(%rsp), %rbp
	cmpw	$55, (%rbp)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 792(%rsp)
	je	.L15283
	movq	792(%rsp), %rdi
	cmpw	$46, (%rdi)
	je	.L15803
.L10974:
	movl	788(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 2992(%rsp)
	testl	%ebp, %ebp
	je	.L14605
.L11060:
	movslq	%ebp,%r11
	movq	%r11, %rax
	movq	%r11, 2984(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L11048
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L11052
	movq	792(%rsp), %r9
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r9)
	ja	.L11048
.L11052:
	movslq	%edx,%r10
	leaq	(%r10,%r10,4), %r13
	movq	%r10, 2976(%rsp)
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L15804
.L11053:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L15805
.L11054:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L11055
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	2992(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L11048
.L11055:
	call	get_last_insn
	movl	$1, %edx
	movq	792(%rsp), %rsi
	movq	%rax, 2968(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15806
.L11056:
	movq	2976(%rsp), %r13
	movq	800(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	2992(%rsp), %rcx
	call	*insn_gen_function(,%r13,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14977
	movq	2968(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L11048:
	movq	2984(%rsp), %rdx
	movl	mode_wider_mode(,%rdx,4), %ebp
	testl	%ebp, %ebp
	jne	.L11060
.L14605:
	movq	792(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%r12), %rsi
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%edx, %edx
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	movq	800(%rsp), %rax
	movq	%rsi, (%rsp)
	xorl	%esi, %esi
	movq	8(%rax), %r8
	xorl	%eax, %eax
	call	emit_library_call
.L11058:
	cmpw	$46, (%r14)
	je	.L15807
	movq	736(%rsp), %r8
	movl	$4, %edi
	movq	8(%r8), %rsi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movl	$4, %edi
	movq	%r14, %rcx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movl	$4, %edi
	movq	%r15, %rdx
	movq	%r14, %rcx
	movq	%rax, %r12
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 768(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L11062:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L11063
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%r12, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L11063:
	cmpq	$0, 768(%rsp)
	je	.L10799
	movq	768(%rsp), %rdi
	call	emit_label
	jmp	.L10799
.L15807:
	movq	736(%rsp), %rcx
	movq	3160(%rsp), %rbx
	movq	8(%rcx), %rdi
	movl	32(%rbx), %esi
	call	plus_constant_wide
	movq	%r15, %rdi
	movq	3160(%rsp), %r14
	movq	%rax, %r12
	movl	32(%r14), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L11062
.L14977:
	call	emit_insn
	jmp	.L11058
.L15806:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L11056
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L11056
.L15805:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L11048
	jmp	.L11054
.L15804:
	xorl	%eax, %eax
	movq	800(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L11048
	jmp	.L11053
.L15803:
	movl	8(%rdi), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 788(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	788(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L10988:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14596
.L10984:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L10984
.L14596:
	testl	%ecx, %ecx
	je	.L10977
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L10986
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L10986
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L10986:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L10988
.L10977:
	decl	%r9d
	jg	.L10974
	movq	800(%rsp), %r11
	movq	8(%r12), %rdi
	xorl	%ecx, %ecx
	movl	%r10d, %r13d
	movq	8(%r11), %rbx
	movq	%r12, 6056(%rsp)
	movq	%r11, 6032(%rsp)
	movl	$0, 6084(%rsp)
	movq	%rdi, 6064(%rsp)
	movl	$9, 784(%rsp)
	movq	%rbx, 6040(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L10991
	cmpw	$88, %dx
	je	.L10991
	cmpw	$87, %dx
	je	.L10991
.L10990:
	movl	%ecx, 6048(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L10993
	cmpw	$88, %dx
	je	.L10993
	cmpw	$87, %dx
	je	.L10993
.L10992:
	movl	%ecx, 6072(%rsp)
	movl	$0, 6076(%rsp)
	movl	$0, 6052(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L10995
	cmpw	$87, %ax
	je	.L10995
.L10994:
	testl	%edx, %edx
	movl	%edx, 6088(%rsp)
	je	.L10996
	movl	%r10d, 6084(%rsp)
.L10996:
	movl	6072(%rsp), %eax
	movl	%r10d, 6080(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L10998
	movl	6048(%rsp), %eax
	testl	%eax, %eax
	jne	.L10997
.L10998:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 788(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	788(%rsp), %ebp
.L11012:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14599
.L11008:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L11008
.L14599:
	testl	%ecx, %ecx
	je	.L11001
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L11010
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L11010
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L11010:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L11012
.L11001:
	cmpl	$2, %r9d
	jle	.L10997
	testl	%r10d, %r10d
	jne	.L11014
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L11015
	cmpw	$46, %dx
	je	.L11015
	cmpw	$47, %dx
	je	.L11015
	cmpw	$49, %dx
	je	.L11015
	cmpw	$113, %dx
	je	.L11015
.L11014:
	movl	6048(%rsp), %eax
	testl	%eax, %eax
	jne	.L10997
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L11017
	cmpw	$46, %dx
	je	.L11017
	cmpw	$47, %dx
	je	.L11017
	cmpw	$49, %dx
	je	.L11017
	cmpw	$113, %dx
	je	.L11017
.L10997:
	cmpl	$8, 788(%rsp)
	movl	$8, %eax
	cmovl	788(%rsp), %eax
	cmpl	$1, 784(%rsp)
	movl	%eax, 788(%rsp)
	jle	.L11020
.L11042:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14602
.L11027:
	movslq	%edx,%rbx
	movl	784(%rsp), %eax
	salq	$2, %rbx
	cmpl	%eax, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L11027
.L14602:
	testl	%r12d, %r12d
	je	.L11020
	movslq	%r12d,%r13
	movq	%r13, %rcx
	salq	$4, %rcx
	addq	mov_optab(%rip), %rcx
	movl	8(%rcx), %edx
	cmpl	$210, %edx
	je	.L11029
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 788(%rsp)
	jl	.L11029
	movslq	%edx,%rdi
	cmpl	%ebp, 6080(%rsp)
	leaq	6032(%rsp), %rbx
	movq	insn_gen_function(,%rdi,8), %r8
	movq	%r8, 3000(%rsp)
	jl	.L11029
	movl	6088(%rsp), %edx
.L11040:
	testl	%edx, %edx
	je	.L11034
	subl	%ebp, 52(%rbx)
.L11034:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L11035
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15197:
	movq	%rax, 776(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L11037
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L11038:
	movq	%rax, %rsi
	movq	776(%rsp), %rdi
	xorl	%eax, %eax
	call	*3000(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L11039
	addl	%ebp, 52(%rbx)
.L11039:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L11040
.L11029:
	movl	mode_size(,%r13,4), %ebp
	movl	%ebp, 784(%rsp)
	decl	%ebp
	jg	.L11042
.L11020:
	movl	6080(%rsp), %r12d
	testl	%r12d, %r12d
	je	.L11058
	jmp	.L15283
.L11037:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L11038
.L11035:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15197
.L11017:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6040(%rsp)
	jmp	.L10997
.L11015:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6064(%rsp)
	jmp	.L11014
.L10995:
	movl	$1, %edx
	jmp	.L10994
.L10993:
	movl	$1, %ecx
	jmp	.L10992
.L10991:
	movl	$1, %ecx
	jmp	.L10990
.L10968:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L10964
.L15802:
	movzbl	2(%r14), %edx
	cmpb	$16, %dl
	je	.L10962
	movq	8(%r14), %rbp
	cmpw	$59, (%rbp)
	je	.L15808
.L10962:
	cmpl	$55, %eax
	jne	.L10965
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L10964
.L15808:
	movq	8(%rbp), %r8
	movq	%r8, 8(%r14)
	cmpq	$0, 16(%rbp)
	je	.L10964
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L15196:
	movq	%rbx, 792(%rsp)
	jmp	.L10964
.L10961:
	cmpq	$0, 16(%r14)
	jne	.L10969
	movq	8(%r14), %rax
	movq	%rax, 792(%rsp)
	jmp	.L10964
.L10969:
	movq	24(%r14), %rdx
	testq	%rdx, %rdx
	movq	%rdx, 792(%rsp)
	jne	.L10964
	movq	8(%r14), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rbx
	jmp	.L15196
.L10958:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L10954
.L15801:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L10952
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L15809
.L10952:
	cmpl	$55, %eax
	jne	.L10955
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L10954
.L15809:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L10954
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	%r13, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L10954
.L10951:
	cmpq	$0, 16(%r12)
	jne	.L10959
	movq	8(%r12), %r12
	jmp	.L10954
.L10959:
	movq	24(%r12), %rax
	testq	%rax, %rax
	je	.L10960
	movq	%rax, %r12
	jmp	.L10954
.L10960:
	movq	8(%r12), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L10954
.L10948:
	movq	736(%rsp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	736(%rsp), %r9
	movq	%rax, 8(%r9)
	movq	736(%rsp), %r11
	movq	16(%r11), %rdi
	call	protect_from_queue
	movq	736(%rsp), %rsi
	movq	%rax, 16(%rsi)
	jmp	.L10944
.L15800:
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbx)
	jmp	.L10944
.L10941:
	movq	736(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L10949
	movq	8(%rcx), %rdx
	movq	%rdx, 800(%rsp)
	jmp	.L10944
.L10949:
	movq	736(%rsp), %rcx
	movq	24(%rcx), %r8
	testq	%r8, %r8
	movq	%r8, 800(%rsp)
	jne	.L10944
	movq	736(%rsp), %r11
	movq	8(%r11), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	736(%rsp), %rbx
	movq	%rax, %rdi
	movq	8(%rbx), %rsi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	736(%rsp), %r10
	movq	%rax, %rdi
	movq	16(%r10), %rsi
	call	emit_insn_before
	movq	736(%rsp), %rbp
	movq	24(%rbp), %r13
	movq	%r13, 800(%rsp)
	jmp	.L10944
.L15799:
	movq	3160(%rsp), %r8
	movl	32(%r8), %eax
	cmpl	%eax, 8(%r15)
	jge	.L10815
	movq	%r12, 816(%rsp)
	movq	736(%rsp), %rcx
	movq	8(%r8), %r13
	movl	48(%r13), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%rcx)
	movl	%eax, 812(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	736(%rsp), %rdx
	movq	%rdx, 824(%rsp)
	movzwl	(%rdx), %eax
	cmpl	$59, %eax
	je	.L10818
	cmpl	$55, %eax
	je	.L15810
	cmpl	$63, %eax
	je	.L10825
	cmpl	$66, %eax
	je	.L10825
.L10821:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L10828
	cmpl	$55, %eax
	je	.L15811
.L10832:
	cmpl	$63, %eax
	je	.L10835
	cmpl	$66, %eax
	je	.L10835
.L10831:
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L10838
	cmpl	$55, %eax
	je	.L15812
.L10842:
	cmpl	$63, %eax
	je	.L10845
	cmpl	$66, %eax
	je	.L10845
.L10841:
	movq	824(%rsp), %rbp
	cmpw	$55, (%rbp)
	jne	.L15283
	movq	816(%rsp), %rax
	cmpw	$55, (%rax)
	jne	.L15283
	testq	%r15, %r15
	je	.L15283
	cmpw	$46, (%r15)
	je	.L15813
.L10851:
	movl	812(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 3024(%rsp)
	testl	%ebp, %ebp
	je	.L14593
.L10937:
	movslq	%ebp,%rax
	movq	%rax, 3016(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L10925
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L10929
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r15)
	ja	.L10925
.L10929:
	movslq	%edx,%r14
	leaq	(%r14,%r14,4), %r13
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L15814
.L10930:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L15815
.L10931:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L10932
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	3024(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L10925
.L10932:
	call	get_last_insn
	movl	$1, %edx
	movq	%r15, %rsi
	movq	%rax, 3008(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15816
.L10933:
	movq	824(%rsp), %rdi
	xorl	%eax, %eax
	movq	816(%rsp), %rsi
	movq	%rbx, %rdx
	movq	3024(%rsp), %rcx
	call	*insn_gen_function(,%r14,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14978
	movq	3008(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L10925:
	movq	3016(%rsp), %r14
	movl	mode_wider_mode(,%r14,4), %ebp
	testl	%ebp, %ebp
	jne	.L10937
.L14593:
	movl	$4, %edi
	movq	%r15, %rsi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movq	824(%rsp), %rbx
	movl	$3, %ecx
	movq	816(%rsp), %rdx
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	8(%rdx), %r9
	xorl	%edx, %edx
	movl	$4, 24(%rsp)
	movl	$4, 8(%rsp)
	movq	%rax, 16(%rsp)
	movq	%r9, (%rsp)
	jmp	.L15200
.L15816:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L10933
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L10933
.L15815:
	xorl	%eax, %eax
	movq	816(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L10925
	jmp	.L10931
.L15814:
	xorl	%eax, %eax
	movq	824(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L10925
	jmp	.L10930
.L15813:
	movl	8(%r15), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 812(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	812(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L10865:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14584
.L10861:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L10861
.L14584:
	testl	%ecx, %ecx
	je	.L10854
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L10863
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L10863
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L10863:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L10865
.L10854:
	decl	%r9d
	jg	.L10851
	movq	824(%rsp), %rcx
	movq	816(%rsp), %r11
	movl	%r10d, %r13d
	movl	$9, %r14d
	movq	8(%rcx), %rbx
	movq	8(%r11), %rdi
	movq	%r11, 5992(%rsp)
	movq	%rcx, 5968(%rsp)
	movl	$0, 6020(%rsp)
	xorl	%ecx, %ecx
	movq	%rbx, 5976(%rsp)
	movq	%rdi, 6000(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L10868
	cmpw	$88, %dx
	je	.L10868
	cmpw	$87, %dx
	je	.L10868
.L10867:
	movl	%ecx, 5984(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L10870
	cmpw	$88, %dx
	je	.L10870
	cmpw	$87, %dx
	je	.L10870
.L10869:
	movl	%ecx, 6008(%rsp)
	movl	$0, 6012(%rsp)
	movl	$0, 5988(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L10872
	cmpw	$87, %ax
	je	.L10872
.L10871:
	testl	%edx, %edx
	movl	%edx, 6024(%rsp)
	je	.L10873
	movl	%r10d, 6020(%rsp)
.L10873:
	movl	%r10d, 6016(%rsp)
	movl	6008(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L10875
	movl	5984(%rsp), %edx
	testl	%edx, %edx
	jne	.L10874
.L10875:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 812(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r15d
	cmovl	812(%rsp), %ebp
.L10889:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14587
.L10885:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L10885
.L14587:
	testl	%ecx, %ecx
	je	.L10878
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L10887
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r15d, %eax
	cmpl	%eax, %ebp
	jl	.L10887
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L10887:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L10889
.L10878:
	cmpl	$2, %r9d
	jle	.L10874
	testl	%r10d, %r10d
	jne	.L10891
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L10892
	cmpw	$46, %dx
	je	.L10892
	cmpw	$47, %dx
	je	.L10892
	cmpw	$49, %dx
	je	.L10892
	cmpw	$113, %dx
	je	.L10892
.L10891:
	movl	5984(%rsp), %esi
	testl	%esi, %esi
	jne	.L10874
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L10894
	cmpw	$46, %dx
	je	.L10894
	cmpw	$47, %dx
	je	.L10894
	cmpw	$49, %dx
	je	.L10894
	cmpw	$113, %dx
	je	.L10894
.L10874:
	cmpl	$8, 812(%rsp)
	movl	$8, %eax
	cmovl	812(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 812(%rsp)
	jle	.L10897
.L10919:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r13d, %r13d
	testl	%edx, %edx
	je	.L14590
.L10904:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r14d, mode_size(%rbx)
	cmovl	%edx, %r13d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L10904
.L14590:
	testl	%r13d, %r13d
	je	.L10897
	movslq	%r13d,%r14
	movq	%r14, %rdi
	salq	$4, %rdi
	addq	mov_optab(%rip), %rdi
	movl	8(%rdi), %edx
	cmpl	$210, %edx
	je	.L10906
	movl	mode_size(,%r14,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 812(%rsp)
	jl	.L10906
	movslq	%edx,%r11
	cmpl	%ebp, 6016(%rsp)
	leaq	5968(%rsp), %rbx
	movq	insn_gen_function(,%r11,8), %r15
	movq	%r15, 3032(%rsp)
	jl	.L10906
	movl	6024(%rsp), %edx
.L10917:
	testl	%edx, %edx
	je	.L10911
	subl	%ebp, 52(%rbx)
.L10911:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L10912
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15195:
	movq	%rax, %r15
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L10914
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L10915:
	movq	%rax, %rsi
	movq	%r15, %rdi
	xorl	%eax, %eax
	call	*3032(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L10916
	addl	%ebp, 52(%rbx)
.L10916:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L10917
.L10906:
	movl	mode_size(,%r14,4), %r14d
	cmpl	$1, %r14d
	jg	.L10919
.L10897:
	movl	6016(%rsp), %eax
	testl	%eax, %eax
	jmp	.L15397
.L10914:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L10915
.L10912:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15195
.L10894:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5976(%rsp)
	jmp	.L10874
.L10892:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6000(%rsp)
	jmp	.L10891
.L10872:
	movl	$1, %edx
	jmp	.L10871
.L10870:
	movl	$1, %ecx
	jmp	.L10869
.L10868:
	movl	$1, %ecx
	jmp	.L10867
.L10845:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L10841
.L15812:
	movzbl	2(%r15), %edx
	cmpb	$16, %dl
	je	.L10839
	movq	8(%r15), %rbp
	cmpw	$59, (%rbp)
	je	.L15817
.L10839:
	cmpl	$55, %eax
	jne	.L10842
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L10841
.L15817:
	movq	8(%rbp), %r9
	movq	%r9, 8(%r15)
	cmpq	$0, 16(%rbp)
	je	.L10841
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r15, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	%r13, %r15
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L10841
.L10838:
	cmpq	$0, 16(%r15)
	jne	.L10846
	movq	8(%r15), %r15
	jmp	.L10841
.L10846:
	movq	24(%r15), %rsi
	testq	%rsi, %rsi
	je	.L10847
	movq	%rsi, %r15
	jmp	.L10841
.L10847:
	movq	8(%r15), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L10841
.L10835:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L10831
.L15811:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L10829
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L15818
.L10829:
	cmpl	$55, %eax
	jne	.L10832
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L10831
.L15818:
	movq	8(%rbp), %r11
	movq	%r11, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L10831
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r13, 816(%rsp)
	jmp	.L10831
.L10828:
	cmpq	$0, 16(%r12)
	jne	.L10836
	movq	8(%r12), %rcx
	movq	%rcx, 816(%rsp)
	jmp	.L10831
.L10836:
	movq	24(%r12), %r8
	testq	%r8, %r8
	movq	%r8, 816(%rsp)
	jne	.L10831
	movq	8(%r12), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r14
	movq	%r14, 816(%rsp)
	jmp	.L10831
.L10825:
	movq	736(%rsp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L10821
.L15810:
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	736(%rsp), %r8
	movq	%rax, 8(%r8)
	jmp	.L10821
.L10818:
	movq	736(%rsp), %rsi
	cmpq	$0, 16(%rsi)
	jne	.L10826
	movq	8(%rsi), %rbx
	movq	%rbx, 824(%rsp)
	jmp	.L10821
.L10826:
	movq	736(%rsp), %rax
	movq	24(%rax), %r9
	testq	%r9, %r9
	movq	%r9, 824(%rsp)
	jne	.L10821
	movq	736(%rsp), %rdi
	movq	8(%rdi), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	736(%rsp), %r10
	movq	%rax, %rdi
	movq	8(%r10), %rsi
	movq	%rax, 24(%r10)
	call	gen_move_insn
	movq	736(%rsp), %rbp
	movq	%rax, %rdi
	movq	16(%rbp), %rsi
	call	emit_insn_before
	movq	24(%rbp), %rdx
	movq	%rdx, 824(%rsp)
	jmp	.L10821
.L10807:
	movq	736(%rsp), %r13
	xorl	%esi, %esi
	movq	8(%r13), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	736(%rsp), %r11
	movq	%rax, 8(%r11)
	movq	736(%rsp), %rbp
	movq	16(%rbp), %rdi
	call	protect_from_queue
	movq	736(%rsp), %rcx
	movq	%rax, 16(%rcx)
	jmp	.L10803
.L15787:
	jne	.L10804
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbx)
	jmp	.L10803
.L10800:
	movq	736(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L10808
	movq	8(%rcx), %r8
	movq	%r8, 736(%rsp)
	jmp	.L10803
.L10808:
	movq	736(%rsp), %rbx
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	je	.L10809
	movq	%rdi, 736(%rsp)
	jmp	.L10803
.L10809:
	movq	736(%rsp), %rsi
	movq	8(%rsi), %r15
	movzbl	2(%r15), %edi
	call	gen_reg_rtx
	movq	736(%rsp), %r10
	movq	%rax, %rdi
	movq	8(%r10), %rsi
	movq	%rax, 24(%r10)
	call	gen_move_insn
	movq	736(%rsp), %rdx
	movq	%rax, %rdi
	movq	16(%rdx), %rsi
	call	emit_insn_before
	movq	736(%rsp), %r9
	movq	24(%r9), %rax
	movq	%rax, 736(%rsp)
	jmp	.L10803
.L15786:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	3160(%rsp), %rdi
	movzbl	2(%rbx), %edx
	movq	%rax, %rsi
	jmp	.L15194
.L10779:
	movq	736(%rsp), %rdx
	movl	(%rdx), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L15819
	movq	736(%rsp), %r15
	movq	3160(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movzbl	2(%r15), %edx
	movq	%r15, %rsi
	call	expand_expr
	movq	736(%rsp), %rdx
	movq	%rax, %r12
	cmpw	$51, (%rdx)
	je	.L15820
.L10797:
	movzwl	(%r12), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L10798
	cmpw	$46, %dx
	je	.L10798
	cmpw	$47, %dx
	je	.L10798
	cmpw	$49, %dx
	je	.L10798
	cmpw	$113, %dx
	jne	.L10744
	jmp	.L10798
.L15820:
	cmpl	$63, 8(%rdx)
	jle	.L10744
	jmp	.L10797
.L15819:
	movq	3160(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	736(%rsp), %r10
	movq	%rax, %r12
	movq	%rax, %rsi
	xorl	%eax, %eax
	movzbl	3(%r10), %edx
	movq	8(%r10), %rdi
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	jmp	.L10743
.L10788:
	movl	$1, %ebx
	jmp	.L10782
.L10780:
	xorl	%ebx, %ebx
	jmp	.L10782
.L10786:
	movq	736(%rsp), %rax
	xorl	%ebx, %ebx
	movq	8(%rax), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L10788
	movq	736(%rsp), %r9
	xorl	%eax, %eax
	movq	16(%r9), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L10782
	jmp	.L10788
.L15785:
	movzbl	2(%rdi), %eax
	cmpb	$16, %al
	je	.L10772
	movl	cse_not_expected(%rip), %r12d
	xorl	%esi, %esi
	movzbl	%al, %edx
	testl	%r12d, %r12d
	cmove	%rdi, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	movq	3160(%rsp), %rdi
	call	expand_expr
	movq	%rax, %r12
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L10798
	testb	%al, %al
	je	.L10798
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L15362
.L15784:
	movq	736(%rsp), %r8
	cmpb	$16, 2(%r8)
	jne	.L10745
	call	gen_label_rtx
	movq	%rax, %rbp
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r13
	testq	%rbx, %rbx
	jne	.L10749
.L14577:
	movq	736(%rsp), %r12
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L10751
	cmpl	$55, %eax
	je	.L15821
.L10755:
	cmpl	$63, %eax
	je	.L10758
	cmpl	$66, %eax
	je	.L10758
.L10754:
	movq	3160(%rsp), %r14
	xorl	%eax, %eax
	movq	%rbp, %rsi
	incl	inhibit_defer_pop(%rip)
	movq	32(%r14), %rdi
	call	jumpifnot
	movq	40(%r14), %rdi
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%r12, %rsi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L10764
.L14579:
	movq	%r13, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%rbp, %rdi
	call	emit_label
	xorl	%eax, %eax
	xorl	%edx, %edx
	movq	3160(%rsp), %rbp
	movq	%r12, %rsi
	movq	48(%rbp), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L10769
.L14581:
	movq	%r13, %rdi
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L10743
.L10769:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r11
	movq	%rax, 16(%rbx)
	testq	%r11, %r11
	movq	%r11, pending_chain(%rip)
	movq	%r11, %rbx
	jne	.L10769
	jmp	.L14581
.L10764:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rcx
	movq	%rax, 16(%rbx)
	testq	%rcx, %rcx
	movq	%rcx, pending_chain(%rip)
	movq	%rcx, %rbx
	jne	.L10764
	jmp	.L14579
.L10758:
	movq	736(%rsp), %rsi
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	736(%rsp), %r10
	movq	16(%r10), %rdi
	movq	%rax, 8(%r10)
	call	protect_from_queue
	movq	736(%rsp), %rdx
	movq	%rax, 16(%rdx)
	jmp	.L10754
.L15821:
	jne	.L10755
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	736(%rsp), %r12
	movq	%rax, 8(%r12)
	jmp	.L10754
.L10751:
	cmpq	$0, 16(%r12)
	jne	.L10759
	movq	8(%r12), %r12
	jmp	.L10754
.L10759:
	movq	24(%r12), %rax
	testq	%rax, %rax
	je	.L10760
	movq	%rax, %r12
	jmp	.L10754
.L10760:
	movq	8(%r12), %r15
	movzbl	2(%r15), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L10754
.L10749:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r9
	movq	%rax, 16(%rbx)
	testq	%r9, %r9
	movq	%r9, pending_chain(%rip)
	movq	%r9, %rbx
	jne	.L10749
	jmp	.L14577
.L15783:
	movq	3160(%rsp), %r11
	movq	const0_rtx(%rip), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	32(%r11), %rdi
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L10741
.L14575:
	movq	3160(%rsp), %rax
	movq	736(%rsp), %rsi
	xorl	%edx, %edx
	movq	40(%rax), %rdi
	xorl	%eax, %eax
	call	store_expr
	movq	%rax, %r12
	jmp	.L10743
.L10741:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdi
	movq	%rax, 16(%rbx)
	testq	%rdi, %rdi
	movq	%rdi, pending_chain(%rip)
	movq	%rdi, %rbx
	jne	.L10741
	jmp	.L14575
.L15782:
	movq	3160(%rsp), %rbx
	movzbl	16(%rbx), %eax
	cmpb	$39, %al
	jne	.L10736
	movl	current_function_returns_struct(%rip), %r13d
	testl	%r13d, %r13d
	je	.L10736
	movl	current_function_returns_pcc_struct(%rip), %esi
	testl	%esi, %esi
	jne	.L10736
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	expand_expr
	movq	3160(%rsp), %rdi
	movq	%rax, %r14
	xorl	%eax, %eax
	call	expr_size
	movl	$4, %r9d
	movq	736(%rsp), %r15
	movq	8(%r14), %rcx
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%rcx, (%rsp)
	movq	8(%r15), %r8
	movl	$3, %ecx
	call	emit_library_call
	movq	736(%rsp), %rdi
	jmp	.L15202
.L15781:
	movq	3176(%rsp), %rdi
	xorl	%edx, %edx
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	3176(%rsp), %r12
	movq	%rax, 736(%rsp)
	movzbl	16(%r12), %edx
	jmp	.L10735
.L15780:
	movq	3176(%rsp), %rbx
	movq	40(%rbx), %rdi
	cmpb	$25, 16(%rdi)
	jne	.L10218
	movq	8(%rbx), %r11
	movq	32(%r11), %rcx
	cmpb	$25, 16(%rcx)
	jne	.L10218
.L10219:
	xorl	%ecx, %ecx
	xorl	%r14d, %r14d
	xorl	%r13d, %r13d
	cmpb	$37, %dl
	movl	$0, 5480(%rsp)
	movq	3176(%rsp), %rbp
	leaq	5496(%rsp), %r12
	je	.L15822
	cmpb	$38, %dl
	je	.L15823
	movq	3176(%rsp), %r9
	movq	8(%r9), %r10
	movzbl	44(%r10), %r14d
	movslq	%r14d,%rdx
	movl	mode_size(,%rdx,4), %eax
	sall	$3, %eax
	movl	%eax, 5500(%rsp)
	movq	8(%r9), %r11
	movzbl	17(%r11), %edi
	shrb	$6, %dil
	movl	%edi, %esi
	andl	$1, %esi
	movl	%esi, 3156(%rsp)
.L10222:
	testq	%rcx, %rcx
	je	.L10225
	cmpb	$25, 16(%rcx)
	je	.L10226
	movl	$16, %r14d
	movl	$-1, 5500(%rsp)
.L10225:
	movl	$0, (%r12)
.L10253:
	movzbl	16(%rbp), %edx
	cmpb	$39, %dl
	je	.L15824
.L10231:
	leal	-37(%rdx), %ecx
	cmpb	$1, %cl
	ja	.L10232
	cmpb	$37, %dl
	je	.L15825
	movq	48(%rbp), %rbx
.L10234:
	movzbl	16(%rbx), %eax
	cmpb	$53, %al
	je	.L15826
	cmpb	$25, %al
	je	.L15827
.L10243:
	testq	%r13, %r13
	je	.L10245
	movl	$8, %edi
	call	size_int
	movq	%rbx, %rsi
	movl	$58, %edi
	movq	%rax, %rdx
	call	size_binop
	movq	%r13, %rsi
	movl	$53, %edi
.L15185:
	movq	%rax, %rdx
	call	size_binop
	movq	%rax, %r13
.L10247:
	testb	$16, 17(%rbp)
	je	.L10252
	movl	$1, 5480(%rsp)
.L10252:
	movq	32(%rbp), %rbp
	jmp	.L10253
.L10245:
	movl	$8, %edi
	call	size_int
	movq	%rbx, %rsi
	movl	$58, %edi
	jmp	.L15185
.L15827:
	movl	24(%rbx), %eax
.L15186:
	addl	%eax, (%r12)
	jmp	.L10247
.L15826:
	movq	32(%rbx), %rsi
	cmpb	$25, 16(%rsi)
	je	.L15828
	movq	40(%rbx), %rax
	cmpb	$25, 16(%rax)
	jne	.L15283
	movq	%rsi, %rbx
.L10237:
	movl	24(%rax), %eax
	addl	%eax, (%r12)
	jmp	.L10243
.L15828:
	movq	40(%rbx), %rbx
	movq	%rsi, %rax
	jmp	.L10237
.L15825:
	movq	40(%rbp), %r8
	movq	72(%r8), %rbx
	jmp	.L10234
.L10232:
	cmpb	$42, %dl
	je	.L15829
.L10248:
	cmpb	$103, %dl
	je	.L10247
	leal	-101(%rdx), %esi
	cmpb	$1, %sil
	ja	.L10229
	movq	32(%rbp), %rdx
	movq	8(%rbp), %r11
	movq	8(%rdx), %r9
	movzbl	44(%r9), %edi
	cmpb	%dil, 44(%r11)
	je	.L10247
.L10229:
	testl	%r14d, %r14d
	jne	.L10254
	movl	(%r12), %eax
	movl	5500(%rsp), %edi
	cltd
	idivl	%edi
	testl	%edx, %edx
	movl	%edx, %ebx
	je	.L15830
.L10254:
	testl	%r14d, %r14d
	movl	%r14d, 5484(%rsp)
	movq	%r13, 5488(%rsp)
	jne	.L10257
	testl	%r15d, %r15d
	jne	.L15831
.L10257:
	movq	%rbp, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	5488(%rsp), %rdi
	movq	%rax, %rbx
	testq	%rdi, %rdi
	jne	.L15832
.L10258:
	movl	5480(%rsp), %r13d
	testl	%r13d, %r13d
	je	.L10260
	cmpw	$55, (%rbx)
	je	.L15833
.L10260:
	testl	%r15d, %r15d
	movl	5500(%rsp), %r12d
	movl	5496(%rsp), %r14d
	movl	5484(%rsp), %r13d
	je	.L10262
	movq	3176(%rsp), %rax
	movq	8(%rax), %r10
	movzbl	44(%r10), %r15d
	movl	%r15d, 732(%rsp)
.L10263:
	movq	8(%rbp), %rdi
	movl	48(%rdi), %r15d
	call	int_size_in_bytes
	movl	$0, 728(%rsp)
	movl	%eax, 3152(%rsp)
	shrl	$3, %r15d
	cmpl	$31, %r12d
	jg	.L10264
	movl	$1, %eax
	movl	%r12d, %ecx
	sall	%cl, %eax
	decl	%eax
	movl	%eax, 728(%rsp)
.L10264:
	cmpl	$16, %r13d
	je	.L15834
.L10265:
	testl	%r13d, %r13d
	je	.L10270
	cmpl	$16, %r13d
	je	.L10271
	movslq	%r13d,%rsi
	cmpb	$0, direct_store(%rsi)
	je	.L10270
.L10271:
	movzwl	(%rbx), %eax
	cmpw	$51, %ax
	je	.L10270
	cmpw	$53, %ax
	je	.L10270
	movl	732(%rsp), %r12d
	movq	8(%rbx), %rdi
	testl	%r12d, %r12d
	je	.L10277
	movzwl	(%rdi), %edx
	cmpw	$51, %dx
	je	.L10277
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L10277
	cmpw	$46, %dx
	je	.L10277
	cmpw	$47, %dx
	je	.L10277
	cmpw	$49, %dx
	je	.L10277
	cmpw	$113, %dx
	je	.L10277
	cmpw	$63, %dx
	je	.L15835
.L10278:
	xorl	%eax, %eax
	call	copy_to_reg
	movq	%rax, %rdi
.L10277:
	cmpl	$-1, %r14d
	leal	7(%r14), %ebp
	cmovle	%ebp, %r14d
	sarl	$3, %r14d
	movl	%r14d, %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	%rbx, %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	orb	$16, 3(%rax)
	movq	%rax, %r15
	movl	$0, 724(%rsp)
	movl	732(%rsp), %eax
	movq	3160(%rsp), %rdx
	testl	%eax, %eax
	movzbl	16(%rdx), %eax
	setne	%r8b
	cmpb	$44, %al
	movzbl	%r8b, %ebp
	je	.L15836
	cmpb	$48, %al
	je	.L15837
.L10289:
	testl	%ebp, %ebp
	je	.L10316
	cmpw	$55, (%r15)
	je	.L15838
.L10316:
	movzwl	(%r15), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L10324
	mov	%eax, %ebx
	jmp	*.L10333(,%rbx,8)
	.section	.rodata
	.align 8
	.align 4
.L10333:
	.quad	.L10327
	.quad	.L10324
	.quad	.L10324
	.quad	.L10324
	.quad	.L10332
	.quad	.L10324
	.quad	.L10324
	.quad	.L10324
	.quad	.L10330
	.quad	.L10330
	.quad	.L10324
	.quad	.L10330
	.text
.L10327:
	movq	8(%r15), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %ebx
.L10326:
	testl	%ebx, %ebx
	je	.L10323
	movzbl	2(%r15), %eax
	cmpb	$16, %al
	je	.L10335
	testb	%al, %al
	jne	.L15839
.L10335:
	movzbl	2(%r15), %edx
	movq	3160(%rsp), %rdi
	xorl	%esi, %esi
.L15187:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L15361:
	movq	%rax, %r12
.L10342:
	movl	$1, 724(%rsp)
.L10288:
	cmpq	%r15, %r12
	je	.L10343
	movq	3160(%rsp), %r8
	cmpb	$0, 16(%r8)
	je	.L10343
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L10344
	cmpl	$55, %eax
	je	.L15840
.L10348:
	cmpl	$63, %eax
	je	.L10351
	cmpl	$66, %eax
	je	.L10351
.L10347:
	movzbl	2(%r12), %eax
	movzbl	2(%r15), %ecx
	cmpb	%cl, %al
	je	.L10354
	testb	%al, %al
	je	.L10354
	movq	3160(%rsp), %rax
	movq	8(%rax), %r11
	movl	724(%rsp), %eax
	movzbl	17(%r11), %esi
	shrb	$6, %sil
	movl	%esi, %edx
	andl	$1, %edx
	testl	%eax, %eax
	je	.L10355
	movq	%r12, %rsi
	movzbl	%cl, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%rax, %r12
.L10610:
	movq	%r15, %rdi
	movq	%r12, %rsi
	call	emit_move_insn
.L10343:
	movl	724(%rsp), %r10d
	testl	%r10d, %r10d
	cmove	%r15, %r12
.L10287:
	movq	%r12, %rbx
.L10268:
	movq	%rbx, %rdi
	jmp	.L15202
.L10355:
	movq	%r15, %rdi
	movq	%r12, %rsi
	xorl	%eax, %eax
	call	convert_move
	jmp	.L10343
.L10354:
	cmpb	$16, %al
	jne	.L10610
	movq	3160(%rsp), %rdx
	cmpb	$28, 16(%rdx)
	je	.L15841
	cmpb	$16, %al
	jne	.L10610
	movq	3160(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, 624(%rsp)
	call	expr_size
	movq	3160(%rsp), %rdi
	movq	%rax, %r13
	movq	8(%rdi), %r8
	movl	48(%r8), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r15)
	movl	%eax, 620(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r15, 632(%rsp)
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L10613
	cmpl	$55, %eax
	je	.L15842
	cmpl	$63, %eax
	je	.L10620
	cmpl	$66, %eax
	je	.L10620
.L10616:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L10623
	cmpl	$55, %eax
	je	.L15843
.L10627:
	cmpl	$63, %eax
	je	.L10630
	cmpl	$66, %eax
	je	.L10630
.L10626:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L10633
	cmpl	$55, %eax
	je	.L15844
.L10637:
	cmpl	$63, %eax
	je	.L10640
	cmpl	$66, %eax
	je	.L10640
.L10636:
	movq	632(%rsp), %rax
	cmpw	$55, (%rax)
	jne	.L15283
	movq	624(%rsp), %rcx
	cmpw	$55, (%rcx)
	jne	.L15283
	testq	%r13, %r13
	je	.L15283
	cmpw	$46, (%r13)
	je	.L15845
.L10646:
	movl	620(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 3064(%rsp)
	testl	%ebp, %ebp
	je	.L14573
.L10732:
	movslq	%ebp,%rax
	movq	%rax, 3056(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L10720
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L10724
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L10720
.L10724:
	movslq	%edx,%r8
	leaq	(%r8,%r8,4), %r14
	movq	%r8, 3048(%rsp)
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15846
.L10725:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15847
.L10726:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L10727
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	3064(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L10720
.L10727:
	call	get_last_insn
	movl	$1, %edx
	movq	%r13, %rsi
	movq	%rax, 3040(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15848
.L10728:
	movq	3048(%rsp), %r14
	movq	632(%rsp), %rdi
	xorl	%eax, %eax
	movq	624(%rsp), %rsi
	movq	%rbx, %rdx
	movq	3064(%rsp), %rcx
	call	*insn_gen_function(,%r14,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14975
	movq	3040(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L10720:
	movq	3056(%rsp), %r9
	movl	mode_wider_mode(,%r9,4), %ebp
	testl	%ebp, %ebp
	jne	.L10732
.L14573:
	movl	$4, %edi
	movq	%r13, %rsi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$3, %ecx
	xorl	%esi, %esi
	movq	624(%rsp), %rdx
	movq	memcpy_libfunc(%rip), %rdi
	movq	8(%rdx), %rbp
	xorl	%edx, %edx
	movl	$4, 24(%rsp)
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movq	632(%rsp), %rax
	movq	%rbp, (%rsp)
.L15192:
	movq	8(%rax), %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	call	emit_library_call
	jmp	.L10343
.L14975:
	call	emit_insn
	jmp	.L10343
.L15848:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L10728
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L10728
.L15847:
	xorl	%eax, %eax
	movq	624(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L10720
	jmp	.L10726
.L15846:
	xorl	%eax, %eax
	movq	632(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L10720
	jmp	.L10725
.L15845:
	movl	8(%r13), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 620(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	620(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L10660:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14564
.L10656:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L10656
.L14564:
	testl	%ecx, %ecx
	je	.L10649
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L10658
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L10658
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L10658:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L10660
.L10649:
	decl	%r9d
	jg	.L10646
	movq	632(%rsp), %r8
	movq	624(%rsp), %r11
	xorl	%ecx, %ecx
	movl	%r10d, %r13d
	movl	$9, %r14d
	movq	8(%r8), %rbx
	movq	8(%r11), %rdi
	movq	%r11, 6056(%rsp)
	movl	$0, 6084(%rsp)
	movq	%r8, 6032(%rsp)
	movq	%rbx, 6040(%rsp)
	movq	%rdi, 6064(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L10663
	cmpw	$88, %dx
	je	.L10663
	cmpw	$87, %dx
	je	.L10663
.L10662:
	movl	%ecx, 6048(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L10665
	cmpw	$88, %dx
	je	.L10665
	cmpw	$87, %dx
	je	.L10665
.L10664:
	movl	%ecx, 6072(%rsp)
	movl	$0, 6076(%rsp)
	movl	$0, 6052(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L10667
	cmpw	$87, %ax
	je	.L10667
.L10666:
	testl	%edx, %edx
	movl	%edx, 6088(%rsp)
	je	.L10668
	movl	%r10d, 6084(%rsp)
.L10668:
	movl	6072(%rsp), %eax
	movl	%r10d, 6080(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L10670
	movl	6048(%rsp), %eax
	testl	%eax, %eax
	jne	.L10669
.L10670:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 620(%rsp)
	movq	mov_optab(%rip), %r11
	cmovl	620(%rsp), %ebp
.L10684:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14567
.L10680:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L10680
.L14567:
	testl	%ecx, %ecx
	je	.L10673
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L10682
	movl	mode_size(,%rcx,4), %eax
	movl	$8, %r8d
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r8d, %eax
	cmpl	%eax, %ebp
	jl	.L10682
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L10682:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L10684
.L10673:
	cmpl	$2, %r9d
	jle	.L10669
	testl	%r10d, %r10d
	jne	.L10686
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L10687
	cmpw	$46, %dx
	je	.L10687
	cmpw	$47, %dx
	je	.L10687
	cmpw	$49, %dx
	je	.L10687
	cmpw	$113, %dx
	je	.L10687
.L10686:
	movl	6048(%rsp), %eax
	testl	%eax, %eax
	jne	.L10669
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L10689
	cmpw	$46, %dx
	je	.L10689
	cmpw	$47, %dx
	je	.L10689
	cmpw	$49, %dx
	je	.L10689
	cmpw	$113, %dx
	je	.L10689
.L10669:
	cmpl	$8, 620(%rsp)
	movl	$8, %eax
	cmovl	620(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 620(%rsp)
	jle	.L10692
.L10714:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r13d, %r13d
	testl	%edx, %edx
	je	.L14570
.L10699:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r14d, mode_size(%rbx)
	cmovl	%edx, %r13d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L10699
.L14570:
	testl	%r13d, %r13d
	je	.L10692
	movslq	%r13d,%r14
	movq	%r14, %rcx
	salq	$4, %rcx
	addq	mov_optab(%rip), %rcx
	movl	8(%rcx), %edx
	cmpl	$210, %edx
	je	.L10701
	movl	mode_size(,%r14,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 620(%rsp)
	jl	.L10701
	movslq	%edx,%r11
	cmpl	%ebp, 6080(%rsp)
	leaq	6032(%rsp), %rbx
	movq	insn_gen_function(,%r11,8), %rdi
	movq	%rdi, 3072(%rsp)
	jl	.L10701
	movl	6088(%rsp), %edx
.L10712:
	testl	%edx, %edx
	je	.L10706
	subl	%ebp, 52(%rbx)
.L10706:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L10707
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15191:
	movq	%rax, 608(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L10709
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L10710:
	movq	%rax, %rsi
	movq	608(%rsp), %rdi
	xorl	%eax, %eax
	call	*3072(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L10711
	addl	%ebp, 52(%rbx)
.L10711:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L10712
.L10701:
	movl	mode_size(,%r14,4), %r14d
	cmpl	$1, %r14d
	jg	.L10714
.L10692:
	movl	6080(%rsp), %eax
	testl	%eax, %eax
.L15396:
	je	.L10343
	jmp	.L15283
.L10709:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L10710
.L10707:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15191
.L10689:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6040(%rsp)
	jmp	.L10669
.L10687:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6064(%rsp)
	jmp	.L10686
.L10667:
	movl	$1, %edx
	jmp	.L10666
.L10665:
	movl	$1, %ecx
	jmp	.L10664
.L10663:
	movl	$1, %ecx
	jmp	.L10662
.L10640:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L10636
.L15844:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L10634
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L15849
.L10634:
	cmpl	$55, %eax
	jne	.L10637
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L10636
.L15849:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L10636
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L10636
.L10633:
	cmpq	$0, 16(%r13)
	jne	.L10641
	movq	8(%r13), %r13
	jmp	.L10636
.L10641:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L10642
	movq	%rsi, %r13
	jmp	.L10636
.L10642:
	movq	8(%r13), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L10636
.L10630:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L10626
.L15843:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L10624
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L15850
.L10624:
	cmpl	$55, %eax
	jne	.L10627
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L10626
.L15850:
	movq	8(%rbp), %rsi
	movq	%rsi, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L10626
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r14, 624(%rsp)
	jmp	.L10626
.L10623:
	cmpq	$0, 16(%r12)
	jne	.L10631
	movq	8(%r12), %rbp
	movq	%rbp, 624(%rsp)
	jmp	.L10626
.L10631:
	movq	24(%r12), %r11
	testq	%r11, %r11
	movq	%r11, 624(%rsp)
	jne	.L10626
	movq	8(%r12), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rbx
	movq	%rbx, 624(%rsp)
	jmp	.L10626
.L10620:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L10616
.L15842:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L10616
.L10613:
	cmpq	$0, 16(%r15)
	jne	.L10621
	movq	8(%r15), %r9
	movq	%r9, 632(%rsp)
	jmp	.L10616
.L10621:
	movq	24(%r15), %rcx
	testq	%rcx, %rcx
	movq	%rcx, 632(%rsp)
	jne	.L10616
	movq	8(%r15), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %rdx
	movq	%rdx, 632(%rsp)
	jmp	.L10616
.L15841:
	xorl	%eax, %eax
	movq	%rdx, %rdi
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, 696(%rsp)
	je	.L15851
.L10359:
	movl	$8, %edi
	call	size_int
	movq	3160(%rsp), %rdi
	movq	%rax, %rdx
	movq	8(%rdi), %r11
	movl	$57, %edi
	movq	32(%r11), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	3160(%rsp), %rbx
	movq	%rax, %r14
	movl	32(%rbx), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%r14, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	expand_expr
	movq	$0, 640(%rsp)
	movq	%rax, 664(%rsp)
	movq	%rax, %r14
	movq	3160(%rsp), %rax
	movq	8(%rax), %rsi
	movl	48(%rsi), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r15)
	movl	%eax, 660(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r15, 672(%rsp)
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L10485
	cmpl	$55, %eax
	je	.L15852
	cmpl	$63, %eax
	je	.L10492
	cmpl	$66, %eax
	je	.L10492
.L10488:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L10495
	cmpl	$55, %eax
	je	.L15853
.L10499:
	cmpl	$63, %eax
	je	.L10502
	cmpl	$66, %eax
	je	.L10502
.L10498:
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L10505
	cmpl	$55, %eax
	je	.L15854
.L10509:
	cmpl	$63, %eax
	je	.L10512
	cmpl	$66, %eax
	je	.L10512
.L10508:
	movq	672(%rsp), %rdi
	cmpw	$55, (%rdi)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 664(%rsp)
	je	.L15283
	movq	664(%rsp), %rsi
	cmpw	$46, (%rsi)
	je	.L15855
.L10518:
	movl	660(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 3104(%rsp)
	testl	%ebp, %ebp
	je	.L14561
.L10604:
	movslq	%ebp,%rdx
	movq	%rdx, %rax
	movq	%rdx, 3096(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L10592
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L10596
	movq	664(%rsp), %r13
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L10592
.L10596:
	movslq	%edx,%r10
	leaq	(%r10,%r10,4), %r13
	movq	%r10, 3088(%rsp)
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L15856
.L10597:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L15857
.L10598:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L10599
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	3104(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L10592
.L10599:
	call	get_last_insn
	movl	$1, %edx
	movq	664(%rsp), %rsi
	movq	%rax, 3080(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15858
.L10600:
	movq	3088(%rsp), %rbp
	movq	672(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	3104(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14974
	movq	3080(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L10592:
	movq	3096(%rsp), %rsi
	movl	mode_wider_mode(,%rsi,4), %ebp
	testl	%ebp, %ebp
	jne	.L10604
.L14561:
	movq	664(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movq	672(%rsp), %r11
	movq	8(%r12), %rbx
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	movl	$3, %ecx
	xorl	%eax, %eax
	movq	%rbx, (%rsp)
	movq	8(%r11), %r8
	call	emit_library_call
.L10602:
	cmpw	$46, (%r14)
	je	.L15859
	movq	8(%r15), %rsi
	movl	$4, %edi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movl	$4, %edi
	movq	%r14, %rcx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	696(%rsp), %rdx
	movl	$4, %edi
	movq	%r14, %rcx
	movq	%rax, %r12
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 640(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L10606:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L10607
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%r12, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L10607:
	cmpq	$0, 640(%rsp)
	je	.L10343
	movq	640(%rsp), %rdi
	call	emit_label
	jmp	.L10343
.L15859:
	movq	3160(%rsp), %rax
	movq	8(%r15), %rdi
	movl	32(%rax), %esi
	call	plus_constant_wide
	movq	696(%rsp), %rdi
	movq	3160(%rsp), %r14
	movq	%rax, %r12
	movl	32(%r14), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L10606
.L14974:
	call	emit_insn
	jmp	.L10602
.L15858:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L10600
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L10600
.L15857:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L10592
	jmp	.L10598
.L15856:
	xorl	%eax, %eax
	movq	672(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L10592
	jmp	.L10597
.L15855:
	movl	8(%rsi), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 660(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	660(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L10532:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14552
.L10528:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L10528
.L14552:
	testl	%ecx, %ecx
	je	.L10521
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L10530
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L10530
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L10530:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L10532
.L10521:
	decl	%r9d
	jg	.L10518
	movq	672(%rsp), %r9
	movq	8(%r12), %rdi
	xorl	%ecx, %ecx
	movl	%r10d, %r13d
	movq	8(%r9), %rbx
	movq	%r12, 6056(%rsp)
	movq	%r9, 6032(%rsp)
	movl	$0, 6084(%rsp)
	movq	%rdi, 6064(%rsp)
	movl	$9, 656(%rsp)
	movq	%rbx, 6040(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L10535
	cmpw	$88, %dx
	je	.L10535
	cmpw	$87, %dx
	je	.L10535
.L10534:
	movl	%ecx, 6048(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L10537
	cmpw	$88, %dx
	je	.L10537
	cmpw	$87, %dx
	je	.L10537
.L10536:
	movl	%ecx, 6072(%rsp)
	movl	$0, 6076(%rsp)
	movl	$0, 6052(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L10539
	cmpw	$87, %ax
	je	.L10539
.L10538:
	testl	%edx, %edx
	movl	%edx, 6088(%rsp)
	je	.L10540
	movl	%r10d, 6084(%rsp)
.L10540:
	movl	6072(%rsp), %eax
	movl	%r10d, 6080(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L10542
	movl	6048(%rsp), %ecx
	testl	%ecx, %ecx
	jne	.L10541
.L10542:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 660(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	660(%rsp), %ebp
.L10556:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14555
.L10552:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L10552
.L14555:
	testl	%ecx, %ecx
	je	.L10545
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L10554
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L10554
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L10554:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L10556
.L10545:
	cmpl	$2, %r9d
	jle	.L10541
	testl	%r10d, %r10d
	jne	.L10558
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L10559
	cmpw	$46, %dx
	je	.L10559
	cmpw	$47, %dx
	je	.L10559
	cmpw	$49, %dx
	je	.L10559
	cmpw	$113, %dx
	je	.L10559
.L10558:
	movl	6048(%rsp), %esi
	testl	%esi, %esi
	jne	.L10541
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L10561
	cmpw	$46, %dx
	je	.L10561
	cmpw	$47, %dx
	je	.L10561
	cmpw	$49, %dx
	je	.L10561
	cmpw	$113, %dx
	je	.L10561
.L10541:
	cmpl	$8, 660(%rsp)
	movl	$8, %eax
	cmovl	660(%rsp), %eax
	cmpl	$1, 656(%rsp)
	movl	%eax, 660(%rsp)
	jle	.L10564
.L10586:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14558
.L10571:
	movslq	%edx,%rbx
	movl	656(%rsp), %eax
	salq	$2, %rbx
	cmpl	%eax, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L10571
.L14558:
	testl	%r12d, %r12d
	je	.L10564
	movslq	%r12d,%r13
	movq	%r13, %r8
	salq	$4, %r8
	addq	mov_optab(%rip), %r8
	movl	8(%r8), %edx
	cmpl	$210, %edx
	je	.L10573
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 660(%rsp)
	jl	.L10573
	movslq	%edx,%r9
	cmpl	%ebp, 6080(%rsp)
	leaq	6032(%rsp), %rbx
	movq	insn_gen_function(,%r9,8), %rdi
	movq	%rdi, 3112(%rsp)
	jl	.L10573
	movl	6088(%rsp), %edx
.L10584:
	testl	%edx, %edx
	je	.L10578
	subl	%ebp, 52(%rbx)
.L10578:
	movl	16(%rbx), %ecx
	testl	%ecx, %ecx
	je	.L10579
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15190:
	movq	%rax, 648(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L10581
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L10582:
	movq	%rax, %rsi
	movq	648(%rsp), %rdi
	xorl	%eax, %eax
	call	*3112(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L10583
	addl	%ebp, 52(%rbx)
.L10583:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L10584
.L10573:
	movl	mode_size(,%r13,4), %r12d
	movl	%r12d, 656(%rsp)
	decl	%r12d
	jg	.L10586
.L10564:
	movl	6080(%rsp), %eax
	testl	%eax, %eax
	je	.L10602
	jmp	.L15283
.L10581:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L10582
.L10579:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15190
.L10561:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6040(%rsp)
	jmp	.L10541
.L10559:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6064(%rsp)
	jmp	.L10558
.L10539:
	movl	$1, %edx
	jmp	.L10538
.L10537:
	movl	$1, %ecx
	jmp	.L10536
.L10535:
	movl	$1, %ecx
	jmp	.L10534
.L10512:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L10508
.L15854:
	movzbl	2(%r14), %edx
	cmpb	$16, %dl
	je	.L10506
	movq	8(%r14), %rbp
	cmpw	$59, (%rbp)
	je	.L15860
.L10506:
	cmpl	$55, %eax
	jne	.L10509
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L10508
.L15860:
	movq	8(%rbp), %rsi
	movq	%rsi, 8(%r14)
	cmpq	$0, 16(%rbp)
	je	.L10508
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r13, 664(%rsp)
	jmp	.L10508
.L10505:
	cmpq	$0, 16(%r14)
	jne	.L10513
	movq	8(%r14), %rbp
	movq	%rbp, 664(%rsp)
	jmp	.L10508
.L10513:
	movq	24(%r14), %rax
	testq	%rax, %rax
	movq	%rax, 664(%rsp)
	jne	.L10508
	movq	8(%r14), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rbx
	movq	%rbx, 664(%rsp)
	jmp	.L10508
.L10502:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L10498
.L15853:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L10496
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L15861
.L10496:
	cmpl	$55, %eax
	jne	.L10499
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L10498
.L15861:
	movq	8(%rbp), %r10
	movq	%r10, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L10498
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	%r13, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L10498
.L10495:
	cmpq	$0, 16(%r12)
	jne	.L10503
	movq	8(%r12), %r12
	jmp	.L10498
.L10503:
	movq	24(%r12), %rax
	testq	%rax, %rax
	je	.L10504
	movq	%rax, %r12
	jmp	.L10498
.L10504:
	movq	8(%r12), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L10498
.L10492:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L10488
.L15852:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L10488
.L10485:
	cmpq	$0, 16(%r15)
	jne	.L10493
	movq	8(%r15), %r9
	movq	%r9, 672(%rsp)
	jmp	.L10488
.L10493:
	movq	24(%r15), %rcx
	testq	%rcx, %rcx
	movq	%rcx, 672(%rsp)
	jne	.L10488
	movq	8(%r15), %r13
	movzbl	2(%r13), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r8
	movq	%r8, 672(%rsp)
	jmp	.L10488
.L15851:
	movq	3160(%rsp), %rcx
	movq	696(%rsp), %rdi
	movl	32(%rcx), %eax
	cmpl	%eax, 8(%rdi)
	jge	.L10359
	movq	%r12, 704(%rsp)
	movq	8(%rcx), %r9
	movl	48(%r9), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r15)
	movl	%eax, 692(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r15, 712(%rsp)
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L10362
	cmpl	$55, %eax
	je	.L15862
	cmpl	$63, %eax
	je	.L10369
	cmpl	$66, %eax
	je	.L10369
.L10365:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L10372
	cmpl	$55, %eax
	je	.L15863
.L10376:
	cmpl	$63, %eax
	je	.L10379
	cmpl	$66, %eax
	je	.L10379
.L10375:
	movq	696(%rsp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$59, %eax
	je	.L10382
	cmpl	$55, %eax
	je	.L15864
.L10386:
	cmpl	$63, %eax
	je	.L10389
	cmpl	$66, %eax
	je	.L10389
.L10385:
	movq	712(%rsp), %r11
	cmpw	$55, (%r11)
	jne	.L15283
	movq	704(%rsp), %r14
	cmpw	$55, (%r14)
	jne	.L15283
	cmpq	$0, 696(%rsp)
	je	.L15283
	movq	696(%rsp), %rdi
	cmpw	$46, (%rdi)
	je	.L15865
.L10395:
	movl	692(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 3136(%rsp)
	testl	%ebp, %ebp
	je	.L14549
.L10481:
	movslq	%ebp,%rax
	movq	%rax, 3128(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L10469
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L10473
	movq	696(%rsp), %r13
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L10469
.L10473:
	movslq	%edx,%r14
	leaq	(%r14,%r14,4), %r13
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L15866
.L10474:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L15867
.L10475:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L10476
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	3136(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L10469
.L10476:
	call	get_last_insn
	movl	$1, %edx
	movq	696(%rsp), %rsi
	movq	%rax, 3120(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15868
.L10477:
	movq	712(%rsp), %rdi
	xorl	%eax, %eax
	movq	704(%rsp), %rsi
	movq	%rbx, %rdx
	movq	3136(%rsp), %rcx
	call	*insn_gen_function(,%r14,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14975
	movq	3120(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L10469:
	movq	3128(%rsp), %rdx
	movl	mode_wider_mode(,%rdx,4), %ebp
	testl	%ebp, %ebp
	jne	.L10481
.L14549:
	movq	696(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$3, %ecx
	xorl	%edx, %edx
	movq	704(%rsp), %r10
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	8(%r10), %rbp
	movl	$4, 24(%rsp)
	movq	%rax, 16(%rsp)
	movq	712(%rsp), %rax
	movl	$4, 8(%rsp)
	movq	%rbp, (%rsp)
	jmp	.L15192
.L15868:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L10477
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L10477
.L15867:
	xorl	%eax, %eax
	movq	704(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L10469
	jmp	.L10475
.L15866:
	xorl	%eax, %eax
	movq	712(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L10469
	jmp	.L10474
.L15865:
	movl	8(%rdi), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 692(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	692(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L10409:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14540
.L10405:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L10405
.L14540:
	testl	%ecx, %ecx
	je	.L10398
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L10407
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L10407
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L10407:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L10409
.L10398:
	decl	%r9d
	jg	.L10395
	movq	704(%rsp), %rcx
	movq	712(%rsp), %r8
	movl	%r10d, %r13d
	movl	$9, %r14d
	movq	8(%r8), %rbx
	movq	8(%rcx), %rdi
	movq	%rcx, 5992(%rsp)
	movl	$0, 6020(%rsp)
	movq	%r8, 5968(%rsp)
	xorl	%ecx, %ecx
	movq	%rbx, 5976(%rsp)
	movq	%rdi, 6000(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L10412
	cmpw	$88, %dx
	je	.L10412
	cmpw	$87, %dx
	je	.L10412
.L10411:
	movl	%ecx, 5984(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L10414
	cmpw	$88, %dx
	je	.L10414
	cmpw	$87, %dx
	je	.L10414
.L10413:
	movl	%ecx, 6008(%rsp)
	movl	$0, 6012(%rsp)
	movl	$0, 5988(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L10416
	cmpw	$87, %ax
	je	.L10416
.L10415:
	testl	%edx, %edx
	movl	%edx, 6024(%rsp)
	je	.L10417
	movl	%r10d, 6020(%rsp)
.L10417:
	movl	6008(%rsp), %eax
	movl	%r10d, 6016(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L10419
	movl	5984(%rsp), %eax
	testl	%eax, %eax
	jne	.L10418
.L10419:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 692(%rsp)
	movq	mov_optab(%rip), %r11
	cmovl	692(%rsp), %ebp
.L10433:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14543
.L10429:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L10429
.L14543:
	testl	%ecx, %ecx
	je	.L10422
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L10431
	movl	mode_size(,%rcx,4), %eax
	movl	$8, %r8d
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r8d, %eax
	cmpl	%eax, %ebp
	jl	.L10431
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L10431:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L10433
.L10422:
	cmpl	$2, %r9d
	jle	.L10418
	testl	%r10d, %r10d
	jne	.L10435
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L10436
	cmpw	$46, %dx
	je	.L10436
	cmpw	$47, %dx
	je	.L10436
	cmpw	$49, %dx
	je	.L10436
	cmpw	$113, %dx
	je	.L10436
.L10435:
	movl	5984(%rsp), %eax
	testl	%eax, %eax
	jne	.L10418
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L10438
	cmpw	$46, %dx
	je	.L10438
	cmpw	$47, %dx
	je	.L10438
	cmpw	$49, %dx
	je	.L10438
	cmpw	$113, %dx
	je	.L10438
.L10418:
	cmpl	$8, 692(%rsp)
	movl	$8, %eax
	cmovl	692(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 692(%rsp)
	jle	.L10441
.L10463:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r13d, %r13d
	testl	%edx, %edx
	je	.L14546
.L10448:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r14d, mode_size(%rbx)
	cmovl	%edx, %r13d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L10448
.L14546:
	testl	%r13d, %r13d
	je	.L10441
	movslq	%r13d,%r14
	movq	%r14, %r11
	salq	$4, %r11
	addq	mov_optab(%rip), %r11
	movl	8(%r11), %edx
	cmpl	$210, %edx
	je	.L10450
	movl	mode_size(,%r14,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 692(%rsp)
	jl	.L10450
	movslq	%edx,%r9
	cmpl	%ebp, 6016(%rsp)
	leaq	5968(%rsp), %rbx
	movq	insn_gen_function(,%r9,8), %rdi
	movq	%rdi, 3144(%rsp)
	jl	.L10450
	movl	6024(%rsp), %edx
.L10461:
	testl	%edx, %edx
	je	.L10455
	subl	%ebp, 52(%rbx)
.L10455:
	movl	16(%rbx), %ecx
	testl	%ecx, %ecx
	je	.L10456
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15189:
	movl	40(%rbx), %r8d
	movq	%rax, 680(%rsp)
	testl	%r8d, %r8d
	je	.L10458
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L10459:
	movq	%rax, %rsi
	movq	680(%rsp), %rdi
	xorl	%eax, %eax
	call	*3144(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L10460
	addl	%ebp, 52(%rbx)
.L10460:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L10461
.L10450:
	movl	mode_size(,%r14,4), %r14d
	cmpl	$1, %r14d
	jg	.L10463
.L10441:
	movl	6016(%rsp), %r14d
	testl	%r14d, %r14d
	jmp	.L15396
.L10458:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L10459
.L10456:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15189
.L10438:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5976(%rsp)
	jmp	.L10418
.L10436:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6000(%rsp)
	jmp	.L10435
.L10416:
	movl	$1, %edx
	jmp	.L10415
.L10414:
	movl	$1, %ecx
	jmp	.L10413
.L10412:
	movl	$1, %ecx
	jmp	.L10411
.L10389:
	movq	696(%rsp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	696(%rsp), %r9
	movq	%rax, 8(%r9)
	movq	696(%rsp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	696(%rsp), %rdi
	movq	%rax, 16(%rdi)
	jmp	.L10385
.L15864:
	movq	%rdx, %rcx
	movzbl	2(%rdx), %edx
	cmpb	$16, %dl
	je	.L10383
	movq	8(%rcx), %rbp
	cmpw	$59, (%rbp)
	je	.L15869
.L10383:
	cmpl	$55, %eax
	jne	.L10386
	movq	696(%rsp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L10385
.L15869:
	movq	8(%rbp), %r11
	movq	%r11, 8(%rcx)
	cmpq	$0, 16(%rbp)
	je	.L10385
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	696(%rsp), %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L15188:
	movq	%rbx, 696(%rsp)
	jmp	.L10385
.L10382:
	movq	696(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L10390
	movq	8(%rcx), %rbx
	jmp	.L15188
.L10390:
	movq	696(%rsp), %r10
	movq	24(%r10), %rsi
	testq	%rsi, %rsi
	je	.L10391
	movq	%rsi, 696(%rsp)
	jmp	.L10385
.L10391:
	movq	696(%rsp), %rsi
	movq	8(%rsi), %rbp
	movzbl	2(%rbp), %edi
	call	gen_reg_rtx
	movq	696(%rsp), %r8
	movq	%rax, %rdi
	movq	8(%r8), %rsi
	movq	%rax, 24(%r8)
	call	gen_move_insn
	movq	696(%rsp), %rcx
	movq	%rax, %rdi
	movq	16(%rcx), %rsi
	call	emit_insn_before
	movq	696(%rsp), %r13
	movq	24(%r13), %rbx
	movq	%rbx, 696(%rsp)
	jmp	.L10385
.L10379:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L10375
.L15863:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L10373
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L15870
.L10373:
	cmpl	$55, %eax
	jne	.L10376
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L10375
.L15870:
	movq	8(%rbp), %rbx
	movq	%rbx, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L10375
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r13, 704(%rsp)
	jmp	.L10375
.L10372:
	cmpq	$0, 16(%r12)
	jne	.L10380
	movq	8(%r12), %rcx
	movq	%rcx, 704(%rsp)
	jmp	.L10375
.L10380:
	movq	24(%r12), %r8
	testq	%r8, %r8
	movq	%r8, 704(%rsp)
	jne	.L10375
	movq	8(%r12), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rbp
	movq	%rbp, 704(%rsp)
	jmp	.L10375
.L10369:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L10365
.L15862:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L10365
.L10362:
	cmpq	$0, 16(%r15)
	jne	.L10370
	movq	8(%r15), %rdx
	movq	%rdx, 712(%rsp)
	jmp	.L10365
.L10370:
	movq	24(%r15), %r13
	testq	%r13, %r13
	movq	%r13, 712(%rsp)
	jne	.L10365
	movq	8(%r15), %r14
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r10
	movq	%r10, 712(%rsp)
	jmp	.L10365
.L10351:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L10347
.L15840:
	jne	.L10348
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L10347
.L10344:
	cmpq	$0, 16(%r15)
	jne	.L10352
	movq	8(%r15), %r15
	jmp	.L10347
.L10352:
	movq	24(%r15), %rsi
	testq	%rsi, %rsi
	je	.L10353
	movq	%rsi, %r15
	jmp	.L10347
.L10353:
	movq	8(%r15), %rbp
	movzbl	2(%rbp), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L10347
.L15839:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	3160(%rsp), %rdi
	movzbl	2(%r15), %edx
	movq	%rax, %rsi
	jmp	.L15187
.L10323:
	movl	(%r15), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L15871
	movzbl	2(%r15), %edx
	movq	3160(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	%r15, %rsi
	call	expand_expr
	cmpw	$51, (%r15)
	movq	%rax, %r12
	je	.L15872
.L10341:
	movzwl	(%r12), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L10342
	cmpw	$46, %dx
	je	.L10342
	cmpw	$47, %dx
	je	.L10342
	cmpw	$49, %dx
	je	.L10342
	cmpw	$113, %dx
	jne	.L10288
	jmp	.L10342
.L15872:
	cmpl	$63, 8(%r15)
	jle	.L10288
	jmp	.L10341
.L15871:
	movq	3160(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	8(%r15), %rdi
	movzbl	3(%r15), %edx
	movq	%rax, %r12
	movq	%rax, %rsi
	xorl	%eax, %eax
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	jmp	.L10287
.L10332:
	movl	$1, %ebx
	jmp	.L10326
.L10324:
	xorl	%ebx, %ebx
	jmp	.L10326
.L10330:
	movq	8(%r15), %rdi
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L10332
	movq	16(%r15), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L10326
	jmp	.L10332
.L15838:
	movzbl	2(%r15), %eax
	cmpb	$16, %al
	je	.L10316
	movl	cse_not_expected(%rip), %r14d
	movq	3160(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	%al, %edx
	testl	%r14d, %r14d
	cmove	%r15, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	call	expand_expr
	movq	%rax, %r12
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L10342
	testb	%al, %al
	je	.L10342
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L15361
.L15837:
	cmpb	$16, 2(%r15)
	jne	.L10289
	call	gen_label_rtx
	movq	%rax, %r13
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r14
	testq	%rbx, %rbx
	jne	.L10293
.L14533:
	movzwl	(%r15), %eax
	movq	%r15, %r12
	cmpl	$59, %eax
	je	.L10295
	cmpl	$55, %eax
	je	.L15873
.L10299:
	cmpl	$63, %eax
	je	.L10302
	cmpl	$66, %eax
	je	.L10302
.L10298:
	movq	3160(%rsp), %r15
	xorl	%eax, %eax
	movq	%r13, %rsi
	incl	inhibit_defer_pop(%rip)
	movq	32(%r15), %rdi
	call	jumpifnot
	movq	40(%r15), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movl	%ebp, %edx
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L10308
.L14535:
	movq	%r14, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r13, %rdi
	call	emit_label
	xorl	%eax, %eax
	movl	%ebp, %edx
	movq	3160(%rsp), %r13
	movq	%r12, %rsi
	movq	48(%r13), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L10313
.L14537:
	movq	%r14, %rdi
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L10287
.L10313:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r10
	movq	%rax, 16(%rbx)
	testq	%r10, %r10
	movq	%r10, pending_chain(%rip)
	movq	%r10, %rbx
	jne	.L10313
	jmp	.L14537
.L10308:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdx
	movq	%rax, 16(%rbx)
	testq	%rdx, %rdx
	movq	%rdx, pending_chain(%rip)
	movq	%rdx, %rbx
	jne	.L10308
	jmp	.L14535
.L10302:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L10298
.L15873:
	jne	.L10299
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L10298
.L10295:
	cmpq	$0, 16(%r15)
	jne	.L10303
	movq	8(%r15), %r12
	jmp	.L10298
.L10303:
	movq	24(%r15), %rax
	testq	%rax, %rax
	je	.L10304
	movq	%rax, %r12
	jmp	.L10298
.L10304:
	movq	8(%r15), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	%rax, 24(%r12)
	movq	%rax, %rdi
	movq	8(%r15), %rsi
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r12
	jmp	.L10298
.L10293:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdi
	movq	%rax, 16(%rbx)
	testq	%rdi, %rdi
	movq	%rdi, pending_chain(%rip)
	movq	%rdi, %rbx
	jne	.L10293
	jmp	.L14533
.L15836:
	movq	32(%rdx), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L10285
.L14531:
	movq	3160(%rsp), %r11
	movq	%r15, %rsi
	movl	%ebp, %edx
	xorl	%eax, %eax
	movq	40(%r11), %rdi
	call	store_expr
	movq	%rax, %r12
	jmp	.L10287
.L10285:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rsi
	movq	%rax, 16(%rbx)
	testq	%rsi, %rsi
	movq	%rsi, pending_chain(%rip)
	movq	%rsi, %rbx
	jne	.L10285
	jmp	.L14531
.L15835:
	movq	16(%rdi), %rcx
	cmpw	$46, (%rcx)
	jne	.L10278
	movq	8(%rdi), %rax
	cmpq	virtual_incoming_args_rtx(%rip), %rax
	je	.L10277
	cmpq	virtual_stack_vars_rtx(%rip), %rax
	jne	.L10278
	jmp	.L10277
.L10270:
	movq	3160(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movl	%r15d, %r9d
	movl	%r13d, %ecx
	movl	3152(%rsp), %r11d
	movq	%rbx, %rdi
	movq	%rax, %r8
	movq	%rax, %rbp
	movl	%r12d, %esi
	movl	%r14d, %edx
	xorl	%eax, %eax
	movl	%r11d, (%rsp)
	call	store_bit_field
	movl	732(%rsp), %edi
	testl	%edi, %edi
	je	.L10272
	movl	728(%rsp), %r9d
	testl	%r9d, %r9d
	je	.L10273
	movl	(%rbx), %eax
	andl	$134283263, %eax
	cmpl	$134217783, %eax
	je	.L10273
	movl	3156(%rsp), %r14d
	testl	%r14d, %r14d
	je	.L10274
	movl	728(%rsp), %edx
	xorl	%esi, %esi
	movl	$46, %edi
	xorl	%eax, %eax
	call	gen_rtx
	xorl	%edx, %edx
	movq	%rbp, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	expand_and
.L15193:
	movq	%rax, %rbx
	jmp	.L10268
.L10274:
	movzbl	2(%rbp), %r15d
	testl	%r15d, %r15d
	cmove	732(%rsp), %r15d
	xorl	%esi, %esi
	movslq	%r15d,%rbx
	movl	mode_size(,%rbx,4), %edi
	sall	$3, %edi
	subl	%r12d, %edi
	call	build_int_2_wide
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	%rax, %r13
	movl	%r15d, %esi
	movq	%rbp, %rdx
	movq	%rax, %rcx
	movl	$77, %edi
	xorl	%eax, %eax
	call	expand_shift
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movl	$78, %edi
	movl	%r15d, %esi
	movq	%r13, %rcx
	xorl	%eax, %eax
	call	expand_shift
	jmp	.L15193
.L10273:
	movl	3152(%rsp), %edx
	movl	3156(%rsp), %ecx
	movq	%rbx, %rdi
	movl	732(%rsp), %r9d
	movl	%r12d, %esi
	xorl	%r8d, %r8d
	xorl	%eax, %eax
	movl	$0, (%rsp)
	movl	%r15d, 8(%rsp)
	movl	%edx, 16(%rsp)
	movl	%r14d, %edx
	call	extract_bit_field
	jmp	.L15193
.L10272:
	movq	const0_rtx(%rip), %rbx
	jmp	.L10268
.L15834:
	movzwl	(%rbx), %eax
	cmpw	$51, %ax
	je	.L10266
	cmpw	$53, %ax
	jne	.L10265
.L10266:
	movzbl	2(%rbx), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbp
	movl	mode_size(,%rbp,4), %esi
	call	assign_stack_temp
	movq	%rax, %rdi
	movq	%rax, %rbp
	call	copy_rtx
	movb	$16, 2(%rax)
	movq	%rax, %r13
	movzbq	2(%rbx), %rcx
	movl	mode_size(,%rcx,4), %eax
	sall	$3, %eax
	cmpl	%eax, %r12d
	je	.L10267
	movq	%rbp, %rdi
	movq	%rbx, %rsi
	call	emit_move_insn
.L10267:
	movl	3152(%rsp), %r8d
	movq	%r13, %rdi
	movl	%r12d, %esi
	movl	%r14d, %edx
	movl	$16, %ecx
	xorl	%r9d, %r9d
	xorl	%eax, %eax
	movl	$0, (%rsp)
	movl	%r15d, 8(%rsp)
	movl	%r8d, 16(%rsp)
	movq	3160(%rsp), %r8
	call	store_field
	movq	%rbp, %rsi
	movq	%rbx, %rdi
	call	emit_move_insn
	jmp	.L10268
.L10262:
	movl	$0, 732(%rsp)
	jmp	.L10263
.L15833:
	orb	$8, 3(%rbx)
	jmp	.L10260
.L15832:
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	cmpw	$55, (%rbx)
	movq	%rax, %rsi
	jne	.L15283
	movl	$4, %edi
	call	force_reg
	movq	8(%rbx), %rdx
	movl	$4, %esi
	movq	%rax, %rcx
	movl	$63, %edi
	xorl	%eax, %eax
	call	gen_rtx
	xorl	%esi, %esi
	movq	%rbx, %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	movq	%rax, %rbx
	jmp	.L10258
.L15831:
	movq	%rbp, %rdi
	call	stabilize_reference
	movq	%rax, %rbp
	jmp	.L10257
.L15830:
	xorl	%edx, %edx
	xorl	%eax, %eax
	movl	$1, %esi
	call	mode_for_size
	movl	%eax, %r14d
	cmpl	$16, %eax
	cmove	%ebx, %r14d
	jmp	.L10254
.L15829:
	movq	40(%rbp), %rcx
	cmpb	$25, 16(%rcx)
	jne	.L10248
	movq	8(%rbp), %rbx
	movq	32(%rbx), %rax
	cmpb	$25, 16(%rax)
	jne	.L10248
	movl	24(%rax), %eax
	imull	24(%rcx), %eax
	jmp	.L15186
.L15824:
	movl	flag_volatile(%rip), %eax
	testl	%eax, %eax
	je	.L10231
	movl	$1, 5480(%rsp)
	movzbl	16(%rbp), %edx
	jmp	.L10231
.L10226:
	movl	24(%rcx), %eax
	movl	%eax, 5500(%rsp)
	jmp	.L10225
.L15823:
	movq	3176(%rsp), %rbx
	movzbl	17(%rbx), %r8d
	movq	40(%rbx), %rcx
	shrb	$6, %r8b
	movl	%r8d, %r10d
	andl	$1, %r10d
	movl	%r10d, 3156(%rsp)
	jmp	.L10222
.L15822:
	movq	40(%rbp), %rax
	testb	$16, 53(%rax)
	movq	40(%rax), %rcx
	jne	.L10221
	movzbl	52(%rax), %r14d
.L10221:
	movzbl	17(%rax), %r9d
	shrb	$6, %r9b
	movl	%r9d, %edx
	andl	$1, %edx
	movl	%edx, 3156(%rsp)
	jmp	.L10222
.L15779:
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	jmp	.L10217
.L15778:
	movq	integer_one_node(%rip), %rsi
	jmp	.L10215
	.p2align 6,,7
.L8233:
	movq	32(%r15), %r11
	xorl	%edi, %edi
	cmpl	$0, 5408(%rsp)
	sete	%dil
	movq	%r11, 3664(%rsp)
	movq	40(%r15), %r15
	movq	$0, 1088(%rsp)
	movq	%r15, 3656(%rsp)
	movq	8(%r11), %rax
	movq	$0, 56(%rsp)
	movl	%edi, 3644(%rsp)
	movq	%rax, 3648(%rsp)
	movzbl	16(%r11), %edx
	testb	%dl, %dl
	je	.L15874
	leal	-37(%rdx), %r12d
	cmpb	$1, %r12b
	jbe	.L8237
	cmpb	$42, %dl
	je	.L15875
.L8236:
	cmpq	$0, 56(%rsp)
	je	.L15876
.L8753:
	cmpb	$35, %dl
	je	.L15877
	movq	3656(%rsp), %r9
	movzbl	16(%r9), %eax
.L8754:
	cmpb	$44, %al
	movl	$0, 1308(%rsp)
	je	.L15878
	cmpb	$48, %al
	je	.L15879
.L8763:
	movl	3644(%rsp), %r13d
	testl	%r13d, %r13d
	je	.L8790
	movq	56(%rsp), %rdi
	cmpw	$55, (%rdi)
	je	.L15880
.L8790:
	movq	56(%rsp), %r11
	movzwl	(%r11), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L8798
	mov	%eax, %edi
	jmp	*.L8807(,%rdi,8)
	.section	.rodata
	.align 8
	.align 4
.L8807:
	.quad	.L8801
	.quad	.L8798
	.quad	.L8798
	.quad	.L8798
	.quad	.L8806
	.quad	.L8798
	.quad	.L8798
	.quad	.L8798
	.quad	.L8804
	.quad	.L8804
	.quad	.L8798
	.quad	.L8804
	.text
.L8801:
	movq	56(%rsp), %r12
	xorl	%eax, %eax
	movq	8(%r12), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L8800:
	testl	%ebx, %ebx
	je	.L8797
	movq	56(%rsp), %rbx
	movzbl	2(%rbx), %eax
	cmpb	$16, %al
	je	.L8809
	testb	%al, %al
	jne	.L15881
.L8809:
	movq	56(%rsp), %rbx
	movq	3656(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	2(%rbx), %edx
.L15159:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L15356:
	movq	%rax, %r12
.L8816:
	movl	$1, 1308(%rsp)
.L8762:
	cmpq	56(%rsp), %r12
	je	.L8817
	movq	3656(%rsp), %rdx
	cmpb	$0, 16(%rdx)
	je	.L8817
	movq	56(%rsp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$59, %eax
	je	.L8818
	cmpl	$55, %eax
	je	.L15882
.L8822:
	cmpl	$63, %eax
	je	.L8825
	cmpl	$66, %eax
	je	.L8825
.L8821:
	movq	56(%rsp), %rbx
	movzbl	2(%r12), %eax
	movzbl	2(%rbx), %ecx
	cmpb	%cl, %al
	je	.L8828
	testb	%al, %al
	je	.L8828
	movq	3656(%rsp), %rbp
	movl	1308(%rsp), %eax
	movq	8(%rbp), %rdx
	movzbl	17(%rdx), %r10d
	shrb	$6, %r10b
	movl	%r10d, %edx
	andl	$1, %edx
	testl	%eax, %eax
	je	.L8829
	movzbl	%cl, %edi
	movq	%r12, %rsi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%rbx, %rdi
	movq	%rax, %r12
.L15166:
	movq	%r12, %rsi
	call	emit_move_insn
.L8817:
	movl	1308(%rsp), %eax
	testl	%eax, %eax
	cmove	56(%rsp), %r12
.L8761:
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	preserve_temp_slots
	xorl	%eax, %eax
	call	free_temp_slots
	movq	%r12, 56(%rsp)
.L8235:
	movq	3648(%rsp), %r12
	cmpq	$0, 128(%r12)
	je	.L9209
	movq	3656(%rsp), %r13
	movzbl	16(%r13), %edx
	leal	-33(%rdx), %r8d
	cmpb	$1, %r8b
	jbe	.L9211
	cmpb	$50, %dl
	je	.L9211
	cmpb	$47, %dl
	je	.L9211
	cmpb	$37, %dl
	je	.L9211
	xorl	%eax, %eax
	cmpb	$42, %dl
	je	.L9211
.L9212:
	testl	%eax, %eax
	je	.L15883
.L9209:
	cmpq	$0, 1088(%rsp)
	je	.L581
.L10199:
	movq	1088(%rsp), %rbx
	xorl	%r13d, %r13d
	movq	32(%rbx), %r14
	movq	24(%rbx), %rsi
	movq	%rsi, 3416(%rsp)
	movzbl	16(%r14), %edx
	testb	%dl, %dl
	je	.L15884
	leal	-37(%rdx), %edi
	cmpb	$1, %dil
	jbe	.L9227
	cmpb	$42, %dl
	je	.L15885
.L9226:
	testq	%r13, %r13
	je	.L15886
.L9743:
	cmpb	$35, %dl
	je	.L15887
	movq	3416(%rsp), %r11
	movzbl	16(%r11), %eax
.L9744:
	cmpb	$44, %al
	movl	$0, 1084(%rsp)
	je	.L15888
	cmpb	$48, %al
	je	.L15889
.L9753:
	xorl	%ecx, %ecx
	testl	%ecx, %ecx
	je	.L9780
	cmpw	$55, (%r13)
	je	.L15890
.L9780:
	movzwl	(%r13), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L9788
	mov	%eax, %r14d
	jmp	*.L9797(,%r14,8)
	.section	.rodata
	.align 8
	.align 4
.L9797:
	.quad	.L9791
	.quad	.L9788
	.quad	.L9788
	.quad	.L9788
	.quad	.L9796
	.quad	.L9788
	.quad	.L9788
	.quad	.L9788
	.quad	.L9794
	.quad	.L9794
	.quad	.L9788
	.quad	.L9794
	.text
.L9791:
	movq	8(%r13), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %ebx
.L9790:
	testl	%ebx, %ebx
	je	.L9787
	movzbl	2(%r13), %eax
	cmpb	$16, %al
	je	.L9799
	testb	%al, %al
	jne	.L15891
.L9799:
	movzbl	2(%r13), %edx
	movq	3416(%rsp), %rdi
	xorl	%esi, %esi
.L15178:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L15359:
	movq	%rax, %r12
.L9806:
	movl	$1, 1084(%rsp)
.L9752:
	cmpq	%r13, %r12
	je	.L9807
	movq	3416(%rsp), %r11
	cmpb	$0, 16(%r11)
	je	.L9807
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L9808
	cmpl	$55, %eax
	je	.L15892
.L9812:
	cmpl	$63, %eax
	je	.L9815
	cmpl	$66, %eax
	je	.L9815
.L9811:
	movzbl	2(%r12), %eax
	movzbl	2(%r13), %ecx
	cmpb	%cl, %al
	je	.L9818
	testb	%al, %al
	je	.L9818
	movq	3416(%rsp), %rax
	movq	8(%rax), %r8
	movl	1084(%rsp), %eax
	movzbl	17(%r8), %r9d
	shrb	$6, %r9b
	movl	%r9d, %edx
	andl	$1, %edx
	testl	%eax, %eax
	je	.L9819
	movq	%r12, %rsi
	movzbl	%cl, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%rax, %r12
.L10074:
	movq	%r13, %rdi
	movq	%r12, %rsi
	call	emit_move_insn
.L9807:
	movl	1084(%rsp), %r10d
	testl	%r10d, %r10d
	cmove	%r13, %r12
.L9751:
	movq	%r12, %rdi
.L15184:
	xorl	%eax, %eax
	call	preserve_temp_slots
	xorl	%eax, %eax
	call	free_temp_slots
.L9225:
	movq	1088(%rsp), %r12
	movq	(%r12), %r13
	testq	%r13, %r13
	movq	%r13, 1088(%rsp)
	jne	.L10199
	jmp	.L581
.L9819:
	movq	%r13, %rdi
	movq	%r12, %rsi
	xorl	%eax, %eax
	call	convert_move
	jmp	.L9807
.L9818:
	cmpb	$16, %al
	jne	.L10074
	movq	3416(%rsp), %rdi
	cmpb	$28, 16(%rdi)
	je	.L15893
	cmpb	$16, %al
	jne	.L10074
	movq	3416(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, 984(%rsp)
	call	expr_size
	movq	3416(%rsp), %r8
	movq	%rax, %r14
	movq	8(%r8), %rdi
	movl	48(%rdi), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r13)
	movl	%eax, 980(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r13, 992(%rsp)
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L10077
	cmpl	$55, %eax
	je	.L15894
	cmpl	$63, %eax
	je	.L10084
	cmpl	$66, %eax
	je	.L10084
.L10080:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L10087
	cmpl	$55, %eax
	je	.L15895
.L10091:
	cmpl	$63, %eax
	je	.L10094
	cmpl	$66, %eax
	je	.L10094
.L10090:
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L10097
	cmpl	$55, %eax
	je	.L15896
.L10101:
	cmpl	$63, %eax
	je	.L10104
	cmpl	$66, %eax
	je	.L10104
.L10100:
	movq	992(%rsp), %rax
	cmpw	$55, (%rax)
	jne	.L15283
	movq	984(%rsp), %rcx
	cmpw	$55, (%rcx)
	jne	.L15283
	testq	%r14, %r14
	je	.L15283
	cmpw	$46, (%r14)
	je	.L15897
.L10110:
	movl	980(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 3208(%rsp)
	testl	%ebp, %ebp
	je	.L14529
.L10196:
	movslq	%ebp,%rax
	movq	%rax, 3200(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L10184
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L10188
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r14)
	ja	.L10184
.L10188:
	movslq	%edx,%r9
	leaq	(%r9,%r9,4), %r15
	movq	%r9, 3192(%rsp)
	salq	$4, %r15
	movq	insn_operand_predicate(%r15), %rdx
	testq	%rdx, %rdx
	jne	.L15898
.L10189:
	movq	insn_operand_predicate+8(%r15), %rdx
	testq	%rdx, %rdx
	jne	.L15899
.L10190:
	movq	insn_operand_predicate+24(%r15), %rdx
	testq	%rdx, %rdx
	je	.L10191
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	3208(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L10184
.L10191:
	call	get_last_insn
	movl	$1, %edx
	movq	%r14, %rsi
	movq	%rax, 3184(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r15), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15900
.L10192:
	movq	3192(%rsp), %r15
	movq	992(%rsp), %rdi
	xorl	%eax, %eax
	movq	984(%rsp), %rsi
	movq	%rbx, %rdx
	movq	3208(%rsp), %rcx
	call	*insn_gen_function(,%r15,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14972
	movq	3184(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L10184:
	movq	3200(%rsp), %r8
	movl	mode_wider_mode(,%r8,4), %ebp
	testl	%ebp, %ebp
	jne	.L10196
.L14529:
	movl	$4, %edi
	movq	%r14, %rsi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$3, %ecx
	xorl	%esi, %esi
	movq	984(%rsp), %rdx
	movq	memcpy_libfunc(%rip), %rdi
	movq	8(%rdx), %rbp
	xorl	%edx, %edx
	movl	$4, 24(%rsp)
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movq	992(%rsp), %rax
	movq	%rbp, (%rsp)
.L15183:
	movq	8(%rax), %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	call	emit_library_call
	jmp	.L9807
.L14972:
	call	emit_insn
	jmp	.L9807
	.p2align 6,,7
.L15900:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L10192
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L10192
	.p2align 6,,7
.L15899:
	xorl	%eax, %eax
	movq	984(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L10184
	jmp	.L10190
.L15898:
	xorl	%eax, %eax
	movq	992(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L10184
	jmp	.L10189
.L15897:
	movl	8(%r14), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 980(%rsp)
	movl	$9, %edi
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	980(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %r8d
.L10124:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14520
.L10120:
	movslq	%edx,%r15
	salq	$2, %r15
	cmpl	%edi, mode_size(%r15)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r15), %edx
	testl	%edx, %edx
	jne	.L10120
.L14520:
	testl	%ecx, %ecx
	je	.L10113
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L10122
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L10122
	movl	%r8d, %eax
	movl	%edx, %r8d
	xorl	%edx, %edx
	divl	%r8d
	addl	%eax, %r9d
	movl	%edx, %r8d
.L10122:
	movl	mode_size(,%rcx,4), %edi
	cmpl	$1, %edi
	jg	.L10124
.L10113:
	decl	%r9d
	jg	.L10110
	movq	992(%rsp), %r9
	movq	984(%rsp), %r11
	xorl	%ecx, %ecx
	movl	%r10d, %r14d
	movl	$9, %r15d
	movq	8(%r9), %rbx
	movq	8(%r11), %rdi
	movq	%r11, 6056(%rsp)
	movl	$0, 6084(%rsp)
	movq	%r9, 6032(%rsp)
	movq	%rbx, 6040(%rsp)
	movq	%rdi, 6064(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L10127
	cmpw	$88, %dx
	je	.L10127
	cmpw	$87, %dx
	je	.L10127
.L10126:
	movl	%ecx, 6048(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L10129
	cmpw	$88, %dx
	je	.L10129
	cmpw	$87, %dx
	je	.L10129
.L10128:
	movl	%ecx, 6072(%rsp)
	movl	$0, 6076(%rsp)
	movl	$0, 6052(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L10131
	cmpw	$87, %ax
	je	.L10131
.L10130:
	testl	%edx, %edx
	movl	%edx, 6088(%rsp)
	je	.L10132
	movl	%r10d, 6084(%rsp)
.L10132:
	movl	6072(%rsp), %eax
	movl	%r10d, 6080(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L10134
	movl	6048(%rsp), %eax
	testl	%eax, %eax
	jne	.L10133
.L10134:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 980(%rsp)
	movq	mov_optab(%rip), %r11
	cmovl	980(%rsp), %ebp
.L10148:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14523
.L10144:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L10144
.L14523:
	testl	%ecx, %ecx
	je	.L10137
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L10146
	movl	mode_size(,%rcx,4), %eax
	movl	$8, %r8d
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r8d, %eax
	cmpl	%eax, %ebp
	jl	.L10146
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L10146:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L10148
.L10137:
	cmpl	$2, %r9d
	jle	.L10133
	testl	%r10d, %r10d
	jne	.L10150
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L10151
	cmpw	$46, %dx
	je	.L10151
	cmpw	$47, %dx
	je	.L10151
	cmpw	$49, %dx
	je	.L10151
	cmpw	$113, %dx
	je	.L10151
.L10150:
	movl	6048(%rsp), %eax
	testl	%eax, %eax
	jne	.L10133
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L10153
	cmpw	$46, %dx
	je	.L10153
	cmpw	$47, %dx
	je	.L10153
	cmpw	$49, %dx
	je	.L10153
	cmpw	$113, %dx
	je	.L10153
.L10133:
	cmpl	$8, 980(%rsp)
	movl	$8, %eax
	cmovl	980(%rsp), %eax
	cmpl	$1, %r15d
	movl	%eax, 980(%rsp)
	jle	.L10156
.L10178:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r14d, %r14d
	testl	%edx, %edx
	je	.L14526
.L10163:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r15d, mode_size(%rbx)
	cmovl	%edx, %r14d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L10163
.L14526:
	testl	%r14d, %r14d
	je	.L10156
	movslq	%r14d,%r15
	movq	%r15, %rdi
	salq	$4, %rdi
	addq	mov_optab(%rip), %rdi
	movl	8(%rdi), %edx
	cmpl	$210, %edx
	je	.L10165
	movl	mode_size(,%r15,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 980(%rsp)
	jl	.L10165
	movslq	%edx,%r11
	cmpl	%ebp, 6080(%rsp)
	leaq	6032(%rsp), %rbx
	movq	insn_gen_function(,%r11,8), %rcx
	movq	%rcx, 3216(%rsp)
	jl	.L10165
	movl	6088(%rsp), %edx
.L10176:
	testl	%edx, %edx
	je	.L10170
	subl	%ebp, 52(%rbx)
.L10170:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L10171
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r14d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15182:
	movq	%rax, 968(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L10173
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r14d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L10174:
	movq	%rax, %rsi
	movq	968(%rsp), %rdi
	xorl	%eax, %eax
	call	*3216(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L10175
	addl	%ebp, 52(%rbx)
.L10175:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L10176
.L10165:
	movl	mode_size(,%r15,4), %r15d
	cmpl	$1, %r15d
	jg	.L10178
.L10156:
	movl	6080(%rsp), %eax
	testl	%eax, %eax
.L15395:
	je	.L9807
	jmp	.L15283
	.p2align 6,,7
.L10173:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r14d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L10174
.L10171:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r14d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15182
.L10153:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6040(%rsp)
	jmp	.L10133
.L10151:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6064(%rsp)
	jmp	.L10150
.L10131:
	movl	$1, %edx
	jmp	.L10130
.L10129:
	movl	$1, %ecx
	jmp	.L10128
.L10127:
	movl	$1, %ecx
	jmp	.L10126
.L10104:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L10100
.L15896:
	movzbl	2(%r14), %edx
	cmpb	$16, %dl
	je	.L10098
	movq	8(%r14), %rbp
	cmpw	$59, (%rbp)
	je	.L15901
.L10098:
	cmpl	$55, %eax
	jne	.L10101
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L10100
.L15901:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r14)
	cmpq	$0, 16(%rbp)
	je	.L10100
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, %r15
	call	gen_move_insn
	movq	%r15, %r14
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L10100
	.p2align 6,,7
.L10097:
	cmpq	$0, 16(%r14)
	jne	.L10105
	movq	8(%r14), %r14
	jmp	.L10100
.L10105:
	movq	24(%r14), %rsi
	testq	%rsi, %rsi
	je	.L10106
	movq	%rsi, %r14
	jmp	.L10100
.L10106:
	movq	8(%r14), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L10100
.L10094:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L10090
.L15895:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L10088
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L15902
.L10088:
	cmpl	$55, %eax
	jne	.L10091
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L10090
.L15902:
	movq	8(%rbp), %rsi
	movq	%rsi, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L10090
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r15
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r15, 984(%rsp)
	jmp	.L10090
	.p2align 6,,7
.L10087:
	cmpq	$0, 16(%r12)
	jne	.L10095
	movq	8(%r12), %rbp
	movq	%rbp, 984(%rsp)
	jmp	.L10090
.L10095:
	movq	24(%r12), %r11
	testq	%r11, %r11
	movq	%r11, 984(%rsp)
	jne	.L10090
	movq	8(%r12), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rbx
	movq	%rbx, 984(%rsp)
	jmp	.L10090
.L10084:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L10080
.L15894:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L10080
	.p2align 6,,7
.L10077:
	cmpq	$0, 16(%r13)
	jne	.L10085
	movq	8(%r13), %r9
	movq	%r9, 992(%rsp)
	jmp	.L10080
.L10085:
	movq	24(%r13), %rcx
	testq	%rcx, %rcx
	movq	%rcx, 992(%rsp)
	jne	.L10080
	movq	8(%r13), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rdx
	movq	%rdx, 992(%rsp)
	jmp	.L10080
	.p2align 6,,7
.L15893:
	xorl	%eax, %eax
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, 1056(%rsp)
	je	.L15903
.L9823:
	movl	$8, %edi
	call	size_int
	movq	3416(%rsp), %rdi
	movq	%rax, %rdx
	movq	8(%rdi), %r11
	movl	$57, %edi
	movq	32(%r11), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	3416(%rsp), %rbx
	movq	%rax, %r15
	movl	32(%rbx), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%r15, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	expand_expr
	movq	$0, 1000(%rsp)
	movq	%rax, 1024(%rsp)
	movq	%rax, %r15
	movq	3416(%rsp), %rax
	movq	8(%rax), %rsi
	movl	48(%rsi), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r13)
	movl	%eax, 1020(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r13, 1032(%rsp)
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L9949
	cmpl	$55, %eax
	je	.L15904
	cmpl	$63, %eax
	je	.L9956
	cmpl	$66, %eax
	je	.L9956
.L9952:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L9959
	cmpl	$55, %eax
	je	.L15905
.L9963:
	cmpl	$63, %eax
	je	.L9966
	cmpl	$66, %eax
	je	.L9966
.L9962:
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L9969
	cmpl	$55, %eax
	je	.L15906
.L9973:
	cmpl	$63, %eax
	je	.L9976
	cmpl	$66, %eax
	je	.L9976
.L9972:
	movq	1032(%rsp), %rdi
	cmpw	$55, (%rdi)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 1024(%rsp)
	je	.L15283
	movq	1024(%rsp), %rsi
	cmpw	$46, (%rsi)
	je	.L15907
.L9982:
	movl	1020(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 3248(%rsp)
	testl	%ebp, %ebp
	je	.L14517
.L10068:
	movslq	%ebp,%rdx
	movq	%rdx, %rax
	movq	%rdx, 3240(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L10056
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L10060
	movq	1024(%rsp), %r14
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r14)
	ja	.L10056
.L10060:
	movslq	%edx,%r10
	leaq	(%r10,%r10,4), %r14
	movq	%r10, 3232(%rsp)
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15908
.L10061:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15909
.L10062:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L10063
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	3248(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L10056
.L10063:
	call	get_last_insn
	movl	$1, %edx
	movq	1024(%rsp), %rsi
	movq	%rax, 3224(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15910
.L10064:
	movq	3232(%rsp), %rbp
	movq	1032(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	3248(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14971
	movq	3224(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L10056:
	movq	3240(%rsp), %rsi
	movl	mode_wider_mode(,%rsi,4), %ebp
	testl	%ebp, %ebp
	jne	.L10068
.L14517:
	movq	1024(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movq	1032(%rsp), %r11
	movq	8(%r12), %rbx
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	movl	$3, %ecx
	xorl	%eax, %eax
	movq	%rbx, (%rsp)
	movq	8(%r11), %r8
	call	emit_library_call
.L10066:
	cmpw	$46, (%r15)
	je	.L15911
	movq	8(%r13), %rsi
	movl	$4, %edi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movl	$4, %edi
	movq	%r15, %rcx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	1056(%rsp), %rdx
	movl	$4, %edi
	movq	%r15, %rcx
	movq	%rax, %r12
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 1000(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L10070:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L10071
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%r12, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L10071:
	cmpq	$0, 1000(%rsp)
	je	.L9807
	movq	1000(%rsp), %rdi
	call	emit_label
	jmp	.L9807
.L15911:
	movq	3416(%rsp), %rax
	movq	8(%r13), %rdi
	movl	32(%rax), %esi
	call	plus_constant_wide
	movq	1056(%rsp), %rdi
	movq	3416(%rsp), %r15
	movq	%rax, %r12
	movl	32(%r15), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L10070
.L14971:
	call	emit_insn
	jmp	.L10066
	.p2align 6,,7
.L15910:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L10064
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L10064
	.p2align 6,,7
.L15909:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L10056
	jmp	.L10062
.L15908:
	xorl	%eax, %eax
	movq	1032(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L10056
	jmp	.L10061
.L15907:
	movl	8(%rsi), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1020(%rsp)
	movl	$9, %edi
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1020(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %r8d
.L9996:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14508
.L9992:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%edi, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L9992
.L14508:
	testl	%ecx, %ecx
	je	.L9985
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L9994
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L9994
	movl	%r8d, %eax
	movl	%edx, %r8d
	xorl	%edx, %edx
	divl	%r8d
	addl	%eax, %r9d
	movl	%edx, %r8d
.L9994:
	movl	mode_size(,%rcx,4), %edi
	cmpl	$1, %edi
	jg	.L9996
.L9985:
	decl	%r9d
	jg	.L9982
	movq	1032(%rsp), %rcx
	movq	8(%r12), %rdi
	movl	%r10d, %r14d
	movq	8(%rcx), %rbx
	movq	%r12, 6056(%rsp)
	movq	%rcx, 6032(%rsp)
	movl	$0, 6084(%rsp)
	movq	%rdi, 6064(%rsp)
	xorl	%ecx, %ecx
	movl	$9, 1016(%rsp)
	movq	%rbx, 6040(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L9999
	cmpw	$88, %dx
	je	.L9999
	cmpw	$87, %dx
	je	.L9999
.L9998:
	movl	%ecx, 6048(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L10001
	cmpw	$88, %dx
	je	.L10001
	cmpw	$87, %dx
	je	.L10001
.L10000:
	movl	%ecx, 6072(%rsp)
	movl	$0, 6076(%rsp)
	movl	$0, 6052(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L10003
	cmpw	$87, %ax
	je	.L10003
.L10002:
	testl	%edx, %edx
	movl	%edx, 6088(%rsp)
	je	.L10004
	movl	%r10d, 6084(%rsp)
.L10004:
	movl	6072(%rsp), %eax
	movl	%r10d, 6080(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L10006
	movl	6048(%rsp), %ebp
	testl	%ebp, %ebp
	jne	.L10005
.L10006:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1020(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1020(%rsp), %ebp
.L10020:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14511
.L10016:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L10016
.L14511:
	testl	%ecx, %ecx
	je	.L10009
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L10018
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L10018
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L10018:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L10020
.L10009:
	cmpl	$2, %r9d
	jle	.L10005
	testl	%r10d, %r10d
	jne	.L10022
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L10023
	cmpw	$46, %dx
	je	.L10023
	cmpw	$47, %dx
	je	.L10023
	cmpw	$49, %dx
	je	.L10023
	cmpw	$113, %dx
	je	.L10023
.L10022:
	movl	6048(%rsp), %esi
	testl	%esi, %esi
	jne	.L10005
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L10025
	cmpw	$46, %dx
	je	.L10025
	cmpw	$47, %dx
	je	.L10025
	cmpw	$49, %dx
	je	.L10025
	cmpw	$113, %dx
	je	.L10025
.L10005:
	cmpl	$8, 1020(%rsp)
	movl	$8, %eax
	cmovl	1020(%rsp), %eax
	cmpl	$1, 1016(%rsp)
	movl	%eax, 1020(%rsp)
	jle	.L10028
.L10050:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14514
.L10035:
	movslq	%edx,%rbx
	movl	1016(%rsp), %eax
	salq	$2, %rbx
	cmpl	%eax, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L10035
.L14514:
	testl	%r12d, %r12d
	je	.L10028
	movslq	%r12d,%r14
	movq	%r14, %rdi
	salq	$4, %rdi
	addq	mov_optab(%rip), %rdi
	movl	8(%rdi), %edx
	cmpl	$210, %edx
	je	.L10037
	movl	mode_size(,%r14,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1020(%rsp)
	jl	.L10037
	movslq	%edx,%rcx
	cmpl	%ebp, 6080(%rsp)
	leaq	6032(%rsp), %rbx
	movq	insn_gen_function(,%rcx,8), %r8
	movq	%r8, 3256(%rsp)
	jl	.L10037
	movl	6088(%rsp), %edx
.L10048:
	testl	%edx, %edx
	je	.L10042
	subl	%ebp, 52(%rbx)
.L10042:
	movl	16(%rbx), %r9d
	testl	%r9d, %r9d
	je	.L10043
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15181:
	movq	%rax, 1008(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L10045
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L10046:
	movq	%rax, %rsi
	movq	1008(%rsp), %rdi
	xorl	%eax, %eax
	call	*3256(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L10047
	addl	%ebp, 52(%rbx)
.L10047:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L10048
.L10037:
	movl	mode_size(,%r14,4), %r12d
	movl	%r12d, 1016(%rsp)
	decl	%r12d
	jg	.L10050
.L10028:
	movl	6080(%rsp), %eax
	testl	%eax, %eax
	je	.L10066
	jmp	.L15283
	.p2align 6,,7
.L10045:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L10046
.L10043:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15181
.L10025:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6040(%rsp)
	jmp	.L10005
.L10023:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6064(%rsp)
	jmp	.L10022
.L10003:
	movl	$1, %edx
	jmp	.L10002
.L10001:
	movl	$1, %ecx
	jmp	.L10000
.L9999:
	movl	$1, %ecx
	jmp	.L9998
.L9976:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L9972
.L15906:
	movzbl	2(%r15), %edx
	cmpb	$16, %dl
	je	.L9970
	movq	8(%r15), %rbp
	cmpw	$59, (%rbp)
	je	.L15912
.L9970:
	cmpl	$55, %eax
	jne	.L9973
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L9972
.L15912:
	movq	8(%rbp), %r10
	movq	%r10, 8(%r15)
	cmpq	$0, 16(%rbp)
	je	.L9972
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r15, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r14, 1024(%rsp)
	jmp	.L9972
.L9969:
	cmpq	$0, 16(%r15)
	jne	.L9977
	movq	8(%r15), %rsi
	movq	%rsi, 1024(%rsp)
	jmp	.L9972
.L9977:
	movq	24(%r15), %rax
	testq	%rax, %rax
	movq	%rax, 1024(%rsp)
	jne	.L9972
	movq	8(%r15), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %rbx
	movq	%rbx, 1024(%rsp)
	jmp	.L9972
.L9966:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L9962
.L15905:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L9960
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L15913
.L9960:
	cmpl	$55, %eax
	jne	.L9963
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L9962
.L15913:
	movq	8(%rbp), %r14
	movq	%r14, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L9962
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L9962
.L9959:
	cmpq	$0, 16(%r12)
	jne	.L9967
	movq	8(%r12), %r12
	jmp	.L9962
.L9967:
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	je	.L9968
	movq	%rdi, %r12
	jmp	.L9962
.L9968:
	movq	8(%r12), %rbp
	movzbl	2(%rbp), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L9962
.L9956:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L9952
.L15904:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L9952
.L9949:
	cmpq	$0, 16(%r13)
	jne	.L9957
	movq	8(%r13), %rdx
	movq	%rdx, 1032(%rsp)
	jmp	.L9952
.L9957:
	movq	24(%r13), %rcx
	testq	%rcx, %rcx
	movq	%rcx, 1032(%rsp)
	jne	.L9952
	movq	8(%r13), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r9
	movq	%r9, 1032(%rsp)
	jmp	.L9952
	.p2align 6,,7
.L15903:
	movq	3416(%rsp), %r8
	movq	1056(%rsp), %r10
	movl	32(%r8), %eax
	cmpl	%eax, 8(%r10)
	jge	.L9823
	movq	%r12, 1064(%rsp)
	movq	8(%r8), %rdx
	movl	48(%rdx), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r13)
	movl	%eax, 1052(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r13, 1072(%rsp)
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L9826
	cmpl	$55, %eax
	je	.L15914
	cmpl	$63, %eax
	je	.L9833
	cmpl	$66, %eax
	je	.L9833
.L9829:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L9836
	cmpl	$55, %eax
	je	.L15915
.L9840:
	cmpl	$63, %eax
	je	.L9843
	cmpl	$66, %eax
	je	.L9843
.L9839:
	movq	1056(%rsp), %r8
	movzwl	(%r8), %eax
	cmpl	$59, %eax
	je	.L9846
	cmpl	$55, %eax
	je	.L15916
.L9850:
	cmpl	$63, %eax
	je	.L9853
	cmpl	$66, %eax
	je	.L9853
.L9849:
	movq	1072(%rsp), %r8
	cmpw	$55, (%r8)
	jne	.L15283
	movq	1064(%rsp), %r10
	cmpw	$55, (%r10)
	jne	.L15283
	cmpq	$0, 1056(%rsp)
	je	.L15283
	movq	1056(%rsp), %rax
	cmpw	$46, (%rax)
	je	.L15917
.L9859:
	movl	1052(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 3280(%rsp)
	testl	%ebp, %ebp
	je	.L14505
.L9945:
	movslq	%ebp,%rax
	movq	%rax, 3272(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L9933
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L9937
	movq	1056(%rsp), %r8
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r8)
	ja	.L9933
.L9937:
	movslq	%edx,%r15
	leaq	(%r15,%r15,4), %r14
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15918
.L9938:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15919
.L9939:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L9940
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	3280(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L9933
.L9940:
	call	get_last_insn
	movl	$1, %edx
	movq	1056(%rsp), %rsi
	movq	%rax, 3264(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15920
.L9941:
	movq	1072(%rsp), %rdi
	xorl	%eax, %eax
	movq	1064(%rsp), %rsi
	movq	%rbx, %rdx
	movq	3280(%rsp), %rcx
	call	*insn_gen_function(,%r15,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14972
	movq	3264(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L9933:
	movq	3272(%rsp), %r14
	movl	mode_wider_mode(,%r14,4), %ebp
	testl	%ebp, %ebp
	jne	.L9945
.L14505:
	movq	1056(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$3, %ecx
	xorl	%edx, %edx
	movq	1064(%rsp), %r10
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	8(%r10), %rbp
	movl	$4, 24(%rsp)
	movq	%rax, 16(%rsp)
	movq	1072(%rsp), %rax
	movl	$4, 8(%rsp)
	movq	%rbp, (%rsp)
	jmp	.L15183
.L15920:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L9941
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L9941
.L15919:
	xorl	%eax, %eax
	movq	1064(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L9933
	jmp	.L9939
	.p2align 6,,7
.L15918:
	xorl	%eax, %eax
	movq	1072(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L9933
	jmp	.L9938
.L15917:
	movl	8(%rax), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1052(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1052(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L9873:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14496
.L9869:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L9869
.L14496:
	testl	%ecx, %ecx
	je	.L9862
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L9871
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L9871
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L9871:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L9873
.L9862:
	decl	%r9d
	jg	.L9859
	movq	1072(%rsp), %rcx
	movq	1064(%rsp), %r11
	movl	%r10d, %r14d
	movl	$9, %r15d
	movq	8(%rcx), %rbx
	movq	8(%r11), %rdi
	movq	%r11, 5992(%rsp)
	movq	%rcx, 5968(%rsp)
	movl	$0, 6020(%rsp)
	xorl	%ecx, %ecx
	movq	%rbx, 5976(%rsp)
	movq	%rdi, 6000(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L9876
	cmpw	$88, %dx
	je	.L9876
	cmpw	$87, %dx
	je	.L9876
.L9875:
	movl	%ecx, 5984(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L9878
	cmpw	$88, %dx
	je	.L9878
	cmpw	$87, %dx
	je	.L9878
.L9877:
	movl	%ecx, 6008(%rsp)
	movl	$0, 6012(%rsp)
	movl	$0, 5988(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L9880
	cmpw	$87, %ax
	je	.L9880
.L9879:
	testl	%edx, %edx
	movl	%edx, 6024(%rsp)
	je	.L9881
	movl	%r10d, 6020(%rsp)
.L9881:
	movl	6008(%rsp), %eax
	movl	%r10d, 6016(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L9883
	movl	5984(%rsp), %eax
	testl	%eax, %eax
	jne	.L9882
.L9883:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1052(%rsp)
	movq	mov_optab(%rip), %r11
	cmovl	1052(%rsp), %ebp
.L9897:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14499
.L9893:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L9893
.L14499:
	testl	%ecx, %ecx
	je	.L9886
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L9895
	movl	mode_size(,%rcx,4), %eax
	movl	$8, %r8d
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r8d, %eax
	cmpl	%eax, %ebp
	jl	.L9895
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L9895:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L9897
.L9886:
	cmpl	$2, %r9d
	jle	.L9882
	testl	%r10d, %r10d
	jne	.L9899
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L9900
	cmpw	$46, %dx
	je	.L9900
	cmpw	$47, %dx
	je	.L9900
	cmpw	$49, %dx
	je	.L9900
	cmpw	$113, %dx
	je	.L9900
.L9899:
	movl	5984(%rsp), %eax
	testl	%eax, %eax
	jne	.L9882
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L9902
	cmpw	$46, %dx
	je	.L9902
	cmpw	$47, %dx
	je	.L9902
	cmpw	$49, %dx
	je	.L9902
	cmpw	$113, %dx
	je	.L9902
.L9882:
	cmpl	$8, 1052(%rsp)
	movl	$8, %eax
	cmovl	1052(%rsp), %eax
	cmpl	$1, %r15d
	movl	%eax, 1052(%rsp)
	jle	.L9905
.L9927:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r14d, %r14d
	testl	%edx, %edx
	je	.L14502
.L9912:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r15d, mode_size(%rbx)
	cmovl	%edx, %r14d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L9912
.L14502:
	testl	%r14d, %r14d
	je	.L9905
	movslq	%r14d,%r15
	movq	%r15, %rdi
	salq	$4, %rdi
	addq	mov_optab(%rip), %rdi
	movl	8(%rdi), %edx
	cmpl	$210, %edx
	je	.L9914
	movl	mode_size(,%r15,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1052(%rsp)
	jl	.L9914
	movslq	%edx,%r11
	cmpl	%ebp, 6016(%rsp)
	leaq	5968(%rsp), %rbx
	movq	insn_gen_function(,%r11,8), %rdx
	movq	%rdx, 3288(%rsp)
	jl	.L9914
	movl	6024(%rsp), %edx
.L9925:
	testl	%edx, %edx
	je	.L9919
	subl	%ebp, 52(%rbx)
.L9919:
	movl	16(%rbx), %ecx
	testl	%ecx, %ecx
	je	.L9920
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r14d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15180:
	movl	40(%rbx), %r9d
	movq	%rax, 1040(%rsp)
	testl	%r9d, %r9d
	je	.L9922
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r14d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L9923:
	movq	%rax, %rsi
	movq	1040(%rsp), %rdi
	xorl	%eax, %eax
	call	*3288(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L9924
	addl	%ebp, 52(%rbx)
.L9924:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L9925
.L9914:
	movl	mode_size(,%r15,4), %r15d
	cmpl	$1, %r15d
	jg	.L9927
.L9905:
	movl	6016(%rsp), %r15d
	testl	%r15d, %r15d
	jmp	.L15395
.L9922:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r14d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L9923
.L9920:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r14d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15180
.L9902:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5976(%rsp)
	jmp	.L9882
.L9900:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6000(%rsp)
	jmp	.L9899
.L9880:
	movl	$1, %edx
	jmp	.L9879
.L9878:
	movl	$1, %ecx
	jmp	.L9877
.L9876:
	movl	$1, %ecx
	jmp	.L9875
.L9853:
	movq	1056(%rsp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	1056(%rsp), %rbp
	movq	16(%rbp), %rdi
	movq	%rax, 8(%rbp)
	call	protect_from_queue
	movq	%rax, 16(%rbp)
	jmp	.L9849
.L15916:
	movzbl	2(%r8), %edx
	cmpb	$16, %dl
	je	.L9847
	movq	8(%r8), %rbp
	cmpw	$59, (%rbp)
	je	.L15921
.L9847:
	cmpl	$55, %eax
	jne	.L9850
	movq	1056(%rsp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	movq	1056(%rsp), %rsi
	movq	%rax, 8(%rsi)
	jmp	.L9849
.L15921:
	movq	8(%rbp), %r10
	movq	%r10, 8(%r8)
	cmpq	$0, 16(%rbp)
	je	.L9849
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	1056(%rsp), %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r14, 1056(%rsp)
	jmp	.L9849
.L9846:
	movq	1056(%rsp), %rsi
	cmpq	$0, 16(%rsi)
	jne	.L9854
	movq	8(%rsi), %rbx
	movq	%rbx, 1056(%rsp)
	jmp	.L9849
.L9854:
	movq	1056(%rsp), %rdi
	movq	24(%rdi), %rsi
	testq	%rsi, %rsi
	je	.L15922
.L15179:
	movq	%rsi, 1056(%rsp)
	jmp	.L9849
.L15922:
	movq	1056(%rsp), %r9
	movq	8(%r9), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	1056(%rsp), %r11
	movq	%rax, %rdi
	movq	8(%r11), %rsi
	movq	%rax, 24(%r11)
	call	gen_move_insn
	movq	1056(%rsp), %r15
	movq	%rax, %rdi
	movq	16(%r15), %rsi
	call	emit_insn_before
	movq	24(%r15), %rsi
	jmp	.L15179
.L9843:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L9839
.L15915:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L9837
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L15923
.L9837:
	cmpl	$55, %eax
	jne	.L9840
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L9839
.L15923:
	movq	8(%rbp), %r14
	movq	%r14, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L9839
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r15
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r15, 1064(%rsp)
	jmp	.L9839
.L9836:
	cmpq	$0, 16(%r12)
	jne	.L9844
	movq	8(%r12), %r11
	movq	%r11, 1064(%rsp)
	jmp	.L9839
.L9844:
	movq	24(%r12), %rcx
	testq	%rcx, %rcx
	movq	%rcx, 1064(%rsp)
	jne	.L9839
	movq	8(%r12), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r9
	movq	%r9, 1064(%rsp)
	jmp	.L9839
.L9833:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L9829
.L15914:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L9829
.L9826:
	cmpq	$0, 16(%r13)
	jne	.L9834
	movq	8(%r13), %rsi
	movq	%rsi, 1072(%rsp)
	jmp	.L9829
.L9834:
	movq	24(%r13), %rbp
	testq	%rbp, %rbp
	movq	%rbp, 1072(%rsp)
	jne	.L9829
	movq	8(%r13), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rdi
	movq	%rdi, 1072(%rsp)
	jmp	.L9829
	.p2align 6,,7
.L9815:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L9811
.L15892:
	jne	.L9812
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L9811
.L9808:
	cmpq	$0, 16(%r13)
	jne	.L9816
	movq	8(%r13), %r13
	jmp	.L9811
.L9816:
	movq	24(%r13), %rax
	testq	%rax, %rax
	je	.L9817
	movq	%rax, %r13
	jmp	.L9811
.L9817:
	movq	8(%r13), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L9811
.L15891:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	3416(%rsp), %rdi
	movzbl	2(%r13), %edx
	movq	%rax, %rsi
	jmp	.L15178
.L9787:
	movl	(%r13), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L15924
	movzbl	2(%r13), %edx
	movq	3416(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	%r13, %rsi
	call	expand_expr
	cmpw	$51, (%r13)
	movq	%rax, %r12
	je	.L15925
.L9805:
	movzwl	(%r12), %edx
	leal	-56(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L9806
	cmpw	$46, %dx
	je	.L9806
	cmpw	$47, %dx
	je	.L9806
	cmpw	$49, %dx
	je	.L9806
	cmpw	$113, %dx
	jne	.L9752
	jmp	.L9806
.L15925:
	cmpl	$63, 8(%r13)
	jle	.L9752
	jmp	.L9805
.L15924:
	movq	3416(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	8(%r13), %rdi
	movzbl	3(%r13), %edx
	movq	%rax, %r12
	movq	%rax, %rsi
	xorl	%eax, %eax
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	jmp	.L9751
.L9796:
	movl	$1, %ebx
	jmp	.L9790
.L9788:
	xorl	%ebx, %ebx
	jmp	.L9790
.L9794:
	movq	8(%r13), %rdi
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L9796
	movq	16(%r13), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L9790
	jmp	.L9796
.L15890:
	movzbl	2(%r13), %eax
	cmpb	$16, %al
	je	.L9780
	movl	cse_not_expected(%rip), %ebx
	movq	3416(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	%al, %edx
	testl	%ebx, %ebx
	cmove	%r13, %rsi
	xorl	%eax, %eax
	call	expand_expr
	movq	%rax, %r12
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L9806
	testb	%al, %al
	je	.L9806
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L15359
	.p2align 6,,7
.L15889:
	cmpb	$16, 2(%r13)
	jne	.L9753
	call	gen_label_rtx
	movq	%rax, %rbp
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r14
	testq	%rbx, %rbx
	jne	.L9757
.L14489:
	movzwl	(%r13), %eax
	movq	%r13, %r12
	cmpl	$59, %eax
	je	.L9759
	cmpl	$55, %eax
	je	.L15926
.L9763:
	cmpl	$63, %eax
	je	.L9766
	cmpl	$66, %eax
	je	.L9766
.L9762:
	movq	3416(%rsp), %r13
	xorl	%eax, %eax
	movq	%rbp, %rsi
	incl	inhibit_defer_pop(%rip)
	movq	32(%r13), %rdi
	call	jumpifnot
	movq	3416(%rsp), %rdx
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	40(%rdx), %rdi
	xorl	%edx, %edx
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L9772
.L14491:
	movq	%r14, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%rbp, %rdi
	call	emit_label
	xorl	%eax, %eax
	xorl	%edx, %edx
	movq	3416(%rsp), %rbp
	movq	%r12, %rsi
	movq	48(%rbp), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L9777
.L14493:
	movq	%r14, %rdi
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L9751
.L9777:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdi
	movq	%rax, 16(%rbx)
	testq	%rdi, %rdi
	movq	%rdi, pending_chain(%rip)
	movq	%rdi, %rbx
	jne	.L9777
	jmp	.L14493
.L9772:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rsi
	movq	%rax, 16(%rbx)
	testq	%rsi, %rsi
	movq	%rsi, pending_chain(%rip)
	movq	%rsi, %rbx
	jne	.L9772
	jmp	.L14491
.L9766:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L9762
.L15926:
	jne	.L9763
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L9762
	.p2align 6,,7
.L9759:
	cmpq	$0, 16(%r13)
	jne	.L9767
	movq	8(%r13), %r12
	jmp	.L9762
.L9767:
	movq	24(%r13), %rdi
	testq	%rdi, %rdi
	je	.L9768
	movq	%rdi, %r12
	jmp	.L9762
.L9768:
	movq	8(%r13), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	%rax, 24(%r12)
	movq	%rax, %rdi
	movq	8(%r13), %rsi
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r12
	jmp	.L9762
	.p2align 6,,7
.L9757:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r8
	movq	%rax, 16(%rbx)
	testq	%r8, %r8
	movq	%r8, pending_chain(%rip)
	movq	%r8, %rbx
	jne	.L9757
	jmp	.L14489
.L15888:
	movq	3416(%rsp), %rcx
	movq	const0_rtx(%rip), %rsi
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	32(%rcx), %rdi
	xorl	%ecx, %ecx
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L9749
.L14487:
	movq	3416(%rsp), %rax
	movq	%r13, %rsi
	xorl	%edx, %edx
	movq	40(%rax), %rdi
	xorl	%eax, %eax
	call	store_expr
	movq	%rax, %r12
	jmp	.L9751
.L9749:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r9
	movq	%rax, 16(%rbx)
	testq	%r9, %r9
	movq	%r9, pending_chain(%rip)
	movq	%r9, %rbx
	jne	.L9749
	jmp	.L14487
.L15887:
	movq	3416(%rsp), %rdx
	movzbl	16(%rdx), %eax
	cmpb	$39, %al
	jne	.L9744
	movl	current_function_returns_struct(%rip), %r14d
	testl	%r14d, %r14d
	je	.L9744
	movl	current_function_returns_pcc_struct(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L9744
	movq	%rdx, %rdi
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	expand_expr
	movq	3416(%rsp), %rdi
	movq	%rax, %r15
	xorl	%eax, %eax
	call	expr_size
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%eax, %eax
	movq	%rdi, (%rsp)
	movq	8(%r13), %r8
	movq	memcpy_libfunc(%rip), %rdi
	call	emit_library_call
	movq	%r13, %rdi
	jmp	.L15184
	.p2align 6,,7
.L15886:
	xorl	%edx, %edx
	movq	%r14, %rdi
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movzbl	16(%r14), %edx
	movq	%rax, %r13
	jmp	.L9743
.L15885:
	movq	40(%r14), %r15
	cmpb	$25, 16(%r15)
	jne	.L9226
	movq	8(%r14), %r9
	movq	32(%r9), %r11
	cmpb	$25, 16(%r11)
	jne	.L9226
.L9227:
	xorl	%ecx, %ecx
	xorl	%ebp, %ebp
	movl	$0, 5504(%rsp)
	cmpb	$37, %dl
	movq	%r14, %r12
	leaq	5520(%rsp), %r13
	leaq	5504(%rsp), %r15
	movl	$0, 964(%rsp)
	je	.L15927
	cmpb	$38, %dl
	je	.L15928
	movq	8(%r14), %r10
	movzbl	44(%r10), %r8d
	movl	%r8d, 964(%rsp)
	movslq	964(%rsp),%rdx
	movl	mode_size(,%rdx,4), %eax
	sall	$3, %eax
	movl	%eax, 5524(%rsp)
	movq	8(%r14), %r9
	movzbl	17(%r9), %r11d
	shrb	$6, %r11b
	movl	%r11d, %edi
	andl	$1, %edi
	movl	%edi, 3412(%rsp)
.L9230:
	testq	%rcx, %rcx
	je	.L9233
	cmpb	$25, 16(%rcx)
	je	.L9234
	movl	$16, 964(%rsp)
	movl	$-1, 5524(%rsp)
.L9233:
	movl	$0, (%r13)
	.p2align 4,,7
.L9261:
	movzbl	16(%r12), %edx
	cmpb	$39, %dl
	je	.L15929
.L9239:
	leal	-37(%rdx), %ecx
	cmpb	$1, %cl
	ja	.L9240
	cmpb	$37, %dl
	je	.L15930
	movq	48(%r12), %rbx
.L9242:
	movzbl	16(%rbx), %eax
	cmpb	$53, %al
	je	.L15931
	cmpb	$25, %al
	je	.L15932
.L9251:
	testq	%rbp, %rbp
	je	.L9253
	movl	$8, %edi
	call	size_int
	movq	%rbx, %rsi
	movl	$58, %edi
	movq	%rax, %rdx
	call	size_binop
	movq	%rbp, %rsi
	movl	$53, %edi
.L15169:
	movq	%rax, %rdx
	call	size_binop
	movq	%rax, %rbp
.L9255:
	testb	$16, 17(%r12)
	je	.L9260
	movl	$1, (%r15)
.L9260:
	movq	32(%r12), %r12
	jmp	.L9261
	.p2align 6,,7
.L9253:
	movl	$8, %edi
	call	size_int
	movq	%rbx, %rsi
	movl	$58, %edi
	jmp	.L15169
.L15932:
	movl	24(%rbx), %eax
.L15170:
	addl	%eax, (%r13)
	jmp	.L9255
	.p2align 6,,7
.L15931:
	movq	32(%rbx), %rsi
	cmpb	$25, 16(%rsi)
	je	.L15933
	movq	40(%rbx), %rax
	cmpb	$25, 16(%rax)
	jne	.L15283
	movq	%rsi, %rbx
.L9245:
	movl	24(%rax), %eax
	addl	%eax, (%r13)
	jmp	.L9251
.L15933:
	movq	40(%rbx), %rbx
	movq	%rsi, %rax
	jmp	.L9245
	.p2align 6,,7
.L15930:
	movq	40(%r12), %rsi
	movq	72(%rsi), %rbx
	jmp	.L9242
	.p2align 6,,7
.L9240:
	cmpb	$42, %dl
	je	.L15934
.L9256:
	cmpb	$103, %dl
	je	.L9255
	leal	-101(%rdx), %edi
	cmpb	$1, %dil
	ja	.L9237
	movq	32(%r12), %r8
	movq	8(%r12), %r9
	movq	8(%r8), %rdx
	movzbl	44(%rdx), %r11d
	cmpb	%r11b, 44(%r9)
	je	.L9255
.L9237:
	movl	964(%rsp), %eax
	testl	%eax, %eax
	jne	.L9262
	movl	(%r13), %eax
	movl	5524(%rsp), %edi
	cltd
	idivl	%edi
	testl	%edx, %edx
	movl	%edx, %ebx
	je	.L15935
.L9262:
	movl	964(%rsp), %eax
	movq	%rbp, 5512(%rsp)
	testl	%eax, %eax
	movl	%eax, 5508(%rsp)
	jne	.L9265
	xorl	%ebp, %ebp
	testl	%ebp, %ebp
	jne	.L15936
.L9265:
	movq	%r12, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	5512(%rsp), %rdi
	movq	%rax, %rbx
	testq	%rdi, %rdi
	jne	.L15937
.L9266:
	movl	5504(%rsp), %eax
	testl	%eax, %eax
	je	.L9268
	cmpw	$55, (%rbx)
	je	.L15938
.L9268:
	xorl	%r10d, %r10d
	movl	5524(%rsp), %ebp
	movl	5520(%rsp), %r15d
	testl	%r10d, %r10d
	movl	5508(%rsp), %r13d
	je	.L9270
	movq	8(%r14), %rcx
	movzbl	44(%rcx), %r14d
	movl	%r14d, 960(%rsp)
.L9271:
	movq	8(%r12), %rdi
	movl	48(%rdi), %r12d
	call	int_size_in_bytes
	movl	$0, 956(%rsp)
	movl	%eax, 3408(%rsp)
	shrl	$3, %r12d
	cmpl	$31, %ebp
	jg	.L9272
	movl	$1, %eax
	movl	%ebp, %ecx
	sall	%cl, %eax
	decl	%eax
	movl	%eax, 956(%rsp)
.L9272:
	cmpl	$16, %r13d
	je	.L15939
.L9273:
	testl	%r13d, %r13d
	je	.L9278
	cmpl	$16, %r13d
	je	.L9279
	movslq	%r13d,%rdi
	cmpb	$0, direct_store(%rdi)
	je	.L9278
.L9279:
	movzwl	(%rbx), %eax
	cmpw	$51, %ax
	je	.L9278
	cmpw	$53, %ax
	je	.L9278
	movl	960(%rsp), %r8d
	movq	8(%rbx), %rdi
	testl	%r8d, %r8d
	je	.L9285
	movzwl	(%rdi), %edx
	cmpw	$51, %dx
	je	.L9285
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L9285
	cmpw	$46, %dx
	je	.L9285
	cmpw	$47, %dx
	je	.L9285
	cmpw	$49, %dx
	je	.L9285
	cmpw	$113, %dx
	je	.L9285
	cmpw	$63, %dx
	je	.L15940
.L9286:
	xorl	%eax, %eax
	call	copy_to_reg
	movq	%rax, %rdi
.L9285:
	cmpl	$-1, %r15d
	leal	7(%r15), %esi
	cmovle	%esi, %r15d
	sarl	$3, %r15d
	movl	%r15d, %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	%rbx, %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	orb	$16, 3(%rax)
	movq	%rax, %r14
	movl	$0, 952(%rsp)
	movl	960(%rsp), %eax
	movq	3416(%rsp), %rdx
	testl	%eax, %eax
	movzbl	16(%rdx), %eax
	setne	%cl
	cmpb	$44, %al
	movzbl	%cl, %ebp
	je	.L15941
	cmpb	$48, %al
	je	.L15942
.L9297:
	testl	%ebp, %ebp
	je	.L9324
	cmpw	$55, (%r14)
	je	.L15943
.L9324:
	movzwl	(%r14), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L9332
	mov	%eax, %ebx
	jmp	*.L9341(,%rbx,8)
	.section	.rodata
	.align 8
	.align 4
.L9341:
	.quad	.L9335
	.quad	.L9332
	.quad	.L9332
	.quad	.L9332
	.quad	.L9340
	.quad	.L9332
	.quad	.L9332
	.quad	.L9332
	.quad	.L9338
	.quad	.L9338
	.quad	.L9332
	.quad	.L9338
	.text
.L9335:
	movq	8(%r14), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %ebx
.L9334:
	testl	%ebx, %ebx
	je	.L9331
	movzbl	2(%r14), %eax
	cmpb	$16, %al
	je	.L9343
	testb	%al, %al
	jne	.L15944
.L9343:
	movzbl	2(%r14), %edx
	movq	3416(%rsp), %rdi
	xorl	%esi, %esi
.L15171:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L15358:
	movq	%rax, %r12
.L9350:
	movl	$1, 952(%rsp)
.L9296:
	cmpq	%r14, %r12
	je	.L9351
	movq	3416(%rsp), %r10
	cmpb	$0, 16(%r10)
	je	.L9351
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L9352
	cmpl	$55, %eax
	je	.L15945
.L9356:
	cmpl	$63, %eax
	je	.L9359
	cmpl	$66, %eax
	je	.L9359
.L9355:
	movzbl	2(%r12), %eax
	movzbl	2(%r14), %ecx
	cmpb	%cl, %al
	je	.L9362
	testb	%al, %al
	je	.L9362
	movq	3416(%rsp), %rdi
	movl	952(%rsp), %eax
	movq	8(%rdi), %r11
	movzbl	17(%r11), %esi
	shrb	$6, %sil
	movl	%esi, %edx
	andl	$1, %edx
	testl	%eax, %eax
	je	.L9363
	movq	%r12, %rsi
	movzbl	%cl, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%rax, %r12
.L9618:
	movq	%r14, %rdi
	movq	%r12, %rsi
	call	emit_move_insn
.L9351:
	movl	952(%rsp), %ebx
	testl	%ebx, %ebx
	cmove	%r14, %r12
.L9295:
	movq	%r12, %rbx
.L9276:
	movq	%rbx, %rdi
	jmp	.L15184
.L9363:
	movq	%r14, %rdi
	movq	%r12, %rsi
	xorl	%eax, %eax
	call	convert_move
	jmp	.L9351
.L9362:
	cmpb	$16, %al
	jne	.L9618
	movq	3416(%rsp), %rdx
	cmpb	$28, 16(%rdx)
	je	.L15946
	cmpb	$16, %al
	jne	.L9618
	movq	3416(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, 856(%rsp)
	call	expr_size
	movq	3416(%rsp), %rsi
	movq	%rax, %r13
	movq	8(%rsi), %r9
	movl	48(%r9), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r14)
	movl	%eax, 852(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r14, 864(%rsp)
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L9621
	cmpl	$55, %eax
	je	.L15947
	cmpl	$63, %eax
	je	.L9628
	cmpl	$66, %eax
	je	.L9628
.L9624:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L9631
	cmpl	$55, %eax
	je	.L15948
.L9635:
	cmpl	$63, %eax
	je	.L9638
	cmpl	$66, %eax
	je	.L9638
.L9634:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L9641
	cmpl	$55, %eax
	je	.L15949
.L9645:
	cmpl	$63, %eax
	je	.L9648
	cmpl	$66, %eax
	je	.L9648
.L9644:
	movq	864(%rsp), %rax
	cmpw	$55, (%rax)
	jne	.L15283
	movq	856(%rsp), %rdi
	cmpw	$55, (%rdi)
	jne	.L15283
	testq	%r13, %r13
	je	.L15283
	cmpw	$46, (%r13)
	je	.L15950
.L9654:
	movl	852(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 3320(%rsp)
	testl	%ebp, %ebp
	je	.L14485
.L9740:
	movslq	%ebp,%rax
	movq	%rax, 3312(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L9728
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L9732
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L9728
.L9732:
	movslq	%edx,%r10
	leaq	(%r10,%r10,4), %r15
	movq	%r10, 3304(%rsp)
	salq	$4, %r15
	movq	insn_operand_predicate(%r15), %rdx
	testq	%rdx, %rdx
	jne	.L15951
.L9733:
	movq	insn_operand_predicate+8(%r15), %rdx
	testq	%rdx, %rdx
	jne	.L15952
.L9734:
	movq	insn_operand_predicate+24(%r15), %rdx
	testq	%rdx, %rdx
	je	.L9735
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	3320(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L9728
.L9735:
	call	get_last_insn
	movl	$1, %edx
	movq	%r13, %rsi
	movq	%rax, 3296(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r15), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15953
.L9736:
	movq	3304(%rsp), %rbp
	movq	864(%rsp), %rdi
	xorl	%eax, %eax
	movq	856(%rsp), %rsi
	movq	%rbx, %rdx
	movq	3320(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14969
	movq	3296(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L9728:
	movq	3312(%rsp), %rdx
	movl	mode_wider_mode(,%rdx,4), %ebp
	testl	%ebp, %ebp
	jne	.L9740
.L14485:
	movq	%r13, %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$3, %ecx
	xorl	%edx, %edx
	movq	856(%rsp), %rsi
	movq	memcpy_libfunc(%rip), %rdi
	movq	8(%rsi), %r13
	xorl	%esi, %esi
	movl	$4, 24(%rsp)
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movq	864(%rsp), %rax
	movq	%r13, (%rsp)
.L15176:
	movq	8(%rax), %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	call	emit_library_call
	jmp	.L9351
.L14969:
	call	emit_insn
	jmp	.L9351
.L15953:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L9736
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L9736
.L15952:
	xorl	%eax, %eax
	movq	856(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L9728
	jmp	.L9734
.L15951:
	xorl	%eax, %eax
	movq	864(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L9728
	jmp	.L9733
.L15950:
	movl	8(%r13), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 852(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	852(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L9668:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14476
.L9664:
	movslq	%edx,%r15
	salq	$2, %r15
	cmpl	%r8d, mode_size(%r15)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r15), %edx
	testl	%edx, %edx
	jne	.L9664
.L14476:
	testl	%ecx, %ecx
	je	.L9657
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L9666
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L9666
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L9666:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L9668
.L9657:
	decl	%r9d
	jg	.L9654
	movq	856(%rsp), %rcx
	movq	864(%rsp), %rbp
	movl	%r10d, %r13d
	movl	$9, %r15d
	movq	8(%rbp), %rbx
	movq	8(%rcx), %rdi
	movq	%rcx, 5992(%rsp)
	movl	$0, 6020(%rsp)
	movq	%rbp, 5968(%rsp)
	xorl	%ecx, %ecx
	movq	%rbx, 5976(%rsp)
	movq	%rdi, 6000(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L9671
	cmpw	$88, %dx
	je	.L9671
	cmpw	$87, %dx
	je	.L9671
.L9670:
	movl	%ecx, 5984(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L9673
	cmpw	$88, %dx
	je	.L9673
	cmpw	$87, %dx
	je	.L9673
.L9672:
	movl	%ecx, 6008(%rsp)
	movl	$0, 6012(%rsp)
	movl	$0, 5988(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L9675
	cmpw	$87, %ax
	je	.L9675
.L9674:
	testl	%edx, %edx
	movl	%edx, 6024(%rsp)
	je	.L9676
	movl	%r10d, 6020(%rsp)
.L9676:
	movl	6008(%rsp), %eax
	movl	%r10d, 6016(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L9678
	movl	5984(%rsp), %r8d
	testl	%r8d, %r8d
	jne	.L9677
.L9678:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 852(%rsp)
	movq	mov_optab(%rip), %r11
	cmovl	852(%rsp), %ebp
.L9692:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14479
.L9688:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L9688
.L14479:
	testl	%ecx, %ecx
	je	.L9681
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L9690
	movl	mode_size(,%rcx,4), %eax
	movl	$8, %r8d
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r8d, %eax
	cmpl	%eax, %ebp
	jl	.L9690
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L9690:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L9692
.L9681:
	cmpl	$2, %r9d
	jle	.L9677
	testl	%r10d, %r10d
	jne	.L9694
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L9695
	cmpw	$46, %dx
	je	.L9695
	cmpw	$47, %dx
	je	.L9695
	cmpw	$49, %dx
	je	.L9695
	cmpw	$113, %dx
	je	.L9695
.L9694:
	movl	5984(%rsp), %esi
	testl	%esi, %esi
	jne	.L9677
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %edi
	cmpw	$1, %di
	jbe	.L9697
	cmpw	$46, %dx
	je	.L9697
	cmpw	$47, %dx
	je	.L9697
	cmpw	$49, %dx
	je	.L9697
	cmpw	$113, %dx
	je	.L9697
.L9677:
	cmpl	$8, 852(%rsp)
	movl	$8, %eax
	cmovl	852(%rsp), %eax
	cmpl	$1, %r15d
	movl	%eax, 852(%rsp)
	jle	.L9700
.L9722:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r13d, %r13d
	testl	%edx, %edx
	je	.L14482
.L9707:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r15d, mode_size(%rbx)
	cmovl	%edx, %r13d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L9707
.L14482:
	testl	%r13d, %r13d
	je	.L9700
	movslq	%r13d,%r15
	movq	%r15, %r11
	salq	$4, %r11
	addq	mov_optab(%rip), %r11
	movl	8(%r11), %edx
	cmpl	$210, %edx
	je	.L9709
	movl	mode_size(,%r15,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 852(%rsp)
	jl	.L9709
	movslq	%edx,%r9
	cmpl	%ebp, 6016(%rsp)
	leaq	5968(%rsp), %rbx
	movq	insn_gen_function(,%r9,8), %rcx
	movq	%rcx, 3328(%rsp)
	jl	.L9709
	movl	6024(%rsp), %edx
.L9720:
	testl	%edx, %edx
	je	.L9714
	subl	%ebp, 52(%rbx)
.L9714:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L9715
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15175:
	movl	40(%rbx), %r8d
	movq	%rax, 840(%rsp)
	testl	%r8d, %r8d
	je	.L9717
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L9718:
	movq	%rax, %rsi
	movq	840(%rsp), %rdi
	xorl	%eax, %eax
	call	*3328(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L9719
	addl	%ebp, 52(%rbx)
.L9719:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L9720
.L9709:
	movl	mode_size(,%r15,4), %r15d
	cmpl	$1, %r15d
	jg	.L9722
.L9700:
	movl	6016(%rsp), %r15d
	testl	%r15d, %r15d
.L15394:
	je	.L9351
	jmp	.L15283
.L9717:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L9718
.L9715:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15175
.L9697:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5976(%rsp)
	jmp	.L9677
.L9695:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6000(%rsp)
	jmp	.L9694
.L9675:
	movl	$1, %edx
	jmp	.L9674
.L9673:
	movl	$1, %ecx
	jmp	.L9672
.L9671:
	movl	$1, %ecx
	jmp	.L9670
.L9648:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L9644
.L15949:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L9642
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L15954
.L9642:
	cmpl	$55, %eax
	jne	.L9645
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L9644
.L15954:
	movq	8(%rbp), %rsi
	movq	%rsi, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L9644
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r15
	call	gen_move_insn
	movq	%r15, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L9644
.L9641:
	cmpq	$0, 16(%r13)
	jne	.L9649
	movq	8(%r13), %r13
	jmp	.L9644
.L9649:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L9650
	movq	%rsi, %r13
	jmp	.L9644
.L9650:
	movq	8(%r13), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L9644
.L9638:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L9634
.L15948:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L9632
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L15955
.L9632:
	cmpl	$55, %eax
	jne	.L9635
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L9634
.L15955:
	movq	8(%rbp), %r10
	movq	%r10, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L9634
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r15
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r15, 856(%rsp)
	jmp	.L9634
.L9631:
	cmpq	$0, 16(%r12)
	jne	.L9639
	movq	8(%r12), %rbp
	movq	%rbp, 856(%rsp)
	jmp	.L9634
.L9639:
	movq	24(%r12), %rdx
	testq	%rdx, %rdx
	movq	%rdx, 856(%rsp)
	jne	.L9634
	movq	8(%r12), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rbx
	movq	%rbx, 856(%rsp)
	jmp	.L9634
.L9628:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L9624
.L15947:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L9624
.L9621:
	cmpq	$0, 16(%r14)
	jne	.L9629
	movq	8(%r14), %r8
	movq	%r8, 864(%rsp)
	jmp	.L9624
.L9629:
	movq	24(%r14), %rdi
	testq	%rdi, %rdi
	movq	%rdi, 864(%rsp)
	jne	.L9624
	movq	8(%r14), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rcx
	movq	%rcx, 864(%rsp)
	jmp	.L9624
.L15946:
	xorl	%eax, %eax
	movq	%rdx, %rdi
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, 928(%rsp)
	je	.L15956
.L9367:
	movl	$8, %edi
	call	size_int
	movl	$57, %edi
	movq	3416(%rsp), %rsi
	movq	%rax, %rdx
	movq	8(%rsi), %r9
	movq	32(%r9), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	3416(%rsp), %rbx
	movq	%rax, %rbp
	movl	32(%rbx), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%rbp, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movq	$0, 872(%rsp)
	movq	%rax, 896(%rsp)
	movq	%rax, %r15
	movq	3416(%rsp), %rax
	movq	8(%rax), %r10
	movl	48(%r10), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r14)
	movl	%eax, 892(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r14, 904(%rsp)
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L9493
	cmpl	$55, %eax
	je	.L15957
	cmpl	$63, %eax
	je	.L9500
	cmpl	$66, %eax
	je	.L9500
.L9496:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L9503
	cmpl	$55, %eax
	je	.L15958
.L9507:
	cmpl	$63, %eax
	je	.L9510
	cmpl	$66, %eax
	je	.L9510
.L9506:
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L9513
	cmpl	$55, %eax
	je	.L15959
.L9517:
	cmpl	$63, %eax
	je	.L9520
	cmpl	$66, %eax
	je	.L9520
.L9516:
	movq	904(%rsp), %rsi
	cmpw	$55, (%rsi)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 896(%rsp)
	je	.L15283
	movq	896(%rsp), %rsi
	cmpw	$46, (%rsi)
	je	.L15960
.L9526:
	movl	892(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 3360(%rsp)
	testl	%ebp, %ebp
	je	.L14473
.L9612:
	movslq	%ebp,%r11
	movq	%r11, %rax
	movq	%r11, 3352(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L9600
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L9604
	movq	896(%rsp), %r13
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L9600
.L9604:
	movslq	%edx,%r10
	leaq	(%r10,%r10,4), %r13
	movq	%r10, 3344(%rsp)
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L15961
.L9605:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L15962
.L9606:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L9607
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	3360(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L9600
.L9607:
	call	get_last_insn
	movl	$1, %edx
	movq	896(%rsp), %rsi
	movq	%rax, 3336(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15963
.L9608:
	movq	3344(%rsp), %rbp
	movq	904(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	3360(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14968
	movq	3336(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L9600:
	movq	3352(%rsp), %rdx
	movl	mode_wider_mode(,%rdx,4), %ebp
	testl	%ebp, %ebp
	jne	.L9612
.L14473:
	movq	896(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%r12), %rbx
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	904(%rsp), %r12
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%rbx, (%rsp)
	movq	8(%r12), %r8
	call	emit_library_call
.L9610:
	cmpw	$46, (%r15)
	je	.L15964
	movq	8(%r14), %rsi
	movl	$4, %edi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movl	$4, %edi
	movq	%r15, %rcx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	928(%rsp), %rdx
	movl	$4, %edi
	movq	%r15, %rcx
	movq	%rax, %r12
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 872(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L9614:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L9615
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%r12, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L9615:
	cmpq	$0, 872(%rsp)
	je	.L9351
	movq	872(%rsp), %rdi
	call	emit_label
	jmp	.L9351
.L15964:
	movq	3416(%rsp), %rax
	movq	8(%r14), %rdi
	movl	32(%rax), %esi
	call	plus_constant_wide
	movq	928(%rsp), %rdi
	movq	3416(%rsp), %r15
	movq	%rax, %r12
	movl	32(%r15), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L9614
.L14968:
	call	emit_insn
	jmp	.L9610
.L15963:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L9608
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L9608
.L15962:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L9600
	jmp	.L9606
.L15961:
	xorl	%eax, %eax
	movq	904(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L9600
	jmp	.L9605
.L15960:
	movl	8(%rsi), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 892(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	892(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L9540:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14464
.L9536:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L9536
.L14464:
	testl	%ecx, %ecx
	je	.L9529
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L9538
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L9538
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L9538:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L9540
.L9529:
	decl	%r9d
	jg	.L9526
	movq	904(%rsp), %rcx
	movq	8(%r12), %rdi
	movl	%r10d, %r13d
	movq	8(%rcx), %rbx
	movq	%r12, 5992(%rsp)
	movq	%rcx, 5968(%rsp)
	movl	$0, 6020(%rsp)
	movq	%rdi, 6000(%rsp)
	xorl	%ecx, %ecx
	movl	$9, 888(%rsp)
	movq	%rbx, 5976(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L9543
	cmpw	$88, %dx
	je	.L9543
	cmpw	$87, %dx
	je	.L9543
.L9542:
	movl	%ecx, 5984(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L9545
	cmpw	$88, %dx
	je	.L9545
	cmpw	$87, %dx
	je	.L9545
.L9544:
	movl	%ecx, 6008(%rsp)
	movl	$0, 6012(%rsp)
	movl	$0, 5988(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L9547
	cmpw	$87, %ax
	je	.L9547
.L9546:
	testl	%edx, %edx
	movl	%edx, 6024(%rsp)
	je	.L9548
	movl	%r10d, 6020(%rsp)
.L9548:
	movl	6008(%rsp), %eax
	movl	%r10d, 6016(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L9550
	movl	5984(%rsp), %eax
	testl	%eax, %eax
	jne	.L9549
.L9550:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 892(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	892(%rsp), %ebp
.L9564:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14467
.L9560:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L9560
.L14467:
	testl	%ecx, %ecx
	je	.L9553
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L9562
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L9562
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L9562:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L9564
.L9553:
	cmpl	$2, %r9d
	jle	.L9549
	testl	%r10d, %r10d
	jne	.L9566
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L9567
	cmpw	$46, %dx
	je	.L9567
	cmpw	$47, %dx
	je	.L9567
	cmpw	$49, %dx
	je	.L9567
	cmpw	$113, %dx
	je	.L9567
.L9566:
	movl	5984(%rsp), %eax
	testl	%eax, %eax
	jne	.L9549
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L9569
	cmpw	$46, %dx
	je	.L9569
	cmpw	$47, %dx
	je	.L9569
	cmpw	$49, %dx
	je	.L9569
	cmpw	$113, %dx
	je	.L9569
.L9549:
	cmpl	$8, 892(%rsp)
	movl	$8, %eax
	cmovl	892(%rsp), %eax
	cmpl	$1, 888(%rsp)
	movl	%eax, 892(%rsp)
	jle	.L9572
.L9594:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14470
.L9579:
	movslq	%edx,%rbx
	movl	888(%rsp), %eax
	salq	$2, %rbx
	cmpl	%eax, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L9579
.L14470:
	testl	%r12d, %r12d
	je	.L9572
	movslq	%r12d,%r13
	movq	%r13, %r9
	salq	$4, %r9
	addq	mov_optab(%rip), %r9
	movl	8(%r9), %edx
	cmpl	$210, %edx
	je	.L9581
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 892(%rsp)
	jl	.L9581
	movslq	%edx,%r8
	cmpl	%ebp, 6016(%rsp)
	leaq	5968(%rsp), %rbx
	movq	insn_gen_function(,%r8,8), %rsi
	movq	%rsi, 3368(%rsp)
	jl	.L9581
	movl	6024(%rsp), %edx
.L9592:
	testl	%edx, %edx
	je	.L9586
	subl	%ebp, 52(%rbx)
.L9586:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L9587
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15174:
	movq	%rax, 880(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L9589
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L9590:
	movq	%rax, %rsi
	movq	880(%rsp), %rdi
	xorl	%eax, %eax
	call	*3368(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L9591
	addl	%ebp, 52(%rbx)
.L9591:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L9592
.L9581:
	movl	mode_size(,%r13,4), %edi
	movl	%edi, 888(%rsp)
	decl	%edi
	jg	.L9594
.L9572:
	movl	6016(%rsp), %ecx
	testl	%ecx, %ecx
	je	.L9610
	jmp	.L15283
.L9589:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L9590
.L9587:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15174
.L9569:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 5976(%rsp)
	jmp	.L9549
.L9567:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6000(%rsp)
	jmp	.L9566
.L9547:
	movl	$1, %edx
	jmp	.L9546
.L9545:
	movl	$1, %ecx
	jmp	.L9544
.L9543:
	movl	$1, %ecx
	jmp	.L9542
.L9520:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L9516
.L15959:
	movzbl	2(%r15), %edx
	cmpb	$16, %dl
	je	.L9514
	movq	8(%r15), %rbp
	cmpw	$59, (%rbp)
	je	.L15965
.L9514:
	cmpl	$55, %eax
	jne	.L9517
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L9516
.L15965:
	movq	8(%rbp), %r10
	movq	%r10, 8(%r15)
	cmpq	$0, 16(%rbp)
	je	.L9516
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r15, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r13, 896(%rsp)
	jmp	.L9516
.L9513:
	cmpq	$0, 16(%r15)
	jne	.L9521
	movq	8(%r15), %rax
	movq	%rax, 896(%rsp)
	jmp	.L9516
.L9521:
	movq	24(%r15), %rbp
	testq	%rbp, %rbp
	movq	%rbp, 896(%rsp)
	jne	.L9516
	movq	8(%r15), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %rbx
	movq	%rbx, 896(%rsp)
	jmp	.L9516
.L9510:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L9506
.L15958:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L9504
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L15966
.L9504:
	cmpl	$55, %eax
	jne	.L9507
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L9506
.L15966:
	movq	8(%rbp), %r13
	movq	%r13, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L9506
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	%r13, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L9506
.L9503:
	cmpq	$0, 16(%r12)
	jne	.L9511
	movq	8(%r12), %r12
	jmp	.L9506
.L9511:
	movq	24(%r12), %rax
	testq	%rax, %rax
	je	.L9512
	movq	%rax, %r12
	jmp	.L9506
.L9512:
	movq	8(%r12), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L9506
.L9500:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L9496
.L15957:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L9496
.L9493:
	cmpq	$0, 16(%r14)
	jne	.L9501
	movq	8(%r14), %rdi
	movq	%rdi, 904(%rsp)
	jmp	.L9496
.L9501:
	movq	24(%r14), %r8
	testq	%r8, %r8
	movq	%r8, 904(%rsp)
	jne	.L9496
	movq	8(%r14), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rcx
	movq	%rcx, 904(%rsp)
	jmp	.L9496
.L15956:
	movq	3416(%rsp), %rcx
	movq	928(%rsp), %r9
	movl	32(%rcx), %eax
	cmpl	%eax, 8(%r9)
	jge	.L9367
	movq	%r12, 936(%rsp)
	movq	8(%rcx), %rdx
	movl	48(%rdx), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r14)
	movl	%eax, 924(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r14, 944(%rsp)
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L9370
	cmpl	$55, %eax
	je	.L15967
	cmpl	$63, %eax
	je	.L9377
	cmpl	$66, %eax
	je	.L9377
.L9373:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L9380
	cmpl	$55, %eax
	je	.L15968
.L9384:
	cmpl	$63, %eax
	je	.L9387
	cmpl	$66, %eax
	je	.L9387
.L9383:
	movq	928(%rsp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$59, %eax
	je	.L9390
	cmpl	$55, %eax
	je	.L15969
.L9394:
	cmpl	$63, %eax
	je	.L9397
	cmpl	$66, %eax
	je	.L9397
.L9393:
	movq	944(%rsp), %rdi
	cmpw	$55, (%rdi)
	jne	.L15283
	movq	936(%rsp), %rbp
	cmpw	$55, (%rbp)
	jne	.L15283
	cmpq	$0, 928(%rsp)
	je	.L15283
	movq	928(%rsp), %rdi
	cmpw	$46, (%rdi)
	je	.L15970
.L9403:
	movl	924(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 3392(%rsp)
	testl	%ebp, %ebp
	je	.L14461
.L9489:
	movslq	%ebp,%rax
	movq	%rax, 3384(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L9477
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L9481
	movq	928(%rsp), %r15
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r15)
	ja	.L9477
.L9481:
	movslq	%edx,%r15
	leaq	(%r15,%r15,4), %r13
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L15971
.L9482:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L15972
.L9483:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L9484
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	3392(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L9477
.L9484:
	call	get_last_insn
	movl	$1, %edx
	movq	928(%rsp), %rsi
	movq	%rax, 3376(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15973
.L9485:
	movq	944(%rsp), %rdi
	xorl	%eax, %eax
	movq	936(%rsp), %rsi
	movq	%rbx, %rdx
	movq	3392(%rsp), %rcx
	call	*insn_gen_function(,%r15,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14969
	movq	3376(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L9477:
	movq	3384(%rsp), %r11
	movl	mode_wider_mode(,%r11,4), %ebp
	testl	%ebp, %ebp
	jne	.L9489
.L14461:
	movq	928(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$3, %ecx
	xorl	%esi, %esi
	movq	936(%rsp), %rdx
	movq	memcpy_libfunc(%rip), %rdi
	movq	8(%rdx), %r13
	xorl	%edx, %edx
	movl	$4, 24(%rsp)
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movq	944(%rsp), %rax
	movq	%r13, (%rsp)
	jmp	.L15176
.L15973:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L9485
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L9485
.L15972:
	xorl	%eax, %eax
	movq	936(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L9477
	jmp	.L9483
.L15971:
	xorl	%eax, %eax
	movq	944(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L9477
	jmp	.L9482
.L15970:
	movl	8(%rdi), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 924(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	924(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L9417:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14452
.L9413:
	movslq	%edx,%r15
	salq	$2, %r15
	cmpl	%r8d, mode_size(%r15)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r15), %edx
	testl	%edx, %edx
	jne	.L9413
.L14452:
	testl	%ecx, %ecx
	je	.L9406
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L9415
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L9415
	movl	%edi, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %edi
.L9415:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L9417
.L9406:
	decl	%r9d
	jg	.L9403
	movq	944(%rsp), %rcx
	movq	936(%rsp), %r8
	movl	%r10d, %r13d
	movl	$9, %r15d
	movq	8(%rcx), %rbx
	movq	8(%r8), %rdi
	movq	%r8, 6056(%rsp)
	movq	%rcx, 6032(%rsp)
	movl	$0, 6084(%rsp)
	xorl	%ecx, %ecx
	movq	%rbx, 6040(%rsp)
	movq	%rdi, 6064(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L9420
	cmpw	$88, %dx
	je	.L9420
	cmpw	$87, %dx
	je	.L9420
.L9419:
	movl	%ecx, 6048(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L9422
	cmpw	$88, %dx
	je	.L9422
	cmpw	$87, %dx
	je	.L9422
.L9421:
	movl	%ecx, 6072(%rsp)
	movl	$0, 6076(%rsp)
	movl	$0, 6052(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L9424
	cmpw	$87, %ax
	je	.L9424
.L9423:
	testl	%edx, %edx
	movl	%edx, 6088(%rsp)
	je	.L9425
	movl	%r10d, 6084(%rsp)
.L9425:
	movl	6072(%rsp), %eax
	movl	%r10d, 6080(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L9427
	movl	6048(%rsp), %eax
	testl	%eax, %eax
	jne	.L9426
.L9427:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 924(%rsp)
	movq	mov_optab(%rip), %r11
	cmovl	924(%rsp), %ebp
.L9441:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14455
.L9437:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L9437
.L14455:
	testl	%ecx, %ecx
	je	.L9430
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L9439
	movl	mode_size(,%rcx,4), %eax
	movl	$8, %r8d
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r8d, %eax
	cmpl	%eax, %ebp
	jl	.L9439
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L9439:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L9441
.L9430:
	cmpl	$2, %r9d
	jle	.L9426
	testl	%r10d, %r10d
	jne	.L9443
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L9444
	cmpw	$46, %dx
	je	.L9444
	cmpw	$47, %dx
	je	.L9444
	cmpw	$49, %dx
	je	.L9444
	cmpw	$113, %dx
	je	.L9444
.L9443:
	movl	6048(%rsp), %esi
	testl	%esi, %esi
	jne	.L9426
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %edi
	cmpw	$1, %di
	jbe	.L9446
	cmpw	$46, %dx
	je	.L9446
	cmpw	$47, %dx
	je	.L9446
	cmpw	$49, %dx
	je	.L9446
	cmpw	$113, %dx
	je	.L9446
.L9426:
	cmpl	$8, 924(%rsp)
	movl	$8, %eax
	cmovl	924(%rsp), %eax
	cmpl	$1, %r15d
	movl	%eax, 924(%rsp)
	jle	.L9449
.L9471:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r13d, %r13d
	testl	%edx, %edx
	je	.L14458
.L9456:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r15d, mode_size(%rbx)
	cmovl	%edx, %r13d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L9456
.L14458:
	testl	%r13d, %r13d
	je	.L9449
	movslq	%r13d,%r15
	movq	%r15, %rbp
	salq	$4, %rbp
	addq	mov_optab(%rip), %rbp
	movl	8(%rbp), %edx
	cmpl	$210, %edx
	je	.L9458
	movl	mode_size(,%r15,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 924(%rsp)
	jl	.L9458
	movslq	%edx,%r8
	cmpl	%ebp, 6080(%rsp)
	leaq	6032(%rsp), %rbx
	movq	insn_gen_function(,%r8,8), %r9
	movq	%r9, 3400(%rsp)
	jl	.L9458
	movl	6088(%rsp), %edx
.L9469:
	testl	%edx, %edx
	je	.L9463
	subl	%ebp, 52(%rbx)
.L9463:
	movl	16(%rbx), %ecx
	testl	%ecx, %ecx
	je	.L9464
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15173:
	movq	%rax, 912(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L9466
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L9467:
	movq	%rax, %rsi
	movq	912(%rsp), %rdi
	xorl	%eax, %eax
	call	*3400(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L9468
	addl	%ebp, 52(%rbx)
.L9468:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L9469
.L9458:
	movl	mode_size(,%r15,4), %r15d
	cmpl	$1, %r15d
	jg	.L9471
.L9449:
	movl	6080(%rsp), %eax
	testl	%eax, %eax
	jmp	.L15394
.L9466:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L9467
.L9464:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15173
.L9446:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6040(%rsp)
	jmp	.L9426
.L9444:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6064(%rsp)
	jmp	.L9443
.L9424:
	movl	$1, %edx
	jmp	.L9423
.L9422:
	movl	$1, %ecx
	jmp	.L9421
.L9420:
	movl	$1, %ecx
	jmp	.L9419
.L9397:
	movq	928(%rsp), %r15
	xorl	%esi, %esi
	movq	8(%r15), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	928(%rsp), %rdx
	movq	%rax, 8(%rdx)
	movq	928(%rsp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	928(%rsp), %r9
	movq	%rax, 16(%r9)
	jmp	.L9393
.L15969:
	movq	%rdx, %rcx
	movzbl	2(%rdx), %edx
	cmpb	$16, %dl
	je	.L9391
	movq	8(%rcx), %rbp
	cmpw	$59, (%rbp)
	je	.L15974
.L9391:
	cmpl	$55, %eax
	jne	.L9394
	movq	928(%rsp), %rbp
	xorl	%esi, %esi
	movq	8(%rbp), %rdi
	call	protect_from_queue
	movq	%rax, 8(%rbp)
	jmp	.L9393
.L15974:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%rcx)
	cmpq	$0, 16(%rbp)
	je	.L9393
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	928(%rsp), %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L15172:
	movq	%rbx, 928(%rsp)
	jmp	.L9393
.L9390:
	movq	928(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L9398
	movq	8(%rcx), %rbx
	jmp	.L15172
.L9398:
	movq	928(%rsp), %rbx
	movq	24(%rbx), %rsi
	testq	%rsi, %rsi
	je	.L9399
	movq	%rsi, 928(%rsp)
	jmp	.L9393
.L9399:
	movq	928(%rsp), %r11
	movq	8(%r11), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	928(%rsp), %rcx
	movq	%rax, %rdi
	movq	8(%rcx), %rsi
	movq	%rax, 24(%rcx)
	call	gen_move_insn
	movq	928(%rsp), %r10
	movq	%rax, %rdi
	movq	16(%r10), %rsi
	call	emit_insn_before
	movq	928(%rsp), %r13
	movq	24(%r13), %r8
	movq	%r8, 928(%rsp)
	jmp	.L9393
.L9387:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L9383
.L15968:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L9381
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L15975
.L9381:
	cmpl	$55, %eax
	jne	.L9384
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L9383
.L15975:
	movq	8(%rbp), %r8
	movq	%r8, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L9383
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r13, 936(%rsp)
	jmp	.L9383
.L9380:
	cmpq	$0, 16(%r12)
	jne	.L9388
	movq	8(%r12), %r10
	movq	%r10, 936(%rsp)
	jmp	.L9383
.L9388:
	movq	24(%r12), %rcx
	testq	%rcx, %rcx
	movq	%rcx, 936(%rsp)
	jne	.L9383
	movq	8(%r12), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rsi
	movq	%rsi, 936(%rsp)
	jmp	.L9383
.L9377:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L9373
.L15967:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L9373
.L9370:
	cmpq	$0, 16(%r14)
	jne	.L9378
	movq	8(%r14), %r13
	movq	%r13, 944(%rsp)
	jmp	.L9373
.L9378:
	movq	24(%r14), %rbp
	testq	%rbp, %rbp
	movq	%rbp, 944(%rsp)
	jne	.L9373
	movq	8(%r14), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r15
	movq	%r15, 944(%rsp)
	jmp	.L9373
	.p2align 6,,7
.L9359:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L9355
.L15945:
	jne	.L9356
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L9355
	.p2align 6,,7
.L9352:
	cmpq	$0, 16(%r14)
	jne	.L9360
	movq	8(%r14), %r14
	jmp	.L9355
.L9360:
	movq	24(%r14), %rax
	testq	%rax, %rax
	je	.L9361
	movq	%rax, %r14
	jmp	.L9355
.L9361:
	movq	8(%r14), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L9355
	.p2align 6,,7
.L15944:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	3416(%rsp), %rdi
	movzbl	2(%r14), %edx
	movq	%rax, %rsi
	jmp	.L15171
.L9331:
	movl	(%r14), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L15976
	movzbl	2(%r14), %edx
	movq	3416(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	%r14, %rsi
	call	expand_expr
	cmpw	$51, (%r14)
	movq	%rax, %r12
	je	.L15977
.L9349:
	movzwl	(%r12), %edx
	leal	-56(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L9350
	cmpw	$46, %dx
	je	.L9350
	cmpw	$47, %dx
	je	.L9350
	cmpw	$49, %dx
	je	.L9350
	cmpw	$113, %dx
	jne	.L9296
	jmp	.L9350
.L15977:
	cmpl	$63, 8(%r14)
	jle	.L9296
	jmp	.L9349
.L15976:
	movq	3416(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	8(%r14), %rdi
	movzbl	3(%r14), %edx
	movq	%rax, %r12
	movq	%rax, %rsi
	xorl	%eax, %eax
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	jmp	.L9295
.L9340:
	movl	$1, %ebx
	jmp	.L9334
.L9332:
	xorl	%ebx, %ebx
	jmp	.L9334
.L9338:
	movq	8(%r14), %rdi
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L9340
	movq	16(%r14), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L9334
	jmp	.L9340
.L15943:
	movzbl	2(%r14), %eax
	cmpb	$16, %al
	je	.L9324
	movl	cse_not_expected(%rip), %r15d
	movq	3416(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	%al, %edx
	testl	%r15d, %r15d
	cmove	%r14, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	call	expand_expr
	movq	%rax, %r12
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L9350
	testb	%al, %al
	je	.L9350
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L15358
.L15942:
	cmpb	$16, 2(%r14)
	jne	.L9297
	call	gen_label_rtx
	movq	%rax, %r13
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r15
	testq	%rbx, %rbx
	jne	.L9301
.L14445:
	movzwl	(%r14), %eax
	movq	%r14, %r12
	cmpl	$59, %eax
	je	.L9303
	cmpl	$55, %eax
	je	.L15978
.L9307:
	cmpl	$63, %eax
	je	.L9310
	cmpl	$66, %eax
	je	.L9310
.L9306:
	movq	3416(%rsp), %r14
	xorl	%eax, %eax
	movq	%r13, %rsi
	incl	inhibit_defer_pop(%rip)
	movq	32(%r14), %rdi
	call	jumpifnot
	movq	40(%r14), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movl	%ebp, %edx
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L9316
.L14447:
	movq	%r15, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r13, %rdi
	call	emit_label
	xorl	%eax, %eax
	movl	%ebp, %edx
	movq	3416(%rsp), %r13
	movq	%r12, %rsi
	movq	48(%r13), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L9321
.L14449:
	movq	%r15, %rdi
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L9295
.L9321:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rbp
	movq	%rax, 16(%rbx)
	testq	%rbp, %rbp
	movq	%rbp, pending_chain(%rip)
	movq	%rbp, %rbx
	jne	.L9321
	jmp	.L14449
.L9316:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdx
	movq	%rax, 16(%rbx)
	testq	%rdx, %rdx
	movq	%rdx, pending_chain(%rip)
	movq	%rdx, %rbx
	jne	.L9316
	jmp	.L14447
.L9310:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L9306
.L15978:
	jne	.L9307
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L9306
.L9303:
	cmpq	$0, 16(%r14)
	jne	.L9311
	movq	8(%r14), %r12
	jmp	.L9306
.L9311:
	movq	24(%r14), %rax
	testq	%rax, %rax
	je	.L9312
	movq	%rax, %r12
	jmp	.L9306
.L9312:
	movq	8(%r14), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	%rax, 24(%r12)
	movq	%rax, %rdi
	movq	8(%r14), %rsi
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r12
	jmp	.L9306
	.p2align 6,,7
.L9301:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdi
	movq	%rax, 16(%rbx)
	testq	%rdi, %rdi
	movq	%rdi, pending_chain(%rip)
	movq	%rdi, %rbx
	jne	.L9301
	jmp	.L14445
.L15941:
	movq	32(%rdx), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L9293
.L14443:
	movq	3416(%rsp), %r11
	movq	%r14, %rsi
	movl	%ebp, %edx
	xorl	%eax, %eax
	movq	40(%r11), %rdi
	call	store_expr
	movq	%rax, %r12
	jmp	.L9295
.L9293:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r12
	movq	%rax, 16(%rbx)
	testq	%r12, %r12
	movq	%r12, pending_chain(%rip)
	movq	%r12, %rbx
	jne	.L9293
	jmp	.L14443
.L15940:
	movq	16(%rdi), %r14
	cmpw	$46, (%r14)
	jne	.L9286
	movq	8(%rdi), %rax
	cmpq	virtual_incoming_args_rtx(%rip), %rax
	je	.L9285
	cmpq	virtual_stack_vars_rtx(%rip), %rax
	jne	.L9286
	jmp	.L9285
	.p2align 6,,7
.L9278:
	movq	3416(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movl	%r12d, %r9d
	movl	%r13d, %ecx
	movl	3408(%rsp), %r11d
	movq	%rax, %r8
	movq	%rax, %r14
	movq	%rbx, %rdi
	movl	%ebp, %esi
	movl	%r15d, %edx
	xorl	%eax, %eax
	movl	%r11d, (%rsp)
	call	store_bit_field
	movl	960(%rsp), %eax
	testl	%eax, %eax
	je	.L9280
	movl	956(%rsp), %r9d
	testl	%r9d, %r9d
	je	.L9281
	movl	(%rbx), %eax
	andl	$134283263, %eax
	cmpl	$134217783, %eax
	je	.L9281
	movl	3412(%rsp), %r15d
	testl	%r15d, %r15d
	je	.L9282
	movl	956(%rsp), %edx
	xorl	%esi, %esi
	movl	$46, %edi
	xorl	%eax, %eax
	call	gen_rtx
	xorl	%edx, %edx
	movq	%r14, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	expand_and
.L15177:
	movq	%rax, %rbx
	jmp	.L9276
.L9282:
	movzbl	2(%r14), %r13d
	testl	%r13d, %r13d
	cmove	960(%rsp), %r13d
	xorl	%esi, %esi
	movslq	%r13d,%rbx
	movl	mode_size(,%rbx,4), %edi
	sall	$3, %edi
	subl	%ebp, %edi
	call	build_int_2_wide
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	%rax, %rbp
	movl	%r13d, %esi
	movq	%r14, %rdx
	movq	%rax, %rcx
	movl	$77, %edi
	xorl	%eax, %eax
	call	expand_shift
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movl	$78, %edi
	movl	%r13d, %esi
	movq	%rbp, %rcx
	xorl	%eax, %eax
	call	expand_shift
	jmp	.L15177
.L9281:
	movl	3408(%rsp), %edx
	movl	3412(%rsp), %ecx
	movq	%rbx, %rdi
	movl	960(%rsp), %r9d
	movl	%ebp, %esi
	xorl	%r8d, %r8d
	xorl	%eax, %eax
	movl	$0, (%rsp)
	movl	%r12d, 8(%rsp)
	movl	%edx, 16(%rsp)
	movl	%r15d, %edx
	call	extract_bit_field
	jmp	.L15177
.L9280:
	movq	const0_rtx(%rip), %rbx
	jmp	.L9276
.L15939:
	movzwl	(%rbx), %eax
	cmpw	$51, %ax
	je	.L9274
	cmpw	$53, %ax
	jne	.L9273
.L9274:
	movzbl	2(%rbx), %edi
	xorl	%edx, %edx
	movslq	%edi,%r13
	movl	mode_size(,%r13,4), %esi
	call	assign_stack_temp
	movq	%rax, %rdi
	movq	%rax, %r13
	call	copy_rtx
	movb	$16, 2(%rax)
	movq	%rax, %r14
	movzbq	2(%rbx), %rsi
	movl	mode_size(,%rsi,4), %eax
	sall	$3, %eax
	cmpl	%eax, %ebp
	je	.L9275
	movq	%r13, %rdi
	movq	%rbx, %rsi
	call	emit_move_insn
.L9275:
	movl	%r12d, 8(%rsp)
	movq	3416(%rsp), %r8
	movq	%r14, %rdi
	movl	3408(%rsp), %r12d
	movl	%ebp, %esi
	movl	%r15d, %edx
	movl	$16, %ecx
	xorl	%r9d, %r9d
	xorl	%eax, %eax
	movl	$0, (%rsp)
	movl	%r12d, 16(%rsp)
	call	store_field
	movq	%r13, %rsi
	movq	%rbx, %rdi
	call	emit_move_insn
	jmp	.L9276
.L9270:
	movl	$0, 960(%rsp)
	jmp	.L9271
.L15938:
	orb	$8, 3(%rbx)
	jmp	.L9268
.L15937:
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	cmpw	$55, (%rbx)
	jne	.L15283
	movl	$4, %edi
	movq	%rax, %rsi
	call	force_reg
	movq	8(%rbx), %rdx
	movl	$4, %esi
	movq	%rax, %rcx
	movl	$63, %edi
	xorl	%eax, %eax
	call	gen_rtx
	xorl	%esi, %esi
	movq	%rbx, %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	movq	%rax, %rbx
	jmp	.L9266
.L15936:
	movq	%r12, %rdi
	call	stabilize_reference
	movq	%rax, %r12
	jmp	.L9265
.L15935:
	xorl	%edx, %edx
	xorl	%eax, %eax
	movl	$1, %esi
	call	mode_for_size
	cmpl	$16, %eax
	cmovne	%eax, %ebx
	movl	%ebx, 964(%rsp)
	jmp	.L9262
	.p2align 6,,7
.L15934:
	movq	40(%r12), %rcx
	cmpb	$25, 16(%rcx)
	jne	.L9256
	movq	8(%r12), %rbx
	movq	32(%rbx), %rax
	cmpb	$25, 16(%rax)
	jne	.L9256
	movl	24(%rax), %eax
	imull	24(%rcx), %eax
	jmp	.L15170
	.p2align 6,,7
.L15929:
	movl	flag_volatile(%rip), %eax
	testl	%eax, %eax
	je	.L9239
	movl	$1, (%r15)
	movzbl	16(%r12), %edx
	jmp	.L9239
.L9234:
	movl	24(%rcx), %eax
	movl	%eax, 5524(%rsp)
	jmp	.L9233
.L15928:
	movzbl	17(%r14), %ebx
	movq	40(%r14), %rcx
	shrb	$6, %bl
	movl	%ebx, %esi
	andl	$1, %esi
	movl	%esi, 3412(%rsp)
	jmp	.L9230
.L15927:
	movq	40(%r14), %rax
	testb	$16, 53(%rax)
	movq	40(%rax), %rcx
	jne	.L9229
	movzbl	52(%rax), %edx
	movl	%edx, 964(%rsp)
.L9229:
	movzbl	17(%rax), %r10d
	shrb	$6, %r10b
	movl	%r10d, %r8d
	andl	$1, %r8d
	movl	%r8d, 3412(%rsp)
	jmp	.L9230
.L15884:
	movq	3416(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	jmp	.L9225
.L15883:
	movq	3664(%rsp), %rdi
	xorl	%ebp, %ebp
	call	stabilize_reference
	movq	3648(%rsp), %r10
	movq	%rax, %r12
	movq	128(%r10), %rbx
	testq	%rbx, %rbx
	je	.L14439
.L9219:
	movq	32(%rbx), %rcx
	cmpb	$3, 16(%rcx)
	je	.L15979
	movq	8(%rcx), %rsi
	movl	$37, %edi
	movq	%r12, %rdx
	xorl	%eax, %eax
	call	build
	movq	%rbp, %rdx
	movq	24(%rbx), %rdi
	movq	%rax, %rsi
	call	tree_cons
.L15168:
	movq	(%rbx), %rbx
	movq	%rax, %rbp
	testq	%rbx, %rbx
	jne	.L9219
.L14439:
	movq	%rbp, 1088(%rsp)
	jmp	.L9209
.L15979:
	movq	%r12, %rdi
	movq	%rcx, %rsi
	xorl	%eax, %eax
	call	init_noncopied_parts
	movq	%rbp, %rdi
	movq	%rax, %rsi
	call	chainon
	jmp	.L15168
.L9211:
	movl	$1, %eax
	jmp	.L9212
.L8829:
	movq	56(%rsp), %rdi
	movq	%r12, %rsi
	xorl	%eax, %eax
	call	convert_move
	jmp	.L8817
.L8828:
	cmpb	$16, %al
	je	.L15980
.L9084:
	movq	56(%rsp), %rdi
	jmp	.L15166
.L15980:
	movq	3656(%rsp), %rdi
	cmpb	$28, 16(%rdi)
	je	.L15981
	cmpb	$16, %al
	jne	.L9084
	movq	3656(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, 1224(%rsp)
	call	expr_size
	movq	56(%rsp), %r15
	movq	3656(%rsp), %rbp
	movq	%rax, %r13
	movq	8(%rbp), %r11
	movl	48(%r11), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r15)
	movl	%eax, 1220(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	56(%rsp), %rsi
	movq	%rsi, 1232(%rsp)
	movzwl	(%rsi), %eax
	cmpl	$59, %eax
	je	.L9087
	cmpl	$55, %eax
	je	.L15982
	cmpl	$63, %eax
	je	.L9094
	cmpl	$66, %eax
	je	.L9094
.L9090:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L9097
	cmpl	$55, %eax
	je	.L15983
.L9101:
	cmpl	$63, %eax
	je	.L9104
	cmpl	$66, %eax
	je	.L9104
.L9100:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L9107
	cmpl	$55, %eax
	je	.L15984
.L9111:
	cmpl	$63, %eax
	je	.L9114
	cmpl	$66, %eax
	je	.L9114
.L9110:
	movq	1232(%rsp), %rax
	cmpw	$55, (%rax)
	jne	.L15283
	movq	1224(%rsp), %rdi
	cmpw	$55, (%rdi)
	jne	.L15283
	testq	%r13, %r13
	je	.L15283
	cmpw	$46, (%r13)
	je	.L15985
.L9120:
	movl	1220(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 3440(%rsp)
	testl	%ebp, %ebp
	je	.L14437
.L9206:
	movslq	%ebp,%rax
	movq	%rax, 3432(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L9194
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L9198
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L9194
.L9198:
	movslq	%edx,%r15
	leaq	(%r15,%r15,4), %r14
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15986
.L9199:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L15987
.L9200:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L9201
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	3440(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L9194
.L9201:
	call	get_last_insn
	movl	$1, %edx
	movq	%r13, %rsi
	movq	%rax, 3424(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15988
.L9202:
	movq	1232(%rsp), %rdi
	xorl	%eax, %eax
	movq	1224(%rsp), %rsi
	movq	%rbx, %rdx
	movq	3440(%rsp), %rcx
	call	*insn_gen_function(,%r15,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14966
	movq	3424(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L9194:
	movq	3432(%rsp), %r14
	movl	mode_wider_mode(,%r14,4), %ebp
	testl	%ebp, %ebp
	jne	.L9206
.L14437:
	movl	$4, %edi
	movq	%r13, %rsi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movq	1232(%rsp), %rbx
	movl	$3, %ecx
	movq	1224(%rsp), %rdx
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	8(%rdx), %rbp
	xorl	%edx, %edx
	movl	$4, 24(%rsp)
	movl	$4, 8(%rsp)
	movq	%rax, 16(%rsp)
	movq	%rbp, (%rsp)
.L15165:
	movq	8(%rbx), %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	call	emit_library_call
	jmp	.L8817
.L14966:
	call	emit_insn
	jmp	.L8817
.L15988:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L9202
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L9202
.L15987:
	xorl	%eax, %eax
	movq	1224(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L9194
	jmp	.L9200
.L15986:
	xorl	%eax, %eax
	movq	1232(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L9194
	jmp	.L9199
.L15985:
	movl	8(%r13), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1220(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1220(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L9134:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14428
.L9130:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L9130
.L14428:
	testl	%ecx, %ecx
	je	.L9123
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L9132
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L9132
	movl	%edi, %eax
	movl	%edx, %r15d
	xorl	%edx, %edx
	divl	%r15d
	addl	%eax, %r9d
	movl	%edx, %edi
.L9132:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L9134
.L9123:
	decl	%r9d
	jg	.L9120
	movq	1224(%rsp), %rcx
	movq	1232(%rsp), %rbp
	movl	%r10d, %r13d
	movl	$9, %r14d
	movq	8(%rbp), %rbx
	movq	8(%rcx), %rdi
	movq	%rcx, 6184(%rsp)
	movl	$0, 6212(%rsp)
	movq	%rbp, 6160(%rsp)
	xorl	%ecx, %ecx
	movq	%rbx, 6168(%rsp)
	movq	%rdi, 6192(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L9137
	cmpw	$88, %dx
	je	.L9137
	cmpw	$87, %dx
	je	.L9137
.L9136:
	movl	%ecx, 6176(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L9139
	cmpw	$88, %dx
	je	.L9139
	cmpw	$87, %dx
	je	.L9139
.L9138:
	movl	%ecx, 6200(%rsp)
	movl	$0, 6204(%rsp)
	movl	$0, 6180(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L9141
	cmpw	$87, %ax
	je	.L9141
.L9140:
	testl	%edx, %edx
	movl	%edx, 6216(%rsp)
	je	.L9142
	movl	%r10d, 6212(%rsp)
.L9142:
	movl	%r10d, 6208(%rsp)
	movl	6200(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L9144
	movl	6176(%rsp), %edx
	testl	%edx, %edx
	jne	.L9143
.L9144:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1220(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r15d
	cmovl	1220(%rsp), %ebp
.L9158:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14431
.L9154:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L9154
.L14431:
	testl	%ecx, %ecx
	je	.L9147
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L9156
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r15d, %eax
	cmpl	%eax, %ebp
	jl	.L9156
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L9156:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L9158
.L9147:
	cmpl	$2, %r9d
	jle	.L9143
	testl	%r10d, %r10d
	jne	.L9160
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L9161
	cmpw	$46, %dx
	je	.L9161
	cmpw	$47, %dx
	je	.L9161
	cmpw	$49, %dx
	je	.L9161
	cmpw	$113, %dx
	je	.L9161
.L9160:
	movl	6176(%rsp), %eax
	testl	%eax, %eax
	jne	.L9143
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L9163
	cmpw	$46, %dx
	je	.L9163
	cmpw	$47, %dx
	je	.L9163
	cmpw	$49, %dx
	je	.L9163
	cmpw	$113, %dx
	je	.L9163
.L9143:
	cmpl	$8, 1220(%rsp)
	movl	$8, %eax
	cmovl	1220(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 1220(%rsp)
	jle	.L9166
.L9188:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r13d, %r13d
	testl	%edx, %edx
	je	.L14434
.L9173:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r14d, mode_size(%rbx)
	cmovl	%edx, %r13d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L9173
.L14434:
	testl	%r13d, %r13d
	je	.L9166
	movslq	%r13d,%r14
	movq	%r14, %rdi
	salq	$4, %rdi
	addq	mov_optab(%rip), %rdi
	movl	8(%rdi), %edx
	cmpl	$210, %edx
	je	.L9175
	movl	mode_size(,%r14,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1220(%rsp)
	jl	.L9175
	movslq	%edx,%r11
	cmpl	%ebp, 6208(%rsp)
	leaq	6160(%rsp), %rbx
	movq	insn_gen_function(,%r11,8), %r15
	movq	%r15, 3448(%rsp)
	jl	.L9175
	movl	6216(%rsp), %edx
.L9186:
	testl	%edx, %edx
	je	.L9180
	subl	%ebp, 52(%rbx)
.L9180:
	movl	16(%rbx), %r9d
	testl	%r9d, %r9d
	je	.L9181
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15164:
	movl	40(%rbx), %ecx
	movq	%rax, %r15
	testl	%ecx, %ecx
	je	.L9183
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L9184:
	movq	%rax, %rsi
	movq	%r15, %rdi
	xorl	%eax, %eax
	call	*3448(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L9185
	addl	%ebp, 52(%rbx)
.L9185:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L9186
.L9175:
	movl	mode_size(,%r14,4), %r14d
	cmpl	$1, %r14d
	jg	.L9188
.L9166:
	movl	6208(%rsp), %eax
	testl	%eax, %eax
.L15393:
	je	.L8817
	jmp	.L15283
.L9183:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L9184
.L9181:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15164
.L9163:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6168(%rsp)
	jmp	.L9143
.L9161:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6192(%rsp)
	jmp	.L9160
.L9141:
	movl	$1, %edx
	jmp	.L9140
.L9139:
	movl	$1, %ecx
	jmp	.L9138
.L9137:
	movl	$1, %ecx
	jmp	.L9136
.L9114:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L9110
.L15984:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L9108
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L15989
.L9108:
	cmpl	$55, %eax
	jne	.L9111
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L9110
.L15989:
	movq	8(%rbp), %r14
	movq	%r14, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L9110
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r15
	call	gen_move_insn
	movq	%r15, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L9110
.L9107:
	cmpq	$0, 16(%r13)
	jne	.L9115
	movq	8(%r13), %r13
	jmp	.L9110
.L9115:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L9116
	movq	%rsi, %r13
	jmp	.L9110
.L9116:
	movq	8(%r13), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L9110
.L9104:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L9100
.L15983:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L9098
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L15990
.L9098:
	cmpl	$55, %eax
	jne	.L9101
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L9100
.L15990:
	movq	8(%rbp), %r10
	movq	%r10, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L9100
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L15163:
	movq	%rbx, 1224(%rsp)
	jmp	.L9100
.L9097:
	cmpq	$0, 16(%r12)
	jne	.L9105
	movq	8(%r12), %rbx
	jmp	.L15163
.L9105:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	movq	%rsi, 1224(%rsp)
	jne	.L9100
	movq	8(%r12), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r9
	movq	%r9, 1224(%rsp)
	jmp	.L9100
.L9094:
	movq	56(%rsp), %rbx
	xorl	%esi, %esi
	movq	8(%rbx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	56(%rsp), %r9
	movq	16(%r9), %rdi
	movq	%rax, 8(%r9)
	call	protect_from_queue
	movq	56(%rsp), %rsi
	movq	%rax, 16(%rsi)
	jmp	.L9090
.L15982:
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	56(%rsp), %r10
	movq	%rax, 8(%r10)
	jmp	.L9090
.L9087:
	movq	56(%rsp), %rbx
	cmpq	$0, 16(%rbx)
	jne	.L9095
	movq	8(%rbx), %rax
	movq	%rax, 1232(%rsp)
	jmp	.L9090
.L9095:
	movq	56(%rsp), %rdx
	movq	24(%rdx), %r14
	testq	%r14, %r14
	movq	%r14, 1232(%rsp)
	jne	.L9090
	movq	56(%rsp), %rbp
	movq	8(%rbp), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	56(%rsp), %r15
	movq	%rax, %rdi
	movq	8(%r15), %rsi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	56(%rsp), %rcx
	movq	%rax, %rdi
	movq	16(%rcx), %rsi
	call	emit_insn_before
	movq	56(%rsp), %r8
	movq	24(%r8), %rdi
	movq	%rdi, 1232(%rsp)
	jmp	.L9090
.L15981:
	xorl	%eax, %eax
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, %r15
	je	.L15991
.L8833:
	movl	$8, %edi
	call	size_int
	movl	$57, %edi
	movq	3656(%rsp), %rbx
	movq	%rax, %rdx
	movq	8(%rbx), %rcx
	movq	32(%rcx), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	3656(%rsp), %r10
	movq	%rax, %r13
	movl	32(%r10), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%r13, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movq	56(%rsp), %rdx
	movq	3656(%rsp), %r8
	movq	$0, 1240(%rsp)
	movq	%rax, 1264(%rsp)
	movq	%rax, %r14
	movq	8(%r8), %r9
	movl	48(%r9), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%rdx)
	movl	%eax, 1260(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	56(%rsp), %rbx
	movq	%rbx, 1272(%rsp)
	movzwl	(%rbx), %eax
	cmpl	$59, %eax
	je	.L8959
	cmpl	$55, %eax
	je	.L15992
	cmpl	$63, %eax
	je	.L8966
	cmpl	$66, %eax
	je	.L8966
.L8962:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L8969
	cmpl	$55, %eax
	je	.L15993
.L8973:
	cmpl	$63, %eax
	je	.L8976
	cmpl	$66, %eax
	je	.L8976
.L8972:
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L8979
	cmpl	$55, %eax
	je	.L15994
.L8983:
	cmpl	$63, %eax
	je	.L8986
	cmpl	$66, %eax
	je	.L8986
.L8982:
	movq	1272(%rsp), %r8
	cmpw	$55, (%r8)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 1264(%rsp)
	je	.L15283
	movq	1264(%rsp), %rdi
	cmpw	$46, (%rdi)
	je	.L15995
.L8992:
	movl	1260(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 3480(%rsp)
	testl	%ebp, %ebp
	je	.L14425
.L9078:
	movslq	%ebp,%r13
	movq	%r13, %rax
	movq	%r13, 3472(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L9066
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L9070
	movq	1264(%rsp), %r10
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r10)
	ja	.L9066
.L9070:
	movslq	%edx,%rsi
	leaq	(%rsi,%rsi,4), %r13
	movq	%rsi, 3464(%rsp)
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L15996
.L9071:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L15997
.L9072:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L9073
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	3480(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L9066
.L9073:
	call	get_last_insn
	movl	$1, %edx
	movq	1264(%rsp), %rsi
	movq	%rax, 3456(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L15998
.L9074:
	movq	3464(%rsp), %r9
	movq	1272(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	3480(%rsp), %rcx
	call	*insn_gen_function(,%r9,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14965
	movq	3456(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L9066:
	movq	3472(%rsp), %rbx
	movl	mode_wider_mode(,%rbx,4), %ebp
	testl	%ebp, %ebp
	jne	.L9078
.L14425:
	movq	1264(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	movq	1272(%rsp), %rax
	movq	%rdi, (%rsp)
	movq	memcpy_libfunc(%rip), %rdi
	movq	8(%rax), %r8
	xorl	%eax, %eax
	call	emit_library_call
.L9076:
	cmpw	$46, (%r14)
	je	.L15999
	movq	56(%rsp), %r8
	movl	$4, %edi
	movq	8(%r8), %rsi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movl	$4, %edi
	movq	%r14, %rcx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movl	$4, %edi
	movq	%r15, %rdx
	movq	%r14, %rcx
	movq	%rax, %r12
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 1240(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L9080:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L9081
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%r12, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L9081:
	cmpq	$0, 1240(%rsp)
	je	.L8817
	movq	1240(%rsp), %rdi
	call	emit_label
	jmp	.L8817
.L15999:
	movq	56(%rsp), %rcx
	movq	3656(%rsp), %rdx
	movq	8(%rcx), %rdi
	movl	32(%rdx), %esi
	call	plus_constant_wide
	movq	%r15, %rdi
	movq	3656(%rsp), %r14
	movq	%rax, %r12
	movl	32(%r14), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L9080
.L14965:
	call	emit_insn
	jmp	.L9076
.L15998:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L9074
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L9074
.L15997:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L9066
	jmp	.L9072
.L15996:
	xorl	%eax, %eax
	movq	1272(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L9066
	jmp	.L9071
.L15995:
	movl	8(%rdi), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1260(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1260(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L9006:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14416
.L9002:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L9002
.L14416:
	testl	%ecx, %ecx
	je	.L8995
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L9004
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L9004
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L9004:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L9006
.L8995:
	decl	%r9d
	jg	.L8992
	movq	1272(%rsp), %rcx
	movq	8(%r12), %rdi
	movl	%r10d, %r13d
	movq	8(%rcx), %rbx
	movq	%r12, 6184(%rsp)
	movq	%rcx, 6160(%rsp)
	movl	$0, 6212(%rsp)
	movq	%rdi, 6192(%rsp)
	xorl	%ecx, %ecx
	movl	$9, 1256(%rsp)
	movq	%rbx, 6168(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L9009
	cmpw	$88, %dx
	je	.L9009
	cmpw	$87, %dx
	je	.L9009
.L9008:
	movl	%ecx, 6176(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L9011
	cmpw	$88, %dx
	je	.L9011
	cmpw	$87, %dx
	je	.L9011
.L9010:
	movl	%ecx, 6200(%rsp)
	movl	$0, 6204(%rsp)
	movl	$0, 6180(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L9013
	cmpw	$87, %ax
	je	.L9013
.L9012:
	testl	%edx, %edx
	movl	%edx, 6216(%rsp)
	je	.L9014
	movl	%r10d, 6212(%rsp)
.L9014:
	movl	6200(%rsp), %eax
	movl	%r10d, 6208(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L9016
	movl	6176(%rsp), %ebp
	testl	%ebp, %ebp
	jne	.L9015
.L9016:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1260(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1260(%rsp), %ebp
.L9030:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14419
.L9026:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L9026
.L14419:
	testl	%ecx, %ecx
	je	.L9019
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L9028
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L9028
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L9028:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L9030
.L9019:
	cmpl	$2, %r9d
	jle	.L9015
	testl	%r10d, %r10d
	jne	.L9032
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L9033
	cmpw	$46, %dx
	je	.L9033
	cmpw	$47, %dx
	je	.L9033
	cmpw	$49, %dx
	je	.L9033
	cmpw	$113, %dx
	je	.L9033
.L9032:
	movl	6176(%rsp), %esi
	testl	%esi, %esi
	jne	.L9015
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L9035
	cmpw	$46, %dx
	je	.L9035
	cmpw	$47, %dx
	je	.L9035
	cmpw	$49, %dx
	je	.L9035
	cmpw	$113, %dx
	je	.L9035
.L9015:
	cmpl	$8, 1260(%rsp)
	movl	$8, %eax
	cmovl	1260(%rsp), %eax
	cmpl	$1, 1256(%rsp)
	movl	%eax, 1260(%rsp)
	jle	.L9038
.L9060:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14422
.L9045:
	movslq	%edx,%rbx
	movl	1256(%rsp), %eax
	salq	$2, %rbx
	cmpl	%eax, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L9045
.L14422:
	testl	%r12d, %r12d
	je	.L9038
	movslq	%r12d,%r13
	movq	%r13, %rdi
	salq	$4, %rdi
	addq	mov_optab(%rip), %rdi
	movl	8(%rdi), %edx
	cmpl	$210, %edx
	je	.L9047
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1260(%rsp)
	jl	.L9047
	movslq	%edx,%rcx
	cmpl	%ebp, 6208(%rsp)
	leaq	6160(%rsp), %rbx
	movq	insn_gen_function(,%rcx,8), %rdx
	movq	%rdx, 3488(%rsp)
	jl	.L9047
	movl	6216(%rsp), %edx
.L9058:
	testl	%edx, %edx
	je	.L9052
	subl	%ebp, 52(%rbx)
.L9052:
	movl	16(%rbx), %r8d
	testl	%r8d, %r8d
	je	.L9053
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15162:
	movl	40(%rbx), %r11d
	movq	%rax, 1248(%rsp)
	testl	%r11d, %r11d
	je	.L9055
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L9056:
	movq	%rax, %rsi
	movq	1248(%rsp), %rdi
	xorl	%eax, %eax
	call	*3488(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L9057
	addl	%ebp, 52(%rbx)
.L9057:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L9058
.L9047:
	movl	mode_size(,%r13,4), %r12d
	movl	%r12d, 1256(%rsp)
	decl	%r12d
	jg	.L9060
.L9038:
	movl	6208(%rsp), %ebp
	testl	%ebp, %ebp
	je	.L9076
	jmp	.L15283
.L9055:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L9056
.L9053:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15162
.L9035:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6168(%rsp)
	jmp	.L9015
.L9033:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6192(%rsp)
	jmp	.L9032
.L9013:
	movl	$1, %edx
	jmp	.L9012
.L9011:
	movl	$1, %ecx
	jmp	.L9010
.L9009:
	movl	$1, %ecx
	jmp	.L9008
.L8986:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L8982
.L15994:
	movzbl	2(%r14), %edx
	cmpb	$16, %dl
	je	.L8980
	movq	8(%r14), %rbp
	cmpw	$59, (%rbp)
	je	.L16000
.L8980:
	cmpl	$55, %eax
	jne	.L8983
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L8982
.L16000:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r14)
	cmpq	$0, 16(%rbp)
	je	.L8982
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L15161:
	movq	%rbx, 1264(%rsp)
	jmp	.L8982
.L8979:
	cmpq	$0, 16(%r14)
	jne	.L8987
	movq	8(%r14), %rax
	movq	%rax, 1264(%rsp)
	jmp	.L8982
.L8987:
	movq	24(%r14), %rdx
	testq	%rdx, %rdx
	movq	%rdx, 1264(%rsp)
	jne	.L8982
	movq	8(%r14), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rbx
	jmp	.L15161
.L8976:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L8972
.L15993:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L8970
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16001
.L8970:
	cmpl	$55, %eax
	jne	.L8973
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L8972
.L16001:
	movq	8(%rbp), %r11
	movq	%r11, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L8972
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	%r13, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L8972
.L8969:
	cmpq	$0, 16(%r12)
	jne	.L8977
	movq	8(%r12), %r12
	jmp	.L8972
.L8977:
	movq	24(%r12), %rax
	testq	%rax, %rax
	je	.L8978
	movq	%rax, %r12
	jmp	.L8972
.L8978:
	movq	8(%r12), %rbp
	movzbl	2(%rbp), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L8972
.L8966:
	movq	56(%rsp), %r11
	xorl	%esi, %esi
	movq	8(%r11), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	56(%rsp), %rbp
	movq	%rax, 8(%rbp)
	movq	56(%rsp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	56(%rsp), %rsi
	movq	%rax, 16(%rsi)
	jmp	.L8962
.L15992:
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbx)
	jmp	.L8962
.L8959:
	movq	56(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L8967
	movq	8(%rcx), %rdi
	movq	%rdi, 1272(%rsp)
	jmp	.L8962
.L8967:
	movq	56(%rsp), %r9
	movq	24(%r9), %rdx
	testq	%rdx, %rdx
	movq	%rdx, 1272(%rsp)
	jne	.L8962
	movq	56(%rsp), %rsi
	movq	8(%rsi), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	56(%rsp), %rcx
	movq	%rax, %rdi
	movq	8(%rcx), %rsi
	movq	%rax, 24(%rcx)
	call	gen_move_insn
	movq	56(%rsp), %r10
	movq	%rax, %rdi
	movq	16(%r10), %rsi
	call	emit_insn_before
	movq	56(%rsp), %r13
	movq	24(%r13), %r8
	movq	%r8, 1272(%rsp)
	jmp	.L8962
.L15991:
	movq	3656(%rsp), %r8
	movl	32(%r8), %eax
	cmpl	%eax, 8(%r15)
	jge	.L8833
	movq	%r12, 1288(%rsp)
	movq	56(%rsp), %rsi
	movq	8(%r8), %r13
	movl	48(%r13), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%rsi)
	movl	%eax, 1284(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	56(%rsp), %rdx
	movq	%rdx, 1296(%rsp)
	movzwl	(%rdx), %eax
	cmpl	$59, %eax
	je	.L8836
	cmpl	$55, %eax
	je	.L16002
	cmpl	$63, %eax
	je	.L8843
	cmpl	$66, %eax
	je	.L8843
.L8839:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L8846
	cmpl	$55, %eax
	je	.L16003
.L8850:
	cmpl	$63, %eax
	je	.L8853
	cmpl	$66, %eax
	je	.L8853
.L8849:
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L8856
	cmpl	$55, %eax
	je	.L16004
.L8860:
	cmpl	$63, %eax
	je	.L8863
	cmpl	$66, %eax
	je	.L8863
.L8859:
	movq	1296(%rsp), %r9
	cmpw	$55, (%r9)
	jne	.L15283
	movq	1288(%rsp), %rbp
	cmpw	$55, (%rbp)
	jne	.L15283
	testq	%r15, %r15
	je	.L15283
	cmpw	$46, (%r15)
	je	.L16005
.L8869:
	movl	1284(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 3512(%rsp)
	testl	%ebp, %ebp
	je	.L14413
.L8955:
	movslq	%ebp,%rax
	movq	%rax, 3504(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L8943
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L8947
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r15)
	ja	.L8943
.L8947:
	movslq	%edx,%r14
	leaq	(%r14,%r14,4), %r13
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16006
.L8948:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16007
.L8949:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L8950
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	3512(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L8943
.L8950:
	call	get_last_insn
	movl	$1, %edx
	movq	%r15, %rsi
	movq	%rax, 3496(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16008
.L8951:
	movq	1296(%rsp), %rdi
	xorl	%eax, %eax
	movq	1288(%rsp), %rsi
	movq	%rbx, %rdx
	movq	3512(%rsp), %rcx
	call	*insn_gen_function(,%r14,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14966
	movq	3496(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L8943:
	movq	3504(%rsp), %r14
	movl	mode_wider_mode(,%r14,4), %ebp
	testl	%ebp, %ebp
	jne	.L8955
.L14413:
	movl	$4, %edi
	movq	%r15, %rsi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movq	1296(%rsp), %rbx
	movl	$3, %ecx
	movq	1288(%rsp), %r11
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movq	8(%r11), %rbp
	movl	$4, 24(%rsp)
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movq	%rbp, (%rsp)
	jmp	.L15165
.L16008:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L8951
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L8951
.L16007:
	xorl	%eax, %eax
	movq	1288(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L8943
	jmp	.L8949
.L16006:
	xorl	%eax, %eax
	movq	1296(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L8943
	jmp	.L8948
.L16005:
	movl	8(%r15), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1284(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1284(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L8883:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14404
.L8879:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L8879
.L14404:
	testl	%ecx, %ecx
	je	.L8872
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L8881
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L8881
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L8881:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L8883
.L8872:
	decl	%r9d
	jg	.L8869
	movq	1296(%rsp), %rdx
	movq	1288(%rsp), %r11
	xorl	%ecx, %ecx
	movl	%r10d, %r13d
	movl	$9, %r14d
	movq	8(%rdx), %rbx
	movq	8(%r11), %rdi
	movq	%r11, 6120(%rsp)
	movl	$0, 6148(%rsp)
	movq	%rdx, 6096(%rsp)
	movq	%rbx, 6104(%rsp)
	movq	%rdi, 6128(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L8886
	cmpw	$88, %dx
	je	.L8886
	cmpw	$87, %dx
	je	.L8886
.L8885:
	movl	%ecx, 6112(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L8888
	cmpw	$88, %dx
	je	.L8888
	cmpw	$87, %dx
	je	.L8888
.L8887:
	movl	%ecx, 6136(%rsp)
	movl	$0, 6140(%rsp)
	movl	$0, 6116(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L8890
	cmpw	$87, %ax
	je	.L8890
.L8889:
	testl	%edx, %edx
	movl	%edx, 6152(%rsp)
	je	.L8891
	movl	%r10d, 6148(%rsp)
.L8891:
	movl	%r10d, 6144(%rsp)
	movl	6136(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L8893
	movl	6112(%rsp), %eax
	testl	%eax, %eax
	jne	.L8892
.L8893:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1284(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r15d
	cmovl	1284(%rsp), %ebp
.L8907:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14407
.L8903:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L8903
.L14407:
	testl	%ecx, %ecx
	je	.L8896
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L8905
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r15d, %eax
	cmpl	%eax, %ebp
	jl	.L8905
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L8905:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L8907
.L8896:
	cmpl	$2, %r9d
	jle	.L8892
	testl	%r10d, %r10d
	jne	.L8909
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L8910
	cmpw	$46, %dx
	je	.L8910
	cmpw	$47, %dx
	je	.L8910
	cmpw	$49, %dx
	je	.L8910
	cmpw	$113, %dx
	je	.L8910
.L8909:
	movl	6112(%rsp), %eax
	testl	%eax, %eax
	jne	.L8892
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L8912
	cmpw	$46, %dx
	je	.L8912
	cmpw	$47, %dx
	je	.L8912
	cmpw	$49, %dx
	je	.L8912
	cmpw	$113, %dx
	je	.L8912
.L8892:
	cmpl	$8, 1284(%rsp)
	movl	$8, %eax
	cmovl	1284(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 1284(%rsp)
	jle	.L8915
.L8937:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r13d, %r13d
	testl	%edx, %edx
	je	.L14410
.L8922:
	movslq	%edx,%rcx
	salq	$2, %rcx
	cmpl	%r14d, mode_size(%rcx)
	cmovl	%edx, %r13d
	movl	mode_wider_mode(%rcx), %edx
	testl	%edx, %edx
	jne	.L8922
.L14410:
	testl	%r13d, %r13d
	je	.L8915
	movslq	%r13d,%r14
	movq	%r14, %rbx
	salq	$4, %rbx
	addq	mov_optab(%rip), %rbx
	movl	8(%rbx), %edx
	cmpl	$210, %edx
	je	.L8924
	movl	mode_size(,%r14,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1284(%rsp)
	jl	.L8924
	movslq	%edx,%r15
	cmpl	%ebp, 6144(%rsp)
	leaq	6096(%rsp), %rbx
	movq	insn_gen_function(,%r15,8), %rdi
	movq	%rdi, 3520(%rsp)
	jl	.L8924
	movl	6152(%rsp), %edx
.L8935:
	testl	%edx, %edx
	je	.L8929
	subl	%ebp, 52(%rbx)
.L8929:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L8930
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15160:
	movq	%rax, %r15
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L8932
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L8933:
	movq	%rax, %rsi
	movq	%r15, %rdi
	xorl	%eax, %eax
	call	*3520(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L8934
	addl	%ebp, 52(%rbx)
.L8934:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L8935
.L8924:
	movl	mode_size(,%r14,4), %r14d
	cmpl	$1, %r14d
	jg	.L8937
.L8915:
	movl	6144(%rsp), %eax
	testl	%eax, %eax
	jmp	.L15393
.L8932:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L8933
.L8930:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15160
.L8912:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6104(%rsp)
	jmp	.L8892
.L8910:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6128(%rsp)
	jmp	.L8909
.L8890:
	movl	$1, %edx
	jmp	.L8889
.L8888:
	movl	$1, %ecx
	jmp	.L8887
.L8886:
	movl	$1, %ecx
	jmp	.L8885
.L8863:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L8859
.L16004:
	movzbl	2(%r15), %edx
	cmpb	$16, %dl
	je	.L8857
	movq	8(%r15), %rbp
	cmpw	$59, (%rbp)
	je	.L16009
.L8857:
	cmpl	$55, %eax
	jne	.L8860
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L8859
.L16009:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r15)
	cmpq	$0, 16(%rbp)
	je	.L8859
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r15, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	%r13, %r15
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L8859
.L8856:
	cmpq	$0, 16(%r15)
	jne	.L8864
	movq	8(%r15), %r15
	jmp	.L8859
.L8864:
	movq	24(%r15), %rsi
	testq	%rsi, %rsi
	je	.L8865
	movq	%rsi, %r15
	jmp	.L8859
.L8865:
	movq	8(%r15), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L8859
.L8853:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L8849
.L16003:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L8847
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16010
.L8847:
	cmpl	$55, %eax
	jne	.L8850
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L8849
.L16010:
	movq	8(%rbp), %rsi
	movq	%rsi, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L8849
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r13, 1288(%rsp)
	jmp	.L8849
.L8846:
	cmpq	$0, 16(%r12)
	jne	.L8854
	movq	8(%r12), %rdx
	movq	%rdx, 1288(%rsp)
	jmp	.L8849
.L8854:
	movq	24(%r12), %r11
	testq	%r11, %r11
	movq	%r11, 1288(%rsp)
	jne	.L8849
	movq	8(%r12), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r14
	movq	%r14, 1288(%rsp)
	jmp	.L8849
.L8843:
	movq	56(%rsp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L8839
.L16002:
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	56(%rsp), %r11
	movq	%rax, 8(%r11)
	jmp	.L8839
.L8836:
	movq	56(%rsp), %rsi
	cmpq	$0, 16(%rsi)
	jne	.L8844
	movq	8(%rsi), %rcx
	movq	%rcx, 1296(%rsp)
	jmp	.L8839
.L8844:
	movq	56(%rsp), %rbx
	movq	24(%rbx), %rdi
	testq	%rdi, %rdi
	movq	%rdi, 1296(%rsp)
	jne	.L8839
	movq	56(%rsp), %rax
	movq	8(%rax), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	56(%rsp), %r8
	movq	%rax, %rdi
	movq	8(%r8), %rsi
	movq	%rax, 24(%r8)
	call	gen_move_insn
	movq	56(%rsp), %rbp
	movq	%rax, %rdi
	movq	16(%rbp), %rsi
	call	emit_insn_before
	movq	24(%rbp), %r9
	movq	%r9, 1296(%rsp)
	jmp	.L8839
	.p2align 6,,7
.L8825:
	movq	56(%rsp), %r15
	xorl	%esi, %esi
	movq	8(%r15), %rdi
	call	protect_from_queue
	movq	56(%rsp), %r13
	movq	%rax, 8(%r13)
	movq	56(%rsp), %rsi
	movq	16(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	56(%rsp), %rbp
	movq	%rax, 16(%rbp)
	jmp	.L8821
.L15882:
	jne	.L8822
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbx)
	jmp	.L8821
	.p2align 6,,7
.L8818:
	movq	56(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L8826
	movq	8(%rcx), %r11
	movq	%r11, 56(%rsp)
	jmp	.L8821
.L8826:
	movq	56(%rsp), %rdi
	movq	24(%rdi), %rax
	testq	%rax, %rax
	je	.L8827
	movq	%rax, 56(%rsp)
	jmp	.L8821
.L8827:
	movq	56(%rsp), %rax
	movq	8(%rax), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	56(%rsp), %r9
	movq	%rax, %rdi
	movq	8(%r9), %rsi
	movq	%rax, 24(%r9)
	call	gen_move_insn
	movq	56(%rsp), %rbx
	movq	%rax, %rdi
	movq	16(%rbx), %rsi
	call	emit_insn_before
	movq	56(%rsp), %r14
	movq	24(%r14), %rcx
	movq	%rcx, 56(%rsp)
	jmp	.L8821
	.p2align 6,,7
.L15881:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	3656(%rsp), %rdi
	movzbl	2(%rbx), %edx
	movq	%rax, %rsi
	jmp	.L15159
.L8797:
	movq	56(%rsp), %r9
	movl	(%r9), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L16011
	movq	56(%rsp), %r8
	movq	3656(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movzbl	2(%r8), %edx
	movq	%r8, %rsi
	call	expand_expr
	movq	56(%rsp), %rdx
	movq	%rax, %r12
	cmpw	$51, (%rdx)
	je	.L16012
.L8815:
	movzwl	(%r12), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L8816
	cmpw	$46, %dx
	je	.L8816
	cmpw	$47, %dx
	je	.L8816
	cmpw	$49, %dx
	je	.L8816
	cmpw	$113, %dx
	jne	.L8762
	jmp	.L8816
.L16012:
	cmpl	$63, 8(%rdx)
	jle	.L8762
	jmp	.L8815
.L16011:
	movq	3656(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	%rax, %r12
	movq	56(%rsp), %rax
	movq	%r12, %rsi
	movzbl	3(%rax), %edx
	movq	8(%rax), %rdi
	xorl	%eax, %eax
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	jmp	.L8761
.L8806:
	movl	$1, %ebx
	jmp	.L8800
.L8798:
	xorl	%ebx, %ebx
	jmp	.L8800
.L8804:
	movq	56(%rsp), %rcx
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	movq	8(%rcx), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L8806
	movq	56(%rsp), %r14
	xorl	%eax, %eax
	movq	16(%r14), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L8800
	jmp	.L8806
.L15880:
	movzbl	2(%rdi), %eax
	cmpb	$16, %al
	je	.L8790
	movl	cse_not_expected(%rip), %r15d
	xorl	%esi, %esi
	movzbl	%al, %edx
	testl	%r15d, %r15d
	cmove	%rdi, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	movq	3656(%rsp), %rdi
	call	expand_expr
	movq	%rax, %r12
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L8816
	testb	%al, %al
	je	.L8816
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L15356
	.p2align 6,,7
.L15879:
	movq	56(%rsp), %rbp
	cmpb	$16, 2(%rbp)
	jne	.L8763
	call	gen_label_rtx
	movq	%rax, %rbp
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r13
	testq	%rbx, %rbx
	jne	.L8767
.L14397:
	movq	56(%rsp), %r12
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L8769
	cmpl	$55, %eax
	je	.L16013
.L8773:
	cmpl	$63, %eax
	je	.L8776
	cmpl	$66, %eax
	je	.L8776
.L8772:
	movq	3656(%rsp), %rax
	movq	%rbp, %rsi
	incl	inhibit_defer_pop(%rip)
	movq	32(%rax), %rdi
	xorl	%eax, %eax
	call	jumpifnot
	movq	3656(%rsp), %r8
	movl	3644(%rsp), %edx
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	40(%r8), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L8782
.L14399:
	movq	%r13, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%rbp, %rdi
	call	emit_label
	xorl	%eax, %eax
	movl	3644(%rsp), %edx
	movq	3656(%rsp), %rbp
	movq	%r12, %rsi
	movq	48(%rbp), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L8787
.L14401:
	movq	%r13, %rdi
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L8761
.L8787:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rsi
	movq	%rax, 16(%rbx)
	testq	%rsi, %rsi
	movq	%rsi, pending_chain(%rip)
	movq	%rsi, %rbx
	jne	.L8787
	jmp	.L14401
.L8782:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r10
	movq	%rax, 16(%rbx)
	testq	%r10, %r10
	movq	%r10, pending_chain(%rip)
	movq	%r10, %rbx
	jne	.L8782
	jmp	.L14399
.L8776:
	movq	56(%rsp), %r11
	xorl	%esi, %esi
	movq	8(%r11), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	56(%rsp), %r15
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	56(%rsp), %rsi
	movq	%rax, 16(%rsi)
	jmp	.L8772
.L16013:
	jne	.L8773
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	56(%rsp), %r12
	movq	%rax, 8(%r12)
	jmp	.L8772
.L8769:
	movq	56(%rsp), %rbx
	cmpq	$0, 16(%rbx)
	jne	.L8777
	movq	8(%rbx), %r12
	jmp	.L8772
.L8777:
	movq	56(%rsp), %r12
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	movq	%rdi, %r12
	jne	.L8772
	movq	56(%rsp), %rdx
	movq	8(%rdx), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	56(%rsp), %r14
	movq	%rax, %rdi
	movq	8(%r14), %rsi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	56(%rsp), %rcx
	movq	%rax, %rdi
	movq	16(%rcx), %rsi
	call	emit_insn_before
	movq	56(%rsp), %rbx
	movq	24(%rbx), %r12
	jmp	.L8772
	.p2align 6,,7
.L8767:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r10
	movq	%rax, 16(%rbx)
	testq	%r10, %r10
	movq	%r10, pending_chain(%rip)
	movq	%r10, %rbx
	jne	.L8767
	jmp	.L14397
.L15878:
	movq	3656(%rsp), %rdx
	movq	const0_rtx(%rip), %rsi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	32(%rdx), %rdi
	xorl	%edx, %edx
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L8759
.L14395:
	movq	3656(%rsp), %rax
	movq	56(%rsp), %rsi
	movl	3644(%rsp), %edx
	movq	40(%rax), %rdi
	xorl	%eax, %eax
	call	store_expr
	movq	%rax, %r12
	jmp	.L8761
.L8759:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r8
	movq	%rax, 16(%rbx)
	testq	%r8, %r8
	movq	%r8, pending_chain(%rip)
	movq	%r8, %rbx
	jne	.L8759
	jmp	.L14395
.L15877:
	movq	3656(%rsp), %rbx
	movzbl	16(%rbx), %eax
	cmpb	$39, %al
	jne	.L8754
	movl	current_function_returns_struct(%rip), %r12d
	testl	%r12d, %r12d
	je	.L8754
	movl	current_function_returns_pcc_struct(%rip), %r11d
	testl	%r11d, %r11d
	jne	.L8754
	movq	%rbx, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	3656(%rsp), %rdi
	movq	%rax, %r14
	xorl	%eax, %eax
	call	expr_size
	movl	$4, %r9d
	movq	56(%rsp), %rbx
	movq	8(%r14), %rcx
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%rcx, (%rsp)
	movq	8(%rbx), %r8
	movl	$3, %ecx
	call	emit_library_call
.L15167:
	movq	56(%rsp), %rdi
	xorl	%eax, %eax
	call	preserve_temp_slots
	xorl	%eax, %eax
	call	free_temp_slots
	jmp	.L8235
.L15876:
	movq	3664(%rsp), %rdi
	xorl	%edx, %edx
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	3664(%rsp), %r15
	movq	%rax, 56(%rsp)
	movzbl	16(%r15), %edx
	jmp	.L8753
.L15875:
	movq	3664(%rsp), %r8
	movq	40(%r8), %r15
	cmpb	$25, 16(%r15)
	jne	.L8236
	movq	3648(%rsp), %r9
	movq	32(%r9), %rcx
	cmpb	$25, 16(%rcx)
	jne	.L8236
.L8237:
	xorl	%ecx, %ecx
	xorl	%r15d, %r15d
	xorl	%ebp, %ebp
	cmpb	$37, %dl
	movl	$0, 5528(%rsp)
	movq	3664(%rsp), %r12
	leaq	5544(%rsp), %r13
	leaq	5528(%rsp), %r14
	je	.L16014
	cmpb	$38, %dl
	je	.L16015
	movq	3648(%rsp), %rsi
	movzbl	44(%rsi), %r15d
	movslq	%r15d,%r10
	movl	mode_size(,%r10,4), %eax
	sall	$3, %eax
	movl	%eax, 5548(%rsp)
	movq	3664(%rsp), %rax
	movq	8(%rax), %r9
	movzbl	17(%r9), %r8d
	shrb	$6, %r8b
	movl	%r8d, %edi
	andl	$1, %edi
	movl	%edi, 3640(%rsp)
.L8240:
	testq	%rcx, %rcx
	je	.L8243
	cmpb	$25, 16(%rcx)
	je	.L8244
	movl	$16, %r15d
	movl	$-1, 5548(%rsp)
.L8243:
	movl	$0, (%r13)
	.p2align 4,,7
.L8271:
	movzbl	16(%r12), %edx
	cmpb	$39, %dl
	je	.L16016
.L8249:
	leal	-37(%rdx), %ecx
	cmpb	$1, %cl
	ja	.L8250
	cmpb	$37, %dl
	je	.L16017
	movq	48(%r12), %rbx
.L8252:
	movzbl	16(%rbx), %eax
	cmpb	$53, %al
	je	.L16018
	cmpb	$25, %al
	je	.L16019
.L8261:
	testq	%rbp, %rbp
	je	.L8263
	movl	$8, %edi
	call	size_int
	movq	%rbx, %rsi
	movl	$58, %edi
	movq	%rax, %rdx
	call	size_binop
	movq	%rbp, %rsi
	movl	$53, %edi
.L15150:
	movq	%rax, %rdx
	call	size_binop
	movq	%rax, %rbp
.L8265:
	testb	$16, 17(%r12)
	je	.L8270
	movl	$1, (%r14)
.L8270:
	movq	32(%r12), %r12
	jmp	.L8271
.L8263:
	movl	$8, %edi
	call	size_int
	movq	%rbx, %rsi
	movl	$58, %edi
	jmp	.L15150
.L16019:
	movl	24(%rbx), %eax
.L15151:
	addl	%eax, (%r13)
	jmp	.L8265
.L16018:
	movq	32(%rbx), %rsi
	cmpb	$25, 16(%rsi)
	je	.L16020
	movq	40(%rbx), %rax
	cmpb	$25, 16(%rax)
	jne	.L15283
	movq	%rsi, %rbx
.L8255:
	movl	24(%rax), %eax
	addl	%eax, (%r13)
	jmp	.L8261
.L16020:
	movq	40(%rbx), %rbx
	movq	%rsi, %rax
	jmp	.L8255
.L16017:
	movq	40(%r12), %rdx
	movq	72(%rdx), %rbx
	jmp	.L8252
.L8250:
	cmpb	$42, %dl
	je	.L16021
.L8266:
	cmpb	$103, %dl
	je	.L8265
	leal	-101(%rdx), %r11d
	cmpb	$1, %r11b
	ja	.L8247
	movq	32(%r12), %r10
	movq	8(%r12), %r8
	movq	8(%r10), %r9
	movzbl	44(%r9), %edi
	cmpb	%dil, 44(%r8)
	je	.L8265
.L8247:
	testl	%r15d, %r15d
	jne	.L8272
	movl	(%r13), %eax
	movl	5548(%rsp), %edi
	cltd
	idivl	%edi
	testl	%edx, %edx
	movl	%edx, %ebx
	je	.L16022
.L8272:
	testl	%r15d, %r15d
	movl	%r15d, 5532(%rsp)
	movq	%rbp, 5536(%rsp)
	jne	.L8275
	movl	3644(%rsp), %eax
	testl	%eax, %eax
	jne	.L16023
.L8275:
	movq	%r12, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	5536(%rsp), %rdi
	movq	%rax, 56(%rsp)
	testq	%rdi, %rdi
	jne	.L16024
.L8276:
	movl	5528(%rsp), %eax
	testl	%eax, %eax
	je	.L8278
	movq	56(%rsp), %rsi
	cmpw	$55, (%rsi)
	je	.L16025
.L8278:
	movl	3644(%rsp), %eax
	movl	5548(%rsp), %ebp
	movl	5544(%rsp), %r14d
	movl	5532(%rsp), %ebx
	testl	%eax, %eax
	je	.L8280
	movq	3664(%rsp), %rax
	movq	8(%rax), %rsi
	movzbl	44(%rsi), %r15d
	movl	%r15d, 1216(%rsp)
.L8281:
	movq	8(%r12), %rdi
	movl	48(%rdi), %r12d
	call	int_size_in_bytes
	movl	$0, 1212(%rsp)
	movl	%eax, %r15d
	shrl	$3, %r12d
	cmpl	$31, %ebp
	jg	.L8282
	movl	$1, %eax
	movl	%ebp, %ecx
	sall	%cl, %eax
	decl	%eax
	movl	%eax, 1212(%rsp)
.L8282:
	cmpl	$16, %ebx
	je	.L16026
.L8283:
	testl	%ebx, %ebx
	je	.L8288
	cmpl	$16, %ebx
	je	.L8289
	movslq	%ebx,%rdi
	cmpb	$0, direct_store(%rdi)
	je	.L8288
.L8289:
	movq	56(%rsp), %r8
	movzwl	(%r8), %eax
	cmpw	$51, %ax
	je	.L8288
	cmpw	$53, %ax
	je	.L8288
	movl	1216(%rsp), %r15d
	movq	56(%rsp), %rsi
	testl	%r15d, %r15d
	movq	8(%rsi), %rdi
	je	.L8295
	movzwl	(%rdi), %edx
	cmpw	$51, %dx
	je	.L8295
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L8295
	cmpw	$46, %dx
	je	.L8295
	cmpw	$47, %dx
	je	.L8295
	cmpw	$49, %dx
	je	.L8295
	cmpw	$113, %dx
	je	.L8295
	cmpw	$63, %dx
	je	.L16027
.L8296:
	xorl	%eax, %eax
	call	copy_to_reg
	movq	%rax, %rdi
.L8295:
	cmpl	$-1, %r14d
	leal	7(%r14), %r8d
	cmovle	%r8d, %r14d
	sarl	$3, %r14d
	movl	%r14d, %esi
	call	plus_constant_wide
	movl	%ebx, %esi
	movq	56(%rsp), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	orb	$16, 3(%rax)
	movq	%rax, %r15
	movl	$0, 1208(%rsp)
	movl	1216(%rsp), %eax
	testl	%eax, %eax
	setne	%dl
	movzbl	%dl, %ebp
	movq	3656(%rsp), %rdx
	movzbl	16(%rdx), %eax
	cmpb	$44, %al
	je	.L16028
	cmpb	$48, %al
	je	.L16029
.L8307:
	testl	%ebp, %ebp
	je	.L8334
	cmpw	$55, (%r15)
	je	.L16030
.L8334:
	movzwl	(%r15), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L8342
	mov	%eax, %r14d
	jmp	*.L8351(,%r14,8)
	.section	.rodata
	.align 8
	.align 4
.L8351:
	.quad	.L8345
	.quad	.L8342
	.quad	.L8342
	.quad	.L8342
	.quad	.L8350
	.quad	.L8342
	.quad	.L8342
	.quad	.L8342
	.quad	.L8348
	.quad	.L8348
	.quad	.L8342
	.quad	.L8348
	.text
.L8345:
	movq	8(%r15), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %ebx
.L8344:
	testl	%ebx, %ebx
	je	.L8341
	movzbl	2(%r15), %eax
	cmpb	$16, %al
	je	.L8353
	testb	%al, %al
	jne	.L16031
.L8353:
	movzbl	2(%r15), %edx
	movq	3656(%rsp), %rdi
	xorl	%esi, %esi
.L15152:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L15355:
	movq	%rax, %r12
.L8360:
	movl	$1, 1208(%rsp)
.L8306:
	cmpq	%r15, %r12
	je	.L8361
	movq	3656(%rsp), %r11
	cmpb	$0, 16(%r11)
	je	.L8361
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L8362
	cmpl	$55, %eax
	je	.L16032
.L8366:
	cmpl	$63, %eax
	je	.L8369
	cmpl	$66, %eax
	je	.L8369
.L8365:
	movzbl	2(%r12), %eax
	movzbl	2(%r15), %ecx
	cmpb	%cl, %al
	je	.L8372
	testb	%al, %al
	je	.L8372
	movq	3656(%rsp), %rbx
	movl	1208(%rsp), %eax
	movq	8(%rbx), %rdi
	movzbl	17(%rdi), %r8d
	shrb	$6, %r8b
	movl	%r8d, %edx
	andl	$1, %edx
	testl	%eax, %eax
	je	.L8373
	movq	%r12, %rsi
	movzbl	%cl, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%rax, %r12
.L8628:
	movq	%r15, %rdi
	movq	%r12, %rsi
	call	emit_move_insn
.L8361:
	movl	1208(%rsp), %edi
	testl	%edi, %edi
	cmove	%r15, %r12
.L8305:
	movq	%r12, 56(%rsp)
	jmp	.L15167
.L8373:
	movq	%r15, %rdi
	movq	%r12, %rsi
	xorl	%eax, %eax
	call	convert_move
	jmp	.L8361
	.p2align 6,,7
.L8372:
	cmpb	$16, %al
	jne	.L8628
	movq	3656(%rsp), %rdx
	cmpb	$28, 16(%rdx)
	je	.L16033
	cmpb	$16, %al
	jne	.L8628
	movq	3656(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, 1112(%rsp)
	call	expr_size
	movq	%rax, %r13
	movq	3656(%rsp), %rax
	movq	8(%rax), %rbx
	movl	48(%rbx), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r15)
	movl	%eax, 1108(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r15, 1120(%rsp)
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L8631
	cmpl	$55, %eax
	je	.L16034
	cmpl	$63, %eax
	je	.L8638
	cmpl	$66, %eax
	je	.L8638
.L8634:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L8641
	cmpl	$55, %eax
	je	.L16035
.L8645:
	cmpl	$63, %eax
	je	.L8648
	cmpl	$66, %eax
	je	.L8648
.L8644:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L8651
	cmpl	$55, %eax
	je	.L16036
.L8655:
	cmpl	$63, %eax
	je	.L8658
	cmpl	$66, %eax
	je	.L8658
.L8654:
	movq	1120(%rsp), %rax
	cmpw	$55, (%rax)
	jne	.L15283
	movq	1112(%rsp), %r8
	cmpw	$55, (%r8)
	jne	.L15283
	testq	%r13, %r13
	je	.L15283
	cmpw	$46, (%r13)
	je	.L16037
.L8664:
	movl	1108(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 3552(%rsp)
	testl	%ebp, %ebp
	je	.L14393
.L8750:
	movslq	%ebp,%rax
	movq	%rax, 3544(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L8738
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L8742
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L8738
.L8742:
	movslq	%edx,%r8
	leaq	(%r8,%r8,4), %r14
	movq	%r8, 3536(%rsp)
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16038
.L8743:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16039
.L8744:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L8745
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	3552(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L8738
.L8745:
	call	get_last_insn
	movl	$1, %edx
	movq	%r13, %rsi
	movq	%rax, 3528(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16040
.L8746:
	movq	3536(%rsp), %rbp
	movq	1120(%rsp), %rdi
	xorl	%eax, %eax
	movq	1112(%rsp), %rsi
	movq	%rbx, %rdx
	movq	3552(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14963
	movq	3528(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L8738:
	movq	3544(%rsp), %r10
	movl	mode_wider_mode(,%r10,4), %ebp
	testl	%ebp, %ebp
	jne	.L8750
.L14393:
	movq	%r13, %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$3, %ecx
	xorl	%edx, %edx
	movq	1112(%rsp), %rsi
	movq	memcpy_libfunc(%rip), %rdi
	movq	8(%rsi), %r13
	xorl	%esi, %esi
	movl	$4, 24(%rsp)
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movq	1120(%rsp), %rax
	movq	%r13, (%rsp)
.L15157:
	movq	8(%rax), %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	call	emit_library_call
	jmp	.L8361
.L14963:
	call	emit_insn
	jmp	.L8361
.L16040:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L8746
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L8746
.L16039:
	xorl	%eax, %eax
	movq	1112(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L8738
	jmp	.L8744
.L16038:
	xorl	%eax, %eax
	movq	1120(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L8738
	jmp	.L8743
.L16037:
	movl	8(%r13), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1108(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1108(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L8678:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14384
.L8674:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L8674
.L14384:
	testl	%ecx, %ecx
	je	.L8667
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L8676
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L8676
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L8676:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L8678
.L8667:
	decl	%r9d
	jg	.L8664
	movq	1112(%rsp), %rcx
	movq	1120(%rsp), %rbp
	movl	%r10d, %r13d
	movl	$9, %r14d
	movq	8(%rbp), %rbx
	movq	8(%rcx), %rdi
	movq	%rcx, 6120(%rsp)
	movl	$0, 6148(%rsp)
	movq	%rbp, 6096(%rsp)
	xorl	%ecx, %ecx
	movq	%rbx, 6104(%rsp)
	movq	%rdi, 6128(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L8681
	cmpw	$88, %dx
	je	.L8681
	cmpw	$87, %dx
	je	.L8681
.L8680:
	movl	%ecx, 6112(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L8683
	cmpw	$88, %dx
	je	.L8683
	cmpw	$87, %dx
	je	.L8683
.L8682:
	movl	%ecx, 6136(%rsp)
	movl	$0, 6140(%rsp)
	movl	$0, 6116(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L8685
	cmpw	$87, %ax
	je	.L8685
.L8684:
	testl	%edx, %edx
	movl	%edx, 6152(%rsp)
	je	.L8686
	movl	%r10d, 6148(%rsp)
.L8686:
	movl	6136(%rsp), %eax
	movl	%r10d, 6144(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L8688
	movl	6112(%rsp), %eax
	testl	%eax, %eax
	jne	.L8687
.L8688:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1108(%rsp)
	movq	mov_optab(%rip), %r11
	cmovl	1108(%rsp), %ebp
.L8702:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14387
.L8698:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L8698
.L14387:
	testl	%ecx, %ecx
	je	.L8691
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L8700
	movl	mode_size(,%rcx,4), %eax
	movl	$8, %r8d
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r8d, %eax
	cmpl	%eax, %ebp
	jl	.L8700
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L8700:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L8702
.L8691:
	cmpl	$2, %r9d
	jle	.L8687
	testl	%r10d, %r10d
	jne	.L8704
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L8705
	cmpw	$46, %dx
	je	.L8705
	cmpw	$47, %dx
	je	.L8705
	cmpw	$49, %dx
	je	.L8705
	cmpw	$113, %dx
	je	.L8705
.L8704:
	movl	6112(%rsp), %esi
	testl	%esi, %esi
	jne	.L8687
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %edi
	cmpw	$1, %di
	jbe	.L8707
	cmpw	$46, %dx
	je	.L8707
	cmpw	$47, %dx
	je	.L8707
	cmpw	$49, %dx
	je	.L8707
	cmpw	$113, %dx
	je	.L8707
.L8687:
	cmpl	$8, 1108(%rsp)
	movl	$8, %eax
	cmovl	1108(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 1108(%rsp)
	jle	.L8710
.L8732:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r13d, %r13d
	testl	%edx, %edx
	je	.L14390
.L8717:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r14d, mode_size(%rbx)
	cmovl	%edx, %r13d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L8717
.L14390:
	testl	%r13d, %r13d
	je	.L8710
	movslq	%r13d,%r14
	movq	%r14, %r11
	salq	$4, %r11
	addq	mov_optab(%rip), %r11
	movl	8(%r11), %edx
	cmpl	$210, %edx
	je	.L8719
	movl	mode_size(,%r14,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1108(%rsp)
	jl	.L8719
	movslq	%edx,%rcx
	cmpl	%ebp, 6144(%rsp)
	leaq	6096(%rsp), %rbx
	movq	insn_gen_function(,%rcx,8), %rdx
	movq	%rdx, 3560(%rsp)
	jl	.L8719
	movl	6152(%rsp), %edx
.L8730:
	testl	%edx, %edx
	je	.L8724
	subl	%ebp, 52(%rbx)
.L8724:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L8725
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15156:
	movl	40(%rbx), %r9d
	movq	%rax, 1096(%rsp)
	testl	%r9d, %r9d
	je	.L8727
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L8728:
	movq	%rax, %rsi
	movq	1096(%rsp), %rdi
	xorl	%eax, %eax
	call	*3560(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L8729
	addl	%ebp, 52(%rbx)
.L8729:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L8730
.L8719:
	movl	mode_size(,%r14,4), %r14d
	cmpl	$1, %r14d
	jg	.L8732
.L8710:
	movl	6144(%rsp), %r14d
	testl	%r14d, %r14d
.L15392:
	je	.L8361
	jmp	.L15283
.L8727:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L8728
.L8725:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15156
.L8707:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6104(%rsp)
	jmp	.L8687
.L8705:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6128(%rsp)
	jmp	.L8704
.L8685:
	movl	$1, %edx
	jmp	.L8684
.L8683:
	movl	$1, %ecx
	jmp	.L8682
.L8681:
	movl	$1, %ecx
	jmp	.L8680
.L8658:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L8654
.L16036:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L8652
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L16041
.L8652:
	cmpl	$55, %eax
	jne	.L8655
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L8654
.L16041:
	movq	8(%rbp), %rbx
	movq	%rbx, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L8654
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L8654
.L8651:
	cmpq	$0, 16(%r13)
	jne	.L8659
	movq	8(%r13), %r13
	jmp	.L8654
.L8659:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L8660
	movq	%rsi, %r13
	jmp	.L8654
.L8660:
	movq	8(%r13), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L8654
.L8648:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L8644
.L16035:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L8642
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16042
.L8642:
	cmpl	$55, %eax
	jne	.L8645
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L8644
.L16042:
	movq	8(%rbp), %r11
	movq	%r11, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L8644
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r14, 1112(%rsp)
	jmp	.L8644
.L8641:
	cmpq	$0, 16(%r12)
	jne	.L8649
	movq	8(%r12), %r10
	movq	%r10, 1112(%rsp)
	jmp	.L8644
.L8649:
	movq	24(%r12), %rdx
	testq	%rdx, %rdx
	movq	%rdx, 1112(%rsp)
	jne	.L8644
	movq	8(%r12), %rbp
	movzbl	2(%rbp), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rsi
	movq	%rsi, 1112(%rsp)
	jmp	.L8644
.L8638:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L8634
.L16034:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L8634
.L8631:
	cmpq	$0, 16(%r15)
	jne	.L8639
	movq	8(%r15), %r9
	movq	%r9, 1120(%rsp)
	jmp	.L8634
.L8639:
	movq	24(%r15), %r8
	testq	%r8, %r8
	movq	%r8, 1120(%rsp)
	jne	.L8634
	movq	8(%r15), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %rdi
	movq	%rdi, 1120(%rsp)
	jmp	.L8634
.L16033:
	xorl	%eax, %eax
	movq	%rdx, %rdi
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, 1184(%rsp)
	je	.L16043
.L8377:
	movl	$8, %edi
	call	size_int
	movq	3656(%rsp), %rdi
	movq	%rax, %rdx
	movq	8(%rdi), %r9
	movl	$57, %edi
	movq	32(%r9), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	3656(%rsp), %rbx
	movq	%rax, %r14
	movl	32(%rbx), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%r14, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	expand_expr
	movq	3656(%rsp), %rbp
	movq	$0, 1128(%rsp)
	movq	%rax, 1152(%rsp)
	movq	%rax, %r14
	movq	8(%rbp), %rsi
	movl	48(%rsi), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r15)
	movl	%eax, 1148(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r15, 1160(%rsp)
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L8503
	cmpl	$55, %eax
	je	.L16044
	cmpl	$63, %eax
	je	.L8510
	cmpl	$66, %eax
	je	.L8510
.L8506:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L8513
	cmpl	$55, %eax
	je	.L16045
.L8517:
	cmpl	$63, %eax
	je	.L8520
	cmpl	$66, %eax
	je	.L8520
.L8516:
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L8523
	cmpl	$55, %eax
	je	.L16046
.L8527:
	cmpl	$63, %eax
	je	.L8530
	cmpl	$66, %eax
	je	.L8530
.L8526:
	movq	1160(%rsp), %rdi
	cmpw	$55, (%rdi)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 1152(%rsp)
	je	.L15283
	movq	1152(%rsp), %rsi
	cmpw	$46, (%rsi)
	je	.L16047
.L8536:
	movl	1148(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 3592(%rsp)
	testl	%ebp, %ebp
	je	.L14381
.L8622:
	movslq	%ebp,%rcx
	movq	%rcx, %rax
	movq	%rcx, 3584(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L8610
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L8614
	movq	1152(%rsp), %r11
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r11)
	ja	.L8610
.L8614:
	movslq	%edx,%r10
	leaq	(%r10,%r10,4), %r13
	movq	%r10, 3576(%rsp)
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16048
.L8615:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16049
.L8616:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L8617
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	3592(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L8610
.L8617:
	call	get_last_insn
	movl	$1, %edx
	movq	1152(%rsp), %rsi
	movq	%rax, 3568(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16050
.L8618:
	movq	3576(%rsp), %r13
	movq	1160(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	3592(%rsp), %rcx
	call	*insn_gen_function(,%r13,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14962
	movq	3568(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L8610:
	movq	3584(%rsp), %rdx
	movl	mode_wider_mode(,%rdx,4), %ebp
	testl	%ebp, %ebp
	jne	.L8622
.L14381:
	movq	1152(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%r12), %rsi
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%edx, %edx
	movq	1160(%rsp), %r12
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%eax, %eax
	movq	%rsi, (%rsp)
	xorl	%esi, %esi
	movq	8(%r12), %r8
	call	emit_library_call
.L8620:
	cmpw	$46, (%r14)
	je	.L16051
	movq	8(%r15), %rsi
	movl	$4, %edi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movl	$4, %edi
	movq	%r14, %rcx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	1184(%rsp), %rdx
	movl	$4, %edi
	movq	%r14, %rcx
	movq	%rax, %r12
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 1128(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L8624:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L8625
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%r12, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L8625:
	cmpq	$0, 1128(%rsp)
	je	.L8361
	movq	1128(%rsp), %rdi
	call	emit_label
	jmp	.L8361
.L16051:
	movq	3656(%rsp), %rbp
	movq	8(%r15), %rdi
	movl	32(%rbp), %esi
	call	plus_constant_wide
	movq	1184(%rsp), %rdi
	movq	3656(%rsp), %r14
	movq	%rax, %r12
	movl	32(%r14), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L8624
.L14962:
	call	emit_insn
	jmp	.L8620
.L16050:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L8618
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L8618
.L16049:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L8610
	jmp	.L8616
.L16048:
	xorl	%eax, %eax
	movq	1160(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L8610
	jmp	.L8615
.L16047:
	movl	8(%rsi), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1148(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1148(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L8550:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14372
.L8546:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L8546
.L14372:
	testl	%ecx, %ecx
	je	.L8539
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L8548
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L8548
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L8548:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L8550
.L8539:
	decl	%r9d
	jg	.L8536
	movq	1160(%rsp), %rcx
	movq	8(%r12), %rdi
	movl	%r10d, %r13d
	movq	8(%rcx), %rbx
	movq	%r12, 6120(%rsp)
	movq	%rcx, 6096(%rsp)
	movl	$0, 6148(%rsp)
	movq	%rdi, 6128(%rsp)
	xorl	%ecx, %ecx
	movl	$9, 1144(%rsp)
	movq	%rbx, 6104(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L8553
	cmpw	$88, %dx
	je	.L8553
	cmpw	$87, %dx
	je	.L8553
.L8552:
	movl	%ecx, 6112(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L8555
	cmpw	$88, %dx
	je	.L8555
	cmpw	$87, %dx
	je	.L8555
.L8554:
	movl	%ecx, 6136(%rsp)
	movl	$0, 6140(%rsp)
	movl	$0, 6116(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L8557
	cmpw	$87, %ax
	je	.L8557
.L8556:
	testl	%edx, %edx
	movl	%edx, 6152(%rsp)
	je	.L8558
	movl	%r10d, 6148(%rsp)
.L8558:
	movl	6136(%rsp), %eax
	movl	%r10d, 6144(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L8560
	movl	6112(%rsp), %eax
	testl	%eax, %eax
	jne	.L8559
.L8560:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1148(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1148(%rsp), %ebp
.L8574:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14375
.L8570:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L8570
.L14375:
	testl	%ecx, %ecx
	je	.L8563
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L8572
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L8572
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L8572:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L8574
.L8563:
	cmpl	$2, %r9d
	jle	.L8559
	testl	%r10d, %r10d
	jne	.L8576
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L8577
	cmpw	$46, %dx
	je	.L8577
	cmpw	$47, %dx
	je	.L8577
	cmpw	$49, %dx
	je	.L8577
	cmpw	$113, %dx
	je	.L8577
.L8576:
	movl	6112(%rsp), %eax
	testl	%eax, %eax
	jne	.L8559
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L8579
	cmpw	$46, %dx
	je	.L8579
	cmpw	$47, %dx
	je	.L8579
	cmpw	$49, %dx
	je	.L8579
	cmpw	$113, %dx
	je	.L8579
.L8559:
	cmpl	$8, 1148(%rsp)
	movl	$8, %eax
	cmovl	1148(%rsp), %eax
	cmpl	$1, 1144(%rsp)
	movl	%eax, 1148(%rsp)
	jle	.L8582
.L8604:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14378
.L8589:
	movslq	%edx,%rbp
	movl	1144(%rsp), %eax
	salq	$2, %rbp
	cmpl	%eax, mode_size(%rbp)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbp), %edx
	testl	%edx, %edx
	jne	.L8589
.L14378:
	testl	%r12d, %r12d
	je	.L8582
	movslq	%r12d,%r13
	movq	%r13, %rbx
	salq	$4, %rbx
	addq	mov_optab(%rip), %rbx
	movl	8(%rbx), %edx
	cmpl	$210, %edx
	je	.L8591
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1148(%rsp)
	jl	.L8591
	movslq	%edx,%r8
	cmpl	%ebp, 6144(%rsp)
	leaq	6096(%rsp), %rbx
	movq	insn_gen_function(,%r8,8), %r9
	movq	%r9, 3600(%rsp)
	jl	.L8591
	movl	6152(%rsp), %edx
.L8602:
	testl	%edx, %edx
	je	.L8596
	subl	%ebp, 52(%rbx)
.L8596:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L8597
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15155:
	movq	%rax, 1136(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L8599
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L8600:
	movq	%rax, %rsi
	movq	1136(%rsp), %rdi
	xorl	%eax, %eax
	call	*3600(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L8601
	addl	%ebp, 52(%rbx)
.L8601:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L8602
.L8591:
	movl	mode_size(,%r13,4), %edi
	movl	%edi, 1144(%rsp)
	decl	%edi
	jg	.L8604
.L8582:
	movl	6144(%rsp), %eax
	testl	%eax, %eax
	je	.L8620
	jmp	.L15283
.L8599:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L8600
.L8597:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15155
.L8579:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6104(%rsp)
	jmp	.L8559
.L8577:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6128(%rsp)
	jmp	.L8576
.L8557:
	movl	$1, %edx
	jmp	.L8556
.L8555:
	movl	$1, %ecx
	jmp	.L8554
.L8553:
	movl	$1, %ecx
	jmp	.L8552
.L8530:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L8526
.L16046:
	movzbl	2(%r14), %edx
	cmpb	$16, %dl
	je	.L8524
	movq	8(%r14), %rbp
	cmpw	$59, (%rbp)
	je	.L16052
.L8524:
	cmpl	$55, %eax
	jne	.L8527
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L8526
.L16052:
	movq	8(%rbp), %rsi
	movq	%rsi, 8(%r14)
	cmpq	$0, 16(%rbp)
	je	.L8526
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r13, 1152(%rsp)
	jmp	.L8526
.L8523:
	cmpq	$0, 16(%r14)
	jne	.L8531
	movq	8(%r14), %rax
	movq	%rax, 1152(%rsp)
	jmp	.L8526
.L8531:
	movq	24(%r14), %rbp
	testq	%rbp, %rbp
	movq	%rbp, 1152(%rsp)
	jne	.L8526
	movq	8(%r14), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rbx
	movq	%rbx, 1152(%rsp)
	jmp	.L8526
.L8520:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L8516
.L16045:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L8514
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16053
.L8514:
	cmpl	$55, %eax
	jne	.L8517
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L8516
.L16053:
	movq	8(%rbp), %r10
	movq	%r10, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L8516
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	%r13, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L8516
.L8513:
	cmpq	$0, 16(%r12)
	jne	.L8521
	movq	8(%r12), %r12
	jmp	.L8516
.L8521:
	movq	24(%r12), %rax
	testq	%rax, %rax
	je	.L8522
	movq	%rax, %r12
	jmp	.L8516
.L8522:
	movq	8(%r12), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L8516
.L8510:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L8506
.L16044:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L8506
.L8503:
	cmpq	$0, 16(%r15)
	jne	.L8511
	movq	8(%r15), %rcx
	movq	%rcx, 1160(%rsp)
	jmp	.L8506
.L8511:
	movq	24(%r15), %r11
	testq	%r11, %r11
	movq	%r11, 1160(%rsp)
	jne	.L8506
	movq	8(%r15), %r13
	movzbl	2(%r13), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r8
	movq	%r8, 1160(%rsp)
	jmp	.L8506
.L16043:
	movq	3656(%rsp), %rcx
	movq	1184(%rsp), %r9
	movl	32(%rcx), %eax
	cmpl	%eax, 8(%r9)
	jge	.L8377
	movq	%r12, 1192(%rsp)
	movq	8(%rcx), %r10
	movl	48(%r10), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r15)
	movl	%eax, 1180(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r15, 1200(%rsp)
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L8380
	cmpl	$55, %eax
	je	.L16054
	cmpl	$63, %eax
	je	.L8387
	cmpl	$66, %eax
	je	.L8387
.L8383:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L8390
	cmpl	$55, %eax
	je	.L16055
.L8394:
	cmpl	$63, %eax
	je	.L8397
	cmpl	$66, %eax
	je	.L8397
.L8393:
	movq	1184(%rsp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$59, %eax
	je	.L8400
	cmpl	$55, %eax
	je	.L16056
.L8404:
	cmpl	$63, %eax
	je	.L8407
	cmpl	$66, %eax
	je	.L8407
.L8403:
	movq	1200(%rsp), %r8
	cmpw	$55, (%r8)
	jne	.L15283
	movq	1192(%rsp), %rbp
	cmpw	$55, (%rbp)
	jne	.L15283
	cmpq	$0, 1184(%rsp)
	je	.L15283
	movq	1184(%rsp), %rdi
	cmpw	$46, (%rdi)
	je	.L16057
.L8413:
	movl	1180(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 3624(%rsp)
	testl	%ebp, %ebp
	je	.L14369
.L8499:
	movslq	%ebp,%rax
	movq	%rax, 3616(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L8487
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L8491
	movq	1184(%rsp), %r13
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L8487
.L8491:
	movslq	%edx,%r14
	leaq	(%r14,%r14,4), %r13
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16058
.L8492:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16059
.L8493:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L8494
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	3624(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L8487
.L8494:
	call	get_last_insn
	movl	$1, %edx
	movq	1184(%rsp), %rsi
	movq	%rax, 3608(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16060
.L8495:
	movq	1200(%rsp), %rdi
	xorl	%eax, %eax
	movq	1192(%rsp), %rsi
	movq	%rbx, %rdx
	movq	3624(%rsp), %rcx
	call	*insn_gen_function(,%r14,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14963
	movq	3608(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L8487:
	movq	3616(%rsp), %rax
	movl	mode_wider_mode(,%rax,4), %ebp
	testl	%ebp, %ebp
	jne	.L8499
.L14369:
	movq	1184(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$3, %ecx
	xorl	%esi, %esi
	movq	1192(%rsp), %rdx
	movq	memcpy_libfunc(%rip), %rdi
	movq	8(%rdx), %r10
	xorl	%edx, %edx
	movl	$4, 24(%rsp)
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movq	1200(%rsp), %rax
	movq	%r10, (%rsp)
	jmp	.L15157
.L16060:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L8495
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L8495
.L16059:
	xorl	%eax, %eax
	movq	1192(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L8487
	jmp	.L8493
.L16058:
	xorl	%eax, %eax
	movq	1200(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L8487
	jmp	.L8492
.L16057:
	movl	8(%rdi), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1180(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1180(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L8427:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14360
.L8423:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L8423
.L14360:
	testl	%ecx, %ecx
	je	.L8416
	movslq	%ecx,%rcx
	movq	%rcx, %r13
	salq	$4, %r13
	cmpl	$210, 8(%r11,%r13)
	je	.L8425
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L8425
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L8425:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L8427
.L8416:
	decl	%r9d
	jg	.L8413
	movq	1192(%rsp), %rcx
	movq	1200(%rsp), %r11
	movl	%r10d, %r13d
	movl	$9, %r14d
	movq	8(%r11), %rbx
	movq	8(%rcx), %rdi
	movq	%rcx, 6184(%rsp)
	movl	$0, 6212(%rsp)
	movq	%r11, 6160(%rsp)
	xorl	%ecx, %ecx
	movq	%rbx, 6168(%rsp)
	movq	%rdi, 6192(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L8430
	cmpw	$88, %dx
	je	.L8430
	cmpw	$87, %dx
	je	.L8430
.L8429:
	movl	%ecx, 6176(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L8432
	cmpw	$88, %dx
	je	.L8432
	cmpw	$87, %dx
	je	.L8432
.L8431:
	movl	%ecx, 6200(%rsp)
	movl	$0, 6204(%rsp)
	movl	$0, 6180(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L8434
	cmpw	$87, %ax
	je	.L8434
.L8433:
	testl	%edx, %edx
	movl	%edx, 6216(%rsp)
	je	.L8435
	movl	%r10d, 6212(%rsp)
.L8435:
	movl	6200(%rsp), %eax
	movl	%r10d, 6208(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L8437
	movl	6176(%rsp), %eax
	testl	%eax, %eax
	jne	.L8436
.L8437:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1180(%rsp)
	movq	mov_optab(%rip), %r11
	cmovl	1180(%rsp), %ebp
.L8451:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14363
.L8447:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L8447
.L14363:
	testl	%ecx, %ecx
	je	.L8440
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L8449
	movl	mode_size(,%rcx,4), %eax
	movl	$8, %r8d
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r8d, %eax
	cmpl	%eax, %ebp
	jl	.L8449
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L8449:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L8451
.L8440:
	cmpl	$2, %r9d
	jle	.L8436
	testl	%r10d, %r10d
	jne	.L8453
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L8454
	cmpw	$46, %dx
	je	.L8454
	cmpw	$47, %dx
	je	.L8454
	cmpw	$49, %dx
	je	.L8454
	cmpw	$113, %dx
	je	.L8454
.L8453:
	movl	6176(%rsp), %esi
	testl	%esi, %esi
	jne	.L8436
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L8456
	cmpw	$46, %dx
	je	.L8456
	cmpw	$47, %dx
	je	.L8456
	cmpw	$49, %dx
	je	.L8456
	cmpw	$113, %dx
	je	.L8456
.L8436:
	cmpl	$8, 1180(%rsp)
	movl	$8, %eax
	cmovl	1180(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 1180(%rsp)
	jle	.L8459
.L8481:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r13d, %r13d
	testl	%edx, %edx
	je	.L14366
.L8466:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r14d, mode_size(%rbx)
	cmovl	%edx, %r13d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L8466
.L14366:
	testl	%r13d, %r13d
	je	.L8459
	movslq	%r13d,%r14
	movq	%r14, %rdi
	salq	$4, %rdi
	addq	mov_optab(%rip), %rdi
	movl	8(%rdi), %edx
	cmpl	$210, %edx
	je	.L8468
	movl	mode_size(,%r14,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1180(%rsp)
	jl	.L8468
	movslq	%edx,%rcx
	cmpl	%ebp, 6208(%rsp)
	leaq	6160(%rsp), %rbx
	movq	insn_gen_function(,%rcx,8), %r9
	movq	%r9, 3632(%rsp)
	jl	.L8468
	movl	6216(%rsp), %edx
.L8479:
	testl	%edx, %edx
	je	.L8473
	subl	%ebp, 52(%rbx)
.L8473:
	movl	16(%rbx), %r11d
	testl	%r11d, %r11d
	je	.L8474
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15154:
	movl	40(%rbx), %r8d
	movq	%rax, 1168(%rsp)
	testl	%r8d, %r8d
	je	.L8476
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L8477:
	movq	%rax, %rsi
	movq	1168(%rsp), %rdi
	xorl	%eax, %eax
	call	*3632(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L8478
	addl	%ebp, 52(%rbx)
.L8478:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L8479
.L8468:
	movl	mode_size(,%r14,4), %r14d
	cmpl	$1, %r14d
	jg	.L8481
.L8459:
	movl	6208(%rsp), %r14d
	testl	%r14d, %r14d
	jmp	.L15392
.L8476:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L8477
.L8474:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15154
.L8456:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6168(%rsp)
	jmp	.L8436
.L8454:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6192(%rsp)
	jmp	.L8453
.L8434:
	movl	$1, %edx
	jmp	.L8433
.L8432:
	movl	$1, %ecx
	jmp	.L8431
.L8430:
	movl	$1, %ecx
	jmp	.L8429
.L8407:
	movq	1184(%rsp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	1184(%rsp), %r10
	movq	%rax, 8(%r10)
	movq	1184(%rsp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	1184(%rsp), %r9
	movq	%rax, 16(%r9)
	jmp	.L8403
.L16056:
	movq	%rdx, %rcx
	movzbl	2(%rdx), %edx
	cmpb	$16, %dl
	je	.L8401
	movq	8(%rcx), %rbp
	cmpw	$59, (%rbp)
	je	.L16061
.L8401:
	cmpl	$55, %eax
	jne	.L8404
	movq	1184(%rsp), %rbp
	xorl	%esi, %esi
	movq	8(%rbp), %rdi
	call	protect_from_queue
	movq	%rax, 8(%rbp)
	jmp	.L8403
.L16061:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%rcx)
	cmpq	$0, 16(%rbp)
	je	.L8403
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	1184(%rsp), %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L15153:
	movq	%rbx, 1184(%rsp)
	jmp	.L8403
.L8400:
	movq	1184(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L8408
	movq	8(%rcx), %rbx
	jmp	.L15153
.L8408:
	movq	1184(%rsp), %rcx
	movq	24(%rcx), %rsi
	testq	%rsi, %rsi
	je	.L8409
	movq	%rsi, 1184(%rsp)
	jmp	.L8403
.L8409:
	movq	1184(%rsp), %rdi
	movq	8(%rdi), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	1184(%rsp), %rdx
	movq	%rax, %rdi
	movq	8(%rdx), %rsi
	movq	%rax, 24(%rdx)
	call	gen_move_insn
	movq	1184(%rsp), %r11
	movq	%rax, %rdi
	movq	16(%r11), %rsi
	call	emit_insn_before
	movq	1184(%rsp), %r13
	movq	24(%r13), %rsi
	movq	%rsi, 1184(%rsp)
	jmp	.L8403
.L8397:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L8393
.L16055:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L8391
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16062
.L8391:
	cmpl	$55, %eax
	jne	.L8394
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L8393
.L16062:
	movq	8(%rbp), %rcx
	movq	%rcx, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L8393
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r13, 1192(%rsp)
	jmp	.L8393
.L8390:
	cmpq	$0, 16(%r12)
	jne	.L8398
	movq	8(%r12), %r11
	movq	%r11, 1192(%rsp)
	jmp	.L8393
.L8398:
	movq	24(%r12), %rdx
	testq	%rdx, %rdx
	movq	%rdx, 1192(%rsp)
	jne	.L8393
	movq	8(%r12), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r8
	movq	%r8, 1192(%rsp)
	jmp	.L8393
.L8387:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L8383
.L16054:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L8383
.L8380:
	cmpq	$0, 16(%r15)
	jne	.L8388
	movq	8(%r15), %r13
	movq	%r13, 1200(%rsp)
	jmp	.L8383
.L8388:
	movq	24(%r15), %rsi
	testq	%rsi, %rsi
	movq	%rsi, 1200(%rsp)
	jne	.L8383
	movq	8(%r15), %r14
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %rbp
	movq	%rbp, 1200(%rsp)
	jmp	.L8383
	.p2align 6,,7
.L8369:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L8365
.L16032:
	jne	.L8366
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L8365
	.p2align 6,,7
.L8362:
	cmpq	$0, 16(%r15)
	jne	.L8370
	movq	8(%r15), %r15
	jmp	.L8365
.L8370:
	movq	24(%r15), %rsi
	testq	%rsi, %rsi
	je	.L8371
	movq	%rsi, %r15
	jmp	.L8365
.L8371:
	movq	8(%r15), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L8365
	.p2align 6,,7
.L16031:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	3656(%rsp), %rdi
	movzbl	2(%r15), %edx
	movq	%rax, %rsi
	jmp	.L15152
.L8341:
	movl	(%r15), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L16063
	movzbl	2(%r15), %edx
	movq	3656(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	%r15, %rsi
	call	expand_expr
	cmpw	$51, (%r15)
	movq	%rax, %r12
	je	.L16064
.L8359:
	movzwl	(%r12), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L8360
	cmpw	$46, %dx
	je	.L8360
	cmpw	$47, %dx
	je	.L8360
	cmpw	$49, %dx
	je	.L8360
	cmpw	$113, %dx
	jne	.L8306
	jmp	.L8360
	.p2align 6,,7
.L16064:
	cmpl	$63, 8(%r15)
	jle	.L8306
	jmp	.L8359
.L16063:
	movq	3656(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	8(%r15), %rdi
	movzbl	3(%r15), %edx
	movq	%rax, %r12
	movq	%rax, %rsi
	xorl	%eax, %eax
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	jmp	.L8305
.L8350:
	movl	$1, %ebx
	jmp	.L8344
.L8342:
	xorl	%ebx, %ebx
	jmp	.L8344
.L8348:
	movq	8(%r15), %rdi
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L8350
	movq	16(%r15), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L8344
	jmp	.L8350
	.p2align 6,,7
.L16030:
	movzbl	2(%r15), %eax
	cmpb	$16, %al
	je	.L8334
	movl	cse_not_expected(%rip), %r12d
	movq	3656(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	%al, %edx
	testl	%r12d, %r12d
	cmove	%r15, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	call	expand_expr
	movq	%rax, %r12
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L8360
	testb	%al, %al
	je	.L8360
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L15355
	.p2align 6,,7
.L16029:
	cmpb	$16, 2(%r15)
	jne	.L8307
	call	gen_label_rtx
	movq	%rax, %r13
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r14
	testq	%rbx, %rbx
	jne	.L8311
.L14353:
	movzwl	(%r15), %eax
	movq	%r15, %r12
	cmpl	$59, %eax
	je	.L8313
	cmpl	$55, %eax
	je	.L16065
.L8317:
	cmpl	$63, %eax
	je	.L8320
	cmpl	$66, %eax
	je	.L8320
.L8316:
	movq	3656(%rsp), %r15
	xorl	%eax, %eax
	movq	%r13, %rsi
	incl	inhibit_defer_pop(%rip)
	movq	32(%r15), %rdi
	call	jumpifnot
	movq	40(%r15), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movl	%ebp, %edx
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L8326
.L14355:
	movq	%r14, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r13, %rdi
	call	emit_label
	xorl	%eax, %eax
	movl	%ebp, %edx
	movq	3656(%rsp), %r13
	movq	%r12, %rsi
	movq	48(%r13), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L8331
.L14357:
	movq	%r14, %rdi
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L8305
	.p2align 6,,7
.L8331:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rbp
	movq	%rax, 16(%rbx)
	testq	%rbp, %rbp
	movq	%rbp, pending_chain(%rip)
	movq	%rbp, %rbx
	jne	.L8331
	jmp	.L14357
	.p2align 6,,7
.L8326:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rsi
	movq	%rax, 16(%rbx)
	testq	%rsi, %rsi
	movq	%rsi, pending_chain(%rip)
	movq	%rsi, %rbx
	jne	.L8326
	jmp	.L14355
.L8320:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L8316
.L16065:
	jne	.L8317
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L8316
.L8313:
	cmpq	$0, 16(%r15)
	jne	.L8321
	movq	8(%r15), %r12
	jmp	.L8316
.L8321:
	movq	24(%r15), %rax
	testq	%rax, %rax
	je	.L8322
	movq	%rax, %r12
	jmp	.L8316
.L8322:
	movq	8(%r15), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	%rax, 24(%r12)
	movq	%rax, %rdi
	movq	8(%r15), %rsi
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r12
	jmp	.L8316
	.p2align 6,,7
.L8311:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r9
	movq	%rax, 16(%rbx)
	testq	%r9, %r9
	movq	%r9, pending_chain(%rip)
	movq	%r9, %rbx
	jne	.L8311
	jmp	.L14353
	.p2align 6,,7
.L16028:
	movq	32(%rdx), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L8303
.L14351:
	movq	3656(%rsp), %rbx
	movq	%r15, %rsi
	movl	%ebp, %edx
	xorl	%eax, %eax
	movq	40(%rbx), %rdi
	call	store_expr
	movq	%rax, %r12
	jmp	.L8305
.L8303:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdi
	movq	%rax, 16(%rbx)
	testq	%rdi, %rdi
	movq	%rdi, pending_chain(%rip)
	movq	%rdi, %rbx
	jne	.L8303
	jmp	.L14351
.L16027:
	movq	16(%rdi), %r11
	cmpw	$46, (%r11)
	jne	.L8296
	movq	8(%rdi), %rax
	cmpq	virtual_incoming_args_rtx(%rip), %rax
	je	.L8295
	cmpq	virtual_stack_vars_rtx(%rip), %rax
	jne	.L8296
	jmp	.L8295
	.p2align 6,,7
.L8288:
	movq	3656(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movl	%r12d, %r9d
	movl	%ebx, %ecx
	movq	56(%rsp), %rdi
	movq	%rax, %r8
	movq	%rax, %r13
	movl	%ebp, %esi
	movl	%r14d, %edx
	xorl	%eax, %eax
	movl	%r15d, (%rsp)
	call	store_bit_field
	movl	1216(%rsp), %eax
	testl	%eax, %eax
	je	.L8290
	movl	1212(%rsp), %eax
	testl	%eax, %eax
	je	.L8291
	movq	56(%rsp), %r9
	movl	(%r9), %eax
	andl	$134283263, %eax
	cmpl	$134217783, %eax
	je	.L8291
	movl	3640(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L8292
	movl	1212(%rsp), %edx
	xorl	%esi, %esi
	movl	$46, %edi
	xorl	%eax, %eax
	call	gen_rtx
	xorl	%edx, %edx
	movq	%r13, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	expand_and
.L15158:
	movq	%rax, 56(%rsp)
	jmp	.L15167
.L8292:
	movzbl	2(%r13), %r12d
	testl	%r12d, %r12d
	cmove	1216(%rsp), %r12d
	xorl	%esi, %esi
	movslq	%r12d,%r14
	movl	mode_size(,%r14,4), %edi
	sall	$3, %edi
	subl	%ebp, %edi
	call	build_int_2_wide
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	%rax, %rbp
	movl	%r12d, %esi
	movq	%r13, %rdx
	movq	%rax, %rcx
	movl	$77, %edi
	xorl	%eax, %eax
	call	expand_shift
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movl	$78, %edi
	movl	%r12d, %esi
	movq	%rbp, %rcx
	xorl	%eax, %eax
	call	expand_shift
	jmp	.L15158
.L8291:
	movq	56(%rsp), %rdi
	movl	3640(%rsp), %ecx
	movl	%ebp, %esi
	movl	1216(%rsp), %r9d
	movl	%r14d, %edx
	xorl	%r8d, %r8d
	xorl	%eax, %eax
	movl	$0, (%rsp)
	movl	%r12d, 8(%rsp)
	movl	%r15d, 16(%rsp)
	call	extract_bit_field
	jmp	.L15158
.L8290:
	movq	const0_rtx(%rip), %r13
	movq	%r13, 56(%rsp)
	jmp	.L15167
.L16026:
	movq	56(%rsp), %rcx
	movzwl	(%rcx), %eax
	cmpw	$51, %ax
	je	.L8284
	cmpw	$53, %ax
	jne	.L8283
.L8284:
	movq	56(%rsp), %rbx
	movzbl	2(%rbx), %edi
	movslq	%edi,%rdx
	movl	mode_size(,%rdx,4), %esi
	xorl	%edx, %edx
	call	assign_stack_temp
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	copy_rtx
	movq	56(%rsp), %rdx
	movb	$16, 2(%rax)
	movq	%rax, %r13
	movzbq	2(%rdx), %r11
	movl	mode_size(,%r11,4), %eax
	sall	$3, %eax
	cmpl	%eax, %ebp
	je	.L8285
	movq	%rbx, %rdi
	movq	%rdx, %rsi
	call	emit_move_insn
.L8285:
	movq	3656(%rsp), %r8
	movq	%r13, %rdi
	movl	%ebp, %esi
	movl	%r14d, %edx
	movl	$16, %ecx
	xorl	%r9d, %r9d
	xorl	%eax, %eax
	movl	$0, (%rsp)
	movl	%r12d, 8(%rsp)
	movl	%r15d, 16(%rsp)
	call	store_field
	movq	%rbx, %rsi
	movq	56(%rsp), %rdi
	call	emit_move_insn
	jmp	.L15167
.L8280:
	movl	$0, 1216(%rsp)
	jmp	.L8281
.L16025:
	orb	$8, 3(%rsi)
	jmp	.L8278
.L16024:
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	56(%rsp), %r14
	movq	%rax, %rsi
	cmpw	$55, (%r14)
	jne	.L15283
	movl	$4, %edi
	call	force_reg
	movq	56(%rsp), %r13
	movl	$4, %esi
	movq	%rax, %rcx
	movl	$63, %edi
	xorl	%eax, %eax
	movq	8(%r13), %rdx
	call	gen_rtx
	xorl	%esi, %esi
	movq	%r13, %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	movq	%rax, 56(%rsp)
	jmp	.L8276
.L16023:
	movq	%r12, %rdi
	call	stabilize_reference
	movq	%rax, %r12
	jmp	.L8275
.L16022:
	xorl	%edx, %edx
	xorl	%eax, %eax
	movl	$1, %esi
	call	mode_for_size
	movl	%eax, %r15d
	cmpl	$16, %eax
	cmove	%ebx, %r15d
	jmp	.L8272
	.p2align 6,,7
.L16021:
	movq	40(%r12), %rcx
	cmpb	$25, 16(%rcx)
	jne	.L8266
	movq	8(%r12), %rbx
	movq	32(%rbx), %rax
	cmpb	$25, 16(%rax)
	jne	.L8266
	movl	24(%rax), %eax
	imull	24(%rcx), %eax
	jmp	.L15151
	.p2align 6,,7
.L16016:
	movl	flag_volatile(%rip), %eax
	testl	%eax, %eax
	je	.L8249
	movl	$1, (%r14)
	movzbl	16(%r12), %edx
	jmp	.L8249
.L8244:
	movl	24(%rcx), %eax
	movl	%eax, 5548(%rsp)
	jmp	.L8243
.L16015:
	movq	3664(%rsp), %r11
	movzbl	17(%r11), %edx
	movq	40(%r11), %rcx
	shrb	$6, %dl
	movl	%edx, %ebx
	andl	$1, %ebx
	movl	%ebx, 3640(%rsp)
	jmp	.L8240
.L16014:
	movq	40(%r12), %rax
	testb	$16, 53(%rax)
	movq	40(%rax), %rcx
	jne	.L8239
	movzbl	52(%rax), %r15d
.L8239:
	movzbl	17(%rax), %esi
	shrb	$6, %sil
	movl	%esi, %r10d
	andl	$1, %r10d
	movl	%r10d, 3640(%rsp)
	jmp	.L8240
.L15874:
	movq	%r15, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	%rax, 56(%rsp)
	jmp	.L8235
.L8226:
	movq	32(%r15), %rbx
	cmpb	$33, 16(%rbx)
	jne	.L15283
	cmpq	$0, 56(%rsp)
	jne	.L8228
	movq	120(%rbx), %rax
	testq	%rax, %rax
	je	.L8229
	movq	%rax, 56(%rsp)
	movq	40(%r15), %r8
	testq	%r8, %r8
	je	.L581
.L8232:
	movq	%r8, %rdi
	movq	$0, 40(%r15)
	jmp	.L15405
.L8229:
	movq	5424(%rsp), %rdi
	call	int_size_in_bytes
	xorl	%edx, %edx
	movl	5412(%rsp), %edi
	movl	%eax, %esi
	call	assign_stack_temp
	movq	%rax, 56(%rsp)
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	preserve_temp_slots
	movq	56(%rsp), %rbp
	movq	%rbp, 120(%rbx)
.L15149:
	movq	40(%r15), %r8
	jmp	.L8232
.L8228:
	movq	56(%rsp), %rdx
	movq	%rdx, 120(%rbx)
	jmp	.L15149
.L3790:
	movq	cleanups_this_call(%rip), %rax
	movq	$0, 1928(%rsp)
	movq	$0, 1936(%rsp)
	movq	$0, 1944(%rsp)
	movq	$0, cleanups_this_call(%rip)
	movq	%rax, 4712(%rsp)
	movq	40(%r15), %rdi
	call	integer_onep
	testl	%eax, %eax
	jne	.L16067
.L3791:
	movl	5412(%rsp), %eax
	testl	%eax, %eax
	je	.L3795
	movl	5408(%rsp), %r8d
	testl	%r8d, %r8d
	je	.L3794
.L3795:
	movq	$0, 56(%rsp)
.L3796:
	movq	40(%r15), %rcx
	movq	tree_code_type(%rip), %rdx
	movzbq	16(%rcx), %rbx
	movq	(%rdx,%rbx,8), %rbp
	cmpb	$50, (%rbp)
	je	.L16068
.L3857:
	movq	48(%r15), %rcx
	movzbq	16(%rcx), %r8
	movq	(%rdx,%r8,8), %r12
	cmpb	$50, (%r12)
	je	.L16069
.L3859:
	movq	40(%r15), %rcx
	movzbq	16(%rcx), %r9
	movq	(%rdx,%r9,8), %rdi
	cmpb	$49, (%rdi)
	je	.L16070
.L3861:
	movq	48(%r15), %rcx
	movzbq	16(%rcx), %r13
	movq	(%rdx,%r13,8), %r14
	cmpb	$49, (%r14)
	je	.L16071
.L3858:
	cmpq	$0, 1928(%rsp)
	je	.L3864
	cmpq	$0, 1936(%rsp)
	je	.L3864
	movq	32(%r15), %rcx
	testb	$1, 17(%rcx)
	jne	.L3864
	movq	1936(%rsp), %rax
	movzbl	16(%rax), %edx
	leal	-53(%rdx), %r12d
	cmpb	$1, %r12b
	jbe	.L3865
	cmpb	$81, %dl
	je	.L3865
	cmpb	$82, %dl
	je	.L3865
	cmpb	$83, %dl
	je	.L3865
.L3864:
	incl	inhibit_defer_pop(%rip)
	call	gen_label_rtx
	cmpq	$0, 1928(%rsp)
	movq	%rax, 1920(%rsp)
	je	.L3932
	movq	32(%r15), %rbp
	testb	$1, 17(%rbp)
	jne	.L3932
	cmpq	$0, 56(%rsp)
	je	.L3933
	cmpq	$0, 1936(%rsp)
	je	.L3936
	movq	1936(%rsp), %rax
	movq	56(%rsp), %r12
	xorl	%r13d, %r13d
	movq	40(%rax), %rbx
	movzwl	(%r12), %eax
	cmpw	$53, %ax
	je	.L16072
	movl	%eax, %ecx
.L3939:
	cmpw	$55, %cx
	je	.L16073
.L3941:
	movzbl	16(%rbx), %edx
	movzbl	%dl, %edi 
	salq	$3, %rdi
	addq	tree_code_type(%rip), %rdi
	movq	(%rdi), %r10
	movsbl	(%r10),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L3943
	mov	%eax, %r9d
	jmp	*.L3982(,%r9,8)
	.section	.rodata
	.align 8
	.align 4
.L3982:
	.quad	.L3952
	.quad	.L3954
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3954
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3988
	.quad	.L3944
	.quad	.L3957
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3957
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3943
	.quad	.L3946
	.text
.L3944:
	movq	120(%rbx), %r13
.L3943:
	movl	$1, %ebp
.L15066:
	testq	%r13, %r13
	je	.L3938
.L14863:
	cmpw	$53, (%r13)
	je	.L16074
.L3985:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	xorl	%ebp, %ebp
	testl	%eax, %eax
	jne	.L3938
	cmpw	$55, (%r12)
	je	.L16075
.L3988:
	movl	$1, %ebp
.L3938:
	testl	%ebp, %ebp
	je	.L3935
.L3936:
	movq	56(%rsp), %r8
	cmpw	$51, (%r8)
	je	.L16076
.L3934:
	movq	56(%rsp), %r13
	movq	1928(%rsp), %rdx
	xorl	%ebp, %ebp
	movq	%r13, 1856(%rsp)
	movzbl	16(%rdx), %eax
	cmpb	$44, %al
	je	.L16077
	cmpb	$48, %al
	je	.L16078
.L3997:
	xorl	%r12d, %r12d
	testl	%r12d, %r12d
	je	.L4024
	movq	56(%rsp), %rcx
	cmpw	$55, (%rcx)
	je	.L16079
.L4024:
	movq	56(%rsp), %rsi
	movzwl	(%rsi), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L4032
	mov	%eax, %edi
	jmp	*.L4041(,%rdi,8)
	.section	.rodata
	.align 8
	.align 4
.L4041:
	.quad	.L4035
	.quad	.L4032
	.quad	.L4032
	.quad	.L4032
	.quad	.L4040
	.quad	.L4032
	.quad	.L4032
	.quad	.L4032
	.quad	.L4038
	.quad	.L4038
	.quad	.L4032
	.quad	.L4038
	.text
.L4035:
	movq	56(%rsp), %rax
	movq	8(%rax), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %ebx
.L4034:
	testl	%ebx, %ebx
	je	.L4031
	movq	56(%rsp), %rcx
	movzbl	2(%rcx), %eax
	cmpb	$16, %al
	je	.L4043
	testb	%al, %al
	jne	.L16080
.L4043:
	movq	56(%rsp), %r14
	movq	1928(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	2(%r14), %edx
.L15069:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L15333:
	movq	%rax, %r12
.L4050:
	movl	$1, %ebp
.L3996:
	cmpq	56(%rsp), %r12
	je	.L4443
	movq	1928(%rsp), %rsi
	cmpb	$0, 16(%rsi)
	je	.L4443
	movq	56(%rsp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$59, %eax
	je	.L4052
	cmpl	$55, %eax
	je	.L16081
.L4056:
	cmpl	$63, %eax
	je	.L4059
	cmpl	$66, %eax
	je	.L4059
.L4055:
	movq	1856(%rsp), %rbx
	movzbl	2(%r12), %eax
	movzbl	2(%rbx), %ecx
	cmpb	%cl, %al
	je	.L4062
	testb	%al, %al
	je	.L4062
	movq	1928(%rsp), %r8
	movq	8(%r8), %r13
	movzbl	17(%r13), %edi
	shrb	$6, %dil
	movl	%edi, %edx
	andl	$1, %edx
	testl	%ebp, %ebp
	je	.L4063
	movzbl	%cl, %edi
	movq	%r12, %rsi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%rbx, %rdi
	movq	%rax, %rsi
.L15076:
	call	emit_move_insn
.L4443:
	cmpq	$0, cleanups_this_call(%rip)
	jne	.L16082
.L4448:
	movq	1928(%rsp), %r11
	cmpq	40(%r15), %r11
	je	.L16083
	movq	32(%r15), %rdi
	movq	1920(%rsp), %rsi
	xorl	%eax, %eax
	call	jumpifnot
.L4450:
	cmpq	$0, 1936(%rsp)
	je	.L4457
	cmpq	$0, 56(%rsp)
	jne	.L4451
	movq	1936(%rsp), %rax
	movl	5408(%rsp), %r15d
	xorl	%esi, %esi
	addq	$40, %rax
	testl	%r15d, %r15d
	je	.L4455
	movq	const0_rtx(%rip), %rsi
.L4455:
	movq	(%rax), %rdi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L6845:
	movq	1920(%rsp), %r12
	movq	%r12, 1312(%rsp)
.L5367:
	cmpq	$0, cleanups_this_call(%rip)
	jne	.L16084
.L8220:
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L8224
.L14349:
	movq	1312(%rsp), %rdi
	call	emit_label
	movq	4712(%rsp), %rbx
	decl	inhibit_defer_pop(%rip)
	movq	%rbx, cleanups_this_call(%rip)
	jmp	.L581
.L8224:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r10
	movq	%rax, 16(%rbx)
	testq	%r10, %r10
	movq	%r10, pending_chain(%rip)
	movq	%r10, %rbx
	jne	.L8224
	jmp	.L14349
.L16084:
	movl	$.LC1, %edi
	xorl	%eax, %eax
	call	sorry
	movq	$0, cleanups_this_call(%rip)
	jmp	.L8220
.L4451:
	movq	5424(%rsp), %rdi
	movq	56(%rsp), %rsi
	xorl	%eax, %eax
	xorl	%ebp, %ebp
	call	make_tree
	movq	5424(%rsp), %rsi
	movq	1936(%rsp), %r13
	movq	%rax, %rdx
	xorl	%eax, %eax
	movzbl	16(%r13), %edi
	movq	40(%r13), %rcx
	call	build
	movq	56(%rsp), %r15
	movq	%rax, 4584(%rsp)
	movq	%rax, %rsi
	movzbl	16(%rax), %eax
	cmpb	$44, %al
	je	.L16085
	cmpb	$48, %al
	je	.L16086
.L4466:
	xorl	%r12d, %r12d
	testl	%r12d, %r12d
	je	.L4493
	movq	56(%rsp), %rdx
	cmpw	$55, (%rdx)
	je	.L16087
.L4493:
	movq	56(%rsp), %rsi
	movzwl	(%rsi), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L4501
	mov	%eax, %r14d
	jmp	*.L4510(,%r14,8)
	.section	.rodata
	.align 8
	.align 4
.L4510:
	.quad	.L4504
	.quad	.L4501
	.quad	.L4501
	.quad	.L4501
	.quad	.L4509
	.quad	.L4501
	.quad	.L4501
	.quad	.L4501
	.quad	.L4507
	.quad	.L4507
	.quad	.L4501
	.quad	.L4507
	.text
.L4504:
	movq	56(%rsp), %rax
	movq	8(%rax), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %ebx
.L4503:
	testl	%ebx, %ebx
	je	.L4500
	movq	56(%rsp), %r11
	movzbl	2(%r11), %eax
	cmpb	$16, %al
	je	.L4512
	testb	%al, %al
	jne	.L16088
.L4512:
	movq	56(%rsp), %rcx
	movq	4584(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	2(%rcx), %edx
.L15078:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L15334:
	movq	%rax, %r12
.L4519:
	movl	$1, %ebp
.L4465:
	cmpq	56(%rsp), %r12
	je	.L6845
	movq	4584(%rsp), %rbx
	cmpb	$0, 16(%rbx)
	je	.L6845
	movq	56(%rsp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$59, %eax
	je	.L4521
	cmpl	$55, %eax
	je	.L16089
.L4525:
	cmpl	$63, %eax
	je	.L4528
	cmpl	$66, %eax
	je	.L4528
.L4524:
	movzbl	2(%r12), %eax
	movzbl	2(%r15), %ecx
	cmpb	%cl, %al
	je	.L4531
	testb	%al, %al
	je	.L4531
	movq	4584(%rsp), %rbx
.L15416:
	movq	8(%rbx), %r11
	movzbl	17(%r11), %esi
	shrb	$6, %sil
	movl	%esi, %edx
	andl	$1, %edx
	testl	%ebp, %ebp
	je	.L6913
	movzbl	%cl, %edi
	movq	%r12, %rsi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%r15, %rdi
	movq	%rax, %rsi
.L15130:
	call	emit_move_insn
	jmp	.L6845
.L6913:
	movq	%r15, %rdi
	movq	%r12, %rsi
.L15131:
	xorl	%eax, %eax
	call	convert_move
	jmp	.L6845
.L4531:
	cmpb	$16, %al
	je	.L16090
.L7168:
	movq	%r15, %rdi
	movq	%r12, %rsi
	jmp	.L15130
.L16090:
	movq	4584(%rsp), %rsi
	cmpb	$28, 16(%rsi)
	je	.L16091
	cmpb	$16, %al
	jne	.L7168
	movq	4584(%rsp), %rdi
	xorl	%eax, %eax
	call	expr_size
	movq	4584(%rsp), %rdi
	movq	%rax, %r13
	movq	8(%rdi), %rbx
	movl	48(%rbx), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r15)
	movl	%eax, 1788(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L4790
	cmpl	$55, %eax
	je	.L16092
.L4794:
	cmpl	$63, %eax
	je	.L4797
	cmpl	$66, %eax
	je	.L4797
.L4793:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L4800
	cmpl	$55, %eax
	je	.L16093
.L4804:
	cmpl	$63, %eax
	je	.L4807
	cmpl	$66, %eax
	je	.L4807
.L4803:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L4810
	cmpl	$55, %eax
	je	.L16094
.L4814:
	cmpl	$63, %eax
	je	.L4817
	cmpl	$66, %eax
	je	.L4817
.L4813:
	cmpw	$55, (%r15)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	testq	%r13, %r13
	je	.L15283
	cmpw	$46, (%r13)
	je	.L16095
.L4823:
	movl	1788(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 4512(%rsp)
	testl	%ebp, %ebp
	je	.L14257
.L4909:
	movslq	%ebp,%rax
	movq	%rax, 4504(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L4897
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L4901
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L4897
.L4901:
	movslq	%edx,%rdi
	leaq	(%rdi,%rdi,4), %r14
	movq	%rdi, 4496(%rsp)
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16096
.L4902:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16097
.L4903:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L4904
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	4512(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L4897
.L4904:
	call	get_last_insn
	movl	$1, %edx
	movq	%r13, %rsi
	movq	%rax, 4488(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16098
.L4905:
	movq	4496(%rsp), %rbp
	movq	%r15, %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	4512(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14954
	movq	4488(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L4897:
	movq	4504(%rsp), %r14
	movl	mode_wider_mode(,%r14,4), %ebp
	testl	%ebp, %ebp
	jne	.L4909
.L14257:
	movl	$4, %edi
	movq	%r13, %rsi
.L15129:
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%r12), %r13
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%r13, (%rsp)
	movq	8(%r15), %r8
	call	emit_library_call
	jmp	.L6845
.L14954:
	call	emit_insn
	jmp	.L6845
.L16098:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L4905
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L4905
.L16097:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L4897
	jmp	.L4903
.L16096:
	xorl	%eax, %eax
	movq	%r15, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L4897
	jmp	.L4902
.L16095:
	movl	8(%r13), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1788(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1788(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L4837:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14026
.L4833:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L4833
.L14026:
	testl	%ecx, %ecx
	je	.L4826
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L4835
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L4835
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L4835:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L4837
.L4826:
	decl	%r9d
	jg	.L4823
	movq	8(%r15), %rbx
	movq	8(%r12), %rdi
	xorl	%ecx, %ecx
	movq	%r12, 7144(%rsp)
	movl	$0, 7172(%rsp)
	movq	%r15, 7120(%rsp)
	movl	%r10d, %r13d
	movl	$9, %r14d
	movq	%rbx, 7128(%rsp)
	movq	%rdi, 7152(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L4840
	cmpw	$88, %dx
	je	.L4840
	cmpw	$87, %dx
	je	.L4840
.L4839:
	movl	%ecx, 7136(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L4842
	cmpw	$88, %dx
	je	.L4842
	cmpw	$87, %dx
	je	.L4842
.L4841:
	movl	%ecx, 7160(%rsp)
	movl	$0, 7164(%rsp)
	movl	$0, 7140(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L4844
	cmpw	$87, %ax
	je	.L4844
.L4843:
	testl	%edx, %edx
	movl	%edx, 7176(%rsp)
	je	.L4845
	movl	%r10d, 7172(%rsp)
.L4845:
	movl	%r10d, 7168(%rsp)
	movl	7160(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L4847
	movl	7136(%rsp), %eax
	testl	%eax, %eax
	jne	.L4846
.L4847:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1788(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1788(%rsp), %ebp
.L4861:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14029
.L4857:
	movslq	%edx,%r15
	salq	$2, %r15
	cmpl	%r8d, mode_size(%r15)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r15), %edx
	testl	%edx, %edx
	jne	.L4857
.L14029:
	testl	%ecx, %ecx
	je	.L4850
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L4859
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L4859
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L4859:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L4861
.L4850:
	cmpl	$2, %r9d
	jle	.L4846
	testl	%r10d, %r10d
	jne	.L4863
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L4864
	cmpw	$46, %dx
	je	.L4864
	cmpw	$47, %dx
	je	.L4864
	cmpw	$49, %dx
	je	.L4864
	cmpw	$113, %dx
	je	.L4864
.L4863:
	movl	7136(%rsp), %eax
	testl	%eax, %eax
	jne	.L4846
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L4866
	cmpw	$46, %dx
	je	.L4866
	cmpw	$47, %dx
	je	.L4866
	cmpw	$49, %dx
	je	.L4866
	cmpw	$113, %dx
	je	.L4866
.L4846:
	cmpl	$8, 1788(%rsp)
	movl	$8, %eax
	cmovl	1788(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 1788(%rsp)
	jle	.L4869
.L4891:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14032
.L4876:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r14d, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L4876
.L14032:
	testl	%r12d, %r12d
	je	.L4869
	movslq	%r12d,%r13
	movq	%r13, %r11
	salq	$4, %r11
	addq	mov_optab(%rip), %r11
	movl	8(%r11), %edx
	cmpl	$210, %edx
	je	.L4878
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1788(%rsp)
	jl	.L4878
	cmpl	%ebp, 7168(%rsp)
	movslq	%edx,%r10
	leaq	7120(%rsp), %rbx
	movq	insn_gen_function(,%r10,8), %r15
	jl	.L4878
	movl	7176(%rsp), %edx
.L4889:
	testl	%edx, %edx
	je	.L4883
	subl	%ebp, 52(%rbx)
.L4883:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L4884
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15082:
	movq	%rax, %r14
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L4886
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L4887:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*%r15
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L4888
	addl	%ebp, 52(%rbx)
.L4888:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L4889
.L4878:
	movl	mode_size(,%r13,4), %r14d
	cmpl	$1, %r14d
	jg	.L4891
.L4869:
	movl	7168(%rsp), %eax
	testl	%eax, %eax
.L15389:
	je	.L6845
	jmp	.L15283
.L4886:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L4887
.L4884:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15082
.L4866:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7128(%rsp)
	jmp	.L4846
.L4864:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7152(%rsp)
	jmp	.L4863
.L4844:
	movl	$1, %edx
	jmp	.L4843
.L4842:
	movl	$1, %ecx
	jmp	.L4841
.L4840:
	movl	$1, %ecx
	jmp	.L4839
.L4817:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L4813
.L16094:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L4811
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L16099
.L4811:
	cmpl	$55, %eax
	jne	.L4814
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L4813
.L16099:
	movq	8(%rbp), %r10
	movq	%r10, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L4813
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L4813
.L4810:
	cmpq	$0, 16(%r13)
	jne	.L4818
	movq	8(%r13), %r13
	jmp	.L4813
.L4818:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L4819
	movq	%rsi, %r13
	jmp	.L4813
.L4819:
	movq	8(%r13), %rbp
	movzbl	2(%rbp), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L4813
.L4807:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L4803
.L16093:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L4801
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16100
.L4801:
	cmpl	$55, %eax
	jne	.L4804
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L4803
.L16100:
	movq	8(%rbp), %r11
	movq	%r11, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L4803
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L4803
.L4800:
	cmpq	$0, 16(%r12)
	jne	.L4808
	movq	8(%r12), %r12
	jmp	.L4803
.L4808:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L4809
	movq	%rsi, %r12
	jmp	.L4803
.L4809:
	movq	8(%r12), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L4803
.L4797:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L4793
.L16092:
	jne	.L4794
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L4793
.L4790:
	cmpq	$0, 16(%r15)
	jne	.L4798
	movq	8(%r15), %r15
	jmp	.L4793
.L4798:
	movq	24(%r15), %rdi
	testq	%rdi, %rdi
	je	.L4799
	movq	%rdi, %r15
	jmp	.L4793
.L4799:
	movq	8(%r15), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L4793
.L16091:
	xorl	%eax, %eax
	movq	%rsi, %rdi
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, 1840(%rsp)
	je	.L16101
.L4536:
	movl	$8, %edi
	call	size_int
	movl	$57, %edi
	movq	4584(%rsp), %r9
	movq	%rax, %rdx
	movq	8(%r9), %rcx
	movq	32(%rcx), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	4584(%rsp), %r11
	movq	%rax, %r14
	movl	32(%r11), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%r14, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movq	4584(%rsp), %r13
	movq	$0, 1792(%rsp)
	movq	%rax, 1816(%rsp)
	movq	%rax, %r14
	movq	8(%r13), %rbp
	movl	48(%rbp), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r15)
	movl	%eax, 1812(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r15, 1824(%rsp)
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L4662
	cmpl	$55, %eax
	je	.L16102
	cmpl	$63, %eax
	je	.L4669
	cmpl	$66, %eax
	je	.L4669
.L4665:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L4672
	cmpl	$55, %eax
	je	.L16103
.L4676:
	cmpl	$63, %eax
	je	.L4679
	cmpl	$66, %eax
	je	.L4679
.L4675:
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L4682
	cmpl	$55, %eax
	je	.L16104
.L4686:
	cmpl	$63, %eax
	je	.L4689
	cmpl	$66, %eax
	je	.L4689
.L4685:
	movq	1824(%rsp), %rax
	cmpw	$55, (%rax)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 1816(%rsp)
	je	.L15283
	movq	1816(%rsp), %rax
	cmpw	$46, (%rax)
	je	.L16105
.L4695:
	movl	1812(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 4544(%rsp)
	testl	%ebp, %ebp
	je	.L14023
.L4781:
	movslq	%ebp,%r8
	movq	%r8, %rax
	movq	%r8, 4536(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L4769
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L4773
	movq	1816(%rsp), %r13
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L4769
.L4773:
	movslq	%edx,%r10
	leaq	(%r10,%r10,4), %r13
	movq	%r10, 4528(%rsp)
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16106
.L4774:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16107
.L4775:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L4776
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	4544(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L4769
.L4776:
	call	get_last_insn
	movl	$1, %edx
	movq	1816(%rsp), %rsi
	movq	%rax, 4520(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16108
.L4777:
	movq	4528(%rsp), %rbp
	movq	1824(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	4544(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14936
	movq	4520(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L4769:
	movq	4536(%rsp), %rsi
	movl	mode_wider_mode(,%rsi,4), %ebp
	testl	%ebp, %ebp
	jne	.L4781
.L14023:
	movq	1816(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movq	1824(%rsp), %r9
	xorl	%edx, %edx
	movq	8(%r12), %rcx
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%eax, %eax
	movq	%rcx, (%rsp)
	movq	8(%r9), %r8
	movl	$3, %ecx
	movl	$4, %r9d
	call	emit_library_call
.L4779:
	cmpw	$46, (%r14)
	je	.L16109
	movq	8(%r15), %rsi
	movl	$4, %edi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movl	$4, %edi
	movq	%r14, %rcx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	1840(%rsp), %rdx
	movl	$4, %edi
	movq	%r14, %rcx
	movq	%rax, %rbp
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 1792(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L4783:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L4784
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%rbp, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L4784:
	cmpq	$0, 1792(%rsp)
	je	.L6845
	movq	1792(%rsp), %rdi
.L15348:
	call	emit_label
	jmp	.L6845
.L16109:
	movq	4584(%rsp), %r14
	movq	8(%r15), %rdi
	movl	32(%r14), %esi
	call	plus_constant_wide
	movq	1840(%rsp), %rdi
	movq	4584(%rsp), %r15
	movq	%rax, %rbp
	movl	32(%r15), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L4783
.L14936:
	call	emit_insn
	jmp	.L4779
.L16108:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L4777
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L4777
.L16107:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L4769
	jmp	.L4775
.L16106:
	xorl	%eax, %eax
	movq	1824(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L4769
	jmp	.L4774
.L16105:
	movl	8(%rax), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1812(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1812(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L4709:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14014
.L4705:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L4705
.L14014:
	testl	%ecx, %ecx
	je	.L4698
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L4707
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L4707
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L4707:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L4709
.L4698:
	decl	%r9d
	jg	.L4695
	movq	1824(%rsp), %rdx
	movq	8(%r12), %rdi
	xorl	%ecx, %ecx
	movl	%r10d, %r13d
	movq	8(%rdx), %rbx
	movq	%r12, 7144(%rsp)
	movq	%rdx, 7120(%rsp)
	movl	$0, 7172(%rsp)
	movq	%rdi, 7152(%rsp)
	movl	$9, 1808(%rsp)
	movq	%rbx, 7128(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L4712
	cmpw	$88, %dx
	je	.L4712
	cmpw	$87, %dx
	je	.L4712
.L4711:
	movl	%ecx, 7136(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L4714
	cmpw	$88, %dx
	je	.L4714
	cmpw	$87, %dx
	je	.L4714
.L4713:
	movl	%ecx, 7160(%rsp)
	movl	$0, 7164(%rsp)
	movl	$0, 7140(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L4716
	cmpw	$87, %ax
	je	.L4716
.L4715:
	testl	%edx, %edx
	movl	%edx, 7176(%rsp)
	je	.L4717
	movl	%r10d, 7172(%rsp)
.L4717:
	movl	%r10d, 7168(%rsp)
	movl	7160(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L4719
	movl	7136(%rsp), %r11d
	testl	%r11d, %r11d
	jne	.L4718
.L4719:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1812(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1812(%rsp), %ebp
.L4733:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14017
.L4729:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L4729
.L14017:
	testl	%ecx, %ecx
	je	.L4722
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L4731
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L4731
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L4731:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L4733
.L4722:
	cmpl	$2, %r9d
	jle	.L4718
	testl	%r10d, %r10d
	jne	.L4735
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L4736
	cmpw	$46, %dx
	je	.L4736
	cmpw	$47, %dx
	je	.L4736
	cmpw	$49, %dx
	je	.L4736
	cmpw	$113, %dx
	je	.L4736
.L4735:
	movl	7136(%rsp), %esi
	testl	%esi, %esi
	jne	.L4718
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L4738
	cmpw	$46, %dx
	je	.L4738
	cmpw	$47, %dx
	je	.L4738
	cmpw	$49, %dx
	je	.L4738
	cmpw	$113, %dx
	je	.L4738
.L4718:
	cmpl	$8, 1812(%rsp)
	movl	$8, %eax
	cmovl	1812(%rsp), %eax
	cmpl	$1, 1808(%rsp)
	movl	%eax, 1812(%rsp)
	jle	.L4741
.L4763:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14020
.L4748:
	movslq	%edx,%rbx
	movl	1808(%rsp), %r9d
	salq	$2, %rbx
	cmpl	%r9d, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L4748
.L14020:
	testl	%r12d, %r12d
	je	.L4741
	movslq	%r12d,%r13
	movq	%r13, %rdi
	salq	$4, %rdi
	addq	mov_optab(%rip), %rdi
	movl	8(%rdi), %edx
	cmpl	$210, %edx
	je	.L4750
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1812(%rsp)
	jl	.L4750
	movslq	%edx,%r11
	cmpl	%ebp, 7168(%rsp)
	leaq	7120(%rsp), %rbx
	movq	insn_gen_function(,%r11,8), %rdx
	movq	%rdx, 4552(%rsp)
	jl	.L4750
	movl	7176(%rsp), %edx
.L4761:
	testl	%edx, %edx
	je	.L4755
	subl	%ebp, 52(%rbx)
.L4755:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L4756
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15081:
	movq	%rax, 1800(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L4758
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L4759:
	movq	%rax, %rsi
	movq	1800(%rsp), %rdi
	xorl	%eax, %eax
	call	*4552(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L4760
	addl	%ebp, 52(%rbx)
.L4760:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L4761
.L4750:
	movl	mode_size(,%r13,4), %r12d
	movl	%r12d, 1808(%rsp)
	decl	%r12d
	jg	.L4763
.L4741:
	movl	7168(%rsp), %eax
	testl	%eax, %eax
	je	.L4779
	jmp	.L15283
.L4758:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L4759
.L4756:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15081
.L4738:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7128(%rsp)
	jmp	.L4718
.L4736:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7152(%rsp)
	jmp	.L4735
.L4716:
	movl	$1, %edx
	jmp	.L4715
.L4714:
	movl	$1, %ecx
	jmp	.L4713
.L4712:
	movl	$1, %ecx
	jmp	.L4711
.L4689:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L4685
.L16104:
	movzbl	2(%r14), %edx
	cmpb	$16, %dl
	je	.L4683
	movq	8(%r14), %rbp
	cmpw	$59, (%rbp)
	je	.L16110
.L4683:
	cmpl	$55, %eax
	jne	.L4686
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L4685
.L16110:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r14)
	cmpq	$0, 16(%rbp)
	je	.L4685
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r13, 1816(%rsp)
	jmp	.L4685
.L4682:
	cmpq	$0, 16(%r14)
	jne	.L4690
	movq	8(%r14), %rbp
	movq	%rbp, 1816(%rsp)
	jmp	.L4685
.L4690:
	movq	24(%r14), %r11
	testq	%r11, %r11
	movq	%r11, 1816(%rsp)
	jne	.L4685
	movq	8(%r14), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rcx
	movq	%rcx, 1816(%rsp)
	jmp	.L4685
.L4679:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L4675
.L16103:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L4673
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16111
.L4673:
	cmpl	$55, %eax
	jne	.L4676
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L4675
.L16111:
	movq	8(%rbp), %r8
	movq	%r8, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L4675
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	%r13, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L4675
.L4672:
	cmpq	$0, 16(%r12)
	jne	.L4680
	movq	8(%r12), %r12
	jmp	.L4675
.L4680:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L4681
	movq	%rsi, %r12
	jmp	.L4675
.L4681:
	movq	8(%r12), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L4675
.L4669:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L4665
.L16102:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L4665
.L4662:
	cmpq	$0, 16(%r15)
	jne	.L4670
	movq	8(%r15), %rax
	movq	%rax, 1824(%rsp)
	jmp	.L4665
.L4670:
	movq	24(%r15), %r10
	testq	%r10, %r10
	movq	%r10, 1824(%rsp)
	jne	.L4665
	movq	8(%r15), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %rsi
	movq	%rsi, 1824(%rsp)
	jmp	.L4665
.L16101:
	movq	4584(%rsp), %rdi
	movq	1840(%rsp), %rbp
	movl	32(%rdi), %eax
	cmpl	%eax, 8(%rbp)
	jge	.L4536
	movq	8(%rdi), %r10
	movl	48(%r10), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r15)
	movl	%eax, 1836(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L4539
	cmpl	$55, %eax
	je	.L16112
.L4543:
	cmpl	$63, %eax
	je	.L4546
	cmpl	$66, %eax
	je	.L4546
.L4542:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L4549
	cmpl	$55, %eax
	je	.L16113
.L4553:
	cmpl	$63, %eax
	je	.L4556
	cmpl	$66, %eax
	je	.L4556
.L4552:
	movq	1840(%rsp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$59, %eax
	je	.L4559
	cmpl	$55, %eax
	je	.L16114
.L4563:
	cmpl	$63, %eax
	je	.L4566
	cmpl	$66, %eax
	je	.L4566
.L4562:
	cmpw	$55, (%r15)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 1840(%rsp)
	je	.L15283
	movq	1840(%rsp), %rbx
	cmpw	$46, (%rbx)
	je	.L16115
.L4572:
	movl	1836(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 4576(%rsp)
	testl	%ebp, %ebp
	je	.L14011
.L4658:
	movslq	%ebp,%rax
	movq	%rax, 4568(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L4646
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L4650
	movq	1840(%rsp), %rdi
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%rdi)
	ja	.L4646
.L4650:
	movslq	%edx,%r14
	leaq	(%r14,%r14,4), %r13
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16116
.L4651:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16117
.L4652:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L4653
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	4576(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L4646
.L4653:
	call	get_last_insn
	movl	$1, %edx
	movq	1840(%rsp), %rsi
	movq	%rax, 4560(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16118
.L4654:
	movq	%r15, %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	4576(%rsp), %rcx
	call	*insn_gen_function(,%r14,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14954
	movq	4560(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L4646:
	movq	4568(%rsp), %rdx
	movl	mode_wider_mode(,%rdx,4), %ebp
	testl	%ebp, %ebp
	jne	.L4658
.L14011:
	movq	1840(%rsp), %rsi
	movl	$4, %edi
	jmp	.L15129
.L16118:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L4654
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L4654
.L16117:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L4646
	jmp	.L4652
.L16116:
	xorl	%eax, %eax
	movq	%r15, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L4646
	jmp	.L4651
.L16115:
	movl	8(%rbx), %r10d
	xorl	%r9d, %r9d
	movl	$9, %r8d
	cmpl	$8, 1836(%rsp)
	movl	$8, %ebx
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1836(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L4586:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14002
.L4582:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L4582
.L14002:
	testl	%ecx, %ecx
	je	.L4575
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L4584
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L4584
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L4584:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L4586
.L4575:
	decl	%r9d
	jg	.L4572
	movq	8(%r15), %rbx
	movq	8(%r12), %rdi
	xorl	%ecx, %ecx
	movq	%r12, 7208(%rsp)
	movl	$0, 7236(%rsp)
	movq	%r15, 7184(%rsp)
	movl	%r10d, %r13d
	movl	$9, %r14d
	movq	%rbx, 7192(%rsp)
	movq	%rdi, 7216(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L4589
	cmpw	$88, %dx
	je	.L4589
	cmpw	$87, %dx
	je	.L4589
.L4588:
	movl	%ecx, 7200(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L4591
	cmpw	$88, %dx
	je	.L4591
	cmpw	$87, %dx
	je	.L4591
.L4590:
	movl	%ecx, 7224(%rsp)
	movl	$0, 7228(%rsp)
	movl	$0, 7204(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L4593
	cmpw	$87, %ax
	je	.L4593
.L4592:
	testl	%edx, %edx
	movl	%edx, 7240(%rsp)
	je	.L4594
	movl	%r10d, 7236(%rsp)
.L4594:
	movl	%r10d, 7232(%rsp)
	movl	7224(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L4596
	movl	7200(%rsp), %ebp
	testl	%ebp, %ebp
	jne	.L4595
.L4596:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1836(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1836(%rsp), %ebp
.L4610:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14005
.L4606:
	movslq	%edx,%r15
	salq	$2, %r15
	cmpl	%r8d, mode_size(%r15)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r15), %edx
	testl	%edx, %edx
	jne	.L4606
.L14005:
	testl	%ecx, %ecx
	je	.L4599
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L4608
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L4608
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L4608:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L4610
.L4599:
	cmpl	$2, %r9d
	jle	.L4595
	testl	%r10d, %r10d
	jne	.L4612
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L4613
	cmpw	$46, %dx
	je	.L4613
	cmpw	$47, %dx
	je	.L4613
	cmpw	$49, %dx
	je	.L4613
	cmpw	$113, %dx
	je	.L4613
.L4612:
	movl	7200(%rsp), %eax
	testl	%eax, %eax
	jne	.L4595
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L4615
	cmpw	$46, %dx
	je	.L4615
	cmpw	$47, %dx
	je	.L4615
	cmpw	$49, %dx
	je	.L4615
	cmpw	$113, %dx
	je	.L4615
.L4595:
	cmpl	$8, 1836(%rsp)
	movl	$8, %eax
	cmovl	1836(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 1836(%rsp)
	jle	.L4618
.L4640:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14008
.L4625:
	movslq	%edx,%r9
	salq	$2, %r9
	cmpl	%r14d, mode_size(%r9)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%r9), %edx
	testl	%edx, %edx
	jne	.L4625
.L14008:
	testl	%r12d, %r12d
	je	.L4618
	movslq	%r12d,%r13
	movq	%r13, %r10
	salq	$4, %r10
	addq	mov_optab(%rip), %r10
	movl	8(%r10), %edx
	cmpl	$210, %edx
	je	.L4627
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1836(%rsp)
	jl	.L4627
	cmpl	%ebp, 7232(%rsp)
	movslq	%edx,%rbx
	movq	insn_gen_function(,%rbx,8), %r15
	leaq	7184(%rsp), %rbx
	jl	.L4627
	movl	7240(%rsp), %edx
.L4638:
	testl	%edx, %edx
	je	.L4632
	subl	%ebp, 52(%rbx)
.L4632:
	movl	16(%rbx), %r14d
	testl	%r14d, %r14d
	je	.L4633
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15080:
	movl	40(%rbx), %esi
	movq	%rax, %r14
	testl	%esi, %esi
	je	.L4635
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L4636:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*%r15
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L4637
	addl	%ebp, 52(%rbx)
.L4637:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L4638
.L4627:
	movl	mode_size(,%r13,4), %r14d
	cmpl	$1, %r14d
	jg	.L4640
.L4618:
	movl	7232(%rsp), %r8d
	testl	%r8d, %r8d
	jmp	.L15389
.L4635:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L4636
.L4633:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15080
.L4615:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7192(%rsp)
	jmp	.L4595
.L4613:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7216(%rsp)
	jmp	.L4612
.L4593:
	movl	$1, %edx
	jmp	.L4592
.L4591:
	movl	$1, %ecx
	jmp	.L4590
.L4589:
	movl	$1, %ecx
	jmp	.L4588
.L4566:
	movq	1840(%rsp), %r8
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	1840(%rsp), %rcx
	movq	%rax, 8(%rcx)
	movq	1840(%rsp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	1840(%rsp), %r11
	movq	%rax, 16(%r11)
	jmp	.L4562
.L16114:
	movq	%rdx, %rcx
	movzbl	2(%rdx), %edx
	cmpb	$16, %dl
	je	.L4560
	movq	8(%rcx), %rbp
	cmpw	$59, (%rbp)
	je	.L16119
.L4560:
	cmpl	$55, %eax
	jne	.L4563
	movq	1840(%rsp), %rbp
	xorl	%esi, %esi
	movq	8(%rbp), %rdi
	call	protect_from_queue
	movq	%rax, 8(%rbp)
	jmp	.L4562
.L16119:
	movq	8(%rbp), %r13
	movq	%r13, 8(%rcx)
	cmpq	$0, 16(%rbp)
	je	.L4562
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	1840(%rsp), %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L15079:
	movq	%rbx, 1840(%rsp)
	jmp	.L4562
.L4559:
	movq	1840(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L4567
	movq	8(%rcx), %rbx
	jmp	.L15079
.L4567:
	movq	1840(%rsp), %r9
	movq	24(%r9), %rsi
	testq	%rsi, %rsi
	je	.L4568
	movq	%rsi, 1840(%rsp)
	jmp	.L4562
.L4568:
	movq	1840(%rsp), %rdx
	movq	8(%rdx), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	1840(%rsp), %r14
	movq	%rax, %rdi
	movq	8(%r14), %rsi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	1840(%rsp), %rbx
	movq	%rax, %rdi
	movq	16(%rbx), %rsi
	call	emit_insn_before
	movq	1840(%rsp), %r10
	movq	24(%r10), %rdi
	movq	%rdi, 1840(%rsp)
	jmp	.L4562
.L4556:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L4552
.L16113:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L4550
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16120
.L4550:
	cmpl	$55, %eax
	jne	.L4553
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L4552
.L16120:
	movq	8(%rbp), %rsi
	movq	%rsi, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L4552
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L4552
.L4549:
	cmpq	$0, 16(%r12)
	jne	.L4557
	movq	8(%r12), %r12
	jmp	.L4552
.L4557:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L4558
	movq	%rsi, %r12
	jmp	.L4552
.L4558:
	movq	8(%r12), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L4552
.L4546:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L4542
.L16112:
	jne	.L4543
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L4542
.L4539:
	cmpq	$0, 16(%r15)
	jne	.L4547
	movq	8(%r15), %r15
	jmp	.L4542
.L4547:
	movq	24(%r15), %rdi
	testq	%rdi, %rdi
	je	.L4548
	movq	%rdi, %r15
	jmp	.L4542
.L4548:
	movq	8(%r15), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L4542
.L4528:
	movq	56(%rsp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	56(%rsp), %rdx
	movq	%rax, 8(%rdx)
	movq	56(%rsp), %r14
	movq	16(%r14), %rdi
	call	protect_from_queue
	movq	56(%rsp), %rsi
	movq	%rax, 16(%rsi)
	jmp	.L4524
.L16089:
	jne	.L4525
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbx)
	jmp	.L4524
.L4521:
	movq	56(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L4529
	movq	8(%rcx), %r15
	jmp	.L4524
.L4529:
	movq	56(%rsp), %r11
	movq	24(%r11), %r13
	testq	%r13, %r13
	movq	%r13, %r15
	jne	.L4524
	movq	56(%rsp), %r9
	movq	8(%r9), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	56(%rsp), %r15
	movq	%rax, %rdi
	movq	8(%r15), %rsi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	56(%rsp), %rcx
	movq	%rax, %rdi
	movq	16(%rcx), %rsi
	call	emit_insn_before
	movq	56(%rsp), %rdi
	movq	24(%rdi), %r15
	jmp	.L4524
	.p2align 6,,7
.L16088:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	56(%rsp), %rdi
	movq	%rax, %rsi
	movzbl	2(%rdi), %edx
	movq	4584(%rsp), %rdi
	jmp	.L15078
.L4500:
	movq	56(%rsp), %r8
	movl	(%r8), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L16121
	movq	56(%rsp), %r9
	movq	4584(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movzbl	2(%r9), %edx
	movq	%r9, %rsi
	call	expand_expr
	movq	56(%rsp), %rdx
	movq	%rax, %r12
	cmpw	$51, (%rdx)
	je	.L16122
.L4518:
	movzwl	(%r12), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L4519
	cmpw	$46, %dx
	je	.L4519
	cmpw	$47, %dx
	je	.L4519
	cmpw	$49, %dx
	je	.L4519
	cmpw	$113, %dx
	jne	.L4465
	jmp	.L4519
.L16122:
	cmpl	$63, 8(%rdx)
	jle	.L4465
	jmp	.L4518
	.p2align 6,,7
.L16121:
	movq	4584(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	56(%rsp), %r15
	movq	%rax, %rsi
	movzbl	3(%r15), %edx
	movq	%r15, %r8
	shrb	$2, %dl
	andl	$1, %edx
.L15415:
	movq	8(%r8), %rdi
	jmp	.L15131
.L4509:
	movl	$1, %ebx
	jmp	.L4503
.L4501:
	xorl	%ebx, %ebx
	jmp	.L4503
.L4507:
	movq	56(%rsp), %rdx
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	movq	8(%rdx), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L4509
	movq	56(%rsp), %r13
	xorl	%eax, %eax
	movq	16(%r13), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L4503
	jmp	.L4509
	.p2align 6,,7
.L16087:
	movzbl	2(%rdx), %eax
	cmpb	$16, %al
	je	.L4493
	movl	cse_not_expected(%rip), %ebx
	movq	4584(%rsp), %rdi
	xorl	%esi, %esi
	testl	%ebx, %ebx
	cmove	%rdx, %rsi
	xorl	%ecx, %ecx
	movzbl	%al, %edx
	xorl	%eax, %eax
	call	expand_expr
	movq	%rax, %r12
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L4519
	testb	%al, %al
	je	.L4519
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L15334
	.p2align 6,,7
.L16086:
	movq	56(%rsp), %rbx
	cmpb	$16, 2(%rbx)
	jne	.L4466
	call	gen_label_rtx
	movq	%rax, %rbp
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r12
	testq	%rbx, %rbx
	jne	.L4470
.L13995:
	movq	56(%rsp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$59, %eax
	je	.L4472
	cmpl	$55, %eax
	je	.L16123
.L4476:
	cmpl	$63, %eax
	je	.L4479
	cmpl	$66, %eax
	je	.L4479
.L4475:
	movq	4584(%rsp), %r8
	xorl	%eax, %eax
	movq	%rbp, %rsi
	incl	inhibit_defer_pop(%rip)
	movq	32(%r8), %rdi
	call	jumpifnot
	movq	4584(%rsp), %rcx
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%r15, %rsi
	movq	40(%rcx), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L4485
.L13997:
	movq	%r12, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%rbp, %rdi
	call	emit_label
	xorl	%eax, %eax
	xorl	%edx, %edx
	movq	4584(%rsp), %rbp
	movq	%r15, %rsi
	movq	48(%rbp), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L4490
.L14221:
	movq	%r12, %rdi
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L6845
	.p2align 6,,7
.L4490:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r10
	movq	%rax, 16(%rbx)
	testq	%r10, %r10
	movq	%r10, pending_chain(%rip)
	movq	%r10, %rbx
	jne	.L4490
	jmp	.L14221
	.p2align 6,,7
.L4485:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r9
	movq	%rax, 16(%rbx)
	testq	%r9, %r9
	movq	%r9, pending_chain(%rip)
	movq	%r9, %rbx
	jne	.L4485
	jmp	.L13997
.L4479:
	movq	56(%rsp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L4475
.L16123:
	jne	.L4476
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	56(%rsp), %rsi
	movq	%rax, 8(%rsi)
	jmp	.L4475
.L4472:
	movq	56(%rsp), %rsi
	cmpq	$0, 16(%rsi)
	jne	.L4480
	movq	8(%rsi), %r15
	jmp	.L4475
.L4480:
	movq	56(%rsp), %rdx
	movq	24(%rdx), %rax
	testq	%rax, %rax
	movq	%rax, %r15
	jne	.L4475
	movq	56(%rsp), %rdi
	movq	8(%rdi), %r15
	movzbl	2(%r15), %edi
	call	gen_reg_rtx
	movq	56(%rsp), %r11
	movq	%rax, %rdi
	movq	8(%r11), %rsi
	movq	%rax, 24(%r11)
	call	gen_move_insn
	movq	56(%rsp), %r13
	movq	%rax, %rdi
	movq	16(%r13), %rsi
	call	emit_insn_before
	movq	24(%r13), %r15
	jmp	.L4475
	.p2align 6,,7
.L4470:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r10
	movq	%rax, 16(%rbx)
	testq	%r10, %r10
	movq	%r10, pending_chain(%rip)
	movq	%r10, %rbx
	jne	.L4470
	jmp	.L13995
	.p2align 6,,7
.L16085:
	movq	32(%rsi), %rdi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movq	const0_rtx(%rip), %rsi
	xorl	%eax, %eax
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L4462
.L13993:
	movq	4584(%rsp), %r9
	movq	40(%r9), %rdi
.L15350:
	movq	56(%rsp), %rsi
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	store_expr
	jmp	.L6845
.L4462:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rcx
	movq	%rax, 16(%rbx)
	testq	%rcx, %rcx
	movq	%rcx, pending_chain(%rip)
	movq	%rcx, %rbx
	jne	.L4462
	jmp	.L13993
	.p2align 6,,7
.L4457:
	movq	5424(%rsp), %rdi
	movq	56(%rsp), %rsi
	xorl	%eax, %eax
	xorl	%ebp, %ebp
	call	make_tree
	movq	5424(%rsp), %rsi
	movq	1944(%rsp), %rdx
	movzbl	16(%rdx), %edi
	movq	%rax, %rdx
	call	build1
	movq	56(%rsp), %r15
	movq	%rax, 4480(%rsp)
	movq	%rax, %rdx
	movzbl	16(%rax), %eax
	cmpb	$44, %al
	je	.L16124
	cmpb	$48, %al
	je	.L16125
.L4921:
	xorl	%r12d, %r12d
	testl	%r12d, %r12d
	je	.L4948
	movq	56(%rsp), %rdi
	cmpw	$55, (%rdi)
	je	.L16126
.L4948:
	movq	56(%rsp), %rbx
	movzwl	(%rbx), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L4956
	mov	%eax, %r11d
	jmp	*.L4965(,%r11,8)
	.section	.rodata
	.align 8
	.align 4
.L4965:
	.quad	.L4959
	.quad	.L4956
	.quad	.L4956
	.quad	.L4956
	.quad	.L4964
	.quad	.L4956
	.quad	.L4956
	.quad	.L4956
	.quad	.L4962
	.quad	.L4962
	.quad	.L4956
	.quad	.L4962
	.text
.L4959:
	movq	56(%rsp), %r10
	xorl	%eax, %eax
	movq	8(%r10), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L4958:
	testl	%ebx, %ebx
	je	.L4955
	movq	56(%rsp), %rbx
	movzbl	2(%rbx), %eax
	cmpb	$16, %al
	je	.L4967
	testb	%al, %al
	jne	.L16127
.L4967:
	movq	56(%rsp), %r9
	movq	4480(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	2(%r9), %edx
.L15083:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L15335:
	movq	%rax, %r12
.L4974:
	movl	$1, %ebp
.L4920:
	cmpq	56(%rsp), %r12
	je	.L6845
	movq	4480(%rsp), %rdi
	cmpb	$0, 16(%rdi)
	je	.L6845
	movq	56(%rsp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$59, %eax
	je	.L4976
	cmpl	$55, %eax
	je	.L16128
.L4980:
	cmpl	$63, %eax
	je	.L4983
	cmpl	$66, %eax
	je	.L4983
.L4979:
	movzbl	2(%r12), %eax
	movzbl	2(%r15), %ecx
	cmpb	%cl, %al
	je	.L4986
	testb	%al, %al
	je	.L4986
	movq	4480(%rsp), %rbx
	jmp	.L15416
.L4986:
	cmpb	$16, %al
	jne	.L7168
	movq	4480(%rsp), %rsi
	cmpb	$28, 16(%rsi)
	je	.L16129
	cmpb	$16, %al
	jne	.L7168
	movq	4480(%rsp), %rdi
	xorl	%eax, %eax
	call	expr_size
	movq	4480(%rsp), %rbx
	movq	%rax, %r13
	movq	8(%rbx), %r9
	movl	48(%r9), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r15)
	movl	%eax, 1724(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L5245
	cmpl	$55, %eax
	je	.L16130
.L5249:
	cmpl	$63, %eax
	je	.L5252
	cmpl	$66, %eax
	je	.L5252
.L5248:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L5255
	cmpl	$55, %eax
	je	.L16131
.L5259:
	cmpl	$63, %eax
	je	.L5262
	cmpl	$66, %eax
	je	.L5262
.L5258:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L5265
	cmpl	$55, %eax
	je	.L16132
.L5269:
	cmpl	$63, %eax
	je	.L5272
	cmpl	$66, %eax
	je	.L5272
.L5268:
	cmpw	$55, (%r15)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	testq	%r13, %r13
	je	.L15283
	cmpw	$46, (%r13)
	je	.L16133
.L5278:
	movl	1724(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 4408(%rsp)
	testl	%ebp, %ebp
	je	.L14257
.L5364:
	movslq	%ebp,%rax
	movq	%rax, 4400(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L5352
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L5356
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L5352
.L5356:
	movslq	%edx,%rsi
	leaq	(%rsi,%rsi,4), %r14
	movq	%rsi, 4392(%rsp)
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16134
.L5357:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16135
.L5358:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L5359
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	4408(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L5352
.L5359:
	call	get_last_insn
	movl	$1, %edx
	movq	%r13, %rsi
	movq	%rax, 4384(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16136
.L5360:
	movq	4392(%rsp), %r14
	movq	%r15, %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	4408(%rsp), %rcx
	call	*insn_gen_function(,%r14,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14954
	movq	4384(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L5352:
	movq	4400(%rsp), %rdx
	movl	mode_wider_mode(,%rdx,4), %ebp
	testl	%ebp, %ebp
	jne	.L5364
	jmp	.L14257
.L16136:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L5360
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L5360
.L16135:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L5352
	jmp	.L5358
.L16134:
	xorl	%eax, %eax
	movq	%r15, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L5352
	jmp	.L5357
.L16133:
	movl	8(%r13), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1724(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1724(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L5292:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14070
.L5288:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L5288
.L14070:
	testl	%ecx, %ecx
	je	.L5281
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L5290
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L5290
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L5290:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L5292
.L5281:
	decl	%r9d
	jg	.L5278
	movq	8(%r15), %rbx
	movq	8(%r12), %rdi
	xorl	%ecx, %ecx
	movq	%r12, 7016(%rsp)
	movl	$0, 7044(%rsp)
	movq	%r15, 6992(%rsp)
	movl	%r10d, %r13d
	movl	$9, %r14d
	movq	%rbx, 7000(%rsp)
	movq	%rdi, 7024(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L5295
	cmpw	$88, %dx
	je	.L5295
	cmpw	$87, %dx
	je	.L5295
.L5294:
	movl	%ecx, 7008(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L5297
	cmpw	$88, %dx
	je	.L5297
	cmpw	$87, %dx
	je	.L5297
.L5296:
	movl	%ecx, 7032(%rsp)
	movl	$0, 7036(%rsp)
	movl	$0, 7012(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L5299
	cmpw	$87, %ax
	je	.L5299
.L5298:
	testl	%edx, %edx
	movl	%edx, 7048(%rsp)
	je	.L5300
	movl	%r10d, 7044(%rsp)
.L5300:
	movl	%r10d, 7040(%rsp)
	movl	7032(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L5302
	movl	7008(%rsp), %eax
	testl	%eax, %eax
	jne	.L5301
.L5302:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1724(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1724(%rsp), %ebp
.L5316:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14073
.L5312:
	movslq	%edx,%r15
	salq	$2, %r15
	cmpl	%r8d, mode_size(%r15)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r15), %edx
	testl	%edx, %edx
	jne	.L5312
.L14073:
	testl	%ecx, %ecx
	je	.L5305
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L5314
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L5314
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L5314:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L5316
.L5305:
	cmpl	$2, %r9d
	jle	.L5301
	testl	%r10d, %r10d
	jne	.L5318
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L5319
	cmpw	$46, %dx
	je	.L5319
	cmpw	$47, %dx
	je	.L5319
	cmpw	$49, %dx
	je	.L5319
	cmpw	$113, %dx
	je	.L5319
.L5318:
	movl	7008(%rsp), %eax
	testl	%eax, %eax
	jne	.L5301
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L5321
	cmpw	$46, %dx
	je	.L5321
	cmpw	$47, %dx
	je	.L5321
	cmpw	$49, %dx
	je	.L5321
	cmpw	$113, %dx
	je	.L5321
.L5301:
	cmpl	$8, 1724(%rsp)
	movl	$8, %eax
	cmovl	1724(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 1724(%rsp)
	jle	.L5324
.L5346:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14076
.L5331:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r14d, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L5331
.L14076:
	testl	%r12d, %r12d
	je	.L5324
	movslq	%r12d,%r13
	movq	%r13, %rcx
	salq	$4, %rcx
	addq	mov_optab(%rip), %rcx
	movl	8(%rcx), %edx
	cmpl	$210, %edx
	je	.L5333
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1724(%rsp)
	jl	.L5333
	cmpl	%ebp, 7040(%rsp)
	movslq	%edx,%r11
	leaq	6992(%rsp), %rbx
	movq	insn_gen_function(,%r11,8), %r15
	jl	.L5333
	movl	7048(%rsp), %edx
.L5344:
	testl	%edx, %edx
	je	.L5338
	subl	%ebp, 52(%rbx)
.L5338:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L5339
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15087:
	movq	%rax, %r14
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L5341
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L5342:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*%r15
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L5343
	addl	%ebp, 52(%rbx)
.L5343:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L5344
.L5333:
	movl	mode_size(,%r13,4), %r14d
	cmpl	$1, %r14d
	jg	.L5346
.L5324:
	movl	7040(%rsp), %eax
	testl	%eax, %eax
	jmp	.L15389
.L5341:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L5342
.L5339:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15087
.L5321:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7000(%rsp)
	jmp	.L5301
.L5319:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7024(%rsp)
	jmp	.L5318
.L5299:
	movl	$1, %edx
	jmp	.L5298
.L5297:
	movl	$1, %ecx
	jmp	.L5296
.L5295:
	movl	$1, %ecx
	jmp	.L5294
.L5272:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L5268
.L16132:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L5266
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L16137
.L5266:
	cmpl	$55, %eax
	jne	.L5269
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L5268
.L16137:
	movq	8(%rbp), %r11
	movq	%r11, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L5268
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L5268
.L5265:
	cmpq	$0, 16(%r13)
	jne	.L5273
	movq	8(%r13), %r13
	jmp	.L5268
.L5273:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L5274
	movq	%rsi, %r13
	jmp	.L5268
.L5274:
	movq	8(%r13), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L5268
.L5262:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L5258
.L16131:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L5256
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16138
.L5256:
	cmpl	$55, %eax
	jne	.L5259
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L5258
.L16138:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L5258
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L5258
.L5255:
	cmpq	$0, 16(%r12)
	jne	.L5263
	movq	8(%r12), %r12
	jmp	.L5258
.L5263:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L5264
	movq	%rsi, %r12
	jmp	.L5258
.L5264:
	movq	8(%r12), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L5258
.L5252:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L5248
.L16130:
	jne	.L5249
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L5248
.L5245:
	cmpq	$0, 16(%r15)
	jne	.L5253
	movq	8(%r15), %r15
	jmp	.L5248
.L5253:
	movq	24(%r15), %rdi
	testq	%rdi, %rdi
	je	.L5254
	movq	%rdi, %r15
	jmp	.L5248
.L5254:
	movq	8(%r15), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L5248
.L16129:
	xorl	%eax, %eax
	movq	%rsi, %rdi
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, 1776(%rsp)
	je	.L16139
.L4991:
	movl	$8, %edi
	call	size_int
	movl	$57, %edi
	movq	4480(%rsp), %r9
	movq	%rax, %rdx
	movq	8(%r9), %r10
	movq	32(%r10), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	4480(%rsp), %r11
	movq	%rax, %r14
	movl	32(%r11), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%r14, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movq	4480(%rsp), %r13
	movq	$0, 1728(%rsp)
	movq	%rax, 1752(%rsp)
	movq	%rax, %r14
	movq	8(%r13), %rbp
	movl	48(%rbp), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r15)
	movl	%eax, 1748(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r15, 1760(%rsp)
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L5117
	cmpl	$55, %eax
	je	.L16140
	cmpl	$63, %eax
	je	.L5124
	cmpl	$66, %eax
	je	.L5124
.L5120:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L5127
	cmpl	$55, %eax
	je	.L16141
.L5131:
	cmpl	$63, %eax
	je	.L5134
	cmpl	$66, %eax
	je	.L5134
.L5130:
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L5137
	cmpl	$55, %eax
	je	.L16142
.L5141:
	cmpl	$63, %eax
	je	.L5144
	cmpl	$66, %eax
	je	.L5144
.L5140:
	movq	1760(%rsp), %rbx
	cmpw	$55, (%rbx)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 1752(%rsp)
	je	.L15283
	movq	1752(%rsp), %rax
	cmpw	$46, (%rax)
	je	.L16143
.L5150:
	movl	1748(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 4440(%rsp)
	testl	%ebp, %ebp
	je	.L14067
.L5236:
	movslq	%ebp,%r11
	movq	%r11, %rax
	movq	%r11, 4432(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L5224
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L5228
	movq	1752(%rsp), %r13
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L5224
.L5228:
	movslq	%edx,%rsi
	leaq	(%rsi,%rsi,4), %r13
	movq	%rsi, 4424(%rsp)
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16144
.L5229:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16145
.L5230:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L5231
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	4440(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L5224
.L5231:
	call	get_last_insn
	movl	$1, %edx
	movq	1752(%rsp), %rsi
	movq	%rax, 4416(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16146
.L5232:
	movq	4424(%rsp), %rbp
	movq	1760(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	4440(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14939
	movq	4416(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L5224:
	movq	4432(%rsp), %rdx
	movl	mode_wider_mode(,%rdx,4), %ebp
	testl	%ebp, %ebp
	jne	.L5236
.L14067:
	movq	1752(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%r12), %r10
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	movq	1760(%rsp), %rax
	xorl	%edx, %edx
	movq	%r10, (%rsp)
	movq	8(%rax), %r8
	xorl	%eax, %eax
	call	emit_library_call
.L5234:
	cmpw	$46, (%r14)
	je	.L16147
	movq	8(%r15), %rsi
	movl	$4, %edi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movl	$4, %edi
	movq	%r14, %rcx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	1776(%rsp), %rdx
	movl	$4, %edi
	movq	%r14, %rcx
	movq	%rax, %rbp
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 1728(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L5238:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L5239
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%rbp, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L5239:
	cmpq	$0, 1728(%rsp)
	je	.L6845
	movq	1728(%rsp), %rdi
	jmp	.L15348
.L16147:
	movq	4480(%rsp), %r14
	movq	8(%r15), %rdi
	movl	32(%r14), %esi
	call	plus_constant_wide
	movq	1776(%rsp), %rdi
	movq	4480(%rsp), %r15
	movq	%rax, %rbp
	movl	32(%r15), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L5238
.L14939:
	call	emit_insn
	jmp	.L5234
.L16146:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L5232
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L5232
.L16145:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L5224
	jmp	.L5230
.L16144:
	xorl	%eax, %eax
	movq	1760(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L5224
	jmp	.L5229
.L16143:
	movl	8(%rax), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1748(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1748(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L5164:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14058
.L5160:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L5160
.L14058:
	testl	%ecx, %ecx
	je	.L5153
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L5162
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L5162
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L5162:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L5164
.L5153:
	decl	%r9d
	jg	.L5150
	movq	1760(%rsp), %rcx
	movq	8(%r12), %rdi
	movl	%r10d, %r13d
	movq	8(%rcx), %rbx
	movq	%r12, 7016(%rsp)
	movq	%rcx, 6992(%rsp)
	movl	$0, 7044(%rsp)
	movq	%rdi, 7024(%rsp)
	xorl	%ecx, %ecx
	movl	$9, 1744(%rsp)
	movq	%rbx, 7000(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L5167
	cmpw	$88, %dx
	je	.L5167
	cmpw	$87, %dx
	je	.L5167
.L5166:
	movl	%ecx, 7008(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L5169
	cmpw	$88, %dx
	je	.L5169
	cmpw	$87, %dx
	je	.L5169
.L5168:
	movl	%ecx, 7032(%rsp)
	movl	$0, 7036(%rsp)
	movl	$0, 7012(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L5171
	cmpw	$87, %ax
	je	.L5171
.L5170:
	testl	%edx, %edx
	movl	%edx, 7048(%rsp)
	je	.L5172
	movl	%r10d, 7044(%rsp)
.L5172:
	movl	%r10d, 7040(%rsp)
	movl	7032(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L5174
	movl	7008(%rsp), %r11d
	testl	%r11d, %r11d
	jne	.L5173
.L5174:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1748(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1748(%rsp), %ebp
.L5188:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14061
.L5184:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L5184
.L14061:
	testl	%ecx, %ecx
	je	.L5177
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L5186
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L5186
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L5186:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L5188
.L5177:
	cmpl	$2, %r9d
	jle	.L5173
	testl	%r10d, %r10d
	jne	.L5190
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L5191
	cmpw	$46, %dx
	je	.L5191
	cmpw	$47, %dx
	je	.L5191
	cmpw	$49, %dx
	je	.L5191
	cmpw	$113, %dx
	je	.L5191
.L5190:
	movl	7008(%rsp), %eax
	testl	%eax, %eax
	jne	.L5173
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L5193
	cmpw	$46, %dx
	je	.L5193
	cmpw	$47, %dx
	je	.L5193
	cmpw	$49, %dx
	je	.L5193
	cmpw	$113, %dx
	je	.L5193
.L5173:
	cmpl	$8, 1748(%rsp)
	movl	$8, %eax
	cmovl	1748(%rsp), %eax
	cmpl	$1, 1744(%rsp)
	movl	%eax, 1748(%rsp)
	jle	.L5196
.L5218:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14064
.L5203:
	movslq	%edx,%r10
	movl	1744(%rsp), %r9d
	salq	$2, %r10
	cmpl	%r9d, mode_size(%r10)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%r10), %edx
	testl	%edx, %edx
	jne	.L5203
.L14064:
	testl	%r12d, %r12d
	je	.L5196
	movslq	%r12d,%r13
	movq	%r13, %rbx
	salq	$4, %rbx
	addq	mov_optab(%rip), %rbx
	movl	8(%rbx), %edx
	cmpl	$210, %edx
	je	.L5205
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1748(%rsp)
	jl	.L5205
	movslq	%edx,%rcx
	cmpl	%ebp, 7040(%rsp)
	leaq	6992(%rsp), %rbx
	movq	insn_gen_function(,%rcx,8), %rdi
	movq	%rdi, 4448(%rsp)
	jl	.L5205
	movl	7048(%rsp), %edx
.L5216:
	testl	%edx, %edx
	je	.L5210
	subl	%ebp, 52(%rbx)
.L5210:
	movl	16(%rbx), %r8d
	testl	%r8d, %r8d
	je	.L5211
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15086:
	movq	%rax, 1736(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L5213
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L5214:
	movq	%rax, %rsi
	movq	1736(%rsp), %rdi
	xorl	%eax, %eax
	call	*4448(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L5215
	addl	%ebp, 52(%rbx)
.L5215:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L5216
.L5205:
	movl	mode_size(,%r13,4), %r12d
	movl	%r12d, 1744(%rsp)
	decl	%r12d
	jg	.L5218
.L5196:
	movl	7040(%rsp), %eax
	testl	%eax, %eax
	je	.L5234
	jmp	.L15283
.L5213:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L5214
.L5211:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15086
.L5193:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7000(%rsp)
	jmp	.L5173
.L5191:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7024(%rsp)
	jmp	.L5190
.L5171:
	movl	$1, %edx
	jmp	.L5170
.L5169:
	movl	$1, %ecx
	jmp	.L5168
.L5167:
	movl	$1, %ecx
	jmp	.L5166
.L5144:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L5140
.L16142:
	movzbl	2(%r14), %edx
	cmpb	$16, %dl
	je	.L5138
	movq	8(%r14), %rbp
	cmpw	$59, (%rbp)
	je	.L16148
.L5138:
	cmpl	$55, %eax
	jne	.L5141
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L5140
.L16148:
	movq	8(%rbp), %r11
	movq	%r11, 8(%r14)
	cmpq	$0, 16(%rbp)
	je	.L5140
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r13, 1752(%rsp)
	jmp	.L5140
.L5137:
	cmpq	$0, 16(%r14)
	jne	.L5145
	movq	8(%r14), %rax
	movq	%rax, 1752(%rsp)
	jmp	.L5140
.L5145:
	movq	24(%r14), %rbp
	testq	%rbp, %rbp
	movq	%rbp, 1752(%rsp)
	jne	.L5140
	movq	8(%r14), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r10
	movq	%r10, 1752(%rsp)
	jmp	.L5140
.L5134:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L5130
.L16141:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L5128
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16149
.L5128:
	cmpl	$55, %eax
	jne	.L5131
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L5130
.L16149:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L5130
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	%r13, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L5130
.L5127:
	cmpq	$0, 16(%r12)
	jne	.L5135
	movq	8(%r12), %r12
	jmp	.L5130
.L5135:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L5136
	movq	%rsi, %r12
	jmp	.L5130
.L5136:
	movq	8(%r12), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L5130
.L5124:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L5120
.L16140:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L5120
.L5117:
	cmpq	$0, 16(%r15)
	jne	.L5125
	movq	8(%r15), %rbx
	movq	%rbx, 1760(%rsp)
	jmp	.L5120
.L5125:
	movq	24(%r15), %rcx
	testq	%rcx, %rcx
	movq	%rcx, 1760(%rsp)
	jne	.L5120
	movq	8(%r15), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %rsi
	movq	%rsi, 1760(%rsp)
	jmp	.L5120
.L16139:
	movq	4480(%rsp), %rdi
	movq	1776(%rsp), %rbp
	movl	32(%rdi), %eax
	cmpl	%eax, 8(%rbp)
	jge	.L4991
	movq	8(%rdi), %r13
	movl	48(%r13), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r15)
	movl	%eax, 1772(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L4994
	cmpl	$55, %eax
	je	.L16150
.L4998:
	cmpl	$63, %eax
	je	.L5001
	cmpl	$66, %eax
	je	.L5001
.L4997:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L5004
	cmpl	$55, %eax
	je	.L16151
.L5008:
	cmpl	$63, %eax
	je	.L5011
	cmpl	$66, %eax
	je	.L5011
.L5007:
	movq	1776(%rsp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$59, %eax
	je	.L5014
	cmpl	$55, %eax
	je	.L16152
.L5018:
	cmpl	$63, %eax
	je	.L5021
	cmpl	$66, %eax
	je	.L5021
.L5017:
	cmpw	$55, (%r15)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 1776(%rsp)
	je	.L15283
	movq	1776(%rsp), %rbx
	cmpw	$46, (%rbx)
	je	.L16153
.L5027:
	movl	1772(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 4472(%rsp)
	testl	%ebp, %ebp
	je	.L14055
.L5113:
	movslq	%ebp,%rax
	movq	%rax, 4464(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L5101
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L5105
	movq	1776(%rsp), %r14
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r14)
	ja	.L5101
.L5105:
	movslq	%edx,%r14
	leaq	(%r14,%r14,4), %r13
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16154
.L5106:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16155
.L5107:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L5108
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	4472(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L5101
.L5108:
	call	get_last_insn
	movl	$1, %edx
	movq	1776(%rsp), %rsi
	movq	%rax, 4456(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16156
.L5109:
	movq	%r15, %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	4472(%rsp), %rcx
	call	*insn_gen_function(,%r14,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14954
	movq	4456(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L5101:
	movq	4464(%rsp), %r8
	movl	mode_wider_mode(,%r8,4), %ebp
	testl	%ebp, %ebp
	jne	.L5113
.L14055:
	movq	1776(%rsp), %rsi
	movl	$4, %edi
	jmp	.L15129
.L16156:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L5109
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L5109
.L16155:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L5101
	jmp	.L5107
.L16154:
	xorl	%eax, %eax
	movq	%r15, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L5101
	jmp	.L5106
.L16153:
	movl	8(%rbx), %r10d
	xorl	%r9d, %r9d
	movl	$9, %r8d
	cmpl	$8, 1772(%rsp)
	movl	$8, %ebx
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1772(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L5041:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14046
.L5037:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L5037
.L14046:
	testl	%ecx, %ecx
	je	.L5030
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L5039
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L5039
	movl	%edi, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %edi
.L5039:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L5041
.L5030:
	decl	%r9d
	jg	.L5027
	movq	8(%r15), %rbx
	movq	8(%r12), %rdi
	xorl	%ecx, %ecx
	movq	%r12, 7080(%rsp)
	movl	$0, 7108(%rsp)
	movq	%r15, 7056(%rsp)
	movl	%r10d, %r13d
	movl	$9, %r14d
	movq	%rbx, 7064(%rsp)
	movq	%rdi, 7088(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L5044
	cmpw	$88, %dx
	je	.L5044
	cmpw	$87, %dx
	je	.L5044
.L5043:
	movl	%ecx, 7072(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L5046
	cmpw	$88, %dx
	je	.L5046
	cmpw	$87, %dx
	je	.L5046
.L5045:
	movl	%ecx, 7096(%rsp)
	movl	$0, 7100(%rsp)
	movl	$0, 7076(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L5048
	cmpw	$87, %ax
	je	.L5048
.L5047:
	testl	%edx, %edx
	movl	%edx, 7112(%rsp)
	je	.L5049
	movl	%r10d, 7108(%rsp)
.L5049:
	movl	%r10d, 7104(%rsp)
	movl	7096(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L5051
	movl	7072(%rsp), %ebp
	testl	%ebp, %ebp
	jne	.L5050
.L5051:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1772(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1772(%rsp), %ebp
.L5065:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14049
.L5061:
	movslq	%edx,%r15
	salq	$2, %r15
	cmpl	%r8d, mode_size(%r15)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r15), %edx
	testl	%edx, %edx
	jne	.L5061
.L14049:
	testl	%ecx, %ecx
	je	.L5054
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L5063
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L5063
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L5063:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L5065
.L5054:
	cmpl	$2, %r9d
	jle	.L5050
	testl	%r10d, %r10d
	jne	.L5067
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L5068
	cmpw	$46, %dx
	je	.L5068
	cmpw	$47, %dx
	je	.L5068
	cmpw	$49, %dx
	je	.L5068
	cmpw	$113, %dx
	je	.L5068
.L5067:
	movl	7072(%rsp), %r10d
	testl	%r10d, %r10d
	jne	.L5050
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L5070
	cmpw	$46, %dx
	je	.L5070
	cmpw	$47, %dx
	je	.L5070
	cmpw	$49, %dx
	je	.L5070
	cmpw	$113, %dx
	je	.L5070
.L5050:
	cmpl	$8, 1772(%rsp)
	movl	$8, %eax
	cmovl	1772(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 1772(%rsp)
	jle	.L5073
.L5095:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14052
.L5080:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r14d, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L5080
.L14052:
	testl	%r12d, %r12d
	je	.L5073
	movslq	%r12d,%r13
	movq	%r13, %rcx
	salq	$4, %rcx
	addq	mov_optab(%rip), %rcx
	movl	8(%rcx), %edx
	cmpl	$210, %edx
	je	.L5082
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1772(%rsp)
	jl	.L5082
	cmpl	%ebp, 7104(%rsp)
	movslq	%edx,%rsi
	leaq	7056(%rsp), %rbx
	movq	insn_gen_function(,%rsi,8), %r15
	jl	.L5082
	movl	7112(%rsp), %edx
.L5093:
	testl	%edx, %edx
	je	.L5087
	subl	%ebp, 52(%rbx)
.L5087:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L5088
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15085:
	movl	40(%rbx), %edi
	movq	%rax, %r14
	testl	%edi, %edi
	je	.L5090
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L5091:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*%r15
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L5092
	addl	%ebp, 52(%rbx)
.L5092:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L5093
.L5082:
	movl	mode_size(,%r13,4), %r14d
	cmpl	$1, %r14d
	jg	.L5095
.L5073:
	movl	7104(%rsp), %edx
	testl	%edx, %edx
	jmp	.L15389
.L5090:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L5091
.L5088:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15085
.L5070:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7064(%rsp)
	jmp	.L5050
.L5068:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7088(%rsp)
	jmp	.L5067
.L5048:
	movl	$1, %edx
	jmp	.L5047
.L5046:
	movl	$1, %ecx
	jmp	.L5045
.L5044:
	movl	$1, %ecx
	jmp	.L5043
.L5021:
	movq	1776(%rsp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	1776(%rsp), %r9
	movq	%rax, 8(%r9)
	movq	1776(%rsp), %r10
	movq	16(%r10), %rdi
	call	protect_from_queue
	movq	1776(%rsp), %r11
	movq	%rax, 16(%r11)
	jmp	.L5017
.L16152:
	movq	%rdx, %rcx
	movzbl	2(%rdx), %edx
	cmpb	$16, %dl
	je	.L5015
	movq	8(%rcx), %rbp
	cmpw	$59, (%rbp)
	je	.L16157
.L5015:
	cmpl	$55, %eax
	jne	.L5018
	movq	1776(%rsp), %rbp
	xorl	%esi, %esi
	movq	8(%rbp), %rdi
	call	protect_from_queue
	movq	%rax, 8(%rbp)
	jmp	.L5017
.L16157:
	movq	8(%rbp), %rbx
	movq	%rbx, 8(%rcx)
	cmpq	$0, 16(%rbp)
	je	.L5017
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	1776(%rsp), %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L15084:
	movq	%rbx, 1776(%rsp)
	jmp	.L5017
.L5014:
	movq	1776(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L5022
	movq	8(%rcx), %rbx
	jmp	.L15084
.L5022:
	movq	1776(%rsp), %rdx
	movq	24(%rdx), %rsi
	testq	%rsi, %rsi
	je	.L5023
	movq	%rsi, 1776(%rsp)
	jmp	.L5017
.L5023:
	movq	1776(%rsp), %rdi
	movq	8(%rdi), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	1776(%rsp), %rcx
	movq	%rax, %rdi
	movq	8(%rcx), %rsi
	movq	%rax, 24(%rcx)
	call	gen_move_insn
	movq	1776(%rsp), %r14
	movq	%rax, %rdi
	movq	16(%r14), %rsi
	call	emit_insn_before
	movq	1776(%rsp), %r13
	movq	24(%r13), %r8
	movq	%r8, 1776(%rsp)
	jmp	.L5017
.L5011:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L5007
.L16151:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L5005
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16158
.L5005:
	cmpl	$55, %eax
	jne	.L5008
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L5007
.L16158:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L5007
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L5007
.L5004:
	cmpq	$0, 16(%r12)
	jne	.L5012
	movq	8(%r12), %r12
	jmp	.L5007
.L5012:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L5013
	movq	%rsi, %r12
	jmp	.L5007
.L5013:
	movq	8(%r12), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L5007
.L5001:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L4997
.L16150:
	jne	.L4998
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L4997
.L4994:
	cmpq	$0, 16(%r15)
	jne	.L5002
	movq	8(%r15), %r15
	jmp	.L4997
.L5002:
	movq	24(%r15), %rdi
	testq	%rdi, %rdi
	je	.L5003
	movq	%rdi, %r15
	jmp	.L4997
.L5003:
	movq	8(%r15), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L4997
	.p2align 6,,7
.L4983:
	movq	56(%rsp), %r11
	xorl	%esi, %esi
	movq	8(%r11), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	56(%rsp), %rbx
	movq	%rax, 8(%rbx)
	movq	56(%rsp), %rcx
	movq	16(%rcx), %rdi
	call	protect_from_queue
	movq	56(%rsp), %rsi
	movq	%rax, 16(%rsi)
	jmp	.L4979
.L16128:
	jne	.L4980
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbx)
	jmp	.L4979
	.p2align 6,,7
.L4976:
	movq	56(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L4984
	movq	8(%rcx), %r15
	jmp	.L4979
.L4984:
	movq	56(%rsp), %r15
	movq	24(%r15), %r10
	testq	%r10, %r10
	movq	%r10, %r15
	jne	.L4979
	movq	56(%rsp), %r8
	movq	8(%r8), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	%rax, %rdi
	movq	56(%rsp), %rax
	movq	8(%rax), %rsi
	movq	%rdi, 24(%rax)
	call	gen_move_insn
	movq	56(%rsp), %r9
	movq	%rax, %rdi
	movq	16(%r9), %rsi
	call	emit_insn_before
	movq	56(%rsp), %r14
	movq	24(%r14), %r15
	jmp	.L4979
	.p2align 6,,7
.L16127:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	4480(%rsp), %rdi
	movzbl	2(%rbx), %edx
	movq	%rax, %rsi
	jmp	.L15083
.L4955:
	movq	56(%rsp), %rdx
	movl	(%rdx), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L16159
	movq	56(%rsp), %r8
	movq	4480(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movzbl	2(%r8), %edx
	movq	%r8, %rsi
	call	expand_expr
	movq	56(%rsp), %rdx
	movq	%rax, %r12
	cmpw	$51, (%rdx)
	je	.L16160
.L4973:
	movzwl	(%r12), %edx
	leal	-56(%rdx), %r13d
	cmpw	$1, %r13w
	jbe	.L4974
	cmpw	$46, %dx
	je	.L4974
	cmpw	$47, %dx
	je	.L4974
	cmpw	$49, %dx
	je	.L4974
	cmpw	$113, %dx
	jne	.L4920
	jmp	.L4974
	.p2align 6,,7
.L16160:
	cmpl	$63, 8(%rdx)
	jle	.L4920
	jmp	.L4973
.L16159:
	movq	4480(%rsp), %rdi
.L15414:
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	56(%rsp), %r8
	movq	%rax, %rsi
	movzbl	3(%r8), %edx
	shrb	$2, %dl
	andl	$1, %edx
	jmp	.L15415
.L4964:
	movl	$1, %ebx
	jmp	.L4958
.L4956:
	xorl	%ebx, %ebx
	jmp	.L4958
.L4962:
	movq	56(%rsp), %r14
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	movq	8(%r14), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L4964
	movq	56(%rsp), %rax
	movq	16(%rax), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L4958
	jmp	.L4964
	.p2align 6,,7
.L16126:
	movzbl	2(%rdi), %eax
	cmpb	$16, %al
	je	.L4948
	movl	cse_not_expected(%rip), %ecx
	xorl	%esi, %esi
	movzbl	%al, %edx
	testl	%ecx, %ecx
	cmove	%rdi, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	movq	4480(%rsp), %rdi
	call	expand_expr
	movq	%rax, %r12
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L4974
	testb	%al, %al
	je	.L4974
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L15335
	.p2align 6,,7
.L16125:
	movq	56(%rsp), %r9
	cmpb	$16, 2(%r9)
	jne	.L4921
	call	gen_label_rtx
	movq	%rax, %rbp
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r12
	testq	%rbx, %rbx
	jne	.L4925
.L14039:
	movq	56(%rsp), %rsi
	movzwl	(%rsi), %eax
	cmpl	$59, %eax
	je	.L4927
	cmpl	$55, %eax
	je	.L16161
.L4931:
	cmpl	$63, %eax
	je	.L4934
	cmpl	$66, %eax
	je	.L4934
.L4930:
	movq	4480(%rsp), %r13
	xorl	%eax, %eax
	movq	%rbp, %rsi
	incl	inhibit_defer_pop(%rip)
	movq	32(%r13), %rdi
	call	jumpifnot
	movq	4480(%rsp), %r8
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%r15, %rsi
	movq	40(%r8), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L4940
.L14041:
	movq	%r12, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%rbp, %rdi
	call	emit_label
	xorl	%eax, %eax
	xorl	%edx, %edx
	movq	4480(%rsp), %rbp
	movq	%r15, %rsi
	movq	48(%rbp), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	je	.L14221
.L4945:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rsi
	movq	%rax, 16(%rbx)
	testq	%rsi, %rsi
	movq	%rsi, pending_chain(%rip)
	movq	%rsi, %rbx
	jne	.L4945
	jmp	.L14221
	.p2align 6,,7
.L4940:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdi
	movq	%rax, 16(%rbx)
	testq	%rdi, %rdi
	movq	%rdi, pending_chain(%rip)
	movq	%rdi, %rbx
	jne	.L4940
	jmp	.L14041
.L4934:
	movq	56(%rsp), %rbx
	xorl	%esi, %esi
	movq	8(%rbx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	56(%rsp), %rcx
	movq	16(%rcx), %rdi
	movq	%rax, 8(%rcx)
	call	protect_from_queue
	movq	56(%rsp), %rsi
	movq	%rax, 16(%rsi)
	jmp	.L4930
.L16161:
	jne	.L4931
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	56(%rsp), %r13
	movq	%rax, 8(%r13)
	jmp	.L4930
.L4927:
	movq	56(%rsp), %rbx
	cmpq	$0, 16(%rbx)
	jne	.L4935
	movq	8(%rbx), %r15
	jmp	.L4930
.L4935:
	movq	56(%rsp), %r15
	movq	24(%r15), %r11
	testq	%r11, %r11
	movq	%r11, %r15
	jne	.L4930
	movq	56(%rsp), %r9
	movq	8(%r9), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	%rax, %rdi
	movq	56(%rsp), %rax
	movq	8(%rax), %rsi
	movq	%rdi, 24(%rax)
	call	gen_move_insn
	movq	56(%rsp), %r14
	movq	%rax, %rdi
	movq	16(%r14), %rsi
	call	emit_insn_before
	movq	56(%rsp), %r10
	movq	24(%r10), %r15
	jmp	.L4930
	.p2align 6,,7
.L4925:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r8
	movq	%rax, 16(%rbx)
	testq	%r8, %r8
	movq	%r8, pending_chain(%rip)
	movq	%r8, %rbx
	jne	.L4925
	jmp	.L14039
	.p2align 6,,7
.L16124:
	movq	32(%rdx), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L4917
.L14037:
	movq	4480(%rsp), %rcx
.L15349:
	movq	40(%rcx), %rdi
	jmp	.L15350
.L4917:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r12
	movq	%rax, 16(%rbx)
	testq	%r12, %r12
	movq	%r12, pending_chain(%rip)
	movq	%r12, %rbx
	jne	.L4917
	jmp	.L14037
.L16083:
	movq	32(%r15), %rdi
	movq	1920(%rsp), %rsi
	xorl	%eax, %eax
	call	jumpif
	jmp	.L4450
.L16082:
	movl	$.LC1, %edi
	xorl	%eax, %eax
	call	sorry
	movq	$0, cleanups_this_call(%rip)
	jmp	.L4448
.L4063:
	movq	1856(%rsp), %rdi
	movq	%r12, %rsi
.L15077:
	xorl	%eax, %eax
	call	convert_move
	jmp	.L4443
.L4062:
	cmpb	$16, %al
	je	.L16162
.L4318:
	movq	1856(%rsp), %rdi
	movq	%r12, %rsi
	jmp	.L15076
.L16162:
	movq	1928(%rsp), %rdi
	cmpb	$28, 16(%rdi)
	je	.L16163
	cmpb	$16, %al
	jne	.L4318
	movq	1928(%rsp), %rdi
	xorl	%eax, %eax
	call	expr_size
	movq	1856(%rsp), %r9
	movq	1928(%rsp), %r10
	movq	%rax, %r13
	movq	8(%r10), %r8
	movl	48(%r8), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r9)
	movl	%eax, 1852(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	1856(%rsp), %rsi
	movzwl	(%rsi), %eax
	cmpl	$59, %eax
	je	.L4321
	cmpl	$55, %eax
	je	.L16164
.L4325:
	cmpl	$63, %eax
	je	.L4328
	cmpl	$66, %eax
	je	.L4328
.L4324:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L4331
	cmpl	$55, %eax
	je	.L16165
.L4335:
	cmpl	$63, %eax
	je	.L4338
	cmpl	$66, %eax
	je	.L4338
.L4334:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L4341
	cmpl	$55, %eax
	je	.L16166
.L4345:
	cmpl	$63, %eax
	je	.L4348
	cmpl	$66, %eax
	je	.L4348
.L4344:
	movq	1856(%rsp), %rsi
	cmpw	$55, (%rsi)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	testq	%r13, %r13
	je	.L15283
	cmpw	$46, (%r13)
	je	.L16167
.L4354:
	movl	1852(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 4616(%rsp)
	testl	%ebp, %ebp
	je	.L13991
.L4440:
	movslq	%ebp,%rax
	movq	%rax, 4608(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L4428
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L4432
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L4428
.L4432:
	movslq	%edx,%rax
	leaq	(%rax,%rax,4), %r14
	movq	%rax, 4600(%rsp)
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16168
.L4433:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16169
.L4434:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L4435
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	4616(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L4428
.L4435:
	call	get_last_insn
	movl	$1, %edx
	movq	%r13, %rsi
	movq	%rax, 4592(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16170
.L4436:
	movq	4600(%rsp), %rbp
	movq	1856(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	4616(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14934
	movq	4592(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L4428:
	movq	4608(%rsp), %rdx
	movl	mode_wider_mode(,%rdx,4), %ebp
	testl	%ebp, %ebp
	jne	.L4440
.L13991:
	movl	$4, %edi
	movq	%r13, %rsi
.L15075:
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movq	1856(%rsp), %r12
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%eax, %eax
	movq	%rdi, (%rsp)
	movq	memcpy_libfunc(%rip), %rdi
	movq	8(%r12), %r8
	call	emit_library_call
	jmp	.L4443
.L14934:
	call	emit_insn
	jmp	.L4443
.L16170:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L4436
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L4436
.L16169:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L4428
	jmp	.L4434
.L16168:
	xorl	%eax, %eax
	movq	1856(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L4428
	jmp	.L4433
.L16167:
	movl	8(%r13), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1852(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1852(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L4368:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13982
.L4364:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L4364
.L13982:
	testl	%ecx, %ecx
	je	.L4357
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L4366
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L4366
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L4366:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L4368
.L4357:
	decl	%r9d
	jg	.L4354
	movq	1856(%rsp), %rbp
	movq	8(%r12), %rdi
	xorl	%ecx, %ecx
	movl	%r10d, %r13d
	movl	$9, %r14d
	movq	8(%rbp), %rbx
	movq	%r12, 7336(%rsp)
	movq	%rbp, 7312(%rsp)
	movl	$0, 7364(%rsp)
	movq	%rdi, 7344(%rsp)
	movq	%rbx, 7320(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L4371
	cmpw	$88, %dx
	je	.L4371
	cmpw	$87, %dx
	je	.L4371
.L4370:
	movl	%ecx, 7328(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L4373
	cmpw	$88, %dx
	je	.L4373
	cmpw	$87, %dx
	je	.L4373
.L4372:
	movl	%ecx, 7352(%rsp)
	movl	$0, 7356(%rsp)
	movl	$0, 7332(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L4375
	cmpw	$87, %ax
	je	.L4375
.L4374:
	testl	%edx, %edx
	movl	%edx, 7368(%rsp)
	je	.L4376
	movl	%r10d, 7364(%rsp)
.L4376:
	movl	%r10d, 7360(%rsp)
	movl	7352(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L4378
	movl	7328(%rsp), %eax
	testl	%eax, %eax
	jne	.L4377
.L4378:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1852(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1852(%rsp), %ebp
.L4392:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13985
.L4388:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L4388
.L13985:
	testl	%ecx, %ecx
	je	.L4381
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L4390
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L4390
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L4390:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L4392
.L4381:
	cmpl	$2, %r9d
	jle	.L4377
	testl	%r10d, %r10d
	jne	.L4394
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L4395
	cmpw	$46, %dx
	je	.L4395
	cmpw	$47, %dx
	je	.L4395
	cmpw	$49, %dx
	je	.L4395
	cmpw	$113, %dx
	je	.L4395
.L4394:
	movl	7328(%rsp), %eax
	testl	%eax, %eax
	jne	.L4377
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L4397
	cmpw	$46, %dx
	je	.L4397
	cmpw	$47, %dx
	je	.L4397
	cmpw	$49, %dx
	je	.L4397
	cmpw	$113, %dx
	je	.L4397
.L4377:
	cmpl	$8, 1852(%rsp)
	movl	$8, %eax
	cmovl	1852(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 1852(%rsp)
	jle	.L4400
.L4422:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L13988
.L4407:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r14d, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L4407
.L13988:
	testl	%r12d, %r12d
	je	.L4400
	movslq	%r12d,%r13
	movq	%r13, %r10
	salq	$4, %r10
	addq	mov_optab(%rip), %r10
	movl	8(%r10), %edx
	cmpl	$210, %edx
	je	.L4409
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1852(%rsp)
	jl	.L4409
	movslq	%edx,%r14
	cmpl	%ebp, 7360(%rsp)
	leaq	7312(%rsp), %rbx
	movq	insn_gen_function(,%r14,8), %rsi
	movq	%rsi, 4624(%rsp)
	jl	.L4409
	movl	7368(%rsp), %edx
.L4420:
	testl	%edx, %edx
	je	.L4414
	subl	%ebp, 52(%rbx)
.L4414:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L4415
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15074:
	movq	%rax, %r14
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L4417
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L4418:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*4624(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L4419
	addl	%ebp, 52(%rbx)
.L4419:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L4420
.L4409:
	movl	mode_size(,%r13,4), %r14d
	cmpl	$1, %r14d
	jg	.L4422
.L4400:
	movl	7360(%rsp), %eax
	testl	%eax, %eax
.L15380:
	je	.L4443
	jmp	.L15283
.L4417:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L4418
.L4415:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15074
.L4397:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7320(%rsp)
	jmp	.L4377
.L4395:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7344(%rsp)
	jmp	.L4394
.L4375:
	movl	$1, %edx
	jmp	.L4374
.L4373:
	movl	$1, %ecx
	jmp	.L4372
.L4371:
	movl	$1, %ecx
	jmp	.L4370
.L4348:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L4344
.L16166:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L4342
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L16171
.L4342:
	cmpl	$55, %eax
	jne	.L4345
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L4344
.L16171:
	movq	8(%rbp), %r8
	movq	%r8, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L4344
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L4344
.L4341:
	cmpq	$0, 16(%r13)
	jne	.L4349
	movq	8(%r13), %r13
	jmp	.L4344
.L4349:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L4350
	movq	%rsi, %r13
	jmp	.L4344
.L4350:
	movq	8(%r13), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L4344
.L4338:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L4334
.L16165:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L4332
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16172
.L4332:
	cmpl	$55, %eax
	jne	.L4335
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L4334
.L16172:
	movq	8(%rbp), %r11
	movq	%r11, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L4334
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L4334
.L4331:
	cmpq	$0, 16(%r12)
	jne	.L4339
	movq	8(%r12), %r12
	jmp	.L4334
.L4339:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L4340
	movq	%rsi, %r12
	jmp	.L4334
.L4340:
	movq	8(%r12), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L4334
.L4328:
	movq	1856(%rsp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	1856(%rsp), %rbx
	movq	16(%rbx), %rdi
	movq	%rax, 8(%rbx)
	call	protect_from_queue
	movq	1856(%rsp), %rbp
	movq	%rax, 16(%rbp)
	jmp	.L4324
.L16164:
	jne	.L4325
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	1856(%rsp), %rsi
	movq	%rax, 8(%rsi)
	jmp	.L4324
.L4321:
	movq	1856(%rsp), %rbx
	cmpq	$0, 16(%rbx)
	jne	.L4329
	movq	8(%rbx), %rsi
.L15073:
	movq	%rsi, 1856(%rsp)
	jmp	.L4324
.L4329:
	movq	1856(%rsp), %r14
	movq	24(%r14), %rdi
	testq	%rdi, %rdi
	je	.L4330
	movq	%rdi, 1856(%rsp)
	jmp	.L4324
.L4330:
	movq	1856(%rsp), %rdi
	movq	8(%rdi), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	1856(%rsp), %rdx
	movq	%rax, %rdi
	movq	8(%rdx), %rsi
	movq	%rax, 24(%rdx)
	call	gen_move_insn
	movq	1856(%rsp), %rbp
	movq	%rax, %rdi
	movq	16(%rbp), %rsi
	call	emit_insn_before
	movq	24(%rbp), %rsi
	jmp	.L15073
.L16163:
	xorl	%eax, %eax
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, 1912(%rsp)
	je	.L16173
.L4067:
	movl	$8, %edi
	call	size_int
	movl	$57, %edi
	movq	1928(%rsp), %rsi
	movq	%rax, %rdx
	movq	8(%rsi), %rbx
	movq	32(%rbx), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	1928(%rsp), %rcx
	movq	%rax, %r14
	movl	32(%rcx), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%r14, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movq	1856(%rsp), %rbp
	movq	1928(%rsp), %r10
	movq	$0, 1864(%rsp)
	movq	%rax, 1888(%rsp)
	movq	%rax, %r14
	movq	8(%r10), %r13
	movl	48(%r13), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%rbp)
	movl	%eax, 1884(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	1856(%rsp), %r11
	movq	%r11, 1896(%rsp)
	movzwl	(%r11), %eax
	cmpl	$59, %eax
	je	.L4193
	cmpl	$55, %eax
	je	.L16174
	cmpl	$63, %eax
	je	.L4200
	cmpl	$66, %eax
	je	.L4200
.L4196:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L4203
	cmpl	$55, %eax
	je	.L16175
.L4207:
	cmpl	$63, %eax
	je	.L4210
	cmpl	$66, %eax
	je	.L4210
.L4206:
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L4213
	cmpl	$55, %eax
	je	.L16176
.L4217:
	cmpl	$63, %eax
	je	.L4220
	cmpl	$66, %eax
	je	.L4220
.L4216:
	movq	1896(%rsp), %rbp
	cmpw	$55, (%rbp)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 1888(%rsp)
	je	.L15283
	movq	1888(%rsp), %rdx
	cmpw	$46, (%rdx)
	je	.L16177
.L4226:
	movl	1884(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 4656(%rsp)
	testl	%ebp, %ebp
	je	.L13979
.L4312:
	movslq	%ebp,%r13
	movq	%r13, %rax
	movq	%r13, 4648(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L4300
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L4304
	movq	1888(%rsp), %r10
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r10)
	ja	.L4300
.L4304:
	movslq	%edx,%rsi
	leaq	(%rsi,%rsi,4), %r13
	movq	%rsi, 4640(%rsp)
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16178
.L4305:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16179
.L4306:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L4307
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	4656(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L4300
.L4307:
	call	get_last_insn
	movl	$1, %edx
	movq	1888(%rsp), %rsi
	movq	%rax, 4632(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16180
.L4308:
	movq	4640(%rsp), %rbp
	movq	1896(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	4656(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14933
	movq	4632(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L4300:
	movq	4648(%rsp), %rbx
	movl	mode_wider_mode(,%rbx,4), %ebp
	testl	%ebp, %ebp
	jne	.L4312
.L13979:
	movq	1888(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	movq	1896(%rsp), %rax
	movq	%rdi, (%rsp)
	movq	memcpy_libfunc(%rip), %rdi
	movq	8(%rax), %r8
	xorl	%eax, %eax
	call	emit_library_call
.L4310:
	cmpw	$46, (%r14)
	je	.L16181
	movq	1856(%rsp), %r11
	movl	$4, %edi
	movq	8(%r11), %rsi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movl	$4, %edi
	movq	%r14, %rcx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	1912(%rsp), %rdx
	movl	$4, %edi
	movq	%r14, %rcx
	movq	%rax, %rbp
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 1864(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L4314:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L4315
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%rbp, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L4315:
	cmpq	$0, 1864(%rsp)
	je	.L4443
	movq	1864(%rsp), %rdi
	call	emit_label
	jmp	.L4443
.L16181:
	movq	1856(%rsp), %rcx
	movq	1928(%rsp), %rdx
	movq	8(%rcx), %rdi
	movl	32(%rdx), %esi
	call	plus_constant_wide
	movq	1912(%rsp), %rdi
	movq	1928(%rsp), %r14
	movq	%rax, %rbp
	movl	32(%r14), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L4314
.L14933:
	call	emit_insn
	jmp	.L4310
.L16180:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L4308
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L4308
.L16179:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L4300
	jmp	.L4306
.L16178:
	xorl	%eax, %eax
	movq	1896(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L4300
	jmp	.L4305
.L16177:
	movl	8(%rdx), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1884(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1884(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L4240:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13970
.L4236:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L4236
.L13970:
	testl	%ecx, %ecx
	je	.L4229
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L4238
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L4238
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L4238:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L4240
.L4229:
	decl	%r9d
	jg	.L4226
	movq	1896(%rsp), %rcx
	movq	8(%r12), %rdi
	movl	%r10d, %r13d
	movq	8(%rcx), %rbx
	movq	%r12, 7336(%rsp)
	movq	%rcx, 7312(%rsp)
	movl	$0, 7364(%rsp)
	movq	%rdi, 7344(%rsp)
	xorl	%ecx, %ecx
	movl	$9, 1880(%rsp)
	movq	%rbx, 7320(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L4243
	cmpw	$88, %dx
	je	.L4243
	cmpw	$87, %dx
	je	.L4243
.L4242:
	movl	%ecx, 7328(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L4245
	cmpw	$88, %dx
	je	.L4245
	cmpw	$87, %dx
	je	.L4245
.L4244:
	movl	%ecx, 7352(%rsp)
	movl	$0, 7356(%rsp)
	movl	$0, 7332(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L4247
	cmpw	$87, %ax
	je	.L4247
.L4246:
	testl	%edx, %edx
	movl	%edx, 7368(%rsp)
	je	.L4248
	movl	%r10d, 7364(%rsp)
.L4248:
	movl	7352(%rsp), %eax
	movl	%r10d, 7360(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L4250
	movl	7328(%rsp), %r9d
	testl	%r9d, %r9d
	jne	.L4249
.L4250:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1884(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1884(%rsp), %ebp
.L4264:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13973
.L4260:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L4260
.L13973:
	testl	%ecx, %ecx
	je	.L4253
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L4262
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L4262
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L4262:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L4264
.L4253:
	cmpl	$2, %r9d
	jle	.L4249
	testl	%r10d, %r10d
	jne	.L4266
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L4267
	cmpw	$46, %dx
	je	.L4267
	cmpw	$47, %dx
	je	.L4267
	cmpw	$49, %dx
	je	.L4267
	cmpw	$113, %dx
	je	.L4267
.L4266:
	movl	7328(%rsp), %esi
	testl	%esi, %esi
	jne	.L4249
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L4269
	cmpw	$46, %dx
	je	.L4269
	cmpw	$47, %dx
	je	.L4269
	cmpw	$49, %dx
	je	.L4269
	cmpw	$113, %dx
	je	.L4269
.L4249:
	cmpl	$8, 1884(%rsp)
	movl	$8, %eax
	cmovl	1884(%rsp), %eax
	cmpl	$1, 1880(%rsp)
	movl	%eax, 1884(%rsp)
	jle	.L4272
.L4294:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L13976
.L4279:
	movslq	%edx,%rbx
	movl	1880(%rsp), %eax
	salq	$2, %rbx
	cmpl	%eax, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L4279
.L13976:
	testl	%r12d, %r12d
	je	.L4272
	movslq	%r12d,%r13
	movq	%r13, %rdi
	salq	$4, %rdi
	addq	mov_optab(%rip), %rdi
	movl	8(%rdi), %edx
	cmpl	$210, %edx
	je	.L4281
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1884(%rsp)
	jl	.L4281
	movslq	%edx,%rcx
	cmpl	%ebp, 7360(%rsp)
	leaq	7312(%rsp), %rbx
	movq	insn_gen_function(,%rcx,8), %rdx
	movq	%rdx, 4664(%rsp)
	jl	.L4281
	movl	7368(%rsp), %edx
.L4292:
	testl	%edx, %edx
	je	.L4286
	subl	%ebp, 52(%rbx)
.L4286:
	movl	16(%rbx), %r11d
	testl	%r11d, %r11d
	je	.L4287
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15072:
	movl	40(%rbx), %r9d
	movq	%rax, 1872(%rsp)
	testl	%r9d, %r9d
	je	.L4289
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L4290:
	movq	%rax, %rsi
	movq	1872(%rsp), %rdi
	xorl	%eax, %eax
	call	*4664(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L4291
	addl	%ebp, 52(%rbx)
.L4291:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L4292
.L4281:
	movl	mode_size(,%r13,4), %r12d
	movl	%r12d, 1880(%rsp)
	decl	%r12d
	jg	.L4294
.L4272:
	movl	7360(%rsp), %r8d
	testl	%r8d, %r8d
	je	.L4310
	jmp	.L15283
.L4289:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L4290
.L4287:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15072
.L4269:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7320(%rsp)
	jmp	.L4249
.L4267:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7344(%rsp)
	jmp	.L4266
.L4247:
	movl	$1, %edx
	jmp	.L4246
.L4245:
	movl	$1, %ecx
	jmp	.L4244
.L4243:
	movl	$1, %ecx
	jmp	.L4242
.L4220:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L4216
.L16176:
	movzbl	2(%r14), %edx
	cmpb	$16, %dl
	je	.L4214
	movq	8(%r14), %rbp
	cmpw	$59, (%rbp)
	je	.L16182
.L4214:
	cmpl	$55, %eax
	jne	.L4217
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L4216
.L16182:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r14)
	cmpq	$0, 16(%rbp)
	je	.L4216
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r13, 1888(%rsp)
	jmp	.L4216
.L4213:
	cmpq	$0, 16(%r14)
	jne	.L4221
	movq	8(%r14), %r9
	movq	%r9, 1888(%rsp)
	jmp	.L4216
.L4221:
	movq	24(%r14), %rdx
	testq	%rdx, %rdx
	movq	%rdx, 1888(%rsp)
	jne	.L4216
	movq	8(%r14), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rax
	movq	%rax, 1888(%rsp)
	jmp	.L4216
.L4210:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L4206
.L16175:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L4204
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16183
.L4204:
	cmpl	$55, %eax
	jne	.L4207
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L4206
.L16183:
	movq	8(%rbp), %rsi
	movq	%rsi, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L4206
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	%r13, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L4206
.L4203:
	cmpq	$0, 16(%r12)
	jne	.L4211
	movq	8(%r12), %r12
	jmp	.L4206
.L4211:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L4212
	movq	%rsi, %r12
	jmp	.L4206
.L4212:
	movq	8(%r12), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L4206
.L4200:
	movq	1856(%rsp), %rbp
	xorl	%esi, %esi
	movq	8(%rbp), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbp), %rdi
	movq	%rax, 8(%rbp)
	call	protect_from_queue
	movq	%rax, 16(%rbp)
	jmp	.L4196
.L16174:
	movq	1856(%rsp), %r9
	xorl	%esi, %esi
	movq	8(%r9), %rdi
	call	protect_from_queue
	movq	1856(%rsp), %rdi
	movq	%rax, 8(%rdi)
	jmp	.L4196
.L4193:
	movq	1856(%rsp), %rsi
	cmpq	$0, 16(%rsi)
	jne	.L4201
	movq	8(%rsi), %rdx
	movq	%rdx, 1896(%rsp)
	jmp	.L4196
.L4201:
	movq	1856(%rsp), %rax
	movq	24(%rax), %r13
	testq	%r13, %r13
	movq	%r13, 1896(%rsp)
	jne	.L4196
	movq	1856(%rsp), %rbx
	movq	8(%rbx), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	1856(%rsp), %r10
	movq	%rax, %rdi
	movq	8(%r10), %rsi
	movq	%rax, 24(%r10)
	call	gen_move_insn
	movq	1856(%rsp), %rbp
	movq	%rax, %rdi
	movq	16(%rbp), %rsi
	call	emit_insn_before
	movq	24(%rbp), %r8
	movq	%r8, 1896(%rsp)
	jmp	.L4196
.L16173:
	movq	1928(%rsp), %r8
	movq	1912(%rsp), %rbp
	movl	32(%r8), %eax
	cmpl	%eax, 8(%rbp)
	jge	.L4067
	movq	8(%r8), %rcx
	movq	1856(%rsp), %r14
	movl	48(%rcx), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r14)
	movl	%eax, 1908(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	1856(%rsp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$59, %eax
	je	.L4070
	cmpl	$55, %eax
	je	.L16184
.L4074:
	cmpl	$63, %eax
	je	.L4077
	cmpl	$66, %eax
	je	.L4077
.L4073:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L4080
	cmpl	$55, %eax
	je	.L16185
.L4084:
	cmpl	$63, %eax
	je	.L4087
	cmpl	$66, %eax
	je	.L4087
.L4083:
	movq	1912(%rsp), %rcx
	movzwl	(%rcx), %eax
	cmpl	$59, %eax
	je	.L4090
	cmpl	$55, %eax
	je	.L16186
.L4094:
	cmpl	$63, %eax
	je	.L4097
	cmpl	$66, %eax
	je	.L4097
.L4093:
	movq	1856(%rsp), %r11
	cmpw	$55, (%r11)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 1912(%rsp)
	je	.L15283
	movq	1912(%rsp), %rsi
	cmpw	$46, (%rsi)
	je	.L16187
.L4103:
	movl	1908(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 4688(%rsp)
	testl	%ebp, %ebp
	je	.L13967
.L4189:
	movslq	%ebp,%rax
	movq	%rax, 4680(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L4177
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L4181
	movq	1912(%rsp), %r8
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r8)
	ja	.L4177
.L4181:
	movslq	%edx,%r14
	leaq	(%r14,%r14,4), %r13
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16188
.L4182:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16189
.L4183:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L4184
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	4688(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L4177
.L4184:
	call	get_last_insn
	movl	$1, %edx
	movq	1912(%rsp), %rsi
	movq	%rax, 4672(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16190
.L4185:
	movq	1856(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	4688(%rsp), %rcx
	call	*insn_gen_function(,%r14,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14934
	movq	4672(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L4177:
	movq	4680(%rsp), %rax
	movl	mode_wider_mode(,%rax,4), %ebp
	testl	%ebp, %ebp
	jne	.L4189
.L13967:
	movq	1912(%rsp), %rsi
	movl	$4, %edi
	jmp	.L15075
.L16190:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L4185
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L4185
.L16189:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L4177
	jmp	.L4183
.L16188:
	xorl	%eax, %eax
	movq	1856(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L4177
	jmp	.L4182
.L16187:
	movl	8(%rsi), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1908(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1908(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L4117:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13958
.L4113:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L4113
.L13958:
	testl	%ecx, %ecx
	je	.L4106
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L4115
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L4115
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L4115:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L4117
.L4106:
	decl	%r9d
	jg	.L4103
	movq	1856(%rsp), %rbp
	movq	8(%r12), %rdi
	xorl	%ecx, %ecx
	movl	%r10d, %r13d
	movl	$9, %r14d
	movq	8(%rbp), %rbx
	movq	%r12, 7272(%rsp)
	movq	%rbp, 7248(%rsp)
	movl	$0, 7300(%rsp)
	movq	%rdi, 7280(%rsp)
	movq	%rbx, 7256(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L4120
	cmpw	$88, %dx
	je	.L4120
	cmpw	$87, %dx
	je	.L4120
.L4119:
	movl	%ecx, 7264(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L4122
	cmpw	$88, %dx
	je	.L4122
	cmpw	$87, %dx
	je	.L4122
.L4121:
	movl	%ecx, 7288(%rsp)
	movl	$0, 7292(%rsp)
	movl	$0, 7268(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L4124
	cmpw	$87, %ax
	je	.L4124
.L4123:
	testl	%edx, %edx
	movl	%edx, 7304(%rsp)
	je	.L4125
	movl	%r10d, 7300(%rsp)
.L4125:
	movl	%r10d, 7296(%rsp)
	movl	7288(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L4127
	movl	7264(%rsp), %eax
	testl	%eax, %eax
	jne	.L4126
.L4127:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1908(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1908(%rsp), %ebp
.L4141:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13961
.L4137:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L4137
.L13961:
	testl	%ecx, %ecx
	je	.L4130
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L4139
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L4139
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L4139:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L4141
.L4130:
	cmpl	$2, %r9d
	jle	.L4126
	testl	%r10d, %r10d
	jne	.L4143
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L4144
	cmpw	$46, %dx
	je	.L4144
	cmpw	$47, %dx
	je	.L4144
	cmpw	$49, %dx
	je	.L4144
	cmpw	$113, %dx
	je	.L4144
.L4143:
	movl	7264(%rsp), %esi
	testl	%esi, %esi
	jne	.L4126
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L4146
	cmpw	$46, %dx
	je	.L4146
	cmpw	$47, %dx
	je	.L4146
	cmpw	$49, %dx
	je	.L4146
	cmpw	$113, %dx
	je	.L4146
.L4126:
	cmpl	$8, 1908(%rsp)
	movl	$8, %eax
	cmovl	1908(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 1908(%rsp)
	jle	.L4149
.L4171:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L13964
.L4156:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r14d, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L4156
.L13964:
	testl	%r12d, %r12d
	je	.L4149
	movslq	%r12d,%r13
	movq	%r13, %r11
	salq	$4, %r11
	addq	mov_optab(%rip), %r11
	movl	8(%r11), %edx
	cmpl	$210, %edx
	je	.L4158
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1908(%rsp)
	jl	.L4158
	movslq	%edx,%rdi
	cmpl	%ebp, 7296(%rsp)
	leaq	7248(%rsp), %rbx
	movq	insn_gen_function(,%rdi,8), %r14
	movq	%r14, 4696(%rsp)
	jl	.L4158
	movl	7304(%rsp), %edx
.L4169:
	testl	%edx, %edx
	je	.L4163
	subl	%ebp, 52(%rbx)
.L4163:
	movl	16(%rbx), %edx
	testl	%edx, %edx
	je	.L4164
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15071:
	movl	40(%rbx), %r9d
	movq	%rax, %r14
	testl	%r9d, %r9d
	je	.L4166
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L4167:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*4696(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L4168
	addl	%ebp, 52(%rbx)
.L4168:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L4169
.L4158:
	movl	mode_size(,%r13,4), %r14d
	cmpl	$1, %r14d
	jg	.L4171
.L4149:
	movl	7296(%rsp), %r12d
	testl	%r12d, %r12d
	jmp	.L15380
.L4166:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L4167
.L4164:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15071
.L4146:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7256(%rsp)
	jmp	.L4126
.L4144:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7280(%rsp)
	jmp	.L4143
.L4124:
	movl	$1, %edx
	jmp	.L4123
.L4122:
	movl	$1, %ecx
	jmp	.L4121
.L4120:
	movl	$1, %ecx
	jmp	.L4119
.L4097:
	movq	1912(%rsp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	1912(%rsp), %r9
	movq	%rax, 8(%r9)
	movq	1912(%rsp), %rdx
	movq	16(%rdx), %rdi
	call	protect_from_queue
	movq	1912(%rsp), %r10
	movq	%rax, 16(%r10)
	jmp	.L4093
.L16186:
	movzbl	2(%rcx), %edx
	cmpb	$16, %dl
	je	.L4091
	movq	8(%rcx), %rbp
	cmpw	$59, (%rbp)
	je	.L16191
.L4091:
	cmpl	$55, %eax
	jne	.L4094
	movq	1912(%rsp), %rbp
	xorl	%esi, %esi
	movq	8(%rbp), %rdi
	call	protect_from_queue
	movq	%rax, 8(%rbp)
	jmp	.L4093
.L16191:
	movq	8(%rbp), %r11
	movq	%r11, 8(%rcx)
	cmpq	$0, 16(%rbp)
	je	.L4093
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	1912(%rsp), %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L15070:
	movq	%rbx, 1912(%rsp)
	jmp	.L4093
.L4090:
	movq	1912(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L4098
	movq	8(%rcx), %rbx
	jmp	.L15070
.L4098:
	movq	1912(%rsp), %r8
	movq	24(%r8), %rsi
	testq	%rsi, %rsi
	je	.L4099
	movq	%rsi, 1912(%rsp)
	jmp	.L4093
.L4099:
	movq	1912(%rsp), %rbx
	movq	8(%rbx), %r13
	movzbl	2(%r13), %edi
	call	gen_reg_rtx
	movq	1912(%rsp), %rcx
	movq	%rax, %rdi
	movq	8(%rcx), %rsi
	movq	%rax, 24(%rcx)
	call	gen_move_insn
	movq	1912(%rsp), %r14
	movq	%rax, %rdi
	movq	16(%r14), %rsi
	call	emit_insn_before
	movq	1912(%rsp), %rdi
	movq	24(%rdi), %rsi
	movq	%rsi, 1912(%rsp)
	jmp	.L4093
.L4087:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L4083
.L16185:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L4081
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16192
.L4081:
	cmpl	$55, %eax
	jne	.L4084
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L4083
.L16192:
	movq	8(%rbp), %rcx
	movq	%rcx, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L4083
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	%r13, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L4083
.L4080:
	cmpq	$0, 16(%r12)
	jne	.L4088
	movq	8(%r12), %r12
	jmp	.L4083
.L4088:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L4089
	movq	%rsi, %r12
	jmp	.L4083
.L4089:
	movq	8(%r12), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L4083
.L4077:
	movq	1856(%rsp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	1856(%rsp), %r10
	movq	%rax, 8(%r10)
	movq	1856(%rsp), %r11
	movq	16(%r11), %rdi
	call	protect_from_queue
	movq	1856(%rsp), %rbx
	movq	%rax, 16(%rbx)
	jmp	.L4073
.L16184:
	jne	.L4074
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbx)
	jmp	.L4073
.L4070:
	movq	1856(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L4078
	movq	8(%rcx), %r9
	movq	%r9, 1856(%rsp)
	jmp	.L4073
.L4078:
	movq	1856(%rsp), %rax
	movq	24(%rax), %rdi
	testq	%rdi, %rdi
	je	.L4079
	movq	%rdi, 1856(%rsp)
	jmp	.L4073
.L4079:
	movq	1856(%rsp), %r14
	movq	8(%r14), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	1856(%rsp), %rbp
	movq	%rax, %rdi
	movq	8(%rbp), %rsi
	movq	%rax, 24(%rbp)
	call	gen_move_insn
	movq	1856(%rsp), %r13
	movq	%rax, %rdi
	movq	16(%r13), %rsi
	call	emit_insn_before
	movq	1856(%rsp), %rdi
	movq	24(%rdi), %rsi
	movq	%rsi, 1856(%rsp)
	jmp	.L4073
	.p2align 6,,7
.L4059:
	movq	56(%rsp), %r8
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	56(%rsp), %r13
	movq	%rax, 8(%r13)
	movq	56(%rsp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	56(%rsp), %rdi
	movq	%rax, 16(%rdi)
	jmp	.L4055
.L16081:
	jne	.L4056
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbx)
	jmp	.L4055
	.p2align 6,,7
.L4052:
	movq	56(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L4060
	movq	8(%rcx), %r14
	movq	%r14, 1856(%rsp)
	jmp	.L4055
.L4060:
	movq	56(%rsp), %rbx
	movq	24(%rbx), %rcx
	testq	%rcx, %rcx
	movq	%rcx, 1856(%rsp)
	jne	.L4055
	movq	56(%rsp), %rax
	movq	8(%rax), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	56(%rsp), %r9
	movq	%rax, %rdi
	movq	8(%r9), %rsi
	movq	%rax, 24(%r9)
	call	gen_move_insn
	movq	56(%rsp), %rdx
	movq	%rax, %rdi
	movq	16(%rdx), %rsi
	call	emit_insn_before
	movq	56(%rsp), %r10
	movq	24(%r10), %r11
	movq	%r11, 1856(%rsp)
	jmp	.L4055
	.p2align 6,,7
.L16080:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	1928(%rsp), %rdi
	movq	56(%rsp), %rbx
	movq	%rax, %rsi
	movzbl	2(%rbx), %edx
	jmp	.L15069
.L4031:
	movq	56(%rsp), %rdx
	movl	(%rdx), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L16193
	movq	56(%rsp), %r10
	movq	1928(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movzbl	2(%r10), %edx
	movq	%r10, %rsi
	call	expand_expr
	movq	56(%rsp), %rdx
	movq	%rax, %r12
	cmpw	$51, (%rdx)
	je	.L16194
.L4049:
	movzwl	(%r12), %edx
	leal	-56(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L4050
	cmpw	$46, %dx
	je	.L4050
	cmpw	$47, %dx
	je	.L4050
	cmpw	$49, %dx
	je	.L4050
	cmpw	$113, %dx
	jne	.L3996
	jmp	.L4050
	.p2align 6,,7
.L16194:
	cmpl	$63, 8(%rdx)
	jle	.L3996
	jmp	.L4049
.L16193:
	movq	1928(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	56(%rsp), %rbp
	movq	%rax, %rsi
	movzbl	3(%rbp), %edx
	movq	8(%rbp), %rdi
	shrb	$2, %dl
	andl	$1, %edx
	jmp	.L15077
.L4040:
	movl	$1, %ebx
	jmp	.L4034
.L4032:
	xorl	%ebx, %ebx
	jmp	.L4034
.L4038:
	movq	56(%rsp), %r13
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	movq	8(%r13), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L4040
	movq	56(%rsp), %r8
	xorl	%eax, %eax
	movq	16(%r8), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L4034
	jmp	.L4040
	.p2align 6,,7
.L16079:
	movzbl	2(%rcx), %eax
	cmpb	$16, %al
	je	.L4024
	movl	cse_not_expected(%rip), %r9d
	movq	1928(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	%al, %edx
	testl	%r9d, %r9d
	cmove	%rcx, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	call	expand_expr
	movq	%rax, %r12
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L4050
	testb	%al, %al
	je	.L4050
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L15333
	.p2align 6,,7
.L16078:
	movq	56(%rsp), %r12
	cmpb	$16, 2(%r12)
	jne	.L3997
	call	gen_label_rtx
	movq	%rax, %rbp
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r12
	testq	%rbx, %rbx
	jne	.L4001
.L13951:
	movq	56(%rsp), %rsi
	movzwl	(%rsi), %eax
	cmpl	$59, %eax
	je	.L4003
	cmpl	$55, %eax
	je	.L16195
.L4007:
	cmpl	$63, %eax
	je	.L4010
	cmpl	$66, %eax
	je	.L4010
.L4006:
	movq	1928(%rsp), %r14
	xorl	%eax, %eax
	movq	%rbp, %rsi
	incl	inhibit_defer_pop(%rip)
	movq	32(%r14), %rdi
	call	jumpifnot
	movq	1928(%rsp), %rdx
	movq	1856(%rsp), %rsi
	xorl	%eax, %eax
	movq	40(%rdx), %rdi
	xorl	%edx, %edx
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L4016
.L13953:
	movq	%r12, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%rbp, %rdi
	call	emit_label
	xorl	%eax, %eax
	xorl	%edx, %edx
	movq	1928(%rsp), %rbp
	movq	1856(%rsp), %rsi
	movq	48(%rbp), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L4021
.L13955:
	movq	%r12, %rdi
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L4443
	.p2align 6,,7
.L4021:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r10
	movq	%rax, 16(%rbx)
	testq	%r10, %r10
	movq	%r10, pending_chain(%rip)
	movq	%r10, %rbx
	jne	.L4021
	jmp	.L13955
	.p2align 6,,7
.L4016:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r11
	movq	%rax, 16(%rbx)
	testq	%r11, %r11
	movq	%r11, pending_chain(%rip)
	movq	%r11, %rbx
	jne	.L4016
	jmp	.L13953
.L4010:
	movq	56(%rsp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	56(%rsp), %r9
	movq	16(%r9), %rdi
	movq	%rax, 8(%r9)
	call	protect_from_queue
	movq	56(%rsp), %r10
	movq	%rax, 16(%r10)
	jmp	.L4006
.L16195:
	jne	.L4007
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	56(%rsp), %r11
	movq	%rax, 8(%r11)
	jmp	.L4006
.L4003:
	movq	56(%rsp), %rbx
	cmpq	$0, 16(%rbx)
	jne	.L4011
	movq	8(%rbx), %rsi
.L15068:
	movq	%rsi, 1856(%rsp)
	jmp	.L4006
.L4011:
	movq	56(%rsp), %rdi
	movq	24(%rdi), %rsi
	testq	%rsi, %rsi
	movq	%rsi, 1856(%rsp)
	jne	.L4006
	movq	56(%rsp), %rbx
	movq	8(%rbx), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	56(%rsp), %r8
	movq	%rax, %rdi
	movq	8(%r8), %rsi
	movq	%rax, 24(%r8)
	call	gen_move_insn
	movq	56(%rsp), %r13
	movq	%rax, %rdi
	movq	16(%r13), %rsi
	call	emit_insn_before
	movq	24(%r13), %rsi
	jmp	.L15068
	.p2align 6,,7
.L4001:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r14
	movq	%rax, 16(%rbx)
	testq	%r14, %r14
	movq	%r14, pending_chain(%rip)
	movq	%r14, %rbx
	jne	.L4001
	jmp	.L13951
	.p2align 6,,7
.L16077:
	movq	32(%rdx), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L3993
.L13949:
	movq	1928(%rsp), %rbx
	movq	56(%rsp), %rsi
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	40(%rbx), %rdi
	call	store_expr
	jmp	.L4443
.L3993:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdx
	movq	%rax, 16(%rbx)
	testq	%rdx, %rdx
	movq	%rdx, pending_chain(%rip)
	movq	%rdx, %rbx
	jne	.L3993
	jmp	.L13949
.L16076:
	cmpl	$63, 8(%r8)
	jg	.L3934
.L3935:
	movl	5412(%rsp), %edi
	call	gen_reg_rtx
	movq	%rax, 56(%rsp)
	jmp	.L3934
.L16075:
	cmpw	$55, (%r13)
	jne	.L3988
	testb	$32, 17(%rbx)
.L15331:
	je	.L3938
	jmp	.L3988
	.p2align 6,,7
.L16074:
	movq	8(%r13), %r13
	cmpw	$51, (%r13)
	jne	.L3985
	cmpl	$63, 8(%r13)
	jg	.L3985
.L14931:
	xorl	%ebp, %ebp
	jmp	.L3938
.L3952:
	movq	32(%rbx), %rsi
	movq	%r12, %rdi
.L15330:
	xorl	%eax, %eax
	call	safe_from_p
.L15067:
	movl	%eax, %ebp
	jmp	.L3938
.L3954:
	movq	32(%rbx), %rsi
	xorl	%eax, %eax
	movq	%r12, %rdi
	xorl	%ebp, %ebp
	call	safe_from_p
	testl	%eax, %eax
	je	.L3938
	movq	%r12, %rdi
	movq	40(%rbx), %rsi
.L15332:
	xorl	%eax, %eax
	call	safe_from_p
	testl	%eax, %eax
	jmp	.L15331
.L3957:
	movzbl	%dl, %eax
	subl	$39, %eax
	cmpl	$67, %eax
	ja	.L3958
	mov	%eax, %esi
	jmp	*.L3973(,%rsi,8)
	.section	.rodata
	.align 8
	.align 4
.L3973:
	.quad	.L3960
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3971
	.quad	.L3962
	.quad	.L15283
	.quad	.L3969
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3958
	.quad	.L3970
	.quad	.L3967
	.quad	.L3959
	.text
.L3959:
	movq	32(%rbx), %rdi
	call	staticp
	jmp	.L15067
.L3960:
	xorl	%ebp, %ebp
	cmpw	$55, %cx
	je	.L3938
.L3958:
	testq	%r13, %r13
	jne	.L14863
	movzbl	%dl, %ecx 
	xorl	%ebp, %ebp
	salq	$2, %rcx
	addq	tree_code_length(%rip), %rcx
	movl	(%rcx), %r14d
	cmpl	%r14d, %ebp
	jge	.L3943
.L3981:
	movslq	%ebp,%r8
	movq	32(%rbx,%r8,8), %rsi
	testq	%rsi, %rsi
	jne	.L16196
.L3978:
	incl	%ebp
	cmpl	%r14d, %ebp
	jl	.L3981
	jmp	.L3943
.L16196:
	xorl	%eax, %eax
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L3978
	jmp	.L14931
.L3971:
	movq	%r12, %rdi
	movq	40(%rbx), %rsi
	jmp	.L15330
.L3962:
	movq	48(%rbx), %r13
	testq	%r13, %r13
	jne	.L14863
	cmpw	$51, %cx
	je	.L16197
.L3966:
	cmpw	$55, %cx
	jne	.L3958
	jmp	.L14931
.L16197:
	cmpl	$63, 8(%r12)
	jle	.L14931
	jmp	.L3966
.L3969:
	movq	40(%rbx), %r13
	jmp	.L3958
.L3970:
	movq	48(%rbx), %r13
	jmp	.L3958
.L3967:
	movq	40(%rbx), %r13
	xorl	%ebp, %ebp
	jmp	.L15066
.L3946:
	cmpb	$3, %dl
	jne	.L14931
	movq	32(%rbx), %rsi
	xorl	%ebp, %ebp
	testq	%rsi, %rsi
	jne	.L16198
.L3949:
	movq	(%rbx), %rsi
	movq	%r12, %rdi
	testq	%rsi, %rsi
	jne	.L15332
	jmp	.L3988
.L16198:
	xorl	%eax, %eax
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L3938
	jmp	.L3949
	.p2align 6,,7
.L16073:
	movq	8(%r12), %rax
	movq	virtual_outgoing_args_rtx(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L3988
	cmpw	$63, (%rax)
	jne	.L3941
	cmpq	%rdx, 8(%rax)
	jne	.L3941
	jmp	.L3988
	.p2align 6,,7
.L16072:
	movq	8(%r12), %r12
	movzwl	(%r12), %ecx
	cmpw	$51, %cx
	jne	.L3939
	cmpl	$63, 8(%r12)
	jg	.L3939
	jmp	.L14931
	.p2align 6,,7
.L3933:
	movl	5408(%rsp), %eax
	xorl	%esi, %esi
	testl	%eax, %eax
	je	.L4447
	movq	const1_rtx(%rip), %rsi
.L4447:
	movq	1928(%rsp), %rdi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	jmp	.L4443
.L3932:
	cmpq	$0, 56(%rsp)
	je	.L6331
	movq	32(%r15), %rdx
	movzbq	16(%rdx), %r12
	salq	$3, %r12
	addq	tree_code_type(%rip), %r12
	movq	(%r12), %rdi
	cmpb	$60, (%rdi)
	je	.L16199
.L5368:
	cmpq	$0, 56(%rsp)
	je	.L6331
	movq	32(%r15), %rdx
	movzbq	16(%rdx), %r12
	salq	$3, %r12
	addq	tree_code_type(%rip), %r12
	movq	(%r12), %rdi
	cmpb	$60, (%rdi)
	je	.L16200
.L6331:
	call	gen_label_rtx
	movq	1920(%rsp), %rsi
	movq	%rax, 1312(%rsp)
	xorl	%eax, %eax
	movq	32(%r15), %rdi
	call	jumpifnot
	cmpq	$0, 56(%rsp)
	je	.L7294
	movq	40(%r15), %r8
	xorl	%ebp, %ebp
	movq	56(%rsp), %r13
	movq	%r8, 3928(%rsp)
	movzbl	16(%r8), %eax
	cmpb	$44, %al
	je	.L16201
	cmpb	$48, %al
	je	.L16202
.L7303:
	xorl	%r12d, %r12d
	testl	%r12d, %r12d
	je	.L7330
	movq	56(%rsp), %rdi
	cmpw	$55, (%rdi)
	je	.L16203
.L7330:
	movq	56(%rsp), %rdi
	movzwl	(%rdi), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L7338
	mov	%eax, %r8d
	jmp	*.L7347(,%r8,8)
	.section	.rodata
	.align 8
	.align 4
.L7347:
	.quad	.L7341
	.quad	.L7338
	.quad	.L7338
	.quad	.L7338
	.quad	.L7346
	.quad	.L7338
	.quad	.L7338
	.quad	.L7338
	.quad	.L7344
	.quad	.L7344
	.quad	.L7338
	.quad	.L7344
	.text
.L7341:
	movq	56(%rsp), %r10
	xorl	%eax, %eax
	movq	8(%r10), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L7340:
	testl	%ebx, %ebx
	je	.L7337
	movq	56(%rsp), %rbx
	movzbl	2(%rbx), %eax
	cmpb	$16, %al
	je	.L7349
	testb	%al, %al
	jne	.L16204
.L7349:
	movq	56(%rsp), %rax
	movq	3928(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	2(%rax), %edx
.L15132:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L15352:
	movq	%rax, %r12
.L7356:
	movl	$1, %ebp
.L7302:
	cmpq	56(%rsp), %r12
	je	.L7749
	movq	3928(%rsp), %rdx
	cmpb	$0, 16(%rdx)
	je	.L7749
	movq	56(%rsp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$59, %eax
	je	.L7358
	cmpl	$55, %eax
	je	.L16205
.L7362:
	cmpl	$63, %eax
	je	.L7365
	cmpl	$66, %eax
	je	.L7365
.L7361:
	movzbl	2(%r12), %eax
	movzbl	2(%r13), %ecx
	cmpb	%cl, %al
	je	.L7368
	testb	%al, %al
	je	.L7368
	movq	3928(%rsp), %r10
	movq	8(%r10), %r14
	movzbl	17(%r14), %esi
	shrb	$6, %sil
	movl	%esi, %edx
	andl	$1, %edx
	testl	%ebp, %ebp
	je	.L7369
	movzbl	%cl, %edi
	movq	%r12, %rsi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%r13, %rdi
	movq	%rax, %rsi
.L15139:
	call	emit_move_insn
.L7749:
	cmpq	$0, cleanups_this_call(%rip)
	jne	.L16206
.L7754:
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L7758
.L14303:
	movq	1312(%rsp), %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	1920(%rsp), %rdi
	call	emit_label
	cmpq	$0, 56(%rsp)
	je	.L7760
	movq	48(%r15), %r15
	xorl	%ebp, %ebp
	movq	56(%rsp), %r13
	movq	%r15, 3784(%rsp)
	movzbl	16(%r15), %eax
	cmpb	$44, %al
	je	.L16207
	cmpb	$48, %al
	je	.L16208
.L7769:
	xorl	%r12d, %r12d
	testl	%r12d, %r12d
	je	.L7796
	movq	56(%rsp), %rdx
	cmpw	$55, (%rdx)
	je	.L16209
.L7796:
	movq	56(%rsp), %r14
	movzwl	(%r14), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L7804
	mov	%eax, %esi
	jmp	*.L7813(,%rsi,8)
	.section	.rodata
	.align 8
	.align 4
.L7813:
	.quad	.L7807
	.quad	.L7804
	.quad	.L7804
	.quad	.L7804
	.quad	.L7812
	.quad	.L7804
	.quad	.L7804
	.quad	.L7804
	.quad	.L7810
	.quad	.L7810
	.quad	.L7804
	.quad	.L7810
	.text
.L7807:
	movq	56(%rsp), %rax
	movq	8(%rax), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %ebx
.L7806:
	testl	%ebx, %ebx
	je	.L7803
	movq	56(%rsp), %rbx
	movzbl	2(%rbx), %eax
	cmpb	$16, %al
	je	.L7815
	testb	%al, %al
	jne	.L16210
.L7815:
	movq	56(%rsp), %rcx
	movq	3784(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	2(%rcx), %edx
.L15141:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L15353:
	movq	%rax, %r12
.L7822:
	movl	$1, %ebp
.L7768:
	cmpq	56(%rsp), %r12
	je	.L5367
	movq	3784(%rsp), %rdx
	cmpb	$0, 16(%rdx)
	je	.L5367
	movq	56(%rsp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$59, %eax
	je	.L7824
	cmpl	$55, %eax
	je	.L16211
.L7828:
	cmpl	$63, %eax
	je	.L7831
	cmpl	$66, %eax
	je	.L7831
.L7827:
	movzbl	2(%r12), %eax
	movzbl	2(%r13), %ecx
	cmpb	%cl, %al
	je	.L7834
	testb	%al, %al
	je	.L7834
	movq	3784(%rsp), %r11
	movq	8(%r11), %rdx
	movzbl	17(%rdx), %edi
	shrb	$6, %dil
	movl	%edi, %edx
	andl	$1, %edx
	testl	%ebp, %ebp
	je	.L7835
	movzbl	%cl, %edi
	movq	%r12, %rsi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%r13, %rdi
	movq	%rax, %rsi
.L15147:
	call	emit_move_insn
	jmp	.L5367
.L7835:
	movq	%r13, %rdi
	movq	%r12, %rsi
.L15148:
	xorl	%eax, %eax
	call	convert_move
	jmp	.L5367
.L7834:
	cmpb	$16, %al
	je	.L16212
.L8090:
	movq	%r13, %rdi
	movq	%r12, %rsi
	jmp	.L15147
.L16212:
	movq	3784(%rsp), %rsi
	cmpb	$28, 16(%rsi)
	je	.L16213
	cmpb	$16, %al
	jne	.L8090
	movq	3784(%rsp), %rdi
	xorl	%eax, %eax
	call	expr_size
	movq	3784(%rsp), %rsi
	movq	%rax, %r14
	movq	8(%rsi), %r9
	movl	48(%r9), %r15d
	shrl	$3, %r15d
	cmpb	$16, 2(%r13)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L8093
	cmpl	$55, %eax
	je	.L16214
.L8097:
	cmpl	$63, %eax
	je	.L8100
	cmpl	$66, %eax
	je	.L8100
.L8096:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L8103
	cmpl	$55, %eax
	je	.L16215
.L8107:
	cmpl	$63, %eax
	je	.L8110
	cmpl	$66, %eax
	je	.L8110
.L8106:
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L8113
	cmpl	$55, %eax
	je	.L16216
.L8117:
	cmpl	$63, %eax
	je	.L8120
	cmpl	$66, %eax
	je	.L8120
.L8116:
	cmpw	$55, (%r13)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	testq	%r14, %r14
	je	.L15283
	cmpw	$46, (%r14)
	je	.L16217
.L8126:
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	movl	%r15d, %edx
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 3696(%rsp)
	testl	%ebp, %ebp
	je	.L14347
.L8212:
	movslq	%ebp,%r8
	movq	%r8, %rax
	movq	%r8, 3688(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L8200
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L8204
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r14)
	ja	.L8200
.L8204:
	movslq	%edx,%rcx
	leaq	(%rcx,%rcx,4), %r15
	movq	%rcx, 3680(%rsp)
	salq	$4, %r15
	movq	insn_operand_predicate(%r15), %rdx
	testq	%rdx, %rdx
	jne	.L16218
.L8205:
	movq	insn_operand_predicate+8(%r15), %rdx
	testq	%rdx, %rdx
	jne	.L16219
.L8206:
	movq	insn_operand_predicate+24(%r15), %rdx
	testq	%rdx, %rdx
	je	.L8207
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	3696(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L8200
.L8207:
	call	get_last_insn
	movl	$1, %edx
	movq	%r14, %rsi
	movq	%rax, 3672(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r15), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16220
.L8208:
	movq	3680(%rsp), %r9
	movq	%r13, %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	3696(%rsp), %rcx
	call	*insn_gen_function(,%r9,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14960
	movq	3672(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L8200:
	movq	3688(%rsp), %rsi
	movl	mode_wider_mode(,%rsi,4), %ebp
	testl	%ebp, %ebp
	jne	.L8212
.L14347:
	movl	$4, %edi
	movq	%r14, %rsi
.L15146:
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%r12), %r14
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%r14, (%rsp)
	movq	8(%r13), %r8
	call	emit_library_call
	jmp	.L5367
.L14960:
	call	emit_insn
	jmp	.L5367
.L16220:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L8208
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L8208
.L16219:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L8200
	jmp	.L8206
.L16218:
	xorl	%eax, %eax
	movq	%r13, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L8200
	jmp	.L8205
.L16217:
	movl	8(%r14), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, %r15d
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	%r15d, %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L8140:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14338
.L8136:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L8136
.L14338:
	testl	%ecx, %ecx
	je	.L8129
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L8138
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L8138
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L8138:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L8140
.L8129:
	decl	%r9d
	jg	.L8126
	movq	8(%r13), %rbx
	movq	8(%r12), %rdi
	xorl	%ecx, %ecx
	movq	%r12, 6248(%rsp)
	movl	$0, 6276(%rsp)
	movq	%r13, 6224(%rsp)
	movl	%r10d, %r14d
	movl	$9, 1324(%rsp)
	movq	%rbx, 6232(%rsp)
	movq	%rdi, 6256(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L8143
	cmpw	$88, %dx
	je	.L8143
	cmpw	$87, %dx
	je	.L8143
.L8142:
	movl	%ecx, 6240(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L8145
	cmpw	$88, %dx
	je	.L8145
	cmpw	$87, %dx
	je	.L8145
.L8144:
	movl	%ecx, 6264(%rsp)
	movl	$0, 6268(%rsp)
	movl	$0, 6244(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L8147
	cmpw	$87, %ax
	je	.L8147
.L8146:
	testl	%edx, %edx
	movl	%edx, 6280(%rsp)
	je	.L8148
	movl	%r10d, 6276(%rsp)
.L8148:
	movl	%r10d, 6272(%rsp)
	movl	6264(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L8150
	movl	6240(%rsp), %eax
	testl	%eax, %eax
	jne	.L8149
.L8150:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, %r15d
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	%r15d, %ebp
.L8164:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14341
.L8160:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L8160
.L14341:
	testl	%ecx, %ecx
	je	.L8153
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L8162
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L8162
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L8162:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L8164
.L8153:
	cmpl	$2, %r9d
	jle	.L8149
	testl	%r10d, %r10d
	jne	.L8166
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L8167
	cmpw	$46, %dx
	je	.L8167
	cmpw	$47, %dx
	je	.L8167
	cmpw	$49, %dx
	je	.L8167
	cmpw	$113, %dx
	je	.L8167
.L8166:
	movl	6240(%rsp), %r9d
	testl	%r9d, %r9d
	jne	.L8149
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L8169
	cmpw	$46, %dx
	je	.L8169
	cmpw	$47, %dx
	je	.L8169
	cmpw	$49, %dx
	je	.L8169
	cmpw	$113, %dx
	je	.L8169
.L8149:
	cmpl	$8, %r15d
	movl	$8, %eax
	cmovge	%eax, %r15d
	cmpl	$1, 1324(%rsp)
	jle	.L8172
.L8194:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14344
.L8179:
	movslq	%edx,%rbx
	movl	1324(%rsp), %r10d
	salq	$2, %rbx
	cmpl	%r10d, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L8179
.L14344:
	testl	%r12d, %r12d
	je	.L8172
	movslq	%r12d,%r13
	movq	%r13, %rbp
	salq	$4, %rbp
	addq	mov_optab(%rip), %rbp
	movl	8(%rbp), %edx
	cmpl	$210, %edx
	je	.L8181
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, %r15d
	jl	.L8181
	movslq	%edx,%rdi
	cmpl	%ebp, 6272(%rsp)
	leaq	6224(%rsp), %rbx
	movq	insn_gen_function(,%rdi,8), %rdx
	movq	%rdx, 3704(%rsp)
	jl	.L8181
	movl	6280(%rsp), %edx
.L8192:
	testl	%edx, %edx
	je	.L8186
	subl	%ebp, 52(%rbx)
.L8186:
	movl	16(%rbx), %r11d
	testl	%r11d, %r11d
	je	.L8187
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15145:
	movq	%rax, %r14
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L8189
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L8190:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*3704(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L8191
	addl	%ebp, 52(%rbx)
.L8191:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L8192
.L8181:
	movl	mode_size(,%r13,4), %r12d
	movl	%r12d, 1324(%rsp)
	decl	%r12d
	jg	.L8194
.L8172:
	movl	6272(%rsp), %r15d
	testl	%r15d, %r15d
.L15391:
	je	.L5367
	jmp	.L15283
.L8189:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L8190
.L8187:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15145
.L8169:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6232(%rsp)
	jmp	.L8149
.L8167:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6256(%rsp)
	jmp	.L8166
.L8147:
	movl	$1, %edx
	jmp	.L8146
.L8145:
	movl	$1, %ecx
	jmp	.L8144
.L8143:
	movl	$1, %ecx
	jmp	.L8142
.L8120:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L8116
.L16216:
	movzbl	2(%r14), %edx
	cmpb	$16, %dl
	je	.L8114
	movq	8(%r14), %rbp
	cmpw	$59, (%rbp)
	je	.L16221
.L8114:
	cmpl	$55, %eax
	jne	.L8117
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L8116
.L16221:
	movq	8(%rbp), %r10
	movq	%r10, 8(%r14)
	cmpq	$0, 16(%rbp)
	je	.L8116
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r14
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L8116
.L8113:
	cmpq	$0, 16(%r14)
	jne	.L8121
	movq	8(%r14), %r14
	jmp	.L8116
.L8121:
	movq	24(%r14), %rsi
	testq	%rsi, %rsi
	je	.L8122
	movq	%rsi, %r14
	jmp	.L8116
.L8122:
	movq	8(%r14), %rbp
	movzbl	2(%rbp), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L8116
.L8110:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L8106
.L16215:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L8104
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16222
.L8104:
	cmpl	$55, %eax
	jne	.L8107
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L8106
.L16222:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L8106
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L8106
.L8103:
	cmpq	$0, 16(%r12)
	jne	.L8111
	movq	8(%r12), %r12
	jmp	.L8106
.L8111:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L8112
	movq	%rsi, %r12
	jmp	.L8106
.L8112:
	movq	8(%r12), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L8106
.L8100:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L8096
.L16214:
	jne	.L8097
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L8096
.L8093:
	cmpq	$0, 16(%r13)
	jne	.L8101
	movq	8(%r13), %r13
	jmp	.L8096
.L8101:
	movq	24(%r13), %rdi
	testq	%rdi, %rdi
	je	.L8102
	movq	%rdi, %r13
	jmp	.L8096
.L8102:
	movq	8(%r13), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L8096
.L16213:
	xorl	%eax, %eax
	movq	%rsi, %rdi
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, 1376(%rsp)
	je	.L16223
.L7839:
	movl	$8, %edi
	call	size_int
	movl	$57, %edi
	movq	3784(%rsp), %rsi
	movq	%rax, %rdx
	movq	8(%rsi), %r9
	movq	32(%r9), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	3784(%rsp), %r11
	movq	%rax, %r15
	movl	32(%r11), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%r15, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movq	3784(%rsp), %rcx
	movq	$0, 1328(%rsp)
	movq	%rax, 1352(%rsp)
	movq	%rax, %r15
	movq	8(%rcx), %rbp
	movl	48(%rbp), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r13)
	movl	%eax, 1348(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r13, 1360(%rsp)
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L7965
	cmpl	$55, %eax
	je	.L16224
	cmpl	$63, %eax
	je	.L7972
	cmpl	$66, %eax
	je	.L7972
.L7968:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L7975
	cmpl	$55, %eax
	je	.L16225
.L7979:
	cmpl	$63, %eax
	je	.L7982
	cmpl	$66, %eax
	je	.L7982
.L7978:
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L7985
	cmpl	$55, %eax
	je	.L16226
.L7989:
	cmpl	$63, %eax
	je	.L7992
	cmpl	$66, %eax
	je	.L7992
.L7988:
	movq	1360(%rsp), %rax
	cmpw	$55, (%rax)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 1352(%rsp)
	je	.L15283
	movq	1352(%rsp), %rax
	cmpw	$46, (%rax)
	je	.L16227
.L7998:
	movl	1348(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 3736(%rsp)
	testl	%ebp, %ebp
	je	.L14335
.L8084:
	movslq	%ebp,%r8
	movq	%r8, %rax
	movq	%r8, 3728(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L8072
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L8076
	movq	1352(%rsp), %r14
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r14)
	ja	.L8072
.L8076:
	movslq	%edx,%r10
	leaq	(%r10,%r10,4), %r14
	movq	%r10, 3720(%rsp)
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16228
.L8077:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16229
.L8078:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L8079
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	3736(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L8072
.L8079:
	call	get_last_insn
	movl	$1, %edx
	movq	1352(%rsp), %rsi
	movq	%rax, 3712(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16230
.L8080:
	movq	3720(%rsp), %rbp
	movq	1360(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	3736(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14959
	movq	3712(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L8072:
	movq	3728(%rsp), %rcx
	movl	mode_wider_mode(,%rcx,4), %ebp
	testl	%ebp, %ebp
	jne	.L8084
.L14335:
	movq	1352(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movq	1360(%rsp), %r11
	movq	8(%r12), %rbx
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	movl	$3, %ecx
	xorl	%eax, %eax
	movq	%rbx, (%rsp)
	movq	8(%r11), %r8
	call	emit_library_call
.L8082:
	cmpw	$46, (%r15)
	je	.L16231
	movq	8(%r13), %rsi
	movl	$4, %edi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movl	$4, %edi
	movq	%r15, %rcx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	1376(%rsp), %rdx
	movl	$4, %edi
	movq	%r15, %rcx
	movq	%rax, %rbp
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 1328(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L8086:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L8087
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%rbp, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L8087:
	cmpq	$0, 1328(%rsp)
	je	.L5367
	movq	1328(%rsp), %rdi
	call	emit_label
	jmp	.L5367
.L16231:
	movq	3784(%rsp), %r15
	movq	8(%r13), %rdi
	movl	32(%r15), %esi
	call	plus_constant_wide
	movq	1376(%rsp), %rdi
	movq	3784(%rsp), %r13
	movq	%rax, %rbp
	movl	32(%r13), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L8086
.L14959:
	call	emit_insn
	jmp	.L8082
.L16230:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L8080
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L8080
.L16229:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L8072
	jmp	.L8078
.L16228:
	xorl	%eax, %eax
	movq	1360(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L8072
	jmp	.L8077
.L16227:
	movl	8(%rax), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1348(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1348(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L8012:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14326
.L8008:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L8008
.L14326:
	testl	%ecx, %ecx
	je	.L8001
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L8010
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L8010
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L8010:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L8012
.L8001:
	decl	%r9d
	jg	.L7998
	movq	1360(%rsp), %rdx
	movq	8(%r12), %rdi
	xorl	%ecx, %ecx
	movl	%r10d, %r14d
	movq	8(%rdx), %rbx
	movq	%r12, 6248(%rsp)
	movq	%rdx, 6224(%rsp)
	movl	$0, 6276(%rsp)
	movq	%rdi, 6256(%rsp)
	movl	$9, 1344(%rsp)
	movq	%rbx, 6232(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L8015
	cmpw	$88, %dx
	je	.L8015
	cmpw	$87, %dx
	je	.L8015
.L8014:
	movl	%ecx, 6240(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L8017
	cmpw	$88, %dx
	je	.L8017
	cmpw	$87, %dx
	je	.L8017
.L8016:
	movl	%ecx, 6264(%rsp)
	movl	$0, 6268(%rsp)
	movl	$0, 6244(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L8019
	cmpw	$87, %ax
	je	.L8019
.L8018:
	testl	%edx, %edx
	movl	%edx, 6280(%rsp)
	je	.L8020
	movl	%r10d, 6276(%rsp)
.L8020:
	movl	%r10d, 6272(%rsp)
	movl	6264(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L8022
	movl	6240(%rsp), %eax
	testl	%eax, %eax
	jne	.L8021
.L8022:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1348(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1348(%rsp), %ebp
.L8036:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14329
.L8032:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L8032
.L14329:
	testl	%ecx, %ecx
	je	.L8025
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L8034
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L8034
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L8034:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L8036
.L8025:
	cmpl	$2, %r9d
	jle	.L8021
	testl	%r10d, %r10d
	jne	.L8038
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L8039
	cmpw	$46, %dx
	je	.L8039
	cmpw	$47, %dx
	je	.L8039
	cmpw	$49, %dx
	je	.L8039
	cmpw	$113, %dx
	je	.L8039
.L8038:
	movl	6240(%rsp), %eax
	testl	%eax, %eax
	jne	.L8021
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L8041
	cmpw	$46, %dx
	je	.L8041
	cmpw	$47, %dx
	je	.L8041
	cmpw	$49, %dx
	je	.L8041
	cmpw	$113, %dx
	je	.L8041
.L8021:
	cmpl	$8, 1348(%rsp)
	movl	$8, %eax
	cmovl	1348(%rsp), %eax
	cmpl	$1, 1344(%rsp)
	movl	%eax, 1348(%rsp)
	jle	.L8044
.L8066:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14332
.L8051:
	movslq	%edx,%rbx
	movl	1344(%rsp), %r11d
	salq	$2, %rbx
	cmpl	%r11d, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L8051
.L14332:
	testl	%r12d, %r12d
	je	.L8044
	movslq	%r12d,%r14
	movq	%r14, %r9
	salq	$4, %r9
	addq	mov_optab(%rip), %r9
	movl	8(%r9), %edx
	cmpl	$210, %edx
	je	.L8053
	movl	mode_size(,%r14,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1348(%rsp)
	jl	.L8053
	movslq	%edx,%rdi
	cmpl	%ebp, 6272(%rsp)
	leaq	6224(%rsp), %rbx
	movq	insn_gen_function(,%rdi,8), %rsi
	movq	%rsi, 3744(%rsp)
	jl	.L8053
	movl	6280(%rsp), %edx
.L8064:
	testl	%edx, %edx
	je	.L8058
	subl	%ebp, 52(%rbx)
.L8058:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L8059
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15144:
	movq	%rax, 1336(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L8061
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L8062:
	movq	%rax, %rsi
	movq	1336(%rsp), %rdi
	xorl	%eax, %eax
	call	*3744(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L8063
	addl	%ebp, 52(%rbx)
.L8063:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L8064
.L8053:
	movl	mode_size(,%r14,4), %r12d
	movl	%r12d, 1344(%rsp)
	decl	%r12d
	jg	.L8066
.L8044:
	movl	6272(%rsp), %edx
	testl	%edx, %edx
	je	.L8082
	jmp	.L15283
.L8061:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L8062
.L8059:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15144
.L8041:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6232(%rsp)
	jmp	.L8021
.L8039:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6256(%rsp)
	jmp	.L8038
.L8019:
	movl	$1, %edx
	jmp	.L8018
.L8017:
	movl	$1, %ecx
	jmp	.L8016
.L8015:
	movl	$1, %ecx
	jmp	.L8014
.L7992:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L7988
.L16226:
	movzbl	2(%r15), %edx
	cmpb	$16, %dl
	je	.L7986
	movq	8(%r15), %rbp
	cmpw	$59, (%rbp)
	je	.L16232
.L7986:
	cmpl	$55, %eax
	jne	.L7989
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L7988
.L16232:
	movq	8(%rbp), %rcx
	movq	%rcx, 8(%r15)
	cmpq	$0, 16(%rbp)
	je	.L7988
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r15, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r14, 1352(%rsp)
	jmp	.L7988
.L7985:
	cmpq	$0, 16(%r15)
	jne	.L7993
	movq	8(%r15), %rbp
	movq	%rbp, 1352(%rsp)
	jmp	.L7988
.L7993:
	movq	24(%r15), %r11
	testq	%r11, %r11
	movq	%r11, 1352(%rsp)
	jne	.L7988
	movq	8(%r15), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r9
	movq	%r9, 1352(%rsp)
	jmp	.L7988
.L7982:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L7978
.L16225:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L7976
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16233
.L7976:
	cmpl	$55, %eax
	jne	.L7979
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L7978
.L16233:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L7978
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L7978
.L7975:
	cmpq	$0, 16(%r12)
	jne	.L7983
	movq	8(%r12), %r12
	jmp	.L7978
.L7983:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L7984
	movq	%rsi, %r12
	jmp	.L7978
.L7984:
	movq	8(%r12), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L7978
.L7972:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L7968
.L16224:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L7968
.L7965:
	cmpq	$0, 16(%r13)
	jne	.L7973
	movq	8(%r13), %rax
	movq	%rax, 1360(%rsp)
	jmp	.L7968
.L7973:
	movq	24(%r13), %rbx
	testq	%rbx, %rbx
	movq	%rbx, 1360(%rsp)
	jne	.L7968
	movq	8(%r13), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r10
	movq	%r10, 1360(%rsp)
	jmp	.L7968
.L16223:
	movq	3784(%rsp), %rdi
	movq	1376(%rsp), %rbp
	movl	32(%rdi), %eax
	cmpl	%eax, 8(%rbp)
	jge	.L7839
	movq	8(%rdi), %r14
	movl	48(%r14), %r15d
	shrl	$3, %r15d
	cmpb	$16, 2(%r13)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L7842
	cmpl	$55, %eax
	je	.L16234
.L7846:
	cmpl	$63, %eax
	je	.L7849
	cmpl	$66, %eax
	je	.L7849
.L7845:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L7852
	cmpl	$55, %eax
	je	.L16235
.L7856:
	cmpl	$63, %eax
	je	.L7859
	cmpl	$66, %eax
	je	.L7859
.L7855:
	movq	1376(%rsp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$59, %eax
	je	.L7862
	cmpl	$55, %eax
	je	.L16236
.L7866:
	cmpl	$63, %eax
	je	.L7869
	cmpl	$66, %eax
	je	.L7869
.L7865:
	cmpw	$55, (%r13)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 1376(%rsp)
	je	.L15283
	movq	1376(%rsp), %rbx
	cmpw	$46, (%rbx)
	je	.L16237
.L7875:
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	movl	%r15d, %edx
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 3768(%rsp)
	testl	%ebp, %ebp
	je	.L14323
.L7961:
	movslq	%ebp,%r15
	movq	%r15, %rax
	movq	%r15, 3760(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L7949
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L7953
	movq	1376(%rsp), %r14
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r14)
	ja	.L7949
.L7953:
	movslq	%edx,%r15
	leaq	(%r15,%r15,4), %r14
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16238
.L7954:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16239
.L7955:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L7956
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	3768(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L7949
.L7956:
	call	get_last_insn
	movl	$1, %edx
	movq	1376(%rsp), %rsi
	movq	%rax, 3752(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16240
.L7957:
	movq	%r13, %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	3768(%rsp), %rcx
	call	*insn_gen_function(,%r15,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14960
	movq	3752(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L7949:
	movq	3760(%rsp), %rdx
	movl	mode_wider_mode(,%rdx,4), %ebp
	testl	%ebp, %ebp
	jne	.L7961
.L14323:
	movq	1376(%rsp), %rsi
	movl	$4, %edi
	jmp	.L15146
.L16240:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L7957
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L7957
.L16239:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L7949
	jmp	.L7955
.L16238:
	xorl	%eax, %eax
	movq	%r13, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L7949
	jmp	.L7954
.L16237:
	movl	8(%rbx), %r10d
	xorl	%r9d, %r9d
	movl	$9, %r8d
	movl	$8, %ebx
	cmpl	$8, %r15d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	%r15d, %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L7889:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14314
.L7885:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L7885
.L14314:
	testl	%ecx, %ecx
	je	.L7878
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L7887
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L7887
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L7887:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L7889
.L7878:
	decl	%r9d
	jg	.L7875
	movq	8(%r13), %rbx
	movq	8(%r12), %rdi
	xorl	%ecx, %ecx
	movq	%r12, 6312(%rsp)
	movl	$0, 6340(%rsp)
	movq	%r13, 6288(%rsp)
	movl	%r10d, %r14d
	movl	$9, 1372(%rsp)
	movq	%rbx, 6296(%rsp)
	movq	%rdi, 6320(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L7892
	cmpw	$88, %dx
	je	.L7892
	cmpw	$87, %dx
	je	.L7892
.L7891:
	movl	%ecx, 6304(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r13d
	cmpw	$1, %r13w
	jbe	.L7894
	cmpw	$88, %dx
	je	.L7894
	cmpw	$87, %dx
	je	.L7894
.L7893:
	movl	%ecx, 6328(%rsp)
	movl	$0, 6332(%rsp)
	movl	$0, 6308(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L7896
	cmpw	$87, %ax
	je	.L7896
.L7895:
	testl	%edx, %edx
	movl	%edx, 6344(%rsp)
	je	.L7897
	movl	%r10d, 6340(%rsp)
.L7897:
	movl	%r10d, 6336(%rsp)
	movl	6328(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L7899
	movl	6304(%rsp), %ebp
	testl	%ebp, %ebp
	jne	.L7898
.L7899:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, %r15d
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	%r15d, %ebp
.L7913:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14317
.L7909:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L7909
.L14317:
	testl	%ecx, %ecx
	je	.L7902
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L7911
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L7911
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L7911:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L7913
.L7902:
	cmpl	$2, %r9d
	jle	.L7898
	testl	%r10d, %r10d
	jne	.L7915
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L7916
	cmpw	$46, %dx
	je	.L7916
	cmpw	$47, %dx
	je	.L7916
	cmpw	$49, %dx
	je	.L7916
	cmpw	$113, %dx
	je	.L7916
.L7915:
	movl	6304(%rsp), %eax
	testl	%eax, %eax
	jne	.L7898
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L7918
	cmpw	$46, %dx
	je	.L7918
	cmpw	$47, %dx
	je	.L7918
	cmpw	$49, %dx
	je	.L7918
	cmpw	$113, %dx
	je	.L7918
.L7898:
	cmpl	$8, %r15d
	movl	$8, %eax
	cmovge	%eax, %r15d
	cmpl	$1, 1372(%rsp)
	jle	.L7921
.L7943:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14320
.L7928:
	movslq	%edx,%rsi
	movl	1372(%rsp), %r9d
	salq	$2, %rsi
	cmpl	%r9d, mode_size(%rsi)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rsi), %edx
	testl	%edx, %edx
	jne	.L7928
.L14320:
	testl	%r12d, %r12d
	je	.L7921
	movslq	%r12d,%r13
	movq	%r13, %rbx
	salq	$4, %rbx
	addq	mov_optab(%rip), %rbx
	movl	8(%rbx), %edx
	cmpl	$210, %edx
	je	.L7930
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, %r15d
	jl	.L7930
	movslq	%edx,%r8
	cmpl	%ebp, 6336(%rsp)
	leaq	6288(%rsp), %rbx
	movq	insn_gen_function(,%r8,8), %r10
	movq	%r10, 3776(%rsp)
	jl	.L7930
	movl	6344(%rsp), %edx
.L7941:
	testl	%edx, %edx
	je	.L7935
	subl	%ebp, 52(%rbx)
.L7935:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L7936
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15143:
	movq	%rax, %r14
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L7938
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L7939:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*3776(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L7940
	addl	%ebp, 52(%rbx)
.L7940:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L7941
.L7930:
	movl	mode_size(,%r13,4), %edi
	movl	%edi, 1372(%rsp)
	decl	%edi
	jg	.L7943
.L7921:
	movl	6336(%rsp), %eax
	testl	%eax, %eax
	jmp	.L15391
.L7938:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L7939
.L7936:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15143
.L7918:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6296(%rsp)
	jmp	.L7898
.L7916:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6320(%rsp)
	jmp	.L7915
.L7896:
	movl	$1, %edx
	jmp	.L7895
.L7894:
	movl	$1, %ecx
	jmp	.L7893
.L7892:
	movl	$1, %ecx
	jmp	.L7891
.L7869:
	movq	1376(%rsp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	1376(%rsp), %r8
	movq	%rax, 8(%r8)
	movq	1376(%rsp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	1376(%rsp), %rcx
	movq	%rax, 16(%rcx)
	jmp	.L7865
.L16236:
	movq	%rdx, %rcx
	movzbl	2(%rdx), %edx
	cmpb	$16, %dl
	je	.L7863
	movq	8(%rcx), %rbp
	cmpw	$59, (%rbp)
	je	.L16241
.L7863:
	cmpl	$55, %eax
	jne	.L7866
	movq	1376(%rsp), %rbp
	xorl	%esi, %esi
	movq	8(%rbp), %rdi
	call	protect_from_queue
	movq	%rax, 8(%rbp)
	jmp	.L7865
.L16241:
	movq	8(%rbp), %r10
	movq	%r10, 8(%rcx)
	cmpq	$0, 16(%rbp)
	je	.L7865
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	1376(%rsp), %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L15142:
	movq	%rbx, 1376(%rsp)
	jmp	.L7865
.L7862:
	movq	1376(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L7870
	movq	8(%rcx), %rbx
	jmp	.L15142
.L7870:
	movq	1376(%rsp), %r11
	movq	24(%r11), %rsi
	testq	%rsi, %rsi
	je	.L7871
	movq	%rsi, 1376(%rsp)
	jmp	.L7865
.L7871:
	movq	1376(%rsp), %r10
	movq	8(%r10), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	1376(%rsp), %r14
	movq	%rax, %rdi
	movq	8(%r14), %rsi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	1376(%rsp), %r9
	movq	%rax, %rdi
	movq	16(%r9), %rsi
	call	emit_insn_before
	movq	1376(%rsp), %rsi
	movq	24(%rsi), %rdi
	movq	%rdi, 1376(%rsp)
	jmp	.L7865
.L7859:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L7855
.L16235:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L7853
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16242
.L7853:
	cmpl	$55, %eax
	jne	.L7856
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L7855
.L16242:
	movq	8(%rbp), %r9
	movq	%r9, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L7855
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L7855
.L7852:
	cmpq	$0, 16(%r12)
	jne	.L7860
	movq	8(%r12), %r12
	jmp	.L7855
.L7860:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L7861
	movq	%rsi, %r12
	jmp	.L7855
.L7861:
	movq	8(%r12), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L7855
.L7849:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L7845
.L16234:
	jne	.L7846
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L7845
.L7842:
	cmpq	$0, 16(%r13)
	jne	.L7850
	movq	8(%r13), %r13
	jmp	.L7845
.L7850:
	movq	24(%r13), %rdi
	testq	%rdi, %rdi
	je	.L7851
	movq	%rdi, %r13
	jmp	.L7845
.L7851:
	movq	8(%r13), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L7845
	.p2align 6,,7
.L7831:
	movq	56(%rsp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	movq	56(%rsp), %rsi
	movq	%rax, 8(%rsi)
	xorl	%esi, %esi
	movq	56(%rsp), %r14
	movq	16(%r14), %rdi
	call	protect_from_queue
	movq	56(%rsp), %r11
	movq	%rax, 16(%r11)
	jmp	.L7827
.L16211:
	jne	.L7828
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbx)
	jmp	.L7827
	.p2align 6,,7
.L7824:
	movq	56(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L7832
	movq	8(%rcx), %r13
	jmp	.L7827
.L7832:
	movq	56(%rsp), %r9
	movq	24(%r9), %r15
	testq	%r15, %r15
	movq	%r15, %r13
	jne	.L7827
	movq	56(%rsp), %r13
	movq	8(%r13), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	56(%rsp), %rcx
	movq	%rax, %rdi
	movq	8(%rcx), %rsi
	movq	%rax, 24(%rcx)
	call	gen_move_insn
	movq	56(%rsp), %r10
	movq	%rax, %rdi
	movq	16(%r10), %rsi
	call	emit_insn_before
	movq	56(%rsp), %rbx
	movq	24(%rbx), %r13
	jmp	.L7827
	.p2align 6,,7
.L16210:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	3784(%rsp), %rdi
	movq	56(%rsp), %r10
	movq	%rax, %rsi
	movzbl	2(%r10), %edx
	jmp	.L15141
.L7803:
	movq	56(%rsp), %r8
	movl	(%r8), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L16243
	movq	56(%rsp), %r12
	movq	3784(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movzbl	2(%r12), %edx
	movq	%r12, %rsi
	call	expand_expr
	movq	56(%rsp), %rdx
	movq	%rax, %r12
	cmpw	$51, (%rdx)
	je	.L16244
.L7821:
	movzwl	(%r12), %edx
	leal	-56(%rdx), %edi
	cmpw	$1, %di
	jbe	.L7822
	cmpw	$46, %dx
	je	.L7822
	cmpw	$47, %dx
	je	.L7822
	cmpw	$49, %dx
	je	.L7822
	cmpw	$113, %dx
	jne	.L7768
	jmp	.L7822
.L16244:
	cmpl	$63, 8(%rdx)
	jle	.L7768
	jmp	.L7821
.L16243:
	movq	3784(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	56(%rsp), %rbp
	movq	%rax, %rsi
	movzbl	3(%rbp), %edx
	movq	8(%rbp), %rdi
	shrb	$2, %dl
	andl	$1, %edx
	jmp	.L15148
.L7812:
	movl	$1, %ebx
	jmp	.L7806
.L7804:
	xorl	%ebx, %ebx
	jmp	.L7806
.L7810:
	movq	56(%rsp), %r15
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	movq	8(%r15), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L7812
	movq	56(%rsp), %r9
	xorl	%eax, %eax
	movq	16(%r9), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L7806
	jmp	.L7812
.L16209:
	movzbl	2(%rdx), %eax
	cmpb	$16, %al
	je	.L7796
	movl	cse_not_expected(%rip), %r11d
	movq	3784(%rsp), %rdi
	xorl	%esi, %esi
	testl	%r11d, %r11d
	cmove	%rdx, %rsi
	xorl	%ecx, %ecx
	movzbl	%al, %edx
	xorl	%eax, %eax
	call	expand_expr
	movq	%rax, %r12
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L7822
	testb	%al, %al
	je	.L7822
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L15353
.L16208:
	movq	56(%rsp), %r12
	cmpb	$16, 2(%r12)
	jne	.L7769
	call	gen_label_rtx
	movq	%rax, %rbp
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r12
	testq	%rbx, %rbx
	jne	.L7773
.L14307:
	movq	56(%rsp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$59, %eax
	je	.L7775
	cmpl	$55, %eax
	je	.L16245
.L7779:
	cmpl	$63, %eax
	je	.L7782
	cmpl	$66, %eax
	je	.L7782
.L7778:
	movq	3784(%rsp), %r8
	xorl	%eax, %eax
	movq	%rbp, %rsi
	incl	inhibit_defer_pop(%rip)
	movq	32(%r8), %rdi
	call	jumpifnot
	movq	3784(%rsp), %r10
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%r13, %rsi
	movq	40(%r10), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L7788
.L14309:
	movq	%r12, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%rbp, %rdi
	call	emit_label
	xorl	%eax, %eax
	xorl	%edx, %edx
	movq	3784(%rsp), %rbp
	movq	%r13, %rsi
	movq	48(%rbp), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L7793
.L14311:
	movq	%r12, %rdi
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L5367
.L7793:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdx
	movq	%rax, 16(%rbx)
	testq	%rdx, %rdx
	movq	%rdx, pending_chain(%rip)
	movq	%rdx, %rbx
	jne	.L7793
	jmp	.L14311
.L7788:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdi
	movq	%rax, 16(%rbx)
	testq	%rdi, %rdi
	movq	%rdi, pending_chain(%rip)
	movq	%rdi, %rbx
	jne	.L7788
	jmp	.L14309
.L7782:
	movq	56(%rsp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L7778
.L16245:
	jne	.L7779
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	56(%rsp), %r11
	movq	%rax, 8(%r11)
	jmp	.L7778
.L7775:
	movq	56(%rsp), %rsi
	cmpq	$0, 16(%rsi)
	jne	.L7783
	movq	8(%rsi), %r13
	jmp	.L7778
.L7783:
	movq	56(%rsp), %r13
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	movq	%rsi, %r13
	jne	.L7778
	movq	56(%rsp), %rcx
	movq	8(%rcx), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	56(%rsp), %rbx
	movq	%rax, %rdi
	movq	8(%rbx), %rsi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	56(%rsp), %r15
	movq	%rax, %rdi
	movq	16(%r15), %rsi
	call	emit_insn_before
	movq	24(%r15), %r13
	jmp	.L7778
	.p2align 6,,7
.L7773:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdx
	movq	%rax, 16(%rbx)
	testq	%rdx, %rdx
	movq	%rdx, pending_chain(%rip)
	movq	%rdx, %rbx
	jne	.L7773
	jmp	.L14307
.L16207:
	movq	32(%r15), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L7765
.L14305:
	movq	3784(%rsp), %rax
	movq	56(%rsp), %rsi
	xorl	%edx, %edx
	movq	40(%rax), %rdi
	xorl	%eax, %eax
	call	store_expr
	jmp	.L5367
.L7765:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r15
	movq	%rax, 16(%rbx)
	testq	%r15, %r15
	movq	%r15, pending_chain(%rip)
	movq	%r15, %rbx
	jne	.L7765
	jmp	.L14305
	.p2align 6,,7
.L7760:
	movl	5408(%rsp), %r13d
	xorl	%esi, %esi
	leaq	48(%r15), %rax
	testl	%r13d, %r13d
	je	.L8219
	movq	const0_rtx(%rip), %rsi
.L8219:
	movq	(%rax), %rdi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	jmp	.L5367
.L7758:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r8
	movq	%rax, 16(%rbx)
	testq	%r8, %r8
	movq	%r8, pending_chain(%rip)
	movq	%r8, %rbx
	jne	.L7758
	jmp	.L14303
.L16206:
	movl	$.LC1, %edi
	xorl	%eax, %eax
	call	sorry
	movq	$0, cleanups_this_call(%rip)
	jmp	.L7754
.L7369:
	movq	%r13, %rdi
	movq	%r12, %rsi
.L15140:
	xorl	%eax, %eax
	call	convert_move
	jmp	.L7749
.L7368:
	cmpb	$16, %al
	je	.L16246
.L7624:
	movq	%r13, %rdi
	movq	%r12, %rsi
	jmp	.L15139
.L16246:
	movq	3928(%rsp), %rsi
	cmpb	$28, 16(%rsi)
	je	.L16247
	cmpb	$16, %al
	jne	.L7624
	movq	3928(%rsp), %rdi
	xorl	%eax, %eax
	call	expr_size
	movq	3928(%rsp), %r8
	movq	%rax, %r14
	movq	8(%r8), %r11
	movl	48(%r11), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r13)
	movl	%eax, 1388(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L7627
	cmpl	$55, %eax
	je	.L16248
.L7631:
	cmpl	$63, %eax
	je	.L7634
	cmpl	$66, %eax
	je	.L7634
.L7630:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L7637
	cmpl	$55, %eax
	je	.L16249
.L7641:
	cmpl	$63, %eax
	je	.L7644
	cmpl	$66, %eax
	je	.L7644
.L7640:
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L7647
	cmpl	$55, %eax
	je	.L16250
.L7651:
	cmpl	$63, %eax
	je	.L7654
	cmpl	$66, %eax
	je	.L7654
.L7650:
	cmpw	$55, (%r13)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	testq	%r14, %r14
	je	.L15283
	cmpw	$46, (%r14)
	je	.L16251
.L7660:
	movl	1388(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 3824(%rsp)
	testl	%ebp, %ebp
	je	.L14301
.L7746:
	movslq	%ebp,%rdx
	movq	%rdx, %rax
	movq	%rdx, 3816(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L7734
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L7738
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r14)
	ja	.L7734
.L7738:
	movslq	%edx,%rsi
	leaq	(%rsi,%rsi,4), %r11
	movq	%rsi, 3808(%rsp)
	salq	$4, %r11
	movq	insn_operand_predicate(%r11), %rdx
	movq	%r11, 3800(%rsp)
	testq	%rdx, %rdx
	jne	.L16252
.L7739:
	movq	3800(%rsp), %rbx
	movq	insn_operand_predicate+8(%rbx), %rdx
	testq	%rdx, %rdx
	jne	.L16253
.L7740:
	movq	3800(%rsp), %r9
	movq	insn_operand_predicate+24(%r9), %rdx
	testq	%rdx, %rdx
	je	.L7741
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	3824(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L7734
.L7741:
	call	get_last_insn
	movl	$1, %edx
	movq	%r14, %rsi
	movq	%rax, 3792(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	3800(%rsp), %rcx
	movq	%rax, %rbx
	movq	insn_operand_predicate+16(%rcx), %rdx
	testq	%rdx, %rdx
	jne	.L16254
.L7742:
	movq	3808(%rsp), %rbp
	movq	%r13, %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	3824(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14957
	movq	3792(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L7734:
	movq	3816(%rsp), %r10
	movl	mode_wider_mode(,%r10,4), %ebp
	testl	%ebp, %ebp
	jne	.L7746
.L14301:
	movl	$4, %edi
	movq	%r14, %rsi
.L15138:
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%r12), %r14
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%r14, (%rsp)
	movq	8(%r13), %r8
	call	emit_library_call
	jmp	.L7749
.L14957:
	call	emit_insn
	jmp	.L7749
.L16254:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L7742
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L7742
.L16253:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L7734
	jmp	.L7740
.L16252:
	xorl	%eax, %eax
	movq	%r13, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L7734
	jmp	.L7739
.L16251:
	movl	8(%r14), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1388(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1388(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L7674:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14292
.L7670:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L7670
.L14292:
	testl	%ecx, %ecx
	je	.L7663
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L7672
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L7672
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L7672:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L7674
.L7663:
	decl	%r9d
	jg	.L7660
	movq	8(%r13), %rbx
	movq	8(%r12), %rdi
	xorl	%ecx, %ecx
	movq	%r12, 6376(%rsp)
	movl	$0, 6404(%rsp)
	movq	%r13, 6352(%rsp)
	movl	%r10d, %r14d
	movl	$9, 1384(%rsp)
	movq	%rbx, 6360(%rsp)
	movq	%rdi, 6384(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L7677
	cmpw	$88, %dx
	je	.L7677
	cmpw	$87, %dx
	je	.L7677
.L7676:
	movl	%ecx, 6368(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r13d
	cmpw	$1, %r13w
	jbe	.L7679
	cmpw	$88, %dx
	je	.L7679
	cmpw	$87, %dx
	je	.L7679
.L7678:
	movl	%ecx, 6392(%rsp)
	movl	$0, 6396(%rsp)
	movl	$0, 6372(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L7681
	cmpw	$87, %ax
	je	.L7681
.L7680:
	testl	%edx, %edx
	movl	%edx, 6408(%rsp)
	je	.L7682
	movl	%r10d, 6404(%rsp)
.L7682:
	movl	%r10d, 6400(%rsp)
	movl	6392(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L7684
	movl	6368(%rsp), %eax
	testl	%eax, %eax
	jne	.L7683
.L7684:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1388(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1388(%rsp), %ebp
.L7698:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14295
.L7694:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L7694
.L14295:
	testl	%ecx, %ecx
	je	.L7687
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L7696
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L7696
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L7696:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L7698
.L7687:
	cmpl	$2, %r9d
	jle	.L7683
	testl	%r10d, %r10d
	jne	.L7700
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L7701
	cmpw	$46, %dx
	je	.L7701
	cmpw	$47, %dx
	je	.L7701
	cmpw	$49, %dx
	je	.L7701
	cmpw	$113, %dx
	je	.L7701
.L7700:
	movl	6368(%rsp), %r11d
	testl	%r11d, %r11d
	jne	.L7683
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L7703
	cmpw	$46, %dx
	je	.L7703
	cmpw	$47, %dx
	je	.L7703
	cmpw	$49, %dx
	je	.L7703
	cmpw	$113, %dx
	je	.L7703
.L7683:
	cmpl	$8, 1388(%rsp)
	movl	$8, %eax
	cmovl	1388(%rsp), %eax
	cmpl	$1, 1384(%rsp)
	movl	%eax, 1388(%rsp)
	jle	.L7706
.L7728:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14298
.L7713:
	movslq	%edx,%rbx
	movl	1384(%rsp), %r9d
	salq	$2, %rbx
	cmpl	%r9d, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L7713
.L14298:
	testl	%r12d, %r12d
	je	.L7706
	movslq	%r12d,%r13
	movq	%r13, %rcx
	salq	$4, %rcx
	addq	mov_optab(%rip), %rcx
	movl	8(%rcx), %edx
	cmpl	$210, %edx
	je	.L7715
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1388(%rsp)
	jl	.L7715
	movslq	%edx,%r8
	cmpl	%ebp, 6400(%rsp)
	leaq	6352(%rsp), %rbx
	movq	insn_gen_function(,%r8,8), %r10
	movq	%r10, 3832(%rsp)
	jl	.L7715
	movl	6408(%rsp), %edx
.L7726:
	testl	%edx, %edx
	je	.L7720
	subl	%ebp, 52(%rbx)
.L7720:
	movl	16(%rbx), %edi
	testl	%edi, %edi
	je	.L7721
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15137:
	movq	%rax, %r14
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L7723
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L7724:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*3832(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L7725
	addl	%ebp, 52(%rbx)
.L7725:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L7726
.L7715:
	movl	mode_size(,%r13,4), %r12d
	movl	%r12d, 1384(%rsp)
	decl	%r12d
	jg	.L7728
.L7706:
	movl	6400(%rsp), %r13d
	testl	%r13d, %r13d
.L15390:
	je	.L7749
	jmp	.L15283
.L7723:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L7724
.L7721:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15137
.L7703:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6360(%rsp)
	jmp	.L7683
.L7701:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6384(%rsp)
	jmp	.L7700
.L7681:
	movl	$1, %edx
	jmp	.L7680
.L7679:
	movl	$1, %ecx
	jmp	.L7678
.L7677:
	movl	$1, %ecx
	jmp	.L7676
.L7654:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L7650
.L16250:
	movzbl	2(%r14), %edx
	cmpb	$16, %dl
	je	.L7648
	movq	8(%r14), %rbp
	cmpw	$59, (%rbp)
	je	.L16255
.L7648:
	cmpl	$55, %eax
	jne	.L7651
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L7650
.L16255:
	movq	8(%rbp), %r10
	movq	%r10, 8(%r14)
	cmpq	$0, 16(%rbp)
	je	.L7650
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r14
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L7650
.L7647:
	cmpq	$0, 16(%r14)
	jne	.L7655
	movq	8(%r14), %r14
	jmp	.L7650
.L7655:
	movq	24(%r14), %rsi
	testq	%rsi, %rsi
	je	.L7656
	movq	%rsi, %r14
	jmp	.L7650
.L7656:
	movq	8(%r14), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L7650
.L7644:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L7640
.L16249:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L7638
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16256
.L7638:
	cmpl	$55, %eax
	jne	.L7641
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L7640
.L16256:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L7640
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L7640
.L7637:
	cmpq	$0, 16(%r12)
	jne	.L7645
	movq	8(%r12), %r12
	jmp	.L7640
.L7645:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L7646
	movq	%rsi, %r12
	jmp	.L7640
.L7646:
	movq	8(%r12), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L7640
.L7634:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L7630
.L16248:
	jne	.L7631
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L7630
.L7627:
	cmpq	$0, 16(%r13)
	jne	.L7635
	movq	8(%r13), %r13
	jmp	.L7630
.L7635:
	movq	24(%r13), %rdi
	testq	%rdi, %rdi
	je	.L7636
	movq	%rdi, %r13
	jmp	.L7630
.L7636:
	movq	8(%r13), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L7630
.L16247:
	xorl	%eax, %eax
	movq	%rsi, %rdi
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, 1440(%rsp)
	je	.L16257
.L7373:
	movl	$8, %edi
	call	size_int
	movq	3928(%rsp), %rdi
	movq	%rax, %rdx
	movq	8(%rdi), %r8
	movl	$57, %edi
	movq	32(%r8), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	3928(%rsp), %r11
	movq	%rax, %r14
	movl	32(%r11), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%r14, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movq	3928(%rsp), %r9
	movq	$0, 1392(%rsp)
	movq	%rax, 3880(%rsp)
	movq	%rax, 1416(%rsp)
	movq	8(%r9), %rbx
	movl	48(%rbx), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r13)
	movl	%eax, 1412(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r13, 1424(%rsp)
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L7499
	cmpl	$55, %eax
	je	.L16258
	cmpl	$63, %eax
	je	.L7506
	cmpl	$66, %eax
	je	.L7506
.L7502:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L7509
	cmpl	$55, %eax
	je	.L16259
.L7513:
	cmpl	$63, %eax
	je	.L7516
	cmpl	$66, %eax
	je	.L7516
.L7512:
	movq	3880(%rsp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$59, %eax
	je	.L7519
	cmpl	$55, %eax
	je	.L16260
.L7523:
	cmpl	$63, %eax
	je	.L7526
	cmpl	$66, %eax
	je	.L7526
.L7522:
	movq	1424(%rsp), %r11
	cmpw	$55, (%r11)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 1416(%rsp)
	je	.L15283
	movq	1416(%rsp), %rsi
	cmpw	$46, (%rsi)
	je	.L16261
.L7532:
	movl	1412(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 3864(%rsp)
	testl	%ebp, %ebp
	je	.L14289
.L7618:
	movslq	%ebp,%rcx
	movq	%rcx, %rax
	movq	%rcx, 3856(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L7606
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L7610
	movq	1416(%rsp), %r9
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r9)
	ja	.L7606
.L7610:
	movslq	%edx,%r10
	leaq	(%r10,%r10,4), %r14
	movq	%r10, 3848(%rsp)
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16262
.L7611:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16263
.L7612:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L7613
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	3864(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L7606
.L7613:
	call	get_last_insn
	movl	$1, %edx
	movq	1416(%rsp), %rsi
	movq	%rax, 3840(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16264
.L7614:
	movq	3848(%rsp), %r14
	movq	1424(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	3864(%rsp), %rcx
	call	*insn_gen_function(,%r14,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14956
	movq	3840(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L7606:
	movq	3856(%rsp), %rdx
	movl	mode_wider_mode(,%rdx,4), %ebp
	testl	%ebp, %ebp
	jne	.L7618
.L14289:
	movq	1416(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%r12), %rsi
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%edx, %edx
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	movq	1424(%rsp), %rax
	movq	%rsi, (%rsp)
	xorl	%esi, %esi
	movq	8(%rax), %r8
	xorl	%eax, %eax
	call	emit_library_call
.L7616:
	movq	3880(%rsp), %rbx
	cmpw	$46, (%rbx)
	je	.L16265
	movq	8(%r13), %rsi
	movl	$4, %edi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	3880(%rsp), %rcx
	movq	%rax, %rdx
	movl	$4, %edi
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	1440(%rsp), %rdx
	movl	$4, %edi
	movq	3880(%rsp), %rcx
	movq	%rax, %rbp
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 1392(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L7620:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L7621
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%rbp, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L7621:
	cmpq	$0, 1392(%rsp)
	je	.L7749
	movq	1392(%rsp), %rdi
	call	emit_label
	jmp	.L7749
.L16265:
	movq	3928(%rsp), %rbp
	movq	8(%r13), %rdi
	movl	32(%rbp), %esi
	call	plus_constant_wide
	movq	1440(%rsp), %rdi
	movq	3928(%rsp), %r13
	movq	%rax, %rbp
	movl	32(%r13), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L7620
.L14956:
	call	emit_insn
	jmp	.L7616
.L16264:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L7614
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L7614
.L16263:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L7606
	jmp	.L7612
.L16262:
	xorl	%eax, %eax
	movq	1424(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L7606
	jmp	.L7611
.L16261:
	movl	8(%rsi), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1412(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1412(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L7546:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14280
.L7542:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L7542
.L14280:
	testl	%ecx, %ecx
	je	.L7535
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L7544
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L7544
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L7544:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L7546
.L7535:
	decl	%r9d
	jg	.L7532
	movq	1424(%rsp), %rcx
	movq	8(%r12), %rdi
	movl	%r10d, %r14d
	movq	8(%rcx), %rbx
	movq	%r12, 6376(%rsp)
	movq	%rcx, 6352(%rsp)
	movl	$0, 6404(%rsp)
	movq	%rdi, 6384(%rsp)
	xorl	%ecx, %ecx
	movl	$9, 1408(%rsp)
	movq	%rbx, 6360(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L7549
	cmpw	$88, %dx
	je	.L7549
	cmpw	$87, %dx
	je	.L7549
.L7548:
	movl	%ecx, 6368(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L7551
	cmpw	$88, %dx
	je	.L7551
	cmpw	$87, %dx
	je	.L7551
.L7550:
	movl	%ecx, 6392(%rsp)
	movl	$0, 6396(%rsp)
	movl	$0, 6372(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L7553
	cmpw	$87, %ax
	je	.L7553
.L7552:
	testl	%edx, %edx
	movl	%edx, 6408(%rsp)
	je	.L7554
	movl	%r10d, 6404(%rsp)
.L7554:
	movl	%r10d, 6400(%rsp)
	movl	6392(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L7556
	movl	6368(%rsp), %eax
	testl	%eax, %eax
	jne	.L7555
.L7556:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1412(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1412(%rsp), %ebp
.L7570:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14283
.L7566:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L7566
.L14283:
	testl	%ecx, %ecx
	je	.L7559
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L7568
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L7568
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L7568:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L7570
.L7559:
	cmpl	$2, %r9d
	jle	.L7555
	testl	%r10d, %r10d
	jne	.L7572
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L7573
	cmpw	$46, %dx
	je	.L7573
	cmpw	$47, %dx
	je	.L7573
	cmpw	$49, %dx
	je	.L7573
	cmpw	$113, %dx
	je	.L7573
.L7572:
	movl	6368(%rsp), %eax
	testl	%eax, %eax
	jne	.L7555
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L7575
	cmpw	$46, %dx
	je	.L7575
	cmpw	$47, %dx
	je	.L7575
	cmpw	$49, %dx
	je	.L7575
	cmpw	$113, %dx
	je	.L7575
.L7555:
	cmpl	$8, 1412(%rsp)
	movl	$8, %eax
	cmovl	1412(%rsp), %eax
	cmpl	$1, 1408(%rsp)
	movl	%eax, 1412(%rsp)
	jle	.L7578
.L7600:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14286
.L7585:
	movslq	%edx,%rbx
	movl	1408(%rsp), %eax
	salq	$2, %rbx
	cmpl	%eax, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L7585
.L14286:
	testl	%r12d, %r12d
	je	.L7578
	movslq	%r12d,%r14
	movq	%r14, %rbp
	salq	$4, %rbp
	addq	mov_optab(%rip), %rbp
	movl	8(%rbp), %edx
	cmpl	$210, %edx
	je	.L7587
	movl	mode_size(,%r14,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1412(%rsp)
	jl	.L7587
	movslq	%edx,%r8
	cmpl	%ebp, 6400(%rsp)
	leaq	6352(%rsp), %rbx
	movq	insn_gen_function(,%r8,8), %r11
	movq	%r11, 3872(%rsp)
	jl	.L7587
	movl	6408(%rsp), %edx
.L7598:
	testl	%edx, %edx
	je	.L7592
	subl	%ebp, 52(%rbx)
.L7592:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L7593
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15136:
	movq	%rax, 1400(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L7595
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L7596:
	movq	%rax, %rsi
	movq	1400(%rsp), %rdi
	xorl	%eax, %eax
	call	*3872(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L7597
	addl	%ebp, 52(%rbx)
.L7597:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L7598
.L7587:
	movl	mode_size(,%r14,4), %edi
	movl	%edi, 1408(%rsp)
	decl	%edi
	jg	.L7600
.L7578:
	movl	6400(%rsp), %r12d
	testl	%r12d, %r12d
	je	.L7616
	jmp	.L15283
.L7595:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L7596
.L7593:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15136
.L7575:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6360(%rsp)
	jmp	.L7555
.L7573:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6384(%rsp)
	jmp	.L7572
.L7553:
	movl	$1, %edx
	jmp	.L7552
.L7551:
	movl	$1, %ecx
	jmp	.L7550
.L7549:
	movl	$1, %ecx
	jmp	.L7548
.L7526:
	movq	3880(%rsp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	3880(%rsp), %r8
	movq	%rax, 8(%r8)
	movq	3880(%rsp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	3880(%rsp), %r11
	movq	%rax, 16(%r11)
	jmp	.L7522
.L16260:
	movq	%rdx, %rcx
	movzbl	2(%rdx), %edx
	cmpb	$16, %dl
	je	.L7520
	movq	8(%rcx), %rbp
	cmpw	$59, (%rbp)
	je	.L16266
.L7520:
	cmpl	$55, %eax
	jne	.L7523
	movq	3880(%rsp), %rbp
	xorl	%esi, %esi
	movq	8(%rbp), %rdi
	call	protect_from_queue
	movq	%rax, 8(%rbp)
	jmp	.L7522
.L16266:
	movq	8(%rbp), %r9
	movq	%r9, 8(%rcx)
	cmpq	$0, 16(%rbp)
	je	.L7522
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	3880(%rsp), %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L15135:
	movq	%rbx, 1416(%rsp)
	jmp	.L7522
.L7519:
	movq	3880(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L7527
	movq	8(%rcx), %rbx
	jmp	.L15135
.L7527:
	movq	3880(%rsp), %r10
	movq	24(%r10), %rdx
	testq	%rdx, %rdx
	movq	%rdx, 1416(%rsp)
	jne	.L7522
	movq	3880(%rsp), %rbp
	movq	8(%rbp), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	3880(%rsp), %rbx
	movq	%rax, %rdi
	movq	8(%rbx), %rsi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	3880(%rsp), %r14
	movq	%rax, %rdi
	movq	16(%r14), %rsi
	call	emit_insn_before
	movq	3880(%rsp), %rsi
	movq	24(%rsi), %rdi
	movq	%rdi, 1416(%rsp)
	jmp	.L7522
.L7516:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L7512
.L16259:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L7510
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16267
.L7510:
	cmpl	$55, %eax
	jne	.L7513
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L7512
.L16267:
	movq	8(%rbp), %rsi
	movq	%rsi, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L7512
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L7512
.L7509:
	cmpq	$0, 16(%r12)
	jne	.L7517
	movq	8(%r12), %r12
	jmp	.L7512
.L7517:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L7518
	movq	%rsi, %r12
	jmp	.L7512
.L7518:
	movq	8(%r12), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L7512
.L7506:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L7502
.L16258:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L7502
.L7499:
	cmpq	$0, 16(%r13)
	jne	.L7507
	movq	8(%r13), %rcx
	movq	%rcx, 1424(%rsp)
	jmp	.L7502
.L7507:
	movq	24(%r13), %rdx
	testq	%rdx, %rdx
	movq	%rdx, 1424(%rsp)
	jne	.L7502
	movq	8(%r13), %rbp
	movzbl	2(%rbp), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r10
	movq	%r10, 1424(%rsp)
	jmp	.L7502
.L16257:
	movq	3928(%rsp), %rdi
	movq	1440(%rsp), %rbp
	movl	32(%rdi), %eax
	cmpl	%eax, 8(%rbp)
	jge	.L7373
	movq	8(%rdi), %r8
	movl	48(%r8), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r13)
	movl	%eax, 1436(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L7376
	cmpl	$55, %eax
	je	.L16268
.L7380:
	cmpl	$63, %eax
	je	.L7383
	cmpl	$66, %eax
	je	.L7383
.L7379:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L7386
	cmpl	$55, %eax
	je	.L16269
.L7390:
	cmpl	$63, %eax
	je	.L7393
	cmpl	$66, %eax
	je	.L7393
.L7389:
	movq	1440(%rsp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$59, %eax
	je	.L7396
	cmpl	$55, %eax
	je	.L16270
.L7400:
	cmpl	$63, %eax
	je	.L7403
	cmpl	$66, %eax
	je	.L7403
.L7399:
	cmpw	$55, (%r13)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 1440(%rsp)
	je	.L15283
	movq	1440(%rsp), %rbx
	cmpw	$46, (%rbx)
	je	.L16271
.L7409:
	movl	1436(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 3912(%rsp)
	testl	%ebp, %ebp
	je	.L14277
.L7495:
	movslq	%ebp,%r14
	movq	%r14, %rax
	movq	%r14, 3904(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L7483
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L7487
	movq	1440(%rsp), %r10
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r10)
	ja	.L7483
.L7487:
	movslq	%edx,%rax
	leaq	(%rax,%rax,4), %r14
	movq	%rax, 3896(%rsp)
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16272
.L7488:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16273
.L7489:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L7490
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	3912(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L7483
.L7490:
	call	get_last_insn
	movl	$1, %edx
	movq	1440(%rsp), %rsi
	movq	%rax, 3888(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16274
.L7491:
	movq	3896(%rsp), %rbp
	movq	%r13, %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	3912(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14957
	movq	3888(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L7483:
	movq	3904(%rsp), %rsi
	movl	mode_wider_mode(,%rsi,4), %ebp
	testl	%ebp, %ebp
	jne	.L7495
.L14277:
	movq	1440(%rsp), %rsi
	movl	$4, %edi
	jmp	.L15138
.L16274:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L7491
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L7491
.L16273:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L7483
	jmp	.L7489
.L16272:
	xorl	%eax, %eax
	movq	%r13, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L7483
	jmp	.L7488
.L16271:
	movl	8(%rbx), %r10d
	xorl	%r9d, %r9d
	movl	$9, %r8d
	cmpl	$8, 1436(%rsp)
	movl	$8, %ebx
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1436(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L7423:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14268
.L7419:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L7419
.L14268:
	testl	%ecx, %ecx
	je	.L7412
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L7421
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L7421
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L7421:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L7423
.L7412:
	decl	%r9d
	jg	.L7409
	movq	8(%r13), %rbx
	movq	8(%r12), %rdi
	xorl	%ecx, %ecx
	movq	%r12, 6440(%rsp)
	movl	$0, 6468(%rsp)
	movq	%r13, 6416(%rsp)
	movl	%r10d, %r14d
	movl	$9, 1432(%rsp)
	movq	%rbx, 6424(%rsp)
	movq	%rdi, 6448(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L7426
	cmpw	$88, %dx
	je	.L7426
	cmpw	$87, %dx
	je	.L7426
.L7425:
	movl	%ecx, 6432(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r13d
	cmpw	$1, %r13w
	jbe	.L7428
	cmpw	$88, %dx
	je	.L7428
	cmpw	$87, %dx
	je	.L7428
.L7427:
	movl	%ecx, 6456(%rsp)
	movl	$0, 6460(%rsp)
	movl	$0, 6436(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L7430
	cmpw	$87, %ax
	je	.L7430
.L7429:
	testl	%edx, %edx
	movl	%edx, 6472(%rsp)
	je	.L7431
	movl	%r10d, 6468(%rsp)
.L7431:
	movl	%r10d, 6464(%rsp)
	movl	6456(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L7433
	movl	6432(%rsp), %ebp
	testl	%ebp, %ebp
	jne	.L7432
.L7433:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1436(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1436(%rsp), %ebp
.L7447:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14271
.L7443:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L7443
.L14271:
	testl	%ecx, %ecx
	je	.L7436
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L7445
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L7445
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L7445:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L7447
.L7436:
	cmpl	$2, %r9d
	jle	.L7432
	testl	%r10d, %r10d
	jne	.L7449
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L7450
	cmpw	$46, %dx
	je	.L7450
	cmpw	$47, %dx
	je	.L7450
	cmpw	$49, %dx
	je	.L7450
	cmpw	$113, %dx
	je	.L7450
.L7449:
	movl	6432(%rsp), %eax
	testl	%eax, %eax
	jne	.L7432
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L7452
	cmpw	$46, %dx
	je	.L7452
	cmpw	$47, %dx
	je	.L7452
	cmpw	$49, %dx
	je	.L7452
	cmpw	$113, %dx
	je	.L7452
.L7432:
	cmpl	$8, 1436(%rsp)
	movl	$8, %eax
	cmovl	1436(%rsp), %eax
	cmpl	$1, 1432(%rsp)
	movl	%eax, 1436(%rsp)
	jle	.L7455
.L7477:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14274
.L7462:
	movslq	%edx,%rbx
	movl	1432(%rsp), %r9d
	salq	$2, %rbx
	cmpl	%r9d, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L7462
.L14274:
	testl	%r12d, %r12d
	je	.L7455
	movslq	%r12d,%r13
	movq	%r13, %r11
	salq	$4, %r11
	addq	mov_optab(%rip), %r11
	movl	8(%r11), %edx
	cmpl	$210, %edx
	je	.L7464
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1436(%rsp)
	jl	.L7464
	movslq	%edx,%rdi
	cmpl	%ebp, 6464(%rsp)
	leaq	6416(%rsp), %rbx
	movq	insn_gen_function(,%rdi,8), %rcx
	movq	%rcx, 3920(%rsp)
	jl	.L7464
	movl	6472(%rsp), %edx
.L7475:
	testl	%edx, %edx
	je	.L7469
	subl	%ebp, 52(%rbx)
.L7469:
	movl	16(%rbx), %r8d
	testl	%r8d, %r8d
	je	.L7470
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15134:
	movq	%rax, %r14
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L7472
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L7473:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*3920(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L7474
	addl	%ebp, 52(%rbx)
.L7474:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L7475
.L7464:
	movl	mode_size(,%r13,4), %edx
	movl	%edx, 1432(%rsp)
	decl	%edx
	jg	.L7477
.L7455:
	movl	6464(%rsp), %eax
	testl	%eax, %eax
	jmp	.L15390
.L7472:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L7473
.L7470:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15134
.L7452:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6424(%rsp)
	jmp	.L7432
.L7450:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6448(%rsp)
	jmp	.L7449
.L7430:
	movl	$1, %edx
	jmp	.L7429
.L7428:
	movl	$1, %ecx
	jmp	.L7427
.L7426:
	movl	$1, %ecx
	jmp	.L7425
.L7403:
	movq	1440(%rsp), %r10
	xorl	%esi, %esi
	movq	8(%r10), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	1440(%rsp), %rdx
	movq	%rax, 8(%rdx)
	movq	1440(%rsp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	1440(%rsp), %rbx
	movq	%rax, 16(%rbx)
	jmp	.L7399
.L16270:
	movq	%rdx, %rcx
	movzbl	2(%rdx), %edx
	cmpb	$16, %dl
	je	.L7397
	movq	8(%rcx), %rbp
	cmpw	$59, (%rbp)
	je	.L16275
.L7397:
	cmpl	$55, %eax
	jne	.L7400
	movq	1440(%rsp), %rbp
	xorl	%esi, %esi
	movq	8(%rbp), %rdi
	call	protect_from_queue
	movq	%rax, 8(%rbp)
	jmp	.L7399
.L16275:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%rcx)
	cmpq	$0, 16(%rbp)
	je	.L7399
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	1440(%rsp), %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L15133:
	movq	%rbx, 1440(%rsp)
	jmp	.L7399
.L7396:
	movq	1440(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L7404
	movq	8(%rcx), %rbx
	jmp	.L15133
.L7404:
	movq	1440(%rsp), %r8
	movq	24(%r8), %rsi
	testq	%rsi, %rsi
	je	.L7405
	movq	%rsi, 1440(%rsp)
	jmp	.L7399
.L7405:
	movq	1440(%rsp), %rdi
	movq	8(%rdi), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	1440(%rsp), %r14
	movq	%rax, %rdi
	movq	8(%r14), %rsi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	1440(%rsp), %r11
	movq	%rax, %rdi
	movq	16(%r11), %rsi
	call	emit_insn_before
	movq	1440(%rsp), %r9
	movq	24(%r9), %rsi
	movq	%rsi, 1440(%rsp)
	jmp	.L7399
.L7393:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L7389
.L16269:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L7387
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16276
.L7387:
	cmpl	$55, %eax
	jne	.L7390
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L7389
.L16276:
	movq	8(%rbp), %r11
	movq	%r11, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L7389
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L7389
.L7386:
	cmpq	$0, 16(%r12)
	jne	.L7394
	movq	8(%r12), %r12
	jmp	.L7389
.L7394:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L7395
	movq	%rsi, %r12
	jmp	.L7389
.L7395:
	movq	8(%r12), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L7389
.L7383:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L7379
.L16268:
	jne	.L7380
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L7379
.L7376:
	cmpq	$0, 16(%r13)
	jne	.L7384
	movq	8(%r13), %r13
	jmp	.L7379
.L7384:
	movq	24(%r13), %rdi
	testq	%rdi, %rdi
	je	.L7385
	movq	%rdi, %r13
	jmp	.L7379
.L7385:
	movq	8(%r13), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L7379
	.p2align 6,,7
.L7365:
	movq	56(%rsp), %r9
	xorl	%esi, %esi
	movq	8(%r9), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	56(%rsp), %r8
	movq	%rax, 8(%r8)
	movq	56(%rsp), %r10
	movq	16(%r10), %rdi
	call	protect_from_queue
	movq	56(%rsp), %r14
	movq	%rax, 16(%r14)
	jmp	.L7361
.L16205:
	jne	.L7362
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbx)
	jmp	.L7361
	.p2align 6,,7
.L7358:
	movq	56(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L7366
	movq	8(%rcx), %r13
	jmp	.L7361
.L7366:
	movq	56(%rsp), %rdi
	movq	24(%rdi), %r11
	testq	%r11, %r11
	movq	%r11, %r13
	jne	.L7361
	movq	56(%rsp), %rdx
	movq	8(%rdx), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	56(%rsp), %r13
	movq	%rax, %rdi
	movq	8(%r13), %rsi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	56(%rsp), %rcx
	movq	%rax, %rdi
	movq	16(%rcx), %rsi
	call	emit_insn_before
	movq	56(%rsp), %rax
	movq	24(%rax), %r13
	jmp	.L7361
	.p2align 6,,7
.L16204:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	3928(%rsp), %rdi
	movzbl	2(%rbx), %edx
	movq	%rax, %rsi
	jmp	.L15132
.L7337:
	movq	56(%rsp), %rcx
	movl	(%rcx), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L16277
	movq	56(%rsp), %rbx
	movq	3928(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movzbl	2(%rbx), %edx
	movq	%rbx, %rsi
	call	expand_expr
	movq	56(%rsp), %rdx
	movq	%rax, %r12
	cmpw	$51, (%rdx)
	je	.L16278
.L7355:
	movzwl	(%r12), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L7356
	cmpw	$46, %dx
	je	.L7356
	cmpw	$47, %dx
	je	.L7356
	cmpw	$49, %dx
	je	.L7356
	cmpw	$113, %dx
	jne	.L7302
	jmp	.L7356
.L16278:
	cmpl	$63, 8(%rdx)
	jle	.L7302
	jmp	.L7355
.L16277:
	movq	3928(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	56(%rsp), %r13
	movq	%rax, %rsi
	movzbl	3(%r13), %edx
	movq	8(%r13), %rdi
	shrb	$2, %dl
	andl	$1, %edx
	jmp	.L15140
.L7346:
	movl	$1, %ebx
	jmp	.L7340
.L7338:
	xorl	%ebx, %ebx
	jmp	.L7340
.L7344:
	movq	56(%rsp), %r9
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	movq	8(%r9), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L7346
	movq	56(%rsp), %r11
	xorl	%eax, %eax
	movq	16(%r11), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L7340
	jmp	.L7346
.L16203:
	movzbl	2(%rdi), %eax
	cmpb	$16, %al
	je	.L7330
	movl	cse_not_expected(%rip), %r14d
	xorl	%esi, %esi
	movzbl	%al, %edx
	testl	%r14d, %r14d
	cmove	%rdi, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	movq	3928(%rsp), %rdi
	call	expand_expr
	movq	%rax, %r12
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L7356
	testb	%al, %al
	je	.L7356
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L15352
.L16202:
	movq	56(%rsp), %rax
	cmpb	$16, 2(%rax)
	jne	.L7303
	call	gen_label_rtx
	movq	%rax, %rbp
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r12
	testq	%rbx, %rbx
	jne	.L7307
.L14261:
	movq	56(%rsp), %rcx
	movzwl	(%rcx), %eax
	cmpl	$59, %eax
	je	.L7309
	cmpl	$55, %eax
	je	.L16279
.L7313:
	cmpl	$63, %eax
	je	.L7316
	cmpl	$66, %eax
	je	.L7316
.L7312:
	movq	3928(%rsp), %rbx
	xorl	%eax, %eax
	movq	%rbp, %rsi
	incl	inhibit_defer_pop(%rip)
	movq	32(%rbx), %rdi
	call	jumpifnot
	movq	3928(%rsp), %rcx
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%r13, %rsi
	movq	40(%rcx), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L7322
.L14263:
	movq	%r12, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%rbp, %rdi
	call	emit_label
	xorl	%eax, %eax
	xorl	%edx, %edx
	movq	3928(%rsp), %rbp
	movq	%r13, %rsi
	movq	48(%rbp), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L7327
.L14265:
	movq	%r12, %rdi
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L7749
.L7327:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdx
	movq	%rax, 16(%rbx)
	testq	%rdx, %rdx
	movq	%rdx, pending_chain(%rip)
	movq	%rdx, %rbx
	jne	.L7327
	jmp	.L14265
.L7322:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rsi
	movq	%rax, 16(%rbx)
	testq	%rsi, %rsi
	movq	%rsi, pending_chain(%rip)
	movq	%rsi, %rbx
	jne	.L7322
	jmp	.L14263
.L7316:
	movq	56(%rsp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	movq	56(%rsp), %rdx
	movq	%rax, 8(%rdx)
	movq	56(%rsp), %rsi
	movq	16(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	56(%rsp), %rbx
	movq	%rax, 16(%rbx)
	jmp	.L7312
.L16279:
	jne	.L7313
	movq	8(%rcx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	56(%rsp), %rcx
	movq	%rax, 8(%rcx)
	jmp	.L7312
.L7309:
	movq	56(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L7317
	movq	8(%rcx), %r13
	jmp	.L7312
.L7317:
	movq	56(%rsp), %rdi
	movq	24(%rdi), %r8
	testq	%r8, %r8
	movq	%r8, %r13
	jne	.L7312
	movq	56(%rsp), %rax
	movq	8(%rax), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	56(%rsp), %r9
	movq	%rax, %rdi
	movq	8(%r9), %rsi
	movq	%rax, 24(%r9)
	call	gen_move_insn
	movq	56(%rsp), %r13
	movq	%rax, %rdi
	movq	16(%r13), %rsi
	call	emit_insn_before
	movq	56(%rsp), %r10
	movq	24(%r10), %r13
	jmp	.L7312
	.p2align 6,,7
.L7307:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r11
	movq	%rax, 16(%rbx)
	testq	%r11, %r11
	movq	%r11, pending_chain(%rip)
	movq	%r11, %rbx
	jne	.L7307
	jmp	.L14261
.L16201:
	movq	32(%r8), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L7299
.L14259:
	movq	3928(%rsp), %r9
	movq	56(%rsp), %rsi
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	40(%r9), %rdi
	call	store_expr
	jmp	.L7749
.L7299:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r10
	movq	%rax, 16(%rbx)
	testq	%r10, %r10
	movq	%r10, pending_chain(%rip)
	movq	%r10, %rbx
	jne	.L7299
	jmp	.L14259
	.p2align 6,,7
.L7294:
	movl	5408(%rsp), %edi
	xorl	%esi, %esi
	leaq	40(%r15), %rax
	testl	%edi, %edi
	je	.L7753
	movq	const0_rtx(%rip), %rsi
.L7753:
	movq	(%rax), %rdi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	jmp	.L7749
.L16200:
	movq	40(%rdx), %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L6331
	movq	32(%r15), %rbp
	movq	48(%r15), %rsi
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	32(%rbp), %rdi
	call	operand_equal_p
	testl	%eax, %eax
	je	.L6331
	movq	32(%r15), %r8
	testb	$1, 17(%r8)
	jne	.L6331
	movq	56(%rsp), %r12
	xorl	%r13d, %r13d
	movq	40(%r15), %rbx
	movzwl	(%r12), %eax
	cmpw	$53, %ax
	je	.L16280
	movl	%eax, %ecx
.L6334:
	cmpw	$55, %cx
	je	.L16281
.L6336:
	movzbl	16(%rbx), %edx
	movzbl	%dl, %r9d 
	salq	$3, %r9
	addq	tree_code_type(%rip), %r9
	movq	(%r9), %r10
	movsbl	(%r10),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L6338
	mov	%eax, %r11d
	jmp	*.L6377(,%r11,8)
	.section	.rodata
	.align 8
	.align 4
.L6377:
	.quad	.L6347
	.quad	.L6349
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6349
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6383
	.quad	.L6339
	.quad	.L6352
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6352
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6338
	.quad	.L6341
	.text
.L6339:
	movq	120(%rbx), %r13
.L6338:
	movl	$1, %ebp
.L15113:
	testq	%r13, %r13
	je	.L6333
.L14865:
	cmpw	$53, (%r13)
	je	.L16282
.L6380:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	xorl	%ebp, %ebp
	testl	%eax, %eax
	jne	.L6333
	cmpw	$55, (%r12)
	je	.L16283
.L6383:
	movl	$1, %ebp
.L6333:
	testl	%ebp, %ebp
	je	.L6331
	movq	56(%rsp), %rax
	cmpw	$51, (%rax)
	je	.L16284
.L6384:
	movq	48(%r15), %rdx
	movq	56(%rsp), %r13
	xorl	%ebp, %ebp
	movq	%rdx, 4152(%rsp)
	movq	%r13, 1520(%rsp)
	movzbl	16(%rdx), %eax
	cmpb	$44, %al
	je	.L16285
	cmpb	$48, %al
	je	.L16286
.L6393:
	xorl	%r12d, %r12d
	testl	%r12d, %r12d
	je	.L6420
	movq	56(%rsp), %rcx
	cmpw	$55, (%rcx)
	je	.L16287
.L6420:
	movq	56(%rsp), %rcx
	movzwl	(%rcx), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L6428
	mov	%eax, %edx
	jmp	*.L6437(,%rdx,8)
	.section	.rodata
	.align 8
	.align 4
.L6437:
	.quad	.L6431
	.quad	.L6428
	.quad	.L6428
	.quad	.L6428
	.quad	.L6436
	.quad	.L6428
	.quad	.L6428
	.quad	.L6428
	.quad	.L6434
	.quad	.L6434
	.quad	.L6428
	.quad	.L6434
	.text
.L6431:
	movq	56(%rsp), %r13
	xorl	%eax, %eax
	movq	8(%r13), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L6430:
	testl	%ebx, %ebx
	je	.L6427
	movq	56(%rsp), %rbx
	movzbl	2(%rbx), %eax
	cmpb	$16, %al
	je	.L6439
	testb	%al, %al
	jne	.L16288
.L6439:
	movq	56(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	2(%rdi), %edx
	movq	4152(%rsp), %rdi
.L15115:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L15346:
	movq	%rax, %r12
.L6446:
	movl	$1, %ebp
.L6392:
	cmpq	56(%rsp), %r12
	je	.L6391
	movq	4152(%rsp), %r11
	cmpb	$0, 16(%r11)
	je	.L6391
	movq	56(%rsp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$59, %eax
	je	.L6448
	cmpl	$55, %eax
	je	.L16289
.L6452:
	cmpl	$63, %eax
	je	.L6455
	cmpl	$66, %eax
	je	.L6455
.L6451:
	movq	1520(%rsp), %rbx
	movzbl	2(%r12), %eax
	movzbl	2(%rbx), %ecx
	cmpb	%cl, %al
	je	.L6458
	testb	%al, %al
	je	.L6458
	movq	4152(%rsp), %r14
	movq	8(%r14), %rdx
	movzbl	17(%rdx), %r13d
	shrb	$6, %r13b
	movl	%r13d, %edx
	andl	$1, %edx
	testl	%ebp, %ebp
	je	.L6459
	movzbl	%cl, %edi
	movq	%r12, %rsi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%rbx, %rdi
	movq	%rax, %rsi
.L15122:
	call	emit_move_insn
.L6391:
	movq	32(%r15), %rdi
	movq	1920(%rsp), %rsi
	xorl	%eax, %eax
	xorl	%ebp, %ebp
	call	jumpifnot
	movq	40(%r15), %r10
	movq	56(%rsp), %r15
	movq	%r10, 4032(%rsp)
	movq	4032(%rsp), %rdx
	movzbl	16(%rdx), %eax
	cmpb	$44, %al
	je	.L16290
	cmpb	$48, %al
	je	.L16291
.L6847:
	xorl	%r12d, %r12d
	testl	%r12d, %r12d
	je	.L6874
	movq	56(%rsp), %rdi
	cmpw	$55, (%rdi)
	je	.L16292
.L6874:
	movq	56(%rsp), %rdx
	movzwl	(%rdx), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L6882
	mov	%eax, %edi
	jmp	*.L6891(,%rdi,8)
	.section	.rodata
	.align 8
	.align 4
.L6891:
	.quad	.L6885
	.quad	.L6882
	.quad	.L6882
	.quad	.L6882
	.quad	.L6890
	.quad	.L6882
	.quad	.L6882
	.quad	.L6882
	.quad	.L6888
	.quad	.L6888
	.quad	.L6882
	.quad	.L6888
	.text
.L6885:
	movq	56(%rsp), %rcx
	xorl	%eax, %eax
	movq	8(%rcx), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L6884:
	testl	%ebx, %ebx
	je	.L6881
	movq	56(%rsp), %rbx
	movzbl	2(%rbx), %eax
	cmpb	$16, %al
	je	.L6893
	testb	%al, %al
	jne	.L16293
.L6893:
	movq	56(%rsp), %r13
	movq	4032(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	2(%r13), %edx
.L15124:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L15347:
	movq	%rax, %r12
.L6900:
	movl	$1, %ebp
.L6846:
	cmpq	56(%rsp), %r12
	je	.L6845
	movq	4032(%rsp), %r11
	cmpb	$0, 16(%r11)
	je	.L6845
	movq	56(%rsp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$59, %eax
	je	.L6902
	cmpl	$55, %eax
	je	.L16294
.L6906:
	cmpl	$63, %eax
	je	.L6909
	cmpl	$66, %eax
	je	.L6909
.L6905:
	movzbl	2(%r12), %eax
	movzbl	2(%r15), %ecx
	cmpb	%cl, %al
	je	.L6912
	testb	%al, %al
	je	.L6912
	movq	4032(%rsp), %rbx
	jmp	.L15416
.L6912:
	cmpb	$16, %al
	jne	.L7168
	movq	4032(%rsp), %rsi
	cmpb	$28, 16(%rsi)
	je	.L16295
	cmpb	$16, %al
	jne	.L7168
	movq	4032(%rsp), %rdi
	xorl	%eax, %eax
	call	expr_size
	movq	4032(%rsp), %r9
	movq	%rax, %r13
	movq	8(%r9), %rbx
	movl	48(%rbx), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r15)
	movl	%eax, 1452(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L7171
	cmpl	$55, %eax
	je	.L16296
.L7175:
	cmpl	$63, %eax
	je	.L7178
	cmpl	$66, %eax
	je	.L7178
.L7174:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L7181
	cmpl	$55, %eax
	je	.L16297
.L7185:
	cmpl	$63, %eax
	je	.L7188
	cmpl	$66, %eax
	je	.L7188
.L7184:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L7191
	cmpl	$55, %eax
	je	.L16298
.L7195:
	cmpl	$63, %eax
	je	.L7198
	cmpl	$66, %eax
	je	.L7198
.L7194:
	cmpw	$55, (%r15)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	testq	%r13, %r13
	je	.L15283
	cmpw	$46, (%r13)
	je	.L16299
.L7204:
	movl	1452(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 3960(%rsp)
	testl	%ebp, %ebp
	je	.L14257
.L7290:
	movslq	%ebp,%rax
	movq	%rax, 3952(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L7278
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L7282
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L7278
.L7282:
	movslq	%edx,%rdi
	leaq	(%rdi,%rdi,4), %r14
	movq	%rdi, 3944(%rsp)
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16300
.L7283:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16301
.L7284:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L7285
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	3960(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L7278
.L7285:
	call	get_last_insn
	movl	$1, %edx
	movq	%r13, %rsi
	movq	%rax, 3936(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16302
.L7286:
	movq	3944(%rsp), %rbp
	movq	%r15, %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	3960(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14954
	movq	3936(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L7278:
	movq	3952(%rsp), %r8
	movl	mode_wider_mode(,%r8,4), %ebp
	testl	%ebp, %ebp
	jne	.L7290
	jmp	.L14257
.L16302:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L7286
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L7286
.L16301:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L7278
	jmp	.L7284
.L16300:
	xorl	%eax, %eax
	movq	%r15, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L7278
	jmp	.L7283
.L16299:
	movl	8(%r13), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1452(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1452(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L7218:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14248
.L7214:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L7214
.L14248:
	testl	%ecx, %ecx
	je	.L7207
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L7216
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L7216
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L7216:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L7218
.L7207:
	decl	%r9d
	jg	.L7204
	movq	8(%r15), %rbx
	movq	8(%r12), %rdi
	xorl	%ecx, %ecx
	movl	$0, 6532(%rsp)
	movq	%r15, 6480(%rsp)
	movq	%r12, 6504(%rsp)
	movl	%r10d, %r13d
	movl	$9, %r14d
	movq	%rbx, 6488(%rsp)
	movq	%rdi, 6512(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L7221
	cmpw	$88, %dx
	je	.L7221
	cmpw	$87, %dx
	je	.L7221
.L7220:
	movl	%ecx, 6496(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L7223
	cmpw	$88, %dx
	je	.L7223
	cmpw	$87, %dx
	je	.L7223
.L7222:
	movl	%ecx, 6520(%rsp)
	movl	$0, 6524(%rsp)
	movl	$0, 6500(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L7225
	cmpw	$87, %ax
	je	.L7225
.L7224:
	testl	%edx, %edx
	movl	%edx, 6536(%rsp)
	je	.L7226
	movl	%r10d, 6532(%rsp)
.L7226:
	movl	%r10d, 6528(%rsp)
	movl	6520(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L7228
	movl	6496(%rsp), %eax
	testl	%eax, %eax
	jne	.L7227
.L7228:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1452(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1452(%rsp), %ebp
.L7242:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14251
.L7238:
	movslq	%edx,%r15
	salq	$2, %r15
	cmpl	%r8d, mode_size(%r15)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r15), %edx
	testl	%edx, %edx
	jne	.L7238
.L14251:
	testl	%ecx, %ecx
	je	.L7231
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L7240
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L7240
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L7240:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L7242
.L7231:
	cmpl	$2, %r9d
	jle	.L7227
	testl	%r10d, %r10d
	jne	.L7244
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L7245
	cmpw	$46, %dx
	je	.L7245
	cmpw	$47, %dx
	je	.L7245
	cmpw	$49, %dx
	je	.L7245
	cmpw	$113, %dx
	je	.L7245
.L7244:
	movl	6496(%rsp), %eax
	testl	%eax, %eax
	jne	.L7227
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L7247
	cmpw	$46, %dx
	je	.L7247
	cmpw	$47, %dx
	je	.L7247
	cmpw	$49, %dx
	je	.L7247
	cmpw	$113, %dx
	je	.L7247
.L7227:
	cmpl	$8, 1452(%rsp)
	movl	$8, %eax
	cmovl	1452(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 1452(%rsp)
	jle	.L7250
.L7272:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14254
.L7257:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r14d, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L7257
.L14254:
	testl	%r12d, %r12d
	je	.L7250
	movslq	%r12d,%r13
	movq	%r13, %r11
	salq	$4, %r11
	addq	mov_optab(%rip), %r11
	movl	8(%r11), %edx
	cmpl	$210, %edx
	je	.L7259
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1452(%rsp)
	jl	.L7259
	cmpl	%ebp, 6528(%rsp)
	movslq	%edx,%rcx
	leaq	6480(%rsp), %rbx
	movq	insn_gen_function(,%rcx,8), %r15
	jl	.L7259
	movl	6536(%rsp), %edx
.L7270:
	testl	%edx, %edx
	je	.L7264
	subl	%ebp, 52(%rbx)
.L7264:
	movl	16(%rbx), %esi
	testl	%esi, %esi
	je	.L7265
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15128:
	movl	40(%rbx), %edx
	movq	%rax, %r14
	testl	%edx, %edx
	je	.L7267
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L7268:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*%r15
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L7269
	addl	%ebp, 52(%rbx)
.L7269:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L7270
.L7259:
	movl	mode_size(,%r13,4), %r14d
	cmpl	$1, %r14d
	jg	.L7272
.L7250:
	movl	6528(%rsp), %r14d
	testl	%r14d, %r14d
	jmp	.L15389
.L7267:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L7268
.L7265:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15128
.L7247:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6488(%rsp)
	jmp	.L7227
.L7245:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6512(%rsp)
	jmp	.L7244
.L7225:
	movl	$1, %edx
	jmp	.L7224
.L7223:
	movl	$1, %ecx
	jmp	.L7222
.L7221:
	movl	$1, %ecx
	jmp	.L7220
.L7198:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L7194
.L16298:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L7192
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L16303
.L7192:
	cmpl	$55, %eax
	jne	.L7195
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L7194
.L16303:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L7194
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L7194
.L7191:
	cmpq	$0, 16(%r13)
	jne	.L7199
	movq	8(%r13), %r13
	jmp	.L7194
.L7199:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L7200
	movq	%rsi, %r13
	jmp	.L7194
.L7200:
	movq	8(%r13), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L7194
.L7188:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L7184
.L16297:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L7182
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16304
.L7182:
	cmpl	$55, %eax
	jne	.L7185
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L7184
.L16304:
	movq	8(%rbp), %r8
	movq	%r8, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L7184
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L7184
.L7181:
	cmpq	$0, 16(%r12)
	jne	.L7189
	movq	8(%r12), %r12
	jmp	.L7184
.L7189:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L7190
	movq	%rsi, %r12
	jmp	.L7184
.L7190:
	movq	8(%r12), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L7184
.L7178:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L7174
.L16296:
	jne	.L7175
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L7174
.L7171:
	cmpq	$0, 16(%r15)
	jne	.L7179
	movq	8(%r15), %r15
	jmp	.L7174
.L7179:
	movq	24(%r15), %rdi
	testq	%rdi, %rdi
	je	.L7180
	movq	%rdi, %r15
	jmp	.L7174
.L7180:
	movq	8(%r15), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L7174
.L16295:
	xorl	%eax, %eax
	movq	%rsi, %rdi
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, 1504(%rsp)
	je	.L16305
.L6917:
	movl	$8, %edi
	call	size_int
	movl	$57, %edi
	movq	4032(%rsp), %r11
	movq	%rax, %rdx
	movq	8(%r11), %r9
	movq	32(%r9), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	4032(%rsp), %r10
	movq	%rax, %r14
	movl	32(%r10), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%r14, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movq	4032(%rsp), %r13
	movq	$0, 1456(%rsp)
	movq	%rax, 1480(%rsp)
	movq	%rax, %r14
	movq	8(%r13), %rbp
	movl	48(%rbp), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r15)
	movl	%eax, 1476(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r15, 1488(%rsp)
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L7043
	cmpl	$55, %eax
	je	.L16306
	cmpl	$63, %eax
	je	.L7050
	cmpl	$66, %eax
	je	.L7050
.L7046:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L7053
	cmpl	$55, %eax
	je	.L16307
.L7057:
	cmpl	$63, %eax
	je	.L7060
	cmpl	$66, %eax
	je	.L7060
.L7056:
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L7063
	cmpl	$55, %eax
	je	.L16308
.L7067:
	cmpl	$63, %eax
	je	.L7070
	cmpl	$66, %eax
	je	.L7070
.L7066:
	movq	1488(%rsp), %rax
	cmpw	$55, (%rax)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 1480(%rsp)
	je	.L15283
	movq	1480(%rsp), %rax
	cmpw	$46, (%rax)
	je	.L16309
.L7076:
	movl	1476(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 3992(%rsp)
	testl	%ebp, %ebp
	je	.L14245
.L7162:
	movslq	%ebp,%rcx
	movq	%rcx, %rax
	movq	%rcx, 3984(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L7150
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L7154
	movq	1480(%rsp), %r13
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L7150
.L7154:
	movslq	%edx,%rsi
	leaq	(%rsi,%rsi,4), %r13
	movq	%rsi, 3976(%rsp)
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16310
.L7155:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16311
.L7156:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L7157
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	3992(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L7150
.L7157:
	call	get_last_insn
	movl	$1, %edx
	movq	1480(%rsp), %rsi
	movq	%rax, 3968(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16312
.L7158:
	movq	3976(%rsp), %rbp
	movq	1488(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	3992(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14953
	movq	3968(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L7150:
	movq	3984(%rsp), %rdx
	movl	mode_wider_mode(,%rdx,4), %ebp
	testl	%ebp, %ebp
	jne	.L7162
.L14245:
	movq	1480(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%r12), %r10
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	1488(%rsp), %r12
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%r10, (%rsp)
	movq	8(%r12), %r8
	call	emit_library_call
.L7160:
	cmpw	$46, (%r14)
	je	.L16313
	movq	8(%r15), %rsi
	movl	$4, %edi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movl	$4, %edi
	movq	%r14, %rcx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	1504(%rsp), %rdx
	movl	$4, %edi
	movq	%r14, %rcx
	movq	%rax, %rbp
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 1456(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L7164:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L7165
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%rbp, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L7165:
	cmpq	$0, 1456(%rsp)
	je	.L6845
	movq	1456(%rsp), %rdi
	jmp	.L15348
.L16313:
	movq	4032(%rsp), %r14
	movq	8(%r15), %rdi
	movl	32(%r14), %esi
	call	plus_constant_wide
	movq	1504(%rsp), %rdi
	movq	4032(%rsp), %r15
	movq	%rax, %rbp
	movl	32(%r15), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L7164
.L14953:
	call	emit_insn
	jmp	.L7160
.L16312:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L7158
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L7158
.L16311:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L7150
	jmp	.L7156
.L16310:
	xorl	%eax, %eax
	movq	1488(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L7150
	jmp	.L7155
.L16309:
	movl	8(%rax), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1476(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1476(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L7090:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14236
.L7086:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L7086
.L14236:
	testl	%ecx, %ecx
	je	.L7079
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L7088
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L7088
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L7088:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L7090
.L7079:
	decl	%r9d
	jg	.L7076
	movq	1488(%rsp), %rcx
	movq	8(%r12), %rdi
	movl	%r10d, %r13d
	movq	8(%rcx), %rbx
	movq	%r12, 6504(%rsp)
	movq	%rcx, 6480(%rsp)
	movl	$0, 6532(%rsp)
	movq	%rdi, 6512(%rsp)
	xorl	%ecx, %ecx
	movl	$9, 1472(%rsp)
	movq	%rbx, 6488(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L7093
	cmpw	$88, %dx
	je	.L7093
	cmpw	$87, %dx
	je	.L7093
.L7092:
	movl	%ecx, 6496(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L7095
	cmpw	$88, %dx
	je	.L7095
	cmpw	$87, %dx
	je	.L7095
.L7094:
	movl	%ecx, 6520(%rsp)
	movl	$0, 6524(%rsp)
	movl	$0, 6500(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L7097
	cmpw	$87, %ax
	je	.L7097
.L7096:
	testl	%edx, %edx
	movl	%edx, 6536(%rsp)
	je	.L7098
	movl	%r10d, 6532(%rsp)
.L7098:
	movl	%r10d, 6528(%rsp)
	movl	6520(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L7100
	movl	6496(%rsp), %eax
	testl	%eax, %eax
	jne	.L7099
.L7100:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1476(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1476(%rsp), %ebp
.L7114:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14239
.L7110:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L7110
.L14239:
	testl	%ecx, %ecx
	je	.L7103
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L7112
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L7112
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L7112:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L7114
.L7103:
	cmpl	$2, %r9d
	jle	.L7099
	testl	%r10d, %r10d
	jne	.L7116
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L7117
	cmpw	$46, %dx
	je	.L7117
	cmpw	$47, %dx
	je	.L7117
	cmpw	$49, %dx
	je	.L7117
	cmpw	$113, %dx
	je	.L7117
.L7116:
	movl	6496(%rsp), %eax
	testl	%eax, %eax
	jne	.L7099
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L7119
	cmpw	$46, %dx
	je	.L7119
	cmpw	$47, %dx
	je	.L7119
	cmpw	$49, %dx
	je	.L7119
	cmpw	$113, %dx
	je	.L7119
.L7099:
	cmpl	$8, 1476(%rsp)
	movl	$8, %eax
	cmovl	1476(%rsp), %eax
	cmpl	$1, 1472(%rsp)
	movl	%eax, 1476(%rsp)
	jle	.L7122
.L7144:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14242
.L7129:
	movslq	%edx,%rbx
	movl	1472(%rsp), %r9d
	salq	$2, %rbx
	cmpl	%r9d, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L7129
.L14242:
	testl	%r12d, %r12d
	je	.L7122
	movslq	%r12d,%r13
	movq	%r13, %r11
	salq	$4, %r11
	addq	mov_optab(%rip), %r11
	movl	8(%r11), %edx
	cmpl	$210, %edx
	je	.L7131
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1476(%rsp)
	jl	.L7131
	movslq	%edx,%rdi
	cmpl	%ebp, 6528(%rsp)
	leaq	6480(%rsp), %rbx
	movq	insn_gen_function(,%rdi,8), %r8
	movq	%r8, 4000(%rsp)
	jl	.L7131
	movl	6536(%rsp), %edx
.L7142:
	testl	%edx, %edx
	je	.L7136
	subl	%ebp, 52(%rbx)
.L7136:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L7137
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15127:
	movq	%rax, 1464(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L7139
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L7140:
	movq	%rax, %rsi
	movq	1464(%rsp), %rdi
	xorl	%eax, %eax
	call	*4000(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L7141
	addl	%ebp, 52(%rbx)
.L7141:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L7142
.L7131:
	movl	mode_size(,%r13,4), %eax
	movl	%eax, 1472(%rsp)
	decl	%eax
	jg	.L7144
.L7122:
	movl	6528(%rsp), %eax
	testl	%eax, %eax
	je	.L7160
	jmp	.L15283
.L7139:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L7140
.L7137:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15127
.L7119:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6488(%rsp)
	jmp	.L7099
.L7117:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6512(%rsp)
	jmp	.L7116
.L7097:
	movl	$1, %edx
	jmp	.L7096
.L7095:
	movl	$1, %ecx
	jmp	.L7094
.L7093:
	movl	$1, %ecx
	jmp	.L7092
.L7070:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L7066
.L16308:
	movzbl	2(%r14), %edx
	cmpb	$16, %dl
	je	.L7064
	movq	8(%r14), %rbp
	cmpw	$59, (%rbp)
	je	.L16314
.L7064:
	cmpl	$55, %eax
	jne	.L7067
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L7066
.L16314:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r14)
	cmpq	$0, 16(%rbp)
	je	.L7066
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r13, 1480(%rsp)
	jmp	.L7066
.L7063:
	cmpq	$0, 16(%r14)
	jne	.L7071
	movq	8(%r14), %rbp
	movq	%rbp, 1480(%rsp)
	jmp	.L7066
.L7071:
	movq	24(%r14), %r10
	testq	%r10, %r10
	movq	%r10, 1480(%rsp)
	jne	.L7066
	movq	8(%r14), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r9
	movq	%r9, 1480(%rsp)
	jmp	.L7066
.L7060:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L7056
.L16307:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L7054
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16315
.L7054:
	cmpl	$55, %eax
	jne	.L7057
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L7056
.L16315:
	movq	8(%rbp), %r8
	movq	%r8, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L7056
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	%r13, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L7056
.L7053:
	cmpq	$0, 16(%r12)
	jne	.L7061
	movq	8(%r12), %r12
	jmp	.L7056
.L7061:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L7062
	movq	%rsi, %r12
	jmp	.L7056
.L7062:
	movq	8(%r12), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L7056
.L7050:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L7046
.L16306:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L7046
.L7043:
	cmpq	$0, 16(%r15)
	jne	.L7051
	movq	8(%r15), %rax
	movq	%rax, 1488(%rsp)
	jmp	.L7046
.L7051:
	movq	24(%r15), %rsi
	testq	%rsi, %rsi
	movq	%rsi, 1488(%rsp)
	jne	.L7046
	movq	8(%r15), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %rcx
	movq	%rcx, 1488(%rsp)
	jmp	.L7046
.L16305:
	movq	4032(%rsp), %rdi
	movq	1504(%rsp), %rbp
	movl	32(%rdi), %eax
	cmpl	%eax, 8(%rbp)
	jge	.L6917
	movq	8(%rdi), %r14
	movl	48(%r14), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r15)
	movl	%eax, 1500(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L6920
	cmpl	$55, %eax
	je	.L16316
.L6924:
	cmpl	$63, %eax
	je	.L6927
	cmpl	$66, %eax
	je	.L6927
.L6923:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L6930
	cmpl	$55, %eax
	je	.L16317
.L6934:
	cmpl	$63, %eax
	je	.L6937
	cmpl	$66, %eax
	je	.L6937
.L6933:
	movq	1504(%rsp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$59, %eax
	je	.L6940
	cmpl	$55, %eax
	je	.L16318
.L6944:
	cmpl	$63, %eax
	je	.L6947
	cmpl	$66, %eax
	je	.L6947
.L6943:
	cmpw	$55, (%r15)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 1504(%rsp)
	je	.L15283
	movq	1504(%rsp), %rbx
	cmpw	$46, (%rbx)
	je	.L16319
.L6953:
	movl	1500(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 4024(%rsp)
	testl	%ebp, %ebp
	je	.L14233
.L7039:
	movslq	%ebp,%rax
	movq	%rax, 4016(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L7027
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L7031
	movq	1504(%rsp), %rdi
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%rdi)
	ja	.L7027
.L7031:
	movslq	%edx,%r14
	leaq	(%r14,%r14,4), %r13
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16320
.L7032:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16321
.L7033:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L7034
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	4024(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L7027
.L7034:
	call	get_last_insn
	movl	$1, %edx
	movq	1504(%rsp), %rsi
	movq	%rax, 4008(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16322
.L7035:
	movq	%r15, %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	4024(%rsp), %rcx
	call	*insn_gen_function(,%r14,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14954
	movq	4008(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L7027:
	movq	4016(%rsp), %rdx
	movl	mode_wider_mode(,%rdx,4), %ebp
	testl	%ebp, %ebp
	jne	.L7039
.L14233:
	movq	1504(%rsp), %rsi
	movl	$4, %edi
	jmp	.L15129
.L16322:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L7035
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L7035
.L16321:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L7027
	jmp	.L7033
.L16320:
	xorl	%eax, %eax
	movq	%r15, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L7027
	jmp	.L7032
.L16319:
	movl	8(%rbx), %r10d
	xorl	%r9d, %r9d
	movl	$9, %r8d
	cmpl	$8, 1500(%rsp)
	movl	$8, %ebx
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1500(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L6967:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14224
.L6963:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L6963
.L14224:
	testl	%ecx, %ecx
	je	.L6956
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L6965
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L6965
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L6965:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L6967
.L6956:
	decl	%r9d
	jg	.L6953
	movq	8(%r15), %rbx
	movq	8(%r12), %rdi
	xorl	%ecx, %ecx
	movq	%r12, 6568(%rsp)
	movl	$0, 6596(%rsp)
	movq	%r15, 6544(%rsp)
	movl	%r10d, %r13d
	movl	$9, %r14d
	movq	%rbx, 6552(%rsp)
	movq	%rdi, 6576(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L6970
	cmpw	$88, %dx
	je	.L6970
	cmpw	$87, %dx
	je	.L6970
.L6969:
	movl	%ecx, 6560(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L6972
	cmpw	$88, %dx
	je	.L6972
	cmpw	$87, %dx
	je	.L6972
.L6971:
	movl	%ecx, 6584(%rsp)
	movl	$0, 6588(%rsp)
	movl	$0, 6564(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L6974
	cmpw	$87, %ax
	je	.L6974
.L6973:
	testl	%edx, %edx
	movl	%edx, 6600(%rsp)
	je	.L6975
	movl	%r10d, 6596(%rsp)
.L6975:
	movl	%r10d, 6592(%rsp)
	movl	6584(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L6977
	movl	6560(%rsp), %ebp
	testl	%ebp, %ebp
	jne	.L6976
.L6977:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1500(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1500(%rsp), %ebp
.L6991:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14227
.L6987:
	movslq	%edx,%r15
	salq	$2, %r15
	cmpl	%r8d, mode_size(%r15)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r15), %edx
	testl	%edx, %edx
	jne	.L6987
.L14227:
	testl	%ecx, %ecx
	je	.L6980
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L6989
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L6989
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L6989:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L6991
.L6980:
	cmpl	$2, %r9d
	jle	.L6976
	testl	%r10d, %r10d
	jne	.L6993
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L6994
	cmpw	$46, %dx
	je	.L6994
	cmpw	$47, %dx
	je	.L6994
	cmpw	$49, %dx
	je	.L6994
	cmpw	$113, %dx
	je	.L6994
.L6993:
	movl	6560(%rsp), %eax
	testl	%eax, %eax
	jne	.L6976
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L6996
	cmpw	$46, %dx
	je	.L6996
	cmpw	$47, %dx
	je	.L6996
	cmpw	$49, %dx
	je	.L6996
	cmpw	$113, %dx
	je	.L6996
.L6976:
	cmpl	$8, 1500(%rsp)
	movl	$8, %eax
	cmovl	1500(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 1500(%rsp)
	jle	.L6999
.L7021:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14230
.L7006:
	movslq	%edx,%r11
	salq	$2, %r11
	cmpl	%r14d, mode_size(%r11)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%r11), %edx
	testl	%edx, %edx
	jne	.L7006
.L14230:
	testl	%r12d, %r12d
	je	.L6999
	movslq	%r12d,%r13
	movq	%r13, %rsi
	salq	$4, %rsi
	addq	mov_optab(%rip), %rsi
	movl	8(%rsi), %edx
	cmpl	$210, %edx
	je	.L7008
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1500(%rsp)
	jl	.L7008
	cmpl	%ebp, 6592(%rsp)
	movslq	%edx,%rbx
	movq	insn_gen_function(,%rbx,8), %r15
	leaq	6544(%rsp), %rbx
	jl	.L7008
	movl	6600(%rsp), %edx
.L7019:
	testl	%edx, %edx
	je	.L7013
	subl	%ebp, 52(%rbx)
.L7013:
	movl	16(%rbx), %ecx
	testl	%ecx, %ecx
	je	.L7014
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15126:
	movl	40(%rbx), %r8d
	movq	%rax, %r14
	testl	%r8d, %r8d
	je	.L7016
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L7017:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*%r15
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L7018
	addl	%ebp, 52(%rbx)
.L7018:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L7019
.L7008:
	movl	mode_size(,%r13,4), %r14d
	cmpl	$1, %r14d
	jg	.L7021
.L6999:
	movl	6592(%rsp), %r14d
	testl	%r14d, %r14d
	jmp	.L15389
.L7016:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L7017
.L7014:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15126
.L6996:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6552(%rsp)
	jmp	.L6976
.L6994:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6576(%rsp)
	jmp	.L6993
.L6974:
	movl	$1, %edx
	jmp	.L6973
.L6972:
	movl	$1, %ecx
	jmp	.L6971
.L6970:
	movl	$1, %ecx
	jmp	.L6969
.L6947:
	movq	1504(%rsp), %r9
	xorl	%esi, %esi
	movq	8(%r9), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	1504(%rsp), %r10
	movq	%rax, 8(%r10)
	movq	1504(%rsp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	1504(%rsp), %r8
	movq	%rax, 16(%r8)
	jmp	.L6943
.L16318:
	movq	%rdx, %rcx
	movzbl	2(%rdx), %edx
	cmpb	$16, %dl
	je	.L6941
	movq	8(%rcx), %rbp
	cmpw	$59, (%rbp)
	je	.L16323
.L6941:
	cmpl	$55, %eax
	jne	.L6944
	movq	1504(%rsp), %rbp
	xorl	%esi, %esi
	movq	8(%rbp), %rdi
	call	protect_from_queue
	movq	%rax, 8(%rbp)
	jmp	.L6943
.L16323:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%rcx)
	cmpq	$0, 16(%rbp)
	je	.L6943
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	1504(%rsp), %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L15125:
	movq	%rbx, 1504(%rsp)
	jmp	.L6943
.L6940:
	movq	1504(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L6948
	movq	8(%rcx), %rbx
	jmp	.L15125
.L6948:
	movq	1504(%rsp), %r11
	movq	24(%r11), %rsi
	testq	%rsi, %rsi
	je	.L6949
	movq	%rsi, 1504(%rsp)
	jmp	.L6943
.L6949:
	movq	1504(%rsp), %rdx
	movq	8(%rdx), %r13
	movzbl	2(%r13), %edi
	call	gen_reg_rtx
	movq	1504(%rsp), %rcx
	movq	%rax, %rdi
	movq	8(%rcx), %rsi
	movq	%rax, 24(%rcx)
	call	gen_move_insn
	movq	1504(%rsp), %rbx
	movq	%rax, %rdi
	movq	16(%rbx), %rsi
	call	emit_insn_before
	movq	1504(%rsp), %r14
	movq	24(%r14), %rsi
	movq	%rsi, 1504(%rsp)
	jmp	.L6943
.L6937:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L6933
.L16317:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L6931
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16324
.L6931:
	cmpl	$55, %eax
	jne	.L6934
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L6933
.L16324:
	movq	8(%rbp), %rcx
	movq	%rcx, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L6933
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	%r13, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L6933
.L6930:
	cmpq	$0, 16(%r12)
	jne	.L6938
	movq	8(%r12), %r12
	jmp	.L6933
.L6938:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L6939
	movq	%rsi, %r12
	jmp	.L6933
.L6939:
	movq	8(%r12), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L6933
.L6927:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L6923
.L16316:
	jne	.L6924
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L6923
.L6920:
	cmpq	$0, 16(%r15)
	jne	.L6928
	movq	8(%r15), %r15
	jmp	.L6923
.L6928:
	movq	24(%r15), %rdi
	testq	%rdi, %rdi
	je	.L6929
	movq	%rdi, %r15
	jmp	.L6923
.L6929:
	movq	8(%r15), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L6923
.L6909:
	movq	56(%rsp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	56(%rsp), %rdx
	movq	%rax, 8(%rdx)
	movq	56(%rsp), %rbx
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	56(%rsp), %r14
	movq	%rax, 16(%r14)
	jmp	.L6905
.L16294:
	jne	.L6906
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbx)
	jmp	.L6905
.L6902:
	movq	56(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L6910
	movq	8(%rcx), %r15
	jmp	.L6905
.L6910:
	movq	56(%rsp), %r15
	movq	24(%r15), %rax
	testq	%rax, %rax
	movq	%rax, %r15
	jne	.L6905
	movq	56(%rsp), %r9
	movq	8(%r9), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	56(%rsp), %r13
	movq	%rax, %rdi
	movq	8(%r13), %rsi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	56(%rsp), %r8
	movq	%rax, %rdi
	movq	16(%r8), %rsi
	call	emit_insn_before
	movq	56(%rsp), %rdi
	movq	24(%rdi), %r15
	jmp	.L6905
.L16293:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	4032(%rsp), %rdi
	movzbl	2(%rbx), %edx
	movq	%rax, %rsi
	jmp	.L15124
.L6881:
	movq	56(%rsp), %r10
	movl	(%r10), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L16325
	movq	56(%rsp), %r9
	movq	4032(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movzbl	2(%r9), %edx
	movq	%r9, %rsi
	call	expand_expr
	movq	56(%rsp), %rdx
	movq	%rax, %r12
	cmpw	$51, (%rdx)
	je	.L16326
.L6899:
	movzwl	(%r12), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L6900
	cmpw	$46, %dx
	je	.L6900
	cmpw	$47, %dx
	je	.L6900
	cmpw	$49, %dx
	je	.L6900
	cmpw	$113, %dx
	jne	.L6846
	jmp	.L6900
.L16326:
	cmpl	$63, 8(%rdx)
	jle	.L6846
	jmp	.L6899
.L16325:
	movq	4032(%rsp), %rdi
	jmp	.L15414
.L6890:
	movl	$1, %ebx
	jmp	.L6884
.L6882:
	xorl	%ebx, %ebx
	jmp	.L6884
.L6888:
	movq	56(%rsp), %rax
	xorl	%ebx, %ebx
	movq	8(%rax), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L6890
	movq	56(%rsp), %r8
	xorl	%eax, %eax
	movq	16(%r8), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L6884
	jmp	.L6890
.L16292:
	movzbl	2(%rdi), %eax
	cmpb	$16, %al
	je	.L6874
	movl	cse_not_expected(%rip), %ebx
	xorl	%esi, %esi
	movzbl	%al, %edx
	testl	%ebx, %ebx
	cmove	%rdi, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	movq	4032(%rsp), %rdi
	call	expand_expr
	movq	%rax, %r12
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L6900
	testb	%al, %al
	je	.L6900
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L15347
.L16291:
	movq	56(%rsp), %rsi
	cmpb	$16, 2(%rsi)
	jne	.L6847
	call	gen_label_rtx
	movq	%rax, %rbp
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r12
	testq	%rbx, %rbx
	jne	.L6851
.L14217:
	movq	56(%rsp), %rsi
	movzwl	(%rsi), %eax
	cmpl	$59, %eax
	je	.L6853
	cmpl	$55, %eax
	je	.L16327
.L6857:
	cmpl	$63, %eax
	je	.L6860
	cmpl	$66, %eax
	je	.L6860
.L6856:
	movq	4032(%rsp), %r9
	xorl	%eax, %eax
	movq	%rbp, %rsi
	incl	inhibit_defer_pop(%rip)
	movq	32(%r9), %rdi
	call	jumpifnot
	movq	4032(%rsp), %rsi
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	40(%rsi), %rdi
	movq	%r15, %rsi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L6866
.L14219:
	movq	%r12, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%rbp, %rdi
	call	emit_label
	xorl	%eax, %eax
	xorl	%edx, %edx
	movq	4032(%rsp), %rbp
	movq	%r15, %rsi
	movq	48(%rbp), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	je	.L14221
.L6871:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r14
	movq	%rax, 16(%rbx)
	testq	%r14, %r14
	movq	%r14, pending_chain(%rip)
	movq	%r14, %rbx
	jne	.L6871
	jmp	.L14221
.L6866:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r11
	movq	%rax, 16(%rbx)
	testq	%r11, %r11
	movq	%r11, pending_chain(%rip)
	movq	%r11, %rbx
	jne	.L6866
	jmp	.L14219
.L6860:
	movq	56(%rsp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	56(%rsp), %r14
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	56(%rsp), %r11
	movq	%rax, 16(%r11)
	jmp	.L6856
.L16327:
	jne	.L6857
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	56(%rsp), %rbx
	movq	%rax, 8(%rbx)
	jmp	.L6856
.L6853:
	movq	56(%rsp), %rbx
	cmpq	$0, 16(%rbx)
	jne	.L6861
	movq	8(%rbx), %r15
	jmp	.L6856
.L6861:
	movq	56(%rsp), %rdi
	movq	24(%rdi), %rdx
	testq	%rdx, %rdx
	movq	%rdx, %r15
	jne	.L6856
	movq	56(%rsp), %r15
	movq	8(%r15), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	56(%rsp), %r13
	movq	%rax, %rdi
	movq	8(%r13), %rsi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	56(%rsp), %r8
	movq	%rax, %rdi
	movq	16(%r8), %rsi
	call	emit_insn_before
	movq	56(%rsp), %rcx
	movq	24(%rcx), %r15
	jmp	.L6856
.L6851:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r9
	movq	%rax, 16(%rbx)
	testq	%r9, %r9
	movq	%r9, pending_chain(%rip)
	movq	%r9, %rbx
	jne	.L6851
	jmp	.L14217
.L16290:
	movq	32(%rdx), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L6843
.L14215:
	movq	4032(%rsp), %rcx
	jmp	.L15349
.L6843:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r15
	movq	%rax, 16(%rbx)
	testq	%r15, %r15
	movq	%r15, pending_chain(%rip)
	movq	%r15, %rbx
	jne	.L6843
	jmp	.L14215
.L6459:
	movq	1520(%rsp), %rdi
	movq	%r12, %rsi
.L15123:
	xorl	%eax, %eax
	call	convert_move
	jmp	.L6391
.L6458:
	cmpb	$16, %al
	je	.L16328
.L6714:
	movq	1520(%rsp), %rdi
	movq	%r12, %rsi
	jmp	.L15122
.L16328:
	movq	4152(%rsp), %rdi
	cmpb	$28, 16(%rdi)
	je	.L16329
	cmpb	$16, %al
	jne	.L6714
	movq	4152(%rsp), %rdi
	xorl	%eax, %eax
	call	expr_size
	movq	1520(%rsp), %rdx
	movq	4152(%rsp), %r9
	movq	%rax, %r13
	movq	8(%r9), %rdi
	movl	48(%rdi), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%rdx)
	movl	%eax, 1516(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	1520(%rsp), %rsi
	movzwl	(%rsi), %eax
	cmpl	$59, %eax
	je	.L6717
	cmpl	$55, %eax
	je	.L16330
.L6721:
	cmpl	$63, %eax
	je	.L6724
	cmpl	$66, %eax
	je	.L6724
.L6720:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L6727
	cmpl	$55, %eax
	je	.L16331
.L6731:
	cmpl	$63, %eax
	je	.L6734
	cmpl	$66, %eax
	je	.L6734
.L6730:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L6737
	cmpl	$55, %eax
	je	.L16332
.L6741:
	cmpl	$63, %eax
	je	.L6744
	cmpl	$66, %eax
	je	.L6744
.L6740:
	movq	1520(%rsp), %r8
	cmpw	$55, (%r8)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	testq	%r13, %r13
	je	.L15283
	cmpw	$46, (%r13)
	je	.L16333
.L6750:
	movl	1516(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 4064(%rsp)
	testl	%ebp, %ebp
	je	.L14213
.L6836:
	movslq	%ebp,%rax
	movq	%rax, 4056(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L6824
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L6828
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L6824
.L6828:
	movslq	%edx,%rcx
	leaq	(%rcx,%rcx,4), %r14
	movq	%rcx, 4048(%rsp)
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16334
.L6829:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16335
.L6830:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L6831
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	4064(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L6824
.L6831:
	call	get_last_insn
	movl	$1, %edx
	movq	%r13, %rsi
	movq	%rax, 4040(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16336
.L6832:
	movq	4048(%rsp), %rbp
	movq	1520(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	4064(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14951
	movq	4040(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L6824:
	movq	4056(%rsp), %r8
	movl	mode_wider_mode(,%r8,4), %ebp
	testl	%ebp, %ebp
	jne	.L6836
.L14213:
	movl	$4, %edi
	movq	%r13, %rsi
.L15121:
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%r12), %r13
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	1520(%rsp), %r12
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%r13, (%rsp)
	movq	8(%r12), %r8
	call	emit_library_call
	jmp	.L6391
.L14951:
	call	emit_insn
	jmp	.L6391
.L16336:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L6832
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L6832
.L16335:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L6824
	jmp	.L6830
.L16334:
	xorl	%eax, %eax
	movq	1520(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L6824
	jmp	.L6829
.L16333:
	movl	8(%r13), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1516(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1516(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L6764:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14204
.L6760:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L6760
.L14204:
	testl	%ecx, %ecx
	je	.L6753
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L6762
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L6762
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L6762:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L6764
.L6753:
	decl	%r9d
	jg	.L6750
	movq	1520(%rsp), %rcx
	movq	8(%r12), %rdi
	movl	%r10d, %r13d
	movl	$9, %r14d
	movq	8(%rcx), %rbx
	movq	%r12, 6632(%rsp)
	movq	%rcx, 6608(%rsp)
	movl	$0, 6660(%rsp)
	movq	%rdi, 6640(%rsp)
	xorl	%ecx, %ecx
	movq	%rbx, 6616(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L6767
	cmpw	$88, %dx
	je	.L6767
	cmpw	$87, %dx
	je	.L6767
.L6766:
	movl	%ecx, 6624(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L6769
	cmpw	$88, %dx
	je	.L6769
	cmpw	$87, %dx
	je	.L6769
.L6768:
	movl	%ecx, 6648(%rsp)
	movl	$0, 6652(%rsp)
	movl	$0, 6628(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L6771
	cmpw	$87, %ax
	je	.L6771
.L6770:
	testl	%edx, %edx
	movl	%edx, 6664(%rsp)
	je	.L6772
	movl	%r10d, 6660(%rsp)
.L6772:
	movl	%r10d, 6656(%rsp)
	movl	6648(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L6774
	movl	6624(%rsp), %eax
	testl	%eax, %eax
	jne	.L6773
.L6774:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1516(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1516(%rsp), %ebp
.L6788:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14207
.L6784:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L6784
.L14207:
	testl	%ecx, %ecx
	je	.L6777
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L6786
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L6786
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L6786:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L6788
.L6777:
	cmpl	$2, %r9d
	jle	.L6773
	testl	%r10d, %r10d
	jne	.L6790
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L6791
	cmpw	$46, %dx
	je	.L6791
	cmpw	$47, %dx
	je	.L6791
	cmpw	$49, %dx
	je	.L6791
	cmpw	$113, %dx
	je	.L6791
.L6790:
	movl	6624(%rsp), %eax
	testl	%eax, %eax
	jne	.L6773
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L6793
	cmpw	$46, %dx
	je	.L6793
	cmpw	$47, %dx
	je	.L6793
	cmpw	$49, %dx
	je	.L6793
	cmpw	$113, %dx
	je	.L6793
.L6773:
	cmpl	$8, 1516(%rsp)
	movl	$8, %eax
	cmovl	1516(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 1516(%rsp)
	jle	.L6796
.L6818:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14210
.L6803:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r14d, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L6803
.L14210:
	testl	%r12d, %r12d
	je	.L6796
	movslq	%r12d,%r13
	movq	%r13, %r9
	salq	$4, %r9
	addq	mov_optab(%rip), %r9
	movl	8(%r9), %edx
	cmpl	$210, %edx
	je	.L6805
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1516(%rsp)
	jl	.L6805
	movslq	%edx,%r14
	cmpl	%ebp, 6656(%rsp)
	leaq	6608(%rsp), %rbx
	movq	insn_gen_function(,%r14,8), %r11
	movq	%r11, 4072(%rsp)
	jl	.L6805
	movl	6664(%rsp), %edx
.L6816:
	testl	%edx, %edx
	je	.L6810
	subl	%ebp, 52(%rbx)
.L6810:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L6811
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15120:
	movl	40(%rbx), %edx
	movq	%rax, %r14
	testl	%edx, %edx
	je	.L6813
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L6814:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*4072(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L6815
	addl	%ebp, 52(%rbx)
.L6815:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L6816
.L6805:
	movl	mode_size(,%r13,4), %r14d
	cmpl	$1, %r14d
	jg	.L6818
.L6796:
	movl	6656(%rsp), %edi
	testl	%edi, %edi
.L15388:
	je	.L6391
	jmp	.L15283
.L6813:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L6814
.L6811:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15120
.L6793:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6616(%rsp)
	jmp	.L6773
.L6791:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6640(%rsp)
	jmp	.L6790
.L6771:
	movl	$1, %edx
	jmp	.L6770
.L6769:
	movl	$1, %ecx
	jmp	.L6768
.L6767:
	movl	$1, %ecx
	jmp	.L6766
.L6744:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L6740
.L16332:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L6738
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L16337
.L6738:
	cmpl	$55, %eax
	jne	.L6741
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L6740
.L16337:
	movq	8(%rbp), %r9
	movq	%r9, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L6740
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L6740
.L6737:
	cmpq	$0, 16(%r13)
	jne	.L6745
	movq	8(%r13), %r13
	jmp	.L6740
.L6745:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L6746
	movq	%rsi, %r13
	jmp	.L6740
.L6746:
	movq	8(%r13), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L6740
.L6734:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L6730
.L16331:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L6728
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16338
.L6728:
	cmpl	$55, %eax
	jne	.L6731
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L6730
.L16338:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L6730
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L6730
.L6727:
	cmpq	$0, 16(%r12)
	jne	.L6735
	movq	8(%r12), %r12
	jmp	.L6730
.L6735:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L6736
	movq	%rsi, %r12
	jmp	.L6730
.L6736:
	movq	8(%r12), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L6730
.L6724:
	movq	1520(%rsp), %r10
	xorl	%esi, %esi
	movq	8(%r10), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	1520(%rsp), %rcx
	movq	16(%rcx), %rdi
	movq	%rax, 8(%rcx)
	call	protect_from_queue
	movq	1520(%rsp), %r8
	movq	%rax, 16(%r8)
	jmp	.L6720
.L16330:
	jne	.L6721
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	1520(%rsp), %r11
	movq	%rax, 8(%r11)
	jmp	.L6720
.L6717:
	movq	1520(%rsp), %rbx
	cmpq	$0, 16(%rbx)
	jne	.L6725
	movq	8(%rbx), %rsi
.L15119:
	movq	%rsi, 1520(%rsp)
	jmp	.L6720
.L6725:
	movq	1520(%rsp), %rsi
	movq	24(%rsi), %rdi
	testq	%rdi, %rdi
	je	.L6726
	movq	%rdi, 1520(%rsp)
	jmp	.L6720
.L6726:
	movq	1520(%rsp), %rax
	movq	8(%rax), %rbp
	movzbl	2(%rbp), %edi
	call	gen_reg_rtx
	movq	1520(%rsp), %rbx
	movq	%rax, %rdi
	movq	8(%rbx), %rsi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	1520(%rsp), %r14
	movq	%rax, %rdi
	movq	16(%r14), %rsi
	call	emit_insn_before
	movq	24(%r14), %rsi
	jmp	.L15119
.L16329:
	xorl	%eax, %eax
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, 1576(%rsp)
	je	.L16339
.L6463:
	movl	$8, %edi
	call	size_int
	movl	$57, %edi
	movq	4152(%rsp), %rsi
	movq	%rax, %rdx
	movq	8(%rsi), %r10
	movq	32(%r10), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	4152(%rsp), %rbx
	movq	%rax, %rbp
	movl	32(%rbx), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%rbp, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movq	1520(%rsp), %r13
	movq	4152(%rsp), %rcx
	movq	$0, 1528(%rsp)
	movq	%rax, 1552(%rsp)
	movq	%rax, %r14
	movq	8(%rcx), %r8
	movl	48(%r8), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r13)
	movl	%eax, 1548(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	1520(%rsp), %rdi
	movq	%rdi, 1560(%rsp)
	movzwl	(%rdi), %eax
	cmpl	$59, %eax
	je	.L6589
	cmpl	$55, %eax
	je	.L16340
	cmpl	$63, %eax
	je	.L6596
	cmpl	$66, %eax
	je	.L6596
.L6592:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L6599
	cmpl	$55, %eax
	je	.L16341
.L6603:
	cmpl	$63, %eax
	je	.L6606
	cmpl	$66, %eax
	je	.L6606
.L6602:
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L6609
	cmpl	$55, %eax
	je	.L16342
.L6613:
	cmpl	$63, %eax
	je	.L6616
	cmpl	$66, %eax
	je	.L6616
.L6612:
	movq	1560(%rsp), %rbp
	cmpw	$55, (%rbp)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 1552(%rsp)
	je	.L15283
	movq	1552(%rsp), %rdx
	cmpw	$46, (%rdx)
	je	.L16343
.L6622:
	movl	1548(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 4104(%rsp)
	testl	%ebp, %ebp
	je	.L14201
.L6708:
	movslq	%ebp,%r9
	movq	%r9, %rax
	movq	%r9, 4096(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L6696
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L6700
	movq	1552(%rsp), %r11
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r11)
	ja	.L6696
.L6700:
	movslq	%edx,%rcx
	leaq	(%rcx,%rcx,4), %r13
	movq	%rcx, 4088(%rsp)
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16344
.L6701:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16345
.L6702:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L6703
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	4104(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L6696
.L6703:
	call	get_last_insn
	movl	$1, %edx
	movq	1552(%rsp), %rsi
	movq	%rax, 4080(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16346
.L6704:
	movq	4088(%rsp), %r13
	movq	1560(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	4104(%rsp), %rcx
	call	*insn_gen_function(,%r13,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14950
	movq	4080(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L6696:
	movq	4096(%rsp), %r8
	movl	mode_wider_mode(,%r8,4), %ebp
	testl	%ebp, %ebp
	jne	.L6708
.L14201:
	movq	1552(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movq	1560(%rsp), %r10
	movq	8(%r12), %rsi
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%edx, %edx
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	movl	$3, %ecx
	xorl	%eax, %eax
	movq	%rsi, (%rsp)
	movq	8(%r10), %r8
	xorl	%esi, %esi
	call	emit_library_call
.L6706:
	cmpw	$46, (%r14)
	je	.L16347
	movq	1520(%rsp), %rbp
	movl	$4, %edi
	movq	8(%rbp), %rsi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movl	$4, %edi
	movq	%r14, %rcx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	1576(%rsp), %rdx
	movl	$4, %edi
	movq	%r14, %rcx
	movq	%rax, %rbp
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 1528(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L6710:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L6711
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%rbp, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L6711:
	cmpq	$0, 1528(%rsp)
	je	.L6391
	movq	1528(%rsp), %rdi
	call	emit_label
	jmp	.L6391
.L16347:
	movq	4152(%rsp), %rbx
	movq	1520(%rsp), %rax
	movl	32(%rbx), %esi
	movq	8(%rax), %rdi
	call	plus_constant_wide
	movq	1576(%rsp), %rdi
	movq	4152(%rsp), %r14
	movq	%rax, %rbp
	movl	32(%r14), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L6710
.L14950:
	call	emit_insn
	jmp	.L6706
.L16346:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L6704
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L6704
.L16345:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L6696
	jmp	.L6702
.L16344:
	xorl	%eax, %eax
	movq	1560(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L6696
	jmp	.L6701
.L16343:
	movl	8(%rdx), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1548(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1548(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L6636:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14192
.L6632:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L6632
.L14192:
	testl	%ecx, %ecx
	je	.L6625
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L6634
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L6634
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L6634:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L6636
.L6625:
	decl	%r9d
	jg	.L6622
	movq	1560(%rsp), %r9
	movq	8(%r12), %rdi
	xorl	%ecx, %ecx
	movl	%r10d, %r13d
	movq	8(%r9), %rbx
	movq	%r12, 6632(%rsp)
	movq	%r9, 6608(%rsp)
	movl	$0, 6660(%rsp)
	movq	%rdi, 6640(%rsp)
	movl	$9, 1544(%rsp)
	movq	%rbx, 6616(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L6639
	cmpw	$88, %dx
	je	.L6639
	cmpw	$87, %dx
	je	.L6639
.L6638:
	movl	%ecx, 6624(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L6641
	cmpw	$88, %dx
	je	.L6641
	cmpw	$87, %dx
	je	.L6641
.L6640:
	movl	%ecx, 6648(%rsp)
	movl	$0, 6652(%rsp)
	movl	$0, 6628(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L6643
	cmpw	$87, %ax
	je	.L6643
.L6642:
	testl	%edx, %edx
	movl	%edx, 6664(%rsp)
	je	.L6644
	movl	%r10d, 6660(%rsp)
.L6644:
	movl	%r10d, 6656(%rsp)
	movl	6648(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L6646
	movl	6624(%rsp), %ecx
	testl	%ecx, %ecx
	jne	.L6645
.L6646:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1548(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1548(%rsp), %ebp
.L6660:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14195
.L6656:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L6656
.L14195:
	testl	%ecx, %ecx
	je	.L6649
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L6658
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L6658
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L6658:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L6660
.L6649:
	cmpl	$2, %r9d
	jle	.L6645
	testl	%r10d, %r10d
	jne	.L6662
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L6663
	cmpw	$46, %dx
	je	.L6663
	cmpw	$47, %dx
	je	.L6663
	cmpw	$49, %dx
	je	.L6663
	cmpw	$113, %dx
	je	.L6663
.L6662:
	movl	6624(%rsp), %eax
	testl	%eax, %eax
	jne	.L6645
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L6665
	cmpw	$46, %dx
	je	.L6665
	cmpw	$47, %dx
	je	.L6665
	cmpw	$49, %dx
	je	.L6665
	cmpw	$113, %dx
	je	.L6665
.L6645:
	cmpl	$8, 1548(%rsp)
	movl	$8, %eax
	cmovl	1548(%rsp), %eax
	cmpl	$1, 1544(%rsp)
	movl	%eax, 1548(%rsp)
	jle	.L6668
.L6690:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14198
.L6675:
	movslq	%edx,%rbx
	movl	1544(%rsp), %eax
	salq	$2, %rbx
	cmpl	%eax, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L6675
.L14198:
	testl	%r12d, %r12d
	je	.L6668
	movslq	%r12d,%r13
	movq	%r13, %rbp
	salq	$4, %rbp
	addq	mov_optab(%rip), %rbp
	movl	8(%rbp), %edx
	cmpl	$210, %edx
	je	.L6677
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1548(%rsp)
	jl	.L6677
	movslq	%edx,%rdi
	cmpl	%ebp, 6656(%rsp)
	leaq	6608(%rsp), %rbx
	movq	insn_gen_function(,%rdi,8), %rdx
	movq	%rdx, 4112(%rsp)
	jl	.L6677
	movl	6664(%rsp), %edx
.L6688:
	testl	%edx, %edx
	je	.L6682
	subl	%ebp, 52(%rbx)
.L6682:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L6683
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15118:
	movq	%rax, 1536(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L6685
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L6686:
	movq	%rax, %rsi
	movq	1536(%rsp), %rdi
	xorl	%eax, %eax
	call	*4112(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L6687
	addl	%ebp, 52(%rbx)
.L6687:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L6688
.L6677:
	movl	mode_size(,%r13,4), %r12d
	movl	%r12d, 1544(%rsp)
	decl	%r12d
	jg	.L6690
.L6668:
	movl	6656(%rsp), %eax
	testl	%eax, %eax
	je	.L6706
	jmp	.L15283
.L6685:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L6686
.L6683:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15118
.L6665:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6616(%rsp)
	jmp	.L6645
.L6663:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6640(%rsp)
	jmp	.L6662
.L6643:
	movl	$1, %edx
	jmp	.L6642
.L6641:
	movl	$1, %ecx
	jmp	.L6640
.L6639:
	movl	$1, %ecx
	jmp	.L6638
.L6616:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L6612
.L16342:
	movzbl	2(%r14), %edx
	cmpb	$16, %dl
	je	.L6610
	movq	8(%r14), %rbp
	cmpw	$59, (%rbp)
	je	.L16348
.L6610:
	cmpl	$55, %eax
	jne	.L6613
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L6612
.L16348:
	movq	8(%rbp), %r9
	movq	%r9, 8(%r14)
	cmpq	$0, 16(%rbp)
	je	.L6612
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r13, 1552(%rsp)
	jmp	.L6612
.L6609:
	cmpq	$0, 16(%r14)
	jne	.L6617
	movq	8(%r14), %r11
	movq	%r11, 1552(%rsp)
	jmp	.L6612
.L6617:
	movq	24(%r14), %rcx
	testq	%rcx, %rcx
	movq	%rcx, 1552(%rsp)
	jne	.L6612
	movq	8(%r14), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rax
	movq	%rax, 1552(%rsp)
	jmp	.L6612
.L6606:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L6602
.L16341:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L6600
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16349
.L6600:
	cmpl	$55, %eax
	jne	.L6603
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L6602
.L16349:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L6602
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	%r13, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L6602
.L6599:
	cmpq	$0, 16(%r12)
	jne	.L6607
	movq	8(%r12), %r12
	jmp	.L6602
.L6607:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L6608
	movq	%rsi, %r12
	jmp	.L6602
.L6608:
	movq	8(%r12), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L6602
.L6596:
	movq	1520(%rsp), %r13
	xorl	%esi, %esi
	movq	8(%r13), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L6592
.L16340:
	movq	1520(%rsp), %r9
	xorl	%esi, %esi
	movq	8(%r9), %rdi
	call	protect_from_queue
	movq	1520(%rsp), %rdx
	movq	%rax, 8(%rdx)
	jmp	.L6592
.L6589:
	movq	1520(%rsp), %rsi
	cmpq	$0, 16(%rsi)
	jne	.L6597
	movq	8(%rsi), %r11
	movq	%r11, 1560(%rsp)
	jmp	.L6592
.L6597:
	movq	1520(%rsp), %rax
	movq	24(%rax), %rcx
	testq	%rcx, %rcx
	movq	%rcx, 1560(%rsp)
	jne	.L6592
	movq	1520(%rsp), %rsi
	movq	8(%rsi), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	1520(%rsp), %rbx
	movq	%rax, %rdi
	movq	8(%rbx), %rsi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	1520(%rsp), %rbp
	movq	%rax, %rdi
	movq	16(%rbp), %rsi
	call	emit_insn_before
	movq	24(%rbp), %r8
	movq	%r8, 1560(%rsp)
	jmp	.L6592
.L16339:
	movq	4152(%rsp), %r8
	movq	1576(%rsp), %rbp
	movl	32(%r8), %eax
	cmpl	%eax, 8(%rbp)
	jge	.L6463
	movq	8(%r8), %rbx
	movq	1520(%rsp), %r8
	movl	48(%rbx), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r8)
	movl	%eax, 1572(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	1520(%rsp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$59, %eax
	je	.L6466
	cmpl	$55, %eax
	je	.L16350
.L6470:
	cmpl	$63, %eax
	je	.L6473
	cmpl	$66, %eax
	je	.L6473
.L6469:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L6476
	cmpl	$55, %eax
	je	.L16351
.L6480:
	cmpl	$63, %eax
	je	.L6483
	cmpl	$66, %eax
	je	.L6483
.L6479:
	movq	1576(%rsp), %rcx
	movzwl	(%rcx), %eax
	cmpl	$59, %eax
	je	.L6486
	cmpl	$55, %eax
	je	.L16352
.L6490:
	cmpl	$63, %eax
	je	.L6493
	cmpl	$66, %eax
	je	.L6493
.L6489:
	movq	1520(%rsp), %rdi
	cmpw	$55, (%rdi)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 1576(%rsp)
	je	.L15283
	movq	1576(%rsp), %rsi
	cmpw	$46, (%rsi)
	je	.L16353
.L6499:
	movl	1572(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 4136(%rsp)
	testl	%ebp, %ebp
	je	.L14189
.L6585:
	movslq	%ebp,%rax
	movq	%rax, 4128(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L6573
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L6577
	movq	1576(%rsp), %r11
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r11)
	ja	.L6573
.L6577:
	movslq	%edx,%r14
	leaq	(%r14,%r14,4), %r13
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16354
.L6578:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16355
.L6579:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L6580
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	4136(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L6573
.L6580:
	call	get_last_insn
	movl	$1, %edx
	movq	1576(%rsp), %rsi
	movq	%rax, 4120(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16356
.L6581:
	movq	1520(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	4136(%rsp), %rcx
	call	*insn_gen_function(,%r14,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14951
	movq	4120(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L6573:
	movq	4128(%rsp), %rax
	movl	mode_wider_mode(,%rax,4), %ebp
	testl	%ebp, %ebp
	jne	.L6585
.L14189:
	movq	1576(%rsp), %rsi
	movl	$4, %edi
	jmp	.L15121
.L16356:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L6581
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L6581
.L16355:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L6573
	jmp	.L6579
.L16354:
	xorl	%eax, %eax
	movq	1520(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L6573
	jmp	.L6578
.L16353:
	movl	8(%rsi), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1572(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1572(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L6513:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14180
.L6509:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L6509
.L14180:
	testl	%ecx, %ecx
	je	.L6502
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L6511
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L6511
	movl	%edi, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %edi
.L6511:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L6513
.L6502:
	decl	%r9d
	jg	.L6499
	movq	1520(%rsp), %r9
	movq	8(%r12), %rdi
	xorl	%ecx, %ecx
	movl	%r10d, %r13d
	movl	$9, %r14d
	movq	8(%r9), %rbx
	movq	%r12, 6696(%rsp)
	movq	%r9, 6672(%rsp)
	movl	$0, 6724(%rsp)
	movq	%rdi, 6704(%rsp)
	movq	%rbx, 6680(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L6516
	cmpw	$88, %dx
	je	.L6516
	cmpw	$87, %dx
	je	.L6516
.L6515:
	movl	%ecx, 6688(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L6518
	cmpw	$88, %dx
	je	.L6518
	cmpw	$87, %dx
	je	.L6518
.L6517:
	movl	%ecx, 6712(%rsp)
	movl	$0, 6716(%rsp)
	movl	$0, 6692(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L6520
	cmpw	$87, %ax
	je	.L6520
.L6519:
	testl	%edx, %edx
	movl	%edx, 6728(%rsp)
	je	.L6521
	movl	%r10d, 6724(%rsp)
.L6521:
	movl	%r10d, 6720(%rsp)
	movl	6712(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L6523
	movl	6688(%rsp), %eax
	testl	%eax, %eax
	jne	.L6522
.L6523:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1572(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1572(%rsp), %ebp
.L6537:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14183
.L6533:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L6533
.L14183:
	testl	%ecx, %ecx
	je	.L6526
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L6535
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L6535
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L6535:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L6537
.L6526:
	cmpl	$2, %r9d
	jle	.L6522
	testl	%r10d, %r10d
	jne	.L6539
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L6540
	cmpw	$46, %dx
	je	.L6540
	cmpw	$47, %dx
	je	.L6540
	cmpw	$49, %dx
	je	.L6540
	cmpw	$113, %dx
	je	.L6540
.L6539:
	movl	6688(%rsp), %esi
	testl	%esi, %esi
	jne	.L6522
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L6542
	cmpw	$46, %dx
	je	.L6542
	cmpw	$47, %dx
	je	.L6542
	cmpw	$49, %dx
	je	.L6542
	cmpw	$113, %dx
	je	.L6542
.L6522:
	cmpl	$8, 1572(%rsp)
	movl	$8, %eax
	cmovl	1572(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 1572(%rsp)
	jle	.L6545
.L6567:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14186
.L6552:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r14d, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L6552
.L14186:
	testl	%r12d, %r12d
	je	.L6545
	movslq	%r12d,%r13
	movq	%r13, %r10
	salq	$4, %r10
	addq	mov_optab(%rip), %r10
	movl	8(%r10), %edx
	cmpl	$210, %edx
	je	.L6554
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1572(%rsp)
	jl	.L6554
	movslq	%edx,%r14
	cmpl	%ebp, 6720(%rsp)
	leaq	6672(%rsp), %rbx
	movq	insn_gen_function(,%r14,8), %rdi
	movq	%rdi, 4144(%rsp)
	jl	.L6554
	movl	6728(%rsp), %edx
.L6565:
	testl	%edx, %edx
	je	.L6559
	subl	%ebp, 52(%rbx)
.L6559:
	movl	16(%rbx), %edx
	testl	%edx, %edx
	je	.L6560
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15117:
	movl	40(%rbx), %r9d
	movq	%rax, %r14
	testl	%r9d, %r9d
	je	.L6562
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L6563:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*4144(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L6564
	addl	%ebp, 52(%rbx)
.L6564:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L6565
.L6554:
	movl	mode_size(,%r13,4), %r14d
	cmpl	$1, %r14d
	jg	.L6567
.L6545:
	movl	6720(%rsp), %r12d
	testl	%r12d, %r12d
	jmp	.L15388
.L6562:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L6563
.L6560:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15117
.L6542:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6680(%rsp)
	jmp	.L6522
.L6540:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6704(%rsp)
	jmp	.L6539
.L6520:
	movl	$1, %edx
	jmp	.L6519
.L6518:
	movl	$1, %ecx
	jmp	.L6517
.L6516:
	movl	$1, %ecx
	jmp	.L6515
.L6493:
	movq	1576(%rsp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	1576(%rsp), %r11
	movq	%rax, 8(%r11)
	movq	1576(%rsp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	1576(%rsp), %r9
	movq	%rax, 16(%r9)
	jmp	.L6489
.L16352:
	movzbl	2(%rcx), %edx
	cmpb	$16, %dl
	je	.L6487
	movq	8(%rcx), %rbp
	cmpw	$59, (%rbp)
	je	.L16357
.L6487:
	cmpl	$55, %eax
	jne	.L6490
	movq	1576(%rsp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L6489
.L16357:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%rcx)
	cmpq	$0, 16(%rbp)
	je	.L6489
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	1576(%rsp), %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L15116:
	movq	%rbx, 1576(%rsp)
	jmp	.L6489
.L6486:
	movq	1576(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L6494
	movq	8(%rcx), %rbx
	jmp	.L15116
.L6494:
	movq	1576(%rsp), %rdx
	movq	24(%rdx), %rsi
	testq	%rsi, %rsi
	je	.L6495
	movq	%rsi, 1576(%rsp)
	jmp	.L6489
.L6495:
	movq	1576(%rsp), %r10
	movq	8(%r10), %r13
	movzbl	2(%r13), %edi
	call	gen_reg_rtx
	movq	1576(%rsp), %rbx
	movq	%rax, %rdi
	movq	8(%rbx), %rsi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	1576(%rsp), %r8
	movq	%rax, %rdi
	movq	16(%r8), %rsi
	call	emit_insn_before
	movq	1576(%rsp), %rbp
	movq	24(%rbp), %rsi
	movq	%rsi, 1576(%rsp)
	jmp	.L6489
.L6483:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L6479
.L16351:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L6477
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16358
.L6477:
	cmpl	$55, %eax
	jne	.L6480
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L6479
.L16358:
	movq	8(%rbp), %rbx
	movq	%rbx, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L6479
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	%r13, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L6479
.L6476:
	cmpq	$0, 16(%r12)
	jne	.L6484
	movq	8(%r12), %r12
	jmp	.L6479
.L6484:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L6485
	movq	%rsi, %r12
	jmp	.L6479
.L6485:
	movq	8(%r12), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L6479
.L6473:
	movq	1520(%rsp), %r9
	xorl	%esi, %esi
	movq	8(%r9), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	1520(%rsp), %r10
	movq	%rax, 8(%r10)
	movq	1520(%rsp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	1520(%rsp), %rdi
	movq	%rax, 16(%rdi)
	jmp	.L6469
.L16350:
	jne	.L6470
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbx)
	jmp	.L6469
.L6466:
	movq	1520(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L6474
	movq	8(%rcx), %r11
	movq	%r11, 1520(%rsp)
	jmp	.L6469
.L6474:
	movq	1520(%rsp), %rcx
	movq	24(%rcx), %rdi
	testq	%rdi, %rdi
	je	.L6475
	movq	%rdi, 1520(%rsp)
	jmp	.L6469
.L6475:
	movq	1520(%rsp), %r8
	movq	8(%r8), %rbp
	movzbl	2(%rbp), %edi
	call	gen_reg_rtx
	movq	1520(%rsp), %r14
	movq	%rax, %rdi
	movq	8(%r14), %rsi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	1520(%rsp), %rdx
	movq	%rax, %rdi
	movq	16(%rdx), %rsi
	call	emit_insn_before
	movq	1520(%rsp), %r13
	movq	24(%r13), %rsi
	movq	%rsi, 1520(%rsp)
	jmp	.L6469
.L6455:
	movq	56(%rsp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	56(%rsp), %r13
	movq	%rax, 8(%r13)
	movq	56(%rsp), %rdx
	movq	16(%rdx), %rdi
	call	protect_from_queue
	movq	56(%rsp), %rcx
	movq	%rax, 16(%rcx)
	jmp	.L6451
.L16289:
	jne	.L6452
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbx)
	jmp	.L6451
.L6448:
	movq	56(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L6456
	movq	8(%rcx), %r8
	movq	%r8, 1520(%rsp)
	jmp	.L6451
.L6456:
	movq	56(%rsp), %rax
	movq	24(%rax), %rbx
	testq	%rbx, %rbx
	movq	%rbx, 1520(%rsp)
	jne	.L6451
	movq	56(%rsp), %rcx
	movq	8(%rcx), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	56(%rsp), %r11
	movq	%rax, %rdi
	movq	8(%r11), %rsi
	movq	%rax, 24(%r11)
	call	gen_move_insn
	movq	56(%rsp), %r9
	movq	%rax, %rdi
	movq	16(%r9), %rsi
	call	emit_insn_before
	movq	56(%rsp), %r10
	movq	24(%r10), %rdi
	movq	%rdi, 1520(%rsp)
	jmp	.L6451
.L16288:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	4152(%rsp), %rdi
	movq	%rax, %rsi
	movq	56(%rsp), %rax
	movzbl	2(%rax), %edx
	jmp	.L15115
.L6427:
	movq	56(%rsp), %r10
	movl	(%r10), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L16359
	movq	56(%rsp), %r12
	movq	4152(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movzbl	2(%r12), %edx
	movq	%r12, %rsi
	call	expand_expr
	movq	56(%rsp), %rdx
	movq	%rax, %r12
	cmpw	$51, (%rdx)
	je	.L16360
.L6445:
	movzwl	(%r12), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L6446
	cmpw	$46, %dx
	je	.L6446
	cmpw	$47, %dx
	je	.L6446
	cmpw	$49, %dx
	je	.L6446
	cmpw	$113, %dx
	jne	.L6392
	jmp	.L6446
.L16360:
	cmpl	$63, 8(%rdx)
	jle	.L6392
	jmp	.L6445
.L16359:
	movq	4152(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	56(%rsp), %r9
	movq	%rax, %rsi
	movzbl	3(%r9), %edx
	movq	8(%r9), %rdi
	shrb	$2, %dl
	andl	$1, %edx
	jmp	.L15123
.L6436:
	movl	$1, %ebx
	jmp	.L6430
.L6428:
	xorl	%ebx, %ebx
	jmp	.L6430
.L6434:
	movq	56(%rsp), %r14
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	movq	8(%r14), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L6436
	movq	56(%rsp), %r8
	xorl	%eax, %eax
	movq	16(%r8), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L6430
	jmp	.L6436
.L16287:
	movzbl	2(%rcx), %eax
	cmpb	$16, %al
	je	.L6420
	movl	cse_not_expected(%rip), %r11d
	movq	4152(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	%al, %edx
	testl	%r11d, %r11d
	cmove	%rcx, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	call	expand_expr
	movq	%rax, %r12
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L6446
	testb	%al, %al
	je	.L6446
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L15346
.L16286:
	movq	56(%rsp), %rbx
	cmpb	$16, 2(%rbx)
	jne	.L6393
	call	gen_label_rtx
	movq	%rax, %rbp
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r12
	testq	%rbx, %rbx
	jne	.L6397
.L14173:
	movq	56(%rsp), %rdi
	movzwl	(%rdi), %eax
	cmpl	$59, %eax
	je	.L6399
	cmpl	$55, %eax
	je	.L16361
.L6403:
	cmpl	$63, %eax
	je	.L6406
	cmpl	$66, %eax
	je	.L6406
.L6402:
	movq	4152(%rsp), %rsi
	xorl	%eax, %eax
	incl	inhibit_defer_pop(%rip)
	movq	32(%rsi), %rdi
	movq	%rbp, %rsi
	call	jumpifnot
	movq	4152(%rsp), %r8
	movq	1520(%rsp), %rsi
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	40(%r8), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L6412
.L14175:
	movq	%r12, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%rbp, %rdi
	call	emit_label
	xorl	%eax, %eax
	xorl	%edx, %edx
	movq	4152(%rsp), %rbp
	movq	1520(%rsp), %rsi
	movq	48(%rbp), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L6417
.L14177:
	movq	%r12, %rdi
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L6391
.L6417:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r9
	movq	%rax, 16(%rbx)
	testq	%r9, %r9
	movq	%r9, pending_chain(%rip)
	movq	%r9, %rbx
	jne	.L6417
	jmp	.L14177
.L6412:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r10
	movq	%rax, 16(%rbx)
	testq	%r10, %r10
	movq	%r10, pending_chain(%rip)
	movq	%r10, %rbx
	jne	.L6412
	jmp	.L14175
.L6406:
	movq	56(%rsp), %r9
	xorl	%esi, %esi
	movq	8(%r9), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	56(%rsp), %r14
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L6402
.L16361:
	jne	.L6403
	movq	8(%rdi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	56(%rsp), %rsi
	movq	%rax, 8(%rsi)
	jmp	.L6402
.L6399:
	movq	56(%rsp), %rsi
	cmpq	$0, 16(%rsi)
	jne	.L6407
	movq	8(%rsi), %r11
	movq	%r11, 1520(%rsp)
	jmp	.L6402
.L6407:
	movq	56(%rsp), %rdx
	movq	24(%rdx), %rcx
	testq	%rcx, %rcx
	movq	%rcx, 1520(%rsp)
	jne	.L6402
	movq	56(%rsp), %rdi
	movq	8(%rdi), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	%rax, %rdi
	movq	56(%rsp), %rax
	movq	8(%rax), %rsi
	movq	%rdi, 24(%rax)
	call	gen_move_insn
	movq	56(%rsp), %r14
	movq	%rax, %rdi
	movq	16(%r14), %rsi
	call	emit_insn_before
	movq	24(%r14), %r13
	movq	%r13, 1520(%rsp)
	jmp	.L6402
.L6397:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r8
	movq	%rax, 16(%rbx)
	testq	%r8, %r8
	movq	%r8, pending_chain(%rip)
	movq	%r8, %rbx
	jne	.L6397
	jmp	.L14173
.L16285:
	movq	32(%rdx), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L6389
.L14171:
	movq	4152(%rsp), %rax
	movq	56(%rsp), %rsi
	xorl	%edx, %edx
	movq	40(%rax), %rdi
	xorl	%eax, %eax
	call	store_expr
	jmp	.L6391
.L6389:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdi
	movq	%rax, 16(%rbx)
	testq	%rdi, %rdi
	movq	%rdi, pending_chain(%rip)
	movq	%rdi, %rbx
	jne	.L6389
	jmp	.L14171
.L16284:
	cmpl	$63, 8(%rax)
	jg	.L6384
	movl	5412(%rsp), %edi
	call	gen_reg_rtx
	movq	%rax, 56(%rsp)
	jmp	.L6384
.L16283:
	cmpw	$55, (%r13)
	jne	.L6383
	testb	$32, 17(%rbx)
.L15344:
	je	.L6333
	jmp	.L6383
.L16282:
	movq	8(%r13), %r13
	cmpw	$51, (%r13)
	jne	.L6380
	cmpl	$63, 8(%r13)
	jg	.L6380
.L14948:
	xorl	%ebp, %ebp
	jmp	.L6333
.L6347:
	movq	32(%rbx), %rsi
	movq	%r12, %rdi
.L15343:
	xorl	%eax, %eax
	call	safe_from_p
.L15114:
	movl	%eax, %ebp
	jmp	.L6333
.L6349:
	movq	32(%rbx), %rsi
	xorl	%eax, %eax
	movq	%r12, %rdi
	xorl	%ebp, %ebp
	call	safe_from_p
	testl	%eax, %eax
	je	.L6333
	movq	%r12, %rdi
	movq	40(%rbx), %rsi
.L15345:
	xorl	%eax, %eax
	call	safe_from_p
	testl	%eax, %eax
	jmp	.L15344
.L6352:
	movzbl	%dl, %eax
	subl	$39, %eax
	cmpl	$67, %eax
	ja	.L6353
	mov	%eax, %r14d
	jmp	*.L6368(,%r14,8)
	.section	.rodata
	.align 8
	.align 4
.L6368:
	.quad	.L6355
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6366
	.quad	.L6357
	.quad	.L15283
	.quad	.L6364
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6353
	.quad	.L6365
	.quad	.L6362
	.quad	.L6354
	.text
.L6354:
	movq	32(%rbx), %rdi
	call	staticp
	jmp	.L15114
.L6355:
	xorl	%ebp, %ebp
	cmpw	$55, %cx
	je	.L6333
.L6353:
	testq	%r13, %r13
	jne	.L14865
	movzbl	%dl, %ecx 
	xorl	%ebp, %ebp
	salq	$2, %rcx
	addq	tree_code_length(%rip), %rcx
	movl	(%rcx), %r14d
	cmpl	%r14d, %ebp
	jge	.L6338
.L6376:
	movslq	%ebp,%rdx
	movq	32(%rbx,%rdx,8), %rsi
	testq	%rsi, %rsi
	jne	.L16362
.L6373:
	incl	%ebp
	cmpl	%r14d, %ebp
	jl	.L6376
	jmp	.L6338
.L16362:
	xorl	%eax, %eax
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L6373
	jmp	.L14948
.L6366:
	movq	%r12, %rdi
	movq	40(%rbx), %rsi
	jmp	.L15343
.L6357:
	movq	48(%rbx), %r13
	testq	%r13, %r13
	jne	.L14865
	cmpw	$51, %cx
	je	.L16363
.L6361:
	cmpw	$55, %cx
	jne	.L6353
	jmp	.L14948
.L16363:
	cmpl	$63, 8(%r12)
	jle	.L14948
	jmp	.L6361
.L6364:
	movq	40(%rbx), %r13
	jmp	.L6353
.L6365:
	movq	48(%rbx), %r13
	jmp	.L6353
.L6362:
	movq	40(%rbx), %r13
	xorl	%ebp, %ebp
	jmp	.L15113
.L6341:
	cmpb	$3, %dl
	jne	.L14948
	movq	32(%rbx), %rsi
	xorl	%ebp, %ebp
	testq	%rsi, %rsi
	jne	.L16364
.L6344:
	movq	(%rbx), %rsi
	movq	%r12, %rdi
	testq	%rsi, %rsi
	jne	.L15345
	jmp	.L6383
.L16364:
	xorl	%eax, %eax
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L6333
	jmp	.L6344
.L16281:
	movq	8(%r12), %rax
	movq	virtual_outgoing_args_rtx(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L6383
	cmpw	$63, (%rax)
	jne	.L6336
	cmpq	%rdx, 8(%rax)
	jne	.L6336
	jmp	.L6383
.L16280:
	movq	8(%r12), %r12
	movzwl	(%r12), %ecx
	cmpw	$51, %cx
	jne	.L6334
	cmpl	$63, 8(%r12)
	jg	.L6334
	jmp	.L14948
	.p2align 6,,7
.L16199:
	movq	40(%rdx), %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L5368
	movq	32(%r15), %rbp
	movq	40(%r15), %rsi
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	32(%rbp), %rdi
	call	operand_equal_p
	testl	%eax, %eax
	je	.L5368
	movq	32(%r15), %r8
	testb	$1, 17(%r8)
	jne	.L5368
	movq	56(%rsp), %r12
	xorl	%r13d, %r13d
	movq	48(%r15), %rbx
	movzwl	(%r12), %eax
	cmpw	$53, %ax
	je	.L16365
	movl	%eax, %ecx
.L5371:
	cmpw	$55, %cx
	je	.L16366
.L5373:
	movzbl	16(%rbx), %edx
	movzbl	%dl, %r11d 
	salq	$3, %r11
	addq	tree_code_type(%rip), %r11
	movq	(%r11), %r9
	movsbl	(%r9),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L5375
	mov	%eax, %esi
	jmp	*.L5414(,%rsi,8)
	.section	.rodata
	.align 8
	.align 4
.L5414:
	.quad	.L5384
	.quad	.L5386
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5386
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5420
	.quad	.L5376
	.quad	.L5389
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5389
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5375
	.quad	.L5378
	.text
.L5376:
	movq	120(%rbx), %r13
.L5375:
	movl	$1, %ebp
.L15094:
	testq	%r13, %r13
	je	.L5370
.L14864:
	cmpw	$53, (%r13)
	je	.L16367
.L5417:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	xorl	%ebp, %ebp
	testl	%eax, %eax
	jne	.L5370
	cmpw	$55, (%r12)
	je	.L16368
.L5420:
	movl	$1, %ebp
.L5370:
	testl	%ebp, %ebp
	je	.L5368
	movq	56(%rsp), %rax
	cmpw	$51, (%rax)
	je	.L16369
.L5421:
	movq	40(%r15), %rdx
	movq	56(%rsp), %r13
	xorl	%ebp, %ebp
	movq	%rdx, 4376(%rsp)
	movq	%r13, 1656(%rsp)
	movzbl	16(%rdx), %eax
	cmpb	$44, %al
	je	.L16370
	cmpb	$48, %al
	je	.L16371
.L5430:
	xorl	%r12d, %r12d
	testl	%r12d, %r12d
	je	.L5457
	movq	56(%rsp), %rcx
	cmpw	$55, (%rcx)
	je	.L16372
.L5457:
	movq	56(%rsp), %rcx
	movzwl	(%rcx), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L5465
	mov	%eax, %esi
	jmp	*.L5474(,%rsi,8)
	.section	.rodata
	.align 8
	.align 4
.L5474:
	.quad	.L5468
	.quad	.L5465
	.quad	.L5465
	.quad	.L5465
	.quad	.L5473
	.quad	.L5465
	.quad	.L5465
	.quad	.L5465
	.quad	.L5471
	.quad	.L5471
	.quad	.L5465
	.quad	.L5471
	.text
.L5468:
	movq	56(%rsp), %r13
	xorl	%eax, %eax
	movq	8(%r13), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L5467:
	testl	%ebx, %ebx
	je	.L5464
	movq	56(%rsp), %rbx
	movzbl	2(%rbx), %eax
	cmpb	$16, %al
	je	.L5476
	testb	%al, %al
	jne	.L16373
.L5476:
	movq	56(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	2(%rdi), %edx
	movq	4376(%rsp), %rdi
.L15096:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L15341:
	movq	%rax, %r12
.L5483:
	movl	$1, %ebp
.L5429:
	cmpq	56(%rsp), %r12
	je	.L5428
	movq	4376(%rsp), %rdx
	cmpb	$0, 16(%rdx)
	je	.L5428
	movq	56(%rsp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$59, %eax
	je	.L5485
	cmpl	$55, %eax
	je	.L16374
.L5489:
	cmpl	$63, %eax
	je	.L5492
	cmpl	$66, %eax
	je	.L5492
.L5488:
	movq	1656(%rsp), %rbx
	movzbl	2(%r12), %eax
	movzbl	2(%rbx), %ecx
	cmpb	%cl, %al
	je	.L5495
	testb	%al, %al
	je	.L5495
	movq	4376(%rsp), %r8
	movq	8(%r8), %r14
	movzbl	17(%r14), %r13d
	shrb	$6, %r13b
	movl	%r13d, %edx
	andl	$1, %edx
	testl	%ebp, %ebp
	je	.L5496
	movzbl	%cl, %edi
	movq	%r12, %rsi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%rbx, %rdi
	movq	%rax, %rsi
.L15103:
	call	emit_move_insn
.L5428:
	movq	32(%r15), %rdi
	movq	1920(%rsp), %rsi
	xorl	%eax, %eax
	xorl	%ebp, %ebp
	call	jumpif
	movq	48(%r15), %r8
	movq	56(%rsp), %r15
	movq	%r8, 4256(%rsp)
	movq	4256(%rsp), %rdx
	movzbl	16(%rdx), %eax
	cmpb	$44, %al
	je	.L16375
	cmpb	$48, %al
	je	.L16376
.L5884:
	xorl	%r12d, %r12d
	testl	%r12d, %r12d
	je	.L5911
	movq	56(%rsp), %rdi
	cmpw	$55, (%rdi)
	je	.L16377
.L5911:
	movq	56(%rsp), %rsi
	movzwl	(%rsi), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L5919
	mov	%eax, %r14d
	jmp	*.L5928(,%r14,8)
	.section	.rodata
	.align 8
	.align 4
.L5928:
	.quad	.L5922
	.quad	.L5919
	.quad	.L5919
	.quad	.L5919
	.quad	.L5927
	.quad	.L5919
	.quad	.L5919
	.quad	.L5919
	.quad	.L5925
	.quad	.L5925
	.quad	.L5919
	.quad	.L5925
	.text
.L5922:
	movq	56(%rsp), %rdx
	xorl	%eax, %eax
	movq	8(%rdx), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L5921:
	testl	%ebx, %ebx
	je	.L5918
	movq	56(%rsp), %rbx
	movzbl	2(%rbx), %eax
	cmpb	$16, %al
	je	.L5930
	testb	%al, %al
	jne	.L16378
.L5930:
	movq	56(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	2(%rdi), %edx
	movq	4256(%rsp), %rdi
.L15105:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L15342:
	movq	%rax, %r12
.L5937:
	movl	$1, %ebp
.L5883:
	cmpq	56(%rsp), %r12
	je	.L6845
	movq	4256(%rsp), %r10
	cmpb	$0, 16(%r10)
	je	.L6845
	movq	56(%rsp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$59, %eax
	je	.L5939
	cmpl	$55, %eax
	je	.L16379
.L5943:
	cmpl	$63, %eax
	je	.L5946
	cmpl	$66, %eax
	je	.L5946
.L5942:
	movzbl	2(%r12), %eax
	movzbl	2(%r15), %ecx
	cmpb	%cl, %al
	je	.L5949
	testb	%al, %al
	je	.L5949
	movq	4256(%rsp), %rbx
	jmp	.L15416
.L5949:
	cmpb	$16, %al
	jne	.L7168
	movq	4256(%rsp), %rsi
	cmpb	$28, 16(%rsi)
	je	.L16380
	cmpb	$16, %al
	jne	.L7168
	movq	4256(%rsp), %rdi
	xorl	%eax, %eax
	call	expr_size
	movq	%rax, %r13
	movq	4256(%rsp), %rax
	movq	8(%rax), %rdi
	movl	48(%rdi), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r15)
	movl	%eax, 1588(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L6208
	cmpl	$55, %eax
	je	.L16381
.L6212:
	cmpl	$63, %eax
	je	.L6215
	cmpl	$66, %eax
	je	.L6215
.L6211:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L6218
	cmpl	$55, %eax
	je	.L16382
.L6222:
	cmpl	$63, %eax
	je	.L6225
	cmpl	$66, %eax
	je	.L6225
.L6221:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L6228
	cmpl	$55, %eax
	je	.L16383
.L6232:
	cmpl	$63, %eax
	je	.L6235
	cmpl	$66, %eax
	je	.L6235
.L6231:
	cmpw	$55, (%r15)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	testq	%r13, %r13
	je	.L15283
	cmpw	$46, (%r13)
	je	.L16384
.L6241:
	movl	1588(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 4184(%rsp)
	testl	%ebp, %ebp
	je	.L14257
.L6327:
	movslq	%ebp,%rax
	movq	%rax, 4176(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L6315
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L6319
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L6315
.L6319:
	movslq	%edx,%r11
	leaq	(%r11,%r11,4), %r14
	movq	%r11, 4168(%rsp)
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16385
.L6320:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16386
.L6321:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L6322
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	4184(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L6315
.L6322:
	call	get_last_insn
	movl	$1, %edx
	movq	%r13, %rsi
	movq	%rax, 4160(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16387
.L6323:
	movq	4168(%rsp), %r14
	movq	%r15, %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	4184(%rsp), %rcx
	call	*insn_gen_function(,%r14,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14954
	movq	4160(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L6315:
	movq	4176(%rsp), %rdx
	movl	mode_wider_mode(,%rdx,4), %ebp
	testl	%ebp, %ebp
	jne	.L6327
	jmp	.L14257
.L16387:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L6323
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L6323
.L16386:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L6315
	jmp	.L6321
.L16385:
	xorl	%eax, %eax
	movq	%r15, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L6315
	jmp	.L6320
.L16384:
	movl	8(%r13), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1588(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1588(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L6255:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14159
.L6251:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L6251
.L14159:
	testl	%ecx, %ecx
	je	.L6244
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L6253
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L6253
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L6253:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L6255
.L6244:
	decl	%r9d
	jg	.L6241
	movq	8(%r15), %rbx
	movq	8(%r12), %rdi
	xorl	%ecx, %ecx
	movq	%r12, 6760(%rsp)
	movl	$0, 6788(%rsp)
	movq	%r15, 6736(%rsp)
	movl	%r10d, %r13d
	movl	$9, %r14d
	movq	%rbx, 6744(%rsp)
	movq	%rdi, 6768(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L6258
	cmpw	$88, %dx
	je	.L6258
	cmpw	$87, %dx
	je	.L6258
.L6257:
	movl	%ecx, 6752(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L6260
	cmpw	$88, %dx
	je	.L6260
	cmpw	$87, %dx
	je	.L6260
.L6259:
	movl	%ecx, 6776(%rsp)
	movl	$0, 6780(%rsp)
	movl	$0, 6756(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L6262
	cmpw	$87, %ax
	je	.L6262
.L6261:
	testl	%edx, %edx
	movl	%edx, 6792(%rsp)
	je	.L6263
	movl	%r10d, 6788(%rsp)
.L6263:
	movl	%r10d, 6784(%rsp)
	movl	6776(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L6265
	movl	6752(%rsp), %eax
	testl	%eax, %eax
	jne	.L6264
.L6265:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1588(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1588(%rsp), %ebp
.L6279:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14162
.L6275:
	movslq	%edx,%r15
	salq	$2, %r15
	cmpl	%r8d, mode_size(%r15)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r15), %edx
	testl	%edx, %edx
	jne	.L6275
.L14162:
	testl	%ecx, %ecx
	je	.L6268
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L6277
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L6277
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L6277:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L6279
.L6268:
	cmpl	$2, %r9d
	jle	.L6264
	testl	%r10d, %r10d
	jne	.L6281
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L6282
	cmpw	$46, %dx
	je	.L6282
	cmpw	$47, %dx
	je	.L6282
	cmpw	$49, %dx
	je	.L6282
	cmpw	$113, %dx
	je	.L6282
.L6281:
	movl	6752(%rsp), %eax
	testl	%eax, %eax
	jne	.L6264
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L6284
	cmpw	$46, %dx
	je	.L6284
	cmpw	$47, %dx
	je	.L6284
	cmpw	$49, %dx
	je	.L6284
	cmpw	$113, %dx
	je	.L6284
.L6264:
	cmpl	$8, 1588(%rsp)
	movl	$8, %eax
	cmovl	1588(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 1588(%rsp)
	jle	.L6287
.L6309:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14165
.L6294:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r14d, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L6294
.L14165:
	testl	%r12d, %r12d
	je	.L6287
	movslq	%r12d,%r13
	movq	%r13, %rcx
	salq	$4, %rcx
	addq	mov_optab(%rip), %rcx
	movl	8(%rcx), %edx
	cmpl	$210, %edx
	je	.L6296
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1588(%rsp)
	jl	.L6296
	cmpl	%ebp, 6784(%rsp)
	movslq	%edx,%r9
	leaq	6736(%rsp), %rbx
	movq	insn_gen_function(,%r9,8), %r15
	jl	.L6296
	movl	6792(%rsp), %edx
.L6307:
	testl	%edx, %edx
	je	.L6301
	subl	%ebp, 52(%rbx)
.L6301:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L6302
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15109:
	movq	%rax, %r14
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L6304
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L6305:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*%r15
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L6306
	addl	%ebp, 52(%rbx)
.L6306:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L6307
.L6296:
	movl	mode_size(,%r13,4), %r14d
	cmpl	$1, %r14d
	jg	.L6309
.L6287:
	movl	6784(%rsp), %eax
	testl	%eax, %eax
	jmp	.L15389
.L6304:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L6305
.L6302:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15109
.L6284:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6744(%rsp)
	jmp	.L6264
.L6282:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6768(%rsp)
	jmp	.L6281
.L6262:
	movl	$1, %edx
	jmp	.L6261
.L6260:
	movl	$1, %ecx
	jmp	.L6259
.L6258:
	movl	$1, %ecx
	jmp	.L6257
.L6235:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L6231
.L16383:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L6229
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L16388
.L6229:
	cmpl	$55, %eax
	jne	.L6232
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L6231
.L16388:
	movq	8(%rbp), %r8
	movq	%r8, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L6231
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L6231
.L6228:
	cmpq	$0, 16(%r13)
	jne	.L6236
	movq	8(%r13), %r13
	jmp	.L6231
.L6236:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L6237
	movq	%rsi, %r13
	jmp	.L6231
.L6237:
	movq	8(%r13), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L6231
.L6225:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L6221
.L16382:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L6219
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16389
.L6219:
	cmpl	$55, %eax
	jne	.L6222
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L6221
.L16389:
	movq	8(%rbp), %rcx
	movq	%rcx, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L6221
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L6221
.L6218:
	cmpq	$0, 16(%r12)
	jne	.L6226
	movq	8(%r12), %r12
	jmp	.L6221
.L6226:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L6227
	movq	%rsi, %r12
	jmp	.L6221
.L6227:
	movq	8(%r12), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L6221
.L6215:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L6211
.L16381:
	jne	.L6212
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L6211
.L6208:
	cmpq	$0, 16(%r15)
	jne	.L6216
	movq	8(%r15), %r15
	jmp	.L6211
.L6216:
	movq	24(%r15), %rdi
	testq	%rdi, %rdi
	je	.L6217
	movq	%rdi, %r15
	jmp	.L6211
.L6217:
	movq	8(%r15), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L6211
.L16380:
	xorl	%eax, %eax
	movq	%rsi, %rdi
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, 1640(%rsp)
	je	.L16390
.L5954:
	movl	$8, %edi
	call	size_int
	movl	$57, %edi
	movq	4256(%rsp), %r10
	movq	%rax, %rdx
	movq	8(%r10), %r11
	movq	32(%r11), %rsi
	call	size_binop
	movq	4256(%rsp), %rsi
	movq	%rax, %rbp
	movl	32(%rsi), %edi
	xorl	%esi, %esi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%rbp, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movq	4256(%rsp), %r13
	movq	$0, 1592(%rsp)
	movq	%rax, 1616(%rsp)
	movq	%rax, %r14
	movq	8(%r13), %r8
	movl	48(%r8), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r15)
	movl	%eax, 1612(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r15, 1624(%rsp)
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L6080
	cmpl	$55, %eax
	je	.L16391
	cmpl	$63, %eax
	je	.L6087
	cmpl	$66, %eax
	je	.L6087
.L6083:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L6090
	cmpl	$55, %eax
	je	.L16392
.L6094:
	cmpl	$63, %eax
	je	.L6097
	cmpl	$66, %eax
	je	.L6097
.L6093:
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L6100
	cmpl	$55, %eax
	je	.L16393
.L6104:
	cmpl	$63, %eax
	je	.L6107
	cmpl	$66, %eax
	je	.L6107
.L6103:
	movq	1624(%rsp), %rax
	cmpw	$55, (%rax)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 1616(%rsp)
	je	.L15283
	movq	1616(%rsp), %rax
	cmpw	$46, (%rax)
	je	.L16394
.L6113:
	movl	1612(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 4216(%rsp)
	testl	%ebp, %ebp
	je	.L14156
.L6199:
	movslq	%ebp,%r8
	movq	%r8, %rax
	movq	%r8, 4208(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L6187
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L6191
	movq	1616(%rsp), %r13
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L6187
.L6191:
	movslq	%edx,%r11
	leaq	(%r11,%r11,4), %r13
	movq	%r11, 4200(%rsp)
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16395
.L6192:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16396
.L6193:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L6194
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	4216(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L6187
.L6194:
	call	get_last_insn
	movl	$1, %edx
	movq	1616(%rsp), %rsi
	movq	%rax, 4192(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16397
.L6195:
	movq	4200(%rsp), %rbp
	movq	1624(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	4216(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14946
	movq	4192(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L6187:
	movq	4208(%rsp), %rsi
	movl	mode_wider_mode(,%rsi,4), %ebp
	testl	%ebp, %ebp
	jne	.L6199
.L14156:
	movq	1616(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movq	1624(%rsp), %r10
	movq	8(%r12), %rbx
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	movl	$3, %ecx
	xorl	%eax, %eax
	movq	%rbx, (%rsp)
	movq	8(%r10), %r8
	call	emit_library_call
.L6197:
	cmpw	$46, (%r14)
	je	.L16398
	movq	8(%r15), %rsi
	movl	$4, %edi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movl	$4, %edi
	movq	%r14, %rcx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	1640(%rsp), %rdx
	movl	$4, %edi
	movq	%r14, %rcx
	movq	%rax, %rbp
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 1592(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L6201:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L6202
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%rbp, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L6202:
	cmpq	$0, 1592(%rsp)
	je	.L6845
	movq	1592(%rsp), %rdi
	jmp	.L15348
.L16398:
	movq	4256(%rsp), %r14
	movq	8(%r15), %rdi
	movl	32(%r14), %esi
	call	plus_constant_wide
	movq	1640(%rsp), %rdi
	movq	4256(%rsp), %r15
	movq	%rax, %rbp
	movl	32(%r15), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L6201
.L14946:
	call	emit_insn
	jmp	.L6197
.L16397:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L6195
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L6195
.L16396:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L6187
	jmp	.L6193
.L16395:
	xorl	%eax, %eax
	movq	1624(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L6187
	jmp	.L6192
.L16394:
	movl	8(%rax), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1612(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1612(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L6127:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14147
.L6123:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L6123
.L14147:
	testl	%ecx, %ecx
	je	.L6116
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L6125
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L6125
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L6125:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L6127
.L6116:
	decl	%r9d
	jg	.L6113
	movq	1624(%rsp), %rcx
	movq	8(%r12), %rdi
	movl	%r10d, %r13d
	movq	8(%rcx), %rbx
	movq	%r12, 6760(%rsp)
	movq	%rcx, 6736(%rsp)
	movl	$0, 6788(%rsp)
	movq	%rdi, 6768(%rsp)
	xorl	%ecx, %ecx
	movl	$9, 1608(%rsp)
	movq	%rbx, 6744(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L6130
	cmpw	$88, %dx
	je	.L6130
	cmpw	$87, %dx
	je	.L6130
.L6129:
	movl	%ecx, 6752(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L6132
	cmpw	$88, %dx
	je	.L6132
	cmpw	$87, %dx
	je	.L6132
.L6131:
	movl	%ecx, 6776(%rsp)
	movl	$0, 6780(%rsp)
	movl	$0, 6756(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L6134
	cmpw	$87, %ax
	je	.L6134
.L6133:
	testl	%edx, %edx
	movl	%edx, 6792(%rsp)
	je	.L6135
	movl	%r10d, 6788(%rsp)
.L6135:
	movl	%r10d, 6784(%rsp)
	movl	6776(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L6137
	movl	6752(%rsp), %ebp
	testl	%ebp, %ebp
	jne	.L6136
.L6137:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1612(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1612(%rsp), %ebp
.L6151:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14150
.L6147:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L6147
.L14150:
	testl	%ecx, %ecx
	je	.L6140
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L6149
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L6149
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L6149:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L6151
.L6140:
	cmpl	$2, %r9d
	jle	.L6136
	testl	%r10d, %r10d
	jne	.L6153
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L6154
	cmpw	$46, %dx
	je	.L6154
	cmpw	$47, %dx
	je	.L6154
	cmpw	$49, %dx
	je	.L6154
	cmpw	$113, %dx
	je	.L6154
.L6153:
	movl	6752(%rsp), %esi
	testl	%esi, %esi
	jne	.L6136
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L6156
	cmpw	$46, %dx
	je	.L6156
	cmpw	$47, %dx
	je	.L6156
	cmpw	$49, %dx
	je	.L6156
	cmpw	$113, %dx
	je	.L6156
.L6136:
	cmpl	$8, 1612(%rsp)
	movl	$8, %eax
	cmovl	1612(%rsp), %eax
	cmpl	$1, 1608(%rsp)
	movl	%eax, 1612(%rsp)
	jle	.L6159
.L6181:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14153
.L6166:
	movslq	%edx,%rbx
	movl	1608(%rsp), %eax
	salq	$2, %rbx
	cmpl	%eax, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L6166
.L14153:
	testl	%r12d, %r12d
	je	.L6159
	movslq	%r12d,%r13
	movq	%r13, %rdi
	salq	$4, %rdi
	addq	mov_optab(%rip), %rdi
	movl	8(%rdi), %edx
	cmpl	$210, %edx
	je	.L6168
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1612(%rsp)
	jl	.L6168
	movslq	%edx,%rcx
	cmpl	%ebp, 6784(%rsp)
	leaq	6736(%rsp), %rbx
	movq	insn_gen_function(,%rcx,8), %rdx
	movq	%rdx, 4224(%rsp)
	jl	.L6168
	movl	6792(%rsp), %edx
.L6179:
	testl	%edx, %edx
	je	.L6173
	subl	%ebp, 52(%rbx)
.L6173:
	movl	16(%rbx), %r9d
	testl	%r9d, %r9d
	je	.L6174
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15108:
	movq	%rax, 1600(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L6176
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L6177:
	movq	%rax, %rsi
	movq	1600(%rsp), %rdi
	xorl	%eax, %eax
	call	*4224(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L6178
	addl	%ebp, 52(%rbx)
.L6178:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L6179
.L6168:
	movl	mode_size(,%r13,4), %r12d
	movl	%r12d, 1608(%rsp)
	decl	%r12d
	jg	.L6181
.L6159:
	movl	6784(%rsp), %eax
	testl	%eax, %eax
	je	.L6197
	jmp	.L15283
.L6176:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L6177
.L6174:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15108
.L6156:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6744(%rsp)
	jmp	.L6136
.L6154:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6768(%rsp)
	jmp	.L6153
.L6134:
	movl	$1, %edx
	jmp	.L6133
.L6132:
	movl	$1, %ecx
	jmp	.L6131
.L6130:
	movl	$1, %ecx
	jmp	.L6129
.L6107:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L6103
.L16393:
	movzbl	2(%r14), %edx
	cmpb	$16, %dl
	je	.L6101
	movq	8(%r14), %rbp
	cmpw	$59, (%rbp)
	je	.L16399
.L6101:
	cmpl	$55, %eax
	jne	.L6104
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L6103
.L16399:
	movq	8(%rbp), %r8
	movq	%r8, 8(%r14)
	cmpq	$0, 16(%rbp)
	je	.L6103
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r13, 1616(%rsp)
	jmp	.L6103
.L6100:
	cmpq	$0, 16(%r14)
	jne	.L6108
	movq	8(%r14), %rbp
	movq	%rbp, 1616(%rsp)
	jmp	.L6103
.L6108:
	movq	24(%r14), %r11
	testq	%r11, %r11
	movq	%r11, 1616(%rsp)
	jne	.L6103
	movq	8(%r14), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rsi
	movq	%rsi, 1616(%rsp)
	jmp	.L6103
.L6097:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L6093
.L16392:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L6091
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16400
.L6091:
	cmpl	$55, %eax
	jne	.L6094
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L6093
.L16400:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L6093
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	%r13, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L6093
.L6090:
	cmpq	$0, 16(%r12)
	jne	.L6098
	movq	8(%r12), %r12
	jmp	.L6093
.L6098:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L6099
	movq	%rsi, %r12
	jmp	.L6093
.L6099:
	movq	8(%r12), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L6093
.L6087:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L6083
.L16391:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L6083
.L6080:
	cmpq	$0, 16(%r15)
	jne	.L6088
	movq	8(%r15), %rax
	movq	%rax, 1624(%rsp)
	jmp	.L6083
.L6088:
	movq	24(%r15), %rcx
	testq	%rcx, %rcx
	movq	%rcx, 1624(%rsp)
	jne	.L6083
	movq	8(%r15), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %rdx
	movq	%rdx, 1624(%rsp)
	jmp	.L6083
.L16390:
	movq	4256(%rsp), %rdi
	movq	1640(%rsp), %rbp
	movl	32(%rdi), %eax
	cmpl	%eax, 8(%rbp)
	jge	.L5954
	movq	8(%rdi), %r11
	movl	48(%r11), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r15)
	movl	%eax, 1636(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L5957
	cmpl	$55, %eax
	je	.L16401
.L5961:
	cmpl	$63, %eax
	je	.L5964
	cmpl	$66, %eax
	je	.L5964
.L5960:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L5967
	cmpl	$55, %eax
	je	.L16402
.L5971:
	cmpl	$63, %eax
	je	.L5974
	cmpl	$66, %eax
	je	.L5974
.L5970:
	movq	1640(%rsp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$59, %eax
	je	.L5977
	cmpl	$55, %eax
	je	.L16403
.L5981:
	cmpl	$63, %eax
	je	.L5984
	cmpl	$66, %eax
	je	.L5984
.L5980:
	cmpw	$55, (%r15)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 1640(%rsp)
	je	.L15283
	movq	1640(%rsp), %rbx
	cmpw	$46, (%rbx)
	je	.L16404
.L5990:
	movl	1636(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 4248(%rsp)
	testl	%ebp, %ebp
	je	.L14144
.L6076:
	movslq	%ebp,%rax
	movq	%rax, 4240(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L6064
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L6068
	movq	1640(%rsp), %rdi
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%rdi)
	ja	.L6064
.L6068:
	movslq	%edx,%r14
	leaq	(%r14,%r14,4), %r13
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16405
.L6069:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16406
.L6070:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L6071
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	4248(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L6064
.L6071:
	call	get_last_insn
	movl	$1, %edx
	movq	1640(%rsp), %rsi
	movq	%rax, 4232(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16407
.L6072:
	movq	%r15, %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	4248(%rsp), %rcx
	call	*insn_gen_function(,%r14,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14954
	movq	4232(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L6064:
	movq	4240(%rsp), %r9
	movl	mode_wider_mode(,%r9,4), %ebp
	testl	%ebp, %ebp
	jne	.L6076
.L14144:
	movq	1640(%rsp), %rsi
	movl	$4, %edi
	jmp	.L15129
.L16407:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L6072
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L6072
.L16406:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L6064
	jmp	.L6070
.L16405:
	xorl	%eax, %eax
	movq	%r15, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L6064
	jmp	.L6069
.L16404:
	movl	8(%rbx), %r10d
	xorl	%r9d, %r9d
	movl	$9, %r8d
	cmpl	$8, 1636(%rsp)
	movl	$8, %ebx
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1636(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L6004:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14135
.L6000:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L6000
.L14135:
	testl	%ecx, %ecx
	je	.L5993
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L6002
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L6002
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L6002:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L6004
.L5993:
	decl	%r9d
	jg	.L5990
	movq	8(%r15), %rbx
	movq	8(%r12), %rdi
	xorl	%ecx, %ecx
	movq	%r12, 6824(%rsp)
	movl	$0, 6852(%rsp)
	movq	%r15, 6800(%rsp)
	movl	%r10d, %r13d
	movl	$9, %r14d
	movq	%rbx, 6808(%rsp)
	movq	%rdi, 6832(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L6007
	cmpw	$88, %dx
	je	.L6007
	cmpw	$87, %dx
	je	.L6007
.L6006:
	movl	%ecx, 6816(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L6009
	cmpw	$88, %dx
	je	.L6009
	cmpw	$87, %dx
	je	.L6009
.L6008:
	movl	%ecx, 6840(%rsp)
	movl	$0, 6844(%rsp)
	movl	$0, 6820(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L6011
	cmpw	$87, %ax
	je	.L6011
.L6010:
	testl	%edx, %edx
	movl	%edx, 6856(%rsp)
	je	.L6012
	movl	%r10d, 6852(%rsp)
.L6012:
	movl	%r10d, 6848(%rsp)
	movl	6840(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L6014
	movl	6816(%rsp), %r9d
	testl	%r9d, %r9d
	jne	.L6013
.L6014:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1636(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1636(%rsp), %ebp
.L6028:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14138
.L6024:
	movslq	%edx,%r15
	salq	$2, %r15
	cmpl	%r8d, mode_size(%r15)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r15), %edx
	testl	%edx, %edx
	jne	.L6024
.L14138:
	testl	%ecx, %ecx
	je	.L6017
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L6026
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L6026
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L6026:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L6028
.L6017:
	cmpl	$2, %r9d
	jle	.L6013
	testl	%r10d, %r10d
	jne	.L6030
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L6031
	cmpw	$46, %dx
	je	.L6031
	cmpw	$47, %dx
	je	.L6031
	cmpw	$49, %dx
	je	.L6031
	cmpw	$113, %dx
	je	.L6031
.L6030:
	movl	6816(%rsp), %eax
	testl	%eax, %eax
	jne	.L6013
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L6033
	cmpw	$46, %dx
	je	.L6033
	cmpw	$47, %dx
	je	.L6033
	cmpw	$49, %dx
	je	.L6033
	cmpw	$113, %dx
	je	.L6033
.L6013:
	cmpl	$8, 1636(%rsp)
	movl	$8, %eax
	cmovl	1636(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 1636(%rsp)
	jle	.L6036
.L6058:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14141
.L6043:
	movslq	%edx,%r11
	salq	$2, %r11
	cmpl	%r14d, mode_size(%r11)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%r11), %edx
	testl	%edx, %edx
	jne	.L6043
.L14141:
	testl	%r12d, %r12d
	je	.L6036
	movslq	%r12d,%r13
	movq	%r13, %r10
	salq	$4, %r10
	addq	mov_optab(%rip), %r10
	movl	8(%r10), %edx
	cmpl	$210, %edx
	je	.L6045
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1636(%rsp)
	jl	.L6045
	cmpl	%ebp, 6848(%rsp)
	movslq	%edx,%rcx
	leaq	6800(%rsp), %rbx
	movq	insn_gen_function(,%rcx,8), %r15
	jl	.L6045
	movl	6856(%rsp), %edx
.L6056:
	testl	%edx, %edx
	je	.L6050
	subl	%ebp, 52(%rbx)
.L6050:
	movl	16(%rbx), %r14d
	testl	%r14d, %r14d
	je	.L6051
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15107:
	movl	40(%rbx), %edx
	movq	%rax, %r14
	testl	%edx, %edx
	je	.L6053
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L6054:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*%r15
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L6055
	addl	%ebp, 52(%rbx)
.L6055:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L6056
.L6045:
	movl	mode_size(,%r13,4), %r14d
	cmpl	$1, %r14d
	jg	.L6058
.L6036:
	movl	6848(%rsp), %ebx
	testl	%ebx, %ebx
	jmp	.L15389
.L6053:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L6054
.L6051:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15107
.L6033:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6808(%rsp)
	jmp	.L6013
.L6031:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6832(%rsp)
	jmp	.L6030
.L6011:
	movl	$1, %edx
	jmp	.L6010
.L6009:
	movl	$1, %ecx
	jmp	.L6008
.L6007:
	movl	$1, %ecx
	jmp	.L6006
.L5984:
	movq	1640(%rsp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	1640(%rsp), %r8
	movq	%rax, 8(%r8)
	movq	1640(%rsp), %rdx
	movq	16(%rdx), %rdi
	call	protect_from_queue
	movq	1640(%rsp), %r9
	movq	%rax, 16(%r9)
	jmp	.L5980
.L16403:
	movq	%rdx, %rcx
	movzbl	2(%rdx), %edx
	cmpb	$16, %dl
	je	.L5978
	movq	8(%rcx), %rbp
	cmpw	$59, (%rbp)
	je	.L16408
.L5978:
	cmpl	$55, %eax
	jne	.L5981
	movq	1640(%rsp), %r13
	xorl	%esi, %esi
	movq	8(%r13), %rdi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L5980
.L16408:
	movq	8(%rbp), %rsi
	movq	%rsi, 8(%rcx)
	cmpq	$0, 16(%rbp)
	je	.L5980
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	1640(%rsp), %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L15106:
	movq	%rbx, 1640(%rsp)
	jmp	.L5980
.L5977:
	movq	1640(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L5985
	movq	8(%rcx), %rbx
	jmp	.L15106
.L5985:
	movq	1640(%rsp), %rbp
	movq	24(%rbp), %rsi
	testq	%rsi, %rsi
	je	.L5986
	movq	%rsi, 1640(%rsp)
	jmp	.L5980
.L5986:
	movq	1640(%rsp), %rbx
	movq	8(%rbx), %r14
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	1640(%rsp), %rcx
	movq	%rax, %rdi
	movq	8(%rcx), %rsi
	movq	%rax, 24(%rcx)
	call	gen_move_insn
	movq	1640(%rsp), %r10
	movq	%rax, %rdi
	movq	16(%r10), %rsi
	call	emit_insn_before
	movq	1640(%rsp), %r11
	movq	24(%r11), %rdi
	movq	%rdi, 1640(%rsp)
	jmp	.L5980
.L5974:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L5970
.L16402:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L5968
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16409
.L5968:
	cmpl	$55, %eax
	jne	.L5971
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L5970
.L16409:
	movq	8(%rbp), %rcx
	movq	%rcx, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L5970
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L5970
.L5967:
	cmpq	$0, 16(%r12)
	jne	.L5975
	movq	8(%r12), %r12
	jmp	.L5970
.L5975:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L5976
	movq	%rsi, %r12
	jmp	.L5970
.L5976:
	movq	8(%r12), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L5970
.L5964:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L5960
.L16401:
	jne	.L5961
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L5960
.L5957:
	cmpq	$0, 16(%r15)
	jne	.L5965
	movq	8(%r15), %r15
	jmp	.L5960
.L5965:
	movq	24(%r15), %rdi
	testq	%rdi, %rdi
	je	.L5966
	movq	%rdi, %r15
	jmp	.L5960
.L5966:
	movq	8(%r15), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L5960
.L5946:
	movq	56(%rsp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	movq	56(%rsp), %rsi
	movq	%rax, 8(%rsi)
	xorl	%esi, %esi
	movq	56(%rsp), %rbx
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	56(%rsp), %rcx
	movq	%rax, 16(%rcx)
	jmp	.L5942
.L16379:
	jne	.L5943
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbx)
	jmp	.L5942
.L5939:
	movq	56(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L5947
	movq	8(%rcx), %r15
	jmp	.L5942
.L5947:
	movq	56(%rsp), %r15
	movq	24(%r15), %rdx
	testq	%rdx, %rdx
	movq	%rdx, %r15
	jne	.L5942
	movq	56(%rsp), %rdi
	movq	8(%rdi), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	56(%rsp), %r13
	movq	%rax, %rdi
	movq	8(%r13), %rsi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	56(%rsp), %r9
	movq	%rax, %rdi
	movq	16(%r9), %rsi
	call	emit_insn_before
	movq	56(%rsp), %rax
	movq	24(%rax), %r15
	jmp	.L5942
.L16378:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	4256(%rsp), %rdi
	movzbl	2(%rbx), %edx
	movq	%rax, %rsi
	jmp	.L15105
.L5918:
	movq	56(%rsp), %r8
	movl	(%r8), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L16410
	movq	56(%rsp), %r13
	movq	4256(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movzbl	2(%r13), %edx
	movq	%r13, %rsi
	call	expand_expr
	movq	56(%rsp), %rdx
	movq	%rax, %r12
	cmpw	$51, (%rdx)
	je	.L16411
.L5936:
	movzwl	(%r12), %edx
	leal	-56(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L5937
	cmpw	$46, %dx
	je	.L5937
	cmpw	$47, %dx
	je	.L5937
	cmpw	$49, %dx
	je	.L5937
	cmpw	$113, %dx
	jne	.L5883
	jmp	.L5937
.L16411:
	cmpl	$63, 8(%rdx)
	jle	.L5883
	jmp	.L5936
.L16410:
	movq	4256(%rsp), %rdi
	jmp	.L15414
.L5927:
	movl	$1, %ebx
	jmp	.L5921
.L5919:
	xorl	%ebx, %ebx
	jmp	.L5921
.L5925:
	movq	56(%rsp), %rax
	xorl	%ebx, %ebx
	movq	8(%rax), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L5927
	movq	56(%rsp), %r9
	xorl	%eax, %eax
	movq	16(%r9), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L5921
	jmp	.L5927
.L16377:
	movzbl	2(%rdi), %eax
	cmpb	$16, %al
	je	.L5911
	movl	cse_not_expected(%rip), %ebx
	xorl	%esi, %esi
	movzbl	%al, %edx
	testl	%ebx, %ebx
	cmove	%rdi, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	movq	4256(%rsp), %rdi
	call	expand_expr
	movq	%rax, %r12
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L5937
	testb	%al, %al
	je	.L5937
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L15342
.L16376:
	movq	56(%rsp), %r13
	cmpb	$16, 2(%r13)
	jne	.L5884
	call	gen_label_rtx
	movq	%rax, %rbp
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r12
	testq	%rbx, %rbx
	jne	.L5888
.L14128:
	movq	56(%rsp), %rsi
	movzwl	(%rsi), %eax
	cmpl	$59, %eax
	je	.L5890
	cmpl	$55, %eax
	je	.L16412
.L5894:
	cmpl	$63, %eax
	je	.L5897
	cmpl	$66, %eax
	je	.L5897
.L5893:
	movq	4256(%rsp), %r11
	xorl	%eax, %eax
	movq	%rbp, %rsi
	incl	inhibit_defer_pop(%rip)
	movq	32(%r11), %rdi
	call	jumpifnot
	movq	4256(%rsp), %r13
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%r15, %rsi
	movq	40(%r13), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L5903
.L14130:
	movq	%r12, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%rbp, %rdi
	call	emit_label
	xorl	%eax, %eax
	xorl	%edx, %edx
	movq	4256(%rsp), %rbp
	movq	%r15, %rsi
	movq	48(%rbp), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	je	.L14221
.L5908:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r10
	movq	%rax, 16(%rbx)
	testq	%r10, %r10
	movq	%r10, pending_chain(%rip)
	movq	%r10, %rbx
	jne	.L5908
	jmp	.L14221
.L5903:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rcx
	movq	%rax, 16(%rbx)
	testq	%rcx, %rcx
	movq	%rcx, pending_chain(%rip)
	movq	%rcx, %rbx
	jne	.L5903
	jmp	.L14130
.L5897:
	movq	56(%rsp), %rsi
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	56(%rsp), %r10
	movq	16(%r10), %rdi
	movq	%rax, 8(%r10)
	call	protect_from_queue
	movq	56(%rsp), %rbx
	movq	%rax, 16(%rbx)
	jmp	.L5893
.L16412:
	jne	.L5894
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	56(%rsp), %r11
	movq	%rax, 8(%r11)
	jmp	.L5893
.L5890:
	movq	56(%rsp), %rbx
	cmpq	$0, 16(%rbx)
	jne	.L5898
	movq	8(%rbx), %r15
	jmp	.L5893
.L5898:
	movq	56(%rsp), %rax
	movq	24(%rax), %r14
	testq	%r14, %r14
	movq	%r14, %r15
	jne	.L5893
	movq	56(%rsp), %r15
	movq	8(%r15), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	56(%rsp), %r9
	movq	%rax, %rdi
	movq	8(%r9), %rsi
	movq	%rax, 24(%r9)
	call	gen_move_insn
	movq	56(%rsp), %rdx
	movq	%rax, %rdi
	movq	16(%rdx), %rsi
	call	emit_insn_before
	movq	56(%rsp), %rdi
	movq	24(%rdi), %r15
	jmp	.L5893
.L5888:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rcx
	movq	%rax, 16(%rbx)
	testq	%rcx, %rcx
	movq	%rcx, pending_chain(%rip)
	movq	%rcx, %rbx
	jne	.L5888
	jmp	.L14128
.L16375:
	movq	32(%rdx), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L5880
.L14126:
	movq	4256(%rsp), %rcx
	jmp	.L15349
.L5880:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r15
	movq	%rax, 16(%rbx)
	testq	%r15, %r15
	movq	%r15, pending_chain(%rip)
	movq	%r15, %rbx
	jne	.L5880
	jmp	.L14126
.L5496:
	movq	1656(%rsp), %rdi
	movq	%r12, %rsi
.L15104:
	xorl	%eax, %eax
	call	convert_move
	jmp	.L5428
.L5495:
	cmpb	$16, %al
	je	.L16413
.L5751:
	movq	1656(%rsp), %rdi
	movq	%r12, %rsi
	jmp	.L15103
.L16413:
	movq	4376(%rsp), %rdi
	cmpb	$28, 16(%rdi)
	je	.L16414
	cmpb	$16, %al
	jne	.L5751
	movq	4376(%rsp), %rdi
	xorl	%eax, %eax
	call	expr_size
	movq	1656(%rsp), %rdi
	movq	4376(%rsp), %r8
	movq	%rax, %r13
	movq	8(%r8), %r11
	movl	48(%r11), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%rdi)
	movl	%eax, 1652(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	1656(%rsp), %rsi
	movzwl	(%rsi), %eax
	cmpl	$59, %eax
	je	.L5754
	cmpl	$55, %eax
	je	.L16415
.L5758:
	cmpl	$63, %eax
	je	.L5761
	cmpl	$66, %eax
	je	.L5761
.L5757:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L5764
	cmpl	$55, %eax
	je	.L16416
.L5768:
	cmpl	$63, %eax
	je	.L5771
	cmpl	$66, %eax
	je	.L5771
.L5767:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L5774
	cmpl	$55, %eax
	je	.L16417
.L5778:
	cmpl	$63, %eax
	je	.L5781
	cmpl	$66, %eax
	je	.L5781
.L5777:
	movq	1656(%rsp), %rsi
	cmpw	$55, (%rsi)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	testq	%r13, %r13
	je	.L15283
	cmpw	$46, (%r13)
	je	.L16418
.L5787:
	movl	1652(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 4288(%rsp)
	testl	%ebp, %ebp
	je	.L14124
.L5873:
	movslq	%ebp,%rax
	movq	%rax, 4280(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L5861
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L5865
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L5861
.L5865:
	movslq	%edx,%rdi
	leaq	(%rdi,%rdi,4), %r14
	movq	%rdi, 4272(%rsp)
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16419
.L5866:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16420
.L5867:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L5868
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	4288(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L5861
.L5868:
	call	get_last_insn
	movl	$1, %edx
	movq	%r13, %rsi
	movq	%rax, 4264(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16421
.L5869:
	movq	4272(%rsp), %rbp
	movq	1656(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	4288(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14944
	movq	4264(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L5861:
	movq	4280(%rsp), %rdx
	movl	mode_wider_mode(,%rdx,4), %ebp
	testl	%ebp, %ebp
	jne	.L5873
.L14124:
	movl	$4, %edi
	movq	%r13, %rsi
.L15102:
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$3, %ecx
	xorl	%edx, %edx
	movq	8(%r12), %r9
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	1656(%rsp), %r12
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%eax, %eax
	movq	%r9, (%rsp)
	movl	$4, %r9d
	movq	8(%r12), %r8
	call	emit_library_call
	jmp	.L5428
.L14944:
	call	emit_insn
	jmp	.L5428
.L16421:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L5869
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L5869
.L16420:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L5861
	jmp	.L5867
.L16419:
	xorl	%eax, %eax
	movq	1656(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L5861
	jmp	.L5866
.L16418:
	movl	8(%r13), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1652(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1652(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L5801:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14115
.L5797:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L5797
.L14115:
	testl	%ecx, %ecx
	je	.L5790
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L5799
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L5799
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L5799:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L5801
.L5790:
	decl	%r9d
	jg	.L5787
	movq	1656(%rsp), %rbp
	movq	8(%r12), %rdi
	xorl	%ecx, %ecx
	movl	%r10d, %r13d
	movl	$9, %r14d
	movq	8(%rbp), %rbx
	movq	%r12, 6888(%rsp)
	movq	%rbp, 6864(%rsp)
	movl	$0, 6916(%rsp)
	movq	%rdi, 6896(%rsp)
	movq	%rbx, 6872(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L5804
	cmpw	$88, %dx
	je	.L5804
	cmpw	$87, %dx
	je	.L5804
.L5803:
	movl	%ecx, 6880(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L5806
	cmpw	$88, %dx
	je	.L5806
	cmpw	$87, %dx
	je	.L5806
.L5805:
	movl	%ecx, 6904(%rsp)
	movl	$0, 6908(%rsp)
	movl	$0, 6884(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L5808
	cmpw	$87, %ax
	je	.L5808
.L5807:
	testl	%edx, %edx
	movl	%edx, 6920(%rsp)
	je	.L5809
	movl	%r10d, 6916(%rsp)
.L5809:
	movl	%r10d, 6912(%rsp)
	movl	6904(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L5811
	movl	6880(%rsp), %eax
	testl	%eax, %eax
	jne	.L5810
.L5811:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1652(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1652(%rsp), %ebp
.L5825:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14118
.L5821:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L5821
.L14118:
	testl	%ecx, %ecx
	je	.L5814
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L5823
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L5823
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L5823:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L5825
.L5814:
	cmpl	$2, %r9d
	jle	.L5810
	testl	%r10d, %r10d
	jne	.L5827
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L5828
	cmpw	$46, %dx
	je	.L5828
	cmpw	$47, %dx
	je	.L5828
	cmpw	$49, %dx
	je	.L5828
	cmpw	$113, %dx
	je	.L5828
.L5827:
	movl	6880(%rsp), %eax
	testl	%eax, %eax
	jne	.L5810
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L5830
	cmpw	$46, %dx
	je	.L5830
	cmpw	$47, %dx
	je	.L5830
	cmpw	$49, %dx
	je	.L5830
	cmpw	$113, %dx
	je	.L5830
.L5810:
	cmpl	$8, 1652(%rsp)
	movl	$8, %eax
	cmovl	1652(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 1652(%rsp)
	jle	.L5833
.L5855:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14121
.L5840:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r14d, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L5840
.L14121:
	testl	%r12d, %r12d
	je	.L5833
	movslq	%r12d,%r13
	movq	%r13, %r10
	salq	$4, %r10
	addq	mov_optab(%rip), %r10
	movl	8(%r10), %edx
	cmpl	$210, %edx
	je	.L5842
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1652(%rsp)
	jl	.L5842
	movslq	%edx,%r14
	cmpl	%ebp, 6912(%rsp)
	leaq	6864(%rsp), %rbx
	movq	insn_gen_function(,%r14,8), %rsi
	movq	%rsi, 4296(%rsp)
	jl	.L5842
	movl	6920(%rsp), %edx
.L5853:
	testl	%edx, %edx
	je	.L5847
	subl	%ebp, 52(%rbx)
.L5847:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L5848
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15101:
	movq	%rax, %r14
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L5850
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L5851:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*4296(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L5852
	addl	%ebp, 52(%rbx)
.L5852:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L5853
.L5842:
	movl	mode_size(,%r13,4), %r14d
	cmpl	$1, %r14d
	jg	.L5855
.L5833:
	movl	6912(%rsp), %eax
	testl	%eax, %eax
.L15385:
	je	.L5428
	jmp	.L15283
.L5850:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L5851
.L5848:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15101
.L5830:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6872(%rsp)
	jmp	.L5810
.L5828:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6896(%rsp)
	jmp	.L5827
.L5808:
	movl	$1, %edx
	jmp	.L5807
.L5806:
	movl	$1, %ecx
	jmp	.L5805
.L5804:
	movl	$1, %ecx
	jmp	.L5803
.L5781:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L5777
.L16417:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L5775
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L16422
.L5775:
	cmpl	$55, %eax
	jne	.L5778
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L5777
.L16422:
	movq	8(%rbp), %r8
	movq	%r8, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L5777
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L5777
.L5774:
	cmpq	$0, 16(%r13)
	jne	.L5782
	movq	8(%r13), %r13
	jmp	.L5777
.L5782:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L5783
	movq	%rsi, %r13
	jmp	.L5777
.L5783:
	movq	8(%r13), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L5777
.L5771:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L5767
.L16416:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L5765
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16423
.L5765:
	cmpl	$55, %eax
	jne	.L5768
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L5767
.L16423:
	movq	8(%rbp), %r11
	movq	%r11, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L5767
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L5767
.L5764:
	cmpq	$0, 16(%r12)
	jne	.L5772
	movq	8(%r12), %r12
	jmp	.L5767
.L5772:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L5773
	movq	%rsi, %r12
	jmp	.L5767
.L5773:
	movq	8(%r12), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L5767
.L5761:
	movq	1656(%rsp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	1656(%rsp), %rbp
	movq	16(%rbp), %rdi
	movq	%rax, 8(%rbp)
	call	protect_from_queue
	movq	1656(%rsp), %rsi
	movq	%rax, 16(%rsi)
	jmp	.L5757
.L16415:
	jne	.L5758
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	1656(%rsp), %r10
	movq	%rax, 8(%r10)
	jmp	.L5757
.L5754:
	movq	1656(%rsp), %rbx
	cmpq	$0, 16(%rbx)
	jne	.L5762
	movq	8(%rbx), %rsi
.L15100:
	movq	%rsi, 1656(%rsp)
	jmp	.L5757
.L5762:
	movq	1656(%rsp), %rcx
	movq	24(%rcx), %rdi
	testq	%rdi, %rdi
	je	.L5763
	movq	%rdi, 1656(%rsp)
	jmp	.L5757
.L5763:
	movq	1656(%rsp), %rdi
	movq	8(%rdi), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	1656(%rsp), %rbx
	movq	%rax, %rdi
	movq	8(%rbx), %rsi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	1656(%rsp), %r14
	movq	%rax, %rdi
	movq	16(%r14), %rsi
	call	emit_insn_before
	movq	24(%r14), %rsi
	jmp	.L15100
.L16414:
	xorl	%eax, %eax
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, 1712(%rsp)
	je	.L16424
.L5500:
	movl	$8, %edi
	call	size_int
	movl	$57, %edi
	movq	4376(%rsp), %rsi
	movq	%rax, %rdx
	movq	8(%rsi), %rbx
	movq	32(%rbx), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	4376(%rsp), %r10
	movq	%rax, %r14
	movl	32(%r10), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%r14, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movq	1656(%rsp), %r13
	movq	4376(%rsp), %rbp
	movq	$0, 1664(%rsp)
	movq	%rax, 1688(%rsp)
	movq	%rax, %r14
	movq	8(%rbp), %r8
	movl	48(%r8), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r13)
	movl	%eax, 1684(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	1656(%rsp), %rdi
	movq	%rdi, 1696(%rsp)
	movzwl	(%rdi), %eax
	cmpl	$59, %eax
	je	.L5626
	cmpl	$55, %eax
	je	.L16425
	cmpl	$63, %eax
	je	.L5633
	cmpl	$66, %eax
	je	.L5633
.L5629:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L5636
	cmpl	$55, %eax
	je	.L16426
.L5640:
	cmpl	$63, %eax
	je	.L5643
	cmpl	$66, %eax
	je	.L5643
.L5639:
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L5646
	cmpl	$55, %eax
	je	.L16427
.L5650:
	cmpl	$63, %eax
	je	.L5653
	cmpl	$66, %eax
	je	.L5653
.L5649:
	movq	1696(%rsp), %rbp
	cmpw	$55, (%rbp)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 1688(%rsp)
	je	.L15283
	movq	1688(%rsp), %rdx
	cmpw	$46, (%rdx)
	je	.L16428
.L5659:
	movl	1684(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 4328(%rsp)
	testl	%ebp, %ebp
	je	.L14112
.L5745:
	movslq	%ebp,%r8
	movq	%r8, %rax
	movq	%r8, 4320(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L5733
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L5737
	movq	1688(%rsp), %r13
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L5733
.L5737:
	movslq	%edx,%rax
	leaq	(%rax,%rax,4), %r13
	movq	%rax, 4312(%rsp)
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16429
.L5738:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16430
.L5739:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L5740
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	4328(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L5733
.L5740:
	call	get_last_insn
	movl	$1, %edx
	movq	1688(%rsp), %rsi
	movq	%rax, 4304(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16431
.L5741:
	movq	4312(%rsp), %r10
	movq	1696(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	4328(%rsp), %rcx
	call	*insn_gen_function(,%r10,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14943
	movq	4304(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L5733:
	movq	4320(%rsp), %rsi
	movl	mode_wider_mode(,%rsi,4), %ebp
	testl	%ebp, %ebp
	jne	.L5745
.L14112:
	movq	1688(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movq	1696(%rsp), %rbp
	movq	8(%r12), %rcx
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%rcx, (%rsp)
	movq	8(%rbp), %r8
	movl	$3, %ecx
	call	emit_library_call
.L5743:
	cmpw	$46, (%r14)
	je	.L16432
	movq	1656(%rsp), %r9
	movl	$4, %edi
	movq	8(%r9), %rsi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movl	$4, %edi
	movq	%r14, %rcx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	1712(%rsp), %rdx
	movl	$4, %edi
	movq	%r14, %rcx
	movq	%rax, %rbp
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 1664(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L5747:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L5748
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%rbp, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L5748:
	cmpq	$0, 1664(%rsp)
	je	.L5428
	movq	1664(%rsp), %rdi
	call	emit_label
	jmp	.L5428
.L16432:
	movq	1656(%rsp), %rdx
	movq	4376(%rsp), %rbx
	movq	8(%rdx), %rdi
	movl	32(%rbx), %esi
	call	plus_constant_wide
	movq	1712(%rsp), %rdi
	movq	4376(%rsp), %r14
	movq	%rax, %rbp
	movl	32(%r14), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L5747
.L14943:
	call	emit_insn
	jmp	.L5743
.L16431:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L5741
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L5741
.L16430:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L5733
	jmp	.L5739
.L16429:
	xorl	%eax, %eax
	movq	1696(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L5733
	jmp	.L5738
.L16428:
	movl	8(%rdx), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1684(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1684(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L5673:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14103
.L5669:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L5669
.L14103:
	testl	%ecx, %ecx
	je	.L5662
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L5671
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L5671
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L5671:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L5673
.L5662:
	decl	%r9d
	jg	.L5659
	movq	1696(%rsp), %r9
	movq	8(%r12), %rdi
	xorl	%ecx, %ecx
	movl	%r10d, %r13d
	movq	8(%r9), %rbx
	movq	%r12, 6888(%rsp)
	movq	%r9, 6864(%rsp)
	movl	$0, 6916(%rsp)
	movq	%rdi, 6896(%rsp)
	movl	$9, 1680(%rsp)
	movq	%rbx, 6872(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L5676
	cmpw	$88, %dx
	je	.L5676
	cmpw	$87, %dx
	je	.L5676
.L5675:
	movl	%ecx, 6880(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L5678
	cmpw	$88, %dx
	je	.L5678
	cmpw	$87, %dx
	je	.L5678
.L5677:
	movl	%ecx, 6904(%rsp)
	movl	$0, 6908(%rsp)
	movl	$0, 6884(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L5680
	cmpw	$87, %ax
	je	.L5680
.L5679:
	testl	%edx, %edx
	movl	%edx, 6920(%rsp)
	je	.L5681
	movl	%r10d, 6916(%rsp)
.L5681:
	movl	%r10d, 6912(%rsp)
	movl	6904(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L5683
	movl	6880(%rsp), %eax
	testl	%eax, %eax
	jne	.L5682
.L5683:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1684(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1684(%rsp), %ebp
.L5697:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14106
.L5693:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L5693
.L14106:
	testl	%ecx, %ecx
	je	.L5686
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L5695
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L5695
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L5695:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L5697
.L5686:
	cmpl	$2, %r9d
	jle	.L5682
	testl	%r10d, %r10d
	jne	.L5699
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L5700
	cmpw	$46, %dx
	je	.L5700
	cmpw	$47, %dx
	je	.L5700
	cmpw	$49, %dx
	je	.L5700
	cmpw	$113, %dx
	je	.L5700
.L5699:
	movl	6880(%rsp), %esi
	testl	%esi, %esi
	jne	.L5682
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L5702
	cmpw	$46, %dx
	je	.L5702
	cmpw	$47, %dx
	je	.L5702
	cmpw	$49, %dx
	je	.L5702
	cmpw	$113, %dx
	je	.L5702
.L5682:
	cmpl	$8, 1684(%rsp)
	movl	$8, %eax
	cmovl	1684(%rsp), %eax
	cmpl	$1, 1680(%rsp)
	movl	%eax, 1684(%rsp)
	jle	.L5705
.L5727:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14109
.L5712:
	movslq	%edx,%rbx
	movl	1680(%rsp), %ebp
	salq	$2, %rbx
	cmpl	%ebp, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L5712
.L14109:
	testl	%r12d, %r12d
	je	.L5705
	movslq	%r12d,%r13
	movq	%r13, %rdi
	salq	$4, %rdi
	addq	mov_optab(%rip), %rdi
	movl	8(%rdi), %edx
	cmpl	$210, %edx
	je	.L5714
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1684(%rsp)
	jl	.L5714
	movslq	%edx,%r9
	cmpl	%ebp, 6912(%rsp)
	leaq	6864(%rsp), %rbx
	movq	insn_gen_function(,%r9,8), %rdx
	movq	%rdx, 4336(%rsp)
	jl	.L5714
	movl	6920(%rsp), %edx
.L5725:
	testl	%edx, %edx
	je	.L5719
	subl	%ebp, 52(%rbx)
.L5719:
	movl	16(%rbx), %r11d
	testl	%r11d, %r11d
	je	.L5720
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15099:
	movq	%rax, 1672(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L5722
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L5723:
	movq	%rax, %rsi
	movq	1672(%rsp), %rdi
	xorl	%eax, %eax
	call	*4336(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L5724
	addl	%ebp, 52(%rbx)
.L5724:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L5725
.L5714:
	movl	mode_size(,%r13,4), %r12d
	movl	%r12d, 1680(%rsp)
	decl	%r12d
	jg	.L5727
.L5705:
	movl	6912(%rsp), %eax
	testl	%eax, %eax
	je	.L5743
	jmp	.L15283
.L5722:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L5723
.L5720:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15099
.L5702:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6872(%rsp)
	jmp	.L5682
.L5700:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6896(%rsp)
	jmp	.L5699
.L5680:
	movl	$1, %edx
	jmp	.L5679
.L5678:
	movl	$1, %ecx
	jmp	.L5677
.L5676:
	movl	$1, %ecx
	jmp	.L5675
.L5653:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L5649
.L16427:
	movzbl	2(%r14), %edx
	cmpb	$16, %dl
	je	.L5647
	movq	8(%r14), %rbp
	cmpw	$59, (%rbp)
	je	.L16433
.L5647:
	cmpl	$55, %eax
	jne	.L5650
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L5649
.L16433:
	movq	8(%rbp), %r11
	movq	%r11, 8(%r14)
	cmpq	$0, 16(%rbp)
	je	.L5649
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r13, 1688(%rsp)
	jmp	.L5649
.L5646:
	cmpq	$0, 16(%r14)
	jne	.L5654
	movq	8(%r14), %rax
	movq	%rax, 1688(%rsp)
	jmp	.L5649
.L5654:
	movq	24(%r14), %rdx
	testq	%rdx, %rdx
	movq	%rdx, 1688(%rsp)
	jne	.L5649
	movq	8(%r14), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rcx
	movq	%rcx, 1688(%rsp)
	jmp	.L5649
.L5643:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L5639
.L16426:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L5637
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16434
.L5637:
	cmpl	$55, %eax
	jne	.L5640
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L5639
.L16434:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L5639
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	%r13, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L5639
.L5636:
	cmpq	$0, 16(%r12)
	jne	.L5644
	movq	8(%r12), %r12
	jmp	.L5639
.L5644:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L5645
	movq	%rsi, %r12
	jmp	.L5639
.L5645:
	movq	8(%r12), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L5639
.L5633:
	movq	1656(%rsp), %r13
	xorl	%esi, %esi
	movq	8(%r13), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L5629
.L16425:
	movq	1656(%rsp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	movq	1656(%rsp), %r9
	movq	%rax, 8(%r9)
	jmp	.L5629
.L5626:
	movq	1656(%rsp), %rsi
	cmpq	$0, 16(%rsi)
	jne	.L5634
	movq	8(%rsi), %rdx
	movq	%rdx, 1696(%rsp)
	jmp	.L5629
.L5634:
	movq	1656(%rsp), %rcx
	movq	24(%rcx), %r11
	testq	%r11, %r11
	movq	%r11, 1696(%rsp)
	jne	.L5629
	movq	1656(%rsp), %rsi
	movq	8(%rsi), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	1656(%rsp), %r10
	movq	%rax, %rdi
	movq	8(%r10), %rsi
	movq	%rax, 24(%r10)
	call	gen_move_insn
	movq	1656(%rsp), %rbp
	movq	%rax, %rdi
	movq	16(%rbp), %rsi
	call	emit_insn_before
	movq	24(%rbp), %r8
	movq	%r8, 1696(%rsp)
	jmp	.L5629
.L16424:
	movq	4376(%rsp), %r8
	movq	1712(%rsp), %rbp
	movl	32(%r8), %eax
	cmpl	%eax, 8(%rbp)
	jge	.L5500
	movq	8(%r8), %rbx
	movl	48(%rbx), %eax
	shrl	$3, %eax
	movl	%eax, 1708(%rsp)
	movq	1656(%rsp), %rax
	cmpb	$16, 2(%rax)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	1656(%rsp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$59, %eax
	je	.L5503
	cmpl	$55, %eax
	je	.L16435
.L5507:
	cmpl	$63, %eax
	je	.L5510
	cmpl	$66, %eax
	je	.L5510
.L5506:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L5513
	cmpl	$55, %eax
	je	.L16436
.L5517:
	cmpl	$63, %eax
	je	.L5520
	cmpl	$66, %eax
	je	.L5520
.L5516:
	movq	1712(%rsp), %rcx
	movzwl	(%rcx), %eax
	cmpl	$59, %eax
	je	.L5523
	cmpl	$55, %eax
	je	.L16437
.L5527:
	cmpl	$63, %eax
	je	.L5530
	cmpl	$66, %eax
	je	.L5530
.L5526:
	movq	1656(%rsp), %rdi
	cmpw	$55, (%rdi)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 1712(%rsp)
	je	.L15283
	movq	1712(%rsp), %rsi
	cmpw	$46, (%rsi)
	je	.L16438
.L5536:
	movl	1708(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 4360(%rsp)
	testl	%ebp, %ebp
	je	.L14100
.L5622:
	movslq	%ebp,%rax
	movq	%rax, 4352(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L5610
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L5614
	movq	1712(%rsp), %r11
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r11)
	ja	.L5610
.L5614:
	movslq	%edx,%r14
	leaq	(%r14,%r14,4), %r13
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16439
.L5615:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L16440
.L5616:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L5617
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	4360(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L5610
.L5617:
	call	get_last_insn
	movl	$1, %edx
	movq	1712(%rsp), %rsi
	movq	%rax, 4344(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16441
.L5618:
	movq	1656(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	4360(%rsp), %rcx
	call	*insn_gen_function(,%r14,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14944
	movq	4344(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L5610:
	movq	4352(%rsp), %rcx
	movl	mode_wider_mode(,%rcx,4), %ebp
	testl	%ebp, %ebp
	jne	.L5622
.L14100:
	movq	1712(%rsp), %rsi
	movl	$4, %edi
	jmp	.L15102
.L16441:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L5618
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L5618
.L16440:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L5610
	jmp	.L5616
.L16439:
	xorl	%eax, %eax
	movq	1656(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L5610
	jmp	.L5615
.L16438:
	movl	8(%rsi), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1708(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1708(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L5550:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14091
.L5546:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L5546
.L14091:
	testl	%ecx, %ecx
	je	.L5539
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L5548
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L5548
	movl	%edi, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %edi
.L5548:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L5550
.L5539:
	decl	%r9d
	jg	.L5536
	movq	1656(%rsp), %r9
	movq	8(%r12), %rdi
	xorl	%ecx, %ecx
	movl	%r10d, %r13d
	movl	$9, %r14d
	movq	8(%r9), %rbx
	movq	%r12, 6952(%rsp)
	movq	%r9, 6928(%rsp)
	movl	$0, 6980(%rsp)
	movq	%rdi, 6960(%rsp)
	movq	%rbx, 6936(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L5553
	cmpw	$88, %dx
	je	.L5553
	cmpw	$87, %dx
	je	.L5553
.L5552:
	movl	%ecx, 6944(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L5555
	cmpw	$88, %dx
	je	.L5555
	cmpw	$87, %dx
	je	.L5555
.L5554:
	movl	%ecx, 6968(%rsp)
	movl	$0, 6972(%rsp)
	movl	$0, 6948(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L5557
	cmpw	$87, %ax
	je	.L5557
.L5556:
	testl	%edx, %edx
	movl	%edx, 6984(%rsp)
	je	.L5558
	movl	%r10d, 6980(%rsp)
.L5558:
	movl	%r10d, 6976(%rsp)
	movl	6968(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L5560
	movl	6944(%rsp), %ecx
	testl	%ecx, %ecx
	jne	.L5559
.L5560:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1708(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	1708(%rsp), %ebp
.L5574:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L14094
.L5570:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L5570
.L14094:
	testl	%ecx, %ecx
	je	.L5563
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L5572
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L5572
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L5572:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L5574
.L5563:
	cmpl	$2, %r9d
	jle	.L5559
	testl	%r10d, %r10d
	jne	.L5576
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L5577
	cmpw	$46, %dx
	je	.L5577
	cmpw	$47, %dx
	je	.L5577
	cmpw	$49, %dx
	je	.L5577
	cmpw	$113, %dx
	je	.L5577
.L5576:
	movl	6944(%rsp), %esi
	testl	%esi, %esi
	jne	.L5559
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L5579
	cmpw	$46, %dx
	je	.L5579
	cmpw	$47, %dx
	je	.L5579
	cmpw	$49, %dx
	je	.L5579
	cmpw	$113, %dx
	je	.L5579
.L5559:
	cmpl	$8, 1708(%rsp)
	movl	$8, %eax
	cmovl	1708(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 1708(%rsp)
	jle	.L5582
.L5604:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L14097
.L5589:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r14d, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L5589
.L14097:
	testl	%r12d, %r12d
	je	.L5582
	movslq	%r12d,%r13
	movq	%r13, %rdi
	salq	$4, %rdi
	addq	mov_optab(%rip), %rdi
	movl	8(%rdi), %edx
	cmpl	$210, %edx
	je	.L5591
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1708(%rsp)
	jl	.L5591
	movslq	%edx,%r9
	cmpl	%ebp, 6976(%rsp)
	leaq	6928(%rsp), %rbx
	movq	insn_gen_function(,%r9,8), %r14
	movq	%r14, 4368(%rsp)
	jl	.L5591
	movl	6984(%rsp), %edx
.L5602:
	testl	%edx, %edx
	je	.L5596
	subl	%ebp, 52(%rbx)
.L5596:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L5597
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15098:
	movl	40(%rbx), %edx
	movq	%rax, %r14
	testl	%edx, %edx
	je	.L5599
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L5600:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*4368(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L5601
	addl	%ebp, 52(%rbx)
.L5601:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L5602
.L5591:
	movl	mode_size(,%r13,4), %r14d
	cmpl	$1, %r14d
	jg	.L5604
.L5582:
	movl	6976(%rsp), %r12d
	testl	%r12d, %r12d
	jmp	.L15385
.L5599:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L5600
.L5597:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15098
.L5579:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6936(%rsp)
	jmp	.L5559
.L5577:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 6960(%rsp)
	jmp	.L5576
.L5557:
	movl	$1, %edx
	jmp	.L5556
.L5555:
	movl	$1, %ecx
	jmp	.L5554
.L5553:
	movl	$1, %ecx
	jmp	.L5552
.L5530:
	movq	1712(%rsp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	1712(%rsp), %rdx
	movq	%rax, 8(%rdx)
	movq	1712(%rsp), %r11
	movq	16(%r11), %rdi
	call	protect_from_queue
	movq	1712(%rsp), %r9
	movq	%rax, 16(%r9)
	jmp	.L5526
.L16437:
	movzbl	2(%rcx), %edx
	cmpb	$16, %dl
	je	.L5524
	movq	8(%rcx), %rbp
	cmpw	$59, (%rbp)
	je	.L16442
.L5524:
	cmpl	$55, %eax
	jne	.L5527
	movq	1712(%rsp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L5526
.L16442:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%rcx)
	cmpq	$0, 16(%rbp)
	je	.L5526
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	1712(%rsp), %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L15097:
	movq	%rbx, 1712(%rsp)
	jmp	.L5526
.L5523:
	movq	1712(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L5531
	movq	8(%rcx), %rbx
	jmp	.L15097
.L5531:
	movq	1712(%rsp), %rbp
	movq	24(%rbp), %rsi
	testq	%rsi, %rsi
	je	.L5532
	movq	%rsi, 1712(%rsp)
	jmp	.L5526
.L5532:
	movq	1712(%rsp), %r10
	movq	8(%r10), %r13
	movzbl	2(%r13), %edi
	call	gen_reg_rtx
	movq	1712(%rsp), %rbx
	movq	%rax, %rdi
	movq	8(%rbx), %rsi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	%rax, %rdi
	movq	1712(%rsp), %rax
	movq	16(%rax), %rsi
	call	emit_insn_before
	movq	1712(%rsp), %r8
	movq	24(%r8), %rsi
	movq	%rsi, 1712(%rsp)
	jmp	.L5526
.L5520:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L5516
.L16436:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L5514
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16443
.L5514:
	cmpl	$55, %eax
	jne	.L5517
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L5516
.L16443:
	movq	8(%rbp), %rbx
	movq	%rbx, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L5516
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	%r13, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L5516
.L5513:
	cmpq	$0, 16(%r12)
	jne	.L5521
	movq	8(%r12), %r12
	jmp	.L5516
.L5521:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L5522
	movq	%rsi, %r12
	jmp	.L5516
.L5522:
	movq	8(%r12), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L5516
.L5510:
	movq	1656(%rsp), %r11
	xorl	%esi, %esi
	movq	8(%r11), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	1656(%rsp), %r9
	movq	%rax, 8(%r9)
	movq	1656(%rsp), %r10
	movq	16(%r10), %rdi
	call	protect_from_queue
	movq	1656(%rsp), %rdi
	movq	%rax, 16(%rdi)
	jmp	.L5506
.L16435:
	jne	.L5507
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbx)
	jmp	.L5506
.L5503:
	movq	1656(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L5511
	movq	8(%rcx), %rdx
	movq	%rdx, 1656(%rsp)
	jmp	.L5506
.L5511:
	movq	1656(%rsp), %rcx
	movq	24(%rcx), %rdi
	testq	%rdi, %rdi
	je	.L5512
	movq	%rdi, 1656(%rsp)
	jmp	.L5506
.L5512:
	movq	1656(%rsp), %rax
	movq	8(%rax), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	1656(%rsp), %rbp
	movq	%rax, %rdi
	movq	8(%rbp), %rsi
	movq	%rax, 24(%rbp)
	call	gen_move_insn
	movq	1656(%rsp), %r14
	movq	%rax, %rdi
	movq	16(%r14), %rsi
	call	emit_insn_before
	movq	1656(%rsp), %r13
	movq	24(%r13), %rsi
	movq	%rsi, 1656(%rsp)
	jmp	.L5506
.L5492:
	movq	56(%rsp), %r8
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	56(%rsp), %r14
	movq	%rax, 8(%r14)
	movq	56(%rsp), %r13
	movq	16(%r13), %rdi
	call	protect_from_queue
	movq	56(%rsp), %rsi
	movq	%rax, 16(%rsi)
	jmp	.L5488
.L16374:
	jne	.L5489
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbx)
	jmp	.L5488
.L5485:
	movq	56(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L5493
	movq	8(%rcx), %rax
	movq	%rax, 1656(%rsp)
	jmp	.L5488
.L5493:
	movq	56(%rsp), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	movq	%rbx, 1656(%rsp)
	jne	.L5488
	movq	56(%rsp), %rsi
	movq	8(%rsi), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	56(%rsp), %rcx
	movq	%rax, %rdi
	movq	8(%rcx), %rsi
	movq	%rax, 24(%rcx)
	call	gen_move_insn
	movq	56(%rsp), %r11
	movq	%rax, %rdi
	movq	16(%r11), %rsi
	call	emit_insn_before
	movq	56(%rsp), %r9
	movq	24(%r9), %r10
	movq	%r10, 1656(%rsp)
	jmp	.L5488
.L16373:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	4376(%rsp), %rdi
	movq	%rax, %rsi
	movq	56(%rsp), %rax
	movzbl	2(%rax), %edx
	jmp	.L15096
.L5464:
	movq	56(%rsp), %r10
	movl	(%r10), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L16444
	movq	56(%rsp), %r11
	movq	4376(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movzbl	2(%r11), %edx
	movq	%r11, %rsi
	call	expand_expr
	movq	56(%rsp), %rdx
	movq	%rax, %r12
	cmpw	$51, (%rdx)
	je	.L16445
.L5482:
	movzwl	(%r12), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L5483
	cmpw	$46, %dx
	je	.L5483
	cmpw	$47, %dx
	je	.L5483
	cmpw	$49, %dx
	je	.L5483
	cmpw	$113, %dx
	jne	.L5429
	jmp	.L5483
.L16445:
	cmpl	$63, 8(%rdx)
	jle	.L5429
	jmp	.L5482
.L16444:
	movq	4376(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	56(%rsp), %rbp
	movq	%rax, %rsi
	movzbl	3(%rbp), %edx
	movq	8(%rbp), %rdi
	shrb	$2, %dl
	andl	$1, %edx
	jmp	.L15104
.L5473:
	movl	$1, %ebx
	jmp	.L5467
.L5465:
	xorl	%ebx, %ebx
	jmp	.L5467
.L5471:
	movq	56(%rsp), %r14
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	movq	8(%r14), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L5473
	movq	56(%rsp), %r8
	xorl	%eax, %eax
	movq	16(%r8), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L5467
	jmp	.L5473
.L16372:
	movzbl	2(%rcx), %eax
	cmpb	$16, %al
	je	.L5457
	movl	cse_not_expected(%rip), %edx
	movq	4376(%rsp), %rdi
	xorl	%esi, %esi
	testl	%edx, %edx
	movzbl	%al, %edx
	cmove	%rcx, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	call	expand_expr
	movq	%rax, %r12
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L5483
	testb	%al, %al
	je	.L5483
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L15341
.L16371:
	movq	56(%rsp), %rbx
	cmpb	$16, 2(%rbx)
	jne	.L5430
	call	gen_label_rtx
	movq	%rax, %rbp
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r12
	testq	%rbx, %rbx
	jne	.L5434
.L14084:
	movq	56(%rsp), %rdi
	movzwl	(%rdi), %eax
	cmpl	$59, %eax
	je	.L5436
	cmpl	$55, %eax
	je	.L16446
.L5440:
	cmpl	$63, %eax
	je	.L5443
	cmpl	$66, %eax
	je	.L5443
.L5439:
	movq	4376(%rsp), %r10
	xorl	%eax, %eax
	movq	%rbp, %rsi
	incl	inhibit_defer_pop(%rip)
	movq	32(%r10), %rdi
	call	jumpifnot
	movq	4376(%rsp), %r8
	movq	1656(%rsp), %rsi
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	40(%r8), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L5449
.L14086:
	movq	%r12, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%rbp, %rdi
	call	emit_label
	xorl	%eax, %eax
	xorl	%edx, %edx
	movq	4376(%rsp), %rbp
	movq	1656(%rsp), %rsi
	movq	48(%rbp), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L5454
.L14088:
	movq	%r12, %rdi
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L5428
.L5454:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r11
	movq	%rax, 16(%rbx)
	testq	%r11, %r11
	movq	%r11, pending_chain(%rip)
	movq	%r11, %rbx
	jne	.L5454
	jmp	.L14088
.L5449:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r9
	movq	%rax, 16(%rbx)
	testq	%r9, %r9
	movq	%r9, pending_chain(%rip)
	movq	%r9, %rbx
	jne	.L5449
	jmp	.L14086
.L5443:
	movq	56(%rsp), %r11
	xorl	%esi, %esi
	movq	8(%r11), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	56(%rsp), %r14
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L5439
.L16446:
	jne	.L5440
	movq	8(%rdi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	56(%rsp), %r10
	movq	%rax, 8(%r10)
	jmp	.L5439
.L5436:
	movq	56(%rsp), %rsi
	cmpq	$0, 16(%rsi)
	jne	.L5444
	movq	8(%rsi), %rcx
	movq	%rcx, 1656(%rsp)
	jmp	.L5439
.L5444:
	movq	56(%rsp), %rdx
	movq	24(%rdx), %rsi
	testq	%rsi, %rsi
	movq	%rsi, 1656(%rsp)
	jne	.L5439
	movq	56(%rsp), %rdi
	movq	8(%rdi), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	%rax, %rdi
	movq	56(%rsp), %rax
	movq	8(%rax), %rsi
	movq	%rdi, 24(%rax)
	call	gen_move_insn
	movq	56(%rsp), %r14
	movq	%rax, %rdi
	movq	16(%r14), %rsi
	call	emit_insn_before
	movq	24(%r14), %r13
	movq	%r13, 1656(%rsp)
	jmp	.L5439
.L5434:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r8
	movq	%rax, 16(%rbx)
	testq	%r8, %r8
	movq	%r8, pending_chain(%rip)
	movq	%r8, %rbx
	jne	.L5434
	jmp	.L14084
.L16370:
	movq	32(%rdx), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L5426
.L14082:
	movq	4376(%rsp), %rax
	movq	56(%rsp), %rsi
	xorl	%edx, %edx
	movq	40(%rax), %rdi
	xorl	%eax, %eax
	call	store_expr
	jmp	.L5428
.L5426:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdi
	movq	%rax, 16(%rbx)
	testq	%rdi, %rdi
	movq	%rdi, pending_chain(%rip)
	movq	%rdi, %rbx
	jne	.L5426
	jmp	.L14082
.L16369:
	cmpl	$63, 8(%rax)
	jg	.L5421
	movl	5412(%rsp), %edi
	call	gen_reg_rtx
	movq	%rax, 56(%rsp)
	jmp	.L5421
.L16368:
	cmpw	$55, (%r13)
	jne	.L5420
	testb	$32, 17(%rbx)
.L15339:
	je	.L5370
	jmp	.L5420
.L16367:
	movq	8(%r13), %r13
	cmpw	$51, (%r13)
	jne	.L5417
	cmpl	$63, 8(%r13)
	jg	.L5417
.L14941:
	xorl	%ebp, %ebp
	jmp	.L5370
.L5384:
	movq	32(%rbx), %rsi
	movq	%r12, %rdi
.L15338:
	xorl	%eax, %eax
	call	safe_from_p
.L15095:
	movl	%eax, %ebp
	jmp	.L5370
.L5386:
	movq	32(%rbx), %rsi
	xorl	%eax, %eax
	movq	%r12, %rdi
	xorl	%ebp, %ebp
	call	safe_from_p
	testl	%eax, %eax
	je	.L5370
	movq	%r12, %rdi
	movq	40(%rbx), %rsi
.L15340:
	xorl	%eax, %eax
	call	safe_from_p
	testl	%eax, %eax
	jmp	.L15339
.L5389:
	movzbl	%dl, %eax
	subl	$39, %eax
	cmpl	$67, %eax
	ja	.L5390
	mov	%eax, %r14d
	jmp	*.L5405(,%r14,8)
	.section	.rodata
	.align 8
	.align 4
.L5405:
	.quad	.L5392
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5403
	.quad	.L5394
	.quad	.L15283
	.quad	.L5401
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5390
	.quad	.L5402
	.quad	.L5399
	.quad	.L5391
	.text
.L5391:
	movq	32(%rbx), %rdi
	call	staticp
	jmp	.L15095
.L5392:
	xorl	%ebp, %ebp
	cmpw	$55, %cx
	je	.L5370
.L5390:
	testq	%r13, %r13
	jne	.L14864
	movzbl	%dl, %ecx 
	xorl	%ebp, %ebp
	salq	$2, %rcx
	addq	tree_code_length(%rip), %rcx
	movl	(%rcx), %r14d
	cmpl	%r14d, %ebp
	jge	.L5375
.L5413:
	movslq	%ebp,%rdx
	movq	32(%rbx,%rdx,8), %rsi
	testq	%rsi, %rsi
	jne	.L16447
.L5410:
	incl	%ebp
	cmpl	%r14d, %ebp
	jl	.L5413
	jmp	.L5375
.L16447:
	xorl	%eax, %eax
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L5410
	jmp	.L14941
.L5403:
	movq	%r12, %rdi
	movq	40(%rbx), %rsi
	jmp	.L15338
.L5394:
	movq	48(%rbx), %r13
	testq	%r13, %r13
	jne	.L14864
	cmpw	$51, %cx
	je	.L16448
.L5398:
	cmpw	$55, %cx
	jne	.L5390
	jmp	.L14941
.L16448:
	cmpl	$63, 8(%r12)
	jle	.L14941
	jmp	.L5398
.L5401:
	movq	40(%rbx), %r13
	jmp	.L5390
.L5402:
	movq	48(%rbx), %r13
	jmp	.L5390
.L5399:
	movq	40(%rbx), %r13
	xorl	%ebp, %ebp
	jmp	.L15094
.L5378:
	cmpb	$3, %dl
	jne	.L14941
	movq	32(%rbx), %rsi
	xorl	%ebp, %ebp
	testq	%rsi, %rsi
	jne	.L16449
.L5381:
	movq	(%rbx), %rsi
	movq	%r12, %rdi
	testq	%rsi, %rsi
	jne	.L15340
	jmp	.L5420
.L16449:
	xorl	%eax, %eax
	movq	%r12, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L5370
	jmp	.L5381
.L16366:
	movq	8(%r12), %rax
	movq	virtual_outgoing_args_rtx(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L5420
	cmpw	$63, (%rax)
	jne	.L5373
	cmpq	%rdx, 8(%rax)
	jne	.L5373
	jmp	.L5420
.L16365:
	movq	8(%r12), %r12
	movzwl	(%r12), %ecx
	cmpw	$51, %cx
	jne	.L5371
	cmpl	$63, 8(%r12)
	jg	.L5371
	jmp	.L14941
	.p2align 6,,7
.L3865:
	movq	1936(%rsp), %rbx
	movq	40(%rbx), %rdi
	call	integer_onep
	testl	%eax, %eax
	je	.L3864
	movq	32(%r15), %r10
	movzbq	16(%r10), %r11
	salq	$3, %r11
	addq	tree_code_type(%rip), %r11
	movq	(%r11), %r8
	cmpb	$60, (%r8)
	jne	.L3864
	movzbl	16(%rbx), %eax
	cmpb	$53, %al
	je	.L3866
	cmpb	$54, %al
	je	.L3868
	cmpb	$81, %al
	je	.L3870
	cmpb	$82, %al
	je	.L16450
	movq	and_optab(%rip), %r14
.L3867:
	movq	1928(%rsp), %rdi
	cmpq	40(%r15), %rdi
	je	.L16451
.L3874:
	movq	56(%rsp), %rbp
	xorl	%r12d, %r12d
	movl	$1, %ebx
	testq	%rbp, %rbp
	je	.L3878
	movq	56(%rsp), %rdi
	movzwl	(%rdi), %eax
	cmpw	$53, %ax
	je	.L16452
	movl	%eax, %ecx
.L3879:
	cmpw	$55, %cx
	je	.L16453
.L3881:
	movq	1928(%rsp), %r13
	movzbl	16(%r13), %edx
	movzbl	%dl, %esi 
	salq	$3, %rsi
	addq	tree_code_type(%rip), %rsi
	movq	(%rsi), %r9
	movsbl	(%r9),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L3883
	mov	%eax, %ebx
	jmp	*.L3922(,%rbx,8)
	.section	.rodata
	.align 8
	.align 4
.L3922:
	.quad	.L3892
	.quad	.L3894
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3894
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3928
	.quad	.L3884
	.quad	.L3897
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3897
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3883
	.quad	.L3886
	.text
.L3884:
	movq	1928(%rsp), %rdx
	movq	120(%rdx), %r12
.L3883:
	movl	$1, %ebx
.L15064:
	testq	%r12, %r12
	je	.L3878
.L14862:
	cmpw	$53, (%r12)
	je	.L16454
.L3925:
	xorl	%eax, %eax
	movq	%rbp, %rdi
	movq	%r12, %rsi
	call	rtx_equal_p
	xorl	%ebx, %ebx
	testl	%eax, %eax
	jne	.L3878
	cmpw	$55, (%rbp)
	je	.L16455
.L3928:
	movl	$1, %ebx
.L3878:
	xorl	%esi, %esi
	movq	32(%r15), %rdi
	movl	5412(%rsp), %edx
	testl	%ebx, %ebx
	movl	$1, %ecx
	cmovne	56(%rsp), %rsi
	xorl	%eax, %eax
	call	do_store_flag
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L3929
	movq	1928(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movl	5416(%rsp), %r9d
	movq	56(%rsp), %r8
	movl	5412(%rsp), %edi
	movq	%rax, %rdx
	movq	%r14, %rsi
	movq	%rbx, %rcx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	jmp	.L13703
.L3929:
	movq	1928(%rsp), %r14
	cmpq	40(%r15), %r14
	jne	.L3864
	movq	32(%r15), %rdi
	call	invert_truthvalue
	movq	%rax, 32(%r15)
	jmp	.L3864
.L16455:
	cmpw	$55, (%r12)
	jne	.L3928
	movq	1928(%rsp), %r12
	testb	$32, 17(%r12)
.L15328:
	je	.L3878
	jmp	.L3928
.L16454:
	movq	8(%r12), %r12
	cmpw	$51, (%r12)
	jne	.L3925
	cmpl	$63, 8(%r12)
	jg	.L3925
.L14930:
	xorl	%ebx, %ebx
	jmp	.L3878
.L3892:
	movq	%rbp, %rdi
	movq	1928(%rsp), %rbp
	movq	32(%rbp), %rsi
.L15327:
	xorl	%eax, %eax
	call	safe_from_p
.L15065:
	movl	%eax, %ebx
	jmp	.L3878
.L3894:
	movq	1928(%rsp), %rax
	movq	%rbp, %rdi
	xorl	%ebx, %ebx
	movq	32(%rax), %rsi
	xorl	%eax, %eax
	call	safe_from_p
	testl	%eax, %eax
	je	.L3878
	movq	1928(%rsp), %r8
	movq	%rbp, %rdi
	movq	40(%r8), %rsi
.L15329:
	xorl	%eax, %eax
	call	safe_from_p
	testl	%eax, %eax
	jmp	.L15328
.L3897:
	movzbl	%dl, %eax
	subl	$39, %eax
	cmpl	$67, %eax
	ja	.L3898
	mov	%eax, %r11d
	jmp	*.L3913(,%r11,8)
	.section	.rodata
	.align 8
	.align 4
.L3913:
	.quad	.L3900
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3911
	.quad	.L3902
	.quad	.L15283
	.quad	.L3909
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3898
	.quad	.L3910
	.quad	.L3907
	.quad	.L3899
	.text
.L3899:
	movq	1928(%rsp), %r10
	movq	32(%r10), %rdi
	call	staticp
	jmp	.L15065
.L3900:
	xorl	%ebx, %ebx
	cmpw	$55, %cx
	je	.L3878
.L3898:
	testq	%r12, %r12
	jne	.L14862
	movzbl	%dl, %ecx 
	xorl	%ebx, %ebx
	salq	$2, %rcx
	addq	tree_code_length(%rip), %rcx
	movl	(%rcx), %r13d
	cmpl	%r13d, %ebx
	jge	.L3883
.L3921:
	movq	1928(%rsp), %r8
	movslq	%ebx,%rdx
	movq	32(%r8,%rdx,8), %rsi
	testq	%rsi, %rsi
	jne	.L16456
.L3918:
	incl	%ebx
	cmpl	%r13d, %ebx
	jl	.L3921
	jmp	.L3883
.L16456:
	xorl	%eax, %eax
	movq	%rbp, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L3918
	jmp	.L14930
.L3911:
	movq	1928(%rsp), %rbx
	movq	%rbp, %rdi
	movq	40(%rbx), %rsi
	jmp	.L15327
.L3902:
	movq	1928(%rsp), %rdi
	movq	48(%rdi), %r12
	testq	%r12, %r12
	jne	.L14862
	cmpw	$51, %cx
	je	.L16457
.L3906:
	cmpw	$55, %cx
	jne	.L3898
	jmp	.L14930
.L16457:
	cmpl	$63, 8(%rbp)
	jle	.L14930
	jmp	.L3906
.L3909:
	movq	1928(%rsp), %rsi
	movq	40(%rsi), %r12
	jmp	.L3898
.L3910:
	movq	1928(%rsp), %r13
	movq	48(%r13), %r12
	jmp	.L3898
.L3907:
	movq	1928(%rsp), %r9
	xorl	%ebx, %ebx
	movq	40(%r9), %r12
	jmp	.L15064
.L3886:
	cmpb	$3, %dl
	jne	.L14930
	movq	1928(%rsp), %rcx
	xorl	%ebx, %ebx
	movq	32(%rcx), %rsi
	testq	%rsi, %rsi
	jne	.L16458
.L3889:
	movq	1928(%rsp), %r12
	movq	%rbp, %rdi
	movq	(%r12), %rsi
	testq	%rsi, %rsi
	jne	.L15329
	jmp	.L3928
.L16458:
	xorl	%eax, %eax
	movq	%rbp, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L3878
	jmp	.L3889
.L16453:
	movq	8(%rbp), %rax
	movq	virtual_outgoing_args_rtx(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L3928
	cmpw	$63, (%rax)
	jne	.L3881
	cmpq	%rdx, 8(%rax)
	jne	.L3881
	jmp	.L3928
.L16452:
	movq	8(%rdi), %rbp
	movl	(%rbp), %ecx
	cmpw	$51, %cx
	jne	.L3879
	cmpl	$63, 8(%rbp)
	jg	.L3879
	jmp	.L14930
.L16451:
	movq	32(%r15), %rdi
	call	invert_truthvalue
	movq	%rax, 32(%r15)
	jmp	.L3874
.L16450:
	movq	xor_optab(%rip), %r14
	jmp	.L3867
.L3870:
	movq	ior_optab(%rip), %r14
	jmp	.L3867
.L3868:
	movq	sub_optab(%rip), %r14
	jmp	.L3867
	.p2align 6,,7
.L3866:
	movq	add_optab(%rip), %r14
	jmp	.L3867
	.p2align 6,,7
.L16071:
	movq	40(%r15), %rdi
	movq	32(%rcx), %rsi
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	operand_equal_p
	testl	%eax, %eax
	je	.L3858
	movq	40(%r15), %rbx
	movq	%rbx, 1928(%rsp)
	movq	48(%r15), %rbp
	movq	%rbp, 1944(%rsp)
	jmp	.L3858
.L16070:
	movq	48(%r15), %rdi
	movq	32(%rcx), %rsi
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	operand_equal_p
	testl	%eax, %eax
	je	.L14893
	movq	48(%r15), %rdx
	movq	%rdx, 1928(%rsp)
	movq	40(%r15), %rsi
	movq	%rsi, 1944(%rsp)
	jmp	.L3858
.L14893:
	movq	tree_code_type(%rip), %rdx
	jmp	.L3861
.L16069:
	movq	40(%r15), %rdi
	movq	32(%rcx), %rsi
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	operand_equal_p
	testl	%eax, %eax
	je	.L14892
	movq	40(%r15), %r10
	movq	%r10, 1928(%rsp)
	movq	48(%r15), %r11
	movq	%r11, 1936(%rsp)
	jmp	.L3858
.L14892:
	movq	tree_code_type(%rip), %rdx
	jmp	.L3859
.L16068:
	movq	48(%r15), %rdi
	movq	32(%rcx), %rsi
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	operand_equal_p
	testl	%eax, %eax
	je	.L14891
	movq	48(%r15), %rcx
	movq	%rcx, 1928(%rsp)
	movq	40(%r15), %rax
	movq	%rax, 1936(%rsp)
	jmp	.L3858
.L14891:
	movq	tree_code_type(%rip), %rdx
	jmp	.L3857
.L3794:
	testq	%rbp, %rbp
	je	.L3797
	movl	(%rbp), %eax
	xorl	%r14d, %r14d
	movq	%rbp, %r13
	movq	32(%r15), %rbx
	cmpw	$53, %ax
	je	.L16459
	movl	%eax, %ecx
.L3800:
	cmpw	$55, %cx
	je	.L16460
.L3802:
	movzbl	16(%rbx), %edx
	movzbl	%dl, %r10d 
	salq	$3, %r10
	addq	tree_code_type(%rip), %r10
	movq	(%r10), %r11
	movsbl	(%r11),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L3804
	mov	%eax, %edi
	jmp	*.L3843(,%rdi,8)
	.section	.rodata
	.align 8
	.align 4
.L3843:
	.quad	.L3813
	.quad	.L3815
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3815
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3849
	.quad	.L3805
	.quad	.L3818
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3818
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3804
	.quad	.L3807
	.text
.L3805:
	movq	120(%rbx), %r14
.L3804:
	movl	$1, %r12d
.L15061:
	testq	%r14, %r14
	je	.L3799
.L14861:
	cmpw	$53, (%r14)
	je	.L16461
.L3846:
	xorl	%eax, %eax
	movq	%r13, %rdi
	movq	%r14, %rsi
	call	rtx_equal_p
	xorl	%r12d, %r12d
	testl	%eax, %eax
	jne	.L3799
	cmpw	$55, (%r13)
	je	.L16462
.L3849:
	movl	$1, %r12d
.L3799:
	testl	%r12d, %r12d
	movq	%rbp, 56(%rsp)
	jne	.L3796
.L3797:
	cmpl	$16, 5412(%rsp)
	je	.L16463
	movl	5412(%rsp), %edi
	call	gen_reg_rtx
.L15063:
	movq	%rax, 56(%rsp)
	jmp	.L3796
.L16463:
	movq	5424(%rsp), %r14
	movq	32(%r14), %rax
	testq	%rax, %rax
	je	.L15283
	cmpb	$25, 16(%rax)
	jne	.L15283
	movl	24(%rax), %esi
	movl	$16, %edi
	leal	14(%rsi), %r13d
	addl	$7, %esi
	cmovs	%r13d, %esi
	xorl	%edx, %edx
	sarl	$3, %esi
	call	assign_stack_temp
	jmp	.L15063
.L16462:
	cmpw	$55, (%r14)
	jne	.L3849
	testb	$32, 17(%rbx)
.L15325:
	je	.L3799
	jmp	.L3849
	.p2align 6,,7
.L16461:
	movq	8(%r14), %r14
	cmpw	$51, (%r14)
	jne	.L3846
	cmpl	$63, 8(%r14)
	jg	.L3846
.L14929:
	xorl	%r12d, %r12d
	jmp	.L3799
.L3813:
	movq	32(%rbx), %rsi
	movq	%r13, %rdi
.L15324:
	xorl	%eax, %eax
	call	safe_from_p
.L15062:
	movl	%eax, %r12d
	jmp	.L3799
.L3815:
	movq	32(%rbx), %rsi
	xorl	%eax, %eax
	movq	%r13, %rdi
	xorl	%r12d, %r12d
	call	safe_from_p
	testl	%eax, %eax
	je	.L3799
	movq	%r13, %rdi
	movq	40(%rbx), %rsi
.L15326:
	xorl	%eax, %eax
	call	safe_from_p
	testl	%eax, %eax
	jmp	.L15325
	.p2align 6,,7
.L3818:
	movzbl	%dl, %eax
	subl	$39, %eax
	cmpl	$67, %eax
	ja	.L3819
	mov	%eax, %r9d
	jmp	*.L3834(,%r9,8)
	.section	.rodata
	.align 8
	.align 4
.L3834:
	.quad	.L3821
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3832
	.quad	.L3823
	.quad	.L15283
	.quad	.L3830
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3819
	.quad	.L3831
	.quad	.L3828
	.quad	.L3820
	.text
.L3820:
	movq	32(%rbx), %rdi
	call	staticp
	jmp	.L15062
.L3821:
	xorl	%r12d, %r12d
	cmpw	$55, %cx
	je	.L3799
.L3819:
	testq	%r14, %r14
	jne	.L14861
	movzbl	%dl, %esi 
	xorl	%r12d, %r12d
	salq	$2, %rsi
	addq	tree_code_length(%rip), %rsi
	movl	(%rsi), %eax
	cmpl	%eax, %r12d
	movl	%eax, 4708(%rsp)
	jge	.L3804
.L3842:
	movslq	%r12d,%rdx
	movq	32(%rbx,%rdx,8), %rsi
	testq	%rsi, %rsi
	jne	.L16464
.L3839:
	incl	%r12d
	cmpl	4708(%rsp), %r12d
	jl	.L3842
	jmp	.L3804
.L16464:
	xorl	%eax, %eax
	movq	%r13, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L3839
	jmp	.L14929
.L3832:
	movq	%r13, %rdi
	movq	40(%rbx), %rsi
	jmp	.L15324
.L3823:
	movq	48(%rbx), %r14
	testq	%r14, %r14
	jne	.L14861
	cmpw	$51, %cx
	je	.L16465
.L3827:
	cmpw	$55, %cx
	jne	.L3819
	jmp	.L14929
.L16465:
	cmpl	$63, 8(%r13)
	jle	.L14929
	jmp	.L3827
.L3830:
	movq	40(%rbx), %r14
	jmp	.L3819
.L3831:
	movq	48(%rbx), %r14
	jmp	.L3819
.L3828:
	movq	40(%rbx), %r14
	xorl	%r12d, %r12d
	jmp	.L15061
	.p2align 6,,7
.L3807:
	cmpb	$3, %dl
	jne	.L14929
	movq	32(%rbx), %rsi
	xorl	%r12d, %r12d
	testq	%rsi, %rsi
	jne	.L16466
.L3810:
	movq	(%rbx), %rsi
	movq	%r13, %rdi
	testq	%rsi, %rsi
	jne	.L15326
	jmp	.L3849
.L16466:
	xorl	%eax, %eax
	movq	%r13, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L3799
	jmp	.L3810
	.p2align 6,,7
.L16460:
	movq	8(%r13), %rax
	movq	virtual_outgoing_args_rtx(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L3849
	cmpw	$63, (%rax)
	jne	.L3802
	cmpq	%rdx, 8(%rax)
	jne	.L3802
	jmp	.L3849
	.p2align 6,,7
.L16459:
	movq	8(%rbp), %r13
	movzwl	(%r13), %ecx
	cmpw	$51, %cx
	jne	.L3800
	cmpl	$63, 8(%r13)
	jg	.L3800
	jmp	.L14929
	.p2align 6,,7
.L16067:
	movq	48(%r15), %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L3791
	movq	32(%r15), %rdi
	movzbq	16(%rdi), %rbx
	salq	$3, %rbx
	addq	tree_code_type(%rip), %rbx
	movq	(%rbx), %rcx
	cmpb	$60, (%rcx)
	jne	.L3791
	movq	56(%rsp), %rsi
	movl	5412(%rsp), %edx
	xorl	%eax, %eax
	movl	%r13d, %ecx
	call	expand_expr
	movzbl	2(%rax), %r12d
	movq	%rax, %rbx
	cmpl	5412(%rsp), %r12d
	je	.L15258
	cmpq	$0, 56(%rsp)
	je	.L16467
.L3793:
	movq	56(%rsp), %rdi
	movq	%rbx, %rsi
	movl	5416(%rsp), %edx
	jmp	.L15250
.L16467:
	movl	5412(%rsp), %edi
	call	gen_reg_rtx
	movq	%rax, 56(%rsp)
	jmp	.L3793
	.p2align 6,,7
.L1091:
	xorl	%edi, %edi
	movq	32(%r15), %rbx
	call	expand_start_bindings
	movq	48(%r15), %rdi
	testq	%rdi, %rdi
	je	.L1092
	testb	$1, 18(%rdi)
	je	.L16468
.L1092:
	testq	%rbx, %rbx
	je	.L13750
.L1097:
	cmpq	$0, 120(%rbx)
	je	.L16469
.L1096:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	expand_decl_init
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L1097
.L13750:
	movq	40(%r15), %rdi
	movq	56(%rsp), %rsi
	movl	%r14d, %edx
	movl	%r13d, %ecx
	xorl	%eax, %eax
	call	expand_expr
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, 56(%rsp)
	movq	32(%r15), %rdi
	call	expand_end_bindings
	jmp	.L581
.L16469:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	expand_decl
	jmp	.L1096
.L16468:
	xorl	%eax, %eax
	call	insert_block
	jmp	.L1092
.L2270:
	movq	32(%r15), %rax
	cmpb	$106, 16(%rax)
	je	.L16470
.L2271:
	movq	48(%r15), %rax
	testq	%rax, %rax
	jne	.L13703
	movq	56(%rsp), %rsi
	movl	5408(%rsp), %edx
	movq	%r15, %rdi
	xorl	%eax, %eax
	call	expand_call
	jmp	.L13703
.L16470:
	movq	32(%rax), %rax
	cmpb	$29, 16(%rax)
	jne	.L2271
	testb	$16, 53(%rax)
	je	.L2271
	movq	56(%rsp), %rsi
	movl	5408(%rsp), %r8d
	movq	%r15, %rdi
	movq	%rbx, %rdx
	movl	%r14d, %ecx
	xorl	%eax, %eax
	call	expand_builtin
	jmp	.L13703
	.p2align 6,,7
.L2268:
	movq	40(%r15), %rax
	testq	%rax, %rax
	jne	.L13703
	movq	32(%r15), %rdi
	movq	56(%rsp), %rsi
	movl	%r14d, %edx
	movl	%r13d, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	cleanups_this_call(%rip), %rdx
	movq	48(%r15), %rsi
	movq	%rax, 40(%r15)
	xorl	%edi, %edi
	call	tree_cons
	movq	%rax, cleanups_this_call(%rip)
	movq	40(%r15), %rax
	movq	$0, 48(%r15)
	jmp	.L13703
.L3228:
	movq	add_optab(%rip), %rbp
	movq	%rbp, 64(%rsp)
	movq	32(%r15), %rbp
	cmpb	$53, 16(%rbp)
	movq	%rbp, %rdx
	je	.L16471
.L3229:
	cmpb	$25, 16(%rbp)
	je	.L16472
.L3231:
	movq	40(%r15), %r14
	cmpb	$25, 16(%r14)
	je	.L16473
.L3234:
	cmpl	$1, %r13d
	je	.L3240
	cmpl	$3, %r13d
	je	.L3240
.L3241:
	xorl	%eax, %eax
	movq	%r15, %rdi
	xorl	%r14d, %r14d
	call	preexpand_calls
	testq	%rbx, %rbx
	movq	%rbx, %r13
	movl	$1, %ebp
	movq	40(%r15), %r12
	je	.L13652
	movzwl	(%rbx), %eax
	cmpw	$53, %ax
	je	.L16474
	movl	%eax, %edx
.L13653:
	cmpw	$55, %dx
	je	.L16475
.L13655:
	movzbl	16(%r12), %ecx
	movzbl	%cl, %r8d 
	salq	$3, %r8
	addq	tree_code_type(%rip), %r8
	movq	(%r8), %rdi
	movsbl	(%rdi),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L13657
	mov	%eax, %r9d
	jmp	*.L13696(,%r9,8)
	.section	.rodata
	.align 8
	.align 4
.L13696:
	.quad	.L13666
	.quad	.L13668
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13668
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13702
	.quad	.L13658
	.quad	.L13671
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13671
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13657
	.quad	.L13660
	.text
.L13658:
	movq	120(%r12), %r14
.L13657:
	movl	$1, %ebp
.L15246:
	testq	%r14, %r14
	je	.L13652
.L14866:
	cmpw	$53, (%r14)
	je	.L16476
.L13699:
	xorl	%eax, %eax
	movq	%r13, %rdi
	movq	%r14, %rsi
	call	rtx_equal_p
	xorl	%ebp, %ebp
	testl	%eax, %eax
	jne	.L13652
	cmpw	$55, (%r13)
	je	.L16477
.L13702:
	movl	$1, %ebp
.L13652:
	testl	%ebp, %ebp
	movl	$0, %eax
	movq	32(%r15), %rdi
	cmove	%rax, %rbx
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rbx, %rsi
	call	expand_expr
	movq	40(%r15), %rdi
	movq	%rax, %rbx
.L15248:
.L3379:
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movl	5416(%rsp), %r9d
	movq	56(%rsp), %r8
	movl	5412(%rsp), %edi
	movq	64(%rsp), %rsi
	movq	%rax, %rcx
	movq	%rbx, %rdx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	testq	%rax, %rax
	jne	.L13703
	jmp	.L15283
.L16477:
	cmpw	$55, (%r14)
	jne	.L13702
	testb	$32, 17(%r12)
.L15281:
	je	.L13652
	jmp	.L13702
.L16476:
	movq	8(%r14), %r14
	cmpw	$51, (%r14)
	jne	.L13699
	cmpl	$63, 8(%r14)
	jg	.L13699
.L14994:
	xorl	%ebp, %ebp
	jmp	.L13652
.L13666:
	movq	32(%r12), %rsi
	movq	%r13, %rdi
.L15370:
	xorl	%eax, %eax
	call	safe_from_p
.L15247:
	movl	%eax, %ebp
	jmp	.L13652
.L13668:
	movq	32(%r12), %rsi
	xorl	%eax, %eax
	movq	%r13, %rdi
	xorl	%ebp, %ebp
	call	safe_from_p
	testl	%eax, %eax
	je	.L13652
	movq	%r13, %rdi
	movq	40(%r12), %rsi
.L15282:
	xorl	%eax, %eax
	call	safe_from_p
	testl	%eax, %eax
	jmp	.L15281
.L13671:
	movzbl	%cl, %eax
	subl	$39, %eax
	cmpl	$67, %eax
	ja	.L13672
	mov	%eax, %r11d
	jmp	*.L13687(,%r11,8)
	.section	.rodata
	.align 8
	.align 4
.L13687:
	.quad	.L13674
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13685
	.quad	.L13676
	.quad	.L15283
	.quad	.L13683
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13672
	.quad	.L13684
	.quad	.L13681
	.quad	.L13673
	.text
.L13673:
	movq	32(%r12), %rdi
	call	staticp
	jmp	.L15247
.L13674:
	xorl	%ebp, %ebp
	cmpw	$55, %dx
	je	.L13652
.L13672:
	testq	%r14, %r14
	jne	.L14866
	movzbl	%cl, %r10d 
	xorl	%ebp, %ebp
	salq	$2, %r10
	addq	tree_code_length(%rip), %r10
	movl	(%r10), %eax
	cmpl	%eax, %ebp
	movl	%eax, 2332(%rsp)
	jge	.L13657
.L13695:
	movslq	%ebp,%rcx
	movq	32(%r12,%rcx,8), %rsi
	testq	%rsi, %rsi
	jne	.L16478
.L13692:
	incl	%ebp
	cmpl	2332(%rsp), %ebp
	jl	.L13695
	jmp	.L13657
.L16478:
	xorl	%eax, %eax
	movq	%r13, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L13692
	jmp	.L14994
.L13685:
	movq	%r13, %rdi
	movq	40(%r12), %rsi
	jmp	.L15370
.L13676:
	movq	48(%r12), %r14
	testq	%r14, %r14
	jne	.L14866
	cmpw	$51, %dx
	je	.L16479
.L13680:
	cmpw	$55, %dx
	jne	.L13672
	jmp	.L14994
.L16479:
	cmpl	$63, 8(%r13)
	jle	.L14994
	jmp	.L13680
	.p2align 6,,7
.L13683:
	movq	40(%r12), %r14
	jmp	.L13672
.L13684:
	movq	48(%r12), %r14
	jmp	.L13672
.L13681:
	movq	40(%r12), %r14
	xorl	%ebp, %ebp
	jmp	.L15246
	.p2align 6,,7
.L13660:
	cmpb	$3, %cl
	jne	.L14994
	movq	32(%r12), %rsi
	xorl	%ebp, %ebp
	testq	%rsi, %rsi
	jne	.L16480
.L13663:
	movq	(%r12), %rsi
	movq	%r13, %rdi
	testq	%rsi, %rsi
	jne	.L15282
	jmp	.L13702
.L16480:
	xorl	%eax, %eax
	movq	%r13, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L13652
	jmp	.L13663
	.p2align 6,,7
.L16475:
	movq	8(%r13), %rax
	movq	virtual_outgoing_args_rtx(%rip), %rcx
	cmpq	%rcx, %rax
	je	.L13702
	cmpw	$63, (%rax)
	jne	.L13655
	cmpq	%rcx, 8(%rax)
	jne	.L13655
	jmp	.L13702
	.p2align 6,,7
.L16474:
	movq	8(%rbx), %r13
	movzwl	(%r13), %edx
	cmpw	$51, %dx
	jne	.L13653
	cmpl	$63, 8(%r13)
	jg	.L13653
	jmp	.L14994
.L3240:
	cmpl	$4, 5412(%rsp)
	jne	.L3241
	xorl	%eax, %eax
	movq	%r15, %rdi
	movq	%rbx, %r14
	call	preexpand_calls
	xorl	%r8d, %r8d
	movl	$1, %r12d
	movq	40(%r15), %rbp
	testq	%rbx, %rbx
	je	.L3244
	movzwl	(%rbx), %eax
	cmpw	$53, %ax
	je	.L16481
	movl	%eax, %ecx
.L3245:
	cmpw	$55, %cx
	je	.L16482
.L3247:
	movzbl	16(%rbp), %edx
	movzbl	%dl, %r11d 
	salq	$3, %r11
	addq	tree_code_type(%rip), %r11
	movq	(%r11), %r9
	movsbl	(%r9),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L3249
	mov	%eax, %edi
	jmp	*.L3288(,%rdi,8)
	.section	.rodata
	.align 8
	.align 4
.L3288:
	.quad	.L3258
	.quad	.L3260
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3260
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3294
	.quad	.L3250
	.quad	.L3263
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3263
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3249
	.quad	.L3252
	.text
.L3250:
	movq	120(%rbp), %r8
.L3249:
	movl	$1, %r12d
.L15040:
	testq	%r8, %r8
	je	.L3244
.L14853:
	cmpw	$53, (%r8)
	je	.L16483
.L3291:
	movq	%r8, %rsi
	xorl	%eax, %eax
	movq	%r14, %rdi
	movq	%r8, 40(%rsp)
	xorl	%r12d, %r12d
	call	rtx_equal_p
	testl	%eax, %eax
	movq	40(%rsp), %r8
	jne	.L3244
	cmpw	$55, (%r14)
	je	.L16484
.L3294:
	movl	$1, %r12d
.L3244:
	testl	%r12d, %r12d
	movl	$0, %eax
	movq	32(%r15), %rdi
	cmove	%rax, %rbx
	movl	%r13d, %ecx
	xorl	%edx, %edx
	movq	%rbx, %rsi
	call	expand_expr
	movl	%r13d, %ecx
	xorl	%edx, %edx
	movq	40(%r15), %rdi
	movq	%rax, %rbp
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	cmpw	$63, (%rbp)
	movq	%rax, %r12
	je	.L16485
.L14848:
	movq	%r12, %rbx
	movq	%rbp, %r12
.L3295:
	cmpw	$63, (%rbx)
	je	.L16486
.L14850:
	movq	%rbx, %rcx
.L3297:
	movzwl	(%r12), %edx
	leal	-56(%rdx), %r14d
	cmpw	$1, %r14w
	jbe	.L3306
	cmpw	$46, %dx
	je	.L3306
	cmpw	$47, %dx
	je	.L3306
	cmpw	$49, %dx
	je	.L3306
	cmpw	$113, %dx
	je	.L3306
	cmpw	$66, (%rcx)
	je	.L3306
	movq	%r12, %rbx
	movq	%rcx, %r12
.L3305:
	movl	5412(%rsp), %esi
	movl	$63, %edi
	movq	%rbx, %rdx
	movq	%r12, %rcx
	call	simplify_binary_operation
	testq	%rax, %rax
	movq	%rax, 56(%rsp)
	jne	.L581
	movl	5412(%rsp), %esi
	movl	$63, %edi
	movq	%rbx, %rdx
	movq	%r12, %rcx
.L15276:
	xorl	%eax, %eax
	call	gen_rtx
	jmp	.L13703
.L3306:
	movq	%rcx, %rbx
	jmp	.L3305
.L16486:
	movq	16(%rbx), %r8
	movzwl	(%r8), %edx
	leal	-56(%rdx), %r13d
	cmpw	$1, %r13w
	jbe	.L3298
	cmpw	$46, %dx
	je	.L3298
	cmpw	$47, %dx
	je	.L3298
	cmpw	$49, %dx
	je	.L3298
	cmpw	$113, %dx
	jne	.L14850
.L3298:
	movq	const0_rtx(%rip), %rbp
	movl	5412(%rsp), %esi
	movl	$63, %edi
	movq	%r12, %rcx
	movq	%rbp, 5552(%rsp)
	movq	8(%rbx), %rdx
	call	simplify_binary_operation
	testq	%rax, %rax
	jne	.L3300
	cmpw	$66, (%r12)
	je	.L16487
	movl	$63, %edi
	movl	5412(%rsp), %esi
	movq	8(%rbx), %rdx
	movq	%r12, %rcx
.L15042:
	xorl	%eax, %eax
	call	gen_rtx
.L3300:
	movq	%rax, %rdi
	leaq	5552(%rsp), %rsi
	call	eliminate_constant_term
	movq	16(%rbx), %rcx
	movl	5412(%rsp), %esi
	movq	5552(%rsp), %rdx
	movl	$63, %edi
	movq	%rax, %r12
	call	simplify_binary_operation
	testq	%rax, %rax
	movq	%rax, %rcx
	jne	.L3297
	movq	16(%rbx), %rcx
	movq	5552(%rsp), %rdx
	movl	$63, %edi
	movl	5412(%rsp), %esi
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, %rcx
	jmp	.L3297
.L16487:
	movl	5412(%rsp), %esi
	movq	8(%rbx), %rcx
	movl	$63, %edi
	movq	%r12, %rdx
	jmp	.L15042
	.p2align 6,,7
.L16485:
	movq	16(%rbp), %rbx
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L3296
	cmpw	$46, %dx
	je	.L3296
	cmpw	$47, %dx
	je	.L3296
	cmpw	$49, %dx
	je	.L3296
	cmpw	$113, %dx
	jne	.L14848
.L3296:
	movq	%rbp, %rbx
	jmp	.L3295
.L16484:
	cmpw	$55, (%r8)
	jne	.L3294
	testb	$32, 17(%rbp)
.L15297:
	je	.L3244
	jmp	.L3294
	.p2align 6,,7
.L16483:
	movq	8(%r8), %r8
	cmpw	$51, (%r8)
	jne	.L3291
	cmpl	$63, 8(%r8)
	jg	.L3291
.L14921:
	xorl	%r12d, %r12d
	jmp	.L3244
.L3258:
	movq	32(%rbp), %rsi
	movq	%r14, %rdi
.L15296:
	xorl	%eax, %eax
	call	safe_from_p
.L15041:
	movl	%eax, %r12d
	jmp	.L3244
.L3260:
	movq	32(%rbp), %rsi
	xorl	%eax, %eax
	movq	%r14, %rdi
	xorl	%r12d, %r12d
	call	safe_from_p
	testl	%eax, %eax
	je	.L3244
	movq	%r14, %rdi
	movq	40(%rbp), %rsi
.L15298:
	xorl	%eax, %eax
	call	safe_from_p
	testl	%eax, %eax
	jmp	.L15297
.L3263:
	movzbl	%dl, %eax
	subl	$39, %eax
	cmpl	$67, %eax
	ja	.L3264
	mov	%eax, %r10d
	jmp	*.L3279(,%r10,8)
	.section	.rodata
	.align 8
	.align 4
.L3279:
	.quad	.L3266
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3277
	.quad	.L3268
	.quad	.L15283
	.quad	.L3275
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3264
	.quad	.L3276
	.quad	.L3273
	.quad	.L3265
	.text
.L3265:
	movq	32(%rbp), %rdi
	call	staticp
	jmp	.L15041
.L3266:
	xorl	%r12d, %r12d
	cmpw	$55, %cx
	je	.L3244
.L3264:
	testq	%r8, %r8
	jne	.L14853
	movzbl	%dl, %esi 
	xorl	%r12d, %r12d
	salq	$2, %rsi
	addq	tree_code_length(%rip), %rsi
	movl	(%rsi), %eax
	cmpl	%eax, %r12d
	movl	%eax, 4740(%rsp)
	jge	.L3249
.L3287:
	movslq	%r12d,%rdx
	movq	32(%rbp,%rdx,8), %rsi
	testq	%rsi, %rsi
	jne	.L16488
.L3284:
	incl	%r12d
	cmpl	4740(%rsp), %r12d
	jl	.L3287
	jmp	.L3249
.L16488:
	xorl	%eax, %eax
	movq	%r14, %rdi
	movq	%r8, 40(%rsp)
	call	safe_from_p
	movq	40(%rsp), %r8
	testl	%eax, %eax
	jne	.L3284
	jmp	.L14921
.L3277:
	movq	%r14, %rdi
	movq	40(%rbp), %rsi
	jmp	.L15296
.L3268:
	movq	48(%rbp), %r8
	testq	%r8, %r8
	jne	.L14853
	cmpw	$51, %cx
	je	.L16489
.L3272:
	cmpw	$55, %cx
	jne	.L3264
	jmp	.L14921
.L16489:
	cmpl	$63, 8(%r14)
	jle	.L14921
	jmp	.L3272
.L3275:
	movq	40(%rbp), %r8
	jmp	.L3264
.L3276:
	movq	48(%rbp), %r8
	jmp	.L3264
.L3273:
	movq	40(%rbp), %r8
	xorl	%r12d, %r12d
	jmp	.L15040
.L3252:
	cmpb	$3, %dl
	jne	.L14921
	movq	32(%rbp), %rsi
	xorl	%r12d, %r12d
	testq	%rsi, %rsi
	jne	.L16490
.L3255:
	movq	(%rbp), %rsi
	movq	%r14, %rdi
	testq	%rsi, %rsi
	jne	.L15298
	jmp	.L3294
.L16490:
	xorl	%eax, %eax
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L3244
	jmp	.L3255
	.p2align 6,,7
.L16482:
	movq	8(%r14), %rax
	movq	virtual_outgoing_args_rtx(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L3294
	cmpw	$63, (%rax)
	jne	.L3247
	cmpq	%rdx, 8(%rax)
	jne	.L3247
	jmp	.L3294
	.p2align 6,,7
.L16481:
	movq	8(%rbx), %r14
	movzwl	(%r14), %ecx
	cmpw	$51, %cx
	jne	.L3245
	cmpl	$63, 8(%r14)
	jg	.L3245
	jmp	.L14921
	.p2align 6,,7
.L16473:
	movslq	5412(%rsp),%r12
	movl	mode_size(,%r12,4), %eax
	sall	$3, %eax
	cmpl	$32, %eax
	jg	.L3234
	cmpl	$1, %r13d
	je	.L3236
	cmpl	$3, %r13d
	je	.L3236
	cmpl	$4, 5412(%rsp)
	jne	.L3234
.L3236:
	movq	32(%r15), %rdi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	movl	$1, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	%rax, %rdi
	movq	40(%r15), %rax
.L15412:
	movl	24(%rax), %esi
	call	plus_constant_wide
	cmpl	$1, %r13d
	je	.L13703
	cmpl	$3, %r13d
	je	.L13703
	movq	56(%rsp), %rsi
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	force_operand
	jmp	.L13703
.L16472:
	movslq	5412(%rsp),%rcx
	movl	mode_size(,%rcx,4), %eax
	sall	$3, %eax
	cmpl	$32, %eax
	jg	.L3231
	cmpl	$1, %r13d
	je	.L3232
	cmpl	$3, %r13d
	je	.L3232
	cmpl	$4, 5412(%rsp)
	jne	.L3231
.L3232:
	movq	40(%r15), %rdi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	movl	$1, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	%rax, %rdi
	movq	32(%r15), %rax
	jmp	.L15412
.L16471:
	movq	40(%rbp), %r10
	cmpb	$25, 16(%r10)
	jne	.L3229
	movq	40(%r15), %r8
	cmpb	$105, 16(%r8)
	movq	%r8, %rcx
	jne	.L3229
	movq	40(%r8), %rax
	cmpq	frame_pointer_rtx(%rip), %rax
	je	.L3230
	cmpq	stack_pointer_rtx(%rip), %rax
	je	.L3230
	cmpq	arg_pointer_rtx(%rip), %rax
	jne	.L3229
.L3230:
	movq	32(%rdx), %rsi
	movq	%rsi, 40(%r15)
	movq	%rcx, 32(%rdx)
	movq	32(%r15), %rbp
	jmp	.L3229
	.p2align 6,,7
.L3308:
	cmpl	$1, %r13d
	je	.L3310
	cmpl	$3, %r13d
	je	.L3310
.L3309:
	movq	40(%r15), %rdx
	cmpb	$25, 16(%rdx)
	je	.L16491
	movq	sub_optab(%rip), %rax
	movq	%rax, 64(%rsp)
	jmp	.L3241
.L16491:
	movq	5424(%rsp), %rsi
	movl	$72, %edi
	call	build1
	movq	%rax, %rdi
	call	fold
	movq	32(%r15), %rdx
	movq	5424(%rsp), %rsi
	movq	%rax, %rcx
	movl	$53, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %r15
	jmp	.L3228
.L3310:
	movq	32(%r15), %rdi
	xorl	%eax, %eax
	call	really_constant_p
	testl	%eax, %eax
	je	.L3309
	movq	40(%r15), %rdi
	xorl	%eax, %eax
	call	really_constant_p
	testl	%eax, %eax
	je	.L3309
	movq	32(%r15), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	%r13d, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movl	%r13d, %ecx
	xorl	%edx, %edx
	movq	40(%r15), %rdi
	xorl	%esi, %esi
	movq	%rax, %rbx
	xorl	%eax, %eax
	call	expand_expr
	movl	5412(%rsp), %esi
	movl	$64, %edi
	movq	%rax, %rcx
.L15299:
	movq	%rbx, %rdx
	jmp	.L15276
	.p2align 6,,7
.L3312:
	xorl	%eax, %eax
	movq	%r15, %rdi
	call	preexpand_calls
	movq	32(%r15), %rdx
	cmpb	$25, 16(%rdx)
	je	.L16492
.L3313:
	decl	%r13d
	je	.L16493
.L14879:
	movq	40(%r15), %r8
.L3314:
	xorl	%r13d, %r13d
	movq	%rbx, %r12
	movl	$1, %ebp
	testq	%rbx, %rbx
	je	.L3320
	movzwl	(%rbx), %eax
	cmpw	$53, %ax
	je	.L16494
	movl	%eax, %edx
.L3321:
	cmpw	$55, %dx
	je	.L16495
.L3323:
	movzbl	16(%r8), %ecx
	movzbl	%cl, %esi 
	salq	$3, %rsi
	addq	tree_code_type(%rip), %rsi
	movq	(%rsi), %rdi
	movsbl	(%rdi),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L3325
	mov	%eax, %ebp
	jmp	*.L3364(,%rbp,8)
	.section	.rodata
	.align 8
	.align 4
.L3364:
	.quad	.L3334
	.quad	.L3336
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3336
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3370
	.quad	.L3326
	.quad	.L3339
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3339
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3325
	.quad	.L3328
	.text
.L3326:
	movq	120(%r8), %r13
.L3325:
	movl	$1, %ebp
.L15043:
	testq	%r13, %r13
	je	.L3320
.L14854:
	cmpw	$53, (%r13)
	je	.L16496
.L3367:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	%r8, 40(%rsp)
	xorl	%ebp, %ebp
	call	rtx_equal_p
	testl	%eax, %eax
	movq	40(%rsp), %r8
	jne	.L3320
	cmpw	$55, (%r12)
	je	.L16497
.L3370:
	movl	$1, %ebp
.L3320:
	movq	32(%r15), %rdx
	testl	%ebp, %ebp
	movl	$0, %r13d
	cmove	%r13, %rbx
	cmpb	$102, 16(%rdx)
	je	.L16498
.L3371:
	movq	32(%r15), %rdi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	40(%r15), %rdi
	movq	%rax, %r14
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movl	5416(%rsp), %r8d
	movq	56(%rsp), %rcx
	movl	5412(%rsp), %edi
	movq	%rax, %rdx
	movq	%r14, %rsi
	xorl	%eax, %eax
	call	expand_mult
	jmp	.L13703
.L16498:
	movq	5424(%rsp), %r8
	cmpb	$7, 16(%r8)
	jne	.L3371
	movq	32(%rdx), %r11
	movq	8(%rdx), %r9
	movq	8(%r11), %rsi
	movzbl	45(%r9), %r12d
	cmpb	%r12b, 45(%rsi)
	jae	.L3371
	movq	40(%r15), %r8
	cmpb	$25, 16(%r8)
	je	.L16499
.L3373:
	cmpb	$102, 16(%r8)
	jne	.L3371
	movq	32(%r8), %rbp
	movq	8(%rbp), %rdx
	movq	32(%r15), %rbp
	movq	32(%rbp), %r14
	movq	8(%r14), %rcx
	movzbl	45(%rcx), %esi
	cmpb	%sil, 45(%rdx)
	jne	.L3371
	movzbl	17(%rdx), %eax
	movzbl	17(%rcx), %r13d
	shrb	$6, %al
	shrb	$6, %r13b
	andl	$1, %eax
	andl	$1, %r13d
	cmpl	%r13d, %eax
	jne	.L3371
.L3372:
	movq	32(%rbp), %rdx
	movq	8(%rdx), %rcx
	testb	$64, 17(%rcx)
	movzbl	44(%rcx), %edx
	je	.L3374
	movq	umul_widen_optab(%rip), %r8
	movq	%r8, 64(%rsp)
.L3375:
	movslq	%edx,%r9
	movl	5412(%rsp), %edx
	cmpl	mode_wider_mode(,%r9,4), %edx
	jne	.L3371
	movq	64(%rsp), %r11
	movslq	%edx,%r10
	salq	$4, %r10
	cmpl	$210, 8(%r11,%r10)
	je	.L3371
	movq	32(%rbp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	40(%r15), %rdi
	movq	%rax, %rbx
	cmpb	$25, 16(%rdi)
	je	.L15248
	movq	32(%rdi), %rdi
	jmp	.L15248
.L3374:
	movq	smul_widen_optab(%rip), %r12
	movq	%r12, 64(%rsp)
	jmp	.L3375
	.p2align 6,,7
.L16499:
	xorl	%eax, %eax
	movq	%r8, %rdi
	call	int_fits_type_p
	testl	%eax, %eax
	je	.L14881
	movq	40(%r15), %rdx
	movq	8(%rdx), %rdi
	movzbq	44(%rdi), %r10
	movl	mode_size(,%r10,4), %eax
	sall	$3, %eax
	cmpl	$32, %eax
	jle	.L16500
.L14883:
	movq	32(%r15), %rbp
	jmp	.L3372
.L16500:
	movl	24(%rdx), %edi
	xorl	%eax, %eax
	call	exact_log2_wide
	testl	%eax, %eax
	js	.L14883
.L14881:
	movq	40(%r15), %r8
	jmp	.L3373
.L16497:
	cmpw	$55, (%r13)
	jne	.L3370
	testb	$32, 17(%r8)
.L15301:
	je	.L3320
	jmp	.L3370
.L16496:
	movq	8(%r13), %r13
	cmpw	$51, (%r13)
	jne	.L3367
	cmpl	$63, 8(%r13)
	jg	.L3367
.L14922:
	xorl	%ebp, %ebp
	jmp	.L3320
.L3334:
	movq	32(%r8), %rsi
	movq	%r12, %rdi
.L15300:
	xorl	%eax, %eax
	call	safe_from_p
.L15044:
	movl	%eax, %ebp
	jmp	.L3320
.L3336:
	movq	32(%r8), %rsi
	xorl	%eax, %eax
	movq	%r12, %rdi
	movq	%r8, 40(%rsp)
	xorl	%ebp, %ebp
	call	safe_from_p
	movq	40(%rsp), %r8
	testl	%eax, %eax
	je	.L3320
	movq	%r12, %rdi
	movq	40(%r8), %rsi
.L15302:
	xorl	%eax, %eax
	call	safe_from_p
	testl	%eax, %eax
	jmp	.L15301
.L3339:
	movzbl	%cl, %eax
	subl	$39, %eax
	cmpl	$67, %eax
	ja	.L3340
	mov	%eax, %r14d
	jmp	*.L3355(,%r14,8)
	.section	.rodata
	.align 8
	.align 4
.L3355:
	.quad	.L3342
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3353
	.quad	.L3344
	.quad	.L15283
	.quad	.L3351
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3340
	.quad	.L3352
	.quad	.L3349
	.quad	.L3341
	.text
.L3341:
	movq	32(%r8), %rdi
	call	staticp
	jmp	.L15044
.L3342:
	xorl	%ebp, %ebp
	cmpw	$55, %dx
	je	.L3320
.L3340:
	testq	%r13, %r13
	jne	.L14854
	movzbl	%cl, %edx 
	xorl	%ebp, %ebp
	salq	$2, %rdx
	addq	tree_code_length(%rip), %rdx
	movl	(%rdx), %r14d
	cmpl	%r14d, %ebp
	jge	.L3325
.L3363:
	movslq	%ebp,%rcx
	movq	32(%r8,%rcx,8), %rsi
	testq	%rsi, %rsi
	jne	.L16501
.L3360:
	incl	%ebp
	cmpl	%r14d, %ebp
	jl	.L3363
	jmp	.L3325
.L16501:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movq	%r8, 40(%rsp)
	call	safe_from_p
	movq	40(%rsp), %r8
	testl	%eax, %eax
	jne	.L3360
	jmp	.L14922
.L3353:
	movq	%r12, %rdi
	movq	40(%r8), %rsi
	jmp	.L15300
.L3344:
	movq	48(%r8), %r13
	testq	%r13, %r13
	jne	.L14854
	cmpw	$51, %dx
	je	.L16502
.L3348:
	cmpw	$55, %dx
	jne	.L3340
	jmp	.L14922
.L16502:
	cmpl	$63, 8(%r12)
	jle	.L14922
	jmp	.L3348
.L3351:
	movq	40(%r8), %r13
	jmp	.L3340
.L3352:
	movq	48(%r8), %r13
	jmp	.L3340
.L3349:
	movq	40(%r8), %r13
	xorl	%ebp, %ebp
	jmp	.L15043
	.p2align 6,,7
.L3328:
	cmpb	$3, %cl
	jne	.L14922
	movq	32(%r8), %rsi
	xorl	%ebp, %ebp
	testq	%rsi, %rsi
	jne	.L16503
.L3331:
	movq	(%r8), %rsi
	movq	%r12, %rdi
	testq	%rsi, %rsi
	jne	.L15302
	jmp	.L3370
.L16503:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movq	%r8, 40(%rsp)
	call	safe_from_p
	movq	40(%rsp), %r8
	testl	%eax, %eax
	je	.L3320
	jmp	.L3331
	.p2align 6,,7
.L16495:
	movq	8(%r12), %rax
	movq	virtual_outgoing_args_rtx(%rip), %rcx
	cmpq	%rcx, %rax
	je	.L3370
	cmpw	$63, (%rax)
	jne	.L3323
	cmpq	%rcx, 8(%rax)
	jne	.L3323
	jmp	.L3370
	.p2align 6,,7
.L16494:
	movq	8(%rbx), %r12
	movzwl	(%r12), %edx
	cmpw	$51, %dx
	jne	.L3321
	cmpl	$63, 8(%r12)
	jg	.L3321
	jmp	.L14922
	.p2align 6,,7
.L16493:
	cmpl	$4, 5412(%rsp)
	jne	.L14879
	movq	40(%r15), %r8
	cmpb	$25, 16(%r8)
	jne	.L3314
	movl	mode_size+16(%rip), %eax
	sall	$3, %eax
	cmpl	$32, %eax
	jg	.L3314
	movq	32(%r15), %rdi
	xorl	%edx, %edx
	movl	$1, %ecx
	xorl	%eax, %eax
	movq	%rbx, %rsi
	call	expand_expr
	movzwl	(%rax), %edx
	movq	%rax, %rbp
	cmpw	$63, %dx
	movl	%edx, %ecx
	je	.L16504
.L3315:
	cmpw	$51, %cx
	je	.L3316
	movq	%rbp, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	force_operand
	movq	%rax, %rbp
	movzwl	(%rax), %edx
.L3316:
	cmpw	$51, %dx
	je	.L3317
	movl	5412(%rsp), %edi
	movq	%rbp, %rsi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbp
.L3317:
	movq	40(%r15), %rbx
	movl	$46, %edi
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	24(%rbx), %edx
	call	gen_rtx
	movq	%rbp, %rdx
	movl	5412(%rsp), %esi
	movq	%rax, %rcx
	movl	$66, %edi
	jmp	.L15276
.L16504:
	movq	16(%rax), %r12
	cmpw	$46, (%r12)
	jne	.L3315
	movq	40(%r15), %r10
	movl	$46, %edi
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	24(%r10), %edx
	call	gen_rtx
	movq	8(%rbp), %rdx
	movl	$4, %esi
	movq	%rax, %rcx
	movl	$66, %edi
	xorl	%eax, %eax
	call	gen_rtx
	xorl	%esi, %esi
	movl	$46, %edi
	movq	40(%r15), %r9
	movq	16(%rbp), %r11
	movq	%rax, %rbx
	xorl	%eax, %eax
	movl	8(%r11), %edx
	imull	24(%r9), %edx
	call	gen_rtx
	movl	$4, %esi
	movl	$63, %edi
	movq	%rax, %rcx
	jmp	.L15299
	.p2align 6,,7
.L16492:
	movq	40(%r15), %rcx
	movq	%rdx, 40(%r15)
	movq	%rcx, 32(%r15)
	jmp	.L3313
.L3442:
	xorl	%eax, %eax
	movq	%r15, %rdi
	movq	%rbx, %r14
	call	preexpand_calls
	xorl	%r8d, %r8d
	movl	$1, %ebp
	movq	40(%r15), %r13
	testq	%rbx, %rbx
	je	.L3445
	movzwl	(%rbx), %eax
	cmpw	$53, %ax
	je	.L16505
	movl	%eax, %edx
.L3446:
	cmpw	$55, %dx
	je	.L16506
.L3448:
	movzbl	16(%r13), %ecx
	movzbl	%cl, %r10d 
	salq	$3, %r10
	addq	tree_code_type(%rip), %r10
	movq	(%r10), %r11
	movsbl	(%r11),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L3450
	mov	%eax, %edi
	jmp	*.L3489(,%rdi,8)
	.section	.rodata
	.align 8
	.align 4
.L3489:
	.quad	.L3459
	.quad	.L3461
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3461
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3495
	.quad	.L3451
	.quad	.L3464
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3464
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3450
	.quad	.L3453
	.text
.L3451:
	movq	120(%r13), %r8
.L3450:
	movl	$1, %ebp
.L15047:
	testq	%r8, %r8
	je	.L3445
.L14856:
	cmpw	$53, (%r8)
	je	.L16507
.L3492:
	movq	%r8, %rsi
	xorl	%eax, %eax
	movq	%r14, %rdi
	movq	%r8, 40(%rsp)
	xorl	%ebp, %ebp
	call	rtx_equal_p
	testl	%eax, %eax
	movq	40(%rsp), %r8
	jne	.L3445
	cmpw	$55, (%r14)
	je	.L16508
.L3495:
	movl	$1, %ebp
.L3445:
	testl	%ebp, %ebp
	movl	$0, %eax
	movq	32(%r15), %rdi
	cmove	%rax, %rbx
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rbx, %rsi
	call	expand_expr
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	40(%r15), %rdi
	movq	%rax, %rbx
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movl	$1, %edi
	movl	5416(%rsp), %r14d
	movl	%r14d, (%rsp)
.L15277:
	movl	5412(%rsp), %edx
	movq	56(%rsp), %r9
	movq	%rax, %r8
	movl	%r12d, %esi
	movq	%rbx, %rcx
	xorl	%eax, %eax
	call	expand_divmod
	jmp	.L13703
.L16508:
	cmpw	$55, (%r8)
	jne	.L3495
	testb	$32, 17(%r13)
.L15307:
	je	.L3445
	jmp	.L3495
.L16507:
	movq	8(%r8), %r8
	cmpw	$51, (%r8)
	jne	.L3492
	cmpl	$63, 8(%r8)
	jg	.L3492
.L14924:
	xorl	%ebp, %ebp
	jmp	.L3445
.L3459:
	movq	32(%r13), %rsi
	movq	%r14, %rdi
.L15306:
	xorl	%eax, %eax
	call	safe_from_p
.L15048:
	movl	%eax, %ebp
	jmp	.L3445
.L3461:
	movq	32(%r13), %rsi
	xorl	%eax, %eax
	movq	%r14, %rdi
	xorl	%ebp, %ebp
	call	safe_from_p
	testl	%eax, %eax
	je	.L3445
	movq	%r14, %rdi
	movq	40(%r13), %rsi
.L15308:
	xorl	%eax, %eax
	call	safe_from_p
	testl	%eax, %eax
	jmp	.L15307
.L3464:
	movzbl	%cl, %eax
	subl	$39, %eax
	cmpl	$67, %eax
	ja	.L3465
	mov	%eax, %esi
	jmp	*.L3480(,%rsi,8)
	.section	.rodata
	.align 8
	.align 4
.L3480:
	.quad	.L3467
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3478
	.quad	.L3469
	.quad	.L15283
	.quad	.L3476
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3465
	.quad	.L3477
	.quad	.L3474
	.quad	.L3466
	.text
.L3466:
	movq	32(%r13), %rdi
	call	staticp
	jmp	.L15048
.L3467:
	xorl	%ebp, %ebp
	cmpw	$55, %dx
	je	.L3445
.L3465:
	testq	%r8, %r8
	jne	.L14856
	movzbl	%cl, %ebp 
	salq	$2, %rbp
	addq	tree_code_length(%rip), %rbp
	movl	(%rbp), %eax
	xorl	%ebp, %ebp
	cmpl	%eax, %ebp
	movl	%eax, 4732(%rsp)
	jge	.L3450
.L3488:
	movslq	%ebp,%r9
	movq	32(%r13,%r9,8), %rsi
	testq	%rsi, %rsi
	jne	.L16509
.L3485:
	incl	%ebp
	cmpl	4732(%rsp), %ebp
	jl	.L3488
	jmp	.L3450
.L16509:
	xorl	%eax, %eax
	movq	%r14, %rdi
	movq	%r8, 40(%rsp)
	call	safe_from_p
	movq	40(%rsp), %r8
	testl	%eax, %eax
	jne	.L3485
	jmp	.L14924
.L3478:
	movq	%r14, %rdi
	movq	40(%r13), %rsi
	jmp	.L15306
.L3469:
	movq	48(%r13), %r8
	testq	%r8, %r8
	jne	.L14856
	cmpw	$51, %dx
	je	.L16510
.L3473:
	cmpw	$55, %dx
	jne	.L3465
	jmp	.L14924
.L16510:
	cmpl	$63, 8(%r14)
	jle	.L14924
	jmp	.L3473
.L3476:
	movq	40(%r13), %r8
	jmp	.L3465
.L3477:
	movq	48(%r13), %r8
	jmp	.L3465
.L3474:
	movq	40(%r13), %r8
	xorl	%ebp, %ebp
	jmp	.L15047
	.p2align 6,,7
.L3453:
	cmpb	$3, %cl
	jne	.L14924
	movq	32(%r13), %rsi
	xorl	%ebp, %ebp
	testq	%rsi, %rsi
	jne	.L16511
.L3456:
	movq	(%r13), %rsi
	movq	%r14, %rdi
	testq	%rsi, %rsi
	jne	.L15308
	jmp	.L3495
.L16511:
	xorl	%eax, %eax
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L3445
	jmp	.L3456
	.p2align 6,,7
.L16506:
	movq	8(%r14), %rax
	movq	virtual_outgoing_args_rtx(%rip), %rcx
	cmpq	%rcx, %rax
	je	.L3495
	cmpw	$63, (%rax)
	jne	.L3448
	cmpq	%rcx, 8(%rax)
	jne	.L3448
	jmp	.L3495
	.p2align 6,,7
.L16505:
	movq	8(%rbx), %r14
	movzwl	(%r14), %edx
	cmpw	$51, %dx
	jne	.L3446
	cmpl	$63, 8(%r14)
	jg	.L3446
	jmp	.L14924
	.p2align 6,,7
.L3438:
	movq	flodiv_optab(%rip), %r13
	movq	%r13, 64(%rsp)
	jmp	.L3241
.L3384:
	xorl	%eax, %eax
	movq	%r15, %rdi
	movq	%rbx, %r14
	call	preexpand_calls
	xorl	%r8d, %r8d
	movl	$1, %ebp
	movq	40(%r15), %r13
	testq	%rbx, %rbx
	je	.L3387
	movzwl	(%rbx), %eax
	cmpw	$53, %ax
	je	.L16512
	movl	%eax, %edx
.L3388:
	cmpw	$55, %dx
	je	.L16513
.L3390:
	movzbl	16(%r13), %ecx
	movzbl	%cl, %esi 
	salq	$3, %rsi
	addq	tree_code_type(%rip), %rsi
	movq	(%rsi), %rdi
	movsbl	(%rdi),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L3392
	mov	%eax, %ebp
	jmp	*.L3431(,%rbp,8)
	.section	.rodata
	.align 8
	.align 4
.L3431:
	.quad	.L3401
	.quad	.L3403
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3403
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3437
	.quad	.L3393
	.quad	.L3406
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3406
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3392
	.quad	.L3395
	.text
.L3393:
	movq	120(%r13), %r8
.L3392:
	movl	$1, %ebp
.L15045:
	testq	%r8, %r8
	je	.L3387
.L14855:
	cmpw	$53, (%r8)
	je	.L16514
.L3434:
	movq	%r8, %rsi
	xorl	%eax, %eax
	movq	%r14, %rdi
	movq	%r8, 40(%rsp)
	xorl	%ebp, %ebp
	call	rtx_equal_p
	testl	%eax, %eax
	movq	40(%rsp), %r8
	jne	.L3387
	cmpw	$55, (%r14)
	je	.L16515
.L3437:
	movl	$1, %ebp
.L3387:
	testl	%ebp, %ebp
	movq	32(%r15), %rdi
	movl	$0, %eax
	cmove	%rax, %rbx
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rbx, %rsi
	call	expand_expr
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	40(%r15), %rdi
	movq	%rax, %rbx
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	xorl	%edi, %edi
	movl	5416(%rsp), %r15d
	movl	%r15d, (%rsp)
	jmp	.L15277
.L16515:
	cmpw	$55, (%r8)
	jne	.L3437
	testb	$32, 17(%r13)
.L15304:
	je	.L3387
	jmp	.L3437
.L16514:
	movq	8(%r8), %r8
	cmpw	$51, (%r8)
	jne	.L3434
	cmpl	$63, 8(%r8)
	jg	.L3434
.L14923:
	xorl	%ebp, %ebp
	jmp	.L3387
.L3401:
	movq	32(%r13), %rsi
	movq	%r14, %rdi
.L15303:
	xorl	%eax, %eax
	call	safe_from_p
.L15046:
	movl	%eax, %ebp
	jmp	.L3387
.L3403:
	movq	32(%r13), %rsi
	xorl	%eax, %eax
	movq	%r14, %rdi
	xorl	%ebp, %ebp
	call	safe_from_p
	testl	%eax, %eax
	je	.L3387
	movq	%r14, %rdi
	movq	40(%r13), %rsi
.L15305:
	xorl	%eax, %eax
	call	safe_from_p
	testl	%eax, %eax
	jmp	.L15304
.L3406:
	movzbl	%cl, %eax
	subl	$39, %eax
	cmpl	$67, %eax
	ja	.L3407
	mov	%eax, %r9d
	jmp	*.L3422(,%r9,8)
	.section	.rodata
	.align 8
	.align 4
.L3422:
	.quad	.L3409
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3420
	.quad	.L3411
	.quad	.L15283
	.quad	.L3418
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3407
	.quad	.L3419
	.quad	.L3416
	.quad	.L3408
	.text
.L3408:
	movq	32(%r13), %rdi
	call	staticp
	jmp	.L15046
.L3409:
	xorl	%ebp, %ebp
	cmpw	$55, %dx
	je	.L3387
.L3407:
	testq	%r8, %r8
	jne	.L14855
	movzbl	%cl, %edx 
	xorl	%ebp, %ebp
	salq	$2, %rdx
	addq	tree_code_length(%rip), %rdx
	movl	(%rdx), %eax
	cmpl	%eax, %ebp
	movl	%eax, 4736(%rsp)
	jge	.L3392
.L3430:
	movslq	%ebp,%rcx
	movq	32(%r13,%rcx,8), %rsi
	testq	%rsi, %rsi
	jne	.L16516
.L3427:
	incl	%ebp
	cmpl	4736(%rsp), %ebp
	jl	.L3430
	jmp	.L3392
.L16516:
	xorl	%eax, %eax
	movq	%r14, %rdi
	movq	%r8, 40(%rsp)
	call	safe_from_p
	movq	40(%rsp), %r8
	testl	%eax, %eax
	jne	.L3427
	jmp	.L14923
.L3420:
	movq	%r14, %rdi
	movq	40(%r13), %rsi
	jmp	.L15303
.L3411:
	movq	48(%r13), %r8
	testq	%r8, %r8
	jne	.L14855
	cmpw	$51, %dx
	je	.L16517
.L3415:
	cmpw	$55, %dx
	jne	.L3407
	jmp	.L14923
.L16517:
	cmpl	$63, 8(%r14)
	jle	.L14923
	jmp	.L3415
.L3418:
	movq	40(%r13), %r8
	jmp	.L3407
.L3419:
	movq	48(%r13), %r8
	jmp	.L3407
.L3416:
	movq	40(%r13), %r8
	xorl	%ebp, %ebp
	jmp	.L15045
	.p2align 6,,7
.L3395:
	cmpb	$3, %cl
	jne	.L14923
	movq	32(%r13), %rsi
	xorl	%ebp, %ebp
	testq	%rsi, %rsi
	jne	.L16518
.L3398:
	movq	(%r13), %rsi
	movq	%r14, %rdi
	testq	%rsi, %rsi
	jne	.L15305
	jmp	.L3437
.L16518:
	xorl	%eax, %eax
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L3387
	jmp	.L3398
	.p2align 6,,7
.L16513:
	movq	8(%r14), %rax
	movq	virtual_outgoing_args_rtx(%rip), %rcx
	cmpq	%rcx, %rax
	je	.L3437
	cmpw	$63, (%rax)
	jne	.L3390
	cmpq	%rcx, 8(%rax)
	jne	.L3390
	jmp	.L3437
	.p2align 6,,7
.L16512:
	movq	8(%rbx), %r14
	movzwl	(%r14), %edx
	cmpw	$51, %dx
	jne	.L3388
	cmpl	$63, 8(%r14)
	jg	.L3388
	jmp	.L14923
	.p2align 6,,7
.L3499:
	movq	32(%r15), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	cmpq	$0, 56(%rsp)
	movq	%rax, %rbx
	je	.L16519
.L3500:
	movq	56(%rsp), %rdi
	movl	5416(%rsp), %edx
	movq	%rbx, %rsi
	xorl	%eax, %eax
	call	expand_fix
	jmp	.L581
.L16519:
	movl	5412(%rsp), %edi
	call	gen_reg_rtx
	movq	%rax, 56(%rsp)
	jmp	.L3500
.L3501:
	movq	32(%r15), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	cmpq	$0, 56(%rsp)
	movq	%rax, %rbx
	je	.L16520
.L3502:
	cmpb	$0, 2(%rbx)
	je	.L16521
.L3503:
	movq	32(%r15), %rdx
	movq	56(%rsp), %rdi
	movq	%rbx, %rsi
	xorl	%eax, %eax
	movq	8(%rdx), %rcx
	movzbl	17(%rcx), %edx
	shrb	$6, %dl
	andl	$1, %edx
	call	expand_float
	jmp	.L581
.L16521:
	movq	32(%r15), %r12
	movq	%rbx, %rsi
	xorl	%eax, %eax
	movq	8(%r12), %r8
	movzbl	44(%r8), %edi
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L3503
.L16520:
	movl	5412(%rsp), %edi
	call	gen_reg_rtx
	movq	%rax, 56(%rsp)
	jmp	.L3502
.L3504:
	movq	32(%r15), %rdi
	movq	56(%rsp), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	xorl	%r8d, %r8d
	movq	56(%rsp), %rcx
	movl	5412(%rsp), %edi
	movq	neg_optab(%rip), %rsi
	movq	%rax, %rdx
.L15378:
	xorl	%eax, %eax
	call	expand_unop
.L15379:
	testq	%rax, %rax
	movq	%rax, 56(%rsp)
	jne	.L581
	jmp	.L15283
	.p2align 6,,7
.L3569:
	testq	%rbp, %rbp
	movq	%rbp, 56(%rsp)
	je	.L3571
	movl	(%rbp), %eax
	xorl	%r8d, %r8d
	movq	%rbp, %r14
	movq	40(%r15), %rbx
	cmpw	$53, %ax
	je	.L16522
	movl	%eax, %edx
.L3574:
	cmpw	$55, %dx
	je	.L16523
.L3576:
	movzbl	16(%rbx), %ecx
	movzbl	%cl, %r11d 
	salq	$3, %r11
	addq	tree_code_type(%rip), %r11
	movq	(%r11), %r13
	movsbl	(%r13),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L3578
	mov	%eax, %r10d
	jmp	*.L3617(,%r10,8)
	.section	.rodata
	.align 8
	.align 4
.L3617:
	.quad	.L3587
	.quad	.L3589
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3589
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3623
	.quad	.L3579
	.quad	.L3592
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3592
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3578
	.quad	.L3581
	.text
.L3579:
	movq	120(%rbx), %r8
.L3578:
	movl	$1, %r13d
.L15051:
	testq	%r8, %r8
	je	.L3573
.L14858:
	cmpw	$53, (%r8)
	je	.L16524
.L3620:
	movq	%r8, %rsi
	xorl	%eax, %eax
	movq	%r14, %rdi
	movq	%r8, 40(%rsp)
	xorl	%r13d, %r13d
	call	rtx_equal_p
	testl	%eax, %eax
	movq	40(%rsp), %r8
	jne	.L3573
	cmpw	$55, (%r14)
	je	.L16525
.L3623:
	movl	$1, %r13d
.L3573:
	testl	%r13d, %r13d
	je	.L3571
	cmpw	$51, (%rbp)
	je	.L16526
.L3570:
	movq	40(%r15), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	32(%r15), %rdi
	movq	56(%rsp), %rsi
	movq	%rax, %rbp
	xorl	%eax, %eax
	call	expand_expr
	movq	5424(%rsp), %r14
	movq	%rax, %rbx
	testb	$64, 17(%r14)
	je	.L3624
	cmpl	$73, %r12d
	je	.L16527
	movq	umax_optab(%rip), %rsi
.L3625:
	movl	5412(%rsp), %edi
	movq	56(%rsp), %r8
	xorl	%eax, %eax
	movl	5416(%rsp), %r9d
	movq	%rbx, %rdx
	movq	%rbp, %rcx
	movl	$2, (%rsp)
	call	expand_binop
	testq	%rax, %rax
	jne	.L13703
	cmpq	%rbx, 56(%rsp)
	je	.L3631
	movq	56(%rsp), %rdi
	movq	%rbx, %rsi
	call	emit_move_insn
.L3631:
	call	gen_label_rtx
	cmpl	$74, %r12d
	movq	%rax, %rbx
	je	.L16528
	movq	40(%r15), %rcx
	movq	8(%rcx), %r15
	testb	$64, 17(%r15)
	je	.L3636
	movl	$0, (%rsp)
	movq	56(%rsp), %rdi
	movq	%rbp, %rsi
	movl	$97, %edx
.L15054:
	movl	$1, %ecx
.L15053:
	movl	5412(%rsp), %r8d
	xorl	%r9d, %r9d
	xorl	%eax, %eax
	call	compare_from_rtx
	cmpq	const0_rtx(%rip), %rax
	je	.L15056
	cmpq	const_true_rtx(%rip), %rax
	je	.L15249
	movzwq	(%rax), %r13
	movq	bcc_gen_fctn(,%r13,8), %rdx
	testq	%rdx, %rdx
	je	.L15283
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	*%rdx
	movq	%rax, %rdi
	call	emit_jump_insn
.L15056:
	movq	56(%rsp), %rdi
	movq	%rbp, %rsi
.L15322:
	call	emit_move_insn
.L15249:
	movq	%rbx, %rdi
.L15251:
	call	emit_label
	jmp	.L581
.L3636:
	movl	$0, (%rsp)
	movq	56(%rsp), %rdi
	movq	%rbp, %rsi
	movl	$93, %edx
.L15055:
	xorl	%ecx, %ecx
	jmp	.L15053
.L16528:
	movq	40(%r15), %r8
	movq	8(%r8), %r12
	testb	$64, 17(%r12)
	je	.L3633
	movq	56(%rsp), %rdi
	movq	%rbp, %rsi
	movl	$95, %edx
	movl	$0, (%rsp)
	jmp	.L15054
.L3633:
	movq	56(%rsp), %rdi
	movq	%rbp, %rsi
	movl	$91, %edx
	movl	$0, (%rsp)
	jmp	.L15055
.L16527:
	movq	umin_optab(%rip), %rsi
	jmp	.L3625
.L3624:
	cmpl	$73, %r12d
	je	.L16529
	movq	smax_optab(%rip), %rsi
	jmp	.L3625
.L16529:
	movq	smin_optab(%rip), %rsi
	jmp	.L3625
.L16526:
	cmpl	$63, 8(%rbp)
	jg	.L3570
.L3571:
	movl	5412(%rsp), %edi
	call	gen_reg_rtx
	movq	%rax, 56(%rsp)
	jmp	.L3570
.L16525:
	cmpw	$55, (%r8)
	jne	.L3623
	testb	$32, 17(%rbx)
.L15314:
	je	.L3573
	jmp	.L3623
	.p2align 6,,7
.L16524:
	movq	8(%r8), %r8
	cmpw	$51, (%r8)
	jne	.L3620
	cmpl	$63, 8(%r8)
	jg	.L3620
.L14926:
	xorl	%r13d, %r13d
	jmp	.L3573
.L3587:
	movq	32(%rbx), %rsi
	movq	%r14, %rdi
.L15313:
	xorl	%eax, %eax
	call	safe_from_p
.L15052:
	movl	%eax, %r13d
	jmp	.L3573
.L3589:
	movq	32(%rbx), %rsi
	xorl	%eax, %eax
	movq	%r14, %rdi
	xorl	%r13d, %r13d
	call	safe_from_p
	testl	%eax, %eax
	je	.L3573
	movq	%r14, %rdi
	movq	40(%rbx), %rsi
.L15315:
	xorl	%eax, %eax
	call	safe_from_p
	testl	%eax, %eax
	jmp	.L15314
.L3592:
	movzbl	%cl, %eax
	subl	$39, %eax
	cmpl	$67, %eax
	ja	.L3593
	mov	%eax, %edi
	jmp	*.L3608(,%rdi,8)
	.section	.rodata
	.align 8
	.align 4
.L3608:
	.quad	.L3595
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3606
	.quad	.L3597
	.quad	.L15283
	.quad	.L3604
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3593
	.quad	.L3605
	.quad	.L3602
	.quad	.L3594
	.text
.L3594:
	movq	32(%rbx), %rdi
	call	staticp
	jmp	.L15052
.L3595:
	xorl	%r13d, %r13d
	cmpw	$55, %dx
	je	.L3573
.L3593:
	testq	%r8, %r8
	jne	.L14858
	movzbl	%cl, %esi 
	xorl	%r13d, %r13d
	salq	$2, %rsi
	addq	tree_code_length(%rip), %rsi
	movl	(%rsi), %eax
	cmpl	%eax, %r13d
	movl	%eax, 4728(%rsp)
	jge	.L3578
.L3616:
	movslq	%r13d,%r9
	movq	32(%rbx,%r9,8), %rsi
	testq	%rsi, %rsi
	jne	.L16530
.L3613:
	incl	%r13d
	cmpl	4728(%rsp), %r13d
	jl	.L3616
	jmp	.L3578
.L16530:
	xorl	%eax, %eax
	movq	%r14, %rdi
	movq	%r8, 40(%rsp)
	call	safe_from_p
	movq	40(%rsp), %r8
	testl	%eax, %eax
	jne	.L3613
	jmp	.L14926
.L3606:
	movq	%r14, %rdi
	movq	40(%rbx), %rsi
	jmp	.L15313
.L3597:
	movq	48(%rbx), %r8
	testq	%r8, %r8
	jne	.L14858
	cmpw	$51, %dx
	je	.L16531
.L3601:
	cmpw	$55, %dx
	jne	.L3593
	jmp	.L14926
.L16531:
	cmpl	$63, 8(%r14)
	jle	.L14926
	jmp	.L3601
.L3604:
	movq	40(%rbx), %r8
	jmp	.L3593
.L3605:
	movq	48(%rbx), %r8
	jmp	.L3593
.L3602:
	movq	40(%rbx), %r8
	xorl	%r13d, %r13d
	jmp	.L15051
	.p2align 6,,7
.L3581:
	cmpb	$3, %cl
	jne	.L14926
	movq	32(%rbx), %rsi
	xorl	%r13d, %r13d
	testq	%rsi, %rsi
	jne	.L16532
.L3584:
	movq	(%rbx), %rsi
	movq	%r14, %rdi
	testq	%rsi, %rsi
	jne	.L15315
	jmp	.L3623
.L16532:
	xorl	%eax, %eax
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L3573
	jmp	.L3584
	.p2align 6,,7
.L16523:
	movq	8(%r14), %rax
	movq	virtual_outgoing_args_rtx(%rip), %rcx
	cmpq	%rcx, %rax
	je	.L3623
	cmpw	$63, (%rax)
	jne	.L3576
	cmpq	%rcx, 8(%rax)
	jne	.L3576
	jmp	.L3623
	.p2align 6,,7
.L16522:
	movq	8(%rbp), %r14
	movzwl	(%r14), %edx
	cmpw	$51, %dx
	jne	.L3574
	cmpl	$63, 8(%r14)
	jg	.L3574
	jmp	.L14926
	.p2align 6,,7
.L3506:
	movq	32(%r15), %rdi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	%rax, 1960(%rsp)
	movq	32(%r15), %r11
	movq	8(%r11), %r13
	movzbl	44(%r13), %edi
	movslq	%edi,%rbx
	movl	mode_class(,%rbx,4), %eax
	subl	$5, %eax
	cmpl	$1, %eax
	jbe	.L16533
	movq	5424(%rsp), %r10
	testb	$64, 17(%r10)
	je	.L3508
	movq	1960(%rsp), %rdx
.L15256:
	movq	%rdx, 56(%rsp)
	jmp	.L581
.L3508:
	movl	5412(%rsp), %edi
	movq	abs_optab(%rip), %rsi
	xorl	%r8d, %r8d
	movq	1960(%rsp), %rdx
	movq	56(%rsp), %rcx
	xorl	%eax, %eax
	call	expand_unop
	testq	%rax, %rax
	movq	%rax, 56(%rsp)
	jne	.L581
	movq	%rbp, 56(%rsp)
	call	gen_label_rtx
	cmpq	$0, 56(%rsp)
	movq	%rax, 1952(%rsp)
	je	.L3514
	movq	56(%rsp), %r13
	xorl	%r14d, %r14d
	movq	32(%r15), %rbx
	movzwl	(%r13), %eax
	cmpw	$53, %ax
	je	.L16534
	movl	%eax, %ecx
.L3517:
	cmpw	$55, %cx
	je	.L16535
.L3519:
	movzbl	16(%rbx), %edx
	movzbl	%dl, %edi 
	salq	$3, %rdi
	addq	tree_code_type(%rip), %rdi
	movq	(%rdi), %r15
	movsbl	(%r15),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L3521
	mov	%eax, %esi
	jmp	*.L3560(,%rsi,8)
	.section	.rodata
	.align 8
	.align 4
.L3560:
	.quad	.L3530
	.quad	.L3532
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3532
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3566
	.quad	.L3522
	.quad	.L3535
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3535
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3521
	.quad	.L3524
	.text
.L3522:
	movq	120(%rbx), %r14
.L3521:
	movl	$1, %r12d
.L15049:
	testq	%r14, %r14
	je	.L3516
.L14857:
	cmpw	$53, (%r14)
	je	.L16536
.L3563:
	xorl	%eax, %eax
	movq	%r13, %rdi
	movq	%r14, %rsi
	call	rtx_equal_p
	xorl	%r12d, %r12d
	testl	%eax, %eax
	jne	.L3516
	cmpw	$55, (%r13)
	je	.L16537
.L3566:
	movl	$1, %r12d
.L3516:
	testl	%r12d, %r12d
	je	.L3514
	cmpw	$51, (%rbp)
	je	.L16538
.L3513:
	movq	56(%rsp), %rdi
	movq	1960(%rsp), %rsi
	call	emit_move_insn
	movq	integer_zero_node(%rip), %rsi
	movq	5424(%rsp), %rdi
	call	convert
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	xorl	%r9d, %r9d
	movl	5412(%rsp), %r8d
	movq	56(%rsp), %rdi
	movq	%rax, %rsi
	xorl	%ecx, %ecx
	movl	$91, %edx
	xorl	%eax, %eax
	movl	$0, (%rsp)
	call	emit_cmp_insn
	movq	1952(%rsp), %rdi
	incl	inhibit_defer_pop(%rip)
	call	gen_bge
	movq	%rax, %rdi
	call	emit_jump_insn
	xorl	%eax, %eax
	xorl	%r8d, %r8d
	movq	56(%rsp), %rdx
	movq	neg_optab(%rip), %rsi
	movl	5412(%rsp), %edi
	movq	%rdx, %rcx
	call	expand_unop
	cmpq	56(%rsp), %rax
	movq	%rax, %rsi
	je	.L3567
	movq	56(%rsp), %rdi
	call	emit_move_insn
.L3567:
	movq	1952(%rsp), %rdi
.L15254:
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L581
.L16538:
	cmpl	$63, 8(%rbp)
	jg	.L3513
.L3514:
	movl	5412(%rsp), %edi
	call	gen_reg_rtx
	movq	%rax, 56(%rsp)
	jmp	.L3513
.L16537:
	cmpw	$55, (%r14)
	jne	.L3566
	testb	$32, 17(%rbx)
.L15311:
	je	.L3516
	jmp	.L3566
	.p2align 6,,7
.L16536:
	movq	8(%r14), %r14
	cmpw	$51, (%r14)
	jne	.L3563
	cmpl	$63, 8(%r14)
	jg	.L3563
.L14925:
	xorl	%r12d, %r12d
	jmp	.L3516
.L3530:
	movq	32(%rbx), %rsi
	movq	%r13, %rdi
.L15310:
	xorl	%eax, %eax
	call	safe_from_p
.L15050:
	movl	%eax, %r12d
	jmp	.L3516
.L3532:
	movq	32(%rbx), %rsi
	xorl	%eax, %eax
	movq	%r13, %rdi
	xorl	%r12d, %r12d
	call	safe_from_p
	testl	%eax, %eax
	je	.L3516
	movq	%r13, %rdi
	movq	40(%rbx), %rsi
.L15312:
	xorl	%eax, %eax
	call	safe_from_p
	testl	%eax, %eax
	jmp	.L15311
.L3535:
	movzbl	%dl, %eax
	subl	$39, %eax
	cmpl	$67, %eax
	ja	.L3536
	mov	%eax, %r9d
	jmp	*.L3551(,%r9,8)
	.section	.rodata
	.align 8
	.align 4
.L3551:
	.quad	.L3538
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3549
	.quad	.L3540
	.quad	.L15283
	.quad	.L3547
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3536
	.quad	.L3548
	.quad	.L3545
	.quad	.L3537
	.text
.L3537:
	movq	32(%rbx), %rdi
	call	staticp
	jmp	.L15050
.L3538:
	xorl	%r12d, %r12d
	cmpw	$55, %cx
	je	.L3516
.L3536:
	testq	%r14, %r14
	jne	.L14857
	movzbl	%dl, %r8d 
	xorl	%r12d, %r12d
	salq	$2, %r8
	addq	tree_code_length(%rip), %r8
	movl	(%r8), %r15d
	cmpl	%r15d, %r12d
	jge	.L3521
.L3559:
	movslq	%r12d,%rcx
	movq	32(%rbx,%rcx,8), %rsi
	testq	%rsi, %rsi
	jne	.L16539
.L3556:
	incl	%r12d
	cmpl	%r15d, %r12d
	jl	.L3559
	jmp	.L3521
.L16539:
	xorl	%eax, %eax
	movq	%r13, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L3556
	jmp	.L14925
.L3549:
	movq	%r13, %rdi
	movq	40(%rbx), %rsi
	jmp	.L15310
.L3540:
	movq	48(%rbx), %r14
	testq	%r14, %r14
	jne	.L14857
	cmpw	$51, %cx
	je	.L16540
.L3544:
	cmpw	$55, %cx
	jne	.L3536
	jmp	.L14925
.L16540:
	cmpl	$63, 8(%r13)
	jle	.L14925
	jmp	.L3544
.L3547:
	movq	40(%rbx), %r14
	jmp	.L3536
.L3548:
	movq	48(%rbx), %r14
	jmp	.L3536
.L3545:
	movq	40(%rbx), %r14
	xorl	%r12d, %r12d
	jmp	.L15049
.L3524:
	cmpb	$3, %dl
	jne	.L14925
	movq	32(%rbx), %rsi
	xorl	%r12d, %r12d
	testq	%rsi, %rsi
	jne	.L16541
.L3527:
	movq	(%rbx), %rsi
	movq	%r13, %rdi
	testq	%rsi, %rsi
	jne	.L15312
	jmp	.L3566
.L16541:
	xorl	%eax, %eax
	movq	%r13, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L3516
	jmp	.L3527
	.p2align 6,,7
.L16535:
	movq	8(%r13), %rax
	movq	virtual_outgoing_args_rtx(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L3566
	cmpw	$63, (%rax)
	jne	.L3519
	cmpq	%rdx, 8(%rax)
	jne	.L3519
	jmp	.L3566
	.p2align 6,,7
.L16534:
	movq	8(%r13), %r13
	movzwl	(%r13), %ecx
	cmpw	$51, %cx
	jne	.L3517
	cmpl	$63, 8(%r13)
	jg	.L3517
	jmp	.L14925
	.p2align 6,,7
.L16533:
	movq	1960(%rsp), %rsi
	movq	56(%rsp), %rdx
	movl	5416(%rsp), %ecx
	call	expand_complex_abs
	jmp	.L13703
.L3645:
	movq	32(%r15), %rdi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	ffs_optab(%rip), %rsi
	movl	5412(%rsp), %edi
.L15413:
	movq	%rax, %rdx
	movq	56(%rsp), %rcx
	movl	$1, %r8d
	jmp	.L15378
.L3655:
	xorl	%eax, %eax
	movq	%r15, %rdi
	movq	%rbx, %r14
	call	preexpand_calls
	xorl	%r8d, %r8d
	movl	$1, %ebp
	movq	40(%r15), %r13
	testq	%rbx, %rbx
	je	.L3658
	movzwl	(%rbx), %eax
	cmpw	$53, %ax
	je	.L16542
	movl	%eax, %edx
.L3659:
	cmpw	$55, %dx
	je	.L16543
.L3661:
	movzbl	16(%r13), %ecx
	movzbl	%cl, %r10d 
	salq	$3, %r10
	addq	tree_code_type(%rip), %r10
	movq	(%r10), %r11
	movsbl	(%r11),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L3663
	mov	%eax, %edi
	jmp	*.L3702(,%rdi,8)
	.section	.rodata
	.align 8
	.align 4
.L3702:
	.quad	.L3672
	.quad	.L3674
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3674
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3708
	.quad	.L3664
	.quad	.L3677
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3677
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3663
	.quad	.L3666
	.text
.L3664:
	movq	120(%r13), %r8
.L3663:
	movl	$1, %ebp
.L15057:
	testq	%r8, %r8
	je	.L3658
.L14859:
	cmpw	$53, (%r8)
	je	.L16544
.L3705:
	movq	%r8, %rsi
	xorl	%eax, %eax
	movq	%r14, %rdi
	movq	%r8, 40(%rsp)
	xorl	%ebp, %ebp
	call	rtx_equal_p
	testl	%eax, %eax
	movq	40(%rsp), %r8
	jne	.L3658
	cmpw	$55, (%r14)
	je	.L16545
.L3708:
	movl	$1, %ebp
.L3658:
	testl	%ebp, %ebp
	movq	32(%r15), %rdi
	movl	$0, %eax
	cmove	%rax, %rbx
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rbx, %rsi
	call	expand_expr
	movl	5416(%rsp), %r9d
	movq	56(%rsp), %r8
	movl	5412(%rsp), %esi
	movq	40(%r15), %rcx
	movq	%rax, %rdx
	movl	%r12d, %edi
	xorl	%eax, %eax
	call	expand_shift
	jmp	.L13703
.L16545:
	cmpw	$55, (%r8)
	jne	.L3708
	testb	$32, 17(%r13)
.L15317:
	je	.L3658
	jmp	.L3708
.L16544:
	movq	8(%r8), %r8
	cmpw	$51, (%r8)
	jne	.L3705
	cmpl	$63, 8(%r8)
	jg	.L3705
.L14927:
	xorl	%ebp, %ebp
	jmp	.L3658
.L3672:
	movq	32(%r13), %rsi
	movq	%r14, %rdi
.L15316:
	xorl	%eax, %eax
	call	safe_from_p
.L15058:
	movl	%eax, %ebp
	jmp	.L3658
.L3674:
	movq	32(%r13), %rsi
	xorl	%eax, %eax
	movq	%r14, %rdi
	xorl	%ebp, %ebp
	call	safe_from_p
	testl	%eax, %eax
	je	.L3658
	movq	%r14, %rdi
	movq	40(%r13), %rsi
.L15318:
	xorl	%eax, %eax
	call	safe_from_p
	testl	%eax, %eax
	jmp	.L15317
.L3677:
	movzbl	%cl, %eax
	subl	$39, %eax
	cmpl	$67, %eax
	ja	.L3678
	mov	%eax, %esi
	jmp	*.L3693(,%rsi,8)
	.section	.rodata
	.align 8
	.align 4
.L3693:
	.quad	.L3680
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3691
	.quad	.L3682
	.quad	.L15283
	.quad	.L3689
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3678
	.quad	.L3690
	.quad	.L3687
	.quad	.L3679
	.text
.L3679:
	movq	32(%r13), %rdi
	call	staticp
	jmp	.L15058
.L3680:
	xorl	%ebp, %ebp
	cmpw	$55, %dx
	je	.L3658
.L3678:
	testq	%r8, %r8
	jne	.L14859
	movzbl	%cl, %r9d 
	xorl	%ebp, %ebp
	salq	$2, %r9
	addq	tree_code_length(%rip), %r9
	movl	(%r9), %eax
	cmpl	%eax, %ebp
	movl	%eax, 4724(%rsp)
	jge	.L3663
.L3701:
	movslq	%ebp,%rcx
	movq	32(%r13,%rcx,8), %rsi
	testq	%rsi, %rsi
	jne	.L16546
.L3698:
	incl	%ebp
	cmpl	4724(%rsp), %ebp
	jl	.L3701
	jmp	.L3663
.L16546:
	xorl	%eax, %eax
	movq	%r14, %rdi
	movq	%r8, 40(%rsp)
	call	safe_from_p
	movq	40(%rsp), %r8
	testl	%eax, %eax
	jne	.L3698
	jmp	.L14927
.L3691:
	movq	%r14, %rdi
	movq	40(%r13), %rsi
	jmp	.L15316
.L3682:
	movq	48(%r13), %r8
	testq	%r8, %r8
	jne	.L14859
	cmpw	$51, %dx
	je	.L16547
.L3686:
	cmpw	$55, %dx
	jne	.L3678
	jmp	.L14927
.L16547:
	cmpl	$63, 8(%r14)
	jle	.L14927
	jmp	.L3686
.L3689:
	movq	40(%r13), %r8
	jmp	.L3678
.L3690:
	movq	48(%r13), %r8
	jmp	.L3678
.L3687:
	movq	40(%r13), %r8
	xorl	%ebp, %ebp
	jmp	.L15057
	.p2align 6,,7
.L3666:
	cmpb	$3, %cl
	jne	.L14927
	movq	32(%r13), %rsi
	xorl	%ebp, %ebp
	testq	%rsi, %rsi
	jne	.L16548
.L3669:
	movq	(%r13), %rsi
	movq	%r14, %rdi
	testq	%rsi, %rsi
	jne	.L15318
	jmp	.L3708
.L16548:
	xorl	%eax, %eax
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L3658
	jmp	.L3669
	.p2align 6,,7
.L16543:
	movq	8(%r14), %rax
	movq	virtual_outgoing_args_rtx(%rip), %rcx
	cmpq	%rcx, %rax
	je	.L3708
	cmpw	$63, (%rax)
	jne	.L3661
	cmpq	%rcx, 8(%rax)
	jne	.L3661
	jmp	.L3708
	.p2align 6,,7
.L16542:
	movq	8(%rbx), %r14
	movzwl	(%r14), %edx
	cmpw	$51, %dx
	jne	.L3659
	cmpl	$63, 8(%r14)
	jg	.L3659
	jmp	.L14927
	.p2align 6,,7
.L3651:
	movq	xor_optab(%rip), %rax
	movq	%rax, 64(%rsp)
	jmp	.L3241
.L3643:
	movq	32(%r15), %rdi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	one_cmpl_optab(%rip), %rsi
	movl	5412(%rsp), %edi
	jmp	.L15413
.L3721:
	cmpq	$0, 56(%rsp)
	je	.L3723
	movq	56(%rsp), %rbp
	xorl	%r12d, %r12d
	movl	(%rbp), %eax
	cmpw	$53, %ax
	je	.L16549
	movl	%eax, %edx
.L3726:
	cmpw	$55, %dx
	je	.L16550
.L3728:
	movzbl	16(%r15), %ecx
	movzbl	%cl, %r11d 
	salq	$3, %r11
	addq	tree_code_type(%rip), %r11
	movq	(%r11), %r13
	movsbl	(%r13),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L3730
	mov	%eax, %r10d
	jmp	*.L3769(,%r10,8)
	.section	.rodata
	.align 8
	.align 4
.L3769:
	.quad	.L3739
	.quad	.L3741
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3741
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3775
	.quad	.L3731
	.quad	.L3744
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3744
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3730
	.quad	.L3733
	.text
.L3731:
	movq	120(%r15), %r12
.L3730:
	movl	$1, %ebx
.L15059:
	testq	%r12, %r12
	je	.L3725
.L14860:
	cmpw	$53, (%r12)
	je	.L16551
.L3772:
	xorl	%eax, %eax
	movq	%rbp, %rdi
	movq	%r12, %rsi
	call	rtx_equal_p
	xorl	%ebx, %ebx
	testl	%eax, %eax
	jne	.L3725
	cmpw	$55, (%rbp)
	je	.L16552
.L3775:
	movl	$1, %ebx
.L3725:
	testl	%ebx, %ebx
	je	.L3723
	movl	optimize(%rip), %ebp
	testl	%ebp, %ebp
	jne	.L3722
	movq	56(%rsp), %rsi
	cmpw	$51, (%rsi)
	je	.L16553
.L3722:
	movq	56(%rsp), %rdi
	xorl	%eax, %eax
	call	emit_clr_insn
	call	gen_label_rtx
	movq	%r15, %rdi
	movq	%rax, %rsi
	movq	%rax, %rbx
	xorl	%eax, %eax
	call	jumpifnot
	movq	56(%rsp), %rdi
	xorl	%eax, %eax
	call	emit_0_to_1_insn
	jmp	.L15249
.L16553:
	cmpl	$63, 8(%rsi)
	jg	.L3722
.L3723:
	testl	%r14d, %r14d
	cmove	5412(%rsp), %r14d
	movl	%r14d, %edi
	movl	%r14d, 5412(%rsp)
	call	gen_reg_rtx
	movq	%rax, 56(%rsp)
	jmp	.L3722
.L16552:
	cmpw	$55, (%r12)
	jne	.L3775
	testb	$32, 17(%r15)
.L15320:
	je	.L3725
	jmp	.L3775
.L16551:
	movq	8(%r12), %r12
	cmpw	$51, (%r12)
	jne	.L3772
	cmpl	$63, 8(%r12)
	jg	.L3772
.L14928:
	xorl	%ebx, %ebx
	jmp	.L3725
.L3739:
	movq	32(%r15), %rsi
	movq	%rbp, %rdi
.L15319:
	xorl	%eax, %eax
	call	safe_from_p
.L15060:
	movl	%eax, %ebx
	jmp	.L3725
.L3741:
	movq	32(%r15), %rsi
	xorl	%eax, %eax
	movq	%rbp, %rdi
	xorl	%ebx, %ebx
	call	safe_from_p
	testl	%eax, %eax
	je	.L3725
	movq	%rbp, %rdi
	movq	40(%r15), %rsi
.L15321:
	xorl	%eax, %eax
	call	safe_from_p
	testl	%eax, %eax
	jmp	.L15320
.L3744:
	movzbl	%cl, %eax
	subl	$39, %eax
	cmpl	$67, %eax
	ja	.L3745
	mov	%eax, %edi
	jmp	*.L3760(,%rdi,8)
	.section	.rodata
	.align 8
	.align 4
.L3760:
	.quad	.L3747
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3758
	.quad	.L3749
	.quad	.L15283
	.quad	.L3756
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3745
	.quad	.L3757
	.quad	.L3754
	.quad	.L3746
	.text
.L3746:
	movq	32(%r15), %rdi
	call	staticp
	jmp	.L15060
.L3747:
	xorl	%ebx, %ebx
	cmpw	$55, %dx
	je	.L3725
.L3745:
	testq	%r12, %r12
	jne	.L14860
	movzbl	%cl, %edx 
	xorl	%ebx, %ebx
	salq	$2, %rdx
	addq	tree_code_length(%rip), %rdx
	movl	(%rdx), %r13d
	cmpl	%r13d, %ebx
	jge	.L3730
.L3768:
	movslq	%ebx,%r9
	movq	32(%r15,%r9,8), %rsi
	testq	%rsi, %rsi
	jne	.L16554
.L3765:
	incl	%ebx
	cmpl	%r13d, %ebx
	jl	.L3768
	jmp	.L3730
.L16554:
	xorl	%eax, %eax
	movq	%rbp, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L3765
	jmp	.L14928
.L3758:
	movq	%rbp, %rdi
	movq	40(%r15), %rsi
	jmp	.L15319
.L3749:
	movq	48(%r15), %r12
	testq	%r12, %r12
	jne	.L14860
	cmpw	$51, %dx
	je	.L16555
.L3753:
	cmpw	$55, %dx
	jne	.L3745
	jmp	.L14928
.L16555:
	cmpl	$63, 8(%rbp)
	jle	.L14928
	jmp	.L3753
.L3756:
	movq	40(%r15), %r12
	jmp	.L3745
.L3757:
	movq	48(%r15), %r12
	jmp	.L3745
.L3754:
	movq	40(%r15), %r12
	xorl	%ebx, %ebx
	jmp	.L15059
	.p2align 6,,7
.L3733:
	cmpb	$3, %cl
	jne	.L14928
	movq	32(%r15), %rsi
	xorl	%ebx, %ebx
	testq	%rsi, %rsi
	jne	.L16556
.L3736:
	movq	(%r15), %rsi
	movq	%rbp, %rdi
	testq	%rsi, %rsi
	jne	.L15321
	jmp	.L3775
.L16556:
	xorl	%eax, %eax
	movq	%rbp, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L3725
	jmp	.L3736
	.p2align 6,,7
.L16550:
	movq	8(%rbp), %rax
	movq	virtual_outgoing_args_rtx(%rip), %rcx
	cmpq	%rcx, %rax
	je	.L3775
	cmpw	$63, (%rax)
	jne	.L3728
	cmpq	%rcx, 8(%rax)
	jne	.L3728
	jmp	.L3775
	.p2align 6,,7
.L16549:
	movq	8(%rbp), %rbp
	movl	(%rbp), %edx
	cmpw	$51, %dx
	jne	.L3726
	cmpl	$63, 8(%rbp)
	jg	.L3726
	jmp	.L14928
	.p2align 6,,7
.L3648:
	movq	and_optab(%rip), %rbp
	movq	%rbp, 64(%rsp)
	jmp	.L3241
.L3650:
	movq	ior_optab(%rip), %rdx
	movq	%rdx, 64(%rsp)
	jmp	.L3241
.L3778:
	movq	32(%r15), %rdi
	movq	56(%rsp), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movl	$1, %r9d
	movq	56(%rsp), %r8
	movl	5412(%rsp), %edi
	movq	xor_optab(%rip), %rsi
	movq	%rax, %rdx
	movq	const1_rtx(%rip), %rcx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	jmp	.L15379
.L3714:
	xorl	%eax, %eax
	movq	%r15, %rdi
	call	preexpand_calls
	movl	5412(%rsp), %edx
	movq	56(%rsp), %rsi
	testl	%r14d, %r14d
	movq	%r15, %rdi
	cmovne	%r14d, %edx
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	call	do_store_flag
	testq	%rax, %rax
	jne	.L13703
	cmpl	$96, %r12d
	jne	.L3721
	movq	40(%r15), %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L3721
	testq	%rbp, %rbp
	je	.L3721
	cmpw	$51, (%rbp)
	jne	.L3721
	movq	32(%r15), %rdi
	movq	8(%rdi), %r12
	movzbl	44(%r12), %ebx
	cmpb	%bl, 2(%rbp)
	jne	.L3721
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	%rbp, %rsi
	call	expand_expr
	cmpq	%rbp, %rax
	movq	%rax, 56(%rsp)
	je	.L3719
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	movq	%rax, 56(%rsp)
.L3719:
	call	gen_label_rtx
	movl	5416(%rsp), %r9d
	xorl	%ecx, %ecx
	movq	56(%rsp), %r14
	movq	const0_rtx(%rip), %rsi
	movl	$90, %edx
	movq	%rax, %rbx
	xorl	%eax, %eax
	movzbl	2(%r14), %r8d
	movq	%r14, %rdi
	movl	$0, (%rsp)
	call	emit_cmp_insn
	movq	%rbx, %rdi
	call	gen_beq
	movq	%rax, %rdi
	call	emit_jump_insn
	movq	const1_rtx(%rip), %rsi
	movq	56(%rsp), %rdi
	jmp	.L15322
	.p2align 6,,7
.L2255:
	xorl	%eax, %eax
	movq	%r15, %rdi
	call	preexpand_calls
	movq	40(%r15), %rbx
	movq	32(%r15), %r13
	cmpq	$0, 56(%rsp)
	movq	8(%rbx), %rdx
	movq	8(%r13), %r12
	movzbl	44(%rdx), %r14d
	movq	24(%r12), %r11
	movq	88(%r11), %rbp
	movq	96(%r11), %r12
	movl	%r14d, 4988(%rsp)
	je	.L16557
.L2256:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movq	%rbp, %rsi
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L15257
	movq	%rbx, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rbp, %rdi
	xorl	%esi, %esi
	movq	%rax, %r14
	xorl	%eax, %eax
	call	expand_expr
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%r12, %rdi
	movq	%rax, %rbx
	xorl	%eax, %eax
	call	expand_expr
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%r13, %rdi
	xorl	%esi, %esi
	movq	%rax, %rbp
	xorl	%eax, %eax
	call	expand_expr
	movq	8(%rax), %r13
	movzwl	(%r14), %eax
	movq	%r13, 4992(%rsp)
	cmpw	$46, %ax
	movl	%eax, %edx
	je	.L16558
.L2260:
	call	gen_label_rtx
	movq	%rax, %r15
	call	gen_label_rtx
	movq	%rax, %r13
	movzwl	(%r14), %eax
	cmpw	$46, %ax
	je	.L16559
.L2263:
	movzbl	2(%r14), %r8d
	movq	%rbx, %rsi
	movl	$94, %edx
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	movq	%r14, %rdi
	xorl	%eax, %eax
	movl	$0, (%rsp)
	call	emit_cmp_insn
	movq	%r13, %rdi
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
	movzwl	(%r14), %eax
.L2262:
	cmpw	$46, %ax
	je	.L16560
.L2265:
	movzbl	2(%r14), %r8d
	movq	%r14, %rdi
	movq	%rbp, %rsi
	movl	$92, %edx
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	xorl	%eax, %eax
	movl	$0, (%rsp)
	call	emit_cmp_insn
	movq	%r13, %rdi
	call	gen_bgt
	movq	%rax, %rdi
	call	emit_jump_insn
.L2264:
	cmpw	$46, (%rbx)
	je	.L16561
	movl	$46, %edi
	xorl	%esi, %esi
	movl	$-257, %edx
	xorl	%eax, %eax
	call	gen_rtx
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movl	4988(%rsp), %edi
	movq	and_optab(%rip), %rsi
	movq	%rax, %rcx
	movq	%rbx, %rdx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
.L15028:
	movl	4988(%rsp), %edi
	movq	sub_optab(%rip), %rsi
	movq	%rax, %rcx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%r14, %rdx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	movl	$8, %edx
	xorl	%esi, %esi
	movq	%rax, %r12
	movl	$46, %edi
	xorl	%eax, %eax
	call	gen_rtx
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movl	4988(%rsp), %edx
	movq	%rax, %r8
	xorl	%edi, %edi
	movl	$56, %esi
	xorl	%eax, %eax
	movl	$0, (%rsp)
	call	expand_divmod
	xorl	%eax, %eax
	movl	$8, %edx
	movl	$46, %edi
	xorl	%esi, %esi
	call	gen_rtx
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	4988(%rsp), %edx
	movq	%rax, %r8
	movl	$1, %edi
	movl	$60, %esi
	xorl	%eax, %eax
	movl	$0, (%rsp)
	call	expand_divmod
	movq	4992(%rsp), %rcx
	movq	%r12, %rdx
	movl	4988(%rsp), %edi
	movq	add_optab(%rip), %rsi
	movq	%rax, %rbp
	xorl	%eax, %eax
	call	expand_binop
	movl	byte_mode(%rip), %edi
	movq	%rax, %rsi
	call	memory_address
	movl	byte_mode(%rip), %esi
	movl	$55, %edi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	gen_rtx
	movl	$1, %r9d
	xorl	%r8d, %r8d
	movl	byte_mode(%rip), %esi
	movq	%rax, %rdx
	movl	$78, %edi
	movq	%rbp, %rcx
	xorl	%eax, %eax
	call	expand_shift
	movl	$1, %r9d
	movq	56(%rsp), %r8
	movq	const1_rtx(%rip), %rcx
	movq	and_optab(%rip), %rsi
	movq	%rax, %rdx
	movl	$4, %edi
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	movq	56(%rsp), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	xorl	%eax, %eax
	movq	%r15, %rdi
	call	emit_jump
	movq	%r13, %rdi
	call	emit_label
	movq	const0_rtx(%rip), %rsi
	movq	56(%rsp), %rdi
	call	emit_move_insn
	movq	%r15, %rdi
	jmp	.L15251
.L16561:
	movl	8(%rbx), %edx
	movl	$46, %edi
	xorl	%esi, %esi
	xorl	%eax, %eax
	andl	$-257, %edx
	call	gen_rtx
	jmp	.L15028
.L16560:
	cmpw	$46, (%rbp)
	jne	.L2265
	jmp	.L2264
.L16559:
	cmpw	$46, (%rbx)
	jne	.L2263
	jmp	.L2262
.L16558:
	cmpw	$46, (%rbx)
	je	.L16562
.L2258:
	cmpw	$46, %dx
	jne	.L2260
	cmpw	$46, (%rbp)
	jne	.L2260
	movl	8(%r14), %eax
	cmpl	%eax, 8(%rbp)
	jl	.L13647
	jmp	.L2260
.L16562:
	movl	8(%rbx), %eax
	cmpl	%eax, 8(%r14)
	jge	.L2258
	movq	const0_rtx(%rip), %rax
	movq	%rax, 56(%rsp)
	jmp	.L581
	.p2align 6,,7
.L16557:
	movq	8(%r15), %r8
	movzbl	44(%r8), %edi
	call	gen_reg_rtx
	movq	%rax, 56(%rsp)
	jmp	.L2256
.L621:
	movq	%r15, %rdi
	call	decl_function_context
	cmpq	current_function_decl(%rip), %rax
	je	.L623
	cmpq	inline_function_decl(%rip), %rax
	je	.L623
.L622:
	testq	%rax, %rax
	je	.L624
	movq	48(%r15), %rbx
	testq	%rbx, %rbx
	je	.L15283
	cmpw	$51, (%rbx)
	je	.L16563
.L625:
	testq	%rbx, %rbx
	je	.L15283
	cmpw	$55, (%rbx)
	jne	.L15283
	movq	8(%rbx), %rdi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	fix_lexical_addr
	movq	%rbx, %rdi
	jmp	.L15408
.L16563:
	movq	%r15, %rdi
	xorl	%eax, %eax
	call	put_var_into_stack
	movq	48(%r15), %rbx
	jmp	.L625
.L624:
	movq	48(%r15), %rdx
	testq	%rdx, %rdx
	jne	.L628
	cmpl	$16, 5412(%rsp)
	je	.L16564
	movl	5412(%rsp), %edi
	call	gen_reg_rtx
.L14995:
	movq	%rax, 2320(%rsp)
	xorl	%ebp, %ebp
	movq	32(%r15), %rdx
	movq	2320(%rsp), %r11
	movq	%rdx, 5400(%rsp)
	movq	%r11, 48(%r15)
	movq	%r11, %r13
	movzbl	16(%rdx), %eax
	cmpb	$44, %al
	je	.L16565
	cmpb	$48, %al
	je	.L16566
.L641:
	xorl	%r12d, %r12d
	testl	%r12d, %r12d
	je	.L668
	movq	2320(%rsp), %rdi
	cmpw	$55, (%rdi)
	je	.L16567
.L668:
	movq	2320(%rsp), %r9
	movzwl	(%r9), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L676
	mov	%eax, %r8d
	jmp	*.L685(,%r8,8)
	.section	.rodata
	.align 8
	.align 4
.L685:
	.quad	.L679
	.quad	.L676
	.quad	.L676
	.quad	.L676
	.quad	.L684
	.quad	.L676
	.quad	.L676
	.quad	.L676
	.quad	.L682
	.quad	.L682
	.quad	.L676
	.quad	.L682
	.text
.L679:
	movq	2320(%rsp), %rcx
	xorl	%eax, %eax
	movq	8(%rcx), %rdi
	call	queued_subexp_p
	movl	%eax, %ebx
.L678:
	testl	%ebx, %ebx
	je	.L675
	movq	2320(%rsp), %rbx
	movzbl	2(%rbx), %eax
	cmpb	$16, %al
	je	.L687
	testb	%al, %al
	jne	.L16568
.L687:
	movq	2320(%rsp), %rax
	movq	5400(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	2(%rax), %edx
.L14996:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L15284:
	movq	%rax, %r12
.L694:
	movl	$1, %ebp
.L640:
	cmpq	2320(%rsp), %r12
	je	.L639
	movq	5400(%rsp), %rsi
	cmpb	$0, 16(%rsi)
	je	.L639
	movq	2320(%rsp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$59, %eax
	je	.L696
	cmpl	$55, %eax
	je	.L16569
.L700:
	cmpl	$63, %eax
	je	.L703
	cmpl	$66, %eax
	je	.L703
.L699:
	movzbl	2(%r12), %eax
	movzbl	2(%r13), %ecx
	cmpb	%cl, %al
	je	.L706
	testb	%al, %al
	je	.L706
	movq	5400(%rsp), %r9
	movq	8(%r9), %r10
	movzbl	17(%r10), %esi
	shrb	$6, %sil
	movl	%esi, %edx
	andl	$1, %edx
	testl	%ebp, %ebp
	je	.L707
	movzbl	%cl, %edi
	movq	%r12, %rsi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%r13, %rdi
	movq	%rax, %rsi
.L15003:
	call	emit_move_insn
.L639:
	movl	optimize(%rip), %eax
	testl	%eax, %eax
	jne	.L14875
	movq	2320(%rsp), %r13
	cmpw	$51, (%r13)
	je	.L16570
.L14875:
	movq	48(%r15), %rdx
.L628:
	cmpw	$51, (%rdx)
	jne	.L15256
	movzbl	2(%rdx), %r15d
	cmpl	5412(%rsp), %r15d
	je	.L15256
	movl	$53, %edi
	movl	5412(%rsp), %esi
	jmp	.L15259
.L16570:
	movq	2320(%rsp), %rdx
	movq	save_expr_regs(%rip), %rcx
	movl	$2, %edi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, save_expr_regs(%rip)
	jmp	.L14875
.L707:
	movq	%r13, %rdi
	movq	%r12, %rsi
.L15004:
	xorl	%eax, %eax
	call	convert_move
	jmp	.L639
.L706:
	cmpb	$16, %al
	je	.L16571
.L962:
	movq	%r13, %rdi
	movq	%r12, %rsi
	jmp	.L15003
.L16571:
	movq	5400(%rsp), %rsi
	cmpb	$28, 16(%rsi)
	je	.L16572
	cmpb	$16, %al
	jne	.L962
	movq	5400(%rsp), %rdi
	xorl	%eax, %eax
	call	expr_size
	movq	%rax, %r14
	movq	5400(%rsp), %rax
	movq	8(%rax), %r8
	movl	48(%r8), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r13)
	movl	%eax, 2260(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L965
	cmpl	$55, %eax
	je	.L16573
.L969:
	cmpl	$63, %eax
	je	.L972
	cmpl	$66, %eax
	je	.L972
.L968:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L975
	cmpl	$55, %eax
	je	.L16574
.L979:
	cmpl	$63, %eax
	je	.L982
	cmpl	$66, %eax
	je	.L982
.L978:
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L985
	cmpl	$55, %eax
	je	.L16575
.L989:
	cmpl	$63, %eax
	je	.L992
	cmpl	$66, %eax
	je	.L992
.L988:
	cmpw	$55, (%r13)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	testq	%r14, %r14
	je	.L15283
	cmpw	$46, (%r14)
	je	.L16576
.L998:
	movl	2260(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 5296(%rsp)
	testl	%ebp, %ebp
	je	.L13748
.L1084:
	movslq	%ebp,%r9
	movq	%r9, %rax
	movq	%r9, 5288(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L1072
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L1076
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r14)
	ja	.L1072
.L1076:
	movslq	%edx,%rcx
	leaq	(%rcx,%rcx,4), %r11
	movq	%rcx, 5280(%rsp)
	salq	$4, %r11
	movq	insn_operand_predicate(%r11), %rdx
	movq	%r11, 5272(%rsp)
	testq	%rdx, %rdx
	jne	.L16577
.L1077:
	movq	5272(%rsp), %rax
	movq	insn_operand_predicate+8(%rax), %rdx
	testq	%rdx, %rdx
	jne	.L16578
.L1078:
	movq	5272(%rsp), %r10
	movq	insn_operand_predicate+24(%r10), %rdx
	testq	%rdx, %rdx
	je	.L1079
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	5296(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L1072
.L1079:
	call	get_last_insn
	movl	$1, %edx
	movq	%r14, %rsi
	movq	%rax, 5264(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	5272(%rsp), %rsi
	movq	%rax, %rbx
	movq	insn_operand_predicate+16(%rsi), %rdx
	testq	%rdx, %rdx
	jne	.L16579
.L1080:
	movq	5280(%rsp), %rbp
	movq	%r13, %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	5296(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14906
	movq	5264(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L1072:
	movq	5288(%rsp), %rdx
	movl	mode_wider_mode(,%rdx,4), %ebp
	testl	%ebp, %ebp
	jne	.L1084
.L13748:
	movl	$4, %edi
	movq	%r14, %rsi
.L15002:
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%r12), %r14
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%r14, (%rsp)
	movq	8(%r13), %r8
	call	emit_library_call
	jmp	.L639
.L14906:
	call	emit_insn
	jmp	.L639
.L16579:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L1080
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L1080
.L16578:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L1072
	jmp	.L1078
.L16577:
	xorl	%eax, %eax
	movq	%r13, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L1072
	jmp	.L1077
.L16576:
	movl	8(%r14), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 2260(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	2260(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L1012:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13739
.L1008:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L1008
.L13739:
	testl	%ecx, %ecx
	je	.L1001
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L1010
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L1010
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L1010:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L1012
.L1001:
	decl	%r9d
	jg	.L998
	movq	8(%r13), %rbx
	movq	8(%r12), %rdi
	xorl	%ecx, %ecx
	movq	%r12, 7528(%rsp)
	movl	$0, 7556(%rsp)
	movq	%r13, 7504(%rsp)
	movl	%r10d, %r14d
	movl	$9, 2256(%rsp)
	movq	%rbx, 7512(%rsp)
	movq	%rdi, 7536(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L1015
	cmpw	$88, %dx
	je	.L1015
	cmpw	$87, %dx
	je	.L1015
.L1014:
	movl	%ecx, 7520(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L1017
	cmpw	$88, %dx
	je	.L1017
	cmpw	$87, %dx
	je	.L1017
.L1016:
	movl	%ecx, 7544(%rsp)
	movl	$0, 7548(%rsp)
	movl	$0, 7524(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L1019
	cmpw	$87, %ax
	je	.L1019
.L1018:
	testl	%edx, %edx
	movl	%edx, 7560(%rsp)
	je	.L1020
	movl	%r10d, 7556(%rsp)
.L1020:
	movl	%r10d, 7552(%rsp)
	movl	7544(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L1022
	movl	7520(%rsp), %r11d
	testl	%r11d, %r11d
	jne	.L1021
.L1022:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 2260(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	2260(%rsp), %ebp
.L1036:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13742
.L1032:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L1032
.L13742:
	testl	%ecx, %ecx
	je	.L1025
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L1034
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L1034
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L1034:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L1036
.L1025:
	cmpl	$2, %r9d
	jle	.L1021
	testl	%r10d, %r10d
	jne	.L1038
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L1039
	cmpw	$46, %dx
	je	.L1039
	cmpw	$47, %dx
	je	.L1039
	cmpw	$49, %dx
	je	.L1039
	cmpw	$113, %dx
	je	.L1039
.L1038:
	movl	7520(%rsp), %eax
	testl	%eax, %eax
	jne	.L1021
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L1041
	cmpw	$46, %dx
	je	.L1041
	cmpw	$47, %dx
	je	.L1041
	cmpw	$49, %dx
	je	.L1041
	cmpw	$113, %dx
	je	.L1041
.L1021:
	cmpl	$8, 2260(%rsp)
	movl	$8, %eax
	cmovl	2260(%rsp), %eax
	cmpl	$1, 2256(%rsp)
	movl	%eax, 2260(%rsp)
	jle	.L1044
.L1066:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L13745
.L1051:
	movslq	%edx,%rsi
	movl	2256(%rsp), %ebx
	salq	$2, %rsi
	cmpl	%ebx, mode_size(%rsi)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rsi), %edx
	testl	%edx, %edx
	jne	.L1051
.L13745:
	testl	%r12d, %r12d
	je	.L1044
	movslq	%r12d,%r13
	movq	%r13, %rbp
	salq	$4, %rbp
	addq	mov_optab(%rip), %rbp
	movl	8(%rbp), %edx
	cmpl	$210, %edx
	je	.L1053
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 2260(%rsp)
	jl	.L1053
	movslq	%edx,%rdi
	cmpl	%ebp, 7552(%rsp)
	leaq	7504(%rsp), %rbx
	movq	insn_gen_function(,%rdi,8), %r8
	movq	%r8, 5304(%rsp)
	jl	.L1053
	movl	7560(%rsp), %edx
.L1064:
	testl	%edx, %edx
	je	.L1058
	subl	%ebp, 52(%rbx)
.L1058:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L1059
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15001:
	movq	%rax, %r14
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L1061
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L1062:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*5304(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L1063
	addl	%ebp, 52(%rbx)
.L1063:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L1064
.L1053:
	movl	mode_size(,%r13,4), %r12d
	movl	%r12d, 2256(%rsp)
	decl	%r12d
	jg	.L1066
.L1044:
	movl	7552(%rsp), %eax
	testl	%eax, %eax
.L15371:
	je	.L639
	jmp	.L15283
.L1061:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L1062
.L1059:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15001
.L1041:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7512(%rsp)
	jmp	.L1021
.L1039:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7536(%rsp)
	jmp	.L1038
.L1019:
	movl	$1, %edx
	jmp	.L1018
.L1017:
	movl	$1, %ecx
	jmp	.L1016
.L1015:
	movl	$1, %ecx
	jmp	.L1014
.L992:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L988
.L16575:
	movzbl	2(%r14), %edx
	cmpb	$16, %dl
	je	.L986
	movq	8(%r14), %rbp
	cmpw	$59, (%rbp)
	je	.L16580
.L986:
	cmpl	$55, %eax
	jne	.L989
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L988
.L16580:
	movq	8(%rbp), %rbx
	movq	%rbx, 8(%r14)
	cmpq	$0, 16(%rbp)
	je	.L988
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r14
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L988
.L985:
	cmpq	$0, 16(%r14)
	jne	.L993
	movq	8(%r14), %r14
	jmp	.L988
.L993:
	movq	24(%r14), %rsi
	testq	%rsi, %rsi
	je	.L994
	movq	%rsi, %r14
	jmp	.L988
.L994:
	movq	8(%r14), %rbp
	movzbl	2(%rbp), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L988
.L982:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L978
.L16574:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L976
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16581
.L976:
	cmpl	$55, %eax
	jne	.L979
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L978
.L16581:
	movq	8(%rbp), %r10
	movq	%r10, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L978
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L978
.L975:
	cmpq	$0, 16(%r12)
	jne	.L983
	movq	8(%r12), %r12
	jmp	.L978
.L983:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L984
	movq	%rsi, %r12
	jmp	.L978
.L984:
	movq	8(%r12), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L978
.L972:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L968
.L16573:
	jne	.L969
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L968
.L965:
	cmpq	$0, 16(%r13)
	jne	.L973
	movq	8(%r13), %r13
	jmp	.L968
.L973:
	movq	24(%r13), %rdi
	testq	%rdi, %rdi
	je	.L974
	movq	%rdi, %r13
	jmp	.L968
.L974:
	movq	8(%r13), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L968
.L16572:
	xorl	%eax, %eax
	movq	%rsi, %rdi
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, 2312(%rsp)
	je	.L16582
.L711:
	movl	$8, %edi
	call	size_int
	movl	$57, %edi
	movq	5400(%rsp), %rbx
	movq	%rax, %rdx
	movq	8(%rbx), %r11
	movq	32(%r11), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	5400(%rsp), %r9
	movq	%rax, %r14
	movl	32(%r9), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%r14, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movq	$0, 2264(%rsp)
	movq	%rax, 5352(%rsp)
	movq	%rax, 2288(%rsp)
	movq	5400(%rsp), %rax
	movq	8(%rax), %r10
	movl	48(%r10), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r13)
	movl	%eax, 2284(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movq	%r13, 2296(%rsp)
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L837
	cmpl	$55, %eax
	je	.L16583
	cmpl	$63, %eax
	je	.L844
	cmpl	$66, %eax
	je	.L844
.L840:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L847
	cmpl	$55, %eax
	je	.L16584
.L851:
	cmpl	$63, %eax
	je	.L854
	cmpl	$66, %eax
	je	.L854
.L850:
	movq	5352(%rsp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$59, %eax
	je	.L857
	cmpl	$55, %eax
	je	.L16585
.L861:
	cmpl	$63, %eax
	je	.L864
	cmpl	$66, %eax
	je	.L864
.L860:
	movq	2296(%rsp), %r11
	cmpw	$55, (%r11)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 2288(%rsp)
	je	.L15283
	movq	2288(%rsp), %rsi
	cmpw	$46, (%rsi)
	je	.L16586
.L870:
	movl	2284(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 5336(%rsp)
	testl	%ebp, %ebp
	je	.L13736
.L956:
	movslq	%ebp,%r14
	movq	%r14, %rax
	movq	%r14, 5328(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L944
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L948
	movq	2288(%rsp), %r10
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r10)
	ja	.L944
.L948:
	movslq	%edx,%rsi
	leaq	(%rsi,%rsi,4), %r14
	movq	%rsi, 5320(%rsp)
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16587
.L949:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16588
.L950:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L951
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	5336(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L944
.L951:
	call	get_last_insn
	movl	$1, %edx
	movq	2288(%rsp), %rsi
	movq	%rax, 5312(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16589
.L952:
	movq	5320(%rsp), %rbp
	movq	2296(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	5336(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14905
	movq	5312(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L944:
	movq	5328(%rsp), %rbx
	movl	mode_wider_mode(,%rbx,4), %ebp
	testl	%ebp, %ebp
	jne	.L956
.L13736:
	movq	2288(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movq	2296(%rsp), %r9
	movl	$3, %ecx
	movq	8(%r12), %r11
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%r11, (%rsp)
	movq	8(%r9), %r8
	movl	$4, %r9d
	call	emit_library_call
.L954:
	movq	5352(%rsp), %rdi
	cmpw	$46, (%rdi)
	je	.L16590
	movq	8(%r13), %rsi
	movl	$4, %edi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	5352(%rsp), %rcx
	movq	%rax, %rdx
	movl	$4, %edi
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	2312(%rsp), %rdx
	movl	$4, %edi
	movq	5352(%rsp), %rcx
	movq	%rax, %rbp
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 2264(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L958:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L959
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%rbp, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L959:
	cmpq	$0, 2264(%rsp)
	je	.L639
	movq	2264(%rsp), %rdi
	call	emit_label
	jmp	.L639
.L16590:
	movq	5400(%rsp), %rcx
	movq	8(%r13), %rdi
	movl	32(%rcx), %esi
	call	plus_constant_wide
	movq	2312(%rsp), %rdi
	movq	5400(%rsp), %r13
	movq	%rax, %rbp
	movl	32(%r13), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L958
.L14905:
	call	emit_insn
	jmp	.L954
.L16589:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L952
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L952
.L16588:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L944
	jmp	.L950
.L16587:
	xorl	%eax, %eax
	movq	2296(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L944
	jmp	.L949
.L16586:
	movl	8(%rsi), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 2284(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	2284(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L884:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13727
.L880:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L880
.L13727:
	testl	%ecx, %ecx
	je	.L873
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L882
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L882
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L882:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L884
.L873:
	decl	%r9d
	jg	.L870
	movq	2296(%rsp), %rcx
	movq	8(%r12), %rdi
	movl	%r10d, %r14d
	movq	8(%rcx), %rbx
	movq	%r12, 7528(%rsp)
	movq	%rcx, 7504(%rsp)
	movl	$0, 7556(%rsp)
	movq	%rdi, 7536(%rsp)
	xorl	%ecx, %ecx
	movl	$9, 2280(%rsp)
	movq	%rbx, 7512(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L887
	cmpw	$88, %dx
	je	.L887
	cmpw	$87, %dx
	je	.L887
.L886:
	movl	%ecx, 7520(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L889
	cmpw	$88, %dx
	je	.L889
	cmpw	$87, %dx
	je	.L889
.L888:
	movl	%ecx, 7544(%rsp)
	movl	$0, 7548(%rsp)
	movl	$0, 7524(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L891
	cmpw	$87, %ax
	je	.L891
.L890:
	testl	%edx, %edx
	movl	%edx, 7560(%rsp)
	je	.L892
	movl	%r10d, 7556(%rsp)
.L892:
	movl	%r10d, 7552(%rsp)
	movl	7544(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L894
	movl	7520(%rsp), %eax
	testl	%eax, %eax
	jne	.L893
.L894:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 2284(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	2284(%rsp), %ebp
.L908:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13730
.L904:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L904
.L13730:
	testl	%ecx, %ecx
	je	.L897
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L906
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L906
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L906:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L908
.L897:
	cmpl	$2, %r9d
	jle	.L893
	testl	%r10d, %r10d
	jne	.L910
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L911
	cmpw	$46, %dx
	je	.L911
	cmpw	$47, %dx
	je	.L911
	cmpw	$49, %dx
	je	.L911
	cmpw	$113, %dx
	je	.L911
.L910:
	movl	7520(%rsp), %r10d
	testl	%r10d, %r10d
	jne	.L893
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L913
	cmpw	$46, %dx
	je	.L913
	cmpw	$47, %dx
	je	.L913
	cmpw	$49, %dx
	je	.L913
	cmpw	$113, %dx
	je	.L913
.L893:
	cmpl	$8, 2284(%rsp)
	movl	$8, %eax
	cmovl	2284(%rsp), %eax
	cmpl	$1, 2280(%rsp)
	movl	%eax, 2284(%rsp)
	jle	.L916
.L938:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L13733
.L923:
	movslq	%edx,%rbx
	movl	2280(%rsp), %r9d
	salq	$2, %rbx
	cmpl	%r9d, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L923
.L13733:
	testl	%r12d, %r12d
	je	.L916
	movslq	%r12d,%r14
	movq	%r14, %r11
	salq	$4, %r11
	addq	mov_optab(%rip), %r11
	movl	8(%r11), %edx
	cmpl	$210, %edx
	je	.L925
	movl	mode_size(,%r14,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 2284(%rsp)
	jl	.L925
	movslq	%edx,%rcx
	cmpl	%ebp, 7552(%rsp)
	leaq	7504(%rsp), %rbx
	movq	insn_gen_function(,%rcx,8), %rdi
	movq	%rdi, 5344(%rsp)
	jl	.L925
	movl	7560(%rsp), %edx
.L936:
	testl	%edx, %edx
	je	.L930
	subl	%ebp, 52(%rbx)
.L930:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L931
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15000:
	movl	40(%rbx), %r8d
	movq	%rax, 2272(%rsp)
	testl	%r8d, %r8d
	je	.L933
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L934:
	movq	%rax, %rsi
	movq	2272(%rsp), %rdi
	xorl	%eax, %eax
	call	*5344(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L935
	addl	%ebp, 52(%rbx)
.L935:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L936
.L925:
	movl	mode_size(,%r14,4), %r12d
	movl	%r12d, 2280(%rsp)
	decl	%r12d
	jg	.L938
.L916:
	movl	7552(%rsp), %edx
	testl	%edx, %edx
	je	.L954
	jmp	.L15283
.L933:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L934
.L931:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15000
.L913:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7512(%rsp)
	jmp	.L893
.L911:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7536(%rsp)
	jmp	.L910
.L891:
	movl	$1, %edx
	jmp	.L890
.L889:
	movl	$1, %ecx
	jmp	.L888
.L887:
	movl	$1, %ecx
	jmp	.L886
.L864:
	movq	5352(%rsp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	5352(%rsp), %rbx
	movq	%rax, 8(%rbx)
	movq	5352(%rsp), %rdx
	movq	16(%rdx), %rdi
	call	protect_from_queue
	movq	5352(%rsp), %r11
	movq	%rax, 16(%r11)
	jmp	.L860
.L16585:
	movq	%rdx, %rcx
	movzbl	2(%rdx), %edx
	cmpb	$16, %dl
	je	.L858
	movq	8(%rcx), %rbp
	cmpw	$59, (%rbp)
	je	.L16591
.L858:
	cmpl	$55, %eax
	jne	.L861
	movq	5352(%rsp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L860
.L16591:
	movq	8(%rbp), %r9
	movq	%r9, 8(%rcx)
	cmpq	$0, 16(%rbp)
	je	.L860
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	5352(%rsp), %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L14999:
	movq	%rbx, 2288(%rsp)
	jmp	.L860
.L857:
	movq	5352(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L865
	movq	8(%rcx), %rbx
	jmp	.L14999
.L865:
	movq	5352(%rsp), %r8
	movq	24(%r8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, 2288(%rsp)
	jne	.L860
	movq	5352(%rsp), %r14
	movq	8(%r14), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	5352(%rsp), %rbp
	movq	%rax, %rdi
	movq	8(%rbp), %rsi
	movq	%rax, 24(%rbp)
	call	gen_move_insn
	movq	5352(%rsp), %r10
	movq	%rax, %rdi
	movq	16(%r10), %rsi
	call	emit_insn_before
	movq	5352(%rsp), %rsi
	movq	24(%rsi), %rdi
	movq	%rdi, 2288(%rsp)
	jmp	.L860
.L854:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L850
.L16584:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L848
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16592
.L848:
	cmpl	$55, %eax
	jne	.L851
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L850
.L16592:
	movq	8(%rbp), %r10
	movq	%r10, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L850
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L850
.L847:
	cmpq	$0, 16(%r12)
	jne	.L855
	movq	8(%r12), %r12
	jmp	.L850
.L855:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L856
	movq	%rsi, %r12
	jmp	.L850
.L856:
	movq	8(%r12), %rbp
	movzbl	2(%rbp), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L850
.L844:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L840
.L16583:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L840
.L837:
	cmpq	$0, 16(%r13)
	jne	.L845
	movq	8(%r13), %rcx
	movq	%rcx, 2296(%rsp)
	jmp	.L840
.L845:
	movq	24(%r13), %r8
	testq	%r8, %r8
	movq	%r8, 2296(%rsp)
	jne	.L840
	movq	8(%r13), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rdi
	movq	%rdi, 2296(%rsp)
	jmp	.L840
.L16582:
	movq	5400(%rsp), %rdi
	movq	2312(%rsp), %rbp
	movl	32(%rdi), %eax
	cmpl	%eax, 8(%rbp)
	jge	.L711
	movq	8(%rdi), %r8
	movl	48(%r8), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r13)
	movl	%eax, 2308(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r12)
	jne	.L15283
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L714
	cmpl	$55, %eax
	je	.L16593
.L718:
	cmpl	$63, %eax
	je	.L721
	cmpl	$66, %eax
	je	.L721
.L717:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L724
	cmpl	$55, %eax
	je	.L16594
.L728:
	cmpl	$63, %eax
	je	.L731
	cmpl	$66, %eax
	je	.L731
.L727:
	movq	2312(%rsp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$59, %eax
	je	.L734
	cmpl	$55, %eax
	je	.L16595
.L738:
	cmpl	$63, %eax
	je	.L741
	cmpl	$66, %eax
	je	.L741
.L737:
	cmpw	$55, (%r13)
	jne	.L15283
	cmpw	$55, (%r12)
	jne	.L15283
	cmpq	$0, 2312(%rsp)
	je	.L15283
	movq	2312(%rsp), %rbx
	cmpw	$46, (%rbx)
	je	.L16596
.L747:
	movl	2308(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 5384(%rsp)
	testl	%ebp, %ebp
	je	.L13724
.L833:
	movslq	%ebp,%rdi
	movq	%rdi, %rax
	movq	%rdi, 5376(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L821
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L825
	movq	2312(%rsp), %r14
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r14)
	ja	.L821
.L825:
	movslq	%edx,%rsi
	leaq	(%rsi,%rsi,4), %r14
	movq	%rsi, 5368(%rsp)
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16597
.L826:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16598
.L827:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L828
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	5384(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L821
.L828:
	call	get_last_insn
	movl	$1, %edx
	movq	2312(%rsp), %rsi
	movq	%rax, 5360(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16599
.L829:
	movq	5368(%rsp), %rbp
	movq	%r13, %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	5384(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14906
	movq	5360(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L821:
	movq	5376(%rsp), %rdx
	movl	mode_wider_mode(,%rdx,4), %ebp
	testl	%ebp, %ebp
	jne	.L833
.L13724:
	movq	2312(%rsp), %rsi
	movl	$4, %edi
	jmp	.L15002
.L16599:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L829
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L829
.L16598:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L821
	jmp	.L827
.L16597:
	xorl	%eax, %eax
	movq	%r13, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L821
	jmp	.L826
.L16596:
	movl	8(%rbx), %r10d
	xorl	%r9d, %r9d
	movl	$9, %r8d
	cmpl	$8, 2308(%rsp)
	movl	$8, %ebx
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	2308(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L761:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13715
.L757:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L757
.L13715:
	testl	%ecx, %ecx
	je	.L750
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L759
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L759
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L759:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L761
.L750:
	decl	%r9d
	jg	.L747
	movq	8(%r13), %rbx
	movq	8(%r12), %rdi
	xorl	%ecx, %ecx
	movq	%r12, 7592(%rsp)
	movl	$0, 7620(%rsp)
	movq	%r13, 7568(%rsp)
	movl	%r10d, %r14d
	movl	$9, 2304(%rsp)
	movq	%rbx, 7576(%rsp)
	movq	%rdi, 7600(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L764
	cmpw	$88, %dx
	je	.L764
	cmpw	$87, %dx
	je	.L764
.L763:
	movl	%ecx, 7584(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r13d
	cmpw	$1, %r13w
	jbe	.L766
	cmpw	$88, %dx
	je	.L766
	cmpw	$87, %dx
	je	.L766
.L765:
	movl	%ecx, 7608(%rsp)
	movl	$0, 7612(%rsp)
	movl	$0, 7588(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L768
	cmpw	$87, %ax
	je	.L768
.L767:
	testl	%edx, %edx
	movl	%edx, 7624(%rsp)
	je	.L769
	movl	%r10d, 7620(%rsp)
.L769:
	movl	%r10d, 7616(%rsp)
	movl	7608(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L771
	movl	7584(%rsp), %eax
	testl	%eax, %eax
	jne	.L770
.L771:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 2308(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	2308(%rsp), %ebp
.L785:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13718
.L781:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L781
.L13718:
	testl	%ecx, %ecx
	je	.L774
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L783
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L783
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L783:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L785
.L774:
	cmpl	$2, %r9d
	jle	.L770
	testl	%r10d, %r10d
	jne	.L787
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L788
	cmpw	$46, %dx
	je	.L788
	cmpw	$47, %dx
	je	.L788
	cmpw	$49, %dx
	je	.L788
	cmpw	$113, %dx
	je	.L788
.L787:
	movl	7584(%rsp), %eax
	testl	%eax, %eax
	jne	.L770
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L790
	cmpw	$46, %dx
	je	.L790
	cmpw	$47, %dx
	je	.L790
	cmpw	$49, %dx
	je	.L790
	cmpw	$113, %dx
	je	.L790
.L770:
	cmpl	$8, 2308(%rsp)
	movl	$8, %eax
	cmovl	2308(%rsp), %eax
	cmpl	$1, 2304(%rsp)
	movl	%eax, 2308(%rsp)
	jle	.L793
.L815:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L13721
.L800:
	movslq	%edx,%r10
	movl	2304(%rsp), %eax
	salq	$2, %r10
	cmpl	%eax, mode_size(%r10)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%r10), %edx
	testl	%edx, %edx
	jne	.L800
.L13721:
	testl	%r12d, %r12d
	je	.L793
	movslq	%r12d,%r13
	movq	%r13, %r9
	salq	$4, %r9
	addq	mov_optab(%rip), %r9
	movl	8(%r9), %edx
	cmpl	$210, %edx
	je	.L802
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 2308(%rsp)
	jl	.L802
	movslq	%edx,%rcx
	cmpl	%ebp, 7616(%rsp)
	leaq	7568(%rsp), %rbx
	movq	insn_gen_function(,%rcx,8), %r11
	movq	%r11, 5392(%rsp)
	jl	.L802
	movl	7624(%rsp), %edx
.L813:
	testl	%edx, %edx
	je	.L807
	subl	%ebp, 52(%rbx)
.L807:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L808
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L14998:
	movq	%rax, %r14
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L810
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L811:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*5392(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L812
	addl	%ebp, 52(%rbx)
.L812:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L813
.L802:
	movl	mode_size(,%r13,4), %ebx
	movl	%ebx, 2304(%rsp)
	decl	%ebx
	jg	.L815
.L793:
	movl	7616(%rsp), %r8d
	testl	%r8d, %r8d
	jmp	.L15371
.L810:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L811
.L808:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L14998
.L790:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7576(%rsp)
	jmp	.L770
.L788:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7600(%rsp)
	jmp	.L787
.L768:
	movl	$1, %edx
	jmp	.L767
.L766:
	movl	$1, %ecx
	jmp	.L765
.L764:
	movl	$1, %ecx
	jmp	.L763
.L741:
	movq	2312(%rsp), %r10
	xorl	%esi, %esi
	movq	8(%r10), %rdi
	call	protect_from_queue
	movq	2312(%rsp), %rsi
	movq	%rax, 8(%rsi)
	xorl	%esi, %esi
	movq	2312(%rsp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	2312(%rsp), %rdi
	movq	%rax, 16(%rdi)
	jmp	.L737
.L16595:
	movq	%rdx, %rcx
	movzbl	2(%rdx), %edx
	cmpb	$16, %dl
	je	.L735
	movq	8(%rcx), %rbp
	cmpw	$59, (%rbp)
	je	.L16600
.L735:
	cmpl	$55, %eax
	jne	.L738
	movq	2312(%rsp), %rbp
	xorl	%esi, %esi
	movq	8(%rbp), %rdi
	call	protect_from_queue
	movq	%rax, 8(%rbp)
	jmp	.L737
.L16600:
	movq	8(%rbp), %rbx
	movq	%rbx, 8(%rcx)
	cmpq	$0, 16(%rbp)
	je	.L737
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	2312(%rsp), %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L14997:
	movq	%rbx, 2312(%rsp)
	jmp	.L737
.L734:
	movq	2312(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L742
	movq	8(%rcx), %rbx
	jmp	.L14997
.L742:
	movq	2312(%rsp), %r9
	movq	24(%r9), %rsi
	testq	%rsi, %rsi
	je	.L743
	movq	%rsi, 2312(%rsp)
	jmp	.L737
.L743:
	movq	2312(%rsp), %rbx
	movq	8(%rbx), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	2312(%rsp), %r14
	movq	%rax, %rdi
	movq	8(%r14), %rsi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	2312(%rsp), %rcx
	movq	%rax, %rdi
	movq	16(%rcx), %rsi
	call	emit_insn_before
	movq	2312(%rsp), %r11
	movq	24(%r11), %r8
	movq	%r8, 2312(%rsp)
	jmp	.L737
.L731:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L727
.L16594:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L725
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L16601
.L725:
	cmpl	$55, %eax
	jne	.L728
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L727
.L16601:
	movq	8(%rbp), %r11
	movq	%r11, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L727
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L727
.L724:
	cmpq	$0, 16(%r12)
	jne	.L732
	movq	8(%r12), %r12
	jmp	.L727
.L732:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L733
	movq	%rsi, %r12
	jmp	.L727
.L733:
	movq	8(%r12), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L727
.L721:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L717
.L16593:
	jne	.L718
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L717
.L714:
	cmpq	$0, 16(%r13)
	jne	.L722
	movq	8(%r13), %r13
	jmp	.L717
.L722:
	movq	24(%r13), %rdi
	testq	%rdi, %rdi
	je	.L723
	movq	%rdi, %r13
	jmp	.L717
.L723:
	movq	8(%r13), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L717
	.p2align 6,,7
.L703:
	movq	2320(%rsp), %rcx
	xorl	%esi, %esi
	movq	8(%rcx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	2320(%rsp), %r8
	movq	%rax, 8(%r8)
	movq	2320(%rsp), %r9
	movq	16(%r9), %rdi
	call	protect_from_queue
	movq	2320(%rsp), %r10
	movq	%rax, 16(%r10)
	jmp	.L699
.L16569:
	jne	.L700
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbx)
	jmp	.L699
	.p2align 6,,7
.L696:
	movq	2320(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L704
	movq	8(%rcx), %r13
	jmp	.L699
.L704:
	movq	2320(%rsp), %rdx
	movq	24(%rdx), %r11
	testq	%r11, %r11
	movq	%r11, %r13
	jne	.L699
	movq	2320(%rsp), %rdi
	movq	8(%rdi), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	2320(%rsp), %r13
	movq	%rax, %rdi
	movq	8(%r13), %rsi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	2320(%rsp), %r14
	movq	%rax, %rdi
	movq	16(%r14), %rsi
	call	emit_insn_before
	movq	2320(%rsp), %rax
	movq	24(%rax), %r13
	jmp	.L699
	.p2align 6,,7
.L16568:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	5400(%rsp), %rdi
	movzbl	2(%rbx), %edx
	movq	%rax, %rsi
	jmp	.L14996
.L675:
	movq	2320(%rsp), %r14
	movl	(%r14), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L16602
	movq	2320(%rsp), %rbx
	movq	5400(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movzbl	2(%rbx), %edx
	movq	%rbx, %rsi
	call	expand_expr
	movq	2320(%rsp), %rdx
	movq	%rax, %r12
	cmpw	$51, (%rdx)
	je	.L16603
.L693:
	movzwl	(%r12), %edx
	leal	-56(%rdx), %edi
	cmpw	$1, %di
	jbe	.L694
	cmpw	$46, %dx
	je	.L694
	cmpw	$47, %dx
	je	.L694
	cmpw	$49, %dx
	je	.L694
	cmpw	$113, %dx
	jne	.L640
	jmp	.L694
	.p2align 6,,7
.L16603:
	cmpl	$63, 8(%rdx)
	jle	.L640
	jmp	.L693
.L16602:
	movq	5400(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	2320(%rsp), %r13
	movq	%rax, %rsi
	movzbl	3(%r13), %edx
	movq	8(%r13), %rdi
	shrb	$2, %dl
	andl	$1, %edx
	jmp	.L15004
.L684:
	movl	$1, %ebx
	jmp	.L678
.L676:
	xorl	%ebx, %ebx
	jmp	.L678
.L682:
	movq	2320(%rsp), %r11
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	movq	8(%r11), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L684
	movq	2320(%rsp), %rdx
	xorl	%eax, %eax
	movq	16(%rdx), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L678
	jmp	.L684
.L16567:
	movzbl	2(%rdi), %eax
	cmpb	$16, %al
	je	.L668
	movl	cse_not_expected(%rip), %r10d
	xorl	%esi, %esi
	movzbl	%al, %edx
	testl	%r10d, %r10d
	cmove	%rdi, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	movq	5400(%rsp), %rdi
	call	expand_expr
	movq	%rax, %r12
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L694
	testb	%al, %al
	je	.L694
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L15284
	.p2align 6,,7
.L16566:
	movq	2320(%rsp), %r12
	cmpb	$16, 2(%r12)
	jne	.L641
	call	gen_label_rtx
	movq	%rax, %rbp
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r12
	testq	%rbx, %rbx
	jne	.L645
.L13708:
	movq	2320(%rsp), %rsi
	movzwl	(%rsi), %eax
	cmpl	$59, %eax
	je	.L647
	cmpl	$55, %eax
	je	.L16604
.L651:
	cmpl	$63, %eax
	je	.L654
	cmpl	$66, %eax
	je	.L654
.L650:
	movq	5400(%rsp), %rbx
	xorl	%eax, %eax
	movq	%rbp, %rsi
	incl	inhibit_defer_pop(%rip)
	movq	32(%rbx), %rdi
	call	jumpifnot
	movq	5400(%rsp), %r14
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%r13, %rsi
	movq	40(%r14), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L660
.L13710:
	movq	%r12, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%rbp, %rdi
	call	emit_label
	xorl	%eax, %eax
	xorl	%edx, %edx
	movq	5400(%rsp), %rbp
	movq	%r13, %rsi
	movq	48(%rbp), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L665
.L13712:
	movq	%r12, %rdi
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L639
.L665:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rsi
	movq	%rax, 16(%rbx)
	testq	%rsi, %rsi
	movq	%rsi, pending_chain(%rip)
	movq	%rsi, %rbx
	jne	.L665
	jmp	.L13712
	.p2align 6,,7
.L660:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdi
	movq	%rax, 16(%rbx)
	testq	%rdi, %rdi
	movq	%rdi, pending_chain(%rip)
	movq	%rdi, %rbx
	jne	.L660
	jmp	.L13710
.L654:
	movq	2320(%rsp), %r10
	xorl	%esi, %esi
	movq	8(%r10), %rdi
	call	protect_from_queue
	movq	2320(%rsp), %rsi
	movq	16(%rsi), %rdi
	movq	%rax, 8(%rsi)
	xorl	%esi, %esi
	call	protect_from_queue
	movq	2320(%rsp), %rdi
	movq	%rax, 16(%rdi)
	jmp	.L650
.L16604:
	jne	.L651
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	2320(%rsp), %rbx
	movq	%rax, 8(%rbx)
	jmp	.L650
.L647:
	movq	2320(%rsp), %rbx
	cmpq	$0, 16(%rbx)
	jne	.L655
	movq	8(%rbx), %r13
	jmp	.L650
.L655:
	movq	2320(%rsp), %r13
	movq	24(%r13), %r8
	testq	%r8, %r8
	movq	%r8, %r13
	jne	.L650
	movq	2320(%rsp), %rax
	movq	8(%rax), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	2320(%rsp), %r11
	movq	%rax, %rdi
	movq	8(%r11), %rsi
	movq	%rax, 24(%r11)
	call	gen_move_insn
	movq	2320(%rsp), %rcx
	movq	%rax, %rdi
	movq	16(%rcx), %rsi
	call	emit_insn_before
	movq	2320(%rsp), %r9
	movq	24(%r9), %r13
	jmp	.L650
	.p2align 6,,7
.L645:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r14
	movq	%rax, 16(%rbx)
	testq	%r14, %r14
	movq	%r14, pending_chain(%rip)
	movq	%r14, %rbx
	jne	.L645
	jmp	.L13708
	.p2align 6,,7
.L16565:
	movq	32(%rdx), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L637
.L13706:
	movq	5400(%rsp), %rax
	movq	2320(%rsp), %rsi
	xorl	%edx, %edx
	movq	40(%rax), %rdi
	xorl	%eax, %eax
	call	store_expr
	jmp	.L639
.L637:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdx
	movq	%rax, 16(%rbx)
	testq	%rdx, %rdx
	movq	%rdx, pending_chain(%rip)
	movq	%rdx, %rbx
	jne	.L637
	jmp	.L13706
.L16564:
	movq	8(%r15), %rdi
	call	int_size_in_bytes
	xorl	%edx, %edx
	movl	$16, %edi
	movl	%eax, %esi
	call	assign_stack_temp
	jmp	.L14995
.L623:
	xorl	%eax, %eax
	jmp	.L622
.L1098:
	movq	32(%r15), %rdi
	cmpq	const0_rtx(%rip), %rdi
	je	.L15283
	call	emit_insns
	movq	40(%r15), %r9
	movq	const0_rtx(%rip), %r11
	movq	%r9, 56(%rsp)
	movq	%r11, 32(%r15)
	jmp	.L581
.L13620:
	movq	32(%r15), %rdi
	cmpb	$29, 16(%rdi)
	je	.L16605
.L13621:
	xorl	%ecx, %ecx
	movq	32(%r15), %rdi
	cmpl	$3, %r13d
	sete	%cl
	xorl	%eax, %eax
	xorl	%edx, %edx
	xorl	%esi, %esi
	addl	$2, %ecx
	call	expand_expr
	cmpw	$55, (%rax)
	jne	.L15283
	cmpl	$1, %r13d
	je	.L13629
	cmpl	$3, %r13d
	je	.L13629
	movq	8(%rax), %rdi
.L15245:
	movq	56(%rsp), %rsi
	xorl	%eax, %eax
	call	force_operand
	movl	flag_force_addr(%rip), %ecx
	movq	%rax, 56(%rsp)
	testl	%ecx, %ecx
	je	.L581
	movq	56(%rsp), %rcx
	cmpw	$51, (%rcx)
	je	.L581
	movl	$4, %edi
	movq	%rcx, %rsi
	call	force_reg
	jmp	.L13703
.L13629:
	movq	8(%rax), %rax
	jmp	.L13703
.L16605:
	call	decl_function_context
	testq	%rax, %rax
	je	.L13621
	movq	32(%r15), %rdi
	xorl	%eax, %eax
	call	trampoline_address
	movq	%rax, %rdi
	jmp	.L15245
	.p2align 6,,7
.L2276:
	movq	5424(%rsp), %rbx
	movzbl	16(%rbx), %edx
	cmpb	$6, %dl
	je	.L2278
	movl	5408(%rsp), %esi
	testl	%esi, %esi
	je	.L2277
.L2278:
	movq	32(%r15), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%edx, %edx
	movl	%r13d, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L15309:
	movq	const0_rtx(%rip), %rdx
	jmp	.L15256
.L2277:
	movq	32(%r15), %rdi
	movq	8(%rdi), %rbx
	movzbl	44(%rbx), %r10d
	cmpl	%r10d, 5412(%rsp)
	je	.L16606
	cmpb	$22, %dl
	je	.L16607
	movl	5412(%rsp), %edx
	xorl	%ecx, %ecx
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movzbl	2(%rax), %edx
	movq	%rax, %rcx
	movzbl	%dl, %r12d
	cmpl	5412(%rsp), %r12d
	je	.L3218
	testb	%dl, %dl
	je	.L3218
	cmpl	$3, %r13d
	je	.L16608
	movl	flag_force_mem(%rip), %r9d
	testl	%r9d, %r9d
	je	.L3224
	cmpw	$55, (%rax)
	je	.L16609
.L3224:
	cmpq	$0, 56(%rsp)
	jne	.L3225
	movq	32(%r15), %rdi
	movq	%rcx, %rsi
	movq	8(%rdi), %r11
	movl	5412(%rsp), %edi
	movzbl	17(%r11), %edx
	shrb	$6, %dl
	andl	$1, %edx
	jmp	.L15271
.L3225:
	movq	32(%r15), %rdx
	movq	56(%rsp), %rdi
	movq	%rcx, %rsi
	movq	8(%rdx), %r8
	movzbl	17(%r8), %edx
	shrb	$6, %dl
	andl	$1, %edx
	jmp	.L15250
.L16609:
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	movq	%rax, %rcx
	jmp	.L3224
	.p2align 6,,7
.L16608:
	movl	5416(%rsp), %eax
	movl	5412(%rsp), %esi
	movq	%rcx, %rdx
	testl	%eax, %eax
	setne	%r13b
	xorl	%eax, %eax
	movzbl	%r13b, %edi
	addl	$99, %edi
	call	gen_rtx
	jmp	.L13703
	.p2align 6,,7
.L16607:
	cmpq	$0, 56(%rsp)
	jne	.L2281
	cmpl	$16, 5412(%rsp)
	je	.L16610
	movl	5412(%rsp), %edi
	call	gen_reg_rtx
.L15029:
	movq	%rax, 56(%rsp)
.L2281:
	movq	56(%rsp), %r9
	movzwl	(%r9), %eax
	cmpw	$55, %ax
	je	.L16611
	cmpw	$51, %ax
	jne	.L15283
	movzbl	44(%rbx), %ebx
	movq	32(%r15), %r14
	xorl	%r13d, %r13d
	xorl	%r15d, %r15d
	movq	%r14, 4856(%rsp)
	movq	8(%r14), %rdi
	movslq	%ebx,%r12
	movl	mode_size(,%r12,4), %eax
	leal	0(,%rax,8), %ebp
	call	int_size_in_bytes
	cmpl	$31, %ebp
	movl	%eax, %r14d
	jg	.L2745
	movl	$1, %eax
	movl	%ebp, %ecx
	sall	%cl, %eax
	leal	-1(%rax), %r15d
.L2745:
	cmpl	$16, %ebx
	je	.L16612
.L2746:
	testl	%ebx, %ebx
	je	.L2751
	cmpl	$16, %ebx
	je	.L2752
	cmpb	$0, direct_store(%r12)
	je	.L2751
.L2752:
	movq	56(%rsp), %rsi
	movzwl	(%rsi), %eax
	cmpw	$51, %ax
	je	.L2751
	cmpw	$53, %ax
	je	.L2751
	movq	56(%rsp), %r11
	xorl	%r8d, %r8d
	testl	%r8d, %r8d
	movq	8(%r11), %rdi
	je	.L2758
	movzwl	(%rdi), %edx
	cmpw	$51, %dx
	je	.L2758
	leal	-56(%rdx), %r14d
	cmpw	$1, %r14w
	jbe	.L2758
	cmpw	$46, %dx
	je	.L2758
	cmpw	$47, %dx
	je	.L2758
	cmpw	$49, %dx
	je	.L2758
	cmpw	$113, %dx
	je	.L2758
	cmpw	$63, %dx
	je	.L16613
.L2759:
	xorl	%eax, %eax
	call	copy_to_reg
	movq	%rax, %rdi
.L2758:
	cmpl	$-1, %r13d
	movl	$7, %eax
	cmovle	%eax, %r13d
	sarl	$3, %r13d
	movl	%r13d, %esi
	call	plus_constant_wide
	movl	%ebx, %esi
	movq	56(%rsp), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	xorl	%edx, %edx
	orb	$16, 3(%rax)
	movq	%rax, %r12
	testl	%edx, %edx
	movq	4856(%rsp), %rcx
	setne	%bl
	xorl	%r14d, %r14d
	movzbl	16(%rcx), %eax
	movzbl	%bl, %ebp
	cmpb	$44, %al
	je	.L16614
	cmpb	$48, %al
	je	.L16615
.L2770:
	testl	%ebp, %ebp
	je	.L2797
	cmpw	$55, (%r12)
	je	.L16616
.L2797:
	movzwl	(%r12), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L2805
	mov	%eax, %r11d
	jmp	*.L2814(,%r11,8)
	.section	.rodata
	.align 8
	.align 4
.L2814:
	.quad	.L2808
	.quad	.L2805
	.quad	.L2805
	.quad	.L2805
	.quad	.L2813
	.quad	.L2805
	.quad	.L2805
	.quad	.L2805
	.quad	.L2811
	.quad	.L2811
	.quad	.L2805
	.quad	.L2811
	.text
.L2808:
	movq	8(%r12), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %ebx
.L2807:
	testl	%ebx, %ebx
	je	.L2804
	movzbl	2(%r12), %eax
	cmpb	$16, %al
	je	.L2816
	testb	%al, %al
	jne	.L16617
.L2816:
	movzbl	2(%r12), %edx
	movq	4856(%rsp), %rdi
	xorl	%esi, %esi
.L15035:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L15293:
	movq	%rax, %r13
.L2823:
	movl	$1, %r14d
.L2769:
	cmpq	%r12, %r13
	je	.L581
	movq	4856(%rsp), %rbx
	cmpb	$0, 16(%rbx)
	je	.L581
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L2825
	cmpl	$55, %eax
	je	.L16618
.L2829:
	cmpl	$63, %eax
	je	.L2832
	cmpl	$66, %eax
	je	.L2832
.L2828:
	movzbl	2(%r13), %eax
	movzbl	2(%r12), %ecx
	cmpb	%cl, %al
	je	.L2835
	testb	%al, %al
	je	.L2835
	movq	4856(%rsp), %rax
	movq	8(%rax), %rdx
	movzbl	17(%rdx), %esi
	shrb	$6, %sil
	movl	%esi, %edx
	andl	$1, %edx
	testl	%r14d, %r14d
.L15411:
	je	.L2836
	movzbl	%cl, %edi
	movq	%r13, %rsi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%r12, %rdi
	movq	%rax, %rsi
	jmp	.L15253
.L2836:
	movq	%r12, %rdi
	movq	%r13, %rsi
	jmp	.L15250
	.p2align 6,,7
.L2835:
	cmpb	$16, %al
	je	.L16619
.L3091:
	movq	%r12, %rdi
	movq	%r13, %rsi
	jmp	.L15253
.L16619:
	movq	4856(%rsp), %rsi
	cmpb	$28, 16(%rsi)
	je	.L16620
	cmpb	$16, %al
	jne	.L3091
	movq	4856(%rsp), %rdi
	xorl	%eax, %eax
	call	expr_size
	movq	%rax, %r14
	movq	4856(%rsp), %rax
	movq	8(%rax), %rcx
	movl	48(%rcx), %r15d
	shrl	$3, %r15d
	cmpb	$16, 2(%r12)
	jne	.L15283
	cmpb	$16, 2(%r13)
	jne	.L15283
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L3094
	cmpl	$55, %eax
	je	.L16621
.L3098:
	cmpl	$63, %eax
	je	.L3101
	cmpl	$66, %eax
	je	.L3101
.L3097:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L3104
	cmpl	$55, %eax
	je	.L16622
.L3108:
	cmpl	$63, %eax
	je	.L3111
	cmpl	$66, %eax
	je	.L3111
.L3107:
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L3114
	cmpl	$55, %eax
	je	.L16623
.L3118:
	cmpl	$63, %eax
	je	.L3121
	cmpl	$66, %eax
	je	.L3121
.L3117:
	cmpw	$55, (%r12)
	jne	.L15283
	cmpw	$55, (%r13)
	jne	.L15283
	testq	%r14, %r14
	je	.L15283
	cmpw	$46, (%r14)
	je	.L16624
.L3127:
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	movl	%r15d, %edx
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 4768(%rsp)
	testl	%ebp, %ebp
	je	.L13934
.L3213:
	movslq	%ebp,%r10
	movq	%r10, %rax
	movq	%r10, 4760(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L3201
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L3205
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r14)
	ja	.L3201
.L3205:
	movslq	%edx,%rcx
	leaq	(%rcx,%rcx,4), %r15
	movq	%rcx, 4752(%rsp)
	salq	$4, %r15
	movq	insn_operand_predicate(%r15), %rdx
	testq	%rdx, %rdx
	jne	.L16625
.L3206:
	movq	insn_operand_predicate+8(%r15), %rdx
	testq	%rdx, %rdx
	jne	.L16626
.L3207:
	movq	insn_operand_predicate+24(%r15), %rdx
	testq	%rdx, %rdx
	je	.L3208
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	4768(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L3201
.L3208:
	call	get_last_insn
	movl	$1, %edx
	movq	%r14, %rsi
	movq	%rax, 4744(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r15), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16627
.L3209:
	movq	%rbx, %rdx
	movq	%r12, %rdi
	xorl	%eax, %eax
	movq	4752(%rsp), %rbx
	movq	%r13, %rsi
	movq	4768(%rsp), %rcx
	call	*insn_gen_function(,%rbx,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14920
	movq	4744(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L3201:
	movq	4760(%rsp), %rsi
	movl	mode_wider_mode(,%rsi,4), %ebp
	testl	%ebp, %ebp
	jne	.L3213
.L13934:
	movl	$4, %edi
	movq	%r14, %rsi
.L15252:
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%r13), %r14
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%r14, (%rsp)
	movq	8(%r12), %r8
	call	emit_library_call
	jmp	.L581
.L14920:
	call	emit_insn
	jmp	.L581
.L16627:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L3209
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L3209
.L16626:
	xorl	%eax, %eax
	movq	%r13, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L3201
	jmp	.L3207
.L16625:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L3201
	jmp	.L3206
.L16624:
	movl	8(%r14), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, %r15d
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	%r15d, %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L3141:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13925
.L3137:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L3137
.L13925:
	testl	%ecx, %ecx
	je	.L3130
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L3139
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L3139
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L3139:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L3141
.L3130:
	decl	%r9d
	jg	.L3127
	movq	8(%r12), %rbx
	movq	8(%r13), %rdi
	xorl	%ecx, %ecx
	movl	$0, 7300(%rsp)
	movq	%r12, 7248(%rsp)
	movq	%r13, 7272(%rsp)
	movl	%r10d, %r14d
	movl	$9, 1972(%rsp)
	movq	%rbx, 7256(%rsp)
	movq	%rdi, 7280(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L3144
	cmpw	$88, %dx
	je	.L3144
	cmpw	$87, %dx
	je	.L3144
.L3143:
	movl	%ecx, 7264(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r13d
	cmpw	$1, %r13w
	jbe	.L3146
	cmpw	$88, %dx
	je	.L3146
	cmpw	$87, %dx
	je	.L3146
.L3145:
	movl	%ecx, 7288(%rsp)
	movl	$0, 7292(%rsp)
	movl	$0, 7268(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L3148
	cmpw	$87, %ax
	je	.L3148
.L3147:
	testl	%edx, %edx
	movl	%edx, 7304(%rsp)
	je	.L3149
	movl	%r10d, 7300(%rsp)
.L3149:
	movl	7288(%rsp), %eax
	movl	%r10d, 7296(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L3151
	movl	7264(%rsp), %r12d
	testl	%r12d, %r12d
	jne	.L3150
.L3151:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, %r15d
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	%r15d, %ebp
.L3165:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13928
.L3161:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L3161
.L13928:
	testl	%ecx, %ecx
	je	.L3154
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L3163
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L3163
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L3163:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L3165
.L3154:
	cmpl	$2, %r9d
	jle	.L3150
	testl	%r10d, %r10d
	jne	.L3167
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L3168
	cmpw	$46, %dx
	je	.L3168
	cmpw	$47, %dx
	je	.L3168
	cmpw	$49, %dx
	je	.L3168
	cmpw	$113, %dx
	je	.L3168
.L3167:
	movl	7264(%rsp), %ecx
	testl	%ecx, %ecx
	jne	.L3150
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L3170
	cmpw	$46, %dx
	je	.L3170
	cmpw	$47, %dx
	je	.L3170
	cmpw	$49, %dx
	je	.L3170
	cmpw	$113, %dx
	je	.L3170
.L3150:
	cmpl	$8, %r15d
	movl	$8, %eax
	cmovge	%eax, %r15d
	cmpl	$1, 1972(%rsp)
	jle	.L3173
.L3195:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L13931
.L3180:
	movslq	%edx,%rbx
	movl	1972(%rsp), %eax
	salq	$2, %rbx
	cmpl	%eax, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L3180
.L13931:
	testl	%r12d, %r12d
	je	.L3173
	movslq	%r12d,%r13
	movq	%r13, %r9
	salq	$4, %r9
	addq	mov_optab(%rip), %r9
	movl	8(%r9), %edx
	cmpl	$210, %edx
	je	.L3182
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, %r15d
	jl	.L3182
	movslq	%edx,%rdi
	cmpl	%ebp, 7296(%rsp)
	leaq	7248(%rsp), %rbx
	movq	insn_gen_function(,%rdi,8), %r11
	movq	%r11, 4776(%rsp)
	jl	.L3182
	movl	7304(%rsp), %edx
.L3193:
	testl	%edx, %edx
	je	.L3187
	subl	%ebp, 52(%rbx)
.L3187:
	movl	16(%rbx), %edx
	testl	%edx, %edx
	je	.L3188
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15039:
	movl	40(%rbx), %r8d
	movq	%rax, %r14
	testl	%r8d, %r8d
	je	.L3190
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L3191:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*4776(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L3192
	addl	%ebp, 52(%rbx)
.L3192:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L3193
.L3182:
	movl	mode_size(,%r13,4), %ebp
	movl	%ebp, 1972(%rsp)
	decl	%ebp
	jg	.L3195
.L3173:
	movl	7296(%rsp), %r15d
	testl	%r15d, %r15d
.L15376:
	je	.L581
	jmp	.L15283
.L3190:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L3191
.L3188:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15039
.L3170:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7256(%rsp)
	jmp	.L3150
.L3168:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7280(%rsp)
	jmp	.L3167
.L3148:
	movl	$1, %edx
	jmp	.L3147
.L3146:
	movl	$1, %ecx
	jmp	.L3145
.L3144:
	movl	$1, %ecx
	jmp	.L3143
.L3121:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L3117
.L16623:
	movzbl	2(%r14), %edx
	cmpb	$16, %dl
	je	.L3115
	movq	8(%r14), %rbp
	cmpw	$59, (%rbp)
	je	.L16628
.L3115:
	cmpl	$55, %eax
	jne	.L3118
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L3117
.L16628:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r14)
	cmpq	$0, 16(%rbp)
	je	.L3117
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r14
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L3117
.L3114:
	cmpq	$0, 16(%r14)
	jne	.L3122
	movq	8(%r14), %r14
	jmp	.L3117
.L3122:
	movq	24(%r14), %rsi
	testq	%rsi, %rsi
	je	.L3123
	movq	%rsi, %r14
	jmp	.L3117
.L3123:
	movq	8(%r14), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L3117
.L3111:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L3107
.L16622:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L3105
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L16629
.L3105:
	cmpl	$55, %eax
	jne	.L3108
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L3107
.L16629:
	movq	8(%rbp), %r8
	movq	%r8, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L3107
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L3107
.L3104:
	cmpq	$0, 16(%r13)
	jne	.L3112
	movq	8(%r13), %r13
	jmp	.L3107
.L3112:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L3113
	movq	%rsi, %r13
	jmp	.L3107
.L3113:
	movq	8(%r13), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L3107
.L3101:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L3097
.L16621:
	jne	.L3098
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L3097
.L3094:
	cmpq	$0, 16(%r12)
	jne	.L3102
	movq	8(%r12), %r12
	jmp	.L3097
.L3102:
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	je	.L3103
	movq	%rdi, %r12
	jmp	.L3097
.L3103:
	movq	8(%r12), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L3097
.L16620:
	xorl	%eax, %eax
	movq	%rsi, %rdi
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, 2024(%rsp)
	je	.L16630
.L2840:
	movl	$8, %edi
	call	size_int
	movl	$57, %edi
	movq	4856(%rsp), %rsi
	movq	%rax, %rdx
	movq	8(%rsi), %rbx
	movq	32(%rbx), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	4856(%rsp), %rcx
	movq	%rax, %r15
	movl	32(%rcx), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%r15, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movq	$0, 1976(%rsp)
	movq	%rax, 2000(%rsp)
	movq	%rax, %r15
	movq	4856(%rsp), %rax
	movq	8(%rax), %rbp
	movl	48(%rbp), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r12)
	movl	%eax, 1996(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r13)
	jne	.L15283
	movq	%r12, 2008(%rsp)
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L2966
	cmpl	$55, %eax
	je	.L16631
	cmpl	$63, %eax
	je	.L2973
	cmpl	$66, %eax
	je	.L2973
.L2969:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L2976
	cmpl	$55, %eax
	je	.L16632
.L2980:
	cmpl	$63, %eax
	je	.L2983
	cmpl	$66, %eax
	je	.L2983
.L2979:
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L2986
	cmpl	$55, %eax
	je	.L16633
.L2990:
	cmpl	$63, %eax
	je	.L2993
	cmpl	$66, %eax
	je	.L2993
.L2989:
	movq	2008(%rsp), %rsi
	cmpw	$55, (%rsi)
	jne	.L15283
	cmpw	$55, (%r13)
	jne	.L15283
	cmpq	$0, 2000(%rsp)
	je	.L15283
	movq	2000(%rsp), %rax
	cmpw	$46, (%rax)
	je	.L16634
.L2999:
	movl	1996(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 4808(%rsp)
	testl	%ebp, %ebp
	je	.L13922
.L3085:
	movslq	%ebp,%r11
	movq	%r11, %rax
	movq	%r11, 4800(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L3073
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L3077
	movq	2000(%rsp), %r14
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r14)
	ja	.L3073
.L3077:
	movslq	%edx,%r10
	leaq	(%r10,%r10,4), %r14
	movq	%r10, 4792(%rsp)
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16635
.L3078:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16636
.L3079:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L3080
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	4808(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L3073
.L3080:
	call	get_last_insn
	movl	$1, %edx
	movq	2000(%rsp), %rsi
	movq	%rax, 4784(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16637
.L3081:
	movq	4792(%rsp), %rbp
	movq	2008(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r13, %rsi
	movq	%rbx, %rdx
	movq	4808(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14919
	movq	4784(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L3073:
	movq	4800(%rsp), %rdx
	movl	mode_wider_mode(,%rdx,4), %ebp
	testl	%ebp, %ebp
	jne	.L3085
.L13922:
	movq	2000(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%r13), %rbx
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	2008(%rsp), %r13
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%rbx, (%rsp)
	movq	8(%r13), %r8
	call	emit_library_call
.L3083:
	cmpw	$46, (%r15)
	je	.L16638
	movq	8(%r12), %rsi
	movl	$4, %edi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movl	$4, %edi
	movq	%r15, %rcx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	2024(%rsp), %rdx
	movl	$4, %edi
	movq	%r15, %rcx
	movq	%rax, %rbp
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 1976(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L3087:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L3088
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%rbp, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L3088:
	cmpq	$0, 1976(%rsp)
	je	.L581
	movq	1976(%rsp), %rdi
	jmp	.L15251
.L16638:
	movq	4856(%rsp), %r15
	movq	8(%r12), %rdi
	movl	32(%r15), %esi
	call	plus_constant_wide
	movq	2024(%rsp), %rdi
	movq	4856(%rsp), %r12
	movq	%rax, %rbp
	movl	32(%r12), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L3087
.L14919:
	call	emit_insn
	jmp	.L3083
.L16637:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L3081
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L3081
.L16636:
	xorl	%eax, %eax
	movq	%r13, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L3073
	jmp	.L3079
.L16635:
	xorl	%eax, %eax
	movq	2008(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L3073
	jmp	.L3078
.L16634:
	movl	8(%rax), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 1996(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	1996(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L3013:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13913
.L3009:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L3009
.L13913:
	testl	%ecx, %ecx
	je	.L3002
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L3011
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L3011
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L3011:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L3013
.L3002:
	decl	%r9d
	jg	.L2999
	movq	2008(%rsp), %r9
	movq	8(%r13), %rdi
	xorl	%ecx, %ecx
	movl	%r10d, %r14d
	movq	8(%r9), %rbx
	movq	%r13, 7272(%rsp)
	movq	%r9, 7248(%rsp)
	movl	$0, 7300(%rsp)
	movq	%rdi, 7280(%rsp)
	movl	$9, 1992(%rsp)
	movq	%rbx, 7256(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r13d
	cmpw	$1, %r13w
	jbe	.L3016
	cmpw	$88, %dx
	je	.L3016
	cmpw	$87, %dx
	je	.L3016
.L3015:
	movl	%ecx, 7264(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L3018
	cmpw	$88, %dx
	je	.L3018
	cmpw	$87, %dx
	je	.L3018
.L3017:
	movl	%ecx, 7288(%rsp)
	movl	$0, 7292(%rsp)
	movl	$0, 7268(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L3020
	cmpw	$87, %ax
	je	.L3020
.L3019:
	testl	%edx, %edx
	movl	%edx, 7304(%rsp)
	je	.L3021
	movl	%r10d, 7300(%rsp)
.L3021:
	movl	7288(%rsp), %eax
	movl	%r10d, 7296(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L3023
	movl	7264(%rsp), %eax
	testl	%eax, %eax
	jne	.L3022
.L3023:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 1996(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r13d
	cmovl	1996(%rsp), %ebp
.L3037:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13916
.L3033:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L3033
.L13916:
	testl	%ecx, %ecx
	je	.L3026
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L3035
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r13d, %eax
	cmpl	%eax, %ebp
	jl	.L3035
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L3035:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L3037
.L3026:
	cmpl	$2, %r9d
	jle	.L3022
	testl	%r10d, %r10d
	jne	.L3039
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L3040
	cmpw	$46, %dx
	je	.L3040
	cmpw	$47, %dx
	je	.L3040
	cmpw	$49, %dx
	je	.L3040
	cmpw	$113, %dx
	je	.L3040
.L3039:
	movl	7264(%rsp), %eax
	testl	%eax, %eax
	jne	.L3022
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L3042
	cmpw	$46, %dx
	je	.L3042
	cmpw	$47, %dx
	je	.L3042
	cmpw	$49, %dx
	je	.L3042
	cmpw	$113, %dx
	je	.L3042
.L3022:
	cmpl	$8, 1996(%rsp)
	movl	$8, %eax
	cmovl	1996(%rsp), %eax
	cmpl	$1, 1992(%rsp)
	movl	%eax, 1996(%rsp)
	jle	.L3045
.L3067:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r13d, %r13d
	testl	%edx, %edx
	je	.L13919
.L3052:
	movslq	%edx,%rbx
	movl	1992(%rsp), %eax
	salq	$2, %rbx
	cmpl	%eax, mode_size(%rbx)
	cmovl	%edx, %r13d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L3052
.L13919:
	testl	%r13d, %r13d
	je	.L3045
	movslq	%r13d,%r14
	movq	%r14, %rcx
	salq	$4, %rcx
	addq	mov_optab(%rip), %rcx
	movl	8(%rcx), %edx
	cmpl	$210, %edx
	je	.L3054
	movl	mode_size(,%r14,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 1996(%rsp)
	jl	.L3054
	movslq	%edx,%r8
	cmpl	%ebp, 7296(%rsp)
	leaq	7248(%rsp), %rbx
	movq	insn_gen_function(,%r8,8), %rsi
	movq	%rsi, 4816(%rsp)
	jl	.L3054
	movl	7304(%rsp), %edx
.L3065:
	testl	%edx, %edx
	je	.L3059
	subl	%ebp, 52(%rbx)
.L3059:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L3060
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15038:
	movq	%rax, 1984(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L3062
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L3063:
	movq	%rax, %rsi
	movq	1984(%rsp), %rdi
	xorl	%eax, %eax
	call	*4816(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L3064
	addl	%ebp, 52(%rbx)
.L3064:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L3065
.L3054:
	movl	mode_size(,%r14,4), %edi
	movl	%edi, 1992(%rsp)
	decl	%edi
	jg	.L3067
.L3045:
	movl	7296(%rsp), %r9d
	testl	%r9d, %r9d
	je	.L3083
	jmp	.L15283
.L3062:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L3063
.L3060:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15038
.L3042:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7256(%rsp)
	jmp	.L3022
.L3040:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7280(%rsp)
	jmp	.L3039
.L3020:
	movl	$1, %edx
	jmp	.L3019
.L3018:
	movl	$1, %ecx
	jmp	.L3017
.L3016:
	movl	$1, %ecx
	jmp	.L3015
.L2993:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L2989
.L16633:
	movzbl	2(%r15), %edx
	cmpb	$16, %dl
	je	.L2987
	movq	8(%r15), %rbp
	cmpw	$59, (%rbp)
	je	.L16639
.L2987:
	cmpl	$55, %eax
	jne	.L2990
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L2989
.L16639:
	movq	8(%rbp), %r10
	movq	%r10, 8(%r15)
	cmpq	$0, 16(%rbp)
	je	.L2989
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r15, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r14, 2000(%rsp)
	jmp	.L2989
.L2986:
	cmpq	$0, 16(%r15)
	jne	.L2994
	movq	8(%r15), %rbp
	movq	%rbp, 2000(%rsp)
	jmp	.L2989
.L2994:
	movq	24(%r15), %rax
	testq	%rax, %rax
	movq	%rax, 2000(%rsp)
	jne	.L2989
	movq	8(%r15), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %rcx
	movq	%rcx, 2000(%rsp)
	jmp	.L2989
.L2983:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L2979
.L16632:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L2977
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L16640
.L2977:
	cmpl	$55, %eax
	jne	.L2980
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L2979
.L16640:
	movq	8(%rbp), %r14
	movq	%r14, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L2979
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L2979
.L2976:
	cmpq	$0, 16(%r13)
	jne	.L2984
	movq	8(%r13), %r13
	jmp	.L2979
.L2984:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L2985
	movq	%rsi, %r13
	jmp	.L2979
.L2985:
	movq	8(%r13), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L2979
.L2973:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L2969
.L16631:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L2969
.L2966:
	cmpq	$0, 16(%r12)
	jne	.L2974
	movq	8(%r12), %r9
	movq	%r9, 2008(%rsp)
	jmp	.L2969
.L2974:
	movq	24(%r12), %r11
	testq	%r11, %r11
	movq	%r11, 2008(%rsp)
	jne	.L2969
	movq	8(%r12), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rdi
	movq	%rdi, 2008(%rsp)
	jmp	.L2969
.L16630:
	movq	4856(%rsp), %rdi
	movq	2024(%rsp), %r14
	movl	32(%rdi), %eax
	cmpl	%eax, 8(%r14)
	jge	.L2840
	movq	8(%rdi), %r9
	movl	48(%r9), %r15d
	shrl	$3, %r15d
	cmpb	$16, 2(%r12)
	jne	.L15283
	cmpb	$16, 2(%r13)
	jne	.L15283
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L2843
	cmpl	$55, %eax
	je	.L16641
.L2847:
	cmpl	$63, %eax
	je	.L2850
	cmpl	$66, %eax
	je	.L2850
.L2846:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L2853
	cmpl	$55, %eax
	je	.L16642
.L2857:
	cmpl	$63, %eax
	je	.L2860
	cmpl	$66, %eax
	je	.L2860
.L2856:
	movq	2024(%rsp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$59, %eax
	je	.L2863
	cmpl	$55, %eax
	je	.L16643
.L2867:
	cmpl	$63, %eax
	je	.L2870
	cmpl	$66, %eax
	je	.L2870
.L2866:
	cmpw	$55, (%r12)
	jne	.L15283
	cmpw	$55, (%r13)
	jne	.L15283
	cmpq	$0, 2024(%rsp)
	je	.L15283
	movq	2024(%rsp), %rbx
	cmpw	$46, (%rbx)
	je	.L16644
.L2876:
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	movl	%r15d, %edx
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 4840(%rsp)
	testl	%ebp, %ebp
	je	.L13910
.L2962:
	movslq	%ebp,%r15
	movq	%r15, %rax
	movq	%r15, 4832(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L2950
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L2954
	movq	2024(%rsp), %r14
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r14)
	ja	.L2950
.L2954:
	movslq	%edx,%r15
	leaq	(%r15,%r15,4), %r14
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16645
.L2955:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16646
.L2956:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L2957
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	4840(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L2950
.L2957:
	call	get_last_insn
	movl	$1, %edx
	movq	2024(%rsp), %rsi
	movq	%rax, 4824(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16647
.L2958:
	movq	%r12, %rdi
	xorl	%eax, %eax
	movq	%r13, %rsi
	movq	%rbx, %rdx
	movq	4840(%rsp), %rcx
	call	*insn_gen_function(,%r15,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14920
	movq	4824(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L2950:
	movq	4832(%rsp), %r10
	movl	mode_wider_mode(,%r10,4), %ebp
	testl	%ebp, %ebp
	jne	.L2962
.L13910:
	movq	2024(%rsp), %rsi
	movl	$4, %edi
	jmp	.L15252
.L16647:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L2958
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L2958
.L16646:
	xorl	%eax, %eax
	movq	%r13, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L2950
	jmp	.L2956
.L16645:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L2950
	jmp	.L2955
.L16644:
	movl	8(%rbx), %r10d
	xorl	%r9d, %r9d
	movl	$9, %r8d
	movl	$8, %ebx
	cmpl	$8, %r15d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	%r15d, %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L2890:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13901
.L2886:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L2886
.L13901:
	testl	%ecx, %ecx
	je	.L2879
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L2888
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L2888
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L2888:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L2890
.L2879:
	decl	%r9d
	jg	.L2876
	movq	8(%r12), %rbx
	movq	8(%r13), %rdi
	xorl	%ecx, %ecx
	movq	%r12, 7312(%rsp)
	movl	$0, 7364(%rsp)
	movq	%r13, 7336(%rsp)
	movl	%r10d, %r14d
	movl	$9, 2020(%rsp)
	movq	%rbx, 7320(%rsp)
	movq	%rdi, 7344(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L2893
	cmpw	$88, %dx
	je	.L2893
	cmpw	$87, %dx
	je	.L2893
.L2892:
	movl	%ecx, 7328(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r13d
	cmpw	$1, %r13w
	jbe	.L2895
	cmpw	$88, %dx
	je	.L2895
	cmpw	$87, %dx
	je	.L2895
.L2894:
	movl	%ecx, 7352(%rsp)
	movl	$0, 7356(%rsp)
	movl	$0, 7332(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L2897
	cmpw	$87, %ax
	je	.L2897
.L2896:
	testl	%edx, %edx
	movl	%edx, 7368(%rsp)
	je	.L2898
	movl	%r10d, 7364(%rsp)
.L2898:
	movl	7352(%rsp), %eax
	movl	%r10d, 7360(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L2900
	movl	7328(%rsp), %ebp
	testl	%ebp, %ebp
	jne	.L2899
.L2900:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, %r15d
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	%r15d, %ebp
.L2914:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13904
.L2910:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L2910
.L13904:
	testl	%ecx, %ecx
	je	.L2903
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L2912
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L2912
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L2912:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L2914
.L2903:
	cmpl	$2, %r9d
	jle	.L2899
	testl	%r10d, %r10d
	jne	.L2916
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L2917
	cmpw	$46, %dx
	je	.L2917
	cmpw	$47, %dx
	je	.L2917
	cmpw	$49, %dx
	je	.L2917
	cmpw	$113, %dx
	je	.L2917
.L2916:
	movl	7328(%rsp), %eax
	testl	%eax, %eax
	jne	.L2899
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L2919
	cmpw	$46, %dx
	je	.L2919
	cmpw	$47, %dx
	je	.L2919
	cmpw	$49, %dx
	je	.L2919
	cmpw	$113, %dx
	je	.L2919
.L2899:
	cmpl	$8, %r15d
	movl	$8, %eax
	cmovge	%eax, %r15d
	cmpl	$1, 2020(%rsp)
	jle	.L2922
.L2944:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L13907
.L2929:
	movslq	%edx,%rbx
	movl	2020(%rsp), %esi
	salq	$2, %rbx
	cmpl	%esi, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L2929
.L13907:
	testl	%r12d, %r12d
	je	.L2922
	movslq	%r12d,%r13
	movq	%r13, %r9
	salq	$4, %r9
	addq	mov_optab(%rip), %r9
	movl	8(%r9), %edx
	cmpl	$210, %edx
	je	.L2931
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, %r15d
	jl	.L2931
	movslq	%edx,%rdi
	cmpl	%ebp, 7360(%rsp)
	leaq	7312(%rsp), %rbx
	movq	insn_gen_function(,%rdi,8), %r11
	movq	%r11, 4848(%rsp)
	jl	.L2931
	movl	7368(%rsp), %edx
.L2942:
	testl	%edx, %edx
	je	.L2936
	subl	%ebp, 52(%rbx)
.L2936:
	movl	16(%rbx), %r8d
	testl	%r8d, %r8d
	je	.L2937
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15037:
	movq	%rax, %r14
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L2939
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L2940:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*4848(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L2941
	addl	%ebp, 52(%rbx)
.L2941:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L2942
.L2931:
	movl	mode_size(,%r13,4), %edx
	movl	%edx, 2020(%rsp)
	decl	%edx
	jg	.L2944
.L2922:
	movl	7360(%rsp), %eax
	testl	%eax, %eax
	jmp	.L15376
.L2939:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L2940
.L2937:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15037
.L2919:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7320(%rsp)
	jmp	.L2899
.L2917:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7344(%rsp)
	jmp	.L2916
.L2897:
	movl	$1, %edx
	jmp	.L2896
.L2895:
	movl	$1, %ecx
	jmp	.L2894
.L2893:
	movl	$1, %ecx
	jmp	.L2892
.L2870:
	movq	2024(%rsp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	2024(%rsp), %rcx
	movq	%rax, 8(%rcx)
	movq	2024(%rsp), %rbx
	movq	16(%rbx), %rdi
	call	protect_from_queue
	movq	2024(%rsp), %r10
	movq	%rax, 16(%r10)
	jmp	.L2866
.L16643:
	movq	%rdx, %rcx
	movzbl	2(%rdx), %edx
	cmpb	$16, %dl
	je	.L2864
	movq	8(%rcx), %rbp
	cmpw	$59, (%rbp)
	je	.L16648
.L2864:
	cmpl	$55, %eax
	jne	.L2867
	movq	2024(%rsp), %rbp
	xorl	%esi, %esi
	movq	8(%rbp), %rdi
	call	protect_from_queue
	movq	%rax, 8(%rbp)
	jmp	.L2866
.L16648:
	movq	8(%rbp), %r11
	movq	%r11, 8(%rcx)
	cmpq	$0, 16(%rbp)
	je	.L2866
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	2024(%rsp), %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L15036:
	movq	%rbx, 2024(%rsp)
	jmp	.L2866
.L2863:
	movq	2024(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L2871
	movq	8(%rcx), %rbx
	jmp	.L15036
.L2871:
	movq	2024(%rsp), %rax
	movq	24(%rax), %rsi
	testq	%rsi, %rsi
	je	.L2872
	movq	%rsi, 2024(%rsp)
	jmp	.L2866
.L2872:
	movq	2024(%rsp), %rdi
	movq	8(%rdi), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	2024(%rsp), %r8
	movq	%rax, %rdi
	movq	8(%r8), %rsi
	movq	%rax, 24(%r8)
	call	gen_move_insn
	movq	2024(%rsp), %r14
	movq	%rax, %rdi
	movq	16(%r14), %rsi
	call	emit_insn_before
	movq	2024(%rsp), %r9
	movq	24(%r9), %rsi
	movq	%rsi, 2024(%rsp)
	jmp	.L2866
.L2860:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L2856
.L16642:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L2854
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L16649
.L2854:
	cmpl	$55, %eax
	jne	.L2857
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L2856
.L16649:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L2856
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L2856
.L2853:
	cmpq	$0, 16(%r13)
	jne	.L2861
	movq	8(%r13), %r13
	jmp	.L2856
.L2861:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L2862
	movq	%rsi, %r13
	jmp	.L2856
.L2862:
	movq	8(%r13), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L2856
.L2850:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L2846
.L16641:
	jne	.L2847
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L2846
.L2843:
	cmpq	$0, 16(%r12)
	jne	.L2851
	movq	8(%r12), %r12
	jmp	.L2846
.L2851:
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	je	.L2852
	movq	%rdi, %r12
	jmp	.L2846
.L2852:
	movq	8(%r12), %rbp
	movzbl	2(%rbp), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L2846
.L2832:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L2828
.L16618:
	jne	.L2829
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L2828
.L2825:
	cmpq	$0, 16(%r12)
	jne	.L2833
	movq	8(%r12), %r12
	jmp	.L2828
.L2833:
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	je	.L2834
	movq	%rdi, %r12
	jmp	.L2828
.L2834:
	movq	8(%r12), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L2828
.L16617:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	4856(%rsp), %rdi
	movzbl	2(%r12), %edx
	movq	%rax, %rsi
	jmp	.L15035
	.p2align 6,,7
.L2804:
	movl	(%r12), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L16650
	movzbl	2(%r12), %edx
	movq	4856(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	%r12, %rsi
	call	expand_expr
	cmpw	$51, (%r12)
	movq	%rax, %r13
	je	.L16651
.L2822:
	movzwl	(%r13), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L2823
	cmpw	$46, %dx
	je	.L2823
	cmpw	$47, %dx
	je	.L2823
	cmpw	$49, %dx
	je	.L2823
	cmpw	$113, %dx
	jne	.L2769
	jmp	.L2823
.L16651:
	cmpl	$63, 8(%r12)
	jle	.L2769
	jmp	.L2822
.L16650:
	movq	4856(%rsp), %rdi
.L15323:
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	8(%r12), %rdi
	movzbl	3(%r12), %edx
	movq	%rax, %rsi
	shrb	$2, %dl
	andl	$1, %edx
	jmp	.L15250
.L2813:
	movl	$1, %ebx
	jmp	.L2807
	.p2align 6,,7
.L2805:
	xorl	%ebx, %ebx
	jmp	.L2807
.L2811:
	movq	8(%r12), %rdi
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L2813
	movq	16(%r12), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L2807
	jmp	.L2813
.L16616:
	movzbl	2(%r12), %eax
	cmpb	$16, %al
	je	.L2797
	movl	cse_not_expected(%rip), %r8d
	movq	4856(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	%al, %edx
	testl	%r8d, %r8d
	cmove	%r12, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	call	expand_expr
	movq	%rax, %r13
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L2823
	testb	%al, %al
	je	.L2823
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L15293
	.p2align 6,,7
.L16615:
	cmpb	$16, 2(%r12)
	jne	.L2770
	call	gen_label_rtx
	movq	%rax, %r13
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r14
	testq	%rbx, %rbx
	jne	.L2774
.L13894:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L2776
	cmpl	$55, %eax
	je	.L16652
.L2780:
	cmpl	$63, %eax
	je	.L2783
	cmpl	$66, %eax
	je	.L2783
.L2779:
	movq	4856(%rsp), %r15
	xorl	%eax, %eax
	movq	%r13, %rsi
	incl	inhibit_defer_pop(%rip)
	movq	32(%r15), %rdi
	call	jumpifnot
	movq	4856(%rsp), %rax
	movq	%r12, %rsi
	movl	%ebp, %edx
	movq	40(%rax), %rdi
	xorl	%eax, %eax
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L2789
.L13896:
	movq	%r14, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r13, %rdi
	call	emit_label
	xorl	%eax, %eax
	movl	%ebp, %edx
	movq	4856(%rsp), %r9
	movq	%r12, %rsi
	movq	48(%r9), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L2794
.L13898:
	movq	%r14, %rdi
	jmp	.L15254
.L2794:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rbp
	movq	%rax, 16(%rbx)
	testq	%rbp, %rbp
	movq	%rbp, pending_chain(%rip)
	movq	%rbp, %rbx
	jne	.L2794
	jmp	.L13898
.L2789:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdi
	movq	%rax, 16(%rbx)
	testq	%rdi, %rdi
	movq	%rdi, pending_chain(%rip)
	movq	%rdi, %rbx
	jne	.L2789
	jmp	.L13896
.L2783:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L2779
.L16652:
	jne	.L2780
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L2779
.L2776:
	cmpq	$0, 16(%r12)
	jne	.L2784
	movq	8(%r12), %r12
	jmp	.L2779
.L2784:
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	je	.L2785
	movq	%rdi, %r12
	jmp	.L2779
.L2785:
	movq	8(%r12), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L2779
.L2774:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rsi
	movq	%rax, 16(%rbx)
	testq	%rsi, %rsi
	movq	%rsi, pending_chain(%rip)
	movq	%rsi, %rbx
	jne	.L2774
	jmp	.L13894
	.p2align 6,,7
.L16614:
	movq	32(%rcx), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L2766
.L13892:
	movq	4856(%rsp), %rcx
	movq	%r12, %rsi
	movl	%ebp, %edx
	movq	40(%rcx), %rdi
.L15255:
	xorl	%eax, %eax
	call	store_expr
	jmp	.L581
.L2766:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r13
	movq	%rax, 16(%rbx)
	testq	%r13, %r13
	movq	%r13, pending_chain(%rip)
	movq	%r13, %rbx
	jne	.L2766
	jmp	.L13892
.L16613:
	movq	16(%rdi), %r10
	cmpw	$46, (%r10)
	jne	.L2759
	movq	8(%rdi), %rax
	cmpq	virtual_incoming_args_rtx(%rip), %rax
	je	.L2758
	cmpq	virtual_stack_vars_rtx(%rip), %rax
	jne	.L2759
	jmp	.L2758
	.p2align 6,,7
.L2751:
	movq	4856(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movl	$1, %r9d
	movl	%ebx, %ecx
	movq	56(%rsp), %rdi
	xorl	%edx, %edx
	movq	%rax, %r8
	movq	%rax, %r13
	movl	%ebp, %esi
	movl	%r14d, (%rsp)
	xorl	%eax, %eax
	call	store_bit_field
	xorl	%edx, %edx
	testl	%edx, %edx
	je	.L581
	testl	%r15d, %r15d
	je	.L2754
	movq	56(%rsp), %rdi
	movl	(%rdi), %eax
	andl	$134283263, %eax
	cmpl	$134217783, %eax
	je	.L2754
	xorl	%eax, %eax
	testl	%eax, %eax
	je	.L2755
	xorl	%esi, %esi
	movl	%r15d, %edx
	movl	$46, %edi
	call	gen_rtx
	xorl	%edx, %edx
	movq	%r13, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	expand_and
	jmp	.L581
.L2755:
	movzbl	2(%r13), %r12d
	movl	$0, %r9d
	testl	%r12d, %r12d
	cmove	%r9d, %r12d
	xorl	%esi, %esi
	movslq	%r12d,%r15
	movl	mode_size(,%r15,4), %edi
	sall	$3, %edi
	subl	%ebp, %edi
	call	build_int_2_wide
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	%rax, %rbp
	movl	%r12d, %esi
	movq	%r13, %rdx
	movq	%rax, %rcx
	movl	$77, %edi
	xorl	%eax, %eax
	call	expand_shift
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movl	$78, %edi
	movl	%r12d, %esi
	movq	%rbp, %rcx
	xorl	%eax, %eax
	call	expand_shift
	jmp	.L581
.L2754:
	movq	56(%rsp), %rdi
	movl	%ebp, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	xorl	%eax, %eax
	movl	$0, (%rsp)
	movl	$1, 8(%rsp)
	movl	%r14d, 16(%rsp)
	call	extract_bit_field
	jmp	.L581
.L16612:
	movq	56(%rsp), %r10
	movzwl	(%r10), %eax
	cmpw	$51, %ax
	je	.L2747
	cmpw	$53, %ax
	jne	.L2746
.L2747:
	movq	56(%rsp), %rax
	xorl	%edx, %edx
	movzbl	2(%rax), %edi
	movslq	%edi,%rcx
	movl	mode_size(,%rcx,4), %esi
	call	assign_stack_temp
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	copy_rtx
	movq	56(%rsp), %rdx
	movb	$16, 2(%rax)
	movq	%rax, %r12
	movzbq	2(%rdx), %r13
	movl	mode_size(,%r13,4), %eax
	sall	$3, %eax
	cmpl	%eax, %ebp
	je	.L2748
	movq	%rbx, %rdi
	movq	%rdx, %rsi
	call	emit_move_insn
.L2748:
	movq	4856(%rsp), %r8
	movq	%r12, %rdi
	movl	%ebp, %esi
	xorl	%edx, %edx
	movl	$16, %ecx
	xorl	%r9d, %r9d
	xorl	%eax, %eax
	movl	$0, (%rsp)
	movl	$1, 8(%rsp)
	movl	%r14d, 16(%rsp)
	call	store_field
	movq	%rbx, %rsi
	movq	56(%rsp), %rdi
	jmp	.L15253
.L16611:
	movq	32(%r15), %r14
	movq	56(%rsp), %rdi
	xorl	%edx, %edx
	xorl	%eax, %eax
	xorl	%ebp, %ebp
	movq	%r14, 4976(%rsp)
	movzbl	44(%rbx), %esi
	call	change_address
	movq	4976(%rsp), %r15
	movq	%rax, %r12
	movzbl	16(%r15), %eax
	cmpb	$44, %al
	je	.L16653
	cmpb	$48, %al
	je	.L16654
.L2297:
	xorl	%r13d, %r13d
	testl	%r13d, %r13d
	je	.L2324
	cmpw	$55, (%r12)
	je	.L16655
.L2324:
	movzwl	(%r12), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L2332
	mov	%eax, %r10d
	jmp	*.L2341(,%r10,8)
	.section	.rodata
	.align 8
	.align 4
.L2341:
	.quad	.L2335
	.quad	.L2332
	.quad	.L2332
	.quad	.L2332
	.quad	.L2340
	.quad	.L2332
	.quad	.L2332
	.quad	.L2332
	.quad	.L2338
	.quad	.L2338
	.quad	.L2332
	.quad	.L2338
	.text
.L2335:
	movq	8(%r12), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %ebx
.L2334:
	testl	%ebx, %ebx
	je	.L2331
	movzbl	2(%r12), %eax
	cmpb	$16, %al
	je	.L2343
	testb	%al, %al
	jne	.L16656
.L2343:
	movzbl	2(%r12), %edx
	movq	4976(%rsp), %rdi
	xorl	%esi, %esi
.L15030:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L15292:
	movq	%rax, %r13
.L2350:
	movl	$1, %ebp
.L2296:
	cmpq	%r12, %r13
	je	.L581
	movq	4976(%rsp), %r9
	cmpb	$0, 16(%r9)
	je	.L581
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L2352
	cmpl	$55, %eax
	je	.L16657
.L2356:
	cmpl	$63, %eax
	je	.L2359
	cmpl	$66, %eax
	je	.L2359
.L2355:
	movzbl	2(%r13), %eax
	movzbl	2(%r12), %ecx
	cmpb	%cl, %al
	je	.L2362
	testb	%al, %al
	je	.L2362
	movq	4976(%rsp), %r11
	movq	8(%r11), %rdx
	movzbl	17(%rdx), %r15d
	shrb	$6, %r15b
	movl	%r15d, %edx
	andl	$1, %edx
	testl	%ebp, %ebp
	jmp	.L15411
	.p2align 6,,7
.L2362:
	cmpb	$16, %al
	jne	.L3091
	movq	4976(%rsp), %rdi
	cmpb	$28, 16(%rdi)
	je	.L16658
	cmpb	$16, %al
	jne	.L3091
	movq	4976(%rsp), %rdi
	xorl	%eax, %eax
	call	expr_size
	movq	%rax, %r14
	movq	4976(%rsp), %rax
	movq	8(%rax), %rbx
	movl	48(%rbx), %r15d
	shrl	$3, %r15d
	cmpb	$16, 2(%r12)
	jne	.L15283
	cmpb	$16, 2(%r13)
	jne	.L15283
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L2621
	cmpl	$55, %eax
	je	.L16659
.L2625:
	cmpl	$63, %eax
	je	.L2628
	cmpl	$66, %eax
	je	.L2628
.L2624:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L2631
	cmpl	$55, %eax
	je	.L16660
.L2635:
	cmpl	$63, %eax
	je	.L2638
	cmpl	$66, %eax
	je	.L2638
.L2634:
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L2641
	cmpl	$55, %eax
	je	.L16661
.L2645:
	cmpl	$63, %eax
	je	.L2648
	cmpl	$66, %eax
	je	.L2648
.L2644:
	cmpw	$55, (%r12)
	jne	.L15283
	cmpw	$55, (%r13)
	jne	.L15283
	testq	%r14, %r14
	je	.L15283
	cmpw	$46, (%r14)
	je	.L16662
.L2654:
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	movl	%r15d, %edx
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 4888(%rsp)
	testl	%ebp, %ebp
	je	.L13934
.L2740:
	movslq	%ebp,%r9
	movq	%r9, %rax
	movq	%r9, 4880(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L2728
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L2732
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r14)
	ja	.L2728
.L2732:
	movslq	%edx,%r8
	leaq	(%r8,%r8,4), %r15
	movq	%r8, 4872(%rsp)
	salq	$4, %r15
	movq	insn_operand_predicate(%r15), %rdx
	testq	%rdx, %rdx
	jne	.L16663
.L2733:
	movq	insn_operand_predicate+8(%r15), %rdx
	testq	%rdx, %rdx
	jne	.L16664
.L2734:
	movq	insn_operand_predicate+24(%r15), %rdx
	testq	%rdx, %rdx
	je	.L2735
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	4888(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L2728
.L2735:
	call	get_last_insn
	movl	$1, %edx
	movq	%r14, %rsi
	movq	%rax, 4864(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r15), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16665
.L2736:
	movq	4872(%rsp), %r11
	movq	%r12, %rdi
	xorl	%eax, %eax
	movq	%r13, %rsi
	movq	%rbx, %rdx
	movq	4888(%rsp), %rcx
	call	*insn_gen_function(,%r11,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14920
	movq	4864(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L2728:
	movq	4880(%rsp), %rbx
	movl	mode_wider_mode(,%rbx,4), %ebp
	testl	%ebp, %ebp
	jne	.L2740
	jmp	.L13934
.L16665:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L2736
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L2736
.L16664:
	xorl	%eax, %eax
	movq	%r13, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L2728
	jmp	.L2734
.L16663:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L2728
	jmp	.L2733
.L16662:
	movl	8(%r14), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, %r15d
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	%r15d, %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L2668:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13881
.L2664:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L2664
.L13881:
	testl	%ecx, %ecx
	je	.L2657
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L2666
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L2666
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L2666:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L2668
.L2657:
	decl	%r9d
	jg	.L2654
	movq	8(%r12), %rbx
	movq	8(%r13), %rdi
	xorl	%ecx, %ecx
	movq	%r13, 7464(%rsp)
	movl	$0, 7492(%rsp)
	movq	%r12, 7440(%rsp)
	movl	%r10d, %r14d
	movl	$9, 2036(%rsp)
	movq	%rbx, 7448(%rsp)
	movq	%rdi, 7472(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r13d
	cmpw	$1, %r13w
	jbe	.L2671
	cmpw	$88, %dx
	je	.L2671
	cmpw	$87, %dx
	je	.L2671
.L2670:
	movl	%ecx, 7456(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L2673
	cmpw	$88, %dx
	je	.L2673
	cmpw	$87, %dx
	je	.L2673
.L2672:
	movl	%ecx, 7480(%rsp)
	movl	$0, 7484(%rsp)
	movl	$0, 7460(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L2675
	cmpw	$87, %ax
	je	.L2675
.L2674:
	testl	%edx, %edx
	movl	%edx, 7496(%rsp)
	je	.L2676
	movl	%r10d, 7492(%rsp)
.L2676:
	movl	%r10d, 7488(%rsp)
	movl	7480(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L2678
	movl	7456(%rsp), %eax
	testl	%eax, %eax
	jne	.L2677
.L2678:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, %r15d
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	%r15d, %ebp
.L2692:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13884
.L2688:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L2688
.L13884:
	testl	%ecx, %ecx
	je	.L2681
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L2690
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L2690
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L2690:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L2692
.L2681:
	cmpl	$2, %r9d
	jle	.L2677
	testl	%r10d, %r10d
	jne	.L2694
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L2695
	cmpw	$46, %dx
	je	.L2695
	cmpw	$47, %dx
	je	.L2695
	cmpw	$49, %dx
	je	.L2695
	cmpw	$113, %dx
	je	.L2695
.L2694:
	movl	7456(%rsp), %eax
	testl	%eax, %eax
	jne	.L2677
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L2697
	cmpw	$46, %dx
	je	.L2697
	cmpw	$47, %dx
	je	.L2697
	cmpw	$49, %dx
	je	.L2697
	cmpw	$113, %dx
	je	.L2697
.L2677:
	cmpl	$8, %r15d
	movl	$8, %eax
	cmovge	%eax, %r15d
	cmpl	$1, 2036(%rsp)
	jle	.L2700
.L2722:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L13887
.L2707:
	movslq	%edx,%rbx
	movl	2036(%rsp), %eax
	salq	$2, %rbx
	cmpl	%eax, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L2707
.L13887:
	testl	%r12d, %r12d
	je	.L2700
	movslq	%r12d,%r13
	movq	%r13, %r10
	salq	$4, %r10
	addq	mov_optab(%rip), %r10
	movl	8(%r10), %edx
	cmpl	$210, %edx
	je	.L2709
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, %r15d
	jl	.L2709
	movslq	%edx,%rcx
	cmpl	%ebp, 7488(%rsp)
	leaq	7440(%rsp), %rbx
	movq	insn_gen_function(,%rcx,8), %rsi
	movq	%rsi, 4896(%rsp)
	jl	.L2709
	movl	7496(%rsp), %edx
.L2720:
	testl	%edx, %edx
	je	.L2714
	subl	%ebp, 52(%rbx)
.L2714:
	movl	16(%rbx), %edx
	testl	%edx, %edx
	je	.L2715
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15034:
	movl	40(%rbx), %edi
	movq	%rax, %r14
	testl	%edi, %edi
	je	.L2717
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L2718:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*4896(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L2719
	addl	%ebp, 52(%rbx)
.L2719:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L2720
.L2709:
	movl	mode_size(,%r13,4), %r12d
	movl	%r12d, 2036(%rsp)
	decl	%r12d
	jg	.L2722
.L2700:
	movl	7488(%rsp), %r15d
	testl	%r15d, %r15d
	jmp	.L15376
.L2717:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L2718
.L2715:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15034
.L2697:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7448(%rsp)
	jmp	.L2677
.L2695:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7472(%rsp)
	jmp	.L2694
.L2675:
	movl	$1, %edx
	jmp	.L2674
.L2673:
	movl	$1, %ecx
	jmp	.L2672
.L2671:
	movl	$1, %ecx
	jmp	.L2670
.L2648:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L2644
.L16661:
	movzbl	2(%r14), %edx
	cmpb	$16, %dl
	je	.L2642
	movq	8(%r14), %rbp
	cmpw	$59, (%rbp)
	je	.L16666
.L2642:
	cmpl	$55, %eax
	jne	.L2645
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L2644
.L16666:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r14)
	cmpq	$0, 16(%rbp)
	je	.L2644
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r14
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L2644
.L2641:
	cmpq	$0, 16(%r14)
	jne	.L2649
	movq	8(%r14), %r14
	jmp	.L2644
.L2649:
	movq	24(%r14), %rsi
	testq	%rsi, %rsi
	je	.L2650
	movq	%rsi, %r14
	jmp	.L2644
.L2650:
	movq	8(%r14), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L2644
.L2638:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L2634
.L16660:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L2632
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L16667
.L2632:
	cmpl	$55, %eax
	jne	.L2635
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L2634
.L16667:
	movq	8(%rbp), %rsi
	movq	%rsi, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L2634
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L2634
.L2631:
	cmpq	$0, 16(%r13)
	jne	.L2639
	movq	8(%r13), %r13
	jmp	.L2634
.L2639:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L2640
	movq	%rsi, %r13
	jmp	.L2634
.L2640:
	movq	8(%r13), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L2634
.L2628:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L2624
.L16659:
	jne	.L2625
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L2624
.L2621:
	cmpq	$0, 16(%r12)
	jne	.L2629
	movq	8(%r12), %r12
	jmp	.L2624
.L2629:
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	je	.L2630
	movq	%rdi, %r12
	jmp	.L2624
.L2630:
	movq	8(%r12), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L2624
.L16658:
	xorl	%eax, %eax
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, 2088(%rsp)
	je	.L16668
.L2367:
	movl	$8, %edi
	call	size_int
	movl	$57, %edi
	movq	4976(%rsp), %rsi
	movq	%rax, %rdx
	movq	8(%rsi), %r10
	movq	32(%r10), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	4976(%rsp), %rbx
	movq	%rax, %rbp
	movl	32(%rbx), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%rbp, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movq	$0, 2040(%rsp)
	movq	%rax, 2064(%rsp)
	movq	%rax, %r15
	movq	4976(%rsp), %rax
	movq	8(%rax), %r11
	movl	48(%r11), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r12)
	movl	%eax, 2060(%rsp)
	jne	.L15283
	cmpb	$16, 2(%r13)
	jne	.L15283
	movq	%r12, 2072(%rsp)
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L2493
	cmpl	$55, %eax
	je	.L16669
	cmpl	$63, %eax
	je	.L2500
	cmpl	$66, %eax
	je	.L2500
.L2496:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L2503
	cmpl	$55, %eax
	je	.L16670
.L2507:
	cmpl	$63, %eax
	je	.L2510
	cmpl	$66, %eax
	je	.L2510
.L2506:
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L2513
	cmpl	$55, %eax
	je	.L16671
.L2517:
	cmpl	$63, %eax
	je	.L2520
	cmpl	$66, %eax
	je	.L2520
.L2516:
	movq	2072(%rsp), %rsi
	cmpw	$55, (%rsi)
	jne	.L15283
	cmpw	$55, (%r13)
	jne	.L15283
	cmpq	$0, 2064(%rsp)
	je	.L15283
	movq	2064(%rsp), %rax
	cmpw	$46, (%rax)
	je	.L16672
.L2526:
	movl	2060(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 4928(%rsp)
	testl	%ebp, %ebp
	je	.L13878
.L2612:
	movslq	%ebp,%rcx
	movq	%rcx, %rax
	movq	%rcx, 4920(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L2600
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L2604
	movq	2064(%rsp), %r8
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r8)
	ja	.L2600
.L2604:
	movslq	%edx,%r9
	leaq	(%r9,%r9,4), %r14
	movq	%r9, 4912(%rsp)
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16673
.L2605:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16674
.L2606:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L2607
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	4928(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L2600
.L2607:
	call	get_last_insn
	movl	$1, %edx
	movq	2064(%rsp), %rsi
	movq	%rax, 4904(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16675
.L2608:
	movq	4912(%rsp), %r14
	movq	2072(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r13, %rsi
	movq	%rbx, %rdx
	movq	4928(%rsp), %rcx
	call	*insn_gen_function(,%r14,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14916
	movq	4904(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L2600:
	movq	4920(%rsp), %rdx
	movl	mode_wider_mode(,%rdx,4), %ebp
	testl	%ebp, %ebp
	jne	.L2612
.L13878:
	movq	2064(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movq	2072(%rsp), %r11
	movq	8(%r13), %rbp
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	movl	$3, %ecx
	xorl	%eax, %eax
	movq	%rbp, (%rsp)
	movq	8(%r11), %r8
	call	emit_library_call
.L2610:
	cmpw	$46, (%r15)
	je	.L16676
	movq	8(%r12), %rsi
	movl	$4, %edi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movl	$4, %edi
	movq	%r15, %rcx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	2088(%rsp), %rdx
	movl	$4, %edi
	movq	%r15, %rcx
	movq	%rax, %rbp
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 2040(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L2614:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L2615
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%rbp, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L2615:
	cmpq	$0, 2040(%rsp)
	je	.L581
	movq	2040(%rsp), %rdi
	jmp	.L15251
.L16676:
	movq	4976(%rsp), %r15
	movq	8(%r12), %rdi
	movl	32(%r15), %esi
	call	plus_constant_wide
	movq	2088(%rsp), %rdi
	movq	4976(%rsp), %r12
	movq	%rax, %rbp
	movl	32(%r12), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L2614
.L14916:
	call	emit_insn
	jmp	.L2610
.L16675:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L2608
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L2608
.L16674:
	xorl	%eax, %eax
	movq	%r13, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L2600
	jmp	.L2606
.L16673:
	xorl	%eax, %eax
	movq	2072(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L2600
	jmp	.L2605
.L16672:
	movl	8(%rax), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 2060(%rsp)
	movl	$9, %r8d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	2060(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L2540:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13869
.L2536:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L2536
.L13869:
	testl	%ecx, %ecx
	je	.L2529
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L2538
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L2538
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L2538:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L2540
.L2529:
	decl	%r9d
	jg	.L2526
	movq	2072(%rsp), %rcx
	movq	8(%r13), %rdi
	movl	%r10d, %r14d
	movq	8(%rcx), %rbx
	movq	%r13, 7464(%rsp)
	movq	%rcx, 7440(%rsp)
	movl	$0, 7492(%rsp)
	movq	%rdi, 7472(%rsp)
	xorl	%ecx, %ecx
	movl	$9, 2056(%rsp)
	movq	%rbx, 7448(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r13d
	cmpw	$1, %r13w
	jbe	.L2543
	cmpw	$88, %dx
	je	.L2543
	cmpw	$87, %dx
	je	.L2543
.L2542:
	movl	%ecx, 7456(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L2545
	cmpw	$88, %dx
	je	.L2545
	cmpw	$87, %dx
	je	.L2545
.L2544:
	movl	%ecx, 7480(%rsp)
	movl	$0, 7484(%rsp)
	movl	$0, 7460(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L2547
	cmpw	$87, %ax
	je	.L2547
.L2546:
	testl	%edx, %edx
	movl	%edx, 7496(%rsp)
	je	.L2548
	movl	%r10d, 7492(%rsp)
.L2548:
	movl	7480(%rsp), %eax
	movl	%r10d, 7488(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L2550
	movl	7456(%rsp), %r9d
	testl	%r9d, %r9d
	jne	.L2549
.L2550:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, 2060(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r13d
	cmovl	2060(%rsp), %ebp
.L2564:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13872
.L2560:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%r8d, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L2560
.L13872:
	testl	%ecx, %ecx
	je	.L2553
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L2562
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r13d, %eax
	cmpl	%eax, %ebp
	jl	.L2562
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L2562:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L2564
.L2553:
	cmpl	$2, %r9d
	jle	.L2549
	testl	%r10d, %r10d
	jne	.L2566
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L2567
	cmpw	$46, %dx
	je	.L2567
	cmpw	$47, %dx
	je	.L2567
	cmpw	$49, %dx
	je	.L2567
	cmpw	$113, %dx
	je	.L2567
.L2566:
	movl	7456(%rsp), %eax
	testl	%eax, %eax
	jne	.L2549
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L2569
	cmpw	$46, %dx
	je	.L2569
	cmpw	$47, %dx
	je	.L2569
	cmpw	$49, %dx
	je	.L2569
	cmpw	$113, %dx
	je	.L2569
.L2549:
	cmpl	$8, 2060(%rsp)
	movl	$8, %eax
	cmovl	2060(%rsp), %eax
	cmpl	$1, 2056(%rsp)
	movl	%eax, 2060(%rsp)
	jle	.L2572
.L2594:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r13d, %r13d
	testl	%edx, %edx
	je	.L13875
.L2579:
	movslq	%edx,%rbx
	movl	2056(%rsp), %eax
	salq	$2, %rbx
	cmpl	%eax, mode_size(%rbx)
	cmovl	%edx, %r13d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L2579
.L13875:
	testl	%r13d, %r13d
	je	.L2572
	movslq	%r13d,%r14
	movq	%r14, %r10
	salq	$4, %r10
	addq	mov_optab(%rip), %r10
	movl	8(%r10), %edx
	cmpl	$210, %edx
	je	.L2581
	movl	mode_size(,%r14,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 2060(%rsp)
	jl	.L2581
	movslq	%edx,%rdi
	cmpl	%ebp, 7488(%rsp)
	leaq	7440(%rsp), %rbx
	movq	insn_gen_function(,%rdi,8), %rsi
	movq	%rsi, 4936(%rsp)
	jl	.L2581
	movl	7496(%rsp), %edx
.L2592:
	testl	%edx, %edx
	je	.L2586
	subl	%ebp, 52(%rbx)
.L2586:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L2587
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15033:
	movq	%rax, 2048(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L2589
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L2590:
	movq	%rax, %rsi
	movq	2048(%rsp), %rdi
	xorl	%eax, %eax
	call	*4936(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L2591
	addl	%ebp, 52(%rbx)
.L2591:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L2592
.L2581:
	movl	mode_size(,%r14,4), %r13d
	movl	%r13d, 2056(%rsp)
	decl	%r13d
	jg	.L2594
.L2572:
	movl	7488(%rsp), %eax
	testl	%eax, %eax
	je	.L2610
	jmp	.L15283
.L2589:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L2590
.L2587:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15033
.L2569:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7448(%rsp)
	jmp	.L2549
.L2567:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7472(%rsp)
	jmp	.L2566
.L2547:
	movl	$1, %edx
	jmp	.L2546
.L2545:
	movl	$1, %ecx
	jmp	.L2544
.L2543:
	movl	$1, %ecx
	jmp	.L2542
.L2520:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L2516
.L16671:
	movzbl	2(%r15), %edx
	cmpb	$16, %dl
	je	.L2514
	movq	8(%r15), %rbp
	cmpw	$59, (%rbp)
	je	.L16677
.L2514:
	cmpl	$55, %eax
	jne	.L2517
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L2516
.L16677:
	movq	8(%rbp), %r11
	movq	%r11, 8(%r15)
	cmpq	$0, 16(%rbp)
	je	.L2516
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r15, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r14, 2064(%rsp)
	jmp	.L2516
.L2513:
	cmpq	$0, 16(%r15)
	jne	.L2521
	movq	8(%r15), %rax
	movq	%rax, 2064(%rsp)
	jmp	.L2516
.L2521:
	movq	24(%r15), %rbp
	testq	%rbp, %rbp
	movq	%rbp, 2064(%rsp)
	jne	.L2516
	movq	8(%r15), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %rbx
	movq	%rbx, 2064(%rsp)
	jmp	.L2516
.L2510:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L2506
.L16670:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L2504
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L16678
.L2504:
	cmpl	$55, %eax
	jne	.L2507
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L2506
.L16678:
	movq	8(%rbp), %r14
	movq	%r14, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L2506
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L2506
.L2503:
	cmpq	$0, 16(%r13)
	jne	.L2511
	movq	8(%r13), %r13
	jmp	.L2506
.L2511:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L2512
	movq	%rsi, %r13
	jmp	.L2506
.L2512:
	movq	8(%r13), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L2506
.L2500:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L2496
.L16669:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L2496
.L2493:
	cmpq	$0, 16(%r12)
	jne	.L2501
	movq	8(%r12), %rdi
	movq	%rdi, 2072(%rsp)
	jmp	.L2496
.L2501:
	movq	24(%r12), %rdx
	testq	%rdx, %rdx
	movq	%rdx, 2072(%rsp)
	jne	.L2496
	movq	8(%r12), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %rcx
	movq	%rcx, 2072(%rsp)
	jmp	.L2496
.L16668:
	movq	4976(%rsp), %r8
	movq	2088(%rsp), %rbx
	movl	32(%r8), %eax
	cmpl	%eax, 8(%rbx)
	jge	.L2367
	movq	8(%r8), %rsi
	movl	48(%rsi), %r15d
	shrl	$3, %r15d
	cmpb	$16, 2(%r12)
	jne	.L15283
	cmpb	$16, 2(%r13)
	jne	.L15283
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L2370
	cmpl	$55, %eax
	je	.L16679
.L2374:
	cmpl	$63, %eax
	je	.L2377
	cmpl	$66, %eax
	je	.L2377
.L2373:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L2380
	cmpl	$55, %eax
	je	.L16680
.L2384:
	cmpl	$63, %eax
	je	.L2387
	cmpl	$66, %eax
	je	.L2387
.L2383:
	movq	2088(%rsp), %rcx
	movzwl	(%rcx), %eax
	cmpl	$59, %eax
	je	.L2390
	cmpl	$55, %eax
	je	.L16681
.L2394:
	cmpl	$63, %eax
	je	.L2397
	cmpl	$66, %eax
	je	.L2397
.L2393:
	cmpw	$55, (%r12)
	jne	.L15283
	cmpw	$55, (%r13)
	jne	.L15283
	cmpq	$0, 2088(%rsp)
	je	.L15283
	movq	2088(%rsp), %rbx
	cmpw	$46, (%rbx)
	je	.L16682
.L2403:
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	movl	%r15d, %edx
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 4960(%rsp)
	testl	%ebp, %ebp
	je	.L13866
.L2489:
	movslq	%ebp,%r8
	movq	%r8, %rax
	movq	%r8, 4952(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L2477
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L2481
	movq	2088(%rsp), %r14
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r14)
	ja	.L2477
.L2481:
	movslq	%edx,%r15
	leaq	(%r15,%r15,4), %r14
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16683
.L2482:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L16684
.L2483:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L2484
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	4960(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L2477
.L2484:
	call	get_last_insn
	movl	$1, %edx
	movq	2088(%rsp), %rsi
	movq	%rax, 4944(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L16685
.L2485:
	movq	%r12, %rdi
	xorl	%eax, %eax
	movq	%r13, %rsi
	movq	%rbx, %rdx
	movq	4960(%rsp), %rcx
	call	*insn_gen_function(,%r15,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L14920
	movq	4944(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L2477:
	movq	4952(%rsp), %r9
	movl	mode_wider_mode(,%r9,4), %ebp
	testl	%ebp, %ebp
	jne	.L2489
.L13866:
	movq	2088(%rsp), %rsi
	movl	$4, %edi
	jmp	.L15252
.L16685:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L2485
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L2485
.L16684:
	xorl	%eax, %eax
	movq	%r13, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L2477
	jmp	.L2483
.L16683:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L2477
	jmp	.L2482
.L16682:
	movl	8(%rbx), %r10d
	xorl	%r9d, %r9d
	movl	$9, %r8d
	movl	$8, %ebx
	cmpl	$8, %r15d
	movl	class_narrowest_mode+4(%rip), %esi
	cmovl	%r15d, %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %edi
.L2417:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13857
.L2413:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%r8d, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L2413
.L13857:
	testl	%ecx, %ecx
	je	.L2406
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L2415
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L2415
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L2415:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L2417
.L2406:
	decl	%r9d
	jg	.L2403
	movq	8(%r12), %rbx
	movq	8(%r13), %rdi
	xorl	%ecx, %ecx
	movq	%r12, 7376(%rsp)
	movl	$0, 7428(%rsp)
	movq	%r13, 7400(%rsp)
	movl	%r10d, %r14d
	movl	$9, 2084(%rsp)
	movq	%rbx, 7384(%rsp)
	movq	%rdi, 7408(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L2420
	cmpw	$88, %dx
	je	.L2420
	cmpw	$87, %dx
	je	.L2420
.L2419:
	movl	%ecx, 7392(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r13d
	cmpw	$1, %r13w
	jbe	.L2422
	cmpw	$88, %dx
	je	.L2422
	cmpw	$87, %dx
	je	.L2422
.L2421:
	movl	%ecx, 7416(%rsp)
	movl	$0, 7420(%rsp)
	movl	$0, 7396(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L2424
	cmpw	$87, %ax
	je	.L2424
.L2423:
	testl	%edx, %edx
	movl	%edx, 7432(%rsp)
	je	.L2425
	movl	%r10d, 7428(%rsp)
.L2425:
	movl	%r10d, 7424(%rsp)
	movl	7416(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L2427
	movl	7392(%rsp), %ecx
	testl	%ecx, %ecx
	jne	.L2426
.L2427:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %r8d
	cmpl	$8, %r15d
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	%r15d, %ebp
.L2441:
	xorl	%ecx, %ecx
	movl	%esi, %edx
	testl	%esi, %esi
	je	.L13860
.L2437:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%r8d, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L2437
.L13860:
	testl	%ecx, %ecx
	je	.L2430
	movslq	%ecx,%rcx
	movq	%rcx, %r8
	salq	$4, %r8
	cmpl	$210, 8(%r11,%r8)
	je	.L2439
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L2439
	movl	%r14d, %eax
	movl	%edx, %r14d
	xorl	%edx, %edx
	divl	%r14d
	addl	%eax, %r9d
	movl	%edx, %r14d
.L2439:
	movl	mode_size(,%rcx,4), %r8d
	cmpl	$1, %r8d
	jg	.L2441
.L2430:
	cmpl	$2, %r9d
	jle	.L2426
	testl	%r10d, %r10d
	jne	.L2443
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L2444
	cmpw	$46, %dx
	je	.L2444
	cmpw	$47, %dx
	je	.L2444
	cmpw	$49, %dx
	je	.L2444
	cmpw	$113, %dx
	je	.L2444
.L2443:
	movl	7392(%rsp), %eax
	testl	%eax, %eax
	jne	.L2426
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L2446
	cmpw	$46, %dx
	je	.L2446
	cmpw	$47, %dx
	je	.L2446
	cmpw	$49, %dx
	je	.L2446
	cmpw	$113, %dx
	je	.L2446
.L2426:
	cmpl	$8, %r15d
	movl	$8, %eax
	cmovge	%eax, %r15d
	cmpl	$1, 2084(%rsp)
	jle	.L2449
.L2471:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L13863
.L2456:
	movslq	%edx,%rbx
	movl	2084(%rsp), %esi
	salq	$2, %rbx
	cmpl	%esi, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L2456
.L13863:
	testl	%r12d, %r12d
	je	.L2449
	movslq	%r12d,%r13
	movq	%r13, %rbp
	salq	$4, %rbp
	addq	mov_optab(%rip), %rbp
	movl	8(%rbp), %edx
	cmpl	$210, %edx
	je	.L2458
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, %r15d
	jl	.L2458
	movslq	%edx,%rdi
	cmpl	%ebp, 7424(%rsp)
	leaq	7376(%rsp), %rbx
	movq	insn_gen_function(,%rdi,8), %r10
	movq	%r10, 4968(%rsp)
	jl	.L2458
	movl	7432(%rsp), %edx
.L2469:
	testl	%edx, %edx
	je	.L2463
	subl	%ebp, 52(%rbx)
.L2463:
	movl	16(%rbx), %edx
	testl	%edx, %edx
	je	.L2464
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L15032:
	movl	40(%rbx), %ecx
	movq	%rax, %r14
	testl	%ecx, %ecx
	je	.L2466
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L2467:
	movq	%rax, %rsi
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	*4968(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L2468
	addl	%ebp, 52(%rbx)
.L2468:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L2469
.L2458:
	movl	mode_size(,%r13,4), %r12d
	movl	%r12d, 2084(%rsp)
	decl	%r12d
	jg	.L2471
.L2449:
	movl	7424(%rsp), %r15d
	testl	%r15d, %r15d
	jmp	.L15376
.L2466:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L2467
.L2464:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L15032
.L2446:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7384(%rsp)
	jmp	.L2426
.L2444:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 7408(%rsp)
	jmp	.L2443
.L2424:
	movl	$1, %edx
	jmp	.L2423
.L2422:
	movl	$1, %ecx
	jmp	.L2421
.L2420:
	movl	$1, %ecx
	jmp	.L2419
.L2397:
	movq	2088(%rsp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	2088(%rsp), %r9
	movq	%rax, 8(%r9)
	movq	2088(%rsp), %rax
	movq	16(%rax), %rdi
	call	protect_from_queue
	movq	2088(%rsp), %rcx
	movq	%rax, 16(%rcx)
	jmp	.L2393
.L16681:
	movzbl	2(%rcx), %edx
	cmpb	$16, %dl
	je	.L2391
	movq	8(%rcx), %rbp
	cmpw	$59, (%rbp)
	je	.L16686
.L2391:
	cmpl	$55, %eax
	jne	.L2394
	movq	2088(%rsp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L2393
.L16686:
	movq	8(%rbp), %r10
	movq	%r10, 8(%rcx)
	cmpq	$0, 16(%rbp)
	je	.L2393
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	2088(%rsp), %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L15031:
	movq	%rbx, 2088(%rsp)
	jmp	.L2393
.L2390:
	movq	2088(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L2398
	movq	8(%rcx), %rbx
	jmp	.L15031
.L2398:
	movq	2088(%rsp), %r11
	movq	24(%r11), %rsi
	testq	%rsi, %rsi
	je	.L2399
	movq	%rsi, 2088(%rsp)
	jmp	.L2393
.L2399:
	movq	2088(%rsp), %rdi
	movq	8(%rdi), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	2088(%rsp), %rbp
	movq	%rax, %rdi
	movq	8(%rbp), %rsi
	movq	%rax, 24(%rbp)
	call	gen_move_insn
	movq	2088(%rsp), %r8
	movq	%rax, %rdi
	movq	16(%r8), %rsi
	call	emit_insn_before
	movq	2088(%rsp), %rsi
	movq	24(%rsi), %rbx
	movq	%rbx, 2088(%rsp)
	jmp	.L2393
.L2387:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L2383
.L16680:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L2381
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L16687
.L2381:
	cmpl	$55, %eax
	jne	.L2384
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L2383
.L16687:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L2383
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L2383
.L2380:
	cmpq	$0, 16(%r13)
	jne	.L2388
	movq	8(%r13), %r13
	jmp	.L2383
.L2388:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L2389
	movq	%rsi, %r13
	jmp	.L2383
.L2389:
	movq	8(%r13), %rbp
	movzbl	2(%rbp), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L2383
.L2377:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L2373
.L16679:
	jne	.L2374
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L2373
.L2370:
	cmpq	$0, 16(%r12)
	jne	.L2378
	movq	8(%r12), %r12
	jmp	.L2373
.L2378:
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	je	.L2379
	movq	%rdi, %r12
	jmp	.L2373
.L2379:
	movq	8(%r12), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L2373
.L2359:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L2355
.L16657:
	jne	.L2356
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L2355
.L2352:
	cmpq	$0, 16(%r12)
	jne	.L2360
	movq	8(%r12), %r12
	jmp	.L2355
.L2360:
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	je	.L2361
	movq	%rdi, %r12
	jmp	.L2355
.L2361:
	movq	8(%r12), %r14
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L2355
.L16656:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	4976(%rsp), %rdi
	movzbl	2(%r12), %edx
	movq	%rax, %rsi
	jmp	.L15030
	.p2align 6,,7
.L2331:
	movl	(%r12), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L16688
	movzbl	2(%r12), %edx
	movq	4976(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	%r12, %rsi
	call	expand_expr
	cmpw	$51, (%r12)
	movq	%rax, %r13
	je	.L16689
.L2349:
	movzwl	(%r13), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L2350
	cmpw	$46, %dx
	je	.L2350
	cmpw	$47, %dx
	je	.L2350
	cmpw	$49, %dx
	je	.L2350
	cmpw	$113, %dx
	jne	.L2296
	jmp	.L2350
.L16689:
	cmpl	$63, 8(%r12)
	jle	.L2296
	jmp	.L2349
.L16688:
	movq	4976(%rsp), %rdi
	jmp	.L15323
.L2340:
	movl	$1, %ebx
	jmp	.L2334
	.p2align 6,,7
.L2332:
	xorl	%ebx, %ebx
	jmp	.L2334
.L2338:
	movq	8(%r12), %rdi
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L2340
	movq	16(%r12), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L2334
	jmp	.L2340
.L16655:
	movzbl	2(%r12), %eax
	cmpb	$16, %al
	je	.L2324
	movl	cse_not_expected(%rip), %edi
	xorl	%esi, %esi
	movzbl	%al, %edx
	testl	%edi, %edi
	movq	4976(%rsp), %rdi
	cmove	%r12, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	call	expand_expr
	movq	%rax, %r13
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L2350
	testb	%al, %al
	je	.L2350
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L15292
	.p2align 6,,7
.L16654:
	cmpb	$16, 2(%r12)
	jne	.L2297
	call	gen_label_rtx
	movq	%rax, %rbp
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r13
	testq	%rbx, %rbx
	jne	.L2301
.L13850:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L2303
	cmpl	$55, %eax
	je	.L16690
.L2307:
	cmpl	$63, %eax
	je	.L2310
	cmpl	$66, %eax
	je	.L2310
.L2306:
	movq	4976(%rsp), %rbx
	xorl	%eax, %eax
	movq	%rbp, %rsi
	incl	inhibit_defer_pop(%rip)
	movq	32(%rbx), %rdi
	call	jumpifnot
	movq	4976(%rsp), %rax
	xorl	%edx, %edx
	movq	%r12, %rsi
	movq	40(%rax), %rdi
	xorl	%eax, %eax
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L2316
.L13852:
	movq	%r13, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%rbp, %rdi
	call	emit_label
	xorl	%eax, %eax
	xorl	%edx, %edx
	movq	4976(%rsp), %rbp
	movq	%r12, %rsi
	movq	48(%rbp), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L2321
.L13854:
	movq	%r13, %rdi
	jmp	.L15254
.L2321:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r12
	movq	%rax, 16(%rbx)
	testq	%r12, %r12
	movq	%r12, pending_chain(%rip)
	movq	%r12, %rbx
	jne	.L2321
	jmp	.L13854
.L2316:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rsi
	movq	%rax, 16(%rbx)
	testq	%rsi, %rsi
	movq	%rsi, pending_chain(%rip)
	movq	%rsi, %rbx
	jne	.L2316
	jmp	.L13852
.L2310:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L2306
.L16690:
	jne	.L2307
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L2306
.L2303:
	cmpq	$0, 16(%r12)
	jne	.L2311
	movq	8(%r12), %r12
	jmp	.L2306
.L2311:
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	je	.L2312
	movq	%rdi, %r12
	jmp	.L2306
.L2312:
	movq	8(%r12), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L2306
.L2301:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r11
	movq	%rax, 16(%rbx)
	testq	%r11, %r11
	movq	%r11, pending_chain(%rip)
	movq	%r11, %rbx
	jne	.L2301
	jmp	.L13850
.L16653:
	movq	32(%r15), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L2293
.L13848:
	movq	4976(%rsp), %rdx
	movq	%r12, %rsi
	movq	40(%rdx), %rdi
	xorl	%edx, %edx
	jmp	.L15255
	.p2align 6,,7
.L2293:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r15
	movq	%rax, 16(%rbx)
	testq	%r15, %r15
	movq	%r15, pending_chain(%rip)
	movq	%r15, %rbx
	jne	.L2293
	jmp	.L13848
	.p2align 6,,7
.L16610:
	movq	5424(%rsp), %rdi
	movq	32(%rdi), %rax
	testq	%rax, %rax
	je	.L15283
	cmpb	$25, 16(%rax)
	jne	.L15283
	movl	24(%rax), %esi
	movl	$16, %edi
	leal	14(%rsi), %ecx
	addl	$7, %esi
	cmovs	%ecx, %esi
	xorl	%edx, %edx
	sarl	$3, %esi
	call	assign_stack_temp
	jmp	.L15029
.L16606:
	movq	56(%rsp), %rsi
	xorl	%edx, %edx
	jmp	.L15403
	.p2align 6,,7
.L13632:
	movq	8(%r15), %r11
	movq	32(%r15), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	8(%r11), %r9
	movzbl	44(%r9), %ebp
	call	expand_expr
	xorl	%ecx, %ecx
	movq	40(%r15), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movq	%rax, %r12
	xorl	%eax, %eax
	call	expand_expr
	cmpq	$0, 56(%rsp)
	movq	%rax, %r13
	je	.L16691
.L13633:
	call	get_last_insn
	movq	%rax, %rbx
	movq	56(%rsp), %rax
	cmpw	$51, (%rax)
	je	.L16692
.L13634:
	movq	56(%rsp), %rsi
	movl	%ebp, %edi
	call	gen_realpart
	movq	%r12, %rsi
	movq	%rax, %rdi
	call	emit_move_insn
	movq	56(%rsp), %rsi
	movl	%ebp, %edi
	call	gen_imagpart
	movq	%r13, %rsi
	movq	%rax, %rdi
	call	emit_move_insn
	testq	%rbx, %rbx
	je	.L13644
	movq	24(%rbx), %rbp
.L13645:
	call	get_last_insn
	movq	%rbp, %rdx
	movl	$6, %esi
	movq	56(%rax), %rcx
	movq	%rax, %r13
	movl	$3, %edi
	xorl	%eax, %eax
	call	gen_rtx
	movq	%r13, %rdx
	movl	$7, %esi
	movq	%rax, 56(%r13)
	movl	$3, %edi
	xorl	%eax, %eax
	movq	56(%rbp), %rcx
	call	gen_rtx
	movq	%rax, 56(%rbp)
	jmp	.L581
.L13644:
	call	get_insns
	movq	%rax, %rbp
	jmp	.L13645
.L16692:
	movq	56(%rsp), %rdx
	movl	$42, %edi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L13634
.L16691:
	movq	8(%r15), %r10
	movzbl	44(%r10), %edi
	call	gen_reg_rtx
	movq	%rax, 56(%rsp)
	jmp	.L13633
.L13640:
	movq	8(%r15), %rbp
	movq	32(%r15), %rdi
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	8(%rbp), %rdx
	movzbl	44(%rdx), %ebp
	xorl	%edx, %edx
	call	expand_expr
	cmpq	$0, 56(%rsp)
	movq	%rax, %r12
	je	.L16693
.L13641:
	call	get_last_insn
	movq	56(%rsp), %r15
	movq	%rax, %r13
	cmpw	$51, (%r15)
	je	.L16694
.L13642:
	movq	56(%rsp), %rsi
	movl	%ebp, %edi
	call	gen_realpart
	movq	%r12, %rsi
	movl	%ebp, %edi
	movq	%rax, %r14
	call	gen_realpart
	movq	%rax, %rsi
	movq	%r14, %rdi
	call	emit_move_insn
	movq	56(%rsp), %rsi
	movl	%ebp, %edi
	call	gen_imagpart
	movq	%r12, %rsi
	movl	%ebp, %edi
	movq	%rax, %rbx
	call	gen_imagpart
	xorl	%r8d, %r8d
	movq	neg_optab(%rip), %rsi
	movq	%rax, %rdx
	movl	%ebp, %edi
	xorl	%eax, %eax
	movq	%rbx, %rcx
	call	expand_unop
	cmpq	%rbx, %rax
	je	.L13643
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	emit_move_insn
.L13643:
	testq	%r13, %r13
	je	.L13644
	movq	24(%r13), %rbp
	jmp	.L13645
.L16694:
	movq	56(%rsp), %rdx
	movl	$42, %edi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L13642
.L16693:
	movq	8(%r15), %r14
	movzbl	44(%r14), %edi
	call	gen_reg_rtx
	movq	%rax, 56(%rsp)
	jmp	.L13641
.L13638:
	movq	32(%r15), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movl	5412(%rsp), %edi
	movq	%rax, %rsi
	call	gen_realpart
	jmp	.L13703
.L13639:
	movq	32(%r15), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movl	5412(%rsp), %edi
	movq	%rax, %rsi
	call	gen_imagpart
	jmp	.L13703
.L13617:
	movq	%r15, %rdi
	xorl	%esi, %esi
.L15280:
	xorl	%eax, %eax
	call	expand_increment
	jmp	.L13703
.L13619:
	movl	5408(%rsp), %r8d
	movq	%r15, %rdi
	testl	%r8d, %r8d
	sete	%bl
	movzbl	%bl, %esi
	jmp	.L15280
	.p2align 6,,7
.L13648:
	movq	%r15, %rdi
	movq	56(%rsp), %rsi
	movl	%r14d, %edx
	movl	%r13d, %ecx
	xorl	%eax, %eax
	call	*lang_expand_expr(%rip)
	jmp	.L13703
.L1089:
	call	gen_label_rtx
	xorl	%edx, %edx
	movq	32(%r15), %rdi
	movq	%rax, %rsi
	movq	%rax, %r12
	xorl	%eax, %eax
	call	do_jump
	xorl	%edi, %edi
	call	expand_exit_loop
	movq	%r12, %rdi
	call	emit_label
	movq	const0_rtx(%rip), %rax
	jmp	.L13703
.L1090:
	movl	$1, %edi
	call	expand_start_loop
	movq	32(%r15), %rdi
	call	expand_expr_stmt
	call	expand_end_loop
	jmp	.L15309
.L15419:
	cmpl	$63, 8(%rsi)
	jg	.L587
	jmp	.L588
	.p2align 6,,7
.L15418:
	movq	%rsi, %rbx
	jmp	.L583
.L15283:
	xorl	%eax, %eax
	call	abort
.LFE6:
.Lfe6:
	.size	expand_expr,.Lfe6-expand_expr
	.section	.rodata.str1.32
	.align 32
.LC10:
	.string	"offset outside bounds of constant string"
	.align 32
.LC11:
	.string	"built-in function %s not currently supported"
	.align 32
.LC2:
	.string	"`va_start' used within `({...})'"
	.align 32
.LC8:
	.string	"`va_start' used in function with fixed args"
	.align 32
.LC5:
	.string	"argument of __builtin_args_info must be constant"
	.align 32
.LC6:
	.string	"argument of __builtin_args_info out of range"
	.align 32
.LC7:
	.string	"missing argument in __builtin_args_info"
	.align 32
.LC9:
	.string	"invalid arg to __builtin_return_address"
	.text
	.align 2
	.p2align 4,,15
	.type	expand_builtin,@function
expand_builtin:
.LFB7:
	subq	$280, %rsp
.LCFI39:
	movq	%rbp, 240(%rsp)
.LCFI40:
	movq	%r12, 248(%rsp)
.LCFI41:
	movq	%r13, 256(%rsp)
.LCFI42:
	movq	%rbx, 232(%rsp)
.LCFI43:
	movq	%r14, 264(%rsp)
.LCFI44:
	movq	%r15, 272(%rsp)
.LCFI45:
	movl	%ecx, 140(%rsp)
	movl	%r8d, 136(%rsp)
	movq	%rdx, %rbp
	movq	32(%rdi), %rdx
	movq	%rdi, %r12
	movq	%rsi, %r13
	movq	40(%rdi), %rbx
	movq	32(%rdx), %r14
	movq	8(%rdi), %rdx
	movl	128(%r14), %eax
	movzbl	44(%rdx), %r15d
	cmpl	$29, %eax
	ja	.L17127
	mov	%eax, %ecx
	jmp	*.L17128(,%rcx,8)
	.section	.rodata
	.align 8
	.align 4
.L17128:
	.quad	.L17127
	.quad	.L16777
	.quad	.L17204
	.quad	.L17204
	.quad	.L17204
	.quad	.L16781
	.quad	.L17127
	.quad	.L17127
	.quad	.L17127
	.quad	.L17127
	.quad	.L17127
	.quad	.L17127
	.quad	.L16922
	.quad	.L16696
	.quad	.L17127
	.quad	.L16880
	.quad	.L16696
	.quad	.L16786
	.quad	.L16702
	.quad	.L16702
	.quad	.L16702
	.quad	.L17127
	.quad	.L17127
	.quad	.L16722
	.quad	.L16737
	.quad	.L16734
	.quad	.L16725
	.quad	.L16758
	.quad	.L16764
	.quad	.L16764
	.text
.L16702:
	movl	optimize(%rip), %eax
	testl	%eax, %eax
	je	.L16696
	testq	%rbx, %rbx
	je	.L16705
	movq	32(%rbx), %rcx
	movq	8(%rcx), %rsi
	cmpb	$8, 16(%rsi)
	je	.L16704
.L16705:
	movzbq	44(%rdx), %rbx
	movq	const_tiny_rtx(,%rbx,8), %r13
	.p2align 4,,7
.L16695:
	movq	%r13, %rax
	movq	232(%rsp), %rbx
	movq	240(%rsp), %rbp
	movq	248(%rsp), %r12
	movq	256(%rsp), %r13
	movq	264(%rsp), %r14
	movq	272(%rsp), %r15
	addq	$280, %rsp
	ret
.L16704:
	movzbl	16(%rcx), %edx
	subb	$33, %dl
	cmpb	$1, %dl
	ja	.L17209
.L16706:
	movq	32(%rbx), %rdi
	movq	%rbp, %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	8(%r12), %rbp
	movq	%rax, %r13
	movzbl	44(%rbp), %edi
	call	gen_reg_rtx
	movq	pending_chain(%rip), %rbp
	movq	%rax, %r15
	testq	%rbp, %rbp
	jne	.L16710
.L17130:
	call	start_sequence
	movl	128(%r14), %eax
	cmpl	$19, %eax
	je	.L16713
	cmpl	$19, %eax
	ja	.L16718
	cmpl	$18, %eax
	jne	.L17204
	movq	sqrt_optab(%rip), %rsi
.L16712:
	movq	32(%rbx), %r9
	movq	%r13, %rdx
	xorl	%eax, %eax
	movq	%r15, %rcx
	movq	8(%r9), %r8
	movzbl	44(%r8), %edi
	xorl	%r8d, %r8d
	call	expand_unop
	testq	%rax, %rax
	movq	%rax, %r13
	je	.L17211
	movl	flag_fast_math(%rip), %r10d
	testl	%r10d, %r10d
	je	.L17212
.L16720:
	call	get_insns
	movq	%rax, %r12
	call	end_sequence
	movq	%r12, %rdi
	call	emit_insns
	jmp	.L16695
.L17212:
	call	gen_label_rtx
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%r13), %r8d
	movq	%r13, %rsi
	movl	$90, %edx
	movq	%rax, %r14
	movq	%r13, %rdi
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	movq	%r14, %rdi
	call	gen_beq
	movq	%rax, %rdi
	call	emit_jump_insn
	xorl	%eax, %eax
	xorl	%edx, %edx
	movq	%r12, %rdi
	movq	%r13, %rsi
	incl	inhibit_defer_pop(%rip)
	call	expand_call
	movq	%r14, %rdi
	decl	inhibit_defer_pop(%rip)
	call	emit_label
	jmp	.L16720
.L17211:
	call	end_sequence
	.p2align 4,,7
.L16696:
	movl	136(%rsp), %edx
	movq	%r12, %rdi
	movq	%r13, %rsi
	xorl	%eax, %eax
	call	expand_call
.L17183:
	movq	%rax, %r13
	jmp	.L16695
.L16718:
	cmpl	$20, %eax
	jne	.L17204
	movq	cos_optab(%rip), %rsi
	jmp	.L16712
.L16713:
	movq	sin_optab(%rip), %rsi
	jmp	.L16712
	.p2align 6,,7
.L16710:
	movq	32(%rbp), %rdi
	call	emit_insn
	movq	40(%rbp), %rdi
	movq	%rax, 16(%rbp)
	testq	%rdi, %rdi
	movq	%rdi, pending_chain(%rip)
	movq	%rdi, %rbp
	jne	.L16710
	jmp	.L17130
.L17209:
	call	copy_node
	movq	%rbx, %rdi
	movq	%rax, %r12
	call	copy_node
	movq	%rax, 40(%r12)
	movq	%rax, %rbx
	movq	32(%rax), %rdi
	call	save_expr
	movq	%rax, 32(%rbx)
	jmp	.L16706
	.p2align 6,,7
.L16777:
	testq	%rbx, %rbx
	je	.L16925
	movq	32(%rbx), %rdi
	movq	8(%rdi), %r8
	cmpb	$7, 16(%r8)
	je	.L17214
	.p2align 4,,7
.L16925:
	movq	const0_rtx(%rip), %r13
	jmp	.L16695
.L17214:
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movl	$1, current_function_calls_alloca(%rip)
	call	expand_expr
	movl	$8, %edx
	movq	%r13, %rsi
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	allocate_dynamic_stack_space
	cmpq	$0, nonlocal_goto_handler_slot(%rip)
	movq	%rax, %r13
	je	.L16695
	movl	$2, %edi
	movl	$nonlocal_goto_stack_level, %esi
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	emit_stack_save
	jmp	.L16695
	.p2align 6,,7
.L16781:
	movl	optimize(%rip), %eax
	testl	%eax, %eax
	je	.L16696
	testq	%rbx, %rbx
	je	.L16925
	movq	32(%rbx), %rdi
	movq	8(%rdi), %r9
	cmpb	$7, 16(%r9)
	jne	.L16925
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movq	%rbp, %rsi
	xorl	%eax, %eax
	call	expand_expr
	movl	$1, %r8d
	movq	%r13, %rcx
	movq	32(%rbx), %r14
	movq	ffs_optab(%rip), %rsi
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%r14), %r10
	movzbl	44(%r10), %edi
	call	expand_unop
	testq	%rax, %rax
	movq	%rax, %r13
	jne	.L16695
	jmp	.L17204
	.p2align 6,,7
.L16922:
	movl	optimize(%rip), %eax
	testl	%eax, %eax
	je	.L16696
	testq	%rbx, %rbx
	je	.L16925
	movq	32(%rbx), %rdi
	movq	8(%rdi), %rsi
	cmpb	$13, 16(%rsi)
	jne	.L16925
	movq	(%rbx), %r10
	testq	%r10, %r10
	je	.L16925
	movq	32(%r10), %rbp
	movq	8(%rbp), %rdx
	cmpb	$13, 16(%rdx)
	jne	.L16925
	movq	(%r10), %rax
	testq	%rax, %rax
	je	.L16925
	movq	32(%rax), %rcx
	movq	%rcx, 104(%rsp)
	movq	8(%rcx), %rbx
	cmpb	$7, 16(%rbx)
	jne	.L16925
	movq	8(%rdx), %r15
	movl	$64, %r9d
	movq	%rbp, %rcx
	movq	tree_code_type(%rip), %r11
	movl	48(%r15), %eax
	cmpl	%eax, %r9d
	movl	%eax, %edx
	cmovbe	%r9d, %edx
.L16961:
	movzbl	16(%rcx), %eax
	cmpl	$103, %eax
	ja	.L16960
	cmpl	$101, %eax
	jb	.L17215
	movq	32(%rcx), %rcx
	movq	8(%rcx), %rax
	cmpb	$13, 16(%rax)
	jne	.L16928
	movq	8(%rax), %r8
	movl	48(%r8), %eax
	cmpl	%eax, %r9d
	cmovbe	%r9d, %eax
	cmpl	%edx, %eax
	cmovae	%eax, %edx
	jmp	.L16961
.L16928:
	cmpl	$-1, %edx
	leal	7(%rdx), %r9d
	movl	%edx, %ebx
	cmovle	%r9d, %ebx
	movq	%rdi, %rcx
	movl	$64, %r8d
	sarl	$3, %ebx
	cmpb	$13, 16(%rsi)
	je	.L16963
	xorl	%edx, %edx
.L16964:
	cmpl	$-1, %edx
	leal	7(%rdx), %ecx
	movl	%edx, %r15d
	cmovle	%ecx, %r15d
	sarl	$3, %r15d
	testl	%ebx, %ebx
	je	.L17000
	testl	%r15d, %r15d
	jne	.L16999
.L17000:
	cmpl	$15, 128(%r14)
	jne	.L16696
	movq	$0, (%r10)
	jmp	.L16696
.L16999:
	xorl	%ecx, %ecx
	xorl	%esi, %esi
	movl	$4, %edx
	xorl	%eax, %eax
	call	expand_expr
	movl	$16, %edi
	movq	%rax, %rsi
	movq	%rax, %r13
	call	memory_address
	movl	$16, %esi
	movl	$55, %edi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	gen_rtx
	xorl	%ecx, %ecx
	movl	$4, %edx
	xorl	%esi, %esi
	movq	%rax, 48(%rsp)
	movq	%rbp, %rdi
	xorl	%eax, %eax
	call	expand_expr
	movl	$16, %edi
	movq	%rax, %rsi
	call	memory_address
	movl	$16, %esi
	movl	$55, %edi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	gen_rtx
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	104(%rsp), %rdi
	xorl	%esi, %esi
	movq	%rax, %r12
	xorl	%eax, %eax
	call	expand_expr
	movq	48(%rsp), %rdi
	cmpl	%ebx, %r15d
	cmovg	%ebx, %r15d
	movq	%rax, %r14
	cmpb	$16, 2(%rdi)
	jne	.L17204
	cmpb	$16, 2(%r12)
	jne	.L17204
	movq	48(%rsp), %rsi
	movzwl	(%rsi), %eax
	cmpl	$59, %eax
	je	.L17005
	cmpl	$55, %eax
	je	.L17216
.L17009:
	cmpl	$63, %eax
	je	.L17012
	cmpl	$66, %eax
	je	.L17012
.L17008:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L17015
	cmpl	$55, %eax
	je	.L17217
.L17019:
	cmpl	$63, %eax
	je	.L17022
	cmpl	$66, %eax
	je	.L17022
.L17018:
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L17025
	cmpl	$55, %eax
	je	.L17218
.L17029:
	cmpl	$63, %eax
	je	.L17032
	cmpl	$66, %eax
	je	.L17032
.L17028:
	movq	48(%rsp), %r8
	cmpw	$55, (%r8)
	jne	.L17204
	cmpw	$55, (%r12)
	jne	.L17204
	testq	%r14, %r14
	je	.L17204
	cmpw	$46, (%r14)
	je	.L17219
.L17038:
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	movl	%r15d, %edx
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 88(%rsp)
	testl	%ebp, %ebp
	je	.L17161
.L17124:
	movslq	%ebp,%r15
	movq	%r15, %rax
	movq	%r15, 80(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L17112
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L17116
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r14)
	ja	.L17112
.L17116:
	movslq	%edx,%r11
	leaq	(%r11,%r11,4), %r15
	movq	%r11, 72(%rsp)
	salq	$4, %r15
	movq	insn_operand_predicate(%r15), %rdx
	testq	%rdx, %rdx
	jne	.L17220
.L17117:
	movq	insn_operand_predicate+8(%r15), %rdx
	testq	%rdx, %rdx
	jne	.L17221
.L17118:
	movq	insn_operand_predicate+24(%r15), %rdx
	testq	%rdx, %rdx
	je	.L17119
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	88(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L17112
.L17119:
	call	get_last_insn
	movl	$1, %edx
	movq	%r14, %rsi
	movq	%rax, 64(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r15), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L17222
.L17120:
	movq	72(%rsp), %r10
	movq	48(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	88(%rsp), %rcx
	call	*insn_gen_function(,%r10,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L17175
	movq	64(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L17112:
	movq	80(%rsp), %rdx
	movl	mode_wider_mode(,%rdx,4), %ebp
	testl	%ebp, %ebp
	jne	.L17124
.L17161:
	movq	%r14, %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%r12), %rbp
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	48(%rsp), %r12
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%rbp, (%rsp)
	movq	8(%r12), %r8
	call	emit_library_call
	jmp	.L16695
.L17175:
	call	emit_insn
	jmp	.L16695
.L17222:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L17120
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L17120
.L17221:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L17112
	jmp	.L17118
.L17220:
	xorl	%eax, %eax
	movq	48(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L17112
	jmp	.L17117
.L17219:
	movl	8(%r14), %r9d
	movl	class_narrowest_mode+4(%rip), %eax
	xorl	%r8d, %r8d
	movl	$8, %r11d
	cmpl	$8, %r15d
	movl	$9, %edi
	cmovl	%r15d, %r11d
	movq	mov_optab(%rip), %r10
	movl	$8, %ebx
	movl	%r9d, %esi
	movl	%eax, 36(%rsp)
.L17052:
	movl	36(%rsp), %edx
	xorl	%ecx, %ecx
	testl	%edx, %edx
	je	.L17152
.L17048:
	movslq	%edx,%rbp
	salq	$2, %rbp
	cmpl	%edi, mode_size(%rbp)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rbp), %edx
	testl	%edx, %edx
	jne	.L17048
.L17152:
	testl	%ecx, %ecx
	je	.L17041
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r10,%rdx)
	je	.L17050
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebx, %eax
	cmpl	%eax, %r11d
	jl	.L17050
	movl	%esi, %eax
	movl	%edx, %esi
	xorl	%edx, %edx
	divl	%esi
	addl	%eax, %r8d
	movl	%edx, %esi
.L17050:
	movl	mode_size(,%rcx,4), %edi
	cmpl	$1, %edi
	jg	.L17052
.L17041:
	decl	%r8d
	jg	.L17038
	movq	48(%rsp), %r11
	movq	8(%r12), %rdi
	xorl	%ecx, %ecx
	movl	%r9d, %ebp
	movl	$9, %r14d
	movq	8(%r11), %rbx
	movq	%r12, 184(%rsp)
	movq	%r11, 160(%rsp)
	movl	$0, 212(%rsp)
	movq	%rdi, 192(%rsp)
	movq	%rbx, 168(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L17055
	cmpw	$88, %dx
	je	.L17055
	cmpw	$87, %dx
	je	.L17055
.L17054:
	movl	%ecx, 176(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L17057
	cmpw	$88, %dx
	je	.L17057
	cmpw	$87, %dx
	je	.L17057
.L17056:
	movl	%ecx, 200(%rsp)
	movl	$0, 204(%rsp)
	movl	$0, 180(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L17059
	cmpw	$87, %ax
	je	.L17059
.L17058:
	testl	%edx, %edx
	movl	%edx, 216(%rsp)
	je	.L17060
	movl	%r9d, 212(%rsp)
.L17060:
	movl	%r9d, 208(%rsp)
	movl	200(%rsp), %r9d
	testl	%r9d, %r9d
	je	.L17062
	movl	176(%rsp), %eax
	testl	%eax, %eax
	jne	.L17061
.L17062:
	xorl	%r8d, %r8d
	movl	$8, %r11d
	movl	$9, %esi
	cmpl	$8, %r15d
	movq	mov_optab(%rip), %r10
	movl	$8, %r12d
	cmovl	%r15d, %r11d
.L17076:
	movl	36(%rsp), %edx
	xorl	%ecx, %ecx
	testl	%edx, %edx
	je	.L17155
.L17072:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%esi, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L17072
.L17155:
	testl	%ecx, %ecx
	je	.L17065
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r10,%rdx)
	je	.L17074
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %r11d
	jl	.L17074
	movl	%ebp, %eax
	movl	%edx, %ebp
	xorl	%edx, %edx
	divl	%ebp
	addl	%eax, %r8d
	movl	%edx, %ebp
.L17074:
	movl	mode_size(,%rcx,4), %esi
	cmpl	$1, %esi
	jg	.L17076
.L17065:
	cmpl	$2, %r8d
	jle	.L17061
	testl	%r9d, %r9d
	jne	.L17078
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L17079
	cmpw	$46, %dx
	je	.L17079
	cmpw	$47, %dx
	je	.L17079
	cmpw	$49, %dx
	je	.L17079
	cmpw	$113, %dx
	je	.L17079
.L17078:
	movl	176(%rsp), %eax
	testl	%eax, %eax
	jne	.L17061
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L17081
	cmpw	$46, %dx
	je	.L17081
	cmpw	$47, %dx
	je	.L17081
	cmpw	$49, %dx
	je	.L17081
	cmpw	$113, %dx
	je	.L17081
.L17061:
	cmpl	$8, %r15d
	movl	$8, %eax
	cmovge	%eax, %r15d
	cmpl	$1, %r14d
	jle	.L17084
.L17106:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L17158
.L17091:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r14d, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L17091
.L17158:
	testl	%r12d, %r12d
	je	.L17084
	movslq	%r12d,%r14
	movq	%r14, %rdi
	salq	$4, %rdi
	addq	mov_optab(%rip), %rdi
	movl	8(%rdi), %edx
	cmpl	$210, %edx
	je	.L17093
	movl	mode_size(,%r14,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, %r15d
	jl	.L17093
	movslq	%edx,%rsi
	cmpl	%ebp, 208(%rsp)
	leaq	160(%rsp), %rbx
	movq	insn_gen_function(,%rsi,8), %r8
	movq	%r8, 96(%rsp)
	jl	.L17093
	movl	216(%rsp), %edx
.L17104:
	testl	%edx, %edx
	je	.L17098
	subl	%ebp, 52(%rbx)
.L17098:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L17099
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L17182:
	movq	%rax, 40(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L17101
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L17102:
	movq	%rax, %rsi
	movq	40(%rsp), %rdi
	xorl	%eax, %eax
	call	*96(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L17103
	addl	%ebp, 52(%rbx)
.L17103:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L17104
.L17093:
	movl	mode_size(,%r14,4), %r14d
	cmpl	$1, %r14d
	jg	.L17106
.L17084:
	movl	208(%rsp), %r14d
	testl	%r14d, %r14d
	je	.L16695
	jmp	.L17204
.L17101:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L17102
.L17099:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L17182
.L17081:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 168(%rsp)
	jmp	.L17061
.L17079:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 192(%rsp)
	jmp	.L17078
.L17059:
	movl	$1, %edx
	jmp	.L17058
.L17057:
	movl	$1, %ecx
	jmp	.L17056
.L17055:
	movl	$1, %ecx
	jmp	.L17054
.L17032:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L17028
.L17218:
	movzbl	2(%r14), %edx
	cmpb	$16, %dl
	je	.L17026
	movq	8(%r14), %rbp
	cmpw	$59, (%rbp)
	je	.L17223
.L17026:
	cmpl	$55, %eax
	jne	.L17029
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L17028
.L17223:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r14)
	cmpq	$0, 16(%rbp)
	je	.L17028
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r14
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L17028
.L17025:
	cmpq	$0, 16(%r14)
	jne	.L17033
	movq	8(%r14), %r14
	jmp	.L17028
.L17033:
	movq	24(%r14), %rsi
	testq	%rsi, %rsi
	je	.L17034
	movq	%rsi, %r14
	jmp	.L17028
.L17034:
	movq	8(%r14), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L17028
.L17022:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L17018
.L17217:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L17016
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L17224
.L17016:
	cmpl	$55, %eax
	jne	.L17019
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L17018
.L17224:
	movq	8(%rbp), %rcx
	movq	%rcx, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L17018
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L17018
.L17015:
	cmpq	$0, 16(%r12)
	jne	.L17023
	movq	8(%r12), %r12
	jmp	.L17018
.L17023:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L17024
	movq	%rsi, %r12
	jmp	.L17018
.L17024:
	movq	8(%r12), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L17018
.L17012:
	movq	48(%rsp), %rbx
	xorl	%esi, %esi
	movq	8(%rbx), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	48(%rsp), %r8
	movq	16(%r8), %rdi
	movq	%rax, 8(%r8)
	call	protect_from_queue
	movq	48(%rsp), %r10
	movq	%rax, 16(%r10)
	jmp	.L17008
.L17216:
	jne	.L17009
	movq	8(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	48(%rsp), %rbp
	movq	%rax, 8(%rbp)
	jmp	.L17008
.L17005:
	movq	48(%rsp), %rbx
	cmpq	$0, 16(%rbx)
	jne	.L17013
	movq	8(%rbx), %rsi
.L17181:
	movq	%rsi, 48(%rsp)
	jmp	.L17008
.L17013:
	movq	48(%rsp), %r9
	movq	24(%r9), %rax
	testq	%rax, %rax
	je	.L17014
	movq	%rax, 48(%rsp)
	jmp	.L17008
.L17014:
	movq	48(%rsp), %r11
	movq	8(%r11), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	%rax, %rdi
	movq	48(%rsp), %rax
	movq	8(%rax), %rsi
	movq	%rdi, 24(%rax)
	call	gen_move_insn
	movq	48(%rsp), %rbp
	movq	%rax, %rdi
	movq	16(%rbp), %rsi
	call	emit_insn_before
	movq	24(%rbp), %rsi
	jmp	.L17181
.L16963:
	movq	8(%rsi), %rdx
	movq	tree_code_type(%rip), %r9
	movl	48(%rdx), %eax
	cmpl	%eax, %r8d
	movl	%eax, %edx
	cmovbe	%r8d, %edx
.L16997:
	movzbl	16(%rcx), %eax
	cmpl	$103, %eax
	ja	.L16996
	cmpl	$101, %eax
	jb	.L17225
	movq	32(%rcx), %rcx
	movq	8(%rcx), %rax
	cmpb	$13, 16(%rax)
	jne	.L16964
	movq	8(%rax), %rsi
	movl	48(%rsi), %eax
	cmpl	%eax, %r8d
	cmovbe	%r8d, %eax
	cmpl	%edx, %eax
	cmovae	%eax, %edx
	jmp	.L16997
.L17225:
	cmpl	$53, %eax
	jne	.L16964
	movq	40(%rcx), %rax
	cmpb	$25, 16(%rax)
	jne	.L16964
	movl	24(%rax), %eax
	leal	-1(%r8), %r11d
	leal	0(,%rax,8), %esi
	testl	%r11d, %esi
	je	.L17149
.L16981:
	shrl	$1, %r8d
	leal	-1(%r8), %r15d
	testl	%r15d, %esi
	jne	.L16981
.L17149:
	movq	32(%rcx), %rcx
	jmp	.L16997
.L16996:
	cmpl	$106, %eax
	jne	.L16964
	movq	32(%rcx), %rsi
	movzbl	16(%rsi), %ecx
	cmpb	$29, %cl
	je	.L17227
	movzbl	%cl, %r15d 
	movq	(%r9,%r15,8), %r11
	movzbl	(%r11), %eax
	cmpb	$100, %al
	je	.L17228
	cmpb	$99, %al
	je	.L17229
.L16985:
	cmpl	%edx, %r8d
	cmovbe	%r8d, %edx
	jmp	.L16964
.L17229:
	cmpb	$28, %cl
	jne	.L16985
	cmpl	$63, %edx
	movl	$64, %eax
	cmovbe	%eax, %edx
	jmp	.L16985
.L17228:
	movl	128(%rsi), %eax
	cmpl	%edx, %eax
	cmovae	%eax, %edx
	jmp	.L16985
.L17227:
	cmpl	$32, %edx
	jae	.L16985
	movl	$32, %edx
	jmp	.L16985
.L17215:
	cmpl	$53, %eax
	jne	.L16928
	movq	40(%rcx), %rax
	cmpb	$25, 16(%rax)
	jne	.L16928
	movl	24(%rax), %eax
	leal	-1(%r9), %ebx
	leal	0(,%rax,8), %r8d
	testl	%ebx, %r8d
	je	.L17147
.L16945:
	shrl	$1, %r9d
	leal	-1(%r9), %r15d
	testl	%r15d, %r8d
	jne	.L16945
.L17147:
	movq	32(%rcx), %rcx
	jmp	.L16961
.L16960:
	cmpl	$106, %eax
	jne	.L16928
	movq	32(%rcx), %r8
	movzbl	16(%r8), %ecx
	cmpb	$29, %cl
	je	.L17231
	movzbl	%cl, %r15d 
	movq	(%r11,%r15,8), %rbx
	movzbl	(%rbx), %eax
	cmpb	$100, %al
	je	.L17232
	cmpb	$99, %al
	je	.L17233
.L16949:
	cmpl	%edx, %r9d
	cmovbe	%r9d, %edx
	jmp	.L16928
.L17233:
	cmpb	$28, %cl
	jne	.L16949
	cmpl	$63, %edx
	movl	$64, %eax
	cmovbe	%eax, %edx
	jmp	.L16949
.L17232:
	movl	128(%r8), %eax
	cmpl	%edx, %eax
	cmovae	%eax, %edx
	jmp	.L16949
.L17231:
	cmpl	$32, %edx
	jae	.L16949
	movl	$32, %edx
	jmp	.L16949
	.p2align 6,,7
.L16880:
	movl	optimize(%rip), %r15d
	testl	%r15d, %r15d
	je	.L16696
	testq	%rbx, %rbx
	je	.L16925
	movq	32(%rbx), %rbp
	movq	8(%rbp), %r10
	cmpb	$13, 16(%r10)
	jne	.L16925
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.L16925
	movq	32(%rax), %rax
	movq	8(%rax), %rdx
	cmpb	$13, 16(%rdx)
	jne	.L16925
	movzbl	16(%rax), %edi
	movq	%rax, %rcx
	leaq	144(%rsp), %r10
	leal	-101(%rdi), %r9d
	cmpb	$2, %r9b
	ja	.L16886
	movq	32(%rax), %rsi
	movq	8(%rsi), %r11
	movzbl	44(%r11), %r8d
	cmpb	%r8b, 44(%rdx)
	je	.L16889
.L16886:
	cmpb	$106, %dil
	je	.L17234
.L16890:
	cmpb	$53, %dil
	je	.L17235
.L16892:
	xorl	%edx, %edx
.L16891:
	xorl	%eax, %eax
	testq	%rdx, %rdx
	je	.L16908
	movq	144(%rsp), %rax
	movl	32(%rdx), %edi
	movq	40(%rdx), %rcx
	testq	%rax, %rax
	je	.L17177
	cmpb	$25, 16(%rax)
	je	.L16909
	xorl	%edx, %edx
	cmpl	%edi, %edx
	jge	.L17145
.L16915:
	movslq	%edx,%r10
	cmpb	$0, (%r10,%rcx)
	je	.L17174
	incl	%edx
	cmpl	%edi, %edx
	jl	.L16915
.L17145:
	call	size_int
	movl	$54, %edi
	movq	144(%rsp), %rdx
	movq	%rax, %rsi
	call	size_binop
.L16908:
	testq	%rax, %rax
	je	.L16696
	movq	integer_one_node(%rip), %rdx
	movl	$53, %edi
	movq	%rax, %rsi
	call	size_binop
	xorl	%edi, %edi
	movq	%rax, %rsi
	call	build_tree_list
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	chainon
	jmp	.L16922
.L17174:
	xorl	%eax, %eax
	jmp	.L16908
.L16909:
	testq	%rax, %rax
	jne	.L16916
.L17177:
	xorl	%eax, %eax
.L16917:
	testl	%eax, %eax
	js	.L16920
	cmpl	%edi, %eax
	jle	.L16919
.L16920:
	movl	$.LC10, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L17174
.L16919:
	movslq	%eax,%rdx
	leaq	(%rdx,%rcx), %rdi
	call	strlen
	movl	%eax, %edi
	call	size_int
	jmp	.L16908
.L16916:
	movl	28(%rax), %esi
	testl	%esi, %esi
	jne	.L17174
	movl	24(%rax), %eax
	jmp	.L16917
	.p2align 6,,7
.L17235:
	movq	32(%rcx), %rsi
	movq	40(%rcx), %rdi
	movzbl	16(%rsi), %r9d
	leal	-101(%r9), %ecx
	cmpb	$2, %cl
	ja	.L16895
	movq	32(%rsi), %rcx
	movq	8(%rsi), %r11
	movq	8(%rcx), %r15
	movzbl	44(%r15), %r8d
	cmpb	%r8b, 44(%r11)
	je	.L16898
.L16895:
	movzbl	16(%rdi), %r8d
	leal	-101(%r8), %edx
	cmpb	$2, %dl
	ja	.L16900
	movq	32(%rdi), %rcx
	movq	8(%rdi), %rbp
	movq	8(%rcx), %r11
	movzbl	44(%r11), %r15d
	cmpb	%r15b, 44(%rbp)
	je	.L16903
.L16900:
	cmpb	$106, %r9b
	je	.L17236
.L16904:
	cmpb	$106, %r8b
	jne	.L16892
	movq	32(%rdi), %r8
	cmpb	$28, 16(%r8)
	jne	.L16892
	movq	%rsi, (%r10)
	movq	32(%rdi), %rdx
	jmp	.L16891
.L17236:
	movq	32(%rsi), %r9
	cmpb	$28, 16(%r9)
	jne	.L16904
	movq	%rdi, (%r10)
	movq	32(%rsi), %rdx
	jmp	.L16891
	.p2align 6,,7
.L16903:
	movzbl	16(%rcx), %r8d
	movq	%rcx, %rdi
	leal	-101(%r8), %ecx
	cmpb	$2, %cl
	ja	.L16900
	movq	32(%rdi), %rcx
	movq	8(%rdi), %rbp
	movq	8(%rcx), %rax
	movzbl	44(%rax), %r15d
	cmpb	%r15b, 44(%rbp)
	je	.L16903
	jmp	.L16900
	.p2align 6,,7
.L16898:
	movzbl	16(%rcx), %r9d
	movq	%rcx, %rsi
	leal	-101(%r9), %ebp
	cmpb	$2, %bpl
	ja	.L16895
	movq	8(%rcx), %r11
	movq	32(%rcx), %rcx
	movq	8(%rcx), %rax
	movzbl	44(%rax), %r8d
	cmpb	%r8b, 44(%r11)
	je	.L16898
	jmp	.L16895
	.p2align 6,,7
.L17234:
	movq	32(%rcx), %rdx
	cmpb	$28, 16(%rdx)
	jne	.L16890
	movq	integer_zero_node(%rip), %rdi
	movq	%rdi, (%r10)
	movq	32(%rcx), %rdx
	jmp	.L16891
	.p2align 6,,7
.L16889:
	movzbl	16(%rsi), %edi
	movq	%rsi, %rcx
	leal	-101(%rdi), %esi
	cmpb	$2, %sil
	ja	.L16886
	movq	32(%rcx), %rsi
	movq	8(%rcx), %rbp
	movq	8(%rsi), %rax
	movzbl	44(%rax), %r15d
	cmpb	%r15b, 44(%rbp)
	je	.L16889
	jmp	.L16886
	.p2align 6,,7
.L16786:
	movl	optimize(%rip), %r11d
	testl	%r11d, %r11d
	je	.L16696
	testq	%rbx, %rbx
	je	.L16925
	movq	32(%rbx), %r14
	movq	8(%r14), %rdx
	cmpb	$13, 16(%rdx)
	jne	.L16925
	movzbl	16(%r14), %edi
	movq	%r14, %rsi
	leaq	152(%rsp), %r10
	leal	-101(%rdi), %ecx
	cmpb	$2, %cl
	ja	.L17171
	movq	32(%r14), %rcx
	movq	8(%rcx), %rbp
	movzbl	44(%rbp), %ebx
	cmpb	%bl, 44(%rdx)
	je	.L16795
.L16792:
	cmpb	$106, %dil
	je	.L17237
.L16796:
	cmpb	$53, %dil
	je	.L17238
.L16798:
	xorl	%eax, %eax
.L16797:
	xorl	%r8d, %r8d
	testq	%rax, %rax
	je	.L16814
	movl	32(%rax), %edi
	movq	40(%rax), %rcx
	movq	152(%rsp), %rax
	testq	%rax, %rax
	je	.L17176
	cmpb	$25, 16(%rax)
	je	.L16815
	xorl	%edx, %edx
	cmpl	%edi, %edx
	jge	.L17137
.L16821:
	movslq	%edx,%rsi
	cmpb	$0, (%rsi,%rcx)
	je	.L17173
	incl	%edx
	cmpl	%edi, %edx
	jl	.L16821
.L17137:
	call	size_int
	movl	$54, %edi
	movq	152(%rsp), %rdx
	movq	%rax, %rsi
	call	size_binop
.L17180:
	movq	%rax, %r8
.L16814:
	movq	8(%r14), %rax
	movq	%r14, %rcx
	movl	$64, %esi
	cmpb	$13, 16(%rax)
	je	.L16827
	xorl	%edx, %edx
.L16828:
	cmpl	$-1, %edx
	leal	7(%rdx), %ecx
	movl	%r15d, %ebx
	cmovle	%ecx, %edx
	sarl	$3, %edx
	testq	%r8, %r8
	movl	%edx, 132(%rsp)
	jne	.L17239
	movl	132(%rsp), %eax
	testl	%eax, %eax
	je	.L16696
	testl	%r15d, %r15d
	je	.L16696
	movq	strlen_optab(%rip), %rcx
.L16869:
	movslq	%ebx,%rdx
	movq	%rdx, %r9
	salq	$4, %r9
	movl	8(%rcx,%r9), %ebp
	cmpl	$210, %ebp
	jne	.L16866
	movl	mode_wider_mode(,%rdx,4), %ebx
	testl	%ebx, %ebx
	jne	.L16869
	jmp	.L16696
.L16866:
	testl	%ebx, %ebx
	je	.L16696
	testq	%r13, %r13
	movq	%r13, 56(%rsp)
	je	.L16872
	cmpw	$51, (%r13)
	je	.L17240
.L16872:
	movl	%ebx, %edi
	call	gen_reg_rtx
	movq	%rax, 56(%rsp)
.L16871:
	movslq	%ebp,%rsi
	xorl	%eax, %eax
	movq	56(%rsp), %rdi
	leaq	(%rsi,%rsi,4), %r12
	movq	%rsi, 120(%rsp)
	movl	%ebx, %esi
	movq	%r12, %r8
	salq	$4, %r8
	movq	%r8, 112(%rsp)
	call	*insn_operand_predicate(%r8)
	testl	%eax, %eax
	je	.L17241
.L16873:
	xorl	%ecx, %ecx
	movq	%r14, %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	xorl	%eax, %eax
	call	expand_expr
	movl	$16, %edi
	movq	%rax, %rsi
	call	memory_address
	movq	112(%rsp), %r14
	movl	$4, %esi
	movq	%rax, %rdi
	movq	%rax, %rbx
	xorl	%eax, %eax
	call	*insn_operand_predicate+8(%r14)
	testl	%eax, %eax
	je	.L17242
.L16874:
	movq	const0_rtx(%rip), %rbp
	movl	insn_operand_mode+8(,%r12,8), %r12d
	xorl	%eax, %eax
	movq	112(%rsp), %rdx
	movq	%rbp, %rdi
	movl	%r12d, %esi
	call	*insn_operand_predicate+16(%rdx)
	testl	%eax, %eax
	je	.L17243
.L16875:
	movl	$55, %edi
	movl	$16, %esi
	movq	%rbx, %rdx
	xorl	%eax, %eax
	call	gen_rtx
	movl	132(%rsp), %edx
	xorl	%esi, %esi
	movq	%rax, %r12
	movl	$46, %edi
	xorl	%eax, %eax
	call	gen_rtx
	movq	120(%rsp), %r11
	movq	%rbp, %rdx
	movq	%rax, %rcx
	movq	%r12, %rsi
	movq	56(%rsp), %rdi
	xorl	%eax, %eax
	call	*insn_gen_function(,%r11,8)
	movq	%rax, %rdi
	call	emit_insn
	movq	56(%rsp), %rsi
	movzbl	2(%rsi), %edi
	cmpl	%r15d, %edi
	je	.L17244
	testq	%r13, %r13
	je	.L16878
	movq	56(%rsp), %rsi
	movq	%r13, %rdi
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	convert_move
	jmp	.L16695
.L16878:
	movq	56(%rsp), %rsi
	movl	%r15d, %edi
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	jmp	.L17183
.L17244:
	movq	%rsi, %r13
	jmp	.L16695
.L17243:
	movq	%rbp, %rsi
	movl	%r12d, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbp
	jmp	.L16875
.L17242:
	movq	%rbx, %rsi
	movl	$4, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L16874
.L17241:
	movl	%ebx, %edi
	call	gen_reg_rtx
	movq	%rax, 56(%rsp)
	jmp	.L16873
.L17240:
	movzbl	2(%r13), %r12d
	cmpl	%ebx, %r12d
	jne	.L16872
	cmpl	$63, 8(%r13)
	jg	.L16871
	jmp	.L16872
	.p2align 6,,7
.L17239:
	movl	140(%rsp), %edx
	movq	%r8, %rdi
	movq	%r13, %rsi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	jmp	.L17183
.L16827:
	movq	8(%rax), %rdi
	movq	tree_code_type(%rip), %r9
	movl	48(%rdi), %eax
	cmpl	%eax, %esi
	movl	%eax, %edx
	cmovbe	%esi, %edx
.L16861:
	movzbl	16(%rcx), %eax
	cmpl	$103, %eax
	ja	.L16860
	cmpl	$101, %eax
	jb	.L17245
	movq	32(%rcx), %rcx
	movq	8(%rcx), %rax
	cmpb	$13, 16(%rax)
	jne	.L16828
	movq	8(%rax), %rbp
	movl	48(%rbp), %eax
	cmpl	%eax, %esi
	cmovbe	%esi, %eax
	cmpl	%edx, %eax
	cmovae	%eax, %edx
	jmp	.L16861
.L17245:
	cmpl	$53, %eax
	jne	.L16828
	movq	40(%rcx), %rax
	cmpb	$25, 16(%rax)
	jne	.L16828
	movl	24(%rax), %eax
	leal	-1(%rsi), %r11d
	leal	0(,%rax,8), %edi
	testl	%r11d, %edi
	je	.L17139
.L16845:
	shrl	$1, %esi
	leal	-1(%rsi), %ebx
	testl	%ebx, %edi
	jne	.L16845
.L17139:
	movq	32(%rcx), %rcx
	jmp	.L16861
.L16860:
	cmpl	$106, %eax
	jne	.L16828
	movq	32(%rcx), %rdi
	movzbl	16(%rdi), %ecx
	cmpb	$29, %cl
	je	.L17247
	movzbl	%cl, %ebp 
	movq	(%r9,%rbp,8), %r10
	movzbl	(%r10), %eax
	cmpb	$100, %al
	je	.L17248
	cmpb	$99, %al
	je	.L17249
.L16849:
	cmpl	%edx, %esi
	cmovbe	%esi, %edx
	jmp	.L16828
.L17249:
	cmpb	$28, %cl
	jne	.L16849
	cmpl	$63, %edx
	movl	$64, %eax
	cmovbe	%eax, %edx
	jmp	.L16849
.L17248:
	movl	128(%rdi), %eax
	cmpl	%edx, %eax
	cmovae	%eax, %edx
	jmp	.L16849
.L17247:
	cmpl	$32, %edx
	jae	.L16849
	movl	$32, %edx
	jmp	.L16849
	.p2align 6,,7
.L17173:
	xorl	%r8d, %r8d
	jmp	.L16814
.L16815:
	testq	%rax, %rax
	jne	.L16822
.L17176:
	xorl	%eax, %eax
.L16823:
	testl	%eax, %eax
	js	.L16826
	cmpl	%edi, %eax
	jle	.L16825
.L16826:
	movl	$.LC10, %edi
	xorl	%eax, %eax
	call	warning
	jmp	.L17173
.L16825:
	movslq	%eax,%rdx
	leaq	(%rdx,%rcx), %rdi
	call	strlen
	movl	%eax, %edi
	call	size_int
	jmp	.L17180
.L16822:
	movl	28(%rax), %r10d
	testl	%r10d, %r10d
	jne	.L17173
	movl	24(%rax), %eax
	jmp	.L16823
.L17238:
	movq	32(%rsi), %rdi
	movq	40(%rsi), %rsi
	movzbl	16(%rdi), %r9d
	leal	-101(%r9), %ebp
	cmpb	$2, %bpl
	ja	.L16801
	movq	32(%rdi), %rcx
	movq	8(%rdi), %r11
	movq	8(%rcx), %rax
	movzbl	44(%rax), %r8d
	cmpb	%r8b, 44(%r11)
	je	.L16804
.L16801:
	movzbl	16(%rsi), %r8d
	leal	-101(%r8), %ecx
	cmpb	$2, %cl
	ja	.L16806
	movq	32(%rsi), %rcx
	movq	8(%rsi), %rbx
	movq	8(%rcx), %rax
	movzbl	44(%rax), %r11d
	cmpb	%r11b, 44(%rbx)
	je	.L16809
.L16806:
	cmpb	$106, %r9b
	je	.L17250
.L16810:
	cmpb	$106, %r8b
	jne	.L16798
	movq	32(%rsi), %r8
	cmpb	$28, 16(%r8)
	jne	.L16798
	movq	%rdi, (%r10)
.L17179:
	movq	32(%rsi), %rax
	jmp	.L16797
.L17250:
	movq	32(%rdi), %r9
	cmpb	$28, 16(%r9)
	jne	.L16810
	movq	%rsi, (%r10)
	movq	32(%rdi), %rax
	jmp	.L16797
	.p2align 6,,7
.L16809:
	movzbl	16(%rcx), %r8d
	movq	%rcx, %rsi
	leal	-101(%r8), %edx
	cmpb	$2, %dl
	ja	.L16806
	movq	8(%rcx), %r11
	movq	32(%rcx), %rcx
	movq	8(%rcx), %rbx
	movzbl	44(%rbx), %ebp
	cmpb	%bpl, 44(%r11)
	je	.L16809
	jmp	.L16806
.L16804:
	movzbl	16(%rcx), %r9d
	movq	%rcx, %rdi
	leal	-101(%r9), %edx
	cmpb	$2, %dl
	ja	.L16801
	movq	8(%rcx), %rbp
	movq	32(%rcx), %rcx
	movq	8(%rcx), %r8
	movzbl	44(%r8), %ebx
	cmpb	%bl, 44(%rbp)
	je	.L16804
	jmp	.L16801
.L17237:
	movq	32(%rsi), %rcx
	cmpb	$28, 16(%rcx)
	jne	.L16796
	movq	integer_zero_node(%rip), %rdi
	movq	%rdi, (%r10)
	jmp	.L17179
	.p2align 6,,7
.L16795:
	movzbl	16(%rcx), %edi
	movq	%rcx, %rsi
	leal	-101(%rdi), %edx
	cmpb	$2, %dl
	ja	.L16792
	movq	32(%rcx), %rbx
	movq	8(%rcx), %r9
	movq	8(%rbx), %r11
	movq	%rbx, %rcx
	movzbl	44(%r11), %r8d
	cmpb	%r8b, 44(%r9)
	je	.L16795
	jmp	.L16792
.L17171:
	movzbl	16(%r14), %edi
	jmp	.L16792
	.p2align 6,,7
.L17127:
	movq	56(%r14), %r9
	movl	$.LC11, %edi
	xorl	%eax, %eax
	movq	32(%r9), %rsi
	call	error
	jmp	.L16696
.L16722:
	movq	saveregs_value(%rip), %rax
	testq	%rax, %rax
	jne	.L17183
	call	start_sequence
	movl	$51, %edi
	movl	$7, %esi
	movl	$24, %edx
	xorl	%eax, %eax
	call	gen_rtx
	xorl	%esi, %esi
	movl	$41, %edi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, %rdi
	call	emit_insn
	xorl	%eax, %eax
	movl	$28, %edx
	movl	$51, %edi
	movl	$6, %esi
	call	gen_rtx
	xorl	%esi, %esi
	movl	$41, %edi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, %rdi
	call	emit_insn
	xorl	%eax, %eax
	movl	136(%rsp), %edx
	movq	%r13, %rsi
	movq	%r12, %rdi
	call	expand_call
	movq	%rax, %r13
	call	get_insns
	movq	%rax, %rbx
	call	end_sequence
	xorl	%eax, %eax
	movq	%r13, saveregs_value(%rip)
	call	in_sequence_p
	testl	%eax, %eax
	je	.L16724
	movl	$.LC2, %edi
	xorl	%eax, %eax
	call	error
	jmp	.L16695
.L16724:
	call	get_insns
	movq	%rbx, %rdi
	movq	24(%rax), %rsi
	call	emit_insns_before
	jmp	.L16695
.L16737:
	testq	%rbx, %rbx
	je	.L16738
	movq	32(%rbx), %rsi
	movq	8(%rsi), %rcx
	movzbl	16(%rcx), %eax
	cmpl	$6, %eax
	je	.L17251
	cmpl	$7, %eax
	je	.L17252
	cmpl	$12, %eax
	je	.L17253
	cmpl	$10, %eax
	je	.L17254
	cmpl	$11, %eax
	je	.L17255
	cmpl	$13, %eax
	je	.L17256
	cmpl	$15, %eax
	je	.L17257
	cmpl	$14, %eax
	je	.L17258
	cmpl	$8, %eax
	je	.L17259
	cmpl	$9, %eax
	je	.L17260
	cmpl	$23, %eax
	je	.L17261
	cmpl	$16, %eax
	je	.L17262
	cmpl	$21, %eax
	je	.L17263
	cmpl	$22, %eax
	je	.L17264
	cmpl	$18, %eax
	je	.L17265
	cmpl	$20, %eax
	je	.L17266
	cmpl	$19, %eax
	je	.L17267
	cmpl	$17, %eax
	je	.L17268
	cmpl	$24, %eax
	je	.L17269
.L16738:
	movl	$46, %edi
	xorl	%esi, %esi
	movl	$-1, %edx
.L17203:
	xorl	%eax, %eax
	call	gen_rtx
	jmp	.L17183
.L17269:
	movl	$46, %edi
	xorl	%esi, %esi
	movl	$18, %edx
	jmp	.L17203
.L17268:
	movl	$46, %edi
	xorl	%esi, %esi
	movl	$17, %edx
	jmp	.L17203
.L17267:
	movl	$46, %edi
	xorl	%esi, %esi
	movl	$16, %edx
	jmp	.L17203
.L17266:
	movl	$46, %edi
	xorl	%esi, %esi
	movl	$15, %edx
	jmp	.L17203
.L17265:
	movl	$46, %edi
	xorl	%esi, %esi
	movl	$14, %edx
	jmp	.L17203
.L17264:
	movl	$46, %edi
	xorl	%esi, %esi
	movl	$13, %edx
	jmp	.L17203
.L17263:
	movl	$46, %edi
	xorl	%esi, %esi
	movl	$12, %edx
	jmp	.L17203
.L17262:
	movl	$46, %edi
	xorl	%esi, %esi
	movl	$11, %edx
	jmp	.L17203
.L17261:
	movl	$46, %edi
	xorl	%esi, %esi
	movl	$10, %edx
	jmp	.L17203
.L17260:
	movl	$46, %edi
	xorl	%esi, %esi
	movl	$9, %edx
	jmp	.L17203
.L17259:
	movl	$46, %edi
	xorl	%esi, %esi
	movl	$8, %edx
	jmp	.L17203
.L17258:
	movl	$46, %edi
	xorl	%esi, %esi
	movl	$7, %edx
	jmp	.L17203
.L17257:
	movl	$46, %edi
	xorl	%esi, %esi
	movl	$6, %edx
	jmp	.L17203
.L17256:
	movl	$46, %edi
	xorl	%esi, %esi
	movl	$5, %edx
	jmp	.L17203
.L17255:
	movl	$46, %edi
	xorl	%esi, %esi
	movl	$4, %edx
	jmp	.L17203
.L17254:
	movl	$46, %edi
	xorl	%esi, %esi
	movl	$3, %edx
	jmp	.L17203
.L17253:
	movl	$46, %edi
	xorl	%esi, %esi
	movl	$2, %edx
	jmp	.L17203
.L17252:
	movl	$46, %edi
	xorl	%esi, %esi
	movl	$1, %edx
	jmp	.L17203
.L17251:
	movl	$46, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	jmp	.L17203
.L16734:
	movq	current_function_decl(%rip), %r13
	movq	8(%r13), %r11
	movq	24(%r11), %rdi
	testq	%rdi, %rdi
	je	.L16736
	call	tree_last
	movq	void_type_node(%rip), %r15
	cmpq	%r15, 32(%rax)
	je	.L16736
	movq	add_optab(%rip), %rsi
	movq	current_function_internal_arg_pointer(%rip), %rdx
	movl	$4, %edi
	movq	current_function_arg_offset_rtx(%rip), %rcx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	jmp	.L17183
.L16736:
	movl	$.LC8, %edi
.L17207:
	xorl	%eax, %eax
	call	error
	jmp	.L16925
.L16725:
	testq	%rbx, %rbx
	je	.L16727
	movq	32(%rbx), %rax
	cmpb	$25, 16(%rax)
	je	.L16728
	movl	$.LC5, %edi
	jmp	.L17207
.L16728:
	movl	24(%rax), %eax
	testl	%eax, %eax
	js	.L16731
	cmpl	$1, %eax
	jl	.L16730
.L16731:
	movl	$.LC6, %edi
	jmp	.L17207
.L16730:
	cltq
	movl	$46, %edi
	xorl	%esi, %esi
	movl	current_function_args_info(,%rax,4), %edx
	jmp	.L17203
.L16727:
	movl	$.LC7, %edi
	jmp	.L17207
.L16758:
	testq	%rbx, %rbx
	je	.L16925
	movq	32(%rbx), %rbp
	movzbq	16(%rbp), %rdx
	salq	$3, %rdx
	addq	tree_code_type(%rip), %rdx
	movq	(%rdx), %rbx
	cmpb	$99, (%rbx)
	jne	.L16925
	movq	const1_rtx(%rip), %r13
	jmp	.L16695
.L16764:
	testq	%rbx, %rbx
	je	.L16925
	movq	32(%rbx), %rdi
	cmpb	$25, 16(%rdi)
	je	.L17270
.L17208:
	movl	$.LC9, %edi
	jmp	.L17207
.L17270:
	movq	integer_zero_node(%rip), %rsi
	xorl	%eax, %eax
	call	tree_int_cst_lt
	testl	%eax, %eax
	jne	.L17208
	movq	32(%rbx), %rdi
	movq	frame_pointer_rtx(%rip), %r13
	movl	24(%rdi), %eax
	testl	%eax, %eax
	jle	.L17132
	movl	%eax, %ebx
.L16775:
	movq	%r13, %rsi
	movl	$4, %edi
	call	memory_address
	movl	$4, %esi
	movl	$55, %edi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	decl	%ebx
	movq	%rax, %r13
	jne	.L16775
.L17132:
	cmpl	$28, 128(%r14)
	je	.L16695
	movl	mode_size+16(%rip), %esi
	movq	%r13, %rdi
	call	plus_constant_wide
	movl	$4, %edi
	movq	%rax, %rsi
	call	memory_address
	movl	$4, %esi
	movl	$55, %edi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L17183
	.p2align 6,,7
.L17204:
	xorl	%eax, %eax
	call	abort
.LFE7:
.Lfe7:
	.size	expand_builtin,.Lfe7-expand_builtin
	.align 2
	.p2align 4,,15
	.type	expand_increment,@function
expand_increment:
.LFB8:
	pushq	%r15
.LCFI46:
	pushq	%r14
.LCFI47:
	pushq	%r13
.LCFI48:
	pushq	%r12
.LCFI49:
	pushq	%rbp
.LCFI50:
	pushq	%rbx
.LCFI51:
	movq	%rdi, %rbx
	subq	$680, %rsp
.LCFI52:
	movq	add_optab(%rip), %r14
	movl	%esi, 516(%rsp)
	movq	8(%rdi), %rdx
	movq	32(%rdi), %rbp
	movzbl	16(%rbp), %eax
	movzbl	44(%rdx), %r15d
	cmpb	$38, %al
	je	.L17273
	cmpb	$37, %al
	je	.L18388
.L17272:
	call	get_last_insn
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %r13
	movq	%rbp, %rdi
	xorl	%eax, %eax
	call	expand_expr
	movq	%rax, 40(%rsp)
	movq	%rax, %rdx
	movl	(%rax), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L18389
.L17274:
	movq	40(%rsp), %rdi
	xorl	%r12d, %r12d
	movzwl	(%rdi), %eax
	cmpw	$53, %ax
	je	.L17276
	cmpw	$51, %ax
	je	.L17276
.L17275:
	movq	40(%rbx), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	%rax, %r13
	movzbl	16(%rbx), %eax
	cmpb	$115, %al
	je	.L17278
	cmpb	$113, %al
	je	.L17278
.L17277:
	testl	%r12d, %r12d
	jne	.L18390
	cmpq	sub_optab(%rip), %r14
	je	.L18391
.L18261:
	movl	516(%rsp), %eax
	testl	%eax, %eax
	je	.L18266
	movslq	%r15d,%r10
	salq	$4, %r10
	movl	8(%r14,%r10), %eax
	cmpl	$210, %eax
	je	.L18262
	movslq	%eax,%r12
	movq	40(%rsp), %rdi
	movl	%r15d, %esi
	leaq	(%r12,%r12,4), %rbp
	xorl	%eax, %eax
	salq	$4, %rbp
	call	*insn_operand_predicate(%rbp)
	testl	%eax, %eax
	jne	.L18392
.L18262:
	movl	516(%rsp), %eax
	testl	%eax, %eax
	jne	.L18393
.L18266:
	movq	40(%rsp), %rbp
	movq	%rbp, %rdi
	call	copy_rtx
	movq	%rax, %r12
.L18267:
	movq	8(%rbx), %rdi
	movq	40(%rsp), %r8
	xorl	%eax, %eax
	movq	%r14, %rsi
	movq	%rbp, %rdx
	movq	%r13, %rcx
	movzbl	17(%rdi), %r9d
	movl	%r15d, %edi
	movl	$3, (%rsp)
	shrb	$6, %r9b
	andl	$1, %r9d
	call	expand_binop
	cmpq	40(%rsp), %rax
	je	.L18268
	movq	40(%rsp), %rdi
	movq	%rax, %rsi
	call	emit_move_insn
.L18268:
	movq	%r12, 40(%rsp)
.L17271:
	movq	40(%rsp), %rax
	addq	$680, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L18393:
	movq	40(%rsp), %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	movq	%rax, %r12
	movq	%rax, %rbp
	jmp	.L18267
.L18392:
	xorl	%eax, %eax
	movq	40(%rsp), %rdi
	movl	%r15d, %esi
	call	*insn_operand_predicate+8(%rbp)
	testl	%eax, %eax
	je	.L18262
	xorl	%eax, %eax
	movq	%r13, %rdi
	movl	%r15d, %esi
	call	*insn_operand_predicate+16(%rbp)
	testl	%eax, %eax
	je	.L18394
.L18264:
	movq	40(%rsp), %rdi
	movq	%r13, %rdx
	xorl	%eax, %eax
	movq	%rdi, %rsi
	call	*insn_gen_function(,%r12,8)
	xorl	%ecx, %ecx
	movq	40(%rsp), %r8
	movq	pending_chain(%rip), %r13
	movl	$59, %edi
	movq	40(%rsp), %rdx
	movzbl	2(%r8), %esi
	movq	%rax, %r9
	xorl	%r8d, %r8d
	xorl	%eax, %eax
	movq	%r13, (%rsp)
	call	gen_rtx
	movq	%rax, pending_chain(%rip)
	movq	%rax, 40(%rsp)
	jmp	.L17271
.L18394:
	movq	%r13, %rsi
	movl	%r15d, %edi
	call	force_reg
	movq	%rax, %r13
	jmp	.L18264
	.p2align 6,,7
.L18391:
	cmpw	$46, (%r13)
	jne	.L18261
	movl	8(%r13), %edx
	movl	$46, %edi
	xorl	%esi, %esi
	xorl	%eax, %eax
	negl	%edx
	call	gen_rtx
	movq	add_optab(%rip), %r14
	movq	%rax, %r13
	jmp	.L18261
.L18390:
	cmpq	add_optab(%rip), %r14
	movq	8(%rbx), %rsi
	movq	%rbp, %rdx
	setne	%al
	movq	40(%rbx), %rcx
	xorl	%ebx, %ebx
	movzbl	%al, %edi
	xorl	%eax, %eax
	addl	$53, %edi
	call	build
	movq	$0, 176(%rsp)
	cmpl	$0, 516(%rsp)
	sete	%bl
	movq	%rax, 504(%rsp)
	movl	%ebx, 500(%rsp)
	movzbl	16(%rbp), %edx
	testb	%dl, %dl
	je	.L18395
	leal	-37(%rdx), %r8d
	cmpb	$1, %r8b
	jbe	.L17287
	cmpb	$42, %dl
	je	.L18396
.L17286:
	cmpq	$0, 176(%rsp)
	je	.L18397
.L17803:
	cmpb	$35, %dl
	je	.L18398
	movq	504(%rsp), %r11
	movzbl	16(%r11), %eax
.L17804:
	cmpb	$44, %al
	movl	$0, 276(%rsp)
	je	.L18399
	cmpb	$48, %al
	je	.L18400
.L17813:
	movl	500(%rsp), %r13d
	testl	%r13d, %r13d
	je	.L17840
	movq	176(%rsp), %rcx
	cmpw	$55, (%rcx)
	je	.L18401
.L17840:
	movq	176(%rsp), %r14
	movzwl	(%r14), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L17848
	mov	%eax, %r10d
	jmp	*.L17857(,%r10,8)
	.section	.rodata
	.align 8
	.align 4
.L17857:
	.quad	.L17851
	.quad	.L17848
	.quad	.L17848
	.quad	.L17848
	.quad	.L17856
	.quad	.L17848
	.quad	.L17848
	.quad	.L17848
	.quad	.L17854
	.quad	.L17854
	.quad	.L17848
	.quad	.L17854
	.text
.L17851:
	movq	176(%rsp), %rax
	movq	8(%rax), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %ebx
.L17850:
	testl	%ebx, %ebx
	je	.L17847
	movq	176(%rsp), %rbx
	movzbl	2(%rbx), %eax
	cmpb	$16, %al
	je	.L17859
	testb	%al, %al
	jne	.L18402
.L17859:
	movq	176(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	2(%rdi), %edx
	movq	504(%rsp), %rdi
.L18374:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L18385:
	movq	%rax, %rbp
.L17866:
	movl	$1, 276(%rsp)
.L17812:
	cmpq	176(%rsp), %rbp
	je	.L17867
	movq	504(%rsp), %rdx
	cmpb	$0, 16(%rdx)
	je	.L17867
	movq	176(%rsp), %rdi
	movzwl	(%rdi), %eax
	cmpl	$59, %eax
	je	.L17868
	cmpl	$55, %eax
	je	.L18403
.L17872:
	cmpl	$63, %eax
	je	.L17875
	cmpl	$66, %eax
	je	.L17875
.L17871:
	movq	176(%rsp), %r11
	movzbl	2(%rbp), %eax
	movzbl	2(%r11), %ecx
	cmpb	%cl, %al
	je	.L17878
	testb	%al, %al
	je	.L17878
	movq	504(%rsp), %r8
	movl	276(%rsp), %eax
	movq	8(%r8), %r13
	movzbl	17(%r13), %esi
	shrb	$6, %sil
	movl	%esi, %edx
	andl	$1, %edx
	testl	%eax, %eax
	je	.L17879
	movq	%rbp, %rsi
	movzbl	%cl, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%rax, %rbp
.L18134:
	movq	176(%rsp), %rdi
	movq	%rbp, %rsi
	call	emit_move_insn
.L17867:
	movl	276(%rsp), %eax
	testl	%eax, %eax
	cmove	176(%rsp), %rbp
.L17811:
	movq	%rbp, %rdi
	xorl	%eax, %eax
	call	preserve_temp_slots
	xorl	%eax, %eax
	call	free_temp_slots
	movq	%rbp, 176(%rsp)
.L17285:
	movl	516(%rsp), %eax
	movq	40(%rsp), %rbp
	testl	%eax, %eax
	cmove	176(%rsp), %rbp
	movq	%rbp, 40(%rsp)
	jmp	.L17271
.L17879:
	movq	176(%rsp), %rdi
	movq	%rbp, %rsi
	xorl	%eax, %eax
	call	convert_move
	jmp	.L17867
.L17878:
	cmpb	$16, %al
	jne	.L18134
	movq	504(%rsp), %rcx
	cmpb	$28, 16(%rcx)
	je	.L18404
	cmpb	$16, %al
	jne	.L18134
	movq	504(%rsp), %rdi
	xorl	%eax, %eax
	movq	%rbp, 192(%rsp)
	call	expr_size
	movq	176(%rsp), %r15
	movq	504(%rsp), %r9
	movq	%rax, %r13
	movq	8(%r9), %rdi
	movl	48(%rdi), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r15)
	movl	%eax, 188(%rsp)
	jne	.L18382
	cmpb	$16, 2(%rbp)
	jne	.L18382
	movq	176(%rsp), %rbx
	movq	%rbx, 200(%rsp)
	movzwl	(%rbx), %eax
	cmpl	$59, %eax
	je	.L18137
	cmpl	$55, %eax
	je	.L18405
	cmpl	$63, %eax
	je	.L18144
	cmpl	$66, %eax
	je	.L18144
.L18140:
	movzwl	(%rbp), %eax
	cmpl	$59, %eax
	je	.L18147
	cmpl	$55, %eax
	je	.L18406
.L18151:
	cmpl	$63, %eax
	je	.L18154
	cmpl	$66, %eax
	je	.L18154
.L18150:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L18157
	cmpl	$55, %eax
	je	.L18407
.L18161:
	cmpl	$63, %eax
	je	.L18164
	cmpl	$66, %eax
	je	.L18164
.L18160:
	movq	200(%rsp), %rax
	cmpw	$55, (%rax)
	jne	.L18382
	movq	192(%rsp), %rsi
	cmpw	$55, (%rsi)
	jne	.L18382
	testq	%r13, %r13
	je	.L18382
	cmpw	$46, (%r13)
	je	.L18408
.L18170:
	movl	188(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %r12d
	movq	%rax, 296(%rsp)
	testl	%r12d, %r12d
	je	.L18356
.L18256:
	movslq	%r12d,%r14
	movq	%r14, %rax
	movq	%r14, 288(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L18244
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L18248
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L18244
.L18248:
	movslq	%edx,%r15
	leaq	(%r15,%r15,4), %r14
	salq	$4, %r14
	movq	insn_operand_predicate(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L18409
.L18249:
	movq	insn_operand_predicate+8(%r14), %rdx
	testq	%rdx, %rdx
	jne	.L18410
.L18250:
	movq	insn_operand_predicate+24(%r14), %rdx
	testq	%rdx, %rdx
	je	.L18251
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	296(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L18244
.L18251:
	call	get_last_insn
	movl	$1, %edx
	movq	%r13, %rsi
	movq	%rax, 280(%rsp)
	movl	%r12d, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r14), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L18411
.L18252:
	movq	200(%rsp), %rdi
	xorl	%eax, %eax
	movq	192(%rsp), %rsi
	movq	%rbx, %rdx
	movq	296(%rsp), %rcx
	call	*insn_gen_function(,%r15,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L18363
	movq	280(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L18244:
	movq	288(%rsp), %r11
	movl	mode_wider_mode(,%r11,4), %r12d
	testl	%r12d, %r12d
	jne	.L18256
.L18356:
	movl	$4, %edi
	movq	%r13, %rsi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movq	200(%rsp), %rbx
	movl	$3, %ecx
	movq	192(%rsp), %rsi
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%edx, %edx
	movq	8(%rsi), %r12
	xorl	%esi, %esi
	movl	$4, 24(%rsp)
	movl	$4, 8(%rsp)
	movq	%rax, 16(%rsp)
	movq	%r12, (%rsp)
.L18380:
	movq	8(%rbx), %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	call	emit_library_call
	jmp	.L17867
.L18363:
	call	emit_insn
	jmp	.L17867
	.p2align 6,,7
.L18411:
	movq	%rax, %rdi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L18252
	movq	%rbx, %rsi
	movl	%r12d, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L18252
	.p2align 6,,7
.L18410:
	xorl	%eax, %eax
	movq	192(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L18244
	jmp	.L18250
.L18409:
	xorl	%eax, %eax
	movq	200(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L18244
	jmp	.L18249
.L18408:
	movl	8(%r13), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 188(%rsp)
	movl	$9, %esi
	movl	class_narrowest_mode+4(%rip), %r8d
	cmovl	188(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	movl	%r10d, %edi
.L18184:
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	testl	%r8d, %r8d
	je	.L18347
.L18180:
	movslq	%edx,%r15
	salq	$2, %r15
	cmpl	%esi, mode_size(%r15)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r15), %edx
	testl	%edx, %edx
	jne	.L18180
.L18347:
	testl	%ecx, %ecx
	je	.L18173
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L18182
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebx
	jl	.L18182
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L18182:
	movl	mode_size(,%rcx,4), %esi
	cmpl	$1, %esi
	jg	.L18184
.L18173:
	decl	%r9d
	jg	.L18170
	movq	192(%rsp), %rcx
	movq	200(%rsp), %r14
	movl	%r10d, %r13d
	movq	200(%rsp), %r12
	movq	8(%r14), %rbx
	movq	8(%rcx), %rdi
	movl	$9, %r14d
	movq	%rcx, 632(%rsp)
	movl	$0, 660(%rsp)
	movq	%r12, 608(%rsp)
	xorl	%ecx, %ecx
	movq	%rbx, 616(%rsp)
	movq	%rdi, 640(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L18187
	cmpw	$88, %dx
	je	.L18187
	cmpw	$87, %dx
	je	.L18187
.L18186:
	movl	%ecx, 624(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L18189
	cmpw	$88, %dx
	je	.L18189
	cmpw	$87, %dx
	je	.L18189
.L18188:
	movl	%ecx, 648(%rsp)
	movl	$0, 652(%rsp)
	movl	$0, 628(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L18191
	cmpw	$87, %ax
	je	.L18191
.L18190:
	testl	%edx, %edx
	movl	%edx, 664(%rsp)
	je	.L18192
	movl	%r10d, 660(%rsp)
.L18192:
	movl	%r10d, 656(%rsp)
	movl	648(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L18194
	movl	624(%rsp), %eax
	testl	%eax, %eax
	jne	.L18193
.L18194:
	xorl	%r9d, %r9d
	movl	$8, %r12d
	movl	$9, %esi
	cmpl	$8, 188(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r15d
	cmovl	188(%rsp), %r12d
.L18208:
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	testl	%r8d, %r8d
	je	.L18350
.L18204:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%esi, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L18204
.L18350:
	testl	%ecx, %ecx
	je	.L18197
	movslq	%ecx,%rcx
	movq	%rcx, %rsi
	salq	$4, %rsi
	cmpl	$210, 8(%r11,%rsi)
	je	.L18206
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r15d, %eax
	cmpl	%eax, %r12d
	jl	.L18206
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L18206:
	movl	mode_size(,%rcx,4), %esi
	cmpl	$1, %esi
	jg	.L18208
.L18197:
	cmpl	$2, %r9d
	jle	.L18193
	testl	%r10d, %r10d
	jne	.L18210
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L18211
	cmpw	$46, %dx
	je	.L18211
	cmpw	$47, %dx
	je	.L18211
	cmpw	$49, %dx
	je	.L18211
	cmpw	$113, %dx
	je	.L18211
.L18210:
	movl	624(%rsp), %r8d
	testl	%r8d, %r8d
	jne	.L18193
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L18213
	cmpw	$46, %dx
	je	.L18213
	cmpw	$47, %dx
	je	.L18213
	cmpw	$49, %dx
	je	.L18213
	cmpw	$113, %dx
	je	.L18213
.L18193:
	cmpl	$8, 188(%rsp)
	movl	$8, %eax
	cmovl	188(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 188(%rsp)
	jle	.L18216
.L18238:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r13d, %r13d
	testl	%edx, %edx
	je	.L18353
.L18223:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r14d, mode_size(%rbx)
	cmovl	%edx, %r13d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L18223
.L18353:
	testl	%r13d, %r13d
	je	.L18216
	movslq	%r13d,%r14
	movq	%r14, %rdi
	salq	$4, %rdi
	addq	mov_optab(%rip), %rdi
	movl	8(%rdi), %edx
	cmpl	$210, %edx
	je	.L18225
	movl	mode_size(,%r14,4), %r12d
	movl	$8, %eax
	cmpl	$9, %r12d
	cmovl	%r12d, %eax
	cmpl	%eax, 188(%rsp)
	jl	.L18225
	movslq	%edx,%r9
	cmpl	%r12d, 656(%rsp)
	leaq	608(%rsp), %rbx
	movq	insn_gen_function(,%r9,8), %rdx
	movq	%rdx, 304(%rsp)
	jl	.L18225
	movl	664(%rsp), %edx
.L18236:
	testl	%edx, %edx
	je	.L18230
	subl	%r12d, 52(%rbx)
.L18230:
	movl	16(%rbx), %ecx
	testl	%ecx, %ecx
	je	.L18231
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L18379:
	movq	%rax, %r15
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L18233
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L18234:
	movq	%rax, %rsi
	movq	%r15, %rdi
	xorl	%eax, %eax
	call	*304(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L18235
	addl	%r12d, 52(%rbx)
.L18235:
	movl	48(%rbx), %eax
	subl	%r12d, %eax
	cmpl	%r12d, %eax
	movl	%eax, 48(%rbx)
	jge	.L18236
.L18225:
	movl	mode_size(,%r14,4), %r14d
	cmpl	$1, %r14d
	jg	.L18238
.L18216:
	movl	656(%rsp), %eax
	testl	%eax, %eax
.L18387:
	je	.L17867
	jmp	.L18382
	.p2align 6,,7
.L18233:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L18234
.L18231:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L18379
.L18213:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 616(%rsp)
	jmp	.L18193
.L18211:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 640(%rsp)
	jmp	.L18210
.L18191:
	movl	$1, %edx
	jmp	.L18190
.L18189:
	movl	$1, %ecx
	jmp	.L18188
.L18187:
	movl	$1, %ecx
	jmp	.L18186
	.p2align 6,,7
.L18164:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L18160
.L18407:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L18158
	movq	8(%r13), %r12
	cmpw	$59, (%r12)
	je	.L18412
.L18158:
	cmpl	$55, %eax
	jne	.L18161
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L18160
.L18412:
	movq	8(%r12), %rbx
	movq	%rbx, 8(%r13)
	cmpq	$0, 16(%r12)
	je	.L18160
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	%r14, %r13
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L18160
	.p2align 6,,7
.L18157:
	cmpq	$0, 16(%r13)
	jne	.L18165
	movq	8(%r13), %r13
	jmp	.L18160
.L18165:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L18166
	movq	%rsi, %r13
	jmp	.L18160
.L18166:
	movq	8(%r13), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L18160
	.p2align 6,,7
.L18154:
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbp), %rdi
	movq	%rax, 8(%rbp)
	call	protect_from_queue
	movq	%rax, 16(%rbp)
	jmp	.L18150
.L18406:
	movzbl	2(%rbp), %edx
	cmpb	$16, %dl
	je	.L18148
	movq	8(%rbp), %r12
	cmpw	$59, (%r12)
	je	.L18413
.L18148:
	cmpl	$55, %eax
	jne	.L18151
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbp)
	jmp	.L18150
.L18413:
	movq	8(%r12), %rdi
	movq	%rdi, 8(%rbp)
	cmpq	$0, 16(%r12)
	je	.L18150
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%rbp, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L18378:
	movq	%rbx, 192(%rsp)
	jmp	.L18150
	.p2align 6,,7
.L18147:
	cmpq	$0, 16(%rbp)
	jne	.L18155
	movq	8(%rbp), %rbx
	jmp	.L18378
.L18155:
	movq	24(%rbp), %rdx
	testq	%rdx, %rdx
	movq	%rdx, 192(%rsp)
	jne	.L18150
	movq	8(%rbp), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbp)
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbp), %r12
	movq	%r12, 192(%rsp)
	jmp	.L18150
	.p2align 6,,7
.L18144:
	movq	176(%rsp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	176(%rsp), %r12
	movq	%rax, 8(%r12)
	movq	176(%rsp), %rdx
	movq	16(%rdx), %rdi
	call	protect_from_queue
	movq	176(%rsp), %r10
	movq	%rax, 16(%r10)
	jmp	.L18140
.L18405:
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbx)
	jmp	.L18140
	.p2align 6,,7
.L18137:
	movq	176(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L18145
	movq	8(%rcx), %r8
	movq	%r8, 200(%rsp)
	jmp	.L18140
.L18145:
	movq	176(%rsp), %r14
	movq	24(%r14), %rbx
	testq	%rbx, %rbx
	movq	%rbx, 200(%rsp)
	jne	.L18140
	movq	176(%rsp), %r10
	movq	8(%r10), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	176(%rsp), %r15
	movq	%rax, %rdi
	movq	8(%r15), %rsi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	176(%rsp), %rcx
	movq	%rax, %rdi
	movq	16(%rcx), %rsi
	call	emit_insn_before
	movq	176(%rsp), %rsi
	movq	24(%rsi), %r11
	movq	%r11, 200(%rsp)
	jmp	.L18140
	.p2align 6,,7
.L18404:
	xorl	%eax, %eax
	movq	%rcx, %rdi
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, %r15
	je	.L18414
.L17883:
	movl	$8, %edi
	call	size_int
	movl	$57, %edi
	movq	504(%rsp), %rbx
	movq	%rax, %rdx
	movq	8(%rbx), %r10
	movq	32(%r10), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	504(%rsp), %rdx
	movq	%rax, %r14
	movl	32(%rdx), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%r14, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movq	176(%rsp), %r9
	movq	504(%rsp), %r8
	movq	$0, 208(%rsp)
	movq	%rax, 232(%rsp)
	movq	%rax, %r14
	movq	8(%r8), %r13
	movl	48(%r13), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r9)
	movl	%eax, 228(%rsp)
	jne	.L18382
	cmpb	$16, 2(%rbp)
	jne	.L18382
	movq	176(%rsp), %rbx
	movq	%rbx, 240(%rsp)
	movzwl	(%rbx), %eax
	cmpl	$59, %eax
	je	.L18009
	cmpl	$55, %eax
	je	.L18415
	cmpl	$63, %eax
	je	.L18016
	cmpl	$66, %eax
	je	.L18016
.L18012:
	movzwl	(%rbp), %eax
	cmpl	$59, %eax
	je	.L18019
	cmpl	$55, %eax
	je	.L18416
.L18023:
	cmpl	$63, %eax
	je	.L18026
	cmpl	$66, %eax
	je	.L18026
.L18022:
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L18029
	cmpl	$55, %eax
	je	.L18417
.L18033:
	cmpl	$63, %eax
	je	.L18036
	cmpl	$66, %eax
	je	.L18036
.L18032:
	movq	240(%rsp), %r8
	cmpw	$55, (%r8)
	jne	.L18382
	cmpw	$55, (%rbp)
	jne	.L18382
	cmpq	$0, 232(%rsp)
	je	.L18382
	movq	232(%rsp), %rax
	cmpw	$46, (%rax)
	je	.L18418
.L18042:
	movl	228(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %r12d
	movq	%rax, 336(%rsp)
	testl	%r12d, %r12d
	je	.L18344
.L18128:
	movslq	%r12d,%rdx
	movq	%rdx, %rax
	movq	%rdx, 328(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L18116
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L18120
	movq	232(%rsp), %r10
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r10)
	ja	.L18116
.L18120:
	movslq	%edx,%rax
	leaq	(%rax,%rax,4), %r13
	movq	%rax, 320(%rsp)
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L18419
.L18121:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L18420
.L18122:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L18123
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	336(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L18116
.L18123:
	call	get_last_insn
	movl	$1, %edx
	movq	232(%rsp), %rsi
	movq	%rax, 312(%rsp)
	movl	%r12d, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L18421
.L18124:
	movq	320(%rsp), %r12
	movq	240(%rsp), %rdi
	xorl	%eax, %eax
	movq	%rbp, %rsi
	movq	%rbx, %rdx
	movq	336(%rsp), %rcx
	call	*insn_gen_function(,%r12,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L18362
	movq	312(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L18116:
	movq	328(%rsp), %r8
	movl	mode_wider_mode(,%r8,4), %r12d
	testl	%r12d, %r12d
	jne	.L18128
.L18344:
	movq	232(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%rbp), %rbx
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	240(%rsp), %rbp
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%rbx, (%rsp)
	movq	8(%rbp), %r8
	call	emit_library_call
.L18126:
	cmpw	$46, (%r14)
	je	.L18422
	movq	176(%rsp), %rcx
	movl	$4, %edi
	movq	8(%rcx), %rsi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movl	$4, %edi
	movq	%r14, %rcx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movl	$4, %edi
	movq	%r15, %rdx
	movq	%r14, %rcx
	movq	%rax, %rbp
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 208(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L18130:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L18131
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%rbp, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L18131:
	cmpq	$0, 208(%rsp)
	je	.L17867
	movq	208(%rsp), %rdi
	call	emit_label
	jmp	.L17867
.L18422:
	movq	176(%rsp), %rsi
	movq	504(%rsp), %r11
	movq	8(%rsi), %rdi
	movl	32(%r11), %esi
	call	plus_constant_wide
	movq	%r15, %rdi
	movq	504(%rsp), %r14
	movq	%rax, %rbp
	movl	32(%r14), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L18130
.L18362:
	call	emit_insn
	jmp	.L18126
	.p2align 6,,7
.L18421:
	movq	%rax, %rdi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L18124
	movq	%rbx, %rsi
	movl	%r12d, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L18124
	.p2align 6,,7
.L18420:
	xorl	%eax, %eax
	movq	%rbp, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L18116
	jmp	.L18122
.L18419:
	xorl	%eax, %eax
	movq	240(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L18116
	jmp	.L18121
.L18418:
	movl	8(%rax), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 228(%rsp)
	movl	$9, %esi
	movl	class_narrowest_mode+4(%rip), %r8d
	cmovl	228(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	movl	%r10d, %edi
.L18056:
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	testl	%r8d, %r8d
	je	.L18335
.L18052:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%esi, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L18052
.L18335:
	testl	%ecx, %ecx
	je	.L18045
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L18054
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebx
	jl	.L18054
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r9d
	movl	%edx, %edi
.L18054:
	movl	mode_size(,%rcx,4), %esi
	cmpl	$1, %esi
	jg	.L18056
.L18045:
	decl	%r9d
	jg	.L18042
	movq	240(%rsp), %rsi
	movq	8(%rbp), %rdi
	xorl	%ecx, %ecx
	movq	240(%rsp), %r11
	movl	%r10d, %r12d
	movl	$9, %r13d
	movq	8(%rsi), %rbx
	movq	%rbp, 632(%rsp)
	movq	%rdi, 640(%rsp)
	movl	$0, 660(%rsp)
	movq	%r11, 608(%rsp)
	movq	%rbx, 616(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L18059
	cmpw	$88, %dx
	je	.L18059
	cmpw	$87, %dx
	je	.L18059
.L18058:
	movl	%ecx, 624(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L18061
	cmpw	$88, %dx
	je	.L18061
	cmpw	$87, %dx
	je	.L18061
.L18060:
	movl	%ecx, 648(%rsp)
	movl	$0, 652(%rsp)
	movl	$0, 628(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L18063
	cmpw	$87, %ax
	je	.L18063
.L18062:
	testl	%edx, %edx
	movl	%edx, 664(%rsp)
	je	.L18064
	movl	%r10d, 660(%rsp)
.L18064:
	movl	648(%rsp), %eax
	movl	%r10d, 656(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L18066
	movl	624(%rsp), %ecx
	testl	%ecx, %ecx
	jne	.L18065
.L18066:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %esi
	cmpl	$8, 228(%rsp)
	movq	mov_optab(%rip), %r11
	cmovl	228(%rsp), %ebp
.L18080:
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	testl	%r8d, %r8d
	je	.L18338
.L18076:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%esi, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L18076
.L18338:
	testl	%ecx, %ecx
	je	.L18069
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L18078
	movl	mode_size(,%rcx,4), %eax
	movl	$8, %esi
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%esi, %eax
	cmpl	%eax, %ebp
	jl	.L18078
	movl	%r12d, %eax
	movl	%edx, %r12d
	xorl	%edx, %edx
	divl	%r12d
	addl	%eax, %r9d
	movl	%edx, %r12d
.L18078:
	movl	mode_size(,%rcx,4), %esi
	cmpl	$1, %esi
	jg	.L18080
.L18069:
	cmpl	$2, %r9d
	jle	.L18065
	testl	%r10d, %r10d
	jne	.L18082
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L18083
	cmpw	$46, %dx
	je	.L18083
	cmpw	$47, %dx
	je	.L18083
	cmpw	$49, %dx
	je	.L18083
	cmpw	$113, %dx
	je	.L18083
.L18082:
	movl	624(%rsp), %eax
	testl	%eax, %eax
	jne	.L18065
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L18085
	cmpw	$46, %dx
	je	.L18085
	cmpw	$47, %dx
	je	.L18085
	cmpw	$49, %dx
	je	.L18085
	cmpw	$113, %dx
	je	.L18085
.L18065:
	cmpl	$8, 228(%rsp)
	movl	$8, %eax
	cmovl	228(%rsp), %eax
	cmpl	$1, %r13d
	movl	%eax, 228(%rsp)
	jle	.L18088
.L18110:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L18341
.L18095:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r13d, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L18095
.L18341:
	testl	%r12d, %r12d
	je	.L18088
	movslq	%r12d,%r13
	movq	%r13, %rdi
	salq	$4, %rdi
	addq	mov_optab(%rip), %rdi
	movl	8(%rdi), %edx
	cmpl	$210, %edx
	je	.L18097
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 228(%rsp)
	jl	.L18097
	movslq	%edx,%rsi
	cmpl	%ebp, 656(%rsp)
	leaq	608(%rsp), %rbx
	movq	insn_gen_function(,%rsi,8), %r11
	movq	%r11, 344(%rsp)
	jl	.L18097
	movl	664(%rsp), %edx
.L18108:
	testl	%edx, %edx
	je	.L18102
	subl	%ebp, 52(%rbx)
.L18102:
	movl	16(%rbx), %ecx
	testl	%ecx, %ecx
	je	.L18103
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L18377:
	movl	40(%rbx), %r9d
	movq	%rax, 216(%rsp)
	testl	%r9d, %r9d
	je	.L18105
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L18106:
	movq	%rax, %rsi
	movq	216(%rsp), %rdi
	xorl	%eax, %eax
	call	*344(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L18107
	addl	%ebp, 52(%rbx)
.L18107:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L18108
.L18097:
	movl	mode_size(,%r13,4), %r13d
	cmpl	$1, %r13d
	jg	.L18110
.L18088:
	movl	656(%rsp), %r13d
	testl	%r13d, %r13d
	je	.L18126
	jmp	.L18382
	.p2align 6,,7
.L18105:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L18106
.L18103:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L18377
.L18085:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 616(%rsp)
	jmp	.L18065
.L18083:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 640(%rsp)
	jmp	.L18082
.L18063:
	movl	$1, %edx
	jmp	.L18062
.L18061:
	movl	$1, %ecx
	jmp	.L18060
.L18059:
	movl	$1, %ecx
	jmp	.L18058
.L18036:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L18032
.L18417:
	movzbl	2(%r14), %edx
	cmpb	$16, %dl
	je	.L18030
	movq	8(%r14), %r12
	cmpw	$59, (%r12)
	je	.L18423
.L18030:
	cmpl	$55, %eax
	jne	.L18033
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L18032
.L18423:
	movq	8(%r12), %rdi
	movq	%rdi, 8(%r14)
	cmpq	$0, 16(%r12)
	je	.L18032
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L18376:
	movq	%rbx, 232(%rsp)
	jmp	.L18032
	.p2align 6,,7
.L18029:
	cmpq	$0, 16(%r14)
	jne	.L18037
	movq	8(%r14), %rbx
	jmp	.L18376
.L18037:
	movq	24(%r14), %rax
	testq	%rax, %rax
	movq	%rax, 232(%rsp)
	jne	.L18032
	movq	8(%r14), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r12
	movq	%r12, 232(%rsp)
	jmp	.L18032
.L18026:
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbp), %rdi
	movq	%rax, 8(%rbp)
	call	protect_from_queue
	movq	%rax, 16(%rbp)
	jmp	.L18022
.L18416:
	movzbl	2(%rbp), %edx
	cmpb	$16, %dl
	je	.L18020
	movq	8(%rbp), %r12
	cmpw	$59, (%r12)
	je	.L18424
.L18020:
	cmpl	$55, %eax
	jne	.L18023
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbp)
	jmp	.L18022
.L18424:
	movq	8(%r12), %rsi
	movq	%rsi, 8(%rbp)
	cmpq	$0, 16(%r12)
	je	.L18022
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%rbp, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	%r13, %rbp
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L18022
	.p2align 6,,7
.L18019:
	cmpq	$0, 16(%rbp)
	jne	.L18027
	movq	8(%rbp), %rbp
	jmp	.L18022
.L18027:
	movq	24(%rbp), %rax
	testq	%rax, %rax
	je	.L18028
	movq	%rax, %rbp
	jmp	.L18022
.L18028:
	movq	8(%rbp), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbp)
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbp), %rbp
	jmp	.L18022
.L18016:
	movq	176(%rsp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	movq	176(%rsp), %rcx
	movq	%rax, 8(%rcx)
	movq	176(%rsp), %rsi
	movq	16(%rsi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	176(%rsp), %r11
	movq	%rax, 16(%r11)
	jmp	.L18012
.L18415:
	movq	8(%rbx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbx)
	jmp	.L18012
	.p2align 6,,7
.L18009:
	movq	176(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L18017
	movq	8(%rcx), %rdi
	movq	%rdi, 240(%rsp)
	jmp	.L18012
.L18017:
	movq	176(%rsp), %r9
	movq	24(%r9), %r12
	testq	%r12, %r12
	movq	%r12, 240(%rsp)
	jne	.L18012
	movq	176(%rsp), %r11
	movq	8(%r11), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	176(%rsp), %rdx
	movq	%rax, %rdi
	movq	8(%rdx), %rsi
	movq	%rax, 24(%rdx)
	call	gen_move_insn
	movq	176(%rsp), %r10
	movq	%rax, %rdi
	movq	16(%r10), %rsi
	call	emit_insn_before
	movq	176(%rsp), %r8
	movq	24(%r8), %r13
	movq	%r13, 240(%rsp)
	jmp	.L18012
	.p2align 6,,7
.L18414:
	movq	504(%rsp), %rbx
	movl	32(%rbx), %eax
	cmpl	%eax, 8(%r15)
	jge	.L17883
	movq	%rbp, 256(%rsp)
	movq	176(%rsp), %rcx
	movq	8(%rbx), %rdx
	movl	48(%rdx), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%rcx)
	movl	%eax, 252(%rsp)
	jne	.L18382
	cmpb	$16, 2(%rbp)
	jne	.L18382
	movq	176(%rsp), %rdi
	movq	%rdi, 264(%rsp)
	movzwl	(%rdi), %eax
	cmpl	$59, %eax
	je	.L17886
	cmpl	$55, %eax
	je	.L18425
	cmpl	$63, %eax
	je	.L17893
	cmpl	$66, %eax
	je	.L17893
.L17889:
	movzwl	(%rbp), %eax
	cmpl	$59, %eax
	je	.L17896
	cmpl	$55, %eax
	je	.L18426
.L17900:
	cmpl	$63, %eax
	je	.L17903
	cmpl	$66, %eax
	je	.L17903
.L17899:
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L17906
	cmpl	$55, %eax
	je	.L18427
.L17910:
	cmpl	$63, %eax
	je	.L17913
	cmpl	$66, %eax
	je	.L17913
.L17909:
	movq	264(%rsp), %rax
	cmpw	$55, (%rax)
	jne	.L18382
	movq	256(%rsp), %rdi
	cmpw	$55, (%rdi)
	jne	.L18382
	testq	%r15, %r15
	je	.L18382
	cmpw	$46, (%r15)
	je	.L18428
.L17919:
	movl	252(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %r12d
	movq	%rax, 368(%rsp)
	testl	%r12d, %r12d
	je	.L18332
.L18005:
	movslq	%r12d,%r14
	movq	%r14, %rax
	movq	%r14, 360(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L17993
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L17997
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r15)
	ja	.L17993
.L17997:
	movslq	%edx,%r14
	leaq	(%r14,%r14,4), %r13
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L18429
.L17998:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L18430
.L17999:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L18000
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	368(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L17993
.L18000:
	call	get_last_insn
	movl	$1, %edx
	movq	%r15, %rsi
	movq	%rax, 352(%rsp)
	movl	%r12d, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L18431
.L18001:
	movq	264(%rsp), %rdi
	xorl	%eax, %eax
	movq	256(%rsp), %rsi
	movq	%rbx, %rdx
	movq	368(%rsp), %rcx
	call	*insn_gen_function(,%r14,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L18363
	movq	352(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L17993:
	movq	360(%rsp), %rcx
	movl	mode_wider_mode(,%rcx,4), %r12d
	testl	%r12d, %r12d
	jne	.L18005
.L18332:
	movq	%r15, %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movq	264(%rsp), %rbx
	movl	$3, %ecx
	movq	256(%rsp), %r12
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movq	8(%r12), %r15
	movl	$4, 24(%rsp)
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movq	%r15, (%rsp)
	jmp	.L18380
.L18431:
	movq	%rax, %rdi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L18001
	movq	%rbx, %rsi
	movl	%r12d, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L18001
.L18430:
	xorl	%eax, %eax
	movq	256(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L17993
	jmp	.L17999
	.p2align 6,,7
.L18429:
	xorl	%eax, %eax
	movq	264(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L17993
	jmp	.L17998
.L18428:
	movl	8(%r15), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 252(%rsp)
	movl	$9, %edi
	movl	class_narrowest_mode+4(%rip), %r8d
	cmovl	252(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	movl	%r10d, %esi
.L17933:
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	testl	%r8d, %r8d
	je	.L18323
.L17929:
	movslq	%edx,%r14
	salq	$2, %r14
	cmpl	%edi, mode_size(%r14)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r14), %edx
	testl	%edx, %edx
	jne	.L17929
.L18323:
	testl	%ecx, %ecx
	je	.L17922
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L17931
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebx
	jl	.L17931
	movl	%esi, %eax
	movl	%edx, %esi
	xorl	%edx, %edx
	divl	%esi
	addl	%eax, %r9d
	movl	%edx, %esi
.L17931:
	movl	mode_size(,%rcx,4), %edi
	cmpl	$1, %edi
	jg	.L17933
.L17922:
	decl	%r9d
	jg	.L17919
	movq	256(%rsp), %rcx
	movq	264(%rsp), %r12
	movl	%r10d, %r13d
	movl	$9, %r14d
	movq	8(%r12), %rbx
	movq	8(%rcx), %rdi
	movq	%rcx, 568(%rsp)
	movl	$0, 596(%rsp)
	movq	%r12, 544(%rsp)
	xorl	%ecx, %ecx
	movq	%rbx, 552(%rsp)
	movq	%rdi, 576(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L17936
	cmpw	$88, %dx
	je	.L17936
	cmpw	$87, %dx
	je	.L17936
.L17935:
	movl	%ecx, 560(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L17938
	cmpw	$88, %dx
	je	.L17938
	cmpw	$87, %dx
	je	.L17938
.L17937:
	movl	%ecx, 584(%rsp)
	movl	$0, 588(%rsp)
	movl	$0, 564(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L17940
	cmpw	$87, %ax
	je	.L17940
.L17939:
	testl	%edx, %edx
	movl	%edx, 600(%rsp)
	je	.L17941
	movl	%r10d, 596(%rsp)
.L17941:
	movl	%r10d, 592(%rsp)
	movl	584(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L17943
	movl	560(%rsp), %eax
	testl	%eax, %eax
	jne	.L17942
.L17943:
	xorl	%r9d, %r9d
	movl	$8, %r12d
	movl	$9, %esi
	cmpl	$8, 252(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r15d
	cmovl	252(%rsp), %r12d
.L17957:
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	testl	%r8d, %r8d
	je	.L18326
.L17953:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%esi, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L17953
.L18326:
	testl	%ecx, %ecx
	je	.L17946
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L17955
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r15d, %eax
	cmpl	%eax, %r12d
	jl	.L17955
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L17955:
	movl	mode_size(,%rcx,4), %esi
	cmpl	$1, %esi
	jg	.L17957
.L17946:
	cmpl	$2, %r9d
	jle	.L17942
	testl	%r10d, %r10d
	jne	.L17959
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L17960
	cmpw	$46, %dx
	je	.L17960
	cmpw	$47, %dx
	je	.L17960
	cmpw	$49, %dx
	je	.L17960
	cmpw	$113, %dx
	je	.L17960
.L17959:
	movl	560(%rsp), %eax
	testl	%eax, %eax
	jne	.L17942
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L17962
	cmpw	$46, %dx
	je	.L17962
	cmpw	$47, %dx
	je	.L17962
	cmpw	$49, %dx
	je	.L17962
	cmpw	$113, %dx
	je	.L17962
.L17942:
	cmpl	$8, 252(%rsp)
	movl	$8, %eax
	cmovl	252(%rsp), %eax
	cmpl	$1, %r14d
	movl	%eax, 252(%rsp)
	jle	.L17965
.L17987:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r13d, %r13d
	testl	%edx, %edx
	je	.L18329
.L17972:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r14d, mode_size(%rbx)
	cmovl	%edx, %r13d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L17972
.L18329:
	testl	%r13d, %r13d
	je	.L17965
	movslq	%r13d,%r14
	movq	%r14, %r11
	salq	$4, %r11
	addq	mov_optab(%rip), %r11
	movl	8(%r11), %edx
	cmpl	$210, %edx
	je	.L17974
	movl	mode_size(,%r14,4), %r12d
	movl	$8, %eax
	cmpl	$9, %r12d
	cmovl	%r12d, %eax
	cmpl	%eax, 252(%rsp)
	jl	.L17974
	movslq	%edx,%rsi
	cmpl	%r12d, 592(%rsp)
	leaq	544(%rsp), %rbx
	movq	insn_gen_function(,%rsi,8), %rdi
	movq	%rdi, 376(%rsp)
	jl	.L17974
	movl	600(%rsp), %edx
.L17985:
	testl	%edx, %edx
	je	.L17979
	subl	%r12d, 52(%rbx)
.L17979:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L17980
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L18375:
	movq	%rax, %r15
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L17982
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L17983:
	movq	%rax, %rsi
	movq	%r15, %rdi
	xorl	%eax, %eax
	call	*376(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L17984
	addl	%r12d, 52(%rbx)
.L17984:
	movl	48(%rbx), %eax
	subl	%r12d, %eax
	cmpl	%r12d, %eax
	movl	%eax, 48(%rbx)
	jge	.L17985
.L17974:
	movl	mode_size(,%r14,4), %r14d
	cmpl	$1, %r14d
	jg	.L17987
.L17965:
	movl	592(%rsp), %eax
	testl	%eax, %eax
	jmp	.L18387
.L17982:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L17983
.L17980:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L18375
.L17962:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 552(%rsp)
	jmp	.L17942
.L17960:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 576(%rsp)
	jmp	.L17959
.L17940:
	movl	$1, %edx
	jmp	.L17939
.L17938:
	movl	$1, %ecx
	jmp	.L17937
.L17936:
	movl	$1, %ecx
	jmp	.L17935
.L17913:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L17909
.L18427:
	movzbl	2(%r15), %edx
	cmpb	$16, %dl
	je	.L17907
	movq	8(%r15), %r12
	cmpw	$59, (%r12)
	je	.L18432
.L17907:
	cmpl	$55, %eax
	jne	.L17910
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L17909
.L18432:
	movq	8(%r12), %rbx
	movq	%rbx, 8(%r15)
	cmpq	$0, 16(%r12)
	je	.L17909
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r15, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	%r13, %r15
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L17909
.L17906:
	cmpq	$0, 16(%r15)
	jne	.L17914
	movq	8(%r15), %r15
	jmp	.L17909
.L17914:
	movq	24(%r15), %rsi
	testq	%rsi, %rsi
	je	.L17915
	movq	%rsi, %r15
	jmp	.L17909
.L17915:
	movq	8(%r15), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L17909
.L17903:
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbp), %rdi
	movq	%rax, 8(%rbp)
	call	protect_from_queue
	movq	%rax, 16(%rbp)
	jmp	.L17899
.L18426:
	movzbl	2(%rbp), %edx
	cmpb	$16, %dl
	je	.L17897
	movq	8(%rbp), %r12
	cmpw	$59, (%r12)
	je	.L18433
.L17897:
	cmpl	$55, %eax
	jne	.L17900
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbp)
	jmp	.L17899
.L18433:
	movq	8(%r12), %rcx
	movq	%rcx, 8(%rbp)
	cmpq	$0, 16(%r12)
	je	.L17899
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%rbp, %rsi
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r14, 256(%rsp)
	jmp	.L17899
.L17896:
	cmpq	$0, 16(%rbp)
	jne	.L17904
	movq	8(%rbp), %rdx
	movq	%rdx, 256(%rsp)
	jmp	.L17899
.L17904:
	movq	24(%rbp), %r10
	testq	%r10, %r10
	movq	%r10, 256(%rsp)
	jne	.L17899
	movq	8(%rbp), %r9
	movzbl	2(%r9), %edi
	call	gen_reg_rtx
	movq	8(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbp)
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbp), %r12
	movq	%r12, 256(%rsp)
	jmp	.L17899
.L17893:
	movq	176(%rsp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	176(%rsp), %r12
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L17889
.L18425:
	movq	8(%rdi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	176(%rsp), %r14
	movq	%rax, 8(%r14)
	jmp	.L17889
.L17886:
	movq	176(%rsp), %rsi
	cmpq	$0, 16(%rsi)
	jne	.L17894
	movq	8(%rsi), %r9
	movq	%r9, 264(%rsp)
	jmp	.L17889
.L17894:
	movq	176(%rsp), %rdi
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	movq	%rbx, 264(%rsp)
	jne	.L17889
	movq	176(%rsp), %r8
	movq	8(%r8), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	176(%rsp), %r13
	movq	%rax, %rdi
	movq	8(%r13), %rsi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r11
	movq	%r11, 264(%rsp)
	jmp	.L17889
	.p2align 6,,7
.L17875:
	movq	176(%rsp), %r10
	xorl	%esi, %esi
	movq	8(%r10), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	176(%rsp), %r14
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L17871
.L18403:
	jne	.L17872
	movq	8(%rdi), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	176(%rsp), %r13
	movq	%rax, 8(%r13)
	jmp	.L17871
.L17868:
	movq	176(%rsp), %rsi
	cmpq	$0, 16(%rsi)
	jne	.L17876
	movq	8(%rsi), %rax
	movq	%rax, 176(%rsp)
	jmp	.L17871
.L17876:
	movq	176(%rsp), %r9
	movq	24(%r9), %rax
	testq	%rax, %rax
	je	.L17877
	movq	%rax, 176(%rsp)
	jmp	.L17871
.L17877:
	movq	176(%rsp), %rdi
	movq	8(%rdi), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	176(%rsp), %r12
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r15
	movq	%r15, 176(%rsp)
	jmp	.L17871
	.p2align 6,,7
.L18402:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	504(%rsp), %rdi
	movq	176(%rsp), %rbp
	movq	%rax, %rsi
	movzbl	2(%rbp), %edx
	jmp	.L18374
.L17847:
	movq	176(%rsp), %r11
	movl	(%r11), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L18434
	movq	176(%rsp), %r12
	movq	504(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movzbl	2(%r12), %edx
	movq	%r12, %rsi
	call	expand_expr
	movq	176(%rsp), %rbx
	movq	%rax, %rbp
	cmpw	$51, (%rbx)
	je	.L18435
.L17865:
	movl	(%rbp), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L17866
	cmpw	$46, %dx
	je	.L17866
	cmpw	$47, %dx
	je	.L17866
	cmpw	$49, %dx
	je	.L17866
	cmpw	$113, %dx
	jne	.L17812
	jmp	.L17866
.L18435:
	cmpl	$63, 8(%rbx)
	jle	.L17812
	jmp	.L17865
.L18434:
	movq	504(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	176(%rsp), %rcx
	movq	%rax, %rbp
	movq	%rax, %rsi
	xorl	%eax, %eax
	movzbl	3(%rcx), %edx
	movq	8(%rcx), %rdi
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	jmp	.L17811
.L17856:
	movl	$1, %ebx
	jmp	.L17850
.L17848:
	xorl	%ebx, %ebx
	jmp	.L17850
.L17854:
	movq	176(%rsp), %r9
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	movq	8(%r9), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L17856
	movq	176(%rsp), %r15
	xorl	%eax, %eax
	movq	16(%r15), %rdi
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L17850
	jmp	.L17856
.L18401:
	movzbl	2(%rcx), %eax
	cmpb	$16, %al
	je	.L17840
	movl	cse_not_expected(%rip), %r8d
	movq	504(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	%al, %edx
	testl	%r8d, %r8d
	cmove	%rcx, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	call	expand_expr
	movq	%rax, %rbp
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L17866
	testb	%al, %al
	je	.L17866
	movq	%rbp, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L18385
	.p2align 6,,7
.L18400:
	movq	176(%rsp), %rsi
	cmpb	$16, 2(%rsi)
	jne	.L17813
	call	gen_label_rtx
	movq	%rax, %r12
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r13
	testq	%rbx, %rbx
	jne	.L17817
.L18316:
	movq	176(%rsp), %rbp
	movzwl	(%rbp), %eax
	cmpl	$59, %eax
	je	.L17819
	cmpl	$55, %eax
	je	.L18436
.L17823:
	cmpl	$63, %eax
	je	.L17826
	cmpl	$66, %eax
	je	.L17826
.L17822:
	movq	504(%rsp), %rcx
	xorl	%eax, %eax
	movq	%r12, %rsi
	incl	inhibit_defer_pop(%rip)
	movq	32(%rcx), %rdi
	call	jumpifnot
	movq	504(%rsp), %r11
	movl	500(%rsp), %edx
	xorl	%eax, %eax
	movq	%rbp, %rsi
	movq	40(%r11), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L17832
.L18318:
	movq	%r13, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r12, %rdi
	call	emit_label
	xorl	%eax, %eax
	movl	500(%rsp), %edx
	movq	504(%rsp), %r12
	movq	%rbp, %rsi
	movq	48(%r12), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L17837
.L18320:
	movq	%r13, %rdi
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L17811
.L17837:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rsi
	movq	%rax, 16(%rbx)
	testq	%rsi, %rsi
	movq	%rsi, pending_chain(%rip)
	movq	%rsi, %rbx
	jne	.L17837
	jmp	.L18320
.L17832:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdx
	movq	%rax, 16(%rbx)
	testq	%rdx, %rdx
	movq	%rdx, pending_chain(%rip)
	movq	%rdx, %rbx
	jne	.L17832
	jmp	.L18318
.L17826:
	movq	176(%rsp), %r14
	xorl	%esi, %esi
	movq	8(%r14), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L17822
.L18436:
	jne	.L17823
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	176(%rsp), %rbp
	movq	%rax, 8(%rbp)
	jmp	.L17822
	.p2align 6,,7
.L17819:
	movq	176(%rsp), %rsi
	cmpq	$0, 16(%rsi)
	jne	.L17827
	movq	8(%rsi), %rbp
	jmp	.L17822
.L17827:
	movq	176(%rsp), %r9
	movq	24(%r9), %r10
	testq	%r10, %r10
	movq	%r10, %rbp
	jne	.L17822
	movq	176(%rsp), %rdi
	movq	8(%rdi), %rbp
	movzbl	2(%rbp), %edi
	call	gen_reg_rtx
	movq	176(%rsp), %rbx
	movq	%rax, %rdi
	movq	8(%rbx), %rsi
	movq	%rax, 24(%rbx)
	call	gen_move_insn
	movq	176(%rsp), %r15
	movq	%rax, %rdi
	movq	16(%r15), %rsi
	call	emit_insn_before
	movq	24(%r15), %rbp
	jmp	.L17822
	.p2align 6,,7
.L17817:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r8
	movq	%rax, 16(%rbx)
	testq	%r8, %r8
	movq	%r8, pending_chain(%rip)
	movq	%r8, %rbx
	jne	.L17817
	jmp	.L18316
.L18399:
	movq	504(%rsp), %rcx
	movq	const0_rtx(%rip), %rsi
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	32(%rcx), %rdi
	xorl	%ecx, %ecx
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L17809
.L18314:
	movq	504(%rsp), %rax
	movq	176(%rsp), %rsi
	movl	500(%rsp), %edx
	movq	40(%rax), %rdi
	xorl	%eax, %eax
	call	store_expr
	movq	%rax, %rbp
	jmp	.L17811
.L17809:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdx
	movq	%rax, 16(%rbx)
	testq	%rdx, %rdx
	movq	%rdx, pending_chain(%rip)
	movq	%rdx, %rbx
	jne	.L17809
	jmp	.L18314
.L18398:
	movq	504(%rsp), %rdx
	movzbl	16(%rdx), %eax
	cmpb	$39, %al
	jne	.L17804
	movl	current_function_returns_struct(%rip), %r14d
	testl	%r14d, %r14d
	je	.L17804
	movl	current_function_returns_pcc_struct(%rip), %r12d
	testl	%r12d, %r12d
	jne	.L17804
	movq	%rdx, %rdi
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	expand_expr
	movq	504(%rsp), %rdi
	movq	%rax, %rbp
	xorl	%eax, %eax
	call	expr_size
	movl	$4, %r9d
	movq	176(%rsp), %r15
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	movl	$3, %ecx
	xorl	%eax, %eax
	movq	%rdi, (%rsp)
	movq	8(%r15), %r8
	movq	memcpy_libfunc(%rip), %rdi
	call	emit_library_call
	movq	%r15, %rdi
.L18381:
	xorl	%eax, %eax
	call	preserve_temp_slots
	xorl	%eax, %eax
	call	free_temp_slots
	jmp	.L17285
.L18397:
	xorl	%edx, %edx
	movq	%rbp, %rdi
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	%rax, 176(%rsp)
	movzbl	16(%rbp), %edx
	jmp	.L17803
.L18396:
	movq	40(%rbp), %r9
	cmpb	$25, 16(%r9)
	jne	.L17286
	movq	8(%rbp), %r11
	movq	32(%r11), %r10
	cmpb	$25, 16(%r10)
	jne	.L17286
.L17287:
	xorl	%ecx, %ecx
	xorl	%r13d, %r13d
	movl	$0, 520(%rsp)
	cmpb	$37, %dl
	movq	%rbp, %r12
	leaq	536(%rsp), %r14
	leaq	520(%rsp), %r15
	movl	$0, 172(%rsp)
	je	.L18437
	cmpb	$38, %dl
	je	.L18438
	movq	8(%rbp), %rdi
	movzbl	44(%rdi), %esi
	movl	%esi, 172(%rsp)
	movslq	172(%rsp),%rdx
	movl	mode_size(,%rdx,4), %eax
	sall	$3, %eax
	movl	%eax, 540(%rsp)
	movq	8(%rbp), %r11
	movzbl	17(%r11), %r10d
	shrb	$6, %r10b
	movl	%r10d, %r9d
	andl	$1, %r9d
	movl	%r9d, 496(%rsp)
.L17290:
	testq	%rcx, %rcx
	je	.L17293
	cmpb	$25, 16(%rcx)
	je	.L17294
	movl	$16, 172(%rsp)
	movl	$-1, 540(%rsp)
.L17293:
	movl	$0, (%r14)
	.p2align 4,,7
.L17321:
	movzbl	16(%r12), %edx
	cmpb	$39, %dl
	je	.L18439
.L17299:
	leal	-37(%rdx), %ecx
	cmpb	$1, %cl
	ja	.L17300
	cmpb	$37, %dl
	je	.L18440
	movq	48(%r12), %rbx
.L17302:
	movzbl	16(%rbx), %eax
	cmpb	$53, %al
	je	.L18441
	cmpb	$25, %al
	je	.L18442
.L17311:
	testq	%r13, %r13
	je	.L17313
	movl	$8, %edi
	call	size_int
	movq	%rbx, %rsi
	movl	$58, %edi
	movq	%rax, %rdx
	call	size_binop
	movq	%r13, %rsi
	movl	$53, %edi
.L18364:
	movq	%rax, %rdx
	call	size_binop
	movq	%rax, %r13
.L17315:
	testb	$16, 17(%r12)
	je	.L17320
	movl	$1, (%r15)
.L17320:
	movq	32(%r12), %r12
	jmp	.L17321
	.p2align 6,,7
.L17313:
	movl	$8, %edi
	call	size_int
	movq	%rbx, %rsi
	movl	$58, %edi
	jmp	.L18364
	.p2align 6,,7
.L18442:
	movl	24(%rbx), %eax
.L18365:
	addl	%eax, (%r14)
	jmp	.L17315
	.p2align 6,,7
.L18441:
	movq	32(%rbx), %rsi
	cmpb	$25, 16(%rsi)
	je	.L18443
	movq	40(%rbx), %rax
	cmpb	$25, 16(%rax)
	jne	.L18382
	movq	%rsi, %rbx
.L17305:
	movl	24(%rax), %eax
	addl	%eax, (%r14)
	jmp	.L17311
.L18443:
	movq	40(%rbx), %rbx
	movq	%rsi, %rax
	jmp	.L17305
	.p2align 6,,7
.L18440:
	movq	40(%r12), %r8
	movq	72(%r8), %rbx
	jmp	.L17302
	.p2align 6,,7
.L17300:
	cmpb	$42, %dl
	je	.L18444
.L17316:
	cmpb	$103, %dl
	je	.L17315
	leal	-101(%rdx), %r9d
	cmpb	$1, %r9b
	ja	.L17297
	movq	32(%r12), %rsi
	movq	8(%r12), %r11
	movq	8(%rsi), %rdx
	movzbl	44(%rdx), %r10d
	cmpb	%r10b, 44(%r11)
	je	.L17315
.L17297:
	movl	172(%rsp), %eax
	testl	%eax, %eax
	jne	.L17322
	movl	(%r14), %eax
	movl	540(%rsp), %edi
	cltd
	idivl	%edi
	testl	%edx, %edx
	movl	%edx, %ebx
	je	.L18445
.L17322:
	movl	172(%rsp), %r14d
	movq	%r13, 528(%rsp)
	testl	%r14d, %r14d
	movl	%r14d, 524(%rsp)
	jne	.L17325
	movl	500(%rsp), %eax
	testl	%eax, %eax
	jne	.L18446
.L17325:
	movq	%r12, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	528(%rsp), %rdi
	movq	%rax, 176(%rsp)
	testq	%rdi, %rdi
	jne	.L18447
.L17326:
	movl	520(%rsp), %eax
	testl	%eax, %eax
	je	.L17328
	movq	176(%rsp), %rdx
	cmpw	$55, (%rdx)
	je	.L18448
.L17328:
	movl	500(%rsp), %eax
	movl	540(%rsp), %r13d
	movl	536(%rsp), %r15d
	movl	524(%rsp), %ebx
	testl	%eax, %eax
	je	.L17330
	movq	8(%rbp), %rdi
	movzbl	44(%rdi), %ebp
	movl	%ebp, 168(%rsp)
.L17331:
	movq	8(%r12), %rdi
	movl	48(%rdi), %ebp
	call	int_size_in_bytes
	movl	$0, 164(%rsp)
	movl	%eax, %r12d
	shrl	$3, %ebp
	cmpl	$31, %r13d
	jg	.L17332
	movl	$1, %eax
	movl	%r13d, %ecx
	sall	%cl, %eax
	decl	%eax
	movl	%eax, 164(%rsp)
.L17332:
	cmpl	$16, %ebx
	je	.L18449
.L17333:
	testl	%ebx, %ebx
	je	.L17338
	cmpl	$16, %ebx
	je	.L17339
	movslq	%ebx,%r10
	cmpb	$0, direct_store(%r10)
	je	.L17338
.L17339:
	movq	176(%rsp), %r11
	movzwl	(%r11), %eax
	cmpw	$51, %ax
	je	.L17338
	cmpw	$53, %ax
	je	.L17338
	movl	168(%rsp), %ecx
	movq	176(%rsp), %rbp
	testl	%ecx, %ecx
	movq	8(%rbp), %rdi
	je	.L17345
	movzwl	(%rdi), %edx
	cmpw	$51, %dx
	je	.L17345
	leal	-56(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L17345
	cmpw	$46, %dx
	je	.L17345
	cmpw	$47, %dx
	je	.L17345
	cmpw	$49, %dx
	je	.L17345
	cmpw	$113, %dx
	je	.L17345
	cmpw	$63, %dx
	je	.L18450
.L17346:
	xorl	%eax, %eax
	call	copy_to_reg
	movq	%rax, %rdi
.L17345:
	cmpl	$-1, %r15d
	leal	7(%r15), %r10d
	cmovle	%r10d, %r15d
	sarl	$3, %r15d
	movl	%r15d, %esi
	call	plus_constant_wide
	movl	%ebx, %esi
	movq	176(%rsp), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	orb	$16, 3(%rax)
	movq	%rax, %r14
	movl	$0, 160(%rsp)
	movq	504(%rsp), %rdx
	movl	168(%rsp), %edi
	movzbl	16(%rdx), %eax
	testl	%edi, %edi
	setne	%r15b
	cmpb	$44, %al
	movzbl	%r15b, %ebp
	je	.L18451
	cmpb	$48, %al
	je	.L18452
.L17357:
	testl	%ebp, %ebp
	je	.L17384
	cmpw	$55, (%r14)
	je	.L18453
.L17384:
	movzwl	(%r14), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L17392
	mov	%eax, %ebp
	jmp	*.L17401(,%rbp,8)
	.section	.rodata
	.align 8
	.align 4
.L17401:
	.quad	.L17395
	.quad	.L17392
	.quad	.L17392
	.quad	.L17392
	.quad	.L17400
	.quad	.L17392
	.quad	.L17392
	.quad	.L17392
	.quad	.L17398
	.quad	.L17398
	.quad	.L17392
	.quad	.L17398
	.text
.L17395:
	movq	8(%r14), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %ebx
.L17394:
	testl	%ebx, %ebx
	je	.L17391
	movzbl	2(%r14), %eax
	cmpb	$16, %al
	je	.L17403
	testb	%al, %al
	jne	.L18454
.L17403:
	movzbl	2(%r14), %edx
	movq	504(%rsp), %rdi
	xorl	%esi, %esi
.L18366:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L18384:
	movq	%rax, %r12
.L17410:
	movl	$1, 160(%rsp)
.L17356:
	cmpq	%r14, %r12
	je	.L17411
	movq	504(%rsp), %r9
	cmpb	$0, 16(%r9)
	je	.L17411
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L17412
	cmpl	$55, %eax
	je	.L18455
.L17416:
	cmpl	$63, %eax
	je	.L17419
	cmpl	$66, %eax
	je	.L17419
.L17415:
	movzbl	2(%r12), %eax
	movzbl	2(%r14), %ecx
	cmpb	%cl, %al
	je	.L17422
	testb	%al, %al
	je	.L17422
	movq	504(%rsp), %rbx
	movl	160(%rsp), %edi
	movq	8(%rbx), %r11
	movzbl	17(%r11), %r10d
	shrb	$6, %r10b
	movl	%r10d, %edx
	andl	$1, %edx
	testl	%edi, %edi
	je	.L17423
	movq	%r12, %rsi
	movzbl	%cl, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%rax, %r12
.L17678:
	movq	%r14, %rdi
	movq	%r12, %rsi
	call	emit_move_insn
.L17411:
	movl	160(%rsp), %ebx
	testl	%ebx, %ebx
	cmove	%r14, %r12
.L17355:
	movq	%r12, 176(%rsp)
.L17336:
	movq	176(%rsp), %rdi
	jmp	.L18381
.L17423:
	movq	%r14, %rdi
	movq	%r12, %rsi
	xorl	%eax, %eax
	call	convert_move
	jmp	.L17411
.L17422:
	cmpb	$16, %al
	jne	.L17678
	movq	504(%rsp), %rcx
	cmpb	$28, 16(%rcx)
	je	.L18456
	cmpb	$16, %al
	jne	.L17678
	movq	504(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, 64(%rsp)
	call	expr_size
	movq	%rax, %r13
	movq	504(%rsp), %rax
	movq	8(%rax), %rbp
	movl	48(%rbp), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r14)
	movl	%eax, 60(%rsp)
	jne	.L18382
	cmpb	$16, 2(%r12)
	jne	.L18382
	movq	%r14, 72(%rsp)
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L17681
	cmpl	$55, %eax
	je	.L18457
	cmpl	$63, %eax
	je	.L17688
	cmpl	$66, %eax
	je	.L17688
.L17684:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L17691
	cmpl	$55, %eax
	je	.L18458
.L17695:
	cmpl	$63, %eax
	je	.L17698
	cmpl	$66, %eax
	je	.L17698
.L17694:
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L17701
	cmpl	$55, %eax
	je	.L18459
.L17705:
	cmpl	$63, %eax
	je	.L17708
	cmpl	$66, %eax
	je	.L17708
.L17704:
	movq	72(%rsp), %rax
	cmpw	$55, (%rax)
	jne	.L18382
	movq	64(%rsp), %r9
	cmpw	$55, (%r9)
	jne	.L18382
	testq	%r13, %r13
	je	.L18382
	cmpw	$46, (%r13)
	je	.L18460
.L17714:
	movl	60(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 408(%rsp)
	testl	%ebp, %ebp
	je	.L18312
.L17800:
	movslq	%ebp,%rsi
	movq	%rsi, %rax
	movq	%rsi, 400(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L17788
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L17792
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L17788
.L17792:
	movslq	%edx,%r8
	leaq	(%r8,%r8,4), %r15
	movq	%r8, 392(%rsp)
	salq	$4, %r15
	movq	insn_operand_predicate(%r15), %rdx
	testq	%rdx, %rdx
	jne	.L18461
.L17793:
	movq	insn_operand_predicate+8(%r15), %rdx
	testq	%rdx, %rdx
	jne	.L18462
.L17794:
	movq	insn_operand_predicate+24(%r15), %rdx
	testq	%rdx, %rdx
	je	.L17795
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	408(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L17788
.L17795:
	call	get_last_insn
	movl	$1, %edx
	movq	%r13, %rsi
	movq	%rax, 384(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r15), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L18463
.L17796:
	movq	392(%rsp), %rbp
	movq	72(%rsp), %rdi
	xorl	%eax, %eax
	movq	64(%rsp), %rsi
	movq	%rbx, %rdx
	movq	408(%rsp), %rcx
	call	*insn_gen_function(,%rbp,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L18360
	movq	384(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L17788:
	movq	400(%rsp), %r10
	movl	mode_wider_mode(,%r10,4), %ebp
	testl	%ebp, %ebp
	jne	.L17800
.L18312:
	movq	%r13, %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$3, %ecx
	xorl	%edx, %edx
	movq	64(%rsp), %r9
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	8(%r9), %r13
	movl	$4, 24(%rsp)
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movq	72(%rsp), %rax
	movq	%r13, (%rsp)
.L18372:
	movq	8(%rax), %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	call	emit_library_call
	jmp	.L17411
.L18360:
	call	emit_insn
	jmp	.L17411
.L18463:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L17796
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L17796
.L18462:
	xorl	%eax, %eax
	movq	64(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L17788
	jmp	.L17794
.L18461:
	xorl	%eax, %eax
	movq	72(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L17788
	jmp	.L17793
.L18460:
	movl	8(%r13), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 60(%rsp)
	movl	$9, %edi
	movl	class_narrowest_mode+4(%rip), %r8d
	cmovl	60(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %esi
.L17728:
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	testl	%r8d, %r8d
	je	.L18303
.L17724:
	movslq	%edx,%r15
	salq	$2, %r15
	cmpl	%edi, mode_size(%r15)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r15), %edx
	testl	%edx, %edx
	jne	.L17724
.L18303:
	testl	%ecx, %ecx
	je	.L17717
	movslq	%ecx,%rcx
	movq	%rcx, %rdi
	salq	$4, %rdi
	cmpl	$210, 8(%r11,%rdi)
	je	.L17726
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L17726
	movl	%esi, %eax
	movl	%edx, %esi
	xorl	%edx, %edx
	divl	%esi
	addl	%eax, %r9d
	movl	%edx, %esi
.L17726:
	movl	mode_size(,%rcx,4), %edi
	cmpl	$1, %edi
	jg	.L17728
.L17717:
	decl	%r9d
	jg	.L17714
	movq	72(%rsp), %rdx
	movq	64(%rsp), %rcx
	movl	%r10d, %r13d
	movl	$9, %r15d
	movq	8(%rdx), %rbx
	movq	8(%rcx), %rdi
	movq	%rcx, 568(%rsp)
	movl	$0, 596(%rsp)
	movq	%rdx, 544(%rsp)
	xorl	%ecx, %ecx
	movq	%rbx, 552(%rsp)
	movq	%rdi, 576(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L17731
	cmpw	$88, %dx
	je	.L17731
	cmpw	$87, %dx
	je	.L17731
.L17730:
	movl	%ecx, 560(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L17733
	cmpw	$88, %dx
	je	.L17733
	cmpw	$87, %dx
	je	.L17733
.L17732:
	movl	%ecx, 584(%rsp)
	movl	$0, 588(%rsp)
	movl	$0, 564(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L17735
	cmpw	$87, %ax
	je	.L17735
.L17734:
	testl	%edx, %edx
	movl	%edx, 600(%rsp)
	je	.L17736
	movl	%r10d, 596(%rsp)
.L17736:
	movl	584(%rsp), %eax
	movl	%r10d, 592(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L17738
	movl	560(%rsp), %eax
	testl	%eax, %eax
	jne	.L17737
.L17738:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %esi
	cmpl	$8, 60(%rsp)
	movq	mov_optab(%rip), %r11
	cmovl	60(%rsp), %ebp
.L17752:
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	testl	%r8d, %r8d
	je	.L18306
.L17748:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%esi, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L17748
.L18306:
	testl	%ecx, %ecx
	je	.L17741
	movslq	%ecx,%rcx
	movq	%rcx, %rsi
	salq	$4, %rsi
	cmpl	$210, 8(%r11,%rsi)
	je	.L17750
	movl	mode_size(,%rcx,4), %eax
	movl	$8, %esi
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%esi, %eax
	cmpl	%eax, %ebp
	jl	.L17750
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L17750:
	movl	mode_size(,%rcx,4), %esi
	cmpl	$1, %esi
	jg	.L17752
.L17741:
	cmpl	$2, %r9d
	jle	.L17737
	testl	%r10d, %r10d
	jne	.L17754
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L17755
	cmpw	$46, %dx
	je	.L17755
	cmpw	$47, %dx
	je	.L17755
	cmpw	$49, %dx
	je	.L17755
	cmpw	$113, %dx
	je	.L17755
.L17754:
	movl	560(%rsp), %r10d
	testl	%r10d, %r10d
	jne	.L17737
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L17757
	cmpw	$46, %dx
	je	.L17757
	cmpw	$47, %dx
	je	.L17757
	cmpw	$49, %dx
	je	.L17757
	cmpw	$113, %dx
	je	.L17757
.L17737:
	cmpl	$8, 60(%rsp)
	movl	$8, %eax
	cmovl	60(%rsp), %eax
	cmpl	$1, %r15d
	movl	%eax, 60(%rsp)
	jle	.L17760
.L17782:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r13d, %r13d
	testl	%edx, %edx
	je	.L18309
.L17767:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r15d, mode_size(%rbx)
	cmovl	%edx, %r13d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L17767
.L18309:
	testl	%r13d, %r13d
	je	.L17760
	movslq	%r13d,%r15
	movq	%r15, %rdi
	salq	$4, %rdi
	addq	mov_optab(%rip), %rdi
	movl	8(%rdi), %edx
	cmpl	$210, %edx
	je	.L17769
	movl	mode_size(,%r15,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 60(%rsp)
	jl	.L17769
	movslq	%edx,%rcx
	cmpl	%ebp, 592(%rsp)
	leaq	544(%rsp), %rbx
	movq	insn_gen_function(,%rcx,8), %r11
	movq	%r11, 416(%rsp)
	jl	.L17769
	movl	600(%rsp), %edx
.L17780:
	testl	%edx, %edx
	je	.L17774
	subl	%ebp, 52(%rbx)
.L17774:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L17775
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L18371:
	movl	40(%rbx), %edx
	movq	%rax, 48(%rsp)
	testl	%edx, %edx
	je	.L17777
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L17778:
	movq	%rax, %rsi
	movq	48(%rsp), %rdi
	xorl	%eax, %eax
	call	*416(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L17779
	addl	%ebp, 52(%rbx)
.L17779:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L17780
.L17769:
	movl	mode_size(,%r15,4), %r15d
	cmpl	$1, %r15d
	jg	.L17782
.L17760:
	movl	592(%rsp), %r15d
	testl	%r15d, %r15d
.L18386:
	je	.L17411
	jmp	.L18382
.L17777:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L17778
.L17775:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L18371
.L17757:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 552(%rsp)
	jmp	.L17737
.L17755:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 576(%rsp)
	jmp	.L17754
.L17735:
	movl	$1, %edx
	jmp	.L17734
.L17733:
	movl	$1, %ecx
	jmp	.L17732
.L17731:
	movl	$1, %ecx
	jmp	.L17730
.L17708:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L17704
.L18459:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L17702
	movq	8(%r13), %rbp
	cmpw	$59, (%rbp)
	je	.L18464
.L17702:
	cmpl	$55, %eax
	jne	.L17705
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L17704
.L18464:
	movq	8(%rbp), %rbx
	movq	%rbx, 8(%r13)
	cmpq	$0, 16(%rbp)
	je	.L17704
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %r15
	call	gen_move_insn
	movq	%r15, %r13
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L17704
.L17701:
	cmpq	$0, 16(%r13)
	jne	.L17709
	movq	8(%r13), %r13
	jmp	.L17704
.L17709:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L17710
	movq	%rsi, %r13
	jmp	.L17704
.L17710:
	movq	8(%r13), %rbp
	movzbl	2(%rbp), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L17704
.L17698:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L17694
.L18458:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L17692
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L18465
.L17692:
	cmpl	$55, %eax
	jne	.L17695
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L17694
.L18465:
	movq	8(%rbp), %rdi
	movq	%rdi, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L17694
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r15
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r15, 64(%rsp)
	jmp	.L17694
.L17691:
	cmpq	$0, 16(%r12)
	jne	.L17699
	movq	8(%r12), %rcx
	movq	%rcx, 64(%rsp)
	jmp	.L17694
.L17699:
	movq	24(%r12), %rdx
	testq	%rdx, %rdx
	movq	%rdx, 64(%rsp)
	jne	.L17694
	movq	8(%r12), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r8
	movq	%r8, 64(%rsp)
	jmp	.L17694
.L17688:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L17684
.L18457:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L17684
.L17681:
	cmpq	$0, 16(%r14)
	jne	.L17689
	movq	8(%r14), %rbx
	movq	%rbx, 72(%rsp)
	jmp	.L17684
.L17689:
	movq	24(%r14), %r9
	testq	%r9, %r9
	movq	%r9, 72(%rsp)
	jne	.L17684
	movq	8(%r14), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rsi
	movq	%rsi, 72(%rsp)
	jmp	.L17684
	.p2align 6,,7
.L18456:
	xorl	%eax, %eax
	movq	%rcx, %rdi
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, 136(%rsp)
	je	.L18466
.L17427:
	movl	$8, %edi
	call	size_int
	movq	504(%rsp), %rdi
	movq	%rax, %rdx
	movq	8(%rdi), %r9
	movl	$57, %edi
	movq	32(%r9), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	504(%rsp), %rdx
	movq	%rax, %r15
	movl	32(%rdx), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%r15, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movq	504(%rsp), %rbp
	movq	$0, 80(%rsp)
	movq	%rax, 104(%rsp)
	movq	%rax, %r15
	movq	8(%rbp), %rbx
	movl	48(%rbx), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r14)
	movl	%eax, 100(%rsp)
	jne	.L18382
	cmpb	$16, 2(%r12)
	jne	.L18382
	movq	%r14, 112(%rsp)
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L17553
	cmpl	$55, %eax
	je	.L18467
	cmpl	$63, %eax
	je	.L17560
	cmpl	$66, %eax
	je	.L17560
.L17556:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L17563
	cmpl	$55, %eax
	je	.L18468
.L17567:
	cmpl	$63, %eax
	je	.L17570
	cmpl	$66, %eax
	je	.L17570
.L17566:
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L17573
	cmpl	$55, %eax
	je	.L18469
.L17577:
	cmpl	$63, %eax
	je	.L17580
	cmpl	$66, %eax
	je	.L17580
.L17576:
	movq	112(%rsp), %r9
	cmpw	$55, (%r9)
	jne	.L18382
	cmpw	$55, (%r12)
	jne	.L18382
	cmpq	$0, 104(%rsp)
	je	.L18382
	movq	104(%rsp), %rdi
	cmpw	$46, (%rdi)
	je	.L18470
.L17586:
	movl	100(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 448(%rsp)
	testl	%ebp, %ebp
	je	.L18300
.L17672:
	movslq	%ebp,%rax
	movq	%rax, 440(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L17660
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L17664
	movq	104(%rsp), %r11
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r11)
	ja	.L17660
.L17664:
	movslq	%edx,%rcx
	leaq	(%rcx,%rcx,4), %r13
	movq	%rcx, 432(%rsp)
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L18471
.L17665:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L18472
.L17666:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L17667
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	448(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L17660
.L17667:
	call	get_last_insn
	movl	$1, %edx
	movq	104(%rsp), %rsi
	movq	%rax, 424(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L18473
.L17668:
	movq	432(%rsp), %r13
	movq	112(%rsp), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	448(%rsp), %rcx
	call	*insn_gen_function(,%r13,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L18359
	movq	424(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L17660:
	movq	440(%rsp), %rdx
	movl	mode_wider_mode(,%rdx,4), %ebp
	testl	%ebp, %ebp
	jne	.L17672
.L18300:
	movq	104(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%r12), %r8
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	112(%rsp), %r12
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%r8, (%rsp)
	movq	8(%r12), %r8
	call	emit_library_call
.L17670:
	cmpw	$46, (%r15)
	je	.L18474
	movq	8(%r14), %rsi
	movl	$4, %edi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movl	$4, %edi
	movq	%r15, %rcx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	136(%rsp), %rdx
	movl	$4, %edi
	movq	%r15, %rcx
	movq	%rax, %r12
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 80(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L17674:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L17675
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%r12, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L17675:
	cmpq	$0, 80(%rsp)
	je	.L17411
	movq	80(%rsp), %rdi
	call	emit_label
	jmp	.L17411
.L18474:
	movq	504(%rsp), %r10
	movq	8(%r14), %rdi
	movl	32(%r10), %esi
	call	plus_constant_wide
	movq	136(%rsp), %rdi
	movq	504(%rsp), %r15
	movq	%rax, %r12
	movl	32(%r15), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L17674
.L18359:
	call	emit_insn
	jmp	.L17670
.L18473:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L17668
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L17668
.L18472:
	xorl	%eax, %eax
	movq	%r12, %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L17660
	jmp	.L17666
.L18471:
	xorl	%eax, %eax
	movq	112(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L17660
	jmp	.L17665
.L18470:
	movl	8(%rdi), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 100(%rsp)
	movl	$9, %edi
	movl	class_narrowest_mode+4(%rip), %r8d
	cmovl	100(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %esi
.L17600:
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	testl	%r8d, %r8d
	je	.L18291
.L17596:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%edi, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L17596
.L18291:
	testl	%ecx, %ecx
	je	.L17589
	movslq	%ecx,%rcx
	movq	%rcx, %rdi
	salq	$4, %rdi
	cmpl	$210, 8(%r11,%rdi)
	je	.L17598
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L17598
	movl	%esi, %eax
	movl	%edx, %esi
	xorl	%edx, %edx
	divl	%esi
	addl	%eax, %r9d
	movl	%edx, %esi
.L17598:
	movl	mode_size(,%rcx,4), %edi
	cmpl	$1, %edi
	jg	.L17600
.L17589:
	decl	%r9d
	jg	.L17586
	movq	112(%rsp), %rcx
	movq	8(%r12), %rdi
	movl	%r10d, %r13d
	movq	8(%rcx), %rbx
	movq	%r12, 568(%rsp)
	movq	%rcx, 544(%rsp)
	movl	$0, 596(%rsp)
	movq	%rdi, 576(%rsp)
	xorl	%ecx, %ecx
	movl	$9, 96(%rsp)
	movq	%rbx, 552(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L17603
	cmpw	$88, %dx
	je	.L17603
	cmpw	$87, %dx
	je	.L17603
.L17602:
	movl	%ecx, 560(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L17605
	cmpw	$88, %dx
	je	.L17605
	cmpw	$87, %dx
	je	.L17605
.L17604:
	movl	%ecx, 584(%rsp)
	movl	$0, 588(%rsp)
	movl	$0, 564(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L17607
	cmpw	$87, %ax
	je	.L17607
.L17606:
	testl	%edx, %edx
	movl	%edx, 600(%rsp)
	je	.L17608
	movl	%r10d, 596(%rsp)
.L17608:
	movl	584(%rsp), %eax
	movl	%r10d, 592(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L17610
	movl	560(%rsp), %eax
	testl	%eax, %eax
	jne	.L17609
.L17610:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %esi
	cmpl	$8, 100(%rsp)
	movq	mov_optab(%rip), %r11
	movl	$8, %r12d
	cmovl	100(%rsp), %ebp
.L17624:
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	testl	%r8d, %r8d
	je	.L18294
.L17620:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%esi, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L17620
.L18294:
	testl	%ecx, %ecx
	je	.L17613
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L17622
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %ebp
	jl	.L17622
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L17622:
	movl	mode_size(,%rcx,4), %esi
	cmpl	$1, %esi
	jg	.L17624
.L17613:
	cmpl	$2, %r9d
	jle	.L17609
	testl	%r10d, %r10d
	jne	.L17626
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L17627
	cmpw	$46, %dx
	je	.L17627
	cmpw	$47, %dx
	je	.L17627
	cmpw	$49, %dx
	je	.L17627
	cmpw	$113, %dx
	je	.L17627
.L17626:
	movl	560(%rsp), %eax
	testl	%eax, %eax
	jne	.L17609
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L17629
	cmpw	$46, %dx
	je	.L17629
	cmpw	$47, %dx
	je	.L17629
	cmpw	$49, %dx
	je	.L17629
	cmpw	$113, %dx
	je	.L17629
.L17609:
	cmpl	$8, 100(%rsp)
	movl	$8, %eax
	cmovl	100(%rsp), %eax
	cmpl	$1, 96(%rsp)
	movl	%eax, 100(%rsp)
	jle	.L17632
.L17654:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L18297
.L17639:
	movslq	%edx,%rbx
	movl	96(%rsp), %eax
	salq	$2, %rbx
	cmpl	%eax, mode_size(%rbx)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L17639
.L18297:
	testl	%r12d, %r12d
	je	.L17632
	movslq	%r12d,%r13
	movq	%r13, %rbp
	salq	$4, %rbp
	addq	mov_optab(%rip), %rbp
	movl	8(%rbp), %edx
	cmpl	$210, %edx
	je	.L17641
	movl	mode_size(,%r13,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 100(%rsp)
	jl	.L17641
	movslq	%edx,%rdi
	cmpl	%ebp, 592(%rsp)
	leaq	544(%rsp), %rbx
	movq	insn_gen_function(,%rdi,8), %r9
	movq	%r9, 456(%rsp)
	jl	.L17641
	movl	600(%rsp), %edx
.L17652:
	testl	%edx, %edx
	je	.L17646
	subl	%ebp, 52(%rbx)
.L17646:
	movl	16(%rbx), %eax
	testl	%eax, %eax
	je	.L17647
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L18370:
	movq	%rax, 88(%rsp)
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L17649
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L17650:
	movq	%rax, %rsi
	movq	88(%rsp), %rdi
	xorl	%eax, %eax
	call	*456(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L17651
	addl	%ebp, 52(%rbx)
.L17651:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L17652
.L17641:
	movl	mode_size(,%r13,4), %esi
	movl	%esi, 96(%rsp)
	decl	%esi
	jg	.L17654
.L17632:
	movl	592(%rsp), %eax
	testl	%eax, %eax
	je	.L17670
	jmp	.L18382
.L17649:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L17650
.L17647:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L18370
.L17629:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 552(%rsp)
	jmp	.L17609
.L17627:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 576(%rsp)
	jmp	.L17626
.L17607:
	movl	$1, %edx
	jmp	.L17606
.L17605:
	movl	$1, %ecx
	jmp	.L17604
.L17603:
	movl	$1, %ecx
	jmp	.L17602
.L17580:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L17576
.L18469:
	movzbl	2(%r15), %edx
	cmpb	$16, %dl
	je	.L17574
	movq	8(%r15), %rbp
	cmpw	$59, (%rbp)
	je	.L18475
.L17574:
	cmpl	$55, %eax
	jne	.L17577
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L17576
.L18475:
	movq	8(%rbp), %rbx
	movq	%rbx, 8(%r15)
	cmpq	$0, 16(%rbp)
	je	.L17576
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r15, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
.L18369:
	movq	%rbx, 104(%rsp)
	jmp	.L17576
.L17573:
	cmpq	$0, 16(%r15)
	jne	.L17581
	movq	8(%r15), %rax
	movq	%rax, 104(%rsp)
	jmp	.L17576
.L17581:
	movq	24(%r15), %rbp
	testq	%rbp, %rbp
	movq	%rbp, 104(%rsp)
	jne	.L17576
	movq	8(%r15), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %rbx
	jmp	.L18369
.L17570:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L17566
.L18468:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L17564
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L18476
.L17564:
	cmpl	$55, %eax
	jne	.L17567
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L17566
.L18476:
	movq	8(%rbp), %r8
	movq	%r8, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L17566
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	%r13, %r12
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L17566
.L17563:
	cmpq	$0, 16(%r12)
	jne	.L17571
	movq	8(%r12), %r12
	jmp	.L17566
.L17571:
	movq	24(%r12), %rax
	testq	%rax, %rax
	je	.L17572
	movq	%rax, %r12
	jmp	.L17566
.L17572:
	movq	8(%r12), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L17566
.L17560:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L17556
.L18467:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L17556
.L17553:
	cmpq	$0, 16(%r14)
	jne	.L17561
	movq	8(%r14), %rcx
	movq	%rcx, 112(%rsp)
	jmp	.L17556
.L17561:
	movq	24(%r14), %r11
	testq	%r11, %r11
	movq	%r11, 112(%rsp)
	jne	.L17556
	movq	8(%r14), %r13
	movzbl	2(%r13), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rsi
	movq	%rsi, 112(%rsp)
	jmp	.L17556
.L18466:
	movq	504(%rsp), %rbx
	movq	136(%rsp), %rdx
	movl	32(%rbx), %eax
	cmpl	%eax, 8(%rdx)
	jge	.L17427
	movq	%r12, 144(%rsp)
	movq	8(%rbx), %rsi
	movl	48(%rsi), %eax
	shrl	$3, %eax
	cmpb	$16, 2(%r14)
	movl	%eax, 132(%rsp)
	jne	.L18382
	cmpb	$16, 2(%r12)
	jne	.L18382
	movq	%r14, 152(%rsp)
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L17430
	cmpl	$55, %eax
	je	.L18477
	cmpl	$63, %eax
	je	.L17437
	cmpl	$66, %eax
	je	.L17437
.L17433:
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L17440
	cmpl	$55, %eax
	je	.L18478
.L17444:
	cmpl	$63, %eax
	je	.L17447
	cmpl	$66, %eax
	je	.L17447
.L17443:
	movq	136(%rsp), %rbx
	movzwl	(%rbx), %eax
	cmpl	$59, %eax
	je	.L17450
	cmpl	$55, %eax
	je	.L18479
.L17454:
	cmpl	$63, %eax
	je	.L17457
	cmpl	$66, %eax
	je	.L17457
.L17453:
	movq	152(%rsp), %r11
	cmpw	$55, (%r11)
	jne	.L18382
	movq	144(%rsp), %rsi
	cmpw	$55, (%rsi)
	jne	.L18382
	cmpq	$0, 136(%rsp)
	je	.L18382
	movq	136(%rsp), %rdx
	cmpw	$46, (%rdx)
	je	.L18480
.L17463:
	movl	132(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebp
	movq	%rax, 480(%rsp)
	testl	%ebp, %ebp
	je	.L18288
.L17549:
	movslq	%ebp,%rsi
	movq	%rsi, %rax
	movq	%rsi, 472(%rsp)
	salq	$2, %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L17537
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L17541
	movq	136(%rsp), %r13
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r13)
	ja	.L17537
.L17541:
	movslq	%edx,%r15
	leaq	(%r15,%r15,4), %r13
	salq	$4, %r13
	movq	insn_operand_predicate(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L18481
.L17542:
	movq	insn_operand_predicate+8(%r13), %rdx
	testq	%rdx, %rdx
	jne	.L18482
.L17543:
	movq	insn_operand_predicate+24(%r13), %rdx
	testq	%rdx, %rdx
	je	.L17544
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	480(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L17537
.L17544:
	call	get_last_insn
	movl	$1, %edx
	movq	136(%rsp), %rsi
	movq	%rax, 464(%rsp)
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%r13), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	jne	.L18483
.L17545:
	movq	152(%rsp), %rdi
	xorl	%eax, %eax
	movq	144(%rsp), %rsi
	movq	%rbx, %rdx
	movq	480(%rsp), %rcx
	call	*insn_gen_function(,%r15,8)
	testq	%rax, %rax
	movq	%rax, %rdi
	jne	.L18360
	movq	464(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L17537:
	movq	472(%rsp), %rax
	movl	mode_wider_mode(,%rax,4), %ebp
	testl	%ebp, %ebp
	jne	.L17549
.L18288:
	movq	136(%rsp), %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movl	$3, %ecx
	xorl	%edx, %edx
	movq	144(%rsp), %r10
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	8(%r10), %r8
	movl	$4, 24(%rsp)
	movq	%rax, 16(%rsp)
	movq	152(%rsp), %rax
	movl	$4, 8(%rsp)
	movq	%r8, (%rsp)
	jmp	.L18372
.L18483:
	movq	%rax, %rdi
	movl	%ebp, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L17545
	movq	%rbx, %rsi
	movl	%ebp, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.L17545
.L18482:
	xorl	%eax, %eax
	movq	144(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L17537
	jmp	.L17543
.L18481:
	xorl	%eax, %eax
	movq	152(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L17537
	jmp	.L17542
.L18480:
	movl	8(%rdx), %r10d
	xorl	%r9d, %r9d
	movl	$8, %ebx
	cmpl	$8, 132(%rsp)
	movl	$9, %edi
	movl	class_narrowest_mode+4(%rip), %r8d
	cmovl	132(%rsp), %ebx
	movq	mov_optab(%rip), %r11
	movl	$8, %ebp
	movl	%r10d, %esi
.L17477:
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	testl	%r8d, %r8d
	je	.L18279
.L17473:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%edi, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L17473
.L18279:
	testl	%ecx, %ecx
	je	.L17466
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r11,%rdx)
	je	.L17475
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebp, %eax
	cmpl	%eax, %ebx
	jl	.L17475
	movl	%esi, %eax
	movl	%edx, %r15d
	xorl	%edx, %edx
	divl	%r15d
	addl	%eax, %r9d
	movl	%edx, %esi
.L17475:
	movl	mode_size(,%rcx,4), %edi
	cmpl	$1, %edi
	jg	.L17477
.L17466:
	decl	%r9d
	jg	.L17463
	movq	144(%rsp), %rcx
	movq	152(%rsp), %r9
	movl	%r10d, %r13d
	movl	$9, %r15d
	movq	8(%r9), %rbx
	movq	8(%rcx), %rdi
	movq	%rcx, 632(%rsp)
	movl	$0, 660(%rsp)
	movq	%r9, 608(%rsp)
	xorl	%ecx, %ecx
	movq	%rbx, 616(%rsp)
	movq	%rdi, 640(%rsp)
	movzwl	(%rbx), %edx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L17480
	cmpw	$88, %dx
	je	.L17480
	cmpw	$87, %dx
	je	.L17480
.L17479:
	movl	%ecx, 624(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L17482
	cmpw	$88, %dx
	je	.L17482
	cmpw	$87, %dx
	je	.L17482
.L17481:
	movl	%ecx, 648(%rsp)
	movl	$0, 652(%rsp)
	movl	$0, 628(%rsp)
	movzwl	(%rbx), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L17484
	cmpw	$87, %ax
	je	.L17484
.L17483:
	testl	%edx, %edx
	movl	%edx, 664(%rsp)
	je	.L17485
	movl	%r10d, 660(%rsp)
.L17485:
	movl	648(%rsp), %eax
	movl	%r10d, 656(%rsp)
	testl	%eax, %eax
	movl	%eax, %r10d
	je	.L17487
	movl	624(%rsp), %eax
	testl	%eax, %eax
	jne	.L17486
.L17487:
	xorl	%r9d, %r9d
	movl	$8, %ebp
	movl	$9, %esi
	cmpl	$8, 132(%rsp)
	movq	mov_optab(%rip), %r11
	cmovl	132(%rsp), %ebp
.L17501:
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	testl	%r8d, %r8d
	je	.L18282
.L17497:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%esi, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L17497
.L18282:
	testl	%ecx, %ecx
	je	.L17490
	movslq	%ecx,%rcx
	movq	%rcx, %rsi
	salq	$4, %rsi
	cmpl	$210, 8(%r11,%rsi)
	je	.L17499
	movl	mode_size(,%rcx,4), %eax
	movl	$8, %esi
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%esi, %eax
	cmpl	%eax, %ebp
	jl	.L17499
	movl	%r13d, %eax
	movl	%edx, %r13d
	xorl	%edx, %edx
	divl	%r13d
	addl	%eax, %r9d
	movl	%edx, %r13d
.L17499:
	movl	mode_size(,%rcx,4), %esi
	cmpl	$1, %esi
	jg	.L17501
.L17490:
	cmpl	$2, %r9d
	jle	.L17486
	testl	%r10d, %r10d
	jne	.L17503
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L17504
	cmpw	$46, %dx
	je	.L17504
	cmpw	$47, %dx
	je	.L17504
	cmpw	$49, %dx
	je	.L17504
	cmpw	$113, %dx
	je	.L17504
.L17503:
	movl	624(%rsp), %r10d
	testl	%r10d, %r10d
	jne	.L17486
	movzwl	(%rbx), %edx
	leal	-56(%rdx), %edi
	cmpw	$1, %di
	jbe	.L17506
	cmpw	$46, %dx
	je	.L17506
	cmpw	$47, %dx
	je	.L17506
	cmpw	$49, %dx
	je	.L17506
	cmpw	$113, %dx
	je	.L17506
.L17486:
	cmpl	$8, 132(%rsp)
	movl	$8, %eax
	cmovl	132(%rsp), %eax
	cmpl	$1, %r15d
	movl	%eax, 132(%rsp)
	jle	.L17509
.L17531:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r13d, %r13d
	testl	%edx, %edx
	je	.L18285
.L17516:
	movslq	%edx,%rbx
	salq	$2, %rbx
	cmpl	%r15d, mode_size(%rbx)
	cmovl	%edx, %r13d
	movl	mode_wider_mode(%rbx), %edx
	testl	%edx, %edx
	jne	.L17516
.L18285:
	testl	%r13d, %r13d
	je	.L17509
	movslq	%r13d,%r15
	movq	%r15, %rbp
	salq	$4, %rbp
	addq	mov_optab(%rip), %rbp
	movl	8(%rbp), %edx
	cmpl	$210, %edx
	je	.L17518
	movl	mode_size(,%r15,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 132(%rsp)
	jl	.L17518
	movslq	%edx,%rcx
	cmpl	%ebp, 656(%rsp)
	leaq	608(%rsp), %rbx
	movq	insn_gen_function(,%rcx,8), %rdx
	movq	%rdx, 488(%rsp)
	jl	.L17518
	movl	664(%rsp), %edx
.L17529:
	testl	%edx, %edx
	je	.L17523
	subl	%ebp, 52(%rbx)
.L17523:
	movl	16(%rbx), %r9d
	testl	%r9d, %r9d
	je	.L17524
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L18368:
	movl	40(%rbx), %r11d
	movq	%rax, 120(%rsp)
	testl	%r11d, %r11d
	je	.L17526
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r13d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L17527:
	movq	%rax, %rsi
	movq	120(%rsp), %rdi
	xorl	%eax, %eax
	call	*488(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L17528
	addl	%ebp, 52(%rbx)
.L17528:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L17529
.L17518:
	movl	mode_size(,%r15,4), %r15d
	cmpl	$1, %r15d
	jg	.L17531
.L17509:
	movl	656(%rsp), %r15d
	testl	%r15d, %r15d
	jmp	.L18386
.L17526:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L17527
.L17524:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r13d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L18368
.L17506:
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 616(%rsp)
	jmp	.L17486
.L17504:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 640(%rsp)
	jmp	.L17503
.L17484:
	movl	$1, %edx
	jmp	.L17483
.L17482:
	movl	$1, %ecx
	jmp	.L17481
.L17480:
	movl	$1, %ecx
	jmp	.L17479
.L17457:
	movq	136(%rsp), %r8
	xorl	%esi, %esi
	movq	8(%r8), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	136(%rsp), %rcx
	movq	16(%rcx), %rdi
	movq	%rax, 8(%rcx)
	call	protect_from_queue
	movq	136(%rsp), %rbp
	movq	%rax, 16(%rbp)
	jmp	.L17453
.L18479:
	movzbl	2(%rbx), %edx
	cmpb	$16, %dl
	je	.L17451
	movq	8(%rbx), %rbp
	cmpw	$59, (%rbp)
	je	.L18484
.L17451:
	cmpl	$55, %eax
	jne	.L17454
	movq	136(%rsp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	movq	136(%rsp), %rbx
	movq	%rax, 8(%rbx)
	jmp	.L17453
.L18484:
	movq	8(%rbp), %rsi
	movq	%rsi, 8(%rbx)
	cmpq	$0, 16(%rbp)
	je	.L17453
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	136(%rsp), %rsi
	movq	%rax, %rdi
	movq	%rax, %r13
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r13, 136(%rsp)
	jmp	.L17453
.L17450:
	movq	136(%rsp), %rbx
	cmpq	$0, 16(%rbx)
	jne	.L17458
	movq	8(%rbx), %rsi
.L18367:
	movq	%rsi, 136(%rsp)
	jmp	.L17453
.L17458:
	movq	136(%rsp), %r9
	movq	24(%r9), %rsi
	testq	%rsi, %rsi
	jne	.L18367
	movq	136(%rsp), %rdi
	movq	8(%rdi), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	%rax, %rdi
	movq	136(%rsp), %rax
	movq	8(%rax), %rsi
	movq	%rdi, 24(%rax)
	call	gen_move_insn
	movq	136(%rsp), %r15
	movq	%rax, %rdi
	movq	16(%r15), %rsi
	call	emit_insn_before
	movq	24(%r15), %rsi
	jmp	.L18367
.L17447:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L17443
.L18478:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L17441
	movq	8(%r12), %rbp
	cmpw	$59, (%rbp)
	je	.L18485
.L17441:
	cmpl	$55, %eax
	jne	.L17444
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L17443
.L18485:
	movq	8(%rbp), %r9
	movq	%r9, 8(%r12)
	cmpq	$0, 16(%rbp)
	je	.L17443
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %r15
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r15, 144(%rsp)
	jmp	.L17443
.L17440:
	cmpq	$0, 16(%r12)
	jne	.L17448
	movq	8(%r12), %rax
	movq	%rax, 144(%rsp)
	jmp	.L17443
.L17448:
	movq	24(%r12), %rdi
	testq	%rdi, %rdi
	movq	%rdi, 144(%rsp)
	jne	.L17443
	movq	8(%r12), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r10
	movq	%r10, 144(%rsp)
	jmp	.L17443
.L17437:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L17433
.L18477:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L17433
.L17430:
	cmpq	$0, 16(%r14)
	jne	.L17438
	movq	8(%r14), %rcx
	movq	%rcx, 152(%rsp)
	jmp	.L17433
.L17438:
	movq	24(%r14), %r13
	testq	%r13, %r13
	movq	%r13, 152(%rsp)
	jne	.L17433
	movq	8(%r14), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %rbp
	movq	%rbp, 152(%rsp)
	jmp	.L17433
	.p2align 6,,7
.L17419:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L17415
.L18455:
	jne	.L17416
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L17415
	.p2align 6,,7
.L17412:
	cmpq	$0, 16(%r14)
	jne	.L17420
	movq	8(%r14), %r14
	jmp	.L17415
.L17420:
	movq	24(%r14), %rax
	testq	%rax, %rax
	je	.L17421
	movq	%rax, %r14
	jmp	.L17415
.L17421:
	movq	8(%r14), %r15
	movzbl	2(%r15), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L17415
	.p2align 6,,7
.L18454:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	504(%rsp), %rdi
	movzbl	2(%r14), %edx
	movq	%rax, %rsi
	jmp	.L18366
.L17391:
	movl	(%r14), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L18486
	movzbl	2(%r14), %edx
	movq	504(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	%r14, %rsi
	call	expand_expr
	cmpw	$51, (%r14)
	movq	%rax, %r12
	je	.L18487
.L17409:
	movzwl	(%r12), %edx
	leal	-56(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L17410
	cmpw	$46, %dx
	je	.L17410
	cmpw	$47, %dx
	je	.L17410
	cmpw	$49, %dx
	je	.L17410
	cmpw	$113, %dx
	jne	.L17356
	jmp	.L17410
.L18487:
	cmpl	$63, 8(%r14)
	jle	.L17356
	jmp	.L17409
.L18486:
	movq	504(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	8(%r14), %rdi
	movzbl	3(%r14), %edx
	movq	%rax, %r12
	movq	%rax, %rsi
	xorl	%eax, %eax
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	jmp	.L17355
.L17400:
	movl	$1, %ebx
	jmp	.L17394
.L17392:
	xorl	%ebx, %ebx
	jmp	.L17394
.L17398:
	movq	8(%r14), %rdi
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L17400
	movq	16(%r14), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L17394
	jmp	.L17400
.L18453:
	movzbl	2(%r14), %eax
	cmpb	$16, %al
	je	.L17384
	movl	cse_not_expected(%rip), %r12d
	movq	504(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	%al, %edx
	testl	%r12d, %r12d
	cmove	%r14, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	call	expand_expr
	movq	%rax, %r12
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L17410
	testb	%al, %al
	je	.L17410
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L18384
	.p2align 6,,7
.L18452:
	cmpb	$16, 2(%r14)
	jne	.L17357
	call	gen_label_rtx
	movq	%rax, %r13
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r15
	testq	%rbx, %rbx
	jne	.L17361
.L18272:
	movzwl	(%r14), %eax
	movq	%r14, %r12
	cmpl	$59, %eax
	je	.L17363
	cmpl	$55, %eax
	je	.L18488
.L17367:
	cmpl	$63, %eax
	je	.L17370
	cmpl	$66, %eax
	je	.L17370
.L17366:
	movq	504(%rsp), %r14
	xorl	%eax, %eax
	movq	%r13, %rsi
	incl	inhibit_defer_pop(%rip)
	movq	32(%r14), %rdi
	call	jumpifnot
	movq	40(%r14), %rdi
	xorl	%eax, %eax
	movq	%r12, %rsi
	movl	%ebp, %edx
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L17376
.L18274:
	movq	%r15, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r13, %rdi
	call	emit_label
	movl	%ebp, %edx
	movq	%r12, %rsi
	movq	504(%rsp), %rax
	movq	48(%rax), %rdi
	xorl	%eax, %eax
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L17381
.L18276:
	movq	%r15, %rdi
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L17355
.L17381:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r13
	movq	%rax, 16(%rbx)
	testq	%r13, %r13
	movq	%r13, pending_chain(%rip)
	movq	%r13, %rbx
	jne	.L17381
	jmp	.L18276
.L17376:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rcx
	movq	%rax, 16(%rbx)
	testq	%rcx, %rcx
	movq	%rcx, pending_chain(%rip)
	movq	%rcx, %rbx
	jne	.L17376
	jmp	.L18274
.L17370:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L17366
.L18488:
	jne	.L17367
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L17366
.L17363:
	cmpq	$0, 16(%r14)
	jne	.L17371
	movq	8(%r14), %r12
	jmp	.L17366
.L17371:
	movq	24(%r14), %rax
	testq	%rax, %rax
	je	.L17372
	movq	%rax, %r12
	jmp	.L17366
.L17372:
	movq	8(%r14), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	%rax, 24(%r12)
	movq	%rax, %rdi
	movq	8(%r14), %rsi
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r12
	jmp	.L17366
	.p2align 6,,7
.L17361:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdx
	movq	%rax, 16(%rbx)
	testq	%rdx, %rdx
	movq	%rdx, pending_chain(%rip)
	movq	%rdx, %rbx
	jne	.L17361
	jmp	.L18272
.L18451:
	movq	32(%rdx), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L17353
.L18270:
	movq	504(%rsp), %rbx
	movq	%r14, %rsi
	movl	%ebp, %edx
	xorl	%eax, %eax
	movq	40(%rbx), %rdi
	call	store_expr
	movq	%rax, %r12
	jmp	.L17355
.L17353:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r11
	movq	%rax, 16(%rbx)
	testq	%r11, %r11
	movq	%r11, pending_chain(%rip)
	movq	%r11, %rbx
	jne	.L17353
	jmp	.L18270
.L18450:
	movq	16(%rdi), %r9
	cmpw	$46, (%r9)
	jne	.L17346
	movq	8(%rdi), %rax
	cmpq	virtual_incoming_args_rtx(%rip), %rax
	je	.L17345
	cmpq	virtual_stack_vars_rtx(%rip), %rax
	jne	.L17346
	jmp	.L17345
	.p2align 6,,7
.L17338:
	movq	504(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movl	%ebp, %r9d
	movl	%ebx, %ecx
	movq	176(%rsp), %rdi
	movq	%rax, %r8
	movq	%rax, %r14
	movl	%r13d, %esi
	movl	%r15d, %edx
	xorl	%eax, %eax
	movl	%r12d, (%rsp)
	call	store_bit_field
	movl	168(%rsp), %eax
	testl	%eax, %eax
	je	.L17340
	movl	164(%rsp), %eax
	testl	%eax, %eax
	je	.L17341
	movq	176(%rsp), %rdx
	movl	(%rdx), %eax
	andl	$134283263, %eax
	cmpl	$134217783, %eax
	je	.L17341
	movl	496(%rsp), %eax
	testl	%eax, %eax
	je	.L17342
	movl	164(%rsp), %edx
	xorl	%esi, %esi
	movl	$46, %edi
	xorl	%eax, %eax
	call	gen_rtx
	xorl	%edx, %edx
	movq	%r14, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	expand_and
.L18373:
	movq	%rax, 176(%rsp)
	jmp	.L17336
.L17342:
	movzbl	2(%r14), %r12d
	testl	%r12d, %r12d
	cmove	168(%rsp), %r12d
	movslq	%r12d,%rsi
	movl	mode_size(,%rsi,4), %edi
	xorl	%esi, %esi
	sall	$3, %edi
	subl	%r13d, %edi
	call	build_int_2_wide
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	%rax, %r13
	movl	%r12d, %esi
	movq	%r14, %rdx
	movq	%rax, %rcx
	movl	$77, %edi
	xorl	%eax, %eax
	call	expand_shift
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movl	$78, %edi
	movl	%r12d, %esi
	movq	%r13, %rcx
	xorl	%eax, %eax
	call	expand_shift
	jmp	.L18373
.L17341:
	movq	176(%rsp), %rdi
	movl	496(%rsp), %ecx
	movl	%r13d, %esi
	movl	168(%rsp), %r9d
	movl	%r15d, %edx
	xorl	%r8d, %r8d
	xorl	%eax, %eax
	movl	$0, (%rsp)
	movl	%ebp, 8(%rsp)
	movl	%r12d, 16(%rsp)
	call	extract_bit_field
	jmp	.L18373
.L17340:
	movq	const0_rtx(%rip), %r14
	movq	%r14, 176(%rsp)
	jmp	.L17336
.L18449:
	movq	176(%rsp), %rcx
	movzwl	(%rcx), %eax
	cmpw	$51, %ax
	je	.L17334
	cmpw	$53, %ax
	jne	.L17333
.L17334:
	movq	176(%rsp), %r9
	xorl	%edx, %edx
	movzbl	2(%r9), %edi
	movslq	%edi,%rbx
	movl	mode_size(,%rbx,4), %esi
	call	assign_stack_temp
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	copy_rtx
	movq	176(%rsp), %rdx
	movb	$16, 2(%rax)
	movq	%rax, %r14
	movzbq	2(%rdx), %r8
	movl	mode_size(,%r8,4), %eax
	sall	$3, %eax
	cmpl	%eax, %r13d
	je	.L17335
	movq	%rbx, %rdi
	movq	%rdx, %rsi
	call	emit_move_insn
.L17335:
	movq	504(%rsp), %r8
	movq	%r14, %rdi
	movl	%r13d, %esi
	movl	%r15d, %edx
	movl	$16, %ecx
	xorl	%r9d, %r9d
	xorl	%eax, %eax
	movl	$0, (%rsp)
	movl	%ebp, 8(%rsp)
	movl	%r12d, 16(%rsp)
	call	store_field
	movq	%rbx, %rsi
	movq	176(%rsp), %rdi
	call	emit_move_insn
	jmp	.L17336
.L17330:
	movl	$0, 168(%rsp)
	jmp	.L17331
.L18448:
	orb	$8, 3(%rdx)
	jmp	.L17328
.L18447:
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	176(%rsp), %r13
	movq	%rax, %rsi
	cmpw	$55, (%r13)
	jne	.L18382
	movl	$4, %edi
	call	force_reg
	movq	176(%rsp), %r15
	movl	$4, %esi
	movq	%rax, %rcx
	movl	$63, %edi
	xorl	%eax, %eax
	movq	8(%r15), %rdx
	call	gen_rtx
	xorl	%esi, %esi
	movq	176(%rsp), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	movq	%rax, 176(%rsp)
	jmp	.L17326
.L18446:
	movq	%r12, %rdi
	call	stabilize_reference
	movq	%rax, %r12
	jmp	.L17325
.L18445:
	xorl	%edx, %edx
	xorl	%eax, %eax
	movl	$1, %esi
	call	mode_for_size
	cmpl	$16, %eax
	cmovne	%eax, %ebx
	movl	%ebx, 172(%rsp)
	jmp	.L17322
	.p2align 6,,7
.L18444:
	movq	40(%r12), %rcx
	cmpb	$25, 16(%rcx)
	jne	.L17316
	movq	8(%r12), %rbx
	movq	32(%rbx), %rax
	cmpb	$25, 16(%rax)
	jne	.L17316
	movl	24(%rax), %eax
	imull	24(%rcx), %eax
	jmp	.L18365
	.p2align 6,,7
.L18439:
	movl	flag_volatile(%rip), %eax
	testl	%eax, %eax
	je	.L17299
	movl	$1, (%r15)
	movzbl	16(%r12), %edx
	jmp	.L17299
.L17294:
	movl	24(%rcx), %eax
	movl	%eax, 540(%rsp)
	jmp	.L17293
.L18438:
	movzbl	17(%rbp), %ebx
	movq	40(%rbp), %rcx
	shrb	$6, %bl
	movl	%ebx, %r8d
	andl	$1, %r8d
	movl	%r8d, 496(%rsp)
	jmp	.L17290
.L18437:
	movq	40(%rbp), %rax
	testb	$16, 53(%rax)
	movq	40(%rax), %rcx
	jne	.L17289
	movzbl	52(%rax), %edx
	movl	%edx, 172(%rsp)
.L17289:
	movzbl	17(%rax), %edi
	shrb	$6, %dil
	movl	%edi, %esi
	andl	$1, %esi
	movl	%esi, 496(%rsp)
	jmp	.L17290
.L18395:
	movq	504(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	%rax, 176(%rsp)
	jmp	.L17285
	.p2align 6,,7
.L17278:
	movq	sub_optab(%rip), %r14
	jmp	.L17277
.L17276:
	call	get_last_insn
	cmpq	%rax, %r13
	movl	$1, %eax
	cmovne	%eax, %r12d
	jmp	.L17275
.L18389:
	movq	8(%rdx), %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	movq	40(%rsp), %rsi
	movq	%rax, 8(%rsi)
	jmp	.L17274
.L18388:
	movq	32(%rbp), %rdx
	cmpb	$39, 16(%rdx)
	je	.L18489
.L17273:
	movq	%rbp, %rdi
	call	stabilize_reference
	movq	%rax, %rbp
	jmp	.L17272
.L18489:
	movq	40(%rbp), %rcx
	testb	$16, 53(%rcx)
	je	.L17272
	jmp	.L17273
.L18382:
	xorl	%eax, %eax
	call	abort
.LFE8:
.Lfe8:
	.size	expand_increment,.Lfe8-expand_increment
	.align 2
	.p2align 4,,15
	.type	preexpand_calls,@function
preexpand_calls:
.LFB9:
	pushq	%r12
.LCFI53:
	pushq	%rbp
.LCFI54:
	movq	%rdi, %rbp
	pushq	%rbx
.LCFI55:
	movzbl	16(%rdi), %edx
	movzbl	%dl, %ebx 
	salq	$3, %rbx
	addq	tree_code_type(%rip), %rbx
	movq	(%rbx), %rcx
	movsbl	(%rcx),%eax
	movl	do_preexpand_calls(%rip), %ecx
	testl	%ecx, %ecx
	je	.L18490
	cmpl	$101, %eax
	je	.L18492
	cmpl	$60, %eax
	je	.L18492
	cmpl	$49, %eax
	je	.L18492
	cmpl	$50, %eax
	je	.L18492
	cmpl	$114, %eax
	je	.L18492
	.p2align 4,,7
.L18490:
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret
	.p2align 6,,7
.L18492:
	movzbl	%dl, %eax
	cmpl	$52, %eax
	je	.L18490
	cmpl	$52, %eax
	ja	.L18509
	cmpl	$44, %eax
	je	.L18501
	cmpl	$44, %eax
	ja	.L18510
	cmpl	$5, %eax
.L18522:
	je	.L18490
.L18493:
	movzbl	%dl, %esi 
	xorl	%ebx, %ebx
	salq	$2, %rsi
	addq	tree_code_length(%rip), %rsi
	movl	(%rsi), %r12d
	cmpl	%r12d, %ebx
	jge	.L18490
	.p2align 4,,7
.L18520:
	movslq	%ebx,%rdx
	movq	32(%rbp,%rdx,8), %rax
	testq	%rax, %rax
	je	.L18514
	movzbq	16(%rax), %r8
	salq	$3, %r8
	addq	tree_code_type(%rip), %r8
	movq	(%r8), %rdi
	movsbl	(%rdi),%eax
	cmpl	$101, %eax
	je	.L18518
	cmpl	$60, %eax
	je	.L18518
	cmpl	$49, %eax
	je	.L18518
	cmpl	$50, %eax
	je	.L18518
	cmpl	$114, %eax
	je	.L18518
	.p2align 4,,7
.L18514:
	incl	%ebx
	cmpl	%r12d, %ebx
	jl	.L18520
	jmp	.L18490
	.p2align 6,,7
.L18518:
	movq	32(%rbp,%rdx,8), %rdi
	xorl	%eax, %eax
	call	preexpand_calls
	jmp	.L18514
.L18510:
	cmpl	$48, %eax
	je	.L18501
	cmpl	$50, %eax
	jne	.L18493
	cmpq	$0, 48(%rbp)
	jne	.L18490
	movq	32(%rbp), %rax
	cmpb	$106, 16(%rax)
	je	.L18523
.L18497:
	movq	%rbp, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	expand_call
	movq	%rax, 48(%rbp)
	jmp	.L18490
.L18523:
	movq	32(%rax), %rax
	cmpb	$29, 16(%rax)
	jne	.L18497
	testb	$16, 53(%rax)
	je	.L18497
	jmp	.L18490
	.p2align 6,,7
.L18501:
	popq	%rbx
	popq	%rbp
	popq	%r12
	xorl	%eax, %eax
	jmp	do_pending_stack_adjust
	.p2align 6,,7
.L18509:
	cmpl	$104, %eax
	je	.L18505
	cmpl	$104, %eax
	ja	.L18511
	subl	$86, %eax
	cmpl	$1, %eax
	ja	.L18493
	jmp	.L18501
.L18511:
	cmpl	$105, %eax
	jmp	.L18522
.L18505:
	cmpq	$0, 48(%rbp)
	je	.L18493
	jmp	.L18490
.LFE9:
.Lfe9:
	.size	preexpand_calls,.Lfe9-preexpand_calls
	.align 2
	.p2align 4,,15
.globl do_pending_stack_adjust
	.type	do_pending_stack_adjust,@function
do_pending_stack_adjust:
.LFB10:
	subq	$8, %rsp
.LCFI56:
	movl	inhibit_defer_pop(%rip), %eax
	testl	%eax, %eax
	jne	.L18524
	movl	pending_stack_adjust(%rip), %edx
	testl	%edx, %edx
	jne	.L18527
.L18526:
	movl	$0, pending_stack_adjust(%rip)
.L18524:
	addq	$8, %rsp
	ret
	.p2align 6,,7
.L18527:
	movl	$46, %edi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	adjust_stack
	jmp	.L18526
.LFE10:
.Lfe10:
	.size	do_pending_stack_adjust,.Lfe10-do_pending_stack_adjust
	.align 2
	.p2align 4,,15
.globl jumpifnot
	.type	jumpifnot,@function
jumpifnot:
.LFB11:
	xorl	%edx, %edx
	xorl	%eax, %eax
	jmp	do_jump
.LFE11:
.Lfe11:
	.size	jumpifnot,.Lfe11-jumpifnot
	.align 2
	.p2align 4,,15
.globl jumpif
	.type	jumpif,@function
jumpif:
.LFB12:
	movq	%rsi, %rcx
	xorl	%eax, %eax
	xorl	%esi, %esi
	movq	%rcx, %rdx
	jmp	do_jump
.LFE12:
.Lfe12:
	.size	jumpif,.Lfe12-jumpif
	.align 2
	.p2align 4,,15
.globl do_jump
	.type	do_jump,@function
do_jump:
.LFB13:
	pushq	%r15
.LCFI57:
	movq	%rdx, %r15
	pushq	%r14
.LCFI58:
	xorl	%r14d, %r14d
	pushq	%r13
.LCFI59:
	pushq	%r12
.LCFI60:
	movq	%rdi, %r12
	pushq	%rbp
.LCFI61:
	pushq	%rbx
.LCFI62:
	subq	$56, %rsp
.LCFI63:
	movq	pending_chain(%rip), %rbx
	movq	%rsi, 8(%rsp)
	movzbl	16(%rdi), %ebp
	movq	$0, 16(%rsp)
	testq	%rbx, %rbx
	jne	.L18534
.L18675:
	cmpl	$107, %ebp
	ja	.L18545
	mov	%ebp, %edx
	jmp	*.L18660(,%rdx,8)
	.section	.rodata
	.align 8
	.align 4
.L18660:
	.quad	.L18536
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18538
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18571
	.quad	.L18571
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18571
	.quad	.L18545
	.quad	.L18563
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18610
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18555
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18697
	.quad	.L18545
	.quad	.L18545
	.quad	.L18697
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18697
	.quad	.L18697
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18559
	.quad	.L18561
	.quad	.L18545
	.quad	.L18545
	.quad	.L18700
	.quad	.L18637
	.quad	.L18640
	.quad	.L18643
	.quad	.L18646
	.quad	.L18627
	.quad	.L18632
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18680
	.quad	.L18542
	.quad	.L18697
	.quad	.L18545
	.quad	.L18545
	.quad	.L18545
	.quad	.L18697
	.text
.L18538:
	movq	%r12, %rdi
	call	integer_zerop
	movq	8(%rsp), %rdi
	testl	%eax, %eax
	cmove	%r15, %rdi
	testq	%rdi, %rdi
	jne	.L18706
	.p2align 4,,7
.L18536:
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L18664
.L18679:
	cmpq	const_true_rtx(%rip), %r14
	je	.L18707
	cmpq	const0_rtx(%rip), %r14
	je	.L18708
	testq	%r14, %r14
	jne	.L18709
.L18668:
	xorl	%eax, %eax
	call	free_temp_slots
	cmpq	$0, 16(%rsp)
	jne	.L18710
.L18530:
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L18710:
	xorl	%eax, %eax
	call	do_pending_stack_adjust
	movq	16(%rsp), %rdi
	call	emit_label
	jmp	.L18530
.L18709:
	movq	8(%rsp), %rsi
	movq	%r14, %rdi
	movq	%r15, %rdx
	xorl	%eax, %eax
	call	do_jump_for_compare
	jmp	.L18668
.L18708:
	cmpq	$0, 8(%rsp)
	je	.L18668
	movq	8(%rsp), %rdi
.L18695:
	xorl	%eax, %eax
	call	emit_jump
	jmp	.L18668
.L18707:
	testq	%r15, %r15
	movq	%r15, %rdi
	jne	.L18695
	jmp	.L18668
	.p2align 6,,7
.L18664:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r12
	movq	%rax, 16(%rbx)
	testq	%r12, %r12
	movq	%r12, pending_chain(%rip)
	movq	%r12, %rbx
	jne	.L18664
	jmp	.L18679
.L18706:
	xorl	%eax, %eax
	call	emit_jump
	jmp	.L18536
.L18571:
	movl	$0, 32(%rsp)
	movl	$0, 24(%rsp)
	xorl	%ecx, %ecx
	movzbl	16(%r12), %eax
	xorl	%r13d, %r13d
	movq	%r12, %rbp
	cmpb	$37, %al
	je	.L18711
	cmpb	$38, %al
	je	.L18712
	movq	8(%r12), %r9
	movzbl	44(%r9), %r11d
	movl	%r11d, 24(%rsp)
	movslq	24(%rsp),%r10
	movl	mode_size(,%r10,4), %eax
	sall	$3, %eax
	movl	%eax, 52(%rsp)
	movzbl	17(%r9), %eax
.L18681:
	shrb	$6, %al
	movl	%eax, %ebx
	andl	$1, %ebx
	testq	%rcx, %rcx
	movl	%ebx, 28(%rsp)
	je	.L18577
	cmpb	$25, 16(%rcx)
	je	.L18578
	movl	$16, 24(%rsp)
	movl	$-1, 52(%rsp)
.L18577:
	movl	$0, 48(%rsp)
	.p2align 4,,7
.L18605:
	movzbl	16(%rbp), %edx
	cmpb	$39, %dl
	je	.L18713
.L18583:
	leal	-37(%rdx), %esi
	cmpb	$1, %sil
	ja	.L18584
	cmpb	$37, %dl
	je	.L18714
	movq	48(%rbp), %rbx
.L18586:
	movzbl	16(%rbx), %eax
	cmpb	$53, %al
	je	.L18715
	cmpb	$25, %al
	je	.L18716
.L18595:
	testq	%r13, %r13
	je	.L18597
	movl	$8, %edi
	call	size_int
	movq	%rbx, %rsi
	movl	$58, %edi
	movq	%rax, %rdx
	call	size_binop
	movq	%r13, %rsi
	movl	$53, %edi
.L18682:
	movq	%rax, %rdx
	call	size_binop
	movq	%rax, %r13
.L18599:
	testb	$16, 17(%rbp)
	je	.L18604
	movl	$1, 32(%rsp)
.L18604:
	movq	32(%rbp), %rbp
	jmp	.L18605
.L18597:
	movl	$8, %edi
	call	size_int
	movq	%rbx, %rsi
	movl	$58, %edi
	jmp	.L18682
.L18716:
	movl	24(%rbx), %eax
.L18683:
	addl	%eax, 48(%rsp)
	jmp	.L18599
.L18715:
	movq	32(%rbx), %rsi
	cmpb	$25, 16(%rsi)
	je	.L18717
	movq	40(%rbx), %rax
	cmpb	$25, 16(%rax)
	jne	.L18658
	movq	%rsi, %rbx
.L18589:
	movl	24(%rax), %eax
	addl	%eax, 48(%rsp)
	jmp	.L18595
.L18717:
	movq	40(%rbx), %rbx
	movq	%rsi, %rax
	jmp	.L18589
.L18714:
	movq	40(%rbp), %rdx
	movq	72(%rdx), %rbx
	jmp	.L18586
	.p2align 6,,7
.L18584:
	cmpb	$42, %dl
	je	.L18718
.L18600:
	cmpb	$103, %dl
	je	.L18599
	leal	-101(%rdx), %r8d
	cmpb	$1, %r8b
	ja	.L18581
	movq	32(%rbp), %rbx
	movq	8(%rbp), %r10
	movq	8(%rbx), %r11
	movzbl	44(%r11), %r9d
	cmpb	%r9b, 44(%r10)
	je	.L18599
.L18581:
	movl	24(%rsp), %ebp
	testl	%ebp, %ebp
	jne	.L18606
	movl	48(%rsp), %eax
	movl	52(%rsp), %edi
	cltd
	idivl	%edi
	testl	%edx, %edx
	movl	%edx, %ebx
	je	.L18719
.L18606:
	movl	24(%rsp), %eax
	movl	52(%rsp), %edi
	movq	%r13, 40(%rsp)
	movl	28(%rsp), %esi
	movl	%eax, 36(%rsp)
	call	type_for_size
	.p2align 4,,7
.L18545:
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	expand_expr
	movq	%rax, %rbx
	xorl	%eax, %eax
	call	do_pending_stack_adjust
	movzwl	(%rbx), %eax
	cmpw	$46, %ax
	je	.L18720
	cmpw	$56, %ax
	je	.L18684
	movzbl	2(%rbx), %edi
	movslq	%edi,%r11
	cmpl	$1, mode_class(,%r11,4)
	je	.L18721
.L18656:
	movzbl	2(%rbx), %eax
	testb	%al, %al
	je	.L18658
	movq	8(%r12), %rbp
	movzbl	%al, %r8d
	movq	%rbx, %rdi
	movslq	%r8d,%r14
	movl	$89, %edx
	xorl	%r9d, %r9d
	movq	const_tiny_rtx(,%r14,8), %rsi
	xorl	%eax, %eax
	movzbl	17(%rbp), %ecx
	movl	$0, (%rsp)
	shrb	$6, %cl
	andl	$1, %ecx
	call	compare_from_rtx
.L18685:
	movq	%rax, %r14
	jmp	.L18536
.L18721:
	xorl	%eax, %eax
	call	can_compare_p
	testl	%eax, %eax
	jne	.L18656
	movq	8(%rsp), %rdx
	movq	%rbx, %rdi
	movq	%r15, %rsi
	xorl	%eax, %eax
	call	do_jump_by_parts_equality_rtx
	jmp	.L18536
	.p2align 6,,7
.L18684:
	movq	const_true_rtx(%rip), %r14
	jmp	.L18536
.L18720:
	cmpq	const0_rtx(%rip), %rbx
	jne	.L18684
	movq	%rbx, %r14
	jmp	.L18536
.L18719:
	xorl	%edx, %edx
	xorl	%eax, %eax
	movl	$1, %esi
	call	mode_for_size
	cmpl	$16, %eax
	cmovne	%eax, %ebx
	movl	%ebx, 24(%rsp)
	jmp	.L18606
	.p2align 6,,7
.L18718:
	movq	40(%rbp), %rcx
	cmpb	$25, 16(%rcx)
	jne	.L18600
	movq	8(%rbp), %rdi
	movq	32(%rdi), %rax
	cmpb	$25, 16(%rax)
	jne	.L18600
	movl	24(%rax), %eax
	imull	24(%rcx), %eax
	jmp	.L18683
	.p2align 6,,7
.L18713:
	movl	flag_volatile(%rip), %ecx
	testl	%ecx, %ecx
	je	.L18583
	movl	$1, 32(%rsp)
	movzbl	16(%rbp), %edx
	jmp	.L18583
.L18578:
	movl	24(%rcx), %eax
	movl	%eax, 52(%rsp)
	jmp	.L18577
.L18712:
	movzbl	17(%r12), %eax
	movq	40(%r12), %rcx
	jmp	.L18681
.L18711:
	movq	40(%r12), %rax
	testb	$16, 53(%rax)
	movq	40(%rax), %rcx
	jne	.L18573
	movzbl	52(%rax), %r8d
	movl	%r8d, 24(%rsp)
.L18573:
	movzbl	17(%rax), %eax
	jmp	.L18681
.L18563:
	movq	32(%r12), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	xorl	%eax, %eax
	call	free_temp_slots
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L18567
.L18677:
	xorl	%eax, %eax
	call	do_pending_stack_adjust
.L18701:
	movq	40(%r12), %rdi
.L18699:
	movq	8(%rsp), %rsi
	movq	%r15, %rdx
.L18688:
	xorl	%eax, %eax
	call	do_jump
	jmp	.L18536
.L18567:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdi
	movq	%rax, 16(%rbx)
	testq	%rdi, %rdi
	movq	%rdi, pending_chain(%rip)
	movq	%rdi, %rbx
	jne	.L18567
	jmp	.L18677
.L18610:
	movq	40(%r12), %rdi
	call	integer_onep
	testl	%eax, %eax
	je	.L18611
	movq	48(%r12), %rdi
	call	integer_zerop
	testl	%eax, %eax
	jne	.L18697
.L18611:
	movq	40(%r12), %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L18613
	movq	48(%r12), %rdi
	call	integer_onep
	testl	%eax, %eax
	jne	.L18700
.L18613:
	call	gen_label_rtx
	movq	%rax, %r13
	call	gen_label_rtx
	xorl	%edx, %edx
	movq	%rax, 16(%rsp)
	movq	%r13, %rsi
	xorl	%eax, %eax
	movq	32(%r12), %rdi
	call	do_jump
	cmpq	$0, 8(%rsp)
	movq	16(%rsp), %rsi
	movq	16(%rsp), %rdx
	cmovne	8(%rsp), %rsi
	testq	%r15, %r15
	movq	40(%r12), %rdi
	cmovne	%r15, %rdx
	xorl	%eax, %eax
	call	do_jump
	xorl	%eax, %eax
	call	do_pending_stack_adjust
	movq	%r13, %rdi
	call	emit_label
	movq	48(%r12), %rdi
	movq	16(%rsp), %rdx
	cmpq	$0, 8(%rsp)
	movq	16(%rsp), %rsi
	cmovne	8(%rsp), %rsi
	testq	%r15, %r15
	cmovne	%r15, %rdx
	jmp	.L18688
.L18700:
	movq	32(%r12), %rdi
	movq	8(%rsp), %rdx
	movq	%r15, %rsi
	jmp	.L18688
.L18697:
	movq	32(%r12), %rdi
	jmp	.L18699
.L18555:
	movq	8(%r12), %rsi
	movq	32(%r12), %rdx
	movl	$96, %edi
	movq	40(%r12), %rcx
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
.L18704:
	movl	$89, %esi
	movl	$89, %edx
.L18694:
	xorl	%eax, %eax
	call	compare
	jmp	.L18685
.L18559:
	cmpq	$0, 8(%rsp)
	je	.L18722
.L18560:
	movq	32(%r12), %rdi
	movq	8(%rsp), %rsi
	xorl	%edx, %edx
.L18705:
	xorl	%eax, %eax
	call	do_jump
	jmp	.L18701
.L18722:
	call	gen_label_rtx
	movq	%rax, 16(%rsp)
	movq	%rax, 8(%rsp)
	jmp	.L18560
.L18561:
	testq	%r15, %r15
	je	.L18723
.L18562:
	movq	32(%r12), %rdi
	xorl	%esi, %esi
	movq	%r15, %rdx
	jmp	.L18705
.L18723:
	call	gen_label_rtx
	movq	%rax, 16(%rsp)
	movq	%rax, %r15
	jmp	.L18562
.L18637:
	movq	32(%r12), %rbx
	movq	8(%rbx), %r11
	movzbl	44(%r11), %edi
	movslq	%edi,%r10
	cmpl	$1, mode_class(,%r10,4)
	je	.L18724
.L18638:
	movq	%r12, %rdi
	movl	$94, %esi
	movl	$98, %edx
	jmp	.L18694
.L18724:
	xorl	%eax, %eax
	call	can_compare_p
	testl	%eax, %eax
	jne	.L18638
	movq	%r12, %rdi
	movl	$1, %esi
.L18702:
	movq	8(%rsp), %rdx
	movq	%r15, %rcx
.L18686:
	xorl	%eax, %eax
	call	do_jump_by_parts_greater
	jmp	.L18536
.L18640:
	movq	32(%r12), %rcx
	movq	8(%rcx), %r13
	movzbl	44(%r13), %edi
	movslq	%edi,%rbp
	cmpl	$1, mode_class(,%rbp,4)
	je	.L18725
.L18641:
	movq	%r12, %rdi
	movl	$93, %esi
	movl	$97, %edx
	jmp	.L18694
.L18725:
	xorl	%eax, %eax
	call	can_compare_p
	testl	%eax, %eax
	jne	.L18641
	movq	%r12, %rdi
	xorl	%esi, %esi
.L18703:
	movq	%r15, %rdx
	movq	8(%rsp), %rcx
	jmp	.L18686
.L18643:
	movq	32(%r12), %r8
	movq	8(%r8), %rdx
	movzbl	44(%rdx), %edi
	movslq	%edi,%rsi
	cmpl	$1, mode_class(,%rsi,4)
	je	.L18726
.L18644:
	movq	%r12, %rdi
	movl	$92, %esi
	movl	$96, %edx
	jmp	.L18694
.L18726:
	xorl	%eax, %eax
	call	can_compare_p
	testl	%eax, %eax
	jne	.L18644
	movq	%r12, %rdi
	xorl	%esi, %esi
	jmp	.L18702
	.p2align 6,,7
.L18646:
	movq	32(%r12), %rdi
	movq	8(%rdi), %r10
	movzbl	44(%r10), %edi
	movslq	%edi,%r9
	cmpl	$1, mode_class(,%r9,4)
	je	.L18727
.L18647:
	movq	%r12, %rdi
	movl	$91, %esi
	movl	$95, %edx
	jmp	.L18694
.L18727:
	xorl	%eax, %eax
	call	can_compare_p
	testl	%eax, %eax
	jne	.L18647
	movq	%r12, %rdi
	movl	$1, %esi
	jmp	.L18703
	.p2align 6,,7
.L18627:
	movq	40(%r12), %rdi
	call	integer_zerop
	testl	%eax, %eax
	jne	.L18700
	movq	32(%r12), %rdx
	movq	8(%rdx), %rsi
	movzbl	44(%rsi), %edi
	movslq	%edi,%rcx
	cmpl	$1, mode_class(,%rcx,4)
	je	.L18728
.L18630:
	movq	%r12, %rdi
	movl	$90, %esi
	movl	$90, %edx
	jmp	.L18694
.L18728:
	xorl	%eax, %eax
	call	can_compare_p
	testl	%eax, %eax
	jne	.L18630
	movq	8(%rsp), %rsi
	movq	%r12, %rdi
	movq	%r15, %rdx
.L18687:
	xorl	%eax, %eax
	call	do_jump_by_parts_equality
	jmp	.L18536
.L18632:
	movq	40(%r12), %rdi
	call	integer_zerop
	testl	%eax, %eax
	jne	.L18697
	movq	32(%r12), %rdi
	movq	8(%rdi), %r9
	movzbl	44(%r9), %edi
	movslq	%edi,%r8
	cmpl	$1, mode_class(,%r8,4)
	je	.L18729
.L18635:
	movq	%r12, %rdi
	jmp	.L18704
.L18729:
	xorl	%eax, %eax
	call	can_compare_p
	testl	%eax, %eax
	jne	.L18635
	movq	%r12, %rdi
	movq	%r15, %rsi
	movq	8(%rsp), %rdx
	jmp	.L18687
	.p2align 6,,7
.L18680:
	movq	32(%r12), %rdx
.L18546:
	movq	8(%rdx), %rax
	movq	8(%r12), %rsi
	movzbl	45(%rax), %ecx
	cmpb	%cl, 45(%rsi)
	jb	.L18545
	jmp	.L18697
.L18542:
	movq	32(%r12), %rdx
	movzbl	16(%rdx), %ecx
	leal	-37(%rcx), %ebx
	cmpb	$1, %bl
	jbe	.L18545
	cmpb	$42, %cl
	je	.L18545
	jmp	.L18546
	.p2align 6,,7
.L18534:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdx
	movq	%rax, 16(%rbx)
	testq	%rdx, %rdx
	movq	%rdx, pending_chain(%rip)
	movq	%rdx, %rbx
	jne	.L18534
	jmp	.L18675
.L18658:
	xorl	%eax, %eax
	call	abort
.LFE13:
.Lfe13:
	.size	do_jump,.Lfe13-do_jump
	.align 2
	.p2align 4,,15
	.type	do_jump_by_parts_greater,@function
do_jump_by_parts_greater:
.LFB14:
	pushq	%r15
.LCFI64:
	movslq	%esi,%r9
	xorl	%eax, %eax
	pushq	%r14
.LCFI65:
	movq	%rdx, %r15
	xorl	%edx, %edx
	pushq	%r13
.LCFI66:
	movl	%esi, %r13d
	xorl	%esi, %esi
	pushq	%r12
.LCFI67:
	pushq	%rbp
.LCFI68:
	movq	%rdi, %rbp
	pushq	%rbx
.LCFI69:
	subq	$56, %rsp
.LCFI70:
	movq	%rcx, 16(%rsp)
	xorl	%ecx, %ecx
	movq	32(%rdi,%r9,8), %rdi
	call	expand_expr
	xorl	%r8d, %r8d
	testl	%r13d, %r13d
	sete	%r8b
	movq	%rax, 48(%rsp)
	xorl	%ecx, %ecx
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	32(%rbp,%r8,8), %rdi
	call	expand_expr
	movq	%rax, 40(%rsp)
	movq	32(%rbp), %rsi
	movl	$1, %ebp
	movq	8(%rsi), %rbx
	movzbl	44(%rbx), %r14d
	movq	$0, 24(%rsp)
	movslq	%r14d,%rdx
	movl	mode_size(,%rdx,4), %eax
	cmpl	$-1, %eax
	leal	3(%rax), %ecx
	cmovle	%ecx, %eax
	sarl	$2, %eax
	movl	%eax, 36(%rsp)
	movzbl	17(%rbx), %edx
	shrb	$6, %dl
	andl	%edx, %ebp
	cmpq	$0, 16(%rsp)
	je	.L18737
	testq	%r15, %r15
	jne	.L18736
.L18737:
	call	gen_label_rtx
	movq	%rax, 24(%rsp)
.L18736:
	cmpq	$0, 16(%rsp)
	movq	24(%rsp), %rdi
	cmovne	16(%rsp), %rdi
	testq	%r15, %r15
	cmove	24(%rsp), %r15
	xorl	%ebx, %ebx
	cmpl	36(%rsp), %ebx
	movq	%rdi, 16(%rsp)
	jl	.L18755
.L18759:
	testq	%r15, %r15
	jne	.L18760
.L18756:
	cmpq	$0, 24(%rsp)
	jne	.L18761
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L18761:
	movq	24(%rsp), %rdi
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	emit_label
.L18760:
	movq	%r15, %rdi
	xorl	%eax, %eax
	call	emit_jump
	jmp	.L18756
	.p2align 6,,7
.L18755:
	movq	48(%rsp), %rdi
	movl	%ebx, %esi
	movl	%r14d, %edx
	call	operand_subword_force
	movl	%r14d, %edx
	movl	%ebx, %esi
	movq	40(%rsp), %rdi
	movq	%rax, %r13
	call	operand_subword_force
	testl	%ebp, %ebp
	movq	%rax, %r12
	jne	.L18748
	testl	%ebx, %ebx
	movl	$92, %edx
	jle	.L18747
.L18748:
	movl	$96, %edx
.L18747:
	movl	word_mode(%rip), %r8d
	xorl	%r9d, %r9d
	xorl	%eax, %eax
	movq	%r13, %rdi
	movq	%r12, %rsi
	movl	%ebp, %ecx
	movl	$0, (%rsp)
	call	compare_from_rtx
	cmpq	const_true_rtx(%rip), %rax
	je	.L18762
	cmpq	const0_rtx(%rip), %rax
	je	.L18750
	movq	16(%rsp), %rdx
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	do_jump_for_compare
.L18750:
	movl	word_mode(%rip), %r8d
	xorl	%r9d, %r9d
	xorl	%eax, %eax
	movq	%r13, %rdi
	movq	%r12, %rsi
	movl	$89, %edx
	movl	%ebp, %ecx
	movl	$0, (%rsp)
	call	compare_from_rtx
	cmpq	const_true_rtx(%rip), %rax
	je	.L18763
	cmpq	const0_rtx(%rip), %rax
	je	.L18742
	movq	%rax, %rdi
	xorl	%esi, %esi
	movq	%r15, %rdx
	xorl	%eax, %eax
	call	do_jump_for_compare
.L18742:
	incl	%ebx
	cmpl	36(%rsp), %ebx
	jl	.L18755
	jmp	.L18759
	.p2align 6,,7
.L18763:
	movq	%r15, %rdi
	xorl	%eax, %eax
	call	emit_jump
	jmp	.L18742
.L18762:
	movq	16(%rsp), %rdi
	xorl	%eax, %eax
	call	emit_jump
	jmp	.L18750
.LFE14:
.Lfe14:
	.size	do_jump_by_parts_greater,.Lfe14-do_jump_by_parts_greater
	.align 2
	.p2align 4,,15
	.type	do_jump_by_parts_equality,@function
do_jump_by_parts_equality:
.LFB15:
	pushq	%r15
.LCFI71:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	pushq	%r14
.LCFI72:
	movq	%rsi, %r15
	movq	%rdi, %r14
	pushq	%r13
.LCFI73:
	xorl	%esi, %esi
	pushq	%r12
.LCFI74:
	pushq	%rbp
.LCFI75:
	pushq	%rbx
.LCFI76:
	subq	$40, %rsp
.LCFI77:
	movq	%rdx, 32(%rsp)
	xorl	%edx, %edx
	movq	32(%rdi), %rdi
	call	expand_expr
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, 24(%rsp)
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	40(%r14), %rdi
	call	expand_expr
	movq	%rax, 16(%rsp)
	movq	32(%r14), %rbx
	movq	8(%rbx), %rcx
	movzbl	44(%rcx), %r12d
	movq	$0, 8(%rsp)
	movslq	%r12d,%rdx
	movl	mode_size(,%rdx,4), %eax
	cmpl	$-1, %eax
	leal	3(%rax), %ecx
	movl	%eax, %r13d
	cmovle	%ecx, %r13d
	sarl	$2, %r13d
	testq	%r15, %r15
	je	.L18779
.L18766:
	xorl	%ebp, %ebp
	cmpl	%r13d, %ebp
	jl	.L18774
.L18778:
	cmpq	$0, 32(%rsp)
	je	.L18775
	movq	32(%rsp), %rdi
	xorl	%eax, %eax
	call	emit_jump
.L18775:
	cmpq	$0, 8(%rsp)
	jne	.L18780
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L18780:
	movq	8(%rsp), %rdi
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	emit_label
	.p2align 6,,7
.L18774:
	movq	24(%rsp), %rdi
	movl	%ebp, %esi
	movl	%r12d, %edx
	call	operand_subword_force
	movl	%r12d, %edx
	movl	%ebp, %esi
	movq	16(%rsp), %rdi
	movq	%rax, %rbx
	call	operand_subword_force
	xorl	%r9d, %r9d
	movl	word_mode(%rip), %r8d
	movq	8(%r14), %rdi
	movq	%rax, %rsi
	movl	$90, %edx
	xorl	%eax, %eax
	movzbl	17(%rdi), %ecx
	movq	%rbx, %rdi
	movl	$0, (%rsp)
	shrb	$6, %cl
	andl	$1, %ecx
	call	compare_from_rtx
	cmpq	const_true_rtx(%rip), %rax
	je	.L18781
	cmpq	const0_rtx(%rip), %rax
	je	.L18769
	movq	%rax, %rdi
	movq	%r15, %rsi
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	do_jump_for_compare
.L18769:
	incl	%ebp
	cmpl	%r13d, %ebp
	jl	.L18774
	jmp	.L18778
.L18781:
	movq	%r15, %rdi
	xorl	%eax, %eax
	call	emit_jump
	jmp	.L18769
.L18779:
	call	gen_label_rtx
	movq	%rax, 8(%rsp)
	movq	%rax, %r15
	jmp	.L18766
.LFE15:
.Lfe15:
	.size	do_jump_by_parts_equality,.Lfe15-do_jump_by_parts_equality
	.align 2
	.p2align 4,,15
	.type	do_jump_by_parts_equality_rtx,@function
do_jump_by_parts_equality_rtx:
.LFB16:
	pushq	%r15
.LCFI78:
	movq	%rdx, %r15
	pushq	%r14
.LCFI79:
	pushq	%r13
.LCFI80:
	movq	%rsi, %r13
	pushq	%r12
.LCFI81:
	pushq	%rbp
.LCFI82:
	movq	%rdi, %rbp
	pushq	%rbx
.LCFI83:
	subq	$8, %rsp
.LCFI84:
	movzbq	2(%rdi), %rdx
	movl	mode_size(,%rdx,4), %eax
	cmpl	$-1, %eax
	leal	3(%rax), %ecx
	movl	%eax, %r12d
	cmovle	%ecx, %r12d
	xorl	%r14d, %r14d
	sarl	$2, %r12d
	testq	%rsi, %rsi
	je	.L18797
.L18784:
	xorl	%ebx, %ebx
	cmpl	%r12d, %ebx
	jl	.L18792
.L18796:
	testq	%r15, %r15
	je	.L18793
	movq	%r15, %rdi
	xorl	%eax, %eax
	call	emit_jump
.L18793:
	testq	%r14, %r14
	jne	.L18798
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L18798:
	addq	$8, %rsp
	movq	%r14, %rdi
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	emit_label
	.p2align 6,,7
.L18792:
	movzbl	2(%rbp), %edx
	movq	%rbp, %rdi
	movl	%ebx, %esi
	call	operand_subword_force
	xorl	%r9d, %r9d
	movl	word_mode(%rip), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$90, %edx
	xorl	%eax, %eax
	movl	$1, %ecx
	movl	$0, (%rsp)
	call	compare_from_rtx
	cmpq	const_true_rtx(%rip), %rax
	je	.L18799
	cmpq	const0_rtx(%rip), %rax
	je	.L18787
	movq	%rax, %rdi
	movq	%r13, %rsi
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	do_jump_for_compare
.L18787:
	incl	%ebx
	cmpl	%r12d, %ebx
	jl	.L18792
	jmp	.L18796
.L18799:
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	emit_jump
	jmp	.L18787
.L18797:
	call	gen_label_rtx
	movq	%rax, %r14
	movq	%rax, %r13
	jmp	.L18784
.LFE16:
.Lfe16:
	.size	do_jump_by_parts_equality_rtx,.Lfe16-do_jump_by_parts_equality_rtx
	.align 2
	.p2align 4,,15
	.type	do_jump_for_compare,@function
do_jump_for_compare:
.LFB17:
	subq	$40, %rsp
.LCFI85:
	testq	%rdx, %rdx
	movq	%rbx, 8(%rsp)
.LCFI86:
	movq	%rbp, 16(%rsp)
.LCFI87:
	movq	%r12, 24(%rsp)
.LCFI88:
	movq	%r13, 32(%rsp)
.LCFI89:
	movq	%rdi, %rbx
	movq	%rsi, %rbp
	je	.L18801
	movzwq	(%rdi), %rsi
	movq	bcc_gen_fctn(,%rsi,8), %rcx
	testq	%rcx, %rcx
	je	.L18824
	movq	%rdx, %rdi
	xorl	%eax, %eax
	call	*%rcx
	movq	%rax, %rdi
	call	emit_jump_insn
	testq	%rbp, %rbp
	je	.L18800
	movq	%rbp, %rdi
	movq	8(%rsp), %rbx
	movq	24(%rsp), %r12
	movq	16(%rsp), %rbp
	movq	32(%rsp), %r13
	xorl	%eax, %eax
	addq	$40, %rsp
	jmp	emit_jump
	.p2align 6,,7
.L18800:
	movq	8(%rsp), %rbx
	movq	16(%rsp), %rbp
	movq	24(%rsp), %r12
	movq	32(%rsp), %r13
	addq	$40, %rsp
	ret
	.p2align 6,,7
.L18801:
	testq	%rsi, %rsi
	je	.L18800
	call	get_last_insn
	xorl	%r13d, %r13d
	movzwq	(%rbx), %rcx
	movq	16(%rax), %r12
	movq	bcc_gen_fctn(,%rcx,8), %rdx
	testq	%rdx, %rdx
	je	.L18824
	movq	%rbp, %rdi
	xorl	%eax, %eax
	call	*%rdx
	movq	%rax, %rdi
	call	emit_jump_insn
	testq	%r12, %r12
	je	.L18825
	movq	24(%r12), %rax
.L18810:
	movq	24(%rax), %rax
	testq	%rax, %rax
	je	.L18823
	.p2align 4,,7
.L18817:
	cmpw	$27, (%rax)
	je	.L18826
.L18813:
	movq	24(%rax), %rax
	testq	%rax, %rax
	jne	.L18817
.L18823:
	call	get_last_insn
	cmpq	%rax, %r13
	jne	.L18824
	xorl	%eax, %eax
	movq	%r13, %rdi
	movq	%rbp, %rsi
	call	invert_jump
	testl	%eax, %eax
	jne	.L18800
	call	gen_label_rtx
	movq	%r13, %rdi
	movq	%rax, %r12
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	redirect_jump
	xorl	%eax, %eax
	movq	%rbp, %rdi
	call	emit_jump
	movq	32(%rsp), %r13
	movq	16(%rsp), %rbp
	movq	%r12, %rdi
	movq	8(%rsp), %rbx
	movq	24(%rsp), %r12
	addq	$40, %rsp
	jmp	emit_label
	.p2align 6,,7
.L18826:
	testq	%r13, %r13
	jne	.L18824
	movq	%rax, %r13
	jmp	.L18813
.L18825:
	call	get_insns
	jmp	.L18810
.L18824:
	xorl	%eax, %eax
	call	abort
.LFE17:
.Lfe17:
	.size	do_jump_for_compare,.Lfe17-do_jump_for_compare
	.align 2
	.p2align 4,,15
	.type	compare,@function
compare:
.LFB18:
	pushq	%r15
.LCFI90:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	pushq	%r14
.LCFI91:
	pushq	%r13
.LCFI92:
	movl	$1, %r13d
	pushq	%r12
.LCFI93:
	movl	%edx, %r12d
	xorl	%edx, %edx
	pushq	%rbp
.LCFI94:
	movq	%rdi, %rbp
	pushq	%rbx
.LCFI95:
	movl	%esi, %ebx
	xorl	%esi, %esi
	subq	$24, %rsp
.LCFI96:
	movq	32(%rdi), %rdi
	call	expand_expr
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, 16(%rsp)
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	40(%rbp), %rdi
	call	expand_expr
	movq	32(%rbp), %rdi
	movq	%rax, %r15
	movq	8(%rdi), %rcx
	movzbl	17(%rcx), %edx
	movzbl	44(%rcx), %r14d
	shrb	$6, %dl
	andl	%edx, %r13d
	cmove	%ebx, %r12d
	cmpl	$16, %r14d
	je	.L18832
	xorl	%r9d, %r9d
.L18831:
	movq	8(%rbp), %rdx
	movq	16(%rsp), %rdi
	movq	%r15, %rsi
	movl	%r13d, %ecx
	movl	%r14d, %r8d
	movl	48(%rdx), %eax
	movl	%r12d, %edx
	shrl	$3, %eax
	movl	%eax, (%rsp)
	xorl	%eax, %eax
	call	compare_from_rtx
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
	.p2align 6,,7
.L18832:
	xorl	%eax, %eax
	call	expr_size
	movq	%rax, %r9
	jmp	.L18831
.LFE18:
.Lfe18:
	.size	compare,.Lfe18-compare
	.align 2
	.p2align 4,,15
.globl compare_from_rtx
	.type	compare_from_rtx,@function
compare_from_rtx:
.LFB19:
	pushq	%r15
.LCFI97:
	movl	%r8d, %r15d
	pushq	%r14
.LCFI98:
	movq	%r9, %r14
	pushq	%r13
.LCFI99:
	pushq	%r12
.LCFI100:
	movl	%edx, %r12d
	pushq	%rbp
.LCFI101:
	movq	%rsi, %rbp
	pushq	%rbx
.LCFI102:
	movq	%rdi, %rbx
	subq	$24, %rsp
.LCFI103:
	movzwl	(%rdi), %eax
	movl	%ecx, 20(%rsp)
	movl	80(%rsp), %r13d
	subl	$46, %eax
	cmpw	$1, %ax
	jbe	.L18838
	movq	%rdi, %rbp
	movq	%rsi, %rbx
.L18834:
	movl	flag_force_mem(%rip), %eax
	testl	%eax, %eax
	jne	.L18839
.L18835:
	xorl	%eax, %eax
	call	do_pending_stack_adjust
	cmpw	$46, (%rbp)
	jne	.L18836
	cmpw	$46, (%rbx)
	je	.L18840
.L18836:
	movl	20(%rsp), %r9d
	movq	%rbp, %rdi
	movq	%rbx, %rsi
	movl	%r12d, %edx
	movq	%r14, %rcx
	movl	%r15d, %r8d
	xorl	%eax, %eax
	movl	%r13d, (%rsp)
	call	emit_cmp_insn
	movq	cc0_rtx(%rip), %rdx
	movq	const0_rtx(%rip), %rcx
	movl	%r12d, %edi
	addq	$24, %rsp
	xorl	%esi, %esi
	xorl	%eax, %eax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_rtx
.L18840:
	addq	$24, %rsp
	movq	%rbx, %rcx
	movq	%rbp, %rdx
	popq	%rbx
	popq	%rbp
	movl	%r12d, %edi
	movl	%r15d, %esi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	simplify_relational_operation
	.p2align 6,,7
.L18839:
	movq	%rbp, %rdi
	xorl	%eax, %eax
	call	force_not_mem
	movq	%rbx, %rdi
	movq	%rax, %rbp
	xorl	%eax, %eax
	call	force_not_mem
	movq	%rax, %rbx
	jmp	.L18835
	.p2align 6,,7
.L18838:
	movl	%edx, %edi
	call	swap_condition
	movl	%eax, %r12d
	jmp	.L18834
.LFE19:
.Lfe19:
	.size	compare_from_rtx,.Lfe19-compare_from_rtx
	.align 2
	.p2align 4,,15
	.type	do_store_flag,@function
do_store_flag:
.LFB20:
	pushq	%r15
.LCFI104:
	pushq	%r14
.LCFI105:
	movq	%rsi, %r14
	pushq	%r13
.LCFI106:
	pushq	%r12
.LCFI107:
	movq	%rdi, %r12
	pushq	%rbp
.LCFI108:
	pushq	%rbx
.LCFI109:
	subq	$72, %rsp
.LCFI110:
	movl	%edx, 68(%rsp)
	movl	%ecx, 64(%rsp)
	movl	$0, 32(%rsp)
	movq	%rsi, 16(%rsp)
	cmpb	$90, 16(%rdi)
	je	.L19083
.L18842:
	movq	32(%r12), %rbx
	movq	40(%r12), %r13
	xorl	%ebp, %ebp
	movq	8(%rbx), %rcx
	movq	%rcx, 56(%rsp)
	movzbl	17(%rcx), %edi
	movzbl	44(%rcx), %edx
	shrb	$6, %dil
	movzbl	%dl, %r15d
	movl	%edi, %esi
	andl	$1, %esi
	cmpl	$16, %r15d
	movl	%esi, 52(%rsp)
	je	.L18841
	movzbl	16(%rbx), %ecx
	leal	-101(%rcx), %ebp
	cmpb	$2, %bpl
	ja	.L18845
	movq	32(%rbx), %rdi
	movq	8(%rdi), %r8
	cmpb	44(%r8), %dl
	je	.L18848
.L18845:
	movzbl	16(%r13), %r11d
	subb	$101, %r11b
	cmpb	$2, %r11b
	ja	.L18850
	movq	32(%r13), %rdi
	movq	8(%r13), %rbp
	movq	8(%rdi), %r8
	movzbl	44(%r8), %esi
	cmpb	%sil, 44(%rbp)
	je	.L18853
.L18850:
	movzbl	16(%r12), %eax
	subl	$91, %eax
	cmpl	$5, %eax
	ja	.L19074
	mov	%eax, %edx
	jmp	*.L18886(,%rdx,8)
	.section	.rodata
	.align 8
	.align 4
.L18886:
	.quad	.L18857
	.quad	.L18864
	.quad	.L18871
	.quad	.L18878
	.quad	.L18855
	.quad	.L18856
	.text
.L18855:
	movl	$90, 28(%rsp)
.L18854:
	leal	-25(%rcx), %r8d
	cmpb	$1, %r8b
	jbe	.L19084
	movq	%r13, %r9
	movq	%rbx, %r13
	movq	%r9, %rbx
.L18887:
	movl	28(%rsp), %eax
	subl	$89, %eax
	cmpl	$1, %eax
	ja	.L18888
	cmpb	$83, 16(%r13)
	je	.L19085
.L18888:
	xorl	%eax, %eax
	movl	%r15d, %edi
	xorl	%ebp, %ebp
	call	can_compare_p
	testl	%eax, %eax
	je	.L18841
	movslq	28(%rsp),%rbp
	movl	setcc_gen_code(,%rbp,4), %eax
	movq	%rbp, 40(%rsp)
	cmpl	$210, %eax
	je	.L18951
	movl	64(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L18950
	cltq
	movl	68(%rsp), %r11d
	leaq	(%rax,%rax,4), %rsi
	cmpl	%r11d, insn_operand_mode(,%rsi,8)
	je	.L18950
.L18951:
	cmpl	$94, 28(%rsp)
	je	.L19086
.L18954:
	movl	64(%rsp), %eax
	testl	%eax, %eax
	jne	.L18956
	cmpl	$91, 28(%rsp)
	je	.L19087
.L18952:
	movl	28(%rsp), %eax
	subl	$89, %eax
	cmpl	$1, %eax
	ja	.L18956
	movq	56(%rsp), %rdx
	cmpb	$8, 16(%rdx)
	je	.L18956
	movslq	%r15d,%rdx
	salq	$4, %rdx
	movq	%rdx, %rcx
	addq	abs_optab(%rip), %rcx
	cmpl	$210, 8(%rcx)
	je	.L19088
	.p2align 4,,7
.L18950:
	xorl	%eax, %eax
	movq	%r12, %rdi
	call	preexpand_calls
	testq	%r14, %r14
	je	.L18960
	movzwl	(%r14), %edx
	cmpw	$51, %dx
	je	.L19089
.L18960:
	movq	$0, 16(%rsp)
.L18959:
	movq	16(%rsp), %rsi
	movq	%r13, %rdi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%esi, %esi
	movq	%rax, %r13
	movq	%rbx, %rdi
	xorl	%eax, %eax
	call	expand_expr
	testq	%r14, %r14
	movq	%rax, %r12
	je	.L19090
.L19013:
	movzwl	(%r13), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L19016
	mov	%eax, %ebx
	jmp	*.L19025(,%rbx,8)
	.section	.rodata
	.align 8
	.align 4
.L19025:
	.quad	.L19019
	.quad	.L19016
	.quad	.L19016
	.quad	.L19016
	.quad	.L19024
	.quad	.L19016
	.quad	.L19016
	.quad	.L19016
	.quad	.L19022
	.quad	.L19022
	.quad	.L19016
	.quad	.L19022
	.text
.L19019:
	movq	8(%r13), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %ebx
	.p2align 4,,7
.L19018:
	testl	%ebx, %ebx
	jne	.L19091
	movq	%r13, %rbp
.L19015:
	movzwl	(%r12), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L19029
	mov	%eax, %esi
	jmp	*.L19038(,%rsi,8)
	.section	.rodata
	.align 8
	.align 4
.L19038:
	.quad	.L19032
	.quad	.L19029
	.quad	.L19029
	.quad	.L19029
	.quad	.L19037
	.quad	.L19029
	.quad	.L19029
	.quad	.L19029
	.quad	.L19035
	.quad	.L19035
	.quad	.L19029
	.quad	.L19035
	.text
.L19032:
	movq	8(%r12), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %ebx
	.p2align 4,,7
.L19031:
	testl	%ebx, %ebx
	jne	.L19092
	movq	%r12, %rcx
.L19028:
	movl	28(%rsp), %esi
	movl	52(%rsp), %r9d
	movq	%rbp, %rdx
	xorl	%eax, %eax
	movq	%r14, %rdi
	movl	%r15d, %r8d
	movl	$1, (%rsp)
	call	emit_store_flag
	testq	%rax, %rax
	movq	%rax, %rbp
	je	.L19040
	movl	32(%rsp), %eax
	testl	%eax, %eax
	jne	.L19093
	.p2align 4,,7
.L18841:
	addq	$72, %rsp
	movq	%rbp, %rax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L19093:
	movl	$3, (%rsp)
	movl	68(%rsp), %edi
	movq	xor_optab(%rip), %rsi
	movq	%rbp, %rdx
	movq	const1_rtx(%rip), %rcx
	movq	%rbp, %r8
.L19073:
	xorl	%r9d, %r9d
	xorl	%eax, %eax
	call	expand_binop
	movq	%rax, %rbp
	jmp	.L18841
.L19040:
	testq	%r14, %r14
	je	.L19043
	cmpw	$51, (%r14)
	je	.L19094
.L19043:
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	%rax, %r14
.L19042:
	movl	32(%rsp), %eax
	testl	%eax, %eax
	je	.L19046
	movq	const0_rtx(%rip), %rsi
.L19047:
	movq	%r14, %rdi
	call	emit_move_insn
	xorl	%eax, %eax
	xorl	%r9d, %r9d
	movl	28(%rsp), %edx
	movl	52(%rsp), %ecx
	movq	%r13, %rdi
	movq	%r12, %rsi
	movl	%r15d, %r8d
	movl	$0, (%rsp)
	call	compare_from_rtx
	cmpw	$46, (%rax)
	je	.L19095
	call	gen_label_rtx
	movq	40(%rsp), %r13
	movq	%rax, %rbx
	movq	bcc_gen_fctn(,%r13,8), %rdx
	testq	%rdx, %rdx
	je	.L19074
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	*%rdx
	movq	%rax, %rdi
	call	emit_jump_insn
	movl	32(%rsp), %eax
	testl	%eax, %eax
	je	.L19056
	movq	const1_rtx(%rip), %rsi
.L19057:
	movq	%r14, %rdi
	movq	%r14, %rbp
	call	emit_move_insn
	movq	%rbx, %rdi
	call	emit_label
	jmp	.L18841
.L19056:
	movq	const0_rtx(%rip), %rsi
	jmp	.L19057
.L19095:
	movq	const0_rtx(%rip), %rdx
	cmpq	%rdx, %rax
	je	.L19096
	movl	32(%rsp), %r15d
	testl	%r15d, %r15d
	je	.L19049
.L19051:
	movq	%rdx, %rbp
	jmp	.L18841
.L19049:
	movq	const1_rtx(%rip), %rbp
	jmp	.L18841
.L19096:
	movl	32(%rsp), %r14d
	testl	%r14d, %r14d
	je	.L19051
	jmp	.L19049
.L19046:
	movq	const1_rtx(%rip), %rsi
	jmp	.L19047
.L19094:
	xorl	%eax, %eax
	movq	%r14, %rdi
	movq	%r13, %rsi
	call	reg_mentioned_p
	testl	%eax, %eax
	jne	.L19043
	xorl	%eax, %eax
	movq	%r14, %rdi
	movq	%r12, %rsi
	call	reg_mentioned_p
	testl	%eax, %eax
	je	.L19042
	jmp	.L19043
	.p2align 6,,7
.L19092:
	movq	%r12, %rdi
	call	copy_rtx
	movq	%rax, %rcx
	jmp	.L19028
.L19037:
	movl	$1, %ebx
	jmp	.L19031
	.p2align 6,,7
.L19029:
	xorl	%ebx, %ebx
	jmp	.L19031
.L19035:
	movq	8(%r12), %rdi
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L19037
	movq	16(%r12), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L19031
	jmp	.L19037
	.p2align 6,,7
.L19091:
	movq	%r13, %rdi
	call	copy_rtx
	movq	%rax, %rbp
	jmp	.L19015
.L19024:
	movl	$1, %ebx
	jmp	.L19018
	.p2align 6,,7
.L19016:
	xorl	%ebx, %ebx
	jmp	.L19018
.L19022:
	movq	8(%r13), %rdi
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L19024
	movq	16(%r13), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L19018
	jmp	.L19024
	.p2align 6,,7
.L19090:
	movl	68(%rsp), %edi
	call	gen_reg_rtx
	movq	%rax, %r14
	jmp	.L19013
.L19089:
	movzbl	2(%r14), %r12d
	cmpl	%r15d, %r12d
	jne	.L18960
	movzbl	16(%rbx), %ecx
	xorl	%r12d, %r12d
	movzbl	%cl, %edi 
	salq	$3, %rdi
	addq	tree_code_type(%rip), %rdi
	movq	(%rdi), %r9
	movsbl	(%r9),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L18967
	mov	%eax, %ebp
	jmp	*.L19006(,%rbp,8)
	.section	.rodata
	.align 8
	.align 4
.L19006:
	.quad	.L18976
	.quad	.L18978
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18978
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L19012
	.quad	.L18968
	.quad	.L18981
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18981
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18967
	.quad	.L18970
	.text
.L18968:
	movq	120(%rbx), %r12
.L18967:
	movl	$1, %ebp
.L19071:
	testq	%r12, %r12
	je	.L18962
.L19064:
	cmpw	$53, (%r12)
	je	.L19097
.L19009:
	xorl	%eax, %eax
	movq	%r14, %rdi
	movq	%r12, %rsi
	call	rtx_equal_p
	xorl	%ebp, %ebp
	testl	%eax, %eax
	jne	.L18962
	cmpw	$55, (%r14)
	je	.L19098
.L19012:
	movl	$1, %ebp
.L18962:
	testl	%ebp, %ebp
	jne	.L18959
	jmp	.L18960
.L19098:
	cmpw	$55, (%r12)
	jne	.L19012
	testb	$32, 17(%rbx)
.L19081:
	je	.L18962
	jmp	.L19012
.L19097:
	movq	8(%r12), %r12
	cmpw	$51, (%r12)
	jne	.L19009
	cmpl	$63, 8(%r12)
	jg	.L19009
.L19067:
	xorl	%ebp, %ebp
	jmp	.L18962
.L18976:
	movq	32(%rbx), %rsi
	movq	%r14, %rdi
.L19080:
	xorl	%eax, %eax
	call	safe_from_p
.L19072:
	movl	%eax, %ebp
	jmp	.L18962
.L18978:
	movq	32(%rbx), %rsi
	xorl	%eax, %eax
	movq	%r14, %rdi
	xorl	%ebp, %ebp
	call	safe_from_p
	testl	%eax, %eax
	je	.L18962
	movq	%r14, %rdi
	movq	40(%rbx), %rsi
.L19082:
	xorl	%eax, %eax
	call	safe_from_p
	testl	%eax, %eax
	jmp	.L19081
.L18981:
	movzbl	%cl, %eax
	subl	$39, %eax
	cmpl	$67, %eax
	ja	.L18982
	mov	%eax, %r10d
	jmp	*.L18997(,%r10,8)
	.section	.rodata
	.align 8
	.align 4
.L18997:
	.quad	.L18984
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18995
	.quad	.L18986
	.quad	.L19074
	.quad	.L18993
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18982
	.quad	.L18994
	.quad	.L18991
	.quad	.L18983
	.text
.L18983:
	movq	32(%rbx), %rdi
	call	staticp
	jmp	.L19072
.L18984:
	xorl	%ebp, %ebp
	cmpw	$55, %dx
	je	.L18962
.L18982:
	testq	%r12, %r12
	jne	.L19064
	movzbl	%cl, %r11d 
	xorl	%ebp, %ebp
	salq	$2, %r11
	addq	tree_code_length(%rip), %r11
	movl	(%r11), %eax
	cmpl	%eax, %ebp
	movl	%eax, 36(%rsp)
	jge	.L18967
.L19005:
	movslq	%ebp,%rdx
	movq	32(%rbx,%rdx,8), %rsi
	testq	%rsi, %rsi
	jne	.L19099
.L19002:
	incl	%ebp
	cmpl	36(%rsp), %ebp
	jl	.L19005
	jmp	.L18967
.L19099:
	xorl	%eax, %eax
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L19002
	jmp	.L19067
.L18995:
	movq	%r14, %rdi
	movq	40(%rbx), %rsi
	jmp	.L19080
.L18986:
	movq	48(%rbx), %r12
	testq	%r12, %r12
	jne	.L19064
	cmpw	$51, %dx
	je	.L19100
.L18990:
	cmpw	$55, %dx
	jne	.L18982
	jmp	.L19067
.L19100:
	cmpl	$63, 8(%r14)
	jle	.L19067
	jmp	.L18990
.L18993:
	movq	40(%rbx), %r12
	jmp	.L18982
.L18994:
	movq	48(%rbx), %r12
	jmp	.L18982
.L18991:
	movq	40(%rbx), %r12
	xorl	%ebp, %ebp
	jmp	.L19071
	.p2align 6,,7
.L18970:
	cmpb	$3, %cl
	jne	.L19067
	movq	32(%rbx), %rsi
	xorl	%ebp, %ebp
	testq	%rsi, %rsi
	jne	.L19101
.L18973:
	movq	(%rbx), %rsi
	movq	%r14, %rdi
	testq	%rsi, %rsi
	jne	.L19082
	jmp	.L19012
.L19101:
	xorl	%eax, %eax
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L18962
	jmp	.L18973
	.p2align 6,,7
.L19088:
	movq	%rdx, %r8
	addq	ffs_optab(%rip), %r8
	cmpl	$210, 8(%r8)
	jne	.L18950
	.p2align 4,,7
.L18956:
	xorl	%ebp, %ebp
	jmp	.L18841
.L19087:
	movq	%rbx, %rdi
	call	integer_zerop
	testl	%eax, %eax
	jne	.L18950
	jmp	.L18952
.L19086:
	movq	%rbx, %rdi
	call	integer_zerop
	testl	%eax, %eax
	jne	.L18950
	jmp	.L18954
.L19085:
	movq	%rbx, %rdi
	call	integer_zerop
	testl	%eax, %eax
	je	.L18888
	movq	40(%r13), %rdi
	call	integer_pow2p
	testl	%eax, %eax
	je	.L18888
	movq	56(%rsp), %rdi
	cmpb	$32, 45(%rdi)
	ja	.L18888
	movq	40(%r13), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movl	8(%rax), %edi
	xorl	%eax, %eax
	call	exact_log2_wide
	testq	%r14, %r14
	movl	%eax, 48(%rsp)
	je	.L18890
	movzwl	(%r14), %eax
	cmpw	$51, %ax
	movl	%eax, %edx
	je	.L19102
.L18890:
	movq	$0, 16(%rsp)
.L18889:
	movq	32(%r13), %rdi
	movq	16(%rsp), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movl	48(%rsp), %r12d
	movq	%rax, %rbp
	testl	%r12d, %r12d
	jne	.L19103
.L18943:
	movzbl	2(%rbp), %r13d
	cmpl	68(%rsp), %r13d
	je	.L18944
	movl	68(%rsp), %edi
	movq	%rbp, %rsi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%rax, %rbp
.L18944:
	movq	56(%rsp), %rax
	movzbl	45(%rax), %r8d
	decl	%r8d
	cmpl	%r8d, 48(%rsp)
	je	.L18945
	movq	const1_rtx(%rip), %rsi
	movq	%rbp, %rdi
	movq	%r14, %rdx
	xorl	%eax, %eax
	call	expand_and
	movq	%rax, %rbp
.L18945:
	cmpl	$90, 28(%rsp)
	je	.L19104
.L18948:
	cmpl	$89, 28(%rsp)
	jne	.L18841
	movl	32(%rsp), %edi
	testl	%edi, %edi
	je	.L18841
.L18947:
	movl	68(%rsp), %edi
	movq	xor_optab(%rip), %rsi
	movq	%rbp, %rdx
	movq	const1_rtx(%rip), %rcx
	movq	%r14, %r8
	movl	$3, (%rsp)
	jmp	.L19073
.L19104:
	movl	32(%rsp), %r9d
	testl	%r9d, %r9d
	je	.L18947
	jmp	.L18948
.L19103:
	movl	48(%rsp), %edi
	call	size_int
	movl	$1, %r9d
	movq	%r14, %r8
	movzbl	2(%rbp), %esi
	movq	%rax, %rcx
	movq	%rbp, %rdx
	movl	$78, %edi
	xorl	%eax, %eax
	call	expand_shift
	movq	%rax, %rbp
	jmp	.L18943
.L19102:
	movzbl	2(%r14), %ebx
	cmpl	%r15d, %ebx
	jne	.L18890
	movq	32(%r13), %rbx
	xorl	%r12d, %r12d
	movzbl	16(%rbx), %ecx
	movzbl	%cl, %r10d 
	salq	$3, %r10
	addq	tree_code_type(%rip), %r10
	movq	(%r10), %r15
	movsbl	(%r15),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L18897
	mov	%eax, %r11d
	jmp	*.L18936(,%r11,8)
	.section	.rodata
	.align 8
	.align 4
.L18936:
	.quad	.L18906
	.quad	.L18908
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18908
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18942
	.quad	.L18898
	.quad	.L18911
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18911
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18897
	.quad	.L18900
	.text
.L18898:
	movq	120(%rbx), %r12
.L18897:
	movl	$1, %ebp
.L19069:
	testq	%r12, %r12
	je	.L18892
.L19063:
	cmpw	$53, (%r12)
	je	.L19105
.L18939:
	xorl	%eax, %eax
	movq	%r14, %rdi
	movq	%r12, %rsi
	call	rtx_equal_p
	xorl	%ebp, %ebp
	testl	%eax, %eax
	jne	.L18892
	cmpw	$55, (%r14)
	je	.L19106
.L18942:
	movl	$1, %ebp
.L18892:
	testl	%ebp, %ebp
	jne	.L18889
	jmp	.L18890
.L19106:
	cmpw	$55, (%r12)
	jne	.L18942
	testb	$32, 17(%rbx)
.L19078:
	je	.L18892
	jmp	.L18942
.L19105:
	movq	8(%r12), %r12
	cmpw	$51, (%r12)
	jne	.L18939
	cmpl	$63, 8(%r12)
	jg	.L18939
.L19066:
	xorl	%ebp, %ebp
	jmp	.L18892
.L18906:
	movq	32(%rbx), %rsi
	movq	%r14, %rdi
.L19077:
	xorl	%eax, %eax
	call	safe_from_p
.L19070:
	movl	%eax, %ebp
	jmp	.L18892
.L18908:
	movq	32(%rbx), %rsi
	xorl	%eax, %eax
	movq	%r14, %rdi
	xorl	%ebp, %ebp
	call	safe_from_p
	testl	%eax, %eax
	je	.L18892
	movq	%r14, %rdi
	movq	40(%rbx), %rsi
.L19079:
	xorl	%eax, %eax
	call	safe_from_p
	testl	%eax, %eax
	jmp	.L19078
.L18911:
	movzbl	%cl, %eax
	subl	$39, %eax
	cmpl	$67, %eax
	ja	.L18912
	mov	%eax, %esi
	jmp	*.L18927(,%rsi,8)
	.section	.rodata
	.align 8
	.align 4
.L18927:
	.quad	.L18914
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18925
	.quad	.L18916
	.quad	.L19074
	.quad	.L18923
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18912
	.quad	.L18924
	.quad	.L18921
	.quad	.L18913
	.text
.L18913:
	movq	32(%rbx), %rdi
	call	staticp
	jmp	.L19070
.L18914:
	xorl	%ebp, %ebp
	cmpw	$55, %dx
	je	.L18892
.L18912:
	testq	%r12, %r12
	jne	.L19063
	movzbl	%cl, %edx 
	xorl	%ebp, %ebp
	salq	$2, %rdx
	addq	tree_code_length(%rip), %rdx
	movl	(%rdx), %r15d
	cmpl	%r15d, %ebp
	jge	.L18897
.L18935:
	movslq	%ebp,%rcx
	movq	32(%rbx,%rcx,8), %rsi
	testq	%rsi, %rsi
	jne	.L19107
.L18932:
	incl	%ebp
	cmpl	%r15d, %ebp
	jl	.L18935
	jmp	.L18897
.L19107:
	xorl	%eax, %eax
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L18932
	jmp	.L19066
.L18925:
	movq	%r14, %rdi
	movq	40(%rbx), %rsi
	jmp	.L19077
.L18916:
	movq	48(%rbx), %r12
	testq	%r12, %r12
	jne	.L19063
	cmpw	$51, %dx
	je	.L19108
.L18920:
	cmpw	$55, %dx
	jne	.L18912
	jmp	.L19066
.L19108:
	cmpl	$63, 8(%r14)
	jle	.L19066
	jmp	.L18920
.L18923:
	movq	40(%rbx), %r12
	jmp	.L18912
.L18924:
	movq	48(%rbx), %r12
	jmp	.L18912
.L18921:
	movq	40(%rbx), %r12
	xorl	%ebp, %ebp
	jmp	.L19069
.L18900:
	cmpb	$3, %cl
	jne	.L19066
	movq	32(%rbx), %rsi
	xorl	%ebp, %ebp
	testq	%rsi, %rsi
	jne	.L19109
.L18903:
	movq	(%rbx), %rsi
	movq	%r14, %rdi
	testq	%rsi, %rsi
	jne	.L19079
	jmp	.L18942
.L19109:
	xorl	%eax, %eax
	movq	%r14, %rdi
	call	safe_from_p
	testl	%eax, %eax
	je	.L18892
	jmp	.L18903
	.p2align 6,,7
.L19084:
	movl	28(%rsp), %edi
	call	swap_condition
	movl	%eax, 28(%rsp)
	jmp	.L18887
.L18857:
	movq	%r13, %rdi
	call	integer_onep
	testl	%eax, %eax
	je	.L19075
	movq	integer_zero_node(%rip), %r13
.L18865:
	xorl	%r11d, %r11d
	cmpl	$0, 52(%rsp)
	setne	%r11b
	leal	93(,%r11,4), %eax
.L19068:
	movl	%eax, 28(%rsp)
	movzbl	16(%rbx), %ecx
	jmp	.L18854
.L19075:
	xorl	%ecx, %ecx
	cmpl	$0, 52(%rsp)
	setne	%cl
	leal	94(,%rcx,4), %eax
	jmp	.L19068
.L18864:
	movq	%r13, %rdi
	call	integer_all_onesp
	testl	%eax, %eax
	je	.L18865
	movq	integer_zero_node(%rip), %r13
	jmp	.L19075
.L18871:
	movq	%r13, %rdi
	call	integer_all_onesp
	testl	%eax, %eax
	je	.L19076
	movq	integer_zero_node(%rip), %r13
.L18879:
	xorl	%ebp, %ebp
	cmpl	$0, 52(%rsp)
	setne	%bpl
	leal	91(,%rbp,4), %eax
	jmp	.L19068
.L19076:
	xorl	%esi, %esi
	cmpl	$0, 52(%rsp)
	setne	%sil
	leal	92(,%rsi,4), %eax
	jmp	.L19068
.L18878:
	movq	%r13, %rdi
	call	integer_onep
	testl	%eax, %eax
	je	.L18879
	movq	integer_zero_node(%rip), %r13
	jmp	.L19076
.L18856:
	movl	$89, 28(%rsp)
	jmp	.L18854
	.p2align 6,,7
.L18853:
	movq	%rdi, %r13
	movzbl	16(%rdi), %edi
	subb	$101, %dil
	cmpb	$2, %dil
	ja	.L18850
	movq	32(%r13), %rdi
	movq	8(%r13), %r10
	movq	8(%rdi), %rax
	movzbl	44(%rax), %r9d
	cmpb	%r9b, 44(%r10)
	je	.L18853
	jmp	.L18850
	.p2align 6,,7
.L18848:
	movzbl	16(%rdi), %ecx
	movq	%rdi, %rbx
	leal	-101(%rcx), %edx
	cmpb	$2, %dl
	ja	.L18845
	movq	8(%rdi), %r10
	movq	32(%rdi), %rdi
	movq	8(%rdi), %rax
	movzbl	44(%rax), %r9d
	cmpb	%r9b, 44(%r10)
	je	.L18848
	jmp	.L18845
	.p2align 6,,7
.L19083:
	movl	$1, 32(%rsp)
	movq	32(%rdi), %r12
	jmp	.L18842
.L19074:
	xorl	%eax, %eax
	call	abort
.LFE20:
.Lfe20:
	.size	do_store_flag,.Lfe20-do_store_flag
	.align 2
	.p2align 4,,15
.globl init_expr_once
	.type	init_expr_once,@function
init_expr_once:
.LFB21:
	pushq	%r15
.LCFI111:
	movl	$55, %edi
	xorl	%esi, %esi
	pushq	%r14
.LCFI112:
	xorl	%eax, %eax
	xorl	%r14d, %r14d
	pushq	%r13
.LCFI113:
	xorl	%r13d, %r13d
	pushq	%r12
.LCFI114:
	pushq	%rbp
.LCFI115:
	pushq	%rbx
.LCFI116:
	subq	$40, %rsp
.LCFI117:
	movq	stack_pointer_rtx(%rip), %rdx
	call	gen_rtx
	movq	frame_pointer_rtx(%rip), %rdx
	xorl	%esi, %esi
	movl	$55, %edi
	movq	%rax, 16(%rsp)
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, 8(%rsp)
	call	start_sequence
	movl	$40, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, %rdi
	call	emit_insn
	movq	%rax, 24(%rsp)
	movq	32(%rax), %rbx
	.p2align 4,,7
.L19127:
	movq	16(%rsp), %rdx
	movq	8(%rsp), %rax
	testl	%r14d, %r14d
	movb	$0, direct_store(%r13)
	movb	$0, direct_load(%r13)
	movb	%r14b, 2(%rdx)
	movb	%r14b, 2(%rax)
	je	.L19115
	cmpl	$16, %r14d
	je	.L19115
	xorl	%r12d, %r12d
	cmpb	$0, direct_load(%r13)
	jne	.L19132
	.p2align 4,,7
.L19126:
	movslq	%r12d,%rcx
	movl	hard_regno_mode_ok(,%rcx,4), %eax
	movl	%r14d, %ecx
	sarl	%cl, %eax
	andl	$1, %eax
	jne	.L19133
.L19118:
	incl	%r12d
	cmpl	$63, %r12d
	jg	.L19115
	cmpb	$0, direct_load(%r13)
	je	.L19126
	cmpb	$0, direct_store(%r13)
	je	.L19126
	.p2align 4,,7
.L19115:
	incl	%r14d
	movl	$210, movstr_optab(,%r13,4)
	incq	%r13
	cmpl	$20, %r14d
	jle	.L19127
	call	end_sequence
	movl	$77, movstr_optab+16(%rip)
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
	.p2align 6,,7
.L19133:
	movl	$51, %edi
	movl	%r14d, %esi
	movl	%r12d, %edx
	xorl	%eax, %eax
	leaq	36(%rsp), %r15
	call	gen_rtx
	movq	%r15, %rdx
	movq	%rbx, %rdi
	movq	16(%rsp), %rsi
	movq	%rax, %rbp
	movq	%rax, 8(%rbx)
	xorl	%eax, %eax
	movq	%rsi, 16(%rbx)
	movq	24(%rsp), %rsi
	call	recog
	testl	%eax, %eax
	js	.L19122
	movb	$1, direct_load(%r13)
.L19122:
	movq	8(%rsp), %rax
	movq	%rbx, %rdi
	movq	%r15, %rdx
	movq	%rbp, 8(%rbx)
	movq	%rax, 16(%rbx)
	xorl	%eax, %eax
	movq	24(%rsp), %rsi
	call	recog
	testl	%eax, %eax
	js	.L19123
	movb	$1, direct_load(%r13)
.L19123:
	movq	%rbp, 16(%rbx)
	xorl	%eax, %eax
	movq	%r15, %rdx
	movq	16(%rsp), %rdi
	movq	%rdi, 8(%rbx)
	movq	24(%rsp), %rsi
	movq	%rbx, %rdi
	call	recog
	testl	%eax, %eax
	js	.L19124
	movb	$1, direct_store(%r13)
.L19124:
	movq	%rbp, 16(%rbx)
	xorl	%eax, %eax
	movq	%rbx, %rdi
	movq	8(%rsp), %rbp
	movq	%r15, %rdx
	movq	%rbp, 8(%rbx)
	movq	24(%rsp), %rsi
	call	recog
	testl	%eax, %eax
	js	.L19118
	movb	$1, direct_store(%r13)
	jmp	.L19118
.L19132:
	cmpb	$0, direct_store(%r13)
	je	.L19126
	jmp	.L19115
.LFE21:
.Lfe21:
	.size	init_expr_once,.Lfe21-init_expr_once
	.align 2
	.p2align 4,,15
.globl init_expr
	.type	init_expr,@function
init_expr:
.LFB22:
	subq	$8, %rsp
.LCFI118:
	cmpq	$0, pending_chain(%rip)
	jne	.L19137
	movl	$0, pending_stack_adjust(%rip)
	movl	$0, inhibit_defer_pop(%rip)
	movq	$0, cleanups_this_call(%rip)
	movq	$0, saveregs_value(%rip)
	movq	$0, forced_labels(%rip)
	addq	$8, %rsp
	ret
.L19137:
	xorl	%eax, %eax
	call	abort
.LFE22:
.Lfe22:
	.size	init_expr,.Lfe22-init_expr
	.align 2
	.p2align 4,,15
.globl save_expr_status
	.type	save_expr_status,@function
save_expr_status:
.LFB23:
	pushq	%rbp
.LCFI119:
	movq	%rdi, %rbp
	pushq	%rbx
.LCFI120:
	subq	$8, %rsp
.LCFI121:
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L19142
.L19145:
	movl	pending_stack_adjust(%rip), %eax
	movq	cleanups_this_call(%rip), %rbx
	movq	saveregs_value(%rip), %rcx
	movq	forced_labels(%rip), %rdx
	movl	%eax, 376(%rbp)
	movq	%rbx, 384(%rbp)
	movl	inhibit_defer_pop(%rip), %eax
	movq	%rcx, 392(%rbp)
	movq	%rdx, 400(%rbp)
	movq	$0, cleanups_this_call(%rip)
	movq	$0, saveregs_value(%rip)
	movq	$0, forced_labels(%rip)
	movl	%eax, 380(%rbp)
	movl	$0, inhibit_defer_pop(%rip)
	movl	$0, pending_stack_adjust(%rip)
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	ret
	.p2align 6,,7
.L19142:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdx
	movq	%rax, 16(%rbx)
	testq	%rdx, %rdx
	movq	%rdx, pending_chain(%rip)
	movq	%rdx, %rbx
	jne	.L19142
	jmp	.L19145
.LFE23:
.Lfe23:
	.size	save_expr_status,.Lfe23-save_expr_status
	.align 2
	.p2align 4,,15
.globl restore_expr_status
	.type	restore_expr_status,@function
restore_expr_status:
.LFB24:
	movl	376(%rdi), %eax
	movq	392(%rdi), %rdx
	movq	384(%rdi), %rcx
	movl	%eax, pending_stack_adjust(%rip)
	movq	%rdx, saveregs_value(%rip)
	movl	380(%rdi), %eax
	movq	400(%rdi), %rdx
	movq	%rcx, cleanups_this_call(%rip)
	movl	%eax, inhibit_defer_pop(%rip)
	movq	%rdx, forced_labels(%rip)
	ret
.LFE24:
.Lfe24:
	.size	restore_expr_status,.Lfe24-restore_expr_status
	.align 2
	.p2align 4,,15
.globl protect_from_queue
	.type	protect_from_queue,@function
protect_from_queue:
.LFB25:
	subq	$24, %rsp
.LCFI122:
	movq	%rbp, 8(%rsp)
.LCFI123:
	movq	%rbx, (%rsp)
.LCFI124:
	movq	%r12, 16(%rsp)
.LCFI125:
	movzwl	(%rdi), %eax
	movq	%rdi, %rbp
	cmpl	$59, %eax
	je	.L19149
	cmpl	$55, %eax
	je	.L19159
.L19152:
	cmpl	$63, %eax
	je	.L19156
	cmpl	$66, %eax
	je	.L19156
.L19148:
	movq	%rbp, %rax
	movq	(%rsp), %rbx
	movq	16(%rsp), %r12
	movq	8(%rsp), %rbp
	addq	$24, %rsp
	ret
	.p2align 6,,7
.L19156:
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbp), %rdi
	movq	%rax, 8(%rbp)
	call	protect_from_queue
	movq	%rax, 16(%rbp)
	jmp	.L19148
	.p2align 6,,7
.L19159:
	movzbl	2(%rdi), %edx
	cmpb	$16, %dl
	je	.L19150
	movq	8(%rdi), %r12
	cmpw	$59, (%r12)
	je	.L19160
.L19150:
	cmpl	$55, %eax
	jne	.L19152
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbp)
	jmp	.L19148
.L19160:
	testl	%esi, %esi
	jne	.L19150
	movq	8(%r12), %rcx
	movq	%rcx, 8(%rdi)
	cmpq	$0, 16(%r12)
	je	.L19148
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%rbp, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %rbp
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L19148
	.p2align 6,,7
.L19149:
	cmpq	$0, 16(%rdi)
	jne	.L19157
	movq	8(%rdi), %rbp
	jmp	.L19148
	.p2align 6,,7
.L19157:
	movq	24(%rdi), %rdi
	testq	%rdi, %rdi
	je	.L19158
	movq	%rdi, %rbp
	jmp	.L19148
.L19158:
	movq	8(%rbp), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbp)
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbp), %rbp
	jmp	.L19148
.LFE25:
.Lfe25:
	.size	protect_from_queue,.Lfe25-protect_from_queue
	.align 2
	.p2align 4,,15
.globl emit_queue
	.type	emit_queue,@function
emit_queue:
.LFB26:
	pushq	%rbx
.LCFI126:
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L19177
.L19179:
	popq	%rbx
	ret
	.p2align 6,,7
.L19177:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdx
	movq	%rax, 16(%rbx)
	testq	%rdx, %rdx
	movq	%rdx, pending_chain(%rip)
	movq	%rdx, %rbx
	jne	.L19177
	jmp	.L19179
.LFE26:
.Lfe26:
	.size	emit_queue,.Lfe26-emit_queue
	.align 2
	.p2align 4,,15
.globl emit_block_move
	.type	emit_block_move,@function
emit_block_move:
.LFB27:
	pushq	%r15
.LCFI127:
	movq	%rdx, %r15
	pushq	%r14
.LCFI128:
	pushq	%r13
.LCFI129:
	pushq	%r12
.LCFI130:
	pushq	%rbp
.LCFI131:
	pushq	%rbx
.LCFI132:
	subq	$152, %rsp
.LCFI133:
	cmpb	$16, 2(%rdi)
	movq	%rdi, 56(%rsp)
	movq	%rsi, 48(%rsp)
	movl	%ecx, 44(%rsp)
	jne	.L19401
	movq	48(%rsp), %rdx
	cmpb	$16, 2(%rdx)
	jne	.L19401
	movq	56(%rsp), %rdx
	movzwl	(%rdx), %eax
	cmpl	$59, %eax
	je	.L19266
	cmpl	$55, %eax
	je	.L19402
.L19270:
	cmpl	$63, %eax
	je	.L19273
	cmpl	$66, %eax
	je	.L19273
.L19269:
	movq	48(%rsp), %rsi
	movzwl	(%rsi), %eax
	cmpl	$59, %eax
	je	.L19276
	cmpl	$55, %eax
	je	.L19403
.L19280:
	cmpl	$63, %eax
	je	.L19283
	cmpl	$66, %eax
	je	.L19283
.L19279:
	movzwl	(%r15), %eax
	cmpl	$59, %eax
	je	.L19286
	cmpl	$55, %eax
	je	.L19404
.L19290:
	cmpl	$63, %eax
	je	.L19293
	cmpl	$66, %eax
	je	.L19293
.L19289:
	movq	56(%rsp), %rdx
	cmpw	$55, (%rdx)
	jne	.L19401
	movq	48(%rsp), %rcx
	cmpw	$55, (%rcx)
	jne	.L19401
	testq	%r15, %r15
	je	.L19401
	cmpw	$46, (%r15)
	je	.L19405
.L19299:
	movl	44(%rsp), %edx
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	$46, %edi
	call	gen_rtx
	movl	class_narrowest_mode+4(%rip), %ebx
	movq	%rax, 72(%rsp)
	testl	%ebx, %ebx
	je	.L19396
	.p2align 4,,7
.L19384:
	movslq	%ebx,%r14
	leaq	0(,%r14,4), %rax
	movl	movstr_optab(%rax), %edx
	cmpl	$210, %edx
	je	.L19373
	movl	mode_size(%rax), %eax
	leal	0(,%rax,8), %ecx
	cmpl	$31, %ecx
	jg	.L19377
	movl	$1, %eax
	sall	%cl, %eax
	decl	%eax
	cmpl	%eax, 8(%r15)
	ja	.L19373
.L19377:
	movslq	%edx,%r13
	leaq	(%r13,%r13,4), %rbp
	salq	$4, %rbp
	movq	insn_operand_predicate(%rbp), %rdx
	testq	%rdx, %rdx
	jne	.L19406
.L19378:
	movq	insn_operand_predicate+8(%rbp), %rdx
	testq	%rdx, %rdx
	jne	.L19407
.L19379:
	movq	insn_operand_predicate+24(%rbp), %rdx
	testq	%rdx, %rdx
	je	.L19380
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	72(%rsp), %rdi
	call	*%rdx
	testl	%eax, %eax
	je	.L19373
.L19380:
	call	get_last_insn
	movl	$1, %edx
	movq	%r15, %rsi
	movq	%rax, 64(%rsp)
	movl	%ebx, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	insn_operand_predicate+16(%rbp), %rdx
	movq	%rax, %r12
	testq	%rdx, %rdx
	jne	.L19408
.L19381:
	xorl	%eax, %eax
	movq	56(%rsp), %rdi
	movq	48(%rsp), %rsi
	movq	%r12, %rdx
	movq	72(%rsp), %rcx
	call	*insn_gen_function(,%r13,8)
	testq	%rax, %rax
	jne	.L19397
	movq	64(%rsp), %rdi
	xorl	%eax, %eax
	call	delete_insns_since
.L19373:
	movl	mode_wider_mode(,%r14,4), %ebx
	testl	%ebx, %ebx
	jne	.L19384
.L19396:
	movq	%r15, %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movq	56(%rsp), %r9
	movl	$3, %ecx
	movq	48(%rsp), %r15
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movq	8(%r15), %r14
	movl	$4, 24(%rsp)
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	xorl	%eax, %eax
	movq	%r14, (%rsp)
	movq	8(%r9), %r8
	movl	$4, %r9d
	call	emit_library_call
.L19263:
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L19397:
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L19263
.L19408:
	movq	%rax, %rdi
	movl	%ebx, %esi
	xorl	%eax, %eax
	call	*%rdx
	testl	%eax, %eax
	jne	.L19381
	movq	%r12, %rsi
	movl	%ebx, %edi
	xorl	%eax, %eax
	call	copy_to_mode_reg
	movq	%rax, %r12
	jmp	.L19381
.L19407:
	xorl	%eax, %eax
	movq	48(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L19373
	jmp	.L19379
.L19406:
	xorl	%eax, %eax
	movq	56(%rsp), %rdi
	movl	$16, %esi
	call	*%rdx
	testl	%eax, %eax
	je	.L19373
	jmp	.L19378
.L19405:
	movl	8(%r15), %ebp
	xorl	%r11d, %r11d
	movl	$8, %r10d
	cmpl	$8, 44(%rsp)
	movl	$9, %esi
	movl	class_narrowest_mode+4(%rip), %r8d
	cmovl	44(%rsp), %r10d
	movq	mov_optab(%rip), %r9
	movl	$8, %ebx
	movl	%ebp, %edi
	.p2align 4,,7
.L19313:
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	testl	%r8d, %r8d
	je	.L19387
	.p2align 4,,7
.L19309:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%esi, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L19309
.L19387:
	testl	%ecx, %ecx
	je	.L19302
	movslq	%ecx,%rcx
	movq	%rcx, %rsi
	salq	$4, %rsi
	cmpl	$210, 8(%r9,%rsi)
	je	.L19311
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%ebx, %eax
	cmpl	%eax, %r10d
	jl	.L19311
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r11d
	movl	%edx, %edi
.L19311:
	movl	mode_size(,%rcx,4), %esi
	cmpl	$1, %esi
	jg	.L19313
.L19302:
	decl	%r11d
	jg	.L19299
	movq	56(%rsp), %r11
	movq	48(%rsp), %r9
	xorl	%ecx, %ecx
	movl	%ebp, %r10d
	movl	$9, %ebx
	movq	8(%r11), %r12
	movq	8(%r9), %rdi
	movq	%r9, 104(%rsp)
	movl	$0, 132(%rsp)
	movq	%r11, 80(%rsp)
	movq	%r12, 88(%rsp)
	movq	%rdi, 112(%rsp)
	movzwl	(%r12), %edx
	leal	-85(%rdx), %r15d
	cmpw	$1, %r15w
	jbe	.L19316
	cmpw	$88, %dx
	je	.L19316
	cmpw	$87, %dx
	je	.L19316
.L19315:
	movl	%ecx, 96(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r14d
	cmpw	$1, %r14w
	jbe	.L19318
	cmpw	$88, %dx
	je	.L19318
	cmpw	$87, %dx
	je	.L19318
.L19317:
	movl	%ecx, 120(%rsp)
	movl	$0, 124(%rsp)
	movl	$0, 100(%rsp)
	movzwl	(%r12), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L19320
	cmpw	$87, %ax
	je	.L19320
.L19319:
	testl	%edx, %edx
	movl	%edx, 136(%rsp)
	je	.L19321
	movl	%ebp, 132(%rsp)
.L19321:
	movl	120(%rsp), %r14d
	movl	%ebp, 128(%rsp)
	testl	%r14d, %r14d
	je	.L19323
	movl	96(%rsp), %eax
	testl	%eax, %eax
	jne	.L19322
.L19323:
	xorl	%ebp, %ebp
	movl	$8, %r11d
	movl	$9, %esi
	cmpl	$8, 44(%rsp)
	movq	mov_optab(%rip), %r9
	movl	$8, %r13d
	cmovl	44(%rsp), %r11d
.L19337:
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	testl	%r8d, %r8d
	je	.L19390
	.p2align 4,,7
.L19333:
	movslq	%edx,%r15
	salq	$2, %r15
	cmpl	%esi, mode_size(%r15)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r15), %edx
	testl	%edx, %edx
	jne	.L19333
.L19390:
	testl	%ecx, %ecx
	je	.L19326
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r9,%rdx)
	je	.L19335
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r13d, %eax
	cmpl	%eax, %r11d
	jl	.L19335
	movl	%r10d, %eax
	movl	%edx, %r10d
	xorl	%edx, %edx
	divl	%r10d
	addl	%eax, %ebp
	movl	%edx, %r10d
.L19335:
	movl	mode_size(,%rcx,4), %esi
	cmpl	$1, %esi
	jg	.L19337
.L19326:
	cmpl	$2, %ebp
	jle	.L19322
	testl	%r14d, %r14d
	jne	.L19339
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L19340
	cmpw	$46, %dx
	je	.L19340
	cmpw	$47, %dx
	je	.L19340
	cmpw	$49, %dx
	je	.L19340
	cmpw	$113, %dx
	je	.L19340
.L19339:
	movl	96(%rsp), %r8d
	testl	%r8d, %r8d
	jne	.L19322
	movzwl	(%r12), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L19342
	cmpw	$46, %dx
	je	.L19342
	cmpw	$47, %dx
	je	.L19342
	cmpw	$49, %dx
	je	.L19342
	cmpw	$113, %dx
	je	.L19342
.L19322:
	cmpl	$8, 44(%rsp)
	movl	$8, %eax
	cmovl	44(%rsp), %eax
	cmpl	$1, %ebx
	movl	%eax, 44(%rsp)
	jle	.L19345
.L19367:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L19393
	.p2align 4,,7
.L19352:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%ebx, mode_size(%r13)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L19352
.L19393:
	testl	%r12d, %r12d
	je	.L19345
	movslq	%r12d,%r14
	movq	%r14, %rbx
	salq	$4, %rbx
	addq	mov_optab(%rip), %rbx
	movl	8(%rbx), %edx
	cmpl	$210, %edx
	je	.L19354
	movl	mode_size(,%r14,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 44(%rsp)
	jl	.L19354
	cmpl	%ebp, 128(%rsp)
	movslq	%edx,%rsi
	leaq	80(%rsp), %rbx
	movq	insn_gen_function(,%rsi,8), %r15
	jl	.L19354
	movl	136(%rsp), %edx
.L19365:
	testl	%edx, %edx
	je	.L19359
	subl	%ebp, 52(%rbx)
.L19359:
	movl	16(%rbx), %edi
	testl	%edi, %edi
	je	.L19360
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L19399:
	movl	40(%rbx), %r11d
	movq	%rax, %r13
	testl	%r11d, %r11d
	je	.L19362
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L19400:
	movq	%rax, %rsi
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	*%r15
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L19364
	addl	%ebp, 52(%rbx)
.L19364:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L19365
.L19354:
	movl	mode_size(,%r14,4), %ebx
	cmpl	$1, %ebx
	jg	.L19367
.L19345:
	movl	128(%rsp), %r12d
	testl	%r12d, %r12d
	je	.L19263
	jmp	.L19401
	.p2align 6,,7
.L19362:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L19400
.L19360:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L19399
.L19342:
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 88(%rsp)
	jmp	.L19322
.L19340:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 112(%rsp)
	jmp	.L19339
.L19320:
	movl	$1, %edx
	jmp	.L19319
.L19318:
	movl	$1, %ecx
	jmp	.L19317
.L19316:
	movl	$1, %ecx
	jmp	.L19315
.L19293:
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r15), %rdi
	movq	%rax, 8(%r15)
	call	protect_from_queue
	movq	%rax, 16(%r15)
	jmp	.L19289
.L19404:
	movzbl	2(%r15), %edx
	cmpb	$16, %dl
	je	.L19287
	movq	8(%r15), %rbp
	cmpw	$59, (%rbp)
	je	.L19409
.L19287:
	cmpl	$55, %eax
	jne	.L19290
	movq	8(%r15), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r15)
	jmp	.L19289
.L19409:
	movq	8(%rbp), %r14
	movq	%r14, 8(%r15)
	cmpq	$0, 16(%rbp)
	je	.L19289
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r15, %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	gen_move_insn
	movq	%r12, %r15
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L19289
	.p2align 6,,7
.L19286:
	cmpq	$0, 16(%r15)
	jne	.L19294
	movq	8(%r15), %r15
	jmp	.L19289
.L19294:
	movq	24(%r15), %rdx
	testq	%rdx, %rdx
	je	.L19295
	movq	%rdx, %r15
	jmp	.L19289
.L19295:
	movq	8(%r15), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r15), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r15)
	call	gen_move_insn
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r15), %r15
	jmp	.L19289
.L19283:
	movq	48(%rsp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	48(%rsp), %rbp
	movq	16(%rbp), %rdi
	movq	%rax, 8(%rbp)
	call	protect_from_queue
	movq	48(%rsp), %rcx
	movq	%rax, 16(%rcx)
	jmp	.L19279
.L19403:
	movzbl	2(%rsi), %edx
	cmpb	$16, %dl
	je	.L19277
	movq	8(%rsi), %rbp
	cmpw	$59, (%rbp)
	je	.L19410
.L19277:
	cmpl	$55, %eax
	jne	.L19280
	movq	48(%rsp), %rdx
	xorl	%esi, %esi
	movq	8(%rdx), %rdi
	call	protect_from_queue
	movq	48(%rsp), %rbx
	movq	%rax, 8(%rbx)
	jmp	.L19279
.L19410:
	movq	8(%rbp), %r14
	movq	%r14, 8(%rsi)
	cmpq	$0, 16(%rbp)
	je	.L19279
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	48(%rsp), %rsi
	movq	%rax, %rdi
	movq	%rax, %r12
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	%r12, 48(%rsp)
	jmp	.L19279
	.p2align 6,,7
.L19276:
	movq	48(%rsp), %rcx
	cmpq	$0, 16(%rcx)
	jne	.L19284
	movq	8(%rcx), %rsi
.L19398:
	movq	%rsi, 48(%rsp)
	jmp	.L19279
.L19284:
	movq	48(%rsp), %rdi
	movq	24(%rdi), %rsi
	testq	%rsi, %rsi
	jne	.L19398
	movq	48(%rsp), %r13
	movq	8(%r13), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	48(%rsp), %r10
	movq	%rax, %rdi
	movq	8(%r10), %rsi
	movq	%rax, 24(%r10)
	call	gen_move_insn
	movq	48(%rsp), %r9
	movq	%rax, %rdi
	movq	16(%r9), %rsi
	call	emit_insn_before
	movq	48(%rsp), %r8
	movq	24(%r8), %rsi
	movq	%rsi, 48(%rsp)
	jmp	.L19279
.L19273:
	movq	56(%rsp), %rax
	xorl	%esi, %esi
	movq	8(%rax), %rdi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	56(%rsp), %rcx
	movq	16(%rcx), %rdi
	movq	%rax, 8(%rcx)
	call	protect_from_queue
	movq	56(%rsp), %rbx
	movq	%rax, 16(%rbx)
	jmp	.L19269
.L19402:
	jne	.L19270
	movq	8(%rdx), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	56(%rsp), %rdx
	movq	%rax, 8(%rdx)
	jmp	.L19269
.L19266:
	movq	56(%rsp), %rsi
	cmpq	$0, 16(%rsi)
	jne	.L19274
	movq	8(%rsi), %rdi
	movq	%rdi, 56(%rsp)
	jmp	.L19269
.L19274:
	movq	56(%rsp), %rsi
	movq	24(%rsi), %rdi
	testq	%rdi, %rdi
	je	.L19275
	movq	%rdi, 56(%rsp)
	jmp	.L19269
.L19275:
	movq	56(%rsp), %r13
	movq	8(%r13), %r12
	movzbl	2(%r12), %edi
	call	gen_reg_rtx
	movq	56(%rsp), %r11
	movq	%rax, %rdi
	movq	%rax, 24(%r11)
	movq	56(%rsp), %r10
	movq	8(%r10), %rsi
	call	gen_move_insn
	movq	56(%rsp), %r9
	movq	%rax, %rdi
	movq	16(%r9), %rsi
	call	emit_insn_before
	movq	56(%rsp), %r8
	movq	24(%r8), %rbp
	movq	%rbp, 56(%rsp)
	jmp	.L19269
.L19401:
	xorl	%eax, %eax
	call	abort
.LFE27:
.Lfe27:
	.size	emit_block_move,.Lfe27-emit_block_move
	.align 2
	.p2align 4,,15
.globl move_block_to_reg
	.type	move_block_to_reg,@function
move_block_to_reg:
.LFB28:
	pushq	%r15
.LCFI134:
	movl	%edi, %r15d
	pushq	%r14
.LCFI135:
	movl	%ecx, %r14d
	pushq	%r13
.LCFI136:
	movl	%edx, %r13d
	pushq	%r12
.LCFI137:
	movq	%rsi, %r12
	pushq	%rbp
.LCFI138:
	pushq	%rbx
.LCFI139:
	subq	$8, %rsp
.LCFI140:
	movzwl	(%rsi), %edx
	leal	-56(%rdx), %ecx
	cmpw	$1, %cx
	jbe	.L19413
	cmpw	$46, %dx
	je	.L19413
	cmpw	$47, %dx
	je	.L19421
	cmpw	$49, %dx
	je	.L19413
	cmpw	$113, %dx
	je	.L19413
	.p2align 4,,7
.L19412:
	xorl	%ebp, %ebp
	cmpl	%r13d, %ebp
	jl	.L19418
.L19420:
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
	.p2align 6,,7
.L19418:
	movl	word_mode(%rip), %esi
	leal	0(%rbp,%r15), %edx
	movl	$51, %edi
	xorl	%eax, %eax
	call	gen_rtx
	movl	%r14d, %edx
	movl	%ebp, %esi
	movq	%r12, %rdi
	movq	%rax, %rbx
	incl	%ebp
	call	operand_subword_force
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	cmpl	%r13d, %ebp
	jl	.L19418
	jmp	.L19420
	.p2align 6,,7
.L19413:
	cmpw	$47, %dx
	jne	.L19412
.L19421:
	cmpb	$0, 2(%r12)
	je	.L19412
	movq	%r12, %rsi
	movl	%r14d, %edi
	call	force_const_mem
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	validize_mem
	movq	%rax, %r12
	jmp	.L19412
.LFE28:
.Lfe28:
	.size	move_block_to_reg,.Lfe28-move_block_to_reg
	.align 2
	.p2align 4,,15
.globl move_block_from_reg
	.type	move_block_from_reg,@function
move_block_from_reg:
.LFB29:
	pushq	%r14
.LCFI141:
	movl	%edi, %r14d
	pushq	%r13
.LCFI142:
	movq	%rsi, %r13
	pushq	%r12
.LCFI143:
	movl	%edx, %r12d
	pushq	%rbp
.LCFI144:
	xorl	%ebp, %ebp
	cmpl	%edx, %ebp
	pushq	%rbx
.LCFI145:
	jl	.L19428
.L19430:
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	ret
	.p2align 6,,7
.L19428:
	movq	%r13, %rdi
	movl	%ebp, %esi
	movl	$1, %edx
	movl	$16, %ecx
	call	operand_subword
	testq	%rax, %rax
	movq	%rax, %rbx
	je	.L19431
	movl	word_mode(%rip), %esi
	leal	0(%rbp,%r14), %edx
	movl	$51, %edi
	xorl	%eax, %eax
	incl	%ebp
	call	gen_rtx
	movq	%rbx, %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	cmpl	%r12d, %ebp
	jl	.L19428
	jmp	.L19430
.L19431:
	xorl	%eax, %eax
	call	abort
.LFE29:
.Lfe29:
	.size	move_block_from_reg,.Lfe29-move_block_from_reg
	.align 2
	.p2align 4,,15
.globl use_regs
	.type	use_regs,@function
use_regs:
.LFB30:
	pushq	%r12
.LCFI146:
	movl	%edi, %r12d
	pushq	%rbp
.LCFI147:
	movl	%esi, %ebp
	pushq	%rbx
.LCFI148:
	xorl	%ebx, %ebx
	cmpl	%esi, %ebx
	jl	.L19437
.L19439:
	popq	%rbx
	popq	%rbp
	popq	%r12
	ret
	.p2align 6,,7
.L19437:
	movl	word_mode(%rip), %esi
	leal	(%rbx,%r12), %edx
	movl	$51, %edi
	xorl	%eax, %eax
	incl	%ebx
	call	gen_rtx
	xorl	%esi, %esi
	movl	$41, %edi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, %rdi
	call	emit_insn
	cmpl	%ebp, %ebx
	jl	.L19437
	jmp	.L19439
.LFE30:
.Lfe30:
	.size	use_regs,.Lfe30-use_regs
	.align 2
	.p2align 4,,15
.globl clear_storage
	.type	clear_storage,@function
clear_storage:
.LFB31:
	subq	$40, %rsp
.LCFI149:
	movl	%esi, %eax
	movq	%rbx, 32(%rsp)
.LCFI150:
	cmpb	$16, 2(%rdi)
	movq	%rdi, %rbx
	je	.L19446
	movq	const0_rtx(%rip), %rsi
	movq	32(%rsp), %rbx
	addq	$40, %rsp
	jmp	emit_move_insn
	.p2align 6,,7
.L19446:
	movl	%eax, %edx
	movl	$46, %edi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	gen_rtx
	movl	$4, %r9d
	xorl	%edx, %edx
	movq	const0_rtx(%rip), %rcx
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	movq	memset_libfunc(%rip), %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	movq	%rcx, (%rsp)
	movq	8(%rbx), %r8
	movl	$3, %ecx
	call	emit_library_call
	movq	32(%rsp), %rbx
	addq	$40, %rsp
	ret
.LFE31:
.Lfe31:
	.size	clear_storage,.Lfe31-clear_storage
	.align 2
	.p2align 4,,15
.globl push_block
	.type	push_block,@function
push_block:
.LFB32:
	subq	$40, %rsp
.LCFI151:
	movq	%rdi, %rcx
	movq	%rbx, 16(%rsp)
.LCFI152:
	movq	%r12, 32(%rsp)
.LCFI153:
	movq	%rbp, 24(%rsp)
.LCFI154:
	movl	%edx, %r12d
	movl	%esi, %ebx
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %esi
	cmpw	$1, %si
	jbe	.L19449
	cmpw	$46, %dx
	je	.L19449
	cmpw	$47, %dx
	je	.L19449
	cmpw	$49, %dx
	je	.L19449
	cmpw	$113, %dx
	je	.L19449
	cmpw	$51, %dx
	je	.L19456
.L19451:
	xorl	%eax, %eax
	movl	$4, %edi
	movq	%rcx, %rsi
	call	copy_to_mode_reg
	testl	%ebx, %ebx
	movq	%rax, %rbp
	jne	.L19457
.L19453:
	movq	%rbp, %rdi
	.p2align 4,,7
.L19455:
	xorl	%eax, %eax
	call	anti_adjust_stack
	testl	%ebx, %ebx
	movq	virtual_outgoing_args_rtx(%rip), %rsi
	je	.L19454
	testl	%r12d, %r12d
	jne	.L19458
.L19454:
	movl	class_narrowest_mode+4(%rip), %edi
	movq	16(%rsp), %rbx
	movq	24(%rsp), %rbp
	movq	32(%rsp), %r12
	addq	$40, %rsp
	jmp	memory_address
	.p2align 6,,7
.L19458:
	movq	%rsi, %rdi
	movl	%ebx, %esi
	call	plus_constant_wide
	movq	%rax, %rsi
	jmp	.L19454
.L19457:
	movl	$46, %edi
	xorl	%esi, %esi
	movl	%ebx, %edx
	xorl	%eax, %eax
	call	gen_rtx
	xorl	%r9d, %r9d
	movq	%rbp, %r8
	movq	add_optab(%rip), %rsi
	movq	%rax, %rcx
	movq	%rbp, %rdx
	movl	$4, %edi
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	movq	%rax, %rbp
	jmp	.L19453
.L19456:
	testl	%ebx, %ebx
	jne	.L19451
	jmp	.L19455
	.p2align 6,,7
.L19449:
	movq	%rcx, %rdi
	movl	%ebx, %esi
	call	plus_constant_wide
	movq	%rax, %rdi
	jmp	.L19455
.LFE32:
.Lfe32:
	.size	push_block,.Lfe32-push_block
	.align 2
	.p2align 4,,15
.globl gen_push_operand
	.type	gen_push_operand,@function
gen_push_operand:
.LFB33:
	movq	stack_pointer_rtx(%rip), %rdx
	movl	$85, %edi
	movl	$4, %esi
	xorl	%eax, %eax
	jmp	gen_rtx
.LFE33:
.Lfe33:
	.size	gen_push_operand,.Lfe33-gen_push_operand
	.align 2
	.p2align 4,,15
.globl emit_push_insn
	.type	emit_push_insn,@function
emit_push_insn:
.LFB34:
	pushq	%r15
.LCFI155:
	pushq	%r14
.LCFI156:
	movq	%rcx, %r14
	pushq	%r13
.LCFI157:
	pushq	%r12
.LCFI158:
	pushq	%rbp
.LCFI159:
	movq	%rdi, %rbp
	pushq	%rbx
.LCFI160:
	subq	$136, %rsp
.LCFI161:
	cmpl	$16, %esi
	movl	%esi, 60(%rsp)
	movl	%r8d, 40(%rsp)
	movl	%r9d, 56(%rsp)
	movq	216(%rsp), %r13
	je	.L19620
	movslq	60(%rsp),%rdx
	movl	mode_size(,%rdx,4), %eax
	sall	$3, %eax
	cmpl	$31, %eax
.L19612:
	jg	.L19461
	movl	$2, 44(%rsp)
.L19465:
	movzwl	(%rbp), %eax
	cmpl	$59, %eax
	je	.L19469
	cmpl	$55, %eax
	je	.L19621
.L19473:
	cmpl	$63, %eax
	je	.L19476
	cmpl	$66, %eax
	je	.L19476
.L19472:
	cmpl	$16, 60(%rsp)
	movq	%rbp, %r15
	je	.L19622
	movl	56(%rsp), %eax
	testl	%eax, %eax
	jle	.L19572
	movslq	60(%rsp),%r14
	movl	8(%r13), %r12d
	movl	mode_size(,%r14,4), %eax
	cmpl	$-1, %eax
	leal	3(%rax), %ebp
	movl	%eax, %r14d
	movl	200(%rsp), %eax
	cmovle	%ebp, %r14d
	xorl	%ebx, %ebx
	sarl	$2, %r14d
	testl	%eax, %eax
	je	.L19574
	cmpq	$0, 208(%rsp)
	je	.L19623
.L19575:
	movzwl	(%r15), %edx
	movl	56(%rsp), %ebp
	subl	%ebx, %ebp
	leal	-56(%rdx), %r10d
	movl	%edx, %ecx
	cmpw	$1, %r10w
	jbe	.L19577
	cmpw	$46, %dx
	je	.L19577
	cmpw	$47, %dx
	je	.L19577
	cmpw	$49, %dx
	je	.L19577
	cmpw	$113, %dx
	je	.L19577
	.p2align 4,,7
.L19576:
	cmpw	$51, %dx
	je	.L19624
.L19578:
	cmpl	%r14d, %ebp
	jge	.L19569
	leal	(%rbx,%rbp), %r13d
	leal	(%r12,%rbp,4), %r12d
	.p2align 4,,7
.L19584:
	cmpl	%r13d, %ebp
	jge	.L19625
.L19581:
	incl	%ebp
	addl	$4, %r12d
	cmpl	%r14d, %ebp
	jl	.L19584
.L19569:
	movl	56(%rsp), %eax
	testl	%eax, %eax
	jle	.L19589
	movzwl	(%r15), %edx
	movq	192(%rsp), %r11
	movl	8(%r11), %r12d
	leal	-56(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L19591
	cmpw	$46, %dx
	je	.L19591
	cmpw	$47, %dx
	je	.L19611
	cmpw	$49, %dx
	je	.L19591
	cmpw	$113, %dx
	je	.L19591
	.p2align 4,,7
.L19590:
	xorl	%ebp, %ebp
	cmpl	56(%rsp), %ebp
	jl	.L19596
.L19589:
	movl	200(%rsp), %r15d
	testl	%r15d, %r15d
	je	.L19460
	cmpq	$0, 208(%rsp)
	je	.L19626
.L19460:
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L19626:
	cmpl	$2, 44(%rsp)
	jne	.L19460
	movl	200(%rsp), %edx
	movl	$46, %edi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	anti_adjust_stack
	jmp	.L19460
	.p2align 6,,7
.L19596:
	movl	word_mode(%rip), %esi
	leal	0(%rbp,%r12), %edx
	movl	$51, %edi
	xorl	%eax, %eax
	call	gen_rtx
	movl	60(%rsp), %edx
	movl	%ebp, %esi
	movq	%r15, %rdi
	movq	%rax, %r13
	incl	%ebp
	call	operand_subword_force
	movq	%r13, %rdi
	movq	%rax, %rsi
	call	emit_move_insn
	cmpl	56(%rsp), %ebp
	jl	.L19596
	jmp	.L19589
	.p2align 6,,7
.L19591:
	cmpw	$47, %dx
	jne	.L19590
.L19611:
	cmpb	$0, 2(%r15)
	je	.L19590
	movl	60(%rsp), %edi
	movq	%r15, %rsi
	call	force_const_mem
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	validize_mem
	movq	%rax, %r15
	jmp	.L19590
	.p2align 6,,7
.L19625:
	movl	60(%rsp), %edx
	movq	%r15, %rdi
	movl	%ebp, %esi
	call	operand_subword_force
	movl	%r12d, %edx
	xorl	%esi, %esi
	movq	%rax, %rbx
	movl	$46, %edi
	xorl	%eax, %eax
	call	gen_rtx
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movq	208(%rsp), %r8
	movl	word_mode(%rip), %esi
	movq	%rax, 24(%rsp)
	movq	%rbx, %rdi
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	$0, (%rsp)
	movl	$0, 8(%rsp)
	movq	%r8, 16(%rsp)
	movl	40(%rsp), %r8d
	call	emit_push_insn
	jmp	.L19581
.L19624:
	cmpl	$63, 8(%r15)
	jg	.L19578
	movzbq	2(%r15), %rcx
	cmpl	$1, mode_class(,%rcx,4)
	je	.L19578
	movq	%r15, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	movq	%rax, %r15
	jmp	.L19578
	.p2align 6,,7
.L19577:
	cmpw	$47, %cx
	jne	.L19576
	cmpb	$0, 2(%r15)
	je	.L19576
	movl	60(%rsp), %edi
	movq	%r15, %rsi
	call	force_const_mem
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	validize_mem
	movq	%rax, %r15
	movzwl	(%rax), %edx
	jmp	.L19576
.L19623:
	movl	44(%rsp), %eax
	testl	%eax, %eax
	je	.L19574
	cmpl	$2, 44(%rsp)
	je	.L19574
	movl	200(%rsp), %edx
	movl	$46, %edi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	anti_adjust_stack
.L19574:
	cmpq	$0, 208(%rsp)
	movl	$0, %eax
	cmove	%eax, %ebx
	jmp	.L19575
.L19572:
	movl	200(%rsp), %eax
	testl	%eax, %eax
	je	.L19586
	cmpq	$0, 208(%rsp)
	je	.L19627
.L19586:
	cmpw	$46, (%r13)
	je	.L19628
	movq	208(%rsp), %rdx
	movl	$63, %edi
	movl	$4, %esi
	movq	%r13, %rcx
	xorl	%eax, %eax
	call	gen_rtx
.L19618:
	movl	60(%rsp), %edi
	movq	%rax, %rsi
	call	memory_address
	movl	60(%rsp), %esi
	movl	$55, %edi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	gen_rtx
	movq	%r15, %rsi
	movq	%rax, %rdi
	call	emit_move_insn
	jmp	.L19569
.L19628:
	movq	208(%rsp), %rdi
	movl	8(%r13), %esi
	call	plus_constant_wide
	jmp	.L19618
.L19627:
	movl	44(%rsp), %edx
	testl	%edx, %edx
	je	.L19586
	cmpl	$2, 44(%rsp)
	je	.L19586
	movl	200(%rsp), %edx
	movl	$46, %edi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	anti_adjust_stack
	jmp	.L19586
	.p2align 6,,7
.L19622:
	movl	56(%rsp), %esi
	sall	$2, %esi
	cmpl	$-1, %esi
	leal	3(%rsi), %r8d
	movl	%esi, %edi
	cmovg	%esi, %r8d
	andl	$-4, %r8d
	subl	%r8d, %edi
	testq	%r14, %r14
	je	.L19619
	movl	56(%rsp), %eax
	movl	%esi, %ebx
	subl	%edi, %ebx
	testl	%eax, %eax
	jne	.L19629
.L19483:
	cmpq	$0, 208(%rsp)
	je	.L19630
	cmpw	$46, (%r13)
	je	.L19631
	movq	208(%rsp), %rdx
	movl	$63, %edi
	movl	$4, %esi
	movq	%r13, %rcx
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rax, %rdi
.L19615:
	movl	%ebx, %esi
	call	plus_constant_wide
	movl	$16, %edi
	movq	%rax, %rsi
	call	memory_address
	movq	%rax, %rbx
.L19495:
	cmpw	$46, (%r14)
	je	.L19632
.L19498:
	movq	%rbx, %rdx
	movl	$55, %edi
	movl	$16, %esi
	xorl	%eax, %eax
	call	gen_rtx
	movl	40(%rsp), %edx
	xorl	%esi, %esi
	movq	%rax, %r12
	movl	$46, %edi
	xorl	%eax, %eax
	call	gen_rtx
	movq	%r14, %rdx
	movq	%rbp, %rsi
	movq	%r12, %rdi
	movq	%rax, %rcx
	call	gen_movstrsi
	movq	%rax, %rdi
	call	emit_insn
	jmp	.L19569
.L19632:
	xorl	%r11d, %r11d
	movl	$8, %r10d
	movl	8(%r14), %edi
	cmpl	$8, 40(%rsp)
	movl	$9, %esi
	movl	class_narrowest_mode+4(%rip), %r8d
	cmovl	40(%rsp), %r10d
	movq	mov_optab(%rip), %r9
	movl	$8, %r12d
	.p2align 4,,7
.L19512:
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	testl	%r8d, %r8d
	je	.L19601
	.p2align 4,,7
.L19508:
	movslq	%edx,%r13
	salq	$2, %r13
	cmpl	%esi, mode_size(%r13)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%r13), %edx
	testl	%edx, %edx
	jne	.L19508
.L19601:
	testl	%ecx, %ecx
	je	.L19501
	movslq	%ecx,%rcx
	movq	%rcx, %rsi
	salq	$4, %rsi
	cmpl	$210, 8(%r9,%rsi)
	je	.L19510
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r12d, %eax
	cmpl	%eax, %r10d
	jl	.L19510
	movl	%edi, %eax
	movl	%edx, %edi
	xorl	%edx, %edx
	divl	%edi
	addl	%eax, %r11d
	movl	%edx, %edi
.L19510:
	movl	mode_size(,%rcx,4), %esi
	cmpl	$1, %esi
	jg	.L19512
.L19501:
	decl	%r11d
	jg	.L19498
	movq	%rbx, %rdx
	movl	$55, %edi
	xorl	%eax, %eax
	movl	$16, %esi
	movl	$9, %ebx
	call	gen_rtx
	xorl	%ecx, %ecx
	movq	8(%rbp), %rdi
	movq	8(%rax), %r12
	movl	8(%r14), %r10d
	movq	%rbp, 88(%rsp)
	movl	$0, 116(%rsp)
	movq	%rax, 64(%rsp)
	movq	%rdi, 96(%rsp)
	movq	%r12, 72(%rsp)
	movzwl	(%r12), %edx
	leal	-85(%rdx), %ebp
	cmpw	$1, %bp
	jbe	.L19515
	cmpw	$88, %dx
	je	.L19515
	cmpw	$87, %dx
	je	.L19515
.L19514:
	movl	%ecx, 80(%rsp)
	movzwl	(%rdi), %edx
	xorl	%ecx, %ecx
	leal	-85(%rdx), %r14d
	cmpw	$1, %r14w
	jbe	.L19517
	cmpw	$88, %dx
	je	.L19517
	cmpw	$87, %dx
	je	.L19517
.L19516:
	movl	%ecx, 104(%rsp)
	movl	$0, 108(%rsp)
	movl	$0, 84(%rsp)
	movzwl	(%r12), %eax
	xorl	%edx, %edx
	cmpw	$85, %ax
	je	.L19519
	cmpw	$87, %ax
	je	.L19519
.L19518:
	testl	%edx, %edx
	movl	%edx, 120(%rsp)
	je	.L19520
	movl	%r10d, 116(%rsp)
.L19520:
	movl	104(%rsp), %r14d
	movl	%r10d, 112(%rsp)
	testl	%r14d, %r14d
	je	.L19522
	movl	80(%rsp), %ecx
	testl	%ecx, %ecx
	jne	.L19521
.L19522:
	xorl	%ebp, %ebp
	movl	$8, %r11d
	movl	$9, %esi
	cmpl	$8, 40(%rsp)
	movl	class_narrowest_mode+4(%rip), %r8d
	movl	$8, %r13d
	cmovl	40(%rsp), %r11d
	movq	mov_optab(%rip), %r9
.L19536:
	xorl	%ecx, %ecx
	movl	%r8d, %edx
	testl	%r8d, %r8d
	je	.L19604
.L19532:
	movslq	%edx,%rax
	salq	$2, %rax
	cmpl	%esi, mode_size(%rax)
	cmovl	%edx, %ecx
	movl	mode_wider_mode(%rax), %edx
	testl	%edx, %edx
	jne	.L19532
.L19604:
	testl	%ecx, %ecx
	je	.L19525
	movslq	%ecx,%rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	cmpl	$210, 8(%r9,%rdx)
	je	.L19534
	movl	mode_size(,%rcx,4), %eax
	cmpl	$9, %eax
	movl	%eax, %edx
	cmovge	%r13d, %eax
	cmpl	%eax, %r11d
	jl	.L19534
	movl	%r10d, %eax
	movl	%edx, %r10d
	xorl	%edx, %edx
	divl	%r10d
	addl	%eax, %ebp
	movl	%edx, %r10d
.L19534:
	movl	mode_size(,%rcx,4), %esi
	cmpl	$1, %esi
	jg	.L19536
.L19525:
	cmpl	$2, %ebp
	jle	.L19521
	testl	%r14d, %r14d
	jne	.L19538
	movzwl	(%rdi), %edx
	leal	-56(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L19539
	cmpw	$46, %dx
	je	.L19539
	cmpw	$47, %dx
	je	.L19539
	cmpw	$49, %dx
	je	.L19539
	cmpw	$113, %dx
	je	.L19539
.L19538:
	movl	80(%rsp), %eax
	testl	%eax, %eax
	jne	.L19521
	movzwl	(%r12), %edx
	leal	-56(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L19541
	cmpw	$46, %dx
	je	.L19541
	cmpw	$47, %dx
	je	.L19541
	cmpw	$49, %dx
	je	.L19541
	cmpw	$113, %dx
	je	.L19541
.L19521:
	cmpl	$8, 40(%rsp)
	movl	$8, %eax
	cmovl	40(%rsp), %eax
	cmpl	$1, %ebx
	movl	%eax, 40(%rsp)
	jle	.L19544
.L19566:
	movl	class_narrowest_mode+4(%rip), %edx
	xorl	%r12d, %r12d
	testl	%edx, %edx
	je	.L19607
.L19551:
	movslq	%edx,%r11
	salq	$2, %r11
	cmpl	%ebx, mode_size(%r11)
	cmovl	%edx, %r12d
	movl	mode_wider_mode(%r11), %edx
	testl	%edx, %edx
	jne	.L19551
.L19607:
	testl	%r12d, %r12d
	je	.L19544
	movslq	%r12d,%r14
	movq	%r14, %rbx
	salq	$4, %rbx
	addq	mov_optab(%rip), %rbx
	movl	8(%rbx), %edx
	cmpl	$210, %edx
	je	.L19553
	movl	mode_size(,%r14,4), %ebp
	movl	$8, %eax
	cmpl	$9, %ebp
	cmovl	%ebp, %eax
	cmpl	%eax, 40(%rsp)
	jl	.L19553
	movslq	%edx,%rsi
	cmpl	%ebp, 112(%rsp)
	leaq	64(%rsp), %rbx
	movq	insn_gen_function(,%rsi,8), %r13
	movq	%r13, 48(%rsp)
	jl	.L19553
	movl	120(%rsp), %edx
.L19564:
	testl	%edx, %edx
	je	.L19558
	subl	%ebp, 52(%rbx)
.L19558:
	movl	16(%rbx), %edi
	testl	%edi, %edi
	je	.L19559
	movq	8(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L19616:
	movq	%rax, %r13
	movl	40(%rbx), %eax
	testl	%eax, %eax
	je	.L19561
	movq	32(%rbx), %rdx
	movl	$55, %edi
	movl	%r12d, %esi
	xorl	%eax, %eax
	call	gen_rtx
.L19617:
	movq	%rax, %rsi
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	*48(%rsp)
	movq	%rax, %rdi
	call	emit_insn
	movl	56(%rbx), %eax
	testl	%eax, %eax
	movl	%eax, %edx
	jne	.L19563
	addl	%ebp, 52(%rbx)
.L19563:
	movl	48(%rbx), %eax
	subl	%ebp, %eax
	cmpl	%ebp, %eax
	movl	%eax, 48(%rbx)
	jge	.L19564
.L19553:
	movl	mode_size(,%r14,4), %ebx
	cmpl	$1, %ebx
	jg	.L19566
.L19544:
	movl	112(%rsp), %eax
	testl	%eax, %eax
	je	.L19569
	jmp	.L19619
	.p2align 6,,7
.L19561:
	movq	32(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	24(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L19617
.L19559:
	movq	8(%rbx), %rdi
	movl	52(%rbx), %esi
	call	plus_constant_wide
	movl	%r12d, %esi
	movq	(%rbx), %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	jmp	.L19616
.L19541:
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 72(%rsp)
	jmp	.L19521
.L19539:
	xorl	%eax, %eax
	call	copy_addr_to_reg
	movq	%rax, 96(%rsp)
	jmp	.L19538
.L19519:
	movl	$1, %edx
	jmp	.L19518
.L19517:
	movl	$1, %ecx
	jmp	.L19516
.L19515:
	movl	$1, %ecx
	jmp	.L19514
.L19631:
	addl	8(%r13), %ebx
	movq	208(%rsp), %rdi
	jmp	.L19615
.L19630:
	movzwl	(%r14), %edx
	cmpl	$2, 44(%rsp)
	sete	%r10b
	leal	-56(%rdx), %r9d
	cmpw	$1, %r9w
	movzbl	%r10b, %r12d
	jbe	.L19488
	cmpw	$46, %dx
	je	.L19488
	cmpw	$47, %dx
	je	.L19488
	cmpw	$49, %dx
	je	.L19488
	cmpw	$113, %dx
	je	.L19488
	cmpw	$51, %dx
	je	.L19633
.L19490:
	xorl	%eax, %eax
	movl	$4, %edi
	movq	%r14, %rsi
	call	copy_to_mode_reg
	movl	200(%rsp), %r13d
	movq	%rax, %rbx
	testl	%r13d, %r13d
	jne	.L19634
.L19492:
	movq	%rbx, %rdi
.L19614:
	xorl	%eax, %eax
	call	anti_adjust_stack
	movl	200(%rsp), %edx
	movq	virtual_outgoing_args_rtx(%rip), %rsi
	testl	%edx, %edx
	je	.L19493
	testl	%r12d, %r12d
	jne	.L19635
.L19493:
	movl	class_narrowest_mode+4(%rip), %edi
	call	memory_address
	movl	$0, 200(%rsp)
	movq	%rax, %rbx
	jmp	.L19495
.L19635:
	movq	%rsi, %rdi
	movl	200(%rsp), %esi
	call	plus_constant_wide
	movq	%rax, %rsi
	jmp	.L19493
.L19634:
	movl	200(%rsp), %edx
	movl	$46, %edi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	gen_rtx
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	movq	add_optab(%rip), %rsi
	movq	%rax, %rcx
	movq	%rbx, %rdx
	movl	$4, %edi
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	movq	%rax, %rbx
	jmp	.L19492
.L19633:
	movl	200(%rsp), %r11d
	testl	%r11d, %r11d
	jne	.L19490
	movq	%r14, %rdi
	jmp	.L19614
	.p2align 6,,7
.L19488:
	movl	200(%rsp), %esi
	movq	%r14, %rdi
	call	plus_constant_wide
	movq	%rax, %rdi
	jmp	.L19614
.L19629:
	movq	8(%rbp), %rdi
	movl	%ebx, %esi
	call	plus_constant_wide
	movl	$16, %esi
	movq	%rbp, %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	movl	56(%rsp), %esi
	movq	%rax, %rbp
	testl	%esi, %esi
	je	.L19483
	cmpw	$46, (%r14)
	je	.L19636
	movl	$46, %edi
	xorl	%esi, %esi
	movl	%ebx, %edx
	xorl	%eax, %eax
	call	gen_rtx
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movzbl	2(%r14), %edi
	movq	sub_optab(%rip), %rsi
	movq	%rax, %rcx
	movq	%r14, %rdx
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
.L19613:
	movq	%rax, %r14
	jmp	.L19483
.L19636:
	movl	8(%r14), %edx
	movl	$46, %edi
	xorl	%esi, %esi
	xorl	%eax, %eax
	subl	%ebx, %edx
	call	gen_rtx
	jmp	.L19613
	.p2align 6,,7
.L19476:
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbp), %rdi
	movq	%rax, 8(%rbp)
	call	protect_from_queue
	movq	%rax, 16(%rbp)
	jmp	.L19472
.L19621:
	movzbl	2(%rbp), %edx
	cmpb	$16, %dl
	je	.L19470
	movq	8(%rbp), %r12
	cmpw	$59, (%r12)
	je	.L19637
.L19470:
	cmpl	$55, %eax
	jne	.L19473
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbp)
	jmp	.L19472
.L19637:
	movq	8(%r12), %rcx
	movq	%rcx, 8(%rbp)
	cmpq	$0, 16(%r12)
	je	.L19472
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%rbp, %rsi
	movq	%rax, %rdi
	movq	%rax, %r15
	call	gen_move_insn
	movq	%r15, %rbp
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L19472
	.p2align 6,,7
.L19469:
	cmpq	$0, 16(%rbp)
	jne	.L19477
	movq	8(%rbp), %rbp
	jmp	.L19472
.L19477:
	movq	24(%rbp), %rdi
	testq	%rdi, %rdi
	je	.L19478
	movq	%rdi, %rbp
	jmp	.L19472
.L19478:
	movq	8(%rbp), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbp)
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbp), %rbp
	jmp	.L19472
	.p2align 6,,7
.L19461:
	movl	$1, 44(%rsp)
	jmp	.L19465
.L19620:
	testq	%rdx, %rdx
	je	.L19461
	movq	32(%rdx), %rcx
	cmpb	$25, 16(%rcx)
	jne	.L19461
	movq	%rdx, %rdi
	call	int_size_in_bytes
	cmpl	$3, %eax
	jmp	.L19612
.L19619:
	xorl	%eax, %eax
	call	abort
.LFE34:
.Lfe34:
	.size	emit_push_insn,.Lfe34-emit_push_insn
	.align 2
	.p2align 4,,15
.globl expand_assignment
	.type	expand_assignment,@function
expand_assignment:
.LFB35:
	pushq	%r15
.LCFI162:
	pushq	%r14
.LCFI163:
	movq	%rdi, %r14
	pushq	%r13
.LCFI164:
	xorl	%r13d, %r13d
	pushq	%r12
.LCFI165:
	pushq	%rbp
.LCFI166:
	pushq	%rbx
.LCFI167:
	subq	$88, %rsp
.LCFI168:
	movq	%rsi, 56(%rsp)
	movl	%edx, 52(%rsp)
	movzbl	16(%rdi), %edx
	testb	%dl, %dl
	je	.L19911
	leal	-37(%rdx), %ecx
	cmpb	$1, %cl
	jbe	.L19641
	cmpb	$42, %dl
	je	.L19912
.L19640:
	testq	%r13, %r13
	je	.L19913
.L19791:
	cmpb	$35, %dl
	je	.L19914
	movq	56(%rsp), %rsi
	movzbl	16(%rsi), %eax
.L19792:
	xorl	%r12d, %r12d
	cmpb	$44, %al
	je	.L19915
	cmpb	$48, %al
	je	.L19916
.L19801:
	movl	52(%rsp), %r14d
	testl	%r14d, %r14d
	je	.L19828
	cmpw	$55, (%r13)
	je	.L19917
.L19828:
	movzwl	(%r13), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L19836
	mov	%eax, %esi
	jmp	*.L19845(,%rsi,8)
	.section	.rodata
	.align 8
	.align 4
.L19845:
	.quad	.L19839
	.quad	.L19836
	.quad	.L19836
	.quad	.L19836
	.quad	.L19844
	.quad	.L19836
	.quad	.L19836
	.quad	.L19836
	.quad	.L19842
	.quad	.L19842
	.quad	.L19836
	.quad	.L19842
	.text
.L19839:
	movq	8(%r13), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %ebx
.L19838:
	testl	%ebx, %ebx
	je	.L19835
	movzbl	2(%r13), %eax
	cmpb	$16, %al
	je	.L19847
	testb	%al, %al
	jne	.L19918
.L19847:
	movzbl	2(%r13), %edx
	movq	56(%rsp), %rdi
	xorl	%esi, %esi
.L19904:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L19910:
	movq	%rax, %rbp
.L19854:
	movl	$1, %r12d
.L19800:
	cmpq	%r13, %rbp
	je	.L19855
	movq	56(%rsp), %rdi
	cmpb	$0, 16(%rdi)
	je	.L19855
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L19856
	cmpl	$55, %eax
	je	.L19919
.L19860:
	cmpl	$63, %eax
	je	.L19863
	cmpl	$66, %eax
	je	.L19863
.L19859:
	movzbl	2(%rbp), %eax
	movzbl	2(%r13), %ecx
	cmpb	%cl, %al
	je	.L19866
	testb	%al, %al
	je	.L19866
	movq	56(%rsp), %r11
	movq	8(%r11), %r10
	movzbl	17(%r10), %r9d
	shrb	$6, %r9b
	movl	%r9d, %edx
	andl	$1, %edx
	testl	%r12d, %r12d
	je	.L19867
	movq	%rbp, %rsi
	movzbl	%cl, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%rax, %rbp
.L19878:
	movq	%r13, %rdi
	movq	%rbp, %rsi
	call	emit_move_insn
.L19855:
	testl	%r12d, %r12d
	cmove	%r13, %rbp
.L19799:
	movq	%rbp, %rdi
	xorl	%eax, %eax
	movq	%rbp, %r13
	call	preserve_temp_slots
	xorl	%eax, %eax
	call	free_temp_slots
.L19638:
	addq	$88, %rsp
	movq	%r13, %rax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L19867:
	movq	%r13, %rdi
	movq	%rbp, %rsi
	xorl	%eax, %eax
	call	convert_move
	jmp	.L19855
.L19866:
	cmpb	$16, %al
	jne	.L19878
	movq	56(%rsp), %rcx
	cmpb	$28, 16(%rcx)
	je	.L19920
	cmpb	$16, %al
	jne	.L19878
	movq	56(%rsp), %rdi
	xorl	%eax, %eax
	call	expr_size
	movq	%rbp, %rsi
	movq	%r13, %rdi
	movq	56(%rsp), %r9
	movq	%rax, %rdx
	movq	8(%r9), %r14
	movl	48(%r14), %ecx
	shrl	$3, %ecx
.L19905:
	xorl	%eax, %eax
	call	emit_block_move
	jmp	.L19855
.L19920:
	xorl	%eax, %eax
	movq	%rcx, %rdi
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, %r14
	je	.L19921
.L19871:
	movl	$8, %edi
	call	size_int
	movq	56(%rsp), %rdi
	movq	%rax, %rdx
	movq	8(%rdi), %r8
	movl	$57, %edi
	movq	32(%r8), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	56(%rsp), %rdx
	movq	%rax, %r15
	movl	32(%rdx), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%r15, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%r15d, %r15d
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movq	%r13, %rdi
	movq	%rax, %rbx
	movq	56(%rsp), %rax
	movq	%rbx, %rdx
	movq	8(%rax), %rsi
	xorl	%eax, %eax
	movl	48(%rsi), %ecx
	movq	%rbp, %rsi
	shrl	$3, %ecx
	call	emit_block_move
	cmpw	$46, (%rbx)
	je	.L19922
	movq	8(%r13), %rsi
	movl	$4, %edi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movq	%rbx, %rcx
	movl	$4, %edi
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	%rbx, %rcx
	movl	$4, %edi
	movq	%r14, %rdx
	movq	%rax, %rbp
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, %r15
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L19874:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L19875
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%rbp, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L19875:
	testq	%r15, %r15
	je	.L19855
	movq	%r15, %rdi
	call	emit_label
	jmp	.L19855
.L19922:
	movq	56(%rsp), %rbp
	movq	8(%r13), %rdi
	movl	32(%rbp), %esi
	call	plus_constant_wide
	movq	%r14, %rdi
	movq	56(%rsp), %rcx
	movq	%rax, %rbp
	movl	32(%rcx), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L19874
.L19921:
	movq	56(%rsp), %rdx
	movl	32(%rdx), %eax
	cmpl	%eax, 8(%r14)
	jge	.L19871
	movq	8(%rdx), %rbx
	movq	%r13, %rdi
	movq	%rbp, %rsi
	movq	%r14, %rdx
	movl	48(%rbx), %ecx
	shrl	$3, %ecx
	jmp	.L19905
	.p2align 6,,7
.L19863:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L19859
.L19919:
	jne	.L19860
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L19859
.L19856:
	cmpq	$0, 16(%r13)
	jne	.L19864
	movq	8(%r13), %r13
	jmp	.L19859
.L19864:
	movq	24(%r13), %rax
	testq	%rax, %rax
	je	.L19865
	movq	%rax, %r13
	jmp	.L19859
.L19865:
	movq	8(%r13), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L19859
	.p2align 6,,7
.L19918:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	56(%rsp), %rdi
	movzbl	2(%r13), %edx
	movq	%rax, %rsi
	jmp	.L19904
.L19835:
	movl	(%r13), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L19923
	movzbl	2(%r13), %edx
	movq	56(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	%r13, %rsi
	call	expand_expr
	cmpw	$51, (%r13)
	movq	%rax, %rbp
	je	.L19924
.L19853:
	movl	(%rbp), %edx
	leal	-56(%rdx), %r8d
	cmpw	$1, %r8w
	jbe	.L19854
	cmpw	$46, %dx
	je	.L19854
	cmpw	$47, %dx
	je	.L19854
	cmpw	$49, %dx
	je	.L19854
	cmpw	$113, %dx
	jne	.L19800
	jmp	.L19854
.L19924:
	cmpl	$63, 8(%r13)
	jle	.L19800
	jmp	.L19853
.L19923:
	movq	56(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	8(%r13), %rdi
	movzbl	3(%r13), %edx
	movq	%rax, %rbp
	movq	%rax, %rsi
	xorl	%eax, %eax
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	jmp	.L19799
.L19844:
	movl	$1, %ebx
	jmp	.L19838
.L19836:
	xorl	%ebx, %ebx
	jmp	.L19838
.L19842:
	movq	8(%r13), %rdi
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L19844
	movq	16(%r13), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L19838
	jmp	.L19844
.L19917:
	movzbl	2(%r13), %eax
	cmpb	$16, %al
	je	.L19828
	movl	cse_not_expected(%rip), %ebp
	movq	56(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	%al, %edx
	testl	%ebp, %ebp
	cmove	%r13, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	call	expand_expr
	movq	%rax, %rbp
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L19854
	testb	%al, %al
	je	.L19854
	movq	%rbp, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L19910
	.p2align 6,,7
.L19916:
	cmpb	$16, 2(%r13)
	jne	.L19801
	call	gen_label_rtx
	movq	%rax, %r12
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r14
	testq	%rbx, %rbx
	jne	.L19805
.L19892:
	movzwl	(%r13), %eax
	movq	%r13, %rbp
	cmpl	$59, %eax
	je	.L19807
	cmpl	$55, %eax
	je	.L19925
.L19811:
	cmpl	$63, %eax
	je	.L19814
	cmpl	$66, %eax
	je	.L19814
.L19810:
	movq	56(%rsp), %rax
	movq	%r12, %rsi
	incl	inhibit_defer_pop(%rip)
	movq	32(%rax), %rdi
	xorl	%eax, %eax
	call	jumpifnot
	movq	56(%rsp), %r11
	movl	52(%rsp), %edx
	xorl	%eax, %eax
	movq	%rbp, %rsi
	movq	40(%r11), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L19820
.L19894:
	movq	%r14, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r12, %rdi
	call	emit_label
	xorl	%eax, %eax
	movl	52(%rsp), %edx
	movq	56(%rsp), %rbx
	movq	%rbp, %rsi
	movq	48(%rbx), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L19825
.L19896:
	movq	%r14, %rdi
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L19799
.L19825:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r15
	movq	%rax, 16(%rbx)
	testq	%r15, %r15
	movq	%r15, pending_chain(%rip)
	movq	%r15, %rbx
	jne	.L19825
	jmp	.L19896
.L19820:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r13
	movq	%rax, 16(%rbx)
	testq	%r13, %r13
	movq	%r13, pending_chain(%rip)
	movq	%r13, %rbx
	jne	.L19820
	jmp	.L19894
.L19814:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L19810
.L19925:
	jne	.L19811
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L19810
	.p2align 6,,7
.L19807:
	cmpq	$0, 16(%r13)
	jne	.L19815
	movq	8(%r13), %rbp
	jmp	.L19810
.L19815:
	movq	24(%r13), %r10
	testq	%r10, %r10
	movq	%r10, %rbp
	jne	.L19810
	movq	8(%r13), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %rbp
	jmp	.L19810
	.p2align 6,,7
.L19805:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r9
	movq	%rax, 16(%rbx)
	testq	%r9, %r9
	movq	%r9, pending_chain(%rip)
	movq	%r9, %rbx
	jne	.L19805
	jmp	.L19892
.L19915:
	movq	56(%rsp), %r8
	movq	const0_rtx(%rip), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	32(%r8), %rdi
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L19797
.L19890:
	movq	56(%rsp), %rcx
	movl	52(%rsp), %edx
	movq	%r13, %rsi
	xorl	%eax, %eax
	movq	40(%rcx), %rdi
	call	store_expr
	movq	%rax, %rbp
	jmp	.L19799
.L19797:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdi
	movq	%rax, 16(%rbx)
	testq	%rdi, %rdi
	movq	%rdi, pending_chain(%rip)
	movq	%rdi, %rbx
	jne	.L19797
	jmp	.L19890
.L19914:
	movq	56(%rsp), %rdx
	movzbl	16(%rdx), %eax
	cmpb	$39, %al
	jne	.L19792
	movl	current_function_returns_struct(%rip), %r15d
	testl	%r15d, %r15d
	je	.L19792
	movl	current_function_returns_pcc_struct(%rip), %ebp
	testl	%ebp, %ebp
	jne	.L19792
	movq	%rdx, %rdi
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	expand_expr
	movq	56(%rsp), %rdi
	movq	%rax, %r14
	xorl	%eax, %eax
	call	expr_size
	movl	$4, %r9d
	movl	$3, %ecx
	movq	8(%r14), %r12
	movq	memcpy_libfunc(%rip), %rdi
	xorl	%esi, %esi
	movq	%rax, 16(%rsp)
	movl	$4, 8(%rsp)
	movl	$4, 24(%rsp)
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%r12, (%rsp)
	movq	8(%r13), %r8
	call	emit_library_call
.L19906:
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	preserve_temp_slots
	xorl	%eax, %eax
	call	free_temp_slots
	jmp	.L19638
.L19913:
	xorl	%edx, %edx
	movq	%r14, %rdi
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movzbl	16(%r14), %edx
	movq	%rax, %r13
	jmp	.L19791
.L19912:
	movq	40(%rdi), %rcx
	cmpb	$25, 16(%rcx)
	jne	.L19640
	movq	8(%rdi), %rsi
	movq	32(%rsi), %rbx
	cmpb	$25, 16(%rbx)
	jne	.L19640
.L19641:
	xorl	%ecx, %ecx
	xorl	%ebp, %ebp
	movl	$0, 64(%rsp)
	cmpb	$37, %dl
	movq	%r14, %r12
	leaq	80(%rsp), %r13
	leaq	64(%rsp), %r15
	movl	$0, 40(%rsp)
	je	.L19926
	cmpb	$38, %dl
	je	.L19927
	movq	8(%r14), %r8
	movzbl	44(%r8), %r9d
	movl	%r9d, 40(%rsp)
	movslq	40(%rsp),%rdx
	movl	mode_size(,%rdx,4), %eax
	sall	$3, %eax
	movl	%eax, 84(%rsp)
	movzbl	17(%r8), %eax
.L19898:
	shrb	$6, %al
	movl	%eax, %r10d
	andl	$1, %r10d
	testq	%rcx, %rcx
	movl	%r10d, 48(%rsp)
	je	.L19647
	cmpb	$25, 16(%rcx)
	je	.L19648
	movl	$16, 40(%rsp)
	movl	$-1, 84(%rsp)
.L19647:
	movl	$0, (%r13)
	.p2align 4,,7
.L19675:
	movzbl	16(%r12), %edx
	cmpb	$39, %dl
	je	.L19928
.L19653:
	leal	-37(%rdx), %r11d
	cmpb	$1, %r11b
	ja	.L19654
	cmpb	$37, %dl
	je	.L19929
	movq	48(%r12), %rbx
.L19656:
	movzbl	16(%rbx), %eax
	cmpb	$53, %al
	je	.L19930
	cmpb	$25, %al
	je	.L19931
.L19665:
	testq	%rbp, %rbp
	je	.L19667
	movl	$8, %edi
	call	size_int
	movq	%rbx, %rsi
	movl	$58, %edi
	movq	%rax, %rdx
	call	size_binop
	movq	%rbp, %rsi
	movl	$53, %edi
.L19899:
	movq	%rax, %rdx
	call	size_binop
	movq	%rax, %rbp
.L19669:
	testb	$16, 17(%r12)
	je	.L19674
	movl	$1, (%r15)
.L19674:
	movq	32(%r12), %r12
	jmp	.L19675
	.p2align 6,,7
.L19667:
	movl	$8, %edi
	call	size_int
	movq	%rbx, %rsi
	movl	$58, %edi
	jmp	.L19899
	.p2align 6,,7
.L19931:
	movl	24(%rbx), %eax
.L19900:
	addl	%eax, (%r13)
	jmp	.L19669
	.p2align 6,,7
.L19930:
	movq	32(%rbx), %rsi
	cmpb	$25, 16(%rsi)
	je	.L19932
	movq	40(%rbx), %rax
	cmpb	$25, 16(%rax)
	jne	.L19907
	movq	%rsi, %rbx
.L19659:
	movl	24(%rax), %eax
	addl	%eax, (%r13)
	jmp	.L19665
.L19932:
	movq	40(%rbx), %rbx
	movq	%rsi, %rax
	jmp	.L19659
	.p2align 6,,7
.L19929:
	movq	40(%r12), %rcx
	movq	72(%rcx), %rbx
	jmp	.L19656
	.p2align 6,,7
.L19654:
	cmpb	$42, %dl
	je	.L19933
.L19670:
	cmpb	$103, %dl
	je	.L19669
	leal	-101(%rdx), %esi
	cmpb	$1, %sil
	ja	.L19651
	movq	32(%r12), %r9
	movq	8(%r12), %r8
	movq	8(%r9), %rdx
	movzbl	44(%rdx), %edi
	cmpb	%dil, 44(%r8)
	je	.L19669
.L19651:
	movl	40(%rsp), %r15d
	testl	%r15d, %r15d
	jne	.L19676
	movl	(%r13), %eax
	movl	84(%rsp), %edi
	cltd
	idivl	%edi
	testl	%edx, %edx
	movl	%edx, %ebx
	je	.L19934
.L19676:
	movl	40(%rsp), %r13d
	movq	%rbp, 72(%rsp)
	testl	%r13d, %r13d
	movl	%r13d, 68(%rsp)
	jne	.L19679
	movl	52(%rsp), %ebp
	testl	%ebp, %ebp
	jne	.L19935
.L19679:
	movq	%r12, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	72(%rsp), %rdi
	movq	%rax, %r13
	testq	%rdi, %rdi
	jne	.L19936
.L19680:
	movl	64(%rsp), %r10d
	testl	%r10d, %r10d
	je	.L19682
	cmpw	$55, (%r13)
	je	.L19937
.L19682:
	movl	52(%rsp), %eax
	movl	84(%rsp), %ebp
	movl	80(%rsp), %r15d
	movl	68(%rsp), %ebx
	testl	%eax, %eax
	je	.L19684
	movq	8(%r14), %r11
	movzbl	44(%r11), %r14d
	movl	%r14d, 36(%rsp)
.L19685:
	movq	8(%r12), %rdi
	movl	48(%rdi), %r12d
	call	int_size_in_bytes
	movl	$0, 32(%rsp)
	movl	%eax, 44(%rsp)
	shrl	$3, %r12d
	cmpl	$31, %ebp
	jg	.L19686
	movl	$1, %eax
	movl	%ebp, %ecx
	sall	%cl, %eax
	decl	%eax
	movl	%eax, 32(%rsp)
.L19686:
	cmpl	$16, %ebx
	je	.L19938
.L19687:
	testl	%ebx, %ebx
	je	.L19692
	cmpl	$16, %ebx
	je	.L19693
	movslq	%ebx,%rsi
	cmpb	$0, direct_store(%rsi)
	je	.L19692
.L19693:
	movzwl	(%r13), %eax
	cmpw	$51, %ax
	je	.L19692
	cmpw	$53, %ax
	je	.L19692
	movl	36(%rsp), %eax
	movq	8(%r13), %rdi
	testl	%eax, %eax
	je	.L19699
	movzwl	(%rdi), %edx
	cmpw	$51, %dx
	je	.L19699
	leal	-56(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L19699
	cmpw	$46, %dx
	je	.L19699
	cmpw	$47, %dx
	je	.L19699
	cmpw	$49, %dx
	je	.L19699
	cmpw	$113, %dx
	je	.L19699
	cmpw	$63, %dx
	je	.L19939
.L19700:
	xorl	%eax, %eax
	call	copy_to_reg
	movq	%rax, %rdi
.L19699:
	cmpl	$-1, %r15d
	leal	7(%r15), %ebp
	cmovle	%ebp, %r15d
	sarl	$3, %r15d
	movl	%r15d, %esi
	call	plus_constant_wide
	movl	%ebx, %esi
	movq	%r13, %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	orb	$16, 3(%rax)
	movq	%rax, %rbp
	movq	56(%rsp), %rdx
	movl	36(%rsp), %eax
	testl	%eax, %eax
	movzbl	16(%rdx), %eax
	setne	%r10b
	xorl	%r15d, %r15d
	cmpb	$44, %al
	movzbl	%r10b, %r13d
	je	.L19940
	cmpb	$48, %al
	je	.L19941
.L19711:
	testl	%r13d, %r13d
	je	.L19738
	cmpw	$55, (%rbp)
	je	.L19942
.L19738:
	movzwl	(%rbp), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L19746
	mov	%eax, %r9d
	jmp	*.L19755(,%r9,8)
	.section	.rodata
	.align 8
	.align 4
.L19755:
	.quad	.L19749
	.quad	.L19746
	.quad	.L19746
	.quad	.L19746
	.quad	.L19754
	.quad	.L19746
	.quad	.L19746
	.quad	.L19746
	.quad	.L19752
	.quad	.L19752
	.quad	.L19746
	.quad	.L19752
	.text
.L19749:
	movq	8(%rbp), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %ebx
.L19748:
	testl	%ebx, %ebx
	je	.L19745
	movzbl	2(%rbp), %eax
	cmpb	$16, %al
	je	.L19757
	testb	%al, %al
	jne	.L19943
.L19757:
	movzbl	2(%rbp), %edx
	movq	56(%rsp), %rdi
	xorl	%esi, %esi
.L19901:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L19909:
	movq	%rax, %r12
.L19764:
	movl	$1, %r15d
.L19710:
	cmpq	%rbp, %r12
	je	.L19765
	movq	56(%rsp), %rdx
	cmpb	$0, 16(%rdx)
	je	.L19765
	movzwl	(%rbp), %eax
	cmpl	$59, %eax
	je	.L19766
	cmpl	$55, %eax
	je	.L19944
.L19770:
	cmpl	$63, %eax
	je	.L19773
	cmpl	$66, %eax
	je	.L19773
.L19769:
	movzbl	2(%r12), %eax
	movzbl	2(%rbp), %ecx
	cmpb	%cl, %al
	je	.L19776
	testb	%al, %al
	je	.L19776
	movq	56(%rsp), %rsi
	movq	8(%rsi), %rbx
	movzbl	17(%rbx), %r11d
	shrb	$6, %r11b
	movl	%r11d, %edx
	andl	$1, %edx
	testl	%r15d, %r15d
	je	.L19777
	movq	%r12, %rsi
	movzbl	%cl, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%rax, %r12
.L19788:
	movq	%rbp, %rdi
	movq	%r12, %rsi
	call	emit_move_insn
.L19765:
	testl	%r15d, %r15d
	cmove	%rbp, %r12
.L19709:
	movq	%r12, %r13
	jmp	.L19906
.L19777:
	movq	%rbp, %rdi
	movq	%r12, %rsi
	xorl	%eax, %eax
	call	convert_move
	jmp	.L19765
.L19776:
	cmpb	$16, %al
	jne	.L19788
	movq	56(%rsp), %rcx
	cmpb	$28, 16(%rcx)
	je	.L19945
	cmpb	$16, %al
	jne	.L19788
	movq	56(%rsp), %rdi
	xorl	%eax, %eax
	call	expr_size
	movq	%r12, %rsi
	movq	%rbp, %rdi
	movq	56(%rsp), %rbx
	movq	%rax, %rdx
	movq	8(%rbx), %r13
	movl	48(%r13), %ecx
	shrl	$3, %ecx
.L19902:
	xorl	%eax, %eax
	call	emit_block_move
	jmp	.L19765
	.p2align 6,,7
.L19945:
	xorl	%eax, %eax
	movq	%rcx, %rdi
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, %r13
	je	.L19946
.L19781:
	movl	$8, %edi
	call	size_int
	movl	$57, %edi
	movq	56(%rsp), %rdx
	movq	8(%rdx), %r10
	movq	%rax, %rdx
	movq	32(%r10), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	56(%rsp), %r9
	movq	%rax, %r14
	movl	32(%r9), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%r14, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%r14d, %r14d
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movq	%r12, %rsi
	movq	56(%rsp), %rcx
	movq	%rax, %rbx
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%rcx), %rdi
	movl	48(%rdi), %ecx
	movq	%rbp, %rdi
	shrl	$3, %ecx
	call	emit_block_move
	cmpw	$46, (%rbx)
	je	.L19947
	movq	8(%rbp), %rsi
	movl	$4, %edi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movq	%rbx, %rcx
	movl	$4, %edi
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	%rbx, %rcx
	movl	$4, %edi
	movq	%r13, %rdx
	movq	%rax, %r12
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L19784:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L19785
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%r12, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L19785:
	testq	%r14, %r14
	je	.L19765
	movq	%r14, %rdi
	call	emit_label
	jmp	.L19765
.L19947:
	movq	56(%rsp), %rax
	movq	8(%rbp), %rdi
	movl	32(%rax), %esi
	call	plus_constant_wide
	movq	%r13, %rdi
	movq	56(%rsp), %r11
	movq	%rax, %r12
	movl	32(%r11), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L19784
.L19946:
	movq	56(%rsp), %rdx
	movl	32(%rdx), %eax
	cmpl	%eax, 8(%r13)
	jge	.L19781
	movq	8(%rdx), %r8
	movq	%rbp, %rdi
	movq	%r12, %rsi
	movq	%r13, %rdx
	movl	48(%r8), %ecx
	shrl	$3, %ecx
	jmp	.L19902
	.p2align 6,,7
.L19773:
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbp), %rdi
	movq	%rax, 8(%rbp)
	call	protect_from_queue
	movq	%rax, 16(%rbp)
	jmp	.L19769
.L19944:
	jne	.L19770
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbp)
	jmp	.L19769
	.p2align 6,,7
.L19766:
	cmpq	$0, 16(%rbp)
	jne	.L19774
	movq	8(%rbp), %rbp
	jmp	.L19769
.L19774:
	movq	24(%rbp), %rax
	testq	%rax, %rax
	je	.L19775
	movq	%rax, %rbp
	jmp	.L19769
.L19775:
	movq	8(%rbp), %r14
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	8(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbp)
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbp), %rbp
	jmp	.L19769
	.p2align 6,,7
.L19943:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	56(%rsp), %rdi
	movzbl	2(%rbp), %edx
	movq	%rax, %rsi
	jmp	.L19901
.L19745:
	movl	(%rbp), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L19948
	movzbl	2(%rbp), %edx
	movq	56(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	%rbp, %rsi
	call	expand_expr
	cmpw	$51, (%rbp)
	movq	%rax, %r12
	je	.L19949
.L19763:
	movzwl	(%r12), %edx
	leal	-56(%rdx), %r10d
	cmpw	$1, %r10w
	jbe	.L19764
	cmpw	$46, %dx
	je	.L19764
	cmpw	$47, %dx
	je	.L19764
	cmpw	$49, %dx
	je	.L19764
	cmpw	$113, %dx
	jne	.L19710
	jmp	.L19764
.L19949:
	cmpl	$63, 8(%rbp)
	jle	.L19710
	jmp	.L19763
.L19948:
	movq	56(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	8(%rbp), %rdi
	movzbl	3(%rbp), %edx
	movq	%rax, %r12
	movq	%rax, %rsi
	xorl	%eax, %eax
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	jmp	.L19709
.L19754:
	movl	$1, %ebx
	jmp	.L19748
.L19746:
	xorl	%ebx, %ebx
	jmp	.L19748
.L19752:
	movq	8(%rbp), %rdi
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L19754
	movq	16(%rbp), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L19748
	jmp	.L19754
.L19942:
	movzbl	2(%rbp), %eax
	cmpb	$16, %al
	je	.L19738
	movl	cse_not_expected(%rip), %r12d
	movq	56(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	%al, %edx
	testl	%r12d, %r12d
	cmove	%rbp, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	call	expand_expr
	movq	%rax, %r12
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L19764
	testb	%al, %al
	je	.L19764
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L19909
	.p2align 6,,7
.L19941:
	cmpb	$16, 2(%rbp)
	jne	.L19711
	call	gen_label_rtx
	movq	%rax, %r14
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, %r15
	testq	%rbx, %rbx
	jne	.L19715
.L19884:
	movzwl	(%rbp), %eax
	movq	%rbp, %r12
	cmpl	$59, %eax
	je	.L19717
	cmpl	$55, %eax
	je	.L19950
.L19721:
	cmpl	$63, %eax
	je	.L19724
	cmpl	$66, %eax
	je	.L19724
.L19720:
	movq	56(%rsp), %r8
	xorl	%eax, %eax
	movq	%r14, %rsi
	incl	inhibit_defer_pop(%rip)
	movq	32(%r8), %rdi
	call	jumpifnot
	movq	56(%rsp), %rsi
	xorl	%eax, %eax
	movl	%r13d, %edx
	movq	40(%rsi), %rdi
	movq	%r12, %rsi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L19730
.L19886:
	movq	%r15, %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r14, %rdi
	call	emit_label
	movl	%r13d, %edx
	movq	%r12, %rsi
	movq	56(%rsp), %rax
	movq	48(%rax), %rdi
	xorl	%eax, %eax
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L19735
.L19888:
	movq	%r15, %rdi
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L19709
.L19735:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r13
	movq	%rax, 16(%rbx)
	testq	%r13, %r13
	movq	%r13, pending_chain(%rip)
	movq	%r13, %rbx
	jne	.L19735
	jmp	.L19888
.L19730:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdi
	movq	%rax, 16(%rbx)
	testq	%rdi, %rdi
	movq	%rdi, pending_chain(%rip)
	movq	%rdi, %rbx
	jne	.L19730
	jmp	.L19886
.L19724:
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbp), %rdi
	movq	%rax, 8(%rbp)
	call	protect_from_queue
	movq	%rax, 16(%rbp)
	jmp	.L19720
.L19950:
	jne	.L19721
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbp)
	jmp	.L19720
.L19717:
	cmpq	$0, 16(%rbp)
	jne	.L19725
	movq	8(%rbp), %r12
	jmp	.L19720
.L19725:
	movq	24(%rbp), %rax
	testq	%rax, %rax
	je	.L19726
	movq	%rax, %r12
	jmp	.L19720
.L19726:
	movq	8(%rbp), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	%rax, 24(%r12)
	movq	%rax, %rdi
	movq	8(%rbp), %rsi
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbp), %r12
	jmp	.L19720
	.p2align 6,,7
.L19715:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rcx
	movq	%rax, 16(%rbx)
	testq	%rcx, %rcx
	movq	%rcx, pending_chain(%rip)
	movq	%rcx, %rbx
	jne	.L19715
	jmp	.L19884
.L19940:
	movq	32(%rdx), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L19707
.L19882:
	movq	56(%rsp), %r11
	movq	%rbp, %rsi
	movl	%r13d, %edx
	xorl	%eax, %eax
	movq	40(%r11), %rdi
	call	store_expr
	movq	%rax, %r12
	jmp	.L19709
.L19707:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r14
	movq	%rax, 16(%rbx)
	testq	%r14, %r14
	movq	%r14, pending_chain(%rip)
	movq	%r14, %rbx
	jne	.L19707
	jmp	.L19882
.L19939:
	movq	16(%rdi), %rdx
	cmpw	$46, (%rdx)
	jne	.L19700
	movq	8(%rdi), %rax
	cmpq	virtual_incoming_args_rtx(%rip), %rax
	je	.L19699
	cmpq	virtual_stack_vars_rtx(%rip), %rax
	jne	.L19700
	jmp	.L19699
	.p2align 6,,7
.L19692:
	movq	56(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movl	%r12d, %r9d
	movl	%ebx, %ecx
	movq	%rax, %r14
	movq	%r13, %rdi
	movl	%ebp, %esi
	movl	44(%rsp), %eax
	movl	%r15d, %edx
	movq	%r14, %r8
	movl	%eax, (%rsp)
	xorl	%eax, %eax
	call	store_bit_field
	movl	36(%rsp), %eax
	testl	%eax, %eax
	je	.L19694
	movl	32(%rsp), %eax
	testl	%eax, %eax
	je	.L19695
	movl	(%r13), %eax
	andl	$134283263, %eax
	cmpl	$134217783, %eax
	je	.L19695
	movl	48(%rsp), %eax
	testl	%eax, %eax
	je	.L19696
	movl	32(%rsp), %edx
	xorl	%esi, %esi
	movl	$46, %edi
	xorl	%eax, %eax
	call	gen_rtx
	xorl	%edx, %edx
	movq	%r14, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	expand_and
.L19903:
	movq	%rax, %r13
	jmp	.L19906
.L19696:
	movzbl	2(%r14), %r12d
	testl	%r12d, %r12d
	cmove	36(%rsp), %r12d
	xorl	%esi, %esi
	movslq	%r12d,%r8
	movl	mode_size(,%r8,4), %edi
	sall	$3, %edi
	subl	%ebp, %edi
	call	build_int_2_wide
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	%rax, %r15
	movl	%r12d, %esi
	movq	%r14, %rdx
	movq	%rax, %rcx
	movl	$77, %edi
	xorl	%eax, %eax
	call	expand_shift
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movl	$78, %edi
	movl	%r12d, %esi
	movq	%r15, %rcx
	xorl	%eax, %eax
	call	expand_shift
	jmp	.L19903
.L19695:
	movl	44(%rsp), %edi
	movl	48(%rsp), %ecx
	movl	%ebp, %esi
	movl	36(%rsp), %r9d
	movl	%r15d, %edx
	xorl	%r8d, %r8d
	xorl	%eax, %eax
	movl	$0, (%rsp)
	movl	%r12d, 8(%rsp)
	movl	%edi, 16(%rsp)
	movq	%r13, %rdi
	call	extract_bit_field
	jmp	.L19903
.L19694:
	movq	const0_rtx(%rip), %r13
	jmp	.L19906
.L19938:
	movzwl	(%r13), %eax
	cmpw	$51, %ax
	je	.L19688
	cmpw	$53, %ax
	jne	.L19687
.L19688:
	movzbl	2(%r13), %edi
	xorl	%edx, %edx
	movslq	%edi,%rbx
	movl	mode_size(,%rbx,4), %esi
	call	assign_stack_temp
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	copy_rtx
	movb	$16, 2(%rax)
	movq	%rax, %r14
	movzbq	2(%r13), %rcx
	movl	mode_size(,%rcx,4), %eax
	sall	$3, %eax
	cmpl	%eax, %ebp
	je	.L19689
	movq	%rbx, %rdi
	movq	%r13, %rsi
	call	emit_move_insn
.L19689:
	movl	44(%rsp), %eax
	movq	56(%rsp), %r8
	movq	%r14, %rdi
	movl	%ebp, %esi
	movl	%r15d, %edx
	movl	$16, %ecx
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	%r12d, 8(%rsp)
	movl	%eax, 16(%rsp)
	xorl	%eax, %eax
	call	store_field
	movq	%rbx, %rsi
	movq	%r13, %rdi
	call	emit_move_insn
	jmp	.L19906
.L19684:
	movl	$0, 36(%rsp)
	jmp	.L19685
.L19937:
	orb	$8, 3(%r13)
	jmp	.L19682
.L19936:
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	cmpw	$55, (%r13)
	movq	%rax, %rsi
	jne	.L19907
	movl	$4, %edi
	call	force_reg
	movq	8(%r13), %rdx
	movl	$4, %esi
	movq	%rax, %rcx
	movl	$63, %edi
	xorl	%eax, %eax
	call	gen_rtx
	xorl	%esi, %esi
	movq	%r13, %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	movq	%rax, %r13
	jmp	.L19680
.L19935:
	movq	%r12, %rdi
	call	stabilize_reference
	movq	%rax, %r12
	jmp	.L19679
.L19934:
	xorl	%edx, %edx
	xorl	%eax, %eax
	movl	$1, %esi
	call	mode_for_size
	cmpl	$16, %eax
	cmovne	%eax, %ebx
	movl	%ebx, 40(%rsp)
	jmp	.L19676
	.p2align 6,,7
.L19933:
	movq	40(%r12), %rcx
	cmpb	$25, 16(%rcx)
	jne	.L19670
	movq	8(%r12), %rbx
	movq	32(%rbx), %rax
	cmpb	$25, 16(%rax)
	jne	.L19670
	movl	24(%rax), %eax
	imull	24(%rcx), %eax
	jmp	.L19900
	.p2align 6,,7
.L19928:
	movl	flag_volatile(%rip), %eax
	testl	%eax, %eax
	je	.L19653
	movl	$1, (%r15)
	movzbl	16(%r12), %edx
	jmp	.L19653
.L19648:
	movl	24(%rcx), %eax
	movl	%eax, 84(%rsp)
	jmp	.L19647
.L19927:
	movzbl	17(%r14), %eax
	movq	40(%r14), %rcx
	jmp	.L19898
.L19926:
	movq	40(%r14), %rax
	testb	$16, 53(%rax)
	movq	40(%rax), %rcx
	jne	.L19643
	movzbl	52(%rax), %edi
	movl	%edi, 40(%rsp)
.L19643:
	movzbl	17(%rax), %eax
	jmp	.L19898
.L19911:
	movq	%rsi, %rdi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movq	%rax, %r13
	jmp	.L19638
.L19907:
	xorl	%eax, %eax
	call	abort
.LFE35:
.Lfe35:
	.size	expand_assignment,.Lfe35-expand_assignment
	.align 2
	.p2align 4,,15
.globl store_expr
	.type	store_expr,@function
store_expr:
.LFB36:
	pushq	%r15
.LCFI169:
	movl	%edx, %r15d
	pushq	%r14
.LCFI170:
	pushq	%r13
.LCFI171:
	pushq	%r12
.LCFI172:
	movq	%rsi, %r12
	pushq	%rbp
.LCFI173:
	movq	%rdi, %rbp
	pushq	%rbx
.LCFI174:
	subq	$56, %rsp
.LCFI175:
	.p2align 4,,7
.L19958:
	movzbl	16(%rbp), %eax
	xorl	%r14d, %r14d
	cmpb	$44, %al
	jne	.L19952
	movq	32(%rbp), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L19956
.L20041:
	movq	40(%rbp), %rbp
	jmp	.L19958
	.p2align 6,,7
.L19956:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdx
	movq	%rax, 16(%rbx)
	testq	%rdx, %rdx
	movq	%rdx, pending_chain(%rip)
	movq	%rdx, %rbx
	jne	.L19956
	jmp	.L20041
.L19952:
	cmpb	$48, %al
	je	.L20051
.L19960:
	testl	%r15d, %r15d
	je	.L19987
	cmpw	$55, (%r12)
	je	.L20052
.L19987:
	movzwl	(%r12), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L19995
	mov	%eax, %r8d
	jmp	*.L20004(,%r8,8)
	.section	.rodata
	.align 8
	.align 4
.L20004:
	.quad	.L19998
	.quad	.L19995
	.quad	.L19995
	.quad	.L19995
	.quad	.L20003
	.quad	.L19995
	.quad	.L19995
	.quad	.L19995
	.quad	.L20001
	.quad	.L20001
	.quad	.L19995
	.quad	.L20001
	.text
.L19998:
	movq	8(%r12), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %ebx
.L19997:
	testl	%ebx, %ebx
	je	.L19994
	movzbl	2(%r12), %eax
	cmpb	$16, %al
	je	.L20006
	testb	%al, %al
	jne	.L20053
.L20006:
	movzbl	2(%r12), %edx
	movq	%rbp, %rdi
	xorl	%esi, %esi
.L20048:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L20050:
	movq	%rax, %r13
.L20013:
	movl	$1, %r14d
.L19959:
	cmpq	%r12, %r13
	je	.L20014
	cmpb	$0, 16(%rbp)
	je	.L20014
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L20015
	cmpl	$55, %eax
	je	.L20054
.L20019:
	cmpl	$63, %eax
	je	.L20022
	cmpl	$66, %eax
	je	.L20022
.L20018:
	movzbl	2(%r13), %eax
	movzbl	2(%r12), %ecx
	cmpb	%cl, %al
	je	.L20025
	testb	%al, %al
	je	.L20025
	movq	8(%rbp), %r11
	movzbl	17(%r11), %ebp
	shrb	$6, %bpl
	movl	%ebp, %edx
	andl	$1, %edx
	testl	%r14d, %r14d
	je	.L20026
	movq	%r13, %rsi
	movzbl	%cl, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%rax, %r13
.L20037:
	movq	%r12, %rdi
	movq	%r13, %rsi
	call	emit_move_insn
.L20014:
	testl	%r14d, %r14d
	cmove	%r12, %r13
.L19951:
	addq	$56, %rsp
	movq	%r13, %rax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L20026:
	movq	%r12, %rdi
	movq	%r13, %rsi
	xorl	%eax, %eax
	call	convert_move
	jmp	.L20014
.L20025:
	cmpb	$16, %al
	jne	.L20037
	cmpb	$28, 16(%rbp)
	je	.L20055
	cmpb	$16, %al
	jne	.L20037
	movq	%rbp, %rdi
	xorl	%eax, %eax
	call	expr_size
	movq	%r13, %rsi
	movq	%r12, %rdi
	movq	8(%rbp), %r15
	movq	%rax, %rdx
	movl	48(%r15), %ecx
	shrl	$3, %ecx
.L20049:
	xorl	%eax, %eax
	call	emit_block_move
	jmp	.L20014
.L20055:
	xorl	%eax, %eax
	movq	%rbp, %rdi
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, %r15
	je	.L20056
.L20030:
	movl	$8, %edi
	call	size_int
	movl	$57, %edi
	movq	8(%rbp), %rcx
	movq	%rax, %rdx
	movq	32(%rcx), %rsi
	call	size_binop
	xorl	%esi, %esi
	movl	32(%rbp), %edi
	movq	%rax, %rbx
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%rbx, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movq	%r12, %rdi
	movq	$0, 40(%rsp)
	movq	8(%rbp), %rsi
	movq	%rax, %rbx
	movq	%rax, %rdx
	xorl	%eax, %eax
	movl	48(%rsi), %ecx
	movq	%r13, %rsi
	shrl	$3, %ecx
	call	emit_block_move
	cmpw	$46, (%rbx)
	je	.L20057
	movq	8(%r12), %rsi
	movl	$4, %edi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movq	%rbx, %rcx
	movl	$4, %edi
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	%rbx, %rcx
	movl	$4, %edi
	movq	%r15, %rdx
	movq	%rax, %r13
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 40(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L20033:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L20034
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%r13, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L20034:
	cmpq	$0, 40(%rsp)
	je	.L20014
	movq	40(%rsp), %rdi
	call	emit_label
	jmp	.L20014
.L20057:
	movq	8(%r12), %rdi
	movl	32(%rbp), %esi
	call	plus_constant_wide
	movq	%r15, %rdi
	movl	32(%rbp), %esi
	movq	%rax, %r13
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L20033
.L20056:
	movl	32(%rbp), %eax
	cmpl	%eax, 8(%r15)
	jge	.L20030
	movq	8(%rbp), %rdx
	movq	%r12, %rdi
	movq	%r13, %rsi
	movl	48(%rdx), %ecx
	movq	%r15, %rdx
	shrl	$3, %ecx
	jmp	.L20049
	.p2align 6,,7
.L20022:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L20018
.L20054:
	jne	.L20019
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L20018
.L20015:
	cmpq	$0, 16(%r12)
	jne	.L20023
	movq	8(%r12), %r12
	jmp	.L20018
.L20023:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L20024
	movq	%rsi, %r12
	jmp	.L20018
.L20024:
	movq	8(%r12), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L20018
.L20053:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	%rbp, %rdi
	movzbl	2(%r12), %edx
	movq	%rax, %rsi
	jmp	.L20048
.L19994:
	movl	(%r12), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L20058
	movzbl	2(%r12), %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	%rbp, %rdi
	movq	%r12, %rsi
	call	expand_expr
	cmpw	$51, (%r12)
	movq	%rax, %r13
	je	.L20059
.L20012:
	movzwl	(%r13), %edx
	leal	-56(%rdx), %r9d
	cmpw	$1, %r9w
	jbe	.L20013
	cmpw	$46, %dx
	je	.L20013
	cmpw	$47, %dx
	je	.L20013
	cmpw	$49, %dx
	je	.L20013
	cmpw	$113, %dx
	jne	.L19959
	jmp	.L20013
.L20059:
	cmpl	$63, 8(%r12)
	jle	.L19959
	jmp	.L20012
.L20058:
	movq	%rbp, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	8(%r12), %rdi
	movzbl	3(%r12), %edx
	movq	%rax, %r13
	movq	%rax, %rsi
	xorl	%eax, %eax
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	jmp	.L19951
.L20003:
	movl	$1, %ebx
	jmp	.L19997
.L19995:
	xorl	%ebx, %ebx
	jmp	.L19997
.L20001:
	movq	8(%r12), %rdi
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L20003
	movq	16(%r12), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L19997
	jmp	.L20003
.L20052:
	movzbl	2(%r12), %eax
	cmpb	$16, %al
	je	.L19987
	movl	cse_not_expected(%rip), %ebx
	xorl	%esi, %esi
	movzbl	%al, %edx
	movq	%rbp, %rdi
	testl	%ebx, %ebx
	cmove	%r12, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	call	expand_expr
	movq	%rax, %r13
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L20013
	testb	%al, %al
	je	.L20013
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L20050
	.p2align 6,,7
.L20051:
	cmpb	$16, 2(%r12)
	jne	.L19960
	call	gen_label_rtx
	movq	%rax, %r14
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, 48(%rsp)
	testq	%rbx, %rbx
	jne	.L19964
.L20043:
	movzwl	(%r12), %eax
	movq	%r12, %r13
	cmpl	$59, %eax
	je	.L19966
	cmpl	$55, %eax
	je	.L20060
.L19970:
	cmpl	$63, %eax
	je	.L19973
	cmpl	$66, %eax
	je	.L19973
.L19969:
	movq	32(%rbp), %rdi
	xorl	%eax, %eax
	movq	%r14, %rsi
	incl	inhibit_defer_pop(%rip)
	call	jumpifnot
	movq	40(%rbp), %rdi
	xorl	%eax, %eax
	movq	%r13, %rsi
	movl	%r15d, %edx
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L19979
.L20045:
	movq	48(%rsp), %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	%r14, %rdi
	call	emit_label
	xorl	%eax, %eax
	movl	%r15d, %edx
	movq	48(%rbp), %rdi
	movq	%r13, %rsi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L19984
.L20047:
	movq	48(%rsp), %rdi
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L19951
.L19984:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdi
	movq	%rax, 16(%rbx)
	testq	%rdi, %rdi
	movq	%rdi, pending_chain(%rip)
	movq	%rdi, %rbx
	jne	.L19984
	jmp	.L20047
.L19979:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rsi
	movq	%rax, 16(%rbx)
	testq	%rsi, %rsi
	movq	%rsi, pending_chain(%rip)
	movq	%rsi, %rbx
	jne	.L19979
	jmp	.L20045
.L19973:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L19969
.L20060:
	jne	.L19970
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L19969
	.p2align 6,,7
.L19966:
	cmpq	$0, 16(%r12)
	jne	.L19974
	movq	8(%r12), %r13
	jmp	.L19969
.L19974:
	movq	24(%r12), %rax
	testq	%rax, %rax
	je	.L19975
	movq	%rax, %r13
	jmp	.L19969
.L19975:
	movq	8(%r12), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	%rax, 24(%r13)
	movq	%rax, %rdi
	movq	8(%r12), %rsi
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r13
	jmp	.L19969
	.p2align 6,,7
.L19964:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdx
	movq	%rax, 16(%rbx)
	testq	%rdx, %rdx
	movq	%rdx, pending_chain(%rip)
	movq	%rdx, %rbx
	jne	.L19964
	jmp	.L20043
.LFE36:
.Lfe36:
	.size	store_expr,.Lfe36-store_expr
	.align 2
	.p2align 4,,15
.globl get_inner_reference
	.type	get_inner_reference,@function
get_inner_reference:
.LFB37:
	pushq	%r15
.LCFI176:
	xorl	%r15d, %r15d
	pushq	%r14
.LCFI177:
	pushq	%r13
.LCFI178:
	xorl	%r13d, %r13d
	pushq	%r12
.LCFI179:
	movq	%rdx, %r12
	movq	%r9, %rdx
	pushq	%rbp
.LCFI180:
	movq	%rdi, %rbp
	pushq	%rbx
.LCFI181:
	subq	$24, %rsp
.LCFI182:
	movq	%rcx, 8(%rsp)
	movq	%rsi, 16(%rsp)
	movq	%r8, (%rsp)
	movzbl	16(%rdi), %eax
	xorl	%ecx, %ecx
	movq	80(%rsp), %r14
	cmpb	$37, %al
	je	.L20730
	cmpb	$38, %al
	je	.L20731
	movq	8(%rdi), %rsi
	movzbl	44(%rsi), %r15d
	movq	16(%rsp), %rsi
	movslq	%r15d,%rbx
	movl	mode_size(,%rbx,4), %eax
	sall	$3, %eax
	movl	%eax, (%rsi)
	movq	8(%rdi), %rax
.L20726:
	movzbl	17(%rax), %eax
.L20725:
	shrb	$6, %al
	andl	$1, %eax
	testq	%rcx, %rcx
	movl	%eax, (%rdx)
	je	.L20694
	cmpb	$25, 16(%rcx)
	je	.L20695
	movq	16(%rsp), %rdx
	movl	$16, %r15d
	movl	$-1, (%rdx)
.L20694:
	movl	$0, (%r12)
	.p2align 4,,7
.L20722:
	movzbl	16(%rbp), %edx
	cmpb	$39, %dl
	je	.L20732
.L20700:
	leal	-37(%rdx), %edi
	cmpb	$1, %dil
	ja	.L20701
	cmpb	$37, %dl
	je	.L20733
	movq	48(%rbp), %rbx
.L20703:
	movzbl	16(%rbx), %eax
	cmpb	$53, %al
	je	.L20734
	cmpb	$25, %al
	je	.L20735
.L20712:
	testq	%r13, %r13
	je	.L20714
	movl	$8, %edi
	call	size_int
	movq	%rbx, %rsi
	movl	$58, %edi
	movq	%rax, %rdx
	call	size_binop
	movq	%r13, %rsi
	movl	$53, %edi
.L20727:
	movq	%rax, %rdx
	call	size_binop
	movq	%rax, %r13
.L20716:
	testb	$16, 17(%rbp)
	je	.L20721
	movl	$1, (%r14)
.L20721:
	movq	32(%rbp), %rbp
	jmp	.L20722
	.p2align 6,,7
.L20714:
	movl	$8, %edi
	call	size_int
	movq	%rbx, %rsi
	movl	$58, %edi
	jmp	.L20727
	.p2align 6,,7
.L20735:
	movl	24(%rbx), %eax
.L20728:
	addl	%eax, (%r12)
	jmp	.L20716
	.p2align 6,,7
.L20734:
	movq	32(%rbx), %rsi
	cmpb	$25, 16(%rsi)
	je	.L20736
	movq	40(%rbx), %rax
	cmpb	$25, 16(%rax)
	jne	.L20707
	movq	%rsi, %rbx
.L20706:
	movl	24(%rax), %eax
	addl	%eax, (%r12)
	jmp	.L20712
.L20736:
	movq	40(%rbx), %rbx
	movq	%rsi, %rax
	jmp	.L20706
	.p2align 6,,7
.L20733:
	movq	40(%rbp), %r8
	movq	72(%r8), %rbx
	jmp	.L20703
	.p2align 6,,7
.L20701:
	cmpb	$42, %dl
	je	.L20737
.L20717:
	cmpb	$103, %dl
	je	.L20716
	leal	-101(%rdx), %r10d
	cmpb	$1, %r10b
	ja	.L20698
	movq	32(%rbp), %rdx
	movq	8(%rbp), %rbx
	movq	8(%rdx), %rsi
	movzbl	44(%rsi), %r11d
	cmpb	%r11b, 44(%rbx)
	je	.L20716
.L20698:
	testl	%r15d, %r15d
	jne	.L20723
	movl	(%r12), %eax
	movq	16(%rsp), %r12
	movl	(%r12), %edi
	cltd
	idivl	%edi
	testl	%edx, %edx
	movl	%edx, %ebx
	je	.L20738
.L20723:
	movq	8(%rsp), %r14
	movq	(%rsp), %rcx
	movq	%rbp, %rax
	movl	%r15d, (%rcx)
	movq	%r13, (%r14)
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L20738:
	xorl	%edx, %edx
	xorl	%eax, %eax
	movl	$1, %esi
	call	mode_for_size
	movl	%eax, %r15d
	cmpl	$16, %eax
	cmove	%ebx, %r15d
	jmp	.L20723
	.p2align 6,,7
.L20737:
	movq	40(%rbp), %rcx
	cmpb	$25, 16(%rcx)
	jne	.L20717
	movq	8(%rbp), %r9
	movq	32(%r9), %rax
	cmpb	$25, 16(%rax)
	jne	.L20717
	movl	24(%rax), %eax
	imull	24(%rcx), %eax
	jmp	.L20728
	.p2align 6,,7
.L20732:
	movl	flag_volatile(%rip), %eax
	testl	%eax, %eax
	je	.L20700
	movl	$1, (%r14)
	movzbl	16(%rbp), %edx
	jmp	.L20700
.L20695:
	movl	24(%rcx), %eax
	movq	16(%rsp), %rcx
	movl	%eax, (%rcx)
	jmp	.L20694
.L20731:
	movzbl	17(%rdi), %eax
	movq	40(%rdi), %rcx
	jmp	.L20725
.L20730:
	movq	40(%rdi), %rax
	testb	$16, 53(%rax)
	movq	40(%rax), %rcx
	jne	.L20726
	movzbl	52(%rax), %r15d
	jmp	.L20726
.L20707:
	xorl	%eax, %eax
	call	abort
.LFE37:
.Lfe37:
	.size	get_inner_reference,.Lfe37-get_inner_reference
	.align 2
	.p2align 4,,15
.globl init_pending_stack_adjust
	.type	init_pending_stack_adjust,@function
init_pending_stack_adjust:
.LFB38:
	movl	$0, pending_stack_adjust(%rip)
	ret
.LFE38:
.Lfe38:
	.size	init_pending_stack_adjust,.Lfe38-init_pending_stack_adjust
	.align 2
	.p2align 4,,15
.globl clear_pending_stack_adjust
	.type	clear_pending_stack_adjust,@function
clear_pending_stack_adjust:
.LFB39:
	subq	$8, %rsp
.LCFI183:
	movl	flag_omit_frame_pointer(%rip), %eax
	testl	%eax, %eax
	je	.L21091
.L21087:
	addq	$8, %rsp
	ret
	.p2align 6,,7
.L21091:
	xorl	%eax, %eax
	call	get_frame_size
	testl	%eax, %eax
	jne	.L21089
	movl	current_function_calls_alloca(%rip), %eax
	testl	%eax, %eax
	jne	.L21089
	movl	current_function_outgoing_args_size(%rip), %eax
	testl	%eax, %eax
	je	.L21087
	.p2align 4,,7
.L21089:
	movq	current_function_decl(%rip), %rdx
	testb	$8, 53(%rdx)
	je	.L21090
	movl	flag_no_inline(%rip), %eax
	testl	%eax, %eax
	je	.L21087
.L21090:
	movl	flag_inline_functions(%rip), %edx
	testl	%edx, %edx
	jne	.L21087
	movl	$0, pending_stack_adjust(%rip)
	jmp	.L21087
.LFE39:
.Lfe39:
	.size	clear_pending_stack_adjust,.Lfe39-clear_pending_stack_adjust
	.align 2
	.p2align 4,,15
.globl expand_cleanups_to
	.type	expand_cleanups_to,@function
expand_cleanups_to:
.LFB40:
	movq	cleanups_this_call(%rip), %rax
	pushq	%rbx
.LCFI184:
	movq	%rdi, %rbx
	cmpq	%rdi, %rax
	je	.L21098
	.p2align 4,,7
.L21096:
	movq	32(%rax), %rdi
	xorl	%edx, %edx
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	cleanups_this_call(%rip), %rdx
	movq	(%rdx), %rax
	cmpq	%rbx, %rax
	movq	%rax, cleanups_this_call(%rip)
	jne	.L21096
.L21098:
	popq	%rbx
	ret
.LFE40:
.Lfe40:
	.size	expand_cleanups_to,.Lfe40-expand_cleanups_to
	.align 2
	.p2align 4,,15
.globl do_tablejump
	.type	do_tablejump,@function
do_tablejump:
.LFB41:
	pushq	%r13
.LCFI185:
	xorl	%r9d, %r9d
	xorl	%eax, %eax
	pushq	%r12
.LCFI186:
	movq	%rcx, %r13
	movl	%esi, %r12d
	pushq	%rbp
.LCFI187:
	xorl	%ecx, %ecx
	movq	%rdi, %rbp
	pushq	%rbx
.LCFI188:
	movq	%rbp, %rsi
	movq	%rdx, %rdi
	subq	$8, %rsp
.LCFI189:
	movq	%r8, %rbx
	movl	$98, %edx
	movl	%r12d, %r8d
	movl	$0, (%rsp)
	call	emit_cmp_insn
	movq	%rbx, %rdi
	call	gen_bltu
	movq	%rax, %rdi
	call	emit_jump_insn
	cmpl	$4, %r12d
	je	.L21101
	movq	%rbp, %rsi
	movl	$4, %edi
	movl	$1, %edx
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%rax, %rbp
.L21101:
	movl	mode_size+16(%rip), %edx
	xorl	%esi, %esi
	movl	$46, %edi
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rbp, %rdx
	movl	$4, %esi
	movq	%rax, %rcx
	movl	$66, %edi
	xorl	%eax, %eax
	call	gen_rtx
	movq	%r13, %rdx
	movl	$4, %esi
	movq	%rax, %rbp
	movl	$56, %edi
	xorl	%eax, %eax
	call	gen_rtx
	movq	%rbp, %rdx
	movl	$4, %esi
	movq	%rax, %rcx
	movl	$63, %edi
	xorl	%eax, %eax
	call	gen_rtx
	movl	$4, %edi
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	memory_address_noforce
	movl	$4, %edi
	movq	%rax, %r12
	call	gen_reg_rtx
	movl	$4, %esi
	movq	%rax, %rbp
	movl	$55, %edi
	movq	%r12, %rdx
	xorl	%eax, %eax
	call	gen_rtx
	xorl	%edx, %edx
	movq	%rbp, %rdi
	orb	$4, 3(%rax)
	movq	%rax, %rsi
	xorl	%eax, %eax
	call	convert_move
	movq	%rbp, %rdi
	movq	%r13, %rsi
	call	gen_tablejump
	movq	%rax, %rdi
	call	emit_jump_insn
	movl	flag_pic(%rip), %eax
	testl	%eax, %eax
	je	.L21103
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	ret
	.p2align 6,,7
.L21103:
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	jmp	emit_barrier
.LFE41:
.Lfe41:
	.size	do_tablejump,.Lfe41-do_tablejump
	.comm	cse_not_expected,4,4
	.comm	inhibit_defer_pop,4,4
	.comm	pending_stack_adjust,4,4
	.comm	cleanups_this_call,8,8
	.local	saveregs_value
	.comm	saveregs_value,8,8
	.align 2
	.p2align 4,,15
	.type	store_field,@function
store_field:
.LFB42:
	pushq	%r15
.LCFI190:
	pushq	%r14
.LCFI191:
	movl	%edx, %r14d
	pushq	%r13
.LCFI192:
	pushq	%r12
.LCFI193:
	movl	%esi, %r12d
	pushq	%rbp
.LCFI194:
	movq	%rdi, %rbp
	pushq	%rbx
.LCFI195:
	movl	%ecx, %ebx
	subq	$120, %rsp
.LCFI196:
	cmpl	$31, %esi
	movl	176(%rsp), %eax
	movq	%r8, 112(%rsp)
	movl	%r9d, 108(%rsp)
	movl	184(%rsp), %r15d
	movl	$0, 44(%rsp)
	movl	%eax, 104(%rsp)
	movl	192(%rsp), %eax
	movl	%eax, 100(%rsp)
	jg	.L20491
	movl	$1, %eax
	movl	%esi, %ecx
	sall	%cl, %eax
	decl	%eax
	movl	%eax, 44(%rsp)
.L20491:
	cmpl	$16, %ebx
	je	.L21126
.L20492:
	testl	%ebx, %ebx
	je	.L20496
	cmpl	$16, %ebx
	je	.L20497
	movslq	%ebx,%rsi
	cmpb	$0, direct_store(%rsi)
	je	.L20496
.L20497:
	movl	(%rbp), %eax
	cmpw	$51, %ax
	je	.L20496
	cmpw	$53, %ax
	je	.L20496
	movl	108(%rsp), %r10d
	movq	8(%rbp), %rdi
	testl	%r10d, %r10d
	je	.L20503
	movzwl	(%rdi), %edx
	cmpw	$51, %dx
	je	.L20503
	leal	-56(%rdx), %r11d
	cmpw	$1, %r11w
	jbe	.L20503
	cmpw	$46, %dx
	je	.L20503
	cmpw	$47, %dx
	je	.L20503
	cmpw	$49, %dx
	je	.L20503
	cmpw	$113, %dx
	je	.L20503
	cmpw	$63, %dx
	je	.L21127
.L20504:
	xorl	%eax, %eax
	call	copy_to_reg
	movq	%rax, %rdi
	.p2align 4,,7
.L20503:
	cmpl	$-1, %r14d
	leal	7(%r14), %ecx
	cmovle	%ecx, %r14d
	sarl	$3, %r14d
	movl	%r14d, %esi
	call	plus_constant_wide
	movl	%ebx, %esi
	movq	%rbp, %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	change_address
	orb	$16, 3(%rax)
	movq	%rax, %rbp
	movl	108(%rsp), %r13d
	testl	%r13d, %r13d
	setne	%dl
	xorl	%r15d, %r15d
	movzbl	%dl, %r13d
	movq	112(%rsp), %rdx
	movzbl	16(%rdx), %eax
	cmpb	$44, %al
	je	.L21128
	cmpb	$48, %al
	je	.L21129
.L20515:
	testl	%r13d, %r13d
	je	.L20572
	cmpw	$55, (%rbp)
	je	.L21130
.L20572:
	movzwl	(%rbp), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L20580
	mov	%eax, %edi
	jmp	*.L20622(,%rdi,8)
	.section	.rodata
	.align 8
	.align 4
.L20622:
	.quad	.L20583
	.quad	.L20580
	.quad	.L20580
	.quad	.L20580
	.quad	.L20599
	.quad	.L20580
	.quad	.L20580
	.quad	.L20580
	.quad	.L20597
	.quad	.L20597
	.quad	.L20580
	.quad	.L20597
	.text
.L20583:
	movq	8(%rbp), %rbx
	movzwl	(%rbx), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L20580
	mov	%eax, %r8d
	jmp	*.L20593(,%r8,8)
	.section	.rodata
	.align 8
	.align 4
.L20593:
	.quad	.L20587
	.quad	.L20580
	.quad	.L20580
	.quad	.L20580
	.quad	.L20599
	.quad	.L20580
	.quad	.L20580
	.quad	.L20580
	.quad	.L20590
	.quad	.L20590
	.quad	.L20580
	.quad	.L20590
	.text
.L20587:
	movq	8(%rbx), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %r12d
	.p2align 4,,7
.L20582:
	testl	%r12d, %r12d
	je	.L20579
	movzbl	2(%rbp), %eax
	cmpb	$16, %al
	je	.L20624
	testb	%al, %al
	jne	.L21131
.L20624:
	movzbl	2(%rbp), %edx
	movq	112(%rsp), %rdi
	xorl	%esi, %esi
.L21112:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L21119:
	movq	%rax, %r12
.L20631:
	movl	$1, %r15d
.L20514:
	cmpq	%rbp, %r12
	je	.L20632
	movq	112(%rsp), %rax
	cmpb	$0, 16(%rax)
	je	.L20632
	movzwl	(%rbp), %eax
	cmpl	$59, %eax
	je	.L20633
	cmpl	$55, %eax
	je	.L21132
.L20637:
	cmpl	$63, %eax
	je	.L20650
	cmpl	$66, %eax
	je	.L20650
.L20636:
	movzbl	2(%r12), %eax
	movzbl	2(%rbp), %ecx
	cmpb	%cl, %al
	je	.L20673
	testb	%al, %al
	je	.L20673
	movq	112(%rsp), %rdi
	movq	8(%rdi), %rsi
	movzbl	17(%rsi), %r11d
	shrb	$6, %r11b
	movl	%r11d, %edx
	andl	$1, %edx
	testl	%r15d, %r15d
	je	.L20674
	movq	%r12, %rsi
	movzbl	%cl, %edi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%rax, %r12
.L20685:
	movq	%rbp, %rdi
	movq	%r12, %rsi
	call	emit_move_insn
.L20632:
	testl	%r15d, %r15d
	cmove	%rbp, %r12
.L20513:
	movq	%r12, %rbp
.L20490:
	addq	$120, %rsp
	movq	%rbp, %rax
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L20674:
	movq	%rbp, %rdi
	movq	%r12, %rsi
	xorl	%eax, %eax
	call	convert_move
	jmp	.L20632
.L20673:
	cmpb	$16, %al
	jne	.L20685
	movq	112(%rsp), %rcx
	cmpb	$28, 16(%rcx)
	je	.L21133
	cmpb	$16, %al
	jne	.L20685
	movq	112(%rsp), %rdi
	xorl	%eax, %eax
	call	expr_size
	movq	%rbp, %rdi
	movq	112(%rsp), %rsi
	movq	%rax, %rdx
	movq	8(%rsi), %r13
	movq	%r12, %rsi
	movl	48(%r13), %ecx
	shrl	$3, %ecx
.L21113:
	xorl	%eax, %eax
	call	emit_block_move
	jmp	.L20632
.L21133:
	xorl	%eax, %eax
	movq	%rcx, %rdi
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, %r13
	je	.L21134
.L20678:
	movl	$8, %edi
	call	size_int
	movl	$57, %edi
	movq	112(%rsp), %rbx
	movq	%rax, %rdx
	movq	8(%rbx), %r10
	movq	32(%r10), %rsi
	call	size_binop
	xorl	%esi, %esi
	movq	112(%rsp), %rdx
	movq	%rax, %r14
	movl	32(%rdx), %edi
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%r14, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%r14d, %r14d
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movq	%r12, %rsi
	movq	%rbp, %rdi
	movq	112(%rsp), %rcx
	movq	%rax, %rbx
	movq	%rax, %rdx
	xorl	%eax, %eax
	movq	8(%rcx), %r9
	movl	48(%r9), %ecx
	shrl	$3, %ecx
	call	emit_block_move
	cmpw	$46, (%rbx)
	je	.L21135
	movq	8(%rbp), %rsi
	movl	$4, %edi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movq	%rbx, %rcx
	movl	$4, %edi
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	%rbx, %rcx
	movl	$4, %edi
	movq	%r13, %rdx
	movq	%rax, %r12
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, %r14
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L20681:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L20682
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%r12, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L20682:
	testq	%r14, %r14
	je	.L20632
	movq	%r14, %rdi
	call	emit_label
	jmp	.L20632
.L21135:
	movq	112(%rsp), %r12
	movq	8(%rbp), %rdi
	movl	32(%r12), %esi
	call	plus_constant_wide
	movq	%r13, %rdi
	movq	112(%rsp), %r11
	movq	%rax, %r12
	movl	32(%r11), %esi
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L20681
.L21134:
	movq	112(%rsp), %rdx
	movl	32(%rdx), %eax
	cmpl	%eax, 8(%r13)
	jge	.L20678
	movq	8(%rdx), %r8
	movq	%rbp, %rdi
	movq	%r12, %rsi
	movq	%r13, %rdx
	movl	48(%r8), %ecx
	shrl	$3, %ecx
	jmp	.L21113
	.p2align 6,,7
.L20650:
	leaq	8(%rbp), %rsi
	movq	%rsi, 56(%rsp)
	movq	8(%rbp), %r13
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L20651
	cmpl	$55, %eax
	je	.L21136
.L20655:
	cmpl	$63, %eax
	je	.L20658
	cmpl	$66, %eax
	je	.L20658
.L20654:
	movq	56(%rsp), %r9
	movq	%r13, (%r9)
	leaq	16(%rbp), %r13
	movq	%r13, 48(%rsp)
	movq	16(%rbp), %r13
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L20661
	cmpl	$55, %eax
	je	.L21137
.L20665:
	cmpl	$63, %eax
	je	.L20668
	cmpl	$66, %eax
	je	.L20668
.L20664:
	movq	48(%rsp), %rax
	movq	%r13, (%rax)
	jmp	.L20636
.L20668:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L20664
.L21137:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L20662
	movq	8(%r13), %r14
	cmpw	$59, (%r14)
	je	.L21138
.L20662:
	cmpl	$55, %eax
	jne	.L20665
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L20664
.L21138:
	movq	8(%r14), %r10
	movq	%r10, 8(%r13)
	cmpq	$0, 16(%r14)
	je	.L20664
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r13
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L20664
	.p2align 6,,7
.L20661:
	cmpq	$0, 16(%r13)
	jne	.L20669
	movq	8(%r13), %r13
	jmp	.L20664
.L20669:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L20670
	movq	%rsi, %r13
	jmp	.L20664
.L20670:
	movq	8(%r13), %rbx
	movzbl	2(%rbx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L20664
.L20658:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L20654
.L21136:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L20652
	movq	8(%r13), %r14
	cmpw	$59, (%r14)
	je	.L21139
.L20652:
	cmpl	$55, %eax
	jne	.L20655
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L20654
.L21139:
	movq	8(%r14), %rdi
	movq	%rdi, 8(%r13)
	cmpq	$0, 16(%r14)
	je	.L20654
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r13
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L20654
	.p2align 6,,7
.L20651:
	cmpq	$0, 16(%r13)
	jne	.L20659
	movq	8(%r13), %r13
	jmp	.L20654
.L20659:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L20660
	movq	%rsi, %r13
	jmp	.L20654
.L20660:
	movq	8(%r13), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L20654
	.p2align 6,,7
.L21132:
	jne	.L20637
	leaq	8(%rbp), %r14
	movq	%r14, 64(%rsp)
	movq	8(%rbp), %r13
	movzwl	(%r13), %eax
	cmpl	$59, %eax
	je	.L20638
	cmpl	$55, %eax
	je	.L21140
.L20642:
	cmpl	$63, %eax
	je	.L20645
	cmpl	$66, %eax
	je	.L20645
.L20641:
	movq	64(%rsp), %rcx
	movq	%r13, (%rcx)
	jmp	.L20636
.L20645:
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r13), %rdi
	movq	%rax, 8(%r13)
	call	protect_from_queue
	movq	%rax, 16(%r13)
	jmp	.L20641
.L21140:
	movzbl	2(%r13), %edx
	cmpb	$16, %dl
	je	.L20639
	movq	8(%r13), %r14
	cmpw	$59, (%r14)
	je	.L21141
.L20639:
	cmpl	$55, %eax
	jne	.L20642
	movq	8(%r13), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r13)
	jmp	.L20641
.L21141:
	movq	8(%r14), %r11
	movq	%r11, 8(%r13)
	cmpq	$0, 16(%r14)
	je	.L20641
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r13, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r13
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L20641
	.p2align 6,,7
.L20638:
	cmpq	$0, 16(%r13)
	jne	.L20646
	movq	8(%r13), %r13
	jmp	.L20641
.L20646:
	movq	24(%r13), %rsi
	testq	%rsi, %rsi
	je	.L20647
	movq	%rsi, %r13
	jmp	.L20641
.L20647:
	movq	8(%r13), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r13), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r13)
	call	gen_move_insn
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r13), %r13
	jmp	.L20641
	.p2align 6,,7
.L20633:
	cmpq	$0, 16(%rbp)
	jne	.L20671
	movq	8(%rbp), %rbp
	jmp	.L20636
.L20671:
	movq	24(%rbp), %rax
	testq	%rax, %rax
	je	.L20672
	movq	%rax, %rbp
	jmp	.L20636
.L20672:
	movq	8(%rbp), %r14
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	8(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbp)
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbp), %rbp
	jmp	.L20636
.L21131:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	112(%rsp), %rdi
	movzbl	2(%rbp), %edx
	movq	%rax, %rsi
	jmp	.L21112
.L20579:
	movl	(%rbp), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L21142
	movzbl	2(%rbp), %edx
	movq	112(%rsp), %rdi
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	%rbp, %rsi
	call	expand_expr
	cmpw	$51, (%rbp)
	movq	%rax, %r12
	je	.L21143
.L20630:
	movzwl	(%r12), %edx
	leal	-56(%rdx), %ebx
	cmpw	$1, %bx
	jbe	.L20631
	cmpw	$46, %dx
	je	.L20631
	cmpw	$47, %dx
	je	.L20631
	cmpw	$49, %dx
	je	.L20631
	cmpw	$113, %dx
	jne	.L20514
	jmp	.L20631
.L21143:
	cmpl	$63, 8(%rbp)
	jle	.L20514
	jmp	.L20630
.L21142:
	movq	112(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	8(%rbp), %rdi
	movzbl	3(%rbp), %edx
	movq	%rax, %r12
	movq	%rax, %rsi
	xorl	%eax, %eax
	shrb	$2, %dl
	andl	$1, %edx
	call	convert_move
	jmp	.L20513
.L20599:
	movl	$1, %r12d
	jmp	.L20582
	.p2align 6,,7
.L20580:
	xorl	%r12d, %r12d
	jmp	.L20582
.L20590:
	movq	8(%rbx), %rdi
	xorl	%eax, %eax
	xorl	%r12d, %r12d
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L20599
	movq	16(%rbx), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
.L21118:
	je	.L20582
	jmp	.L20599
.L20597:
	movq	8(%rbp), %rbx
	xorl	%r12d, %r12d
	movzwl	(%rbx), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L20600
	mov	%eax, %r9d
	jmp	*.L20609(,%r9,8)
	.section	.rodata
	.align 8
	.align 4
.L20609:
	.quad	.L20603
	.quad	.L20600
	.quad	.L20600
	.quad	.L20600
	.quad	.L20608
	.quad	.L20600
	.quad	.L20600
	.quad	.L20600
	.quad	.L20606
	.quad	.L20606
	.quad	.L20600
	.quad	.L20606
	.text
.L20603:
	movq	8(%rbx), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %r13d
.L20602:
	testl	%r13d, %r13d
	jne	.L20599
	movq	16(%rbp), %rbx
	movzwl	(%rbx), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L20611
	mov	%eax, %r10d
	jmp	*.L20620(,%r10,8)
	.section	.rodata
	.align 8
	.align 4
.L20620:
	.quad	.L20614
	.quad	.L20611
	.quad	.L20611
	.quad	.L20611
	.quad	.L20619
	.quad	.L20611
	.quad	.L20611
	.quad	.L20611
	.quad	.L20617
	.quad	.L20617
	.quad	.L20611
	.quad	.L20617
	.text
.L20614:
	movq	8(%rbx), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %r13d
.L20613:
	testl	%r13d, %r13d
	jmp	.L21118
.L20619:
	movl	$1, %r13d
	jmp	.L20613
.L20611:
	xorl	%r13d, %r13d
	jmp	.L20613
.L20617:
	movq	8(%rbx), %rdi
	xorl	%eax, %eax
	xorl	%r13d, %r13d
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L20619
	movq	16(%rbx), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L20613
	jmp	.L20619
	.p2align 6,,7
.L20608:
	movl	$1, %r13d
	jmp	.L20602
.L20600:
	xorl	%r13d, %r13d
	jmp	.L20602
.L20606:
	movq	8(%rbx), %rdi
	xorl	%eax, %eax
	xorl	%r13d, %r13d
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L20608
	movq	16(%rbx), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L20602
	jmp	.L20608
	.p2align 6,,7
.L21130:
	movzbl	2(%rbp), %eax
	cmpb	$16, %al
	je	.L20572
	movl	cse_not_expected(%rip), %r12d
	movq	112(%rsp), %rdi
	xorl	%esi, %esi
	movzbl	%al, %edx
	testl	%r12d, %r12d
	cmove	%rbp, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	call	expand_expr
	movq	%rax, %r12
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L20631
	testb	%al, %al
	je	.L20631
	movq	%r12, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L21119
	.p2align 6,,7
.L21129:
	cmpb	$16, 2(%rbp)
	jne	.L20515
	call	gen_label_rtx
	movq	%rax, 88(%rsp)
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, 80(%rsp)
	testq	%rbx, %rbx
	jne	.L20519
.L21107:
	movzwl	(%rbp), %eax
	movq	%rbp, %r12
	cmpl	$59, %eax
	je	.L20521
	cmpl	$55, %eax
	je	.L21144
.L20525:
	cmpl	$63, %eax
	je	.L20538
	cmpl	$66, %eax
	je	.L20538
.L20524:
	movq	112(%rsp), %rdx
	movq	88(%rsp), %rsi
	xorl	%eax, %eax
	incl	inhibit_defer_pop(%rip)
	movq	32(%rdx), %rdi
	call	jumpifnot
	movq	112(%rsp), %r11
	xorl	%eax, %eax
	movq	%r12, %rsi
	movl	%r13d, %edx
	movq	40(%r11), %rdi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L20564
.L21109:
	movq	80(%rsp), %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	88(%rsp), %rdi
	call	emit_label
	xorl	%eax, %eax
	movl	%r13d, %edx
	movq	112(%rsp), %rsi
	movq	48(%rsi), %rdi
	movq	%r12, %rsi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L20569
.L21111:
	movq	80(%rsp), %rdi
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L20513
.L20569:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r13
	movq	%rax, 16(%rbx)
	testq	%r13, %r13
	movq	%r13, pending_chain(%rip)
	movq	%r13, %rbx
	jne	.L20569
	jmp	.L21111
.L20564:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rcx
	movq	%rax, 16(%rbx)
	testq	%rcx, %rcx
	movq	%rcx, pending_chain(%rip)
	movq	%rcx, %rbx
	jne	.L20564
	jmp	.L21109
.L20538:
	leaq	8(%rbp), %rbx
	movq	%rbx, 72(%rsp)
	movq	8(%rbp), %r14
	movzwl	(%r14), %eax
	cmpl	$59, %eax
	je	.L20539
	cmpl	$55, %eax
	je	.L21145
.L20543:
	cmpl	$63, %eax
	je	.L20546
	cmpl	$66, %eax
	je	.L20546
.L20542:
	movq	72(%rsp), %r9
	leaq	16(%rbp), %r15
	movq	%r14, (%r9)
	movq	16(%rbp), %rbp
.L21125:
	movzwl	(%rbp), %eax
	cmpl	$59, %eax
	je	.L20549
	cmpl	$55, %eax
	je	.L21146
.L20553:
	cmpl	$63, %eax
	je	.L20556
	cmpl	$66, %eax
	je	.L20556
.L20552:
	movq	%rbp, (%r15)
	jmp	.L20524
.L20556:
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%rbp), %rdi
	movq	%rax, 8(%rbp)
	call	protect_from_queue
	movq	%rax, 16(%rbp)
	jmp	.L20552
.L21146:
	movzbl	2(%rbp), %edx
	cmpb	$16, %dl
	je	.L20550
	movq	8(%rbp), %r14
	cmpw	$59, (%r14)
	je	.L21147
.L20550:
	cmpl	$55, %eax
	jne	.L20553
	movq	8(%rbp), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%rbp)
	jmp	.L20552
.L21147:
	movq	8(%r14), %r10
	movq	%r10, 8(%rbp)
	cmpq	$0, 16(%r14)
	je	.L20552
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%rbp, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %rbp
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L20552
	.p2align 6,,7
.L20549:
	cmpq	$0, 16(%rbp)
	jne	.L20557
	movq	8(%rbp), %rbp
	jmp	.L20552
.L20557:
	movq	24(%rbp), %rsi
	testq	%rsi, %rsi
	je	.L20558
	movq	%rsi, %rbp
	jmp	.L20552
.L20558:
	movq	8(%rbp), %r14
	movzbl	2(%r14), %edi
	call	gen_reg_rtx
	movq	8(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbp)
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbp), %rbp
	jmp	.L20552
.L20546:
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r14), %rdi
	movq	%rax, 8(%r14)
	call	protect_from_queue
	movq	%rax, 16(%r14)
	jmp	.L20542
.L21145:
	movzbl	2(%r14), %edx
	cmpb	$16, %dl
	je	.L20540
	movq	8(%r14), %r15
	cmpw	$59, (%r15)
	je	.L21148
.L20540:
	cmpl	$55, %eax
	jne	.L20543
	movq	8(%r14), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r14)
	jmp	.L20542
.L21148:
	movq	8(%r15), %r8
	movq	%r8, 8(%r14)
	cmpq	$0, 16(%r15)
	je	.L20542
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r14
	movq	16(%r15), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L20542
	.p2align 6,,7
.L20539:
	cmpq	$0, 16(%r14)
	jne	.L20547
	movq	8(%r14), %r14
	jmp	.L20542
.L20547:
	movq	24(%r14), %rsi
	testq	%rsi, %rsi
	je	.L20548
	movq	%rsi, %r14
	jmp	.L20542
.L20548:
	movq	8(%r14), %r15
	movzbl	2(%r15), %edi
	call	gen_reg_rtx
	movq	8(%r14), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r14)
	call	gen_move_insn
	movq	16(%r14), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r14), %r14
	jmp	.L20542
	.p2align 6,,7
.L21144:
	jne	.L20525
	leaq	8(%rbp), %r15
	movq	8(%rbp), %rbp
	jmp	.L21125
.L20521:
	cmpq	$0, 16(%rbp)
	jne	.L20559
	movq	8(%rbp), %r12
	jmp	.L20524
.L20559:
	movq	24(%rbp), %rax
	testq	%rax, %rax
	je	.L20560
	movq	%rax, %r12
	jmp	.L20524
.L20560:
	movq	8(%rbp), %rbp
	movzbl	2(%rbp), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L20524
	.p2align 6,,7
.L20519:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdi
	movq	%rax, 16(%rbx)
	testq	%rdi, %rdi
	movq	%rdi, pending_chain(%rip)
	movq	%rdi, %rbx
	jne	.L20519
	jmp	.L21107
.L21128:
	movq	32(%rdx), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L20511
.L21105:
	movq	112(%rsp), %rax
	movq	%rbp, %rsi
	movl	%r13d, %edx
	movq	40(%rax), %rdi
	xorl	%eax, %eax
	call	store_expr
	movq	%rax, %r12
	jmp	.L20513
	.p2align 6,,7
.L20511:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rsi
	movq	%rax, 16(%rbx)
	testq	%rsi, %rsi
	movq	%rsi, pending_chain(%rip)
	movq	%rsi, %rbx
	jne	.L20511
	jmp	.L21105
.L21127:
	movq	16(%rdi), %r12
	cmpw	$46, (%r12)
	jne	.L20504
	movq	8(%rdi), %rax
	cmpq	virtual_incoming_args_rtx(%rip), %rax
	je	.L20503
	cmpq	virtual_stack_vars_rtx(%rip), %rax
	jne	.L20504
	jmp	.L20503
	.p2align 6,,7
.L20496:
	movq	112(%rsp), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movl	%r15d, %r9d
	movl	%ebx, %ecx
	movl	100(%rsp), %edi
	movq	%rax, %r8
	movq	%rax, %r13
	movl	%r12d, %esi
	movl	%r14d, %edx
	xorl	%eax, %eax
	movl	%edi, (%rsp)
	movq	%rbp, %rdi
	call	store_bit_field
	movl	108(%rsp), %eax
	testl	%eax, %eax
	je	.L20498
	movl	44(%rsp), %ebx
	testl	%ebx, %ebx
	je	.L20499
	movl	(%rbp), %eax
	andl	$134283263, %eax
	cmpl	$134217783, %eax
	je	.L20499
	movl	104(%rsp), %ebp
	testl	%ebp, %ebp
	je	.L20500
	movl	44(%rsp), %edx
	movl	$46, %edi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	gen_rtx
	addq	$120, %rsp
	xorl	%edx, %edx
	popq	%rbx
	popq	%rbp
	popq	%r12
	movq	%r13, %rdi
	movq	%rax, %rsi
	xorl	%eax, %eax
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	expand_and
.L20500:
	movzbl	2(%r13), %r15d
	testl	%r15d, %r15d
	cmove	108(%rsp), %r15d
	xorl	%esi, %esi
	movslq	%r15d,%r8
	movl	mode_size(,%r8,4), %edi
	sall	$3, %edi
	subl	%r12d, %edi
	call	build_int_2_wide
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	%rax, %r14
	movl	%r15d, %esi
	movq	%r13, %rdx
	movq	%rax, %rcx
	movl	$77, %edi
	xorl	%eax, %eax
	call	expand_shift
	addq	$120, %rsp
	xorl	%r9d, %r9d
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	movq	%r14, %rcx
	movl	%r15d, %esi
	movq	%rax, %rdx
	popq	%r14
	popq	%r15
	movl	$78, %edi
	xorl	%r8d, %r8d
	xorl	%eax, %eax
	jmp	expand_shift
	.p2align 6,,7
.L20499:
	movl	100(%rsp), %r9d
	movl	%r15d, 184(%rsp)
	movl	$0, 176(%rsp)
	movl	104(%rsp), %ecx
	movq	%rbp, %rdi
	movl	%r12d, %esi
	movl	%r14d, %edx
	xorl	%r8d, %r8d
	xorl	%eax, %eax
	movl	%r9d, 192(%rsp)
	movl	108(%rsp), %r9d
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	extract_bit_field
	.p2align 6,,7
.L20498:
	movq	const0_rtx(%rip), %rbp
	jmp	.L20490
	.p2align 6,,7
.L21126:
	movl	(%rbp), %eax
	cmpw	$51, %ax
	je	.L20493
	cmpw	$53, %ax
	jne	.L20492
.L20493:
	movzbl	2(%rbp), %edi
	xorl	%edx, %edx
	movslq	%edi,%rcx
	movl	mode_size(,%rcx,4), %esi
	call	assign_stack_temp
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	copy_rtx
	movb	$16, 2(%rax)
	movq	%rax, %r13
	movzbq	2(%rbp), %rdx
	movl	mode_size(,%rdx,4), %eax
	sall	$3, %eax
	cmpl	%eax, %r12d
	je	.L20494
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	call	emit_move_insn
.L20494:
	movl	100(%rsp), %eax
	movq	112(%rsp), %r8
	movq	%r13, %rdi
	movl	%r12d, %esi
	movl	%r14d, %edx
	movl	$16, %ecx
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	%r15d, 8(%rsp)
	movl	%eax, 16(%rsp)
	xorl	%eax, %eax
	call	store_field
	movq	%rbx, %rsi
	movq	%rbp, %rdi
	call	emit_move_insn
	jmp	.L20490
.LFE42:
.Lfe42:
	.size	store_field,.Lfe42-store_field
	.local	direct_load
	.comm	direct_load,21,16
	.local	direct_store
	.comm	direct_store,21,16
	.local	movstr_optab
	.comm	movstr_optab,84,32
	.local	pending_chain
	.comm	pending_chain,8,8
	.align 2
	.p2align 4,,15
	.type	queued_subexp_p,@function
queued_subexp_p:
.LFB43:
	subq	$16, %rsp
.LCFI197:
	movq	%rbx, (%rsp)
.LCFI198:
	movq	%rbp, 8(%rsp)
.LCFI199:
	movq	%rdi, %rbx
.L19165:
	movzwl	(%rbx), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L19162
	mov	%eax, %edx
	jmp	*.L19171(,%rdx,8)
	.section	.rodata
	.align 8
	.align 4
.L19171:
	.quad	.L19164
	.quad	.L19162
	.quad	.L19162
	.quad	.L19162
	.quad	.L19170
	.quad	.L19162
	.quad	.L19162
	.quad	.L19162
	.quad	.L19168
	.quad	.L19168
	.quad	.L19162
	.quad	.L19168
	.text
	.p2align 6,,7
.L19164:
	movq	8(%rbx), %rbx
	jmp	.L19165
	.p2align 6,,7
.L19170:
	movl	$1, %ebp
.L19161:
	movl	%ebp, %eax
	movq	(%rsp), %rbx
	movq	8(%rsp), %rbp
	addq	$16, %rsp
	ret
	.p2align 6,,7
.L19162:
	xorl	%ebp, %ebp
	jmp	.L19161
	.p2align 6,,7
.L19168:
	movq	8(%rbx), %rdi
	xorl	%eax, %eax
	xorl	%ebp, %ebp
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L19170
	movq	16(%rbx), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L19170
	jmp	.L19161
.LFE43:
.Lfe43:
	.size	queued_subexp_p,.Lfe43-queued_subexp_p
	.align 2
	.p2align 4,,15
	.type	save_noncopied_parts,@function
save_noncopied_parts:
.LFB44:
	pushq	%r15
.LCFI200:
	movq	%rsi, %r15
	pushq	%r14
.LCFI201:
	pushq	%r13
.LCFI202:
	pushq	%r12
.LCFI203:
	pushq	%rbp
.LCFI204:
	pushq	%rbx
.LCFI205:
	subq	$152, %rsp
.LCFI206:
	testq	%rsi, %rsi
	movq	%rdi, 144(%rsp)
	movq	$0, 32(%rsp)
	je	.L21150
	.p2align 4,,7
.L20928:
	movq	32(%r15), %rcx
	cmpb	$3, 16(%rcx)
	je	.L21166
	movq	8(%rcx), %rbp
	movq	144(%rsp), %rdx
	movl	$37, %edi
	xorl	%eax, %eax
	movq	%rbp, %rsi
	call	build
	movq	%rbp, %rdi
	movq	%rax, %r12
	call	int_size_in_bytes
	xorl	%edx, %edx
	movzbl	44(%rbp), %edi
	movl	%eax, %esi
	call	assign_stack_temp
	movzbl	44(%rbp), %edi
	movq	8(%rax), %rsi
	movq	%rax, %rbx
	xorl	%eax, %eax
	call	memory_address_p
	testl	%eax, %eax
	je	.L21167
.L20746:
	movq	%rbp, %rsi
	xorl	%edx, %edx
	movq	%rbx, %rcx
	movl	$105, %edi
	xorl	%eax, %eax
	call	build
	movq	32(%rsp), %rdx
	movq	%r12, %rdi
	movq	%rax, %rsi
	call	tree_cons
	movq	%rax, 32(%rsp)
	movq	32(%rax), %rcx
	movq	24(%rax), %r14
	movl	$0, 52(%rsp)
	movzbl	16(%r14), %eax
	movq	40(%rcx), %rbp
	cmpb	$44, %al
	je	.L21168
	cmpb	$48, %al
	je	.L21169
.L20755:
	xorl	%edi, %edi
	testl	%edi, %edi
	je	.L20812
	cmpw	$55, (%rbp)
	je	.L21170
.L20812:
	movzwl	(%rbp), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L20820
	mov	%eax, %r10d
	jmp	*.L20862(,%r10,8)
	.section	.rodata
	.align 8
	.align 4
.L20862:
	.quad	.L20823
	.quad	.L20820
	.quad	.L20820
	.quad	.L20820
	.quad	.L20839
	.quad	.L20820
	.quad	.L20820
	.quad	.L20820
	.quad	.L20837
	.quad	.L20837
	.quad	.L20820
	.quad	.L20837
	.text
.L20823:
	movq	8(%rbp), %rbx
	movzwl	(%rbx), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L20820
	mov	%eax, %r11d
	jmp	*.L20833(,%r11,8)
	.section	.rodata
	.align 8
	.align 4
.L20833:
	.quad	.L20827
	.quad	.L20820
	.quad	.L20820
	.quad	.L20820
	.quad	.L20839
	.quad	.L20820
	.quad	.L20820
	.quad	.L20820
	.quad	.L20830
	.quad	.L20830
	.quad	.L20820
	.quad	.L20830
	.text
.L20827:
	movq	8(%rbx), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %r12d
	.p2align 4,,7
.L20822:
	testl	%r12d, %r12d
	je	.L20819
	movzbl	2(%rbp), %eax
	cmpb	$16, %al
	je	.L20864
	testb	%al, %al
	jne	.L21171
.L20864:
	movzbl	2(%rbp), %edx
	movq	%r14, %rdi
	xorl	%esi, %esi
.L21159:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
.L21165:
	movq	%rax, %r13
.L20871:
	movl	$1, 52(%rsp)
.L20754:
	cmpq	%rbp, %r13
	je	.L20742
	cmpb	$0, 16(%r14)
	je	.L20742
	movzwl	(%rbp), %eax
	cmpl	$59, %eax
	je	.L20873
	cmpl	$55, %eax
	je	.L21172
.L20877:
	cmpl	$63, %eax
	je	.L20890
	cmpl	$66, %eax
	je	.L20890
.L20876:
	movzbl	2(%r13), %eax
	movzbl	2(%rbp), %ecx
	cmpb	%cl, %al
	je	.L20913
	testb	%al, %al
	je	.L20913
	movq	8(%r14), %r8
	movl	52(%rsp), %r14d
	movzbl	17(%r8), %esi
	shrb	$6, %sil
	movl	%esi, %edx
	andl	$1, %edx
	testl	%r14d, %r14d
	je	.L20914
	movzbl	%cl, %edi
	movq	%r13, %rsi
	xorl	%eax, %eax
	call	convert_to_mode
	movq	%rbp, %rdi
	movq	%rax, %rsi
.L21162:
	call	emit_move_insn
	.p2align 4,,7
.L20742:
	movq	(%r15), %r15
	testq	%r15, %r15
	jne	.L20928
.L21150:
	movq	32(%rsp), %rax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
.L20914:
	movq	%rbp, %rdi
	movq	%r13, %rsi
.L21163:
	xorl	%eax, %eax
	call	convert_move
	jmp	.L20742
	.p2align 6,,7
.L20913:
	cmpb	$16, %al
	je	.L21173
.L20925:
	movq	%rbp, %rdi
	movq	%r13, %rsi
	jmp	.L21162
.L21173:
	cmpb	$28, 16(%r14)
	je	.L21174
	cmpb	$16, %al
	jne	.L20925
	movq	%r14, %rdi
	xorl	%eax, %eax
	call	expr_size
	movq	%r13, %rsi
	movq	%rbp, %rdi
	movq	8(%r14), %r11
	movq	%rax, %rdx
	movl	48(%r11), %ecx
	shrl	$3, %ecx
.L21161:
	xorl	%eax, %eax
	call	emit_block_move
	jmp	.L20742
.L21174:
	xorl	%eax, %eax
	movq	%r14, %rdi
	call	expr_size
	cmpw	$46, (%rax)
	movq	%rax, %r12
	je	.L21175
.L20918:
	movl	$8, %edi
	call	size_int
	movl	$57, %edi
	movq	8(%r14), %r10
	movq	%rax, %rdx
	movq	32(%r10), %rsi
	call	size_binop
	xorl	%esi, %esi
	movl	32(%r14), %edi
	movq	%rax, %rbx
	call	build_int_2_wide
	movq	sizetype(%rip), %rdi
	movq	%rax, %rsi
	call	convert
	movq	%rbx, %rdx
	movq	sizetype(%rip), %rsi
	movq	%rax, %rcx
	movl	$73, %edi
	xorl	%eax, %eax
	call	build
	movq	%rax, %rdi
	call	fold
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	call	expand_expr
	movq	%r13, %rsi
	movq	%rbp, %rdi
	movq	$0, 40(%rsp)
	movq	%rax, %rbx
	movq	%rax, %rdx
	movq	8(%r14), %r9
	xorl	%eax, %eax
	movl	48(%r9), %ecx
	shrl	$3, %ecx
	call	emit_block_move
	cmpw	$46, (%rbx)
	je	.L21176
	movq	8(%rbp), %rsi
	movl	$4, %edi
	call	force_reg
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	add_optab(%rip), %rsi
	movq	%rax, %rdx
	movq	%rbx, %rcx
	movl	$4, %edi
	xorl	%eax, %eax
	movl	$3, (%rsp)
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	sub_optab(%rip), %rsi
	movq	%rbx, %rcx
	movl	$4, %edi
	movq	%r12, %rdx
	movq	%rax, %rbp
	movl	$3, (%rsp)
	xorl	%eax, %eax
	call	expand_binop
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movzbl	2(%rax), %r8d
	movq	const0_rtx(%rip), %rsi
	movq	%rax, %rdi
	movl	$94, %edx
	movq	%rax, %rbx
	movl	$0, (%rsp)
	xorl	%eax, %eax
	call	emit_cmp_insn
	call	gen_label_rtx
	movq	%rax, %rdi
	movq	%rax, 40(%rsp)
	call	gen_blt
	movq	%rax, %rdi
	call	emit_jump_insn
.L20921:
	movq	const0_rtx(%rip), %rax
	cmpq	%rax, %rbx
	je	.L20922
	movq	memset_libfunc(%rip), %rdi
	movq	%rax, (%rsp)
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	%rbp, %r8
	movl	$4, %r9d
	xorl	%eax, %eax
	movl	$4, 8(%rsp)
	movq	%rbx, 16(%rsp)
	movl	$4, 24(%rsp)
	call	emit_library_call
.L20922:
	cmpq	$0, 40(%rsp)
	je	.L20742
	movq	40(%rsp), %rdi
	call	emit_label
	jmp	.L20742
.L21176:
	movq	8(%rbp), %rdi
	movl	32(%r14), %esi
	call	plus_constant_wide
	movq	%r12, %rdi
	movl	32(%r14), %esi
	movq	%rax, %rbp
	negl	%esi
	call	plus_constant_wide
	movq	%rax, %rbx
	jmp	.L20921
.L21175:
	movl	32(%r14), %eax
	cmpl	%eax, 8(%r12)
	jge	.L20918
	movq	8(%r14), %rdi
	movq	%r13, %rsi
	movq	%r12, %rdx
	movl	48(%rdi), %ecx
	movq	%rbp, %rdi
	shrl	$3, %ecx
	jmp	.L21161
	.p2align 6,,7
.L20890:
	leaq	8(%rbp), %r8
	movq	%r8, 80(%rsp)
	movq	8(%rbp), %r12
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L20891
	cmpl	$55, %eax
	je	.L21177
.L20895:
	cmpl	$63, %eax
	je	.L20898
	cmpl	$66, %eax
	je	.L20898
.L20894:
	movq	80(%rsp), %rax
	leaq	16(%rbp), %r11
	movq	%r12, (%rax)
	movq	%r11, 64(%rsp)
	movq	16(%rbp), %r12
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L20901
	cmpl	$55, %eax
	je	.L21178
.L20905:
	cmpl	$63, %eax
	je	.L20908
	cmpl	$66, %eax
	je	.L20908
.L20904:
	movq	64(%rsp), %rdx
.L21160:
	movq	%r12, (%rdx)
	jmp	.L20876
.L20908:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L20904
.L21178:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L20902
	movq	8(%r12), %rcx
	cmpw	$59, (%rcx)
	movq	%rcx, 56(%rsp)
	je	.L21179
.L20902:
	cmpl	$55, %eax
	jne	.L20905
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L20904
.L21179:
	movq	8(%rcx), %rbx
	movq	%rbx, 8(%r12)
	cmpq	$0, 16(%rcx)
	je	.L20904
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r12
	movq	56(%rsp), %rdx
	movq	%rax, %rdi
	movq	16(%rdx), %rsi
	call	emit_insn_before
	jmp	.L20904
	.p2align 6,,7
.L20901:
	cmpq	$0, 16(%r12)
	jne	.L20909
	movq	8(%r12), %r12
	jmp	.L20904
.L20909:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L20910
	movq	%rsi, %r12
	jmp	.L20904
.L20910:
	movq	8(%r12), %rcx
	movzbl	2(%rcx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L20904
.L20898:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L20894
.L21177:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L20892
	movq	8(%r12), %rcx
	cmpw	$59, (%rcx)
	movq	%rcx, 72(%rsp)
	je	.L21180
.L20892:
	cmpl	$55, %eax
	jne	.L20895
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L20894
.L21180:
	movq	8(%rcx), %rdi
	movq	%rdi, 8(%r12)
	cmpq	$0, 16(%rcx)
	je	.L20894
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r12
	movq	72(%rsp), %r9
	movq	%rax, %rdi
	movq	16(%r9), %rsi
	call	emit_insn_before
	jmp	.L20894
	.p2align 6,,7
.L20891:
	cmpq	$0, 16(%r12)
	jne	.L20899
	movq	8(%r12), %r12
	jmp	.L20894
.L20899:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L20900
	movq	%rsi, %r12
	jmp	.L20894
.L20900:
	movq	8(%r12), %r10
	movzbl	2(%r10), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L20894
	.p2align 6,,7
.L21172:
	jne	.L20877
	leaq	8(%rbp), %rax
	movq	%rax, 96(%rsp)
	movq	8(%rbp), %r12
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L20878
	cmpl	$55, %eax
	je	.L21181
.L20882:
	cmpl	$63, %eax
	je	.L20885
	cmpl	$66, %eax
	je	.L20885
.L20881:
	movq	96(%rsp), %rdx
	jmp	.L21160
.L20885:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L20881
.L21181:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L20879
	movq	8(%r12), %rcx
	cmpw	$59, (%rcx)
	movq	%rcx, 88(%rsp)
	je	.L21182
.L20879:
	cmpl	$55, %eax
	jne	.L20882
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L20881
.L21182:
	movq	8(%rcx), %rbx
	movq	%rbx, 8(%r12)
	cmpq	$0, 16(%rcx)
	je	.L20881
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r12
	movq	88(%rsp), %rcx
	movq	%rax, %rdi
	movq	16(%rcx), %rsi
	call	emit_insn_before
	jmp	.L20881
	.p2align 6,,7
.L20878:
	cmpq	$0, 16(%r12)
	jne	.L20886
	movq	8(%r12), %r12
	jmp	.L20881
.L20886:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L20887
	movq	%rsi, %r12
	jmp	.L20881
.L20887:
	movq	8(%r12), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L20881
	.p2align 6,,7
.L20873:
	cmpq	$0, 16(%rbp)
	jne	.L20911
	movq	8(%rbp), %rbp
	jmp	.L20876
.L20911:
	movq	24(%rbp), %rdi
	testq	%rdi, %rdi
	je	.L20912
	movq	%rdi, %rbp
	jmp	.L20876
.L20912:
	movq	8(%rbp), %r12
	movzbl	2(%r12), %edi
	call	gen_reg_rtx
	movq	8(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbp)
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbp), %rbp
	jmp	.L20876
.L21171:
	movzbl	%al, %edi
	call	gen_reg_rtx
	movq	%r14, %rdi
	movzbl	2(%rbp), %edx
	movq	%rax, %rsi
	jmp	.L21159
	.p2align 6,,7
.L20819:
	movl	(%rbp), %eax
	andl	$268500991, %eax
	cmpl	$268435509, %eax
	je	.L21183
	movzbl	2(%rbp), %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	%r14, %rdi
	movq	%rbp, %rsi
	call	expand_expr
	cmpw	$51, (%rbp)
	movq	%rax, %r13
	je	.L21184
.L20870:
	movzwl	(%r13), %edx
	leal	-56(%rdx), %r12d
	cmpw	$1, %r12w
	jbe	.L20871
	cmpw	$46, %dx
	je	.L20871
	cmpw	$47, %dx
	je	.L20871
	cmpw	$49, %dx
	je	.L20871
	cmpw	$113, %dx
	jne	.L20754
	jmp	.L20871
.L21184:
	cmpl	$63, 8(%rbp)
	jle	.L20754
	jmp	.L20870
.L21183:
	movq	%r14, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	8(%rbp), %rdi
	movzbl	3(%rbp), %edx
	movq	%rax, %rsi
	shrb	$2, %dl
	andl	$1, %edx
	jmp	.L21163
	.p2align 6,,7
.L20839:
	movl	$1, %r12d
	jmp	.L20822
	.p2align 6,,7
.L20820:
	xorl	%r12d, %r12d
	jmp	.L20822
.L20830:
	movq	8(%rbx), %rdi
	xorl	%eax, %eax
	xorl	%r12d, %r12d
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L20839
	movq	16(%rbx), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
.L21164:
	je	.L20822
	jmp	.L20839
.L20837:
	movq	8(%rbp), %rbx
	xorl	%r12d, %r12d
	movzwl	(%rbx), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L20840
	mov	%eax, %r13d
	jmp	*.L20849(,%r13,8)
	.section	.rodata
	.align 8
	.align 4
.L20849:
	.quad	.L20843
	.quad	.L20840
	.quad	.L20840
	.quad	.L20840
	.quad	.L20848
	.quad	.L20840
	.quad	.L20840
	.quad	.L20840
	.quad	.L20846
	.quad	.L20846
	.quad	.L20840
	.quad	.L20846
	.text
.L20843:
	movq	8(%rbx), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %r13d
.L20842:
	testl	%r13d, %r13d
	jne	.L20839
	movq	16(%rbp), %rbx
	movzwl	(%rbx), %eax
	subl	$55, %eax
	cmpl	$11, %eax
	ja	.L20851
	mov	%eax, %edx
	jmp	*.L20860(,%rdx,8)
	.section	.rodata
	.align 8
	.align 4
.L20860:
	.quad	.L20854
	.quad	.L20851
	.quad	.L20851
	.quad	.L20851
	.quad	.L20859
	.quad	.L20851
	.quad	.L20851
	.quad	.L20851
	.quad	.L20857
	.quad	.L20857
	.quad	.L20851
	.quad	.L20857
	.text
.L20854:
	movq	8(%rbx), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	movl	%eax, %r13d
.L20853:
	testl	%r13d, %r13d
	jmp	.L21164
.L20859:
	movl	$1, %r13d
	jmp	.L20853
.L20851:
	xorl	%r13d, %r13d
	jmp	.L20853
.L20857:
	movq	8(%rbx), %rdi
	xorl	%eax, %eax
	xorl	%r13d, %r13d
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L20859
	movq	16(%rbx), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L20853
	jmp	.L20859
	.p2align 6,,7
.L20848:
	movl	$1, %r13d
	jmp	.L20842
.L20840:
	xorl	%r13d, %r13d
	jmp	.L20842
.L20846:
	movq	8(%rbx), %rdi
	xorl	%eax, %eax
	xorl	%r13d, %r13d
	call	queued_subexp_p
	testl	%eax, %eax
	jne	.L20848
	movq	16(%rbx), %rdi
	xorl	%eax, %eax
	call	queued_subexp_p
	testl	%eax, %eax
	je	.L20842
	jmp	.L20848
	.p2align 6,,7
.L21170:
	movzbl	2(%rbp), %eax
	cmpb	$16, %al
	je	.L20812
	movl	cse_not_expected(%rip), %r9d
	xorl	%esi, %esi
	movzbl	%al, %edx
	movq	%r14, %rdi
	testl	%r9d, %r9d
	cmove	%rbp, %rsi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	call	expand_expr
	movq	%rax, %r13
	movzbl	2(%rax), %eax
	cmpb	$16, %al
	je	.L20871
	testb	%al, %al
	je	.L20871
	movq	%r13, %rdi
	xorl	%eax, %eax
	call	copy_to_reg
	jmp	.L21165
	.p2align 6,,7
.L21169:
	cmpb	$16, 2(%rbp)
	jne	.L20755
	call	gen_label_rtx
	movq	%rax, 136(%rsp)
	call	gen_label_rtx
	movq	pending_chain(%rip), %rbx
	movq	%rax, 128(%rsp)
	testq	%rbx, %rbx
	jne	.L20759
.L21154:
	movzwl	(%rbp), %eax
	cmpl	$59, %eax
	je	.L20761
	cmpl	$55, %eax
	je	.L21185
.L20765:
	cmpl	$63, %eax
	je	.L20778
	cmpl	$66, %eax
	je	.L20778
.L20764:
	movq	32(%r14), %rdi
	movq	136(%rsp), %rsi
	xorl	%eax, %eax
	incl	inhibit_defer_pop(%rip)
	call	jumpifnot
	movq	40(%r14), %rdi
	xorl	%edx, %edx
	xorl	%eax, %eax
	movq	%rbp, %rsi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L20804
.L21156:
	movq	128(%rsp), %rdi
	call	gen_jump
	movq	%rax, %rdi
	call	emit_jump_insn
	call	emit_barrier
	movq	136(%rsp), %rdi
	call	emit_label
	xorl	%eax, %eax
	xorl	%edx, %edx
	movq	48(%r14), %rdi
	movq	%rbp, %rsi
	call	store_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L20809
.L21158:
	movq	128(%rsp), %rdi
	call	emit_label
	decl	inhibit_defer_pop(%rip)
	jmp	.L20742
	.p2align 6,,7
.L20809:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rbp
	movq	%rax, 16(%rbx)
	testq	%rbp, %rbp
	movq	%rbp, pending_chain(%rip)
	movq	%rbp, %rbx
	jne	.L20809
	jmp	.L21158
	.p2align 6,,7
.L20804:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %r8
	movq	%rax, 16(%rbx)
	testq	%r8, %r8
	movq	%r8, pending_chain(%rip)
	movq	%r8, %rbx
	jne	.L20804
	jmp	.L21156
.L20778:
	leaq	8(%rbp), %r9
	movq	%r9, 112(%rsp)
	movq	8(%rbp), %r12
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L20779
	cmpl	$55, %eax
	je	.L21186
.L20783:
	cmpl	$63, %eax
	je	.L20786
	cmpl	$66, %eax
	je	.L20786
.L20782:
	movq	112(%rsp), %r13
	movq	%r12, (%r13)
	leaq	16(%rbp), %r12
	movq	%r12, 104(%rsp)
	movq	16(%rbp), %r12
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L20789
	cmpl	$55, %eax
	je	.L21187
.L20793:
	cmpl	$63, %eax
	je	.L20796
	cmpl	$66, %eax
	je	.L20796
.L20792:
	movq	104(%rsp), %rcx
	movq	%r12, (%rcx)
	jmp	.L20764
.L20796:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L20792
.L21187:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L20790
	movq	8(%r12), %r13
	cmpw	$59, (%r13)
	je	.L21188
.L20790:
	cmpl	$55, %eax
	jne	.L20793
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L20792
.L21188:
	movq	8(%r13), %rbx
	movq	%rbx, 8(%r12)
	cmpq	$0, 16(%r13)
	je	.L20792
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r12
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L20792
	.p2align 6,,7
.L20789:
	cmpq	$0, 16(%r12)
	jne	.L20797
	movq	8(%r12), %r12
	jmp	.L20792
.L20797:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L20798
	movq	%rsi, %r12
	jmp	.L20792
.L20798:
	movq	8(%r12), %rdx
	movzbl	2(%rdx), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L20792
.L20786:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L20782
.L21186:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L20780
	movq	8(%r12), %r13
	cmpw	$59, (%r13)
	je	.L21189
.L20780:
	cmpl	$55, %eax
	jne	.L20783
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L20782
.L21189:
	movq	8(%r13), %r10
	movq	%r10, 8(%r12)
	cmpq	$0, 16(%r13)
	je	.L20782
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r12
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L20782
	.p2align 6,,7
.L20779:
	cmpq	$0, 16(%r12)
	jne	.L20787
	movq	8(%r12), %r12
	jmp	.L20782
.L20787:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L20788
	movq	%rsi, %r12
	jmp	.L20782
.L20788:
	movq	8(%r12), %r11
	movzbl	2(%r11), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L20782
	.p2align 6,,7
.L21185:
	jne	.L20765
	leaq	8(%rbp), %rax
	movq	%rax, 120(%rsp)
	movq	8(%rbp), %r12
	movzwl	(%r12), %eax
	cmpl	$59, %eax
	je	.L20766
	cmpl	$55, %eax
	je	.L21190
.L20770:
	cmpl	$63, %eax
	je	.L20773
	cmpl	$66, %eax
	je	.L20773
.L20769:
	movq	120(%rsp), %rdi
	movq	%r12, (%rdi)
	jmp	.L20764
.L20773:
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	xorl	%esi, %esi
	movq	16(%r12), %rdi
	movq	%rax, 8(%r12)
	call	protect_from_queue
	movq	%rax, 16(%r12)
	jmp	.L20769
.L21190:
	movzbl	2(%r12), %edx
	cmpb	$16, %dl
	je	.L20767
	movq	8(%r12), %r13
	cmpw	$59, (%r13)
	je	.L21191
.L20767:
	cmpl	$55, %eax
	jne	.L20770
	movq	8(%r12), %rdi
	xorl	%esi, %esi
	call	protect_from_queue
	movq	%rax, 8(%r12)
	jmp	.L20769
	.p2align 6,,7
.L21191:
	movq	8(%r13), %rsi
	movq	%rsi, 8(%r12)
	cmpq	$0, 16(%r13)
	je	.L20769
	movzbl	%dl, %edi
	call	gen_reg_rtx
	movq	%r12, %rsi
	movq	%rax, %rdi
	movq	%rax, %rbx
	call	gen_move_insn
	movq	%rbx, %r12
	movq	16(%r13), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	jmp	.L20769
	.p2align 6,,7
.L20766:
	cmpq	$0, 16(%r12)
	jne	.L20774
	movq	8(%r12), %r12
	jmp	.L20769
.L20774:
	movq	24(%r12), %rsi
	testq	%rsi, %rsi
	je	.L20775
	movq	%rsi, %r12
	jmp	.L20769
.L20775:
	movq	8(%r12), %r8
	movzbl	2(%r8), %edi
	call	gen_reg_rtx
	movq	8(%r12), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%r12)
	call	gen_move_insn
	movq	16(%r12), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%r12), %r12
	jmp	.L20769
	.p2align 6,,7
.L20761:
	cmpq	$0, 16(%rbp)
	jne	.L20799
	movq	8(%rbp), %rbp
	jmp	.L20764
.L20799:
	movq	24(%rbp), %rdi
	testq	%rdi, %rdi
	je	.L20800
	movq	%rdi, %rbp
	jmp	.L20764
.L20800:
	movq	8(%rbp), %rsi
	movzbl	2(%rsi), %edi
	call	gen_reg_rtx
	movq	8(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, 24(%rbp)
	call	gen_move_insn
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	emit_insn_before
	movq	24(%rbp), %rbp
	jmp	.L20764
	.p2align 6,,7
.L20759:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rcx
	movq	%rax, 16(%rbx)
	testq	%rcx, %rcx
	movq	%rcx, pending_chain(%rip)
	movq	%rcx, %rbx
	jne	.L20759
	jmp	.L21154
	.p2align 6,,7
.L21168:
	movq	32(%r14), %rdi
	movq	const0_rtx(%rip), %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	call	expand_expr
	movq	pending_chain(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L20751
.L21152:
	movq	40(%r14), %rdi
	movq	%rbp, %rsi
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	store_expr
	jmp	.L20742
	.p2align 6,,7
.L20751:
	movq	32(%rbx), %rdi
	call	emit_insn
	movq	40(%rbx), %rdx
	movq	%rax, 16(%rbx)
	testq	%rdx, %rdx
	movq	%rdx, pending_chain(%rip)
	movq	%rdx, %rbx
	jne	.L20751
	jmp	.L21152
	.p2align 6,,7
.L21167:
	movzbl	44(%rbp), %esi
	movq	%rbx, %rdi
	xorl	%edx, %edx
	xorl	%eax, %eax
	call	change_address
	movq	%rax, %rbx
	jmp	.L20746
	.p2align 6,,7
.L21166:
	movq	144(%rsp), %rdi
	movq	%rcx, %rsi
	xorl	%eax, %eax
	call	save_noncopied_parts
	movq	32(%rsp), %rdi
	movq	%rax, %rsi
	call	chainon
	movq	%rax, 32(%rsp)
	jmp	.L20742
.LFE44:
.Lfe44:
	.size	save_noncopied_parts,.Lfe44-save_noncopied_parts
	.align 2
	.p2align 4,,15
	.type	init_noncopied_parts,@function
init_noncopied_parts:
.LFB45:
	pushq	%r12
.LCFI207:
	movq	%rdi, %r12
	pushq	%rbp
.LCFI208:
	xorl	%ebp, %ebp
	testq	%rsi, %rsi
	pushq	%rbx
.LCFI209:
	movq	%rsi, %rbx
	je	.L21193
	.p2align 4,,7
.L20936:
	movq	32(%rbx), %rcx
	cmpb	$3, 16(%rcx)
	je	.L21195
	movq	8(%rcx), %rsi
	movl	$37, %edi
	movq	%r12, %rdx
	xorl	%eax, %eax
	call	build
	movq	%rbp, %rdx
	movq	24(%rbx), %rdi
	movq	%rax, %rsi
	call	tree_cons
.L21194:
	movq	(%rbx), %rbx
	movq	%rax, %rbp
	testq	%rbx, %rbx
	jne	.L20936
.L21193:
	popq	%rbx
	movq	%rbp, %rax
	popq	%rbp
	popq	%r12
	ret
	.p2align 6,,7
.L21195:
	movq	%r12, %rdi
	movq	%rcx, %rsi
	xorl	%eax, %eax
	call	init_noncopied_parts
	movq	%rbp, %rdi
	movq	%rax, %rsi
	call	chainon
	jmp	.L21194
.LFE45:
.Lfe45:
	.size	init_noncopied_parts,.Lfe45-init_noncopied_parts
	.align 2
	.p2align 4,,15
	.type	safe_from_p,@function
safe_from_p:
.LFB46:
	pushq	%r14
.LCFI210:
	pushq	%r13
.LCFI211:
	pushq	%r12
.LCFI212:
	pushq	%rbp
.LCFI213:
	movq	%rsi, %rbp
	pushq	%rbx
.LCFI214:
	movq	%rdi, %rbx
.L20950:
	xorl	%r13d, %r13d
	movl	$1, %r12d
	testq	%rbx, %rbx
	je	.L20937
	movzwl	(%rbx), %edx
	cmpw	$53, %dx
	je	.L21201
.L20939:
	cmpw	$55, %dx
	je	.L21202
.L20941:
	movzbl	16(%rbp), %ecx
	movzbl	%cl, %edi 
	salq	$3, %rdi
	addq	tree_code_type(%rip), %rdi
	movq	(%rdi), %rsi
	movsbl	(%rsi),%eax
	subl	$49, %eax
	cmpl	$71, %eax
	ja	.L20943
	mov	%eax, %esi
	jmp	*.L20983(,%rsi,8)
	.section	.rodata
	.align 8
	.align 4
.L20983:
	.quad	.L20953
	.quad	.L20955
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20955
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20989
	.quad	.L20944
	.quad	.L20958
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20958
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20943
	.quad	.L20946
	.text
	.p2align 6,,7
.L20944:
	movq	120(%rbp), %r13
.L20943:
	movl	$1, %r12d
.L21199:
	testq	%r13, %r13
	je	.L20937
.L21197:
	cmpw	$53, (%r13)
	je	.L21203
.L20986:
	xorl	%eax, %eax
	movq	%rbx, %rdi
	movq	%r13, %rsi
	call	rtx_equal_p
	xorl	%r12d, %r12d
	testl	%eax, %eax
	jne	.L20937
	cmpw	$55, (%rbx)
	je	.L21204
.L20989:
	movl	$1, %r12d
.L20937:
	popq	%rbx
	popq	%rbp
	movl	%r12d, %eax
	popq	%r12
	popq	%r13
	popq	%r14
	ret
.L21204:
	cmpw	$55, (%r13)
	jne	.L20989
	testb	$32, 17(%rbp)
.L21200:
	jne	.L20989
	jmp	.L20937
	.p2align 6,,7
.L21203:
	movq	8(%r13), %r13
	cmpw	$51, (%r13)
	jne	.L20986
	cmpl	$63, 8(%r13)
	jg	.L20986
	.p2align 4,,7
.L21198:
	xorl	%r12d, %r12d
	jmp	.L20937
	.p2align 6,,7
.L20953:
	movq	32(%rbp), %rbp
	jmp	.L20950
	.p2align 6,,7
.L20955:
	movq	32(%rbp), %rsi
	xorl	%eax, %eax
	movq	%rbx, %rdi
	xorl	%r12d, %r12d
	call	safe_from_p
	testl	%eax, %eax
	je	.L20937
	movq	40(%rbp), %rsi
	xorl	%eax, %eax
	movq	%rbx, %rdi
	call	safe_from_p
	testl	%eax, %eax
	movl	$1, %eax
	cmovne	%eax, %r12d
	jmp	.L20937
	.p2align 6,,7
.L20958:
	movzbl	%cl, %eax
	subl	$39, %eax
	cmpl	$67, %eax
	ja	.L20959
	mov	%eax, %r8d
	jmp	*.L20974(,%r8,8)
	.section	.rodata
	.align 8
	.align 4
.L20974:
	.quad	.L20961
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20972
	.quad	.L20963
	.quad	.L20973
	.quad	.L20970
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20959
	.quad	.L20971
	.quad	.L20968
	.quad	.L20960
	.text
.L20960:
	popq	%rbx
	movq	32(%rbp), %rdi
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	jmp	staticp
.L20961:
	xorl	%r12d, %r12d
	cmpw	$55, %dx
	je	.L20937
.L20959:
	testq	%r13, %r13
	jne	.L21197
	movzbl	%cl, %edx 
	xorl	%r12d, %r12d
	salq	$2, %rdx
	addq	tree_code_length(%rip), %rdx
	movl	(%rdx), %r14d
	cmpl	%r14d, %r12d
	jge	.L20943
	.p2align 4,,7
.L20982:
	movslq	%r12d,%rcx
	movq	32(%rbp,%rcx,8), %rsi
	testq	%rsi, %rsi
	jne	.L21205
.L20979:
	incl	%r12d
	cmpl	%r14d, %r12d
	jl	.L20982
	jmp	.L20943
.L21205:
	xorl	%eax, %eax
	movq	%rbx, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L20979
	jmp	.L21198
.L20972:
	movq	40(%rbp), %rbp
	jmp	.L20950
.L20963:
	movq	48(%rbp), %r13
	testq	%r13, %r13
	jne	.L21197
	cmpw	$51, %dx
	je	.L21206
.L20967:
	cmpw	$55, %dx
	jne	.L20959
	jmp	.L21198
.L21206:
	cmpl	$63, 8(%rbx)
	jle	.L21198
	jmp	.L20967
	.p2align 6,,7
.L20970:
	movq	40(%rbp), %r13
	jmp	.L20959
.L20971:
	movq	48(%rbp), %r13
	jmp	.L20959
.L20968:
	movq	40(%rbp), %r13
	xorl	%r12d, %r12d
	jmp	.L21199
	.p2align 6,,7
.L20946:
	cmpb	$3, %cl
	jne	.L21198
	movq	32(%rbp), %rsi
	xorl	%r12d, %r12d
	testq	%rsi, %rsi
	jne	.L21207
.L20949:
	movq	(%rbp), %rsi
	testq	%rsi, %rsi
	je	.L20989
	xorl	%eax, %eax
	movq	%rbx, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jmp	.L21200
.L21207:
	xorl	%eax, %eax
	movq	%rbx, %rdi
	call	safe_from_p
	testl	%eax, %eax
	jne	.L20949
	jmp	.L20937
	.p2align 6,,7
.L21202:
	movq	8(%rbx), %rax
	movq	virtual_outgoing_args_rtx(%rip), %rcx
	cmpq	%rcx, %rax
	je	.L20989
	cmpw	$63, (%rax)
	jne	.L20941
	cmpq	%rcx, 8(%rax)
	jne	.L20941
	jmp	.L20989
	.p2align 6,,7
.L21201:
	movq	8(%rbx), %rbx
	movzwl	(%rbx), %edx
	cmpw	$51, %dx
	jne	.L20939
	cmpl	$63, 8(%rbx)
	jg	.L20939
	jmp	.L21198
	.p2align 6,,7
.L20973:
	xorl	%eax, %eax
	call	abort
.LFE46:
.Lfe46:
	.size	safe_from_p,.Lfe46-safe_from_p
	.section	.eh_frame,"aw",@progbits
.Lframe1:
	.long	.LECIE1-.LSCIE1
.LSCIE1:
	.long	0x0
	.byte	0x1
	.string	""
	.uleb128 0x1
	.sleb128 -8
	.byte	0x10
	.byte	0xc
	.uleb128 0x7
	.uleb128 0x8
	.byte	0x90
	.uleb128 0x1
	.align 8
.LECIE1:
.LSFDE1:
	.long	.LEFDE1-.LASFDE1
.LASFDE1:
	.long	.LASFDE1-.Lframe1
	.quad	.LFB1
	.quad	.LFE1-.LFB1
	.byte	0x4
	.long	.LCFI0-.LFB1
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI1-.LCFI0
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI2-.LCFI1
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI3-.LCFI2
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI4-.LCFI3
	.byte	0xe
	.uleb128 0x30
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI5-.LCFI4
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI6-.LCFI5
	.byte	0xe
	.uleb128 0x70
	.byte	0x83
	.uleb128 0x7
	.align 8
.LEFDE1:
.LSFDE3:
	.long	.LEFDE3-.LASFDE3
.LASFDE3:
	.long	.LASFDE3-.Lframe1
	.quad	.LFB2
	.quad	.LFE2-.LFB2
	.byte	0x4
	.long	.LCFI7-.LFB2
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI10-.LCFI7
	.byte	0x8c
	.uleb128 0x2
	.byte	0x86
	.uleb128 0x3
	.byte	0x83
	.uleb128 0x4
	.align 8
.LEFDE3:
.LSFDE5:
	.long	.LEFDE5-.LASFDE5
.LASFDE5:
	.long	.LASFDE5-.Lframe1
	.quad	.LFB3
	.quad	.LFE3-.LFB3
	.byte	0x4
	.long	.LCFI11-.LFB3
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI12-.LCFI11
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI13-.LCFI12
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI14-.LCFI13
	.byte	0xe
	.uleb128 0x28
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI15-.LCFI14
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI16-.LCFI15
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI17-.LCFI16
	.byte	0xe
	.uleb128 0x50
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.align 8
.LEFDE5:
.LSFDE7:
	.long	.LEFDE7-.LASFDE7
.LASFDE7:
	.long	.LASFDE7-.Lframe1
	.quad	.LFB4
	.quad	.LFE4-.LFB4
	.byte	0x4
	.long	.LCFI18-.LFB4
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI19-.LCFI18
	.byte	0xd
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI21-.LCFI19
	.byte	0x8e
	.uleb128 0x4
	.byte	0x8f
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI25-.LCFI21
	.byte	0x83
	.uleb128 0x7
	.byte	0x8c
	.uleb128 0x6
	.byte	0x8d
	.uleb128 0x5
	.align 8
.LEFDE7:
.LSFDE9:
	.long	.LEFDE9-.LASFDE9
.LASFDE9:
	.long	.LASFDE9-.Lframe1
	.quad	.LFB5
	.quad	.LFE5-.LFB5
	.byte	0x4
	.long	.LCFI26-.LFB5
	.byte	0xe
	.uleb128 0x10
	.byte	0x8e
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI27-.LCFI26
	.byte	0xe
	.uleb128 0x18
	.byte	0x8d
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI28-.LCFI27
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI29-.LCFI28
	.byte	0xe
	.uleb128 0x28
	.byte	0x86
	.uleb128 0x5
	.byte	0x8c
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI30-.LCFI29
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI31-.LCFI30
	.byte	0xe
	.uleb128 0x40
	.byte	0x83
	.uleb128 0x6
	.align 8
.LEFDE9:
.LSFDE11:
	.long	.LEFDE11-.LASFDE11
.LASFDE11:
	.long	.LASFDE11-.Lframe1
	.quad	.LFB6
	.quad	.LFE6-.LFB6
	.byte	0x4
	.long	.LCFI32-.LFB6
	.byte	0xe
	.uleb128 0x10
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI33-.LCFI32
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI34-.LCFI33
	.byte	0xe
	.uleb128 0x20
	.byte	0x8d
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI35-.LCFI34
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI36-.LCFI35
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI37-.LCFI36
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI38-.LCFI37
	.byte	0xe
	.uleb128 0x1e10
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.align 8
.LEFDE11:
.LSFDE13:
	.long	.LEFDE13-.LASFDE13
.LASFDE13:
	.long	.LASFDE13-.Lframe1
	.quad	.LFB7
	.quad	.LFE7-.LFB7
	.byte	0x4
	.long	.LCFI39-.LFB7
	.byte	0xe
	.uleb128 0x120
	.byte	0x4
	.long	.LCFI45-.LCFI39
	.byte	0x8f
	.uleb128 0x2
	.byte	0x8e
	.uleb128 0x3
	.byte	0x83
	.uleb128 0x7
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8c
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x6
	.align 8
.LEFDE13:
.LSFDE15:
	.long	.LEFDE15-.LASFDE15
.LASFDE15:
	.long	.LASFDE15-.Lframe1
	.quad	.LFB8
	.quad	.LFE8-.LFB8
	.byte	0x4
	.long	.LCFI46-.LFB8
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI47-.LCFI46
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI48-.LCFI47
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI49-.LCFI48
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI50-.LCFI49
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI51-.LCFI50
	.byte	0xe
	.uleb128 0x38
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI52-.LCFI51
	.byte	0xe
	.uleb128 0x2e0
	.align 8
.LEFDE15:
.LSFDE17:
	.long	.LEFDE17-.LASFDE17
.LASFDE17:
	.long	.LASFDE17-.Lframe1
	.quad	.LFB9
	.quad	.LFE9-.LFB9
	.byte	0x4
	.long	.LCFI53-.LFB9
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI54-.LCFI53
	.byte	0xe
	.uleb128 0x18
	.byte	0x86
	.uleb128 0x3
	.byte	0x8c
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI55-.LCFI54
	.byte	0xe
	.uleb128 0x20
	.byte	0x83
	.uleb128 0x4
	.align 8
.LEFDE17:
.LSFDE19:
	.long	.LEFDE19-.LASFDE19
.LASFDE19:
	.long	.LASFDE19-.Lframe1
	.quad	.LFB10
	.quad	.LFE10-.LFB10
	.byte	0x4
	.long	.LCFI56-.LFB10
	.byte	0xe
	.uleb128 0x10
	.align 8
.LEFDE19:
.LSFDE21:
	.long	.LEFDE21-.LASFDE21
.LASFDE21:
	.long	.LASFDE21-.Lframe1
	.quad	.LFB11
	.quad	.LFE11-.LFB11
	.align 8
.LEFDE21:
.LSFDE23:
	.long	.LEFDE23-.LASFDE23
.LASFDE23:
	.long	.LASFDE23-.Lframe1
	.quad	.LFB12
	.quad	.LFE12-.LFB12
	.align 8
.LEFDE23:
.LSFDE25:
	.long	.LEFDE25-.LASFDE25
.LASFDE25:
	.long	.LASFDE25-.Lframe1
	.quad	.LFB13
	.quad	.LFE13-.LFB13
	.byte	0x4
	.long	.LCFI57-.LFB13
	.byte	0xe
	.uleb128 0x10
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI58-.LCFI57
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI59-.LCFI58
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI60-.LCFI59
	.byte	0xe
	.uleb128 0x28
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI61-.LCFI60
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI62-.LCFI61
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI63-.LCFI62
	.byte	0xe
	.uleb128 0x70
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.align 8
.LEFDE25:
.LSFDE27:
	.long	.LEFDE27-.LASFDE27
.LASFDE27:
	.long	.LASFDE27-.Lframe1
	.quad	.LFB14
	.quad	.LFE14-.LFB14
	.byte	0x4
	.long	.LCFI64-.LFB14
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI65-.LCFI64
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI66-.LCFI65
	.byte	0xe
	.uleb128 0x20
	.byte	0x8d
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI67-.LCFI66
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI68-.LCFI67
	.byte	0xe
	.uleb128 0x30
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI69-.LCFI68
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI70-.LCFI69
	.byte	0xe
	.uleb128 0x70
	.byte	0x83
	.uleb128 0x7
	.align 8
.LEFDE27:
.LSFDE29:
	.long	.LEFDE29-.LASFDE29
.LASFDE29:
	.long	.LASFDE29-.Lframe1
	.quad	.LFB15
	.quad	.LFE15-.LFB15
	.byte	0x4
	.long	.LCFI71-.LFB15
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI72-.LCFI71
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI73-.LCFI72
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI74-.LCFI73
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI75-.LCFI74
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI76-.LCFI75
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI77-.LCFI76
	.byte	0xe
	.uleb128 0x60
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.align 8
.LEFDE29:
.LSFDE31:
	.long	.LEFDE31-.LASFDE31
.LASFDE31:
	.long	.LASFDE31-.Lframe1
	.quad	.LFB16
	.quad	.LFE16-.LFB16
	.byte	0x4
	.long	.LCFI78-.LFB16
	.byte	0xe
	.uleb128 0x10
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI79-.LCFI78
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI80-.LCFI79
	.byte	0xe
	.uleb128 0x20
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8e
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI81-.LCFI80
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI82-.LCFI81
	.byte	0xe
	.uleb128 0x30
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI83-.LCFI82
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI84-.LCFI83
	.byte	0xe
	.uleb128 0x40
	.byte	0x83
	.uleb128 0x7
	.align 8
.LEFDE31:
.LSFDE33:
	.long	.LEFDE33-.LASFDE33
.LASFDE33:
	.long	.LASFDE33-.Lframe1
	.quad	.LFB17
	.quad	.LFE17-.LFB17
	.byte	0x4
	.long	.LCFI85-.LFB17
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI89-.LCFI85
	.byte	0x8d
	.uleb128 0x2
	.byte	0x8c
	.uleb128 0x3
	.byte	0x86
	.uleb128 0x4
	.byte	0x83
	.uleb128 0x5
	.align 8
.LEFDE33:
.LSFDE35:
	.long	.LEFDE35-.LASFDE35
.LASFDE35:
	.long	.LASFDE35-.Lframe1
	.quad	.LFB18
	.quad	.LFE18-.LFB18
	.byte	0x4
	.long	.LCFI90-.LFB18
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI91-.LCFI90
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI92-.LCFI91
	.byte	0xe
	.uleb128 0x20
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI93-.LCFI92
	.byte	0xe
	.uleb128 0x28
	.byte	0x8c
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI94-.LCFI93
	.byte	0xe
	.uleb128 0x30
	.byte	0x86
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI95-.LCFI94
	.byte	0xe
	.uleb128 0x38
	.byte	0x83
	.uleb128 0x7
	.byte	0x4
	.long	.LCFI96-.LCFI95
	.byte	0xe
	.uleb128 0x50
	.align 8
.LEFDE35:
.LSFDE37:
	.long	.LEFDE37-.LASFDE37
.LASFDE37:
	.long	.LASFDE37-.Lframe1
	.quad	.LFB19
	.quad	.LFE19-.LFB19
	.byte	0x4
	.long	.LCFI97-.LFB19
	.byte	0xe
	.uleb128 0x10
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI98-.LCFI97
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI99-.LCFI98
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI100-.LCFI99
	.byte	0xe
	.uleb128 0x28
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI101-.LCFI100
	.byte	0xe
	.uleb128 0x30
	.byte	0x86
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI102-.LCFI101
	.byte	0xe
	.uleb128 0x38
	.byte	0x83
	.uleb128 0x7
	.byte	0x4
	.long	.LCFI103-.LCFI102
	.byte	0xe
	.uleb128 0x50
	.align 8
.LEFDE37:
.LSFDE39:
	.long	.LEFDE39-.LASFDE39
.LASFDE39:
	.long	.LASFDE39-.Lframe1
	.quad	.LFB20
	.quad	.LFE20-.LFB20
	.byte	0x4
	.long	.LCFI104-.LFB20
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI105-.LCFI104
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI106-.LCFI105
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI107-.LCFI106
	.byte	0xe
	.uleb128 0x28
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI108-.LCFI107
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI109-.LCFI108
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI110-.LCFI109
	.byte	0xe
	.uleb128 0x80
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.align 8
.LEFDE39:
.LSFDE41:
	.long	.LEFDE41-.LASFDE41
.LASFDE41:
	.long	.LASFDE41-.Lframe1
	.quad	.LFB21
	.quad	.LFE21-.LFB21
	.byte	0x4
	.long	.LCFI111-.LFB21
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI112-.LCFI111
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI113-.LCFI112
	.byte	0xe
	.uleb128 0x20
	.byte	0x8d
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI114-.LCFI113
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI115-.LCFI114
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI116-.LCFI115
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI117-.LCFI116
	.byte	0xe
	.uleb128 0x60
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.align 8
.LEFDE41:
.LSFDE43:
	.long	.LEFDE43-.LASFDE43
.LASFDE43:
	.long	.LASFDE43-.Lframe1
	.quad	.LFB22
	.quad	.LFE22-.LFB22
	.byte	0x4
	.long	.LCFI118-.LFB22
	.byte	0xe
	.uleb128 0x10
	.align 8
.LEFDE43:
.LSFDE45:
	.long	.LEFDE45-.LASFDE45
.LASFDE45:
	.long	.LASFDE45-.Lframe1
	.quad	.LFB23
	.quad	.LFE23-.LFB23
	.byte	0x4
	.long	.LCFI119-.LFB23
	.byte	0xe
	.uleb128 0x10
	.byte	0x86
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI120-.LCFI119
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI121-.LCFI120
	.byte	0xe
	.uleb128 0x20
	.byte	0x83
	.uleb128 0x3
	.align 8
.LEFDE45:
.LSFDE47:
	.long	.LEFDE47-.LASFDE47
.LASFDE47:
	.long	.LASFDE47-.Lframe1
	.quad	.LFB24
	.quad	.LFE24-.LFB24
	.align 8
.LEFDE47:
.LSFDE49:
	.long	.LEFDE49-.LASFDE49
.LASFDE49:
	.long	.LASFDE49-.Lframe1
	.quad	.LFB25
	.quad	.LFE25-.LFB25
	.byte	0x4
	.long	.LCFI122-.LFB25
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI125-.LCFI122
	.byte	0x8c
	.uleb128 0x2
	.byte	0x83
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.align 8
.LEFDE49:
.LSFDE51:
	.long	.LEFDE51-.LASFDE51
.LASFDE51:
	.long	.LASFDE51-.Lframe1
	.quad	.LFB26
	.quad	.LFE26-.LFB26
	.byte	0x4
	.long	.LCFI126-.LFB26
	.byte	0xe
	.uleb128 0x10
	.byte	0x83
	.uleb128 0x2
	.align 8
.LEFDE51:
.LSFDE53:
	.long	.LEFDE53-.LASFDE53
.LASFDE53:
	.long	.LASFDE53-.Lframe1
	.quad	.LFB27
	.quad	.LFE27-.LFB27
	.byte	0x4
	.long	.LCFI127-.LFB27
	.byte	0xe
	.uleb128 0x10
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI128-.LCFI127
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI129-.LCFI128
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI130-.LCFI129
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI131-.LCFI130
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI132-.LCFI131
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI133-.LCFI132
	.byte	0xe
	.uleb128 0xd0
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8e
	.uleb128 0x3
	.align 8
.LEFDE53:
.LSFDE55:
	.long	.LEFDE55-.LASFDE55
.LASFDE55:
	.long	.LASFDE55-.Lframe1
	.quad	.LFB28
	.quad	.LFE28-.LFB28
	.byte	0x4
	.long	.LCFI134-.LFB28
	.byte	0xe
	.uleb128 0x10
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI135-.LCFI134
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI136-.LCFI135
	.byte	0xe
	.uleb128 0x20
	.byte	0x8d
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI137-.LCFI136
	.byte	0xe
	.uleb128 0x28
	.byte	0x8c
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI138-.LCFI137
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI139-.LCFI138
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI140-.LCFI139
	.byte	0xe
	.uleb128 0x40
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.align 8
.LEFDE55:
.LSFDE57:
	.long	.LEFDE57-.LASFDE57
.LASFDE57:
	.long	.LASFDE57-.Lframe1
	.quad	.LFB29
	.quad	.LFE29-.LFB29
	.byte	0x4
	.long	.LCFI141-.LFB29
	.byte	0xe
	.uleb128 0x10
	.byte	0x8e
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI142-.LCFI141
	.byte	0xe
	.uleb128 0x18
	.byte	0x8d
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI143-.LCFI142
	.byte	0xe
	.uleb128 0x20
	.byte	0x8c
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI144-.LCFI143
	.byte	0xe
	.uleb128 0x28
	.byte	0x86
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI145-.LCFI144
	.byte	0xe
	.uleb128 0x30
	.byte	0x83
	.uleb128 0x6
	.align 8
.LEFDE57:
.LSFDE59:
	.long	.LEFDE59-.LASFDE59
.LASFDE59:
	.long	.LASFDE59-.Lframe1
	.quad	.LFB30
	.quad	.LFE30-.LFB30
	.byte	0x4
	.long	.LCFI146-.LFB30
	.byte	0xe
	.uleb128 0x10
	.byte	0x8c
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI147-.LCFI146
	.byte	0xe
	.uleb128 0x18
	.byte	0x86
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI148-.LCFI147
	.byte	0xe
	.uleb128 0x20
	.byte	0x83
	.uleb128 0x4
	.align 8
.LEFDE59:
.LSFDE61:
	.long	.LEFDE61-.LASFDE61
.LASFDE61:
	.long	.LASFDE61-.Lframe1
	.quad	.LFB31
	.quad	.LFE31-.LFB31
	.byte	0x4
	.long	.LCFI149-.LFB31
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI150-.LCFI149
	.byte	0x83
	.uleb128 0x2
	.align 8
.LEFDE61:
.LSFDE63:
	.long	.LEFDE63-.LASFDE63
.LASFDE63:
	.long	.LASFDE63-.Lframe1
	.quad	.LFB32
	.quad	.LFE32-.LFB32
	.byte	0x4
	.long	.LCFI151-.LFB32
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI154-.LCFI151
	.byte	0x86
	.uleb128 0x3
	.byte	0x8c
	.uleb128 0x2
	.byte	0x83
	.uleb128 0x4
	.align 8
.LEFDE63:
.LSFDE65:
	.long	.LEFDE65-.LASFDE65
.LASFDE65:
	.long	.LASFDE65-.Lframe1
	.quad	.LFB33
	.quad	.LFE33-.LFB33
	.align 8
.LEFDE65:
.LSFDE67:
	.long	.LEFDE67-.LASFDE67
.LASFDE67:
	.long	.LASFDE67-.Lframe1
	.quad	.LFB34
	.quad	.LFE34-.LFB34
	.byte	0x4
	.long	.LCFI155-.LFB34
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI156-.LCFI155
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI157-.LCFI156
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI158-.LCFI157
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI159-.LCFI158
	.byte	0xe
	.uleb128 0x30
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI160-.LCFI159
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI161-.LCFI160
	.byte	0xe
	.uleb128 0xc0
	.byte	0x83
	.uleb128 0x7
	.align 8
.LEFDE67:
.LSFDE69:
	.long	.LEFDE69-.LASFDE69
.LASFDE69:
	.long	.LASFDE69-.Lframe1
	.quad	.LFB35
	.quad	.LFE35-.LFB35
	.byte	0x4
	.long	.LCFI162-.LFB35
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI163-.LCFI162
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI164-.LCFI163
	.byte	0xe
	.uleb128 0x20
	.byte	0x8d
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI165-.LCFI164
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI166-.LCFI165
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI167-.LCFI166
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI168-.LCFI167
	.byte	0xe
	.uleb128 0x90
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.align 8
.LEFDE69:
.LSFDE71:
	.long	.LEFDE71-.LASFDE71
.LASFDE71:
	.long	.LASFDE71-.Lframe1
	.quad	.LFB36
	.quad	.LFE36-.LFB36
	.byte	0x4
	.long	.LCFI169-.LFB36
	.byte	0xe
	.uleb128 0x10
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI170-.LCFI169
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI171-.LCFI170
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI172-.LCFI171
	.byte	0xe
	.uleb128 0x28
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8e
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI173-.LCFI172
	.byte	0xe
	.uleb128 0x30
	.byte	0x86
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI174-.LCFI173
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI175-.LCFI174
	.byte	0xe
	.uleb128 0x70
	.byte	0x83
	.uleb128 0x7
	.align 8
.LEFDE71:
.LSFDE73:
	.long	.LEFDE73-.LASFDE73
.LASFDE73:
	.long	.LASFDE73-.Lframe1
	.quad	.LFB37
	.quad	.LFE37-.LFB37
	.byte	0x4
	.long	.LCFI176-.LFB37
	.byte	0xe
	.uleb128 0x10
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI177-.LCFI176
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI178-.LCFI177
	.byte	0xe
	.uleb128 0x20
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8e
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI179-.LCFI178
	.byte	0xe
	.uleb128 0x28
	.byte	0x8c
	.uleb128 0x5
	.byte	0x4
	.long	.LCFI180-.LCFI179
	.byte	0xe
	.uleb128 0x30
	.byte	0x86
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI181-.LCFI180
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI182-.LCFI181
	.byte	0xe
	.uleb128 0x50
	.byte	0x83
	.uleb128 0x7
	.align 8
.LEFDE73:
.LSFDE75:
	.long	.LEFDE75-.LASFDE75
.LASFDE75:
	.long	.LASFDE75-.Lframe1
	.quad	.LFB38
	.quad	.LFE38-.LFB38
	.align 8
.LEFDE75:
.LSFDE77:
	.long	.LEFDE77-.LASFDE77
.LASFDE77:
	.long	.LASFDE77-.Lframe1
	.quad	.LFB39
	.quad	.LFE39-.LFB39
	.byte	0x4
	.long	.LCFI183-.LFB39
	.byte	0xe
	.uleb128 0x10
	.align 8
.LEFDE77:
.LSFDE79:
	.long	.LEFDE79-.LASFDE79
.LASFDE79:
	.long	.LASFDE79-.Lframe1
	.quad	.LFB40
	.quad	.LFE40-.LFB40
	.byte	0x4
	.long	.LCFI184-.LFB40
	.byte	0xe
	.uleb128 0x10
	.byte	0x83
	.uleb128 0x2
	.align 8
.LEFDE79:
.LSFDE81:
	.long	.LEFDE81-.LASFDE81
.LASFDE81:
	.long	.LASFDE81-.Lframe1
	.quad	.LFB41
	.quad	.LFE41-.LFB41
	.byte	0x4
	.long	.LCFI185-.LFB41
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI186-.LCFI185
	.byte	0xe
	.uleb128 0x18
	.byte	0x8c
	.uleb128 0x3
	.byte	0x8d
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI187-.LCFI186
	.byte	0xe
	.uleb128 0x20
	.byte	0x86
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI188-.LCFI187
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI189-.LCFI188
	.byte	0xe
	.uleb128 0x30
	.byte	0x83
	.uleb128 0x5
	.align 8
.LEFDE81:
.LSFDE83:
	.long	.LEFDE83-.LASFDE83
.LASFDE83:
	.long	.LASFDE83-.Lframe1
	.quad	.LFB42
	.quad	.LFE42-.LFB42
	.byte	0x4
	.long	.LCFI190-.LFB42
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI191-.LCFI190
	.byte	0xe
	.uleb128 0x18
	.byte	0x8e
	.uleb128 0x3
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI192-.LCFI191
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI193-.LCFI192
	.byte	0xe
	.uleb128 0x28
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x4
	.long	.LCFI194-.LCFI193
	.byte	0xe
	.uleb128 0x30
	.byte	0x86
	.uleb128 0x6
	.byte	0x4
	.long	.LCFI195-.LCFI194
	.byte	0xe
	.uleb128 0x38
	.byte	0x83
	.uleb128 0x7
	.byte	0x4
	.long	.LCFI196-.LCFI195
	.byte	0xe
	.uleb128 0xb0
	.align 8
.LEFDE83:
.LSFDE85:
	.long	.LEFDE85-.LASFDE85
.LASFDE85:
	.long	.LASFDE85-.Lframe1
	.quad	.LFB43
	.quad	.LFE43-.LFB43
	.byte	0x4
	.long	.LCFI197-.LFB43
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI199-.LCFI197
	.byte	0x86
	.uleb128 0x2
	.byte	0x83
	.uleb128 0x3
	.align 8
.LEFDE85:
.LSFDE87:
	.long	.LEFDE87-.LASFDE87
.LASFDE87:
	.long	.LASFDE87-.Lframe1
	.quad	.LFB44
	.quad	.LFE44-.LFB44
	.byte	0x4
	.long	.LCFI200-.LFB44
	.byte	0xe
	.uleb128 0x10
	.byte	0x8f
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI201-.LCFI200
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI202-.LCFI201
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI203-.LCFI202
	.byte	0xe
	.uleb128 0x28
	.byte	0x4
	.long	.LCFI204-.LCFI203
	.byte	0xe
	.uleb128 0x30
	.byte	0x4
	.long	.LCFI205-.LCFI204
	.byte	0xe
	.uleb128 0x38
	.byte	0x4
	.long	.LCFI206-.LCFI205
	.byte	0xe
	.uleb128 0xd0
	.byte	0x83
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.byte	0x8c
	.uleb128 0x5
	.byte	0x8d
	.uleb128 0x4
	.byte	0x8e
	.uleb128 0x3
	.align 8
.LEFDE87:
.LSFDE89:
	.long	.LEFDE89-.LASFDE89
.LASFDE89:
	.long	.LASFDE89-.Lframe1
	.quad	.LFB45
	.quad	.LFE45-.LFB45
	.byte	0x4
	.long	.LCFI207-.LFB45
	.byte	0xe
	.uleb128 0x10
	.byte	0x8c
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI208-.LCFI207
	.byte	0xe
	.uleb128 0x18
	.byte	0x86
	.uleb128 0x3
	.byte	0x4
	.long	.LCFI209-.LCFI208
	.byte	0xe
	.uleb128 0x20
	.byte	0x83
	.uleb128 0x4
	.align 8
.LEFDE89:
.LSFDE91:
	.long	.LEFDE91-.LASFDE91
.LASFDE91:
	.long	.LASFDE91-.Lframe1
	.quad	.LFB46
	.quad	.LFE46-.LFB46
	.byte	0x4
	.long	.LCFI210-.LFB46
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.long	.LCFI211-.LCFI210
	.byte	0xe
	.uleb128 0x18
	.byte	0x4
	.long	.LCFI212-.LCFI211
	.byte	0xe
	.uleb128 0x20
	.byte	0x4
	.long	.LCFI213-.LCFI212
	.byte	0xe
	.uleb128 0x28
	.byte	0x86
	.uleb128 0x5
	.byte	0x8c
	.uleb128 0x4
	.byte	0x8d
	.uleb128 0x3
	.byte	0x8e
	.uleb128 0x2
	.byte	0x4
	.long	.LCFI214-.LCFI213
	.byte	0xe
	.uleb128 0x30
	.byte	0x83
	.uleb128 0x6
	.align 8
.LEFDE91:
	.ident	"GCC: (GNU) 3.2"
