C  9 DEC 03 - MWS - SYNCH COMMON BLOCK RUNOPT
C  3 JUL 03 - JMM - SUPPRESS PRINTING FOR MONTE CARLO JOBS
C  7 AUG 02 - IA  - FRGFLD: CHANGE CHARGE SCREENING, DIPIT: TIGHTEN CONV
C  7 AUG 02 - HL  - EFPCMP: ZERO OFF LARGE INDUCED DIPOLES
C 17 APR 02 - PND - EFPCMP: ONLY MASTER PRINTS A LINE
C 25 JUN 01 - MWS - ALTER COMMON BLOCK WFNOPT
C 13 JUN 01 - HL  - TRIVIAL FORMAT CHANGE
C 20 FEB 01 - PND - DIPIT: PROVIDE ESCAPE HATCH IF NOT CONVERGENT
C 26 OCT 00 - MWS - INTRODUCE MXAO PARAMETER
C 16 FEB 00 - VK  - EFNUCP: SKIP OVER BUFFER NUCLEI WHEN DOING QM/MM
C 28 SEP 97 - MWS - CONVERT PARALLEL CALLS FROM TCGMSG TO DDI
C 18 DEC 96 - JHJ - EFPCMP: WRITE 1-E HAILTONIAN TO DAF 80
C 30 OCT 96 - SPW - EFPCMP: CHANGES FOR MCSCF RUNS
C 29 SEP 96 - MWS - EFPCMP: REMOVE RESETTING OF NPRINT VALUE
C 18 SEP 96 - MWS - POLINT: REMOVE TIMING CALL
C 10 SEP 96 - MWS - INCLUDE THIS CODE IN DISTRIBUTION VERSION
C 13 JUN 96 - MWS - INTRODUCE CI TYPE VARIABLE, DELETE ZDPMLT
C 24 MAY 96 - WC  - POLINT: REMOVE DAMPING, AXE EFPEX IN /EFPPAR/
C  9 JAN 96 - WC  - REMOVE EXTRANEOUS OUTPUT
C 12 SEP 95 - WC  - FIX BUGS IN DIPIT AND FRGFLD
C  5 JAN 95 - PND - CHANGES FOR UNSYMMETRIC POLARIZABILITY TENSORS
C 23 NOV 94 - MWS - REMOVE ALL FTNCHEK ERRORS
C 10 AUG 94 - MWS - INCREASE NUMBER OF DAF RECORDS
C  1 AUG 94 - SPW - CHANGE ENERGY CORRECTION AND PERTURBATION TO H1
C 27 MAY 94 - SPW - EFPCMP: ADD IND. DIPOLE EACH SCF ITERATION
C 20 NOV 91 - JHJ - POLINT,REPINT,ZRFINT REPLACED IA ARRAY
C 13 NOV 91 - JHJ - ECPCMP: ENUCR=EN.
C 31 OCT 91 - JHJ - EFPCMP: CHANGED /CONV/, E PRINTOUT.
C 28 OCT 91 - JHJ - EFPCMP: DAF FILES REPLACE FILE 25 FOR ZRF.
C 23 OCT 91 - JHJ - EFPCMP: REPLACED ENERGY WITH ENRGY.
C                   INTRODUCED DIELEC AND ICALC TO COMMON /ZRFPAR/.
C 22 OCT 91 - JHJ - REPLACED OPTMIZ WITH GRAD THROUGHOUT.
C 23 JUL 91 - JHJ - ENUCPO:ADDED DRG'S NUCLEAR-INDUCED DIPOLE INTERAC.
C 19 JUL 91 - JHJ - ZRFINP: ADDED SCRF OPTION.
C 17 JUL 91 - JHJ - ZRFINP (FROM DRG'S EFPOTI).
C 16 JUL 91 - JHJ - ZDPMLT:CALC DIPOLES DUE TO FRG. MULTIPOLES.
C                   DIPIT:ITERATE INDUCED DIPOLE TO SELF CONSISTENCY.
C 15 JUL 91 - JHJ - FRGFLD:CALLED IN EFPCMP TO CALCULATE ELECTRIC
C                   FIELD DUE TO FRAGMENTS.
C 11 JUL 91 - JHJ - REPINT:INTRODUCED DRG'S REP. INTEGRAL CODE.
C  9 JUL 91 - JHJ - GATHERED EFPCMP AND POLINT TO FORM EFINTB.
C 20 FEB 91 - DRG - ZERNER REACTION FIELD ADDITION TO EFPCMP AND ENUCP.
C                   READ $ZRF IN EFPOTI FOR ZERNER REACTION FIELD SPEC.
C 18 FEB 91 - DRG - ZRFINT, INTEGRAL ROUTINE FOR ZERNER REACTION FIELD.
C  5 JUN 90 - DRG - DIPOLE FIELD INTEGRALS ADDED TO STANDV, CALLING
C  4 JUN 90 - DRG - MODIFIED POLINT FOR FIXED INDUCED MOMENTS.
C 26 MAY 90 - DRG - POLINT FOR EFP INTEGRALS.
C
C*MODULE EFINTB  *DECK DIPIT
      SUBROUTINE DIPIT(EFLD,EFADD,N)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      CHARACTER*8 POLNAM
C
      LOGICAL GOPARR,MASWRK,DSKWRK
C
      PARAMETER (MXPT=100, MXFRG=50, MXFGPT=MXPT*MXFRG)
C
      DIMENSION EFLD(3,N),EFADD(3,N)
      DIMENSION DIPNEW(MXFRG),DIPLD(MXFRG),DIPNWD(MXFRG),DIPDD(MXFRG)
C
      COMMON /EFPOTD/ METHOD,ISCCHG,MOVE
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),POLNAM(MXFGPT)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /SIMDAT/ NACC,NREJ,IGOMIN,NRPA,IBWM,NACCT,NREJT,NRPAT,
     *                NPRTGO,IDPUNC,IGOFLG
C
      PARAMETER (ZERO=0.00D+00, THREE=3.00D+00)
      PARAMETER (CONV=1.0D-06, ITLIM=30)
C
      SAVE DIPLD,DIPDD
      DATA DIPLD/MXFRG*0.0D+00/,DIPDD/MXFRG*0.0D+00/
C
C THIS ROUTINE IS LIFTED FROM "ELECT" WRITTEN BY DR. W.STEVENS.
C
C     ---------------------- METHOD 2 -------------------------
C     CALCULATE ITERATIVELY THE INDUCED DIPOLES ON THE CENTERS
C     UNTIL SELF-CONSISTENCY IS REACHED.
C
C     ---------------------- METHOD 3 -------------------------
C     CALCULATE THE INDUCED DIPOLES ON THE CENTERS ONCE AND THEN
C     RETURN.
C
C     --- EFADD - FIELD DUE TO INDUCED DIPOLE ONLY                   ---
C     --- EFLD  - TOTAL FIELD, INCLUDING FIELD DUE TO INDUCED DIPOLE ---
C     IDPUNC=0/1 MEANS DIPOLE ITERATION CONVERGED/UNCONVERGED
C
      IDPUNC = 0
      ITER = 0
C
  290 CONTINUE
      INDEX = 1
      DO 330 IM = 1,NFRG
         I1 = INDEX
         INDEX = INDEX + NPPTS(IM)
         I2 = I1 + NPPTS(IM) - 1
         DIPX = ZERO
         DIPY = ZERO
         DIPZ = ZERO
         DDIPX = ZERO
         DDIPY = ZERO
         DDIPZ = ZERO
         DO 320 IP = I1,I2
            IF(METHOD.EQ.3)THEN
               EFX =ZERO
               EFY =ZERO
               EFZ =ZERO
            ELSE
               EFX = EFLD(1,IP)
               EFY = EFLD(2,IP)
               EFZ = EFLD(3,IP)
            END IF
            X1 = EFP(1,IP)
            Y1 = EFP(2,IP)
            Z1 = EFP(3,IP)
            INDEX2 = 1
            DO 310 JM = 1,NFRG
               IF (IM.EQ.JM) GO TO 309
               J1 = INDEX2
               J2 = J1 + NPPTS(JM) - 1
               DO 300 JP = J1,J2
                  X2 = EFP(1,JP)
                  Y2 = EFP(2,JP)
                  Z2 = EFP(3,JP)
                  X = X1 - X2
                  Y = Y1 - Y2
                  Z = Z1 - Z2
                  R2 = X * X + Y * Y + Z * Z
                  R = SQRT(R2)
                  R3 = R * R * R
                  R5 = R * R * R3
                  DOT = DIND(1,JP)*X + DIND(2,JP)*Y
     1                 + DIND(3,JP)*Z
                  DOT = THREE * DOT / R5
                  EFX = EFX - DIND(1,JP) / R3 + DOT * X
                  EFY = EFY - DIND(2,JP) / R3 + DOT * Y
                  EFZ = EFZ - DIND(3,JP) / R3 + DOT * Z
  300          CONTINUE
  309          INDEX2 = INDEX2 + NPPTS(JM)
  310       CONTINUE
            IF(METHOD.EQ.3) THEN
               EFADD(1,IP) = EFX
               EFADD(2,IP) = EFY
               EFADD(3,IP) = EFZ
            ELSE
            DIND(1,IP) =EFX*EFPOL(1,IP)+EFY*EFPOL(4,IP)+EFZ*EFPOL(5,IP)
            DIND(2,IP) =EFX*EFPOL(7,IP)+EFY*EFPOL(2,IP)+EFZ*EFPOL(6,IP)
            DIND(3,IP) =EFX*EFPOL(8,IP)+EFY*EFPOL(9,IP)+EFZ*EFPOL(3,IP)
            DINDD(1,IP)=EFX*EFPOL(1,IP)+EFY*EFPOL(7,IP)+EFZ*EFPOL(8,IP)
            DINDD(2,IP)=EFX*EFPOL(4,IP)+EFY*EFPOL(2,IP)+EFZ*EFPOL(9,IP)
            DINDD(3,IP)=EFX*EFPOL(5,IP)+EFY*EFPOL(6,IP)+EFZ*EFPOL(3,IP)
               DIPX  = DIPX + DIND(1,IP)
               DIPY  = DIPY + DIND(2,IP)
               DIPZ  = DIPZ + DIND(3,IP)
               DDIPX = DDIPX + DINDD(1,IP)
               DDIPY = DDIPY + DINDD(2,IP)
               DDIPZ = DDIPZ + DINDD(3,IP)
            END IF
  320    CONTINUE
         IF(METHOD.EQ.2) THEN
            DIPNEW(IM) = DIPX * DIPX + DIPY * DIPY + DIPZ * DIPZ
            DIPNEW(IM) = SQRT(DIPNEW(IM))
            DIPNWD(IM) = DDIPX * DDIPX + DDIPY * DDIPY + DDIPZ * DDIPZ
            DIPNWD(IM) = SQRT(DIPNWD(IM))
         END IF
  330 CONTINUE
      IF(METHOD.EQ.3) RETURN
C
C     ----- CHECK INDUCED DIPOLE AGAINST CONVERGENCE CRITERIA -----
C
      ITER = ITER + 1
      ICONV = 0
      DO 350 I = 1,NFRG
         DIFF1 = DIPLD(I) - DIPNEW(I)
         DIFF2 = DIPDD(I) - DIPNWD(I)
         DIPLD(I) = DIPNEW(I)
         DIPDD(I) = DIPNWD(I)
         DIFF1 = ABS(DIFF1)
         DIFF2 = ABS(DIFF2)
         IF (DIFF1.LT.CONV) ICONV = ICONV + 1
         IF (DIFF2.LT.CONV) ICONV = ICONV + 1
  350 CONTINUE
      IF (ICONV.NE.2*NFRG .AND. ITER.LE.ITLIM) GO TO 290
      IF (ICONV.NE.2*NFRG) THEN
         IF(MASWRK) WRITE(6,9010) ITER,NACC
         IF(NACC.EQ.0) CALL ABRT
         IDPUNC=1
         RETURN
      END IF
C
C     ----- USE CONVERGED INDUCED DIPOLES TO CALCULATE NEW FIELDS -----
C
      INDEX = 1
      DO 430 IM = 1,NFRG
         I1 = INDEX
         INDEX = INDEX + NPPTS(IM)
         I2 = I1 + NPPTS(IM) - 1
         DO 420 IP = I1,I2
            EFXADD =ZERO
            EFYADD =ZERO
            EFZADD =ZERO
            EFX = EFLD(1,IP)
            EFY = EFLD(2,IP)
            EFZ = EFLD(3,IP)
            X1 = EFP(1,IP)
            Y1 = EFP(2,IP)
            Z1 = EFP(3,IP)
            INDEX2 = 1
            DO 410 JM = 1,NFRG
               IF (IM.EQ.JM) GO TO 409
               J1 = INDEX2
               J2 = J1 + NPPTS(JM) - 1
               DO 400 JP = J1,J2
                  X2 = EFP(1,JP)
                  Y2 = EFP(2,JP)
                  Z2 = EFP(3,JP)
                  X = X1 - X2
                  Y = Y1 - Y2
                  Z = Z1 - Z2
                  R2 = X * X + Y * Y + Z * Z
                  R = SQRT(R2)
                  R3 = R * R * R
                  R5 = R * R * R3
                  DOT = DIND(1,JP)*X + DIND(2,JP)*Y
     1                 + DIND(3,JP)*Z
                  DOT = THREE * DOT / R5
                  EFXADD = EFXADD - DIND(1,JP) / R3 + DOT * X
                  EFYADD = EFYADD - DIND(2,JP) / R3 + DOT * Y
                  EFZADD = EFZADD - DIND(3,JP) / R3 + DOT * Z
                  EFX = EFX - DIND(1,JP) / R3 + DOT * X
                  EFY = EFY - DIND(2,JP) / R3 + DOT * Y
                  EFZ = EFZ - DIND(3,JP) / R3 + DOT * Z
  400          CONTINUE
  409          INDEX2 = INDEX2 + NPPTS(JM)
  410       CONTINUE
            EFADD(1,IP) = EFXADD
            EFADD(2,IP) = EFYADD
            EFADD(3,IP) = EFZADD
            EFLD(1,IP) = EFX
            EFLD(2,IP) = EFY
            EFLD(3,IP) = EFZ
  420    CONTINUE
  430 CONTINUE
      RETURN
C
 9010 FORMAT(1X,'DIPIT FAILED TO CONVERGE IN',I5,'ITERATIONS, NACC=',I4)
      END
C*MODULE EFINTB  *DECK EFPCMP
      SUBROUTINE EFPCMP(H1,FA,FB,DENTOT,DIP,ODIP,
     *                  XEFI,YEFI,ZEFI,EFLD,EFADD,ABFLD,L2,L1,MCITER)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXATM=500, MXPT=100, MXFRG=50, MXFGPT=MXPT*MXFRG,
     *           MXRT=100)
      PARAMETER (ZERO=0.0D+00, PT5=0.5D+00, DEBYE=2.541766D+00)
C
      CHARACTER*8 POLNAM
C
      LOGICAL OUT
      LOGICAL GOPARR,MASWRK,DSKWRK
      LOGICAL DIRSCF,FDIFF,MINMEM
C
      SAVE EN0
C
      COMMON /CONV  / ACURCY,ENUCR,AJUNK(3),DIFF,ITER,ICALCP,ICBET
      COMMON /EFPOTD/ METHOD,ISCCHG,MOVE
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),POLNAM(MXFGPT)
      COMMON /ENRGYS/ ENUCRMC,EELCT,ETOT,SZ,SZZ,ECORE,ESCF,EERD,E1,E2,
     *                VEN,VEE,EPOT,EKIN,ESTATE(MXRT),STATN
      COMMON /FRFD  / PPEFX(MXFGPT), PPEFY(MXFGPT), PPEFZ(MXFGPT)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG
      COMMON /INDDIP/ TMUX,TMUY,TMUZ,TMUXD,TMUYD,TMUZD,MINMEM
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(400)
      COMMON /OPTSCF/ DIRSCF,FDIFF
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /PNUC  / PPNX(MXFGPT),PPNY(MXFGPT),PPNZ(MXFGPT),PNZRF(3)
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /WFNOPT/ SCFTYP,CITYP,DFTYPE,CCTYP,MPLEVL,MPCTYP
C
      DIMENSION EFLD(3,NPTTPT),EFADD(3,NPTTPT),ABFLD(3,NPTTPT)
      DIMENSION H1(L2),FA(L2),FB(L2),DENTOT(L2),
     *          DIP(L2),ODIP(L2),XEFI(L2),YEFI(L2),ZEFI(L2)
C
#if !defined(SPEC_CPU_NO_HOLLERITH)
      DATA DEBUG  /8HDEBUG   /, DBUGME/8HEF      /
#else
      CHARACTER*8 :: DEBUG_STR
      EQUIVALENCE (DEBUG, DEBUG_STR)
      CHARACTER*8 :: DBUGME_STR
      EQUIVALENCE (DBUGME, DBUGME_STR)
      DATA DEBUG_STR/"DEBUG   "/, DBUGME_STR/"EF      "/
#endif
#if !defined(SPEC_CPU_NO_HOLLERITH)
      DATA RHF,GVB/8HRHF     ,8HGVB     /
#else
      CHARACTER*8 :: GVB_STR
      EQUIVALENCE (GVB, GVB_STR)
      CHARACTER*8 :: RHF_STR
      EQUIVALENCE (RHF, RHF_STR)
      DATA RHF_STR,GVB_STR/"RHF     ","GVB     "/
#endif
#if !defined(SPEC_CPU_NO_HOLLERITH)
      DATA RMC/8HMCSCF   /
#else
      CHARACTER*8 :: RMC_STR
      EQUIVALENCE (RMC, RMC_STR)
      DATA RMC_STR/"MCSCF   "/
#endif
C
C     ---------------------- METHOD 2 -------------------------
C     CALCULATE ITERATIVELY THE INDUCED DIPOLES ON THE FRAGMENTS
C     UNTIL SELF-CONSISTENCY IS REACHED, ADD RESULTING FIELD DURING
C     SAME SCF ITERATION. ITERATION OF INDUCED DIPOLES ALSO COUPLED
C     TO SCF.
C     EFADD         - FIELD DUE TO INDUCED DIPOLE
C     PFX,PFY,PFZ   - TOTAL FIELD, INCLUDING FIELD DUE TO INDUCED DIPOLE
C
C     ---------------------- METHOD 3 -------------------------
C     CALCULATE THE INDUCED DIPOLES ON THE FRAGMENTS ONCE AND ADD
C     RESULTING FIELD NEXT SCF ITERATION, INDUCED DIPOLE ITERATION
C     TO SELF CONSITANCY IS THEREFORE DUE ONLY TO COUPLING TO SCF.
C     EFADD         - FIELD DUE TO INDUCED DIPOLE
C     PFX,PFY,PFZ   - TOTAL FIELD, EXCLUDING FIELD DUE TO INDUCED DIPOLE
C     PFXADD ETC.   - TOTAL FIELD, INCLUDING FIELD DUE TO INDUCED DIPOLE
C
      OUT  = (EXETYP.EQ.DEBUG  .OR.  EXETYP.EQ.DBUGME)  .AND.  MASWRK
C
C      ----- NUCLEAR CONTRIBUTION TO MOLECULAR DIPOLE FIELD -----
C -- GVB ITERATIONS START AT 1, RHF,UHF,ROHF AT 0!, EN0 IS USUAL TERM --
C
      IFIRST = 0
      IF(SCFTYP.NE.GVB) IFIRST=1
      IF(SCFTYP.EQ.RMC) THEN
         IFIRST=2
         ITER=MCITER
      END IF
C
C     -- GET FIELDS FROM NUCLEI, NUCLEAR CONTRIBUTION TO POLARIZATION --
C     -- GET THE FIELD DUE TO MULTIPOLE POINTS IN OTHER FRAGMENTS --
C
      IF(ITER.EQ.IFIRST) THEN
         EN0=ENUCR
         CALL EFNUCP(NAT,ZAN,C,ENUCP)
C
         CALL VCLR(PPEFX,1,MXFGPT)
         CALL VCLR(PPEFY,1,MXFGPT)
         CALL VCLR(PPEFZ,1,MXFGPT)
         IF(NFRG.GT.1) CALL FRGFLD(PPEFX,PPEFY,PPEFZ,NMTTPT)
C
         CALL VCLR(EFADD,1,3*NPTTPT)
      ELSE
         ENUCR=EN0
         IF(NFRG.GT.1 .AND. METHOD.EQ.3) CALL DIPIT(EFLD,EFADD,NPTTPT)
      END IF
C
      TMUX=ZERO
      TMUY=ZERO
      TMUZ=ZERO
      IF (DIRSCF .AND. FDIFF .AND. SCFTYP .NE. GVB)CALL VCLR(DIP,1,L2)
C
      CALL SEQREW(25)
      INDEX = 1
      DO 10 IFRG=1,NFRG
        I1 = INDEX
        INDEX = INDEX + NPPTS(IFRG)
        I2 = I1 + NPPTS(IFRG) - 1
        DO 20 LEFP = I1,I2
C
C     ---- POLARIZABILITY TENSOR ALPHA FOR THE POINT ----
          BETAXX=EFPOL(1,LEFP)
          BETAYY=EFPOL(2,LEFP)
          BETAZZ=EFPOL(3,LEFP)
          BETAXY=EFPOL(4,LEFP)
          BETAXZ=EFPOL(5,LEFP)
          BETAYZ=EFPOL(6,LEFP)
          BETAYX=EFPOL(7,LEFP)
          BETAZX=EFPOL(8,LEFP)
          BETAZY=EFPOL(9,LEFP)
C
C   -- READ ELECTRIC FIELD INTEGRALS --
          CALL SQREAD(25,XEFI,L2)
          CALL SQREAD(25,YEFI,L2)
          CALL SQREAD(25,ZEFI,L2)
C
          IF(OUT) THEN
            IF (MASWRK) WRITE(IW,9500)
            CALL PRTRIL(XEFI,L1)
            CALL PRTRIL(YEFI,L1)
            CALL PRTRIL(ZEFI,L1)
          END IF
C
C    ---- ELECTRIC FIELD AT THE POINT ----
           PEX=TRACEP(DENTOT,XEFI,L1)
           PEY=TRACEP(DENTOT,YEFI,L1)
           PEZ=TRACEP(DENTOT,ZEFI,L1)
C
C    ---- NUCLEAR FIELD AT THE POINT ----
           PNX=PPNX(LEFP)
           PNY=PPNY(LEFP)
           PNZ=PPNZ(LEFP)
C
C        ------------- TOTAL FIELD -------------
          IF(OUT.AND.MASWRK) WRITE(IW,*) 'PE=',PEX,PEY,PEZ,'PN=',
     *                                       PNX,PNY,PNZ
C
          ABFLD(1,LEFP) = PEX
          ABFLD(2,LEFP) = PEY
          ABFLD(3,LEFP) = PEZ
C
          IF (METHOD .EQ.3) THEN
             PFX=PEX+PNX+PPEFX(LEFP)+EFADD(1,LEFP)
             PFY=PEY+PNY+PPEFY(LEFP)+EFADD(2,LEFP)
             PFZ=PEZ+PNZ+PPEFZ(LEFP)+EFADD(3,LEFP)
          ELSE
             PFXADD=PEX+PNX+PPEFX(LEFP)+EFADD(1,LEFP)
             PFYADD=PEY+PNY+PPEFY(LEFP)+EFADD(2,LEFP)
             PFZADD=PEZ+PNZ+PPEFZ(LEFP)+EFADD(3,LEFP)
             PFX=PEX+PNX+PPEFX(LEFP)
             PFY=PEY+PNY+PPEFY(LEFP)
             PFZ=PEZ+PNZ+PPEFZ(LEFP)
          END IF
             EFLD(1,LEFP) = PFX
             EFLD(2,LEFP) = PFY
             EFLD(3,LEFP) = PFZ
C
C         ------------ INDUCED DIPOLES ------------
          IF (METHOD .EQ.3) THEN
             PMUX=(PFX*BETAXX+PFY*BETAXY+PFZ*BETAXZ)
             PMUY=(PFY*BETAYY+PFX*BETAYX+PFZ*BETAYZ)
             PMUZ=(PFZ*BETAZZ+PFX*BETAZX+PFY*BETAZY)
             DIND(1,LEFP)=PMUX
             DIND(2,LEFP)=PMUY
             DIND(3,LEFP)=PMUZ
             PMUX=(PFX*BETAXX+PFY*BETAYX+PFZ*BETAZX)
             PMUY=(PFY*BETAYY+PFX*BETAXY+PFZ*BETAZY)
             PMUZ=(PFZ*BETAZZ+PFX*BETAXZ+PFY*BETAYZ)
             DINDD(1,LEFP)=PMUX
             DINDD(2,LEFP)=PMUY
             DINDD(3,LEFP)=PMUZ
          ELSE
             PMUX=(PFXADD*BETAXX+PFYADD*BETAXY+PFZADD*BETAXZ)
             PMUY=(PFYADD*BETAYY+PFXADD*BETAYX+PFZADD*BETAYZ)
             PMUZ=(PFZADD*BETAZZ+PFXADD*BETAZX+PFYADD*BETAZY)
             DIND(1,LEFP)=PMUX
             DIND(2,LEFP)=PMUY
             DIND(3,LEFP)=PMUZ
             PMUX=(PFXADD*BETAXX+PFYADD*BETAYX+PFZADD*BETAZX)
             PMUY=(PFYADD*BETAYY+PFXADD*BETAXY+PFZADD*BETAZY)
             PMUZ=(PFZADD*BETAZZ+PFXADD*BETAXZ+PFYADD*BETAYZ)
             DINDD(1,LEFP)=PMUX
             DINDD(2,LEFP)=PMUY
             DINDD(3,LEFP)=PMUZ
          END IF
   20   CONTINUE
   10 CONTINUE
C
      IF(NFRG.GT.1 .AND. METHOD.EQ.2)CALL DIPIT(EFLD,EFADD,NPTTPT)
      CALL SEQREW(25)
      DO 25 LEFP=1,NPTTPT
         PNX=PPNX(LEFP)
         PNY=PPNY(LEFP)
         PNZ=PPNZ(LEFP)
         PMUX = DIND(1,LEFP)
         PMUY = DIND(2,LEFP)
         PMUZ = DIND(3,LEFP)
         PMUXD = DINDD(1,LEFP)
         PMUYD = DINDD(2,LEFP)
         PMUZD = DINDD(3,LEFP)
         PEX=ABFLD(1,LEFP)
         PEY=ABFLD(2,LEFP)
         PEZ=ABFLD(3,LEFP)
         TOTALP=SQRT(PMUXD*PMUXD+PMUYD*PMUYD+PMUZD*PMUZD)
         IF(TOTALP .GT. 0.2)THEN
         IF(MASWRK)WRITE(IW,9999)LEFP,PMUXD,PMUYD,PMUZD,TOTALP
 9999    FORMAT(1X,'WARNING: POINT ',I5,' HAS A LARGE INDUCED DIPOLE',
     *          3F9.4, ' TOTAL: ',F9.4,' D')
         END IF
C HUI LI
         IF(TOTALP .GT. 0.20D+00)THEN
         PMUXD=ZERO
         PMUYD=ZERO
         PMUZD=ZERO
         TOTALP=ZERO
         IF(MASWRK)WRITE(IW,9998)LEFP,PMUXD,PMUYD,PMUZD,TOTALP
 9998    FORMAT(1X,'WARNING: POINT ',I5,' HAS BEEN ZEROED OFF       ',
     *          3F9.4, ' TOTAL: ',F9.4,' D')
         END IF
C
C     ----------- NUCLEAR ENERGY MODIFICATION -----------
C     ---- PLUS TOTAL ENERGY CORRECTION ACCORDING TO ----
C     CORRECTION = +1/2*MU*[<SI|F|SI>-FEFP] - 0.5*ALPHA*FMU*[<SI|F|SI>]
C
         ENUCR = ENUCR-(PMUX*PNX+PMUY*PNY+PMUZ*PNZ) *PT5
     *                +(PMUXD*PEX+PMUYD*PEY+PMUZD*PEZ) *PT5
     *                -(PMUX*PPEFX(LEFP)
     *                 +PMUY*PPEFY(LEFP)
     *                 +PMUZ*PPEFZ(LEFP))           *PT5
     *                -((EFPOL(1,LEFP)*EFADD(1,LEFP)
     *                  +EFPOL(7,LEFP)*EFADD(2,LEFP)
     *                  +EFPOL(8,LEFP)*EFADD(3,LEFP))*PEX
     *                 +(EFPOL(4,LEFP)*EFADD(1,LEFP)
     *                  +EFPOL(2,LEFP)*EFADD(2,LEFP)
     *                  +EFPOL(9,LEFP)*EFADD(3,LEFP))*PEY
     *                 +(EFPOL(5,LEFP)*EFADD(1,LEFP)
     *                  +EFPOL(6,LEFP)*EFADD(2,LEFP)
     *                  +EFPOL(3,LEFP)*EFADD(3,LEFP))*PEZ)*PT5
C
         ENUCRMC = ENUCR
C
C     ----- PREPARE POLARIZED ENVIRONMENT FOR NEXT SCF ITERATION -----
C
         CALL SQREAD(25,XEFI,L2)
         CALL SQREAD(25,YEFI,L2)
         CALL SQREAD(25,ZEFI,L2)
C
C     ----- CALCULATE PERTURBATION DUE TO INDUCED DIPOLES -----
         IF (DIRSCF .AND. FDIFF .AND. SCFTYP .NE. GVB)THEN
            DO 30 K=1,L2
               DIP(K)=DIP(K)-PT5*((PMUX+PMUXD)*XEFI(K)
     *                      +(PMUY+PMUYD)*YEFI(K)+(PMUZ+PMUZD)*ZEFI(K))
     *                      +((EFPOL(1,LEFP)*EFADD(1,LEFP)
     *                        +EFPOL(7,LEFP)*EFADD(2,LEFP)
     *                        +EFPOL(8,LEFP)*EFADD(3,LEFP))*XEFI(K)
     *                       +(EFPOL(4,LEFP)*EFADD(1,LEFP)
     *                        +EFPOL(2,LEFP)*EFADD(2,LEFP)
     *                        +EFPOL(9,LEFP)*EFADD(3,LEFP))*YEFI(K)
     *                       +(EFPOL(5,LEFP)*EFADD(1,LEFP)
     *                        +EFPOL(6,LEFP)*EFADD(2,LEFP)
     *                        +EFPOL(3,LEFP)*EFADD(3,LEFP))*ZEFI(K))*PT5
 30         CONTINUE
C
C     --- IF REGULAR SCF PERTURBATION ADDED TO H1 AS IT IS CALCULTD ---
         ELSE
            DO 40 K=1,L2
               H1(K)=H1(K)-PT5*((PMUX+PMUXD)*XEFI(K)
     *                    +(PMUY+PMUYD)*YEFI(K)+(PMUZ+PMUZD)*ZEFI(K))
     *                    +((EFPOL(1,LEFP)*EFADD(1,LEFP)
     *                      +EFPOL(7,LEFP)*EFADD(2,LEFP)
     *                      +EFPOL(8,LEFP)*EFADD(3,LEFP))*XEFI(K)
     *                     +(EFPOL(4,LEFP)*EFADD(1,LEFP)
     *                      +EFPOL(2,LEFP)*EFADD(2,LEFP)
     *                      +EFPOL(9,LEFP)*EFADD(3,LEFP))*YEFI(K)
     *                     +(EFPOL(5,LEFP)*EFADD(1,LEFP)
     *                      +EFPOL(6,LEFP)*EFADD(2,LEFP)
     *                      +EFPOL(3,LEFP)*EFADD(3,LEFP))*ZEFI(K))*PT5
 40         CONTINUE
         END IF
C
         TMUX=TMUX+PMUX
         TMUY=TMUY+PMUY
         TMUZ=TMUZ+PMUZ
 25   CONTINUE
C
      TMUXD=TMUX*DEBYE
      TMUYD=TMUY*DEBYE
      TMUZD=TMUZ*DEBYE
C
C     ----- ADD DIFFERENCE IN PERTURBATION WHEN DIRSCF AND FDIFF -----
C
      IF(SCFTYP .EQ. RHF) THEN
         IF(DIRSCF  .AND.  FDIFF) THEN
            IF(ITER.EQ.1) CALL VCLR(ODIP,1,L2)
            CALL VADD(H1,1,DIP,1,H1,1,L2)
            CALL VSUB(ODIP,1,DIP,1,ODIP,1,L2)
            CALL VADD(FA,1,ODIP,1,FA,1,L2)
            CALL DCOPY(L2,DIP,1,ODIP,1)
         END IF
      ELSE
         IF(DIRSCF  .AND.  FDIFF .AND. SCFTYP .NE. GVB) THEN
            IF(ITER .EQ. 1)CALL VCLR(ODIP,1,L2)
            CALL VADD(H1,1,DIP,1,H1,1,L2)
            CALL VSUB(ODIP,1,DIP,1,ODIP,1,L2)
            CALL VADD(FA,1,ODIP,1,FA,1,L2)
            CALL VADD(FB,1,ODIP,1,FB,1,L2)
            CALL DCOPY(L2,DIP,1,ODIP,1)
         END IF
      END IF
C
C     --- FOR MINMEM AND GVB H1+PERTURBATION MUST BE WRITTEN TO DAF ---
C
      CALL DAWRIT(IDAF,IODA,H1,L2,80,0)
      IF (MINMEM .OR. SCFTYP .EQ. GVB .OR. SCFTYP .EQ. RMC) THEN
         CALL DAWRIT(IDAF,IODA,H1,L2,11,0)
      END IF
C
        RETURN
 9500 FORMAT(/1X,'X, Y, AND Z COMPONENTS OF THE ELECTRIC FIELD',
     *       ' ONE ELECTRON INTEGRALS')
      END
C*MODULE EFINTB  *DECK EFNUCP
      SUBROUTINE EFNUCP(N,Z,C,ENUCP)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION Z(N),C(3,N)
C
      CHARACTER*8 POLNAM
C
      PARAMETER (MXAO=2047, MXPT=100, MXFRG=50, MXFGPT=MXPT*MXFRG)
C
      COMMON /EFPBUF/ POLCHG(10),NBUFMO,LBUFF(MXAO),LBF,NAPOL,IAPOL(10)
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),POLNAM(MXFGPT)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG
      COMMON /PNUC  / PNX(MXFGPT),PNY(MXFGPT),PNZ(MXFGPT),PNZRF(3)
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, GLIM=1.0D-03)
C
C     CALCULATES NUCLEI INTERACTING WITH EXTERNAL POINT
C     POLARIZABILITIES
C
      NEFP = NPTTPT
C
C.... CHANGED TO ADD NUCLEAR DAMPING .... WJS 2/2
C.... TO AGREE WITH MEYER, NUCLEAR TERM SHOULD NOT BE DAMPED!!! 12/22
C.... MAKE UP YOUR MIND, ALREADY .... DRG 8/90
C
      ENFP=ZERO
      DO 340 I=1,NEFP
      PNX(I) = ZERO
      PNY(I) = ZERO
      PNZ(I) = ZERO
C
C     ----- CALCULATE FIELD AT THE POINT ---
C
      IF (NBUFMO .EQ. 0) THEN
      DO 330 J = 1,N
      RR = ZERO
      DO 320 K = 1,3
 320  RR = RR + (EFP(K,I) - C(K,J))**2
      IF(RR.LT.GLIM) GO TO 330
      FACT=ONE
      RR3 = RR * SQRT(RR)
      PNX(I) = PNX(I) + FACT*Z(J) *(EFP(1,I)-C(1,J))/RR3
      PNY(I) = PNY(I) + FACT*Z(J) *(EFP(2,I)-C(2,J))/RR3
      PNZ(I) = PNZ(I) + FACT*Z(J) *(EFP(3,I)-C(3,J))/RR3
 330  CONTINUE
      ELSE
C     ---TAKE INTO ACCOUNT POSSIBLE PRESENCE OF BUFFER IN QM/MM ----
C     INTERACTIONS ONLY WITH THE AB INITIO ZONE NUCLEI AND
C     THE 'BORDER' ATOMS WITH A SPECIAL CHARGE ARE CONSIDERED ONLY
      NATAB=N-LBF
      DO 430 JJ = 1,NATAB+NAPOL
      IF(JJ.GT.NATAB)THEN
         NUMP=JJ-NATAB
         J=IAPOL(NUMP)
         CHARGE=POLCHG(NUMP)
      ELSE
         J=JJ
         CHARGE=Z(J)
      END IF
      RR = ZERO
      DO 420 K = 1,3
 420  RR = RR + (EFP(K,I) - C(K,J))**2
      IF(RR.LT.GLIM) GO TO 430
      FACT=ONE
      RR3 = RR * SQRT(RR)
      PNX(I) = PNX(I) + FACT*CHARGE *(EFP(1,I)-C(1,J))/RR3
      PNY(I) = PNY(I) + FACT*CHARGE *(EFP(2,I)-C(2,J))/RR3
      PNZ(I) = PNZ(I) + FACT*CHARGE *(EFP(3,I)-C(3,J))/RR3
 430  CONTINUE
      END IF
C
C     ----- CALCULATE INTERACTION OF POLARIZABILITY TENSOR WITH FIELD --
C
      POLXX=-EFPOL(1,I)
      POLYY=-EFPOL(2,I)
      POLZZ=-EFPOL(3,I)
      POLXY=-EFPOL(4,I)
      POLXZ=-EFPOL(5,I)
      POLYZ=-EFPOL(6,I)
      POLYX=-EFPOL(7,I)
      POLZX=-EFPOL(8,I)
      POLZY=-EFPOL(9,I)
      ENFP = ENFP+(POLXX*PNX(I)**2+POLYY*PNY(I)**2+POLZZ*PNZ(I)**2
     1           +(POLXY+POLYX)*PNX(I)*PNY(I)
     2           +(POLXZ+POLZX)*PNX(I)*PNZ(I)
     3           +(POLYZ+POLZY)*PNY(I)*PNZ(I))
 340  CONTINUE
      ENUCP = ENFP
      RETURN
      END
C*MODULE EFINTB  *DECK FRGFLD
      SUBROUTINE FRGFLD(PPEFX,PPEFY,PPEFZ,N)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL DOMONO,DODIPO,DOQUAD,DOOCTU
C
      PARAMETER (MXPT=100, MXFRG=50, MXFGPT=MXPT*MXFRG)
C
      DIMENSION PPEFX(N),PPEFY(N),PPEFZ(N)
      DIMENSION QUA(6,MXFGPT)
C
      CHARACTER*8 FRGNME,POLNAM
C
      COMMON /DOMULT/ DOMONO(MXFGPT),DODIPO(MXFGPT),DOQUAD(MXFGPT),
     *                DOOCTU(MXFGPT)
      COMMON /EFMULT/ EFC(3,MXFGPT),EFCHG(2,MXFGPT),EFATRM(MXFGPT),
     *                EFBTRM(MXFGPT),EFATRM2(MXFGPT),EFBTRM2(MXFGPT),
     *                EFDIP(3,MXFGPT),EFQAD(6,MXFGPT),
     *                EFOCT(10,MXFGPT),FRGNME(MXFGPT)
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),POLNAM(MXFGPT)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG
C
      PARAMETER (ZERO = 0.0D+00, FIVE=5.0D+00, TWO=2.0D+00)
      PARAMETER (THREE=3.0D+00, PT5=0.5D+00, ONEPT5=1.5D+00)
C
C     THIS CODE WAS ORIGINALLY WRITTEN BY DR. W.STEVENS, AND REWRITTEN
C     FOR GAMESS BY JHJ 7/15/91.  IT CALCULATES THE ELECTRIC FIELD DUE
C     TO POINT CHARGES, DIPOLES, AND QUADRUPOLES.
C
      DO 210 I = 1,NMTTPT
        IF(.NOT.DOQUAD(I)) GO TO 210
        XX = EFQAD(1,I)
        YY = EFQAD(2,I)
        ZZ = EFQAD(3,I)
        XY = EFQAD(4,I)
        XZ = EFQAD(5,I)
        YZ = EFQAD(6,I)
        DUM = XX + YY + ZZ
        QUA(1,I) = PT5 * (THREE * XX - DUM)
        QUA(2,I) = PT5 * (THREE * YY - DUM)
        QUA(3,I) = PT5 * (THREE * ZZ - DUM)
        QUA(4,I) = ONEPT5 * XY
        QUA(5,I) = ONEPT5 * XZ
        QUA(6,I) = ONEPT5 * YZ
210   CONTINUE
      INDEX = 1
      DO 300 IM = 1,NFRG
        I1 = INDEX
        INDEX = INDEX + NPPTS(IM)
        I2 = I1 + NPPTS(IM) - 1
        DO 250 IP=I1,I2
          EFX = ZERO
          EFY = ZERO
          EFZ = ZERO
          X1 = EFP(1,IP)
          Y1 = EFP(2,IP)
          Z1 = EFP(3,IP)
          INDEX2 = 1
          DO 200 JM = 1,NFRG
            J1 = INDEX2
            INDEX2 = INDEX2 + NMPTS(JM)
            J2 = J1 + NMPTS(JM) - 1
            IF(IM.EQ.JM) GO TO 200
            DO 100 JP = J1,J2
C       WRITE(6,*)'IN FRGFLD,IM,JM,IP,JP',IM,JM,IP,JP
              X2 = EFC(1,JP)
              Y2 = EFC(2,JP)
              Z2 = EFC(3,JP)
              X = X1 - X2
              Y = Y1 - Y2
              Z = Z1 - Z2
              R2 = X*X + Y*Y + Z*Z
              R = SQRT(R2)
              R3 = R*R*R
              R5 = R3 * R2
              R7 = R5 * R2
              IF(ICHGP.EQ.1)THEN
                 CF = EFBTRM(JP)
                 EX = EFATRM(JP)
              ELSE
                 CF = ZERO
                 EX = ZERO
              END IF
C
C  FIELD DUE TO TOTAL CHARGE Q (=ELECTRONIC+NUCLEAR)
C
          IF(DOMONO(JP))THEN
              Q = EFCHG(1,JP) + EFCHG(2,JP)
              IF(ICHGP.EQ.1)THEN
                 EX2=EXP(-EX*R2)
                 SCREEN=1.0D0-CF*EX2
                 EFX = EFX + Q*X*SCREEN/R3 - 2.0D0*Q*CF*X*EX*EX2/R
                 EFY = EFY + Q*Y*SCREEN/R3 - 2.0D0*Q*CF*Y*EX*EX2/R
                 EFZ = EFZ + Q*Z*SCREEN/R3 - 2.0D0*Q*CF*Z*EX*EX2/R
              ELSE
                 EFX = EFX + Q*X/R3
                 EFY = EFY + Q*Y/R3
                 EFZ = EFZ + Q*Z/R3
              END IF
          END IF
C
C  FIELD DUE TO DIPOLE
C
          IF(DODIPO(JP))THEN
              DOT = EFDIP(1,JP)*X + EFDIP(2,JP)*Y + EFDIP(3,JP)*Z
              DOT = THREE*DOT/R5
              EFX = EFX - EFDIP(1,JP)/R3 + DOT*X
              EFY = EFY - EFDIP(2,JP)/R3 + DOT*Y
              EFZ = EFZ - EFDIP(3,JP)/R3 + DOT*Z
          END IF
C
C  FIELD DUE TO QUADRUPOLE
C
          IF(DOQUAD(JP))THEN
          C1=FIVE*(QUA(1,JP)*X**2+QUA(2,JP)*Y**2+QUA(3,JP)*Z**2
     *      +TWO*(QUA(4,JP)*X*Y+QUA(5,JP)*X*Z+QUA(6,JP)*Y*Z))/R7
C    *      -    (QUA(1,JP)+QUA(2,JP)+QUA(3,JP))/R5
              EFX = EFX + X*(C1-TWO*QUA(1,JP)/R5)
     *                  - TWO*(QUA(4,JP)*Y+QUA(5,JP)*Z)/R5
              EFY = EFY + Y*(C1-TWO*QUA(2,JP)/R5)
     *                  - TWO*(QUA(4,JP)*X+QUA(6,JP)*Z)/R5
              EFZ = EFZ + Z*(C1-TWO*QUA(3,JP)/R5)
     *                  - TWO*(QUA(5,JP)*X+QUA(6,JP)*Y)/R5
        END IF
C
C  OCTUPOLES ARE NOT INCLUDED
C
  100       CONTINUE
  200     CONTINUE
          PPEFX(IP) = PPEFX(IP) + EFX
          PPEFY(IP) = PPEFY(IP) + EFY
          PPEFZ(IP) = PPEFZ(IP) + EFZ
  250   CONTINUE
  300 CONTINUE
C
      RETURN
      END
C*MODULE EFINTB  *DECK POLINT
      SUBROUTINE POLINT(PEX,PEY,PEZ,NUM2)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      CHARACTER*8 POLNAM
C
      LOGICAL IANDJ,NORM,DOUBLE,OUT
      LOGICAL GOPARR,MASWRK,DSKWRK
C
      PARAMETER(MXATM=500, MXPT=100, MXFRG=50, MXFGPT=MXPT*MXFRG)
      PARAMETER(MXSH=1000,MXGTOT=5000)
C
      DIMENSION PEX(NUM2),PEY(NUM2),PEZ(NUM2)
C
      DIMENSION XIN(128),YIN(128),ZIN(128),
     1          PLX(100),PLY(100),PLZ(100)
      DIMENSION DIJ(100),FIJ(100)
      DIMENSION IX(20),IY(20),IZ(20),JX(20),JY(20),JZ(20)
      DIMENSION IJX(100),IJY(100),IJZ(100)
C
      COMMON /CSSTV / CX,CY,CZ
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),POLNAM(MXFGPT)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(400)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),
     1                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     2                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /ROOT  / XX,U(9),W(9),NROOTS
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /STV   / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,NI,NJ
C
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     1          3, 0, 0, 2, 2, 1, 0, 1, 0, 1/
      DATA IX / 1, 5, 1, 1, 9, 1, 1, 5, 5, 1,
     1         13, 1, 1, 9, 9, 5, 1, 5, 1, 5/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     1          0, 3, 0, 1, 0, 2, 2, 0, 1, 1/
      DATA IY / 1, 1, 5, 1, 1, 9, 1, 5, 1, 5,
     1          1,13, 1, 5, 1, 9, 9, 1, 5, 5/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     1          0, 0, 3, 0, 1, 0, 1, 2, 2, 1/
      DATA IZ / 1, 1, 1, 5, 1, 1, 9, 1, 5, 5,
     1          1, 1,13, 1, 5, 1, 5, 9, 9, 5/
C
      DATA ZERO,ONE/0.0D+00,1.0D+00/
      DATA PI212 /1.1283791670955D+00/
      DATA SQRT3 /1.73205080756888D+00/
      DATA SQRT5 /2.23606797749979D+00/
      DATA RLN10 /2.30258D+00/
#if !defined(SPEC_CPU_NO_HOLLERITH)
      DATA DBUGME  /8HINT1    /
#else
      CHARACTER*8 :: DBUGME_STR
      EQUIVALENCE (DBUGME, DBUGME_STR)
      DATA DBUGME_STR/"INT1    "/
#endif
C
C------- THIS VERSION HAS THE METHOD=1 STUFF OF HONDO CUT OUT.
C
      OUT = NPRINT.EQ.3 .OR. EXETYP.EQ.DBUGME
C
C     ----- INTIALIZE PARALLEL -----
C
      IPCOUNT = ME - 1
      NEFP = NPTTPT
      TOL=RLN10*ITOL
      NORM=NORMF.NE.1.OR.NORMP.NE.1
C
      CALL SEQREW(25)
C
      DO 9200 IC=1,NEFP
      DO 41 I=1,NUM2
      PEX(I) = ZERO
      PEY(I) = ZERO
      PEZ(I) = ZERO
  41  CONTINUE
C     IF(MASWRK)WRITE(6,*)'FOR POLARIZABLE POINT ',IC
      CX=EFP(1,IC)
      CY=EFP(2,IC)
      CZ=EFP(3,IC)
C
C     ----- ISHELL
C
      DO 9000 II=1,NSHELL
      I=KATOM(II)
      XI=C(1,I)
      YI=C(2,I)
      ZI=C(3,I)
      I1=KSTART(II)
      I2=I1+KNG(II)-1
      LIT=KTYPE(II)
      MINI=KMIN(II)
      MAXI=KMAX(II)
      LOCI=KLOC(II)-MINI
C
C     ----- JSHELL
C
      DO 8000 JJ=1,II
C
C     ----- GO PARALLEL! -----
C
            IF (GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 7990
            END IF
      J=KATOM(JJ)
      XJ=C(1,J)
      YJ=C(2,J)
      ZJ=C(3,J)
      J1=KSTART(JJ)
      J2=J1+KNG(JJ)-1
      LJT=KTYPE(JJ)
      MINJ=KMIN(JJ)
      MAXJ=KMAX(JJ)
      LOCJ=KLOC(JJ)-MINJ
      NROOTS=(LIT+LJT+1-2)/2 + 1
      RR=(XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
      IANDJ=II.EQ.JJ
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      IJ=0
      MAX=MAXJ
      DO 50 I=MINI,MAXI
      NX=IX(I)
      NY=IY(I)
      NZ=IZ(I)
      IF(IANDJ) MAX=I
      DO 50 J=MINJ,MAX
      IJ=IJ+1
      IJX(IJ)=NX+JX(J)
      IJY(IJ)=NY+JY(J)
      IJZ(IJ)=NZ+JZ(J)
   50 CONTINUE
      DO 60 I=1,IJ
      PLX(I) = ZERO
      PLY(I) = ZERO
  60  PLZ(I) = ZERO
C
C     ----- I PRIMITIVE
C
      JGMAX=J2
      DO 7000 IG=I1,I2
      AI=EX(IG)
      ARRI=AI*RR
      AXI=AI*XI
      AYI=AI*YI
      AZI=AI*ZI
      CSI=CS(IG)
      CPI=CP(IG)
      CDI=CD(IG)
      CFI=CF(IG)
C
C     ----- J PRIMITIVE
C
      IF(IANDJ) JGMAX=IG
      DO 6000 JG=J1,JGMAX
      AJ=EX(JG)
      AA=AI+AJ
      AA1=ONE/AA
      DUM=AJ*ARRI*AA1
      IF(DUM.GT.TOL) GO TO 6000
      FAC=EXP(-DUM)
      CSJ=CS(JG)
      CPJ=CP(JG)
      CDJ=CD(JG)
      CFJ=CF(JG)
      AX=(AXI+AJ*XJ)*AA1
      AY=(AYI+AJ*YJ)*AA1
      AZ=(AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      DOUBLE=IANDJ.AND.IG.NE.JG
      MAX=MAXJ
      NN=0
      DO 310 I=MINI,MAXI
      GO TO ( 70, 80,180,180, 90,180,180,100,180,180,
     1       110,180,180,120,180,180,180,180,180,130),I
   70 DUM1=CSI*FAC
      GO TO 180
   80 DUM1=CPI*FAC
      GO TO 180
   90 DUM1=CDI*FAC
      GO TO 180
  100 IF(NORM) DUM1=DUM1*SQRT3
      GO TO 180
  110 DUM1=CFI*FAC
      GO TO 180
  120 IF(NORM) DUM1=DUM1*SQRT5
      GO TO 180
  130 IF(NORM) DUM1=DUM1*SQRT3
  180 IF(IANDJ) MAX=I
      DO 310 J=MINJ,MAX
      GO TO (190,200,300,300,210,300,300,220,300,300,
     1       230,300,300,240,300,300,300,300,300,250),J
  190 DUM2=DUM1*CSJ
      IF(.NOT.DOUBLE) GO TO 300
      IF(I.GT.1) GO TO 195
      DUM2=DUM2+DUM2
      GO TO 300
  195 DUM2=DUM2+CSI*CPJ*FAC
      GO TO 300
  200 DUM2=DUM1*CPJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GO TO 300
  210 DUM2=DUM1*CDJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GO TO 300
  220 IF(NORM) DUM2=DUM2*SQRT3
      GO TO 300
  230 DUM2=DUM1*CFJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GO TO 300
  240 IF(NORM) DUM2=DUM2*SQRT5
      GO TO 300
  250 IF(NORM) DUM2=DUM2*SQRT3
  300 NN=NN+1
  310 DIJ(NN)=DUM2
C
      AAX=AA*AX
      AAY=AA*AY
      AAZ=AA*AZ
      DUM=PI212*AA1
      DUM=DUM+DUM
      DO 800 I=1,IJ
  800 FIJ(I)=DIJ(I)*DUM
C
      XX=AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS.LE.3) CALL RT123
      IF(NROOTS.EQ.4) CALL ROOT4
      MM=0
      DO 830 K=1,NROOTS
      UU=AA*U(K)
      WW=W(K)
      WW=WW*UU
      TT=ONE/(AA+UU)
      T=SQRT(TT)
      X0=(AAX+UU*CX)*TT
      Y0=(AAY+UU*CY)*TT
      Z0=(AAZ+UU*CZ)*TT
      IN=-4+MM
      DO 820 I=1,LIT
      IN=IN+4
      NI=I
      DO 820 J=1,LJT
      JN=IN+J
      NJ=J
      CALL STVINT
      XIN(JN)=XINT
      YIN(JN)=YINT
      ZIN(JN)=ZINT*WW
      CALL POLXYZ
      XIN(JN+64)=XINT
      YIN(JN+64)=YINT
      ZIN(JN+64)=ZINT*WW
  820 CONTINUE
  830 MM=MM+16
      DO 850 I=1,IJ
      NX=IJX(I)
      NY=IJY(I)
      NZ=IJZ(I)
      DUMX=ZERO
      DUMY=ZERO
      DUMZ=ZERO
      MM=0
      DO 840 K=1,NROOTS
      DUMX=DUMX+XIN(NX+MM+64)*YIN(NY+MM   )*ZIN(NZ+MM   )
      DUMY=DUMY+XIN(NX+MM   )*YIN(NY+MM+64)*ZIN(NZ+MM   )
      DUMZ=DUMZ+XIN(NX+MM   )*YIN(NY+MM   )*ZIN(NZ+MM+64)
  840 MM=MM+16
      DUM=FIJ(I)
      PLX(I) = PLX(I) + DUM*DUMX
      PLY(I) = PLY(I) + DUM*DUMY
      PLZ(I) = PLZ(I) + DUM*DUMZ
  850 CONTINUE
C
 6000 CONTINUE
 7000 CONTINUE
C
C
      MAX=MAXJ
      NN=0
      DO 7500 I=MINI,MAXI
      LI=LOCI+I
      IN = (LI*(LI-1))/2
      IF(IANDJ) MAX=I
      DO 7500 J=MINJ,MAX
      LJ=LOCJ+J
      JN=LJ+IN
      NN=NN+1
      PEX(JN)=PLX(NN)
      PEY(JN)=PLY(NN)
      PEZ(JN)=PLZ(NN)
 7500 CONTINUE
C     ----- END PARALLEL
 7990    CONTINUE
 8000 CONTINUE
 9000 CONTINUE
C
C  COLLECT MATRICES ON DISK FOR TWO ELECTRON OPERATOR CONSTRUCTION
C
      IF (GOPARR) CALL DDI_GSUMF(924,PEX,NUM2)
      IF (GOPARR) CALL DDI_GSUMF(925,PEY,NUM2)
      IF (GOPARR) CALL DDI_GSUMF(926,PEZ,NUM2)
C
      CALL SQWRIT(25,PEX,NUM2)
      CALL SQWRIT(25,PEY,NUM2)
      CALL SQWRIT(25,PEZ,NUM2)
C
      IF(OUT)THEN
        IF (MASWRK) WRITE(IW,9500)
        CALL PRTRIL(PEX,NUM)
        CALL PRTRIL(PEY,NUM)
        CALL PRTRIL(PEZ,NUM)
      END IF
C
 9200 CONTINUE
      RETURN
 9500 FORMAT(/1X,'X, Y, AND Z COMPONENTS OF THE INDUCED DIPOLE',
     *       ' ONE ELECTRON INTEGRALS')
      END
C*MODULE EFINTB  *DECK REPINT
      SUBROUTINE REPINT(QQ,GG)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      CHARACTER*8 REPNAM
C
      LOGICAL IANDJ,NORM,DOUBLE
      LOGICAL OUT,GOPARR,MASWRK,DSKWRK
C
      DIMENSION QQ(*),GG(*)
C
      DIMENSION RINT(100)
      DIMENSION DIJ(100),XIN(432),YIN(432),ZIN(432)
      DIMENSION GIJ(100)
      DIMENSION IX(20),IY(20),IZ(20),JX(20),JY(20),JZ(20)
      DIMENSION IJX(100),IJY(100),IJZ(100)
C
      PARAMETER (MXSH=1000, MXGTOT=5000, MXATM=500)
      PARAMETER (MXPT=100, MXFRG=50, MXFGPT=MXPT*MXFRG)
C
      COMMON /CSSTV / CX,CY,CZ
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(400)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /REPPAR/ CREP(3,MXFGPT),CLPR(4*MXFGPT),ZLPR(4*MXFGPT),
     *                NLPR(4*MXFGPT),KFR(MXFGPT),KLR(MXFGPT),
     *                REPNAM(MXFGPT)
      COMMON /ROOT  / XX,U(9),W(9),NROOTS
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /STV   / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,NI,NJ
C
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     1          3, 0, 0, 2, 2, 1, 0, 1, 0, 1/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     1          0, 3, 0, 1, 0, 2, 2, 0, 1, 1/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     1          0, 0, 3, 0, 1, 0, 1, 2, 2, 1/
      DATA IX / 1, 5, 1, 1, 9, 1, 1, 5, 5, 1,
     1         13, 1, 1, 9, 9, 5, 1, 5, 1, 5/
      DATA IY / 1, 1, 5, 1, 1, 9, 1, 5, 1, 5,
     1          1,13, 1, 5, 1, 9, 9, 1, 5, 5/
      DATA IZ / 1, 1, 1, 5, 1, 1, 9, 1, 5, 5,
     1          1, 1,13, 1, 5, 1, 5, 9, 9, 5/
C
      DATA PI212 /1.1283791670955D+00/
      DATA SQRT3 /1.73205080756888D+00/
      DATA SQRT5 /2.23606797749979D+00/
      DATA ZERO,ONE/0.0D+00,1.0D+00/
      DATA RLN10 /2.30258D+00/
#if !defined(SPEC_CPU_NO_HOLLERITH)
      DATA DBUGME/8HINT1    /
#else
      CHARACTER*8 :: DBUGME_STR
      EQUIVALENCE (DBUGME, DBUGME_STR)
      DATA DBUGME_STR/"INT1    "/
#endif
C
C -----CHARGE-REPULSIVE POTENTIAL INTEGRALS FOR POWERS 0 AND -1 OF R.
C
      NREP = NRTTPT
      OUT = NPRINT.EQ.3  .OR.  EXETYP.EQ.DBUGME
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
      NUM2=(NUM*(NUM+1))/2
      DO 40 I=1,NUM2
         QQ(I) = ZERO
  40  CONTINUE
C
C     ----- INTIALIZE PARALLEL -----
C
      IPCOUNT = ME - 1
C
C     ----- ISHELL
C
      DO 600 II = 1,NSHELL
      IAT= KATOM(II)
      XI = C(1,IAT)
      YI = C(2,IAT)
      ZI = C(3,IAT)
      I1 = KSTART(II)
      I2 = I1+KNG(II)-1
      LIT = KTYPE(II)
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
C
C     ----- JSHELL
C
      DO 580 JJ = 1,II
C
C     ----- GO PARALLEL! -----
C
            IF (GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 570
            END IF
      JAT= KATOM(JJ)
      XJ = C(1,JAT)
      YJ = C(2,JAT)
      ZJ = C(3,JAT)
      J1 = KSTART(JJ)
      J2 = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NROOTS = (LIT+LJT-2)/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
      IANDJ = II .EQ. JJ
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      IJ = 0
      MAX = MAXJ
      DO 50 I = MINI,MAXI
      NX = IX(I)
      NY = IY(I)
      NZ = IZ(I)
      IF (IANDJ) MAX = I
      DO 50 J = MINJ,MAX
      IJ = IJ+1
      IJX(IJ) = NX+JX(J)
      IJY(IJ) = NY+JY(J)
      IJZ(IJ) = NZ+JZ(J)
  50  CONTINUE
      DO 60 I=1,IJ
  60  RINT(I) = ZERO
C
C     ----- I PRIMITIVE
C
      JGMAX = J2
      DO 520 IG = I1,I2
C     WRITE(6,*)'IG=',IG
      AI = EX(IG)
      ARRI = AI*RR
      AXI = AI*XI
      AYI = AI*YI
      AZI = AI*ZI
      CSI = CS(IG)
      CPI = CP(IG)
      CDI = CD(IG)
      CFI=CF(IG)
C
C     ----- J PRIMITIVE
C
      IF (IANDJ) JGMAX = IG
      DO 500 JG = J1,JGMAX
C     WRITE(6,*)'JG=',JG
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GO TO 500
      FAC =  EXP(-DUM)
      CSJ = CS(JG)
      CPJ = CP(JG)
      CDJ = CD(JG)
      CFJ=CF(JG)
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      DOUBLE=IANDJ.AND.IG.NE.JG
      MAX = MAXJ
      NN = 0
      DO 170 I=MINI,MAXI
      GO TO (70,80,110,110,90,110,110,100,110,110,
     1       102,110,110,104,110,110,110,110,110,106),I
   70 DUM1=CSI*FAC
      GO TO 110
   80 DUM1=CPI*FAC
      GO TO 110
   90 DUM1=CDI*FAC
      GO TO 110
  100 IF(NORM) DUM1=DUM1*SQRT3
      GO TO 110
  102 DUM1=CFI*FAC
      GO TO 110
  104 IF(NORM) DUM1=DUM1*SQRT5
      GO TO 110
  106 IF(NORM) DUM1=DUM1*SQRT3
  110 IF(IANDJ) MAX=I
      DO 170 J=MINJ,MAX
      GO TO (125,130,160,160,140,160,160,150,160,160,
     1       152,160,160,154,160,160,160,160,160,156),J
  125 DUM2=DUM1*CSJ
      IF(.NOT.DOUBLE) GO TO 160
      IF(I.GT.1) GO TO 126
      DUM2=DUM2+DUM2
      GO TO 160
  126 DUM2=DUM2+CSI*CPJ*FAC
      GO TO 160
  130 DUM2=DUM1*CPJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GO TO 160
  140 DUM2=DUM1*CDJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GO TO 160
  150 IF(NORM) DUM2=DUM2*SQRT3
      GO TO 160
  152 DUM2=DUM1*CFJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GO TO 160
  154 IF(NORM) DUM2=DUM2*SQRT5
      GO TO 160
  156 IF(NORM) DUM2=DUM2*SQRT3
  160 NN=NN+1
  170 DIJ(NN)=DUM2
      AAX = AA*AX
      AAY = AA*AY
      AAZ = AA*AZ
C
      DO 480 IC = 1,NREP
      CX   =CREP(1,IC)
      CY   =CREP(2,IC)
      CZ   =CREP(3,IC)
      PCSQ = (AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2
      DO 480 LTERM=KFR(IC),KLR(IC)
      ALFA = ZLPR(LTERM)
      BETA = CLPR(LTERM)
      PREI = EXP(-AA*ALFA*PCSQ/(AA+ALFA))
      IF(NLPR(LTERM).EQ.2)THEN
C      R TO THE ZERO POWER.
       TT = ONE/(AA+ALFA)
       T  =  SQRT(TT)
       X0 = (AAX+ALFA*CX)*TT
       Y0 = (AAY+ALFA*CY)*TT
       Z0 = (AAZ+ALFA*CZ)*TT
       IN = -4
       DO 206 I = 1,LIT
       IN = IN+4
       NI = I
       DO 206 J = 1,LJT
       JN = IN+J
       NJ = J
       CALL STVINT
       XIN(JN   ) = XINT*T
       YIN(JN   ) = YINT*T
       ZIN(JN   ) = ZINT*T
  206  CONTINUE
       DO 266 I = 1,IJ
       NX    = IJX(I)
       NY    = IJY(I)
       NZ    = IJZ(I)
       RINT(I)=RINT(I)+DIJ(I)*PREI*BETA*XIN(NX)*YIN(NY)*ZIN(NZ)
 266   CONTINUE
      ELSE
C      ONE OVER R.
       DUM = PI212/(AA+ALFA)
       DO 385 I = 1,IJ
       GIJ(I) = DIJ(I)*DUM
  385  CONTINUE
       XX=AA*AA*PCSQ/(AA+ALFA)
       IF(NROOTS .LE. 3) CALL RT123
       IF(NROOTS .EQ. 4) CALL ROOT4
       IF(NROOTS.EQ.5) CALL ROOT5
       IF(NROOTS.EQ.6) CALL ROOT6
       IF(NROOTS.GE.7)THEN
        IF (MASWRK) WRITE(IW,9008)
        CALL ABRT
       END IF
       MM = 0
       DO 425 K = 1,NROOTS
       UU = (ALFA+AA)*U(K)
       WW = W(K)
       TT = ONE/(AA+UU+ALFA)
       T  =  SQRT(TT)
       X0 = (AAX+(UU+ALFA)*CX)*TT
       Y0 = (AAY+(UU+ALFA)*CY)*TT
       Z0 = (AAZ+(UU+ALFA)*CZ)*TT
       IN = -4+MM
       DO 405 I = 1,LIT
       IN = IN+4
       NI = I
       DO 405 J = 1,LJT
       JN = IN+J
       NJ = J
       CALL STVINT
       XIN(JN   ) = XINT
       YIN(JN   ) = YINT
       ZIN(JN   ) = ZINT*WW
  405  CONTINUE
  425  MM = MM+16
       DO 465 I = 1,IJ
       NX    = IJX(I)
       NY    = IJY(I)
       NZ    = IJZ(I)
       DUM = ZERO
       MM    = 0
       DO 445 K = 1,NROOTS
       DUM= DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
  445  MM  = MM+16
       RINT(I)=RINT(I)+GIJ(I)*PREI*BETA*DUM
C       WRITE(6,*)'AFTER RINT, I,RINT(I)',I,RINT(I)
 465   CONTINUE
      END IF
C
 480  CONTINUE
C-------- END OF REP CENTERS LOOP
 500  CONTINUE
 520  CONTINUE
C
C     ----- END OF *PRIMITIVE* LOOPS -----
C     ----- SET QQ MATRIX
C
      MAX=MAXJ
      NN=0
      DO 550 I=MINI,MAXI
      LI=LOCI+I
      IN = (LI*(LI-1))/2
      IF(IANDJ) MAX=I
      DO 550 J=MINJ,MAX
      LJ=LOCJ+J
      JN=LJ+IN
      NN=NN+1
      QQ(JN)=QQ(JN) + RINT(NN)
  550 CONTINUE
C
C     ----- END PARALLEL
C
  570 CONTINUE
C
C     ----- END SHELLS -----
C
  580 CONTINUE
  600 CONTINUE
C
C     ----- SUM UP PARTIAL CONTRIBUTIONS IF PARALLEL -----
C
      IF (GOPARR) CALL DDI_GSUMF(928,QQ,NUM2)
C
      CALL DAREAD(IDAF,IODA,GG,NUM2,11,0)
      CALL VADD(GG,1,QQ,1,GG,1,NUM2)
      CALL DAWRIT(IDAF,IODA,GG,NUM2,11,NAV)
C
C     ----- PRINTING SECTION ----
C
      IF(MASWRK.AND.OUT) THEN
         WRITE(6,9380)
         CALL PRTRIL(QQ,NUM)
         WRITE(6,9128)
         CALL TIMIT(1)
      END IF
      RETURN
C
 9008 FORMAT(/' NUMBER OF POLYNOMIAL ROOTS NEEDED (NROOTS) IS GREATER',
     *        ' THAN 6 IN REPINT.  CALL A PROGRAMMER/QUANTUM CHEMIST.')
 9128 FORMAT(/,' ...... END OF REP INTEGRALS....')
 9380 FORMAT(10X,14("-"),/,10X,"   REP  MATRIX",
     1 /,10X,14(1H-))
      END
