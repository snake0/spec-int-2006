C  4 NOV 03 - KI  - SP0S1S: DO AXES-1 INTEGRALS BY MCMURCHIE-DAVIDSON,
C                   INCORPORATE ROTATION TO AXES2; GENR70,TQ0S1S: TWEAKS
C                   INTJ1 TO INTJ6: NEW AUXILIARIES FOR M-D INTEGRATION
C  7 AUG 02 - JMS - ALTERED COMMENTS TO REFLECT GRADIENT CHANGES
C 16 NOV 01 - JMS - GAMGEN HERE, POPLE PACKAGE INITIALIZATIONS CHANGED
C  8 OCT 01 - JMS - ADDITIONAL REVISIONS
C  1 AUG 01 - JMS - COMPLETE REWRITE OF ROTATED AXIS INTEGRAL CODE.
C                   HISTORY BELOW IS KEPT MAINLY FOR HISTORICAL REASONS
C 13 JUN 01 - JMS - PI/4 VALUE CHANGED FROM INACCURATE 0.7853981625
C 13 JUN 96 - MWS - REMOVE FTNCHEK WARNINGS
C 10 NOV 94 - MWS - REMOVE FTNCHEK WARNINGS
C 15 JUL 94 - BMB - REDIMENSIONED TABLE TO 7200 TOTAL ELEMENTS
C 25 SEP 91 - MWS - COMMON GOUT CONTAINS ONLY POPLE METHOD INTEGRALS
C  9 AUG 91 - TLW - REDIMENSIONED GOUT FROM 3888 TO 151875
C 10 AUG 88 - MWS - MXSH,MXGSH,MXGTOT FROM 120,10,440 TO 1000,30,5000
C 20 MAY 88 - MWS - VECTORIZE TQ1111, PASS GOUT TO TQ0111 BY CALL
C  9 MAY 88 - MWS - USE PARAMETER DIMENSIONS FOR COMMON BLOCKS
C  7 JUL 86 - MWS - SANITIZE FLOATING POINT CONSTATNS
C  4 APR 86 - MWS - LOGICAL OUT IN SP0000
C 22 OCT 85 - STE - USE GENERIC EXP,SQRT; ROT2: IMPROVE LOGIC;
C                   SP0000: USE /CHLT/TOL IN EXPONENT SIZE CHECK
C                   REMOVE DATA DEPENDENCIES IN R30011,R30101,R30111
C                   R31111,TQ1111
C 10 JAN 84 - STE - ROLL ROT2 CODE BACK INTO LOOPS
C 16 DEC 83 - STE - ROLL TQ1111 CODE BACK INTO LOOPS
C  2 OCT 82 - MWS,NDSU - CONVERT TO IBM
C
C*MODULE INT2B   *DECK GAMGEN
      SUBROUTINE GAMGEN(NDER)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C         ----- COMPUTES AND TABULATES F0(X) TO F5(X)
C               IN RANGE: 0.0 <= X <= CF1, IN STEPS OF FIN,
C               OR FOR GRADIENTS
C               IN RANGE: 0.0 <= X <= CG1, IN STEPS OF GIN.
C               USED BY THE 1-E ROUTINE SP0S1S IN MODULE INT2B
C               AND  BY THE 2-E ROUTINE JKDG80 IN MODULE GRD2B
C               THE TABLE IS GENERATED ONLY ONCE.
C               FINDS MAXIMUM VALUE OF S AND P COEFFICIENTS.
C               SETS LIMITS DETERMINING HOW ACCURATELY A SET
C               OF INTEGRALS NEED BE EVALUATED TO GUARANTEE
C               OVERALL INTEGRAL ACCURACY -----
C
C     INPUT ARGUMENT:
C           NDER= 0 ... INTEGRAL CALCULATIONS
C           NDER= 1 ... GRADIENT CALCULATIONS
C     (NEW) NDER= 2 ... INTEGRAL CALCULATIONS + FILMAX IN-LINING
C
C===================
C     JMS+MWS, 2001:
C     COMPLETELY REWRITTEN CODE GENERATED IDENTICAL RESULTS (ENERGY
C     AND GRADIENT AND NUMBERS OF INTEGRALS, USING THE 1988 PARAMETERS.
C     THE NEW INTEGRAL CODE MAY BE SLIGHTLY SLOWER THAN THE ORIGINAL,
C     AND THE GRADIENT ABOUT THE SAME SPEED AS THE ORIGINAL, BUT THIS
C     DEPENDS ON EXACTLY WHAT COMPUTER BRAND IS BEING USED.
C
C     INVESTIGATION OF THE ACCURACY PARAMETERS LEAD TO SETTING
C     'EI1'='EI2'=1.E-11, INSTEAD OF 1.E-10, AND IN A FORM WHERE THEY
C     ARE TIED TO THE INPUT VALUE OF CUTOFF. THIS CHANGE IS RESPONSIBLE
C     FOR FINDING SOME OF THE "MISSING INTEGRALS", BRINGING THE ROTATED
C     AXIS CODE'S INTEGRAL COUNT CLOSE TO THE HONDO COUNT.
C     SETTING 'EI1'='EI2'=1.E-12 MAKES THE NUMBER OF INTEGRALS ALMOST
C     IDENTICAL TO THE HONDO COUNT, BUT TAKES TOO MUCH LONGER.
C     FURTHER, SETTING 'EI1'=1.E-11 AND 'EI2'=1.E-13 GETS THE 'CORRECT'
C     NUMBER OF INTEGRALS WITH NOT APPRECIABLE PENALTY IN RUNNING TIME.
C
C     CHANGING 'CUF' FROM 20 TO 25 REMOVES HALF OF THE ENERGY DIFFERENCE
C     WITH HONDO, FURTHER INCREASING 'CUF' DOES NOT SEEM TO REMOVE ANY
C     MORE OF THE ENERGY DIFFERENCE.
C     SETTING 'CUG' NEAR 17, GETS AN RMS GRADIENT CLOSER TO HONDO'S.
C     SETTING 22 <= 'CX1' <= 28 DOES NOT PARTICULARLY AFFECT ACCURACY
C     (IMPLIES AN EXPONENTIAL THRESHOLD OF 50.657 <= 'CUX' <= 64.472).
C
C     CHANGING THE INTERVALS 'FIN' AND 'GIN' FOR THE ERF INTERPOLATION
C     TABLE MAY BE THE MOST CONSTRUCTIVE WAY TO PRODUCE BETTER AGREEMENT
C     WITH THE HONDO INTEGRALS.  BASIS SETS WITH DIFFUSE L SHELLS MAY BE
C     THE PLACE TO EXPLORE THIS, AS EVEN THE NEW VALUES FOR 'EI1/2' AND
C     'CUF' DO NOT PRODUCE ACCURATE VIRTUAL ORBITAL LCAO VALUES.
C     HOWEVER, THE ZTHRSH TEST IN THE MAIN INTEGRAL DRIVER WAS CHANGED
C     TO SEND DIFFUSE L SHELL INTEGRALS TO HONDO ONLY IF THE VIRTUALS
C     ARE OCCUPIED (E.G. MP2 AND CI).
C
C     THE FOLLOWING PARAMETERS ARE THE KEY ONES IN DETERMINING
C     THE ACCURACY OF THE INTEGRALS CALCULATION:
C
C     EI1 SUBSTITUTES ERROR1 DEFINED IN ROUTINE FILMAX IN MODULE INT2B
C     EI2 SUBSTITUTES ERROR2 DEFINED IN ROUTINE FILMAX IN MODULE INT2B
C     FIN SUBSTITUTES P08    INTERVAL FOR INTEGRAL CALCULATION
C     GIN SUBSTITUTES P05    INTERVAL FOR GRADIENT CALCULATION
C     CUF SUBSTITUTES VAR1   DEFINED IN ROUTINE FILMAX IN MODULE INT2B
C     CUF SUBSTITUTES VAR2   DEFINED IN ROUTINE FILMAX IN MODULE INT2B
C     CUG SUBSTITUTES VAR3   THRESHOLD IN GRADIENT CALCULATION
C
C     SENSITIVITY STUDIES SHOW THAT:
C     EI1 AND EI2 ARE IMPORTANT TO GET THE NUMBER OF INTEGRALS CORRECT
C     FIN AND GIN ARE IMPORTANT TO GET A GOOD ESTIMATE OF THE TOTAL
C                 ENERGY AND THE RMS GRADIENT, RESPECTIVELY
C     CUF IS IMPORTANT TO GET A GOOD ESTIMATE OF THE TOTAL ENERGY
C     CUG IS IMPORTANT TO GET A GOOD ESTIMATE OF THE RMS GRADIENT
C     CUX IS NOT PARTICULARLY IMPORTANT TO GET A GOOD ESTIMATE OF THE
C                 TOTAL ENERGY OR THE RMS GRADIENT
C
C     THE FOLLOWING PARAMETERS VALUES SEEM TO PRODUCE A GOOD BALANCE
C     BETWEEN ACCURACY AND SPEED OF THE CALCULATIONS
C
      PARAMETER (EC1= 1.0D-02, EC2= 1.0D-04)
      PARAMETER (FIN=6.25D-02, GIN=0.05D+00)
      PARAMETER (CF1=25.0D+00, CG1=17.0D+00, CX1=25.0D+00)
C
C     AS AN INDICATION OF THE ABOVE, SEE THE FOLLOWING INSTANCES:
C       6-31G(D) BASIS SET    CPU TIMING FROM SUN E450             TOTAL
C     INTTYP       # INTS       TOTAL ENERGY        RMS GRAD.       TIME
C PENTENAL MOLECULE...106 AO-S
C     POPLE      11,833,060   -268.827 020 1639   0.009 403 622    125.5
C     HONDO      11,833,060   -268.827 020 1663   0.009 403 652    162.9
C NICOTINE MOLECULE...208 AO-S
C     POPLE     128,845,447   -495.693 471 9566   0.013 383 774   1524.5
C     HONDO     128,845,447   -495.693 471 9600   0.013 383 734   1809.4
C LUCIFERIN MOLECULE...294 AO-S
C     POPLE     249,632,366  -1549.690 097 1864   0.024 472 402   3528.2
C     HONDO     249,632,365  -1549.690 097 1957   0.024 472 438   3996.6
C
C     HP'S F90 AND LINUX' G77 DO NOT LIKE THE ARITHMETIC BELOW.
C     THE SOLUTION IS TO COMPUTE M3R FROM THESE FORMULAE,
C     AND COPY ITS VALUE TO GAMGEN, JKDG80, AND SP0S1S
C
C     PARAMETER (M3F=INT(CF1/FIN))
C     PARAMETER (M3G=INT(CG1/GIN))
C     PARAMETER (M3R=MAX(M3F,M3G)+1)
C
C     ==================================================================
C     THIS GROUP OF STATEMENTS IS INTERRELATED FOR ROUTINES
C     GAMGEN, GENR70 AND SP0S1S IN INT2B, AND JKDG80, GRDG80 AND GRDPER
C     IN GRD2B. IF YOU CHANGE THESE, CHANGE ALL SIX PLACES EQUIVALENTLY.
C
      PARAMETER (M3R=401)
      COMMON /INTACC/ EI1,EI2,CUF,RFI,CUG,RGI,CUX,R(3,0:5,0:M3R)
C     ==================================================================
C
C     SETTING 15 <= 'CUT' <= 25 DOES NOT PARTICULARLY AFFECT ACCURACY.
C     GIVEN THAT (GENERALLY) WE WORK IN 64-BITS PRECISION (APPROX.
C     EQUAL TO 14 SIGNIFICANT DIGITS), A RELATIVE TOLERANCE 'RTL'
C     SMALLER THAN 1.E-14 (SEE EXPANSIONS IN LOOPS 110 AND 140)
C     WOULD NOT MAKE ANY SENSE.
C
      PARAMETER (CUT=20.0D+00, RTL=1.0D-14)
C===================
C
      PARAMETER (MXGTOT=5000, MXSH=1000)
      PARAMETER (MXGSH=30, MXG2=MXGSH*MXGSH)
C
      COMMON /MAXC  / CMAX(MXGTOT),CMAXA(MXGSH),CMAXB(MXGSH),
     2                CMAXC(MXGSH),CMAXD(MXGSH),ISMLP(MXG2),ISMLQ
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     2                CF(MXGTOT),CG(MXGTOT),
     3                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     4                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      LOGICAL OUT
      COMMON /SHLT  / TOL,CUTOFF,ICOUNT,OUT
C
      DIMENSION F(0:5),X(-2:M3R+2),E(-2:M3R+2),Y(0:5,-2:M3R+2)
C
      PARAMETER (PT5=0.5D+00, ONE=1.0D+00, RLN10=2.30258D+00)
      PARAMETER (ZPT184=0.184D+00, OO6=1.0D+00/6.0D+00)
CC    PARAMETER (PIDIV4=0.785398163397448309615660845819D+00)
      PARAMETER (PIDIV4=0.785398163397448D+00)
C
CC    PIDIV4= ATAN(ONE)
      PI4= PIDIV4
C
C THIS IS A CHECK ON THE DIMENSIONING
C
      M3F=INT(CF1/FIN)
      M3G=INT(CG1/GIN)
      IF(M3R .LT. MAX(M3F,M3G)+1) THEN
         WRITE(6,*)'GAMGEN: DIMENSION PROBLEM, M3F,M3G,M3R=',M3F,M3G,M3R
         CALL ABRT
      END IF
C
      XIN= FIN
      IF(NDER.EQ.1) XIN= GIN
C
C PREPARE THE ARGUMENT AND SAVE A FEW OPERATIONS.
C
      EMI= EXP(-XIN)
      XVA=-XIN-XIN
      EMX= PT5* EXP(-XVA)
      DO 100 K=-2,M3R+2
CC       X(K)= XIN*K
CC       E(K)= PT5* EXP(-X(K))
         X(K)= XVA
         E(K)= EMX
         XVA= XVA+XIN
         EMX= EMX*EMI
  100 CONTINUE
C
      M= 5
      REM= M
      DO 180 K=-2,M3R+2
         XVA= X(K)
         EMX= E(K)
         FAC= REM-PT5
C
C RANGES FOR APPROXIMATE SOLUTION
C
         IF(XVA.LE.CUT) THEN
            DEN= FAC+ONE
            TRM= ONE/DEN
            SUM= TRM
  110       DEN= DEN+ONE
               TRM= TRM*XVA/DEN
               SUM= SUM+TRM
            IF( ABS(TRM).GT. ABS(RTL*SUM)) GO TO 110
C
            F(M)= EMX*SUM
         ELSE
            XIN= ONE/XVA
            EMI= EMX*XIN
            FAX= FAC*XIN
            APP= SQRT(PI4*XIN)
            FAC= FAX
            DO 130 I=1,M
               APP= APP*FAC
  130       FAC= FAC-XIN
            TRM= XVA+REM
            NTR= INT(TRM)
            TRM= ONE
            SUM= ONE-APP/EMI
            DO 140 I=2,NTR
               TRM= TRM*FAX
               SUM= SUM+TRM
               IF( ABS(TRM).LE. ABS(RTL*SUM)) GO TO 150
  140       FAX= FAX-XIN
C
  150       F(M)=-EMI*SUM
         ENDIF
C
C RECUR DOWNWARDS TO F(0)
C
         DEN= REM-PT5
         DO 160 J=M,1,-1
            F(J-1)=(F(J)*XVA+EMX)/DEN
  160    DEN= DEN-ONE
C
         DO 170 J=0,M
            Y(J,K)= F(J)
  170    CONTINUE
  180 CONTINUE
C
C NOW, PUT VARIABLES INTO COMMON BLOCK /INTACC/
C
      IF(NDER.EQ.2) THEN
C
C FIND MAXIMUM VALUE OF S AND P COEFFICIENTS
C
         DO 195 I=1,NSHELL
            L = KSTART(I)
            N = L+KNG(I)-1
            DO 190 J=L,N
  190       CMAX(J)= MAX( ABS(CS(J)), ABS(CP(J)))
  195    CONTINUE
         EI1= EC1*CUTOFF
         EI2= EC2*CUTOFF
      ENDIF
      CUF= CF1
      RFI= ONE/FIN
      CUG= CG1
      RGI= ONE/GIN
      CUX= CX1*RLN10
C
      C01 = OO6+ZPT184*PT5
      C02 = OO6*ZPT184
      DO 200 K=0,M3R
         DO 200 J=0,M
            R(1,J,K)= Y(J,K  )
            R(2,J,K)= Y(J,K+1)-Y(J,K  )
            T01 =(Y(J,K+1)-Y(J,K  ))-(Y(J,K  )-Y(J,K-1))
            T02 =(Y(J,K+2)-Y(J,K+1))-(Y(J,K-1)-Y(J,K-2))
            R(3,J,K)= C01*T01- C02*T02
  200 CONTINUE
C
      RETURN
      END
C*MODULE INT2B   *DECK GENR70
      SUBROUTINE GENR70(IEXCH,SCHSKP)
C
C                    TWO ELECTRON SP INTEGRAL PACKAGE
C            THE ORIGINAL ROUTINES WERE LIFTED FROM GAUSSIAN76
C          J.A.POPLE, W.J.HEHRE  J.COMPUT.PHYS. 27, 161-168(1978)
C
C     IEXCH IS USED DURING THE FORMATION OF P OR PK SUPERMATRICES.
C     SCHSKP (SCHWARZ SKIP) MEANS ONLY IB INDEXING, AND ZEROING IS DONE.
C
C     GENR70 EVALUATES THOSE INTEGRALS INVOLVING ONLY S AND P FUNCTIONS.
C     ACCEPTS NUMBERS OF FOUR SHELLS: ISHELL  JSHELL  KSHELL  LSHELL
C     FINDS THEIR ANGULAR QUANTUM NUMBERS AND, BASED ON THIS ORDERS THE
C     SHELLS IN A STANDARD MANNER:    INEW    JNEW    KNEW    LNEW
C
C     THE ONLY POSSIBILITIES ALLOWED FOR ANGULAR QUANTUM NUMBERS ARE
C     0000  0001  0011  0101  0111  1111
C     DETERMINES TYPE OF INTEGRAL SET BASED ON THE ABOVE NUMBERS
C     CALLS THE FOLLOWING ROUTINES IN THE ORDER GIVEN
C
C     SINFO, TO PRESET INTEGRAL ACCURACY LIMITS
C
C     SGEOM, OBTAINS GEOMETRICAL INFORMATION ABOUT THE FOUR CENTERS
C     AND FINDS TWO SETS OF LOCAL AXES FOR CENTERS:
C     (A AND B) P SET AND (C AND D) Q SET
C
C     PINF, OBTAINS INFORMATION ABOUT GAUSSIAN FUNCTIONS CONNECTED
C     WITH THE P SET OF AXES
C
C     AT THIS POINT GENR70 OBTAINS INFORMATION ABOUT THE GAUSSIAN
C     FUNCTIONS CONNECTED WITH THE Q SET OF AXES
C
C     SP0000 TO SP1111, OBTAIN UP TO 88 INTEGRALS REFERRED
C     TO AXES A B AND Q
C
C     ROT2, ROTATES THESE INTEGRALS TO UP TO 160 INTEGRALS ON A B AND Q
C
C     TQ0011 TO TQ1111, TRANSLATE THESE INTEGRALS ON A B AND Q
C     TO UP TO 256 INTEGRALS ON A B C AND D
C
C     R30001 TO R31111, ROTATE UP TO 256 INTEGRALS ON A B C AND D
C     TO THE SAME NUMBER REFERRED TO THE FIXED SPACE AXES
C
C     THE POPLE/HEHRE ROTATED AXIS CODE WAS EXTENSIVELY REWRITTEN
C     IN JULY 2001 BY JOSE M. SIERRA OF SYNSTAR, SA, MADRID SPAIN.
C     CHANGES INCLUDE USING DO LOOPS INSTEAD OF UNROLLED CODE, AND
C     ROUTINES SINFO, SGEOM AND PINF HAVE BEEN IN-LINED INTO GENR70
C     ROUTINE R30S1S ENCOMPASSES SUBS FROM R30001 TO R31111
C     ROUTINE SP0S1S ENCOMPASSES SUBS FROM SP0000 TO SP1111
C     ROUTINE TQ0S1S ENCOMPASSES SUBS FROM TQ0011 TO TQ1111
C
C     REWORKED IN OCTOBER 2003 BY KAZUYA ISHIMURA OF THE INSTITUTE
C     FOR MOLECULAR SCIENCE, OKAZAKI TO USE MCMURCHIE-DAVIDSON FOR
C     THE AXES-1 INTEGRALS, WITH THE EQUIVALENT OF ROT2 COMPUTED AT
C     THE BOTTOM OF SP0S1S.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL SCHSKP
C
      PARAMETER (MXGTOT=5000, MXSH=1000)
      PARAMETER (MXGSH=30, MXG2=MXGSH*MXGSH)
C
      COMMON /B     / CO(MXSH,3)
      COMMON /FLIPS / IB(4,3)
      COMMON /GEOMPQ/ R12,RAB,X34,X43,AQZ,QPR,QPS,
     2                TX12(MXG2),TX21(MXG2),TY01(MXG2),TY02(MXG2),
     3                D00P(MXG2),D01P(MXG2),D10P(MXG2),D11P(MXG2),
     4                NGANGB
      COMMON /GOUT  / GPOPLE(256*3),NORG
      COMMON /MAXC  / CMAX(MXGTOT),CMAXA(MXGSH),CMAXB(MXGSH),
     2                CMAXC(MXGSH),CMAXD(MXGSH),ISMLP(MXG2),ISMLQ
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     2                CF(MXGTOT),CG(MXGTOT),
     3                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     4                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /SHLG70/ ISHELL,JSHELL,KSHELL,LSHELL,INEW,JNEW,KNEW,LNEW
      COMMON /SHLLFO/ NGA,LA,EXA(MXGSH),CSA(MXGSH),CPA(MXGSH),
     2                NGB,LB,EXB(MXGSH),CSB(MXGSH),CPB(MXGSH),
     3                NGC,LC,EXC(MXGSH),CSC(MXGSH),CPC(MXGSH),
     4                NGD,LD,EXD(MXGSH),CSD(MXGSH),CPD(MXGSH)
      COMMON /SHLNOS/ QQ4,LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL,
     2                MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL,
     3                NIJ,IJ,KL,IJKL
C
C     ==================================================================
C     NOTE THAT GAMGEN IS THE PLACE THAT SETS COMMON BLOCK /INTACC/
C     THIS GROUP OF STATEMENTS IS INTERRELATED FOR ROUTINES
C     GAMGEN, GENR70 AND SP0S1S IN INT2B, AND JKDG80, GRDG80 AND GRDPER
C     IN GRD2B. IF YOU CHANGE THESE, CHANGE ALL SIX PLACES EQUIVALENTLY.
C     GAMGEN HAS COMMENTS EXPLAINING THIS IN THE MOST DETAIL.
C
      PARAMETER (M3R=401)
      COMMON /INTACC/ EI1,EI2,CUF,RFI,CUG,RGI,CUX,R(3,0:5,0:M3R)
C     ==================================================================
C
CJMS  LABELLED COMMON JMSGYH DEFINED FOR COMPUTATIONAL EFFICIENCY.
CJMS  IT IS ONLY USED IN THIS MODULE INT2B.
C
      COMMON /JMSGYH/ G(256),RQ(0:1,0:1),SQ(0:1,0:1)
C
      DIMENSION P12(3,3),P34(3,3),P(3,3),T(3)
C
      PARAMETER (ZER=0.0D+00, ONE=1.0D+00)
      PARAMETER (PT7=0.7D+00, PT9=0.9D+00)
      PARAMETER (TENM04=1.0D-04, TENM12=1.0D-12)
C
CJMS  PARAMETER (PIDIV4=0.785398163397448279D+00)
CC    PARAMETER (PIDIV4=0.785398163397448309615660845819D+00)
CC    PARAMETER (PIDIV4=0.785398163397448D+00)
      PARAMETER (PITO52=0.349868366552497D+02)
C
CC    PIDIV4= ATAN(ONE)
CC    PI4= PIDIV4
CC    PI = PI4+PI4+PI4+PI4
CC    PITO52=(PI +PI )*PI * SQRT(PI )
      PIF= PITO52
C
      LAT= KTYPE(ISHELL)-1
      LBT= KTYPE(JSHELL)-1
      LCT= KTYPE(KSHELL)-1
      LDT= KTYPE(LSHELL)-1
      ITYPE= 1+LDT+2*(LCT+2*(LBT+2*LAT))
C
      IF(ITYPE.EQ. 1 .OR. ITYPE.EQ. 2 .OR. ITYPE.EQ. 4 .OR.
     2   ITYPE.EQ. 6 .OR. ITYPE.EQ. 8 .OR. ITYPE.EQ.16) THEN
C
C TYPES 0000,0001,0011,0101,0111,1111 ARE UNALTERED
C
         INEW= ISHELL
         JNEW= JSHELL
         KNEW= KSHELL
         LNEW= LSHELL
         LA= LAT
         LB= LBT
         LC= LCT
         LD= LDT
         IB(1,IEXCH)= 1
         IB(2,IEXCH)= 2
         IB(3,IEXCH)= 3
         IB(4,IEXCH)= 4
      ELSEIF(ITYPE.EQ.10 .OR. ITYPE.EQ.12) THEN
C
C TYPES 1001,1011 HAVE IJ SWITCHED
C
         INEW= JSHELL
         JNEW= ISHELL
         KNEW= KSHELL
         LNEW= LSHELL
         LA= LBT
         LB= LAT
         LC= LCT
         LD= LDT
         IB(1,IEXCH)= 2
         IB(2,IEXCH)= 1
         IB(3,IEXCH)= 3
         IB(4,IEXCH)= 4
      ELSEIF(ITYPE.EQ. 3 .OR. ITYPE.EQ. 7) THEN
C
C TYPES 0010,0110 HAVE KL SWITCHED
C
         INEW= ISHELL
         JNEW= JSHELL
         KNEW= LSHELL
         LNEW= KSHELL
         LA= LAT
         LB= LBT
         LC= LDT
         LD= LCT
         IB(1,IEXCH)= 1
         IB(2,IEXCH)= 2
         IB(3,IEXCH)= 4
         IB(4,IEXCH)= 3
      ELSEIF(ITYPE.EQ. 5 .OR. ITYPE.EQ.13 .OR. ITYPE.EQ.14) THEN
C
C TYPES 0100,1100,1101 HAVE PAIRS IJ AND KL SWITCHED
C
         INEW= KSHELL
         JNEW= LSHELL
         KNEW= ISHELL
         LNEW= JSHELL
         LA= LCT
         LB= LDT
         LC= LAT
         LD= LBT
         IB(1,IEXCH)= 3
         IB(2,IEXCH)= 4
         IB(3,IEXCH)= 1
         IB(4,IEXCH)= 2
      ELSEIF(ITYPE.EQ.11) THEN
C
C TYPE 1010 HAS IJ SWITCHED AND KL SWITCHED
C
         INEW= JSHELL
         JNEW= ISHELL
         KNEW= LSHELL
         LNEW= KSHELL
         LA= LBT
         LB= LAT
         LC= LDT
         LD= LCT
         IB(1,IEXCH)= 2
         IB(2,IEXCH)= 1
         IB(3,IEXCH)= 4
         IB(4,IEXCH)= 3
      ELSEIF(ITYPE.EQ. 9) THEN
C
C TYPE 1000  HAS PAIRS IJ AND KL SWITCHED FOLLOWED BY KL SWITCH
C
         INEW= KSHELL
         JNEW= LSHELL
         KNEW= JSHELL
         LNEW= ISHELL
         LA= LCT
         LB= LDT
         LC= LBT
         LD= LAT
         IB(1,IEXCH)= 4
         IB(2,IEXCH)= 3
         IB(3,IEXCH)= 1
         IB(4,IEXCH)= 2
      ELSEIF(ITYPE.EQ.15) THEN
C
C TYPE 1110 HAS PAIRS IJ AND KL SWITCHED FOLLOWED BY IJ SWITCH
C
         INEW= LSHELL
         JNEW= KSHELL
         KNEW= ISHELL
         LNEW= JSHELL
         LA= LDT
         LB= LCT
         LC= LAT
         LD= LBT
         IB(1,IEXCH)= 3
         IB(2,IEXCH)= 4
         IB(3,IEXCH)= 2
         IB(4,IEXCH)= 1
      ENDIF
C
C ONLY 6 STANDARD TYPES REMAIN. 0000,0001,0011,0101,0111,1111
C SPECIFY THESE BY JTYPE
C
      IF(ITYPE.EQ. 1) THEN
         JTYPE= 1
         NGOUT= 1
      ELSEIF(ITYPE.EQ. 2 .OR. ITYPE.EQ. 3 .OR.
     2       ITYPE.EQ. 5 .OR. ITYPE.EQ. 9) THEN
         JTYPE= 2
         NGOUT= 4
      ELSEIF(ITYPE.EQ. 4 .OR. ITYPE.EQ.13) THEN
         JTYPE= 3
         NGOUT= 16
      ELSEIF(ITYPE.EQ. 6 .OR. ITYPE.EQ. 7 .OR.
     2       ITYPE.EQ.10 .OR. ITYPE.EQ.11) THEN
         JTYPE= 4
         NGOUT= 64
      ELSEIF(ITYPE.EQ. 8 .OR. ITYPE.EQ.12 .OR.
     2       ITYPE.EQ.14 .OR. ITYPE.EQ.15) THEN
         JTYPE= 5
         NGOUT= 64
      ELSEIF(ITYPE.EQ.16) THEN
         JTYPE= 6
         NGOUT= 256
      ENDIF
C
C EMPTY COMMON GOUT
C
      CALL VCLR(GPOPLE(1+NORG),1,NGOUT)
C
      IF(SCHSKP) GO TO 999
C
C OBTAIN INFORMATION ABOUT SHELLS: INEW, KNEW, JNEW, LNEW
C NUMBER OF GAUSSIANS GO INTO NGA,... IN COMMON SHLLFO
C SHELL ANGULAR QUANTUM NUMBERS LA,... GO INTO COMMON SHLLFO
C GAUSSIAN EXPONENTS GO INTO ARRAYS EXA,EXB,EXC,EXD IN COMMON SHLLFO
C GAUSSIAN COEFFICIENTS GO INTO ARRAYS CSA,CPA,... IN COMMON SHLLFO
C
C NUMBERS OF GAUSSIAN FUNCTIONS IN SHELLS INEW JNEW KNEW AND LNEW
C
      NGA= KNG(INEW)
      NGB= KNG(JNEW)
      NGC= KNG(KNEW)
      NGD= KNG(LNEW)
C
C STARTING LOCATIONS OF SHELLS INEW JNEW KNEW AND LNEW IN LIST
C OF GAUSSIAN FUNCTIONS
C
      I= KSTART(INEW)-1
      J= KSTART(JNEW)-1
      K= KSTART(KNEW)-1
      L= KSTART(LNEW)-1
C
C LOOP OVER GAUSSIANS IN EACH SHELL
C FIRST SHELL INEW
C
      DO 110 NI=1,NGA
         N=I+NI
C
C THE MAXIMUM COEFFICIENT ASSOCIATED WITH SHELL IS
C USED TO DETERMINE IF ANY OF THE INTEGRALS ASSOCIATED WITH A SET
C OF SHELLS IS LARGE ENOUGH TO WARRANT EVALUATION OF THE ENTIRE SET
C
         CMAXA(NI)= CMAX(N)
C
C GAUSSIAN EXPONENTS
C
         EXA(NI)= EX(N)
C
C S COEFFICIENTS
C
         CSA(NI)= CS(N)
C
C P COEFFICIENTS
C
         CPA(NI)= CP(N)
  110 CONTINUE
C
C REPEAT PROCEDURE FOR SHELLS JNEW KNEW AND LNEW
C
      DO 120 NJ=1,NGB
         N=J+NJ
         CMAXB(NJ)= CMAX(N)
         EXB(NJ)= EX(N)
         CSB(NJ)= CS(N)
         CPB(NJ)= CP(N)
  120 CONTINUE
      DO 130 NK=1,NGC
         N=K+NK
         CMAXC(NK)=CMAX(N)
         EXC(NK)=EX(N)
         CSC(NK)=CS(N)*QQ4
         CPC(NK)=CP(N)*QQ4
  130 CONTINUE
      DO 140 NL=1,NGD
         N=L+NL
         CMAXD(NL)=CMAX(N)
         EXD(NL)=EX(N)
         CSD(NL)=CS(N)
         CPD(NL)=CP(N)
  140 CONTINUE
C
      NGANGB=NGA*NGB
C
C COORDINATES OF ATOMS ASSOCIATED WITH SHELLS INEW JNEW KNEW AND LNEW
C
      R12= ZER
      R34= ZER
      DO 150 N=1,3
         P12(N,1)= CO(INEW,N)
         P12(N,2)= CO(JNEW,N)
         P12(N,3)= P12(N,2)-P12(N,1)
      R12= R12+P12(N,3)*P12(N,3)
         P34(N,1)= CO(KNEW,N)
         P34(N,2)= CO(LNEW,N)
         P34(N,3)= P34(N,2)-P34(N,1)
  150 R34= R34+P34(N,3)*P34(N,3)
C
C FIND DIRECTION COSINES OF PENULTIMATE AXES FROM COORDINATES OF AB
C P(1,1),P(1,2),... ARE DIRECTION COSINES OF AXES AT P.  Z-AXIS ALONG AB
C T(1),T(2),T(3)... ARE DIRECTION COSINES OF AXES AT Q.  Z-AXIS ALONG CD
C
C FIND DIRECTION COSINES OF AB AND CD. THESE ARE LOCAL Z-AXES.
C IF INDETERMINATE TAKE ALONG SPACE Z-AXIS
C
      P(1,3)= ZER
      P(2,3)= ZER
      P(3,3)= ONE
      RAB= ZER
      IF(R12.NE.ZER) THEN
         RAB= SQRT(R12)
         TMP= ONE/RAB
         P(1,3)= P12(1,3)*TMP
         P(2,3)= P12(2,3)*TMP
         P(3,3)= P12(3,3)*TMP
      ENDIF
C
      T(1)= ZER
      T(2)= ZER
      T(3)= ONE
      RCD= ZER
      IF(R34.NE.ZER) THEN
         RCD= SQRT(R34)
         TMP= ONE/RCD
         T(1)= P34(1,3)*TMP
         T(2)= P34(2,3)*TMP
         T(3)= P34(3,3)*TMP
      ENDIF
C
C FIND LOCAL Y-AXIS AS COMMON PERPENDICULAR TO AB AND CD
C IF INDETERMINATE TAKE PERPENDICULAR TO AB AND SPACE Z-AXIS
C IF STILL INDETERMINATE TAKE PERPENDICULAR TO AB AND SPACE X-AXIS
C
      COSG= T(1)*P(1,3)+T(2)*P(2,3)+T(3)*P(3,3)
      COSG= MIN( ONE,COSG)
      COSG= MAX(-ONE,COSG)
C     SING= SQRT(ONE-COSG*COSG)
C
C MODIFIED ROTATION TESTING.
C THIS FIX CURES THE SMALL ANGLE PROBLEM.
C
      P(1,2)= T(3)*P(2,3)-T(2)*P(3,3)
      P(2,2)= T(1)*P(3,3)-T(3)*P(1,3)
      P(3,2)= T(2)*P(1,3)-T(1)*P(2,3)
      IF( ABS(COSG).GT.PT9) THEN
         SING= SQRT(P(1,2)*P(1,2)+P(2,2)*P(2,2)+P(3,2)*P(3,2))
      ELSE
         SING= SQRT(ONE-COSG*COSG)
      ENDIF
      IF( ABS(COSG).LE.PT9 .OR. SING.GE.TENM12) THEN
         TMP= ONE/SING
         P(1,2)= P(1,2)*TMP
         P(2,2)= P(2,2)*TMP
         P(3,2)= P(3,2)*TMP
      ELSE
         I=3
         IF( ABS(P(1,3)).LE.PT7) I=1
         TMP = P(I,3)*P(I,3)
         TMP = MIN( ONE,TMP)
         TMP = SQRT(ONE-TMP)
         IF(TMP.NE.ZER) TMP= ONE/TMP
         IF( ABS(P(1,3)).LE.PT7) THEN
            P(1,2)= ZER
            P(2,2)= P(3,3)*TMP
            P(3,2)=-P(2,3)*TMP
         ELSE
            P(1,2)= P(2,3)*TMP
            P(2,2)=-P(1,3)*TMP
            P(3,2)= ZER
         ENDIF
      ENDIF
C
C FIND DIRECTION COSINES OF LOCAL X-AXES
C
      P(1,1)= P(2,2)*P(3,3)-P(3,2)*P(2,3)
      P(2,1)= P(3,2)*P(1,3)-P(1,2)*P(3,3)
      P(3,1)= P(1,2)*P(2,3)-P(2,2)*P(1,3)
C
C FIND COORDINATES OF C RELATIVE TO LOCAL AXES AT A
C
      T(1)= P34(1,1)-P12(1,1)
      T(2)= P34(2,1)-P12(2,1)
      T(3)= P34(3,1)-P12(3,1)
      ACX = T(1)*P(1,1)+T(2)*P(2,1)+T(3)*P(3,1)
      ACY = T(1)*P(1,2)+T(2)*P(2,2)+T(3)*P(3,2)
      ACZ = T(1)*P(1,3)+T(2)*P(2,3)+T(3)*P(3,3)
C
C SET ACY= 0  IF CLOSE
C
      IF( ABS(ACY).LE.TENM04) THEN
         ACY =ZER
         ACY2=ZER
      ELSE
         ACY2=ACY*ACY
      ENDIF
C
C DIRECTION COSINES OF CD LOCAL AXES WITH RESPECT TO AB LOCAL AXES
C (COSG,0,-SING)  (0,1,0)  (SING,0,COSG)
C
C PRELIMINARY P LOOP
C
C FILL GEOMPQ WITH INFORMATION ABOUT P IN PRELIMINARY P-LOOP
C
      JI= 1
      DO 170 I=1,NGA
         X01= EXA(I)
         DO 170 J=1,NGB
            X02= EXB(J)
            X12= X01+X02
            X21= ONE/X12
            Y01= X01*X21
            Y02= ONE-Y01
            Y12= Y01*X02
            TX12(JI)= X12
            TX21(JI)= X21
            TY02(JI)= Y02*RAB
CJMS        TY01(JI)=-Y01*RAB
            TY01(JI)= TY02(JI)-RAB
C           IF(JTYPE.EQ.4 .OR. JTYPE.EQ.5) TY01(JI)= TY01(JI)*X12
            R12Y12= R12*Y12
            IF(R12Y12.GT.CUX) THEN
               ISMLP(JI)=2
               GO TO 160
            ENDIF
            E12= X21* EXP(-R12Y12)
            TST= E12*CMAXA(I)*CMAXB(J)
            ISMLP(JI)=0
            IF(TST.LE.EI1) ISMLP(JI)=1
            IF(TST.LE.EI2) ISMLP(JI)=2
            E12= PIF*E12
C
C FOR TYPES 0000,0001,0011 ONLY D00P NEEDED
C
            D00P(JI)= E12*CSA(I)*CSB(J)
            IF(JTYPE.GT.3) THEN
               D01P(JI)= E12*CSA(I)*CPB(J)
               IF(JTYPE.LE.5) THEN
                  IF(D01P(JI).NE.ZER) THEN
                     D00P(JI)= D00P(JI)/D01P(JI)
                  ENDIF
               ELSE
                  D10P(JI)= E12*CPA(I)*CSB(J)
                  D11P(JI)= E12*CPA(I)*CPB(J)
                  IF(D11P(JI).NE.ZER) THEN
                     TMP = ONE/D11P(JI)
                     D00P(JI)= D00P(JI)*TMP
                     D01P(JI)= D01P(JI)*TMP
                     D10P(JI)= D10P(JI)*TMP
                  ENDIF
               ENDIF
            ENDIF
  160       CONTINUE
  170 JI=JI+1
C
C IF 0000 INITIALIZE
C
C     IF(JTYPE.EQ.1) G(1)= ZER
C
C BEGIN Q LOOP
C
      DO 190 K=1,NGC
         X03= EXC(K)
         DO 190 L=1,NGD
            X04= EXD(L)
            X34= X03+X04
            X43= ONE/X34
            Y03= X03*X43
            Y04= ONE-Y03
            Y34= Y03*X04
            R34Y34= R34*Y34
            IF(R34Y34.GT.CUX) GO TO 180
            E34= X43* EXP(-R34Y34)
            TST= E34*CMAXC(K)*CMAXD(L)
            IF(TST.LE.EI2) GO TO 180
            ISMLQ= 0
            IF(TST.LE.EI1) ISMLQ= 1
C
C RQ(0,0) = COMPONENT OF CQ ALONG PENULTIMATE X-AXIS
C RQ(1,0) = COMPONENT OF CQ ALONG PENULTIMATE Z-AXIS
C RQ(0,1) = COMPONENT OF DQ ALONG PENULTIMATE X-AXIS
C RQ(1,1) = COMPONENT OF DQ ALONG PENULTIMATE Z-AXIS
C
            CQ = RCD*Y04
            DQ =-RCD+CQ
            RQ(0,0)= CQ *SING
            RQ(1,0)= CQ *COSG
            RQ(0,1)= DQ *SING
            RQ(1,1)= DQ *COSG
C
C FIND COORDINATES OF Q RELATIVE TO AXES AT A
C QPR IS PERPENDICULAR FROM Q TO AB
C
            AQX= ACX+RQ(0,0)
            AQZ= ACZ+RQ(1,0)
            QPS= AQX*AQX+ACY2
            QPR= SQRT(QPS)
C
            IF(JTYPE.NE.1) THEN
C
C PHI IS 180 - AZIMUTHAL ANGLE FOR AQ IN AB LOCAL AXIS SYSTEM
C
               COSP= ONE
               SINP= ZER
               IF(QPR.GT.TENM12) THEN
                  TMP = ONE/QPR
                  COSP=-AQX*TMP
                  SINP=-ACY*TMP
               ENDIF
               SQ(0,0)= E34*CSC(K)*CSD(L)
               SQ(1,0)= E34*CSC(K)*CPD(L)
               SQ(0,1)= E34*CPC(K)*CSD(L)
               SQ(1,1)= E34*CPC(K)*CPD(L)
            ENDIF
C
C USE SPECIAL FAST ROUTINE FOR INNER LOOPS FOR 0000 ... 1111
C
            CALL SP0S1S(JTYPE,COSP,SINP)
C
            IF(JTYPE.EQ.1) THEN
               SQ(0,0)= E34*CSC(K)*CSD(L)
               GPOPLE(1+NORG)= GPOPLE(1+NORG)+G(1)*SQ(0,0)
            ELSEIF(JTYPE.EQ.2) THEN
               G(2)= G(1)*RQ(0,1)+G(2)
               G(4)= G(1)*RQ(1,1)+G(4)
               GPOPLE(1+NORG)= GPOPLE(1+NORG)+G(1)*SQ(0,0)
               GPOPLE(2+NORG)= GPOPLE(2+NORG)+G(2)*SQ(1,0)
               GPOPLE(3+NORG)= GPOPLE(3+NORG)+G(3)*SQ(1,0)
               GPOPLE(4+NORG)= GPOPLE(4+NORG)+G(4)*SQ(1,0)
            ELSE
               CALL TQ0S1S(JTYPE,R34,GPOPLE(1+NORG))
            ENDIF
C
  180       CONTINUE
  190 CONTINUE
C
      IF(JTYPE.GT.1) THEN
C
CJMS  NOW, THE TRANSPOSE OF P TO BE USED FOR COMPUTATIONAL EFFICIENCY
C
         DO 195 J=1,2
            DO 195 I=J+1,3
               TMP= P(I,J)
               P(I,J)= P(J,I)
               P(J,I)= TMP
  195    CONTINUE
C
         CALL R30S1S(JTYPE,GPOPLE(1+NORG),P)
      ENDIF
  999 CONTINUE
      RETURN
      END
C*MODULE INT2B   *DECK R30S1S
      SUBROUTINE R30S1S(JTYPE,F,P)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C ROTATE UP TO 256 INTEGRALS TO SPACE FIXED AXES
C INCOMING AND OUTGOING INTEGRALS IN F
C P(1,1),...ARE DIRECTION COSINES OF SPACE FIXED AXES WRT AXES AT P
C
      DIMENSION F(0:3,0:3,0:3,0:3),P(3,3)
C
      DIMENSION T(3)
C
      IF(JTYPE.EQ.2) THEN
         T(1)= F(1,0,0,0)
         T(2)= F(2,0,0,0)
         T(3)= F(3,0,0,0)
         F(1,0,0,0)= T(1)*P(1,1)+T(2)*P(2,1)+T(3)*P(3,1)
         F(2,0,0,0)= T(1)*P(1,2)+T(2)*P(2,2)+T(3)*P(3,2)
         F(3,0,0,0)= T(1)*P(1,3)+T(2)*P(2,3)+T(3)*P(3,3)
      ELSEIF(JTYPE.EQ.3) THEN
         DO 310 I=0,3
            T(1)= F(I,1,0,0)
            T(2)= F(I,2,0,0)
            T(3)= F(I,3,0,0)
            F(I,1,0,0)= T(1)*P(1,1)+T(2)*P(2,1)+T(3)*P(3,1)
            F(I,2,0,0)= T(1)*P(1,2)+T(2)*P(2,2)+T(3)*P(3,2)
            F(I,3,0,0)= T(1)*P(1,3)+T(2)*P(2,3)+T(3)*P(3,3)
  310    CONTINUE
         DO 320 J=0,3
            T(1)= F(1,J,0,0)
            T(2)= F(2,J,0,0)
            T(3)= F(3,J,0,0)
            F(1,J,0,0)= T(1)*P(1,1)+T(2)*P(2,1)+T(3)*P(3,1)
            F(2,J,0,0)= T(1)*P(1,2)+T(2)*P(2,2)+T(3)*P(3,2)
            F(3,J,0,0)= T(1)*P(1,3)+T(2)*P(2,3)+T(3)*P(3,3)
  320    CONTINUE
      ELSEIF(JTYPE.EQ.4) THEN
         DO 410 I=0,3
            T(1)= F(I,0,1,0)
            T(2)= F(I,0,2,0)
            T(3)= F(I,0,3,0)
            F(I,0,1,0)= T(1)*P(1,1)+T(2)*P(2,1)+T(3)*P(3,1)
            F(I,0,2,0)= T(1)*P(1,2)+T(2)*P(2,2)+T(3)*P(3,2)
            F(I,0,3,0)= T(1)*P(1,3)+T(2)*P(2,3)+T(3)*P(3,3)
  410    CONTINUE
         DO 420 K=0,3
            T(1)= F(1,0,K,0)
            T(2)= F(2,0,K,0)
            T(3)= F(3,0,K,0)
            F(1,0,K,0)= T(1)*P(1,1)+T(2)*P(2,1)+T(3)*P(3,1)
            F(2,0,K,0)= T(1)*P(1,2)+T(2)*P(2,2)+T(3)*P(3,2)
            F(3,0,K,0)= T(1)*P(1,3)+T(2)*P(2,3)+T(3)*P(3,3)
  420    CONTINUE
      ELSEIF(JTYPE.EQ.5) THEN
         DO 510 J=0,3
            DO 510 I=0,3
               T(1)= F(I,J,1,0)
               T(2)= F(I,J,2,0)
               T(3)= F(I,J,3,0)
               F(I,J,1,0)= T(1)*P(1,1)+T(2)*P(2,1)+T(3)*P(3,1)
               F(I,J,2,0)= T(1)*P(1,2)+T(2)*P(2,2)+T(3)*P(3,2)
               F(I,J,3,0)= T(1)*P(1,3)+T(2)*P(2,3)+T(3)*P(3,3)
  510    CONTINUE
         DO 520 K=0,3
            DO 520 I=0,3
               T(1)= F(I,1,K,0)
               T(2)= F(I,2,K,0)
               T(3)= F(I,3,K,0)
               F(I,1,K,0)= T(1)*P(1,1)+T(2)*P(2,1)+T(3)*P(3,1)
               F(I,2,K,0)= T(1)*P(1,2)+T(2)*P(2,2)+T(3)*P(3,2)
               F(I,3,K,0)= T(1)*P(1,3)+T(2)*P(2,3)+T(3)*P(3,3)
  520    CONTINUE
         DO 530 K=0,3
            DO 530 J=0,3
               T(1)= F(1,J,K,0)
               T(2)= F(2,J,K,0)
               T(3)= F(3,J,K,0)
               F(1,J,K,0)= T(1)*P(1,1)+T(2)*P(2,1)+T(3)*P(3,1)
               F(2,J,K,0)= T(1)*P(1,2)+T(2)*P(2,2)+T(3)*P(3,2)
               F(3,J,K,0)= T(1)*P(1,3)+T(2)*P(2,3)+T(3)*P(3,3)
  530    CONTINUE
      ELSEIF(JTYPE.EQ.6) THEN
         DO 610 K=0,3
            DO 610 J=0,3
               DO 610 I=0,3
                  T(1)= F(I,J,K,1)
                  T(2)= F(I,J,K,2)
                  T(3)= F(I,J,K,3)
                  F(I,J,K,1)= T(1)*P(1,1)+T(2)*P(2,1)+T(3)*P(3,1)
                  F(I,J,K,2)= T(1)*P(1,2)+T(2)*P(2,2)+T(3)*P(3,2)
                  F(I,J,K,3)= T(1)*P(1,3)+T(2)*P(2,3)+T(3)*P(3,3)
  610    CONTINUE
         DO 620 L=0,3
            DO 620 J=0,3
               DO 620 I=0,3
                  T(1)= F(I,J,1,L)
                  T(2)= F(I,J,2,L)
                  T(3)= F(I,J,3,L)
                  F(I,J,1,L)= T(1)*P(1,1)+T(2)*P(2,1)+T(3)*P(3,1)
                  F(I,J,2,L)= T(1)*P(1,2)+T(2)*P(2,2)+T(3)*P(3,2)
                  F(I,J,3,L)= T(1)*P(1,3)+T(2)*P(2,3)+T(3)*P(3,3)
  620    CONTINUE
         DO 630 L=0,3
            DO 630 K=0,3
               DO 630 I=0,3
                  T(1)= F(I,1,K,L)
                  T(2)= F(I,2,K,L)
                  T(3)= F(I,3,K,L)
                  F(I,1,K,L)= T(1)*P(1,1)+T(2)*P(2,1)+T(3)*P(3,1)
                  F(I,2,K,L)= T(1)*P(1,2)+T(2)*P(2,2)+T(3)*P(3,2)
                  F(I,3,K,L)= T(1)*P(1,3)+T(2)*P(2,3)+T(3)*P(3,3)
  630    CONTINUE
         DO 640 L=0,3
            DO 640 K=0,3
               DO 640 J=0,3
                  T(1)= F(1,J,K,L)
                  T(2)= F(2,J,K,L)
                  T(3)= F(3,J,K,L)
                  F(1,J,K,L)= T(1)*P(1,1)+T(2)*P(2,1)+T(3)*P(3,1)
                  F(2,J,K,L)= T(1)*P(1,2)+T(2)*P(2,2)+T(3)*P(3,2)
                  F(3,J,K,L)= T(1)*P(1,3)+T(2)*P(2,3)+T(3)*P(3,3)
  640    CONTINUE
      ENDIF
      RETURN
      END
C*MODULE INT2B   *DECK SP0S1S
      SUBROUTINE SP0S1S(JTYPE,COSP,SINP)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (MXGSH=30, MXG2=MXGSH*MXGSH)
C
      PARAMETER (ZER=0.0D+00, PT5=0.5D+00, ONE=1.0D+00, TWO=2.0D+00)
      PARAMETER (THREE=3.0D+00, FOUR=4.0D+00, SIX=6.0D+00)
C
      COMMON /GEOMPQ/ R12,RAB,X34,X43,AQZ,QPR,QPS,
     2                TX12(MXG2),TX21(MXG2),TY01(MXG2),TY02(MXG2),
     3                D00P(MXG2),D01P(MXG2),D10P(MXG2),D11P(MXG2),
     4                NGANGB
C
C     ==================================================================
C     NOTE THAT GAMGEN IS THE PLACE THAT SETS COMMON BLOCK /INTACC/
C     THIS GROUP OF STATEMENTS IS INTERRELATED FOR ROUTINES
C     GAMGEN, GENR70, AND SP0S1S IN INT2B, AND
C     JKDG80, GRDG80, AND GRDPER IN GRD2B.
C     IF YOU CHANGE THESE, CHANGE ALL SIX PLACES EQUIVALENTLY.
C     GAMGEN HAS COMMENTS EXPLAINING THIS IN THE MOST DETAIL.
C     ==================================================================
C
      COMMON /JMSGYH/ G(0:3,0:3,0:3,0:3),
     1                RQ(0:1,0:1),SQ(0:1,0:1)
      COMMON/ FQ04/FQ(5),FQ0(5),FQ1(2,8),FQ2(3,9),FQ3(4,5),FQ4(5)
      DIMENSION Y1100(7),Y1010(14),Y1110(20)
      DIMENSION Y0011(5),Y1011(13),Y1111(26)
      DIMENSION X0000(7),X1000(2,9),X2000(4,10),X3000(6,5),X4000(9)
      DIMENSION R1(5),WORK(10)
      DIMENSION R13(7),R23(9)
C
C FROM HERE, THE MCMURCHIE-DAVIDSON ALGORITHM IS USED.
C      L.E.MCMURCHIE  E.R.DAVIDSON
C      J.COMPUT.PHYS. 26, 218-231(1978)
C
C GENERATE (R] INTEGRALS
C
      IF(JTYPE.EQ.1) THEN
         FQ0(1)= ZER
         CALL INTJ1
      ELSEIF(JTYPE.EQ.2) THEN
         FQ0(1)= ZER
         FQ1(1,1)= ZER
         FQ1(2,1)= ZER
         CALL INTJ2
      ELSEIF(JTYPE.EQ.3) THEN
         FQ0(1)= ZER
         FQ1(1,1)= ZER
         FQ1(2,1)= ZER
         FQ2(1,1)= ZER
         FQ2(2,1)= ZER
         FQ2(3,1)= ZER
         CALL INTJ3
      ELSEIF(JTYPE.EQ.4) THEN
         DO 110 I=1,2
            FQ0(I)= ZER
  110    CONTINUE
         DO 120 J=1,3
            DO 120 I=1,2
               FQ1(I,J)= ZER
  120    CONTINUE
         DO 130 I=1,3
            FQ2(I,1)= ZER
  130    CONTINUE
         CALL INTJ4
      ELSEIF(JTYPE.EQ.5) THEN
         DO 140 I=1,2
            FQ0(I)= ZER
  140    CONTINUE
         DO 150 J=1,3
            DO 150 I=1,2
               FQ1(I,J)= ZER
  150    CONTINUE
         DO 160 J=1,3
            DO 160 I=1,3
               FQ2(I,J)= ZER
  160    CONTINUE
         DO 170 I=1,4
            FQ3(I,1)= ZER
  170    CONTINUE
         CALL INTJ5
      ELSE
         DO 180 I=1,5
            FQ0(I)= ZER
  180    CONTINUE
         DO 190 J=1,8
            DO 190 I=1,2
               FQ1(I,J)= ZER
  190    CONTINUE
         DO 200 J=1,9
            DO 200 I=1,3
               FQ2(I,J)= ZER
  200    CONTINUE
         DO 210 J=1,5
            DO 210 I=1,4
               FQ3(I,J)= ZER
  210    CONTINUE
         DO 220 I=1,5
            FQ4(I)= ZER
  220    CONTINUE
         CALL INTJ6
      ENDIF
C
C GENERATE (ABP|CDQ] INTEGRALS FROM (R]
C
      XMD2= X43*PT5
      IF(JTYPE.LE.3) THEN
         X0000(1)= FQ0(1)
         IF(JTYPE.GE.2) THEN
            X1000(1,1)= FQ1(1,1)*QPR*XMD2
            X1000(2,1)= FQ1(2,1)*XMD2
            IF(JTYPE.EQ.3) THEN
               TMP1= XMD2*XMD2
               X2000(1,1)=(FQ2(1,1)*QPS-FQ1(1,1))*TMP1
               X2000(2,1)=(            -FQ1(1,1))*TMP1
               X2000(3,1)=(FQ2(3,1)    -FQ1(1,1))*TMP1
               X2000(4,1)=(FQ2(2,1)*QPR         )*TMP1
            ENDIF
         ENDIF
      ELSEIF(JTYPE.EQ.4) THEN
         TMP1= XMD2*QPR
         X0000(1)= FQ0(1)
         X0000(2)= FQ0(2)
         X1000(1,1)= FQ1(1,1)*TMP1
         X1000(2,1)= FQ1(2,1)*XMD2
         X1000(1,2)= FQ1(1,2)*TMP1
         X1000(2,2)= FQ1(2,2)*XMD2
         X1000(1,3)= FQ1(1,3)*QPR
         X1000(2,3)= FQ1(2,3)
         X2000(1,1)=(FQ2(1,1)*QPS-FQ1(1,3))*XMD2
         X2000(2,1)=(            -FQ1(1,3))*XMD2
         X2000(3,1)=(FQ2(3,1)    -FQ1(1,3))*XMD2
         X2000(4,1)= FQ2(2,1)              *TMP1
       ELSEIF(JTYPE.EQ.5) THEN
         TMP1= XMD2*QPR
         TMP2= XMD2*XMD2
         TMP3= TMP2*QPR
         X0000(1)= FQ0(1)
         X0000(2)= FQ0(2)
         X1000(1,1)= FQ1(1,1)*TMP1
         X1000(2,1)= FQ1(2,1)*XMD2
         X1000(1,2)= FQ1(1,2)*TMP1
         X1000(2,2)= FQ1(2,2)*XMD2
         X1000(1,3)= FQ1(1,3)*QPR
         X1000(2,3)= FQ1(2,3)
         X2000(1,1)=(FQ2(1,1)*QPS-FQ1(1,1))*TMP2
         X2000(2,1)=             -FQ1(1,1) *TMP2
         X2000(3,1)=(FQ2(3,1)    -FQ1(1,1))*TMP2
         X2000(4,1)= FQ2(2,1)              *TMP3
         X2000(1,2)=(FQ2(1,2)*QPS-FQ1(1,2))*TMP2
         X2000(2,2)=             -FQ1(1,2) *TMP2
         X2000(3,2)=(FQ2(3,2)    -FQ1(1,2))*TMP2
         X2000(4,2)= FQ2(2,2)              *TMP3
         X2000(1,3)=(FQ2(1,3)*QPS-FQ1(1,3))*XMD2
         X2000(2,3)=             -FQ1(1,3) *XMD2
         X2000(3,3)=(FQ2(3,3)    -FQ1(1,3))*XMD2
         X2000(4,3)= FQ2(2,3)              *TMP1
         X3000(1,1)=(FQ3(1,1)*QPS-FQ2(1,3)*THREE)*TMP3
         X3000(2,1)=(FQ3(2,1)*QPS-FQ2(2,3)      )*TMP2
         X3000(3,1)=(            -FQ2(1,3)      )*TMP3
         X3000(4,1)=(            -FQ2(2,3)      )*TMP2
         X3000(5,1)=(FQ3(3,1)    -FQ2(1,3)      )*TMP3
         X3000(6,1)=(FQ3(4,1)    -FQ2(2,3)*THREE)*TMP2
      ELSE
         QBZ = RAB-AQZ
         TMP1=-XMD2*RAB
         TMP2= XMD2*XMD2
         TMP3=-TMP2*RAB
         TMP4= RAB/XMD2
         TMP5= TMP2*QPR
         TMP6= XMD2*QPR
         X0000(1)= FQ0(1)
         X0000(2)= FQ0(2)
         X0000(3)= FQ0(3)
         X0000(4)= FQ0(4)
         X0000(5)= FQ0(5)
         X1000(1,1)= FQ1(1,1)*TMP6
         X1000(2,1)= FQ1(2,1)*XMD2
         X1000(1,2)= FQ1(1,2)*TMP6
         X1000(2,2)= FQ1(2,2)*XMD2
         X1000(1,3)= FQ1(1,3)*TMP6
         X1000(2,3)= FQ1(2,3)*XMD2
         X1000(1,4)= FQ1(1,4)*QPR
         X1000(2,4)= FQ1(2,4)
         X1000(1,5)= FQ1(1,5)*QPR
         X1000(2,5)= FQ1(2,5)
         X1000(1,6)=-(FQ1(1,7)*QPR             )*RAB
         X1000(2,6)=-(FQ1(1,7)*QBZ-FQ1(2,7)*RAB)*RAB
         X1000(1,7)= (FQ1(2,6)*QPR             )*RAB
         X1000(2,7)= (FQ1(2,6)*QBZ-FQ1(1,7)*RAB)*RAB
         X1000(1,8)= (FQ1(2,6)*QPR             )*XMD2
         X1000(2,8)= (FQ1(2,6)*QBZ-FQ1(1,7)*RAB)*XMD2
         X1000(1,9)= FQ1(1,8)*TMP6
         X1000(2,9)= FQ1(2,8)*XMD2
C
         WORK(1)= TMP2
         WORK(2)= TMP2
         WORK(3)= TMP2
         WORK(4)= XMD2
         WORK(5)= XMD2
         WORK(6)= ONE
         DO 310 J=1,6
            X2000(1,J)=(FQ2(1,J)*QPS-FQ1(1,J))*WORK(J)
            X2000(2,J)=(            -FQ1(1,J))*WORK(J)
            X2000(3,J)=(FQ2(3,J)    -FQ1(1,J))*WORK(J)
            X2000(4,J)=(FQ2(2,J)*QPR         )*WORK(J)
  310    CONTINUE
         X2000(1,7)=(FQ2(1,8)*QPS-FQ1(1,8))*TMP2
         X2000(2,7)=(            -FQ1(1,8))*TMP2
         X2000(3,7)=(FQ2(3,8)    -FQ1(1,8))*TMP2
         X2000(4,7)=(FQ2(2,8)*QPR         )*TMP2
         R1(1)= FQ2(1,9)*QPR
         R1(2)= FQ2(1,9)*QBZ-FQ2(1,7)*RAB
         R1(3)= FQ2(1,7)*QPR
         R1(4)= FQ2(1,7)*QBZ-FQ2(2,7)*RAB
         R1(5)= FQ2(2,7)*QBZ-FQ2(3,7)*RAB
         X2000(1,8)=-(R1(1)*QPR          -FQ1(2,6))*TMP2
         X2000(2,8)=                      FQ1(2,6) *TMP2
         X2000(3,8)=-(R1(2)*QBZ-R1(4)*RAB-FQ1(2,6))*TMP2
         X2000(4,8)=-(R1(2)*QPR                   )*TMP2
         X2000(1,9)= X2000(1,8)*TMP4
         X2000(2,9)= X2000(2,8)*TMP4
         X2000(3,9)= X2000(3,8)*TMP4
         X2000(4,9)= X2000(4,8)*TMP4
         X2000(1,10)=(R1(3)*QPR          -FQ1(1,7))*TMP1
         X2000(2,10)=(                   -FQ1(1,7))*TMP1
         X2000(3,10)=(R1(4)*QBZ-R1(5)*RAB-FQ1(1,7))*TMP1
         X2000(4,10)=(R1(4)*QPR                   )*TMP1
C
         DO 320 J=1,2
            X3000(1,J)=(FQ3(1,J)*QPS-FQ2(1,J+3)*THREE)*TMP5
            X3000(2,J)=(FQ3(2,J)*QPS-FQ2(2,J+3)      )*TMP2
            X3000(3,J)=(            -FQ2(1,J+3)      )*TMP5
            X3000(4,J)=(            -FQ2(2,J+3)      )*TMP2
            X3000(5,J)=(FQ3(3,J)    -FQ2(1,J+3)      )*TMP5
            X3000(6,J)=(FQ3(4,J)    -FQ2(2,J+3)*THREE)*TMP2
  320    CONTINUE
         X3000(1,3)=(FQ3(1,3)*QPS-FQ2(1,6)*THREE)*TMP6
         X3000(2,3)=(FQ3(2,3)*QPS-FQ2(2,6)      )*XMD2
         X3000(3,3)=(            -FQ2(1,6)      )*TMP6
         X3000(4,3)=(            -FQ2(2,6)      )*XMD2
         X3000(5,3)=(FQ3(3,3)    -FQ2(1,6)      )*TMP6
         X3000(6,3)=(FQ3(4,3)    -FQ2(2,6)*THREE)*XMD2
         R13(1)= FQ3(1,5)*QPR
         R13(2)= FQ3(1,5)*QBZ-FQ3(1,4)*RAB
         R13(3)= FQ3(1,4)*QPR
         R13(4)= FQ3(1,4)*QBZ-FQ3(2,4)*RAB
         R13(5)= FQ3(2,4)*QPR
         R13(6)= FQ3(2,4)*QBZ-FQ3(3,4)*RAB
         R13(7)= FQ3(3,4)*QBZ-FQ3(4,4)*RAB
         R23(1)= R13(1)*QPR           -FQ2(1,9)
         R23(2)=                      -FQ2(1,9)
         R23(3)= R13(2)*QBZ-R13(4)*RAB-FQ2(1,9)
         R23(4)= R13(3)*QPR           -FQ2(1,7)
         R23(5)=                      -FQ2(1,7)
         R23(6)= R13(4)*QBZ-R13(6)*RAB-FQ2(1,7)
         R23(7)= R13(5)*QPR           -FQ2(2,7)
         R23(8)=                      -FQ2(2,7)
         R23(9)= R13(6)*QBZ-R13(7)*RAB-FQ2(2,7)
         X3000(1,4)=(R23(1)*QPR           -TWO*R1(1))*TMP3
         X3000(2,4)=(R23(1)*QBZ-R23(4)*RAB          )*TMP3
         X3000(3,4)=(R23(2)*QPR                     )*TMP3
         X3000(4,4)=(R23(2)*QBZ-R23(5)*RAB          )*TMP3
         X3000(5,4)=(R23(3)*QPR                     )*TMP3
         X3000(6,4)=(R23(3)*QBZ-R23(6)*RAB-TWO*R1(2))*TMP3
         X3000(1,5)=(R23(4)*QPR           -TWO*R1(3))*TMP3
         X3000(2,5)=(R23(4)*QBZ-R23(7)*RAB          )*TMP3
         X3000(3,5)=(R23(5)*QPR                     )*TMP3
         X3000(4,5)=(R23(5)*QBZ-R23(8)*RAB          )*TMP3
         X3000(5,5)=(R23(6)*QPR                     )*TMP3
         X3000(6,5)=(R23(6)*QBZ-R23(9)*RAB-TWO*R1(4))*TMP3
C
         X4000(1)=((FQ4(1)*QPS-FQ3(1,3)*SIX  )*QPS+FQ2(1,6)*THREE)*TMP2
         X4000(2)=((FQ4(2)*QPS-FQ3(2,3)*THREE)*QPR               )*TMP2
         X4000(3)=((          -FQ3(1,3)      )*QPS+FQ2(1,6)      )*TMP2
         X4000(4)=((FQ4(3)    -FQ3(1,3)   )*QPS-FQ3(3,3)+FQ2(1,6))*TMP2
         X4000(5)=((          -FQ3(2,3)      )*QPR               )*TMP2
         X4000(6)=((FQ4(4)    -FQ3(2,3)*THREE)*QPR               )*TMP2
         X4000(7)=(                               +FQ2(1,6)*THREE)*TMP2
         X4000(8)=((          -FQ3(3,3)      )    +FQ2(1,6)      )*TMP2
         X4000(9)=((FQ4(5)    -FQ3(3,3)*SIX  )    +FQ2(1,6)*THREE)*TMP2
      ENDIF
C
C GENERATE (AB|CD] INTEGRALS FROM (ABP|CDQ]
C
      IF(JTYPE.LE.3) THEN
         Y1100(1)= X0000(1)
         IF(JTYPE.GE.2) THEN
            Y1100(2)= X1000(1,1)
            Y1100(3)= X1000(2,1)
            IF(JTYPE.EQ.3) THEN
               TMP1= X0000(1)*XMD2
               Y1100(4)= TMP1+X2000(1,1)
               Y1100(5)= TMP1+X2000(2,1)
               Y1100(6)= TMP1+X2000(3,1)
               Y1100(7)=     +X2000(4,1)
            ENDIF
         ENDIF
      ELSEIF(JTYPE.EQ.4) THEN
         TMP1= X0000(1)*XMD2
         Y1100(1)= X0000(1)
         Y1100(2)= X1000(1,1)
         Y1100(3)= X1000(2,1)
         Y1010(1)=           -X1000(1,3)
         Y1010(2)=-X2000(1,1)
         Y1010(3)=-X2000(2,1)
         Y1010(4)=-X2000(4,1)
         Y1010(5)=           -X1000(2,3)+X0000(2)
         Y1010(6)=-X2000(4,1)+X1000(1,2)
         Y1010(7)=-X2000(3,1)+X1000(2,2)
      ELSEIF(JTYPE.EQ.5) THEN
         TMP1= X0000(1)*XMD2
         Y1100(1)= X0000(1)
         Y1100(2)= X1000(1,1)
         Y1100(3)= X1000(2,1)
         Y1100(4)= X2000(1,1)+TMP1
         Y1100(5)= X2000(2,1)+TMP1
         Y1100(6)= X2000(3,1)+TMP1
         Y1100(7)= X2000(4,1)
         Y1010(1)=           -X1000(1,3)
         Y1010(2)=-X2000(1,3)
         Y1010(3)=-X2000(2,3)
         Y1010(4)=-X2000(4,3)
         Y1010(5)=           -X1000(2,3)+X0000(2)
         Y1010(6)=-X2000(4,3)+X1000(1,2)
         Y1010(7)=-X2000(3,3)+X1000(2,2)
         TMP1= X1000(1,3)*XMD2
         TMP2=(-X1000(2,3)+X0000(2))*XMD2
         Y1110( 1)=-X3000(1,1)-TMP1
         Y1110( 2)=-X3000(3,1)
         Y1110( 3)=-X3000(3,1)-TMP1
         Y1110( 4)=-X3000(2,1)
         Y1110( 5)=-X3000(4,1)
         Y1110( 6)=-X3000(5,1)-TMP1
         Y1110( 7)=-X3000(2,1)+TMP2+X2000(1,2)
         Y1110( 8)=-X3000(4,1)+TMP2+X2000(2,2)
         Y1110( 9)=-X3000(5,1)     +X2000(4,2)
         Y1110(10)=-X3000(6,1)+TMP2+X2000(3,2)
      ELSE
         TMP1= X0000(1)*XMD2
         Y1100(1)= X0000(1)
         Y1100(2)= X1000(1,1)
         Y1100(3)= X1000(2,1)
         Y1100(4)= TMP1+X2000(1,1)
         Y1100(5)= TMP1+X2000(2,1)
         Y1100(6)= TMP1+X2000(3,1)
         Y1100(7)=     +X2000(4,1)
         Y1010( 1)=           -X1000(1,4)
         Y1010( 2)=-X2000(1,4)
         Y1010( 3)=-X2000(2,4)
         Y1010( 4)=-X2000(4,4)
         Y1010( 5)=           -X1000(2,4)+X0000(2)
         Y1010( 6)=-X2000(4,4)+X1000(1,2)
         Y1010( 7)=-X2000(3,4)+X1000(2,2)
         Y1010( 8)=           -X1000(1,5)
         Y1010( 9)=-X2000(1,5)
         Y1010(10)=-X2000(2,5)
         Y1010(11)=-X2000(4,5)
         Y1010(12)=           -X1000(2,5)+X0000(3)
         Y1010(13)=-X2000(4,5)+X1000(1,3)
         Y1010(14)=-X2000(3,5)+X1000(2,3)
C
         TMP1=  X1000(1,4)*XMD2
         TMP2=(-X1000(2,4)+X0000(2))*XMD2
         TMP3=  X1000(1,5)*XMD2
         TMP4=(-X1000(2,5)+X0000(3))*XMD2
         Y1110( 1)=-X3000(1,1)-TMP1
         Y1110( 2)=-X3000(3,1)
         Y1110( 3)=-X3000(3,1)-TMP1
         Y1110( 4)=-X3000(2,1)
         Y1110( 5)=-X3000(4,1)
         Y1110( 6)=-X3000(5,1)-TMP1
         Y1110( 7)=-X3000(2,1)+TMP2+X2000(1,2)
         Y1110( 8)=-X3000(4,1)+TMP2+X2000(2,2)
         Y1110( 9)=-X3000(5,1)     +X2000(4,2)
         Y1110(10)=-X3000(6,1)+TMP2+X2000(3,2)
         Y1110(11)=-X3000(1,2)-TMP3
         Y1110(12)=-X3000(3,2)
         Y1110(13)=-X3000(3,2)-TMP3
         Y1110(14)=-X3000(2,2)
         Y1110(15)=-X3000(4,2)
         Y1110(16)=-X3000(5,2)-TMP3
         Y1110(17)=-X3000(2,2)+TMP4+X2000(1,3)
         Y1110(18)=-X3000(4,2)+TMP4+X2000(2,3)
         Y1110(19)=-X3000(5,2)     +X2000(4,3)
         Y1110(20)=-X3000(6,2)+TMP4+X2000(3,3)
C
         Y0011(1) = X2000(1,6)+X0000(4)
         Y0011(2) = X2000(2,6)+X0000(4)
         Y0011(3) = X2000(4,6)        -X1000(1,6)
         Y0011(4) = X2000(4,6)        -X1000(1,6)-X1000(1,7)
         Y0011(5)= X2000(3,6)+X0000(4)-X1000(2,6)*TWO
     *                          +X0000(5)-X1000(2,7)
C
         Y1011( 1)= X3000(1,3)+X1000(1,8)
         Y1011( 2)= X3000(3,3)+X1000(1,8)
         Y1011( 3)= X3000(3,3)
         Y1011( 4)= X3000(2,3)+X1000(2,8)
         Y1011( 5)= X3000(4,3)+X1000(2,8)
         Y1011( 6)= X3000(2,3)           -X2000(1,10)
         Y1011( 7)= X3000(4,3)           -X2000(2,10)
         Y1011( 8)= X3000(5,3)           -X2000(4,10)
         Y1011( 9)= X3000(5,3)+X1000(1,8)-X2000(4,10)*TWO
     *                        +X1000(1,9)+X2000(4,9)
         Y1011(10)= X3000(6,3)+X1000(2,8)-X2000(3,10)*TWO
     *                        +X1000(2,9)+X2000(3,9)
         Y1011(11)= X3000(2,3)           -X2000(1,10)+X2000(1,9)
         Y1011(12)= X3000(4,3)           -X2000(2,10)+X2000(2,9)
         Y1011(13)= X3000(5,3)           -X2000(4,10)+X2000(4,9)
C
         TMP1= (X2000(1,6)+X0000(4))*XMD2
         TMP2= (X2000(2,6)+X0000(4))*XMD2
         TMP3= (X2000(4,6)-X1000(1,6))*XMD2
         TMP4= (X2000(4,6)-X1000(1,6)-X1000(1,7))*XMD2
         TMP5= (X2000(3,6)+X0000(4)+X0000(5)-X1000(2,6)*TWO
     *                                      -X1000(2,7))*XMD2
         Y1111( 1)= X4000(1)-X2000(1,8)+TMP1
         Y1111( 2)= X4000(3)-X2000(2,8)+TMP1
         Y1111( 3)= X4000(3)
         Y1111( 4)= X4000(3)-X2000(1,8)+TMP2
         Y1111( 5)= X4000(7)-X2000(2,8)+TMP2
         Y1111( 6)= X4000(2)-X2000(4,8)
         Y1111( 7)= X4000(5)
         Y1111( 8)= X4000(5)-X2000(4,8)
         Y1111( 9) =X4000(2)-X3000(1,5)+TMP3
         Y1111(10)= X4000(5)-X3000(3,5)+TMP3
         Y1111(11)= X4000(5)-X3000(3,5)
         Y1111(12)= X4000(4)-X2000(3,8)+TMP1
         Y1111(13)= X4000(8)-X2000(3,8)+TMP2
         Y1111(14)= X4000(4)-X3000(2,5)
         Y1111(15)= X4000(8)-X3000(4,5)
         Y1111(16)= X4000(6)-X3000(5,5)+TMP3
         Y1111(17)= X4000(4)+X3000(2,4)-X3000(2,5)*TWO
     *             +X2000(1,7)-X2000(1,8)+TMP5
         Y1111(18)= X4000(8)+X3000(4,4)-X3000(4,5)*TWO
     *             +X2000(2,7)-X2000(2,8)+TMP5
         Y1111(19)= X4000(6)+X3000(5,4)-X3000(5,5)*TWO
     *             +X2000(4,7)-X2000(4,8)
         Y1111(20)= X4000(9)+X3000(6,4)-X3000(6,5)*TWO
     *             +X2000(3,7)-X2000(3,8)+TMP5
         Y1111(21)= X4000(2)+X3000(1,4)-X3000(1,5)+TMP4
         Y1111(22)= X4000(5)+X3000(3,4)-X3000(3,5)+TMP4
         Y1111(23)= X4000(5)+X3000(3,4)-X3000(3,5)
         Y1111(24)= X4000(4)+X3000(2,4)-X3000(2,5)
         Y1111(25)= X4000(8)+X3000(4,4)-X3000(4,5)
         Y1111(26)= X4000(6)+X3000(5,4)-X3000(5,5)+TMP4
      ENDIF
C
C FROM HERE, POPLE-HEHRE ALGORITHM IS USED.
C
C ROTATE FROM AXES-1 TO AXES-2
C
C JTYPE=1
      G(0,0,0,0)= Y1100(1)
      IF(JTYPE.EQ.1) GOTO 400
C JTYPE=2
      G(1,0,0,0)= Y1100(2)*COSP
      G(2,0,0,0)= Y1100(2)*SINP
      G(3,0,0,0)= Y1100(3)
      IF(JTYPE.EQ.2) GOTO 400
C JTYPE=3
      C2S0=COSP*COSP
      C1S1=COSP*SINP
      C0S2=SINP*SINP
      IF(JTYPE.EQ.4) GOTO 330
      G(1,1,0,0)= Y1100(4)*C2S0+Y1100(5)*C0S2
      G(2,1,0,0)= (Y1100(4)-Y1100(5))*C1S1
      G(3,1,0,0)= Y1100(7)*COSP
      G(2,2,0,0)= Y1100(4)*C0S2+Y1100(5)*C2S0
      G(3,2,0,0)= Y1100(7)*SINP
      G(3,3,0,0)= Y1100(6)
      IF(JTYPE.EQ.3) GOTO 400
  330 CONTINUE
C JTYPE=4
      G(0,0,1,0)= Y1010(1)*COSP
      G(1,0,1,0)= Y1010(2)*C2S0+Y1010(3)*C0S2
      G(2,0,1,0)= (Y1010(2)-Y1010(3))*C1S1
      G(3,0,1,0)= Y1010(4)*COSP
      G(0,0,2,0)= Y1010(1)*SINP
      G(1,0,2,0)= G(2,0,1,0)
      G(2,0,2,0)= Y1010(2)*C0S2+Y1010(3)*C2S0
      G(3,0,2,0)= Y1010(4)*SINP
      G(0,0,3,0)= Y1010(5)
      G(1,0,3,0)= Y1010(6)*COSP
      G(2,0,3,0)= Y1010(6)*SINP
      G(3,0,3,0)= Y1010(7)
      IF(JTYPE.EQ.4) GO TO 400
C JTYPE=5
            C3S0=C2S0*COSP
            C2S1=C2S0*SINP
            C1S2=C0S2*COSP
            C0S3=C0S2*SINP
            TMP1= Y1110(2)*TWO+Y1110(3)
            TMP2= Y1110(1)-Y1110(2)-Y1110(3)
            TMP3= Y1110(1)-Y1110(2)*TWO
            TMP4= (Y1110(4)-Y1110(5))*C1S1
C
            G(1,1,1,0)= C3S0*Y1110(1)+C1S2*TMP1
            G(2,1,1,0)= C2S1*TMP2+C0S3*Y1110(2)
            G(3,1,1,0)= C2S0*Y1110(4)+C0S2*Y1110(5)
            G(2,2,1,0)= C3S0*Y1110(3)+C1S2*TMP3
            G(3,2,1,0)= TMP4
            G(3,3,1,0)= COSP*Y1110(6)
            G(1,1,2,0)= C2S1*TMP3+C0S3*Y1110(3)
            G(2,1,2,0)= C3S0*Y1110(2)+C1S2*TMP2
            G(3,1,2,0)= TMP4
            G(2,2,2,0)= C0S3*Y1110(1)+C2S1*TMP1
            G(3,2,2,0)= C0S2*Y1110(4)+C2S0*Y1110(5)
            G(3,3,2,0)= SINP*Y1110(6)
            G(1,1,3,0)= C2S0*Y1110(7)+C0S2*Y1110(8)
            G(2,1,3,0)= C1S1*(Y1110(7)-Y1110(8))
            G(3,1,3,0)= COSP*Y1110(9)
            G(2,2,3,0)= C0S2*Y1110(7)+C2S0*Y1110(8)
            G(3,2,3,0)= SINP*Y1110(9)
            G(3,3,3,0)= Y1110(10)
         IF(JTYPE.EQ.5) GOTO 400
C JTYPE=6
           TMP1= Y1110(13)+Y1110(12)*TWO
           TMP2= Y1110(11)-Y1110(12)-Y1110(13)
           TMP3= Y1110(11)-Y1110(12)*TWO
           TMP4= (Y1110(14)-Y1110(15))*C1S1
           G(1,0,0,1)= (Y1010(9)*C2S0
     *                           +Y1010(10)*C0S2)
           G(2,0,0,1)= (Y1010(9)-Y1010(10))*C1S1
           G(3,0,0,1)= Y1010(11)*COSP
           G(1,0,0,2)= G(2,0,0,1)
           G(2,0,0,2)= Y1010(9)*C0S2
     *                           +Y1010(10)*C2S0
           G(3,0,0,2)= Y1010(11)*SINP
           G(1,0,0,3)= Y1010(13)*COSP
           G(2,0,0,3)= Y1010(13)*SINP
           G(3,0,0,3)= Y1010(14)
           G(0,0,0,1)= Y1010(8)*COSP
           G(0,0,0,2)= Y1010(8)*SINP
           G(0,0,0,3)= Y1010(12)
           G(1,1,0,1)= (C3S0*Y1110(11)
     *                           +C1S2*TMP1)
           G(2,1,0,1)= (C2S1*TMP2
     *                                 +C0S3*Y1110(12))
           G(3,1,0,1)= (C2S0*Y1110(14)+C0S2*Y1110(15))
           G(2,2,0,1)= (C3S0*Y1110(13)
     *                           +C1S2*TMP3)
           G(3,2,0,1)= TMP4
           G(3,3,0,1)= COSP*Y1110(16)
C
           G(1,1,0,2)= (C2S1*TMP3
     *                           +C0S3*Y1110(13))
           G(2,1,0,2)= (C3S0*Y1110(12)
     *                      +C1S2*TMP2)
           G(3,1,0,2)= TMP4
           G(2,2,0,2)= (C0S3*Y1110(11)
     *                           +C2S1*TMP1)
           G(3,2,0,2)= (C0S2*Y1110(14)+C2S0*Y1110(15))
           G(3,3,0,2)= SINP*Y1110(16)
C
           G(1,1,0,3)= (C2S0*Y1110(17)+C0S2*Y1110(18))
           G(2,1,0,3)= C1S1*(Y1110(17)-Y1110(18))
           G(3,1,0,3)= COSP*Y1110(19)
           G(2,2,0,3)= (C0S2*Y1110(17)+C2S0*Y1110(18))
           G(3,2,0,3)= SINP*Y1110(19)
           G(3,3,0,3)= Y1110(20)
           C4S0=C3S0*COSP
           C3S1=C3S0*SINP
           C2S2=C1S2*COSP
           C1S3=C1S2*SINP
           C0S4=C0S3*SINP
C
           G(1,1,1,1)= C4S0*Y1111(1)
     *                +C2S2*(Y1111(2)+Y1111(3)*FOUR+Y1111(4))
     *                +C0S4*Y1111(5)
           G(2,1,1,1)= C3S1*(Y1111(1)-Y1111(2)-Y1111(3)*TWO)
     *                +C1S3*(Y1111(3)*TWO+Y1111(4)-Y1111(5))
           G(3,1,1,1)= C3S0*Y1111(6)
     *                +C1S2*(Y1111(7)*TWO+Y1111(8))
           G(2,2,1,1)= C4S0*Y1111(2)
     *                +C2S2*(Y1111(1)-Y1111(3)*FOUR+Y1111(5))
     *                +C0S4*Y1111(4)
           G(3,2,1,1)= C2S1*(Y1111(6)-Y1111(7)*TWO)
     *                +C0S3*Y1111(8)
           G(3,3,1,1)= C2S0*Y1111(12)+C0S2*Y1111(13)
C
           TMP1=Y1111(1)-Y1111(3)*TWO-Y1111(4)
           TMP2=Y1111(2)+Y1111(3)*TWO-Y1111(5)
           TMP3=Y1111(1)-Y1111(2)-Y1111(3)*TWO-Y1111(4)+Y1111(5)
           G(1,1,2,1)= C3S1*TMP1
     *                +C1S3*TMP2
           G(2,1,2,1)= C4S0*Y1111(3)
     *                +C2S2*TMP3
     *                +C0S4*Y1111(3)
           G(3,1,2,1)= C2S1*(Y1111(6)-Y1111(7)-Y1111(8))
     *                +C0S3*Y1111(7)
           G(2,2,2,1)= C3S1*TMP2
     *                +C1S3*TMP1
           G(3,2,2,1)= C3S0*Y1111(7)
     *                +C1S2*(Y1111(6)-Y1111(7)-Y1111(8))
           G(3,3,2,1)= C1S1*(Y1111(12)-Y1111(13))
C
           G(1,1,3,1)= C3S0*Y1111(9)
     *                +C1S2*(Y1111(10)+Y1111(11)*TWO)
           G(2,1,3,1)= C2S1*(Y1111(9)-Y1111(10)-Y1111(11))
     *                +C0S3*Y1111(11)
           G(3,1,3,1)= C2S0*Y1111(14)
     *                +C0S2*Y1111(15)
           G(2,2,3,1)= C3S0*Y1111(10)
     *                +C1S2*(Y1111(9)-Y1111(11)*TWO)
           G(3,2,3,1)= C1S1*(Y1111(14)-Y1111(15))
           G(3,3,3,1)= COSP*Y1111(16)
C
           G(1,1,1,2)= G(1,1,2,1)
           G(2,1,1,2)= G(2,1,2,1)
           G(3,1,1,2)= G(3,1,2,1)
           G(2,2,1,2)= G(2,2,2,1)
           G(3,2,1,2)= G(3,2,2,1)
           G(3,3,1,2)= G(3,3,2,1)
C
           G(1,1,2,2)= C4S0*Y1111(4)
     *                +C2S2*(Y1111(1)-Y1111(3)*FOUR+Y1111(5))
     *                +C0S4*Y1111(2)
           G(2,1,2,2)= C3S1*(Y1111(3)*TWO+Y1111(4)-Y1111(5))
     *                +C1S3*(Y1111(1)-Y1111(2)-Y1111(3)*TWO)
           G(3,1,2,2)= C3S0*Y1111(8)
     *                +C1S2*(Y1111(6)-Y1111(7)*TWO)
           G(2,2,2,2)= C4S0*Y1111(5)
     *                +C2S2*(Y1111(2)+Y1111(3)*FOUR+Y1111(4))
     *                +C0S4*Y1111(1)
           G(3,2,2,2)= C2S1*(Y1111(7)*TWO+Y1111(8))
     *                +C0S3*Y1111(6)
           G(3,3,2,2)= C2S0*Y1111(13)
     *                +C0S2*Y1111(12)
C
           G(1,1,3,2)= C2S1*(Y1111(9)-Y1111(11)*TWO)
     *                +C0S3*Y1111(10)
           G(2,1,3,2)= C3S0*Y1111(11)
     *                +C1S2*(Y1111(9)-Y1111(10)-Y1111(11))
           G(3,1,3,2)= C1S1*(Y1111(14)-Y1111(15))
           G(2,2,3,2)= C2S1*(Y1111(10)+Y1111(11)*TWO)
     *                +C0S3*Y1111(9)
           G(3,2,3,2)= C2S0*Y1111(15)
     *                +C0S2*Y1111(14)
           G(3,3,3,2)= SINP*Y1111(16)
C
           G(1,1,1,3)= C3S0*Y1111(21)
     *                +C1S2*(Y1111(22)+Y1111(23)*TWO)
           G(2,1,1,3)= C2S1*(Y1111(21)-Y1111(22)-Y1111(23))
     *                +C0S3*Y1111(23)
           G(3,1,1,3)= C2S0*Y1111(24)
     *                +C0S2*Y1111(25)
           G(2,2,1,3)= C3S0*Y1111(22)
     *                +C1S2*(Y1111(21)-Y1111(23)*TWO)
           G(3,2,1,3)= C1S1*(Y1111(24)-Y1111(25))
           G(3,3,1,3)= COSP*Y1111(26)
C
           G(1,1,2,3)= C2S1*(Y1111(21)-Y1111(23)*TWO)
     *                +C0S3*Y1111(22)
           G(2,1,2,3)= C3S0*Y1111(23)
     *                +C1S2*(Y1111(21)-Y1111(22)-Y1111(23))
           G(3,1,2,3)= C1S1*(Y1111(24)-Y1111(25))
           G(2,2,2,3)= C2S1*(Y1111(22)+Y1111(23)*TWO)
     *                +C0S3*Y1111(21)
           G(3,2,2,3)= C2S0*Y1111(25)
     *                +C0S2*Y1111(24)
           G(3,3,2,3)= SINP*Y1111(26)
C
           G(1,1,3,3)= C2S0*Y1111(17)
     *                +C0S2*Y1111(18)
           G(2,1,3,3)= C1S1*(Y1111(17)-Y1111(18))
           G(3,1,3,3)= COSP*Y1111(19)
           G(2,2,3,3)= C2S0*Y1111(18)
     *                +C0S2*Y1111(17)
           G(3,2,3,3)= SINP*Y1111(19)
           G(3,3,3,3)= Y1111(20)
C
           G(1,0,1,1)= C3S0*Y1011(1)
     *                +C1S2*(Y1011(2)+Y1011(3)*TWO)
           G(2,0,1,1)= C2S1*(Y1011(1)-Y1011(3)*TWO)
     *                +C0S3*Y1011(2)
           G(3,0,1,1)= C2S0*Y1011(4)
     *                +C0S2*Y1011(5)
           G(1,0,2,1)= C2S1*(Y1011(1)-Y1011(2)-Y1011(3))
     *                +C0S3*Y1011(3)
           G(2,0,2,1)= C3S0*Y1011(3)
     *                +C1S2*(Y1011(1)-Y1011(2)-Y1011(3))
           G(3,0,2,1)= C1S1*(Y1011(4)-Y1011(5))
           G(1,0,3,1)= C2S0*Y1011(6)
     *                +C0S2*Y1011(7)
           G(2,0,3,1)= C1S1*(Y1011(6)-Y1011(7))
           G(3,0,3,1)= COSP*Y1011(8)
           G(1,0,1,2)= G(1,0,2,1)
           G(2,0,1,2)= G(2,0,2,1)
           G(3,0,1,2)= G(3,0,2,1)
           G(1,0,2,2)= C3S0*Y1011(2)
     *                +C1S2*(Y1011(1)-Y1011(3)*TWO)
           G(2,0,2,2)= C2S1*(Y1011(2)+Y1011(3)*TWO)
     *                +C0S3*Y1011(1)
           G(3,0,2,2)= C2S0*Y1011(5)
     *                +C0S2*Y1011(4)
           G(1,0,3,2)= C1S1*(Y1011(6)-Y1011(7))
           G(2,0,3,2)= C2S0*Y1011(7)
     *                +C0S2*Y1011(6)
           G(3,0,3,2)= SINP*Y1011(8)
           G(1,0,1,3)= C2S0*Y1011(11)
     *                +C0S2*Y1011(12)
           G(2,0,1,3)= C1S1*(Y1011(11)-Y1011(12))
           G(3,0,1,3)= COSP*Y1011(13)
           G(1,0,2,3)= G(2,0,1,3)
           G(2,0,2,3)= C2S0*Y1011(12)
     *                +C0S2*Y1011(11)
           G(3,0,2,3)= SINP*Y1011(13)
           G(1,0,3,3)= COSP*Y1011(9)
           G(2,0,3,3)= SINP*Y1011(9)
           G(3,0,3,3)=      Y1011(10)
C
           G(0,0,1,1)= C2S0*Y0011(1)+C0S2*Y0011(2)
           G(0,0,2,1)= C1S1*(Y0011(1)-Y0011(2))
           G(0,0,3,1)= COSP*Y0011(3)
           G(0,0,1,2)= G(0,0,2,1)
           G(0,0,2,2)= C2S0*Y0011(2)+C0S2*Y0011(1)
           G(0,0,3,2)= SINP*Y0011(3)
           G(0,0,1,3)= COSP*Y0011(4)
           G(0,0,2,3)= SINP*Y0011(4)
           G(0,0,3,3)= Y0011(5)
  400 CONTINUE
      RETURN
      END
C*MODULE INT2B   *DECK TQ0S1S
      SUBROUTINE TQ0S1S(JTYPE,R34,F)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION F(0:3,0:3,0:3,0:3)
C
C TRANSLATE UP TO 160 INTEGRALS ON A B AND Q
C        TO UP TO 256 INTEGRALS ON A B C AND D
C
      COMMON /JMSGYH/ G(0:3,0:3,0:3,0:3),
     2                RQ(0:1,0:1),SQ(0:1,0:1)
C
      PARAMETER (ZER=0.0D+00)
C
      IF(JTYPE.EQ.3) THEN
         G(0,1,0,0)= G(1,0,0,0)
         G(0,2,0,0)= G(2,0,0,0)
         G(0,3,0,0)= G(3,0,0,0)
         G(1,2,0,0)= G(2,1,0,0)
         G(1,3,0,0)= G(3,1,0,0)
         G(2,3,0,0)= G(3,2,0,0)
         IF(R34.GT.ZER) THEN
            G(0,1,0,0)= G(0,1,0,0)+G(0,0,0,0)*RQ(0,0)
            G(0,3,0,0)= G(0,3,0,0)+G(0,0,0,0)*RQ(1,0)
            DO 310 I=1,3
               G(I,1,0,0)= G(I,1,0,0)+G(I,0,0,0)*RQ(0,0)
               G(I,3,0,0)= G(I,3,0,0)+G(I,0,0,0)*RQ(1,0)
               G(1,I,0,0)= G(1,I,0,0)+G(0,I,0,0)*RQ(0,1)
               G(3,I,0,0)= G(3,I,0,0)+G(0,I,0,0)*RQ(1,1)
  310       CONTINUE
            G(1,0,0,0)= G(1,0,0,0)+G(0,0,0,0)*RQ(0,1)
            G(3,0,0,0)= G(3,0,0,0)+G(0,0,0,0)*RQ(1,1)
         ENDIF
         N= 0
         DO 320 J=0,3
            F(0,J,0,0)= F(0,J,0,0)+G(0,J,0,0)*SQ(0,N)
            F(1,J,0,0)= F(1,J,0,0)+G(1,J,0,0)*SQ(1,N)
            F(2,J,0,0)= F(2,J,0,0)+G(2,J,0,0)*SQ(1,N)
            F(3,J,0,0)= F(3,J,0,0)+G(3,J,0,0)*SQ(1,N)
  320    N= 1
      ELSEIF(JTYPE.EQ.4) THEN
         IF(R34.GT.ZER) THEN
            DO 410 K=0,3
               G(1,0,K,0)= G(1,0,K,0)+G(0,0,K,0)*RQ(0,1)
               G(3,0,K,0)= G(3,0,K,0)+G(0,0,K,0)*RQ(1,1)
  410       CONTINUE
         ENDIF
         DO 420 K=0,3
            F(0,0,K,0)= F(0,0,K,0)+G(0,0,K,0)*SQ(0,0)
            F(1,0,K,0)= F(1,0,K,0)+G(1,0,K,0)*SQ(1,0)
            F(2,0,K,0)= F(2,0,K,0)+G(2,0,K,0)*SQ(1,0)
            F(3,0,K,0)= F(3,0,K,0)+G(3,0,K,0)*SQ(1,0)
  420    CONTINUE
      ELSEIF(JTYPE.EQ.5) THEN
         IF(R34.GT.ZER) THEN
            DO 520 K=0,3
               G(0,1,K,0)= G(1,0,K,0)
               G(0,2,K,0)= G(2,0,K,0)
               G(0,3,K,0)= G(3,0,K,0)
               G(1,2,K,0)= G(2,1,K,0)
               G(1,3,K,0)= G(3,1,K,0)
               G(2,3,K,0)= G(3,2,K,0)
               G(0,1,K,0)= G(0,1,K,0)+G(0,0,K,0)*RQ(0,0)
               G(0,3,K,0)= G(0,3,K,0)+G(0,0,K,0)*RQ(1,0)
               DO 510 I=1,3
                  G(I,1,K,0)= G(I,1,K,0)+G(I,0,K,0)*RQ(0,0)
                  G(I,3,K,0)= G(I,3,K,0)+G(I,0,K,0)*RQ(1,0)
                  G(1,I,K,0)= G(1,I,K,0)+G(0,I,K,0)*RQ(0,1)
                  G(3,I,K,0)= G(3,I,K,0)+G(0,I,K,0)*RQ(1,1)
  510          CONTINUE
               G(1,0,K,0)= G(1,0,K,0)+G(0,0,K,0)*RQ(0,1)
               G(3,0,K,0)= G(3,0,K,0)+G(0,0,K,0)*RQ(1,1)
  520       CONTINUE
         ELSE
            DO 530 K=0,3
               G(0,1,K,0)= G(1,0,K,0)
               G(0,2,K,0)= G(2,0,K,0)
               G(0,3,K,0)= G(3,0,K,0)
               G(1,2,K,0)= G(2,1,K,0)
               G(1,3,K,0)= G(3,1,K,0)
               G(2,3,K,0)= G(3,2,K,0)
  530       CONTINUE
         ENDIF
         DO 550 K=0,3
            N= 0
            DO 540 J=0,3
               F(0,J,K,0)= F(0,J,K,0)+G(0,J,K,0)*SQ(0,N)
               F(1,J,K,0)= F(1,J,K,0)+G(1,J,K,0)*SQ(1,N)
               F(2,J,K,0)= F(2,J,K,0)+G(2,J,K,0)*SQ(1,N)
               F(3,J,K,0)= F(3,J,K,0)+G(3,J,K,0)*SQ(1,N)
  540       N= 1
  550    CONTINUE
      ELSEIF(JTYPE.EQ.6) THEN
         IF(R34.GT.ZER) THEN
            DO 620 L=0,3
               DO 620 K=0,3
                  G(0,1,K,L)= G(1,0,K,L)
                  G(0,2,K,L)= G(2,0,K,L)
                  G(0,3,K,L)= G(3,0,K,L)
                  G(1,2,K,L)= G(2,1,K,L)
                  G(1,3,K,L)= G(3,1,K,L)
                  G(2,3,K,L)= G(3,2,K,L)
                  G(0,1,K,L)= G(0,1,K,L)+G(0,0,K,L)*RQ(0,0)
                  G(0,3,K,L)= G(0,3,K,L)+G(0,0,K,L)*RQ(1,0)
                  DO 610 I=1,3
                     G(I,1,K,L)= G(I,1,K,L)+G(I,0,K,L)*RQ(0,0)
                     G(I,3,K,L)= G(I,3,K,L)+G(I,0,K,L)*RQ(1,0)
                     G(1,I,K,L)= G(1,I,K,L)+G(0,I,K,L)*RQ(0,1)
                     G(3,I,K,L)= G(3,I,K,L)+G(0,I,K,L)*RQ(1,1)
  610             CONTINUE
                  G(1,0,K,L)= G(1,0,K,L)+G(0,0,K,L)*RQ(0,1)
                  G(3,0,K,L)= G(3,0,K,L)+G(0,0,K,L)*RQ(1,1)
  620       CONTINUE
         ELSE
            DO 630 L=0,3
               DO 630 K=0,3
                  G(0,1,K,L)= G(1,0,K,L)
                  G(0,2,K,L)= G(2,0,K,L)
                  G(0,3,K,L)= G(3,0,K,L)
                  G(1,2,K,L)= G(2,1,K,L)
                  G(1,3,K,L)= G(3,1,K,L)
                  G(2,3,K,L)= G(3,2,K,L)
  630       CONTINUE
         ENDIF
         DO 650 L=0,3
            DO 650 K=0,3
               N= 0
               DO 640 J=0,3
                  F(0,J,K,L)= F(0,J,K,L)+G(0,J,K,L)*SQ(0,N)
                  F(1,J,K,L)= F(1,J,K,L)+G(1,J,K,L)*SQ(1,N)
                  F(2,J,K,L)= F(2,J,K,L)+G(2,J,K,L)*SQ(1,N)
                  F(3,J,K,L)= F(3,J,K,L)+G(3,J,K,L)*SQ(1,N)
  640          N= 1
  650    CONTINUE
      ENDIF
      RETURN
      END
C
C*MODULE INT2B   *DECK INTJ1
      SUBROUTINE INTJ1
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C GENERATE JTYPE=1 INTEGRALS
C
      PARAMETER (MXGTOT=5000)
      PARAMETER (MXGSH=30, MXG2=MXGSH*MXGSH)
      PARAMETER (M3R=401)
C
      PARAMETER (ONE=1.0D+00, TWO=2.0D+00)
      PARAMETER (PI4=0.785398163397448D+00)
C
      COMMON /GEOMPQ/ R12,RAB,X34,X43,AQZ,QPR,QPS,
     2                TX12(MXG2),TX21(MXG2),TY01(MXG2),TY02(MXG2),
     3                D00P(MXG2),D01P(MXG2),D10P(MXG2),D11P(MXG2),
     4                NGANGB
      COMMON /MAXC  / CMAX(MXGTOT),CMAXA(MXGSH),CMAXB(MXGSH),
     2                CMAXC(MXGSH),CMAXD(MXGSH),ISMLP(MXG2),ISMLQ
      COMMON /INTACC/ EI1,EI2,CUF,RFI,CUG,RGI,CUX,R(3,0:5,0:M3R)
      COMMON/ FQ04/FQ(0:4),FQ0(5),FQ1(16),FQ2(3,9),FQ3(4,5),FQ4(5)
C
      DO 300 I=1,NGANGB
         ISML= ISMLQ+ISMLP(I)
         IF(ISML.GE.2) GO TO 300
         X12= TX12(I)
         Y02= TY02(I)
         FQ00= D00P(I)
         X41= ONE/(X12+X34)
         PQR= Y02-AQZ
         PQS= PQR*PQR
         XVA=(PQS+QPS)*X12*X34*X41
         IF(XVA.LE.CUF) THEN
            TMP= XVA*RFI
            N  = INT(TMP)
            C02= TMP-N
            TMP= C02*(C02-ONE)
            C03= TMP*(TWO-C02)
            C04= TMP*(ONE+C02)
            FQ(0)=(R(1,0,N)+C02*R(2,0,N)+C03*R(3,0,N)+
     1          C04*R(3,0,N+1))*FQ00*SQRT(X41)
         ELSE
            XIN= ONE/XVA
            FQ(0)= SQRT(PI4*X41*XIN)*FQ00
         ENDIF
C
         FQ0(1)= FQ0(1)+FQ(0)
  300 CONTINUE
      RETURN
      END
C
C*MODULE INT2B   *DECK INTJ2
      SUBROUTINE INTJ2
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C GENERATE JTYPE=2 INTEGRALS
C
      PARAMETER (MXGTOT=5000)
      PARAMETER (MXGSH=30, MXG2=MXGSH*MXGSH)
      PARAMETER (M3R=401)
C
      PARAMETER (ONE=1.0D+00, TWO=2.0D+00)
      PARAMETER (PI4=0.785398163397448D+00)
C
      COMMON /GEOMPQ/ R12,RAB,X34,X43,AQZ,QPR,QPS,
     2                TX12(MXG2),TX21(MXG2),TY01(MXG2),TY02(MXG2),
     3                D00P(MXG2),D01P(MXG2),D10P(MXG2),D11P(MXG2),
     4                NGANGB
      COMMON /MAXC  / CMAX(MXGTOT),CMAXA(MXGSH),CMAXB(MXGSH),
     2                CMAXC(MXGSH),CMAXD(MXGSH),ISMLP(MXG2),ISMLQ
      COMMON /INTACC/ EI1,EI2,CUF,RFI,CUG,RGI,CUX,R(3,0:5,0:M3R)
      COMMON/ FQ04/FQ(0:4),FQ0(5),FQ1(16),FQ2(3,9),FQ3(4,5),FQ4(5)
C
      DO 300 I=1,NGANGB
         ISML= ISMLQ+ISMLP(I)
         IF(ISML.GE.2) GO TO 300
         X12= TX12(I)
         Y02= TY02(I)
         FQ00= D00P(I)
         X41= ONE/(X12+X34)
         PQR= Y02-AQZ
         PQS= PQR*PQR
         RHO= X12*X34*X41
         XVA=(PQS+QPS)*RHO
         IF(XVA.LE.CUF) THEN
            RHO= RHO*TWO
            TMP= XVA*RFI
            N  = INT(TMP)
            C02= TMP-N
            TMP= C02*(C02-ONE)
            C03= TMP*(TWO-C02)
            C04= TMP*(ONE+C02)
            TMP= FQ00*SQRT(X41)
            DO 210 M=0,1
               FQ(M)=(R(1,M,N)+C02*R(2,M,N)+C03*R(3,M,N)+
     1                C04*R(3,M,N+1))*TMP
  210       TMP=TMP*RHO
         ELSE
            XIN= ONE/XVA
            FQ(0)= SQRT(PI4*XIN*X41)*FQ00
            FQ(1)= FQ(0)*XIN*RHO
         ENDIF
C
         FQ0(1)= FQ0(1)+FQ(0)
         FQ1(1)= FQ1(1)+FQ(1)
         FQ1(2)= FQ1(2)+FQ(1)*PQR
  300 CONTINUE
      RETURN
      END
C
C*MODULE INT2B   *DECK INTJ3
      SUBROUTINE INTJ3
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C GENERATE JTYPE=3 INTEGRALS
C
      PARAMETER (MXGTOT=5000)
      PARAMETER (MXGSH=30, MXG2=MXGSH*MXGSH)
      PARAMETER (M3R=401)
C
      PARAMETER (PT5=0.5D+00, ONE=1.0D+00, TWO=2.0D+00)
      PARAMETER (PI4=0.785398163397448D+00)
C
      COMMON /GEOMPQ/ R12,RAB,X34,X43,AQZ,QPR,QPS,
     2                TX12(MXG2),TX21(MXG2),TY01(MXG2),TY02(MXG2),
     3                D00P(MXG2),D01P(MXG2),D10P(MXG2),D11P(MXG2),
     4                NGANGB
      COMMON /MAXC  / CMAX(MXGTOT),CMAXA(MXGSH),CMAXB(MXGSH),
     2                CMAXC(MXGSH),CMAXD(MXGSH),ISMLP(MXG2),ISMLQ
      COMMON /INTACC/ EI1,EI2,CUF,RFI,CUG,RGI,CUX,R(3,0:5,0:M3R)
      COMMON/ FQ04/FQ(0:4),FQ0(5),FQ1(16),FQ2(27),FQ3(4,5),FQ4(5)
C
      DO 300 I=1,NGANGB
         ISML= ISMLQ+ISMLP(I)
         IF(ISML.GE.2) GO TO 300
         X12= TX12(I)
         Y02= TY02(I)
         FQ00= D00P(I)
         X41= ONE/(X12+X34)
         PQR= Y02-AQZ
         PQS= PQR*PQR
         RHO= X12*X34*X41
         XVA=(PQS+QPS)*RHO
         RHO= RHO*TWO
         IF(XVA.LE.CUF) THEN
            TMP= XVA*RFI
            N  = INT(TMP)
            C02= TMP-N
            TMP= C02*(C02-ONE)
            C03= TMP*(TWO-C02)
            C04= TMP*(ONE+C02)
            TMP= FQ00*SQRT(X41)
            DO 210 M=0,2
               FQ(M)=(R(1,M,N)+C02*R(2,M,N)+C03*R(3,M,N)+
     1                C04*R(3,M,N+1))*TMP
  210       TMP=TMP*RHO
         ELSE
            XIN= ONE/XVA
            FQ(0)= SQRT(PI4*XIN*X41)*FQ00
            TMP= PT5*XIN
            DO 220 M=1,2
               FQ(M)= FQ(M-1)*TMP*RHO
  220       TMP= TMP+XIN
         ENDIF
C
         FQ0(1)= FQ0(1)+FQ(0)
         FQ1(1)= FQ1(1)+FQ(1)
         FQ1(2)= FQ1(2)+FQ(1)*PQR
         FQ2(1)= FQ2(1)+FQ(2)
         FQ2(2)= FQ2(2)+FQ(2)*PQR
         FQ2(3)= FQ2(3)+FQ(2)*PQS
  300 CONTINUE
      RETURN
      END
C*MODULE INT2B   *DECK INTJ4
      SUBROUTINE INTJ4
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C GENERATE JTYPE=4 INTEGRALS
C
      PARAMETER (MXGTOT=5000)
      PARAMETER (MXGSH=30, MXG2=MXGSH*MXGSH)
      PARAMETER (M3R=401)
C
      PARAMETER (PT5=0.5D+00, ONE=1.0D+00, TWO=2.0D+00)
      PARAMETER (PI4=0.785398163397448D+00)
C
      COMMON /GEOMPQ/ R12,RAB,X34,X43,AQZ,QPR,QPS,
     2                TX12(MXG2),TX21(MXG2),TY01(MXG2),TY02(MXG2),
     3                D00P(MXG2),D01P(MXG2),D10P(MXG2),D11P(MXG2),
     4                NGANGB
      COMMON /MAXC  / CMAX(MXGTOT),CMAXA(MXGSH),CMAXB(MXGSH),
     2                CMAXC(MXGSH),CMAXD(MXGSH),ISMLP(MXG2),ISMLQ
      COMMON /INTACC/ EI1,EI2,CUF,RFI,CUG,RGI,CUX,R(3,0:5,0:M3R)
      COMMON/ FQ04/FQ(0:4),FQ0(5),FQ1(16),FQ2(27),FQ3(4,5),FQ4(5)
C
      DO 300 I=1,NGANGB
         ISML= ISMLQ+ISMLP(I)
         IF(ISML.GE.2) GO TO 300
         X12= TX12(I)
         Y02= TY02(I)
         FQ00= D01P(I)
         X41= ONE/(X12+X34)
         PQR= Y02-AQZ
         PQS= PQR*PQR
         RHO= X12*X34*X41
         XVA=(PQS+QPS)*RHO
         RHO= RHO*TWO
         IF(XVA.LE.CUF) THEN
            TMP= XVA*RFI
            N  = INT(TMP)
            C02= TMP-N
            TMP= C02*(C02-ONE)
            C03= TMP*(TWO-C02)
            C04= TMP*(ONE+C02)
            TMP= FQ00*SQRT(X41)
            DO 210 M=0,2
               FQ(M)=(R(1,M,N)+C02*R(2,M,N)+C03*R(3,M,N)+
     1                C04*R(3,M,N+1))*TMP
  210       TMP=TMP*RHO
         ELSE
            XIN= ONE/XVA
            FQ(0)= SQRT(PI4*XIN*X41)*FQ00
            TMP= PT5*XIN
            DO 220 M=1,2
               FQ(M)= FQ(M-1)*TMP*RHO
  220       TMP= TMP+XIN
         ENDIF
C
         X21= TX21(I)
         Y01= TY01(I)
         DP00= D00P(I)
         TMP1= X21*PT5
         TMP2= TMP1*PQR
         TMP3= TMP1*PQS
         FQ0(1)= FQ0(1)+FQ(0)*DP00
         FQ0(2)= FQ0(2)+FQ(0)*Y01
         FQ1(1)= FQ1(1)+FQ(1)*DP00
         FQ1(2)= FQ1(2)+FQ(1)*DP00*PQR
         FQ1(3)= FQ1(3)+FQ(1)*Y01
         FQ1(4)= FQ1(4)+FQ(1)*Y01*PQR
         FQ1(5)= FQ1(5)+FQ(1)*TMP1
         FQ1(6)= FQ1(6)+FQ(1)*TMP2
         FQ2(1)= FQ2(1)+FQ(2)*TMP1
         FQ2(2)= FQ2(2)+FQ(2)*TMP2
         FQ2(3)= FQ2(3)+FQ(2)*TMP3
  300 CONTINUE
      RETURN
      END
C
C*MODULE INT2B   *DECK INTJ5
      SUBROUTINE INTJ5
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C GENERATE JTYPE=5 INTEGRALS
C
      PARAMETER (MXGTOT=5000)
      PARAMETER (MXGSH=30, MXG2=MXGSH*MXGSH)
      PARAMETER (M3R=401)
C
      PARAMETER ( PT5=0.5D+00, ONE=1.0D+00, TWO=2.0D+00)
      PARAMETER (PI4=0.785398163397448D+00)
C
      COMMON /GEOMPQ/ R12,RAB,X34,X43,AQZ,QPR,QPS,
     2                TX12(MXG2),TX21(MXG2),TY01(MXG2),TY02(MXG2),
     3                D00P(MXG2),D01P(MXG2),D10P(MXG2),D11P(MXG2),
     4                NGANGB
      COMMON /MAXC  / CMAX(MXGTOT),CMAXA(MXGSH),CMAXB(MXGSH),
     2                CMAXC(MXGSH),CMAXD(MXGSH),ISMLP(MXG2),ISMLQ
      COMMON /INTACC/ EI1,EI2,CUF,RFI,CUG,RGI,CUX,R(3,0:5,0:M3R)
      COMMON/ FQ04/FQ(0:4),FQ0(5),FQ1(16),FQ2(27),FQ3(20),FQ4(5)
C
      DIMENSION WORK(10)
C
      DO 300 I=1,NGANGB
         ISML= ISMLQ+ISMLP(I)
         IF(ISML.GE.2) GO TO 300
         X12= TX12(I)
         Y02= TY02(I)
         FQ00= D01P(I)
         X41= ONE/(X12+X34)
         PQR= Y02-AQZ
         PQS= PQR*PQR
         RHO= X12*X34*X41
         XVA=(PQS+QPS)*RHO
         RHO= RHO*TWO
         IF(XVA.LE.CUF) THEN
            TMP= XVA*RFI
            N  = INT(TMP)
            C02= TMP-N
            TMP= C02*(C02-ONE)
            C03= TMP*(TWO-C02)
            C04= TMP*(ONE+C02)
            TMP= FQ00*SQRT(X41)
            DO 210 M=0,3
               FQ(M)=(R(1,M,N)+C02*R(2,M,N)+C03*R(3,M,N)+
     1                C04*R(3,M,N+1))*TMP
  210       TMP=TMP*RHO
         ELSE
            XIN= ONE/XVA
            FQ(0)= SQRT(PI4*XIN*X41)*FQ00
            TMP= PT5*XIN
            DO 220 M=1,3
               FQ(M)= FQ(M-1)*TMP*RHO
  220       TMP= TMP+XIN
         ENDIF
C
         X21= TX21(I)
         Y01= TY01(I)
         DP00= D00P(I)
         XMD1= X21*PT5
         WORK( 1)= DP00
         WORK( 2)= DP00*PQR
         WORK( 3)= DP00*PQS
         WORK( 4)= Y01
         WORK( 5)= Y01*PQR
         WORK( 6)= Y01*PQS
         WORK( 7)= XMD1
         WORK( 8)= XMD1*PQR
         WORK( 9)= XMD1*PQS
         WORK(10)= XMD1*PQR*PQS
C
         FQ0(1)= FQ0(1)+FQ(0)*WORK(1)
         FQ0(2)= FQ0(2)+FQ(0)*WORK(4)
         FQ1(1)= FQ1(1)+FQ(1)*WORK(1)
         FQ1(2)= FQ1(2)+FQ(1)*WORK(2)
         FQ1(3)= FQ1(3)+FQ(1)*WORK(4)
         FQ1(4)= FQ1(4)+FQ(1)*WORK(5)
         FQ1(5)= FQ1(5)+FQ(1)*WORK(7)
         FQ1(6)= FQ1(6)+FQ(1)*WORK(8)
         DO 230 J=1,9
            FQ2(J)= FQ2(J)+FQ(2)*WORK(J)
  230    CONTINUE
         DO 240 J=1,4
            FQ3(J)= FQ3(J)+FQ(3)*WORK(J+6)
  240    CONTINUE
  300 CONTINUE
      RETURN
      END
C
C*MODULE INT2B   *DECK INTJ6
      SUBROUTINE INTJ6
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C GENERATE JTYPE=6 INTEGRALS
C
      PARAMETER (MXGTOT=5000)
      PARAMETER (MXGSH=30, MXG2=MXGSH*MXGSH)
      PARAMETER (M3R=401)
C
      PARAMETER ( PT5=0.5D+00, ONE=1.0D+00, TWO=2.0D+00)
      PARAMETER (PI4=0.785398163397448D+00)
C
      COMMON /GEOMPQ/ R12,RAB,X34,X43,AQZ,QPR,QPS,
     2                TX12(MXG2),TX21(MXG2),TY01(MXG2),TY02(MXG2),
     3                D00P(MXG2),D01P(MXG2),D10P(MXG2),D11P(MXG2),
     4                NGANGB
      COMMON /MAXC  / CMAX(MXGTOT),CMAXA(MXGSH),CMAXB(MXGSH),
     2                CMAXC(MXGSH),CMAXD(MXGSH),ISMLP(MXG2),ISMLQ
      COMMON /INTACC/ EI1,EI2,CUF,RFI,CUG,RGI,CUX,R(3,0:5,0:M3R)
      COMMON /SHLLFO/ NGA,LA,EXA(MXGSH),CSA(MXGSH),CPA(MXGSH),
     2                NGB,LB,EXB(MXGSH),CSB(MXGSH),CPB(MXGSH),
     3                NGC,LC,EXC(MXGSH),CSC(MXGSH),CPC(MXGSH),
     4                NGD,LD,EXD(MXGSH),CSD(MXGSH),CPD(MXGSH)
      COMMON/ FQ04/FQ(0:4),FQ0(5),FQ1(2,8),FQ2(3,9),FQ3(4,5),FQ4(5)
C
      DIMENSION WORK(4,9)
C
      I= 1
      DO 300 II=1,NGA
       XMDA= EXA(II)
       DO 300 JJ=1,NGB
         ISML= ISMLQ+ISMLP(I)
         IF(ISML.GE.2) GO TO 300
         X12= TX12(I)
         Y02= TY02(I)
         FQ00= D11P(I)
         X41= ONE/(X12+X34)
         PQR= Y02-AQZ
         PQS= PQR*PQR
         RHO= X12*X34*X41
         XVA=(PQS+QPS)*RHO
         RHO= RHO*TWO
         IF(XVA.LE.CUF) THEN
            TMP= XVA*RFI
            N  = INT(TMP)
            C02= TMP-N
            TMP= C02*(C02-ONE)
            C03= TMP*(TWO-C02)
            C04= TMP*(ONE+C02)
            TMP= FQ00*SQRT(X41)
            DO 210 M=0,4
               FQ(M)=(R(1,M,N)+C02*R(2,M,N)+C03*R(3,M,N)+
     1                C04*R(3,M,N+1))*TMP
  210       TMP=TMP*RHO
         ELSE
            XIN= ONE/XVA
            FQ(0)= SQRT(PI4*XIN*X41)*FQ00
            TMP= PT5*XIN
            DO 220 M=1,4
               FQ(M)= FQ(M-1)*TMP*RHO
  220       TMP= TMP+XIN
         ENDIF
C
         X21= TX21(I)
         Y01= TY01(I)
         DP00= D00P(I)
         DP01= D01P(I)
         DP10= D10P(I)
         XMD1= X21*PT5
         TMP1= X21*XMDA
         PQT = PQR*PQS
         WORK(1,1)= DP00
         WORK(2,1)= WORK(1,1)*PQR
         WORK(3,1)= WORK(1,1)*PQS
         WORK(1,2)= Y01*DP01
         WORK(2,2)= WORK(1,2)*PQR
         WORK(3,2)= WORK(1,2)*PQS
         WORK(1,3)= Y02*DP10
         WORK(2,3)= WORK(1,3)*PQR
         WORK(3,3)= WORK(1,3)*PQS
         WORK(1,4)= XMD1*DP01
         WORK(2,4)= WORK(1,4)*PQR
         WORK(3,4)= WORK(1,4)*PQS
         WORK(4,4)= WORK(1,4)*PQT
         WORK(1,5)= XMD1*DP10
         WORK(2,5)= WORK(1,5)*PQR
         WORK(3,5)= WORK(1,5)*PQS
         WORK(4,5)= WORK(1,5)*PQT
         WORK(1,6)= XMD1*XMD1
         WORK(2,6)= WORK(1,6)*PQR
         WORK(3,6)= WORK(1,6)*PQS
         WORK(4,6)= WORK(1,6)*PQT
         WORK(1,7)= XMD1*TMP1
         WORK(2,7)= WORK(1,7)*TMP1
         WORK(3,7)= WORK(2,7)*TMP1
         WORK(4,7)= WORK(3,7)*TMP1
         WORK(1,8)= Y01*Y02
         WORK(2,8)= WORK(1,8)*PQR
         WORK(3,8)= WORK(1,8)*PQS
         WORK(1,9)= XMD1
C
         FQ0(1)= FQ0(1)+FQ(0)*WORK(1,1)
         FQ0(2)= FQ0(2)+FQ(0)*WORK(1,2)
         FQ0(3)= FQ0(3)+FQ(0)*WORK(1,3)
         FQ0(4)= FQ0(4)+FQ(0)*WORK(1,9)
         FQ0(5)= FQ0(5)+FQ(0)*WORK(1,8)
C
         DO 230 K=1,5
            DO 230 J=1,2
               FQ1(J,K)= FQ1(J,K)+FQ(1)*WORK(J,K)
  230    CONTINUE
         FQ1(1,6)= FQ1(1,6)+FQ(1)*WORK(1,6)
         FQ1(2,6)= FQ1(2,6)+FQ(1)*WORK(1,9)
         DO 240 K=7,8
            DO 240 J=1,2
               FQ1(J,K)= FQ1(J,K)+FQ(1)*WORK(J,K)
  240    CONTINUE
C
         DO 250 J=1,8
            DO 250 K=1,3
               FQ2(K,J)= FQ2(K,J)+FQ(2)*WORK(K,J)
  250    CONTINUE
         FQ2(1,9)= FQ2(1,9)+FQ(2)*WORK(1,9)
C
         DO 260 J=1,4
            DO 260 K=1,4
               FQ3(K,J)= FQ3(K,J)+FQ(3)*WORK(K,J+3)
  260    CONTINUE
         FQ3(1,5)= FQ3(1,5)+FQ(3)*WORK(1,9)
C
         FQ4(1)= FQ4(1)+FQ(4)*WORK(1,6)
         FQ4(2)= FQ4(2)+FQ(4)*WORK(2,6)
         FQ4(3)= FQ4(3)+FQ(4)*WORK(3,6)
         FQ4(4)= FQ4(4)+FQ(4)*WORK(4,6)
         FQ4(5)= FQ4(5)+FQ(4)*WORK(4,6)*PQR
  300 I=I+1
      RETURN
      END
