C  9 DEC 03 - MWS - SYNCH COMMON BLOCK RUNOPT
C 22 MAY 02 - MWS - PROVIDE ADDITIONAL TRFMCX ARGUMENTS
C 26 MAR 02 - MWS - POLRHF: RETURN MEMORY WHEN DONE
C 25 JUN 01 - MWS - ALTER COMMON BLOCK WFNOPT
C 13 JUN 01 - MWS - PAD OUT EDCMP COMMON
C 19 NOV 00 - RMM,HL - POLAP,POLAPM: CALC POLARIZ. W/APPROX TO CPHF
C 26 OCT 00 - MWS - INTRODUCE MXAO PARAMETER
C  1 MAY 00 - MWS - POLRHF: UPDATE ARGS TO CPWXYO FOR SPHER. HARM.
C 16 FEB 00 - VK  - LPOLX: MCORE SHOULD NOT BE ZERO IF NOUTA.GT.0
C                   LPOLX: ABORT IF MO-S ARE FROZEN AND SCFTYP=RHF
C 21 DEC 99 - MWS - REMOVE C1 DOWNSHIFT FROM TRANSF. BUT NOT AO INTS
C 12 NOV 98 - GDF - CHANGE BIT PACKING TO ISHIFT
C 27 OCT 98 - MAF - LPOLX: ALLOW FOR USE OF SPHERICAL HARMONICS
C 28 SEP 97 - MWS - CONVERT PARALLEL CALLS FROM TCGMSG TO DDI
C  2 SEP 97 - MWS - POLRHF,POLROHF: WATCH FOR 32 BIT INTEGER OVERFLOWS
C 19 JUL 97 - PND - LPOLX: RESET VALUE FOR DSKWRK ON EXIT
C 18 DEC 96 - MWS - POLRHF,POLROHF: FIX BUGS DATING FROM FEB 16
C 12 DEC 96 - JHJ - TRANSFORMED DIPOLE INTS WRITTEN TO DAF 252-4
C 13 JUN 96 - MWS - CORRECT CPHF CALLS TO PASS DIAGONAL HESSIAN STORAGE
C  6 MAR 96 - SPW - LAPOL,LOAPOL,LPOLX: CHANGES FOR LOCALIZED CORE
C 14 SEP 95 - SPW - NEW MODULE FOR LOCALIZED ORBITAL POLARIZABILITIES
C
C*MODULE LOCPOL    *DECK LAPOL
      SUBROUTINE LAPOL(U,UL,HF,HFL,TRAN,DLPOL,VCOC,IA,NXYZ,
     *                  NUM2,NOCC,NVIR,MCORE,NLOC)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK,MOIDON,EDCOMP,DIPDCM,QADDCM,
     *        DEPRNT,ZDO,POLDCM,POLANG,POLAPP,KMIDPT
C
      PARAMETER (MXATM=500, NMO=500, MXAO=2047)
C
      DIMENSION U(NOCC,NVIR,NXYZ),
     *          UL(NVIR,3),HF(NUM2,3),HFL(NVIR,3),TRAN(NLOC,NLOC),
     *          IA(NUM),CAPOL(9),APOLANG(9),DLPOL(9,NLOC),VCOC(3*NA)
C
      COMMON /EDCMP / MOIDNO(5,NMO),ZIJ(NMO),ZMO(5,NMO),IJMO(2,NMO),
     *                MOIJ(NMO),NMOIJ(NMO),NMOAT(NMO),OCCUP(NMO),MOIDON,
     *                EDCOMP,DIPDCM,IPROT(5),NPROT,DEPRNT,QADDCM,ZDO,
     *                POLDCM,POLANG,POLAPP,KMIDPT
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJKO,IJKT,IDAF,NAV,IODA(400)
      COMMON /OPTLOC/ CVGLOC,MAXLOC,IPRTLO,ISYMLO,IFCORE,NOUTA,NOUTB,
     *                MOOUTA(MXAO),MOOUTB(MXAO)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
      PARAMETER (ZERO=0.0D+00, FOUR=4.0D+00)
      PARAMETER (THREE=3.0D+00, UNIT=0.52917724924D+00)
C
      CALL DAREAD(IDAF,IODA,HF(1,1),NUM2,252,0)
      CALL DAREAD(IDAF,IODA,HF(1,2),NUM2,253,0)
      CALL DAREAD(IDAF,IODA,HF(1,3),NUM2,254,0)
C
C     ---- CALCULATE ALPHA POLARIZABILITY TENSOR FOR THE CORE ----
C
      IF (IFCORE.EQ.1) THEN
      DO 400 K=1,3
         DO 410 L=1,3
         KL=(K-1)*3 + L
         CAPOL(KL)=ZERO
            DO 420 IVIR=1,NVIR
               DO 430 IOCC=1,MCORE
                  IJ=IA(IVIR+NOCC)+IOCC
                     CAPOL(KL)=CAPOL(KL)-(FOUR*U(IOCC,IVIR,K)*HF(IJ,L))
  430          CONTINUE
  420       CONTINUE
  410    CONTINUE
  400 CONTINUE
C
C     ----- CONVERT UNITS FROM BOHRS TO ANGTROMS ----
C
      DO 435 I=1,9
         IF(POLANG) THEN
            APOLANG(I)=CAPOL(I)*UNIT**THREE
         ELSE
            APOLANG(I)=CAPOL(I)
         END IF
  435 CONTINUE
C
C     ----- PRINT CORE ALPHA POLARIZABILITY MATRIX -----
C
      IF (MASWRK) THEN
         IF(POLANG) THEN
            WRITE(IW,9020)
         ELSE
            WRITE(IW,9025)
         END IF
         WRITE(IW,9040)
         WRITE(IW,9060) (APOLANG(I),I=1,3)
         WRITE(IW,9080) (APOLANG(I),I=4,6)
         WRITE(IW,9100) (APOLANG(I),I=7,9)
      END IF
C
C     ---- CALCULATE THE MEAN CORE  POLARIZABILITY ----
C
      ALPHAM=(APOLANG(1)+APOLANG(5)+APOLANG(9))/THREE
      IF(MASWRK) WRITE(IW,9110) ALPHAM
C
      ELSE
         CALL VCLR(CAPOL,1,9)
      END IF
C
C     -- CALCULATE ALPHA POLARIZABILITY TENSOR FOR LOCALIZED ORBITALS --
C
      CALL DAREAD(IDAF,IODA,TRAN,NLOC*NLOC,73,0)
C
      DO 440 LOC=1,NLOC
         CALL VCLR(HFL,1,3*NVIR)
         CALL VCLR(UL,1,3*NVIR)
         DO 450 IVIR=1,NVIR
            IL=0
            DO 460 IOCC=MCORE+1,NOCC
               IL=IL+1
               IJ=IA(IVIR+NOCC)+IOCC
               HFL(IVIR,1)=HFL(IVIR,1)+(HF(IJ,1)*TRAN(IL,LOC))
               HFL(IVIR,2)=HFL(IVIR,2)+(HF(IJ,2)*TRAN(IL,LOC))
               HFL(IVIR,3)=HFL(IVIR,3)+(HF(IJ,3)*TRAN(IL,LOC))
               UL(IVIR,1)=UL(IVIR,1)+(U(IOCC,IVIR,1)*TRAN(IL,LOC))
               UL(IVIR,2)=UL(IVIR,2)+(U(IOCC,IVIR,2)*TRAN(IL,LOC))
               UL(IVIR,3)=UL(IVIR,3)+(U(IOCC,IVIR,3)*TRAN(IL,LOC))
  460       CONTINUE
  450    CONTINUE
C
         DO 470 K=1,3
            DO 480 L=1,3
               KL=(K-1)*3 + L
               DLPOL(KL,LOC)=ZERO
               DO 490 IVIR=1,NVIR
                  DUM=(FOUR*UL(IVIR,K)*HFL(IVIR,L))
                  DLPOL(KL,LOC)=DLPOL(KL,LOC)-DUM
                  CAPOL(KL)=CAPOL(KL)-DUM
  490          CONTINUE
  480       CONTINUE
  470    CONTINUE
  440 CONTINUE
C
C     ---- WRITE ALPHA POLARIZABILITY TENSORS TO DAF ----
      CALL DAWRIT(IDAF,IODA,DLPOL,NLOC*9,251,0)
C
      DO 510 I=1,NLOC
         DO 520 J=1,9
            IF(POLANG) THEN
               APOLANG(J)=DLPOL(J,I)*UNIT**THREE
            ELSE
               APOLANG(J)=DLPOL(J,I)
            END IF
  520    CONTINUE
C
         ILO=I+MCORE
         IF (MASWRK) THEN
            IF(NMOAT(ILO).EQ.1) WRITE(IW,9000) MOIDNO(1,ILO)
            IF(NMOAT(ILO).EQ.2) WRITE(IW,9005)
     *                          MOIDNO(1,ILO),MOIDNO(2,ILO)
            WRITE(IW,9050)
            WRITE(IW,9060) (APOLANG(K),K=1,3)
            WRITE(IW,9080) (APOLANG(K),K=4,6)
            WRITE(IW,9100) (APOLANG(K),K=7,9)
            ALPHAM=(APOLANG(1)+APOLANG(5)+APOLANG(9))/THREE
            WRITE(IW,9110) ALPHAM
         END IF
  510 CONTINUE
C
C     ----- PRINT TOTAL ALPHA POLARIZABILITY MATRIX -----
C
      DO 550 I=1,9
         IF(POLANG) THEN
            APOLANG(I)=CAPOL(I)*UNIT**THREE
         ELSE
            APOLANG(I)=CAPOL(I)
         END IF
  550 CONTINUE
C
      IF (MASWRK) THEN
         WRITE(IW,9055)
         WRITE(IW,9060) (APOLANG(I),I=1,3)
         WRITE(IW,9080) (APOLANG(I),I=4,6)
         WRITE(IW,9100) (APOLANG(I),I=7,9)
         ALPHAM=(APOLANG(1)+APOLANG(5)+APOLANG(9))/THREE
         WRITE(IW,9110) ALPHAM
      END IF
C
C     ---- ROTATE BONDS AND LONE PAIRS ONTO Z AXIS ----
C
      IF(MASWRK) WRITE(IW,9010)
      DO 600 IDLOC=1,NLOC
C
         CALL ROTPOL(DLPOL,VCOC,NLOC,IDLOC,MCORE)
C
         DO 610 J=1,9
            IF(POLANG) THEN
               APOLANG(J)=DLPOL(J,IDLOC)*UNIT**THREE
            ELSE
               APOLANG(J)=DLPOL(J,IDLOC)
            END IF
  610    CONTINUE
C
         IF (MASWRK) THEN
            ILO=IDLOC+MCORE
            IF(NMOAT(ILO).EQ.1) WRITE(IW,9000) MOIDNO(1,ILO)
            IF(NMOAT(ILO).EQ.2) WRITE(IW,9005)
     *                       MOIDNO(1,ILO),MOIDNO(2,ILO)
            WRITE(IW,9050)
            WRITE(IW,9060) (APOLANG(I),I=1,3)
            WRITE(IW,9080) (APOLANG(I),I=4,6)
            WRITE(IW,9100) (APOLANG(I),I=7,9)
         END IF
C
         ALPHAM=(APOLANG(1)+APOLANG(5)+APOLANG(9))/THREE
         IF(MASWRK) WRITE(IW,9110) ALPHAM
  600 CONTINUE
      RETURN
C
 9020 FORMAT(/10X,35("-")/
     *        10X,' LOCALIZED ALPHA POLARIZABILITIES '/
     *        10X,'       IN ANGSTROMS**3            '/
     *        10X,35(1H-)/)
 9025 FORMAT(//10X,35("-")/
     *        10X,' LOCALIZED ALPHA POLARIZABILITIES '/
     *        10X,'       IN ATOMIC UNITS            '/
     *        10X,35(1H-)/)
 9000 FORMAT(//1X,' LMO ALPHA POLARIZABILITY TENSOR ',
     *        'FOR CORE OR LONE PAIR ON ATOM',I3)
 9005 FORMAT(//1X,' LMO ALPHA POLARIZABILITY TENSOR ',
     *        'FOR BOND BETWEEN ATOM',I3,' AND ATOM',I3)
 9010 FORMAT(//10X,47("-")/
     *        10X,' LOCALIZED ALPHA POLARIZABILITY TENSORS FOR '/
     *        10X,' LONE PAIRS AND BONDS PROJECTED ONTO THE Z-AXIS '/
     *        10X,47(1H-))
 9040 FORMAT(10X,' CORE ALPHA POLARIZABILITY TENSOR '/
     *       22X,'UX',13X,'UY',13X,'UZ')
 9050 FORMAT(22X,'UX',13X,'UY',13X,'UZ')
 9055 FORMAT(//15X,35("-")/
     *        15X,' TOTAL ALPHA POLARIZABILITY TENSOR '/
     *        15X,35(1H-)/
     *        22X,'UX',13X,'UY',13X,'UZ')
 9060 FORMAT(10X,     ' UX ',3F15.9)
 9080 FORMAT(10X,     ' UY ',3F15.9)
 9100 FORMAT(10X,     ' UZ ',3F15.9)
 9110 FORMAT(/10X,     ' MEAN ALPHA POLARIZABILITY = ',3F15.9)
      END
C*MODULE LOCPOL    *DECK LOAPOL
      SUBROUTINE LOAPOL(U,UL,HF,HFL,TRAN,DLPOL,VCOC,IA,NXYZ,
     *                  NUM2,MCORE,NLOC,LOCS,NROT,IROT)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK,MOIDON,EDCOMP,DIPDCM,QADDCM,
     *        DEPRNT,ZDO,POLDCM,POLANG,POLAPP,KMIDPT
C
      PARAMETER (MXATM=500, NMO=500, MXAO=2047)
C
      DIMENSION U(NROT,NXYZ),
     *          UL(LOCS,3),HF(NUM2,3),HFL(LOCS,3),TRAN(NLOC,NLOC),
     *          IA(NUM),CAPOL(9),APOLANG(9),DLPOL(9,NLOC),VCOC(3*NA),
     *          IROT(NUM,NUM)
C
      COMMON /EDCMP / MOIDNO(5,NMO),ZIJ(NMO),ZMO(5,NMO),IJMO(2,NMO),
     *                MOIJ(NMO),NMOIJ(NMO),NMOAT(NMO),OCCUP(NMO),MOIDON,
     *                EDCOMP,DIPDCM,IPROT(5),NPROT,DEPRNT,QADDCM,ZDO,
     *                POLDCM,POLANG,POLAPP,KMIDPT
      COMMON /GVBWFN/ CICOEF(2,12),F(25),ALPHA(325),BETA(325),NO(10),
     *                NCO,NSETO,NOPEN,NPAIR,NORB,NCONF(MXAO),NHAM
      COMMON /GSSORD/ IORDER(MXAO),JORDER(MXAO),NORDER
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJKO,IJKT,IDAF,NAV,IODA(400)
      COMMON /OPTLOC/ CVGLOC,MAXLOC,IPRTLO,ISYMLO,IFCORE,NOUTA,NOUTB,
     *                MOOUTA(MXAO),MOOUTB(MXAO)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
      PARAMETER (ZERO=0.0D+00, FOUR=4.0D+00)
      PARAMETER (THREE=3.0D+00, UNIT=0.52917724924D+00)
C
      L1=NUM
C
C     ----- SET UP ROTATION INDEX ARRAY -----
C
      MROT=0
      DO 220 I=1,L1
         ISH = NCONF(I)
         DO 210 J=1,I
            IF(NCONF(J).EQ.ISH) THEN
               IROT(I,J) = 0
               IROT(J,I) = 0
            ELSE
               MROT=MROT+1
               IROT(I,J) = MROT
               IROT(J,I) = MROT
            END IF
  210    CONTINUE
  220 CONTINUE
C
      CALL DAREAD(IDAF,IODA,HF(1,1),NUM2,252,0)
      CALL DAREAD(IDAF,IODA,HF(1,2),NUM2,253,0)
      CALL DAREAD(IDAF,IODA,HF(1,3),NUM2,254,0)
C
C     ---- CALCULATE ALPHA POLARIZABILITY TENSOR FOR THE CORE ----
C
      IF (IFCORE.EQ.1) THEN
      JMAX=MCORE
      DO 400 K=1,3
         DO 410 L=1,3
         KL=(K-1)*3 + L
         CAPOL(KL)=ZERO
            DO 420 I=1,NUM
               ISH = NCONF(I)
               DO 430 J=1,I
                  IF (J .GT. JMAX) GOTO 420
                  JSH = NCONF(J)
                  IF(ISH.EQ.JSH) GO TO 430
                  FIJ  = F(ISH) - F(JSH)
                  IJ = IA(I) + J
                  IJROT = IROT(I,J)
                  CAPOL(KL)=CAPOL(KL)+(FOUR*FIJ*U(IJROT,K)*HF(IJ,L))
  430          CONTINUE
  420       CONTINUE
  410    CONTINUE
  400 CONTINUE
C
C     ----- CONVERT UNITS FROM BOHRS TO ANGTROMS ----
C
      DO 435 I=1,9
         IF(POLANG) THEN
            APOLANG(I)=CAPOL(I)*UNIT**THREE
         ELSE
            APOLANG(I)=CAPOL(I)
         END IF
  435 CONTINUE
C
C     ----- PRINT CORE ALPHA POLARIZABILITY MATRIX -----
C
      IF (MASWRK) THEN
         IF(POLANG) THEN
            WRITE(IW,9020)
         ELSE
            WRITE(IW,9025)
         END IF
         WRITE(IW,9040)
         WRITE(IW,9060) (APOLANG(I),I=1,3)
         WRITE(IW,9080) (APOLANG(I),I=4,6)
         WRITE(IW,9100) (APOLANG(I),I=7,9)
      END IF
C
C     ---- CALCULATE THE MEAN CORE  POLARIZABILITY ----
C
      ALPHAM=(APOLANG(1)+APOLANG(5)+APOLANG(9))/THREE
      IF(MASWRK) WRITE(IW,9110) ALPHAM
C
      ELSE
         CALL VCLR(CAPOL,1,9)
      END IF
C
C     -- CALCULATE ALPHA POLARIZABILITY TENSOR FOR LOCALIZED ORBITALS --
C
      CALL DAREAD(IDAF,IODA,TRAN,NLOC*NLOC,73,0)
C
      CALL VCLR(DLPOL,1,9*NLOC)
      DO 440 LOC=1,NLOC
         CALL VCLR(HFL,1,3*LOCS)
         CALL VCLR(UL,1,3*LOCS)
         DO 450 I=1,LOCS
            IL=0
            JSH = NCONF(MCORE+I)
            DO 460 IOCC=MCORE+1,NA
               ISH = NCONF(IOCC)
               IL=IL+1
               IF(IOCC.GT.I+MCORE) GO TO 460
               IJ=IA(I+MCORE)+IOCC
               IJROT = IROT(I+MCORE,IOCC)
               IF (IJROT.EQ.0) GO TO 460
               HFL(I,1)=HFL(I,1)+(HF(IJ,1)*TRAN(IL,LOC))
               HFL(I,2)=HFL(I,2)+(HF(IJ,2)*TRAN(IL,LOC))
               HFL(I,3)=HFL(I,3)+(HF(IJ,3)*TRAN(IL,LOC))
               UL(I,1)=UL(I,1)+(U(IJROT,1)*TRAN(IL,LOC))
               UL(I,2)=UL(I,2)+(U(IJROT,2)*TRAN(IL,LOC))
               UL(I,3)=UL(I,3)+(U(IJROT,3)*TRAN(IL,LOC))
  460       CONTINUE
  450    CONTINUE
C
         JSH = NCONF(MCORE+LOC)
         DO 470 K=1,3
            DO 480 L=1,3
               KL=(K-1)*3 + L
               DO 490 I=1,LOCS
                  ISH = NCONF(I+MCORE)
                  FIJ  = F(ISH) - F(JSH)
                  IF(LOC.GT.I) GO TO 490
                  IF(ISH.EQ.JSH) GO TO 490
                  DUM=(FOUR*FIJ*UL(I,K)*HFL(I,L))
                  DLPOL(KL,LOC)=DLPOL(KL,LOC)+DUM
                  CAPOL(KL)=CAPOL(KL)+DUM
  490          CONTINUE
  480       CONTINUE
  470    CONTINUE
  440 CONTINUE
C
C     ---- WRITE ALPHA POLARIZABILITY TENSORS TO DAF ----
      CALL DAWRIT(IDAF,IODA,DLPOL,NLOC*9,251,0)
C
C     ---- REORDER ----
      CALL MOIDM
      CALL DIPLMM
      CALL ICOPY(L1,IORDER,1,JORDER,1)
      ICNT = 1
      DO 505 I = 1,NA
         J = IORDER(I) - MCORE
         IF (J .GT. 0) THEN
            JORDER(ICNT) = J
            ICNT = ICNT + 1
         END IF
  505 CONTINUE
      CALL REORDR(DLPOL,JORDER,NLOC,9)
C
      DO 510 I=1,NLOC
         DO 520 J=1,9
            IF(POLANG) THEN
               APOLANG(J)=DLPOL(J,I)*UNIT**THREE
            ELSE
               APOLANG(J)=DLPOL(J,I)
            END IF
  520    CONTINUE
C
         ILO=I+MCORE
         IF (MASWRK) THEN
            IF(NMOAT(ILO).EQ.1) WRITE(IW,9000) MOIDNO(1,ILO)
            IF(NMOAT(ILO).EQ.2) WRITE(IW,9005)
     *                          MOIDNO(1,ILO),MOIDNO(2,ILO)
            WRITE(IW,9050)
            WRITE(IW,9060) (APOLANG(K),K=1,3)
            WRITE(IW,9080) (APOLANG(K),K=4,6)
            WRITE(IW,9100) (APOLANG(K),K=7,9)
            ALPHAM=(APOLANG(1)+APOLANG(5)+APOLANG(9))/THREE
            WRITE(IW,9110) ALPHAM
         END IF
  510 CONTINUE
C
C     ----- PRINT TOTAL ALPHA POLARIZABILITY MATRIX -----
C
      DO 550 I=1,9
         IF(POLANG) THEN
            APOLANG(I)=CAPOL(I)*UNIT**THREE
         ELSE
            APOLANG(I)=CAPOL(I)
         END IF
  550 CONTINUE
C
      IF (MASWRK) THEN
         WRITE(IW,9055)
         WRITE(IW,9060) (APOLANG(I),I=1,3)
         WRITE(IW,9080) (APOLANG(I),I=4,6)
         WRITE(IW,9100) (APOLANG(I),I=7,9)
         ALPHAM=(APOLANG(1)+APOLANG(5)+APOLANG(9))/THREE
         WRITE(IW,9110) ALPHAM
      END IF
C
C     ---- ROTATE BONDS AND LONE PAIRS ONTO Z AXIS ----
C
      IF(MASWRK) WRITE(IW,9010)
      DO 600 IDLOC=1,NLOC
         CALL ROTPOL(DLPOL,VCOC,NLOC,IDLOC,MCORE)
         DO 610 J=1,9
            IF(POLANG) THEN
               APOLANG(J)=DLPOL(J,IDLOC)*UNIT**THREE
            ELSE
               APOLANG(J)=DLPOL(J,IDLOC)
            END IF
  610    CONTINUE
C
         IF (MASWRK) THEN
            ILO=IDLOC+MCORE
            IF(NMOAT(ILO).EQ.1) WRITE(IW,9000) MOIDNO(1,ILO)
            IF(NMOAT(ILO).EQ.2) WRITE(IW,9005)
     *                          MOIDNO(1,ILO),MOIDNO(2,ILO)
            WRITE(IW,9050)
            WRITE(IW,9060) (APOLANG(I),I=1,3)
            WRITE(IW,9080) (APOLANG(I),I=4,6)
            WRITE(IW,9100) (APOLANG(I),I=7,9)
         END IF
         ALPHAM=(APOLANG(1)+APOLANG(5)+APOLANG(9))/THREE
         IF(MASWRK) WRITE(IW,9110) ALPHAM
  600 CONTINUE
C
      RETURN
C
 9020 FORMAT(/10X,35("-")/
     *        10X,' LOCALIZED ALPHA POLARIZABILITIES '/
     *        10X,'       IN ANGSTROMS**3            '/
     *        10X,35(1H-)/)
 9025 FORMAT(//10X,35("-")/
     *        10X,' LOCALIZED ALPHA POLARIZABILITIES '/
     *        10X,'       IN ATOMIC UNITS            '/
     *        10X,35(1H-)/)
 9000 FORMAT(//14X,' LMO ALPHA POLARIZABILITY TENSOR '/
     *        10X,'FOR CORE/LONE PAIR/UNPAIRED ELECTRON ON ATOM',I3)
 9005 FORMAT(//1X,' LMO ALPHA POLARIZABILITY TENSOR ',
     *        'FOR BOND BETWEEN ATOM',I3,' AND ATOM',I3)
 9010 FORMAT(//10X,47("-")/
     *        10X,' LOCALIZED ALPHA POLARIZABILITY TENSORS FOR '/
     *        10X,' LONE PAIRS AND BONDS PROJECTED ONTO THE Z-AXIS '/
     *        10X,47(1H-))
 9040 FORMAT(10X,' CORE ALPHA POLARIZABILITY TENSOR '/
     *       22X,'UX',13X,'UY',13X,'UZ')
 9050 FORMAT(22X,'UX',13X,'UY',13X,'UZ')
 9055 FORMAT(//15X,35("-")/
     *        15X,' TOTAL ALPHA POLARIZABILITY TENSOR '/
     *        15X,35(1H-)/
     *        22X,'UX',13X,'UY',13X,'UZ')
 9060 FORMAT(10X,     ' UX ',3F15.9)
 9080 FORMAT(10X,     ' UY ',3F15.9)
 9100 FORMAT(10X,     ' UZ ',3F15.9)
 9110 FORMAT(/10X,     ' MEAN ALPHA POLARIZABILITY = ',3F15.9)
      END
C*MODULE LOCPOL    *DECK LPOLX
      SUBROUTINE LPOLX
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL PPGVB,TCSCF,ROGVB,SOME,DBG,GOPARR,DSKWRK,MASWRK,
     *        MOIDON,EDCOMP,DIPDCM,QADDCM,DEPRNT,ZDO,POLDCM,POLANG,
     *        POLAPP,KMIDPT,FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF,
     *        PK,PANDK,BLOCK,DIRSCF,DIRTRF,FDIFF,SVGPAR,SVDSKW,
     *        ABEL,ABELPT,MFRZ
C
      PARAMETER (MXATM=500, MXSH=1000, NMO=500, MXAO=2047)
C
      DIMENSION NOCP(3)
C
      COMMON /GUGWFN/ NFZC,NMCC,NDOC,NAOS,NBOS,NALP,NVAL,NEXT,NFZV,
     *                IFORS,IEXCIT,ICICI,NOIRR
      COMMON /GVBWFN/ CICOEF(2,12),F(25),ALPHA(325),BETA(325),NO(10),
     *                NCO,NSETO,NOPEN,NPAIR,NORB,NCONF(MXAO),NHAM
      COMMON /HSSPAR/ FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF
      COMMON /EDCMP / MOIDNO(5,NMO),ZIJ(NMO),ZMO(5,NMO),IJMO(2,NMO),
     *                MOIJ(NMO),NMOIJ(NMO),NMOAT(NMO),OCCUP(NMO),MOIDON,
     *                EDCOMP,DIPDCM,IPROT(5),NPROT,DEPRNT,QADDCM,ZDO,
     *                POLDCM,POLANG,POLAPP,KMIDPT
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJKO,IJKT,IDAF,NAV,IODA(400)
      COMMON /MFRPAR/ MFRZ,NUMFRZ,IFRZ(MXAO)
      COMMON /OPTLOC/ CVGLOC,MAXLOC,IPRTLO,ISYMLO,IFCORE,NOUTA,NOUTB,
     *                MOOUTA(MXAO),MOOUTB(MXAO)
      COMMON /OPTSCF/ DIRSCF,FDIFF
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /PKFIL / PK,PANDK,BLOCK
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /SYMTRY/ MAPSHL(MXSH,48),MAPCTR(MXATM,48),
     *                T(432),INVT(48),NT
      COMMON /TRFOPT/ CUTTRF,NWDTRF,MPTRAN,ITRFAO,NOSYMT,DIRTRF
      COMMON /WFNOPT/ SCFTYP,CITYP,DFTYPE,CCTYP,MPLEVL,MPCTYP
C
#if !defined(SPEC_CPU_NO_HOLLERITH)
      DATA CPWORD/8HCPHF    /
#else
      CHARACTER*8 :: CPWORD_STR
      EQUIVALENCE (CPWORD, CPWORD_STR)
      DATA CPWORD_STR/"CPHF    "/
#endif
#if !defined(SPEC_CPU_NO_HOLLERITH)
      DATA RHF/8HRHF     /, ROHF/8HROHF    /, GVB/8HGVB     /,
     *     UHF/8HUHF     /, RMC/8HMCSCF   /, GUGA/8HGUGA    /
#else
      CHARACTER*8 :: RHF_STR
      EQUIVALENCE (RHF, RHF_STR)
      CHARACTER*8 :: ROHF_STR
      EQUIVALENCE (ROHF, ROHF_STR)
      CHARACTER*8 :: GVB_STR
      EQUIVALENCE (GVB, GVB_STR)
      CHARACTER*8 :: UHF_STR
      EQUIVALENCE (UHF, UHF_STR)
      CHARACTER*8 :: RMC_STR
      EQUIVALENCE (RMC, RMC_STR)
      CHARACTER*8 :: GUGA_STR
      EQUIVALENCE (GUGA, GUGA_STR)
      DATA RHF_STR/"RHF     "/, ROHF_STR/"ROHF    "/, 
     *     GVB_STR/"GVB     "/, UHF_STR/"UHF     "/, 
     *     RMC_STR/"MCSCF   "/, GUGA_STR/"GUGA    "/
#endif
C
C     ----- MAIN DRIVER FOR LOCALIZED ORBITAL POLARIZABILITIES -----
C     CODE WRITTEN BY SIMON WEBB AT ISU, SEPTEBER 1995.
C     THE THREE ELECTRIC FIELD RESPONSES ARE BASICALLY WHAT IS NEEDED.
C
      IF(POLAPP) GOTO 100
      CALL CPINP
C
      FIRST=.TRUE.
      SECND=.TRUE.
      CPHF=.TRUE.
      BOTH=.TRUE.
      MFIRST=.TRUE.
      MSECND=.TRUE.
      MCPHF=.TRUE.
C
C     ----- PREPARE CORRECT INTEGRAL LIST ---
C     THIS MUST BE -J- FORMAT
C     IN SOME CASES, THIS FILE MAY BE ALREADY THERE.
C
      IF(PK) THEN
         IF(MASWRK) WRITE(IW,*) 'LPOLX: SOMEHOW THIS IS A -PK- FILE'
         CALL ABRT
      END IF
C
C     IF DUPLICATED INTEGRAL FILES DESIRED FOR TRANSF., GENERATE THEM.
C     IF POINT GROUP IS NON-ABELIAN, GENERATE A C1 INTEGRAL FILE.
C
      ABEL = ABELPT()
      NTSAVE = NT
      SVDSKW = DSKWRK
      SVGPAR = GOPARR
      IF(GOPARR) DSKWRK = .TRUE.
      IF(CPHF  .AND.
     *   ((GOPARR.AND.ITRFAO.EQ.1)
     *    .OR.  .NOT.ABEL)) THEN
         IF(ITRFAO.EQ.1) GOPARR = .FALSE.
         IF(.NOT.ABEL) NT = 1
         IF(.NOT.DIRSCF) CALL JANDK
      END IF
      GOPARR = SVGPAR
      NT = NTSAVE
C
C     ----- INTEGRAL TRANSFORMATION -----
C
      NOCC = 0
      IF(SCFTYP.EQ.RHF)  NOCC=NA
      IF(SCFTYP.EQ.UHF)  NOCC=NA
      IF(SCFTYP.EQ.ROHF) NOCC=NA
      IF(SCFTYP.EQ.GVB)  NOCC=NORB
      IF(SCFTYP.EQ.RMC)  NOCC=NMCC+NDOC+NAOS+NBOS+NALP+NVAL
      IF(DIRSCF) DIRTRF=.TRUE.
      IF(CPHF) CALL TRFMCX(0,0,NOCC,NQMT,.FALSE.,.FALSE.,
     *                     .FALSE.,.FALSE.,.FALSE.,.FALSE.,.FALSE.)
      IF(DIRSCF) DIRTRF=.FALSE.
  100 CONTINUE
C
C     ----- MAIN DRIVER FOR CPHF CONTRIBUTION TO HESSIAN -----
C
      DBG=EXETYP.EQ.CPWORD .AND. MASWRK
      SOME = NPRINT.NE.-5 .AND. MASWRK
      NFT16 = 16
C
C     ----- DEFINE UNIQUE -XYZ- FOR WHICH -CPHF- IS NEEDED -----
C
      NXYZ = 3
      NUNIQ= 3
      NOCP(1)=0
      NOCP(2)=0
      NOCP(3)=0
C
      CALL LMOPSI(0,MCORE,MDOC,MACT,NUMLOC)
      IF (IFCORE.EQ.0) MCORE=0
C
C     THE POLARIZATION CODE DID NOT CORRECTLY TAKE INTO ACCOUNT CASE
C     OF NOUTA BEING NON-ZERO! FIXING IT...
C
      IF(NOUTA.GT.0 .AND. IFCORE.EQ.0) THEN
        IFCORE=1
        MCORE=NOUTA
        IF(MASWRK) THEN
           WRITE(IW,*)
           WRITE(IW,*)' ADJUSTING MCORE IN LPOLX'
         END IF
        IF(MOOUTA(NOUTA).NE.NOUTA)THEN
          IF(MASWRK) WRITE(IW,9100)
          CALL ABRT
        END IF
      END IF
C
      NLOC = NUMLOC-MCORE
C
C     ----- DO THE APPROPRIATE CPHF PROBLEM -----
C
      ROGVB = (SCFTYP.EQ.GVB  .AND.  NPAIR.EQ.0)  .OR.  SCFTYP.EQ.ROHF
      TCSCF = (SCFTYP.EQ.GVB  .AND.  NPAIR.EQ.1)
      PPGVB = (SCFTYP.EQ.GVB  .AND.  NPAIR.GT.1)
C
      IF(SCFTYP.EQ.RHF .AND. MFRZ .AND. MASWRK .AND..NOT. POLAPP)THEN
        WRITE(IW,*)
        WRITE(IW,*)'            ***************************************'
        WRITE(IW,*)'            *   *ERROR*  THE POLARIZABILITIES     *'
        WRITE(IW,*)'            *   WILL BE INCORRECT BECAUSE OF THE  *'
        WRITE(IW,*)'            *   NON-DIAGONAL FOCK MATRIX DUE TO   *'
        WRITE(IW,*)'            *   FREEZING MO-S DURING HARTREE-FOCK.*'
        WRITE(IW,*)'            *   FIX: REPEAT RUN WITH RUNTYP=ROHF. *'
        WRITE(IW,*)'            ***************************************'
        WRITE(IW,*)
        CALL ABRT
      END IF
      IF(SCFTYP.EQ.RHF.AND..NOT.POLAPP)THEN
                        CALL POLRHF(SOME,DBG,NOCP,NXYZ,NUNIQ,
     *                              NFT16,MCORE,NLOC)
      END IF
      IF(POLAPP)        CALL POLAPM(SOME,NXYZ,MCORE,NLOC)
      IF(SCFTYP.EQ.UHF) CALL ABRT
      IF(ROGVB)         CALL POLROHF(TCSCF,SOME,DBG,NOCP,NXYZ,NUNIQ,
     *                               NFT16,MCORE,NLOC)
      IF(TCSCF)         CALL ABRT
      IF(PPGVB)         CALL ABRT
      IF(SCFTYP.EQ.RMC) CALL ABRT
      IF(CITYP.EQ.GUGA) CALL ABRT
C
      DSKWRK = SVDSKW
      IF (MASWRK) WRITE(IW,9000)
      CALL TIMIT(1)
      RETURN
C
 9000 FORMAT(/1X,'...... DONE WITH CPHF CONTRIBUTIONS ......')
 9100 FORMAT(//1X,'ERROR IN LPOLX:'/
     *   1X,'YOUR MOOUTA ARRAY SHOULD CONSIST OF CONSECUTIVE NUMBERS'/
     *   1X,'STARTING WITH 1 (I.E. IMITATE CORE),'/
     *   1X,'OTHERWISE THE POLARIZABILITIES WILL BE INCORRECT.'/
     *   1X,'IF YOU REALLY HAVE TO FREEZE OUT OF LOCALIZATION',
     *   1X,'SOME ARBITRARY ORBITALS,'/
     *   1X,'USE OF $MOFRZ MIGHT HELP.')
      END
C*MODULE LOCPOL    *DECK OPOLB
      SUBROUTINE OPOLB(HF,THF,V,WRK,L1,L2,L3,NXYZ)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION HF(L2),THF(L2,NXYZ),V(L3),WRK(L1)
C
      COMMON /IOFILE/ IR,IW,IP,IJKO,IJKT,IDAF,NAV,IODA(400)
C
C     READ MO VECTORS.
C
      CALL DAREAD(IDAF,IODA,V,L3,15,0)
C
C     ---- GET DIPOLE INTEGRALS AND TRANSFORM TO MO BASIS   ----
C     ---- WRITE TRANSFORMED INTEGRALS TO DAF FOR LATER USE ----
C
      CALL DAREAD(IDAF,IODA,HF,L2,95,0)
      CALL TFTRI(THF(1,1),HF,V,WRK,L1,L1,L1)
      CALL DAREAD(IDAF,IODA,HF,L2,96,0)
      CALL TFTRI(THF(1,2),HF,V,WRK,L1,L1,L1)
      CALL DAREAD(IDAF,IODA,HF,L2,97,0)
      CALL TFTRI(THF(1,3),HF,V,WRK,L1,L1,L1)
C
      CALL DAWRIT(IDAF,IODA,THF(1,1),L2,252,0)
      CALL DAWRIT(IDAF,IODA,THF(1,2),L2,253,0)
      CALL DAWRIT(IDAF,IODA,THF(1,3),L2,254,0)
C
      RETURN
      END
C*MODULE LOCPOL    *DECK POLB
      SUBROUTINE POLB(B,C,T,D,HF,IA,NOCC,
     *                    NVIR,NORB,NXYZ,NUM,NUM2)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION B(NOCC,NVIR,NXYZ),C(NUM,NUM),T(NUM),D(NUM2),
     *          HF(NUM2,3),IA(*)
C
      COMMON /IOFILE/ IR,IW,IP,IJKO,IJKT,IDAF,NAV,IODA(400)
C
      PARAMETER (FOUR=4.0D+00)
C
C     ---- GET DIPOLE INTEGRALS AND TRANSFORM TO MO BASIS   ----
C     ---- WRITE TRANSFORMED INTEGRALS TO DAF FOR LATER USE ----
C     ---- THEN FORM THE MATRIX -B-                         ----
C
      CALL DAREAD(IDAF,IODA,D,NUM2,95,0)
      CALL TFTRI(HF(1,1),D,C,T,NORB,NUM,NUM)
      CALL DAREAD(IDAF,IODA,D,NUM2,96,0)
      CALL TFTRI(HF(1,2),D,C,T,NORB,NUM,NUM)
      CALL DAREAD(IDAF,IODA,D,NUM2,97,0)
      CALL TFTRI(HF(1,3),D,C,T,NORB,NUM,NUM)
C
      CALL DAWRIT(IDAF,IODA,HF(1,1),NUM2,252,0)
      CALL DAWRIT(IDAF,IODA,HF(1,2),NUM2,253,0)
      CALL DAWRIT(IDAF,IODA,HF(1,3),NUM2,254,0)
C
C     ---- NOTE THAT MULTIPLICATION BY FOUR NEEDED TO RECONCILE ----
C     ---- SCHAEFERS AND KORMORNIKIS FORMULATIONS               ----
C
         DO 650 IVIR=1,NVIR
            DO 660 IOCC=1,NOCC
               IJ=IA(IVIR+NOCC)+IOCC
               B(IOCC,IVIR,1)=FOUR*HF(IJ,1)
               B(IOCC,IVIR,2)=FOUR*HF(IJ,2)
               B(IOCC,IVIR,3)=FOUR*HF(IJ,3)
  660       CONTINUE
  650    CONTINUE
C
      RETURN
      END
C*MODULE LOCPOL    *DECK POLRHF
      SUBROUTINE POLRHF(SOME,DBG,NOCP,NXYZ,NUNIQ,NFT16,MCORE,NLOC)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL DBG,SOME,CHKMEM,PACK2E,INCORE,GOPARR,DSKWRK,MASWRK
      LOGICAL SVDSKW,SVGPAR,POLAR
C
      PARAMETER (MXATM=500, MXAO=2047)
C
      DIMENSION NOCP(3)
C
      COMMON /CHFINF/ CHFSLV,CPTYPE,NWDCHF,POLAR
      COMMON /FMCOM / X(1)
      COMMON /IJPAIR/ IA(MXAO)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM)
      COMMON /INTFIL/ NINTMX,NHEX,NTUPL,PACK2E,INTG76
      COMMON /IOFILE/ IR,IW,IP,IJKO,IJKT,IDAF,NAV,IODA(400)
      COMMON /MACHIN/ NWDVAR,MAXFM,MAXSM,LIMFM,LIMSM
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
C
#if !defined(SPEC_CPU_NO_HOLLERITH)
      DATA CHECK/8HCHECK   /
#else
      CHARACTER*8 :: CHECK_STR
      EQUIVALENCE (CHECK, CHECK_STR)
      DATA CHECK_STR/"CHECK   "/
#endif
C
C     ----- CLOSED SHELL CPHF CALCULATION -----
C
      IF(SOME) WRITE(IW,9000)
      NXYZ = 3
      NORB = NUM
      NOCC = NA
      NVIR = NORB - NOCC
      NROT = NOCC * NVIR
      IF(SOME) WRITE(IW,9010) NROT
C
      NUM2 =(NUM*NUM+NUM)/2
      NUM3 = NUM*NUM
C
      IF(NVIR .EQ. 0) RETURN
C
C     ----- BEGIN CPHF TERMS -----
C     FIRST BRANCH ALL ABOUT TO CHECK MEMORY NEEDS,
C     THEN COME BACK TO -90- AND ACTUALLY BEGIN TO DO THE WORK.
C
      TIM1 = 0.0D+00
      CHKMEM = .TRUE.
      CALL VALFM(LOADFM)
      CALL GOTFM(NGOTMX)
      IF(NWDCHF.GT.0) NGOTMX=MIN(NGOTMX,NWDCHF)
      INCORE=.FALSE.
      NDB    = 0
      NDA    = 0
      NDAI = 0
      GO TO 125
C
   90 CONTINUE
      CHKMEM = .FALSE.
      IF(SOME) THEN
         WRITE(IW,9020) NDB,NDA,NGOTMX
         IF(.NOT.INCORE) WRITE(IW,9030) NDAI
      END IF
      NDMAX = MAX(NDB,NDA)
      IF(NDMAX.GT.NGOTMX) THEN
         IF (MASWRK) WRITE(IW,9040) NDMAX,NGOTMX
         CALL ABRT
         STOP
      END IF
C
      IF(EXETYP.EQ.CHECK) GO TO 900
C
C     ----- FORM -B- MATRIX -----
C
      CALL TSECND(TIM1)
  125 CONTINUE
      LB   = 1+LOADFM
      LC   = LB   + NROT *NXYZ
      LT   = LC   + NUM3
      LD   = LT   + NUM
      LHF  = LD   + NUM2
      LAST = LHF  + NUM2*3
C
      NEED = LAST - LOADFM - 1
      NDB   = NEED
      IF(CHKMEM) GO TO 135
      CALL GETFM(NEED)
C
      CALL DAREAD(IDAF,IODA,X(LC),NUM3,15,0)
C
      CALL POLB(X(LB),X(LC),X(LT),X(LD),X(LHF),IA,NOCC,NVIR,NORB,NXYZ,
     *          NUM,NUM2)
C
      IF(DBG) THEN
         WRITE(IW,*) '-B- MATRIX'
         CALL PRSQ(X(LB),NXYZ,NROT,NROT)
      END IF
C
      CALL TSECND(TIM2)
      TIMFCK=TIM2-TIM1
      IF(SOME) WRITE(IW,9988) ' -B-  ',TIMFCK
C
      CALL RETFM(NEED)
C
C     ----- CALCULATE -A- MATRIX AND SOLVE CPHF EQNS -----
C     NOTE THAT -B- AND -U- MUST BE THE FIRST ARRAYS ALLOCATED,
C     AS ASSUMED BY THE CODE BELOW THE SOLUTION STEP.
C
      CALL TSECND(TIM1)
  135 CONTINUE
      LB   = 1+LOADFM
      LAST = LB   + NROT*NXYZ
C                         OVERLAP PART OF -A- FORMATION STORAGE...
      LE   = LAST
      LXX  = LE   + NUM
      LIX  = LXX  + NINTMX
      LAST1= LIX  + NINTMX
C                         ...WITH PART OF THE CPHF SOLUTION STORAGE...
      LU   = LAST
      LAST2= LU   + NROT*NXYZ
C
      LAST = MAX(LAST1,LAST2)
      NNEED= LAST-LB
      NFREE= NGOTMX-NNEED
C
C         DECIDE IF PROBLEM FITS IN AVAILABLE MEMORY,
C         WATCH OUT FOR 32 BIT SYSTEMS
C
      IF(NWDVAR.EQ.1  .OR.  NROT.LE.46300) THEN
         INMEM  = NROT*NROT + 2 + 5*NROT
         INCORE = INMEM.LE.NFREE
         NDAI = NNEED + INMEM
      ELSE
         INMEM = 0
         INCORE = .FALSE.
         NDAI = 0
      END IF
C
C                         ...FOLLOWED BY MORE SOLVER STORAGE,
C                         WITH -A- ITSELF ALLOCATED LAST.
C
C        IF -A- FITS IN MEMORY, WE SOLVE FOR ONE RESPONSE
C        AT A TIME TO MINIMIZE WORKING STORAGE -LWRK-.
C        IF NOT, WE MINIMIZE DISK I/O ON THE EXTERNAL FILE OF
C        -A- BY WORKING ON ALL RESPONSES SIMULTANEOUSLY.
C
C        BY USING THE NEXT FOUR LINES, SMALL PROBLEMS CAN BE FORCED
C        INTO AN OUT OF CORE, 2 SLICE STORAGE OF THE -A- MATRIX:
C
C        IF(INCORE) THEN
C           INCORE=.FALSE.
C           NFREE = NUM*NUM +2*NXYZ +4*NXYZ*NROT +NROT +(NROT*NROT+10)/2
C        END IF
C
      MAXEQU=128
      NSOLV = NXYZ
      IF(NROT.LE.MAXEQU) NSOLV=1
      IF(INCORE) THEN
         NWIDTH = NROT
         IF(SOME  .AND.  CHKMEM) WRITE(IW,9050)
         LIROT= LAST
         LBNRM= LAST
         LRESD= LBNRM + NSOLV
         LWRK1= LRESD + NSOLV
         LWRK2= LWRK1 + NROT*NSOLV
         LWRK3= LWRK2 + NROT*NSOLV
         LWRK4= LWRK3 + NROT*NSOLV
         LWII = LWRK4 + NROT*NSOLV
         LA   = LWII  + NROT
         LAST = LA    + NROT*NROT
      ELSE
         NWIDTH = (NFREE - NUM*NUM - 2*NXYZ- 4*NROT*NXYZ - NROT)/NROT
         IF(NWIDTH.GT.0) THEN
            NSLICE = (NROT-1)/NWIDTH + 1
         ELSE
            NSLICE=-1
         END IF
         IF(NWIDTH.LE.0  .OR.  (NSLICE.GT.NAT .AND. NAT.GT.5)) THEN
            IF (MASWRK) THEN
               NEEDX = NUM*NUM + 2*NXYZ + 4*NROT*NXYZ + NROT
               NNEED = NNEED + NEEDX
               NFREE = NFREE - NEEDX
               NEEDW = (NROT-1)/(NAT-1)
               NEED  = NNEED + NROT*NEEDW
               WRITE(IW,9070) NWIDTH,NSLICE,NAT,NFREE,NNEED,NROT,NEED
            END IF
            CALL ABRT
            STOP
         END IF
         IF(SOME  .AND.  CHKMEM) WRITE(IW,9060) NSLICE,NWIDTH
         LIROT= LAST
         LBNRM= LIROT + NUM*NUM
         LRESD= LBNRM + NSOLV
         LWRK1= LRESD + NSOLV
         LWRK2= LWRK1 + NROT*NSOLV
         LWRK3= LWRK2 + NROT*NSOLV
         LWRK4= LWRK3 + NROT*NSOLV
         LWII = LWRK4 + NROT*NSOLV
         LA   = LWII  + NROT
         LAST = LA    + NROT*NWIDTH
      END IF
C
      NEED = LAST - LOADFM - 1
      NDA   = NEED
      IF(CHKMEM) GO TO 90
      CALL GETFM(NEED)
C
C        GET RHF ORBITAL ENERGIES
C
      CALL DAREAD(IDAF,IODA,X(LE),NUM,17,0)
C
      IF(INCORE) THEN
         NWIDTH = NROT
         CALL CPWXYI(X(LA),X(LE),X(LXX),X(LIX),
     *               NUM,NOCC,NVIR,IJKT,NINTMX)
         IF(DBG) THEN
            WRITE(IW,9998)
            CALL PRSQ(X(LA),NROT,NROT,NROT)
         END IF
      ELSE
         SVDSKW = DSKWRK
         DSKWRK = .FALSE.
         CALL SEQOPN(NFT16,'WORK16','UNKNOWN',.FALSE.,'UNFORMATTED')
         DSKWRK = SVDSKW
         CALL CPWXYO(X(LA),X(LE),X(LXX),X(LIX),X(LIROT),X(LWII),
     *               NROT,NWIDTH,NUM,NOCC,NVIR,IJKT,NINTMX,NFT16,DBG)
      END IF
C
      CALL TSECND(TIM2)
      TIMA=TIM2-TIM1
      IF(SOME) THEN
         WRITE(IW,9988) ' -A-  ',TIMA
         CALL FLSHBF(IW)
      END IF
      TIM1 = TIM2
C
C        SOLVE FOR SYMMETRY UNIQUE CPHF RESPONSE VECTORS
C          THIS IS DONE SEQUENTIALLY ON THE MASTER NODE AT PRESENT
C
      NITER=0
      NPASS=0
      SVGPAR = GOPARR
      SVDSKW = DSKWRK
      GOPARR = .FALSE.
      DSKWRK = .FALSE.
      IF(MASWRK) THEN
      CALL SOLVCP(X(LA),X(LB),X(LU),NROT,NXYZ,NOCP,X(LWII),
     *            X(LWRK1),X(LWRK2),X(LWRK3),X(LWRK4),X(LBNRM),X(LRESD),
     *            NITER,NPASS,NWIDTH,NSOLV,INCORE,NFT16,MAXEQU)
      END IF
      GOPARR = SVGPAR
      DSKWRK = SVDSKW
C
      IF(DBG) THEN
         WRITE(IW,*) 'CPHF RESPONSE VECTORS -U-'
         CALL PRSQ(X(LU),NXYZ,NROT,NROT)
      END IF
      CALL RETFM(NEED)
      CALL TSECND(TIM2)
      TIMYA=TIM2-TIM1
      IF(SOME) WRITE(IW,9988) ' -U-   ',TIMYA
      IF(SOME) THEN
         IF(NITER.GT.0) WRITE(IW,9080) NUNIQ,NITER
         IF(.NOT.INCORE) WRITE(IW,9090) NPASS
      END IF
C
C     ---- MEMORY ALLOCATION FOR CALCULATION OF POLARIZABILITY ----
C
      LB   = 1+LOADFM
      LU   = LB   + NROT*NXYZ
      LH   = LU   + NROT*NXYZ
      LUL  = LH   + NUM2*3
      LHL  = LUL  + NVIR*3
      LTR  = LHL  + NVIR*3
      LPOL = LTR  + NLOC*NLOC
      LVCOC= LPOL + NLOC*9
      LAST = LVCOC+ NA*3
      NEED = LAST - LB
      CALL GETFM(NEED)
C
C     ----- CALCULATE LOCALIZED ALPHA POLARIZABILITIES ----
C
      CALL LAPOL(X(LU),X(LUL),X(LH),X(LHL),X(LTR),X(LPOL),X(LVCOC),
     *           IA,NXYZ,NUM2,NOCC,NVIR,MCORE,NLOC)
      CALL RETFM(NEED)
C
  900 CONTINUE
      RETURN
C
 9998 FORMAT(' -A- MATRIX ')
 9988 FORMAT(1X,'       TIME FOR',A8,'= ',F12.3)
 9000 FORMAT(/5X,43("-")/
     *        5X,'COUPLED-PERTURBED CLOSED SHELL HARTREE-FOCK'/
     *        5X,43(1H-))
 9010 FORMAT(1X,'THE CPHF HAS',I8,' INDEPENDENT ORBITAL ROTATIONS.')
 9020 FORMAT(9X,'-B- WILL USE',I10,' WORDS,'/
     *        1X,'-A- AND -U- WILL USE',I10,' WORDS,'/
     *       10X,'  THERE ARE',I10,' WORDS AVAILABLE.')
 9030 FORMAT(1X,'IN MEMORY FORMATION OF -A- WOULD REQUIRE',I10,
     *          ' WORDS')
 9040 FORMAT(1X,'NOT ENOUGH MEMORY TO DO CPHF, NEED=',I10,' GOT=',I10)
 9050 FORMAT(1X,'CHOOSING IN MEMORY CPHF ALGORITHM')
 9060 FORMAT(1X,'CHOOSING OUT OF MEMORY CPHF ALGORITHM,'/
     *   1X,'-A- WILL BE FORMED IN',I5,' SLICES OF',I4,' COLUMNS.')
 9070 FORMAT(/1X,'*** NOT ENOUGH MEMORY TO RUN THE OUT OF MEMORY',
     *          ' CPHF CODE ***'/
     *       1X,'NWIDTH=',I10,'  NSLICE=',I10,'   NAT=',I10/
     *       1X,' NFREE=',I10,'   NNEED=',I10,'  NROT=',I10//
     *       1X,'INCREASE MEMORY IN $SYSTEM TO AT LEAST',I10/
     *       1X,'LARGER AMOUNTS OF MEMORY ARE EVEN BETTER!')
 9080 FORMAT(1X,'SOLVING FOR ALL',I4,' UNIQUE RESPONSES TOOK',
     *          I5,' ITERATIONS.')
 9090 FORMAT(1X,'CONJUGATE GRADIENT SOLVER MADE',I4,
     *          ' READS OF THE EXTERNALLY STORED -A-')
      END
C*MODULE LOCPOL    *DECK POLROHF
      SUBROUTINE POLROHF(TCSCF,SOME,OUT,NOCP,NXYZ,NUNIQ,
     *                   NFT16,MCORE,NLOC)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL TCSCF,SOME,OUT,PACK2E,CHKMEM,INCORE,GOPARR,DSKWRK,MASWRK,
     *        SVGPAR,SVDSKW,POLAR
C
      DIMENSION NOCP(3)
C
      PARAMETER (MXATM=500, MXAO=2047)
C
      COMMON /CHFINF/ CHFSLV,CPTYPE,NWDCHF,POLAR
      COMMON /FMCOM / X(1)
      COMMON /GVBWFN/ CICOEF(2,12),F(25),ALPHA(325),BETA(325),NO(10),
     *                NCO,NSETO,NOPEN,NPAIR,NORB,NCONF(MXAO),NHAM
      COMMON /IJPAIR/ IA(MXAO)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM)
      COMMON /INTFIL/ NINTMX,NHEX,NTUPL,PACK2E,INTG76
      COMMON /IOFILE/ IR,IW,IP,IJKO,IJKT,IDAF,NAV,IODA(400)
      COMMON /MACHIN/ NWDVAR,MAXFM,MAXSM,LIMFM,LIMSM
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
C
#if !defined(SPEC_CPU_NO_HOLLERITH)
      DATA CHECK/8HCHECK   /
#else
      CHARACTER*8 :: CHECK_STR
      EQUIVALENCE (CHECK, CHECK_STR)
      DATA CHECK_STR/"CHECK   "/
#endif
      DATA MAXEQU/128/
C
C     ----- RESTRICTED OPEN SHELL CPHF CODE -----
C     BASED ON CODE WRITTEN BY MIKE SCHMIDT AT NORTH DAKOTA STATE U.,
C     IN FITS AND SPURTS, OVER THE PERIOD MAY-NOVEMBER, 1989.
C            THIS IS CODED FROM
C     Y.OSAMURA, Y.YAMAGUCHI, P.SAXE, D.J.FOX, M.A.VINCENT,
C     H.F.SCHAEFER,   J.MOL.STRUCT. 103,183-186(1983)
C            BUT SEE ALSO
C     P.SAXE, Y.YAMAGUCHI, H.F.SCHAEFER
C        J.CHEM.PHYS. 77, 5647-5654(1982)
C     Y.OSAMURA, Y.YAMAGUCHI, P.SAXE, M.A.VINCENT, J.F.GAW,
C     H.F.SCHAEFER    CHEM.PHYS. 72, 131-9(1982)
C            WITH FORMULAE SUMMARIZED IN
C     Y.YAMAGUCHI, M.FRISCH, J.GAW, H.F.SCHAEFER, J.S.BINKLEY
C        J.CHEM.PHYS. 84, 2262-2278(1986)
C
C     ----- OPEN SHELL TWO CONFIGURATION CODE -----
C     WRITTEN BY JOHN MONTGOMERY AND MIKE SCHMIDT BETWEEN
C     JUNE 22 AND JULY 22, 1990.
C            THIS IS CODED FROM
C     M.DURAN, Y.YAMAGUCHI, H.F.SCHAEFER III
C     J.PHYS.CHEM. 92, 3070-3075(1988).
C            BUT SEE ALSO
C     M.DURAN, Y.YAMAGUCHI, R.B.REMINGTON, H.F.SCHAEFER
C     CHEM.PHYS. 122, 201-231(1988).
C
      IF(SOME  .AND.  .NOT.TCSCF) WRITE(IW,9000)
      IF(SOME  .AND.       TCSCF) WRITE(IW,9010)
      TIM1 = 0.0D+00
      DO 100 I=1,NUM
         IA(I) = (I*I-I)/2
  100 CONTINUE
C
C     ----- INITIALIZE -NCONF- FOR A VIRTUAL SHELL -----
C
      DO 150 I=NORB+1,NUM
         NCONF(I) = NHAM+1
  150 CONTINUE
C
      IF(OUT) THEN
         WRITE(IW,8150) NCO,NSETO,NOPEN,NPAIR,NORB,NHAM
         WRITE(IW,8160) (NCONF(I),I=1,NORB)
         WRITE(IW,8170) '    F=',(F(I),I=1,NHAM)
         NTRI = (NHAM*NHAM+NHAM)/2
         WRITE(IW,8170) 'ALPHA=',(ALPHA(I),I=1,NTRI)
         WRITE(IW,8170) ' BETA=',( BETA(I),I=1,NTRI)
      END IF
C
      L0 = NQMT
      L1 = NUM
      L2 = (L1*L1+L1)/2
      L3 = L1*L1
      LOCS=L1-MCORE
C
C     ----- DETERMINE THE NUMBER OF INTER-SHELL ROTATIONS -----
C
      NROT=0
      DO 210 I=1,L0
         NCI = NCONF(I)
         DO 200 J=1,I
            IF(NCONF(J).NE.NCI) NROT=NROT+1
  200    CONTINUE
  210 CONTINUE
      IF(SOME) WRITE(IW,9020) NROT
      IF(TCSCF) THEN
         NROT = NROT+2
         IF (MASWRK) WRITE(IW,9030)
      END IF
C
C     FIRST, ESTABLISH MEMORY NEEDS.
C     THEN, COME BACK TO 300 AND BEGIN TO DO THE ACTUAL WORK.
C
      CHKMEM=.TRUE.
      CALL VALFM(LOADFM)
      CALL GOTFM(NGOTMX)
      IF(NWDCHF.GT.0) NGOTMX=MIN(NGOTMX,NWDCHF)
      IF (MASWRK) WRITE(IW,9040) NGOTMX
      NEED1 = 0
      NEED2 = 0
      GO TO 310
C
  300 CONTINUE
      CHKMEM=.FALSE.
      NEED = MAX(NEED1,NEED2)
      IF(NEED.GT.NGOTMX) THEN
         IF (MASWRK) THEN
            WRITE(IW,*)
     *         '**** INSUFFICIENT MEMORY FOR CP-ROHF *****'
            WRITE(IW,*) 'NEED',NEED,' WORDS.'
            WRITE(IW,*) ' GOT',NGOTMX,' WORDS.'
         END IF
         CALL ABRT
         STOP
      END IF
      IF(EXETYP.EQ.CHECK) GO TO 800
      TIM1=0.0D+00
      CALL TSECND(TIM1)
C
C     ----- TRANSFORM DIPOLE INTEGRALS TO MO BASIS -----
C
  310 CONTINUE
      LHF    = 1      + LOADFM
      LTHF   = LHF    + L2
      LV     = LTHF   + L2*NXYZ
      LWRK   = LV     + L3
      LAST   = LWRK   + L1
      NEED1  = LAST - LOADFM -1
      IF(CHKMEM) GO TO 400
      CALL GETFM(NEED1)
C
      CALL OPOLB(X(LHF),X(LTHF),X(LV),X(LWRK),L1,L2,L3,NXYZ)
C
      CALL RETFM(NEED1)
      CALL TSECND(TIM2)
      THYME = TIM2-TIM1
      IF (MASWRK) WRITE(IW,9050)
     *   'TRANSFORMING DIPOLE INTEGRALS TO MO BASIS',THYME
      TIM1 = TIM2
C
C     ----- MEMORY FOR THE CPHF -----
C     NOTE THAT -SA- FROM THE PREVIOUS STEP MUST BE THE 1ST ARRAY
C
  400 CONTINUE
      LXX    = 1      + LOADFM
      LIXX   = LXX    + NINTMX
      LEPS   = LIXX   + NINTMX
      LZETA  = LEPS   + L3
      LALP   = LZETA  + L2*(NHAM+1)
      LBET   = LALP   + L2
      LIROT  = LBET   + L2
      LHMO   = LIROT  + L3/NWDVAR + 1
      LW     = LHMO   + L2
      LDDM   = LW     + L1*NORB*NXYZ
      LDDMA  = LDDM   + NAT*9
      LSK    = LDDMA  + NAT*9
      LTHF   = LSK    + L1
      LDLPOL = LTHF   + L2*3
      LAST   = LDLPOL + NLOC*9
C
      IF(TCSCF) THEN
         LEPSIJ = LAST
         LAST   = LEPSIJ + 3*L3
      ELSE
         LEPSIJ = LAST
      END IF
C
      LB     = LAST
      LU     = LB     + NROT*NXYZ
      LAII   = LU     + NROT*NXYZ
      LUL    = LAII   + NROT
      LHL    = LUL    + LOCS*3
      LTR    = LHL    + LOCS*3
      LPOL   = LTR    + NLOC*NLOC
      LVCOC  = LPOL   + NLOC*9
      IROT   = LVCOC  + NA*3
      LAST   = IROT   + L1*L1
C
C        THE VECTOR VERSION NEEDS 4 EXTRA ARRAYS FOR TFTRI LATER.
C
      NEEDX  = LAST -LOADFM -1 + (3*L3+L1)
C
C        DECIDE UPON IN CORE OR OUT OF CORE METHOD
C
      NSOLV = NXYZ
      IF(NROT.LE.MAXEQU) NSOLV=1
C
      DMY = 2.0D+00**31 - 2*NSOLV - 4*NROT*NSOLV - 1000
      N32MAX = INT(SQRT(DMY))
      IF(NWDVAR.EQ.1  .OR.  NROT.LE.N32MAX) THEN
         NEEDIN = NEEDX + NROT*NROT + 2*NSOLV + 4*NROT*NSOLV
         INCORE = NEEDIN.LT.NGOTMX
      ELSE
         NEEDIN = 0
         INCORE = .FALSE.
      END IF
C
C        TO RUN SMALL CASES OUT OF CORE (IN 2 SLICES) FOR
C        TESTING PURPOSES, UNCOMMENT THE NEXT FEW LINES.
C            IF(INCORE) THEN
C               INCORE = .FALSE.
C               NGOTMX = NEEDX +2*NXYZ +4*NROT*NXYZ +(NROT*NROT+1)/2
C               IF(TCSCF) NGOTMX = NGOTMX + 2*NROT
C            END IF
C
      IF(INCORE) THEN
         NWIDTH = NROT
         NSLICE = 1
         LACI   = LAST
         LWRK1  = LAST
         LWRK2  = LWRK1 + NROT*NSOLV
         LWRK3  = LWRK2 + NROT*NSOLV
         LWRK4  = LWRK3 + NROT*NSOLV
         LBNRM  = LWRK4 + NROT*NSOLV
         LRESD  = LBNRM + NSOLV
         LA     = LRESD + NSOLV
         LAST   = LA    + NROT*NROT
         IF(CHKMEM .AND. MASWRK) WRITE(IW,9060)
      ELSE
         LACI   = LAST
         IF(TCSCF) LAST = LACI  + 2*NROT
         LWRK1  = LAST
         LWRK2  = LWRK1 + NROT*NSOLV
         LWRK3  = LWRK2 + NROT*NSOLV
         LWRK4  = LWRK3 + NROT*NSOLV
         LBNRM  = LWRK4 + NROT*NSOLV
         LRESD  = LBNRM + NSOLV
         LAST   = LRESD + NSOLV
         NEEDX  = LAST -LOADFM -1 + (3*L3+L1)
         NFREE  = NGOTMX - NEEDX
         NWIDTH = NFREE/NROT
         IF(NWIDTH.GT.0) THEN
            NSLICE = (NROT-1)/NWIDTH + 1
         ELSE
            NSLICE = -1
         END IF
         LA     = LAST
         LAST   = LA    + NROT*NWIDTH
         IF(NWIDTH.LE.0  .OR.  (NSLICE.GT.NAT .AND. NAT.GT.5)) THEN
            IF (MASWRK) WRITE(IW,9070)
     *         NWIDTH,NSLICE,NAT,NFREE,NEEDX,NROT
            CALL ABRT
            STOP
         END IF
         IF(CHKMEM .AND. MASWRK) WRITE(IW,9080) NSLICE,NWIDTH
      END IF
C
      NEED2  = LAST - LOADFM -1
      IF(SOME  .AND.  CHKMEM) THEN
         WRITE(IW,9090) 'DS/DA TRANSFORM',NEED1
         WRITE(IW,9090) ' CPHF EQUATIONS',NEED2
         IF(.NOT.INCORE) WRITE(IW,9100) NEEDIN
      END IF
      IF(CHKMEM) GO TO 300
      CALL GETFM(NEED2)
C
C     ----- READ BARE NUCLEUS HAMILTONIAN, PUT IN MO BASIS -----
C     TEMP ARRAYS: LALP=HAO, LEPS=V, LBET=WRK
C
      CALL DAREAD(IDAF,IODA,X(LALP),L2,11,0)
      CALL DAREAD(IDAF,IODA,X(LEPS),L3,15,0)
      CALL TFTRI(X(LHMO),X(LALP),X(LEPS),X(LBET),L0,L1,L1)
C
C     ----- SET UP THE OPEN SHELL/TCSCF CPHF EQUATIONS -----
C
      CALL ROCPA(TCSCF,X(LXX),X(LIXX),NINTMX,IA,X(LALP),X(LBET),
     *            X(LEPS),X(LZETA),X(LHMO),X(LIROT),X(LA),X(LB),
     *            X(LW),X(LEPSIJ),X(LACI),L0,L1,L2,L3,NROT,NXYZ,
     *            NHAM,NORB,OUT,INCORE,X(LTHF))
      IF(.NOT.INCORE) THEN
         SVDSKW = DSKWRK
         DSKWRK = .FALSE.
         CALL SEQOPN(NFT16,'WORK16','UNKNOWN',.FALSE.,'UNFORMATTED')
         DSKWRK = SVDSKW
         CALL ROCPOM(TCSCF,X(LXX),X(LIXX),NINTMX,IA,X(LALP),X(LBET),
     *               X(LEPS),X(LZETA),X(LIROT),X(LA),X(LACI),X(LAII),
     *               L0,L1,L2,NROT,NHAM,NWIDTH,NFT16,OUT)
      END IF
C
      CALL TSECND(TIM2)
      THYME = TIM2-TIM1
      IF (MASWRK) WRITE(IW,9050)
     *   ' SETTING UP THE CPHF EQUATIONS',THYME
      CALL FLSHBF(IW)
      TIM1 = TIM2
C
C     ----- SOLVE THE OPEN SHELL/TCSCF CPHF EQUATIONS -----
C
      NITER=0
      NPASS=0
      SVGPAR = GOPARR
      SVDSKW = DSKWRK
      GOPARR = .FALSE.
      DSKWRK = .FALSE.
      IF(MASWRK) THEN
      CALL SOLVCP(X(LA),X(LB),X(LU),NROT,NXYZ,NOCP,X(LAII),
     *            X(LWRK1),X(LWRK2),X(LWRK3),X(LWRK4),
     *            X(LBNRM),X(LRESD),NITER,NPASS,NWIDTH,NSOLV,
     *            INCORE,NFT16,MAXEQU)
      END IF
      GOPARR = SVGPAR
      DSKWRK = SVDSKW
      IF(OUT) THEN
         WRITE(IW,*) 'CPHF RESPONSE VECTORS -U-'
         CALL PRSQ(X(LU),NXYZ,NROT,NROT)
      END IF
C
      CALL TSECND(TIM2)
      THYME = TIM2-TIM1
      IF (MASWRK) THEN
         WRITE(IW,9050) 'SOLVING FOR THE CPHF RESPONSES',THYME
         IF(NITER.NE.0) WRITE(IW,9110) NUNIQ,NITER
         IF(.NOT.INCORE) WRITE(IW,9120) NPASS
      END IF
      TIM1 = TIM2
C
      CALL LOAPOL(X(LU),X(LUL),X(LTHF),X(LHL),X(LTR),X(LPOL),X(LVCOC),
     *           IA,NXYZ,L2,MCORE,NLOC,LOCS,NROT,X(IROT))
C
      CALL RETFM(NEED2)
  800 CONTINUE
      RETURN
C
 8150 FORMAT(1X,'NCO,NSETO,NOPEN,NPAIR,NORB,NHAM=',6I4)
 8170 FORMAT(1X,A6,10F10.5/(7X,10F10.5))
 8160 FORMAT(1X,'NCONF=',10I5/(7X,10I5))
C
 9000 FORMAT(/5X,41("-")/
     *        5X,'COUPLED-PERTURBED OPEN SHELL HARTREE-FOCK'/5X,41(1H-))
 9010 FORMAT(/5X,48("-")/
     *        5X,'COUPLED-PERTURBED TWO CONFIGURATION HARTREE-FOCK'/
     *        5X,48(1H-))
 9020 FORMAT(1X,'THE CPHF HAS',I8,' INDEPENDENT ORBITAL ROTATIONS.')
 9030 FORMAT(1X,'THE CPHF HAS 2 ADDITIONAL CSF ROTATIONS.')
 9040 FORMAT(1X,'THE CPHF CODE HAS',I12,' WORDS OF MEMORY AVAILABLE.')
 9050 FORMAT(5X,A30,' TOOK',F12.1,' SECONDS')
 9060 FORMAT(1X,'CHOOSING IN MEMORY CPHF ALGORITHM')
 9070 FORMAT(/1X,'*** NOT ENOUGH MEMORY TO RUN THE OUT OF MEMORY',
     *          ' CPHF CODE ***'/
     *       1X,'NWIDTH=',I10,'  NSLICE=',I10,'   NAT=',I10/
     *       1X,' NFREE=',I10,'   NEEDX=',I10,'  NROT=',I10//
     *       1X,'INCREASE THE VALUE OF MEMORY IN $CONTRL SO THAT'/
     *       1X,'NFREE=MEMORY-NEEDX AT LEAST EXCEEDS NROT*NROT/NAT'//
     *       1X,'LARGER AMOUNTS OF MEMORY ARE EVEN BETTER!')
 9080 FORMAT(1X,'CHOOSING OUT OF MEMORY CPHF ALGORITHM'/
     *       1X,'THE -A- MATRIX WILL BE FORMED IN',I5,
     *          ' SLICES OF',I5,' COLUMNS.')
 9090 FORMAT(1X,A15,' STEP WILL REQUIRE',I12,' WORDS OF MEMORY.')
 9100 FORMAT(1X,'(THE IN CORE ALGORITHM WOULD NEED',I12,' WORDS)')
 9110 FORMAT(1X,'SOLVING FOR ALL',I5,' UNIQUE RESPONSES TOOK',
     *          I5,' ITERATIONS.')
 9120 FORMAT(1X,'CONJUGATE GRADIENT SOLVER MADE',I4,
     *          ' READS OF THE EXTERNALLY STORED -A- MATRIX')
      END
C*MODULE LOCPOL    *DECK ROCPA
      SUBROUTINE ROCPA(TCSCF,XX,IX,NINTMX,IA,ALP,BET,EPS,ZETA,
     *                  HMO,IROT,A,B,W,EPSIJ,
     *                  ACI,L0,L1,L2,L3,NROT,NXYZ,NHAM,NORB,
     *                  OUT,INCORE,HF)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL INCORE,OUT,TCSCF,IOCC,JOCC,KOCC,
     *        ICOP,JCOP,KCOP,LCOP,IPR1,JPR1,KPR1,LPR1,
     *        IPR2,JPR2,KPR2,LPR2,GOPARR,MASWRK,DSKWRK
C
      DIMENSION XX(NINTMX),IX(NINTMX),IA(L1),ALP(L2),BET(L2),
     *          EPS(L1,L1),ZETA(L2,NHAM),HMO(L2),IROT(L0,L0),
     *          A(NROT,NROT),B(NROT,NXYZ),
     *          W(L1,NORB,NXYZ),
     *          EPSIJ(L1,L1,3),
     *          ACI(NROT,2),HF(L2,3)
C
      PARAMETER (MXATM=500, MXAO=2047)
C
      COMMON /FUNCT / ETOT,EG(3,MXATM)
      COMMON /GVBCI / CIHAM(91),CILOW(12),JPAIR,KONE,KTWO,KCORB(2,12)
      COMMON /GVBWFN/ CICOEF(2,12),F(25),ALPHA(325),BETA(325),NO(10),
     *                NCO,NSETO,NOPEN,NPAIR,NORBB,NCONF(MXAO),NHAMM
      COMMON /IOFILE/ IR,IW,IP,IJKO,IJKT,IDAF,NAV,IODA(400)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /PCKLAB/ LABSIZ
C
      PARAMETER (ZERO=0.0D+00, HALF=0.5D+00, ONE=1.0D+00, TWO=2.0D+00)
C
C     ----- SET UP GENERAL OPEN SHELL CPHF PROBLEM -----
C     IF -INCORE- IS TRUE, SET UP THE ENTIRE ORBITAL HESSIAN -A-
C     IN MEMORY, -ACI- IS NOT USED IN THIS CASE.
C     OTHERWISE, -A- IS NOT COMPUTED, ALTHOUGH THE POSSIBLE TCSCF
C     CI TERMS ARE COMPUTED IN -ACI-.
C
C     ALL THE OTHER ARRAYS SUCH AS -EPS- OR -ZETA- AND -W- AND SO ON
C     ARE ALWAYS FORMED IN MEMORY BY THIS ROUTINE.
C
      VALHF = ZERO
      VAL4  = ZERO
      AFACT = ZERO
      BFACT = ZERO
      ICOP = .FALSE.
      JCOP = .FALSE.
      KCOP = .FALSE.
      LCOP = .FALSE.
      IPR1 = .FALSE.
      JPR1 = .FALSE.
      KPR1 = .FALSE.
      LPR1 = .FALSE.
      IPR2 = .FALSE.
      JPR2 = .FALSE.
      KPR2 = .FALSE.
      LPR2 = .FALSE.
      NCLOP = NCO+NOPEN
C
C     FIRST FILL ALPHA AND BETA COUPLING COEFFICIENT MATRICES
C
      CALL VCLR(ALP,1,L2)
      CALL VCLR(BET,1,L2)
      IJ=0
      DO 110 I=1,NORB
         DO 100 J=1,I
            IJ = IJ + 1
            ISH = NCONF(I)
            JSH = NCONF(J)
            IJSH = IA(ISH) + JSH
            ALP(IJ) = ALPHA(IJSH)
            BET(IJ) =  BETA(IJSH)
  100    CONTINUE
  110 CONTINUE
C
C     ----- SET UP ROTATION INDEX ARRAY -----
C
      MROT=0
      DO 220 I=1,L0
         ISH = NCONF(I)
         DO 210 J=1,I
            JSH = NCONF(J)
            IF(JSH.EQ.ISH) THEN
               IROT(I,J) = 0
               IROT(J,I) = 0
            ELSE
               MROT=MROT+1
               IROT(I,J) = MROT
               IROT(J,I) = MROT
            END IF
  210    CONTINUE
  220 CONTINUE
      IF(TCSCF) MROT = MROT+2
      IF(MROT.NE.NROT) CALL ABRT
C
C     ZERO OUT CPHF -A- AND -B- MATRICES, AND THE -W- MATRIX
C     ZERO OUT LAGRANGIAN -EPS- AND GENERALIZED LAGRANGIANS -ZETA-
C     FOR TCSCF, ZERO OUT BARE LAGRANGIANS -EPSIJ-
C
      IF(INCORE) THEN
         CALL VCLR(A,1,NROT*NROT)
      ELSE
         IF(TCSCF) CALL VCLR(ACI,1,NROT*2)
      END IF
      CALL VCLR(B,1,NROT*NXYZ)
      CALL VCLR(EPS,1,L3)
      CALL VCLR(ZETA,1,L2*NHAM)
      IF(TCSCF) CALL VCLR(EPSIJ,1,3*L3)
C
C     ----- READ IN 2 ELECTRON MO INTEGRALS -----
C
      CALL SEQREW(IJKT)
      IF (MASWRK) READ(IJKT)
C
  300 CONTINUE
      CALL PREAD(IJKT,XX,IX,NX,NINTMX)
      IF(NX.EQ.0) GO TO 900
      MX=ABS(NX)
      IF(MX.GT.NINTMX) CALL ABRT
C
C     ----- UNPACK LABEL AND PROCESS INTEGRAL -----
C     TRANSFORMED INTEGRALS ASSUMED IN REVERSE CANONICAL ORDER
C
      DO 800 M=1,MX
      VAL   =  XX(M)
C
                       NPACK = M
                       IF (LABSIZ .EQ. 2) THEN
#if !defined(SPEC_CPU_ILP64)
                         LABEL1 = IX( 2*NPACK - 1 )
                         LABEL2 = IX( 2*NPACK     )
                         IPACK = ISHFT( LABEL1, -16 )
                         JPACK = IAND( LABEL1, 65535 )
                         KPACK = ISHFT( LABEL2, -16 )
                         LPACK = IAND( LABEL2, 65535 )
#endif
#if defined(SPEC_CPU_ILP64)
                         LABEL = IX(NPACK)
                         IPACK = ISHFT( LABEL, -48 )
                         JPACK = IAND( ISHFT( LABEL, -32 ), 65535 )
                         KPACK = IAND( ISHFT( LABEL, -16 ), 65535 )
                         LPACK = IAND( LABEL, 65535 )
#endif
                       ELSE IF (LABSIZ .EQ. 1) THEN
#if !defined(SPEC_CPU_ILP64)
                         LABEL = IX(NPACK)
                         IPACK = ISHFT( LABEL, -24 )
                         JPACK = IAND( ISHFT( LABEL, -16 ), 255 )
                         KPACK = IAND( ISHFT( LABEL,  -8 ), 255 )
                         LPACK = IAND( LABEL, 255 )
#endif
#if defined(SPEC_CPU_ILP64)
                         IF ( MOD(NPACK,2) .EQ. 0 ) THEN
                           LABEL = IX( NPACK/2 )
                           IPACK = IAND( ISHFT( LABEL, -24 ), 255 )
                           JPACK = IAND( ISHFT( LABEL, -16 ), 255 )
                           KPACK = IAND( ISHFT( LABEL,  -8 ), 255 )
                           LPACK = IAND( LABEL, 255 )
                         ELSE
                           LABEL = IX( (NPACK/2)+1 )
                           IPACK = ISHFT( LABEL, -56 )
                           JPACK = IAND( ISHFT( LABEL, -48 ), 255 )
                           KPACK = IAND( ISHFT( LABEL, -40 ), 255 )
                           LPACK = IAND( ISHFT( LABEL, -32 ), 255 )
                         END IF
#endif
                       END IF
                       K = IPACK
                       L = JPACK
                       I = KPACK
                       J = LPACK
C
      IF(J.EQ.I           ) VAL=VAL*HALF
      IF(L.EQ.K           ) VAL=VAL*HALF
      IF(K.EQ.I.AND.L.EQ.J) VAL=VAL*HALF
      VAL2 = VAL+VAL
C
      IJ = IA(I)+J
      IK = IA(I)+K
      IL = IA(I)+L
      KL = IA(K)+L
      JK = IA(MAX(J,K))+MIN(J,K)
      JL = IA(MAX(J,L))+MIN(J,L)
C
      ISH = NCONF(I)
      JSH = NCONF(J)
      KSH = NCONF(K)
      LSH = NCONF(L)
C
      IOCC = I.LE.NORB
      JOCC = J.LE.NORB
      KOCC = K.LE.NORB
C
      IF(TCSCF) THEN
         VALHF = VAL*HALF
         VAL4 = VAL2 + VAL2
C
         ICOP = I.LE.NCLOP
         JCOP = J.LE.NCLOP
         KCOP = K.LE.NCLOP
         LCOP = L.LE.NCLOP
C
         IPR1 = I.EQ.NORB-1
         JPR1 = J.EQ.NORB-1
         KPR1 = K.EQ.NORB-1
         LPR1 = L.EQ.NORB-1
C
         IPR2 = I.EQ.NORB
         JPR2 = J.EQ.NORB
         KPR2 = K.EQ.NORB
         LPR2 = L.EQ.NORB
      END IF
C
C                  COULOMB CONTRIBUTIONS TO -EPS- AND -ZETA-
C                                             (I,I//K,L)
C
      IF(IOCC  .AND.  I.EQ.J) THEN
         IF(TCSCF) THEN
            IF(ICOP) THEN
               IF(KCOP) THEN
                  EPSIJ(K,L,1) = EPSIJ(K,L,1) + ALP(IK)*VAL2
                  EPSIJ(K,L,3) = EPSIJ(K,L,3) + ALP(IK)*VAL2
               ELSE IF(KPR1) THEN
                  EPSIJ(K,L,1) = EPSIJ(K,L,1) + F(NCONF(I))*VAL4
               ELSE IF(KPR2) THEN
                  EPSIJ(K,L,3) = EPSIJ(K,L,3) + F(NCONF(I))*VAL4
               END IF
               IF(LCOP) THEN
                  EPSIJ(L,K,1) = EPSIJ(L,K,1) + ALP(IL)*VAL2
                  EPSIJ(L,K,3) = EPSIJ(L,K,3) + ALP(IL)*VAL2
               ELSE IF(LPR1) THEN
                  EPSIJ(L,K,1) = EPSIJ(L,K,1) + F(NCONF(I))*VAL4
               ELSE IF(LPR2) THEN
                  EPSIJ(L,K,3) = EPSIJ(L,K,3) + F(NCONF(I))*VAL4
               END IF
            ELSE IF(IPR1) THEN
               IF(KCOP) THEN
                  EPSIJ(K,L,1) = EPSIJ(K,L,1) + F(NCONF(K))*VAL4
               ELSE IF(KPR1) THEN
                  EPSIJ(K,L,1) = EPSIJ(K,L,1) + VAL2
               END IF
               IF(LCOP) THEN
                  EPSIJ(L,K,1) = EPSIJ(L,K,1) + F(NCONF(L))*VAL4
               ELSE IF(LPR1) THEN
                  EPSIJ(L,K,1) = EPSIJ(L,K,1) + VAL2
               END IF
            ELSE IF(IPR2) THEN
               IF(KCOP) THEN
                  EPSIJ(K,L,3) = EPSIJ(K,L,3) + F(NCONF(K))*VAL4
               ELSE IF(KPR2) THEN
                  EPSIJ(K,L,3) = EPSIJ(K,L,3) + VAL2
               END IF
               IF(LCOP) THEN
                  EPSIJ(L,K,3) = EPSIJ(L,K,3) + F(NCONF(L))*VAL4
               ELSE IF(LPR2) THEN
                  EPSIJ(L,K,3) = EPSIJ(L,K,3) + VAL2
               END IF
            END IF
         ELSE
            EPS(K,L)=EPS(K,L) + ALP(IK)*VAL2
            EPS(L,K)=EPS(L,K) + ALP(IL)*VAL2
         END IF
         DO 410 MSH=1,NHAM
            IM = IA(MAX(ISH,MSH))+MIN(ISH,MSH)
            ZETA(KL,MSH)=ZETA(KL,MSH) + ALPHA(IM)*VAL2
  410    CONTINUE
      END IF
C                                             (I,J//K,K)
      IF(KOCC  .AND.  K.EQ.L) THEN
         IF(TCSCF) THEN
            IF(KCOP) THEN
               IF(ICOP) THEN
                  EPSIJ(I,J,1) = EPSIJ(I,J,1) + ALP(IK)*VAL2
                  EPSIJ(I,J,3) = EPSIJ(I,J,3) + ALP(IK)*VAL2
               ELSE IF(IPR1) THEN
                  EPSIJ(I,J,1) = EPSIJ(I,J,1) + F(NCONF(K))*VAL4
               ELSE IF(IPR2) THEN
                  EPSIJ(I,J,3) = EPSIJ(I,J,3) + F(NCONF(K))*VAL4
               END IF
               IF(JCOP) THEN
                  EPSIJ(J,I,1) = EPSIJ(J,I,1) + ALP(JK)*VAL2
                  EPSIJ(J,I,3) = EPSIJ(J,I,3) + ALP(JK)*VAL2
               ELSE IF(JPR1) THEN
                  EPSIJ(J,I,1) = EPSIJ(J,I,1) + F(NCONF(K))*VAL4
               ELSE IF(JPR2) THEN
                  EPSIJ(J,I,3) = EPSIJ(J,I,3) + F(NCONF(K))*VAL4
               END IF
            ELSE IF(KPR1) THEN
               IF(ICOP) THEN
                  EPSIJ(I,J,1) = EPSIJ(I,J,1) + F(NCONF(I))*VAL4
               ELSE IF(IPR1) THEN
                  EPSIJ(I,J,1) = EPSIJ(I,J,1) + VAL2
               END IF
               IF(JCOP) THEN
                  EPSIJ(J,I,1) = EPSIJ(J,I,1) + F(NCONF(J))*VAL4
               ELSE IF(JPR1) THEN
                  EPSIJ(J,I,1) = EPSIJ(J,I,1) + VAL2
               END IF
            ELSE IF(KPR2) THEN
               IF(ICOP) THEN
                  EPSIJ(I,J,3) = EPSIJ(I,J,3) + F(NCONF(I))*VAL4
               ELSE IF(IPR2) THEN
                  EPSIJ(I,J,3) = EPSIJ(I,J,3) + VAL2
               END IF
               IF(JCOP) THEN
                  EPSIJ(J,I,3) = EPSIJ(J,I,3) + F(NCONF(J))*VAL4
               ELSE IF(JPR2) THEN
                  EPSIJ(J,I,3) = EPSIJ(J,I,3) + VAL2
               END IF
            END IF
         ELSE
            EPS(I,J)=EPS(I,J) + ALP(IK)*VAL2
            EPS(J,I)=EPS(J,I) + ALP(JK)*VAL2
         END IF
         DO 420 MSH=1,NHAM
            KM = IA(MAX(MSH,KSH))+MIN(MSH,KSH)
            ZETA(IJ,MSH)=ZETA(IJ,MSH) + ALPHA(KM)*VAL2
  420    CONTINUE
      END IF
C
C                  EXCHANGE CONTRIBUTIONS TO -EPS- AND -ZETA-
C                                             (I,J//I,L)
      IF(IOCC  .AND.  I.EQ.K) THEN
         IF(TCSCF) THEN
            IF(ICOP) THEN
               IF(JCOP) THEN
                  EPSIJ(J,L,1) = EPSIJ(J,L,1) + BET(IJ)*VAL
                  EPSIJ(J,L,3) = EPSIJ(J,L,3) + BET(IJ)*VAL
               ELSE IF(JPR1) THEN
                  EPSIJ(J,L,1) = EPSIJ(J,L,1) - F(NCONF(I))*VAL
               ELSE IF(JPR2) THEN
                  EPSIJ(J,L,3) = EPSIJ(J,L,3) - F(NCONF(I))*VAL
               END IF
               IF(LCOP) THEN
                  EPSIJ(L,J,1) = EPSIJ(L,J,1) + BET(IL)*VAL
                  EPSIJ(L,J,3) = EPSIJ(L,J,3) + BET(IL)*VAL
               ELSE IF(LPR1) THEN
                  EPSIJ(L,J,1) = EPSIJ(L,J,1) - F(NCONF(I))*VAL
               ELSE IF(LPR2) THEN
                  EPSIJ(L,J,3) = EPSIJ(L,J,3) - F(NCONF(I))*VAL
               END IF
            ELSE IF(IPR1) THEN
               IF(JCOP) THEN
                  EPSIJ(J,L,1) = EPSIJ(J,L,1) - F(NCONF(J))*VAL
               ELSE IF(JPR2) THEN
                  EPSIJ(J,L,2) = EPSIJ(J,L,2) + VALHF
               END IF
               IF(LCOP) THEN
                  EPSIJ(L,J,1) = EPSIJ(L,J,1) - F(NCONF(L))*VAL
               ELSE IF(LPR2) THEN
                  EPSIJ(L,J,2) = EPSIJ(L,J,2) + VALHF
               END IF
            ELSE IF(IPR2) THEN
               IF(JCOP) THEN
                  EPSIJ(J,L,3) = EPSIJ(J,L,3) - F(NCONF(J))*VAL
               ELSE IF(JPR1) THEN
                  EPSIJ(J,L,2) = EPSIJ(J,L,2) + VALHF
               END IF
               IF(LCOP) THEN
                  EPSIJ(L,J,3) = EPSIJ(L,J,3) - F(NCONF(L))*VAL
               ELSE IF(LPR1) THEN
                  EPSIJ(L,J,2) = EPSIJ(L,J,2) + VALHF
               END IF
            END IF
         ELSE
            EPS(J,L)=EPS(J,L) + BET(IJ)*VAL
            EPS(L,J)=EPS(L,J) + BET(IL)*VAL
         END IF
         DO 510 MSH=1,NHAM
            IM = IA(MAX(ISH,MSH))+MIN(ISH,MSH)
            ZETA(JL,MSH)=ZETA(JL,MSH) + BETA(IM)*VAL
  510    CONTINUE
      END IF
C                                             (I,J//K,I)
      IF(IOCC  .AND.  I.EQ.L) THEN
         IF(TCSCF) THEN
            IF(ICOP) THEN
               IF(JCOP) THEN
                  EPSIJ(J,K,1) = EPSIJ(J,K,1) + BET(IJ)*VAL
                  EPSIJ(J,K,3) = EPSIJ(J,K,3) + BET(IJ)*VAL
               ELSE IF(JPR1) THEN
                  EPSIJ(J,K,1) = EPSIJ(J,K,1) - F(NCONF(I))*VAL
               ELSE IF(JPR2) THEN
                  EPSIJ(J,K,3) = EPSIJ(J,K,3) - F(NCONF(I))*VAL
               END IF
               IF(KCOP) THEN
                  EPSIJ(K,J,1) = EPSIJ(K,J,1) + BET(IK)*VAL
                  EPSIJ(K,J,3) = EPSIJ(K,J,3) + BET(IK)*VAL
               ELSE IF(KPR1) THEN
                  EPSIJ(K,J,1) = EPSIJ(K,J,1) - F(NCONF(I))*VAL
               ELSE IF(KPR2) THEN
                  EPSIJ(K,J,3) = EPSIJ(K,J,3) - F(NCONF(I))*VAL
               END IF
            ELSE IF(IPR1) THEN
               IF(JCOP) THEN
                  EPSIJ(J,K,1) = EPSIJ(J,K,1) - F(NCONF(J))*VAL
               ELSE IF(JPR2) THEN
                  EPSIJ(J,K,2) = EPSIJ(J,K,2) + VALHF
               END IF
               IF(KCOP) THEN
                  EPSIJ(K,J,1) = EPSIJ(K,J,1) - F(NCONF(K))*VAL
               ELSE IF(KPR2) THEN
                  EPSIJ(K,J,2) = EPSIJ(K,J,2) + VALHF
               END IF
            ELSE IF(IPR2) THEN
               IF(JCOP) THEN
                  EPSIJ(J,K,3) = EPSIJ(J,K,3) - F(NCONF(J))*VAL
               ELSE IF(JPR1) THEN
                  EPSIJ(J,K,2) = EPSIJ(J,K,2) + VALHF
               END IF
               IF(KCOP) THEN
                  EPSIJ(K,J,3) = EPSIJ(K,J,3) - F(NCONF(K))*VAL
               ELSE IF(KPR1) THEN
                  EPSIJ(K,J,2) = EPSIJ(K,J,2) + VALHF
               END IF
            END IF
         ELSE
            EPS(J,K)=EPS(J,K) + BET(IJ)*VAL
            EPS(K,J)=EPS(K,J) + BET(IK)*VAL
         END IF
         DO 520 MSH=1,NHAM
            IM = IA(MAX(ISH,MSH))+MIN(ISH,MSH)
            ZETA(JK,MSH)=ZETA(JK,MSH) + BETA(IM)*VAL
  520    CONTINUE
      END IF
C                                             (I,J//J,L)
      IF(JOCC  .AND.  J.EQ.K) THEN
         IF(TCSCF) THEN
            IF(JCOP) THEN
               IF(ICOP) THEN
                  EPSIJ(I,L,1) = EPSIJ(I,L,1) + BET(IJ)*VAL
                  EPSIJ(I,L,3) = EPSIJ(I,L,3) + BET(IJ)*VAL
               ELSE IF(IPR1) THEN
                  EPSIJ(I,L,1) = EPSIJ(I,L,1) - F(NCONF(J))*VAL
               ELSE IF(IPR2) THEN
                  EPSIJ(I,L,3) = EPSIJ(I,L,3) - F(NCONF(J))*VAL
               END IF
               IF(LCOP) THEN
                  EPSIJ(L,I,1) = EPSIJ(L,I,1) + BET(JL)*VAL
                  EPSIJ(L,I,3) = EPSIJ(L,I,3) + BET(JL)*VAL
               ELSE IF(LPR1) THEN
                  EPSIJ(L,I,1) = EPSIJ(L,I,1) - F(NCONF(J))*VAL
               ELSE IF(LPR2) THEN
                  EPSIJ(L,I,3) = EPSIJ(L,I,3) - F(NCONF(J))*VAL
               END IF
            ELSE IF(JPR1) THEN
               IF(ICOP) THEN
                  EPSIJ(I,L,1) = EPSIJ(I,L,1) - F(NCONF(I))*VAL
               ELSE IF(IPR2) THEN
                  EPSIJ(I,L,2) = EPSIJ(I,L,2) + VALHF
               END IF
               IF(LCOP) THEN
                  EPSIJ(L,I,1) = EPSIJ(L,I,1) - F(NCONF(L))*VAL
               ELSE IF(LPR2) THEN
                  EPSIJ(L,I,2) = EPSIJ(L,I,2) + VALHF
               END IF
            ELSE IF(JPR2) THEN
               IF(ICOP) THEN
                  EPSIJ(I,L,3) = EPSIJ(I,L,3) - F(NCONF(I))*VAL
               ELSE IF(IPR1) THEN
                  EPSIJ(I,L,2) = EPSIJ(I,L,2) + VALHF
               END IF
               IF(LCOP) THEN
                  EPSIJ(L,I,3) = EPSIJ(L,I,3) - F(NCONF(L))*VAL
               ELSE IF(LPR1) THEN
                  EPSIJ(L,I,2) = EPSIJ(L,I,2) + VALHF
               END IF
            END IF
         ELSE
            EPS(I,L)=EPS(I,L) + BET(IJ)*VAL
            EPS(L,I)=EPS(L,I) + BET(JL)*VAL
         END IF
         DO 530 MSH=1,NHAM
            JM = IA(MAX(JSH,MSH))+MIN(JSH,MSH)
            ZETA(IL,MSH)=ZETA(IL,MSH) + BETA(JM)*VAL
  530    CONTINUE
      END IF
C                                             (I,J//K,J)
      IF(JOCC  .AND.  J.EQ.L) THEN
         IF(TCSCF) THEN
            IF(JCOP) THEN
               IF(ICOP) THEN
                  EPSIJ(I,K,1) = EPSIJ(I,K,1) + BET(IJ)*VAL
                  EPSIJ(I,K,3) = EPSIJ(I,K,3) + BET(IJ)*VAL
               ELSE IF(IPR1) THEN
                  EPSIJ(I,K,1) = EPSIJ(I,K,1) - F(NCONF(J))*VAL
               ELSE IF(IPR2) THEN
                  EPSIJ(I,K,3) = EPSIJ(I,K,3) - F(NCONF(J))*VAL
               END IF
               IF(KCOP) THEN
                  EPSIJ(K,I,1) = EPSIJ(K,I,1) + BET(JK)*VAL
                  EPSIJ(K,I,3) = EPSIJ(K,I,3) + BET(JK)*VAL
               ELSE IF(KPR1) THEN
                  EPSIJ(K,I,1) = EPSIJ(K,I,1) - F(NCONF(J))*VAL
               ELSE IF(KPR2) THEN
                  EPSIJ(K,I,3) = EPSIJ(K,I,3) - F(NCONF(J))*VAL
               END IF
            ELSE IF(JPR1) THEN
               IF(ICOP) THEN
                  EPSIJ(I,K,1) = EPSIJ(I,K,1) - F(NCONF(I))*VAL
               ELSE IF(IPR2) THEN
                  EPSIJ(I,K,2) = EPSIJ(I,K,2) + VALHF
               END IF
               IF(KCOP) THEN
                  EPSIJ(K,I,1) = EPSIJ(K,I,1) - F(NCONF(K))*VAL
               ELSE IF(KPR2) THEN
                  EPSIJ(K,I,2) = EPSIJ(K,I,2) + VALHF
               END IF
            ELSE IF(JPR2) THEN
               IF(ICOP) THEN
                  EPSIJ(I,K,3) = EPSIJ(I,K,3) - F(NCONF(I))*VAL
               ELSE IF(IPR1) THEN
                  EPSIJ(I,K,2) = EPSIJ(I,K,2) + VALHF
               END IF
               IF(KCOP) THEN
                  EPSIJ(K,I,3) = EPSIJ(K,I,3) - F(NCONF(K))*VAL
               ELSE IF(KPR1) THEN
                  EPSIJ(K,I,2) = EPSIJ(K,I,2) + VALHF
               END IF
            END IF
         ELSE
            EPS(I,K)=EPS(I,K) + BET(IJ)*VAL
            EPS(K,I)=EPS(K,I) + BET(JK)*VAL
         END IF
         DO 540 MSH=1,NHAM
            JM = IA(MAX(JSH,MSH))+MIN(JSH,MSH)
            ZETA(IK,MSH)=ZETA(IK,MSH) + BETA(JM)*VAL
  540    CONTINUE
      END IF
C
C                  INTEGRAL CONTRIBUTIONS TO -A- MATRIX
C                                              (I,J//K,L)
      IF(.NOT.INCORE) GO TO 800
      IF(ISH.NE.JSH  .AND.  KSH.NE.LSH) THEN
         IJROT = IROT(I,J)
         KLROT = IROT(K,L)
         IF(IJROT.LT.KLROT) THEN
            NN    = IJROT
            IJROT = KLROT
            KLROT = NN
         END IF
         AFACT = ALP(IK)-ALP(JK)-ALP(IL)+ALP(JL)
         A(IJROT,KLROT) = A(IJROT,KLROT) + AFACT*VAL2
      END IF
C                                         (I,K//J,L) AND (I,L//J,K)
      IF(ISH.NE.KSH  .AND.  JSH.NE.LSH) THEN
         IKROT=IROT(I,K)
         JLROT=IROT(J,L)
         IF(IKROT.LT.JLROT) THEN
            NN    = IKROT
            IKROT = JLROT
            JLROT = NN
         END IF
         IF(J.GE.L) BFACT =  BET(IJ) -BET(JK) -BET(IL) +BET(KL)
         IF(J.LT.L) BFACT =  BET(IL) -BET(KL) -BET(IJ) +BET(JK)
         A(IKROT,JLROT) = A(IKROT,JLROT) + BFACT*VAL
      END IF
C                                         (I,L//K,J) AND (I,K//L,J)
      IF(ISH.NE.LSH  .AND.  JSH.NE.KSH) THEN
         ILROT=IROT(I,L)
         JKROT=IROT(J,K)
         IF(ILROT.LT.JKROT) THEN
            NN    = ILROT
            ILROT = JKROT
            JKROT = NN
         END IF
         IF(K.GE.J) BFACT =  BET(IK) -BET(KL) -BET(IJ) +BET(JL)
         IF(K.LT.J) BFACT =  BET(IJ) -BET(JL) -BET(IK) +BET(KL)
         A(ILROT,JKROT) = A(ILROT,JKROT) + BFACT*VAL
      END IF
C
C                  AND GO BACK FOR ANOTHER INTEGRAL BUFFER.
C
  800 CONTINUE
      IF(NX.GT.0) GO TO 300
C
C                  DONE WITH 2 ELECTRON INTEGRALS
C
  900 CONTINUE
      CALL SEQREW(IJKT)
C
C     IF RUNNING IN PARALLEL, WE MUST SUM ALL INTEGRAL CONTRIBUTIONS
C
      IF(GOPARR) THEN
         IF(TCSCF)  CALL DDI_GSUMF(2111,EPSIJ,3*L3)
                    CALL DDI_GSUMF(2112,EPS  ,L3)
                    CALL DDI_GSUMF(2113,ZETA ,L2*NHAM)
                    CALL DDI_GSUMF(2114,B    ,NROT*NXYZ)
         IF(INCORE) CALL GSUMCP(2116,A,NROT*NROT)
      END IF
C
C     DOUBLE THE DIAGONALS, SYMMETRIZE, AND SIGN CHANGE.
C
      II = 0
      DO 920 I=1,L1
         II = II + I
         DO 910 MSH=1,NHAM
            ZETA(II,MSH) = ZETA(II,MSH)+ZETA(II,MSH)
  910    CONTINUE
  920 CONTINUE
C
      IF(.NOT.INCORE) GO TO 980
      DO 950 IJROT=1,NROT
         A(IJROT,IJROT) = A(IJROT,IJROT)+A(IJROT,IJROT)
         DO 940 KLROT=1,IJROT
            A(KLROT,IJROT) = A(IJROT,KLROT)
  940    CONTINUE
  950 CONTINUE
C
  980 CONTINUE
      CALL DSCAL(L1*NORB*NXYZ,-ONE,W,1)
C
C        FOR TCSCF, ADD THE ONE ELECTRON TERM TO -EPSIJ-,
C                   AND FORM THE TOTAL LAGRANGIAN -EPS-.
C
      IF(TCSCF) THEN
         M = NORB-1
         N = NORB
         DO 1010 I=1,NORB
            FI = F(NCONF(I))
            IF(I.EQ.M  .OR.  I.EQ.N) FI = ONE
            DO 1000 J=1,L1
               IJ = IA(MAX(I,J)) + MIN(I,J)
               IF(I.NE.N) EPSIJ(I,J,1) = FI*HMO(IJ) + EPSIJ(I,J,1)
               IF(I.NE.M) EPSIJ(I,J,3) = FI*HMO(IJ) + EPSIJ(I,J,3)
 1000       CONTINUE
 1010    CONTINUE
C
         DO 1030 I=1,L1
            DO 1020 J=1,L1
               EPS(I,J) = CICOEF(1,1)*CICOEF(1,1)*EPSIJ(I,J,1) +
     *              TWO * CICOEF(1,1)*CICOEF(2,1)*EPSIJ(I,J,2) +
     *                    CICOEF(2,1)*CICOEF(2,1)*EPSIJ(I,J,3)
 1020       CONTINUE
 1030    CONTINUE
C
         IF(OUT) THEN
            WRITE(IW,*) 'CICOEF=', CICOEF(1,1),CICOEF(2,1)
            WRITE(IW,*) 'EPS(1,1) MATRIX'
            CALL PRSQ(EPSIJ(1,1,1),L1,L1,L1)
            WRITE(IW,*) 'EPS(1,2) MATRIX'
            CALL PRSQ(EPSIJ(1,1,2),L1,L1,L1)
            WRITE(IW,*) 'EPS(2,2) MATRIX'
            CALL PRSQ(EPSIJ(1,1,3),L1,L1,L1)
         END IF
C
C        FOR NON-TCSCF, SIMPLY ADD THE ONE ELECTRON TERM TO -EPS-
C
      ELSE
         IJ=0
         DO 1060 I=1,L1
            FI = ZERO
            IF(I.LE.NORB) FI = F(NCONF(I))
            DO 1050 J=1,L1
               IJ = IA(MAX(I,J)) + MIN(I,J)
               EPS(I,J) = FI*HMO(IJ) + EPS(I,J)
 1050       CONTINUE
 1060    CONTINUE
      END IF
C
C        ADD THE ONE ELECTRON CONTRIBUTIONS TO -ZETA-
C
      DO 1080 MSH=1,NHAM
         CALL DAXPY(L2,F(MSH),HMO,1,ZETA(1,MSH),1)
 1080 CONTINUE
C
C        THE VIRTUAL SHELL -ZETA- IS IDENTICALLY ZERO
C
      CALL VCLR(ZETA(1,NHAM+1),1,L2)
C
      IF(OUT) THEN
         WRITE(IW,*) 'LAGRANGIAN -EPS- IN MO BASIS IS'
         CALL PRSQ(EPS,L1,L1,L1)
         DO 1090 MSH=1,NHAM
            WRITE(IW,*) 'GEN.LAG. -ZETA- FOR SHELL',MSH
            CALL PRTRI(ZETA(1,MSH),L1)
 1090    CONTINUE
      END IF
C
      DSKWRK = .FALSE.
C
C     ----- LAGRANGIAN CONTRIBUTIONS TO -A- MATRIX -----
C
      IF(.NOT.INCORE) GO TO 1300
      DO 1250 I=1,L0
         ISH = NCONF(I)
         DO 1240 J=1,I
            JSH = NCONF(J)
            IF(ISH.EQ.JSH) GO TO 1240
            IJROT = IROT(I,J)
            DO 1230 K=1,L0
               KSH = NCONF(K)
               DO 1220 L=1,K
                  LSH = NCONF(L)
                  IF(KSH.EQ.LSH) GO TO 1220
                  KLROT = IROT(K,L)
C
                  IF(J.EQ.K) THEN
                     IL = IA(MAX(I,L)) + MIN(I,L)
                     A(IJROT,KLROT) = A(IJROT,KLROT) + EPS(I,L)
     *                                               - ZETA(IL,JSH)
                  END IF
C
                  IF(I.EQ.K) THEN
                     JL = IA(MAX(J,L)) + MIN(J,L)
                     A(IJROT,KLROT) = A(IJROT,KLROT) - EPS(J,L)
     *                                               + ZETA(JL,ISH)
                  END IF
C
                  IF(J.EQ.L) THEN
                     IK = IA(MAX(I,K)) + MIN(I,K)
                     A(IJROT,KLROT) = A(IJROT,KLROT) - EPS(I,K)
     *                                               + ZETA(IK,JSH)
                  END IF
C
                  IF(I.EQ.L) THEN
                     JK = IA(MAX(J,K)) + MIN(J,K)
                     A(IJROT,KLROT) = A(IJROT,KLROT) + EPS(J,K)
     *                                               - ZETA(JK,ISH)
                  END IF
 1220          CONTINUE
 1230       CONTINUE
 1240    CONTINUE
 1250 CONTINUE
C
 1300 CONTINUE
C
C        ----- ADD TCSCF CI DERIVATIVE TERMS -----
C        THE A11 AND B1-A BLOCKS ARE COMPLETE AT THIS POINT.
C
      IF(.NOT.TCSCF) GO TO 2000
      MROT = NROT-1
C
C                                 A22 BLOCK
C
      IF(INCORE) THEN
         A(MROT,MROT) = HALF*(CIHAM(1) -ETOT + CICOEF(1,1)*CICOEF(1,1))
         A(MROT,NROT) = HALF*(CIHAM(2)       + CICOEF(1,1)*CICOEF(2,1))
         A(NROT,MROT) = A(MROT,NROT)
         A(NROT,NROT) = HALF*(CIHAM(3) -ETOT + CICOEF(2,1)*CICOEF(2,1))
      ELSE
         ACI(MROT,1) = HALF*(CIHAM(1) -ETOT + CICOEF(1,1)*CICOEF(1,1))
         ACI(MROT,2) = HALF*(CIHAM(2)       + CICOEF(1,1)*CICOEF(2,1))
         ACI(NROT,1) = ACI(MROT,2)
         ACI(NROT,2) = HALF*(CIHAM(3) -ETOT + CICOEF(2,1)*CICOEF(2,1))
      END IF
C
C                                 A21 BLOCK
C
      DO 1520 I=1,L0
         DO 1510 J=1,I
            IJROT=IROT(I,J)
            IF(IJROT.EQ.0) GO TO 1510
C
            DUM = TWO*(CICOEF(1,1)*(EPSIJ(J,I,1)-EPSIJ(I,J,1))
     *               + CICOEF(2,1)*(EPSIJ(J,I,2)-EPSIJ(I,J,2)))
            IF(INCORE) THEN
               A(IJROT,MROT) = DUM
               A(MROT,IJROT) = DUM
            ELSE
               ACI(IJROT,1) = DUM
            END IF
C
            DUM = TWO*(CICOEF(1,1)*(EPSIJ(J,I,2)-EPSIJ(I,J,2))
     *               + CICOEF(2,1)*(EPSIJ(J,I,3)-EPSIJ(I,J,3)))
            IF(INCORE) THEN
               A(IJROT,NROT) = DUM
               A(NROT,IJROT) = DUM
            ELSE
               ACI(IJROT,2) = DUM
            END IF
 1510    CONTINUE
 1520 CONTINUE
C
C
 2000 CONTINUE
C
C      ---- IF CALCULATING ALPHA POLARIZABILITIES NEED TO SET UP ----
C      ---- 3 EXTRA COLUMNS OF -B- MATRIX                         ----
C
         CALL DAREAD(IDAF,IODA,HF(1,1),L2,252,0)
         CALL DAREAD(IDAF,IODA,HF(1,2),L2,253,0)
         CALL DAREAD(IDAF,IODA,HF(1,3),L2,254,0)
C
         DO 2100 I=1,L0
            ISH = NCONF(I)
            DO 2110 J=1,I
               JSH = NCONF(J)
               IJROT = IROT(I,J)
               IF(IJROT.EQ.0) GO TO 2100
               IF(ISH.EQ.JSH) GO TO 2110
               FIJ  = F(ISH) - F(JSH)
               IJ = IA(I) + J
                   B(IJROT,1)=FIJ*HF(IJ,1)
                   B(IJROT,2)=FIJ*HF(IJ,2)
                   B(IJROT,3)=FIJ*HF(IJ,3)
 2110       CONTINUE
 2100    CONTINUE
C
C     ---- ADD POSSIBLE CI CONTRIBUTIONS TO -B- MATRIX ----
C
         IF(TCSCF) THEN
            NCOPO=NORBB-2*NPAIR
            DUMX = ZERO
            DUMY = ZERO
            DUMZ = ZERO
            DO 2150 I=1,NCOPO
               II = IA(I) + I
               ISH = NCONF(I)
               DUMX = DUMX + F(ISH)*HF(II,1)
               DUMY = DUMY + F(ISH)*HF(II,2)
               DUMZ = DUMZ + F(ISH)*HF(II,3)
 2150       CONTINUE
C
            HMNX=ZERO
            HMNY=ZERO
            HMNZ=ZERO
            DO 2155 I=NORBB-1,NORBB
               ISH = NCONF(I)
               II = IA(I) + I
               HMNX=HMNX+F(ISH)*HF(II,1)
               HMNY=HMNY+F(ISH)*HF(II,2)
               HMNZ=HMNZ+F(ISH)*HF(II,3)
 2155       CONTINUE
C
            DO 2160 ICI=1,2
               IJROT=NROT-2+ICI
               NP=NCOPO+ICI
               ISH = NCONF(NP)
               II = IA(NP) + NP
               DUMAX = TWO*(DUMX + HF(II,1))
               DUMAY = TWO*(DUMY + HF(II,2))
               DUMAZ=  TWO*(DUMZ + HF(II,3))
               B(IJROT,1)=CICOEF(ICI,1)*(DUMX+HMNX)
     *                         -HALF*CICOEF(ICI,1)*DUMAX
               B(IJROT,2)=CICOEF(ICI,1)*(DUMY+HMNY)
     *                         -HALF*CICOEF(ICI,1)*DUMAY
               B(IJROT,3)=CICOEF(ICI,1)*(DUMZ+HMNZ)
     *                         -HALF*CICOEF(ICI,1)*DUMAZ
 2160       CONTINUE
         END IF
C
C     ----- REVERSE THE SIGN OF -B- FROM THAT IN THE PAPERS -----
C
      CALL DSCAL(NROT*NXYZ,-ONE,B,1)
C
      IF(OUT) THEN
         IF(INCORE) THEN
            WRITE(IW,*) 'THE CPHF -A- MATRIX IS'
            CALL PRSQ(A,NROT,NROT,NROT)
         END IF
         IF(.NOT.INCORE  .AND.  TCSCF) THEN
            WRITE(IW,*) 'THE CPHF -ACI- MATRIX IS'
            CALL PRSQ(ACI,2,NROT,NROT)
         END IF
         WRITE(IW,*) 'THE CPHF -B- MATRIX IS'
         CALL PRSQ(B,NXYZ,NROT,NROT)
      END IF
      RETURN
      END
C*MODULE LOCPOL    *DECK ROTPOL
      SUBROUTINE ROTPOL(DLPOL,VCOC,NLOC,IDLOC,MCORE)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL MOIDON,EDCOMP,DIPDCM,QADDCM,DEPRNT,ZDO,
     *        POLDCM,POLANG,POLAPP,KMIDPT
C
      DIMENSION DLPOL(9,NLOC),VCOC(NA*3)
      DIMENSION T(3,3),Q1(9),Q2(9),WRK(3)
C
      PARAMETER (TM6=1.0D-06)
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, TWO=2.0D+00)
      PARAMETER (MXATM=500, NMO=500)
C
      COMMON /EDCMP / MOIDNO(5,NMO),ZIJ(NMO),ZMO(5,NMO),IJMO(2,NMO),
     *                MOIJ(NMO),NMOIJ(NMO),NMOAT(NMO),OCCUP(NMO),MOIDON,
     *                EDCOMP,DIPDCM,IPROT(5),NPROT,DEPRNT,QADDCM,ZDO,
     *                POLDCM,POLANG,POLAPP,KMIDPT
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(400)
C
      CALL DAREAD(IDAF,IODA,VCOC,NA*3,250,0)
C
      IJ=((IDLOC-1)*3) + (3*MCORE)
      IK=IDLOC+MCORE
      IF (NMOAT(IK).EQ.1) THEN
         DX=VCOC(IJ+1)-C(1,MOIDNO(1,IK))
         DY=VCOC(IJ+2)-C(2,MOIDNO(1,IK))
         DZ=VCOC(IJ+3)-C(3,MOIDNO(1,IK))
      ELSE
         DX=C(1,MOIDNO(1,IK))-C(1,MOIDNO(2,IK))
         DY=C(2,MOIDNO(1,IK))-C(2,MOIDNO(2,IK))
         DZ=C(3,MOIDNO(1,IK))-C(3,MOIDNO(2,IK))
      END IF
C
      DTOT = SQRT(DX**2+DY**2+DZ**2)
      DXY = SQRT(DX**2+DY**2)
C
      CALL VCLR(T,1,9)
C
      IF (DXY/TWO .LE.TM6) THEN
         T(1,1) = ONE
         T(2,2) = ONE
         T(3,3) = ONE
      ELSE
         T(1,1) =  DY/DXY
         T(2,1) = -DX/DXY
         T(3,1) =  ZERO
         T(1,2) =  DX*DZ/(DTOT*DXY)
         T(2,2) =  DY*DZ/(DTOT*DXY)
         T(3,2) = -DXY  /DTOT
         T(1,3) =  DX/DTOT
         T(2,3) =  DY/DTOT
         T(3,3) =  DZ/DTOT
      END IF
C
      Q1(1)=DLPOL(1,IDLOC)
      Q1(2)=DLPOL(2,IDLOC)
      Q1(3)=DLPOL(3,IDLOC)
      Q1(4)=DLPOL(4,IDLOC)
      Q1(5)=DLPOL(5,IDLOC)
      Q1(6)=DLPOL(6,IDLOC)
      Q1(7)=DLPOL(7,IDLOC)
      Q1(8)=DLPOL(8,IDLOC)
      Q1(9)=DLPOL(9,IDLOC)
C
      CALL TFSQU(Q2,Q1,T,WRK,3,3)
C
      DLPOL(1,IDLOC)=Q2(1)
      DLPOL(2,IDLOC)=Q2(2)
      DLPOL(3,IDLOC)=Q2(3)
      DLPOL(4,IDLOC)=Q2(4)
      DLPOL(5,IDLOC)=Q2(5)
      DLPOL(6,IDLOC)=Q2(6)
      DLPOL(7,IDLOC)=Q2(7)
      DLPOL(8,IDLOC)=Q2(8)
      DLPOL(9,IDLOC)=Q2(9)
C
      RETURN
      END
C*MODULE LOCPOL    *DECK POLAPM
      SUBROUTINE POLAPM(SOME,NXYZ,MCORE,NLOC)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL SOME
C
      PARAMETER (MXATM=500)
C
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM)
C
      NXYZ = 3
      NORB = NUM
      NOCC = NA
      NVIR = NORB - NOCC
      NROT = NOCC * NVIR
C
      NUM2 =(NUM*NUM+NUM)/2
      NUM3 = NUM*NUM
C
      IF(NVIR .EQ. 0) RETURN
C
C     ---- MEMORY ALLOCATION FOR CALCULATION OF U AND ALPHA
C          POLARIZABILITY MATRICES ----
C
      CALL VALFM(LOADFM)
C
      LB   = 1+LOADFM
      LU   = LB   + NROT*NXYZ
      LH   = LU   + NROT*NXYZ
      LUL  = LH   + NUM2*3
      LHL  = LUL  + NVIR*3
      LE   = LHL  + NVIR*3
      LHP  = LE   + NUM
      LTR  = LHP  + NUM*NUM
      LPOL = LTR  + NLOC*NLOC
      LVCOC= LPOL + NLOC*9
      LC   = LVCOC+ NA*3
      LT   = LC   + NUM3
      LD   = LT   + NUM
      LAST = LD   + NUM2
      NEED = LAST - LOADFM - 1
C
      CALL GETFM(NEED)
C
      CALL POLAP(X(LU),X(LH),X(LUL),X(LHL),X(LE),X(LHP),X(LTR),
     *           X(LPOL),X(LVCOC),X(LC),X(LT),X(LD),SOME,
     *           NXYZ,MCORE,NLOC,NORB,NUM2,NROT,NOCC,NVIR)
C
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE LOCPOL    *DECK POLAP
      SUBROUTINE POLAP(U,HF,UL,HFL,E,HFP,TRAN,DLPOL,VCOC,
     *                 CX,T,D,SOME,NXYZ,MCORE,NLOC,
     *                 NORB,NUM2,NROT,NOCC,NVIR)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL SOME
C
      PARAMETER (MXATM=500, MXAO=2047)
C
      DIMENSION U(NOCC,NVIR,NXYZ),UL(NVIR,3),HF(NUM2,3),HFL(NVIR,3),
     *          E(NUM),HFP(NUM,NUM),CX(NUM,NUM),T(NUM),D(NUM2)
C
      COMMON /IJPAIR/ IA(MXAO)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJKO,IJKT,IDAF,NAV,IODA(400)
C
C  ---CALCULATE U CHEAPER, USE U=MUIJ/EI-EJ
C
      IF(SOME) WRITE(IW,9000)
      NXYZ = 3
      NORB = NUM
      NOCC = NA
      NVIR = NORB - NOCC
      NROT = NOCC * NVIR
C
      NUM2 =(NUM*NUM+NUM)/2
      NUM3 = NUM*NUM
C
      IF(NVIR .EQ. 0) RETURN
C
C  TRANSFORM DIPOLE INTEGRALS TO MO BASIS AND WRITE FOR LATER USE
C
C    READ MO VECTORS
C
      CALL DAREAD(IDAF,IODA,CX,NUM3,15,0)
C
      CALL DAREAD(IDAF,IODA,D,NUM2,95,0)
      CALL TFTRI(HF(1,1),D,CX,T,NORB,NUM,NUM)
      CALL DAREAD(IDAF,IODA,D,NUM2,96,0)
      CALL TFTRI(HF(1,2),D,CX,T,NORB,NUM,NUM)
      CALL DAREAD(IDAF,IODA,D,NUM2,97,0)
      CALL TFTRI(HF(1,3),D,CX,T,NORB,NUM,NUM)
C
      CALL DAWRIT(IDAF,IODA,HF(1,1),NUM2,252,0)
      CALL DAWRIT(IDAF,IODA,HF(1,2),NUM2,253,0)
      CALL DAWRIT(IDAF,IODA,HF(1,3),NUM2,254,0)
C
C   GET THE DIPOLE TENSORS, PUT INTO HF
C
C      CALL DAREAD(IDAF,IODA,HF(1,1),NUM2,252,0)
C      CALL DAREAD(IDAF,IODA,HF(1,2),NUM2,253,0)
C      CALL DAREAD(IDAF,IODA,HF(1,3),NUM2,254,0)
C
C   GET RHF ORBITAL ENERGIES, PUT INTO E
C
      CALL DAREAD(IDAF,IODA,E,NUM,17,0)
C
C   CALCULATE U
C
      DO 300 IXYZ=1,NXYZ
         CALL CPYTSQ(HF(1,IXYZ),HFP,NUM,1)
         IL=0
         DO 320 IVIR=NA+1,NUM
            IL=IL+1
            DO 340 IOCC=1,NOCC
               U(IOCC,IL,IXYZ)=HFP(IOCC,IVIR)/(E(IOCC)-E(IVIR))
  340       CONTINUE
  320    CONTINUE
  300 CONTINUE
C
C     ----- CALCULATE LOCALIZED ALPHA POLARIZABILITIES ----
C
      CALL LAPOL(U,UL,HF,HFL,TRAN,DLPOL,VCOC,
     *           IA,NXYZ,NUM2,NOCC,NVIR,MCORE,NLOC)
C
      RETURN
C
 9000 FORMAT(/5X,43("-")/
     *        5X,' CALCULATING U USING TRUNCATED PERTURBATION '/
     *        5X,43(1H-))
      END
